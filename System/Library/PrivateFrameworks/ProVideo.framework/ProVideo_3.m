void sub_1B2951508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,PCString a29)
{
  PCString::~PCString(&a29);
  _Unwind_Resume(a1);
}

uint64_t TXNumberGenerator::updateFormatter(TXNumberGenerator *this)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (id *)((char *)this + 64408);
  v2 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E0CA2E68], 0.0) - 1;
  if (v2 >= 4)
    v3 = 0;
  else
    v3 = v2 + 2;
  objc_msgSend(v1[260], "setNumberStyle:", v3);
  return objc_msgSend(v1[260], "setLocale:", *v1);
}

uint64_t TXNumberGenerator::getPreviewSceneNode(TXNumberGenerator *this)
{
  uint64_t v1;
  const void *SceneNode;
  TXTextLayout *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  CMTime v8;
  PCSharedCount v9;
  __int128 v10;

  v1 = theApp;
  v10 = xmmword_1B3054B80;
  PCSharedCount::PCSharedCount(&v9);
  SceneNode = (const void *)OZApplication::createSceneNode(v1, (unsigned int *)&v10, (uint64_t)&v9, 0);
  if (SceneNode)
  else
    v3 = 0;
  PCString::~PCString((PCString *)&v9);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v10);
  if ((_QWORD)v10)
  {
    v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    OZChannel::setValue((OZChannel *)(v10 + 1976), &v8, 24.0, 0);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v3)
    return (uint64_t)v3 + 200;
  else
    return 0;
}

void sub_1B2951694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, char a13)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void TXNumberGenerator::didAddToScene(TXNumberGenerator *this, OZScene *a2)
{
  OZPreferenceManager *v3;
  _BYTE *v4;
  OZPreferenceManager *v5;
  double FirstFrameNumber;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double Seconds;
  OZChannel *v11;
  __n128 v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  CMTime time;

  TXTextGenerator::didAddToScene(this, a2);
  v4 = (char *)this + 66496;
  if (!*((_BYTE *)this + 66496))
  {
    v5 = (OZPreferenceManager *)OZPreferenceManager::Instance(v3);
    FirstFrameNumber = OZPreferenceManager::getFirstFrameNumber(v5);
    v8 = *((_QWORD *)this + 25);
    v7 = (char *)this + 200;
    (*(void (**)(_QWORD *__return_ptr, char *))(v8 + 1128))(v13, v7);
    v16 = v14;
    v17 = v15;
    v9 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 272))(v7);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), &v12);
    operator/(&v16, (uint64_t)&v12, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    v11 = (OZChannel *)(v7 + 64816);
    if (FirstFrameNumber == 0.0)
      Seconds = Seconds + -1.0;
    OZChannel::setDefaultValue(v11, Seconds);
    OZChannelBase::reset((OZChannelBase *)v11, 0);
    *v4 = 1;
  }
}

void `non-virtual thunk to'TXNumberGenerator::didAddToScene(TXNumberGenerator *this, OZScene *a2)
{
  TXNumberGenerator::didAddToScene((TXNumberGenerator *)((char *)this - 200), a2);
}

uint64_t TXNumberGenerator::writeBody(TXNumberGenerator *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v7;
  PCString v9;

  TXTextLayout::writeBody(this, a2, a3, a4, a5);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXNumberGeneratorScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  v7 = (const void *)MEMORY[0x1B5E27CDC](*((_QWORD *)this + 8051));
  PCURL::PCURL((PCURL *)&v9, v7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(_QWORD *)a2 + 200))(a2, 2, &v9);
  PCString::~PCString(&v9);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B295183C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXNumberGenerator::writeBody(TXNumberGenerator *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return TXNumberGenerator::writeBody((TXNumberGenerator *)((char *)this - 200), a2, a3, a4, a5);
}

{
  return TXNumberGenerator::writeBody((TXNumberGenerator *)((char *)this - 248), a2, a3, a4, a5);
}

uint64_t TXNumberGenerator::parseBegin(TXNumberGenerator *this, PCSerializerReadStream *a2)
{
  TXTextLayout::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXNumberGeneratorScope);
  return 1;
}

uint64_t `non-virtual thunk to'TXNumberGenerator::parseBegin(TXNumberGenerator *this, PCSerializerReadStream *a2)
{
  TXTextLayout::parseBegin((TXNumberGenerator *)((char *)this - 200), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXNumberGeneratorScope);
  return 1;
}

{
  TXTextLayout::parseBegin((TXNumberGenerator *)((char *)this - 248), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXNumberGeneratorScope);
  return 1;
}

uint64_t TXNumberGenerator::parseElement(TXNumberGenerator *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  void *v6;
  PCSharedCount v8;

  if (*((_DWORD *)a3 + 2) == 1)
  {
    PCSharedCount::PCSharedCount(&v8);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v8);
    v6 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DC8]), "initWithLocaleIdentifier:", PCString::ns_str((PCString *)&v8));
    TXTextLayout::setLocale(this, v6);

    PCString::~PCString((PCString *)&v8);
  }
  TXTextLayout::parseElement(this, a2, a3);
  return 1;
}

void sub_1B29519B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXNumberGenerator::parseElement(TXNumberGenerator *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  TXNumberGenerator::parseElement((TXNumberGenerator *)((char *)this - 200), a2, a3);
  return 1;
}

{
  TXNumberGenerator::parseElement((TXNumberGenerator *)((char *)this - 248), a2, a3);
  return 1;
}

void OZChannelSeed::OZChannelSeed(OZChannelSeed *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelSeed_FactoryBase;
  OZChannelSeed *v15;
  OZChannelSeed *OZChannelSeedInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelSeed_FactoryBase = (OZFactory *)getOZChannelSeed_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelSeed_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E65531D8;
  this->var2 = (void **)&unk_1E6553538;
  OZChannelSeedInfo = (OZChannelSeed *)OZChannelSeed::createOZChannelSeedInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelSeed::_OZChannelSeedInfo;
    this->var17 = (OZChannelInfo *)OZChannelSeed::_OZChannelSeedInfo;
  }
  this->var16 = var17;
  OZChannelSeed::createOZChannelSeedImpl(OZChannelSeedInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelSeed::_OZChannelSeedImpl;
    this->var15 = (OZChannelImpl *)OZChannelSeed::_OZChannelSeedImpl;
  }
  this->var14 = var15;
}

void sub_1B2951ADC(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelSeed::createOZChannelSeedInfo(OZChannelSeed *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelSeed::createOZChannelSeedInfo(void)::_OZChannelSeedInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelSeed::createOZChannelSeedInfo(void)::_OZChannelSeedInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelSeed::createOZChannelSeedInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelSeed::_OZChannelSeedInfo;
}

uint64_t OZChannelSeed::createOZChannelSeedImpl(OZChannelSeed *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelSeed::createOZChannelSeedImpl(void)::_OZChannelSeedImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelSeed::createOZChannelSeedImpl(void)::_OZChannelSeedImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelSeed::createOZChannelSeedImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelSeed::_OZChannelSeedImpl;
}

void std::__call_once_param<std::tuple<OZChannelSeed::createOZChannelSeedInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelSeedInfo *v0;

  if (!OZChannelSeed::_OZChannelSeedInfo)
  {
    v0 = (OZChannelSeedInfo *)operator new();
    OZChannelSeedInfo::OZChannelSeedInfo(v0);
    OZChannelSeed::_OZChannelSeedInfo = (uint64_t)v0;
  }
}

void sub_1B2951C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelSeedInfo::OZChannelSeedInfo(OZChannelSeedInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 4294967300.0, 1.0, 1.0, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E6507120;
  *((_QWORD *)this + 10) = &unk_1E6507140;
}

void sub_1B2951C8C(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelSeed::createOZChannelSeedImpl(void)::{lambda(void)#1} &&>>()
{
  OZChannelSeed::createOZChannelSeedImpl(void)::{lambda(void)#1}::operator()();
}

void OZChannelSeed::createOZChannelSeedImpl(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  OZCurveEnum *v1;

  if (!OZChannelSeed::_OZChannelSeedImpl)
  {
    v0 = operator new();
    v1 = (OZCurveEnum *)operator new();
    OZCurveEnum::OZCurveEnum(v1, 0.0);
    OZChannelImpl::OZChannelImpl((OZChannelImpl *)v0, (OZCurve *)v1, 0.0, 0, 1);
    PCSingleton::PCSingleton((PCSingleton *)(v0 + 40), 100);
    *(_QWORD *)v0 = &unk_1E6507198;
    *(_QWORD *)(v0 + 40) = &unk_1E65071B8;
    OZChannelSeed::_OZChannelSeedImpl = v0;
  }
}

void sub_1B2951D5C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void OZCurveEnum::OZCurveEnum(OZCurveEnum *this, double a2)
{
  OZCurveEnumSplineState *v3;
  uint64_t Instance;
  uint64_t v5;
  uint64_t v6;

  OZCurve::OZCurve((OZCurve *)this, 0.0, 4294967300.0, 1.0, a2);
  *(_QWORD *)v3 = &unk_1E6507210;
  Instance = OZCurveEnumSplineState::getInstance(v3);
  if (Instance)
    v5 = Instance + 8;
  else
    v5 = 0;
  OZCurve::setSplineState((uint64_t)this, v5);
  v6 = *((_QWORD *)this + 20);
  *(_DWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 2) = 0;
  (*(void (**)(OZCurveEnum *, _QWORD))(*(_QWORD *)this + 80))(this, 0);
}

void sub_1B2951E34(_Unwind_Exception *a1)
{
  OZCurve *v1;

  OZCurve::~OZCurve(v1);
  _Unwind_Resume(a1);
}

uint64_t OZCurveEnumSplineState::getInstance(OZCurveEnumSplineState *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZCurveEnumSplineState::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZCurveEnumSplineState::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZCurveEnumSplineState::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return OZCurveEnumSplineState::_instance;
}

OZCurve *OZCurveEnum::getCurveWorkingCopy(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 1);
  *(_QWORD *)v2 = &unk_1E6507210;
  return v2;
}

void sub_1B2951F00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

OZCurve *OZCurveEnum::cloneCurve(const OZCurve *this)
{
  OZCurve *v2;

  v2 = (OZCurve *)operator new();
  OZCurve::OZCurve(v2, this, 0);
  *(_QWORD *)v2 = &unk_1E6507210;
  return v2;
}

void sub_1B2951F7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

void getCharacterSets(void)
{
  unsigned __int8 v0;
  _BYTE v1[2168];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  if ((v0 & 1) == 0)
  {
    {
      memcpy(v1, "a", sizeof(v1));
      std::vector<TXUnicodeBlock>::vector[abi:ne180100](&getCharacterSets(void)::sCharacterSets, v1, 0x10FuLL);
      __cxa_atexit((void (*)(void *))std::vector<TXUnicodeBlock>::~vector[abi:ne180100], &getCharacterSets(void)::sCharacterSets, &dword_1B2737000);
    }
  }
}

void sub_1B2952064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t TXOffsetUnicodeChar(uint64_t a1, int a2)
{
  _DWORD *v4;
  unsigned int v6;

  getCharacterSets();
  v4 = (_DWORD *)getCharacterSets(void)::sCharacterSets;
  getCharacterSets();
  if (v4 != (_DWORD *)qword_1EF074C28)
  {
    while (*v4 > a1 || v4[1] < a1)
    {
      v4 += 2;
      if (v4 == (_DWORD *)qword_1EF074C28)
      {
        v4 = (_DWORD *)qword_1EF074C28;
        break;
      }
    }
  }
  getCharacterSets();
  if (v4 != (_DWORD *)qword_1EF074C28)
  {
    v6 = v4[1];
    a1 = (a2 + a1);
    if (a1 > v6)
      return (a1 + ~v6) % (v6 - *v4 + 1) + *v4;
  }
  return a1;
}

BOOL TXCharacterSetIsLowercase(UniChar a1)
{
  if (TXCharacterSetIsLowercase::onceToken != -1)
    dispatch_once(&TXCharacterSetIsLowercase::onceToken, &__block_literal_global_52);
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsLowercase::kLowercaseLetterCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z25TXCharacterSetIsLowercasej_block_invoke()
{
  CFCharacterSetRef result;

  result = CFCharacterSetGetPredefined(kCFCharacterSetLowercaseLetter);
  TXCharacterSetIsLowercase::kLowercaseLetterCharacterSet = (uint64_t)result;
  return result;
}

BOOL TXCharacterSetIsPunctuation(UniChar a1)
{
  if (TXCharacterSetIsPunctuation::onceToken != -1)
    dispatch_once(&TXCharacterSetIsPunctuation::onceToken, &__block_literal_global_2_0);
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsPunctuation::kPunctuationCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z27TXCharacterSetIsPunctuationj_block_invoke()
{
  CFCharacterSetRef result;

  result = CFCharacterSetGetPredefined(kCFCharacterSetPunctuation);
  TXCharacterSetIsPunctuation::kPunctuationCharacterSet = (uint64_t)result;
  return result;
}

BOOL TXCharacterSetIsWhitespace(UniChar a1)
{
  if (TXCharacterSetIsWhitespace::onceToken != -1)
    dispatch_once(&TXCharacterSetIsWhitespace::onceToken, &__block_literal_global_4);
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsWhitespace::kWhitespaceCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z26TXCharacterSetIsWhitespacej_block_invoke()
{
  CFCharacterSetRef result;

  result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespace);
  TXCharacterSetIsWhitespace::kWhitespaceCharacterSet = (uint64_t)result;
  return result;
}

BOOL TXCharacterSetIsWhitespaceOrNewline(UniChar a1)
{
  if (TXCharacterSetIsWhitespaceOrNewline::onceToken != -1)
    dispatch_once(&TXCharacterSetIsWhitespaceOrNewline::onceToken, &__block_literal_global_6);
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsWhitespaceOrNewline::kWhitespaceAndNewlineCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z35TXCharacterSetIsWhitespaceOrNewlinej_block_invoke()
{
  CFCharacterSetRef result;

  result = CFCharacterSetGetPredefined(kCFCharacterSetWhitespaceAndNewline);
  TXCharacterSetIsWhitespaceOrNewline::kWhitespaceAndNewlineCharacterSet = (uint64_t)result;
  return result;
}

BOOL TXCharacterSetIsNewline(UniChar a1)
{
  if (TXCharacterSetIsNewline::onceToken != -1)
    dispatch_once(&TXCharacterSetIsNewline::onceToken, &__block_literal_global_8);
  return CFCharacterSetIsCharacterMember((CFCharacterSetRef)TXCharacterSetIsNewline::kNewlineCharacterSet, a1) != 0;
}

CFCharacterSetRef ___Z23TXCharacterSetIsNewlinej_block_invoke()
{
  CFCharacterSetRef result;

  result = CFCharacterSetGetPredefined(kCFCharacterSetNewline);
  TXCharacterSetIsNewline::kNewlineCharacterSet = (uint64_t)result;
  return result;
}

_QWORD *std::vector<TXUnicodeBlock>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<double>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1B29523FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TXUnicodeBlock>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void TXTextFromFileGenerator::TXTextFromFileGenerator(TXTextFromFileGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  char *v5;
  _QWORD *v6;
  PCString v7;
  PCString v8;

  v5 = (char *)this + 64456;
  TXFileLoadingGenerator::TXFileLoadingGenerator(this, a2, a3, a4);
  *v6 = off_1E65078C0;
  v6[25] = &unk_1E6507DC0;
  v6[27] = &unk_1E6508698;
  v6[31] = &off_1E65078C0[518];
  v6[841] = &off_1E65078C0[529];
  v6[2372] = &off_1E65078C0[556];
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0;
  v5[32] = 0;
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text From File Generator Name"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 64496), &v8, (OZChannelFolder *)((char *)this + 648), 0x1F8u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text From File Generator Speed Enum"));
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text From File Generator Speed"));
  OZChannelEnum::OZChannelEnum((TXTextFromFileGenerator *)((char *)this + 64624), &v8, &v7, (OZChannelFolder *)((char *)this + 64496), 0x1F6u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text From File Generator Custom Speed"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 64880), 0.0, &v8, (OZChannelFolder *)((char *)this + 64496), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text From File Generator Random"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65032), &v8, (OZChannelFolder *)((char *)this + 64496), 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text From File Generator Random Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 65184), &v8, (OZChannelFolder *)((char *)this + 64496), 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::PCString(&v8, "");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65336), 1, &v8, (OZChannelFolder *)((char *)this + 64496), 0x1F9u, 2u, 0, 0);
  PCString::~PCString(&v8);
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text From File Generator Name"));
  (*(void (**)(TXTextFromFileGenerator *, PCString *, _QWORD))(*(_QWORD *)this + 536))(this, &v8, 0);
  PCString::~PCString(&v8);
  *v5 = 0;
}

void sub_1B295271C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString *v10;
  OZChannelFolder *v11;
  OZChannelEnum *v12;
  OZChannelPercent *v13;
  OZChannelBool *v14;
  OZChannel *v15;
  OZChannelBool *v16;
  uint64_t v17;
  void **v18;
  void *v20;

  PCString::~PCString(&a10);
  OZChannelBool::~OZChannelBool(v16);
  OZChannel::~OZChannel(v15);
  OZChannelBool::~OZChannelBool(v14);
  OZChannelPercent::~OZChannelPercent(v13);
  OZChannelEnum::~OZChannelEnum(v12);
  OZChannelFolder::~OZChannelFolder(v11);
  v20 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v17 + 16) = v20;
    operator delete(v20);
  }
  TXFileLoadingGenerator::~TXFileLoadingGenerator(v10);
  _Unwind_Resume(a1);
}

void sub_1B29527B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2952778);
}

void sub_1B29527C0()
{
  JUMPOUT(0x1B2952778);
}

void sub_1B29527C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2952780);
}

void sub_1B29527D8()
{
  JUMPOUT(0x1B2952780);
}

void sub_1B29527E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2952788);
}

void sub_1B2952800()
{
  JUMPOUT(0x1B2952788);
}

void sub_1B2952808(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2952790);
}

void sub_1B2952818()
{
  JUMPOUT(0x1B2952790);
}

void TXTextFromFileGenerator::TXTextFromFileGenerator(TXTextFromFileGenerator *this, const TXTextFromFileGenerator *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  OZChannelFolder *v8;
  const __CFURL **v9;
  BOOL v10;
  const PCString **v11;
  const PCString **v12;
  const PCString *v13;
  PCString *v14;
  unint64_t v15;
  PCString **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  PCString **v23;
  char *v24;
  char *v25;
  PCString *v26;
  PCString v27;

  v5 = (char *)this + 64464;
  v6 = (char *)a2 + 64464;
  TXFileLoadingGenerator::TXFileLoadingGenerator(this, a2, a3);
  *(_QWORD *)v7 = off_1E65078C0;
  *(_QWORD *)(v7 + 200) = &unk_1E6507DC0;
  *(_QWORD *)(v7 + 216) = &unk_1E6508698;
  *(_QWORD *)(v7 + 248) = &off_1E65078C0[518];
  *(_QWORD *)(v7 + 6728) = &off_1E65078C0[529];
  *(_QWORD *)(v7 + 18976) = &off_1E65078C0[556];
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = 0;
  v5[24] = v6[24];
  v8 = (OZChannelFolder *)(v7 + 64496);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v7 + 64496), (const OZChannelFolder *)((char *)a2 + 64496), (OZChannelFolder *)(v7 + 648));
  OZChannelEnum::OZChannelEnum((TXTextFromFileGenerator *)((char *)this + 64624), (const TXTextFromFileGenerator *)((char *)a2 + 64624), v8);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 64880), (const OZChannelBase *)((char *)a2 + 64880), v8);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65032), (const OZChannelBase *)((char *)a2 + 65032), v8);
  OZChannel::OZChannel((OZChannel *)((char *)this + 65184), (const OZChannelBase *)a2 + 582, v8);
  *((_QWORD *)this + 8148) = &off_1E65531D8;
  *((_QWORD *)this + 8150) = &unk_1E6553538;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65336), (const OZChannelBase *)((char *)a2 + 65336), v8);
  v9 = (const __CFURL **)((char *)a2 + 64432);
  PCURL::getFilename(v9, &v27);
  v10 = PCString::empty(&v27);
  PCString::~PCString(&v27);
  if (!v10)
    PCURL::operator=((const void **)this + 8054, v9);
  v11 = *(const PCString ***)v6;
  v12 = (const PCString **)*((_QWORD *)v6 + 1);
  if (*(const PCString ***)v6 != v12)
  {
    do
    {
      v13 = *v11;
      v14 = (PCString *)operator new();
      PCString::PCString(v14, v13);
      v16 = (PCString **)*((_QWORD *)v5 + 1);
      v15 = *((_QWORD *)v5 + 2);
      if ((unint64_t)v16 >= v15)
      {
        v18 = ((uint64_t)v16 - *(_QWORD *)v5) >> 3;
        if ((unint64_t)(v18 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v19 = v15 - *(_QWORD *)v5;
        v20 = v19 >> 2;
        if (v19 >> 2 <= (unint64_t)(v18 + 1))
          v20 = v18 + 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v20;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v5 + 16), v21);
        else
          v22 = 0;
        v23 = (PCString **)&v22[8 * v18];
        *v23 = v14;
        v17 = v23 + 1;
        v25 = *(char **)v5;
        v24 = (char *)*((_QWORD *)v5 + 1);
        if (v24 != *(char **)v5)
        {
          do
          {
            v26 = (PCString *)*((_QWORD *)v24 - 1);
            v24 -= 8;
            *--v23 = v26;
          }
          while (v24 != v25);
          v24 = *(char **)v5;
        }
        *(_QWORD *)v5 = v23;
        *((_QWORD *)v5 + 1) = v17;
        *((_QWORD *)v5 + 2) = &v22[8 * v21];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v16 = v14;
        v17 = v16 + 1;
      }
      *((_QWORD *)v5 + 1) = v17;
      ++v11;
    }
    while (v11 != v12);
  }
}

void sub_1B2952ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannel *a10, OZChannelBool *a11, OZChannelPercent *a12, OZChannelEnum *a13, PCString a14)
{
  PCString *v14;
  uint64_t v15;
  OZChannelFolder *v16;
  void *v18;

  OZChannelBool::~OZChannelBool(a9);
  OZChannel::~OZChannel(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelPercent::~OZChannelPercent(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelFolder::~OZChannelFolder(v16);
  v18 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v18;
    operator delete(v18);
  }
  TXFileLoadingGenerator::~TXFileLoadingGenerator(v14);
  _Unwind_Resume(a1);
}

void TXTextFromFileGenerator::~TXTextFromFileGenerator(TXTextFromFileGenerator *this)
{
  char *v2;
  void *v3;

  v2 = (char *)this + 64464;
  *(_QWORD *)this = off_1E65078C0;
  *((_QWORD *)this + 25) = &unk_1E6507DC0;
  *((_QWORD *)this + 27) = &unk_1E6508698;
  *((_QWORD *)this + 31) = &off_1E65078C0[518];
  *((_QWORD *)this + 841) = &off_1E65078C0[529];
  *((_QWORD *)this + 2372) = &off_1E65078C0[556];
  TXTextFromFileGenerator::clearText((PCString *)this);
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65336));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65184));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65032));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 64880));
  OZChannelEnum::~OZChannelEnum((TXTextFromFileGenerator *)((char *)this + 64624));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64496));
  v3 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *((_QWORD *)v2 + 1) = v3;
    operator delete(v3);
  }
  TXFileLoadingGenerator::~TXFileLoadingGenerator((PCString *)this);
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator(this);
  JUMPOUT(0x1B5E29170);
}

PCString *TXTextFromFileGenerator::clearText(PCString *this)
{
  PCString *v1;
  PCString **var0;
  PCString **v3;

  v1 = this + 8058;
  var0 = (PCString **)this[8058].var0;
  v3 = (PCString **)this[8059].var0;
  if (var0 != v3)
  {
    do
    {
      this = *var0;
      if (*var0)
      {
        PCString::~PCString(this);
        this = (PCString *)MEMORY[0x1B5E29170]();
      }
      *var0++ = 0;
    }
    while (var0 != v3);
    var0 = (PCString **)v1->var0;
  }
  v1[1].var0 = (__CFString *)var0;
  return this;
}

void `non-virtual thunk to'TXTextFromFileGenerator::~TXTextFromFileGenerator(TXTextFromFileGenerator *this)
{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 200));
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 216));
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 248));
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 6728));
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 18976));
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextFromFileGenerator::~TXTextFromFileGenerator((TXTextFromFileGenerator *)((char *)this - 18976));
  JUMPOUT(0x1B5E29170);
}

void TXTextFromFileGenerator::generateString(TXTextFromFileGenerator *this, PCString *a2, CMTime *a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _QWORD *v11;
  double v12;
  uint64_t v13;
  double Seconds;
  uint64_t v15;
  double v16;
  double v17;
  const __CFString *v18;
  int v19;
  double *v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  double *v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  unint64_t v32;
  int v33;
  int v34;
  unsigned int ValueAsInt;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  long double v49;
  CMTime v50;
  CMTime time;
  __n128 v52;
  CMTimeEpoch v53;
  __n128 v54;
  CMTimeEpoch v55;
  CMTime v56;
  PCString v57[2];
  CMTimeEpoch v58;
  CMTime v59;
  CMTime v60;
  __n128 v61;
  CMTimeEpoch v62;
  CMTime v63;
  CMTime time2;
  CMTime time1;

  v6 = (char *)this + 200;
  v5 = *((_QWORD *)this + 25);
  v60 = *a3;
  v7 = (*(uint64_t (**)(char *))(v5 + 640))((char *)this + 200);
  (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v7 + 712))(v57);
  v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v6 + 272))(v6);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v54);
  time1 = v60;
  *(__n128 *)&time2.value = v54;
  time2.epoch = v55;
  v9 = PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v56);
  v10 = (*(uint64_t (**)(char *, __n128))(*(_QWORD *)v6 + 272))(v6, v9);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), &v52);
  *(_OWORD *)&time1.value = *(_OWORD *)&v57[0].var0;
  time1.epoch = v58;
  time2 = v56;
  if (CMTimeCompare(&time1, &time2) <= 0)
  {
    *(_OWORD *)&time1.value = *(_OWORD *)&v57[0].var0;
    time1.epoch = v58;
    time2 = v59;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v63);
    time1 = v63;
    *(__n128 *)&time2.value = v52;
    time2.epoch = v53;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v61);
    time1 = v56;
    *(__n128 *)&time2.value = v61;
    time2.epoch = v62;
    if (CMTimeCompare(&time1, &time2) <= 0 || (v59.flags & 1) != 0 && (v59.flags & 0x10) != 0)
    {
      v11 = v6 + 64248;
      if (*((_QWORD *)v6 + 8033) != *((_QWORD *)v6 + 8034))
      {
        if (!v6[64288])
        {
          PCURL::getAsFileSystemString((const __CFURL **)this + 8054, v57);
          v18 = PCString::ns_str(v57);
          PCString::~PCString(v57);
          if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", v18) & 1) == 0)
          {
            PCURL::PCURL((PCURL *)v57, CFSTR("Text From File Generator Missing File"));
            PCString::set(a2, v57);
            PCString::~PCString(v57);
            return;
          }
          if ((objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "attributesOfItemAtPath:error:", v18, 0), "fileModificationDate"), "isEqualToDate:", *v11) & 1) == 0)(*(void (**)(TXTextFromFileGenerator *))(*(_QWORD *)this + 1240))(this);
        }
        (*(void (**)(PCString *__return_ptr, char *))(*((_QWORD *)this + 25) + 1128))(v57, v6);
        *(_OWORD *)&time2.value = *(_OWORD *)&v57[0].var0;
        time2.epoch = v58;
        time1 = v60;
        v12 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v63);
        v13 = (*(uint64_t (**)(char *, double))(*((_QWORD *)this + 25) + 272))(v6, v12);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v13 + 336), (__n128 *)&time1);
        operator/((__int128 *)&v63.value, (uint64_t)&time1, (uint64_t)&time);
        Seconds = CMTimeGetSeconds(&time);
        time2 = v59;
        v15 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))(v6);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), &v61);
        operator/((__int128 *)&time2.value, (uint64_t)&v61, (uint64_t)&v50);
        v16 = Seconds / CMTimeGetSeconds(&v50);
        switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 64624), MEMORY[0x1E0CA2E68], 0.0))
        {
          case 0u:
            v17 = v16 * (double)(unint64_t)((uint64_t)(*((_QWORD *)v6 + 8034) - *((_QWORD *)v6 + 8033)) >> 3);
            goto LABEL_26;
          case 1u:
            if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65336), MEMORY[0x1E0CA2E68], 0.0))
            {
              time1.value = 0;
              v21 = (uint64_t)(*((_QWORD *)v6 + 8034) - *((_QWORD *)v6 + 8033)) >> 3;
              v22 = v16 * (double)(unint64_t)v21;
              v23 = (double)(unint64_t)(v21 - 1);
              v24 = 1.0;
              v25 = 0.0;
              goto LABEL_19;
            }
            v39 = (uint64_t)(*((_QWORD *)v6 + 8034) - *((_QWORD *)v6 + 8033)) >> 3;
            v40 = v16 * (double)(unint64_t)v39;
            v41 = (double)(unint64_t)(v39 - 1);
            v42 = 0.5;
            v43 = 1.0 - cos(v40 * 3.14159265 / v41 * 0.5);
            goto LABEL_42;
          case 2u:
            if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65336), MEMORY[0x1E0CA2E68], 0.0))
            {
              time1.value = 0;
              v26 = (uint64_t)(*((_QWORD *)v6 + 8034) - *((_QWORD *)v6 + 8033)) >> 3;
              v22 = v16 * (double)(unint64_t)v26;
              v23 = (double)(unint64_t)(v26 - 1);
              v24 = 0.0;
              v25 = 1.0;
LABEL_19:
              PCMath::easeInOut((double *)&time1.value, v22, v24, v25, 0.0, v23, 0, v20);
              v17 = *(double *)&time1.value;
LABEL_26:
              v31 = 0.5;
              goto LABEL_27;
            }
            v44 = (uint64_t)(*((_QWORD *)v6 + 8034) - *((_QWORD *)v6 + 8033)) >> 3;
            v45 = v16 * (double)(unint64_t)v44;
            v41 = (double)(unint64_t)(v44 - 1);
            v42 = 0.5;
            v43 = sin(v45 * 3.14159265 / v41 * 0.5);
LABEL_42:
            v29 = v43 * v41 + 0.0 + v42;
            break;
          case 3u:
            if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65336), MEMORY[0x1E0CA2E68], 0.0))
            {
              time1.value = 0;
              v28 = (uint64_t)(*((_QWORD *)v6 + 8034) - *((_QWORD *)v6 + 8033)) >> 3;
              PCMath::easeInOut((double *)&time1.value, v16 * (double)(unint64_t)v28, 0.5, 0.5, 0.0, (double)(unint64_t)(v28 - 1), 0, v27);
              v29 = *(double *)&time1.value + 0.5;
            }
            else
            {
              v46 = (uint64_t)(*((_QWORD *)v6 + 8034) - *((_QWORD *)v6 + 8033)) >> 3;
              v47 = v16 * (double)(unint64_t)v46;
              v48 = (double)(unint64_t)(v46 - 1);
              v49 = sin(v47 * 3.14159265 / v48 + -1.57079633);
              v31 = 0.5;
              v17 = (v49 * 0.5 + 0.5) * v48 + 0.0;
LABEL_27:
              v29 = v17 + v31;
            }
            break;
          case 4u:
            v30 = v16 * v16;
            goto LABEL_25;
          case 5u:
            v30 = 1.0 - (v16 + -1.0) * (v16 + -1.0);
            goto LABEL_25;
          case 6u:
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64880), &v60, 0.0);
LABEL_25:
            v17 = v30 * (double)(unint64_t)((uint64_t)(*((_QWORD *)v6 + 8034) - *((_QWORD *)v6 + 8033)) >> 3);
            goto LABEL_26;
          default:
            v19 = 0;
            goto LABEL_29;
        }
        v19 = vcvtmd_s64_f64(v29 + 0.0000001);
LABEL_29:
        v32 = *((_QWORD *)v6 + 8034) - *((_QWORD *)v6 + 8033);
        v33 = (v32 >> 3) - 1;
        if (v19 < v33)
          v33 = v19;
        if (v19 >= 0)
          v34 = v33;
        else
          v34 = 0;
        if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65032), MEMORY[0x1E0CA2E68], 0.0))
        {
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 65184), MEMORY[0x1E0CA2E68], 0.0);
          v36 = operator new[]();
          v37 = v36;
          if ((v32 >> 3))
          {
            v38 = 0;
            do
            {
              *(_DWORD *)(v36 + 4 * v38) = v38;
              ++v38;
            }
            while ((v32 >> 3) != v38);
          }
          PCRandomShuffleUsingLRand48<int *>(v36, v36 + 4 * (int)((uint64_t)v32 >> 3), ValueAsInt);
          v34 = *(_DWORD *)(v37 + 4 * v34);
          MEMORY[0x1B5E2914C](v37, 0x1000C8052888210);
        }
        PCString::set(a2, *(const PCString **)(v11[2] + 8 * v34));
      }
    }
  }
}

void sub_1B29534C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,PCString a25)
{
  PCString::~PCString(&a25);
  _Unwind_Resume(a1);
}

uint64_t PCRandomShuffleUsingLRand48<int *>(uint64_t result, uint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  int v6;

  if (result != a2 && result + 4 != a2)
  {
    v3 = ((unint64_t)a3 << 16) | 0x330E;
    v4 = 4;
    do
    {
      v3 = 0x5DEECE66DLL * v3 + 11;
      v5 = ((v3 >> 17) & 0x7FFFFFFF) % ((v4 >> 2) + 1);
      v6 = *(_DWORD *)(result + v4);
      *(_DWORD *)(result + v4) = *(_DWORD *)(result + 4 * v5);
      *(_DWORD *)(result + 4 * v5) = v6;
      v4 += 4;
    }
    while (result + v4 != a2);
  }
  return result;
}

void TXTextFromFileGenerator::loadFile(TXTextFromFileGenerator *this)
{
  id v2;
  void *v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  uint64_t i;
  const void *v10;
  PCURL *v11;
  unint64_t v12;
  PCURL **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  PCURL **v20;
  char *v21;
  char *v22;
  PCURL *v23;
  const __CFString *v24;
  void *v25;
  char v26;
  const __CFURL **v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  PCString v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  TXTextFromFileGenerator::clearText((PCString *)this);
  v34 = 0;
  v35 = 0;
  v2 = objc_alloc(MEMORY[0x1E0CB3940]);
  v27 = (const __CFURL **)((char *)this + 64432);
  PCURL::getAsFileSystemString((const __CFURL **)this + 8054, &v33);
  v3 = (void *)objc_msgSend(v2, "initWithContentsOfFile:usedEncoding:error:", PCString::ns_str(&v33), &v35, &v34);
  v4 = (char *)this + 64448;
  PCString::~PCString(&v33);
  if (v3)
  {
    v28 = v3;
    v5 = (void *)objc_msgSend(v3, "componentsSeparatedByCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "newlineCharacterSet"));
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v36, 16);
    if (v6)
    {
      v7 = *(_QWORD *)v30;
      v8 = (char **)(v4 + 16);
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v30 != v7)
            objc_enumerationMutation(v5);
          v10 = *(const void **)(*((_QWORD *)&v29 + 1) + 8 * i);
          v11 = (PCURL *)operator new();
          PCURL::PCURL(v11, v10);
          v13 = (PCURL **)*((_QWORD *)v4 + 3);
          v12 = *((_QWORD *)v4 + 4);
          if ((unint64_t)v13 >= v12)
          {
            v15 = ((char *)v13 - *v8) >> 3;
            if ((unint64_t)(v15 + 1) >> 61)
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v16 = v12 - (_QWORD)*v8;
            v17 = v16 >> 2;
            if (v16 >> 2 <= (unint64_t)(v15 + 1))
              v17 = v15 + 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
              v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v4 + 32), v18);
            else
              v19 = 0;
            v20 = (PCURL **)&v19[8 * v15];
            *v20 = v11;
            v14 = v20 + 1;
            v22 = (char *)*((_QWORD *)v4 + 2);
            v21 = (char *)*((_QWORD *)v4 + 3);
            if (v21 != v22)
            {
              do
              {
                v23 = (PCURL *)*((_QWORD *)v21 - 1);
                v21 -= 8;
                *--v20 = v23;
              }
              while (v21 != v22);
              v21 = *v8;
            }
            *((_QWORD *)v4 + 2) = v20;
            *((_QWORD *)v4 + 3) = v14;
            *((_QWORD *)v4 + 4) = &v19[8 * v18];
            if (v21)
              operator delete(v21);
          }
          else
          {
            *v13 = v11;
            v14 = v13 + 1;
          }
          *((_QWORD *)v4 + 3) = v14;
        }
        v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v29, v36, 16, v27);
      }
      while (v6);
    }

    PCURL::getAsFileSystemString(v27, &v33);
    v24 = PCString::ns_str(&v33);
    PCString::~PCString(&v33);
    v25 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "attributesOfItemAtPath:error:", v24, 0);
    if (*(_QWORD *)v4)

    *(_QWORD *)v4 = (id)objc_msgSend(v25, "fileModificationDate", v27);
    v26 = 1;
  }
  else
  {
    v26 = 0;
  }
  v4[8] = v26;
}

void sub_1B2953800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCString a20)
{
  PCString::~PCString(&a20);
  _Unwind_Resume(a1);
}

void **TXTextFromFileGenerator::getPreviewSceneNode(TXTextFromFileGenerator *this)
{
  uint64_t v1;
  const void *SceneNode;
  void **v3;
  void **v4;
  PCURL *v5;
  unint64_t v6;
  PCURL **v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  PCURL **v14;
  char *v15;
  char *v16;
  char *v17;
  PCURL *v18;
  PCURL *v19;
  unint64_t v20;
  PCURL **v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  PCURL **v28;
  char *v29;
  char *v30;
  char *v31;
  PCURL *v32;
  PCURL *v33;
  unint64_t v34;
  PCURL **v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  PCURL **v42;
  char *v43;
  char *v44;
  char *v45;
  PCURL *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  CMTime v51;
  PCSharedCount v52;
  __int128 v53;

  v1 = theApp;
  v53 = xmmword_1B3054BB0;
  PCSharedCount::PCSharedCount(&v52);
  SceneNode = (const void *)OZApplication::createSceneNode(v1, (unsigned int *)&v53, (uint64_t)&v52, 0);
  if (SceneNode)
  else
    v3 = 0;
  PCString::~PCString((PCString *)&v52);
  TXTextLayout::didFinishInitializing((TXTextLayout *)v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v53);
  if ((_QWORD)v53)
  {
    v51 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    OZChannel::setValue((OZChannel *)(v53 + 1976), &v51, 24.0, 0);
  }
  v4 = v3 + 8058;
  *((_BYTE *)v3 + 64488) = 1;
  v5 = (PCURL *)operator new();
  PCURL::PCURL(v5, CFSTR("Text From File Generator Preview String 1"));
  v6 = (unint64_t)v3[8060];
  v7 = (PCURL **)v3[8059];
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v6 - (_QWORD)*v4;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v3 + 8060), v12);
    else
      v13 = 0;
    v14 = (PCURL **)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v5;
    v8 = v14 + 1;
    v17 = (char *)*v4;
    v16 = (char *)v3[8059];
    if (v16 != *v4)
    {
      do
      {
        v18 = (PCURL *)*((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)*v4;
    }
    *v4 = v14;
    v3[8059] = v8;
    v3[8060] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  v3[8059] = v8;
  v19 = (PCURL *)operator new();
  PCURL::PCURL(v19, CFSTR("Text From File Generator Preview String 2"));
  v21 = (PCURL **)v3[8059];
  v20 = (unint64_t)v3[8060];
  if ((unint64_t)v21 >= v20)
  {
    v23 = ((char *)v21 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v23 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v24 = v20 - (_QWORD)*v4;
    v25 = v24 >> 2;
    if (v24 >> 2 <= (unint64_t)(v23 + 1))
      v25 = v23 + 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v26 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v3 + 8060), v26);
    else
      v27 = 0;
    v28 = (PCURL **)&v27[8 * v23];
    v29 = &v27[8 * v26];
    *v28 = v19;
    v22 = v28 + 1;
    v31 = (char *)*v4;
    v30 = (char *)v3[8059];
    if (v30 != *v4)
    {
      do
      {
        v32 = (PCURL *)*((_QWORD *)v30 - 1);
        v30 -= 8;
        *--v28 = v32;
      }
      while (v30 != v31);
      v30 = (char *)*v4;
    }
    *v4 = v28;
    v3[8059] = v22;
    v3[8060] = v29;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *v21 = v19;
    v22 = v21 + 1;
  }
  v3[8059] = v22;
  v33 = (PCURL *)operator new();
  PCURL::PCURL(v33, CFSTR("Text From File Generator Preview String 3"));
  v35 = (PCURL **)v3[8059];
  v34 = (unint64_t)v3[8060];
  if ((unint64_t)v35 >= v34)
  {
    v37 = ((char *)v35 - (_BYTE *)*v4) >> 3;
    if ((unint64_t)(v37 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v38 = v34 - (_QWORD)*v4;
    v39 = v38 >> 2;
    if (v38 >> 2 <= (unint64_t)(v37 + 1))
      v39 = v37 + 1;
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8)
      v40 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v40 = v39;
    if (v40)
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v3 + 8060), v40);
    else
      v41 = 0;
    v42 = (PCURL **)&v41[8 * v37];
    v43 = &v41[8 * v40];
    *v42 = v33;
    v36 = v42 + 1;
    v45 = (char *)*v4;
    v44 = (char *)v3[8059];
    if (v44 != *v4)
    {
      do
      {
        v46 = (PCURL *)*((_QWORD *)v44 - 1);
        v44 -= 8;
        *--v42 = v46;
      }
      while (v44 != v45);
      v44 = (char *)*v4;
    }
    *v4 = v42;
    v3[8059] = v36;
    v3[8060] = v43;
    if (v44)
      operator delete(v44);
  }
  else
  {
    *v35 = v33;
    v36 = v35 + 1;
  }
  v3[8059] = v36;
  v47 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v48 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  return v3 + 25;
}

void sub_1B2953C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, char a13)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t TXTextFromFileGenerator::isMissingFile(const __CFURL **this, PCString *a2)
{
  const __CFURL **v3;
  BOOL v4;
  char *v5;
  FILE *v6;
  PCString v8;

  v3 = this + 8054;
  PCURL::getFilename(this + 8054, &v8);
  v4 = PCString::empty(&v8);
  PCString::~PCString(&v8);
  if (!v4)
  {
    PCURL::getAsFileSystemString(v3, &v8);
    PCString::set(a2, &v8);
    PCString::~PCString(&v8);
    PCURL::getAsFileSystemString(v3, &v8);
    v5 = PCString::createCStr(&v8);
    PCString::~PCString(&v8);
    v6 = fopen(v5, "r");
    if (!v6)
      return 1;
    fclose(v6);
  }
  return 0;
}

void sub_1B2953D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextFromFileGenerator::isMissingFile(const __CFURL **this, PCString *a2)
{
  return TXTextFromFileGenerator::isMissingFile(this - 25, a2);
}

uint64_t `non-virtual thunk to'TXTextFromFileGenerator::writeBody(const __CFURL **this, PCSerializerWriteStream *a2, unsigned int a3, int a4, uint64_t a5)
{
  return TXFileLoadingGenerator::writeBody(this - 25, a2, a3, a4, a5);
}

{
  return TXFileLoadingGenerator::writeBody(this - 31, a2, a3, a4, a5);
}

uint64_t TXTextFromFileGenerator::parseBegin(TXTextFromFileGenerator *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::setValue((OZChannel *)((char *)this + 65336), MEMORY[0x1E0CA2E68], 0.0, 0);
  return TXFileLoadingGenerator::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'TXTextFromFileGenerator::parseBegin(TXTextFromFileGenerator *this, PCSerializerReadStream *a2)
{
  return TXTextFromFileGenerator::parseBegin((TXTextFromFileGenerator *)((char *)this - 200), a2);
}

{
  return TXTextFromFileGenerator::parseBegin((TXTextFromFileGenerator *)((char *)this - 248), a2);
}

uint64_t `non-virtual thunk to'TXTextFromFileGenerator::parseEnd(TXTextFromFileGenerator *this, PCSerializerReadStream *a2)
{
  return TXFileLoadingGenerator::parseEnd((TXTextFromFileGenerator *)((char *)this - 200), a2);
}

{
  return TXFileLoadingGenerator::parseEnd((TXTextFromFileGenerator *)((char *)this - 248), a2);
}

uint64_t `non-virtual thunk to'TXTextFromFileGenerator::parseElement(const void **this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return TXFileLoadingGenerator::parseElement(this - 25, a2, a3);
}

{
  return TXFileLoadingGenerator::parseElement(this - 31, a2, a3);
}

uint64_t TXTextFromFileGenerator::didAddToScene(TXTextFromFileGenerator *this, OZScene *a2)
{
  uint64_t v4;
  CMTime v6;
  CMTime v7;
  CMTime v8;
  CMTime v9;
  __n128 v10;
  CMTimeEpoch v11;
  CMTime v12;
  CMTime v13;

  v10 = 0uLL;
  v11 = 0;
  OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), &v10);
  TXTextGenerator::didAddToScene(this, a2);
  v4 = *((_QWORD *)this + 25);
  this = (TXTextFromFileGenerator *)((char *)this + 200);
  (*(void (**)(CMTime *__return_ptr, TXTextFromFileGenerator *))(v4 + 1128))(&v8, this);
  v13 = v8;
  OZChannel::addKeypointAt((OZChannel *)((char *)this + 64680), &v13);
  v13 = v8;
  v12 = v9;
  PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v6);
  v13 = v6;
  *(__n128 *)&v12.value = v10;
  v12.epoch = v11;
  PC_CMTimeSaferSubtract(&v13, &v12, (uint64_t)&v7);
  OZChannel::addKeypointAt((OZChannel *)((char *)this + 64680), &v7);
  v13 = v8;
  OZChannel::setValue((OZChannel *)((char *)this + 64680), &v13, 0.0, 1);
  v13 = v8;
  v12 = v9;
  PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v6);
  v13 = v6;
  *(__n128 *)&v12.value = v10;
  v12.epoch = v11;
  PC_CMTimeSaferSubtract(&v13, &v12, (uint64_t)&v7);
  return OZChannel::setValue((OZChannel *)((char *)this + 64680), &v7, 100.0, 1);
}

uint64_t `non-virtual thunk to'TXTextFromFileGenerator::didAddToScene(TXTextFromFileGenerator *this, OZScene *a2)
{
  return TXTextFromFileGenerator::didAddToScene((TXTextFromFileGenerator *)((char *)this - 200), a2);
}

void TXTimecodeGenerator::TXTimecodeGenerator(TXTimecodeGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;
  PCString v7;

  TXTextGenerator::TXTextGenerator(this, a2, a3, a4);
  *v5 = off_1E6508A60;
  v5[25] = &unk_1E6508F40;
  v5[27] = &unk_1E6509818;
  v5[31] = &off_1E6508A60[514];
  v5[841] = &off_1E6508A60[525];
  v5[2372] = &off_1E6508A60[552];
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Timecode Generator Name"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 64432), &v7, (OZChannelFolder *)((char *)this + 648), 0x1FBu, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Timecode Generator Current Timecode"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 64560), 1, &v7, (OZChannelFolder *)((char *)this + 64432), 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Timecode Generator Value"));
  OZChannelTimecode::OZChannelTimecode((OZChannelTimecode *)((char *)this + 64712), &v7, (OZChannelFolder *)((char *)this + 64432), 0x1F4u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Timecode Generator Offset"));
  OZChannelTimecode::OZChannelTimecode((OZChannelTimecode *)((char *)this + 64864), &v7, (OZChannelFolder *)((char *)this + 64432), 0x1F8u, 0, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Timecode Generator Format Enum"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Timecode Generator Format"));
  OZChannelEnum::OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65016), &v7, &v6, (OZChannelFolder *)((char *)this + 64432), 0x1FAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Timecode Generator Timecode Base Enum Motion"));
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Timecode Generator Timecode Base"));
  OZChannelEnum::OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65272), &v7, &v6, (OZChannelFolder *)((char *)this + 64432), 0x1F5u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCString::~PCString(&v7);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 0x1FFF);
  *((_OWORD *)this + 4096) = xmmword_1B3056A60;
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Timecode Generator Label"));
  OZChannelText::OZChannelText((OZChannelText *)((char *)this + 65552), &v7, (OZChannelFolder *)((char *)this + 64432), 0x1F9u, 0);
  PCString::~PCString(&v7);
  PCString::PCString(&v7, "Use Project Time");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65720), 0, &v7, (OZChannelFolder *)((char *)this + 64432), 0x1FCu, 2u, 0, 0);
  PCString::~PCString(&v7);
  PCURL::PCURL((PCURL *)&v7, CFSTR("Text Timecode Generator Name"));
  (*(void (**)(TXTimecodeGenerator *, PCString *, _QWORD))(*(_QWORD *)this + 536))(this, &v7, 0);
  PCString::~PCString(&v7);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 64864), 0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 64864), CFSTR("TXChanTimecodeController"));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 64712), CFSTR("TXChanTimecodeController"));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 65272), CFSTR("TXTimecodeBaseController"));
  TXTextLayout::setAlignmentAtCursor(this, 1.0, 0);
  *((_BYTE *)this + 65712) = 1;
  TXTimecodeGenerator::setTimecodeBaseForMotionOrFCP(this, *(_BYTE *)(theApp + 80) == 0, 1);
}

void sub_1B295439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelEnum *a9, OZChannelBool *a10, PCString a11, PCString a12)
{
  PCString *v12;
  OZChannelFolder *v13;
  OZChannel *v14;
  OZChannel *v15;
  OZChannelEnum *v16;
  PCTimecodeMode *v17;
  OZChannelBool *v18;
  OZChannelText *v19;

  PCString::~PCString(&a12);
  OZChannelBool::~OZChannelBool(v18);
  OZChannelText::~OZChannelText(v19);
  PCTimecodeMode::~PCTimecodeMode(v17);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(a9);
  OZChannel::~OZChannel(v15);
  OZChannel::~OZChannel(v14);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelFolder::~OZChannelFolder(v13);
  TXTextGenerator::~TXTextGenerator(v12);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator::setTimecodeBaseForMotionOrFCP(TXTimecodeGenerator *this, int a2, int a3)
{
  const PCString *v4;
  PCString v5;
  int v6[4];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = (const PCString *)((char *)this + 65272);
  if (a2)
  {
    *(_OWORD *)v6 = xmmword_1B3056A88;
    v7 = unk_1B3056A98;
    v8 = xmmword_1B3056AA8;
    v9 = unk_1B3056AB8;
    OZChannelEnum::setTags((TXTimecodeGenerator *)((char *)this + 65272), (char *)v6, 16);
    PCURL::PCURL((PCURL *)&v5, CFSTR("Text Timecode Generator Timecode Base Enum Motion"));
  }
  else
  {
    v10 = 17;
    *(_OWORD *)v6 = xmmword_1B3056AC8;
    v7 = unk_1B3056AD8;
    v8 = xmmword_1B3056AE8;
    v9 = unk_1B3056AF8;
    OZChannelEnum::setTags((TXTimecodeGenerator *)((char *)this + 65272), (char *)v6, 17);
    PCURL::PCURL((PCURL *)&v5, CFSTR("Text Timecode Generator Timecode Base Enum FCP"));
  }
  OZChannelEnum::setStrings(v4, &v5, a3);
  PCString::~PCString(&v5);
}

void sub_1B295461C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator::TXTimecodeGenerator(TXTimecodeGenerator *this, const TXTimecodeGenerator *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  TXTextGenerator::TXTextGenerator(this, a2, a3);
  *(_QWORD *)v5 = off_1E6508A60;
  *(_QWORD *)(v5 + 200) = &unk_1E6508F40;
  *(_QWORD *)(v5 + 216) = &unk_1E6509818;
  *(_QWORD *)(v5 + 248) = &off_1E6508A60[514];
  *(_QWORD *)(v5 + 6728) = &off_1E6508A60[525];
  *(_QWORD *)(v5 + 18976) = &off_1E6508A60[552];
  v6 = (OZChannelFolder *)(v5 + 64432);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 64432), (const OZChannelFolder *)((char *)a2 + 64432), (OZChannelFolder *)(v5 + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 64560), (const OZChannelBase *)((char *)a2 + 64560), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 64712), (const OZChannelBase *)((char *)a2 + 64712), v6);
  *((_QWORD *)this + 8089) = &off_1E6553D48;
  *((_QWORD *)this + 8091) = &unk_1E65540A8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 64864), (const OZChannelBase *)((char *)a2 + 64864), v6);
  *((_QWORD *)this + 8108) = &off_1E6553D48;
  *((_QWORD *)this + 8110) = &unk_1E65540A8;
  OZChannelEnum::OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65016), (const TXTimecodeGenerator *)((char *)a2 + 65016), v6);
  OZChannelEnum::OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65272), (const TXTimecodeGenerator *)((char *)a2 + 65272), v6);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 0x1FFF);
  *((_OWORD *)this + 4096) = xmmword_1B3056A60;
  OZChannelText::OZChannelText((OZChannelText *)((char *)this + 65552), (const OZChannelText *)((char *)a2 + 65552), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65720), (const OZChannelBase *)((char *)a2 + 65720), v6);
  *((_BYTE *)this + 65712) = 1;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65272), MEMORY[0x1E0CA2E68], 0.0) == 13)
  {
    if (*(_BYTE *)(theApp + 80))
      TXTimecodeGenerator::setTimecodeBaseForMotionOrFCP(this, 0, 1);
  }
}

void sub_1B2954824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelBool *a10)
{
  PCString *v10;
  OZChannelFolder *v11;
  OZChannel *v12;
  OZChannel *v13;
  OZChannelEnum *v14;
  OZChannelEnum *v15;
  PCTimecodeMode *v16;
  OZChannelText *v17;

  OZChannelText::~OZChannelText(v17);
  PCTimecodeMode::~PCTimecodeMode(v16);
  OZChannelEnum::~OZChannelEnum(v15);
  OZChannelEnum::~OZChannelEnum(v14);
  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelFolder::~OZChannelFolder(v11);
  TXTextGenerator::~TXTextGenerator(v10);
  _Unwind_Resume(a1);
}

void TXTimecodeGenerator::~TXTimecodeGenerator(TXTimecodeGenerator *this)
{
  *(_QWORD *)this = off_1E6508A60;
  *((_QWORD *)this + 25) = &unk_1E6508F40;
  *((_QWORD *)this + 27) = &unk_1E6509818;
  *((_QWORD *)this + 31) = &off_1E6508A60[514];
  *((_QWORD *)this + 841) = &off_1E6508A60[525];
  *((_QWORD *)this + 2372) = &off_1E6508A60[552];
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65720));
  OZChannelText::~OZChannelText((OZChannelText *)((char *)this + 65552));
  PCTimecodeMode::~PCTimecodeMode((TXTimecodeGenerator *)((char *)this + 65528));
  OZChannelEnum::~OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65272));
  OZChannelEnum::~OZChannelEnum((TXTimecodeGenerator *)((char *)this + 65016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64712));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 64560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64432));
  TXTextGenerator::~TXTextGenerator((PCString *)this);
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXTimecodeGenerator::~TXTimecodeGenerator(TXTimecodeGenerator *this)
{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 200));
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 216));
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 248));
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 6728));
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 18976));
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

{
  TXTimecodeGenerator::~TXTimecodeGenerator((TXTimecodeGenerator *)((char *)this - 18976));
  JUMPOUT(0x1B5E29170);
}

uint64_t `non-virtual thunk to'TXTimecodeGenerator::operator=(uint64_t a1)
{
  return TXTextGenerator::operator=(a1 - 200);
}

uint64_t TXTimecodeGenerator::parseEnd(TXTimecodeGenerator *this, PCSerializerReadStream *a2)
{
  uint64_t v3;

  v3 = TXTextLayout::parseEnd(this, a2);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65272), MEMORY[0x1E0CA2E68], 0.0) == 13)
    TXTimecodeGenerator::setTimecodeBaseForMotionOrFCP(this, 0, 1);
  return v3;
}

uint64_t `non-virtual thunk to'TXTimecodeGenerator::parseEnd(TXTimecodeGenerator *this, PCSerializerReadStream *a2)
{
  return TXTimecodeGenerator::parseEnd((TXTimecodeGenerator *)((char *)this - 200), a2);
}

{
  return TXTimecodeGenerator::parseEnd((TXTimecodeGenerator *)((char *)this - 248), a2);
}

void TXTimecodeGenerator::prepareForRender(TXTimecodeGenerator *this, CMTime *a2)
{
  OZScene **v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  __n128 v11;
  CMTimeEpoch v12;
  __n128 v13;
  CMTimeEpoch v14;
  CMTime v15;
  CMTime v16;
  PCSharedCount v17[2];
  CMTimeEpoch v18;
  CMTime v19;
  _BYTE v20[8];
  CMTime v21;
  CMTime v22;
  CMTime v23;
  CMTime time2;
  CMTime time1;

  v21 = *a2;
  v4 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v20, v4);
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 640))((char *)this + 200);
  (*(void (**)(PCSharedCount *__return_ptr))(*(_QWORD *)v5 + 712))(v17);
  v15 = *a2;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v13);
  time1 = v15;
  *(__n128 *)&time2.value = v13;
  time2.epoch = v14;
  v7 = PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v16);
  v8 = (*(uint64_t (**)(char *, __n128))(*((_QWORD *)this + 25) + 272))((char *)this + 200, v7);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v11);
  *(_OWORD *)&time1.value = *(_OWORD *)&v17[0].var0;
  time1.epoch = v18;
  time2 = v16;
  if (CMTimeCompare(&time1, &time2) > 0)
    goto LABEL_2;
  *(_OWORD *)&time1.value = *(_OWORD *)&v17[0].var0;
  time1.epoch = v18;
  time2 = v19;
  PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v23);
  time1 = v23;
  *(__n128 *)&time2.value = v11;
  time2.epoch = v12;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
  time1 = v16;
  time2 = v22;
  if (CMTimeCompare(&time1, &time2) <= 0 || (v19.flags & 1) != 0 && (v19.flags & 0x10) != 0)
  {
    PCSharedCount::PCSharedCount(v17);
    TXTextLayout::setString(this, (const PCString *)v17, 1);
    TXTextLayout::updateDisplayString((PCString *)this, &v21);
    v9 = *(_QWORD *)(*((_QWORD *)this + 2422) + 16);
    TXTextLayout::getDisplayString((PCString *)this, (PCString *)&time1);
    v10 = PCString::size((PCString *)&time1);
    *(_DWORD *)(v9 + 24) = 0;
    *(_DWORD *)(v9 + 28) = v10;
    PCString::~PCString((PCString *)&time1);
    TXTextLayout::rebuildParagraphStyles((PCString *)this);
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
    TXTextLayout::doLayout(this, (const OZRenderState *)a2, 0);
    PCString::~PCString((PCString *)v17);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v20);
    TXTextLayout::prepareForRender(this, (const OZRenderState *)a2);
  }
  else
  {
LABEL_2:
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v20);
  }
}

void sub_1B2954D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,PCString a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  PCString::~PCString((PCString *)(v28 - 64));
  PCString::~PCString(&a22);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a28);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTimecodeGenerator::prepareForRender(TXTimecodeGenerator *this, CMTime *a2)
{
  TXTimecodeGenerator::prepareForRender((TXTimecodeGenerator *)((char *)this - 200), a2);
}

void TXTimecodeGenerator::prepareForRender(TXTimecodeGenerator *this, const OZRenderState *a2)
{
  double v4;
  _BYTE v5[1424];

  OZRenderParams::OZRenderParams((OZRenderParams *)v5);
  v4 = OZRenderParams::setState((OZRenderParams *)v5, a2);
  (*(void (**)(TXTimecodeGenerator *, _BYTE *, double))(*(_QWORD *)this + 576))(this, v5, v4);
  OZRenderParams::~OZRenderParams((OZRenderParams *)v5);
}

void sub_1B2954E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZRenderParams::~OZRenderParams((OZRenderParams *)&a9);
  _Unwind_Resume(a1);
}

uint64_t TXTimecodeGenerator::getPreviewSceneNode(TXTimecodeGenerator *this)
{
  uint64_t v1;
  const void *SceneNode;
  TXTextLayout *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  CMTime v8;
  PCSharedCount v9;
  __int128 v10;

  v1 = theApp;
  v10 = xmmword_1B3054B90;
  PCSharedCount::PCSharedCount(&v9);
  SceneNode = (const void *)OZApplication::createSceneNode(v1, (unsigned int *)&v10, (uint64_t)&v9, 0);
  if (SceneNode)
  else
    v3 = 0;
  PCString::~PCString((PCString *)&v9);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v10);
  if ((_QWORD)v10)
  {
    v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    OZChannel::setValue((OZChannel *)(v10 + 1976), &v8, 16.0, 0);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v3)
    return (uint64_t)v3 + 200;
  else
    return 0;
}

void sub_1B2954F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, char a13)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t TXTimecodeGenerator::showBackgroundRect(TXTimecodeGenerator *this)
{
  return 1;
}

void OZChannelTimecode::OZChannelTimecode(OZChannelTimecode *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5, OZChannelImpl *a6, OZChannelInfo *a7)
{
  OZFactory *OZChannelTimecode_FactoryBase;
  OZChannelTimecode *v15;
  OZChannelTimecode *OZChannelTimecodeInfo;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelTimecode_FactoryBase = (OZFactory *)getOZChannelTimecode_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelTimecode_FactoryBase, a2, a3, a4, a5, a6, a7);
  this->var0 = (void **)&off_1E6553D48;
  this->var2 = (void **)&unk_1E65540A8;
  OZChannelTimecodeInfo = (OZChannelTimecode *)OZChannelTimecode::createOZChannelTimecodeInfo(v15);
  if (a7)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelTimecode::_OZChannelTimecodeInfo;
    this->var17 = (OZChannelInfo *)OZChannelTimecode::_OZChannelTimecodeInfo;
  }
  this->var16 = var17;
  OZChannelTimecode::createOZChannelTimecodeImpl(OZChannelTimecodeInfo);
  if (a6)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelTimecode::_OZChannelTimecodeImpl;
    this->var15 = (OZChannelImpl *)OZChannelTimecode::_OZChannelTimecodeImpl;
  }
  this->var14 = var15;
}

void sub_1B2955070(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

uint64_t OZChannelTimecode::createOZChannelTimecodeInfo(OZChannelTimecode *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelTimecode::createOZChannelTimecodeInfo(void)::_OZChannelTimecodeInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelTimecode::createOZChannelTimecodeInfo(void)::_OZChannelTimecodeInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelTimecode::createOZChannelTimecodeInfo(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelTimecode::_OZChannelTimecodeInfo;
}

uint64_t OZChannelTimecode::createOZChannelTimecodeImpl(OZChannelTimecode *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&OZChannelTimecode::createOZChannelTimecodeImpl(void)::_OZChannelTimecodeImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&OZChannelTimecode::createOZChannelTimecodeImpl(void)::_OZChannelTimecodeImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelTimecode::createOZChannelTimecodeImpl(void)::{lambda(void)#1} &&>>);
  }
  return OZChannelTimecode::_OZChannelTimecodeImpl;
}

void std::__call_once_param<std::tuple<OZChannelTimecode::createOZChannelTimecodeInfo(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  OZChannelTimecodeInfo *v0;

  if (!OZChannelTimecode::_OZChannelTimecodeInfo)
  {
    v0 = (OZChannelTimecodeInfo *)operator new();
    OZChannelTimecodeInfo::OZChannelTimecodeInfo(v0);
    OZChannelTimecode::_OZChannelTimecodeInfo = (uint64_t)v0;
  }
}

void sub_1B2955194(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

void OZChannelTimecodeInfo::OZChannelTimecodeInfo(OZChannelTimecodeInfo *this)
{
  uint64_t v2;

  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 1.0, "");
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 80), 100);
  *(_QWORD *)this = &unk_1E6509BE0;
  *((_QWORD *)this + 10) = &unk_1E6509C00;
}

void sub_1B2955224(_Unwind_Exception *a1)
{
  OZChannelInfo *v1;

  OZChannelInfo::~OZChannelInfo(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<OZChannelTimecode::createOZChannelTimecodeImpl(void)::{lambda(void)#1} &&>>()
{
  OZChannelTimecode::createOZChannelTimecodeImpl(void)::{lambda(void)#1}::operator()();
}

void OZChannelTimecode::createOZChannelTimecodeImpl(void)::{lambda(void)#1}::operator()()
{
  uint64_t v0;
  OZCurveDouble *v1;

  if (!OZChannelTimecode::_OZChannelTimecodeImpl)
  {
    v0 = operator new();
    v1 = (OZCurveDouble *)operator new();
    OZCurveDouble::OZCurveDouble(v1, 0.0);
    OZChannelImpl::OZChannelImpl((OZChannelImpl *)v0, (OZCurve *)v1, 0.0, 1, 1);
    PCSingleton::PCSingleton((PCSingleton *)(v0 + 40), 100);
    *(_QWORD *)v0 = &unk_1E6509C58;
    *(_QWORD *)(v0 + 40) = &unk_1E6509C78;
    OZChannelTimecode::_OZChannelTimecodeImpl = v0;
  }
}

void sub_1B29552F4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::TXTimeDateGenerator(TXTimeDateGenerator *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *v6;
  OZChannelInfo *Instance;
  TXTimeDateGenerator::TXTimeDateGenerator_startImpl *v8;
  OZChannelImpl *v9;
  TXTimeDateGenerator::TXTimeDateGenerator_endImpl *v10;
  OZChannelImpl *v11;
  TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl *v12;
  OZChannelImpl *v13;
  TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl *v14;
  OZChannelImpl *v15;
  double v16;
  double v17;
  id v18;
  PCString v19;
  PCString v20;

  TXTextGenerator::TXTextGenerator(this, a2, a3, a4);
  *v5 = off_1E6509CD0;
  v5[25] = &unk_1E650A1B0;
  v5[27] = &unk_1E650AA88;
  v5[31] = &off_1E6509CD0[514];
  v5[841] = &off_1E6509CD0[525];
  v5[2372] = &off_1E6509CD0[552];
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Name"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 64432), &v20, (OZChannelFolder *)((char *)this + 648), 0x1FDu, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Animate"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 64560), 0, &v20, (OZChannelFolder *)((char *)this + 64432), 0x1F6u, 0, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Value"));
  Instance = (OZChannelInfo *)TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(v6);
  OZChannelDouble::OZChannelDouble((TXTimeDateGenerator *)((char *)this + 64712), &v20, (OZChannelFolder *)((char *)this + 64432), 0x1F7u, 0, 0, Instance);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Start"));
  v9 = (OZChannelImpl *)TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(v8);
  OZChannelDouble::OZChannelDouble((TXTimeDateGenerator *)((char *)this + 64864), &v20, (OZChannelFolder *)((char *)this + 64432), 0x1F8u, 0, v9, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Number Generator End"));
  v11 = (OZChannelImpl *)TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(v10);
  OZChannelDouble::OZChannelDouble((TXTimeDateGenerator *)((char *)this + 65016), &v20, (OZChannelFolder *)((char *)this + 64432), 0x1F9u, 0, v11, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Padding"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65168), &v20, (OZChannelFolder *)((char *)this + 64432), 0x1FCu, 0, 0, 0);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Units Enum"));
  PCURL::PCURL((PCURL *)&v19, CFSTR("Text Time Date Generator Units"));
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65320), 0, &v20, &v19, (OZChannelFolder *)((char *)this + 64432), 0x1FAu, 0, 0, 0);
  PCString::~PCString(&v19);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Time Style Enum"));
  PCURL::PCURL((PCURL *)&v19, CFSTR("Text Time Date Generator Time Style"));
  v13 = (OZChannelImpl *)TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(v12);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65576), 2u, &v20, &v19, (OZChannelFolder *)((char *)this + 64432), 0x1F4u, 0, v13, 0);
  PCString::~PCString(&v19);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Date Style Enum"));
  PCURL::PCURL((PCURL *)&v19, CFSTR("Text Time Date Generator Date Style"));
  v15 = (OZChannelImpl *)TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(v14);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65832), 2u, &v20, &v19, (OZChannelFolder *)((char *)this + 64432), 0x1F5u, 0, v15, 0);
  PCString::~PCString(&v19);
  PCString::~PCString(&v20);
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Update Time Enum"));
  PCURL::PCURL((PCURL *)&v19, CFSTR("Text Time Date Generator Update Time"));
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 66088), &v20, &v19, (OZChannelFolder *)((char *)this + 64432), 0x1FBu, 0, 0, 0);
  PCString::~PCString(&v19);
  PCString::~PCString(&v20);
  *((_QWORD *)this + 8293) = 0;
  *((_BYTE *)this + 66352) = 0;
  PCURL::PCURL((PCURL *)&v20, CFSTR("Text Time Date Generator Name"));
  (*(void (**)(TXTimeDateGenerator *, PCString *, _QWORD))(*(_QWORD *)this + 536))(this, &v20, 0);
  PCString::~PCString(&v20);
  objc_msgSend(MEMORY[0x1E0C99D68], "timeIntervalSinceReferenceDate");
  v17 = v16;
  OZChannel::setValue((OZChannel *)((char *)this + 64712), MEMORY[0x1E0CA2E68], v16, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 64712), v17);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 64712), 0x100000000, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 64864), MEMORY[0x1E0CA2E68], v17, 0);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 64864), v17);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 64864), 0x100000000, 0);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 64712), CFSTR("TXTimeDateController"));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 64864), CFSTR("TXTimeDateController"));
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 65016), CFSTR("TXTimeDateController"));
  TXTextLayout::useCurrentLocale(this);
  v18 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  *((_QWORD *)this + 8293) = v18;
  objc_msgSend(v18, "setFormatterBehavior:", 1040);
}

void sub_1B29558B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelEnum *a10, OZChannelBool *a11, OZChannelBool *a12, PCString a13, PCString a14)
{
  PCString *v14;
  OZChannelFolder *v15;
  OZChannelEnum *v16;
  OZChannel *v17;
  OZChannel *v18;
  OZChannel *v19;
  OZChannelEnum *v20;
  OZChannelEnum *v21;

  PCString::~PCString(&a14);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelEnum::~OZChannelEnum(v21);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannelEnum::~OZChannelEnum(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannel::~OZChannel(v19);
  OZChannel::~OZChannel(v18);
  OZChannel::~OZChannel(v17);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelFolder::~OZChannelFolder(v15);
  TXTextGenerator::~TXTextGenerator(v14);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::TXTimeDateGenerator(TXTimeDateGenerator *this, const TXTimeDateGenerator *a2, uint64_t a3)
{
  uint64_t v5;
  OZChannelFolder *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;

  TXTextGenerator::TXTextGenerator(this, a2, a3);
  *(_QWORD *)v5 = off_1E6509CD0;
  *(_QWORD *)(v5 + 200) = &unk_1E650A1B0;
  *(_QWORD *)(v5 + 216) = &unk_1E650AA88;
  *(_QWORD *)(v5 + 248) = &off_1E6509CD0[514];
  *(_QWORD *)(v5 + 6728) = &off_1E6509CD0[525];
  *(_QWORD *)(v5 + 18976) = &off_1E6509CD0[552];
  v6 = (OZChannelFolder *)(v5 + 64432);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)(v5 + 64432), (const OZChannelFolder *)((char *)a2 + 64432), (OZChannelFolder *)(v5 + 648));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 64560), (const OZChannelBase *)((char *)a2 + 64560), v6);
  v9 = v7;
  OZChannel::OZChannel((OZChannel *)((char *)this + 64712), (const OZChannelBase *)((char *)a2 + 64712), v6);
  *((_QWORD *)this + 8089) = &off_1E6551358;
  *((_QWORD *)this + 8091) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 64864), (const OZChannelBase *)((char *)a2 + 64864), v6);
  *((_QWORD *)this + 8108) = &off_1E6551358;
  *((_QWORD *)this + 8110) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 65016), (const OZChannelBase *)((char *)a2 + 65016), v6);
  *((_QWORD *)this + 8127) = &off_1E6551358;
  *((_QWORD *)this + 8129) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 65168), (const OZChannelBase *)((char *)a2 + 65168), v6);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65320), (const TXTimeDateGenerator *)((char *)a2 + 65320), v6);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65576), (const TXTimeDateGenerator *)((char *)a2 + 65576), v6);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65832), (const TXTimeDateGenerator *)((char *)a2 + 65832), v6);
  OZChannelEnum::OZChannelEnum((TXTimeDateGenerator *)((char *)this + 66088), (const TXTimeDateGenerator *)((char *)a2 + 66088), v6);
  *((_QWORD *)this + 8293) = 0;
  *((_BYTE *)this + 66352) = *((_BYTE *)a2 + 66352);
  TXTextLayout::setLocale(this, *((CFTypeRef *)a2 + 8051));
  v8 = objc_alloc_init(MEMORY[0x1E0CB3578]);
  *((_QWORD *)this + 8293) = v8;
  objc_msgSend(v8, "setFormatterBehavior:", 1040, (char *)this + 64864, v9);
}

void sub_1B2955C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannel *a9, OZChannelBool *a10)
{
  PCString *v10;
  OZChannelFolder *v11;
  OZChannelEnum *v12;
  OZChannel *v13;
  OZChannel *v14;
  OZChannelBool *v15;
  OZChannelEnum *v16;
  OZChannelEnum *v17;

  OZChannelEnum::~OZChannelEnum(v12);
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannelEnum::~OZChannelEnum(v16);
  OZChannelBool::~OZChannelBool(v15);
  OZChannel::~OZChannel(v14);
  OZChannel::~OZChannel(a9);
  OZChannel::~OZChannel(v13);
  OZChannelBool::~OZChannelBool(a10);
  OZChannelFolder::~OZChannelFolder(v11);
  TXTextGenerator::~TXTextGenerator(v10);
  _Unwind_Resume(a1);
}

void TXTimeDateGenerator::~TXTimeDateGenerator(TXTimeDateGenerator *this)
{
  *(_QWORD *)this = off_1E6509CD0;
  *((_QWORD *)this + 25) = &unk_1E650A1B0;
  *((_QWORD *)this + 27) = &unk_1E650AA88;
  *((_QWORD *)this + 31) = &off_1E6509CD0[514];
  *((_QWORD *)this + 841) = &off_1E6509CD0[525];
  *((_QWORD *)this + 2372) = &off_1E6509CD0[552];

  OZChannelEnum::~OZChannelEnum((TXTimeDateGenerator *)((char *)this + 66088));
  OZChannelEnum::~OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65832));
  OZChannelEnum::~OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65576));
  OZChannelEnum::~OZChannelEnum((TXTimeDateGenerator *)((char *)this + 65320));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 65168));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 65016));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64864));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 64712));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 64560));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 64432));
  TXTextGenerator::~TXTextGenerator((PCString *)this);
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXTimeDateGenerator::~TXTimeDateGenerator(TXTimeDateGenerator *this)
{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 200));
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 216));
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 248));
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 6728));
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 18976));
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

{
  TXTimeDateGenerator::~TXTimeDateGenerator((TXTimeDateGenerator *)((char *)this - 18976));
  JUMPOUT(0x1B5E29170);
}

CFTypeRef *TXTimeDateGenerator::operator=(TXTextLayout *a1, const void *a2)
{
  CFTypeRef *result;

  TXTextGenerator::operator=(a1);
  if (result)
    return (CFTypeRef *)TXTextLayout::setLocale(a1, result[8051]);
  return result;
}

CFTypeRef *`non-virtual thunk to'TXTimeDateGenerator::operator=(uint64_t a1, const void *a2)
{
  return TXTimeDateGenerator::operator=((TXTextLayout *)(a1 - 200), a2);
}

uint64_t TXTimeDateGenerator::generateString(TXTimeDateGenerator *this, PCString *a2, CMTime *a3)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  double Seconds;
  uint64_t v11;
  double v12;
  const CMTime *v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  double v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  UniChar *v47;
  CMTime v48;
  CMTime time;
  __n128 v50;
  CMTimeEpoch v51;
  __n128 v52;
  CMTimeEpoch v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  CMTime v57;
  __n128 v58;
  CMTimeEpoch v59;
  CMTime v60;
  CMTime time2;
  CMTime time1;

  v57 = *a3;
  v5 = (char *)this + 200;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 640))((char *)this + 200);
  v7 = (*(uint64_t (**)(char *))(*(_QWORD *)v5 + 272))(v5);
  if (!v7)
    goto LABEL_6;
  v8 = v7;
  (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)v6 + 712))(&v55, v6);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v52);
  time1 = v57;
  *(__n128 *)&time2.value = v52;
  time2.epoch = v53;
  PC_CMTimeFloorToSampleDuration(&time1, &time2, (uint64_t)&v54);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), &v50);
  time1 = v55;
  time2 = v54;
  result = CMTimeCompare(&time1, &time2);
  if ((int)result <= 0)
  {
    time1 = v55;
    time2 = v56;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v60);
    time1 = v60;
    *(__n128 *)&time2.value = v50;
    time2.epoch = v51;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v58);
    time1 = v54;
    *(__n128 *)&time2.value = v58;
    time2.epoch = v59;
    result = CMTimeCompare(&time1, &time2);
    if ((int)result <= 0 || (v56.flags & 1) != 0 && (v56.flags & 0x10) != 0)
    {
LABEL_6:
      TXTimeDateGenerator::updateFormatter(this);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 64560), MEMORY[0x1E0CA2E68], 0.0))
      {
        (*(void (**)(CMTime *__return_ptr, char *))(*((_QWORD *)this + 25) + 1128))(&v55, v5);
        time2 = v55;
        time1 = v57;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&time);
        Seconds = CMTimeGetSeconds(&time);
        v11 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))(v5);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v58);
        time1 = v55;
        time2 = v56;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v60);
        time1 = v60;
        *(__n128 *)&time2.value = v58;
        time2.epoch = v59;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v48);
        v12 = Seconds / CMTimeGetSeconds(&v48);
        v13 = (const CMTime *)MEMORY[0x1E0CA2E68];
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64864), MEMORY[0x1E0CA2E68], 0.0);
        v15 = v14;
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 65016), v13, 0.0);
        v17 = v15 + v12 * (v16 - v15);
      }
      else
      {
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 64712), &v57, 0.0);
        v17 = v18;
      }
      switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 65320), MEMORY[0x1E0CA2E68], 0.0))
      {
        case 0u:
          v26 = (void *)MEMORY[0x1E0C99D68];
          v27 = v17;
          goto LABEL_15;
        case 1u:
          v28 = (int)v17;
          v29 = (int)v17 / 60;
          v30 = 60;
          goto LABEL_14;
        case 2u:
          v28 = (int)v17;
          v29 = (int)v17 / 3600;
          v30 = 3600;
LABEL_14:
          v27 = v17 - (double)(v28 - v29 * v30);
          v26 = (void *)MEMORY[0x1E0C99D68];
LABEL_15:
          v31 = objc_msgSend(v26, "dateWithTimeIntervalSinceReferenceDate:", v27);
          goto LABEL_21;
        case 3u:
          v32 = (void *)objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
          v33 = objc_msgSend(MEMORY[0x1E0C99E80], "localTimeZone");
          v34 = (void *)objc_msgSend(v32, "componentsInTimeZone:fromDate:", v33, objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v17));
          v35 = v34;
          goto LABEL_20;
        case 4u:
          v32 = (void *)objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
          v36 = objc_msgSend(MEMORY[0x1E0C99E80], "localTimeZone");
          v37 = (void *)objc_msgSend(v32, "componentsInTimeZone:fromDate:", v36, objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v17));
          v35 = v37;
          goto LABEL_19;
        case 5u:
          v32 = (void *)objc_msgSend(MEMORY[0x1E0C99D48], "currentCalendar");
          v38 = objc_msgSend(MEMORY[0x1E0C99E80], "localTimeZone");
          v35 = (void *)objc_msgSend(v32, "componentsInTimeZone:fromDate:", v38, objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceReferenceDate:", v17));
          objc_msgSend(v35, "setMonth:", 1);
          v37 = v35;
LABEL_19:
          objc_msgSend(v37, "setDay:", 1);
          v34 = v35;
LABEL_20:
          objc_msgSend(v34, "setHour:", 0);
          objc_msgSend(v35, "setMinute:", 0);
          objc_msgSend(v35, "setSecond:", 0);
          v31 = objc_msgSend(v32, "dateFromComponents:", v35);
LABEL_21:
          v39 = v31;
          TXTimeDateGenerator::check24HourFormat((id *)this);
          v40 = (void *)objc_msgSend(*((id *)this + 8293), "stringFromDate:", v39);
          v41 = objc_msgSend(v40, "length");
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 65168), MEMORY[0x1E0CA2E68], 0.0))
          {
            v40 = (void *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", v40);
            if (objc_msgSend(v40, "length"))
            {
              v42 = 0;
              v43 = MEMORY[0x1E0C80978];
              do
              {
                if (v42)
                  v44 = objc_msgSend(v40, "characterAtIndex:", v42 - 1);
                else
                  v44 = 0;
                v45 = objc_msgSend(v40, "characterAtIndex:", v42);
                if (v42 >= v41 - 1)
                  v46 = 0;
                else
                  v46 = objc_msgSend(v40, "characterAtIndex:", v42 + 1);
                if ((v44 > 0xFF || (*(_DWORD *)(v43 + 4 * v44 + 60) & 0x400) == 0)
                  && v45 <= 0xFF
                  && (*(_DWORD *)(v43 + 4 * v45 + 60) & 0x400) != 0
                  && (v46 > 0xFF || (*(_DWORD *)(v43 + 4 * v46 + 60) & 0x400) == 0))
                {
                  objc_msgSend(v40, "insertString:atIndex:", CFSTR("0"), v42++);
                }
                ++v42;
              }
              while (v42 < objc_msgSend(v40, "length"));
            }
            v41 = objc_msgSend(v40, "length");
          }
          v47 = (UniChar *)operator new[]();
          objc_msgSend(v40, "getCharacters:", v47);
          v47[v41] = 0;
          PCString::set(a2, v47);
          result = MEMORY[0x1B5E2914C](v47, 0x1000C80BDFB0063);
          break;
        default:
          PCPrint("File %s, line %d should not have been reached:\n\t", v19, v20, v21, v22, v23, v24, v25, (char)"/Library/Caches/com.apple.xbs/Sources/MotioniOS/Text/TXTimeDateGenerator.mm");
          pcAbortImpl();
      }
    }
  }
  return result;
}

uint64_t TXTimeDateGenerator::updateFormatter(TXTimeDateGenerator *this)
{
  id *v2;
  const CMTime *v3;
  uint64_t ValueAsInt;
  uint64_t v5;

  v2 = (id *)((char *)this + 64408);
  v3 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 65832), MEMORY[0x1E0CA2E68], 0.0);
  v5 = (int)OZChannel::getValueAsInt((OZChannel *)((char *)this + 65576), v3, 0.0);
  objc_msgSend(v2[242], "setDateStyle:", ValueAsInt);
  objc_msgSend(v2[242], "setTimeStyle:", v5);
  return objc_msgSend(v2[242], "setLocale:", *v2);
}

uint64_t TXTimeDateGenerator::check24HourFormat(id *this)
{
  void *v2;
  id *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  BOOL v10;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3578], "dateFormatFromTemplate:options:locale:", CFSTR("j"), 0, objc_msgSend(MEMORY[0x1E0C99DC8], "currentLocale"));
  v3 = this + 8293;
  v4 = (void *)objc_msgSend(this[8293], "dateFormat");
  v5 = objc_msgSend(v4, "rangeOfString:", CFSTR("h"));
  v7 = v6;
  result = objc_msgSend(v2, "rangeOfString:", CFSTR("H"));
  if (v9)
    v10 = v7 == 0;
  else
    v10 = 1;
  if (!v10)
    return objc_msgSend(*v3, "setDateFormat:", objc_msgSend((id)objc_msgSend(v4, "stringByReplacingCharactersInRange:withString:", v5, v7, CFSTR("H")), "stringByReplacingOccurrencesOfString:withString:", CFSTR("a"), &stru_1E65EDDA0));
  return result;
}

uint64_t TXTimeDateGenerator::getPreviewSceneNode(TXTimeDateGenerator *this)
{
  uint64_t v1;
  const void *SceneNode;
  TXTextLayout *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  CMTime v8;
  PCSharedCount v9;
  __int128 v10;

  v1 = theApp;
  v10 = xmmword_1B3054BA0;
  PCSharedCount::PCSharedCount(&v9);
  SceneNode = (const void *)OZApplication::createSceneNode(v1, (unsigned int *)&v10, (uint64_t)&v9, 0);
  if (SceneNode)
  else
    v3 = 0;
  PCString::~PCString((PCString *)&v9);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v10);
  if ((_QWORD)v10)
  {
    v8 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    OZChannel::setValue((OZChannel *)(v10 + 1976), &v8, 12.0, 0);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v3)
    return (uint64_t)v3 + 200;
  else
    return 0;
}

void sub_1B29568C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, char a13)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTimeDateGenerator::didAddToScene(TXTimeDateGenerator *this, OZScene *a2)
{
  TXTextGenerator::didAddToScene((TXTimeDateGenerator *)((char *)this - 200), a2);
}

uint64_t TXTimeDateGenerator::writeBody(TXTimeDateGenerator *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  const void *v7;
  PCString v9;

  TXTextLayout::writeBody(this, a2, a3, a4, a5);
  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXTimeDateGeneratorScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 1);
  v7 = (const void *)MEMORY[0x1B5E27CDC](*((_QWORD *)this + 8051));
  PCURL::PCURL((PCURL *)&v9, v7);
  (*(void (**)(PCSerializerWriteStream *, uint64_t, PCString *))(*(_QWORD *)a2 + 200))(a2, 2, &v9);
  PCString::~PCString(&v9);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

void sub_1B295699C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTimeDateGenerator::writeBody(TXTimeDateGenerator *this, PCSerializerWriteStream *a2, uint64_t a3, int a4, uint64_t a5)
{
  return TXTimeDateGenerator::writeBody((TXTimeDateGenerator *)((char *)this - 200), a2, a3, a4, a5);
}

{
  return TXTimeDateGenerator::writeBody((TXTimeDateGenerator *)((char *)this - 248), a2, a3, a4, a5);
}

uint64_t TXTimeDateGenerator::parseBegin(TXTimeDateGenerator *this, PCSerializerReadStream *a2)
{
  TXTextLayout::parseBegin(this, a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXTimeDateGeneratorScope);
  return 1;
}

uint64_t `non-virtual thunk to'TXTimeDateGenerator::parseBegin(TXTimeDateGenerator *this, PCSerializerReadStream *a2)
{
  TXTextLayout::parseBegin((TXTimeDateGenerator *)((char *)this - 200), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXTimeDateGeneratorScope);
  return 1;
}

{
  TXTextLayout::parseBegin((TXTimeDateGenerator *)((char *)this - 248), a2);
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXTimeDateGeneratorScope);
  return 1;
}

uint64_t TXTimeDateGenerator::parseElement(TXTimeDateGenerator *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  TXParagraphStyleFolder_Factory *v6;
  void *v7;
  PCSharedCount v9;

  v6 = (TXParagraphStyleFolder_Factory *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  if ((TXParagraphStyleFolder_Factory::version(v6) & 1) == 0 && *((_DWORD *)a3 + 2) == 1)
  {
    PCSharedCount::PCSharedCount(&v9);
    PCSerializerReadStream::getAttributeAsString((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v9);
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DC8]), "initWithLocaleIdentifier:", PCString::ns_str((PCString *)&v9));
    TXTextLayout::setLocale(this, v7);

    PCString::~PCString((PCString *)&v9);
  }
  TXTextLayout::parseElement(this, a2, a3);
  return 1;
}

void sub_1B2956B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTimeDateGenerator::parseElement(TXTimeDateGenerator *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  TXTimeDateGenerator::parseElement((TXTimeDateGenerator *)((char *)this - 200), a2, a3);
  return 1;
}

{
  TXTimeDateGenerator::parseElement((TXTimeDateGenerator *)((char *)this - 248), a2, a3);
  return 1;
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(void)::TXTimeDateGenerator_valueInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(void)::TXTimeDateGenerator_valueInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::_TXTimeDateGenerator_valueInfo;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *v0;

  if (!TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::_TXTimeDateGenerator_valueInfo)
  {
    v0 = (TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *)operator new();
    TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::TXTimeDateGenerator_valueInfo(v0);
    TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::_TXTimeDateGenerator_valueInfo = (uint64_t)v0;
  }
}

void sub_1B2956C20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *TXTimeDateGenerator::TXTimeDateGenerator_valueInfo::TXTimeDateGenerator_valueInfo(TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, 0.0, 100.0, 1.0, 0.01, 60.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXTimeDateGenerator::TXTimeDateGenerator_valueInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E650AE50;
  *((_QWORD *)this + 10) = &unk_1E650AE70;
  return this;
}

void sub_1B2956CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_startImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(void)::TXTimeDateGenerator_startImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(void)::TXTimeDateGenerator_startImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_startImpl::_TXTimeDateGenerator_start;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_startImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTimeDateGenerator::TXTimeDateGenerator_startImpl *v0;

  if (!TXTimeDateGenerator::TXTimeDateGenerator_startImpl::_TXTimeDateGenerator_start)
  {
    v0 = (TXTimeDateGenerator::TXTimeDateGenerator_startImpl *)operator new();
    TXTimeDateGenerator::TXTimeDateGenerator_startImpl::TXTimeDateGenerator_startImpl(v0);
    TXTimeDateGenerator::TXTimeDateGenerator_startImpl::_TXTimeDateGenerator_start = (uint64_t)v0;
  }
}

void sub_1B2956DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTimeDateGenerator::TXTimeDateGenerator_startImpl *TXTimeDateGenerator::TXTimeDateGenerator_startImpl::TXTimeDateGenerator_startImpl(TXTimeDateGenerator::TXTimeDateGenerator_startImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((TXTimeDateGenerator::TXTimeDateGenerator_startImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E650AEC8;
  *((_QWORD *)this + 5) = &unk_1E650AEE8;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2956E54(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_endImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(void)::TXTimeDateGenerator_endImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(void)::TXTimeDateGenerator_endImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_endImpl::_TXTimeDateGenerator_end;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_endImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTimeDateGenerator::TXTimeDateGenerator_endImpl *v0;

  if (!TXTimeDateGenerator::TXTimeDateGenerator_endImpl::_TXTimeDateGenerator_end)
  {
    v0 = (TXTimeDateGenerator::TXTimeDateGenerator_endImpl *)operator new();
    TXTimeDateGenerator::TXTimeDateGenerator_endImpl::TXTimeDateGenerator_endImpl(v0);
    TXTimeDateGenerator::TXTimeDateGenerator_endImpl::_TXTimeDateGenerator_end = (uint64_t)v0;
  }
}

void sub_1B2956F20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTimeDateGenerator::TXTimeDateGenerator_endImpl *TXTimeDateGenerator::TXTimeDateGenerator_endImpl::TXTimeDateGenerator_endImpl(TXTimeDateGenerator::TXTimeDateGenerator_endImpl *this)
{
  OZCurve *OZChannelDoubleCurve;

  OZChannelDoubleCurve = (OZCurve *)OZChannelDouble::createOZChannelDoubleCurve(this, 0.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelDoubleCurve, 0.0, 0, 1);
  PCSingleton::PCSingleton((TXTimeDateGenerator::TXTimeDateGenerator_endImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E650AF40;
  *((_QWORD *)this + 5) = &unk_1E650AF60;
  OZChannelImpl::setMin((OZChannelImpl *)this, -1.79769313e308);
  OZChannelImpl::setMax((OZChannelImpl *)this, 1.79769313e308);
  return this;
}

void sub_1B2956FD4(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(void)::TXTimeDateGenerator_timeStyleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(void)::TXTimeDateGenerator_timeStyleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::_TXTimeDateGenerator_timeStyle;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl *v0;

  if (!TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::_TXTimeDateGenerator_timeStyle)
  {
    v0 = (TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl *)operator new();
    TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::TXTimeDateGenerator_timeStyleImpl(v0);
    TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::_TXTimeDateGenerator_timeStyle = (uint64_t)v0;
  }
}

void sub_1B29570A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl *TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl::TXTimeDateGenerator_timeStyleImpl(TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 2.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 2.0, 0, 1);
  PCSingleton::PCSingleton((TXTimeDateGenerator::TXTimeDateGenerator_timeStyleImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E650AFB8;
  *((_QWORD *)this + 5) = &unk_1E650AFD8;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B2957150(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

OZCurveEnum *OZChannelEnum::createOZChannelEnumCurve(OZChannelEnum *this, double a2)
{
  OZCurveEnum *v3;

  v3 = (OZCurveEnum *)operator new();
  OZCurveEnum::OZCurveEnum(v3, a2);
  return v3;
}

void sub_1B29571C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F9881970);
  _Unwind_Resume(a1);
}

uint64_t TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(void)::TXTimeDateGenerator_dateStyleImpl_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(void)::TXTimeDateGenerator_dateStyleImpl_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::_TXTimeDateGenerator_dateStyle;
}

void std::__call_once_param<std::tuple<TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl *v0;

  if (!TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::_TXTimeDateGenerator_dateStyle)
  {
    v0 = (TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl *)operator new();
    TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::TXTimeDateGenerator_dateStyleImpl(v0);
    TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::_TXTimeDateGenerator_dateStyle = (uint64_t)v0;
  }
}

void sub_1B295728C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40941221CDLL);
  _Unwind_Resume(a1);
}

TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl *TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl::TXTimeDateGenerator_dateStyleImpl(TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl *this)
{
  OZCurve *OZChannelEnumCurve;

  OZChannelEnumCurve = (OZCurve *)OZChannelEnum::createOZChannelEnumCurve(this, 2.0);
  OZChannelImpl::OZChannelImpl((OZChannelImpl *)this, OZChannelEnumCurve, 2.0, 0, 1);
  PCSingleton::PCSingleton((TXTimeDateGenerator::TXTimeDateGenerator_dateStyleImpl *)((char *)this + 40), 50);
  *(_QWORD *)this = &unk_1E650B030;
  *((_QWORD *)this + 5) = &unk_1E650B050;
  OZChannelImpl::setMin((OZChannelImpl *)this, 0.0);
  OZChannelImpl::setMax((OZChannelImpl *)this, 4294967300.0);
  return this;
}

void sub_1B295733C(_Unwind_Exception *a1)
{
  OZChannelImpl *v1;

  OZChannelImpl::~OZChannelImpl(v1);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior::TXSequenceBehavior(TXSequenceBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCURL *v6;
  PCURL *v7;
  PCURL *v8;
  PCURL *v9;
  PCString *v10;
  PCString *v11;
  PCString *v12;
  PCString *v13;
  PCString *v14;
  PCString *v15;
  PCString *v16;
  PCString *v17;
  PCString *v18;
  PCURL *v19;
  PCString *v20;
  PCURL *v21;
  PCURL *v22;
  PCURL *v23;
  PCURL *v24;
  PCURL *v25;
  PCURL *v26;
  PCURL *v27;
  PCURL *v28;
  PCURL *v29;
  PCURL *v30;
  PCURL *v31;
  PCURL *v32;
  PCURL *v33;
  PCURL *v34;
  PCURL *v35;
  PCURL *v36;
  PCURL *v37;
  PCURL *v38;
  PCURL *v39;
  PCURL *v40;
  PCURL *v41;
  PCURL *v42;
  PCString *v43;
  PCString *v44;
  PCURL *v45;
  PCURL *v46;
  PCString *v47;
  PCString *v48;
  uint64_t v49;
  PCString v50;
  PCString v51;

  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  *(_QWORD *)(v5 + 536) = &unk_1E650B8C8;
  OZLocking::OZLocking((OZLocking *)(v5 + 544));
  *(_QWORD *)this = &off_1E650B0A8;
  *((_QWORD *)this + 2) = &unk_1E650B3E8;
  *((_QWORD *)this + 6) = &unk_1E650B640;
  *((_QWORD *)this + 42) = &unk_1E650B698;
  *((_QWORD *)this + 67) = &unk_1E650B6C0;
  *((_QWORD *)this + 68) = &unk_1E650B720;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 94) = 0;
  *((_BYTE *)this + 796) = 0;
  *((_QWORD *)this + 101) = 0;
  TXSequenceChannels::TXSequenceChannels((TXSequenceBehavior *)((char *)this + 816), (OZChannelFolder *)((char *)this + 56), 0xC8u);
  PCURL::PCURL((PCURL *)&v51, CFSTR("Text Sequence Behavior Controls"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 27984), &v51, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v6, CFSTR("Text Sequence Behavior Sequencing Enum"));
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Behavior Sequencing"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 28112), 1u, &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v7, CFSTR("Text Sequence Behavior Units Enum"));
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Behavior Units"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 28368), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v8, CFSTR("Text Sequence Behavior Start"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28624), 0.0, &v51, (OZChannelFolder *)((char *)this + 27984), 0xDAu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v9, CFSTR("Text Sequence Behavior End"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28776), 0.0, &v51, (OZChannelFolder *)((char *)this + 27984), 0xDBu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v10, "Transcription");
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28928), &v51, (OZChannelFolder *)((char *)this + 27984), 0xF4u, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v11, "Transcription");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29056), &v51, (OZChannelFolder *)((char *)this + 28928), 0xF0u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v12, "Duration");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 29208), 10, &v51, (OZChannelFolder *)((char *)this + 28928), 0xEEu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v13, "Word;Line;Block");
  PCString::PCString(&v50, "Trigger When");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 29360), &v51, &v50, (OZChannelFolder *)((char *)this + 28928), 0xEDu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCString::PCString(v14, "Trigger Offset");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 29616), &v51, (OZChannelFolder *)((char *)this + 28928), 0xF2u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v15, "Speech Begins;Speech Ends");
  PCString::PCString(&v50, "Trigger Time");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 29768), &v51, &v50, (OZChannelFolder *)((char *)this + 28928), 0xF1u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCString::PCString(v16, "None;Word;Line");
  PCString::PCString(&v50, "Complete");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30024), &v51, &v50, (OZChannelFolder *)((char *)this + 28928), 0xF5u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCString::PCString(v17, "Completion Duration");
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 30280), &v51, (OZChannelFolder *)((char *)this + 28928), 0xF8u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v18, "Add to input;Multiply by input;Replace input");
  PCString::PCString(&v50, "Apply Mode");
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30432), 2u, &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xF3u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v19, CFSTR("Text Sequence Behavior Subselection"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30688), &v51, (OZChannelFolder *)((char *)this + 27984), 0xE5u, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v20, "All;Character;Character in Word;Character in Line;Word;Word in Line;Line;Word in Phrase;Emoji");
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Behavior Subselection Units"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30816), &v51, &v50, (OZChannelFolder *)((char *)this + 30688), 0xE6u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v21, CFSTR("Text Sequence Behavior Subselection Start"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 31072), 0.0, &v51, (OZChannelFolder *)((char *)this + 30688), 0xE7u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v22, CFSTR("Text Sequence Behavior Subselection End"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 31224), 1.0, &v51, (OZChannelFolder *)((char *)this + 30688), 0xE8u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v23, CFSTR("Text Sequence Behavior Subselection Invert"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31376), &v51, (OZChannelFolder *)((char *)this + 30688), 0xE9u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v24, CFSTR("Text Sequence Behavior Subselection Reverse"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31528), &v51, (OZChannelFolder *)((char *)this + 30688), 0xEAu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v25, CFSTR("Text Sequence Behavior Spread"));
  OZChannelDouble::OZChannelDouble((TXSequenceBehavior *)((char *)this + 31680), 1.0, &v51, (OZChannelFolder *)((char *)this + 27984), 0xCCu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v26, CFSTR("Text Sequence Behavior Direction Enum"));
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Behavior Direction"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 31832), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v27, CFSTR("Text Sequence Behavior Random Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 32088), &v51, (OZChannelFolder *)((char *)this + 27984), 0xCFu, 4194306, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v28, CFSTR("Text Sequence Behavior Speed Enum"));
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Behavior Speed"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 32240), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xD0u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v29, CFSTR("Text Sequence Behavior Custom Speed"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 32496), 0.0, &v51, (OZChannelFolder *)((char *)this + 27984), 0xD1u, 0x400002u, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v30, CFSTR("Text Sequence Behavior Loops"));
  OZChannelDouble::OZChannelDouble((TXSequenceBehavior *)((char *)this + 32648), 1, &v51, (OZChannelFolder *)((char *)this + 27984), 0xD2u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v31, CFSTR("Text Sequence Behavior Apply Speed Enum"));
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Behavior Apply Speed"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 32800), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xD3u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v32, CFSTR("Text Sequence Behavior Start Offset"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 33056), &v51, (OZChannelFolder *)((char *)this + 27984), 0xEBu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v33, CFSTR("Text Sequence Behavior End Condition Enum"));
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Behavior End Condition"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 33208), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xD4u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v34, CFSTR("Text Sequence Behavior End Offset"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 33464), &v51, (OZChannelFolder *)((char *)this + 27984), 0xD5u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v35, CFSTR("Text Sequence Behavior Variance"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 33616), &v51, (OZChannelFolder *)((char *)this + 27984), 0xDCu, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v36, CFSTR("Text Sequence Behavior Variance"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 222, 0.0, &v51, (OZChannelFolder *)((char *)this + 33616), 0xD6u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v37, CFSTR("Text Sequence Behavior Variance Min"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 223, -1.0, &v51, (OZChannelFolder *)((char *)this + 33616), 0xD7u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v38, CFSTR("Text Sequence Behavior Variance Max"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 224, 1.0, &v51, (OZChannelFolder *)((char *)this + 33616), 0xD8u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v39, CFSTR("Text Sequence Behavior Variance Amount"));
  OZChannelDouble::OZChannelDouble((TXSequenceBehavior *)((char *)this + 34200), 100.0, &v51, (OZChannelFolder *)((char *)this + 33616), 0xDDu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v40, CFSTR("Text Sequence Behavior Variance Noisiness"));
  OZChannelDouble::OZChannelDouble((TXSequenceBehavior *)((char *)this + 34352), 0.5, &v51, (OZChannelFolder *)((char *)this + 33616), 0xDEu, 0, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v41, CFSTR("Text Sequence Behavior Fix End Points Enum"));
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Behavior Fix End Points"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 34504), &v51, &v50, (OZChannelFolder *)((char *)this + 33616), 0xDFu, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v42, CFSTR("Text Sequence Behavior Variance Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 34760), &v51, (OZChannelFolder *)((char *)this + 33616), 0xD9u, 0, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v43, "Draw Selection");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 34912), &v51, (OZChannelFolder *)((char *)this + 27984), 0xE0u, 0x400002u, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v44, "Selection Color");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 35064), 0.35, &v51, (OZChannelFolder *)((char *)this + 27984), 0xE1u, 0x400002u, 0, 0);
  PCString::~PCString(&v51);
  PCURL::PCURL(v45, CFSTR("Text Sequence Behavior OSC Mode Enum"));
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Behavior OSC Mode"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 35216), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xE2u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCURL::PCURL(v46, CFSTR("Text Sequence Position Options Enum"));
  PCURL::PCURL((PCURL *)&v50, CFSTR("Text Sequence Position Options"));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 35472), &v51, &v50, (OZChannelFolder *)((char *)this + 27984), 0xE3u, 0, 0, 0);
  PCString::~PCString(&v50);
  PCString::~PCString(&v51);
  PCString::PCString(v47, "");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 35728), 1, &v51, (OZChannelFolder *)((char *)this + 27984), 0xE4u, 2u, 0, 0);
  PCString::~PCString(&v51);
  PCString::PCString(v48, "");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 35880), 1, &v51, (OZChannelFolder *)((char *)this + 27984), 0xECu, 2u, 0, 0);
  PCString::~PCString(&v51);
  *((_OWORD *)this + 2254) = 0u;
  *((_QWORD *)this + 4507) = (char *)this + 36064;
  *((_BYTE *)this + 36049) = 0;
  *((_OWORD *)this + 2252) = 0u;
  v49 = MEMORY[0x1E0CA2E18];
  *((_OWORD *)this + 2255) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)this + 4512) = *(_QWORD *)(v49 + 16);
  *((_DWORD *)this + 9026) = 0;
  *((_QWORD *)this + 4514) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 28624), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 28624));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 28776), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 28776));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 30688), 4);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 32496), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 32496));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 33616), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 33616));
  OZChannelFolder::setFoldFlag((OZChannelFolder *)((char *)this + 33616), 4);
  OZChannel::setMin((OZChannel *)((char *)this + 31680), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 32648), 1.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 32648), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 33464), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 33464), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 33464), 100.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 33056), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 33056), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 33056), 100.0);
  OZChannel::setMin((OZChannel *)this + 223, -1.0);
  OZChannel::setMin((OZChannel *)this + 224, -1.0);
  OZChannel::setMin((OZChannel *)this + 226, 0.0);
  OZChannel::setMax((OZChannel *)this + 226, 1.0);
  OZChannel::setSliderMin((OZChannel *)this + 226, 0.0);
  OZChannel::setSliderMax((OZChannel *)this + 226, 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 31072), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 31072), 20.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 31224), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 31224), 20.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 29208), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 29208), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 29208), 100.0);
  OZChannel::setMin((OZChannel *)((char *)this + 29616), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 29616), 10.0);
  *((_BYTE *)this + 36048) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 35472), MEMORY[0x1E0CA2E68], 0.0) == 1;
  *((_BYTE *)this + 768) = 0;
}

void sub_1B295846C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannelEnum *a11, OZChannelPercent *a12, OZChannelBool *a13, OZChannel *a14, OZChannelEnum *a15, OZChannel *a16, OZChannelPercent *a17, OZChannelEnum *a18, OZChannelEnum *a19, OZChannelEnum *a20,OZChannel *a21,OZChannelEnum *a22,OZChannelBool *a23,OZChannelBool *a24,OZChannelEnum *a25,OZChannelEnum *a26,OZChannel *a27,OZChannelEnum *a28,OZChannelEnum *a29,OZChannelEnum *a30,OZChannelBool *a31,OZChannelFolder *a32,OZChannelEnum *a33,OZChannelEnum *a34,TXSequenceChannels *a35,OZChannelPercent *a36)
{
  uint64_t v36;
  OZChannelEnum *v37;
  OZChannelFolder *v38;
  OZChannel *v39;
  OZChannelFolder *v40;
  OZChannelBool *v41;
  uint64_t v42;
  void *v43;

  PCString::~PCString((PCString *)(v42 - 96));
  OZChannelBool::~OZChannelBool(v41);
  OZChannelEnum::~OZChannelEnum(v37);
  OZChannelEnum::~OZChannelEnum(a11);
  OZChannelPercent::~OZChannelPercent(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannel::~OZChannel(v39);
  OZChannel::~OZChannel(a16);
  OZChannelPercent::~OZChannelPercent(a36);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 208));
  OZChannelPercent::~OZChannelPercent(a17);
  OZChannelFolder::~OZChannelFolder(v40);
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 136));
  OZChannelEnum::~OZChannelEnum(a18);
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 128));
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 192));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 168));
  OZChannelEnum::~OZChannelEnum(a20);
  OZChannel::~OZChannel(a21);
  OZChannelEnum::~OZChannelEnum(a22);
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 200));
  OZChannelBool::~OZChannelBool(a23);
  OZChannelBool::~OZChannelBool(a24);
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 184));
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 176));
  OZChannelEnum::~OZChannelEnum(a25);
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v42 - 112));
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannel::~OZChannel(a27);
  OZChannelEnum::~OZChannelEnum(a28);
  OZChannelEnum::~OZChannelEnum(a29);
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 160));
  OZChannelEnum::~OZChannelEnum(a30);
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 120));
  OZChannelBool::~OZChannelBool(a31);
  OZChannelFolder::~OZChannelFolder(a32);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 152));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 144));
  OZChannelEnum::~OZChannelEnum(a33);
  OZChannelEnum::~OZChannelEnum(a34);
  OZChannelFolder::~OZChannelFolder(v38);
  TXSequenceChannels::~TXSequenceChannels(a35);
  v43 = *(void **)(v36 + 744);
  if (v43)
  {
    *(_QWORD *)(v36 + 752) = v43;
    operator delete(v43);
  }
  *(_QWORD *)(v36 + 544) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v36 + 672));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v36 + 552));
  TXTextBehavior::~TXTextBehavior((TXTextBehavior *)v36);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior::TXSequenceBehavior(TXSequenceBehavior *this, const TXSequenceBehavior *a2, char a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(_QWORD *)(v5 + 536) = &unk_1E650B8C8;
  OZLocking::OZLocking((OZLocking *)(v5 + 544));
  *(_QWORD *)this = &off_1E650B0A8;
  *((_QWORD *)this + 2) = &unk_1E650B3E8;
  *((_QWORD *)this + 6) = &unk_1E650B640;
  *((_QWORD *)this + 42) = &unk_1E650B698;
  *((_QWORD *)this + 67) = &unk_1E650B6C0;
  *((_QWORD *)this + 68) = &unk_1E650B720;
  *((_QWORD *)this + 93) = 0;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 94) = 0;
  *((_BYTE *)this + 796) = 0;
  *((_QWORD *)this + 101) = *((_QWORD *)a2 + 101);
  TXSequenceChannels::TXSequenceChannels((TXSequenceBehavior *)((char *)this + 816), (const TXSequenceBehavior *)((char *)a2 + 816), (OZChannelFolder *)((char *)this + 56));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 27984), (const OZChannelFolder *)((char *)a2 + 27984), (OZChannelFolder *)((char *)this + 56));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 28112), (const TXSequenceBehavior *)((char *)a2 + 28112), (OZChannelFolder *)((char *)this + 27984));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 28368), (const TXSequenceBehavior *)((char *)a2 + 28368), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28624), (const OZChannelBase *)((char *)a2 + 28624), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 28776), (const OZChannelBase *)((char *)a2 + 28776), (OZChannelFolder *)((char *)this + 27984));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 28928), (const OZChannelFolder *)((char *)a2 + 28928), (OZChannelFolder *)((char *)this + 27984));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 29056), (const OZChannelBase *)((char *)a2 + 29056), (OZChannelFolder *)((char *)this + 28928));
  OZChannel::OZChannel((OZChannel *)((char *)this + 29208), (const OZChannelBase *)((char *)a2 + 29208), (OZChannelFolder *)((char *)this + 28928));
  *((_QWORD *)this + 3651) = &off_1E6551AF8;
  *((_QWORD *)this + 3653) = &unk_1E6551E58;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 29360), (const TXSequenceBehavior *)((char *)a2 + 29360), (OZChannelFolder *)((char *)this + 28928));
  OZChannel::OZChannel((OZChannel *)((char *)this + 29616), (const OZChannelBase *)((char *)a2 + 29616), (OZChannelFolder *)((char *)this + 28928));
  *((_QWORD *)this + 3702) = &off_1E6551AF8;
  *((_QWORD *)this + 3704) = &unk_1E6551E58;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 29768), (const TXSequenceBehavior *)((char *)a2 + 29768), (OZChannelFolder *)((char *)this + 28928));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30024), (const TXSequenceBehavior *)((char *)a2 + 30024), (OZChannelFolder *)((char *)this + 28928));
  OZChannel::OZChannel((OZChannel *)((char *)this + 30280), (const OZChannelBase *)((char *)a2 + 30280), (OZChannelFolder *)((char *)this + 28928));
  *((_QWORD *)this + 3785) = &off_1E6551AF8;
  *((_QWORD *)this + 3787) = &unk_1E6551E58;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30432), (const TXSequenceBehavior *)((char *)a2 + 30432), (OZChannelFolder *)((char *)this + 27984));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 30688), (const OZChannelFolder *)((char *)a2 + 30688), (OZChannelFolder *)((char *)this + 27984));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 30816), (const TXSequenceBehavior *)((char *)a2 + 30816), (OZChannelFolder *)((char *)this + 30688));
  OZChannel::OZChannel((OZChannel *)((char *)this + 31072), (const OZChannelBase *)((char *)a2 + 31072), (OZChannelFolder *)((char *)this + 30688));
  *((_QWORD *)this + 3884) = &off_1E6551AF8;
  *((_QWORD *)this + 3886) = &unk_1E6551E58;
  OZChannel::OZChannel((OZChannel *)((char *)this + 31224), (const OZChannelBase *)((char *)a2 + 31224), (OZChannelFolder *)((char *)this + 30688));
  *((_QWORD *)this + 3903) = &off_1E6551AF8;
  *((_QWORD *)this + 3905) = &unk_1E6551E58;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31376), (const OZChannelBase *)((char *)a2 + 31376), (OZChannelFolder *)((char *)this + 30688));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 31528), (const OZChannelBase *)((char *)a2 + 31528), (OZChannelFolder *)((char *)this + 30688));
  OZChannel::OZChannel((OZChannel *)((char *)this + 31680), (const OZChannelBase *)((char *)a2 + 31680), (OZChannelFolder *)((char *)this + 27984));
  *((_QWORD *)this + 3960) = &off_1E6551358;
  *((_QWORD *)this + 3962) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 31832), (const TXSequenceBehavior *)((char *)a2 + 31832), (OZChannelFolder *)((char *)this + 27984));
  OZChannel::OZChannel((OZChannel *)((char *)this + 32088), (const OZChannelBase *)((char *)a2 + 32088), (OZChannelFolder *)((char *)this + 27984));
  *((_QWORD *)this + 4011) = &off_1E65531D8;
  *((_QWORD *)this + 4013) = &unk_1E6553538;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 32240), (const TXSequenceBehavior *)((char *)a2 + 32240), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 32496), (const OZChannelBase *)((char *)a2 + 32496), (OZChannelFolder *)((char *)this + 27984));
  OZChannel::OZChannel((OZChannel *)((char *)this + 32648), (const OZChannelBase *)((char *)a2 + 32648), (OZChannelFolder *)((char *)this + 27984));
  *((_QWORD *)this + 4081) = &off_1E6551358;
  *((_QWORD *)this + 4083) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 32800), (const TXSequenceBehavior *)((char *)a2 + 32800), (OZChannelFolder *)((char *)this + 27984));
  OZChannel::OZChannel((OZChannel *)((char *)this + 33056), (const OZChannelBase *)((char *)a2 + 33056), (OZChannelFolder *)((char *)this + 27984));
  *v6 = &off_1E6551AF8;
  v6[2] = &unk_1E6551E58;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 33208), (const TXSequenceBehavior *)((char *)a2 + 33208), (OZChannelFolder *)((char *)this + 27984));
  OZChannel::OZChannel((OZChannel *)((char *)this + 33464), (const OZChannelBase *)((char *)a2 + 33464), (OZChannelFolder *)((char *)this + 27984));
  *v7 = &off_1E6551AF8;
  v7[2] = &unk_1E6551E58;
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 33616), (const OZChannelFolder *)((char *)a2 + 33616), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 222, (const OZChannelBase *)((char *)a2 + 33744), (OZChannelFolder *)((char *)this + 33616));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 223, (const OZChannelBase *)((char *)a2 + 33896), (OZChannelFolder *)((char *)this + 33616));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)this + 224, (const OZChannelBase *)a2 + 304, (OZChannelFolder *)((char *)this + 33616));
  OZChannel::OZChannel((OZChannel *)this + 225, (const OZChannelBase *)((char *)a2 + 34200), (OZChannelFolder *)((char *)this + 33616));
  *((_QWORD *)this + 4275) = &off_1E6551358;
  *((_QWORD *)this + 4277) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)this + 226, (const OZChannelBase *)((char *)a2 + 34352), (OZChannelFolder *)((char *)this + 33616));
  *((_QWORD *)this + 4294) = &off_1E6551358;
  *((_QWORD *)this + 4296) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 34504), (const TXSequenceBehavior *)((char *)a2 + 34504), (OZChannelFolder *)((char *)this + 33616));
  OZChannel::OZChannel((OZChannel *)((char *)this + 34760), (const OZChannelBase *)((char *)a2 + 34760), (OZChannelFolder *)((char *)this + 33616));
  *((_QWORD *)this + 4345) = &off_1E65531D8;
  *((_QWORD *)this + 4347) = &unk_1E6553538;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 34912), (const OZChannelBase *)((char *)a2 + 34912), (OZChannelFolder *)((char *)this + 27984));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 35064), (const OZChannelBase *)((char *)a2 + 35064), (OZChannelFolder *)((char *)this + 27984));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 35216), (const TXSequenceBehavior *)((char *)a2 + 35216), (OZChannelFolder *)((char *)this + 27984));
  OZChannelEnum::OZChannelEnum((TXSequenceBehavior *)((char *)this + 35472), (const TXSequenceBehavior *)((char *)a2 + 35472), (OZChannelFolder *)((char *)this + 27984));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 35728), (const OZChannelBase *)a2 + 319, (OZChannelFolder *)((char *)this + 27984));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 35880), (const OZChannelBase *)((char *)a2 + 35880), (OZChannelFolder *)((char *)this + 27984));
  *((_QWORD *)this + 4504) = 0;
  *((_DWORD *)this + 9010) = 0;
  *((_DWORD *)this + 9011) = *((_DWORD *)a2 + 9011);
  *((_BYTE *)this + 36049) = *((_BYTE *)a2 + 36049);
  *((_QWORD *)this + 4508) = 0;
  *((_QWORD *)this + 4509) = 0;
  *((_QWORD *)this + 4507) = (char *)this + 36064;
  v8 = MEMORY[0x1E0CA2E18];
  *((_OWORD *)this + 2255) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)this + 4512) = *(_QWORD *)(v8 + 16);
  *((_DWORD *)this + 9026) = 0;
  *((_QWORD *)this + 4514) = 0;
  *((_BYTE *)this + 36048) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 35472), MEMORY[0x1E0CA2E68], 0.0) == 1;
  TXSequenceBehavior::fixControlsFolderLocation(this);
  *((_BYTE *)this + 768) = 0;
}

void sub_1B29591C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, OZChannelPercent *a11, OZChannelBool *a12, OZChannelEnum *a13, OZChannel *a14, OZChannelPercent *a15, OZChannelPercent *a16, OZChannelPercent *a17, OZChannel *a18, OZChannelEnum *a19, OZChannel *a20,OZChannelEnum *a21,OZChannel *a22,OZChannelPercent *a23,OZChannelEnum *a24,OZChannel *a25,OZChannelEnum *a26,OZChannel *a27,OZChannelBool *a28,OZChannelBool *a29,OZChannel *a30,OZChannel *a31,OZChannelEnum *a32,OZChannelFolder *a33,OZChannelEnum *a34)
{
  uint64_t v34;
  OZChannelFolder *v35;
  OZChannel *v36;
  OZChannelBool *v37;
  OZChannel *v38;
  OZChannelEnum *v39;
  OZChannelEnum *v40;
  OZChannelFolder *v41;
  uint64_t v42;
  void *v43;

  OZChannelBool::~OZChannelBool(v37);
  OZChannelEnum::~OZChannelEnum(v39);
  OZChannelEnum::~OZChannelEnum(v40);
  OZChannelPercent::~OZChannelPercent(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannel::~OZChannel(v36);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannel::~OZChannel(a14);
  OZChannel::~OZChannel(v38);
  OZChannelPercent::~OZChannelPercent(a15);
  OZChannelPercent::~OZChannelPercent(a16);
  OZChannelPercent::~OZChannelPercent(a17);
  OZChannelFolder::~OZChannelFolder(v41);
  OZChannel::~OZChannel(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannel::~OZChannel(a20);
  OZChannelEnum::~OZChannelEnum(a21);
  OZChannel::~OZChannel(a22);
  OZChannelPercent::~OZChannelPercent(a23);
  OZChannelEnum::~OZChannelEnum(a24);
  OZChannel::~OZChannel(a25);
  OZChannelEnum::~OZChannelEnum(a26);
  OZChannel::~OZChannel(a27);
  OZChannelBool::~OZChannelBool(a28);
  OZChannelBool::~OZChannelBool(a29);
  OZChannel::~OZChannel(a30);
  OZChannel::~OZChannel(a31);
  OZChannelEnum::~OZChannelEnum(a32);
  OZChannelFolder::~OZChannelFolder(a33);
  OZChannelEnum::~OZChannelEnum(a34);
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 192));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 184));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 176));
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 168));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 160));
  OZChannel::~OZChannel(*(OZChannel **)(v42 - 152));
  OZChannelBool::~OZChannelBool(*(OZChannelBool **)(v42 - 144));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v42 - 136));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 128));
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v42 - 120));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 112));
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v42 - 104));
  OZChannelFolder::~OZChannelFolder(v35);
  TXSequenceChannels::~TXSequenceChannels(*(TXSequenceChannels **)(v42 - 96));
  v43 = *(void **)(v34 + 744);
  if (v43)
  {
    *(_QWORD *)(v34 + 752) = v43;
    operator delete(v43);
  }
  *(_QWORD *)(v34 + 544) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)(v34 + 672));
  PCSharedMutex::~PCSharedMutex((std::mutex *)(v34 + 552));
  TXTextBehavior::~TXTextBehavior((TXTextBehavior *)v34);
  _Unwind_Resume(a1);
}

char *TXSequenceBehavior::fixControlsFolderLocation(TXSequenceBehavior *this)
{
  char *result;
  OZChannelFolder *v2;
  OZChannelBase *Descendant;
  BOOL v4;
  const OZChannelBase *v5;

  result = (char *)(*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 312))(this);
  if (result)
  {
    v2 = (OZChannelFolder *)result;
    Descendant = (OZChannelBase *)OZChannelFolder::getDescendant((OZChannelFolder *)result, 201);
    result = (char *)OZChannelFolder::getDescendant(v2, 1046);
    if (Descendant)
      v4 = result == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v5 = (const OZChannelBase *)result;
      OZChannelFolder::removeDescendant(v2, Descendant);
      return OZChannelFolder::insertDescendantAfter(v2, v5, Descendant);
    }
  }
  return result;
}

void TXSequenceBehavior::~TXSequenceBehavior(TXSequenceBehavior *this)
{
  uint64_t Scene;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  void *v7;

  *(_QWORD *)this = &off_1E650B0A8;
  *((_QWORD *)this + 2) = &unk_1E650B3E8;
  *((_QWORD *)this + 6) = &unk_1E650B640;
  *((_QWORD *)this + 42) = &unk_1E650B698;
  *((_QWORD *)this + 67) = &unk_1E650B6C0;
  *((_QWORD *)this + 68) = &unk_1E650B720;
  if (*((_BYTE *)this + 368))
  {
    Scene = OZBehavior::getScene(this);
    if (Scene)
    {
      OZDocument::removeCPPObserver(*(_QWORD *)(Scene + 1584));
      *((_BYTE *)this + 368) = 0;
    }
  }
  v3 = *((_QWORD *)this + 4504);
  if (v3)
  {
    MEMORY[0x1B5E2914C](v3, 0x1000C8052888210);
    *((_QWORD *)this + 4504) = 0;
  }
  v4 = (uint64_t *)*((_QWORD *)this + 93);
  v5 = (uint64_t *)*((_QWORD *)this + 94);
  if (v4 != v5)
  {
    do
    {
      v6 = *v4;
      if (*v4)
      {
        std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v6 + 32, *(_QWORD **)(v6 + 40));
        MEMORY[0x1B5E29170](v6, 0x1020C40A41566E0);
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = (uint64_t *)*((_QWORD *)this + 93);
  }
  *((_QWORD *)this + 94) = v4;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 36056, *((_QWORD **)this + 4508));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 35880));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 35728));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 35472));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 35216));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 35064));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 34912));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 34760));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 34504));
  OZChannel::~OZChannel((OZChannel *)this + 226);
  OZChannel::~OZChannel((OZChannel *)this + 225);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 224);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 223);
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)this + 222);
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 33616));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 33464));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 33208));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 33056));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 32800));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 32648));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 32496));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 32240));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 32088));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 31832));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 31680));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31528));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 31376));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 31224));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 31072));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 30816));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 30688));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 30432));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 30280));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 30024));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 29768));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29616));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 29360));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 29208));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 29056));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 28928));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28776));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 28624));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 28368));
  OZChannelEnum::~OZChannelEnum((TXSequenceBehavior *)((char *)this + 28112));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 27984));
  TXSequenceChannels::~TXSequenceChannels((TXSequenceBehavior *)((char *)this + 816));
  v7 = (void *)*((_QWORD *)this + 93);
  if (v7)
  {
    *((_QWORD *)this + 94) = v7;
    operator delete(v7);
  }
  *((_QWORD *)this + 68) = &unk_1E650B928;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 672));
  PCSharedMutex::~PCSharedMutex((std::mutex *)((char *)this + 552));
  TXTextBehavior::~TXTextBehavior(this);
}

{
  TXSequenceBehavior::~TXSequenceBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXSequenceBehavior::~TXSequenceBehavior(TXSequenceBehavior *this)
{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 16));
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 48));
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 336));
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 536));
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

{
  TXSequenceBehavior::~TXSequenceBehavior((TXSequenceBehavior *)((char *)this - 536));
  JUMPOUT(0x1B5E29170);
}

uint64_t TXSequenceBehavior::operator=(_QWORD *a1, const void *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  const void **v7;
  const void **i;
  const void *v9;
  uint64_t v10;
  OZChannelBase ***v11;
  OZChannelBase **v12;
  OZChannelBase **v13;
  OZChannelBase *v14;
  OZChannelBase *v15;
  uint64_t v16;

  TXTextBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  a1[101] = v4[101];
  TXSequenceChannels::operator=((uint64_t)(a1 + 102), (uint64_t)(v4 + 102));
  OZChannelBase::operator=((uint64_t)(a1 + 3514), (uint64_t)(v5 + 3514));
  OZChannelBase::operator=((uint64_t)(a1 + 3546), (uint64_t)(v5 + 3546));
  OZChannelBase::operator=((uint64_t)(a1 + 3578), (uint64_t)(v5 + 3578));
  OZChannelBase::operator=((uint64_t)(a1 + 3597), (uint64_t)(v5 + 3597));
  OZChannelBase::operator=((uint64_t)(a1 + 3632), (uint64_t)(v5 + 3632));
  OZChannelBase::operator=((uint64_t)(a1 + 3651), (uint64_t)(v5 + 3651));
  OZChannelBase::operator=((uint64_t)(a1 + 3670), (uint64_t)(v5 + 3670));
  OZChannelBase::operator=((uint64_t)(a1 + 3721), (uint64_t)(v5 + 3721));
  OZChannelBase::operator=((uint64_t)(a1 + 3702), (uint64_t)(v5 + 3702));
  OZChannelBase::operator=((uint64_t)(a1 + 3753), (uint64_t)(v5 + 3753));
  OZChannelBase::operator=((uint64_t)(a1 + 3785), (uint64_t)(v5 + 3785));
  OZChannelBase::operator=((uint64_t)(a1 + 3804), (uint64_t)(v5 + 3804));
  OZChannelBase::operator=((uint64_t)(a1 + 3960), (uint64_t)(v5 + 3960));
  OZChannelBase::operator=((uint64_t)(a1 + 3979), (uint64_t)(v5 + 3979));
  OZChannelBase::operator=((uint64_t)(a1 + 4011), (uint64_t)(v5 + 4011));
  OZChannelBase::operator=((uint64_t)(a1 + 4030), (uint64_t)(v5 + 4030));
  OZChannelBase::operator=((uint64_t)(a1 + 4062), (uint64_t)(v5 + 4062));
  OZChannelBase::operator=((uint64_t)(a1 + 4081), (uint64_t)(v5 + 4081));
  OZChannelBase::operator=((uint64_t)(a1 + 4100), (uint64_t)(v5 + 4100));
  OZChannelBase::operator=((uint64_t)(a1 + 4132), (uint64_t)(v5 + 4132));
  OZChannelBase::operator=((uint64_t)(a1 + 4151), (uint64_t)(v5 + 4151));
  OZChannelBase::operator=((uint64_t)(a1 + 4183), (uint64_t)(v5 + 4183));
  OZChannelFolder::operator=((uint64_t)(a1 + 4202));
  OZChannelBase::operator=((uint64_t)(a1 + 4218), (uint64_t)(v5 + 4218));
  OZChannelBase::operator=((uint64_t)(a1 + 4237), (uint64_t)(v5 + 4237));
  OZChannelBase::operator=((uint64_t)(a1 + 4256), (uint64_t)(v5 + 4256));
  OZChannelBase::operator=((uint64_t)(a1 + 4275), (uint64_t)(v5 + 4275));
  OZChannelBase::operator=((uint64_t)(a1 + 4294), (uint64_t)(v5 + 4294));
  OZChannelBase::operator=((uint64_t)(a1 + 4313), (uint64_t)(v5 + 4313));
  result = OZChannelBase::operator=((uint64_t)(a1 + 4345), (uint64_t)(v5 + 4345));
  v7 = (const void **)a1[103];
  for (i = (const void **)a1[104]; v7 != i; ++v7)
  {
    v9 = *v7;
    if ((*((_BYTE *)*v7 + 57) & 0x10) != 0)
    {
      v11 = *(OZChannelBase ****)(result + 112);
      v12 = *v11;
      v13 = v11[1];
      while (v12 != v13)
      {
        v15 = *v12++;
        v14 = v15;
        if (OZChannelBase::testFlag(v15, 2))
          v16 = 688;
        else
          v16 = 680;
        result = (*(uint64_t (**)(_QWORD *, OZChannelBase *))(*a1 + v16))(a1, v14);
      }
    }
    else
    {
      if (OZChannelBase::testFlag((OZChannelBase *)*v7, 2))
        v10 = 688;
      else
        v10 = 680;
      result = (*(uint64_t (**)(_QWORD *, const void *))(*a1 + v10))(a1, v9);
    }
  }
  return result;
}

BOOL TXSequenceBehavior::sequenceChannelsMatchTextSequenceChannels(TXSequenceBehavior *this)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL8 v6;
  uint64_t v7;
  const void *v8;
  _DWORD *v9;
  const void *v10;
  _DWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  char v19;

  v1 = *((_QWORD *)this + 101);
  v2 = *(_QWORD *)(v1 + 25040);
  v3 = (*(_QWORD *)(v1 + 25048) - v2) >> 3;
  v4 = *((_QWORD *)this + 103);
  if (v3 != (*((_QWORD *)this + 104) - v4) >> 3)
    return 0;
  v5 = 6;
  do
  {
    v6 = v3 == v5;
    if (v3 == v5)
      break;
    v7 = v5;
    if (v3 <= v5)
      goto LABEL_34;
    v8 = *(const void **)(v2 + 8 * v5);
    v9 = v8
    v10 = *(const void **)(v4 + 8 * v7);
    if (!v10)
      break;
    if (!v11)
      break;
    v12 = v11;
    if (v9[6] != v11[6])
      break;
    v13 = (_QWORD *)*((_QWORD *)v9 + 14);
    v14 = v13 ? ((v13[1] - *v13) >> 3) : 0;
    v15 = (_QWORD *)*((_QWORD *)v12 + 14);
    v16 = v15 ? ((v15[1] - *v15) >> 3) : 0;
    if (v14 != v16)
      break;
    if (v14)
    {
      v17 = 0;
      while ((uint64_t)(v13[1] - *v13) >> 3 != v17)
      {
        if (v17 >= (uint64_t)(v15[1] - *v15) >> 3)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        v18 = *(_DWORD *)(*(_QWORD *)(*v13 + 8 * v17) + 24) == *(_DWORD *)(*(_QWORD *)(*v15 + 8 * v17) + 24);
        v19 = v18;
        ++v17;
        if (!v18 || v17 >= v14)
          goto LABEL_29;
      }
LABEL_34:
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    }
    v19 = 1;
LABEL_29:
    v5 = v7 + 1;
  }
  while ((v19 & 1) != 0);
  return v6;
}

void TXSequenceBehavior::didAddToNode(TXSequenceBehavior *this, OZSceneNode *lpsrc)
{
  void *v4;
  uint64_t v5;
  OZScene *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  OZMaterialBase **v12;
  OZMaterialBase **v13;
  unint64_t *v14;
  unint64_t v15;

  if (lpsrc)
  {
    *((_QWORD *)this + 101) = v4;
    if (v4)
    {
      TXSequenceChannels::removeTrackingChannel((TXSequenceBehavior *)((char *)this + 816), 1004);
      if (*((_BYTE *)this + 36049))
      {
        TXSequenceBehavior::sequenceChannelsMatchTextSequenceChannels(this);
      }
      else
      {
        v7 = *(_QWORD *)(*((_QWORD *)this + 101) + 19352);
        v8 = *(_QWORD *)(v7 + 16);
        v9 = *(std::__shared_weak_count **)(v7 + 24);
        if (v9)
        {
          p_shared_owners = (unint64_t *)&v9->__shared_owners_;
          do
            v11 = __ldxr(p_shared_owners);
          while (__stxr(v11 + 1, p_shared_owners));
        }
        v12 = *(OZMaterialBase ***)(v8 + 480);
        v13 = *(OZMaterialBase ***)(v8 + 488);
        while (v12 != v13)
          TXSequenceChannels::addMaterialChannels((TXSequenceBehavior *)((char *)this + 816), *v12++, ((*((_QWORD *)this + 104) - *((_QWORD *)this + 103)) >> 3) - 6);
        *((_BYTE *)this + 36049) = 1;
        if (v9)
        {
          v14 = (unint64_t *)&v9->__shared_owners_;
          do
            v15 = __ldaxr(v14);
          while (__stlxr(v15 - 1, v14));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
      OZChannelBehavior::didAddToNode(this, lpsrc);
      TXSequenceBehavior::sequenceBehaviorDidLoad((uint64_t)this);
      if (!*((_BYTE *)this + 368))
      {
        v5 = (*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)lpsrc + 272))(lpsrc);
        if (v5)
        {
          OZDocument::addCPPObserver(*(_QWORD *)(v5 + 1584), (uint64_t)this + 336, 1001);
          *((_BYTE *)this + 368) = 1;
        }
      }
      TXSequenceBehavior::updateUnitsChannel(this);
      v6 = (OZScene *)(*(uint64_t (**)(OZSceneNode *))(*(_QWORD *)lpsrc + 272))(lpsrc);
      TXSequenceBehavior::setUpDefaultCustomSpeed(this, v6);
    }
  }
  else
  {
    *((_QWORD *)this + 101) = 0;
  }
}

void sub_1B295A038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceBehavior::sequenceBehaviorDidLoad(uint64_t this)
{
  const void **v1;
  const void **v2;
  uint64_t v3;
  const void *v4;
  OZChannelFolder *v5;

  v1 = *(const void ***)(this + 824);
  v2 = *(const void ***)(this + 832);
  if (v1 != v2)
  {
    v3 = this;
    do
    {
      v4 = *v1;
      if ((*((_BYTE *)*v1 + 57) & 0x10) != 0)
      {
        this = TXSequenceBehavior::attachDescendantSequencedChannels(v3, v5);
      }
      else
      {
        this = OZChannelBase::testFlag((OZChannelBase *)*v1, 2);
        if ((this & 1) == 0)
          this = (*(uint64_t (**)(uint64_t, const void *))(*(_QWORD *)v3 + 680))(v3, v4);
      }
      ++v1;
    }
    while (v1 != v2);
  }
  return this;
}

char *TXSequenceBehavior::updateUnitsChannel(TXSequenceBehavior *this)
{
  PCString *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E0CA2E68], 0.0) == 1)
  {
    PCString::PCString((PCString *)&v4, "Word;Line;Block;All");
    v2 = (PCString *)((char *)this + 28368);
    OZChannelEnum::setStrings(v2, (PCString *)&v4, 1);
    PCString::~PCString((PCString *)&v4);
    v4 = xmmword_1B3056CD0;
    return OZChannelEnum::setTags((OZChannelEnum *)v2, (char *)&v4, 4);
  }
  else
  {
    if (theApp && *(_QWORD *)(theApp + 72))
    {
      PCURL::PCURL((PCURL *)&v4, CFSTR("Text Sequence Behavior Units Enum"));
      OZChannelEnum::setStrings((const PCString *)this + 3546, (PCString *)&v4, 1);
    }
    else
    {
      PCString::PCString((PCString *)&v4, "Character;Character (without spaces);Word;Line;All;Custom");
      OZChannelEnum::setStrings((const PCString *)this + 3546, (PCString *)&v4, 1);
    }
    PCString::~PCString((PCString *)&v4);
    v5 = 0x500000004;
    v4 = xmmword_1B3056D30;
    return OZChannelEnum::setTags((TXSequenceBehavior *)((char *)this + 28368), (char *)&v4, 6);
  }
}

void sub_1B295A25C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCString::~PCString(&a9);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior::setUpDefaultCustomSpeed(TXSequenceBehavior *this, OZScene *a2)
{
  OZChannel *v4;
  double v5;
  __n128 v6;
  CMTimeEpoch v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime time2;
  CMTime time1;

  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)this + 608))(&v10);
  if (a2)
  {
    time1 = v11;
    time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    if (CMTimeCompare(&time1, &time2))
    {
      v4 = (OZChannel *)((char *)this + 32496);
      if (!OZChannel::getNumberOfKeyframes(v4))
      {
        OZChannel::getValueAsDouble(v4, MEMORY[0x1E0CA2E68], 0.0);
        if (v5 > -0.0000001 && v5 < 0.0000001)
        {
          time1 = v10;
          OZChannel::setKeyframe(v4, &time1, 0.0, 1);
          time1 = v10;
          time2 = v11;
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v8);
          OZSceneSettings::getFrameDuration((OZScene *)((char *)a2 + 336), &v6);
          time1 = v8;
          *(__n128 *)&time2.value = v6;
          time2.epoch = v7;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v9);
          OZChannel::setKeyframe(v4, &v9, 100.0, 1);
        }
      }
    }
  }
}

void TXSequenceBehavior::willRemove(TXSequenceBehavior *this)
{
  uint64_t v2;
  uint64_t v3;
  const void **v4;
  const void **i;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;

  if (*((_BYTE *)this + 368))
  {
    v2 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    if (v2)
    {
      OZDocument::removeCPPObserver(*(_QWORD *)(v2 + 1584));
      *((_BYTE *)this + 368) = 0;
    }
  }
  v3 = *((_QWORD *)this + 101);
  v4 = *(const void ***)(v3 + 25040);
  for (i = *(const void ***)(v3 + 25048); v4 != i; ++v4)
  {
    if ((*((_BYTE *)*v4 + 57) & 0x10) != 0)
    {
      if (v6)
      {
        v7 = *v6;
        v8 = v6[1];
        while (v7 != v8)
        {
          v9 = *v7++;
          (*(void (**)(TXSequenceBehavior *, uint64_t))(*(_QWORD *)this + 688))(this, v9);
        }
      }
    }
    else
    {
      (*(void (**)(TXSequenceBehavior *))(*(_QWORD *)this + 688))(this);
    }
  }
  OZChannelBehavior::clearChannels(this);
  OZChannelBehavior::willRemove(this);
  TXTextLayout::setAllParagraphsDirty(*((TXParagraphStyle ****)this + 101));
}

uint64_t TXSequenceBehavior::willRemoveSceneNodeFromScene(TXSequenceBehavior *this, OZScene *a2)
{
  uint64_t result;

  result = OZChannelBehavior::willRemoveSceneNodeFromScene((uint64_t)this, a2);
  if (*((_BYTE *)this + 368))
  {
    result = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    if (result)
    {
      result = OZDocument::removeCPPObserver(*(_QWORD *)(result + 1584));
      *((_BYTE *)this + 368) = 0;
    }
  }
  return result;
}

void TXSequenceBehavior::dirty(TXSequenceBehavior *this)
{
  char *v2;
  OZScene **v3;
  uint64_t v4;
  _BYTE v5[8];

  v2 = (char *)this + 36056;
  OZBehavior::dirty(this);
  v3 = (OZScene **)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v5, v3);
  *((_BYTE *)this + 796) = 0;
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v2, *((_QWORD **)v2 + 1));
  *(_QWORD *)v2 = v2 + 8;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 1) = 0;
  v4 = MEMORY[0x1E0CA2E18];
  *((_OWORD *)this + 2255) = *MEMORY[0x1E0CA2E18];
  *((_QWORD *)this + 4512) = *(_QWORD *)(v4 + 16);
  *((_DWORD *)v2 + 12) = 0;
  *((_QWORD *)v2 + 7) = 0;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v5);
}

void `non-virtual thunk to'TXSequenceBehavior::dirty(TXSequenceBehavior *this)
{
  TXSequenceBehavior::dirty((TXSequenceBehavior *)((char *)this - 16));
}

uint64_t TXSequenceBehavior::attachDescendantSequencedChannels(uint64_t this, OZChannelFolder *a2)
{
  OZChannelBase ***v2;
  OZChannelBase **v3;
  OZChannelBase **v4;
  TXSequenceBehavior *v5;
  OZChannelBase *v6;
  OZChannelFolder *v7;
  OZChannelFolder *v8;
  const void ***v9;
  const void **v10;
  const void **v11;

  v2 = (OZChannelBase ***)*((_QWORD *)a2 + 14);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    if (*v2 != v4)
    {
      v5 = (TXSequenceBehavior *)this;
      do
      {
        v6 = *v3;
        this = OZChannelBase::testFlag(*v3, 2);
        if ((this & 1) == 0)
        {
          if (v6)
          {
            if (v7)
            {
              v8 = v7;
              v9 = (const void ***)*((_QWORD *)v7 + 14);
              if (v9)
              {
                v10 = *v9;
                v11 = v9[1];
                while (v10 != v11)
                {
                  if (*v10
                  {
                    this = TXSequenceBehavior::attachDescendantSequencedChannels(v5, v8);
                    goto LABEL_14;
                  }
                  ++v10;
                }
              }
            }
          }
          this = (*(uint64_t (**)(TXSequenceBehavior *, OZChannelBase *))(*(_QWORD *)v5 + 680))(v5, v6);
        }
LABEL_14:
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

uint64_t TXSequenceBehavior::isRebuildUIChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  _BOOL4 v2;
  int v3;
  int v4;
  unsigned int v5;

  v2 = (OZChannelBase *)((char *)this + 30816) == a2 || (OZChannelBase *)((char *)this + 29056) == a2;
  v3 = (OZChannelBase *)((char *)this + 32240) == a2 || v2;
  if ((OZChannelBase *)((char *)this + 28112) == a2)
    v4 = 1;
  else
    v4 = v3;
  if ((OZChannelBase *)((char *)this + 28368) == a2)
    v5 = 1;
  else
    v5 = v4;
  if ((OZChannelBase *)((char *)this + 31832) == a2)
    return 1;
  else
    return v5;
}

uint64_t TXSequenceBehavior::updateMaterialSequenceChannelFlags(TXSequenceBehavior *this)
{
  uint64_t result;
  int v3;
  void (*v4)(char *, uint64_t, uint64_t);
  unsigned int v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;

  result = *((_QWORD *)this + 101);
  if (result)
  {
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 296))(result);
    v4 = *(void (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 547) + 104);
    if (v3)
    {
      v4((char *)this + 4376, 0, 1);
      (*(void (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 547) + 96))((char *)this + 4376, 1, 1);
      (*(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 1151) + 104))((char *)this + 9208, 0, 1);
      result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 1151) + 96))((char *)this + 9208, 1, 1);
      if (((*((_QWORD *)this + 104) - *((_QWORD *)this + 103)) & 0x7FFFFFFF8) != 0x30)
      {
        v5 = 0;
        do
        {
          v6 = TXSequenceChannels::materialSequenceFolder((TXSequenceBehavior *)((char *)this + 816), v5);
          (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, 1, 1);
          v7 = TXSequenceChannels::materialSequenceFolder((TXSequenceBehavior *)((char *)this + 816), v5);
          result = (*(uint64_t (**)(void *, _QWORD, uint64_t))(*(_QWORD *)v7 + 96))(v7, 0, 1);
          ++v5;
        }
        while (v5 < ((*((_QWORD *)this + 104) - *((_QWORD *)this + 103)) >> 3) - 6);
      }
    }
    else
    {
      v4((char *)this + 4376, 1, 1);
      (*(void (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 547) + 96))((char *)this + 4376, 0, 1);
      (*(void (**)(char *, uint64_t, uint64_t))(*((_QWORD *)this + 1151) + 104))((char *)this + 9208, 1, 1);
      result = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*((_QWORD *)this + 1151) + 96))((char *)this + 9208, 0, 1);
      if (((*((_QWORD *)this + 104) - *((_QWORD *)this + 103)) & 0x7FFFFFFF8) != 0x30)
      {
        v8 = 0;
        do
        {
          v9 = TXSequenceChannels::materialSequenceFolder((TXSequenceBehavior *)((char *)this + 816), v8);
          (*(void (**)(void *, _QWORD, uint64_t))(*(_QWORD *)v9 + 104))(v9, 0, 1);
          v10 = TXSequenceChannels::materialSequenceFolder((TXSequenceBehavior *)((char *)this + 816), v8);
          result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v10 + 96))(v10, 1, 1);
          ++v8;
        }
        while (v8 < ((*((_QWORD *)this + 104) - *((_QWORD *)this + 103)) >> 3) - 6);
      }
    }
  }
  return result;
}

OZChannelBase *TXSequenceBehavior::updateHiddenFlags(uint64_t a1)
{
  OZChannel *v2;
  int ValueAsInt;
  OZChannelBase *v4;
  int v5;
  OZChannelBase *v6;
  const CMTime *v7;
  _BOOL4 v8;
  OZChannelBase *v9;
  int v10;
  OZChannelBase *v11;
  int v12;
  OZChannelBase *v13;
  int v14;
  OZChannelBase *v15;
  int v16;
  OZChannelBase *v17;
  OZChannelBase *v18;
  OZChannelBase *v19;
  OZChannelBase *v20;
  OZChannelBase *v21;
  OZChannelBase *v22;
  OZChannelBase *v23;
  OZChannelBase *v24;
  OZChannelBase *v25;
  OZChannelBase *v26;
  int v27;

  TXSequenceBehavior::updateMaterialSequenceChannelFlags((TXSequenceBehavior *)a1);
  v2 = (OZChannel *)(a1 + 28368);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E0CA2E68], 0.0);
  v4 = (OZChannelBase *)(a1 + 28624);
  if (ValueAsInt == 5)
  {
    OZChannelBase::resetFlag(v4, 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 28776), 4194306, 1);
  }
  else
  {
    OZChannelBase::setFlag(v4, 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 28776), 4194306, 1);
  }
  v5 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E0CA2E68], 0.0);
  v6 = (OZChannelBase *)(a1 + 30688);
  if (v5 == 5)
    OZChannelBase::setFlag(v6, 4194306, 1);
  else
    OZChannelBase::resetFlag(v6, 4194306, 1);
  v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v8 = OZChannel::getValueAsInt((OZChannel *)(a1 + 30816), MEMORY[0x1E0CA2E68], 0.0) != 0;
  OZChannelBase::enable((OZChannelBase *)(a1 + 31072), v8, 0);
  OZChannelBase::enable((OZChannelBase *)(a1 + 31224), v8, 0);
  OZChannelBase::enable((OZChannelBase *)(a1 + 31376), v8, 0);
  OZChannelBase::enable((OZChannelBase *)(a1 + 31528), v8, 0);
  v9 = (OZChannelBase *)(a1 + 31832);
  v10 = OZChannel::getValueAsInt((OZChannel *)(a1 + 31832), v7, 0.0);
  v11 = (OZChannelBase *)(a1 + 32088);
  if (v10 == 4)
    OZChannelBase::resetFlag(v11, 4194306, 1);
  else
    OZChannelBase::setFlag(v11, 4194306, 1);
  v12 = OZChannel::getValueAsInt((OZChannel *)(a1 + 32240), MEMORY[0x1E0CA2E68], 0.0);
  v13 = (OZChannelBase *)(a1 + 32496);
  if (v12 == 6)
    OZChannelBase::resetFlag(v13, 4194306, 1);
  else
    OZChannelBase::setFlag(v13, 4194306, 1);
  v14 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E0CA2E68], 0.0);
  v15 = (OZChannelBase *)(a1 + 33896);
  if (v14 == 4)
  {
    OZChannelBase::setFlag(v15, 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 34048), 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 34200), 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 34504), 4194306, 1);
  }
  else
  {
    OZChannelBase::resetFlag(v15, 4194306, 1);
    OZChannelBase::resetFlag((OZChannelBase *)(a1 + 34048), 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 34200), 4194306, 1);
    OZChannelBase::setFlag((OZChannelBase *)(a1 + 34504), 4194306, 1);
  }
  v16 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29056), MEMORY[0x1E0CA2E68], 0.0);
  v17 = (OZChannelBase *)(a1 + 31680);
  v18 = (OZChannelBase *)(a1 + 32648);
  v19 = (OZChannelBase *)(a1 + 32800);
  v20 = (OZChannelBase *)(a1 + 33208);
  v21 = (OZChannelBase *)(a1 + 33464);
  v22 = (OZChannelBase *)(a1 + 29208);
  v23 = (OZChannelBase *)(a1 + 29360);
  v24 = (OZChannelBase *)(a1 + 29616);
  v25 = (OZChannelBase *)(a1 + 30024);
  if (v16 == 1)
  {
    OZChannelBase::setFlag(v17, 4194306, 1);
    OZChannelBase::setFlag(v9, 4194306, 1);
    OZChannelBase::setFlag(v18, 4194306, 1);
    OZChannelBase::setFlag(v19, 4194306, 1);
    OZChannelBase::setFlag(v20, 4194306, 1);
    OZChannelBase::setFlag(v21, 4194306, 1);
    OZChannelBase::resetFlag(v22, 4194306, 1);
    OZChannelBase::resetFlag(v23, 4194306, 1);
    OZChannelBase::resetFlag(v24, 4194306, 1);
    OZChannelBase::resetFlag(v25, 4194306, 1);
    if (OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0) == 6)
    {
      OZChannelBase::enable(v23, 0, 0);
      v26 = v24;
      v27 = 0;
    }
    else
    {
      OZChannelBase::enable(v23, 1, 0);
      v26 = v24;
      v27 = 1;
    }
    return OZChannelBase::enable(v26, v27, 0);
  }
  else
  {
    OZChannelBase::resetFlag(v17, 4194306, 1);
    OZChannelBase::resetFlag(v9, 4194306, 1);
    OZChannelBase::resetFlag(v18, 4194306, 1);
    OZChannelBase::resetFlag(v19, 4194306, 1);
    OZChannelBase::resetFlag(v20, 4194306, 1);
    OZChannelBase::resetFlag(v21, 4194306, 1);
    OZChannelBase::setFlag(v22, 4194306, 1);
    OZChannelBase::setFlag(v23, 4194306, 1);
    OZChannelBase::setFlag(v24, 4194306, 1);
    return OZChannelBase::resetFlag(v25, 4194306, 1);
  }
}

uint64_t TXSequenceBehavior::getUnitSize(TXSequenceBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t TXSequenceBehavior::shouldRenumberChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::shouldRenumberChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return 0;
}

uint64_t TXSequenceBehavior::addCurveNodes(TXSequenceBehavior *this, OZChannelBase *a2, OZChannelBase *a3)
{
  void *v6;
  OZChannel *v7;
  _QWORD *v8;
  _QWORD *v9;
  OZChannelBase ***v10;
  OZChannelBase ***v11;
  BOOL v12;
  OZChannelBase **v13;
  OZChannelBase **v14;
  OZChannelBase *v15;
  OZChannelBase *v16;
  OZChannelBase *v17;
  OZBehaviorCurveNode *v18;
  OZChannelFolder *var6;
  uint64_t v20;
  unsigned int v21;
  long double v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t result;
  OZChannelFolder *v26;

  if ((a2->var7 & 0x1000) != 0)
  {
    v10 = (OZChannelBase ***)v8[14];
    v11 = (OZChannelBase ***)v9[14];
    if (v10)
      v12 = v11 == 0;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = *v10;
      if (*v10 != v10[1])
      {
        v14 = *v11;
        do
        {
          if (v14 == v11[1])
            break;
          v16 = *v13++;
          v15 = v16;
          v17 = *v14++;
          TXSequenceBehavior::addCurveNodes(this, v15, v17);
        }
        while (v13 != v10[1]);
      }
    }
  }
  else
  {
    if (a3)
    else
      v7 = 0;
    v18 = (OZBehaviorCurveNode *)operator new();
    OZBehaviorCurveNode::OZBehaviorCurveNode(v18, this, v7);
    *(_QWORD *)v18 = &off_1E650B7D0;
    *((_QWORD *)v18 + 4) = this;
    *((_QWORD *)v18 + 5) = v6;
    OZChannel::appendCurveProcessingNode(v7, v18);
    OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v18);
  }
  (*((void (**)(OZChannelBase *, uint64_t, _QWORD))a2->var0 + 13))(a2, 1, 0);
  var6 = a2->var6;
  if (var6)
  {
    (*(void (**)(OZChannelFolder *, uint64_t, _QWORD))(*(_QWORD *)var6 + 104))(var6, 1, 0);
    v20 = *((_QWORD *)var6 + 6);
    if (v20
      && (v21 = *(_DWORD *)(v20 + 24), (v21 - 2000) >> 6 <= 0x7C)
      && (v22 = (double)v21, v23 = MaterialSequenceIDIncrement(), fmod(v22, (double)v23) == 0.0))
    {
      v24 = *((_QWORD *)var6 + 6);
      LODWORD(var6) = 1;
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v24 + 104))(v24, 1, 0);
    }
    else
    {
      LODWORD(var6) = 0;
    }
  }
  result = (*((uint64_t (**)(OZChannelBase *, uint64_t, _QWORD))a3->var0 + 13))(a3, 1, 0);
  v26 = a3->var6;
  if (v26)
  {
    result = (*(uint64_t (**)(OZChannelFolder *, uint64_t, _QWORD))(*(_QWORD *)v26 + 104))(v26, 1, 0);
    if ((_DWORD)var6)
    {
      result = *((_QWORD *)v26 + 6);
      if (result)
        return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)result + 104))(result, 1, 0);
    }
  }
  return result;
}

void sub_1B295B124(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F7988963);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceBehavior::channelChildrenHaveProcessingNodes(TXSequenceBehavior *this, OZChannelFolder *a2)
{
  const void ***v2;
  const void **v3;
  const void **v4;
  const void *v6;
  OZChannel *v7;
  OZChannelFolder *v8;

  v2 = (const void ***)*((_QWORD *)a2 + 14);
  v3 = *v2;
  v4 = v2[1];
  if (*v2 == v4)
    return 0;
  while (1)
  {
    v6 = *v3;
    if (*v3)
    {
      if (!v7)
        goto LABEL_7;
      if (OZChannel::getNumberOfCurveProcessingNodes(v7))
        return 1;
      v6 = *v3;
      if (*v3)
      {
LABEL_7:
        if (v8)
        {
          if ((TXSequenceBehavior::channelChildrenHaveProcessingNodes(this, v8) & 1) != 0)
            return 1;
        }
      }
    }
    if (++v3 == v4)
      return 0;
  }
}

uint64_t compareChannelsForRemoveCurveNodes(OZChannelBase *a1, OZChannelBase *a2, int a3)
{
  unsigned int var3;
  unsigned int v5;
  uint64_t result;
  OZChannelFolder *var6;
  OZChannelFolder *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  var3 = a1->var3;
  v5 = a2->var3;
  result = var3 == v5;
  var6 = a1->var6;
  v8 = a2->var6;
  if (var6)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *((_DWORD *)var6 + 6) == *((_DWORD *)v8 + 6) && var3 == v5;
    result = v10;
    if (a3)
    {
      v11 = *((_QWORD *)var6 + 6);
      v12 = *((_QWORD *)v8 + 6);
      if (v11)
        v13 = v12 == 0;
      else
        v13 = 1;
      if (!v13)
      {
        if (*(_DWORD *)(v11 + 24) == *(_DWORD *)(v12 + 24))
          return result;
        else
          return 0;
      }
    }
  }
  return result;
}

uint64_t TXSequenceBehavior::removeCurveNodes(uint64_t this, OZChannelBase *a2)
{
  TXSequenceBehavior *v3;
  OZChannelFolder *var6;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  OZChannelBase *v11;
  int NumberOfCurveProcessingNodes;
  OZChannelFolder *v13;
  unint64_t v14;
  OZChannelFolder *v15;
  __int128 v16;

  v3 = (TXSequenceBehavior *)this;
  var6 = a2->var6;
  v6 = var6 && (v5 = *((_QWORD *)var6 + 6)) != 0 && (*(_DWORD *)(v5 + 24) - 1035) < 4;
  v7 = this + 344;
  v8 = *(_QWORD *)(this + 352);
  if (v8 != this + 344)
  {
    do
    {
      v9 = v8 + 8;
      v8 = *(_QWORD *)(v8 + 8);
      this = *(_QWORD *)(v9 + 8);
      if (this)
      {
        if (this)
        {
          v10 = (void *)this;
          v11 = *(OZChannelBase **)(this + 16);
          this = compareChannelsForRemoveCurveNodes(a2, v11, v6);
          if ((_DWORD)this)
          {
            OZChannel::deleteCurveProcessingNode((OZChannel *)v11, v10);
            *(_QWORD *)&v16 = v10;
            std::list<OZBehaviorCurveNode *>::remove((uint64_t)v3 + 344, &v16);
            NumberOfCurveProcessingNodes = OZChannel::getNumberOfCurveProcessingNodes((OZChannel *)v11);
            if (!NumberOfCurveProcessingNodes)
              (*((void (**)(OZChannelBase *, _QWORD, _QWORD))v11->var0 + 13))(v11, 0, 0);
            v13 = v11->var6;
            this = (*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)v13 + 120))(v13);
            if (!(_DWORD)this)
              goto LABEL_15;
            if (!NumberOfCurveProcessingNodes)
              this = (*(uint64_t (**)(OZChannelFolder *, _QWORD, _QWORD))(*(_QWORD *)v13 + 104))(v13, 0, 0);
            v13 = (OZChannelFolder *)*((_QWORD *)v13 + 6);
            if (v13)
            {
LABEL_15:
              if ((TXSequenceBehavior::channelChildrenHaveProcessingNodes(v3, v13) & 1) == 0)
                (*(void (**)(OZChannelFolder *, _QWORD, _QWORD))(*(_QWORD *)v13 + 104))(v13, 0, 0);
              v14 = *((_QWORD *)v13 + 1);
              v16 = xmmword_1B3054230;
              this = OZFactory::isKindOfClass(v14, (int32x4_t *)&v16);
              if ((_DWORD)this)
              {
                v15 = (OZChannelFolder *)*((_QWORD *)v13 + 6);
                if (v15)
                {
                  this = TXSequenceBehavior::channelChildrenHaveProcessingNodes(v3, v15);
                  if ((this & 1) == 0)
                    this = (*(uint64_t (**)(OZChannelFolder *, _QWORD, _QWORD))(*(_QWORD *)v15 + 104))(v15, 0, 0);
                }
              }
            }
          }
        }
      }
    }
    while (v8 != v7);
  }
  if (a2->var3 == 1031)
  {
    this = *((_QWORD *)v3 + 101);
    if (this)
    {
      *(_BYTE *)(this + 19321) = 1;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 544))(this);
    }
  }
  return this;
}

_QWORD *std::list<OZBehaviorCurveNode *>::remove(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v10[3];

  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 != (_QWORD *)a1)
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        std::list<std::shared_ptr<TXTextStyle>>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
  }
  return std::__list_imp<unsigned int>::clear(v10);
}

void sub_1B295B52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

OZChannelBase *TXSequenceBehavior::isTextSequenceChannelEnabled(TXSequenceBehavior *this, int a2, int a3, int a4)
{
  OZChannelBase *result;

  result = (OZChannelBase *)TXSequenceChannels::findChannel((TXSequenceBehavior *)((char *)this + 816), a2, a3, a4);
  if (result)
    return (OZChannelBase *)!OZChannelBase::testFlag(result, 2);
  return result;
}

uint64_t TXSequenceBehavior::isActiveAtTime(TXSequenceBehavior *this, CMTime *a2, uint64_t a3, BOOL a4, int a5)
{
  unsigned int isActiveAtTime;
  __n128 v8;
  CMTimeEpoch v9;
  CMTime v10;
  CMTime v11;
  CMTime time2;
  CMTime time1;

  v11 = *a2;
  isActiveAtTime = OZBehavior::isActiveAtTime(this, &v11, a3, a4, a5);
  TXSequenceBehavior::getAnimationDuration(this, (uint64_t)&v10);
  OZBehavior::getFrameDuration(this, &v8);
  time1 = v10;
  *(__n128 *)&time2.value = v8;
  time2.epoch = v9;
  if (CMTimeCompare(&time1, &time2) > 0)
    return isActiveAtTime;
  else
    return 0;
}

void TXSequenceBehavior::getAnimationDuration(TXSequenceBehavior *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const CMTime *v5;
  double v6;
  double v7;
  double v8;
  CMTime v9;
  CMTime v10;
  _QWORD v11[3];
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;

  if (*((_BYTE *)this + 768))
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 772);
    *(_QWORD *)(a2 + 16) = *(_QWORD *)((char *)this + 788);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, TXSequenceBehavior *))(*(_QWORD *)this + 608))(v11, this);
    v13 = v12;
    v4 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), (__n128 *)&v9);
    v5 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), MEMORY[0x1E0CA2E68], 0.0);
    v7 = v6;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), v5, 0.0);
    operator*(&v9, &v10, v7 + v8);
    v15 = v13;
    v14 = v10;
    PC_CMTimeSaferSubtract(&v15, &v14, a2);
  }
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::isActiveAtTime(TXSequenceBehavior *this, CMTime *a2, uint64_t a3, BOOL a4, int a5)
{
  return TXSequenceBehavior::isActiveAtTime((TXSequenceBehavior *)((char *)this - 16), a2, a3, a4, a5);
}

uint64_t TXSequenceBehavior::isActiveInTimeRange(TXSequenceBehavior *this, const PCTimeRange *a2, uint64_t a3, BOOL a4, int a5)
{
  unsigned int isActiveInTimeRange;
  __n128 v8;
  CMTimeEpoch v9;
  CMTime v10;
  CMTime time2;
  CMTime time1;

  isActiveInTimeRange = OZBehavior::isActiveInTimeRange(this, a2, a3, a4, a5);
  TXSequenceBehavior::getAnimationDuration(this, (uint64_t)&v10);
  OZBehavior::getFrameDuration(this, &v8);
  time1 = v10;
  *(__n128 *)&time2.value = v8;
  time2.epoch = v9;
  if (CMTimeCompare(&time1, &time2) > 0)
    return isActiveInTimeRange;
  else
    return 0;
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::isActiveInTimeRange(TXSequenceBehavior *this, const PCTimeRange *a2, uint64_t a3, BOOL a4, int a5)
{
  return TXSequenceBehavior::isActiveInTimeRange((TXSequenceBehavior *)((char *)this - 16), a2, a3, a4, a5);
}

const void *TXSequenceBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2, uint64_t a3)
{
  const void *result;
  const void **v7;
  const void **i;

  result = (const void *)OZBehavior::markFactoriesForSerialization(this, a2);
  v7 = (const void **)this[103];
  for (i = (const void **)this[104]; v7 != i; ++v7)
  {
    result = *v7;
    if (*v7)
    {
      if (result)
        result = (const void *)(*(uint64_t (**)(const void *, PCSerializerWriteStream *, uint64_t))(*(_QWORD *)result + 416))(result, a2, a3);
    }
  }
  return result;
}

const void *`non-virtual thunk to'TXSequenceBehavior::markFactoriesForSerialization(OZFactory **this, PCSerializerWriteStream *a2, uint64_t a3)
{
  return TXSequenceBehavior::markFactoriesForSerialization(this - 6, a2, a3);
}

uint64_t TXSequenceBehavior::parseBegin(TXSequenceBehavior *this, PCSerializerReadStream *a2)
{
  if (*((_DWORD *)a2 + 26) <= 4u)
    OZChannel::setValue((OZChannel *)((char *)this + 35728), MEMORY[0x1E0CA2E68], 0.0, 0);
  if (PCSerializerReadStream::isLessThanVersion(a2, 5u, 7u))
    OZChannel::setValue((OZChannel *)((char *)this + 35880), MEMORY[0x1E0CA2E68], 0.0, 0);
  return OZBehavior::parseBegin(this, a2);
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::parseBegin(TXSequenceBehavior *this, PCSerializerReadStream *a2)
{
  return TXSequenceBehavior::parseBegin((TXSequenceBehavior *)((char *)this - 48), a2);
}

uint64_t TXSequenceBehavior::parseEnd(TXSequenceBehavior *this, PCSerializerReadStream *a2)
{
  OZChannelBase ***v4;
  OZChannelBase **v5;
  OZChannelBase **v6;
  OZChannelBase *v7;
  unint64_t var1;
  OZScene *v9;
  __int128 v11;

  OZBehavior::parseEnd(this, a2);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 34912), 4194306, 1);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 35064), 4194306, 1);
  if (!*((_BYTE *)this + 36049))
  {
    v4 = (OZChannelBase ***)*((_QWORD *)this + 21);
    v5 = *v4;
    v6 = v4[1];
    if (*v4 != v6)
    {
      do
      {
        v7 = *v5;
        var1 = (unint64_t)(*v5)->var1;
        v11 = xmmword_1B3056CC0;
        if (OZFactory::isKindOfClass(var1, (int32x4_t *)&v11))
          TXSequenceChannels::pushChannelIntoChannelList((TXSequenceBehavior *)((char *)this + 816), v7);
        ++v5;
      }
      while (v5 != v6);
    }
    *((_BYTE *)this + 36049) = 1;
  }
  v9 = (OZScene *)(*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
  TXSequenceBehavior::setUpDefaultCustomSpeed(this, v9);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E0CA2E68], 0.0) == 1
    && PCSerializerReadStream::isLessThanVersion(a2, 5u, 9u))
  {
    TXSequenceBehavior::updateTranscriptionUnitsFromVersion5_8(this);
  }
  return 1;
}

void TXSequenceChannels::pushChannelIntoChannelList(TXSequenceChannels *this, OZChannelBase *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = *((_QWORD *)this + 3);
  v4 = (char *)this + 24;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 1);
    v18 = (char *)*((_QWORD *)this + 2);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 1) = v16;
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 2) = v8;
}

uint64_t TXSequenceBehavior::updateTranscriptionUnitsFromVersion5_8(TXSequenceBehavior *this)
{
  OZChannel *v1;
  const CMTime *v2;
  unsigned int ValueAsInt;
  unsigned int v4;

  v1 = (OZChannel *)((char *)this + 28368);
  v2 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0);
  v4 = ValueAsInt + 2;
  if (ValueAsInt >= 3)
    v4 = ValueAsInt;
  return OZChannel::setValue(v1, v2, (double)v4, 0);
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::parseEnd(TXSequenceBehavior *this, PCSerializerReadStream *a2)
{
  TXSequenceBehavior::parseEnd((TXSequenceBehavior *)((char *)this - 48), a2);
  return 1;
}

void TXSequenceBehavior::addChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  OZChannelFolder *i;
  const OZChannelBase *v5;
  OZChannelBase *Channel;
  void *v7[3];

  OZChannelBase::resetFlag(a2, 2, 0);
  for (i = a2->var6; i; i = (OZChannelFolder *)*((_QWORD *)i + 6))
    OZChannelBase::resetFlag((OZChannelBase *)i, 2, 0);
  v5 = (const OZChannelBase *)(*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 312))(this);
  OZChannelRef::OZChannelRef((OZChannelRef *)v7, a2, v5);
  Channel = OZChannelRef::getChannel((OZChannelRef *)v7, (OZChannelBase *)(*((_QWORD *)this + 101) + 648));
  TXSequenceBehavior::addCurveNodes(this, a2, Channel);
  OZChannelRef::~OZChannelRef(v7);
}

void sub_1B295BBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  OZChannelRef::~OZChannelRef((void **)va);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceBehavior::hideParentAndRemoveChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  OZChannelFolder *var6;
  OZChannelBase ***v5;
  OZChannelBase **v6;
  OZChannelBase **v7;
  uint64_t v8;
  unsigned int v9;
  long double v10;
  unsigned int v11;

  OZChannelBase::setFlag(a2, 2, 0);
  var6 = a2->var6;
  if (var6)
  {
    v5 = (OZChannelBase ***)*((_QWORD *)var6 + 14);
    v6 = *v5;
    v7 = v5[1];
    while (v6 != v7)
    {
      if (!OZChannelBase::testFlag(*v6, 2))
        return (*(uint64_t (**)(TXSequenceBehavior *, OZChannelBase *))(*(_QWORD *)this + 688))(this, a2);
      ++v6;
    }
    OZChannelBase::setFlag((OZChannelBase *)var6, 2, 0);
    v8 = *((_QWORD *)var6 + 6);
    if (v8)
    {
      v9 = *(_DWORD *)(v8 + 24);
      if ((v9 - 2000) >> 6 <= 0x7C)
      {
        v10 = (double)v9;
        v11 = MaterialSequenceIDIncrement();
        if (fmod(v10, (double)v11) == 0.0)
          (*(void (**)(TXSequenceBehavior *, OZChannelFolder *))(*(_QWORD *)this + 696))(this, var6);
      }
    }
  }
  return (*(uint64_t (**)(TXSequenceBehavior *, OZChannelBase *))(*(_QWORD *)this + 688))(this, a2);
}

char *TXSequenceBehavior::addMaterial(TXSequenceBehavior *this, OZMaterialBase *a2, unsigned int a3)
{
  return AddMaterialToSequenceChannels((TXSequenceBehavior *)((char *)this + 816), a2, a3);
}

uint64_t TXSequenceBehavior::removeMaterial(TXSequenceBehavior *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  TXSequenceChannels *v5;

  v2 = a2 + 6;
  v3 = *((_QWORD *)this + 103);
  if (v2 >= (*((_QWORD *)this + 104) - v3) >> 3)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v5 = (TXSequenceBehavior *)((char *)this + 816);
  (*(void (**)(TXSequenceBehavior *, _QWORD))(*(_QWORD *)this + 688))(this, *(_QWORD *)(v3 + 8 * v2));
  return RemoveMaterialFromSequenceChannels(v5, a2);
}

uint64_t TXSequenceBehavior::removeMaterialLayer(TXSequenceBehavior *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD *v6;
  TXSequenceChannels *v8;

  v3 = a3 + 6;
  v4 = *((_QWORD *)this + 103);
  if (v3 >= (*((_QWORD *)this + 104) - v4) >> 3)
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v6 = *(_QWORD **)(*(_QWORD *)(v4 + 8 * v3) + 112);
  if (a2 >= (unint64_t)((uint64_t)(v6[1] - *v6) >> 3))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  v8 = (TXSequenceBehavior *)((char *)this + 816);
  (*(void (**)(TXSequenceBehavior *, _QWORD))(*(_QWORD *)this + 688))(this, *(_QWORD *)(*v6 + 8 * a2));
  return RemoveMaterialLayerFromSequenceChannels(v8, a2, a3);
}

_QWORD *TXSequenceBehavior::removeChannel(TXSequenceBehavior *this, OZChannelBase *lpsrc)
{
  _QWORD *result;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  if ((lpsrc->var7 & 0x1000) == 0)
    return (_QWORD *)TXSequenceBehavior::removeCurveNodes((uint64_t)this, lpsrc);
  v4 = (uint64_t **)result[14];
  if (v4)
  {
    v5 = *v4;
    v6 = v4[1];
    while (v5 != v6)
    {
      v7 = *v5++;
      result = (_QWORD *)(*(uint64_t (**)(TXSequenceBehavior *, uint64_t))(*(_QWORD *)this + 688))(this, v7);
    }
  }
  return result;
}

double TXSequenceBehavior::trapezoid(TXSequenceBehavior *this, double a2, double a3, double a4, double a5, double a6, int a7, double a8, double a9, double *a10)
{
  int v10;
  double v15;
  double v17;
  double v18;
  double v19;
  double v20;
  double Seconds;
  double v22;
  const CMTime *v23;
  double v24;
  double v25;
  double v26;
  double CustomSpeedDuration;
  double v28;
  char v29;
  double v30;
  double v31;
  double v32;
  const CMTime *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  const CMTime *v38;
  int ValueAsInt;
  double v40;
  Float64 v41;
  uint64_t v42;
  double v43;
  double v44;
  int v45;
  double v47;
  Float64 v48;
  uint64_t v49;
  double v50;
  CMTime v51;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;
  CMTime time;
  CMTime v58;
  CMTime v59;

  v10 = a7;
  v15 = a2;
  v17 = 0.0;
  if (a2 <= a8 || (a7 & 1) == 0)
  {
    v18 = a3 - a5;
    if (a3 - a5 <= a2)
    {
LABEL_8:
      if (v15 >= a3)
      {
        if (v15 <= a4)
        {
          if (a6 == 0.0)
            v29 = v10;
          else
            v29 = 0;
          v17 = 1.0;
          if ((v29 & 1) != 0)
          {
            TXSequenceBehavior::trapezoid(this, v15 + -1.0, a3, a4, a5, a6, 0, 1.0, 1.0, 0);
            if (v30 <= 0.0)
              return 1.0;
            else
              return v30;
          }
        }
        else
        {
          v20 = a4 + a6;
          if (a4 + a6 >= v15)
          {
            if ((_DWORD)a10 == 6)
            {
              if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), MEMORY[0x1E0CA2E68], 0.0) == 1)
              {
                (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(_QWORD *)this + 608))(&v55, this);
                v51 = v56;
                Seconds = CMTimeGetSeconds(&v51);
                v22 = Seconds
                    / *(double *)((*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this) + 368);
                v23 = (const CMTime *)MEMORY[0x1E0CA2E68];
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), MEMORY[0x1E0CA2E68], 0.0);
                v25 = v22 - v24;
                OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), v23, 0.0);
                CustomSpeedDuration = v25 - v26;
              }
              else
              {
                CustomSpeedDuration = TXSequenceBehavior::getCustomSpeedDuration(this);
              }
              v48 = (v20 - v15) / (v20 - a4) * CustomSpeedDuration;
              memset(&v54, 0, sizeof(v54));
              v49 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
              OZSceneSettings::getFrameDuration((OZSceneSettings *)(v49 + 336), (__n128 *)&v52);
              operator*(&v52, &v53, v48);
              (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(_QWORD *)this + 608))(&v55, this);
              v58 = v55;
              v59 = v53;
              PC_CMTimeSaferAdd(&v59, &v58, (uint64_t)&v54);
              OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), &v54, 0.0);
            }
            else
            {
              v47 = TXSequenceBehavior::computePosition(this, (int)a10, (v20 - v15) / (v20 - a4), a10);
            }
            v17 = v47 + 0.0;
            if (v10)
            {
              TXSequenceBehavior::trapezoid(this, v15 + -1.0, a3, a4, a5, a6, 0, 1.0, 1.0, 0);
              if (v17 < v50)
                return v50;
            }
          }
        }
      }
      else
      {
        if ((_DWORD)a10 == 6)
        {
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), MEMORY[0x1E0CA2E68], 0.0) == 2)
          {
            v19 = TXSequenceBehavior::getCustomSpeedDuration(this);
          }
          else
          {
            (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(_QWORD *)this + 608))(&v55, this);
            time = v56;
            v31 = CMTimeGetSeconds(&time);
            v32 = v31
                / *(double *)((*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this) + 368);
            v33 = (const CMTime *)MEMORY[0x1E0CA2E68];
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), MEMORY[0x1E0CA2E68], 0.0);
            v35 = v32 - v34;
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), v33, 0.0);
            v19 = v35 - v36;
          }
          v37 = (v15 - v18) / (a3 - v18);
          v38 = (const CMTime *)MEMORY[0x1E0CA2E68];
          ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E0CA2E68], 0.0);
          v40 = 1.0 - v37;
          if (ValueAsInt != 1)
            v40 = v37;
          v41 = v19 * v40;
          memset(&v54, 0, sizeof(v54));
          v42 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v42 + 336), (__n128 *)&v52);
          operator*(&v52, &v53, v41);
          (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(_QWORD *)this + 608))(&v55, this);
          v58 = v55;
          v59 = v53;
          PC_CMTimeSaferAdd(&v59, &v58, (uint64_t)&v54);
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), &v54, 0.0);
          v44 = v43;
          v45 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), v38, 0.0);
          v28 = 1.0 - v44;
          if (v45 != 1)
            v28 = v44;
        }
        else
        {
          v28 = TXSequenceBehavior::computePosition(this, (int)a10, (v15 - v18) / (a3 - v18), a10);
        }
        return v28 + 0.0;
      }
    }
    else
    {
      while (1)
      {
        v15 = v15 + a9;
        if (v15 > a8 || (v10 & 1) == 0)
          break;
        v10 = 1;
        if (v18 <= v15)
        {
          a10 = 0;
          goto LABEL_8;
        }
      }
    }
  }
  return v17;
}

Float64 TXSequenceBehavior::getCustomSpeedDuration(TXSequenceBehavior *this)
{
  OZChannel *v2;
  const void **v3;
  char v4;
  const void **value;
  void *v6;
  OZBehavior *v7;
  int32_t v8;
  CMTime *v9;
  __int128 v10;
  int32_t v11;
  CMTime *v12;
  __int128 v13;
  double v14;
  uint64_t v15;
  void *__p;
  CMTime time;
  __n128 v19;
  CMTimeEpoch v20;
  CMTime v21;
  CMTime v22;
  CMTime v23[2];
  CMTime v24;
  CMTime v25;
  CMTime v26;
  CMTime time2;
  CMTime time1;

  v2 = (OZChannel *)((char *)this + 32496);
  if (!OZChannel::getNumberOfCurveProcessingNodes((OZChannel *)((char *)this + 32496)))
    goto LABEL_17;
  OZChannel::enumerateCurveProcessingNodes(v2, v23);
  v3 = *(const void ***)&v23[0].timescale;
  __p = (void *)v23[0].value;
  v4 = 0;
  if (*(_QWORD *)&v23[0].timescale != v23[0].value)
  {
    value = (const void **)v23[0].value;
    do
    {
      if (*value)
      {
        if (v6)
        {
          v7 = (OZBehavior *)*((_QWORD *)v6 + 1);
          (*(void (**)(CMTime *__return_ptr, OZBehavior *))(*(_QWORD *)v7 + 608))(v23, v7);
          v22 = v23[0];
          memset(&v21, 0, sizeof(v21));
          OZBehavior::getFrameDuration(v7, &v19);
          time1 = v23[0];
          time2 = v23[1];
          PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v26);
          time1 = v26;
          *(__n128 *)&time2.value = v19;
          time2.epoch = v20;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
          if ((v4 & 1) != 0)
          {
            time1 = v22;
            time2 = v25;
            v8 = CMTimeCompare(&time1, &time2);
            v9 = &v22;
            if (v8 > 0)
              v9 = &v25;
            v10 = *(_OWORD *)&v9->value;
            v25.epoch = v9->epoch;
            *(_OWORD *)&v25.value = v10;
            time1 = v21;
            time2 = v24;
            v11 = CMTimeCompare(&time1, &time2);
            v12 = &v21;
            if (v11 > 0)
              v12 = &v24;
            v13 = *(_OWORD *)&v12->value;
            v24.epoch = v12->epoch;
            *(_OWORD *)&v24.value = v13;
          }
          else
          {
            v25 = v22;
            v24 = v21;
            v4 = 1;
          }
        }
      }
      ++value;
    }
    while (value != v3);
  }
  if (__p)
    operator delete(__p);
  if ((v4 & 1) == 0)
  {
LABEL_17:
    OZChannel::getKeyframeMinTime(v2, (uint64_t)&v25);
    OZChannel::getKeyframeMaxTime(v2, (uint64_t)&v24);
  }
  v23[0] = v24;
  time1 = v25;
  v14 = PC_CMTimeSaferSubtract(v23, &time1, (uint64_t)&time2);
  v15 = (*(uint64_t (**)(TXSequenceBehavior *, double))(*(_QWORD *)this + 336))(this, v14);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), (__n128 *)v23);
  operator/((__int128 *)&time2.value, (uint64_t)v23, (uint64_t)&time);
  return CMTimeGetSeconds(&time);
}

void sub_1B295C580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

long double TXSequenceBehavior::computePosition(TXSequenceBehavior *this, int a2, double a3, double *a4)
{
  double v6;
  double v7;
  double v8;
  double v10;

  v10 = 0.0;
  switch(a2)
  {
    case 0:
      return a3;
    case 1:
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 35728), MEMORY[0x1E0CA2E68], 0.0))
        return 1.0 - cos(a3 * 3.14159265 * 0.5);
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 35880), MEMORY[0x1E0CA2E68], 0.0))
        goto LABEL_6;
      v6 = 0.5;
      goto LABEL_7;
    case 2:
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 35728), MEMORY[0x1E0CA2E68], 0.0))
        return sin(a3 * 3.14159265 * 0.5) + 0.0;
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 35880), MEMORY[0x1E0CA2E68], 0.0))
      {
        v6 = 0.0;
        goto LABEL_14;
      }
LABEL_11:
      v6 = 0.0;
      v7 = 1.0;
      goto LABEL_15;
    case 3:
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 35728), MEMORY[0x1E0CA2E68], 0.0))
      {
        v6 = 0.5;
LABEL_14:
        v7 = 0.5;
LABEL_15:
        PCMath::easeInOut(&v10, a3, v6, v7, 0.0, 1.0, 0, a4);
      }
      else
      {
        return sin(a3 * 3.14159265 + -1.57079633) * 0.5 + 0.5;
      }
      return v10;
    case 4:
LABEL_6:
      v6 = 1.0;
LABEL_7:
      v7 = 0.0;
      goto LABEL_15;
    case 5:
      goto LABEL_11;
    case 6:
      TXSequenceBehavior::getCustomSpeed(this, a3);
      return v8;
    default:
      return v10;
  }
}

double TXSequenceBehavior::getValue(TXSequenceBehavior *this, const CMTime *a2, double a3, OZChannel *a4, double a5)
{
  CMTime v12;

  v12 = *a2;
  if ((*(unsigned int (**)(TXSequenceBehavior *, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v12, 0, 1, 1))
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E0CA2E68], 0.0) == 4)
      return TXSequenceBehavior::getCustomAnimationValue(this, a2, a3, a4, a5);
    else
      return TXSequenceBehavior::getSelectionValue(this, a2, a3, a4, a5);
  }
  return a5;
}

double TXSequenceBehavior::getCustomAnimationValue(TXSequenceBehavior *this, const CMTime *a2, double a3, OZChannel *a4, double a5)
{
  double ChanValue;
  unsigned int ValueAsUint;
  unsigned int v12;
  int ValueAsInt;
  _BOOL4 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v21;
  const CMTime *v22;
  double v23;
  unsigned int v24;
  int v25;
  double v26;
  double v27;
  double SceneFrameRate;
  uint64_t v29;
  Float64 Seconds;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  PCRandom *v35;
  BOOL v36;
  double v37;
  double v38;
  double v39;
  double v40;
  __int128 v41;
  CMTime v42;
  CMTime time;
  CMTime v44;
  CMTime v45;
  CMTime v46;
  CMTime v47;
  CMTime v48;
  CMTime v49;

  memset(&v47, 0, sizeof(v47));
  TXSequenceBehavior::getCustomAnimationTime(this, a2, a3, (uint64_t)&v47);
  ChanValue = TXSequenceBehavior::getChanValue(this, &v47, a3, a4);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 30816), MEMORY[0x1E0CA2E68], 0.0))
  {
    LODWORD(v49.value) = 0;
    if (TXSequenceBehavior::charIndexToSelectionIndex(this, a3, (unsigned int *)&v49))
    {
      ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 31072), a2, 0.0);
      v12 = OZChannel::getValueAsUint((OZChannel *)((char *)this + 31224), a2, 0.0);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0) == 2
        || OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0) == 3)
      {
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31376), MEMORY[0x1E0CA2E68], 0.0);
        v15 = LODWORD(v49.value) >= ValueAsUint && LODWORD(v49.value) < v12;
        if (v15)
          v16 = ChanValue;
        else
          v16 = a5;
        if (v15)
          v17 = a5;
        else
          v17 = ChanValue;
        if (ValueAsInt)
          ChanValue = v17;
        else
          ChanValue = v16;
      }
    }
  }
  v46 = *a2;
  OZChannel::getValueAsDouble((OZChannel *)this + 222, &v46, 0.0);
  if (v18 > 0.0)
  {
    v19 = v18;
    if (a4->var3 - 1009 > 0x23 || ((1 << (LOBYTE(a4->var3) + 15)) & 0x800002211) == 0)
    {
      v21 = TXSequenceBehavior::charIndexToChannelUnitIndex(this, a3, 1);
      if ((v21 & 0x80000000) == 0)
      {
        v22 = (const CMTime *)MEMORY[0x1E0CA2E68];
        v23 = 0.0;
        v24 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 34760), MEMORY[0x1E0CA2E68], 0.0)
            + 39 * v21
            + a4->var3;
        v25 = OZChannel::getValueAsInt((OZChannel *)this + 227, v22, 0.0);
        OZChannel::getValueAsDouble((OZChannel *)this + 226, &v47, 0.0);
        v27 = v26;
        SceneFrameRate = OZBehavior::getSceneFrameRate(this);
        TXSequenceBehavior::getKeyframeExtent(this, &v45, &v44);
        PCMath::clamp(&v47, &v45, &v44, (uint64_t)&v49);
        v47 = v49;
        v29 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v29 + 336), (__n128 *)&v49);
        operator/((__int128 *)&v47.value, (uint64_t)&v49, (uint64_t)&time);
        Seconds = CMTimeGetSeconds(&time);
        v49 = v44;
        v48 = v45;
        v31 = Seconds / SceneFrameRate;
        v32 = PC_CMTimeSaferSubtract(&v49, &v48, (uint64_t)&v41);
        v33 = (*(uint64_t (**)(TXSequenceBehavior *, double))(*(_QWORD *)this + 336))(this, v32);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v33 + 336), (__n128 *)&v49);
        operator/(&v41, (uint64_t)&v49, (uint64_t)&v42);
        v34 = CMTimeGetSeconds(&v42);
        v35 = 0;
        v36 = v34 >= 0.0000001 || v34 <= -0.0000001;
        v37 = v34 / SceneFrameRate;
        v38 = 1.0;
        if (v36)
          v39 = v37;
        else
          v39 = 1.0;
        do
        {
          v23 = v23 + v38 * PCRandom::noise(v35, v19, v31, v24, v25, 0.0, v39);
          v19 = v19 + v19;
          v38 = v27 * v38;
          v35 = (PCRandom *)((_DWORD)v35 + 1);
        }
        while ((_DWORD)v35 != 10);
        OZChannel::getValueAsDouble((OZChannel *)this + 225, &v47, 0.0);
        return ChanValue + v23 * v40;
      }
    }
  }
  return ChanValue;
}

double TXSequenceBehavior::getSelectionValue(TXSequenceBehavior *this, const CMTime *a2, double a3, OZChannel *a4, double a5)
{
  double v10;
  Float64 v11;
  uint64_t v12;
  double ChanValue;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int v20;
  int v21;
  double v22;
  unsigned int v23;
  double v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  double v29;
  int v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  double v40;
  double v41;
  long double v42;
  OZScene **v43;
  int ValueAsInt;
  double v45;
  double v46;
  double v47;
  double v49;
  double v50;
  double v51;
  CMTime v52;
  CMTime v53;
  CMTime v54;
  CMTime v55;
  CMTime v56;

  memset(&v54, 0, sizeof(v54));
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), MEMORY[0x1E0CA2E68], 0.0);
  v11 = v10;
  v12 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), (__n128 *)&v52);
  operator*(&v52, &v53, v11);
  v56 = *a2;
  v55 = v53;
  PC_CMTimeSaferSubtract(&v56, &v55, (uint64_t)&v54);
  ChanValue = TXSequenceBehavior::getChanValue(this, &v54, a3, a4);
  OZChannel::getValueAsDouble((OZChannel *)this + 222, &v54, 0.0);
  if (v14 > 0.0)
  {
    v15 = v14;
    OZChannel::getValueAsDouble((OZChannel *)this + 223, &v54, 0.0);
    v17 = ChanValue * v16;
    OZChannel::getValueAsDouble((OZChannel *)this + 224, &v54, 0.0);
    v19 = ChanValue * v18 - v17;
    if (v19 <= -0.0000001 || v19 >= 0.0000001)
    {
      v20 = TXSequenceBehavior::charIndexToChannelUnitIndex(this, a3, 1);
      if (v20 < 0)
        return ChanValue;
      v21 = v20;
      v49 = v19;
      v22 = 0.0;
      v23 = a4->var3 + OZChannel::getValueAsInt((OZChannel *)((char *)this + 34760), MEMORY[0x1E0CA2E68], 0.0);
      OZChannel::getValueAsDouble((OZChannel *)this + 226, &v54, 0.0);
      v51 = v24;
      v25 = 0;
      v50 = (double)v21 + (double)v21;
      v26 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1;
      v27 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2;
      v28 = PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3;
      v29 = 1.0;
      do
      {
        v30 = (int)(v50 * v15);
        v31 = -32;
        v32 = -1640531527;
        v33 = v25;
        v34 = v23;
        do
        {
          v33 += (v30 + 16 * v34) ^ (v32 + v34) ^ (v26 + (v34 >> 5));
          v34 += (v27 + 16 * v33) ^ (v32 + v33) ^ (v28 + (v33 >> 5));
          v32 -= 1640531527;
          v35 = __CFADD__(v31++, 1);
        }
        while (!v35);
        v36 = -32;
        v37 = -1640531527;
        v38 = v25;
        v39 = v23;
        do
        {
          v38 += (v30 + 1 + 16 * v39) ^ (v37 + v39) ^ (v26 + (v39 >> 5));
          v39 += (v27 + 16 * v38) ^ (v37 + v38) ^ (v28 + (v38 >> 5));
          v37 -= 1640531527;
          v35 = __CFADD__(v36++, 1);
        }
        while (!v35);
        v40 = (double)(int)(v34 ^ v33) / 2147483650.0;
        v41 = (double)(int)(v39 ^ v38) / 2147483650.0;
        v42 = cos((v50 * v15 - (double)v30) * 3.14159265);
        v22 = v22 + v29 * ((1.0 - (1.0 - v42) * 0.5) * v40 + (1.0 - v42) * 0.5 * v41);
        v15 = v15 + v15;
        v29 = v51 * v29;
        ++v25;
      }
      while (v25 != 10);
      ChanValue = v17 + v49 * ((v22 + 1.0) * 0.5);
    }
    else
    {
      ChanValue = v17;
    }
  }
  if (a4->var3 - 1033 >= 2)
  {
    v43 = (OZScene **)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
    OZLockingGroup::ReadSentry::ReadSentry((OZLockingGroup::ReadSentry *)&v56, v43);
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 30432), MEMORY[0x1E0CA2E68], 0.0);
    if (ValueAsInt == 2)
      v45 = a5;
    else
      v45 = 0.0;
    if (vabdd_f64(v45, ChanValue) < 0.0000001)
      goto LABEL_27;
    (*(void (**)(TXSequenceBehavior *, const CMTime *, OZChannel *, _QWORD, double))(*(_QWORD *)this + 704))(this, a2, a4, 0, a3);
    if (ValueAsInt)
    {
      if (ValueAsInt == 1)
      {
        ChanValue = (ChanValue * v46 + 0.0) * a5;
      }
      else if (ValueAsInt == 2)
      {
        v47 = (ChanValue - a5) * v46;
LABEL_26:
        ChanValue = v47 + a5;
      }
LABEL_27:
      OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)&v56);
      return ChanValue;
    }
    v47 = ChanValue * v46 + 0.0;
    goto LABEL_26;
  }
  return ChanValue;
}

void sub_1B295D018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  OZLockingGroup::ReadSentry::~ReadSentry((OZLockingGroup::ReadSentry *)&a29);
  _Unwind_Resume(a1);
}

double TXSequenceBehavior::getChanValue(TXSequenceBehavior *this, const CMTime *a2, double a3, OZChannel *a4)
{
  double v8;
  double v9;
  OZChannelFolder *var6;
  int v11;
  TXTextLayout *v12;
  CMTime v14;

  OZChannel::getValueAsDouble(a4, a2, 0.0);
  v9 = v8;
  var6 = a4->var6;
  if (var6)
  {
    v11 = *((_DWORD *)var6 + 6);
    if ((v11 == 1027 || v11 == 1001)
      && OZChannel::getValueAsInt((OZChannel *)((char *)this + 35472), MEMORY[0x1E0CA2E68], 0.0) == 1)
    {
      v12 = (TXTextLayout *)*((_QWORD *)this + 101);
      v14 = *a2;
      return v9 * TXTextLayout::getSeqPosScaleForChar(v12, a3, &v14);
    }
  }
  return v9;
}

void TXSequenceBehavior::getCustomAnimationTime(TXSequenceBehavior *this@<X0>, const CMTime *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  int v7;
  uint64_t v8;
  const CMTime *v9;
  double v10;
  double v11;
  double v12;
  unsigned int NumObjects;
  int ValueAsInt;
  int v15;
  uint64_t v16;
  CMTime *v17;
  const CMTime *v18;
  double v19;
  const CMTime *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  double Seconds;
  double v29;
  uint64_t v30;
  Float64 v31;
  double v32;
  double v33;
  double *v34;
  double v35;
  double *v36;
  double v37;
  double v38;
  int v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  const CMTime *v46;
  double v47;
  int v48;
  BOOL v49;
  double v50;
  uint64_t v51;
  Float64 v52;
  double v53;
  double v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  OZChannel *v58;
  int v59;
  CMTime v60;
  CMTime v61;
  CMTime v62;
  CMTime v63;
  CMTime v64;
  CMTime time;
  CMTime v66;
  CMTime v67;
  CMTime v68;
  CMTime v69;
  CMTime v70[2];
  CMTime time2;
  CMTime time1;

  v7 = TXSequenceBehavior::charIndexToChannelUnitIndex(this, a3, 1);
  if (v7 < 0)
  {
    v16 = MEMORY[0x1E0CA2E68];
    *(_OWORD *)a4 = *MEMORY[0x1E0CA2E68];
    *(_QWORD *)(a4 + 16) = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v59 = v7;
    (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(_QWORD *)this + 608))(v70, this);
    memset(&v69, 0, sizeof(v69));
    v68 = v70[1];
    v8 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v8 + 336), (__n128 *)&v66);
    v9 = (const CMTime *)MEMORY[0x1E0CA2E68];
    v58 = (OZChannel *)((char *)this + 33056);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), MEMORY[0x1E0CA2E68], 0.0);
    v11 = v10;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), v9, 0.0);
    operator*(&v66, &v67, v11 + v12 + 1.0);
    time1 = v68;
    time2 = v67;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v69);
    NumObjects = TXSequenceBehavior::getNumObjects(this);
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), v9, 0.0);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), v9, 0.0) == 2)
      v15 = 0;
    else
      v15 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32240), MEMORY[0x1E0CA2E68], 0.0);
    v17 = (CMTime *)MEMORY[0x1E0CA2E68];
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E0CA2E68], 0.0) == 4)
      v59 = TXSequenceBehavior::shuffle(this, v59, v18);
    v19 = (double)NumObjects;
    TXSequenceBehavior::getKeyframeExtent(this, &time2, &time1);
    memset(&v68, 0, sizeof(v68));
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v68);
    time1 = v68;
    time2 = *v17;
    if (!CMTimeCompare(&time1, &time2))
      v68 = v69;
    v20 = (const CMTime *)MEMORY[0x1E0CA2E68];
    v21 = 0.0;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 31680), MEMORY[0x1E0CA2E68], 0.0);
    v23 = -1.0 / (v22 + 1.0) + 1.0;
    v24 = v19 * 0.5;
    v25 = ceil(v19 * 0.5);
    if ((ValueAsInt & 0xFFFFFFFE) == 2)
      v26 = v25;
    else
      v26 = v19;
    v27 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v27 + 336), (__n128 *)&time1);
    operator/((__int128 *)&v69.value, (uint64_t)&time1, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    memset(&v67, 0, sizeof(v67));
    time2 = v70[0];
    time1 = *a2;
    v29 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v66);
    v30 = (*(uint64_t (**)(TXSequenceBehavior *, double))(*(_QWORD *)this + 336))(this, v29);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v30 + 336), (__n128 *)&v63);
    OZChannel::getValueAsDouble(v58, v20, 0.0);
    operator*(&v63, &v64, v31);
    time1 = v66;
    time2 = v64;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v67);
    operator/((__int128 *)&v67.value, (uint64_t)&v69, (uint64_t)&v62);
    v32 = CMTimeGetSeconds(&v62);
    v33 = 0.999999;
    if (v32 <= 0.999999)
      v33 = v32;
    if (v32 >= 0.0)
      v21 = v33;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), v20, 0.0) == 1)
    {
      if (v15 == 6)
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), a2, 0.0);
      else
        v35 = TXSequenceBehavior::computePosition(this, v15, v21, v34);
      v41 = v35;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32648), MEMORY[0x1E0CA2E68], 0.0);
      v43 = v41 * v42;
      v39 = vcvtmd_s64_f64(v43 + 0.0000001);
      v44 = v43 - (double)v39;
    }
    else
    {
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32648), MEMORY[0x1E0CA2E68], 0.0);
      v38 = v21 * v37;
      v39 = vcvtmd_s64_f64(v38 + 0.0000001);
      if (v15 == 6)
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), a2, 0.0);
      else
        v40 = TXSequenceBehavior::computePosition(this, v15, v38 - (double)v39, v36);
      v44 = v40;
    }
    v45 = Seconds / (v26 - (v26 + -1.0) * v23);
    v46 = (const CMTime *)MEMORY[0x1E0CA2E68];
    v47 = 0.0;
    v48 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 33208), MEMORY[0x1E0CA2E68], 0.0);
    v49 = (v39 & 0x80000001) == 1 && v48 == 2;
    v50 = 1.0 - v44;
    if (!v49)
      v50 = v44;
    operator*(&v69, &v64, v50);
    v51 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v51 + 336), (__n128 *)&v61);
    OZChannel::getValueAsDouble(v58, v46, 0.0);
    operator*(&v61, &v63, v52);
    time1 = v64;
    time2 = v63;
    PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v66);
    v67 = v66;
    switch(ValueAsInt)
    {
      case 0:
      case 4:
        v47 = (double)v59;
        break;
      case 1:
        v47 = v19 - (double)v59 + -1.0;
        break;
      case 2:
        if (v24 > (double)v59)
          v47 = v24 - (double)v59 + -1.0;
        else
          v47 = (double)v59 - v24;
        break;
      case 3:
        if (v24 <= (double)v59)
          v47 = v19 - (double)v59 + -1.0;
        else
          v47 = (double)v59;
        break;
      default:
        break;
    }
    OZChannel::getValueAsDouble(v58, MEMORY[0x1E0CA2E68], 0.0);
    v54 = (1.0 - v23) * v45 * v47 + v53;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    v55 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    OZFigTimeForChannelSeconds(&v61, v54 / *(double *)(v55 + 368), 0x40000);
    time1 = v67;
    time2 = v61;
    v56 = PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v63);
    v57 = (*(uint64_t (**)(TXSequenceBehavior *, double))(*(_QWORD *)this + 336))(this, v56);
    OZFigTimeForChannelSeconds(&v60, v45 / *(double *)(v57 + 368), 0x40000);
    operator/((__int128 *)&v63.value, (uint64_t)&v60, (uint64_t)&v64);
    operator*((__int128 *)&v64.value, (uint64_t)&v68, (uint64_t)&v66);
    time2 = v70[0];
    time1 = v66;
    PC_CMTimeSaferAdd(&time1, &time2, a4);
  }
}

uint64_t TXSequenceBehavior::charIndexToSelectionIndex(TXSequenceBehavior *this, int a2, unsigned int *a3)
{
  unint64_t v4;
  unsigned int v6;
  uint64_t WordIndexInPhrase;
  int v8;
  UniChar CharacterAtIndex;
  unsigned int LineBreaks;
  int v11;
  uint64_t v12;
  UniChar v13;
  UniChar v14;
  int v15;
  UniChar v16;
  _BOOL4 IsWhitespaceOrNewline;
  BOOL v18;
  unsigned int v19;
  UniChar v20;
  BOOL v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  UniChar v26;
  UniChar v27;
  unsigned int v28;
  UniChar v29;
  BOOL v30;
  unsigned int v31;
  int v32;
  int v33;
  unint64_t v34;
  const void *v35;
  TXTranscriptionGenerator *v36;
  TXTranscriptionGenerator *v37;
  _BOOL4 v38;
  int v39;
  int v40;
  UniChar v41;
  int v42;
  int v43;
  UniChar v44;
  _BOOL4 v45;
  int v46;
  UniChar v47;
  uint64_t v48;
  int v49;
  UniChar v50;
  BOOL v51;
  UniChar v52;
  UniChar v53;
  _BOOL4 IsWhitespace;
  int v55;
  UniChar v56;
  unsigned int v57;
  unint64_t *v59;
  CFStringRef theString;
  unsigned int v61;

  if (!a3)
    return 0;
  LODWORD(v4) = a2;
  v61 = 0;
  TXChannelString::getString((PCString *)(*((_QWORD *)this + 101) + 19048), (PCString *)&theString);
  v6 = PCString::size((PCString *)&theString);
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 30816), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 1u:
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E0CA2E68], 0.0))
        LODWORD(v4) = v6 + ~(_DWORD)v4;
      goto LABEL_114;
    case 2u:
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E0CA2E68], 0.0))
      {
        v8 = v4;
        if (v6 > v4)
        {
          v8 = v4;
          do
          {
            CharacterAtIndex = CFStringGetCharacterAtIndex(theString, v8);
            if (TXCharacterSetIsWhitespaceOrNewline(CharacterAtIndex))
              goto LABEL_12;
            ++v8;
          }
          while (v6 != v8);
          v8 = v6;
        }
LABEL_12:
        LODWORD(v4) = v8 + ~(_DWORD)v4;
        goto LABEL_114;
      }
      if (!(_DWORD)v4)
        goto LABEL_66;
      v39 = v4 + 1;
      while (1)
      {
        v40 = v39 - 1;
        v41 = CFStringGetCharacterAtIndex(theString, v39 - 1);
        if (TXCharacterSetIsWhitespaceOrNewline(v41))
          break;
        --v39;
        if (v40 == 1)
        {
LABEL_66:
          v42 = 0;
          goto LABEL_113;
        }
      }
      v42 = -v39;
LABEL_113:
      LODWORD(v4) = v42 + v4;
      goto LABEL_114;
    case 3u:
      v59 = 0;
      LineBreaks = TXTextLayout::getLineBreaks(*((TXTextLayout **)this + 101), &v59);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E0CA2E68], 0.0))
      {
        if (v6 <= v4)
        {
          v11 = 0;
          LODWORD(v12) = v4;
        }
        else
        {
          v11 = 0;
          v12 = v4;
          do
          {
            v13 = CFStringGetCharacterAtIndex(theString, (int)v12);
            if (TXCharacterSetIsNewline(v13)
              || TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v12, v59, LineBreaks))
            {
              goto LABEL_107;
            }
            v14 = CFStringGetCharacterAtIndex(theString, (int)v12);
            if (TXCharacterSetIsWhitespaceOrNewline(v14))
              ++v11;
            else
              v11 = 0;
            ++v12;
          }
          while (v6 != (_DWORD)v12);
          LODWORD(v12) = v6;
        }
LABEL_107:
        LODWORD(v4) = v12 + ~(_DWORD)v4 - v11;
        goto LABEL_114;
      }
      v48 = 0;
      v49 = 0;
      while (1)
      {
        v50 = CFStringGetCharacterAtIndex(theString, (int)v4 + (int)v48);
        if (TXCharacterSetIsWhitespaceOrNewline(v50))
          ++v49;
        else
          v49 = 0;
        if (!((_DWORD)v4 + (_DWORD)v48)
          || TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v4 + v48, v59, LineBreaks))
        {
          break;
        }
        --v48;
      }
      LODWORD(v4) = -(int)v48 - v49;
LABEL_114:
      v61 = v4;
      goto LABEL_115;
    case 4u:
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E0CA2E68], 0.0))
      {
        if (v6 > v4)
        {
          v15 = 0;
          do
          {
            v16 = CFStringGetCharacterAtIndex(theString, (int)v4);
            IsWhitespaceOrNewline = TXCharacterSetIsWhitespaceOrNewline(v16);
            v18 = IsWhitespaceOrNewline;
            if (IsWhitespaceOrNewline)
            {
              v61 = ++v15;
              v19 = v4 + 1;
              do
              {
                LODWORD(v4) = v19;
                if (v19 >= v6)
                  break;
                v20 = CFStringGetCharacterAtIndex(theString, (int)v19);
                v21 = TXCharacterSetIsWhitespaceOrNewline(v20);
                v19 = v4 + 1;
              }
              while (v21);
            }
            else
            {
              LODWORD(v4) = v4 + 1;
            }
          }
          while (v4 < v6);
          if (v18)
            goto LABEL_34;
LABEL_111:
          WordIndexInPhrase = 1;
          LODWORD(v4) = v15;
          goto LABEL_116;
        }
LABEL_61:
        LODWORD(v4) = 0;
      }
      else if ((_DWORD)v4)
      {
        v15 = 0;
        v43 = v4;
        while (1)
        {
          v44 = CFStringGetCharacterAtIndex(theString, v43);
          v45 = TXCharacterSetIsWhitespaceOrNewline(v44);
          if (v45)
            break;
          --v43;
LABEL_75:
          if (!v43)
          {
            if (!v45)
              goto LABEL_111;
LABEL_34:
            LODWORD(v4) = v15 - 1;
            goto LABEL_114;
          }
        }
        v61 = ++v15;
        v46 = v43 - 1;
        while (v46)
        {
          v47 = CFStringGetCharacterAtIndex(theString, v46--);
          if (!TXCharacterSetIsWhitespaceOrNewline(v47))
          {
            v43 = v46 + 1;
            goto LABEL_75;
          }
        }
        if (v45)
          goto LABEL_34;
        goto LABEL_111;
      }
LABEL_115:
      WordIndexInPhrase = 1;
      goto LABEL_116;
    case 5u:
      v59 = 0;
      v22 = TXTextLayout::getLineBreaks(*((TXTextLayout **)this + 101), &v59);
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E0CA2E68], 0.0))
      {
        if ((_DWORD)v4)
        {
          v23 = 0;
          v51 = 0;
          do
          {
            v52 = CFStringGetCharacterAtIndex(theString, (int)v4);
            if (TXCharacterSetIsNewline(v52)
              || TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v4, v59, v22))
            {
              break;
            }
            v53 = CFStringGetCharacterAtIndex(theString, (int)v4);
            IsWhitespace = TXCharacterSetIsWhitespace(v53);
            v51 = IsWhitespace;
            if (IsWhitespace)
            {
              v61 = ++v23;
              v55 = v4 - 1;
              do
              {
                if (!v55)
                  goto LABEL_96;
                v56 = CFStringGetCharacterAtIndex(theString, v55--);
              }
              while (TXCharacterSetIsWhitespace(v56));
              LODWORD(v4) = v55 + 1;
            }
            else
            {
              LODWORD(v4) = v4 - 1;
            }
          }
          while ((_DWORD)v4);
LABEL_96:
          if (!v51)
            goto LABEL_99;
LABEL_97:
          v61 = --v23;
          goto LABEL_99;
        }
LABEL_98:
        v23 = 0;
        goto LABEL_99;
      }
      if (v6 <= v4)
        goto LABEL_98;
      v23 = 0;
      v24 = 0;
      v25 = v4;
      do
      {
        v26 = CFStringGetCharacterAtIndex(theString, (int)v25);
        if (TXCharacterSetIsNewline(v26)
          || v25 > v4 && TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v25, v59, v22))
        {
          break;
        }
        v27 = CFStringGetCharacterAtIndex(theString, (int)v25);
        if (TXCharacterSetIsWhitespace(v27))
        {
          v61 = ++v23;
          v28 = v25 + 1;
          do
          {
            v25 = v28;
            if (v28 >= v6)
              break;
            v29 = CFStringGetCharacterAtIndex(theString, (int)v28);
            v30 = TXCharacterSetIsWhitespace(v29);
            v28 = v25 + 1;
          }
          while (v30);
          v24 = 1;
        }
        else
        {
          v24 = 0;
          ++v25;
        }
      }
      while (v25 < v6);
      if (v24)
        goto LABEL_97;
LABEL_99:
      WordIndexInPhrase = 1;
      LODWORD(v4) = v23;
LABEL_116:
      *a3 = v4;
      PCString::~PCString((PCString *)&theString);
      return WordIndexInPhrase;
    case 6u:
      v59 = 0;
      v31 = TXTextLayout::getLineBreaks(*((TXTextLayout **)this + 101), &v59);
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E0CA2E68], 0.0))
      {
        v32 = v6 - v4;
        if (v6 <= v4)
        {
          v33 = 0;
        }
        else
        {
          v33 = 0;
          v34 = v4;
          v4 = v4;
          do
          {
            if (v4 > v34 && TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v4, v59, v31))
              v61 = ++v33;
            ++v4;
            --v32;
          }
          while (v32);
        }
      }
      else
      {
        v33 = 0;
        v57 = 0;
        do
        {
          if (TXTextLayout::isLineBreak(*((TXTextLayout **)this + 101), v57, v59, v31))
            v61 = ++v33;
          ++v57;
        }
        while (v57 <= v4);
      }
      WordIndexInPhrase = 1;
      LODWORD(v4) = v33;
      goto LABEL_116;
    case 7u:
      v35 = (const void *)*((_QWORD *)this + 101);
      if (!v35)
        goto LABEL_61;
      if (!v36)
        goto LABEL_61;
      v37 = v36;
      v38 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31528), MEMORY[0x1E0CA2E68], 0.0) != 0;
      WordIndexInPhrase = TXTranscriptionGenerator::getWordIndexInPhrase(v37, v4, v38, &v61);
      LODWORD(v4) = v61;
      goto LABEL_116;
    default:
      goto LABEL_61;
  }
}

void sub_1B295DE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

uint64_t TXSequenceBehavior::charIndexToChannelUnitIndex(TXSequenceBehavior *this, uint64_t a2, int a3)
{
  OZScene **v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;
  const CMTime *v12;
  int ValueAsInt;
  uint64_t v14;
  int v15;
  signed int v16;
  Li3DEngineScene *v17;
  OZScene **v18;
  unsigned int v20;
  unsigned int *v21;

  v20 = a2;
  if (a3 && Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544)))
  {
    v6 = (OZScene **)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
    OZLockingGroup::acquireReadLocks(v6);
  }
  v7 = *((_QWORD *)this + 4508);
  if (v7)
  {
    v8 = (_DWORD *)((char *)this + 36064);
    do
    {
      v9 = *(_DWORD *)(v7 + 28);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v7;
      else
        v11 = (uint64_t *)(v7 + 8);
      if (v10)
        v8 = (_DWORD *)v7;
      v7 = *v11;
    }
    while (*v11);
    if (v8 != (_DWORD *)((char *)this + 36064) && v8[7] <= a2)
    {
      v14 = v8[8];
      if (!a3)
        return v14;
      goto LABEL_34;
    }
  }
  v12 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0);
  v14 = TXSequenceBehavior::charIndexToUnitIndex((TXTextLayout **)this, a2, ValueAsInt);
  v15 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), v12, 0.0);
  if ((v15 - 2) >= 2)
  {
    if (v15 == 1)
      v14 = TXSequenceBehavior::getNumObjects(this) + ~(_DWORD)v14;
  }
  else
  {
    v16 = TXSequenceBehavior::getNumObjects(this) >> 1;
    if ((TXSequenceBehavior::getNumObjects(this) & 1) != 0)
    {
      if ((int)v14 - v16 >= 0)
        LODWORD(v14) = v14 - v16;
      else
        LODWORD(v14) = v16 - v14;
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E0CA2E68], 0.0) == 3)
        v14 = (v16 - v14);
      else
        v14 = v14;
    }
    else
    {
      if ((int)v14 >= v16)
        LODWORD(v14) = v14 - v16;
      else
        LODWORD(v14) = v16 + ~(_DWORD)v14;
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E0CA2E68], 0.0) == 3)
        v14 = (v16 + ~(_DWORD)v14);
      else
        v14 = v14;
    }
  }
  v21 = &v20;
  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)this + 4507, &v20, (uint64_t)&std::piecewise_construct, &v21)+ 8) = v14;
  if (a3)
  {
LABEL_34:
    v17 = (TXSequenceBehavior *)((char *)this + 544);
    if (Li3DEngineScene::sceneManager(v17))
    {
      v18 = (OZScene **)Li3DEngineScene::sceneManager(v17);
      OZLockingGroup::releaseReadLocks(v18);
    }
  }
  return v14;
}

__n128 TXSequenceBehavior::getKeyframeExtent(TXSequenceBehavior *this, CMTime *a2, CMTime *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  const void *v6;
  OZChannel *v7;
  __n128 result;
  int32_t v9;
  CMTime *v10;
  __int128 v11;
  int32_t v12;
  CMTime *v13;
  void *v14;
  const void **v15;
  const void **v16;
  OZChannel *v17;
  int32_t v18;
  CMTime *v19;
  __int128 v20;
  int32_t v21;
  CMTime *v22;
  __n128 *v23;
  __int128 v24;
  const void **v27;
  const void **v28;
  uint64_t v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime time2;
  CMTime time1;

  v3 = *((_QWORD *)this + 104);
  v4 = *((_QWORD *)this + 103);
  if (v3 == v4)
  {
    v23 = (__n128 *)MEMORY[0x1E0CA2E68];
    v24 = *MEMORY[0x1E0CA2E68];
    a2->epoch = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    *(_OWORD *)&a2->value = v24;
    result = *v23;
    a3->epoch = v23[1].n128_i64[0];
    *(__n128 *)&a3->value = result;
  }
  else
  {
    v5 = 0;
    v33 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
    v32 = v33;
    do
    {
      v6 = *(const void **)v4;
      if ((*(_BYTE *)(*(_QWORD *)v4 + 57) & 0x10) != 0)
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        OZChannelFolder::getAllDescendantsFlattened((uint64_t)v14, (void **)&v27, 0, 0);
        v16 = v27;
        v15 = v28;
        if (v27 != v28)
        {
          do
          {
            if (*v16)
            else
              v17 = 0;
            if (((*((uint64_t (**)(OZChannel *, _QWORD))v17->var0 + 69))(v17, 0) & 1) != 0)
            {
              OZChannel::getKeyframeMinTime(v17, (uint64_t)&time1);
              v31 = time1;
              OZChannel::getKeyframeMaxTime(v17, (uint64_t)&time1);
              v30 = time1;
              if ((v5 & 1) != 0)
              {
                time1 = v33;
                time2 = v31;
                v18 = CMTimeCompare(&time1, &time2);
                v19 = &v31;
                if (v18 <= 0)
                  v19 = &v33;
                v20 = *(_OWORD *)&v19->value;
                v33.epoch = v19->epoch;
                *(_OWORD *)&v33.value = v20;
                time1 = v32;
                time2 = v30;
                v21 = CMTimeCompare(&time1, &time2);
                v22 = &v30;
                if (v21 >= 0)
                  v22 = &v32;
                result = *(__n128 *)&v22->value;
                v32.epoch = v22->epoch;
                *(__n128 *)&v32.value = result;
              }
              else
              {
                v33 = v31;
                result.n128_u64[1] = *(_QWORD *)&v30.timescale;
                v32 = v30;
              }
              v5 = 1;
            }
            ++v16;
          }
          while (v16 != v15);
          v16 = v27;
        }
        if (v16)
        {
          v28 = v16;
          operator delete(v16);
        }
      }
      else
      {
        if ((*((unsigned int (**)(OZChannel *, _QWORD))v7->var0 + 69))(v7, 0))
        {
          OZChannel::getKeyframeMinTime(v7, (uint64_t)&v31);
          OZChannel::getKeyframeMaxTime(v7, (uint64_t)&v30);
          if ((v5 & 1) != 0)
          {
            time1 = v33;
            time2 = v31;
            v9 = CMTimeCompare(&time1, &time2);
            v10 = &v31;
            if (v9 <= 0)
              v10 = &v33;
            v11 = *(_OWORD *)&v10->value;
            v33.epoch = v10->epoch;
            *(_OWORD *)&v33.value = v11;
            time1 = v32;
            time2 = v30;
            v12 = CMTimeCompare(&time1, &time2);
            v13 = &v30;
            if (v12 >= 0)
              v13 = &v32;
            result = *(__n128 *)&v13->value;
            v32.epoch = v13->epoch;
            *(__n128 *)&v32.value = result;
          }
          else
          {
            v33 = v31;
            v32 = v30;
          }
          v5 = 1;
        }
      }
      v4 += 8;
    }
    while (v4 != v3);
    *a2 = v33;
    result.n128_u64[0] = v32.value;
    *a3 = v32;
  }
  return result;
}

void sub_1B295E410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 PCMath::clamp@<Q0>(CMTime *this@<X0>, CMTime *a2@<X1>, CMTime *a3@<X2>, uint64_t a4@<X8>)
{
  CMTime *v6;
  __n128 result;
  CMTime v10;
  CMTime time1;

  v6 = a2;
  time1 = *this;
  v10 = *a2;
  if ((CMTimeCompare(&time1, &v10) & 0x80000000) == 0)
  {
    time1 = *this;
    v10 = *a3;
    if (CMTimeCompare(&time1, &v10) <= 0)
      v6 = this;
    else
      v6 = a3;
  }
  result = *(__n128 *)&v6->value;
  *(_OWORD *)a4 = *(_OWORD *)&v6->value;
  *(_QWORD *)(a4 + 16) = v6->epoch;
  return result;
}

uint64_t TXSequenceBehavior::getNumObjects(TXSequenceBehavior *this)
{
  uint64_t result;
  int ValueAsInt;

  if (*((_BYTE *)this + 796))
    return *((unsigned int *)this + 200);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0);
  result = 1;
  switch(ValueAsInt)
  {
    case 0:
    case 5:
      result = TXTextLayout::getComposedCharacterCount(*((TXTextLayout **)this + 101));
      break;
    case 1:
      result = TXTextLayout::getComposedCharacterCountIgnoringSpaces(*((TXTextLayout **)this + 101));
      break;
    case 2:
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 101) + 224))(*((_QWORD *)this + 101));
      break;
    case 3:
      result = *(unsigned int *)(*((_QWORD *)this + 101) + 19324);
      break;
    default:
      break;
  }
  *((_DWORD *)this + 200) = result;
  *((_BYTE *)this + 796) = 1;
  return result;
}

uint64_t TXSequenceBehavior::shuffle(TXSequenceBehavior *this, unsigned int a2, const CMTime *a3)
{
  uint64_t result;
  unsigned int v6;
  char *v7;
  unsigned int ValueAsInt;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;

  result = TXSequenceBehavior::getNumObjects(this);
  if ((_DWORD)result)
  {
    v6 = result;
    v7 = (char *)this + 36032;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32088), MEMORY[0x1E0CA2E68], 0.0);
    v9 = ValueAsInt;
    if (*((_DWORD *)v7 + 2) != v6 || ValueAsInt != *((_DWORD *)v7 + 3))
    {
      if (*(_QWORD *)v7)
      {
        MEMORY[0x1B5E2914C](*(_QWORD *)v7, 0x1000C8052888210);
        *(_QWORD *)v7 = 0;
      }
      v10 = operator new[]();
      v11 = 0;
      *(_QWORD *)v7 = v10;
      *((_DWORD *)v7 + 2) = v6;
      do
      {
        *(_DWORD *)(v10 + 4 * v11) = v11;
        ++v11;
      }
      while (v6 != v11);
      *((_DWORD *)v7 + 3) = v9;
      PCRandomShuffleUsingLRand48<int *>(v10, v10 + 4 * v6, v9);
    }
    return *(unsigned int *)(*(_QWORD *)v7 + 4 * a2);
  }
  return result;
}

void TXSequenceBehavior::createInfluenceCache(TXSequenceBehavior *this, const CMTime *a2, int a3)
{
  OZScene **v6;
  _OWORD **v7;
  _OWORD **v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  uint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  CMTimeEpoch v28;
  char v29[8];
  CMTime time2;
  CMTime time1;

  v6 = (OZScene **)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v29, v6);
  TXSequenceBehavior::getAnimationDuration(this, (uint64_t)&time1);
  *(CMTime *)((char *)this + 772) = time1;
  *((_BYTE *)this + 768) = 1;
  v7 = (_OWORD **)*((_QWORD *)this + 93);
  v8 = (_OWORD **)*((_QWORD *)this + 94);
  while (v7 != v8)
  {
    v9 = (uint64_t)*v7;
    v28 = *((_QWORD *)*v7 + 2);
    *(_OWORD *)&time1.value = **v7;
    time1.epoch = v28;
    time2 = *a2;
    if (!CMTimeCompare(&time1, &time2))
    {
      ++*(_DWORD *)(v9 + 24);
      goto LABEL_29;
    }
    ++v7;
  }
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E0CA2E68], 0.0) != 1)
  {
    v10 = operator new();
    *(_OWORD *)v10 = *(_OWORD *)&a2->value;
    *(_QWORD *)(v10 + 16) = a2->epoch;
    *(_DWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 32) = v10 + 40;
    *(_QWORD *)(v10 + 48) = 0;
    if (a3)
    {
      v11 = 0;
      do
      {
        v12 = COERCE__INT64_((*(double (**)(TXSequenceBehavior *, const CMTime *, _QWORD, _QWORD, double))(*(_QWORD *)this + 704))(this, a2, 0, 0, (double)v11));
        LODWORD(time2.value) = v11;
        time1.value = (CMTimeValue)&time2;
        std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)(v10 + 32), (unsigned int *)&time2, (uint64_t)&std::piecewise_construct, &time1)[5] = v12;
        ++v11;
      }
      while (a3 != v11);
      v13 = *(_DWORD *)(v10 + 24) + 1;
    }
    else
    {
      v13 = 1;
    }
    *(_DWORD *)(v10 + 24) = v13;
    v14 = (uint64_t *)*((_QWORD *)this + 94);
    v15 = *((_QWORD *)this + 95);
    if ((unint64_t)v14 >= v15)
    {
      v17 = *((_QWORD *)this + 93);
      v18 = ((uint64_t)v14 - v17) >> 3;
      if ((unint64_t)(v18 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v19 = v15 - v17;
      v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1))
        v20 = v18 + 1;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v20;
      if (v21)
        v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 760, v21);
      else
        v22 = 0;
      v23 = (uint64_t *)&v22[8 * v18];
      v24 = &v22[8 * v21];
      *v23 = v10;
      v16 = v23 + 1;
      v25 = (char *)*((_QWORD *)this + 94);
      v26 = (char *)*((_QWORD *)this + 93);
      if (v25 != v26)
      {
        do
        {
          v27 = *((_QWORD *)v25 - 1);
          v25 -= 8;
          *--v23 = v27;
        }
        while (v25 != v26);
        v25 = (char *)*((_QWORD *)this + 93);
      }
      *((_QWORD *)this + 93) = v23;
      *((_QWORD *)this + 94) = v16;
      *((_QWORD *)this + 95) = v24;
      if (v25)
        operator delete(v25);
    }
    else
    {
      *v14 = v10;
      v16 = v14 + 1;
    }
    *((_QWORD *)this + 94) = v16;
  }
LABEL_29:
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v29);
}

void sub_1B295E91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior::clearInfluenceCache(TXSequenceBehavior *this, const CMTime *a2)
{
  OZScene **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  CMTimeEpoch v11;
  _BYTE v12[8];
  CMTime time2;
  CMTime time1;

  v4 = (OZScene **)Li3DEngineScene::sceneManager((TXSequenceBehavior *)((char *)this + 544));
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v12, v4);
  v5 = *((_QWORD *)this + 93);
  if (v5 != *((_QWORD *)this + 94))
  {
    v6 = -v5;
    while (1)
    {
      v7 = *(_QWORD *)v5;
      v11 = *(_QWORD *)(*(_QWORD *)v5 + 16);
      *(_OWORD *)&time1.value = *(_OWORD *)*(_QWORD *)v5;
      time1.epoch = v11;
      time2 = *a2;
      if (!CMTimeCompare(&time1, &time2))
      {
        v8 = *(_DWORD *)(v7 + 24) - 1;
        *(_DWORD *)(v7 + 24) = v8;
        if (!v8)
          break;
      }
      v5 += 8;
      v6 -= 8;
      if (v5 == *((_QWORD *)this + 94))
        goto LABEL_10;
    }
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v7 + 32, *(_QWORD **)(v7 + 40));
    MEMORY[0x1B5E29170](v7, 0x1020C40A41566E0);
    v9 = *((_QWORD *)this + 94);
    v10 = v9 - (8 - v6);
    if (v9 != 8 - v6)
      memmove((void *)-v6, (const void *)(8 - v6), v9 - (8 - v6));
    *((_QWORD *)this + 94) = v10 - v6;
  }
LABEL_10:
  *((_BYTE *)this + 768) = 0;
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v12);
}

void sub_1B295EA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)va);
  _Unwind_Resume(a1);
}

double TXSequenceBehavior::getInfluence(TXSequenceBehavior *this, CMTime *a2, double a3, OZChannel *a4, int a5)
{
  OZChannel *v10;
  const CMTime *v11;
  uint64_t *v12;
  double v13;
  Float64 v14;
  uint64_t v15;
  double v16;
  double InfluenceForTranscription;
  CMTime **v18;
  CMTime **v19;
  CMTime *v20;
  uint64_t v21;
  uint64_t v22;
  const CMTime *v23;
  double v24;
  uint64_t PerObjectSpeed;
  double *v26;
  double *value;
  double *v28;
  int value_low;
  double v30;
  double v31;
  double v32;
  int v33;
  int ValueAsInt;
  CMTime v36[2];
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime time2;

  v10 = (OZChannel *)((char *)this + 29056);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E0CA2E68], 0.0) != 1)
  {
    v18 = (CMTime **)*((_QWORD *)this + 93);
    v19 = (CMTime **)*((_QWORD *)this + 94);
    while (v18 != v19)
    {
      v20 = *v18;
      v39 = **v18;
      v36[0] = v39;
      time2 = *a2;
      if (!CMTimeCompare(v36, &time2))
      {
        LODWORD(time2.value) = a3;
        v36[0].value = (CMTimeValue)&time2;
        v12 = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)&v20[1].timescale, (unsigned int *)&time2, (uint64_t)&std::piecewise_construct, v36)[5];
        return *(double *)&v12;
      }
      ++v18;
    }
  }
  memset(&v39, 0, sizeof(v39));
  v11 = (const CMTime *)MEMORY[0x1E0CA2E68];
  *(double *)&v12 = 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), MEMORY[0x1E0CA2E68], 0.0);
  v14 = v13;
  v15 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), (__n128 *)&v37);
  operator*(&v37, &v38, v14);
  v36[0] = *a2;
  time2 = v38;
  v16 = PC_CMTimeSaferSubtract(v36, &time2, (uint64_t)&v39);
  (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *, double))(*(_QWORD *)this + 608))(v36, this, v16);
  if (OZChannel::getValueAsInt(v10, v11, 0.0) == 1)
  {
    InfluenceForTranscription = TXSequenceBehavior::getInfluenceForTranscription(this, a2, a3, a4);
  }
  else
  {
    v21 = TXSequenceBehavior::charIndexToChannelUnitIndex(this, a3, a5);
    if ((v21 & 0x80000000) != 0)
      return *(double *)&v12;
    v22 = v21;
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E0CA2E68], 0.0) == 4)
      v22 = TXSequenceBehavior::shuffle(this, v22, v23);
    v24 = (*(double (**)(TXSequenceBehavior *, uint64_t))(*(_QWORD *)this + 712))(this, v22);
    LOBYTE(v37.value) = 0;
    memset(&time2, 0, sizeof(time2));
    TXSequenceBehavior::getSelection((uint64_t)this, &v39, (char **)&time2, (BOOL *)&v37);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), MEMORY[0x1E0CA2E68], 0.0) == 2)
    {
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 35880), MEMORY[0x1E0CA2E68], 0.0))
        PerObjectSpeed = TXSequenceBehavior::getPerObjectSpeed(this);
      else
        PerObjectSpeed = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32240), MEMORY[0x1E0CA2E68], 0.0);
      v26 = (double *)PerObjectSpeed;
    }
    else
    {
      v26 = 0;
    }
    value = (double *)time2.value;
    v28 = *(double **)&time2.timescale;
    InfluenceForTranscription = 0.0;
    if (time2.value != *(_QWORD *)&time2.timescale)
    {
      value_low = LOBYTE(v37.value);
      do
      {
        v30 = TXSequenceBehavior::trapezoid(this, v24, *value, *value + value[1], value[4], value[4], value_low != 0, value[6], value[7], v26);
        InfluenceForTranscription = v30
                                  * TXSequenceBehavior::trapezoid(this, v24, value[2], value[2] + value[3], 0.0, 0.0, 0, value[6], 1.0, 0)+ InfluenceForTranscription;
        value += 8;
      }
      while (value != v28);
      value = (double *)time2.value;
    }
    *(double *)&v38.value = InfluenceForTranscription;
    if (value)
    {
      *(_QWORD *)&time2.timescale = value;
      operator delete(value);
    }
  }
  if (InfluenceForTranscription <= 1.0)
    v31 = InfluenceForTranscription;
  else
    v31 = 1.0;
  if (InfluenceForTranscription >= 0.0)
    v32 = v31;
  else
    v32 = 0.0;
  *(double *)&v38.value = v32;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E0CA2E68], 0.0) == 3)
  {
    v32 = 1.0 - v32;
    *(double *)&v38.value = v32;
  }
  if (OZChannel::getValueAsInt(v10, MEMORY[0x1E0CA2E68], 0.0) == 1
    && OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    v33 = *(_DWORD *)(*((_QWORD *)this + 101) + 63804) + *(_DWORD *)(*((_QWORD *)this + 101) + 19324);
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 33056), MEMORY[0x1E0CA2E68], 0.0);
    if (v33 > ValueAsInt)
      *(double *)&v38.value = v32 + (double)(v33 + ~ValueAsInt);
  }
  TXSequenceBehavior::applySubselection(this, &v39, a3, (double *)&v38.value);
  v12 = (uint64_t *)v38.value;
  return *(double *)&v12;
}

void sub_1B295EEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double TXSequenceBehavior::getInfluenceForTranscription(TXSequenceBehavior *this, CMTime *a2, double a3, OZChannel *a4)
{
  double *v8;
  const void *v9;
  TXTranscriptionGenerator *v10;
  double Seconds;
  unsigned int v12;
  uint64_t v13;
  double v14;
  uint64_t *ActiveTranscriptionByUnit;
  double Lifespan;
  double started;
  uint64_t v18;
  int32_t v19;
  double v20;
  double v21;
  int v22;
  OZChannel *v23;
  int v24;
  double v25;
  int v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  int v31;
  int v32;
  __int128 v33;
  CMTime v35;
  CMTime v36;
  double v37;
  int ValueAsInt;
  CMTime time;
  CMTime v40;
  CMTime time2;
  CMTime time1;

  v8 = (double *)((char *)this + 36104);
  v9 = (const void *)*((_QWORD *)this + 101);
  if (v9)
  else
    v10 = 0;
  v40 = *a2;
  time = v40;
  Seconds = CMTimeGetSeconds(&time);
  v12 = a3;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0);
  v13 = TXSequenceBehavior::charIndexToUnitIndex((TXTextLayout **)this, a3, ValueAsInt);
  time1 = v40;
  time2 = *(CMTime *)((char *)this + 36080);
  if (CMTimeCompare(&time1, &time2) || (_DWORD)v13 != *(_DWORD *)v8)
  {
    ActiveTranscriptionByUnit = (uint64_t *)TXTranscriptionGenerator::getActiveTranscriptionByUnit(v10, &ValueAsInt, a2);
    memset(&time1, 0, sizeof(time1));
    std::vector<TXTranscriptionSegment>::__init_with_size[abi:ne180100]<TXTranscriptionSegment*,TXTranscriptionSegment*>(&time1, *ActiveTranscriptionByUnit, ActiveTranscriptionByUnit[1], 0xAAAAAAAAAAAAAAABLL * ((ActiveTranscriptionByUnit[1] - *ActiveTranscriptionByUnit) >> 4));
    if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)&time1.timescale - time1.value) >> 4) <= (int)v13)
    {
      v14 = 0.0;
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E0CA2E68], 0.0) == 1)
        v14 = 1.0;
      goto LABEL_34;
    }
    Lifespan = TXSequenceBehavior::getLifespan(this, &time1, v13);
    v37 = -1.0;
    started = TXSequenceBehavior::computeStartTime((uint64_t)this, a3, a2, &time1.value, v13, &v37, Lifespan);
    memset(&time2, 0, sizeof(time2));
    v18 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v18 + 336), (__n128 *)&v36);
    v19 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 29208), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v36, v19, &time2);
    v35 = time2;
    v20 = CMTimeGetSeconds(&v35);
    v21 = v37;
    if (v37 < 0.0)
    {
      if (Seconds >= started)
      {
        if (v20 <= -0.0000001 || v20 >= 0.0000001)
        {
          v26 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32240), MEMORY[0x1E0CA2E68], 0.0);
          v28 = (Seconds - started) / v20;
          v29 = 1.0;
          if (v28 <= 1.0)
            v29 = (Seconds - started) / v20;
          if (v28 >= 0.0)
            v30 = v29;
          else
            v30 = 0.0;
          v25 = TXSequenceBehavior::computePosition(this, v26, v30, v27);
        }
        else
        {
          v23 = (OZChannel *)((char *)this + 28112);
          if (Seconds >= started)
          {
            v31 = OZChannel::getValueAsInt(v23, MEMORY[0x1E0CA2E68], 0.0);
            v25 = 1.0;
            if (v31 == 1)
              v25 = 0.0;
          }
          else
          {
            v24 = OZChannel::getValueAsInt(v23, MEMORY[0x1E0CA2E68], 0.0);
            v25 = 1.0;
            if (v24 != 1)
              v25 = 0.0;
          }
        }
        v37 = v25;
        v32 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E0CA2E68], 0.0);
        v21 = v37;
        if (v32 != 1)
          goto LABEL_33;
        v21 = 1.0 - v37;
      }
      else
      {
        v22 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E0CA2E68], 0.0);
        v21 = 1.0;
        if (v22 != 1)
          v21 = 0.0;
      }
      v37 = v21;
    }
LABEL_33:
    v33 = *(_OWORD *)&a2->value;
    *((_QWORD *)this + 4512) = a2->epoch;
    *((_OWORD *)this + 2255) = v33;
    *(_DWORD *)v8 = v13;
    v8[1] = v21;
    TXSequenceBehavior::deactivateSegmentsIfNecessary(this, a4, v21, ValueAsInt, v13, (double)v12, a2);
    v14 = v37;
LABEL_34:
    time2.value = (CMTimeValue)&time1;
    std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100]((void ***)&time2);
    return v14;
  }
  TXSequenceBehavior::deactivateSegmentsIfNecessary(this, a4, v8[1], ValueAsInt, v13, (double)v12, a2);
  return v8[1];
}

void sub_1B295F2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  uint64_t v25;

  a25 = (void **)(v25 - 144);
  std::vector<TXTranscriptionSegment>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void TXSequenceBehavior::getSelection(uint64_t a1, const CMTime *a2, char **a3, BOOL *a4)
{
  CMTime *v8;
  uint64_t v9;
  double Seconds;
  double v11;
  double v12;
  const CMTime *v13;
  int ValueAsInt;
  BOOL v16;
  int v17;
  const CMTime *v18;
  double v19;
  double v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  int v25;
  double v26;
  double v27;
  _BOOL4 v29;
  CMTime v30[2];
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime v34;
  CMTime time;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime time2;

  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)a1 + 608))(&v38);
  memset(&v37, 0, sizeof(v37));
  TXSequenceBehavior::getAnimationDuration((TXSequenceBehavior *)a1, (uint64_t)&v37);
  v30[0] = v37;
  v8 = (CMTime *)MEMORY[0x1E0CA2E68];
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(v30, &time2) >= 1)
  {
    memset(&v36, 0, sizeof(v36));
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v9 + 336), (__n128 *)&v39);
    v30[0] = v37;
    time2 = v39;
    PC_CMTimeSaferSubtract(v30, &time2, (uint64_t)&v36);
    v30[0] = v36;
    time2 = *v8;
    if (CMTimeCompare(v30, &time2))
    {
      time2 = v38;
      v30[0] = *a2;
      PC_CMTimeSaferSubtract(v30, &time2, (uint64_t)&v39);
      operator/((__int128 *)&v39.value, (uint64_t)&v36, (uint64_t)&time);
      Seconds = CMTimeGetSeconds(&time);
    }
    else
    {
      Seconds = 1.0;
    }
    if (Seconds <= 0.999999)
      v11 = Seconds;
    else
      v11 = 0.999999;
    if (Seconds >= 0.0)
      v12 = v11;
    else
      v12 = 0.0;
    memset(&v34, 0, sizeof(v34));
    operator*(&v37, &v39, v12);
    time2 = v38;
    v30[0] = v39;
    PC_CMTimeSaferAdd(v30, &time2, (uint64_t)&v34);
    v13 = (const CMTime *)MEMORY[0x1E0CA2E68];
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E0CA2E68], 0.0);
    v16 = OZChannel::getValueAsInt((OZChannel *)(a1 + 33208), v13, 0.0) == 1
       && (ValueAsInt & 0xFFFFFFFE) == 2;
    *a4 = v16;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 32800), v13, 0.0) == 2)
      v17 = 0;
    else
      v17 = OZChannel::getValueAsInt((OZChannel *)(a1 + 32240), MEMORY[0x1E0CA2E68], 0.0);
    v18 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 32648), MEMORY[0x1E0CA2E68], 0.0);
    v20 = v19;
    if (OZChannel::getValueAsInt((OZChannel *)(a1 + 32800), v18, 0.0) == 1)
    {
      if (v17 == 6)
      {
        v22 = 0.0;
        OZChannel::getValueAsDouble((OZChannel *)(a1 + 32496), &v34, 0.0);
        if (v23 <= 0.999999)
          v24 = v23;
        else
          v24 = 0.999999;
        if (v23 >= 0.0)
          v22 = v24;
      }
      else
      {
        v22 = TXSequenceBehavior::computePosition((TXSequenceBehavior *)a1, v17, v12, v21);
      }
      if (*a4)
      {
        v25 = 0;
      }
      else
      {
        v25 = vcvtmd_s64_f64(v20 * v22 + 0.0000001);
        v22 = v20 * v22 - (double)v25;
      }
    }
    else
    {
      v25 = vcvtmd_s64_f64(v12 * v20 + 0.0000001);
      v26 = v12 * v20 - (double)v25;
      if (v17 == 6)
      {
        memset(&v33, 0, sizeof(v33));
        TXSequenceBehavior::getAnimationDuration((TXSequenceBehavior *)a1, (uint64_t)&v33);
        memset(&v32, 0, sizeof(v32));
        operator*(&v33, &v32, v26);
        memset(&v31, 0, sizeof(v31));
        (*(void (**)(CMTime *__return_ptr, uint64_t))(*(_QWORD *)a1 + 608))(v30, a1);
        v39 = v30[0];
        time2 = v32;
        PC_CMTimeSaferAdd(&time2, &v39, (uint64_t)&v31);
        OZChannel::getValueAsDouble((OZChannel *)(a1 + 32496), &v31, 0.0);
      }
      else
      {
        v27 = TXSequenceBehavior::computePosition((TXSequenceBehavior *)a1, v17, v26, v21);
      }
      v22 = v27;
      if (*a4)
        v22 = (v27 + (double)v25) / v20;
    }
    v29 = OZChannel::getValueAsInt((OZChannel *)(a1 + 33208), MEMORY[0x1E0CA2E68], 0.0) == 2
       && (v25 & 0x80000001) == 1;
    if ((ValueAsInt - 2) < 2)
    {
      TXSequenceBehavior::getSequenceThroughSelection(a1, a2, v29, a3, v22);
    }
    else if (ValueAsInt == 1)
    {
      TXSequenceBehavior::getSequenceFromSelection(a1, a2, v29, a3, v22);
    }
    else if (!ValueAsInt)
    {
      TXSequenceBehavior::getSequenceToSelection(a1, a2, v29, a3, v22);
    }
  }
}

uint64_t TXSequenceBehavior::getPerObjectSpeed(TXSequenceBehavior *this)
{
  const CMTime *v2;
  uint64_t ValueAsInt;
  int v4;

  v2 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 32240), MEMORY[0x1E0CA2E68], 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), v2, 0.0) == 1)
  {
    v4 = ValueAsInt - 1;
    if ((ValueAsInt - 1) <= 4 && ((0x1Bu >> v4) & 1) != 0)
      return dword_1B3056D78[v4];
  }
  return ValueAsInt;
}

uint64_t TXSequenceBehavior::applySubselection(TXSequenceBehavior *this, const CMTime *a2, double a3, double *a4)
{
  uint64_t result;
  int ValueAsInt;
  unsigned int ValueAsUint;
  unsigned int v11;
  unsigned int v12;
  BOOL v14;
  unsigned int v15;

  result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0);
  if ((_DWORD)result != 5)
  {
    result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 30816), MEMORY[0x1E0CA2E68], 0.0);
    if ((_DWORD)result)
    {
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 30816), MEMORY[0x1E0CA2E68], 0.0) == 8)
      {
        ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31376), MEMORY[0x1E0CA2E68], 0.0);
        result = TXTextLayout::isEmoji(*((uint64_t ***)this + 101), a3);
        if (ValueAsInt)
        {
          if (!(_DWORD)result)
            return result;
        }
        else if ((result & 1) != 0)
        {
          return result;
        }
      }
      else
      {
        v15 = 0;
        result = TXSequenceBehavior::charIndexToSelectionIndex(this, a3, &v15);
        if (!(_DWORD)result)
          return result;
        ValueAsUint = OZChannel::getValueAsUint((OZChannel *)((char *)this + 31072), a2, 0.0);
        v11 = OZChannel::getValueAsUint((OZChannel *)((char *)this + 31224), a2, 0.0);
        if (v11 >= ValueAsUint)
          v12 = ValueAsUint;
        else
          v12 = v11;
        if (v11 > ValueAsUint)
          ValueAsUint = v11;
        result = OZChannel::getValueAsInt((OZChannel *)((char *)this + 31376), MEMORY[0x1E0CA2E68], 0.0);
        v14 = v15 >= v12 && v15 < ValueAsUint;
        if ((_DWORD)result)
        {
          if (!v14)
            return result;
        }
        else if (v14)
        {
          return result;
        }
      }
      *a4 = 0.0;
    }
  }
  return result;
}

void TXSequenceBehavior::computeStartTimeForWord(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4, uint64_t a5, uint64_t a6, double *a7)
{
  const CMTime *v11;
  int ValueAsInt;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  TXTranscriptionGenerator *v16;
  const CMTime *v17;
  Float64 v18;
  uint64_t v19;
  int LineIndex;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int32_t v24;
  int v25;
  double v26;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime time;

  v11 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 29360), MEMORY[0x1E0CA2E68], 0.0);
  OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), v11, 0.0);
  v13 = TXSequenceBehavior::charIndexToTriggerIndex((TXSequenceBehavior *)a1, a3);
  v14 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29616), v11, 0.0) + v13;
  if (ValueAsInt == 1)
  {
    v15 = *(_DWORD **)(a1 + 808);
    if (v14 < v15[4831])
    {
      TXTranscriptionGenerator::getActiveTranscriptionByLine(v16, a4);
      if (OZChannel::getValueAsInt((OZChannel *)(a1 + 30024), MEMORY[0x1E0CA2E68], 0.0) == 2)
      {
        v17 = (const CMTime *)MEMORY[0x1E0CA2E68];
        v18 = (double)(int)OZChannel::getValueAsInt((OZChannel *)(a1 + 30280), MEMORY[0x1E0CA2E68], 0.0);
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v19 + 336), (__n128 *)&v29);
        operator*(&v29, &time, v18);
        CMTimeGetSeconds(&time);
        LineIndex = TXTextLayout::getLineIndex(*(TXTextLayout **)(a1 + 808), a3);
        v21 = TXTextLayout::lineIndexToCharIndex(*(TXTextLayout **)(a1 + 808), LineIndex);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 808) + 720))(*(_QWORD *)(a1 + 808), v21);
        v22 = TXTextLayout::lineIndexToCharIndex(*(TXTextLayout **)(a1 + 808), LineIndex + 1);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 808) + 720))(*(_QWORD *)(a1 + 808), v22);
        (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 808) + 720))(*(_QWORD *)(a1 + 808), a3);
        memset(&v29, 0, sizeof(v29));
        v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v23 + 336), (__n128 *)&v28);
        v24 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29208), v17, 0.0);
        operator*(&v28, v24, &v29);
        v27 = v29;
        CMTimeGetSeconds(&v27);
      }
      else
      {
        (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 808) + 720))(*(_QWORD *)(a1 + 808), a3);
        TXTextLayout::getLineIndex(*(TXTextLayout **)(a1 + 808), a3);
      }
      return;
    }
  }
  else if (ValueAsInt
         || v14 < (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 808) + 224))(*(_QWORD *)(a1 + 808)))
  {
    return;
  }
  if (a7)
  {
    v25 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E0CA2E68], 0.0);
    v26 = 1.0;
    if (v25 != 1)
      v26 = 0.0;
    *a7 = v26;
  }
}

uint64_t TXSequenceBehavior::charIndexToTriggerIndex(TXSequenceBehavior *this, uint64_t a2)
{
  int ValueAsInt;
  const void *v6;
  TXTranscriptionGenerator *v7;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 29360), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt == 2)
  {
    v6 = (const void *)*((_QWORD *)this + 101);
    if (v6)
    {
      if (v7)
        return TXTranscriptionGenerator::charIndexToBlockIndex(v7, a2);
    }
    return 0;
  }
  if (ValueAsInt != 1)
  {
    if (!ValueAsInt)
      return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 101) + 720))(*((_QWORD *)this + 101), a2);
    return 0;
  }
  return TXTextLayout::getLineIndex(*((TXTextLayout **)this + 101), a2);
}

uint64_t TXSequenceBehavior::charIndexToUnitIndex(TXTextLayout **this, uint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t result;
  TXTextLayout *v5;
  TXTranscriptionGenerator *v6;

  v3 = a2;
  switch(a3)
  {
    case 0:
    case 5:
      result = TXTextLayout::getComposedCharacterIndex(this[101], a2);
      break;
    case 1:
      result = TXTextLayout::getComposedCharacterIndexWithoutSpaces(this[101], a2);
      break;
    case 2:
      result = (*(uint64_t (**)(TXTextLayout *, uint64_t))(*(_QWORD *)this[101] + 720))(this[101], a2);
      break;
    case 3:
      result = TXTextLayout::getLineIndex(this[101], a2);
      break;
    case 6:
      v5 = this[101];
      if (!v5)
        goto LABEL_9;
      if (!v6)
        goto LABEL_9;
      result = TXTranscriptionGenerator::charIndexToBlockIndex(v6, v3);
      break;
    default:
LABEL_9:
      result = 0;
      break;
  }
  return result;
}

double TXSequenceBehavior::computeStartTimeForLine(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5, double *a6, double a7)
{
  double v13;
  const CMTime *v14;
  double v15;
  int ValueAsInt;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  double v22;

  v13 = *(double *)(*a5 + 48 * a2 + 8);
  v14 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v15 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 29360), MEMORY[0x1E0CA2E68], 0.0);
  v17 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), v14, 0.0);
  v18 = TXSequenceBehavior::charIndexToTriggerIndex((TXSequenceBehavior *)a1, a3);
  v19 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29616), v14, 0.0);
  if (ValueAsInt == 1)
  {
    v20 = v19 + v18;
    if (v19 + v18 >= *(_DWORD *)(*(_QWORD *)(a1 + 808) + 19324))
    {
      if (a4)
      {
        return v13 + a7;
      }
      else if (a6)
      {
        v21 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E0CA2E68], 0.0);
        v22 = 1.0;
        if (v21 != 1)
          v22 = 0.0;
        *a6 = v22;
      }
    }
    else if (*(double *)(*a5 + 48 * v20 + 8)
            + (*(double *)(*a5 + 48 * v20 + 8) + *(double *)(*a5 + 48 * v20 + 16) - *(double *)(*a5 + 48 * v20 + 8))
            * (double)v17 <= v13 + a7)
    {
      return *(double *)(*a5 + 48 * v20 + 8)
           + (*(double *)(*a5 + 48 * v20 + 8) + *(double *)(*a5 + 48 * v20 + 16) - *(double *)(*a5 + 48 * v20 + 8))
           * (double)v17;
    }
    else
    {
      return v13 + a7;
    }
  }
  return v15;
}

double TXSequenceBehavior::computeStartTimeForAll(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4, double *a5)
{
  const void *v8;
  TXTranscriptionGenerator *v9;
  const CMTime *v10;
  double v11;
  int ValueAsInt;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *ActiveTranscriptionByLine;
  int v20;
  double v21;

  v8 = *(const void **)(a1 + 808);
  if (v8)
  else
    v9 = 0;
  v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v11 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 33056), MEMORY[0x1E0CA2E68], 0.0);
  v13 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), v10, 0.0);
  v14 = *(_QWORD *)(a1 + 808);
  v15 = *(int *)(v14 + 19324);
  if (*(_DWORD *)(v14 + 63804) + (int)v15 > ValueAsInt)
  {
    v16 = v13;
    v17 = v15 + (int)OZChannel::getValueAsInt((OZChannel *)(a1 + 29616), MEMORY[0x1E0CA2E68], 0.0);
    v18 = v17 - 1;
    if ((int)v17 - 1 < (int)v15)
    {
      ActiveTranscriptionByLine = (_QWORD *)TXTranscriptionGenerator::getActiveTranscriptionByLine(v9, a3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(ActiveTranscriptionByLine[1] - *ActiveTranscriptionByLine) >> 4) > v18)
        return *(double *)(*ActiveTranscriptionByLine + 48 * v18 + 8)
             + (*(double *)(*ActiveTranscriptionByLine + 48 * v18 + 8)
              + *(double *)(*ActiveTranscriptionByLine + 48 * v18 + 16)
              - *(double *)(*ActiveTranscriptionByLine + 48 * v18 + 8))
             * (double)v16;
    }
  }
  if (a5)
  {
    v20 = OZChannel::getValueAsInt((OZChannel *)(a1 + 28112), MEMORY[0x1E0CA2E68], 0.0);
    v21 = 1.0;
    if (v20 != 1)
      v21 = 0.0;
    *a5 = v21;
  }
  return v11;
}

double TXSequenceBehavior::computeEndTime(TXSequenceBehavior *this, double a2, CMTime *a3, int a4)
{
  double v8;
  uint64_t v9;
  void *v10;
  void **TranscriptionByUnit;
  uint64_t *v12;
  double Lifespan;
  double started;
  uint64_t v15;
  int32_t v16;
  double v17;
  double v18;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  int ValueAsInt;

  (*(void (**)(TXSequenceBehavior *))(*(_QWORD *)this + 352))(this);
  v8 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0);
  v9 = TXSequenceBehavior::charIndexToUnitIndex((TXTextLayout **)this, a2, ValueAsInt);
  v10 = (void *)*((_QWORD *)this + 101);
  if (v10)
  TranscriptionByUnit = TXTranscriptionGenerator::getTranscriptionByUnit((TXTranscriptionGenerator *)v10, &ValueAsInt);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)TranscriptionByUnit[1] - (_BYTE *)*TranscriptionByUnit) >> 4) > (int)v9)
  {
    v12 = (uint64_t *)TranscriptionByUnit;
    Lifespan = TXSequenceBehavior::getLifespan(this, TranscriptionByUnit, v9);
    started = TXSequenceBehavior::computeStartTime((uint64_t)this, a2, a3, v12, v9, 0, Lifespan);
    memset(&v22, 0, sizeof(v22));
    v15 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v15 + 336), (__n128 *)&v21);
    v16 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 29208), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v21, v16, &v22);
    v20 = v22;
    v17 = started + CMTimeGetSeconds(&v20);
    if (a4)
      v18 = 0.0;
    else
      v18 = Lifespan;
    return v17 - v18;
  }
  return v8;
}

double TXSequenceBehavior::getLifespan(_QWORD *a1, _QWORD *a2, int a3)
{
  const void *v6;
  char *v7;
  double v8;
  int ValueAsInt;
  uint64_t v10;
  int32_t v11;
  CMTime v13;
  CMTime time;

  v6 = (const void *)a1[101];
  if (v6)
  else
    v7 = 0;
  v8 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)v7 + 425, MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt == 1)
  {
    v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 336))(a1);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)&v13);
    v11 = OZChannel::getValueAsInt((OZChannel *)(v7 + 64856), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v13, v11, &time);
    return CMTimeGetSeconds(&time);
  }
  else if (!ValueAsInt && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 4) > a3)
  {
    return *(double *)(*a2 + 48 * a3 + 16);
  }
  return v8;
}

double TXSequenceBehavior::computeStartTime(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t *a4, uint64_t a5, double *a6, double a7)
{
  double Seconds;
  int ValueAsInt;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  double started;
  double v21;
  double v22;
  int v23;
  uint64_t v24;
  const CMTime *v25;
  int32_t v26;
  double v27;
  double v28;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime time;

  time = *a3;
  Seconds = CMTimeGetSeconds(&time);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E0CA2E68], 0.0);
  v17 = 0.0;
  v18 = *a4;
  v19 = *(double *)(*a4 + 48 * (int)a5 + 8);
  switch(ValueAsInt)
  {
    case 2:
      TXSequenceBehavior::computeStartTimeForWord(a1, a5, a2, a3, 0, (uint64_t)a4, a6);
      goto LABEL_5;
    case 3:
      started = TXSequenceBehavior::computeStartTimeForLine(a1, a5, a2, Seconds - v19 > a7, a4, a6, a7);
      goto LABEL_5;
    case 4:
      started = TXSequenceBehavior::computeStartTimeForAll(a1, 0, a3, v16, a6);
LABEL_5:
      v17 = started;
      break;
    case 6:
      v21 = *(double *)(v18 + 8);
      v22 = v21 + *(double *)(v18 + 16);
      v23 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), MEMORY[0x1E0CA2E68], 0.0);
      if (v21 + (v22 - v21) * (double)v23 <= v19 + a7)
        v17 = v21 + (v22 - v21) * (double)v23;
      else
        v17 = v19 + a7;
      break;
    default:
      break;
  }
  memset(&v32, 0, sizeof(v32));
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v24 + 336), (__n128 *)&v31);
  v25 = (const CMTime *)MEMORY[0x1E0CA2E68];
  v26 = OZChannel::getValueAsInt((OZChannel *)(a1 + 29208), MEMORY[0x1E0CA2E68], 0.0);
  operator*(&v31, v26, &v32);
  v30 = v32;
  v27 = CMTimeGetSeconds(&v30);
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 29768), v25, 0.0) == 1)
    v28 = v27;
  else
    v28 = 0.0;
  return v17 - v28;
}

void TXSequenceBehavior::deactivateSegmentsIfNecessary(TXSequenceBehavior *this, OZChannel *a2, double a3, int a4, int a5, double a6, CMTime *a7)
{
  const void *v8;
  char *v15;
  char *v16;
  int ValueAsInt;
  unsigned int var3;
  double v19;
  const CMTime *v20;
  int v21;
  int v22;
  unsigned int v23;

  v8 = (const void *)*((_QWORD *)this + 101);
  if (v8)
  {
    if (v15)
    {
      v16 = v15;
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 28112), MEMORY[0x1E0CA2E68], 0.0);
      if (a2)
      {
        var3 = a2->var3;
        if (var3 == 1044)
        {
          if (a3 != 1.0 || ValueAsInt)
            return;
        }
        else if (a3 != 1.0 || ValueAsInt || var3 != 1050)
        {
          return;
        }
        OZChannel::getValueAsDouble(a2, a7, 0.0);
        if (v19 == 0.0)
        {
          switch(a4)
          {
            case 6:
              v23 = TXSequenceBehavior::charIndexToUnitIndex((TXTextLayout **)this, a6, 6);
              TXTranscriptionGenerator::deactivateBlock((TXTranscriptionGenerator *)v16, v23);
              break;
            case 3:
              TXSequenceBehavior::deactivateLineSegment((TXTextLayout **)this, a6, a7, (TXTranscriptionGenerator *)v16);
              break;
            case 2:
              v20 = (const CMTime *)MEMORY[0x1E0CA2E68];
              v21 = OZChannel::getValueAsInt((OZChannel *)(v16 + 65008), MEMORY[0x1E0CA2E68], 0.0);
              v22 = OZChannel::getValueAsInt((OZChannel *)(v16 + 61800), v20, 0.0);
              if (v21 == 1 && v22)
                TXTranscriptionGenerator::deactivateWordSegment((TXTranscriptionGenerator *)v16, a5, a7);
              else
                TXSequenceBehavior::deactivateLineSegmentIfLastWordFadedOut((TXTextLayout **)this, a5, a6, a7, (TXTranscriptionGenerator *)v16);
              break;
          }
        }
      }
    }
  }
}

void TXSequenceBehavior::deactivateLineSegmentIfLastWordFadedOut(TXTextLayout **this, int a2, double a3, CMTime *a4, TXTranscriptionGenerator *a5)
{
  int LineIndex;
  const CMTime *v9;
  int v10;
  int v11;

  LineIndex = TXTextLayout::getLineIndex(this[101], a3);
  if (getIndexOfLastWordInLine(LineIndex, a5, v9) == a2)
  {
    if ((a2 & 0x80000000) == 0)
    {
      v10 = 0;
      v11 = a2 + 1;
      do
        TXTranscriptionGenerator::deactivateWordSegment(a5, v10++, a4);
      while (v11 != v10);
    }
    TXTranscriptionGenerator::deactivateLineSegment(a5, LineIndex, a4);
  }
}

void TXSequenceBehavior::deactivateLineSegment(TXTextLayout **this, double a2, CMTime *a3, TXTranscriptionGenerator *a4)
{
  int LineIndex;
  const CMTime *v7;
  int IndexOfLastWordInLine;
  int v9;
  int v10;

  LineIndex = TXTextLayout::getLineIndex(this[101], a2);
  IndexOfLastWordInLine = getIndexOfLastWordInLine(LineIndex, a4, v7);
  if ((IndexOfLastWordInLine & 0x80000000) == 0)
  {
    v9 = 0;
    v10 = IndexOfLastWordInLine + 1;
    do
      TXTranscriptionGenerator::deactivateWordSegment(a4, v9++, a3);
    while (v10 != v9);
  }
  TXTranscriptionGenerator::deactivateLineSegment(a4, LineIndex, a3);
}

uint64_t getIndexOfLastWordInLine(int a1, TXTranscriptionGenerator *this, const CMTime *a3)
{
  uint64_t v4;
  int v5;

  if (a1 + 1 >= *((_DWORD *)this + 4831))
  {
    v5 = (*(uint64_t (**)(TXTranscriptionGenerator *))(*(_QWORD *)this + 224))(this);
  }
  else
  {
    v4 = TXTextLayout::lineIndexToCharIndex(this, a1 + 1);
    v5 = (*(uint64_t (**)(TXTranscriptionGenerator *, uint64_t))(*(_QWORD *)this + 720))(this, v4);
  }
  return (v5 - 1);
}

double TXSequenceBehavior::objectIndexToPercent(TXSequenceBehavior *this, unsigned int a2)
{
  unsigned int NumObjects;
  OZChannel *v5;

  NumObjects = TXSequenceBehavior::getNumObjects(this);
  v5 = (OZChannel *)((char *)this + 31832);
  if (OZChannel::getValueAsInt(v5, MEMORY[0x1E0CA2E68], 0.0) == 2
    || OZChannel::getValueAsInt(v5, MEMORY[0x1E0CA2E68], 0.0) == 3)
  {
    NumObjects = (NumObjects + 1) >> 1;
  }
  return (float)((float)a2 / (float)NumObjects);
}

double TXSequenceBehavior::getSpreadInPercent(TXSequenceBehavior *this)
{
  unsigned int NumObjects;
  BOOL isCenterAnimation;
  char v4;
  unsigned int v5;
  double v6;

  NumObjects = TXSequenceBehavior::getNumObjects(this);
  isCenterAnimation = TXSequenceBehavior::isCenterAnimation(this);
  v4 = NumObjects > 1 && isCenterAnimation;
  v5 = NumObjects >> v4;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 31680), MEMORY[0x1E0CA2E68], 0.0);
  return v6 / (double)v5;
}

BOOL TXSequenceBehavior::isCenterAnimation(TXSequenceBehavior *this)
{
  OZChannel *v1;

  v1 = (OZChannel *)((char *)this + 31832);
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 31832), MEMORY[0x1E0CA2E68], 0.0) == 2
      || OZChannel::getValueAsInt(v1, MEMORY[0x1E0CA2E68], 0.0) == 3;
}

void TXSequenceBehavior::getCustomSpeed(TXSequenceBehavior *this, double a2)
{
  double CustomSpeedDuration;
  double Seconds;
  double v6;
  const CMTime *v7;
  double v8;
  double v9;
  double v10;
  Float64 v11;
  uint64_t v12;
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime v16[2];
  CMTime time;
  CMTime v18;
  CMTime v19;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 32800), MEMORY[0x1E0CA2E68], 0.0) == 2
    || OZChannel::getValueAsInt((OZChannel *)((char *)this + 29056), MEMORY[0x1E0CA2E68], 0.0) == 1)
  {
    CustomSpeedDuration = TXSequenceBehavior::getCustomSpeedDuration(this);
  }
  else
  {
    (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(_QWORD *)this + 608))(v16, this);
    time = v16[1];
    Seconds = CMTimeGetSeconds(&time);
    v6 = Seconds / *(double *)((*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this) + 368);
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33464), MEMORY[0x1E0CA2E68], 0.0);
    v9 = v6 - v8;
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 33056), v7, 0.0);
    CustomSpeedDuration = v9 - v10;
  }
  v11 = CustomSpeedDuration * a2;
  memset(&v15, 0, sizeof(v15));
  v12 = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), (__n128 *)&v13);
  operator*(&v13, &v14, v11);
  (*(void (**)(CMTime *__return_ptr, TXSequenceBehavior *))(*(_QWORD *)this + 608))(v16, this);
  v18 = v16[0];
  v19 = v14;
  PC_CMTimeSaferAdd(&v19, &v18, (uint64_t)&v15);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 32496), &v15, 0.0);
}

void TXSequenceBehavior::getSequenceToSelection(uint64_t a1, const CMTime *a2, int a3, char **a4, double a5)
{
  double SpreadInPercent;
  double v11;
  double v12;
  double v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  __int128 v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  SpreadInPercent = TXSequenceBehavior::getSpreadInPercent((TXSequenceBehavior *)a1);
  v11 = 1.0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E0CA2E68], 0.0) == 5)
  {
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
    v11 = v12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E0CA2E68], 0.0) == 5)
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
  else
    v13 = 1.0 / (double)TXSequenceBehavior::getNumObjects((TXSequenceBehavior *)a1);
  if (SpreadInPercent <= 0.0)
  {
    TXSequenceBehavior::makeSelection((TXSequenceBehavior *)a1, a2, a5, -1.0 - v13, 0.0001 - v13, v11, SpreadInPercent, a3, (uint64_t)&v45);
    v14 = a4[1];
    v21 = (unint64_t)a4[2];
    if ((unint64_t)v14 >= v21)
    {
      v25 = (v14 - *a4) >> 6;
      v26 = v25 + 1;
      if (!((unint64_t)(v25 + 1) >> 58))
      {
        v27 = v21 - (_QWORD)*a4;
        if (v27 >> 5 > v26)
          v26 = v27 >> 5;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFC0)
          v28 = 0x3FFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)(a4 + 2), v28);
        else
          v29 = 0;
        v30 = &v29[64 * v25];
        v31 = &v29[64 * v28];
        v39 = v46;
        *(_OWORD *)v30 = v45;
        *((_OWORD *)v30 + 1) = v39;
        v40 = v48;
        *((_OWORD *)v30 + 2) = v47;
        *((_OWORD *)v30 + 3) = v40;
        v24 = v30 + 64;
        v41 = *a4;
        v34 = a4[1];
        if (v34 == *a4)
          goto LABEL_34;
        do
        {
          v42 = *((_OWORD *)v34 - 4);
          v34 -= 64;
          *((_OWORD *)v30 - 4) = v42;
          v30 -= 64;
          v43 = *((_OWORD *)v34 + 1);
          v44 = *((_OWORD *)v34 + 3);
          *((_OWORD *)v30 + 2) = *((_OWORD *)v34 + 2);
          *((_OWORD *)v30 + 3) = v44;
          *((_OWORD *)v30 + 1) = v43;
        }
        while (v34 != v41);
        goto LABEL_33;
      }
LABEL_37:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
LABEL_17:
    v22 = v46;
    *(_OWORD *)v14 = v45;
    *((_OWORD *)v14 + 1) = v22;
    v23 = v48;
    *((_OWORD *)v14 + 2) = v47;
    *((_OWORD *)v14 + 3) = v23;
    v24 = v14 + 64;
    goto LABEL_36;
  }
  TXSequenceBehavior::makeSelection((TXSequenceBehavior *)a1, a2, a5, -1.0 - SpreadInPercent, -v13, v11, SpreadInPercent, a3, (uint64_t)&v45);
  v14 = a4[1];
  v15 = (unint64_t)a4[2];
  if ((unint64_t)v14 < v15)
    goto LABEL_17;
  v16 = (v14 - *a4) >> 6;
  v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 58)
    goto LABEL_37;
  v18 = v15 - (_QWORD)*a4;
  if (v18 >> 5 > v17)
    v17 = v18 >> 5;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFC0)
    v19 = 0x3FFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)(a4 + 2), v19);
  else
    v20 = 0;
  v30 = &v20[64 * v16];
  v31 = &v20[64 * v19];
  v32 = v46;
  *(_OWORD *)v30 = v45;
  *((_OWORD *)v30 + 1) = v32;
  v33 = v48;
  *((_OWORD *)v30 + 2) = v47;
  *((_OWORD *)v30 + 3) = v33;
  v24 = v30 + 64;
  v35 = *a4;
  v34 = a4[1];
  if (v34 == *a4)
    goto LABEL_34;
  do
  {
    v36 = *((_OWORD *)v34 - 4);
    v34 -= 64;
    *((_OWORD *)v30 - 4) = v36;
    v30 -= 64;
    v37 = *((_OWORD *)v34 + 1);
    v38 = *((_OWORD *)v34 + 3);
    *((_OWORD *)v30 + 2) = *((_OWORD *)v34 + 2);
    *((_OWORD *)v30 + 3) = v38;
    *((_OWORD *)v30 + 1) = v37;
  }
  while (v34 != v35);
LABEL_33:
  v34 = *a4;
LABEL_34:
  *a4 = v30;
  a4[1] = v24;
  a4[2] = v31;
  if (v34)
    operator delete(v34);
LABEL_36:
  a4[1] = v24;
}

void TXSequenceBehavior::getSequenceFromSelection(uint64_t a1, const CMTime *a2, int a3, char **a4, double a5)
{
  double SpreadInPercent;
  double v11;
  double v12;
  double v13;
  double v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  SpreadInPercent = TXSequenceBehavior::getSpreadInPercent((TXSequenceBehavior *)a1);
  v11 = 1.0;
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E0CA2E68], 0.0) == 5)
  {
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
    v11 = v12;
  }
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), MEMORY[0x1E0CA2E68], 0.0) == 5)
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
  else
    v13 = 1.0 / (double)TXSequenceBehavior::getNumObjects((TXSequenceBehavior *)a1);
  v14 = 0.0001 - v13;
  if (SpreadInPercent > 0.0)
    v14 = 0.0;
  TXSequenceBehavior::makeSelection((TXSequenceBehavior *)a1, a2, a5, v14, SpreadInPercent + 1.0 - v13 + 0.0001, v11, SpreadInPercent, a3, (uint64_t)&v34);
  v15 = (unint64_t)a4[2];
  v16 = a4[1];
  if ((unint64_t)v16 >= v15)
  {
    v20 = (v16 - *a4) >> 6;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 58)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v22 = v15 - (_QWORD)*a4;
    if (v22 >> 5 > v21)
      v21 = v22 >> 5;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFC0)
      v23 = 0x3FFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)(a4 + 2), v23);
    else
      v24 = 0;
    v25 = &v24[64 * v20];
    v26 = &v24[64 * v23];
    v27 = v35;
    *(_OWORD *)v25 = v34;
    *((_OWORD *)v25 + 1) = v27;
    v28 = v37;
    *((_OWORD *)v25 + 2) = v36;
    *((_OWORD *)v25 + 3) = v28;
    v19 = v25 + 64;
    v30 = *a4;
    v29 = a4[1];
    if (v29 != *a4)
    {
      do
      {
        v31 = *((_OWORD *)v29 - 4);
        v29 -= 64;
        *((_OWORD *)v25 - 4) = v31;
        v25 -= 64;
        v32 = *((_OWORD *)v29 + 1);
        v33 = *((_OWORD *)v29 + 3);
        *((_OWORD *)v25 + 2) = *((_OWORD *)v29 + 2);
        *((_OWORD *)v25 + 3) = v33;
        *((_OWORD *)v25 + 1) = v32;
      }
      while (v29 != v30);
      v29 = *a4;
    }
    *a4 = v25;
    a4[1] = v19;
    a4[2] = v26;
    if (v29)
      operator delete(v29);
  }
  else
  {
    v17 = v35;
    *(_OWORD *)v16 = v34;
    *((_OWORD *)v16 + 1) = v17;
    v18 = v37;
    *((_OWORD *)v16 + 2) = v36;
    *((_OWORD *)v16 + 3) = v18;
    v19 = v16 + 64;
  }
  a4[1] = v19;
}

void TXSequenceBehavior::getSequenceThroughSelection(uint64_t a1, const CMTime *a2, int a3, char **a4, double a5)
{
  const CMTime *v10;
  int ValueAsInt;
  double v12;
  double v13;
  double SpreadInPercent;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[2];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;

  v10 = (const CMTime *)MEMORY[0x1E0CA2E68];
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(a1 + 33208), MEMORY[0x1E0CA2E68], 0.0);
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 28368), v10, 0.0) == 5)
  {
    TXSequenceBehavior::getSpan((TXSequenceBehavior *)a1, a2);
    v13 = v12;
  }
  else
  {
    v13 = 1.0 / (double)TXSequenceBehavior::getNumObjects((TXSequenceBehavior *)a1);
  }
  SpreadInPercent = TXSequenceBehavior::getSpreadInPercent((TXSequenceBehavior *)a1);
  v15 = 1.0;
  if (ValueAsInt == 1)
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 32648), MEMORY[0x1E0CA2E68], 0.0);
  if (SpreadInPercent <= 0.0)
  {
    v16 = -0.0001 - v13;
    v17 = v15 - v13 + 0.0001;
  }
  else
  {
    v16 = -v13 - SpreadInPercent;
    v17 = v15 - v13;
  }
  TXSequenceBehavior::makeSelection((TXSequenceBehavior *)a1, a2, a5, v16, SpreadInPercent + v17, v13, SpreadInPercent, a3, (uint64_t)v41);
  v18 = v41[0];
  v19 = v41[1];
  v46 = v42;
  v47 = v43;
  v20 = v44;
  v21 = v45;
  if (ValueAsInt == 1)
  {
    OZChannel::getValueAsDouble((OZChannel *)(a1 + 32648), MEMORY[0x1E0CA2E68], 0.0);
    v20 = v22;
  }
  v23 = (unint64_t)a4[2];
  v24 = (unint64_t)a4[1];
  if (v24 >= v23)
  {
    v27 = (uint64_t)(v24 - (_QWORD)*a4) >> 6;
    v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 58)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v29 = v23 - (_QWORD)*a4;
    if (v29 >> 5 > v28)
      v28 = v29 >> 5;
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFC0)
      v30 = 0x3FFFFFFFFFFFFFFLL;
    else
      v30 = v28;
    v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)(a4 + 2), v30);
    v32 = &v31[64 * v27];
    v34 = &v31[64 * v33];
    *(_QWORD *)v32 = v18;
    *((_QWORD *)v32 + 1) = v19;
    v35 = v47;
    *((_OWORD *)v32 + 1) = v46;
    *((_OWORD *)v32 + 2) = v35;
    *((_QWORD *)v32 + 6) = v20;
    *((_QWORD *)v32 + 7) = v21;
    v26 = v32 + 64;
    v37 = *a4;
    v36 = a4[1];
    if (v36 != *a4)
    {
      do
      {
        v38 = *((_OWORD *)v36 - 4);
        v36 -= 64;
        *((_OWORD *)v32 - 4) = v38;
        v32 -= 64;
        v39 = *((_OWORD *)v36 + 1);
        v40 = *((_OWORD *)v36 + 3);
        *((_OWORD *)v32 + 2) = *((_OWORD *)v36 + 2);
        *((_OWORD *)v32 + 3) = v40;
        *((_OWORD *)v32 + 1) = v39;
      }
      while (v36 != v37);
      v36 = *a4;
    }
    *a4 = v32;
    a4[1] = v26;
    a4[2] = v34;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *(_QWORD *)v24 = v18;
    *(_QWORD *)(v24 + 8) = v19;
    v25 = v47;
    *(_OWORD *)(v24 + 16) = v46;
    *(_OWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 48) = v20;
    *(_QWORD *)(v24 + 56) = v21;
    v26 = (char *)(v24 + 64);
  }
  a4[1] = v26;
}

__n128 TXSequenceBehavior::makeSelection@<Q0>(TXSequenceBehavior *this@<X0>, const CMTime *a2@<X1>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>, int a8@<W2>, uint64_t a9@<X8>)
{
  double v14;
  double v15;
  double v16;
  __n128 result;

  if (a8)
    v14 = a5;
  else
    v14 = a4;
  if (!a8)
    a4 = a5;
  v15 = v14 + (a4 - v14) * a3;
  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 28368), MEMORY[0x1E0CA2E68], 0.0) == 5)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 28624), a2, 0.0);
    v15 = v15 + v16;
  }
  *(double *)a9 = v15;
  *(double *)(a9 + 8) = a6;
  *(_OWORD *)(a9 + 16) = xmmword_1B304EEE0;
  *(double *)(a9 + 32) = a7;
  *(_BYTE *)(a9 + 40) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)(a9 + 48) = result;
  return result;
}

void TXSequenceBehavior::getSpan(TXSequenceBehavior *this, const CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 28776), a2, 0.0);
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 28624), a2, 0.0);
}

void TXSequenceBehavior::notify(TXSequenceBehavior *this, char a2)
{
  uint64_t v3;
  OZScene *v4;
  uint64_t v5;
  OZNotificationManager *v6;
  OZNotificationManager *v7;
  OZNotificationManager *v8;
  OZChannel *v9;
  BOOL *v10;
  uint64_t v11;
  OZChannel *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  float Size;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  double v20;
  double v21;
  char *v22;
  double v23;
  double v24;
  char *v25;
  double v26;
  double v27;
  OZChannel *v28;
  double v29;
  double v30;
  int ValueAsInt;
  double v32;
  void (*v33)(char *, _QWORD, uint64_t, double);
  double v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  CMTime v38;
  OZChannel *v39;
  std::__shared_weak_count *v40;
  __n128 v41;
  CMTimeEpoch v42;
  uint64_t v43;
  std::__shared_weak_count *v44;

  if ((a2 & 8) != 0)
  {
    v3 = *((_QWORD *)this + 101);
    if (v3)
    {
      v4 = (OZScene *)(*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
      v5 = *((_QWORD *)v4 + 198);
      v6 = *(OZNotificationManager **)(v5 + 168);
      if (v6)
      {
        if (OZNotificationManager::wasChannelModified(v6, (const OZChannelBase *)((char *)this + 3768)))
          goto LABEL_7;
        v7 = *(OZNotificationManager **)(v5 + 168);
        if (!v7)
          return;
        if (OZNotificationManager::wasChannelModified(v7, (const OZChannelBase *)((char *)this + 3616)))
LABEL_7:
          TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)v3);
        v8 = *(OZNotificationManager **)(v5 + 168);
        if (v8)
        {
          v9 = (OZChannel *)((char *)this + 35472);
          if (OZNotificationManager::wasChannelModified(v8, (const OZChannelBase *)((char *)this + 35472)))
          {
            v10 = (BOOL *)this + 36048;
            if (*((_BYTE *)this + 36048) != (OZChannel::getValueAsInt((OZChannel *)((char *)this + 35472), MEMORY[0x1E0CA2E68], 0.0) == 1))
            {
              TXTextLayout::getTextObject((TXTextLayout *)v3, *(TXTextLayout **)(v3 + 19264), &v43);
              v41 = 0uLL;
              v42 = 0;
              OZScene::getCurrentTime(v4, &v41);
              v11 = *(_QWORD *)(v43 + 264);
              if (v11)
              {
                v12 = *(OZChannel **)(v11 + 8);
                v13 = *(std::__shared_weak_count **)(v11 + 16);
                v39 = v12;
                v40 = v13;
                if (v13)
                {
                  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
                  do
                    v15 = __ldxr(p_shared_owners);
                  while (__stxr(v15 + 1, p_shared_owners));
                }
              }
              else
              {
                v13 = 0;
                v12 = 0;
                v39 = 0;
                v40 = 0;
              }
              *(__n128 *)&v38.value = v41;
              v38.epoch = v42;
              Size = TXTextStyle::getSize(v12, &v38, 0.0);
              if (v13)
              {
                v17 = (unint64_t *)&v13->__shared_owners_;
                do
                  v18 = __ldaxr(v17);
                while (__stlxr(v18 - 1, v17));
                if (!v18)
                {
                  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                  std::__shared_weak_count::__release_weak(v13);
                }
              }
              v19 = (char *)this + 17056;
              OZChannel::getValueAsDouble((OZChannel *)((char *)this + 17056), MEMORY[0x1E0CA2E68], 0.0);
              v21 = v20;
              v22 = (char *)this + 17208;
              OZChannel::getValueAsDouble((OZChannel *)((char *)this + 17208), MEMORY[0x1E0CA2E68], 0.0);
              v24 = v23;
              v25 = (char *)this + 1112;
              OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1112), MEMORY[0x1E0CA2E68], 0.0);
              v27 = v26;
              v28 = (OZChannel *)((char *)this + 1264);
              OZChannel::getValueAsDouble(v28, MEMORY[0x1E0CA2E68], 0.0);
              v30 = v29;
              ValueAsInt = OZChannel::getValueAsInt(v9, MEMORY[0x1E0CA2E68], 0.0);
              v32 = Size;
              v33 = *(void (**)(char *, _QWORD, uint64_t, double))(*(_QWORD *)v19 + 712);
              if (ValueAsInt == 1)
              {
                v33(v19, MEMORY[0x1E0CA2E68], 1, v21 * 100.0 / v32);
                (*(void (**)(char *, _QWORD, uint64_t, double))(*(_QWORD *)v22 + 712))(v22, MEMORY[0x1E0CA2E68], 1, v24 * 100.0 / v32);
                v34 = 100.0;
                (*(void (**)(char *, _QWORD, uint64_t, double))(*(_QWORD *)v25 + 712))(v25, MEMORY[0x1E0CA2E68], 1, v27 * 100.0 / v32);
              }
              else
              {
                v33(v19, MEMORY[0x1E0CA2E68], 1, v21 * v32 / 100.0);
                (*(void (**)(char *, _QWORD, uint64_t, double))(*(_QWORD *)v22 + 712))(v22, MEMORY[0x1E0CA2E68], 1, v24 * v32 / 100.0);
                (*(void (**)(char *, _QWORD, uint64_t, double))(*(_QWORD *)v25 + 712))(v25, MEMORY[0x1E0CA2E68], 1, v27 * v32 / 100.0);
                v34 = v32;
                v32 = 100.0;
              }
              (*((void (**)(OZChannel *, _QWORD, uint64_t, double))v28->var0 + 89))(v28, MEMORY[0x1E0CA2E68], 1, v30 * v34 / v32);
              *v10 = OZChannel::getValueAsInt(v9, MEMORY[0x1E0CA2E68], 0.0) == 1;
              v35 = v44;
              if (v44)
              {
                v36 = (unint64_t *)&v44->__shared_owners_;
                do
                  v37 = __ldaxr(v36);
                while (__stlxr(v37 - 1, v36));
                if (!v37)
                {
                  ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                  std::__shared_weak_count::__release_weak(v35);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1B296180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXSequenceBehavior::notify(TXSequenceBehavior *this, char a2)
{
  TXSequenceBehavior::notify((TXSequenceBehavior *)((char *)this - 336), a2);
}

char *TXSequenceBehavior::finishInitializing(TXSequenceBehavior *this)
{
  OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 56));
  return TXSequenceBehavior::updateUnitsChannel(this);
}

uint64_t TXSequenceBehavior::arAddToUndo(TXSequenceBehavior *this, const PCString *a2)
{
  return (*(uint64_t (**)(char *, const PCString *))(*((_QWORD *)this + 2) + 176))((char *)this + 16, a2);
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::arAddToUndo(TXSequenceBehavior *this, const PCString *a2)
{
  return (*(uint64_t (**)(char *, const PCString *))(*((_QWORD *)this - 65) + 176))((char *)this - 520, a2);
}

uint64_t TXSequenceBehavior::arAddChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  uint64_t result;
  _BYTE *Channel;

  (*((void (**)(OZChannelBase *, _QWORD))a2->var0 + 36))(a2, 0);
  result = (*(uint64_t (**)(TXSequenceBehavior *, OZChannelBase *))(*(_QWORD *)this + 680))(this, a2);
  if (a2->var3 == 1031)
  {
    Channel = TXSequenceChannels::findChannel((TXSequenceBehavior *)((char *)this + 816), 1032, 0, 0);
    return (*(uint64_t (**)(TXSequenceBehavior *, _BYTE *))(*(_QWORD *)this + 680))(this, Channel);
  }
  return result;
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::arAddChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return TXSequenceBehavior::arAddChannel((TXSequenceBehavior *)((char *)this - 536), a2);
}

uint64_t TXSequenceBehavior::arRemoveChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  uint64_t result;
  _BYTE *Channel;

  (*((void (**)(OZChannelBase *, _QWORD))a2->var0 + 36))(a2, 0);
  result = (*(uint64_t (**)(TXSequenceBehavior *, OZChannelBase *))(*(_QWORD *)this + 696))(this, a2);
  if (a2->var3 == 1031)
  {
    Channel = TXSequenceChannels::findChannel((TXSequenceBehavior *)((char *)this + 816), 1032, 0, 0);
    return (*(uint64_t (**)(TXSequenceBehavior *, _BYTE *))(*(_QWORD *)this + 696))(this, Channel);
  }
  return result;
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::arRemoveChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return TXSequenceBehavior::arRemoveChannel((TXSequenceBehavior *)((char *)this - 536), a2);
}

_QWORD *TXSequenceBehavior::arGetChannelList(uint64_t a1, char **a2)
{
  _QWORD *result;
  char *v5;
  char *v6;
  int64_t v7;

  TXSequenceChannels::getChannelList(a1 + 816, a2);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
  if (result && *(_DWORD *)(result[198] + 324) == 1)
  {
    v6 = *a2;
    v5 = a2[1];
    if (*a2 != v5)
    {
      while (*(_QWORD *)v6 != a1 + 26816)
      {
        v6 += 8;
        if (v6 == v5)
        {
          v6 = a2[1];
          break;
        }
      }
    }
    if (v6 != v5)
    {
      v7 = v5 - (v6 + 8);
      if (v5 != v6 + 8)
        result = memmove(v6, v6 + 8, v5 - (v6 + 8));
      a2[1] = &v6[v7];
    }
  }
  return result;
}

_QWORD *`non-virtual thunk to'TXSequenceBehavior::arGetChannelList(uint64_t a1, char **a2)
{
  return TXSequenceBehavior::arGetChannelList(a1 - 536, a2);
}

uint64_t TXSequenceBehavior::arGetObjectManipulator(TXSequenceBehavior *this)
{
  OZChannelBase *v1;

  v1 = (OZChannelBase *)(*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 312))(this);
  return OZChannelBase::getObjectManipulator(v1);
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::arGetObjectManipulator(TXSequenceBehavior *this)
{
  OZChannelBase *v1;

  v1 = (OZChannelBase *)(*(uint64_t (**)(char *))(*((_QWORD *)this - 67) + 312))((char *)this - 536);
  return OZChannelBase::getObjectManipulator(v1);
}

BOOL TXSequenceBehavior::arHideChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  uint64_t v3;
  OZFactory *var1;
  __int128 v6;

  if (a2->var3 == 1032)
    return 1;
  v3 = *((_QWORD *)this + 101);
  if (v3)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 296))(v3))
      return ((a2->var3 - 1007) & 0xFFFFFFFB) == 0;
    var1 = a2->var1;
    v6 = xmmword_1B3056CC0;
    if ((OZFactory::isKindOfClass((unint64_t)var1, (int32x4_t *)&v6) & 1) != 0)
      return 1;
  }
  return 0;
}

BOOL `non-virtual thunk to'TXSequenceBehavior::arHideChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return TXSequenceBehavior::arHideChannel((TXSequenceBehavior *)((char *)this - 536), a2);
}

BOOL TXSequenceBehavior::arDisableChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return a2->var3 == 9998;
}

BOOL `non-virtual thunk to'TXSequenceBehavior::arDisableChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return a2->var3 == 9998;
}

uint64_t TXSequenceBehavior::arAddSeparatorAfterChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return (a2->var3 - 1000 < 0x2F) & (0x400000100001uLL >> (LOBYTE(a2->var3) + 24));
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::arAddSeparatorAfterChannel(TXSequenceBehavior *this, OZChannelBase *a2)
{
  return (a2->var3 - 1000 < 0x2F) & (0x400000100001uLL >> (LOBYTE(a2->var3) + 24));
}

uint64_t TXSequenceBehavior::getLockDependencies(uint64_t result, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t *v8;
  _QWORD *i;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;

  v7 = result;
  v8 = (uint64_t *)(result + 544);
  for (i = *(_QWORD **)(a4 + 8); i; i = (_QWORD *)*i)
  {
    v10 = i[4];
    if ((unint64_t)v8 >= v10)
    {
      if (v10 >= (unint64_t)v8)
        return result;
      ++i;
    }
  }
  v13 = (unint64_t *)(result + 544);
  std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)a4, (unint64_t *)&v13, (uint64_t *)&v13);
  if (a2)
  {
    PCDirectedGraph<OZLocking *>::addEdge(a3, a2, (uint64_t)v8);
  }
  else
  {
    v12 = v8;
    v13 = (unint64_t *)&v12;
    std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a3, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13);
  }
  v11 = *(_QWORD *)(v7 + 808);
  if (v11)
    OZLocking::getLockDependenciesForElement((char *)(v11 + 200), (unint64_t)v8, a3, a4);
  v13 = (unint64_t *)v8;
  return std::__tree<OZLocking *>::__erase_unique<OZLocking *>(a4, (unint64_t *)&v13);
}

uint64_t *PCDirectedGraph<OZLocking *>::addEdge(uint64_t **a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;

  v5 = a3;
  v6 = a2;
  v7 = &v6;
  v3 = std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(a1, &v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  return std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>((uint64_t **)v3 + 5, (unint64_t *)&v5, &v5);
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::getLockDependencies(uint64_t a1, unint64_t a2, uint64_t **a3, uint64_t a4)
{
  return TXSequenceBehavior::getLockDependencies(a1 - 544, a2, a3, a4);
}

uint64_t TXSequenceBehavior::getLockingGroups(TXSequenceBehavior *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this);
  if (result)
    return (*(uint64_t (**)(TXSequenceBehavior *))(*(_QWORD *)this + 336))(this) + 1784;
  return result;
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::getLockingGroups(TXSequenceBehavior *this)
{
  char *v1;
  uint64_t result;

  v1 = (char *)this - 544;
  result = (*(uint64_t (**)(char *))(*((_QWORD *)this - 68) + 336))((char *)this - 544);
  if (result)
    return (*(uint64_t (**)(char *))(*(_QWORD *)v1 + 336))(v1) + 1784;
  return result;
}

void TXSequenceCurveNode::~TXSequenceCurveNode(TXSequenceCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

void TXSequenceCurveNode::solveNode(TXSequenceCurveNode *this, const CMTime *a2, double a3, double a4)
{
  TXSequenceBehavior *v7;
  CMTime v8;

  v7 = (TXSequenceBehavior *)*((_QWORD *)this + 4);
  (*(void (**)(CMTime *__return_ptr))(**((_QWORD **)this + 2) + 336))(&v8);
  TXSequenceBehavior::getValue(v7, &v8, a3, *((OZChannel **)this + 5), a4);
}

uint64_t OZBehavior::willBake(uint64_t result)
{
  *(_BYTE *)(result + 320) = 1;
  return result;
}

uint64_t OZBehavior::didBake(uint64_t this)
{
  *(_BYTE *)(this + 320) = 0;
  return this;
}

void OZBehavior::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 56), a2, a3);
}

_QWORD *OZBehavior::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((_QWORD *)(a1 + 56), a2);
}

void `non-virtual thunk to'OZBehavior::renumberIDs(uint64_t a1, uint64_t **a2, int a3)
{
  OZChannelObjectRoot::renumberIDs((OZChannelBase *)(a1 + 40), a2, a3);
}

_QWORD *`non-virtual thunk to'OZBehavior::updateReferenceIDs(uint64_t a1, _QWORD *a2)
{
  return OZChannelObjectRoot::updateReferenceIDs((_QWORD *)(a1 + 40), a2);
}

uint64_t `non-virtual thunk to'TXSequenceBehavior::getLockingID(TXSequenceBehavior *this)
{
  return *((unsigned int *)this - 116);
}

void OZChannelUint32::OZChannelUint32(OZChannelUint32 *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *OZChannelUint32_FactoryBase;
  OZChannelUint32 *v17;
  OZChannelUint32 *OZChannelUint32Info;
  OZChannelInfo *var17;
  OZChannelImpl *var15;

  OZChannelUint32_FactoryBase = (OZFactory *)getOZChannelUint32_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelUint32_FactoryBase, a3, a4, a5, a6, a7, a8);
  this->var0 = (void **)&off_1E6551AF8;
  this->var2 = (void **)&unk_1E6551E58;
  OZChannelUint32Info = (OZChannelUint32 *)OZChannelUint32::createOZChannelUint32Info(v17);
  if (a8)
  {
    var17 = this->var17;
  }
  else
  {
    var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
    this->var17 = (OZChannelInfo *)OZChannelUint32::_OZChannelUint32Info;
  }
  this->var16 = var17;
  OZChannelUint32::createOZChannelUint32Impl(OZChannelUint32Info);
  if (a7)
  {
    var15 = this->var15;
  }
  else
  {
    var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
    this->var15 = (OZChannelImpl *)OZChannelUint32::_OZChannelUint32Impl;
  }
  this->var14 = var15;
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  OZChannel::setInitialValue((OZChannel *)this, a2, 0);
}

void sub_1B2961F28(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

long double PCRandom::noise(PCRandom *this, double a2, double a3, unsigned int a4, int a5, double a6, double a7)
{
  double v7;
  int v8;
  double v9;
  double v10;
  int v11;
  BOOL v12;
  double v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  double v19;
  double v20;
  int v21;
  long double v22;

  v7 = a6;
  v8 = -1640531527;
  v9 = (a3 + a3) * a2;
  v10 = (a7 + a7) * a2;
  v11 = (int)v9;
  if ((a5 & 0xFFFFFFFD) != 0 || (v11 ? (v12 = v9 < v10) : (v12 = 0), v13 = a6, v12))
  {
    v14 = -32;
    v15 = -1640531527;
    v16 = this;
    v17 = a4;
    do
    {
      v16 += (v11 + 16 * v17) ^ (v15 + v17) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                             + (v17 >> 5));
      v17 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * v16) ^ (v15 + v16) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (v16 >> 5));
      v15 -= 1640531527;
      v18 = __CFADD__(v14++, 1);
    }
    while (!v18);
    v13 = (double)(int)(v17 ^ v16) / 2147483650.0;
  }
  if ((a5 - 3) < 0xFFFFFFFE || ceil(v9) < v10)
  {
    v21 = -32;
    do
    {
      LODWORD(this) = ((v11 + 1 + 16 * a4) ^ (v8 + a4) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK1
                                                        + (a4 >> 5)))
                    + (_DWORD)this;
      a4 += (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK2 + 16 * (_DWORD)this) ^ (v8 + (_DWORD)this) ^ (PCRandom::hashTEA(unsigned int,unsigned int,unsigned int)::kK3 + (this >> 5));
      v8 -= 1640531527;
      v18 = __CFADD__(v21++, 1);
    }
    while (!v18);
    v7 = (double)(int)(a4 ^ this) / 2147483650.0;
    v19 = (double)v11;
    v20 = 1.0;
  }
  else
  {
    v19 = (double)v11;
    v20 = v10 - (double)v11;
  }
  v22 = cos((v9 - v19) / v20 * 3.14159265);
  return v7 * ((1.0 - v22) * 0.5) + v13 * (1.0 - (1.0 - v22) * 0.5);
}

uint64_t *std::__tree<OZLocking *>::__emplace_unique_key_args<OZLocking *,OZLocking *>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t *std::__tree<std::__value_type<OZLocking *,std::set<OZLocking *>>,std::__map_value_compare<OZLocking *,std::__value_type<OZLocking *,std::set<OZLocking *>>,std::less<OZLocking *>,true>,std::allocator<std::__value_type<OZLocking *,std::set<OZLocking *>>>>::__emplace_unique_key_args<OZLocking *,std::piecewise_construct_t const&,std::tuple<OZLocking * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t std::__tree<OZLocking *>::__erase_unique<OZLocking *>(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void TXHelperFunctions::GetTextObjectContainingCharIndex(TXHelperFunctions *this@<X0>, TXTextLayout *a2@<X1>, int a3@<W2>, unint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t **v11;
  OZScene **v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  OZScene **v33;

  v11 = (uint64_t **)((char *)this + 58824);
  if (a3 && Li3DEngineScene::sceneManager(this))
  {
    v12 = (OZScene **)Li3DEngineScene::sceneManager(this);
    OZLockingGroup::acquireReadLocks(v12);
  }
  *a5 = 0;
  a5[1] = 0;
  if (!a4)
    goto LABEL_22;
  v13 = *v11;
  v14 = (char *)v11[1] - (char *)*v11;
  if (v14)
  {
    v15 = v14 >> 4;
    v16 = *a4;
    if (v15 <= 1)
      v17 = 1;
    else
      v17 = v15;
    v18 = v16 + v15;
    while (1)
    {
      v19 = v16 % v15;
      v20 = v13[2 * (v16 % v15)];
      v21 = *(unsigned int *)(v20 + 736);
      v22 = (*(_DWORD *)(v20 + 740) + v21);
      if (v21 <= (unint64_t)a2 && v22 > (unint64_t)a2)
        break;
      v19 = v18 % v15;
      v24 = v13[2 * (v18 % v15)];
      v25 = *(unsigned int *)(v24 + 736);
      v26 = (*(_DWORD *)(v24 + 740) + v25);
      if (v25 <= (unint64_t)a2 && v26 > (unint64_t)a2)
        break;
      ++v16;
      --v18;
      if (!--v17)
        goto LABEL_21;
    }
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](a5, &v13[2 * v19]);
    *a4 = v19;
  }
LABEL_21:
  if (!*a5)
  {
LABEL_22:
    v28 = *v11;
    v29 = v11[1];
    if (*v11 != v29)
    {
      v30 = 0;
      while (1)
      {
        v31 = *(unsigned int *)(*v28 + 736);
        if (v31 <= (unint64_t)a2 && (*(_DWORD *)(*v28 + 740) + v31) > (unint64_t)a2)
          break;
        ++v30;
        v28 += 2;
        if (v28 == v29)
          goto LABEL_32;
      }
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](a5, v28);
      if (a4)
        *a4 = v30;
    }
  }
LABEL_32:
  if (a3)
  {
    if (Li3DEngineScene::sceneManager(this))
    {
      v33 = (OZScene **)Li3DEngineScene::sceneManager(this);
      OZLockingGroup::releaseReadLocks(v33);
    }
  }
}

void sub_1B296244C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void TXHelperFunctions::SetCaretMovementMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned int v6;
  int v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *__p;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  void *__dst;
  uint64_t v31;

  v29 = 0;
  __dst = 0;
  v31 = 0;
  v2 = *a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(_DWORD *)(a1 + 960);
    while (1)
    {
      v26 = 0;
      v27 = 0;
      v28 = 0;
      std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&v26, *(const void **)(v2 + 24 * v5), *(_QWORD *)(v2 + 24 * v5 + 8), (uint64_t)(*(_QWORD *)(v2 + 24 * v5 + 8) - *(_QWORD *)(v2 + 24 * v5)) >> 3);
      v8 = (char *)v26;
      v9 = v27;
      if (v27 != v26)
        break;
      v21 = (v27 - (_BYTE *)v26) >> 3;
LABEL_27:
      std::vector<unsigned long>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned long *>,std::__wrap_iter<unsigned long *>>((uint64_t)&v29, (uint64_t)__dst, v8, v9, v21);
      if (v26)
      {
        v27 = (char *)v26;
        operator delete(v26);
      }
      v2 = *a2;
      v5 = ++v6;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v6)
      {
        if (v29)
        {
          __dst = v29;
          operator delete(v29);
        }
        return;
      }
    }
    v10 = 0;
    v11 = v6 + 1;
    v12 = v6 - 1;
    v13 = 1;
    while (1)
    {
      v14 = *(_QWORD *)&v8[8 * v10];
      if (v13 != 1)
      {
        v16 = *(_QWORD *)&v8[8 * v13 - 16];
        goto LABEL_15;
      }
      if (v7)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) < v6 + 2)
          goto LABEL_14;
        v15 = *a2 + 24 * v11;
        __p = 0;
        v24 = 0;
        v25 = 0;
        std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *(const void **)v15, *(_QWORD *)(v15 + 8), (uint64_t)(*(_QWORD *)(v15 + 8) - *(_QWORD *)v15) >> 3);
      }
      else
      {
        if (!v6)
        {
LABEL_14:
          v16 = 0xFFFFFFFFLL;
          goto LABEL_15;
        }
        v17 = *a2 + 24 * v12;
        v24 = 0;
        v25 = 0;
        __p = 0;
        std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *(const void **)v17, *(_QWORD *)(v17 + 8), (uint64_t)(*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 3);
      }
      v16 = *(v24 - 1);
      if (__p)
      {
        v24 = __p;
        operator delete(__p);
      }
LABEL_15:
      if (((v27 - (_BYTE *)v26) >> 3) - 1 == v10)
      {
        if (v7)
        {
          if (!v6)
            goto LABEL_23;
          v18 = *a2 + 24 * v12;
          v24 = 0;
          v25 = 0;
          __p = 0;
          std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *(const void **)v18, *(_QWORD *)(v18 + 8), (uint64_t)(*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 3);
        }
        else
        {
          v20 = *a2;
          if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v11)
          {
LABEL_23:
            v19 = 0xFFFFFFFFLL;
            goto LABEL_24;
          }
          __p = 0;
          v24 = 0;
          v25 = 0;
          std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(&__p, *(const void **)(v20 + 24 * v11), *(_QWORD *)(v20 + 24 * v11 + 8), (uint64_t)(*(_QWORD *)(v20 + 24 * v11 + 8) - *(_QWORD *)(v20 + 24 * v11)) >> 3);
        }
        v19 = *(_QWORD *)__p;
        v24 = __p;
        operator delete(__p);
      }
      else
      {
        v19 = *((_QWORD *)v26 + v13);
      }
LABEL_24:
      TXParagraphStyle::setCaretPositionPair(a1, v14, v16, v19);
      v10 = v13;
      v8 = (char *)v26;
      v9 = v27;
      v21 = (v27 - (_BYTE *)v26) >> 3;
      if (v21 <= v13++)
        goto LABEL_27;
    }
  }
}

void sub_1B29626FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void TXTextLayoutBehaviorNode::~TXTextLayoutBehaviorNode(TXTextLayoutBehaviorNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double TXTextLayoutBehaviorNode::solveNode(TXTextLayoutBehaviorNode *this, const CMTime *a2, __n128 a3, __n128 a4)
{
  _BYTE *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  OZChannelBase *v9;
  int v11;
  BOOL v12;
  double v13;
  double v14;

  v5 = (_BYTE *)*((_QWORD *)this + 4);
  if (v5[320])
  {
    v6 = a4.n128_f64[0];
    if (!(*(unsigned int (**)(_BYTE *, const CMTime *, double))(*(_QWORD *)v5 + 272))(v5, a2, a3.n128_f64[0]))return v6;
    v5 = (_BYTE *)*((_QWORD *)this + 4);
  }
  v7 = (*(uint64_t (**)(_BYTE *, const CMTime *, __n128, __n128))(*(_QWORD *)v5 + 712))(v5, a2, a3, a4);
  v8 = *((_QWORD *)this + 4);
  if (!v8)
    return OZChannel::getInitialValue((OZChannel *)(v7 + 20464));
  v9 = (OZChannelBase *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 312))(v8);
  if (!OZChannelBase::isEnabled(v9, 0, 1)
    || (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 320))(*((_QWORD *)this + 4)) + 1024) & 2) != 0
    || ((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 768))(*((_QWORD *)this + 4)) & 1) != 0)
  {
    return OZChannel::getInitialValue((OZChannel *)(v7 + 20464));
  }
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 680))(*((_QWORD *)this + 4));
  v12 = !TXTextLayout::isVerticalLayout((TXTextLayout *)v7);
  if (v11 == 1)
  {
    v13 = 3.0;
    v14 = 4.0;
  }
  else
  {
    v13 = 4.0;
    v14 = 3.0;
  }
  if (v12)
    return v13;
  else
    return v14;
}

void TXTextScrollCurveNode::TXTextScrollCurveNode(TXTextScrollCurveNode *this, TXTextScrollBehavior *a2, OZChannel *a3, int a4)
{
  uint64_t v7;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2, a3);
  *(_QWORD *)v7 = &off_1E650BA50;
  *(_QWORD *)(v7 + 32) = a2;
  PCMutex::PCMutex((PCMutex *)(v7 + 48), 1);
  *((_QWORD *)this + 6) = &unk_1E64E2000;
  *((_DWORD *)this + 10) = a4;
  *((_BYTE *)this + 120) = 0;
}

void sub_1B29628E0(_Unwind_Exception *a1)
{
  OZEaseInInterpolator *v1;

  OZEaseInInterpolator::~OZEaseInInterpolator(v1);
  _Unwind_Resume(a1);
}

void TXTextScrollCurveNode::TXTextScrollCurveNode(TXTextScrollCurveNode *this, const TXTextScrollCurveNode *a2)
{
  uint64_t v3;

  OZBehaviorCurveNode::OZBehaviorCurveNode(this, a2);
  *(_QWORD *)v3 = &off_1E650BA50;
  PCMutex::PCMutex((PCMutex *)(v3 + 48), 1);
  *((_QWORD *)this + 6) = &unk_1E64E2000;
  *((_BYTE *)this + 120) = 0;
}

void sub_1B2962940(_Unwind_Exception *a1)
{
  OZEaseInInterpolator *v1;

  OZEaseInInterpolator::~OZEaseInInterpolator(v1);
  _Unwind_Resume(a1);
}

void TXTextScrollCurveNode::~TXTextScrollCurveNode(TXTextScrollCurveNode *this)
{
  *(_QWORD *)this = &off_1E650BA50;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 48));
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
}

{
  *(_QWORD *)this = &off_1E650BA50;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 48));
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double TXTextScrollCurveNode::solveNode(TXTextScrollCurveNode *this, const CMTime *a2, double a3, double a4)
{
  OZChannelBase *v7;
  CMTime v9;

  v7 = (OZChannelBase *)(*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 4) + 312))(*((_QWORD *)this + 4), a3);
  if (OZChannelBase::isEnabled(v7, 0, 1)
    && (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 320))(*((_QWORD *)this + 4)) + 1024) & 2) == 0)
  {
    v9 = *a2;
    return TXTextScrollCurveNode::getOffset((TXTextScrollBehavior **)this, &v9) + a4;
  }
  return a4;
}

double TXTextScrollCurveNode::getOffset(TXTextScrollBehavior **this, CMTime *a2)
{
  PCMutex *v4;
  double OffsetPreInception;
  TXTextScrollBehavior *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  OZMEChannelTimeConverter *v10;
  _QWORD *CurrentConversion;
  uint64_t v12;
  __n128 FrameDuration;
  double v14;
  double Seconds;
  double v16;
  const void *v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  int v23;
  _BOOL4 v24;
  Float64 v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  uint64_t (*v30)(uint64_t);
  double v31;
  double v32;
  double v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  BOOL v39;
  double v40;
  double v41;
  double v42;
  int v43;
  void (*v44)(void);
  double v45;
  double v46;
  double v47;
  double v48;
  OZChannel *v49;
  double v50;
  double v51;
  double v52;
  int v53;
  TXTextScrollBehavior *v54;
  double v55;
  uint64_t v56;
  double v57;
  double v58;
  double v59;
  int v60;
  double (*v61)(void);
  double v62;
  double v63;
  double v64;
  double v65;
  unsigned int v66;
  double *v67;
  TXTextScrollBehavior *v68;
  double v69;
  uint64_t v70;
  TXTextScrollBehavior *v71;
  double v72;
  double v74;
  double v75;
  double v76;
  OZRenderState *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double InitialValue;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  __int128 v114;
  CMTimeEpoch v115;
  __int128 v116;
  CMTimeEpoch v117;
  __int128 v118;
  CMTimeEpoch epoch;
  float64x2_t v120;
  double v121;
  __int128 v122;
  CMTime v123;
  __int128 v124;
  uint64_t v125;
  double v126[3];
  OZRenderState v127;
  __int128 v128;
  float64x2_t v129;
  double v130;
  CMTime time2;
  __int128 v132;
  double v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  double v139;
  CMTime v140;
  CMTime v141;
  OZRenderState time1;
  CMTime v143;
  __int128 v144;
  uint64_t v145;
  CMTime v146;
  CMTime v147;
  CMTime v148;
  CMTime v149;
  CMTime v150;
  __int128 v151;
  int64_t v152;
  __int128 v153;
  int64_t v154;
  CMTime v155;
  CMTime time;
  CMTime v157;
  __n128 v158;
  uint64_t v159;
  CMTime v160;
  CMTime v161;
  char *v162;
  char v163;

  v4 = (PCMutex *)(this + 6);
  v162 = (char *)(this + 6);
  PCMutex::lock((PCMutex *)(this + 6));
  v163 = 1;
  if (TXTextScrollBehavior::getComputeOffsetForPreInceptionProjects(this[4]))
  {
    v161 = *a2;
    OffsetPreInception = TXTextScrollCurveNode::getOffsetPreInception((TXTextScrollCurveNode *)this, &v161);
    goto LABEL_78;
  }
  v6 = this[4];
  if (*((_BYTE *)v6 + 320))
  {
    OffsetPreInception = 0.0;
    if (!(*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)v6 + 272))(v6))
      goto LABEL_78;
    v6 = this[4];
  }
  v7 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)v6 + 712))(v6);
  v8 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 720))(this[4]);
  OffsetPreInception = 0.0;
  if (v7 | v8 && !*((_BYTE *)this + 120))
  {
    *((_BYTE *)this + 120) = 1;
    memset(&v160, 0, sizeof(v160));
    v9 = *(_QWORD *)(*((_QWORD *)this[4] + 47) + 32);
    v10 = (OZMEChannelTimeConverter *)(*(_QWORD *(**)(CMTime *__return_ptr, uint64_t, CMTime *))(*(_QWORD *)v9 + 336))(&v160, v9, a2);
    CurrentConversion = OZMEChannelTimeConverter::GetCurrentConversion(v10);
    v158 = 0uLL;
    v159 = 0;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8);
    FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), &v158);
    if (CurrentConversion)
    {
      *(_OWORD *)&time1.var0.var0 = *(_OWORD *)((char *)CurrentConversion + 76);
      time1.var0.var3 = *(_QWORD *)((char *)CurrentConversion + 92);
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CMTimeCompare((CMTime *)&time1, &time2))
      {
        FrameDuration = *(__n128 *)((char *)CurrentConversion + 76);
        v158 = FrameDuration;
        v159 = *(_QWORD *)((char *)CurrentConversion + 92);
      }
    }
    v14 = *(double *)((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v8 + 272))(v8, FrameDuration) + 368);
    memset(&v157, 0, sizeof(v157));
    if (CurrentConversion)
      v157 = *(CMTime *)((char *)CurrentConversion + 52);
    else
      CMTimeMake(&v157, 1, 1);
    operator*((__int128 *)&v160.value, (uint64_t)&v157, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    operator*((__int128 *)&v160.value, (uint64_t)&v157, (uint64_t)&v155);
    v16 = CMTimeGetSeconds(&v155);
    v17 = *(const void **)(v8 + 960);
    if (v17
    {
      v19 = 166;
    }
    else
    {
      v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8);
      v19 = 12;
    }
    v20 = (*(double (**)(void))(*v18 + 8 * v19))();
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)this[4] + 608))(&v151);
    memset(&v150, 0, sizeof(v150));
    *(_OWORD *)&time1.var0.var0 = v151;
    time1.var0.var3 = v152;
    v21 = operator*((__int128 *)&time1.var0.var0, (uint64_t)&v157, (uint64_t)&v150);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, _QWORD, double))(*((_QWORD *)this[4] + 2) + 24))((uint64_t)this[4] + 16, 1, 0, v21))goto LABEL_77;
    v149 = v150;
    v22 = floor(v14 * Seconds + 0.0000001);
    if (v22 < v14 * CMTimeGetSeconds(&v149))
      goto LABEL_77;
    v23 = *((_DWORD *)this + 10);
    if (v23 != (*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 680))(this[4]))
      goto LABEL_77;
    if (v7)
    {
      if ((TXTextLayout::getEnableScroll((TXTextLayout *)v7) & 1) != 0)
      {
LABEL_77:
        *((_BYTE *)this + 120) ^= 1u;
        goto LABEL_78;
      }
      v24 = *(_DWORD *)(TXTextLayout::getParagraphStyleAtIndex((TXTextLayout *)v7, 0) + 960) == 1
         || TXTextLayout::isVerticalLayout((TXTextLayout *)v7);
    }
    else
    {
      v24 = 0;
    }
    memset(&v148, 0, sizeof(v148));
    *(_OWORD *)&time1.var0.var0 = v153;
    time1.var0.var3 = v154;
    operator*((__int128 *)&time1.var0.var0, (uint64_t)&v157, (uint64_t)&v148);
    memset(&v147, 0, sizeof(v147));
    OZChannel::getValueAsDouble((OZChannel *)((char *)this[4] + 3088), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v157, &v147, v25);
    operator*((__int128 *)&v158, (uint64_t)&v147, (uint64_t)&v143);
    time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v148;
    time2 = v143;
    PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v144);
    operator/(&v144, (uint64_t)&v158, (uint64_t)&v146);
    v26 = CMTimeGetSeconds(&v146) + -1.0;
    if (v26 > 0.0)
    {
      v113 = 1.0;
      if (*(_BYTE *)(theApp + 81))
      {
        v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272))(v8);
        if (v27)
          v113 = (double)(int)OZSceneSettings::getHostAppProjectHeight((OZSceneSettings *)(v27 + 336))
               / (float)*(int *)(v27 + 348);
      }
      OZRenderState::OZRenderState(&time1);
      time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v160;
      TXTextScrollBehavior::getContentBounds(this[4], (CMTime *)&time1, (uint64_t)&time2);
      v109 = *(double *)&time2.timescale;
      v110 = *(double *)&time2.value;
      v28 = *(double *)&time2.epoch;
      v29 = *(double *)&v132;
      v30 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 272);
      if (*((_DWORD *)this + 10) == 1)
      {
        v31 = (double)*(int *)(v30(v8) + 348);
      }
      else
      {
        v32 = (double)*(int *)(v30(v8) + 344);
        v33 = 1.0;
        if (v7)
          v33 = v20;
        v31 = v33 * v32;
      }
      v111 = v26;
      v34 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 704))(this[4]);
      v141 = v150;
      v35 = CMTimeGetSeconds(&v141);
      v140 = v148;
      v36 = CMTimeGetSeconds(&v140);
      v37 = v14 * v16;
      v38 = vabdd_f64(v22, v14 * v16 + -0.5);
      if (v34)
        v39 = v38 < 0.1;
      else
        v39 = 0;
      if (v39)
        v37 = v22;
      v40 = v37 - v14 * v35;
      v41 = v14 * v36;
      if (v40 <= v41)
        v41 = v40;
      v112 = v41;
      v42 = 0.0;
      if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 688))(this[4]) == 2)
      {
        v43 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 680))(this[4]);
        v44 = *(void (**)(void))(*(_QWORD *)this[4] + 728);
        if (v43 == 1)
          v44();
        else
          v45 = -((double (*)(void))v44)();
        v42 = v45 + 0.0;
      }
      v46 = v113 * v28;
      v47 = v113 * v29;
      v48 = v113 * v31;
      if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 688))(this[4]) == 2
        || !(*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 776))(this[4]))
      {
        if (*((_DWORD *)this + 10))
          v52 = v113 * v29;
        else
          v52 = v113 * v28;
      }
      else
      {
        time1.var4 = 0;
        v139 = 1.0;
        v136 = 0x3FF0000000000000;
        v133 = 1.0;
        time2.value = 0x3FF0000000000000;
        *(_OWORD *)&time2.timescale = 0u;
        v132 = 0u;
        v134 = 0u;
        v135 = 0u;
        v137 = 0u;
        v138 = 0u;
        v49 = (OZChannel *)(v8 + 1352);
        if (*((_DWORD *)this + 10))
        {
          OZChannel::getValueAsDouble(v49, &v160, 0.0);
          v51 = v50;
          InitialValue = OZChannel::getInitialValue((OZChannel *)(v8 + 1504));
        }
        else
        {
          v51 = OZChannel::getInitialValue(v49);
          OZChannel::getValueAsDouble((OZChannel *)(v8 + 1504), &v160, 0.0);
          InitialValue = v74;
        }
        OZChannel::getValueAsDouble((OZChannel *)(v8 + 1952), &v160, 0.0);
        v76 = v75;
        v144 = 0uLL;
        v145 = 0;
        memset(&v143, 0, sizeof(v143));
        v129 = 0uLL;
        v130 = 0.0;
        v128 = 0uLL;
        (*(void (**)(uint64_t, __int128 *, OZRenderState *, _QWORD))(*(_QWORD *)v8 + 1320))(v8, &v144, &time1, 0);
        if (!v7)
          *(double *)&v144 = *(double *)&v144 / v20;
        OZTransformNode::getRotation(v8, &v143, (CMTime *)&time1);
        OZTransformNode::getPivot(v8, &v129, (CMTime *)&time1);
        OZTransformNode::getShear((OZTransformNode *)v8, (double *)&v128, (double *)&v128 + 1, (const CMTime *)&time1);
        v129 = vmulq_n_f64(v129, v113);
        v130 = v113 * v130;
        v77 = OZRenderState::OZRenderState(&v127, &time1);
        v126[0] = v113 * v51;
        v126[1] = v113 * InitialValue;
        v126[2] = v113 * v76;
        v124 = v144;
        v125 = v145;
        v123 = v143;
        v122 = v128;
        v120 = v129;
        v121 = v130;
        TXTextScrollCurveNode::getTransformMatrixForElement((uint64_t)v77, (__int128 *)&time2.value, (_QWORD *)v8, (uint64_t)&v127, v126, (double *)&v124, (double *)&v123.value, (float64_t *)&v122, v120.f64, 0);
        v78 = v113 * v109 + v47;
        v79 = v113 * v110 + v46;
        v80 = v113 * v110 * *((double *)&v137 + 1);
        v81 = v139 + v80 + v78 * *(double *)&v138;
        v82 = v113 * v110 * *(double *)&time2.value;
        v83 = (*(double *)&v132 + v82 + v78 * *(double *)&time2.timescale) / v81;
        v84 = v139 + v79 * *((double *)&v137 + 1) + v78 * *(double *)&v138;
        v85 = (*(double *)&v132 + v79 * *(double *)&time2.value + v78 * *(double *)&time2.timescale) / v84;
        v86 = v113 * v109 * *(double *)&v138;
        v87 = v139 + v80 + v86;
        v88 = v113 * v109 * *(double *)&time2.timescale;
        v89 = (*(double *)&v132 + v82 + v88) / v87;
        v90 = v139 + v79 * *((double *)&v137 + 1) + v86;
        v91 = v79 * *(double *)&time2.value + v88;
        v92 = (*(double *)&v132 + v91) / v90;
        if (v92 <= v85)
          v93 = (*(double *)&v132 + v91) / v90;
        else
          v93 = (*(double *)&v132 + v79 * *(double *)&time2.value + v78 * *(double *)&time2.timescale) / v84;
        if (v92 >= v85)
          v94 = v92;
        else
          v94 = (*(double *)&v132 + v79 * *(double *)&time2.value + v78 * *(double *)&time2.timescale) / v84;
        if (v89 <= v93)
          v95 = v89;
        else
          v95 = v93;
        if (v83 <= v95)
          v95 = v83;
        if (v89 >= v94)
          v96 = v89;
        else
          v96 = v94;
        if (v83 >= v96)
          v96 = v83;
        if (*((_DWORD *)this + 10) == 1)
        {
          v97 = v113 * v110 * *((double *)&v132 + 1);
          v98 = v78 * v133;
          v99 = (*((double *)&v134 + 1) + v97 + v98) / v81;
          v100 = v113 * v109 * v133;
          v101 = (*((double *)&v134 + 1) + v97 + v100) / v87;
          v102 = v79 * *((double *)&v132 + 1);
          v103 = (*((double *)&v134 + 1) + v102 + v100) / v90;
          v104 = (*((double *)&v134 + 1) + v102 + v98) / v84;
          if (v103 >= v104)
            v105 = v103;
          else
            v105 = v104;
          if (v103 <= v104)
            v104 = v103;
          if (v101 >= v105)
            v106 = v101;
          else
            v106 = v105;
          if (v99 >= v106)
            v106 = v99;
          if (v101 <= v104)
            v104 = v101;
          if (v99 <= v104)
            v104 = v99;
          v42 = v42 - (v48 * 0.5 + v106);
          v52 = vabdd_f64(v106, v104);
        }
        else
        {
          if (v24)
          {
            v52 = vabdd_f64(v96, v95);
            v107 = v48 * -0.5 - v95 - v52;
          }
          else
          {
            v107 = v48 * 0.5 - v95;
            v52 = vabdd_f64(v96, v95);
          }
          v42 = v42 + v107;
        }
      }
      v53 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 688))(this[4]);
      v54 = this[4];
      if (v53 == 1)
      {
        v118 = *(_OWORD *)&a2->value;
        epoch = a2->epoch;
        v55 = (*(double (**)(TXTextScrollBehavior *, __int128 *))(*(_QWORD *)v54 + 696))(v54, &v118);
        v56 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 848))(this[4]);
        v57 = v113 * v55 / v14;
        (*(void (**)(uint64_t, _QWORD, uint64_t, double))(*(_QWORD *)v56 + 712))(v56, MEMORY[0x1E0CA2E68], 1, v57);
        v58 = -(v112 * v57);
        if (v24)
          v58 = v112 * v57;
        if (*((_DWORD *)this + 10))
          v59 = v112 * v57;
        else
          v59 = v58;
      }
      else
      {
        if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)v54 + 688))(v54) == 2)
        {
          v60 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 680))(this[4]);
          v61 = *(double (**)(void))(*(_QWORD *)this[4] + 736);
          if (v60 == 1)
          {
            v62 = v61();
            (*(void (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 728))(this[4]);
          }
          else
          {
            v62 = v61();
            v63 = (*(double (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 728))(this[4]);
          }
          v64 = v62 - v63;
        }
        else
        {
          v64 = v48 + v52;
        }
        v65 = v64 / v111;
        if (v34)
        {
          v66 = vcvtpd_s64_f64(v65);
          v65 = (double)(int)(((v34 == 2) & v66) + v66);
        }
        v67 = (double *)this[4];
        v67[483] = v65;
        v59 = v112 * v65;
        if (!(*(unsigned int (**)(double *))(*(_QWORD *)v67 + 688))(v67))
        {
          v68 = this[4];
          v116 = *(_OWORD *)&a2->value;
          v117 = a2->epoch;
          v59 = v59
              * (*(double (**)(TXTextScrollBehavior *, __int128 *))(*(_QWORD *)v68 + 744))(v68, &v116);
        }
        v69 = -v59;
        if (v24)
          v69 = v59;
        if (!*((_DWORD *)this + 10))
          v59 = v69;
        v70 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this[4] + 848))(this[4]);
        v71 = this[4];
        v114 = *(_OWORD *)&a2->value;
        v115 = a2->epoch;
        v72 = (*(double (**)(TXTextScrollBehavior *, __int128 *))(*(_QWORD *)v71 + 744))(v71, &v114);
        (*(void (**)(uint64_t, _QWORD, uint64_t, double))(*(_QWORD *)v70 + 712))(v70, MEMORY[0x1E0CA2E68], 1, v65 * v72);
      }
      OffsetPreInception = 1.0 / v113 * (v42 + v59);
    }
    goto LABEL_77;
  }
LABEL_78:
  PCMutex::unlock(v4);
  return OffsetPreInception;
}

void sub_1B296362C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 + 120) ^= 1u;
  PCLockSentry<PCMutex>::~PCLockSentry(v2 - 160);
  _Unwind_Resume(a1);
}

void TXTextScrollCurveNode::solveNode(TXTextScrollBehavior **this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  double v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v10 = *(CMTime *)((_BYTE *)a2 + 5);
  v9 = *(CMTime *)((_BYTE *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    v6 = 0;
    do
    {
      v7 = *(double *)(v3 + 8 * v6);
      v8 = v9;
      *(double *)(v2 + 8 * v6) = v7 + TXTextScrollCurveNode::getOffset(this, &v8);
      v12 = v9;
      v11 = v10;
      PC_CMTimeSaferAdd(&v12, &v11, (uint64_t)&v9);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

void TXTextScrollCurveNode::getTransformMatrixForElement(uint64_t a1, __int128 *a2, _QWORD *a3, uint64_t a4, double *a5, double *a6, double *a7, float64_t *a8, double *a9, char a10)
{
  const void *v17;
  void *v18;
  void *v19;
  double v20;
  char v21;
  double v22;
  double v23;
  double v24;
  uint64_t i;
  __int128 *v26;
  __int128 v27;
  _BYTE v28[128];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v17 = (const void *)a3[120];
  if (v17
  {
    v19 = v18;
    (*(void (**)(void *))(*(_QWORD *)v18 + 1328))(v18);
    v21 = 0;
  }
  else
  {
    v19 = 0;
    v20 = *(double *)(a4 + 40);
    v21 = 1;
  }
  if (v20 == 0.0)
    v22 = 1.0;
  else
    v22 = v20;
  v23 = *a6;
  v24 = (*(double (**)(_QWORD *))(*a3 + 1328))(a3);
  PCMatrix44Tmpl<double>::setTransformation((uint64_t)a2, 0, 4, *a5, a5[1], a5[2], *a7, a7[1], a7[2], v23 * v24 / v22, a6[1], a6[2], *a8, a8[1], *a9, a9[1], a9[2], v22);
  if ((v21 & 1) != 0)
  {
    if (a10)
    {
      if (*(_BYTE *)(a4 + 64))
        PCMatrix44Tmpl<double>::leftMult((uint64_t)a2, (double *)(a4 + 72));
    }
  }
  else if (!*(_DWORD *)(a4 + 48) && (a10 & 1) == 0)
  {
    v38 = 0x3FF0000000000000;
    v35 = 0x3FF0000000000000;
    v32 = 0x3FF0000000000000;
    v29 = 0x3FF0000000000000;
    v30 = 0u;
    v31 = 0u;
    v33 = 0u;
    v34 = 0u;
    v36 = 0u;
    v37 = 0u;
    (*(void (**)(void *, uint64_t *, uint64_t))(*(_QWORD *)v19 + 1256))(v19, &v29, a4);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v29, a2, (uint64_t)v28);
    if (v28 != (_BYTE *)a2)
    {
      for (i = 0; i != 8; i += 2)
      {
        v26 = &a2[i];
        v27 = *(_OWORD *)&v28[i * 16 + 16];
        *v26 = *(_OWORD *)&v28[i * 16];
        v26[1] = v27;
      }
    }
  }
}

double PCMatrix44Tmpl<double>::setTransformation(uint64_t a1, int a2, int a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12, float64_t a13, double a14, double a15, double a16, double a17, double a18)
{
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double result;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double *v45;
  double v46;
  double v47;
  double v48;
  double v55;
  double v56;

  v33 = a17;
  *(double *)&v32 = a18;
  v35 = a15;
  v34 = a16;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  if (a14 == 0.0 && a13 == 0.0 && a9 == 0.0 && a8 == 0.0 && a7 == 0.0 && !a2)
  {
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(double *)a1 = a10;
    *(double *)(a1 + 40) = a11;
    *(double *)(a1 + 24) = a4 - a10 * a15;
    *(double *)(a1 + 56) = a5 - a11 * a16;
    *(double *)(a1 + 80) = a12;
    *(double *)(a1 + 88) = a6 - a12 * a17;
    result = 1.0;
    if (a18 != 1.0)
    {
      *(double *)(a1 + 32) = a18 * 0.0;
      *(double *)(a1 + 64) = a18 * 0.0;
      result = 0.0 / a18;
      *(double *)(a1 + 8) = 0.0 / a18;
      *(double *)(a1 + 16) = 0.0 / a18;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a1 = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    switch(a2)
    {
      case 0:
        PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, a7, a8, a9);
        goto LABEL_14;
      case 1:
        PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, a6);
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        goto LABEL_17;
      case 2:
        v37 = a7;
        v38 = a9;
        v39 = a6;
        v40 = a4;
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, v37, a8, v38);
        PCMatrix44Tmpl<double>::rightTranslate((double *)a1, v40, a5, v39);
LABEL_14:
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        goto LABEL_20;
      case 3:
        v41 = a7;
        v42 = a9;
        v43 = a6;
        v44 = a4;
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, v41, a8, v42);
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        v45 = (double *)a1;
        v46 = v44;
        v47 = a5;
        v48 = v43;
        goto LABEL_19;
      case 4:
        v55 = a6;
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        PCMatrix44Tmpl<double>::rightTranslate((double *)a1, a4, a5, v55);
LABEL_17:
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, a7, a8, a9);
        goto LABEL_20;
      case 5:
        v56 = a6;
        PCMatrix44Tmpl<double>::rightShear((float64x2_t *)a1, a13, a14);
        PCMatrix44Tmpl<double>::rightScale((double *)a1, a10, a11, a12);
        PCMatrix44Tmpl<double>::rightRotate((double *)a1, a3, a7, a8, a9);
        v45 = (double *)a1;
        v46 = a4;
        v47 = a5;
        v48 = v56;
LABEL_19:
        PCMatrix44Tmpl<double>::rightTranslate(v45, v46, v47, v48);
LABEL_20:
        *(double *)&v32 = a18;
        v34 = a16;
        v33 = a17;
        v35 = a15;
        break;
      default:
        break;
    }
    *(double *)(a1 + 32) = *(double *)(a1 + 32) * *(double *)&v32;
    *(double *)(a1 + 64) = *(double *)(a1 + 64) * *(double *)&v32;
    *(float64x2_t *)(a1 + 8) = vdivq_f64(*(float64x2_t *)(a1 + 8), (float64x2_t)vdupq_lane_s64(v32, 0));
    return PCMatrix44Tmpl<double>::rightTranslate((double *)a1, -v35, -v34, -v33);
  }
  return result;
}

double TXTextScrollCurveNode::getOffsetPreInception(TXTextScrollCurveNode *this, CMTime *a2)
{
  _BYTE *v4;
  double v5;
  unint64_t v6;
  uint64_t v7;
  OZTransformNode *v8;
  uint64_t v9;
  OZMEChannelTimeConverter *v10;
  _QWORD *CurrentConversion;
  uint64_t v12;
  __n128 FrameDuration;
  double v14;
  double Seconds;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  _BOOL4 v20;
  double v21;
  double v22;
  const void *v23;
  _QWORD *v24;
  uint64_t v25;
  double v26;
  int v28;
  _BOOL4 v29;
  Float64 v30;
  double v31;
  uint64_t v32;
  double v33;
  double v34;
  uint64_t (*v35)(OZTransformNode *);
  double v36;
  double v37;
  double v38;
  int v39;
  _BOOL4 v40;
  double v41;
  double v42;
  double v43;
  int v44;
  void (*v45)(void);
  double v46;
  double v47;
  OZChannel *v48;
  double v49;
  double v50;
  double v51;
  int v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  int v58;
  double (*v59)(void);
  double v60;
  double v61;
  double v62;
  double v63;
  unsigned int v64;
  double *v65;
  uint64_t v66;
  double v67;
  double v68;
  double v69;
  OZRenderState *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double InitialValue;
  double v97;
  double v98;
  double v99;
  double v100;
  __int128 v101;
  CMTimeEpoch v102;
  __int128 v103;
  CMTimeEpoch epoch;
  float64x2_t v105;
  double v106;
  __int128 v107;
  CMTime v108;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v109;
  double v110[3];
  OZRenderState v111;
  __int128 v112;
  float64x2_t v113;
  double v114;
  CMTime time2;
  __int128 v116;
  double v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  double v123;
  CMTime v124;
  CMTime v125;
  CMTime v126;
  CMTime v127;
  __int128 v128;
  double v129;
  double v130;
  OZRenderState time1;
  CMTime v132;
  CMTime v133;
  CMTime v134;
  CMTime v135;
  CMTime var0;
  CMTime v137;
  CMTime v138;
  $3CC8671D27C23BF42ADDB32F2B5E48AE v139;
  CMTime v140;
  CMTime v141;
  CMTime v142;
  CMTime v143;
  CMTime v144;
  CMTime time;
  CMTime v146;
  CMTime v147;
  char *v148;
  char v149;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if (v4[320])
  {
    v5 = 0.0;
    if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)v4 + 272))(v4))
      return v5;
    v4 = (_BYTE *)*((_QWORD *)this + 4);
  }
  v6 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v4 + 712))(v4);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 720))(*((_QWORD *)this + 4));
  v5 = 0.0;
  if (v6 | v7 && !*((_BYTE *)this + 120))
  {
    v8 = (OZTransformNode *)v7;
    *((_BYTE *)this + 120) = 1;
    v148 = (char *)this + 48;
    PCMutex::lock((PCMutex *)((char *)this + 48));
    v149 = 1;
    memset(&v147, 0, sizeof(v147));
    v9 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 4) + 376) + 32);
    v10 = (OZMEChannelTimeConverter *)(*(_QWORD *(**)(CMTime *__return_ptr, uint64_t, CMTime *))(*(_QWORD *)v9 + 336))(&v147, v9, a2);
    CurrentConversion = OZMEChannelTimeConverter::GetCurrentConversion(v10);
    memset(&v146, 0, sizeof(v146));
    v12 = (*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)v8 + 272))(v8);
    FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), (__n128 *)&v146);
    if (CurrentConversion)
    {
      *(_OWORD *)&time1.var0.var0 = *(_OWORD *)((char *)CurrentConversion + 76);
      time1.var0.var3 = *(_QWORD *)((char *)CurrentConversion + 92);
      time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
      if (CMTimeCompare((CMTime *)&time1, &time2))
      {
        FrameDuration = *(__n128 *)((char *)CurrentConversion + 76);
        *(__n128 *)&v146.value = FrameDuration;
        v146.epoch = *(_QWORD *)((char *)CurrentConversion + 92);
      }
    }
    v14 = *(double *)((*(uint64_t (**)(OZTransformNode *, __n128))(*(_QWORD *)v8 + 272))(v8, FrameDuration)
                    + 368);
    time = v147;
    Seconds = CMTimeGetSeconds(&time);
    v144 = v147;
    v16 = CMTimeGetSeconds(&v144);
    if (CurrentConversion)
    {
      v17 = (uint64_t)CurrentConversion + 52;
      operator*((__int128 *)&v147.value, v17, (uint64_t)&v143);
      v18 = CMTimeGetSeconds(&v143);
      operator*((__int128 *)&v147.value, v17, (uint64_t)&v142);
      if (vabdd_f64(floor(v14 * v18 + 0.0000001), v14 * CMTimeGetSeconds(&v142) + -0.5) >= 0.1)
      {
        v138 = v147;
        v22 = CMTimeGetSeconds(&v138);
        v137 = v147;
        v20 = 0;
        v21 = v14 * v22;
        v19 = floor(v14 * CMTimeGetSeconds(&v137) + 0.0000001);
      }
      else
      {
        memset(&v134, 0, sizeof(v134));
        v141 = v146;
        PC_CMTimeHalve(&v141, (uint64_t)&v134);
        operator*((__int128 *)&v147.value, v17, (uint64_t)&v139);
        time1.var0 = v139;
        time2 = v134;
        PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v128);
        operator/(&v128, v17, (uint64_t)&v140);
        v19 = v14 * CMTimeGetSeconds(&v140);
        v20 = 1;
        v21 = v19;
      }
    }
    else
    {
      v19 = floor(v14 * Seconds + 0.0000001);
      v21 = v14 * v16;
      v20 = vabdd_f64(v19, v14 * v16 + -0.5) < 0.1;
    }
    v23 = (const void *)*((_QWORD *)v8 + 120);
    if (v23
    {
      v25 = 166;
    }
    else
    {
      v24 = (_QWORD *)(*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)v8 + 272))(v8);
      v25 = 12;
    }
    v26 = (*(double (**)(void))(*v24 + 8 * v25))();
    if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(*((_QWORD *)this + 4) + 16) + 24))(*((_QWORD *)this + 4) + 16, 1, 0)&& ((*(void (**)(OZRenderState *__return_ptr))(**((_QWORD **)this + 4) + 608))(&time1), var0 = (CMTime)time1.var0, v19 >= v14 * CMTimeGetSeconds(&var0)))
    {
      v28 = *((_DWORD *)this + 10);
      v5 = 0.0;
      if (v28 == (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 680))(*((_QWORD *)this + 4)))
      {
        if (v6)
        {
          if ((TXTextLayout::getEnableScroll((TXTextLayout *)v6) & 1) != 0)
            goto LABEL_21;
          v29 = *(_DWORD *)(TXTextLayout::getParagraphStyleAtIndex((TXTextLayout *)v6, 0) + 960) == 1
             || TXTextLayout::isVerticalLayout((TXTextLayout *)v6);
        }
        else
        {
          v29 = 0;
        }
        (*(void (**)(CMTime *__return_ptr))(**((_QWORD **)this + 4) + 608))(&v134);
        v139 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v135;
        OZChannel::getValueAsDouble((OZChannel *)(*((_QWORD *)this + 4) + 3088), MEMORY[0x1E0CA2E68], 0.0);
        operator*(&v146, &v132, v30);
        time1.var0 = v139;
        time2 = v132;
        PC_CMTimeSaferSubtract((CMTime *)&time1, &time2, (uint64_t)&v128);
        operator/(&v128, (uint64_t)&v146, (uint64_t)&v133);
        v31 = CMTimeGetSeconds(&v133) + -1.0;
        if (v31 > 0.0)
        {
          v99 = v31;
          v100 = 1.0;
          if (*(_BYTE *)(theApp + 81))
          {
            v32 = (*(uint64_t (**)(OZTransformNode *))(*(_QWORD *)v8 + 272))(v8);
            if (v32)
              v100 = (double)(int)OZSceneSettings::getHostAppProjectHeight((OZSceneSettings *)(v32 + 336))
                   / (float)*(int *)(v32 + 348);
          }
          OZRenderState::OZRenderState(&time1);
          TXTextScrollBehavior::getContentBounds(*((TXTextScrollBehavior **)this + 4), (CMTime *)&time1, (uint64_t)&v128);
          v97 = v100 * *(double *)&v128;
          v98 = v100 * *((double *)&v128 + 1);
          *(double *)&v128 = v100 * *(double *)&v128;
          *((double *)&v128 + 1) = v100 * *((double *)&v128 + 1);
          v33 = v100 * v129;
          v34 = v100 * v130;
          v129 = v100 * v129;
          v130 = v100 * v130;
          time1.var0 = ($3CC8671D27C23BF42ADDB32F2B5E48AE)v147;
          v35 = *(uint64_t (**)(OZTransformNode *))(*(_QWORD *)v8 + 272);
          if (*((_DWORD *)this + 10) == 1)
          {
            v36 = (double)*(int *)(v35(v8) + 348);
          }
          else
          {
            v37 = (double)*(int *)(v35(v8) + 344);
            v38 = 1.0;
            if (v6)
              v38 = v26;
            v36 = v38 * v37;
          }
          v39 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 704))(*((_QWORD *)this + 4));
          if (v39)
            v40 = v20;
          else
            v40 = 0;
          if (v40)
          {
            v127 = v134;
            v41 = CMTimeGetSeconds(&v127);
          }
          else
          {
            v126 = v134;
            v41 = CMTimeGetSeconds(&v126);
            v19 = v21;
          }
          v125 = v135;
          v42 = v19 - v14 * v41;
          if (v42 > v14 * CMTimeGetSeconds(&v125))
          {
            v124 = v135;
            v42 = v14 * CMTimeGetSeconds(&v124);
          }
          v43 = 0.0;
          if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 688))(*((_QWORD *)this + 4)) == 2)
          {
            v44 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 680))(*((_QWORD *)this + 4));
            v45 = *(void (**)(void))(**((_QWORD **)this + 4) + 728);
            if (v44 == 1)
              v45();
            else
              v46 = -((double (*)(void))v45)();
            v43 = v46 + 0.0;
          }
          v47 = v100 * v36;
          if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 688))(*((_QWORD *)this + 4)) == 2
            || !(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 776))(*((_QWORD *)this + 4)))
          {
            if (*((_DWORD *)this + 10))
              v51 = v34;
            else
              v51 = v33;
          }
          else
          {
            time1.var4 = 0;
            v123 = 1.0;
            v120 = 0x3FF0000000000000;
            v117 = 1.0;
            time2.value = 0x3FF0000000000000;
            *(_OWORD *)&time2.timescale = 0u;
            v116 = 0u;
            v118 = 0u;
            v119 = 0u;
            v121 = 0u;
            v122 = 0u;
            v48 = (OZChannel *)((char *)v8 + 1352);
            if (*((_DWORD *)this + 10))
            {
              OZChannel::getValueAsDouble(v48, &v147, 0.0);
              v50 = v49;
              InitialValue = OZChannel::getInitialValue((OZChannel *)((char *)v8 + 1504));
            }
            else
            {
              v50 = OZChannel::getInitialValue(v48);
              OZChannel::getValueAsDouble((OZChannel *)((char *)v8 + 1504), &v147, 0.0);
              InitialValue = v68;
            }
            OZChannel::getValueAsDouble((OZChannel *)((char *)v8 + 1952), &v147, 0.0);
            v95 = v69;
            memset(&v139, 0, sizeof(v139));
            memset(&v132, 0, sizeof(v132));
            v113 = 0uLL;
            v114 = 0.0;
            v112 = 0uLL;
            (*(void (**)(OZTransformNode *, $3CC8671D27C23BF42ADDB32F2B5E48AE *, OZRenderState *, _QWORD))(*(_QWORD *)v8 + 1320))(v8, &v139, &time1, 0);
            if (!v6)
              *(double *)&v139.var0 = *(double *)&v139.var0 / v26;
            OZTransformNode::getRotation((uint64_t)v8, &v132, (CMTime *)&time1);
            OZTransformNode::getPivot((uint64_t)v8, &v113, (CMTime *)&time1);
            OZTransformNode::getShear(v8, (double *)&v112, (double *)&v112 + 1, (const CMTime *)&time1);
            v113 = vmulq_n_f64(v113, v100);
            v114 = v100 * v114;
            v70 = OZRenderState::OZRenderState(&v111, &time1);
            v110[0] = v100 * v50;
            v110[1] = v100 * InitialValue;
            v110[2] = v100 * v95;
            v109 = v139;
            v108 = v132;
            v107 = v112;
            v105 = v113;
            v106 = v114;
            TXTextScrollCurveNode::getTransformMatrixForElement((uint64_t)v70, (__int128 *)&time2.value, v8, (uint64_t)&v111, v110, (double *)&v109.var0, (double *)&v108.value, (float64_t *)&v107, v105.f64, 0);
            v71 = (v98 + v34) * *(double *)&v122;
            v72 = v123 + v97 * *((double *)&v121 + 1) + v71;
            v73 = (v98 + v34) * *(double *)&time2.timescale;
            v74 = (*(double *)&v116 + v97 * *(double *)&time2.value + v73) / v72;
            v75 = (v97 + v33) * *((double *)&v121 + 1);
            v76 = v123 + v75 + v71;
            v77 = (v97 + v33) * *(double *)&time2.value;
            v78 = (*(double *)&v116 + v77 + v73) / v76;
            v79 = v123 + v97 * *((double *)&v121 + 1) + v98 * *(double *)&v122;
            v80 = (*(double *)&v116 + v97 * *(double *)&time2.value + v98 * *(double *)&time2.timescale) / v79;
            v81 = v123 + v75 + v98 * *(double *)&v122;
            v82 = (*(double *)&v116 + v77 + v98 * *(double *)&time2.timescale) / v81;
            if (v82 <= v78)
              v83 = (*(double *)&v116 + v77 + v98 * *(double *)&time2.timescale) / v81;
            else
              v83 = (*(double *)&v116 + v77 + v73) / v76;
            if (v82 >= v78)
              v84 = (*(double *)&v116 + v77 + v98 * *(double *)&time2.timescale) / v81;
            else
              v84 = (*(double *)&v116 + v77 + v73) / v76;
            if (v80 <= v83)
              v85 = (*(double *)&v116 + v97 * *(double *)&time2.value + v98 * *(double *)&time2.timescale) / v79;
            else
              v85 = v83;
            if (v74 <= v85)
              v85 = (*(double *)&v116 + v97 * *(double *)&time2.value + v73) / v72;
            if (v80 >= v84)
              v86 = (*(double *)&v116 + v97 * *(double *)&time2.value + v98 * *(double *)&time2.timescale) / v79;
            else
              v86 = v84;
            if (v74 >= v86)
              v86 = (*(double *)&v116 + v97 * *(double *)&time2.value + v73) / v72;
            if (*((_DWORD *)this + 10) == 1)
            {
              v87 = (v98 + v34) * v117;
              v88 = (*((double *)&v118 + 1) + v97 * *((double *)&v116 + 1) + v87) / v72;
              v89 = (*((double *)&v118 + 1) + v97 * *((double *)&v116 + 1) + v98 * v117) / v79;
              v90 = (v97 + v33) * *((double *)&v116 + 1);
              v91 = (*((double *)&v118 + 1) + v90 + v98 * v117) / v81;
              v92 = (*((double *)&v118 + 1) + v90 + v87) / v76;
              if (v91 >= v92)
                v93 = v91;
              else
                v93 = v92;
              if (v91 <= v92)
                v92 = v91;
              if (v89 >= v93)
                v93 = v89;
              if (v88 >= v93)
                v93 = v88;
              if (v89 <= v92)
                v92 = v89;
              if (v88 <= v92)
                v92 = v88;
              v43 = v43 - (v47 * 0.5 + v93);
              v51 = vabdd_f64(v93, v92);
            }
            else
            {
              if (v29)
              {
                v51 = vabdd_f64(v86, v85);
                v94 = v47 * -0.5 - v85 - v51;
              }
              else
              {
                v94 = v47 * 0.5 - v85;
                v51 = vabdd_f64(v86, v85);
              }
              v43 = v43 + v94;
            }
          }
          v52 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 688))(*((_QWORD *)this + 4));
          v53 = *((_QWORD *)this + 4);
          if (v52 == 1)
          {
            v103 = *(_OWORD *)&a2->value;
            epoch = a2->epoch;
            v54 = (*(double (**)(uint64_t, __int128 *))(*(_QWORD *)v53 + 696))(v53, &v103);
            v55 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 848))(*((_QWORD *)this + 4));
            v56 = v100 * v54 / v14;
            (*(void (**)(uint64_t, _QWORD, uint64_t, double))(*(_QWORD *)v55 + 712))(v55, MEMORY[0x1E0CA2E68], 1, v56);
            v57 = v42 * v56;
          }
          else
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v53 + 688))(v53) == 2)
            {
              v58 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 680))(*((_QWORD *)this + 4));
              v59 = *(double (**)(void))(**((_QWORD **)this + 4) + 736);
              if (v58 == 1)
              {
                v60 = v59();
                (*(void (**)(_QWORD))(**((_QWORD **)this + 4) + 728))(*((_QWORD *)this + 4));
              }
              else
              {
                v60 = v59();
                v61 = (*(double (**)(_QWORD))(**((_QWORD **)this + 4) + 728))(*((_QWORD *)this + 4));
              }
              v62 = v60 - v61;
            }
            else
            {
              v62 = v47 + v51;
            }
            v63 = v62 / v99;
            if (v39)
            {
              v64 = vcvtpd_s64_f64(v63);
              v63 = (double)(int)(((v39 == 2) & v64) + v64);
            }
            v65 = (double *)*((_QWORD *)this + 4);
            v65[483] = v63;
            v57 = v42 * v63;
            if (!(*(unsigned int (**)(double *))(*(_QWORD *)v65 + 688))(v65))
            {
              v66 = *((_QWORD *)this + 4);
              v101 = *(_OWORD *)&a2->value;
              v102 = a2->epoch;
              v57 = v57 * (*(double (**)(uint64_t, __int128 *))(*(_QWORD *)v66 + 744))(v66, &v101);
            }
          }
          v67 = -v57;
          if (v29)
            v67 = v57;
          if (*((_DWORD *)this + 10))
            v67 = v57;
          v5 = 1.0 / v100 * (v43 + v67);
        }
      }
    }
    else
    {
      v5 = 0.0;
    }
LABEL_21:
    PCMutex::unlock((PCMutex *)((char *)this + 48));
    *((_BYTE *)this + 120) ^= 1u;
  }
  return v5;
}

void sub_1B29649A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  PCLockSentry<PCMutex>::~PCLockSentry(v2 - 176);
  *(_BYTE *)(v1 + 120) ^= 1u;
  _Unwind_Resume(a1);
}

__n128 TXTextScrollBehavior::getContentBounds@<Q0>(TXTextScrollBehavior *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 result;
  __int128 v10;

  if (*((_BYTE *)this + 584))
  {
    v6 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 712))(this);
    v7 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 720))(this);
    v8 = (char *)this + 552;
    if (v6)
      TXTextLayout::getTypographicBounds(v6, (uint64_t)v8, a2, 1, 0);
    else
      (*(void (**)(uint64_t, char *, CMTime *))(*(_QWORD *)v7 + 1520))(v7, v8, a2);
    *((_BYTE *)this + 584) = 0;
  }
  result = *(__n128 *)((char *)this + 552);
  v10 = *(_OWORD *)((char *)this + 568);
  *(__n128 *)a3 = result;
  *(_OWORD *)(a3 + 16) = v10;
  return result;
}

TXTextScrollCurveNode *TXTextScrollCurveNode::cloneNode(TXTextScrollCurveNode *this)
{
  TXTextScrollCurveNode *v2;

  v2 = (TXTextScrollCurveNode *)operator new();
  TXTextScrollCurveNode::TXTextScrollCurveNode(v2, this);
  return v2;
}

void sub_1B2964B10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40091CE6AELL);
  _Unwind_Resume(a1);
}

uint64_t TXTextScrollCurveNode::compare(TXTextScrollCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 TXTextScrollCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 112);
  result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 152);
  return result;
}

void TXTextScrollBehavior::TXTextScrollBehavior(TXTextScrollBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  PCURL *v6;
  PCURL *v7;
  PCURL *v8;
  PCURL *v9;
  PCURL *v10;
  PCURL *v11;
  PCURL *v12;
  PCURL *v13;
  PCURL *v14;
  PCURL *v15;
  PCURL *v16;
  PCURL *v17;
  PCURL *v18;
  PCURL *v19;
  PCString *v20;
  PCString *v21;
  PCString *v22;
  PCString v23;
  PCString v24;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E650BB48;
  *(_QWORD *)(v5 + 16) = &unk_1E650BEB8;
  *(_QWORD *)(v5 + 48) = &unk_1E650C110;
  *(_QWORD *)(v5 + 336) = &unk_1E650C168;
  *(_QWORD *)(v5 + 536) = 0;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_QWORD *)(v5 + 568) = 0xBFF0000000000000;
  *(_QWORD *)(v5 + 576) = 0xBFF0000000000000;
  PCURL::PCURL((PCURL *)&v24, CFSTR("Text Scroll Text Behavior Scroll Direction Enum"));
  PCURL::PCURL((PCURL *)&v23, CFSTR("Text Scroll Text Scroll Direction"));
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 592), 1u, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xCBu, 0, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v6, CFSTR("Text Scroll Speed Control Enum"));
  PCURL::PCURL((PCURL *)&v23, CFSTR("Text Scroll Speed Control"));
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 848), 0, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xCEu, 0, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v7, CFSTR("Text Scroll Fixed Scroll Rate"));
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 1104), 1, &v24, (OZChannelFolder *)((char *)this + 56), 0xCCu, 0x400000, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v8, CFSTR("Text Scroll Auto Scroll Rate"));
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 1256), 1, &v24, (OZChannelFolder *)((char *)this + 56), 0xCDu, 0, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v9, CFSTR("Text Scroll Text Start Position"));
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 1408), 0.0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD0u, 138412032, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v10, CFSTR("Text Scroll Text End Position"));
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 1560), 0.0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD1u, 138412032, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v11, CFSTR("Text Scroll Vertical Flicker Adjustment Enum"));
  PCURL::PCURL((PCURL *)&v23, CFSTR("Text Scroll Vertical Flicker Adjustment"));
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1712), 0, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xCFu, 0, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v12, CFSTR("Text Scroll Horizontal Flicker Adjustment Enum"));
  PCURL::PCURL((PCURL *)&v23, CFSTR("Text Scroll Horizontal Flicker Adjustment"));
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1968), 0, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xD2u, 0x400000, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v13, CFSTR("Text Scroll Line Spacing Enum"));
  PCURL::PCURL((PCURL *)&v23, CFSTR("Text Scroll Line Spacing"));
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 2224), 0, &v24, &v23, (OZChannelFolder *)((char *)this + 56), 0xD4u, 0, 0, 0);
  PCString::~PCString(&v23);
  PCString::~PCString(&v24);
  PCURL::PCURL(v14, CFSTR("Text Scroll Scroll Rate Label"));
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 2480), 0.0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD3u, 32778, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v15, CFSTR("Text Scroll Allow Glyph Animation"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2632), 0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD5u, 0, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v16, CFSTR("Text Scroll Start Off Screen"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2784), 1, &v24, (OZChannelFolder *)((char *)this + 56), 0xD6u, 0, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v17, CFSTR("Text Scroll Reverse Direction"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2936), &v24, (OZChannelFolder *)((char *)this + 56), 0xD7u, 0xAu, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v18, CFSTR("Text Scroll End Offset"));
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 3088), 0.0, &v24, (OZChannelFolder *)((char *)this + 56), 0xD8u, 10, 0, 0);
  PCString::~PCString(&v24);
  PCURL::PCURL(v19, CFSTR("Text Scroll Initialized"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3240), &v24, (OZChannelFolder *)((char *)this + 56), 0xD9u, 2u, 0, 0);
  PCString::~PCString(&v24);
  PCString::PCString(v20, "Hidden Channel");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 3392), 5, &v24, (OZChannelFolder *)((char *)this + 56), 0xDAu, 2, 0, 0);
  PCString::~PCString(&v24);
  PCString::PCString(v21, "Hidden Channel");
  OZChannelDouble::OZChannelDouble((TXTextScrollBehavior *)((char *)this + 3544), 13, &v24, (OZChannelFolder *)((char *)this + 56), 0xDBu, 2, 0, 0);
  PCString::~PCString(&v24);
  PCString::PCString(v22, "Hidden Channel");
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3696), 0, &v24, (OZChannelFolder *)((char *)this + 56), 0xDCu, 2u, 0, 0);
  PCString::~PCString(&v24);
  OZChannelBase::setFlag((OZChannelBase *)this + 33, 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3392), 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3544), 0x100000000, 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1408), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 1560), 0);
  *((_QWORD *)this + 482) = 0;
  *((_BYTE *)this + 3848) = 0;
  TXTextScrollBehavior::setResetChannelFlags(this);
  OZChannel::setValue((OZChannel *)((char *)this + 3240), MEMORY[0x1E0CA2E68], 0.0, 0);
  OZChannel::setValue((OZChannel *)((char *)this + 2936), MEMORY[0x1E0CA2E68], 0.0, 0);
  *((_BYTE *)this + 584) = 1;
}

void sub_1B2965298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, OZChannel *a11, OZChannelEnum *a12, OZChannelEnum *a13, OZChannelEnum *a14, OZChannel *a15, OZChannel *a16, OZChannelEnum *a17, OZChannelEnum *a18, OZChannel *a19, OZChannel *a20,PCString a21)
{
  OZChannelBehavior *v21;
  OZChannel *v22;
  OZChannelBool *v23;
  OZChannelBool *v24;
  OZChannelBool *v25;
  OZChannel *v26;
  OZChannelBool *v27;
  OZChannel *v28;
  uint64_t v29;

  PCString::~PCString((PCString *)(v29 - 88));
  OZChannel::~OZChannel(v26);
  OZChannel::~OZChannel(v22);
  OZChannelBool::~OZChannelBool(v25);
  OZChannel::~OZChannel(v28);
  OZChannelBool::~OZChannelBool(v27);
  OZChannelBool::~OZChannelBool(v24);
  OZChannelBool::~OZChannelBool(v23);
  OZChannel::~OZChannel(a11);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelEnum::~OZChannelEnum(a14);
  OZChannel::~OZChannel(a19);
  OZChannel::~OZChannel(a20);
  OZChannel::~OZChannel(a15);
  OZChannel::~OZChannel(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannelEnum::~OZChannelEnum(a18);
  OZChannelBehavior::~OZChannelBehavior(v21);
  _Unwind_Resume(a1);
}

OZChannelBase *TXTextScrollBehavior::setResetChannelFlags(TXTextScrollBehavior *this)
{
  OZChannelBase *v2;
  int v3;
  OZChannelBase *v4;
  int v5;
  OZChannelBase *v6;
  int v7;
  OZChannelBase *v8;
  uint64_t v9;
  OZChannelBase *v10;

  if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 688))(this) == 1)
  {
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1256), 0x400000, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1104), 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1712), 0x8000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1968), 0x8000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1408), 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1560), 0x400000, 1);
    v2 = (OZChannelBase *)((char *)this + 2784);
  }
  else
  {
    v3 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 688))(this);
    v4 = (OZChannelBase *)((char *)this + 1256);
    if (v3 == 2)
    {
      OZChannelBase::setFlag(v4, 0x400000, 1);
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1104), 0x400000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1712), 0x8000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1968), 0x8000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1408), 0x400000, 1);
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1560), 0x400000, 1);
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2784), 0x400000, 1);
      goto LABEL_7;
    }
    OZChannelBase::resetFlag(v4, 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1104), 0x400000, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1712), 0x8000, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1968), 0x8000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1408), 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1560), 0x400000, 1);
    v2 = (OZChannelBase *)((char *)this + 2784);
  }
  OZChannelBase::resetFlag(v2, 0x400000, 1);
LABEL_7:
  v5 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 680))(this);
  v6 = (OZChannelBase *)((char *)this + 1712);
  if (v5)
  {
    OZChannelBase::resetFlag(v6, 0x400000, 1);
    OZChannelBase::setFlag((OZChannelBase *)((char *)this + 1968), 0x400000, 1);
  }
  else
  {
    OZChannelBase::setFlag(v6, 0x400000, 1);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1968), 0x400000, 1);
  }
  v7 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 752))(this);
  v8 = (OZChannelBase *)((char *)this + 2224);
  if (v7)
    OZChannelBase::resetFlag(v8, 0x400000, 1);
  else
    OZChannelBase::setFlag(v8, 0x400000, 1);
  v9 = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 712))(this);
  v10 = (OZChannelBase *)((char *)this + 2632);
  if (v9)
    return OZChannelBase::resetFlag(v10, 0x400000, 1);
  else
    return OZChannelBase::setFlag(v10, 0x400000, 1);
}

void TXTextScrollBehavior::TXTextScrollBehavior(TXTextScrollBehavior *this, const TXTextScrollBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E650BB48;
  *(_QWORD *)(v5 + 16) = &unk_1E650BEB8;
  *(_QWORD *)(v5 + 48) = &unk_1E650C110;
  *(_QWORD *)(v5 + 336) = &unk_1E650C168;
  *(_OWORD *)(v5 + 552) = 0u;
  *(_QWORD *)(v5 + 568) = 0xBFF0000000000000;
  *(_QWORD *)(v5 + 576) = 0xBFF0000000000000;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(v5 + 592), (const TXTextScrollBehavior *)((char *)a2 + 592), (OZChannelFolder *)(v5 + 56));
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 848), (const TXTextScrollBehavior *)((char *)a2 + 848), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1104), (const OZChannelBase *)((char *)a2 + 1104), v6);
  *((_QWORD *)this + 138) = &off_1E6551358;
  *((_QWORD *)this + 140) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1256), (const OZChannelBase *)((char *)a2 + 1256), v6);
  *((_QWORD *)this + 157) = &off_1E6551358;
  *((_QWORD *)this + 159) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1408), (const OZChannelBase *)((char *)a2 + 1408), v6);
  *((_QWORD *)this + 176) = &off_1E6551358;
  *((_QWORD *)this + 178) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 1560), (const OZChannelBase *)((char *)a2 + 1560), v6);
  *((_QWORD *)this + 195) = &off_1E6551358;
  *((_QWORD *)this + 197) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1712), (const TXTextScrollBehavior *)((char *)a2 + 1712), v6);
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1968), (const TXTextScrollBehavior *)((char *)a2 + 1968), v6);
  OZChannelEnum::OZChannelEnum((TXTextScrollBehavior *)((char *)this + 2224), (const TXTextScrollBehavior *)((char *)a2 + 2224), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 2480), (const OZChannelBase *)((char *)a2 + 2480), v6);
  *((_QWORD *)this + 310) = &off_1E6551358;
  *((_QWORD *)this + 312) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2632), (const OZChannelBase *)((char *)a2 + 2632), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2784), (const OZChannelBase *)((char *)a2 + 2784), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 2936), (const OZChannelBase *)((char *)a2 + 2936), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 3088), (const OZChannelBase *)((char *)a2 + 3088), v6);
  *((_QWORD *)this + 386) = &off_1E6551358;
  *((_QWORD *)this + 388) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3240), (const OZChannelBase *)((char *)a2 + 3240), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 3392), (const OZChannelBase *)((char *)a2 + 3392), v6);
  *((_QWORD *)this + 424) = &off_1E6551358;
  *((_QWORD *)this + 426) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 3544), (const OZChannelBase *)((char *)a2 + 3544), v6);
  *((_QWORD *)this + 443) = &off_1E6551358;
  *((_QWORD *)this + 445) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 3696), (const OZChannelBase *)a2 + 33, v6);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1104), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1104), 200.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 1104), "px");
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1256), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1256), 10.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1256), 1.0);
  OZChannel::setSuffix((OZChannel *)((char *)this + 1256), " x");
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1408), -2000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1408), 2000.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1408), 1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1560), -2000.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 1560), 2000.0);
  OZChannel::setCoarseDelta((OZChannel *)((char *)this + 1560), 1.0);
  *((_BYTE *)this + 584) = 1;
}

void sub_1B2965AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannelBool *a9, OZChannel *a10, OZChannelBool *a11, OZChannelBool *a12, OZChannelBool *a13, OZChannel *a14, OZChannelEnum *a15, OZChannelEnum *a16, OZChannelEnum *a17, OZChannelEnum *a18, OZChannelEnum *a19, OZChannel *a20)
{
  OZChannelBehavior *v20;
  OZChannel *v21;
  OZChannel *v22;
  OZChannel *v23;
  OZChannel *v24;
  OZChannel *v25;

  OZChannel::~OZChannel(v25);
  OZChannel::~OZChannel(v24);
  OZChannelBool::~OZChannelBool(a9);
  OZChannel::~OZChannel(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannelBool::~OZChannelBool(a12);
  OZChannelBool::~OZChannelBool(a13);
  OZChannel::~OZChannel(a14);
  OZChannelEnum::~OZChannelEnum(a15);
  OZChannelEnum::~OZChannelEnum(a16);
  OZChannelEnum::~OZChannelEnum(a17);
  OZChannel::~OZChannel(v23);
  OZChannel::~OZChannel(v22);
  OZChannel::~OZChannel(v21);
  OZChannel::~OZChannel(a20);
  OZChannelEnum::~OZChannelEnum(a18);
  OZChannelEnum::~OZChannelEnum(a19);
  OZChannelBehavior::~OZChannelBehavior(v20);
  _Unwind_Resume(a1);
}

uint64_t TXTextScrollBehavior::initializeParameters(TXTextScrollBehavior *this)
{
  uint64_t v2;
  int ValueAsInt;
  uint64_t v4;
  BOOL isVerticalLayout;
  OZChannel *v6;
  const CMTime *v7;
  double v8;
  int v9;
  _BOOL4 v10;

  v2 = *((_QWORD *)this + 67);
  if (v2)
  {
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v2 + 20464), MEMORY[0x1E0CA2E68], 0.0);
    v4 = *((_QWORD *)this + 67);
    if (ValueAsInt == 3)
    {
      isVerticalLayout = TXTextLayout::isVerticalLayout((TXTextLayout *)v4);
      v6 = (OZChannel *)((char *)this + 592);
      if (isVerticalLayout)
      {
LABEL_4:
        v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
        v8 = 0.0;
LABEL_10:
        OZChannel::setValue(v6, v7, v8, 0);
        return OZChannel::setValue((OZChannel *)((char *)this + 3240), MEMORY[0x1E0CA2E68], 1.0, 1);
      }
    }
    else
    {
      v9 = OZChannel::getValueAsInt((OZChannel *)(v4 + 20464), MEMORY[0x1E0CA2E68], 0.0);
      v10 = TXTextLayout::isVerticalLayout(*((TXTextLayout **)this + 67));
      v6 = (OZChannel *)((char *)this + 592);
      if (v9 == 4)
      {
        if (!v10)
          goto LABEL_4;
      }
      else if (v10)
      {
        goto LABEL_4;
      }
    }
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    v8 = 1.0;
    goto LABEL_10;
  }
  return OZChannel::setValue((OZChannel *)((char *)this + 3240), MEMORY[0x1E0CA2E68], 1.0, 1);
}

void TXTextScrollBehavior::didAddToNode(TXTextScrollBehavior *this, OZSceneNode *a2)
{
  unint64_t v4;
  unint64_t v5;
  _BYTE *v6;
  TXTextScrollCurveNode *v7;
  TXTextScrollCurveNode *v8;
  int v9;
  OZChannelBase *v10;
  TXTextScrollCurveNode *v11;
  OZChannelBase *v12;
  TXTextScrollCurveNode *v13;
  OZChannel *v14;
  OZBehaviorCurveNode *v15;

  OZChannelBehavior::didAddToNode(this, a2);
  if (a2)
  {
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  if (v4 | v5)
  {
    *((_QWORD *)this + 67) = v4;
    *((_QWORD *)this + 68) = v5;
    if (!v4)
    {
      OZChannelBehavior::didAddToNode(this, a2);
      v7 = (TXTextScrollCurveNode *)operator new();
      TXTextScrollCurveNode::TXTextScrollCurveNode(v7, this, (OZChannel *)(v5 + 1352), 0);
      OZChannel::appendCurveProcessingNode((OZChannel *)(v5 + 1352), v7);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v7);
      v8 = (TXTextScrollCurveNode *)operator new();
      TXTextScrollCurveNode::TXTextScrollCurveNode(v8, this, (OZChannel *)(v5 + 1504), 1);
      OZChannel::appendCurveProcessingNode((OZChannel *)(v5 + 1504), v8);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v8);
      OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)(v5 + 1216));
      return;
    }
    v6 = (_BYTE *)(v4 + 52257);
    if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 3240), MEMORY[0x1E0CA2E68], 0.0))
      TXTextScrollBehavior::initializeParameters(this);
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0) == 1)
    {
      if (!TXTextLayout::isVerticalLayout((TXTextLayout *)v4) || *(_BYTE *)(v4 + 52258))
      {
        if (TXTextLayout::isVerticalLayout((TXTextLayout *)v4) || *v6)
          goto LABEL_24;
LABEL_22:
        TXTextLayout::initializeScrollMargins((TXTextLayout *)v4);
        v9 = 3;
        goto LABEL_23;
      }
    }
    else
    {
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0))
      {
LABEL_24:
        *((_DWORD *)this + 968) = OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0);
        OZChannelBehavior::didAddToNode(this, a2);
        v10 = (OZChannelBase *)(v4 + 60360);
        v11 = (TXTextScrollCurveNode *)operator new();
        TXTextScrollCurveNode::TXTextScrollCurveNode(v11, this, (OZChannel *)(v4 + 60360), 0);
        v12 = (OZChannelBase *)(v4 + 59888);
        OZChannel::appendCurveProcessingNode((OZChannel *)(v4 + 60360), v11);
        OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v11);
        v13 = (TXTextScrollCurveNode *)operator new();
        TXTextScrollCurveNode::TXTextScrollCurveNode(v13, this, (OZChannel *)(v4 + 59888), 1);
        OZChannel::appendCurveProcessingNode((OZChannel *)(v4 + 59888), v13);
        OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v13);
        v14 = (OZChannel *)(v4 + 20464);
        v15 = (OZBehaviorCurveNode *)operator new();
        OZBehaviorCurveNode::OZBehaviorCurveNode(v15, this, v14);
        *(_QWORD *)v15 = &off_1E650B970;
        *((_QWORD *)v15 + 4) = this;
        OZChannel::appendCurveProcessingNode(v14, v15);
        OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v15);
        OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)(v5 + 1216));
        OZChannelBehavior::addAffectedChannel((uint64_t *)this, v12);
        OZChannelBehavior::addAffectedChannel((uint64_t *)this, v10);
        OZChannelBehavior::addAffectedChannel((uint64_t *)this, (OZChannelBase *)v14);
        return;
      }
      if (TXTextLayout::isVerticalLayout((TXTextLayout *)v4) && !*v6)
        goto LABEL_22;
      if (TXTextLayout::isVerticalLayout((TXTextLayout *)v4) || *(_BYTE *)(v4 + 52258))
        goto LABEL_24;
    }
    TXTextLayout::initializeTickerMargins((TXTextLayout *)v4);
    v9 = 4;
LABEL_23:
    TXTextLayout::cacheMargins((TXTextLayout *)v4, v9);
    TXTextLayout::interlockMargins((TXTextLayout *)v4, 0);
    TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)v4);
    goto LABEL_24;
  }
}

void sub_1B296609C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40091CE6AELL);
  _Unwind_Resume(a1);
}

uint64_t TXTextScrollBehavior::operator=(uint64_t a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;

  if (!v3)
    __cxa_bad_cast();
  v4 = v3;
  *(_QWORD *)(a1 + 536) = v3[67];
  *(_QWORD *)(a1 + 544) = v3[68];
  OZChannelBase::operator=(a1 + 592, (uint64_t)(v3 + 74));
  OZChannelBase::operator=(a1 + 848, (uint64_t)(v4 + 106));
  OZChannelBase::operator=(a1 + 1104, (uint64_t)(v4 + 138));
  OZChannelBase::operator=(a1 + 1256, (uint64_t)(v4 + 157));
  OZChannelBase::operator=(a1 + 1712, (uint64_t)(v4 + 214));
  OZChannelBase::operator=(a1 + 1408, (uint64_t)(v4 + 176));
  OZChannelBase::operator=(a1 + 1968, (uint64_t)(v4 + 246));
  OZChannelBase::operator=(a1 + 2224, (uint64_t)(v4 + 278));
  OZChannelBase::operator=(a1 + 2480, (uint64_t)(v4 + 310));
  return OZChannelBase::operator=(a1 + 2632, (uint64_t)(v4 + 329));
}

uint64_t TXTextScrollBehavior::isRebuildUIChannel(TXTextScrollBehavior *this, OZChannelBase *a2)
{
  return 1;
}

uint64_t TXTextScrollBehavior::hideShowChannelsInHUD(TXTextScrollBehavior *this)
{
  return 1;
}

uint64_t TXTextScrollBehavior::canUseAdaptiveLineSpacing(TXTextScrollBehavior *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 712))(this);
  if (result)
  {
    if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 680))(this) == 1)
    {
      result = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 704))(this);
      if ((_DWORD)result)
        return (*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 688))(this) != 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TXTextScrollBehavior::getAdaptiveLineSpacing(TXTextScrollBehavior *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 752))(this);
  if ((_DWORD)result)
    return OZChannel::getValueAsInt((OZChannel *)((char *)this + 2224), MEMORY[0x1E0CA2E68], 0.0);
  return result;
}

void TXTextScrollBehavior::updateHiddenFlags(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  const void *v4;
  TXTextScrollBehavior *v5;

  for (i = *(_QWORD *)(a2 + 8); i != a2; i = *(_QWORD *)(i + 8))
  {
    v4 = *(const void **)(i + 16);
    if (v4)
    {
      if (v5)
        TXTextScrollBehavior::setResetChannelFlags(v5);
    }
  }
}

BOOL TXTextScrollBehavior::canBake(TXTextScrollBehavior *this)
{
  return *((_QWORD *)this + 67) == 0;
}

void TXTextScrollBehavior::notify(TXTextScrollBehavior *this, __int16 a2)
{
  TXParagraphStyle ***v4;
  TXParagraphStyle ***v5;
  uint64_t v6;
  const OZChannelBase *v7;
  OZNotificationManager *v8;
  _BYTE *v9;
  TXTextLayout *v10;
  int v11;
  const OZChannelBase *v12;
  OZNotificationManager *v13;
  const OZChannelBase *v14;
  OZNotificationManager *v15;
  uint64_t v16;
  int v17;

  if ((a2 & 0x1867) != 0)
    *((_BYTE *)this + 584) = 1;
  OZChannelBehavior::notify(this, a2);
  v4 = (TXParagraphStyle ***)(*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 712))(this);
  if (v4)
  {
    v5 = v4;
    if (a2 < 0)
      TXTextLayout::setAllParagraphsDirty(v4);
    if ((a2 & 8) != 0)
    {
      v6 = *(_QWORD *)((*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 336))(this) + 1584);
      v7 = (const OZChannelBase *)(*(uint64_t (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 784))(this);
      v8 = *(OZNotificationManager **)(v6 + 168);
      if (!v8 || !OZNotificationManager::wasChannelModified(v8, v7))
      {
        v12 = (const OZChannelBase *)(*(uint64_t (**)(TXTextScrollBehavior *, const OZChannelBase *))(*(_QWORD *)this + 832))(this, v7);
        v13 = *(OZNotificationManager **)(v6 + 168);
        if (!v13 || !OZNotificationManager::wasChannelModified(v13, v12))
        {
          v14 = (const OZChannelBase *)(*(uint64_t (**)(TXTextScrollBehavior *, const OZChannelBase *))(*(_QWORD *)this + 856))(this, v12);
          v15 = *(OZNotificationManager **)(v6 + 168);
          if (!v15 || !OZNotificationManager::wasChannelModified(v15, v14))
            return;
        }
LABEL_32:
        TXTextLayout::setAllParagraphsDirty(v5);
        return;
      }
      v9 = (char *)v5 + 52257;
      if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 680))(this) == 1)
      {
        if (!*v9 || TXTextLayout::isVerticalLayout((TXTextLayout *)v5))
        {
          if (!*((_BYTE *)v5 + 52258) || !TXTextLayout::isVerticalLayout((TXTextLayout *)v5))
          {
            if (TXTextLayout::isVerticalLayout((TXTextLayout *)v5))
            {
LABEL_16:
              TXTextLayout::initializeTickerMargins((TXTextLayout *)v5);
              v10 = (TXTextLayout *)v5;
              v11 = 4;
LABEL_31:
              TXTextLayout::cacheMargins(v10, v11);
              goto LABEL_32;
            }
LABEL_30:
            TXTextLayout::initializeScrollMargins((TXTextLayout *)v5);
            v10 = (TXTextLayout *)v5;
            v11 = 3;
            goto LABEL_31;
          }
          goto LABEL_24;
        }
      }
      else
      {
        if (!TXTextLayout::isVerticalLayout((TXTextLayout *)v5) && *((_BYTE *)v5 + 52258))
        {
LABEL_24:
          v16 = (uint64_t)v5;
          v17 = 4;
LABEL_28:
          TXTextLayout::setCachedMargins(v16, v17);
          goto LABEL_32;
        }
        if (!TXTextLayout::isVerticalLayout((TXTextLayout *)v5) || !*v9)
        {
          if (!TXTextLayout::isVerticalLayout((TXTextLayout *)v5))
            goto LABEL_16;
          goto LABEL_30;
        }
      }
      v16 = (uint64_t)v5;
      v17 = 3;
      goto LABEL_28;
    }
  }
}

void `non-virtual thunk to'TXTextScrollBehavior::notify(TXTextScrollBehavior *this, __int16 a2)
{
  TXTextScrollBehavior::notify((TXTextScrollBehavior *)((char *)this - 336), a2);
}

uint64_t TXTextScrollBehavior::parseBegin(TXTextScrollBehavior *this, PCSerializerReadStream *a2)
{
  uint64_t v4;
  unint64_t v5;
  const CMTime *v6;
  unint64_t v7;

  v4 = OZBehavior::parseBegin(this, a2);
  LODWORD(v5) = *((_DWORD *)a2 + 26);
  v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
  OZChannel::setValue((OZChannel *)((char *)this + 3392), MEMORY[0x1E0CA2E68], (double)v5, 0);
  LODWORD(v7) = *((_DWORD *)a2 + 27);
  OZChannel::setValue((OZChannel *)((char *)this + 3544), v6, (double)v7, 0);
  return v4;
}

uint64_t `non-virtual thunk to'TXTextScrollBehavior::parseBegin(TXTextScrollBehavior *this, PCSerializerReadStream *a2)
{
  return TXTextScrollBehavior::parseBegin((TXTextScrollBehavior *)((char *)this - 48), a2);
}

uint64_t TXTextScrollBehavior::parseEnd(TXTextScrollBehavior *this, PCSerializerReadStream *a2)
{
  TXTextScrollBehavior::setResetChannelFlags(this);
  OZChannelBase::setFlag((OZChannelBase *)this + 33, 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3392), 0x100000000, 0);
  OZChannelBase::setFlag((OZChannelBase *)((char *)this + 3544), 0x100000000, 0);
  return OZBehavior::parseEnd(this, a2);
}

uint64_t `non-virtual thunk to'TXTextScrollBehavior::parseEnd(TXTextScrollBehavior *this, PCSerializerReadStream *a2)
{
  return TXTextScrollBehavior::parseEnd((TXTextScrollBehavior *)((char *)this - 48), a2);
}

void TXTextScrollBehavior::~TXTextScrollBehavior(TXTextScrollBehavior *this)
{
  TXTextScrollBehavior::~TXTextScrollBehavior(this);
  JUMPOUT(0x1B5E29170);
}

{
  *(_QWORD *)this = &off_1E650BB48;
  *((_QWORD *)this + 2) = &unk_1E650BEB8;
  *((_QWORD *)this + 6) = &unk_1E650C110;
  *((_QWORD *)this + 42) = &unk_1E650C168;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3544));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3392));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 3240));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 3088));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2936));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2784));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 2632));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 2480));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 2224));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1968));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 1712));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1560));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1408));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1256));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1104));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 848));
  OZChannelEnum::~OZChannelEnum((TXTextScrollBehavior *)((char *)this + 592));
  OZChannelBehavior::~OZChannelBehavior(this);
}

OZChannelBase *OZBehavior::finishInitializing(OZBehavior *this)
{
  return OZChannelFolder::finishInitializing((OZChannelFolder *)((char *)this + 56));
}

OZChannelBase *TXTextScrollBehavior::setEnableScrollRate(TXTextScrollBehavior *this, int a2)
{
  return OZChannelBase::enable((OZChannelBase *)((char *)this + 1104), a2, 1);
}

uint64_t TXTextScrollBehavior::getScrollDirection(TXTextScrollBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 592), MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t TXTextScrollBehavior::getSpeedControl(TXTextScrollBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 848), MEMORY[0x1E0CA2E68], 0.0);
}

void TXTextScrollBehavior::getFixedScrollRate(TXTextScrollBehavior *this, CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1104), a2, 0.0);
}

uint64_t TXTextScrollBehavior::getInterlaceAdjust(TXTextScrollBehavior *this)
{
  OZChannel *v2;

  if ((*(unsigned int (**)(TXTextScrollBehavior *))(*(_QWORD *)this + 680))(this) == 1)
    v2 = (OZChannel *)((char *)this + 1712);
  else
    v2 = (OZChannel *)((char *)this + 1968);
  return OZChannel::getValueAsInt(v2, MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t TXTextScrollBehavior::getTextLayout(TXTextScrollBehavior *this)
{
  return *((_QWORD *)this + 67);
}

uint64_t TXTextScrollBehavior::getElement(TXTextScrollBehavior *this)
{
  return *((_QWORD *)this + 68);
}

void TXTextScrollBehavior::getStartPosition(TXTextScrollBehavior *this)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1408), MEMORY[0x1E0CA2E68], 0.0);
}

void TXTextScrollBehavior::getEndPosition(TXTextScrollBehavior *this)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1560), MEMORY[0x1E0CA2E68], 0.0);
}

void TXTextScrollBehavior::getAutoScrollRate(TXTextScrollBehavior *this, CMTime *a2)
{
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1256), a2, 0.0);
}

BOOL TXTextScrollBehavior::getAllowGlyphAnimation(TXTextScrollBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 2632), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

BOOL TXTextScrollBehavior::getStartOffScreen(TXTextScrollBehavior *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 2784), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

uint64_t TXTextScrollBehavior::getScrollDirectionChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 592;
}

uint64_t TXTextScrollBehavior::getSpeedControlChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 848;
}

uint64_t TXTextScrollBehavior::getScrollFixedRateChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1104;
}

uint64_t TXTextScrollBehavior::getScrollAutoRateChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1256;
}

uint64_t TXTextScrollBehavior::getStartPositionChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1408;
}

uint64_t TXTextScrollBehavior::getEndPositionChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1560;
}

uint64_t TXTextScrollBehavior::getAdaptiveLineSpacingChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 2224;
}

uint64_t TXTextScrollBehavior::getInterlaceAdjustChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 1712;
}

uint64_t TXTextScrollBehavior::getScrollRateLabelChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 2480;
}

uint64_t TXTextScrollBehavior::getAllowGlyphAnimationChan(TXTextScrollBehavior *this)
{
  return (uint64_t)this + 2632;
}

void `non-virtual thunk to'TXTextScrollBehavior::~TXTextScrollBehavior(TXTextScrollBehavior *this)
{
  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 16));
}

{
  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 48));
}

{
  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 336));
}

{
  TXTextScrollBehavior::~TXTextScrollBehavior((TXTextScrollBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void TXTextBehavior::TXTextBehavior(TXTextBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3, a4);
  *v4 = &off_1E650C1C0;
  v4[2] = &unk_1E650C478;
  v4[6] = &unk_1E650C6D0;
  v4[42] = &unk_1E650C728;
}

void TXTextBehavior::TXTextBehavior(TXTextBehavior *this, const TXTextBehavior *a2, char a3)
{
  _QWORD *v3;

  OZChannelBehavior::OZChannelBehavior(this, a2, a3);
  *v3 = &off_1E650C1C0;
  v3[2] = &unk_1E650C478;
  v3[6] = &unk_1E650C6D0;
  v3[42] = &unk_1E650C728;
}

void `non-virtual thunk to'TXTextBehavior::~TXTextBehavior(TXTextBehavior *this)
{
  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 16));
}

{
  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 48));
}

{
  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 336));
}

{
  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  OZChannelBehavior::~OZChannelBehavior((TXTextBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void TXTextBehavior::~TXTextBehavior(TXTextBehavior *this)
{
  OZChannelBehavior::~OZChannelBehavior(this);
  JUMPOUT(0x1B5E29170);
}

BOOL TXTextBehavior::canAddToSceneNode(TXTextBehavior *this, OZSceneNode *lpsrc)
{
  return lpsrc
}

uint64_t TXTextBehavior::getPreviewSceneNode(TXTextBehavior *this)
{
  OZChannelBase *v1;
  const PCString *NextUniqueID;
  TXTextLayout *v3;
  CMTime *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CMTime v9;
  PCSharedCount v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;

  PCSharedCount::PCSharedCount(&v10);
  NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v1);
  v3 = (TXTextLayout *)TXTextInput::create((TXTextInput *)&v10, NextUniqueID);
  PCString::~PCString((PCString *)&v10);
  v4 = (CMTime *)MEMORY[0x1E0CA2E68];
  v12 = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Text Behavior Preview Text"));
  (*(void (**)(TXTextLayout *, __int128 *, PCSharedCount *))(*(_QWORD *)v3 + 144))(v3, &v12, &v10);
  PCString::~PCString((PCString *)&v10);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v10);
  if (v10.var0)
  {
    v9 = *v4;
    OZChannel::setValue((OZChannel *)v10.var0 + 13, &v9, 16.0, 0);
  }
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return (uint64_t)v3 + 200;
}

void sub_1B2966B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void TXTypeOnCurveNode::~TXTypeOnCurveNode(TXTypeOnCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double TXTypeOnCurveNode::solveNode(TXTypeOnCurveNode *this, const CMTime *a2, double a3, double a4)
{
  TXTypeOnBehavior *v4;
  CMTime v6;

  v4 = (TXTypeOnBehavior *)*((_QWORD *)this + 4);
  v6 = *a2;
  return TXTypeOnBehavior::getTypeOn(v4, &v6, a4);
}

double TXTypeOnBehavior::getTypeOn(TXTypeOnBehavior *this, CMTime *a2, double a3)
{
  uint64_t v6;
  OZChannel *v7;
  double v8;
  double Seconds;
  double v11;
  double v12;
  double v13;
  CMTime v14;
  __n128 v15;
  CMTimeEpoch v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime time2;
  CMTime time1;

  memset(&v20, 0, sizeof(v20));
  (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v20);
  v19 = v20;
  if ((*(unsigned int (**)(TXTypeOnBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v19, 1, 1, 1))
  {
    (*(void (**)(CMTime *__return_ptr, TXTypeOnBehavior *))(*(_QWORD *)this + 608))(&v17, this);
    time2 = v17;
    time1 = v20;
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      v7 = (OZChannel *)((char *)this + 536);
    }
    else
    {
      v6 = (*(uint64_t (**)(TXTypeOnBehavior *))(*(_QWORD *)this + 336))(this);
      OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), &v15);
      time1 = v17;
      time2 = v20;
      if (CMTimeCompare(&time1, &time2) <= 0)
      {
        time1 = v17;
        time2 = v18;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v22);
        time1 = v22;
        *(__n128 *)&time2.value = v15;
        time2.epoch = v16;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v21);
        time1 = v20;
        time2 = v21;
        if (CMTimeCompare(&time1, &time2) <= 0 || (v18.flags & 1) != 0 && (v18.flags & 0x10) != 0)
        {
          time2 = v17;
          time1 = v20;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v22);
          time1 = v18;
          operator/((__int128 *)&v22.value, (uint64_t)&time1, (uint64_t)&v14);
          Seconds = CMTimeGetSeconds(&v14);
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 536), a2, 0.0);
          v12 = v11;
          OZChannel::getValueAsDouble((OZChannel *)((char *)this + 688), a2, 0.0);
          return v12 + Seconds * (v13 - v12);
        }
      }
      v7 = (OZChannel *)((char *)this + 688);
    }
    OZChannel::getValueAsDouble(v7, a2, 0.0);
    return v8;
  }
  return a3;
}

void TXTypeOnCurveNode::solveNode(TXTypeOnCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  TXTypeOnBehavior *v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v10 = *(CMTime *)((_BYTE *)a2 + 5);
  v9 = *(CMTime *)((_BYTE *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    v6 = 0;
    do
    {
      v7 = (TXTypeOnBehavior *)*((_QWORD *)this + 4);
      v8 = v9;
      *(double *)(v2 + 8 * v6) = TXTypeOnBehavior::getTypeOn(v7, &v8, *(double *)(v3 + 8 * v6));
      v12 = v9;
      v11 = v10;
      PC_CMTimeSaferAdd(&v12, &v11, (uint64_t)&v9);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

OZBehaviorCurveNode *TXTypeOnCurveNode::cloneNode(TXTypeOnCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E650C768;
  return v2;
}

void sub_1B2966F74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXTypeOnCurveNode::compare(TXTypeOnCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 TXTypeOnCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 112);
  result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 152);
  return result;
}

void TXFadeOnCurveNode::~TXFadeOnCurveNode(TXFadeOnCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t TXFadeOnCurveNode::solveNode(TXFadeOnCurveNode *this, const CMTime *a2, double a3, double a4)
{
  return OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 4) + 840), MEMORY[0x1E0CA2E68], 0.0);
}

void TXFadeOnCurveNode::solveNode(TXFadeOnCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  unint64_t v5;
  const CMTime *v6;
  double v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;

  v2 = *((_QWORD *)a2 + 19);
  v9 = *(CMTime *)((_BYTE *)a2 + 5);
  v8 = *(CMTime *)((_BYTE *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    v5 = 0;
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      if (OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 4) + 840), v6, 0.0))
        v7 = 1.0;
      else
        v7 = 0.0;
      *(double *)(v2 + 8 * v5) = v7;
      v11 = v8;
      v10 = v9;
      PC_CMTimeSaferAdd(&v11, &v10, (uint64_t)&v8);
      ++v5;
    }
    while (v5 < *((unsigned int *)a2 + 36));
  }
}

OZBehaviorCurveNode *TXFadeOnCurveNode::cloneNode(TXFadeOnCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E650C860;
  return v2;
}

void sub_1B29671A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXFadeOnCurveNode::compare(TXFadeOnCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 TXFadeOnCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 112);
  result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 152);
  return result;
}

void TXTypeOnBehavior::TXTypeOnBehavior(TXTypeOnBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  *v5 = &off_1E650C958;
  v5[2] = &unk_1E650CC10;
  v5[6] = &unk_1E650CE68;
  v5[42] = &unk_1E650CEC0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Type On Behavior Start"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 536), 0.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Type On Behavior End"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), 1.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 2u, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Type On Behavior Fade On"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 840), 0, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 840), 0);
}

void sub_1B29673A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  TXTextBehavior *v10;
  OZChannelPercent *v11;
  OZChannelPercent *v12;
  OZChannelBool *v13;

  OZChannelBool::~OZChannelBool(v13);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannelPercent::~OZChannelPercent(v11);
  TXTextBehavior::~TXTextBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2967400(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B29673F0);
}

void sub_1B2967410()
{
  JUMPOUT(0x1B29673F0);
}

void TXTypeOnBehavior::TXTypeOnBehavior(TXTypeOnBehavior *this, const TXTypeOnBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E650C958;
  *(_QWORD *)(v5 + 16) = &unk_1E650CC10;
  *(_QWORD *)(v5 + 48) = &unk_1E650CE68;
  *(_QWORD *)(v5 + 336) = &unk_1E650CEC0;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)(v5 + 536), (const OZChannelBase *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), (const OZChannelBase *)((char *)a2 + 688), v6);
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 840), (const OZChannelBase *)((char *)a2 + 840), v6);
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 63) = 0u;
}

void sub_1B29674BC(_Unwind_Exception *a1)
{
  TXTextBehavior *v1;
  OZChannelPercent *v2;
  OZChannelPercent *v3;

  OZChannelPercent::~OZChannelPercent(v3);
  OZChannelPercent::~OZChannelPercent(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior::~TXTypeOnBehavior(TXTypeOnBehavior *this)
{
  *(_QWORD *)this = &off_1E650C958;
  *((_QWORD *)this + 2) = &unk_1E650CC10;
  *((_QWORD *)this + 6) = &unk_1E650CE68;
  *((_QWORD *)this + 42) = &unk_1E650CEC0;
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 840));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 688));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 536));
  TXTextBehavior::~TXTextBehavior(this);
}

{
  TXTypeOnBehavior::~TXTypeOnBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXTypeOnBehavior::~TXTypeOnBehavior(TXTypeOnBehavior *this)
{
  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 16));
}

{
  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 48));
}

{
  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 336));
}

{
  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXTypeOnBehavior::~TXTypeOnBehavior((TXTypeOnBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

__n128 TXTypeOnBehavior::operator=(__n128 *a1, const void *a2)
{
  __n128 *v4;
  __n128 *v5;
  __n128 result;

  TXTextBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=((uint64_t)&a1[33].n128_i64[1], (uint64_t)&v4[33].n128_i64[1]);
  OZChannelBase::operator=((uint64_t)&a1[43], (uint64_t)&v5[43]);
  OZChannelBase::operator=((uint64_t)&a1[52].n128_i64[1], (uint64_t)&v5[52].n128_i64[1]);
  result = v5[62];
  a1[62] = result;
  return result;
}

void TXTypeOnBehavior::didAddToNode(TXTypeOnBehavior *this, OZSceneNode *lpsrc)
{
  char *v4;
  char *v5;

  if (lpsrc)
  {
    if (v4)
    {
      v5 = v4;
      OZChannelBehavior::didAddToNode(this, lpsrc);
      *((_QWORD *)this + 124) = v5 + 23968;
      *((_QWORD *)this + 125) = v5 + 24120;
      TXTypeOnBehavior::typeOnBehaviorDidLoad(this);
    }
  }
}

void TXTypeOnBehavior::typeOnBehaviorDidLoad(TXTypeOnBehavior *this)
{
  OZBehaviorCurveNode *v2;
  OZBehaviorCurveNode *v3;

  if (!*((_QWORD *)this + 127))
  {
    v2 = (OZBehaviorCurveNode *)operator new();
    OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this, *((OZChannel **)this + 124));
    *(_QWORD *)v2 = &off_1E650C768;
    *((_QWORD *)v2 + 4) = this;
    *((_QWORD *)this + 127) = v2;
    OZChannel::appendCurveProcessingNode(*((OZChannel **)this + 124), v2);
    OZChannelBehavior::didAddCurveNode((uint64_t)this, *((_QWORD *)this + 127));
    OZChannelBehavior::setAffectedChannel(this, *((OZChannelBase **)this + 124));
  }
  if (!*((_QWORD *)this + 126))
  {
    v3 = (OZBehaviorCurveNode *)operator new();
    OZBehaviorCurveNode::OZBehaviorCurveNode(v3, this, *((OZChannel **)this + 125));
    *(_QWORD *)v3 = &off_1E650C860;
    *((_QWORD *)v3 + 4) = this;
    *((_QWORD *)this + 126) = v3;
    OZChannel::appendCurveProcessingNode(*((OZChannel **)this + 125), v3);
    OZChannelBehavior::didAddCurveNode((uint64_t)this, *((_QWORD *)this + 126));
    OZChannelBehavior::setAffectedChannel(this, *((OZChannelBase **)this + 125));
  }
}

void sub_1B29677FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXTypeOnBehavior::willRemove(TXTypeOnBehavior *this)
{
  OZChannel::deleteCurveProcessingNode(*((OZChannel **)this + 124), *((void **)this + 127));
  *((_QWORD *)this + 127) = 0;
  OZChannel::deleteCurveProcessingNode(*((OZChannel **)this + 125), *((void **)this + 126));
  *((_QWORD *)this + 126) = 0;
  OZChannelBehavior::clearChannels(this);
  OZChannelBehavior::willRemove(this);
}

OZBehaviorCurveNode *TXTypeOnBehavior::createCurveNode(TXTypeOnBehavior *this, OZChannel *a2)
{
  OZBehaviorCurveNode *v4;

  v4 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v4, this, a2);
  *(_QWORD *)v4 = &off_1E650C768;
  *((_QWORD *)v4 + 4) = this;
  return v4;
}

void sub_1B29678D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXCrawlCurveNode::~TXCrawlCurveNode(TXCrawlCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double TXCrawlCurveNode::solveNode(TXCrawlCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v4;
  CMTime v6;

  v4 = *((_QWORD *)this + 4);
  v6 = *a2;
  return (*(double (**)(uint64_t, CMTime *))(*(_QWORD *)v4 + 680))(v4, &v6) + a4;
}

void TXCrawlCurveNode::solveNode(TXCrawlCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  double v7;
  uint64_t v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v11 = *(CMTime *)((_BYTE *)a2 + 5);
  v10 = *(CMTime *)((_BYTE *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    v6 = 0;
    do
    {
      v7 = *(double *)(v3 + 8 * v6);
      v8 = *((_QWORD *)this + 4);
      v9 = v10;
      *(double *)(v2 + 8 * v6) = v7 + (*(double (**)(uint64_t, CMTime *))(*(_QWORD *)v8 + 680))(v8, &v9);
      v13 = v10;
      v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v10);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

OZBehaviorCurveNode *TXCrawlCurveNode::cloneNode(TXCrawlCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E650CF00;
  return v2;
}

void sub_1B2967AA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXCrawlCurveNode::compare(TXCrawlCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 TXCrawlCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 112);
  result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 152);
  return result;
}

void TXCrawlBehavior::TXCrawlBehavior(TXCrawlBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  *v5 = &off_1E650CFF8;
  v5[2] = &unk_1E650D2B8;
  v5[6] = &unk_1E650D510;
  v5[42] = &unk_1E650D568;
  v5[67] = 0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Crawl Behavior Rate"));
  OZChannelDouble::OZChannelDouble((TXCrawlBehavior *)((char *)this + 544), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Crawl Behavior X Offset"));
  OZChannelDouble::OZChannelDouble((TXCrawlBehavior *)((char *)this + 696), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Crawl Behavior End Offset"));
  OZChannelDouble::OZChannelDouble((TXCrawlBehavior *)((char *)this + 848), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 848), 0);
}

void sub_1B2967C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  TXTextBehavior *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;

  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  TXTextBehavior::~TXTextBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2967CF0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2967CE0);
}

void sub_1B2967D00()
{
  JUMPOUT(0x1B2967CE0);
}

void TXCrawlBehavior::TXCrawlBehavior(TXCrawlBehavior *this, const TXCrawlBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E650CFF8;
  *(_QWORD *)(v5 + 16) = &unk_1E650D2B8;
  *(_QWORD *)(v5 + 48) = &unk_1E650D510;
  *(_QWORD *)(v5 + 336) = &unk_1E650D568;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 544), (const OZChannelBase *)((char *)a2 + 544), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 68) = &off_1E6551358;
  *((_QWORD *)this + 70) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 696), (const OZChannelBase *)((char *)a2 + 696), v6);
  *((_QWORD *)this + 87) = &off_1E6551358;
  *((_QWORD *)this + 89) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 848), (const OZChannelBase *)((char *)a2 + 848), v6);
  *((_QWORD *)this + 106) = &off_1E6551358;
  *((_QWORD *)this + 108) = &unk_1E65516B8;
}

void sub_1B2967DD8(_Unwind_Exception *a1)
{
  TXTextBehavior *v1;
  OZChannel *v2;
  OZChannel *v3;

  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXCrawlBehavior::~TXCrawlBehavior(TXCrawlBehavior *this)
{
  *(_QWORD *)this = &off_1E650CFF8;
  *((_QWORD *)this + 2) = &unk_1E650D2B8;
  *((_QWORD *)this + 6) = &unk_1E650D510;
  *((_QWORD *)this + 42) = &unk_1E650D568;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 848));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 544));
  TXTextBehavior::~TXTextBehavior(this);
}

{
  TXCrawlBehavior::~TXCrawlBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXCrawlBehavior::~TXCrawlBehavior(TXCrawlBehavior *this)
{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 16));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 48));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 336));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t TXCrawlBehavior::operator=(uint64_t a1, const void *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  TXTextBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  *(_QWORD *)(a1 + 536) = v4[67];
  OZChannelBase::operator=(a1 + 544, (uint64_t)(v4 + 68));
  OZChannelBase::operator=(a1 + 696, (uint64_t)(v5 + 87));
  return OZChannelBase::operator=(a1 + 848, (uint64_t)(v5 + 106));
}

void TXCrawlBehavior::didAddToNode(TXCrawlBehavior *this, OZSceneNode *lpsrc)
{
  char *v4;
  char *v5;
  OZChannel *v6;
  OZBehaviorCurveNode *v7;

  if (lpsrc)
  {
    if (v4)
    {
      v5 = v4;
      *((_QWORD *)this + 67) = v4;
      OZChannelBehavior::didAddToNode(this, lpsrc);
      v6 = (OZChannel *)(v5 + 1552);
      v7 = (OZBehaviorCurveNode *)operator new();
      OZBehaviorCurveNode::OZBehaviorCurveNode(v7, this, v6);
      *(_QWORD *)v7 = &off_1E650CF00;
      *((_QWORD *)v7 + 4) = this;
      OZChannel::appendCurveProcessingNode(v6, v7);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v7);
      OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)v6);
    }
  }
}

void sub_1B2968060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXCrawlBehavior::getXOffset(TXCrawlBehavior *this, CMTime *a2)
{
  uint64_t v3;
  __n128 FrameDuration;
  Float64 v5;
  CMTime *v6;
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12[2];
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime time2;
  CMTime time1;

  memset(&v15, 0, sizeof(v15));
  (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v15);
  v14 = v15;
  if ((*(unsigned int (**)(TXCrawlBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v14, 1, 1, 1))
  {
    v3 = (*(uint64_t (**)(TXCrawlBehavior *, double))(*(_QWORD *)this + 336))(this, 0.0);
    memset(&v13, 0, sizeof(v13));
    if (v3)
      FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), (__n128 *)&v13);
    else
      OZFigTimeForChannelSeconds(&v13, 0.0333333333, 0x40000);
    (*(void (**)(CMTime *__return_ptr, TXCrawlBehavior *, __n128))(*(_QWORD *)this + 608))(v12, this, FrameDuration);
    memset(&v11, 0, sizeof(v11));
    time2 = v12[0];
    time1 = v15;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v11);
    memset(&v10, 0, sizeof(v10));
    v9 = v12[1];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 848), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v13, &v8, v5);
    time1 = v9;
    time2 = v8;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v10);
    time1 = v11;
    time2 = v10;
    if (CMTimeCompare(&time1, &time2) >= 0)
      v6 = &v10;
    else
      v6 = &v11;
    v7 = *v6;
    CMTimeGetSeconds(&v7);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 544), &v11, 0.0);
  }
}

void TXCrawlRightBehavior::TXCrawlRightBehavior(TXCrawlRightBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  TXCrawlBehavior::TXCrawlBehavior(this, a2, a3, a4);
  *v4 = &off_1E650D5A8;
  v4[2] = &unk_1E650D868;
  v4[6] = &unk_1E650DAC0;
  v4[42] = &unk_1E650DB18;
}

void TXCrawlRightBehavior::TXCrawlRightBehavior(TXCrawlRightBehavior *this, const TXCrawlRightBehavior *a2, char a3)
{
  _QWORD *v3;

  TXCrawlBehavior::TXCrawlBehavior(this, a2, a3);
  *v3 = &off_1E650D5A8;
  v3[2] = &unk_1E650D868;
  v3[6] = &unk_1E650DAC0;
  v3[42] = &unk_1E650DB18;
}

void `non-virtual thunk to'TXCrawlRightBehavior::~TXCrawlRightBehavior(TXCrawlRightBehavior *this)
{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 16));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 48));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 336));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlRightBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void TXCrawlRightBehavior::~TXCrawlRightBehavior(TXCrawlRightBehavior *this)
{
  TXCrawlBehavior::~TXCrawlBehavior(this);
  JUMPOUT(0x1B5E29170);
}

double TXCrawlRightBehavior::getXOffset(TXCrawlRightBehavior *this, CMTime *a2)
{
  double v4;
  double v5;
  double v6;
  CMTime v8;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 696), a2, 0.0);
  v5 = v4;
  v8 = *a2;
  TXCrawlBehavior::getXOffset(this, &v8);
  return v5 + v6;
}

void TXCrawlLeftBehavior::TXCrawlLeftBehavior(TXCrawlLeftBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  TXCrawlBehavior::TXCrawlBehavior(this, a2, a3, a4);
  *v4 = &off_1E650DB40;
  v4[2] = &unk_1E650DE00;
  v4[6] = &unk_1E650E058;
  v4[42] = &unk_1E650E0B0;
}

void TXCrawlLeftBehavior::TXCrawlLeftBehavior(TXCrawlLeftBehavior *this, const TXCrawlLeftBehavior *a2, char a3)
{
  _QWORD *v3;

  TXCrawlBehavior::TXCrawlBehavior(this, a2, a3);
  *v3 = &off_1E650DB40;
  v3[2] = &unk_1E650DE00;
  v3[6] = &unk_1E650E058;
  v3[42] = &unk_1E650E0B0;
}

void `non-virtual thunk to'TXCrawlLeftBehavior::~TXCrawlLeftBehavior(TXCrawlLeftBehavior *this)
{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 16));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 48));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 336));
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXCrawlBehavior::~TXCrawlBehavior((TXCrawlLeftBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void TXCrawlLeftBehavior::~TXCrawlLeftBehavior(TXCrawlLeftBehavior *this)
{
  TXCrawlBehavior::~TXCrawlBehavior(this);
  JUMPOUT(0x1B5E29170);
}

double TXCrawlLeftBehavior::getXOffset(TXCrawlLeftBehavior *this, CMTime *a2)
{
  double v4;
  double v5;
  double v6;
  CMTime v8;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 696), a2, 0.0);
  v5 = v4;
  v8 = *a2;
  TXCrawlBehavior::getXOffset(this, &v8);
  return v5 - v6;
}

void TXScrollCurveNode::~TXScrollCurveNode(TXScrollCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

double TXScrollCurveNode::solveNode(TXScrollCurveNode *this, const CMTime *a2, double a3, double a4)
{
  uint64_t v4;
  CMTime v6;

  v4 = *((_QWORD *)this + 4);
  v6 = *a2;
  return (*(double (**)(uint64_t, CMTime *))(*(_QWORD *)v4 + 680))(v4, &v6) + a4;
}

void TXScrollCurveNode::solveNode(TXScrollCurveNode *this, OZCurveNodeParam *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v6;
  double v7;
  uint64_t v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  v2 = *((_QWORD *)a2 + 19);
  v3 = *((_QWORD *)a2 + 10);
  v11 = *(CMTime *)((_BYTE *)a2 + 5);
  v10 = *(CMTime *)((_BYTE *)a2 + 4);
  if (*((_DWORD *)a2 + 36))
  {
    v6 = 0;
    do
    {
      v7 = *(double *)(v3 + 8 * v6);
      v8 = *((_QWORD *)this + 4);
      v9 = v10;
      *(double *)(v2 + 8 * v6) = v7 + (*(double (**)(uint64_t, CMTime *))(*(_QWORD *)v8 + 680))(v8, &v9);
      v13 = v10;
      v12 = v11;
      PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v10);
      ++v6;
    }
    while (v6 < *((unsigned int *)a2 + 36));
  }
}

OZBehaviorCurveNode *TXScrollCurveNode::cloneNode(TXScrollCurveNode *this)
{
  OZBehaviorCurveNode *v2;

  v2 = (OZBehaviorCurveNode *)operator new();
  OZBehaviorCurveNode::OZBehaviorCurveNode(v2, this);
  *(_QWORD *)v2 = &off_1E650E108;
  return v2;
}

void sub_1B2968734(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

uint64_t TXScrollCurveNode::compare(TXScrollCurveNode *this, const OZCurveNode *lpsrc)
{
  if (lpsrc)
  return 0;
}

__n128 TXScrollCurveNode::getNeededRange(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a2 + 112);
  result = *(__n128 *)(a2 + 120);
  *(__n128 *)(a2 + 48) = result;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a2 + 144);
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a2 + 152);
  return result;
}

void TXScrollBehavior::TXScrollBehavior(TXScrollBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  *v5 = &off_1E650E200;
  v5[2] = &unk_1E650E4D8;
  v5[6] = &unk_1E650E730;
  v5[42] = &unk_1E650E788;
  v5[67] = 0;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Scroll Behavior Rate"));
  OZChannelDouble::OZChannelDouble((TXScrollBehavior *)((char *)this + 544), 10.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Scroll Behavior Y Offset"));
  OZChannelDouble::OZChannelDouble((TXScrollBehavior *)((char *)this + 696), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Scroll Behavior End Offset"));
  OZChannelDouble::OZChannelDouble((TXScrollBehavior *)((char *)this + 848), &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 848), 0);
}

void sub_1B2968928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  TXTextBehavior *v10;
  OZChannel *v11;
  OZChannel *v12;
  OZChannel *v13;

  OZChannel::~OZChannel(v13);
  OZChannel::~OZChannel(v12);
  OZChannel::~OZChannel(v11);
  TXTextBehavior::~TXTextBehavior(v10);
  _Unwind_Resume(a1);
}

void sub_1B2968984(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  JUMPOUT(0x1B2968974);
}

void sub_1B2968994()
{
  JUMPOUT(0x1B2968974);
}

void TXScrollBehavior::TXScrollBehavior(TXScrollBehavior *this, const TXScrollBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E650E200;
  *(_QWORD *)(v5 + 16) = &unk_1E650E4D8;
  *(_QWORD *)(v5 + 48) = &unk_1E650E730;
  *(_QWORD *)(v5 + 336) = &unk_1E650E788;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 544), (const OZChannelBase *)((char *)a2 + 544), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 68) = &off_1E6551358;
  *((_QWORD *)this + 70) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 696), (const OZChannelBase *)((char *)a2 + 696), v6);
  *((_QWORD *)this + 87) = &off_1E6551358;
  *((_QWORD *)this + 89) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 848), (const OZChannelBase *)((char *)a2 + 848), v6);
  *((_QWORD *)this + 106) = &off_1E6551358;
  *((_QWORD *)this + 108) = &unk_1E65516B8;
}

void sub_1B2968A6C(_Unwind_Exception *a1)
{
  TXTextBehavior *v1;
  OZChannel *v2;
  OZChannel *v3;

  OZChannel::~OZChannel(v3);
  OZChannel::~OZChannel(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXScrollBehavior::~TXScrollBehavior(TXScrollBehavior *this)
{
  *(_QWORD *)this = &off_1E650E200;
  *((_QWORD *)this + 2) = &unk_1E650E4D8;
  *((_QWORD *)this + 6) = &unk_1E650E730;
  *((_QWORD *)this + 42) = &unk_1E650E788;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 848));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 544));
  TXTextBehavior::~TXTextBehavior(this);
}

{
  TXScrollBehavior::~TXScrollBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXScrollBehavior::~TXScrollBehavior(TXScrollBehavior *this)
{
  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 16));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 48));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 336));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t TXScrollBehavior::operator=(uint64_t a1, const void *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  TXTextBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  *(_QWORD *)(a1 + 536) = v4[67];
  OZChannelBase::operator=(a1 + 544, (uint64_t)(v4 + 68));
  OZChannelBase::operator=(a1 + 696, (uint64_t)(v5 + 87));
  return OZChannelBase::operator=(a1 + 848, (uint64_t)(v5 + 106));
}

void TXScrollBehavior::didAddToNode(TXScrollBehavior *this, OZSceneNode *lpsrc)
{
  char *v4;
  char *v5;
  OZChannel *v6;
  OZBehaviorCurveNode *v7;

  if (lpsrc)
  {
    if (v4)
    {
      v5 = v4;
      *((_QWORD *)this + 67) = v4;
      OZChannelBehavior::didAddToNode(this, lpsrc);
      v6 = (OZChannel *)(v5 + 1704);
      v7 = (OZBehaviorCurveNode *)operator new();
      OZBehaviorCurveNode::OZBehaviorCurveNode(v7, this, v6);
      *(_QWORD *)v7 = &off_1E650E108;
      *((_QWORD *)v7 + 4) = this;
      OZChannel::appendCurveProcessingNode(v6, v7);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v7);
      OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)v6);
    }
  }
}

void sub_1B2968CF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXScrollBehavior::getYOffset(TXScrollBehavior *this, CMTime *a2)
{
  uint64_t v3;
  __n128 FrameDuration;
  Float64 v5;
  CMTime *v6;
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime v12[2];
  CMTime v13;
  CMTime v14;
  CMTime v15;
  CMTime time2;
  CMTime time1;

  memset(&v15, 0, sizeof(v15));
  (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v15);
  v14 = v15;
  if ((*(unsigned int (**)(TXScrollBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v14, 1, 1, 1))
  {
    v3 = (*(uint64_t (**)(TXScrollBehavior *, double))(*(_QWORD *)this + 336))(this, 0.0);
    memset(&v13, 0, sizeof(v13));
    if (v3)
      FrameDuration = OZSceneSettings::getFrameDuration((OZSceneSettings *)(v3 + 336), (__n128 *)&v13);
    else
      OZFigTimeForChannelSeconds(&v13, 0.0333333333, 0x40000);
    (*(void (**)(CMTime *__return_ptr, TXScrollBehavior *, __n128))(*(_QWORD *)this + 608))(v12, this, FrameDuration);
    memset(&v11, 0, sizeof(v11));
    time2 = v12[0];
    time1 = v15;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v11);
    memset(&v10, 0, sizeof(v10));
    v9 = v12[1];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 848), MEMORY[0x1E0CA2E68], 0.0);
    operator*(&v13, &v8, v5);
    time1 = v9;
    time2 = v8;
    PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v10);
    time1 = v11;
    time2 = v10;
    if (CMTimeCompare(&time1, &time2) >= 0)
      v6 = &v10;
    else
      v6 = &v11;
    v7 = *v6;
    CMTimeGetSeconds(&v7);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 544), &v11, 0.0);
  }
}

void TXScrollUpBehavior::TXScrollUpBehavior(TXScrollUpBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  TXScrollBehavior::TXScrollBehavior(this, a2, a3, a4);
  *v4 = &off_1E650E7C8;
  v4[2] = &unk_1E650EAA0;
  v4[6] = &unk_1E650ECF8;
  v4[42] = &unk_1E650ED50;
}

void TXScrollUpBehavior::TXScrollUpBehavior(TXScrollUpBehavior *this, const TXScrollUpBehavior *a2, char a3)
{
  _QWORD *v3;

  TXScrollBehavior::TXScrollBehavior(this, a2, a3);
  *v3 = &off_1E650E7C8;
  v3[2] = &unk_1E650EAA0;
  v3[6] = &unk_1E650ECF8;
  v3[42] = &unk_1E650ED50;
}

void `non-virtual thunk to'TXScrollUpBehavior::~TXScrollUpBehavior(TXScrollUpBehavior *this)
{
  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 16));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 48));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 336));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollUpBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void TXScrollUpBehavior::~TXScrollUpBehavior(TXScrollUpBehavior *this)
{
  TXScrollBehavior::~TXScrollBehavior(this);
  JUMPOUT(0x1B5E29170);
}

double TXScrollUpBehavior::getYOffset(TXScrollUpBehavior *this, CMTime *a2)
{
  double v4;
  double v5;
  double v6;
  CMTime v8;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 696), a2, 0.0);
  v5 = v4;
  v8 = *a2;
  TXScrollBehavior::getYOffset(this, &v8);
  return v5 + v6;
}

void TXScrollDownBehavior::TXScrollDownBehavior(TXScrollDownBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v4;

  TXScrollBehavior::TXScrollBehavior(this, a2, a3, a4);
  *v4 = &off_1E650ED78;
  v4[2] = &unk_1E650F050;
  v4[6] = &unk_1E650F2A8;
  v4[42] = &unk_1E650F300;
}

void TXScrollDownBehavior::TXScrollDownBehavior(TXScrollDownBehavior *this, const TXScrollDownBehavior *a2, char a3)
{
  _QWORD *v3;

  TXScrollBehavior::TXScrollBehavior(this, a2, a3);
  *v3 = &off_1E650ED78;
  v3[2] = &unk_1E650F050;
  v3[6] = &unk_1E650F2A8;
  v3[42] = &unk_1E650F300;
}

void `non-virtual thunk to'TXScrollDownBehavior::~TXScrollDownBehavior(TXScrollDownBehavior *this)
{
  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 16));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 48));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 336));
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXScrollBehavior::~TXScrollBehavior((TXScrollDownBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

void TXScrollDownBehavior::~TXScrollDownBehavior(TXScrollDownBehavior *this)
{
  TXScrollBehavior::~TXScrollBehavior(this);
  JUMPOUT(0x1B5E29170);
}

double TXScrollDownBehavior::getYOffset(TXScrollDownBehavior *this, CMTime *a2)
{
  double v4;
  double v5;
  double v6;
  CMTime v8;

  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 696), a2, 0.0);
  v5 = v4;
  v8 = *a2;
  TXScrollBehavior::getYOffset(this, &v8);
  return v5 - v6;
}

uint64_t TXScrollBehavior::getRateChan(TXScrollBehavior *this)
{
  return (uint64_t)this + 544;
}

uint64_t TXScrollBehavior::getOffsetChan(TXScrollBehavior *this)
{
  return (uint64_t)this + 696;
}

void TXTextTrackingBehavior::TXTextTrackingBehavior(TXTextTrackingBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  _QWORD *v5;
  PCString v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  *v5 = &off_1E650F358;
  v5[2] = &unk_1E650F618;
  v5[6] = &unk_1E650F870;
  v5[42] = &unk_1E650F8C8;
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Tracking Behavior Rate"));
  OZChannelDouble::OZChannelDouble((TXTextTrackingBehavior *)((char *)this + 536), 2.0, &v6, (OZChannelFolder *)((char *)this + 56), 0xC8u, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Tracking Behavior Rate"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), 0.1, &v6, (OZChannelFolder *)((char *)this + 56), 0xCAu, 0, 0, 0);
  PCString::~PCString(&v6);
  PCURL::PCURL((PCURL *)&v6, CFSTR("Text Tracking Behavior End Offset"));
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 840), &v6, (OZChannelFolder *)((char *)this + 56), 0xC9u, 0, 0, 0);
  PCString::~PCString(&v6);
  *((_BYTE *)this + 1000) = 0;
  OZChannel::setSliderMin((OZChannel *)((char *)this + 536), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 536), 10.0);
  OZChannel::setMin((OZChannel *)((char *)this + 688), -1000.0);
  OZChannel::setMax((OZChannel *)((char *)this + 688), 1000.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 688), 0.0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 688), 1.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 840), 0);
  OZChannel::setSliderMax((OZChannel *)((char *)this + 840), 100.0);
  *((_BYTE *)this + 1000) = 0;
}

void sub_1B29693F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  TXTextBehavior *v10;
  OZChannel *v11;
  OZChannelPercent *v12;

  PCString::~PCString(&a10);
  OZChannelPercent::~OZChannelPercent(v12);
  OZChannel::~OZChannel(v11);
  TXTextBehavior::~TXTextBehavior(v10);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior::TXTextTrackingBehavior(TXTextTrackingBehavior *this, const TXTextTrackingBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E650F358;
  *(_QWORD *)(v5 + 16) = &unk_1E650F618;
  *(_QWORD *)(v5 + 48) = &unk_1E650F870;
  *(_QWORD *)(v5 + 336) = &unk_1E650F8C8;
  v6 = (OZChannelFolder *)(v5 + 56);
  OZChannel::OZChannel((OZChannel *)(v5 + 536), (const OZChannelBase *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 67) = &off_1E6551358;
  *((_QWORD *)this + 69) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 688), (const OZChannelBase *)((char *)a2 + 688), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 840), (const OZChannelBase *)((char *)a2 + 840), v6);
  *((_QWORD *)this + 105) = &off_1E6551AF8;
  *((_QWORD *)this + 107) = &unk_1E6551E58;
  *((_BYTE *)this + 1000) = 0;
}

void sub_1B296953C(_Unwind_Exception *a1)
{
  TXTextBehavior *v1;
  OZChannel *v2;
  OZChannelPercent *v3;

  OZChannelPercent::~OZChannelPercent(v3);
  OZChannel::~OZChannel(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior::~TXTextTrackingBehavior(TXTextTrackingBehavior *this)
{
  *(_QWORD *)this = &off_1E650F358;
  *((_QWORD *)this + 2) = &unk_1E650F618;
  *((_QWORD *)this + 6) = &unk_1E650F870;
  *((_QWORD *)this + 42) = &unk_1E650F8C8;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 840));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 688));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 536));
  TXTextBehavior::~TXTextBehavior(this);
}

{
  TXTextTrackingBehavior::~TXTextTrackingBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXTextTrackingBehavior::~TXTextTrackingBehavior(TXTextTrackingBehavior *this)
{
  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 16));
}

{
  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 48));
}

{
  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 336));
}

{
  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextTrackingBehavior::~TXTextTrackingBehavior((TXTextTrackingBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

uint64_t TXTextTrackingBehavior::operator=(uint64_t a1, const void *a2)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t result;

  TXTextBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  OZChannelBase::operator=(a1 + 536, (uint64_t)(v4 + 536));
  OZChannelBase::operator=(a1 + 688, (uint64_t)(v5 + 688));
  result = OZChannelBase::operator=(a1 + 840, (uint64_t)(v5 + 840));
  *(_BYTE *)(a1 + 1000) = v5[1000];
  return result;
}

void TXTextTrackingBehavior::didAddToNode(TXTextTrackingBehavior *this, OZSceneNode *lpsrc)
{
  char *v4;
  char *v5;
  OZChannel *v6;
  OZChannelBase *v7;
  double v8;
  double v9;
  double v10;
  OZBehaviorCurveNode *v11;
  OZBehaviorCurveNode *v12;
  OZChannel *v13;

  if (lpsrc)
  {
    if (v4)
    {
      v5 = v4;
      *((_QWORD *)this + 124) = v4;
      *((_BYTE *)this + 1000) = 1;
      v6 = (OZChannel *)(v4 + 60520);
      OZChannel::getValueAsDouble((OZChannel *)(v4 + 60520), MEMORY[0x1E0CA2E68], 0.0);
      v7 = (OZChannelBase *)((char *)this + 688);
      if (v8 >= 4.0)
      {
        OZChannelBase::resetFlag(v7, 2, 0);
        OZChannelBase::setFlag((OZChannelBase *)((char *)this + 536), 2, 0);
      }
      else
      {
        OZChannelBase::setFlag(v7, 2, 0);
        OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 536), 2, 0);
      }
      OZChannelBehavior::didAddToNode(this, lpsrc);
      OZChannel::getValueAsDouble(v6, MEMORY[0x1E0CA2E68], 0.0);
      v10 = v9;
      v11 = (OZBehaviorCurveNode *)operator new();
      v12 = v11;
      if (v10 >= 4.0)
        v13 = (OZChannel *)(v5 + 19752);
      else
        v13 = (OZChannel *)(v5 + 19600);
      TXGrowShrinkCurveNode1D::TXGrowShrinkCurveNode1D(v11, this, v13);
      OZChannel::appendCurveProcessingNode(v13, v12);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v12);
      OZChannelBehavior::setAffectedChannel(this, (OZChannelBase *)v13);
    }
  }
}

void sub_1B2969888(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior::willRemove(TXTextLayout **this)
{
  TXTextLayout::invalidateLayout(this[124]);
  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this[124]);
  OZChannelBehavior::willRemove((OZChannelBehavior *)this);
}

OZBehaviorCurveNode *TXTextTrackingBehavior::createCurveNode(TXTextTrackingBehavior *this, OZChannel *a2)
{
  OZBehaviorCurveNode *v4;

  v4 = (OZBehaviorCurveNode *)operator new();
  TXGrowShrinkCurveNode1D::TXGrowShrinkCurveNode1D(v4, this, a2);
  return v4;
}

void sub_1B2969934(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

void TXTextTrackingBehavior::getMultiplier(TXTextTrackingBehavior *this, CMTime *a2)
{
  double v3;
  uint64_t v4;
  Float64 Seconds;
  const CMTime *v6;
  OZScene *v7;
  double v8;
  double v9;
  OZSceneSettings *v10;
  OZChannel *v11;
  CMTime v12;
  CMTime v13;
  CMTime time;
  CMTime v15[2];
  CMTime v16;
  CMTime v17;
  CMTime v18;
  CMTime v19;

  memset(&v17, 0, sizeof(v17));
  (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 47) + 32) + 336))(&v17);
  v16 = v17;
  if ((*(unsigned int (**)(TXTextTrackingBehavior *, CMTime *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)this + 296))(this, &v16, 1, 1, 1))
  {
    (*(void (**)(CMTime *__return_ptr, TXTextTrackingBehavior *, double))(*(_QWORD *)this + 608))(v15, this, 0.0);
    v18 = v15[0];
    v19 = v17;
    v3 = PC_CMTimeSaferSubtract(&v19, &v18, (uint64_t)&v13);
    v4 = (*(uint64_t (**)(TXTextTrackingBehavior *, double))(*(_QWORD *)this + 336))(this, v3);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v4 + 336), (__n128 *)&v19);
    operator/((__int128 *)&v13.value, (uint64_t)&v19, (uint64_t)&time);
    Seconds = CMTimeGetSeconds(&time);
    v12 = v15[1];
    CMTimeGetSeconds(&v12);
    (*(uint64_t (**)(TXTextTrackingBehavior *))(*(_QWORD *)this + 336))(this);
    v6 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 840), MEMORY[0x1E0CA2E68], 0.0);
    memset(&v19, 0, sizeof(v19));
    v7 = (OZScene *)(*(uint64_t (**)(TXTextTrackingBehavior *))(*(_QWORD *)this + 336))(this);
    OZScene::getCurrentTime(v7, (__n128 *)&v19);
    OZChannel::getValueAsDouble((OZChannel *)(*((_QWORD *)this + 124) + 60520), v6, 0.0);
    v9 = v8;
    v10 = (OZSceneSettings *)((*(uint64_t (**)(TXTextTrackingBehavior *))(*(_QWORD *)this + 336))(this) + 336);
    if (v9 >= 4.0)
      v11 = (OZChannel *)((char *)this + 688);
    else
      v11 = (OZChannel *)((char *)this + 536);
    OZSceneSettings::getFrameDuration(v10, (__n128 *)&v13);
    operator*(&v13, &v18, Seconds);
    OZChannel::getValueAsDouble(v11, &v18, 0.0);
    OZBehavior::getSceneFrameRate(this);
  }
}

uint64_t `non-virtual thunk to'TXTextTrackingBehavior::parseEnd(TXTextTrackingBehavior *this, PCSerializerReadStream *a2)
{
  return OZBehavior::parseEnd((TXTextTrackingBehavior *)((char *)this - 48), a2);
}

void TXCollectionEnum::TXCollectionEnum(TXCollectionEnum *this, unsigned int a2, const PCString *a3, const PCString *a4, OZChannelFolder *a5, unsigned int a6, int a7, OZChannelImpl *a8, OZChannelInfo *a9)
{
  _QWORD *v9;

  OZChannelEnum::OZChannelEnum(this, a2, a3, a4, a5, a6, a7, a8, a9);
  *v9 = &off_1E650F920;
  v9[2] = &unk_1E650FC90;
}

void TXCollectionEnum::TXCollectionEnum(TXCollectionEnum *this, const TXCollectionEnum *a2, OZChannelFolder *a3)
{
  _QWORD *v3;

  OZChannelEnum::OZChannelEnum(this, a2, a3);
  *v3 = &off_1E650F920;
  v3[2] = &unk_1E650FC90;
}

void `non-virtual thunk to'TXCollectionEnum::~TXCollectionEnum(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this - 2);
}

{
  OZChannelEnum::~OZChannelEnum(this - 2);
  JUMPOUT(0x1B5E29170);
}

void TXCollectionEnum::~TXCollectionEnum(PCString *this)
{
  OZChannelEnum::~OZChannelEnum(this);
  JUMPOUT(0x1B5E29170);
}

void TXOldSequenceCurveNode::~TXOldSequenceCurveNode(TXOldSequenceCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

void TXOldSequenceCurveNode::solveNode(TXOldSequenceCurveNode *this, const CMTime *a2, double a3, double a4)
{
  int ValueAsInt;
  uint64_t v9;
  TXSequenceParams *v10;
  double v11;
  uint64_t v12;
  Float64 Seconds;
  CMTime v14;
  CMTime v15;
  CMTime v16;
  CMTime time;
  CMTime v18;
  CMTime v19;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*((_QWORD *)this + 4) + 29688), MEMORY[0x1E0CA2E68], 0.0);
  v9 = *((_QWORD *)this + 4);
  v10 = (TXSequenceParams *)(v9 + 27720);
  if (ValueAsInt)
  {
    TXSequenceParams::getInfluence((TXSequenceParams *)(v9 + 27720), a2, a3);
    memset(&v19, 0, sizeof(v19));
    v14 = *a2;
    TXSequenceParams::objectLocalToGlobalTime(v10, &v14, (uint64_t)&v19);
    OZChannel::getValueAsDouble(*((OZChannel **)this + 5), &v19, 0.0);
  }
  else
  {
    (*(void (**)(CMTime *__return_ptr))(**((_QWORD **)this + 2) + 320))(&v15);
    v19 = *a2;
    v18 = v15;
    v11 = PC_CMTimeSaferAdd(&v19, &v18, (uint64_t)&v16);
    v12 = (*(uint64_t (**)(_QWORD, double))(**((_QWORD **)this + 4) + 336))(*((_QWORD *)this + 4), v11);
    operator*(&v16, &time, *(Float64 *)(v12 + 368));
    Seconds = CMTimeGetSeconds(&time);
    TXSequenceParams::getValue(v10, Seconds, a3, *((OZChannel **)this + 5), a4);
  }
}

double TXSequenceParams::getValue(TXSequenceParams *this, Float64 a2, double a3, OZChannel *a4, double a5)
{
  uint64_t v10;
  uint64_t v11;
  double Seconds;
  double v13;
  double v14;
  const CMTime *v15;
  double v16;
  double NumObjects;
  uint64_t v18;
  double v19;
  double v20;
  const CMTime *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int ValueAsInt;
  int v31;
  double v32;
  Float64 v33;
  uint64_t v34;
  double v35;
  double v37;
  double v38;
  double v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  double v43;
  double v44;
  CMTime v45;
  CMTime time;
  CMTime v47[2];
  CMTime v48;
  CMTime v49;
  CMTime v50;
  CMTime v51;

  memset(&v49, 0, sizeof(v49));
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 336))(*(_QWORD *)this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v10 + 336), (__n128 *)v47);
  operator*(v47, &v49, a2);
  v11 = *(_QWORD *)this;
  v48 = v49;
  if ((*(unsigned int (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v11 + 296))(v11, &v48, 0, 1, 1))
  {
    if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 696), MEMORY[0x1E0CA2E68], 0.0))
      v39 = (double)TXSequenceParams::shuffle(this, (const CMTime *)a3, a2);
    else
      v39 = a3;
    (*(void (**)(CMTime *__return_ptr))(**(_QWORD **)this + 608))(v47);
    time = v47[1];
    Seconds = CMTimeGetSeconds(&time);
    v13 = Seconds * *(double *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 336))(*(_QWORD *)this) + 368);
    v45 = v47[0];
    v14 = CMTimeGetSeconds(&v45);
    v38 = a2 - v14 * *(double *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 336))(*(_QWORD *)this) + 368);
    v43 = 0.0;
    v44 = 0.0;
    TXTextSequenceBehavior::getKeyframeExtent(*(TXTextSequenceBehavior **)this, &v44, &v43);
    if (vabdd_f64(v43, v44) >= 0.0000001)
      v16 = v43 - v44;
    else
      v16 = v13;
    v37 = v16;
    NumObjects = (double)TXSequenceParams::getNumObjects(this, v15);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 336))(*(_QWORD *)this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v18 + 336), (__n128 *)&v50);
    operator*(&v50, &v51, a2);
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1816), &v51, 0.0);
    v20 = -1.0 / (v19 + 1.0) + 1.0;
    v21 = (const CMTime *)MEMORY[0x1E0CA2E68];
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 544), MEMORY[0x1E0CA2E68], 0.0);
    v23 = v22;
    v24 = v13 / (v22 * (NumObjects - (NumObjects + -1.0) * v20));
    v25 = (1.0 - v20)
        * (v24
         * (double)TXSequenceParams::charIndexToSelectionIndex(this, v39, a2));
    v26 = v13 / v23;
    v27 = v38 / (v13 / v23);
    v28 = fmax(floor(v27 + 0.0000001), 0.0);
    v29 = v27 - v28;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), v21, 0.0);
    v31 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1000), v21, 0.0);
    v32 = 1.0 - v29;
    if (v31 != 1)
      v32 = v29;
    if (ValueAsInt == 1 && ((int)v28 & 0x80000001) == 1)
      v32 = 1.0 - v32;
    v33 = v37 * ((v26 * v32 - v25) / v24);
    v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 336))(*(_QWORD *)this);
    OZSceneSettings::getFrameDuration((OZSceneSettings *)(v34 + 336), (__n128 *)&v40);
    operator*(&v40, &v41, v33);
    v50 = v47[0];
    v51 = v41;
    PC_CMTimeSaferAdd(&v51, &v50, (uint64_t)&v42);
    OZChannel::getValueAsDouble(a4, &v42, 0.0);
    return v35;
  }
  return a5;
}

double TXSequenceParams::getInfluence(TXSequenceParams *this, const CMTime *a2, double a3)
{
  OZChannelBase *v6;
  uint64_t ObjectManipulator;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CMTimeEpoch epoch;
  double Seconds;
  double v15;
  const CMTime *v16;
  double v17;
  double Offset;
  double v19;
  double v20;
  double v21;
  double Span;
  double v23;
  double v24;
  double v25;
  CMTime v27;
  CMTime v28;
  CMTime v29;
  CMTime v30;
  CMTime time;
  __n128 v32;
  CMTimeEpoch v33;
  CMTime v34;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime time2;
  CMTime time1;

  v6 = (OZChannelBase *)((char *)this + 8);
  ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this + 8));
  memset(&v39, 0, sizeof(v39));
  v38 = *a2;
  TXSequenceParams::objectLocalToGlobalTime(this, &v38, (uint64_t)&v39);
  v8 = *(_QWORD *)this;
  v37 = v39;
  v9 = 0.0;
  if ((*(unsigned int (**)(uint64_t, CMTime *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 296))(v8, &v37, 0, 1, 1))
  {
    if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 1968), MEMORY[0x1E0CA2E68], 0.0))
      return 1.0;
    if (OZChannelBase::isEnabled(v6, 0, 1))
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 216))(ObjectManipulator);
      (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v10 + 712))(&v35);
      time2 = v35;
      time1 = v39;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        *(_OWORD *)&v39.value = *(_OWORD *)&v35.value;
        epoch = v35.epoch;
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v11 + 336), &v32);
        time1 = v35;
        time2 = v36;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v40);
        time1 = v40;
        *(__n128 *)&time2.value = v32;
        time2.epoch = v33;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v34);
        time1 = v39;
        time2 = v34;
        if (CMTimeCompare(&time1, &time2) < 1)
        {
LABEL_10:
          time = v39;
          Seconds = CMTimeGetSeconds(&time);
          v15 = Seconds
              * *(double *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator)
                          + 368);
          v16 = (const CMTime *)TXSequenceParams::charIndexToSelectionIndex(this, a3, v15);
          v9 = 0.0;
          if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 696), MEMORY[0x1E0CA2E68], 0.0))
            LODWORD(v16) = TXSequenceParams::shuffle(this, v16, v15);
          v17 = TXSequenceParams::normalizeIndex(this, v16, v15);
          v30 = v39;
          Offset = TXSequenceParams::getOffset(this, &v30);
          v29 = v39;
          v19 = Offset + TXSequenceParams::getStart(this, &v29);
          v28 = v39;
          TXSequenceParams::getEnd(this, &v28);
          v21 = Offset + v20;
          if (v19 <= Offset + v20)
          {
            v27 = v39;
            Span = TXSequenceParams::getSpan(this, &v27);
            OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1816), &v39, 0.0);
            v24 = Span * v23;
            if (v19 - v24 <= v17)
            {
              if (v17 >= v19)
              {
                v9 = 1.0;
                if (v17 >= v21)
                {
                  v25 = v21 + v24;
                  v9 = 0.0;
                  if (v25 > v17)
                    return 1.0 - (v17 - v21) / (v25 - v21);
                }
              }
              else
              {
                return (v17 - (v19 - v24)) / (v19 - (v19 - v24)) + 0.0;
              }
            }
          }
          return v9;
        }
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 264))(ObjectManipulator);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v12 + 336), &v32);
        time1 = v35;
        time2 = v36;
        PC_CMTimeSaferAdd(&time1, &time2, (uint64_t)&v40);
        time1 = v40;
        *(__n128 *)&time2.value = v32;
        time2.epoch = v33;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v34);
        *(_OWORD *)&v39.value = *(_OWORD *)&v34.value;
        epoch = v34.epoch;
      }
      v39.epoch = epoch;
      goto LABEL_10;
    }
  }
  return v9;
}

double TXSequenceParams::objectLocalToGlobalTime@<D0>(TXSequenceParams *this@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ObjectManipulator;
  uint64_t v6;
  uint64_t v7;
  CMTime v9;
  CMTime v10;
  CMTime v11;

  ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this + 8));
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 232))(ObjectManipulator);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 640))(v6);
  (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v7 + 320))(&v9);
  v11 = *a2;
  v10 = v9;
  return PC_CMTimeSaferAdd(&v11, &v10, a3);
}

void TXSequenceInfluenceCurveNode::~TXSequenceInfluenceCurveNode(TXSequenceInfluenceCurveNode *this)
{
  OZEaseInInterpolator::~OZEaseInInterpolator(this);
  JUMPOUT(0x1B5E29170);
}

void TXSequenceInfluenceCurveNode::solveNode(TXSequenceInfluenceCurveNode *this, const CMTime *a2, double a3, double a4)
{
  TXSequenceParams::getInfluence((TXSequenceParams *)(*((_QWORD *)this + 4) + 27720), a2, a3);
}

void TXSequenceParams::TXSequenceParams(TXSequenceParams *this, OZChannelFolder *a2, unsigned int a3, TXTextSequenceBehavior *a4)
{
  OZChannelFolder *v7;
  PCString v8;
  PCString v9;

  *(_QWORD *)this = a4;
  v7 = (OZChannelFolder *)((char *)this + 8);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Params"));
  OZChannelFolder::OZChannelFolder(v7, &v9, a2, a3, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Offset Behavior Enum"));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text Sequence Behavior Offset Behavior"));
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 136), &v9, &v8, v7, 0x6Bu, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Offset"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 392), 0.0, &v9, v7, 0x6Cu, 2u, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Repeat"));
  OZChannelDouble::OZChannelDouble((TXSequenceParams *)((char *)this + 544), 1.0, &v9, v7, 0x6Du, 16, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Random"));
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 696), &v9, v7, 0x69u, 0, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Random Seed"));
  OZChannelSeed::OZChannelSeed((OZChannelSeed *)((char *)this + 848), &v9, v7, 0x6Eu, 0, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Offset Direction Enum"));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text Sequence Behavior Offset Direction"));
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1000), &v9, &v8, v7, 0x68u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Select Enum"));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text Sequence Behavior Select"));
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1256), &v9, &v8, v7, 0x64u, 0, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Start"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1512), 0.0, &v9, v7, 0x65u, 2u, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior End"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1664), 0.1, &v9, v7, 0x66u, 2u, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Spread"));
  OZChannelDouble::OZChannelDouble((TXSequenceParams *)((char *)this + 1816), 1.0, &v9, v7, 0x67u, 0, 0, 0);
  PCString::~PCString(&v9);
  PCURL::PCURL((PCURL *)&v9, CFSTR("Text Sequence Behavior Map Animation Enum"));
  PCURL::PCURL((PCURL *)&v8, CFSTR("Text Sequence Behavior Map Animation"));
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1968), 1u, &v9, &v8, v7, 0x6Au, 16, 0, 0);
  PCString::~PCString(&v8);
  PCString::~PCString(&v9);
  *((_OWORD *)this + 139) = 0u;
  OZChannel::setMin((OZChannel *)((char *)this + 392), -1.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 392), -1.0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 544), 0);
  OZChannel::setMin((OZChannel *)((char *)this + 544), 0.0);
  OZChannel::setMin((OZChannel *)((char *)this + 1816), 0.0);
  OZChannel::setSliderMin((OZChannel *)((char *)this + 1816), 0.0);
}

void sub_1B296AAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannel *a10, OZChannelBool *a11, OZChannelEnum *a12, PCString a13, PCString a14)
{
  OZChannelFolder *v14;
  OZChannelPercent *v15;
  OZChannelPercent *v16;
  OZChannel *v17;
  OZChannel *v18;
  OZChannelEnum *v19;
  OZChannelEnum *v20;
  OZChannelPercent *v21;

  PCString::~PCString(&a13);
  PCString::~PCString(&a14);
  OZChannel::~OZChannel(v18);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelPercent::~OZChannelPercent(v21);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannelEnum::~OZChannelEnum(v19);
  OZChannel::~OZChannel(a10);
  OZChannelBool::~OZChannelBool(a11);
  OZChannel::~OZChannel(v17);
  OZChannelPercent::~OZChannelPercent(v16);
  OZChannelEnum::~OZChannelEnum(a12);
  OZChannelFolder::~OZChannelFolder(v14);
  _Unwind_Resume(a1);
}

void TXSequenceParams::TXSequenceParams(TXSequenceParams *this, const TXSequenceParams *a2, OZChannelFolder *a3, TXTextSequenceBehavior *a4)
{
  OZChannelEnum *v6;
  OZChannelFolder *v7;

  *(_QWORD *)this = a4;
  v6 = (TXSequenceParams *)((char *)this + 136);
  v7 = (OZChannelFolder *)((char *)this + 8);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8), (const OZChannelFolder *)((char *)a2 + 8), a3);
  OZChannelEnum::OZChannelEnum(v6, (const TXSequenceParams *)((char *)a2 + 136), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 392), (const OZChannelBase *)((char *)a2 + 392), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 544), (const OZChannelBase *)((char *)a2 + 544), v7);
  *((_QWORD *)this + 68) = &off_1E6551358;
  *((_QWORD *)this + 70) = &unk_1E65516B8;
  OZChannelBool::OZChannelBool((OZChannelBool *)((char *)this + 696), (const OZChannelBase *)((char *)a2 + 696), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 848), (const OZChannelBase *)((char *)a2 + 848), v7);
  *((_QWORD *)this + 106) = &off_1E65531D8;
  *((_QWORD *)this + 108) = &unk_1E6553538;
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1000), (const TXSequenceParams *)((char *)a2 + 1000), v7);
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1256), (const TXSequenceParams *)((char *)a2 + 1256), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1512), (const OZChannelBase *)((char *)a2 + 1512), v7);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1664), (const OZChannelBase *)((char *)a2 + 1664), v7);
  OZChannel::OZChannel((OZChannel *)((char *)this + 1816), (const OZChannelBase *)((char *)a2 + 1816), v7);
  *((_QWORD *)this + 227) = &off_1E6551358;
  *((_QWORD *)this + 229) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((TXSequenceParams *)((char *)this + 1968), (const TXSequenceParams *)((char *)a2 + 1968), v7);
  *((_QWORD *)this + 278) = 0;
  *((_DWORD *)this + 558) = 0;
  *((_DWORD *)this + 559) = *((_DWORD *)a2 + 559);
}

void sub_1B296AE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, OZChannel *a9, OZChannelBool *a10, OZChannel *a11, OZChannelPercent *a12)
{
  OZChannelFolder *v12;
  OZChannelEnum *v13;
  OZChannelPercent *v14;
  OZChannelPercent *v15;
  OZChannel *v16;
  OZChannelEnum *v17;
  OZChannelEnum *v18;

  OZChannel::~OZChannel(v16);
  OZChannelPercent::~OZChannelPercent(v15);
  OZChannelPercent::~OZChannelPercent(v14);
  OZChannelEnum::~OZChannelEnum(v18);
  OZChannelEnum::~OZChannelEnum(v17);
  OZChannel::~OZChannel(a9);
  OZChannelBool::~OZChannelBool(a10);
  OZChannel::~OZChannel(a11);
  OZChannelPercent::~OZChannelPercent(a12);
  OZChannelEnum::~OZChannelEnum(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void sub_1B296AEC4()
{
  JUMPOUT(0x1B296AE8CLL);
}

void sub_1B296AECC()
{
  JUMPOUT(0x1B296AE94);
}

void sub_1B296AED4()
{
  JUMPOUT(0x1B296AE9CLL);
}

void sub_1B296AEDC()
{
  JUMPOUT(0x1B296AEA4);
}

void sub_1B296AEE4()
{
  JUMPOUT(0x1B296AEACLL);
}

void sub_1B296AEEC()
{
  JUMPOUT(0x1B296AEB4);
}

void TXSequenceParams::~TXSequenceParams(TXSequenceParams *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 278);
  if (v2)
  {
    MEMORY[0x1B5E2914C](v2, 0x1000C8052888210);
    *((_QWORD *)this + 278) = 0;
  }
  OZChannelEnum::~OZChannelEnum((TXSequenceParams *)((char *)this + 1968));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 1816));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1664));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 1512));
  OZChannelEnum::~OZChannelEnum((TXSequenceParams *)((char *)this + 1256));
  OZChannelEnum::~OZChannelEnum((TXSequenceParams *)((char *)this + 1000));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 848));
  OZChannelBool::~OZChannelBool((OZChannelBool *)((char *)this + 696));
  OZChannel::~OZChannel((OZChannel *)((char *)this + 544));
  OZChannelPercent::~OZChannelPercent((OZChannelPercent *)((char *)this + 392));
  OZChannelEnum::~OZChannelEnum((TXSequenceParams *)((char *)this + 136));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 8));
}

double TXSequenceParams::getOffset(TXSequenceParams *this, CMTime *a2)
{
  double v4;
  unsigned int ValueAsInt;
  CMTime *v6;
  int v7;
  const CMTime *v8;
  int v9;
  uint64_t ObjectManipulator;
  uint64_t v11;
  const CMTime *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  double Seconds;
  OZChannel *v24;
  int v25;
  double v26;
  BOOL v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  int v34;
  double v35;
  double v36;
  double v37;
  double v38;
  CMTime v40;
  __n128 v41;
  CMTimeEpoch v42;
  CMTime v43;
  CMTime v44;
  CMTime v45;
  CMTime time2;
  CMTime time1;

  v4 = 0.0;
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 136), a2, 0.0);
  v6 = (CMTime *)MEMORY[0x1E0CA2E68];
  v7 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1256), MEMORY[0x1E0CA2E68], 0.0);
  if (ValueAsInt >= 5)
  {
    if (ValueAsInt == 5)
    {
      v29 = 1.0 / (double)TXSequenceParams::getNumObjects(this, v8);
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1816), a2, 0.0);
      v31 = v30 * v29 + 1.0;
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 392), a2, 0.0);
      v33 = v32;
      v34 = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1000), a2, 0.0);
      v35 = 1.0 - v33;
      if (v34 != 1)
        v35 = v33;
      return v31 * v35 + 0.0;
    }
  }
  else
  {
    v9 = v7;
    ObjectManipulator = OZChannelBase::getObjectManipulator((OZChannelBase *)((char *)this + 8));
    if (ObjectManipulator)
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 216))(ObjectManipulator);
      (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v11 + 712))(&v44);
      v43 = v45;
      time1 = v45;
      time2 = *v6;
      if (CMTimeCompare(&time1, &time2) >= 1)
      {
        v13 = 1.0 / (double)TXSequenceParams::getNumObjects(this, v12);
        v14 = 0.0;
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1816), a2, 0.0);
        v16 = v15;
        v17 = -(v15 * v13) - v13;
        if (v9 != 3)
          v14 = v17;
        v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 336))(*(_QWORD *)this);
        OZSceneSettings::getFrameDuration((OZSceneSettings *)(v18 + 336), &v41);
        time1 = v43;
        *(__n128 *)&time2.value = v41;
        time2.epoch = v42;
        if (CMTimeCompare(&time1, &time2) >= 1)
        {
          v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 336))(*(_QWORD *)this);
          OZSceneSettings::getFrameDuration((OZSceneSettings *)(v19 + 336), &v41);
          time1 = v43;
          *(__n128 *)&time2.value = v41;
          time2.epoch = v42;
          PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v43);
        }
        v20 = v16 * v13;
        OZChannel::getValueAsDouble((OZChannel *)((char *)this + 544), a2, 0.0);
        operator/((__int128 *)&v43.value, (uint64_t)&time1, v21);
        v43 = time1;
        if (ValueAsInt == 1)
        {
          operator/((__int128 *)&v43.value, (uint64_t)&time1, 2.0);
          v43 = time1;
        }
        v22 = v20 + 1.0;
        time2 = v44;
        time1 = *a2;
        PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v41);
        operator/((__int128 *)&v41, (uint64_t)&v43, (uint64_t)&v40);
        Seconds = CMTimeGetSeconds(&v40);
        v24 = (OZChannel *)((char *)this + 1000);
        if (OZChannel::getValueAsInt(v24, a2, 0.0) == 1)
        {
          v25 = 0;
          v26 = floor(Seconds + 0.0000001);
          v27 = v26 > 0.0 && v26 == Seconds;
          v28 = v26 - Seconds + 1.0;
          if (v27)
            v28 = 0.0;
        }
        else
        {
          v36 = fmax(floor(Seconds + -0.000001 + 0.0000001), 0.0);
          v28 = Seconds - v36;
          if ((int)v36 >= 0)
            v25 = (int)v36 & 1;
          else
            v25 = -((int)v36 & 1);
        }
        v37 = v22 - v14;
        v4 = v14 + v37 * v28;
        switch(ValueAsInt)
        {
          case 4u:
            v38 = sin((v4 - v14) * 3.14159265 / v37 + -1.57079633) * 0.5 + 0.5;
            return v14 + v37 * v38;
          case 3u:
            v38 = sin((v4 - v14) * 3.14159265 / v37 * 0.5);
            return v14 + v37 * v38;
          case 2u:
            v38 = 1.0 - cos((v4 - v14) * 3.14159265 / v37 * 0.5);
            return v14 + v37 * v38;
        }
        if (ValueAsInt == 1
          && (!OZChannel::getValueAsInt(v24, a2, 0.0) && v25 == 1
           || OZChannel::getValueAsInt(v24, a2, 0.0) == 1 && !v25))
        {
          return 1.0 - v4;
        }
      }
    }
  }
  return v4;
}

uint64_t TXSequenceParams::getNumObjects(TXSequenceParams *this, const CMTime *a2)
{
  unsigned int *v3;
  uint64_t result;
  char *StringPtr;

  v3 = *(unsigned int **)(*(_QWORD *)this + 27704);
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 1256), MEMORY[0x1E0CA2E68], 0.0))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v3 + 224))(v3);
    case 2u:
      return v3[4831];
    case 3u:
      if (!OZChannel::getValueAsInt((OZChannel *)((char *)this + 1968), MEMORY[0x1E0CA2E68], 0.0))
        goto LABEL_6;
LABEL_5:
      StringPtr = TXChannelString::getStringPtr((TXChannelString *)(v3 + 4762));
      result = (uint64_t)PCString::size((PCString *)StringPtr);
      break;
    default:
LABEL_6:
      result = 1;
      break;
  }
  return result;
}

double TXSequenceParams::getStart(TXSequenceParams *this, CMTime *a2)
{
  double result;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1256), a2, 0.0) != 4)
    return 0.0;
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1512), a2, 0.0);
  return result;
}

void TXSequenceParams::getEnd(TXSequenceParams *this, CMTime *a2)
{
  unsigned int ValueAsInt;
  CMTime v5;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1256), a2, 0.0);
  if (ValueAsInt >= 3)
  {
    if (ValueAsInt == 4)
      OZChannel::getValueAsDouble((OZChannel *)((char *)this + 1664), a2, 0.0);
  }
  else
  {
    v5 = *a2;
    TXSequenceParams::getSpan(this, &v5);
  }
}

double TXSequenceParams::getSpan(TXSequenceParams *this, CMTime *a2)
{
  _DWORD *v2;
  int ValueAsInt;
  double v4;
  char *StringPtr;
  unsigned int v6;

  v2 = *(_DWORD **)(*(_QWORD *)this + 27704);
  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 1256), a2, 0.0);
  v4 = 1.0;
  switch(ValueAsInt)
  {
    case 0:
    case 3:
    case 4:
      StringPtr = TXChannelString::getStringPtr((TXChannelString *)(v2 + 4762));
      v6 = PCString::size((PCString *)StringPtr);
      goto LABEL_4;
    case 1:
      v6 = (*(uint64_t (**)(_DWORD *, double))(*(_QWORD *)v2 + 224))(v2, 1.0);
LABEL_4:
      v4 = (double)v6;
      break;
    case 2:
      LODWORD(v4) = v2[4831];
      v4 = (double)*(unint64_t *)&v4;
      break;
    default:
      return 1.0 / v4;
  }
  return 1.0 / v4;
}

uint64_t TXSequenceParams::shuffle(TXSequenceParams *this, const CMTime *a2, Float64 a3)
{
  uint64_t result;
  unsigned int v7;
  unsigned int ValueAsInt;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = TXSequenceParams::getNumObjects(this, a2);
  if ((_DWORD)result)
  {
    v7 = result;
    ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 848), MEMORY[0x1E0CA2E68], 0.0);
    v9 = ValueAsInt;
    if (*((_DWORD *)this + 558) != v7 || ValueAsInt != *((_DWORD *)this + 559))
    {
      v10 = *((_QWORD *)this + 278);
      if (v10)
      {
        MEMORY[0x1B5E2914C](v10, 0x1000C8052888210);
        *((_QWORD *)this + 278) = 0;
      }
      v11 = operator new[]();
      v12 = 0;
      *((_QWORD *)this + 278) = v11;
      *((_DWORD *)this + 558) = v7;
      do
      {
        *(_DWORD *)(v11 + 4 * v12) = v12;
        ++v12;
      }
      while (v7 != v12);
      *((_DWORD *)this + 559) = v9;
      PCRandomShuffleUsingLRand48<int *>(v11, v11 + 4 * v7, v9);
    }
    v13 = *((_QWORD *)this + 278);
    return *(unsigned int *)(v13 + 4
                                 * TXSequenceParams::charIndexToSelectionIndex(this, (uint64_t)a2, a3));
  }
  return result;
}

uint64_t TXSequenceParams::charIndexToSelectionIndex(TXSequenceParams *this, uint64_t a2, Float64 a3)
{
  uint64_t v6;
  TXTextLayout *v7;
  uint64_t LineIndex;
  CMTime v10;
  CMTime v11;

  memset(&v11, 0, sizeof(v11));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 336))(*(_QWORD *)this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v10);
  operator*(&v10, &v11, a3);
  v7 = *(TXTextLayout **)(*(_QWORD *)this + 27704);
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 1256), &v11, 0.0))
  {
    case 0u:
    case 4u:
      return a2;
    case 1u:
      LineIndex = (*(uint64_t (**)(TXTextLayout *, uint64_t))(*(_QWORD *)v7 + 720))(v7, a2);
      goto LABEL_5;
    case 2u:
      LineIndex = TXTextLayout::getLineIndex(v7, a2);
LABEL_5:
      a2 = LineIndex;
      break;
    case 3u:
      if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 1968), MEMORY[0x1E0CA2E68], 0.0))
        a2 = a2;
      else
        a2 = 0;
      break;
    default:
      a2 = 0;
      break;
  }
  return a2;
}

double TXSequenceParams::normalizeIndex(TXSequenceParams *this, unsigned int a2, Float64 a3)
{
  uint64_t v6;
  _DWORD *v7;
  double v8;
  double v9;
  char *StringPtr;
  unsigned int v11;
  int v12;
  CMTime v14;
  CMTime v15;

  memset(&v15, 0, sizeof(v15));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 336))(*(_QWORD *)this);
  OZSceneSettings::getFrameDuration((OZSceneSettings *)(v6 + 336), (__n128 *)&v14);
  operator*(&v14, &v15, a3);
  v7 = *(_DWORD **)(*(_QWORD *)this + 27704);
  v8 = 0.0;
  switch(OZChannel::getValueAsInt((OZChannel *)((char *)this + 1256), &v15, 0.0))
  {
    case 0u:
    case 3u:
    case 4u:
      v9 = (double)a2 + 0.5;
      StringPtr = TXChannelString::getStringPtr((TXChannelString *)(v7 + 4762));
      v11 = PCString::size((PCString *)StringPtr);
      goto LABEL_6;
    case 1u:
      v9 = (double)a2 + 0.5;
      v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 224))(v7);
LABEL_6:
      v8 = v9 / (double)v11;
      break;
    case 2u:
      v12 = v7[4831];
      v8 = (double)a2;
      if (v12 != 1)
        v8 = (v8 + 0.5) / (double)v12;
      break;
    default:
      return v8;
  }
  return v8;
}

void TXTextSequenceBehavior::getKeyframeExtent(TXTextSequenceBehavior *this, double *a2, double *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  double v6;
  double v7;
  const void *v8;
  OZChannel *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  void *v14;
  const void **v15;
  const void **v16;
  OZChannel *v17;
  double Seconds;
  double v19;
  double v20;
  double v21;
  CMTime v24;
  CMTime time;
  CMTime v26;
  CMTime v27;
  CMTime v28;
  const void **v29;
  const void **v30;
  uint64_t v31;
  CMTime v32;
  CMTime v33;

  v3 = *((_QWORD *)this + 69);
  v4 = *((_QWORD *)this + 68);
  if (v3 == v4)
  {
    *a2 = 0.0;
    *a3 = 0.0;
  }
  else
  {
    v5 = 0;
    v6 = 0.0;
    v7 = 0.0;
    do
    {
      v8 = *(const void **)v4;
      if ((*(_BYTE *)(*(_QWORD *)v4 + 57) & 0x10) != 0)
      {
        v29 = 0;
        v30 = 0;
        v31 = 0;
        OZChannelFolder::getAllDescendantsFlattened((uint64_t)v14, (void **)&v29, 0, 0);
        v16 = v29;
        v15 = v30;
        if (v29 != v30)
        {
          do
          {
            if (*v16)
            else
              v17 = 0;
            OZChannel::getKeyframeMinTime(v17, (uint64_t)&v28);
            v33 = v28;
            OZChannel::getKeyframeMaxTime(v17, (uint64_t)&v28);
            v32 = v28;
            v27 = v33;
            Seconds = CMTimeGetSeconds(&v27);
            v26 = v32;
            v19 = CMTimeGetSeconds(&v26);
            if (v7 <= Seconds)
              v20 = v7;
            else
              v20 = Seconds;
            if (v6 >= v19)
              v21 = v6;
            else
              v21 = v19;
            if ((v5 & 1) != 0)
              v7 = v20;
            else
              v7 = Seconds;
            if ((v5 & 1) != 0)
              v6 = v21;
            else
              v6 = v19;
            ++v16;
            v5 = 1;
          }
          while (v16 != v15);
          v16 = v29;
        }
        if (v16)
        {
          v30 = v16;
          operator delete(v16);
        }
      }
      else
      {
        OZChannel::getKeyframeMinTime(v9, (uint64_t)&v33);
        OZChannel::getKeyframeMaxTime(v9, (uint64_t)&v32);
        time = v33;
        v10 = CMTimeGetSeconds(&time);
        v24 = v32;
        v11 = CMTimeGetSeconds(&v24);
        if (v7 <= v10)
          v12 = v7;
        else
          v12 = v10;
        if (v6 >= v11)
          v13 = v6;
        else
          v13 = v11;
        if ((v5 & 1) != 0)
          v7 = v12;
        else
          v7 = v10;
        if ((v5 & 1) != 0)
          v6 = v13;
        else
          v6 = v11;
        v5 = 1;
      }
      v4 += 8;
    }
    while (v4 != v3);
    *a2 = v7;
    *a3 = v6;
  }
}

void sub_1B296BB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TXTextSequenceBehavior::TXTextSequenceBehavior(TXTextSequenceBehavior *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v5;
  OZChannelFolder *v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3, a4);
  *(_QWORD *)v5 = &off_1E650FEC0;
  *(_QWORD *)(v5 + 16) = &unk_1E6510178;
  *(_QWORD *)(v5 + 48) = &unk_1E65103D0;
  *(_QWORD *)(v5 + 336) = &unk_1E6510428;
  v6 = (OZChannelFolder *)(v5 + 56);
  TXSequenceChannels::TXSequenceChannels((TXSequenceChannels *)(v5 + 536), (OZChannelFolder *)(v5 + 56), 0xCAu);
  *(_OWORD *)((char *)this + 27704) = 0u;
  TXSequenceParams::TXSequenceParams((TXTextSequenceBehavior *)((char *)this + 27720), v6, 0xC9u, this);
}

void sub_1B296BC1C(_Unwind_Exception *a1)
{
  TXTextBehavior *v1;
  TXSequenceChannels *v2;

  TXSequenceChannels::~TXSequenceChannels(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXTextSequenceBehavior::TXTextSequenceBehavior(TXTextSequenceBehavior *this, const TXTextSequenceBehavior *a2, char a3)
{
  uint64_t v5;
  OZChannelFolder *v6;

  TXTextBehavior::TXTextBehavior(this, a2, a3);
  *(_QWORD *)v5 = &off_1E650FEC0;
  *(_QWORD *)(v5 + 16) = &unk_1E6510178;
  *(_QWORD *)(v5 + 48) = &unk_1E65103D0;
  *(_QWORD *)(v5 + 336) = &unk_1E6510428;
  v6 = (OZChannelFolder *)(v5 + 56);
  TXSequenceChannels::TXSequenceChannels((TXSequenceChannels *)(v5 + 536), (const TXTextSequenceBehavior *)((char *)a2 + 536), (OZChannelFolder *)(v5 + 56));
  *((_QWORD *)this + 3463) = *((_QWORD *)a2 + 3463);
  *((_QWORD *)this + 3464) = 0;
  TXSequenceParams::TXSequenceParams((TXTextSequenceBehavior *)((char *)this + 27720), (const TXTextSequenceBehavior *)((char *)a2 + 27720), v6, this);
}

void sub_1B296BCD4(_Unwind_Exception *a1)
{
  TXTextBehavior *v1;
  TXSequenceChannels *v2;

  TXSequenceChannels::~TXSequenceChannels(v2);
  TXTextBehavior::~TXTextBehavior(v1);
  _Unwind_Resume(a1);
}

void TXTextSequenceBehavior::~TXTextSequenceBehavior(TXTextSequenceBehavior *this)
{
  *(_QWORD *)this = &off_1E650FEC0;
  *((_QWORD *)this + 2) = &unk_1E6510178;
  *((_QWORD *)this + 6) = &unk_1E65103D0;
  *((_QWORD *)this + 42) = &unk_1E6510428;
  TXSequenceParams::~TXSequenceParams((TXTextSequenceBehavior *)((char *)this + 27720));
  TXSequenceChannels::~TXSequenceChannels((TXTextSequenceBehavior *)((char *)this + 536));
  TXTextBehavior::~TXTextBehavior(this);
}

{
  TXTextSequenceBehavior::~TXTextSequenceBehavior(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXTextSequenceBehavior::~TXTextSequenceBehavior(TXTextSequenceBehavior *this)
{
  TXTextSequenceBehavior::~TXTextSequenceBehavior((TXTextSequenceBehavior *)((char *)this - 16));
}

{
  TXTextSequenceBehavior::~TXTextSequenceBehavior((TXTextSequenceBehavior *)((char *)this - 48));
}

{
  TXTextSequenceBehavior::~TXTextSequenceBehavior((TXTextSequenceBehavior *)((char *)this - 336));
}

{
  TXTextSequenceBehavior::~TXTextSequenceBehavior((TXTextSequenceBehavior *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextSequenceBehavior::~TXTextSequenceBehavior((TXTextSequenceBehavior *)((char *)this - 48));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextSequenceBehavior::~TXTextSequenceBehavior((TXTextSequenceBehavior *)((char *)this - 336));
  JUMPOUT(0x1B5E29170);
}

__n128 TXTextSequenceBehavior::operator=(uint64_t a1, const void *a2)
{
  char *v4;
  char *v5;
  __n128 result;

  TXTextBehavior::operator=();
  if (!v4)
    __cxa_bad_cast();
  v5 = v4;
  TXSequenceChannels::operator=(a1 + 536, (uint64_t)(v4 + 536));
  *(_QWORD *)(a1 + 27720) = *((_QWORD *)v5 + 3465);
  OZChannelFolder::operator=(a1 + 27728);
  OZChannelBase::operator=(a1 + 27856, (uint64_t)(v5 + 27856));
  OZChannelBase::operator=(a1 + 28112, (uint64_t)(v5 + 28112));
  OZChannelBase::operator=(a1 + 28264, (uint64_t)(v5 + 28264));
  OZChannelBase::operator=(a1 + 28416, (uint64_t)(v5 + 28416));
  OZChannelBase::operator=(a1 + 28568, (uint64_t)(v5 + 28568));
  OZChannelBase::operator=(a1 + 28720, (uint64_t)(v5 + 28720));
  OZChannelBase::operator=(a1 + 28976, (uint64_t)(v5 + 28976));
  OZChannelBase::operator=(a1 + 29232, (uint64_t)(v5 + 29232));
  OZChannelBase::operator=(a1 + 29384, (uint64_t)(v5 + 29384));
  OZChannelBase::operator=(a1 + 29536, (uint64_t)(v5 + 29536));
  OZChannelBase::operator=(a1 + 29688, (uint64_t)(v5 + 29688));
  result = *(__n128 *)(v5 + 29944);
  *(__n128 *)(a1 + 29944) = result;
  *(_QWORD *)(a1 + 27720) = a1;
  return result;
}

OZChannelBehavior *TXTextSequenceBehavior::didAddToNode(OZChannelBehavior *this, OZSceneNode *lpsrc)
{
  OZChannelBehavior *v3;

  if (lpsrc)
  {
    v3 = this;
    if (this)
    {
      *((_QWORD *)v3 + 3463) = this;
      OZChannelBehavior::didAddToNode(v3, lpsrc);
      return (OZChannelBehavior *)TXTextSequenceBehavior::sequenceBehaviorDidLoad(v3);
    }
  }
  return this;
}

uint64_t TXTextSequenceBehavior::sequenceBehaviorDidLoad(TXTextSequenceBehavior *this)
{
  OZChannel *v2;
  OZBehaviorCurveNode *v3;
  uint64_t result;
  const void **v5;
  const void **i;
  OZChannelBase *v7;
  OZChannelBase ***v8;
  OZChannelBase **v9;
  OZChannelBase **v10;
  OZChannelBase *v11;

  if (!*((_QWORD *)this + 3464))
  {
    v2 = (OZChannel *)(*((_QWORD *)this + 3463) + 24880);
    v3 = (OZBehaviorCurveNode *)operator new();
    OZBehaviorCurveNode::OZBehaviorCurveNode(v3, this, v2);
    *(_QWORD *)v3 = &off_1E650FDE0;
    *((_QWORD *)v3 + 4) = this;
    *((_QWORD *)this + 3464) = v3;
    OZChannel::appendCurveProcessingNode(v2, v3);
    OZChannelBehavior::didAddCurveNode((uint64_t)this, *((_QWORD *)this + 3464));
  }
  result = TXSequenceChannels::removeTrackingChannel((TXTextSequenceBehavior *)((char *)this + 536), 1045);
  v5 = (const void **)*((_QWORD *)this + 68);
  for (i = (const void **)*((_QWORD *)this + 69); v5 != i; ++v5)
  {
    v7 = (OZChannelBase *)*v5;
    if ((*((_BYTE *)*v5 + 57) & 0x10) != 0)
    {
      v8 = *(OZChannelBase ****)(result + 112);
      v9 = *v8;
      v10 = v8[1];
      while (v9 != v10)
      {
        v11 = *v9;
        result = OZChannelBase::testFlag(*v9, 2);
        if ((result & 1) == 0)
          result = (uint64_t)TXTextSequenceBehavior::addChannel(this, v11);
        ++v9;
      }
    }
    else
    {
      result = OZChannelBase::testFlag((OZChannelBase *)*v5, 2);
      if ((result & 1) == 0)
        result = (uint64_t)TXTextSequenceBehavior::addChannel(this, v7);
    }
  }
  return result;
}

void sub_1B296C0FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C409AC7BE1CLL);
  _Unwind_Resume(a1);
}

OZChannelFolder *TXTextSequenceBehavior::addChannel(TXTextSequenceBehavior *this, OZChannelBase *a2)
{
  OZChannelFolder *var6;
  OZChannelBase *Channel;

  OZChannelBase::resetFlag(a2, 2, 0);
  var6 = a2->var6;
  if (var6)
    OZChannelBase::resetFlag((OZChannelBase *)var6, 2, 0);
  Channel = (OZChannelBase *)TXSequenceChannels::findChannel((TXSequenceChannels *)(*((_QWORD *)this + 3463) + 25032), a2->var3, 0, 0);
  return TXTextSequenceBehavior::addSequenceNodes(this, a2, Channel);
}

void TXTextSequenceBehavior::willRemove(TXTextSequenceBehavior *this)
{
  uint64_t v2;
  const void **v3;
  const void **i;
  OZChannelBase ***v5;
  OZChannelBase **v6;
  OZChannelBase **v7;
  OZChannelBase *v8;
  uint64_t v9;

  OZChannel::deleteCurveProcessingNode((OZChannel *)(*((_QWORD *)this + 3463) + 24880), *((void **)this + 3464));
  v9 = *((_QWORD *)this + 3464);
  std::list<OZBehaviorCurveNode *>::remove((uint64_t)this + 344, &v9);
  v2 = *((_QWORD *)this + 3463);
  v3 = *(const void ***)(v2 + 25040);
  for (i = *(const void ***)(v2 + 25048); v3 != i; ++v3)
  {
    if ((*((_BYTE *)*v3 + 57) & 0x10) != 0)
    {
      v6 = *v5;
      v7 = v5[1];
      while (v6 != v7)
      {
        v8 = *v6++;
        TXTextSequenceBehavior::removeChannel(this, v8);
      }
    }
    else
    {
      TXTextSequenceBehavior::removeChannel(this, (OZChannelBase *)*v3);
    }
  }
  OZChannelBehavior::clearChannels(this);
  OZChannelBehavior::willRemove(this);
}

char *TXTextSequenceBehavior::removeChannel(TXTextSequenceBehavior *this, OZChannelBase *a2)
{
  OZChannelFolder *var6;
  OZChannelBase ***v5;
  OZChannelBase **v6;
  OZChannelBase **v7;
  char *result;
  OZChannelBase ***v9;
  OZChannelBase **v10;
  OZChannelBase **v11;
  OZChannelBase *v12;

  OZChannelBase::setFlag(a2, 2, 0);
  var6 = a2->var6;
  if (var6)
  {
    v5 = (OZChannelBase ***)*((_QWORD *)var6 + 14);
    v6 = *v5;
    v7 = v5[1];
    while (v6 != v7)
    {
      if (!OZChannelBase::testFlag(*v6, 2))
        goto LABEL_7;
      ++v6;
    }
    OZChannelBase::setFlag((OZChannelBase *)var6, 2, 0);
  }
LABEL_7:
  if ((a2->var7 & 0x1000) == 0)
    return TXTextSequenceBehavior::removeCurveNodes((char *)this, a2);
  v9 = (OZChannelBase ***)*((_QWORD *)result + 14);
  if (v9)
  {
    v10 = *v9;
    v11 = v9[1];
    while (v10 != v11)
    {
      v12 = *v10++;
      result = TXTextSequenceBehavior::removeCurveNodes((char *)this, v12);
    }
  }
  return result;
}

OZChannelFolder *TXTextSequenceBehavior::addSequenceNodes(TXTextSequenceBehavior *this, OZChannelBase *a2, OZChannelBase *a3)
{
  void *v6;
  OZChannel *v7;
  OZChannel *v8;
  _QWORD *v9;
  _QWORD *v10;
  OZChannelBase ***v11;
  OZChannelBase ***v12;
  BOOL v13;
  OZChannelBase **v14;
  OZChannelBase **v15;
  OZChannelBase *v16;
  OZChannelBase *v17;
  OZChannelBase *v18;
  OZBehaviorCurveNode *v19;
  OZChannelFolder *var6;
  OZChannelFolder *result;

  if ((a2->var7 & 0x1000) != 0)
  {
    v11 = (OZChannelBase ***)v9[14];
    v12 = (OZChannelBase ***)v10[14];
    if (v11)
      v13 = v12 == 0;
    else
      v13 = 1;
    if (!v13)
    {
      v14 = *v11;
      if (*v11 != v11[1])
      {
        v15 = *v12;
        do
        {
          if (v15 == v12[1])
            break;
          v17 = *v14++;
          v16 = v17;
          v18 = *v15++;
          TXTextSequenceBehavior::addSequenceNodes(this, v16, v18);
        }
        while (v14 != v11[1]);
      }
    }
  }
  else
  {
    if (!a3)
    {
      v8 = 0;
LABEL_16:
      v19 = (OZBehaviorCurveNode *)operator new();
      OZBehaviorCurveNode::OZBehaviorCurveNode(v19, this, v8);
      *(_QWORD *)v19 = &off_1E650FD00;
      *((_QWORD *)v19 + 4) = this;
      *((_QWORD *)v19 + 5) = v6;
      OZChannel::appendCurveProcessingNode(v8, v19);
      OZChannelBehavior::didAddCurveNode((uint64_t)this, (uint64_t)v19);
      goto LABEL_17;
    }
    v8 = v7;
    if (!v7
    {
      goto LABEL_16;
    }
  }
LABEL_17:
  (*((void (**)(OZChannelBase *, uint64_t, _QWORD))a2->var0 + 13))(a2, 1, 0);
  var6 = a2->var6;
  if (var6)
    (*(void (**)(OZChannelFolder *, uint64_t, _QWORD))(*(_QWORD *)var6 + 104))(var6, 1, 0);
  (*((void (**)(OZChannelBase *, uint64_t, _QWORD))a3->var0 + 13))(a3, 1, 0);
  result = a3->var6;
  if (result)
    return (OZChannelFolder *)(*(uint64_t (**)(OZChannelFolder *, uint64_t, _QWORD))(*(_QWORD *)result + 104))(result, 1, 0);
  return result;
}

void sub_1B296C570(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40F7988963);
  _Unwind_Resume(a1);
}

char *TXTextSequenceBehavior::removeCurveNodes(char *this, OZChannelBase *a2)
{
  uint64_t v2;
  char *v3;
  _QWORD *v5;
  void *v6;
  OZChannel *v7;
  OZChannelFolder *v8;
  int NumberOfCurveProcessingNodes;
  OZChannelFolder *v10;
  const void ***v11;
  const void **v12;
  const void **v13;
  OZChannel *v14;
  OZChannelFolder *var6;
  void *v16;

  v2 = (uint64_t)(this + 344);
  v3 = (char *)*((_QWORD *)this + 44);
  if (v3 != this + 344)
  {
    var6 = a2->var6;
    do
    {
      v5 = v3 + 8;
      v3 = (char *)*((_QWORD *)v3 + 1);
      this = (char *)v5[1];
      if (this)
      {
        if (this)
        {
          v6 = this;
          v7 = (OZChannel *)*((_QWORD *)this + 2);
          if (a2->var3 == v7->var3 && (!var6 || (v8 = v7->var6) == 0 || *((_DWORD *)var6 + 6) == *((_DWORD *)v8 + 6)))
          {
            OZChannel::deleteCurveProcessingNode(*((OZChannel **)this + 2), this);
            v16 = v6;
            std::list<OZBehaviorCurveNode *>::remove(v2, &v16);
            NumberOfCurveProcessingNodes = OZChannel::getNumberOfCurveProcessingNodes(v7);
            if (!NumberOfCurveProcessingNodes)
              (*((void (**)(OZChannel *, _QWORD, _QWORD))v7->var0 + 13))(v7, 0, 0);
            v10 = v7->var6;
            this = (char *)(*(uint64_t (**)(OZChannelFolder *))(*(_QWORD *)v10 + 120))(v10);
            if (!(_DWORD)this)
              goto LABEL_15;
            if (!NumberOfCurveProcessingNodes)
              this = (char *)(*(uint64_t (**)(OZChannelFolder *, _QWORD, _QWORD))(*(_QWORD *)v10 + 104))(v10, 0, 0);
            v10 = (OZChannelFolder *)*((_QWORD *)v10 + 6);
            if (v10)
            {
LABEL_15:
              v11 = (const void ***)*((_QWORD *)v10 + 14);
              v12 = *v11;
              v13 = v11[1];
              while (v12 != v13)
              {
                if (*v12)
                {
                  if (v14)
                  {
                    this = (char *)OZChannel::getNumberOfCurveProcessingNodes(v14);
                    if ((_DWORD)this)
                      goto LABEL_22;
                  }
                }
                ++v12;
              }
              this = (char *)(*(uint64_t (**)(OZChannelFolder *, _QWORD, _QWORD))(*(_QWORD *)v10 + 104))(v10, 0, 0);
            }
          }
        }
      }
LABEL_22:
      ;
    }
    while (v3 != (char *)v2);
  }
  return this;
}

double TXTextSequenceBehavior::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  int8x8_t *v5;
  int8x8_t *v6;
  int8x8_t *Hash;
  double result;
  __n128 v9;

  OZBehavior::calcHashForState(a1, a2, a3, a4);
  if (!v5)
    __cxa_bad_cast();
  v6 = v5;
  v9 = *(__n128 *)PCHashWriteStream::getHash(v5)->i8;
  (*(void (**)(void *))(*(_QWORD *)a2 + 40))(a2);
  Hash = PCHashWriteStream::getHash(v6);
  PCHash128::operator+=((int *)&v9, (int *)Hash);
  *(_QWORD *)&result = PCHashWriteStream::setHash((__n128 *)v6, &v9).n128_u64[0];
  return result;
}

double `non-virtual thunk to'TXTextSequenceBehavior::calcHashForState(uint64_t a1, void *a2, CMTime *a3, uint64_t **a4)
{
  return TXTextSequenceBehavior::calcHashForState(a1 - 16, a2, a3, a4);
}

uint64_t TXTextSequenceBehavior::getPreviewSceneNode(TXTextSequenceBehavior *this)
{
  OZChannelBase *v1;
  const PCString *NextUniqueID;
  TXTextLayout *v3;
  CMTime *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  CMTime v9;
  PCSharedCount v10;
  std::__shared_weak_count *v11;
  __int128 v12;
  uint64_t v13;

  PCSharedCount::PCSharedCount(&v10);
  NextUniqueID = (const PCString *)OZChannelBase::getNextUniqueID(v1);
  v3 = (TXTextLayout *)TXTextInput::create((TXTextInput *)&v10, NextUniqueID);
  PCString::~PCString((PCString *)&v10);
  v4 = (CMTime *)MEMORY[0x1E0CA2E68];
  v12 = *MEMORY[0x1E0CA2E68];
  v13 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  PCURL::PCURL((PCURL *)&v10, CFSTR("Text Behavior Preview Text"));
  (*(void (**)(TXTextLayout *, __int128 *, PCSharedCount *))(*(_QWORD *)v3 + 144))(v3, &v12, &v10);
  PCString::~PCString((PCString *)&v10);
  TXTextLayout::didFinishInitializing(v3, 1);
  TXTextLayout::getCurrentStyleForInsertion((uint64_t)v3, &v10);
  if (v10.var0)
  {
    v9 = *v4;
    OZChannel::setValue((OZChannel *)v10.var0 + 13, &v9, 16.0, 0);
  }
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return (uint64_t)v3 + 200;
}

void sub_1B296C8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t TXTextSequenceBehavior::parseEnd(TXTextSequenceBehavior *this, PCSerializerReadStream *a2)
{
  int ValueAsInt;
  double v6;
  unsigned int v7;

  ValueAsInt = OZChannel::getValueAsInt((OZChannel *)((char *)this + 27856), MEMORY[0x1E0CA2E68], 0.0);
  if (*((_DWORD *)a2 + 26) == 1 && ValueAsInt == 1)
  {
    OZChannel::getValueAsDouble((OZChannel *)((char *)this + 28264), MEMORY[0x1E0CA2E68], 0.0);
    OZChannel::setDefaultValue((OZChannel *)((char *)this + 28264), v6 * 0.5);
    (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 3533) + 288))((char *)this + 28264, 0);
  }
  if (((*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 308) + 496))((char *)this + 2464, 1) & 1) == 0
    && ((*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 327) + 496))((char *)this + 2616, 1) & 1) == 0
    && ((*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this + 346) + 496))((char *)this + 2768, 1) & 1) == 0)
  {
    OZChannelBase::operator=((uint64_t)this + 2768, (uint64_t)this + 3184);
    OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2768), 2, 1);
    if (OZChannelBase::testFlag((OZChannelBase *)((char *)this + 3184), 2))
      OZChannelBase::setFlag((OZChannelBase *)((char *)this + 2328), 2, 1);
    else
      OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2328), 2, 1);
  }
  v7 = *((_DWORD *)a2 + 26);
  if (v7 <= 2)
  {
    OZChannel::scaleChannel((OZChannel *)((char *)this + 5824), 2.0);
    OZChannel::scaleChannel((OZChannel *)((char *)this + 10656), 2.0);
    OZChannel::scaleChannel((OZChannel *)((char *)this + 15896), 2.0);
    OZChannel::scaleChannel((OZChannel *)((char *)this + 22280), 2.0);
    v7 = *((_DWORD *)a2 + 26);
  }
  if (v7 <= 3)
  {
    copy1DBlurChannelTo2DBlurChannel((OZChannelBase *)this + 52, (TXTextSequenceBehavior *)((char *)this + 5384));
    copy1DBlurChannelTo2DBlurChannel((OZChannelBase *)((char *)this + 10656), (TXTextSequenceBehavior *)((char *)this + 10216));
    copy1DBlurChannelTo2DBlurChannel((OZChannelBase *)((char *)this + 15896), (TXTextSequenceBehavior *)((char *)this + 15456));
    copy1DBlurChannelTo2DBlurChannel((OZChannelBase *)((char *)this + 22280), (TXTextSequenceBehavior *)((char *)this + 21840));
  }
  return OZBehavior::parseEnd(this, a2);
}

OZChannelBase *copy1DBlurChannelTo2DBlurChannel(OZChannelBase *a1, OZChannel2D *a2)
{
  OZChannelBase *v4;

  v4 = (OZChannelBase *)((char *)a2 + 136);
  OZChannelBase::operator=((uint64_t)a2 + 136, (uint64_t)a1);
  OZChannelBase::operator=((uint64_t)a2 + 288, (uint64_t)a1);
  OZChannelBase::resetFlag(v4, 8, 1);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)a2 + 288), 8, 1);
  OZChannelBase::resetFlag((OZChannelBase *)a2, 2, 1);
  OZChannelBase::resetFlag((OZChannelBase *)a2, 8, 1);
  if (OZChannelBase::testFlag(a1, 2))
    OZChannelBase::setFlag((OZChannelBase *)a2, 2, 1);
  else
    OZChannelBase::resetFlag((OZChannelBase *)a2, 2, 1);
  return OZChannelBase::setFlag(a1, 0x400000, 1);
}

uint64_t `non-virtual thunk to'TXTextSequenceBehavior::parseEnd(TXTextSequenceBehavior *this, PCSerializerReadStream *a2)
{
  return TXTextSequenceBehavior::parseEnd((TXTextSequenceBehavior *)((char *)this - 48), a2);
}

BOOL TXTextSequenceBehavior::isChannelEnabled(TXTextSequenceBehavior *this, int a2)
{
  OZChannelBase *Channel;

  Channel = (OZChannelBase *)TXSequenceChannels::findChannel((TXTextSequenceBehavior *)((char *)this + 536), a2, 0, 0);
  return !OZChannelBase::testFlag(Channel, 2);
}

void TXChannelFont::TXChannelFont(TXChannelFont *this, OZFactory *a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6)
{
  TXFontManager *v7;
  OZFontManagerBase *Instance;
  PCString v9;

  OZChannelFontBase::OZChannelFontBase(this, a2, a3, a4, a5, a6);
  *(_QWORD *)v7 = &off_1E6510498;
  *((_QWORD *)v7 + 2) = &unk_1E6510808;
  Instance = (OZFontManagerBase *)TXFontManager::getInstance(v7);
  OZFontManagerBase::getDefaultSystemFont(&v9);
  OZChannelFontBase::init((PCString *)this, Instance, &v9);
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)this, CFSTR("TXFontController"));
  PCString::~PCString(&v9);
}

void sub_1B296CC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString *v10;

  OZChannelFontBase::~OZChannelFontBase(v10);
  _Unwind_Resume(a1);
}

void TXChannelFont::TXChannelFont(TXChannelFont *this, const PCString *a2, OZChannelFolder *a3, unsigned int a4, int a5)
{
  OZFactory *Instance;

  Instance = (OZFactory *)TXChannelFont_Factory::getInstance(this);
  TXChannelFont::TXChannelFont(this, Instance, a2, a3, a4, a5);
}

void TXChannelFont::TXChannelFont(TXChannelFont *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  TXChannelFont::TXChannelFont(this, a2, a3, 0, a4, 0);
}

void TXChannelFont::TXChannelFont(TXChannelFont *this, const TXChannelFont *a2, OZChannelFolder *a3)
{
  OZChannelBase *v3;

  OZChannelFontBase::OZChannelFontBase(this, a2, a3);
  v3->var0 = (void **)&off_1E6510498;
  v3->var2 = (void **)&unk_1E6510808;
  OZChannelBase::setParameterCtlrClassName(v3, CFSTR("TXFontController"));
}

void sub_1B296CD58(_Unwind_Exception *a1)
{
  PCString *v1;

  OZChannelFontBase::~OZChannelFontBase(v1);
  _Unwind_Resume(a1);
}

const __CFString *TXChannelFont::getObjCWrapperName(TXChannelFont *this)
{
  return CFSTR("CHChannelTextFont");
}

TXChannelFont *TXChannelFont::clone(TXChannelFont *this)
{
  TXChannelFont *v2;

  v2 = (TXChannelFont *)operator new();
  TXChannelFont::TXChannelFont(v2, this, 0);
  return v2;
}

void sub_1B296CDC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C404D384FFFLL);
  _Unwind_Resume(a1);
}

void TXChannelFont::reset(TXChannelFont *this, uint64_t a2)
{
  OZObjectManipulator *ObjectManipulator;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  PCString v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  OZChannelBase::reset((OZChannelBase *)this, a2);
  ObjectManipulator = (OZObjectManipulator *)OZChannelBase::getObjectManipulator((OZChannelBase *)this);
  TXTextStylePtrFromObjectManipulator(ObjectManipulator, &v8);
  if (v8)
  {
    if (PCString::empty((PCString *)this + 82))
      (*(void (**)(PCString *__return_ptr, TXChannelFont *))(*(_QWORD *)this + 824))(&v7, this);
    else
      PCString::PCString(&v7, (const PCString *)this + 82);
    (*(void (**)(uint64_t, PCString *, uint64_t))(*(_QWORD *)v8 + 168))(v8, &v7, 1);
    PCString::~PCString(&v7);
  }
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1B296CEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, char a11)
{
  PCString::~PCString(&a10);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void TXChannelFont::undoDidReplace(OZChannelFolder *this)
{
  OZObjectManipulator *ObjectManipulator;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  TXTextStyle *v6;
  std::__shared_weak_count *v7;

  OZChannelFolder::undoDidReplace(this);
  ObjectManipulator = (OZObjectManipulator *)OZChannelBase::getObjectManipulator((OZChannelBase *)this);
  TXTextStylePtrFromObjectManipulator(ObjectManipulator, &v6);
  if (v6)
    TXTextStyle::clearCachedFontFace(v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1B296CF54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *TXChannelFont::didLoadFontName(OZChannelBase *this)
{
  void *result;

  result = (void *)OZChannelBase::getObjectManipulator(this);
  if (result)
  {
    if (result)
      return (void *)(*(uint64_t (**)(void *, __CFString **, uint64_t))(*(_QWORD *)result + 168))(result, &this[5].var11, 1);
  }
  return result;
}

uint64_t TXChannelFont::getSystemFonts(TXChannelFont *this)
{
  return 0;
}

void TXChannelFont::getFontFace(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void TXChannelFont::getDefaultSystemFontFace(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void TXChannelFont::~TXChannelFont(PCString *this)
{
  OZChannelFontBase::~OZChannelFontBase(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXChannelFont::~TXChannelFont(PCString *this)
{
  OZChannelFontBase::~OZChannelFontBase(this - 2);
}

{
  OZChannelFontBase::~OZChannelFontBase(this - 2);
  JUMPOUT(0x1B5E29170);
}

uint64_t HTextureBlend::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v5;
  uint64_t v6;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v12;
  uint64_t v13;
  HGNode *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (a3 >= 2)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v13 = v12;
  v14 = HGRenderer::GetInput(a2, this, 1u);
  v15 = HGRenderer::GetDOD(a2, v14);
  if (a3)
  {
    v17 = DOD;
    v18 = v13;
    v19 = v6;
    v20 = v5;
  }
  else
  {
    v19 = v15;
    v20 = v16;
    v17 = v6;
    v18 = v5;
  }
  return HGRectIntersection(v17, v18, v19, v20);
}

void HTextureBlend::~HTextureBlend(HGNode *this)
{
  void *v1;

  HgcTXModulate::~HgcTXModulate(this);
  HGObject::operator delete(v1);
}

BOOL HGBitmap::cpu(HGBitmap *this)
{
  return (*((_BYTE *)this + 12) & 0x30) == 0;
}

BOOL HGBitmap::gpu(HGBitmap *this)
{
  return (*((_BYTE *)this + 12) & 0x30) != 0;
}

uint64_t HGBitmap::buffer(HGBitmap *this)
{
  return *((_BYTE *)this + 13) & 1;
}

uint64_t HGBitmap::texture(HGBitmap *this)
{
  return (*((unsigned __int8 *)this + 13) >> 1) & 1;
}

uint64_t std::__tree<PCHash128>::__count_unique<PCHash128>(uint64_t a1, const PCHash128 *a2)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if (!operator<(a2, (const PCHash128 *)((char *)v2 + 28)))
      {
        if (!operator<((const PCHash128 *)((char *)v2 + 28), a2))
          return v4;
        ++v2;
      }
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return 0;
}

char *std::__tree<PCHash128>::__emplace_unique_key_args<PCHash128,PCHash128 const&>(uint64_t **a1, const PCHash128 *a2, _OWORD *a3)
{
  void **v5;
  char *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<PCHash128>::__find_equal<PCHash128>((uint64_t)a1, &v9, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *a3;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<PCHash128>::__find_equal<PCHash128>(uint64_t a1, _QWORD *a2, const PCHash128 *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  const PCHash128 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (const PCHash128 *)((char *)v4 + 28);
        if (!operator<(a3, (const PCHash128 *)((char *)v4 + 28)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

const char *HgcTXAlpha::GetProgram(HgcTXAlpha *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000236\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r0)*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=5499c239:9891868e:bd9ea6d3:bd30d467\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000228\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r0*hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=6eae314a:ee581af3:fdfce447:74b07bd6\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000001f6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r0*hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=78149511:5c47b7fc:9d3dfb0a:c601ba4b\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcTXAlpha::InitProgramDescriptor(HgcTXAlpha *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTXAlpha_hgc_visible", "//Metal1.0     \n//LEN=00000000fc\n[[ visible ]] FragmentOut HgcTXAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    output.color0 = r0*hg_Params[0];\n"
    "    return output;\n"
    "}\n");
}

void sub_1B296D38C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcTXAlpha");
}

void sub_1B296D39C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B296D49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B296D4DC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B296D4D4);
}

_QWORD *HgcTXAlpha::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTXAlpha [hgc1]");
}

uint64_t HgcTXAlpha::BindTexture(HgcTXAlpha *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcTXAlpha::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[62], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcTXAlpha::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t *v15;
  uint64_t v16;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v16) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)*(_QWORD *)(a1 + 496);
          v12 = vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), v11);
          v13 = vmulq_f32(*(float32x4_t *)(v6 + v10), v11);
          v14 = vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), v11);
          v15 = (float32x4_t *)(v5 + v10);
          v15[-2] = vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), v11);
          v15[-1] = v12;
          *v15 = v13;
          v15[1] = v14;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v16) = -v9;
      }
      if ((int)v16 < v4)
      {
        v16 = v16;
        do
        {
          *(float32x4_t *)(v5 + 16 * v16) = vmulq_f32(*(float32x4_t *)(v6 + 16 * v16), *(float32x4_t *)*(_QWORD *)(a1 + 496));
          ++v16;
        }
        while (v16 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcTXAlpha::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcTXAlpha::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcTXAlpha::HgcTXAlpha(HgcTXAlpha *this)
{
  uint64_t v2;
  _OWORD *v3;

  HGColorMatrix::HGColorMatrix(this);
  *(_QWORD *)v2 = off_1E6510AE0;
  *(_DWORD *)(v2 + 504) = 1;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = xmmword_1B304F230;
  v3[2] = xmmword_1B304F240;
  v3[3] = xmmword_1B304F250;
  v3[4] = xmmword_1B304EFF0;
  v3[5] = xmmword_1B304F230;
  v3[6] = xmmword_1B304F240;
  v3[7] = xmmword_1B304F250;
  v3[8] = xmmword_1B304EFF0;
  v3[9] = 0u;
  *((_QWORD *)this + 62) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B296D7B0(_Unwind_Exception *a1)
{
  HGColorMatrix *v1;

  HGColorMatrix::~HGColorMatrix(v1);
  _Unwind_Resume(a1);
}

void HgcTXAlpha::~HgcTXAlpha(HgcTXAlpha *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6510AE0;
  v2 = *((_QWORD *)this + 62);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGColorMatrix::~HGColorMatrix(this);
}

{
  void *v1;

  HgcTXAlpha::~HgcTXAlpha(this);
  HGObject::operator delete(v1);
}

uint64_t HgcTXAlpha::SetParameter(HgcTXAlpha *this, uint64_t a2, __n128 a3, float a4, float a5, double a6, char *a7)
{
  uint64_t v7;
  __n128 *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (__n128 *)*((_QWORD *)this + 62);
  if (v8->n128_f32[0] == *(float *)&a6
    && v8->n128_f32[1] == *(float *)&a6
    && v8->n128_f32[2] == *(float *)&a6
    && v8->n128_f32[3] == *(float *)&a6)
  {
    return 0;
  }
  a3.n128_f32[1] = a4;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  *(int32x4_t *)v8 = vdupq_lane_s32(*(int32x2_t *)&a6, 0);
  v8[9] = a3;
  v7 = 1;
  *((_DWORD *)this + 126) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v7;
}

float HgcTXAlpha::GetParameter(HgcTXAlpha *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 62);
    *a3 = v3[36];
    a3[1] = v3[37];
    a3[2] = v3[38];
    result = v3[39];
    a3[3] = result;
  }
  return result;
}

HGNode *HgcTXAlpha::GetOutput(__n128 *this, HGRenderer *a2, __n128 a3, __n128 a4, __n128 a5)
{
  float32x4_t *v5;
  float32x4_t v6;
  __n128 *v7;

  if (this[31].n128_u32[2])
  {
    v5 = (float32x4_t *)this[31].n128_u64[0];
    a4 = (__n128)vmulq_f32(v5[6], *v5);
    a5 = (__n128)vmulq_f32(v5[7], *v5);
    v6 = vmulq_f32(v5[8], *v5);
    v5[1] = vmulq_f32(v5[5], *v5);
    *(__n128 *)(this[31].n128_u64[0] + 32) = a4;
    *(__n128 *)(this[31].n128_u64[0] + 48) = a5;
    *(float32x4_t *)(this[31].n128_u64[0] + 64) = v6;
    v7 = (__n128 *)this[31].n128_u64[0];
    this[27] = v7[1];
    this[28] = v7[2];
    this[29] = v7[3];
    a3 = v7[4];
    this[30] = a3;
    this[31].n128_u32[2] = 0;
  }
  return HGColorMatrix::GetOutput((HGColorMatrix *)this, a2, a3.n128_f64[0], a4.n128_f64[0], (int32x2_t)a5.n128_u64[0]);
}

const char *HgcTXPremulColor::GetProgram(HgcTXPremulColor *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000001b6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0.w = hg_Params[0].w;\n"
             "    output.color0.xyz = hg_Params[0].xyz*hg_Params[0].www;\n"
             "    return output;\n"
             "}\n"
             "//MD5=a5c19c7c:730d39de:48b920fb:a280a93c\n"
             "//SIG=00400000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000001b6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0.w = hg_Params[0].w;\n"
             "    output.color0.xyz = hg_Params[0].xyz*hg_Params[0].www;\n"
             "    return output;\n"
             "}\n"
             "//MD5=a5c19c7c:730d39de:48b920fb:a280a93c\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000001a8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "void main()\n"
           "{\n"
           "\n"
           "    gl_FragColor.w = hg_ProgramLocal0.w;\n"
           "    gl_FragColor.xyz = hg_ProgramLocal0.xyz*hg_ProgramLocal0.www;\n"
           "}\n"
           "//MD5=6e3bf428:c715c4f4:d1d5c186:d5aa37ca\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
}

void HgcTXPremulColor::InitProgramDescriptor(HgcTXPremulColor *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTXPremulColor_hgc_visible", "//Metal1.0     \n//LEN=000000010b\n[[ visible ]] FragmentOut HgcTXPremulColor_hgc_visible(const constant float4* hg_Params)\n{\n    FragmentOut output;\n"
    "\n"
    "    output.color0.w = hg_Params[0].w;\n"
    "    output.color0.xyz = hg_Params[0].xyz*hg_Params[0].www;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B296DA24()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcTXPremulColor");
}

void sub_1B296DA34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void *v33;
  char v34;
  __int128 v35;
  uint64_t v36[13];

  *(_DWORD *)(v31 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v31 - 56), "FragmentOut");
  *(_OWORD *)(v31 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v30, v31 - 64);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  memset(v36, 0, 24);
  LODWORD(v32) = 2;
  std::string::basic_string[abi:ne180100]<0>(&v33, "float4");
  v35 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v36, (uint64_t)&v32);
  if (v34 < 0)
    operator delete(v33);
  HGProgramDescriptor::SetArgumentBindings(v30, v36);
  v32 = (void **)v36;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_1B296DAF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  a10 = &a19;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void sub_1B296DB28()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B296DB20);
}

_QWORD *HgcTXPremulColor::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTXPremulColor [hgc1]");
}

uint64_t HgcTXPremulColor::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcTXPremulColor::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcTXPremulColor::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int8x16_t *v5;
  int8x16_t *v6;
  uint64_t v7;
  int v8;
  int8x16_t *v9;
  int8x16_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(int8x16_t **)(a2 + 16);
    v6 = v5 + 2;
    v7 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        v8 = 0;
        v9 = v6;
        do
        {
          v10 = vbslq_s8(*(int8x16_t *)(*(_QWORD *)(a1 + 408) + 16), *(int8x16_t *)*(_QWORD *)(a1 + 408), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 408), *(float32x4_t *)*(_QWORD *)(a1 + 408), 3));
          v9[-2] = v10;
          v9[-1] = v10;
          *v9 = v10;
          v9[1] = v10;
          v9 += 4;
          v8 -= 4;
        }
        while (v4 + v8 > 3);
        LODWORD(v11) = -v8;
      }
      if ((int)v11 < v4)
      {
        v11 = v11;
        do
          v5[v11++] = vbslq_s8(*(int8x16_t *)(*(_QWORD *)(a1 + 408) + 16), *(int8x16_t *)*(_QWORD *)(a1 + 408), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 408), *(float32x4_t *)*(_QWORD *)(a1 + 408), 3));
        while (v11 < v4);
      }
      ++v3;
      v6 = (int8x16_t *)((char *)v6 + v7);
      v5 = (int8x16_t *)((char *)v5 + v7);
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcTXPremulColor::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcTXPremulColor::GetROI()
{
  return 0;
}

void HgcTXPremulColor::HgcTXPremulColor(HgcTXPremulColor *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6510D58;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B296DD18(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcTXPremulColor::~HgcTXPremulColor(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6510D58;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcTXPremulColor::~HgcTXPremulColor(this);
  HGObject::operator delete(v1);
}

uint64_t HgcTXPremulColor::SetParameter(HgcTXPremulColor *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcTXPremulColor::GetParameter(HgcTXPremulColor *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcTXGlowMix::GetProgram(HgcTXGlowMix *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000029e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0 = clamp(r0.wwww*half4(hg_Params[0]), 0.00000h, 1.00000h);\n"
             "    r0 = half4(hg_Params[1])*r0;\n"
             "    output.color0 = float4(r0)*float4(r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=d13ab9e4:f9602b4c:6bdbf93d:fd6c672a\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000027b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0 = clamp(r0.wwww*hg_Params[0], 0.00000f, 1.00000f);\n"
             "    r0 = hg_Params[1]*r0;\n"
             "    output.color0 = r0*r0.wwww;\n"
             "    return output;\n"
             "}\n"
             "//MD5=972021ef:6831d6bb:0c2f8c81:0f83b167\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0002:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000027f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r0 = clamp(r0.wwww*hg_ProgramLocal0, vec4(0.00000), vec4(1.00000));\n"
           "    r0 = hg_ProgramLocal1*r0;\n"
           "    gl_FragColor = r0*r0.wwww;\n"
           "}\n"
           "//MD5=1578383b:5660ee4d:6e591614:1a4b03c4\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0002:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcTXGlowMix::InitProgramDescriptor(HgcTXGlowMix *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTXGlowMix_hgc_visible", "//Metal1.0     \n//LEN=0000000151\n[[ visible ]] FragmentOut HgcTXGlowMix_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r0 = clamp(r0.wwww*hg_Params[0], 0.00000f, 1.00000f);\n"
    "    r0 = hg_Params[1]*r0;\n"
    "    output.color0 = r0*r0.wwww;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B296DEFC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcTXGlowMix");
}

void sub_1B296DF0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B296E00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B296E04C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B296E044);
}

_QWORD *HgcTXGlowMix::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTXGlowMix [hgc1]");
}

uint64_t HgcTXGlowMix::BindTexture(HgcTXGlowMix *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcTXGlowMix::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcTXGlowMix::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;
  float32x4_t v21;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t **)(a1 + 408);
          v12 = v11[1];
          v13 = v11[2];
          v14 = v11[3];
          v15 = vmulq_f32(vminq_f32(vmaxq_f32(vmulq_laneq_f32(*v11, *(float32x4_t *)(v6 + v10 - 32), 3), v13), v14), v12);
          v16 = vmulq_f32(vminq_f32(vmaxq_f32(vmulq_laneq_f32(*v11, *(float32x4_t *)(v6 + v10 - 16), 3), v13), v14), v12);
          v17 = vmulq_f32(vminq_f32(vmaxq_f32(vmulq_laneq_f32(*v11, *(float32x4_t *)(v6 + v10), 3), v13), v14), v12);
          v18 = vmulq_f32(vminq_f32(vmaxq_f32(vmulq_laneq_f32(*v11, *(float32x4_t *)(v6 + v10 + 16), 3), v13), v14), v12);
          v19 = (float32x4_t *)(v5 + v10);
          v19[-2] = vmulq_laneq_f32(v15, v15, 3);
          v19[-1] = vmulq_laneq_f32(v16, v16, 3);
          *v19 = vmulq_laneq_f32(v17, v17, 3);
          v19[1] = vmulq_laneq_f32(v18, v18, 3);
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v20) = -v9;
      }
      if ((int)v20 < v4)
      {
        v20 = v20;
        do
        {
          v21 = vmulq_f32(vminq_f32(vmaxq_f32(vmulq_laneq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 408), *(float32x4_t *)(v6 + 16 * v20), 3), *(float32x4_t *)(*(_QWORD *)(a1 + 408) + 32)), *(float32x4_t *)(*(_QWORD *)(a1 + 408) + 48)), *(float32x4_t *)(*(_QWORD *)(a1 + 408) + 16));
          *(float32x4_t *)(v5 + 16 * v20++) = vmulq_laneq_f32(v21, v21, 3);
        }
        while (v20 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcTXGlowMix::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcTXGlowMix::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcTXGlowMix::HgcTXGlowMix(HgcTXGlowMix *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6510FC0;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = _Q1;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B296E36C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcTXGlowMix::~HgcTXGlowMix(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6510FC0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C404247E4FDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcTXGlowMix::~HgcTXGlowMix(this);
  HGObject::operator delete(v1);
}

uint64_t HgcTXGlowMix::SetParameter(HgcTXGlowMix *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;

  if ((_DWORD)a2 == 1)
  {
    v9 = *((_QWORD *)this + 51);
    if (*(float *)(v9 + 16) != a3.n128_f32[0]
      || *(float *)(v9 + 20) != a4
      || *(float *)(v9 + 24) != a5
      || *(float *)(v9 + 28) != a6)
    {
      *(_DWORD *)(v9 + 16) = a3.n128_u32[0];
      *(float *)(v9 + 20) = a4;
      *(float *)(v9 + 24) = a5;
      *(float *)(v9 + 28) = a6;
      goto LABEL_13;
    }
    return 0;
  }
  if (!(_DWORD)a2)
  {
    v7 = *((_QWORD *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a3.n128_f32[0]
      || *(float *)(v7 + 8) != a3.n128_f32[0]
      || *(float *)(v7 + 12) != a3.n128_f32[0])
    {
      v8 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      *(int32x4_t *)v7 = v8;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v7 + 64) = a3;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcTXGlowMix::GetParameter(HgcTXGlowMix *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[4];
    a3[1] = v5[5];
    a3[2] = v5[6];
    v4 = v5 + 7;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[16];
    a3[1] = v3[17];
    a3[2] = v3[18];
    v4 = v3 + 19;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcTXModulate::GetProgram(HgcTXModulate *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000307\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0.wwww*half4(hg_Params[0]);\n"
             "    output.color0 = float4(r1)*float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1d09d869:7cd955f7:353fc8a1:a9ec9d54\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002e4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0 = r0.wwww*hg_Params[0];\n"
             "    output.color0 = r1*r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=15c9e9d3:f22bf7b9:996454d7:a5632a63\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000028e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0 = r0.wwww*hg_ProgramLocal0;\n"
           "    gl_FragColor = r1*r0;\n"
           "}\n"
           "//MD5=5eb97ec9:baab9bfc:5b1e2b66:f6a473a6\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcTXModulate::InitProgramDescriptor(HgcTXModulate *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTXModulate_hgc_visible", "//Metal1.0     \n//LEN=0000000140\n[[ visible ]] FragmentOut HgcTXModulate_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r1 = color1;\n"
    "    r0 = r0.wwww*hg_Params[0];\n"
    "    output.color0 = r1*r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B296E5D8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcTXModulate");
}

void sub_1B296E5E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B296E728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B296E770()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B296E768);
}

_QWORD *HgcTXModulate::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTXModulate [hgc1]");
}

uint64_t HgcTXModulate::BindTexture(HgcTXModulate *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcTXModulate::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcTXModulate::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  uint64_t v18;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)*(_QWORD *)(a1 + 408);
          v14 = vmulq_f32(*(float32x4_t *)(v6 + v12 - 16), vmulq_laneq_f32(v13, *(float32x4_t *)(v8 + v12 - 16), 3));
          v15 = vmulq_f32(*(float32x4_t *)(v6 + v12), vmulq_laneq_f32(v13, *(float32x4_t *)(v8 + v12), 3));
          v16 = vmulq_f32(*(float32x4_t *)(v6 + v12 + 16), vmulq_laneq_f32(v13, *(float32x4_t *)(v8 + v12 + 16), 3));
          v17 = (float32x4_t *)(v5 + v12);
          v17[-2] = vmulq_f32(*(float32x4_t *)(v6 + v12 - 32), vmulq_laneq_f32(v13, *(float32x4_t *)(v8 + v12 - 32), 3));
          v17[-1] = v14;
          *v17 = v15;
          v17[1] = v16;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v18) = -v11;
      }
      if ((int)v18 < v4)
      {
        v18 = v18;
        do
        {
          *(float32x4_t *)(v5 + 16 * v18) = vmulq_f32(*(float32x4_t *)(v6 + 16 * v18), vmulq_laneq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 408), *(float32x4_t *)(v8 + 16 * v18), 3));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcTXModulate::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcTXModulate::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcTXModulate::HgcTXModulate(HgcTXModulate *this)
{
  _QWORD *v2;
  _QWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6511228;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B296EA80(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcTXModulate::~HgcTXModulate(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6511228;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcTXModulate::~HgcTXModulate(this);
  HGObject::operator delete(v1);
}

uint64_t HgcTXModulate::SetParameter(HgcTXModulate *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcTXModulate::GetParameter(HgcTXModulate *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

NSString *PCReplaceUnsupportedXMLChars(NSString *a1, NSString *a2)
{
  NSString *v2;
  uint64_t v5;

  v2 = a1;
  if (a1 && -[NSString length](a1, "length"))
  {
    v2 = (NSString *)objc_msgSend(MEMORY[0x1E0CB37A0], "stringWithString:", v2);
    v5 = 0;
    objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB38E8], "regularExpressionWithPattern:options:error:", CFSTR("[\x00-\b]|\v|\f|[\x0E-\x1F]"), 0, &v5), "replaceMatchesInString:options:range:withTemplate:", v2, 0, 0, -[NSString length](v2, "length"), a2);
  }
  return v2;
}

BOOL compareVertex(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v5;
  double v6;

  v2 = *(double *)(a1 + 16);
  v3 = *(double *)(a2 + 16);
  if (v2 > v3)
    return 0;
  if (v2 < v3)
    return 1;
  v5 = *(double *)(a1 + 24);
  v6 = *(double *)(a2 + 24);
  return v5 <= v6 && v5 < v6;
}

BOOL PCEdgeSegment::operator<(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v19;

  v2 = a1[1];
  v3 = a2[1];
  if (v2 > v3)
  {
    v4 = a2[2];
    v5 = a2[3] - v3;
    v6 = v5 * (a1[2] - v4);
    v7 = v2 - v3;
    v8 = a2[4] - v4;
    v9 = v7 * v8;
    if (vabdd_f64(v6, v9) < 0.0000001)
      return v5 * (a1[4] - v4) - v8 * (a1[3] - v3) <= 0.0;
    return v6 - v9 < 0.0;
  }
  v11 = a1[2];
  v12 = a1[3];
  v13 = a2[2];
  v14 = (v12 - v2) * (v13 - v11);
  v15 = v3 - v2;
  v16 = a1[4] - v11;
  v17 = v15 * v16;
  if (vabdd_f64(v14, v17) >= 0.0000001)
  {
    v19 = v14 - v17;
    return v19 > 0.0;
  }
  if (vabdd_f64(v2, v12) >= 0.0000001)
  {
    v19 = (v12 - v2) * (a2[4] - v11) - v16 * (a2[3] - v2);
    return v19 > 0.0;
  }
  return v11 < v13;
}

uint64_t *PCVertexList::PCVertexList(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = a2[1] - *a2;
  if (v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = v3 >> 4;
    if ((unint64_t)(v3 >> 4) <= 1)
      v9 = 1;
    else
      v9 = v3 >> 4;
    do
    {
      v23 = 0u;
      v24 = 0u;
      v20 = 0u;
      v21 = 0u;
      *(_QWORD *)&v22 = v7;
      v10 = *a2;
      v23 = *(_OWORD *)(*a2 + v5);
      if (v7 + 1 == v8)
        v11 = 0;
      else
        v11 = v7 + 1;
      v24 = *(_OWORD *)(v10 + 16 * v11);
      *(_QWORD *)&v19 = v7;
      v20 = *(_OWORD *)(v10 + 16 * v11);
      v21 = *(_OWORD *)(v10 + v5);
      if (*(double *)&v23 > *(double *)&v20
        || *(double *)&v23 >= *(double *)&v20 && *((double *)&v23 + 1) >= *((double *)&v20 + 1))
      {
        v12 = 0;
        v13 = 1;
      }
      else
      {
        v13 = 0;
        v12 = 1;
      }
      *((_QWORD *)&v22 + 1) = v13;
      *((_QWORD *)&v19 + 1) = v12;
      if ((unint64_t)v6 >= a1[2])
      {
        v14 = (_OWORD *)std::vector<PCEdgeVertex>::__push_back_slow_path<PCEdgeVertex const&>(a1, &v22);
      }
      else
      {
        *v6 = v22;
        v6[1] = v23;
        v6[2] = v24;
        v14 = v6 + 3;
      }
      a1[1] = (uint64_t)v14;
      if ((unint64_t)v14 >= a1[2])
      {
        v6 = (__int128 *)std::vector<PCEdgeVertex>::__push_back_slow_path<PCEdgeVertex const&>(a1, &v19);
      }
      else
      {
        *v14 = v19;
        v14[1] = v20;
        v14[2] = v21;
        v6 = v14 + 3;
      }
      a1[1] = (uint64_t)v6;
      v5 += 16;
      ++v7;
    }
    while (v7 != v9);
    v15 = (__int128 *)*a1;
  }
  else
  {
    v6 = 0;
    v15 = 0;
  }
  v16 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v6 - v15));
  *(_QWORD *)&v22 = compareVertex;
  if (v6 == v15)
    v17 = 0;
  else
    v17 = v16;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*,false>(v15, v6, (unsigned int (**)(_OWORD *, __int128 *))&v22, v17, 1);
  return a1;
}

void sub_1B296EF60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PCSweepline::PCSweepline(uint64_t a1, __int128 **a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if ((__int128 **)a1 != a2)
    std::vector<PCVector2<double>>::__assign_with_size[abi:ne180100]<PCVector2<double>*,PCVector2<double>*>((_QWORD *)a1, *a2, a2[1], a2[1] - *a2);
  return a1;
}

void sub_1B296EFD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v4;

  PCBinaryTree<PCEdgeSegment>::~PCBinaryTree(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void PCSweepline::~PCSweepline(PCSweepline *this)
{
  void *v2;

  PCBinaryTree<PCEdgeSegment>::~PCBinaryTree((uint64_t *)this + 3);
  v2 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v2;
    operator delete(v2);
  }
}

uint64_t PCSweepline::addSegment(_QWORD *a1, unint64_t *a2)
{
  unint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  int32x2_t v6;
  __int128 v7;
  unint64_t v9;
  __int128 v10;
  float64x2_t v11;

  v10 = 0u;
  v11 = 0u;
  v9 = *a2;
  v3 = (uint64_t)(a1[1] - *a1) >> 4;
  v4 = *(float64x2_t *)(*a1 + 16 * (v9 % v3));
  v5 = *(float64x2_t *)(*a1 + 16 * ((v9 + 1) % v3));
  if ((vmovn_s64(vcgtq_f64(v4, v5)).u8[0] & 1) != 0
    || (v6 = vmovn_s64(vcgtq_f64(v5, v4)), ((v6.i32[0] | v6.i32[1]) & 1) == 0))
  {
    v7 = *(_OWORD *)(*a1 + 16 * ((v9 + 1) % v3));
  }
  else
  {
    v7 = *(_OWORD *)(*a1 + 16 * (v9 % v3));
    v4 = *(float64x2_t *)(*a1 + 16 * ((v9 + 1) % v3));
  }
  v10 = v7;
  v11 = v4;
  PCBinaryTree<PCEdgeSegment>::insertNode(a1 + 3, (uint64_t)&v9);
  return PCBinaryTree<PCEdgeSegment>::findNode((uint64_t)(a1 + 3), a1[3], (double *)&v9);
}

__n128 PCBinaryTree<PCEdgeSegment>::insertNode(uint64_t *a1, uint64_t a2)
{
  __n128 result;
  uint64_t v5;
  __int128 v6;

  if (*a1)
  {
    PCBinaryTree<PCEdgeSegment>::insertNode(a1, *a1, a2);
  }
  else
  {
    v5 = operator new();
    result = *(__n128 *)a2;
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_OWORD *)(v5 + 16) = v6;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    *(_QWORD *)(v5 + 56) = 0;
    *a1 = v5;
  }
  return result;
}

uint64_t PCBinaryTree<PCEdgeSegment>::findNode(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3;
  double v5;

  v3 = a2;
  if (a2)
  {
    v5 = *a3;
    while (*(_QWORD *)v3 != *(_QWORD *)&v5)
    {
      if (PCEdgeSegment::operator<(a3, (double *)v3))
      {
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          return v3;
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 48);
        if (!v3)
          return v3;
      }
    }
  }
  return v3;
}

BOOL PCSweepline::intersect(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  unint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  result = 0;
  if (a2 && a3)
  {
    v5 = (uint64_t)(a1[1] - *a1) >> 4;
    if ((*(_QWORD *)a2 + 1) % v5 == *(_QWORD *)a3)
      return 0;
    if ((*(_QWORD *)a3 + 1) % v5 == *(_QWORD *)a2)
      return 0;
    v6 = *(double *)(a2 + 8);
    v7 = *(double *)(a2 + 16);
    v8 = *(double *)(a2 + 24);
    v9 = *(double *)(a2 + 32);
    v10 = *(double *)(a3 + 8);
    v11 = *(double *)(a3 + 16);
    v13 = *(double *)(a3 + 24);
    v12 = *(double *)(a3 + 32);
    return ((v8 - v6) * (v11 - v7) - (v10 - v6) * (v9 - v7)) * ((v8 - v6) * (v12 - v7) - (v9 - v7) * (v13 - v6)) <= 0.0
        && ((v7 - v11) * (v13 - v10) - (v6 - v10) * (v12 - v11)) * ((v9 - v11) * (v13 - v10) - (v8 - v10) * (v12 - v11)) <= 0.0;
  }
  return result;
}

void PCBinaryTree<PCEdgeSegment>::removeNode(uint64_t **a1, uint64_t a2, double *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  double *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;

  if (a2)
  {
    v5 = a1;
    if (*(_QWORD *)a2 != *(_QWORD *)a3)
    {
      if (!PCEdgeSegment::operator<((double *)a2, a3))
      {
        v13 = PCBinaryTree<PCEdgeSegment>::removeNode(v5, *(_QWORD *)(a2 + 40), a3);
        *(_QWORD *)(a2 + 40) = v13;
        if (!v13)
          goto LABEL_17;
        goto LABEL_16;
      }
      v11 = *(uint64_t **)(a2 + 48);
      a1 = v5;
      v12 = a3;
LABEL_15:
      v13 = PCBinaryTree<PCEdgeSegment>::removeNode(a1, v11, v12);
      *(_QWORD *)(a2 + 48) = v13;
      if (!v13)
      {
LABEL_17:
        v6 = (uint64_t *)a2;
LABEL_26:
        v17 = *v5;
        PCBinaryTree<PCEdgeSegment>::balance((uint64_t)v5, v6);
        if (v6 == v17)
          *v5 = v18;
        return;
      }
LABEL_16:
      *(_QWORD *)(v13 + 56) = a2;
      goto LABEL_17;
    }
    v6 = *(uint64_t **)(a2 + 40);
    v7 = *(uint64_t **)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    v9 = *a1;
    if (*(_OWORD *)(a2 + 40) != 0)
    {
      if (v6 && !v7)
      {
        if (v8)
        {
          v10 = (uint64_t **)(v8 + 40);
          if (*(_QWORD *)(v8 + 40) == a2 || (v10 = (uint64_t **)(v8 + 48), *(_QWORD *)(v8 + 48) == a2))
          {
            *v10 = v6;
            v6[7] = v8;
          }
        }
        if (v9 == (uint64_t *)a2)
        {
          *a1 = 0;
          MEMORY[0x1B5E29170](a2, 0x1020C40CB6E4C77);
          *v5 = v6;
          v6[7] = 0;
        }
        else
        {
          MEMORY[0x1B5E29170](a2, 0x1020C40CB6E4C77);
        }
        goto LABEL_26;
      }
      if (!v6 && v7)
      {
        if (v8)
        {
          v19 = (uint64_t **)(v8 + 40);
          if (*(_QWORD *)(v8 + 40) == a2 || (v19 = (uint64_t **)(v8 + 48), *(_QWORD *)(v8 + 48) == a2))
          {
            *v19 = v7;
            v7[7] = v8;
          }
        }
        if (v9 == (uint64_t *)a2)
        {
          *a1 = 0;
          MEMORY[0x1B5E29170](a2, 0x1020C40CB6E4C77);
          *v5 = v7;
          v7[7] = 0;
        }
        else
        {
          MEMORY[0x1B5E29170](a2, 0x1020C40CB6E4C77);
        }
        v6 = v7;
        goto LABEL_26;
      }
      v20 = *(_QWORD *)(a2 + 48);
      do
      {
        v12 = (double *)v20;
        v20 = *(_QWORD *)(v20 + 40);
      }
      while (v20);
      v21 = *(_OWORD *)v12;
      v22 = *((_OWORD *)v12 + 1);
      *(double *)(a2 + 32) = v12[4];
      *(_OWORD *)a2 = v21;
      *(_OWORD *)(a2 + 16) = v22;
      v11 = v7;
      goto LABEL_15;
    }
    if (v8)
    {
      v14 = (_QWORD *)(v8 + 40);
      if (*(_QWORD *)(v8 + 40) == a2)
      {
LABEL_22:
        *v14 = 0;
        goto LABEL_23;
      }
      v16 = *(_QWORD *)(v8 + 48);
      v15 = (_QWORD *)(v8 + 48);
      if (v16 == a2)
      {
        v14 = v15;
        goto LABEL_22;
      }
    }
LABEL_23:
    if (v9 == (uint64_t *)a2)
      *a1 = 0;
    MEMORY[0x1B5E29170](a2, 0x1020C40CB6E4C77);
    v6 = 0;
    goto LABEL_26;
  }
}

uint64_t PCSweepline::getSegmentAboveSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a2 + 48);
  if (v2)
  {
    do
    {
      result = v2;
      v2 = *(_QWORD *)(v2 + 40);
    }
    while (v2);
    return result;
  }
  v4 = *(_QWORD *)(a2 + 56);
  if (!v4)
    return 0;
  if (*(_QWORD *)(v4 + 40) == a2)
    return *(_QWORD *)(a2 + 56);
  do
  {
    result = *(_QWORD *)(v4 + 56);
    if (!result)
      break;
    v5 = *(_QWORD *)(result + 40) == v4;
    v4 = *(_QWORD *)(v4 + 56);
  }
  while (!v5);
  return result;
}

uint64_t PCSweepline::getSegmentBelowSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  BOOL v5;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a2 + 40);
  if (v2)
  {
    do
    {
      result = v2;
      v2 = *(_QWORD *)(v2 + 48);
    }
    while (v2);
    return result;
  }
  v4 = *(_QWORD *)(a2 + 56);
  if (!v4)
    return 0;
  if (*(_QWORD *)(v4 + 48) == a2)
    return *(_QWORD *)(a2 + 56);
  do
  {
    result = *(_QWORD *)(v4 + 56);
    if (!result)
      break;
    v5 = *(_QWORD *)(result + 48) == v4;
    v4 = *(_QWORD *)(v4 + 56);
  }
  while (!v5);
  return result;
}

uint64_t isSimplePolygon(uint64_t *a1)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  uint64_t Node;
  double *v7;
  uint64_t SegmentAboveSegment;
  uint64_t SegmentBelowSegment;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t *v17;
  void *__p;
  _BYTE *v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;

  PCVertexList::PCVertexList((uint64_t *)&__p, a1);
  PCSweepline::PCSweepline((uint64_t)v16, (__int128 **)a1);
  v2 = (char *)__p;
  if (v19 == __p)
  {
LABEL_10:
    v14 = 1;
    goto LABEL_12;
  }
  v3 = 0;
  v4 = 0;
  while (1)
  {
    v5 = &v2[v3];
    if (!*(_QWORD *)&v2[v3 + 8])
      break;
    v20 = *(_QWORD *)v5;
    v22 = *((_OWORD *)v5 + 1);
    v21 = *((_OWORD *)v5 + 2);
    Node = PCBinaryTree<PCEdgeSegment>::findNode((uint64_t)&v17, (uint64_t)v17, (double *)&v20);
    v7 = (double *)Node;
    if (Node)
    {
      SegmentAboveSegment = PCSweepline::getSegmentAboveSegment(Node, Node);
      SegmentBelowSegment = PCSweepline::getSegmentBelowSegment(SegmentAboveSegment, (uint64_t)v7);
      if (PCSweepline::intersect(v16, SegmentAboveSegment, SegmentBelowSegment))
        goto LABEL_11;
      PCBinaryTree<PCEdgeSegment>::removeNode(&v17, (uint64_t)v17, v7);
    }
LABEL_9:
    ++v4;
    v2 = (char *)__p;
    v3 += 48;
    if (v4 >= 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)__p) >> 4))
      goto LABEL_10;
  }
  v10 = PCSweepline::addSegment(v16, (unint64_t *)v5);
  v11 = PCSweepline::getSegmentAboveSegment(v10, v10);
  v12 = PCSweepline::intersect(v16, v10, v11);
  if (!v12)
  {
    v13 = PCSweepline::getSegmentBelowSegment(v12, v10);
    if (!PCSweepline::intersect(v16, v10, v13))
      goto LABEL_9;
  }
LABEL_11:
  v14 = 0;
LABEL_12:
  PCSweepline::~PCSweepline((PCSweepline *)v16);
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  return v14;
}

void sub_1B296F720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<PCEdgeVertex>::__push_back_slow_path<PCEdgeVertex const&>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v7, v9);
  v11 = &v10[48 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[48 * v12];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = a2[2];
  v17 = v11 + 48;
  std::vector<PCEdgeVertex>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 48) % 0x30uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1B296F870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<PCEdgeVertex>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 == *result)
  {
    v5 = a2[1];
  }
  else
  {
    do
    {
      v5 = v4 - 48;
      *(_OWORD *)(v4 - 48) = *(_OWORD *)(v3 - 48);
      *(_OWORD *)(v4 - 32) = *(_OWORD *)(v3 - 32);
      *(_OWORD *)(v4 - 16) = *(_OWORD *)(v3 - 16);
      v3 -= 48;
      v4 -= 48;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  v6 = *result;
  *result = v5;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*,false>(__int128 *a1, __int128 *a2, unsigned int (**a3)(_OWORD *, __int128 *), uint64_t a4, char a5)
{
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unsigned int (*v25)(_OWORD *, __int128 *);
  __int128 v26;
  __int128 *v27;
  char v28;
  BOOL v29;
  unsigned int (*v30)(_OWORD *, __int128 *);
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[3];
  _OWORD v37[3];
  _OWORD v38[3];
  _OWORD v39[3];
  __int128 v40;

LABEL_1:
  v9 = a2 - 3;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v30 = *a3;
        v39[0] = *(a2 - 3);
        v39[1] = *(a2 - 2);
        v39[2] = *(a2 - 1);
        v31 = v10[1];
        v38[0] = *v10;
        v38[1] = v31;
        v38[2] = v10[2];
        if (v30(v39, v38))
        {
          v32 = v10[1];
          v40 = *v10;
          v33 = v10[2];
          v35 = *(a2 - 2);
          v34 = *(a2 - 1);
          *v10 = *v9;
          v10[1] = v35;
          v10[2] = v34;
          *v9 = v40;
          *(a2 - 2) = v32;
          *(a2 - 1) = v33;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(v10, v10 + 3, v10 + 6, a2 - 3, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(v10, v10 + 3, v10 + 6, v10 + 9, a2 - 3, a3);
        return;
      default:
        if (v13 <= 1151)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>((uint64_t)v10, a2, (uint64_t (**)(__int128 *, _OWORD *))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>((uint64_t)v10, a2, (uint64_t (**)(__int128 *, _OWORD *))a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x1801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(v16, v10, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(v10, v16, a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(v10 + 3, v18, a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(v19, v20, a2 - 9, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(v18, v16, v20, a3);
            v21 = a1[1];
            v40 = *a1;
            v22 = a1[2];
            v23 = v16[2];
            v24 = *v16;
            a1[1] = v16[1];
            a1[2] = v23;
            *a1 = v24;
            *v16 = v40;
            v16[1] = v21;
            v16[2] = v22;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v25 = *a3;
          v37[0] = *(a1 - 3);
          v37[1] = *(a1 - 2);
          v37[2] = *(a1 - 1);
          v26 = a1[1];
          v36[0] = *a1;
          v36[1] = v26;
          v36[2] = a1[2];
          if ((((uint64_t (*)(_OWORD *, _OWORD *))v25)(v37, v36) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PCEdgeVertex *,BOOL (*&)(PCEdgeVertex,PCEdgeVertex)>(a1, a2, (uint64_t (**)(__int128 *, _OWORD *))a3);
            goto LABEL_16;
          }
LABEL_11:
          v27 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PCEdgeVertex *,BOOL (*&)(PCEdgeVertex,PCEdgeVertex)>(a1, a2, (uint64_t (**)(_OWORD *, __int128 *))a3);
          if ((v28 & 1) == 0)
            goto LABEL_14;
          v29 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, v27, a3);
          v10 = v27 + 3;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(v27 + 3, a2, a3))
          {
            v11 = v12 + 1;
            if (v29)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*,false>(a1, v27, a3, -v12, a5 & 1);
            v10 = v27 + 3;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v27;
          if (v29)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*,PCEdgeVertex*>((uint64_t)v10, a2, a2, (uint64_t (**)(_OWORD *, __int128 *))a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = (uint64_t)((uint64_t)a2 - v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*((_DWORD *)a2 - 2) > *(_DWORD *)(v9 + 8))
        {
          v20 = *(_OWORD *)v9;
          *(_OWORD *)v9 = *((_OWORD *)a2 - 1);
          *((_OWORD *)a2 - 1) = v20;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__int128 *)v9, (__int128 *)(v9 + 16), (__int128 *)a2 - 1);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(v9, v9 + 16, v9 + 32, (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__n128 *)v9, (__n128 *)(v9 + 16), (__n128 *)(v9 + 32), (__n128 *)(v9 + 48), (__n128 *)a2 - 1);
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((_DWORD *)v9, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((_DWORD *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (__int128 *)(v9 + 16 * (v13 >> 1));
          if ((unint64_t)v12 < 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__int128 *)(v9 + 16 * (v13 >> 1)), (__int128 *)v9, (__int128 *)a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__int128 *)v9, (__int128 *)(v9 + 16 * (v13 >> 1)), (__int128 *)a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__int128 *)(v9 + 16), v15 - 1, (__int128 *)a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__int128 *)(v9 + 32), (__int128 *)(v9 + 16 + 16 * v14), (__int128 *)a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(v15 - 1, v15, (__int128 *)(v9 + 16 + 16 * v14));
            v19 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *v15;
            *v15 = v19;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(_DWORD *)(v9 - 8) <= *(_DWORD *)(v9 + 8))
          {
            v9 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Info *,PCSingleton::Compare &>((_QWORD *)v9, a2);
            goto LABEL_16;
          }
LABEL_11:
          v16 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Info *,PCSingleton::Compare &>((uint64_t *)v9, a2);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(v9, v16);
          v9 = v16 + 16;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(v16 + 16, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *,false>(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 16;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (_QWORD *)v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((_QWORD *)v9 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *,PCSingleton::Info *>(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a2 - 1;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = (char *)a2 - (char *)v10;
    v13 = v12 >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v97 = *(a2 - 2);
        v98 = *a1;
        if (*(_QWORD *)(v97 + 112) > *(_QWORD *)(*a1 + 112))
        {
          *a1 = v97;
          *(a2 - 2) = v98;
          v99 = a1[1];
          a1[1] = *(a2 - 1);
          *(a2 - 1) = v99;
        }
        return;
      case 3uLL:
        v100 = a1[2];
        v101 = *(_QWORD *)(v100 + 112);
        v102 = *a1;
        v103 = *(_QWORD *)(*a1 + 112);
        v104 = *(a2 - 2);
        v105 = *(_QWORD *)(v104 + 112);
        if (v101 > v103)
        {
          if (v105 <= v101)
          {
            v106 = a1 + 3;
            v127 = a1[3];
            v128 = a1[1];
            *a1 = v100;
            a1[1] = v127;
            a1[2] = v102;
            a1[3] = v128;
            v129 = *(a2 - 2);
            if (*(_QWORD *)(v129 + 112) <= v103)
              return;
            a1[2] = v129;
          }
          else
          {
            v106 = a1 + 1;
            *a1 = v104;
          }
          *(a2 - 2) = v102;
          goto LABEL_98;
        }
        if (v105 > v101)
        {
          a1[2] = v104;
          *(a2 - 2) = v100;
          v9 = a1 + 3;
          v124 = a1[3];
          a1[3] = *(a2 - 1);
          *(a2 - 1) = v124;
          v125 = a1[2];
          v126 = *a1;
          if (*(_QWORD *)(v125 + 112) > *(_QWORD *)(*a1 + 112))
          {
            *a1 = v125;
            a1[2] = v126;
            v106 = a1 + 1;
LABEL_98:
            v130 = *v106;
            *v106 = *v9;
            *v9 = v130;
            return;
          }
        }
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SortGPUDevices &,std::shared_ptr<HGGPUComputeDevice const> *>(a1, a1 + 2, a1 + 4, a2 - 2);
        return;
      case 5uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SortGPUDevices &,std::shared_ptr<HGGPUComputeDevice const> *>(a1, a1 + 2, a1 + 4, a1 + 6);
        v107 = *(a2 - 2);
        v108 = a1[6];
        if (*(_QWORD *)(v107 + 112) > *(_QWORD *)(v108 + 112))
        {
          a1[6] = v107;
          *(a2 - 2) = v108;
          v109 = a1[7];
          a1[7] = *(a2 - 1);
          *(a2 - 1) = v109;
          v110 = a1[6];
          v111 = *(_QWORD *)(v110 + 112);
          v112 = a1[4];
          if (v111 > *(_QWORD *)(v112 + 112))
          {
            v113 = a1[5];
            v114 = a1[7];
            a1[4] = v110;
            a1[5] = v114;
            a1[6] = v112;
            a1[7] = v113;
            v115 = a1[2];
            if (v111 > *(_QWORD *)(v115 + 112))
            {
              v116 = a1[3];
              a1[2] = v110;
              a1[3] = v114;
              a1[4] = v115;
              a1[5] = v116;
              v117 = *a1;
              if (v111 > *(_QWORD *)(*a1 + 112))
              {
                v118 = a1[1];
                *a1 = v110;
                a1[1] = v114;
                a1[2] = v117;
                a1[3] = v118;
              }
            }
          }
        }
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,SortGPUDevices &,std::shared_ptr<HGGPUComputeDevice const> *>(a1, a2);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,SortGPUDevices &,std::shared_ptr<HGGPUComputeDevice const> *>(a1, a2);
          return;
        }
        v14 = v11;
        if (v11 != 1)
        {
          v15 = v13 >> 1;
          v16 = &a1[2 * (v13 >> 1)];
          v17 = *(a2 - 2);
          v18 = *(_QWORD *)(v17 + 112);
          if ((unint64_t)v12 >= 0x801)
          {
            v19 = *v16;
            v20 = *(_QWORD *)(*v16 + 112);
            v21 = *a1;
            v22 = *(_QWORD *)(*a1 + 112);
            if (v20 <= v22)
            {
              if (v18 <= v20)
                goto LABEL_23;
              *v16 = v17;
              *(a2 - 2) = v19;
              v29 = &a1[2 * v15];
              v31 = v29[1];
              v30 = v29 + 1;
              *v30 = *(a2 - 1);
              *(a2 - 1) = v31;
              v32 = *a1;
              if (*(_QWORD *)(*v16 + 112) <= *(_QWORD *)(*a1 + 112))
              {
LABEL_23:
                v39 = v15 - 1;
                v40 = &a1[2 * v15 - 2];
                v41 = *v40;
                v42 = *(_QWORD *)(*v40 + 112);
                v43 = a1[2];
                v44 = *(_QWORD *)(v43 + 112);
                v45 = *(a2 - 4);
                v46 = *(_QWORD *)(v45 + 112);
                if (v42 <= v44)
                {
                  if (v46 <= v42)
                    goto LABEL_36;
                  *v40 = v45;
                  *(a2 - 4) = v41;
                  v48 = &a1[2 * v39];
                  v50 = v48[1];
                  v49 = v48 + 1;
                  *v49 = *(a2 - 3);
                  *(a2 - 3) = v50;
                  v51 = a1[2];
                  if (*(_QWORD *)(*v40 + 112) <= *(_QWORD *)(v51 + 112))
                  {
LABEL_36:
                    v59 = v15 + 1;
                    v60 = &a1[2 * v15 + 2];
                    v61 = *v60;
                    v62 = *(_QWORD *)(*v60 + 112);
                    v63 = a1[4];
                    v64 = *(_QWORD *)(v63 + 112);
                    v65 = *(a2 - 6);
                    v66 = *(_QWORD *)(v65 + 112);
                    if (v62 <= v64)
                    {
                      if (v66 > v62)
                      {
                        *v60 = v65;
                        *(a2 - 6) = v61;
                        v68 = &a1[2 * v59];
                        v70 = v68[1];
                        v69 = v68 + 1;
                        *v69 = *(a2 - 5);
                        *(a2 - 5) = v70;
                        v61 = *v60;
                        v71 = a1[4];
                        if (*(_QWORD *)(*v60 + 112) > *(_QWORD *)(v71 + 112))
                        {
                          a1[4] = v61;
                          *v60 = v71;
                          v67 = a1 + 5;
LABEL_45:
                          v76 = *v67;
                          *v67 = *v69;
                          *v69 = v76;
                          v61 = *v60;
                        }
                      }
                    }
                    else
                    {
                      if (v66 > v62)
                      {
                        v67 = a1 + 5;
                        a1[4] = v65;
LABEL_44:
                        *(a2 - 6) = v63;
                        v69 = a2 - 5;
                        goto LABEL_45;
                      }
                      v72 = &a1[2 * v59];
                      v73 = v72[1];
                      v67 = v72 + 1;
                      v74 = a1[5];
                      a1[4] = v61;
                      a1[5] = v73;
                      *v60 = v63;
                      *v67 = v74;
                      v75 = *(a2 - 6);
                      if (*(_QWORD *)(v75 + 112) > v64)
                      {
                        *v60 = v75;
                        goto LABEL_44;
                      }
                      v61 = v63;
                    }
                    v77 = *v16;
                    v78 = *(_QWORD *)(*v16 + 112);
                    v79 = *v40;
                    v80 = *(_QWORD *)(*v40 + 112);
                    v81 = *(_QWORD *)(v61 + 112);
                    if (v78 <= v80)
                    {
                      if (v81 <= v78)
                      {
LABEL_55:
                        v92 = *a1;
                        *a1 = v77;
                        v28 = a1 + 1;
                        *v16 = v92;
                        v33 = &a1[2 * v15 + 1];
                        goto LABEL_56;
                      }
                      *v16 = v61;
                      v84 = &a1[2 * v15];
                      v85 = v84[1];
                      v83 = v84 + 1;
                      *v60 = v77;
                      v86 = &a1[2 * v59];
                      *v83 = v86[1];
                      v86[1] = v85;
                      if (v81 <= v80)
                      {
                        v77 = v61;
                        goto LABEL_55;
                      }
                      *v40 = v61;
                      *v16 = v79;
                      v82 = &a1[2 * v39 + 1];
                    }
                    else
                    {
                      v82 = &a1[2 * v39 + 1];
                      if (v81 <= v78)
                      {
                        *v40 = v77;
                        *v16 = v79;
                        v87 = &a1[2 * v15];
                        v89 = v87[1];
                        v88 = v87 + 1;
                        v90 = *v82;
                        *v82 = v89;
                        *v88 = v90;
                        if (v81 <= v80)
                        {
                          v77 = v79;
                          goto LABEL_55;
                        }
                        *v16 = v61;
                        *v60 = v79;
                        v83 = &a1[2 * v59 + 1];
                        v82 = v88;
                      }
                      else
                      {
                        *v40 = v61;
                        *v60 = v79;
                        v83 = &a1[2 * v59 + 1];
                      }
                    }
                    v91 = *v82;
                    *v82 = *v83;
                    *v83 = v91;
                    v77 = *v16;
                    goto LABEL_55;
                  }
                  a1[2] = *v40;
                  *v40 = v51;
                  v47 = a1 + 3;
                }
                else
                {
                  if (v46 <= v42)
                  {
                    v54 = &a1[2 * v39];
                    v55 = v54[1];
                    v47 = v54 + 1;
                    v56 = a1[3];
                    a1[2] = v41;
                    a1[3] = v55;
                    *v40 = v43;
                    *v47 = v56;
                    v57 = *(a2 - 4);
                    if (*(_QWORD *)(v57 + 112) <= v44)
                      goto LABEL_36;
                    *v40 = v57;
                  }
                  else
                  {
                    v47 = a1 + 3;
                    a1[2] = v45;
                  }
                  *(a2 - 4) = v43;
                  v49 = a2 - 3;
                }
                v58 = *v47;
                *v47 = *v49;
                *v49 = v58;
                goto LABEL_36;
              }
              *a1 = *v16;
              v23 = a1 + 1;
              *v16 = v32;
            }
            else
            {
              if (v18 <= v20)
              {
                *a1 = v19;
                *v16 = v21;
                v36 = a1[1];
                v23 = &a1[2 * v15 + 1];
                a1[1] = *v23;
                *v23 = v36;
                v37 = *(a2 - 2);
                if (*(_QWORD *)(v37 + 112) <= v22)
                  goto LABEL_23;
                *v16 = v37;
              }
              else
              {
                v23 = a1 + 1;
                *a1 = v17;
              }
              *(a2 - 2) = v21;
              v30 = a2 - 1;
            }
            v38 = *v23;
            *v23 = *v30;
            *v30 = v38;
            goto LABEL_23;
          }
          v24 = *a1;
          v25 = *(_QWORD *)(*a1 + 112);
          v26 = *v16;
          v27 = *(_QWORD *)(*v16 + 112);
          if (v25 <= v27)
          {
            if (v18 > v25)
            {
              *a1 = v17;
              *(a2 - 2) = v24;
              v33 = a1 + 1;
              v34 = a1[1];
              a1[1] = *(a2 - 1);
              *(a2 - 1) = v34;
              v35 = *v16;
              if (*(_QWORD *)(*a1 + 112) > *(_QWORD *)(*v16 + 112))
              {
                *v16 = *a1;
                *a1 = v35;
                v28 = &a1[2 * v15 + 1];
LABEL_56:
                v93 = *v28;
                *v28 = *v33;
                *v33 = v93;
              }
            }
          }
          else
          {
            v28 = &a1[2 * v15 + 1];
            if (v18 > v25)
            {
              *v16 = v17;
              *(a2 - 2) = v26;
LABEL_31:
              v33 = a2 - 1;
              goto LABEL_56;
            }
            *v16 = v24;
            *a1 = v26;
            v52 = *v28;
            *v28 = a1[1];
            a1[1] = v52;
            v53 = *(a2 - 2);
            if (*(_QWORD *)(v53 + 112) > v27)
            {
              *a1 = v53;
              *(a2 - 2) = v26;
              v28 = a1 + 1;
              goto LABEL_31;
            }
          }
          if ((a5 & 1) == 0 && *(_QWORD *)(*(a1 - 2) + 112) <= *(_QWORD *)(*a1 + 112))
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<HGGPUComputeDevice const> *,SortGPUDevices &>((__int128 *)a1, a2);
            goto LABEL_68;
          }
          v94 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::shared_ptr<HGGPUComputeDevice const> *,SortGPUDevices &>((__int128 *)a1, (__int128 *)a2);
          if ((v95 & 1) == 0)
            goto LABEL_66;
          v96 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SortGPUDevices &,std::shared_ptr<HGGPUComputeDevice const> *>(a1, v94);
          v10 = v94 + 2;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SortGPUDevices &,std::shared_ptr<HGGPUComputeDevice const> *>(v94 + 2, a2))
          {
            v11 = v14 + 1;
            if (v96)
              continue;
LABEL_66:
            std::__introsort<std::_ClassicAlgPolicy,SortGPUDevices &,std::shared_ptr<HGGPUComputeDevice const> *,false>(a1, v94, a3, -v14, a5 & 1);
            v10 = v94 + 2;
LABEL_68:
            a5 = 0;
            a4 = -v14;
            goto LABEL_2;
          }
          a4 = -v14;
          a2 = v94;
          if (v96)
            return;
          goto LABEL_1;
        }
        if (a1 != a2)
        {
          v119 = (v13 - 2) >> 1;
          v120 = v119 + 1;
          v121 = &a1[2 * v119];
          do
          {
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,SortGPUDevices &,std::shared_ptr<HGGPUComputeDevice const> *>((uint64_t)a1, a3, v12 >> 4, v121);
            v121 -= 2;
            --v120;
          }
          while (v120);
          v122 = (unint64_t)v12 >> 4;
          do
          {
            std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,SortGPUDevices,std::shared_ptr<HGGPUComputeDevice const> *>((uint64_t)a1, (uint64_t)a2, a3, v122);
            a2 -= 2;
          }
          while (v122-- > 2);
        }
        return;
    }
  }
}

  v8 = a2 - 9;
  v9 = a2 - 18;
  v10 = a2 - 27;
  n128_u64 = a1;
  v709 = a2;
  while (2)
  {
    a1 = n128_u64;
    v12 = (uint64_t)a2 - n128_u64;
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)((uint64_t)a2 - n128_u64) >> 4);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(v8, (__n128 *)n128_u64))
          goto LABEL_103;
        return;
      case 3uLL:
        v541 = (__n128 *)(n128_u64 + 144);
        v542 = (*a3)((__n128 *)(n128_u64 + 144), (__n128 *)n128_u64);
        v543 = (*a3)(v8, (__n128 *)(n128_u64 + 144));
        if ((v542 & 1) != 0)
        {
          if (v543)
          {
LABEL_103:
            v721 = *(__n128 *)n128_u64;
            v544 = *(__n128 *)(n128_u64 + 16);
            v545 = *(__n128 *)(n128_u64 + 32);
            v546 = *(__n128 *)(n128_u64 + 64);
            v724 = *(__n128 *)(n128_u64 + 48);
            v725 = v546;
            v722 = v544;
            v723 = v545;
            v547 = *(__n128 *)(n128_u64 + 80);
            v548 = *(__n128 *)(n128_u64 + 96);
            v549 = *(__n128 *)(n128_u64 + 128);
            v728 = *(__n128 *)(n128_u64 + 112);
            v729 = v549;
            v726 = v547;
            v727 = v548;
            *(__n128 *)n128_u64 = *v8;
            v550 = v8[1];
            v551 = v8[2];
            v552 = v8[4];
            *(__n128 *)(n128_u64 + 48) = v8[3];
            *(__n128 *)(n128_u64 + 64) = v552;
            *(__n128 *)(n128_u64 + 16) = v550;
            *(__n128 *)(n128_u64 + 32) = v551;
            v553 = v8[5];
            v554 = v8[6];
            v555 = v8[8];
            *(__n128 *)(n128_u64 + 112) = v8[7];
            *(__n128 *)(n128_u64 + 128) = v555;
            *(__n128 *)(n128_u64 + 80) = v553;
            *(__n128 *)(n128_u64 + 96) = v554;
LABEL_104:
            *v8 = v721;
            v556 = v722;
            v557 = v723;
            v558 = v725;
            v8[3] = v724;
            v8[4] = v558;
            v8[1] = v556;
            v8[2] = v557;
            v559 = v726;
            v560 = v727;
            v561 = v729;
            v8[7] = v728;
            v8[8] = v561;
            v8[5] = v559;
            v8[6] = v560;
            return;
          }
          v721 = *(__n128 *)n128_u64;
          v683 = *(__n128 *)(n128_u64 + 16);
          v684 = *(__n128 *)(n128_u64 + 32);
          v685 = *(__n128 *)(n128_u64 + 64);
          v724 = *(__n128 *)(n128_u64 + 48);
          v725 = v685;
          v722 = v683;
          v723 = v684;
          v686 = *(__n128 *)(n128_u64 + 80);
          v687 = *(__n128 *)(n128_u64 + 96);
          v688 = *(__n128 *)(n128_u64 + 128);
          v728 = *(__n128 *)(n128_u64 + 112);
          v729 = v688;
          v726 = v686;
          v727 = v687;
          v689 = *(_OWORD *)(n128_u64 + 192);
          *(_OWORD *)(n128_u64 + 32) = *(_OWORD *)(n128_u64 + 176);
          *(_OWORD *)(n128_u64 + 48) = v689;
          v690 = *(_OWORD *)(n128_u64 + 272);
          v691 = *(_OWORD *)(n128_u64 + 240);
          *(_OWORD *)(n128_u64 + 112) = *(_OWORD *)(n128_u64 + 256);
          *(_OWORD *)(n128_u64 + 128) = v690;
          v692 = *(_OWORD *)(n128_u64 + 224);
          *(_OWORD *)(n128_u64 + 64) = *(_OWORD *)(n128_u64 + 208);
          *(_OWORD *)(n128_u64 + 80) = v692;
          *(_OWORD *)(n128_u64 + 96) = v691;
          v693 = *(_OWORD *)(n128_u64 + 160);
          *(__n128 *)n128_u64 = *v541;
          *(_OWORD *)(n128_u64 + 16) = v693;
          v694 = v728;
          *(__n128 *)(n128_u64 + 240) = v727;
          *(__n128 *)(n128_u64 + 256) = v694;
          *(__n128 *)(n128_u64 + 272) = v729;
          v695 = v724;
          *(__n128 *)(n128_u64 + 176) = v723;
          *(__n128 *)(n128_u64 + 192) = v695;
          v696 = v726;
          *(__n128 *)(n128_u64 + 208) = v725;
          *(__n128 *)(n128_u64 + 224) = v696;
          v697 = v722;
          *v541 = v721;
          *(__n128 *)(n128_u64 + 160) = v697;
          if ((*a3)(v8, (__n128 *)(n128_u64 + 144)))
          {
            v698 = *(__n128 *)(n128_u64 + 192);
            v723 = *(__n128 *)(n128_u64 + 176);
            v724 = v698;
            v699 = *(__n128 *)(n128_u64 + 272);
            v700 = *(__n128 *)(n128_u64 + 240);
            v728 = *(__n128 *)(n128_u64 + 256);
            v729 = v699;
            v701 = *(__n128 *)(n128_u64 + 224);
            v725 = *(__n128 *)(n128_u64 + 208);
            v726 = v701;
            v727 = v700;
            v702 = *(__n128 *)(n128_u64 + 160);
            v721 = *v541;
            v722 = v702;
            *v541 = *v8;
            v703 = v8[1];
            v704 = v8[2];
            v705 = v8[4];
            *(__n128 *)(n128_u64 + 192) = v8[3];
            *(__n128 *)(n128_u64 + 208) = v705;
            *(__n128 *)(n128_u64 + 160) = v703;
            *(__n128 *)(n128_u64 + 176) = v704;
            v706 = v8[5];
            v707 = v8[6];
            v708 = v8[8];
            *(__n128 *)(n128_u64 + 256) = v8[7];
            *(__n128 *)(n128_u64 + 272) = v708;
            *(__n128 *)(n128_u64 + 224) = v706;
            *(__n128 *)(n128_u64 + 240) = v707;
            goto LABEL_104;
          }
        }
        else if (v543)
        {
          v631 = *(__n128 *)(n128_u64 + 192);
          v723 = *(__n128 *)(n128_u64 + 176);
          v724 = v631;
          v632 = *(__n128 *)(n128_u64 + 272);
          v633 = *(__n128 *)(n128_u64 + 240);
          v728 = *(__n128 *)(n128_u64 + 256);
          v729 = v632;
          v634 = *(__n128 *)(n128_u64 + 224);
          v725 = *(__n128 *)(n128_u64 + 208);
          v726 = v634;
          v727 = v633;
          v635 = *(__n128 *)(n128_u64 + 160);
          v721 = *v541;
          v722 = v635;
          *v541 = *v8;
          v636 = v8[1];
          v637 = v8[2];
          v638 = v8[4];
          *(__n128 *)(n128_u64 + 192) = v8[3];
          *(__n128 *)(n128_u64 + 208) = v638;
          *(__n128 *)(n128_u64 + 160) = v636;
          *(__n128 *)(n128_u64 + 176) = v637;
          v639 = v8[5];
          v640 = v8[6];
          v641 = v8[8];
          *(__n128 *)(n128_u64 + 256) = v8[7];
          *(__n128 *)(n128_u64 + 272) = v641;
          *(__n128 *)(n128_u64 + 224) = v639;
          *(__n128 *)(n128_u64 + 240) = v640;
          *v8 = v721;
          v642 = v722;
          v643 = v723;
          v644 = v725;
          v8[3] = v724;
          v8[4] = v644;
          v8[1] = v642;
          v8[2] = v643;
          v645 = v726;
          v646 = v727;
          v647 = v729;
          v8[7] = v728;
          v8[8] = v647;
          v8[5] = v645;
          v8[6] = v646;
          goto LABEL_131;
        }
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(HGROIsInfo const&,HGROIsInfo const&),HGROIsInfo*>((__n128 *)n128_u64, (__n128 *)(n128_u64 + 144), (__n128 *)(n128_u64 + 288), v8, a3);
        return;
      case 5uLL:
        v541 = (__n128 *)(n128_u64 + 144);
        v562 = (__n128 *)(n128_u64 + 288);
        v563 = (__n128 *)(n128_u64 + 432);
        v564 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(HGROIsInfo const&,HGROIsInfo const&),HGROIsInfo*>((__n128 *)n128_u64, (__n128 *)(n128_u64 + 144), (__n128 *)(n128_u64 + 288), (__n128 *)(n128_u64 + 432), a3);
        if (((unsigned int (*)(__n128 *, unint64_t, __n128))*a3)(v8, n128_u64 + 432, v564))
        {
          v565 = *(__n128 *)(n128_u64 + 480);
          v723 = *(__n128 *)(n128_u64 + 464);
          v724 = v565;
          v566 = *(__n128 *)(n128_u64 + 560);
          v567 = *(__n128 *)(n128_u64 + 528);
          v728 = *(__n128 *)(n128_u64 + 544);
          v729 = v566;
          v568 = *(__n128 *)(n128_u64 + 512);
          v725 = *(__n128 *)(n128_u64 + 496);
          v726 = v568;
          v727 = v567;
          v569 = *(__n128 *)(n128_u64 + 448);
          v721 = *v563;
          v722 = v569;
          *v563 = *v8;
          v570 = v8[1];
          v571 = v8[2];
          v572 = v8[4];
          *(__n128 *)(n128_u64 + 480) = v8[3];
          *(__n128 *)(n128_u64 + 496) = v572;
          *(__n128 *)(n128_u64 + 448) = v570;
          *(__n128 *)(n128_u64 + 464) = v571;
          v573 = v8[5];
          v574 = v8[6];
          v575 = v8[8];
          *(__n128 *)(n128_u64 + 544) = v8[7];
          *(__n128 *)(n128_u64 + 560) = v575;
          *(__n128 *)(n128_u64 + 512) = v573;
          *(__n128 *)(n128_u64 + 528) = v574;
          *v8 = v721;
          v576 = v722;
          v577 = v723;
          v578 = v725;
          v8[3] = v724;
          v8[4] = v578;
          v8[1] = v576;
          v8[2] = v577;
          v579 = v726;
          v580 = v727;
          v581 = v729;
          v8[7] = v728;
          v8[8] = v581;
          v8[5] = v579;
          v8[6] = v580;
          if ((*a3)((__n128 *)(n128_u64 + 432), (__n128 *)(n128_u64 + 288)))
          {
            v582 = *(__n128 *)(n128_u64 + 400);
            v727 = *(__n128 *)(n128_u64 + 384);
            v728 = v582;
            v729 = *(__n128 *)(n128_u64 + 416);
            v583 = *(__n128 *)(n128_u64 + 336);
            v723 = *(__n128 *)(n128_u64 + 320);
            v724 = v583;
            v584 = *(__n128 *)(n128_u64 + 368);
            v725 = *(__n128 *)(n128_u64 + 352);
            v726 = v584;
            v585 = *(__n128 *)(n128_u64 + 304);
            v721 = *v562;
            v722 = v585;
            v586 = *(_OWORD *)(n128_u64 + 512);
            *(_OWORD *)(n128_u64 + 352) = *(_OWORD *)(n128_u64 + 496);
            *(_OWORD *)(n128_u64 + 368) = v586;
            v587 = *(_OWORD *)(n128_u64 + 544);
            *(_OWORD *)(n128_u64 + 384) = *(_OWORD *)(n128_u64 + 528);
            *(_OWORD *)(n128_u64 + 400) = v587;
            *(_OWORD *)(n128_u64 + 416) = *(_OWORD *)(n128_u64 + 560);
            v588 = *(_OWORD *)(n128_u64 + 480);
            *(_OWORD *)(n128_u64 + 320) = *(_OWORD *)(n128_u64 + 464);
            *(_OWORD *)(n128_u64 + 336) = v588;
            v589 = *(_OWORD *)(n128_u64 + 448);
            *v562 = *v563;
            *(_OWORD *)(n128_u64 + 304) = v589;
            v590 = v726;
            *(__n128 *)(n128_u64 + 496) = v725;
            *(__n128 *)(n128_u64 + 512) = v590;
            v591 = v728;
            *(__n128 *)(n128_u64 + 528) = v727;
            *(__n128 *)(n128_u64 + 544) = v591;
            *(__n128 *)(n128_u64 + 560) = v729;
            v592 = v724;
            *(__n128 *)(n128_u64 + 464) = v723;
            *(__n128 *)(n128_u64 + 480) = v592;
            v593 = v722;
            *v563 = v721;
            *(__n128 *)(n128_u64 + 448) = v593;
            if ((*a3)((__n128 *)(n128_u64 + 288), (__n128 *)(n128_u64 + 144)))
            {
              v594 = *(__n128 *)(n128_u64 + 256);
              v727 = *(__n128 *)(n128_u64 + 240);
              v728 = v594;
              v729 = *(__n128 *)(n128_u64 + 272);
              v595 = *(__n128 *)(n128_u64 + 192);
              v723 = *(__n128 *)(n128_u64 + 176);
              v724 = v595;
              v596 = *(__n128 *)(n128_u64 + 224);
              v725 = *(__n128 *)(n128_u64 + 208);
              v726 = v596;
              v597 = *(__n128 *)(n128_u64 + 160);
              v721 = *v541;
              v722 = v597;
              v598 = *(_OWORD *)(n128_u64 + 368);
              *(_OWORD *)(n128_u64 + 208) = *(_OWORD *)(n128_u64 + 352);
              *(_OWORD *)(n128_u64 + 224) = v598;
              v599 = *(_OWORD *)(n128_u64 + 400);
              *(_OWORD *)(n128_u64 + 240) = *(_OWORD *)(n128_u64 + 384);
              *(_OWORD *)(n128_u64 + 256) = v599;
              *(_OWORD *)(n128_u64 + 272) = *(_OWORD *)(n128_u64 + 416);
              v600 = *(_OWORD *)(n128_u64 + 336);
              *(_OWORD *)(n128_u64 + 176) = *(_OWORD *)(n128_u64 + 320);
              *(_OWORD *)(n128_u64 + 192) = v600;
              v601 = *(_OWORD *)(n128_u64 + 304);
              *v541 = *v562;
              *(_OWORD *)(n128_u64 + 160) = v601;
              v602 = v726;
              *(__n128 *)(n128_u64 + 352) = v725;
              *(__n128 *)(n128_u64 + 368) = v602;
              v603 = v728;
              *(__n128 *)(n128_u64 + 384) = v727;
              *(__n128 *)(n128_u64 + 400) = v603;
              *(__n128 *)(n128_u64 + 416) = v729;
              v604 = v724;
              *(__n128 *)(n128_u64 + 320) = v723;
              *(__n128 *)(n128_u64 + 336) = v604;
              v605 = v722;
              *v562 = v721;
              *(__n128 *)(n128_u64 + 304) = v605;
LABEL_131:
              if ((*a3)(v541, (__n128 *)n128_u64))
              {
                v721 = *(__n128 *)n128_u64;
                v648 = *(__n128 *)(n128_u64 + 16);
                v649 = *(__n128 *)(n128_u64 + 32);
                v650 = *(__n128 *)(n128_u64 + 64);
                v724 = *(__n128 *)(n128_u64 + 48);
                v725 = v650;
                v722 = v648;
                v723 = v649;
                v651 = *(__n128 *)(n128_u64 + 80);
                v652 = *(__n128 *)(n128_u64 + 96);
                v653 = *(__n128 *)(n128_u64 + 128);
                v728 = *(__n128 *)(n128_u64 + 112);
                v729 = v653;
                v726 = v651;
                v727 = v652;
                v654 = v541[3];
                *(__n128 *)(n128_u64 + 32) = v541[2];
                *(__n128 *)(n128_u64 + 48) = v654;
                v655 = v541[8];
                v656 = v541[6];
                *(__n128 *)(n128_u64 + 112) = v541[7];
                *(__n128 *)(n128_u64 + 128) = v655;
                v657 = v541[5];
                *(__n128 *)(n128_u64 + 64) = v541[4];
                *(__n128 *)(n128_u64 + 80) = v657;
                *(__n128 *)(n128_u64 + 96) = v656;
                v658 = v541[1];
                *(__n128 *)n128_u64 = *v541;
                *(__n128 *)(n128_u64 + 16) = v658;
                v659 = v728;
                v541[6] = v727;
                v541[7] = v659;
                v541[8] = v729;
                v660 = v724;
                v541[2] = v723;
                v541[3] = v660;
                v661 = v726;
                v541[4] = v725;
                v541[5] = v661;
                v662 = v722;
                *v541 = v721;
                v541[1] = v662;
              }
            }
          }
        }
        return;
      default:
        if (v12 > 3455)
        {
          if (!a4)
          {
            if ((__n128 *)n128_u64 != a2)
              std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(HGROIsInfo const&,HGROIsInfo const&),HGROIsInfo*,HGROIsInfo*>((char *)n128_u64, (char *)a2, (char *)a2, (unsigned int (**)(char *, __int128 *))a3);
            return;
          }
          v14 = v13 >> 1;
          v15 = (__n128 *)(n128_u64 + 144 * (v13 >> 1));
          v16 = *a3;
          if ((unint64_t)v12 < 0x4801)
          {
            v31 = v16((__n128 *)n128_u64, v15);
            v32 = (*a3)(v8, (__n128 *)n128_u64);
            if ((v31 & 1) == 0)
            {
              if (v32)
              {
                v721 = *(__n128 *)n128_u64;
                v81 = *(__n128 *)(n128_u64 + 16);
                v82 = *(__n128 *)(n128_u64 + 32);
                v83 = *(__n128 *)(n128_u64 + 64);
                v724 = *(__n128 *)(n128_u64 + 48);
                v725 = v83;
                v722 = v81;
                v723 = v82;
                v84 = *(__n128 *)(n128_u64 + 80);
                v85 = *(__n128 *)(n128_u64 + 96);
                v86 = *(__n128 *)(n128_u64 + 128);
                v728 = *(__n128 *)(n128_u64 + 112);
                v729 = v86;
                v726 = v84;
                v727 = v85;
                *(__n128 *)n128_u64 = *v8;
                v87 = v8[1];
                v88 = v8[2];
                v89 = v8[4];
                *(__n128 *)(n128_u64 + 48) = v8[3];
                *(__n128 *)(n128_u64 + 64) = v89;
                *(__n128 *)(n128_u64 + 16) = v87;
                *(__n128 *)(n128_u64 + 32) = v88;
                v90 = v8[5];
                v91 = v8[6];
                v92 = v8[8];
                *(__n128 *)(n128_u64 + 112) = v8[7];
                *(__n128 *)(n128_u64 + 128) = v92;
                *(__n128 *)(n128_u64 + 80) = v90;
                *(__n128 *)(n128_u64 + 96) = v91;
                *v8 = v721;
                v93 = v722;
                v94 = v723;
                v95 = v725;
                v8[3] = v724;
                v8[4] = v95;
                v8[1] = v93;
                v8[2] = v94;
                v96 = v726;
                v97 = v727;
                v98 = v729;
                v8[7] = v728;
                v8[8] = v98;
                v8[5] = v96;
                v8[6] = v97;
                if ((*a3)((__n128 *)n128_u64, v15))
                {
                  v721 = *v15;
                  v99 = v15[1];
                  v100 = v15[2];
                  v101 = v15[4];
                  v724 = v15[3];
                  v725 = v101;
                  v722 = v99;
                  v723 = v100;
                  v102 = v15[5];
                  v103 = v15[6];
                  v104 = v15[8];
                  v728 = v15[7];
                  v729 = v104;
                  v726 = v102;
                  v727 = v103;
                  *v15 = *(__n128 *)n128_u64;
                  v105 = *(__n128 *)(n128_u64 + 16);
                  v106 = *(__n128 *)(n128_u64 + 32);
                  v107 = *(__n128 *)(n128_u64 + 64);
                  v15[3] = *(__n128 *)(n128_u64 + 48);
                  v15[4] = v107;
                  v15[1] = v105;
                  v15[2] = v106;
                  v108 = *(__n128 *)(n128_u64 + 80);
                  v109 = *(__n128 *)(n128_u64 + 96);
                  v110 = *(__n128 *)(n128_u64 + 128);
                  v15[7] = *(__n128 *)(n128_u64 + 112);
                  v15[8] = v110;
                  v15[5] = v108;
                  v15[6] = v109;
                  *(__n128 *)n128_u64 = v721;
                  v111 = v722;
                  v112 = v723;
                  v113 = v725;
                  *(__n128 *)(n128_u64 + 48) = v724;
                  *(__n128 *)(n128_u64 + 64) = v113;
                  *(__n128 *)(n128_u64 + 16) = v111;
                  *(__n128 *)(n128_u64 + 32) = v112;
                  v114 = v726;
                  v115 = v727;
                  v116 = v729;
                  *(__n128 *)(n128_u64 + 112) = v728;
                  *(__n128 *)(n128_u64 + 128) = v116;
                  *(__n128 *)(n128_u64 + 80) = v114;
                  *(__n128 *)(n128_u64 + 96) = v115;
                  --a4;
                  if ((a5 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v32)
            {
              v721 = *v15;
              v33 = v15[1];
              v34 = v15[2];
              v35 = v15[4];
              v724 = v15[3];
              v725 = v35;
              v722 = v33;
              v723 = v34;
              v36 = v15[5];
              v37 = v15[6];
              v38 = v15[8];
              v728 = v15[7];
              v729 = v38;
              v726 = v36;
              v727 = v37;
              *v15 = *v8;
              v39 = v8[1];
              v40 = v8[2];
              v41 = v8[4];
              v15[3] = v8[3];
              v15[4] = v41;
              v15[1] = v39;
              v15[2] = v40;
              v42 = v8[5];
              v43 = v8[6];
              v44 = v8[8];
              v15[7] = v8[7];
              v15[8] = v44;
              v15[5] = v42;
              v15[6] = v43;
            }
            else
            {
              v721 = *v15;
              v203 = v15[1];
              v204 = v15[2];
              v205 = v15[4];
              v724 = v15[3];
              v725 = v205;
              v722 = v203;
              v723 = v204;
              v206 = v15[5];
              v207 = v15[6];
              v208 = v15[8];
              v728 = v15[7];
              v729 = v208;
              v726 = v206;
              v727 = v207;
              *v15 = *(__n128 *)n128_u64;
              v209 = *(__n128 *)(n128_u64 + 16);
              v210 = *(__n128 *)(n128_u64 + 32);
              v211 = *(__n128 *)(n128_u64 + 64);
              v15[3] = *(__n128 *)(n128_u64 + 48);
              v15[4] = v211;
              v15[1] = v209;
              v15[2] = v210;
              v212 = *(__n128 *)(n128_u64 + 80);
              v213 = *(__n128 *)(n128_u64 + 96);
              v214 = *(__n128 *)(n128_u64 + 128);
              v15[7] = *(__n128 *)(n128_u64 + 112);
              v15[8] = v214;
              v15[5] = v212;
              v15[6] = v213;
              *(__n128 *)n128_u64 = v721;
              v215 = v722;
              v216 = v723;
              v217 = v725;
              *(__n128 *)(n128_u64 + 48) = v724;
              *(__n128 *)(n128_u64 + 64) = v217;
              *(__n128 *)(n128_u64 + 16) = v215;
              *(__n128 *)(n128_u64 + 32) = v216;
              v218 = v726;
              v219 = v727;
              v220 = v729;
              *(__n128 *)(n128_u64 + 112) = v728;
              *(__n128 *)(n128_u64 + 128) = v220;
              *(__n128 *)(n128_u64 + 80) = v218;
              *(__n128 *)(n128_u64 + 96) = v219;
              if (!(*a3)(v8, (__n128 *)n128_u64))
                goto LABEL_31;
              v721 = *(__n128 *)n128_u64;
              v221 = *(__n128 *)(n128_u64 + 16);
              v222 = *(__n128 *)(n128_u64 + 32);
              v223 = *(__n128 *)(n128_u64 + 64);
              v724 = *(__n128 *)(n128_u64 + 48);
              v725 = v223;
              v722 = v221;
              v723 = v222;
              v224 = *(__n128 *)(n128_u64 + 80);
              v225 = *(__n128 *)(n128_u64 + 96);
              v226 = *(__n128 *)(n128_u64 + 128);
              v728 = *(__n128 *)(n128_u64 + 112);
              v729 = v226;
              v726 = v224;
              v727 = v225;
              *(__n128 *)n128_u64 = *v8;
              v227 = v8[1];
              v228 = v8[2];
              v229 = v8[4];
              *(__n128 *)(n128_u64 + 48) = v8[3];
              *(__n128 *)(n128_u64 + 64) = v229;
              *(__n128 *)(n128_u64 + 16) = v227;
              *(__n128 *)(n128_u64 + 32) = v228;
              v230 = v8[5];
              v231 = v8[6];
              v232 = v8[8];
              *(__n128 *)(n128_u64 + 112) = v8[7];
              *(__n128 *)(n128_u64 + 128) = v232;
              *(__n128 *)(n128_u64 + 80) = v230;
              *(__n128 *)(n128_u64 + 96) = v231;
            }
            *v8 = v721;
            v233 = v722;
            v234 = v723;
            v235 = v725;
            v8[3] = v724;
            v8[4] = v235;
            v8[1] = v233;
            v8[2] = v234;
            v236 = v726;
            v237 = v727;
            v238 = v729;
            v8[7] = v728;
            v8[8] = v238;
            v8[5] = v236;
            v8[6] = v237;
LABEL_31:
            --a4;
            if ((a5 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v17 = v16(v15, (__n128 *)n128_u64);
          v18 = (*a3)(v8, v15);
          if ((v17 & 1) != 0)
          {
            if (v18)
            {
              v721 = *(__n128 *)n128_u64;
              v19 = *(__n128 *)(n128_u64 + 16);
              v20 = *(__n128 *)(n128_u64 + 32);
              v21 = *(__n128 *)(n128_u64 + 64);
              v724 = *(__n128 *)(n128_u64 + 48);
              v725 = v21;
              v722 = v19;
              v723 = v20;
              v22 = *(__n128 *)(n128_u64 + 80);
              v23 = *(__n128 *)(n128_u64 + 96);
              v24 = *(__n128 *)(n128_u64 + 128);
              v728 = *(__n128 *)(n128_u64 + 112);
              v729 = v24;
              v726 = v22;
              v727 = v23;
              *(__n128 *)n128_u64 = *v8;
              v25 = v8[1];
              v26 = v8[2];
              v27 = v8[4];
              *(__n128 *)(n128_u64 + 48) = v8[3];
              *(__n128 *)(n128_u64 + 64) = v27;
              *(__n128 *)(n128_u64 + 16) = v25;
              *(__n128 *)(n128_u64 + 32) = v26;
              v28 = v8[5];
              v29 = v8[6];
              v30 = v8[8];
              *(__n128 *)(n128_u64 + 112) = v8[7];
              *(__n128 *)(n128_u64 + 128) = v30;
              *(__n128 *)(n128_u64 + 80) = v28;
              *(__n128 *)(n128_u64 + 96) = v29;
            }
            else
            {
              v721 = *(__n128 *)n128_u64;
              v117 = *(__n128 *)(n128_u64 + 16);
              v118 = *(__n128 *)(n128_u64 + 32);
              v119 = *(__n128 *)(n128_u64 + 64);
              v724 = *(__n128 *)(n128_u64 + 48);
              v725 = v119;
              v722 = v117;
              v723 = v118;
              v120 = *(__n128 *)(n128_u64 + 80);
              v121 = *(__n128 *)(n128_u64 + 96);
              v122 = *(__n128 *)(n128_u64 + 128);
              v728 = *(__n128 *)(n128_u64 + 112);
              v729 = v122;
              v726 = v120;
              v727 = v121;
              *(__n128 *)n128_u64 = *v15;
              v123 = v15[1];
              v124 = v15[2];
              v125 = v15[4];
              *(__n128 *)(n128_u64 + 48) = v15[3];
              *(__n128 *)(n128_u64 + 64) = v125;
              *(__n128 *)(n128_u64 + 16) = v123;
              *(__n128 *)(n128_u64 + 32) = v124;
              v126 = v15[5];
              v127 = v15[6];
              v128 = v15[8];
              *(__n128 *)(n128_u64 + 112) = v15[7];
              *(__n128 *)(n128_u64 + 128) = v128;
              *(__n128 *)(n128_u64 + 80) = v126;
              *(__n128 *)(n128_u64 + 96) = v127;
              *v15 = v721;
              v129 = v722;
              v130 = v723;
              v131 = v725;
              v15[3] = v724;
              v15[4] = v131;
              v15[1] = v129;
              v15[2] = v130;
              v132 = v726;
              v133 = v727;
              v134 = v729;
              v15[7] = v728;
              v15[8] = v134;
              v15[5] = v132;
              v15[6] = v133;
              if (!(*a3)(v8, v15))
                goto LABEL_22;
              v721 = *v15;
              v135 = v15[1];
              v136 = v15[2];
              v137 = v15[4];
              v724 = v15[3];
              v725 = v137;
              v722 = v135;
              v723 = v136;
              v138 = v15[5];
              v139 = v15[6];
              v140 = v15[8];
              v728 = v15[7];
              v729 = v140;
              v726 = v138;
              v727 = v139;
              *v15 = *v8;
              v141 = v8[1];
              v142 = v8[2];
              v143 = v8[4];
              v15[3] = v8[3];
              v15[4] = v143;
              v15[1] = v141;
              v15[2] = v142;
              v144 = v8[5];
              v145 = v8[6];
              v146 = v8[8];
              v15[7] = v8[7];
              v15[8] = v146;
              v15[5] = v144;
              v15[6] = v145;
            }
            *v8 = v721;
            v147 = v722;
            v148 = v723;
            v149 = v725;
            v8[3] = v724;
            v8[4] = v149;
            v8[1] = v147;
            v8[2] = v148;
            v150 = v726;
            v151 = v727;
            v152 = v729;
            v8[7] = v728;
            v8[8] = v152;
            v8[5] = v150;
            v8[6] = v151;
          }
          else if (v18)
          {
            v721 = *v15;
            v45 = v15[1];
            v46 = v15[2];
            v47 = v15[4];
            v724 = v15[3];
            v725 = v47;
            v722 = v45;
            v723 = v46;
            v48 = v15[5];
            v49 = v15[6];
            v50 = v15[8];
            v728 = v15[7];
            v729 = v50;
            v726 = v48;
            v727 = v49;
            *v15 = *v8;
            v51 = v8[1];
            v52 = v8[2];
            v53 = v8[4];
            v15[3] = v8[3];
            v15[4] = v53;
            v15[1] = v51;
            v15[2] = v52;
            v54 = v8[5];
            v55 = v8[6];
            v56 = v8[8];
            v15[7] = v8[7];
            v15[8] = v56;
            v15[5] = v54;
            v15[6] = v55;
            *v8 = v721;
            v57 = v722;
            v58 = v723;
            v59 = v725;
            v8[3] = v724;
            v8[4] = v59;
            v8[1] = v57;
            v8[2] = v58;
            v60 = v726;
            v61 = v727;
            v62 = v729;
            v8[7] = v728;
            v8[8] = v62;
            v8[5] = v60;
            v8[6] = v61;
            if ((*a3)(v15, (__n128 *)n128_u64))
            {
              v721 = *(__n128 *)n128_u64;
              v63 = *(__n128 *)(n128_u64 + 16);
              v64 = *(__n128 *)(n128_u64 + 32);
              v65 = *(__n128 *)(n128_u64 + 64);
              v724 = *(__n128 *)(n128_u64 + 48);
              v725 = v65;
              v722 = v63;
              v723 = v64;
              v66 = *(__n128 *)(n128_u64 + 80);
              v67 = *(__n128 *)(n128_u64 + 96);
              v68 = *(__n128 *)(n128_u64 + 128);
              v728 = *(__n128 *)(n128_u64 + 112);
              v729 = v68;
              v726 = v66;
              v727 = v67;
              *(__n128 *)n128_u64 = *v15;
              v69 = v15[1];
              v70 = v15[2];
              v71 = v15[4];
              *(__n128 *)(n128_u64 + 48) = v15[3];
              *(__n128 *)(n128_u64 + 64) = v71;
              *(__n128 *)(n128_u64 + 16) = v69;
              *(__n128 *)(n128_u64 + 32) = v70;
              v72 = v15[5];
              v73 = v15[6];
              v74 = v15[8];
              *(__n128 *)(n128_u64 + 112) = v15[7];
              *(__n128 *)(n128_u64 + 128) = v74;
              *(__n128 *)(n128_u64 + 80) = v72;
              *(__n128 *)(n128_u64 + 96) = v73;
              *v15 = v721;
              v75 = v722;
              v76 = v723;
              v77 = v725;
              v15[3] = v724;
              v15[4] = v77;
              v15[1] = v75;
              v15[2] = v76;
              v78 = v726;
              v79 = v727;
              v80 = v729;
              v15[7] = v728;
              v15[8] = v80;
              v15[5] = v78;
              v15[6] = v79;
            }
          }
LABEL_22:
          v153 = (__n128 *)(n128_u64 + 144);
          v154 = (__n128 *)(a1 + 144 * v14 - 144);
          v155 = (*a3)(v154, (__n128 *)(a1 + 144));
          v156 = (*a3)(v9, v154);
          if ((v155 & 1) != 0)
          {
            if (v156)
            {
              v157 = *(__n128 *)(a1 + 192);
              v723 = *(__n128 *)(a1 + 176);
              v724 = v157;
              v158 = *(__n128 *)(a1 + 272);
              v159 = *(__n128 *)(a1 + 240);
              v728 = *(__n128 *)(a1 + 256);
              v729 = v158;
              v160 = *(__n128 *)(a1 + 224);
              v725 = *(__n128 *)(a1 + 208);
              v726 = v160;
              v727 = v159;
              v161 = *(__n128 *)(a1 + 160);
              v721 = *v153;
              v722 = v161;
              *v153 = *v9;
              v162 = v9[1];
              v163 = v9[2];
              v164 = v9[4];
              *(__n128 *)(a1 + 192) = v9[3];
              *(__n128 *)(a1 + 208) = v164;
              *(__n128 *)(a1 + 160) = v162;
              *(__n128 *)(a1 + 176) = v163;
              v165 = v9[5];
              v166 = v9[6];
              v167 = v9[8];
              *(__n128 *)(a1 + 256) = v9[7];
              *(__n128 *)(a1 + 272) = v167;
              *(__n128 *)(a1 + 224) = v165;
              *(__n128 *)(a1 + 240) = v166;
            }
            else
            {
              v239 = *(__n128 *)(a1 + 192);
              v723 = *(__n128 *)(a1 + 176);
              v724 = v239;
              v240 = *(__n128 *)(a1 + 272);
              v241 = *(__n128 *)(a1 + 240);
              v728 = *(__n128 *)(a1 + 256);
              v729 = v240;
              v242 = *(__n128 *)(a1 + 224);
              v725 = *(__n128 *)(a1 + 208);
              v726 = v242;
              v727 = v241;
              v243 = *(__n128 *)(a1 + 160);
              v721 = *v153;
              v722 = v243;
              *v153 = *v154;
              v244 = *(_OWORD *)(a1 + 144 * v14 - 128);
              v245 = *(_OWORD *)(a1 + 144 * v14 - 112);
              v246 = *(_OWORD *)(a1 + 144 * v14 - 80);
              *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 144 * v14 - 96);
              *(_OWORD *)(a1 + 208) = v246;
              *(_OWORD *)(a1 + 160) = v244;
              *(_OWORD *)(a1 + 176) = v245;
              v247 = *(_OWORD *)(a1 + 144 * v14 - 64);
              v248 = *(_OWORD *)(a1 + 144 * v14 - 48);
              v249 = *(_OWORD *)(a1 + 144 * v14 - 16);
              *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 144 * v14 - 32);
              *(_OWORD *)(a1 + 272) = v249;
              *(_OWORD *)(a1 + 224) = v247;
              *(_OWORD *)(a1 + 240) = v248;
              *v154 = v721;
              v250 = v722;
              v251 = v723;
              v252 = v725;
              *(__n128 *)(a1 + 144 * v14 - 96) = v724;
              *(__n128 *)(a1 + 144 * v14 - 80) = v252;
              *(__n128 *)(a1 + 144 * v14 - 128) = v250;
              *(__n128 *)(a1 + 144 * v14 - 112) = v251;
              v253 = v726;
              v254 = v727;
              v255 = v729;
              *(__n128 *)(a1 + 144 * v14 - 32) = v728;
              *(__n128 *)(a1 + 144 * v14 - 16) = v255;
              *(__n128 *)(a1 + 144 * v14 - 64) = v253;
              *(__n128 *)(a1 + 144 * v14 - 48) = v254;
              if (!(*a3)(v9, (__n128 *)(a1 + 144 * v14 - 144)))
                goto LABEL_36;
              v721 = *v154;
              v256 = *(__n128 *)(a1 + 144 * v14 - 128);
              v257 = *(__n128 *)(a1 + 144 * v14 - 112);
              v258 = *(__n128 *)(a1 + 144 * v14 - 80);
              v724 = *(__n128 *)(a1 + 144 * v14 - 96);
              v725 = v258;
              v722 = v256;
              v723 = v257;
              v259 = *(__n128 *)(a1 + 144 * v14 - 64);
              v260 = *(__n128 *)(a1 + 144 * v14 - 48);
              v261 = *(__n128 *)(a1 + 144 * v14 - 16);
              v728 = *(__n128 *)(a1 + 144 * v14 - 32);
              v729 = v261;
              v726 = v259;
              v727 = v260;
              *v154 = *v9;
              v262 = v9[1];
              v263 = v9[2];
              v264 = v9[4];
              *(__n128 *)(a1 + 144 * v14 - 96) = v9[3];
              *(__n128 *)(a1 + 144 * v14 - 80) = v264;
              *(__n128 *)(a1 + 144 * v14 - 128) = v262;
              *(__n128 *)(a1 + 144 * v14 - 112) = v263;
              v265 = v9[5];
              v266 = v9[6];
              v267 = v9[8];
              *(__n128 *)(a1 + 144 * v14 - 32) = v9[7];
              *(__n128 *)(a1 + 144 * v14 - 16) = v267;
              *(__n128 *)(a1 + 144 * v14 - 64) = v265;
              *(__n128 *)(a1 + 144 * v14 - 48) = v266;
            }
            *v9 = v721;
            v268 = v722;
            v269 = v723;
            v270 = v725;
            v9[3] = v724;
            v9[4] = v270;
            v9[1] = v268;
            v9[2] = v269;
            v271 = v726;
            v272 = v727;
            v273 = v729;
            v9[7] = v728;
            v9[8] = v273;
            v9[5] = v271;
            v9[6] = v272;
          }
          else if (v156)
          {
            v721 = *v154;
            v168 = *(__n128 *)(a1 + 144 * v14 - 128);
            v169 = *(__n128 *)(a1 + 144 * v14 - 112);
            v170 = *(__n128 *)(a1 + 144 * v14 - 80);
            v724 = *(__n128 *)(a1 + 144 * v14 - 96);
            v725 = v170;
            v722 = v168;
            v723 = v169;
            v171 = *(__n128 *)(a1 + 144 * v14 - 64);
            v172 = *(__n128 *)(a1 + 144 * v14 - 48);
            v173 = *(__n128 *)(a1 + 144 * v14 - 16);
            v728 = *(__n128 *)(a1 + 144 * v14 - 32);
            v729 = v173;
            v726 = v171;
            v727 = v172;
            *v154 = *v9;
            v174 = v9[1];
            v175 = v9[2];
            v176 = v9[4];
            *(__n128 *)(a1 + 144 * v14 - 96) = v9[3];
            *(__n128 *)(a1 + 144 * v14 - 80) = v176;
            *(__n128 *)(a1 + 144 * v14 - 128) = v174;
            *(__n128 *)(a1 + 144 * v14 - 112) = v175;
            v177 = v9[5];
            v178 = v9[6];
            v179 = v9[8];
            *(__n128 *)(a1 + 144 * v14 - 32) = v9[7];
            *(__n128 *)(a1 + 144 * v14 - 16) = v179;
            *(__n128 *)(a1 + 144 * v14 - 64) = v177;
            *(__n128 *)(a1 + 144 * v14 - 48) = v178;
            *v9 = v721;
            v180 = v722;
            v181 = v723;
            v182 = v725;
            v9[3] = v724;
            v9[4] = v182;
            v9[1] = v180;
            v9[2] = v181;
            v183 = v726;
            v184 = v727;
            v185 = v729;
            v9[7] = v728;
            v9[8] = v185;
            v9[5] = v183;
            v9[6] = v184;
            if ((*a3)((__n128 *)(a1 + 144 * v14 - 144), (__n128 *)(a1 + 144)))
            {
              v186 = *(__n128 *)(a1 + 192);
              v723 = *(__n128 *)(a1 + 176);
              v724 = v186;
              v187 = *(__n128 *)(a1 + 272);
              v188 = *(__n128 *)(a1 + 240);
              v728 = *(__n128 *)(a1 + 256);
              v729 = v187;
              v189 = *(__n128 *)(a1 + 224);
              v725 = *(__n128 *)(a1 + 208);
              v726 = v189;
              v727 = v188;
              v190 = *(__n128 *)(a1 + 160);
              v721 = *v153;
              v722 = v190;
              *v153 = *v154;
              v191 = *(_OWORD *)(a1 + 144 * v14 - 128);
              v192 = *(_OWORD *)(a1 + 144 * v14 - 112);
              v193 = *(_OWORD *)(a1 + 144 * v14 - 80);
              *(_OWORD *)(a1 + 192) = *(_OWORD *)(a1 + 144 * v14 - 96);
              *(_OWORD *)(a1 + 208) = v193;
              *(_OWORD *)(a1 + 160) = v191;
              *(_OWORD *)(a1 + 176) = v192;
              v194 = *(_OWORD *)(a1 + 144 * v14 - 64);
              v195 = *(_OWORD *)(a1 + 144 * v14 - 48);
              v196 = *(_OWORD *)(a1 + 144 * v14 - 16);
              *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 144 * v14 - 32);
              *(_OWORD *)(a1 + 272) = v196;
              *(_OWORD *)(a1 + 224) = v194;
              *(_OWORD *)(a1 + 240) = v195;
              *v154 = v721;
              v197 = v722;
              v198 = v723;
              v199 = v725;
              *(__n128 *)(a1 + 144 * v14 - 96) = v724;
              *(__n128 *)(a1 + 144 * v14 - 80) = v199;
              *(__n128 *)(a1 + 144 * v14 - 128) = v197;
              *(__n128 *)(a1 + 144 * v14 - 112) = v198;
              v200 = v726;
              v201 = v727;
              v202 = v729;
              *(__n128 *)(a1 + 144 * v14 - 32) = v728;
              *(__n128 *)(a1 + 144 * v14 - 16) = v202;
              *(__n128 *)(a1 + 144 * v14 - 64) = v200;
              *(__n128 *)(a1 + 144 * v14 - 48) = v201;
            }
          }
LABEL_36:
          v274 = (__n128 *)(a1 + 288);
          v275 = (__n128 *)(a1 + 144 * v14 + 144);
          v276 = (*a3)(v275, (__n128 *)(a1 + 288));
          v277 = (*a3)(v10, v275);
          if ((v276 & 1) != 0)
          {
            if (v277)
            {
              v278 = *(__n128 *)(a1 + 336);
              v723 = *(__n128 *)(a1 + 320);
              v724 = v278;
              v279 = *(__n128 *)(a1 + 416);
              v280 = *(__n128 *)(a1 + 384);
              v728 = *(__n128 *)(a1 + 400);
              v729 = v279;
              v281 = *(__n128 *)(a1 + 368);
              v725 = *(__n128 *)(a1 + 352);
              v726 = v281;
              v727 = v280;
              v282 = *(__n128 *)(a1 + 304);
              v721 = *v274;
              v722 = v282;
              *v274 = *v10;
              v283 = v10[1];
              v284 = v10[2];
              v285 = v10[4];
              *(__n128 *)(a1 + 336) = v10[3];
              *(__n128 *)(a1 + 352) = v285;
              *(__n128 *)(a1 + 304) = v283;
              *(__n128 *)(a1 + 320) = v284;
              v286 = v10[5];
              v287 = v10[6];
              v288 = v10[8];
              *(__n128 *)(a1 + 400) = v10[7];
              *(__n128 *)(a1 + 416) = v288;
              *(__n128 *)(a1 + 368) = v286;
              *(__n128 *)(a1 + 384) = v287;
            }
            else
            {
              v324 = *(__n128 *)(a1 + 336);
              v723 = *(__n128 *)(a1 + 320);
              v724 = v324;
              v325 = *(__n128 *)(a1 + 416);
              v326 = *(__n128 *)(a1 + 384);
              v728 = *(__n128 *)(a1 + 400);
              v729 = v325;
              v327 = *(__n128 *)(a1 + 368);
              v725 = *(__n128 *)(a1 + 352);
              v726 = v327;
              v727 = v326;
              v328 = *(__n128 *)(a1 + 304);
              v721 = *v274;
              v722 = v328;
              *v274 = *v275;
              v329 = v275[1];
              v330 = v275[2];
              v331 = v275[4];
              *(__n128 *)(a1 + 336) = v275[3];
              *(__n128 *)(a1 + 352) = v331;
              *(__n128 *)(a1 + 304) = v329;
              *(__n128 *)(a1 + 320) = v330;
              v332 = v275[5];
              v333 = v275[6];
              v334 = v275[8];
              *(__n128 *)(a1 + 400) = v275[7];
              *(__n128 *)(a1 + 416) = v334;
              *(__n128 *)(a1 + 368) = v332;
              *(__n128 *)(a1 + 384) = v333;
              *v275 = v721;
              v335 = v722;
              v336 = v723;
              v337 = v725;
              v275[3] = v724;
              v275[4] = v337;
              v275[1] = v335;
              v275[2] = v336;
              v338 = v726;
              v339 = v727;
              v340 = v729;
              v275[7] = v728;
              v275[8] = v340;
              v275[5] = v338;
              v275[6] = v339;
              if (!(*a3)(v10, v275))
                goto LABEL_45;
              v721 = *v275;
              v341 = v275[1];
              v342 = v275[2];
              v343 = v275[4];
              v724 = v275[3];
              v725 = v343;
              v722 = v341;
              v723 = v342;
              v344 = v275[5];
              v345 = v275[6];
              v346 = v275[8];
              v728 = v275[7];
              v729 = v346;
              v726 = v344;
              v727 = v345;
              *v275 = *v10;
              v347 = v10[1];
              v348 = v10[2];
              v349 = v10[4];
              v275[3] = v10[3];
              v275[4] = v349;
              v275[1] = v347;
              v275[2] = v348;
              v350 = v10[5];
              v351 = v10[6];
              v352 = v10[8];
              v275[7] = v10[7];
              v275[8] = v352;
              v275[5] = v350;
              v275[6] = v351;
            }
            *v10 = v721;
            v353 = v722;
            v354 = v723;
            v355 = v725;
            v10[3] = v724;
            v10[4] = v355;
            v10[1] = v353;
            v10[2] = v354;
            v356 = v726;
            v357 = v727;
            v358 = v729;
            v10[7] = v728;
            v10[8] = v358;
            v10[5] = v356;
            v10[6] = v357;
          }
          else if (v277)
          {
            v721 = *v275;
            v289 = v275[1];
            v290 = v275[2];
            v291 = v275[4];
            v724 = v275[3];
            v725 = v291;
            v722 = v289;
            v723 = v290;
            v292 = v275[5];
            v293 = v275[6];
            v294 = v275[8];
            v728 = v275[7];
            v729 = v294;
            v726 = v292;
            v727 = v293;
            *v275 = *v10;
            v295 = v10[1];
            v296 = v10[2];
            v297 = v10[4];
            v275[3] = v10[3];
            v275[4] = v297;
            v275[1] = v295;
            v275[2] = v296;
            v298 = v10[5];
            v299 = v10[6];
            v300 = v10[8];
            v275[7] = v10[7];
            v275[8] = v300;
            v275[5] = v298;
            v275[6] = v299;
            *v10 = v721;
            v301 = v722;
            v302 = v723;
            v303 = v725;
            v10[3] = v724;
            v10[4] = v303;
            v10[1] = v301;
            v10[2] = v302;
            v304 = v726;
            v305 = v727;
            v306 = v729;
            v10[7] = v728;
            v10[8] = v306;
            v10[5] = v304;
            v10[6] = v305;
            if ((*a3)(v275, (__n128 *)(a1 + 288)))
            {
              v307 = *(__n128 *)(a1 + 336);
              v723 = *(__n128 *)(a1 + 320);
              v724 = v307;
              v308 = *(__n128 *)(a1 + 416);
              v309 = *(__n128 *)(a1 + 384);
              v728 = *(__n128 *)(a1 + 400);
              v729 = v308;
              v310 = *(__n128 *)(a1 + 368);
              v725 = *(__n128 *)(a1 + 352);
              v726 = v310;
              v727 = v309;
              v311 = *(__n128 *)(a1 + 304);
              v721 = *v274;
              v722 = v311;
              *v274 = *v275;
              v312 = v275[1];
              v313 = v275[2];
              v314 = v275[4];
              *(__n128 *)(a1 + 336) = v275[3];
              *(__n128 *)(a1 + 352) = v314;
              *(__n128 *)(a1 + 304) = v312;
              *(__n128 *)(a1 + 320) = v313;
              v315 = v275[5];
              v316 = v275[6];
              v317 = v275[8];
              *(__n128 *)(a1 + 400) = v275[7];
              *(__n128 *)(a1 + 416) = v317;
              *(__n128 *)(a1 + 368) = v315;
              *(__n128 *)(a1 + 384) = v316;
              *v275 = v721;
              v318 = v722;
              v319 = v723;
              v320 = v725;
              v275[3] = v724;
              v275[4] = v320;
              v275[1] = v318;
              v275[2] = v319;
              v321 = v726;
              v322 = v727;
              v323 = v729;
              v275[7] = v728;
              v275[8] = v323;
              v275[5] = v321;
              v275[6] = v322;
            }
          }
LABEL_45:
          v359 = (*a3)(v15, v154);
          v360 = (*a3)(v275, v15);
          if ((v359 & 1) != 0)
          {
            if (v360)
            {
              v721 = *v154;
              v361 = v154[1];
              v362 = v154[2];
              v363 = v154[4];
              v724 = v154[3];
              v725 = v363;
              v722 = v361;
              v723 = v362;
              v364 = v154[5];
              v365 = v154[6];
              v366 = v154[8];
              v728 = v154[7];
              v729 = v366;
              v726 = v364;
              v727 = v365;
              v367 = v275[3];
              v154[2] = v275[2];
              v154[3] = v367;
              v368 = v275[8];
              v369 = v275[6];
              v154[7] = v275[7];
              v154[8] = v368;
              v370 = v275[5];
              v154[4] = v275[4];
              v154[5] = v370;
              v154[6] = v369;
              v371 = v275[1];
              *v154 = *v275;
              v154[1] = v371;
            }
            else
            {
              v721 = *v154;
              v406 = v154[1];
              v407 = v154[2];
              v408 = v154[4];
              v724 = v154[3];
              v725 = v408;
              v722 = v406;
              v723 = v407;
              v409 = v154[5];
              v410 = v154[6];
              v411 = v154[8];
              v728 = v154[7];
              v729 = v411;
              v726 = v409;
              v727 = v410;
              v412 = v15[3];
              v154[2] = v15[2];
              v154[3] = v412;
              v413 = v15[8];
              v414 = v15[6];
              v154[7] = v15[7];
              v154[8] = v413;
              v415 = v15[5];
              v154[4] = v15[4];
              v154[5] = v415;
              v154[6] = v414;
              v416 = v15[1];
              *v154 = *v15;
              v154[1] = v416;
              *v15 = v721;
              v417 = v722;
              v418 = v723;
              v419 = v725;
              v15[3] = v724;
              v15[4] = v419;
              v15[1] = v417;
              v15[2] = v418;
              v420 = v726;
              v421 = v727;
              v422 = v729;
              v15[7] = v728;
              v15[8] = v422;
              v15[5] = v420;
              v15[6] = v421;
              if (!(*a3)(v275, v15))
                goto LABEL_54;
              v721 = *v15;
              v423 = v15[1];
              v424 = v15[2];
              v425 = v15[4];
              v724 = v15[3];
              v725 = v425;
              v722 = v423;
              v723 = v424;
              v426 = v15[5];
              v427 = v15[6];
              v428 = v15[8];
              v728 = v15[7];
              v729 = v428;
              v726 = v426;
              v727 = v427;
              v429 = v275[3];
              v15[2] = v275[2];
              v15[3] = v429;
              v430 = v275[8];
              v431 = v275[6];
              v15[7] = v275[7];
              v15[8] = v430;
              v432 = v275[5];
              v15[4] = v275[4];
              v15[5] = v432;
              v15[6] = v431;
              v433 = v275[1];
              *v15 = *v275;
              v15[1] = v433;
            }
            *v275 = v721;
            v434 = v722;
            v435 = v723;
            v436 = v725;
            v275[3] = v724;
            v275[4] = v436;
            v275[1] = v434;
            v275[2] = v435;
            v437 = v726;
            v438 = v727;
            v439 = v729;
            v275[7] = v728;
            v275[8] = v439;
            v275[5] = v437;
            v275[6] = v438;
          }
          else if (v360)
          {
            v721 = *v15;
            v372 = v15[1];
            v373 = v15[2];
            v374 = v15[4];
            v724 = v15[3];
            v725 = v374;
            v722 = v372;
            v723 = v373;
            v375 = v15[5];
            v376 = v15[6];
            v377 = v15[8];
            v728 = v15[7];
            v729 = v377;
            v726 = v375;
            v727 = v376;
            v378 = v275[3];
            v15[2] = v275[2];
            v15[3] = v378;
            v379 = v275[8];
            v380 = v275[6];
            v15[7] = v275[7];
            v15[8] = v379;
            v381 = v275[5];
            v15[4] = v275[4];
            v15[5] = v381;
            v15[6] = v380;
            v382 = v275[1];
            *v15 = *v275;
            v15[1] = v382;
            *v275 = v721;
            v383 = v722;
            v384 = v723;
            v385 = v725;
            v275[3] = v724;
            v275[4] = v385;
            v275[1] = v383;
            v275[2] = v384;
            v386 = v726;
            v387 = v727;
            v388 = v729;
            v275[7] = v728;
            v275[8] = v388;
            v275[5] = v386;
            v275[6] = v387;
            if ((*a3)(v15, v154))
            {
              v721 = *v154;
              v389 = v154[1];
              v390 = v154[2];
              v391 = v154[4];
              v724 = v154[3];
              v725 = v391;
              v722 = v389;
              v723 = v390;
              v392 = v154[5];
              v393 = v154[6];
              v394 = v154[8];
              v728 = v154[7];
              v729 = v394;
              v726 = v392;
              v727 = v393;
              v395 = v15[3];
              v154[2] = v15[2];
              v154[3] = v395;
              v396 = v15[8];
              v397 = v15[6];
              v154[7] = v15[7];
              v154[8] = v396;
              v398 = v15[5];
              v154[4] = v15[4];
              v154[5] = v398;
              v154[6] = v397;
              v399 = v15[1];
              *v154 = *v15;
              v154[1] = v399;
              *v15 = v721;
              v400 = v722;
              v401 = v723;
              v402 = v725;
              v15[3] = v724;
              v15[4] = v402;
              v15[1] = v400;
              v15[2] = v401;
              v403 = v726;
              v404 = v727;
              v405 = v729;
              v15[7] = v728;
              v15[8] = v405;
              v15[5] = v403;
              v15[6] = v404;
            }
          }
LABEL_54:
          v721 = *(__n128 *)a1;
          v440 = *(__n128 *)(a1 + 16);
          v441 = *(__n128 *)(a1 + 32);
          v442 = *(__n128 *)(a1 + 64);
          v724 = *(__n128 *)(a1 + 48);
          v725 = v442;
          v722 = v440;
          v723 = v441;
          v443 = *(__n128 *)(a1 + 80);
          v444 = *(__n128 *)(a1 + 96);
          v445 = *(__n128 *)(a1 + 128);
          v728 = *(__n128 *)(a1 + 112);
          v729 = v445;
          v726 = v443;
          v727 = v444;
          *(__n128 *)a1 = *v15;
          v446 = v15[1];
          v447 = v15[2];
          v448 = v15[4];
          *(__n128 *)(a1 + 48) = v15[3];
          *(__n128 *)(a1 + 64) = v448;
          *(__n128 *)(a1 + 16) = v446;
          *(__n128 *)(a1 + 32) = v447;
          v449 = v15[5];
          v450 = v15[6];
          v451 = v15[8];
          *(__n128 *)(a1 + 112) = v15[7];
          *(__n128 *)(a1 + 128) = v451;
          *(__n128 *)(a1 + 80) = v449;
          *(__n128 *)(a1 + 96) = v450;
          *v15 = v721;
          v452 = v722;
          v453 = v723;
          v454 = v725;
          v15[3] = v724;
          v15[4] = v454;
          v15[1] = v452;
          v15[2] = v453;
          v455 = v726;
          v456 = v727;
          v457 = v729;
          v15[7] = v728;
          v15[8] = v457;
          v15[5] = v455;
          v15[6] = v456;
          a2 = v709;
          --a4;
          if ((a5 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (((*a3)((__n128 *)(a1 - 144), (__n128 *)a1) & 1) == 0)
          {
            v712 = *(__n128 *)a1;
            v501 = *(__n128 *)(a1 + 16);
            v502 = *(__n128 *)(a1 + 32);
            v503 = *(__n128 *)(a1 + 64);
            v715 = *(__n128 *)(a1 + 48);
            v716 = v503;
            v713 = v501;
            v714 = v502;
            v504 = *(__n128 *)(a1 + 80);
            v505 = *(__n128 *)(a1 + 96);
            v506 = *(__n128 *)(a1 + 128);
            v719 = *(__n128 *)(a1 + 112);
            v720 = v506;
            v717 = v504;
            v718 = v505;
            if (((*a3)(&v712, v8) & 1) != 0)
            {
              n128_u64 = a1;
              do
                n128_u64 += 144;
              while (((*a3)(&v712, (__n128 *)n128_u64) & 1) == 0);
            }
            else
            {
              v507 = (__n128 *)(a1 + 144);
              do
              {
                n128_u64 = (unint64_t)v507;
                if (v507 >= a2)
                  break;
                v508 = (*a3)(&v712, v507);
                v507 = (__n128 *)(n128_u64 + 144);
              }
              while (!v508);
            }
            v509 = a2;
            if (n128_u64 < (unint64_t)a2)
            {
              v509 = a2;
              do
                v509 -= 9;
              while (((*a3)(&v712, v509) & 1) != 0);
            }
            while (n128_u64 < (unint64_t)v509)
            {
              v721 = *(__n128 *)n128_u64;
              v510 = *(__n128 *)(n128_u64 + 16);
              v511 = *(__n128 *)(n128_u64 + 32);
              v512 = *(__n128 *)(n128_u64 + 64);
              v724 = *(__n128 *)(n128_u64 + 48);
              v725 = v512;
              v722 = v510;
              v723 = v511;
              v513 = *(__n128 *)(n128_u64 + 80);
              v514 = *(__n128 *)(n128_u64 + 96);
              v515 = *(__n128 *)(n128_u64 + 128);
              v728 = *(__n128 *)(n128_u64 + 112);
              v729 = v515;
              v726 = v513;
              v727 = v514;
              *(__n128 *)n128_u64 = *v509;
              v516 = v509[1];
              v517 = v509[2];
              v518 = v509[4];
              *(__n128 *)(n128_u64 + 48) = v509[3];
              *(__n128 *)(n128_u64 + 64) = v518;
              *(__n128 *)(n128_u64 + 16) = v516;
              *(__n128 *)(n128_u64 + 32) = v517;
              v519 = v509[5];
              v520 = v509[6];
              v521 = v509[8];
              *(__n128 *)(n128_u64 + 112) = v509[7];
              *(__n128 *)(n128_u64 + 128) = v521;
              *(__n128 *)(n128_u64 + 80) = v519;
              *(__n128 *)(n128_u64 + 96) = v520;
              *v509 = v721;
              v522 = v722;
              v523 = v723;
              v524 = v725;
              v509[3] = v724;
              v509[4] = v524;
              v509[1] = v522;
              v509[2] = v523;
              v525 = v726;
              v526 = v727;
              v527 = v729;
              v509[7] = v728;
              v509[8] = v527;
              v509[5] = v525;
              v509[6] = v526;
              do
                n128_u64 += 144;
              while (!(*a3)(&v712, (__n128 *)n128_u64));
              do
                v509 -= 9;
              while (((*a3)(&v712, v509) & 1) != 0);
            }
            v528 = (__n128 *)(n128_u64 - 144);
            if (n128_u64 - 144 != a1)
            {
              *(__n128 *)a1 = *v528;
              v529 = *(_OWORD *)(n128_u64 - 128);
              v530 = *(_OWORD *)(n128_u64 - 112);
              v531 = *(_OWORD *)(n128_u64 - 80);
              *(_OWORD *)(a1 + 48) = *(_OWORD *)(n128_u64 - 96);
              *(_OWORD *)(a1 + 64) = v531;
              *(_OWORD *)(a1 + 16) = v529;
              *(_OWORD *)(a1 + 32) = v530;
              v532 = *(_OWORD *)(n128_u64 - 64);
              v533 = *(_OWORD *)(n128_u64 - 48);
              v534 = *(_OWORD *)(n128_u64 - 16);
              *(_OWORD *)(a1 + 112) = *(_OWORD *)(n128_u64 - 32);
              *(_OWORD *)(a1 + 128) = v534;
              *(_OWORD *)(a1 + 80) = v532;
              *(_OWORD *)(a1 + 96) = v533;
            }
            a5 = 0;
            *v528 = v712;
            v535 = v713;
            v536 = v714;
            v537 = v716;
            *(__n128 *)(n128_u64 - 96) = v715;
            *(__n128 *)(n128_u64 - 80) = v537;
            *(__n128 *)(n128_u64 - 128) = v535;
            *(__n128 *)(n128_u64 - 112) = v536;
            v538 = v717;
            v539 = v718;
            v540 = v720;
            *(__n128 *)(n128_u64 - 32) = v719;
            *(__n128 *)(n128_u64 - 16) = v540;
            *(__n128 *)(n128_u64 - 64) = v538;
            *(__n128 *)(n128_u64 - 48) = v539;
            continue;
          }
LABEL_56:
          v458 = 0;
          v712 = *(__n128 *)a1;
          v459 = *(__n128 *)(a1 + 16);
          v460 = *(__n128 *)(a1 + 32);
          v461 = *(__n128 *)(a1 + 64);
          v715 = *(__n128 *)(a1 + 48);
          v716 = v461;
          v713 = v459;
          v714 = v460;
          v462 = *(__n128 *)(a1 + 80);
          v463 = *(__n128 *)(a1 + 96);
          v464 = *(__n128 *)(a1 + 128);
          v719 = *(__n128 *)(a1 + 112);
          v720 = v464;
          v717 = v462;
          v718 = v463;
          do
            v458 += 144;
          while (((*a3)((__n128 *)(v458 + a1), &v712) & 1) != 0);
          v465 = a1 + v458;
          v466 = a2;
          if (v458 == 144)
          {
            v466 = a2;
            do
            {
              if (v465 >= (unint64_t)v466)
                break;
              v466 -= 9;
            }
            while (((*a3)(v466, &v712) & 1) == 0);
          }
          else
          {
            do
              v466 -= 9;
            while (!(*a3)(v466, &v712));
          }
          if (v465 < (unint64_t)v466)
          {
            v467 = (__n128 *)(a1 + v458);
            v468 = v466;
            do
            {
              v721 = *v467;
              v469 = v467[1];
              v470 = v467[2];
              v471 = v467[4];
              v724 = v467[3];
              v725 = v471;
              v722 = v469;
              v723 = v470;
              v472 = v467[5];
              v473 = v467[6];
              v474 = v467[8];
              v728 = v467[7];
              v729 = v474;
              v726 = v472;
              v727 = v473;
              *v467 = *v468;
              v475 = v468[1];
              v476 = v468[2];
              v477 = v468[4];
              v467[3] = v468[3];
              v467[4] = v477;
              v467[1] = v475;
              v467[2] = v476;
              v478 = v468[5];
              v479 = v468[6];
              v480 = v468[8];
              v467[7] = v468[7];
              v467[8] = v480;
              v467[5] = v478;
              v467[6] = v479;
              *v468 = v721;
              v481 = v722;
              v482 = v723;
              v483 = v725;
              v468[3] = v724;
              v468[4] = v483;
              v468[1] = v481;
              v468[2] = v482;
              v484 = v726;
              v485 = v727;
              v486 = v729;
              v468[7] = v728;
              v468[8] = v486;
              v468[5] = v484;
              v468[6] = v485;
              do
                v467 += 9;
              while (((*a3)(v467, &v712) & 1) != 0);
              do
                v468 -= 9;
              while (!(*a3)(v468, &v712));
            }
            while (v467 < v468);
            v487 = v467 - 9;
            if (&v467[-9] == (__n128 *)a1)
              goto LABEL_74;
LABEL_73:
            *(__n128 *)a1 = *v487;
            v488 = v487[1];
            v489 = v487[2];
            v490 = v487[4];
            *(__n128 *)(a1 + 48) = v487[3];
            *(__n128 *)(a1 + 64) = v490;
            *(__n128 *)(a1 + 16) = v488;
            *(__n128 *)(a1 + 32) = v489;
            v491 = v487[5];
            v492 = v487[6];
            v493 = v487[8];
            *(__n128 *)(a1 + 112) = v487[7];
            *(__n128 *)(a1 + 128) = v493;
            *(__n128 *)(a1 + 80) = v491;
            *(__n128 *)(a1 + 96) = v492;
            goto LABEL_74;
          }
          v487 = (__n128 *)(v465 - 144);
          if (v465 - 144 != a1)
            goto LABEL_73;
LABEL_74:
          *v487 = v712;
          v494 = v713;
          v495 = v714;
          v496 = v716;
          v487[3] = v715;
          v487[4] = v496;
          v487[1] = v494;
          v487[2] = v495;
          v497 = v717;
          v498 = v718;
          v499 = v720;
          v487[7] = v719;
          v487[8] = v499;
          v487[5] = v497;
          v487[6] = v498;
          if (v465 < (unint64_t)v466)
            goto LABEL_77;
          v500 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(HGROIsInfo const&,HGROIsInfo const&),HGROIsInfo*>((__n128 *)a1, v487, a3);
          n128_u64 = (unint64_t)v487[9].n128_u64;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(HGROIsInfo const&,HGROIsInfo const&),HGROIsInfo*>(v487 + 9, a2, a3))
          {
            if (v500)
              continue;
LABEL_77:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(HGROIsInfo const&,HGROIsInfo const&),HGROIsInfo*,false>(a1, v487, a3, a4, a5 & 1);
            a5 = 0;
            n128_u64 = (unint64_t)v487[9].n128_u64;
            continue;
          }
          a2 = v487;
          if (v500)
            return;
          goto LABEL_1;
        }
        v606 = (__n128 *)(n128_u64 + 144);
        v608 = (__n128 *)n128_u64 == a2 || v606 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v608)
          {
            v609 = 0;
            v610 = (__n128 *)n128_u64;
            do
            {
              v618 = v610;
              v610 = v606;
              if ((*a3)(v606, v618))
              {
                v721 = *v610;
                v619 = v610[1];
                v620 = v610[2];
                v621 = v610[4];
                v724 = v610[3];
                v725 = v621;
                v722 = v619;
                v723 = v620;
                v622 = v610[5];
                v623 = v610[6];
                v624 = v610[8];
                v728 = v610[7];
                v729 = v624;
                v726 = v622;
                v727 = v623;
                v625 = v609;
                do
                {
                  v626 = (_OWORD *)(n128_u64 + v625);
                  v627 = *(_OWORD *)(n128_u64 + v625 + 112);
                  v626[15] = *(_OWORD *)(n128_u64 + v625 + 96);
                  v626[16] = v627;
                  v626[17] = *(_OWORD *)(n128_u64 + v625 + 128);
                  v628 = *(_OWORD *)(n128_u64 + v625 + 48);
                  v626[11] = *(_OWORD *)(n128_u64 + v625 + 32);
                  v626[12] = v628;
                  v629 = *(_OWORD *)(n128_u64 + v625 + 80);
                  v626[13] = *(_OWORD *)(n128_u64 + v625 + 64);
                  v626[14] = v629;
                  v630 = *(_OWORD *)(n128_u64 + v625 + 16);
                  v626[9] = *(_OWORD *)(n128_u64 + v625);
                  v626[10] = v630;
                  if (!v625)
                  {
                    v611 = (__n128 *)n128_u64;
                    goto LABEL_120;
                  }
                  v625 -= 144;
                }
                while (((*a3)(&v721, (__n128 *)(v625 + n128_u64)) & 1) != 0);
                v611 = (__n128 *)(n128_u64 + v625 + 144);
LABEL_120:
                *v611 = v721;
                v612 = v722;
                v613 = v723;
                v614 = v725;
                v611[3] = v724;
                v611[4] = v614;
                v611[1] = v612;
                v611[2] = v613;
                v615 = v726;
                v616 = v727;
                v617 = v729;
                v611[7] = v728;
                v611[8] = v617;
                v611[5] = v615;
                v611[6] = v616;
              }
              v606 = v610 + 9;
              v609 += 144;
            }
            while (&v610[9] != a2);
          }
        }
        else if (!v608)
        {
          v663 = (__n128 *)(n128_u64 - 144);
          do
          {
            v664 = (__n128 *)a1;
            a1 = (unint64_t)v606;
            if ((*a3)(v606, v664))
            {
              v721 = *(__n128 *)a1;
              v665 = *(__n128 *)(a1 + 16);
              v666 = *(__n128 *)(a1 + 32);
              v667 = *(__n128 *)(a1 + 64);
              v724 = *(__n128 *)(a1 + 48);
              v725 = v667;
              v722 = v665;
              v723 = v666;
              v668 = *(__n128 *)(a1 + 80);
              v669 = *(__n128 *)(a1 + 96);
              v670 = *(__n128 *)(a1 + 128);
              v728 = *(__n128 *)(a1 + 112);
              v729 = v670;
              v726 = v668;
              v727 = v669;
              v671 = v663;
              do
              {
                v672 = v671[16];
                v671[24] = v671[15];
                v671[25] = v672;
                v671[26] = v671[17];
                v673 = v671[12];
                v671[20] = v671[11];
                v671[21] = v673;
                v674 = v671[14];
                v671[22] = v671[13];
                v671[23] = v674;
                v675 = v671[10];
                v671[18] = v671[9];
                v671[19] = v675;
                v676 = (*a3)(&v721, v671);
                v671 -= 9;
              }
              while ((v676 & 1) != 0);
              v671[18] = v721;
              v677 = v722;
              v678 = v723;
              v679 = v725;
              v671[21] = v724;
              v671[22] = v679;
              v671[19] = v677;
              v671[20] = v678;
              v680 = v726;
              v681 = v727;
              v682 = v729;
              v671[25] = v728;
              v671[26] = v682;
              v671[23] = v680;
              v671[24] = v681;
            }
            v606 = (__n128 *)(a1 + 144);
            v663 += 9;
          }
          while ((__n128 *)(a1 + 144) != a2);
        }
        return;
    }
  }
}

  v8 = a2 - 2;
  v84 = (uint64_t)(a2 - 4);
  v85 = (unint64_t)a2;
  v9 = (uint64_t)(a2 - 6);
  v10 = (__int128 *)a1;
  while (2)
  {
    a1 = (uint64_t)v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 4;
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        {
          v37 = *(const void ***)a1;
          *(_QWORD *)a1 = *(a2 - 2);
          *(a2 - 2) = v37;
          v38 = *(const void ***)(a1 + 8);
          *(_QWORD *)(a1 + 8) = *(a2 - 1);
          *(a2 - 1) = v38;
        }
        return;
      case 3:
        return;
      case 4:
        return;
      case 5:
        return;
      default:
        if (v11 <= 383)
        {
          if ((a4 & 1) != 0)
          {
            if ((const void ***)a1 != a2)
            {
              v39 = (const void ***)(a1 + 16);
              if ((const void ***)(a1 + 16) != a2)
              {
                v40 = 0;
                v41 = a1;
                do
                {
                  v42 = (const void ***)v41;
                  v41 = (uint64_t)v39;
                  {
                    v87 = *(_OWORD *)v41;
                    *(_QWORD *)v41 = 0;
                    *(_QWORD *)(v41 + 8) = 0;
                    v43 = v40;
                    while (1)
                    {
                      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a1 + v43 + 16, (__int128 *)(a1 + v43));
                      if (!v43)
                        break;
                      v43 -= 16;
                      {
                        v44 = a1 + v43 + 16;
                        goto LABEL_78;
                      }
                    }
                    v44 = a1;
LABEL_78:
                    a2 = (const void ***)v85;
                    std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v44, &v87);
                    v45 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
                    if (*((_QWORD *)&v87 + 1))
                    {
                      v46 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
                      do
                        v47 = __ldaxr(v46);
                      while (__stlxr(v47 - 1, v46));
                      if (!v47)
                      {
                        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                        std::__shared_weak_count::__release_weak(v45);
                      }
                    }
                  }
                  v39 = (const void ***)(v41 + 16);
                  v40 += 16;
                }
                while ((const void ***)(v41 + 16) != a2);
              }
            }
          }
          else if ((const void ***)a1 != a2)
          {
            v79 = (const void ***)(a1 + 16);
            while (v79 != a2)
            {
              v80 = v79;
              {
                v87 = *(_OWORD *)v80;
                *v80 = 0;
                v80[1] = 0;
                do
                {
                  std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a1 + 16, (__int128 *)a1);
                  a1 -= 16;
                }
                std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a1 + 16, &v87);
                v81 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
                if (*((_QWORD *)&v87 + 1))
                {
                  v82 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
                  do
                    v83 = __ldaxr(v82);
                  while (__stlxr(v83 - 1, v82));
                  if (!v83)
                  {
                    ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
                    std::__shared_weak_count::__release_weak(v81);
                  }
                }
              }
              v79 = v80 + 2;
              a1 = (uint64_t)v80;
            }
          }
          return;
        }
        if (!a3)
        {
          if ((const void ***)a1 != a2)
          {
            v48 = (unint64_t)(v12 - 2) >> 1;
            v49 = v48;
            do
            {
              v50 = v49;
              if (v48 >= v49)
              {
                v51 = (2 * v49) | 1;
                v52 = a1 + 16 * v51;
                if (2 * v49 + 2 < v12
                {
                  v52 += 16;
                  v51 = 2 * v50 + 2;
                }
                v53 = a1 + 16 * v50;
                {
                  v87 = *(_OWORD *)v53;
                  *(_QWORD *)v53 = 0;
                  *(_QWORD *)(v53 + 8) = 0;
                  do
                  {
                    v54 = v52;
                    std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v53, (__int128 *)v52);
                    if (v48 < v51)
                      break;
                    v55 = (2 * v51) | 1;
                    v52 = a1 + 16 * v55;
                    v56 = 2 * v51 + 2;
                    if (v56 < v12
                    {
                      v52 += 16;
                      v55 = v56;
                    }
                    v53 = v54;
                    v51 = v55;
                  }
                  std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v54, &v87);
                  v57 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
                  if (*((_QWORD *)&v87 + 1))
                  {
                    v58 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
                    do
                      v59 = __ldaxr(v58);
                    while (__stlxr(v59 - 1, v58));
                    if (!v59)
                    {
                      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                      std::__shared_weak_count::__release_weak(v57);
                    }
                  }
                }
              }
              v49 = v50 - 1;
            }
            while (v50);
            v60 = (unint64_t)v11 >> 4;
            v61 = v85;
            do
            {
              v62 = v61;
              v63 = 0;
              v86 = *(_OWORD *)a1;
              *(_QWORD *)a1 = 0;
              *(_QWORD *)(a1 + 8) = 0;
              v64 = a1;
              do
              {
                v65 = v64 + 16 * v63 + 16;
                v66 = (2 * v63) | 1;
                v67 = 2 * v63 + 2;
                if (v67 < v60
                {
                  v65 += 16;
                  v66 = v67;
                }
                std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v64, (__int128 *)v65);
                v64 = v65;
                v63 = v66;
              }
              while (v66 <= (uint64_t)((unint64_t)(v60 - 2) >> 1));
              v61 = v62 - 16;
              if (v65 == v62 - 16)
              {
                std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v65, &v86);
              }
              else
              {
                std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v65, (__int128 *)(v62 - 16));
                std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v62 - 16, &v86);
                v68 = v65 - a1 + 16;
                if (v68 >= 17)
                {
                  v69 = (((unint64_t)v68 >> 4) - 2) >> 1;
                  v70 = (__int128 *)(a1 + 16 * v69);
                  {
                    v87 = *(_OWORD *)v65;
                    *(_QWORD *)v65 = 0;
                    *(_QWORD *)(v65 + 8) = 0;
                    do
                    {
                      v71 = (uint64_t)v70;
                      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v65, v70);
                      if (!v69)
                        break;
                      v69 = (v69 - 1) >> 1;
                      v70 = (__int128 *)(a1 + 16 * v69);
                      v65 = v71;
                    }
                    std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v71, &v87);
                    v72 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
                    if (*((_QWORD *)&v87 + 1))
                    {
                      v73 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
                      do
                        v74 = __ldaxr(v73);
                      while (__stlxr(v74 - 1, v73));
                      if (!v74)
                      {
                        ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
                        std::__shared_weak_count::__release_weak(v72);
                      }
                    }
                  }
                }
              }
              v75 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
              if (*((_QWORD *)&v86 + 1))
              {
                v76 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
                do
                  v77 = __ldaxr(v76);
                while (__stlxr(v77 - 1, v76));
                if (!v77)
                {
                  ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
                  std::__shared_weak_count::__release_weak(v75);
                }
              }
            }
            while (v60-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (_OWORD *)(a1 + 16 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 < 0x801)
        {
        }
        else
        {
          v15 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *v14;
          *v14 = v15;
        }
        --a3;
        if ((a4 & 1) == 0
        {
          v87 = *(_OWORD *)a1;
          *(_QWORD *)a1 = 0;
          *(_QWORD *)(a1 + 8) = 0;
          {
            v10 = (__int128 *)a1;
            a2 = (const void ***)v85;
            do
              ++v10;
          }
          else
          {
            v29 = (const void ***)(a1 + 16);
            a2 = (const void ***)v85;
            do
            {
              v10 = (__int128 *)v29;
              if ((unint64_t)v29 >= v85)
                break;
              v29 = (const void ***)(v10 + 1);
            }
            while (!v30);
          }
          v31 = a2;
          if (v10 < (__int128 *)a2)
          {
            v31 = a2;
            do
              v31 -= 2;
          }
          while (v10 < (__int128 *)v31)
          {
            v32 = *(const void ***)v10;
            *(_QWORD *)v10 = *v31;
            *v31 = v32;
            v33 = (const void **)*((_QWORD *)v10 + 1);
            *((_QWORD *)v10 + 1) = v31[1];
            v31[1] = v33;
            do
              ++v10;
            do
              v31 -= 2;
          }
          if (v10 - 1 != (__int128 *)a1)
            std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a1, v10 - 1);
          std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)(v10 - 1), &v87);
          v34 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
          if (*((_QWORD *)&v87 + 1))
          {
            v35 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
            do
              v36 = __ldaxr(v35);
            while (__stlxr(v36 - 1, v35));
            if (!v36)
            {
              ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
              std::__shared_weak_count::__release_weak(v34);
            }
          }
          a4 = 0;
          continue;
        }
        v16 = 0;
        v87 = *(_OWORD *)a1;
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        do
          v16 += 16;
        v17 = a1 + v16;
        v18 = (const void ***)v85;
        v19 = v16 == 16;
        a2 = (const void ***)v85;
        if (v19)
        {
          v18 = (const void ***)v85;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v18 -= 2;
          }
        }
        else
        {
          do
            v18 -= 2;
        }
        if (v17 >= (unint64_t)v18)
        {
          v24 = (__int128 *)(v17 - 16);
        }
        else
        {
          v20 = v17;
          v21 = v18;
          do
          {
            v22 = *(const void ***)v20;
            *(_QWORD *)v20 = *v21;
            *v21 = v22;
            v23 = *(const void ***)(v20 + 8);
            *(_QWORD *)(v20 + 8) = v21[1];
            v21[1] = v23;
            do
              v20 += 16;
            do
              v21 -= 2;
          }
          while (v20 < (unint64_t)v21);
          v24 = (__int128 *)(v20 - 16);
        }
        if (v24 != (__int128 *)a1)
          std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a1, v24);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v24, &v87);
        v25 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
        if (*((_QWORD *)&v87 + 1))
        {
          v26 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        if (v17 < (unint64_t)v18)
        {
LABEL_36:
          a4 = 0;
          v10 = v24 + 1;
          continue;
        }
        v10 = v24 + 1;
        {
          if (v28)
            continue;
          goto LABEL_36;
        }
        a2 = (const void ***)v24;
        if (!v28)
          goto LABEL_1;
        return;
    }
  }
}

  v7 = a2 - 3;
  j = a1;
  while (2)
  {
    a1 = j;
    v9 = (char *)a2 - (char *)j;
    v10 = 0xAAAAAAAAAAAAAAABLL * (a2 - j);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        {
          v76 = *((_DWORD *)a1 + 2);
          v77 = *(_QWORD *)a1;
          *a1 = *(a2 - 3);
          a1[1] = *(a2 - 2);
          a1[2] = *(a2 - 1);
          *(_QWORD *)(a2 - 3) = v77;
          *((_DWORD *)a2 - 1) = v76;
        }
        return;
      case 3:
        return;
      case 4:
        return;
      case 5:
        return;
      default:
        if (v9 <= 287)
        {
          v78 = a1 + 3;
          v80 = a1 == a2 || v78 == a2;
          if ((a4 & 1) != 0)
          {
            if (v80)
              return;
            v81 = 0;
            v82 = a1;
LABEL_180:
            v83 = v78;
              goto LABEL_197;
            v84 = v82[3];
            v85 = v82[4];
            v86 = v82[5];
            v87 = *((_DWORD *)v82 + 1);
            v82[3] = *v82;
            *((_DWORD *)v83 + 1) = v87;
            v83[2] = v82[2];
            v88 = a1;
            if (v82 == a1)
              goto LABEL_196;
            v89 = v81;
            while (1)
            {
              v90 = *(float *)((char *)a1 + v89 - 12);
              if (vabds_f32(v84, v90) >= 0.00001)
              {
                if (v84 >= v90)
                  goto LABEL_195;
                v91 = *(float *)((char *)a1 + v89 - 8);
              }
              else
              {
                v91 = *(float *)((char *)a1 + v89 - 8);
                if (vabds_f32(v85, v91) >= 0.00001)
                {
                  if (v85 >= v91)
                  {
LABEL_195:
                    v88 = v82;
LABEL_196:
                    *v88 = v84;
                    v88[1] = v85;
                    v88[2] = v86;
LABEL_197:
                    v78 = v83 + 3;
                    v81 += 12;
                    v82 = v83;
                    if (v83 + 3 == a2)
                      return;
                    goto LABEL_180;
                  }
                }
                else
                {
                  v88 = (float *)((char *)a1 + v89);
                  v92 = *(float *)((char *)a1 + v89 - 4);
                  if (vabds_f32(v86, v92) < 0.00001 || v86 >= v92)
                    goto LABEL_196;
                }
              }
              v82 -= 3;
              v94 = (float *)((char *)a1 + v89);
              *v94 = v90;
              v94[1] = v91;
              v94[2] = *(float *)((char *)a1 + v89 - 4);
              v89 -= 12;
              if (!v89)
              {
                v88 = a1;
                goto LABEL_196;
              }
            }
          }
          if (v80)
            return;
          for (i = a1 + 1; ; i += 3)
          {
            v135 = v78;
              break;
LABEL_270:
            v78 = v135 + 3;
            a1 = v135;
            if (v135 + 3 == a2)
              return;
          }
          v136 = *v135;
          v137 = a1[4];
          v138 = a1[5];
          v139 = i;
          v140 = *a1;
          while (1)
          {
            v141 = *v139;
            v142 = *((_DWORD *)v139 + 1);
            v139[2] = v140;
            v139[3] = v141;
            *((_DWORD *)v139 + 4) = v142;
            v140 = *(v139 - 4);
            if (vabds_f32(v136, v140) >= 0.00001)
            {
              if (v136 >= v140)
                goto LABEL_269;
            }
            else
            {
              v143 = *(v139 - 3);
              if (vabds_f32(v137, v143) >= 0.00001)
              {
                if (v137 >= v143)
                  goto LABEL_269;
              }
              else
              {
                v144 = *(v139 - 2);
                if (vabds_f32(v138, v144) < 0.00001 || v138 >= v144)
                {
LABEL_269:
                  *(v139 - 1) = v136;
                  *v139 = v137;
                  v139[1] = v138;
                  goto LABEL_270;
                }
              }
            }
            v139 -= 3;
          }
        }
        if (!a3)
        {
          if (a1 == a2)
            return;
          v95 = (unint64_t)(v10 - 2) >> 1;
          v96 = v95;
LABEL_201:
          v97 = v96;
          if (v95 < v96)
            goto LABEL_225;
          v98 = (2 * v96) | 1;
          v99 = &a1[3 * v98];
          {
            v99 += 3;
            v98 = 2 * v97 + 2;
          }
          v100 = &a1[3 * v97];
            goto LABEL_225;
          v101 = *v100;
          v102 = v100[1];
          v103 = v100[2];
          *v100 = *v99;
          v100[1] = v99[1];
          v100[2] = v99[2];
          while (1)
          {
            if (v95 < v98)
              goto LABEL_224;
            v104 = v99;
            v105 = 2 * v98;
            v98 = (2 * v98) | 1;
            v99 = &a1[3 * v98];
            v106 = v105 + 2;
            {
              v99 += 3;
              v98 = v106;
            }
            v107 = *v99;
            if (vabds_f32(*v99, v101) >= 0.00001)
            {
              if (v107 < v101)
                goto LABEL_223;
            }
            else
            {
              v108 = v99[1];
              if (vabds_f32(v108, v102) >= 0.00001)
              {
                if (v108 < v102)
                  goto LABEL_223;
              }
              else
              {
                v109 = v99[2];
                if (vabds_f32(v109, v103) >= 0.00001 && v109 < v103)
                {
LABEL_223:
                  v99 = v104;
LABEL_224:
                  *v99 = v101;
                  v99[1] = v102;
                  v99[2] = v103;
LABEL_225:
                  v96 = v97 - 1;
                  if (v97)
                    goto LABEL_201;
                  v111 = v9 / 0xCuLL;
LABEL_227:
                  v112 = 0;
                  v114 = *a1;
                  v113 = *((_DWORD *)a1 + 1);
                  v115 = *((_DWORD *)a1 + 2);
                  v116 = a1;
                  do
                  {
                    v117 = (uint64_t)&v116[3 * v112 + 3];
                    v118 = (2 * v112) | 1;
                    v119 = 2 * v112 + 2;
                    if (v119 < v111
                    {
                      v117 += 12;
                      v118 = v119;
                    }
                    *v116 = *(_DWORD *)v117;
                    v116[1] = *(_DWORD *)(v117 + 4);
                    v116[2] = *(_DWORD *)(v117 + 8);
                    v116 = (_DWORD *)v117;
                    v112 = v118;
                  }
                  while (v118 <= (uint64_t)((unint64_t)(v111 - 2) >> 1));
                  if ((float *)v117 == a2 - 3)
                  {
                    *(float *)v117 = v114;
                    *(_DWORD *)(v117 + 4) = v113;
                    *(_DWORD *)(v117 + 8) = v115;
                    goto LABEL_251;
                  }
                  *(float *)v117 = *(a2 - 3);
                  *(float *)(v117 + 4) = *(a2 - 2);
                  *(float *)(v117 + 8) = *(a2 - 1);
                  *(a2 - 3) = v114;
                  *((_DWORD *)a2 - 2) = v113;
                  *((_DWORD *)a2 - 1) = v115;
                  v120 = v117 - (_QWORD)a1 + 12;
                  if (v120 < 13)
                    goto LABEL_251;
                  v121 = v120 / 0xCuLL - 2;
                  v122 = v121 >> 1;
                  v123 = &a1[3 * (v121 >> 1)];
                    goto LABEL_251;
                  v124 = *(float *)v117;
                  v125 = *(float *)(v117 + 4);
                  v126 = *(float *)(v117 + 8);
                  *(float *)v117 = *v123;
                  *(float *)(v117 + 4) = v123[1];
                  *(float *)(v117 + 8) = v123[2];
                  if (v121 < 2)
                    goto LABEL_250;
                  while (1)
                  {
                    v127 = v123;
                    v128 = v122 - 1;
                    v122 = (v122 - 1) >> 1;
                    v123 = &a1[3 * v122];
                    v129 = *v123;
                    if (vabds_f32(*v123, v124) >= 0.00001)
                    {
                      if (v129 >= v124)
                        goto LABEL_249;
                      v130 = v123[1];
                    }
                    else
                    {
                      v130 = v123[1];
                      if (vabds_f32(v130, v125) >= 0.00001)
                      {
                        if (v130 >= v125)
                          goto LABEL_249;
                      }
                      else
                      {
                        v131 = v123[2];
                        if (vabds_f32(v131, v126) < 0.00001 || v131 >= v126)
                        {
LABEL_249:
                          v123 = v127;
LABEL_250:
                          *v123 = v124;
                          v123[1] = v125;
                          v123[2] = v126;
LABEL_251:
                          a2 -= 3;
                          if (v111-- <= 2)
                            return;
                          goto LABEL_227;
                        }
                      }
                    }
                    *v127 = v129;
                    v127[1] = v130;
                    v127[2] = v123[2];
                    if (v128 <= 1)
                      goto LABEL_250;
                  }
                }
              }
            }
            *v104 = v107;
            v104[1] = v99[1];
            v104[2] = v99[2];
          }
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &a1[3 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x601)
        {
        }
        else
        {
          v13 = 3 * v11;
          v14 = &a1[3 * v11 - 3];
          v15 = &a1[v13 + 3];
          v16 = *((_DWORD *)a1 + 2);
          a1[2] = v12[2];
          v17 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v17;
          *((_DWORD *)v12 + 2) = v16;
        }
        --a3;
        {
          v47 = *a1;
          v48 = a1[1];
          v49 = a1[2];
          v50 = *v7;
          if (vabds_f32(*a1, *v7) >= 0.00001)
          {
            if (v47 < v50)
              goto LABEL_94;
          }
          else
          {
            v51 = *(a2 - 2);
            if (vabds_f32(v48, v51) >= 0.00001)
            {
              if (v48 < v51)
                goto LABEL_94;
            }
            else
            {
              v52 = *(a2 - 1);
              if (vabds_f32(v49, v52) >= 0.00001 && v49 < v52)
              {
LABEL_94:
                for (j = a1 + 3; ; j += 3)
                {
                  if (vabds_f32(v47, *j) >= 0.00001)
                  {
                    if (v47 < *j)
                      goto LABEL_122;
                  }
                  else
                  {
                    v54 = j[1];
                    if (vabds_f32(v48, v54) >= 0.00001)
                    {
                      if (v48 < v54)
                        goto LABEL_122;
                    }
                    else
                    {
                      v55 = j[2];
                      if (vabds_f32(v49, v55) >= 0.00001 && v49 < v55)
                        goto LABEL_122;
                    }
                  }
                }
              }
            }
          }
          for (j = a1 + 3; j < a2; j += 3)
          {
            if (vabds_f32(v47, *j) >= 0.00001)
            {
              if (v47 < *j)
                break;
            }
            else
            {
              v57 = j[1];
              if (vabds_f32(v48, v57) >= 0.00001)
              {
                if (v48 < v57)
                  break;
              }
              else
              {
                v58 = j[2];
                if (vabds_f32(v49, v58) >= 0.00001 && v49 < v58)
                  break;
              }
            }
          }
LABEL_122:
          k = a2;
          if (j < a2)
          {
            for (k = a2 - 3; ; k -= 3)
            {
              if (vabds_f32(v47, v50) >= 0.00001)
              {
                if (v47 >= v50)
                  break;
              }
              else
              {
                v61 = k[1];
                if (vabds_f32(v48, v61) >= 0.00001)
                {
                  if (v48 >= v61)
                    break;
                }
                else
                {
                  v62 = k[2];
                  if (vabds_f32(v49, v62) < 0.00001 || v49 >= v62)
                    break;
                }
              }
              v64 = *(k - 3);
              v50 = v64;
            }
          }
          if (j < k)
          {
            v65 = *j;
            v66 = *k;
            do
            {
              *j = v66;
              v67 = *(_QWORD *)(j + 1);
              j[1] = k[1];
              j[2] = k[2];
              *k = v65;
              *(_QWORD *)(k + 1) = v67;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v68 = j[3];
                    j += 3;
                    v65 = v68;
                    if (vabds_f32(v47, v68) < 0.00001)
                      break;
                    if (v47 < v65)
                      goto LABEL_153;
                  }
                  v69 = j[1];
                  if (vabds_f32(v48, v69) < 0.00001)
                    break;
                  if (v48 < v69)
                    goto LABEL_153;
                }
                v70 = j[2];
              }
              while (vabds_f32(v49, v70) < 0.00001 || v49 >= v70);
              do
              {
                while (1)
                {
LABEL_153:
                  while (1)
                  {
                    v72 = *(k - 3);
                    k -= 3;
                    v66 = v72;
                    if (vabds_f32(v47, v72) < 0.00001)
                      break;
                    if (v47 >= v66)
                      goto LABEL_159;
                  }
                  v73 = k[1];
                  if (vabds_f32(v48, v73) < 0.00001)
                    break;
                  if (v48 >= v73)
                    goto LABEL_159;
                }
                v74 = k[2];
              }
              while (vabds_f32(v49, v74) >= 0.00001 && v49 < v74);
LABEL_159:
              ;
            }
            while (j < k);
          }
          if (j - 3 != a1)
          {
            *a1 = *(j - 3);
            a1[1] = *(j - 2);
            a1[2] = *(j - 1);
          }
          a4 = 0;
          *(j - 3) = v47;
          *(j - 2) = v48;
          *(j - 1) = v49;
          continue;
        }
        v18 = 0;
        v19 = *a1;
        v20 = a1[1];
        v21 = a1[2];
        while (1)
        {
          v22 = a1[v18 + 3];
          if (vabds_f32(v22, v19) >= 0.00001)
          {
            if (v22 >= v19)
              goto LABEL_22;
            goto LABEL_21;
          }
          v23 = a1[v18 + 4];
          if (vabds_f32(v23, v20) < 0.00001)
            break;
          if (v23 >= v20)
            goto LABEL_22;
LABEL_21:
          v18 += 3;
        }
        v24 = a1[v18 + 5];
        if (vabds_f32(v24, v21) >= 0.00001 && v24 < v21)
          goto LABEL_21;
LABEL_22:
        v26 = (unint64_t)&a1[v18 + 3];
        m = a2 - 3;
        if (v18 * 4)
        {
          while (1)
          {
            if (vabds_f32(*m, v19) >= 0.00001)
            {
              if (*m < v19)
                goto LABEL_53;
            }
            else
            {
              v28 = m[1];
              if (vabds_f32(v28, v20) >= 0.00001)
              {
                if (v28 < v20)
                  goto LABEL_53;
              }
              else
              {
                v29 = m[2];
                if (vabds_f32(v29, v21) >= 0.00001 && v29 < v21)
                  goto LABEL_53;
              }
            }
            m -= 3;
          }
        }
        m = a2;
        if (v26 < (unint64_t)a2)
        {
          for (m = a2 - 3; ; m -= 3)
          {
            if (vabds_f32(*m, v19) >= 0.00001)
            {
              if (*m < v19 || v26 >= (unint64_t)m)
                break;
            }
            else
            {
              v31 = m[1];
              if (vabds_f32(v31, v20) >= 0.00001)
              {
                if (v26 >= (unint64_t)m || v31 < v20)
                  break;
              }
              else
              {
                v32 = m[2];
                v33 = vabds_f32(v32, v21) < 0.00001;
                if (v32 >= v21)
                  v33 = 1;
                if (v26 >= (unint64_t)m || !v33)
                  break;
              }
            }
          }
        }
LABEL_53:
        if (v26 >= (unint64_t)m)
        {
          j = (float *)v26;
        }
        else
        {
          v35 = *m;
          j = (float *)v26;
          v36 = m;
          do
          {
            *j = v35;
            v37 = *(_QWORD *)(j + 1);
            j[1] = v36[1];
            j[2] = v36[2];
            *v36 = v22;
            *(_QWORD *)(v36 + 1) = v37;
            do
            {
              while (1)
              {
                while (1)
                {
                  v38 = j[3];
                  j += 3;
                  v22 = v38;
                  if (vabds_f32(v38, v19) < 0.00001)
                    break;
                  if (v22 >= v19)
                    goto LABEL_70;
                }
                v39 = j[1];
                if (vabds_f32(v39, v20) < 0.00001)
                  break;
                if (v39 >= v20)
                  goto LABEL_70;
              }
              v40 = j[2];
            }
            while (vabds_f32(v40, v21) >= 0.00001 && v40 < v21);
            do
            {
              while (1)
              {
LABEL_70:
                while (1)
                {
                  v42 = *(v36 - 3);
                  v36 -= 3;
                  v35 = v42;
                  if (vabds_f32(v42, v19) < 0.00001)
                    break;
                  if (v35 < v19)
                    goto LABEL_77;
                }
                v43 = v36[1];
                if (vabds_f32(v43, v20) < 0.00001)
                  break;
                if (v43 < v20)
                  goto LABEL_77;
              }
              v44 = v36[2];
            }
            while (vabds_f32(v44, v21) < 0.00001 || v44 >= v21);
LABEL_77:
            ;
          }
          while (j < v36);
        }
        if (j - 3 != a1)
        {
          *a1 = *(j - 3);
          a1[1] = *(j - 2);
          a1[2] = *(j - 1);
        }
        *(j - 3) = v19;
        *(j - 2) = v20;
        *(j - 1) = v21;
        if (v26 < (unint64_t)m)
        {
LABEL_85:
          a4 = 0;
          continue;
        }
        {
          if (v46)
            continue;
          goto LABEL_85;
        }
        a2 = j - 3;
        if (!v46)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (uint64_t)a2 - v10;
    v14 = (uint64_t)((uint64_t)a2 - v10) >> 3;
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 1, (uint64_t *)v10))
        {
          v22 = *(_QWORD *)v10;
          *(_DWORD *)v10 = *((_DWORD *)a2 - 2);
          *(_DWORD *)(v10 + 4) = *((_DWORD *)a2 - 1);
          *(a2 - 1) = v22;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t *)v10, (uint64_t *)(v10 + 8), a2 - 1, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(v10, v10 + 8, v10 + 16, a2 - 1, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(v10, v10 + 8, v10 + 16, v10 + 24, (_DWORD *)a2 - 2, a3);
        return;
      default:
        if (v13 <= 191)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(v10, a2, (uint64_t (**)(_QWORD *, _QWORD))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(v10, a2, (uint64_t (**)(_QWORD *, _DWORD *))a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = (uint64_t *)(v10 + 8 * (v14 >> 1));
          if ((unint64_t)v13 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t *)(v10 + 8 * (v14 >> 1)), (uint64_t *)v10, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t *)v10, (uint64_t *)(v10 + 8 * (v14 >> 1)), a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t *)(v10 + 8), v16 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t *)(v10 + 16), (uint64_t *)(v10 + 8 + 8 * v15), a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(v16 - 1, v16, (uint64_t *)(v10 + 8 + 8 * v15), a3);
            v17 = *(_QWORD *)v10;
            *(_QWORD *)v10 = *v16;
            *v16 = v17;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((uint64_t *)(v10 - 8), (uint64_t *)v10) & 1) == 0)
          {
            v10 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,Vec2f *,BOOL (*&)(Vec2f const&,Vec2f const&)>(v10, a2, (uint64_t (**)(uint64_t *, unint64_t))a3);
            goto LABEL_16;
          }
LABEL_11:
          a6.n128_f32[0] = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,Vec2f *,BOOL (*&)(Vec2f const&,Vec2f const&)>((uint64_t *)v10, a2, a3);
          v19 = v18;
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>(v10, v18, a3);
          v10 = (unint64_t)(v19 + 1);
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*>((uint64_t)(v19 + 1), a2, a3))
          {
            v11 = v12 + 1;
            if (v21)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*,false>(a1, v19, a3, -v12, a5 & 1, a6);
            v10 = (unint64_t)(v19 + 1);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if ((uint64_t *)v10 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(Vec2f const&,Vec2f const&),Vec2f*,Vec2f*>((char *)v10, (char *)a2, (char *)a2, (unsigned int (**)(uint64_t, uint64_t))a3, a6);
        return;
    }
  }
}

  v10 = a2 - 4;
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = ((char *)a2 - (char *)v11) >> 6;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 4, v11))
        {
          v32 = v11[2];
          v34 = v11[3];
          v28 = *v11;
          v30 = v11[1];
          v24 = *v10;
          v25 = *(a2 - 3);
          v26 = *(a2 - 1);
          v11[2] = *(a2 - 2);
          v11[3] = v26;
          *v11 = v24;
          v11[1] = v25;
          *v10 = v28;
          *(a2 - 3) = v30;
          *(a2 - 2) = v32;
          *(a2 - 1) = v34;
        }
        return;
      case 3uLL:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(v11, v11 + 4, a2 - 4, a3);
        return;
      case 4uLL:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>((uint64_t)v11, v11 + 4, v11 + 8, a2 - 4, a3);
        return;
      case 5uLL:
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>((uint64_t)v11, v11 + 4, v11 + 8, v11 + 12, a2 - 4, a3);
        return;
      default:
        if (v14 <= 1535)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>((uint64_t)v11, a2, a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = &v11[4 * (v15 >> 1)];
          if ((unint64_t)v14 <= 0x2000)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(&v11[4 * (v15 >> 1)], v11, a2 - 4, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(v11, &v11[4 * (v15 >> 1)], a2 - 4, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(v11 + 4, v17 - 4, a2 - 8, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(v11 + 8, &v11[4 * v16 + 4], a2 - 12, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(v17 - 4, v17, &v11[4 * v16 + 4], a3);
            v31 = v11[2];
            v33 = v11[3];
            v27 = *v11;
            v29 = v11[1];
            v18 = *v17;
            v19 = v17[1];
            v20 = v17[3];
            v11[2] = v17[2];
            v11[3] = v20;
            *v11 = v18;
            v11[1] = v19;
            v17[2] = v31;
            v17[3] = v33;
            *v17 = v27;
            v17[1] = v29;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v11 - 4, v11) & 1) == 0)
          {
            v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PSEmitter::RenderEntry *,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&)>(v11, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v21 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PSEmitter::RenderEntry *,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&)>(v11, a2, a3);
          if ((v22 & 1) == 0)
            goto LABEL_14;
          v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(v11, v21, a3);
          v11 = v21 + 4;
          if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*>(v21 + 4, a2, a3))
          {
            v12 = v13 + 1;
            if (v23)
              continue;
LABEL_14:
            std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,false>(a1, v21, a3, -v13, a5 & 1);
            v11 = v21 + 4;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = v21;
          if (v23)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PSEmitter::RenderEntry const&,PSEmitter::RenderEntry const&),PSEmitter::RenderEntry*,PSEmitter::RenderEntry*>((uint64_t)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(__n128 *, __n128 *))a3, a6);
        return;
    }
  }
}

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t (*v16)(__int128 *, _OWORD *);
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t (*v27)(__int128 *, _OWORD *);
  __int128 v28;
  uint64_t v29;
  _OWORD v30[3];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _OWORD v37[3];
  _OWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if ((_OWORD *)result != a2)
  {
    v39 = v8;
    v40 = v7;
    v41 = v6;
    v42 = v5;
    v43 = v3;
    v44 = v4;
    v10 = result;
    v11 = (_OWORD *)(result + 48);
    if ((_OWORD *)(result + 48) != a2)
    {
      v13 = 0;
      v14 = (_OWORD *)result;
      do
      {
        v15 = v11;
        v16 = *a3;
        v17 = v14[4];
        v18 = v14[5];
        v38[0] = *v15;
        v38[1] = v17;
        v38[2] = v18;
        v19 = v14[1];
        v37[0] = *v14;
        v37[1] = v19;
        v37[2] = v14[2];
        result = v16(v38, v37);
        if ((_DWORD)result)
        {
          v36 = *v15;
          v20 = *((_QWORD *)v14 + 8);
          v21 = *((_QWORD *)v14 + 9);
          v22 = *((_QWORD *)v14 + 10);
          v23 = *((_QWORD *)v14 + 11);
          v24 = v13;
          while (1)
          {
            v25 = (_OWORD *)(v10 + v24);
            v26 = *(_OWORD *)(v10 + v24 + 16);
            v25[3] = *(_OWORD *)(v10 + v24);
            v25[4] = v26;
            v25[5] = *(_OWORD *)(v10 + v24 + 32);
            if (!v24)
              break;
            v27 = *a3;
            v32 = v20;
            v33 = v21;
            v34 = v22;
            v35 = v23;
            v28 = *(v25 - 2);
            v30[0] = *(v25 - 3);
            v30[1] = v28;
            v30[2] = *(v25 - 1);
            v31 = v36;
            result = v27(&v31, v30);
            v24 -= 48;
            if ((result & 1) == 0)
            {
              v29 = v10 + v24 + 48;
              goto LABEL_10;
            }
          }
          v29 = v10;
LABEL_10:
          *(_OWORD *)v29 = v36;
          *(_QWORD *)(v29 + 16) = v20;
          *(_QWORD *)(v29 + 24) = v21;
          *(_QWORD *)(v29 + 32) = v22;
          *(_QWORD *)(v29 + 40) = v23;
        }
        v11 = v15 + 3;
        v13 += 48;
        v14 = v15;
      }
      while (v15 + 3 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(uint64_t result, _OWORD *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v13;
  uint64_t (*v14)(__int128 *, _OWORD *);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD *v27;
  uint64_t (*v28)(__int128 *, _OWORD *);
  _OWORD v29[3];
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _OWORD v36[3];
  _OWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if ((_OWORD *)result != a2)
  {
    v38 = v8;
    v39 = v7;
    v40 = v6;
    v41 = v5;
    v42 = v3;
    v43 = v4;
    v10 = (_OWORD *)result;
    v11 = (_OWORD *)(result + 48);
    if ((_OWORD *)(result + 48) != a2)
    {
      do
      {
        v13 = v11;
        v14 = *a3;
        v15 = v10[4];
        v16 = v10[5];
        v37[0] = *v13;
        v37[1] = v15;
        v37[2] = v16;
        v17 = v10[1];
        v36[0] = *v10;
        v36[1] = v17;
        v36[2] = v10[2];
        result = v14(v37, v36);
        if ((_DWORD)result)
        {
          v35 = *v13;
          v18 = *((_QWORD *)v10 + 8);
          v19 = *((_QWORD *)v10 + 9);
          v20 = *((_QWORD *)v10 + 10);
          v21 = *((_QWORD *)v10 + 11);
          v22 = v13;
          do
          {
            v23 = *(v22 - 2);
            v24 = *(v22 - 1);
            v25 = *(v22 - 4);
            *v22 = *(v22 - 3);
            v22[1] = v23;
            v22[2] = v24;
            v29[2] = v25;
            v30 = v35;
            v26 = *(v22 - 5);
            v29[0] = *(v22 - 6);
            v29[1] = v26;
            v27 = v22 - 3;
            v28 = *a3;
            v31 = v18;
            v32 = v19;
            v33 = v20;
            v34 = v21;
            result = v28(&v30, v29);
            v22 = v27;
          }
          while ((result & 1) != 0);
          *v27 = v35;
          *((_QWORD *)v27 + 2) = v18;
          *((_QWORD *)v27 + 3) = v19;
          *((_QWORD *)v27 + 4) = v20;
          *((_QWORD *)v27 + 5) = v21;
        }
        v11 = v13 + 3;
        v10 = v13;
      }
      while (v13 + 3 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(__int128 *a1, __int128 *a2, _OWORD *a3, unsigned int (**a4)(_OWORD *, __int128 *))
{
  unsigned int (*v8)(_OWORD *, __int128 *);
  __int128 v9;
  __int128 v10;
  char v11;
  unsigned int (*v12)(_OWORD *, __int128 *);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unsigned int (*v28)(_OWORD *, __int128 *);
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  unsigned int (*v43)(_OWORD *, __int128 *);
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[3];
  _OWORD v55[3];
  _OWORD v56[3];
  _OWORD v57[3];
  _OWORD v58[3];
  _OWORD v59[3];
  _OWORD v60[3];
  _OWORD v61[3];
  _OWORD v62[8];

  v8 = *a4;
  v9 = a2[1];
  v62[0] = *a2;
  v62[1] = v9;
  v62[2] = a2[2];
  v10 = a1[1];
  v61[0] = *a1;
  v61[1] = v10;
  v61[2] = a1[2];
  v11 = v8(v62, v61);
  v12 = *a4;
  if ((v11 & 1) != 0)
  {
    v13 = a3[1];
    v56[0] = *a3;
    v56[1] = v13;
    v56[2] = a3[2];
    v14 = a2[1];
    v55[0] = *a2;
    v55[1] = v14;
    v55[2] = a2[2];
    if (v12(v56, v55))
    {
      v15 = *a1;
      v16 = a1[1];
      v17 = a1[2];
      v18 = a3[2];
      v19 = *a3;
      a1[1] = a3[1];
      a1[2] = v18;
      *a1 = v19;
      *a3 = v15;
      a3[1] = v16;
      result = 1;
LABEL_9:
      a3[2] = v17;
      return result;
    }
    v36 = *a1;
    v37 = *((_QWORD *)a1 + 2);
    v38 = *((_QWORD *)a1 + 3);
    v39 = *((_QWORD *)a1 + 4);
    v40 = *((_QWORD *)a1 + 5);
    v41 = a2[2];
    v42 = *a2;
    a1[1] = a2[1];
    a1[2] = v41;
    *a1 = v42;
    *a2 = v36;
    *((_QWORD *)a2 + 2) = v37;
    *((_QWORD *)a2 + 3) = v38;
    *((_QWORD *)a2 + 4) = v39;
    *((_QWORD *)a2 + 5) = v40;
    v43 = *a4;
    v44 = a3[1];
    v54[0] = *a3;
    v54[1] = v44;
    v54[2] = a3[2];
    v49 = *a2;
    v50 = v37;
    v51 = v38;
    v52 = v39;
    v53 = v40;
    if (v43(v54, &v49))
    {
      v45 = *a2;
      v46 = a2[1];
      v17 = a2[2];
      v47 = a3[2];
      v48 = *a3;
      a2[1] = a3[1];
      a2[2] = v47;
      *a2 = v48;
      *a3 = v45;
      a3[1] = v46;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    v21 = a3[1];
    v60[0] = *a3;
    v60[1] = v21;
    v60[2] = a3[2];
    v22 = a2[1];
    v59[0] = *a2;
    v59[1] = v22;
    v59[2] = a2[2];
    result = ((uint64_t (*)(_OWORD *, _OWORD *))v12)(v60, v59);
    if (!(_DWORD)result)
      return result;
    v23 = *a2;
    v24 = a2[1];
    v25 = a2[2];
    v26 = a3[2];
    v27 = *a3;
    a2[1] = a3[1];
    a2[2] = v26;
    *a2 = v27;
    *a3 = v23;
    a3[1] = v24;
    a3[2] = v25;
    v28 = *a4;
    v29 = a2[1];
    v58[0] = *a2;
    v58[1] = v29;
    v58[2] = a2[2];
    v30 = a1[1];
    v57[0] = *a1;
    v57[1] = v30;
    v57[2] = a1[2];
    if (v28(v58, v57))
    {
      v31 = *a1;
      v32 = a1[1];
      v33 = a1[2];
      v34 = a2[2];
      v35 = *a2;
      a1[1] = a2[1];
      a1[2] = v34;
      *a1 = v35;
      *a2 = v31;
      a2[1] = v32;
      result = 2;
      a2[2] = v33;
      return result;
    }
  }
  return 1;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PCEdgeVertex *,BOOL (*&)(PCEdgeVertex,PCEdgeVertex)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, _OWORD *))
{
  __int128 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(__int128 *, _OWORD *);
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  uint64_t (*v14)(__int128 *, _OWORD *);
  __int128 v15;
  char v16;
  __int128 *v17;
  uint64_t (*v18)(__int128 *, _OWORD *);
  __int128 v19;
  int v20;
  __int128 *v21;
  uint64_t (*v22)(__int128 *, _OWORD *);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t (*v29)(__int128 *, _OWORD *);
  __int128 v30;
  uint64_t (*v31)(__int128 *, _OWORD *);
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  _OWORD v36[3];
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[3];
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[3];
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _OWORD v54[3];
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[3];
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[3];
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;

  v4 = a2;
  v72 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a1 + 5);
  v10 = *a3;
  v68 = v6;
  v69 = v7;
  v70 = v8;
  v71 = v9;
  v11 = *(a2 - 2);
  v66[0] = *(a2 - 3);
  v66[1] = v11;
  v66[2] = *(a2 - 1);
  v67 = v72;
  if ((v10(&v67, v66) & 1) != 0)
  {
    v12 = a1;
    do
    {
      v13 = v12 + 3;
      v14 = *a3;
      v61 = v72;
      v62 = v6;
      v63 = v7;
      v64 = v8;
      v65 = v9;
      v15 = v12[4];
      v60[0] = v12[3];
      v60[1] = v15;
      v60[2] = v12[5];
      v16 = v14(&v61, v60);
      v12 = v13;
    }
    while ((v16 & 1) == 0);
  }
  else
  {
    v17 = a1 + 3;
    do
    {
      v13 = v17;
      if (v17 >= v4)
        break;
      v18 = *a3;
      v56 = v6;
      v57 = v7;
      v58 = v8;
      v59 = v9;
      v19 = v13[1];
      v54[0] = *v13;
      v54[1] = v19;
      v54[2] = v13[2];
      v55 = v72;
      v20 = v18(&v55, v54);
      v17 = v13 + 3;
    }
    while (!v20);
  }
  if (v13 >= v4)
  {
    v21 = v4;
  }
  else
  {
    do
    {
      v21 = v4 - 3;
      v22 = *a3;
      v50 = v6;
      v51 = v7;
      v52 = v8;
      v53 = v9;
      v23 = *(v4 - 2);
      v48[0] = *(v4 - 3);
      v48[1] = v23;
      v48[2] = *(v4 - 1);
      v49 = v72;
      v4 -= 3;
    }
    while ((v22(&v49, v48) & 1) != 0);
  }
  while (v13 < v21)
  {
    v24 = v13[1];
    v73 = *v13;
    v25 = v13[2];
    v26 = v21[2];
    v27 = *v21;
    v13[1] = v21[1];
    v13[2] = v26;
    *v13 = v27;
    *v21 = v73;
    v21[1] = v24;
    v21[2] = v25;
    do
    {
      v43 = v72;
      v44 = v6;
      v45 = v7;
      v46 = v8;
      v47 = v9;
      v42[0] = v13[3];
      v42[1] = v13[4];
      v28 = v13[5];
      v13 += 3;
      v29 = *a3;
      v42[2] = v28;
    }
    while (!v29(&v43, v42));
    do
    {
      v37 = v72;
      v38 = v6;
      v39 = v7;
      v40 = v8;
      v41 = v9;
      v36[0] = *(v21 - 3);
      v36[1] = *(v21 - 2);
      v30 = *(v21 - 1);
      v21 -= 3;
      v31 = *a3;
      v36[2] = v30;
    }
    while ((v31(&v37, v36) & 1) != 0);
  }
  v32 = v13 - 3;
  if (v13 - 3 != a1)
  {
    v33 = *v32;
    v34 = *(v13 - 1);
    a1[1] = *(v13 - 2);
    a1[2] = v34;
    *a1 = v33;
  }
  *v32 = v72;
  *((_QWORD *)v13 - 4) = v6;
  *((_QWORD *)v13 - 3) = v7;
  *((_QWORD *)v13 - 2) = v8;
  *((_QWORD *)v13 - 1) = v9;
  return v13;
}

__int128 *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PCEdgeVertex *,BOOL (*&)(PCEdgeVertex,PCEdgeVertex)>(__int128 *a1, __int128 *a2, uint64_t (**a3)(_OWORD *, __int128 *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_OWORD *, __int128 *);
  __int128 v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t (*v15)(_OWORD *, __int128 *);
  __int128 v16;
  uint64_t (*v17)(_OWORD *, __int128 *);
  __int128 v18;
  __int128 *v19;
  __int128 *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t (*v27)(_OWORD *, __int128 *);
  __int128 v28;
  uint64_t (*v29)(_OWORD *, __int128 *);
  __int128 *result;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[3];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[3];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[3];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v56[3];
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[3];
  __int128 v63;
  __int128 v64;

  v6 = 0;
  v63 = *a1;
  v7 = *((_QWORD *)a1 + 2);
  v8 = *((_QWORD *)a1 + 3);
  v9 = *((_QWORD *)a1 + 4);
  v10 = *((_QWORD *)a1 + 5);
  do
  {
    v11 = *a3;
    v12 = a1[v6 + 4];
    v62[0] = a1[v6 + 3];
    v62[1] = v12;
    v62[2] = a1[v6 + 5];
    v57 = v63;
    v58 = v7;
    v59 = v8;
    v60 = v9;
    v61 = v10;
    v6 += 3;
  }
  while ((v11(v62, &v57) & 1) != 0);
  v13 = &a1[v6];
  if (v6 == 3)
  {
    while (v13 < a2)
    {
      v17 = *a3;
      v14 = a2 - 3;
      v18 = *(a2 - 2);
      v56[0] = *(a2 - 3);
      v56[1] = v18;
      v56[2] = *(a2 - 1);
      v51 = v63;
      v52 = v7;
      v53 = v8;
      v54 = v9;
      v55 = v10;
      a2 -= 3;
      if ((v17(v56, &v51) & 1) != 0)
        goto LABEL_9;
    }
    v14 = a2;
  }
  else
  {
    do
    {
      v14 = a2 - 3;
      v15 = *a3;
      v16 = *(a2 - 2);
      v50[0] = *(a2 - 3);
      v50[1] = v16;
      v50[2] = *(a2 - 1);
      v45 = v63;
      v46 = v7;
      v47 = v8;
      v48 = v9;
      v49 = v10;
      a2 -= 3;
    }
    while (!v15(v50, &v45));
  }
LABEL_9:
  v19 = v13;
  if (v13 < v14)
  {
    v20 = v14;
    do
    {
      v22 = v19[1];
      v64 = *v19;
      v21 = v64;
      v23 = v19[2];
      v24 = *v20;
      v25 = v20[2];
      v19[1] = v20[1];
      v19[2] = v25;
      *v19 = v24;
      *v20 = v21;
      v20[1] = v22;
      v20[2] = v23;
      do
      {
        v44[0] = v19[3];
        v44[1] = v19[4];
        v26 = v19[5];
        v19 += 3;
        v27 = *a3;
        v44[2] = v26;
        v39 = v63;
        v40 = v7;
        v41 = v8;
        v42 = v9;
        v43 = v10;
      }
      while ((v27(v44, &v39) & 1) != 0);
      do
      {
        v38[0] = *(v20 - 3);
        v38[1] = *(v20 - 2);
        v28 = *(v20 - 1);
        v20 -= 3;
        v29 = *a3;
        v38[2] = v28;
        v33 = v63;
        v34 = v7;
        v35 = v8;
        v36 = v9;
        v37 = v10;
      }
      while (!v29(v38, &v33));
    }
    while (v19 < v20);
  }
  result = v19 - 3;
  if (v19 - 3 != a1)
  {
    v31 = *result;
    v32 = *(v19 - 1);
    a1[1] = *(v19 - 2);
    a1[2] = v32;
    *a1 = v31;
  }
  *result = v63;
  *((_QWORD *)v19 - 4) = v7;
  *((_QWORD *)v19 - 3) = v8;
  *((_QWORD *)v19 - 2) = v9;
  *((_QWORD *)v19 - 1) = v10;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(__int128 *a1, __int128 *a2, unsigned int (**a3)(_OWORD *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  unsigned int (*v8)(_OWORD *, __int128 *);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  int v19;
  unsigned int (*v20)(_OWORD *, __int128 *);
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  unsigned int (*v30)(_OWORD *, __int128 *);
  __int128 v31;
  uint64_t v32;
  _OWORD v33[3];
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  _OWORD v40[3];
  _OWORD v41[3];
  _OWORD v42[3];
  _OWORD v43[4];

  v6 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      v9 = *(a2 - 2);
      v43[0] = *(a2 - 3);
      v43[1] = v9;
      v43[2] = *(a2 - 1);
      v10 = a1[1];
      v42[0] = *a1;
      v42[1] = v10;
      v42[2] = a1[2];
      if (v8(v43, v42))
      {
        v11 = *a1;
        v12 = a1[1];
        v13 = a1[2];
        v14 = *(a2 - 1);
        v15 = *(a2 - 3);
        a1[1] = *(a2 - 2);
        a1[2] = v14;
        *a1 = v15;
        *(a2 - 3) = v11;
        *(a2 - 2) = v12;
        *(a2 - 1) = v13;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, a1 + 3, a2 - 3, a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, a1 + 3, a1 + 6, a2 - 3, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3, a3);
      return 1;
    default:
      v16 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, a1 + 3, a1 + 6, a3);
      v17 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
  while (1)
  {
    v20 = *a3;
    v21 = v17[1];
    v41[0] = *v17;
    v41[1] = v21;
    v41[2] = v17[2];
    v22 = v16[1];
    v40[0] = *v16;
    v40[1] = v22;
    v40[2] = v16[2];
    if (v20(v41, v40))
    {
      v39 = *v17;
      v23 = *((_QWORD *)v17 + 2);
      v24 = *((_QWORD *)v17 + 3);
      v25 = *((_QWORD *)v17 + 4);
      v26 = *((_QWORD *)v17 + 5);
      v27 = v18;
      while (1)
      {
        v28 = (__int128 *)((char *)a1 + v27);
        v29 = *(__int128 *)((char *)a1 + v27 + 112);
        v28[9] = *(__int128 *)((char *)a1 + v27 + 96);
        v28[10] = v29;
        v28[11] = *(__int128 *)((char *)a1 + v27 + 128);
        if (v27 == -96)
          break;
        v30 = *a3;
        v35 = v23;
        v36 = v24;
        v37 = v25;
        v38 = v26;
        v31 = v28[4];
        v33[0] = v28[3];
        v33[1] = v31;
        v33[2] = v28[5];
        v34 = v39;
        v27 -= 48;
        if ((((uint64_t (*)(__int128 *, _OWORD *))v30)(&v34, v33) & 1) == 0)
        {
          v32 = (uint64_t)a1 + v27 + 144;
          goto LABEL_12;
        }
      }
      v32 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v32 = v39;
      *(_QWORD *)(v32 + 16) = v23;
      *(_QWORD *)(v32 + 24) = v24;
      *(_QWORD *)(v32 + 32) = v25;
      *(_QWORD *)(v32 + 40) = v26;
      if (++v19 == 8)
        return v17 + 3 == a2;
    }
    v16 = v17;
    v18 += 48;
    v17 += 3;
    if (v17 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, unsigned int (**a5)(_OWORD *, __int128 *))
{
  unsigned int (*v10)(_OWORD *, __int128 *);
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int (*v19)(_OWORD *, __int128 *);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned int (*v27)(_OWORD *, __int128 *);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[3];
  _OWORD v35[3];
  _OWORD v36[3];
  _OWORD v37[3];
  _OWORD v38[3];
  _OWORD v39[6];

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, a2, a3, a5);
  v10 = *a5;
  v11 = a4[1];
  v39[0] = *a4;
  v39[1] = v11;
  v39[2] = a4[2];
  v12 = a3[1];
  v38[0] = *a3;
  v38[1] = v12;
  v38[2] = a3[2];
  if (v10(v39, v38))
  {
    v14 = *a3;
    v15 = a3[1];
    v16 = a3[2];
    v17 = a4[2];
    v18 = *a4;
    a3[1] = a4[1];
    a3[2] = v17;
    *a3 = v18;
    *a4 = v14;
    a4[1] = v15;
    a4[2] = v16;
    v19 = *a5;
    v20 = a3[1];
    v37[0] = *a3;
    v37[1] = v20;
    v37[2] = a3[2];
    v21 = a2[1];
    v36[0] = *a2;
    v36[1] = v21;
    v36[2] = a2[2];
    if (v19(v37, v36))
    {
      v22 = *a2;
      v23 = a2[1];
      v24 = a2[2];
      v25 = a3[2];
      v26 = *a3;
      a2[1] = a3[1];
      a2[2] = v25;
      *a2 = v26;
      *a3 = v22;
      a3[1] = v23;
      a3[2] = v24;
      v27 = *a5;
      v28 = a2[1];
      v35[0] = *a2;
      v35[1] = v28;
      v35[2] = a2[2];
      v29 = a1[1];
      v34[0] = *a1;
      v34[1] = v29;
      v34[2] = a1[2];
      if (v27(v35, v34))
      {
        result = (__n128)*a1;
        v30 = a1[1];
        v31 = a1[2];
        v32 = a2[2];
        v33 = *a2;
        a1[1] = a2[1];
        a1[2] = v32;
        *a1 = v33;
        *a2 = (__int128)result;
        a2[1] = v30;
        a2[2] = v31;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, unsigned int (**a6)(_OWORD *, __int128 *))
{
  unsigned int (*v12)(_OWORD *, __int128 *);
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unsigned int (*v21)(_OWORD *, __int128 *);
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unsigned int (*v29)(_OWORD *, __int128 *);
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unsigned int (*v37)(_OWORD *, __int128 *);
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[3];
  _OWORD v45[3];
  _OWORD v46[3];
  _OWORD v47[3];
  _OWORD v48[3];
  _OWORD v49[3];
  _OWORD v50[3];
  _OWORD v51[7];

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = a5[1];
  v51[0] = *a5;
  v51[1] = v13;
  v51[2] = a5[2];
  v14 = a4[1];
  v50[0] = *a4;
  v50[1] = v14;
  v50[2] = a4[2];
  if (v12(v51, v50))
  {
    v16 = *a4;
    v17 = a4[1];
    v18 = a4[2];
    v19 = a5[2];
    v20 = *a5;
    a4[1] = a5[1];
    a4[2] = v19;
    *a4 = v20;
    *a5 = v16;
    a5[1] = v17;
    a5[2] = v18;
    v21 = *a6;
    v22 = a4[1];
    v49[0] = *a4;
    v49[1] = v22;
    v49[2] = a4[2];
    v23 = a3[1];
    v48[0] = *a3;
    v48[1] = v23;
    v48[2] = a3[2];
    if (v21(v49, v48))
    {
      v24 = *a3;
      v25 = a3[1];
      v26 = a3[2];
      v27 = a4[2];
      v28 = *a4;
      a3[1] = a4[1];
      a3[2] = v27;
      *a3 = v28;
      *a4 = v24;
      a4[1] = v25;
      a4[2] = v26;
      v29 = *a6;
      v30 = a3[1];
      v47[0] = *a3;
      v47[1] = v30;
      v47[2] = a3[2];
      v31 = a2[1];
      v46[0] = *a2;
      v46[1] = v31;
      v46[2] = a2[2];
      if (v29(v47, v46))
      {
        v32 = *a2;
        v33 = a2[1];
        v34 = a2[2];
        v35 = a3[2];
        v36 = *a3;
        a2[1] = a3[1];
        a2[2] = v35;
        *a2 = v36;
        *a3 = v32;
        a3[1] = v33;
        a3[2] = v34;
        v37 = *a6;
        v38 = a2[1];
        v45[0] = *a2;
        v45[1] = v38;
        v45[2] = a2[2];
        v39 = a1[1];
        v44[0] = *a1;
        v44[1] = v39;
        v44[2] = a1[2];
        if (v37(v45, v44))
        {
          result = (__n128)*a1;
          v40 = a1[1];
          v41 = a1[2];
          v42 = a2[2];
          v43 = *a2;
          a1[1] = a2[1];
          a1[2] = v42;
          *a1 = v43;
          *a2 = (__int128)result;
          a2[1] = v40;
          a2[2] = v41;
        }
      }
    }
  }
  return result;
}

_OWORD *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*,PCEdgeVertex*>(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t (**a4)(_OWORD *, __int128 *))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t (*v15)(_OWORD *, __int128 *);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  int64_t v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  _OWORD v34[3];
  _OWORD v35[4];
  __int128 v36;

  if ((_OWORD *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 48;
    if ((uint64_t)a2 - a1 >= 49)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (_OWORD *)(a1 + 48 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *a4;
        v16 = v14[1];
        v35[0] = *v14;
        v35[1] = v16;
        v35[2] = v14[2];
        v17 = *(_OWORD *)(a1 + 16);
        v34[0] = *(_OWORD *)a1;
        v34[1] = v17;
        v34[2] = *(_OWORD *)(a1 + 32);
        if (v15(v35, v34))
        {
          v18 = *v14;
          v19 = v14[1];
          v20 = v14[2];
          v21 = *(_OWORD *)(a1 + 32);
          v22 = *(_OWORD *)a1;
          v14[1] = *(_OWORD *)(a1 + 16);
          v14[2] = v21;
          *v14 = v22;
          *(_OWORD *)a1 = v18;
          *(_OWORD *)(a1 + 16) = v19;
          *(_OWORD *)(a1 + 32) = v20;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, a4, v9, (_OWORD *)a1);
        }
        v14 += 3;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 49)
    {
      v23 = v8 / 0x30uLL;
      v24 = a2 - 3;
      do
      {
        v36 = *(_OWORD *)a1;
        v26 = *(_QWORD *)(a1 + 16);
        v25 = *(_QWORD *)(a1 + 24);
        v28 = *(_QWORD *)(a1 + 32);
        v27 = *(_QWORD *)(a1 + 40);
        v29 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>((_OWORD *)a1, (unsigned int (**)(_OWORD *, _OWORD *))a4, v23);
        if (v24 == v29)
        {
          *v29 = v36;
          *((_QWORD *)v29 + 2) = v26;
          *((_QWORD *)v29 + 3) = v25;
          *((_QWORD *)v29 + 4) = v28;
          *((_QWORD *)v29 + 5) = v27;
        }
        else
        {
          v30 = *v24;
          v31 = v24[2];
          v29[1] = v24[1];
          v29[2] = v31;
          *v29 = v30;
          *v24 = v36;
          *((_QWORD *)v24 + 2) = v26;
          *((_QWORD *)v24 + 3) = v25;
          *((_QWORD *)v24 + 4) = v28;
          *((_QWORD *)v24 + 5) = v27;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(a1, (uint64_t)(v29 + 3), a4, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v29 - a1 + 48) >> 4));
        }
        v24 -= 3;
      }
      while (v23-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(uint64_t result, uint64_t (**a2)(_OWORD *, __int128 *), uint64_t a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t (*v19)(_OWORD *, __int128 *);
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t (*v24)(_OWORD *, __int128 *);
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_OWORD *, __int128 *);
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t (*v41)(_OWORD *, __int128 *);
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[3];
  _OWORD v49[3];
  _OWORD v50[3];
  __int128 v51;
  _OWORD v52[3];
  _OWORD v53[3];
  _OWORD v54[3];
  _OWORD v55[4];
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v10 = a3 - 2;
  if (a3 >= 2)
  {
    v56 = v9;
    v57 = v8;
    v58 = v7;
    v59 = v6;
    v60 = v4;
    v61 = v5;
    v11 = a4;
    v12 = result;
    v13 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - result) >> 4)))
    {
      v16 = (0x5555555555555556 * (((uint64_t)a4 - result) >> 4)) | 1;
      v17 = (_OWORD *)(result + 48 * v16);
      v18 = 0x5555555555555556 * (((uint64_t)a4 - result) >> 4) + 2;
      if (v18 < a3)
      {
        v19 = *a2;
        v20 = result + 48 * v16;
        v21 = *(_OWORD *)(v20 + 16);
        v22 = *(_OWORD *)(v20 + 32);
        v55[0] = *v17;
        v55[1] = v21;
        v55[2] = v22;
        v23 = v17[4];
        v54[0] = v17[3];
        v54[1] = v23;
        v54[2] = v17[5];
        if (v19(v55, v54))
        {
          v17 += 3;
          v16 = v18;
        }
      }
      v24 = *a2;
      v25 = v17[1];
      v53[0] = *v17;
      v53[1] = v25;
      v53[2] = v17[2];
      v26 = v11[1];
      v52[0] = *v11;
      v52[1] = v26;
      v52[2] = v11[2];
      result = v24(v53, v52);
      if ((result & 1) == 0)
      {
        v51 = *v11;
        v27 = *((_QWORD *)v11 + 2);
        v28 = *((_QWORD *)v11 + 3);
        v29 = *((_QWORD *)v11 + 4);
        v30 = *((_QWORD *)v11 + 5);
        do
        {
          v31 = v11;
          v11 = v17;
          v32 = *v17;
          v33 = v17[2];
          v31[1] = v17[1];
          v31[2] = v33;
          *v31 = v32;
          if (v13 < v16)
            break;
          v34 = (2 * v16) | 1;
          v17 = (_OWORD *)(v12 + 48 * v34);
          v35 = 2 * v16 + 2;
          if (v35 < a3)
          {
            v36 = *a2;
            v37 = v12 + 48 * v34;
            v38 = *(_OWORD *)(v37 + 16);
            v39 = *(_OWORD *)(v37 + 32);
            v50[0] = *v17;
            v50[1] = v38;
            v50[2] = v39;
            v40 = v17[4];
            v49[0] = v17[3];
            v49[1] = v40;
            v49[2] = v17[5];
            if (v36(v50, v49))
            {
              v17 += 3;
              v34 = v35;
            }
          }
          v41 = *a2;
          v42 = v17[1];
          v48[0] = *v17;
          v48[1] = v42;
          v48[2] = v17[2];
          v43 = v51;
          v44 = v27;
          v45 = v28;
          v46 = v29;
          v47 = v30;
          result = v41(v48, &v43);
          v16 = v34;
        }
        while (!(_DWORD)result);
        *v11 = v51;
        *((_QWORD *)v11 + 2) = v27;
        *((_QWORD *)v11 + 3) = v28;
        *((_QWORD *)v11 + 4) = v29;
        *((_QWORD *)v11 + 5) = v30;
      }
    }
  }
  return result;
}

_OWORD *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(_OWORD *a1, unsigned int (**a2)(_OWORD *, _OWORD *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_OWORD *, _OWORD *);
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[3];
  _OWORD v19[3];

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = v6 + 1;
    v10 = &a1[3 * v6 + 3];
    v11 = (2 * v6) | 1;
    v12 = 2 * v6 + 2;
    if (v12 < a3)
    {
      v13 = *a2;
      v19[0] = *v10;
      v14 = &a1[3 * v9];
      v19[1] = v14[1];
      v19[2] = v14[2];
      v18[0] = v10[3];
      v18[1] = v10[4];
      v18[2] = v10[5];
      if (v13(v19, v18))
      {
        v10 += 3;
        v11 = v12;
      }
    }
    v15 = *v10;
    v16 = v10[2];
    a1[1] = v10[1];
    a1[2] = v16;
    *a1 = v15;
    a1 = v10;
    v6 = v11;
  }
  while (v11 <= v8);
  return v10;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(PCEdgeVertex,PCEdgeVertex),PCEdgeVertex*>(uint64_t result, uint64_t a2, uint64_t (**a3)(_OWORD *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  unint64_t v13;
  uint64_t (*v14)(_OWORD *, __int128 *);
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  uint64_t (*v26)(_OWORD *, __int128 *);
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[3];
  __int128 v34;
  _OWORD v35[3];
  _OWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a4 >= 2)
  {
    v37 = v9;
    v38 = v8;
    v39 = v7;
    v40 = v6;
    v41 = v4;
    v42 = v5;
    v12 = result;
    v13 = (unint64_t)(a4 - 2) >> 1;
    v14 = *a3;
    v15 = (_OWORD *)(result + 48 * v13);
    v16 = v15[1];
    v36[0] = *v15;
    v36[1] = v16;
    v36[2] = v15[2];
    v17 = *(_OWORD *)(a2 - 32);
    v35[0] = *(_OWORD *)(a2 - 48);
    v35[1] = v17;
    v35[2] = *(_OWORD *)(a2 - 16);
    result = v14(v36, v35);
    if ((_DWORD)result)
    {
      v18 = (_OWORD *)(a2 - 48);
      v34 = *(_OWORD *)(a2 - 48);
      v19 = *(_QWORD *)(a2 - 32);
      v20 = *(_QWORD *)(a2 - 24);
      v21 = *(_QWORD *)(a2 - 16);
      v22 = *(_QWORD *)(a2 - 8);
      do
      {
        v23 = v18;
        v18 = v15;
        v24 = *v15;
        v25 = v15[2];
        v23[1] = v15[1];
        v23[2] = v25;
        *v23 = v24;
        if (!v13)
          break;
        v13 = (v13 - 1) >> 1;
        v26 = *a3;
        v15 = (_OWORD *)(v12 + 48 * v13);
        v27 = v15[1];
        v33[0] = *v15;
        v33[1] = v27;
        v33[2] = v15[2];
        v28 = v34;
        v29 = v19;
        v30 = v20;
        v31 = v21;
        v32 = v22;
        result = v26(v33, &v28);
      }
      while ((result & 1) != 0);
      *v18 = v34;
      *((_QWORD *)v18 + 2) = v19;
      *((_QWORD *)v18 + 3) = v20;
      *((_QWORD *)v18 + 4) = v21;
      *((_QWORD *)v18 + 5) = v22;
    }
  }
  return result;
}

uint64_t *PCBinaryTree<PCEdgeSegment>::~PCBinaryTree(uint64_t *a1)
{
  PCBinaryTree<PCEdgeSegment>::removeBranch((uint64_t)a1, *a1);
  *a1 = 0;
  return a1;
}

uint64_t PCBinaryTree<PCEdgeSegment>::removeBranch(uint64_t result, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    PCBinaryTree<PCEdgeSegment>::removeBranch(result, *(_QWORD *)(a2 + 40));
    PCBinaryTree<PCEdgeSegment>::removeBranch(v3, *(_QWORD *)(a2 + 48));
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void PCBinaryTree<PCEdgeSegment>::insertNode(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t inserted;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  if (!a2)
  {
    v7 = operator new();
    v8 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a3;
    *(_OWORD *)(v7 + 16) = v8;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    return;
  }
  if (!PCEdgeSegment::operator<((double *)a3, (double *)a2))
  {
    inserted = PCBinaryTree<PCEdgeSegment>::insertNode(a1, *(_QWORD *)(a2 + 48), a3);
    *(_QWORD *)(a2 + 48) = inserted;
    if (!inserted)
      goto LABEL_8;
    goto LABEL_7;
  }
  inserted = PCBinaryTree<PCEdgeSegment>::insertNode(a1, *(_QWORD *)(a2 + 40), a3);
  *(_QWORD *)(a2 + 40) = inserted;
  if (inserted)
LABEL_7:
    *(_QWORD *)(inserted + 56) = a2;
LABEL_8:
  v9 = *a1;
  PCBinaryTree<PCEdgeSegment>::balance((uint64_t)a1, (uint64_t *)a2);
  if (v9 == a2)
    *a1 = v10;
}

void PCBinaryTree<PCEdgeSegment>::balance(uint64_t a1, uint64_t *a2)
{
  int NodeHeight;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (a2)
  {
    NodeHeight = PCBinaryTree<PCEdgeSegment>::getNodeHeight(a1, a2[5]);
    v5 = NodeHeight - PCBinaryTree<PCEdgeSegment>::getNodeHeight(a1, a2[6]);
    if (v5 >= 2)
    {
      if ((int)PCBinaryTree<PCEdgeSegment>::getNodeHeightDelta(a1, a2[5]) >= 1)
      {
        v6 = a2[7];
        v7 = (_QWORD *)a2[5];
        v8 = v7[6];
        a2[5] = v8;
        if (v8)
          *(_QWORD *)(v8 + 56) = a2;
        a2[7] = (uint64_t)v7;
        v7[6] = a2;
LABEL_17:
        v7[7] = v6;
        return;
      }
      v9 = a1;
      v10 = (uint64_t)a2;
      v11 = 2;
      goto LABEL_13;
    }
    if (v5 <= -2)
    {
      if ((int)PCBinaryTree<PCEdgeSegment>::getNodeHeightDelta(a1, a2[6]) < 1)
      {
        v7 = (_QWORD *)a2[6];
        v6 = a2[7];
        v12 = v7[5];
        a2[6] = v12;
        if (v12)
          *(_QWORD *)(v12 + 56) = a2;
        v7[5] = a2;
        a2[7] = (uint64_t)v7;
        goto LABEL_17;
      }
      v9 = a1;
      v10 = (uint64_t)a2;
      v11 = 3;
LABEL_13:
      PCBinaryTree<PCEdgeSegment>::rotate(v9, v10, v11);
    }
  }
}

uint64_t PCBinaryTree<PCEdgeSegment>::getNodeHeightDelta(uint64_t a1, uint64_t a2)
{
  int NodeHeight;

  if (!a2)
    return 0;
  NodeHeight = PCBinaryTree<PCEdgeSegment>::getNodeHeight(a1, *(_QWORD *)(a2 + 40));
  return NodeHeight - PCBinaryTree<PCEdgeSegment>::getNodeHeight(a1, *(_QWORD *)(a2 + 48));
}

void PCBinaryTree<PCEdgeSegment>::rotate(uint64_t a1, uint64_t a2, int a3)
{
  __asm { BR              X10 }
}

uint64_t PCBinaryTree<PCEdgeSegment>::getNodeHeight(uint64_t a1, uint64_t a2)
{
  int NodeHeight;
  int v5;
  int v6;

  if (!a2)
    return 0;
  NodeHeight = PCBinaryTree<PCEdgeSegment>::getNodeHeight(a1, *(_QWORD *)(a2 + 40));
  v5 = PCBinaryTree<PCEdgeSegment>::getNodeHeight(a1, *(_QWORD *)(a2 + 48));
  if (NodeHeight <= v5)
    v6 = v5;
  else
    v6 = NodeHeight;
  return (v6 + 1);
}

uint64_t ProCore_Private::PCBitmapRepDefault::PCBitmapRepDefault(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  size_t v10;
  void *v11;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_QWORD *)a1 = &off_1E6511490;
  *(_DWORD *)(a1 + 16) = a4;
  v7 = (a5 + PCPixelFormat::getBytesPerPixel(a4) * a2 - 1) / a5 * a5;
  *(_DWORD *)(a1 + 20) = v7;
  v8 = getpagesize();
  v9 = v8 + v7 * (unint64_t)a3 - 1;
  v10 = v9 / v8 * v8;
  *(_QWORD *)(a1 + 24) = v10;
  if (v9 == v9 - v10)
    v11 = 0;
  else
    v11 = malloc_type_valloc(v10, 0x5BE40E5DuLL);
  *(_QWORD *)(a1 + 32) = v11;
  return a1;
}

void ProCore_Private::PCBitmapRepDefault::~PCBitmapRepDefault(ProCore_Private::PCBitmapRepDefault *this)
{
  void *v1;

  *(_QWORD *)this = &off_1E6511490;
  v1 = (void *)*((_QWORD *)this + 4);
  if (v1)
    free(v1);
}

{
  void *v1;

  *(_QWORD *)this = &off_1E6511490;
  v1 = (void *)*((_QWORD *)this + 4);
  if (v1)
    free(v1);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProCore_Private::PCBitmapRepDefault::getData(ProCore_Private::PCBitmapRepDefault *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t ProCore_Private::PCBitmapRepDefault::getAllocationSize(ProCore_Private::PCBitmapRepDefault *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t ProCore_Private::PCBitmapRepDefault::getWidth(ProCore_Private::PCBitmapRepDefault *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t ProCore_Private::PCBitmapRepDefault::getHeight(ProCore_Private::PCBitmapRepDefault *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t ProCore_Private::PCBitmapRepDefault::getPixelFormat(ProCore_Private::PCBitmapRepDefault *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t ProCore_Private::PCBitmapRepDefault::setPixelFormat(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t ProCore_Private::PCBitmapRepDefault::getBytesPerRow(ProCore_Private::PCBitmapRepDefault *this)
{
  return *((unsigned int *)this + 5);
}

void _PCMod_error(const char *a1, const char *a2, int a3)
{
  PCException *exception;
  PCString v7;
  PCString v8;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v8, a1);
  PCString::PCString(&v7, a2);
  PCException::PCException(exception, &v8, &v7, a3);
  *(_QWORD *)exception = &unk_1E65EA798;
}

void sub_1B2971920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void PCException::PCException(PCException *this, const PCString *a2, const PCString *a3, int a4)
{
  *(_QWORD *)this = &off_1E65115B8;
  *((_QWORD *)this + 1) = 0;
  PCString::PCString((PCString *)this + 2, a2);
  PCString::PCString((PCString *)this + 3, a3);
  *((_DWORD *)this + 8) = a4;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
}

void sub_1B29719D8(_Unwind_Exception *a1)
{
  std::exception *v1;
  const void **v2;
  PCString *v3;

  PCString::~PCString(v3);
  PCCFRef<__CFArray const*>::~PCCFRef(v2);
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void PCIllegalArgumentException::~PCIllegalArgumentException(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void **PCException::what(const PCString *this)
{
  int var0_high;
  __CFString *var0;
  void **p_var0;
  char *v6;
  PCString v7;
  __int128 v8;
  __CFString *v9;

  var0_high = SHIBYTE(this[7].var0);
  if (var0_high < 0)
    var0 = this[6].var0;
  else
    var0 = (__CFString *)HIBYTE(this[7].var0);
  p_var0 = (void **)&this[5].var0;
  if (var0)
  {
    if ((var0_high & 0x80) == 0)
      return p_var0;
    return (void **)*p_var0;
  }
  PCException::getInfo(this, &v7);
  v6 = PCString::createCStr(&v7);
  std::string::basic_string[abi:ne180100]<0>(&v8, v6);
  free(v6);
  if (SHIBYTE(this[7].var0) < 0)
    operator delete(*p_var0);
  *(_OWORD *)p_var0 = v8;
  this[7].var0 = v9;
  HIBYTE(v9) = 0;
  LOBYTE(v8) = 0;
  PCString::~PCString(&v7);
  if ((HIBYTE(this[7].var0) & 0x80) != 0)
    return (void **)*p_var0;
  return p_var0;
}

void sub_1B2971AE4(void *a1)
{
  __cxa_call_unexpected(a1);
}

void PCIllegalArgumentException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCIllegalArgumentException"));
}

uint64_t PCException::callStackSymbols(PCException *this)
{
  return *((_QWORD *)this + 1);
}

PCString *PCException::getInfo@<X0>(const PCString *this@<X0>, PCString *a2@<X8>)
{
  PCString *v4;
  PCString *result;
  PCString v6;

  v4 = (PCString *)&this[2];
  ((void (*)(PCString *__return_ptr))this->var0->length)(a2);
  result = (PCString *)PCString::size(v4);
  if ((_DWORD)result)
  {
    PCString::PCString(&v6, ": ");
    PCString::append(a2, &v6);
    PCString::~PCString(&v6);
    result = PCString::append(a2, v4);
  }
  if (LODWORD(this[4].var0))
  {
    PCString::append(a2, " (");
    PCString::append(a2, this + 3);
    PCString::append(a2, ":");
    PCString::ssprintf((PCString *)"%d", &v6, LODWORD(this[4].var0));
    PCString::append(a2, &v6);
    PCString::~PCString(&v6);
    return PCString::append(a2, ")");
  }
  return result;
}

void sub_1B2971C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString *v10;

  PCString::~PCString(&a10);
  PCString::~PCString(v10);
  _Unwind_Resume(a1);
}

void PCException::~PCException(PCString *this)
{
  this->var0 = (__CFString *)&off_1E65115B8;
  if (SHIBYTE(this[7].var0) < 0)
    operator delete(this[5].var0);
  PCString::~PCString(this + 3);
  PCString::~PCString(this + 2);
  PCCFRef<__CFArray const*>::~PCCFRef((const void **)&this[1].var0);
  std::exception::~exception((std::exception *)this);
}

{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

UInt8 *PCCreatePrivateColorSpaceFromColorSpace(const char *a1, CGColorSpaceRef space)
{
  const __CFData *v4;
  const ColorSyncProfile *v5;
  ColorSyncMutableProfileRef MutableCopy;
  ColorSyncProfile *v7;
  int v8;
  size_t v9;
  __CFData *Mutable;
  __CFData *v11;
  size_t v12;
  UInt8 *MutableBytePtr;
  ColorSyncMD5 MD5;
  CFIndex Length;
  UInt8 *v16;
  UInt8 *v17;
  CFDataRef v18;
  UInt8 *v19;
  UInt8 *v20;
  const __CFData *v22;
  UInt8 *buffer;
  UInt8 *v24;
  CFDataRef theData;
  CFRange v26;

  v4 = CGColorSpaceCopyICCData(space);
  v5 = ColorSyncProfileCreate(v4, 0);
  MutableCopy = ColorSyncProfileCreateMutableCopy(v5);
  if (MutableCopy)
  {
    v7 = MutableCopy;
    v8 = strlen(a1);
    v9 = (v8 + 91);
    Mutable = CFDataCreateMutable(0, v9);
    if (Mutable)
    {
      v11 = Mutable;
      v12 = (v8 + 1);
      CFDataSetLength(Mutable, v9);
      MutableBytePtr = CFDataGetMutableBytePtr(v11);
      bzero(MutableBytePtr, v9);
      *(_DWORD *)MutableBytePtr = 1668506980;
      *((_DWORD *)MutableBytePtr + 2) = bswap32(v12);
      memcpy(MutableBytePtr + 12, a1, v12);
      ColorSyncProfileSetTag(v7, CFSTR("desc"), v11);
      CFRelease(v11);
      MD5 = ColorSyncProfileGetMD5(v7);
      theData = ColorSyncProfileCopyHeader(v7);
      Length = CFDataGetLength(theData);
      std::vector<unsigned char>::vector(&buffer, Length);
      v26.location = 0;
      v26.length = Length;
      CFDataGetBytes(theData, v26, buffer);
      v16 = buffer;
      v17 = v24;
      *(ColorSyncMD5 *)(buffer + 84) = MD5;
      v18 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v16, v17 - v16);
      v22 = v18;
      if (theData && theData != v18)
      {
        CFRelease(theData);
        v18 = v22;
      }
      theData = v18;
      v22 = 0;
      PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v22);
      ColorSyncProfileSetHeader(v7, theData);
      if (buffer)
      {
        v24 = buffer;
        operator delete(buffer);
      }
      PCCFRef<__CTLine const*>::~PCCFRef((const void **)&theData);
      buffer = (UInt8 *)MEMORY[0x1B5E28144](v7, 0);
      if (CGColorSpaceUsesExtendedRange(space))
      {
        PCCreateExtendedColorSpace((CGColorSpace **)&buffer, &theData);
        v19 = (UInt8 *)theData;
        if (buffer && buffer != (UInt8 *)theData)
        {
          PCCFRefTraits<CGColorSpace *>::release((CGColorSpaceRef)buffer);
          v19 = (UInt8 *)theData;
        }
        buffer = v19;
        theData = 0;
        PCCFRef<CGColorSpace *>::~PCCFRef(&theData);
      }
      CGColorSpaceRetain((CGColorSpaceRef)buffer);
      v20 = buffer;
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&buffer);
    }
    else
    {
      v20 = 0;
    }
    CFRelease(v7);
    if (v5)
      goto LABEL_18;
  }
  else
  {
    v20 = 0;
    if (v5)
LABEL_18:
      CFRelease(v5);
  }
  if (v4)
    CFRelease(v4);
  return v20;
}

void sub_1B2971ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, uint64_t a13, CGColorSpace *a14)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a14);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&__p);
  _Unwind_Resume(a1);
}

CGColorSpace *PCCreateColorSpaceFromAttachments(const __CFDictionary *a1)
{
  CGColorSpace *ColorSpaceFromAttachments;
  const void *Value;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  __CFString *v9;
  __CFString *v10;
  UInt8 *v11;

  ColorSpaceFromAttachments = CVImageBufferCreateColorSpaceFromAttachments(a1);
  Value = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8E98]);
  if (!Value)
    return ColorSpaceFromAttachments;
  v4 = Value;
  v5 = (const void *)*MEMORY[0x1E0CA8EC8];
  if (!CFEqual(Value, (CFTypeRef)*MEMORY[0x1E0CA8EC8]) && !CFEqual(v4, (CFTypeRef)*MEMORY[0x1E0CA8EA8]))
    return ColorSpaceFromAttachments;
  v6 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8D68]);
  v7 = CFDictionaryGetValue(a1, (const void *)*MEMORY[0x1E0CA8EE8]);
  if (!v6 || v7 == 0)
    return ColorSpaceFromAttachments;
  if (v5 == v4)
  {
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("%@ / PQ / %@"), v6, v7);
  }
  else
  {
    if ((const void *)*MEMORY[0x1E0CA8EA8] != v4)
      return ColorSpaceFromAttachments;
    v9 = (__CFString *)CFStringCreateWithFormat(0, 0, CFSTR("%@ / HLG / %@"), v6, v7);
  }
  if (v9)
  {
    v10 = v9;
    v11 = PCCreatePrivateColorSpaceFromColorSpace((const char *)-[__CFString UTF8String](v9, "UTF8String"), ColorSpaceFromAttachments);
    CGColorSpaceRelease(ColorSpaceFromAttachments);
    CFRelease(v10);
    return (CGColorSpace *)v11;
  }
  return ColorSpaceFromAttachments;
}

BOOL PCIsLinearColorSpace(CGColorSpace *a1)
{
  return PCGetNCLCCodeForColorSpace(a1) >> 32 == 8 || PCEstimateGamma(a1) == 1.0;
}

BOOL PCIsHDRColorSpace(CGColorSpace *a1)
{
  if (CGColorSpaceGetModel(a1) != kCGColorSpaceModelRGB)
    return 0;
  if (CGColorSpaceUsesITUR_2100TF(a1))
    return 1;
  return PCIsLinearColorSpace(a1);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_1B2972160(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1B2972210(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B2972438(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B2972574(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B29726D4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

double operator*@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  return PC_CMTimeMultiply64Divide64((uint64_t)&v4, *(_QWORD *)a2, *(int *)(a2 + 8), a3);
}

CMTime *operator*@<X0>(CMTime *a1@<X0>, CMTime *a2@<X8>, Float64 a3@<D0>)
{
  CMTime v4;

  v4 = *a1;
  return CMTimeMultiplyByFloat64(a2, &v4, a3);
}

CMTime *operator*@<X0>(CMTime *a1@<X0>, int32_t a2@<W1>, CMTime *a3@<X8>)
{
  CMTime v4;

  v4 = *a1;
  return CMTimeMultiply(a3, &v4, a2);
}

CMTime *operator*@<X0>(int32_t multiplier@<W0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  CMTime v4;

  v4 = *a2;
  return CMTimeMultiply(a3, &v4, multiplier);
}

double operator/@<D0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  return PC_CMTimeMultiply64Divide64((uint64_t)&v4, *(int *)(a2 + 8), *(_QWORD *)a2, a3);
}

double operator/@<D0>(__int128 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  return PC_CMTimeMultiply64Divide64((uint64_t)&v4, 1, a2, a3);
}

double operator/@<D0>(__int128 *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *((_QWORD *)a1 + 2);
  return PC_CMTimeMultiply64Divide64((uint64_t)&v4, 1, a2, a3);
}

double operator/@<D0>(__int128 *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  int v3;
  int v4;
  BOOL v5;
  __int128 v7;
  uint64_t v8;

  v3 = *((_DWORD *)a1 + 2);
  if (v3 && v3 < 0x20000)
  {
    while (vabdd_f64(floor((double)v3 * a3) / (double)v3, a3) >= 0.00001)
    {
      v4 = 2 * v3;
      v5 = v3 < 0x10000;
      v3 *= 2;
      if (!v5)
        goto LABEL_7;
    }
  }
  v4 = v3;
LABEL_7:
  v7 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  return PC_CMTimeMultiply64Divide64((uint64_t)&v7, v4, (uint64_t)((double)v4 * a3), a2);
}

CFDictionaryRef CMTimeRangeCopyAsDictionary(CMTimeRange *range, CFAllocatorRef allocator)
{
  void *v4;
  const __CFDictionary *v5;
  uint64_t v6;
  char v7;
  char v8;
  const void *v9;
  CMTime duration;
  CMTime time;
  void *values[2];
  void *keys[3];

  keys[2] = *(void **)MEMORY[0x1E0C80C00];
  v4 = (void *)*MEMORY[0x1E0CA2E38];
  keys[0] = *(void **)MEMORY[0x1E0CA2E48];
  keys[1] = v4;
  time = range->start;
  values[0] = CMTimeCopyAsDictionary(&time, allocator);
  duration = range->duration;
  values[1] = CMTimeCopyAsDictionary(&duration, allocator);
  v5 = CFDictionaryCreate(allocator, (const void **)keys, (const void **)values, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v6 = 0;
  v7 = 1;
  do
  {
    v8 = v7;
    v9 = values[v6];
    if (v9)
      CFRelease(v9);
    v7 = 0;
    v6 = 1;
  }
  while ((v8 & 1) != 0);
  return v5;
}

CMTimeRange *__cdecl CMTimeRangeMakeFromDictionary(CMTimeRange *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  const __CFDictionary *Value;
  const __CFDictionary *v5;
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;

  memset(&v8, 0, sizeof(v8));
  Value = (const __CFDictionary *)CFDictionaryGetValue(dictionaryRepresentation, (const void *)*MEMORY[0x1E0CA2E48]);
  CMTimeMakeFromDictionary(&v8, Value);
  memset(&v7, 0, sizeof(v7));
  v5 = (const __CFDictionary *)CFDictionaryGetValue(dictionaryRepresentation, (const void *)*MEMORY[0x1E0CA2E38]);
  CMTimeMakeFromDictionary(&v7, v5);
  v10 = v8;
  v9 = v7;
  return (CMTimeRange *)CMTimeRangeSaferMake(&v10, &v9, (uint64_t)retstr);
}

BOOL _svdCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  __CLPK_integer v26;
  __CLPK_integer v27;
  uint64_t v28;
  uint64_t v29;
  __CLPK_integer v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  __CLPK_integer v35;
  int v36;
  __CFString *var0;
  int v38;
  uint64_t v39;
  int v40;
  PCException *exception;
  PCException *v43;
  PCString v44;
  __CLPK_integer v45;
  PCString v46;
  __CLPK_doublereal *v47;
  __CLPK_integer __lwork;
  __CLPK_integer __ldvt;
  __CLPK_integer __ldu;
  __CLPK_integer __lda;
  __CLPK_integer __n;
  __CLPK_integer __m;
  char __jobvt;
  char __jobu;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  __CLPK_doublereal *v61;

  PCGenMatrix<double>::copy(a2, 0, (uint64_t)&v56);
  PCGenMatrix<double>::resize((_DWORD *)(a1 + 24), v57, v58, 0);
  v4 = *(unsigned int *)(a1 + 32);
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = *(_QWORD **)(a1 + 48);
    v7 = *(unsigned int *)(a1 + 36);
    v8 = 8 * *(int *)(a1 + 40);
    v9 = 8 * *(int *)(a1 + 44);
    do
    {
      v10 = v6;
      v11 = v7;
      if ((int)v7 >= 1)
      {
        do
        {
          *v10 = 0;
          v10 = (_QWORD *)((char *)v10 + v9);
          --v11;
        }
        while (v11);
      }
      ++v5;
      v6 = (_QWORD *)((char *)v6 + v8);
    }
    while (v5 != v4);
  }
  PCGenMatrix<double>::resize((_DWORD *)(a1 + 56), v58, v58, 1);
  v12 = *(unsigned int *)(a1 + 64);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = *(_QWORD **)(a1 + 80);
    v15 = *(unsigned int *)(a1 + 68);
    v16 = 8 * *(int *)(a1 + 72);
    v17 = 8 * *(int *)(a1 + 76);
    do
    {
      v18 = v14;
      v19 = v15;
      if ((int)v15 >= 1)
      {
        do
        {
          *v18 = 0;
          v18 = (_QWORD *)((char *)v18 + v17);
          --v19;
        }
        while (v19);
      }
      ++v13;
      v14 = (_QWORD *)((char *)v14 + v16);
    }
    while (v13 != v12);
  }
  PCGenVector<double>::resize(a1 + 88, *(_DWORD *)(a2 + 12));
  v20 = *(unsigned int *)(a1 + 96);
  if ((int)v20 >= 1)
  {
    v21 = *(_QWORD **)(a1 + 104);
    v22 = 8 * *(int *)(a1 + 100);
    do
    {
      *v21 = 0;
      v21 = (_QWORD *)((char *)v21 + v22);
      --v20;
    }
    while (v20);
  }
  PCGenVector<double>::resize(a1 + 112, *(_DWORD *)(a2 + 12));
  v23 = *(unsigned int *)(a1 + 120);
  if ((int)v23 >= 1)
  {
    v24 = *(_QWORD **)(a1 + 128);
    v25 = 8 * *(int *)(a1 + 124);
    do
    {
      *v24 = 0;
      v24 = (_QWORD *)((char *)v24 + v25);
      --v23;
    }
    while (v23);
  }
  PCGenVector<double>::resize(a1 + 136, 0);
  v27 = v57;
  v26 = v58;
  if (v57 >= 1)
  {
    v28 = 0;
    do
    {
      if (v26 >= 1)
      {
        v29 = 0;
        do
        {
          PCGenMatrix<double>::checkColIndex((uint64_t)&v56, v29);
          PCGenMatrix<double>::checkRowIndex((uint64_t)&v56, v28);
          if ((*(_QWORD *)&v61[v60 * (int)v29 + v59 * (int)v28] & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            PCGenMatrix<double>::operator()((uint64_t)&v56, v28, v29);
            exception = (PCException *)__cxa_allocate_exception(0x40uLL);
            PCString::PCString(&v46, "NaN");
            PCException::PCException(exception, &v46);
            *(_QWORD *)exception = &unk_1E65EA798;
          }
          v29 = (v29 + 1);
          v26 = v58;
        }
        while ((int)v29 < v58);
        v27 = v57;
      }
      v28 = (v28 + 1);
    }
    while ((int)v28 < v27);
  }
  __jobu = 83;
  __jobvt = 65;
  __n = v26;
  __m = v27;
  __ldu = v27;
  __lda = v27;
  __ldvt = v26;
  if (v27 <= v26)
    v30 = v26;
  else
    v30 = v27;
  v31 = 10 * v30;
  v32 = 2 * v27 * v26;
  if (v31 <= v32)
    v33 = v32;
  else
    v33 = v31;
  __lwork = v33;
  PCGenVector<double>::PCGenVector((double **)&v46, v33, 0.0);
  v45 = 0;
  v34 = dgesvd_(&__jobu, &__jobvt, &__m, &__n, v61, &__lda, *(__CLPK_doublereal **)(a1 + 104), *(__CLPK_doublereal **)(a1 + 48), &__ldu, *(__CLPK_doublereal **)(a1 + 80), &__ldvt, v47, &__lwork, &v45);
  v35 = v45;
  v36 = v34 | v45;
  *(_BYTE *)(a1 + 224) = (v34 | v45) == 0;
  if (v35 < 0)
  {
    v43 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"dgesvd: bad parameter %d", &v44, -v45);
    PCException::PCException(v43, &v44);
  }
  var0 = v46.var0;
  if (v46.var0)
  {
    v38 = HIDWORD(v46.var0[-1].length) - 1;
    HIDWORD(v46.var0[-1].length) = v38;
    if (!v38)
      MEMORY[0x1B5E2914C](&var0[-1].length, 0x1000C8077774924);
  }
  v39 = v56;
  if (v56)
  {
    v40 = *(_DWORD *)(v56 - 4) - 1;
    *(_DWORD *)(v56 - 4) = v40;
    if (!v40)
      MEMORY[0x1B5E2914C](v39 - 8, 0x1000C8077774924);
  }
  return v36 == 0;
}

void sub_1B2973610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCString a16, uint64_t a17, PCString a18)
{
  uint64_t v18;
  __CFString *var0;
  int v21;
  uint64_t v22;
  int v23;

  PCString::~PCString(&a16);
  var0 = a18.var0;
  if (a18.var0)
  {
    v21 = HIDWORD(a18.var0[-1].length) - 1;
    HIDWORD(a18.var0[-1].length) = v21;
    if (!v21)
      MEMORY[0x1B5E2914C](&var0[-1].length, 0x1000C8077774924);
  }
  v22 = *(_QWORD *)(v18 - 80);
  if (v22)
  {
    v23 = *(_DWORD *)(v22 - 4) - 1;
    *(_DWORD *)(v22 - 4) = v23;
    if (!v23)
      MEMORY[0x1B5E2914C](v22 - 8, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

_DWORD *PCGenMatrix<double>::copy@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  PCGenBlockRef<double>::PCGenBlockRef((_QWORD *)a3, v7 * v6);
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = v7;
  if (a2)
    v8 = v7;
  else
    v8 = 1;
  if (a2)
    v9 = 1;
  else
    v9 = v6;
  *(_DWORD *)(a3 + 16) = v8;
  *(_DWORD *)(a3 + 20) = v9;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)a3;
  return PCGenMatrix<double>::set<double>((_DWORD *)a3, a1);
}

void sub_1B2973768(_Unwind_Exception *a1)
{
  _QWORD *v1;

  PCGenBlockRef<double>::deref(v1);
  _Unwind_Resume(a1);
}

_DWORD *PCGenMatrix<double>::resize(_DWORD *result, int a2, int a3, int a4)
{
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26[2];
  unsigned int v27[2];
  _QWORD v28[4];
  unsigned int v29[2];
  unsigned int v30[2];
  _QWORD v31[4];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v6 = (uint64_t)result;
  v8 = result[2];
  v7 = result[3];
  v10 = v8 != a2 || v7 != a3;
  if (a4)
  {
    if (a4 == 1)
    {
      if (result[5] == 1)
      {
        if (result[4] != v7)
          LOBYTE(v10) = 1;
        if (!v10)
          return result;
      }
    }
    else if (!v10)
    {
      return result;
    }
    v11 = 0;
LABEL_21:
    result = PCGenBlockRef<double>::PCGenBlockRef(&v32, a3 * a2);
    *(_QWORD *)&v33 = __PAIR64__(a3, a2);
    if (v11)
      v12 = 1;
    else
      v12 = a3;
    if (v11)
      v13 = a2;
    else
      v13 = 1;
    *((_QWORD *)&v33 + 1) = __PAIR64__(v13, v12);
    v14 = *(_DWORD *)(v6 + 12);
    if (a2 >= *(_DWORD *)(v6 + 8))
      v15 = *(_DWORD *)(v6 + 8);
    else
      v15 = a2;
    v16 = v32;
    v34 = v32;
    if (a3 >= v14)
      v17 = v14;
    else
      v17 = a3;
    v18 = v15 - 1;
    if (v15 >= 1 && v17 >= 1)
    {
      v30[0] = 0;
      v30[1] = v15 - 1;
      v20 = v17 - 1;
      v29[0] = 0;
      v29[1] = v17 - 1;
      PCGenMatrix<double>::operator()((uint64_t)result, v30, v29, (uint64_t)v31);
      v27[0] = 0;
      v27[1] = v18;
      v26[0] = 0;
      v26[1] = v20;
      PCGenMatrix<double>::operator()(v6, v27, v26, (uint64_t)v28);
      result = (_DWORD *)PCGenMatrix<double>::set<double>(v31, v28);
      v21 = v28[0];
      if (v28[0])
      {
        v22 = *(_DWORD *)(v28[0] - 4) - 1;
        *(_DWORD *)(v28[0] - 4) = v22;
        if (!v22)
          result = (_DWORD *)MEMORY[0x1B5E2914C](v21 - 8, 0x1000C8077774924);
      }
      v23 = v31[0];
      if (v31[0])
      {
        v24 = *(_DWORD *)(v31[0] - 4) - 1;
        *(_DWORD *)(v31[0] - 4) = v24;
        if (!v24)
          result = (_DWORD *)MEMORY[0x1B5E2914C](v23 - 8, 0x1000C8077774924);
      }
      v16 = v32;
    }
    if (&v32 != (uint64_t *)v6)
    {
      *(_OWORD *)(v6 + 8) = v33;
      if (*(_QWORD *)v6 != v16)
      {
        result = PCGenBlockRef<double>::deref((_QWORD *)v6);
        *(_QWORD *)v6 = v16;
        if (v16)
          ++*(_DWORD *)(v16 - 4);
      }
      v16 = v32;
      *(_QWORD *)(v6 + 24) = v34;
    }
    if (v16)
    {
      v25 = *(_DWORD *)(v16 - 4) - 1;
      *(_DWORD *)(v16 - 4) = v25;
      if (!v25)
        return (_DWORD *)MEMORY[0x1B5E2914C](v16 - 8, 0x1000C8077774924);
    }
    return result;
  }
  if (result[4] != 1)
    goto LABEL_18;
  if (result[5] != v8)
    LOBYTE(v10) = 1;
  if (v10)
  {
LABEL_18:
    v11 = 1;
    goto LABEL_21;
  }
  return result;
}

void sub_1B2973984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  int v19;
  int v20;
  uint64_t v21;
  int v22;

  if (a11)
  {
    v19 = *(_DWORD *)(a11 - 4) - 1;
    *(_DWORD *)(a11 - 4) = v19;
    if (!v19)
      MEMORY[0x1B5E2914C](a11 - 8, 0x1000C8077774924);
  }
  if (a17)
  {
    v20 = *(_DWORD *)(a17 - 4) - 1;
    *(_DWORD *)(a17 - 4) = v20;
    if (!v20)
      MEMORY[0x1B5E2914C](a17 - 8, 0x1000C8077774924);
  }
  v21 = *(_QWORD *)(v17 - 80);
  if (v21)
  {
    v22 = *(_DWORD *)(v21 - 4) - 1;
    *(_DWORD *)(v21 - 4) = v22;
    if (!v22)
      MEMORY[0x1B5E2914C](v21 - 8, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

void PCGenVector<double>::resize(uint64_t a1, int a2)
{
  int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  int v12;
  void *v13;

  if (*(_DWORD *)(a1 + 8) != a2)
  {
    PCGenBlockRef<double>::PCGenBlockRef(&v13, a2);
    v4 = *(_DWORD *)(a1 + 8);
    if (a2 >= v4)
      v5 = v4;
    else
      v5 = a2;
    v6 = v13;
    bzero(v13, 8 * a2);
    v7 = *(int *)(a1 + 12);
    v8 = *(_QWORD **)(a1 + 16);
    if ((_DWORD)v7 == 1)
    {
      if (v8)
        memcpy(v6, v8, 8 * (int)v5);
    }
    else if (v8 && (int)v5 >= 1)
    {
      v9 = 8 * v7;
      v10 = v6;
      do
      {
        *v10++ = *v8;
        v8 = (_QWORD *)((char *)v8 + v9);
        --v5;
      }
      while (v5);
    }
    v11 = v13;
    if (*(void **)a1 != v13)
    {
      PCGenBlockRef<double>::deref((_QWORD *)a1);
      *(_QWORD *)a1 = v11;
      if (v11)
        ++*(v11 - 1);
      v11 = v13;
    }
    *(_QWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 12) = 1;
    if (v11)
    {
      v12 = *(v11 - 1) - 1;
      *(v11 - 1) = v12;
      if (!v12)
        MEMORY[0x1B5E2914C](v11 - 2, 0x1000C8077774924);
    }
  }
}

uint64_t PCGenMatrix<double>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = a3;
  PCGenMatrix<double>::checkColIndex(a1, a3);
  PCGenMatrix<double>::checkRowIndex(a1, a2);
  return *(_QWORD *)(a1 + 24) + 8 * (*(_DWORD *)(a1 + 20) * v3 + *(_DWORD *)(a1 + 16) * (int)a2);
}

uint64_t PCGenVector<double>::operator()(uint64_t a1, uint64_t a2)
{
  PCException *exception;
  PCString v6;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(a1 + 8) <= (int)a2)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenVector index %d out of range %d", &v6, a2, (*(_DWORD *)(a1 + 8) - 1));
    PCException::PCException(exception, &v6);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  return *(_QWORD *)(a1 + 16) + 8 * *(_DWORD *)(a1 + 12) * (int)a2;
}

void sub_1B2973C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void PCException::PCException(PCException *this, const PCString *a2)
{
  *(_QWORD *)this = &off_1E65115B8;
  *((_QWORD *)this + 1) = 0;
  PCString::PCString((PCString *)this + 2, a2);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
}

void sub_1B2973CDC(_Unwind_Exception *a1)
{
  std::exception *v1;
  const void **v2;
  PCString *v3;

  PCString::~PCString(v3);
  PCCFRef<__CFArray const*>::~PCCFRef(v2);
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *PCGenBlockRef<double>::PCGenBlockRef(_QWORD *a1, int a2)
{
  int v3;
  _DWORD *v4;
  _DWORD *v5;

  if (a2)
  {
    v3 = 8 * a2;
    v4 = (_DWORD *)operator new[]();
    v5 = v4 + 2;
    *v4 = v3;
    v4[1] = 1;
    bzero(v4 + 2, v3);
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  return a1;
}

_QWORD *PCGenBlockRef<double>::deref(_QWORD *result)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;

  v1 = *result;
  if (*result)
  {
    v2 = *(_DWORD *)(v1 - 4) - 1;
    *(_DWORD *)(v1 - 4) = v2;
    if (!v2)
    {
      v3 = result;
      result = (_QWORD *)MEMORY[0x1B5E2914C](v1 - 8, 0x1000C8077774924);
      *v3 = 0;
    }
  }
  return result;
}

void PCMatrixErrorException::~PCMatrixErrorException(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void PCMatrixErrorException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCMatrixErrorException"));
}

_DWORD *PCGenMatrix<double>::set<double>(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  __CFString *var0;
  int v28;
  PCException *exception;
  PCException *v30;
  PCString v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;

  if ((_DWORD *)a2 != result)
  {
    v3 = result;
    v4 = result[2];
    if (v4 != *(_DWORD *)(a2 + 8))
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"PCGenMatrix row mismatch %d != %d", &v31, v3[2], *(unsigned int *)(a2 + 8));
      PCException::PCException(exception, &v31);
      *(_QWORD *)exception = &unk_1E6511548;
    }
    v5 = result[3];
    if (v5 != *(_DWORD *)(a2 + 12))
    {
      v30 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"PCGenMatrix col mismatch %d != %d", &v31, v3[3], *(unsigned int *)(a2 + 12));
      PCException::PCException(v30, &v31);
      *(_QWORD *)v30 = &unk_1E6511548;
    }
    v6 = *(_QWORD *)result;
    if (!*(_QWORD *)result)
    {
      result = PCGenMatrix<double>::resize(result, v4, v5, result[5] == 1);
      v6 = *(_QWORD *)v3;
    }
    if (*(_QWORD *)a2 == v6)
    {
      v31.var0 = 0;
      v32 = 0;
      v33 = 0x100000001;
      v34 = 0;
      result = (_DWORD *)PCGenMatrix<double>::set<double>(&v31, a2);
      v17 = v3[2];
      if ((int)v17 >= 1)
      {
        v18 = 0;
        v19 = 0;
        v20 = v3[3];
        v21 = v34;
        v22 = 8 * (int)v33;
        v23 = 8 * SHIDWORD(v33);
        do
        {
          if ((int)v20 >= 1)
          {
            v24 = (_QWORD *)(*((_QWORD *)v3 + 3) + v18 * (int)v3[4]);
            v25 = 8 * (int)v3[5];
            v26 = v20;
            result = v21;
            do
            {
              *v24 = *(_QWORD *)result;
              v24 = (_QWORD *)((char *)v24 + v25);
              result = (_DWORD *)((char *)result + v23);
              --v26;
            }
            while (v26);
          }
          ++v19;
          v18 += 8;
          v21 = (_DWORD *)((char *)v21 + v22);
        }
        while (v19 != v17);
      }
      var0 = v31.var0;
      if (v31.var0)
      {
        v28 = HIDWORD(v31.var0[-1].length) - 1;
        HIDWORD(v31.var0[-1].length) = v28;
        if (!v28)
          return (_DWORD *)MEMORY[0x1B5E2914C](&var0[-1].length, 0x1000C8077774924);
      }
    }
    else
    {
      v7 = v3[2];
      if ((int)v7 >= 1)
      {
        v8 = 0;
        v9 = 0;
        v10 = v3[3];
        v11 = *(_DWORD **)(a2 + 24);
        v12 = 8 * *(int *)(a2 + 16);
        v13 = 8 * *(int *)(a2 + 20);
        do
        {
          if ((int)v10 >= 1)
          {
            v14 = (_QWORD *)(*((_QWORD *)v3 + 3) + v8 * (int)v3[4]);
            v15 = 8 * (int)v3[5];
            v16 = v10;
            result = v11;
            do
            {
              *v14 = *(_QWORD *)result;
              v14 = (_QWORD *)((char *)v14 + v15);
              result = (_DWORD *)((char *)result + v13);
              --v16;
            }
            while (v16);
          }
          ++v9;
          v8 += 8;
          v11 = (_DWORD *)((char *)v11 + v12);
        }
        while (v9 != v7);
      }
    }
  }
  return result;
}

void sub_1B297407C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

uint64_t PCGenMatrix<double>::operator()@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  PCGenMatrix<double>::checkRowIndex(a1, *a2);
  PCGenMatrix<double>::checkRowIndex(a1, a2[1]);
  PCGenMatrix<double>::checkColIndex(a1, *a3);
  result = PCGenMatrix<double>::checkColIndex(a1, a3[1]);
  v10 = *a2;
  v9 = a2[1];
  v12 = *a3;
  v11 = a3[1];
  v14 = *(_DWORD *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 20);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)a1;
  *(_QWORD *)a4 = *(_QWORD *)a1;
  if (v16)
    ++*(_DWORD *)(v16 - 4);
  *(_DWORD *)(a4 + 8) = v9 - v10 + 1;
  *(_DWORD *)(a4 + 12) = v11 - v12 + 1;
  *(_DWORD *)(a4 + 16) = v14;
  *(_DWORD *)(a4 + 20) = v13;
  *(_QWORD *)(a4 + 24) = v15 + 8 * v14 * v10 + 8 * v13 * v12;
  return result;
}

uint64_t PCGenMatrix<double>::checkRowIndex(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  PCException *exception;
  PCString v5;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(result + 8) <= (int)a2)
  {
    v3 = result;
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix row %d out of range 0..%d", &v5, a2, (*(_DWORD *)(v3 + 8) - 1));
    PCException::PCException(exception, &v5);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  return result;
}

void sub_1B2974220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t PCGenMatrix<double>::checkColIndex(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  PCException *exception;
  PCString v5;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(result + 12) <= (int)a2)
  {
    v3 = result;
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix col %d out of range 0..%d", &v5, a2, (*(_DWORD *)(v3 + 12) - 1));
    PCException::PCException(exception, &v5);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  return result;
}

void sub_1B29742F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

double **PCGenVector<double>::PCGenVector(double **a1, uint64_t a2, double a3)
{
  _QWORD *v6;
  double *v7;
  unsigned int v8;
  PCException *exception;
  PCString v11;

  v6 = PCGenBlockRef<double>::PCGenBlockRef(a1, a2);
  *((_DWORD *)v6 + 2) = a2;
  *((_DWORD *)v6 + 3) = 1;
  if ((a2 & 0x80000000) != 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenVector length %d must be nonnegative", &v11, a2);
    PCException::PCException(exception, &v11);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  v7 = *a1;
  a1[2] = *a1;
  if ((_DWORD)a2)
  {
    v8 = a2 + 1;
    do
    {
      *v7++ = a3;
      --v8;
    }
    while (v8 > 1);
  }
  return a1;
}

void sub_1B29743F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  _QWORD *v10;

  PCString::~PCString(&a10);
  PCGenBlockRef<double>::deref(v10);
  _Unwind_Resume(a1);
}

uint64_t PCGenVector<double>::set<double>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  __CFString *v15;
  int v16;
  PCException *exception;
  PCString v19;
  int v20;
  int v21;
  __CFString *var0;

  if (a2 != a1)
  {
    v4 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v4 != *(_DWORD *)(a2 + 8))
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"PCGenVector length mismatch %d != %d", &v19, *(unsigned int *)(a1 + 8), *(unsigned int *)(a2 + 8));
      PCException::PCException(exception, &v19);
      *(_QWORD *)exception = &unk_1E6511548;
    }
    if (*(_QWORD *)a1)
      v5 = *(_QWORD *)a2 == *(_QWORD *)a1;
    else
      v5 = 0;
    if (v5)
    {
      PCGenBlockRef<double>::PCGenBlockRef(&v19, *(_DWORD *)(a1 + 8));
      v20 = v4;
      v21 = 1;
      var0 = v19.var0;
      PCGenVector<double>::set<double>(&v19, a2);
      v10 = *(unsigned int *)(a1 + 8);
      if ((int)v10 >= 1)
      {
        v11 = var0;
        v12 = *(void ***)(a1 + 16);
        v13 = 8 * *(int *)(a1 + 12);
        v14 = 8 * v21;
        do
        {
          *v12 = v11->isa;
          v12 = (void **)((char *)v12 + v13);
          v11 = (__CFString *)((char *)v11 + v14);
          --v10;
        }
        while (v10);
      }
      v15 = v19.var0;
      if (v19.var0)
      {
        v16 = HIDWORD(v19.var0[-1].length) - 1;
        HIDWORD(v19.var0[-1].length) = v16;
        if (!v16)
          MEMORY[0x1B5E2914C](&v15[-1].length, 0x1000C8077774924);
      }
    }
    else if ((int)v4 >= 1)
    {
      v6 = *(_QWORD **)(a2 + 16);
      v7 = *(_QWORD **)(a1 + 16);
      v8 = 8 * *(int *)(a1 + 12);
      v9 = 8 * *(int *)(a2 + 12);
      do
      {
        *v7 = *v6;
        v7 = (_QWORD *)((char *)v7 + v8);
        v6 = (_QWORD *)((char *)v6 + v9);
        --v4;
      }
      while (v4);
    }
  }
  return a1;
}

void sub_1B29745BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0()
{
  JUMPOUT(0x1B5E2914CLL);
}

uint64_t PCGenMatrix<double>::set<double>(uint64_t result)
{
  int v1;

  v1 = *(_DWORD *)(result - 4) - 1;
  *(_DWORD *)(result - 4) = v1;
  if (!v1)
    OUTLINED_FUNCTION_0();
  return result;
}

void PCException::report(const PCString *this)
{
  char *v1;
  char *v2;
  size_t v3;
  const std::locale::facet *v4;
  PCString v5;
  std::locale v6;

  PCException::getInfo(this, &v5);
  v1 = PCString::createCStr(&v5);
  v2 = v1;
  if (v1)
  {
    v3 = strlen(v1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v2, v3);
    free(v2);
  }
  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
  v4 = std::locale::use_facet(&v6, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v6);
  std::ostream::put();
  std::ostream::flush();
  PCString::~PCString(&v5);
}

void sub_1B297472C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  PCString::~PCString((PCString *)&a9);
  _Unwind_Resume(a1);
}

void throw_PCNullPointerException(BOOL a1)
{
  PCNullPointerException *exception;

  exception = (PCNullPointerException *)__cxa_allocate_exception(0x40uLL);
  PCNullPointerException::PCNullPointerException(exception, a1);
}

void sub_1B297478C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void PCException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCException"));
}

void PCNullPointerException::PCNullPointerException(PCNullPointerException *this, int a2)
{
  _QWORD *v4;

  PCException::PCException(this);
  *v4 = &unk_1E65115F8;
  if (a2)
    PCException::addCallStackSymbols(this);
}

void sub_1B2974820(_Unwind_Exception *a1)
{
  PCString *v1;

  PCException::~PCException(v1);
  _Unwind_Resume(a1);
}

void PCException::PCException(PCException *this)
{
  *(_QWORD *)this = &off_1E65115B8;
  *((_QWORD *)this + 1) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 2);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
}

void sub_1B2974890(_Unwind_Exception *a1)
{
  std::exception *v1;
  const void **v2;
  PCString *v3;

  PCString::~PCString(v3);
  PCCFRef<__CFArray const*>::~PCCFRef(v2);
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void PCNullPointerException::~PCNullPointerException(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void PCNullPointerException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCNullPointerException"));
}

void sub_1B2974AA8(void *a1)
{
  objc_begin_catch(a1);
  objc_msgSend(0, "error");
  NSLog(CFSTR("Unable to unarchive data in %s for PCMapRoute due to error: %@"));
  objc_end_catch();
  JUMPOUT(0x1B2974A90);
}

void sub_1B2974AD8(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

CGColorSpaceRef PCCreateExtendedColorSpace@<X0>(CGColorSpace **a1@<X0>, CGColorSpaceRef *a2@<X8>)
{
  CGColorSpaceRef result;

  result = createExtendedColorSpace(*a1);
  *a2 = result;
  return result;
}

CGColorSpaceRef createExtendedColorSpace(CGColorSpace *a1)
{
  CGColorSpaceRef result;
  unsigned __int8 v3;
  CFHashCode v4;

  if (CGColorSpaceUsesExtendedRange(a1))
    return CGColorSpaceRetain(a1);
  if ((v3 & 1) == 0)
  {
    {
      createExtendedColorSpace(CGColorSpace *)::deviceRGB = (uint64_t)CGColorSpaceCreateDeviceRGB();
    }
  }
  v4 = CFHash((CFTypeRef)createExtendedColorSpace(CGColorSpace *)::deviceRGB);
  if (v4 == CFHash(a1))
    return CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  result = CGColorSpaceCreateExtended(a1);
  if (!result)
    return CGColorSpaceRetain(a1);
  return result;
}

void sub_1B2974D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PCInit(void)
{
  unsigned int v0;
  ProCore::Private *v1;
  uint64_t v2;
  double *v3;
  int v4;
  ProCore::Private *v5;
  ProCore::Private *inited;
  OZChannelBase *v7;
  const PCString *v8;
  size_t v9;
  int v10;
  rlimit v11;
  int v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  do
  if (!v0)
  {
    v1 = (ProCore::Private *)getrlimit(8, &v11);
    if (!(_DWORD)v1)
    {
      *(_QWORD *)v12 = 0x1D00000001;
      v10 = 0;
      v9 = 4;
      v1 = (ProCore::Private *)sysctl(v12, 2u, &v10, &v9, 0, 0);
      if (!(_DWORD)v1)
      {
        v4 = v10;
        if (v10 >= 10240)
          v4 = 10240;
        v11.rlim_cur = v4;
        v1 = (ProCore::Private *)setrlimit(8, &v11);
      }
    }
    ProCore::Private::initChromaticityMath(v1, v2, v3);
    inited = (ProCore::Private *)ProCore::Private::initColorSpaceHandle(v5);
    v7 = (OZChannelBase *)ProCore::Private::initColorSpaceCache(inited);
    OZChannelBase::setRangeName(v7, v8);
  }
}

uint64_t PCBitDepth::getBitsPerChannel(int a1)
{
  return PCBitDepth::_bitsPerChannel[a1];
}

uint64_t PCBitDepth::getFromBitsPerChannel(PCBitDepth *this, int a2)
{
  unsigned int v2;

  if (a2)
    v2 = 1;
  else
    v2 = 2;
  if ((_DWORD)this != 16)
    v2 = 0;
  if ((_DWORD)this == 32)
    return 3;
  else
    return v2;
}

uint64_t PCBitmap::sanitizeColorSpace(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  PCInfo *hasRGB;
  uint64_t DefaultRGBCGColorSpace;
  PCInfo *hasGray;

  v3 = a1;
  if (!a1)
  {
    hasRGB = (PCInfo *)PCPixelFormat::hasRGB(a2);
    if ((_DWORD)hasRGB)
    {
      DefaultRGBCGColorSpace = PCInfo::getDefaultRGBCGColorSpace(hasRGB);
    }
    else
    {
      hasGray = (PCInfo *)PCPixelFormat::hasGray(a2);
      if (!(_DWORD)hasGray)
      {
        v3 = 0;
        goto LABEL_8;
      }
      DefaultRGBCGColorSpace = PCInfo::getDefaultGrayscaleCGColorSpace(hasGray);
    }
    v3 = DefaultRGBCGColorSpace;
  }
LABEL_8:
  if ((PCPixelFormat::hasRGB(a2) & 1) == 0 && !PCPixelFormat::hasGray(a2))
    return 0;
  return v3;
}

void PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  int v7;
  unsigned int v8;
  int BitsPerChannel;
  unsigned int v10;
  int NumChannels;
  unsigned int v12;
  CGColorSpace *v13;
  uint64_t v14;

  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  BitsPerChannel = PCPixelFormat::getBitsPerChannel(v8);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  NumChannels = PCPixelFormat::getNumChannels(v10);
  v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  v13 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(a3, v12);
  PCImage::PCImage((PCImage *)a1, v6, v7, BitsPerChannel, NumChannels, v13);
  *(_QWORD *)a1 = &off_1E6511638;
  v14 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 64) = v14;
  *(_DWORD *)(a1 + 24) = 1;
}

uint64_t PCBitmap::PCBitmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v12 = operator new();
  ProCore_Private::PCBitmapRepDefault::PCBitmapRepDefault(v12, a2, a3, a4, a6);
  v15 = v12;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>(a1, &v15, a5);
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v12 = operator new();
  ProCore_Private::PCBitmapRepDefault::PCBitmapRepDefault(v12, a2, a3, a4, a6);
  v15 = v12;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>(a1, &v15, a5);
  v13 = v15;
  v15 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return a1;
}

void sub_1B29750C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_1B29751BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t PCBitmap::PCBitmap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, PCColorSpaceHandle *a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t CGColorSpace;
  uint64_t v14;
  uint64_t v16;

  v12 = operator new();
  ProCore_Private::PCBitmapRepDefault::PCBitmapRepDefault(v12, a2, a3, a4, a6);
  v16 = v12;
  CGColorSpace = PCColorSpaceHandle::getCGColorSpace(a5);
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>(a1, &v16, CGColorSpace);
  v14 = v16;
  v16 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return a1;
}

{
  uint64_t v12;
  uint64_t CGColorSpace;
  uint64_t v14;
  uint64_t v16;

  v12 = operator new();
  ProCore_Private::PCBitmapRepDefault::PCBitmapRepDefault(v12, a2, a3, a4, a6);
  v16 = v12;
  CGColorSpace = PCColorSpaceHandle::getCGColorSpace(a5);
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>(a1, &v16, CGColorSpace);
  v14 = v16;
  v16 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  return a1;
}

void sub_1B29752B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4028F97B41);
  _Unwind_Resume(a1);
}

void sub_1B29753B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4028F97B41);
  _Unwind_Resume(a1);
}

void PCBitmap::copy(PCBitmap *this, PCBitmap *a2)
{
  char v4;
  int v5;
  int v6;
  PCBitmap *v7;
  CGColorSpace *v8;

  PCImage::getColorSpace((PCImage *)a2, &v8);
  (*(void (**)(PCBitmap *, CGColorSpace **))(*(_QWORD *)this + 56))(this, &v8);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
  v4 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
  PCImage::setIsPremultiplied((uint64_t)this, v4);
  v5 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
  v7 = (PCBitmap *)1;
  if (v5 == (*(unsigned int (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2))
  {
    v6 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
    if (v6 == (*(unsigned int (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2))
      v7 = 0;
  }
}

void sub_1B29754DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PCBitmap::PCBitmap(PCBitmap *this, PCBitmap *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t CGColorSpace;
  uint64_t v9;
  uint64_t v10;

  v4 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
  v5 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
  v7 = operator new();
  ProCore_Private::PCBitmapRepDefault::PCBitmapRepDefault(v7, v4, v5, v6, 1);
  v10 = v7;
  CGColorSpace = PCImage::getCGColorSpace((PCImage *)a2);
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)this, &v10, CGColorSpace);
  v9 = v10;
  v10 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  PCBitmap::copy(this, a2);
}

void sub_1B29755D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  PCBitmap *v10;

  PCBitmap::~PCBitmap(v10);
  _Unwind_Resume(a1);
}

void PCBitmap::~PCBitmap(PCBitmap *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCBitmap::getRepresentation(PCBitmap *this)
{
  return *((_QWORD *)this + 8);
}

unint64_t PCBitmap::getSize(PCBitmap *this)
{
  unsigned int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
  return (*(unsigned int (**)(PCBitmap *))(*(_QWORD *)this + 24))(this) * (unint64_t)v2;
}

uint64_t PCBitmap::getBytesPerRow(PCBitmap *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
}

uint64_t PCBitmap::getAllocationSize(PCBitmap *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 24))(*((_QWORD *)this + 8));
}

uint64_t PCBitmap::getWidth(PCBitmap *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
}

uint64_t PCBitmap::getHeight(PCBitmap *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8));
}

void PCBitmap::copyWithColorSpaceConversion(PCBitmap *this, PCBitmap *a2)
{
}

void `anonymous namespace'::copyBitmapImageUsingCG(_anonymous_namespace_ *this, PCBitmap *a2, PCBitmap *a3)
{
  int v3;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  const PCColorSpaceHandle *v11;
  BOOL isSameColorSpace;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  void *v19;
  const void *v20;
  size_t v21;
  unsigned int v22;
  PCBitmap *v23;
  char *v24;
  char *v25;
  unsigned int v26;
  int BytesPerPixel;
  uint64_t v28;
  size_t v29;
  PCBitmap *v30;
  unsigned int v31;
  int hasAlpha;
  unsigned int v33;
  int v34;
  unsigned int v35;
  const PCBitmap *v36;
  _anonymous_namespace_ *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  CGColorSpace *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  CGImageRef v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  double v52;
  int i;
  uint64_t v54;
  uint64_t v55;
  float v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  CGColorSpace *v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  CGImageRef v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int j;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned int v74;
  float v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  CGColorSpace *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  CGImageRef v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  unsigned int v88;
  unsigned int v89;
  int k;
  uint64_t v91;
  unsigned __int8 *v92;
  unsigned int v93;
  float v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  CGColorSpace *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  CGImageRef v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  double v109;
  int m;
  uint64_t v111;
  uint64_t v112;
  float v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  CGColorSpace *v117;
  std::__shared_weak_count *v118;
  unint64_t *v119;
  unint64_t v120;
  CGImageRef v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  unsigned int v126;
  unsigned int v127;
  double v128;
  int n;
  uint64_t v130;
  uint64_t v131;
  float v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  CGColorSpace *v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  CGImageRef v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  unsigned int v145;
  unsigned int v146;
  double v147;
  int ii;
  uint64_t v149;
  int v150;
  float v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  CGColorSpace *v155;
  std::__shared_weak_count *v156;
  unint64_t *v157;
  unint64_t v158;
  CGImageRef v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  double v166;
  int jj;
  uint64_t v168;
  uint64_t v169;
  float v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  CGColorSpace *v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  CGImageRef v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  unsigned int v183;
  unsigned int v184;
  int kk;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  CGColorSpace *v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  CGImageRef v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  unsigned int v199;
  unsigned int v200;
  int mm;
  uint64_t v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  CGColorSpace *v206;
  std::__shared_weak_count *v207;
  unint64_t *v208;
  unint64_t v209;
  CGImageRef v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  int v214;
  unsigned int v215;
  unsigned int v216;
  int nn;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  CGColorSpace *v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  CGImageRef v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  int v230;
  unsigned int v231;
  unsigned int v232;
  int i1;
  uint64_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  CGColorSpace *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  CGImageRef v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v246;
  unsigned int v247;
  unsigned int v248;
  int i2;
  uint64_t v250;
  int v251;
  __int128 v252;
  std::__shared_weak_count *v253;
  unint64_t *p_shared_owners;
  unint64_t v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  unsigned int v259;
  uint64_t v260;
  uint64_t v261;
  _anonymous_namespace_ *v262;
  _anonymous_namespace_ *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  CGColorSpace *CGColorSpace;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  unsigned int v279;
  PCBitmap *v280;
  PCBitmap *v281;
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  std::__shared_weak_count *v288;
  unint64_t *v289;
  unint64_t v290;
  std::__shared_weak_count *v291;
  unint64_t *v292;
  unint64_t v293;
  __int128 v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  std::__shared_weak_count *v298;
  unint64_t *v299;
  unint64_t v300;
  unsigned int v301;
  unsigned int v302;
  std::__shared_weak_count *v303;
  unint64_t *v304;
  unint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  std::__shared_weak_count *v309;
  unint64_t *v310;
  unint64_t v311;
  std::__shared_weak_count *v312;
  unint64_t *v313;
  unint64_t v314;
  std::__shared_weak_count *v315;
  unint64_t *v316;
  unint64_t v317;
  std::__shared_weak_count *v318;
  unint64_t *v319;
  unint64_t v320;
  int v321;
  __int128 v322;
  PCImage *v323[2];
  __int128 v324;
  CGImageRef image[2];
  PCBitmap *v326[2];
  __int128 v327;
  __int128 v328;
  CGRect v329;
  CGRect v330;

  v3 = (int)a3;
  if (!(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this)
    || !(*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this)
    || !(*(unsigned int (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2)
    || !(*(unsigned int (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2))
  {
    return;
  }
  v6 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
  v7 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
  v8 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
  v9 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
  if (v6 == v8 && v7 == v9)
  {
    PCImage::getColorSpace(this, (CGColorSpace **)&v328);
    PCImage::getColorSpace((PCImage *)a2, (CGColorSpace **)&v327);
    isSameColorSpace = PCColorSpaceHandle::isSameColorSpace((CGColorSpace **)&v328, (CGColorSpace **)&v327, v11);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v327);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v328);
    if (isSameColorSpace)
    {
      v13 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      if (v13 == (*(unsigned int (**)(PCBitmap *))(*(_QWORD *)a2 + 48))(a2))
      {
        v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
        v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
        if (v14 == v15)
        {
          v16 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v17 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
          v18 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          if (v18 == (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8)))
          {
            v19 = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
            v20 = (const void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
            v21 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this);
            memcpy(v19, v20, v21);
          }
          else
          {
            v24 = (char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
            v25 = (char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
            v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
            BytesPerPixel = PCPixelFormat::getBytesPerPixel(v26);
            if (v7)
            {
              v28 = v7;
              v29 = (BytesPerPixel * v6);
              do
              {
                memcpy(v25, v24, v29);
                v24 += v16;
                v25 += v17;
                --v28;
              }
              while (v28);
            }
          }
          return;
        }
        v22 = v15;
        if (PCPixelFormat::hasRGB(v14) && PCPixelFormat::hasRGB(v22))
        {
          if (PCPixelFormat::is32Bit(v14) && PCPixelFormat::is32Bit(v22))
          {
            return;
          }
          if (PCPixelFormat::is8Bit(v14) && PCPixelFormat::is8Bit(v22))
          {
            return;
          }
        }
      }
    }
  }
  v327 = 0uLL;
  v326[0] = 0;
  v326[1] = 0;
  v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
  hasAlpha = PCPixelFormat::hasAlpha(v31);
  v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
  if (PCPixelFormat::hasGray(v33))
    v34 = PCPixelFormat::hasAlpha(v33);
  else
    v34 = 0;
  v35 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
  if (v35 > 0x11 || (v37 = this, ((1 << v35) & 0x3C1AE) == 0))
  {
    v327 = v328;
    v37 = (_anonymous_namespace_ *)v328;
  }
  if ((hasAlpha & v34) == 1)
  {
    v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
    image[0] = 0;
    image[1] = 0;
    v321 = v34;
    switch(v38)
    {
      case 2:
        v39 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v40 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v41 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 1u);
        PCCreateBitmap(v41, v39, v40, 1, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v42 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v43 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = image[0];
        v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v45 + 8) + 16))(*((_QWORD *)v45 + 8));
        v48 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v49 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v50 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v51 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v45 + 8) + 64))(*((_QWORD *)v45 + 8));
        v34 = v321;
        if (v49)
        {
          for (i = 0; i != v49; ++i)
          {
            if (v48)
            {
              v54 = 0;
              v55 = 1;
              do
              {
                LOBYTE(v52) = *(_BYTE *)(v46 + v55);
                v56 = (double)*(unint64_t *)&v52 * 0.00392156863;
                v52 = (float)(v56 * 255.0) + 0.5 + 0.0000001;
                v57 = vcvtmd_s64_f64(v52);
                if (v57 >= 255)
                  v57 = 255;
                *(_BYTE *)(v47 + v54++) = v57 & ~(v57 >> 31);
                v55 += 2;
              }
              while (v48 != (_DWORD)v54);
            }
            v46 += v50;
            v47 += v51;
          }
        }
        break;
      case 3:
        v58 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v59 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v60 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 1u);
        PCCreateBitmap(v60, v58, v59, 1, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v61 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v62 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        v64 = image[0];
        v65 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v66 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v64 + 8) + 16))(*((_QWORD *)v64 + 8));
        v67 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v68 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v69 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v70 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v64 + 8) + 64))(*((_QWORD *)v64 + 8));
        v34 = v321;
        if (v68)
        {
          for (j = 0; j != v68; ++j)
          {
            if (v67)
            {
              v72 = 0;
              v73 = (unsigned __int8 *)v65;
              do
              {
                v74 = *v73;
                v73 += 4;
                v75 = (double)v74 * 0.00392156863;
                v76 = vcvtmd_s64_f64((float)(v75 * 255.0) + 0.5 + 0.0000001);
                if (v76 >= 255)
                  v76 = 255;
                *(_BYTE *)(v66 + v72++) = v76 & ~(v76 >> 31);
              }
              while (v67 != (_DWORD)v72);
            }
            v65 += v69;
            v66 += v70;
          }
        }
        break;
      case 4:
        v77 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v78 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v79 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 1u);
        PCCreateBitmap(v79, v77, v78, 1, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v80 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v81 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        v83 = image[0];
        v84 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v85 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v83 + 8) + 16))(*((_QWORD *)v83 + 8));
        v86 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v87 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v88 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v89 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v83 + 8) + 64))(*((_QWORD *)v83 + 8));
        v34 = v321;
        if (v87)
        {
          for (k = 0; k != v87; ++k)
          {
            if (v86)
            {
              v91 = 0;
              v92 = (unsigned __int8 *)v84;
              do
              {
                v93 = *v92;
                v92 += 4;
                v94 = (double)v93 * 0.00392156863;
                v95 = vcvtmd_s64_f64((float)(v94 * 255.0) + 0.5 + 0.0000001);
                if (v95 >= 255)
                  v95 = 255;
                *(_BYTE *)(v85 + v91++) = v95 & ~(v95 >> 31);
              }
              while (v86 != (_DWORD)v91);
            }
            v84 += v88;
            v85 += v89;
          }
        }
        break;
      case 5:
        v96 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v97 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v98 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 1u);
        PCCreateBitmap(v98, v96, v97, 1, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v99 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v100 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        v102 = image[0];
        v103 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v104 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v102 + 8) + 16))(*((_QWORD *)v102 + 8));
        v105 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v106 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v107 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v108 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v102 + 8) + 64))(*((_QWORD *)v102 + 8));
        v34 = v321;
        if (v106)
        {
          for (m = 0; m != v106; ++m)
          {
            if (v105)
            {
              v111 = 0;
              v112 = 3;
              do
              {
                LOBYTE(v109) = *(_BYTE *)(v103 + v112);
                v113 = (double)*(unint64_t *)&v109 * 0.00392156863;
                v109 = (float)(v113 * 255.0) + 0.5 + 0.0000001;
                v114 = vcvtmd_s64_f64(v109);
                if (v114 >= 255)
                  v114 = 255;
                *(_BYTE *)(v104 + v111++) = v114 & ~(v114 >> 31);
                v112 += 4;
              }
              while (v105 != (_DWORD)v111);
            }
            v103 += v107;
            v104 += v108;
          }
        }
        break;
      case 6:
        v115 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v116 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v117 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 1u);
        PCCreateBitmap(v117, v115, v116, 1, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v118 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v119 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v120 = __ldaxr(v119);
          while (__stlxr(v120 - 1, v119));
          if (!v120)
          {
            ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
            std::__shared_weak_count::__release_weak(v118);
          }
        }
        v121 = image[0];
        v122 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v123 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v121 + 8) + 16))(*((_QWORD *)v121 + 8));
        v124 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v125 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v126 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v127 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v121 + 8) + 64))(*((_QWORD *)v121 + 8));
        v34 = v321;
        if (v125)
        {
          for (n = 0; n != v125; ++n)
          {
            if (v124)
            {
              v130 = 0;
              v131 = 3;
              do
              {
                LOBYTE(v128) = *(_BYTE *)(v122 + v131);
                v132 = (double)*(unint64_t *)&v128 * 0.00392156863;
                v128 = (float)(v132 * 255.0) + 0.5 + 0.0000001;
                v133 = vcvtmd_s64_f64(v128);
                if (v133 >= 255)
                  v133 = 255;
                *(_BYTE *)(v123 + v130++) = v133 & ~(v133 >> 31);
                v131 += 4;
              }
              while (v124 != (_DWORD)v130);
            }
            v122 += v126;
            v123 += v127;
          }
        }
        break;
      case 8:
        v134 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v135 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v136 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 7u);
        PCCreateBitmap(v136, v134, v135, 7, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v137 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v138 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v139 = __ldaxr(v138);
          while (__stlxr(v139 - 1, v138));
          if (!v139)
          {
            ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
            std::__shared_weak_count::__release_weak(v137);
          }
        }
        v140 = image[0];
        v141 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v142 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v140 + 8) + 16))(*((_QWORD *)v140 + 8));
        v143 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v144 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v145 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v146 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v140 + 8) + 64))(*((_QWORD *)v140 + 8));
        v34 = v321;
        if (v144)
        {
          for (ii = 0; ii != v144; ++ii)
          {
            if (v143)
            {
              v149 = 0;
              v150 = v143;
              do
              {
                LOWORD(v147) = *(_WORD *)(v141 + 2 * v149 + 2);
                v151 = (double)*(unint64_t *)&v147 * 0.0000152590219;
                v147 = (float)(v151 * 65535.0) + 0.5 + 0.0000001;
                v152 = vcvtmd_s64_f64(v147);
                if (v152 >= 0xFFFF)
                  v152 = 0xFFFF;
                *(_WORD *)(v142 + v149) = v152 & ~(unsigned __int16)(v152 >> 31);
                v149 += 2;
                --v150;
              }
              while (v150);
            }
            v141 += v145;
            v142 += v146;
          }
        }
        break;
      case 10:
        v153 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v154 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v155 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 7u);
        PCCreateBitmap(v155, v153, v154, 7, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v156 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v157 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v158 = __ldaxr(v157);
          while (__stlxr(v158 - 1, v157));
          if (!v158)
          {
            ((void (*)(std::__shared_weak_count *))v156->__on_zero_shared)(v156);
            std::__shared_weak_count::__release_weak(v156);
          }
        }
        v159 = image[0];
        v160 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v161 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v159 + 8) + 16))(*((_QWORD *)v159 + 8));
        v162 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v163 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v164 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v165 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v159 + 8) + 64))(*((_QWORD *)v159 + 8));
        v34 = v321;
        if (v163)
        {
          for (jj = 0; jj != v163; ++jj)
          {
            if (v162)
            {
              v168 = 0;
              v169 = 6;
              do
              {
                LOWORD(v166) = *(_WORD *)(v160 + v169);
                v170 = (double)*(unint64_t *)&v166 * 0.0000152590219;
                v166 = (float)(v170 * 65535.0) + 0.5 + 0.0000001;
                v171 = vcvtmd_s64_f64(v166);
                if (v171 >= 0xFFFF)
                  v171 = 0xFFFF;
                *(_WORD *)(v161 + 2 * v168++) = v171 & ~(unsigned __int16)(v171 >> 31);
                v169 += 8;
              }
              while (v162 != (_DWORD)v168);
            }
            v160 += v164;
            v161 += v165;
          }
        }
        break;
      case 12:
        v172 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v173 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v174 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 0xEu);
        PCCreateBitmap(v174, v172, v173, 14, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v175 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v176 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v177 = __ldaxr(v176);
          while (__stlxr(v177 - 1, v176));
          if (!v177)
          {
            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
            std::__shared_weak_count::__release_weak(v175);
          }
        }
        v178 = image[0];
        v179 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v180 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v178 + 8) + 16))(*((_QWORD *)v178 + 8));
        v181 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v182 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v183 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v184 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v178 + 8) + 64))(*((_QWORD *)v178 + 8));
        v34 = v321;
        if (v182)
        {
          for (kk = 0; kk != v182; ++kk)
          {
            if (v181)
            {
              v186 = 0;
              v187 = v181;
              do
              {
                *(float *)(v180 + v186) = half::_toFloat[*(unsigned __int16 *)(v179 + v186 + 2)];
                v186 += 4;
                --v187;
              }
              while (v187);
            }
            v179 += v183;
            v180 += v184;
          }
        }
        break;
      case 13:
        v188 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v189 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v190 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 0xEu);
        PCCreateBitmap(v190, v188, v189, 14, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v191 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v192 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v193 = __ldaxr(v192);
          while (__stlxr(v193 - 1, v192));
          if (!v193)
          {
            ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
            std::__shared_weak_count::__release_weak(v191);
          }
        }
        v194 = image[0];
        v195 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v196 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v194 + 8) + 16))(*((_QWORD *)v194 + 8));
        v197 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v198 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v199 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v200 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v194 + 8) + 64))(*((_QWORD *)v194 + 8));
        v34 = v321;
        if (v198)
        {
          for (mm = 0; mm != v198; ++mm)
          {
            if (v197)
            {
              v202 = 0;
              v203 = v197;
              do
              {
                *(float *)(v196 + v202) = half::_toFloat[*(unsigned __int16 *)(v195 + 2 * v202 + 6)];
                v202 += 4;
                --v203;
              }
              while (v203);
            }
            v195 += v199;
            v196 += v200;
          }
        }
        break;
      case 15:
        v204 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v205 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v206 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 0xEu);
        PCCreateBitmap(v206, v204, v205, 14, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v207 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v208 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v209 = __ldaxr(v208);
          while (__stlxr(v209 - 1, v208));
          if (!v209)
          {
            ((void (*)(std::__shared_weak_count *))v207->__on_zero_shared)(v207);
            std::__shared_weak_count::__release_weak(v207);
          }
        }
        v210 = image[0];
        v211 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v212 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v210 + 8) + 16))(*((_QWORD *)v210 + 8));
        v213 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v214 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v215 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v216 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v210 + 8) + 64))(*((_QWORD *)v210 + 8));
        v34 = v321;
        if (v214)
        {
          for (nn = 0; nn != v214; ++nn)
          {
            if (v213)
            {
              v218 = 0;
              v219 = 4;
              do
              {
                *(_DWORD *)(v212 + 4 * v218++) = *(_DWORD *)(v211 + v219);
                v219 += 8;
              }
              while (v213 != (_DWORD)v218);
            }
            v211 += v215;
            v212 += v216;
          }
        }
        break;
      case 16:
        v220 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v221 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v222 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 0xEu);
        PCCreateBitmap(v222, v220, v221, 14, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v223 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v224 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v225 = __ldaxr(v224);
          while (__stlxr(v225 - 1, v224));
          if (!v225)
          {
            ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
            std::__shared_weak_count::__release_weak(v223);
          }
        }
        v226 = image[0];
        v227 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v228 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v226 + 8) + 16))(*((_QWORD *)v226 + 8));
        v229 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v230 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v231 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v232 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v226 + 8) + 64))(*((_QWORD *)v226 + 8));
        v34 = v321;
        if (v230)
        {
          for (i1 = 0; i1 != v230; ++i1)
          {
            if (v229)
            {
              v234 = 0;
              v235 = v229;
              do
              {
                *(_DWORD *)(v228 + v234) = *(_DWORD *)(v227 + 4 * v234 + 12);
                v234 += 4;
                --v235;
              }
              while (v235);
            }
            v227 += v231;
            v228 += v232;
          }
        }
        break;
      case 17:
        v236 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v237 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v238 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, 0xEu);
        PCCreateBitmap(v238, v236, v237, 14, 1, (uint64_t)&v328);
        std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)image, &v328);
        v239 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
        if (*((_QWORD *)&v328 + 1))
        {
          v240 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
          do
            v241 = __ldaxr(v240);
          while (__stlxr(v241 - 1, v240));
          if (!v241)
          {
            ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
            std::__shared_weak_count::__release_weak(v239);
          }
        }
        v242 = image[0];
        v243 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v244 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v242 + 8) + 16))(*((_QWORD *)v242 + 8));
        v245 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v246 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v247 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v248 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v242 + 8) + 64))(*((_QWORD *)v242 + 8));
        v34 = v321;
        if (v246)
        {
          for (i2 = 0; i2 != v246; ++i2)
          {
            if (v245)
            {
              v250 = 0;
              v251 = v245;
              do
              {
                *(_DWORD *)(v244 + v250) = *(_DWORD *)(v243 + 4 * v250);
                v250 += 4;
                --v251;
              }
              while (v251);
            }
            v243 += v247;
            v244 += v248;
          }
        }
        break;
      default:
        break;
    }
    v252 = *(_OWORD *)image;
    image[0] = 0;
    image[1] = 0;
    v253 = (std::__shared_weak_count *)v326[1];
    *(_OWORD *)v326 = v252;
    if (v253)
    {
      p_shared_owners = (unint64_t *)&v253->__shared_owners_;
      do
        v255 = __ldaxr(p_shared_owners);
      while (__stlxr(v255 - 1, p_shared_owners));
      if (!v255)
      {
        ((void (*)(std::__shared_weak_count *))v253->__on_zero_shared)(v253);
        std::__shared_weak_count::__release_weak(v253);
      }
    }
    v256 = (std::__shared_weak_count *)image[1];
    if (image[1])
    {
      v257 = (unint64_t *)((char *)image[1] + 8);
      do
        v258 = __ldaxr(v257);
      while (__stlxr(v258 - 1, v257));
      if (!v258)
      {
        ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
        std::__shared_weak_count::__release_weak(v256);
      }
    }
  }
  v324 = 0uLL;
  v259 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
  if (v259 > 0x10)
    goto LABEL_205;
  if (((1 << v259) & 0x10428) != 0)
  {
    if (((*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 48))(a2) & 1) == 0)
    {
LABEL_205:
      v328 = 0uLL;
      switch((*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8)))
      {
        case 2u:
          v260 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
          v261 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
          PCImage::getColorSpace((PCImage *)a2, (CGColorSpace **)&v322);
          PCCreateBitmap(v260, v261, 1, (PCColorSpaceHandle *)&v322, 1, (uint64_t)v323);
          goto LABEL_216;
        case 3u:
        case 5u:
        case 0x10u:
          v271 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
          v272 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
          v273 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
          PCImage::getColorSpace((PCImage *)a2, (CGColorSpace **)&v322);
          PCCreateBitmap(v271, v272, v273, (PCColorSpaceHandle *)&v322, 1, (uint64_t)v323);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v322);
          PCImage::setIsPremultiplied((uint64_t)v323[0], 1);
          break;
        case 4u:
        case 6u:
          v264 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
          v265 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
          PCImage::getColorSpace((PCImage *)a2, (CGColorSpace **)&v322);
          PCCreateBitmap(v264, v265, 3, (PCColorSpaceHandle *)&v322, 1, (uint64_t)v323);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v322);
          PCImage::setIsPremultiplied((uint64_t)v323[0], 1);
          break;
        case 8u:
          v266 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
          v267 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
          CGColorSpace = (CGColorSpace *)PCImage::getCGColorSpace((PCImage *)a2);
          PCCreateBitmap(CGColorSpace, v266, v267, 7, 1, (uint64_t)v323);
          PCImage::setIsPremultiplied((uint64_t)v323[0], 1);
          break;
        case 9u:
        case 0xAu:
          v274 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
          v275 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
          PCImage::getColorSpace((PCImage *)a2, (CGColorSpace **)&v322);
          PCCreateBitmap(v274, v275, 10, (PCColorSpaceHandle *)&v322, 1, (uint64_t)v323);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v322);
          PCImage::setIsPremultiplied((uint64_t)v323[0], 1);
          break;
        case 0xBu:
        case 0xCu:
        case 0xFu:
          v276 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
          v277 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
          PCImage::getColorSpace((PCImage *)a2, (CGColorSpace **)&v322);
          PCCreateBitmap(v276, v277, 14, (PCColorSpaceHandle *)&v322, 1, (uint64_t)v323);
LABEL_216:
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v322);
          break;
        case 0xDu:
        case 0x11u:
          v269 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
          v270 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
          PCImage::getColorSpace((PCImage *)a2, (CGColorSpace **)&v322);
          PCCreateBitmap(v269, v270, 16, (PCColorSpaceHandle *)&v322, 1, (uint64_t)v323);
          PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v322);
          PCImage::setIsPremultiplied((uint64_t)v323[0], 1);
          break;
        default:
          v323[0] = 0;
          v323[1] = 0;
          break;
      }
      v324 = *(_OWORD *)v323;
      v262 = v323[0];
      v263 = v323[0];
      goto LABEL_218;
    }
  }
  else if (((1 << v259) & 0x4082) == 0)
  {
    goto LABEL_205;
  }
  v262 = 0;
  v263 = (_anonymous_namespace_ *)a2;
LABEL_218:
  if (v3)
    CGContextSetInterpolationQuality((CGContextRef)v328, kCGInterpolationHigh);
  v278 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v263 + 16))(v263);
  v279 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v263 + 24))(v263);
  CGContextSetBlendMode((CGContextRef)v328, kCGBlendModeCopy);
  v329.size.width = (double)v278;
  v329.size.height = (double)v279;
  v329.origin.x = 0.0;
  v329.origin.y = 0.0;
  CGContextDrawImage((CGContextRef)v328, v329, image[0]);
  if (v326[0])
  {
    v282 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
    if (v282 != (*(unsigned int (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2)
      || (v283 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this),
          v283 != (*(unsigned int (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2)))
    {
      v284 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
      v285 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
      v286 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v326[0] + 8) + 48))(*((_QWORD *)v326[0] + 8));
      PCImage::getColorSpace((PCImage *)v326[0], (CGColorSpace **)&v322);
      PCCreateBitmap(v284, v285, v286, (PCColorSpaceHandle *)&v322, 1, (uint64_t)v323);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v322);
      v287 = v322;
      v322 = 0uLL;
      v288 = (std::__shared_weak_count *)image[1];
      *(_OWORD *)image = v287;
      if (v288)
      {
        v289 = (unint64_t *)&v288->__shared_owners_;
        do
          v290 = __ldaxr(v289);
        while (__stlxr(v290 - 1, v289));
        if (!v290)
        {
          ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
          std::__shared_weak_count::__release_weak(v288);
        }
      }
      v291 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
      if (*((_QWORD *)&v322 + 1))
      {
        v292 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
        do
          v293 = __ldaxr(v292);
        while (__stlxr(v293 - 1, v292));
        if (!v293)
        {
          ((void (*)(std::__shared_weak_count *))v291->__on_zero_shared)(v291);
          std::__shared_weak_count::__release_weak(v291);
        }
      }
      v294 = v322;
      v322 = 0uLL;
      v295 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
      v328 = v294;
      if (v295)
      {
        v296 = (unint64_t *)&v295->__shared_owners_;
        do
          v297 = __ldaxr(v296);
        while (__stlxr(v297 - 1, v296));
        if (!v297)
        {
          ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
          std::__shared_weak_count::__release_weak(v295);
        }
      }
      v298 = (std::__shared_weak_count *)*((_QWORD *)&v322 + 1);
      if (*((_QWORD *)&v322 + 1))
      {
        v299 = (unint64_t *)(*((_QWORD *)&v322 + 1) + 8);
        do
          v300 = __ldaxr(v299);
        while (__stlxr(v300 - 1, v299));
        if (!v300)
        {
          ((void (*)(std::__shared_weak_count *))v298->__on_zero_shared)(v298);
          std::__shared_weak_count::__release_weak(v298);
        }
      }
      if (v3)
        CGContextSetInterpolationQuality((CGContextRef)v328, kCGInterpolationHigh);
      v301 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v263 + 16))(v263);
      v302 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)v263 + 24))(v263);
      CGContextSetBlendMode((CGContextRef)v328, kCGBlendModeCopy);
      v330.size.width = (double)v301;
      v330.size.height = (double)v302;
      v330.origin.x = 0.0;
      v330.origin.y = 0.0;
      CGContextDrawImage((CGContextRef)v328, v330, image[0]);
      std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v326, (uint64_t *)v323);
      v303 = (std::__shared_weak_count *)v323[1];
      if (v323[1])
      {
        v304 = (unint64_t *)((char *)v323[1] + 8);
        do
          v305 = __ldaxr(v304);
        while (__stlxr(v305 - 1, v304));
        if (!v305)
        {
          ((void (*)(std::__shared_weak_count *))v303->__on_zero_shared)(v303);
          std::__shared_weak_count::__release_weak(v303);
        }
      }
      v262 = (_anonymous_namespace_ *)v324;
    }
  }
  if (v262)
  {
    if (v34)
    else
  }
  v306 = (std::__shared_weak_count *)*((_QWORD *)&v328 + 1);
  if (*((_QWORD *)&v328 + 1))
  {
    v307 = (unint64_t *)(*((_QWORD *)&v328 + 1) + 8);
    do
      v308 = __ldaxr(v307);
    while (__stlxr(v308 - 1, v307));
    if (!v308)
    {
      ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
      std::__shared_weak_count::__release_weak(v306);
    }
  }
  v309 = (std::__shared_weak_count *)*((_QWORD *)&v324 + 1);
  if (*((_QWORD *)&v324 + 1))
  {
    v310 = (unint64_t *)(*((_QWORD *)&v324 + 1) + 8);
    do
      v311 = __ldaxr(v310);
    while (__stlxr(v311 - 1, v310));
    if (!v311)
    {
      ((void (*)(std::__shared_weak_count *))v309->__on_zero_shared)(v309);
      std::__shared_weak_count::__release_weak(v309);
    }
  }
  v312 = (std::__shared_weak_count *)image[1];
  if (image[1])
  {
    v313 = (unint64_t *)((char *)image[1] + 8);
    do
      v314 = __ldaxr(v313);
    while (__stlxr(v314 - 1, v313));
    if (!v314)
    {
      ((void (*)(std::__shared_weak_count *))v312->__on_zero_shared)(v312);
      std::__shared_weak_count::__release_weak(v312);
    }
  }
  v315 = (std::__shared_weak_count *)v326[1];
  if (v326[1])
  {
    v316 = (unint64_t *)((char *)v326[1] + 8);
    do
      v317 = __ldaxr(v316);
    while (__stlxr(v317 - 1, v316));
    if (!v317)
    {
      ((void (*)(std::__shared_weak_count *))v315->__on_zero_shared)(v315);
      std::__shared_weak_count::__release_weak(v315);
    }
  }
  v318 = (std::__shared_weak_count *)*((_QWORD *)&v327 + 1);
  if (*((_QWORD *)&v327 + 1))
  {
    v319 = (unint64_t *)(*((_QWORD *)&v327 + 1) + 8);
    do
      v320 = __ldaxr(v319);
    while (__stlxr(v320 - 1, v319));
    if (!v320)
    {
      ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
      std::__shared_weak_count::__release_weak(v318);
    }
  }
}

void sub_1B2977884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  CGColorSpace *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  uint64_t v16;
  va_list va3;
  uint64_t v18;
  va_list va4;

  va_start(va4, a3);
  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, CGColorSpace *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v16 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v3 - 96);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va4);
  _Unwind_Resume(a1);
}

void PCBitmap::flip(PCBitmap *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  unsigned int v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *__dst[3];

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v4 = (*(unsigned int (**)(PCBitmap *))(*(_QWORD *)this + 24))(this) - 1;
  v5 = (char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v6 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
  v8 = PCPixelFormat::getBytesPerPixel(v7) * v6;
  std::vector<unsigned char>::vector(__dst, v8);
  v9 = __dst[0];
  if ((unint64_t)v5 < v3 + v4 * (unint64_t)v2)
  {
    v10 = v4 * (unint64_t)v2;
    v11 = (v4 - 1) * v2;
    do
    {
      memcpy(v9, (const void *)(v3 + v10), v8);
      memcpy((void *)(v3 + v10), v5, v8);
      v9 = __dst[0];
      memcpy(v5, __dst[0], v8);
      v5 += v2;
      v12 = v3 + v11;
      v3 -= v2;
    }
    while ((unint64_t)v5 < v12);
  }
  if (v9)
  {
    __dst[1] = v9;
    operator delete(v9);
  }
}

void PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void *PCBitmap::copyDataToBitmap(PCBitmap *this, char *a2)
{
  int v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  size_t v8;
  void *result;
  uint64_t v10;

  v4 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
  v5 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
  v6 = (char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
  v8 = PCPixelFormat::getBytesPerPixel(v7) * v4;
  result = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
  if ((_DWORD)v8 == (_DWORD)result)
    return memcpy(v6, a2, v8 * (unint64_t)v5);
  if (v5)
  {
    v10 = result;
    do
    {
      result = memcpy(v6, a2, v8);
      a2 += v8;
      v6 += v10;
      --v5;
    }
    while (v5);
  }
  return result;
}

uint64_t PCBitmap::swizzleTo(_QWORD **a1, int a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  vImage_Buffer v11;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1[8] + 48))(a1[8]);
  if (PCPixelFormat::isFloat(v4))
  {
    v11.data = (void *)(*(uint64_t (**)(_QWORD *))(*a1[8] + 16))(a1[8]);
    v11.height = ((unsigned int (*)(_QWORD **))(*a1)[3])(a1);
    v11.width = ((unsigned int (*)(_QWORD **))(*a1)[2])(a1);
    v11.rowBytes = (*(unsigned int (**)(_QWORD *))(*a1[8] + 64))(a1[8]);
    v5 = (*(uint64_t (**)(_QWORD *))(*a1[8] + 48))(a1[8]);
    v6 = 0;
    if (v5 > 5)
    {
      if (v5 == 6)
      {
        v6 = 3;
        goto LABEL_19;
      }
      if (v5 != 16)
        goto LABEL_19;
    }
    else
    {
      if (v5 == 4)
      {
        v6 = 2;
        goto LABEL_19;
      }
      if (v5 != 5)
      {
LABEL_19:
        if (a2 == 1)
          v9 = 16;
        else
          v9 = 17;
        return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[8] + 56))(a1[8], v9);
      }
    }
    v6 = 1;
    goto LABEL_19;
  }
  v11.data = (void *)(*(uint64_t (**)(_QWORD *))(*a1[8] + 16))(a1[8]);
  v11.height = ((unsigned int (*)(_QWORD **))(*a1)[3])(a1);
  v11.width = ((unsigned int (*)(_QWORD **))(*a1)[2])(a1);
  v11.rowBytes = (*(unsigned int (**)(_QWORD *))(*a1[8] + 64))(a1[8]);
  v7 = (*(uint64_t (**)(_QWORD *))(*a1[8] + 48))(a1[8]);
  v8 = 0;
  if (v7 > 5)
  {
    if (v7 == 6)
    {
      v8 = 3;
      goto LABEL_23;
    }
    if (v7 != 16)
      goto LABEL_23;
LABEL_15:
    v8 = 1;
    goto LABEL_23;
  }
  if (v7 == 4)
  {
    v8 = 2;
    goto LABEL_23;
  }
  if (v7 == 5)
    goto LABEL_15;
LABEL_23:
  if ((a2 - 1) > 2)
    v9 = 3;
  else
    v9 = dword_1B30585F8[a2 - 1];
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[8] + 56))(a1[8], v9);
}

uint64_t PCBitmap::dumpImage(PCBitmap *this, int a2, int a3)
{
  _QWORD *v5;
  const char *p_p;
  const __CFDictionary *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  PCString v16;
  void *__p;
  char v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  if (a3 == -1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"/tmp/PCBitmap", 13);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"/tmp/PCBitmap_", 14);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"_", 1);
  }
  time(0);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)".png", 4);
  std::stringbuf::str();
  if (v18 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  PCString::PCString(&v16, p_p);
  PCPrint("%s: %s, %s\n", v8, v9, v10, v11, v12, v13, v14, (char)"PCBitmap::dumpImage");
  PCString::~PCString(&v16);
  if (v18 < 0)
    operator delete(__p);
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v21);
}

void sub_1B297820C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B2978310(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](v1);
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::writePCBitmap(const PCString *this, const PCString *a2, const PCBitmap *a3, const __CFDictionary *a4)
{
  CGFloat v5;
  unsigned int v7;
  const PCBitmap *v8;
  unsigned int v10;
  unsigned int v11;
  const void *v12;
  unsigned int v13;
  unsigned int BitsPerChannel;
  unsigned int v15;
  int NumChannels;
  const PCBitmap *v17;
  CGBitmapInfo v18;
  CGColorSpace *CGColorSpace;
  int v20;
  size_t v21;
  CGDataProviderRef v22;
  CGImageRef v23;
  CGColorRef v24;
  CFMutableDictionaryRef MutableCopy;
  _BOOL8 v26;
  char v27;
  __int128 v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  CGImageDestinationRef v33;
  CGFloat v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  CGColorSpace *v50;
  __int128 v51;
  __int128 v52;
  void *value;
  std::__shared_weak_count *v54;
  __int128 v55;
  CGImageRef image;
  std::__shared_weak_count *v57;
  CGDataProviderRef provider;
  std::__shared_weak_count *v59;
  PCString v60;
  const __CFURL *v61;
  CGFloat components[2];
  __int128 v63;
  uint64_t v64;

  v5 = *(double *)&a2;
  v64 = *MEMORY[0x1E0C80C00];
  if (!((unsigned int (*)(const PCString *))a2->var0->data)(a2)
    || !(*(unsigned int (**)(CGFloat))(**(_QWORD **)&v5 + 24))(COERCE_CGFLOAT(*(_QWORD *)&v5)))
  {
    return 0;
  }
  v51 = 0uLL;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v5 + 64) + 48))(*(_QWORD *)(*(_QWORD *)&v5 + 64));
  if (v7 > 0x11 || ((1 << v7) & 0x3C1AE) == 0)
  {
    v51 = *(_OWORD *)components;
    v5 = components[0];
  }
  v10 = (*(uint64_t (**)(CGFloat))(**(_QWORD **)&v5 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v5));
  v11 = (*(uint64_t (**)(CGFloat))(**(_QWORD **)&v5 + 24))(COERCE_CGFLOAT(*(_QWORD *)&v5));
  v12 = (const void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v5 + 64) + 16))(*(_QWORD *)(*(_QWORD *)&v5 + 64));
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v5 + 64) + 48))(*(_QWORD *)(*(_QWORD *)&v5 + 64));
  BitsPerChannel = PCPixelFormat::getBitsPerChannel(v13);
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)&v5 + 64) + 48))(*(_QWORD *)(*(_QWORD *)&v5 + 64));
  NumChannels = PCPixelFormat::getNumChannels(v15);
  PCImage::getColorSpace(*(PCImage **)&v5, &v50);
  CGColorSpace = (CGColorSpace *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v50);
  PCURL::PCURL((PCURL *)&v61, this, 0);
  PCURL::getExtension(&v61, (PCURL *)&v60);
  PCString::PCString((PCString *)components, "");
  v20 = PCString::compare(&v60, (const PCString *)components);
  PCString::~PCString((PCString *)components);
  if (!v20)
    PCString::set(&v60, "png");
  v21 = NumChannels * (BitsPerChannel >> 3) * (unint64_t)v10;
  if (v22)
  {
    std::shared_ptr<CGDataProvider>::shared_ptr[abi:ne180100]<CGDataProvider,void (*)(CGDataProvider*),void>(&provider, (uint64_t)v22, (uint64_t)MEMORY[0x1E0C9C638]);
    if (provider)
    {
      v23 = CGImageCreate(v10, v11, BitsPerChannel, NumChannels * BitsPerChannel, v21, CGColorSpace, v18, provider, 0, 1, kCGRenderingIntentDefault);
      if (v23)
      {
        std::shared_ptr<CGImage>::shared_ptr[abi:ne180100]<CGImage,void (*)(CGImage*),void>(&image, (uint64_t)v23, (uint64_t)MEMORY[0x1E0C9CDA0]);
        if (image)
        {
          v55 = 0uLL;
          if (a3 && CFDictionaryContainsKey((CFDictionaryRef)a3, (const void *)*MEMORY[0x1E0CBC758]))
          {
LABEL_39:
            v32 = (void *)objc_msgSend(MEMORY[0x1E0CEC3F8], "typeWithTag:tagClass:conformingToType:", PCString::ns_str(&v60), *MEMORY[0x1E0CEC400], *MEMORY[0x1E0CEC4A0]);
            if (v32)
            {
              v33 = CGImageDestinationCreateWithURL(v61, (CFStringRef)objc_msgSend(v32, "identifier"), 1uLL, 0);
              if (v33)
              {
                std::shared_ptr<CGImageDestination>::shared_ptr[abi:ne180100]<CGImageDestination,void (*)(void const*),void>(components, (uint64_t)v33, (uint64_t)MEMORY[0x1E0C98BC0]);
                if (*(_QWORD *)&components[0])
                {
                  CGImageDestinationAddImage(*(CGImageDestinationRef *)&components[0], image, (CFDictionaryRef)a3);
                  v26 = CGImageDestinationFinalize(*(CGImageDestinationRef *)&components[0]);
                }
                else
                {
                  v26 = 0;
                }
              }
              else
              {
                v26 = 0;
                components[0] = 0.0;
                components[1] = 0.0;
              }
              v34 = components[1];
              if (*(_QWORD *)&components[1])
              {
                v35 = (unint64_t *)(*(_QWORD *)&components[1] + 8);
                do
                  v36 = __ldaxr(v35);
                while (__stlxr(v36 - 1, v35));
                if (!v36)
                {
                  (*(void (**)(CGFloat))(**(_QWORD **)&v34 + 16))(COERCE_CGFLOAT(*(_QWORD *)&v34));
                  std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v34);
                }
              }
              goto LABEL_51;
            }
LABEL_43:
            v26 = 0;
LABEL_51:
            v37 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
            if (*((_QWORD *)&v55 + 1))
            {
              v38 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 - 1, v38));
              if (!v39)
              {
                ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
                std::__shared_weak_count::__release_weak(v37);
              }
            }
            goto LABEL_56;
          }
          *(_OWORD *)components = 0u;
          v63 = 0u;
          v24 = CGColorCreate(CGColorSpace, components);
          if (!v24)
          {
            v27 = 0;
            value = 0;
            v54 = 0;
LABEL_33:
            v29 = v54;
            if (v54)
            {
              p_shared_owners = (unint64_t *)&v54->__shared_owners_;
              do
                v31 = __ldaxr(p_shared_owners);
              while (__stlxr(v31 - 1, p_shared_owners));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
            if ((v27 & 1) == 0)
              goto LABEL_43;
            goto LABEL_39;
          }
          std::shared_ptr<CGColor>::shared_ptr[abi:ne180100]<CGColor,void (*)(void const*),void>(&value, (uint64_t)v24, (uint64_t)MEMORY[0x1E0C98BC0]);
          if (!value)
          {
LABEL_32:
            v27 = 0;
            goto LABEL_33;
          }
          if (a3)
          {
            MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)a3);
            if (MutableCopy)
              goto LABEL_28;
          }
          else
          {
            MutableCopy = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
            if (MutableCopy)
            {
LABEL_28:
              std::shared_ptr<__CFDictionary>::shared_ptr[abi:ne180100]<__CFDictionary,void (*)(void const*),void>(&v52, (uint64_t)MutableCopy, (uint64_t)MEMORY[0x1E0C98BC0]);
              v28 = v52;
              goto LABEL_30;
            }
          }
          v28 = 0uLL;
LABEL_30:
          v55 = v28;
          if ((_QWORD)v28)
          {
            CFDictionaryAddValue((CFMutableDictionaryRef)v28, (const void *)*MEMORY[0x1E0CBC758], value);
            v27 = 1;
            a3 = (const PCBitmap *)v55;
            goto LABEL_33;
          }
          goto LABEL_32;
        }
        v26 = 0;
      }
      else
      {
        v26 = 0;
        image = 0;
        v57 = 0;
      }
LABEL_56:
      v40 = v57;
      if (v57)
      {
        v41 = (unint64_t *)&v57->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      goto LABEL_61;
    }
    v26 = 0;
  }
  else
  {
    v26 = 0;
    provider = 0;
    v59 = 0;
  }
LABEL_61:
  v43 = v59;
  if (v59)
  {
    v44 = (unint64_t *)&v59->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  PCString::~PCString(&v60);
  PCURL::~PCURL((PCURL *)&v61);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v50);
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  return v26;
}

void sub_1B29788F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CGColorSpace *a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,PCString a27,char a28)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  PCString::~PCString(&a27);
  PCURL::~PCURL((PCURL *)&a28);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a12);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](a1 + 112);
  return a1;
}

uint64_t PCBitmap::premultiply(PCBitmap *this)
{
  uint64_t result;
  unsigned int v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int i;
  int v9;
  unsigned __int8 *j;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  int k;
  int v16;
  unsigned __int8 *m;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int n;
  int v24;
  unsigned __int8 *ii;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  int jj;
  int v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  int kk;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  int mm;
  int v50;
  unsigned __int16 *nn;
  int v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unsigned __int16 *v57;
  unsigned __int16 *v58;
  int i1;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  uint64_t v64;
  unsigned __int16 *v65;
  int v66;
  uint64_t v67;
  int v68;
  unsigned __int16 *i2;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  int i3;
  int v75;
  float *i4;
  int v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  int v81;
  float *v82;
  float *v83;
  int i5;
  float v85;
  float v86;
  float v87;
  int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  int i6;
  int v93;
  float *i7;
  float v95;
  float v96;
  float v97;

  result = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 48))(this);
  if ((result & 1) == 0)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
    result = PCPixelFormat::hasAlpha(v3);
    if ((_DWORD)result)
    {
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
      switch((int)result)
      {
        case 2:
          v4 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v5 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v5)
          {
            for (i = 0; i != v5; ++i)
            {
              v9 = v4;
              for (j = (unsigned __int8 *)v7; v9; --v9)
              {
                *j = (32897 * *j * j[1]) >> 23;
                j += 2;
              }
              v7 += v6;
            }
          }
          goto LABEL_71;
        case 3:
          v11 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v12 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v12)
          {
            for (k = 0; k != v12; ++k)
            {
              v16 = v11;
              for (m = (unsigned __int8 *)v14; v16; --v16)
              {
                v18 = *m;
                m[1] = (32897 * m[1] * v18) >> 23;
                m[2] = (32897 * m[2] * v18) >> 23;
                m[3] = (32897 * m[3] * v18) >> 23;
                m += 4;
              }
              v14 += v13;
            }
          }
          goto LABEL_71;
        case 4:
          v19 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v20 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v20)
          {
            for (n = 0; n != v20; ++n)
            {
              v24 = v19;
              for (ii = (unsigned __int8 *)v22; v24; --v24)
              {
                v26 = *ii;
                ii[3] = (32897 * ii[3] * v26) >> 23;
                ii[2] = (32897 * ii[2] * v26) >> 23;
                ii[1] = (32897 * ii[1] * v26) >> 23;
                ii += 4;
              }
              v22 += v21;
            }
          }
          goto LABEL_71;
        case 5:
          v27 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v28 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v28)
          {
            v31 = 0;
            v32 = (unsigned __int8 *)(v30 + 1);
            do
            {
              v33 = v32;
              for (jj = v27; jj; --jj)
              {
                v35 = v33[2];
                *(v33 - 1) = (32897 * *(v33 - 1) * v35) >> 23;
                *v33 = (32897 * *v33 * v35) >> 23;
                v33[1] = (32897 * v33[1] * v35) >> 23;
                v33 += 4;
              }
              ++v31;
              v32 += v29;
            }
            while (v31 != v28);
          }
          goto LABEL_71;
        case 6:
          v36 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v37 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v39 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v37)
          {
            v40 = 0;
            v41 = (unsigned __int8 *)(v39 + 1);
            do
            {
              v42 = v41;
              for (kk = v36; kk; --kk)
              {
                v44 = v42[2];
                v42[1] = (32897 * v42[1] * v44) >> 23;
                *v42 = (32897 * *v42 * v44) >> 23;
                *(v42 - 1) = (32897 * *(v42 - 1) * v44) >> 23;
                v42 += 4;
              }
              ++v40;
              v41 += v38;
            }
            while (v40 != v37);
          }
          goto LABEL_71;
        case 8:
          v45 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v46 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v48 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v46)
          {
            for (mm = 0; mm != v46; ++mm)
            {
              v50 = v45;
              for (nn = (unsigned __int16 *)v48; v50; --v50)
              {
                *nn = *nn * nn[1] / 0xFFFF;
                nn += 2;
              }
              v48 += v47;
            }
          }
          goto LABEL_71;
        case 10:
          v52 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v53 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v54 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v55 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v53)
          {
            v56 = 0;
            v57 = (unsigned __int16 *)(v55 + 4);
            do
            {
              v58 = v57;
              for (i1 = v52; i1; --i1)
              {
                v60 = v58[1];
                *(v58 - 2) = *(v58 - 2) * v60 / 0xFFFF;
                *(v58 - 1) = *(v58 - 1) * v60 / 0xFFFF;
                *v58 = *v58 * v60 / 0xFFFF;
                v58 += 4;
              }
              ++v56;
              v57 = (unsigned __int16 *)((char *)v57 + v54);
            }
            while (v56 != v53);
          }
          goto LABEL_71;
        case 12:
          v61 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v62 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v63 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v64 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v62)
          {
            v65 = (unsigned __int16 *)v64;
            v66 = 0;
            v67 = v63;
            do
            {
              v68 = v61;
              for (i2 = v65; v68; --v68)
              {
                PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>::premultiply(i2);
                i2 += 2;
              }
              v65 = (unsigned __int16 *)((char *)v65 + v67);
              ++v66;
            }
            while (v66 != v62);
          }
          goto LABEL_71;
        case 13:
        case 15:
          v70 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v71 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v72 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v73 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v71)
          {
            for (i3 = 0; i3 != v71; ++i3)
            {
              v75 = v70;
              for (i4 = (float *)v73; v75; --v75)
              {
                *i4 = i4[1] * *i4;
                i4 += 2;
              }
              v73 += v72;
            }
          }
          goto LABEL_71;
        case 16:
          v77 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v78 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v79 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v80 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v78)
          {
            v81 = 0;
            v82 = (float *)(v80 + 8);
            do
            {
              v83 = v82;
              for (i5 = v77; i5; --i5)
              {
                v86 = *v83;
                v85 = v83[1];
                v87 = v85 * *(v83 - 1);
                *(v83 - 2) = v85 * *(v83 - 2);
                *(v83 - 1) = v87;
                *v83 = v85 * v86;
                v83 += 4;
              }
              ++v81;
              v82 = (float *)((char *)v82 + v79);
            }
            while (v81 != v78);
          }
          goto LABEL_71;
        case 17:
          v88 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 16))(this);
          v89 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)this + 24))(this);
          v90 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v91 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          if (v89)
          {
            for (i6 = 0; i6 != v89; ++i6)
            {
              v93 = v88;
              for (i7 = (float *)v91; v93; --v93)
              {
                v95 = *i7;
                v96 = i7[3];
                v97 = *i7 * i7[2];
                i7[1] = *i7 * i7[1];
                i7[2] = v97;
                i7[3] = v95 * v96;
                i7 += 4;
              }
              v91 += v90;
            }
          }
LABEL_71:
          result = PCImage::setIsPremultiplied((uint64_t)this, 1);
          break;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t `anonymous namespace'::preMultBitmap<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>(_QWORD **a1)
{
  int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned __int16 *i;

  v2 = ((uint64_t (*)(_QWORD **))(*a1)[2])(a1);
  v3 = ((uint64_t (*)(_QWORD **))(*a1)[3])(a1);
  v4 = (*(uint64_t (**)(_QWORD *))(*a1[8] + 64))(a1[8]);
  v5 = (*(uint64_t (**)(_QWORD *))(*a1[8] + 16))(a1[8]);
  if (v3)
  {
    v6 = (unsigned __int16 *)v5;
    v7 = 0;
    v8 = v4;
    do
    {
      v9 = v2;
      for (i = v6; v9; --v9)
      {
        PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>::premultiply(i);
        i += 4;
      }
      v6 = (unsigned __int16 *)((char *)v6 + v8);
      ++v7;
    }
    while (v7 != v3);
  }
  return PCImage::setIsPremultiplied((uint64_t)a1, 1);
}

CGColorSpace **PCCreateBitmap@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  CGColorSpace *v10;

  v10 = (CGColorSpace *)PCBitmap::sanitizeColorSpace(0, a3);
  return PCCreateBitmap(v10, a1, a2, a3, a4, a5);
}

CGColorSpace **PCCreateBitmap@<X0>(CGColorSpaceRef space@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  CGColorSpace *v12;

  PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)&v12, space);
  PCCreateBitmap(a2, a3, a4, (PCColorSpaceHandle *)&v12, a5, a6);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
}

void sub_1B2979420(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t PCCreateBitmap@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, PCColorSpaceHandle *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t CGColorSpace;
  double v14;
  uint64_t result;
  uint64_t v16;

  v12 = operator new();
  ProCore_Private::PCBitmapRepDefault::PCBitmapRepDefault(v12, a1, a2, a3, a5);
  v16 = v12;
  CGColorSpace = PCColorSpaceHandle::getCGColorSpace(a4);
  v14 = PCCreateBitmap<ProCore_Private::PCBitmapRepDefault>(&v16, CGColorSpace, a6);
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)result + 8))(result, v14);
  return result;
}

void sub_1B29794E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4028F97B41);
  _Unwind_Resume(a1);
}

double PCCreateBitmap<ProCore_Private::PCBitmapRepDefault>@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  __int128 v6;
  uint64_t v7;

  v7 = a2;
  switch((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 48))(*a1))
  {
    case 1u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 2u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 3u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 4u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 5u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 6u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 7u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 8u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 9u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xAu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xBu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xCu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xDu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xEu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0xFu:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0x10u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
      goto LABEL_20;
    case 0x11u:
      std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(a1, &v7, &v6);
LABEL_20:
      result = *(double *)&v6;
      *(_OWORD *)a3 = v6;
      break;
    default:
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      break;
  }
  return result;
}

void PCBitmap::toBitmap(PCBitmap *this@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  void *lpsrc;
  std::__shared_weak_count *v11;

  std::shared_ptr<OZStyle>::shared_ptr[abi:ne180100]<OZStyle,void>(&lpsrc, (_QWORD *)this + 1);
  if (lpsrc
  {
    v4 = v11;
    *a2 = v3;
    a2[1] = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B29797F0(void *a1)
{
  uint64_t *v1;
  PCBitmap *v2;
  PCBitmap *v3;

  __cxa_begin_catch(a1);
  v3 = (PCBitmap *)operator new();
  PCBitmap::PCBitmap(v3, v2);
  std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap,void>(v1, (uint64_t)v3);
  __cxa_end_catch();
  JUMPOUT(0x1B29797DCLL);
}

void sub_1B297982C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C405CA75B9BLL);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

unint64_t PCBitmap::isPremultiplied(PCBitmap *this)
{
  unint64_t result;
  unsigned int v3;

  result = PCImage::isPremultiplied((PCImage *)this);
  if ((_DWORD)result)
  {
    v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
    return PCPixelFormat::hasAlpha(v3);
  }
  return result;
}

CGImageRef CreateCGImageFromPCBitmap(PCImage **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  CGColorSpace *CGColorSpace;
  void *v7;
  _QWORD *v8;
  PCBitmap *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  const void *v13;
  size_t v14;
  CGDataProvider *v15;
  _BOOL4 isFloat;
  int v17;
  CGBitmapInfo v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  size_t v23;
  unsigned int v24;
  CGColorSpace *v25;
  CGImageRef v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  PCBitmap *v31;
  std::__shared_weak_count *v32;

  v4 = (*(uint64_t (**)(PCImage *))(*(_QWORD *)*a1 + 16))(*a1);
  v5 = (*(uint64_t (**)(PCImage *))(*(_QWORD *)*a1 + 24))(*a1);
  CGColorSpace = (CGColorSpace *)PCImage::getCGColorSpace(*a1);
  PCCreateBitmap(CGColorSpace, v4, v5, a2, 1, (uint64_t)&v31);
  PCImage::setIsPremultiplied((uint64_t)v31, 0);
  v7 = (void *)MEMORY[0x1B5E29C50]();
  v8 = (_QWORD *)operator new();
  v9 = v31;
  v10 = v32;
  *v8 = v31;
  v8[1] = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (const void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v9 + 8) + 16))(*((_QWORD *)v9 + 8));
  v14 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)v31 + 40))(v31);
  v15 = CGDataProviderCreateWithData(v8, v13, v14, (CGDataProviderReleaseDataCallback)freeImage);
  LODWORD(v13) = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)v31 + 48))(v31);
  isFloat = PCPixelFormat::isFloat(a2);
  if ((_DWORD)v13)
    v17 = 1;
  else
    v17 = 3;
  if (isFloat)
    v18 = v17 | 0x2100;
  else
    v18 = v17;
  v20 = *((_DWORD *)v31 + 9);
  v19 = *((_DWORD *)v31 + 10);
  v21 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)v31 + 16))(v31);
  v22 = (*(uint64_t (**)(PCBitmap *))(*(_QWORD *)v31 + 24))(v31);
  v23 = *((unsigned int *)v31 + 9);
  v24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v31 + 8) + 64))(*((_QWORD *)v31 + 8));
  v25 = (CGColorSpace *)PCImage::getCGColorSpace((PCImage *)v31);
  v26 = CGImageCreate(v21, v22, v23, (v20 * v19), v24, v25, v18, v15, 0, 1, kCGRenderingIntentDefault);
  CGDataProviderRelease(v15);
  objc_autoreleasePoolPop(v7);
  v27 = v32;
  if (v32)
  {
    v28 = (unint64_t *)&v32->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  return v26;
}

void sub_1B2979AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t freeImage(uint64_t result, const void *a2)
{
  if (result)
  {
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void `anonymous namespace'::copyForCGImage(_anonymous_namespace_ *this@<X0>, const PCBitmap *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  PCBitmap *v7;
  uint64_t v8;
  char v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  PCBitmap *v15;
  uint64_t v16;
  char v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD **v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int hasAlpha;
  int v29;
  int v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  double v34;
  double v35;
  double v36;
  int k;
  int v38;
  _DWORD *v39;
  _WORD *m;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD **v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint32x4_t v64;
  uint64x2_t v65;
  float64x2_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD **v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int i14;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  _QWORD **v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  float *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  _QWORD **v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  float *v119;
  int i18;
  uint64_t v121;
  int nn;
  int v123;
  _DWORD *v124;
  _WORD *i1;
  double v126;
  double v127;
  int i9;
  int v129;
  _DWORD *v130;
  _WORD *i10;
  double v132;
  double v133;
  int i23;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int i31;
  int v139;
  uint64_t v140;
  unsigned __int16 *i32;
  int i16;
  uint64_t v143;
  int i19;
  uint64_t v145;
  int ii;
  int v147;
  _DWORD *v148;
  _WORD *jj;
  double v150;
  double v151;
  int i5;
  int v153;
  _DWORD *v154;
  _WORD *i6;
  double v156;
  double v157;
  int i22;
  uint64_t v159;
  int v160;
  int i29;
  int v162;
  float *v163;
  unsigned __int16 *i30;
  int i2;
  int v166;
  _DWORD *v167;
  _WORD *i3;
  double v169;
  double v170;
  int i11;
  int v172;
  _DWORD *v173;
  _WORD *i12;
  double v175;
  double v176;
  int i24;
  uint64_t v178;
  int v179;
  int i33;
  int v181;
  float *v182;
  unsigned __int16 *i34;
  int i13;
  uint64_t v185;
  int i17;
  uint64_t v187;
  int i;
  int v189;
  _DWORD *v190;
  _WORD *j;
  double v192;
  double v193;
  int v194;
  float64x2_t v195;
  uint64_t v196;
  uint32x4_t v197;
  uint64x2_t v198;
  float64x2_t v199;
  int i20;
  uint64_t v201;
  int v202;
  float *v203;
  unsigned __int16 *v204;
  int i25;
  int v206;
  float *v207;
  unsigned __int16 *i26;
  int kk;
  int v210;
  _DWORD *v211;
  _WORD *mm;
  double v213;
  double v214;
  int i7;
  int v216;
  float *v217;
  unsigned __int16 *i8;
  int v219;
  unsigned int v220;
  float v221;
  float v222;
  float v223;
  int v224;
  uint64_t v225;
  float *v226;
  int v227;
  uint64_t v228;
  float *v229;
  int i15;
  uint64_t v231;
  unint64_t *v232;
  int v233;
  _DWORD *v234;
  _DWORD *v235;
  int v236;
  _WORD *n;
  unint64_t *v238;
  int v239;
  _DWORD *v240;
  _WORD *v241;
  float64x2_t v242;
  _WORD *v243;
  _DWORD *v244;
  int i4;
  uint64x2_t v246;
  unint64_t *v247;
  int i21;
  uint64_t v249;
  int v250;
  float *v251;
  unsigned __int16 *v252;
  float v253;
  float v254;
  unint64_t *v255;
  int i27;
  int v257;
  float *v258;
  unsigned __int16 *i28;
  float v260;
  float v261;
  float v262;
  float v263;
  unint64_t *v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  float64x2_t v270;
  int v271;
  int v272;
  __int128 v273;
  uint16x4_t v274;

  *a3 = 0;
  a3[1] = 0;
  switch((*(unsigned int (**)(_QWORD, const PCBitmap *))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8), a2))
  {
    case 4u:
      v5 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v6 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      PCImage::getColorSpace(this, (CGColorSpace **)&v274);
      PCCreateBitmap(v5, v6, 3, (PCColorSpaceHandle *)&v274, 1, (uint64_t)&v273);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v274);
      v8 = v273;
      v9 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      PCImage::setIsPremultiplied(v8, v9);
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a3, &v273);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v11 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        goto LABEL_282;
      }
      break;
    case 6u:
      v13 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v14 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      PCImage::getColorSpace(this, (CGColorSpace **)&v274);
      PCCreateBitmap(v13, v14, 3, (PCColorSpaceHandle *)&v274, 1, (uint64_t)&v273);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v274);
      v16 = v273;
      v17 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      PCImage::setIsPremultiplied(v16, v17);
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a3, &v273);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v12 = __ldaxr(v18);
        while (__stlxr(v12 - 1, v18));
        goto LABEL_282;
      }
      break;
    case 9u:
      v265 = (uint64_t)a3;
      v19 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v20 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      PCImage::getColorSpace(this, (CGColorSpace **)&v274);
      PCCreateBitmap(v19, v20, 16, (PCColorSpaceHandle *)&v274, 1, (uint64_t)&v273);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v274);
      v21 = v273;
      v22 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      PCImage::setIsPremultiplied(v21, v22);
      v23 = (_QWORD **)v273;
      v24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v25 = (*(uint64_t (**)(_QWORD *))(*v23[8] + 16))(v23[8]);
      v26 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v27 = ((uint64_t (*)(_QWORD **))(*v23)[6])(v23);
      hasAlpha = PCPixelFormat::hasAlpha(9u);
      v29 = PCPixelFormat::hasAlpha(0x10u);
      v30 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v31 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      v33 = (*(uint64_t (**)(_QWORD *))(*v23[8] + 64))(v23[8]);
      if (hasAlpha)
      {
        if (v29)
        {
          if (v26 == v27)
          {
            if (v31)
            {
              for (i = 0; i != v31; ++i)
              {
                v189 = v30;
                v190 = (_DWORD *)v25;
                for (j = (_WORD *)v24; v189; --v189)
                {
                  LOWORD(v34) = *j;
                  v192 = (double)*(unint64_t *)&v34 * 0.0000152590219;
                  *(float *)&v192 = v192;
                  *v190 = LODWORD(v192);
                  LOWORD(v192) = j[1];
                  v193 = (double)*(unint64_t *)&v192 * 0.0000152590219;
                  *(float *)&v193 = v193;
                  v190[1] = LODWORD(v193);
                  LOWORD(v193) = j[2];
                  v34 = (double)*(unint64_t *)&v193 * 0.0000152590219;
                  *(float *)&v34 = v34;
                  v190[2] = LODWORD(v34);
                  v190[3] = 1065353216;
                  j += 3;
                  v190 += 4;
                }
                v24 += v32;
                v25 += v33;
              }
            }
          }
          else if ((v26 & 1) != 0)
          {
            if (v31)
            {
              for (k = 0; k != v31; ++k)
              {
                v38 = v30;
                v39 = (_DWORD *)v25;
                for (m = (_WORD *)v24; v38; --v38)
                {
                  LOWORD(v34) = *m;
                  v41 = (double)*(unint64_t *)&v34 * 0.0000152590219;
                  *(float *)&v41 = v41;
                  *v39 = LODWORD(v41);
                  LOWORD(v41) = m[1];
                  v42 = (double)*(unint64_t *)&v41 * 0.0000152590219;
                  *(float *)&v42 = v42;
                  v39[1] = LODWORD(v42);
                  LOWORD(v42) = m[2];
                  v34 = (double)*(unint64_t *)&v42 * 0.0000152590219;
                  *(float *)&v34 = v34;
                  v39[2] = LODWORD(v34);
                  v39[3] = 1065353216;
                  m += 3;
                  v39 += 4;
                }
                v24 += v32;
                v25 += v33;
              }
            }
          }
          else if (v31)
          {
            v233 = 0;
            v234 = (_DWORD *)(v25 + 8);
            do
            {
              v235 = v234;
              v236 = v30;
              for (n = (_WORD *)v24; v236; --v236)
              {
                LOWORD(v34) = *n;
                v34 = (double)*(unint64_t *)&v34 * 0.0000152590219;
                *(float *)&v34 = v34;
                LOWORD(v35) = n[1];
                v35 = (double)*(unint64_t *)&v35 * 0.0000152590219;
                *(float *)&v35 = v35;
                LOWORD(v36) = n[2];
                v36 = (double)*(unint64_t *)&v36 * 0.0000152590219;
                *(float *)&v36 = v36;
                v235[1] = 1065353216;
                *(v235 - 2) = LODWORD(v34);
                *(v235 - 1) = LODWORD(v35);
                *v235 = LODWORD(v36);
                v235 += 4;
                n += 3;
              }
              v24 += v32;
              ++v233;
              v234 = (_DWORD *)((char *)v234 + v33);
            }
            while (v233 != v31);
          }
        }
        else if ((v26 & 1) != 0)
        {
          if (v31)
          {
            for (ii = 0; ii != v31; ++ii)
            {
              v147 = v30;
              v148 = (_DWORD *)v25;
              for (jj = (_WORD *)v24; v147; --v147)
              {
                LOWORD(v34) = *jj;
                v150 = (double)*(unint64_t *)&v34 * 0.0000152590219;
                *(float *)&v150 = v150;
                *v148 = LODWORD(v150);
                LOWORD(v150) = jj[1];
                v151 = (double)*(unint64_t *)&v150 * 0.0000152590219;
                *(float *)&v151 = v151;
                v148[1] = LODWORD(v151);
                LOWORD(v151) = jj[2];
                v34 = (double)*(unint64_t *)&v151 * 0.0000152590219;
                *(float *)&v34 = v34;
                v148[2] = LODWORD(v34);
                jj += 3;
                v148 += 4;
              }
              v24 += v32;
              v25 += v33;
            }
          }
        }
        else if (v31)
        {
          for (kk = 0; kk != v31; ++kk)
          {
            v210 = v30;
            v211 = (_DWORD *)v25;
            for (mm = (_WORD *)v24; v210; --v210)
            {
              LOWORD(v34) = *mm;
              v213 = (double)*(unint64_t *)&v34 * 0.0000152590219;
              *(float *)&v213 = v213;
              *v211 = LODWORD(v213);
              LOWORD(v213) = mm[1];
              v214 = (double)*(unint64_t *)&v213 * 0.0000152590219;
              *(float *)&v214 = v214;
              v211[1] = LODWORD(v214);
              LOWORD(v214) = mm[2];
              v34 = (double)*(unint64_t *)&v214 * 0.0000152590219;
              *(float *)&v34 = v34;
              v211[2] = LODWORD(v34);
              mm += 3;
              v211 += 4;
            }
            v24 += v32;
            v25 += v33;
          }
        }
      }
      else if ((v29 & 1) != 0)
      {
        if (v31)
        {
          for (nn = 0; nn != v31; ++nn)
          {
            v123 = v30;
            v124 = (_DWORD *)v25;
            for (i1 = (_WORD *)v24; v123; --v123)
            {
              LOWORD(v34) = *i1;
              v126 = (double)*(unint64_t *)&v34 * 0.0000152590219;
              *(float *)&v126 = v126;
              *v124 = LODWORD(v126);
              LOWORD(v126) = i1[1];
              v127 = (double)*(unint64_t *)&v126 * 0.0000152590219;
              *(float *)&v127 = v127;
              v124[1] = LODWORD(v127);
              LOWORD(v127) = i1[2];
              v34 = (double)*(unint64_t *)&v127 * 0.0000152590219;
              *(float *)&v34 = v34;
              v124[2] = LODWORD(v34);
              v124[3] = 1065353216;
              i1 += 3;
              v124 += 4;
            }
            v24 += v32;
            v25 += v33;
          }
        }
      }
      else if (v31)
      {
        for (i2 = 0; i2 != v31; ++i2)
        {
          v166 = v30;
          v167 = (_DWORD *)v25;
          for (i3 = (_WORD *)v24; v166; --v166)
          {
            LOWORD(v34) = *i3;
            v169 = (double)*(unint64_t *)&v34 * 0.0000152590219;
            *(float *)&v169 = v169;
            *v167 = LODWORD(v169);
            LOWORD(v169) = i3[1];
            v170 = (double)*(unint64_t *)&v169 * 0.0000152590219;
            *(float *)&v170 = v170;
            v167[1] = LODWORD(v170);
            LOWORD(v170) = i3[2];
            v34 = (double)*(unint64_t *)&v170 * 0.0000152590219;
            *(float *)&v34 = v34;
            v167[2] = LODWORD(v34);
            i3 += 3;
            v167 += 4;
          }
          v24 += v32;
          v25 += v33;
        }
      }
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v265, &v273);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v238 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v12 = __ldaxr(v238);
        while (__stlxr(v12 - 1, v238));
        goto LABEL_282;
      }
      break;
    case 0xAu:
      v266 = (uint64_t)a3;
      v43 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v44 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      PCImage::getColorSpace(this, (CGColorSpace **)&v274);
      PCCreateBitmap(v43, v44, 16, (PCColorSpaceHandle *)&v274, 1, (uint64_t)&v273);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v274);
      v45 = v273;
      v46 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      PCImage::setIsPremultiplied(v45, v46);
      v47 = (_QWORD **)v273;
      v48 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v49 = (*(uint64_t (**)(_QWORD *))(*v47[8] + 16))(v47[8]);
      v50 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v51 = ((uint64_t (*)(_QWORD **))(*v47)[6])(v47);
      v52 = PCPixelFormat::hasAlpha(0xAu);
      v53 = PCPixelFormat::hasAlpha(0x10u);
      v54 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v55 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v56 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      v57 = (*(uint64_t (**)(_QWORD *))(*v47[8] + 64))(v47[8]);
      v61 = v57;
      if (v52)
      {
        if (v53)
        {
          if (v50 == v51)
          {
            if (v55)
            {
              v194 = 0;
              v195 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
              do
              {
                if (v54)
                {
                  v196 = 0;
                  do
                  {
                    v197 = vmovl_u16(*(uint16x4_t *)(v48 + 8 * v196));
                    v198.i64[0] = v197.u32[0];
                    v198.i64[1] = v197.u32[1];
                    v199 = vcvtq_f64_u64(v198);
                    v198.i64[0] = v197.u32[2];
                    v198.i64[1] = v197.u32[3];
                    *(float32x4_t *)(v49 + 16 * v196++) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v199, v195)), vmulq_f64(vcvtq_f64_u64(v198), v195));
                  }
                  while (v54 != (_DWORD)v196);
                }
                v48 += v56;
                v49 += v57;
                ++v194;
              }
              while (v194 != v55);
            }
          }
          else if ((v50 & 1) != 0)
          {
            if (v55)
            {
              v62 = 0;
              v270 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
              do
              {
                if (v54)
                {
                  v63 = 0;
                  do
                  {
                    v274 = *(uint16x4_t *)(v48 + 8 * v63);
                    PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>::unpremultiply((unsigned __int16 *)&v274);
                    v64 = vmovl_u16(v274);
                    v65.i64[0] = v64.u32[0];
                    v65.i64[1] = v64.u32[1];
                    v66 = vcvtq_f64_u64(v65);
                    v65.i64[0] = v64.u32[2];
                    v65.i64[1] = v64.u32[3];
                    *(float32x4_t *)(v49 + 16 * v63++) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(v66, v270)), vmulq_f64(vcvtq_f64_u64(v65), v270));
                  }
                  while (v54 != (_DWORD)v63);
                }
                v48 += v56;
                v49 += v61;
                ++v62;
              }
              while (v62 != v55);
            }
          }
          else if (v55)
          {
            v239 = 0;
            v240 = (_DWORD *)(v49 + 12);
            v241 = (_WORD *)(v48 + 6);
            v242 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
            do
            {
              v243 = v241;
              v244 = v240;
              for (i4 = v54; i4; --i4)
              {
                LOWORD(v59) = *(v243 - 1);
                v59 = (double)*(unint64_t *)&v59 * 0.0000152590219;
                LOWORD(v60) = *v243;
                v60 = (double)*(unint64_t *)&v60 * 0.0000152590219;
                *(float *)&v60 = v60;
                *v244 = LODWORD(v60);
                *(float *)&v59 = v59;
                v246.i64[0] = (unsigned __int16)*(v243 - 3);
                v246.i64[1] = (unsigned __int16)*(v243 - 2);
                *(float32x2_t *)(v244 - 3) = vmul_n_f32(vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v246), v242)), *(float *)&v60);
                *(float *)&v59 = *(float *)&v59 * *(float *)&v60;
                *(v244 - 1) = LODWORD(v59);
                v244 += 4;
                v243 += 4;
              }
              ++v239;
              v240 = (_DWORD *)((char *)v240 + v57);
              v241 = (_WORD *)((char *)v241 + v56);
            }
            while (v239 != v55);
          }
        }
        else if ((v50 & 1) != 0)
        {
          if (v55)
          {
            for (i5 = 0; i5 != v55; ++i5)
            {
              v153 = v54;
              v154 = (_DWORD *)v49;
              for (i6 = (_WORD *)v48; v153; --v153)
              {
                LOWORD(v58) = *i6;
                v156 = (double)*(unint64_t *)&v58 * 0.0000152590219;
                *(float *)&v156 = v156;
                *v154 = LODWORD(v156);
                LOWORD(v156) = i6[1];
                v157 = (double)*(unint64_t *)&v156 * 0.0000152590219;
                *(float *)&v157 = v157;
                v154[1] = LODWORD(v157);
                LOWORD(v157) = i6[2];
                v58 = (double)*(unint64_t *)&v157 * 0.0000152590219;
                *(float *)&v58 = v58;
                v154[2] = LODWORD(v58);
                i6 += 4;
                v154 += 4;
              }
              v48 += v56;
              v49 += v57;
            }
          }
        }
        else if (v55)
        {
          for (i7 = 0; i7 != v55; ++i7)
          {
            v216 = v54;
            v217 = (float *)v49;
            for (i8 = (unsigned __int16 *)v48; v216; --v216)
            {
              v219 = i8[3];
              v220 = (unsigned __int16)(v219 * i8[2] / 0xFFFF);
              v221 = (double)(unsigned __int16)(v219 * *i8 / 0xFFFF) * 0.0000152590219;
              v222 = (double)(unsigned __int16)(v219 * i8[1] / 0xFFFF) * 0.0000152590219;
              *v217 = v221;
              v217[1] = v222;
              v223 = (double)v220 * 0.0000152590219;
              v217[2] = v223;
              i8 += 4;
              v217 += 4;
            }
            v48 += v56;
            v49 += v57;
          }
        }
      }
      else if ((v53 & 1) != 0)
      {
        if (v55)
        {
          for (i9 = 0; i9 != v55; ++i9)
          {
            v129 = v54;
            v130 = (_DWORD *)v49;
            for (i10 = (_WORD *)v48; v129; --v129)
            {
              LOWORD(v58) = *i10;
              v132 = (double)*(unint64_t *)&v58 * 0.0000152590219;
              *(float *)&v132 = v132;
              *v130 = LODWORD(v132);
              LOWORD(v132) = i10[1];
              v133 = (double)*(unint64_t *)&v132 * 0.0000152590219;
              *(float *)&v133 = v133;
              v130[1] = LODWORD(v133);
              LOWORD(v133) = i10[2];
              v58 = (double)*(unint64_t *)&v133 * 0.0000152590219;
              *(float *)&v58 = v58;
              v130[2] = LODWORD(v58);
              v130[3] = 1065353216;
              i10 += 4;
              v130 += 4;
            }
            v48 += v56;
            v49 += v57;
          }
        }
      }
      else if (v55)
      {
        for (i11 = 0; i11 != v55; ++i11)
        {
          v172 = v54;
          v173 = (_DWORD *)v49;
          for (i12 = (_WORD *)v48; v172; --v172)
          {
            LOWORD(v58) = *i12;
            v175 = (double)*(unint64_t *)&v58 * 0.0000152590219;
            *(float *)&v175 = v175;
            *v173 = LODWORD(v175);
            LOWORD(v175) = i12[1];
            v176 = (double)*(unint64_t *)&v175 * 0.0000152590219;
            *(float *)&v176 = v176;
            v173[1] = LODWORD(v176);
            LOWORD(v176) = i12[2];
            v58 = (double)*(unint64_t *)&v176 * 0.0000152590219;
            *(float *)&v58 = v58;
            v173[2] = LODWORD(v58);
            i12 += 4;
            v173 += 4;
          }
          v48 += v56;
          v49 += v57;
        }
      }
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v266, &v273);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v247 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v12 = __ldaxr(v247);
        while (__stlxr(v12 - 1, v247));
        goto LABEL_282;
      }
      break;
    case 0xBu:
      v267 = (uint64_t)a3;
      v67 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v68 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      PCImage::getColorSpace(this, (CGColorSpace **)&v274);
      PCCreateBitmap(v67, v68, 14, (PCColorSpaceHandle *)&v274, 1, (uint64_t)&v273);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v274);
      v69 = (_QWORD **)v273;
      v70 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v71 = (*(uint64_t (**)(_QWORD *))(*v69[8] + 16))(v69[8]);
      v72 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v73 = ((uint64_t (*)(_QWORD **))(*v69)[6])(v69);
      v74 = PCPixelFormat::hasAlpha(0xBu);
      v75 = PCPixelFormat::hasAlpha(0xEu);
      v76 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v77 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v78 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      v79 = (*(uint64_t (**)(_QWORD *))(*v69[8] + 64))(v69[8]);
      if (v74)
      {
        if (v75)
        {
          if (v72 == v73)
          {
            if (v77)
            {
              for (i13 = 0; i13 != v77; ++i13)
              {
                if (v76)
                {
                  v185 = 0;
                  do
                  {
                    *(float *)(v71 + 4 * v185) = half::_toFloat[*(unsigned __int16 *)(v70 + 2 * v185)];
                    ++v185;
                  }
                  while (v76 != (_DWORD)v185);
                }
                v70 += v78;
                v71 += v79;
              }
            }
          }
          else if ((v72 & 1) != 0)
          {
            if (v77)
            {
              for (i14 = 0; i14 != v77; ++i14)
              {
                if (v76)
                {
                  v81 = 0;
                  do
                  {
                    *(float *)(v71 + 4 * v81) = half::_toFloat[*(unsigned __int16 *)(v70 + 2 * v81)];
                    ++v81;
                  }
                  while (v76 != (_DWORD)v81);
                }
                v70 += v78;
                v71 += v79;
              }
            }
          }
          else if (v77)
          {
            for (i15 = 0; i15 != v77; ++i15)
            {
              if (v76)
              {
                v231 = 0;
                do
                {
                  *(float *)(v71 + 4 * v231) = half::_toFloat[*(unsigned __int16 *)(v70 + 2 * v231)];
                  ++v231;
                }
                while (v76 != (_DWORD)v231);
              }
              v70 += v78;
              v71 += v79;
            }
          }
        }
        else if ((v72 & 1) != 0)
        {
          if (v77)
          {
            for (i16 = 0; i16 != v77; ++i16)
            {
              if (v76)
              {
                v143 = 0;
                do
                {
                  *(float *)(v71 + 4 * v143) = half::_toFloat[*(unsigned __int16 *)(v70 + 2 * v143)];
                  ++v143;
                }
                while (v76 != (_DWORD)v143);
              }
              v70 += v78;
              v71 += v79;
            }
          }
        }
        else if (v77)
        {
          for (i17 = 0; i17 != v77; ++i17)
          {
            if (v76)
            {
              v187 = 0;
              do
              {
                *(float *)(v71 + 4 * v187) = half::_toFloat[*(unsigned __int16 *)(v70 + 2 * v187)];
                ++v187;
              }
              while (v76 != (_DWORD)v187);
            }
            v70 += v78;
            v71 += v79;
          }
        }
      }
      else if ((v75 & 1) != 0)
      {
        if (v77)
        {
          for (i18 = 0; i18 != v77; ++i18)
          {
            if (v76)
            {
              v121 = 0;
              do
              {
                *(float *)(v71 + 4 * v121) = half::_toFloat[*(unsigned __int16 *)(v70 + 2 * v121)];
                ++v121;
              }
              while (v76 != (_DWORD)v121);
            }
            v70 += v78;
            v71 += v79;
          }
        }
      }
      else if (v77)
      {
        for (i19 = 0; i19 != v77; ++i19)
        {
          if (v76)
          {
            v145 = 0;
            do
            {
              *(float *)(v71 + 4 * v145) = half::_toFloat[*(unsigned __int16 *)(v70 + 2 * v145)];
              ++v145;
            }
            while (v76 != (_DWORD)v145);
          }
          v70 += v78;
          v71 += v79;
        }
      }
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v267, &v273);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v232 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v12 = __ldaxr(v232);
        while (__stlxr(v12 - 1, v232));
        goto LABEL_282;
      }
      break;
    case 0xCu:
      v268 = (uint64_t)a3;
      v82 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v83 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      PCImage::getColorSpace(this, (CGColorSpace **)&v274);
      PCCreateBitmap(v82, v83, 15, (PCColorSpaceHandle *)&v274, 1, (uint64_t)&v273);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v274);
      v84 = v273;
      v85 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      PCImage::setIsPremultiplied(v84, v85);
      v86 = (_QWORD **)v273;
      v87 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v88 = (*(uint64_t (**)(_QWORD *))(*v86[8] + 16))(v86[8]);
      v89 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v90 = ((uint64_t (*)(_QWORD **))(*v86)[6])(v86);
      v91 = PCPixelFormat::hasAlpha(0xCu);
      v92 = PCPixelFormat::hasAlpha(0xFu);
      v93 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v94 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v95 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      v96 = (*(uint64_t (**)(_QWORD *))(*v86[8] + 64))(v86[8]);
      v97 = v96;
      if (v91)
      {
        v271 = v94;
        if (v92)
        {
          if (v89 == v90)
          {
            if (v94)
            {
              for (i20 = 0; i20 != v94; ++i20)
              {
                if (v93)
                {
                  v201 = 0;
                  v202 = v93;
                  do
                  {
                    v203 = (float *)(v88 + 4 * v201);
                    v204 = (unsigned __int16 *)(v87 + 2 * v201);
                    *v203 = half::_toFloat[*v204];
                    v203[1] = half::_toFloat[v204[1]];
                    v201 += 2;
                    --v202;
                  }
                  while (v202);
                }
                v87 += v95;
                v88 += v96;
              }
            }
          }
          else if ((v89 & 1) != 0)
          {
            if (v94)
            {
              v98 = 0;
              do
              {
                if (v93)
                {
                  v99 = 0;
                  v100 = (float *)v88;
                  do
                  {
                    v274.i32[0] = *(_DWORD *)(v87 + 4 * v99);
                    PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>::unpremultiply((unsigned __int16 *)&v274);
                    *v100 = half::_toFloat[v274.u16[0]];
                    v100[1] = half::_toFloat[v274.u16[1]];
                    ++v99;
                    v100 += 2;
                  }
                  while (v93 != (_DWORD)v99);
                }
                v87 += v95;
                v88 += v97;
                ++v98;
              }
              while (v98 != v271);
            }
          }
          else if (v94)
          {
            for (i21 = 0; i21 != v94; ++i21)
            {
              if (v93)
              {
                v249 = 0;
                v250 = v93;
                do
                {
                  v251 = (float *)(v88 + 4 * v249);
                  v252 = (unsigned __int16 *)(v87 + 2 * v249);
                  v253 = half::_toFloat[*v252];
                  *v251 = v253;
                  v254 = half::_toFloat[v252[1]];
                  *v251 = v253 * v254;
                  v251[1] = v254;
                  v249 += 2;
                  --v250;
                }
                while (v250);
              }
              v87 += v95;
              v88 += v96;
            }
          }
        }
        else if ((v89 & 1) != 0)
        {
          if (v94)
          {
            for (i22 = 0; i22 != v94; ++i22)
            {
              if (v93)
              {
                v159 = 0;
                v160 = v93;
                do
                {
                  *(float *)(v88 + 4 * v159) = half::_toFloat[*(unsigned __int16 *)(v87 + 2 * v159)];
                  v159 += 2;
                  --v160;
                }
                while (v160);
              }
              v87 += v95;
              v88 += v96;
            }
          }
        }
        else if (v94)
        {
          v224 = 0;
          do
          {
            if (v93)
            {
              v225 = 0;
              v226 = (float *)v88;
              do
              {
                v274.i32[0] = *(_DWORD *)(v87 + 4 * v225);
                PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>::premultiply((unsigned __int16 *)&v274);
                *v226 = half::_toFloat[v274.u16[0]];
                v226 += 2;
                ++v225;
              }
              while (v93 != (_DWORD)v225);
            }
            v87 += v95;
            v88 += v97;
            ++v224;
          }
          while (v224 != v271);
        }
      }
      else if ((v92 & 1) != 0)
      {
        if (v94)
        {
          for (i23 = 0; i23 != v94; ++i23)
          {
            if (v93)
            {
              v135 = 0;
              v136 = v93;
              do
              {
                v137 = v88 + 4 * v135;
                *(float *)v137 = half::_toFloat[*(unsigned __int16 *)(v87 + 2 * v135)];
                *(_DWORD *)(v137 + 4) = 1065353216;
                v135 += 2;
                --v136;
              }
              while (v136);
            }
            v87 += v95;
            v88 += v96;
          }
        }
      }
      else if (v94)
      {
        for (i24 = 0; i24 != v94; ++i24)
        {
          if (v93)
          {
            v178 = 0;
            v179 = v93;
            do
            {
              *(float *)(v88 + 4 * v178) = half::_toFloat[*(unsigned __int16 *)(v87 + 2 * v178)];
              v178 += 2;
              --v179;
            }
            while (v179);
          }
          v87 += v95;
          v88 += v96;
        }
      }
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v268, &v273);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v255 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v12 = __ldaxr(v255);
        while (__stlxr(v12 - 1, v255));
        goto LABEL_282;
      }
      break;
    case 0xDu:
      v269 = (uint64_t)a3;
      v101 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v102 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      PCImage::getColorSpace(this, (CGColorSpace **)&v274);
      PCCreateBitmap(v101, v102, 16, (PCColorSpaceHandle *)&v274, 1, (uint64_t)&v273);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&v274);
      v103 = v273;
      v104 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      PCImage::setIsPremultiplied(v103, v104);
      v105 = (_QWORD **)v273;
      v106 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v107 = (*(uint64_t (**)(_QWORD *))(*v105[8] + 16))(v105[8]);
      v108 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v109 = ((uint64_t (*)(_QWORD **))(*v105)[6])(v105);
      v110 = PCPixelFormat::hasAlpha(0xDu);
      v111 = PCPixelFormat::hasAlpha(0x10u);
      v112 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v113 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v114 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      v115 = (*(uint64_t (**)(_QWORD *))(*v105[8] + 64))(v105[8]);
      v116 = v115;
      if (v110)
      {
        v272 = v113;
        if (v111)
        {
          if (v108 == v109)
          {
            if (v113)
            {
              for (i25 = 0; i25 != v113; ++i25)
              {
                v206 = v112;
                v207 = (float *)v107;
                for (i26 = (unsigned __int16 *)v106; v206; --v206)
                {
                  *v207 = half::_toFloat[*i26];
                  v207[1] = half::_toFloat[i26[1]];
                  v207[2] = half::_toFloat[i26[2]];
                  v207[3] = half::_toFloat[i26[3]];
                  i26 += 4;
                  v207 += 4;
                }
                v106 += v114;
                v107 += v115;
              }
            }
          }
          else if ((v108 & 1) != 0)
          {
            if (v113)
            {
              v117 = 0;
              do
              {
                if (v112)
                {
                  v118 = 0;
                  v119 = (float *)v107;
                  do
                  {
                    v274 = *(uint16x4_t *)(v106 + 8 * v118);
                    PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>::unpremultiply((unsigned __int16 *)&v274);
                    *v119 = half::_toFloat[v274.u16[0]];
                    v119[1] = half::_toFloat[v274.u16[1]];
                    v119[2] = half::_toFloat[v274.u16[2]];
                    v119[3] = half::_toFloat[v274.u16[3]];
                    ++v118;
                    v119 += 4;
                  }
                  while (v112 != (_DWORD)v118);
                }
                v106 += v114;
                v107 += v116;
                ++v117;
              }
              while (v117 != v272);
            }
          }
          else if (v113)
          {
            for (i27 = 0; i27 != v113; ++i27)
            {
              v257 = v112;
              v258 = (float *)v107;
              for (i28 = (unsigned __int16 *)v106; v257; --v257)
              {
                v260 = half::_toFloat[*i28];
                *v258 = v260;
                v261 = half::_toFloat[i28[1]];
                v258[1] = v261;
                v262 = half::_toFloat[i28[2]];
                v258[2] = v262;
                v263 = half::_toFloat[i28[3]];
                *v258 = v260 * v263;
                v258[1] = v261 * v263;
                v258[2] = v262 * v263;
                v258[3] = v263;
                i28 += 4;
                v258 += 4;
              }
              v106 += v114;
              v107 += v115;
            }
          }
        }
        else if ((v108 & 1) != 0)
        {
          if (v113)
          {
            for (i29 = 0; i29 != v113; ++i29)
            {
              v162 = v112;
              v163 = (float *)v107;
              for (i30 = (unsigned __int16 *)v106; v162; --v162)
              {
                *v163 = half::_toFloat[*i30];
                v163[1] = half::_toFloat[i30[1]];
                v163[2] = half::_toFloat[i30[2]];
                i30 += 4;
                v163 += 4;
              }
              v106 += v114;
              v107 += v115;
            }
          }
        }
        else if (v113)
        {
          v227 = 0;
          do
          {
            if (v112)
            {
              v228 = 0;
              v229 = (float *)v107;
              do
              {
                v274 = *(uint16x4_t *)(v106 + 8 * v228);
                PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>::premultiply((unsigned __int16 *)&v274);
                *v229 = half::_toFloat[v274.u16[0]];
                v229[1] = half::_toFloat[v274.u16[1]];
                v229[2] = half::_toFloat[v274.u16[2]];
                ++v228;
                v229 += 4;
              }
              while (v112 != (_DWORD)v228);
            }
            v106 += v114;
            v107 += v116;
            ++v227;
          }
          while (v227 != v272);
        }
      }
      else if ((v111 & 1) != 0)
      {
        if (v113)
        {
          for (i31 = 0; i31 != v113; ++i31)
          {
            v139 = v112;
            v140 = v107;
            for (i32 = (unsigned __int16 *)v106; v139; --v139)
            {
              *(float *)v140 = half::_toFloat[*i32];
              *(float *)(v140 + 4) = half::_toFloat[i32[1]];
              *(float *)(v140 + 8) = half::_toFloat[i32[2]];
              *(_DWORD *)(v140 + 12) = 1065353216;
              i32 += 4;
              v140 += 16;
            }
            v106 += v114;
            v107 += v115;
          }
        }
      }
      else if (v113)
      {
        for (i33 = 0; i33 != v113; ++i33)
        {
          v181 = v112;
          v182 = (float *)v107;
          for (i34 = (unsigned __int16 *)v106; v181; --v181)
          {
            *v182 = half::_toFloat[*i34];
            v182[1] = half::_toFloat[i34[1]];
            v182[2] = half::_toFloat[i34[2]];
            i34 += 4;
            v182 += 4;
          }
          v106 += v114;
          v107 += v115;
        }
      }
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v269, &v273);
      v10 = (std::__shared_weak_count *)*((_QWORD *)&v273 + 1);
      if (*((_QWORD *)&v273 + 1))
      {
        v264 = (unint64_t *)(*((_QWORD *)&v273 + 1) + 8);
        do
          v12 = __ldaxr(v264);
        while (__stlxr(v12 - 1, v264));
LABEL_282:
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      break;
    default:
      return;
  }
}

void sub_1B297B484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a3);
  _Unwind_Resume(a1);
}

CGColorSpace **`anonymous namespace'::makeCGImageFromPCBitmap@<X0>(_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  CGColorSpace *CGColorSpace;
  CGColorSpace *v6;
  const void *v7;
  size_t v8;
  CGDataProviderRef v9;
  unsigned int v10;
  unsigned int v11;
  size_t v12;
  int v13;
  unsigned int v14;
  CGColorSpace *v15;
  const PCBitmap *v16;
  CGBitmapInfo v17;
  CGImageRef v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  CGDataProviderRef provider;
  std::__shared_weak_count *v24;
  CGColorSpace *v25;

  CGColorSpace = (CGColorSpace *)PCImage::getCGColorSpace(this);
  v6 = CGColorSpace;
  if (CGColorSpace)
    PCCFRefTraits<CGColorSpace *>::retain(CGColorSpace);
  v25 = v6;
  v7 = (const void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v8 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 40))(this);
  if (v9)
  {
    std::shared_ptr<CGDataProvider>::shared_ptr[abi:ne180100]<CGDataProvider,void (*)(CGDataProvider*),void>(&provider, (uint64_t)v9, (uint64_t)MEMORY[0x1E0C9C638]);
  }
  else
  {
    provider = 0;
    v24 = 0;
  }
  v10 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
  v11 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
  v12 = *((unsigned int *)this + 9);
  v13 = *((_DWORD *)this + 10);
  v14 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
  v15 = v25;
  v18 = CGImageCreate(v10, v11, v12, (v13 * v12), v14, v15, v17, provider, 0, 0, kCGRenderingIntentDefault);
  if (v18)
  {
    std::shared_ptr<CGImage>::shared_ptr[abi:ne180100]<CGImage,void (*)(CGImage*),void>(a2, (uint64_t)v18, (uint64_t)MEMORY[0x1E0C9CDA0]);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  v19 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v25);
}

void sub_1B297B6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

CGColorSpace **`anonymous namespace'::makeCGBitmapContextForPCBitmap@<X0>(_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  CGColorSpace *CGColorSpace;
  CGColorSpace *v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  unsigned int v11;
  const PCBitmap *v12;
  uint32_t v13;
  CGContextRef v14;
  CGColorSpace *v16;

  CGColorSpace = (CGColorSpace *)PCImage::getCGColorSpace(this);
  v6 = CGColorSpace;
  if (CGColorSpace)
    PCCFRefTraits<CGColorSpace *>::retain(CGColorSpace);
  v16 = v6;
  v7 = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
  v8 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
  v9 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
  v10 = *((unsigned int *)this + 9);
  v11 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
  if (v14)
  {
    std::shared_ptr<CGContext>::shared_ptr[abi:ne180100]<CGContext,void (*)(CGContext*),void>(a2, (uint64_t)v14, (uint64_t)MEMORY[0x1E0C9C340]);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
}

void sub_1B297B7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::copyGrayAlpha(_anonymous_namespace_ *this, const PCBitmap *a2, const PCBitmap *a3, PCBitmap *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double v16;
  int i6;
  uint64_t v18;
  int v19;
  _WORD *v20;
  float v21;
  double v22;
  int v23;
  float v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  double v35;
  int i27;
  uint64_t v37;
  int v38;
  float v39;
  int v40;
  _WORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  double v51;
  int nn;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  int i15;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  double v73;
  int i4;
  uint64_t v75;
  _BYTE *v76;
  float v77;
  double v78;
  int v79;
  float v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int m;
  uint64_t v89;
  _WORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  double v101;
  int i21;
  uint64_t v103;
  _BYTE *v104;
  float v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  int hasAlpha;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  int i8;
  uint64_t v117;
  int v118;
  _WORD *v119;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  float32x2_t v130;
  float64x2_t v135;
  uint64_t v136;
  float32x2_t v137;
  _WORD *v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int ii;
  uint64_t v149;
  _DWORD *v150;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  double v158;
  int i2;
  uint64_t v160;
  _BYTE *v161;
  float v162;
  int v163;
  int v164;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  int v170;
  uint64_t v171;
  int v172;
  int i;
  uint64_t v174;
  int v175;
  _WORD *v176;
  int i31;
  uint64_t v178;
  int v179;
  float v180;
  int v181;
  _WORD *v182;
  int i18;
  uint64_t v184;
  _DWORD *v185;
  int i24;
  uint64_t v187;
  _BYTE *v188;
  float v189;
  int v190;
  int i12;
  uint64_t v192;
  int v193;
  _WORD *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  int v199;
  unint64_t v200;
  double v201;
  int i5;
  uint64_t v203;
  _WORD *v204;
  float v205;
  double v206;
  int v207;
  float v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  double v219;
  int kk;
  uint64_t v221;
  _DWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  unint64_t v228;
  double v229;
  int i3;
  uint64_t v231;
  _BYTE *v232;
  float v233;
  double v234;
  int v235;
  float v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  int j;
  uint64_t v245;
  _WORD *v246;
  unint64_t v247;
  int v248;
  float32x2_t v249;
  int64x2_t v251;
  uint64_t v252;
  uint64_t v253;
  float64x2_t v254;
  float64x2_t v255;
  uint64_t v256;
  int v257;
  _WORD *v258;
  float32x2_t v259;
  double v260;
  int jj;
  uint64_t v262;
  float *v263;
  float v264;
  float v265;
  float v266;
  int v267;
  uint64_t v268;
  _BYTE *v269;
  float v270;
  int v271;
  double v272;
  int v273;
  int v274;
  uint64_t v275;
  int v276;
  _WORD *v277;
  int i29;
  uint64_t v279;
  int v280;
  float v281;
  int v282;
  int i16;
  uint64_t v284;
  _DWORD *v285;
  int i22;
  uint64_t v287;
  _BYTE *v288;
  float v289;
  int v290;
  int i10;
  uint64_t v292;
  int v293;
  int i32;
  uint64_t v295;
  int v296;
  float v297;
  int v298;
  int i19;
  uint64_t v300;
  _DWORD *v301;
  int i25;
  uint64_t v303;
  _BYTE *v304;
  float v305;
  int v306;
  int i13;
  uint64_t v308;
  int v309;
  int v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  _WORD *v315;
  float v316;
  double v317;
  int v318;
  float v319;
  double v320;
  int v321;
  int i1;
  uint64_t v323;
  uint64_t v324;
  float v325;
  float v326;
  int v327;
  uint64_t v328;
  _BYTE *v329;
  float v330;
  double v331;
  int v332;
  float v333;
  double v334;
  int v335;
  int n;
  uint64_t v337;
  unsigned __int16 *v338;
  unint64_t v339;
  int v340;
  int v341;
  uint64_t v342;
  uint64_t v343;
  _WORD *v344;
  float v345;
  double v346;
  int v347;
  float v348;
  double v349;
  int v350;
  int mm;
  uint64_t v352;
  uint64_t v353;
  float v354;
  float v355;
  int v356;
  uint64_t v357;
  _BYTE *v358;
  float v359;
  double v360;
  int v361;
  float v362;
  double v363;
  int v364;
  int k;
  uint64_t v366;
  unsigned __int16 *v367;
  unint64_t v368;
  int i26;
  uint64_t v370;
  int v371;
  float v372;
  int v373;
  _WORD *v374;
  int i14;
  uint64_t v376;
  _DWORD *v377;
  int i20;
  uint64_t v379;
  _BYTE *v380;
  float v381;
  int v382;
  int i7;
  uint64_t v384;
  int v385;
  _WORD *v386;
  int i30;
  uint64_t v388;
  int v389;
  float v390;
  int v391;
  int i17;
  uint64_t v393;
  _DWORD *v394;
  int i23;
  uint64_t v396;
  _BYTE *v397;
  float v398;
  int v399;
  int i11;
  uint64_t v401;
  int v402;
  int i28;
  uint64_t v404;
  int v405;
  float v406;
  int v407;
  _WORD *v408;
  int v409;
  _DWORD *v410;
  uint64_t v411;
  _DWORD *v412;
  int v413;
  int v414;
  _BYTE *v415;
  uint64_t v416;
  _BYTE *v417;
  float v418;
  int v419;
  int i9;
  uint64_t v421;
  int v422;
  _WORD *v423;
  int v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  int v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  int v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  float64x2_t v441;
  int v442;
  int v443;
  int v444;
  int v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  uint64_t v449;
  int v450;
  int v451;
  float64x2_t v452;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 48))(*((_QWORD *)a3 + 8));
  if (a2)
  {
    if ((int)result > 11)
    {
      if ((_DWORD)result == 12)
      {
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
        if ((int)result > 10)
        {
          if ((_DWORD)result == 11 || (_DWORD)result == 14)
          {
            v166 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
            v167 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
            v168 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
            v169 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
            v170 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
            v448 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
            v437 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
            v171 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
            result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
            if ((result & 1) != 0)
            {
              if (v170)
              {
                v172 = v170;
                for (i = 0; i != v172; ++i)
                {
                  if (v169)
                  {
                    v174 = 0;
                    v175 = v169;
                    do
                    {
                      v176 = (_WORD *)(v168 + v174);
                      *v176 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v166 + v174));
                      result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v167 + v174));
                      v176[1] = result;
                      v174 += 4;
                      --v175;
                    }
                    while (v175);
                  }
                  v166 += v448;
                  v167 += v437;
                  v168 += v171;
                }
              }
            }
            else
            {
              v433 = v170;
              if (v170)
              {
                v274 = 0;
                do
                {
                  if (v169)
                  {
                    v275 = 0;
                    v276 = v169;
                    do
                    {
                      v277 = (_WORD *)(v168 + v275);
                      *v277 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v166 + v275));
                      v277[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v167 + v275));
                      result = PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>::unpremultiply((unsigned __int16 *)(v168 + v275));
                      v275 += 4;
                      --v276;
                    }
                    while (v276);
                  }
                  v166 += v448;
                  v167 += v437;
                  v168 += v171;
                  ++v274;
                }
                while (v274 != v433);
              }
            }
          }
        }
        else if ((_DWORD)result == 1)
        {
          v238 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          v239 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
          v240 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
          v451 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
          v241 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
          v440 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v242 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
          v243 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
          result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
          if ((result & 1) != 0)
          {
            if (v241)
            {
              for (j = 0; j != v241; ++j)
              {
                if (v451)
                {
                  v245 = 0;
                  v246 = (_WORD *)v240;
                  do
                  {
                    *v246 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v238 + 4 * v245));
                    LOBYTE(v247) = *(_BYTE *)(v239 + v245);
                    *(float *)&v247 = (double)v247 * 0.00392156863;
                    result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)&v247);
                    v246[1] = result;
                    ++v245;
                    v246 += 2;
                  }
                  while (v451 != (_DWORD)v245);
                }
                v238 += v440;
                v239 += v242;
                v240 += v243;
              }
            }
          }
          else if (v241)
          {
            for (k = 0; k != v241; ++k)
            {
              if (v451)
              {
                v366 = 0;
                v367 = (unsigned __int16 *)v240;
                do
                {
                  *v367 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v238 + 4 * v366));
                  LOBYTE(v368) = *(_BYTE *)(v239 + v366);
                  *(float *)&v368 = (double)v368 * 0.00392156863;
                  v367[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)&v368);
                  result = PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>::unpremultiply(v367);
                  ++v366;
                  v367 += 2;
                }
                while (v451 != (_DWORD)v366);
              }
              v238 += v440;
              v239 += v242;
              v240 += v243;
            }
          }
        }
        else if ((_DWORD)result == 7)
        {
          v82 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          v83 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
          v84 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
          v445 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
          v85 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
          v435 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v86 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
          v87 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
          result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
          if ((result & 1) != 0)
          {
            if (v85)
            {
              for (m = 0; m != v85; ++m)
              {
                if (v445)
                {
                  v89 = 0;
                  v90 = (_WORD *)v84;
                  do
                  {
                    *v90 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v82 + 4 * v89));
                    LOWORD(v91) = *(_WORD *)(v83 + 2 * v89);
                    *(float *)&v91 = (double)v91 * 0.0000152590219;
                    result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)&v91);
                    v90[1] = result;
                    ++v89;
                    v90 += 2;
                  }
                  while (v445 != (_DWORD)v89);
                }
                v82 += v435;
                v83 += v86;
                v84 += v87;
              }
            }
          }
          else if (v85)
          {
            for (n = 0; n != v85; ++n)
            {
              if (v445)
              {
                v337 = 0;
                v338 = (unsigned __int16 *)v84;
                do
                {
                  *v338 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v82 + 4 * v337));
                  LOWORD(v339) = *(_WORD *)(v83 + 2 * v337);
                  *(float *)&v339 = (double)v339 * 0.0000152590219;
                  v338[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)&v339);
                  result = PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>::unpremultiply(v338);
                  ++v337;
                  v338 += 2;
                }
                while (v445 != (_DWORD)v337);
              }
              v82 += v435;
              v83 += v86;
              v84 += v87;
            }
          }
        }
      }
      else if ((_DWORD)result == 15)
      {
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
        if ((int)result > 10)
        {
          if ((_DWORD)result == 11 || (_DWORD)result == 14)
          {
            v140 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
            v141 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
            v142 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
            v143 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
            v144 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
            v145 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
            v146 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
            v147 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
            result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
            if ((result & 1) != 0)
            {
              if (v144)
              {
                for (ii = 0; ii != v144; ++ii)
                {
                  if (v143)
                  {
                    v149 = 0;
                    v150 = (_DWORD *)v142;
                    do
                    {
                      *v150 = *(_DWORD *)(v140 + 4 * v149);
                      v150[1] = *(_DWORD *)(v141 + 4 * v149++);
                      v150 += 2;
                    }
                    while (v143 != (_DWORD)v149);
                  }
                  v140 += v145;
                  v141 += v146;
                  v142 += v147;
                }
              }
            }
            else if (v144)
            {
              for (jj = 0; jj != v144; ++jj)
              {
                if (v143)
                {
                  v262 = 0;
                  v263 = (float *)v142;
                  do
                  {
                    v264 = *(float *)(v140 + 4 * v262);
                    *v263 = v264;
                    v265 = *(float *)(v141 + 4 * v262);
                    v263[1] = v265;
                    if (v265 != 1.0)
                    {
                      v266 = v264 / v265;
                      if (v265 == 0.0)
                        v266 = 0.0;
                      *v263 = v266;
                    }
                    v263 += 2;
                    ++v262;
                  }
                  while (v143 != (_DWORD)v262);
                }
                v140 += v145;
                v141 += v146;
                v142 += v147;
              }
            }
          }
        }
        else if ((_DWORD)result == 1)
        {
          v210 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          v211 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
          v212 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
          v213 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
          v214 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
          v215 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v216 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
          v217 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
          result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
          if ((result & 1) != 0)
          {
            if (v214)
            {
              for (kk = 0; kk != v214; ++kk)
              {
                if (v213)
                {
                  v221 = 0;
                  v222 = (_DWORD *)v212;
                  do
                  {
                    LODWORD(v218) = *(_DWORD *)(v210 + 4 * v221);
                    *v222 = LODWORD(v218);
                    LOBYTE(v218) = *(_BYTE *)(v211 + v221);
                    v218 = (double)*(unint64_t *)&v218 * 0.00392156863;
                    *(float *)&v218 = v218;
                    v222[1] = LODWORD(v218);
                    ++v221;
                    v222 += 2;
                  }
                  while (v213 != (_DWORD)v221);
                }
                v210 += v215;
                v211 += v216;
                v212 += v217;
              }
            }
          }
          else if (v214)
          {
            for (mm = 0; mm != v214; ++mm)
            {
              if (v213)
              {
                v352 = 0;
                v353 = v212;
                do
                {
                  v354 = *(float *)(v210 + 4 * v352);
                  *(float *)v353 = v354;
                  LOBYTE(v219) = *(_BYTE *)(v211 + v352);
                  v219 = (double)*(unint64_t *)&v219 * 0.00392156863;
                  *(float *)&v219 = v219;
                  *(_DWORD *)(v353 + 4) = LODWORD(v219);
                  if (*(float *)&v219 != 1.0)
                  {
                    v355 = v354 / *(float *)&v219;
                    if (*(float *)&v219 == 0.0)
                      v355 = 0.0;
                    *(float *)v353 = v355;
                  }
                  v353 += 8;
                  ++v352;
                }
                while (v213 != (_DWORD)v352);
              }
              v210 += v215;
              v211 += v216;
              v212 += v217;
            }
          }
        }
        else if ((_DWORD)result == 7)
        {
          v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
          v44 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
          v45 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
          v46 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
          v47 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v48 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
          v49 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
          result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
          if ((result & 1) != 0)
          {
            if (v46)
            {
              for (nn = 0; nn != v46; ++nn)
              {
                if (v45)
                {
                  v53 = 0;
                  v54 = (_DWORD *)v44;
                  do
                  {
                    LOWORD(v50) = *(_WORD *)(v43 + 2 * v53);
                    v50 = (double)*(unint64_t *)&v50 * 0.0000152590219;
                    *(float *)&v50 = v50;
                    *v54 = *(_DWORD *)(v42 + 4 * v53);
                    v54[1] = LODWORD(v50);
                    v54 += 2;
                    ++v53;
                  }
                  while (v45 != (_DWORD)v53);
                }
                v42 += v47;
                v43 += v48;
                v44 += v49;
              }
            }
          }
          else if (v46)
          {
            for (i1 = 0; i1 != v46; ++i1)
            {
              if (v45)
              {
                v323 = 0;
                v324 = v44;
                do
                {
                  v325 = *(float *)(v42 + 4 * v323);
                  LOWORD(v51) = *(_WORD *)(v43 + 2 * v323);
                  v51 = (double)*(unint64_t *)&v51 * 0.0000152590219;
                  *(float *)&v51 = v51;
                  *(float *)v324 = v325;
                  *(_DWORD *)(v324 + 4) = LODWORD(v51);
                  if (*(float *)&v51 != 1.0)
                  {
                    v326 = v325 / *(float *)&v51;
                    if (*(float *)&v51 == 0.0)
                      v326 = 0.0;
                    *(float *)v324 = v326;
                  }
                  v324 += 8;
                  ++v323;
                }
                while (v45 != (_DWORD)v323);
              }
              v42 += v47;
              v43 += v48;
              v44 += v49;
            }
          }
        }
      }
    }
    else if ((_DWORD)result == 2)
    {
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
      if ((int)result > 10)
      {
        if ((_DWORD)result == 11 || (_DWORD)result == 14)
        {
          v152 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          v153 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
          v154 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
          v447 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
          v155 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
          v436 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v156 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
          v430 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
          result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
          if ((result & 1) != 0)
          {
            if (v155)
            {
              for (i2 = 0; i2 != v155; ++i2)
              {
                if (v447)
                {
                  v160 = 0;
                  v161 = (_BYTE *)v154;
                  do
                  {
                    LOBYTE(v158) = *(_BYTE *)(v152 + v160);
                    v162 = (double)*(unint64_t *)&v158 * 0.00392156863;
                    v163 = vcvtmd_s64_f64((float)(v162 * 255.0) + 0.5 + 0.0000001);
                    if (v163 >= 255)
                      v163 = 255;
                    *v161 = v163 & ~(v163 >> 31);
                    v158 = (float)(*(float *)(v153 + 4 * v160) * 255.0) + 0.5 + 0.0000001;
                    v164 = vcvtmd_s64_f64(v158);
                    if (v164 >= 255)
                      v164 = 255;
                    v161[1] = v164 & ~(v164 >> 31);
                    ++v160;
                    v161 += 2;
                  }
                  while (v447 != (_DWORD)v160);
                }
                v152 += v436;
                v153 += v156;
                v154 += v430;
              }
            }
          }
          else if (v155)
          {
            v267 = 0;
            v425 = v156;
            do
            {
              if (v447)
              {
                v268 = 0;
                v269 = (_BYTE *)v154;
                do
                {
                  LOBYTE(v157) = *(_BYTE *)(v152 + v268);
                  v270 = (double)v157 * 0.00392156863;
                  v271 = vcvtmd_s64_f64((float)(v270 * 255.0) + 0.5 + 0.0000001);
                  if (v271 >= 255)
                    v271 = 255;
                  *v269 = v271 & ~(v271 >> 31);
                  v272 = (float)(*(float *)(v153 + 4 * v268) * 255.0) + 0.5 + 0.0000001;
                  v273 = vcvtmd_s64_f64(v272);
                  if (v273 >= 255)
                    v273 = 255;
                  v269[1] = v273 & ~(v273 >> 31);
                  result = (uint64_t)PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>::unpremultiply(v269, v272);
                  ++v268;
                  v269 += 2;
                }
                while (v447 != (_DWORD)v268);
              }
              v152 += v436;
              v153 += v425;
              v154 += v430;
              ++v267;
            }
            while (v267 != v155);
          }
        }
      }
      else if ((_DWORD)result == 1)
      {
        v223 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v224 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
        v225 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
        v450 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v226 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v439 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v227 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
        v432 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
        result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
        if ((result & 1) != 0)
        {
          if (v226)
          {
            for (i3 = 0; i3 != v226; ++i3)
            {
              if (v450)
              {
                v231 = 0;
                v232 = (_BYTE *)v225;
                do
                {
                  LOBYTE(v229) = *(_BYTE *)(v223 + v231);
                  v233 = (double)*(unint64_t *)&v229 * 0.00392156863;
                  v234 = (float)(v233 * 255.0) + 0.5 + 0.0000001;
                  v235 = vcvtmd_s64_f64(v234);
                  if (v235 >= 255)
                    v235 = 255;
                  *v232 = v235 & ~(v235 >> 31);
                  LOBYTE(v234) = *(_BYTE *)(v224 + v231);
                  v236 = (double)*(unint64_t *)&v234 * 0.00392156863;
                  v229 = (float)(v236 * 255.0) + 0.5 + 0.0000001;
                  v237 = vcvtmd_s64_f64(v229);
                  if (v237 >= 255)
                    v237 = 255;
                  v232[1] = v237 & ~(v237 >> 31);
                  ++v231;
                  v232 += 2;
                }
                while (v450 != (_DWORD)v231);
              }
              v223 += v439;
              v224 += v227;
              v225 += v432;
            }
          }
        }
        else if (v226)
        {
          v356 = 0;
          v427 = v227;
          do
          {
            if (v450)
            {
              v357 = 0;
              v358 = (_BYTE *)v225;
              do
              {
                LOBYTE(v228) = *(_BYTE *)(v223 + v357);
                v359 = (double)v228 * 0.00392156863;
                v360 = (float)(v359 * 255.0) + 0.5 + 0.0000001;
                v361 = vcvtmd_s64_f64(v360);
                if (v361 >= 255)
                  v361 = 255;
                *v358 = v361 & ~(v361 >> 31);
                LOBYTE(v360) = *(_BYTE *)(v224 + v357);
                v362 = (double)*(unint64_t *)&v360 * 0.00392156863;
                v363 = (float)(v362 * 255.0) + 0.5 + 0.0000001;
                v364 = vcvtmd_s64_f64(v363);
                if (v364 >= 255)
                  v364 = 255;
                v358[1] = v364 & ~(v364 >> 31);
                result = (uint64_t)PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>::unpremultiply(v358, v363);
                ++v357;
                v358 += 2;
              }
              while (v450 != (_DWORD)v357);
            }
            v223 += v439;
            v224 += v427;
            v225 += v432;
            ++v356;
          }
          while (v356 != v226);
        }
      }
      else if ((_DWORD)result == 7)
      {
        v67 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v68 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
        v69 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
        v444 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v70 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v434 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v71 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
        v428 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
        result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
        if ((result & 1) != 0)
        {
          if (v70)
          {
            for (i4 = 0; i4 != v70; ++i4)
            {
              if (v444)
              {
                v75 = 0;
                v76 = (_BYTE *)v69;
                do
                {
                  LOBYTE(v73) = *(_BYTE *)(v67 + v75);
                  v77 = (double)*(unint64_t *)&v73 * 0.00392156863;
                  v78 = (float)(v77 * 255.0) + 0.5 + 0.0000001;
                  v79 = vcvtmd_s64_f64(v78);
                  if (v79 >= 255)
                    v79 = 255;
                  *v76 = v79 & ~(v79 >> 31);
                  LOWORD(v78) = *(_WORD *)(v68 + 2 * v75);
                  v80 = (double)*(unint64_t *)&v78 * 0.0000152590219;
                  v73 = (float)(v80 * 255.0) + 0.5 + 0.0000001;
                  v81 = vcvtmd_s64_f64(v73);
                  if (v81 >= 255)
                    v81 = 255;
                  v76[1] = v81 & ~(v81 >> 31);
                  ++v75;
                  v76 += 2;
                }
                while (v444 != (_DWORD)v75);
              }
              v67 += v434;
              v68 += v71;
              v69 += v428;
            }
          }
        }
        else if (v70)
        {
          v327 = 0;
          v426 = v71;
          do
          {
            if (v444)
            {
              v328 = 0;
              v329 = (_BYTE *)v69;
              do
              {
                LOBYTE(v72) = *(_BYTE *)(v67 + v328);
                v330 = (double)v72 * 0.00392156863;
                v331 = (float)(v330 * 255.0) + 0.5 + 0.0000001;
                v332 = vcvtmd_s64_f64(v331);
                if (v332 >= 255)
                  v332 = 255;
                *v329 = v332 & ~(v332 >> 31);
                LOWORD(v331) = *(_WORD *)(v68 + 2 * v328);
                v333 = (double)*(unint64_t *)&v331 * 0.0000152590219;
                v334 = (float)(v333 * 255.0) + 0.5 + 0.0000001;
                v335 = vcvtmd_s64_f64(v334);
                if (v335 >= 255)
                  v335 = 255;
                v329[1] = v335 & ~(v335 >> 31);
                result = (uint64_t)PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>::unpremultiply(v329, v334);
                ++v328;
                v329 += 2;
              }
              while (v444 != (_DWORD)v328);
            }
            v67 += v434;
            v68 += v426;
            v69 += v428;
            ++v327;
          }
          while (v327 != v70);
        }
      }
    }
    else if ((_DWORD)result == 8)
    {
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
      if ((int)result > 10)
      {
        if ((_DWORD)result == 11 || (_DWORD)result == 14)
        {
          v121 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
          v122 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
          v123 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
          v429 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
          v124 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
          v125 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
          v126 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
          v127 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
          result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
          if ((result & 1) != 0)
          {
            if (v124)
            {
              v129 = 0;
              v130 = (float32x2_t)vdup_n_s32(0x477FFF00u);
              __asm { FMOV            V2.2D, #0.5 }
              v135 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
              do
              {
                if (v429)
                {
                  v136 = 0;
                  do
                  {
                    LOWORD(v128) = *(_WORD *)(v121 + 2 * v136);
                    v137.f32[0] = (double)v128 * 0.0000152590219;
                    v137.i32[1] = *(_DWORD *)(v122 + 4 * v136);
                    v128 = (unint64_t)vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(v137, v130)), _Q2), v135)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
                    v138 = (_WORD *)(v123 + 4 * v136);
                    v138[1] = WORD2(v128);
                    *v138 = v128;
                    ++v136;
                  }
                  while (v429 != (_DWORD)v136);
                }
                v121 += v125;
                v122 += v126;
                v123 += v127;
                ++v129;
              }
              while (v129 != v124);
            }
          }
          else if (v124)
          {
            v248 = 0;
            v249 = (float32x2_t)vdup_n_s32(0x477FFF00u);
            __asm { FMOV            V1.2D, #0.5 }
            v251 = vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
            v441 = (float64x2_t)v251;
            v452 = _Q1;
            v424 = v124;
            do
            {
              v252 = v126;
              v253 = v125;
              v255 = v441;
              v254 = v452;
              if (v429)
              {
                v256 = 0;
                v257 = v429;
                v258 = (_WORD *)v123;
                do
                {
                  v251.i16[0] = *(_WORD *)(v121 + 2 * v256);
                  v259.f32[0] = (double)v251.u64[0] * 0.0000152590219;
                  v259.i32[1] = *(_DWORD *)(v122 + 4 * v256);
                  v260 = COERCE_DOUBLE(vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(v259, v249)), v254), v255)))), (int32x2_t)0xFFFF0000FFFFLL), 0));
                  v258[1] = WORD2(v260);
                  *v258 = LOWORD(v260);
                  result = (uint64_t)PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>::unpremultiply(v258, v260);
                  v255 = v441;
                  v254 = v452;
                  v258 += 2;
                  ++v256;
                  --v257;
                }
                while (v257);
              }
              v125 = v253;
              v121 += v253;
              v126 = v252;
              v122 += v252;
              v123 += v127;
              ++v248;
            }
            while (v248 != v424);
          }
        }
      }
      else if ((_DWORD)result == 1)
      {
        v195 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v196 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
        v197 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
        v198 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v199 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v449 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v438 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
        v431 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
        result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
        if ((result & 1) != 0)
        {
          if (v199)
          {
            for (i5 = 0; i5 != v199; ++i5)
            {
              if ((_DWORD)v198)
              {
                v203 = 0;
                v204 = (_WORD *)v197;
                do
                {
                  LOWORD(v201) = *(_WORD *)(v195 + 2 * v203);
                  v205 = (double)*(unint64_t *)&v201 * 0.0000152590219;
                  v206 = (float)(v205 * 65535.0) + 0.5 + 0.0000001;
                  v207 = vcvtmd_s64_f64(v206);
                  if (v207 >= 0xFFFF)
                    v207 = 0xFFFF;
                  *v204 = v207 & ~(unsigned __int16)(v207 >> 31);
                  LOBYTE(v206) = *(_BYTE *)(v196 + v203);
                  v208 = (double)*(unint64_t *)&v206 * 0.00392156863;
                  v201 = (float)(v208 * 65535.0) + 0.5 + 0.0000001;
                  v209 = vcvtmd_s64_f64(v201);
                  if (v209 >= 0xFFFF)
                    v209 = 0xFFFF;
                  v204[1] = v209 & ~(unsigned __int16)(v209 >> 31);
                  ++v203;
                  v204 += 2;
                }
                while ((_DWORD)v198 != (_DWORD)v203);
              }
              v195 += v449;
              v196 += v438;
              v197 += v431;
            }
          }
        }
        else if (v199)
        {
          v340 = 0;
          v341 = v198;
          do
          {
            v342 = v198;
            if ((_DWORD)v198)
            {
              v343 = 0;
              v344 = (_WORD *)v197;
              do
              {
                LOWORD(v200) = *(_WORD *)(v195 + 2 * v343);
                v345 = (double)v200 * 0.0000152590219;
                v346 = (float)(v345 * 65535.0) + 0.5 + 0.0000001;
                v347 = vcvtmd_s64_f64(v346);
                if (v347 >= 0xFFFF)
                  v347 = 0xFFFF;
                *v344 = v347 & ~(unsigned __int16)(v347 >> 31);
                LOBYTE(v346) = *(_BYTE *)(v196 + v343);
                v348 = (double)*(unint64_t *)&v346 * 0.00392156863;
                v349 = (float)(v348 * 65535.0) + 0.5 + 0.0000001;
                v350 = vcvtmd_s64_f64(v349);
                if (v350 >= 0xFFFF)
                  v350 = 0xFFFF;
                v344[1] = v350 & ~(unsigned __int16)(v350 >> 31);
                result = (uint64_t)PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>::unpremultiply(v344, v349);
                ++v343;
                v344 += 2;
              }
              while (v341 != (_DWORD)v343);
            }
            v195 += v449;
            v196 += v438;
            v197 += v431;
            ++v340;
            v198 = v342;
          }
          while (v340 != v199);
        }
      }
      else if ((_DWORD)result == 7)
      {
        v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
        v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
        v443 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v11 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v12 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        v13 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
        v14 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
        result = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
        if ((result & 1) != 0)
        {
          if (v11)
          {
            for (i6 = 0; i6 != v11; ++i6)
            {
              if (v443)
              {
                v18 = 0;
                v19 = v443;
                do
                {
                  v20 = (_WORD *)(v10 + 2 * v18);
                  LOWORD(v16) = *(_WORD *)(v8 + v18);
                  v21 = (double)*(unint64_t *)&v16 * 0.0000152590219;
                  v22 = (float)(v21 * 65535.0) + 0.5 + 0.0000001;
                  v23 = vcvtmd_s64_f64(v22);
                  if (v23 >= 0xFFFF)
                    v23 = 0xFFFF;
                  *v20 = v23 & ~(unsigned __int16)(v23 >> 31);
                  LOWORD(v22) = *(_WORD *)(v9 + v18);
                  v24 = (double)*(unint64_t *)&v22 * 0.0000152590219;
                  v16 = (float)(v24 * 65535.0) + 0.5 + 0.0000001;
                  v25 = vcvtmd_s64_f64(v16);
                  if (v25 >= 0xFFFF)
                    v25 = 0xFFFF;
                  v20[1] = v25 & ~(unsigned __int16)(v25 >> 31);
                  v18 += 2;
                  --v19;
                }
                while (v19);
              }
              v8 += v12;
              v9 += v13;
              v10 += v14;
            }
          }
        }
        else if (v11)
        {
          v310 = 0;
          v442 = v11;
          do
          {
            v311 = v13;
            v312 = v12;
            if (v443)
            {
              v313 = 0;
              v314 = v443;
              do
              {
                v315 = (_WORD *)(v10 + 2 * v313);
                LOWORD(v15) = *(_WORD *)(v8 + v313);
                v316 = (double)v15 * 0.0000152590219;
                v317 = (float)(v316 * 65535.0) + 0.5 + 0.0000001;
                v318 = vcvtmd_s64_f64(v317);
                if (v318 >= 0xFFFF)
                  v318 = 0xFFFF;
                *v315 = v318 & ~(unsigned __int16)(v318 >> 31);
                LOWORD(v317) = *(_WORD *)(v9 + v313);
                v319 = (double)*(unint64_t *)&v317 * 0.0000152590219;
                v320 = (float)(v319 * 65535.0) + 0.5 + 0.0000001;
                v321 = vcvtmd_s64_f64(v320);
                if (v321 >= 0xFFFF)
                  v321 = 0xFFFF;
                v315[1] = v321 & ~(unsigned __int16)(v321 >> 31);
                result = (uint64_t)PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>::unpremultiply(v315, v320);
                v313 += 2;
                --v314;
              }
              while (v314);
            }
            v12 = v312;
            v8 += v312;
            v13 = v311;
            v9 += v311;
            v10 += v14;
            ++v310;
          }
          while (v310 != v442);
        }
      }
    }
  }
  else if ((int)result > 11)
  {
    if ((_DWORD)result == 12)
    {
      v107 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v108 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
      v109 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v110 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
      hasAlpha = PCPixelFormat::hasAlpha(0xEu);
      v112 = PCPixelFormat::hasAlpha(0xCu);
      v113 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v114 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v446 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
      v115 = result;
      if (hasAlpha)
      {
        if (v112)
        {
          if (v109 == v110)
          {
            if (v114)
            {
              for (i7 = 0; i7 != v114; ++i7)
              {
                if (v113)
                {
                  v384 = 0;
                  v385 = v113;
                  do
                  {
                    v386 = (_WORD *)(v108 + v384);
                    *v386 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v107 + v384));
                    result = 15360;
                    v386[1] = 15360;
                    v384 += 4;
                    --v385;
                  }
                  while (v385);
                }
                v107 += v446;
                v108 += v115;
              }
            }
          }
          else if ((v109 & 1) != 0)
          {
            if (v114)
            {
              for (i8 = 0; i8 != v114; ++i8)
              {
                if (v113)
                {
                  v117 = 0;
                  v118 = v113;
                  do
                  {
                    v119 = (_WORD *)(v108 + v117);
                    *v119 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v107 + v117));
                    result = 15360;
                    v119[1] = 15360;
                    v117 += 4;
                    --v118;
                  }
                  while (v118);
                }
                v107 += v446;
                v108 += v115;
              }
            }
          }
          else if (v114)
          {
            for (i9 = 0; i9 != v114; ++i9)
            {
              if (v113)
              {
                v421 = 0;
                v422 = v113;
                do
                {
                  v423 = (_WORD *)(v108 + v421);
                  *v423 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v107 + v421));
                  v423[1] = 15360;
                  result = PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>::premultiply((unsigned __int16 *)(v108 + v421));
                  v421 += 4;
                  --v422;
                }
                while (v422);
              }
              v107 += v446;
              v108 += v115;
            }
          }
        }
        else if ((v109 & 1) != 0)
        {
          if (v114)
          {
            for (i10 = 0; i10 != v114; ++i10)
            {
              if (v113)
              {
                v292 = 0;
                v293 = v113;
                do
                {
                  result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v107 + v292));
                  *(_WORD *)(v108 + v292) = result;
                  v292 += 4;
                  --v293;
                }
                while (v293);
              }
              v107 += v446;
              v108 += v115;
            }
          }
        }
        else if (v114)
        {
          for (i11 = 0; i11 != v114; ++i11)
          {
            if (v113)
            {
              v401 = 0;
              v402 = v113;
              do
              {
                result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v107 + v401));
                *(_WORD *)(v108 + v401) = result;
                v401 += 4;
                --v402;
              }
              while (v402);
            }
            v107 += v446;
            v108 += v115;
          }
        }
      }
      else if ((v112 & 1) != 0)
      {
        if (v114)
        {
          for (i12 = 0; i12 != v114; ++i12)
          {
            if (v113)
            {
              v192 = 0;
              v193 = v113;
              do
              {
                v194 = (_WORD *)(v108 + v192);
                *v194 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v107 + v192));
                result = 15360;
                v194[1] = 15360;
                v192 += 4;
                --v193;
              }
              while (v193);
            }
            v107 += v446;
            v108 += v115;
          }
        }
      }
      else if (v114)
      {
        for (i13 = 0; i13 != v114; ++i13)
        {
          if (v113)
          {
            v308 = 0;
            v309 = v113;
            do
            {
              result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v107 + v308));
              *(_WORD *)(v108 + v308) = result;
              v308 += 4;
              --v309;
            }
            while (v309);
          }
          v107 += v446;
          v108 += v115;
        }
      }
    }
    else if ((_DWORD)result == 15)
    {
      v55 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v56 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
      v57 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v58 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
      v59 = PCPixelFormat::hasAlpha(0xEu);
      v60 = PCPixelFormat::hasAlpha(0xFu);
      v61 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v62 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v63 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
      if (v59)
      {
        if (v60)
        {
          if (v57 == v58)
          {
            if (v62)
            {
              for (i14 = 0; i14 != v62; ++i14)
              {
                if (v61)
                {
                  v376 = 0;
                  v377 = (_DWORD *)v56;
                  do
                  {
                    *v377 = *(_DWORD *)(v55 + 4 * v376);
                    v377[1] = 1065353216;
                    ++v376;
                    v377 += 2;
                  }
                  while (v61 != (_DWORD)v376);
                }
                v55 += v63;
                v56 += result;
              }
            }
          }
          else if ((v57 & 1) != 0)
          {
            if (v62)
            {
              for (i15 = 0; i15 != v62; ++i15)
              {
                if (v61)
                {
                  v65 = 0;
                  v66 = (_DWORD *)v56;
                  do
                  {
                    *v66 = *(_DWORD *)(v55 + 4 * v65);
                    v66[1] = 1065353216;
                    ++v65;
                    v66 += 2;
                  }
                  while (v61 != (_DWORD)v65);
                }
                v55 += v63;
                v56 += result;
              }
            }
          }
          else if (v62)
          {
            v409 = 0;
            v410 = (_DWORD *)(v56 + 4);
            do
            {
              if (v61)
              {
                v411 = 0;
                v412 = v410;
                do
                {
                  v413 = *(_DWORD *)(v55 + 4 * v411);
                  *v412 = 1065353216;
                  *(v412 - 1) = v413;
                  ++v411;
                  v412 += 2;
                }
                while (v61 != (_DWORD)v411);
              }
              v55 += v63;
              ++v409;
              v410 = (_DWORD *)((char *)v410 + result);
            }
            while (v409 != v62);
          }
        }
        else if ((v57 & 1) != 0)
        {
          if (v62)
          {
            for (i16 = 0; i16 != v62; ++i16)
            {
              if (v61)
              {
                v284 = 0;
                v285 = (_DWORD *)v56;
                do
                {
                  *v285 = *(_DWORD *)(v55 + 4 * v284);
                  v285 += 2;
                  ++v284;
                }
                while (v61 != (_DWORD)v284);
              }
              v55 += v63;
              v56 += result;
            }
          }
        }
        else if (v62)
        {
          for (i17 = 0; i17 != v62; ++i17)
          {
            if (v61)
            {
              v393 = 0;
              v394 = (_DWORD *)v56;
              do
              {
                *v394 = *(_DWORD *)(v55 + 4 * v393);
                v394 += 2;
                ++v393;
              }
              while (v61 != (_DWORD)v393);
            }
            v55 += v63;
            v56 += result;
          }
        }
      }
      else if ((v60 & 1) != 0)
      {
        if (v62)
        {
          for (i18 = 0; i18 != v62; ++i18)
          {
            if (v61)
            {
              v184 = 0;
              v185 = (_DWORD *)v56;
              do
              {
                *v185 = *(_DWORD *)(v55 + 4 * v184);
                v185[1] = 1065353216;
                ++v184;
                v185 += 2;
              }
              while (v61 != (_DWORD)v184);
            }
            v55 += v63;
            v56 += result;
          }
        }
      }
      else if (v62)
      {
        for (i19 = 0; i19 != v62; ++i19)
        {
          if (v61)
          {
            v300 = 0;
            v301 = (_DWORD *)v56;
            do
            {
              *v301 = *(_DWORD *)(v55 + 4 * v300);
              v301 += 2;
              ++v300;
            }
            while (v61 != (_DWORD)v300);
          }
          v55 += v63;
          v56 += result;
        }
      }
    }
  }
  else if ((_DWORD)result == 2)
  {
    v92 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
    v93 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
    v94 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
    v95 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
    v96 = PCPixelFormat::hasAlpha(1u);
    v97 = PCPixelFormat::hasAlpha(2u);
    v98 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
    v99 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
    v100 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
    if (v96)
    {
      if (v97)
      {
        if (v94 == v95)
        {
          if (v99)
          {
            for (i20 = 0; i20 != v99; ++i20)
            {
              if (v98)
              {
                v379 = 0;
                v380 = (_BYTE *)v93;
                do
                {
                  LOBYTE(v101) = *(_BYTE *)(v92 + v379);
                  v381 = (double)*(unint64_t *)&v101 * 0.00392156863;
                  v101 = (float)(v381 * 255.0) + 0.5 + 0.0000001;
                  v382 = vcvtmd_s64_f64(v101);
                  if (v382 >= 255)
                    v382 = 255;
                  *v380 = v382 & ~(v382 >> 31);
                  v380[1] = -1;
                  ++v379;
                  v380 += 2;
                }
                while (v98 != (_DWORD)v379);
              }
              v92 += v100;
              v93 += result;
            }
          }
        }
        else if ((v94 & 1) != 0)
        {
          if (v99)
          {
            for (i21 = 0; i21 != v99; ++i21)
            {
              if (v98)
              {
                v103 = 0;
                v104 = (_BYTE *)v93;
                do
                {
                  LOBYTE(v101) = *(_BYTE *)(v92 + v103);
                  v105 = (double)*(unint64_t *)&v101 * 0.00392156863;
                  v101 = (float)(v105 * 255.0) + 0.5 + 0.0000001;
                  v106 = vcvtmd_s64_f64(v101);
                  if (v106 >= 255)
                    v106 = 255;
                  *v104 = v106 & ~(v106 >> 31);
                  v104[1] = -1;
                  ++v103;
                  v104 += 2;
                }
                while (v98 != (_DWORD)v103);
              }
              v92 += v100;
              v93 += result;
            }
          }
        }
        else if (v99)
        {
          v414 = 0;
          v415 = (_BYTE *)(v93 + 1);
          do
          {
            if (v98)
            {
              v416 = 0;
              v417 = v415;
              do
              {
                LOBYTE(v101) = *(_BYTE *)(v92 + v416);
                v418 = (double)*(unint64_t *)&v101 * 0.00392156863;
                v101 = (float)(v418 * 255.0) + 0.5 + 0.0000001;
                v419 = vcvtmd_s64_f64(v101);
                if (v419 >= 255)
                  v419 = 255;
                *v417 = -1;
                *(v417 - 1) = v419 & ~(v419 >> 31);
                ++v416;
                v417 += 2;
              }
              while (v98 != (_DWORD)v416);
            }
            v92 += v100;
            ++v414;
            v415 += result;
          }
          while (v414 != v99);
        }
      }
      else if ((v94 & 1) != 0)
      {
        if (v99)
        {
          for (i22 = 0; i22 != v99; ++i22)
          {
            if (v98)
            {
              v287 = 0;
              v288 = (_BYTE *)v93;
              do
              {
                LOBYTE(v101) = *(_BYTE *)(v92 + v287);
                v289 = (double)*(unint64_t *)&v101 * 0.00392156863;
                v101 = (float)(v289 * 255.0) + 0.5 + 0.0000001;
                v290 = vcvtmd_s64_f64(v101);
                if (v290 >= 255)
                  v290 = 255;
                *v288 = v290 & ~(v290 >> 31);
                v288 += 2;
                ++v287;
              }
              while (v98 != (_DWORD)v287);
            }
            v92 += v100;
            v93 += result;
          }
        }
      }
      else if (v99)
      {
        for (i23 = 0; i23 != v99; ++i23)
        {
          if (v98)
          {
            v396 = 0;
            v397 = (_BYTE *)v93;
            do
            {
              LOBYTE(v101) = *(_BYTE *)(v92 + v396);
              v398 = (double)*(unint64_t *)&v101 * 0.00392156863;
              v101 = (float)(v398 * 255.0) + 0.5 + 0.0000001;
              v399 = vcvtmd_s64_f64(v101);
              if (v399 >= 255)
                v399 = 255;
              *v397 = v399 & ~(v399 >> 31);
              v397 += 2;
              ++v396;
            }
            while (v98 != (_DWORD)v396);
          }
          v92 += v100;
          v93 += result;
        }
      }
    }
    else if ((v97 & 1) != 0)
    {
      if (v99)
      {
        for (i24 = 0; i24 != v99; ++i24)
        {
          if (v98)
          {
            v187 = 0;
            v188 = (_BYTE *)v93;
            do
            {
              LOBYTE(v101) = *(_BYTE *)(v92 + v187);
              v189 = (double)*(unint64_t *)&v101 * 0.00392156863;
              v101 = (float)(v189 * 255.0) + 0.5 + 0.0000001;
              v190 = vcvtmd_s64_f64(v101);
              if (v190 >= 255)
                v190 = 255;
              *v188 = v190 & ~(v190 >> 31);
              v188[1] = -1;
              ++v187;
              v188 += 2;
            }
            while (v98 != (_DWORD)v187);
          }
          v92 += v100;
          v93 += result;
        }
      }
    }
    else if (v99)
    {
      for (i25 = 0; i25 != v99; ++i25)
      {
        if (v98)
        {
          v303 = 0;
          v304 = (_BYTE *)v93;
          do
          {
            LOBYTE(v101) = *(_BYTE *)(v92 + v303);
            v305 = (double)*(unint64_t *)&v101 * 0.00392156863;
            v101 = (float)(v305 * 255.0) + 0.5 + 0.0000001;
            v306 = vcvtmd_s64_f64(v101);
            if (v306 >= 255)
              v306 = 255;
            *v304 = v306 & ~(v306 >> 31);
            v304 += 2;
            ++v303;
          }
          while (v98 != (_DWORD)v303);
        }
        v92 += v100;
        v93 += result;
      }
    }
  }
  else if ((_DWORD)result == 8)
  {
    v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
    v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 16))(*((_QWORD *)a3 + 8));
    v28 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
    v29 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a3 + 48))(a3);
    v30 = PCPixelFormat::hasAlpha(7u);
    v31 = PCPixelFormat::hasAlpha(8u);
    v32 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
    v33 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
    v34 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a3 + 8) + 64))(*((_QWORD *)a3 + 8));
    if (v30)
    {
      if (v31)
      {
        if (v28 == v29)
        {
          if (v33)
          {
            for (i26 = 0; i26 != v33; ++i26)
            {
              if (v32)
              {
                v370 = 0;
                v371 = v32;
                do
                {
                  LOWORD(v35) = *(_WORD *)(v26 + v370);
                  v372 = (double)*(unint64_t *)&v35 * 0.0000152590219;
                  v35 = (float)(v372 * 65535.0) + 0.5 + 0.0000001;
                  v373 = vcvtmd_s64_f64(v35);
                  v374 = (_WORD *)(v27 + 2 * v370);
                  if (v373 >= 0xFFFF)
                    v373 = 0xFFFF;
                  *v374 = v373 & ~(unsigned __int16)(v373 >> 31);
                  v374[1] = -1;
                  v370 += 2;
                  --v371;
                }
                while (v371);
              }
              v26 += v34;
              v27 += result;
            }
          }
        }
        else if ((v28 & 1) != 0)
        {
          if (v33)
          {
            for (i27 = 0; i27 != v33; ++i27)
            {
              if (v32)
              {
                v37 = 0;
                v38 = v32;
                do
                {
                  LOWORD(v35) = *(_WORD *)(v26 + v37);
                  v39 = (double)*(unint64_t *)&v35 * 0.0000152590219;
                  v35 = (float)(v39 * 65535.0) + 0.5 + 0.0000001;
                  v40 = vcvtmd_s64_f64(v35);
                  v41 = (_WORD *)(v27 + 2 * v37);
                  if (v40 >= 0xFFFF)
                    v40 = 0xFFFF;
                  *v41 = v40 & ~(unsigned __int16)(v40 >> 31);
                  v41[1] = -1;
                  v37 += 2;
                  --v38;
                }
                while (v38);
              }
              v26 += v34;
              v27 += result;
            }
          }
        }
        else if (v33)
        {
          for (i28 = 0; i28 != v33; ++i28)
          {
            if (v32)
            {
              v404 = 0;
              v405 = v32;
              do
              {
                LOWORD(v35) = *(_WORD *)(v26 + v404);
                v406 = (double)*(unint64_t *)&v35 * 0.0000152590219;
                v35 = (float)(v406 * 65535.0) + 0.5 + 0.0000001;
                v407 = vcvtmd_s64_f64(v35);
                v408 = (_WORD *)(v27 + 2 * v404);
                if (v407 >= 0xFFFF)
                  v407 = 0xFFFF;
                v408[1] = -1;
                *v408 = v407 & ~(unsigned __int16)(v407 >> 31);
                v404 += 2;
                --v405;
              }
              while (v405);
            }
            v26 += v34;
            v27 += result;
          }
        }
      }
      else if ((v28 & 1) != 0)
      {
        if (v33)
        {
          for (i29 = 0; i29 != v33; ++i29)
          {
            if (v32)
            {
              v279 = 0;
              v280 = v32;
              do
              {
                LOWORD(v35) = *(_WORD *)(v26 + v279);
                v281 = (double)*(unint64_t *)&v35 * 0.0000152590219;
                v35 = (float)(v281 * 65535.0) + 0.5 + 0.0000001;
                v282 = vcvtmd_s64_f64(v35);
                if (v282 >= 0xFFFF)
                  v282 = 0xFFFF;
                *(_WORD *)(v27 + 2 * v279) = v282 & ~(unsigned __int16)(v282 >> 31);
                v279 += 2;
                --v280;
              }
              while (v280);
            }
            v26 += v34;
            v27 += result;
          }
        }
      }
      else if (v33)
      {
        for (i30 = 0; i30 != v33; ++i30)
        {
          if (v32)
          {
            v388 = 0;
            v389 = v32;
            do
            {
              LOWORD(v35) = *(_WORD *)(v26 + v388);
              v390 = (double)*(unint64_t *)&v35 * 0.0000152590219;
              v35 = (float)(v390 * 65535.0) + 0.5 + 0.0000001;
              v391 = vcvtmd_s64_f64(v35);
              if (v391 >= 0xFFFF)
                v391 = 0xFFFF;
              *(_WORD *)(v27 + 2 * v388) = v391 & ~(unsigned __int16)(v391 >> 31);
              v388 += 2;
              --v389;
            }
            while (v389);
          }
          v26 += v34;
          v27 += result;
        }
      }
    }
    else if ((v31 & 1) != 0)
    {
      if (v33)
      {
        for (i31 = 0; i31 != v33; ++i31)
        {
          if (v32)
          {
            v178 = 0;
            v179 = v32;
            do
            {
              LOWORD(v35) = *(_WORD *)(v26 + v178);
              v180 = (double)*(unint64_t *)&v35 * 0.0000152590219;
              v35 = (float)(v180 * 65535.0) + 0.5 + 0.0000001;
              v181 = vcvtmd_s64_f64(v35);
              v182 = (_WORD *)(v27 + 2 * v178);
              if (v181 >= 0xFFFF)
                v181 = 0xFFFF;
              *v182 = v181 & ~(unsigned __int16)(v181 >> 31);
              v182[1] = -1;
              v178 += 2;
              --v179;
            }
            while (v179);
          }
          v26 += v34;
          v27 += result;
        }
      }
    }
    else if (v33)
    {
      for (i32 = 0; i32 != v33; ++i32)
      {
        if (v32)
        {
          v295 = 0;
          v296 = v32;
          do
          {
            LOWORD(v35) = *(_WORD *)(v26 + v295);
            v297 = (double)*(unint64_t *)&v35 * 0.0000152590219;
            v35 = (float)(v297 * 65535.0) + 0.5 + 0.0000001;
            v298 = vcvtmd_s64_f64(v35);
            if (v298 >= 0xFFFF)
              v298 = 0xFFFF;
            *(_WORD *)(v27 + 2 * v295) = v298 & ~(unsigned __int16)(v298 >> 31);
            v295 += 2;
            --v296;
          }
          while (v296);
        }
        v26 += v34;
        v27 += result;
      }
    }
  }
  return result;
}

uint64_t `anonymous namespace'::copyFromCGBitmap(_anonymous_namespace_ *this, const PCBitmap *a2, PCBitmap *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int hasAlpha;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  unint64_t v21;
  double v22;
  int v23;
  float v24;
  double v25;
  int v26;
  float v27;
  double v28;
  int v29;
  float v30;
  int v31;
  PCBitmap *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  int v44;
  float32x2_t v45;
  uint64_t v51;
  int v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  float64x2_t v56;
  unint64_t v57;
  int32x2_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  double v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  _BYTE *v73;
  unint64_t v74;
  double v75;
  int v76;
  float v77;
  double v78;
  int v79;
  float v80;
  double v81;
  int v82;
  float v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  double v94;
  double v95;
  uint64_t v96;
  int v97;
  float32x2_t v98;
  uint64_t v100;
  _WORD *v101;
  unint64_t v102;
  float64x2_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  double v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;
  _WORD *v120;
  unint64_t v121;
  double v122;
  int v123;
  float v124;
  double v125;
  int v126;
  float v127;
  double v128;
  int v129;
  float v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  int i23;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  int i31;
  int v154;
  _WORD *v155;
  float *i32;
  float v157;
  float v158;
  float v159;
  float v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  uint64_t v169;
  int i44;
  uint64_t v171;
  int v172;
  float32x2_t v173;
  float v174;
  float v175;
  float32x2_t *v176;
  PCBitmap *v177;
  int m;
  uint64_t v179;
  int v180;
  uint64_t v181;
  float v182;
  double v183;
  int v184;
  _BYTE *v185;
  float v186;
  double v187;
  int v188;
  float v189;
  int v190;
  int i4;
  uint64_t v192;
  int v193;
  uint64_t v194;
  float v195;
  double v196;
  int v197;
  _BYTE *v198;
  float v199;
  double v200;
  int v201;
  float v202;
  int v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  uint64_t v212;
  double v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  int v217;
  _BYTE *v218;
  unint64_t v219;
  double v220;
  int v221;
  float v222;
  double v223;
  int v224;
  float v225;
  double v226;
  int v227;
  float v228;
  int v229;
  int v230;
  float64x2_t v231;
  float32x2_t v232;
  float64x2_t v234;
  int v235;
  _WORD *v236;
  _WORD *i15;
  float64x2_t v238;
  int v239;
  int i20;
  uint64_t v241;
  int v242;
  uint64_t v243;
  float v244;
  double v245;
  int v246;
  _WORD *v247;
  float v248;
  double v249;
  int v250;
  float v251;
  int v252;
  int i27;
  uint64_t v254;
  int i39;
  int v256;
  _WORD *v257;
  float *i40;
  int i48;
  uint64_t v260;
  int v261;
  _DWORD *v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  uint64_t v271;
  int i51;
  uint64_t v273;
  int v274;
  float32x2_t v275;
  float v276;
  float v277;
  uint64_t v278;
  int k;
  uint64_t v280;
  int v281;
  uint64_t v282;
  float v283;
  double v284;
  int v285;
  uint64_t v286;
  float v287;
  double v288;
  int v289;
  float v290;
  int v291;
  int mm;
  uint64_t v293;
  int v294;
  _BYTE *v295;
  float v296;
  double v297;
  int v298;
  _BYTE *v299;
  float v300;
  double v301;
  int v302;
  float v303;
  int v304;
  int i3;
  uint64_t v306;
  int v307;
  uint64_t v308;
  float v309;
  double v310;
  _BYTE *v311;
  int v312;
  float v313;
  double v314;
  int v315;
  float v316;
  int v317;
  int v318;
  float64x2_t v319;
  float32x2_t v320;
  float64x2_t v322;
  int v323;
  _WORD *v324;
  _WORD *i13;
  float64x2_t v326;
  int v327;
  int i19;
  uint64_t v329;
  int v330;
  uint64_t v331;
  float v332;
  double v333;
  _WORD *v334;
  int v335;
  float v336;
  double v337;
  int v338;
  float v339;
  int v340;
  int i25;
  uint64_t v342;
  int i35;
  int v344;
  _WORD *v345;
  float *i36;
  int i46;
  uint64_t v348;
  int v349;
  _DWORD *v350;
  int n;
  uint64_t v352;
  int v353;
  uint64_t v354;
  float v355;
  double v356;
  int v357;
  uint64_t v358;
  float v359;
  double v360;
  int v361;
  float v362;
  int v363;
  int i5;
  uint64_t v365;
  int v366;
  uint64_t v367;
  float v368;
  double v369;
  _BYTE *v370;
  int v371;
  float v372;
  double v373;
  int v374;
  float v375;
  int v376;
  int i9;
  uint64_t v378;
  int v379;
  uint64_t v380;
  float v381;
  double v382;
  int v383;
  _BYTE *v384;
  float v385;
  double v386;
  int v387;
  float v388;
  int v389;
  int v390;
  float64x2_t v391;
  float32x2_t v392;
  float64x2_t v394;
  int v395;
  _WORD *v396;
  _WORD *i16;
  float64x2_t v398;
  int v399;
  int i21;
  uint64_t v401;
  int v402;
  uint64_t v403;
  float v404;
  double v405;
  _WORD *v406;
  int v407;
  float v408;
  double v409;
  int v410;
  float v411;
  int v412;
  int i28;
  uint64_t v414;
  int i41;
  int v416;
  _WORD *v417;
  float *i42;
  int i49;
  uint64_t v420;
  int v421;
  _DWORD *v422;
  int i55;
  uint64_t v424;
  int v425;
  _DWORD *v426;
  int i;
  uint64_t v428;
  int v429;
  _BYTE *v430;
  float v431;
  double v432;
  int v433;
  _BYTE *v434;
  float v435;
  double v436;
  int v437;
  float v438;
  double v439;
  int v440;
  float v441;
  int v442;
  int kk;
  uint64_t v444;
  int v445;
  _BYTE *v446;
  float v447;
  double v448;
  int v449;
  uint64_t v450;
  float v451;
  double v452;
  int v453;
  float v454;
  int v455;
  int i1;
  uint64_t v457;
  int v458;
  _BYTE *v459;
  float v460;
  double v461;
  int v462;
  _BYTE *v463;
  float v464;
  double v465;
  int v466;
  float v467;
  double v468;
  int v469;
  float v470;
  int v471;
  int v472;
  float64x2_t v473;
  float32x2_t v474;
  float64x2_t v476;
  int v477;
  _WORD *v478;
  _WORD *i11;
  float64x2_t v480;
  int v481;
  int i17;
  uint64_t v483;
  int v484;
  _WORD *v485;
  float v486;
  double v487;
  int v488;
  _WORD *v489;
  float v490;
  double v491;
  int v492;
  float v493;
  double v494;
  int v495;
  float v496;
  int v497;
  int i22;
  uint64_t v499;
  int i29;
  int v501;
  _WORD *v502;
  float *i30;
  int i43;
  uint64_t v505;
  int v506;
  _DWORD *v507;
  int i8;
  uint64_t v509;
  int v510;
  uint64_t v511;
  float v512;
  double v513;
  _BYTE *v514;
  int v515;
  float v516;
  double v517;
  int v518;
  float v519;
  int v520;
  int i53;
  uint64_t v522;
  int v523;
  _DWORD *v524;
  int v525;
  float64x2_t v526;
  float32x2_t v527;
  float64x2_t v529;
  uint64_t v530;
  int v531;
  int v532;
  unsigned int v533;
  float64x2_t v534;
  unsigned int v535;
  _BYTE *v536;
  char v537;
  int v538;
  int v539;
  int nn;
  uint64_t v541;
  int v542;
  _BYTE *v543;
  float v544;
  double v545;
  int v546;
  uint64_t v547;
  float v548;
  double v549;
  int v550;
  float v551;
  int v552;
  int v553;
  float64x2_t v554;
  float32x2_t v555;
  float64x2_t v557;
  uint64_t v558;
  int v559;
  int v560;
  float64x2_t v561;
  _BYTE *v562;
  char v563;
  int v564;
  int v565;
  int v566;
  float64x2_t v567;
  float32x2_t v568;
  float64x2_t v570;
  int v571;
  _WORD *v572;
  unsigned __int16 *i14;
  int v574;
  float64x2_t v575;
  __int16 v576;
  int v577;
  int v578;
  int v579;
  float64x2_t v580;
  float32x2_t v581;
  float64x2_t v583;
  uint64_t v584;
  int v585;
  _WORD *v586;
  int v587;
  float64x2_t v588;
  __int16 v589;
  int v590;
  int i26;
  uint64_t v592;
  int i37;
  int v594;
  _WORD *v595;
  float *i38;
  float v597;
  float v598;
  float v599;
  int i47;
  uint64_t v601;
  int v602;
  float32x2_t *v603;
  float v604;
  float32_t v605;
  int i10;
  uint64_t v607;
  int v608;
  uint64_t v609;
  float v610;
  double v611;
  _BYTE *v612;
  int v613;
  float v614;
  double v615;
  int v616;
  float v617;
  int v618;
  int i56;
  uint64_t v620;
  int v621;
  _DWORD *v622;
  int j;
  uint64_t v624;
  int v625;
  _BYTE *v626;
  float v627;
  double v628;
  int v629;
  _BYTE *v630;
  int v631;
  float v632;
  double v633;
  int v634;
  int v635;
  float v636;
  double v637;
  int v638;
  float v639;
  int v640;
  int v641;
  int ii;
  uint64_t v643;
  int v644;
  _BYTE *v645;
  float v646;
  double v647;
  int v648;
  _BYTE *v649;
  float v650;
  double v651;
  int v652;
  float v653;
  double v654;
  int v655;
  float v656;
  int v657;
  int i2;
  uint64_t v659;
  int v660;
  _BYTE *v661;
  float v662;
  double v663;
  int v664;
  _BYTE *v665;
  int v666;
  float v667;
  double v668;
  int v669;
  int v670;
  float v671;
  double v672;
  int v673;
  float v674;
  int v675;
  int v676;
  int v677;
  float64x2_t v678;
  float32x2_t v679;
  float64x2_t v681;
  int v682;
  _WORD *v683;
  _WORD *i12;
  float64x2_t v685;
  int v686;
  int i18;
  uint64_t v688;
  int v689;
  _WORD *v690;
  float v691;
  double v692;
  int v693;
  _WORD *v694;
  int v695;
  float v696;
  double v697;
  int v698;
  int v699;
  float v700;
  double v701;
  int v702;
  int v703;
  float v704;
  int v705;
  int v706;
  int i24;
  uint64_t v708;
  int i33;
  int v710;
  unsigned __int16 *v711;
  float *i34;
  int i45;
  uint64_t v714;
  int v715;
  float *v716;
  float v717;
  float v718;
  float v719;
  float v720;
  int i6;
  uint64_t v722;
  int v723;
  _BYTE *v724;
  float v725;
  double v726;
  int v727;
  _BYTE *v728;
  float v729;
  double v730;
  int v731;
  float v732;
  double v733;
  int v734;
  float v735;
  int v736;
  int i50;
  uint64_t v738;
  int v739;
  _DWORD *v740;
  int v741;
  float64x2_t v742;
  float64x2_t v743;
  float32x2_t v744;
  uint64_t v746;
  int v747;
  int v748;
  float v749;
  int v750;
  float64x2_t v751;
  float32x2_t v752;
  int v753;
  int32x2_t v754;
  _BYTE *v755;
  int v756;
  float64x2_t v757;
  float64x2_t v758;
  float32x2_t v759;
  uint64_t v761;
  int v762;
  int v763;
  float v764;
  int v765;
  float64x2_t v766;
  float32x2_t v767;
  int v768;
  int32x2_t v769;
  _BYTE *v770;
  int i54;
  uint64_t v772;
  int v773;
  float v774;
  float v775;
  uint64_t v776;
  int jj;
  uint64_t v778;
  int v779;
  _BYTE *v780;
  float v781;
  double v782;
  int v783;
  _BYTE *v784;
  int v785;
  float v786;
  double v787;
  int v788;
  int v789;
  float v790;
  double v791;
  int v792;
  float v793;
  int v794;
  int v795;
  int i7;
  uint64_t v797;
  int v798;
  _BYTE *v799;
  float v800;
  double v801;
  int v802;
  _BYTE *v803;
  int v804;
  float v805;
  double v806;
  int v807;
  int v808;
  float v809;
  double v810;
  int v811;
  float v812;
  int v813;
  int v814;
  int i52;
  uint64_t v816;
  int v817;
  float *v818;
  float v819;
  float v820;
  float v821;
  float v822;
  int v823;
  float64x2_t v824;
  float64x2_t v825;
  uint64_t v826;
  float64x2_t v827;
  uint64_t v828;
  float64x2_t v829;
  uint64_t v830;
  int v831;
  float64x2_t v832;
  int v833;
  float64x2_t v834;
  uint64_t v835;
  uint64_t v836;
  int v837;
  uint64_t v838;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
  switch((int)result)
  {
    case 3:
      v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
      v8 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v9 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
      hasAlpha = PCPixelFormat::hasAlpha(3u);
      v11 = PCPixelFormat::hasAlpha(3u);
      v12 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v13 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v14 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
      v16 = result;
      if (hasAlpha)
      {
        if (v11)
        {
          if (v8 == v9)
          {
            if (v13)
            {
              for (i = 0; i != v13; ++i)
              {
                if (v12)
                {
                  v428 = 0;
                  v429 = v12;
                  do
                  {
                    v430 = (_BYTE *)(v6 + v428);
                    LOBYTE(v15) = *(_BYTE *)(v6 + v428 + 1);
                    v431 = (double)*(unint64_t *)&v15 * 0.00392156863;
                    v432 = (float)(v431 * 255.0) + 0.5 + 0.0000001;
                    v433 = vcvtmd_s64_f64(v432);
                    v434 = (_BYTE *)(v7 + v428);
                    if (v433 >= 255)
                      v433 = 255;
                    v434[1] = v433 & ~(v433 >> 31);
                    LOBYTE(v432) = v430[2];
                    v435 = (double)*(unint64_t *)&v432 * 0.00392156863;
                    v436 = (float)(v435 * 255.0) + 0.5 + 0.0000001;
                    v437 = vcvtmd_s64_f64(v436);
                    if (v437 >= 255)
                      v437 = 255;
                    v434[2] = v437 & ~(v437 >> 31);
                    LOBYTE(v436) = v430[3];
                    v438 = (double)*(unint64_t *)&v436 * 0.00392156863;
                    v439 = (float)(v438 * 255.0) + 0.5 + 0.0000001;
                    v440 = vcvtmd_s64_f64(v439);
                    if (v440 >= 255)
                      v440 = 255;
                    v434[3] = v440 & ~(v440 >> 31);
                    LOBYTE(v439) = *v430;
                    v441 = (double)*(unint64_t *)&v439 * 0.00392156863;
                    v15 = (float)(v441 * 255.0) + 0.5 + 0.0000001;
                    v442 = vcvtmd_s64_f64(v15);
                    if (v442 >= 255)
                      v442 = 255;
                    *v434 = v442 & ~(v442 >> 31);
                    v428 += 4;
                    --v429;
                  }
                  while (v429);
                }
                v6 += v14;
                v7 += result;
              }
            }
          }
          else if ((v8 & 1) != 0)
          {
            if (v13)
            {
              v17 = 0;
              v831 = v13;
              v826 = v14;
              do
              {
                if (v12)
                {
                  v18 = 0;
                  v19 = v12;
                  do
                  {
                    v20 = (_BYTE *)(v7 + v18);
                    LODWORD(v838) = *(_DWORD *)(v6 + v18);
                    result = (uint64_t)PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>::unpremultiply((unsigned __int8 *)&v838);
                    LOBYTE(v21) = BYTE1(v838);
                    *(float *)&v21 = (double)v21 * 0.00392156863;
                    v22 = (float)(*(float *)&v21 * 255.0) + 0.5 + 0.0000001;
                    v23 = vcvtmd_s64_f64(v22);
                    if (v23 >= 255)
                      v23 = 255;
                    v20[1] = v23 & ~(v23 >> 31);
                    LOBYTE(v22) = BYTE2(v838);
                    v24 = (double)*(unint64_t *)&v22 * 0.00392156863;
                    v25 = (float)(v24 * 255.0) + 0.5 + 0.0000001;
                    v26 = vcvtmd_s64_f64(v25);
                    if (v26 >= 255)
                      v26 = 255;
                    v20[2] = v26 & ~(v26 >> 31);
                    LOBYTE(v25) = BYTE3(v838);
                    v27 = (double)*(unint64_t *)&v25 * 0.00392156863;
                    v28 = (float)(v27 * 255.0) + 0.5 + 0.0000001;
                    v29 = vcvtmd_s64_f64(v28);
                    if (v29 >= 255)
                      v29 = 255;
                    v20[3] = v29 & ~(v29 >> 31);
                    LOBYTE(v28) = v838;
                    v30 = (double)*(unint64_t *)&v28 * 0.00392156863;
                    v31 = vcvtmd_s64_f64((float)(v30 * 255.0) + 0.5 + 0.0000001);
                    if (v31 >= 255)
                      v31 = 255;
                    *v20 = v31 & ~(v31 >> 31);
                    v18 += 4;
                    --v19;
                  }
                  while (v19);
                }
                v6 += v826;
                v7 += v16;
                ++v17;
              }
              while (v17 != v831);
            }
          }
          else if (v13)
          {
            for (j = 0; j != v13; ++j)
            {
              if (v12)
              {
                v624 = 0;
                v625 = v12;
                do
                {
                  v626 = (_BYTE *)(v6 + v624);
                  LOBYTE(v15) = *(_BYTE *)(v6 + v624 + 1);
                  v627 = (double)*(unint64_t *)&v15 * 0.00392156863;
                  v628 = (float)(v627 * 255.0) + 0.5 + 0.0000001;
                  v629 = vcvtmd_s64_f64(v628);
                  v630 = (_BYTE *)(v7 + v624);
                  if (v629 >= 255)
                    v629 = 255;
                  v631 = v629 & ~(v629 >> 31);
                  v630[1] = v631;
                  LOBYTE(v628) = v626[2];
                  v632 = (double)*(unint64_t *)&v628 * 0.00392156863;
                  v633 = (float)(v632 * 255.0) + 0.5 + 0.0000001;
                  v634 = vcvtmd_s64_f64(v633);
                  if (v634 >= 255)
                    v634 = 255;
                  v635 = v634 & ~(v634 >> 31);
                  v630[2] = v635;
                  LOBYTE(v633) = v626[3];
                  v636 = (double)*(unint64_t *)&v633 * 0.00392156863;
                  v637 = (float)(v636 * 255.0) + 0.5 + 0.0000001;
                  v638 = vcvtmd_s64_f64(v637);
                  if (v638 >= 255)
                    v638 = 255;
                  result = v638 & ~(v638 >> 31);
                  v630[3] = result;
                  LOBYTE(v637) = *v626;
                  v639 = (double)*(unint64_t *)&v637 * 0.00392156863;
                  v15 = (float)(v639 * 255.0) + 0.5 + 0.0000001;
                  v640 = vcvtmd_s64_f64(v15);
                  if (v640 >= 255)
                    v640 = 255;
                  v641 = v640 & ~(v640 >> 31);
                  *v630 = v641;
                  v630[1] = (32897 * v641 * v631) >> 23;
                  v630[2] = (32897 * v641 * v635) >> 23;
                  v630[3] = (32897 * v641 * result) >> 23;
                  v624 += 4;
                  --v625;
                }
                while (v625);
              }
              v6 += v14;
              v7 += v16;
            }
          }
        }
        else if ((v8 & 1) != 0)
        {
          if (v13)
          {
            for (k = 0; k != v13; ++k)
            {
              if (v12)
              {
                v280 = 0;
                v281 = v12;
                do
                {
                  v282 = v6 + v280;
                  LOBYTE(v15) = *(_BYTE *)(v6 + v280 + 1);
                  v283 = (double)*(unint64_t *)&v15 * 0.00392156863;
                  v284 = (float)(v283 * 255.0) + 0.5 + 0.0000001;
                  v285 = vcvtmd_s64_f64(v284);
                  if (v285 >= 255)
                    v285 = 255;
                  v286 = v7 + v280;
                  *(_BYTE *)(v7 + v280 + 1) = v285 & ~(v285 >> 31);
                  LOBYTE(v284) = *(_BYTE *)(v282 + 2);
                  v287 = (double)*(unint64_t *)&v284 * 0.00392156863;
                  v288 = (float)(v287 * 255.0) + 0.5 + 0.0000001;
                  v289 = vcvtmd_s64_f64(v288);
                  if (v289 >= 255)
                    v289 = 255;
                  *(_BYTE *)(v286 + 2) = v289 & ~(v289 >> 31);
                  LOBYTE(v288) = *(_BYTE *)(v282 + 3);
                  v290 = (double)*(unint64_t *)&v288 * 0.00392156863;
                  v15 = (float)(v290 * 255.0) + 0.5 + 0.0000001;
                  v291 = vcvtmd_s64_f64(v15);
                  if (v291 >= 255)
                    v291 = 255;
                  *(_BYTE *)(v286 + 3) = v291 & ~(v291 >> 31);
                  v280 += 4;
                  --v281;
                }
                while (v281);
              }
              v6 += v14;
              v7 += result;
            }
          }
        }
        else if (v13)
        {
          v525 = 0;
          v526 = (float64x2_t)vdupq_n_s64(0x3F70101010101010uLL);
          v527 = (float32x2_t)vdup_n_s32(0x437F0000u);
          __asm { FMOV            V2.2D, #0.5 }
          v529 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          do
          {
            if (v12)
            {
              v530 = 0;
              v531 = v12;
              do
              {
                v532 = *(unsigned __int8 *)(v6 + v530);
                v533 = ((32897 * *(unsigned __int8 *)(v6 + v530 + 2) * v532) >> 23);
                v534.f64[0] = (double)((32897 * *(unsigned __int8 *)(v6 + v530 + 1)
                                                               * v532) >> 23);
                v535 = ((32897 * *(unsigned __int8 *)(v6 + v530 + 3) * v532) >> 23);
                v536 = (_BYTE *)(v7 + v530);
                v534.f64[1] = (double)v533;
                *(int32x2_t *)&v534.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v534, v526)), v527)), _Q2), v529)))), (int32x2_t)0xFF000000FFLL), 0);
                v537 = LOBYTE(v534.f64[0]);
                *(float *)v534.f64 = (double)v535 * 0.00392156863;
                v536[1] = v537;
                v538 = vcvtmd_s64_f64((float)(*(float *)v534.f64 * 255.0) + 0.5 + 0.0000001);
                v536[2] = BYTE4(v534.f64[0]);
                if (v538 >= 255)
                  v539 = 255;
                else
                  v539 = v538;
                v536[3] = v539 & ~(v539 >> 31);
                v530 += 4;
                --v531;
              }
              while (v531);
            }
            v6 += v14;
            v7 += result;
            ++v525;
          }
          while (v525 != v13);
        }
      }
      else if ((v11 & 1) != 0)
      {
        if (v13)
        {
          for (m = 0; m != v13; ++m)
          {
            if (v12)
            {
              v179 = 0;
              v180 = v12;
              do
              {
                v181 = v6 + v179;
                LOBYTE(v15) = *(_BYTE *)(v6 + v179 + 1);
                v182 = (double)*(unint64_t *)&v15 * 0.00392156863;
                v183 = (float)(v182 * 255.0) + 0.5 + 0.0000001;
                v184 = vcvtmd_s64_f64(v183);
                v185 = (_BYTE *)(v7 + v179);
                if (v184 >= 255)
                  v184 = 255;
                v185[1] = v184 & ~(v184 >> 31);
                LOBYTE(v183) = *(_BYTE *)(v181 + 2);
                v186 = (double)*(unint64_t *)&v183 * 0.00392156863;
                v187 = (float)(v186 * 255.0) + 0.5 + 0.0000001;
                v188 = vcvtmd_s64_f64(v187);
                if (v188 >= 255)
                  v188 = 255;
                v185[2] = v188 & ~(v188 >> 31);
                LOBYTE(v187) = *(_BYTE *)(v181 + 3);
                v189 = (double)*(unint64_t *)&v187 * 0.00392156863;
                v15 = (float)(v189 * 255.0) + 0.5 + 0.0000001;
                v190 = vcvtmd_s64_f64(v15);
                if (v190 >= 255)
                  v190 = 255;
                v185[3] = v190 & ~(v190 >> 31);
                *v185 = -1;
                v179 += 4;
                --v180;
              }
              while (v180);
            }
            v6 += v14;
            v7 += result;
          }
        }
      }
      else if (v13)
      {
        for (n = 0; n != v13; ++n)
        {
          if (v12)
          {
            v352 = 0;
            v353 = v12;
            do
            {
              v354 = v6 + v352;
              LOBYTE(v15) = *(_BYTE *)(v6 + v352 + 1);
              v355 = (double)*(unint64_t *)&v15 * 0.00392156863;
              v356 = (float)(v355 * 255.0) + 0.5 + 0.0000001;
              v357 = vcvtmd_s64_f64(v356);
              if (v357 >= 255)
                v357 = 255;
              v358 = v7 + v352;
              *(_BYTE *)(v7 + v352 + 1) = v357 & ~(v357 >> 31);
              LOBYTE(v356) = *(_BYTE *)(v354 + 2);
              v359 = (double)*(unint64_t *)&v356 * 0.00392156863;
              v360 = (float)(v359 * 255.0) + 0.5 + 0.0000001;
              v361 = vcvtmd_s64_f64(v360);
              if (v361 >= 255)
                v361 = 255;
              *(_BYTE *)(v358 + 2) = v361 & ~(v361 >> 31);
              LOBYTE(v360) = *(_BYTE *)(v354 + 3);
              v362 = (double)*(unint64_t *)&v360 * 0.00392156863;
              v15 = (float)(v362 * 255.0) + 0.5 + 0.0000001;
              v363 = vcvtmd_s64_f64(v15);
              if (v363 >= 255)
                v363 = 255;
              *(_BYTE *)(v358 + 3) = v363 & ~(v363 >> 31);
              v352 += 4;
              --v353;
            }
            while (v353);
          }
          v6 += v14;
          v7 += result;
        }
      }
      break;
    case 4:
      if ((*(unsigned int (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2))
        goto LABEL_53;
      v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
      v35 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v36 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
      v37 = PCPixelFormat::hasAlpha(3u);
      v38 = PCPixelFormat::hasAlpha(4u);
      v39 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v40 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v41 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
      v43 = result;
      if (v37)
      {
        if (v38)
        {
          if (v35 == v36)
          {
            if (v40)
            {
              for (ii = 0; ii != v40; ++ii)
              {
                if (v39)
                {
                  v643 = 0;
                  v644 = v39;
                  do
                  {
                    v645 = (_BYTE *)(v33 + v643);
                    LOBYTE(v42) = *(_BYTE *)(v33 + v643 + 1);
                    v646 = (double)*(unint64_t *)&v42 * 0.00392156863;
                    v647 = (float)(v646 * 255.0) + 0.5 + 0.0000001;
                    v648 = vcvtmd_s64_f64(v647);
                    v649 = (_BYTE *)(v34 + v643);
                    if (v648 >= 255)
                      v648 = 255;
                    v649[3] = v648 & ~(v648 >> 31);
                    LOBYTE(v647) = v645[2];
                    v650 = (double)*(unint64_t *)&v647 * 0.00392156863;
                    v651 = (float)(v650 * 255.0) + 0.5 + 0.0000001;
                    v652 = vcvtmd_s64_f64(v651);
                    if (v652 >= 255)
                      v652 = 255;
                    v649[2] = v652 & ~(v652 >> 31);
                    LOBYTE(v651) = v645[3];
                    v653 = (double)*(unint64_t *)&v651 * 0.00392156863;
                    v654 = (float)(v653 * 255.0) + 0.5 + 0.0000001;
                    v655 = vcvtmd_s64_f64(v654);
                    if (v655 >= 255)
                      v655 = 255;
                    v649[1] = v655 & ~(v655 >> 31);
                    LOBYTE(v654) = *v645;
                    v656 = (double)*(unint64_t *)&v654 * 0.00392156863;
                    v42 = (float)(v656 * 255.0) + 0.5 + 0.0000001;
                    v657 = vcvtmd_s64_f64(v42);
                    if (v657 >= 255)
                      v657 = 255;
                    *v649 = v657 & ~(v657 >> 31);
                    v643 += 4;
                    --v644;
                  }
                  while (v644);
                }
                v33 += v41;
                v34 += result;
              }
            }
          }
          else if ((v35 & 1) != 0)
          {
            if (v40)
            {
              v44 = 0;
              v45 = (float32x2_t)vdup_n_s32(0x437F0000u);
              __asm { FMOV            V0.2D, #0.5 }
              v827 = _Q0;
              v832 = (float64x2_t)vdupq_n_s64(0x3F70101010101010uLL);
              v824 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
              do
              {
                if (v39)
                {
                  v51 = 0;
                  v52 = v39;
                  do
                  {
                    v53 = (_BYTE *)(v34 + v51);
                    LODWORD(v838) = *(_DWORD *)(v33 + v51);
                    result = (uint64_t)PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>::unpremultiply((unsigned __int8 *)&v838);
                    LOBYTE(v55) = BYTE2(v838);
                    LOBYTE(v54) = BYTE1(v838);
                    v56.f64[0] = (double)v55;
                    v56.f64[1] = (double)v54;
                    v57 = (unint64_t)vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v56, v832)), v45)), v827), v824)))), (int32x2_t)0xFF000000FFLL), 0);
                    v53[3] = BYTE4(v57);
                    v53[2] = v57;
                    LOBYTE(v57) = BYTE3(v838);
                    LOBYTE(v56.f64[0]) = v838;
                    v56.f64[0] = (double)*(unint64_t *)&v56.f64[0];
                    v56.f64[1] = (double)v57;
                    v58 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v56, v832)), v45)), v827), v824)))), (int32x2_t)0xFF000000FFLL), 0);
                    v53[1] = v58.i8[4];
                    *v53 = v58.i8[0];
                    v51 += 4;
                    --v52;
                  }
                  while (v52);
                }
                v33 += v41;
                v34 += v43;
                ++v44;
              }
              while (v44 != v40);
            }
          }
          else if (v40)
          {
            for (jj = 0; jj != v40; ++jj)
            {
              if (v39)
              {
                v778 = 0;
                v779 = v39;
                do
                {
                  v780 = (_BYTE *)(v33 + v778);
                  LOBYTE(v42) = *(_BYTE *)(v33 + v778 + 1);
                  v781 = (double)*(unint64_t *)&v42 * 0.00392156863;
                  v782 = (float)(v781 * 255.0) + 0.5 + 0.0000001;
                  v783 = vcvtmd_s64_f64(v782);
                  v784 = (_BYTE *)(v34 + v778);
                  if (v783 >= 255)
                    v783 = 255;
                  v785 = v783 & ~(v783 >> 31);
                  v784[3] = v785;
                  LOBYTE(v782) = v780[2];
                  v786 = (double)*(unint64_t *)&v782 * 0.00392156863;
                  v787 = (float)(v786 * 255.0) + 0.5 + 0.0000001;
                  v788 = vcvtmd_s64_f64(v787);
                  if (v788 >= 255)
                    v788 = 255;
                  v789 = v788 & ~(v788 >> 31);
                  v784[2] = v789;
                  LOBYTE(v787) = v780[3];
                  v790 = (double)*(unint64_t *)&v787 * 0.00392156863;
                  v791 = (float)(v790 * 255.0) + 0.5 + 0.0000001;
                  v792 = vcvtmd_s64_f64(v791);
                  if (v792 >= 255)
                    v792 = 255;
                  result = v792 & ~(v792 >> 31);
                  v784[1] = result;
                  LOBYTE(v791) = *v780;
                  v793 = (double)*(unint64_t *)&v791 * 0.00392156863;
                  v42 = (float)(v793 * 255.0) + 0.5 + 0.0000001;
                  v794 = vcvtmd_s64_f64(v42);
                  if (v794 >= 255)
                    v794 = 255;
                  v795 = v794 & ~(v794 >> 31);
                  *v784 = v795;
                  v784[3] = (32897 * v795 * v785) >> 23;
                  v784[2] = (32897 * v795 * v789) >> 23;
                  v784[1] = (32897 * v795 * result) >> 23;
                  v778 += 4;
                  --v779;
                }
                while (v779);
              }
              v33 += v41;
              v34 += v43;
            }
          }
        }
        else if ((v35 & 1) != 0)
        {
          if (v40)
          {
            for (kk = 0; kk != v40; ++kk)
            {
              if (v39)
              {
                v444 = 3;
                v445 = v39;
                do
                {
                  v446 = (_BYTE *)(v33 + v444);
                  LOBYTE(v42) = *(_BYTE *)(v33 + v444 - 2);
                  v447 = (double)*(unint64_t *)&v42 * 0.00392156863;
                  v448 = (float)(v447 * 255.0) + 0.5 + 0.0000001;
                  v449 = vcvtmd_s64_f64(v448);
                  if (v449 >= 255)
                    v449 = 255;
                  v450 = v34 + v444;
                  *(_BYTE *)(v34 + v444) = v449 & ~(v449 >> 31);
                  LOBYTE(v448) = *(v446 - 1);
                  v451 = (double)*(unint64_t *)&v448 * 0.00392156863;
                  v452 = (float)(v451 * 255.0) + 0.5 + 0.0000001;
                  v453 = vcvtmd_s64_f64(v452);
                  if (v453 >= 255)
                    v453 = 255;
                  *(_BYTE *)(v450 - 1) = v453 & ~(v453 >> 31);
                  LOBYTE(v452) = *v446;
                  v454 = (double)*(unint64_t *)&v452 * 0.00392156863;
                  v42 = (float)(v454 * 255.0) + 0.5 + 0.0000001;
                  v455 = vcvtmd_s64_f64(v42);
                  if (v455 >= 255)
                    v455 = 255;
                  *(_BYTE *)(v450 - 2) = v455 & ~(v455 >> 31);
                  v444 += 4;
                  --v445;
                }
                while (v445);
              }
              v33 += v41;
              v34 += result;
            }
          }
        }
        else if (v40)
        {
          v741 = 0;
          v742 = (float64x2_t)vdupq_n_s64(0x3F70101010101010uLL);
          v743 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          v744 = (float32x2_t)vdup_n_s32(0x437F0000u);
          __asm { FMOV            V6.2D, #0.5 }
          do
          {
            if (v39)
            {
              v746 = 0;
              v747 = v39;
              do
              {
                v748 = *(unsigned __int8 *)(v33 + v746);
                v749 = (double)((32897 * *(unsigned __int8 *)(v33 + v746 + 1) * v748) >> 23)
                     * 0.00392156863;
                v750 = vcvtmd_s64_f64((float)(v749 * 255.0) + 0.5 + 0.0000001);
                v751.f64[0] = (double)((32897
                                                       * *(unsigned __int8 *)(v33 + v746 + 3)
                                                       * v748) >> 23);
                v751.f64[1] = (double)((32897
                                                       * *(unsigned __int8 *)(v33 + v746 + 2)
                                                       * v748) >> 23);
                v752 = vmul_f32(vcvt_f32_f64(vmulq_f64(v751, v742)), v744);
                if (v750 >= 255)
                  v753 = 255;
                else
                  v753 = v750;
                v754 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(v752), _Q6), v743)))), (int32x2_t)0xFF000000FFLL), 0);
                v755 = (_BYTE *)(v34 + v746);
                v755[3] = v753 & ~(v753 >> 31);
                v755[2] = v754.i8[4];
                v755[1] = v754.i8[0];
                v746 += 4;
                --v747;
              }
              while (v747);
            }
            v33 += v41;
            v34 += result;
            ++v741;
          }
          while (v741 != v40);
        }
      }
      else if ((v38 & 1) != 0)
      {
        if (v40)
        {
          for (mm = 0; mm != v40; ++mm)
          {
            if (v39)
            {
              v293 = 3;
              v294 = v39;
              do
              {
                v295 = (_BYTE *)(v33 + v293);
                LOBYTE(v42) = *(_BYTE *)(v33 + v293 - 2);
                v296 = (double)*(unint64_t *)&v42 * 0.00392156863;
                v297 = (float)(v296 * 255.0) + 0.5 + 0.0000001;
                v298 = vcvtmd_s64_f64(v297);
                v299 = (_BYTE *)(v34 + v293);
                if (v298 >= 255)
                  v298 = 255;
                *v299 = v298 & ~(v298 >> 31);
                LOBYTE(v297) = *(v295 - 1);
                v300 = (double)*(unint64_t *)&v297 * 0.00392156863;
                v301 = (float)(v300 * 255.0) + 0.5 + 0.0000001;
                v302 = vcvtmd_s64_f64(v301);
                if (v302 >= 255)
                  v302 = 255;
                *(v299 - 1) = v302 & ~(v302 >> 31);
                LOBYTE(v301) = *v295;
                v303 = (double)*(unint64_t *)&v301 * 0.00392156863;
                v42 = (float)(v303 * 255.0) + 0.5 + 0.0000001;
                v304 = vcvtmd_s64_f64(v42);
                if (v304 >= 255)
                  v304 = 255;
                *(v299 - 2) = v304 & ~(v304 >> 31);
                *(v299 - 3) = -1;
                v293 += 4;
                --v294;
              }
              while (v294);
            }
            v33 += v41;
            v34 += result;
          }
        }
      }
      else if (v40)
      {
        for (nn = 0; nn != v40; ++nn)
        {
          if (v39)
          {
            v541 = 3;
            v542 = v39;
            do
            {
              v543 = (_BYTE *)(v33 + v541);
              LOBYTE(v42) = *(_BYTE *)(v33 + v541 - 2);
              v544 = (double)*(unint64_t *)&v42 * 0.00392156863;
              v545 = (float)(v544 * 255.0) + 0.5 + 0.0000001;
              v546 = vcvtmd_s64_f64(v545);
              if (v546 >= 255)
                v546 = 255;
              v547 = v34 + v541;
              *(_BYTE *)(v34 + v541) = v546 & ~(v546 >> 31);
              LOBYTE(v545) = *(v543 - 1);
              v548 = (double)*(unint64_t *)&v545 * 0.00392156863;
              v549 = (float)(v548 * 255.0) + 0.5 + 0.0000001;
              v550 = vcvtmd_s64_f64(v549);
              if (v550 >= 255)
                v550 = 255;
              *(_BYTE *)(v547 - 1) = v550 & ~(v550 >> 31);
              LOBYTE(v549) = *v543;
              v551 = (double)*(unint64_t *)&v549 * 0.00392156863;
              v42 = (float)(v551 * 255.0) + 0.5 + 0.0000001;
              v552 = vcvtmd_s64_f64(v42);
              if (v552 >= 255)
                v552 = 255;
              *(_BYTE *)(v547 - 2) = v552 & ~(v552 >> 31);
              v541 += 4;
              --v542;
            }
            while (v542);
          }
          v33 += v41;
          v34 += result;
        }
      }
      break;
    case 5:
      v59 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v60 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
      v61 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v62 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
      v63 = PCPixelFormat::hasAlpha(5u);
      v64 = PCPixelFormat::hasAlpha(5u);
      v65 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v66 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v67 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
      v69 = result;
      if (v63)
      {
        if (v64)
        {
          if (v61 == v62)
          {
            if (v66)
            {
              for (i1 = 0; i1 != v66; ++i1)
              {
                if (v65)
                {
                  v457 = 0;
                  v458 = v65;
                  do
                  {
                    v459 = (_BYTE *)(v59 + v457);
                    LOBYTE(v68) = *(_BYTE *)(v59 + v457);
                    v460 = (double)*(unint64_t *)&v68 * 0.00392156863;
                    v461 = (float)(v460 * 255.0) + 0.5 + 0.0000001;
                    v462 = vcvtmd_s64_f64(v461);
                    v463 = (_BYTE *)(v60 + v457);
                    if (v462 >= 255)
                      v462 = 255;
                    *v463 = v462 & ~(v462 >> 31);
                    LOBYTE(v461) = v459[1];
                    v464 = (double)*(unint64_t *)&v461 * 0.00392156863;
                    v465 = (float)(v464 * 255.0) + 0.5 + 0.0000001;
                    v466 = vcvtmd_s64_f64(v465);
                    if (v466 >= 255)
                      v466 = 255;
                    v463[1] = v466 & ~(v466 >> 31);
                    LOBYTE(v465) = v459[2];
                    v467 = (double)*(unint64_t *)&v465 * 0.00392156863;
                    v468 = (float)(v467 * 255.0) + 0.5 + 0.0000001;
                    v469 = vcvtmd_s64_f64(v468);
                    if (v469 >= 255)
                      v469 = 255;
                    v463[2] = v469 & ~(v469 >> 31);
                    LOBYTE(v468) = v459[3];
                    v470 = (double)*(unint64_t *)&v468 * 0.00392156863;
                    v68 = (float)(v470 * 255.0) + 0.5 + 0.0000001;
                    v471 = vcvtmd_s64_f64(v68);
                    if (v471 >= 255)
                      v471 = 255;
                    v463[3] = v471 & ~(v471 >> 31);
                    v457 += 4;
                    --v458;
                  }
                  while (v458);
                }
                v59 += v67;
                v60 += result;
              }
            }
          }
          else if ((v61 & 1) != 0)
          {
            if (v66)
            {
              v70 = 0;
              v833 = v66;
              v828 = v67;
              do
              {
                if (v65)
                {
                  v71 = 0;
                  v72 = v65;
                  do
                  {
                    v73 = (_BYTE *)(v60 + v71);
                    LODWORD(v838) = *(_DWORD *)(v59 + v71);
                    result = (uint64_t)PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>::unpremultiply((unsigned __int8 *)&v838);
                    LOBYTE(v74) = v838;
                    *(float *)&v74 = (double)v74 * 0.00392156863;
                    v75 = (float)(*(float *)&v74 * 255.0) + 0.5 + 0.0000001;
                    v76 = vcvtmd_s64_f64(v75);
                    if (v76 >= 255)
                      v76 = 255;
                    *v73 = v76 & ~(v76 >> 31);
                    LOBYTE(v75) = BYTE1(v838);
                    v77 = (double)*(unint64_t *)&v75 * 0.00392156863;
                    v78 = (float)(v77 * 255.0) + 0.5 + 0.0000001;
                    v79 = vcvtmd_s64_f64(v78);
                    if (v79 >= 255)
                      v79 = 255;
                    v73[1] = v79 & ~(v79 >> 31);
                    LOBYTE(v78) = BYTE2(v838);
                    v80 = (double)*(unint64_t *)&v78 * 0.00392156863;
                    v81 = (float)(v80 * 255.0) + 0.5 + 0.0000001;
                    v82 = vcvtmd_s64_f64(v81);
                    if (v82 >= 255)
                      v82 = 255;
                    v73[2] = v82 & ~(v82 >> 31);
                    LOBYTE(v81) = BYTE3(v838);
                    v83 = (double)*(unint64_t *)&v81 * 0.00392156863;
                    v84 = vcvtmd_s64_f64((float)(v83 * 255.0) + 0.5 + 0.0000001);
                    if (v84 >= 255)
                      v84 = 255;
                    v73[3] = v84 & ~(v84 >> 31);
                    v71 += 4;
                    --v72;
                  }
                  while (v72);
                }
                v59 += v828;
                v60 += v69;
                ++v70;
              }
              while (v70 != v833);
            }
          }
          else if (v66)
          {
            for (i2 = 0; i2 != v66; ++i2)
            {
              if (v65)
              {
                v659 = 0;
                v660 = v65;
                do
                {
                  v661 = (_BYTE *)(v59 + v659);
                  LOBYTE(v68) = *(_BYTE *)(v59 + v659);
                  v662 = (double)*(unint64_t *)&v68 * 0.00392156863;
                  v663 = (float)(v662 * 255.0) + 0.5 + 0.0000001;
                  v664 = vcvtmd_s64_f64(v663);
                  v665 = (_BYTE *)(v60 + v659);
                  if (v664 >= 255)
                    v664 = 255;
                  v666 = v664 & ~(v664 >> 31);
                  *v665 = v666;
                  LOBYTE(v663) = v661[1];
                  v667 = (double)*(unint64_t *)&v663 * 0.00392156863;
                  v668 = (float)(v667 * 255.0) + 0.5 + 0.0000001;
                  v669 = vcvtmd_s64_f64(v668);
                  if (v669 >= 255)
                    v669 = 255;
                  v670 = v669 & ~(v669 >> 31);
                  v665[1] = v670;
                  LOBYTE(v668) = v661[2];
                  v671 = (double)*(unint64_t *)&v668 * 0.00392156863;
                  v672 = (float)(v671 * 255.0) + 0.5 + 0.0000001;
                  v673 = vcvtmd_s64_f64(v672);
                  if (v673 >= 255)
                    v673 = 255;
                  result = v673 & ~(v673 >> 31);
                  v665[2] = result;
                  LOBYTE(v672) = v661[3];
                  v674 = (double)*(unint64_t *)&v672 * 0.00392156863;
                  v68 = (float)(v674 * 255.0) + 0.5 + 0.0000001;
                  v675 = vcvtmd_s64_f64(v68);
                  if (v675 >= 255)
                    v675 = 255;
                  v676 = v675 & ~(v675 >> 31);
                  v665[3] = v676;
                  *v665 = (32897 * v676 * v666) >> 23;
                  v665[1] = (32897 * v676 * v670) >> 23;
                  v665[2] = (32897 * v676 * result) >> 23;
                  v659 += 4;
                  --v660;
                }
                while (v660);
              }
              v59 += v67;
              v60 += v69;
            }
          }
        }
        else if ((v61 & 1) != 0)
        {
          if (v66)
          {
            for (i3 = 0; i3 != v66; ++i3)
            {
              if (v65)
              {
                v306 = 0;
                v307 = v65;
                do
                {
                  v308 = v59 + v306;
                  LOBYTE(v68) = *(_BYTE *)(v59 + v306);
                  v309 = (double)*(unint64_t *)&v68 * 0.00392156863;
                  v310 = (float)(v309 * 255.0) + 0.5 + 0.0000001;
                  v311 = (_BYTE *)(v60 + v306);
                  v312 = vcvtmd_s64_f64(v310);
                  if (v312 >= 255)
                    v312 = 255;
                  *v311 = v312 & ~(v312 >> 31);
                  LOBYTE(v310) = *(_BYTE *)(v308 + 1);
                  v313 = (double)*(unint64_t *)&v310 * 0.00392156863;
                  v314 = (float)(v313 * 255.0) + 0.5 + 0.0000001;
                  v315 = vcvtmd_s64_f64(v314);
                  if (v315 >= 255)
                    v315 = 255;
                  v311[1] = v315 & ~(v315 >> 31);
                  LOBYTE(v314) = *(_BYTE *)(v308 + 2);
                  v316 = (double)*(unint64_t *)&v314 * 0.00392156863;
                  v68 = (float)(v316 * 255.0) + 0.5 + 0.0000001;
                  v317 = vcvtmd_s64_f64(v68);
                  if (v317 >= 255)
                    v317 = 255;
                  v311[2] = v317 & ~(v317 >> 31);
                  v306 += 4;
                  --v307;
                }
                while (v307);
              }
              v59 += v67;
              v60 += result;
            }
          }
        }
        else if (v66)
        {
          v553 = 0;
          v554 = (float64x2_t)vdupq_n_s64(0x3F70101010101010uLL);
          v555 = (float32x2_t)vdup_n_s32(0x437F0000u);
          __asm { FMOV            V2.2D, #0.5 }
          v557 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          do
          {
            if (v65)
            {
              v558 = 0;
              v559 = v65;
              do
              {
                v560 = *(unsigned __int8 *)(v59 + v558 + 3);
                v561.f64[0] = (double)((32897 * v560 * *(unsigned __int8 *)(v59 + v558)) >> 23);
                v562 = (_BYTE *)(v60 + v558);
                v561.f64[1] = (double)((32897
                                                       * v560
                                                       * *(unsigned __int8 *)(v59 + v558 + 1)) >> 23);
                *(int32x2_t *)&v561.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v561, v554)), v555)), _Q2), v557)))), (int32x2_t)0xFF000000FFLL), 0);
                v563 = LOBYTE(v561.f64[0]);
                *(float *)v561.f64 = (double)((32897
                                                              * v560
                                                              * *(unsigned __int8 *)(v59 + v558 + 2)) >> 23)
                                   * 0.00392156863;
                *v562 = v563;
                v564 = vcvtmd_s64_f64((float)(*(float *)v561.f64 * 255.0) + 0.5 + 0.0000001);
                v562[1] = BYTE4(v561.f64[0]);
                if (v564 >= 255)
                  v565 = 255;
                else
                  v565 = v564;
                v562[2] = v565 & ~(v565 >> 31);
                v558 += 4;
                --v559;
              }
              while (v559);
            }
            v59 += v67;
            v60 += result;
            ++v553;
          }
          while (v553 != v66);
        }
      }
      else if ((v64 & 1) != 0)
      {
        if (v66)
        {
          for (i4 = 0; i4 != v66; ++i4)
          {
            if (v65)
            {
              v192 = 0;
              v193 = v65;
              do
              {
                v194 = v59 + v192;
                LOBYTE(v68) = *(_BYTE *)(v59 + v192);
                v195 = (double)*(unint64_t *)&v68 * 0.00392156863;
                v196 = (float)(v195 * 255.0) + 0.5 + 0.0000001;
                v197 = vcvtmd_s64_f64(v196);
                v198 = (_BYTE *)(v60 + v192);
                if (v197 >= 255)
                  v197 = 255;
                *v198 = v197 & ~(v197 >> 31);
                LOBYTE(v196) = *(_BYTE *)(v194 + 1);
                v199 = (double)*(unint64_t *)&v196 * 0.00392156863;
                v200 = (float)(v199 * 255.0) + 0.5 + 0.0000001;
                v201 = vcvtmd_s64_f64(v200);
                if (v201 >= 255)
                  v201 = 255;
                v198[1] = v201 & ~(v201 >> 31);
                LOBYTE(v200) = *(_BYTE *)(v194 + 2);
                v202 = (double)*(unint64_t *)&v200 * 0.00392156863;
                v68 = (float)(v202 * 255.0) + 0.5 + 0.0000001;
                v203 = vcvtmd_s64_f64(v68);
                if (v203 >= 255)
                  v203 = 255;
                v198[2] = v203 & ~(v203 >> 31);
                v198[3] = -1;
                v192 += 4;
                --v193;
              }
              while (v193);
            }
            v59 += v67;
            v60 += result;
          }
        }
      }
      else if (v66)
      {
        for (i5 = 0; i5 != v66; ++i5)
        {
          if (v65)
          {
            v365 = 0;
            v366 = v65;
            do
            {
              v367 = v59 + v365;
              LOBYTE(v68) = *(_BYTE *)(v59 + v365);
              v368 = (double)*(unint64_t *)&v68 * 0.00392156863;
              v369 = (float)(v368 * 255.0) + 0.5 + 0.0000001;
              v370 = (_BYTE *)(v60 + v365);
              v371 = vcvtmd_s64_f64(v369);
              if (v371 >= 255)
                v371 = 255;
              *v370 = v371 & ~(v371 >> 31);
              LOBYTE(v369) = *(_BYTE *)(v367 + 1);
              v372 = (double)*(unint64_t *)&v369 * 0.00392156863;
              v373 = (float)(v372 * 255.0) + 0.5 + 0.0000001;
              v374 = vcvtmd_s64_f64(v373);
              if (v374 >= 255)
                v374 = 255;
              v370[1] = v374 & ~(v374 >> 31);
              LOBYTE(v373) = *(_BYTE *)(v367 + 2);
              v375 = (double)*(unint64_t *)&v373 * 0.00392156863;
              v68 = (float)(v375 * 255.0) + 0.5 + 0.0000001;
              v376 = vcvtmd_s64_f64(v68);
              if (v376 >= 255)
                v376 = 255;
              v370[2] = v376 & ~(v376 >> 31);
              v365 += 4;
              --v366;
            }
            while (v366);
          }
          v59 += v67;
          v60 += result;
        }
      }
      break;
    case 6:
      if ((*(unsigned int (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2))
      {
LABEL_53:
      }
      else
      {
        v204 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v205 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
        v206 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
        v207 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
        v208 = PCPixelFormat::hasAlpha(3u);
        v209 = PCPixelFormat::hasAlpha(6u);
        v210 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v211 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v212 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
        v214 = result;
        if (v208)
        {
          if (v209)
          {
            if (v206 == v207)
            {
              if (v211)
              {
                for (i6 = 0; i6 != v211; ++i6)
                {
                  if (v210)
                  {
                    v722 = 0;
                    v723 = v210;
                    do
                    {
                      v724 = (_BYTE *)(v204 + v722);
                      LOBYTE(v213) = *(_BYTE *)(v204 + v722 + 1);
                      v725 = (double)*(unint64_t *)&v213 * 0.00392156863;
                      v726 = (float)(v725 * 255.0) + 0.5 + 0.0000001;
                      v727 = vcvtmd_s64_f64(v726);
                      v728 = (_BYTE *)(v205 + v722);
                      if (v727 >= 255)
                        v727 = 255;
                      v728[2] = v727 & ~(v727 >> 31);
                      LOBYTE(v726) = v724[2];
                      v729 = (double)*(unint64_t *)&v726 * 0.00392156863;
                      v730 = (float)(v729 * 255.0) + 0.5 + 0.0000001;
                      v731 = vcvtmd_s64_f64(v730);
                      if (v731 >= 255)
                        v731 = 255;
                      v728[1] = v731 & ~(v731 >> 31);
                      LOBYTE(v730) = v724[3];
                      v732 = (double)*(unint64_t *)&v730 * 0.00392156863;
                      v733 = (float)(v732 * 255.0) + 0.5 + 0.0000001;
                      v734 = vcvtmd_s64_f64(v733);
                      if (v734 >= 255)
                        v734 = 255;
                      *v728 = v734 & ~(v734 >> 31);
                      LOBYTE(v733) = *v724;
                      v735 = (double)*(unint64_t *)&v733 * 0.00392156863;
                      v213 = (float)(v735 * 255.0) + 0.5 + 0.0000001;
                      v736 = vcvtmd_s64_f64(v213);
                      if (v736 >= 255)
                        v736 = 255;
                      v728[3] = v736 & ~(v736 >> 31);
                      v722 += 4;
                      --v723;
                    }
                    while (v723);
                  }
                  v204 += v212;
                  v205 += result;
                }
              }
            }
            else if ((v206 & 1) != 0)
            {
              if (v211)
              {
                v215 = 0;
                v837 = v211;
                v830 = v212;
                do
                {
                  if (v210)
                  {
                    v216 = 0;
                    v217 = v210;
                    do
                    {
                      v218 = (_BYTE *)(v205 + v216);
                      LODWORD(v838) = *(_DWORD *)(v204 + v216);
                      result = (uint64_t)PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>::unpremultiply((unsigned __int8 *)&v838);
                      LOBYTE(v219) = BYTE1(v838);
                      *(float *)&v219 = (double)v219 * 0.00392156863;
                      v220 = (float)(*(float *)&v219 * 255.0) + 0.5 + 0.0000001;
                      v221 = vcvtmd_s64_f64(v220);
                      if (v221 >= 255)
                        v221 = 255;
                      v218[2] = v221 & ~(v221 >> 31);
                      LOBYTE(v220) = BYTE2(v838);
                      v222 = (double)*(unint64_t *)&v220 * 0.00392156863;
                      v223 = (float)(v222 * 255.0) + 0.5 + 0.0000001;
                      v224 = vcvtmd_s64_f64(v223);
                      if (v224 >= 255)
                        v224 = 255;
                      v218[1] = v224 & ~(v224 >> 31);
                      LOBYTE(v223) = BYTE3(v838);
                      v225 = (double)*(unint64_t *)&v223 * 0.00392156863;
                      v226 = (float)(v225 * 255.0) + 0.5 + 0.0000001;
                      v227 = vcvtmd_s64_f64(v226);
                      if (v227 >= 255)
                        v227 = 255;
                      *v218 = v227 & ~(v227 >> 31);
                      LOBYTE(v226) = v838;
                      v228 = (double)*(unint64_t *)&v226 * 0.00392156863;
                      v229 = vcvtmd_s64_f64((float)(v228 * 255.0) + 0.5 + 0.0000001);
                      if (v229 >= 255)
                        v229 = 255;
                      v218[3] = v229 & ~(v229 >> 31);
                      v216 += 4;
                      --v217;
                    }
                    while (v217);
                  }
                  v204 += v830;
                  v205 += v214;
                  ++v215;
                }
                while (v215 != v837);
              }
            }
            else if (v211)
            {
              for (i7 = 0; i7 != v211; ++i7)
              {
                if (v210)
                {
                  v797 = 0;
                  v798 = v210;
                  do
                  {
                    v799 = (_BYTE *)(v204 + v797);
                    LOBYTE(v213) = *(_BYTE *)(v204 + v797 + 1);
                    v800 = (double)*(unint64_t *)&v213 * 0.00392156863;
                    v801 = (float)(v800 * 255.0) + 0.5 + 0.0000001;
                    v802 = vcvtmd_s64_f64(v801);
                    v803 = (_BYTE *)(v205 + v797);
                    if (v802 >= 255)
                      v802 = 255;
                    v804 = v802 & ~(v802 >> 31);
                    v803[2] = v804;
                    LOBYTE(v801) = v799[2];
                    v805 = (double)*(unint64_t *)&v801 * 0.00392156863;
                    v806 = (float)(v805 * 255.0) + 0.5 + 0.0000001;
                    v807 = vcvtmd_s64_f64(v806);
                    if (v807 >= 255)
                      v807 = 255;
                    v808 = v807 & ~(v807 >> 31);
                    v803[1] = v808;
                    LOBYTE(v806) = v799[3];
                    v809 = (double)*(unint64_t *)&v806 * 0.00392156863;
                    v810 = (float)(v809 * 255.0) + 0.5 + 0.0000001;
                    v811 = vcvtmd_s64_f64(v810);
                    if (v811 >= 255)
                      v811 = 255;
                    result = v811 & ~(v811 >> 31);
                    *v803 = result;
                    LOBYTE(v810) = *v799;
                    v812 = (double)*(unint64_t *)&v810 * 0.00392156863;
                    v213 = (float)(v812 * 255.0) + 0.5 + 0.0000001;
                    v813 = vcvtmd_s64_f64(v213);
                    if (v813 >= 255)
                      v813 = 255;
                    v814 = v813 & ~(v813 >> 31);
                    v803[3] = v814;
                    v803[2] = (32897 * v814 * v804) >> 23;
                    v803[1] = (32897 * v814 * v808) >> 23;
                    *v803 = (32897 * v814 * result) >> 23;
                    v797 += 4;
                    --v798;
                  }
                  while (v798);
                }
                v204 += v212;
                v205 += v214;
              }
            }
          }
          else if ((v206 & 1) != 0)
          {
            if (v211)
            {
              for (i8 = 0; i8 != v211; ++i8)
              {
                if (v210)
                {
                  v509 = 0;
                  v510 = v210;
                  do
                  {
                    v511 = v204 + v509;
                    LOBYTE(v213) = *(_BYTE *)(v204 + v509 + 1);
                    v512 = (double)*(unint64_t *)&v213 * 0.00392156863;
                    v513 = (float)(v512 * 255.0) + 0.5 + 0.0000001;
                    v514 = (_BYTE *)(v205 + v509);
                    v515 = vcvtmd_s64_f64(v513);
                    if (v515 >= 255)
                      v515 = 255;
                    v514[2] = v515 & ~(v515 >> 31);
                    LOBYTE(v513) = *(_BYTE *)(v511 + 2);
                    v516 = (double)*(unint64_t *)&v513 * 0.00392156863;
                    v517 = (float)(v516 * 255.0) + 0.5 + 0.0000001;
                    v518 = vcvtmd_s64_f64(v517);
                    if (v518 >= 255)
                      v518 = 255;
                    v514[1] = v518 & ~(v518 >> 31);
                    LOBYTE(v517) = *(_BYTE *)(v511 + 3);
                    v519 = (double)*(unint64_t *)&v517 * 0.00392156863;
                    v213 = (float)(v519 * 255.0) + 0.5 + 0.0000001;
                    v520 = vcvtmd_s64_f64(v213);
                    if (v520 >= 255)
                      v520 = 255;
                    *v514 = v520 & ~(v520 >> 31);
                    v509 += 4;
                    --v510;
                  }
                  while (v510);
                }
                v204 += v212;
                v205 += result;
              }
            }
          }
          else if (v211)
          {
            v756 = 0;
            v757 = (float64x2_t)vdupq_n_s64(0x3F70101010101010uLL);
            v758 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
            v759 = (float32x2_t)vdup_n_s32(0x437F0000u);
            __asm { FMOV            V6.2D, #0.5 }
            do
            {
              if (v210)
              {
                v761 = 0;
                v762 = v210;
                do
                {
                  v763 = *(unsigned __int8 *)(v204 + v761);
                  v764 = (double)((32897 * *(unsigned __int8 *)(v204 + v761 + 1) * v763) >> 23)
                       * 0.00392156863;
                  v765 = vcvtmd_s64_f64((float)(v764 * 255.0) + 0.5 + 0.0000001);
                  v766.f64[0] = (double)((32897
                                                         * *(unsigned __int8 *)(v204 + v761 + 3)
                                                         * v763) >> 23);
                  v766.f64[1] = (double)((32897
                                                         * *(unsigned __int8 *)(v204 + v761 + 2)
                                                         * v763) >> 23);
                  v767 = vmul_f32(vcvt_f32_f64(vmulq_f64(v766, v757)), v759);
                  if (v765 >= 255)
                    v768 = 255;
                  else
                    v768 = v765;
                  v769 = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(v767), _Q6), v758)))), (int32x2_t)0xFF000000FFLL), 0);
                  v770 = (_BYTE *)(v205 + v761);
                  v770[2] = v768 & ~(v768 >> 31);
                  v770[1] = v769.i8[4];
                  *v770 = v769.i8[0];
                  v761 += 4;
                  --v762;
                }
                while (v762);
              }
              v204 += v212;
              v205 += result;
              ++v756;
            }
            while (v756 != v211);
          }
        }
        else if ((v209 & 1) != 0)
        {
          if (v211)
          {
            for (i9 = 0; i9 != v211; ++i9)
            {
              if (v210)
              {
                v378 = 0;
                v379 = v210;
                do
                {
                  v380 = v204 + v378;
                  LOBYTE(v213) = *(_BYTE *)(v204 + v378 + 1);
                  v381 = (double)*(unint64_t *)&v213 * 0.00392156863;
                  v382 = (float)(v381 * 255.0) + 0.5 + 0.0000001;
                  v383 = vcvtmd_s64_f64(v382);
                  v384 = (_BYTE *)(v205 + v378);
                  if (v383 >= 255)
                    v383 = 255;
                  v384[2] = v383 & ~(v383 >> 31);
                  LOBYTE(v382) = *(_BYTE *)(v380 + 2);
                  v385 = (double)*(unint64_t *)&v382 * 0.00392156863;
                  v386 = (float)(v385 * 255.0) + 0.5 + 0.0000001;
                  v387 = vcvtmd_s64_f64(v386);
                  if (v387 >= 255)
                    v387 = 255;
                  v384[1] = v387 & ~(v387 >> 31);
                  LOBYTE(v386) = *(_BYTE *)(v380 + 3);
                  v388 = (double)*(unint64_t *)&v386 * 0.00392156863;
                  v213 = (float)(v388 * 255.0) + 0.5 + 0.0000001;
                  v389 = vcvtmd_s64_f64(v213);
                  if (v389 >= 255)
                    v389 = 255;
                  *v384 = v389 & ~(v389 >> 31);
                  v384[3] = -1;
                  v378 += 4;
                  --v379;
                }
                while (v379);
              }
              v204 += v212;
              v205 += result;
            }
          }
        }
        else if (v211)
        {
          for (i10 = 0; i10 != v211; ++i10)
          {
            if (v210)
            {
              v607 = 0;
              v608 = v210;
              do
              {
                v609 = v204 + v607;
                LOBYTE(v213) = *(_BYTE *)(v204 + v607 + 1);
                v610 = (double)*(unint64_t *)&v213 * 0.00392156863;
                v611 = (float)(v610 * 255.0) + 0.5 + 0.0000001;
                v612 = (_BYTE *)(v205 + v607);
                v613 = vcvtmd_s64_f64(v611);
                if (v613 >= 255)
                  v613 = 255;
                v612[2] = v613 & ~(v613 >> 31);
                LOBYTE(v611) = *(_BYTE *)(v609 + 2);
                v614 = (double)*(unint64_t *)&v611 * 0.00392156863;
                v615 = (float)(v614 * 255.0) + 0.5 + 0.0000001;
                v616 = vcvtmd_s64_f64(v615);
                if (v616 >= 255)
                  v616 = 255;
                v612[1] = v616 & ~(v616 >> 31);
                LOBYTE(v615) = *(_BYTE *)(v609 + 3);
                v617 = (double)*(unint64_t *)&v615 * 0.00392156863;
                v213 = (float)(v617 * 255.0) + 0.5 + 0.0000001;
                v618 = vcvtmd_s64_f64(v213);
                if (v618 >= 255)
                  v618 = 255;
                *v612 = v618 & ~(v618 >> 31);
                v607 += 4;
                --v608;
              }
              while (v608);
            }
            v204 += v212;
            v205 += result;
          }
        }
      }
      break;
    case 9:
      v85 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v86 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
      v87 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v88 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
      v89 = PCPixelFormat::hasAlpha(0xAu);
      v90 = PCPixelFormat::hasAlpha(9u);
      v91 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v92 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v93 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
      v96 = result;
      if (v89)
      {
        if (v90)
        {
          if (v87 == v88)
          {
            if (v92)
            {
              v472 = 0;
              v473 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
              v474 = (float32x2_t)vdup_n_s32(0x477FFF00u);
              __asm { FMOV            V2.2D, #0.5 }
              v476 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
              do
              {
                v477 = v91;
                v478 = (_WORD *)v86;
                for (i11 = (_WORD *)v85; v477; --v477)
                {
                  LOWORD(v94) = *i11;
                  v480.f64[0] = (double)*(unint64_t *)&v94;
                  LOWORD(v95) = i11[1];
                  v95 = (double)*(unint64_t *)&v95;
                  v480.f64[1] = v95;
                  *(int32x2_t *)&v480.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v480, v473)), v474)), _Q2), v476)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
                  v478[1] = WORD2(v480.f64[0]);
                  *v478 = LOWORD(v480.f64[0]);
                  LOWORD(v480.f64[0]) = i11[2];
                  *(float *)v480.f64 = (double)*(unint64_t *)&v480.f64[0] * 0.0000152590219;
                  v94 = (float)(*(float *)v480.f64 * 65535.0) + 0.5 + 0.0000001;
                  v481 = vcvtmd_s64_f64(v94);
                  if (v481 >= 0xFFFF)
                    v481 = 0xFFFF;
                  v478[2] = v481 & ~(unsigned __int16)(v481 >> 31);
                  i11 += 4;
                  v478 += 3;
                }
                v85 += v93;
                v86 += result;
                ++v472;
              }
              while (v472 != v92);
            }
          }
          else if ((v87 & 1) != 0)
          {
            if (v92)
            {
              v97 = 0;
              v98 = (float32x2_t)vdup_n_s32(0x477FFF00u);
              __asm { FMOV            V0.2D, #0.5 }
              v829 = _Q0;
              v834 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
              v825 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
              v823 = v92;
              do
              {
                if (v91)
                {
                  v100 = 0;
                  v101 = (_WORD *)v86;
                  do
                  {
                    v838 = *(_QWORD *)(v85 + 8 * v100);
                    result = (uint64_t)PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>::unpremultiply((unsigned __int16 *)&v838);
                    LOWORD(v102) = v838;
                    v103.f64[0] = (double)v102;
                    LOWORD(v104) = WORD1(v838);
                    v103.f64[1] = (double)v104;
                    *(int32x2_t *)&v103.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v103, v834)), v98)), v829), v825)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
                    v101[1] = WORD2(v103.f64[0]);
                    *v101 = LOWORD(v103.f64[0]);
                    LOWORD(v103.f64[0]) = WORD2(v838);
                    *(float *)v103.f64 = (double)*(unint64_t *)&v103.f64[0] * 0.0000152590219;
                    v105 = vcvtmd_s64_f64((float)(*(float *)v103.f64 * 65535.0) + 0.5 + 0.0000001);
                    if (v105 >= 0xFFFF)
                      v105 = 0xFFFF;
                    v101[2] = v105 & ~(unsigned __int16)(v105 >> 31);
                    ++v100;
                    v101 += 3;
                  }
                  while (v91 != (_DWORD)v100);
                }
                v85 += v93;
                v86 += v96;
                ++v97;
              }
              while (v97 != v823);
            }
          }
          else if (v92)
          {
            v677 = 0;
            v678 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
            v679 = (float32x2_t)vdup_n_s32(0x477FFF00u);
            __asm { FMOV            V2.2D, #0.5 }
            v681 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
            do
            {
              v682 = v91;
              v683 = (_WORD *)v86;
              for (i12 = (_WORD *)v85; v682; --v682)
              {
                LOWORD(v94) = *i12;
                v685.f64[0] = (double)*(unint64_t *)&v94;
                LOWORD(v95) = i12[1];
                v95 = (double)*(unint64_t *)&v95;
                v685.f64[1] = v95;
                *(int32x2_t *)&v685.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v685, v678)), v679)), _Q2), v681)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
                v683[1] = WORD2(v685.f64[0]);
                *v683 = LOWORD(v685.f64[0]);
                LOWORD(v685.f64[0]) = i12[2];
                *(float *)v685.f64 = (double)*(unint64_t *)&v685.f64[0] * 0.0000152590219;
                v94 = (float)(*(float *)v685.f64 * 65535.0) + 0.5 + 0.0000001;
                v686 = vcvtmd_s64_f64(v94);
                if (v686 >= 0xFFFF)
                  v686 = 0xFFFF;
                v683[2] = v686 & ~(unsigned __int16)(v686 >> 31);
                i12 += 4;
                v683 += 3;
              }
              v85 += v93;
              v86 += result;
              ++v677;
            }
            while (v677 != v92);
          }
        }
        else if ((v87 & 1) != 0)
        {
          if (v92)
          {
            v318 = 0;
            v319 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
            v320 = (float32x2_t)vdup_n_s32(0x477FFF00u);
            __asm { FMOV            V2.2D, #0.5 }
            v322 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
            do
            {
              v323 = v91;
              v324 = (_WORD *)v86;
              for (i13 = (_WORD *)v85; v323; --v323)
              {
                LOWORD(v94) = *i13;
                v326.f64[0] = (double)*(unint64_t *)&v94;
                LOWORD(v95) = i13[1];
                v95 = (double)*(unint64_t *)&v95;
                v326.f64[1] = v95;
                *(int32x2_t *)&v326.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v326, v319)), v320)), _Q2), v322)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
                v324[1] = WORD2(v326.f64[0]);
                *v324 = LOWORD(v326.f64[0]);
                LOWORD(v326.f64[0]) = i13[2];
                *(float *)v326.f64 = (double)*(unint64_t *)&v326.f64[0] * 0.0000152590219;
                v94 = (float)(*(float *)v326.f64 * 65535.0) + 0.5 + 0.0000001;
                v327 = vcvtmd_s64_f64(v94);
                if (v327 >= 0xFFFF)
                  v327 = 0xFFFF;
                v324[2] = v327 & ~(unsigned __int16)(v327 >> 31);
                i13 += 4;
                v324 += 3;
              }
              v85 += v93;
              v86 += result;
              ++v318;
            }
            while (v318 != v92);
          }
        }
        else if (v92)
        {
          v566 = 0;
          v567 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
          v568 = (float32x2_t)vdup_n_s32(0x477FFF00u);
          __asm { FMOV            V2.2D, #0.5 }
          v570 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          do
          {
            v571 = v91;
            v572 = (_WORD *)v86;
            for (i14 = (unsigned __int16 *)v85; v571; --v571)
            {
              v574 = i14[3];
              v575.f64[0] = (double)(unsigned __int16)(v574 * *i14 / 0xFFFF);
              v575.f64[1] = (double)(unsigned __int16)(v574 * i14[1] / 0xFFFF);
              *(int32x2_t *)&v575.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v575, v567)), v568)), _Q2), v570)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
              v576 = LOWORD(v575.f64[0]);
              *(float *)v575.f64 = (double)(unsigned __int16)(v574 * i14[2] / 0xFFFF) * 0.0000152590219;
              *v572 = v576;
              v577 = vcvtmd_s64_f64((float)(*(float *)v575.f64 * 65535.0) + 0.5 + 0.0000001);
              v572[1] = WORD2(v575.f64[0]);
              if (v577 >= 0xFFFF)
                v578 = 0xFFFF;
              else
                v578 = v577;
              v572[2] = v578 & ~(unsigned __int16)(v578 >> 31);
              i14 += 4;
              v572 += 3;
            }
            v85 += v93;
            v86 += result;
            ++v566;
          }
          while (v566 != v92);
        }
      }
      else if ((v90 & 1) != 0)
      {
        if (v92)
        {
          v230 = 0;
          v231 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
          v232 = (float32x2_t)vdup_n_s32(0x477FFF00u);
          __asm { FMOV            V2.2D, #0.5 }
          v234 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          do
          {
            v235 = v91;
            v236 = (_WORD *)v86;
            for (i15 = (_WORD *)v85; v235; --v235)
            {
              LOWORD(v94) = *i15;
              v238.f64[0] = (double)*(unint64_t *)&v94;
              LOWORD(v95) = i15[1];
              v95 = (double)*(unint64_t *)&v95;
              v238.f64[1] = v95;
              *(int32x2_t *)&v238.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v238, v231)), v232)), _Q2), v234)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
              v236[1] = WORD2(v238.f64[0]);
              *v236 = LOWORD(v238.f64[0]);
              LOWORD(v238.f64[0]) = i15[2];
              *(float *)v238.f64 = (double)*(unint64_t *)&v238.f64[0] * 0.0000152590219;
              v94 = (float)(*(float *)v238.f64 * 65535.0) + 0.5 + 0.0000001;
              v239 = vcvtmd_s64_f64(v94);
              if (v239 >= 0xFFFF)
                v239 = 0xFFFF;
              v236[2] = v239 & ~(unsigned __int16)(v239 >> 31);
              i15 += 4;
              v236 += 3;
            }
            v85 += v93;
            v86 += result;
            ++v230;
          }
          while (v230 != v92);
        }
      }
      else if (v92)
      {
        v390 = 0;
        v391 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
        v392 = (float32x2_t)vdup_n_s32(0x477FFF00u);
        __asm { FMOV            V2.2D, #0.5 }
        v394 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
        do
        {
          v395 = v91;
          v396 = (_WORD *)v86;
          for (i16 = (_WORD *)v85; v395; --v395)
          {
            LOWORD(v94) = *i16;
            v398.f64[0] = (double)*(unint64_t *)&v94;
            LOWORD(v95) = i16[1];
            v95 = (double)*(unint64_t *)&v95;
            v398.f64[1] = v95;
            *(int32x2_t *)&v398.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v398, v391)), v392)), _Q2), v394)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
            v396[1] = WORD2(v398.f64[0]);
            *v396 = LOWORD(v398.f64[0]);
            LOWORD(v398.f64[0]) = i16[2];
            *(float *)v398.f64 = (double)*(unint64_t *)&v398.f64[0] * 0.0000152590219;
            v94 = (float)(*(float *)v398.f64 * 65535.0) + 0.5 + 0.0000001;
            v399 = vcvtmd_s64_f64(v94);
            if (v399 >= 0xFFFF)
              v399 = 0xFFFF;
            v396[2] = v399 & ~(unsigned __int16)(v399 >> 31);
            i16 += 4;
            v396 += 3;
          }
          v85 += v93;
          v86 += result;
          ++v390;
        }
        while (v390 != v92);
      }
      break;
    case 10:
      v106 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v107 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
      v108 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v109 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
      v110 = PCPixelFormat::hasAlpha(0xAu);
      v111 = PCPixelFormat::hasAlpha(0xAu);
      v112 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v113 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v114 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
      v116 = result;
      if (v110)
      {
        if (v111)
        {
          if (v108 == v109)
          {
            if (v113)
            {
              for (i17 = 0; i17 != v113; ++i17)
              {
                if (v112)
                {
                  v483 = 0;
                  v484 = v112;
                  do
                  {
                    v485 = (_WORD *)(v106 + v483);
                    LOWORD(v115) = *(_WORD *)(v106 + v483);
                    v486 = (double)*(unint64_t *)&v115 * 0.0000152590219;
                    v487 = (float)(v486 * 65535.0) + 0.5 + 0.0000001;
                    v488 = vcvtmd_s64_f64(v487);
                    v489 = (_WORD *)(v107 + v483);
                    if (v488 >= 0xFFFF)
                      v488 = 0xFFFF;
                    *v489 = v488 & ~(unsigned __int16)(v488 >> 31);
                    LOWORD(v487) = v485[1];
                    v490 = (double)*(unint64_t *)&v487 * 0.0000152590219;
                    v491 = (float)(v490 * 65535.0) + 0.5 + 0.0000001;
                    v492 = vcvtmd_s64_f64(v491);
                    if (v492 >= 0xFFFF)
                      v492 = 0xFFFF;
                    v489[1] = v492 & ~(unsigned __int16)(v492 >> 31);
                    LOWORD(v491) = v485[2];
                    v493 = (double)*(unint64_t *)&v491 * 0.0000152590219;
                    v494 = (float)(v493 * 65535.0) + 0.5 + 0.0000001;
                    v495 = vcvtmd_s64_f64(v494);
                    if (v495 >= 0xFFFF)
                      v495 = 0xFFFF;
                    v489[2] = v495 & ~(unsigned __int16)(v495 >> 31);
                    LOWORD(v494) = v485[3];
                    v496 = (double)*(unint64_t *)&v494 * 0.0000152590219;
                    v115 = (float)(v496 * 65535.0) + 0.5 + 0.0000001;
                    v497 = vcvtmd_s64_f64(v115);
                    if (v497 >= 0xFFFF)
                      v497 = 0xFFFF;
                    v489[3] = v497 & ~(unsigned __int16)(v497 >> 31);
                    v483 += 8;
                    --v484;
                  }
                  while (v484);
                }
                v106 += v114;
                v107 += result;
              }
            }
          }
          else if ((v108 & 1) != 0)
          {
            if (v113)
            {
              v117 = 0;
              v835 = v114;
              do
              {
                if (v112)
                {
                  v118 = 0;
                  v119 = v112;
                  do
                  {
                    v120 = (_WORD *)(v107 + v118);
                    v838 = *(_QWORD *)(v106 + v118);
                    result = (uint64_t)PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>::unpremultiply((unsigned __int16 *)&v838);
                    LOWORD(v121) = v838;
                    *(float *)&v121 = (double)v121 * 0.0000152590219;
                    v122 = (float)(*(float *)&v121 * 65535.0) + 0.5 + 0.0000001;
                    v123 = vcvtmd_s64_f64(v122);
                    if (v123 >= 0xFFFF)
                      v123 = 0xFFFF;
                    *v120 = v123 & ~(unsigned __int16)(v123 >> 31);
                    LOWORD(v122) = WORD1(v838);
                    v124 = (double)*(unint64_t *)&v122 * 0.0000152590219;
                    v125 = (float)(v124 * 65535.0) + 0.5 + 0.0000001;
                    v126 = vcvtmd_s64_f64(v125);
                    if (v126 >= 0xFFFF)
                      v126 = 0xFFFF;
                    v120[1] = v126 & ~(unsigned __int16)(v126 >> 31);
                    LOWORD(v125) = WORD2(v838);
                    v127 = (double)*(unint64_t *)&v125 * 0.0000152590219;
                    v128 = (float)(v127 * 65535.0) + 0.5 + 0.0000001;
                    v129 = vcvtmd_s64_f64(v128);
                    if (v129 >= 0xFFFF)
                      v129 = 0xFFFF;
                    v120[2] = v129 & ~(unsigned __int16)(v129 >> 31);
                    LOWORD(v128) = HIWORD(v838);
                    v130 = (double)*(unint64_t *)&v128 * 0.0000152590219;
                    v131 = vcvtmd_s64_f64((float)(v130 * 65535.0) + 0.5 + 0.0000001);
                    if (v131 >= 0xFFFF)
                      v131 = 0xFFFF;
                    v120[3] = v131 & ~(unsigned __int16)(v131 >> 31);
                    v118 += 8;
                    --v119;
                  }
                  while (v119);
                }
                v106 += v835;
                v107 += v116;
                ++v117;
              }
              while (v117 != v113);
            }
          }
          else if (v113)
          {
            for (i18 = 0; i18 != v113; ++i18)
            {
              if (v112)
              {
                v688 = 0;
                v689 = v112;
                do
                {
                  v690 = (_WORD *)(v106 + v688);
                  LOWORD(v115) = *(_WORD *)(v106 + v688);
                  v691 = (double)*(unint64_t *)&v115 * 0.0000152590219;
                  v692 = (float)(v691 * 65535.0) + 0.5 + 0.0000001;
                  v693 = vcvtmd_s64_f64(v692);
                  v694 = (_WORD *)(v107 + v688);
                  if (v693 >= 0xFFFF)
                    v693 = 0xFFFF;
                  v695 = v693 & ~(v693 >> 31);
                  *v694 = v695;
                  LOWORD(v692) = v690[1];
                  v696 = (double)*(unint64_t *)&v692 * 0.0000152590219;
                  v697 = (float)(v696 * 65535.0) + 0.5 + 0.0000001;
                  v698 = vcvtmd_s64_f64(v697);
                  if (v698 >= 0xFFFF)
                    v698 = 0xFFFF;
                  v699 = v698 & ~(v698 >> 31);
                  v694[1] = v699;
                  LOWORD(v697) = v690[2];
                  v700 = (double)*(unint64_t *)&v697 * 0.0000152590219;
                  v701 = (float)(v700 * 65535.0) + 0.5 + 0.0000001;
                  v702 = vcvtmd_s64_f64(v701);
                  if (v702 >= 0xFFFF)
                    v702 = 0xFFFF;
                  v703 = v702 & ~(v702 >> 31);
                  v694[2] = v703;
                  LOWORD(v701) = v690[3];
                  v704 = (double)*(unint64_t *)&v701 * 0.0000152590219;
                  v115 = (float)(v704 * 65535.0) + 0.5 + 0.0000001;
                  v705 = vcvtmd_s64_f64(v115);
                  if (v705 >= 0xFFFF)
                    v705 = 0xFFFF;
                  v706 = v705 & ~(v705 >> 31);
                  v694[3] = v706;
                  *v694 = v706 * v695 / 0xFFFFu;
                  v694[1] = v706 * v699 / 0xFFFFu;
                  v694[2] = v706 * v703 / 0xFFFFu;
                  v688 += 8;
                  --v689;
                }
                while (v689);
              }
              v106 += v114;
              v107 += result;
            }
          }
        }
        else if ((v108 & 1) != 0)
        {
          if (v113)
          {
            for (i19 = 0; i19 != v113; ++i19)
            {
              if (v112)
              {
                v329 = 0;
                v330 = v112;
                do
                {
                  v331 = v106 + v329;
                  LOWORD(v115) = *(_WORD *)(v106 + v329);
                  v332 = (double)*(unint64_t *)&v115 * 0.0000152590219;
                  v333 = (float)(v332 * 65535.0) + 0.5 + 0.0000001;
                  v334 = (_WORD *)(v107 + v329);
                  v335 = vcvtmd_s64_f64(v333);
                  if (v335 >= 0xFFFF)
                    v335 = 0xFFFF;
                  *v334 = v335 & ~(unsigned __int16)(v335 >> 31);
                  LOWORD(v333) = *(_WORD *)(v331 + 2);
                  v336 = (double)*(unint64_t *)&v333 * 0.0000152590219;
                  v337 = (float)(v336 * 65535.0) + 0.5 + 0.0000001;
                  v338 = vcvtmd_s64_f64(v337);
                  if (v338 >= 0xFFFF)
                    v338 = 0xFFFF;
                  v334[1] = v338 & ~(unsigned __int16)(v338 >> 31);
                  LOWORD(v337) = *(_WORD *)(v331 + 4);
                  v339 = (double)*(unint64_t *)&v337 * 0.0000152590219;
                  v115 = (float)(v339 * 65535.0) + 0.5 + 0.0000001;
                  v340 = vcvtmd_s64_f64(v115);
                  if (v340 >= 0xFFFF)
                    v340 = 0xFFFF;
                  v334[2] = v340 & ~(unsigned __int16)(v340 >> 31);
                  v329 += 8;
                  --v330;
                }
                while (v330);
              }
              v106 += v114;
              v107 += result;
            }
          }
        }
        else if (v113)
        {
          v579 = 0;
          v580 = (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL);
          v581 = (float32x2_t)vdup_n_s32(0x477FFF00u);
          __asm { FMOV            V2.2D, #0.5 }
          v583 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
          do
          {
            if (v112)
            {
              v584 = 0;
              v585 = v112;
              do
              {
                v586 = (_WORD *)(v107 + v584);
                v587 = *(unsigned __int16 *)(v106 + v584 + 6);
                v588.f64[0] = (double)(unsigned __int16)(v587 * *(unsigned __int16 *)(v106 + v584) / 0xFFFF);
                v588.f64[1] = (double)(unsigned __int16)(v587
                                                       * *(unsigned __int16 *)(v106 + v584 + 2)
                                                       / 0xFFFF);
                *(int32x2_t *)&v588.f64[0] = vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vcvt_f32_f64(vmulq_f64(v588, v580)), v581)), _Q2), v583)))), (int32x2_t)0xFFFF0000FFFFLL), 0);
                v589 = LOWORD(v588.f64[0]);
                *(float *)v588.f64 = (double)(unsigned __int16)(v587
                                                              * *(unsigned __int16 *)(v106 + v584 + 4)
                                                              / 0xFFFF)
                                   * 0.0000152590219;
                *v586 = v589;
                v590 = vcvtmd_s64_f64((float)(*(float *)v588.f64 * 65535.0) + 0.5 + 0.0000001);
                v586[1] = WORD2(v588.f64[0]);
                if (v590 >= 0xFFFF)
                  v590 = 0xFFFF;
                v586[2] = v590 & ~(unsigned __int16)(v590 >> 31);
                v584 += 8;
                --v585;
              }
              while (v585);
            }
            v106 += v114;
            v107 += result;
            ++v579;
          }
          while (v579 != v113);
        }
      }
      else if ((v111 & 1) != 0)
      {
        if (v113)
        {
          for (i20 = 0; i20 != v113; ++i20)
          {
            if (v112)
            {
              v241 = 0;
              v242 = v112;
              do
              {
                v243 = v106 + v241;
                LOWORD(v115) = *(_WORD *)(v106 + v241);
                v244 = (double)*(unint64_t *)&v115 * 0.0000152590219;
                v245 = (float)(v244 * 65535.0) + 0.5 + 0.0000001;
                v246 = vcvtmd_s64_f64(v245);
                v247 = (_WORD *)(v107 + v241);
                if (v246 >= 0xFFFF)
                  v246 = 0xFFFF;
                *v247 = v246 & ~(unsigned __int16)(v246 >> 31);
                LOWORD(v245) = *(_WORD *)(v243 + 2);
                v248 = (double)*(unint64_t *)&v245 * 0.0000152590219;
                v249 = (float)(v248 * 65535.0) + 0.5 + 0.0000001;
                v250 = vcvtmd_s64_f64(v249);
                if (v250 >= 0xFFFF)
                  v250 = 0xFFFF;
                v247[1] = v250 & ~(unsigned __int16)(v250 >> 31);
                LOWORD(v249) = *(_WORD *)(v243 + 4);
                v251 = (double)*(unint64_t *)&v249 * 0.0000152590219;
                v115 = (float)(v251 * 65535.0) + 0.5 + 0.0000001;
                v252 = vcvtmd_s64_f64(v115);
                if (v252 >= 0xFFFF)
                  v252 = 0xFFFF;
                v247[2] = v252 & ~(unsigned __int16)(v252 >> 31);
                v247[3] = -1;
                v241 += 8;
                --v242;
              }
              while (v242);
            }
            v106 += v114;
            v107 += result;
          }
        }
      }
      else if (v113)
      {
        for (i21 = 0; i21 != v113; ++i21)
        {
          if (v112)
          {
            v401 = 0;
            v402 = v112;
            do
            {
              v403 = v106 + v401;
              LOWORD(v115) = *(_WORD *)(v106 + v401);
              v404 = (double)*(unint64_t *)&v115 * 0.0000152590219;
              v405 = (float)(v404 * 65535.0) + 0.5 + 0.0000001;
              v406 = (_WORD *)(v107 + v401);
              v407 = vcvtmd_s64_f64(v405);
              if (v407 >= 0xFFFF)
                v407 = 0xFFFF;
              *v406 = v407 & ~(unsigned __int16)(v407 >> 31);
              LOWORD(v405) = *(_WORD *)(v403 + 2);
              v408 = (double)*(unint64_t *)&v405 * 0.0000152590219;
              v409 = (float)(v408 * 65535.0) + 0.5 + 0.0000001;
              v410 = vcvtmd_s64_f64(v409);
              if (v410 >= 0xFFFF)
                v410 = 0xFFFF;
              v406[1] = v410 & ~(unsigned __int16)(v410 >> 31);
              LOWORD(v409) = *(_WORD *)(v403 + 4);
              v411 = (double)*(unint64_t *)&v409 * 0.0000152590219;
              v115 = (float)(v411 * 65535.0) + 0.5 + 0.0000001;
              v412 = vcvtmd_s64_f64(v115);
              if (v412 >= 0xFFFF)
                v412 = 0xFFFF;
              v406[2] = v412 & ~(unsigned __int16)(v412 >> 31);
              v401 += 8;
              --v402;
            }
            while (v402);
          }
          v106 += v114;
          v107 += result;
        }
      }
      break;
    case 11:
      v132 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v133 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
      v134 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v135 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
      v136 = PCPixelFormat::hasAlpha(0xEu);
      v137 = PCPixelFormat::hasAlpha(0xBu);
      v138 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v139 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v140 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
      v141 = result;
      if (v136)
      {
        if (v137)
        {
          if (v134 == v135)
          {
            if (v139)
            {
              for (i22 = 0; i22 != v139; ++i22)
              {
                if (v138)
                {
                  v499 = 0;
                  do
                  {
                    result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v132 + 4 * v499));
                    *(_WORD *)(v133 + 2 * v499++) = result;
                  }
                  while (v138 != (_DWORD)v499);
                }
                v132 += v140;
                v133 += v141;
              }
            }
          }
          else if ((v134 & 1) != 0)
          {
            if (v139)
            {
              for (i23 = 0; i23 != v139; ++i23)
              {
                if (v138)
                {
                  v143 = 0;
                  do
                  {
                    result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v132 + 4 * v143));
                    *(_WORD *)(v133 + 2 * v143++) = result;
                  }
                  while (v138 != (_DWORD)v143);
                }
                v132 += v140;
                v133 += v141;
              }
            }
          }
          else if (v139)
          {
            for (i24 = 0; i24 != v139; ++i24)
            {
              if (v138)
              {
                v708 = 0;
                do
                {
                  result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v132 + 4 * v708));
                  *(_WORD *)(v133 + 2 * v708++) = result;
                }
                while (v138 != (_DWORD)v708);
              }
              v132 += v140;
              v133 += v141;
            }
          }
        }
        else if ((v134 & 1) != 0)
        {
          if (v139)
          {
            for (i25 = 0; i25 != v139; ++i25)
            {
              if (v138)
              {
                v342 = 0;
                do
                {
                  result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v132 + 4 * v342));
                  *(_WORD *)(v133 + 2 * v342++) = result;
                }
                while (v138 != (_DWORD)v342);
              }
              v132 += v140;
              v133 += v141;
            }
          }
        }
        else if (v139)
        {
          for (i26 = 0; i26 != v139; ++i26)
          {
            if (v138)
            {
              v592 = 0;
              do
              {
                result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v132 + 4 * v592));
                *(_WORD *)(v133 + 2 * v592++) = result;
              }
              while (v138 != (_DWORD)v592);
            }
            v132 += v140;
            v133 += v141;
          }
        }
      }
      else if ((v137 & 1) != 0)
      {
        if (v139)
        {
          for (i27 = 0; i27 != v139; ++i27)
          {
            if (v138)
            {
              v254 = 0;
              do
              {
                result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v132 + 4 * v254));
                *(_WORD *)(v133 + 2 * v254++) = result;
              }
              while (v138 != (_DWORD)v254);
            }
            v132 += v140;
            v133 += v141;
          }
        }
      }
      else if (v139)
      {
        for (i28 = 0; i28 != v139; ++i28)
        {
          if (v138)
          {
            v414 = 0;
            do
            {
              result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*(float *)(v132 + 4 * v414));
              *(_WORD *)(v133 + 2 * v414++) = result;
            }
            while (v138 != (_DWORD)v414);
          }
          v132 += v140;
          v133 += v141;
        }
      }
      break;
    case 13:
      v144 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v145 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
      v146 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v147 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
      v148 = PCPixelFormat::hasAlpha(0x10u);
      v149 = PCPixelFormat::hasAlpha(0xDu);
      v150 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v151 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v836 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
      v152 = result;
      if (v148)
      {
        if (v149)
        {
          if (v146 == v147)
          {
            if (v151)
            {
              for (i29 = 0; i29 != v151; ++i29)
              {
                v501 = v150;
                v502 = (_WORD *)v145;
                for (i30 = (float *)v144; v501; --v501)
                {
                  *v502 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*i30);
                  v502[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i30[1]);
                  v502[2] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i30[2]);
                  result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i30[3]);
                  v502[3] = result;
                  i30 += 4;
                  v502 += 4;
                }
                v144 += v836;
                v145 += v152;
              }
            }
          }
          else if ((v146 & 1) != 0)
          {
            if (v151)
            {
              for (i31 = 0; i31 != v151; ++i31)
              {
                v154 = v150;
                v155 = (_WORD *)v145;
                for (i32 = (float *)v144; v154; --v154)
                {
                  v157 = i32[3];
                  if (v157 == 1.0)
                  {
                    v158 = *i32;
                    v159 = i32[1];
                    v160 = i32[2];
                  }
                  else
                  {
                    v158 = 0.0;
                    v159 = 0.0;
                    v160 = 0.0;
                    if (v157 != 0.0)
                    {
                      v158 = *i32 * (float)(1.0 / v157);
                      v159 = i32[1] * (float)(1.0 / v157);
                      v160 = i32[2] * (float)(1.0 / v157);
                    }
                  }
                  *v155 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(v158);
                  v155[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(v159);
                  v155[2] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(v160);
                  result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(v157);
                  v155[3] = result;
                  i32 += 4;
                  v155 += 4;
                }
                v144 += v836;
                v145 += v152;
              }
            }
          }
          else if (v151)
          {
            for (i33 = 0; i33 != v151; ++i33)
            {
              v710 = v150;
              v711 = (unsigned __int16 *)v145;
              for (i34 = (float *)v144; v710; --v710)
              {
                *v711 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*i34);
                v711[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i34[1]);
                v711[2] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i34[2]);
                v711[3] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i34[3]);
                result = PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>::premultiply(v711);
                i34 += 4;
                v711 += 4;
              }
              v144 += v836;
              v145 += v152;
            }
          }
        }
        else if ((v146 & 1) != 0)
        {
          if (v151)
          {
            for (i35 = 0; i35 != v151; ++i35)
            {
              v344 = v150;
              v345 = (_WORD *)v145;
              for (i36 = (float *)v144; v344; --v344)
              {
                *v345 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*i36);
                v345[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i36[1]);
                result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i36[2]);
                v345[2] = result;
                i36 += 4;
                v345 += 4;
              }
              v144 += v836;
              v145 += v152;
            }
          }
        }
        else if (v151)
        {
          for (i37 = 0; i37 != v151; ++i37)
          {
            v594 = v150;
            v595 = (_WORD *)v145;
            for (i38 = (float *)v144; v594; --v594)
            {
              v597 = i38[3];
              v598 = i38[1] * v597;
              v599 = i38[2] * v597;
              *v595 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*i38 * v597);
              v595[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(v598);
              result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(v599);
              v595[2] = result;
              i38 += 4;
              v595 += 4;
            }
            v144 += v836;
            v145 += v152;
          }
        }
      }
      else if ((v149 & 1) != 0)
      {
        if (v151)
        {
          for (i39 = 0; i39 != v151; ++i39)
          {
            v256 = v150;
            v257 = (_WORD *)v145;
            for (i40 = (float *)v144; v256; --v256)
            {
              *v257 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*i40);
              v257[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i40[1]);
              v257[2] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i40[2]);
              result = 15360;
              v257[3] = 15360;
              i40 += 4;
              v257 += 4;
            }
            v144 += v836;
            v145 += v152;
          }
        }
      }
      else if (v151)
      {
        for (i41 = 0; i41 != v151; ++i41)
        {
          v416 = v150;
          v417 = (_WORD *)v145;
          for (i42 = (float *)v144; v416; --v416)
          {
            *v417 = ProCore::Private::ChannelTypeTraits<half>::denormalizef(*i42);
            v417[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i42[1]);
            result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(i42[2]);
            v417[2] = result;
            i42 += 4;
            v417 += 4;
          }
          v144 += v836;
          v145 += v152;
        }
      }
      break;
    case 16:
      v161 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
      v162 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
      v163 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
      v164 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
      v165 = PCPixelFormat::hasAlpha(0x10u);
      v166 = PCPixelFormat::hasAlpha(0x10u);
      v167 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
      v168 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
      v169 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
      if (v165)
      {
        if (v166)
        {
          if (v163 == v164)
          {
            if (v168)
            {
              for (i43 = 0; i43 != v168; ++i43)
              {
                if (v167)
                {
                  v505 = 0;
                  v506 = v167;
                  do
                  {
                    v507 = (_DWORD *)(v162 + v505);
                    *v507 = *(_DWORD *)(v161 + v505);
                    v507[1] = *(_DWORD *)(v161 + v505 + 4);
                    v507[2] = *(_DWORD *)(v161 + v505 + 8);
                    v507[3] = *(_DWORD *)(v161 + v505 + 12);
                    v505 += 16;
                    --v506;
                  }
                  while (v506);
                }
                v161 += v169;
                v162 += result;
              }
            }
          }
          else if ((v163 & 1) != 0)
          {
            if (v168)
            {
              for (i44 = 0; i44 != v168; ++i44)
              {
                if (v167)
                {
                  v171 = 0;
                  v172 = v167;
                  do
                  {
                    v173 = *(float32x2_t *)(v161 + v171);
                    v175 = *(float *)(v161 + v171 + 8);
                    v174 = *(float *)(v161 + v171 + 12);
                    if (v174 != 1.0)
                    {
                      if (v174 == 0.0)
                      {
                        v173 = 0;
                        v175 = 0.0;
                      }
                      else
                      {
                        v173 = vmul_n_f32(v173, 1.0 / v174);
                        v175 = v175 * (float)(1.0 / v174);
                      }
                    }
                    v176 = (float32x2_t *)(v162 + v171);
                    *v176 = v173;
                    v176[1].f32[0] = v175;
                    v176[1].f32[1] = v174;
                    v171 += 16;
                    --v172;
                  }
                  while (v172);
                }
                v161 += v169;
                v162 += result;
              }
            }
          }
          else if (v168)
          {
            for (i45 = 0; i45 != v168; ++i45)
            {
              if (v167)
              {
                v714 = 0;
                v715 = v167;
                do
                {
                  v716 = (float *)(v162 + v714);
                  v717 = *(float *)(v161 + v714);
                  *v716 = v717;
                  v718 = *(float *)(v161 + v714 + 4);
                  v716[1] = v718;
                  v719 = *(float *)(v161 + v714 + 8);
                  v716[2] = v719;
                  v720 = *(float *)(v161 + v714 + 12);
                  *v716 = v717 * v720;
                  v716[1] = v718 * v720;
                  v716[2] = v719 * v720;
                  v716[3] = v720;
                  v714 += 16;
                  --v715;
                }
                while (v715);
              }
              v161 += v169;
              v162 += result;
            }
          }
        }
        else if ((v163 & 1) != 0)
        {
          if (v168)
          {
            for (i46 = 0; i46 != v168; ++i46)
            {
              if (v167)
              {
                v348 = 0;
                v349 = v167;
                do
                {
                  v350 = (_DWORD *)(v162 + v348);
                  *v350 = *(_DWORD *)(v161 + v348);
                  v350[1] = *(_DWORD *)(v161 + v348 + 4);
                  v350[2] = *(_DWORD *)(v161 + v348 + 8);
                  v348 += 16;
                  --v349;
                }
                while (v349);
              }
              v161 += v169;
              v162 += result;
            }
          }
        }
        else if (v168)
        {
          for (i47 = 0; i47 != v168; ++i47)
          {
            if (v167)
            {
              v601 = 0;
              v602 = v167;
              do
              {
                v603 = (float32x2_t *)(v162 + v601);
                v604 = *(float *)(v161 + v601 + 12);
                v605 = *(float *)(v161 + v601 + 8) * v604;
                *v603 = vmul_n_f32(*(float32x2_t *)(v161 + v601), v604);
                v603[1].f32[0] = v605;
                v601 += 16;
                --v602;
              }
              while (v602);
            }
            v161 += v169;
            v162 += result;
          }
        }
      }
      else if ((v166 & 1) != 0)
      {
        if (v168)
        {
          for (i48 = 0; i48 != v168; ++i48)
          {
            if (v167)
            {
              v260 = 0;
              v261 = v167;
              do
              {
                v262 = (_DWORD *)(v162 + v260);
                *v262 = *(_DWORD *)(v161 + v260);
                v262[1] = *(_DWORD *)(v161 + v260 + 4);
                v262[2] = *(_DWORD *)(v161 + v260 + 8);
                v262[3] = 1065353216;
                v260 += 16;
                --v261;
              }
              while (v261);
            }
            v161 += v169;
            v162 += result;
          }
        }
      }
      else if (v168)
      {
        for (i49 = 0; i49 != v168; ++i49)
        {
          if (v167)
          {
            v420 = 0;
            v421 = v167;
            do
            {
              v422 = (_DWORD *)(v162 + v420);
              *v422 = *(_DWORD *)(v161 + v420);
              v422[1] = *(_DWORD *)(v161 + v420 + 4);
              v422[2] = *(_DWORD *)(v161 + v420 + 8);
              v420 += 16;
              --v421;
            }
            while (v421);
          }
          v161 += v169;
          v162 += result;
        }
      }
      break;
    case 17:
      if ((*(unsigned int (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2))
      {
      }
      else
      {
        v263 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8));
        v264 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
        v265 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this);
        v266 = (*(uint64_t (**)(const PCBitmap *))(*(_QWORD *)a2 + 48))(a2);
        v267 = PCPixelFormat::hasAlpha(0x10u);
        v268 = PCPixelFormat::hasAlpha(0x11u);
        v269 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
        v270 = (*(uint64_t (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
        v271 = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
        if (v267)
        {
          if (v268)
          {
            if (v265 == v266)
            {
              if (v270)
              {
                for (i50 = 0; i50 != v270; ++i50)
                {
                  if (v269)
                  {
                    v738 = 0;
                    v739 = v269;
                    do
                    {
                      v740 = (_DWORD *)(v264 + v738);
                      v740[1] = *(_DWORD *)(v263 + v738);
                      v740[2] = *(_DWORD *)(v263 + v738 + 4);
                      v740[3] = *(_DWORD *)(v263 + v738 + 8);
                      *v740 = *(_DWORD *)(v263 + v738 + 12);
                      v738 += 16;
                      --v739;
                    }
                    while (v739);
                  }
                  v263 += v271;
                  v264 += result;
                }
              }
            }
            else if ((v265 & 1) != 0)
            {
              if (v270)
              {
                for (i51 = 0; i51 != v270; ++i51)
                {
                  if (v269)
                  {
                    v273 = 0;
                    v274 = v269;
                    do
                    {
                      v275 = *(float32x2_t *)(v263 + v273);
                      v277 = *(float *)(v263 + v273 + 8);
                      v276 = *(float *)(v263 + v273 + 12);
                      if (v276 != 1.0)
                      {
                        if (v276 == 0.0)
                        {
                          v275 = 0;
                          v277 = 0.0;
                        }
                        else
                        {
                          v275 = vmul_n_f32(v275, 1.0 / v276);
                          v277 = v277 * (float)(1.0 / v276);
                        }
                      }
                      v278 = v264 + v273;
                      *(float32x2_t *)(v278 + 4) = v275;
                      *(float *)(v278 + 12) = v277;
                      *(float *)v278 = v276;
                      v273 += 16;
                      --v274;
                    }
                    while (v274);
                  }
                  v263 += v271;
                  v264 += result;
                }
              }
            }
            else if (v270)
            {
              for (i52 = 0; i52 != v270; ++i52)
              {
                if (v269)
                {
                  v816 = 0;
                  v817 = v269;
                  do
                  {
                    v818 = (float *)(v264 + v816);
                    v819 = *(float *)(v263 + v816);
                    v818[1] = v819;
                    v820 = *(float *)(v263 + v816 + 4);
                    v818[2] = v820;
                    v821 = *(float *)(v263 + v816 + 8);
                    v818[3] = v821;
                    v822 = *(float *)(v263 + v816 + 12);
                    *v818 = v822;
                    v818[1] = v819 * v822;
                    v818[2] = v820 * v822;
                    v818[3] = v821 * v822;
                    v816 += 16;
                    --v817;
                  }
                  while (v817);
                }
                v263 += v271;
                v264 += result;
              }
            }
          }
          else if ((v265 & 1) != 0)
          {
            if (v270)
            {
              for (i53 = 0; i53 != v270; ++i53)
              {
                if (v269)
                {
                  v522 = 0;
                  v523 = v269;
                  do
                  {
                    v524 = (_DWORD *)(v264 + v522);
                    v524[1] = *(_DWORD *)(v263 + v522);
                    v524[2] = *(_DWORD *)(v263 + v522 + 4);
                    v524[3] = *(_DWORD *)(v263 + v522 + 8);
                    v522 += 16;
                    --v523;
                  }
                  while (v523);
                }
                v263 += v271;
                v264 += result;
              }
            }
          }
          else if (v270)
          {
            for (i54 = 0; i54 != v270; ++i54)
            {
              if (v269)
              {
                v772 = 0;
                v773 = v269;
                do
                {
                  v774 = *(float *)(v263 + v772 + 12);
                  v775 = *(float *)(v263 + v772 + 8) * v774;
                  v776 = v264 + v772;
                  *(float32x2_t *)(v776 + 4) = vmul_n_f32(*(float32x2_t *)(v263 + v772), v774);
                  *(float *)(v776 + 12) = v775;
                  v772 += 16;
                  --v773;
                }
                while (v773);
              }
              v263 += v271;
              v264 += result;
            }
          }
        }
        else if ((v268 & 1) != 0)
        {
          if (v270)
          {
            for (i55 = 0; i55 != v270; ++i55)
            {
              if (v269)
              {
                v424 = 0;
                v425 = v269;
                do
                {
                  v426 = (_DWORD *)(v264 + v424);
                  v426[1] = *(_DWORD *)(v263 + v424);
                  v426[2] = *(_DWORD *)(v263 + v424 + 4);
                  v426[3] = *(_DWORD *)(v263 + v424 + 8);
                  *v426 = 1065353216;
                  v424 += 16;
                  --v425;
                }
                while (v425);
              }
              v263 += v271;
              v264 += result;
            }
          }
        }
        else if (v270)
        {
          for (i56 = 0; i56 != v270; ++i56)
          {
            if (v269)
            {
              v620 = 0;
              v621 = v269;
              do
              {
                v622 = (_DWORD *)(v264 + v620);
                v622[1] = *(_DWORD *)(v263 + v620);
                v622[2] = *(_DWORD *)(v263 + v620 + 4);
                v622[3] = *(_DWORD *)(v263 + v620 + 8);
                v620 += 16;
                --v621;
              }
              while (v621);
            }
            v263 += v271;
            v264 += result;
          }
        }
      }
      break;
    default:
      return result;
  }
  return result;
}

const vImage_Buffer *`anonymous namespace'::swizzleFloatCopy(_anonymous_namespace_ *this, const PCBitmap *a2, PCBitmap *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  vImage_Buffer v10;
  vImage_Buffer v11;

  v11.data = (void *)(*(uint64_t (**)(_QWORD, const PCBitmap *, PCBitmap *))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8), a2, a3);
  v11.height = (*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
  v11.width = (*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
  v11.rowBytes = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
  v10.data = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
  v10.height = (*(unsigned int (**)(const PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
  v10.width = (*(unsigned int (**)(const PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
  v10.rowBytes = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
  v6 = 0;
  if (v5 > 5)
  {
    if (v5 == 6)
    {
      v6 = 3;
      goto LABEL_10;
    }
    if (v5 != 16)
      goto LABEL_10;
LABEL_7:
    v6 = 1;
    goto LABEL_10;
  }
  if (v5 == 4)
  {
    v6 = 2;
    goto LABEL_10;
  }
  if (v5 == 5)
    goto LABEL_7;
LABEL_10:
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
  v8 = 0;
  if (v7 <= 5)
  {
    if (v7 == 4)
    {
      v8 = 2;
    }
    if (v7 != 5)
    goto LABEL_16;
  }
  if (v7 == 6)
  {
    v8 = 3;
  }
  if (v7 == 16)
LABEL_16:
    v8 = 1;
}

const vImage_Buffer *`anonymous namespace'::swizzle8BitCopy(_anonymous_namespace_ *this, const PCBitmap *a2, PCBitmap *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  vImage_Buffer v10;
  vImage_Buffer v11;

  v11.data = (void *)(*(uint64_t (**)(_QWORD, const PCBitmap *, PCBitmap *))(**((_QWORD **)this + 8) + 16))(*((_QWORD *)this + 8), a2, a3);
  v11.height = (*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 24))(this);
  v11.width = (*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 16))(this);
  v11.rowBytes = (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 8) + 64))(*((_QWORD *)this + 8));
  v10.data = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 16))(*((_QWORD *)a2 + 8));
  v10.height = (*(unsigned int (**)(const PCBitmap *))(*(_QWORD *)a2 + 24))(a2);
  v10.width = (*(unsigned int (**)(const PCBitmap *))(*(_QWORD *)a2 + 16))(a2);
  v10.rowBytes = (*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 8) + 64))(*((_QWORD *)a2 + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
  v6 = 0;
  if (v5 > 5)
  {
    if (v5 == 6)
    {
      v6 = 3;
      goto LABEL_10;
    }
    if (v5 != 16)
      goto LABEL_10;
LABEL_7:
    v6 = 1;
    goto LABEL_10;
  }
  if (v5 == 4)
  {
    v6 = 2;
    goto LABEL_10;
  }
  if (v5 == 5)
    goto LABEL_7;
LABEL_10:
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 8) + 48))(*((_QWORD *)a2 + 8));
  v8 = 0;
  if (v7 <= 5)
  {
    if (v7 == 4)
    {
      v8 = 2;
    }
    if (v7 != 5)
    goto LABEL_16;
  }
  if (v7 == 6)
  {
    v8 = 3;
  }
  if (v7 == 16)
LABEL_16:
    v8 = 1;
}

const vImage_Buffer *`anonymous namespace'::swizzleFloatPixels(const vImage_Buffer *result, unsigned int a2, vImage_Buffer *dest, int a4)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  uint8_t v8;
  uint8_t v9;
  uint8_t v10;
  uint8_t permuteMap[4];

  if (a2 != a4 || result->data != dest->data)
  {
    if (a2 <= 3)
      v4 = 0x2030001u >> (8 * a2);
    else
      LOBYTE(v4) = 0;
    if (a2 <= 3)
      v5 = 0x1020102u >> (8 * a2);
    else
      LOBYTE(v5) = 1;
    if (a2 <= 3)
      v6 = 3 - a2;
    else
      v6 = 2;
    if (a2 <= 3)
      v7 = 0x3000300u >> (8 * a2);
    else
      LOBYTE(v7) = 3;
    v8 = v4;
    v9 = v5;
    v10 = v6;
    switch(a4)
    {
      case 0:
        v8 = v7;
        v9 = v4;
        v10 = v5;
        LOBYTE(v7) = v6;
        goto LABEL_19;
      case 1:
        goto LABEL_19;
      case 2:
        v8 = v7;
        v9 = v6;
        v10 = v5;
        LOBYTE(v7) = v4;
        goto LABEL_19;
      case 3:
        v8 = v6;
        v9 = v5;
        v10 = v4;
LABEL_19:
        permuteMap[0] = v8;
        permuteMap[1] = v9;
        permuteMap[2] = v10;
        permuteMap[3] = v7;
        break;
      default:
        return (const vImage_Buffer *)vImagePermuteChannels_ARGBFFFF(result, dest, permuteMap, 0);
    }
    return (const vImage_Buffer *)vImagePermuteChannels_ARGBFFFF(result, dest, permuteMap, 0);
  }
  return result;
}

const vImage_Buffer *`anonymous namespace'::swizzle8BitPixels(const vImage_Buffer *result, unsigned int a2, vImage_Buffer *dest, int a4)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  unsigned int v7;
  uint8_t v8;
  uint8_t v9;
  uint8_t v10;
  uint8_t permuteMap[4];

  if (a2 != a4 || result->data != dest->data)
  {
    if (a2 <= 3)
      v4 = 0x2030001u >> (8 * a2);
    else
      LOBYTE(v4) = 0;
    if (a2 <= 3)
      v5 = 0x1020102u >> (8 * a2);
    else
      LOBYTE(v5) = 1;
    if (a2 <= 3)
      v6 = 3 - a2;
    else
      v6 = 2;
    if (a2 <= 3)
      v7 = 0x3000300u >> (8 * a2);
    else
      LOBYTE(v7) = 3;
    v8 = v4;
    v9 = v5;
    v10 = v6;
    switch(a4)
    {
      case 0:
        v8 = v7;
        v9 = v4;
        v10 = v5;
        LOBYTE(v7) = v6;
        goto LABEL_19;
      case 1:
        goto LABEL_19;
      case 2:
        v8 = v7;
        v9 = v6;
        v10 = v5;
        LOBYTE(v7) = v4;
        goto LABEL_19;
      case 3:
        v8 = v6;
        v9 = v5;
        v10 = v4;
LABEL_19:
        permuteMap[0] = v8;
        permuteMap[1] = v9;
        permuteMap[2] = v10;
        permuteMap[3] = v7;
        break;
      default:
        return (const vImage_Buffer *)vImagePermuteChannels_ARGB8888(result, dest, permuteMap, 0);
    }
    return (const vImage_Buffer *)vImagePermuteChannels_ARGB8888(result, dest, permuteMap, 0);
  }
  return result;
}

unsigned __int16 *PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>::unpremultiply(unsigned __int16 *result)
{
  unsigned int v1;
  float v2;
  float v3;
  uint64x2_t v4;
  unint64_t v10;
  float v11;
  int v12;
  int v13;

  v1 = result[3];
  if (v1 != 0xFFFF)
  {
    if (result[3])
    {
      v2 = (double)v1 * 0.0000152590219;
      v3 = 1.0 / v2;
      v4.i64[0] = *result;
      v4.i64[1] = result[1];
      __asm { FMOV            V3.2D, #0.5 }
      v10 = (unint64_t)vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vmul_n_f32(vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v4), (float64x2_t)vdupq_n_s64(0x3EF0001000100010uLL))), v3), (float32x2_t)vdup_n_s32(0x477FFF00u))), _Q3), (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL))))), (int32x2_t)0xFFFF0000FFFFLL), 0);
      *result = v10;
      LOWORD(v10) = result[2];
      v11 = (double)v10 * 0.0000152590219;
      v12 = vcvtmd_s64_f64((float)((float)(v3 * v11) * 65535.0) + 0.5 + 0.0000001);
      result[1] = WORD2(v10);
      if (v12 >= 0xFFFF)
        v13 = 0xFFFF;
      else
        v13 = v12;
      result[2] = v13 & ~(unsigned __int16)(v13 >> 31);
    }
    else
    {
      *(_DWORD *)result = 0;
      result[2] = 0;
    }
  }
  return result;
}

uint64_t PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>::unpremultiply(unsigned __int16 *a1)
{
  float v2;
  uint64_t result;
  float v4;

  v2 = half::_toFloat[a1[1]];
  result = 15360;
  if (v2 != 1.0)
  {
    v4 = half::_toFloat[a1[1]];
    if (v4 == 0.0)
      result = 0;
    else
      result = ProCore::Private::ChannelTypeTraits<half>::denormalizef(half::_toFloat[*a1] / v4);
    *a1 = result;
  }
  return result;
}

uint64_t PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>::premultiply(unsigned __int16 *a1)
{
  float v2;
  uint64_t result;
  float v4;

  v2 = half::_toFloat[*a1] * half::_toFloat[a1[1]];
  if (v2 == 0.0)
  {
    result = 0;
  }
  else
  {
    v4 = half::_toFloat[*a1] * half::_toFloat[a1[1]];
    if (half::_eLut[LODWORD(v2) >> 23])
      result = half::_eLut[LODWORD(v2) >> 23] + (((LODWORD(v4) & 0x7FF000u) + 4096) >> 13);
    else
      result = half::convert((half *)LODWORD(v2));
  }
  *a1 = result;
  return result;
}

uint64_t ProCore::Private::ChannelTypeTraits<half>::denormalizef(float a1)
{
  if (a1 == 0.0)
    return 0;
  if (half::_eLut[LODWORD(a1) >> 23])
    return half::_eLut[LODWORD(a1) >> 23] + (((LODWORD(a1) & 0x7FF000u) + 4096) >> 13);
  return half::convert((half *)LODWORD(a1));
}

unsigned __int16 *PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>::unpremultiply(unsigned __int16 *result)
{
  float v1;
  unsigned __int16 *v2;
  float v3;

  v1 = half::_toFloat[result[3]];
  if (v1 != 1.0)
  {
    v2 = result;
    if (v1 == 0.0)
    {
      *(_DWORD *)result = 0;
      result[2] = 0;
    }
    else
    {
      v3 = 1.0 / v1;
      *result = ProCore::Private::ChannelTypeTraits<half>::denormalizef((float)(1.0 / v1) * half::_toFloat[*result]);
      v2[1] = ProCore::Private::ChannelTypeTraits<half>::denormalizef(v3 * half::_toFloat[v2[1]]);
      result = (unsigned __int16 *)ProCore::Private::ChannelTypeTraits<half>::denormalizef(v3 * half::_toFloat[v2[2]]);
      v2[2] = (unsigned __int16)result;
    }
  }
  return result;
}

uint64_t PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>::premultiply(unsigned __int16 *a1)
{
  uint64_t v2;
  float v3;
  unsigned int v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  uint64_t result;

  v2 = a1[3];
  v3 = half::_toFloat[*a1] * half::_toFloat[v2];
  if (v3 == 0.0)
  {
    LOWORD(v4) = 0;
  }
  else
  {
    v5 = half::_toFloat[*a1] * half::_toFloat[v2];
    if (half::_eLut[LODWORD(v3) >> 23])
      v4 = half::_eLut[LODWORD(v3) >> 23] + (((LODWORD(v5) & 0x7FF000u) + 4096) >> 13);
    else
      LOWORD(v4) = half::convert((half *)LODWORD(v3));
  }
  *a1 = v4;
  v6 = half::_toFloat[a1[1]] * half::_toFloat[v2];
  if (v6 == 0.0)
  {
    LOWORD(v7) = 0;
  }
  else if (half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = half::_eLut[LODWORD(v6) >> 23]
       + (((COERCE_UNSIGNED_INT(half::_toFloat[a1[1]] * half::_toFloat[v2]) & 0x7FF000) + 4096) >> 13);
  }
  else
  {
    LOWORD(v7) = half::convert((half *)LODWORD(v6));
  }
  a1[1] = v7;
  v8 = half::_toFloat[a1[2]] * half::_toFloat[v2];
  if (v8 == 0.0)
  {
    result = 0;
  }
  else if (half::_eLut[LODWORD(v8) >> 23])
  {
    result = half::_eLut[LODWORD(v8) >> 23]
           + (((COERCE_UNSIGNED_INT(half::_toFloat[a1[2]] * half::_toFloat[v2]) & 0x7FF000) + 4096) >> 13);
  }
  else
  {
    result = half::convert((half *)LODWORD(v8));
  }
  a1[2] = result;
  return result;
}

uint64_t `anonymous namespace'::bitmapInfoFromPCBitmap(_anonymous_namespace_ *this, const PCBitmap *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;
  unsigned int v14;

  v10 = (*(uint64_t (**)(_QWORD, const PCBitmap *))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8), a2)- 1;
  result = 0;
  switch(v10)
  {
    case 0:
      return result;
    case 1:
    case 4:
      if ((*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this))
        return 1;
      else
        return 3;
    case 2:
      v12 = (*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this) == 0;
      v13 = 4;
      v14 = 2;
      goto LABEL_12;
    case 6:
      return 4096;
    case 7:
    case 9:
      v12 = (*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this) == 0;
      v13 = 4099;
      v14 = 4097;
      goto LABEL_12;
    case 13:
      return 8448;
    case 14:
    case 15:
      v12 = (*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this) == 0;
      v13 = 8451;
      v14 = 8449;
      goto LABEL_12;
    case 16:
      v12 = (*(unsigned int (**)(_anonymous_namespace_ *))(*(_QWORD *)this + 48))(this) == 0;
      v13 = 8452;
      v14 = 8450;
LABEL_12:
      if (v12)
        return v13;
      else
        return v14;
    default:
      PCPrint("File %s, line %d should not have been reached:\n\t", v3, v4, v5, v6, v7, v8, v9, (char)"/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCBitmap.mm");
      pcAbortImpl();
  }
}

_QWORD *std::shared_ptr<CGDataProvider>::shared_ptr[abi:ne180100]<CGDataProvider,void (*)(CGDataProvider*),void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E65116B0;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_1B29831D4(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_1B29831E8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CGDataProvider *,void (*)(CGDataProvider *),std::allocator<CGDataProvider>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_pointer<CGDataProvider *,void (*)(CGDataProvider *),std::allocator<CGDataProvider>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CGDataProvider *,void (*)(CGDataProvider *),std::allocator<CGDataProvider>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

_QWORD *std::shared_ptr<CGImage>::shared_ptr[abi:ne180100]<CGImage,void (*)(CGImage*),void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E6511730;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_1B29832E8(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_1B29832FC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CGImage *,void (*)(CGImage *),std::allocator<CGImage>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_pointer<CGImage *,void (*)(CGImage *),std::allocator<CGImage>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CGImage *,void (*)(CGImage *),std::allocator<CGImage>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

_QWORD *std::shared_ptr<CGContext>::shared_ptr[abi:ne180100]<CGContext,void (*)(CGContext*),void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E65117B0;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_1B2983400(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_1B2983414(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CGContext *,void (*)(CGContext *),std::allocator<CGContext>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_pointer<CGContext *,void (*)(CGContext *),std::allocator<CGContext>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CGContext *,void (*)(CGContext *),std::allocator<CGContext>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

_BYTE *PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>::unpremultiply(_BYTE *result, double a2)
{
  unsigned int v2;
  float v3;
  float v4;
  int v5;

  v2 = result[1];
  if (result[1])
  {
    if (v2 == 255)
      return result;
    LOBYTE(a2) = *result;
    v3 = (double)*(unint64_t *)&a2 * 0.00392156863;
    v4 = (double)v2 * 0.00392156863;
    v5 = vcvtmd_s64_f64((float)((float)(v3 / v4) * 255.0) + 0.5 + 0.0000001);
    if (v5 >= 255)
      v5 = 255;
    v2 = v5 & ~(v5 >> 31);
  }
  *result = v2;
  return result;
}

_WORD *PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>::unpremultiply(_WORD *result, double a2)
{
  unsigned int v2;
  float v3;
  float v4;
  int v5;
  int v6;

  v2 = (unsigned __int16)result[1];
  if (result[1])
  {
    if (v2 == 0xFFFF)
      return result;
    LOWORD(a2) = *result;
    v3 = (double)*(unint64_t *)&a2 * 0.0000152590219;
    v4 = (double)v2 * 0.0000152590219;
    v5 = vcvtmd_s64_f64((float)((float)(v3 / v4) * 65535.0) + 0.5 + 0.0000001);
    if (v5 >= 0xFFFF)
      v6 = 0xFFFF;
    else
      v6 = v5;
    v2 = v6 & ~(v6 >> 31);
  }
  *result = v2;
  return result;
}

unsigned __int8 *PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>::unpremultiply(unsigned __int8 *result)
{
  unsigned int v1;
  float v2;
  float v3;
  uint64x2_t v4;
  unint64_t v10;
  float v11;
  int v12;

  v1 = *result;
  if (v1 != 255)
  {
    if (*result)
    {
      v2 = (double)v1 * 0.00392156863;
      v3 = 1.0 / v2;
      v4.i64[0] = result[1];
      v4.i64[1] = result[2];
      __asm { FMOV            V3.2D, #0.5 }
      v10 = (unint64_t)vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vmul_n_f32(vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v4), (float64x2_t)vdupq_n_s64(0x3F70101010101010uLL))), v3), (float32x2_t)vdup_n_s32(0x437F0000u))), _Q3), (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL))))), (int32x2_t)0xFF000000FFLL), 0);
      result[1] = v10;
      LOBYTE(v10) = result[3];
      v11 = (double)v10 * 0.00392156863;
      v12 = vcvtmd_s64_f64((float)((float)(v3 * v11) * 255.0) + 0.5 + 0.0000001);
      result[2] = BYTE4(v10);
      if (v12 >= 255)
        v12 = 255;
      result[3] = v12 & ~(v12 >> 31);
    }
    else
    {
      *(_WORD *)(result + 1) = 0;
      result[3] = 0;
    }
  }
  return result;
}

unsigned __int8 *PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>::unpremultiply(unsigned __int8 *result)
{
  unsigned int v1;
  float v2;
  float v3;
  uint64x2_t v4;
  unint64_t v10;
  float v11;
  int v12;

  v1 = result[3];
  if (v1 != 255)
  {
    if (result[3])
    {
      v2 = (double)v1 * 0.00392156863;
      v3 = 1.0 / v2;
      v4.i64[0] = *result;
      v4.i64[1] = result[1];
      __asm { FMOV            V3.2D, #0.5 }
      v10 = (unint64_t)vmax_s32(vmin_s32(vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vaddq_f64(vcvtq_f64_f32(vmul_f32(vmul_n_f32(vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v4), (float64x2_t)vdupq_n_s64(0x3F70101010101010uLL))), v3), (float32x2_t)vdup_n_s32(0x437F0000u))), _Q3), (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL))))), (int32x2_t)0xFF000000FFLL), 0);
      *result = v10;
      LOBYTE(v10) = result[2];
      v11 = (double)v10 * 0.00392156863;
      v12 = vcvtmd_s64_f64((float)((float)(v3 * v11) * 255.0) + 0.5 + 0.0000001);
      result[1] = BYTE4(v10);
      if (v12 >= 255)
        v12 = 255;
      result[2] = v12 & ~(v12 >> 31);
    }
    else
    {
      *(_WORD *)result = 0;
      result[2] = 0;
    }
  }
  return result;
}

void PCUnsupportedOperationException::~PCUnsupportedOperationException(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void PCUnsupportedOperationException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCUnsupportedOperationException"));
}

_QWORD *std::shared_ptr<CGColor>::shared_ptr[abi:ne180100]<CGColor,void (*)(void const*),void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E6511B00;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_1B2983B28(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_1B2983B3C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CGColor *,void (*)(void const*),std::allocator<CGColor>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_pointer<CGColor *,void (*)(void const*),std::allocator<CGColor>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CGColor *,void (*)(void const*),std::allocator<CGColor>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

_QWORD *std::shared_ptr<__CFDictionary>::shared_ptr[abi:ne180100]<__CFDictionary,void (*)(void const*),void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E6511B80;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_1B2983C3C(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_1B2983C50(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<__CFDictionary *,void (*)(void const*),std::allocator<__CFDictionary>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_pointer<__CFDictionary *,void (*)(void const*),std::allocator<__CFDictionary>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<__CFDictionary *,void (*)(void const*),std::allocator<__CFDictionary>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

_QWORD *std::shared_ptr<CGImageDestination>::shared_ptr[abi:ne180100]<CGImageDestination,void (*)(void const*),void>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  *a1 = a2;
  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E6511BD0;
  v6[1] = 0;
  v6[2] = 0;
  v6[3] = a2;
  v6[4] = a3;
  a1[1] = v6;
  return a1;
}

void sub_1B2983D50(void *a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  __cxa_begin_catch(a1);
  v1(v2);
  __cxa_rethrow();
}

void sub_1B2983D64(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<CGImageDestination *,void (*)(void const*),std::allocator<CGImageDestination>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_pointer<CGImageDestination *,void (*)(void const*),std::allocator<CGImageDestination>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<CGImageDestination *,void (*)(void const*),std::allocator<CGImageDestination>>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 32;
  else
    return 0;
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2983E50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511C20;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2983EB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511C20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511C20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2983F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6502C60;
  return a1;
}

void sub_1B2983FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)1>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2984110(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511C70;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2984174(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2984234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511CC0;
  return a1;
}

void sub_1B29842BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)2>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B29843D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511D38;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2984434(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511D38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511D38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B29844F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)3>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511830;
  return a1;
}

void sub_1B298457C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B29845F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511D88;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2984658(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2984718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)4>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65118A8;
  return a1;
}

void sub_1B29847A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2984818(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511DD8;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B298487C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B298493C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)5>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6502A80;
  return a1;
}

void sub_1B29849C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2984A3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511E28;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2984AA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511E28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511E28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2984B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)6>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511920;
  return a1;
}

void sub_1B2984BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2984C60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511E78;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2984CC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511E78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511E78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2984D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6502B70;
  return a1;
}

void sub_1B2984E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)7>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2984F20(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511EC8;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2984F84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511EC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511EC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2985044(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511F18;
  return a1;
}

void sub_1B29850CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)8>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B29851E0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511F90;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2985244(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2985304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)10>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6502990;
  return a1;
}

void sub_1B298538C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2985404(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6511FE0;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2985468(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511FE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6511FE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2985528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6512030;
  return a1;
}

void sub_1B29855B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap_t<PCPixel3<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)9>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B29856C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E65120A8;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2985728(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65120A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65120A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B29857E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65120F8;
  return a1;
}

void sub_1B2985870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)11>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2985984(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512170;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B29859E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2985AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65121C0;
  return a1;
}

void sub_1B2985B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)12>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2985C44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512238;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2985CA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2985D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)13>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511998;
  return a1;
}

void sub_1B2985DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2985E68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512288;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2985ECC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512288;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512288;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2985F8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65122D8;
  return a1;
}

void sub_1B2986014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap_t<PCGrayPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)14>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B2986128(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512350;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B298618C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>>::construct[abi:ne180100]<PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B298624C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E65123A0;
  return a1;
}

void sub_1B29862D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void PCBitmap_t<PCGrayAlphaPixel<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)15>>>::~PCBitmap_t(PCImage *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E6511638;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  PCImage::~PCImage((CGColorSpace **)this);
  JUMPOUT(0x1B5E29170);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B29863E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512418;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B298644C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512418;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B298650C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)16>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511A10;
  return a1;
}

void sub_1B2986594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x60uLL);
  std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1B298660C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::__shared_ptr_emplace[abi:ne180100]<std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&,std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E6512468;
  a1[1] = 0;
  std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>((uint64_t)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_1B2986670(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6512468;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>>::construct[abi:ne180100]<PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>,std::unique_ptr<ProCore_Private::PCBitmapRepDefault>,CGColorSpace *&>(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a3;
  *a3 = 0;
  v6 = v4;
  PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(a2, &v6, *a4);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B2986730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *PCBitmap_t<PCPixel4<ProCore::Private::PixelInfoTemplate<(PCPixelFormat::ChannelOrder)17>>>::PCBitmap_t<ProCore_Private::PCBitmapRepDefault>(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a2;
  *a2 = 0;
  v7 = v4;
  PCBitmap::PCBitmap<ProCore_Private::PCBitmapRepDefault>((uint64_t)a1, &v7, a3);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  *a1 = &unk_1E6511A88;
  return a1;
}

void sub_1B29867B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<PCBitmap>::shared_ptr[abi:ne180100]<PCBitmap,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E65124B8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1B298684C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<PCBitmap *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap>,std::allocator<PCBitmap>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_pointer<PCBitmap *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap>,std::allocator<PCBitmap>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<PCBitmap *,std::shared_ptr<PCBitmap>::__shared_ptr_default_delete<PCBitmap,PCBitmap>,std::allocator<PCBitmap>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void PCImageAttributes::PCImageAttributes(PCImageAttributes *this)
{
  PCColorSpaceHandle *v2;
  CGColorSpace *DefaultRGBCGColorSpace;

  *(_OWORD *)this = xmmword_1B3058610;
  *((_QWORD *)this + 2) = 0x500000004;
  v2 = (PCImageAttributes *)((char *)this + 24);
  DefaultRGBCGColorSpace = (CGColorSpace *)PCInfo::getDefaultRGBCGColorSpace(this);
  PCColorSpaceHandle::PCColorSpaceHandle(v2, DefaultRGBCGColorSpace);
  *((_QWORD *)this + 4) = 3553;
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
}

uint64_t PCImageAttributes::PCImageAttributes(uint64_t a1, uint64_t a2)
{
  CGColorSpace *v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(CGColorSpace **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  if (v4)
    PCCFRefTraits<CGColorSpace *>::retain(v4);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  return a1;
}

uint64_t PCImageAttributes::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)(a1 + 24), (CGColorSpace **)(a2 + 24));
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  }
  return a1;
}

void PCImage::PCImage(PCImage *this)
{
  CGColorSpace *DefaultRGBCGColorSpace;

  *(_QWORD *)this = off_1E6512530;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  DefaultRGBCGColorSpace = (CGColorSpace *)PCInfo::getDefaultRGBCGColorSpace(this);
  PCColorSpaceHandle::PCColorSpaceHandle((PCImage *)((char *)this + 48), DefaultRGBCGColorSpace);
  *((_BYTE *)this + 56) = 0;
}

void sub_1B2986A6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void PCImage::PCImage(PCImage *this, int a2, int a3, int a4, int a5, CGColorSpaceRef space)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E6512530;
  *((_DWORD *)this + 6) = 0;
  *((_DWORD *)this + 7) = a2;
  *((_DWORD *)this + 8) = a3;
  *((_DWORD *)this + 9) = a4;
  *((_DWORD *)this + 10) = a5;
  *((_DWORD *)this + 11) = 0;
  PCColorSpaceHandle::PCColorSpaceHandle((PCImage *)((char *)this + 48), space);
  *((_BYTE *)this + 56) = 0;
}

void sub_1B2986AD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t PCImage::PCImage(uint64_t a1, int a2, int a3, int a4, int a5, CGColorSpace **a6)
{
  CGColorSpace *v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E6512530;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 28) = a2;
  *(_DWORD *)(a1 + 32) = a3;
  *(_DWORD *)(a1 + 36) = a4;
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = 0;
  v7 = *a6;
  *(_QWORD *)(a1 + 48) = *a6;
  if (v7)
    PCCFRefTraits<CGColorSpace *>::retain(v7);
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void sub_1B2986B38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t PCImage::PCImage(uint64_t a1, uint64_t a2)
{
  CGColorSpace *v4;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E6512530;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v4 = *(CGColorSpace **)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  if (v4)
    PCCFRefTraits<CGColorSpace *>::retain(v4);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

void sub_1B2986BAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void PCImage::~PCImage(CGColorSpace **this)
{
  std::__shared_weak_count *v2;

  *this = (CGColorSpace *)off_1E6512530;
  PCCFRef<CGColorSpace *>::~PCCFRef(this + 6);
  v2 = (std::__shared_weak_count *)this[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t PCImage::getWidth(PCImage *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t PCImage::getHeight(PCImage *this)
{
  return *((unsigned int *)this + 8);
}

CGColorSpace **PCImage::getAttributes(uint64_t a1, uint64_t a2)
{
  CGColorSpace **result;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 40);
  result = PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)(a2 + 24), (CGColorSpace **)(a1 + 48));
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a1 + 56);
  return result;
}

uint64_t PCImage::setGuaranteeMemoryCallback(uint64_t this, BOOL (*a2)(unsigned int))
{
  PCImage::_guaranteeMemory = this;
  return this;
}

CGColorSpace **PCImage::setColorSpace(PCImage *this, CGColorSpace *a2)
{
  CGColorSpace *v4;

  PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)&v4, a2);
  (*(void (**)(PCImage *, CGColorSpace **))(*(_QWORD *)this + 56))(this, &v4);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v4);
}

void sub_1B2986CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

CGColorSpace **PCImage::setColorSpace(uint64_t a1, CGColorSpace **a2)
{
  return PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)(a1 + 48), a2);
}

uint64_t PCImage::getCGColorSpace(PCImage *this)
{
  return PCColorSpaceHandle::getCGColorSpace((PCImage *)((char *)this + 48));
}

CGColorSpace *PCImage::getColorSpace@<X0>(PCImage *this@<X0>, CGColorSpace **a2@<X8>)
{
  CGColorSpace *result;

  result = (CGColorSpace *)*((_QWORD *)this + 6);
  *a2 = result;
  if (result)
    return PCCFRefTraits<CGColorSpace *>::retain(result);
  return result;
}

uint64_t PCImage::isPremultiplied(PCImage *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t PCImage::setIsPremultiplied(uint64_t this, char a2)
{
  *(_BYTE *)(this + 56) = a2;
  return this;
}

int *PCColor::RED(PCColor *this)
{
  unsigned __int8 v1;
  CGColorSpace *v3;

  {
    getDefaultColorSpace(&v3);
    PCColor::RED(void)::RED = 4;
    qword_1EF074C68 = 0x3FF0000000000000;
    unk_1EF074C70 = 0;
    qword_1EF074C78 = 0;
    unk_1EF074C80 = 0x3FF0000000000000;
    sanitizeColorSpace(&v3, &qword_1EF074C90);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v3);
    __cxa_atexit((void (*)(void *))PCColor::~PCColor, &PCColor::RED(void)::RED, &dword_1B2737000);
  }
  return &PCColor::RED(void)::RED;
}

void sub_1B2986DA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

CGColorSpace *getDefaultColorSpace@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  CGColorSpace *result;

  {
    getDefaultColorSpace(void)::result = (uint64_t)allocDefaultColorSpace();
  }
  result = *(CGColorSpace **)getDefaultColorSpace(void)::result;
  *a1 = *(_QWORD *)getDefaultColorSpace(void)::result;
  if (result)
    return PCCFRefTraits<CGColorSpace *>::retain(result);
  return result;
}

void sub_1B2986E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PCColor::~PCColor(PCColor *this)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&this->var1._obj);
}

int *PCColor::BLACK(PCColor *this)
{
  unsigned __int8 v1;
  CGColorSpace *v3;

  {
    getDefaultColorSpace(&v3);
    PCColor::BLACK(void)::BLACK = 4;
    qword_1EF074CA8 = 0;
    unk_1EF074CB0 = 0;
    qword_1EF074CB8 = 0;
    unk_1EF074CC0 = 0x3FF0000000000000;
    sanitizeColorSpace(&v3, &qword_1EF074CD0);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v3);
    __cxa_atexit((void (*)(void *))PCColor::~PCColor, &PCColor::BLACK(void)::BLACK, &dword_1B2737000);
  }
  return &PCColor::BLACK(void)::BLACK;
}

void sub_1B2986F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

int *PCColor::WHITE(PCColor *this)
{
  unsigned __int8 v1;
  CGColorSpace *v8;

  {
    getDefaultColorSpace(&v8);
    PCColor::WHITE(void)::WHITE = 4;
    __asm { FMOV            V0.2D, #1.0 }
    unk_1EF074CE8 = _Q0;
    unk_1EF074CF8 = _Q0;
    sanitizeColorSpace(&v8, &qword_1EF074D10);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
    __cxa_atexit((void (*)(void *))PCColor::~PCColor, &PCColor::WHITE(void)::WHITE, &dword_1B2737000);
  }
  return &PCColor::WHITE(void)::WHITE;
}

void sub_1B2987004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

int *PCColor::CLEAR(PCColor *this)
{
  unsigned __int8 v1;
  CGColorSpace *v3;

  {
    getDefaultColorSpace(&v3);
    PCColor::CLEAR(void)::CLEAR = 4;
    unk_1ED4D93F8 = 0u;
    unk_1ED4D9408 = 0u;
    sanitizeColorSpace(&v3, &qword_1ED4D9420);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v3);
    __cxa_atexit((void (*)(void *))PCColor::~PCColor, &PCColor::CLEAR(void)::CLEAR, &dword_1B2737000);
  }
  return &PCColor::CLEAR(void)::CLEAR;
}

void sub_1B29870D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PCColor::PCColor(PCColor *this)
{
  CGColorSpace *v2;

  getDefaultColorSpace(&v2);
  this->var0.var0 = 4;
  this->var0.var1[0] = 0.0;
  this->var0.var1[1] = 0.0;
  this->var0.var1[2] = 0.0;
  this->var0.var1[3] = 1.0;
  sanitizeColorSpace(&v2, &this->var1._obj);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v2);
}

void sub_1B2987158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PCColor::PCColor(PCColor *this, float a2, float a3, float a4, CGColorSpace *a5)
{
  PCColor::PCColor(this, a2, a3, a4, 1.0, a5);
}

void PCColor::PCColor(PCColor *this, float a2, float a3, float a4, float a5, CGColorSpace *a6)
{
  CGColorSpace *v12;

  if (a6)
    PCCFRefTraits<CGColorSpace *>::retain(a6);
  v12 = a6;
  this->var0.var0 = 4;
  this->var0.var1[0] = a2;
  this->var0.var1[1] = a3;
  this->var0.var1[2] = a4;
  this->var0.var1[3] = a5;
  sanitizeColorSpace(&v12, &this->var1._obj);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
}

void sub_1B2987204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PCColor::PCColor(PCColor *this, float a2, float a3, float a4, OZChannelBase *a5)
{
  CGColorSpaceRef *v9;

  v9 = (CGColorSpaceRef *)OZChannelBase::setRangeName(a5, (const PCString *)a5);
  this->var0.var0 = 4;
  this->var0.var1[0] = a2;
  this->var0.var1[1] = a3;
  this->var0.var1[2] = a4;
  this->var0.var1[3] = 1.0;
  sanitizeColorSpace(v9, &this->var1._obj);
}

void PCColor::PCColor(PCColor *this, float a2, float a3, float a4, float a5, OZChannelBase *a6)
{
  CGColorSpaceRef *v11;

  v11 = (CGColorSpaceRef *)OZChannelBase::setRangeName(a6, (const PCString *)a6);
  this->var0.var0 = 4;
  this->var0.var1[0] = a2;
  this->var0.var1[1] = a3;
  this->var0.var1[2] = a4;
  this->var0.var1[3] = a5;
  sanitizeColorSpace(v11, &this->var1._obj);
}

void sanitizeColorSpace(CGColorSpaceRef *a1@<X0>, CGColorSpace **a2@<X8>)
{
  if (*a1)
    PCGetCachedExtendedRangeColorSpace(a1, a2);
  else
    getDefaultColorSpace(a2);
}

uint64_t PCColor::PCColor(uint64_t a1, uint64_t a2, CGColorSpaceRef *a3)
{
  *(_DWORD *)a1 = 0;
  sanitizeColorSpace(a3, (CGColorSpace **)(a1 + 48));
  transformColor<PCColor::ColorComponents>((double *)a2, *(CGColorSpace **)(a2 + 48), (double *)a1, *(CGColorSpaceRef *)(a1 + 48));
  return a1;
}

void sub_1B298735C(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void PCColor::PCColor(PCColor *this, const PCColor *a2, CGColorSpaceRef space)
{
  CGColorSpace *v6;

  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v6 = space;
  PCColor::PCColor((uint64_t)this, (uint64_t)a2, &v6);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v6);
}

void sub_1B29873D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

double PCColor::setAlpha(PCColor *this, float a2)
{
  double result;

  result = a2;
  *((double *)&this->var0.var0 + this->var0.var0) = result;
  return result;
}

float PCColor::getAlpha(PCColor *this)
{
  return *((double *)&this->var0.var0 + this->var0.var0);
}

CGColorSpace *PCColor::getCGColorSpace(PCColor *this)
{
  return this->var1._obj;
}

CGColorSpace **PCColor::getColorSpace@<X0>(PCColor *this@<X0>, CGColorSpace **a2@<X8>)
{
  return PCColorSpaceHandle::PCColorSpaceHandle(a2, &this->var1._obj);
}

CGColorSpace **PCColor::setRGB(PCColor *this, float a2, float a3, float a4, CGColorSpace *a5)
{
  float v6;
  __int128 v7;
  CGColorSpace *obj;
  CGColorSpace *v9;
  PCColor v11;

  v6 = *((double *)&this->var0.var0 + this->var0.var0);
  PCColor::PCColor(&v11, a2, a3, a4, v6, a5);
  v7 = *(_OWORD *)&v11.var0.var1[1];
  *(_OWORD *)&this->var0.var0 = *(_OWORD *)&v11.var0.var0;
  *(_OWORD *)&this->var0.var1[1] = v7;
  *(_OWORD *)&this->var0.var1[3] = *(_OWORD *)&v11.var0.var1[3];
  obj = this->var1._obj;
  v9 = v11.var1._obj;
  if (obj && obj != v11.var1._obj)
  {
    PCCFRefTraits<CGColorSpace *>::release(obj);
    v9 = v11.var1._obj;
  }
  this->var1._obj = v9;
  v11.var1._obj = 0;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v11.var1._obj);
}

void sub_1B2987498(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

CGColorSpace **PCColor::setRGB(PCColor *this, float a2, float a3, float a4, OZChannelBase *a5)
{
  float v9;
  CGColorSpaceRef *v10;
  CGColorSpace *obj;
  CGColorSpace *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CGColorSpace *v17;

  v9 = *((double *)&this->var0.var0 + this->var0.var0);
  v10 = (CGColorSpaceRef *)OZChannelBase::setRangeName(a5, (const PCString *)a5);
  LODWORD(v14) = 4;
  *((double *)&v14 + 1) = a2;
  *(double *)&v15 = a3;
  *((double *)&v15 + 1) = a4;
  *(double *)&v16 = v9;
  sanitizeColorSpace(v10, &v17);
  *(_OWORD *)&this->var0.var0 = v14;
  *(_OWORD *)&this->var0.var1[1] = v15;
  *(_OWORD *)&this->var0.var1[3] = v16;
  obj = this->var1._obj;
  v12 = v17;
  if (obj && obj != v17)
  {
    PCCFRefTraits<CGColorSpace *>::release(obj);
    v12 = v17;
  }
  this->var1._obj = v12;
  v17 = 0;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
}

void sub_1B2987570(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

CGColorSpace **PCColor::setRGBA(PCColor *this, float a2, float a3, float a4, float a5, CGColorSpace *a6)
{
  __int128 v7;
  CGColorSpace *obj;
  CGColorSpace *v9;
  BOOL v10;
  PCColor v12;

  PCColor::PCColor(&v12, a2, a3, a4, a5, a6);
  v7 = *(_OWORD *)&v12.var0.var1[1];
  *(_OWORD *)&this->var0.var0 = *(_OWORD *)&v12.var0.var0;
  *(_OWORD *)&this->var0.var1[1] = v7;
  *(_OWORD *)&this->var0.var1[3] = *(_OWORD *)&v12.var0.var1[3];
  obj = this->var1._obj;
  v9 = v12.var1._obj;
  if (obj)
    v10 = obj == v12.var1._obj;
  else
    v10 = 1;
  if (!v10)
  {
    PCCFRefTraits<CGColorSpace *>::release(obj);
    v9 = v12.var1._obj;
  }
  this->var1._obj = v9;
  v12.var1._obj = 0;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v12.var1._obj);
}

void sub_1B29875F8(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

CGColorSpace **PCColor::setRGBA(PCColor *this, float a2, float a3, float a4, float a5, OZChannelBase *a6)
{
  CGColorSpaceRef *v11;
  CGColorSpace *obj;
  CGColorSpace *v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CGColorSpace *v18;

  v11 = (CGColorSpaceRef *)OZChannelBase::setRangeName(a6, (const PCString *)a6);
  LODWORD(v15) = 4;
  *((double *)&v15 + 1) = a2;
  *(double *)&v16 = a3;
  *((double *)&v16 + 1) = a4;
  *(double *)&v17 = a5;
  sanitizeColorSpace(v11, &v18);
  *(_OWORD *)&this->var0.var0 = v15;
  *(_OWORD *)&this->var0.var1[1] = v16;
  *(_OWORD *)&this->var0.var1[3] = v17;
  obj = this->var1._obj;
  v13 = v18;
  if (obj && obj != v18)
  {
    PCCFRefTraits<CGColorSpace *>::release(obj);
    v13 = v18;
  }
  this->var1._obj = v13;
  v18 = 0;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v18);
}

void sub_1B29876C8(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

CGColorSpace **PCColor::getRGB(PCColor *this, float *a2, float *a3, float *a4, CGColorSpaceRef space)
{
  float v6;

  return PCColor::getRGBA(&this->var0.var0, a2, a3, a4, &v6, space, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
}

CGColorSpace **PCColor::getRGBA(PCColor *this, float *a2, float *a3, float *a4, float *a5, CGColorSpace *a6)
{
  return PCColor::getRGBA(&this->var0.var0, a2, a3, a4, a5, a6, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
}

CGColorSpace **PCColor::getRGB(PCColor *this, float *a2, float *a3, float *a4, const PCColorSpaceHandle *a5)
{
  CGColorSpace *CGColorSpace;
  float v11;

  CGColorSpace = (CGColorSpace *)PCColorSpaceHandle::getCGColorSpace(a5);
  return PCColor::getRGBA(&this->var0.var0, a2, a3, a4, &v11, CGColorSpace, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
}

CGColorSpace **PCColor::getRGBA(int *a1, float *a2, float *a3, float *a4, float *a5, CGColorSpaceRef space, int a7, PCToneMapMethod *a8)
{
  uint64_t v15;
  double *v16;
  uint64_t v17;
  float *v18;
  double v19;
  float v20;
  uint64_t v21;
  int v22;
  int v23;
  CGColorSpace **v24;
  double v25;
  float v26;
  float v27;
  double v28;
  float v29;
  float v30;
  CGColorSpace *v32[4];
  int v33;
  int v34;
  CGColorSpace *v35;
  _DWORD v36[4];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[20];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    v15 = *a1;
    if ((_DWORD)v15)
    {
      v16 = (double *)(a1 + 2);
      v17 = 8 * v15;
      v18 = (float *)v40;
      do
      {
        v19 = *v16++;
        v20 = v19;
        *v18++ = v20;
        v17 -= 8;
      }
      while (v17);
    }
    v21 = *((_QWORD *)a1 + 6);
    *(_QWORD *)&v37 = 1;
    *((_QWORD *)&v37 + 1) = v40;
    *(_QWORD *)&v38 = v15;
    *((_QWORD *)&v38 + 1) = v21;
    v39 = 2;
    PCGetCachedExtendedRangeColorSpace(space, &v35);
    v32[0] = (CGColorSpace *)1;
    v32[1] = (CGColorSpace *)v36;
    v32[2] = (CGColorSpace *)4;
    v32[3] = v35;
    v33 = 2;
    v34 = a7;
    PCColorUtil::transformColorWithDynamicRange((uint64_t)&v37, (uint64_t)v32, a8);
    v22 = v36[1];
    *a2 = *(float *)v36;
    *(_DWORD *)a3 = v22;
    v23 = v36[3];
    *a4 = *(float *)&v36[2];
    *(_DWORD *)a5 = v23;
    v24 = &v35;
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
    PCGetCachedExtendedRangeColorSpace(space, v32);
    transformColor((double *)a1 + 1, *a1, *((CGColorSpace **)a1 + 6), (double *)&v37, 4, v32[0]);
    v25 = *((double *)&v37 + 1);
    v26 = *(double *)&v37;
    *a2 = v26;
    v27 = v25;
    *a3 = v27;
    v28 = *((double *)&v38 + 1);
    v29 = *(double *)&v38;
    *a4 = v29;
    v30 = v28;
    *a5 = v30;
    v24 = v32;
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(v24);
}

void sub_1B298790C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

CGColorSpace **PCColor::getRGBA(PCColor *this, float *a2, float *a3, float *a4, float *a5, const PCColorSpaceHandle *a6)
{
  CGColorSpace *CGColorSpace;

  CGColorSpace = (CGColorSpace *)PCColorSpaceHandle::getCGColorSpace(a6);
  return PCColor::getRGBA(&this->var0.var0, a2, a3, a4, a5, CGColorSpace, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
}

CGColorSpace **PCColor::getRGB(int *a1, float *a2, float *a3, float *a4, CGColorSpaceRef space, int a6, PCToneMapMethod *a7)
{
  float v8;

  return PCColor::getRGBA(a1, a2, a3, a4, &v8, space, a6, a7);
}

void PCColor::setRGBA(int *a1, CGColorSpaceRef space, int a3, PCToneMapMethod *a4, float a5, float a6, float a7, float a8)
{
  CGColorSpace *v15;
  CGColorSpace *v16;
  CGColorSpace *v17;
  uint64_t v18;
  _QWORD v19[5];
  CGColorSpace *v20[5];
  _DWORD v21[4];
  _DWORD v22[4];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (space)
    PCGetCachedExtendedRangeColorSpace(space, v20);
  else
    getDefaultColorSpace(v20);
  v15 = (CGColorSpace *)*((_QWORD *)a1 + 6);
  v16 = v20[0];
  if (v15 && v15 != v20[0])
  {
    PCCFRefTraits<CGColorSpace *>::release(v15);
    v16 = v20[0];
  }
  *((_QWORD *)a1 + 6) = v16;
  v20[0] = 0;
  PCCFRef<CGColorSpace *>::~PCCFRef(v20);
  if (a3 == 1)
  {
    *(float *)v22 = a5;
    *(float *)&v22[1] = a6;
    *(float *)&v22[2] = a7;
    *(float *)&v22[3] = a8;
    v17 = (CGColorSpace *)*((_QWORD *)a1 + 6);
    v20[0] = (CGColorSpace *)1;
    v20[1] = (CGColorSpace *)v22;
    v20[2] = (CGColorSpace *)4;
    v20[3] = v17;
    v20[4] = (CGColorSpace *)0x100000002;
    v19[0] = 1;
    v19[1] = v21;
    v19[2] = 4;
    v19[3] = v17;
    v19[4] = 2;
    PCColorUtil::transformColorWithDynamicRange((uint64_t)v20, (uint64_t)v19, a4);
    a5 = *(float *)v21;
    a6 = *(float *)&v21[1];
    a7 = *(float *)&v21[2];
    a8 = *(float *)&v21[3];
  }
  v18 = *a1;
  if ((int)v18 <= 3)
    bzero(&a1[2 * v18 + 2], 32 - 8 * v18);
  *a1 = 4;
  *((double *)a1 + 1) = a5;
  *((double *)a1 + 2) = a6;
  *((double *)a1 + 3) = a7;
  *((double *)a1 + 4) = a8;
}

void sub_1B2987B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

double PCColor::getComponents(int *a1, char **a2)
{
  unint64_t v4;
  double result;
  uint64_t v6;
  char *v7;
  double *v8;
  double v9;
  uint64_t v10;

  v4 = *a1;
  v10 = 0;
  std::vector<double>::assign(a2, v4, &v10);
  if ((int)v4 >= 1)
  {
    v6 = v4;
    v7 = *a2;
    v8 = (double *)(a1 + 2);
    do
    {
      v9 = *v8++;
      result = v9;
      *(double *)v7 = v9;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
  return result;
}

char *std::vector<double>::assign(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 3;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 3;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_QWORD *)v16 = *a3;
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[8 * a2];
    }
    else
    {
      v17 = &v13[8 * (a2 - v14)];
      v18 = 8 * a2 - 8 * v14;
      do
      {
        *(_QWORD *)v13 = *a3;
        v13 += 8;
        v18 -= 8;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<double>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[8 * a2];
    v12 = 8 * a2;
    do
    {
      *(_QWORD *)v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void PCColor::mix(PCColor *this, const PCColor *a2, float a3)
{
  uint64_t v5;
  double *var1;
  double *v7;
  double v8;
  float v9;
  float v10;
  double v11;
  _OWORD v12[2];
  uint64_t v13;

  LODWORD(v11) = 0;
  memset(v12, 0, sizeof(v12));
  v13 = 0;
  transformColor<PCColor::ColorComponents>((double *)&a2->var0.var0, a2->var1._obj, &v11, this->var1._obj);
  v5 = (LODWORD(v11) - 1);
  if (LODWORD(v11) != 1)
  {
    var1 = this->var0.var1;
    v7 = (double *)v12;
    do
    {
      v8 = *v7++;
      v9 = v8;
      v10 = *var1;
      *var1++ = (float)((float)(v9 * a3) + (float)((float)(1.0 - a3) * v10));
      --v5;
    }
    while (v5);
  }
}

double transformColor<PCColor::ColorComponents>(double *a1, CGColorSpace *a2, double *a3, CGColorSpaceRef space)
{
  int NumberOfComponents;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;

  NumberOfComponents = CGColorSpaceGetNumberOfComponents(space);
  if (NumberOfComponents + 1 < 5)
    v9 = NumberOfComponents + 1;
  else
    v9 = 5;
  v10 = *(int *)a3;
  if (v9 <= (int)v10)
  {
    v11 = v9;
  }
  else
  {
    v11 = v9;
    v12 = 8 * v9 - 8 * v10;
    if (v12 >= 1)
      bzero(&a3[v10 + 1], v12);
  }
  *(_DWORD *)a3 = v9;
  return transformColor(a1 + 1, *(int *)a1, a2, a3 + 1, v11, space);
}

void PCWorkingColor::WHITE(PCWorkingColor *this@<X0>, PCWorkingColor *a2@<X8>)
{
  PCWorkingColor::PCWorkingColor(a2, 1.0, 1.0, 1.0, 1.0, this);
}

void PCWorkingColor::PCWorkingColor(PCWorkingColor *this, float a2, float a3, float a4, float a5, CGColorSpace *a6)
{
  CGColorSpace *v12;

  if (a6)
    PCCFRefTraits<CGColorSpace *>::retain(a6);
  v12 = a6;
  PCWorkingColor::PCWorkingColor((uint64_t)this, &v12, 0, (PCToneMapMethod *)&kPCNoToneMapMethod, a2, a3, a4, a5);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v12);
}

void sub_1B2987EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PCWorkingColor::PCWorkingColor(PCWorkingColor *this, CGColorSpaceRef space)
{
  CGColorSpace *v4;

  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v4 = space;
  PCWorkingColor::PCWorkingColor((uint64_t)this, &v4, 0, (PCToneMapMethod *)&kPCNoToneMapMethod, 0.0, 0.0, 0.0, 1.0);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v4);
}

void sub_1B2987F3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PCWorkingColor::PCWorkingColor(PCWorkingColor *this, OZChannelBase *a2)
{
  CGColorSpaceRef *v3;

  v3 = (CGColorSpaceRef *)OZChannelBase::setRangeName(a2, (const PCString *)a2);
  PCWorkingColor::PCWorkingColor((uint64_t)this, v3, 0, (PCToneMapMethod *)&kPCNoToneMapMethod, 0.0, 0.0, 0.0, 1.0);
}

uint64_t PCWorkingColor::PCWorkingColor(uint64_t a1, CGColorSpaceRef *a2, int a3, PCToneMapMethod *a4)
{
  return PCWorkingColor::PCWorkingColor(a1, a2, a3, a4, 0.0, 0.0, 0.0, 1.0);
}

uint64_t PCWorkingColor::PCWorkingColor(uint64_t a1, CGColorSpaceRef *a2, int a3, PCToneMapMethod *a4, float a5, float a6, float a7, float a8)
{
  int v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGColorSpace *v18;

  v13 = 4;
  v14 = a5;
  v15 = a6;
  v16 = a7;
  v17 = a8;
  sanitizeColorSpace(a2, &v18);
  PCWorkingColor::PCWorkingColor(a1, &v13, a2, a3, a4);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v18);
  return a1;
}

void sub_1B2988044(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t PCWorkingColor::PCWorkingColor(uint64_t a1, int *a2, CGColorSpaceRef *a3, int a4, PCToneMapMethod *a5)
{
  CGColorSpace *v10;

  v10 = *a3;
  *(_QWORD *)(a1 + 16) = *a3;
  if (v10)
    PCCFRefTraits<CGColorSpace *>::retain(v10);
  *(_DWORD *)(a1 + 24) = a4;
  *(PCToneMapMethod *)(a1 + 28) = *a5;
  PCColor::getRGBA(a2, (float *)a1, (float *)(a1 + 4), (float *)(a1 + 8), (float *)(a1 + 12), *a3, a4, a5);
  return a1;
}

void sub_1B29880DC(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void PCWorkingColor::PCWorkingColor(PCWorkingColor *this, const PCColor *a2, CGColorSpaceRef space)
{
  CGColorSpace *v6;

  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v6 = space;
  PCWorkingColor::PCWorkingColor((uint64_t)this, &a2->var0.var0, &v6, 0, (PCToneMapMethod *)&kPCNoToneMapMethod);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v6);
}

void sub_1B2988160(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

__n128 PCWorkingColor::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t PCWorkingColor::operator=(uint64_t a1, int *a2)
{
  PCColor::getRGBA(a2, (float *)a1, (float *)(a1 + 4), (float *)(a1 + 8), (float *)(a1 + 12), *(CGColorSpaceRef *)(a1 + 16), *(_DWORD *)(a1 + 24), (PCToneMapMethod *)(a1 + 28));
  return a1;
}

float *PCWorkingColor::setRGB(float *this, float a2, float a3, float a4)
{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  return this;
}

float PCWorkingColor::getRGBA(PCWorkingColor *this, float *a2, float *a3, float *a4, float *a5)
{
  float result;

  *a2 = *(float *)this;
  *a3 = *((float *)this + 1);
  *a4 = *((float *)this + 2);
  result = *((float *)this + 3);
  *a5 = result;
  return result;
}

float32x4_t operator*@<Q0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  CGColorSpace *v6;
  float32x4_t result;

  *a3 = *(float32x4_t *)a1;
  v6 = *(CGColorSpace **)(a1 + 16);
  a3[1].i64[0] = (uint64_t)v6;
  if (v6)
    PCCFRefTraits<CGColorSpace *>::retain(v6);
  a3[1].i64[1] = *(_QWORD *)(a1 + 24);
  a3[2].i32[0] = *(_DWORD *)(a1 + 32);
  result = vmulq_f32(*a3, *a2);
  *a3 = result;
  return result;
}

BOOL operator==(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  PCToneMapMethod v9;
  uint64_t v10;
  int v11;
  float v12[3];

  if (vabds_f32(*(float *)(a1 + 12), *(float *)(a2 + 12)) >= 0.00001)
    return 0;
  v3 = *(_DWORD *)(a2 + 8);
  v10 = *(_QWORD *)a2;
  v11 = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 24);
  v9 = *(PCToneMapMethod *)(a1 + 28);
  PCColorUtil::transform(&v9, &v10, v4, v5, v6, v7, (uint64_t)v12);
  return vabds_f32(*(float *)a1, v12[0]) < 0.00001
      && vabds_f32(*(float *)(a1 + 4), v12[1]) < 0.00001
      && vabds_f32(*(float *)(a1 + 8), v12[2]) < 0.00001;
}

{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == (unint64_t)*(unsigned int *)(a2 + 8);
}

BOOL operator!=(uint64_t a1, uint64_t a2)
{
  return !operator==(a1, a2);
}

void PCWorkingColorVector::PCWorkingColorVector(PCWorkingColorVector *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

void PCWorkingColorVector::PCWorkingColorVector(PCWorkingColorVector *this, float a2, float a3, float a4, float a5)
{
  *(float *)this = a2;
  *((float *)this + 1) = a3;
  *((float *)this + 2) = a4;
  *((float *)this + 3) = a5;
}

float32_t PCWorkingColorVector::operator*=(float32x2_t *a1, float a2)
{
  float32_t result;

  *a1 = vmul_n_f32(*a1, a2);
  result = a1[1].f32[0] * a2;
  a1[1].f32[0] = result;
  return result;
}

BOOL operator==(float *a1, float *a2)
{
  return vabds_f32(*a1, *a2) < 0.00001
      && vabds_f32(a1[1], a2[1]) < 0.00001
      && vabds_f32(a1[2], a2[2]) < 0.00001
      && vabds_f32(a1[3], a2[3]) < 0.00001;
}

BOOL operator!=(float *a1, float *a2)
{
  return !operator==(a1, a2);
}

float operator+(float *a1, float *a2)
{
  return *a1 + *a2;
}

double operator*(float32x4_t *a1, float32x4_t *a2)
{
  double result;

  *(_QWORD *)&result = vmulq_f32(*a1, *a2).u64[0];
  return result;
}

float operator*(float *a1, float a2)
{
  return *a1 * a2;
}

CGColorSpace **allocDefaultColorSpace(void)
{
  const PCString *v0;
  CGColorSpace *v1;
  CGColorSpace **v2;
  CGColorSpace *v4;
  CGColorSpace *v5;

  PCColorSpaceCache::sRGB(&v4);
  v1 = *(CGColorSpace **)OZChannelBase::setRangeName((OZChannelBase *)&v4, v0);
  v5 = v1;
  if (v1)
    PCCFRefTraits<CGColorSpace *>::retain(v1);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v4);
  v2 = (CGColorSpace **)operator new();
  PCGetCachedExtendedRangeColorSpace(&v5, v2);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v5);
  return v2;
}

void sub_1B29884C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x20C4093837F09);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

double transformColor(double *a1, uint64_t a2, CGColorSpace *a3, double *a4, uint64_t a5, CGColorSpace *a6)
{
  uint64_t v8;
  float *v9;
  double v10;
  float v11;
  double result;
  uint64_t v13;
  float *v14;
  float v15;
  _QWORD v16[5];
  _QWORD v17[5];
  _BYTE v18[20];
  _BYTE v19[20];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v8 = 8 * a2;
    v9 = (float *)v19;
    do
    {
      v10 = *a1++;
      v11 = v10;
      *v9++ = v11;
      v8 -= 8;
    }
    while (v8);
  }
  v17[0] = 1;
  v17[1] = v19;
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = 2;
  v16[0] = 1;
  v16[1] = v18;
  v16[2] = a5;
  v16[3] = a6;
  v16[4] = 2;
  PCColorUtil::transformColor((uint64_t)v17, (uint64_t)v16);
  if (a5)
  {
    v13 = 4 * a5;
    v14 = (float *)v18;
    do
    {
      v15 = *v14++;
      result = v15;
      *a4++ = v15;
      v13 -= 4;
    }
    while (v13);
  }
  return result;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

BOOL PCColorSpaceHandle::isSameColorSpace(CGColorSpaceRef space, CGColorSpace *a2, CGColorSpace *a3)
{
  _BOOL8 v3;
  const PCColorSpaceHandle *v6;
  CGColorSpace *v8;
  CGColorSpace *v9;

  v3 = ((unint64_t)space | (unint64_t)a2) == 0;
  if (space && a2)
  {
    if (space == a2)
    {
      return 1;
    }
    else
    {
      PCCFRefTraits<CGColorSpace *>::retain(space);
      v9 = space;
      PCCFRefTraits<CGColorSpace *>::retain(a2);
      v8 = a2;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v8);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v9);
    }
  }
  return v3;
}

void sub_1B298879C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, CGColorSpace *a10)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a10);
  _Unwind_Resume(a1);
}

BOOL `anonymous namespace'::colorSpacesAreEquivalent(CGColorSpace **this, CGColorSpace **a2, const PCColorSpaceHandle *a3)
{
  int v4;
  int v5;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;

  v9 = PCGetNCLCCodeForColorSpace(*this);
  v10 = v4;
  v7 = PCGetNCLCCodeForColorSpace(*a2);
  v8 = v5;
  return operator==((uint64_t)&v9, (uint64_t)&v7);
}

void PCColorSpaceHandle::PCColorSpaceHandle(PCColorSpaceHandle *this, CGColorSpaceRef space)
{
  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  *(_QWORD *)this = space;
}

BOOL PCColorSpaceHandle::isSameColorSpace(CGColorSpace **this, CGColorSpace **a2, const PCColorSpaceHandle *a3)
{
  CGColorSpace *v4;
  CGColorSpace *v5;
  _BOOL8 result;
  BOOL v7;

  v4 = *this;
  v5 = *a2;
  result = ((unint64_t)*this | (unint64_t)*a2) == 0;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (!v7)
  return result;
}

BOOL operator==(_QWORD *a1)
{
  return *a1 == 0;
}

uint64_t PCColorSpaceHandle::getCGColorSpace(PCColorSpaceHandle *this)
{
  return *(_QWORD *)this;
}

void PCColorSpaceHandle::getMD5(CGColorSpace **this@<X0>, PCWorkingColorVector *a2@<X8>)
{
  if (*this)
  else
    PCWorkingColorVector::PCWorkingColorVector(a2);
}

void PCCachedFunctionImpl<PCHash128,PCColorSpaceHandle const&>::operator()(os_unfair_lock_s *a1@<X0>, CGColorSpace **a2@<X1>, PCWorkingColorVector *a3@<X8>)
{
  os_unfair_lock_s *v6;
  CGColorSpace *v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  CGColorSpace *v11[2];

  v6 = a1 + 8;
  v11[1] = (CGColorSpace *)&a1[8];
  PCSpinLock::lock(a1 + 8);
  v7 = *a2;
  v11[0] = v7;
  if (v7)
    PCCFRefTraits<CGColorSpace *>::retain(v7);
  v10 = 0;
  PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::findValue(*(_QWORD **)&a1[10]._os_unfair_lock_opaque, (unint64_t *)v11, &v10, a3);
  if (!v10)
  {
    v8 = *(_QWORD *)&a1[6]._os_unfair_lock_opaque;
    if (!v8)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(__int128 *__return_ptr, uint64_t, CGColorSpace **))(*(_QWORD *)v8 + 48))(&v9, v8, a2);
    *(_OWORD *)a3 = v9;
    PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::addValue(*(_QWORD *)&a1[10]._os_unfair_lock_opaque, v11, a3, 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v11);
  PCSpinLock::unlock(v6);
}

void sub_1B2988980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void PCColorSpaceHandle::getMD5(PCColorSpaceHandle *this@<X0>, PCWorkingColorVector *a2@<X8>)
{
  CGColorSpace *v5;

  if (this)
  {
    PCCFRefTraits<CGColorSpace *>::retain(this);
    v5 = this;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v5);
  }
  else
  {
    PCWorkingColorVector::PCWorkingColorVector(a2);
  }
}

void sub_1B2988A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PCColorSpaceHandle::PCColorSpaceHandle(PCColorSpaceHandle *this, CFStringRef name)
{
  *(_QWORD *)this = CGColorSpaceCreateWithName(name);
}

CGColorSpace **PCColorSpaceHandle::PCColorSpaceHandle(CGColorSpace **a1, CGColorSpace **a2)
{
  CGColorSpace *v3;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
    PCCFRefTraits<CGColorSpace *>::retain(v3);
  return a1;
}

CGColorSpace **PCColorSpaceHandle::setColorSpace(CGColorSpace **this, CGColorSpaceRef space)
{
  CGColorSpace *v2;
  CGColorSpace *v4;
  BOOL v5;
  CGColorSpace *v7;

  v2 = space;
  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v7 = v2;
  v4 = *this;
  if (*this)
    v5 = v4 == v2;
  else
    v5 = 1;
  if (!v5)
  {
    PCCFRefTraits<CGColorSpace *>::release(v4);
    v2 = v7;
  }
  *this = v2;
  v7 = 0;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v7);
}

void sub_1B2988AE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

BOOL operator!=(_QWORD *a1)
{
  return *a1 != 0;
}

BOOL operator!=(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2;
}

void `anonymous namespace'::makeColorSpaceFromCacheKey(uint64_t a1@<X0>, CGColorSpace **a2@<X8>)
{
  CGColorSpace *v4;
  CGColorSpace *v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t *v11;
  float v12;
  PCICCTransferFunctionGamma *v13;
  CGColorSpace *v14;
  uint64_t v15;
  __int128 v16;
  CGColorSpace *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  float *v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CGColorSpace *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v30 = *(_QWORD *)a1;
  v31 = *(_DWORD *)(a1 + 8);
  v4 = PCGetNCLCColorSpace((unsigned int *)&v30);
  v5 = v4;
  if (v4)
  {
    PCCFRefTraits<CGColorSpace *>::retain(v4);
    *a2 = v5;
    return;
  }
  if (!v8)
    goto LABEL_10;
  do
  {
    v11 = (uint64_t *)(v8 + 8);
    if (!v10)
    {
      v11 = (uint64_t *)v8;
      v9 = v8;
    }
    v8 = *v11;
  }
  while (*v11);
  {
LABEL_10:
    v12 = *(float *)(a1 + 44);
    if (v12 == 0.0)
    {
      v13 = 0;
      switch(*(_DWORD *)(a1 + 4))
      {
        case 0:
        case 2:
          v13 = (PCICCTransferFunctionGamma *)operator new();
          PCICCTransferFunctionGamma::PCICCTransferFunctionGamma(v13, 1.8);
          break;
        case 1:
        case 7:
        case 0xE:
          v13 = (PCICCTransferFunctionGamma *)operator new();
          PCICCTransferFunctionGamma::PCICCTransferFunctionGamma(v13, 1.961);
          break;
        case 8:
          v13 = (PCICCTransferFunctionGamma *)operator new();
          PCICCTransferFunctionLinear::PCICCTransferFunctionLinear(v13);
          break;
        case 0xD:
          v13 = (PCICCTransferFunctionGamma *)operator new();
          PCICCTransferFunctionParametric3::PCICCTransferFunctionParametric3(v13, 2.4, 0.948, 0.052, 0.077, 0.039);
          break;
        case 0x11:
          v13 = (PCICCTransferFunctionGamma *)operator new();
          PCICCTransferFunctionGamma::PCICCTransferFunctionGamma(v13, 2.6);
          break;
        default:
          break;
      }
    }
    else
    {
      v13 = (PCICCTransferFunctionGamma *)operator new();
      if (v12 == 1.0)
        PCICCTransferFunctionLinear::PCICCTransferFunctionLinear(v13);
      else
        PCICCTransferFunctionGamma::PCICCTransferFunctionGamma(v13, v12);
    }
    PCMakeDisplayRGBProfile((float *)(a1 + 12), (uint64_t)v13, (PCICCProfile *)&v30);
    v16 = *(_OWORD *)(a1 + 16);
    v25 = *(_OWORD *)a1;
    v26 = v16;
    v27 = *(_OWORD *)(a1 + 32);
    v17 = *a2;
    v28 = v17;
    if (v17)
      PCCFRefTraits<CGColorSpace *>::retain(v17);
    v19 = (_QWORD *)(v15 + 8);
    v18 = *(_QWORD *)(v15 + 8);
    if (v18)
    {
      while (1)
      {
        while (1)
        {
          v20 = (_QWORD *)v18;
          v21 = (float *)(v18 + 32);
            break;
          v18 = *v20;
          v19 = v20;
          if (!*v20)
            goto LABEL_30;
        }
          break;
        v18 = v20[1];
        if (!v18)
        {
          v19 = v20 + 1;
          goto LABEL_30;
        }
      }
    }
    else
    {
      v20 = (_QWORD *)(v15 + 8);
LABEL_30:
      v22 = operator new(0x58uLL);
      v23 = v26;
      v22[2] = v25;
      v22[3] = v23;
      v22[4] = v27;
      *((_QWORD *)v22 + 10) = v17;
      v28 = 0;
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      *((_QWORD *)v22 + 2) = v20;
      *v19 = v22;
      v24 = **(_QWORD **)v15;
      if (v24)
      {
        *(_QWORD *)v15 = v24;
        v22 = (_OWORD *)*v19;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v15 + 8), (uint64_t *)v22);
      ++*(_QWORD *)(v15 + 16);
      v6 = (os_unfair_lock_s *)v29;
    }
    PCCFRef<CGColorSpace *>::~PCCFRef(&v28);
    PCICCProfile::~PCICCProfile((PCICCProfile *)&v30);
    (*(void (**)(PCICCTransferFunctionGamma *))(*(_QWORD *)v13 + 8))(v13);
    if (v6)
      goto LABEL_34;
  }
  else
  {
    v14 = *(CGColorSpace **)(v9 + 80);
    *a2 = v14;
    if (v14)
      PCCFRefTraits<CGColorSpace *>::retain(v14);
    if (v6)
LABEL_34:
      PCSpinLock::unlock(v6);
  }
}

void sub_1B2988F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x1B5E29170](v9, 0x1081C409227ACB4);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void PCMakeColorSpaceFromNCLC(int a1@<W0>, int a2@<W1>, int a3@<W2>, CGColorSpace **a4@<X8>, float a5@<S0>)
{
  _DWORD v7[3];
  __int128 v8[2];
  float v9;

  memset(v8, 0, sizeof(v8));
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v9 = a5;
}

__n128 `anonymous namespace'::getChromaticities@<Q0>(int a1@<W0>, __int128 *a2@<X8>)
{
  __int128 *v2;
  __n128 result;
  __int128 v4;

  switch(a1)
  {
    case 0:
    case 1:
      v2 = &kPCChromaticities_ITU_R709_2;
      goto LABEL_9;
    case 2:
      v2 = &kPCChromaticities_Generic;
      goto LABEL_9;
    case 5:
      v2 = &kPCChromaticities_EBU_3213;
      goto LABEL_9;
    case 6:
      v2 = &kPCChromaticities_SMPTE_C;
      goto LABEL_9;
    case 9:
      v2 = &kPCChromaticities_ITU_R2020;
      goto LABEL_9;
    case 11:
      v2 = &kPCChromaticities_DCI_P3;
      goto LABEL_9;
    case 12:
      v2 = &kPCChromaticities_P3_D65;
LABEL_9:
      result = (__n128)*v2;
      v4 = v2[1];
      *a2 = *v2;
      a2[1] = v4;
      break;
    default:
      return result;
  }
  return result;
}

const void **`anonymous namespace'::makeColorSpaceFromProfile@<X0>(_anonymous_namespace_ *this@<X0>, CGColorSpace **a2@<X8>)
{
  const __CFAllocator *v5;
  const UInt8 *ProfileData;
  unsigned int Size;
  CGColorSpace *v8;
  CGColorSpace *v9;
  CFDataRef v11;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ProfileData = (const UInt8 *)PCICCProfile::getProfileData(this);
  Size = PCICCProfile::getSize((ProCore::Private **)this);
  v11 = CFDataCreate(v5, ProfileData, Size);
  v8 = (CGColorSpace *)MEMORY[0x1B5E28150]();
  v9 = v8;
  if (v8)
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  *a2 = v9;
  CGColorSpaceRelease(v9);
  return PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v11);
}

void sub_1B2989164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  CGColorSpace **v2;
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)va);
  _Unwind_Resume(a1);
}

void PCMakeColorSpaceFromProfile(const PCICCProfile *a1@<X0>, CGColorSpace **a2@<X8>)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  const UInt8 *ProfileData;
  unsigned int Size;
  CGColorSpace *v8;
  CGColorSpace *v9;
  CGColorSpace *v10;
  CGColorSpace *v11;
  const void *v12[2];
  __n128 v13;

  PCICCProfile::getMD5Hash(a1, &v13);
  v4 = (os_unfair_lock_s *)profileCacheLock;
  v12[1] = (const void *)profileCacheLock;
  PCSpinLock::lock((os_unfair_lock_t)profileCacheLock);
  v5 = *(_QWORD **)profileCache;
  LOBYTE(v12[0]) = 0;
  PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::findValue(v5, (const PCHash128 *)&v13, v12, a2);
  if (*a2)
  {
    if (!v4)
      return;
LABEL_10:
    PCSpinLock::unlock(v4);
    return;
  }
  ProfileData = (const UInt8 *)PCICCProfile::getProfileData(a1);
  Size = PCICCProfile::getSize((ProCore::Private **)a1);
  v12[0] = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], ProfileData, Size);
  v8 = (CGColorSpace *)MEMORY[0x1B5E2815C]();
  v9 = v8;
  if (v8)
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  v11 = v9;
  v10 = *a2;
  if (*a2)
  {
    if (v10 != v9)
    {
      PCCFRefTraits<CGColorSpace *>::release(v10);
      v9 = v11;
    }
  }
  *a2 = v9;
  v11 = 0;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v11);
  CGColorSpaceRelease(*a2);
  PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::addValue(*(_QWORD *)profileCache, (const PCHash128 *)&v13, a2, 0);
  PCCFRef<__CTLine const*>::~PCCFRef(v12);
  if (v4)
    goto LABEL_10;
}

void sub_1B29892B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  CGColorSpace **v2;
  CGColorSpace *v4;
  va_list va;
  const void *v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, CGColorSpace *);
  va_copy(va2, va1);
  v6 = va_arg(va2, const void *);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)va1);
  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va2);
  _Unwind_Resume(a1);
}

os_unfair_lock_s **PCLockSentry<PCSpinLock>::~PCLockSentry(os_unfair_lock_s **a1)
{
  os_unfair_lock_s *v2;

  v2 = *a1;
  if (v2)
    PCSpinLock::unlock(v2);
  return a1;
}

_DWORD *ProCore::Private::initColorSpaceHandle(ProCore::Private *this)
{
  _DWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _DWORD *result;

  v1 = (_DWORD *)operator new();
  *v1 = 0;
  v2 = (_QWORD *)operator new();
  v2[2] = 0;
  v2[1] = 0;
  *v2 = v2 + 1;
  v3 = operator new();
  *(_QWORD *)(v3 + 8) = &off_1E65125C8;
  *(_QWORD *)(v3 + 32) = v3 + 8;
  *(_DWORD *)(v3 + 40) = 0;
  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 32;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 88) = xmmword_1B3058880;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v3 + 48) = v4;
  v5 = operator new();
  v6 = (_QWORD *)operator new();
  v7 = operator new();
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 24) = v7 + 32;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 80) = 0;
  *(_OWORD *)(v7 + 88) = xmmword_1B3058890;
  *(_QWORD *)(v7 + 104) = 0;
  *v6 = v7;
  profileCache = (uint64_t)v6;
  result = (_DWORD *)operator new();
  *result = 0;
  profileCacheLock = (uint64_t)result;
  return result;
}

void sub_1B2989508(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::testColorSpaceEquivalence(CFTypeRef *a1)
{
  _BOOL8 v2;
  _BYTE v4[224];
  _BYTE v5[224];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (CFEqual(*a1, a1[1]))
    return 1;
  PCICCProfile::PCICCProfile((PCICCProfile *)v5, (CGColorSpace *)*a1);
  PCICCProfile::PCICCProfile((PCICCProfile *)v4, (CGColorSpace *)a1[1]);
  v2 = PCSameColorTransform((const PCICCProfile *)v5, (const PCICCProfile *)v4);
  PCICCProfile::~PCICCProfile((PCICCProfile *)v4);
  PCICCProfile::~PCICCProfile((PCICCProfile *)v5);
  return v2;
}

void sub_1B2989630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a2)
  {
    PCICCProfile::~PCICCProfile((PCICCProfile *)&a10);
    PCICCProfile::~PCICCProfile((PCICCProfile *)&a38);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B2989600);
  }
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::getMD5FromProfile(PCWorkingColorVector *a1@<X8>)
{
  PCWorkingColorVector::PCWorkingColorVector(a1);
}

BOOL std::less<`anonymous namespace'::CacheKey>::operator()[abi:ne180100](float *a1, uint64_t a2)
{
  float v2;
  uint64_t v3;
  int v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;

  v2 = *a1;
  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 1;
  if (SLODWORD(v2) > *(_DWORD *)a2)
    return 0;
  v5 = *((_DWORD *)a1 + 1);
  v6 = *(_DWORD *)(a2 + 4);
  if (v5 < v6)
    return 1;
  if (v5 > v6)
    return 0;
  v7 = *((_DWORD *)a1 + 2);
  v8 = *(_DWORD *)(a2 + 8);
  if (v7 < v8)
    return 1;
  if (v7 > v8)
    return 0;
  if (LODWORD(v2) != 2)
  {
    if (v5 != 2)
      return 0;
    return a1[11] < *(float *)(a2 + 44);
  }
  v9 = a1[3];
  v10 = *(float *)(a2 + 12);
  if (v9 < v10)
    return 1;
  if (v9 > v10)
    return 0;
  v11 = a1[4];
  v12 = *(float *)(a2 + 16);
  if (v11 < v12)
    return 1;
  if (v11 > v12)
    return 0;
  v13 = a1[5];
  v14 = *(float *)(a2 + 20);
  if (v13 < v14)
    return 1;
  if (v13 > v14)
    return 0;
  v15 = a1[6];
  v16 = *(float *)(a2 + 24);
  if (v15 < v16)
    return 1;
  if (v15 > v16)
    return 0;
  v17 = a1[7];
  v18 = *(float *)(a2 + 28);
  if (v17 < v18)
    return 1;
  if (v17 > v18)
    return 0;
  v19 = a1[8];
  v20 = *(float *)(a2 + 32);
  if (v19 < v20)
    return 1;
  if (v19 > v20)
    return 0;
  v21 = a1[9];
  v22 = *(float *)(a2 + 36);
  if (v21 < v22)
    return 1;
  if (v21 > v22)
    return 0;
  v23 = a1[10];
  v24 = *(float *)(a2 + 40);
  if (v23 < v24)
    return 1;
  v3 = 0;
  if (v5 == 2 && v23 <= v24)
    return a1[11] < *(float *)(a2 + 44);
  return v3;
}

void PCICCProfile::~PCICCProfile(PCICCProfile *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 152);
  std::vector<PCICCProfile::Tag>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 128);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<PCICCProfile::Tag>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v4 - 16));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::findValue(_QWORD *a1@<X0>, unint64_t *a2@<X1>, _BYTE *a3@<X2>, PCWorkingColorVector *a4@<X8>)
{
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = (_QWORD *)a1[4];
  if (!v5)
    goto LABEL_12;
  v6 = *a2;
  v7 = a1 + 4;
  do
  {
    v8 = v5[4];
    v9 = v8 >= v6;
    if (v8 >= v6)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != a1 + 4 && v6 >= v7[4])
  {
    v12 = v7;
    *(_DWORD *)a4 = *((_DWORD *)v7 + 10);
    *((_DWORD *)a4 + 1) = *((_DWORD *)v7 + 11);
    *((_DWORD *)a4 + 2) = *((_DWORD *)v7 + 12);
    *((_DWORD *)a4 + 3) = *((_DWORD *)v7 + 13);
    v11 = a1[9] + 1;
    a1[9] = v11;
    v7[8] = v11;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::bubble(a1 + 6, (uint64_t)&v12);
    *a3 = 1;
  }
  else
  {
LABEL_12:
    *a3 = 0;
    PCWorkingColorVector::PCWorkingColorVector(a4);
  }
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *result;
  v3 = result[1] - *result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      v17 = *(_QWORD *)(v2 + 8 * v4);
      do
      {
        v18 = v4 - 1;
        v19 = (v4 - 1) >> 1;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        if (*(_QWORD *)(v20 + 64) <= *(_QWORD *)(v17 + 64))
          break;
        *(_QWORD *)(v2 + 8 * v4) = v20;
        *(_QWORD *)(v2 + 8 * v19) = v17;
        v2 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 72) = v4;
        v17 = *(_QWORD *)(v2 + 8 * v19);
        *(_QWORD *)(v17 + 72) = v19;
        v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  v6 = 0;
  v7 = v3 >> 3;
  v8 = 2 * v4;
  v9 = *(_QWORD *)(v2 + 8 * v4);
  while (1)
  {
    v10 = v8 + 2;
    v11 = *(_QWORD *)(v9 + 64);
    v12 = v10 < v7 && v11 > *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 64);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 64);
    if (v11 <= v13 && !v12)
      break;
    v15 = v11 > v13 && v12;
    if (v12)
      v16 = v10;
    else
      v16 = v5;
    if (v15)
    {
      if (v13 <= *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 64))
        v16 = v5;
      else
        v16 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4) = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v2 + 8 * v16) = v9;
    v2 = *result;
    *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 72) = v4;
    v9 = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v9 + 72) = v16;
    v8 = 2 * v16;
    v6 = 1;
    v5 = (2 * v16) | 1;
    v4 = v16;
    if (v5 >= v7)
      return result;
  }
  if ((v6 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 72);
    goto LABEL_24;
  }
  return result;
}

void PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::addValue(uint64_t a1, CGColorSpace **a2, _OWORD *a3, unint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  CGColorSpace *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  unsigned __int8 v15;
  unint64_t v16;
  uint64_t *v17;
  CGColorSpace **v18;
  CGColorSpace **v19;
  __int128 v20;
  CGColorSpace *v21;
  __int128 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[2];
  uint64_t v27;

  if (*(_QWORD *)(a1 + 88) >= a4 || *(_QWORD *)(a1 + 104))
  {
    v6 = a1 + 32;
    v7 = *(_QWORD **)(a1 + 32);
    v8 = *a2;
    if (!v7)
      goto LABEL_14;
    v9 = a1 + 32;
    do
    {
      v10 = v7[4];
      v11 = v10 >= (unint64_t)v8;
      if (v10 >= (unint64_t)v8)
        v12 = v7;
      else
        v12 = v7 + 1;
      if (v11)
        v9 = (uint64_t)v7;
      v7 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != v6 && (unint64_t)v8 >= *(_QWORD *)(v9 + 32))
    {
      v27 = v9;
      *(_OWORD *)(v9 + 40) = *a3;
      PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::update(a1, (uint64_t)&v27, a4);
    }
    else
    {
LABEL_14:
      v13 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v13;
      v14 = *a3;
      v21 = v8;
      if (v8)
      {
        v20 = v14;
        PCCFRefTraits<CGColorSpace *>::retain(v8);
        v14 = v20;
      }
      v22 = v14;
      v23 = a4;
      v24 = v13;
      v25 = 0;
      v26[0] = (uint64_t)std::__tree<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__map_value_compare<std::tuple<PCColorSpaceHandle const>,std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::less<std::tuple<PCColorSpaceHandle const>>,true>,std::allocator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>>>::__emplace_unique_key_args<std::tuple<PCColorSpaceHandle const>,std::pair<std::tuple<PCColorSpaceHandle const> const,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>>(a1 + 24, (unint64_t *)&v21, (uint64_t)&v21);
      v26[1] = v15;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v21);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v26);
      v16 = *(_QWORD *)(a1 + 80) + a4;
      *(_QWORD *)(a1 + 80) = v16;
      if (!*(_QWORD *)(a1 + 104))
      {
        while (v16 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
        {
          v19 = *(CGColorSpace ***)(a1 + 48);
          if (v19 == *(CGColorSpace ***)(a1 + 56))
            break;
          v21 = *v19;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v21);
          v17 = (uint64_t *)v21;
          v18 = (CGColorSpace **)((char *)v21 + 32);
          *(_QWORD *)(a1 + 80) -= *((_QWORD *)v21 + 7);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v17);
          PCCFRef<CGColorSpace *>::~PCCFRef(v18);
          operator delete(v17);
          v16 = *(_QWORD *)(a1 + 80);
        }
      }
    }
  }
}

void sub_1B2989C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (char *)*a1;
  v5 = a1[1];
  v6 = ((char *)v5 - (_BYTE *)*a1) >> 3;
  v7 = *a2;
  *(_QWORD *)(*a2 + 72) = v6;
  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1))
      v13 = v6 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      v7 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v6];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v7;
    v11 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = v7;
    v11 = v5 + 1;
  }
  a1[1] = v11;
  v21 = *(_QWORD *)(*a2 + 72);
  if (v21)
  {
    v22 = (char *)*a1;
    v23 = *((_QWORD *)*a1 + v21);
    do
    {
      v24 = v21 - 1;
      v25 = (v21 - 1) >> 1;
      v26 = *(_QWORD *)&v22[8 * v25];
      if (*(_QWORD *)(v26 + 64) <= *(_QWORD *)(v23 + 64))
        break;
      *(_QWORD *)&v22[8 * v21] = v26;
      *(_QWORD *)&v22[8 * v25] = v23;
      v22 = (char *)*a1;
      *(_QWORD *)(*((_QWORD *)*a1 + v21) + 72) = v21;
      v23 = *(_QWORD *)&v22[8 * v25];
      *(_QWORD *)(v23 + 72) = v25;
      v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

void PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  CGColorSpace **v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 72) + 1;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(*(_QWORD *)a2 + 64) = v6;
  v7 = (uint64_t *)(a1 + 48);
  PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), a2);
  v8 = *(_QWORD *)a2;
  v9 = a3 - *(_QWORD *)(*(_QWORD *)a2 + 56);
  if (v9)
  {
    v10 = v9 + *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(v8 + 56) = a3;
    if (!*(_QWORD *)(a1 + 104))
    {
      while (v10 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
      {
        v11 = *(uint64_t **)(a1 + 48);
        if (v11 == *(uint64_t **)(a1 + 56))
          break;
        v14 = *v11;
        PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::remove(v7, (uint64_t)&v14);
        v12 = (uint64_t *)v14;
        v13 = (CGColorSpace **)(v14 + 32);
        *(_QWORD *)(a1 + 80) -= *(_QWORD *)(v14 + 56);
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v12);
        PCCFRef<CGColorSpace *>::~PCCFRef(v13);
        operator delete(v12);
        v10 = *(_QWORD *)(a1 + 80);
      }
    }
  }
}

uint64_t *std::__tree<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__map_value_compare<std::tuple<PCColorSpaceHandle const>,std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::less<std::tuple<PCColorSpaceHandle const>>,true>,std::allocator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>>>::__emplace_unique_key_args<std::tuple<PCColorSpaceHandle const>,std::pair<std::tuple<PCColorSpaceHandle const> const,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v10[3];

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = v4[4];
        if (v6 >= v8)
          break;
        v4 = (uint64_t *)*v7;
        v5 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = (uint64_t *)v7[1];
      if (!v4)
      {
        v5 = (uint64_t **)(v7 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__map_value_compare<std::tuple<PCColorSpaceHandle const>,std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::less<std::tuple<PCColorSpaceHandle const>>,true>,std::allocator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>>>::__construct_node<std::pair<std::tuple<PCColorSpaceHandle const> const,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>>(a1, a3, (uint64_t)v10);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__map_value_compare<std::tuple<PCColorSpaceHandle const>,std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::less<std::tuple<PCColorSpaceHandle const>>,true>,std::allocator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>>>::__construct_node<std::pair<std::tuple<PCColorSpaceHandle const> const,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::tuple<PCColorSpaceHandle const> const,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2989F6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::tuple<PCColorSpaceHandle const> const,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CGColorSpace *v4;
  __int128 v5;

  v4 = *(CGColorSpace **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
    PCCFRefTraits<CGColorSpace *>::retain(v4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CGColorSpace **v2;

  v2 = *(CGColorSpace ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      PCCFRef<CGColorSpace *>::~PCCFRef(v2 + 4);
    operator delete(v2);
  }
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(_QWORD *)(*a1 + 8 * v3) = *(_QWORD *)(*a1 + 8 * v4);
    *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 72) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::bubble(a1, *a1 + 8 * v3);
  }
}

_QWORD *PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::findValue@<X0>(_QWORD *a1@<X0>, const PCHash128 *a2@<X1>, _BYTE *a3@<X2>, CGColorSpace **a4@<X8>)
{
  _QWORD *result;
  _QWORD *v8;
  CGColorSpace *v9;
  uint64_t v10;
  _QWORD *v11;

  result = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)(a1 + 3), a2);
  v11 = result;
  if (a1 + 4 == result)
  {
    *a3 = 0;
    *a4 = 0;
  }
  else
  {
    v8 = result;
    v9 = (CGColorSpace *)result[6];
    *a4 = v9;
    if (v9)
      PCCFRefTraits<CGColorSpace *>::retain(v9);
    v10 = a1[9] + 1;
    a1[9] = v10;
    v8[8] = v10;
    result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::bubble(a1 + 6, (uint64_t)&v11);
    *a3 = 1;
  }
  return result;
}

void sub_1B298A134(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::addValue(uint64_t a1, const PCHash128 *a2, CGColorSpace **a3, unint64_t a4)
{
  CGColorSpace **v8;
  uint64_t v9;
  CGColorSpace *v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t *v13;
  CGColorSpace **v14;
  _QWORD *v15;
  __int128 v16;
  CGColorSpace *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20[2];
  CGColorSpace *v21;
  __int128 v22;
  uint64_t v23;
  CGColorSpace **v24;

  if (*(_QWORD *)(a1 + 88) >= a4 || *(_QWORD *)(a1 + 104))
  {
    v8 = (CGColorSpace **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>(a1 + 24, a2);
    v24 = v8;
    if ((CGColorSpace **)(a1 + 32) == v8)
    {
      v9 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v9;
      v10 = *a3;
      v21 = v10;
      if (v10)
        PCCFRefTraits<CGColorSpace *>::retain(v10);
      *(_QWORD *)&v22 = a4;
      *((_QWORD *)&v22 + 1) = v9;
      v23 = 0;
      v16 = *(_OWORD *)a2;
      v17 = v10;
      if (v10)
        PCCFRefTraits<CGColorSpace *>::retain(v10);
      v18 = v22;
      v19 = v23;
      v20[0] = (uint64_t)std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>>((uint64_t **)(a1 + 24), (const PCHash128 *)&v16, (uint64_t)&v16);
      v20[1] = v11;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v20);
      v12 = *(_QWORD *)(a1 + 80) + a4;
      *(_QWORD *)(a1 + 80) = v12;
      if (!*(_QWORD *)(a1 + 104))
      {
        while (v12 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
        {
          v15 = *(_QWORD **)(a1 + 48);
          if (v15 == *(_QWORD **)(a1 + 56))
            break;
          *(_QWORD *)&v16 = *v15;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v16);
          v13 = (uint64_t *)v16;
          v14 = (CGColorSpace **)(v16 + 48);
          *(_QWORD *)(a1 + 80) -= *(_QWORD *)(v16 + 56);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v13);
          PCCFRef<CGColorSpace *>::~PCCFRef(v14);
          operator delete(v13);
          v12 = *(_QWORD *)(a1 + 80);
        }
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(&v21);
    }
    else
    {
      PCCFRef<CGColorSpace *>::operator=(v8 + 6, a3);
      PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::update(a1, (uint64_t)&v24, a4);
    }
  }
}

void sub_1B298A2FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  CGColorSpace **v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a1 + 72) + 1;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(*(_QWORD *)a2 + 64) = v6;
  v7 = (uint64_t *)(a1 + 48);
  PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), a2);
  v8 = *(_QWORD *)a2;
  v9 = a3 - *(_QWORD *)(*(_QWORD *)a2 + 56);
  if (v9)
  {
    v10 = v9 + *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(v8 + 56) = a3;
    if (!*(_QWORD *)(a1 + 104))
    {
      while (v10 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
      {
        v11 = *(uint64_t **)(a1 + 48);
        if (v11 == *(uint64_t **)(a1 + 56))
          break;
        v14 = *v11;
        PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCColorSpaceHandle const>,PCCacheImpl<std::tuple<PCColorSpaceHandle const>,PCHash128,PCNoLock,std::less<std::tuple<PCColorSpaceHandle const>>>::Data>,void *> *,long>>>::remove(v7, (uint64_t)&v14);
        v12 = (uint64_t *)v14;
        v13 = (CGColorSpace **)(v14 + 48);
        *(_QWORD *)(a1 + 80) -= *(_QWORD *)(v14 + 56);
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), v12);
        PCCFRef<CGColorSpace *>::~PCCFRef(v13);
        operator delete(v12);
        v10 = *(_QWORD *)(a1 + 80);
      }
    }
  }
}

uint64_t *std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>>>::__construct_node<std::pair<PCHash128 const,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::__tree<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>>>::__construct_node<std::pair<PCHash128 const,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<PCHash128 const,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B298A508(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::pair<PCHash128 const,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CGColorSpace *v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v4 = *(CGColorSpace **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
    PCCFRefTraits<CGColorSpace *>::retain(v4);
  v5 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v5;
  return a1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCHash128,PCCacheImpl<PCHash128,PCColorSpaceHandle,PCNoLock,std::less<PCHash128>>::Data>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CGColorSpace **v2;

  v2 = *(CGColorSpace ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      PCCFRef<CGColorSpace *>::~PCCFRef(v2 + 6);
    operator delete(v2);
  }
}

void std::__function::__func<BOOL (*)(`anonymous namespace'::EquivalenceKey const&),std::allocator<BOOL (*)(`anonymous namespace'::EquivalenceKey const&)>,BOOL ()(`anonymous namespace'::EquivalenceKey const&)>::~__func()
{
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::__function::__func<BOOL (*)(`anonymous namespace'::EquivalenceKey const&),std::allocator<BOOL (*)(`anonymous namespace'::EquivalenceKey const&)>,BOOL ()(`anonymous namespace'::EquivalenceKey const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E65125C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(`anonymous namespace'::EquivalenceKey const&),std::allocator<BOOL (*)(`anonymous namespace'::EquivalenceKey const&)>,BOOL ()(`anonymous namespace'::EquivalenceKey const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E65125C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<BOOL (*)(`anonymous namespace'::EquivalenceKey const&),std::allocator<BOOL (*)(`anonymous namespace'::EquivalenceKey const&)>,BOOL ()(`anonymous namespace'::EquivalenceKey const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<BOOL (*)(`anonymous namespace'::EquivalenceKey const&),std::allocator<BOOL (*)(`anonymous namespace'::EquivalenceKey const&)>,BOOL ()(`anonymous namespace'::EquivalenceKey const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL (*)(`anonymous namespace'::EquivalenceKey const&),std::allocator<BOOL (*)(`anonymous namespace'::EquivalenceKey const&)>,BOOL ()(`anonymous namespace'::EquivalenceKey const&)>::target_type()
{
}

uint64_t PCCachedFunctionImpl<PCHash128,PCColorSpaceHandle const&>::PCCachedFunctionImpl<PCHash128 (*)(PCColorSpaceHandle const&)>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0;
  if (a2)
  {
    *(_QWORD *)a1 = &unk_1E6512678;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 24) = a1;
  }
  *(_DWORD *)(a1 + 32) = 0;
  v5 = operator new();
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = v5 + 32;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = -1;
  *(_QWORD *)(v5 + 96) = a3;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

void sub_1B298A71C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSpinLock *v2;
  _QWORD *v4;
  uint64_t v5;

  PCSpinLock::~PCSpinLock(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<PCHash128 (*)(PCColorSpaceHandle const&),std::allocator<PCHash128 (*)(PCColorSpaceHandle const&)>,PCHash128 ()(PCColorSpaceHandle const&)>::~__func()
{
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::__function::__func<PCHash128 (*)(PCColorSpaceHandle const&),std::allocator<PCHash128 (*)(PCColorSpaceHandle const&)>,PCHash128 ()(PCColorSpaceHandle const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E6512678;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PCHash128 (*)(PCColorSpaceHandle const&),std::allocator<PCHash128 (*)(PCColorSpaceHandle const&)>,PCHash128 ()(PCColorSpaceHandle const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E6512678;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PCHash128 (*)(PCColorSpaceHandle const&),std::allocator<PCHash128 (*)(PCColorSpaceHandle const&)>,PCHash128 ()(PCColorSpaceHandle const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t std::__function::__func<PCHash128 (*)(PCColorSpaceHandle const&),std::allocator<PCHash128 (*)(PCColorSpaceHandle const&)>,PCHash128 ()(PCColorSpaceHandle const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<PCHash128 (*)(PCColorSpaceHandle const&),std::allocator<PCHash128 (*)(PCColorSpaceHandle const&)>,PCHash128 ()(PCColorSpaceHandle const&)>::target_type()
{
}

void PCToneMapMethod::PCToneMapMethod(PCToneMapMethod *this)
{
  float v2;

  PCColorUtil::getHLGDiffuseWhiteGain((PCColorUtil *)this);
  this->_type = 5;
  this->_gain = v2;
}

float PCToneMapMethod::getGain(PCToneMapMethod *this)
{
  return this->_gain;
}

BOOL operator<(float *a1, uint64_t a2)
{
  float v2;

  v2 = *a1;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return SLODWORD(v2) < *(_DWORD *)a2;
  if (LODWORD(v2) == 5)
    return a1[1] < *(float *)(a2 + 4);
  return 0;
}

uint64_t PCColorDescription::PCColorDescription(uint64_t a1, CGColorSpaceRef space, int a3, _QWORD *a4)
{
  CGColorSpace *v9;

  if (space)
  {
    PCCFRefTraits<CGColorSpace *>::retain(space);
    v9 = space;
    *(_QWORD *)a1 = space;
    PCCFRefTraits<CGColorSpace *>::retain(space);
  }
  else
  {
    v9 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 12) = *a4;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v9);
  return a1;
}

void sub_1B298A910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

PCToneMapMethod *PCColorDescription::getToneMapMethod(PCColorDescription *this)
{
  return &this->_toneMapMethod;
}

void PCColorDescription::PCColorDescription(PCColorDescription *this, const PCColorDescription *a2, CGColorSpaceRef space)
{
  int dynamicRange;
  CGColorSpace *v7;

  if (space)
  {
    PCCFRefTraits<CGColorSpace *>::retain(space);
    v7 = space;
    dynamicRange = a2->_dynamicRange;
    this->_colorSpaceRef._obj = space;
    PCCFRefTraits<CGColorSpace *>::retain(space);
  }
  else
  {
    v7 = 0;
    dynamicRange = a2->_dynamicRange;
    this->_colorSpaceRef._obj = 0;
  }
  this->_dynamicRange = dynamicRange;
  this->_toneMapMethod = a2->_toneMapMethod;
  PCCFRef<CGColorSpace *>::~PCCFRef(&v7);
}

void sub_1B298A9A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t PCColorDescription::PCColorDescription(uint64_t a1, uint64_t a2, int a3)
{
  CGColorSpace *v6;

  v6 = *(CGColorSpace **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v6)
    PCCFRefTraits<CGColorSpace *>::retain(v6);
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  return a1;
}

void PCColorDescription::PCColorDescription(PCColorDescription *this, const PCColorDescription *a2, const PCToneMapMethod *a3)
{
  int dynamicRange;
  CGColorSpace *obj;

  dynamicRange = a2->_dynamicRange;
  obj = a2->_colorSpaceRef._obj;
  this->_colorSpaceRef._obj = a2->_colorSpaceRef._obj;
  if (obj)
    PCCFRefTraits<CGColorSpace *>::retain(obj);
  this->_dynamicRange = dynamicRange;
  this->_toneMapMethod = *a3;
}

void PCColorDescription::PCColorDescription(PCColorDescription *this, CGColorSpaceRef space, PCToneMapMethod *a3)
{
  CGColorSpace *v6;

  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v6 = space;
  PCColorDescription::PCColorDescription((uint64_t)this, &v6, a3);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v6);
}

void sub_1B298AAB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t PCColorDescription::PCColorDescription(uint64_t a1, CGColorSpace **a2, _QWORD *a3)
{
  _BOOL4 v6;
  CGColorSpace *v7;

  v6 = PCIsHDRColorSpace(*a2);
  v7 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v7)
    PCCFRefTraits<CGColorSpace *>::retain(v7);
  *(_DWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 12) = *a3;
  return a1;
}

CGColorSpace **PCColorDescription::setCGColorSpace(PCColorDescription *this, CGColorSpaceRef space)
{
  CGColorSpace *v2;
  CGColorSpace *obj;
  BOOL v5;
  CGColorSpace *v7;

  v2 = space;
  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v7 = v2;
  obj = this->_colorSpaceRef._obj;
  if (this->_colorSpaceRef._obj)
    v5 = obj == v2;
  else
    v5 = 1;
  if (!v5)
  {
    PCCFRefTraits<CGColorSpace *>::release(obj);
    v2 = v7;
  }
  this->_colorSpaceRef._obj = v2;
  v7 = 0;
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v7);
}

void sub_1B298AB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

PCColorDescription *PCColorDescription::setToneMapMethod(PCColorDescription *this, const PCToneMapMethod *a2)
{
  this->_toneMapMethod = *a2;
  return this;
}

BOOL PCColorDescription::isHDR(PCColorDescription *this)
{
  return this->_dynamicRange == 1 && this->_colorSpaceRef._obj && this->_toneMapMethod._type != 0;
}

BOOL PCColorDescription::isDynamicRangeManaged(PCColorDescription *this)
{
  return this->_colorSpaceRef._obj && this->_toneMapMethod._type != 0;
}

BOOL PCColorDescription::isSDR(PCColorDescription *this)
{
  return !this->_dynamicRange && this->_colorSpaceRef._obj && this->_toneMapMethod._type != 0;
}

BOOL PCColorDescriptionCanToneMap(const PCColorDescription *a1)
{
  return a1->_toneMapMethod._type != 0;
}

uint64_t PCHashColorDescription(int8x8_t *a1, const PCColorDescription *a2)
{
  uint64_t result;
  _BYTE v5[16];

  PCColorSpaceHandle::getMD5(a2->_colorSpaceRef._obj, (PCWorkingColorVector *)v5);
  PCHashWriteStream::writeValue(a1, (const PCHash128 *)v5);
  (*(void (**)(int8x8_t *, _QWORD))(*(_QWORD *)a1 + 48))(a1, a2->_dynamicRange);
  result = (*(uint64_t (**)(int8x8_t *, _QWORD))(*(_QWORD *)a1 + 48))(a1, a2->_toneMapMethod._type);
  if (a2->_toneMapMethod._type == 5)
    return (*(uint64_t (**)(int8x8_t *, float))(*(_QWORD *)a1 + 80))(a1, a2->_toneMapMethod._gain);
  return result;
}

BOOL operator==(uint64_t a1, uint64_t a2, CGColorSpace *a3)
{
  int v3;

  if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && (v3 = *(_DWORD *)(a1 + 12), v3 == *(_DWORD *)(a2 + 12))
    && (v3 != 5 || *(float *)(a1 + 16) == *(float *)(a2 + 16)))
  {
    return PCColorSpaceHandle::isSameColorSpace(*(CGColorSpaceRef *)a1, *(CGColorSpace **)a2, a3);
  }
  else
  {
    return 0;
  }
}

{
  return (*(_BYTE *)(a1 + 24) != 0) == (*(_BYTE *)(a2 + 24) != 0) && operator==(a1, a2, a3);
}

_QWORD *ProCore::Private::initColorSpaceCache(ProCore::Private *this)
{
  _DWORD *v1;
  _QWORD *v2;
  _QWORD *result;

  v1 = (_DWORD *)operator new();
  *v1 = 0;
  v2 = (_QWORD *)operator new();
  v2[2] = 0;
  v2[1] = 0;
  *v2 = v2 + 1;
  result = (_QWORD *)operator new();
  result[2] = 0;
  result[1] = 0;
  *result = result + 1;
  return result;
}

uint64_t PCColorSpaceCache::identifyColorSpace(PCColorSpaceCache *this, CGColorSpace *a2)
{
  uint64_t v3;
  CGColorSpace *CGColorSpaceByID;
  CGColorSpace *v5;
  CGColorSpace *v6;
  CGColorSpace *v7;
  CGColorSpace *v8;
  CGColorSpace *v9;
  CGColorSpace *v10;
  CGColorSpace *v11;
  CGColorSpace *v12;
  CGColorSpace *v13;
  CGColorSpace *v14;
  CGColorSpace *v15;
  CGColorSpace *v16;
  CGColorSpace *v17;
  CGColorSpace *v18;
  CGColorSpace *v19;
  CGColorSpace *v20;
  CGColorSpace *v21;
  CGColorSpace *v22;
  CGColorSpace *v23;
  CGColorSpace *v24;
  CGColorSpace *v25;
  CGColorSpace *v26;
  CGColorSpace *v27;
  CGColorSpace *v28;
  CGColorSpace *v29;
  CGColorSpace *v30;
  CGColorSpace *v31;
  CGColorSpace *v32;
  CGColorSpace *v33;
  CGColorSpace *v34;
  CGColorSpace *v35;
  CGColorSpace *v36;
  CGColorSpace *v37;
  CGColorSpace *v38;
  CGColorSpace *v39;
  CGColorSpace *v40;
  CGColorSpace *v41;
  CGColorSpace *v42;
  CGColorSpace *v43;
  CGColorSpace *v44;
  CGColorSpace *v45;
  CGColorSpace *v46;
  CGColorSpace *v47;

  v3 = 1;
  CGColorSpaceByID = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)1);
  if (!PCColorSpaceHandle::isSameColorSpace(this, CGColorSpaceByID, v5))
  {
    v3 = 4;
    v6 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)4);
    if (!PCColorSpaceHandle::isSameColorSpace(this, v6, v7))
    {
      v3 = 10;
      v8 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0xA);
      if (!PCColorSpaceHandle::isSameColorSpace(this, v8, v9))
      {
        v3 = 9;
        v10 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)9);
        if (!PCColorSpaceHandle::isSameColorSpace(this, v10, v11))
        {
          v3 = 18;
          v12 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0x12);
          if (!PCColorSpaceHandle::isSameColorSpace(this, v12, v13))
          {
            v3 = 17;
            v14 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0x11);
            if (!PCColorSpaceHandle::isSameColorSpace(this, v14, v15))
            {
              v3 = 3;
              v16 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)3);
              if (!PCColorSpaceHandle::isSameColorSpace(this, v16, v17))
              {
                v3 = 12;
                v18 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0xC);
                if (!PCColorSpaceHandle::isSameColorSpace(this, v18, v19))
                {
                  v3 = 5;
                  v20 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)5);
                  if (!PCColorSpaceHandle::isSameColorSpace(this, v20, v21))
                  {
                    v3 = 6;
                    v22 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)6);
                    if (!PCColorSpaceHandle::isSameColorSpace(this, v22, v23))
                    {
                      v3 = 11;
                      v24 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0xB);
                      if (!PCColorSpaceHandle::isSameColorSpace(this, v24, v25))
                      {
                        v3 = 13;
                        v26 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0xD);
                        if (!PCColorSpaceHandle::isSameColorSpace(this, v26, v27))
                        {
                          v3 = 19;
                          v28 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0x13);
                          if (!PCColorSpaceHandle::isSameColorSpace(this, v28, v29))
                          {
                            v3 = 20;
                            v30 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0x14);
                            if (!PCColorSpaceHandle::isSameColorSpace(this, v30, v31))
                            {
                              v3 = 21;
                              v32 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0x15);
                              if (!PCColorSpaceHandle::isSameColorSpace(this, v32, v33))
                              {
                                v3 = 7;
                                v34 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)7);
                                if (!PCColorSpaceHandle::isSameColorSpace(this, v34, v35))
                                {
                                  v3 = 8;
                                  v36 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)8);
                                  if (!PCColorSpaceHandle::isSameColorSpace(this, v36, v37))
                                  {
                                    v3 = 14;
                                    v38 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0xE);
                                    if (!PCColorSpaceHandle::isSameColorSpace(this, v38, v39))
                                    {
                                      v3 = 2;
                                      v40 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)2);
                                      if (!PCColorSpaceHandle::isSameColorSpace(this, v40, v41))
                                      {
                                        v42 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID(0);
                                        v3 = 0;
                                        if (!PCColorSpaceHandle::isSameColorSpace(this, v42, v43))
                                        {
                                          v3 = 15;
                                          v44 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0xF);
                                          if (!PCColorSpaceHandle::isSameColorSpace(this, v44, v45))
                                          {
                                            v46 = (CGColorSpace *)PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0x10);
                                            if (PCColorSpaceHandle::isSameColorSpace(this, v46, v47))
                                              return 16;
                                            else
                                              return 0xFFFFFFFFLL;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v3;
}

uint64_t PCColorSpaceCache::cgRec709Linear(PCColorSpaceCache *this)
{
  return PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)1);
}

uint64_t PCColorSpaceCache::cgRec709(PCColorSpaceCache *this)
{
  return PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)4);
}

uint64_t PCColorSpaceCache::cgRec2020Linear(PCColorSpaceCache *this)
{
  return PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0xA);
}

uint64_t PCColorSpaceCache::cgsRGB(PCColorSpaceCache *this)
{
  return PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)3);
}

uint64_t PCColorSpaceCache::cgGenericRGB(PCColorSpaceCache *this)
{
  return PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)2);
}

uint64_t PCColorSpaceCache::cgLinearGray(PCColorSpaceCache *this)
{
  return PCColorSpaceCache::getCGColorSpaceByID((CGColorSpace **)0xF);
}

uint64_t PCColorSpaceCache::intToColorSpaceID(uint64_t result, unsigned int a2)
{
  if ((result - 22) >= 0xFFFFFFE9)
    return result;
  else
    return a2;
}

uint64_t PCColorSpaceCache::getCGColorSpaceByID(CGColorSpace **a1)
{
  os_unfair_lock_s *v2;
  uint64_t CGColorSpace;
  CGColorSpace *v5[2];

  PCInit();
  if ((_DWORD)a1 == -1)
    return 0;
  CGColorSpace = PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)v5);
  PCCFRef<CGColorSpace *>::~PCCFRef(v5);
  if (v2)
    PCSpinLock::unlock(v2);
  return CGColorSpace;
}

void sub_1B298B0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, os_unfair_lock_s *a10)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a10);
  _Unwind_Resume(a1);
}

CGColorSpace **`anonymous namespace'::lookUpColorSpace@<X0>(CGColorSpace **result@<X0>, CGColorSpace **a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t *v8;
  CFStringRef *v9;
  int v10;
  uint64_t *v11;
  CGColorSpace *v12;
  CGColorSpace *v13;
  CGColorSpace *v14;
  CGColorSpace *v15;
  uint64_t **v16;
  CGColorSpace *v17;
  CGColorSpace *v18;
  _BYTE v19[16];
  int v20;
  CGColorSpace *v21[28];

  v21[27] = *(CGColorSpace **)MEMORY[0x1E0C80C00];
  if ((_DWORD)result == -1)
  {
    *a2 = 0;
  }
  else
  {
    v3 = (int)result;
    if (!v4)
      goto LABEL_12;
    do
    {
      v6 = *(_DWORD *)(v4 + 32);
      v7 = v6 < (int)result;
      if (v6 >= (int)result)
        v8 = (uint64_t *)v4;
      else
        v8 = (uint64_t *)(v4 + 8);
      if (!v7)
        v5 = v4;
      v4 = *v8;
    }
    while (*v8);
    {
      v12 = *(CGColorSpace **)(v5 + 40);
      *a2 = v12;
      if (v12)
        PCCFRefTraits<CGColorSpace *>::retain(v12);
    }
    else
    {
LABEL_12:
      *a2 = 0;
    }
    result = (CGColorSpace **)operator==(a2);
    if ((_DWORD)result)
    {
      v9 = (CFStringRef *)MEMORY[0x1E0C9D8F0];
      v10 = 6;
      v11 = (uint64_t *)&kPCNCLC_Rec709Linear;
      switch(v3)
      {
        case 1:
          goto LABEL_39;
        case 3:
          v11 = (uint64_t *)&kPCNCLC_sRGB;
          goto LABEL_39;
        case 4:
          v11 = &kPCNCLC_Rec709;
          goto LABEL_39;
        case 5:
          goto LABEL_30;
        case 6:
          v10 = 5;
LABEL_30:
          PCMakeColorSpaceFromNCLC(v10, 1, 6, &v18, 0.0);
          break;
        case 7:
          goto LABEL_25;
        case 8:
          PCICCTransferFunctionParametric0::PCICCTransferFunctionParametric0((PCICCTransferFunctionParametric0 *)v19, 1.961);
          PCMakeDisplayRGBProfile((float *)&kPCChromaticities_ACEScg, (uint64_t)v19, (PCICCProfile *)&v20);
          PCMakeColorSpaceFromProfile((const PCICCProfile *)&v20, &v18);
          PCICCProfile::~PCICCProfile((PCICCProfile *)&v20);
          PCICCTransferFunctionParametric0::~PCICCTransferFunctionParametric0((PCICCTransferFunctionParametric0 *)v19);
          break;
        case 9:
          v11 = &kPCNCLC_Rec2020;
          goto LABEL_39;
        case 10:
          v11 = &kPCNCLC_Rec2020Linear;
          goto LABEL_39;
        case 11:
          v11 = (uint64_t *)&kPCNCLC_DCI_P3;
          goto LABEL_39;
        case 12:
          v11 = (uint64_t *)&kPCNCLC_P3_D65;
          goto LABEL_39;
        case 13:
          v11 = (uint64_t *)&kPCNCLC_P3_D65Linear;
          goto LABEL_39;
        case 14:
          v9 = (CFStringRef *)MEMORY[0x1E0C9D8F8];
LABEL_25:
          PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)&v18, *v9);
          break;
        case 15:
          PCMakeDisplayGrayProfile(0.3127, 0.329, 1.0, (PCICCProfile *)&v20);
          PCMakeColorSpaceFromProfile((const PCICCProfile *)&v20, &v18);
          goto LABEL_35;
        case 16:
          PCMakeDisplayGrayProfile(0.3127, 0.329, 2.2, (PCICCProfile *)&v20);
          PCMakeColorSpaceFromProfile((const PCICCProfile *)&v20, &v18);
LABEL_35:
          PCICCProfile::~PCICCProfile((PCICCProfile *)&v20);
          break;
        case 17:
          v11 = (uint64_t *)&kPCNCLC_Rec2020HLG;
          goto LABEL_39;
        case 18:
          v11 = (uint64_t *)&kPCNCLC_Rec2020PQ;
          goto LABEL_39;
        case 19:
          v11 = (uint64_t *)&kPCNCLC_P3_D65PQ;
          goto LABEL_39;
        case 20:
          v11 = (uint64_t *)&kPCNCLC_P3_D65HLG;
          goto LABEL_39;
        case 21:
          v11 = (uint64_t *)&kPCNCLC_DCI_P3PQ;
LABEL_39:
          v13 = PCGetNCLCColorSpace((unsigned int *)v11);
          PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)&v18, v13);
          break;
        default:
          break;
      }
      v14 = *a2;
      v15 = v18;
      if (*a2 && v14 != v18)
      {
        PCCFRefTraits<CGColorSpace *>::release(v14);
        v15 = v18;
      }
      *a2 = v15;
      v18 = 0;
      PCCFRef<CGColorSpace *>::~PCCFRef(&v18);
      v20 = v3;
      v17 = *a2;
      v21[0] = v17;
      if (v17)
        PCCFRefTraits<CGColorSpace *>::retain(v17);
      std::__tree<std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>,std::__map_value_compare<PCColorSpaceCache::ID,std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>,std::less<PCColorSpaceCache::ID>,true>,std::allocator<std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>>>::__emplace_unique_key_args<PCColorSpaceCache::ID,std::pair<PCColorSpaceCache::ID const,PCColorSpaceHandle>>(v16, &v20, (uint64_t)&v20);
      return PCCFRef<CGColorSpace *>::~PCCFRef(v21);
    }
  }
  return result;
}

void sub_1B298B418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  CGColorSpace **v4;
  va_list va;

  va_start(va, a4);
  PCICCProfile::~PCICCProfile((PCICCProfile *)va);
  PCCFRef<CGColorSpace *>::~PCCFRef(v4);
  _Unwind_Resume(a1);
}

void PCColorSpaceCache::getColorSpaceByID(CGColorSpace **a1@<X0>, CGColorSpace **a2@<X8>)
{
  os_unfair_lock_s *v4;

  if (v4)
    PCSpinLock::unlock(v4);
}

void sub_1B298B4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void PCColorSpaceCache::rec709Linear(CGColorSpace **a1@<X8>)
{
  PCColorSpaceCache::getColorSpaceByID((CGColorSpace **)1, a1);
}

void PCColorSpaceCache::sRGB(CGColorSpace **a1@<X8>)
{
  PCColorSpaceCache::getColorSpaceByID((CGColorSpace **)3, a1);
}

void PCColorSpaceCache::linearGray(CGColorSpace **a1@<X8>)
{
  PCColorSpaceCache::getColorSpaceByID((CGColorSpace **)0xF, a1);
}

void PCColorSpaceCache::gamma22Gray(CGColorSpace **a1@<X8>)
{
  PCColorSpaceCache::getColorSpaceByID((CGColorSpace **)0x10, a1);
}

void PCGetCachedExtendedRangeColorSpace(CGColorSpaceRef *a1@<X0>, CGColorSpace **a2@<X8>)
{
  CGColorSpace *v4;
  int v5;
  CGColorSpace *v6;
  CGColorSpace *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  unsigned __int8 v10;
  PCMutex *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  CGColorSpace *v15;
  uint64_t v16;
  CGColorSpace *v17;
  CGColorSpace *v18;
  _QWORD *v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CGColorSpace *v26;
  CGColorSpaceRef v27;
  uint64_t *v28;
  CGColorSpace *v29;
  uint64_t **v30;
  uint64_t *v31;
  CFHashCode v32;
  CFHashCode v33;
  CFTypeRef v34;
  BOOL v35;
  _BOOL4 v36;
  CFHashCode v37;
  CFHashCode v38;
  _BOOL4 v39;
  _QWORD *v40;
  CGColorSpace *v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t **v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t **v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  PCMutex *v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  CFTypeRef cf;
  CGColorSpaceRef space;
  __int128 v70;
  uint64_t v71;
  CGColorSpace *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[2];
  char v77;

  if (CGColorSpaceUsesExtendedRange(*a1))
  {
    v4 = *a1;
    *a2 = *a1;
    if (v4)
      PCCFRefTraits<CGColorSpace *>::retain(v4);
    return;
  }
  v66 = PCGetNCLCCodeForColorSpace(*a1);
  v67 = v5;
  cf = (CFTypeRef)0x200000002;
  LODWORD(space) = 2;
  if (operator!=(&v66, &cf))
  {
    v6 = PCGetNCLCColorSpace((unsigned int *)&v66, 1);
    v7 = v6;
    if (v6)
      PCCFRefTraits<CGColorSpace *>::retain(v6);
    *a2 = v7;
    return;
  }
  {
    v62 = (_QWORD *)operator new();
    v63 = operator new();
    *(_QWORD *)v63 = 0;
    *(_QWORD *)(v63 + 8) = 0;
    *(_QWORD *)(v63 + 32) = 0;
    *(_QWORD *)(v63 + 40) = 0;
    *(_QWORD *)(v63 + 24) = v63 + 32;
    *(_OWORD *)(v63 + 48) = 0u;
    *(_OWORD *)(v63 + 64) = 0u;
    *(_QWORD *)(v63 + 80) = 0;
    *(_OWORD *)(v63 + 88) = xmmword_1B30588D0;
    *(_QWORD *)(v63 + 104) = 0;
    *v62 = v63;
    getExtendedColorSpaceCache(void)::cache = (uint64_t)v62;
  }
  v9 = (_QWORD *)getExtendedColorSpaceCache(void)::cache;
  {
    v64 = (PCMutex *)operator new();
    PCMutex::PCMutex(v64);
    getExtendedColorSpaceLock(void)::mutex = (uint64_t)v64;
  }
  v11 = (PCMutex *)getExtendedColorSpaceLock(void)::mutex;
  v65 = getExtendedColorSpaceLock(void)::mutex;
  PCMutex::lock((PCMutex *)getExtendedColorSpaceLock(void)::mutex);
  v12 = (_QWORD *)*v9;
  v14 = v13;
  cf = v13;
  if (v12 + 4 == v13)
  {
    *a2 = 0;
  }
  else
  {
    v15 = (CGColorSpace *)v13[5];
    *a2 = v15;
    if (v15)
      PCCFRefTraits<CGColorSpace *>::retain(v15);
    v16 = v12[9] + 1;
    v12[9] = v16;
    v14[7] = v16;
    if (*a2)
    {
LABEL_22:
      if (!v11)
        return;
      goto LABEL_73;
    }
  }
  PCCreateExtendedColorSpace(a1, (CGColorSpaceRef *)&cf);
  v17 = *a2;
  v18 = (CGColorSpace *)cf;
  if (*a2 && v17 != cf)
  {
    PCCFRefTraits<CGColorSpace *>::release(v17);
    v18 = (CGColorSpace *)cf;
  }
  *a2 = v18;
  cf = 0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&cf);
  v19 = (_QWORD *)*v9;
  v20 = (_QWORD **)(*v9 + 24);
  v22 = v21;
  v75 = v21;
  if (v19 + 4 != (_QWORD *)v21)
  {
    PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)(v21 + 40), a2);
    v23 = v19[9] + 1;
    v19[9] = v23;
    *(_QWORD *)(v22 + 56) = v23;
    v24 = *(_QWORD *)(v22 + 48);
    if (v24)
    {
      v19[10] -= v24;
      *(_QWORD *)(v22 + 48) = 0;
    }
    goto LABEL_22;
  }
  v25 = v19[9] + 1;
  v19[9] = v25;
  v26 = *a2;
  v72 = v26;
  if (v26)
    PCCFRefTraits<CGColorSpace *>::retain(v26);
  *(_QWORD *)&v73 = 0;
  *((_QWORD *)&v73 + 1) = v25;
  v74 = 0;
  v27 = *a1;
  cf = v27;
  if (v27)
  {
    PCCFRefTraits<CGColorSpace *>::retain(v27);
    v26 = v72;
  }
  space = v26;
  if (v26)
    PCCFRefTraits<CGColorSpace *>::retain(v26);
  v70 = v73;
  v71 = v74;
  v28 = *(uint64_t **)v22;
  v29 = (CGColorSpace *)cf;
  v30 = (uint64_t **)v22;
  if (!*(_QWORD *)v22)
  {
    v31 = (uint64_t *)v22;
LABEL_42:
    v40 = operator new(0x48uLL);
    v76[0] = v40;
    v76[1] = v22;
    v77 = 0;
    v40[4] = v29;
    if (v29)
      PCCFRefTraits<CGColorSpace *>::retain(v29);
    v41 = space;
    v40[5] = space;
    if (v41)
      PCCFRefTraits<CGColorSpace *>::retain(v41);
    v40[8] = v71;
    *((_OWORD *)v40 + 3) = v70;
    v77 = 1;
    v42 = (uint64_t *)v76[0];
    *(_QWORD *)v76[0] = 0;
    v42[1] = 0;
    v42[2] = (uint64_t)v31;
    *v30 = v42;
    v43 = (_QWORD *)**v20;
    if (v43)
    {
      *v20 = v43;
      v42 = *v30;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)v22, v42);
    ++v19[5];
    v44 = (uint64_t *)v76[0];
    v76[0] = 0;
    goto LABEL_49;
  }
  while (1)
  {
    while (1)
    {
      v31 = v28;
      v32 = CFHash(v29);
      v33 = CFHash((CFTypeRef)v31[4]);
      v29 = (CGColorSpace *)cf;
      v34 = (CFTypeRef)v31[4];
      v35 = v32 == v33;
      v36 = v32 < v33;
      if (v35)
        v36 = cf < v34;
      if (!v36)
        break;
      v28 = (uint64_t *)*v31;
      v30 = (uint64_t **)v31;
      if (!*v31)
        goto LABEL_42;
    }
    v37 = CFHash(v34);
    v38 = CFHash(cf);
    v29 = (CGColorSpace *)cf;
    v39 = v31[4] < (unint64_t)cf;
    if (v37 != v38)
      v39 = v37 < v38;
    if (!v39)
      break;
    v30 = (uint64_t **)(v31 + 1);
    v28 = (uint64_t *)v31[1];
    if (!v28)
      goto LABEL_42;
  }
  v44 = *v30;
  if (!*v30)
    goto LABEL_42;
LABEL_49:
  PCCFRef<CGColorSpace *>::~PCCFRef(&space);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&cf);
  v46 = (_QWORD *)v19[6];
  v45 = (uint64_t **)v19[7];
  v47 = v45 - (uint64_t **)v46;
  v44[8] = v47;
  v48 = v19[8];
  if ((unint64_t)v45 >= v48)
  {
    v50 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v51 = v48 - (_QWORD)v46;
    if (v51 >> 2 > v50)
      v50 = v51 >> 2;
    if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
      v52 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v52 = v50;
    if (v52)
    {
      if (v52 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v53 = (char *)operator new(8 * v52);
    }
    else
    {
      v53 = 0;
    }
    v54 = (uint64_t **)&v53[8 * v47];
    *v54 = v44;
    v49 = v54 + 1;
    if (v45 != v46)
    {
      do
      {
        v55 = *--v45;
        *--v54 = v55;
      }
      while (v45 != v46);
      v45 = (uint64_t **)v19[6];
    }
    v19[6] = v54;
    v19[7] = v49;
    v19[8] = &v53[8 * v52];
    if (v45)
      operator delete(v45);
  }
  else
  {
    *v45 = v44;
    v49 = v45 + 1;
  }
  v19[7] = v49;
  v56 = v44[8];
  if (v56)
  {
    v57 = v19[6];
    v58 = *(_QWORD *)(v57 + 8 * v56);
    do
    {
      v59 = v56 - 1;
      v60 = (v56 - 1) >> 1;
      v61 = *(_QWORD *)(v57 + 8 * v60);
      if (*(_QWORD *)(v61 + 56) <= *(_QWORD *)(v58 + 56))
        break;
      *(_QWORD *)(v57 + 8 * v56) = v61;
      *(_QWORD *)(v57 + 8 * v60) = v58;
      v57 = v19[6];
      *(_QWORD *)(*(_QWORD *)(v57 + 8 * v56) + 64) = v56;
      v58 = *(_QWORD *)(v57 + 8 * v60);
      *(_QWORD *)(v58 + 64) = v60;
      v56 = (v56 - 1) >> 1;
    }
    while (v59 > 1);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v72);
  v11 = (PCMutex *)v65;
  if (v65)
LABEL_73:
    PCMutex::unlock(v11);
}

void sub_1B298BB24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4076DFA842);
  _Unwind_Resume(a1);
}

uint64_t PCLockSentry<PCMutex>::~PCLockSentry(uint64_t a1)
{
  PCMutex *v2;

  v2 = *(PCMutex **)a1;
  if (v2 && *(_BYTE *)(a1 + 8))
  {
    PCMutex::unlock(v2);
    *(_BYTE *)(a1 + 8) = 0;
  }
  return a1;
}

CGColorSpace **PCGetCachedExtendedRangeColorSpace@<X0>(CGColorSpaceRef space@<X0>, CGColorSpace **a2@<X8>)
{
  CGColorSpace *v5;

  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v5 = space;
  PCGetCachedExtendedRangeColorSpace(&v5, a2);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v5);
}

void sub_1B298BCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::makeDeviceRGBColorSpace(PCColorSpaceHandle *a1@<X8>)
{
  CGColorSpace *DeviceRGB;

  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  PCColorSpaceHandle::PCColorSpaceHandle(a1, DeviceRGB);
  CGColorSpaceRelease(DeviceRGB);
}

void sub_1B298BCEC(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>,std::__map_value_compare<PCColorSpaceCache::ID,std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>,std::less<PCColorSpaceCache::ID>,true>,std::allocator<std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>>>::__emplace_unique_key_args<PCColorSpaceCache::ID,std::pair<PCColorSpaceCache::ID const,PCColorSpaceHandle>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  int v9;
  int v10;
  _DWORD *v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = *((_DWORD *)v5 + 8);
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = operator new(0x30uLL);
    v13[1] = v6;
    v11[8] = *(_DWORD *)a3;
    *((_QWORD *)v11 + 5) = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    v14 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v11);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

void std::unique_ptr<std::__tree_node<std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCColorSpaceCache::ID,PCColorSpaceHandle>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  CGColorSpace **v2;

  v2 = *(CGColorSpace ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      PCCFRef<CGColorSpace *>::~PCCFRef(v2 + 5);
    operator delete(v2);
  }
}

uint64_t std::map<PCCFRef<CGColorSpace *>,PCCacheImpl<PCCFRef<CGColorSpace *>,PCCFRef<CGColorSpace *>,PCNoLock,`anonymous namespace'::CompareColorSpaceRef>::Data,`anonymous namespace'::CompareColorSpaceRef,std::allocator<std::pair<PCCFRef<CGColorSpace *> const,PCCacheImpl<PCCFRef<CGColorSpace *>,PCCFRef<CGColorSpace *>,PCNoLock,`anonymous namespace'::CompareColorSpaceRef>::Data>>>::find[abi:ne180100](uint64_t a1, CFTypeRef *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  CFHashCode v6;
  CFHashCode v7;
  _BOOL4 v8;
  BOOL v9;
  uint64_t *v10;
  CFHashCode v11;
  CFHashCode v12;
  _BOOL4 v13;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = CFHash(*(CFTypeRef *)(v3 + 32));
    v7 = CFHash(*a2);
    v9 = v6 == v7;
    v8 = v6 < v7;
    if (v9)
      v8 = *(_QWORD *)(v3 + 32) < (unint64_t)*a2;
    v9 = !v8;
    if (v8)
      v10 = (uint64_t *)(v3 + 8);
    else
      v10 = (uint64_t *)v3;
    if (v9)
      v5 = v3;
    v3 = *v10;
  }
  while (*v10);
  if (v5 == v2)
    return v2;
  v11 = CFHash(*a2);
  v12 = CFHash(*(CFTypeRef *)(v5 + 32));
  v13 = (unint64_t)*a2 < *(_QWORD *)(v5 + 32);
  if (v11 != v12)
    v13 = v11 < v12;
  if (v13)
    return v2;
  return v5;
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<PCCFRef<CGColorSpace *>,PCCacheImpl<PCCFRef<CGColorSpace *>,PCCFRef<CGColorSpace *>,PCNoLock,`anonymous namespace'::CompareColorSpaceRef>::Data>,std::__tree_node<std::__value_type<PCCFRef<CGColorSpace *>,PCCacheImpl<PCCFRef<CGColorSpace *>,PCCFRef<CGColorSpace *>,PCNoLock,`anonymous namespace'::CompareColorSpaceRef>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *result;
  v3 = result[1] - *result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 64);
  v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      v17 = *(_QWORD *)(v2 + 8 * v4);
      do
      {
        v18 = v4 - 1;
        v19 = (v4 - 1) >> 1;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        if (*(_QWORD *)(v20 + 56) <= *(_QWORD *)(v17 + 56))
          break;
        *(_QWORD *)(v2 + 8 * v4) = v20;
        *(_QWORD *)(v2 + 8 * v19) = v17;
        v2 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 64) = v4;
        v17 = *(_QWORD *)(v2 + 8 * v19);
        *(_QWORD *)(v17 + 64) = v19;
        v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  v6 = 0;
  v7 = v3 >> 3;
  v8 = 2 * v4;
  v9 = *(_QWORD *)(v2 + 8 * v4);
  while (1)
  {
    v10 = v8 + 2;
    v11 = *(_QWORD *)(v9 + 56);
    v12 = v10 < v7 && v11 > *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 56);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 56);
    if (v11 <= v13 && !v12)
      break;
    v15 = v11 > v13 && v12;
    if (v12)
      v16 = v10;
    else
      v16 = v5;
    if (v15)
    {
      if (v13 <= *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 56))
        v16 = v5;
      else
        v16 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4) = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v2 + 8 * v16) = v9;
    v2 = *result;
    *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 64) = v4;
    v9 = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v9 + 64) = v16;
    v8 = 2 * v16;
    v6 = 1;
    v5 = (2 * v16) | 1;
    v4 = v16;
    if (v5 >= v7)
      return result;
  }
  if ((v6 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 64);
    goto LABEL_24;
  }
  return result;
}

void PCCacheImpl<PCCFRef<CGColorSpace *>,PCCFRef<CGColorSpace *>,PCNoLock,`anonymous namespace'::CompareColorSpaceRef>::evictIfNecessary(_QWORD *a1)
{
  char **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;

  if (!a1[13])
  {
    v2 = (char **)(a1 + 6);
    while (a1[10] > a1[11] || a1[5] > a1[12])
    {
      v3 = (uint64_t *)a1[6];
      v4 = (uint64_t *)a1[7];
      if (v3 == v4)
        break;
      v5 = *v3;
      v6 = *(_QWORD *)(*v3 + 64);
      v7 = v4 - v3 - 1;
      if (v6 == v7)
      {
      }
      else
      {
        v3[v6] = v3[v7];
        *(_QWORD *)(*(_QWORD *)&(*v2)[8 * v6] + 64) = v6;
      }
      a1[10] -= *(_QWORD *)(v5 + 48);
      v8 = *(_QWORD **)(v5 + 8);
      v9 = (_QWORD *)v5;
      if (v8)
      {
        do
        {
          v10 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v9[2];
          v11 = *v10 == (_QWORD)v9;
          v9 = v10;
        }
        while (!v11);
      }
      if (a1[3] == v5)
        a1[3] = v10;
      v12 = (uint64_t *)a1[4];
      --a1[5];
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v12, (uint64_t *)v5);
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v5 + 40));
      PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v5 + 32));
      operator delete((void *)v5);
    }
  }
}

uint64_t std::unique_ptr<std::__tree_node<std::__value_type<PCCFRef<CGColorSpace *>,PCCacheImpl<PCCFRef<CGColorSpace *>,PCCFRef<CGColorSpace *>,PCNoLock,`anonymous namespace'::CompareColorSpaceRef>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<PCCFRef<CGColorSpace *>,PCCacheImpl<PCCFRef<CGColorSpace *>,PCCFRef<CGColorSpace *>,PCNoLock,`anonymous namespace'::CompareColorSpaceRef>::Data>,void *>>>>::~unique_ptr[abi:ne180100](uint64_t a1)
{
  CGColorSpace **v2;

  v2 = *(CGColorSpace ***)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      PCCFRef<CGColorSpace *>::~PCCFRef(v2 + 5);
      PCCFRef<CGColorSpace *>::~PCCFRef(v2 + 4);
    }
    operator delete(v2);
  }
  return a1;
}

void std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<PCCFRef<CGColorSpace *>,PCCacheImpl<PCCFRef<CGColorSpace *>,PCCFRef<CGColorSpace *>,PCNoLock,`anonymous namespace'::CompareColorSpaceRef>::Data>,std::__tree_node<std::__value_type<PCCFRef<CGColorSpace *>,PCCacheImpl<PCCFRef<CGColorSpace *>,PCCFRef<CGColorSpace *>,PCNoLock,`anonymous namespace'::CompareColorSpaceRef>::Data>,void *> *,long>>>::resize(char **a1, unint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;

  v4 = *a1;
  v3 = a1[1];
  v5 = (v3 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5)
      return;
    v16 = &v4[8 * a2];
    goto LABEL_18;
  }
  v6 = a2 - v5;
  v7 = a1[2];
  if (a2 - v5 <= (v7 - v3) >> 3)
  {
    bzero(a1[1], 8 * v6);
    v16 = &v3[8 * v6];
LABEL_18:
    a1[1] = v16;
    return;
  }
  if (a2 >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v8 = v7 - v4;
  v9 = v8 >> 2;
  if (v8 >> 2 <= a2)
    v9 = a2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  if (v10 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v11 = (char *)operator new(8 * v10);
  v12 = &v11[8 * v5];
  v13 = &v11[8 * v10];
  bzero(v12, 8 * v6);
  v14 = &v12[8 * v6];
  if (v3 != v4)
  {
    do
    {
      v15 = *((_QWORD *)v3 - 1);
      v3 -= 8;
      *((_QWORD *)v12 - 1) = v15;
      v12 -= 8;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *a1 = v12;
  a1[1] = v14;
  a1[2] = v13;
  if (v3)
    operator delete(v3);
}

void PCICCProfile::PCICCProfile(PCICCProfile *this)
{
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_BYTE *)this + 176) = 1;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCICCProfile *)((char *)this + 208));
  PCICCProfile::setUpHeader(this, 0x7DFu, 9u, 0xFu, 0, 0, 0);
}

void sub_1B298C340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void *v14;

  v12 = v11;
  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v10 + 192) = v14;
    operator delete(v14);
  }
  a10 = (void **)(v10 + 152);
  std::vector<PCICCProfile::Tag>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

double PCICCProfile::setUpHeader(PCICCProfile *this, unsigned __int16 a2, unsigned __int16 a3, unsigned __int16 a4, unsigned __int16 a5, unsigned __int16 a6, unsigned __int16 a7)
{
  double result;

  ProCore::Private::setUInt32Number((_DWORD *)this + 1, (unsigned __int8 *)0x6170706C);
  ProCore::Private::setUInt32Number((_DWORD *)this + 2, (unsigned __int8 *)0x4030000);
  ProCore::Private::setUInt32Number((_DWORD *)this + 3, (unsigned __int8 *)0x6D6E7472);
  ProCore::Private::setUInt32Number((_DWORD *)this + 4, (unsigned __int8 *)0x52474220);
  ProCore::Private::setUInt32Number((_DWORD *)this + 5, (unsigned __int8 *)0x58595A20);
  ProCore::Private::setUInt16Number((_WORD *)this + 12, (unsigned __int8 *)a2);
  ProCore::Private::setUInt16Number((_WORD *)this + 13, (unsigned __int8 *)a3);
  ProCore::Private::setUInt16Number((_WORD *)this + 14, (unsigned __int8 *)a4);
  ProCore::Private::setUInt16Number((_WORD *)this + 15, (unsigned __int8 *)a5);
  ProCore::Private::setUInt16Number((_WORD *)this + 16, (unsigned __int8 *)a6);
  ProCore::Private::setUInt16Number((_WORD *)this + 17, (unsigned __int8 *)a7);
  ProCore::Private::setUInt32Number((_DWORD *)this + 9, (unsigned __int8 *)0x61637370);
  ProCore::Private::setUInt32Number((_DWORD *)this + 10, (unsigned __int8 *)0x4150504C);
  ProCore::Private::setUInt32Number((_DWORD *)this + 11, 0);
  ProCore::Private::setUInt32Number((_DWORD *)this + 12, 0);
  ProCore::Private::setUInt32Number((_DWORD *)this + 13, 0);
  *((_QWORD *)this + 7) = 0;
  ProCore::Private::setUInt32Number((_DWORD *)this + 16, 0);
  ProCore::Private::setUInt32Number((_DWORD *)this + 17, (unsigned __int8 *)0xF6D6);
  ProCore::Private::setUInt32Number((_DWORD *)this + 18, (unsigned __int8 *)0x10000);
  ProCore::Private::setUInt32Number((_DWORD *)this + 19, (unsigned __int8 *)0xD32D);
  ProCore::Private::setUInt32Number((_DWORD *)this + 20, (unsigned __int8 *)0x4150504C);
  result = 0.0;
  *((_OWORD *)this + 7) = 0u;
  *(_OWORD *)((char *)this + 100) = 0u;
  *(_OWORD *)((char *)this + 84) = 0u;
  return result;
}

void PCICCProfile::PCICCProfile(PCICCProfile *this, CGColorSpace *a2)
{
  const __CFData *v4;
  const unsigned __int8 *BytePtr;
  CFIndex Length;
  PCException *exception;
  PCString v8;
  PCString v9;
  CFDataRef theData;

  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_BYTE *)this + 176) = 1;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCICCProfile *)((char *)this + 208));
  v4 = CGColorSpaceCopyICCData(a2);
  theData = v4;
  if (!v4)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v9, "Color space without an ICC profile given to PCICCProfile");
    PCString::PCString(&v8, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCICCProfile.cpp");
    PCException::PCException(exception, &v9, &v8, 158);
  }
  BytePtr = CFDataGetBytePtr(v4);
  Length = CFDataGetLength(theData);
  PCICCProfile::parseProfileData(this, BytePtr, Length);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)&theData);
}

void sub_1B298C5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, PCString a11, uint64_t a12)
{
  uint64_t v12;
  void *v13;
  void **v14;
  int v15;
  void *v17;

  PCString::~PCString(&a10);
  PCString::~PCString(&a11);
  if (v15)
    __cxa_free_exception(v13);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)&a12);
  v17 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 192) = v17;
    operator delete(v17);
  }
  a12 = v12 + 152;
  std::vector<PCICCProfile::Tag>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void PCICCProfile::parseProfileData(PCICCProfile *this, const unsigned __int8 *a2, size_t a3)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int Int32Number;
  const unsigned __int8 *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  const unsigned __int8 *v19;
  int v20;
  const unsigned __int8 *v21;
  unsigned int v22;
  size_t v23;
  void *FactoryForSerialization;
  char *v25;
  size_t v26;
  int Size;
  int v28;
  int v29;
  int v30;
  PCException *v31;
  PCException *v32;
  PCException *exception;
  PCException *v34;
  PCException *v35;
  PCString v36;
  void *__p[2];
  void *v38;
  uint64_t v39;
  PCString v40;

  if (!a2)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString((PCString *)__p, "Corrupt ColorSync profile given to PCICCProfile");
    PCString::PCString(&v40, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCICCProfile.cpp");
    PCException::PCException(exception, (const PCString *)__p, &v40, 193);
  }
  if (a3 <= 0x80)
  {
    v34 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString((PCString *)__p, "Corrupt ICC profile given to PCICCProfile");
    PCString::PCString(&v40, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCICCProfile.cpp");
    PCException::PCException(v34, (const PCString *)__p, &v40, 199);
  }
  v6 = *(_OWORD *)a2;
  v7 = *((_OWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = v8;
  *(_OWORD *)this = v6;
  *((_OWORD *)this + 1) = v7;
  v9 = *((_OWORD *)a2 + 4);
  v10 = *((_OWORD *)a2 + 5);
  v11 = *((_OWORD *)a2 + 7);
  *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 7) = v11;
  *((_OWORD *)this + 4) = v9;
  *((_OWORD *)this + 5) = v10;
  Int32Number = ProCore::Private::getInt32Number((ProCore::Private *)(a2 + 128), a2);
  if ((12 * Int32Number + 132) >= a3)
  {
    v35 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString((PCString *)__p, "Corrupt ICC profile given to PCICCProfile");
    PCString::PCString(&v40, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCICCProfile.cpp");
    PCException::PCException(v35, (const PCString *)__p, &v40, 211);
  }
  v14 = Int32Number;
  if (Int32Number)
  {
    v15 = 132;
    do
    {
      v16 = v15;
      if (v15 >= a3)
      {
        v32 = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString((PCString *)__p, "Corrupt ICC profile given to PCICCProfile");
        PCString::PCString(&v40, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCICCProfile.cpp");
        PCException::PCException(v32, (const PCString *)__p, &v40, 217);
      }
      LODWORD(__p[0]) = 0;
      v38 = 0;
      v39 = 0;
      v17 = (unsigned __int8 *)&a2[v15];
      __p[1] = 0;
      v18 = (unsigned __int8 *)ProCore::Private::getInt32Number((ProCore::Private *)v17, v13);
      ProCore::Private::setUInt32NumberLE(__p, v18);
      v20 = ProCore::Private::getInt32Number((ProCore::Private *)(v17 + 4), v19);
      v22 = ProCore::Private::getInt32Number((ProCore::Private *)(v17 + 8), v21);
      if (v22 + v20 > a3)
      {
        v31 = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString(&v40, "Corrupt ICC profile given to PCICCProfile");
        PCString::PCString(&v36, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCICCProfile.cpp");
        PCException::PCException(v31, &v40, &v36, 228);
      }
      v23 = v22;
      PCICCTag::resize((PCICCTag *)__p, v22);
      FactoryForSerialization = (void *)OZFactoryBase::getFactoryForSerialization((uint64_t)__p);
      memcpy(FactoryForSerialization, &a2[v20], v23);
      PCICCProfile::addTag(this, (const PCICCTag *)__p);
      if (__p[1])
      {
        v38 = __p[1];
        operator delete(__p[1]);
      }
      v15 = v16 + 12;
      --v14;
    }
    while (v14);
  }
  v25 = (char *)*((_QWORD *)this + 23);
  v26 = *((_QWORD *)this + 24) - (_QWORD)v25;
  if (a3 <= v26)
  {
    if (a3 < v26)
      *((_QWORD *)this + 24) = &v25[a3];
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 23, a3 - v26);
    v25 = (char *)*((_QWORD *)this + 23);
  }
  memcpy(v25, a2, a3);
  Size = PVPerfStats::FrameStats::GetSize((PCICCProfile *)((char *)this + 84));
  v28 = PVPerfStats::FrameStats::GetSize((PCICCProfile *)((char *)this + 88));
  v29 = PVPerfStats::FrameStats::GetSize((PCICCProfile *)((char *)this + 92));
  v30 = PVPerfStats::FrameStats::GetSize((PCICCProfile *)((char *)this + 96));
  if (Size || v28 || v29 || v30)
  {
    PCHash128::PCHash128((PCHash128 *)__p, Size, v28, v29, v30);
    *((_OWORD *)this + 13) = *(_OWORD *)__p;
  }
  else
  {
    PCICCProfile::computeMD5(this);
  }
  *((_BYTE *)this + 176) = 0;
}

void sub_1B298CA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, void *__p, uint64_t a12, uint64_t a13, PCString a14)
{
  void *v14;
  int v15;

  PCString::~PCString(&a14);
  PCString::~PCString(&a10);
  if (v15)
    __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void PCICCProfile::addTag(PCICCProfile *this, const PCICCTag *a2)
{
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  const void *v17;
  const void *FactoryForSerialization;
  uint64_t v19;
  size_t v20;
  _QWORD *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  int Size;
  uint64_t v55;
  std::__shared_weak_count *v56;
  __int128 v57;
  __int128 v58;
  char *v59;
  char *v60;
  char *v61;

  v5 = *((_QWORD *)this + 19);
  v6 = (_DWORD *)*((_QWORD *)this + 20);
  v4 = (uint64_t *)((char *)this + 152);
  if ((_DWORD *)v5 != v6)
  {
    v7 = -v5;
    while (1)
    {
      v8 = *(_DWORD *)v5;
      if (v8 == PVPerfStats::FrameStats::GetSize(a2))
        break;
      v5 += 24;
      v7 -= 24;
      if ((_DWORD *)v5 == v6)
        goto LABEL_9;
    }
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,PCICCProfile::Tag *,PCICCProfile::Tag *,PCICCProfile::Tag *,0>((_DWORD *)(24 - v7), *((_DWORD **)this + 20), (_DWORD *)-v7);
    v10 = v9;
    v11 = *((_QWORD *)this + 20);
    if (v11 != v9)
    {
      do
      {
        v12 = v11 - 24;
        std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v11 - 16);
        v11 = v12;
      }
      while (v12 != v10);
    }
    *((_QWORD *)this + 20) = v10;
  }
LABEL_9:
  v57 = 0uLL;
  v13 = PCICCTag::size(a2);
  v14 = (uint64_t *)*((_QWORD *)this + 16);
  v15 = (uint64_t *)*((_QWORD *)this + 17);
  if (v14 != v15)
  {
    v16 = v13;
    while (1)
    {
      v17 = *(const void **)*v14;
      FactoryForSerialization = (const void *)OZFactoryBase::getFactoryForSerialization((uint64_t)a2);
      v19 = *(_QWORD *)(*v14 + 8);
      v20 = v19 - *(_QWORD *)*v14 >= v16 ? v16 : v19 - *(_QWORD *)*v14;
      if (!memcmp(v17, FactoryForSerialization, v20))
        break;
      v14 += 2;
      if (v14 == v15)
        goto LABEL_18;
    }
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v57, v14);
  }
LABEL_18:
  if (!(_QWORD)v57)
  {
    v21 = (_QWORD *)operator new();
    v22 = (const void *)OZFactoryBase::getFactoryForSerialization((uint64_t)a2);
    v23 = OZFactoryBase::getFactoryForSerialization((uint64_t)a2);
    v24 = PCICCTag::size(a2);
    *v21 = 0;
    v21[1] = 0;
    v21[2] = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(v21, v22, v23 + v24, v23 + v24 - (_QWORD)v22);
    std::shared_ptr<std::vector<unsigned char>>::shared_ptr[abi:ne180100]<std::vector<unsigned char>,void>(&v58, (uint64_t)v21);
    v25 = v58;
    v58 = 0uLL;
    v26 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
    v57 = v25;
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldaxr(p_shared_owners);
      while (__stlxr(v28 - 1, p_shared_owners));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    v29 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v30 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    std::vector<std::shared_ptr<std::vector<unsigned char>>>::push_back[abi:ne180100]((char **)this + 16, &v57);
  }
  v55 = 0;
  v56 = 0;
  Size = PVPerfStats::FrameStats::GetSize(a2);
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v55, (uint64_t *)&v57);
  v32 = *((_QWORD *)this + 21);
  v33 = *((_QWORD *)this + 20);
  if (v33 >= v32)
  {
    v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v33 - *v4) >> 3);
    v39 = v38 + 1;
    if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v40 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - *v4) >> 3);
    if (2 * v40 > v39)
      v39 = 2 * v40;
    if (v40 >= 0x555555555555555)
      v41 = 0xAAAAAAAAAAAAAAALL;
    else
      v41 = v39;
    v61 = (char *)this + 168;
    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>((uint64_t)this + 168, v41);
    v43 = &v42[24 * v38];
    *(_QWORD *)&v58 = v42;
    *((_QWORD *)&v58 + 1) = v43;
    v60 = &v42[24 * v44];
    *(_DWORD *)v43 = Size;
    *((_QWORD *)v43 + 1) = v55;
    v45 = v56;
    *((_QWORD *)v43 + 2) = v56;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v59 = v43 + 24;
    std::vector<PCICCProfile::Tag>::__swap_out_circular_buffer(v4, &v58);
    v37 = *((_QWORD *)this + 20);
    std::__split_buffer<PCICCProfile::Tag>::~__split_buffer((uint64_t)&v58);
  }
  else
  {
    *(_DWORD *)v33 = Size;
    *(_QWORD *)(v33 + 8) = v55;
    v34 = v56;
    *(_QWORD *)(v33 + 16) = v56;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = v33 + 24;
  }
  *((_QWORD *)this + 20) = v37;
  *((_BYTE *)this + 176) = 1;
  v48 = v56;
  if (v56)
  {
    v49 = (unint64_t *)&v56->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v57 + 1);
  if (*((_QWORD *)&v57 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v57 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
}

void sub_1B298CEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 PCICCProfile::computeMD5(PCICCProfile *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  int v11;

  v2 = *((_QWORD *)this + 23);
  v3 = *(_DWORD *)(v2 + 44);
  v4 = *(_DWORD *)(v2 + 64);
  *(_DWORD *)(v2 + 44) = 0;
  *(_DWORD *)(*((_QWORD *)this + 23) + 64) = 0;
  v5 = *((_QWORD *)this + 23);
  *(_QWORD *)(v5 + 92) = 0;
  *(_QWORD *)(v5 + 84) = 0;
  v8 = 0;
  v9 = xmmword_1B30588E0;
  v10 = 0;
  v11 = 0;
  PCMD5::writeBytes((PCMD5 *)&v8, *((char **)this + 23), *((_QWORD *)this + 24) - *((_QWORD *)this + 23));
  PCMD5::getHash((PCMD5 *)&v8, (PCHash128 *)&v7);
  *((_OWORD *)this + 13) = v7;
  ProCore::Private::setUInt32NumberLE((_DWORD *)this + 21, (unsigned __int8 *)*((unsigned int *)this + 52));
  ProCore::Private::setUInt32NumberLE((_DWORD *)this + 22, (unsigned __int8 *)*((unsigned int *)this + 53));
  ProCore::Private::setUInt32NumberLE((_DWORD *)this + 23, (unsigned __int8 *)*((unsigned int *)this + 54));
  ProCore::Private::setUInt32NumberLE((_DWORD *)this + 24, (unsigned __int8 *)*((unsigned int *)this + 55));
  *(_DWORD *)(*((_QWORD *)this + 23) + 44) = v3;
  *(_DWORD *)(*((_QWORD *)this + 23) + 64) = v4;
  result = *(__n128 *)((char *)this + 84);
  *(__n128 *)(*((_QWORD *)this + 23) + 84) = result;
  return result;
}

__n128 PCICCProfile::getMD5Hash@<Q0>(PCICCProfile *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  PCICCProfile::buildProfile(this);
  result = *((__n128 *)this + 13);
  *a2 = result;
  return result;
}

void PCICCProfile::buildProfile(PCICCProfile *this)
{
  _OWORD *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int *v16;
  size_t v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t **v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  size_t v35;
  size_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t **v42;
  uint64_t *v43;
  uint64_t v44;

  if (*((_BYTE *)this + 176))
  {
    v3 = (unint64_t *)((char *)this + 184);
    v2 = (_OWORD *)*((_QWORD *)this + 23);
    v4 = ((uint64_t)(*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 1) + 132;
    v5 = *((_QWORD *)this + 24) - (_QWORD)v2;
    if (v4 <= v5)
    {
      if (v4 < v5)
        *((_QWORD *)this + 24) = (char *)v2 + v4;
    }
    else
    {
      std::vector<unsigned char>::__append((unint64_t *)this + 23, v4 - v5);
      v2 = (_OWORD *)*v3;
    }
    v6 = *(_OWORD *)this;
    v7 = *((_OWORD *)this + 1);
    v8 = *((_OWORD *)this + 3);
    v2[2] = *((_OWORD *)this + 2);
    v2[3] = v8;
    *v2 = v6;
    v2[1] = v7;
    v9 = *((_OWORD *)this + 4);
    v10 = *((_OWORD *)this + 5);
    v11 = *((_OWORD *)this + 7);
    v2[6] = *((_OWORD *)this + 6);
    v2[7] = v11;
    v2[4] = v9;
    v2[5] = v10;
    ProCore::Private::setUInt32Number((_DWORD *)(*((_QWORD *)this + 23) + 128), (unsigned __int8 *)(-1431655765 * ((*((_QWORD *)this + 20) - *((_QWORD *)this + 19)) >> 3)));
    v43 = 0;
    v44 = 0;
    v42 = &v43;
    v12 = *((_QWORD *)this + 19);
    if (*((_QWORD *)this + 20) != v12)
    {
      v13 = 0;
      v14 = 0;
      v15 = 132;
      do
      {
        v16 = (unsigned int *)(v12 + 24 * v13);
        v17 = *(_QWORD *)(*((_QWORD *)v16 + 1) + 8) - **((_QWORD **)v16 + 1);
        v40 = 0;
        v41 = 0;
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](&v40, (uint64_t *)v16 + 1);
        v18 = v43;
        if (!v43)
          goto LABEL_18;
        v19 = &v43;
        do
        {
          v20 = v18;
          v21 = v19;
          v22 = v18[5];
          if (v22 >= v40)
            v19 = (uint64_t **)v18;
          else
            ++v18;
          v18 = (uint64_t *)*v18;
        }
        while (v18);
        if (v19 == &v43)
          goto LABEL_18;
        if (v22 < v40)
          v20 = (uint64_t *)v21;
        if (v40 >= v20[5])
        {
          v24 = (unsigned __int8 *)v19[4];
        }
        else
        {
LABEL_18:
          v23 = *((_QWORD *)this + 23);
          v24 = (unsigned __int8 *)(*((_QWORD *)this + 24) - v23);
          if (v24 >= &v24[v17])
          {
            if (v24 > &v24[v17])
              *((_QWORD *)this + 24) += v17;
          }
          else
          {
            std::vector<unsigned char>::__append(v3, v17);
            v23 = *v3;
          }
          memcpy(&v24[v23], **((const void ***)v16 + 1), v17);
          v25 = v43;
          v26 = &v43;
          v27 = &v43;
          v28 = v40;
          if (v43)
          {
            while (1)
            {
              while (1)
              {
                v26 = (uint64_t **)v25;
                v29 = v25[5];
                if (v40 >= v29)
                  break;
                v25 = *v26;
                v27 = v26;
                if (!*v26)
                  goto LABEL_29;
              }
              if (v29 >= v40)
                break;
              v25 = v26[1];
              if (!v25)
              {
                v27 = v26 + 1;
                goto LABEL_29;
              }
            }
          }
          else
          {
LABEL_29:
            v30 = (uint64_t *)operator new(0x38uLL);
            v31 = v30;
            v30[4] = (uint64_t)v24;
            v30[5] = v28;
            v32 = v41;
            v30[6] = (uint64_t)v41;
            if (v32)
            {
              p_shared_owners = (unint64_t *)&v32->__shared_owners_;
              do
                v34 = __ldxr(p_shared_owners);
              while (__stxr(v34 + 1, p_shared_owners));
            }
            *v30 = 0;
            v30[1] = 0;
            v30[2] = (uint64_t)v26;
            *v27 = v30;
            if (*v42)
            {
              v42 = (uint64_t **)*v42;
              v31 = *v27;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v43, v31);
            ++v44;
          }
          v35 = ((v17 + 3) & 0xFFFFFFFFFFFFFFFCLL) - v17;
          v36 = *((_QWORD *)this + 24) - *((_QWORD *)this + 23);
          if (v36 >= v36 + v35)
          {
            if (v36 > v36 + v35)
              *((_QWORD *)this + 24) += v35;
          }
          else
          {
            std::vector<unsigned char>::__append(v3, v35);
          }
        }
        ProCore::Private::setUInt32Number((_DWORD *)(*v3 + v15), (unsigned __int8 *)*v16);
        ProCore::Private::setUInt32Number((_DWORD *)(*v3 + v15 + 4), v24);
        ProCore::Private::setUInt32Number((_DWORD *)(*v3 + v15 + 8), (unsigned __int8 *)v17);
        v37 = v41;
        if (v41)
        {
          v38 = (unint64_t *)&v41->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v15 += 12;
        v12 = *((_QWORD *)this + 19);
        v13 = ++v14;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 20) - v12) >> 3) != v14);
    }
    ProCore::Private::setUInt32Number(*((_DWORD **)this + 23), (unsigned __int8 *)(*((_DWORD *)this + 48) - *((_QWORD *)this + 23)));
    PCICCProfile::computeMD5(this);
    *((_BYTE *)this + 176) = 0;
  }
}

void sub_1B298D3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15)
{
  _Unwind_Resume(a1);
}

void PCICCProfile::findTagBySignature(PCICCProfile *this@<X0>, int a2@<W1>, PCICCTag *a3@<X8>)
{
  uint64_t i;

  for (i = *((_QWORD *)this + 19); ; i += 24)
  {
    if (i == *((_QWORD *)this + 20))
    {
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      return;
    }
    if (*(_DWORD *)i == a2)
      break;
  }
  PCICCTag::PCICCTag(a3, a2, **(const unsigned __int8 ***)(i + 8), *(const unsigned __int8 **)(*(_QWORD *)(i + 8) + 8));
}

uint64_t std::vector<std::shared_ptr<std::vector<unsigned char>>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<TXTextObject>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t PCICCProfile::getSize(ProCore::Private **this)
{
  const unsigned __int8 *v2;

  PCICCProfile::buildProfile((PCICCProfile *)this);
  return ProCore::Private::getInt32Number(this[23], v2);
}

uint64_t PCICCProfile::getProfileData(PCICCProfile *this)
{
  PCICCProfile::buildProfile(this);
  return *((_QWORD *)this + 23);
}

_BYTE *`anonymous namespace'::addXYZToTag(ProCore::Private *a1, double *a2)
{
  PCICCTag *v4;
  PCICCTag *v5;
  PCICCTag *v6;

  ProCore::Private::addInt32ToTag(a1, (PCICCTag *)0x58595A20);
  ProCore::Private::addInt32ToTag(a1, 0);
  ProCore::Private::add15Fixed16ToTag(a1, v4, *a2);
  ProCore::Private::add15Fixed16ToTag(a1, v5, a2[1]);
  return ProCore::Private::add15Fixed16ToTag(a1, v6, a2[2]);
}

_BYTE *PCMakeChromaticAdaptationICCTag(ProCore::Private *a1, uint64_t a2)
{
  PCICCTag *v4;
  uint64_t i;
  uint64_t j;
  _BYTE *result;

  PCICCTag::reset((uint64_t)a1, 1667785060);
  ProCore::Private::addInt32ToTag(a1, (PCICCTag *)0x73663332);
  ProCore::Private::addInt32ToTag(a1, 0);
  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 24; j += 8)
      result = ProCore::Private::add15Fixed16ToTag(a1, v4, *(double *)(a2 + j));
    a2 += 24;
  }
  return result;
}

void `anonymous namespace'::addMultiLocalizedUnicodeToTag(_anonymous_namespace_ *this, PCICCTag *a2, const char *a3)
{
  int v5;
  char v6;
  int v7;

  ProCore::Private::addInt32ToTag(this, (PCICCTag *)0x6D6C7563);
  ProCore::Private::addInt32ToTag(this, 0);
  ProCore::Private::addInt32ToTag(this, (PCICCTag *)1);
  ProCore::Private::addInt32ToTag(this, (PCICCTag *)0xC);
  ProCore::Private::addInt16ToTag(this, (PCICCTag *)0x656E);
  ProCore::Private::addInt16ToTag(this, (PCICCTag *)0x7573);
  v5 = strlen((const char *)a2);
  ProCore::Private::addInt32ToTag(this, (PCICCTag *)(2 * v5));
  ProCore::Private::addInt32ToTag(this, (PCICCTag *)0x1C);
  v6 = *(_BYTE *)a2;
  if (*(_BYTE *)a2)
  {
    do
    {
      ProCore::Private::addInt16ToTag(this, (PCICCTag *)(unsigned __int16)v6);
      v7 = *((unsigned __int8 *)a2 + 1);
      a2 = (PCICCTag *)((char *)a2 + 1);
      v6 = v7;
    }
    while (v7);
  }
  ProCore::Private::addStringToTag(this, a2, (const char *)1);
}

void PCMakeDisplayRGBProfile(float *a1@<X0>, uint64_t a2@<X1>, PCICCTag *a3@<X2>, PCICCTag *a4@<X3>, PCICCProfile *a5@<X8>)
{
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  const char *v16;
  const char *v17;
  int v18;
  void *v19;
  void *v20;
  uint64_t v21;
  int v22;
  void *v23;
  void *v24;
  uint64_t v25;
  int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  int v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  void *__p;
  void *v36;
  uint64_t v37;
  int v38;
  void *v39;
  void *v40;
  uint64_t v41;
  int v42;
  void *v43;
  void *v44;
  uint64_t v45;
  int v46;
  void *v47;
  void *v48;
  uint64_t v49;
  int v50;
  void *v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[9];
  double v55[3];
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;

  PCICCProfile::PCICCProfile(a5);
  PCConvertChromaticitiesToXYZ(a1, (uint64_t)&v60, (uint64_t)&v58, (uint64_t)&v56, (uint64_t)v55);
  v54[0] = 0x3FF0000000000000;
  memset(&v54[1], 0, 24);
  v54[4] = 0x3FF0000000000000;
  memset(&v54[5], 0, 24);
  v54[8] = 0x3FF0000000000000;
  v11 = 1.0;
  if (v61 <= 1.0)
    v12 = v61;
  else
    v12 = 1.0;
  v13 = 0.0;
  if (v61 < 0.0)
    v12 = 0.0;
  v61 = v12;
  if (v59 <= 1.0)
    v14 = v59;
  else
    v14 = 1.0;
  if (v59 >= 0.0)
    v15 = v14;
  else
    v15 = 0.0;
  v59 = v15;
  if (v57 <= 1.0)
    v11 = v57;
  if (v57 >= 0.0)
    v13 = v11;
  v57 = v13;
  v50 = 0;
  v52 = 0;
  v53 = 0;
  v51 = 0;
  v46 = 0;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v42 = 0;
  v44 = 0;
  v45 = 0;
  v43 = 0;
  v38 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 0;
  PCICCTag::reset((uint64_t)&v50, 1918392666);
  PCICCTag::reset((uint64_t)&v46, 1733843290);
  PCICCTag::reset((uint64_t)&v42, 1649957210);
  PCICCTag::reset((uint64_t)&v38, 2004119668);
  PCICCProfile::addTag(a5, (const PCICCTag *)&v50);
  PCICCProfile::addTag(a5, (const PCICCTag *)&v46);
  PCICCProfile::addTag(a5, (const PCICCTag *)&v42);
  PCICCProfile::addTag(a5, (const PCICCTag *)&v38);
  if (v10)
  {
    v34 = 0;
    v36 = 0;
    v37 = 0;
    __p = 0;
    PCMakeChromaticAdaptationICCTag((ProCore::Private *)&v34, (uint64_t)v54);
    PCICCProfile::addTag(a5, (const PCICCTag *)&v34);
    if (__p)
    {
      v36 = __p;
      operator delete(__p);
    }
  }
  v34 = 0;
  v36 = 0;
  v37 = 0;
  __p = 0;
  v30 = 0;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v26 = 0;
  v28 = 0;
  v29 = 0;
  v27 = 0;
  PCMakeTRCTag(a2, (uint64_t)&v34, 0);
  PCMakeTRCTag(a2, (uint64_t)&v30, 1);
  PCMakeTRCTag(a2, (uint64_t)&v26, 2);
  PCICCProfile::addTag(a5, (const PCICCTag *)&v34);
  PCICCProfile::addTag(a5, (const PCICCTag *)&v30);
  PCICCProfile::addTag(a5, (const PCICCTag *)&v26);
  v22 = 0;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  PCICCTag::reset((uint64_t)&v22, 1684370275);
  PCICCProfile::addTag(a5, (const PCICCTag *)&v22);
  v18 = 0;
  v20 = 0;
  v21 = 0;
  v19 = 0;
  PCICCTag::reset((uint64_t)&v18, 1668313716);
  PCICCProfile::addTag(a5, (const PCICCTag *)&v18);
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v47)
  {
    v48 = v47;
    operator delete(v47);
  }
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
}

void sub_1B298DAB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  PCICCProfile *v40;
  uint64_t v41;
  void *v43;

  if (__p)
    operator delete(__p);
  if (a31)
    operator delete(a31);
  if (a35)
    operator delete(a35);
  if (a39)
    operator delete(a39);
  v43 = *(void **)(v41 - 240);
  if (v43)
  {
    *(_QWORD *)(v41 - 232) = v43;
    operator delete(v43);
  }
  PCICCProfile::~PCICCProfile(v40);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::adaptXYZColors(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5)
{
  uint64_t v9;

  if ((_DWORD)v9)
  {
    PCTransformXYZ(a5, a1, a1);
    PCTransformXYZ(a5, a2, a2);
    PCTransformXYZ(a5, a3, a3);
  }
  return v9;
}

void PCMakeDisplayRGBProfile(float *a1@<X0>, uint64_t a2@<X1>, PCICCProfile *a3@<X8>)
{
  PCICCTag *p_p;
  std::string __p;

  PCGetDescriptionForProfile((uint64_t)a1, a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (PCICCTag *)&__p;
  else
    p_p = (PCICCTag *)__p.__r_.__value_.__r.__words[0];
  PCMakeDisplayRGBProfile(a1, a2, p_p, (PCICCTag *)"Copyright (c) 2016 Apple Inc.", a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B298DC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void PCMakeDisplayGrayProfile(uint64_t a1@<X0>, PCICCTag *a2@<X1>, PCICCTag *a3@<X2>, PCICCProfile *a4@<X8>, float a5@<S0>, float a6@<S1>)
{
  int v12;
  const char *v13;
  const char *v14;
  int v15;
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  void *v20;
  void *v21;
  uint64_t v22;
  int v23;
  void *__p;
  void *v25;
  uint64_t v26;
  int v27;
  void *v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];
  double v32[3];

  PCICCProfile::PCICCProfile(a4);
  PCICCProfile::setUpHeader(a4, 0x7DFu, 7u, 0xAu, 0, 0, 0);
  ProCore::Private::setUInt32Number((_DWORD *)a4 + 4, (unsigned __int8 *)0x47524159);
  v32[0] = (float)(a5 / a6);
  v32[1] = 1.0;
  v32[2] = (float)((float)((float)(1.0 - a5) - a6) / a6);
  v31[0] = 0x3FF0000000000000;
  memset(&v31[1], 0, 24);
  v31[4] = 0x3FF0000000000000;
  memset(&v31[5], 0, 24);
  v31[8] = 0x3FF0000000000000;
  v27 = 0;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  PCICCTag::reset((uint64_t)&v27, 2004119668);
  PCICCProfile::addTag(a4, (const PCICCTag *)&v27);
  if (v12)
  {
    v23 = 0;
    v25 = 0;
    v26 = 0;
    __p = 0;
    PCMakeChromaticAdaptationICCTag((ProCore::Private *)&v23, (uint64_t)v31);
    PCICCProfile::addTag(a4, (const PCICCTag *)&v23);
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
  }
  v23 = 0;
  v25 = 0;
  v26 = 0;
  __p = 0;
  PCMakeTRCTag(a1, (uint64_t)&v23, 3);
  PCICCProfile::addTag(a4, (const PCICCTag *)&v23);
  v19 = 0;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  PCICCTag::reset((uint64_t)&v19, 1684370275);
  PCICCProfile::addTag(a4, (const PCICCTag *)&v19);
  v15 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  PCICCTag::reset((uint64_t)&v15, 1668313716);
  PCICCProfile::addTag(a4, (const PCICCTag *)&v15);
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (__p)
  {
    v25 = __p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
}

void sub_1B298DEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  PCICCProfile *v23;

  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  PCICCProfile::~PCICCProfile(v23);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::computeAdaptationMatrix(double *a1, uint64_t a2)
{
  uint64_t v2;
  ProCore::Private *v3;
  uint64_t v4;
  uint64_t i;

  v2 = a2;
  PCComputeChromaticAdaptation(a1, (double *)&kPCD50XYZ, a2);
  v4 = 0;
  while (2)
  {
    for (i = 0; i != 3; ++i)
    {
      v3 = (ProCore::Private *)ProCore::Private::convertToS15Fixed16(v3, *(double *)(v2 + 8 * i));
      if (v4 == i)
      {
        if ((_DWORD)v3 != 0x10000)
          return 1;
      }
      else if ((_DWORD)v3)
      {
        return 1;
      }
    }
    ++v4;
    v2 += 24;
    if (v4 != 3)
      continue;
    break;
  }
  return 0;
}

void PCMakeDisplayGrayProfile(float a1@<S0>, float a2@<S1>, float a3@<S2>, PCICCTag *a4@<X0>, PCICCTag *a5@<X1>, PCICCProfile *a6@<X8>)
{
  _BYTE v11[16];

  PCICCTransferFunctionGamma::PCICCTransferFunctionGamma((PCICCTransferFunctionGamma *)v11, a3);
  PCMakeDisplayGrayProfile((uint64_t)v11, a4, a5, a6, a1, a2);
  PCICCTransferFunctionGamma::~PCICCTransferFunctionGamma((PCICCTransferFunctionGamma *)v11);
}

void sub_1B298E020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCICCTransferFunctionGamma::~PCICCTransferFunctionGamma((PCICCTransferFunctionGamma *)&a9);
  _Unwind_Resume(a1);
}

uint64_t PCMakeDisplayGrayProfile@<X0>(float a1@<S0>, float a2@<S1>, float a3@<S2>, PCICCProfile *a4@<X8>)
{
  PCICCTag *p_p;
  void *__p;
  char v11;
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  std::stringbuf::str();
  if (v11 >= 0)
    p_p = (PCICCTag *)&__p;
  else
    p_p = (PCICCTag *)__p;
  PCMakeDisplayGrayProfile(a1, a2, a3, p_p, (PCICCTag *)"Copyright (c) 2016 Apple Inc.", a4);
  if (v11 < 0)
    operator delete(__p);
  v12[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v14);
}

void sub_1B298E150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *`anonymous namespace'::writeMonochromeIlluminantName(_QWORD *a1, float a2, float a3)
{
  const char *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (vabds_f32(a2, 0.3127) < 0.00001 && vabds_f32(a3, 0.329) < 0.00001)
  {
    v3 = "D65 Monochrome";
LABEL_10:
    v4 = 14;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  }
  if (vabds_f32(a2, 0.3457) < 0.00001 && vabds_f32(a3, 0.3585) < 0.00001)
  {
    v3 = "D50 Monochrome";
    goto LABEL_10;
  }
  if (vabds_f32(a2, 0.32168) < 0.00001 && vabds_f32(a3, 0.33767) < 0.00001)
  {
    v3 = "D60 Monochrome";
    goto LABEL_10;
  }
  if (vabds_f32(a2, 0.314) >= 0.00001 || vabds_f32(a3, 0.351) >= 0.00001)
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
    *(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 16) = 5;
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)", ", 2);
    *(_QWORD *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 16) = 5;
    a1 = (_QWORD *)std::ostream::operator<<();
    v3 = ")";
    v4 = 1;
  }
  else
  {
    v3 = "DCI P3 Monochrome";
    v4 = 17;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
}

_QWORD *`anonymous namespace'::writeGamma(_QWORD *a1, float a2)
{
  const char *v2;
  uint64_t v3;
  _QWORD *v5;

  if (a2 == 1.0)
  {
    v2 = " Linear";
    v3 = 7;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
  }
  if (fabsf(a2 + -1.961) < 0.00001)
  {
    v2 = ", QuickTime Gamma";
    v3 = 17;
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v2, v3);
  }
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", gamma ", 8);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 16) = 4;
  return (_QWORD *)std::ostream::operator<<();
}

void PCMakeDisplayRGBProfileFromGrayProfile(const PCICCProfile *a1@<X0>, PCICCProfile *a2@<X8>)
{
  int v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  const char *v10;
  const char *v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int v16;
  void *__p;
  void *v18;
  uint64_t v19;
  int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  int v24;
  void *v25;
  void *v26;
  uint64_t v27;
  int v28;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD v32[9];
  _BYTE v33[24];
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  __int128 v40;
  uint64_t v41;
  float32x2_t v42;
  float64x2_t v43;
  double v44;
  int v45;
  void *v46;
  void *v47;
  _BYTE v48[8];
  void *v49;
  void *v50;

  PCICCProfile::PCICCProfile(a2);
  PCICCProfile::setUpHeader(a2, 0x7DFu, 8u, 4u, 0, 0, 0);
  PCICCProfile::findTagBySignature(a1, 2004119668, (PCICCTag *)v48);
  PCICCProfile::findTagBySignature(a1, 1800688195, (PCICCTag *)&v45);
  v40 = kPCChromaticities_ITU_R709_2;
  v41 = 0x3D75C28F3E19999ALL;
  v42 = vcvt_f32_f64(vdivq_f64(v43, (float64x2_t)vdupq_lane_s64(COERCE__INT64(vaddvq_f64(v43) + v44), 0)));
  if ((PCConvertChromaticitiesToXYZ((float *)&v40, (uint64_t)&v38, (uint64_t)&v36, (uint64_t)&v34, (uint64_t)v33) & 1) == 0)
    PCConvertChromaticitiesToXYZ((float *)&kPCChromaticities_ITU_R709_2, (uint64_t)&v38, (uint64_t)&v36, (uint64_t)&v34, (uint64_t)&v43);
  v32[0] = 0x3FF0000000000000;
  memset(&v32[1], 0, 24);
  v32[4] = 0x3FF0000000000000;
  memset(&v32[5], 0, 24);
  v32[8] = 0x3FF0000000000000;
  v5 = 1.0;
  if (v39 <= 1.0)
    v6 = v39;
  else
    v6 = 1.0;
  v7 = 0.0;
  if (v39 < 0.0)
    v6 = 0.0;
  v39 = v6;
  if (v37 <= 1.0)
    v8 = v37;
  else
    v8 = 1.0;
  if (v37 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  v37 = v9;
  if (v35 <= 1.0)
    v5 = v35;
  if (v35 >= 0.0)
    v7 = v5;
  v35 = v7;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  v24 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v20 = 0;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  PCICCTag::reset((uint64_t)&v28, 1918392666);
  PCICCTag::reset((uint64_t)&v24, 1733843290);
  PCICCTag::reset((uint64_t)&v20, 1649957210);
  PCICCTag::reset((uint64_t)v48, 2004119668);
  PCICCProfile::addTag(a2, (const PCICCTag *)&v28);
  PCICCProfile::addTag(a2, (const PCICCTag *)&v24);
  PCICCProfile::addTag(a2, (const PCICCTag *)&v20);
  PCICCProfile::addTag(a2, (const PCICCTag *)v48);
  if (v4)
  {
    v16 = 0;
    v18 = 0;
    v19 = 0;
    __p = 0;
    PCMakeChromaticAdaptationICCTag((ProCore::Private *)&v16, (uint64_t)v32);
    PCICCProfile::addTag(a2, (const PCICCTag *)&v16);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
  }
  ProCore::Private::setUInt32NumberLE(&v45, (unsigned __int8 *)0x72545243);
  PCICCProfile::addTag(a2, (const PCICCTag *)&v45);
  ProCore::Private::setUInt32NumberLE(&v45, (unsigned __int8 *)0x67545243);
  PCICCProfile::addTag(a2, (const PCICCTag *)&v45);
  ProCore::Private::setUInt32NumberLE(&v45, (unsigned __int8 *)0x62545243);
  PCICCProfile::addTag(a2, (const PCICCTag *)&v45);
  v16 = 0;
  v18 = 0;
  v19 = 0;
  __p = 0;
  PCICCTag::reset((uint64_t)&v16, 1684370275);
  PCICCProfile::addTag(a2, (const PCICCTag *)&v16);
  v12 = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  PCICCTag::reset((uint64_t)&v12, 1668313716);
  PCICCProfile::addTag(a2, (const PCICCTag *)&v12);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
}

void sub_1B298E774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  PCICCProfile *v28;
  uint64_t v29;
  void *v31;
  void *v32;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  if (a23)
    operator delete(a23);
  if (a27)
    operator delete(a27);
  v31 = *(void **)(v29 - 88);
  if (v31)
  {
    *(_QWORD *)(v29 - 80) = v31;
    operator delete(v31);
  }
  v32 = *(void **)(v29 - 56);
  if (v32)
  {
    *(_QWORD *)(v29 - 48) = v32;
    operator delete(v32);
  }
  PCICCProfile::~PCICCProfile(v28);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::getXYZFromTag(uint64_t a1, double *a2)
{
  uint64_t FactoryForSerialization;
  const unsigned __int8 *v4;
  const unsigned __int8 *v5;
  const unsigned __int8 *v6;

  FactoryForSerialization = OZFactoryBase::getFactoryForSerialization(a1);
  *a2 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 8), v4);
  a2[1] = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 12), v5);
  a2[2] = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 16), v6);
}

void PCMakeDisplayGrayProfileFromRGBProfile(const PCICCProfile *a1@<X0>, PCICCProfile *a2@<X8>)
{
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  _BYTE v10[8];
  void *__p;
  void *v12;
  _BYTE v13[8];
  void *v14;
  void *v15;
  _BYTE v16[8];
  void *v17;
  void *v18;
  double v19;
  double v20;
  double v21;
  _BYTE v22[8];
  void *v23;
  void *v24;

  PCICCProfile::findTagBySignature(a1, 2004119668, (PCICCTag *)v22);
  PCICCProfile::findTagBySignature(a1, 1918128707, (PCICCTag *)v16);
  PCICCProfile::findTagBySignature(a1, 1733579331, (PCICCTag *)v13);
  PCICCProfile::findTagBySignature(a1, 1649693251, (PCICCTag *)v10);
  v4 = 2.2;
  if (!PCICCTag::empty((PCICCTag *)v16) && !PCICCTag::empty((PCICCTag *)v13) && !PCICCTag::empty((PCICCTag *)v10))
  {
    v5 = PCEstimateGammaFromTag((const PCICCTag *)v16);
    v6 = PCEstimateGammaFromTag((const PCICCTag *)v13);
    v4 = (float)((float)(v5 + v6) + PCEstimateGammaFromTag((const PCICCTag *)v10)) / 3.0;
  }
  v7 = v19 + v20 + v21;
  v8 = v19 / v7;
  v9 = v20 / v7;
  PCMakeDisplayGrayProfile(v8, v9, v4, a2);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
}

void sub_1B298E9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  uint64_t v20;
  void *v22;

  if (__p)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  if (a19)
    operator delete(a19);
  v22 = *(void **)(v20 - 56);
  if (v22)
  {
    *(_QWORD *)(v20 - 48) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

BOOL PCSameColorTransform(const PCICCProfile *a1, const PCICCProfile *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  int v10;
  BOOL v11;
  _BOOL8 result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *i;
  int v18;
  BOOL v19;

  v4 = *((_QWORD *)a1 + 19);
  v5 = (*((_QWORD *)a1 + 20) - v4) >> 3;
  v6 = 0xAAAAAAAAAAAAAAABLL * v5;
  v7 = (-1431655765 * v5);
  if (-1431655765 * (_DWORD)v5)
  {
    v8 = 0;
    v9 = (int *)*((_QWORD *)a1 + 19);
    while (1)
    {
      if ((v10 = 0, !v4) || v6 <= v8 || ((v10 = *v9, *v9 != 1668313716) ? (v11 = v10 == 1852074350) : (v11 = 1), !v11))
      {
        if (!result)
          break;
      }
      ++v8;
      v9 += 6;
      if (v7 == v8)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v13 = *((_QWORD *)a2 + 19);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a2 + 20) - v13) >> 3);
    v15 = -1431655765 * ((*((_QWORD *)a2 + 20) - v13) >> 3);
    if (-1431655765 * ((*((_QWORD *)a2 + 20) - v13) >> 3))
    {
      v16 = 0;
      for (i = (int *)*((_QWORD *)a2 + 19); ; i += 6)
      {
        if ((v18 = 0, !v13)
          || v14 <= v16
          || ((v18 = *i, *i != 1668313716) ? (v19 = v18 == 1852074350) : (v19 = 1), !v19))
        {
          if (!result)
            break;
        }
        if (v15 == ++v16)
          return 1;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL `anonymous namespace'::sameTagData(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;

  v3 = *(_QWORD *)(a1 + 152);
  v4 = *(_QWORD *)(a1 + 160);
  if (v3 == v4)
  {
LABEL_5:
    v6 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 152);
    while (*(_DWORD *)v5 != a3)
    {
      v5 += 24;
      if (v5 == v4)
        goto LABEL_5;
    }
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8) - **(_QWORD **)(v5 + 8);
  }
  v7 = *(_QWORD *)(a2 + 152);
  v8 = *(_QWORD *)(a2 + 160);
  if (v7 == v8)
  {
LABEL_11:
    v10 = 0;
  }
  else
  {
    v9 = *(_QWORD *)(a2 + 152);
    while (*(_DWORD *)v9 != a3)
    {
      v9 += 24;
      if (v9 == v8)
        goto LABEL_11;
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) - **(_QWORD **)(v9 + 8);
  }
  if (v6 != v10)
    return 0;
  while (1)
  {
    if (v3 == v4)
    {
      v12 = 0;
      goto LABEL_20;
    }
    if (*(_DWORD *)v3 == a3)
      break;
    v3 += 24;
  }
  v12 = **(const void ***)(v3 + 8);
  while (1)
  {
LABEL_20:
    if (v7 == v8)
      return 1;
    if (*(_DWORD *)v7 == a3)
      break;
    v7 += 24;
  }
  v11 = 1;
  if (v12)
  {
    v13 = **(const void ***)(v7 + 8);
    if (v13)
      return memcmp(v12, v13, v6) == 0;
  }
  return v11;
}

void PCGetChromaticities(PCICCProfile *a1, float32x4_t *a2)
{
  uint64_t v4;
  const unsigned __int8 *v5;
  ProCore::Private *v6;
  double *v7;
  uint64_t i;
  float64x2_t v9;
  float64x2_t v10;
  int64x2_t v11;
  float32x4_t v12;
  float64x2_t v13;
  int64x2_t v14;
  float32x4_t v15;
  double v16[9];
  _BYTE v17[8];
  void *__p;
  void *v19;
  __int128 v20;
  float64_t v21;
  _BYTE v22[8];
  void *v23;
  void *v24;
  __int128 v25;
  float64_t v26;
  _BYTE v27[8];
  void *v28;
  void *v29;
  __int128 v30;
  float64_t v31;
  _BYTE v32[8];
  void *v33;
  void *v34;
  __int128 v35;
  double v36;
  _BYTE v37[8];
  void *v38;
  void *v39;

  PCICCProfile::findTagBySignature(a1, 2004119668, (PCICCTag *)v37);
  v35 = kPCD50XYZ;
  v36 = 0.8249;
  if (!PCICCTag::empty((PCICCTag *)v37))
  PCICCProfile::findTagBySignature(a1, 1918392666, (PCICCTag *)v32);
  v31 = 1.0;
  v30 = xmmword_1B30588F8;
  if (!PCICCTag::empty((PCICCTag *)v32))
  PCICCProfile::findTagBySignature(a1, 1733843290, (PCICCTag *)v27);
  v26 = 1.0;
  v25 = xmmword_1B30588F8;
  if (!PCICCTag::empty((PCICCTag *)v27))
  PCICCProfile::findTagBySignature(a1, 1649957210, (PCICCTag *)v22);
  v21 = 1.0;
  v20 = xmmword_1B30588F8;
  if (!PCICCTag::empty((PCICCTag *)v22))
  PCICCProfile::findTagBySignature(a1, 1667785060, (PCICCTag *)v17);
  v16[0] = 1.0;
  memset(&v16[1], 0, 24);
  v16[4] = 1.0;
  memset(&v16[5], 0, 24);
  v16[8] = 1.0;
  if (PCICCTag::empty((PCICCTag *)v17))
  {
    PCComputeChromaticAdaptation((double *)&kPCD50XYZ, (double *)&v35, (uint64_t)v16);
  }
  else
  {
    v4 = 0;
    v6 = (ProCore::Private *)(OZFactoryBase::getFactoryForSerialization((uint64_t)v17) + 8);
    v7 = v16;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v7[i] = ProCore::Private::getS15Fixed16Number(v6, v5);
        v6 = (ProCore::Private *)((char *)v6 + 4);
      }
      ++v4;
      v7 += 3;
    }
    while (v4 != 3);
    PCMatrix33Tmpl<double>::invert(v16, v16, 0.0);
  }
  if (vabdd_f64(*(double *)&v35, 0.9642) < 0.001
    && vabdd_f64(*((double *)&v35 + 1), 1.0) < 0.001
    && vabdd_f64(v36, 0.8249) < 0.001)
  {
    PCTransformXYZ(v16, &v35, &v35);
  }
  PCTransformXYZ(v16, &v30, &v30);
  PCTransformXYZ(v16, &v25, &v25);
  PCTransformXYZ(v16, &v20, &v20);
  v9.f64[0] = v31;
  *(_QWORD *)&v10.f64[0] = vdupq_laneq_s64((int64x2_t)v30, 1).u64[0];
  v10.f64[1] = *((float64_t *)&v25 + 1);
  v9.f64[1] = v26;
  v11 = (int64x2_t)vaddq_f64(vaddq_f64((float64x2_t)vzip1q_s64((int64x2_t)v30, (int64x2_t)v25), v10), v9);
  v12 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64((float64x2_t)v30, (float64x2_t)vdupq_lane_s64(v11.i64[0], 0))), vdivq_f64((float64x2_t)v25, (float64x2_t)vdupq_laneq_s64(v11, 1)));
  *(_QWORD *)&v10.f64[0] = vdupq_laneq_s64((int64x2_t)v20, 1).u64[0];
  v10.f64[1] = *((float64_t *)&v35 + 1);
  v13 = vaddq_f64((float64x2_t)vzip1q_s64((int64x2_t)v20, (int64x2_t)v35), v10);
  v10.f64[0] = v21;
  v10.f64[1] = v36;
  v14 = (int64x2_t)vaddq_f64(v13, v10);
  v15 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64((float64x2_t)v20, (float64x2_t)vdupq_lane_s64(v14.i64[0], 0))), vdivq_f64((float64x2_t)v35, (float64x2_t)vdupq_laneq_s64(v14, 1)));
  *a2 = v12;
  a2[1] = v15;
  if (__p)
  {
    v19 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v38)
  {
    v39 = v38;
    operator delete(v38);
  }
}

void sub_1B298EFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39)
{
  uint64_t v39;
  void *v41;
  void *v42;

  if (__p)
    operator delete(__p);
  if (a38)
    operator delete(a38);
  v41 = *(void **)(v39 - 152);
  if (v41)
  {
    *(_QWORD *)(v39 - 144) = v41;
    operator delete(v41);
  }
  v42 = *(void **)(v39 - 88);
  if (v42)
  {
    *(_QWORD *)(v39 - 80) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(exception_object);
}

BOOL PCMatrix33Tmpl<double>::invert(double *a1, double *a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL8 v16;

  v4 = a2[7];
  v3 = a2[8];
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[6];
  v8 = v5 * v3 - v4 * v6;
  v9 = a2[2];
  v10 = a2[3];
  v11 = v6 * v7 - v3 * v10;
  v13 = *a2;
  v12 = a2[1];
  v14 = v4 * v10 - v5 * v7;
  v15 = v9 * v14 + v8 * *a2 + v12 * v11;
  v16 = fabs(v15) >= a3 && v15 != 0.0;
  if (v16)
  {
    *a1 = v8 * (1.0 / v15);
    a1[1] = (v4 * v9 - v3 * v12) * (1.0 / v15);
    a1[2] = (v6 * v12 - v5 * v9) * (1.0 / v15);
    a1[3] = v11 * (1.0 / v15);
    a1[4] = (v3 * v13 - v9 * v7) * (1.0 / v15);
    a1[5] = (v9 * v10 - v6 * v13) * (1.0 / v15);
    a1[6] = v14 * (1.0 / v15);
    a1[7] = (v12 * v7 - v4 * v13) * (1.0 / v15);
    a1[8] = (v5 * v13 - v12 * v10) * (1.0 / v15);
  }
  return v16;
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *a2)
{
  char *v3;
  int v4;
  const std::locale::facet *v5;
  int v6;
  std::locale v8;

  v3 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
    v5 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
    v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_1B298F1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,PCICCProfile::Tag *,PCICCProfile::Tag *,PCICCProfile::Tag *,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  _DWORD *v5;
  __int128 *v6;
  int v7;
  uint64_t v8;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    v6 = (__int128 *)(v4 + 2);
    v7 = *v4;
    v4 += 6;
    v8 = (uint64_t)(a3 + 2);
    *a3 = v7;
    a3 += 6;
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100](v8, v6);
  }
  while (v4 != v5);
  return v5;
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B298F3CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<std::vector<unsigned char>>::shared_ptr[abi:ne180100]<std::vector<unsigned char>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6512728;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B298F448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<std::vector<unsigned char>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<unsigned char> *,std::shared_ptr<std::vector<unsigned char>>::__shared_ptr_default_delete<std::vector<unsigned char>,std::vector<unsigned char>>,std::allocator<std::vector<unsigned char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

void std::__shared_ptr_pointer<std::vector<unsigned char> *,std::shared_ptr<std::vector<unsigned char>>::__shared_ptr_default_delete<std::vector<unsigned char>,std::vector<unsigned char>>,std::allocator<std::vector<unsigned char>>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<std::vector<unsigned char>>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<std::vector<unsigned char> *,std::shared_ptr<std::vector<unsigned char>>::__shared_ptr_default_delete<std::vector<unsigned char>,std::vector<unsigned char>>,std::allocator<std::vector<unsigned char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<std::vector<unsigned char>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x1B5E29170);
  }
}

uint64_t *std::vector<PCICCProfile::Tag>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 24);
    v2 -= 24;
    *(_DWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<PCICCProfile::Tag>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__tree<`anonymous namespace'::WrittenTag>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

BOOL PCIs709TransferFunction(float a1, float a2, float a3, float a4, float a5)
{
  return fabsf(a1 + -2.2222) < 0.001
      && fabsf(a2 + -0.90992) < 0.001
      && fabsf(a3 + -0.090082) < 0.001
      && fabsf(a4 + -0.22222) < 0.001
      && fabsf(a5 + -0.081) < 0.001;
}

BOOL PCIssRGBTransferFunction(float a1, float a2, float a3, float a4, float a5)
{
  if (fabsf(a1 + -2.4) >= 0.001
    || fabsf(a2 + -0.94787) >= 0.001
    || fabsf(a3 + -0.052133) >= 0.001
    || fabsf(a4 + -0.077399) >= 0.001)
  {
    return 0;
  }
  if (fabsf(a5 + -0.0405) >= 0.001)
    return fabsf(a5 + -0.039) < 0.001;
  return 1;
}

double ProCore::Private::initChromaticityMath(ProCore::Private *this, uint64_t a2, double *a3)
{
}

double `anonymous namespace'::invert(_anonymous_namespace_ *this, double *a2, double *a3)
{
  double v3;
  double v4;
  double result;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v17;

  v3 = *((double *)this + 7);
  v4 = *((double *)this + 8);
  result = *((double *)this + 4);
  v6 = *((double *)this + 5);
  v7 = *((double *)this + 6);
  v8 = result * v4 - v6 * v3;
  v10 = *((double *)this + 2);
  v9 = *((double *)this + 3);
  v11 = v6 * v7 - v4 * v9;
  v12 = v3 * v9 - result * v7;
  v14 = *(double *)this;
  v13 = *((double *)this + 1);
  v15 = v8 * *(double *)this + v13 * v11 + v12 * v10;
  if (v15 >= 0.0000001 || v15 <= -0.0000001)
  {
    v17 = 1.0 / v15;
    *a2 = v8 * v17;
    a2[1] = (v3 * v10 - v4 * v13) * v17;
    a2[2] = (v6 * v13 - result * v10) * v17;
    a2[3] = v11 * v17;
    a2[4] = (v4 * v14 - v7 * v10) * v17;
    a2[5] = (v9 * v10 - v6 * v14) * v17;
    a2[6] = v12 * v17;
    a2[7] = (v7 * v13 - v3 * v14) * v17;
    result = (result * v14 - v9 * v13) * v17;
    a2[8] = result;
  }
  return result;
}

uint64_t PCConvertChromaticitiesToXYZ(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float v16;
  float v17;
  double *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v38[9];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  double v43;
  double v44;
  double v45;
  double v46;
  __int128 v47;
  uint64_t v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v10 = a1[1];
  v11 = 1.0 - v9 - v10;
  v12 = a1[2];
  v13 = a1[3];
  v14 = a1[4];
  v15 = a1[5];
  v17 = a1[6];
  v16 = a1[7];
  v44 = v9 / v10;
  v45 = v12 / v13;
  v46 = v14 / v15;
  __asm { FMOV            V0.2D, #1.0 }
  v47 = _Q0;
  v48 = 0x3FF0000000000000;
  v49 = v11 / v10;
  v50 = (1.0 - v12 - v13) / v13;
  v51 = (1.0 - v14 - v15) / v15;
  v43 = 0.0;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v25 = v24;
  if ((_DWORD)v24)
  {
    v26 = v17 / v16;
    v27 = (1.0 - v17 - v16) / v16;
    v38[0] = v26 * *(double *)&v39 + *((double *)&v39 + 1) + v27 * *(double *)&v40;
    memset(&v38[1], 0, 24);
    v38[4] = v26 * *((double *)&v40 + 1) + *(double *)&v41 + v27 * *((double *)&v41 + 1);
    memset(&v38[5], 0, 24);
    v38[8] = v26 * *(double *)&v42 + *((double *)&v42 + 1) + v27 * v43;
    v28 = v44;
    v29 = v45;
    v31 = v46;
    v30 = v47;
    *(double *)a2 = v44;
    *(_QWORD *)(a2 + 8) = v30;
    v32 = v49;
    v33 = v50;
    *(double *)(a2 + 16) = v49;
    v34 = *((_QWORD *)&v47 + 1);
    v35 = v48;
    *(double *)a3 = v29;
    *(_QWORD *)(a3 + 8) = v34;
    *(double *)(a3 + 16) = v33;
    *(double *)a4 = v31;
    *(_QWORD *)(a4 + 8) = v35;
    v36 = v51;
    *(double *)(a4 + 16) = v51;
    *(double *)a5 = v28 + v29 + v31;
    *(_QWORD *)(a5 + 8) = 0x3FF0000000000000;
    *(double *)(a5 + 16) = v32 + v33 + v36;
  }
  return v25;
}

double `anonymous namespace'::multiply(_anonymous_namespace_ *this, const double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double result;

  v4 = *((double *)this + 1);
  v5 = a2[1];
  v7 = a2[2];
  v6 = a2[3];
  v8 = a2[6];
  v9 = a2[7];
  v10 = *((double *)this + 2);
  v11 = *((double *)this + 3);
  v12 = *(double *)this * *a2 + v4 * v6 + v10 * v8;
  v13 = a2[4];
  v14 = a2[5];
  v15 = *(double *)this * v5 + v4 * v13 + v10 * v9;
  v16 = *(double *)this * v7 + v4 * v14;
  v17 = a2[8];
  v18 = v16 + v10 * v17;
  v19 = *((double *)this + 4);
  v20 = *((double *)this + 5);
  v21 = *a2 * v11 + v6 * v19 + v8 * v20;
  v22 = v5 * v11 + v13 * v19 + v9 * v20;
  v23 = v7 * v11 + v14 * v19 + v17 * v20;
  v24 = *((double *)this + 6);
  v25 = *((double *)this + 7);
  v26 = *a2 * v24 + v6 * v25;
  v27 = *((double *)this + 8);
  *a3 = v12;
  a3[1] = v15;
  a3[2] = v18;
  a3[3] = v21;
  a3[4] = v22;
  a3[5] = v23;
  result = v5 * v24 + v13 * v25 + v9 * v27;
  a3[6] = v26 + v8 * v27;
  a3[7] = result;
  a3[8] = v7 * v24 + v14 * v25 + v17 * v27;
  return result;
}

double PCComputeChromaticAdaptation(double *a1, double *a2, uint64_t a3)
{
  double result;
  double *v6;
  double *v7;
  double v8[3];
  double v9[3];
  _OWORD v10[4];
  uint64_t v11;
  double v12[10];

  v12[9] = *(double *)MEMORY[0x1E0C80C00];
  result = 0.0000001;
  if (vabdd_f64(*a1, *a2) >= 0.0000001 || vabdd_f64(a1[1], a2[1]) >= 0.0000001 || vabdd_f64(a1[2], a2[2]) >= 0.0000001)
  {
    v12[0] = v8[0] / v9[0];
    memset(&v12[1], 0, 24);
    v12[4] = v8[1] / v9[1];
    memset(&v12[5], 0, 24);
    v12[8] = v8[2] / v9[2];
    v11 = 0;
    memset(v10, 0, sizeof(v10));
  }
  else
  {
    *(_QWORD *)a3 = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0x3FF0000000000000;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_QWORD *)(a3 + 64) = 0x3FF0000000000000;
  }
  return result;
}

double `anonymous namespace'::transform(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double result;
  double v6;
  double v7;

  v3 = a2[1];
  v4 = a2[2];
  result = *a1 * *a2 + a1[1] * v3 + a1[2] * v4;
  v6 = *a2 * a1[3] + v3 * a1[4] + v4 * a1[5];
  v7 = *a2 * a1[6] + v3 * a1[7] + v4 * a1[8];
  a3[1] = v6;
  a3[2] = v7;
  *a3 = result;
  return result;
}

float *PCGetLuminanceCoefficients@<X0>(float *result@<X0>, float *a2@<X8>)
{
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  _BYTE v7[8];
  double v8;
  _BYTE v9[8];
  double v10;
  _BYTE v11[8];
  double v12;

  if ((vabds_f32(*result, 0.64) >= 0.00001
     || vabds_f32(result[1], 0.33) >= 0.00001
     || vabds_f32(result[2], 0.29) >= 0.00001
     || vabds_f32(result[3], 0.6) >= 0.00001
     || vabds_f32(result[4], 0.15) >= 0.00001
     || vabds_f32(result[5], 0.06) >= 0.00001
     || vabds_f32(result[6], 0.3127) >= 0.00001
     || vabds_f32(result[7], 0.329) >= 0.00001)
    && (vabds_f32(*result, 0.63) >= 0.00001
     || vabds_f32(result[1], 0.34) >= 0.00001
     || vabds_f32(result[2], 0.31) >= 0.00001
     || vabds_f32(result[3], 0.595) >= 0.00001
     || vabds_f32(result[4], 0.155) >= 0.00001
     || vabds_f32(result[5], 0.07) >= 0.00001
     || vabds_f32(result[6], 0.3127) >= 0.00001
     || vabds_f32(result[7], 0.329) >= 0.00001))
  {
    result = (float *)PCConvertChromaticitiesToXYZ(result, (uint64_t)v11, (uint64_t)v9, (uint64_t)v7, (uint64_t)&v6);
    v3 = 0.0;
    v4 = 0.0;
    v5 = 0.0;
    if ((_DWORD)result)
    {
      v3 = v12;
      v4 = v10;
      v5 = v8;
    }
    *a2 = v3;
    a2[1] = v4;
    a2[2] = v5;
  }
  else
  {
    *(_QWORD *)a2 = 0x3F1645A23E991687;
    a2[2] = 0.114;
  }
  return result;
}

float PCGetRec709LuminanceCoefficients@<S0>(uint64_t a1@<X8>)
{
  unsigned __int8 v1;
  float result;
  int v3;
  uint64_t v4;

  if ((v1 & 1) == 0)
  {
    v4 = a1;
    a1 = v4;
    if (v3)
    {
      PCGetLuminanceCoefficients((float *)&kPCChromaticities_ITU_R709_2, (float *)&PCGetRec709LuminanceCoefficients(void)::coefficients);
      a1 = v4;
    }
  }
  *(_QWORD *)a1 = PCGetRec709LuminanceCoefficients(void)::coefficients;
  result = *(float *)&dword_1EF074D58;
  *(_DWORD *)(a1 + 8) = dword_1EF074D58;
  return result;
}

float *PCGetRGBToYCbCrMatrix(float *a1, uint64_t a2)
{
  float *result;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  BOOL v16;
  float v17;
  uint64_t v18;
  float v19;

  result = PCGetLuminanceCoefficients(a1, (float *)&v18);
  v5 = *((float *)&v18 + 1);
  v4 = v19;
  v6 = 1.0 / (float)((float)(v19 + -1.0) + (float)(v19 + -1.0));
  v7 = *(float *)&v18;
  v8 = 1.0 / (float)((float)(*(float *)&v18 + -1.0) + (float)(*(float *)&v18 + -1.0));
  *(_QWORD *)a2 = v18;
  *(float *)(a2 + 8) = v19;
  v9 = v7 * v6;
  v10 = v5 * v6;
  v11 = v10 + (float)(v9 + 0.5);
  if (v11 != 0.0)
  {
    v10 = -0.5 - (float)(v9 + (float)(v11 * 0.5));
    v9 = v9 + (float)(v11 * 0.5);
  }
  *(float *)(a2 + 12) = v9;
  *(float *)(a2 + 16) = v10;
  v12 = v5 * v8;
  v13 = v4 * v8;
  v14 = v13 + (float)(v12 + 0.5);
  v15 = v12 + (float)(v14 * 0.5);
  v16 = v14 == 0.0;
  if (v14 == 0.0)
    v17 = v12;
  else
    v17 = v12 + (float)(v14 * 0.5);
  *(_QWORD *)(a2 + 20) = 0x3F0000003F000000;
  if (!v16)
    v13 = -0.5 - v15;
  *(float *)(a2 + 28) = v17;
  *(float *)(a2 + 32) = v13;
  return result;
}

double PCGetYCbCrToRGBMatrix(float *a1, uint64_t a2)
{
  double result;

  PCGetRGBToYCbCrMatrix(a1, a2);
  if (!PCMatrix33Tmpl<float>::invert((float *)a2, (float *)a2, 0.0))
  {
    *(_QWORD *)&result = 1065353216;
    *(_OWORD *)a2 = xmmword_1B304F230;
    *(_OWORD *)(a2 + 16) = xmmword_1B304F230;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

float *PCGetRec709YCbCrMatrix@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_1B304F230;
  *(_OWORD *)(a1 + 16) = xmmword_1B304F230;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return PCGetRGBToYCbCrMatrix((float *)&kPCChromaticities_ITU_R709_2, a1);
}

BOOL PCMatrix33Tmpl<float>::invert(float *a1, float *a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  _BOOL8 v16;

  v4 = a2[7];
  v3 = a2[8];
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[6];
  v8 = (float)(v5 * v3) - (float)(v4 * v6);
  v9 = a2[2];
  v10 = a2[3];
  v11 = (float)(v6 * v7) - (float)(v3 * v10);
  v13 = *a2;
  v12 = a2[1];
  v14 = (float)(v4 * v10) - (float)(v5 * v7);
  v15 = (float)(v9 * v14) + (float)((float)(v8 * *a2) + (float)(v12 * v11));
  v16 = fabsf(v15) >= a3 && v15 != 0.0;
  if (v16)
  {
    *a1 = v8 * (float)(1.0 / v15);
    a1[1] = (float)((float)(v4 * v9) - (float)(v3 * v12)) * (float)(1.0 / v15);
    a1[2] = (float)((float)(v6 * v12) - (float)(v5 * v9)) * (float)(1.0 / v15);
    a1[3] = v11 * (float)(1.0 / v15);
    a1[4] = (float)((float)(v3 * v13) - (float)(v9 * v7)) * (float)(1.0 / v15);
    a1[5] = (float)((float)(v9 * v10) - (float)(v6 * v13)) * (float)(1.0 / v15);
    a1[6] = v14 * (float)(1.0 / v15);
    a1[7] = (float)((float)(v12 * v7) - (float)(v4 * v13)) * (float)(1.0 / v15);
    a1[8] = (float)((float)(v5 * v13) - (float)(v12 * v10)) * (float)(1.0 / v15);
  }
  return v16;
}

void PCException::addCallStackSymbols(PCException *this)
{
  void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  BOOL v6;
  const void *v7;

  v2 = (void *)MEMORY[0x1B5E29C50]();
  v3 = (const void *)objc_msgSend(MEMORY[0x1E0CB3978], "callStackSymbols");
  v4 = v3;
  if (v3)
    CFRetain(v3);
  v7 = v4;
  v5 = (const void *)*((_QWORD *)this + 1);
  if (v5)
    v6 = v5 == v4;
  else
    v6 = 1;
  if (!v6)
  {
    CFRelease(v5);
    v4 = v7;
  }
  *((_QWORD *)this + 1) = v4;
  v7 = 0;
  PCCFRef<__CFArray const*>::~PCCFRef(&v7);
  objc_autoreleasePoolPop(v2);
}

void sub_1B2990210(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<__CFArray const*>::~PCCFRef((const void **)va);
  _Unwind_Resume(a1);
}

float PCEstimateGamma(const PCICCProfile *a1)
{
  float v2;
  float v4;
  float v5;
  uint64_t v6;
  void *__p;
  void *v8;
  _BYTE v9[8];
  void *v10;
  void *v11;
  _BYTE v12[8];
  void *v13;
  void *v14;
  _BYTE v15[8];
  void *v16;
  void *v17;

  PCICCProfile::findTagBySignature(a1, 1918128707, (PCICCTag *)v15);
  PCICCProfile::findTagBySignature(a1, 1733579331, (PCICCTag *)v12);
  PCICCProfile::findTagBySignature(a1, 1649693251, (PCICCTag *)v9);
  if (PCICCTag::empty((PCICCTag *)v15) || PCICCTag::empty((PCICCTag *)v12) || PCICCTag::empty((PCICCTag *)v9))
  {
    PCICCProfile::findTagBySignature(a1, 1800688195, (PCICCTag *)&v6);
    v2 = 0.0;
    if (!PCICCTag::empty((PCICCTag *)&v6))
      v2 = PCEstimateGammaFromTag((const PCICCTag *)&v6);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v4 = PCEstimateGammaFromTag((const PCICCTag *)v15);
    v5 = PCEstimateGammaFromTag((const PCICCTag *)v12);
    v2 = (float)((float)(v4 + v5) + PCEstimateGammaFromTag((const PCICCTag *)v9)) / 3.0;
  }
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  return v2;
}

void sub_1B2990354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(_QWORD *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

float PCEstimateGamma(CGColorSpace *a1)
{
  float v1;
  _BYTE v3[224];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  PCICCProfile::PCICCProfile((PCICCProfile *)v3, a1);
  v1 = PCEstimateGamma((const PCICCProfile *)v3);
  PCICCProfile::~PCICCProfile((PCICCProfile *)v3);
  return v1;
}

void sub_1B2990440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    PCICCProfile::~PCICCProfile((PCICCProfile *)&a10);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B299040CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProCore::Private::getInt32Number(ProCore::Private *this, const unsigned __int8 *a2)
{
  return bswap32(*(_DWORD *)this);
}

_DWORD *ProCore::Private::setUInt32Number(_DWORD *this, unsigned __int8 *a2)
{
  *this = bswap32(a2);
  return this;
}

uint64_t ProCore::Private::getUInt16Number(ProCore::Private *this, const unsigned __int8 *a2)
{
  return bswap32(*(unsigned __int16 *)this) >> 16;
}

_WORD *ProCore::Private::setUInt16Number(_WORD *this, unsigned __int8 *a2)
{
  *this = __rev16(a2);
  return this;
}

double ProCore::Private::getS15Fixed16Number(ProCore::Private *this, const unsigned __int8 *a2)
{
  return (double)(int)bswap32(*(_DWORD *)this) * 0.0000152587891;
}

double ProCore::Private::convertFromS15Fixed16(ProCore::Private *this)
{
  return (double)(int)this * 0.0000152587891;
}

unint64_t ProCore::Private::convertToS15Fixed16(ProCore::Private *this, double a2)
{
  double v2;
  BOOL v3;
  double v4;

  v2 = a2 * 131072.0;
  if (a2 > 32768.0)
    v2 = 4294967290.0;
  v3 = a2 < -32768.0;
  v4 = -4294967300.0;
  if (!v3)
    v4 = v2;
  return (unint64_t)((uint64_t)v4 + 1) >> 1;
}

double ProCore::Private::convertFromU8Fixed8(ProCore::Private *this)
{
  return (double)this * 0.00390625;
}

uint64_t ProCore::Private::convertToU8Fixed8(ProCore::Private *this, double a2)
{
  double v2;
  BOOL v3;
  double v4;

  v2 = a2 * 512.0;
  if (a2 > 255.996094)
    v2 = 131070.0;
  v3 = a2 < 0.0;
  v4 = 0.0;
  if (!v3)
    v4 = v2;
  return (unsigned __int16)(((uint64_t)v4 + 1) >> 1);
}

_DWORD *ProCore::Private::setUInt32NumberLE(_DWORD *this, unsigned __int8 *a2)
{
  *this = (_DWORD)a2;
  return this;
}

_BYTE *ProCore::Private::add8Fixed8ToTag(ProCore::Private *this, PCICCTag *a2, double a3)
{
  uint64_t v5;
  _BYTE *result;
  double v7;
  unint64_t v8;

  v5 = PCICCTag::size(this);
  PCICCTag::resize(this, v5 + 2);
  result = (_BYTE *)PCICCTag::operator[]((uint64_t)this, v5);
  v7 = a3 * 512.0;
  if (a3 > 255.996094)
    v7 = 131070.0;
  if (a3 < 0.0)
    v7 = 0.0;
  v8 = (uint64_t)v7 + 1;
  *result = v8 >> 9;
  result[1] = v8 >> 1;
  return result;
}

_WORD *ProCore::Private::addInt16ToTag(ProCore::Private *this, PCICCTag *a2)
{
  unsigned int v2;
  uint64_t v4;
  _WORD *result;

  v2 = a2;
  v4 = PCICCTag::size(this);
  PCICCTag::resize(this, v4 + 2);
  result = (_WORD *)PCICCTag::operator[]((uint64_t)this, v4);
  *result = __rev16(v2);
  return result;
}

_DWORD *ProCore::Private::addInt32ToTag(ProCore::Private *this, PCICCTag *a2)
{
  unsigned int v2;
  uint64_t v4;
  _DWORD *result;

  v2 = a2;
  v4 = PCICCTag::size(this);
  PCICCTag::resize(this, v4 + 4);
  result = (_DWORD *)PCICCTag::operator[]((uint64_t)this, v4);
  *result = bswap32(v2);
  return result;
}

_BYTE *ProCore::Private::add15Fixed16ToTag(ProCore::Private *this, PCICCTag *a2, double a3)
{
  uint64_t v5;
  _BYTE *result;
  double v7;
  unint64_t v8;

  v5 = PCICCTag::size(this);
  PCICCTag::resize(this, v5 + 4);
  result = (_BYTE *)PCICCTag::operator[]((uint64_t)this, v5);
  v7 = a3 * 131072.0;
  if (a3 > 32768.0)
    v7 = 4294967290.0;
  if (a3 < -32768.0)
    v7 = -4294967300.0;
  v8 = (uint64_t)v7 + 1;
  *result = v8 >> 25;
  result[1] = v8 >> 17;
  result[2] = v8 >> 9;
  result[3] = v8 >> 1;
  return result;
}

void ProCore::Private::addStringToTag(ProCore::Private *this, PCICCTag *a2, const char *a3)
{
  int v3;
  char v5;
  unsigned __int8 *v6;
  int v7;

  v3 = (int)a3;
  v5 = *(_BYTE *)a2;
  if (*(_BYTE *)a2)
  {
    v6 = (unsigned __int8 *)a2 + 1;
    do
    {
      PCICCTag::push_back(this, v5);
      v7 = *v6++;
      v5 = v7;
    }
    while (v7);
  }
  if (v3)
    PCICCTag::push_back(this, 0);
}

void pcAbortImpl()
{
  abort();
}

uint64_t PCGetPrimariesString(int a1)
{
  uint64_t result;
  uint64_t *v3;

  result = 0;
  switch(a1)
  {
    case 1:
      v3 = (uint64_t *)MEMORY[0x1E0CA8D88];
      goto LABEL_8;
    case 5:
      v3 = (uint64_t *)MEMORY[0x1E0CA8D78];
      goto LABEL_8;
    case 6:
      v3 = (uint64_t *)MEMORY[0x1E0CA8DA0];
      goto LABEL_8;
    case 9:
      v3 = (uint64_t *)MEMORY[0x1E0CA8D80];
      goto LABEL_8;
    case 11:
      v3 = (uint64_t *)MEMORY[0x1E0CA8D70];
      goto LABEL_8;
    case 12:
      v3 = (uint64_t *)MEMORY[0x1E0CA8D98];
LABEL_8:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PCGetTransferFunctionString(int a1)
{
  uint64_t result;
  uint64_t *v3;

  result = 0;
  switch(a1)
  {
    case 1:
      v3 = (uint64_t *)MEMORY[0x1E0CA8EB0];
      goto LABEL_11;
    case 2:
      v3 = (uint64_t *)MEMORY[0x1E0CA8ED8];
      goto LABEL_11;
    case 7:
      v3 = (uint64_t *)MEMORY[0x1E0CA8EC0];
      goto LABEL_11;
    case 8:
      v3 = (uint64_t *)MEMORY[0x1E0CA8EB8];
      goto LABEL_11;
    case 13:
      v3 = (uint64_t *)MEMORY[0x1E0CA8EE0];
      goto LABEL_11;
    case 14:
      v3 = (uint64_t *)MEMORY[0x1E0CA8EA0];
      goto LABEL_11;
    case 16:
      v3 = (uint64_t *)MEMORY[0x1E0CA8EC8];
      goto LABEL_11;
    case 17:
      v3 = (uint64_t *)MEMORY[0x1E0CA8ED0];
      goto LABEL_11;
    case 18:
      v3 = (uint64_t *)MEMORY[0x1E0CA8EA8];
LABEL_11:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PCGetMatrixString(int a1)
{
  uint64_t result;
  uint64_t *v3;

  result = 0;
  switch(a1)
  {
    case 1:
      v3 = (uint64_t *)MEMORY[0x1E0CA8F18];
      goto LABEL_6;
    case 6:
      v3 = (uint64_t *)MEMORY[0x1E0CA8F10];
      goto LABEL_6;
    case 7:
      v3 = (uint64_t *)MEMORY[0x1E0CA8F30];
      goto LABEL_6;
    case 9:
      v3 = (uint64_t *)MEMORY[0x1E0CA8F00];
LABEL_6:
      result = *v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PCClassifyPrimaries(float *a1)
{
  float v1;
  uint64_t v2;

  v1 = *a1;
  if (vabds_f32(*a1, 0.64) < 0.001
    && vabds_f32(a1[1], 0.33) < 0.001
    && vabds_f32(a1[2], 0.3) < 0.001
    && vabds_f32(a1[3], 0.6) < 0.001
    && vabds_f32(a1[4], 0.15) < 0.001
    && vabds_f32(a1[5], 0.06) < 0.001
    && vabds_f32(a1[6], 0.3127) < 0.001
    && vabds_f32(a1[7], 0.329) < 0.001)
  {
    return 1;
  }
  if (vabds_f32(v1, 0.64) < 0.001
    && vabds_f32(a1[1], 0.33) < 0.001
    && vabds_f32(a1[2], 0.29) < 0.001
    && vabds_f32(a1[3], 0.6) < 0.001
    && vabds_f32(a1[4], 0.15) < 0.001
    && vabds_f32(a1[5], 0.06) < 0.001
    && vabds_f32(a1[6], 0.3127) < 0.001
    && vabds_f32(a1[7], 0.329) < 0.001)
  {
    return 5;
  }
  if (vabds_f32(v1, 0.63) < 0.001
    && vabds_f32(a1[1], 0.34) < 0.001
    && vabds_f32(a1[2], 0.31) < 0.001
    && vabds_f32(a1[3], 0.595) < 0.001
    && vabds_f32(a1[4], 0.155) < 0.001
    && vabds_f32(a1[5], 0.07) < 0.001
    && vabds_f32(a1[6], 0.3127) < 0.001
    && vabds_f32(a1[7], 0.329) < 0.001)
  {
    return 6;
  }
  if (vabds_f32(v1, 0.708) < 0.001
    && vabds_f32(a1[1], 0.292) < 0.001
    && vabds_f32(a1[2], 0.17) < 0.001
    && vabds_f32(a1[3], 0.797) < 0.001
    && vabds_f32(a1[4], 0.131) < 0.001
    && vabds_f32(a1[5], 0.046) < 0.001
    && vabds_f32(a1[6], 0.3127) < 0.001
    && vabds_f32(a1[7], 0.329) < 0.001)
  {
    return 9;
  }
  if (vabds_f32(v1, 0.68) < 0.001
    && vabds_f32(a1[1], 0.32) < 0.001
    && vabds_f32(a1[2], 0.265) < 0.001
    && vabds_f32(a1[3], 0.69) < 0.001
    && vabds_f32(a1[4], 0.15) < 0.001
    && vabds_f32(a1[5], 0.06) < 0.001
    && vabds_f32(a1[6], 0.314) < 0.001
    && vabds_f32(a1[7], 0.351) < 0.001)
  {
    return 11;
  }
  if (vabds_f32(v1, 0.68) >= 0.001
    || vabds_f32(a1[1], 0.32) >= 0.001
    || vabds_f32(a1[2], 0.265) >= 0.001
    || vabds_f32(a1[3], 0.69) >= 0.001
    || vabds_f32(a1[4], 0.15) >= 0.001
    || vabds_f32(a1[5], 0.06) >= 0.001)
  {
    return 2;
  }
  v2 = 2;
  if (vabds_f32(a1[6], 0.3127) < 0.001)
  {
    if (fabsf(a1[7] - 0.329) >= 0.001)
      return 2;
    else
      return 12;
  }
  return v2;
}

uint64_t PCClassifyTransfer(float a1)
{
  if (fabsf(a1 + -1.961) < 0.001)
    return 1;
  if (fabsf(a1 + -1.0) < 0.001)
    return 8;
  if (fabsf(a1 + -2.6) >= 0.001)
    return 2;
  return 17;
}

uint64_t PCPrimariesToMatrix(int a1)
{
  if ((a1 - 1) > 0xB)
    return 2;
  else
    return dword_1B3058CB4[a1 - 1];
}

unint64_t PCMakeNCLCCode(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

unint64_t PCMakeCanonicalNCLCCode(unsigned int a1, uint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  int v6;

  v3 = 2;
  if (a1 > 0xC || a2 > 0x12)
  {
    v4 = 2;
    return v3 | (unint64_t)(v4 << 32);
  }
  v4 = 2;
  if (supportedPrimariesTable[a1])
  {
    if (a3 > 9)
      goto LABEL_16;
    v4 = 2;
    if (!supportedTransfersTable[a2])
      return v3 | (unint64_t)(v4 << 32);
    if (!supportedMatricesTable[a3])
    {
LABEL_16:
      v4 = 2;
      return v3 | (unint64_t)(v4 << 32);
    }
    if ((_DWORD)a2 == 14)
      v4 = 1;
    else
      v4 = a2;
    if ((_DWORD)v4 == 8 || (_DWORD)v4 == 13)
    {
      v3 = a1;
LABEL_13:
      v4 = a2;
      return v3 | (unint64_t)(v4 << 32);
    }
    if (a1 == 12 && (_DWORD)v4 == 1)
    {
      v4 = 1;
      v3 = 12;
      return v3 | (unint64_t)(v4 << 32);
    }
    if (a1 == 11 && (_DWORD)v4 == 17)
    {
      v4 = 17;
      v3 = 11;
      return v3 | (unint64_t)(v4 << 32);
    }
    v6 = v4 & 0xFFFFFFFD;
    if (a1 == 9 && v6 == 16)
    {
      v3 = 9;
      v4 = a2;
      return v3 | (unint64_t)(v4 << 32);
    }
    if (a1 == 12 && v6 == 16)
    {
      v3 = 12;
      goto LABEL_13;
    }
    if (a3)
    {
      v3 = a1;
    }
    else if (((1 << a1) & 0x1802) != 0 || ((1 << a1) & 0x60) != 0 || a1 != 9)
    {
      v3 = a1;
    }
    else
    {
      v3 = 9;
    }
  }
  return v3 | (unint64_t)(v4 << 32);
}

unint64_t PCMakeCanonicalNCLCCode(unsigned int *a1)
{
  return PCMakeCanonicalNCLCCode(*a1, a1[1], a1[2]);
}

BOOL PCIsUsableNCLCCode(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v5;
  int v6;

  v1 = *a1;
  if (v1 > 0xC)
    return 0;
  v2 = a1[1];
  v3 = supportedPrimariesTable[v1];
  if (v2 > 0x12 || v3 == 0)
    return 0;
  v5 = a1[2];
  v6 = supportedTransfersTable[v2];
  return v5 <= 9 && v6 != 0 && supportedMatricesTable[v5] != 0;
}

unint64_t PCMakeRGBNCLCCode(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t PCMakeRGBNCLCCode(uint64_t a1)
{
  return *(_QWORD *)a1;
}

BOOL PCNCLCCodeIsKnownRGB(_DWORD *a1)
{
  return (a1[1] & 0xFFFFFFFD) != 0 && (*a1 & 0xFFFFFFFD) != 0;
}

BOOL PCNCLCCodeCompareRGB(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL operator!=(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2];
}

BOOL operator<(_DWORD *a1, _DWORD *a2)
{
  BOOL v2;
  int v3;
  int v4;

  v2 = *a1 < *a2;
  if (*a1 == *a2)
  {
    v3 = a1[1];
    v4 = a2[1];
    v2 = v3 < v4;
    if (v3 == v4)
      return a1[2] < a2[2];
  }
  return v2;
}

void *PCMD5::writeBytes(PCMD5 *this, char *__src, size_t __n)
{
  size_t v3;
  char *v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  void *result;

  v3 = __n;
  *(_QWORD *)this += __n;
  v6 = (char *)this + 28;
  v7 = *((unsigned int *)this + 151);
  if (v7 + __n >= 0x200)
  {
    v8 = &v6[v7];
    v9 = (512 - v7);
    do
    {
      memcpy(v8, __src, v9);
      PCMD5::flushBlocks((uint64_t)this, 8);
      __src += v9;
      *((_DWORD *)this + 151) = 0;
      v3 -= v9;
      v9 = 512;
      v8 = v6;
    }
    while (v3 > 0x1FF);
    v7 = 0;
  }
  result = memcpy(&v6[v7], __src, v3);
  *((_DWORD *)this + 151) += v3;
  return result;
}

uint64_t PCMD5::flushBlocks(uint64_t this, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  _DWORD *v86;

  v2 = *(_DWORD *)(this + 8);
  v3 = *(_DWORD *)(this + 12);
  v4 = *(_DWORD *)(this + 16);
  v5 = *(_DWORD *)(this + 20);
  v86 = (_DWORD *)this;
  if (a2)
  {
    v6 = (_DWORD *)(this + 44);
    do
    {
      v7 = *(v6 - 4);
      v8 = *(v6 - 3);
      HIDWORD(v9) = v2 + (v4 & v3 | v5 & ~v3) - 680876936 + v7;
      LODWORD(v9) = HIDWORD(v9);
      v10 = (v9 >> 25) + v3;
      HIDWORD(v9) = v5 + v8 - 389564586 + (v3 & v10 | v4 & ~v10);
      LODWORD(v9) = HIDWORD(v9);
      v11 = (v9 >> 20) + v10;
      v13 = *(v6 - 2);
      v12 = *(v6 - 1);
      HIDWORD(v9) = v4 + v13 + 606105819 + (v10 & v11 | v3 & ~v11);
      LODWORD(v9) = HIDWORD(v9);
      v14 = (v9 >> 15) + v11;
      HIDWORD(v9) = v3 + v12 - 1044525330 + (v11 & v14 | v10 & ~v14);
      LODWORD(v9) = HIDWORD(v9);
      v15 = (v9 >> 10) + v14;
      v16 = v6[1];
      HIDWORD(v9) = *v6 + v10 - 176418897 + (v14 & v15 | v11 & ~v15);
      LODWORD(v9) = HIDWORD(v9);
      v17 = (v9 >> 25) + v15;
      HIDWORD(v9) = v16 + v11 + 1200080426 + (v15 & v17 | v14 & ~v17);
      LODWORD(v9) = HIDWORD(v9);
      v18 = (v9 >> 20) + v17;
      v20 = v6[2];
      v19 = v6[3];
      HIDWORD(v9) = v20 + v14 - 1473231341 + (v17 & v18 | v15 & ~v18);
      LODWORD(v9) = HIDWORD(v9);
      v21 = (v9 >> 15) + v18;
      HIDWORD(v9) = v19 + v15 - 45705983 + (v18 & v21 | v17 & ~v21);
      LODWORD(v9) = HIDWORD(v9);
      v22 = (v9 >> 10) + v21;
      v23 = v6[4];
      v24 = v6[5];
      HIDWORD(v9) = v23 + v17 + 1770035416 + (v21 & v22 | v18 & ~v22);
      LODWORD(v9) = HIDWORD(v9);
      v25 = (v9 >> 25) + v22;
      HIDWORD(v9) = v24 + v18 - 1958414417 + (v22 & v25 | v21 & ~v25);
      LODWORD(v9) = HIDWORD(v9);
      v26 = (v9 >> 20) + v25;
      v27 = v6[6];
      v28 = v6[7];
      HIDWORD(v9) = v27 + v21 - 42063 + (v25 & v26 | v22 & ~v26);
      LODWORD(v9) = HIDWORD(v9);
      v29 = (v9 >> 15) + v26;
      HIDWORD(v9) = v28 + v22 - 1990404162 + (v26 & v29 | v25 & ~v29);
      LODWORD(v9) = HIDWORD(v9);
      v30 = (v9 >> 10) + v29;
      v32 = v6[8];
      v31 = v6[9];
      HIDWORD(v9) = v32 + v25 + 1804603682 + (v29 & v30 | v26 & ~v30);
      LODWORD(v9) = HIDWORD(v9);
      v33 = (v9 >> 25) + v30;
      HIDWORD(v9) = v31 + v26 - 40341101 + (v30 & v33 | v29 & ~v33);
      LODWORD(v9) = HIDWORD(v9);
      v34 = (v9 >> 20) + v33;
      v36 = v6[10];
      v35 = v6[11];
      HIDWORD(v9) = v36 + v29 - 1502002290 + (v33 & v34 | v30 & ~v34);
      LODWORD(v9) = HIDWORD(v9);
      v37 = (v9 >> 15) + v34;
      HIDWORD(v9) = v35 + v30 + 1236535329 + (v34 & v37 | v33 & ~v37);
      LODWORD(v9) = HIDWORD(v9);
      v38 = (v9 >> 10) + v37;
      HIDWORD(v9) = v8 + v33 + (v37 & ~v34) - 165796510 + (v38 & v34);
      LODWORD(v9) = HIDWORD(v9);
      v39 = (v9 >> 27) + v38;
      HIDWORD(v9) = v20 + v34 + (v38 & ~v37) - 1069501632 + (v39 & v37);
      LODWORD(v9) = HIDWORD(v9);
      v40 = (v9 >> 23) + v39;
      HIDWORD(v9) = v28 + v37 + (v39 & ~v38) + 643717713 + (v40 & v38);
      LODWORD(v9) = HIDWORD(v9);
      v41 = (v9 >> 18) + v40;
      HIDWORD(v9) = v7 + v38 + (v40 & ~v39) - 373897302 + (v41 & v39);
      LODWORD(v9) = HIDWORD(v9);
      v42 = (v9 >> 12) + v41;
      HIDWORD(v9) = v16 + v39 + (v41 & ~v40) - 701558691 + (v42 & v40);
      LODWORD(v9) = HIDWORD(v9);
      v43 = (v9 >> 27) + v42;
      HIDWORD(v9) = v27 + v40 + (v42 & ~v41) + 38016083 + (v43 & v41);
      LODWORD(v9) = HIDWORD(v9);
      v44 = (v9 >> 23) + v43;
      HIDWORD(v9) = v35 + v41 + (v43 & ~v42) - 660478335 + (v44 & v42);
      LODWORD(v9) = HIDWORD(v9);
      v45 = (v9 >> 18) + v44;
      HIDWORD(v9) = *v6 + v42 + (v44 & ~v43) - 405537848 + (v45 & v43);
      LODWORD(v9) = HIDWORD(v9);
      v46 = (v9 >> 12) + v45;
      HIDWORD(v9) = v24 + v43 + (v45 & ~v44) + 568446438 + (v46 & v44);
      LODWORD(v9) = HIDWORD(v9);
      v47 = (v9 >> 27) + v46;
      HIDWORD(v9) = v36 + v44 + (v46 & ~v45) - 1019803690 + (v47 & v45);
      LODWORD(v9) = HIDWORD(v9);
      v48 = (v9 >> 23) + v47;
      HIDWORD(v9) = v12 + v45 + (v47 & ~v46) - 187363961 + (v48 & v46);
      LODWORD(v9) = HIDWORD(v9);
      v49 = (v9 >> 18) + v48;
      HIDWORD(v9) = v23 + v46 + (v48 & ~v47) + 1163531501 + (v49 & v47);
      LODWORD(v9) = HIDWORD(v9);
      v50 = (v9 >> 12) + v49;
      HIDWORD(v9) = v31 + v47 + (v49 & ~v48) - 1444681467 + (v50 & v48);
      LODWORD(v9) = HIDWORD(v9);
      v51 = (v9 >> 27) + v50;
      HIDWORD(v9) = v13 + v48 + (v50 & ~v49) - 51403784 + (v51 & v49);
      LODWORD(v9) = HIDWORD(v9);
      v52 = (v9 >> 23) + v51;
      HIDWORD(v9) = v19 + v49 + (v51 & ~v50) + 1735328473 + (v52 & v50);
      LODWORD(v9) = HIDWORD(v9);
      v53 = (v9 >> 18) + v52;
      HIDWORD(v9) = v32 + v50 + (v52 & ~v51) - 1926607734 + (v53 & v51);
      LODWORD(v9) = HIDWORD(v9);
      v54 = (v9 >> 12) + v53;
      HIDWORD(v9) = v16 + v51 - 378558 + (v54 ^ v53 ^ v52);
      LODWORD(v9) = HIDWORD(v9);
      v55 = (v9 >> 28) + v54;
      HIDWORD(v9) = v23 + v52 - 2022574463 + (v55 ^ v54 ^ v53);
      LODWORD(v9) = HIDWORD(v9);
      v56 = (v9 >> 21) + v55;
      HIDWORD(v9) = v28 + v53 + 1839030562 + (v56 ^ v55 ^ v54);
      LODWORD(v9) = HIDWORD(v9);
      v57 = (v9 >> 16) + v56;
      HIDWORD(v9) = v36 + v54 - 35309556 + (v56 ^ v55 ^ v57);
      LODWORD(v9) = HIDWORD(v9);
      v58 = (v9 >> 9) + v57;
      HIDWORD(v9) = v8 + v55 - 1530992060 + (v57 ^ v56 ^ v58);
      LODWORD(v9) = HIDWORD(v9);
      v59 = (v9 >> 28) + v58;
      HIDWORD(v9) = *v6 + v56 + 1272893353 + (v58 ^ v57 ^ v59);
      LODWORD(v9) = HIDWORD(v9);
      v60 = (v9 >> 21) + v59;
      HIDWORD(v9) = v19 + v57 - 155497632 + (v59 ^ v58 ^ v60);
      LODWORD(v9) = HIDWORD(v9);
      v61 = (v9 >> 16) + v60;
      HIDWORD(v9) = v27 + v58 - 1094730640 + (v60 ^ v59 ^ v61);
      LODWORD(v9) = HIDWORD(v9);
      v62 = (v9 >> 9) + v61;
      HIDWORD(v9) = v31 + v59 + 681279174 + (v61 ^ v60 ^ v62);
      LODWORD(v9) = HIDWORD(v9);
      v63 = (v9 >> 28) + v62;
      HIDWORD(v9) = v7 + v60 - 358537222 + (v62 ^ v61 ^ v63);
      LODWORD(v9) = HIDWORD(v9);
      v64 = (v9 >> 21) + v63;
      HIDWORD(v9) = v12 + v61 - 722521979 + (v63 ^ v62 ^ v64);
      LODWORD(v9) = HIDWORD(v9);
      v65 = (v9 >> 16) + v64;
      HIDWORD(v9) = v20 + v62 + 76029189 + (v64 ^ v63 ^ v65);
      LODWORD(v9) = HIDWORD(v9);
      v66 = (v9 >> 9) + v65;
      HIDWORD(v9) = v24 + v63 - 640364487 + (v65 ^ v64 ^ v66);
      LODWORD(v9) = HIDWORD(v9);
      v67 = (v9 >> 28) + v66;
      HIDWORD(v9) = v32 + v64 - 421815835 + (v66 ^ v65 ^ v67);
      LODWORD(v9) = HIDWORD(v9);
      v68 = (v9 >> 21) + v67;
      HIDWORD(v9) = v35 + v65 + 530742520 + (v67 ^ v66 ^ v68);
      LODWORD(v9) = HIDWORD(v9);
      v69 = (v9 >> 16) + v68;
      HIDWORD(v9) = v13 + v66 - 995338651 + (v68 ^ v67 ^ v69);
      LODWORD(v9) = HIDWORD(v9);
      v70 = (v9 >> 9) + v69;
      HIDWORD(v9) = v7 + v67 - 198630844 + ((v70 | ~v68) ^ v69);
      LODWORD(v9) = HIDWORD(v9);
      v71 = (v9 >> 26) + v70;
      HIDWORD(v9) = v19 + v68 + 1126891415 + ((v71 | ~v69) ^ v70);
      LODWORD(v9) = HIDWORD(v9);
      v72 = (v9 >> 22) + v71;
      HIDWORD(v9) = v36 + v69 - 1416354905 + ((v72 | ~v70) ^ v71);
      LODWORD(v9) = HIDWORD(v9);
      v73 = (v9 >> 17) + v72;
      HIDWORD(v9) = v16 + v70 - 57434055 + ((v73 | ~v71) ^ v72);
      LODWORD(v9) = HIDWORD(v9);
      v74 = (v9 >> 11) + v73;
      HIDWORD(v9) = v32 + v71 + 1700485571 + ((v74 | ~v72) ^ v73);
      LODWORD(v9) = HIDWORD(v9);
      v75 = (v9 >> 26) + v74;
      HIDWORD(v9) = v12 + v72 - 1894986606 + ((v75 | ~v73) ^ v74);
      LODWORD(v9) = HIDWORD(v9);
      v76 = (v9 >> 22) + v75;
      HIDWORD(v9) = v27 + v73 - 1051523 + ((v76 | ~v74) ^ v75);
      LODWORD(v9) = HIDWORD(v9);
      v77 = (v9 >> 17) + v76;
      HIDWORD(v9) = v8 + v74 - 2054922799 + ((v77 | ~v75) ^ v76);
      LODWORD(v9) = HIDWORD(v9);
      v78 = (v9 >> 11) + v77;
      HIDWORD(v9) = v23 + v75 + 1873313359 + ((v78 | ~v76) ^ v77);
      LODWORD(v9) = HIDWORD(v9);
      v79 = (v9 >> 26) + v78;
      HIDWORD(v9) = v35 + v76 - 30611744 + ((v79 | ~v77) ^ v78);
      LODWORD(v9) = HIDWORD(v9);
      v80 = (v9 >> 22) + v79;
      HIDWORD(v9) = v20 + v77 - 1560198380 + ((v80 | ~v78) ^ v79);
      LODWORD(v9) = HIDWORD(v9);
      v81 = (v9 >> 17) + v80;
      HIDWORD(v9) = v31 + v78 + 1309151649 + ((v81 | ~v79) ^ v80);
      LODWORD(v9) = HIDWORD(v9);
      v82 = (v9 >> 11) + v81;
      HIDWORD(v9) = *v6 + v79 - 145523070 + ((v82 | ~v80) ^ v81);
      LODWORD(v9) = HIDWORD(v9);
      v83 = (v9 >> 26) + v82;
      HIDWORD(v9) = v28 + v80 - 1120210379 + ((v83 | ~v81) ^ v82);
      LODWORD(v9) = HIDWORD(v9);
      v84 = (v9 >> 22) + v83;
      HIDWORD(v9) = v13 + v81 + 718787259 + ((v84 | ~v82) ^ v83);
      LODWORD(v9) = HIDWORD(v9);
      v85 = (v9 >> 17) + v84;
      this = 3951481745;
      v2 += v83;
      HIDWORD(v9) = v24 + v82 - 343485551 + ((v85 | ~v83) ^ v84);
      LODWORD(v9) = HIDWORD(v9);
      v3 += v85 + (v9 >> 11);
      v4 += v85;
      v5 += v84;
      v6 += 16;
      --a2;
    }
    while (a2);
  }
  v86[2] = v2;
  v86[3] = v3;
  v86[4] = v4;
  v86[5] = v5;
  return this;
}

uint64_t PCMD5::finish(PCMD5 *this)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = *((unsigned int *)this + 151);
  v3 = ((v2 + 63) & 0xFFFFFFC0) - v2;
  if (v3 >= 9)
    v4 = -8;
  else
    v4 = 56;
  v5 = v4 + v3;
  *((_BYTE *)this + v2 + 28) = 0x80;
  v6 = (char *)this + v2 + 29;
  if ((_DWORD)v5 != 1)
  {
    bzero(v6, v5 - 1);
    v6 = (char *)this + v2 + v5 + 28;
  }
  v7 = 0;
  v8 = 8 * *(_QWORD *)this;
  do
  {
    v6[v7] = v8;
    v8 >>= 8;
    ++v7;
  }
  while (v7 != 8);
  v9 = v6 - (char *)this + 43;
  if (v6 - (char *)this - 20 >= 0)
    v9 = v6 - (char *)this - 20;
  result = PCMD5::flushBlocks((uint64_t)this, v9 >> 6);
  *((_BYTE *)this + 24) = 1;
  return result;
}

void PCMD5::getHash(PCMD5 *this@<X0>, PCHash128 *a2@<X8>)
{
  if (!*((_BYTE *)this + 24))
    PCMD5::finish(this);
  PCHash128::PCHash128(a2, *((_DWORD *)this + 2), *((_DWORD *)this + 3), *((_DWORD *)this + 4), *((_DWORD *)this + 5));
}

FILE *PCPrint(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return PCPrintVA(a1, &a9);
}

FILE *PCPrintVA(char *a1, va_list a2)
{
  pid_t v4;
  FILE *result;
  _BOOL4 v6;
  char __str[1024];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((_pcPrint_Initialized & 1) == 0)
  {
    _pcPrint_UseLogFile = 0;
    v6 = getenv("pcPrintUseLogFile") != 0;
    _pcPrint_UseLogFile = v6;
    _pcPrint_Initialized = 1;
    if (v6)
      goto LABEL_3;
    return (FILE *)vprintf(a1, a2);
  }
  if (!_pcPrint_UseLogFile)
    return (FILE *)vprintf(a1, a2);
LABEL_3:
  v4 = getpid();
  snprintf(__str, 0x400uLL, "/tmp/output.%d.log", v4);
  result = (FILE *)PCPrintVA::logFile;
  if (PCPrintVA::logFile || (result = fopen(__str, "w"), (PCPrintVA::logFile = (uint64_t)result) != 0))
  {
    vfprintf(result, a1, a2);
    return (FILE *)fflush((FILE *)PCPrintVA::logFile);
  }
  return result;
}

void PCException_WriteError::~PCException_WriteError(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

id *ProCore_Impl::PCNSRefImpl::operator=(id *a1, id *a2)
{
  id v4;

  if (*a2 != *a1)
  {
    v4 = *a2;

    *a1 = *a2;
  }
  return a1;
}

{
  if (*a2 != *a1)
  {

    *a1 = *a2;
    *a2 = 0;
  }
  return a1;
}

id ProCore_Impl::PCNSRefImpl::retain(id *this)
{
  return *this;
}

void ProCore_Impl::PCNSRefImpl::release(id *this)
{

}

void PCBufferWriteStream::PCBufferWriteStream(PCBufferWriteStream *this, int a2, int a3)
{
  _QWORD *v6;
  char *v7;
  PCException *exception;

  PCStream::PCStream(this);
  *v6 = &off_1E6512820;
  v7 = (char *)malloc_type_malloc(a2, 0x78F915A1uLL);
  *((_QWORD *)this + 1) = v7;
  if (!v7)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    *(_OWORD *)exception = 0u;
    *((_OWORD *)exception + 1) = 0u;
    *((_OWORD *)exception + 2) = 0u;
    *((_OWORD *)exception + 3) = 0u;
    PCException::PCException(exception);
    *(_QWORD *)exception = &unk_1E65127E0;
  }
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 3) = &v7[a2];
  *((_QWORD *)this + 4) = v7;
  *((_DWORD *)this + 10) = a2;
  *((_DWORD *)this + 11) = a3;
}

void sub_1B2991F7C(_Unwind_Exception *a1)
{
  OZChannelBase *v1;
  void *v2;
  const PCString *v4;

  __cxa_free_exception(v2);
  OZChannelBase::setRangeName(v1, v4);
  _Unwind_Resume(a1);
}

void PCBufferWriteStream::~PCBufferWriteStream(OZChannelBase *this, const PCString *a2)
{
  OZFactory *var1;

  this->var0 = (void **)&off_1E6512820;
  var1 = this->var1;
  if (var1)
    free(var1);
  OZChannelBase::setRangeName(this, a2);
}

{
  PCBufferWriteStream::~PCBufferWriteStream(this, a2);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCBufferWriteStream::read(PCBufferWriteStream *this, void *a2)
{
  return 0;
}

size_t PCBufferWriteStream::write(PCBufferWriteStream *this, const void *__src, size_t __n)
{
  char *v6;
  unint64_t v7;
  unsigned int v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  void *v13;
  size_t v14;

  v6 = (char *)*((_QWORD *)this + 2);
  v7 = *((_QWORD *)this + 3);
  if ((unint64_t)&v6[__n] >= v7)
  {
    v8 = (_DWORD)v6 + __n - v7;
    if (*((_DWORD *)this + 11) > v8)
      v8 = *((_DWORD *)this + 11);
    v9 = *((_DWORD *)this + 10) + v8;
    v10 = *((_QWORD *)this + 1);
    v11 = *((_QWORD *)this + 4) - v10;
    v12 = &v6[-v10];
    v13 = malloc_type_malloc(v9, 0x4242E35FuLL);
    memcpy(v13, *((const void **)this + 1), v11);
    free(*((void **)this + 1));
    v6 = &v12[(_QWORD)v13];
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = &v12[(_QWORD)v13];
    *((_DWORD *)this + 10) = v9;
    *((_QWORD *)this + 3) = (char *)v13 + v9;
    *((_QWORD *)this + 4) = (char *)v13 + v11;
  }
  memcpy(v6, __src, __n);
  v14 = *((_QWORD *)this + 2) + __n;
  *((_QWORD *)this + 2) = v14;
  if (v14 > *((_QWORD *)this + 4))
    *((_QWORD *)this + 4) = v14;
  return __n;
}

uint64_t PCBufferWriteStream::getPos(PCBufferWriteStream *this)
{
  return *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
}

uint64_t PCBufferWriteStream::setPos(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 16) = *(_QWORD *)(this + 8) + a2;
  return this;
}

void PCBufferWriteStream::getError(PCSharedCount *a1@<X8>)
{
  PCSharedCount::PCSharedCount(a1);
}

CFDataRef PCBufferWriteStream::copyData(const UInt8 **this)
{
  const __CFAllocator *v2;
  const UInt8 *v3;
  uint64_t v4;
  char v6;

  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v6 = 0;
  (*((void (**)(const UInt8 **, char *, uint64_t))*this + 3))(this, &v6, 1);
  v3 = this[1];
  v4 = (uint64_t)(this[2] - 1);
  this[2] = (const UInt8 *)v4;
  return CFDataCreate(v2, v3, v4 - (_QWORD)v3);
}

void PCStream::PCStream(PCStream *this)
{
  *(_QWORD *)this = off_1E6512880;
}

uint64_t PCStream::operator<<(uint64_t a1, char *__s)
{
  size_t v4;

  if (__s && *__s)
  {
    if (__s[1])
      v4 = strlen(__s);
    else
      v4 = 1;
    (*(void (**)(uint64_t, char *, size_t))(*(_QWORD *)a1 + 24))(a1, __s, v4);
  }
  return a1;
}

void PCURL::PCURL(PCURL *this, const char *__s, Boolean a3)
{
  CFIndex v6;

  v6 = strlen(__s);
  if (v6)
    v6 = (CFIndex)CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)__s, v6, a3);
  *(_QWORD *)this = v6;
}

void PCURL::PCURL(PCURL *this, CFTypeRef cf)
{
  if (cf)
    CFRetain(cf);
  *(_QWORD *)this = cf;
}

void PCURL::PCURL(PCURL *this, PCString *a2, Boolean a3)
{
  int v6;
  const __CFAllocator *v7;
  __CFString *v8;
  CFURLRef v9;
  PCString v10;

  PCURL::PCURL((PCURL *)&v10, CFSTR("://"));
  v6 = PCString::find(a2, &v10);
  PCString::~PCString(&v10);
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v8 = PCString::cf_str(a2);
  if (v6 < 0)
    v9 = CFURLCreateWithFileSystemPath(v7, v8, kCFURLPOSIXPathStyle, a3);
  else
    v9 = CFURLCreateWithString(v7, v8, 0);
  *(_QWORD *)this = v9;
}

void sub_1B299231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PCURL::PCURL(PCURL *this, CFURLRef *a2)
{
  const __CFString *v3;

  *(_QWORD *)this = 0;
  if (*a2)
  {
    v3 = CFURLGetString(*a2);
    *(_QWORD *)this = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 0);
  }
}

void PCURL::~PCURL(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

const void **PCURL::operator=(const void **a1, const __CFURL **a2)
{
  const void *v4;
  const __CFURL *v5;
  const __CFAllocator *v6;
  const __CFString *v7;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = 0;
  v5 = *a2;
  if (*a2)
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = CFURLGetString(v5);
    *a1 = CFURLCreateWithString(v6, v7, 0);
  }
  return a1;
}

void PCURL::getAbsoluteString(const __CFURL **this@<X0>, PCURL *a2@<X8>)
{
  const __CFURL *v3;
  const __CFAllocator *v4;
  const __CFString *v5;
  CFStringRef Copy;

  v3 = *this;
  if (v3)
  {
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v5 = CFURLGetString(v3);
    Copy = CFStringCreateCopy(v4, v5);
    PCURL::PCURL(a2, Copy);
    if (Copy)
      CFRelease(Copy);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B2992484(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCURL::getPathAsFileSystemString(CFURLRef *this@<X0>, PCURL *a2@<X8>)
{
  const __CFURL *PathComponent;
  CFStringRef v4;

  if (*this)
  {
    PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *this);
    v4 = CFURLCopyFileSystemPath(PathComponent, kCFURLPOSIXPathStyle);
    PCURL::PCURL(a2, v4);
    if (v4)
      CFRelease(v4);
    CFRelease(PathComponent);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B2992518(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCURL::getContainingFolderAsURLString(CFURLRef *this@<X0>, PCURL *a2@<X8>)
{
  const __CFAllocator *v3;
  const __CFURL *PathComponent;
  const __CFString *v5;
  CFStringRef Copy;

  if (*this)
  {
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *this);
    v5 = CFURLGetString(PathComponent);
    Copy = CFStringCreateCopy(v3, v5);
    PCURL::PCURL(a2, Copy);
    if (PathComponent)
      CFRelease(PathComponent);
    if (Copy)
      CFRelease(Copy);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B29925BC(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCURL::getFilename(const __CFURL **this@<X0>, PCString *a2@<X8>)
{
  const __CFURL *v3;
  const __CFString *PathComponent;

  v3 = *this;
  if (v3)
  {
    PathComponent = CFURLCopyLastPathComponent(v3);
    PCString::PCString(a2, PathComponent, 0);
    if (PathComponent)
      CFRelease(PathComponent);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B2992628(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCURL::getShortFilename(CFURLRef *this@<X0>, PCString *a2@<X8>)
{
  const __CFURL *v3;
  const __CFString *PathComponent;

  if (*this)
  {
    v3 = CFURLCreateCopyDeletingPathExtension((CFAllocatorRef)*MEMORY[0x1E0C9AE00], *this);
    PathComponent = CFURLCopyLastPathComponent(v3);
    PCString::PCString(a2, PathComponent, 0);
    if (PathComponent)
      CFRelease(PathComponent);
    CFRelease(v3);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B29926BC(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCURL::getExtension(const __CFURL **this@<X0>, PCURL *a2@<X8>)
{
  const __CFURL *v3;
  CFStringRef v4;

  v3 = *this;
  if (v3)
  {
    v4 = CFURLCopyPathExtension(v3);
    PCURL::PCURL(a2, v4);
    if (v4)
      CFRelease(v4);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B2992724(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCURL::getAsFileSystemString(const __CFURL **this@<X0>, PCString *a2@<X8>)
{
  const __CFURL *v3;
  const __CFString *v4;

  v3 = *this;
  if (v3)
  {
    v4 = CFURLCopyFileSystemPath(v3, kCFURLPOSIXPathStyle);
    PCString::PCString(a2, v4, 0);
    if (v4)
      CFRelease(v4);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

void sub_1B2992794(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCURL::getAsURLString(const __CFURL **this@<X0>, PCURL *a2@<X8>)
{
  const __CFURL *v3;
  CFStringRef v4;

  v3 = *this;
  if (v3)
  {
    v4 = CFURLGetString(v3);
    PCURL::PCURL(a2, v4);
  }
  else
  {
    PCSharedCount::PCSharedCount((PCSharedCount *)a2);
  }
}

UInt8 *PCURL::getString(const __CFURL **this, unsigned int *a2)
{
  const __CFURL *v2;
  const __CFString *v4;
  const __CFString *v5;
  CFIndex v6;
  UInt8 *v7;
  unsigned int v8;
  CFIndex usedBufLen;
  CFRange v11;

  *a2 = 0;
  v2 = *this;
  if (!v2)
    return 0;
  v4 = CFURLCopyFileSystemPath(v2, kCFURLPOSIXPathStyle);
  if (!v4)
    return 0;
  v5 = v4;
  usedBufLen = 0;
  v6 = CFStringGetLength(v4) + 10;
  v7 = (UInt8 *)operator new[]();
  v11.length = CFStringGetLength(v5);
  v11.location = 0;
  CFStringGetBytes(v5, v11, 0, 0x3Fu, 0, v7, v6, &usedBufLen);
  CFRelease(v5);
  v8 = usedBufLen;
  v7[usedBufLen] = 0;
  *a2 = v8;
  return v7;
}

uint64_t PCURL::isSequence(const __CFURL **this)
{
  UInt8 *String;
  uint64_t v2;
  int v3;
  UInt8 *v4;
  int v5;
  BOOL v6;
  unsigned int v9;

  if (!*this)
    return 0;
  v9 = 0;
  String = PCURL::getString(this, &v9);
  v2 = 0;
  if (v9 < 2)
  {
LABEL_19:
    if (!String)
      return v2;
LABEL_20:
    MEMORY[0x1B5E2914C](String, 0x1000C8077774924);
    return v2;
  }
  v3 = 0;
  v4 = &String[v9 - 1];
  while (1)
  {
    v5 = *v4;
    if (v5 == 47
      || (v3 & 1) != 0
      && ((v5 - 35) <= 0x38
        ? (v6 = ((1 << (v5 - 35)) & 0x100000020000001) == 0)
        : (v6 = 1),
          v6))
    {
LABEL_18:
      v2 = 0;
      goto LABEL_19;
    }
    if (v5 == 93)
      v3 = 1;
    if (v5 == 91 && v3 != 0)
      break;
    if (--v4 <= String)
      goto LABEL_18;
  }
  v2 = 1;
  if (String)
    goto LABEL_20;
  return v2;
}

uint64_t PCURL::getSequenceStart(PCURL *this, char *a2, int a3)
{
  uint64_t result;
  char v5;
  char *v6;
  int v7;
  unsigned int v8;

  result = 0xFFFFFFFFLL;
  v8 = -1;
  if (a3 != 1)
  {
    v5 = 0;
    v6 = &a2[a3 - 1];
    while (1)
    {
      v7 = *v6;
      if (v7 == 58)
      {
        if ((v5 & 1) != 0 && sscanf(v6 + 1, "%d", &v8) == 1)
          return v8;
        v5 = 1;
      }
      else if (v7 == 47)
      {
        return v8;
      }
      if (--v6 <= a2)
        return v8;
    }
  }
  return result;
}

uint64_t PCURL::getSequenceEnd(PCURL *this, char *a2, int a3)
{
  uint64_t result;
  char *v5;
  int v6;
  int v7;
  unsigned int v9;

  result = 0xFFFFFFFFLL;
  v9 = -1;
  if (a3 != 1)
  {
    v5 = &a2[a3 - 1];
    do
    {
      while (1)
      {
        v6 = *v5;
        if (v6 == 58)
          break;
        if (v6 != 47 && --v5 > a2)
          continue;
        return v9;
      }
      v7 = sscanf(v5-- + 1, "%d", &v9);
    }
    while (v7 != 1 && v5 > a2);
    return v9;
  }
  return result;
}

uint64_t PCURL::getSequenceStart(const __CFURL **this)
{
  UInt8 *String;
  uint64_t SequenceStart;
  unsigned int v4;

  v4 = 0;
  String = PCURL::getString(this, &v4);
  SequenceStart = PCURL::getSequenceStart((PCURL *)String, (char *)String, v4);
  if (String)
    MEMORY[0x1B5E2914C](String, 0x1000C8077774924);
  return SequenceStart;
}

uint64_t PCURL::getSequenceEnd(const __CFURL **this)
{
  UInt8 *String;
  uint64_t SequenceEnd;
  unsigned int v4;

  v4 = 0;
  String = PCURL::getString(this, &v4);
  SequenceEnd = PCURL::getSequenceEnd((PCURL *)String, (char *)String, v4);
  if (String)
    MEMORY[0x1B5E2914C](String, 0x1000C8077774924);
  return SequenceEnd;
}

uint64_t PCURL::getSequenceLength(const __CFURL **this)
{
  UInt8 *String;
  unsigned int v2;
  PCURL *SequenceEnd;
  int v4;
  int SequenceStart;
  unsigned int v7;

  v7 = 0;
  String = PCURL::getString(this, &v7);
  v2 = v7;
  SequenceEnd = (PCURL *)PCURL::getSequenceEnd((PCURL *)String, (char *)String, v7);
  v4 = (int)SequenceEnd;
  SequenceStart = PCURL::getSequenceStart(SequenceEnd, (char *)String, v2);
  if (String)
    MEMORY[0x1B5E2914C](String, 0x1000C8077774924);
  return (v4 - SequenceStart + 1);
}

PCURL *PCURL::getURLforIndex(const __CFURL **this, int a2)
{
  UInt8 *String;
  unsigned int v5;
  PCURL *SequenceStart;
  int v7;
  int SequenceEnd;
  unsigned int v9;
  char v10;
  int v11;
  UInt8 *v12;
  int v13;
  PCURL *v15;
  int v17;
  char v18;
  char *v19;
  unsigned __int8 v20;
  uint64_t v21;
  const __CFString *v22;
  const __CFAllocator *v23;
  CFMutableStringRef MutableCopy;
  const char *v25;
  const __CFString *v26;
  const __CFString *v27;
  CFIndex Length;
  UInt8 *v29;
  int v30;
  CFIndex v31;
  int v32;
  int v33;
  PCString v35;
  PCString v36;
  unsigned int v37;
  char v38[32];
  char __str[32];
  char cStr[128];
  uint64_t v41;
  CFRange v42;
  CFRange v43;

  v41 = *MEMORY[0x1E0C80C00];
  if (!*this)
    return 0;
  v37 = 0;
  String = PCURL::getString(this, &v37);
  v5 = v37;
  SequenceStart = (PCURL *)PCURL::getSequenceStart((PCURL *)String, (char *)String, v37);
  v7 = (int)SequenceStart;
  SequenceEnd = PCURL::getSequenceEnd(SequenceStart, (char *)String, v5);
  if (SequenceEnd - v7 < a2 && ((SequenceEnd | v7) & 0x80000000) == 0 || (v9 = v5 - 1, v5 == 1))
  {
LABEL_16:
    if (String)
      MEMORY[0x1B5E2914C](String, 0x1000C8077774924);
    return 0;
  }
  v10 = 0;
  v11 = v7 & ~(v7 >> 31);
  v12 = &String[v9];
  while (1)
  {
    if (*v12 == 47)
      goto LABEL_16;
    v13 = *v12;
    if ((v10 & 1) == 0)
    {
      v10 |= v13 == 93;
      goto LABEL_15;
    }
    if ((v13 - 35) > 0x38 || ((1 << (v13 - 35)) & 0x100000020000001) == 0)
      goto LABEL_16;
    if (v13 == 91 && (v10 & 1) != 0)
      break;
    v10 = 1;
LABEL_15:
    if (--v12 <= String)
      goto LABEL_16;
  }
  v17 = 0;
  v18 = 0;
  v19 = cStr;
  v20 = 91;
  v21 = 1;
  while (v20 <= 0x5Au)
  {
    if (v20 == 35)
    {
      ++v17;
      *(_WORD *)v19 = 12837;
      v19[2] = 51;
      goto LABEL_28;
    }
    if (v20 == 64)
    {
      *v19++ = 64;
      v18 = 1;
    }
LABEL_29:
    v20 = v12[v21++];
  }
  if (v20 == 91)
  {
    *(_WORD *)v19 = 13605;
    v19[2] = 66;
LABEL_28:
    v19 += 3;
    goto LABEL_29;
  }
  if (v20 != 93)
    goto LABEL_29;
  *(_DWORD *)v19 = 4470053;
  v22 = CFURLGetString(*this);
  v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v22);
  if ((v18 & 1) != 0)
  {
    snprintf(v38, 0x20uLL, "%d");
  }
  else
  {
    snprintf(__str, 0x20uLL, "%%0%dd", v17);
    v25 = fmtcheck(__str, "%d");
    snprintf(v38, 0x20uLL, v25, (v11 + a2));
  }
  v26 = CFStringCreateWithCString(v23, cStr, 0x600u);
  v27 = CFStringCreateWithCString(v23, v38, 0x600u);
  v43.length = CFStringGetLength(MutableCopy);
  v43.location = 0;
  CFStringFindAndReplace(MutableCopy, v26, v27, v43, 0);
  Length = CFStringGetLength(MutableCopy);
  v29 = &String[v37 - 1];
  if (v37 == 1)
  {
    v31 = Length;
LABEL_48:
    if (*v29 == 58)
    {
      v42.location = v31 - 1;
      v42.length = Length - (v31 - 1);
      CFStringDelete(MutableCopy, v42);
    }
  }
  else
  {
    v30 = 0;
    v31 = Length;
    while (1)
    {
      v32 = (char)*v29;
      if (v32 == 47 || v32 < 0)
        break;
      v33 = *v29;
      if (v33 == 58 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *v29 + 60) & 0x400) != 0)
      {
        if (v33 == 58)
          ++v30;
        if (v30 != 2)
        {
          --v29;
          --v31;
          if (v29 > String)
            continue;
        }
      }
      goto LABEL_48;
    }
  }
  PCURL::PCURL((PCURL *)&v36, MutableCopy);
  v15 = (PCURL *)operator new();
  PCURL::PCURL((PCURL *)&v35, MutableCopy);
  PCURL::PCURL(v15, &v35, 0);
  PCString::~PCString(&v35);
  if (String)
    MEMORY[0x1B5E2914C](String, 0x1000C8077774924);
  CFRelease(v26);
  CFRelease(v27);
  CFRelease(MutableCopy);
  PCString::~PCString(&v36);
  return v15;
}

void sub_1B2992FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  uint64_t v12;

  PCString::~PCString(&a11);
  MEMORY[0x1B5E29170](v12, 0x60C4044C4A2DFLL);
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

double PCCalculus::ellipticE(PCCalculus *this, double result, double a3)
{
  unsigned int v4;
  double v5;
  double v6;
  long double v7;
  double v8;
  double v9;
  double v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  long double v19;
  long double v20;
  long double v21;
  PCCalculus *v22;
  double v23;
  int v24;
  double v25;
  int v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;

  if (a3 != 0.0)
  {
    v4 = vcvtmd_s64_f64(result / 1.57079633);
    v5 = (double)(int)((v4 & 1) + v4);
    v6 = result - v5 * 1.57079633;
    if (v6 >= 0.0)
      v7 = result - v5 * 1.57079633;
    else
      v7 = -v6;
    v8 = 1.0;
    v9 = 1.0 - a3;
    if (1.0 - a3 <= 0.0 || v9 > 1.0)
    {
      if (v9 != 0.0)
        v8 = acos(-5.0);
    }
    else
    {
      v11 = 0.000153552577;
      v12 = 8u;
      do
      {
        v11 = v9 * v11 + *(double *)((char *)&PCCalculus::ellpe(double)::P + v12);
        v12 += 8;
      }
      while ((_DWORD)v12 != 88);
      v13 = 0.0000327954899;
      v14 = 8u;
      do
      {
        v13 = v9 * v13 + *(double *)((char *)&PCCalculus::ellpe(double)::Q + v14);
        v14 += 8;
      }
      while ((_DWORD)v14 != 80);
      v8 = v11 - log(1.0 - a3) * (v9 * v13);
    }
    if (v9 == 0.0)
    {
      v15 = sin(v7);
    }
    else
    {
      v39 = v8;
      v16 = tan(v7);
      v17 = sqrt(v9);
      if (fabs(v16) <= 10.0 || (v18 = 1.0 / (v17 * v16), fabs(v18) >= 10.0))
      {
        v37 = v6;
        v38 = v5;
        if (fabs(sqrt(a3)) <= 1.11022302e-16)
        {
          v25 = 0.0;
          v27 = 1.0;
          v31 = 1.0;
          v30 = 0.0;
        }
        else
        {
          v24 = 0;
          v25 = 0.0;
          v26 = 1;
          v27 = 1.0;
          do
          {
            v7 = (double)v24 * 3.14159265 + v7 + atan(v17 / v27 * v16);
            v24 = vcvtmd_s64_f64((v7 + 1.57079633) / 3.14159265);
            v16 = (v17 / v27 + 1.0) * v16 / (1.0 - v16 * (v17 / v27 * v16));
            v28 = (v27 - v17) * 0.5;
            v29 = sqrt(v27 * v17);
            v27 = (v27 + v17) * 0.5;
            v26 *= 2;
            v25 = v25 + v28 * sin(v7);
            v17 = v29;
          }
          while (fabs(v28 / v27) > 1.11022302e-16);
          v30 = (double)v24 * 3.14159265;
          v31 = (double)v26;
        }
        v8 = v39;
        if (v9 < 0.0 || v9 > 1.0)
        {
          v36 = asin(-5.0);
        }
        else if (v9 <= 1.11022302e-16)
        {
          v36 = log(v9) * -0.5 + 1.38629436;
        }
        else
        {
          v32 = 0.000137982865;
          v33 = 8u;
          do
          {
            v32 = v9 * v32 + *(double *)((char *)&PCCalculus::ellpk(double)::P + v33);
            v33 += 8;
          }
          while ((_DWORD)v33 != 88);
          v34 = 0.0000294078955;
          v35 = 8u;
          do
          {
            v34 = v9 * v34 + *(double *)((char *)&PCCalculus::ellpk(double)::Q + v35);
            v35 += 8;
          }
          while ((_DWORD)v35 != 88);
          v36 = v32 - log(v9) * v34;
          v8 = v39;
        }
        v15 = v25 + v8 / v36 * ((v30 + atan(v16)) / (v27 * v31));
        v6 = v37;
        v5 = v38;
      }
      else
      {
        v19 = atan(v18);
        v20 = sin(v7) * a3;
        v8 = v39;
        v21 = v39 + v20 * sin(v19);
        PCCalculus::ellipticE(v22, v19, a3);
        v15 = v21 - v23;
      }
    }
    if (v6 < 0.0)
      v15 = -v15;
    return v8 * v5 + v15;
  }
  return result;
}

double PCCalculus::ellipseLineIntegral(PCCalculus *this, double a2, double a3, double a4)
{
  double v5;
  double v6;
  double v7;
  double v8;
  PCCalculus *v9;

  if (a3 <= a4)
    v5 = a3;
  else
    v5 = a4;
  if (a3 < a4)
    a3 = a4;
  v6 = v5 * v5;
  v7 = a3 * a3;
  v8 = v5 * v5 + a3 * a3 + cos(a2 + a2) * (a3 * a3 - v5 * v5);
  return sqrt(v8) * PCCalculus::ellipticE(v9, a2, sqrt(1.0 - v6 / v7)) / sqrt(v8 / v7);
}

double doInverseToneMap_BT2390(float32x4_t a1)
{
  simd_float4 v1;
  simd_float4 v2;
  int32x4_t v3;
  float32x4_t v10;
  simd_float4 v11;
  simd_float4 v12;
  float32x4_t v13;
  float v14;
  float v15;
  float32x4_t v16;
  double result;
  int32x4_t v19;
  float32x4_t v20;

  v19 = vcltzq_f32(a1);
  v1 = (simd_float4)vabsq_f32(a1);
  v1.i32[3] = 0;
  v2 = _simd_pow_f4(v1, (simd_float4)xmmword_1B3051520);
  v3 = v19;
  v3.i32[3] = 0;
  __asm
  {
    FMOV            V2.4S, #1.0
    FMOV            V3.4S, #-1.0
  }
  v10 = vmulq_f32(vmulq_f32((float32x4_t)v2, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v3), _Q3, _Q2)), (float32x4_t)vdupq_n_s32(0x3E87AE14u));
  v20 = v10;
  v10.i32[3] = 0;
  v11 = (simd_float4)vmaxnmq_f32(v10, (float32x4_t)0);
  v11.i32[3] = 0;
  v12 = _simd_pow_f4(v11, (simd_float4)xmmword_1B3058EC0);
  v13 = vmulq_f32((float32x4_t)v12, (float32x4_t)xmmword_1B3058ED0);
  v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
  v15 = 1.0;
  if (v14 != 0.0)
  {
    v16 = vmulq_f32(v20, (float32x4_t)xmmword_1B3058ED0);
    v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]/ v14;
  }
  __asm { FMOV            V1.4S, #12.0 }
  *(_QWORD *)&result = vmulq_f32(vmulq_n_f32((float32x4_t)v12, v15), _Q1).u64[0];
  return result;
}

double toneMap_BT2446_A_DisplayLinearToGamma(float32x4_t a1)
{
  simd_float4 v1;
  float32x4_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  int32x2_t v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  double result;
  float32x4_t v14;
  simd_float4 v15;

  a1.i32[3] = 0;
  v1 = (simd_float4)vmaxnmq_f32(a1, (float32x4_t)0);
  v1.i32[3] = 0;
  v15 = _simd_pow_f4(v1, (simd_float4)xmmword_1B3058EE0);
  v2 = vmulq_f32((float32x4_t)v15, (float32x4_t)xmmword_1B3058EF0);
  v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1)));
  v3 = logf((float)(12.26 * v14.f32[0]) + 1.0) / 2.5847;
  if (v3 <= 0.7399)
  {
    v6 = v3 * 1.077;
  }
  else
  {
    if (v3 >= 0.9909)
    {
      v5 = 0.5;
      v4 = v3 * 0.5;
    }
    else
    {
      v4 = v3 * (float)((float)(v3 * -1.151) + 2.7811);
      v5 = -0.6302;
    }
    v6 = v4 + v5;
  }
  *(float *)v7.i32 = (float)(powf(5.697, v6) + -1.0) / 4.697;
  v8 = v14.f32[0] * 1.1;
  if ((float)(v14.f32[0] * 1.1) < 0.000000059605)
    v8 = 0.000000059605;
  v9 = *(float *)v7.i32 / v8;
  v10 = (float)(vsubq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), v14).f32[0] / 1.8814) * v9;
  v11 = (float)(vsubq_f32((float32x4_t)v15, v14).f32[0] / 1.4746) * v9;
  v12 = v11 * 0.1;
  if ((float)(v11 * 0.1) < 0.0)
    v12 = 0.0;
  *(float *)v7.i32 = *(float *)v7.i32 - v12;
  *(_QWORD *)&result = vmlaq_n_f32(vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v7, 0), (float32x4_t)xmmword_1B3058F00, v10), (float32x4_t)xmmword_1B3058F10, v11).u64[0];
  return result;
}

double doInverseToneMap_BT2446_A(float32x4_t a1)
{
  float v1;
  float v2;
  float32x2_t v3;
  float32x2_t v4;
  float32x4_t v5;
  float32x4_t v6;
  simd_float4 v7;
  float32x4_t v8;
  float v9;
  double result;
  float v11;
  int8x16_t v12;
  simd_float4 v13;

  v12 = (int8x16_t)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B3058F20, a1.f32[0]), (float32x4_t)xmmword_1B3058F30, *(float32x2_t *)a1.f32, 1), (float32x4_t)xmmword_1B3058F40, a1, 2);
  v1 = powf(255.0 * *(float *)v12.i32, flt_1B3059068[(float)(255.0 * *(float *)v12.i32) > 70.0]+ (float)((float)(255.0 * *(float *)v12.i32)* (float)(flt_1B3059060[(float)(255.0 * *(float *)v12.i32) > 70.0]+ (float)((float)(255.0 * *(float *)v12.i32)* flt_1B3059058[(float)(255.0 * *(float *)v12.i32) > 70.0]))));
  v2 = 1.0;
  if (*(float *)v12.i32 > 0.0)
    v2 = (float)(v1 / *(float *)v12.i32) * 1.075;
  v3 = vmul_n_f32((float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 4uLL), v2);
  v4 = vmul_f32(v3, (float32x2_t)0x3F1243FE3E287FCCLL);
  v5.i32[3] = 0;
  v5.f32[0] = v1 + vmuls_lane_f32(1.4746, v3, 1);
  v5.f32[1] = (float)(v1 - v4.f32[0]) - v4.f32[1];
  v5.f32[2] = v1 + (float)(1.8814 * v3.f32[0]);
  v6 = vmaxnmq_f32(v5, (float32x4_t)0);
  v6.i32[3] = 0;
  v7 = (simd_float4)vdivq_f32(vminnmq_f32(v6, (float32x4_t)xmmword_1B3058F50), (float32x4_t)vdupq_n_s32(0x447A0000u));
  v7.i32[3] = 0;
  v13 = _simd_pow_f4(v7, (simd_float4)xmmword_1B3058F60);
  v8 = vmulq_f32((float32x4_t)v13, (float32x4_t)xmmword_1B3058EF0);
  v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
  v9 = powf(v11, -0.16667) * 12.0;
  if (v11 <= 0.0)
    v9 = 0.0;
  *(_QWORD *)&result = vmulq_n_f32((float32x4_t)v13, v9).u64[0];
  return result;
}

double doToneMap_OS(float32x4_t a1)
{
  float32x4_t v1;
  float v2;
  float32x4_t v3;
  float32x4_t v4;
  simd_float4 v5;
  simd_float4 v6;
  int32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v16;
  simd_float4 v17;
  simd_float4 v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  simd_float4 v22;
  simd_float4 v23;
  int32x4_t v24;
  double result;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float v29;
  int8x16_t v30;
  int32x4_t v32;
  int8x16_t v33;

  v1 = vmulq_f32(a1, (float32x4_t)xmmword_1B3058EF0);
  v29 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2), vaddq_f32(v1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1.f32, 1))).f32[0];
  v2 = powf(v29, -0.15409) * 0.12221;
  if (v29 <= 0.0)
    v2 = 0.0;
  v3 = vmulq_n_f32(a1, v2);
  v4 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B3058F70, v3.f32[0]), (float32x4_t)xmmword_1B3058F80, *(float32x2_t *)v3.f32, 1), (float32x4_t)xmmword_1B3058F90, v3, 2);
  v32 = vcltzq_f32(v4);
  v26 = vabsq_f32(v4);
  v5 = (simd_float4)v26;
  v5.i32[3] = 0;
  v6 = _simd_pow_f4(v5, (simd_float4)xmmword_1B3058EE0);
  v7 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v26);
  v7.i32[3] = 0;
  v8 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v7), (int8x16_t)vmulq_f32(v26, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)vaddq_f32(vmulq_f32((float32x4_t)v6, (float32x4_t)vdupq_n_s32(0x3F870A3Du)), (float32x4_t)vdupq_n_s32(0xBD6147AE)));
  v9 = v32;
  v9.i32[3] = 0;
  __asm { FMOV            V2.4S, #1.0 }
  v30 = _Q2;
  __asm { FMOV            V3.4S, #-1.0 }
  v33 = _Q3;
  v16 = vmulq_f32(v8, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v9), _Q3, _Q2));
  v27 = vcltzq_f32(v16);
  v17 = (simd_float4)vabsq_f32(v16);
  v17.i32[3] = 0;
  v18 = _simd_pow_f4(v17, (simd_float4)xmmword_1B3058FA0);
  v19 = v27;
  v19.i32[3] = 0;
  v20 = vmulq_f32((float32x4_t)v18, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v19), v33, v30));
  v21 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B3058FB0, v20.f32[0]), (float32x4_t)xmmword_1B3058FC0, *(float32x2_t *)v20.f32, 1), (float32x4_t)xmmword_1B3058FD0, v20, 2);
  v28 = vcltzq_f32(v21);
  v22 = (simd_float4)vabsq_f32(v21);
  v22.i32[3] = 0;
  v23 = _simd_pow_f4(v22, (simd_float4)xmmword_1B3058FE0);
  v24 = v28;
  v24.i32[3] = 0;
  *(_QWORD *)&result = vmulq_f32((float32x4_t)v23, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v24), v33, v30)).u64[0];
  return result;
}

double doInverseToneMap_OS(float32x4_t a1)
{
  simd_float4 v1;
  simd_float4 v2;
  int32x4_t v3;
  float32x4_t v10;
  float32x4_t v11;
  simd_float4 v12;
  simd_float4 v13;
  int32x4_t v14;
  float32x4_t v15;
  simd_float4 v16;
  simd_float4 v17;
  int32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float v23;
  double result;
  float32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int8x16_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;

  v29 = vcltzq_f32(a1);
  v1 = (simd_float4)vabsq_f32(a1);
  v1.i32[3] = 0;
  v2 = _simd_pow_f4(v1, (simd_float4)xmmword_1B3058FA0);
  v3 = v29;
  v3.i32[3] = 0;
  __asm
  {
    FMOV            V2.4S, #1.0
    FMOV            V3.4S, #-1.0
  }
  v28 = _Q2;
  v30 = _Q3;
  v10 = vmulq_f32((float32x4_t)v2, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v3), _Q3, _Q2));
  v11 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B3058F70, v10.f32[0]), (float32x4_t)xmmword_1B3058F80, *(float32x2_t *)v10.f32, 1), (float32x4_t)xmmword_1B3058F90, v10, 2);
  v26 = vcltzq_f32(v11);
  v12 = (simd_float4)vabsq_f32(v11);
  v12.i32[3] = 0;
  v13 = _simd_pow_f4(v12, (simd_float4)xmmword_1B3058FE0);
  v14 = v26;
  v14.i32[3] = 0;
  v15 = vmulq_f32((float32x4_t)v13, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v14), v30, v28));
  v25 = vabsq_f32(v15);
  v27 = vcltzq_f32(v15);
  v16 = (simd_float4)vdivq_f32(vaddq_f32(v25, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
  v16.i32[3] = 0;
  v17 = _simd_pow_f4(v16, (simd_float4)xmmword_1B3058F60);
  v18 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25E354u), v25);
  v18.i32[3] = 0;
  v19 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v18), (int8x16_t)vdivq_f32(v25, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v17);
  v20 = v27;
  v20.i32[3] = 0;
  v21 = vmulq_f32(v19, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v20), v30, v28));
  v31 = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B3058FB0, v21.f32[0]), (float32x4_t)xmmword_1B3058FC0, *(float32x2_t *)v21.f32, 1), (float32x4_t)xmmword_1B3058FD0, v21, 2);
  v22 = vmulq_f32(v31, (float32x4_t)xmmword_1B3058EF0);
  *(float *)v28.i32 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0];
  v23 = powf(*(float *)v28.i32, 0.18216) * 12.0;
  if (*(float *)v28.i32 <= 0.0)
    v23 = 0.0;
  *(_QWORD *)&result = vmulq_n_f32(v31, v23).u64[0];
  return result;
}

double doToneMap_OSFA(float32x4_t a1)
{
  unsigned __int8 v1;
  simd_float4 v2;
  simd_float4 v3;
  float32x4_t v4;
  int32x4_t v5;
  float32x4_t v12;
  simd_float4 v13;
  simd_float4 v14;
  int32x4_t v15;
  double result;
  int v17;
  int32x4_t v18;
  int8x16_t v19;
  int32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;

  if ((v1 & 1) == 0)
  {
    v22 = a1;
    a1 = v22;
    if (v17)
    {
      xmmword_1EF074D90 = (__int128)vdupq_n_s32(0x3F333333u);
      a1 = v22;
    }
  }
  v20 = vcltzq_f32(a1);
  v2 = (simd_float4)vabsq_f32(a1);
  v3 = (simd_float4)xmmword_1EF074D90;
  v2.i32[3] = 0;
  v3.i32[3] = 0;
  v5 = v20;
  v5.i32[3] = 0;
  __asm { FMOV            V2.4S, #1.0 }
  v19 = _Q2;
  __asm { FMOV            V3.4S, #-1.0 }
  v21 = _Q3;
  v12 = vmulq_f32(v4, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v5), _Q3, _Q2));
  v18 = vcltzq_f32(v12);
  v13 = (simd_float4)vabsq_f32(v12);
  v13.i32[3] = 0;
  v14 = _simd_pow_f4(v13, (simd_float4)xmmword_1B3058FE0);
  v15 = v18;
  v15.i32[3] = 0;
  *(_QWORD *)&result = vmulq_f32((float32x4_t)v14, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v15), v21, v19)).u64[0];
  return result;
}

double doInverseToneMap_OSFA(float32x4_t a1)
{
  simd_float4 v1;
  float32x4_t v2;
  float32x4_t v3;
  unsigned __int8 v4;
  int32x4_t v5;
  float32x4_t v12;
  simd_float4 v13;
  simd_float4 v14;
  simd_float4 v15;
  int32x4_t v16;
  double result;
  int v18;
  int32x4_t v19;
  int8x16_t v20;
  simd_float4 v21;
  int8x16_t v23;

  v1 = (simd_float4)vabsq_f32(a1);
  v1.i32[3] = 0;
  v2 = (float32x4_t)_simd_pow_f4(v1, (simd_float4)xmmword_1B3058FA0);
  v3 = v2;
  if ((v4 & 1) == 0)
  {
    v21 = (simd_float4)v2;
    v3 = (float32x4_t)v21;
    if (v18)
    {
      unk_1EF074DC0 = vdupq_n_s32(0x3FB6DB6Eu);
      v3 = (float32x4_t)v21;
    }
  }
  v5 = vcltzq_f32(a1);
  v5.i32[3] = 0;
  __asm { FMOV            V2.4S, #1.0 }
  v20 = _Q2;
  __asm { FMOV            V3.4S, #-1.0 }
  v23 = _Q3;
  v12 = vmulq_f32(v3, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v5), _Q3, _Q2));
  v19 = vcltzq_f32(v12);
  v13 = (simd_float4)unk_1EF074DC0;
  v14.i32[3] = 0;
  v13.i32[3] = 0;
  v15 = _simd_pow_f4(v14, v13);
  v16 = v19;
  v16.i32[3] = 0;
  *(_QWORD *)&result = vmulq_f32((float32x4_t)v15, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v16), v23, v20)).u64[0];
  return result;
}

void `anonymous namespace'::HLG::getTransferFunction(_anonymous_namespace_::HLG *this)
{
  unsigned __int8 v1;
  _anonymous_namespace_::HLG::TransferFunction *v2;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v2)
    {
    }
  }
}

double PCColorUtil::applyToneMap_BT2446_A(float32x4_t a1)
{
  float32x4_t v1;
  float v2;
  float v4;

  v1 = vmulq_f32(a1, (float32x4_t)xmmword_1B3058EF0);
  v4 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v1, 2), vaddq_f32(v1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1.f32, 1))).f32[0];
  v2 = powf(v4, 0.2) * 0.050697;
  if (v4 <= 0.0)
    v2 = 0.0;
  return toneMap_BT2446_A_DisplayLinearToGamma(vmulq_n_f32(a1, v2));
}

double PCColorUtil::applyToneMap_HLGDiffuseWhite(float32x4_t a1)
{
  float32x4_t v1;
  simd_float4 v2;
  simd_float4 v3;
  int32x4_t v4;
  double result;
  int32x4_t v12;

  v1 = vmulq_n_f32(a1, 1.0 / getWhiteGainForHLG_75());
  v12 = vcltzq_f32(v1);
  v2 = (simd_float4)vabsq_f32(v1);
  v2.i32[3] = 0;
  v3 = _simd_pow_f4(v2, (simd_float4)xmmword_1B3058FE0);
  v4 = v12;
  v4.i32[3] = 0;
  __asm
  {
    FMOV            V2.4S, #1.0
    FMOV            V3.4S, #-1.0
  }
  *(_QWORD *)&result = vmulq_f32((float32x4_t)v3, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v4), _Q3, _Q2)).u64[0];
  return result;
}

double PCColorUtil::applyInverseToneMap_HLGDiffuseWhite(float32x4_t a1)
{
  simd_float4 v1;
  float32x4_t v2;
  int32x4_t v3;
  double result;
  int32x4_t v11;

  v11 = vcltzq_f32(a1);
  v1 = (simd_float4)vabsq_f32(a1);
  v1.i32[3] = 0;
  v2 = (float32x4_t)_simd_pow_f4(v1, (simd_float4)xmmword_1B3058FA0);
  v3 = v11;
  v3.i32[3] = 0;
  __asm
  {
    FMOV            V2.4S, #1.0
    FMOV            V3.4S, #-1.0
  }
  *(_QWORD *)&result = vmulq_n_f32(vmulq_f32(v2, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v3), _Q3, _Q2)), getWhiteGainForHLG_75()).u64[0];
  return result;
}

double PCColorUtil::applyToneMap_LinearGain(float32x4_t a1, float a2)
{
  double v2;
  float32x4_t v3;
  simd_float4 v4;
  simd_float4 v5;
  int32x4_t v6;
  int32x4_t v14;

  if (a2 <= -0.00001 || (v2 = 0.0, a2 >= 0.00001))
  {
    v3 = vmulq_n_f32(a1, 1.0 / a2);
    v14 = vcltzq_f32(v3);
    v4 = (simd_float4)vabsq_f32(v3);
    v4.i32[3] = 0;
    v5 = _simd_pow_f4(v4, (simd_float4)xmmword_1B3058FE0);
    v6 = v14;
    v6.i32[3] = 0;
    __asm
    {
      FMOV            V2.4S, #1.0
      FMOV            V3.4S, #-1.0
    }
    *(_QWORD *)&v2 = vmulq_f32((float32x4_t)v5, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v6), _Q3, _Q2)).u64[0];
  }
  return v2;
}

double PCColorUtil::applyInverseToneMap_LinearGain(float32x4_t a1, float a2)
{
  simd_float4 v2;
  simd_float4 v3;
  int32x4_t v4;
  double result;
  int32x4_t v12;

  v12 = vcltzq_f32(a1);
  v2 = (simd_float4)vabsq_f32(a1);
  v2.i32[3] = 0;
  v3 = _simd_pow_f4(v2, (simd_float4)xmmword_1B3058FA0);
  v4 = v12;
  v4.i32[3] = 0;
  __asm
  {
    FMOV            V2.4S, #1.0
    FMOV            V3.4S, #-1.0
  }
  *(_QWORD *)&result = vmulq_n_f32(vmulq_f32((float32x4_t)v3, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v4), _Q3, _Q2)), a2).u64[0];
  return result;
}

float getWhiteGainForHLG_75(void)
{
  unsigned __int8 v0;
  float *v1;
  PCColorUtil *v3;
  int32x2_t v4;
  double WhiteGainForHLGLevel;

  v1 = (float *)&OZWriggleBehavior_Factory::_instanceOnce;
  if ((v0 & 1) == 0)
  {
    v1 = (float *)&OZWriggleBehavior_Factory::_instanceOnce;
    if ((_DWORD)v3)
    {
      v4.i32[0] = 0.75;
      WhiteGainForHLGLevel = PCColorUtil::getWhiteGainForHLGLevel(v3, v4);
      getWhiteGainForHLG_75(void)::result = LODWORD(WhiteGainForHLGLevel);
      v1 = (float *)&OZWriggleBehavior_Factory::_instanceOnce;
    }
  }
  return v1[914];
}

double PCColorUtil::getWhiteGainForHLGLevel(PCColorUtil *this, int32x2_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  simd_float4 v10;
  float32x4_t v11;
  float32x4_t v12;
  double result;
  int8x16_t v14;
  int8x16_t v16;

  v2 = (float32x4_t)vdupq_lane_s32(a2, 0);
  v2.i32[3] = 0;
  v3 = vmaxnmq_f32(v2, (float32x4_t)0);
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  __asm { FMOV            V2.4S, #4.0 }
  v14 = (int8x16_t)vmulq_f32(vmulq_f32(v3, v3), _Q2);
  v16 = (int8x16_t)vcgeq_f32(v4, v3);
  v10 = (simd_float4)vaddq_f32(vmulq_f32(v3, (float32x4_t)xmmword_1EF074E20), (float32x4_t)xmmword_1EF074E30);
  v10.i32[3] = 0;
  v11 = (float32x4_t)_simd_exp2_f4(v10);
  v12.i32[0] = 1049739296;
  *(_QWORD *)&result = vbslq_s8(v16, v14, (int8x16_t)vaddq_f32(v11, v12)).u64[0];
  return result;
}

float32x4_t `anonymous namespace'::HLG::TransferFunction::TransferFunction(_anonymous_namespace_::HLG::TransferFunction *this)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t result;
  float32x4_t v4;

  v1 = (float32x4_t)_simd_log_f4((simd_float4)xmmword_1B3058FF0);
  v4 = (float32x4_t)vdupq_n_s32(0x3E371FF0u);
  v2.i64[0] = 0x3F0000003F000000;
  v2.i64[1] = 0x3F0000003F000000;
  *(float32x4_t *)algn_1EF074DF0 = v2;
  xmmword_1EF074E00 = (__int128)vdupq_n_s32(0x3DFDDD65u);
  xmmword_1EF074E20 = (__int128)vdupq_n_s32(0x4101139Au);
  xmmword_1EF074E30 = (__int128)result;
  return result;
}

void PCCurveFit::~PCCurveFit(PCCurveFit *this)
{
  PCSingleton::~PCSingleton(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCCurveFit::getInstance(PCCurveFit *this)
{
  if (PCCurveFit::getInstance(void)::once != -1)
    dispatch_once(&PCCurveFit::getInstance(void)::once, &__block_literal_global_54);
  return PCCurveFit::_instance;
}

void ___ZN10PCCurveFit11getInstanceEv_block_invoke()
{
  PCSingleton *v0;

  v0 = (PCSingleton *)operator new();
  PCSingleton::PCSingleton(v0, 0);
  *(_QWORD *)v0 = &off_1E65128D8;
  PCCurveFit::_instance = (uint64_t)v0;
}

void sub_1B299489C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x81C40B8603338);
  _Unwind_Resume(a1);
}

double PCCurveFit::FitCurve(uint64_t a1, float64x2_t **a2, uint64_t a3, double a4)
{
  float64x2_t *v8;
  float64x2_t v9;
  double v10;
  uint64_t v11;
  void *v12;
  double result;
  __int128 v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;

  v8 = *a2;
  v9 = vsubq_f64((*a2)[1], **a2);
  v10 = sqrt(vaddvq_f64(vmulq_f64(v9, v9)));
  if (v10 <= -0.000000100000001 || v10 >= 0.000000100000001)
    v9 = vdivq_f64(v9, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10, 0));
  v17 = v9;
  v11 = a2[1] - v8 - 1;
  PCCurveFit::ComputeRightTangent(a2, v11, &v16);
  PCCurveFit::FitCubic(a1, (uint64_t *)a2, 0, v11, v17.f64, &v16, &v14, a4);
  v12 = *(void **)a3;
  if (*(_QWORD *)a3)
  {
    *(_QWORD *)(a3 + 8) = v12;
    operator delete(v12);
  }
  result = *(double *)&v14;
  *(_OWORD *)a3 = v14;
  *(_QWORD *)(a3 + 16) = v15;
  return result;
}

void PCCurveFit::ComputeRightTangent(_QWORD *a1@<X1>, uint64_t a2@<X2>, float64x2_t *a3@<X8>)
{
  float64x2_t v3;
  double v4;

  v3 = vsubq_f64(*(float64x2_t *)(*a1 + 16 * a2 - 16), *(float64x2_t *)(*a1 + 16 * a2));
  v4 = sqrt(vaddvq_f64(vmulq_f64(v3, v3)));
  if (v4 <= -0.000000100000001 || v4 >= 0.000000100000001)
    v3 = vdivq_f64(v3, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4, 0));
  *a3 = v3;
}

void PCCurveFit::FitCubic(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, double *a5@<X4>, float64x2_t *a6@<X5>, _QWORD *a7@<X8>, double a8@<D0>)
{
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char **v20;
  _OWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  float64x2_t *v25;
  float64x2_t *v26;
  _OWORD *v27;
  float64x2_t v28;
  double *v31;
  double *v32;
  float64x2_t *v33;
  double v34;
  double *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  float64x2_t *v45;
  float64x2_t *i;
  float64x2_t v47;
  uint64_t v48;
  double *v49;
  __int128 *v50;
  double v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  float64x2_t *v61;
  float64x2_t *j;
  float64x2_t v63;
  uint64_t v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  float64x2_t *v74;
  float64x2_t *k;
  float64x2_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  float64x2_t *v85;
  double v86;
  uint64_t v87;
  __int128 *v88;
  void *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  float64x2_t v93;

  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v93 = 0uLL;
  v92 = 0;
  if (a4 - a3 == 1)
  {
    v14 = (double *)(*a2 + 16 * a4);
    v15 = (double *)(*a2 + 16 * a3);
    v16 = *v14;
    v17 = v14[1];
    v19 = *v15;
    v18 = v15[1];
    v20 = (char **)(a7 + 2);
    v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), 1uLL);
    v23 = (char *)&v21[v22];
    *v21 = *(_OWORD *)v15;
    v24 = (char *)(v21 + 1);
    v25 = (float64x2_t *)*a7;
    v26 = (float64x2_t *)a7[1];
    v27 = v21;
    while (v26 != v25)
    {
      v28 = v26[-1];
      --v26;
      *--v27 = v28;
    }
    *a7 = v27;
    a7[1] = v24;
    a7[2] = v23;
    if (v25)
    {
      operator delete(v25);
      v23 = *v20;
    }
    a7[1] = v24;
    v36 = *a2;
    if (v24 >= v23)
    {
      v38 = (uint64_t)&v24[-*a7] >> 4;
      if ((unint64_t)(v38 + 1) >> 60)
        goto LABEL_70;
      v39 = (uint64_t)&v23[-*a7];
      v40 = v39 >> 3;
      if (v39 >> 3 <= (unint64_t)(v38 + 1))
        v40 = v38 + 1;
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v41);
      v43 = &v42[16 * v38];
      v23 = &v42[16 * v44];
      *(_OWORD *)v43 = *(_OWORD *)(v36 + 16 * a3);
      v37 = v43 + 16;
      v45 = (float64x2_t *)*a7;
      for (i = (float64x2_t *)a7[1]; i != v45; --i)
      {
        v47 = i[-1];
        *((float64x2_t *)v43 - 1) = v47;
        v43 -= 16;
      }
      *a7 = v43;
      a7[1] = v37;
      a7[2] = v23;
      if (v45)
      {
        operator delete(v45);
        v23 = *v20;
      }
    }
    else
    {
      v21[1] = *(_OWORD *)(v36 + 16 * a3);
      v37 = (char *)(v21 + 2);
    }
    a7[1] = v37;
    v52 = *a2;
    if (v37 >= v23)
    {
      v54 = (uint64_t)&v37[-*a7] >> 4;
      if ((unint64_t)(v54 + 1) >> 60)
        goto LABEL_70;
      v55 = (uint64_t)&v23[-*a7];
      v56 = v55 >> 3;
      if (v55 >> 3 <= (unint64_t)(v54 + 1))
        v56 = v54 + 1;
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0)
        v57 = 0xFFFFFFFFFFFFFFFLL;
      else
        v57 = v56;
      v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v57);
      v59 = &v58[16 * v54];
      v23 = &v58[16 * v60];
      *(_OWORD *)v59 = *(_OWORD *)(v52 + 16 * a3);
      v53 = v59 + 16;
      v61 = (float64x2_t *)*a7;
      for (j = (float64x2_t *)a7[1]; j != v61; --j)
      {
        v63 = j[-1];
        *((float64x2_t *)v59 - 1) = v63;
        v59 -= 16;
      }
      *a7 = v59;
      a7[1] = v53;
      a7[2] = v23;
      if (v61)
      {
        operator delete(v61);
        v23 = *v20;
      }
    }
    else
    {
      *(_OWORD *)v37 = *(_OWORD *)(v52 + 16 * a3);
      v53 = v37 + 16;
    }
    a7[1] = v53;
    v64 = *a2;
    if (v53 < v23)
    {
      *(_OWORD *)v53 = *(_OWORD *)(v64 + 16 * a4);
      v65 = v53 + 16;
LABEL_57:
      v77 = sqrt((v16 - v19) * (v16 - v19) + (v17 - v18) * (v17 - v18)) / 3.0;
      a7[1] = v65;
      v78 = *a5;
      v79 = a5[1];
      v80 = sqrt(v78 * v78 + v79 * v79);
      if (v80 != 0.0)
      {
        v81 = v77 / v80;
        v78 = v78 * v81;
        v79 = v79 * v81;
        *a5 = v78;
        a5[1] = v79;
      }
      v82 = a6->f64[0];
      v83 = a6->f64[1];
      v84 = sqrt(v82 * v82 + v83 * v83);
      if (v84 != 0.0)
      {
        a6->f64[0] = v82 * (v77 / v84);
        a6->f64[1] = v83 * (v77 / v84);
        v78 = *a5;
        v79 = a5[1];
      }
      v85 = (float64x2_t *)*a7;
      v86 = *(double *)(*a7 + 8);
      v85[1].f64[0] = *(double *)*a7 + v78;
      v85[1].f64[1] = v86 + v79;
      v85[2] = vaddq_f64(v85[3], *a6);
      return;
    }
    v66 = (uint64_t)&v53[-*a7] >> 4;
    if (!((unint64_t)(v66 + 1) >> 60))
    {
      v67 = (uint64_t)&v23[-*a7];
      v68 = v67 >> 3;
      if (v67 >> 3 <= (unint64_t)(v66 + 1))
        v68 = v66 + 1;
      if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
        v69 = 0xFFFFFFFFFFFFFFFLL;
      else
        v69 = v68;
      v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v69);
      v71 = &v70[16 * v66];
      v73 = &v70[16 * v72];
      *(_OWORD *)v71 = *(_OWORD *)(v64 + 16 * a4);
      v65 = v71 + 16;
      v74 = (float64x2_t *)*a7;
      for (k = (float64x2_t *)a7[1]; k != v74; --k)
      {
        v76 = k[-1];
        *((float64x2_t *)v71 - 1) = v76;
        v71 -= 16;
      }
      *a7 = v71;
      a7[1] = v65;
      a7[2] = v73;
      if (v74)
        operator delete(v74);
      goto LABEL_57;
    }
LABEL_70:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  }
  PCCurveFit::ChordLengthParameterize(a1, a2, a3, a4);
  v32 = v31;
  PCCurveFit::GenerateBezier(a2, a3, a4, v31, a5, a6->f64, &v90);
  v33 = (float64x2_t *)*a7;
  if (*a7)
  {
    a7[1] = v33;
    operator delete(v33);
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
  *(_OWORD *)a7 = v90;
  a7[2] = v91;
  v34 = PCCurveFit::ComputeMaxError(a1, a2, (__int128 **)a7, a3, a4, (uint64_t)v32, (unint64_t *)&v92);
  if (v34 < a8)
  {
    v35 = v32;
LABEL_68:
    MEMORY[0x1B5E2914C](v35, 0x1000C8000313F17);
    return;
  }
  if (v34 < a8 * a8)
  {
    v48 = 20;
    while (1)
    {
      v49 = (double *)PCCurveFit::Reparameterize(a1, a2, (__int128 **)a7, a3, a4, v32);
      PCCurveFit::GenerateBezier(a2, a3, a4, v49, a5, a6->f64, &v90);
      v50 = (__int128 *)*a7;
      if (*a7)
      {
        a7[1] = v50;
        operator delete(v50);
        *a7 = 0;
        a7[1] = 0;
        a7[2] = 0;
      }
      *(_OWORD *)a7 = v90;
      a7[2] = v91;
      v51 = PCCurveFit::ComputeMaxError(a1, a2, (__int128 **)a7, a3, a4, (uint64_t)v49, (unint64_t *)&v92);
      MEMORY[0x1B5E2914C](v32, 0x1000C8000313F17);
      if (v51 < a8)
        break;
      v32 = v49;
      if (!--v48)
        goto LABEL_63;
    }
    v35 = v49;
    goto LABEL_68;
  }
  v49 = v32;
LABEL_63:
  MEMORY[0x1B5E2914C](v49, 0x1000C8000313F17);
  v87 = v92;
  PCCurveFit::ComputeCenterTangent(a2, v92, &v93);
  PCCurveFit::FitCubic(&v90, a1, a2, a3, v87, a5, &v93, a8);
  v88 = (__int128 *)*a7;
  if (*a7)
  {
    a7[1] = v88;
    operator delete(v88);
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
  }
  *(_OWORD *)a7 = v90;
  a7[2] = v91;
  v93 = vnegq_f64(v93);
  PCCurveFit::FitCubic(&v90, a1, a2, v87, a4, &v93, a6, a8);
  v89 = (void *)v90;
  std::vector<PCVector2<double>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PCVector2<double>*>,std::__wrap_iter<PCVector2<double>*>>((uint64_t)a7, a7[1], (__int128 *)(v90 + 16), *((__int128 **)&v90 + 1), (*((_QWORD *)&v90 + 1) - ((uint64_t)v90 + 16)) >> 4);
  if (v89)
    operator delete(v89);
}

void sub_1B2994FB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  void *v4;

  if (v2)
    operator delete(v2);
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

double PCCurveFit::ChordLengthParameterize(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  double *v8;
  double result;
  unint64_t v10;
  uint64_t v11;
  float64x2_t v12;
  double *v13;
  double v14;
  unint64_t v15;
  float64x2_t v16;
  float64x2_t v17;
  double *v18;

  v7 = a4 - a3;
  v8 = (double *)operator new[]();
  *v8 = 0.0;
  v10 = a3 + 1;
  if (a3 + 1 <= a4)
  {
    v11 = *a2;
    v12 = *(float64x2_t *)(*a2 + 16 * a3);
    v13 = v8 + 1;
    v14 = *v8;
    v15 = a3 + 1;
    do
    {
      v16 = *(float64x2_t *)(v11 + 16 * v15);
      v17 = vsubq_f64(v16, v12);
      v14 = v14 + sqrt(vaddvq_f64(vmulq_f64(v17, v17)));
      *v13++ = v14;
      ++v15;
      v12 = v16;
    }
    while (v15 <= a4);
    v18 = v8 + 1;
    do
    {
      result = *v18 / v8[v7];
      *v18++ = result;
      ++v10;
    }
    while (v10 <= a4);
  }
  return result;
}

double PCCurveFit::GenerateBezier@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, double *a4@<X4>, double *a5@<X5>, double *a6@<X6>, _QWORD *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  double **v14;
  _QWORD *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  double **v33;
  uint64_t v34;
  float64x2_t v35;
  float64x2_t *v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int8x16_t v46;
  float64x2_t v47;
  int8x16_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double **v62;
  uint64_t v63;
  double v64;
  char *v65;
  char **v66;
  char *v67;
  char *v68;
  double *v69;
  double *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  char *v75;
  char **v76;
  double *v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  double *v86;
  double *n;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  double *v96;
  double *i;
  __int128 v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  double *v108;
  double *ii;
  __int128 v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  double *v120;
  double *j;
  __int128 v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  double *v132;
  double *jj;
  __int128 v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  double *v144;
  double *k;
  __int128 v146;
  uint64_t v147;
  _OWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  char *v156;
  double *v157;
  double *kk;
  __int128 v159;
  uint64_t v160;
  _OWORD *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  char *v169;
  double *v170;
  double *m;
  __int128 v172;
  double v173;
  double v174;
  double v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double *v188;
  double v189;
  double result;
  double v191;
  double v192;
  double v193;
  float64x2_t v194;

  v12 = a3 - a2 + 1;
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
  v13 = operator new[]();
  v14 = (double **)v13;
  if (v12)
  {
    v15 = (_QWORD *)v13;
    v16 = a4;
    v17 = v12;
    do
    {
      v18 = operator new[]();
      *(_OWORD *)v18 = 0u;
      *(_OWORD *)(v18 + 16) = 0u;
      *v15 = v18;
      v20 = *a5;
      v19 = a5[1];
      v21 = 1.0 - *v16;
      v22 = *v16 * 3.0;
      v23 = sqrt(v20 * v20 + v19 * v19);
      if (v23 != 0.0)
      {
        v24 = v22 * (v21 * v21) / v23;
        v20 = v20 * v24;
        v19 = v19 * v24;
      }
      v25 = *a6;
      v26 = a6[1];
      v27 = sqrt(v25 * v25 + v26 * v26);
      if (v27 != 0.0)
      {
        v28 = v21 * (*v16 * v22) / v27;
        v25 = v25 * v28;
        v26 = v26 * v28;
      }
      *(double *)v18 = v20;
      *(double *)(v18 + 8) = v19;
      ++v16;
      ++v15;
      *(double *)(v18 + 16) = v25;
      *(double *)(v18 + 24) = v26;
      --v17;
    }
    while (v17);
    v29 = (float64x2_t *)(*a1 + 16 * a2);
    v30 = *v29;
    v31 = 0uLL;
    v32 = 0.0;
    v33 = v14;
    v34 = v12;
    v35 = 0uLL;
    do
    {
      v37 = *v33++;
      v36 = (float64x2_t *)v37;
      v38 = *v37;
      v39 = v37[1];
      v40 = *a4++;
      v41 = v36[1];
      v42.f64[0] = v36[1].f64[0];
      v42.f64[1] = v39;
      v43.f64[0] = v40;
      v43.f64[1] = 1.0 - v40;
      v44.f64[1] = 1.0 - v40;
      v44.f64[0] = 3.0;
      v45 = vmulq_f64(v43, v44);
      v46 = (int8x16_t)vmulq_f64(v45, (float64x2_t)vzip2q_s64((int64x2_t)v45, (int64x2_t)v43));
      v47.f64[1] = v36[1].f64[1];
      v32 = v32 + v38 * v38 + v39 * v39;
      v47.f64[0] = v38;
      v48 = (int8x16_t)vmulq_f64(v47, v41);
      v49 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(*a1 + 16 * a3), v40 * (v40 * v40)), vaddq_f64(vmulq_n_f64(*(float64x2_t *)(*a1 + 16 * a3), (1.0 - v40) * (v40 * v45.f64[0])), vaddq_f64(vmulq_f64(v30, (float64x2_t)v46), vmulq_f64(v30, (float64x2_t)vextq_s8(v46, v46, 8uLL)))));
      v50 = *v29++;
      v51 = vsubq_f64(v50, v49);
      v31 = vaddq_f64(v31, vaddq_f64((float64x2_t)vextq_s8(v48, v48, 8uLL), vmulq_f64(v42, v41)));
      v52 = vmulq_f64(v41, v51);
      v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v52.f64[0], 0);
      v53.f64[0] = v38 * v51.f64[0];
      v52.f64[0] = vmuld_lane_f64(v39, v51, 1);
      v35 = vaddq_f64(v35, vaddq_f64(v53, v52));
      --v34;
    }
    while (v34);
    v54 = v35.f64[1];
  }
  else
  {
    v31 = 0uLL;
    v32 = 0.0;
    v54 = 0.0;
    v35.f64[0] = 0.0;
  }
  v55.f64[1] = v31.f64[1];
  v192 = v35.f64[0];
  v193 = v32;
  v55.f64[0] = v32;
  v56 = vmulq_f64(v31, v55);
  v57 = vsubq_f64(v56, (float64x2_t)vdupq_laneq_s64((int64x2_t)v56, 1)).f64[0];
  v194 = v31;
  v58 = v35.f64[0] * v31.f64[0] - vmuld_lane_f64(v54, v31, 1);
  v59 = 1.0e-11 * v56.f64[0];
  if (v57 == 0.0)
    v60 = v59;
  else
    v60 = v57;
  v61 = v58 / v60;
  if (v12)
  {
    v62 = v14;
    do
    {
      if (*v62)
        MEMORY[0x1B5E2914C](*v62, 0x1000C80451B5BE8);
      *v62++ = 0;
      --v12;
    }
    while (v12);
  }
  MEMORY[0x1B5E2914C](v14, 0x20C8093837F09);
  v63 = *a1;
  if (v61 >= 0.000001)
  {
    v64 = (v193 * v54 - vmuld_lane_f64(v192, v194, 1)) / v60;
    if (v64 >= 0.000001)
    {
      v66 = (char **)(a7 + 2);
      v65 = (char *)a7[2];
      v67 = (char *)a7[1];
      if (v67 >= v65)
      {
        v89 = (uint64_t)&v67[-*a7] >> 4;
        if ((unint64_t)(v89 + 1) >> 60)
          goto LABEL_137;
        v90 = (uint64_t)&v65[-*a7];
        v91 = v90 >> 3;
        if (v90 >> 3 <= (unint64_t)(v89 + 1))
          v91 = v89 + 1;
        if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0)
          v92 = 0xFFFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        v93 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v92);
        v94 = &v93[16 * v89];
        v65 = &v93[16 * v95];
        *(_OWORD *)v94 = *(_OWORD *)(v63 + 16 * a2);
        v68 = v94 + 16;
        v96 = (double *)*a7;
        for (i = (double *)a7[1]; i != v96; i -= 2)
        {
          v98 = *((_OWORD *)i - 1);
          *((_OWORD *)v94 - 1) = v98;
          v94 -= 16;
        }
        *a7 = v94;
        a7[1] = v68;
        a7[2] = v65;
        if (v96)
        {
          operator delete(v96);
          v65 = *v66;
        }
      }
      else
      {
        *(_OWORD *)v67 = *(_OWORD *)(v63 + 16 * a2);
        v68 = v67 + 16;
      }
      a7[1] = v68;
      v111 = *a1;
      if (v68 >= v65)
      {
        v113 = (uint64_t)&v68[-*a7] >> 4;
        if ((unint64_t)(v113 + 1) >> 60)
          goto LABEL_137;
        v114 = (uint64_t)&v65[-*a7];
        v115 = v114 >> 3;
        if (v114 >> 3 <= (unint64_t)(v113 + 1))
          v115 = v113 + 1;
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFF0)
          v116 = 0xFFFFFFFFFFFFFFFLL;
        else
          v116 = v115;
        v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v116);
        v118 = &v117[16 * v113];
        v65 = &v117[16 * v119];
        *(_OWORD *)v118 = *(_OWORD *)(v111 + 16 * a2);
        v112 = v118 + 16;
        v120 = (double *)*a7;
        for (j = (double *)a7[1]; j != v120; j -= 2)
        {
          v122 = *((_OWORD *)j - 1);
          *((_OWORD *)v118 - 1) = v122;
          v118 -= 16;
        }
        *a7 = v118;
        a7[1] = v112;
        a7[2] = v65;
        if (v120)
        {
          operator delete(v120);
          v65 = *v66;
        }
      }
      else
      {
        *(_OWORD *)v68 = *(_OWORD *)(v111 + 16 * a2);
        v112 = v68 + 16;
      }
      a7[1] = v112;
      v135 = *a1;
      if (v112 >= v65)
      {
        v137 = (uint64_t)&v112[-*a7] >> 4;
        if ((unint64_t)(v137 + 1) >> 60)
          goto LABEL_137;
        v138 = (uint64_t)&v65[-*a7];
        v139 = v138 >> 3;
        if (v138 >> 3 <= (unint64_t)(v137 + 1))
          v139 = v137 + 1;
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF0)
          v140 = 0xFFFFFFFFFFFFFFFLL;
        else
          v140 = v139;
        v141 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v140);
        v142 = &v141[16 * v137];
        v65 = &v141[16 * v143];
        *(_OWORD *)v142 = *(_OWORD *)(v135 + 16 * a2);
        v136 = v142 + 16;
        v144 = (double *)*a7;
        for (k = (double *)a7[1]; k != v144; k -= 2)
        {
          v146 = *((_OWORD *)k - 1);
          *((_OWORD *)v142 - 1) = v146;
          v142 -= 16;
        }
        *a7 = v142;
        a7[1] = v136;
        a7[2] = v65;
        if (v144)
        {
          operator delete(v144);
          v65 = *v66;
        }
      }
      else
      {
        *(_OWORD *)v112 = *(_OWORD *)(v135 + 16 * a2);
        v136 = v112 + 16;
      }
      a7[1] = v136;
      v160 = *a1;
      if (v136 < v65)
      {
        *(_OWORD *)v136 = *(_OWORD *)(v160 + 16 * a3);
        v161 = v136 + 16;
        goto LABEL_130;
      }
      v162 = (uint64_t)&v136[-*a7] >> 4;
      if (!((unint64_t)(v162 + 1) >> 60))
      {
        v163 = (uint64_t)&v65[-*a7];
        v164 = v163 >> 3;
        if (v163 >> 3 <= (unint64_t)(v162 + 1))
          v164 = v162 + 1;
        if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFF0)
          v165 = 0xFFFFFFFFFFFFFFFLL;
        else
          v165 = v164;
        v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v165);
        v167 = &v166[16 * v162];
        v169 = &v166[16 * v168];
        *(_OWORD *)v167 = *(_OWORD *)(v160 + 16 * a3);
        v161 = v167 + 16;
        v170 = (double *)*a7;
        for (m = (double *)a7[1]; m != v170; m -= 2)
        {
          v172 = *((_OWORD *)m - 1);
          *((_OWORD *)v167 - 1) = v172;
          v167 -= 16;
        }
        *a7 = v167;
        a7[1] = v161;
        a7[2] = v169;
        if (v170)
          operator delete(v170);
LABEL_130:
        a7[1] = v161;
        v174 = *a5;
        v175 = a5[1];
        v183 = sqrt(v174 * v174 + v175 * v175);
        if (v183 != 0.0)
        {
          v184 = v61 / v183;
          v174 = v174 * v184;
          v175 = v175 * v184;
          *a5 = v174;
          a5[1] = v175;
        }
        v185 = *a6;
        v186 = a6[1];
        v187 = sqrt(v185 * v185 + v186 * v186);
        if (v187 != 0.0)
        {
          v181 = v185 * (v64 / v187);
          v182 = v186 * (v64 / v187);
          goto LABEL_134;
        }
        goto LABEL_135;
      }
LABEL_137:
      std::vector<double>::__throw_length_error[abi:ne180100]();
    }
  }
  v69 = (double *)(v63 + 16 * a3);
  v70 = (double *)(v63 + 16 * a2);
  v71 = *v69;
  v72 = v69[1];
  v74 = *v70;
  v73 = v70[1];
  v76 = (char **)(a7 + 2);
  v75 = (char *)a7[2];
  v77 = (double *)a7[1];
  if (v77 >= (double *)v75)
  {
    v79 = ((uint64_t)v77 - *a7) >> 4;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 60)
      goto LABEL_136;
    v81 = (uint64_t)&v75[-*a7];
    if (v81 >> 3 > v80)
      v80 = v81 >> 3;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0)
      v82 = 0xFFFFFFFFFFFFFFFLL;
    else
      v82 = v80;
    v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v82);
    v84 = &v83[16 * v79];
    v75 = &v83[16 * v85];
    *(_OWORD *)v84 = *(_OWORD *)v70;
    v78 = v84 + 16;
    v86 = (double *)*a7;
    for (n = (double *)a7[1]; n != v86; n -= 2)
    {
      v88 = *((_OWORD *)n - 1);
      *((_OWORD *)v84 - 1) = v88;
      v84 -= 16;
    }
    *a7 = v84;
    a7[1] = v78;
    a7[2] = v75;
    if (v86)
    {
      operator delete(v86);
      v75 = *v76;
    }
  }
  else
  {
    *v77 = v74;
    v77[1] = v73;
    v78 = (char *)(v77 + 2);
  }
  a7[1] = v78;
  v99 = *a1;
  if (v78 >= v75)
  {
    v101 = (uint64_t)&v78[-*a7] >> 4;
    if ((unint64_t)(v101 + 1) >> 60)
      goto LABEL_136;
    v102 = (uint64_t)&v75[-*a7];
    v103 = v102 >> 3;
    if (v102 >> 3 <= (unint64_t)(v101 + 1))
      v103 = v101 + 1;
    if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFF0)
      v104 = 0xFFFFFFFFFFFFFFFLL;
    else
      v104 = v103;
    v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v104);
    v106 = &v105[16 * v101];
    v75 = &v105[16 * v107];
    *(_OWORD *)v106 = *(_OWORD *)(v99 + 16 * a2);
    v100 = v106 + 16;
    v108 = (double *)*a7;
    for (ii = (double *)a7[1]; ii != v108; ii -= 2)
    {
      v110 = *((_OWORD *)ii - 1);
      *((_OWORD *)v106 - 1) = v110;
      v106 -= 16;
    }
    *a7 = v106;
    a7[1] = v100;
    a7[2] = v75;
    if (v108)
    {
      operator delete(v108);
      v75 = *v76;
    }
  }
  else
  {
    *(_OWORD *)v78 = *(_OWORD *)(v99 + 16 * a2);
    v100 = v78 + 16;
  }
  a7[1] = v100;
  v123 = *a1;
  if (v100 >= v75)
  {
    v125 = (uint64_t)&v100[-*a7] >> 4;
    if ((unint64_t)(v125 + 1) >> 60)
      goto LABEL_136;
    v126 = (uint64_t)&v75[-*a7];
    v127 = v126 >> 3;
    if (v126 >> 3 <= (unint64_t)(v125 + 1))
      v127 = v125 + 1;
    if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0)
      v128 = 0xFFFFFFFFFFFFFFFLL;
    else
      v128 = v127;
    v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v128);
    v130 = &v129[16 * v125];
    v75 = &v129[16 * v131];
    *(_OWORD *)v130 = *(_OWORD *)(v123 + 16 * a2);
    v124 = v130 + 16;
    v132 = (double *)*a7;
    for (jj = (double *)a7[1]; jj != v132; jj -= 2)
    {
      v134 = *((_OWORD *)jj - 1);
      *((_OWORD *)v130 - 1) = v134;
      v130 -= 16;
    }
    *a7 = v130;
    a7[1] = v124;
    a7[2] = v75;
    if (v132)
    {
      operator delete(v132);
      v75 = *v76;
    }
  }
  else
  {
    *(_OWORD *)v100 = *(_OWORD *)(v123 + 16 * a2);
    v124 = v100 + 16;
  }
  a7[1] = v124;
  v147 = *a1;
  if (v124 < v75)
  {
    *(_OWORD *)v124 = *(_OWORD *)(v147 + 16 * a3);
    v148 = v124 + 16;
    goto LABEL_124;
  }
  v149 = (uint64_t)&v124[-*a7] >> 4;
  if ((unint64_t)(v149 + 1) >> 60)
LABEL_136:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v150 = (uint64_t)&v75[-*a7];
  v151 = v150 >> 3;
  if (v150 >> 3 <= (unint64_t)(v149 + 1))
    v151 = v149 + 1;
  if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF0)
    v152 = 0xFFFFFFFFFFFFFFFLL;
  else
    v152 = v151;
  v153 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(a7 + 2), v152);
  v154 = &v153[16 * v149];
  v156 = &v153[16 * v155];
  *(_OWORD *)v154 = *(_OWORD *)(v147 + 16 * a3);
  v148 = v154 + 16;
  v157 = (double *)*a7;
  for (kk = (double *)a7[1]; kk != v157; kk -= 2)
  {
    v159 = *((_OWORD *)kk - 1);
    *((_OWORD *)v154 - 1) = v159;
    v154 -= 16;
  }
  *a7 = v154;
  a7[1] = v148;
  a7[2] = v156;
  if (v157)
    operator delete(v157);
LABEL_124:
  v173 = sqrt((v71 - v74) * (v71 - v74) + (v72 - v73) * (v72 - v73)) / 3.0;
  a7[1] = v148;
  v174 = *a5;
  v175 = a5[1];
  v176 = sqrt(v174 * v174 + v175 * v175);
  if (v176 != 0.0)
  {
    v177 = v173 / v176;
    v174 = v174 * v177;
    v175 = v175 * v177;
    *a5 = v174;
    a5[1] = v175;
  }
  v178 = *a6;
  v179 = a6[1];
  v180 = sqrt(v178 * v178 + v179 * v179);
  if (v180 != 0.0)
  {
    v181 = v178 * (v173 / v180);
    v182 = v179 * (v173 / v180);
LABEL_134:
    *a6 = v181;
    a6[1] = v182;
    v174 = *a5;
    v175 = a5[1];
  }
LABEL_135:
  v188 = (double *)*a7;
  v189 = *(double *)(*a7 + 8) + v175;
  v188[2] = *(double *)*a7 + v174;
  v188[3] = v189;
  result = v188[6] + *a6;
  v191 = v188[7] + a6[1];
  v188[4] = result;
  v188[5] = v191;
  return result;
}

void sub_1B2995A30(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double PCCurveFit::ComputeMaxError(uint64_t a1, _QWORD *a2, __int128 **a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t *a7)
{
  unint64_t v7;
  double v8;
  double *v13;
  float64x2_t v14;
  double v15;
  float64x2_t v17;

  *a7 = (a5 - a4 + 1) >> 1;
  v7 = a4 + 1;
  v8 = 0.0;
  if (a4 + 1 < a5)
  {
    v13 = (double *)(a6 + 8);
    do
    {
      PCCurveFit::Bezier(3, a3, &v17, *v13);
      v14 = vsubq_f64(v17, *(float64x2_t *)(*a2 + 16 * v7));
      v15 = vaddvq_f64(vmulq_f64(v14, v14));
      if (v15 >= v8)
      {
        *a7 = v7;
        v8 = v15;
      }
      ++v7;
      ++v13;
    }
    while (a5 != v7);
  }
  return v8;
}

uint64_t PCCurveFit::Reparameterize(uint64_t a1, _QWORD *a2, __int128 **a3, unint64_t a4, unint64_t a5, double *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;

  v12 = operator new[]();
  v13 = v12;
  if (a5 >= a4)
  {
    v14 = 16 * a4;
    v15 = (double *)v12;
    do
    {
      v16 = *a6++;
      *v15++ = PCCurveFit::NewtonRaphsonRootFind(v16, a1, a3, (double *)(*a2 + v14));
      ++a4;
      v14 += 16;
    }
    while (a4 <= a5);
  }
  return v13;
}

void PCCurveFit::ComputeCenterTangent(_QWORD *a1@<X1>, uint64_t a2@<X2>, float64x2_t *a3@<X8>)
{
  float64x2_t v8;
  double v9;

  __asm { FMOV            V1.2D, #0.5 }
  v8 = vmulq_f64(vaddq_f64(vsubq_f64(*(float64x2_t *)(*a1 + 16 * a2 - 16), *(float64x2_t *)(*a1 + 16 * a2)), vsubq_f64(*(float64x2_t *)(*a1 + 16 * a2), *(float64x2_t *)(*a1 + 16 * a2 + 16))), _Q1);
  v9 = sqrt(vaddvq_f64(vmulq_f64(v8, v8)));
  if (v9 <= -0.000000100000001 || v9 >= 0.000000100000001)
    v8 = vdivq_f64(v8, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v9, 0));
  *a3 = v8;
}

double PCCurveFit::NewtonRaphsonRootFind(double a1, uint64_t a2, __int128 **a3, double *a4)
{
  _BYTE *v7;
  char *v8;
  uint64_t v9;
  float64x2_t v10;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  _BYTE *v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  double v46;
  double v47;
  float64x2_t v49;
  float64x2_t v50;
  void *__p;
  char *v52;
  char *v53;
  void *v54;
  char *v55;
  char *v56;

  v54 = 0;
  v55 = 0;
  v56 = 0;
  __p = 0;
  v52 = 0;
  v53 = 0;
  PCCurveFit::Bezier(3, a3, &v50, a1);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = v50;
  __asm { FMOV            V2.2D, #3.0 }
  v49 = _Q2;
  do
  {
    if (v8 >= v56)
    {
      v16 = (v8 - v7) >> 4;
      if ((unint64_t)(v16 + 1) >> 60)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v17 = v56 - v7;
      v18 = v17 >> 3;
      if (v17 >> 3 <= (unint64_t)(v16 + 1))
        v18 = v16 + 1;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
        v19 = 0xFFFFFFFFFFFFFFFLL;
      else
        v19 = v18;
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&v56, v19);
      v22 = &v20[16 * v16];
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v22 + 1) = 0;
      v23 = (char *)v54;
      v24 = v55;
      v25 = v22;
      while (v24 != v23)
      {
        v26 = *((_OWORD *)v24 - 1);
        v24 -= 16;
        *((_OWORD *)v25 - 1) = v26;
        v25 -= 16;
      }
      v8 = v22 + 16;
      v54 = v25;
      v55 = v22 + 16;
      v56 = &v20[16 * v21];
      if (v23)
        operator delete(v23);
      _Q2 = v49;
    }
    else
    {
      *(_QWORD *)v8 = 0;
      *((_QWORD *)v8 + 1) = 0;
      v8 += 16;
    }
    v55 = v8;
    v7 = v54;
    *((float64x2_t *)v54 + v9) = vmulq_f64(vsubq_f64((float64x2_t)(*a3)[v9 + 1], (float64x2_t)(*a3)[v9]), _Q2);
    ++v9;
  }
  while (v9 != 3);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  do
  {
    v31 = v30;
    if (v28 >= v53)
    {
      v32 = (v28 - v27) >> 4;
      if ((unint64_t)(v32 + 1) >> 60)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v33 = v53 - v27;
      v34 = v33 >> 3;
      if (v33 >> 3 <= (unint64_t)(v32 + 1))
        v34 = v32 + 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
        v35 = 0xFFFFFFFFFFFFFFFLL;
      else
        v35 = v34;
      v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&v53, v35);
      v38 = &v36[16 * v32];
      *(_QWORD *)v38 = 0;
      *((_QWORD *)v38 + 1) = 0;
      v39 = (char *)__p;
      v40 = v52;
      v41 = v38;
      while (v40 != v39)
      {
        v42 = *((_OWORD *)v40 - 1);
        v40 -= 16;
        *((_OWORD *)v41 - 1) = v42;
        v41 -= 16;
      }
      v28 = v38 + 16;
      __p = v41;
      v52 = v38 + 16;
      v53 = &v36[16 * v37];
      if (v39)
        operator delete(v39);
    }
    else
    {
      *(_QWORD *)v28 = 0;
      *((_QWORD *)v28 + 1) = 0;
      v28 += 16;
    }
    v30 = 0;
    v52 = v28;
    v27 = __p;
    v43 = vsubq_f64(*((float64x2_t *)v54 + v29 + 1), *((float64x2_t *)v54 + v29));
    *((float64x2_t *)__p + v29) = vaddq_f64(v43, v43);
    v29 = 1;
  }
  while ((v31 & 1) != 0);
  PCCurveFit::Bezier(2, (__int128 **)&v54, &v50, a1);
  v44 = v50;
  PCCurveFit::Bezier(1, (__int128 **)&__p, &v50, a1);
  v45 = v50;
  v46 = *a4;
  v47 = a4[1];
  if (__p)
  {
    v52 = (char *)__p;
    operator delete(__p);
  }
  if (v54)
  {
    v55 = (char *)v54;
    operator delete(v54);
  }
  return a1
       - (v44.f64[0] * (v10.f64[0] - v46) + v44.f64[1] * (v10.f64[1] - v47))
       / (v44.f64[0] * v44.f64[0]
        + v44.f64[1] * v44.f64[1]
        + v45.f64[0] * (v10.f64[0] - v46)
        + v45.f64[1] * (v10.f64[1] - v47));
}

void sub_1B2995F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void PCCurveFit::Bezier(int a1@<W1>, __int128 **a2@<X2>, float64x2_t *a3@<X8>, double a4@<D0>)
{
  float64x2_t *v6;
  int v7;
  unsigned int v8;
  float64x2_t v9;
  uint64_t v10;
  float64x2_t *v11;
  float64x2_t v12;
  void *__p;
  float64x2_t *v16;
  uint64_t v17;

  a3->f64[0] = 0.0;
  a3->f64[1] = 0.0;
  __p = 0;
  v16 = 0;
  v17 = 0;
  std::vector<PCVector2<double>>::__init_with_size[abi:ne180100]<PCVector2<double>*,PCVector2<double>*>((char *)&__p, *a2, a2[1], a2[1] - *a2);
  v6 = (float64x2_t *)__p;
  if (a1 >= 1)
  {
    v7 = 1;
    v8 = a1;
    do
    {
      if (v7 <= a1)
      {
        v9 = *v6;
        v10 = v8;
        v11 = v6 + 1;
        do
        {
          v12 = vmulq_n_f64(v9, 1.0 - a4);
          v9 = *v11;
          v11[-1] = vaddq_f64(v12, vmulq_n_f64(*v11, a4));
          ++v11;
          --v10;
        }
        while (v10);
      }
      --v8;
    }
    while (v7++ != a1);
  }
  *a3 = *v6;
  v16 = v6;
  operator delete(v6);
}

__int128 *std::vector<PCVector2<double>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<PCVector2<double>*>,std::__wrap_iter<PCVector2<double>*>>(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, uint64_t a5)
{
  __int128 *v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  __int128 *v22;
  _OWORD *v23;
  __int128 *v24;
  _OWORD *v25;
  __int128 v26;
  __int128 *v27;
  __int128 *v28;
  _OWORD *v29;
  __int128 v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  __int128 v35;
  char *v36;
  uint64_t v37;
  char *v38;
  __int128 v39;
  void *__p;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;

  v5 = *(__int128 **)a1;
  v6 = a2 - *(_QWORD *)a1;
  v7 = (__int128 *)(*(_QWORD *)a1 + (v6 & 0xFFFFFFFFFFFFFFF0));
  if (a5 < 1)
    return v7;
  v9 = a3;
  v11 = v6 >> 4;
  v14 = *(_QWORD *)(a1 + 16);
  v12 = a1 + 16;
  v13 = v14;
  v15 = *(_QWORD *)(v12 - 8);
  if (a5 > (uint64_t)(v14 - v15) >> 4)
  {
    v16 = a5 + ((uint64_t)(v15 - (_QWORD)v5) >> 4);
    if (v16 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v17 = v13 - (_QWORD)v5;
    v18 = v17 >> 3;
    if (v17 >> 3 <= v16)
      v18 = v16;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
      v19 = 0xFFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    v45 = v12;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v12, v19);
    else
      v20 = 0;
    v36 = &v20[16 * v11];
    __p = v20;
    v42 = v36;
    v44 = &v20[16 * v19];
    v37 = 16 * a5;
    v38 = &v36[16 * a5];
    do
    {
      v39 = *v9++;
      *(_OWORD *)v36 = v39;
      v36 += 16;
      v37 -= 16;
    }
    while (v37);
    v43 = v38;
    v7 = std::vector<PCVector2<double>>::__swap_out_circular_buffer((__int128 **)a1, &__p, v7);
    if (v43 != v42)
      v43 += (v42 - v43 + 15) & 0xFFFFFFFFFFFFFFF0;
    if (__p)
      operator delete(__p);
    return v7;
  }
  v21 = (uint64_t)(v15 - (_QWORD)v7) >> 4;
  if (v21 >= a5)
  {
    v22 = &a3[a5];
    v23 = *(_OWORD **)(v12 - 8);
LABEL_18:
    v27 = &v7[a5];
    v28 = &v23[-a5];
    v29 = v23;
    if ((unint64_t)v28 < v15)
    {
      v29 = v23;
      do
      {
        v30 = *v28++;
        *v29++ = v30;
      }
      while ((unint64_t)v28 < v15);
    }
    *(_QWORD *)(a1 + 8) = v29;
    if (v23 != v27)
    {
      v31 = v23 - 1;
      v32 = 16 * (v23 - v27);
      v33 = (uint64_t)&v5[v11 - 1];
      do
      {
        *v31-- = *(_OWORD *)(v33 + v32);
        v32 -= 16;
      }
      while (v32);
    }
    if (v22 != a3)
    {
      v34 = v7;
      do
      {
        v35 = *v9++;
        *v34++ = v35;
      }
      while (v9 != v22);
    }
    return v7;
  }
  v22 = &a3[v21];
  v23 = *(_OWORD **)(v12 - 8);
  if (v22 != a4)
  {
    v24 = v22;
    v25 = *(_OWORD **)(v12 - 8);
    do
    {
      v26 = *v24++;
      *v25++ = v26;
      ++v23;
    }
    while (v24 != a4);
  }
  *(_QWORD *)(a1 + 8) = v23;
  if ((uint64_t)(v15 - (_QWORD)v7) >= 1)
    goto LABEL_18;
  return v7;
}

void sub_1B2996224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__int128 *std::vector<PCVector2<double>>::__swap_out_circular_buffer(__int128 **a1, _QWORD *a2, __int128 *a3)
{
  __int128 *result;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 v8;
  __int128 *v9;
  _OWORD *i;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;

  result = (__int128 *)a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = a3;
    v6 = (__int128 *)a2[1];
    do
    {
      v8 = *--v7;
      *--v6 = v8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = a1[1];
  for (i = (_OWORD *)a2[2]; a3 != v9; ++i)
  {
    v11 = *a3++;
    *i = v11;
  }
  a2[2] = i;
  v12 = *a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = (__int128 *)a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = (__int128 *)a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

char *std::vector<PCVector2<double>>::__init_with_size[abi:ne180100]<PCVector2<double>*,PCVector2<double>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B2996340(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL PCEvaluatorWaveData::operator==(uint64_t a1, uint64_t a2)
{
  return vabdd_f64(*(double *)a1, *(double *)a2) < 0.0000001
      && vabdd_f64(*(double *)(a1 + 8), *(double *)(a2 + 8)) < 0.0000001
      && vabdd_f64(*(double *)(a1 + 16), *(double *)(a2 + 16)) < 0.0000001
      && vabdd_f64(*(double *)(a1 + 24), *(double *)(a2 + 24)) < 0.0000001
      && vabdd_f64(*(double *)(a1 + 40), *(double *)(a2 + 40)) < 0.0000001
      && vabdd_f64(*(double *)(a1 + 32), *(double *)(a2 + 32)) < 0.0000001
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48);
}

double PCEvaluatorWaveData::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  v4 = (_OWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8000313F17);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8000313F17);
  v6 = *(_QWORD *)(a1 + 72);
  if (v6)
    MEMORY[0x1B5E2914C](v6, 0x1000C8000313F17);
  v7 = *(_QWORD *)(a1 + 80);
  if (v7)
    MEMORY[0x1B5E2914C](v7, 0x1000C8000313F17);
  result = 0.0;
  *v4 = 0u;
  v4[1] = 0u;
  return result;
}

void PCEvaluatorWaveData::~PCEvaluatorWaveData(PCEvaluatorWaveData *this)
{
  PCSpinLock *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (PCSpinLock *)((char *)this + 88);
  PCSpinLock::lock((os_unfair_lock_t)this + 22);
  v3 = *((_QWORD *)this + 7);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8000313F17);
  v4 = *((_QWORD *)this + 8);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8000313F17);
  v5 = *((_QWORD *)this + 9);
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8000313F17);
  v6 = *((_QWORD *)this + 10);
  if (v6)
    MEMORY[0x1B5E2914C](v6, 0x1000C8000313F17);
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  PCSpinLock::unlock(&v2->_lock);
  PCSpinLock::~PCSpinLock(v2);
}

void PCEvaluatorWaveData::refreshWaveArrays(PCEvaluatorWaveData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  _QWORD *v8;
  _QWORD *v9;
  double v10;
  long double v11;
  double *v12;
  _QWORD *v13;
  uint64_t v14;
  double v15;
  double v16;
  double *v17;
  double *v18;
  double *v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  long double v27;

  v2 = *((_QWORD *)this + 7);
  if (v2)
    MEMORY[0x1B5E2914C](v2, 0x1000C8000313F17);
  v3 = *((_QWORD *)this + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8000313F17);
  v4 = *((_QWORD *)this + 9);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8000313F17);
  v5 = *((_QWORD *)this + 10);
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8000313F17);
  v6 = *(double *)this;
  v7 = *((double *)this + 1);
  *((_QWORD *)this + 7) = operator new[]();
  *((_QWORD *)this + 8) = operator new[]();
  *((_QWORD *)this + 9) = operator new[]();
  v8 = (_QWORD *)operator new[]();
  *((_QWORD *)this + 10) = v8;
  v9 = (_QWORD *)*((_QWORD *)this + 7);
  *v9 = 0;
  v10 = *((double *)this + 2);
  v11 = sin(*((long double *)this + 4));
  v12 = (double *)*((_QWORD *)this + 8);
  v13 = (_QWORD *)*((_QWORD *)this + 9);
  *v12 = v10 * v11;
  *v13 = 0;
  *v8 = 0;
  v14 = *((unsigned int *)this + 12);
  if ((int)v14 >= 2)
  {
    v15 = sqrt(v6 * v6 + v7 * v7);
    v16 = (double)(int)v14;
    v17 = (double *)(v8 + 1);
    v18 = v12 + 1;
    v19 = (double *)(v9 + 1);
    v20 = 1;
    do
    {
      v21 = *((double *)this + 5);
      v22 = -fabs(v21);
      v23 = (double)(int)v20;
      if (v21 >= 0.0)
      {
        v25 = exp(v23 * v22 / v16);
        v24 = v23 / v16;
      }
      else
      {
        v24 = v23 / v16;
        v25 = exp((1.0 - v24) * v22);
      }
      *(double *)&v13[v20] = v24;
      *v19 = v15 * v24;
      v26 = v25 * *((double *)this + 2);
      v27 = v26 * sin(*(double *)&v13[v20] * 6.28318531 * *((double *)this + 3) + *((double *)this + 4));
      *v18 = v27;
      ++v20;
      *v17 = *(v17 - 1) + sqrt((*v19 - *(v19 - 1)) * (*v19 - *(v19 - 1)) + (v27 - *(v18 - 1)) * (v27 - *(v18 - 1)));
      ++v17;
      ++v18;
      ++v19;
    }
    while (v14 != v20);
  }
}

void PCEvaluator::PCEvaluator(PCEvaluator *this)
{
  *((_DWORD *)this + 12) = 0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
}

double PCEvaluator::findLengthOfEllipse(PCEvaluator *this, double a2, double a3, double a4, double a5)
{
  double v7;
  double v8;
  BOOL v9;
  double result;

  v7 = fabs(a2);
  v8 = fabs(a3);
  if (v7 >= 0.0000001)
  {
    if (v8 >= 0.0000001)
      return PCCalculus::ellipseLineIntegral(this, 1.57079633, a2, a3) * 4.0;
    else
      return a2 * 4.0;
  }
  else
  {
    v9 = v8 < 0.0000001;
    result = 0.0;
    if (!v9)
      return a3 * 4.0;
  }
  return result;
}

void PCEvaluator::findPointOnEllipse(PCEvaluator *this, double a2, double a3, double a4, double a5, double a6, double *a7, double *a8, double *a9)
{
  double v12;
  double v13;
  double v15;
  double v16;
  double v17;
  PCCalculus *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  PCCalculus *v29;
  PCCalculus *v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;

  v12 = a4;
  v13 = a3;
  if (vabdd_f64(a3, a4) < 0.0000001)
  {
    v15 = a2 * 3.14159265 + a2 * 3.14159265;
    goto LABEL_46;
  }
  if (a3 < 0.00001)
    a3 = 0.00001;
  if (a4 >= 0.00001)
    v16 = a4;
  else
    v16 = 0.00001;
  v17 = 1.57079633;
  v38 = a3;
  v19 = PCCalculus::ellipseLineIntegral(this, 1.57079633, a3, v16) * 4.0;
  v20 = floor(a2);
  if (a2 < 1.0)
    v20 = 0.0;
  v21 = a2 - v20;
  if (v21 >= 0.0)
    v22 = v21;
  else
    v22 = v21 + 1.0;
  v36 = v13;
  v37 = v12;
  v35 = v22;
  if (v22 >= 0.25)
  {
    if (v22 >= 0.5)
    {
      v24 = 1.0 - v22;
      if (v13 > v12)
        v24 = 0.25 - (1.0 - v22);
      v25 = 0.25 - (v22 + -0.5);
      if (v13 <= v12)
        v25 = v22 + -0.5;
      if (v22 < 0.75)
        v23 = v25;
      else
        v23 = v24;
    }
    else
    {
      v23 = 0.5 - v22;
      if (v13 > v12)
        v23 = 0.25 - v23;
    }
  }
  else
  {
    v23 = 0.25 - v22;
    if (v13 <= v12)
      v23 = v22;
  }
  v26 = v19 * v23;
  v27 = 0.0;
  v28 = PCCalculus::ellipseLineIntegral(v18, 0.0, v38, v16);
  v31 = PCCalculus::ellipseLineIntegral(v29, 1.57079633, v38, v16);
  while (1)
  {
    v32 = v27 + (v17 - v27) * (v26 - v28) / (v31 - v28);
    v33 = PCCalculus::ellipseLineIntegral(v30, v32, v38, v16);
    if (vabdd_f64(v33, v26) < 0.05)
      break;
    if (v26 <= v33)
      v17 = v27 + (v17 - v27) * (v26 - v28) / (v31 - v28);
    else
      v27 = v27 + (v17 - v27) * (v26 - v28) / (v31 - v28);
    if (v26 <= v33)
      v31 = v33;
    else
      v28 = v33;
  }
  v13 = v36;
  v12 = v37;
  if (v36 <= v37)
    v15 = v32;
  else
    v15 = 1.57079633 - v32;
  if (v35 >= 0.25)
  {
    if (v35 >= 0.5)
    {
      if (v35 < 0.75)
      {
        v15 = v15 + 3.14159265;
        goto LABEL_46;
      }
      v34 = 6.28318531;
    }
    else
    {
      v34 = 3.14159265;
    }
    v15 = v34 - v15;
  }
LABEL_46:
  if (a7)
    *a7 = -(v13 * cos(v15));
  if (a8)
    *a8 = sin(v15) * v12;
  if (a9)
    *a9 = v15;
}

void PCEvaluator::findPointOnSineWave(os_unfair_lock_s *this, double a2, double a3, double a4, double a5, double a6, double a7, double a8, int a9, double *a10, double *a11)
{
  double v13;
  os_unfair_lock_s *v16;
  int *v17;
  double v18;
  double v19;
  double *v20;
  double *os_unfair_lock_opaque;
  double v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  int v29;
  int v30;
  uint64_t v31;
  double *v32;
  double *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  long double *v41;
  double *v42;
  double *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  double v48;
  long double v49;
  double v50;
  double *v51;
  double *v52;
  double *v53;
  double *v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  double *v61;
  double *v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double *v69;
  double v70;
  double v71;
  double *v72;
  os_unfair_lock_s *v73;
  double *v74;
  double v75;
  double *v76;
  double *v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  int v83;
  _QWORD v84[6];
  int v85;
  __int128 v86;
  __int128 v87;
  int v88;

  v13 = a6;
  v88 = 0;
  *(double *)v84 = a7;
  *(double *)&v84[1] = a8;
  *(double *)&v84[2] = a3;
  *(double *)&v84[3] = a4;
  *(double *)&v84[4] = a5;
  *(double *)&v84[5] = a6;
  v85 = a9;
  v86 = 0u;
  v87 = 0u;
  v16 = this + 22;
  PCSpinLock::lock(this + 22);
  if (!PCEvaluatorWaveData::operator==((uint64_t)this, (uint64_t)v84))
  {
    PCEvaluatorWaveData::operator=((uint64_t)this, (uint64_t)v84);
    PCEvaluatorWaveData::refreshWaveArrays((PCEvaluatorWaveData *)this);
  }
  v18 = *(double *)&this->_os_unfair_lock_opaque;
  v19 = *(double *)&this[2]._os_unfair_lock_opaque;
  v83 = 0;
  v20 = *(double **)&this[20]._os_unfair_lock_opaque;
  os_unfair_lock_opaque = (double *)this[12]._os_unfair_lock_opaque;
  v22 = v20[(int)os_unfair_lock_opaque - 1] * a2;
  PCAlgorithm::bisect(v20, os_unfair_lock_opaque, &v83, v22, v17);
  v23 = *(_QWORD *)&this[20]._os_unfair_lock_opaque;
  v24 = v83 + 1;
  v25 = *(double *)(v23 + 8 * v83);
  v26 = *(double *)(v23 + 8 * v24) - v25;
  v27 = ceil(v26 + v26);
  v28 = fabs(v13);
  if (v27 <= 1.0)
  {
    if (v83 >= (signed int)(this[12]._os_unfair_lock_opaque - 1))
    {
      v39 = *(double *)(*(_QWORD *)&this[18]._os_unfair_lock_opaque + 8 * v83);
    }
    else
    {
      v63 = *(_QWORD *)&this[18]._os_unfair_lock_opaque;
      if (fabs(v26) >= 0.0000001)
      {
        v68 = *(double *)(v63 + 8 * v24);
        v39 = *(double *)(v63 + 8 * v83);
        if (vabdd_f64(v68, v39) >= 0.0000001)
          v39 = v39 + (v22 - v25) / (v26 / (v68 - v39));
      }
      else
      {
        v39 = *(double *)(v63 + 8 * v83);
      }
    }
  }
  else
  {
    v29 = v27;
    v30 = this[12]._os_unfair_lock_opaque;
    v31 = v27 + 1;
    v32 = (double *)operator new[]();
    v77 = (double *)operator new[]();
    v76 = (double *)operator new[]();
    v75 = v22;
    v33 = (double *)operator new[]();
    v34 = v83;
    v35 = *(_QWORD *)&this[16]._os_unfair_lock_opaque;
    v36 = *(double *)(*(_QWORD *)&this[14]._os_unfair_lock_opaque + 8 * v83);
    v37 = v32;
    *v32 = v36;
    v38 = *(double *)(v35 + 8 * v34);
    *v77 = v38;
    v39 = *(double *)(*(_QWORD *)&this[18]._os_unfair_lock_opaque + 8 * v34);
    *v76 = v39;
    if (v29 <= 0)
    {
      v29 = 0;
      *v33 = *(double *)(*(_QWORD *)&this[20]._os_unfair_lock_opaque + 8 * v34);
      v52 = v77;
      v61 = v76;
LABEL_20:
      v83 = v29;
    }
    else
    {
      v72 = a10;
      v73 = v16;
      v74 = a11;
      v81 = sqrt(v18 * v18 + v19 * v19) * (1.0 / (double)v30 / (double)v29);
      v82 = 1.0 / (double)v30 / (double)v29;
      v71 = v28;
      v79 = *(double *)&this[4]._os_unfair_lock_opaque;
      v80 = -v28;
      v40 = *(double *)&this[8]._os_unfair_lock_opaque;
      v78 = *(double *)&this[6]._os_unfair_lock_opaque;
      v41 = v77 + 1;
      v42 = v32 + 1;
      v43 = v76 + 1;
      v44 = v31 - 1;
      v45 = v31 - 1;
      v46 = v13;
      v47 = v36;
      do
      {
        v39 = v82 + v39;
        *v43++ = v39;
        v47 = v81 + v47;
        *v42++ = v47;
        v48 = 1.0 - v39;
        if (v46 >= 0.0)
          v48 = v39;
        v49 = exp(v48 * v80) * v79;
        *v41++ = v49 * sin(v39 * 6.28318531 * v78 + v40);
        --v45;
      }
      while (v45);
      v50 = *(double *)(*(_QWORD *)&this[20]._os_unfair_lock_opaque + 8 * v34);
      *v33 = v50;
      v51 = v33 + 1;
      v52 = v77;
      v53 = v77 + 1;
      v37 = v32;
      v54 = v32 + 1;
      v55 = v44;
      do
      {
        v56 = *v54++;
        v57 = v56;
        v58 = (v56 - v36) * (v56 - v36);
        v59 = *v53++;
        v50 = v50 + sqrt(v58 + (v59 - v38) * (v59 - v38));
        *v51++ = v50;
        v38 = v59;
        v36 = v57;
        --v55;
      }
      while (v55);
      v60 = 0;
      v13 = v46;
      v61 = v76;
      while (1)
      {
        v62 = &v33[v60];
        if (v62[1] > v75)
          break;
        if (v44 == ++v60)
        {
          v39 = v76[v29];
          v16 = v73;
          a11 = v74;
          a10 = v72;
          v28 = v71;
          goto LABEL_20;
        }
      }
      v83 = v60;
      v67 = v62[1];
      if (vabdd_f64(v67, *v62) >= 0.0000001)
      {
        v69 = &v76[v60];
        v39 = *v69;
        v70 = v69[1];
        v16 = v73;
        a11 = v74;
        a10 = v72;
        v28 = v71;
        if (vabdd_f64(v70, *v69) >= 0.0000001)
          v39 = v39 + (v75 - *v62) / ((v67 - *v62) / (v70 - v39));
      }
      else
      {
        v39 = v76[v60];
        v16 = v73;
        a11 = v74;
        a10 = v72;
        v28 = v71;
      }
    }
    MEMORY[0x1B5E2914C](v37, 0x1000C8000313F17);
    MEMORY[0x1B5E2914C](v52, 0x1000C8000313F17);
    MEMORY[0x1B5E2914C](v61, 0x1000C8000313F17);
    MEMORY[0x1B5E2914C](v33, 0x1000C8000313F17);
  }
  v64 = 1.0 - v39;
  if (v13 >= 0.0)
    v64 = v39;
  v65 = exp(-(v28 * v64));
  if (a10)
    *a10 = v39;
  if (a11)
  {
    v66 = v65 * *(double *)&this[4]._os_unfair_lock_opaque;
    *a11 = v66
         * sin(v39 * 6.28318531 * *(double *)&this[6]._os_unfair_lock_opaque + *(double *)&this[8]._os_unfair_lock_opaque);
  }
  PCSpinLock::unlock(v16);
  PCEvaluatorWaveData::~PCEvaluatorWaveData((PCEvaluatorWaveData *)v84);
}

void sub_1B2996FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  PCEvaluatorWaveData::~PCEvaluatorWaveData((PCEvaluatorWaveData *)va);
  _Unwind_Resume(a1);
}

double PCEvaluator::findLengthOfSineWave(os_unfair_lock_s *this, double a2, double a3, double a4, double a5, double a6, double a7, int a8)
{
  os_unfair_lock_s *v9;
  double v10;
  _QWORD v12[6];
  int v13;
  __int128 v14;
  __int128 v15;
  int v16;

  v16 = 0;
  *(double *)v12 = a6;
  *(double *)&v12[1] = a7;
  *(double *)&v12[2] = a2;
  *(double *)&v12[3] = a3;
  *(double *)&v12[4] = a4;
  *(double *)&v12[5] = a5;
  v13 = a8;
  v14 = 0u;
  v9 = this + 22;
  v15 = 0u;
  PCSpinLock::lock(this + 22);
  if (!PCEvaluatorWaveData::operator==((uint64_t)this, (uint64_t)v12))
  {
    PCEvaluatorWaveData::operator=((uint64_t)this, (uint64_t)v12);
    PCEvaluatorWaveData::refreshWaveArrays((PCEvaluatorWaveData *)this);
  }
  v10 = *(double *)(*(_QWORD *)&this[20]._os_unfair_lock_opaque + 8 * (int)this[12]._os_unfair_lock_opaque - 8);
  PCSpinLock::unlock(v9);
  PCEvaluatorWaveData::~PCEvaluatorWaveData((PCEvaluatorWaveData *)v12);
  return v10;
}

void sub_1B29970B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCEvaluatorWaveData::~PCEvaluatorWaveData((PCEvaluatorWaveData *)&a9);
  _Unwind_Resume(a1);
}

uint64_t PCMath::quadratic(PCMath *this, double a2, int8x16_t a3, double a4, double *a5, double *a6, int8x16_t a7)
{
  double v7;
  double v8;
  float64x2_t v11;
  double v12;
  double v13;
  double v14;

  if (a2 > -0.0000001 && a2 < 0.0000001)
  {
    if (*(double *)a3.i64 <= -0.0000001 || *(double *)a3.i64 >= 0.0000001)
    {
      v7 = -a4 / *(double *)a3.i64;
LABEL_20:
      *(double *)this = v7;
      return 1;
    }
    return 0;
  }
  v8 = *(double *)a3.i64 * *(double *)a3.i64 + a2 * -4.0 * a4;
  if (v8 < 0.0)
  {
    if (v8 > -*(double *)a7.i64 && v8 < *(double *)a7.i64)
    {
      v7 = *(double *)a3.i64 * -0.5 / a2;
      goto LABEL_20;
    }
    return 0;
  }
  *(double *)a7.i64 = sqrt(v8);
  v11.f64[0] = NAN;
  v11.f64[1] = NAN;
  v12 = (*(double *)vbslq_s8((int8x16_t)vnegq_f64(v11), a7, a3).i64 + *(double *)a3.i64) * -0.5;
  if (v12 > -0.0000001 && v12 < 0.0000001)
  {
    *(_QWORD *)this = 0;
    return 1;
  }
  *(double *)this = v12 / a2;
  v13 = a4 / v12;
  *a5 = a4 / v12;
  v14 = *(double *)this;
  if (vabdd_f64(*(double *)this, v13) < 0.0000001)
    return 1;
  if (v14 > v13)
  {
    *(double *)this = v13;
    *a5 = v14;
  }
  return 2;
}

uint64_t PCMath::cubic(PCMath *this, double a2, double a3, int8x16_t a4, double *a5, double *a6, double *a7)
{
  double v9;
  double v10;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int8x16_t v18;
  float64x2_t v19;
  double v20;
  BOOL v21;
  double v22;
  double v24;
  int8x16_t v25;

  v9 = (a2 * a2 + a3 * -3.0) / 9.0;
  *(double *)a4.i64 = (*(double *)a4.i64 * 27.0 + (a2 + a2) * a2 * a2 - a2 * 9.0 * a3) / 54.0;
  v10 = v9 * (v9 * v9);
  if (*(double *)a4.i64 * *(double *)a4.i64 >= v10)
  {
    v25 = a4;
    *(double *)v18.i64 = pow(fabs(*(double *)a4.i64) + sqrt(*(double *)a4.i64 * *(double *)a4.i64 - v10), 0.333333333);
    v19.f64[0] = NAN;
    v19.f64[1] = NAN;
    v20 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v19), v18, v25).i64;
    v21 = v20 > -0.0000001 && v20 < 0.0000001;
    v22 = v9 / -v20;
    if (v21)
      v22 = 0.0;
    *(double *)this = v22 - v20 + a2 / -3.0;
    return 1;
  }
  else
  {
    v13 = acos(*(double *)a4.i64 / sqrt(v10));
    v14 = sqrt(v9) * -2.0;
    v15 = a2 / 3.0;
    *(long double *)this = v14 * cos(v13 / 3.0) - v15;
    *a5 = v14 * cos((v13 + 6.28318531) / 3.0) - v15;
    v16 = v14 * cos((v13 + -6.28318531) / 3.0) - v15;
    *a6 = v16;
    v17 = *(double *)this;
    if (*(double *)this <= *a5)
    {
      v17 = *a5;
    }
    else
    {
      *(double *)this = *a5;
      *a5 = v17;
      v16 = *a6;
    }
    if (v17 > v16)
    {
      *a5 = v16;
      *a6 = v17;
      v24 = *(double *)this;
      if (*(double *)this > *a5)
      {
        *(double *)this = *a5;
        *a5 = v24;
      }
    }
    return 3;
  }
}

double *PCMath::easeInOut(double *this, double a2, double a3, double a4, double a5, double a6, double *a7, double *a8)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v8 = 0.0;
  if (a3 < 0.0)
    a3 = 0.0;
  if (a4 >= 0.0)
    v9 = a4;
  else
    v9 = 1.0;
  v10 = a3 + v9;
  if (fabs(a3 + v9) < 0.0000001)
  {
    if (this)
      *this = a2;
    v8 = 1.0;
    goto LABEL_27;
  }
  v11 = a2 - a5;
  v12 = a6 - a5;
  if (v10 <= 1.0)
  {
    v13 = a3;
  }
  else
  {
    v9 = v9 / v10;
    v13 = a3 / v10;
  }
  if (v10 > 1.0)
    v14 = 1.0;
  else
    v14 = v10;
  v15 = v11 / v12;
  if (v11 / v12 < 0.0)
  {
    v16 = 0.0;
    goto LABEL_25;
  }
  v17 = v14 + -2.0;
  if (v15 >= v13)
  {
    v16 = 1.0;
    if (v15 <= 1.0 - v9)
    {
      v16 = (v13 - (v15 + v15)) / v17;
      v18 = -2.0;
    }
    else
    {
      if (v15 >= 1.0)
        goto LABEL_25;
      v17 = v9 * v17;
      v16 = (1.0 - v15) * (1.0 - v15) / v17 + 1.0;
      v18 = v15 + -1.0 + v15 + -1.0;
    }
  }
  else
  {
    v17 = v13 * v17;
    v16 = -(v15 * v15) / v17;
    v18 = v15 * -2.0;
  }
  v8 = v18 / v17;
LABEL_25:
  if (this)
    *this = v12 * v16 + a5;
LABEL_27:
  if (a7)
    *a7 = v8;
  return this;
}

FILE *_pcCheckGetTransformation(FILE *result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((result & 1) == 0)
    return PCPrint("getTransformation failed (file %s, line %d)", (uint64_t)a2, a3, a4, a5, a6, a7, a8, (char)a2);
  return result;
}

void PCMatrix44Tmpl<double>::leftRotate(double *a1, int a2, double a3)
{
  double v5;
  double cosval;
  __double2 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;

  if (a3 != 0.0)
  {
    v5 = 1.0;
    cosval = 0.0;
    if (vabdd_f64(-1.57079633, a3) >= 0.0000001 && vabdd_f64(4.71238898, a3) >= 0.0000001)
    {
      v5 = -1.0;
      if (vabdd_f64(1.57079633, a3) >= 0.0000001 && vabdd_f64(-4.71238898, a3) >= 0.0000001)
      {
        v5 = 0.0;
        cosval = -1.0;
        if (vabdd_f64(-3.14159265, a3) >= 0.0000001 && vabdd_f64(3.14159265, a3) >= 0.0000001)
        {
          v7 = __sincos_stret(a3);
          cosval = v7.__cosval;
          v5 = -v7.__sinval;
        }
      }
    }
    if (a2)
    {
      if (a2 != 1)
      {
        if (a2 == 2)
        {
          v8 = a1[1];
          v9 = a1[4];
          v10 = a1[5];
          v11 = a1[2];
          v12 = a1[3];
          v13 = a1[6];
          v14 = a1[7];
          v15 = cosval * v9 - v5 * *a1;
          *a1 = cosval * *a1 + v5 * v9;
          a1[1] = cosval * v8 + v5 * v10;
          a1[2] = cosval * v11 + v5 * v13;
          a1[3] = cosval * v12 + v5 * v14;
          a1[4] = v15;
          a1[5] = cosval * v10 - v5 * v8;
          a1[6] = cosval * v13 - v5 * v11;
          a1[7] = cosval * v14 - v5 * v12;
        }
        return;
      }
      v28 = a1[1];
      v29 = a1[8];
      v30 = a1[9];
      v31 = cosval * *a1 - v5 * v29;
      v32 = a1[2];
      v33 = a1[3];
      v34 = a1[10];
      v35 = a1[11];
      v36 = v5 * *a1 + cosval * v29;
      v26 = v5 * v32 + cosval * v34;
      *a1 = v31;
      a1[1] = cosval * v28 - v5 * v30;
      a1[2] = cosval * v32 - v5 * v34;
      a1[3] = cosval * v33 - v5 * v35;
      a1[8] = v36;
      a1[9] = v5 * v28 + cosval * v30;
      v27 = v5 * v33 + cosval * v35;
    }
    else
    {
      v16 = a1[4];
      v17 = a1[5];
      v18 = a1[8];
      v19 = a1[9];
      v20 = cosval * v16 + v5 * v18;
      v21 = a1[6];
      v22 = a1[7];
      v23 = a1[10];
      v24 = a1[11];
      v25 = cosval * v18 - v5 * v16;
      v26 = cosval * v23 - v5 * v21;
      a1[4] = v20;
      a1[5] = cosval * v17 + v5 * v19;
      a1[6] = cosval * v21 + v5 * v23;
      a1[7] = cosval * v22 + v5 * v24;
      a1[8] = v25;
      a1[9] = cosval * v19 - v5 * v17;
      v27 = cosval * v24 - v5 * v22;
    }
    a1[10] = v26;
    a1[11] = v27;
  }
}

double PCMatrix44Tmpl<double>::transpose(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 32) = v1;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 72) = v7;
  result = *(double *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 48) = v5;
  *(double *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 88) = v10;
  *(_QWORD *)(a1 + 96) = v3;
  *(_QWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 112) = v6;
  return result;
}

double PCVector4<double>::scale(double *a1, double result)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = sqrt(v2 * v2 + v3 * v3 + v4 * v4 + v5 * v5);
  if (v6 != 0.0)
  {
    v7 = result / v6;
    *a1 = v2 * v7;
    a1[1] = v3 * v7;
    v8 = v4 * v7;
    result = v5 * v7;
    a1[2] = v8;
    a1[3] = result;
  }
  return result;
}

BOOL PCMath::equal(double *a1, double *a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;

  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v7 = a2[3];
  v6 = a2[4];
  v8 = a2[5];
  v9 = sqrt((v3 * v3 + v4 * v4 + v5 * v5) / (v7 * v7 + v6 * v6 + v8 * v8));
  if (v3 * v7 + v4 * v6 + v5 * v8 >= 0.0)
    v10 = v9;
  else
    v10 = -v9;
  if (vabdd_f64(v3, v7 * v10) >= 0.0000001
    || vabdd_f64(v4, v6 * v10) >= 0.0000001
    || vabdd_f64(v5, v8 * v10) >= 0.0000001)
  {
    return 0;
  }
  v12 = a1[1];
  v13 = a2[1];
  return vabdd_f64(*a1, *a2) < 0.0000001 && vabdd_f64(v12, v13) < 0.0000001 && vabdd_f64(a1[2], a2[2]) < 0.0000001
      || vabdd_f64(v3 * *a1 + v4 * v12 + v5 * a1[2], v3 * *a2 + v4 * v13 + v5 * a2[2]) < a3;
}

uint64_t PCComparePlanes(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = sqrt(v2 * v2 + v3 * v3 + v4 * v4);
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  if (v5 > -0.0000001 && v5 < 0.0000001)
    return a1[3] < 0.0;
  v10 = sqrt(v6 * v6 + v7 * v7 + v8 * v8);
  if (v10 <= -0.0000001 || v10 >= 0.0000001)
  {
    v11 = v2 * v10;
    v12 = v3 * v10;
    v13 = v4 * v10;
    v14 = v10 * a1[3];
    v15 = v6 * v5;
    v16 = v7 * v5;
    v17 = v8 * v5;
    v18 = v5 * a2[3];
    if (vabdd_f64(v11, v15) >= 0.0000001 || vabdd_f64(v12, v16) >= 0.0000001 || vabdd_f64(v13, v17) >= 0.0000001)
    {
      if (fabs(v15 + v11) >= 0.0000001 || fabs(v16 + v12) >= 0.0000001 || fabs(v17 + v13) >= 0.0000001)
        return 8;
      v19 = v14 <= -v18;
      v20 = 7;
      v21 = 6;
    }
    else
    {
      v19 = v14 <= v18;
      v20 = 4;
      v21 = 5;
    }
    if (v19)
      return v20;
    else
      return v21;
  }
  else if (a2[3] < 0.0)
  {
    return 3;
  }
  else
  {
    return 2;
  }
}

uint64_t PCPlaneType(double *a1)
{
  double v2;
  uint64_t result;
  double v4;
  double v5;

  v2 = *a1;
  result = 8;
  if (v2 > -0.0000001 && v2 < 0.0000001)
  {
    v4 = a1[1];
    if (v4 > -0.0000001 && v4 < 0.0000001)
    {
      v5 = a1[2];
      if (v5 > -0.0000001 && v5 < 0.0000001)
        return a1[3] <= 0.0;
    }
  }
  return result;
}

void PCDivideByZeroException::~PCDivideByZeroException(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void PCDivideByZeroException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCDivideByZeroException"));
}

double PCComputeSquareToQuadProjectionMatrix(double *a1, double *a2, double *a3, double *a4, uint64_t a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double result;

  v6 = *a2;
  v5 = a2[1];
  v8 = *a1;
  v7 = a1[1];
  v10 = *a3;
  v9 = a3[1];
  v12 = *a4;
  v11 = a4[1];
  v13 = *a3 + *a1 - *a2 - *a4;
  v14 = v9 + v7 - v5 - v11;
  if (v13 <= -0.0000001 || v13 >= 0.0000001 || v14 <= -0.0000001 || v14 >= 0.0000001)
  {
    v21 = v6 - v10;
    v22 = v12 - v10;
    v23 = v5 - v9;
    v24 = v11 - v9;
    v25 = v21 * v24 - v22 * v23;
    v19 = (v13 * v24 - v22 * v14) / v25;
    v20 = (v21 * v14 - v23 * v13) / v25;
    v15 = v6 - v8 + v6 * v19;
    v16 = v12 - v8 + v12 * v20;
    v17 = v5 - v7 + v5 * v19;
    v18 = v11 - v7 + v11 * v20;
  }
  else
  {
    v15 = v6 - v8;
    v16 = v10 - v6;
    v17 = v5 - v7;
    v18 = v9 - v5;
    v19 = 0.0;
    v20 = 0.0;
  }
  *(double *)a5 = v15;
  *(double *)(a5 + 8) = v16;
  *(_QWORD *)(a5 + 16) = 0;
  *(double *)(a5 + 24) = v8;
  *(double *)(a5 + 32) = v17;
  *(double *)(a5 + 40) = v18;
  *(_QWORD *)(a5 + 48) = 0;
  *(double *)(a5 + 56) = v7;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_OWORD *)(a5 + 80) = xmmword_1B304EED0;
  *(double *)(a5 + 96) = v19;
  *(double *)(a5 + 104) = v20;
  result = 0.0;
  *(_OWORD *)(a5 + 112) = xmmword_1B304EEE0;
  return result;
}

float64x2_t *PCComputeQuadToSquareProjectionMatrix(float64x2_t *result, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, uint64_t a5)
{
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  int64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  float64x2_t v30;
  float64x2_t v31;
  double v32;
  int8x16_t v33;
  uint64_t i;

  v5 = *a2;
  v6 = *a3;
  v7 = *result;
  v8 = vsubq_f64(vaddq_f64(*a3, vsubq_f64(*result, *a2)), *a4);
  if (v8.f64[0] <= -0.0000001 || v8.f64[0] >= 0.0000001 || v8.f64[1] <= -0.0000001 || v8.f64[1] >= 0.0000001)
  {
    v14.f64[0] = a4->f64[0];
    v14.f64[1] = a2->f64[1];
    v5.f64[1] = a4->f64[1];
    v15 = vsubq_f64(v14, v6);
    v16 = (int64x2_t)vsubq_f64(v5, v6);
    v17 = (float64x2_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL);
    v18 = vmulq_f64(v8, v17);
    v17.f64[1] = v15.f64[1];
    v19 = vmulq_f64((float64x2_t)vzip1q_s64(v16, (int64x2_t)v15), v17);
    v20 = vmulq_f64(v15, (float64x2_t)vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL));
    v21 = vsubq_f64(v5, v7);
    v13 = vdivq_f64(vsubq_f64(v18, v20), (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vsubq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1)), 0));
    v22 = vmulq_f64(v5, v13);
    v11 = vaddq_f64(vsubq_f64(v14, v7), vmulq_f64(v14, (float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL)));
    v12 = vaddq_f64(v21, v22);
  }
  else
  {
    v9.f64[0] = a2->f64[0];
    v9.f64[1] = a3->f64[1];
    v6.f64[1] = a2->f64[1];
    v10.f64[0] = result->f64[0];
    v10.f64[1] = v6.f64[1];
    v5.f64[1] = result->f64[1];
    v11 = vsubq_f64(v6, v5);
    v12 = vsubq_f64(v9, v10);
    v13 = 0uLL;
  }
  v23 = 0;
  v24 = vmuld_lane_f64(v7.f64[0], v13, 1) - v11.f64[0];
  v25 = vmuld_lane_f64(v11.f64[0], v7, 1);
  v26 = vmuld_lane_f64(v7.f64[0], v12, 1);
  v27 = vmuld_lane_f64(v13.f64[0], v7, 1) - v11.f64[1];
  v28 = *(_OWORD *)&vsubq_f64(v12, vmulq_f64(v7, v13));
  v29 = vmuld_lane_f64(v7.f64[0], v11, 1);
  v7.f64[0] = vmuld_lane_f64(v12.f64[0], v7, 1);
  v30 = vmulq_f64(v13, v11);
  v31 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), v12);
  v12.f64[0] = vmuld_lane_f64(v12.f64[0], v12, 1);
  v32 = vmuld_lane_f64(v11.f64[0], v11, 1);
  *(double *)a5 = v12.f64[1] - vmuld_lane_f64(v7.f64[1], v13, 1);
  *(double *)(a5 + 8) = v24;
  *(_QWORD *)(a5 + 16) = 0;
  *(double *)(a5 + 24) = v25 - v26;
  *(double *)(a5 + 32) = v27;
  *(_QWORD *)(a5 + 40) = v28;
  *(_QWORD *)(a5 + 48) = 0;
  *(double *)(a5 + 56) = v29 - v7.f64[0];
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(double *)(a5 + 80) = v12.f64[0] - v32;
  *(_QWORD *)(a5 + 88) = 0;
  v33 = (int8x16_t)vsubq_f64(v30, v31);
  *(int8x16_t *)(a5 + 96) = vextq_s8(v33, v33, 8uLL);
  *(_QWORD *)(a5 + 112) = 0;
  *(double *)(a5 + 120) = v12.f64[0] - v32;
  v7.f64[0] = 1.0
            / (vmuld_lane_f64(v29, v13, 1)
             + v12.f64[0]
             + v25 * v13.f64[0]
             - v26 * v13.f64[0]
             - v32
             - vmuld_lane_f64(v7.f64[0], v13, 1));
  do
  {
    for (i = 0; i != 32; i += 16)
      *(float64x2_t *)(a5 + i) = vmulq_n_f64(*(float64x2_t *)(a5 + i), v7.f64[0]);
    ++v23;
    a5 += 32;
  }
  while (v23 != 4);
  return result;
}

uint64_t PCComputeQuadToQuadProjectionMatrix(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, double *a5, double *a6, double *a7, double *a8, uint64_t a9)
{
  uint64_t i;
  _OWORD *v18;
  __int128 v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t j;
  uint64_t result;
  double v26;
  double v27;
  double v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v50 = 0x3FF0000000000000;
  v47 = 0x3FF0000000000000;
  v44 = 0x3FF0000000000000;
  v41 = 0x3FF0000000000000;
  v42 = 0u;
  v43 = 0u;
  v45 = 0u;
  v46 = 0u;
  v48 = 0u;
  v49 = 0u;
  v40 = 0x3FF0000000000000;
  v37 = 0x3FF0000000000000;
  v34 = 0x3FF0000000000000;
  v31 = 0x3FF0000000000000;
  v32 = 0u;
  v33 = 0u;
  v35 = 0u;
  v36 = 0u;
  v38 = 0u;
  v39 = 0u;
  PCComputeQuadToSquareProjectionMatrix(a1, a2, a3, a4, (uint64_t)&v31);
  PCComputeSquareToQuadProjectionMatrix(a5, a6, a7, a8, (uint64_t)&v41);
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v41, (__int128 *)&v31, (uint64_t)&v29);
  if (&v29 != (__int128 *)a9)
  {
    for (i = 0; i != 128; i += 32)
    {
      v18 = (_OWORD *)(a9 + i);
      v19 = *(__int128 *)((char *)&v29 + i + 16);
      *v18 = *(__int128 *)((char *)&v29 + i);
      v18[1] = v19;
    }
  }
  v20 = sqrt(*(double *)(a9 + 96) * *(double *)(a9 + 96)+ *(double *)(a9 + 104) * *(double *)(a9 + 104)+ *(double *)(a9 + 112) * *(double *)(a9 + 112)+ *(double *)(a9 + 120) * *(double *)(a9 + 120));
  if (v20 <= -0.0000001 || v20 >= 0.0000001)
  {
    v21 = 0;
    v22 = a9;
    v23 = 1.0 / v20;
    do
    {
      for (j = 0; j != 32; j += 16)
        *(float64x2_t *)(v22 + j) = vmulq_n_f64(*(float64x2_t *)(v22 + j), v23);
      ++v21;
      v22 += 32;
    }
    while (v21 != 4);
  }
  v29 = 0u;
  v30 = 0u;
  PCMatrix44Tmpl<double>::transform<double>((double *)a9, a1->f64, (double *)&v29);
  result = 0;
  v26 = *((double *)&v30 + 1);
  if (*((double *)&v30 + 1) != 0.0)
  {
    v29 = 0u;
    v30 = 0u;
    PCMatrix44Tmpl<double>::transform<double>((double *)a9, a2->f64, (double *)&v29);
    v27 = *((double *)&v30 + 1);
    if (*((double *)&v30 + 1) > 0.0)
    {
      if (v26 <= 0.0)
        return 0;
    }
    else if (v26 > 0.0 || *((double *)&v30 + 1) >= 0.0)
    {
      return 0;
    }
    v29 = 0u;
    v30 = 0u;
    PCMatrix44Tmpl<double>::transform<double>((double *)a9, a3->f64, (double *)&v29);
    v28 = *((double *)&v30 + 1);
    if (*((double *)&v30 + 1) <= 0.0)
    {
      if (v27 > 0.0 || *((double *)&v30 + 1) >= 0.0)
        return 0;
LABEL_21:
      v29 = 0u;
      v30 = 0u;
      PCMatrix44Tmpl<double>::transform<double>((double *)a9, a4->f64, (double *)&v29);
      if (*((double *)&v30 + 1) <= 0.0)
      {
        if (v28 > 0.0 || *((double *)&v30 + 1) >= 0.0)
          return 0;
      }
      else if (v28 <= 0.0)
      {
        return 0;
      }
      return 1;
    }
    if (v27 > 0.0)
      goto LABEL_21;
    return 0;
  }
  return result;
}

void sub_1B2999D44(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B2999EA8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B2999F08(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void RandMersenne::RandMersenne(RandMersenne *this)
{
  *(_QWORD *)this = &off_1E65129E8;
  *((_QWORD *)this + 386) = 0;
  *((_QWORD *)this + 388) = 0;
  *((_QWORD *)this + 387) = 0;
}

void RandMersenne::~RandMersenne(RandMersenne *this)
{
  *(_QWORD *)this = &off_1E65129E8;
  *((_QWORD *)this + 386) = 0;
  *((_QWORD *)this + 388) = 0;
  *((_QWORD *)this + 387) = 0;
}

{
  *(_QWORD *)this = &off_1E65129E8;
  *((_QWORD *)this + 386) = 0;
  *((_QWORD *)this + 388) = 0;
  *((_QWORD *)this + 387) = 0;
  JUMPOUT(0x1B5E29170);
}

double RandMersenne::SetSeed(RandMersenne *this, unsigned int a2)
{
  double result;

  dsfmt_chk_init_gen_rand((uint64_t)this + 8, a2, 19937);
  *((_QWORD *)this + 388) = 0;
  result = 0.0;
  *((_OWORD *)this + 193) = 0u;
  return result;
}

BOOL PCRectClipTest(double a1, double a2, double *a3, double *a4)
{
  double v4;
  double v5;

  if (a1 >= 0.0)
  {
    if (a1 <= 0.0)
      return a2 >= 0.0;
    v5 = a2 / a1;
    if (v5 >= *a3)
    {
      if (v5 < *a4)
        *a4 = v5;
      return 1;
    }
    return 0;
  }
  v4 = a2 / a1;
  if (v4 > *a4)
    return 0;
  if (v4 > *a3)
    *a3 = v4;
  return 1;
}

void *getNCLCToCGNameMap(void)
{
  unsigned __int8 v0;

  {
    makeNCLCToCGNameMap();
    __cxa_atexit((void (*)(void *))std::map<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>::~map[abi:ne180100], &getNCLCToCGNameMap(void)::result, &dword_1B2737000);
  }
  return &getNCLCToCGNameMap(void)::result;
}

void sub_1B299A188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t makeNCLCToCGNameMap(void)
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0C9DA00];
  v1 = *MEMORY[0x1E0C9D958];
  v11 = 0;
  v10 = 0x800000001;
  v12 = v0;
  v13 = v1;
  v2 = *MEMORY[0x1E0C9DA10];
  v3 = *MEMORY[0x1E0C9D960];
  v14 = 0xD00000001;
  v15 = 0;
  v16 = v2;
  v17 = v3;
  v4 = *MEMORY[0x1E0C9D9F8];
  v5 = *MEMORY[0x1E0C9D950];
  v18 = 0x800000009;
  v19 = 0;
  v20 = v4;
  v21 = v5;
  v6 = *MEMORY[0x1E0C9D908];
  v7 = *MEMORY[0x1E0C9D928];
  v22 = 0xD0000000CLL;
  v23 = 0;
  v24 = v6;
  v25 = v7;
  v8 = *MEMORY[0x1E0C9D900];
  v27 = 0;
  v26 = 0x110000000BLL;
  v28 = v8;
  v29 = 0;
  return std::map<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>::map[abi:ne180100]((uint64_t)&getNCLCToCGNameMap(void)::result, &v10, 5);
}

uint64_t std::map<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t getAPILock@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  PCMutex *v3;
  uint64_t result;
  PCMutex *v5;

  {
    v5 = (PCMutex *)operator new();
    PCMutex::PCMutex(v5);
    getAPILock(void)::mutex = (uint64_t)v5;
  }
  v3 = (PCMutex *)getAPILock(void)::mutex;
  *(_QWORD *)a1 = getAPILock(void)::mutex;
  *(_BYTE *)(a1 + 8) = 0;
  result = PCMutex::lock(v3);
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

void sub_1B299A38C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4076DFA842);
  _Unwind_Resume(a1);
}

CGColorSpaceRef PCGetNCLCColorSpace(unsigned int *a1)
{
  _BOOL4 v2;

  v2 = operator==((uint64_t)a1, (uint64_t)&kPCNCLC_Rec2020Linear);
  return PCGetNCLCColorSpace(a1, v2);
}

CGColorSpaceRef PCGetNCLCColorSpace(unsigned int *a1, int a2)
{
  int v3;
  CGColorSpaceRef ColorSpace_Locked;
  PCMutex *v6;
  char v7;
  unint64_t v8;
  int v9;

  v8 = PCMakeCanonicalNCLCCode(a1);
  v9 = v3;
  if (!PCIsUsableNCLCCode((unsigned int *)&v8))
    return 0;
  getAPILock((uint64_t)&v6);
  ColorSpace_Locked = findOrMakeColorSpace_Locked(&v8, a2, 1);
  if (v6 && v7)
    PCMutex::unlock(v6);
  return ColorSpace_Locked;
}

void sub_1B299A470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CGColorSpaceRef findOrMakeColorSpace_Locked(_DWORD *a1, int a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _BOOL4 v11;
  _QWORD *v12;
  uint64_t *ColorSpaceList;
  char *v14;
  uint64_t v15;
  __CFString *v16;
  CGColorSpaceRef v17;
  CGColorSpace *ColorSpace_Locked;
  CGColorSpace *v19;
  CGColorSpace **v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  CGColorSpace *v25;
  CGColorSpaceRef *v26;
  CGColorSpace *v27;
  uint64_t v28;
  CGColorSpaceRef v29;
  _OWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  float *NCLCHashTable;
  char *v37;
  uint64_t v38;
  _QWORD *v40;
  CGColorSpace *v41;
  CGColorSpaceRef space;
  __int128 v43;
  const __CFDictionary *v44;
  void *keys[28];
  void *values[4];

  values[3] = *(void **)MEMORY[0x1E0C80C00];
  *(_QWORD *)&v43 = *(_QWORD *)a1;
  DWORD2(v43) = a1[2];
  BYTE12(v43) = a2;
  {
    v40 = (_QWORD *)operator new();
    v40[2] = 0;
    v40[1] = 0;
    *v40 = v40 + 1;
    getColorSpaceMap(void)::result = (uint64_t)v40;
  }
  v7 = getColorSpaceMap(void)::result;
  v8 = (_QWORD *)(getColorSpaceMap(void)::result + 8);
  v9 = *(_QWORD **)(getColorSpaceMap(void)::result + 8);
  if (!v9)
    goto LABEL_9;
  v10 = getColorSpaceMap(void)::result + 8;
  do
  {
    v12 = v9 + 1;
    if (!v11)
    {
      v12 = v9;
      v10 = (uint64_t)v9;
    }
    v9 = (_QWORD *)*v12;
  }
  while (*v12);
  if ((_QWORD *)v10 == v8
  {
LABEL_9:
    ColorSpaceList = (uint64_t *)getColorSpaceList();
    space = 0;
    if (!(_DWORD)a3)
      goto LABEL_18;
    getNCLCToCGNameMap();
    v14 = (char *)std::__tree<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::__map_value_compare<PCNCLCCode,std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::less<PCNCLCCode>,true>,std::allocator<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>>>::find<PCNCLCCode>((uint64_t)&getNCLCToCGNameMap(void)::result, a1);
    if (v14 == (char *)&unk_1EF074EA0)
    {
      v16 = 0;
    }
    else
    {
      v15 = 56;
      if (!a2)
        v15 = 48;
      v16 = *(__CFString **)&v14[v15];
      if (v16)
        v16 = (__CFString *)CGColorSpaceCreateWithName(v16);
    }
    space = (CGColorSpaceRef)v16;
    keys[0] = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)keys);
    if (!space)
    {
LABEL_18:
      if (a2 == 1)
      {
        ColorSpace_Locked = (CGColorSpace *)findOrMakeColorSpace_Locked(a1, 0, a3);
        v19 = ColorSpace_Locked;
        if (ColorSpace_Locked)
          PCCFRefTraits<CGColorSpace *>::retain(ColorSpace_Locked);
        keys[0] = v19;
        PCCreateExtendedColorSpace((CGColorSpace **)keys, (CGColorSpaceRef *)values);
        space = (CGColorSpaceRef)values[0];
        values[0] = 0;
        PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)values);
        v20 = (CGColorSpace **)keys;
      }
      else
      {
        if (operator==((uint64_t)&v43, (uint64_t)&kPCNCLC_P3_D65Linear))
        {
          PCICCTransferFunctionLinear::PCICCTransferFunctionLinear((PCICCTransferFunctionLinear *)values);
          PCMakeDisplayRGBProfile((float *)&kPCChromaticities_P3_D65, (uint64_t)values, (PCICCProfile *)keys);
          makeColorSpaceRef((const PCICCProfile *)keys, &v41);
          PCICCProfile::~PCICCProfile((PCICCProfile *)keys);
          PCICCTransferFunctionLinear::~PCICCTransferFunctionLinear((PCICCTransferFunctionLinear *)values);
        }
        else if (operator==((uint64_t)&v43, (uint64_t)&kPCNCLC_P3_D65))
        {
          PCICCTransferFunctionGamma::PCICCTransferFunctionGamma((PCICCTransferFunctionGamma *)values, 1.961);
          PCMakeDisplayRGBProfile((float *)&kPCChromaticities_P3_D65, (uint64_t)values, (PCICCProfile *)keys);
          makeColorSpaceRef((const PCICCProfile *)keys, &v41);
          PCICCProfile::~PCICCProfile((PCICCProfile *)keys);
          PCICCTransferFunctionGamma::~PCICCTransferFunctionGamma((PCICCTransferFunctionGamma *)values);
        }
        else
        {
          v21 = (void *)PCGetPrimariesString(v43);
          v22 = (void *)PCGetTransferFunctionString(SDWORD1(v43));
          v23 = (void *)PCGetMatrixString(SDWORD2(v43));
          v24 = (void *)*MEMORY[0x1E0CA8E98];
          keys[0] = *(void **)MEMORY[0x1E0CA8D68];
          keys[1] = v24;
          keys[2] = *(void **)MEMORY[0x1E0CA8EE8];
          values[0] = v21;
          values[1] = v22;
          values[2] = v23;
          v44 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
          v41 = PCCreateColorSpaceFromAttachments(v44);
          PCCFRef<__CFDictionary const*>::~PCCFRef((const void **)&v44);
        }
        v25 = v41;
        if (space && space != v41)
        {
          PCCFRefTraits<CGColorSpace *>::release(space);
          v25 = v41;
        }
        v41 = 0;
        space = v25;
        v20 = &v41;
      }
      PCCFRef<CGColorSpace *>::~PCCFRef(v20);
    }
    v26 = (CGColorSpaceRef *)ColorSpaceList[1];
    if ((unint64_t)v26 >= ColorSpaceList[2])
    {
      v28 = std::vector<PCCFRef<CGColorSpace *>>::__push_back_slow_path<PCCFRef<CGColorSpace *> const&>(ColorSpaceList, &space);
    }
    else
    {
      v27 = space;
      *v26 = space;
      if (v27)
        PCCFRefTraits<CGColorSpace *>::retain(v27);
      v28 = (uint64_t)(v26 + 1);
      ColorSpaceList[1] = (uint64_t)(v26 + 1);
    }
    ColorSpaceList[1] = v28;
    v29 = space;
    v30 = (_OWORD *)*v8;
    if (*v8)
    {
      while (1)
      {
        while (1)
        {
          v31 = v30;
          v32 = (uint64_t)(v30 + 2);
          v30 = (_OWORD *)*v31;
          v8 = v31;
          if (!*v31)
            goto LABEL_45;
        }
          break;
        v8 = v31 + 1;
        v30 = (_OWORD *)v31[1];
        if (!v30)
          goto LABEL_45;
      }
      v33 = (_OWORD *)*v8;
      if (*v8)
        goto LABEL_48;
    }
    else
    {
      v31 = v8;
    }
LABEL_45:
    v33 = operator new(0x38uLL);
    v33[2] = v43;
    *((_QWORD *)v33 + 6) = 0;
    *(_QWORD *)v33 = 0;
    *((_QWORD *)v33 + 1) = 0;
    *((_QWORD *)v33 + 2) = v31;
    *v8 = v33;
    v34 = **(_QWORD **)v7;
    v35 = (uint64_t *)v33;
    if (v34)
    {
      *(_QWORD *)v7 = v34;
      v35 = (uint64_t *)*v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 8), v35);
    ++*(_QWORD *)(v7 + 16);
LABEL_48:
    *((_QWORD *)v33 + 6) = v29;
    NCLCHashTable = (float *)getNCLCHashTable();
    keys[0] = space;
    v17 = space;
    v38 = v43;
    *((_DWORD *)v37 + 2) = DWORD2(v43);
    *(_QWORD *)v37 = v38;
    PCCFRef<CGColorSpace *>::~PCCFRef(&space);
    return v17;
  }
  return *(CGColorSpaceRef *)(v10 + 48);
}

void sub_1B299A934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t PCGetNCLCCodeForColorSpace(CGColorSpace *a1)
{
  _QWORD *NCLCHashTable;
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const __CFString *v13;
  float *v14;
  uint64_t *ColorSpaceList;
  uint64_t *v16;
  CGColorSpaceRef *v17;
  CGColorSpace *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const UInt8 *ProfileData;
  unsigned int Size;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  PCMutex *v35;
  char v36;
  CFTypeRef v37;
  CGColorSpaceRef v38;
  CGColorSpaceRef space[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v37 = a1;
  if (a1)
  {
    NCLCHashTable = (_QWORD *)getNCLCHashTable();
    getAPILock((uint64_t)&v35);
    if (v2)
      goto LABEL_31;
    if ((initNamedNCLCCodeColorSpaces_Locked(void)::done & 1) == 0)
    {
      v3 = 0;
      initNamedNCLCCodeColorSpaces_Locked(void)::done = 1;
      v48 = xmmword_1B30591C4;
      v49 = unk_1B30591D4;
      v50 = xmmword_1B30591E4;
      v51 = unk_1B30591F4;
      v44 = xmmword_1B3059184;
      v45 = unk_1B3059194;
      v46 = xmmword_1B30591A4;
      v47 = unk_1B30591B4;
      v40 = xmmword_1B3059144;
      v41 = unk_1B3059154;
      v42 = xmmword_1B3059164;
      v43 = unk_1B3059174;
      do
      {
        findOrMakeColorSpace_Locked((__int128 *)((char *)&v40 + v3), 0, 1);
        findOrMakeColorSpace_Locked((__int128 *)((char *)&v40 + v3), 1, 1);
        v3 += 12;
      }
      while (v3 != 192);
    }
    if (v2)
      goto LABEL_31;
    if ((initCGColorSpaces_Locked(void)::done & 1) == 0)
    {
      v4 = 0;
      initCGColorSpaces_Locked(void)::done = 1;
      *(_QWORD *)&v40 = *MEMORY[0x1E0C9DA10];
      *((_QWORD *)&v40 + 1) = 0xD00000001;
      LODWORD(v41) = 0;
      *((_QWORD *)&v41 + 1) = *MEMORY[0x1E0C9D960];
      *(_QWORD *)&v42 = 0xD00000001;
      DWORD2(v42) = 0;
      *(_QWORD *)&v43 = *MEMORY[0x1E0C9DA00];
      *((_QWORD *)&v43 + 1) = 0x800000001;
      LODWORD(v44) = 0;
      *((_QWORD *)&v44 + 1) = *MEMORY[0x1E0C9D958];
      *(_QWORD *)&v45 = 0x800000001;
      DWORD2(v45) = 0;
      *(_QWORD *)&v46 = *MEMORY[0x1E0C9D9D0];
      *((_QWORD *)&v46 + 1) = 0x100000001;
      LODWORD(v47) = 1;
      v5 = *MEMORY[0x1E0C9D9A0];
      DWORD2(v48) = 9;
      *((_QWORD *)&v47 + 1) = v5;
      *(_QWORD *)&v48 = 0x100000009;
      *(_QWORD *)&v49 = *MEMORY[0x1E0C9D938];
      *((_QWORD *)&v49 + 1) = 0x100000009;
      LODWORD(v50) = 9;
      *((_QWORD *)&v50 + 1) = *MEMORY[0x1E0C9D9F8];
      *(_QWORD *)&v51 = 0x800000009;
      DWORD2(v51) = 0;
      v52 = *MEMORY[0x1E0C9D950];
      v53 = 0x800000009;
      v54 = 0;
      v55 = *MEMORY[0x1E0C9D900];
      v56 = 0x110000000BLL;
      v57 = 0;
      v58 = *MEMORY[0x1E0C9D908];
      v59 = 0xD0000000CLL;
      v60 = 0;
      v6 = *MEMORY[0x1E0C9D928];
      v63 = 0;
      v61 = v6;
      v62 = 0xD0000000CLL;
      v7 = *MEMORY[0x1E0C9D9E8];
      v66 = 0;
      v64 = v7;
      v65 = 0x80000000CLL;
      v8 = *MEMORY[0x1E0C9D940];
      v69 = 0;
      v67 = v8;
      v68 = 0x80000000CLL;
      v9 = *MEMORY[0x1E0C9D9C8];
      v72 = 9;
      v70 = v9;
      v71 = 0x1000000009;
      v10 = *MEMORY[0x1E0C9D9C0];
      v75 = 9;
      v73 = v10;
      v74 = 0x1200000009;
      v11 = *MEMORY[0x1E0C9D918];
      v78 = 1;
      v76 = v11;
      v77 = 0x100000000CLL;
      v12 = *MEMORY[0x1E0C9D910];
      v81 = 1;
      v79 = v12;
      v80 = 0x120000000CLL;
      do
      {
        v13 = *(const __CFString **)((char *)&v40 + v4);
        if (v13)
          v13 = (const __CFString *)CGColorSpaceCreateWithName(v13);
        space[0] = (CGColorSpaceRef)v13;
        v14 = (float *)getNCLCHashTable();
        v38 = space[0];
        {
          ColorSpaceList = (uint64_t *)getColorSpaceList();
          v16 = ColorSpaceList;
          v17 = (CGColorSpaceRef *)ColorSpaceList[1];
          if ((unint64_t)v17 >= ColorSpaceList[2])
          {
            v19 = std::vector<PCCFRef<CGColorSpace *>>::__push_back_slow_path<PCCFRef<CGColorSpace *> const&>(ColorSpaceList, space);
          }
          else
          {
            v18 = space[0];
            *v17 = space[0];
            if (v18)
              PCCFRefTraits<CGColorSpace *>::retain(v18);
            v19 = (uint64_t)(v17 + 1);
            v16[1] = (uint64_t)(v17 + 1);
          }
          v16[1] = v19;
          v38 = space[0];
          *(_QWORD *)v20 = *(_QWORD *)((char *)&v40 + v4 + 8);
          *((_DWORD *)v20 + 2) = *(_DWORD *)((char *)&v40 + v4 + 16);
        }
        PCCFRef<CGColorSpace *>::~PCCFRef(space);
        v4 += 24;
      }
      while (v4 != 432);
    }
    if (v2)
      goto LABEL_31;
    if ((initAllNCLCCodeColorSpaces_Locked(void)::done & 1) == 0)
    {
      v21 = 0;
      initAllNCLCCodeColorSpaces_Locked(void)::done = 1;
      do
      {
        v22 = 0;
        v23 = dword_1B3059204[v21];
        do
        {
          v24 = 0;
          v25 = dword_1B305921C[v22];
          do
          {
            *(_QWORD *)&v40 = PCMakeCanonicalNCLCCode(v23, v25, dword_1B3059C40[v24]);
            DWORD2(v40) = v26;
            findOrMakeColorSpace_Locked(&v40, 0, 0);
            findOrMakeColorSpace_Locked(&v40, 1, 0);
            ++v24;
          }
          while (v24 != 4);
          ++v22;
        }
        while (v22 != 7);
        ++v21;
      }
      while (v21 != 6);
    }
    if (v2)
      goto LABEL_31;
    if ((initBugFixColorSpaces_Locked(void)::done & 1) == 0)
    {
      initBugFixColorSpaces_Locked(void)::done = 1;
      addDataBlobColorSpace_Locked(&kPCNCLC_P3_D65, p3D65Profile_OS12_1, 664);
      PCICCTransferFunctionParametric0::PCICCTransferFunctionParametric0((PCICCTransferFunctionParametric0 *)space, 1.961);
      PCMakeDisplayRGBProfile((float *)&kPCChromaticities_P3_D65, (uint64_t)space, (PCICCProfile *)&v40);
      ProfileData = (const UInt8 *)PCICCProfile::getProfileData((PCICCProfile *)&v40);
      Size = PCICCProfile::getSize((ProCore::Private **)&v40);
      addDataBlobColorSpace_Locked(&kPCNCLC_P3_D65, ProfileData, Size);
      PCICCProfile::~PCICCProfile((PCICCProfile *)&v40);
      PCICCTransferFunctionParametric0::~PCICCTransferFunctionParametric0((PCICCTransferFunctionParametric0 *)space);
      addDataBlobColorSpace_Locked(&kPCNCLC_Rec709, Rec709Profile_OS12_1, 660);
      addDataBlobColorSpace_Locked(&kPCNCLC_Rec709, Rec709Profile_OS12_2, 556);
      addDataBlobColorSpace_Locked(&kPCNCLC_Rec2020, Rec2020Profile_OS12_1, 688);
    }
    if (v2)
    {
LABEL_31:
      v29 = 0;
      v30 = v2[3];
      v31 = (unint64_t)v30 & 0xFFFFFFFF00000000;
    }
    else
    {
      v31 = 0;
      LODWORD(v30) = 0;
      v29 = 1;
    }
    if (v35 && v36)
      PCMutex::unlock(v35);
    if (v29)
      v32 = 0x200000000;
    else
      v32 = v31;
    if (v29)
      v33 = 2;
    else
      v33 = v30;
  }
  else
  {
    v32 = 0x200000000;
    v33 = 2;
  }
  return v32 & 0xFFFFFFFF00000000 | v33;
}

void sub_1B299AFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  PCICCTransferFunctionParametric0::~PCICCTransferFunctionParametric0((PCICCTransferFunctionParametric0 *)&a13);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t getNCLCHashTable(void)
{
  unsigned __int8 v0;
  uint64_t v2;

  {
    v2 = operator new();
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_DWORD *)(v2 + 32) = 1065353216;
    getNCLCHashTable(void)::result = v2;
  }
  return getNCLCHashTable(void)::result;
}

void sub_1B299B0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t **std::unordered_map<CGColorSpace *,PCNCLCCode,`anonymous namespace'::Hash,`anonymous namespace'::Equal,std::allocator<std::pair<CGColorSpace * const,PCNCLCCode>>>::find[abi:ne180100](_QWORD *a1, CFTypeRef *a2)
{
  CFHashCode v4;
  int8x8_t v5;
  CFHashCode v6;
  uint8x8_t v7;
  unint64_t v8;
  CFHashCode v9;
  uint64_t ***v10;
  uint64_t **i;
  unint64_t v12;

  v4 = CFHash(*a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  for (i = *v10; i; i = (uint64_t **)*i)
  {
    v12 = (unint64_t)i[1];
    if (v12 == v6)
    {
      if (CFEqual(i[2], *a2))
        return i;
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(_QWORD *)&v5)
          v12 %= *(_QWORD *)&v5;
      }
      else
      {
        v12 &= *(_QWORD *)&v5 - 1;
      }
      if (v12 != v9)
        return 0;
    }
  }
  return i;
}

uint64_t std::map<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>::map[abi:ne180100](uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::__map_value_compare<PCNCLCCode,std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::less<PCNCLCCode>,true>,std::allocator<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>>>::__emplace_hint_unique_key_args<PCNCLCCode,std::pair<PCNCLCCode const,std::pair<__CFString const*,__CFString const*>> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_1B299B240(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::__map_value_compare<PCNCLCCode,std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::less<PCNCLCCode>,true>,std::allocator<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>>>::__emplace_hint_unique_key_args<PCNCLCCode,std::pair<PCNCLCCode const,std::pair<__CFString const*,__CFString const*>> const&>(uint64_t **a1, uint64_t *a2, _DWORD *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v6 = std::__tree<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::__map_value_compare<PCNCLCCode,std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::less<PCNCLCCode>,true>,std::allocator<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>>>::__find_equal<PCNCLCCode>(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::__map_value_compare<PCNCLCCode,std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::less<PCNCLCCode>,true>,std::allocator<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>>>::__find_equal<PCNCLCCode>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || operator<(a5, (_DWORD *)a2 + 8))
  {
    if ((uint64_t *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (uint64_t *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (uint64_t *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (uint64_t *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (operator<((_DWORD *)v12 + 8, a5))
      goto LABEL_16;
    return std::__tree<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::__map_value_compare<PCNCLCCode,std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::less<PCNCLCCode>,true>,std::allocator<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>>>::__find_equal<PCNCLCCode>((uint64_t)a1, a3, a5);
  }
  if (operator<((_DWORD *)a2 + 8, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (uint64_t *)a2[1];
      do
      {
        v15 = v14;
        v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (uint64_t *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!operator<(a5, (_DWORD *)v15 + 8))
        return std::__tree<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::__map_value_compare<PCNCLCCode,std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::less<PCNCLCCode>,true>,std::allocator<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>>>::__find_equal<PCNCLCCode>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__tree<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::__map_value_compare<PCNCLCCode,std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::less<PCNCLCCode>,true>,std::allocator<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>>>::__find_equal<PCNCLCCode>(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  _DWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = (_DWORD *)(v4 + 32);
        if (!operator<(a3, (_DWORD *)(v4 + 32)))
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!operator<(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t getColorSpaceList(void)
{
  unsigned __int8 v0;
  _QWORD *v2;

  {
    v2 = (_QWORD *)operator new();
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
    getColorSpaceList(void)::result = (uint64_t)v2;
  }
  return getColorSpaceList(void)::result;
}

void sub_1B299B564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

char *std::unordered_map<CGColorSpace *,PCNCLCCode,`anonymous namespace'::Hash,`anonymous namespace'::Equal,std::allocator<std::pair<CGColorSpace * const,PCNCLCCode>>>::operator[](float *a1, CFTypeRef *a2)
{
  CFHashCode v2;
  CFHashCode v5;
  CFHashCode v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL4 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v34;

  v5 = CFHash(*a2);
  v6 = v5;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v2 = v5;
      if (v5 >= v7)
        v2 = v5 % v7;
    }
    else
    {
      v2 = (v7 - 1) & v5;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v2);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v6)
          {
            if (CFEqual(*((CFTypeRef *)v11 + 2), *a2))
              return v11 + 24;
          }
          else
          {
            if (v9 > 1)
            {
              if (v12 >= v7)
                v12 %= v7;
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v2)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0x28uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v6;
  *((_QWORD *)v11 + 2) = *a2;
  *((_QWORD *)v11 + 3) = 0x200000002;
  *((_DWORD *)v11 + 8) = 2;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = (v7 & (v7 - 1)) == 0;
    if (v7 < 3)
      v15 = 0;
    v16 = (2 * v7) | !v15;
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v7 = *((_QWORD *)a1 + 1);
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v22)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v34 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v34)
          operator delete(v34);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v2 = v6 % v7;
      else
        v2 = v6;
    }
    else
    {
      v2 = (v7 - 1) & v6;
    }
  }
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
  if (v31)
  {
    *(_QWORD *)v11 = *v31;
LABEL_72:
    *v31 = v11;
    goto LABEL_73;
  }
  *(_QWORD *)v11 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v11;
  v30[v2] = a1 + 4;
  if (*(_QWORD *)v11)
  {
    v32 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v11 + 24;
}

void sub_1B299B974(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL std::less<`anonymous namespace'::ColorSpaceKey>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (operator!=((_DWORD *)a1, (_DWORD *)a2))
    return operator<((_DWORD *)a1, (_DWORD *)a2);
  else
    return *(unsigned __int8 *)(a1 + 12) < *(unsigned __int8 *)(a2 + 12);
}

uint64_t std::__tree<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::__map_value_compare<PCNCLCCode,std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>,std::less<PCNCLCCode>,true>,std::allocator<std::__value_type<PCNCLCCode,std::pair<__CFString const*,__CFString const*>>>>::find<PCNCLCCode>(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _BOOL4 v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = operator<((_DWORD *)(v3 + 32), a2);
    v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      v7 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || operator<(a2, (_DWORD *)(v5 + 32)))
    return v2;
  return v5;
}

const void **makeColorSpaceRef@<X0>(const PCICCProfile *a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFAllocator *v4;
  const UInt8 *ProfileData;
  unsigned int Size;
  CFDataRef v8;

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ProfileData = (const UInt8 *)PCICCProfile::getProfileData(a1);
  Size = PCICCProfile::getSize((ProCore::Private **)a1);
  v8 = CFDataCreate(v4, ProfileData, Size);
  *a2 = MEMORY[0x1B5E28150]();
  return PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v8);
}

void sub_1B299BABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCCFRef<CGColorSpace *>>::__push_back_slow_path<PCCFRef<CGColorSpace *> const&>(uint64_t *a1, CGColorSpace **a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  CGColorSpace **v11;
  CGColorSpace *v12;
  uint64_t v13;
  _QWORD v15[2];
  CGColorSpace **v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v9);
  else
    v10 = 0;
  v11 = (CGColorSpace **)&v10[8 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[8 * v9];
  v12 = *a2;
  *v11 = *a2;
  if (v12)
  {
    PCCFRefTraits<CGColorSpace *>::retain(v12);
    v11 = v16;
  }
  v16 = v11 + 1;
  std::vector<PCCFRef<CGColorSpace *>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<PCCFRef<CGColorSpace *>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1B299BBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<PCCFRef<CGColorSpace *>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<PCCFRef<CGColorSpace *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCCFRef<CGColorSpace *>>,std::reverse_iterator<PCCFRef<CGColorSpace *>*>,std::reverse_iterator<PCCFRef<CGColorSpace *>*>,std::reverse_iterator<PCCFRef<CGColorSpace *>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCCFRef<CGColorSpace *>>,std::reverse_iterator<PCCFRef<CGColorSpace *>*>,std::reverse_iterator<PCCFRef<CGColorSpace *>*>,std::reverse_iterator<PCCFRef<CGColorSpace *>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  CGColorSpace *v12;

  if (a3 != a5)
  {
    v11 = 0;
    do
    {
      v12 = *(CGColorSpace **)(a3 + v11 - 8);
      *(_QWORD *)(a7 - 8 + v11) = v12;
      if (v12)
        PCCFRefTraits<CGColorSpace *>::retain(v12);
      v11 -= 8;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_1B299BCA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  for (; v2; v2 += 8)
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + v2));
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<PCCFRef<CGColorSpace *>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

const void **addDataBlobColorSpace_Locked(uint64_t *a1, const UInt8 *a2, CFIndex a3)
{
  uint64_t *ColorSpaceList;
  uint64_t *v5;
  CGColorSpaceRef *v6;
  CGColorSpace *v7;
  uint64_t v8;
  float *NCLCHashTable;
  char *v10;
  uint64_t v11;
  CGColorSpaceRef space;
  CFDataRef v14;
  CGColorSpaceRef v15;

  v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a2, a3);
  space = (CGColorSpaceRef)MEMORY[0x1B5E28150]();
  ColorSpaceList = (uint64_t *)getColorSpaceList();
  v5 = ColorSpaceList;
  v6 = (CGColorSpaceRef *)ColorSpaceList[1];
  if ((unint64_t)v6 >= ColorSpaceList[2])
  {
    v8 = std::vector<PCCFRef<CGColorSpace *>>::__push_back_slow_path<PCCFRef<CGColorSpace *> const&>(ColorSpaceList, &space);
  }
  else
  {
    v7 = space;
    *v6 = space;
    if (v7)
      PCCFRefTraits<CGColorSpace *>::retain(v7);
    v8 = (uint64_t)(v6 + 1);
    v5[1] = (uint64_t)(v6 + 1);
  }
  v5[1] = v8;
  NCLCHashTable = (float *)getNCLCHashTable();
  v15 = space;
  v11 = *a1;
  *((_DWORD *)v10 + 2) = *((_DWORD *)a1 + 2);
  *(_QWORD *)v10 = v11;
  PCCFRef<CGColorSpace *>::~PCCFRef(&space);
  return PCCFRef<__CTLine const*>::~PCCFRef((const void **)&v14);
}

void sub_1B299BDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  CGColorSpace *v5;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, CGColorSpace *);
  *(_QWORD *)(v2 + 8) = v3;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t dsfmt_gen_rand_all(uint64_t result)
{
  uint64_t v1;
  int8x16_t v2;
  int64x2_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int64x2_t v6;
  int8x16_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = 0;
  v2 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)result, 0x13uLL);
  v3 = (int64x2_t)veorq_s8(veorq_s8(vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)(result + 3056), 0x20uLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)(result + 3056), 0x20uLL)), vextq_s8(v2, v2, 8uLL)), vextq_s8(*(int8x16_t *)(result + 1872), *(int8x16_t *)(result + 1872), 8uLL));
  v4 = vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL);
  *(int8x16_t *)result = veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v4, 0xCuLL), vandq_s8(v4, (int8x16_t)xmmword_1B3059C50)), *(int8x16_t *)result);
  do
  {
    v5 = vorrq_s8((int8x16_t)vshlq_n_s64(v3, 0x20uLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v3, 0x20uLL));
    v6 = *(int64x2_t *)(result + v1 + 16);
    v7 = veorq_s8(veorq_s8(v5, *(int8x16_t *)(result + v1 + 1888)), (int8x16_t)vshlq_n_s64(v6, 0x13uLL));
    *(int8x16_t *)(result + v1 + 16) = veorq_s8(veorq_s8((int8x16_t)vshrq_n_u64((uint64x2_t)v7, 0xCuLL), vandq_s8(v7, (int8x16_t)xmmword_1B3059C50)), (int8x16_t)v6);
    v3 = (int64x2_t)vextq_s8(v7, v7, 8uLL);
    v1 += 16;
  }
  while (v1 != 1168);
  v8 = 0;
  v9 = v7.u64[1];
  v10 = v7.i64[0];
  do
  {
    v11 = result + v8;
    v12 = *(_QWORD *)(result + v8 + 1184);
    v13 = __ROR8__(v10, 32);
    v10 = __ROR8__(v9, 32) ^ (v12 << 19) ^ *(_QWORD *)(result + v8);
    v14 = *(_QWORD *)(result + v8 + 1192);
    v9 = v13 ^ (v14 << 19) ^ *(_QWORD *)(result + v8 + 8);
    *(_QWORD *)(v11 + 1184) = v10 & 0xFFAFFFFFFFB3FLL ^ (v10 >> 12) ^ v12;
    *(_QWORD *)(v11 + 1192) = v9 & 0xFFDFFFC90FFFDLL ^ (v9 >> 12) ^ v14;
    v8 += 16;
  }
  while (v8 != 1872);
  *(_QWORD *)(result + 3056) = v10;
  *(_QWORD *)(result + 3064) = v9;
  return result;
}

uint64_t dsfmt_chk_init_gen_rand(uint64_t result, unsigned int a2, int a3)
{
  uint64_t i;
  uint64_t v4;
  int8x16_t v5;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;

  if (a3 != 19937)
  {
    fwrite("DSFMT_MEXP doesn't match with dSFMT.c\n", 0x26uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    exit(1);
  }
  *(_DWORD *)result = a2;
  for (i = 1; i != 768; ++i)
  {
    a2 = i + 1812433253 * (a2 ^ (a2 >> 30));
    *(_DWORD *)(result + 4 * i) = a2;
  }
  v4 = 0;
  v5 = (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFuLL);
  __asm { FMOV            V1.2D, #1.0 }
  do
  {
    *(int8x16_t *)(result + v4) = vorrq_s8(vandq_s8(*(int8x16_t *)(result + v4), v5), _Q1);
    v4 += 16;
  }
  while (v4 != 3056);
  v11 = (*(_QWORD *)(result + 3056) & 0x3D84E1AC0DC82880 | *(_QWORD *)(result + 3064) & 1) ^ 0x1000412401080000;
  v12 = 32;
  do
  {
    v11 ^= v11 >> v12;
    v13 = v12 > 1;
    v12 >>= 1;
  }
  while (v13);
  if ((v11 & 1) == 0)
    *(_QWORD *)(result + 3064) ^= 1uLL;
  *(_DWORD *)(result + 3072) = 382;
  return result;
}

void PCAutoreleasePool::PCAutoreleasePool(PCAutoreleasePool *this)
{
  *(_QWORD *)this = objc_alloc_init(MEMORY[0x1E0CB34A8]);
}

void PCAutoreleasePool::~PCAutoreleasePool(id *this)
{
  objc_msgSend(*this, "drain");
}

float PCRenderModel::getDefaultBlendingGamma(PCRenderModel *this)
{
  return 1.956;
}

uint64_t PCRenderModel::PCRenderModel(uint64_t a1, int a2)
{
  CGColorSpace *v3;

  *(_DWORD *)a1 = a2;
  PCColorSpaceCache::sRGB((CGColorSpace **)(a1 + 8));
  v3 = PCGetWorkingColorSpace((PCColorSpaceCache *)1);
  PCColorSpaceHandle::PCColorSpaceHandle((PCColorSpaceHandle *)(a1 + 16), v3);
  *(_QWORD *)(a1 + 24) = 0x3FFA5E353F800000;
  return a1;
}

void sub_1B299C0CC(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

BOOL PCRenderModel::is_iOS(PCRenderModel *this)
{
  return (*(_DWORD *)this - 1) < 2;
}

uint64_t PCRenderModel::getWorkingColorSpace(uint64_t result, int a2)
{
  if (a2 == 1)
    return PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)(result + 16));
  if (!a2)
    return PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)(result + 8));
  return result;
}

float PCRenderModel::getBlendingGamma(uint64_t a1, int a2)
{
  float result;

  if (a2 == 1)
    return *(float *)(a1 + 28);
  if (!a2)
    return *(float *)(a1 + 24);
  return result;
}

void *PCGetDefaultRenderModel(void)
{
  unsigned __int8 v0;

  {
    PCRenderModel::PCRenderModel((uint64_t)&PCGetDefaultRenderModel(void)::defaultRenderModel, 0);
    __cxa_atexit((void (*)(void *))PCRenderModel::~PCRenderModel, &PCGetDefaultRenderModel(void)::defaultRenderModel, &dword_1B2737000);
  }
  return &PCGetDefaultRenderModel(void)::defaultRenderModel;
}

void sub_1B299C1B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PCRenderModel::~PCRenderModel(CGColorSpace **this)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(this + 2);
  PCCFRef<CGColorSpace *>::~PCCFRef(this + 1);
}

const void **PCLoadBitmap@<X0>(const __CFURL *a1@<X0>, uint64_t *a2@<X8>)
{
  CGImageSourceRef v4;
  CGImageRef ImageAtIndex;
  CFDictionaryRef options;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  keys[0] = *(void **)MEMORY[0x1E0CBD238];
  values = (void *)*MEMORY[0x1E0C9AE50];
  options = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v4 = CGImageSourceCreateWithURL(a1, options);
  keys[0] = v4;
  if (v4)
  {
    ImageAtIndex = CGImageSourceCreateImageAtIndex(v4, 0, options);
    values = ImageAtIndex;
    if (ImageAtIndex)
    {
      PCBitmapFromCGImageRef(ImageAtIndex, 0, a2);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"PCLoadBitmap: CGImageSourceCreateImageAtIndex failed.\n", 54);
      *a2 = 0;
      a2[1] = 0;
    }
    PCCFRef<CGImage *>::~PCCFRef((CGImage **)&values);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"PCLoadBitmap: CGImageSourceCreateWithURL failed.\n", 49);
    *a2 = 0;
    a2[1] = 0;
  }
  PCCFRef<__CTLine const*>::~PCCFRef((const void **)keys);
  return PCCFRef<__CFDictionary const*>::~PCCFRef((const void **)&options);
}

void sub_1B299C320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, const void *a11)
{
  PCCFRef<__CTLine const*>::~PCCFRef(&a11);
  PCCFRef<__CFDictionary const*>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

void PCBitmapFromCGImageRef(CGImage *a1@<X0>, CGColorSpace *a2@<X1>, uint64_t *a3@<X8>)
{
  size_t BitsPerComponent;
  size_t BitsPerPixel;
  CGColorSpace *ColorSpace;
  CGColorSpace *v9;
  CGColorSpaceModel Model;
  CGBitmapInfo BitmapInfo;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  CGColorSpace *BaseColorSpace;
  CGColorSpace *v18;
  CGColorSpace *data;
  CGColorSpace *v20;
  unsigned int v21;
  _BOOL4 v22;
  uint64_t v23;
  _BOOL4 v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  vImagePixelCount height;
  vImagePixelCount width;
  size_t rowBytes;
  unsigned int BytesPerRow;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint32_t v36;
  uint64_t v37;
  _BOOL4 v38;
  uint64_t v39;
  vImagePixelCount v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  vImagePixelCount v44;
  _BYTE *v45;
  void *v46;
  char *v47;
  char *v48;
  unsigned int BytesPerPixel;
  uint32_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  vImagePixelCount v54;
  _BYTE *v55;
  vImage_Buffer space;
  vImage_CGImageFormat format;
  CGColorSpace *v58;

  if (!a1)
  {
    v14 = (_QWORD *)MEMORY[0x1E0DE4A60];
    v15 = "null CGImageRef passed to PCBitmapFromCGImageRef()\n";
    v16 = 51;
LABEL_50:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  memset(&format, 0, sizeof(format));
  BitsPerComponent = CGImageGetBitsPerComponent(a1);
  BitsPerPixel = CGImageGetBitsPerPixel(a1);
  ColorSpace = CGImageGetColorSpace(a1);
  v9 = ColorSpace;
  if (ColorSpace)
    PCCFRefTraits<CGColorSpace *>::retain(ColorSpace);
  space.data = v9;
  Model = CGColorSpaceGetModel(v9);
  BitmapInfo = CGImageGetBitmapInfo(a1);
  if (BitsPerComponent <= 8)
    v12 = 8;
  else
    v12 = BitsPerComponent;
  if (Model >= kCGColorSpaceModelCMYK)
  {
    if (Model == kCGColorSpaceModelIndexed)
    {
      BaseColorSpace = CGColorSpaceGetBaseColorSpace((CGColorSpaceRef)space.data);
      v18 = BaseColorSpace;
      if (BaseColorSpace)
        PCCFRefTraits<CGColorSpace *>::retain(BaseColorSpace);
      v58 = v18;
      data = (CGColorSpace *)space.data;
      if (!space.data || space.data == v18)
        goto LABEL_26;
    }
    else
    {
      v20 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9DA10]);
      v18 = v20;
      if (v20)
        PCCFRefTraits<CGColorSpace *>::retain(v20);
      v58 = v18;
      data = (CGColorSpace *)space.data;
      if (!space.data || space.data == v18)
        goto LABEL_26;
    }
    PCCFRefTraits<CGColorSpace *>::release(data);
    v18 = v58;
LABEL_26:
    space.data = v18;
    v58 = 0;
    PCCFRef<CGColorSpace *>::~PCCFRef(&v58);
    if (v12 == 8)
    {
      BitmapInfo = 2;
      LODWORD(BitsPerPixel) = 32;
      goto LABEL_46;
    }
    if (v12 != 32)
    {
      if (v12 == 16)
      {
        BitmapInfo = 4097;
        LODWORD(BitsPerPixel) = 64;
      }
      else
      {
        BitmapInfo = 0;
        LODWORD(BitsPerPixel) = 4 * v12;
      }
      goto LABEL_46;
    }
    BitmapInfo = 8449;
LABEL_43:
    LODWORD(BitsPerPixel) = 128;
    goto LABEL_46;
  }
  if (BitsPerPixel / BitsPerComponent != 3)
  {
    if (BitsPerPixel / BitsPerComponent == 2)
    {
      v13 = BitmapInfo & 0x1F;
      if ((v13 - 5) < 2)
      {
        BitmapInfo &= 0xFFFFFFE0;
        LODWORD(BitsPerPixel) = v12;
      }
      else if (v13 == 4)
      {
        BitmapInfo = BitmapInfo & 0xFFFFFFE0 | 3;
      }
      else if (v13 == 2)
      {
        BitmapInfo = BitmapInfo & 0xFFFFFFE0 | 1;
      }
    }
    goto LABEL_46;
  }
  if (BitsPerComponent > 8)
  {
    if (v12 != 32)
      goto LABEL_46;
    if ((BitmapInfo & 0x1F) <= 6 && ((1 << (BitmapInfo & 0x1F)) & 0x61) != 0)
      BitmapInfo = BitmapInfo & 0xFFFFFFE0 | 1;
    BitmapInfo |= 0x100u;
    goto LABEL_43;
  }
  LODWORD(BitsPerPixel) = 32;
  if ((BitmapInfo & 0x1F) <= 6 && ((1 << (BitmapInfo & 0x1F)) & 0x61) != 0)
  {
    LODWORD(BitsPerPixel) = 32;
    BitmapInfo = BitmapInfo & 0xFFFFFFE0 | 2;
  }
LABEL_46:
  format.bitsPerComponent = v12;
  format.bitsPerPixel = BitsPerPixel;
  format.colorSpace = (CGColorSpaceRef)space.data;
  format.bitmapInfo = BitmapInfo;
  memset(&format.version, 0, 20);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)&space);
  if (a2)
    format.colorSpace = a2;
  if (vImageBuffer_InitWithCGImage(&space, &format, 0, a1, 0))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"PCBitmapFromCGImageRef(): vImageBuffer_InitWithCGImage failed, error = ", 71);
    v14 = (_QWORD *)std::ostream::operator<<();
    v15 = "\n";
    v16 = 1;
    goto LABEL_50;
  }
  if (CGColorSpaceGetModel(format.colorSpace) < kCGColorSpaceModelCMYK)
  {
    v21 = ((format.bitmapInfo & 0x1F) < 8) & (0xD4u >> SLOBYTE(format.bitmapInfo));
    v22 = (format.bitmapInfo & 0x7000) != 0x2000 && (format.bitmapInfo & 0x6000) != 0;
    v23 = format.bitsPerPixel / format.bitsPerComponent;
    v24 = (format.bitmapInfo & 0x7000) == 0x4000 || (format.bitmapInfo & 0x7000) == 0x2000;
    if ((format.bitmapInfo & 0x100) != 0 && format.bitsPerComponent == 32 && v24)
    {
      if ((_DWORD)v23 == 1)
      {
        v23 = 14;
      }
      else if ((_DWORD)v23 == 2)
      {
        v23 = 15;
      }
      else if (v21)
      {
        v23 = 17;
      }
      else
      {
        v23 = 16;
      }
LABEL_95:
      PCCreateBitmap(format.colorSpace, LODWORD(space.width), LODWORD(space.height), v23, 1, (uint64_t)a3);
      PCImage::setIsPremultiplied(*a3, (format.bitmapInfo & 0x1F) - 1 < 2);
      v28 = *a3;
      height = space.height;
      width = space.width;
      rowBytes = space.rowBytes;
      BytesPerRow = PCBitmap::getBytesPerRow((PCBitmap *)*a3);
      v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 64) + 48))(*(_QWORD *)(v28 + 64));
      v34 = v33;
      v35 = BytesPerRow;
      if (v22)
      {
        v36 = format.bitsPerPixel;
        if (v36 == PCPixelFormat::getBitsPerPixel(v33))
        {
          LODWORD(v37) = PCPixelFormat::getNumChannels(v34);
          if (PCPixelFormat::is8Bit(v34))
            v37 = 1;
          else
            v37 = v37;
          v38 = PCPixelFormat::is16Bit(v34);
          v39 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 64) + 16))(*(_QWORD *)(v28 + 64));
          v40 = v37 * width;
          if (v38)
          {
            if (height)
            {
              v41 = 0;
              v42 = space.data;
              do
              {
                if (v40)
                {
                  v43 = 0;
                  v44 = v37 * width;
                  do
                  {
                    v45 = (_BYTE *)(v39 + v43);
                    *v45 = v42[v43 + 1];
                    v45[1] = v42[v43];
                    v43 += 2;
                    --v44;
                  }
                  while (v44);
                }
                v39 += v35;
                v42 += rowBytes;
                ++v41;
              }
              while (v41 != height);
            }
          }
          else if (height)
          {
            v51 = 0;
            v52 = space.data;
            do
            {
              if (v40)
              {
                v53 = 0;
                v54 = v37 * width;
                do
                {
                  v55 = (_BYTE *)(v39 + v53);
                  *v55 = v52[v53 + 3];
                  v55[1] = v52[v53 + 2];
                  v55[2] = v52[v53 + 1];
                  v55[3] = v52[v53];
                  v53 += 4;
                  --v54;
                }
                while (v54);
              }
              v39 += v35;
              v52 += rowBytes;
              ++v51;
            }
            while (v51 != height);
          }
        }
      }
      else if (rowBytes == BytesPerRow)
      {
        v46 = (void *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 64) + 16))(*(_QWORD *)(v28 + 64));
        memcpy(v46, space.data, rowBytes * height);
      }
      else
      {
        v47 = (char *)space.data;
        v48 = (char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 64) + 16))(*(_QWORD *)(v28 + 64));
        BytesPerPixel = PCPixelFormat::getBytesPerPixel(v34);
        v50 = format.bitsPerPixel;
        if (v50 == PCPixelFormat::getBitsPerPixel(v34) && height)
        {
          do
          {
            memcpy(v48, v47, width * BytesPerPixel);
            v47 += rowBytes;
            v48 += v35;
            --height;
          }
          while (height);
        }
      }
      goto LABEL_53;
    }
    if (format.bitsPerComponent == 16 && (format.bitmapInfo & 0x5000) == 0x1000)
    {
      if ((format.bitmapInfo & 0x100) != 0)
      {
        if ((((format.bitmapInfo & 0x1F) < 8) & (0xD4u >> SLOBYTE(format.bitmapInfo))) == 0)
        {
          v23 = 13;
          goto LABEL_95;
        }
      }
      else
      {
        switch((_DWORD)v23)
        {
          case 1:
            v23 = 7;
            goto LABEL_95;
          case 3:
            v23 = 9;
            goto LABEL_95;
          case 2:
            v23 = 8;
            goto LABEL_95;
        }
        if ((((format.bitmapInfo & 0x1F) < 8) & (0xD4u >> SLOBYTE(format.bitmapInfo))) == 0)
        {
          v23 = 10;
          goto LABEL_95;
        }
      }
    }
    else if (format.bitsPerComponent == 8)
    {
      if ((_DWORD)v23 != 1 && (_DWORD)v23 != 2)
      {
        if (v21)
          v25 = 3;
        else
          v25 = 5;
        if (v21)
          v26 = 6;
        else
          v26 = 4;
        v27 = !v22;
        v22 = 0;
        if (v27)
          v23 = v25;
        else
          v23 = v26;
      }
      goto LABEL_95;
    }
    v23 = 0;
    goto LABEL_95;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"PCLoadBitmap: only RGB or grayscale images are supported.\n", 58);
  *a3 = 0;
  a3[1] = 0;
LABEL_53:
  free(space.data);
}

void sub_1B299C9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, CGColorSpace *a18)
{
  PCCFRef<CGColorSpace *>::~PCCFRef(&a18);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  _Unwind_Resume(a1);
}

CGImage **PCCFRef<CGImage *>::~PCCFRef(CGImage **a1)
{
  CGImage *v2;

  v2 = *a1;
  if (v2)
    PCCFRefTraits<CGImage *>::release(v2);
  return a1;
}

uint64_t PCInfo::texturesShouldUseQuarterRes(PCInfo *this)
{
  if (PCInfo::texturesShouldUseQuarterRes(void)::predicate != -1)
    dispatch_once(&PCInfo::texturesShouldUseQuarterRes(void)::predicate, &__block_literal_global_9);
  return PCInfo::texturesShouldUseQuarterRes(void)::ret;
}

unint64_t ___ZN6PCInfo27texturesShouldUseQuarterResEv_block_invoke(PCInfo *a1)
{
  unint64_t result;

  result = PCInfo::availableVRAM(a1);
  PCInfo::texturesShouldUseQuarterRes(void)::ret = result < 0x3E8;
  return result;
}

uint64_t PCInfo::getPhysicalRAM(PCInfo *this)
{
  unsigned __int8 v1;

  {
    PCInfo::getPhysicalRAM(void)::physicalRAM = computePhysicalRAM();
  }
  return PCInfo::getPhysicalRAM(void)::physicalRAM;
}

void sub_1B299CAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t computePhysicalRAM(void)
{
  size_t v1;
  uint64_t v2;
  int v3[2];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v3 = 0x1800000006;
  v1 = 8;
  v2 = 0;
  if (sysctl(v3, 2u, &v2, &v1, 0, 0))
    return 0x100000000;
  else
    return v2;
}

BOOL PCInfo::getMemoryInfo(PCInfo *this, unint64_t *a2, unint64_t a3, unint64_t a4, unint64_t *a5, unint64_t *a6, unint64_t *a7, unint64_t *a8, unint64_t *a9)
{
  host_t v16;
  uint64_t v17;
  host_t v18;
  _BOOL8 result;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  vm_size_t v28;
  vm_map_read_t *v29;
  unint64_t v30;
  unint64_t v31;
  vm_address_t v32;
  unint64_t v33;
  vm_size_t v34;
  vm_address_t v35;
  vm_address_t v36;
  BOOL v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t PhysicalRAM;
  mach_msg_type_number_t task_info_outCnt;
  integer_t task_info_out;
  uint64_t v48;
  unint64_t v49;
  int info[19];
  mach_msg_type_number_t host_info_outCnt;
  mach_msg_type_number_t infoCnt;
  vm_size_t size;
  natural_t nesting_depth;
  vm_address_t address;
  vm_size_t v56;
  integer_t host_info_out[17];

  address = 0;
  v56 = 0;
  nesting_depth = 0;
  size = 0;
  infoCnt = 0;
  PhysicalRAM = PCInfo::getPhysicalRAM(this);
  v16 = MEMORY[0x1B5E29B24]();
  v17 = host_page_size(v16, &v56);
  host_info_outCnt = 15;
  v18 = MEMORY[0x1B5E29B24](v17);
  if (host_statistics(v18, 2, host_info_out, &host_info_outCnt))
  {
    result = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v40 = a2;
    v41 = a5;
    task_info_outCnt = 0;
    v27 = host_info_out[0];
    v28 = v56;
    v29 = (vm_map_read_t *)MEMORY[0x1E0C83DA0];
    v30 = a3 | a4;
    if (a3 | a4)
    {
      v43 = host_info_out[0];
      v31 = 0;
      address = 1879048192;
      do
      {
        nesting_depth = 1;
        infoCnt = 19;
        if (vm_region_recurse_64(*v29, &address, &size, &nesting_depth, info, &infoCnt))
          break;
        v32 = address;
        if (address >> 28 > 8)
          break;
        v31 += size;
        address += size;
      }
      while ((size + v32) >> 28 < 9);
      v27 = v43;
      if (v31 <= PhysicalRAM)
        v33 = PhysicalRAM;
      else
        v33 = v31;
      v30 = PhysicalRAM - v31;
      if (PhysicalRAM < v31)
        v30 = 0;
    }
    else
    {
      v33 = 0;
    }
    v38 = v30;
    v39 = v33;
    v25 = 0;
    if (a6)
    {
      nesting_depth = 0;
      for (address = 0; address < 0xFFFFFFFF; address += size)
      {
        infoCnt = 19;
        if (vm_region_recurse_64(*v29, &address, &size, &nesting_depth, info, &infoCnt))
          break;
        v25 += size;
      }
    }
    v20 = v28 * v27;
    v42 = a7;
    v26 = 0;
    if (a7)
    {
      v34 = 0;
      nesting_depth = 0;
      address = 0;
      do
      {
        infoCnt = 19;
        if (vm_region_recurse_64(*v29, &address, &size, &nesting_depth, info, &infoCnt))
          break;
        v35 = address;
        v36 = address - v34;
        if (address - v34 <= v26)
          v36 = v26;
        if (address != v34)
          v26 = v36;
        v34 = size + address;
        address += size;
      }
      while (size + v35 <= 0xFFFFFFFE);
    }
    task_info_outCnt = 10;
    v37 = task_info(*v29, 0x12u, &task_info_out, &task_info_outCnt) == 0;
    result = v37;
    if (v37)
      v23 = v49;
    else
      v23 = 0;
    if (v37)
      v24 = v48 - 0x20000000;
    else
      v24 = 0;
    a7 = v42;
    a2 = v40;
    a5 = v41;
    v22 = v38;
    v21 = v39;
  }
  if (this)
    *(_QWORD *)this = PhysicalRAM;
  if (a2)
    *a2 = v20;
  if (a3)
    *(_QWORD *)a3 = v21;
  if (a4)
    *(_QWORD *)a4 = v22;
  if (a5)
    *a5 = v23;
  if (a6)
    *a6 = v25;
  if (a7)
    *a7 = v26;
  if (a8)
    *a8 = v24;
  return result;
}

BOOL PCInfo::isMemoryAvailable(PCInfo *this)
{
  unint64_t v2;
  vm_size_t v3;
  vm_map_read_t *v4;
  vm_address_t v5;
  vm_address_t v6;
  int info[19];
  mach_msg_type_number_t infoCnt;
  vm_size_t size;
  natural_t nesting_depth;
  vm_address_t address;

  v2 = 0;
  v3 = 0;
  nesting_depth = 0;
  size = 0;
  address = 0;
  v4 = (vm_map_read_t *)MEMORY[0x1E0C83DA0];
  do
  {
    infoCnt = 19;
    if (vm_region_recurse_64(*v4, &address, &size, &nesting_depth, info, &infoCnt))
      break;
    v5 = address;
    v6 = address - v3;
    if (address - v3 <= v2)
      v6 = v2;
    if (address != v3)
      v2 = v6;
    v3 = size + address;
    address += size;
  }
  while (size + v5 <= 0xFFFFFFFE && v2 <= (unint64_t)this);
  return v2 > (unint64_t)this;
}

float PCInfo::getWorkingGamma(PCInfo *this)
{
  return *(float *)&s_workingGamma;
}

uint64_t PCInfo::availableVRAM(PCInfo *this)
{
  if (PCInfo::availableVRAM(void)::onceToken != -1)
    dispatch_once(&PCInfo::availableVRAM(void)::onceToken, &__block_literal_global_57);
  return PCInfo::availableVRAM(void)::vramAvailable;
}

void ___ZN6PCInfo13availableVRAMEv_block_invoke()
{
  id v0;

  v0 = MTLCreateSystemDefaultDevice();
  PCInfo::availableVRAM(void)::vramAvailable = (unint64_t)PCInfo::getPhysicalRAM((PCInfo *)objc_msgSend(v0, "hasUnifiedMemory")) >> 20;

}

uint64_t PCInfo::getDefaultRGBCGColorSpace(PCInfo *this)
{
  unsigned __int8 v1;

  {
    PCColorSpaceCache::rec709Linear(&PCInfo::getDefaultRGBCGColorSpace(void)::result);
    __cxa_atexit((void (*)(void *))PCColorSpaceHandle::~PCColorSpaceHandle, &PCInfo::getDefaultRGBCGColorSpace(void)::result, &dword_1B2737000);
  }
  return PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&PCInfo::getDefaultRGBCGColorSpace(void)::result);
}

void sub_1B299D010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

CGColorSpace *PCInfo::getDefaultRGBColorSpace@<X0>(_QWORD *a1@<X8>)
{
  unsigned __int8 v3;
  CGColorSpace *result;

  {
    PCColorSpaceCache::rec709Linear((CGColorSpace **)&PCInfo::getDefaultRGBColorSpace(void)::result);
    __cxa_atexit((void (*)(void *))PCColorSpaceHandle::~PCColorSpaceHandle, &PCInfo::getDefaultRGBColorSpace(void)::result, &dword_1B2737000);
  }
  result = (CGColorSpace *)PCInfo::getDefaultRGBColorSpace(void)::result;
  *a1 = PCInfo::getDefaultRGBColorSpace(void)::result;
  if (result)
    return PCCFRefTraits<CGColorSpace *>::retain(result);
  return result;
}

void sub_1B299D0BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PCInfo::getDefaultGrayscaleCGColorSpace(PCInfo *this)
{
  unsigned __int8 v1;

  {
    PCColorSpaceCache::gamma22Gray(&PCInfo::getDefaultGrayscaleCGColorSpace(void)::result);
    __cxa_atexit((void (*)(void *))PCColorSpaceHandle::~PCColorSpaceHandle, &PCInfo::getDefaultGrayscaleCGColorSpace(void)::result, &dword_1B2737000);
  }
  return PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&PCInfo::getDefaultGrayscaleCGColorSpace(void)::result);
}

void sub_1B299D14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PCInfo_IsUnitTesting()
{
  if (PCInfo_IsUnitTesting::onceToken != -1)
    dispatch_once(&PCInfo_IsUnitTesting::onceToken, &__block_literal_global_4_0);
  return PCInfo_IsUnitTesting::sIsUnitTesting;
}

void PCTime::PCTime(PCTime *this)
{
  *(_QWORD *)this = 0x7FFFFFFFLL;
  *((_DWORD *)this + 2) = 0x7FFFFFFF;
}

void PCTimer::PCTimer(PCTimer *this)
{
  *((_DWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_WORD *)this + 8) = 0;
}

std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep PCTimer::start(PCTimer *this)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep result;

  result = std::chrono::steady_clock::now().__d_.__rep_;
  *(_QWORD *)this = result;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 1;
  return result;
}

double PCTimer::stop(PCTimer *this)
{
  double result;

  *((_QWORD *)this + 1) += std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)this;
  *((_BYTE *)this + 16) = 0;
  ++*((_DWORD *)this + 5);
  result = PCTimer::getSeconds(this) + *((double *)this + 3);
  *((double *)this + 3) = result;
  return result;
}

double PCTimer::getSeconds(PCTimer *this)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v1;

  v1 = *((_QWORD *)this + 1);
  if (*((_BYTE *)this + 16) && !*((_BYTE *)this + 17))
    v1 = std::chrono::steady_clock::now().__d_.__rep_ + v1 - *(_QWORD *)this;
  return (double)v1 / 1000000000.0;
}

void PCICCTag::PCICCTag(PCICCTag *this, int a2, const unsigned __int8 *a3, const unsigned __int8 *a4)
{
  *(_DWORD *)this = a2;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((_QWORD *)this + 1, a3, (uint64_t)a4, a4 - a3);
}

uint64_t PCICCTag::reset(uint64_t this, int a2)
{
  *(_DWORD *)this = a2;
  *(_QWORD *)(this + 16) = *(_QWORD *)(this + 8);
  return this;
}

BOOL PCICCTag::empty(PCICCTag *this)
{
  return *((_QWORD *)this + 1) == *((_QWORD *)this + 2);
}

uint64_t PCICCTag::size(PCICCTag *this)
{
  return *((_QWORD *)this + 2) - *((_QWORD *)this + 1);
}

void PCICCTag::resize(PCICCTag *this, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  size_t v5;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2) - v2;
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 1, v5);
  }
  else if (!v4)
  {
    *((_QWORD *)this + 2) = v2 + a2;
  }
}

uint64_t PCICCTag::operator[](uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) + a2;
}

void PCICCTag::push_back(PCICCTag *this, char a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE **v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  _BYTE *v13;
  char *v14;
  _BYTE *v15;
  char v16;

  v5 = (_BYTE *)*((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 3);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_BYTE **)((char *)this + 8);
    v8 = *((_QWORD *)this + 1);
    v9 = &v5[-v8];
    v10 = (uint64_t)&v5[-v8 + 1];
    if (v10 < 0)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v4 - v8;
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = operator new(v12);
    else
      v13 = 0;
    v14 = &v13[v12];
    v9[(_QWORD)v13] = a2;
    v6 = (uint64_t)&v9[(_QWORD)v13 + 1];
    if (v5 == (_BYTE *)v8)
    {
      v13 = &v9[(_QWORD)v13];
    }
    else
    {
      v15 = &v5[~v8];
      do
      {
        v16 = *--v5;
        (v15--)[(_QWORD)v13] = v16;
      }
      while (v5 != (_BYTE *)v8);
      v5 = *v7;
    }
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = v6;
    *((_QWORD *)this + 3) = v14;
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = (uint64_t)(v5 + 1);
  }
  *((_QWORD *)this + 2) = v6;
}

double *PCAlgorithm::bisect(double *this, double *a2, int *a3, double a4, int *a5)
{
  int v5;
  double v6;
  double v7;
  int v8;
  int v9;
  BOOL v10;

  v5 = (_DWORD)a2 + 1;
  v6 = this[(int)a2 - 1];
  v7 = *this;
  if ((int)a2 + 1 < 2)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    do
    {
      if (v6 >= v7 != this[((v8 + v5) >> 1) - 1] > a4)
        v8 = (v8 + v5) >> 1;
      else
        v5 = (v8 + v5) >> 1;
    }
    while (v5 - v8 > 1);
  }
  if (v7 == a4)
  {
    v9 = 0;
  }
  else if (v6 == a4)
  {
    v9 = (_DWORD)a2 - 2;
    if (a2 < 2)
      v9 = 0;
  }
  else
  {
    v10 = __OFSUB__(v8, 1);
    v9 = v8 - 1;
    if ((v9 < 0) ^ v10 | (v9 == 0))
      v9 = 0;
  }
  *a3 = v9;
  return this;
}

double PCAlgorithm::DeCasteljauSubdivide(PCAlgorithm *this, double a2, double a3, double a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13)
{
  double v13;
  double v14;
  double v15;
  double result;

  if (a3 == a2)
    v13 = 0.0;
  else
    v13 = (a4 - a2) / (a3 - a2);
  *a7 = *(double *)this;
  *a8 = *a5;
  *a9 = *a6;
  a7[1] = *(double *)this + v13 * (*((double *)this + 1) - *(double *)this);
  a8[1] = *a5 + v13 * (a5[1] - *a5);
  a9[1] = *a6 + v13 * (a6[1] - *a6);
  a7[2] = (1.0 - v13) * a7[1] + v13 * (*((double *)this + 1) + v13 * (*((double *)this + 2) - *((double *)this + 1)));
  a8[2] = (1.0 - v13) * a8[1] + v13 * (a5[1] + v13 * (a5[2] - a5[1]));
  a9[2] = (1.0 - v13) * a9[1] + v13 * (a6[1] + v13 * (a6[2] - a6[1]));
  a10[3] = *((double *)this + 3);
  a11[3] = a5[3];
  a12[3] = a6[3];
  a10[2] = *((double *)this + 2) + v13 * (*((double *)this + 3) - *((double *)this + 2));
  a11[2] = a5[2] + v13 * (a5[3] - a5[2]);
  a12[2] = a6[2] + v13 * (a6[3] - a6[2]);
  a10[1] = v13 * a10[2] + (1.0 - v13) * (*((double *)this + 1) + v13 * (*((double *)this + 2) - *((double *)this + 1)));
  a11[1] = v13 * a11[2] + (1.0 - v13) * (a5[1] + v13 * (a5[2] - a5[1]));
  a12[1] = v13 * a12[2] + (1.0 - v13) * (a6[1] + v13 * (a6[2] - a6[1]));
  v14 = (1.0 - v13) * a7[2] + v13 * a10[1];
  *a10 = v14;
  a7[3] = v14;
  v15 = (1.0 - v13) * a8[2] + v13 * a11[1];
  *a11 = v15;
  a8[3] = v15;
  result = (1.0 - v13) * a9[2] + v13 * a12[1];
  *a12 = result;
  a9[3] = result;
  return result;
}

void PCAlgorithm::BezierSubdivide(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, int a5, double *a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12)
{
  double v22;
  double v23;
  double v24;
  double v25;
  float64x2_t v26;
  float64x2_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float64x2_t v39;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  double v54;
  float64_t v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  float64_t v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  float64_t v81;
  unint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  double *v95;
  double *v96;
  double *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  double *v103;
  char *v104;
  uint64_t v105;
  _OWORD v106[2];
  float64x2_t v107;
  float64x2_t v108;
  float64x2_t v109;
  float64x2_t v110;
  float64x2_t v111;
  float64x2_t v112;
  _OWORD v113[2];
  double v114;
  double v115;
  double v116;
  double v117;
  float64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  float64x2_t v121;
  double v122;
  double v123;
  double v124;
  double v125;

  v22 = a1->f64[0];
  v23 = a1->f64[1];
  v122 = a1->f64[0];
  v123 = v23;
  v25 = a1[1].f64[0];
  v24 = a1[1].f64[1];
  v124 = v25;
  v125 = v24;
  v26 = a2[1];
  v120 = *a2;
  v121 = v26;
  v27 = a3[1];
  v118 = *a3;
  v119 = v27;
  v28 = a4->f64[0];
  v29 = a4->f64[1];
  v114 = a4->f64[0];
  v115 = v29;
  v30 = a4[1].f64[0];
  v31 = a4[1].f64[1];
  v116 = v30;
  v117 = v31;
  if (a6)
  {
    PCMatrix44Tmpl<double>::transform<double>(a6, &v122, &v122);
    PCMatrix44Tmpl<double>::transform<double>(a6, v120.f64, v120.f64);
    PCMatrix44Tmpl<double>::transform<double>(a6, v118.f64, v118.f64);
    PCMatrix44Tmpl<double>::transform<double>(a6, &v114, &v114);
    v28 = v114;
    v29 = v115;
    v22 = v122;
    v23 = v123;
    v30 = v116;
    v31 = v117;
    v25 = v124;
    v24 = v125;
  }
  v32 = (v24 * v28 - v31 * v22) / (v24 * v31);
  v33 = (v24 * v29 - v31 * v23) / (v24 * v31);
  v34 = (v24 * v30 - v31 * v25) / (v24 * v31);
  v35 = sqrt(v32 * v32 + v33 * v33 + v34 * v34);
  v36 = 0.0;
  v37 = 0.0;
  if (fabs(v35) >= 0.0000001)
  {
    v37 = vabdd_f64(v32 * (v23 * v121.f64[1] - v24 * v120.f64[1]) / (v24 * v121.f64[1]), v33 * (v22 * v121.f64[1] - v24 * v120.f64[0]) / (v24 * v121.f64[1]))/ v35;
    v36 = vabdd_f64(v32 * (v23 * v119.f64[1] - v24 * v118.f64[1]) / (v24 * v119.f64[1]), v33 * (v22 * v119.f64[1] - v24 * v118.f64[0]) / (v24 * v119.f64[1]))/ v35;
  }
  if (v37 >= v36)
    v38 = v37;
  else
    v38 = v36;
  if (a5 && v38 >= 0.25)
  {
    v39 = a2[1];
    __asm { FMOV            V4.2D, #0.5 }
    v45 = vmulq_f64(vaddq_f64(*a1, *a2), _Q4);
    v46 = a3[1];
    v47 = vmulq_f64(vaddq_f64(*a2, *a3), _Q4);
    v48 = a4[1];
    v49 = vaddq_f64(*a3, *a4);
    v50 = vmulq_f64(vaddq_f64(v45, v47), _Q4);
    v51 = vmulq_f64(vaddq_f64(a1[1], v39), _Q4);
    v113[0] = v45;
    v113[1] = v51;
    v52 = vmulq_f64(vaddq_f64(v39, v46), _Q4);
    v109 = v50;
    v110 = vmulq_f64(vaddq_f64(v51, v52), _Q4);
    v111 = vmulq_f64(v49, _Q4);
    v112 = vmulq_f64(vaddq_f64(v46, v48), _Q4);
    v107 = vmulq_f64(vaddq_f64(v47, v111), _Q4);
    v108 = vmulq_f64(vaddq_f64(v52, v112), _Q4);
    v106[0] = vmulq_f64(vaddq_f64(v50, v107), _Q4);
    v106[1] = vmulq_f64(vaddq_f64(v110, v108), _Q4);
    v53 = (a5 - 1);
    v54 = a10 * 0.5;
    ((void (*)(float64x2_t *, _OWORD *, float64x2_t *, _OWORD *, uint64_t, double *, uint64_t, uint64_t, double, double, uint64_t, uint64_t))PCAlgorithm::BezierSubdivide)(a1, v113, &v109, v106, v53, a6, a7, a8, a9, v54, a11, a12);
    ((void (*)(_OWORD *, float64x2_t *, float64x2_t *, float64x2_t *, uint64_t, double *, uint64_t, uint64_t, double, double, uint64_t, uint64_t))PCAlgorithm::BezierSubdivide)(v106, &v107, &v111, a4, v53, a6, a7, a8, v54 + a9, v54, a11, a12);
  }
  else
  {
    v55 = a1->f64[0];
    v56 = *(_QWORD *)(a7 + 16);
    v57 = *(_QWORD **)(a7 + 8);
    if ((unint64_t)v57 >= v56)
    {
      v59 = *(_QWORD **)a7;
      v60 = ((uint64_t)v57 - *(_QWORD *)a7) >> 3;
      v61 = v60 + 1;
      if ((unint64_t)(v60 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v62 = v56 - (_QWORD)v59;
      if (v62 >> 2 > v61)
        v61 = v62 >> 2;
      if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
        v63 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v63 = v61;
      if (v63)
      {
        v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a7 + 16, v63);
        v59 = *(_QWORD **)a7;
        v57 = *(_QWORD **)(a7 + 8);
      }
      else
      {
        v64 = 0;
      }
      v65 = &v64[8 * v60];
      v66 = &v64[8 * v63];
      *(float64_t *)v65 = v55;
      v58 = v65 + 8;
      while (v57 != v59)
      {
        v67 = *--v57;
        *((_QWORD *)v65 - 1) = v67;
        v65 -= 8;
      }
      *(_QWORD *)a7 = v65;
      *(_QWORD *)(a7 + 8) = v58;
      *(_QWORD *)(a7 + 16) = v66;
      if (v59)
        operator delete(v59);
    }
    else
    {
      *(float64_t *)v57 = v55;
      v58 = v57 + 1;
    }
    *(_QWORD *)(a7 + 8) = v58;
    v68 = a1->f64[1];
    v69 = *(_QWORD *)(a8 + 16);
    v70 = *(_QWORD **)(a8 + 8);
    if ((unint64_t)v70 >= v69)
    {
      v72 = *(_QWORD **)a8;
      v73 = ((uint64_t)v70 - *(_QWORD *)a8) >> 3;
      v74 = v73 + 1;
      if ((unint64_t)(v73 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v75 = v69 - (_QWORD)v72;
      if (v75 >> 2 > v74)
        v74 = v75 >> 2;
      if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
        v76 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v76 = v74;
      if (v76)
      {
        v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a8 + 16, v76);
        v72 = *(_QWORD **)a8;
        v70 = *(_QWORD **)(a8 + 8);
      }
      else
      {
        v77 = 0;
      }
      v78 = &v77[8 * v73];
      v79 = &v77[8 * v76];
      *(float64_t *)v78 = v68;
      v71 = v78 + 8;
      while (v70 != v72)
      {
        v80 = *--v70;
        *((_QWORD *)v78 - 1) = v80;
        v78 -= 8;
      }
      *(_QWORD *)a8 = v78;
      *(_QWORD *)(a8 + 8) = v71;
      *(_QWORD *)(a8 + 16) = v79;
      if (v72)
        operator delete(v72);
    }
    else
    {
      *(float64_t *)v70 = v68;
      v71 = v70 + 1;
    }
    *(_QWORD *)(a8 + 8) = v71;
    if (a11)
    {
      v81 = a1[1].f64[0];
      v82 = *(_QWORD *)(a11 + 16);
      v83 = *(_QWORD **)(a11 + 8);
      if ((unint64_t)v83 >= v82)
      {
        v85 = *(_QWORD **)a11;
        v86 = ((uint64_t)v83 - *(_QWORD *)a11) >> 3;
        v87 = v86 + 1;
        if ((unint64_t)(v86 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v88 = v82 - (_QWORD)v85;
        if (v88 >> 2 > v87)
          v87 = v88 >> 2;
        if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
          v89 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v89 = v87;
        if (v89)
        {
          v90 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a11 + 16, v89);
          v85 = *(_QWORD **)a11;
          v83 = *(_QWORD **)(a11 + 8);
        }
        else
        {
          v90 = 0;
        }
        v91 = &v90[8 * v86];
        v92 = &v90[8 * v89];
        *(float64_t *)v91 = v81;
        v84 = v91 + 8;
        while (v83 != v85)
        {
          v93 = *--v83;
          *((_QWORD *)v91 - 1) = v93;
          v91 -= 8;
        }
        *(_QWORD *)a11 = v91;
        *(_QWORD *)(a11 + 8) = v84;
        *(_QWORD *)(a11 + 16) = v92;
        if (v85)
          operator delete(v85);
      }
      else
      {
        *(float64_t *)v83 = v81;
        v84 = v83 + 1;
      }
      *(_QWORD *)(a11 + 8) = v84;
    }
    v94 = *(_QWORD *)(a12 + 16);
    v95 = *(double **)(a12 + 8);
    if ((unint64_t)v95 >= v94)
    {
      v97 = *(double **)a12;
      v98 = ((uint64_t)v95 - *(_QWORD *)a12) >> 3;
      v99 = v98 + 1;
      if ((unint64_t)(v98 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v100 = v94 - (_QWORD)v97;
      if (v100 >> 2 > v99)
        v99 = v100 >> 2;
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
        v101 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v101 = v99;
      if (v101)
      {
        v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a12 + 16, v101);
        v97 = *(double **)a12;
        v95 = *(double **)(a12 + 8);
      }
      else
      {
        v102 = 0;
      }
      v103 = (double *)&v102[8 * v98];
      v104 = &v102[8 * v101];
      *v103 = a9;
      v96 = v103 + 1;
      while (v95 != v97)
      {
        v105 = *((_QWORD *)v95-- - 1);
        *((_QWORD *)v103-- - 1) = v105;
      }
      *(_QWORD *)a12 = v103;
      *(_QWORD *)(a12 + 8) = v96;
      *(_QWORD *)(a12 + 16) = v104;
      if (v97)
        operator delete(v97);
    }
    else
    {
      *v95 = a9;
      v96 = v95 + 1;
    }
    *(_QWORD *)(a12 + 8) = v96;
  }
}

BOOL PCAlgorithm::findIntersection(double *a1, double *a2, double *a3, double *a4, double *a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v5 = *a2;
  v6 = a2[1];
  v7 = *a4;
  v8 = a4[1];
  v9 = *a2 * v8 - v6 * *a4;
  v10 = v5 * v5 + v6 * v6;
  v11 = v8 * v8 + v7 * v7;
  v12 = (float)(v10 * 0.1) * v11;
  if ((float)(v9 * v9) > v12)
  {
    v13 = (v8 * (*a3 - *a1) - v7 * (a3[1] - a1[1])) / v9;
    v14 = v13;
    v15 = v5 * v14;
    v16 = v6 * v14;
    *a2 = v15;
    a2[1] = v16;
    v17 = a1[1] + v16;
    *a5 = *a1 + v15;
    a5[1] = v17;
  }
  return (float)(v9 * v9) > v12;
}

void PCAlgorithm::superEllipse(PCAlgorithm *this, double a2, double a3, double a4, double a5, double *a6, double *a7)
{
  float v13;
  __float2 v14;
  double v15;

  v13 = a2;
  v14 = __sincosf_stret(v13);
  *(float *)&a5 = a5;
  *(double *)this = powf(fabsf(v14.__cosval), *(float *)&a5) * a3;
  v15 = powf(fabsf(v14.__sinval), *(float *)&a5) * a4;
  *a6 = v15;
  if (a2 <= 4.71238898)
  {
    if (a2 <= 3.14159265)
    {
      if (a2 <= 1.57079633)
        return;
      v15 = *(double *)this;
      a6 = (double *)this;
    }
    else
    {
      *(double *)this = -*(double *)this;
      v15 = *a6;
    }
  }
  *a6 = -v15;
}

char *PCArray_base::gnomesortImpl(char *this, void *a2, uint64_t a3, uint64_t (*a4)(_QWORD, _QWORD), int (*a5)(const void *, const void *))
{
  int v5;
  char *v6;
  void *v7;
  size_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD, _QWORD);
  uint64_t v14;

  if ((int)a2 >= 2)
  {
    v5 = (int)a2;
    v6 = this;
    v7 = 0;
    v8 = (int)a3;
    v9 = 1;
    v14 = (int)a3;
    do
    {
      v10 = &v6[(v9 - 1) * v14];
      v11 = a3;
      v12 = &v6[v9 * (uint64_t)(int)a3];
      v13 = a4;
      this = (char *)a4(v10, v12);
      if ((int)this <= 0)
      {
        ++v9;
      }
      else
      {
        if (!v7)
          v7 = (void *)operator new[]();
        memcpy(v7, v10, v8);
        memcpy(v12, v10, v8);
        this = (char *)memcpy(v10, v7, v8);
        if (v9 <= 1)
          ++v9;
        else
          --v9;
      }
      a4 = v13;
      a3 = v11;
    }
    while (v9 < v5);
    if (v7)
      JUMPOUT(0x1B5E2914CLL);
  }
  return this;
}

void PCArray_base::badIndex(PCArray_base *this)
{
  PCException *exception;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "PCArray::operator[]");
  PCException::PCException(exception, &v2);
  *(_QWORD *)exception = &unk_1E6512AB0;
}

void sub_1B299F270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PCBadIndexException::~PCBadIndexException(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void PCBadIndexException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCBadIndexException"));
}

PCString *PCBlend::modeMenuString(PCBlend *this)
{
  PCString *v1;

  if ((_DWORD)this)
  {
    v1 = (PCString *)PCBlend::modeMenuString(BOOL)::pModeMenuCombineString;
    if (!PCBlend::modeMenuString(BOOL)::pModeMenuCombineString)
    {
      v1 = (PCString *)operator new();
      PCString::PCString(v1, "Blend Modes Combine", "com.apple.procore.framework");
      PCBlend::modeMenuString(BOOL)::pModeMenuCombineString = (uint64_t)v1;
    }
  }
  else
  {
    v1 = (PCString *)PCBlend::modeMenuString(BOOL)::pModeMenuString;
    if (!PCBlend::modeMenuString(BOOL)::pModeMenuString)
    {
      v1 = (PCString *)operator new();
      PCString::PCString(v1, "Blend Modes", "com.apple.procore.framework");
      PCBlend::modeMenuString(BOOL)::pModeMenuString = (uint64_t)v1;
    }
  }
  return v1;
}

void sub_1B299F380(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

PCString *PCBlend::lightWrapModeMenuString(PCBlend *this)
{
  PCString *v1;

  v1 = (PCString *)PCBlend::lightWrapModeMenuString(void)::pLightWrapModeMenuString;
  if (!PCBlend::lightWrapModeMenuString(void)::pLightWrapModeMenuString)
  {
    v1 = (PCString *)operator new();
    PCString::PCString(v1, "Light Wrap Blend Modes", "com.apple.procore.framework");
    PCBlend::lightWrapModeMenuString(void)::pLightWrapModeMenuString = (uint64_t)v1;
  }
  return v1;
}

void sub_1B299F404(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

PCString *PCBlend::reflectionModeMenuString(PCBlend *this)
{
  PCString *v1;

  v1 = (PCString *)PCBlend::reflectionModeMenuString(void)::pReflectionModeMenuString;
  if (!PCBlend::reflectionModeMenuString(void)::pReflectionModeMenuString)
  {
    v1 = (PCString *)operator new();
    PCString::PCString(v1, "Blend Modes Reflection", "com.apple.procore.framework");
    PCBlend::reflectionModeMenuString(void)::pReflectionModeMenuString = (uint64_t)v1;
  }
  return v1;
}

void sub_1B299F484(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

void *PCBlend::getElementBlendModes(PCBlend *this, unsigned int *a2)
{
  *(_DWORD *)this = 33;
  return &PCBlend::getElementBlendModes(unsigned int &)::elementBlendModes;
}

void *PCBlend::getLayerBlendModes(PCBlend *this, unsigned int *a2)
{
  *(_DWORD *)this = 35;
  return &PCBlend::getLayerBlendModes(unsigned int &)::layerBlendModes;
}

uint64_t PCBlend::isAbelian(unsigned int a1)
{
  return (a1 < 0x18) & (0xC00718u >> a1);
}

uint64_t PCBlend::isAssociative(int a1)
{
  uint64_t result;
  PCException *exception;
  PCIllegalArgumentException *v4;
  PCString v5;
  PCString v6;

  result = 1;
  switch(a1)
  {
    case 0:
    case 3:
    case 4:
    case 8:
    case 9:
    case 10:
    case 23:
    case 31:
    case 35:
    case 48:
      return result;
    case 2:
    case 5:
    case 6:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 32:
    case 34:
      result = 0;
      break;
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 49:
    case 50:
    case 51:
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v6, "not implemented yet");
      PCString::PCString(&v5, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCBlend.cpp");
      PCException::PCException(exception, &v6, &v5, 496);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    default:
      v4 = (PCIllegalArgumentException *)__cxa_allocate_exception(0x40uLL);
      PCIllegalArgumentException::PCIllegalArgumentException(v4);
  }
  return result;
}

void sub_1B299F5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void PCIllegalArgumentException::PCIllegalArgumentException(PCIllegalArgumentException *this)
{
  _QWORD *v1;

  PCException::PCException(this);
  *v1 = &unk_1E65EA798;
}

uint64_t PCBlend::isNormalOverNothing(unsigned int a1)
{
  PCException *exception;
  PCIllegalArgumentException *v3;
  PCString v4;
  PCString v5;

  if (a1 > 0x33)
    goto LABEL_9;
  if (((1 << a1) & 0x1000DA0DFDF7DLL) == 0)
  {
    if (((1 << a1) & 0x1E000000) != 0)
      return 0;
    if (((1 << a1) & 0xEFFC000000000) != 0)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v5, "not implemented yet");
      PCString::PCString(&v4, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCBlend.cpp");
      PCException::PCException(exception, &v5, &v4, 564);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    }
LABEL_9:
    v3 = (PCIllegalArgumentException *)__cxa_allocate_exception(0x40uLL);
    PCIllegalArgumentException::PCIllegalArgumentException(v3);
  }
  return 1;
}

void sub_1B299F76C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t PCBlend::isNothingOverNothing(unsigned int a1)
{
  PCException *exception;
  PCIllegalArgumentException *v3;
  PCString v4;
  PCString v5;

  if (a1 > 0x33)
    goto LABEL_9;
  if (((1 << a1) & 0x1000DA0DFDF7DLL) == 0)
  {
    if (((1 << a1) & 0x1E000000) != 0)
      return 1;
    if (((1 << a1) & 0xEFFC000000000) != 0)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v5, "not implemented yet");
      PCString::PCString(&v4, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCBlend.cpp");
      PCException::PCException(exception, &v5, &v4, 632);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    }
LABEL_9:
    v3 = (PCIllegalArgumentException *)__cxa_allocate_exception(0x40uLL);
    PCIllegalArgumentException::PCIllegalArgumentException(v3);
  }
  return 0;
}

void sub_1B299F8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

unint64_t PCBlend::treatsBlackLikeNormal(unsigned int a1)
{
  PCIllegalArgumentException *exception;

  if (a1 >= 0x34 || ((0xFFFCDBEDFDF7DuLL >> a1) & 1) == 0)
  {
    exception = (PCIllegalArgumentException *)__cxa_allocate_exception(0x40uLL);
    PCIllegalArgumentException::PCIllegalArgumentException(exception);
  }
  return (0x32412161FFuLL >> a1) & 1;
}

void sub_1B299F98C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t PCBlend::lrBlendToPCBlend(int a1)
{
  if ((a1 - 1) > 3)
    return 0;
  else
    return dword_1B3059CC0[a1 - 1];
}

void std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  PCString *v2;
  PCString *v4;
  void *v5;

  v1 = *a1;
  v2 = (PCString *)**a1;
  if (v2)
  {
    v4 = (PCString *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        PCString::~PCString(v4 - 1);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<PCString>::push_back[abi:ne180100](uint64_t *a1, PCString *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  PCString *v15;
  PCString *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = (PCString *)&v13[8 * v9];
    v17 = &v13[8 * v12];
    PCString::PCString(v15, a2);
    v16 = v15 + 1;
    std::vector<PCString>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    std::__split_buffer<PCString>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    PCString::PCString(*(PCString **)(v4 - 8), a2);
    v8 = v7 + 8;
    a1[1] = v7 + 8;
  }
  a1[1] = v8;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  PCString *v15;
  PCString *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v5 - *a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = (PCString *)&v13[8 * v9];
    v17 = &v13[8 * v12];
    PCString::PCString(v15, a2);
    v16 = v15 + 1;
    std::vector<PCString>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    std::__split_buffer<PCString>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    PCString::PCString(*(PCString **)(v4 - 8), a2);
    v8 = v7 + 8;
    a1[1] = v7 + 8;
  }
  a1[1] = v8;
}

void sub_1B299FB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_1B299FC34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<PCString>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCString>,std::reverse_iterator<PCString*>,std::reverse_iterator<PCString*>,std::reverse_iterator<PCString*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<PCString>,std::reverse_iterator<PCString*>,std::reverse_iterator<PCString*>,std::reverse_iterator<PCString*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  PCString *v12;

  v10 = 0;
  v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    v12 = (PCString *)(v11 + v10);
    v10 -= 8;
    PCString::PCString(v12, (const PCString *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<PCString>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    PCString::~PCString((PCString *)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t PCPixelFormat::getGLInternalFormat(unsigned int a1)
{
  unsigned int v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
}

uint64_t PCPixelFormat::getGLDataFormat(unsigned int a1)
{
  unsigned int v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
}

uint64_t PCPixelFormat::getGLDataType(unsigned int a1)
{
  unsigned int v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
}

uint64_t PCPixelFormat::getPixelFormat(PCPixelFormat *this, int a2)
{
  int v2;
  uint64_t result;
  int *i;

  v2 = (int)this;
  result = 0;
  for (i = &dword_1B3059CE0; *(i - 1) != v2 || *i != a2; i += 3)
  {
    if (++result == 18)
      return 0;
  }
  return result;
}

uint64_t PCPixelFormat::getBitsPerPixel(unsigned int a1)
{
  unsigned int v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
}

uint64_t PCPixelFormat::getBitsPerChannel(unsigned int a1)
{
  unsigned int v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
}

uint64_t PCPixelFormat::getBytesPerPixel(unsigned int a1)
{
  unsigned int v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
}

unint64_t PCPixelFormat::hasRGB(unsigned int a1)
{
  char v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
  return (0x32678uLL >> v1) & 1;
}

unint64_t PCPixelFormat::hasGray(unsigned int a1)
{
  char v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
  return (0xD986uLL >> v1) & 1;
}

unint64_t PCPixelFormat::hasAlpha(unsigned int a1)
{
  char v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
  return (0x3B57CuLL >> v1) & 1;
}

BOOL PCPixelFormat::isFloat(unsigned int a1)
{
  uint64_t v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
  return (unint64_t)(v1 - 11) < 7;
}

uint64_t PCPixelFormat::getNumChannels(unsigned int a1)
{
  unsigned int v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
}

BOOL PCPixelFormat::is8Bit(unsigned int a1)
{
  uint64_t v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
  return (unint64_t)(v1 - 1) < 6;
}

BOOL PCPixelFormat::is16Bit(unsigned int a1)
{
  uint64_t v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
  return (unint64_t)(v1 - 7) < 7;
}

BOOL PCPixelFormat::is32Bit(unsigned int a1)
{
  uint64_t v1;

  if (a1 <= 0x11)
    v1 = a1;
  else
    v1 = 0;
  return (unint64_t)(v1 - 14) < 4;
}

uint64_t PCPixelFormat::setGray(uint64_t result)
{
  int v1;

  v1 = result - 3;
  if ((result - 3) <= 0xE && ((0x64CFu >> v1) & 1) != 0)
    return dword_1B3059F60[v1];
  return result;
}

uint64_t PCPixelFormat::removeAlpha(uint64_t result)
{
  switch((int)result)
  {
    case 8:
      result = 7;
      break;
    case 9:
    case 11:
    case 13:
    case 14:
      return result;
    case 10:
      result = 9;
      break;
    case 12:
      result = 11;
      break;
    case 15:
      result = 14;
      break;
    default:
      if ((_DWORD)result == 2)
        result = 1;
      break;
  }
  return result;
}

uint64_t PCPixelFormat::setDepth(uint64_t result, int a2, int a3)
{
  int v3;
  unsigned int *v4;

  if (a3)
  {
    if (a2 == 32)
    {
      v3 = result - 1;
      if ((result - 1) >= 0xD)
        return result;
      v4 = (unsigned int *)&unk_1B3059FE0;
      return v4[v3];
    }
    if (a2 == 16)
    {
      v3 = result - 1;
      if ((result - 1) < 0x11 && ((0x1E3FFu >> v3) & 1) != 0)
      {
        v4 = (unsigned int *)&unk_1B3059F9C;
        return v4[v3];
      }
    }
  }
  else if (a2 == 16)
  {
    v3 = result - 1;
    if ((result - 1) < 0x11 && ((0x1FC3Fu >> v3) & 1) != 0)
    {
      v4 = (unsigned int *)&unk_1B305A040;
      return v4[v3];
    }
  }
  else if (a2 == 8)
  {
    v3 = result - 7;
    if ((result - 7) < 0xB)
    {
      v4 = (unsigned int *)&unk_1B305A014;
      return v4[v3];
    }
  }
  return result;
}

uint64_t makeCGFormat@<X0>(CGColorSpace *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v7;
  int v8;

  result = CGColorSpaceGetModel(a1);
  if (result > 7)
    v7 = 3;
  else
    v7 = dword_1B305A248[(int)result];
  if (a2 == 1)
    v8 = 8452;
  else
    v8 = 8448;
  if (a2 == 2)
    v8 = 8451;
  if ((a2 - 1) < 2)
    ++v7;
  *(_DWORD *)a3 = 32;
  *(_DWORD *)(a3 + 4) = 32 * v7;
  *(_QWORD *)(a3 + 8) = a1;
  *(_DWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 28) = 0;
  *(_QWORD *)(a3 + 20) = 0;
  return result;
}

vImageConverter *createConverter@<X0>(CGColorSpace **a1@<X0>, int a2@<W1>, CGColorSpace **a3@<X2>, int a4@<W3>, vImageConverterRef *a5@<X8>)
{
  vImageConverter *result;
  _QWORD *v10;
  const void *v11;
  const CGColorConversionInfo *v12;
  vImage_Error error;
  vImage_CGImageFormat destFormat;
  vImage_CGImageFormat srcFormat;

  memset(&srcFormat, 0, sizeof(srcFormat));
  makeCGFormat(*a1, a2, (uint64_t)&srcFormat);
  memset(&destFormat, 0, sizeof(destFormat));
  makeCGFormat(*a3, a4, (uint64_t)&destFormat);
  error = 0;
  result = vImageConverter_CreateWithCGImageFormat(&srcFormat, &destFormat, 0, 0x400u, &error);
  *a5 = result;
  if (!result)
  {
    v12 = CGColorConversionInfoCreate(*a1, *a3);
    *a5 = vImageConverter_CreateWithCGColorConversionInfo(v12, &srcFormat, &destFormat, 0, 0x400u, &error);
    v11 = 0;
    PCCFRef<vImageConverter *>::~PCCFRef(&v11);
    result = (vImageConverter *)PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v12);
  }
  if (error)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error in vImageConverter_CreateWithCGImageFormat: ", 50);
    v10 = (_QWORD *)std::ostream::operator<<();
    return (vImageConverter *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
  }
  return result;
}

void sub_1B29A040C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  const void **v3;
  va_list va;

  va_start(va, a3);
  PCCFRef<vImageConverter *>::~PCCFRef((const void **)va);
  PCCFRef<vImageConverter *>::~PCCFRef(v3);
  _Unwind_Resume(a1);
}

vImagePixelCount PCColorUtil::transformColor(uint64_t a1, uint64_t a2)
{
  vImagePixelCount result;
  __int128 v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_QWORD *)a2 >= *(_QWORD *)a1)
    result = *(_QWORD *)a1;
  else
    result = *(_QWORD *)a2;
  if (result)
  {
    v4 = *(_OWORD *)(a1 + 8);
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_DWORD *)(a1 + 32);
    v11 = v4;
    v12 = v5;
    v13 = v6;
    v7 = *(_QWORD *)(a2 + 24);
    LODWORD(v5) = *(_DWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 8);
    v9 = v7;
    v10 = v5;
    return doSimpleTransform(result, (uint64_t)&v11, (uint64_t)&v8);
  }
  return result;
}

uint64_t doSimpleTransform(vImagePixelCount a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  int v8;
  char v9;
  vImagePixelCount v10;
  float *v11;
  size_t v12;
  float *v13;
  CGColorSpace *v14;
  int v15;
  float *v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  float *v21;
  CGColorSpace *v22;
  _BOOL4 v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  vImagePixelCount v33;
  uint64_t v34;
  vImagePixelCount v35;
  uint64_t v36;
  _QWORD v37[4];
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char v41;
  void *__p;
  void *v43;
  void *__dst;
  vImageConverter *v45;

  if (CFEqual(*(CFTypeRef *)(a2 + 16), *(CFTypeRef *)(a3 + 16)))
  {
    result = CGColorSpaceUsesExtendedRange(*(CGColorSpaceRef *)(a2 + 16));
    v7 = *(_DWORD *)(a2 + 24);
    v8 = *(_DWORD *)(a3 + 24);
    v36 = a1;
    if (v7 == v8)
    {
      v9 = result;
      v10 = *(_QWORD *)(a2 + 8) * a1;
      if (!v10)
        goto LABEL_55;
      v11 = *(float **)a2;
      v12 = 4 * v10;
      v13 = *(float **)a3;
      goto LABEL_5;
    }
    v16 = *(float **)a3;
    v17 = (char *)(*(_QWORD *)a3 + 4 * (v8 == 1));
    v11 = *(float **)a2;
    v18 = *(_QWORD *)(a2 + 8);
    v19 = v7 - 1;
    v20 = (char *)(*(_QWORD *)a2 + 4 * (v7 == 1));
    if (v7 == 1)
    {
      v21 = *(float **)a2;
    }
    else if (v7 == 2)
    {
      v21 = &v11[v18 - 1];
    }
    else
    {
      v21 = 0;
    }
    if (v8 == 1)
    {
      v31 = v18 - (v19 < 2);
      if (v16)
      {
LABEL_29:
        v9 = result;
        if (v21)
        {
          for (; a1; --a1)
          {
            if (v31)
            {
              result = (uint64_t)memmove(v17, v20, 4 * v31);
              v18 = *(_QWORD *)(a2 + 8);
            }
            *v16 = *v21;
            v20 += 4 * v18;
            v32 = *(_QWORD *)(a3 + 8);
            v17 += 4 * v32;
            v21 += v18;
            v16 += v32;
          }
        }
        else if (a1)
        {
          v33 = a1;
          do
          {
            if (v31)
            {
              result = (uint64_t)memmove(v17, v20, 4 * v31);
              v18 = *(_QWORD *)(a2 + 8);
            }
            *v16 = 1.0;
            v20 += 4 * v18;
            v34 = *(_QWORD *)(a3 + 8);
            v17 += 4 * v34;
            v16 += v34;
            --v33;
          }
          while (v33);
        }
        goto LABEL_55;
      }
    }
    else
    {
      if (v8 == 2)
      {
        v16 = &v16[*(_QWORD *)(a3 + 8) - 1];
        v31 = v18 - (v19 < 2);
        goto LABEL_29;
      }
      v31 = v18 - (v19 < 2);
    }
    v9 = result;
    if (v21)
    {
      for (; a1; --a1)
      {
        if (v31)
        {
          result = (uint64_t)memmove(v17, v20, 4 * v31);
          v18 = *(_QWORD *)(a2 + 8);
        }
        v20 += 4 * v18;
        v17 += 4 * *(_QWORD *)(a3 + 8);
      }
      goto LABEL_55;
    }
    v35 = v18 * a1;
    if (!v35)
    {
LABEL_55:
      if ((v9 & 1) == 0)
        return clampComponents(v36, *(float **)a3, *(_QWORD *)(a3 + 8), *(_DWORD *)(a3 + 24));
      return result;
    }
    v12 = 4 * v35;
    v13 = *(float **)a3;
LABEL_5:
    result = (uint64_t)memmove(v13, v11, v12);
    goto LABEL_55;
  }
  getCachedColorConverter(*(CGColorSpaceRef *)(a2 + 16), *(CGColorSpaceRef *)(a3 + 16), *(_DWORD *)(a2 + 24), *(_DWORD *)(a3 + 24), (const void **)&v45);
  if (v45)
  {
    v14 = *(CGColorSpace **)(a2 + 16);
    v15 = !CGColorSpaceUsesExtendedRange(v14) && CGColorSpaceGetModel(v14) != kCGColorSpaceModelLab;
    v22 = *(CGColorSpace **)(a3 + 16);
    v23 = !CGColorSpaceUsesExtendedRange(v22) && CGColorSpaceGetModel(v22) != kCGColorSpaceModelLab;
    v24 = *(_DWORD **)a2;
    if (v41)
    {
      v25 = v38;
      v26 = v39;
      if (v39 * v38)
      {
        memmove(__dst, v24, 4 * v39 * v38);
        v25 = v38;
        v26 = v39;
      }
      clampComponents(v25, (float *)__dst, v26, v40);
      v24 = __dst;
    }
    v27 = *(_QWORD *)(a2 + 8);
    v28 = *(_QWORD *)(a2 + 16);
    v29 = *(_DWORD *)(a2 + 24);
    v37[0] = v24;
    v37[1] = v27;
    v37[2] = v28;
    v37[3] = v29;
    if (dovImageTransform(a1, v45, (uint64_t)v37, a3))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; vImageConvert_AnyToAny failed, error code is ",
        52);
      v30 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\n", 1);
      writeOpaqueBlack(a1, a3);
    }
    else if (v23)
    {
      clampComponents(a1, *(float **)a3, *(_QWORD *)(a3 + 8), *(_DWORD *)(a3 + 24));
    }
    if (__p)
    {
      v43 = __p;
      operator delete(__p);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a1, a3);
  }
  return (uint64_t)PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v45);
}

void sub_1B29A086C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  uint64_t v21;

  PCCFRef<vImageConverter *>::~PCCFRef((const void **)(v21 - 88));
  _Unwind_Resume(a1);
}

void PCColorUtil::transformColorWithDynamicRange(uint64_t a1, uint64_t a2, PCToneMapMethod *this)
{
  vImagePixelCount v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  CGColorSpace *v9;
  CGColorSpace *v10;
  CGColorSpace *v11;
  CGColorSpace *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_QWORD *)a2 >= *(_QWORD *)a1)
    v3 = *(_QWORD *)a1;
  else
    v3 = *(_QWORD *)a2;
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 24);
    v16 = *(_OWORD *)(a1 + 8);
    v17 = v4;
    v18 = 0;
    v5 = *(_DWORD *)(a1 + 36);
    LODWORD(v18) = *(_DWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a2 + 24);
    v13 = *(_OWORD *)(a2 + 8);
    v14 = v6;
    v15 = 0;
    v7 = *(_DWORD *)(a2 + 36);
    LODWORD(v15) = *(_DWORD *)(a2 + 32);
    if (v5 == v7 || !PVPerfStats::FrameStats::GetSize((PVPerfStats::FrameStats *)this))
    {
      doSimpleTransform(v3, (uint64_t)&v16, (uint64_t)&v13);
    }
    else if (v5 || v7 != 1)
    {
      if (v5 != 1 || v7)
      {
        writeOpaqueBlack(v3, (uint64_t)&v13);
      }
      else
      {
        v11 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear, 1);
        v12 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020, 1);
        switch(PVPerfStats::FrameStats::GetSize((PVPerfStats::FrameStats *)this))
        {
          case 2u:
            doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_6>(v11, v12, v3, (char **)&v16, (uint64_t)&v13);
            break;
          case 3u:
            doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_7>(v11, v12, v3, (char **)&v16, (uint64_t)&v13);
            break;
          case 4u:
            doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_8>(v11, v12, v3, (char **)&v16, (uint64_t)&v13);
            break;
          case 5u:
            doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_9>(this, v11, v12, v3, (char **)&v16, (uint64_t)&v13);
            break;
          case 6u:
            doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_10>(v11, v12, v3, (char **)&v16, (uint64_t)&v13);
            break;
          default:
            return;
        }
      }
    }
    else
    {
      v9 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020, 1);
      v10 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear, 1);
      switch(PVPerfStats::FrameStats::GetSize((PVPerfStats::FrameStats *)this))
      {
        case 1u:
          doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_0>(v9, v10, v3, (char **)&v16, (uint64_t)&v13);
          break;
        case 2u:
          doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_1>(v9, v10, v3, (char **)&v16, (uint64_t)&v13);
          break;
        case 3u:
          doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_2>(v9, v10, v3, (char **)&v16, (uint64_t)&v13);
          break;
        case 4u:
          doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_3>(v9, v10, v3, (char **)&v16, (uint64_t)&v13);
          break;
        case 5u:
          doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_4>(this, v9, v10, v3, (char **)&v16, (uint64_t)&v13);
          break;
        case 6u:
          doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_5>(v9, v10, v3, (char **)&v16, (uint64_t)&v13);
          break;
        default:
          return;
      }
    }
  }
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_0>(CGColorSpaceRef a1, CGColorSpace *a2, uint64_t a3, char **a4, uint64_t a5)
{
  CGColorSpace *v8;
  int v9;
  CGColorSpace *v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  vImage_Error v18;
  __n128 v19;
  unsigned __int32 v20;
  uint64_t v22;
  unsigned int v23;
  int64x2_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  void *__p;
  void *v31;
  void *__dst;
  vImageConverterRef v33;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  __n128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a4[2], a1, *((_DWORD *)a4 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a2, *(CGColorSpaceRef *)(a5 + 16), 2, *(_DWORD *)(a5 + 24), (const void **)&v33);
    if (v33)
    {
      v8 = (CGColorSpace *)a4[2];
      v9 = !CGColorSpaceUsesExtendedRange(v8) && CGColorSpaceGetModel(v8) != kCGColorSpaceModelLab;
      v10 = *(CGColorSpace **)(a5 + 16);
      v11 = !CGColorSpaceUsesExtendedRange(v10) && CGColorSpaceGetModel(v10) != kCGColorSpaceModelLab;
      if (a3)
      {
        v23 = *(_DWORD *)(a5 + 24);
        v12 = *(char **)a5;
        v13 = *a4;
        v14 = 4 * (_QWORD)a4[1];
        v22 = *(_QWORD *)(a5 + 8);
        v24 = vdupq_n_s64(1uLL);
        do
        {
          v15 = v13;
          if (v29)
          {
            v16 = v26;
            v17 = v27;
            if (v27 * v26)
            {
              memmove(__dst, v13, 4 * v27 * v26);
              v16 = v26;
              v17 = v27;
            }
            clampComponents(v16, (float *)__dst, v17, v28);
            v15 = __dst;
          }
          *(int64x2_t *)&srcs.height = v24;
          srcs.data = v15;
          srcs.rowBytes = v14;
          dests.data = &v37;
          *(int64x2_t *)&dests.height = v24;
          dests.rowBytes = 16;
          v18 = vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          v19.n128_f64[0] = PCColorUtil::applyInverseToneMap_BT2390(v18, v37);
          v20 = v37.n128_u32[3];
          v37 = v19;
          v37.n128_u32[3] = v20;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v37;
          srcs.rowBytes = 16;
          dests.data = v12;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v22;
          vImageConvert_AnyToAny(v33, &srcs, &dests, 0, 0);
          if (v11)
            clampComponents(1, (float *)v12, v22, v23);
          v13 += 4 * (_QWORD)a4[1];
          v12 += 4 * *(_QWORD *)(a5 + 8);
          --a3;
        }
        while (a3);
      }
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a3, a5);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v33);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a3, a5);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A0E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a25);
  PCCFRef<vImageConverter *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_1>(CGColorSpaceRef a1, CGColorSpace *a2, uint64_t a3, char **a4, uint64_t a5)
{
  CGColorSpace *v8;
  int v9;
  CGColorSpace *v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  vImage_Error v18;
  __n128 v19;
  unsigned __int32 v20;
  uint64_t v22;
  unsigned int v23;
  int64x2_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  void *__p;
  void *v31;
  void *__dst;
  vImageConverterRef v33;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  __n128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a4[2], a1, *((_DWORD *)a4 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a2, *(CGColorSpaceRef *)(a5 + 16), 2, *(_DWORD *)(a5 + 24), (const void **)&v33);
    if (v33)
    {
      v8 = (CGColorSpace *)a4[2];
      v9 = !CGColorSpaceUsesExtendedRange(v8) && CGColorSpaceGetModel(v8) != kCGColorSpaceModelLab;
      v10 = *(CGColorSpace **)(a5 + 16);
      v11 = !CGColorSpaceUsesExtendedRange(v10) && CGColorSpaceGetModel(v10) != kCGColorSpaceModelLab;
      if (a3)
      {
        v23 = *(_DWORD *)(a5 + 24);
        v12 = *(char **)a5;
        v13 = *a4;
        v14 = 4 * (_QWORD)a4[1];
        v22 = *(_QWORD *)(a5 + 8);
        v24 = vdupq_n_s64(1uLL);
        do
        {
          v15 = v13;
          if (v29)
          {
            v16 = v26;
            v17 = v27;
            if (v27 * v26)
            {
              memmove(__dst, v13, 4 * v27 * v26);
              v16 = v26;
              v17 = v27;
            }
            clampComponents(v16, (float *)__dst, v17, v28);
            v15 = __dst;
          }
          *(int64x2_t *)&srcs.height = v24;
          srcs.data = v15;
          srcs.rowBytes = v14;
          dests.data = &v37;
          *(int64x2_t *)&dests.height = v24;
          dests.rowBytes = 16;
          v18 = vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          v19.n128_f64[0] = PCColorUtil::applyInverseToneMap_BT2446_A(v18, v37);
          v20 = v37.n128_u32[3];
          v37 = v19;
          v37.n128_u32[3] = v20;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v37;
          srcs.rowBytes = 16;
          dests.data = v12;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v22;
          vImageConvert_AnyToAny(v33, &srcs, &dests, 0, 0);
          if (v11)
            clampComponents(1, (float *)v12, v22, v23);
          v13 += 4 * (_QWORD)a4[1];
          v12 += 4 * *(_QWORD *)(a5 + 8);
          --a3;
        }
        while (a3);
      }
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a3, a5);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v33);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a3, a5);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A1130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a25);
  PCCFRef<vImageConverter *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_2>(CGColorSpaceRef a1, CGColorSpace *a2, uint64_t a3, char **a4, uint64_t a5)
{
  CGColorSpace *v8;
  int v9;
  CGColorSpace *v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  vImage_Error v18;
  __n128 v19;
  unsigned __int32 v20;
  uint64_t v22;
  unsigned int v23;
  int64x2_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  void *__p;
  void *v31;
  void *__dst;
  vImageConverterRef v33;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  __n128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a4[2], a1, *((_DWORD *)a4 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a2, *(CGColorSpaceRef *)(a5 + 16), 2, *(_DWORD *)(a5 + 24), (const void **)&v33);
    if (v33)
    {
      v8 = (CGColorSpace *)a4[2];
      v9 = !CGColorSpaceUsesExtendedRange(v8) && CGColorSpaceGetModel(v8) != kCGColorSpaceModelLab;
      v10 = *(CGColorSpace **)(a5 + 16);
      v11 = !CGColorSpaceUsesExtendedRange(v10) && CGColorSpaceGetModel(v10) != kCGColorSpaceModelLab;
      if (a3)
      {
        v23 = *(_DWORD *)(a5 + 24);
        v12 = *(char **)a5;
        v13 = *a4;
        v14 = 4 * (_QWORD)a4[1];
        v22 = *(_QWORD *)(a5 + 8);
        v24 = vdupq_n_s64(1uLL);
        do
        {
          v15 = v13;
          if (v29)
          {
            v16 = v26;
            v17 = v27;
            if (v27 * v26)
            {
              memmove(__dst, v13, 4 * v27 * v26);
              v16 = v26;
              v17 = v27;
            }
            clampComponents(v16, (float *)__dst, v17, v28);
            v15 = __dst;
          }
          *(int64x2_t *)&srcs.height = v24;
          srcs.data = v15;
          srcs.rowBytes = v14;
          dests.data = &v37;
          *(int64x2_t *)&dests.height = v24;
          dests.rowBytes = 16;
          v18 = vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          v19.n128_f64[0] = PCColorUtil::applyInverseToneMap_OS(v18, v37);
          v20 = v37.n128_u32[3];
          v37 = v19;
          v37.n128_u32[3] = v20;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v37;
          srcs.rowBytes = 16;
          dests.data = v12;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v22;
          vImageConvert_AnyToAny(v33, &srcs, &dests, 0, 0);
          if (v11)
            clampComponents(1, (float *)v12, v22, v23);
          v13 += 4 * (_QWORD)a4[1];
          v12 += 4 * *(_QWORD *)(a5 + 8);
          --a3;
        }
        while (a3);
      }
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a3, a5);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v33);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a3, a5);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A1454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a25);
  PCCFRef<vImageConverter *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_3>(CGColorSpaceRef a1, CGColorSpace *a2, uint64_t a3, char **a4, uint64_t a5)
{
  CGColorSpace *v8;
  int v9;
  CGColorSpace *v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  __int32 v19;
  uint64_t v21;
  unsigned int v22;
  int64x2_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  void *__p;
  void *v30;
  void *__dst;
  vImageConverterRef v32;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  float32x4_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a4[2], a1, *((_DWORD *)a4 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a2, *(CGColorSpaceRef *)(a5 + 16), 2, *(_DWORD *)(a5 + 24), (const void **)&v32);
    if (v32)
    {
      v8 = (CGColorSpace *)a4[2];
      v9 = !CGColorSpaceUsesExtendedRange(v8) && CGColorSpaceGetModel(v8) != kCGColorSpaceModelLab;
      v10 = *(CGColorSpace **)(a5 + 16);
      v11 = !CGColorSpaceUsesExtendedRange(v10) && CGColorSpaceGetModel(v10) != kCGColorSpaceModelLab;
      if (a3)
      {
        v22 = *(_DWORD *)(a5 + 24);
        v12 = *(char **)a5;
        v13 = *a4;
        v14 = 4 * (_QWORD)a4[1];
        v21 = *(_QWORD *)(a5 + 8);
        v23 = vdupq_n_s64(1uLL);
        do
        {
          v15 = v13;
          if (v28)
          {
            v16 = v25;
            v17 = v26;
            if (v26 * v25)
            {
              memmove(__dst, v13, 4 * v26 * v25);
              v16 = v25;
              v17 = v26;
            }
            clampComponents(v16, (float *)__dst, v17, v27);
            v15 = __dst;
          }
          *(int64x2_t *)&srcs.height = v23;
          srcs.data = v15;
          srcs.rowBytes = v14;
          dests.data = &v36;
          *(int64x2_t *)&dests.height = v23;
          dests.rowBytes = 16;
          vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          *(double *)v18.i64 = PCColorUtil::applyInverseToneMap_HLGDiffuseWhite(v36);
          v19 = v36.i32[3];
          v36 = v18;
          v36.i32[3] = v19;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v36;
          srcs.rowBytes = 16;
          dests.data = v12;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v21;
          vImageConvert_AnyToAny(v32, &srcs, &dests, 0, 0);
          if (v11)
            clampComponents(1, (float *)v12, v21, v22);
          v13 += 4 * (_QWORD)a4[1];
          v12 += 4 * *(_QWORD *)(a5 + 8);
          --a3;
        }
        while (a3);
      }
      if (__p)
      {
        v30 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a3, a5);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v32);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a3, a5);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A1778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a25);
  PCCFRef<vImageConverter *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_4>(PCToneMapMethod *a1, CGColorSpaceRef a2, CGColorSpace *a3, uint64_t a4, char **a5, uint64_t a6)
{
  CGColorSpace *v9;
  int v10;
  CGColorSpace *v11;
  _BOOL4 v12;
  char *v13;
  char *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  float Gain;
  float32x4_t v20;
  __int32 v21;
  uint64_t v23;
  unsigned int v24;
  int64x2_t v25;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  void *__p;
  void *v34;
  void *__dst;
  vImageConverterRef v36;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  float32x4_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a5[2], a2, *((_DWORD *)a5 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a3, *(CGColorSpaceRef *)(a6 + 16), 2, *(_DWORD *)(a6 + 24), (const void **)&v36);
    if (v36)
    {
      v9 = (CGColorSpace *)a5[2];
      v10 = !CGColorSpaceUsesExtendedRange(v9) && CGColorSpaceGetModel(v9) != kCGColorSpaceModelLab;
      v11 = *(CGColorSpace **)(a6 + 16);
      v12 = !CGColorSpaceUsesExtendedRange(v11) && CGColorSpaceGetModel(v11) != kCGColorSpaceModelLab;
      if (a4)
      {
        v24 = *(_DWORD *)(a6 + 24);
        v13 = *(char **)a6;
        v14 = *a5;
        v15 = 4 * (_QWORD)a5[1];
        v23 = *(_QWORD *)(a6 + 8);
        v25 = vdupq_n_s64(1uLL);
        do
        {
          v16 = v14;
          if (v32)
          {
            v17 = v29;
            v18 = v30;
            if (v30 * v29)
            {
              memmove(__dst, v14, 4 * v30 * v29);
              v17 = v29;
              v18 = v30;
            }
            clampComponents(v17, (float *)__dst, v18, v31);
            v16 = __dst;
          }
          *(int64x2_t *)&srcs.height = v25;
          srcs.data = v16;
          srcs.rowBytes = v15;
          dests.data = &v40;
          *(int64x2_t *)&dests.height = v25;
          dests.rowBytes = 16;
          vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          v28 = v40;
          Gain = PCToneMapMethod::getGain(a1);
          *(double *)v20.i64 = PCColorUtil::applyInverseToneMap_LinearGain(v28, Gain);
          v21 = v40.i32[3];
          v40 = v20;
          v40.i32[3] = v21;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v40;
          srcs.rowBytes = 16;
          dests.data = v13;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v23;
          vImageConvert_AnyToAny(v36, &srcs, &dests, 0, 0);
          if (v12)
            clampComponents(1, (float *)v13, v23, v24);
          v14 += 4 * (_QWORD)a5[1];
          v13 += 4 * *(_QWORD *)(a6 + 8);
          --a4;
        }
        while (a4);
      }
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a4, a6);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v36);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a4, a6);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A1AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27,const void *a28)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a27);
  PCCFRef<vImageConverter *>::~PCCFRef(&a28);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_5>(CGColorSpaceRef a1, CGColorSpace *a2, uint64_t a3, char **a4, uint64_t a5)
{
  CGColorSpace *v8;
  int v9;
  CGColorSpace *v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  vImage_Error v18;
  __n128 v19;
  unsigned __int32 v20;
  uint64_t v22;
  unsigned int v23;
  int64x2_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  void *__p;
  void *v31;
  void *__dst;
  vImageConverterRef v33;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  __n128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a4[2], a1, *((_DWORD *)a4 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a2, *(CGColorSpaceRef *)(a5 + 16), 2, *(_DWORD *)(a5 + 24), (const void **)&v33);
    if (v33)
    {
      v8 = (CGColorSpace *)a4[2];
      v9 = !CGColorSpaceUsesExtendedRange(v8) && CGColorSpaceGetModel(v8) != kCGColorSpaceModelLab;
      v10 = *(CGColorSpace **)(a5 + 16);
      v11 = !CGColorSpaceUsesExtendedRange(v10) && CGColorSpaceGetModel(v10) != kCGColorSpaceModelLab;
      if (a3)
      {
        v23 = *(_DWORD *)(a5 + 24);
        v12 = *(char **)a5;
        v13 = *a4;
        v14 = 4 * (_QWORD)a4[1];
        v22 = *(_QWORD *)(a5 + 8);
        v24 = vdupq_n_s64(1uLL);
        do
        {
          v15 = v13;
          if (v29)
          {
            v16 = v26;
            v17 = v27;
            if (v27 * v26)
            {
              memmove(__dst, v13, 4 * v27 * v26);
              v16 = v26;
              v17 = v27;
            }
            clampComponents(v16, (float *)__dst, v17, v28);
            v15 = __dst;
          }
          *(int64x2_t *)&srcs.height = v24;
          srcs.data = v15;
          srcs.rowBytes = v14;
          dests.data = &v37;
          *(int64x2_t *)&dests.height = v24;
          dests.rowBytes = 16;
          v18 = vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          v19.n128_f64[0] = PCColorUtil::applyInverseToneMap_OSFA(v18, v37);
          v20 = v37.n128_u32[3];
          v37 = v19;
          v37.n128_u32[3] = v20;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v37;
          srcs.rowBytes = 16;
          dests.data = v12;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v22;
          vImageConvert_AnyToAny(v33, &srcs, &dests, 0, 0);
          if (v11)
            clampComponents(1, (float *)v12, v22, v23);
          v13 += 4 * (_QWORD)a4[1];
          v12 += 4 * *(_QWORD *)(a5 + 8);
          --a3;
        }
        while (a3);
      }
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a3, a5);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v33);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a3, a5);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A1DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a25);
  PCCFRef<vImageConverter *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_6>(CGColorSpaceRef a1, CGColorSpace *a2, uint64_t a3, char **a4, uint64_t a5)
{
  CGColorSpace *v8;
  int v9;
  CGColorSpace *v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  __int32 v19;
  uint64_t v21;
  unsigned int v22;
  int64x2_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  void *__p;
  void *v30;
  void *__dst;
  vImageConverterRef v32;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  float32x4_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a4[2], a1, *((_DWORD *)a4 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a2, *(CGColorSpaceRef *)(a5 + 16), 2, *(_DWORD *)(a5 + 24), (const void **)&v32);
    if (v32)
    {
      v8 = (CGColorSpace *)a4[2];
      v9 = !CGColorSpaceUsesExtendedRange(v8) && CGColorSpaceGetModel(v8) != kCGColorSpaceModelLab;
      v10 = *(CGColorSpace **)(a5 + 16);
      v11 = !CGColorSpaceUsesExtendedRange(v10) && CGColorSpaceGetModel(v10) != kCGColorSpaceModelLab;
      if (a3)
      {
        v22 = *(_DWORD *)(a5 + 24);
        v12 = *(char **)a5;
        v13 = *a4;
        v14 = 4 * (_QWORD)a4[1];
        v21 = *(_QWORD *)(a5 + 8);
        v23 = vdupq_n_s64(1uLL);
        do
        {
          v15 = v13;
          if (v28)
          {
            v16 = v25;
            v17 = v26;
            if (v26 * v25)
            {
              memmove(__dst, v13, 4 * v26 * v25);
              v16 = v25;
              v17 = v26;
            }
            clampComponents(v16, (float *)__dst, v17, v27);
            v15 = __dst;
          }
          *(int64x2_t *)&srcs.height = v23;
          srcs.data = v15;
          srcs.rowBytes = v14;
          dests.data = &v36;
          *(int64x2_t *)&dests.height = v23;
          dests.rowBytes = 16;
          vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          *(double *)v18.i64 = PCColorUtil::applyToneMap_BT2446_A(v36);
          v19 = v36.i32[3];
          v36 = v18;
          v36.i32[3] = v19;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v36;
          srcs.rowBytes = 16;
          dests.data = v12;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v21;
          vImageConvert_AnyToAny(v32, &srcs, &dests, 0, 0);
          if (v11)
            clampComponents(1, (float *)v12, v21, v22);
          v13 += 4 * (_QWORD)a4[1];
          v12 += 4 * *(_QWORD *)(a5 + 8);
          --a3;
        }
        while (a3);
      }
      if (__p)
      {
        v30 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a3, a5);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v32);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a3, a5);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A20F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a25);
  PCCFRef<vImageConverter *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_7>(CGColorSpaceRef a1, CGColorSpace *a2, uint64_t a3, char **a4, uint64_t a5)
{
  CGColorSpace *v8;
  int v9;
  CGColorSpace *v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  vImage_Error v18;
  __n128 v19;
  unsigned __int32 v20;
  uint64_t v22;
  unsigned int v23;
  int64x2_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  void *__p;
  void *v31;
  void *__dst;
  vImageConverterRef v33;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  __n128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a4[2], a1, *((_DWORD *)a4 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a2, *(CGColorSpaceRef *)(a5 + 16), 2, *(_DWORD *)(a5 + 24), (const void **)&v33);
    if (v33)
    {
      v8 = (CGColorSpace *)a4[2];
      v9 = !CGColorSpaceUsesExtendedRange(v8) && CGColorSpaceGetModel(v8) != kCGColorSpaceModelLab;
      v10 = *(CGColorSpace **)(a5 + 16);
      v11 = !CGColorSpaceUsesExtendedRange(v10) && CGColorSpaceGetModel(v10) != kCGColorSpaceModelLab;
      if (a3)
      {
        v23 = *(_DWORD *)(a5 + 24);
        v12 = *(char **)a5;
        v13 = *a4;
        v14 = 4 * (_QWORD)a4[1];
        v22 = *(_QWORD *)(a5 + 8);
        v24 = vdupq_n_s64(1uLL);
        do
        {
          v15 = v13;
          if (v29)
          {
            v16 = v26;
            v17 = v27;
            if (v27 * v26)
            {
              memmove(__dst, v13, 4 * v27 * v26);
              v16 = v26;
              v17 = v27;
            }
            clampComponents(v16, (float *)__dst, v17, v28);
            v15 = __dst;
          }
          *(int64x2_t *)&srcs.height = v24;
          srcs.data = v15;
          srcs.rowBytes = v14;
          dests.data = &v37;
          *(int64x2_t *)&dests.height = v24;
          dests.rowBytes = 16;
          v18 = vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          v19.n128_f64[0] = PCColorUtil::applyToneMap_OS(v18, v37);
          v20 = v37.n128_u32[3];
          v37 = v19;
          v37.n128_u32[3] = v20;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v37;
          srcs.rowBytes = 16;
          dests.data = v12;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v22;
          vImageConvert_AnyToAny(v33, &srcs, &dests, 0, 0);
          if (v11)
            clampComponents(1, (float *)v12, v22, v23);
          v13 += 4 * (_QWORD)a4[1];
          v12 += 4 * *(_QWORD *)(a5 + 8);
          --a3;
        }
        while (a3);
      }
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a3, a5);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v33);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a3, a5);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A241C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a25);
  PCCFRef<vImageConverter *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_8>(CGColorSpaceRef a1, CGColorSpace *a2, uint64_t a3, char **a4, uint64_t a5)
{
  CGColorSpace *v8;
  int v9;
  CGColorSpace *v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  __int32 v19;
  uint64_t v21;
  unsigned int v22;
  int64x2_t v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  void *__p;
  void *v30;
  void *__dst;
  vImageConverterRef v32;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  float32x4_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a4[2], a1, *((_DWORD *)a4 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a2, *(CGColorSpaceRef *)(a5 + 16), 2, *(_DWORD *)(a5 + 24), (const void **)&v32);
    if (v32)
    {
      v8 = (CGColorSpace *)a4[2];
      v9 = !CGColorSpaceUsesExtendedRange(v8) && CGColorSpaceGetModel(v8) != kCGColorSpaceModelLab;
      v10 = *(CGColorSpace **)(a5 + 16);
      v11 = !CGColorSpaceUsesExtendedRange(v10) && CGColorSpaceGetModel(v10) != kCGColorSpaceModelLab;
      if (a3)
      {
        v22 = *(_DWORD *)(a5 + 24);
        v12 = *(char **)a5;
        v13 = *a4;
        v14 = 4 * (_QWORD)a4[1];
        v21 = *(_QWORD *)(a5 + 8);
        v23 = vdupq_n_s64(1uLL);
        do
        {
          v15 = v13;
          if (v28)
          {
            v16 = v25;
            v17 = v26;
            if (v26 * v25)
            {
              memmove(__dst, v13, 4 * v26 * v25);
              v16 = v25;
              v17 = v26;
            }
            clampComponents(v16, (float *)__dst, v17, v27);
            v15 = __dst;
          }
          *(int64x2_t *)&srcs.height = v23;
          srcs.data = v15;
          srcs.rowBytes = v14;
          dests.data = &v36;
          *(int64x2_t *)&dests.height = v23;
          dests.rowBytes = 16;
          vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          *(double *)v18.i64 = PCColorUtil::applyToneMap_HLGDiffuseWhite(v36);
          v19 = v36.i32[3];
          v36 = v18;
          v36.i32[3] = v19;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v36;
          srcs.rowBytes = 16;
          dests.data = v12;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v21;
          vImageConvert_AnyToAny(v32, &srcs, &dests, 0, 0);
          if (v11)
            clampComponents(1, (float *)v12, v21, v22);
          v13 += 4 * (_QWORD)a4[1];
          v12 += 4 * *(_QWORD *)(a5 + 8);
          --a3;
        }
        while (a3);
      }
      if (__p)
      {
        v30 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a3, a5);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v32);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a3, a5);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A2740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a25);
  PCCFRef<vImageConverter *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_9>(PCToneMapMethod *a1, CGColorSpaceRef a2, CGColorSpace *a3, uint64_t a4, char **a5, uint64_t a6)
{
  CGColorSpace *v9;
  int v10;
  CGColorSpace *v11;
  _BOOL4 v12;
  char *v13;
  char *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  float Gain;
  float32x4_t v20;
  __int32 v21;
  uint64_t v23;
  unsigned int v24;
  int64x2_t v25;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  char v32;
  void *__p;
  void *v34;
  void *__dst;
  vImageConverterRef v36;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  float32x4_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a5[2], a2, *((_DWORD *)a5 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a3, *(CGColorSpaceRef *)(a6 + 16), 2, *(_DWORD *)(a6 + 24), (const void **)&v36);
    if (v36)
    {
      v9 = (CGColorSpace *)a5[2];
      v10 = !CGColorSpaceUsesExtendedRange(v9) && CGColorSpaceGetModel(v9) != kCGColorSpaceModelLab;
      v11 = *(CGColorSpace **)(a6 + 16);
      v12 = !CGColorSpaceUsesExtendedRange(v11) && CGColorSpaceGetModel(v11) != kCGColorSpaceModelLab;
      if (a4)
      {
        v24 = *(_DWORD *)(a6 + 24);
        v13 = *(char **)a6;
        v14 = *a5;
        v15 = 4 * (_QWORD)a5[1];
        v23 = *(_QWORD *)(a6 + 8);
        v25 = vdupq_n_s64(1uLL);
        do
        {
          v16 = v14;
          if (v32)
          {
            v17 = v29;
            v18 = v30;
            if (v30 * v29)
            {
              memmove(__dst, v14, 4 * v30 * v29);
              v17 = v29;
              v18 = v30;
            }
            clampComponents(v17, (float *)__dst, v18, v31);
            v16 = __dst;
          }
          *(int64x2_t *)&srcs.height = v25;
          srcs.data = v16;
          srcs.rowBytes = v15;
          dests.data = &v40;
          *(int64x2_t *)&dests.height = v25;
          dests.rowBytes = 16;
          vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          v28 = v40;
          Gain = PCToneMapMethod::getGain(a1);
          *(double *)v20.i64 = PCColorUtil::applyToneMap_LinearGain(v28, Gain);
          v21 = v40.i32[3];
          v40 = v20;
          v40.i32[3] = v21;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v40;
          srcs.rowBytes = 16;
          dests.data = v13;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v23;
          vImageConvert_AnyToAny(v36, &srcs, &dests, 0, 0);
          if (v12)
            clampComponents(1, (float *)v13, v23, v24);
          v14 += 4 * (_QWORD)a5[1];
          v13 += 4 * *(_QWORD *)(a6 + 8);
          --a4;
        }
        while (a4);
      }
      if (__p)
      {
        v34 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a4, a6);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v36);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a4, a6);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A2A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,const void *a27,const void *a28)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a27);
  PCCFRef<vImageConverter *>::~PCCFRef(&a28);
  _Unwind_Resume(a1);
}

const void **doDynamicRangeTransform<PCColorUtil::transformColorWithDynamicRange(PCColorUtil::Buffer const&,PCColorUtil::Buffer&,PCToneMapMethod const&)::$_10>(CGColorSpaceRef a1, CGColorSpace *a2, uint64_t a3, char **a4, uint64_t a5)
{
  CGColorSpace *v8;
  int v9;
  CGColorSpace *v10;
  _BOOL4 v11;
  char *v12;
  char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  vImage_Error v18;
  __n128 v19;
  unsigned __int32 v20;
  uint64_t v22;
  unsigned int v23;
  int64x2_t v24;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  char v29;
  void *__p;
  void *v31;
  void *__dst;
  vImageConverterRef v33;
  vImageConverterRef converter;
  vImage_Buffer dests;
  vImage_Buffer srcs;
  __n128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  getCachedColorConverter((CGColorSpaceRef)a4[2], a1, *((_DWORD *)a4 + 6), 2, (const void **)&converter);
  if (converter)
  {
    getCachedColorConverter(a2, *(CGColorSpaceRef *)(a5 + 16), 2, *(_DWORD *)(a5 + 24), (const void **)&v33);
    if (v33)
    {
      v8 = (CGColorSpace *)a4[2];
      v9 = !CGColorSpaceUsesExtendedRange(v8) && CGColorSpaceGetModel(v8) != kCGColorSpaceModelLab;
      v10 = *(CGColorSpace **)(a5 + 16);
      v11 = !CGColorSpaceUsesExtendedRange(v10) && CGColorSpaceGetModel(v10) != kCGColorSpaceModelLab;
      if (a3)
      {
        v23 = *(_DWORD *)(a5 + 24);
        v12 = *(char **)a5;
        v13 = *a4;
        v14 = 4 * (_QWORD)a4[1];
        v22 = *(_QWORD *)(a5 + 8);
        v24 = vdupq_n_s64(1uLL);
        do
        {
          v15 = v13;
          if (v29)
          {
            v16 = v26;
            v17 = v27;
            if (v27 * v26)
            {
              memmove(__dst, v13, 4 * v27 * v26);
              v16 = v26;
              v17 = v27;
            }
            clampComponents(v16, (float *)__dst, v17, v28);
            v15 = __dst;
          }
          *(int64x2_t *)&srcs.height = v24;
          srcs.data = v15;
          srcs.rowBytes = v14;
          dests.data = &v37;
          *(int64x2_t *)&dests.height = v24;
          dests.rowBytes = 16;
          v18 = vImageConvert_AnyToAny(converter, &srcs, &dests, 0, 0);
          v19.n128_f64[0] = PCColorUtil::applyToneMap_OSFA(v18, v37);
          v20 = v37.n128_u32[3];
          v37 = v19;
          v37.n128_u32[3] = v20;
          *(int64x2_t *)&srcs.height = vdupq_n_s64(1uLL);
          srcs.data = &v37;
          srcs.rowBytes = 16;
          dests.data = v12;
          *(_OWORD *)&dests.height = *(_OWORD *)&srcs.height;
          dests.rowBytes = 4 * v22;
          vImageConvert_AnyToAny(v33, &srcs, &dests, 0, 0);
          if (v11)
            clampComponents(1, (float *)v12, v22, v23);
          v13 += 4 * (_QWORD)a4[1];
          v12 += 4 * *(_QWORD *)(a5 + 8);
          --a3;
        }
        while (a3);
      }
      if (__p)
      {
        v31 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
        62);
      writeOpaqueBlack(a3, a5);
    }
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)&v33);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"error; unable to create a converter; no conversion is applied\n",
      62);
    writeOpaqueBlack(a3, a5);
  }
  return PCCFRef<vImageConverter *>::~PCCFRef((const void **)&converter);
}

void sub_1B29A2D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,const void *a26)
{
  PCCFRef<vImageConverter *>::~PCCFRef(&a25);
  PCCFRef<vImageConverter *>::~PCCFRef(&a26);
  _Unwind_Resume(a1);
}

void writeOpaqueBlack(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;

  v2 = a1;
  v3 = *(_DWORD *)(a2 + 24);
  v5 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)a2 + 4 * (v3 == 1);
  if (v3 == 1)
  {
    if (v5)
    {
LABEL_5:
      if (a1)
      {
        v7 = 0;
        v8 = 4 * v4;
        v9 = 4 * v4 - 4;
        v10 = 4 * (((unint64_t)v9 >> 2) - (4 * v4 != 4)) + 4;
        do
        {
          if (v9 >= 1)
            bzero((void *)(v6 + v7), v10);
          *(_DWORD *)(v5 + v7) = 1065353216;
          v7 += v8;
          --v2;
        }
        while (v2);
      }
      return;
    }
  }
  else if (v3 == 2)
  {
    v5 = v5 + 4 * v4 - 4;
    goto LABEL_5;
  }
  v11 = v4 * a1;
  if (v11 >= 1)
    bzero((void *)(v5 + 4 * (v3 == 1)), 4 * (v11 - ((v11 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
}

float PCColorUtil::transform@<S0>(PCToneMapMethod *this@<X5>, uint64_t *a2@<X0>, uint64_t a3@<X1>, int a4@<W2>, uint64_t a5@<X3>, int a6@<W4>, uint64_t a7@<X8>)
{
  float result;
  _QWORD v9[4];
  int v10;
  int v11;
  _QWORD v12[4];
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = *a2;
  v18 = *((_DWORD *)a2 + 2);
  v19 = 1065353216;
  v12[0] = 1;
  v12[1] = &v17;
  v12[2] = 4;
  v12[3] = a3;
  v13 = 2;
  v14 = a4;
  v15 = 0;
  v16 = 0;
  v9[0] = 1;
  v9[1] = &v15;
  v9[2] = 4;
  v9[3] = a5;
  v10 = 2;
  v11 = a6;
  PCColorUtil::transformColorWithDynamicRange((uint64_t)v12, (uint64_t)v9, this);
  result = *(float *)&v16;
  *(_QWORD *)a7 = v15;
  *(float *)(a7 + 8) = result;
  return result;
}

CGColorSpace **getCachedColorConverter@<X0>(CGColorSpaceRef space@<X0>, CGColorSpaceRef a2@<X2>, int a3@<W1>, int a4@<W3>, const void **a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v13;
  CGColorSpace *v14;
  CGColorSpace *v15;
  CGColorSpace *v16;
  CGColorSpace *v17;

  {
    v13 = operator new();
    PCCachedFunctionImpl<PCCFRef<vImageConverter *>,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>::PCCachedFunctionImpl<PCCFRef<vImageConverter *> (*)(PCCFRef<CGColorSpace *> const&,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *> const&,PCColorUtil::AlphaFormat)>(v13, (uint64_t)createConverter, 100);
    getConverterCache(void)::cache = v13;
  }
  v11 = getConverterCache(void)::cache;
  if (space)
    PCCFRefTraits<CGColorSpace *>::retain(space);
  v17 = space;
  if (a2)
  {
    PCCFRefTraits<CGColorSpace *>::retain(a2);
    space = v17;
  }
  v15 = space;
  v16 = a2;
  if (space)
  {
    PCCFRefTraits<CGColorSpace *>::retain(space);
    a2 = v16;
  }
  v14 = a2;
  if (a2)
    PCCFRefTraits<CGColorSpace *>::retain(a2);
  PCCachedFunctionImpl<PCCFRef<vImageConverter *>,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>::operator()(v11, &v15, a3, &v14, a4, a5);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v14);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v15);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
}

void sub_1B29A30D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1020C404DE315E0);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ClampBuffer::ClampBuffer(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 20) = a5;
  *(_OWORD *)(a1 + 48) = 0u;
  v6 = (uint64_t *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  if (a5)
  {
    v7 = a3 * a2;
    if (v7 < 6)
    {
      v8 = a1 + 24;
    }
    else
    {
      std::vector<float>::resize(a1 + 48, v7);
      v8 = *v6;
    }
    *(_QWORD *)(a1 + 72) = v8;
  }
  return a1;
}

void sub_1B29A31B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

vImage_Error dovImageTransform(vImagePixelCount a1, vImageConverterRef converter, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  vImage_Buffer v7;
  vImage_Buffer srcs;

  v4 = *(_QWORD *)(a3 + 8);
  srcs.data = *(void **)a3;
  srcs.height = 1;
  srcs.width = a1;
  srcs.rowBytes = v4 * 4 * a1;
  v5 = *(_QWORD *)(a4 + 8);
  v7.data = *(void **)a4;
  v7.height = 1;
  v7.width = a1;
  v7.rowBytes = v5 * 4 * a1;
  return vImageConvert_AnyToAny(converter, &srcs, &v7, 0, 0);
}

uint64_t clampComponents(uint64_t result, float *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  float *v6;
  uint64_t i;
  float v8;
  float v9;
  float v10;
  uint64_t j;
  float v12;
  float v13;

  if (a4)
  {
    if (result)
    {
      v4 = 0;
      v5 = a3 - (a4 < 3);
      v6 = &a2[a4 == 1];
      do
      {
        if (v5)
        {
          for (i = 0; i != v5; ++i)
          {
            v8 = v6[i];
            if (v8 <= 1.0)
              v9 = v6[i];
            else
              v9 = 1.0;
            if (v8 >= 0.0)
              v10 = v9;
            else
              v10 = 0.0;
            v6[i] = v10;
          }
        }
        ++v4;
        v6 += a3;
      }
      while (v4 != result);
    }
  }
  else
  {
    for (j = a3 * result; j; --j)
    {
      if (*a2 <= 1.0)
        v12 = *a2;
      else
        v12 = 1.0;
      if (*a2 >= 0.0)
        v13 = v12;
      else
        v13 = 0.0;
      *a2++ = v13;
    }
  }
  return result;
}

void PCCachedFunctionImpl<PCCFRef<vImageConverter *>,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>::operator()(uint64_t a1@<X0>, CGColorSpace **a2@<X1>, int a3@<W2>, CGColorSpace **a4@<X3>, int a5@<W4>, const void **a6@<X8>)
{
  os_unfair_lock_s *v10;
  CGColorSpace *v11;
  int v12;
  CGColorSpace *v13;
  const void *v14;
  const void *v15;
  CGColorSpace *v16;
  CGColorSpace *v17;
  const void *v18;
  char v19;
  CGColorSpace *v20[2];
  CGColorSpace *v21[3];
  int v22;
  int v23;

  v22 = a5;
  v23 = a3;
  v10 = (os_unfair_lock_s *)(a1 + 32);
  v21[2] = (CGColorSpace *)(a1 + 32);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 32));
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJ7PCCFRefIP12CGColorSpaceEN11PCColorUtil11AlphaFormatES6_S8_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS6_S8_S6_S8_EJEJEJKS6_KS8_SB_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_((uint64_t)v20, a2, &v23, a4, &v22);
  v19 = 0;
  PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::findValue(*(_QWORD **)(a1 + 40), (uint64_t)v20, &v19, a6);
  if (!v19)
  {
    v11 = *a2;
    v17 = v11;
    if (v11)
      PCCFRefTraits<CGColorSpace *>::retain(v11);
    v12 = v23;
    v13 = *a4;
    v16 = v13;
    if (v13)
      PCCFRefTraits<CGColorSpace *>::retain(v13);
    std::function<PCCFRef<vImageConverter *> ()(PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat)>::operator()(a1, (uint64_t)&v17, v12, (uint64_t)&v16, v22);
    v14 = *a6;
    v15 = v18;
    if (*a6 && v14 != v18)
    {
      PCCFRefTraits<vImageConverter *>::release(v14);
      v15 = v18;
    }
    *a6 = v15;
    v18 = 0;
    PCCFRef<vImageConverter *>::~PCCFRef(&v18);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v16);
    PCCFRef<CGColorSpace *>::~PCCFRef(&v17);
    PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::addValue(*(uint64_t **)(a1 + 40), (uint64_t)v20, a6, 0);
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v21);
  PCCFRef<CGColorSpace *>::~PCCFRef(v20);
  PCSpinLock::unlock(v10);
}

void sub_1B29A340C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9, CGColorSpace *a10, const void *a11, uint64_t a12, CGColorSpace *a13, uint64_t a14, CGColorSpace *a15, uint64_t a16, os_unfair_lock_s *a17)
{
  const void **v17;

  PCCFRef<vImageConverter *>::~PCCFRef(&a11);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a9);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a10);
  PCCFRef<vImageConverter *>::~PCCFRef(v17);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a15);
  PCCFRef<CGColorSpace *>::~PCCFRef(&a13);
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a17);
  _Unwind_Resume(a1);
}

uint64_t PCCachedFunctionImpl<PCCFRef<vImageConverter *>,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>::PCCachedFunctionImpl<PCCFRef<vImageConverter *> (*)(PCCFRef<CGColorSpace *> const&,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *> const&,PCColorUtil::AlphaFormat)>(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = 0;
  if (a2)
  {
    *(_QWORD *)a1 = &unk_1E6512AF0;
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 24) = a1;
  }
  *(_DWORD *)(a1 + 32) = 0;
  v5 = operator new();
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  *(_QWORD *)(v5 + 24) = v5 + 32;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = -1;
  *(_QWORD *)(v5 + 96) = a3;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

void sub_1B29A351C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSpinLock *v2;
  _QWORD *v4;
  uint64_t v5;

  PCSpinLock::~PCSpinLock(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

void std::__function::__func<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat),std::allocator<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat)>,PCCFRef<vImageConverter *> ()(CGColorSpace,PCColorUtil::AlphaFormat,CGColorSpace,PCColorUtil::AlphaFormat)>::~__func()
{
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::__function::__func<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat),std::allocator<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat)>,PCCFRef<vImageConverter *> ()(CGColorSpace,PCColorUtil::AlphaFormat,CGColorSpace,PCColorUtil::AlphaFormat)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E6512AF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat),std::allocator<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat)>,PCCFRef<vImageConverter *> ()(CGColorSpace,PCColorUtil::AlphaFormat,CGColorSpace,PCColorUtil::AlphaFormat)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E6512AF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat),std::allocator<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat)>,PCCFRef<vImageConverter *> ()(CGColorSpace,PCColorUtil::AlphaFormat,CGColorSpace,PCColorUtil::AlphaFormat)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, unsigned int *a5)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD))(a1 + 8))(a2, *a3, a4, *a5);
}

uint64_t std::__function::__func<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat),std::allocator<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat)>,PCCFRef<vImageConverter *> ()(CGColorSpace,PCColorUtil::AlphaFormat,CGColorSpace,PCColorUtil::AlphaFormat)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat),std::allocator<PCCFRef<vImageConverter *> (*)(PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef const&<CGColorSpace *>,PCColorUtil::AlphaFormat)>,PCCFRef<vImageConverter *> ()(CGColorSpace,PCColorUtil::AlphaFormat,CGColorSpace,PCColorUtil::AlphaFormat)>::target_type()
{
}

uint64_t std::function<PCCFRef<vImageConverter *> ()(PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat)>::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t v5;
  int v7;
  int v8;

  v8 = a3;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, int *, uint64_t, int *))(*(_QWORD *)v5 + 48))(v5, a2, &v8, a4, &v7);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3EEEEJ7PCCFRefIP12CGColorSpaceEN11PCColorUtil11AlphaFormatES6_S8_EEC2B8ne180100IJLm0ELm1ELm2ELm3EEJS6_S8_S6_S8_EJEJEJKS6_KS8_SB_SC_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(uint64_t a1, CGColorSpace **a2, _DWORD *a3, CGColorSpace **a4, _DWORD *a5)
{
  CGColorSpace *v9;
  CGColorSpace *v10;

  v9 = *a2;
  *(_QWORD *)a1 = *a2;
  if (v9)
    PCCFRefTraits<CGColorSpace *>::retain(v9);
  *(_DWORD *)(a1 + 8) = *a3;
  v10 = *a4;
  *(_QWORD *)(a1 + 16) = *a4;
  if (v10)
    PCCFRefTraits<CGColorSpace *>::retain(v10);
  *(_DWORD *)(a1 + 24) = *a5;
  return a1;
}

void sub_1B29A36DC(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

_QWORD *PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::findValue@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v8;
  const void *v9;
  uint64_t v10;
  _QWORD *v11;

  result = std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::find<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>((uint64_t)(a1 + 3), a2);
  v11 = result;
  if (a1 + 4 == result)
  {
    *a3 = 0;
    *a4 = 0;
  }
  else
  {
    v8 = result;
    v9 = (const void *)result[8];
    *a4 = v9;
    if (v9)
      PCCFRefTraits<vImageConverter *>::retain(v9);
    v10 = a1[9] + 1;
    a1[9] = v10;
    v8[10] = v10;
    result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *> *,long>>>::bubble(a1 + 6, (uint64_t)&v11);
    *a3 = 1;
  }
  return result;
}

void sub_1B29A3780(_Unwind_Exception *a1)
{
  const void **v1;

  PCCFRef<vImageConverter *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::find<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _BOOL4 v6;
  _QWORD *v7;
  char v9;
  char v10;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>((uint64_t)&v9, (uint64_t)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>((uint64_t)&v10, a2, (uint64_t)(v5 + 4)))
  {
    return v2;
  }
  return v5;
}

BOOL std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;

  if (*(_QWORD *)a2 < *(_QWORD *)a3)
    return 1;
  if (*(_QWORD *)a3 < *(_QWORD *)a2)
    return 0;
  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a3 + 8);
  if (v3 < v4)
    return 1;
  if (v4 < v3)
    return 0;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a3 + 16);
  if (v5 < v6)
    return 1;
  return v6 >= v5 && *(_DWORD *)(a2 + 24) < *(_DWORD *)(a3 + 24);
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *result;
  v3 = result[1] - *result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      v17 = *(_QWORD *)(v2 + 8 * v4);
      do
      {
        v18 = v4 - 1;
        v19 = (v4 - 1) >> 1;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        if (*(_QWORD *)(v20 + 80) <= *(_QWORD *)(v17 + 80))
          break;
        *(_QWORD *)(v2 + 8 * v4) = v20;
        *(_QWORD *)(v2 + 8 * v19) = v17;
        v2 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 88) = v4;
        v17 = *(_QWORD *)(v2 + 8 * v19);
        *(_QWORD *)(v17 + 88) = v19;
        v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  v6 = 0;
  v7 = v3 >> 3;
  v8 = 2 * v4;
  v9 = *(_QWORD *)(v2 + 8 * v4);
  while (1)
  {
    v10 = v8 + 2;
    v11 = *(_QWORD *)(v9 + 80);
    v12 = v10 < v7 && v11 > *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 80);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 80);
    if (v11 <= v13 && !v12)
      break;
    v15 = v11 > v13 && v12;
    if (v12)
      v16 = v10;
    else
      v16 = v5;
    if (v15)
    {
      if (v13 <= *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 80))
        v16 = v5;
      else
        v16 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4) = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v2 + 8 * v16) = v9;
    v2 = *result;
    *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 88) = v4;
    v9 = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v9 + 88) = v16;
    v8 = 2 * v16;
    v6 = 1;
    v5 = (2 * v16) | 1;
    v4 = v16;
    if (v5 >= v7)
      return result;
  }
  if ((v6 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 88);
    goto LABEL_24;
  }
  return result;
}

uint64_t *PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::addValue(uint64_t *result, uint64_t a2, const void **a3, unint64_t a4)
{
  uint64_t *v7;
  const void **v8;
  const void **v9;
  uint64_t v10;
  const void **v11;
  char *v12;
  char *v13;
  CGColorSpace *v14;
  CGColorSpace **v15;
  const void *v16;
  const void *v17;
  unsigned __int8 v18;
  CGColorSpace *v19;
  CGColorSpace **v20;
  CGColorSpace *v21[2];
  CGColorSpace *v22;
  const void *v23;
  uint64_t v24[2];
  const void *v25[4];
  const void **v26;

  v7 = result;
  if (result[11] >= a4 || result[13])
  {
    v8 = (const void **)std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::find<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>((uint64_t)(result + 3), a2);
    v26 = v8;
    if (v7 + 4 == (uint64_t *)v8)
    {
      v16 = (const void *)(v7[9] + 1);
      v7[9] = (uint64_t)v16;
      v17 = *a3;
      v25[0] = v17;
      if (v17)
        PCCFRefTraits<vImageConverter *>::retain(v17);
      v25[1] = (const void *)a4;
      v25[2] = v16;
      v25[3] = 0;
      std::pair<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat> const,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>::pair[abi:ne180100]<true,0>((uint64_t)v21, a2, (uint64_t)v25);
      v24[0] = (uint64_t)std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::__emplace_unique_key_args<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::pair<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat> const,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>((uint64_t **)v7 + 3, (uint64_t)v21, (uint64_t)v21);
      v24[1] = v18;
      PCCFRef<vImageConverter *>::~PCCFRef(&v23);
      PCCFRef<CGColorSpace *>::~PCCFRef(&v22);
      PCCFRef<CGColorSpace *>::~PCCFRef(v21);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *> *,long>>>::add((void **)v7 + 6, v24);
      v7[10] += a4;
      if (!v7[13])
      {
        while (v7[10] > (unint64_t)v7[11] || v7[5] > (unint64_t)v7[12])
        {
          v20 = (CGColorSpace **)v7[6];
          if (v20 == (CGColorSpace **)v7[7])
            break;
          v21[0] = *v20;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *> *,long>>>::remove(v7 + 6, (uint64_t)v21);
          v19 = v21[0];
          v7[10] -= *((_QWORD *)v21[0] + 9);
          std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::erase((uint64_t **)v7 + 3, (uint64_t)v19);
        }
      }
      return (uint64_t *)PCCFRef<vImageConverter *>::~PCCFRef(v25);
    }
    else
    {
      v9 = v8;
      PCCFRef<vImageConverter *>::operator=(v8 + 8, a3);
      v10 = v7[9] + 1;
      v7[9] = v10;
      v9[10] = (const void *)v10;
      result = PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *> *,long>>>::bubble(v7 + 6, (uint64_t)&v26);
      v11 = v26;
      v12 = (char *)(a4 - (_QWORD)v26[9]);
      if (v12)
      {
        v13 = &v12[v7[10]];
        v7[10] = (uint64_t)v13;
        v11[9] = (const void *)a4;
        if (!v7[13])
        {
          while ((unint64_t)v13 > v7[11] || v7[5] > (unint64_t)v7[12])
          {
            v15 = (CGColorSpace **)v7[6];
            if (v15 == (CGColorSpace **)v7[7])
              break;
            v21[0] = *v15;
            PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *> *,long>>>::remove(v7 + 6, (uint64_t)v21);
            v14 = v21[0];
            v7[10] -= *((_QWORD *)v21[0] + 9);
            result = std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::erase((uint64_t **)v7 + 3, (uint64_t)v14);
            v13 = (char *)v7[10];
          }
        }
      }
    }
  }
  return result;
}

void sub_1B29A3BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  PCCFRef<vImageConverter *>::~PCCFRef((const void **)va);
  _Unwind_Resume(a1);
}

CGColorSpace **std::pair<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat> const,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>::~pair(uint64_t a1)
{
  PCCFRef<vImageConverter *>::~PCCFRef((const void **)(a1 + 32));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a1 + 16));
  return PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (char *)*a1;
  v5 = a1[1];
  v6 = ((char *)v5 - (_BYTE *)*a1) >> 3;
  v7 = *a2;
  *(_QWORD *)(*a2 + 88) = v6;
  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1))
      v13 = v6 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      v7 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v6];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v7;
    v11 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = v7;
    v11 = v5 + 1;
  }
  a1[1] = v11;
  v21 = *(_QWORD *)(*a2 + 88);
  if (v21)
  {
    v22 = (char *)*a1;
    v23 = *((_QWORD *)*a1 + v21);
    do
    {
      v24 = v21 - 1;
      v25 = (v21 - 1) >> 1;
      v26 = *(_QWORD *)&v22[8 * v25];
      if (*(_QWORD *)(v26 + 80) <= *(_QWORD *)(v23 + 80))
        break;
      *(_QWORD *)&v22[8 * v21] = v26;
      *(_QWORD *)&v22[8 * v25] = v23;
      v22 = (char *)*a1;
      *(_QWORD *)(*((_QWORD *)*a1 + v21) + 88) = v21;
      v23 = *(_QWORD *)&v22[8 * v25];
      *(_QWORD *)(v23 + 88) = v25;
      v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

const void **PCCFRef<vImageConverter *>::operator=(const void **a1, const void **a2)
{
  const void *v3;
  const void *v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 != *a2)
  {
    if (v3)
    {
      PCCFRefTraits<vImageConverter *>::release(v3);
      v4 = *a2;
    }
    *a1 = v4;
    if (*a2)
      PCCFRefTraits<vImageConverter *>::retain(v4);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::__emplace_unique_key_args<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::pair<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat> const,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::__find_equal<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::__construct_node<std::pair<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat> const,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::__find_equal<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  char v10;
  char v11;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>((uint64_t)&v10, a3, (uint64_t)(v4 + 4)))break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!std::__tuple_less<4ul>::operator()[abi:ne180100]<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>((uint64_t)&v11, v8, a3))break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::__construct_node<std::pair<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat> const,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x60uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat> const,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B29A3F3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat> const,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  const void *v4;
  __int128 v5;

  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>::__tuple_impl(a1, a2);
  v4 = *(const void **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    PCCFRefTraits<vImageConverter *>::retain(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  return a1;
}

void sub_1B29A3FA0(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1 + 2);
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  CGColorSpace *v4;
  CGColorSpace *v5;

  v4 = *(CGColorSpace **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  if (v4)
    PCCFRefTraits<CGColorSpace *>::retain(v4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = *(CGColorSpace **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
    PCCFRefTraits<CGColorSpace *>::retain(v5);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

void sub_1B29A4010(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    PCCFRef<vImageConverter *>::~PCCFRef((const void **)__p + 8);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)__p + 6);
    PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)__p + 4);
  }
  if (__p)
    operator delete(__p);
}

uint64_t std::pair<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat> const,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>::pair[abi:ne180100]<true,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  __int128 v6;

  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>::__tuple_impl(a1, a2);
  v5 = *(const void **)a3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)a3;
  if (v5)
    PCCFRefTraits<vImageConverter *>::retain(v5);
  v6 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 40) = v6;
  return a1;
}

void sub_1B29A40C0(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1 + 2);
  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 88);
  v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(_QWORD *)(*a1 + 8 * v3) = *(_QWORD *)(*a1 + 8 * v4);
    *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 88) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__tree_node<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,void *> *,long>>>::bubble(a1, *a1 + 8 * v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::__map_value_compare<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>,true>,std::allocator<std::__value_type<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCacheImpl<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>,PCCFRef<vImageConverter *>,PCNoLock,std::less<std::tuple<PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat,PCCFRef<CGColorSpace *>,PCColorUtil::AlphaFormat>>>::Data>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  PCCFRef<vImageConverter *>::~PCCFRef((const void **)(a2 + 64));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a2 + 48));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

const void **PCCFRef<vImageConverter *>::~PCCFRef(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    PCCFRefTraits<vImageConverter *>::release(v2);
  return a1;
}

float64_t getScaleTranslate(float64x2_t *a1, uint64_t a2, float64x2_t *a3)
{
  float64x2_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v9 = 0uLL;
  v10 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v11 = _Q0;
  v12 = 0x3FF0000000000000;
  return getScaleTranslate(a1, &v9, (double *)&v11, a2, a3);
}

float64_t getScaleTranslate(float64x2_t *a1, float64x2_t *a2, double *a3, uint64_t a4, float64x2_t *a5)
{
  float64_t result;

  getScale(a1, a2->f64, a3, a4, 0);
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2->f64, a5->f64);
  *a5 = vsubq_f64(*a5, *a2);
  result = a5[1].f64[0] - a2[1].f64[0];
  a5[1].f64[0] = result;
  return result;
}

void getScale(float64x2_t *a1, double *a2, double *a3, uint64_t a4, int a5)
{
  uint64_t i;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _BYTE v15[128];
  __int128 v16;
  __int128 v17;

  v16 = 0u;
  v17 = 0u;
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2, (double *)&v16);
  PCMatrix44Tmpl<double>::jacobianPost(a1, (double *)&v16, (uint64_t)v15);
  for (i = 0; i != 24; i += 8)
  {
    v10 = *(double *)&v15[i + 32];
    v11 = *(double *)&v15[i + 64];
    v12 = a3[1];
    v13 = *(double *)&v15[i] * *a3;
    *(_QWORD *)&v16 = *(_QWORD *)&v15[i];
    *((double *)&v16 + 1) = v10;
    *(double *)&v17 = v11;
    v14 = sqrt(v13 * v13 + v10 * v12 * (v10 * v12) + v11 * a3[2] * (v11 * a3[2]));
    *(double *)(a4 + i) = v14;
    if (a5)
    {
      if (*(double *)((char *)&v16 + i) < 0.0)
        *(double *)(a4 + i) = -v14;
    }
  }
}

float64_t getScaleTranslateFlip(float64x2_t *a1, uint64_t a2, float64x2_t *a3)
{
  float64x2_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v9 = 0uLL;
  v10 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v11 = _Q0;
  v12 = 0x3FF0000000000000;
  return getScaleTranslateFlip(a1, &v9, (double *)&v11, a2, a3);
}

float64_t getScaleTranslateFlip(float64x2_t *a1, float64x2_t *a2, double *a3, uint64_t a4, float64x2_t *a5)
{
  float64_t result;

  getScale(a1, a2->f64, a3, a4, 1);
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2->f64, a5->f64);
  *a5 = vsubq_f64(*a5, *a2);
  result = a5[1].f64[0] - a2[1].f64[0];
  a5[1].f64[0] = result;
  return result;
}

__n128 getScale(float64x2_t *a1, uint64_t a2)
{
  __n128 result;
  double v8[3];
  __int128 v9;
  uint64_t v10;

  memset(v8, 0, sizeof(v8));
  __asm { FMOV            V0.2D, #1.0 }
  v9 = _Q0;
  v10 = 0x3FF0000000000000;
  getScale(a1, v8, (double *)&v9, a2, 0);
  return result;
}

__n128 getScale(float64x2_t *a1, double *a2, uint64_t a3)
{
  __n128 result;
  __int128 v9;
  uint64_t v10;

  __asm { FMOV            V0.2D, #1.0 }
  v9 = _Q0;
  v10 = 0x3FF0000000000000;
  getScale(a1, a2, (double *)&v9, a3, 0);
  return result;
}

float64_t getScaleTranslateRotate(float64x2_t *a1, uint64_t a2, float64x2_t *a3, long double *a4)
{
  float64x2_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  v10 = 0uLL;
  v11 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v12 = _Q0;
  v13 = 0x3FF0000000000000;
  return getScaleTranslateRotate(a1, &v10, (double *)&v12, a2, a3, a4);
}

float64_t getScaleTranslateRotate(float64x2_t *a1, float64x2_t *a2, double *a3, uint64_t a4, float64x2_t *a5, long double *a6)
{
  uint64_t i;
  double v13;
  double v14;
  double v15;
  long double v16;
  float64_t result;
  _QWORD v18[4];
  double v19;
  double v20;
  _BYTE v21[64];
  _OWORD v22[2];

  memset(v22, 0, sizeof(v22));
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2->f64, (double *)v22);
  PCMatrix44Tmpl<double>::jacobianPost(a1, (double *)v22, (uint64_t)v18);
  for (i = 0; i != 3; ++i)
  {
    v13 = *(double *)&v18[i + 4] * a3[1];
    v14 = *(double *)&v21[i * 8] * a3[2];
    *(double *)(a4 + i * 8) = sqrt(*(double *)&v18[i] * *a3 * (*(double *)&v18[i] * *a3) + v13 * v13 + v14 * v14);
  }
  v16 = *(double *)v18;
  v15 = *(double *)&v18[1];
  if (v16 * v16 + v15 * v15 <= v19 * v19 + v20 * v20)
  {
    v15 = -v19;
    v16 = v20;
  }
  *a6 = atan2(v15, v16);
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2->f64, a5->f64);
  *a5 = vsubq_f64(*a5, *a2);
  result = a5[1].f64[0] - a2[1].f64[0];
  a5[1].f64[0] = result;
  return result;
}

float64x2_t perspectiveToAffine(float64x2_t *a1, double *a2, double *a3)
{
  uint64_t i;
  double *v7;
  __int128 v8;
  float64x2_t v9;
  float64x2_t result;
  uint64_t j;
  double *v12;
  __int128 v13;
  __int128 v14;
  double v15[14];
  double v16[6];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];

  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v16[5] = 1.0;
  v16[0] = 1.0;
  memset(&v16[1], 0, 32);
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v21 = 0u;
  memset(v23, 0, sizeof(v23));
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2, (double *)v23);
  PCMatrix44Tmpl<double>::jacobianPost(a1, (double *)v23, (uint64_t)&v14);
  for (i = 0; i != 16; i += 4)
  {
    v7 = &v16[i];
    v8 = *(__int128 *)&v15[i];
    *(_OWORD *)v7 = *(__int128 *)&v15[i - 2];
    *((_OWORD *)v7 + 1) = v8;
  }
  v14 = 0u;
  *(_OWORD *)v15 = 0u;
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2, (double *)&v14);
  PCMatrix44Tmpl<double>::jacobianPost(a1, (double *)&v14, (uint64_t)v16);
  v14 = 0uLL;
  v15[0] = 0.0;
  PCMatrix44Tmpl<double>::transform<double>(a1->f64, a2, (double *)&v14);
  PCMatrix44Tmpl<double>::rightTranslate(v16, -*a2, -a2[1], -a2[2]);
  *(_QWORD *)&v9.f64[0] = v14;
  *(_QWORD *)&result.f64[0] = *(_OWORD *)&PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)v16, v9, *((double *)&v14 + 1), v15[0]);
  if (v16 != a3)
  {
    for (j = 0; j != 16; j += 4)
    {
      v12 = &a3[j];
      result = *(float64x2_t *)&v16[j];
      v13 = *(_OWORD *)&v16[j + 2];
      *(float64x2_t *)v12 = result;
      *((_OWORD *)v12 + 1) = v13;
    }
  }
  return result;
}

uint64_t pointInPolygon(double *a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  char v5;
  double v6;
  double *v7;
  double v8;
  double v9;
  BOOL v10;
  BOOL v11;

  v3 = a3 - 1;
  if (a3 < 1)
  {
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = a1[1];
    v7 = (double *)(a2 + 8);
    do
    {
      v8 = *v7;
      v9 = *(double *)(a2 + 16 * v3 + 8);
      v10 = *v7 <= v6 && v6 < v9;
      if (v10 || (v6 < v8 ? (v11 = v9 > v6) : (v11 = 1), !v11))
      {
        if (*a1 < *(v7 - 1) + (v6 - v8) * (*(double *)(a2 + 16 * v3) - *(v7 - 1)) / (v9 - v8))
          v5 ^= 1u;
      }
      v3 = v4;
      v7 += 2;
      ++v4;
    }
    while (a3 != v4);
  }
  return v5 & 1;
}

BOOL PCVector3<double>::normalize(double *a1, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  _BOOL8 v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = sqrt(v2 * v2 + v3 * v3 + v4 * v4);
  v6 = v5 >= a2 || v5 <= -a2;
  if (v6)
  {
    *a1 = v2 / v5;
    a1[1] = v3 / v5;
    a1[2] = v4 / v5;
  }
  return v6;
}

double PCCalcRaySphereIntersection<double>(double *a1, double *a2, double *a3, double *a4, double a5)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double result;

  v5 = *a1;
  v6 = a1[1];
  v7 = a3[1];
  v8 = *a1 - *a3;
  v9 = a1[2];
  v10 = a3[2];
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[2];
  v14 = v8 * *a2 + (v6 - v7) * v12 + (v9 - v10) * v13;
  v15 = a5 * a5 - (v8 * v8 + (v6 - v7) * (v6 - v7) + (v9 - v10) * (v9 - v10)) + v14 * v14;
  if (v15 < 0.0)
    v16 = (*a3 - v5) * v11 + (v7 - v6) * v12 + (v10 - v9) * v13;
  else
    v16 = -v14 - sqrt(v15);
  result = v9 + v13 * v16;
  *a4 = v5 + v11 * v16;
  a4[1] = v6 + v12 * v16;
  a4[2] = result;
  return result;
}

double PCIntersectRayWithPlane(double *a1, double *a2, double *a3)
{
  return PCPlane<double>::intersect(a2, a1, a3);
}

BOOL PCRayIntersectsBox(double *a1, double *a2, double *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  int v11;
  BOOL v12;
  double v13;
  unint64_t v16;
  double *v17;
  int v18;
  BOOL v19;
  double v20;
  BOOL v21;
  double v22;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  double v37;
  double v38;
  double v39;
  __int128 v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  __int128 v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  v10 = a2[5];
  if (vabdd_f64(v9, v10) >= 0.0000001)
  {
    v16 = 0;
    v25 = a2[1];
    v26 = v8;
    v27 = v10;
    v28 = 0;
    v29 = 0;
    v30 = 0x3FF0000000000000;
    v31 = v5;
    v32 = v7;
    v33 = v9;
    v34 = 0;
    v35 = 0;
    v36 = 0xBFF0000000000000;
    v37 = v6;
    v38 = v8;
    v39 = v10;
    v40 = xmmword_1B304EEE0;
    v41 = 0;
    v42 = v5;
    v43 = v7;
    v44 = v9;
    v45 = xmmword_1B305A270;
    v46 = 0;
    v47 = v5;
    v48 = v7;
    v49 = v9;
    v51 = 0;
    v52 = 0;
    v50 = 0xBFF0000000000000;
    v53 = v6;
    v54 = v8;
    v55 = v10;
    v57 = 0;
    v58 = 0;
    v12 = 1;
    v17 = &v25;
    v56 = 0x3FF0000000000000;
    do
    {
      PCPlane<double>::intersect(v17, a1, a3);
      if (v18)
      {
        if (v17[3] != 0.0 || (*a3 >= v5 ? (v19 = *a3 > v6) : (v19 = 1), !v19))
        {
          if (v17[4] != 0.0 || ((v20 = a3[1], v20 >= v7) ? (v21 = v20 > v8) : (v21 = 1), !v21))
          {
            if (v17[5] != 0.0)
              break;
            v22 = a3[2];
            if (v22 >= v9 && v22 <= v10)
              break;
          }
        }
      }
      v12 = v16 < 5;
      v17 += 6;
      ++v16;
    }
    while (v16 != 6);
  }
  else
  {
    v25 = *a2;
    v26 = v7;
    v27 = v9;
    v28 = 0;
    v29 = 0;
    v30 = 0xBFF0000000000000;
    PCPlane<double>::intersect(&v25, a1, a3);
    if (!v11)
      return 0;
    v12 = 0;
    if (v6 - v5 >= 0.0 && v8 - v7 >= 0.0)
    {
      v13 = a3[1];
      if (v5 <= *a3 && v5 + v6 - v5 >= *a3 && v7 <= v13)
        return v7 + v8 - v7 >= v13;
      return 0;
    }
  }
  return v12;
}

double PCPlane<double>::intersect(double *a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double result;
  double v15;
  double v16;

  v4 = a1[3];
  v3 = a1[4];
  v5 = a1[5];
  v6 = sqrt(v4 * v4 + v3 * v3 + v5 * v5);
  if (v6 <= -0.000000100000001 || v6 >= 0.000000100000001)
  {
    v4 = v4 / v6;
    v3 = v3 / v6;
    v5 = v5 / v6;
  }
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v10 = v4 * (*a1 - *a2) + v3 * (a1[1] - v7) + v5 * (a1[2] - v8);
  v11 = v4 * v9;
  v12 = a2[4];
  v13 = a2[5];
  result = v10 / (v11 + v3 * v12 + v5 * v13);
  if ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v15 = *a2 + v9 * result;
    v16 = v7 + result * v12;
    result = v8 + result * v13;
    *a3 = v15;
    a3[1] = v16;
    a3[2] = result;
  }
  return result;
}

BOOL PCClipPointToPlane(uint64_t a1, uint64_t a2)
{
  float64x2_t v2;

  v2 = vmulq_f64(vsubq_f64(*(float64x2_t *)(a2 + 8), *(float64x2_t *)(a1 + 8)), *(float64x2_t *)(a1 + 32));
  return (*(double *)a2 - *(double *)a1) * *(double *)(a1 + 24) + v2.f64[0] + v2.f64[1] > 0.0;
}

double PCClipLineToPlane2D@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X8>)
{
  double result;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  v27 = 0u;
  v28 = 0u;
  v26 = 0u;
  v24 = 0;
  v25 = 0x3FF0000000000000;
  v22 = 0u;
  v23 = 0u;
  planeIntersection<double>(a1, a1 + 3, (double *)&v22, (double *)&v23 + 1, (double *)&v26, (double *)&v27 + 1);
  v8 = *((double *)&v26 + 1);
  result = *(double *)&v26;
  v9 = *((double *)&v27 + 1);
  v10 = *(double *)&v28;
  *a4 = 0.0;
  a4[1] = 0.0;
  v11 = result + v9 - result;
  v12 = v8 + v10 - v8;
  v13 = a2[1];
  v14 = *a3 - *a2;
  v15 = a3[1] - v13;
  v16 = v12 * v14 - v11 * v15;
  if (v16 != 0.0)
  {
    v17 = result - *a2;
    v18 = v8 - v13;
    v19 = (v12 * v17 - v11 * v18) / v16;
    if (v19 >= 0.0 && v19 <= 1.0)
    {
      v21 = (v17 * v15 - v14 * v18) / v16;
      result = result + v9 * v21;
      *a4 = result;
      a4[1] = v8 + v10 * v21;
    }
  }
  return result;
}

void PCClipLinesToPlane2D(uint64_t a1, double *a2, int a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  double *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v29;

  std::vector<BOOL>::resize((uint64_t)a5, a3, 0);
  if (a3 >= 1)
  {
    v9 = 0;
    v10 = *(float64x2_t *)a1;
    v11 = *(float64x2_t *)(a1 + 24);
    v12 = (0.0 - *(double *)(a1 + 16)) * *(double *)(a1 + 40);
    v13 = *a5;
    v14 = a3;
    do
    {
      v15 = v9 >> 6;
      v16 = 1 << v9;
      if (vaddvq_f64(vmulq_f64(vsubq_f64(*(float64x2_t *)&a2[2 * v9], v10), v11)) + v12 <= 0.0)
        v17 = *(_QWORD *)(v13 + 8 * v15) & ~v16;
      else
        v17 = *(_QWORD *)(v13 + 8 * v15) | v16;
      *(_QWORD *)(v13 + 8 * v15) = v17;
      ++v9;
    }
    while (a3 != v9);
    v18 = 0;
    v19 = a4 + 16;
    v20 = a3 - 1;
    v21 = a2;
    do
    {
      v22 = 1 << v18;
      if (v20 == v18)
        v23 = 0;
      else
        v23 = v18 + 1;
      v24 = *(_QWORD *)(*a5 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) & (1 << v23);
      if ((*(_QWORD *)(*a5 + 8 * (v18 >> 6)) & v22) != 0)
      {
        if (!v24)
          goto LABEL_15;
        *(_OWORD *)(v19 - 16) = *(_OWORD *)v21;
        *(_OWORD *)v19 = *(_OWORD *)&a2[2 * v23];
      }
      else
      {
        if (v24)
        {
LABEL_15:
          v25 = &a2[2 * v23];
          PCClipLineToPlane2D((double *)a1, v21, v25, (double *)&v29);
          v26 = (_OWORD *)(v19 - 16);
          if ((*(_QWORD *)(*a5 + 8 * (v18 >> 6)) & v22) != 0)
          {
            *v26 = *(_OWORD *)v21;
            v27 = v29;
          }
          else
          {
            *v26 = v29;
            v27 = *(_OWORD *)v25;
          }
          *(_OWORD *)v19 = v27;
          goto LABEL_20;
        }
        *(_QWORD *)(v19 - 16) = 0;
        *(_QWORD *)(v19 - 8) = 0;
        *(_QWORD *)v19 = 0;
        *(_QWORD *)(v19 + 8) = 0;
      }
LABEL_20:
      ++v18;
      v21 += 2;
      v19 += 32;
    }
    while (v14 != v18);
  }
}

double PCMatrix44Tmpl<double>::jacobianPost@<D0>(float64x2_t *a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  float64x2_t v7;
  float64x2_t v8;
  double result;

  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  v4 = a2[2];
  v3 = a2[3];
  v5 = *a2;
  v6 = a2[1];
  v7 = a1[6];
  v8 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v3 * v3), 0);
  *(float64x2_t *)a3 = vdivq_f64(vsubq_f64(vmulq_n_f64(*a1, v3), vmulq_n_f64(v7, *a2)), v8);
  *(float64x2_t *)(a3 + 32) = vdivq_f64(vsubq_f64(vmulq_n_f64(a1[2], v3), vmulq_n_f64(v7, v6)), v8);
  *(float64x2_t *)(a3 + 64) = vdivq_f64(vsubq_f64(vmulq_n_f64(a1[4], v3), vmulq_n_f64(v7, v4)), v8);
  v7.f64[0] = a1[7].f64[0];
  *(double *)(a3 + 16) = (v3 * a1[1].f64[0] - v5 * v7.f64[0]) / (v3 * v3);
  *(double *)(a3 + 48) = (v3 * a1[3].f64[0] - v6 * v7.f64[0]) / (v3 * v3);
  result = (v3 * a1[5].f64[0] - v4 * v7.f64[0]) / (v3 * v3);
  *(double *)(a3 + 80) = result;
  return result;
}

BOOL planeIntersection<double>(double *a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v7 = a4[1];
  v6 = a4[2];
  v8 = a2[1];
  v9 = v8 * v6;
  v10 = a2[2];
  v11 = v10 * v7;
  v12 = v8 * v6 - v10 * v7;
  v13 = v10 * *a4;
  v14 = v6 * *a2;
  v15 = v13 - v14;
  v16 = v7 * *a2;
  v17 = v8 * *a4;
  v18 = v16 - v17;
  *a6 = v12;
  a6[1] = v13 - v14;
  a6[2] = v16 - v17;
  v19 = vabdd_f64(v13, v14) > vabdd_f64(v9, v11);
  if (vabdd_f64(v16, v17) > fabs(a6[v19]))
    v19 = 2;
  v20 = a6[v19];
  if (v20 != 0.0)
  {
    v21 = a2[1];
    v22 = a2[2];
    v23 = *a2 * *a1 + v21 * a1[1] + v22 * a1[2];
    v24 = a4[1];
    v25 = a4[2];
    v26 = *a4 * *a3 + v24 * a3[1] + v25 * a3[2];
    if (v19 == 2)
    {
      *a5 = (v23 * v24 - v21 * v26) / v18;
      a5[1] = (v26 * *a2 - v23 * *a4) / v18;
      v28 = 0.0;
    }
    else if (v19 == 1)
    {
      *a5 = (v22 * v26 - v23 * v25) / v15;
      a5[1] = 0.0;
      v28 = (v23 * *a4 - v26 * *a2) / a6[1];
    }
    else
    {
      *a5 = 0.0;
      v27 = *a6;
      a5[1] = (v23 * v25 - v22 * v26) / *a6;
      v28 = (v26 * a2[1] - v23 * a4[1]) / v27;
    }
    a5[2] = v28;
    PCVector3<double>::normalize(a6, 0.000000100000001);
  }
  return v20 != 0.0;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  int v5;
  int i;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;

  v4 = *(_QWORD **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(_QWORD *)a1 != *(_QWORD *)a2 || v5 != *(_DWORD *)(a2 + 8); v5 = *(_DWORD *)(a1 + 8))
  {
    v8 = *(uint64_t **)a3;
    v9 = 1 << i;
    if (((*v4 >> v5) & 1) != 0)
      v10 = *v8 | v9;
    else
      v10 = *v8 & ~v9;
    *v8 = v10;
    if (v5 == 63)
    {
      v11 = 0;
      *(_QWORD *)a1 = v4 + 1;
    }
    else
    {
      v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      i = 0;
      *(_QWORD *)a3 += 8;
    }
    else
    {
      i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    v4 = *(_QWORD **)a1;
  }
  *(_QWORD *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(_QWORD *)(a4 + 16) = *(_QWORD *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

void sub_1B29A66B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__15(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_1B29A7D14(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B29A7E3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B29A7ECC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

int8x8_t *PCHash128::addData(int8x8_t *this, const unsigned __int8 *a2, size_t __n)
{
  unsigned int v3;
  const unsigned __int8 *v4;
  int8x8_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  const unsigned int *v9;
  int8x8_t *v10;
  _OWORD v11[4];
  uint64_t v12;

  v3 = __n;
  v4 = a2;
  v5 = this;
  v12 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)&vorr_s8(*this, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)this->i8, *(int8x16_t *)this->i8, 8uLL)))
    *(_OWORD *)this->i8 = xmmword_1B30588E0;
  if (__n >= 0x40)
  {
    v6 = a2 & 3;
    do
    {
      if (v6)
      {
        v7 = *((_OWORD *)v4 + 1);
        v11[0] = *(_OWORD *)v4;
        v11[1] = v7;
        v8 = *((_OWORD *)v4 + 3);
        v11[2] = *((_OWORD *)v4 + 2);
        v11[3] = v8;
        v9 = (const unsigned int *)v11;
        v10 = v5;
      }
      else
      {
        v10 = v5;
        v9 = (const unsigned int *)v4;
      }
      this = (int8x8_t *)PCHash128::transform(v10, v9);
      v4 += 64;
      v3 -= 64;
    }
    while (v3 > 0x3F);
  }
  if (v3)
  {
    memcpy(v11, v4, v3);
    memcpy((char *)v11 + v3, &PADDING, 64 - v3);
    return (int8x8_t *)PCHash128::transform(v5, (const unsigned int *)v11);
  }
  return this;
}

void PCHash128::PCHash128(PCHash128 *this, PCString *a2)
{
  char *CStr;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  CStr = PCString::createCStr(a2);
  v4 = 0;
  v5 = MEMORY[0x1E0C80978];
  v6 = CStr;
LABEL_2:
  v7 = 0;
  v8 = 0;
  while (1)
  {
    v9 = v6[v7];
    if ((v9 & 0x80000000) != 0 || (*(_DWORD *)(v5 + 4 * v9 + 60) & 0x10000) == 0)
      break;
    v8 *= 16;
    ++v7;
    v10 = v9 - 48;
    v11 = v9 - 97;
    v12 = v9 - 65;
    v13 = v8 + v9;
    if (v12 <= 5)
      v8 = v13 - 55;
    if (v11 <= 5)
      v8 = v13 - 87;
    v14 = v13 - 48;
    if (v10 <= 9)
      v8 = v14;
    if ((_DWORD)v7 == 8)
    {
      *((_DWORD *)&v15 + v4++) = v8;
      v6 += 8;
      if (v4 != 4)
        goto LABEL_2;
      *(_OWORD *)this = v15;
      break;
    }
  }
  free(CStr);
}

void PCHash128::PCHash128(PCHash128 *this, int a2, int a3, int a4, int a5)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + 1) = a3;
  *((_DWORD *)this + 2) = a4;
  *((_DWORD *)this + 3) = a5;
}

PCString *PCHash128::getString@<X0>(PCHash128 *this@<X0>, PCString *a2@<X8>)
{
  char __str[64];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x40uLL, "%08x%08x%08x%08x", *(_DWORD *)this, *((_DWORD *)this + 1), *((_DWORD *)this + 2), *((_DWORD *)this + 3));
  return PCString::PCString(a2, __str);
}

_DWORD *PCHash128::transform(_DWORD *this, const unsigned int *a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;

  v2 = this[1];
  v4 = this[2];
  v3 = this[3];
  v6 = *a2;
  v5 = a2[1];
  v8 = a2[2];
  v7 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  v12 = a2[7];
  v13 = a2[8];
  v14 = a2[9];
  v15 = a2[10];
  v16 = a2[11];
  v17 = a2[12];
  v18 = a2[13];
  v20 = a2[14];
  v19 = a2[15];
  HIDWORD(v21) = *this + (v4 & v2) + (v3 & ~v2) + v6 - 680876936;
  LODWORD(v21) = HIDWORD(v21);
  v22 = (v21 >> 25) + v2;
  HIDWORD(v21) = v3 + v5 + (v4 & ~v22) + (v22 & v2) - 389564586;
  LODWORD(v21) = HIDWORD(v21);
  v23 = (v21 >> 20) + v22;
  HIDWORD(v21) = v4 + v8 + (v2 & ~v23) + (v23 & v22) + 606105819;
  LODWORD(v21) = HIDWORD(v21);
  v24 = (v21 >> 15) + v23;
  HIDWORD(v21) = v2 + v7 + (v22 & ~v24) + (v24 & v23) - 1044525330;
  LODWORD(v21) = HIDWORD(v21);
  v25 = (v21 >> 10) + v24;
  HIDWORD(v21) = v10 + v22 + (v23 & ~v25) + (v25 & v24) - 176418897;
  LODWORD(v21) = HIDWORD(v21);
  v26 = (v21 >> 25) + v25;
  HIDWORD(v21) = v9 + v23 + (v24 & ~v26) + (v26 & v25) + 1200080426;
  LODWORD(v21) = HIDWORD(v21);
  v27 = (v21 >> 20) + v26;
  HIDWORD(v21) = v11 + v24 + (v25 & ~v27) + (v27 & v26) - 1473231341;
  LODWORD(v21) = HIDWORD(v21);
  v28 = (v21 >> 15) + v27;
  HIDWORD(v21) = v12 + v25 + (v26 & ~v28) + (v28 & v27) - 45705983;
  LODWORD(v21) = HIDWORD(v21);
  v29 = (v21 >> 10) + v28;
  HIDWORD(v21) = v13 + v26 + (v27 & ~v29) + (v29 & v28) + 1770035416;
  LODWORD(v21) = HIDWORD(v21);
  v30 = (v21 >> 25) + v29;
  HIDWORD(v21) = v14 + v27 + (v28 & ~v30) + (v30 & v29) - 1958414417;
  LODWORD(v21) = HIDWORD(v21);
  v31 = (v21 >> 20) + v30;
  HIDWORD(v21) = v15 + v28 + (v29 & ~v31) + (v31 & v30) - 42063;
  LODWORD(v21) = HIDWORD(v21);
  v32 = (v21 >> 15) + v31;
  HIDWORD(v21) = v16 + v29 + (v30 & ~v32) + (v32 & v31) - 1990404162;
  LODWORD(v21) = HIDWORD(v21);
  v33 = (v21 >> 10) + v32;
  HIDWORD(v21) = v17 + v30 + (v31 & ~v33) + (v33 & v32) + 1804603682;
  LODWORD(v21) = HIDWORD(v21);
  v34 = (v21 >> 25) + v33;
  HIDWORD(v21) = v18 + v31 + (v32 & ~v34) + (v34 & v33) - 40341101;
  LODWORD(v21) = HIDWORD(v21);
  v35 = (v21 >> 20) + v34;
  HIDWORD(v21) = v20 + v32 + (v33 & ~v35) + (v35 & v34) - 1502002290;
  LODWORD(v21) = HIDWORD(v21);
  v36 = (v21 >> 15) + v35;
  HIDWORD(v21) = v19 + v33 + (v34 & ~v36) + (v36 & v35) + 1236535329;
  LODWORD(v21) = HIDWORD(v21);
  v37 = (v21 >> 10) + v36;
  HIDWORD(v21) = v5 + v34 + (v36 & ~v35) - 165796510 + (v37 & v35);
  LODWORD(v21) = HIDWORD(v21);
  v38 = (v21 >> 27) + v37;
  HIDWORD(v21) = v11 + v35 + (v37 & ~v36) - 1069501632 + (v38 & v36);
  LODWORD(v21) = HIDWORD(v21);
  v39 = (v21 >> 23) + v38;
  HIDWORD(v21) = v16 + v36 + (v38 & ~v37) + 643717713 + (v39 & v37);
  LODWORD(v21) = HIDWORD(v21);
  v40 = (v21 >> 18) + v39;
  HIDWORD(v21) = v6 + v37 + (v39 & ~v38) - 373897302 + (v40 & v38);
  LODWORD(v21) = HIDWORD(v21);
  v41 = (v21 >> 12) + v40;
  HIDWORD(v21) = v9 + v38 + (v40 & ~v39) - 701558691 + (v41 & v39);
  LODWORD(v21) = HIDWORD(v21);
  v42 = (v21 >> 27) + v41;
  HIDWORD(v21) = v15 + v39 + (v41 & ~v40) + 38016083 + (v42 & v40);
  LODWORD(v21) = HIDWORD(v21);
  v43 = (v21 >> 23) + v42;
  HIDWORD(v21) = v19 + v40 + (v42 & ~v41) - 660478335 + (v43 & v41);
  LODWORD(v21) = HIDWORD(v21);
  v44 = (v21 >> 18) + v43;
  HIDWORD(v21) = v10 + v41 + (v43 & ~v42) - 405537848 + (v44 & v42);
  LODWORD(v21) = HIDWORD(v21);
  v45 = (v21 >> 12) + v44;
  HIDWORD(v21) = v14 + v42 + (v44 & ~v43) + 568446438 + (v45 & v43);
  LODWORD(v21) = HIDWORD(v21);
  v46 = (v21 >> 27) + v45;
  HIDWORD(v21) = v20 + v43 + (v45 & ~v44) - 1019803690 + (v46 & v44);
  LODWORD(v21) = HIDWORD(v21);
  v47 = (v21 >> 23) + v46;
  HIDWORD(v21) = v7 + v44 + (v46 & ~v45) - 187363961 + (v47 & v45);
  LODWORD(v21) = HIDWORD(v21);
  v48 = (v21 >> 18) + v47;
  HIDWORD(v21) = v13 + v45 + (v47 & ~v46) + 1163531501 + (v48 & v46);
  LODWORD(v21) = HIDWORD(v21);
  v49 = (v21 >> 12) + v48;
  HIDWORD(v21) = v18 + v46 + (v48 & ~v47) - 1444681467 + (v49 & v47);
  LODWORD(v21) = HIDWORD(v21);
  v50 = (v21 >> 27) + v49;
  HIDWORD(v21) = v8 + v47 + (v49 & ~v48) - 51403784 + (v50 & v48);
  LODWORD(v21) = HIDWORD(v21);
  v51 = (v21 >> 23) + v50;
  HIDWORD(v21) = v12 + v48 + (v50 & ~v49) + 1735328473 + (v51 & v49);
  LODWORD(v21) = HIDWORD(v21);
  v52 = (v21 >> 18) + v51;
  HIDWORD(v21) = v17 + v49 + (v51 & ~v50) - 1926607734 + (v52 & v50);
  LODWORD(v21) = HIDWORD(v21);
  v53 = (v21 >> 12) + v52;
  HIDWORD(v21) = v9 + v50 - 378558 + (v53 ^ v52 ^ v51);
  LODWORD(v21) = HIDWORD(v21);
  v54 = (v21 >> 28) + v53;
  HIDWORD(v21) = v13 + v51 - 2022574463 + (v53 ^ v52 ^ v54);
  LODWORD(v21) = HIDWORD(v21);
  v55 = (v21 >> 21) + v54;
  HIDWORD(v21) = v16 + v52 + 1839030562 + (v54 ^ v53 ^ v55);
  LODWORD(v21) = HIDWORD(v21);
  v56 = (v21 >> 16) + v55;
  HIDWORD(v21) = v20 + v53 - 35309556 + (v55 ^ v54 ^ v56);
  LODWORD(v21) = HIDWORD(v21);
  v57 = (v21 >> 9) + v56;
  HIDWORD(v21) = v5 + v54 - 1530992060 + (v56 ^ v55 ^ v57);
  LODWORD(v21) = HIDWORD(v21);
  v58 = (v21 >> 28) + v57;
  HIDWORD(v21) = v10 + v55 + 1272893353 + (v57 ^ v56 ^ v58);
  LODWORD(v21) = HIDWORD(v21);
  v59 = (v21 >> 21) + v58;
  HIDWORD(v21) = v12 + v56 - 155497632 + (v58 ^ v57 ^ v59);
  LODWORD(v21) = HIDWORD(v21);
  v60 = (v21 >> 16) + v59;
  HIDWORD(v21) = v15 + v57 - 1094730640 + (v59 ^ v58 ^ v60);
  LODWORD(v21) = HIDWORD(v21);
  v61 = (v21 >> 9) + v60;
  HIDWORD(v21) = v18 + v58 + 681279174 + (v60 ^ v59 ^ v61);
  LODWORD(v21) = HIDWORD(v21);
  v62 = (v21 >> 28) + v61;
  HIDWORD(v21) = v6 + v59 - 358537222 + (v61 ^ v60 ^ v62);
  LODWORD(v21) = HIDWORD(v21);
  v63 = (v21 >> 21) + v62;
  HIDWORD(v21) = v7 + v60 - 722521979 + (v62 ^ v61 ^ v63);
  LODWORD(v21) = HIDWORD(v21);
  v64 = (v21 >> 16) + v63;
  HIDWORD(v21) = v11 + v61 + 76029189 + (v63 ^ v62 ^ v64);
  LODWORD(v21) = HIDWORD(v21);
  v65 = (v21 >> 9) + v64;
  HIDWORD(v21) = v14 + v62 - 640364487 + (v64 ^ v63 ^ v65);
  LODWORD(v21) = HIDWORD(v21);
  v66 = (v21 >> 28) + v65;
  HIDWORD(v21) = v17 + v63 - 421815835 + (v65 ^ v64 ^ v66);
  LODWORD(v21) = HIDWORD(v21);
  v67 = (v21 >> 21) + v66;
  HIDWORD(v21) = v19 + v64 + 530742520 + (v66 ^ v65 ^ v67);
  LODWORD(v21) = HIDWORD(v21);
  v68 = (v21 >> 16) + v67;
  HIDWORD(v21) = v8 + v65 - 995338651 + (v67 ^ v66 ^ v68);
  LODWORD(v21) = HIDWORD(v21);
  v69 = (v21 >> 9) + v68;
  HIDWORD(v21) = v6 + v66 - 198630844 + ((v69 | ~v67) ^ v68);
  LODWORD(v21) = HIDWORD(v21);
  v70 = (v21 >> 26) + v69;
  HIDWORD(v21) = v12 + v67 + 1126891415 + ((v70 | ~v68) ^ v69);
  LODWORD(v21) = HIDWORD(v21);
  v71 = (v21 >> 22) + v70;
  HIDWORD(v21) = v20 + v68 - 1416354905 + ((v71 | ~v69) ^ v70);
  LODWORD(v21) = HIDWORD(v21);
  v72 = (v21 >> 17) + v71;
  HIDWORD(v21) = v9 + v69 - 57434055 + ((v72 | ~v70) ^ v71);
  LODWORD(v21) = HIDWORD(v21);
  v73 = (v21 >> 11) + v72;
  HIDWORD(v21) = v17 + v70 + 1700485571 + ((v73 | ~v71) ^ v72);
  LODWORD(v21) = HIDWORD(v21);
  v74 = (v21 >> 26) + v73;
  HIDWORD(v21) = v7 + v71 - 1894986606 + ((v74 | ~v72) ^ v73);
  LODWORD(v21) = HIDWORD(v21);
  v75 = (v21 >> 22) + v74;
  HIDWORD(v21) = v15 + v72 - 1051523 + ((v75 | ~v73) ^ v74);
  LODWORD(v21) = HIDWORD(v21);
  v76 = (v21 >> 17) + v75;
  HIDWORD(v21) = v5 + v73 - 2054922799 + ((v76 | ~v74) ^ v75);
  LODWORD(v21) = HIDWORD(v21);
  v77 = (v21 >> 11) + v76;
  HIDWORD(v21) = v13 + v74 + 1873313359 + ((v77 | ~v75) ^ v76);
  LODWORD(v21) = HIDWORD(v21);
  v78 = (v21 >> 26) + v77;
  HIDWORD(v21) = v19 + v75 - 30611744 + ((v78 | ~v76) ^ v77);
  LODWORD(v21) = HIDWORD(v21);
  v79 = (v21 >> 22) + v78;
  HIDWORD(v21) = v11 + v76 - 1560198380 + ((v79 | ~v77) ^ v78);
  LODWORD(v21) = HIDWORD(v21);
  v80 = (v21 >> 17) + v79;
  HIDWORD(v21) = v18 + v77 + 1309151649 + ((v80 | ~v78) ^ v79);
  LODWORD(v21) = HIDWORD(v21);
  v81 = (v21 >> 11) + v80;
  HIDWORD(v21) = v10 + v78 - 145523070 + ((v81 | ~v79) ^ v80);
  LODWORD(v21) = HIDWORD(v21);
  v82 = (v21 >> 26) + v81;
  HIDWORD(v21) = v16 + v79 - 1120210379 + ((v82 | ~v80) ^ v81);
  LODWORD(v21) = HIDWORD(v21);
  v83 = (v21 >> 22) + v82;
  HIDWORD(v21) = v8 + v80 + 718787259 + ((v83 | ~v81) ^ v82);
  LODWORD(v21) = HIDWORD(v21);
  v84 = (v21 >> 17) + v83;
  HIDWORD(v21) = v14 + v81 - 343485551 + ((v84 | ~v82) ^ v83);
  LODWORD(v21) = HIDWORD(v21);
  *this += v82;
  this[1] = v84 + v2 + (v21 >> 11);
  this[2] = v84 + v4;
  this[3] = v83 + v3;
  return this;
}

int *PCHash128::operator+=(int *result, int *a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;

  v2 = *result;
  v3 = result[1];
  v4 = result[2];
  v5 = result[3];
  if (!(v3 | *result | v4 | v5))
  {
    *(_OWORD *)result = xmmword_1B30588E0;
    v2 = 1732584193;
    v3 = -271733879;
    v4 = -1732584194;
    v5 = 271733878;
  }
  v7 = *a2;
  v6 = a2[1];
  HIDWORD(v8) = v2 + (v4 & v3) + (v5 & ~v3) + *a2 - 680876936;
  LODWORD(v8) = HIDWORD(v8);
  v9 = (v8 >> 25) + v3;
  HIDWORD(v8) = v5 + v6 + (v4 & ~v9) + (v9 & v3) - 389564586;
  LODWORD(v8) = HIDWORD(v8);
  v10 = a2[2];
  v11 = a2[3];
  v12 = (v8 >> 20) + v9;
  HIDWORD(v8) = v4 + v10 + (v3 & ~v12) + (v12 & v9) + 606105819;
  LODWORD(v8) = HIDWORD(v8);
  v13 = (v8 >> 15) + v12;
  HIDWORD(v8) = v3 + v11 + (v9 & ~v13) + (v13 & v12) - 1044525330;
  LODWORD(v8) = HIDWORD(v8);
  v14 = (v8 >> 10) + v13;
  HIDWORD(v8) = v9 + (v12 & ~v14) + (v14 & v13) + 1971064751;
  LODWORD(v8) = HIDWORD(v8);
  v15 = (v8 >> 25) + v14;
  HIDWORD(v8) = v12 + (v13 & ~v15) + (v15 & v14) + 1200080426;
  LODWORD(v8) = HIDWORD(v8);
  v16 = (v8 >> 20) + v15;
  HIDWORD(v8) = v13 + (v14 & ~v16) + (v16 & v15) - 1473231341;
  LODWORD(v8) = HIDWORD(v8);
  v17 = (v8 >> 15) + v16;
  HIDWORD(v8) = v14 + (v15 & ~v17) + (v17 & v16) - 45705983;
  LODWORD(v8) = HIDWORD(v8);
  v18 = (v8 >> 10) + v17;
  HIDWORD(v8) = v15 + (v16 & ~v18) + (v18 & v17) + 1770035416;
  LODWORD(v8) = HIDWORD(v8);
  v19 = (v8 >> 25) + v18;
  HIDWORD(v8) = v16 + (v17 & ~v19) + (v19 & v18) - 1958414417;
  LODWORD(v8) = HIDWORD(v8);
  v20 = (v8 >> 20) + v19;
  HIDWORD(v8) = v17 + (v18 & ~v20) + (v20 & v19) - 42063;
  LODWORD(v8) = HIDWORD(v8);
  v21 = (v8 >> 15) + v20;
  HIDWORD(v8) = v18 + (v19 & ~v21) + (v21 & v20) - 1990404162;
  LODWORD(v8) = HIDWORD(v8);
  v22 = (v8 >> 10) + v21;
  HIDWORD(v8) = v19 + (v20 & ~v22) + (v22 & v21) + 1804603682;
  LODWORD(v8) = HIDWORD(v8);
  v23 = (v8 >> 25) + v22;
  HIDWORD(v8) = v20 + (v21 & ~v23) + (v23 & v22) - 40341101;
  LODWORD(v8) = HIDWORD(v8);
  v24 = (v8 >> 20) + v23;
  HIDWORD(v8) = v21 + (v22 & ~v24) + (v24 & v23) - 1502002290;
  LODWORD(v8) = HIDWORD(v8);
  v25 = (v8 >> 15) + v24;
  HIDWORD(v8) = v22 + (v23 & ~v25) + (v25 & v24) + 1236535329;
  LODWORD(v8) = HIDWORD(v8);
  v26 = (v8 >> 10) + v25;
  HIDWORD(v8) = v6 + v23 + (v25 & ~v24) - 165796510 + (v26 & v24);
  LODWORD(v8) = HIDWORD(v8);
  v27 = (v8 >> 27) + v26;
  HIDWORD(v8) = v24 + (v26 & ~v25) - 1069501632 + (v27 & v25);
  LODWORD(v8) = HIDWORD(v8);
  v28 = (v8 >> 23) + v27;
  HIDWORD(v8) = v25 + (v27 & ~v26) + 643717713 + (v28 & v26);
  LODWORD(v8) = HIDWORD(v8);
  v29 = (v8 >> 18) + v28;
  HIDWORD(v8) = v7 + v26 + (v28 & ~v27) - 373897302 + (v29 & v27);
  LODWORD(v8) = HIDWORD(v8);
  v30 = (v8 >> 12) + v29;
  HIDWORD(v8) = v27 + (v29 & ~v28) - 701558691 + (v30 & v28);
  LODWORD(v8) = HIDWORD(v8);
  v31 = (v8 >> 27) + v30;
  HIDWORD(v8) = v28 + (v30 & ~v29) + 38016083 + (v31 & v29);
  LODWORD(v8) = HIDWORD(v8);
  v32 = (v8 >> 23) + v31;
  HIDWORD(v8) = v29 + (v31 & ~v30) - 660478335 + (v32 & v30);
  LODWORD(v8) = HIDWORD(v8);
  v33 = (v8 >> 18) + v32;
  HIDWORD(v8) = v30 + (v32 & ~v31) + 1741945800 + (v33 & v31);
  LODWORD(v8) = HIDWORD(v8);
  v34 = (v8 >> 12) + v33;
  HIDWORD(v8) = v31 + (v33 & ~v32) + 568446438 + (v34 & v32);
  LODWORD(v8) = HIDWORD(v8);
  v35 = (v8 >> 27) + v34;
  HIDWORD(v8) = v32 + (v34 & ~v33) - 1019803690 + (v35 & v33);
  LODWORD(v8) = HIDWORD(v8);
  v36 = (v8 >> 23) + v35;
  HIDWORD(v8) = v11 + v33 + (v35 & ~v34) - 187363961 + (v36 & v34);
  LODWORD(v8) = HIDWORD(v8);
  v37 = (v8 >> 18) + v36;
  HIDWORD(v8) = v34 + (v36 & ~v35) + 1163531501 + (v37 & v35);
  LODWORD(v8) = HIDWORD(v8);
  v38 = (v8 >> 12) + v37;
  HIDWORD(v8) = v35 + (v37 & ~v36) - 1444681467 + (v38 & v36);
  LODWORD(v8) = HIDWORD(v8);
  v39 = (v8 >> 27) + v38;
  HIDWORD(v8) = v10 + v36 + (v38 & ~v37) - 51403784 + (v39 & v37);
  LODWORD(v8) = HIDWORD(v8);
  v40 = (v8 >> 23) + v39;
  HIDWORD(v8) = v37 + (v39 & ~v38) + 1735328473 + (v40 & v38);
  LODWORD(v8) = HIDWORD(v8);
  v41 = (v8 >> 18) + v40;
  HIDWORD(v8) = v38 + (v40 & ~v39) - 1926607734 + (v41 & v39);
  LODWORD(v8) = HIDWORD(v8);
  v42 = (v8 >> 12) + v41;
  HIDWORD(v8) = v39 - 378558 + (v42 ^ v41 ^ v40);
  LODWORD(v8) = HIDWORD(v8);
  v43 = (v8 >> 28) + v42;
  HIDWORD(v8) = v40 - 2022574463 + (v42 ^ v41 ^ v43);
  LODWORD(v8) = HIDWORD(v8);
  v44 = (v8 >> 21) + v43;
  HIDWORD(v8) = v41 + 1839030562 + (v43 ^ v42 ^ v44);
  LODWORD(v8) = HIDWORD(v8);
  v45 = (v8 >> 16) + v44;
  HIDWORD(v8) = v42 - 35309556 + (v44 ^ v43 ^ v45);
  LODWORD(v8) = HIDWORD(v8);
  v46 = (v8 >> 9) + v45;
  HIDWORD(v8) = v6 + v43 - 1530992060 + (v45 ^ v44 ^ v46);
  LODWORD(v8) = HIDWORD(v8);
  v47 = (v8 >> 28) + v46;
  HIDWORD(v8) = v44 - 874590295 + (v46 ^ v45 ^ v47);
  LODWORD(v8) = HIDWORD(v8);
  v48 = (v8 >> 21) + v47;
  HIDWORD(v8) = v45 - 155497632 + (v47 ^ v46 ^ v48);
  LODWORD(v8) = HIDWORD(v8);
  v49 = (v8 >> 16) + v48;
  HIDWORD(v8) = v46 - 1094730640 + (v48 ^ v47 ^ v49);
  LODWORD(v8) = HIDWORD(v8);
  v50 = (v8 >> 9) + v49;
  HIDWORD(v8) = v47 + 681279174 + (v49 ^ v48 ^ v50);
  LODWORD(v8) = HIDWORD(v8);
  v51 = (v8 >> 28) + v50;
  HIDWORD(v8) = v7 + v48 - 358537222 + (v50 ^ v49 ^ v51);
  LODWORD(v8) = HIDWORD(v8);
  v52 = (v8 >> 21) + v51;
  HIDWORD(v8) = v11 + v49 - 722521979 + (v51 ^ v50 ^ v52);
  LODWORD(v8) = HIDWORD(v8);
  v53 = (v8 >> 16) + v52;
  HIDWORD(v8) = v50 + 76029189 + (v52 ^ v51 ^ v53);
  LODWORD(v8) = HIDWORD(v8);
  v54 = (v8 >> 9) + v53;
  HIDWORD(v8) = v51 - 640364487 + (v53 ^ v52 ^ v54);
  LODWORD(v8) = HIDWORD(v8);
  v55 = (v8 >> 28) + v54;
  HIDWORD(v8) = v52 - 421815835 + (v54 ^ v53 ^ v55);
  LODWORD(v8) = HIDWORD(v8);
  v56 = (v8 >> 21) + v55;
  HIDWORD(v8) = v53 + 530742520 + (v55 ^ v54 ^ v56);
  LODWORD(v8) = HIDWORD(v8);
  v57 = (v8 >> 16) + v56;
  HIDWORD(v8) = v10 + v54 - 995338651 + (v56 ^ v55 ^ v57);
  LODWORD(v8) = HIDWORD(v8);
  v58 = (v8 >> 9) + v57;
  HIDWORD(v8) = v7 + v55 - 198630844 + ((v58 | ~v56) ^ v57);
  LODWORD(v8) = HIDWORD(v8);
  v59 = (v8 >> 26) + v58;
  HIDWORD(v8) = v56 + 1126891415 + ((v59 | ~v57) ^ v58);
  LODWORD(v8) = HIDWORD(v8);
  v60 = (v8 >> 22) + v59;
  HIDWORD(v8) = v57 - 1416354905 + ((v60 | ~v58) ^ v59);
  LODWORD(v8) = HIDWORD(v8);
  v61 = (v8 >> 17) + v60;
  HIDWORD(v8) = v58 - 57434055 + ((v61 | ~v59) ^ v60);
  LODWORD(v8) = HIDWORD(v8);
  v62 = (v8 >> 11) + v61;
  HIDWORD(v8) = v59 + 1700485571 + ((v62 | ~v60) ^ v61);
  LODWORD(v8) = HIDWORD(v8);
  v63 = (v8 >> 26) + v62;
  HIDWORD(v8) = v11 + v60 - 1894986606 + ((v63 | ~v61) ^ v62);
  LODWORD(v8) = HIDWORD(v8);
  v64 = (v8 >> 22) + v63;
  HIDWORD(v8) = v61 - 1051523 + ((v64 | ~v62) ^ v63);
  LODWORD(v8) = HIDWORD(v8);
  v65 = (v8 >> 17) + v64;
  HIDWORD(v8) = v6 + v62 - 2054922799 + ((v65 | ~v63) ^ v64);
  LODWORD(v8) = HIDWORD(v8);
  v66 = (v8 >> 11) + v65;
  HIDWORD(v8) = v63 + 1873313359 + ((v66 | ~v64) ^ v65);
  LODWORD(v8) = HIDWORD(v8);
  v67 = (v8 >> 26) + v66;
  HIDWORD(v8) = v64 - 30611744 + ((v67 | ~v65) ^ v66);
  LODWORD(v8) = HIDWORD(v8);
  v68 = (v8 >> 22) + v67;
  HIDWORD(v8) = v65 - 1560198380 + ((v68 | ~v66) ^ v67);
  LODWORD(v8) = HIDWORD(v8);
  v69 = (v8 >> 17) + v68;
  HIDWORD(v8) = v66 + 1309151649 + ((v69 | ~v67) ^ v68);
  LODWORD(v8) = HIDWORD(v8);
  v70 = (v8 >> 11) + v69;
  HIDWORD(v8) = v67 + 2001960578 + ((v70 | ~v68) ^ v69);
  LODWORD(v8) = HIDWORD(v8);
  v71 = (v8 >> 26) + v70;
  HIDWORD(v8) = v68 - 1120210379 + ((v71 | ~v69) ^ v70);
  LODWORD(v8) = HIDWORD(v8);
  v72 = (v8 >> 22) + v71;
  HIDWORD(v8) = v10 + v69 + 718787259 + ((v72 | ~v70) ^ v71);
  LODWORD(v8) = HIDWORD(v8);
  v73 = (v8 >> 17) + v72;
  HIDWORD(v8) = v70 - 343485551 + ((v73 | ~v71) ^ v72);
  LODWORD(v8) = HIDWORD(v8);
  *result = v71 + v2;
  result[1] = v73 + v3 + (v8 >> 11);
  result[2] = v73 + v4;
  result[3] = v72 + v5;
  return result;
}

uint64_t compare(const PCHash128 *a1, const PCHash128 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  _BOOL4 v10;

  if (*(_DWORD *)a1 < *(_DWORD *)a2)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)a1 > *(_DWORD *)a2)
    return 1;
  v2 = *((_DWORD *)a1 + 1);
  v3 = *((_DWORD *)a2 + 1);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v2 > v3)
    return 1;
  v4 = *((_DWORD *)a1 + 2);
  v5 = *((_DWORD *)a2 + 2);
  if (v4 < v5)
    return 0xFFFFFFFFLL;
  if (v4 > v5)
    return 1;
  v7 = *((_DWORD *)a1 + 3);
  v8 = *((_DWORD *)a2 + 3);
  v9 = v7 >= v8;
  v10 = v7 > v8;
  if (v9)
    return v10;
  else
    return 0xFFFFFFFFLL;
}

BOOL operator<(const PCHash128 *a1, const PCHash128 *a2)
{
  return compare(a1, a2) == -1;
}

BOOL operator>(const PCHash128 *a1, const PCHash128 *a2)
{
  return compare(a1, a2) == 1;
}

_QWORD *operator<<(_QWORD *a1)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v21;
  char v22;
  char v23;
  char v24;

  v2 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"(", 1);
  v4 = *v3;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 8) |= 0x4000u;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v4 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"0x", 2);
  v24 = 48;
  v6 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, &v24);
  *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 24) = 8;
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  *(_DWORD *)((char *)v8 + *(_QWORD *)(*v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"0x", 2);
  v23 = 48;
  v10 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, &v23);
  *(_QWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 8;
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"0x", 2);
  v22 = 48;
  v14 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, &v22);
  *(_QWORD *)((char *)v14 + *(_QWORD *)(*v14 - 24) + 24) = 8;
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  *(_DWORD *)((char *)v16 + *(_QWORD *)(*v16 - 24) + 8) = *(_DWORD *)((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 8) & 0xFFFFFFB5 | 8;
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"0x", 2);
  v21 = 48;
  v18 = std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, &v21);
  *(_QWORD *)((char *)v18 + *(_QWORD *)(*v18 - 24) + 24) = 8;
  v19 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
  *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 8) = v2;
  return a1;
}

CGColorSpaceRef __sRGBColorSpace_block_invoke()
{
  CGColorSpaceRef result;

  result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E0C9D960]);
  sRGBColorSpace_result = (uint64_t)result;
  return result;
}

uint64_t bignum_s256_init_from_s64(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = 0x101010101010101 * (result >> 63);
  a2[2] = v2;
  a2[3] = v2;
  *a2 = result;
  a2[1] = v2;
  return result;
}

uint64_t bignum_s256_sub(uint64_t result, uint64_t a2, uint64_t a3)
{
  _BOOL1 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_OWORD *)result >= *(_OWORD *)a2;
  *(_OWORD *)a3 = *(_OWORD *)result - *(_OWORD *)a2;
  v4 = *(_QWORD *)(result + 16);
  v5 = *(_QWORD *)(result + 24);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a3 + 16) = v4 - (v6 + !v3);
  *(_QWORD *)(a3 + 24) = v5 - (v7 + !__CFSUB__(v4, v6, v3));
  return result;
}

unint64_t *bignum_s128_full_multiply(unint64_t *result, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int128 v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unsigned __int128 v11;

  v3 = *a2;
  v4 = a2[1];
  v5 = result[1];
  v6 = *result * (unsigned __int128)*a2 + 0;
  *a3 = *result * *a2;
  v8 = result[1] * v3 + *((_QWORD *)&v6 + 1);
  v7 = (result[1] * (unsigned __int128)v3 + *((unint64_t *)&v6 + 1)) >> 64;
  a3[2] = v7;
  v9 = a3 + 2;
  *((_QWORD *)v9 - 1) = v8;
  v10 = a2[1];
  v11 = v8 + 0 + *result * (unsigned __int128)v10;
  *((_QWORD *)v9 - 1) = v8 + *result * v10;
  *v9 = v7 + *((unint64_t *)&v11 + 1) + result[1] * (unsigned __int128)v10;
  if ((v5 & 0x8000000000000000) == 0)
  {
    if ((v4 & 0x8000000000000000) == 0)
      return result;
LABEL_5:
    *v9 -= *(_OWORD *)result;
    return result;
  }
  *v9 -= *(_OWORD *)a2;
  if ((v4 & 0x8000000000000000) != 0)
    goto LABEL_5;
  return result;
}

void bignum_s256_divide(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, int8x16_t *a4)
{
  int8x16_t *v4;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int8x16_t v11;
  unint64_t v12;
  uint64_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  uint64x2_t v24;
  int32x2_t v25;
  int64x2_t v26;
  uint64x2_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int32x2_t v30;
  uint64x2_t v31;
  uint64x2_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint64_t i;
  uint64_t j;
  uint64_t k;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  int8x16_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  unsigned int v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t kk;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BOOL1 v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  BOOL v79;
  _BOOL4 v80;
  BOOL v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  unsigned __int128 v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  unint64_t v94;
  unsigned __int128 v95;
  unsigned __int128 v96;
  unint64_t v97;
  unsigned __int128 v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  unsigned __int128 v103;
  unsigned __int128 v104;
  unint64_t v105;
  unsigned __int128 v106;
  unsigned __int128 v107;
  unint64_t v108;
  unsigned __int128 v109;
  unsigned __int128 v110;
  unint64_t v111;
  unsigned __int128 v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _BOOL8 v116;
  unint64_t v117;
  int v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  _BOOL8 v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BOOL1 v137;
  uint64_t *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  BOOL v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BOOL1 v148;
  _BOOL1 v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _BOOL1 v155;
  _BOOL1 v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  __int8 *v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  unint64_t m;
  unint64_t v169;
  __int8 *v170;
  __int128 v171;
  __int8 *v172;
  uint64_t *v173;
  uint64_t *v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  char v183;
  char v184;
  unint64_t *v185;
  uint64_t *v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t n;
  uint64_t v198;
  unint64_t v199;
  uint64x2_t v200;
  int32x2_t v201;
  uint64x2_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int32x2_t v205;
  uint64x2_t v206;
  int8x16_t v207;
  int8x16_t v208;
  unint64_t v209;
  uint64x2_t v210;
  int32x2_t v211;
  uint64x2_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int32x2_t v215;
  uint64x2_t v216;
  char v217;
  uint64_t v218;
  int8x16_t v219;
  unint64_t v220;
  uint64_t jj;
  char v222;
  uint64_t ii;
  int8x16_t v224;
  int8x16_t v225;
  uint64_t v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  char v230;
  char v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  BOOL v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  char v241;
  char v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  BOOL v247;
  int8x16_t v248;
  uint64_t v249;
  int8x16_t v250;
  int8x16_t v251;
  uint64_t v252;
  int8x16_t v253;
  uint64_t v254;
  uint64_t v255;
  _BYTE v256[4];
  int v257;
  unint64_t v258;
  unint64_t v259;
  int8x16_t *v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  uint64x2_t v266;
  int8x16_t v267;
  int8x16_t v268;
  unint64_t v269;
  uint64_t v270;
  int8x16_t v271;
  int8x16_t v272;
  uint64_t v273;

  v4 = a4;
  v273 = *MEMORY[0x1E0C80C00];
  v6 = a1[1];
  v265 = *a1;
  v266 = (uint64x2_t)v6;
  v7 = a2[1];
  v263 = *a2;
  v264 = v7;
  v261 = 0u;
  v262 = 0u;
  v8 = a1[1].i64[1];
  v9 = a2[1].i64[1] & 0x8000000000000000;
  if (v8 < 0)
  {
    v10 = v265.i64[0];
    v11 = vmvnq_s8(v265);
    v265 = v11;
    v266 = (uint64x2_t)vmvnq_s8((int8x16_t)v266);
    if (v10)
    {
      v265.i64[0] = v11.i64[0] + 1;
    }
    else
    {
      v71 = __CFADD__(__CFADD__(v265.i64[0], 1), v265.i64[1]);
      *(_OWORD *)&v265 += 1uLL;
      *(_OWORD *)&v266 += v71;
    }
  }
  v12 = v8 & 0x8000000000000000;
  if (v9)
  {
    v13 = v263.i64[0];
    v14 = vmvnq_s8(v263);
    v263 = v14;
    v264 = vmvnq_s8(v264);
    if (v13)
    {
      v263.i64[0] = v14.i64[0] + 1;
    }
    else
    {
      v71 = __CFADD__(__CFADD__(v263.i64[0], 1), v263.i64[1]);
      *(_OWORD *)&v263 += 1uLL;
      *(_OWORD *)&v264 += v71;
    }
  }
  v15 = 0;
  v16 = 3;
  LODWORD(v17) = 256;
  while (1)
  {
    v18 = v265.u64[v16];
    if (v18)
      break;
    --v16;
    v15 -= 64;
    if (v16 == -1)
      goto LABEL_14;
  }
  v17 = __clz(v18) - v15;
LABEL_14:
  v19 = 0;
  v20 = 3;
  LODWORD(v21) = 256;
  while (1)
  {
    v22 = v263.u64[v20];
    if (v22)
      break;
    --v20;
    v19 -= 64;
    if (v20 == -1)
    {
      if (!a3)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v21 = __clz(v22) - v19;
  if (a3)
  {
LABEL_18:
    *a3 = 0u;
    a3[1] = 0u;
  }
LABEL_19:
  if ((int)v21 < (int)v17)
  {
    if ((&v261 & 0x10) != 0)
    {
      for (i = 0; i != 32; i += 16)
        *(int8x16_t *)((char *)&v261 + i) = *(int8x16_t *)((char *)&v265 + i);
    }
    else
    {
      v261 = v265;
      v262 = (int8x16_t)v266;
    }
    goto LABEL_209;
  }
  v23 = v21 & 0x3F;
  if ((v21 & 0x3F) != 0)
  {
    v24 = (uint64x2_t)vdupq_lane_s64(v265.i64[0], 0);
    v24.i64[0] = 0;
    v25 = vdup_n_s32(v23);
    v26.i64[0] = v25.u32[0];
    v26.i64[1] = v25.u32[1];
    v27 = (uint64x2_t)v26;
    v28 = (int8x16_t)vshlq_u64(v266, (uint64x2_t)v26);
    v29 = (int8x16_t)vshlq_u64((uint64x2_t)v265, (uint64x2_t)v26);
    v30 = vdup_n_s32(64 - v23);
    v26.i64[0] = v30.u32[0];
    v26.i64[1] = v30.u32[1];
    v31 = (uint64x2_t)vnegq_s64(v26);
    v268 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v265, (int8x16_t)v266, 8uLL), v31), v28);
    v267 = vorrq_s8((int8x16_t)vshlq_u64(v24, v31), v29);
    v269 = (unint64_t)v266.i64[1] >> -(char)v23;
    v32 = (uint64x2_t)vdupq_lane_s64(v263.i64[0], 0);
    v32.i64[0] = 0;
    v33 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v263, v264, 8uLL), v31), (int8x16_t)vshlq_u64((uint64x2_t)v264, v27));
    v34 = vorrq_s8((int8x16_t)vshlq_u64(v32, v31), (int8x16_t)vshlq_u64((uint64x2_t)v263, v27));
LABEL_26:
    v271 = v34;
    v272 = v33;
    goto LABEL_38;
  }
  if (((unint64_t)&v267 & 0x18) != 0)
  {
    for (j = 0; j != 32; j += 16)
      *(int8x16_t *)((char *)&v267 + j) = *(int8x16_t *)((char *)&v265 + j);
  }
  else
  {
    v268 = (int8x16_t)v266;
    v267 = v265;
  }
  v269 = 0;
  if (((unint64_t)&v271 & 0x18) == 0)
  {
    v34 = v263;
    v33 = v264;
    goto LABEL_26;
  }
  for (k = 0; k != 32; k += 16)
    *(int8x16_t *)((char *)&v271 + k) = *(int8x16_t *)((char *)&v263 + k);
LABEL_38:
  v258 = v12;
  v259 = v9;
  v260 = a4;
  v270 = 0;
  v38 = 4;
  do
  {
    v39 = v38;
    if (v38 == -1)
      break;
  }
  while (!v267.i64[v38--]);
  v41 = 0;
  v42 = 0;
  v43 = &v263;
  v44 = 4;
  do
  {
    v45 = v44;
    v46 = v42;
    v47 = (uint64_t *)v43;
    v48 = v41;
    if (!v44)
    {
      v49 = 0;
      goto LABEL_54;
    }
    --v44;
    v49 = v271.u64[v45 - 1];
    ++v42;
    v43 = (int8x16_t *)((char *)v43 - 8);
    v41 -= 8;
  }
  while (!v49);
  if (v45 != 1)
  {
LABEL_54:
    v54 = v45 - 1;
    v55 = -(uint64_t)v49;
    v56 = 6;
    v57 = -(uint64_t)v49;
    v58 = -(uint64_t)v49;
    do
    {
      v57 += ((unint64_t)v57 * (unsigned __int128)(unint64_t)v58) >> 64;
      v58 = ((unint64_t)v58 * (unsigned __int128)(unint64_t)v58) >> 64;
      --v56;
    }
    while (v56);
    v257 = v21 & 0x3F;
    v59 = 1;
    do
    {
      v60 = v59;
      v57 = (((unint64_t)v57 * (unsigned __int128)(unint64_t)v55) >> 64)
          - v49
          + (((unint64_t)(v55 - v57 + (((unint64_t)v57 * (unsigned __int128)(unint64_t)v55) >> 64))
            * (unsigned __int128)(unint64_t)v57) >> 64);
      v59 = 0;
    }
    while ((v60 & 1) != 0);
    v61 = v39 + 2;
    if (v39 + 2 > v45)
    {
      if (v57 * v55 < v49)
        v62 = v57;
      else
        v62 = v57 + 1;
      do
      {
        v63 = v266.i64[v61 + 1];
        v64 = v61 - 1;
        v65 = v267.u64[v61 - 1];
        if (v49 < 0x8000000000000001)
        {
          v69 = v63 & 0x7FFFFFFFFFFFFFFFLL;
          v68 = v65 >> 63;
          *((_QWORD *)&v72 + 1) = v267.i64[v61 - 1];
          *(_QWORD *)&v72 = v266.i64[v61 + 1];
          v67 = v72 >> 63;
        }
        else
        {
          v66 = (v65 * (unsigned __int128)(unint64_t)v62) >> 64;
          v71 = __CFADD__(v66, v65);
          v67 = v66 + v65;
          v68 = v71;
          v69 = v63 - v67 * v49;
          if (v71)
            v70 = (__PAIR128__(v65, v63) - (unint64_t)v67 * (unsigned __int128)v49 - __PAIR128__(v49, 0)) >> 64;
          else
            v70 = (__PAIR128__(v65, v63) - (unint64_t)v67 * (unsigned __int128)v49) >> 64;
          if (v70)
            v71 = 1;
          else
            v71 = v69 >= v49;
          if (v71)
          {
            do
            {
              v68 = (__PAIR128__(v68, v67++) + 1) >> 64;
              v70 = (__PAIR128__(v70, v69) - v49) >> 64;
              v69 -= v49;
            }
            while (__PAIR128__(v70, v69) >= v49);
          }
        }
        v73 = 0;
        if (v68 && (v67 & 0x8000000000000000) == 0)
        {
          v74 = v67 + 1;
          do
          {
            v73 = (__PAIR128__(v73, v69) + v49) >> 64;
            v69 += v49;
            --v74;
          }
          while (v74);
          v67 = -1;
        }
        if (!v73)
        {
          v75 = v271.i64[v45 - 2];
          v76 = v75 * v67;
          v77 = ((unint64_t)v75 * (unsigned __int128)(unint64_t)v67) >> 64;
          v78 = v266.u64[v61];
          v79 = v69 >= v77;
          if (v69 == v77)
            v79 = v78 >= v75 * v67;
          if (!v79)
          {
            --v67;
            v71 = __CFADD__(v69, v49);
            v69 += v49;
            if (v71)
              goto LABEL_89;
            v76 = v75 * v67;
            v77 = ((unint64_t)v75 * (unsigned __int128)(unint64_t)v67) >> 64;
          }
          v80 = v78 < v76;
          v81 = v69 == v77;
          LODWORD(v69) = v69 < v77;
          if (v81)
            v69 = v80;
          else
            v69 = v69;
          v67 -= v69;
        }
LABEL_89:
        if (v67)
        {
          v82 = (unint64_t *)&v267 + v61 - v45 - 1;
          if ((v45 & 1) != 0)
          {
            v85 = (*v82 - (0 + v271.u64[0] * (unsigned __int128)(unint64_t)v67)) >> 64;
            *v82 -= v271.i64[0] * v67;
            v83 = -v85;
            v84 = 1;
            if ((v45 & 2) != 0)
              goto LABEL_94;
          }
          else
          {
            v83 = 0;
            v84 = 0;
            if ((v45 & 2) == 0)
              goto LABEL_95;
LABEL_94:
            v86 = &v82[v84];
            v87 = (unint64_t *)&v271 + v84;
            v88 = v86[1];
            v89 = *v86 - (v83 + *v87 * (unsigned __int128)(unint64_t)v67);
            *v86 = v89;
            v91 = ((unint64_t)-*((_QWORD *)&v89 + 1) + v87[1] * (unsigned __int128)(unint64_t)v67) >> 64;
            v90 = v87[1] * v67 - *((_QWORD *)&v89 + 1);
            v86[1] = v88 - v90;
            v83 = v91 + (v88 < v90);
            v84 |= 2uLL;
          }
LABEL_95:
          if ((v45 & 4) != 0)
          {
            v92 = &v82[v84];
            v93 = (unint64_t *)&v271 + v84;
            v94 = v92[1];
            v95 = *v92 - (v83 + *v93 * (unsigned __int128)(unint64_t)v67);
            *v92 = v95;
            v96 = v94 - ((unint64_t)-*((_QWORD *)&v95 + 1) + v93[1] * (unsigned __int128)(unint64_t)v67);
            v92[1] = v94 - (v93[1] * v67 - *((_QWORD *)&v95 + 1));
            v97 = v92[3];
            v98 = v92[2]
                - ((unint64_t)-*((_QWORD *)&v96 + 1)
                 + v93[2] * (unsigned __int128)(unint64_t)v67);
            v92[2] -= v93[2] * v67 - *((_QWORD *)&v96 + 1);
            v99 = ((unint64_t)-*((_QWORD *)&v98 + 1) + v93[3] * (unsigned __int128)(unint64_t)v67) >> 64;
            v71 = v97 >= v93[3] * v67 - *((_QWORD *)&v98 + 1);
            v92[3] = v97 - (v93[3] * v67 - *((_QWORD *)&v98 + 1));
            v83 = v99 + !v71;
            v84 |= 4uLL;
          }
          if (v84 < v45)
          {
            v100 = &v82[v84];
            v101 = (unint64_t *)&v271 + v84;
            v102 = v100[1];
            v103 = *v100 - (v83 + *v101 * (unsigned __int128)(unint64_t)v67);
            *v100 = v103;
            v104 = v102
                 - ((unint64_t)-*((_QWORD *)&v103 + 1)
                  + v101[1] * (unsigned __int128)(unint64_t)v67);
            v100[1] = v102 - (v101[1] * v67 - *((_QWORD *)&v103 + 1));
            v105 = v100[3];
            v106 = v100[2]
                 - ((unint64_t)-*((_QWORD *)&v104 + 1)
                  + v101[2] * (unsigned __int128)(unint64_t)v67);
            v100[2] -= v101[2] * v67 - *((_QWORD *)&v104 + 1);
            v107 = v105
                 - ((unint64_t)-*((_QWORD *)&v106 + 1)
                  + v101[3] * (unsigned __int128)(unint64_t)v67);
            v100[3] = v105 - (v101[3] * v67 - *((_QWORD *)&v106 + 1));
            v108 = v100[5];
            v109 = v100[4]
                 - ((unint64_t)-*((_QWORD *)&v107 + 1)
                  + v101[4] * (unsigned __int128)(unint64_t)v67);
            v100[4] -= v101[4] * v67 - *((_QWORD *)&v107 + 1);
            v110 = v108
                 - ((unint64_t)-*((_QWORD *)&v109 + 1)
                  + v101[5] * (unsigned __int128)(unint64_t)v67);
            v100[5] = v108 - (v101[5] * v67 - *((_QWORD *)&v109 + 1));
            v111 = v100[7];
            v112 = v100[6]
                 - ((unint64_t)-*((_QWORD *)&v110 + 1)
                  + v101[6] * (unsigned __int128)(unint64_t)v67);
            v100[6] -= v101[6] * v67 - *((_QWORD *)&v110 + 1);
            v113 = ((unint64_t)-*((_QWORD *)&v112 + 1) + v101[7] * (unsigned __int128)(unint64_t)v67) >> 64;
            v71 = v111 >= v101[7] * v67 - *((_QWORD *)&v112 + 1);
            v100[7] = v111 - (v101[7] * v67 - *((_QWORD *)&v112 + 1));
            v83 = v113 + !v71;
          }
          if (v83 > v267.i64[v64])
          {
            --v67;
            v71 = __CFADD__(__CFADD__(v271.i64[0], *v82), v82[1]) | __CFADD__(v271.i64[1], (*(_OWORD *)&v271 + *(_OWORD *)v82) >> 64);
            *(_OWORD *)v82 += *(_OWORD *)&v271;
            v114 = v82[2];
            v116 = v71;
            v71 = __CFADD__(v71, v114);
            v115 = v116 + v114;
            v117 = v272.i64[1] + (v71 | __CFADD__(v272.i64[0], v115)) + v82[3];
            v82[2] = v272.i64[0] + v115;
            v82[3] = v117;
          }
        }
        if (a3)
          a3->i64[v61 + ~v45] = v67;
        --v61;
      }
      while (v64 > v45);
    }
    v118 = v257;
    while (v48 != -32)
    {
      v119 = *(unint64_t *)((char *)&v268.u64[1] + v48);
      v120 = *(unint64_t *)((char *)&v272.u64[1] + v48);
      if (v119 < v120)
        break;
      v48 -= 8;
      if (v120 < v119)
      {
        if ((v45 & 1) != 0)
        {
          v121 = 1;
          v71 = v267.i64[0] >= (unint64_t)v271.i64[0];
          v267.i64[0] -= v271.i64[0];
          v122 = !v71;
          if ((v45 & 2) != 0)
            goto LABEL_113;
        }
        else
        {
          v121 = 0;
          v122 = 0;
          if ((v45 & 2) == 0)
            goto LABEL_114;
LABEL_113:
          v123 = &v267.i64[v121];
          v124 = &v271.i64[v121];
          v125 = v123[1];
          v126 = v124[1];
          v71 = __CFSUB__(v125, v126, __PAIR128__(*v123, !v122) >= __PAIR128__(*v124, 1));
          v127 = v125 - (v126 + (__PAIR128__(*v123, !v122) < __PAIR128__(*v124, 1)));
          *v123 -= *v124 + v122;
          v123[1] = v127;
          v122 = !v71;
          v121 |= 2uLL;
        }
LABEL_114:
        if ((v45 & 4) != 0)
        {
          v128 = &v267.i64[v121];
          v129 = &v271.i64[v121];
          v130 = v128[1];
          v131 = v129[1];
          v132 = __PAIR128__(*v128, !v122) >= __PAIR128__(*v129, 1);
          v71 = __CFSUB__(v130, v131, __PAIR128__(*v128, !v122) >= __PAIR128__(*v129, 1));
          *v128 -= *v129 + v122;
          v128[1] = v130 - (v131 + !v132);
          v133 = v128[2];
          v134 = v128[3];
          v135 = v129[2];
          v136 = v129[3];
          v137 = v71;
          v71 = __CFSUB__(v133, v135, v71);
          v128[2] = v133 - (v135 + !v137);
          v128[3] = v134 - (v136 + !v71);
          v122 = !__CFSUB__(v134, v136, v71);
          v121 |= 4uLL;
        }
        if (v121 < v45)
        {
          v138 = &v267.i64[v121];
          v139 = &v271.i64[v121];
          v140 = v138[1];
          v141 = v139[1];
          v142 = __PAIR128__(*v138, !v122) >= __PAIR128__(*v139, 1);
          v71 = __CFSUB__(v140, v141, __PAIR128__(*v138, !v122) >= __PAIR128__(*v139, 1));
          *v138 -= *v139 + v122;
          v138[1] = v140 - (v141 + !v142);
          v143 = v138[2];
          v144 = v138[3];
          v145 = v139[2];
          v146 = v139[3];
          v148 = v71;
          v71 = __CFSUB__(v143, v145, v71);
          v147 = v143 - (v145 + !v148);
          v149 = v71;
          v71 = __CFSUB__(v144, v146, v71);
          v138[2] = v147;
          v138[3] = v144 - (v146 + !v149);
          v150 = v138[4];
          v151 = v138[5];
          v152 = v139[4];
          v153 = v139[5];
          v155 = v71;
          v71 = __CFSUB__(v150, v152, v71);
          v154 = v150 - (v152 + !v155);
          v156 = v71;
          v71 = __CFSUB__(v151, v153, v71);
          v138[4] = v154;
          v138[5] = v151 - (v153 + !v156);
          v157 = v138[6];
          v158 = v138[7];
          v159 = v139[6];
          v160 = v139[7];
          v138[6] = v157 - (v159 + !v71);
          v138[7] = v158 - (v160 + !__CFSUB__(v157, v159, v71));
        }
        if (a3)
        {
          v71 = *(_OWORD *)a3 >= 1uLL;
          *(_OWORD *)a3 -= 1uLL;
          v161 = a3[1].i64[1] - (*(_OWORD *)&a3[1] < (unsigned __int128)!v71);
          a3[1].i64[0] -= !v71;
          a3[1].i64[1] = v161;
        }
        break;
      }
    }
    if (v45 <= 3)
    {
      v162 = 4 - v45;
      v163 = &v261.i8[8 * v45];
      if ((v163 & 0x18) != 0)
      {
        v164 = 0;
        do
        {
          ++v164;
          *v47++ = 0;
        }
        while (v164 < v162);
      }
      else
      {
        v164 = 0;
      }
      v165 = v164 + 4;
      if (v164 + 4 <= v162)
      {
        v166 = &v163[8 * v164];
        *(_OWORD *)v166 = 0u;
        *((_OWORD *)v166 + 1) = 0u;
        v164 = v165;
      }
      if (v164 < v162)
      {
        bzero(&v163[8 * v164], 8 * (v46 - v164));
        v118 = v257;
      }
    }
    if (!v118)
    {
      m = 0;
      if ((&v261 & 0x10) != 0 && v45)
      {
        for (m = 0; m < v45; ++m)
          v261.i64[m] = v267.i64[m];
      }
      v169 = m + 4;
      if (m + 4 <= v45)
      {
        v170 = &v267.i8[8 * m];
        v171 = *((_OWORD *)v170 + 1);
        v172 = &v261.i8[8 * m];
        *(_OWORD *)v172 = *(_OWORD *)v170;
        *((_OWORD *)v172 + 1) = v171;
        m = v169;
      }
      v9 = v259;
      v4 = v260;
      v12 = v258;
      if (m < v45)
        memcpy((char *)&v261 + 8 * m, (char *)&v267 + 8 * m, 32 - (8 * m + 8 * v46));
      goto LABEL_209;
    }
    if ((v45 & 1) != 0)
    {
      v167 = v267.u64[v54];
      v261.i64[v54] = v167 >> v21;
      if ((v45 & 2) == 0)
      {
LABEL_144:
        if ((v45 & 4) != 0)
        {
          v54 -= 4;
          v177 = &v261.i64[v54];
          v178 = &v267.i64[v54];
          v179 = *v178;
          v180 = v178[1];
          v182 = v178[2];
          v181 = v178[3];
          *v177 = (v180 << -(char)v118) | (v179 >> v21);
          v177[1] = (v182 << -(char)v118) | (v180 >> v21);
          v177[2] = (v181 << -(char)v118) | (v182 >> v21);
          v177[3] = (v181 >> v21) | (v167 << -(char)v118);
          v167 = v179;
        }
        v9 = v259;
        v4 = v260;
        v12 = v258;
        if (v54)
        {
          v183 = 64 - v118;
          v184 = v21 & 0x3F;
          v185 = (unint64_t *)&v256[8 * v54];
          v186 = &v267.i64[v54 - 4];
          do
          {
            v187 = *(v186 - 4);
            v188 = *(v186 - 3);
            v189 = *(v186 - 2);
            v190 = *(v186 - 1);
            v191 = *v186;
            v192 = v186[1];
            v193 = v186[2];
            v194 = v186[3];
            v195 = *v186 << v183;
            *(v185 - 4) = (v188 << v183) | (v187 >> v184);
            *(v185 - 3) = (v189 << v183) | (v188 >> v184);
            *(v185 - 2) = (v190 << v183) | (v189 >> v184);
            *(v185 - 1) = v195 | (v190 >> v184);
            *v185 = (v192 << v183) | (v191 >> v184);
            v185[1] = (v193 << v183) | (v192 >> v184);
            v185[2] = (v194 << v183) | (v193 >> v184);
            v185[3] = (v194 >> v184) | (v167 << v183);
            v185 -= 8;
            v186 -= 8;
            v167 = v187;
            v54 -= 8;
          }
          while (v54);
        }
        goto LABEL_209;
      }
    }
    else
    {
      v167 = 0;
      v54 = v45;
      if ((v45 & 2) == 0)
        goto LABEL_144;
    }
    v54 -= 2;
    v173 = &v261.i64[v54];
    v174 = &v267.i64[v54];
    v176 = *v174;
    v175 = v174[1];
    *v173 = (v175 << -(char)v118) | (v176 >> v21);
    v173[1] = (v175 >> v21) | (v167 << -(char)v118);
    v167 = v176;
    goto LABEL_144;
  }
  v9 = v259;
  v4 = v260;
  v12 = v258;
  v261 = 0u;
  v262 = 0u;
  if (!a3)
  {
    if (v263.i64[0])
    {
      v50 = __clz(v263.u64[0]);
      v196 = v263.i64[0] << v50;
      if (v263.i64[0] << v50 == 0x8000000000000000)
      {
        v52 = v263.i64[0] - 1;
        if (v263.i64[0] == 1)
        {
          if (((unint64_t)&v267 & 0x18) != 0)
          {
            for (n = 0; n != 32; n += 16)
              *(int8x16_t *)((char *)&v267 + n) = *(int8x16_t *)((char *)&v265 + n);
LABEL_156:
            v198 = 0;
          }
          else
          {
            v198 = 0;
            v268 = (int8x16_t)v266;
            v267 = v265;
          }
          goto LABEL_208;
        }
        v222 = v50 ^ 0x3F;
        v218 = v265.i64[0];
        v267.i64[0] = (v265.i64[1] << -v222) | ((unint64_t)v265.i64[0] >> v222);
        v267.i64[1] = (v266.i64[0] << -v222) | ((unint64_t)v265.i64[1] >> v222);
        v268.i64[0] = (v266.i64[1] << -v222) | ((unint64_t)v266.i64[0] >> v222);
        v268.i64[1] = (unint64_t)v266.i64[1] >> v222;
LABEL_167:
        v198 = v218 & v52;
        goto LABEL_208;
      }
      if (v50)
      {
        v210 = (uint64x2_t)vdupq_lane_s64(v265.i64[0], 0);
        v210.i64[0] = 0;
        v211 = vdup_n_s32(v50);
        v212.i64[0] = v211.u32[0];
        v212.i64[1] = v211.u32[1];
        v213 = (int8x16_t)vshlq_u64(v266, v212);
        v214 = (int8x16_t)vshlq_u64((uint64x2_t)v265, v212);
        v215 = vdup_n_s32(64 - v50);
        v212.i64[0] = v215.u32[0];
        v212.i64[1] = v215.u32[1];
        v216 = (uint64x2_t)vnegq_s64((int64x2_t)v212);
        v268 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v265, (int8x16_t)v266, 8uLL), v216), v213);
        v267 = vorrq_s8((int8x16_t)vshlq_u64(v210, v216), v214);
        v209 = (unint64_t)v266.i64[1] >> -(char)v50;
      }
      else if (((unint64_t)&v267 & 0x18) != 0)
      {
        for (ii = 0; ii != 32; ii += 16)
          *(int8x16_t *)((char *)&v267 + ii) = *(int8x16_t *)((char *)&v265 + ii);
        v209 = 0;
      }
      else
      {
        v209 = 0;
        v268 = (int8x16_t)v266;
        v267 = v265;
      }
      v237 = -(uint64_t)v196;
      v238 = 6;
      v239 = -(uint64_t)v196;
      v240 = -(uint64_t)v196;
      do
      {
        v239 += ((unint64_t)v239 * (unsigned __int128)(unint64_t)v240) >> 64;
        v240 = ((unint64_t)v240 * (unsigned __int128)(unint64_t)v240) >> 64;
        --v238;
      }
      while (v238);
      v241 = 1;
      do
      {
        v242 = v241;
        v239 = (((unint64_t)v239 * (unsigned __int128)(unint64_t)v237) >> 64)
             - v196
             + (((unint64_t)(v237
                                  - v239
                                  + (((unint64_t)v239 * (unsigned __int128)(unint64_t)v237) >> 64))
               * (unsigned __int128)(unint64_t)v239) >> 64);
        v241 = 0;
      }
      while ((v242 & 1) != 0);
      if (v239 * v237 < v196)
        v243 = v239;
      else
        v243 = v239 + 1;
      v244 = 4;
      do
      {
        --v244;
        v245 = v209 + ((v209 * (unsigned __int128)(unint64_t)v243) >> 64);
        v246 = (__PAIR128__(v209, v267.i64[v244]) - (unint64_t)v245 * (unsigned __int128)v196) >> 64;
        v209 = v267.i64[v244] - v245 * v196;
        if (v246)
          v247 = 1;
        else
          v247 = v209 >= v196;
        if (v247)
        {
          do
          {
            ++v245;
            v246 = (__PAIR128__(v246, v209) - v196) >> 64;
            v209 -= v196;
          }
          while (__PAIR128__(v246, v209) >= v196);
        }
        v267.i64[v244] = v245;
      }
      while (v244);
LABEL_207:
      v198 = v209 >> v50;
      goto LABEL_208;
    }
LABEL_223:
    __break(1u);
    return;
  }
  if (!v263.i64[0])
    goto LABEL_223;
  v50 = __clz(v263.u64[0]);
  v51 = v263.i64[0] << v50;
  if (v263.i64[0] << v50 != 0x8000000000000000)
  {
    if (v50)
    {
      v199 = v266.u64[1];
      v200 = (uint64x2_t)vdupq_lane_s64(v265.i64[0], 0);
      v200.i64[0] = 0;
      v201 = vdup_n_s32(v50);
      v202.i64[0] = v201.u32[0];
      v202.i64[1] = v201.u32[1];
      v203 = (int8x16_t)vshlq_u64(v266, v202);
      v204 = (int8x16_t)vshlq_u64((uint64x2_t)v265, v202);
      v205 = vdup_n_s32(64 - v50);
      v202.i64[0] = v205.u32[0];
      v202.i64[1] = v205.u32[1];
      v206 = (uint64x2_t)vnegq_s64((int64x2_t)v202);
      v207 = vorrq_s8((int8x16_t)vshlq_u64(v200, v206), v204);
      v208 = vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v265, (int8x16_t)v266, 8uLL), v206), v203);
      *a3 = v207;
      a3[1] = v208;
      v209 = v199 >> -(char)v50;
    }
    else if ((a3 & 0x1F) != 0)
    {
      for (jj = 0; jj != 2; ++jj)
        a3[jj] = *(int8x16_t *)((char *)&v265 + jj * 16);
      v209 = 0;
    }
    else
    {
      v209 = 0;
      v225 = (int8x16_t)v266;
      *a3 = v265;
      a3[1] = v225;
    }
    v226 = -(uint64_t)v51;
    v227 = 6;
    v228 = -(uint64_t)v51;
    v229 = -(uint64_t)v51;
    do
    {
      v228 += ((unint64_t)v228 * (unsigned __int128)(unint64_t)v229) >> 64;
      v229 = ((unint64_t)v229 * (unsigned __int128)(unint64_t)v229) >> 64;
      --v227;
    }
    while (v227);
    v230 = 1;
    do
    {
      v231 = v230;
      v228 = (((unint64_t)v228 * (unsigned __int128)(unint64_t)v226) >> 64)
           - v51
           + (((unint64_t)(v226
                                - v228
                                + (((unint64_t)v228 * (unsigned __int128)(unint64_t)v226) >> 64))
             * (unsigned __int128)(unint64_t)v228) >> 64);
      v230 = 0;
    }
    while ((v231 & 1) != 0);
    if (v228 * v226 < v51)
      v232 = v228;
    else
      v232 = v228 + 1;
    v233 = 4;
    do
    {
      --v233;
      v234 = v209 + ((v209 * (unsigned __int128)(unint64_t)v232) >> 64);
      v235 = (__PAIR128__(v209, a3->i64[v233]) - (unint64_t)v234 * (unsigned __int128)v51) >> 64;
      v209 = a3->i64[v233] - v234 * v51;
      if (v235)
        v236 = 1;
      else
        v236 = v209 >= v51;
      if (v236)
      {
        do
        {
          ++v234;
          v235 = (__PAIR128__(v235, v209) - v51) >> 64;
          v209 -= v51;
        }
        while (__PAIR128__(v235, v209) >= v51);
      }
      a3->i64[v233] = v234;
    }
    while (v233);
    goto LABEL_207;
  }
  v52 = v263.i64[0] - 1;
  if (v263.i64[0] != 1)
  {
    v217 = v50 ^ 0x3F;
    v218 = v265.i64[0];
    v219 = (int8x16_t)v266;
    v220 = (v266.i64[0] << -v217) | ((unint64_t)v265.i64[1] >> v217);
    a3->i64[0] = (v265.i64[1] << -v217) | ((unint64_t)v265.i64[0] >> v217);
    a3->i64[1] = v220;
    a3[1].i64[0] = (v219.i64[1] << -v217) | ((unint64_t)v219.i64[0] >> v217);
    a3[1].i64[1] = (unint64_t)v219.i64[1] >> v217;
    goto LABEL_167;
  }
  if ((a3 & 0x1F) != 0)
  {
    for (kk = 0; kk != 2; ++kk)
      a3[kk] = *(int8x16_t *)((char *)&v265 + kk * 16);
    goto LABEL_156;
  }
  v198 = 0;
  v224 = (int8x16_t)v266;
  *a3 = v265;
  a3[1] = v224;
LABEL_208:
  v261.i64[0] = v198;
LABEL_209:
  if (v12 == v9)
  {
    if (!v12)
      goto LABEL_211;
LABEL_216:
    v252 = v261.i64[0];
    v253 = vmvnq_s8(v261);
    v261 = v253;
    v262 = vmvnq_s8(v262);
    if (v252)
    {
      v261.i64[0] = v253.i64[0] + 1;
      if (!v4)
        return;
LABEL_212:
      v248 = v262;
      *v4 = v261;
      v4[1] = v248;
      return;
    }
    v71 = __CFADD__(__CFADD__(v261.i64[0], 1), v261.i64[1]);
    *(_OWORD *)&v261 += 1uLL;
    *(_OWORD *)&v262 += v71;
    if (v4)
      goto LABEL_212;
  }
  else
  {
    v249 = a3->i64[0];
    v250 = vmvnq_s8(a3[1]);
    v251 = vmvnq_s8(*a3);
    *a3 = v251;
    a3[1] = v250;
    if (v249)
    {
      a3->i64[0] = v251.i64[0] + 1;
      if (v12)
        goto LABEL_216;
    }
    else
    {
      v71 = __CFADD__(__CFADD__(a3->i64[0], 1), a3->i64[1]);
      *(_OWORD *)a3 += 1uLL;
      v254 = a3[1].i64[0];
      v255 = a3[1].i64[1];
      a3[1].i64[0] = v71 + v254;
      a3[1].i64[1] = __CFADD__(v71, v254) + v255;
      if (v12)
        goto LABEL_216;
    }
LABEL_211:
    if (v4)
      goto LABEL_212;
  }
}

PC_Sp_counted_base *PC_Sp_counted_base::destroy(PC_Sp_counted_base *this)
{
  if (this)
    return (PC_Sp_counted_base *)(*(uint64_t (**)(PC_Sp_counted_base *))(*(_QWORD *)this + 8))(this);
  return this;
}

PC_Sp_counted_base *PC_Sp_counted_base::release(PC_Sp_counted_base *this)
{
  PC_Sp_counted_base *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = this;
  v2 = (unsigned int *)((char *)this + 8);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)this + 16))(this);
    PCMutex::lock((PCMutex *)((char *)v1 + 16));
    PCMutex::unlock((PCMutex *)((char *)v1 + 16));
    return PC_Sp_counted_base::weak_release(v1);
  }
  return this;
}

PC_Sp_counted_base *PC_Sp_counted_base::weak_release(PC_Sp_counted_base *this)
{
  PC_Sp_counted_base *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = this;
  v2 = (unsigned int *)((char *)this + 12);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    PCMutex::lock((PCMutex *)((char *)this + 16));
    PCMutex::unlock((PCMutex *)((char *)v1 + 16));
    return (PC_Sp_counted_base *)(*(uint64_t (**)(PC_Sp_counted_base *))(*(_QWORD *)v1 + 24))(v1);
  }
  return this;
}

uint64_t PC_Sp_counted_base_impl::dispose(PC_Sp_counted_base_impl *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 16))(*((_QWORD *)this + 11));
}

void PCSharedCount::PCSharedCount(PCSharedCount *this)
{
  this->var0 = 0;
}

void PCSharedCount::PCSharedCount(PCSharedCount *this, PCShared_base *a2)
{
  PC_Sp_counted_base *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;

  if (a2)
  {
    PCWeakCount::alloc((PCMutex *)((char *)a2 + 8), a2);
    v4 = (PC_Sp_counted_base *)*((_QWORD *)a2 + 1);
    this->var0 = v4;
    if (v4)
    {
      v5 = (unsigned int *)((char *)v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
      if (!v6)
      {
        v7 = (unsigned int *)((char *)v4 + 12);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
      }
    }
  }
  else
  {
    this->var0 = 0;
  }
}

void PCSharedCount::PCSharedCount(PCSharedCount *this, const PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;

  var0 = a2->var0;
  this->var0 = a2->var0;
  if (var0)
  {
    v3 = (unsigned int *)((char *)var0 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    if (!v4)
    {
      v5 = (unsigned int *)((char *)var0 + 12);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 + 1, v5));
    }
  }
}

void PCSharedCount::~PCSharedCount(PCSharedCount *this)
{
  PC_Sp_counted_base *var0;

  var0 = this->var0;
  if (var0)
    PC_Sp_counted_base::release(var0);
}

uint64_t *PCSharedCount::operator=(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = *result;
  *result = v2;
  return result;
}

BOOL PCSharedCount::unique(PCSharedCount *this)
{
  unsigned int v1;

  if (!this->var0)
    return 0;
  v1 = atomic_load((unsigned int *)this->var0 + 2);
  return v1 == 1;
}

void PC_Sp_counted_base_impl::~PC_Sp_counted_base_impl(PC_Sp_counted_base_impl *this)
{
  *(_QWORD *)this = off_1E6512D68;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 16));
}

{
  *(_QWORD *)this = off_1E6512D68;
  PCMutex::~PCMutex((PCMutex *)((char *)this + 16));
  JUMPOUT(0x1B5E29170);
}

PCMutex *PCWeakCount::alloc(PCMutex *this, PCShared_base *a2)
{
  PCMutex *v3;
  uint64_t v4;

  if (!this->_vptr$PCMutex)
  {
    v3 = this;
    v4 = operator new();
    *(_QWORD *)v4 = off_1E6512D68;
    *(_QWORD *)(v4 + 8) = 0x100000000;
    this = PCMutex::PCMutex((PCMutex *)(v4 + 16));
    *(_QWORD *)v4 = &off_1E6512D98;
    *(_QWORD *)(v4 + 88) = a2;
    v3->_vptr$PCMutex = (void **)v4;
  }
  return this;
}

void sub_1B29ACAA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A4C9ED57);
  _Unwind_Resume(a1);
}

uint64_t PCSingleton::getSingletons(PCSingleton *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  {
    v3 = (_QWORD *)operator new();
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    PCSingleton::getSingletons(void)::singletons = (uint64_t)v3;
  }
  return PCSingleton::getSingletons(void)::singletons;
}

void sub_1B29ACB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PCSingleton::getLock(PCSingleton *this)
{
  unsigned __int8 v1;
  PCMutex *v3;

  {
    v3 = (PCMutex *)operator new();
    PCMutex::PCMutex(v3, 1);
    PCSingleton::getLock(void)::lock = (uint64_t)v3;
  }
  return PCSingleton::getLock(void)::lock;
}

void sub_1B29ACBD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1081C4076DFA842);
  _Unwind_Resume(a1);
}

void PCSingleton::PCSingleton(PCSingleton *this, int a2)
{
  PCMutex *Lock;
  PCSingleton *v5;
  void **Singletons;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  *(_QWORD *)this = &off_1E6512DF0;
  Lock = (PCMutex *)PCSingleton::getLock(this);
  v5 = (PCSingleton *)PCMutex::lock(Lock);
  Singletons = (void **)PCSingleton::getSingletons(v5);
  v7 = (char *)Singletons[2];
  v8 = (char *)Singletons[1];
  if (v8 >= v7)
  {
    v10 = (v8 - (_BYTE *)*Singletons) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_BYTE *)*Singletons;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)(Singletons + 2), v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_QWORD *)v15 = this;
    *((_DWORD *)v15 + 2) = a2;
    v9 = v15 + 16;
    v18 = (char *)*Singletons;
    v17 = (char *)Singletons[1];
    if (v17 != *Singletons)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*Singletons;
    }
    *Singletons = v15;
    Singletons[1] = v9;
    Singletons[2] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *(_QWORD *)v8 = this;
    *((_DWORD *)v8 + 2) = a2;
    v9 = v8 + 16;
  }
  Singletons[1] = v9;
  PCMutex::unlock(Lock);
}

void sub_1B29ACD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void PCSingleton::~PCSingleton(PCSingleton *this)
{
  PCMutex *Lock;
  PCSingleton *v3;
  char **Singletons;
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  int64_t v10;

  *(_QWORD *)this = &off_1E6512DF0;
  Lock = (PCMutex *)PCSingleton::getLock(this);
  v3 = (PCSingleton *)PCMutex::lock(Lock);
  Singletons = (char **)PCSingleton::getSingletons(v3);
  v6 = *Singletons;
  v5 = Singletons[1];
  if (*Singletons != v5)
  {
    v7 = 0;
    while (*(PCSingleton **)&v6[v7] != this)
    {
      v7 += 16;
      if (&v6[v7] == v5)
        goto LABEL_9;
    }
    v8 = &v6[v7];
    v9 = &v6[v7 + 16];
    v10 = v5 - v9;
    if (v5 != v9)
      memmove(&v6[v7], v9, v5 - v9);
    Singletons[1] = &v8[v10];
  }
LABEL_9:
  PCMutex::unlock(Lock);
}

{
  PCSingleton::~PCSingleton(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCSingleton::deleteSingletons(PCSingleton *this)
{
  unsigned int v1;
  PCMutex *Lock;
  PCSingleton *v3;
  char *Singletons;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  PCSingleton *v8;
  char *v9;
  PCSingleton *v10;
  PCMutex *v11;
  PCSingleton *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  PCSingleton *v21;
  uint64_t v22;
  PCMutex *v24;
  char v25;
  void *__p;
  char *v27;
  uint64_t v28;

  v1 = 0;
  do
  {
    __p = 0;
    v27 = 0;
    v28 = 0;
    Lock = (PCMutex *)PCSingleton::getLock(this);
    v24 = Lock;
    v3 = (PCSingleton *)PCMutex::lock(Lock);
    v25 = 1;
    Singletons = (char *)PCSingleton::getSingletons(v3);
    if (&__p != (void **)Singletons)
      Singletons = std::vector<PCSingleton::Info>::__assign_with_size[abi:ne180100]<PCSingleton::Info*,PCSingleton::Info*>((char *)&__p, *(char **)Singletons, *((_QWORD *)Singletons + 1), (uint64_t)(*((_QWORD *)Singletons + 1) - *(_QWORD *)Singletons) >> 4);
    v5 = (_QWORD *)PCSingleton::getSingletons((PCSingleton *)Singletons);
    v5[1] = *v5;
    PCMutex::unlock(Lock);
    v6 = 126 - 2 * __clz((v27 - (_BYTE *)__p) >> 4);
    if (v27 == __p)
      v7 = 0;
    else
      v7 = v6;
    std::__introsort<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *,false>((unint64_t)__p, v27, (uint64_t)&v24, v7, 1);
LABEL_8:
    v9 = v27;
    while (__p != v9)
    {
      v10 = (PCSingleton *)*((_QWORD *)v9 - 2);
      v9 -= 16;
      v8 = v10;
      v27 = v9;
      if (v10)
      {
        v8 = (PCSingleton *)(*(uint64_t (**)(PCSingleton *))(*(_QWORD *)v8 + 8))(v8);
        goto LABEL_8;
      }
    }
    v11 = (PCMutex *)PCSingleton::getLock(v8);
    v24 = v11;
    v12 = (PCSingleton *)PCMutex::lock(v11);
    v25 = 1;
    v13 = (uint64_t *)PCSingleton::getSingletons(v12);
    v14 = *v13;
    v15 = v13[1];
    PCMutex::unlock(v11);
    this = (PCSingleton *)__p;
    if (__p)
    {
      v27 = (char *)__p;
      operator delete(__p);
    }
    if (v14 == v15)
      break;
  }
  while (v1++ < 5);
  if (v14 != v15)
  {
    v17 = (_QWORD *)MEMORY[0x1E0DE4A60];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"ProCore: PCSingleton could not successfully release all singletons in ", 70);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"tries.\n", 7);
    this = (PCSingleton *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"This is caused by singletons being created during the application teardown process.\n", 84);
  }
  v19 = PCSingleton::getSingletons(this);
  v20 = *(void **)v19;
  if (*(_QWORD *)v19)
  {
    *(_QWORD *)(v19 + 8) = v20;
    operator delete(v20);
  }
  v21 = (PCSingleton *)MEMORY[0x1B5E29170](v19, 0x20C40960023A9);
  v22 = PCSingleton::getLock(v21);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
}

void sub_1B29AD000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

char *std::vector<PCSingleton::Info>::__assign_with_size[abi:ne180100]<PCSingleton::Info*,PCSingleton::Info*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *,false>(unint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  __int128 v19;
  __int128 v20;

_DWORD *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(_DWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (result != (_DWORD *)a2)
  {
    v2 = result + 4;
    if (result + 4 != (_DWORD *)a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v5 = v2;
        v6 = v4[6];
        if (v6 > v4[2])
        {
          v7 = *v5;
          v8 = v4[7];
          v9 = v3;
          while (1)
          {
            *(_OWORD *)((char *)result + v9 + 16) = *(_OWORD *)((char *)result + v9);
            if (!v9)
              break;
            v10 = *(_DWORD *)((char *)result + v9 - 8);
            v9 -= 16;
            if (v6 <= v10)
            {
              v11 = (uint64_t)result + v9 + 16;
              goto LABEL_10;
            }
          }
          v11 = (uint64_t)result;
LABEL_10:
          *(_QWORD *)v11 = v7;
          *(_DWORD *)(v11 + 8) = v6;
          *(_DWORD *)(v11 + 12) = v8;
        }
        v2 = v5 + 2;
        v3 += 16;
        v4 = v5;
      }
      while (v5 + 2 != a2);
    }
  }
  return result;
}

_DWORD *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(_DWORD *result, _DWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  unsigned int v8;

  if (result != a2)
  {
    v2 = result + 4;
    while (v2 != (_QWORD *)a2)
    {
      v3 = v2;
      v4 = result[6];
      if (v4 > result[2])
      {
        v5 = *v3;
        v6 = result[7];
        v7 = v3;
        do
        {
          *(_OWORD *)v7 = *((_OWORD *)v7 - 1);
          v8 = *((_DWORD *)v7 - 6);
          v7 -= 2;
        }
        while (v4 > v8);
        *v7 = v5;
        *((_DWORD *)v7 + 2) = v4;
        *((_DWORD *)v7 + 3) = v6;
      }
      v2 = v3 + 2;
      result = v3;
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)a3 + 2);
  if (v3 > *((_DWORD *)a1 + 2))
  {
    if (v4 > v3)
    {
      v5 = *a1;
      *a1 = *a3;
      *a3 = v5;
      return 1;
    }
    v8 = *a1;
    *a1 = *a2;
    *a2 = v8;
    if (*((_DWORD *)a3 + 2) <= *((_DWORD *)a2 + 2))
      return 1;
    v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    return 2;
  }
  if (v4 > v3)
  {
    v6 = *a2;
    *a2 = *a3;
    *a3 = v6;
    if (*((_DWORD *)a2 + 2) <= *((_DWORD *)a1 + 2))
      return 1;
    v7 = *a1;
    *a1 = *a2;
    *a2 = v7;
    return 2;
  }
  return 0;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Info *,PCSingleton::Compare &>(_QWORD *a1, _OWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  _OWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v14;

  v2 = a1[1];
  if (v2 <= *((_DWORD *)a2 - 2))
  {
    v6 = a1 + 2;
    do
    {
      v4 = (unint64_t)v6;
      if (v6 >= (_QWORD *)a2)
        break;
      v7 = *((_DWORD *)v6 + 2);
      v6 += 2;
    }
    while (v2 <= v7);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = (unint64_t)(v3 + 2);
      v5 = *((_DWORD *)v3 + 6);
      v3 += 2;
    }
    while (v2 <= v5);
  }
  if (v4 >= (unint64_t)a2)
  {
    v8 = a2;
  }
  else
  {
    do
    {
      v8 = a2 - 1;
      v9 = *((_DWORD *)a2-- - 2);
    }
    while (v2 > v9);
  }
  v10 = *a1;
  while (v4 < (unint64_t)v8)
  {
    v14 = *(_OWORD *)v4;
    *(_OWORD *)v4 = *v8;
    *v8 = v14;
    do
    {
      v11 = *(_DWORD *)(v4 + 24);
      v4 += 16;
    }
    while (v2 <= v11);
    do
      v12 = *((_DWORD *)v8-- - 2);
    while (v2 > v12);
  }
  if ((_QWORD *)(v4 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v4 - 16);
  *(_QWORD *)(v4 - 16) = v10;
  *(_QWORD *)(v4 - 8) = v2;
  return v4;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Info *,PCSingleton::Compare &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t *v11;
  __int128 v12;
  unsigned int v13;
  unsigned int v14;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  do
  {
    v5 = a1[v2 + 3];
    v2 += 2;
  }
  while (v5 > v4);
  v6 = &a1[v2];
  if (v2 == 2)
  {
    while (v6 < a2)
    {
      v7 = a2 - 2;
      v9 = *((_DWORD *)a2 - 2);
      a2 -= 2;
      if (v9 > v4)
        goto LABEL_9;
    }
    v7 = a2;
  }
  else
  {
    do
    {
      v7 = a2 - 2;
      v8 = *((_DWORD *)a2 - 2);
      a2 -= 2;
    }
    while (v8 <= v4);
  }
LABEL_9:
  v10 = (unint64_t)v6;
  if (v6 < v7)
  {
    v11 = v7;
    do
    {
      v12 = *(_OWORD *)v10;
      *(_OWORD *)v10 = *(_OWORD *)v11;
      *(_OWORD *)v11 = v12;
      do
      {
        v13 = *(_DWORD *)(v10 + 24);
        v10 += 16;
      }
      while (v13 > v4);
      do
      {
        v14 = *((_DWORD *)v11 - 2);
        v11 -= 2;
      }
      while (v14 <= v4);
    }
    while (v10 < (unint64_t)v11);
  }
  if ((uint64_t *)(v10 - 16) != a1)
    *(_OWORD *)a1 = *(_OWORD *)(v10 - 16);
  *(_QWORD *)(v10 - 16) = v3;
  *(_QWORD *)(v10 - 8) = v4;
  return v10 - 16;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(_DWORD *)(a2 - 8) > *(_DWORD *)(a1 + 8))
      {
        v6 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v6;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a2 - 16));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__n128 *)a1, (__n128 *)(a1 + 16), (__n128 *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)(a2 - 16));
      return 1;
    default:
      v7 = a1 + 32;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__int128 *)a1, (__int128 *)(a1 + 16), (__int128 *)(a1 + 32));
      v8 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *(_DWORD *)(v8 + 8);
    if (v11 > *(_DWORD *)(v7 + 8))
    {
      v12 = *(_QWORD *)v8;
      v13 = *(_DWORD *)(v8 + 12);
      v14 = v9;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32)
          break;
        v15 = *(_DWORD *)(a1 + v14 + 24);
        v14 -= 16;
        if (v11 <= v15)
        {
          v16 = a1 + v14 + 48;
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *(_QWORD *)v16 = v12;
      *(_DWORD *)(v16 + 8) = v11;
      *(_DWORD *)(v16 + 12) = v13;
      if (++v10 == 8)
        return v8 + 16 == a2;
    }
    v7 = v8;
    v9 += 16;
    v8 += 16;
    if (v8 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_DWORD *)(a4 + 8) > *(_DWORD *)(a3 + 8))
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(__n128 *)a4 = result;
    if (*(_DWORD *)(a3 + 8) > *(_DWORD *)(a2 + 8))
    {
      result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*(_DWORD *)(a2 + 8) > *(_DWORD *)(a1 + 8))
      {
        result = *(__n128 *)a1;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(__n128 *a1, __n128 *a2, __n128 *a3, __n128 *a4, __n128 *a5)
{
  __n128 result;

  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4).n128_u64[0];
  if (a5->n128_u32[2] > a4->n128_u32[2])
  {
    result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u32[2] > a3->n128_u32[2])
    {
      result = *a3;
      *a3 = *a4;
      *a4 = result;
      if (a3->n128_u32[2] > a2->n128_u32[2])
      {
        result = *a2;
        *a2 = *a3;
        *a3 = result;
        if (a2->n128_u32[2] > a1->n128_u32[2])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

_OWORD *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *,PCSingleton::Info *>(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4)
{
  _OWORD *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  __int128 v26;

  if ((_OWORD *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) >> 4;
    if ((uint64_t)a2 - a1 >= 17)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 16 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        if (*((_DWORD *)v14 + 2) > *(_DWORD *)(a1 + 8))
        {
          v15 = *v14;
          *v14 = *(_OWORD *)a1;
          *(_OWORD *)a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(a1, a4, v9, (uint64_t *)a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 17)
    {
      v16 = (unint64_t)v8 >> 4;
      do
      {
        v17 = 0;
        v26 = *(_OWORD *)a1;
        v18 = (_OWORD *)a1;
        do
        {
          v19 = &v18[v17 + 1];
          v20 = (2 * v17) | 1;
          v21 = 2 * v17 + 2;
          if (v21 < v16)
          {
            v22 = *((_DWORD *)v19 + 2);
            v23 = *((_DWORD *)v19 + 6);
            v19 += v22 > v23;
            if (v22 > v23)
              v20 = v21;
          }
          *v18 = *v19;
          v18 = v19;
          v17 = v20;
        }
        while (v20 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 == --v6)
        {
          *v19 = v26;
        }
        else
        {
          *v19 = *v6;
          *v6 = v26;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(a1, (uint64_t)(v19 + 1), a4, ((uint64_t)v19 - a1 + 16) >> 4);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 4)
    {
      v6 = v4 >> 3;
      v7 = (v4 >> 3) + 1;
      v8 = (uint64_t *)(result + 16 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = *((_DWORD *)v8 + 2);
        v11 = *((_DWORD *)v8 + 6);
        v8 += 2 * (v10 > v11);
        if (v10 > v11)
          v7 = v9;
      }
      v12 = *((_DWORD *)a4 + 2);
      if (*((_DWORD *)v8 + 2) <= v12)
      {
        v13 = *a4;
        v14 = *((_DWORD *)a4 + 3);
        do
        {
          v15 = a4;
          a4 = v8;
          *v15 = *(_OWORD *)v8;
          if (v5 < v7)
            break;
          v16 = (2 * v7) | 1;
          v8 = (uint64_t *)(result + 16 * v16);
          v17 = 2 * v7 + 2;
          if (v17 < a3)
          {
            v18 = *((_DWORD *)v8 + 2);
            v19 = *((_DWORD *)v8 + 6);
            v8 += 2 * (v18 > v19);
            if (v18 > v19)
              v16 = v17;
          }
          v7 = v16;
        }
        while (*((_DWORD *)v8 + 2) <= v12);
        *a4 = v13;
        *((_DWORD *)a4 + 2) = v12;
        *((_DWORD *)a4 + 3) = v14;
      }
    }
  }
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,PCSingleton::Compare &,PCSingleton::Info *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _OWORD *v12;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = *(_DWORD *)(result + 16 * (v4 >> 1) + 8);
    v7 = *(_DWORD *)(a2 - 8);
    if (v6 > v7)
    {
      v10 = *(_QWORD *)(a2 - 16);
      v8 = a2 - 16;
      v9 = v10;
      v11 = *(_DWORD *)(v8 + 12);
      do
      {
        v12 = (_OWORD *)v8;
        v8 = result + 16 * v5;
        *v12 = *(_OWORD *)v8;
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
      }
      while (*(_DWORD *)(result + 16 * v5 + 8) > v7);
      *(_QWORD *)v8 = v9;
      *(_DWORD *)(v8 + 8) = v7;
      *(_DWORD *)(v8 + 12) = v11;
    }
  }
  return result;
}

void PCGetDescriptionForProfile(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  _QWORD v4[2];
  __int128 __p;
  std::string::size_type v6;

  v4[0] = off_1E6512E20;
  v4[1] = a1;
  v6 = 0;
  __p = 0uLL;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v4);
  if (SHIBYTE(v6) < 0)
  {
    std::string::__init_copy_ctor_external(a3, (const std::string::value_type *)__p, *((std::string::size_type *)&__p + 1));
    v4[0] = off_1E6512E20;
    if (SHIBYTE(v6) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = __p;
    a3->__r_.__value_.__r.__words[2] = v6;
  }
}

void sub_1B29ADE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::DescriptionVisitor::~DescriptionVisitor(void **this)
{
  *this = off_1E6512E20;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E6512E20;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1B5E29170);
}

void `anonymous namespace'::DescriptionVisitor::visit(_anonymous_namespace_::DescriptionVisitor *this, const PCICCTransferFunctionLinear *a2)
{
  void **v3;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  char v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v10;
  std::string v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  getDefaultChromaticitiesName(*((float **)this + 1), &v11);
  std::string::basic_string[abi:ne180100]<0>(__p, " Linear");
  if ((v10 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v4 = v10;
  else
    v4 = (std::string::size_type)__p[1];
  v5 = std::string::append(&v11, (const std::string::value_type *)v3, v4);
  v6 = v5->__r_.__value_.__r.__words[0];
  v12[0] = v5->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v12 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
  v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  v8 = v12[0];
  *((_QWORD *)this + 2) = v6;
  *((_QWORD *)this + 3) = v8;
  *(_QWORD *)((char *)this + 31) = *(_QWORD *)((char *)v12 + 7);
  *((_BYTE *)this + 39) = v7;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1B29AE01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::DescriptionVisitor::visit(float **this, const PCICCTransferFunctionGamma *a2)
{
  float Gamma;
  int v4;
  int v5;
  char *v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  void **v12;
  __int128 v13;
  float *v14;
  __int128 v15;
  float *v16;
  void *__p;
  char v18;
  uint64_t v19;

  Gamma = PCICCTransferFunctionGamma::getGamma(a2);
  v4 = PCClassifyPrimaries(this[1]);
  v5 = PCClassifyTransfer(Gamma);
  if (v5 == 1)
  {
    switch(v4)
    {
      case 1:
        v6 = "HDTV";
        break;
      case 5:
        v6 = "Composite PAL";
        break;
      case 6:
        v6 = "Composite NTSC";
        break;
      case 9:
        v6 = "Ultra HDTV";
        break;
      case 12:
        v6 = "P3D65";
        break;
      default:
        goto LABEL_4;
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, v6);
    goto LABEL_20;
  }
LABEL_4:
  if (v4 == 2 || v5 == 2)
  {
    getDefaultDescription(this[1], Gamma);
LABEL_20:
    v12 = (void **)(this + 2);
    if (*((char *)this + 39) < 0)
      operator delete(*v12);
    *(_OWORD *)v12 = v15;
    this[4] = v16;
    return;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"QuickTime 'nclc' Video(", 23);
  v8 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
  PCPrimariesToMatrix(v4);
  v10 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)")", 1);
  std::stringbuf::str();
  v11 = (void **)(this + 2);
  if (*((char *)this + 39) < 0)
    operator delete(*v11);
  *(_OWORD *)v11 = v13;
  this[4] = v14;
  *(_QWORD *)&v15 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)&v15 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v15 + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](&v19);
}

void sub_1B29AE26C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

double `anonymous namespace'::DescriptionVisitor::visit(_anonymous_namespace_::DescriptionVisitor *this, const PCICCTransferFunctionLUT *a2)
{
  float *v3;
  float v4;
  void **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (float *)*((_QWORD *)this + 1);
  v4 = PCEstimateGammaFromTransferFunction((uint64_t)a2);
  getDefaultDescription(v3, v4);
  v5 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    operator delete(*v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *((_QWORD *)this + 4) = v8;
  return result;
}

double `anonymous namespace'::DescriptionVisitor::visit(_anonymous_namespace_::DescriptionVisitor *this, const PCICCTransferFunctionParametric0 *a2)
{
  float *v3;
  float v4;
  void **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (float *)*((_QWORD *)this + 1);
  v4 = PCEstimateGammaFromTransferFunction((uint64_t)a2);
  getDefaultDescription(v3, v4);
  v5 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    operator delete(*v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *((_QWORD *)this + 4) = v8;
  return result;
}

double `anonymous namespace'::DescriptionVisitor::visit(_anonymous_namespace_::DescriptionVisitor *this, const PCICCTransferFunctionParametric1 *a2)
{
  float *v3;
  float v4;
  void **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (float *)*((_QWORD *)this + 1);
  v4 = PCEstimateGammaFromTransferFunction((uint64_t)a2);
  getDefaultDescription(v3, v4);
  v5 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    operator delete(*v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *((_QWORD *)this + 4) = v8;
  return result;
}

double `anonymous namespace'::DescriptionVisitor::visit(_anonymous_namespace_::DescriptionVisitor *this, const PCICCTransferFunctionParametric2 *a2)
{
  float *v3;
  float v4;
  void **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (float *)*((_QWORD *)this + 1);
  v4 = PCEstimateGammaFromTransferFunction((uint64_t)a2);
  getDefaultDescription(v3, v4);
  v5 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    operator delete(*v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *((_QWORD *)this + 4) = v8;
  return result;
}

double `anonymous namespace'::DescriptionVisitor::visit(_anonymous_namespace_::DescriptionVisitor *this, const PCICCTransferFunctionParametric3 *a2)
{
  float Gamma;
  float v5;
  float v6;
  float v7;
  float v8;
  float *v9;
  _BOOL4 v10;
  float v11;
  void **v12;
  double result;
  __int128 v14;
  uint64_t v15;

  Gamma = PCICCTransferFunctionGamma::getGamma(a2);
  v5 = PCICCTransferFunctionParametric3::getA(a2);
  v6 = PCICCTransferFunctionParametric3::getB(a2);
  v7 = PCICCTransferFunctionParametric3::getC(a2);
  v8 = PCICCTransferFunctionParametric3::getD(a2);
  if (PCIs709TransferFunction(Gamma, v5, v6, v7, v8))
  {
    v9 = (float *)*((_QWORD *)this + 1);
    if (vabds_f32(*v9, 0.64) < 0.001
      && vabds_f32(v9[1], 0.33) < 0.001
      && vabds_f32(v9[2], 0.3) < 0.001
      && vabds_f32(v9[3], 0.6) < 0.001
      && vabds_f32(v9[4], 0.15) < 0.001
      && vabds_f32(v9[5], 0.06) < 0.001
      && vabds_f32(v9[6], 0.3127) < 0.001
      && vabds_f32(v9[7], 0.329) < 0.001
      || vabds_f32(*v9, 0.708) < 0.001
      && vabds_f32(v9[1], 0.292) < 0.001
      && vabds_f32(v9[2], 0.17) < 0.001
      && vabds_f32(v9[3], 0.797) < 0.001
      && vabds_f32(v9[4], 0.131) < 0.001
      && vabds_f32(v9[5], 0.046) < 0.001
      && vabds_f32(v9[6], 0.3127) < 0.001
      && vabds_f32(v9[7], 0.329) < 0.001)
    {
      goto LABEL_41;
    }
  }
  else
  {
    v10 = PCIssRGBTransferFunction(Gamma, v5, v6, v7, v8);
    v9 = (float *)*((_QWORD *)this + 1);
    if (v10
      && (vabds_f32(*v9, 0.64) < 0.001
       && vabds_f32(v9[1], 0.33) < 0.001
       && vabds_f32(v9[2], 0.3) < 0.001
       && vabds_f32(v9[3], 0.6) < 0.001
       && vabds_f32(v9[4], 0.15) < 0.001
       && vabds_f32(v9[5], 0.06) < 0.001
       && vabds_f32(v9[6], 0.3127) < 0.001
       && vabds_f32(v9[7], 0.329) < 0.001
       || vabds_f32(*v9, 0.68) < 0.001
       && vabds_f32(v9[1], 0.32) < 0.001
       && vabds_f32(v9[2], 0.265) < 0.001
       && vabds_f32(v9[3], 0.69) < 0.001
       && vabds_f32(v9[4], 0.15) < 0.001
       && vabds_f32(v9[5], 0.06) < 0.001
       && vabds_f32(v9[6], 0.3127) < 0.001
       && vabds_f32(v9[7], 0.329) < 0.001))
    {
LABEL_41:
      JUMPOUT(0x1B5E28D80);
    }
  }
  v11 = PCEstimateGammaFromTransferFunction((uint64_t)a2);
  getDefaultDescription(v9, v11);
  v12 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    operator delete(*v12);
  result = *(double *)&v14;
  *(_OWORD *)v12 = v14;
  *((_QWORD *)this + 4) = v15;
  return result;
}

double `anonymous namespace'::DescriptionVisitor::visit(_anonymous_namespace_::DescriptionVisitor *this, const PCICCTransferFunctionParametric4 *a2)
{
  float *v3;
  float v4;
  void **v5;
  double result;
  __int128 v7;
  uint64_t v8;

  v3 = (float *)*((_QWORD *)this + 1);
  v4 = PCEstimateGammaFromTransferFunction((uint64_t)a2);
  getDefaultDescription(v3, v4);
  v5 = (void **)((char *)this + 16);
  if (*((char *)this + 39) < 0)
    operator delete(*v5);
  result = *(double *)&v7;
  *(_OWORD *)v5 = v7;
  *((_QWORD *)this + 4) = v8;
  return result;
}

_QWORD *getDefaultChromaticitiesName@<X0>(float *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  char *v5;

  result = (_QWORD *)PCClassifyPrimaries(a1);
  switch((int)result)
  {
    case 0:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return result;
    case 1:
      v5 = "Rec. 709";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    case 2:
      if (vabds_f32(*a1, 0.63) >= 0.001
        || vabds_f32(a1[1], 0.34) >= 0.001
        || vabds_f32(a1[2], 0.295) >= 0.001
        || vabds_f32(a1[3], 0.605) >= 0.001
        || vabds_f32(a1[4], 0.155) >= 0.001
        || vabds_f32(a1[5], 0.077) >= 0.001
        || vabds_f32(a1[6], 0.3127) >= 0.001
        || vabds_f32(a1[7], 0.329) >= 0.001)
      {
        if (vabds_f32(*a1, 0.713) >= 0.001
          || vabds_f32(a1[1], 0.293) >= 0.001
          || vabds_f32(a1[2], 0.165) >= 0.001
          || vabds_f32(a1[3], 0.83) >= 0.001
          || vabds_f32(a1[4], 0.128) >= 0.001
          || vabds_f32(a1[5], 0.044) >= 0.001
          || vabds_f32(a1[6], 0.32168) >= 0.001
          || vabds_f32(a1[7], 0.33767) >= 0.001)
        {
LABEL_27:
          v5 = "RGB";
        }
        else
        {
          v5 = "ACEScg";
        }
      }
      else
      {
        v5 = "Generic RGB";
      }
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    case 5:
      v5 = "EBU 3213";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    case 6:
      v5 = "SMPTE C";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    case 9:
      v5 = "Rec. 2020";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    case 11:
      v5 = "P3DCI";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    case 12:
      v5 = "P3D65";
      return std::string::basic_string[abi:ne180100]<0>(a2, v5);
    default:
      goto LABEL_27;
  }
}

uint64_t getDefaultDescription(float *a1, float a2)
{
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  getDefaultChromaticitiesName(a1, __p);
  if ((v9 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v5 = v9;
  else
    v5 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
  if ((char)v9 < 0)
    operator delete(__p[0]);
  if (a2 != 0.0
    && (a2 != 1.0
     || vabds_f32(*a1, 0.713) >= 0.001
     || vabds_f32(a1[1], 0.293) >= 0.001
     || vabds_f32(a1[2], 0.165) >= 0.001
     || vabds_f32(a1[3], 0.83) >= 0.001
     || vabds_f32(a1[4], 0.128) >= 0.001
     || vabds_f32(a1[5], 0.044) >= 0.001
     || vabds_f32(a1[6], 0.32168) >= 0.001
     || vabds_f32(a1[7], 0.33767) >= 0.001)
    && (fabsf(a2 + -2.6) >= 0.001
     || vabds_f32(*a1, 0.68) >= 0.001
     || vabds_f32(a1[1], 0.32) >= 0.001
     || vabds_f32(a1[2], 0.265) >= 0.001
     || vabds_f32(a1[3], 0.69) >= 0.001
     || vabds_f32(a1[4], 0.15) >= 0.001
     || vabds_f32(a1[5], 0.06) >= 0.001
     || vabds_f32(a1[6], 0.314) >= 0.001
     || vabds_f32(a1[7], 0.351) >= 0.001)
    && (fabsf(a2 + -1.961) >= 0.001
     || vabds_f32(*a1, 0.68) >= 0.001
     || vabds_f32(a1[1], 0.32) >= 0.001
     || vabds_f32(a1[2], 0.265) >= 0.001
     || vabds_f32(a1[3], 0.69) >= 0.001
     || vabds_f32(a1[4], 0.15) >= 0.001
     || vabds_f32(a1[5], 0.06) >= 0.001
     || vabds_f32(a1[6], 0.3127) >= 0.001
     || vabds_f32(a1[7], 0.329) >= 0.001))
  {
    if (a2 == 1.0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Linear", 7);
    }
    else
    {
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" Gamma ", 7);
      *(_QWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 16) = 5;
      std::ostream::operator<<();
    }
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v12);
}

void sub_1B29AEE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void PCAsciiStream::PCAsciiStream(PCAsciiStream *this)
{
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 1, "");
  *((_BYTE *)this + 35) = 0;
  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
}

void PCAsciiStream::~PCAsciiStream(void **this)
{
  if (!*(_BYTE *)this && *((_BYTE *)this + 35))
    PCAsciiStream::close((PCAsciiStream *)this);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void PCAsciiStream::close(PCAsciiStream *this)
{
  if (!*(_BYTE *)this && *((_BYTE *)this + 35))
  {
    if (*((_BYTE *)this + 35) == 2)
      *((_BYTE *)this + 33) = 0;
    *((_BYTE *)this + 34) = 0;
    PCAsciiStream::encodeNewSize(this);
    std::string::push_back((std::string *)((char *)this + 8), encodeVals[(unint64_t)*((unsigned __int8 *)this + 32) >> 2]);
    std::string::push_back((std::string *)((char *)this + 8), encodeVals[((unint64_t)*((unsigned __int8 *)this + 33) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16* (*((_BYTE *)this + 32) & 3))]);
    std::string::push_back((std::string *)((char *)this + 8), encodeVals[((unint64_t)*((unsigned __int8 *)this + 34) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4* (*((_BYTE *)this + 33) & 0xF))]);
    std::string::push_back((std::string *)((char *)this + 8), encodeVals[*((_BYTE *)this + 34) & 0x3F]);
    *((_BYTE *)this + 35) = 0;
  }
}

BOOL PCAsciiStream::open(PCAsciiStream *this, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BOOL8 v13;
  unint64_t v15;

  MEMORY[0x1B5E28D80]((char *)this + 8);
  *((_BYTE *)this + 35) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_BYTE *)this = 1;
  if (*((char *)this + 31) < 0)
    v4 = *((_QWORD *)this + 2);
  else
    v4 = *((unsigned __int8 *)this + 31);
  if (v4 < 0xC)
  {
    MEMORY[0x1B5E28D80]((char *)this + 64, "Not enough data");
    return 0;
  }
  else
  {
    v5 = 0;
    v15 = 0;
    v6 = (char *)&v15 + 2;
    v7 = a2 + 1;
    while (1)
    {
      *((_QWORD *)this + 6) = v5 + 1;
      v8 = a2[v5];
      *((_QWORD *)this + 6) = v5 + 2;
      v9 = v7[v5];
      *((_QWORD *)this + 6) = v5 + 3;
      v10 = v7[v5 + 1];
      *((_QWORD *)this + 6) = v5 + 4;
      v11 = v7[v5 + 2];
      LODWORD(v9) = decodeVals[v9];
      LODWORD(v8) = (4 * decodeVals[v8]) | (v9 >> 4) & 3;
      *((_BYTE *)this + 32) = v8;
      LODWORD(v10) = decodeVals[v10];
      LODWORD(v9) = (16 * v9) | (v10 >> 2) & 0xF;
      *((_BYTE *)this + 33) = v9;
      v12 = decodeVals[v11] & 0x3F | ((_BYTE)v10 << 6);
      *((_BYTE *)this + 34) = v12;
      *(v6 - 2) = v8;
      *(v6 - 1) = v9;
      if (v5 == 8)
        break;
      *v6 = v12;
      v6 += 3;
      v5 += 4;
    }
    *((_QWORD *)this + 7) = bswap64(v15);
    v13 = v12 == 42;
    if (v12 != 42)
      MEMORY[0x1B5E28D80]((char *)this + 64, "Magic Number does not match");
  }
  return v13;
}

unint64_t PCAsciiStream::read(PCAsciiStream *this, _BYTE *a2, unint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char **v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  unsigned __int8 v22;

  v3 = *((_QWORD *)this + 5);
  v4 = v3 + a3;
  v5 = *((_QWORD *)this + 7);
  v6 = v5 - v3;
  if (v4 < v5)
    v6 = a3;
  if (v6)
  {
    v7 = 0;
    v8 = (char **)((char *)this + 8);
    LOBYTE(v9) = *((_BYTE *)this + 35);
    while (v9 != 1)
    {
      if (v9 != 2)
        goto LABEL_12;
      a2[v7] = *((_BYTE *)this + 33);
      v10 = v7 + 1;
      ++*((_QWORD *)this + 5);
      LOBYTE(v9) = *((_BYTE *)this + 35) - 1;
      *((_BYTE *)this + 35) = v9;
      if (v7 + 1 < v6)
      {
        v9 = 2;
LABEL_10:
        a2[v10] = *((_BYTE *)this + 34);
        v7 += v9;
        ++*((_QWORD *)this + 5);
        LOBYTE(v9) = *((_BYTE *)this + 35) - 1;
        *((_BYTE *)this + 35) = v9;
        goto LABEL_12;
      }
      ++v7;
LABEL_12:
      if (v7 < v6 && !(_BYTE)v9)
      {
        v11 = *((_QWORD *)this + 6);
        *((_QWORD *)this + 6) = v11 + 1;
        v12 = (char *)this + 8;
        if (*((char *)this + 31) < 0)
          v12 = *v8;
        v9 = v12[v11];
        *((_QWORD *)this + 6) = v11 + 2;
        v13 = (char *)this + 8;
        if (*((char *)this + 31) < 0)
          v13 = *v8;
        v14 = v13[v11 + 1];
        v15 = v11 + 3;
        *((_QWORD *)this + 6) = v11 + 3;
        v16 = (char *)this + 8;
        if (*((char *)this + 31) < 0)
          v16 = *v8;
        v17 = v16[v11 + 2];
        *((_QWORD *)this + 6) = v11 + 4;
        v18 = (char *)this + 8;
        if (*((char *)this + 31) < 0)
          v18 = *v8;
        v19 = v18[v15];
        v20 = decodeVals[v14];
        v21 = (4 * decodeVals[v9]) | (v20 >> 4) & 3;
        *((_BYTE *)this + 32) = v21;
        v22 = decodeVals[v17];
        *((_BYTE *)this + 33) = (16 * v20) | (v22 >> 2) & 0xF;
        *((_BYTE *)this + 34) = decodeVals[v19] & 0x3F | (v22 << 6);
        a2[v7++] = v21;
        ++*((_QWORD *)this + 5);
        LOBYTE(v9) = 2;
        *((_BYTE *)this + 35) = 2;
      }
      if (v7 >= v6)
        return v6;
    }
    v9 = v9;
    v10 = v7;
    goto LABEL_10;
  }
  return v6;
}

unint64_t PCAsciiStream::write(PCAsciiStream *this, _BYTE *a2, unint64_t a3)
{
  unint64_t v6;
  std::string *v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (a3)
  {
    v6 = 0;
    v7 = (std::string *)((char *)this + 8);
    while (1)
    {
      v8 = *((unsigned __int8 *)this + 35);
      if (!*((_BYTE *)this + 35))
        break;
      if (v8 == 2)
      {
        *((_BYTE *)this + 35) = 1;
        *((_BYTE *)this + 33) = a2[v6];
        v9 = v6 + 1;
        v10 = *((_QWORD *)this + 7);
        *((_QWORD *)this + 7) = v10 + 1;
        if (v6 + 1 < a3)
        {
          *((_BYTE *)this + 35) = 0;
          *((_BYTE *)this + 34) = a2[v9];
          v9 = v6 + 2;
          v11 = v10 + 2;
LABEL_11:
          *((_QWORD *)this + 7) = v11;
LABEL_13:
          PCAsciiStream::encodeNewSize(this);
          std::string::push_back(v7, encodeVals[(unint64_t)*((unsigned __int8 *)this + 32) >> 2]);
          std::string::push_back(v7, encodeVals[((unint64_t)*((unsigned __int8 *)this + 33) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (*((_BYTE *)this + 32) & 3))]);
          std::string::push_back(v7, encodeVals[((unint64_t)*((unsigned __int8 *)this + 34) >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (*((_BYTE *)this + 33) & 0xF))]);
          std::string::push_back(v7, encodeVals[*((_BYTE *)this + 34) & 0x3F]);
        }
      }
      else
      {
        v14 = v8 - 1;
        *((_BYTE *)this + 35) = v14;
        *((_BYTE *)this + 34) = a2[v6];
        v9 = v6 + 1;
        ++*((_QWORD *)this + 7);
        if (!v14)
          goto LABEL_13;
      }
LABEL_14:
      v6 = v9;
      if (v9 >= a3)
        return a3;
    }
    *((_BYTE *)this + 35) = 2;
    *((_BYTE *)this + 32) = a2[v6];
    v9 = v6 + 1;
    v12 = *((_QWORD *)this + 7);
    v13 = v12 + 1;
    *((_QWORD *)this + 7) = v12 + 1;
    if (v6 + 1 < a3)
    {
      *((_BYTE *)this + 35) = 1;
      *((_BYTE *)this + 33) = a2[v9];
      v9 = v6 + 2;
      v13 = v12 + 2;
      *((_QWORD *)this + 7) = v12 + 2;
    }
    if (v9 >= a3)
      goto LABEL_14;
    *((_BYTE *)this + 35) = 0;
    *((_BYTE *)this + 34) = a2[v9++];
    v11 = v13 + 1;
    goto LABEL_11;
  }
  return a3;
}

void PCAsciiStream::encodeNewSize(PCAsciiStream *this)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  char *v5;
  int v6;
  _BYTE *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v2 = *((char *)this + 31);
  if (v2 < 0)
    v3 = *((_QWORD *)this + 2);
  else
    v3 = *((unsigned __int8 *)this + 31);
  v4 = bswap64(*((_QWORD *)this + 7));
  v5 = (char *)this + 8;
  if (!v3)
  {
    v6 = 12;
    do
    {
      std::string::push_back((std::string *)((char *)this + 8), 0);
      --v6;
    }
    while (v6);
    LOBYTE(v2) = *((_BYTE *)this + 31);
  }
  v7 = (char *)this + 8;
  if ((v2 & 0x80) != 0)
    v7 = *(_BYTE **)v5;
  *v7 = encodeVals[v4 >> 2];
  v8 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v8 = *(char **)v5;
  v8[1] = encodeVals[((unsigned __int16)v4 >> 12) & 0xFFFFFFFFFFFFFFCFLL | (16 * (v4 & 3))];
  v9 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v9 = *(char **)v5;
  v9[2] = encodeVals[(v4 >> 6) & 0x3C | (v4 >> 22) & 3];
  v10 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v10 = *(char **)v5;
  v10[3] = encodeVals[(v4 >> 16) & 0x3F];
  v11 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v11 = *(char **)v5;
  v11[4] = encodeVals[v4 >> 26];
  v12 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v12 = *(char **)v5;
  v12[5] = encodeVals[(v4 >> 20) & 0x30 | (v4 >> 36) & 0xF];
  v13 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v13 = *(char **)v5;
  v13[6] = encodeVals[(v4 >> 30) & 0x3C | (v4 >> 46) & 3];
  v14 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v14 = *(char **)v5;
  v14[7] = encodeVals[(v4 >> 40) & 0x3F];
  v15 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v15 = *(char **)v5;
  v15[8] = encodeVals[(v4 >> 50) & 0x3F];
  v16 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v16 = *(char **)v5;
  v16[9] = encodeVals[(v4 >> 44) & 0x30 | (v4 >> 60)];
  v17 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v17 = *(char **)v5;
  v17[10] = encodeVals[(v4 >> 54) & 0x3C];
  if (*((char *)this + 31) < 0)
    v5 = *(char **)v5;
  v5[11] = 101;
}

PCString *PCAsciiStream::getString@<X0>(PCAsciiStream *this@<X0>, PCString *a2@<X8>)
{
  const char *v2;

  v2 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
    v2 = *(const char **)v2;
  return PCString::PCString(a2, v2);
}

void PCSharedMutex::PCSharedMutex(PCSharedMutex *this)
{
  *(_QWORD *)this = 850045863;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 0;
  std::vector<PCSharedMutex::ReaderInfo>::reserve((char **)this + 10, 3uLL);
}

void sub_1B29AF680(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  std::mutex::~mutex((std::mutex *)v1);
  _Unwind_Resume(a1);
}

void std::vector<PCSharedMutex::ReaderInfo>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 2);
        v10 -= 16;
        v14 = *((_DWORD *)v10 + 2);
        *((_QWORD *)v12 - 2) = v13;
        v12 -= 16;
        *((_DWORD *)v12 + 2) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void PCSharedMutex::lock(std::mutex *this)
{
  pthread_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  std::chrono::nanoseconds __ns;

  v2 = pthread_self();
  std::mutex::lock(this);
  v3 = (unint64_t *)&this[1];
  v4 = atomic_load((unint64_t *)&this[1]);
  if (v4)
  {
    if (v2 && v2 == (pthread_t)v4)
      goto LABEL_4;
  }
  else if (!v2)
  {
LABEL_4:
    ++*(_DWORD *)this[1].__m_.__opaque;
    std::mutex::unlock(this);
    return;
  }
  std::mutex::unlock(this);
  if (__ldaxr(v3))
  {
LABEL_7:
    __clrex();
    goto LABEL_8;
  }
  if (__stlxr((unint64_t)v2, v3))
  {
LABEL_8:
    while (1)
    {
      __ns.__rep_ = 100000;
      std::this_thread::sleep_for (&__ns);
      if (__ldaxr(v3))
        goto LABEL_7;
      if (!__stlxr((unint64_t)v2, v3))
        goto LABEL_10;
    }
  }
  do
  {
LABEL_10:
    std::mutex::lock(this);
    v8 = *(_QWORD *)&this[1].__m_.__opaque[8];
    v7 = *(_QWORD *)&this[1].__m_.__opaque[16];
    std::mutex::unlock(this);
  }
  while (v7 != v8);
}

void PCSharedMutex::lock_shared(std::mutex *this)
{
  pthread_t v2;
  unint64_t v3;
  char *opaque;
  _QWORD *v5;
  char *v6;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;

  v2 = pthread_self();
  std::mutex::lock(this);
  v3 = atomic_load((unint64_t *)&this[1]);
  if (v3)
  {
    if (v2 && v2 == (pthread_t)v3)
    {
LABEL_4:
      opaque = this[1].__m_.__opaque;
LABEL_26:
      ++*(_DWORD *)opaque;
      goto LABEL_34;
    }
  }
  else if (!v2)
  {
    goto LABEL_4;
  }
  v5 = *(_QWORD **)&this[1].__m_.__opaque[8];
  v6 = &this[1].__m_.__opaque[8];
  while (v5 != *(_QWORD **)&this[1].__m_.__opaque[16])
  {
    if (*v5)
    {
      if (v2 && (pthread_t)*v5 == v2)
      {
LABEL_25:
        opaque = (char *)(v5 + 1);
        goto LABEL_26;
      }
    }
    else if (!v2)
    {
      goto LABEL_25;
    }
    v5 += 2;
  }
  do
  {
    std::mutex::unlock(this);
    std::mutex::lock(this);
  }
  while (atomic_load((unint64_t *)&this[1]));
  v8 = *(_QWORD *)&this[1].__m_.__opaque[24];
  v9 = *(_QWORD *)&this[1].__m_.__opaque[16];
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *(_QWORD *)v6) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v13 = v8 - *(_QWORD *)v6;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>((uint64_t)&this[1].__m_.__opaque[24], v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_QWORD *)v16 = v2;
    *((_DWORD *)v16 + 2) = 1;
    v10 = v16 + 16;
    v19 = *(_DWORD **)&this[1].__m_.__opaque[8];
    v18 = *(_DWORD **)&this[1].__m_.__opaque[16];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 2);
        v18 -= 4;
        v21 = v18[2];
        *((_QWORD *)v16 - 2) = v20;
        v16 -= 16;
        *((_DWORD *)v16 + 2) = v21;
      }
      while (v18 != v19);
      v18 = *(_DWORD **)v6;
    }
    *(_QWORD *)&this[1].__m_.__opaque[8] = v16;
    *(_QWORD *)&this[1].__m_.__opaque[16] = v10;
    *(_QWORD *)&this[1].__m_.__opaque[24] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v9 = v2;
    *(_DWORD *)(v9 + 8) = 1;
    v10 = (char *)(v9 + 16);
  }
  *(_QWORD *)&this[1].__m_.__opaque[16] = v10;
LABEL_34:
  std::mutex::unlock(this);
}

void sub_1B29AF9B0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void PCSharedMutex::unlock(std::mutex *this)
{
  int v2;

  std::mutex::lock(this);
  v2 = *(_DWORD *)this[1].__m_.__opaque;
  if (v2)
    *(_DWORD *)this[1].__m_.__opaque = v2 - 1;
  else
    atomic_store(0, (unint64_t *)&this[1]);
  std::mutex::unlock(this);
}

void PCSharedMutex::unlock_shared(std::mutex *this)
{
  pthread_t v2;
  unint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _opaque_pthread_t *v7;
  char *v8;
  int v9;
  int64_t v10;

  v2 = pthread_self();
  std::mutex::lock(this);
  v3 = atomic_load((unint64_t *)&this[1]);
  if (v3)
  {
    if (v2 && v2 == (pthread_t)v3)
      goto LABEL_4;
  }
  else if (!v2)
  {
LABEL_4:
    --*(_DWORD *)this[1].__m_.__opaque;
    goto LABEL_20;
  }
  v5 = *(char **)&this[1].__m_.__opaque[8];
  v4 = *(char **)&this[1].__m_.__opaque[16];
  if (v5 == v4)
    goto LABEL_20;
  v6 = 0;
  while (1)
  {
    v7 = *(_opaque_pthread_t **)&v5[v6];
    if (v7)
      break;
    if (!v2)
      goto LABEL_15;
LABEL_13:
    v6 += 16;
    if (&v5[v6] == v4)
      goto LABEL_20;
  }
  if (!v2 || v7 != v2)
    goto LABEL_13;
LABEL_15:
  v8 = &v5[v6];
  v9 = *(_DWORD *)&v5[v6 + 8] - 1;
  if (v9)
  {
    *((_DWORD *)v8 + 2) = v9;
  }
  else
  {
    v10 = v4 - (v8 + 16);
    if (v4 != v8 + 16)
      memmove(v8, v8 + 16, v10 - 4);
    *(_QWORD *)&this[1].__m_.__opaque[16] = &v8[v10];
  }
LABEL_20:
  std::mutex::unlock(this);
}

void PCHashWriteStream::PCHashWriteStream(PCHashWriteStream *this)
{
  _QWORD *v2;

  PCSerializerWriteStream::PCSerializerWriteStream(this);
  *v2 = &off_1E6512E98;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v2 + 4));
  *((_QWORD *)this + 6) = 0x100000001000;
  *((_QWORD *)this + 7) = (char *)this + 64;
}

void sub_1B29AFB2C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = &unk_1E6512FB0;
  v3 = (void *)v1[1];
  if (v3)
  {
    v1[2] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void PCHashWriteStream::~PCHashWriteStream(PCHashWriteStream *this)
{
  void *v2;

  *(_QWORD *)this = &unk_1E6512FB0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &unk_1E6512FB0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E29170);
}

int8x8_t *PCHashWriteStream::close(int8x8_t *this)
{
  int8x8_t *v1;
  __int32 v2;
  __int32 v3;

  v1 = this;
  v3 = this[6].i32[0];
  v2 = this[6].i32[1];
  if (v3 != v2)
  {
    this = PCHash128::addData(this + 4, (const unsigned __int8 *)&this[8], (v3 - v2));
    v2 = v1[6].i32[0];
  }
  v1[6].i32[1] = v2;
  v1[7] = (int8x8_t)&v1[8];
  return this;
}

uint64_t PCHashWriteStream::reset(uint64_t this)
{
  *(_DWORD *)(this + 52) = *(_DWORD *)(this + 48);
  *(_QWORD *)(this + 56) = this + 64;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  return this;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, int a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  int *p_src;
  size_t v7;
  size_t v8;
  int __src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 3)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 4;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (int *)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    **(_DWORD **)&this[7] = a2;
    this[6].i32[1] -= 4;
    *(_QWORD *)&this[7] += 4;
  }
  return this;
}

{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  int *p_src;
  size_t v7;
  size_t v8;
  int __src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 3)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 4;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (int *)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    **(_DWORD **)&this[7] = a2;
    this[6].i32[1] -= 4;
    *(_QWORD *)&this[7] += 4;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, uint64_t a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  uint64_t *p_src;
  size_t v7;
  size_t v8;
  uint64_t __src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 7)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 8;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (uint64_t *)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    **(_QWORD **)&this[7] = a2;
    this[6].i32[1] -= 8;
    *(_QWORD *)&this[7] += 8;
  }
  return this;
}

{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  uint64_t *p_src;
  size_t v7;
  size_t v8;
  uint64_t __src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 7)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 8;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (uint64_t *)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    **(_QWORD **)&this[7] = a2;
    this[6].i32[1] -= 8;
    *(_QWORD *)&this[7] += 8;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, float a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  float *p_src;
  size_t v7;
  size_t v8;
  float __src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 3)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 4;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (float *)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    *(float *)this[7].i32[0] = a2;
    this[6].i32[1] -= 4;
    *(_QWORD *)&this[7] += 4;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, double a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  double *p_src;
  size_t v7;
  size_t v8;
  double __src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 7)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 8;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (double *)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    *(double *)this[7] = a2;
    this[6].i32[1] -= 8;
    *(_QWORD *)&this[7] += 8;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *result, __int128 *a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  __int128 *v6;
  size_t v7;
  size_t v8;
  __int128 v9;

  v2 = result;
  v9 = *a2;
  v3 = result[6].u32[1];
  if (v3 <= 0xF)
  {
    v4 = result + 8;
    result = (int8x8_t *)result[7];
    v5 = 16;
    v6 = &v9;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(result, v6, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        result = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        result = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)result;
      v6 = (__int128 *)((char *)v6 + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    *(_OWORD *)*(_QWORD *)&result[7] = v9;
    result[6].i32[1] -= 16;
    *(_QWORD *)&result[7] += 16;
  }
  return result;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, const CMTime *__src)
{
  const CMTime *v2;
  int8x8_t *v3;
  unsigned int v4;
  int8x8_t v5;
  __int128 v6;
  int8x8_t *v7;
  unsigned int v8;
  size_t v9;
  size_t v10;

  v2 = __src;
  v3 = this;
  v4 = this[6].u32[1];
  if (v4 <= 0x17)
  {
    v7 = this + 8;
    this = (int8x8_t *)this[7];
    v8 = 24;
    do
    {
      if (v8 >= v4)
        v9 = v4;
      else
        v9 = v8;
      memcpy(this, v2, v9);
      v10 = v3[6].u32[0];
      if ((_DWORD)v9 == v3[6].i32[1])
      {
        PCHash128::addData(v3 + 4, (const unsigned __int8 *)&v3[8], v10);
        v4 = v3[6].u32[0];
        this = v3 + 8;
      }
      else
      {
        v4 = v10 - v9;
        this = (int8x8_t *)((char *)v7 + v9);
      }
      v3[6].i32[1] = v4;
      v3[7] = (int8x8_t)this;
      v2 = (const CMTime *)((char *)v2 + v9);
      v8 -= v9;
    }
    while (v8);
  }
  else
  {
    v5 = this[7];
    v6 = *(_OWORD *)&__src->value;
    *(_QWORD *)(*(_QWORD *)&v5 + 16) = __src->epoch;
    *(_OWORD *)*(_QWORD *)&v5 = v6;
    this[6].i32[1] -= 24;
    *(_QWORD *)&this[7] += 24;
  }
  return this;
}

void PCHashWriteStream::writeValue(int8x8_t *this, PCString *a2)
{
  UniChar *UniStr;
  UniChar *v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int8x8_t *v8;
  UniChar *v9;
  size_t v10;
  size_t v11;
  BOOL v12;

  UniStr = PCString::createUniStr(a2);
  v4 = UniStr;
  if (!UniStr)
    goto LABEL_20;
  if (*UniStr)
  {
    v5 = 2;
    do
    {
      v6 = *(UniChar *)((char *)UniStr + v5);
      v5 += 2;
    }
    while (v6);
    v7 = this[6].u32[1];
    if (v7 < v5)
    {
      if ((int)v5 < 1)
        goto LABEL_20;
      goto LABEL_9;
    }
LABEL_19:
    memcpy(*(void **)&this[7], UniStr, (int)v5);
    this[6].i32[1] -= v5;
    *(_QWORD *)&this[7] += (int)v5;
    goto LABEL_20;
  }
  v7 = this[6].u32[1];
  LODWORD(v5) = 2;
  if (v7 >= 2)
    goto LABEL_19;
LABEL_9:
  v8 = (int8x8_t *)this[7];
  v9 = v4;
  do
  {
    if (v5 >= v7)
      v10 = v7;
    else
      v10 = v5;
    memcpy(v8, v9, v10);
    v11 = this[6].u32[0];
    if ((_DWORD)v10 == this[6].i32[1])
    {
      PCHash128::addData(this + 4, (const unsigned __int8 *)&this[8], v11);
      v7 = this[6].u32[0];
      v8 = this + 8;
    }
    else
    {
      v7 = v11 - v10;
      v8 = (int8x8_t *)((char *)this + v10 + 64);
    }
    this[6].i32[1] = v7;
    this[7] = (int8x8_t)v8;
    v9 = (UniChar *)((char *)v9 + v10);
    v12 = __OFSUB__((_DWORD)v5, (_DWORD)v10);
    LODWORD(v5) = v5 - v10;
  }
  while (!(((int)v5 < 0) ^ v12 | ((_DWORD)v5 == 0)));
LABEL_20:
  free(v4);
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, const void *a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  const void **p_src;
  size_t v7;
  size_t v8;
  const void *__src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 7)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 8;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (const void **)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    **(_QWORD **)&this[7] = a2;
    this[6].i32[1] -= 8;
    *(_QWORD *)&this[7] += 8;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, const PCHash128 *a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  __int128 *v6;
  size_t v7;
  size_t v8;
  __int128 v9;

  v2 = this;
  v9 = *(_OWORD *)a2;
  v3 = this[6].u32[1];
  if (v3 <= 0xF)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 16;
    v6 = &v9;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, v6, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      v6 = (__int128 *)((char *)v6 + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    *(_OWORD *)*(_QWORD *)&this[7] = v9;
    this[6].i32[1] -= 16;
    *(_QWORD *)&this[7] += 16;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, const char *__s)
{
  const char *v2;
  unsigned __int32 v4;
  unsigned __int32 v5;
  int8x8_t *result;
  size_t v7;
  size_t v8;

  v2 = __s;
  v4 = strlen(__s);
  v5 = this[6].u32[1];
  if (v5 >= v4)
  {
    result = (int8x8_t *)memcpy(*(void **)&this[7], v2, v4);
    this[6].i32[1] -= v4;
    *(_QWORD *)&this[7] += v4;
  }
  else
  {
    result = (int8x8_t *)this[7];
    do
    {
      if (v4 >= v5)
        v7 = v5;
      else
        v7 = v4;
      memcpy(result, v2, v7);
      v8 = this[6].u32[0];
      if ((_DWORD)v7 == this[6].i32[1])
      {
        PCHash128::addData(this + 4, (const unsigned __int8 *)&this[8], v8);
        v5 = this[6].u32[0];
        result = this + 8;
      }
      else
      {
        v5 = v8 - v7;
        result = (int8x8_t *)((char *)this + v7 + 64);
      }
      this[6].i32[1] = v5;
      this[7] = (int8x8_t)result;
      v2 += v7;
      v4 -= v7;
    }
    while (v4);
  }
  return result;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, char a2)
{
  int8x8_t *v2;
  __int32 v3;
  int8x8_t *v4;
  char *p_src;
  __int32 v6;
  size_t v7;
  size_t v8;
  char __src;

  v2 = this;
  __src = a2;
  v3 = this[6].i32[1];
  if (v3)
  {
    **(_BYTE **)&this[7] = a2;
    --this[6].i32[1];
    ++*(_QWORD *)&this[7];
  }
  else
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    p_src = &__src;
    do
    {
      v6 = v3;
      v7 = v3 != 0;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if (v2[6].i32[1] == (_DWORD)v7)
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].i32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src += v7;
    }
    while (!v6);
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeValue(int8x8_t *this, __int16 a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  __int16 *p_src;
  size_t v7;
  size_t v8;
  __int16 __src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 1)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 2;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (__int16 *)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    **(_WORD **)&this[7] = a2;
    this[6].i32[1] -= 2;
    *(_QWORD *)&this[7] += 2;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeData(int8x8_t *this, char *__src, size_t __n)
{
  unsigned int v3;
  char *v4;
  unsigned int v6;
  int8x8_t *v7;
  int8x8_t *result;
  size_t v9;
  size_t v10;

  v3 = __n;
  v4 = __src;
  v6 = this[6].u32[1];
  if (v6 >= __n)
  {
    result = (int8x8_t *)memcpy(*(void **)&this[7], __src, __n);
    this[6].i32[1] -= v3;
    *(_QWORD *)&this[7] += v3;
  }
  else
  {
    v7 = this + 8;
    result = (int8x8_t *)this[7];
    do
    {
      if (v3 >= v6)
        v9 = v6;
      else
        v9 = v3;
      memcpy(result, v4, v9);
      v10 = this[6].u32[0];
      if ((_DWORD)v9 == this[6].i32[1])
      {
        PCHash128::addData(this + 4, (const unsigned __int8 *)&this[8], v10);
        v6 = this[6].u32[0];
        result = this + 8;
      }
      else
      {
        v6 = v10 - v9;
        result = (int8x8_t *)((char *)v7 + v9);
      }
      this[6].i32[1] = v6;
      this[7] = (int8x8_t)result;
      v4 += v9;
      v3 -= v9;
    }
    while (v3);
  }
  return result;
}

int8x8_t *PCHashWriteStream::writeAttribute(int8x8_t *this, unsigned int a2, int a3)
{
  int8x8_t *v3;
  unsigned int v4;
  int8x8_t *v5;
  unsigned int v6;
  int *p_src;
  size_t v8;
  size_t v9;
  int __src;

  v3 = this;
  __src = a3;
  v4 = this[6].u32[1];
  if (v4 <= 3)
  {
    v5 = this + 8;
    this = (int8x8_t *)this[7];
    v6 = 4;
    p_src = &__src;
    do
    {
      if (v6 >= v4)
        v8 = v4;
      else
        v8 = v6;
      memcpy(this, p_src, v8);
      v9 = v3[6].u32[0];
      if ((_DWORD)v8 == v3[6].i32[1])
      {
        PCHash128::addData(v3 + 4, (const unsigned __int8 *)&v3[8], v9);
        v4 = v3[6].u32[0];
        this = v3 + 8;
      }
      else
      {
        v4 = v9 - v8;
        this = (int8x8_t *)((char *)v5 + v8);
      }
      v3[6].i32[1] = v4;
      v3[7] = (int8x8_t)this;
      p_src = (int *)((char *)p_src + v8);
      v6 -= v8;
    }
    while (v6);
  }
  else
  {
    **(_DWORD **)&this[7] = a3;
    this[6].i32[1] -= 4;
    *(_QWORD *)&this[7] += 4;
  }
  return this;
}

{
  int8x8_t *v3;
  unsigned int v4;
  int8x8_t *v5;
  unsigned int v6;
  int *p_src;
  size_t v8;
  size_t v9;
  int __src;

  v3 = this;
  __src = a3;
  v4 = this[6].u32[1];
  if (v4 <= 3)
  {
    v5 = this + 8;
    this = (int8x8_t *)this[7];
    v6 = 4;
    p_src = &__src;
    do
    {
      if (v6 >= v4)
        v8 = v4;
      else
        v8 = v6;
      memcpy(this, p_src, v8);
      v9 = v3[6].u32[0];
      if ((_DWORD)v8 == v3[6].i32[1])
      {
        PCHash128::addData(v3 + 4, (const unsigned __int8 *)&v3[8], v9);
        v4 = v3[6].u32[0];
        this = v3 + 8;
      }
      else
      {
        v4 = v9 - v8;
        this = (int8x8_t *)((char *)v5 + v8);
      }
      v3[6].i32[1] = v4;
      v3[7] = (int8x8_t)this;
      p_src = (int *)((char *)p_src + v8);
      v6 -= v8;
    }
    while (v6);
  }
  else
  {
    **(_DWORD **)&this[7] = a3;
    this[6].i32[1] -= 4;
    *(_QWORD *)&this[7] += 4;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeAttribute(int8x8_t *this, unsigned int a2, uint64_t a3)
{
  int8x8_t *v3;
  unsigned int v4;
  int8x8_t *v5;
  unsigned int v6;
  uint64_t *p_src;
  size_t v8;
  size_t v9;
  uint64_t __src;

  v3 = this;
  __src = a3;
  v4 = this[6].u32[1];
  if (v4 <= 7)
  {
    v5 = this + 8;
    this = (int8x8_t *)this[7];
    v6 = 8;
    p_src = &__src;
    do
    {
      if (v6 >= v4)
        v8 = v4;
      else
        v8 = v6;
      memcpy(this, p_src, v8);
      v9 = v3[6].u32[0];
      if ((_DWORD)v8 == v3[6].i32[1])
      {
        PCHash128::addData(v3 + 4, (const unsigned __int8 *)&v3[8], v9);
        v4 = v3[6].u32[0];
        this = v3 + 8;
      }
      else
      {
        v4 = v9 - v8;
        this = (int8x8_t *)((char *)v5 + v8);
      }
      v3[6].i32[1] = v4;
      v3[7] = (int8x8_t)this;
      p_src = (uint64_t *)((char *)p_src + v8);
      v6 -= v8;
    }
    while (v6);
  }
  else
  {
    **(_QWORD **)&this[7] = a3;
    this[6].i32[1] -= 8;
    *(_QWORD *)&this[7] += 8;
  }
  return this;
}

{
  int8x8_t *v3;
  unsigned int v4;
  int8x8_t *v5;
  unsigned int v6;
  uint64_t *p_src;
  size_t v8;
  size_t v9;
  uint64_t __src;

  v3 = this;
  __src = a3;
  v4 = this[6].u32[1];
  if (v4 <= 7)
  {
    v5 = this + 8;
    this = (int8x8_t *)this[7];
    v6 = 8;
    p_src = &__src;
    do
    {
      if (v6 >= v4)
        v8 = v4;
      else
        v8 = v6;
      memcpy(this, p_src, v8);
      v9 = v3[6].u32[0];
      if ((_DWORD)v8 == v3[6].i32[1])
      {
        PCHash128::addData(v3 + 4, (const unsigned __int8 *)&v3[8], v9);
        v4 = v3[6].u32[0];
        this = v3 + 8;
      }
      else
      {
        v4 = v9 - v8;
        this = (int8x8_t *)((char *)v5 + v8);
      }
      v3[6].i32[1] = v4;
      v3[7] = (int8x8_t)this;
      p_src = (uint64_t *)((char *)p_src + v8);
      v6 -= v8;
    }
    while (v6);
  }
  else
  {
    **(_QWORD **)&this[7] = a3;
    this[6].i32[1] -= 8;
    *(_QWORD *)&this[7] += 8;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeAttribute(int8x8_t *this, float a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  float *p_src;
  size_t v7;
  size_t v8;
  float __src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 3)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 4;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (float *)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    *(float *)this[7].i32[0] = a2;
    this[6].i32[1] -= 4;
    *(_QWORD *)&this[7] += 4;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeAttribute(int8x8_t *this, double a2)
{
  int8x8_t *v2;
  unsigned int v3;
  int8x8_t *v4;
  unsigned int v5;
  double *p_src;
  size_t v7;
  size_t v8;
  double __src;

  v2 = this;
  __src = a2;
  v3 = this[6].u32[1];
  if (v3 <= 7)
  {
    v4 = this + 8;
    this = (int8x8_t *)this[7];
    v5 = 8;
    p_src = &__src;
    do
    {
      if (v5 >= v3)
        v7 = v3;
      else
        v7 = v5;
      memcpy(this, p_src, v7);
      v8 = v2[6].u32[0];
      if ((_DWORD)v7 == v2[6].i32[1])
      {
        PCHash128::addData(v2 + 4, (const unsigned __int8 *)&v2[8], v8);
        v3 = v2[6].u32[0];
        this = v2 + 8;
      }
      else
      {
        v3 = v8 - v7;
        this = (int8x8_t *)((char *)v4 + v7);
      }
      v2[6].i32[1] = v3;
      v2[7] = (int8x8_t)this;
      p_src = (double *)((char *)p_src + v7);
      v5 -= v7;
    }
    while (v5);
  }
  else
  {
    *(double *)this[7] = a2;
    this[6].i32[1] -= 8;
    *(_QWORD *)&this[7] += 8;
  }
  return this;
}

int8x8_t *PCHashWriteStream::writeAttribute(int8x8_t *result, uint64_t a2, __int128 *a3)
{
  int8x8_t *v3;
  unsigned int v4;
  int8x8_t *v5;
  unsigned int v6;
  __int128 *v7;
  size_t v8;
  size_t v9;
  __int128 v10;

  v3 = result;
  v10 = *a3;
  v4 = result[6].u32[1];
  if (v4 <= 0xF)
  {
    v5 = result + 8;
    result = (int8x8_t *)result[7];
    v6 = 16;
    v7 = &v10;
    do
    {
      if (v6 >= v4)
        v8 = v4;
      else
        v8 = v6;
      memcpy(result, v7, v8);
      v9 = v3[6].u32[0];
      if ((_DWORD)v8 == v3[6].i32[1])
      {
        PCHash128::addData(v3 + 4, (const unsigned __int8 *)&v3[8], v9);
        v4 = v3[6].u32[0];
        result = v3 + 8;
      }
      else
      {
        v4 = v9 - v8;
        result = (int8x8_t *)((char *)v5 + v8);
      }
      v3[6].i32[1] = v4;
      v3[7] = (int8x8_t)result;
      v7 = (__int128 *)((char *)v7 + v8);
      v6 -= v8;
    }
    while (v6);
  }
  else
  {
    *(_OWORD *)*(_QWORD *)&result[7] = v10;
    result[6].i32[1] -= 16;
    *(_QWORD *)&result[7] += 16;
  }
  return result;
}

int8x8_t *PCHashWriteStream::writeAttribute(int8x8_t *this, unsigned int a2, const CMTime *__src)
{
  const CMTime *v3;
  int8x8_t *v4;
  unsigned int v5;
  int8x8_t v6;
  __int128 v7;
  int8x8_t *v8;
  unsigned int v9;
  size_t v10;
  size_t v11;

  v3 = __src;
  v4 = this;
  v5 = this[6].u32[1];
  if (v5 <= 0x17)
  {
    v8 = this + 8;
    this = (int8x8_t *)this[7];
    v9 = 24;
    do
    {
      if (v9 >= v5)
        v10 = v5;
      else
        v10 = v9;
      memcpy(this, v3, v10);
      v11 = v4[6].u32[0];
      if ((_DWORD)v10 == v4[6].i32[1])
      {
        PCHash128::addData(v4 + 4, (const unsigned __int8 *)&v4[8], v11);
        v5 = v4[6].u32[0];
        this = v4 + 8;
      }
      else
      {
        v5 = v11 - v10;
        this = (int8x8_t *)((char *)v8 + v10);
      }
      v4[6].i32[1] = v5;
      v4[7] = (int8x8_t)this;
      v3 = (const CMTime *)((char *)v3 + v10);
      v9 -= v10;
    }
    while (v9);
  }
  else
  {
    v6 = this[7];
    v7 = *(_OWORD *)&__src->value;
    *(_QWORD *)(*(_QWORD *)&v6 + 16) = __src->epoch;
    *(_OWORD *)*(_QWORD *)&v6 = v7;
    this[6].i32[1] -= 24;
    *(_QWORD *)&this[7] += 24;
  }
  return this;
}

uint64_t PCHashWriteStream::writeAttribute(PCHashWriteStream *this, unsigned int a2, const PCString *a3)
{
  return (*(uint64_t (**)(PCHashWriteStream *, const PCString *))(*(_QWORD *)this + 104))(this, a3);
}

int8x8_t *PCHashWriteStream::getHash(int8x8_t *this)
{
  __int32 v2;
  __int32 v3;

  v3 = this[6].i32[0];
  v2 = this[6].i32[1];
  if (v3 != v2)
  {
    PCHash128::addData(this + 4, (const unsigned __int8 *)&this[8], (v3 - v2));
    v2 = this[6].i32[0];
  }
  this[6].i32[1] = v2;
  this[7] = (int8x8_t)&this[8];
  return this + 4;
}

__n128 PCHashWriteStream::setHash(__n128 *this, __n128 *a2)
{
  __n128 result;

  this[3].n128_u32[1] = this[3].n128_u32[0];
  this[3].n128_u64[1] = (unint64_t)this[4].n128_u64;
  result = *a2;
  this[2] = *a2;
  return result;
}

uint64_t PCHashWriteStream::isHashStream(PCHashWriteStream *this)
{
  return 1;
}

uint64_t PCSerializerWriteStream::isHashStream(PCSerializerWriteStream *this)
{
  return 0;
}

void PCSerializerReadStream::~PCSerializerReadStream(PCSerializerReadStream *this)
{
  _QWORD *i;
  uint64_t v3;

  *(_QWORD *)this = off_1E65130B0;
  for (i = (_QWORD *)((char *)this + 8); ; std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](i, 1))
  {
    v3 = *((_QWORD *)this + 6);
    if (!v3)
      break;
    (*(void (**)(PCSerializerReadStream *, _QWORD))(*(_QWORD *)this + 48))(this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2)+ (((unint64_t)(v3 + *((_QWORD *)this + 5) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v3 + *((_QWORD *)this + 5) - 1) & 0x1FF)));
    --*((_QWORD *)this + 6);
  }
  std::deque<PCSerializerReadStream::HandlerInfo>::~deque[abi:ne180100]((_QWORD *)this + 7);
  std::deque<unsigned long>::~deque[abi:ne180100](i);
}

uint64_t PCSerializerReadStream::pushHandler(PCSerializerReadStream *this, PCSerializer *a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  void *__p;
  void *v9;
  uint64_t v10;
  PCSerializer *v11;
  uint64_t v12;

  __p = 0;
  v9 = 0;
  v10 = 0;
  v11 = a2;
  v4 = *((_QWORD *)this + 6);
  if (v4)
    v12 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2)
                                + (((unint64_t)(v4 + *((_QWORD *)this + 5) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * ((v4 + *((_QWORD *)this + 5) - 1) & 0x1FF));
  v5 = std::deque<PCSerializerReadStream::HandlerInfo>::push_back((_QWORD *)this + 7, (uint64_t)&__p);
  v6 = (*(uint64_t (**)(PCSerializer *, PCSerializerReadStream *, __n128))(*(_QWORD *)a2 + 40))(a2, this, v5);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return v6;
}

void sub_1B29B1130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *PCSerializerReadStream::popHandler(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = this[12];
  if (v1)
  {
    v2 = this;
    v3 = this + 7;
    v4 = *(_QWORD *)(*(_QWORD *)(this[8] + 8 * ((v1 + this[11] - 1) / 0x66uLL))
                   + 40 * ((v1 + this[11] - 1) % 0x66uLL)
                   + 24);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v2);
    return (_QWORD *)std::deque<PCSerializerReadStream::HandlerInfo>::pop_back(v3);
  }
  return this;
}

_QWORD *PCSerializerReadStream::popAllHandlers(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = this[12];
  if (v1)
  {
    v2 = this;
    v3 = this + 7;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v2[8] + 8 * ((v1 + v2[11] - 1) / 0x66uLL)) + 40 * ((v1 + v2[11] - 1) % 0x66uLL) + 24);
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 48))(v4, v2);
      this = (_QWORD *)std::deque<PCSerializerReadStream::HandlerInfo>::pop_back(v3);
      v1 = v2[12];
    }
    while (v1);
  }
  return this;
}

uint64_t PCSerializerReadStream::ignoreElement(PCSerializerReadStream *this)
{
  unsigned __int8 v1;
  int v3;
  PCSerializerReadStream *v4;

  if ((v1 & 1) == 0)
  {
    v4 = this;
    this = v4;
    if (v3)
    {
      this = v4;
    }
  }
  return PCSerializerReadStream::pushHandler(this, (PCSerializer *)&PCSerializerReadStream::ignoreElement(void)::ignoreHandler);
}

void PCSerializerReadStream::pushElement(PCSerializerReadStream *this, PCStreamElement *a2)
{
  PCStreamElement *v2;

  v2 = a2;
  std::deque<PCStreamElement *>::push_back((_QWORD *)this + 1, &v2);
}

_QWORD *PCSerializerReadStream::popElement(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = this[6];
  if (v1)
  {
    v2 = this;
    v3 = this + 1;
    (*(void (**)(_QWORD *, _QWORD))(*this + 48))(this, *(_QWORD *)(*(_QWORD *)(this[2] + (((unint64_t)(v1 + this[5] - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v1 + this[5] - 1) & 0x1FF)));
    --v2[6];
    return (_QWORD *)std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](v3, 1);
  }
  return this;
}

void PCSerializerReadStream::pushScope(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void **v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v2 = a1[12];
  if (v2)
  {
    v4 = (void **)(*(_QWORD *)(a1[8] + 8 * ((v2 + a1[11] - 1) / 0x66uLL)) + 40 * ((v2 + a1[11] - 1) % 0x66uLL));
    v5 = v4[1];
    v6 = (unint64_t)v4[2];
    if ((unint64_t)v5 >= v6)
    {
      v8 = ((char *)v5 - (_BYTE *)*v4) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v9 = v6 - (_QWORD)*v4;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(v4 + 2), v11);
      else
        v12 = 0;
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v7 = v13 + 8;
      v16 = (char *)*v4;
      v15 = (char *)v4[1];
      if (v15 != *v4)
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v13 - 1) = v17;
          v13 -= 8;
        }
        while (v15 != v16);
        v15 = (char *)*v4;
      }
      *v4 = v13;
      v4[1] = v7;
      v4[2] = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v5 = a2;
      v7 = v5 + 1;
    }
    v4[1] = v7;
  }
}

uint64_t PCSerializerReadStream::currentElement(PCSerializerReadStream *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2)
                                 + (((unint64_t)(v1 + *((_QWORD *)this + 5) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((v1 + *((_QWORD *)this + 5) - 1) & 0x1FF));
  else
    return 0;
}

uint64_t PCSerializerReadStream::currentHandlerElement(PCSerializerReadStream *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 12);
  if (v1)
    return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 8) + 8 * ((v1 + *((_QWORD *)this + 11) - 1) / 0x66uLL))
                     + 40 * ((v1 + *((_QWORD *)this + 11) - 1) % 0x66uLL)
                     + 32);
  else
    return 0;
}

BOOL PCSerializerReadStream::isLessThanVersion(PCSerializerReadStream *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;

  v3 = *((_DWORD *)this + 26);
  if (v3 < a2)
    return 1;
  if (v3 == a2)
    return *((_DWORD *)this + 27) < a3;
  return 0;
}

void PCSerializerReadStream::setTimeScale(PCSerializerReadStream *this, const CMTime *a2)
{
  __int128 v3;
  CMTime v4;

  v3 = *(_OWORD *)&a2->value;
  *((_QWORD *)this + 16) = a2->epoch;
  *((_OWORD *)this + 7) = v3;
  v4 = *a2;
  *((Float64 *)this + 17) = CMTimeGetSeconds(&v4);
  *((_BYTE *)this + 144) = 1;
}

uint64_t PCSerializerReadStream::getElementInfo(_QWORD *a1, char *__s2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v20;

  v5 = a1[12];
  if (!v5)
    return 0;
  v9 = v5 + a1[11] - 1;
  v10 = *(_QWORD *)(a1[8] + 8 * (v9 / 0x66));
  v11 = v9 % 0x66;
  v12 = (uint64_t *)(v10 + 40 * (v9 % 0x66));
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  v13 = *v12;
  if (v12[1] == *v12)
    return 0;
  v20 = v10;
  v15 = 0;
  while (1)
  {
    v16 = *(_QWORD *)(v13 + 8 * v15);
    *a4 = v16;
    if (v16)
    {
      v17 = *(const char **)v16;
      if (*(_QWORD *)v16)
        break;
    }
LABEL_10:
    ++v15;
    v13 = *v12;
    if (v15 >= (v12[1] - *v12) >> 3)
      return 0;
  }
  while (*(_DWORD *)(v16 + 12) || strcmp(v17, __s2) && strcmp(v17, "*"))
  {
    v18 = *(const char **)(v16 + 16);
    v16 += 16;
    v17 = v18;
    if (!v18)
      goto LABEL_10;
  }
  *a3 = v16;
  *a4 = *(_QWORD *)(*v12 + 8 * v15);
  *a5 = *(_QWORD *)(v20 + 40 * v11 + 24);
  return 1;
}

uint64_t PCSerializerReadStream::destroyElement(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

uint64_t PCSerializerReadStream::processElement(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = *(_QWORD *)(a2 + 24);
  if (result)
  {
    *(_BYTE *)(a2 + 12) = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 56))(result, a1);
  }
  return result;
}

uint64_t PCSerializerReadStream::getAsString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a3);
}

uint64_t PCSerializerReadStream::getAsInt32(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a3);
}

uint64_t PCSerializerReadStream::getAsUInt32(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a3);
}

uint64_t PCSerializerReadStream::getAsUInt64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a3);
}

uint64_t PCSerializerReadStream::getAsDouble(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a3);
}

uint64_t PCSerializerReadStream::getAsFigTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a3);
}

uint64_t PCSerializerReadStream::getAttributeAsString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, a3, a4);
}

uint64_t PCSerializerReadStream::getAttributeAsInt32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 104))(a2, a3, a4);
}

uint64_t PCSerializerReadStream::getAttributeAsUInt32(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 112))(a2, a3, a4);
}

uint64_t PCSerializerReadStream::getAttributeAsInt64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 120))(a2, a3, a4);
}

uint64_t PCSerializerReadStream::getAttributeAsUInt64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, a3, a4);
}

uint64_t PCSerializerReadStream::getAttributeAsDouble(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, a3, a4);
}

uint64_t PCSerializerReadStream::getAttributeAsBool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, a3, a4);
}

uint64_t PCSerializerReadStream::getAttributeAsUUID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 160))(a2, a3);
}

void PCIgnoreElement::~PCIgnoreElement(PCIgnoreElement *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t PCIgnoreElement::parseBegin(PCIgnoreElement *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t PCIgnoreElement::parseEnd(PCIgnoreElement *this, PCSerializerReadStream *a2)
{
  return 1;
}

uint64_t PCIgnoreElement::parseElement()
{
  return 1;
}

uint64_t std::deque<PCSerializerReadStream::HandlerInfo>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x66];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 40 * (v5 % 0x66);
    v9 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v8 != v9)
    {
      do
      {
        v10 = *(void **)v8;
        if (*(_QWORD *)v8)
        {
          *(_QWORD *)(v8 + 8) = v10;
          operator delete(v10);
          v7 = (unint64_t)*v6;
        }
        v8 += 40;
        if (v8 - v7 == 4080)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
          v8 = v11;
        }
      }
      while (v8 != v9);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 51;
  }
  else
  {
    if (v13 != 2)
      goto LABEL_18;
    v14 = 102;
  }
  a1[4] = v14;
LABEL_18:
  while (v2 != v3)
  {
    v15 = *v2++;
    operator delete(v15);
  }
  return std::__split_buffer<unsigned long *>::~__split_buffer((uint64_t)a1);
}

_QWORD *std::vector<PCScope *>::__init_with_size[abi:ne180100]<PCScope **,PCScope **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B29B1A34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::deque<PCSerializerReadStream::HandlerInfo>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<PCSerializerReadStream::HandlerInfo>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  std::vector<PCScope *>::__init_with_size[abi:ne180100]<PCScope **,PCScope **>((_QWORD *)v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(v8 + 24) = result;
  ++a1[5];
  return result;
}

void std::deque<PCSerializerReadStream::HandlerInfo>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B29B1DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::deque<PCSerializerReadStream::HandlerInfo>::pop_back(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;

  v2 = a1[5] - 1;
  v3 = *(_QWORD *)(a1[1] + 8 * ((v2 + a1[4]) / 0x66uLL)) + 40 * ((v2 + a1[4]) % 0x66uLL);
  v4 = *(void **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(v3 + 8) = v4;
    operator delete(v4);
    v2 = a1[5] - 1;
  }
  a1[5] = v2;
  return std::deque<PCSerializerReadStream::HandlerInfo>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<PCSerializerReadStream::HandlerInfo>::__maybe_remove_back_spare[abi:ne180100](_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 102 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x66)
    a2 = 1;
  if (v5 < 0xCC)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<PCStreamElement *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<PCStreamElement *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<PCStreamElement *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B29B2270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void PCSerializerWriteStream::PCSerializerWriteStream(PCSerializerWriteStream *this)
{
  *(_QWORD *)this = &unk_1E6512FB0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
}

uint64_t PCSerializerWriteStream::popScope(uint64_t this)
{
  *(_QWORD *)(this + 16) -= 8;
  return this;
}

_OWORD *PCStreamElement::atoUUID(PCStreamElement *this, const char **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  _OWORD *result;
  __int128 v15;
  uint64_t v16;

  v2 = 0;
  v16 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)this;
  v4 = MEMORY[0x1E0C80978];
  while (2)
  {
    v5 = 0;
    v6 = 0;
    v7 = v3 + 8;
    do
    {
      v8 = *(char *)(v3 + v5);
      if ((v8 & 0x80000000) != 0 || (*(_DWORD *)(v4 + 4 * v8 + 60) & 0x10000) == 0)
        return 0;
      v6 *= 16;
      ++v5;
      v9 = v8 - 48;
      v10 = v8 - 97;
      v11 = v8 - 65;
      v12 = v6 + v8;
      if (v11 <= 5)
        v6 = v12 - 55;
      if (v10 <= 5)
        v6 = v12 - 87;
      v13 = v12 - 48;
      if (v9 <= 9)
        v6 = v13;
    }
    while ((_DWORD)v5 != 8);
    *((_DWORD *)&v15 + v2++) = v6;
    v3 += 8;
    if (v2 != 4)
      continue;
    break;
  }
  *(_QWORD *)this = v7;
  result = (_OWORD *)operator new();
  *result = v15;
  return result;
}

uint64_t PCStreamElement::aToFigTime(uint64_t this, const char **a2, CMTime *a3)
{
  char **v3;
  const char *v4;
  const char *v6;
  int *v7;
  int v8;
  int v9;
  unsigned int v10;
  char *__endptr;

  if (this)
  {
    v3 = (char **)this;
    v4 = *(const char **)this;
    if (*(_QWORD *)this)
    {
      __endptr = 0;
      *__error() = 0;
      v6 = (const char *)strtoll(v4, &__endptr, 10);
      v7 = __error();
      this = 0;
      if (*v7 == 34)
        return this;
      v8 = strtol(__endptr, &__endptr, 10);
      if (*__error() != 34)
      {
        v9 = strtoull(__endptr, &__endptr, 16);
        if (*__error() != 34)
        {
          v10 = strtoull(__endptr, &__endptr, 10);
          if (*__error() != 34)
          {
            *a2 = v6;
            *((_DWORD *)a2 + 2) = v8;
            *((_DWORD *)a2 + 3) = v9;
            a2[2] = (const char *)v10;
            *v3 = __endptr;
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return this;
}

uint64_t PCXMLStreamElement::PCXMLStreamElement(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)a1 = &off_1E6513178;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 48));
  *(_DWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

void PCXMLStreamElement::~PCXMLStreamElement(PCXMLStreamElement *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E6513178;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
    free(v2);
  v3 = *((_QWORD *)this + 24);
  if (v3)
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(*((_QWORD *)this + 24), *(_QWORD **)(v3 + 8));
    MEMORY[0x1B5E29170](v3, 0x1020C4062D53EE8);
  }
  *((_QWORD *)this + 24) = 0;
  PCString::~PCString((PCString *)this + 6);
}

{
  PCXMLStreamElement::~PCXMLStreamElement(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCXMLStreamElement::getAsString(PCString *this, PCString *a2)
{
  PCString *v4;
  const char *var0;
  CFStringRef v6;
  __CFString *MutableCopy;
  CFRange v9;
  CFRange v10;
  CFRange v11;
  CFRange v12;

  v4 = this + 6;
  if (PCString::empty(this + 6))
  {
    var0 = (const char *)this[8].var0;
    if (var0)
    {
      v6 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], var0, 0x8000100u);
      if (CFStringFind(v6, CFSTR("&"), 0).location == -1)
      {
        MutableCopy = (__CFString *)CFRetain(v6);
      }
      else
      {
        MutableCopy = CFStringCreateMutableCopy(0, 0, v6);
        v9.length = CFStringGetLength(MutableCopy);
        v9.location = 0;
        CFStringFindAndReplace(MutableCopy, CFSTR("&amp;"), CFSTR("&"), v9, 0);
        v10.length = CFStringGetLength(MutableCopy);
        v10.location = 0;
        CFStringFindAndReplace(MutableCopy, CFSTR("&lt;"), CFSTR("<"), v10, 0);
        v11.length = CFStringGetLength(MutableCopy);
        v11.location = 0;
        CFStringFindAndReplace(MutableCopy, CFSTR("&gt;"), CFSTR(">"), v11, 0);
        v12.length = CFStringGetLength(MutableCopy);
        v12.location = 0;
        CFStringFindAndReplace(MutableCopy, CFSTR("&quot;"), CFSTR("\""), v12, 0);
      }
      CFRelease(v6);
      PCString::set(v4, MutableCopy);
      CFRelease(MutableCopy);
    }
  }
  PCString::set(a2, v4);
  return 1;
}

uint64_t PCXMLStreamElement::getAsInt32(PCXMLStreamElement *this, int *a2)
{
  _BYTE *v2;
  int *v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char *__endptr;

  v2 = (_BYTE *)*((_QWORD *)this + 7);
  if (!v2 || !*v2)
    return 0;
  __endptr = 0;
  *__error() = 0;
  *a2 = strtol(*((const char **)this + 7), &__endptr, 10);
  v5 = __error();
  result = 0;
  if (*v5 != 34)
  {
    v7 = __endptr - 1;
    v8 = MEMORY[0x1E0C80978];
    do
    {
      v9 = v7[1];
      if ((v9 & 0x80000000) != 0)
        v10 = __maskrune(v9, 0x4000uLL);
      else
        v10 = *(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000;
      ++v7;
    }
    while (v10);
    *((_QWORD *)this + 7) = v7;
    return 1;
  }
  return result;
}

uint64_t PCXMLStreamElement::getAsUInt32(PCXMLStreamElement *this, unsigned int *a2)
{
  _BYTE *v2;
  int *v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char *__endptr;

  v2 = (_BYTE *)*((_QWORD *)this + 7);
  if (!v2 || !*v2)
    return 0;
  __endptr = 0;
  *__error() = 0;
  *a2 = strtoul(*((const char **)this + 7), &__endptr, 10);
  v5 = __error();
  result = 0;
  if (*v5 != 34)
  {
    v7 = __endptr - 1;
    v8 = MEMORY[0x1E0C80978];
    do
    {
      v9 = v7[1];
      if ((v9 & 0x80000000) != 0)
        v10 = __maskrune(v9, 0x4000uLL);
      else
        v10 = *(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000;
      ++v7;
    }
    while (v10);
    *((_QWORD *)this + 7) = v7;
    return 1;
  }
  return result;
}

uint64_t PCXMLStreamElement::getAsInt64(PCXMLStreamElement *this, uint64_t *a2)
{
  _BYTE *v2;
  int *v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char *__endptr;

  v2 = (_BYTE *)*((_QWORD *)this + 7);
  if (!v2 || !*v2)
    return 0;
  __endptr = 0;
  *__error() = 0;
  *a2 = strtoll(*((const char **)this + 7), &__endptr, 10);
  v5 = __error();
  result = 0;
  if (*v5 != 34)
  {
    v7 = __endptr - 1;
    v8 = MEMORY[0x1E0C80978];
    do
    {
      v9 = v7[1];
      if ((v9 & 0x80000000) != 0)
        v10 = __maskrune(v9, 0x4000uLL);
      else
        v10 = *(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000;
      ++v7;
    }
    while (v10);
    *((_QWORD *)this + 7) = v7;
    return 1;
  }
  return result;
}

uint64_t PCXMLStreamElement::getAsUInt64(PCXMLStreamElement *this, unint64_t *a2)
{
  _BYTE *v2;
  int *v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char *__endptr;

  v2 = (_BYTE *)*((_QWORD *)this + 7);
  if (!v2 || !*v2)
    return 0;
  __endptr = 0;
  *__error() = 0;
  *a2 = strtoull(*((const char **)this + 7), &__endptr, 10);
  v5 = __error();
  result = 0;
  if (*v5 != 34)
  {
    v7 = __endptr - 1;
    v8 = MEMORY[0x1E0C80978];
    do
    {
      v9 = v7[1];
      if ((v9 & 0x80000000) != 0)
        v10 = __maskrune(v9, 0x4000uLL);
      else
        v10 = *(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000;
      ++v7;
    }
    while (v10);
    *((_QWORD *)this + 7) = v7;
    return 1;
  }
  return result;
}

uint64_t PCXMLStreamElement::getAsFloat(PCXMLStreamElement *this, float *a2)
{
  _BYTE *v2;
  int *v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  char *v11;

  v2 = (_BYTE *)*((_QWORD *)this + 7);
  if (!v2)
    return 0;
  v11 = 0;
  if (!*v2)
    return 0;
  *__error() = 0;
  *a2 = strtof(*((const char **)this + 7), &v11);
  v5 = __error();
  result = 0;
  if (*v5 != 34)
  {
    v7 = v11;
    v8 = MEMORY[0x1E0C80978];
    while (1)
    {
      v9 = *v7;
      if (!((v9 & 0x80000000) != 0 ? __maskrune(v9, 0x4000uLL) : *(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000))
        break;
      v7 = ++v11;
    }
    *((_QWORD *)this + 7) = v11;
    return 1;
  }
  return result;
}

uint64_t PCXMLStreamElement::getAsDouble(PCXMLStreamElement *this, double *a2)
{
  _BYTE *v2;
  int *v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  char *v11;

  v2 = (_BYTE *)*((_QWORD *)this + 7);
  if (!v2)
    return 0;
  v11 = 0;
  if (!*v2)
    return 0;
  *__error() = 0;
  *a2 = strtod(*((const char **)this + 7), &v11);
  v5 = __error();
  result = 0;
  if (*v5 != 34)
  {
    v7 = v11;
    v8 = MEMORY[0x1E0C80978];
    while (1)
    {
      v9 = *v7;
      if (!((v9 & 0x80000000) != 0 ? __maskrune(v9, 0x4000uLL) : *(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000))
        break;
      v7 = ++v11;
    }
    *((_QWORD *)this + 7) = v11;
    return 1;
  }
  return result;
}

uint64_t PCXMLStreamElement::getAsBool(PCXMLStreamElement *this, BOOL *a2)
{
  _BYTE *v2;
  int *v5;
  uint64_t result;
  char *v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  char *__endptr;

  v2 = (_BYTE *)*((_QWORD *)this + 7);
  if (!v2 || !*v2)
    return 0;
  __endptr = 0;
  *__error() = 0;
  *a2 = strtoul(*((const char **)this + 7), &__endptr, 10) != 0;
  v5 = __error();
  result = 0;
  if (*v5 != 34)
  {
    v7 = __endptr - 1;
    v8 = MEMORY[0x1E0C80978];
    do
    {
      v9 = v7[1];
      if ((v9 & 0x80000000) != 0)
        v10 = __maskrune(v9, 0x4000uLL);
      else
        v10 = *(_DWORD *)(v8 + 4 * v9 + 60) & 0x4000;
      ++v7;
    }
    while (v10);
    *((_QWORD *)this + 7) = v7;
    return 1;
  }
  return result;
}

_OWORD *PCXMLStreamElement::getAsUUID(PCXMLStreamElement *this, const char **a2)
{
  PCStreamElement *v2;
  _BYTE *v3;
  _BYTE *v4;

  v4 = (_BYTE *)*((_QWORD *)this + 7);
  v2 = (PCXMLStreamElement *)((char *)this + 56);
  v3 = v4;
  if (v4 && *v3)
    return PCStreamElement::atoUUID(v2, a2);
  else
    return 0;
}

uint64_t PCXMLStreamElement::getAsFigTime(PCXMLStreamElement *this, CMTime *a2, CMTime *a3)
{
  char *v3;
  _BYTE *v4;
  _BYTE *v5;

  v5 = (_BYTE *)*((_QWORD *)this + 7);
  v3 = (char *)this + 56;
  v4 = v5;
  if (v5 && *v4)
    return PCStreamElement::aToFigTime((uint64_t)v3, (const char **)a2, a3);
  else
    return 0;
}

uint64_t **PCXMLStreamElement::addAttribute(uint64_t **this, unsigned int a2, const char *a3)
{
  uint64_t **v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;

  v4 = this;
  v8 = a2;
  v5 = *((unsigned int *)this + 46);
  if (v5 > 6)
  {
    v7 = (uint64_t)this[24];
    if (!v7)
    {
      v7 = operator new();
      *(_QWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)v7 = v7 + 8;
      v4[24] = (uint64_t *)v7;
    }
    v9 = &v8;
    this = std::__tree<std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVImageBuffer * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVImageBuffer * {__strong}>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>((uint64_t **)v7, &v8, (uint64_t)&std::piecewise_construct, &v9);
    this[5] = (uint64_t *)a3;
  }
  else
  {
    v6 = &this[2 * v5];
    *((_DWORD *)v6 + 18) = a2;
    v6[10] = (uint64_t *)a3;
    *((_DWORD *)this + 46) = v5 + 1;
  }
  return this;
}

uint64_t PCXMLStreamElement::addAttribute(uint64_t this, const char *__s2, const char *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *(uint64_t **)(this + 16);
  if (v3)
  {
    v4 = this;
    this = *v3;
    if (*v3)
    {
      v7 = v3 + 2;
      do
      {
        if (*((_DWORD *)v7 - 2) == *(_DWORD *)(v4 + 8))
        {
          v8 = *((_DWORD *)v7 - 1);
          if (v8)
          {
            if (!strcmp((const char *)this, __s2))
              PCXMLStreamElement::addAttribute((uint64_t **)v4, v8, a3);
          }
        }
        v9 = *v7;
        v7 += 2;
        this = v9;
      }
      while (v9);
    }
  }
  return this;
}

uint64_t PCXMLStreamElement::getAttributeAsCString(PCXMLStreamElement *this, unsigned int a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t *v11;

  v2 = *((unsigned int *)this + 46);
  if ((_DWORD)v2)
  {
    v3 = (char *)this + 80;
    while (*((_DWORD *)v3 - 2) != a2)
    {
      v3 += 16;
      if (!--v2)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v4 = *((_QWORD *)this + 24);
    if (!v4)
      return 0;
    v7 = *(_QWORD *)(v4 + 8);
    v5 = v4 + 8;
    v6 = v7;
    if (!v7)
      return 0;
    v8 = v5;
    do
    {
      v9 = *(_DWORD *)(v6 + 32);
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = (uint64_t *)v6;
      else
        v11 = (uint64_t *)(v6 + 8);
      if (v10)
        v8 = v6;
      v6 = *v11;
    }
    while (*v11);
    if (v8 == v5 || *(_DWORD *)(v8 + 32) > a2)
      return 0;
    v3 = (char *)(v8 + 40);
  }
  return *(_QWORD *)v3;
}

uint64_t PCXMLStreamElement::getAttributeAsString(PCXMLStreamElement *this, unsigned int a2, PCString *a3)
{
  uint64_t v4;
  const char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  PCString v15;

  v4 = *((unsigned int *)this + 46);
  if ((_DWORD)v4)
  {
    v5 = (const char **)((char *)this + 80);
    while (*((_DWORD *)v5 - 2) != a2)
    {
      v5 += 2;
      if (!--v4)
        goto LABEL_5;
    }
    PCString::PCString(&v15, *v5);
    PCString::set(a3, &v15);
  }
  else
  {
LABEL_5:
    v6 = *((_QWORD *)this + 24);
    if (!v6)
      return 0;
    v9 = *(_QWORD *)(v6 + 8);
    v7 = v6 + 8;
    v8 = v9;
    if (!v9)
      return 0;
    v10 = v7;
    do
    {
      v11 = *(_DWORD *)(v8 + 32);
      v12 = v11 >= a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v8;
      else
        v13 = (uint64_t *)(v8 + 8);
      if (v12)
        v10 = v8;
      v8 = *v13;
    }
    while (*v13);
    if (v10 == v7 || *(_DWORD *)(v10 + 32) > a2)
      return 0;
    PCString::PCString(&v15, *(const char **)(v10 + 40));
    PCString::set(a3, &v15);
  }
  PCString::~PCString(&v15);
  return 1;
}

void sub_1B29B2F3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

const char *PCXMLStreamElement::getAttributeAsInt32(PCXMLStreamElement *this, unsigned int a2, int *a3)
{
  const char *result;
  const char *v5;

  result = (const char *)PCXMLStreamElement::getAttributeAsCString(this, a2);
  if (result)
  {
    v5 = result;
    *__error() = 0;
    *a3 = strtol(v5, 0, 10);
    return (const char *)(*__error() != 34);
  }
  return result;
}

const char *PCXMLStreamElement::getAttributeAsUInt32(PCXMLStreamElement *this, unsigned int a2, unsigned int *a3)
{
  const char *result;
  const char *v5;

  result = (const char *)PCXMLStreamElement::getAttributeAsCString(this, a2);
  if (result)
  {
    v5 = result;
    *__error() = 0;
    *a3 = strtoul(v5, 0, 10);
    return (const char *)(*__error() != 34);
  }
  return result;
}

const char *PCXMLStreamElement::getAttributeAsInt64(PCXMLStreamElement *this, unsigned int a2, uint64_t *a3)
{
  const char *result;
  const char *v5;

  result = (const char *)PCXMLStreamElement::getAttributeAsCString(this, a2);
  if (result)
  {
    v5 = result;
    *__error() = 0;
    *a3 = strtoll(v5, 0, 10);
    return (const char *)(*__error() != 34);
  }
  return result;
}

const char *PCXMLStreamElement::getAttributeAsUInt64(PCXMLStreamElement *this, unsigned int a2, unint64_t *a3)
{
  const char *result;
  const char *v5;

  result = (const char *)PCXMLStreamElement::getAttributeAsCString(this, a2);
  if (result)
  {
    v5 = result;
    *__error() = 0;
    *a3 = strtoull(v5, 0, 10);
    return (const char *)(*__error() != 34);
  }
  return result;
}

const char *PCXMLStreamElement::getAttributeAsFloat(PCXMLStreamElement *this, unsigned int a2, float *a3)
{
  const char *result;
  const char *v5;

  result = (const char *)PCXMLStreamElement::getAttributeAsCString(this, a2);
  if (result)
  {
    v5 = result;
    *__error() = 0;
    *a3 = strtof(v5, 0);
    return (const char *)(*__error() != 34);
  }
  return result;
}

const char *PCXMLStreamElement::getAttributeAsDouble(PCXMLStreamElement *this, unsigned int a2, double *a3)
{
  const char *result;
  const char *v5;

  result = (const char *)PCXMLStreamElement::getAttributeAsCString(this, a2);
  if (result)
  {
    v5 = result;
    *__error() = 0;
    *a3 = strtod(v5, 0);
    return (const char *)(*__error() != 34);
  }
  return result;
}

const char *PCXMLStreamElement::getAttributeAsBool(PCXMLStreamElement *this, unsigned int a2, BOOL *a3)
{
  const char *result;
  const char *v5;

  result = (const char *)PCXMLStreamElement::getAttributeAsCString(this, a2);
  if (result)
  {
    v5 = result;
    *__error() = 0;
    *a3 = strtoul(v5, 0, 10) != 0;
    return (const char *)(*__error() != 34);
  }
  return result;
}

_OWORD *PCXMLStreamElement::getAttributeAsUUID(PCXMLStreamElement *this, unsigned int a2)
{
  _OWORD *result;
  const char **v3;
  _OWORD *v4;

  result = (_OWORD *)PCXMLStreamElement::getAttributeAsCString(this, a2);
  if (result)
  {
    v4 = result;
    return PCStreamElement::atoUUID((PCStreamElement *)&v4, v3);
  }
  return result;
}

uint64_t PCXMLStreamElement::getAttributeAsFigTime(PCXMLStreamElement *this, unsigned int a2, CMTime *a3)
{
  uint64_t result;
  CMTime *v5;
  uint64_t v6;

  result = PCXMLStreamElement::getAttributeAsCString(this, a2);
  if (result)
  {
    v6 = result;
    return PCStreamElement::aToFigTime((uint64_t)&v6, (const char **)a3, v5);
  }
  return result;
}

char *PCXMLStreamElement::appendContentWithNewline(PCXMLStreamElement *this, char *a2, int a3)
{
  char *result;
  size_t v7;
  size_t v8;
  uint64_t v9;
  const char *v10;
  char *v11;

  result = (char *)*((_QWORD *)this + 8);
  if (result)
  {
    v7 = strlen(result);
    v8 = strlen(a2);
    v9 = 1;
    if (a3)
      v9 = 2;
    v10 = (const char *)malloc_type_realloc(*((void **)this + 7), v7 + v9 + v8, 0x9F909D42uLL);
    v11 = (char *)v10;
    if (a3)
      *(_WORD *)&v10[strlen(v10)] = 10;
    result = strcat(v11, a2);
    *((_QWORD *)this + 7) = v11;
    *((_QWORD *)this + 8) = v11;
  }
  else
  {
    *((_QWORD *)this + 7) = a2;
    *((_QWORD *)this + 8) = a2;
  }
  return result;
}

uint64_t PCXMLStreamElement::isXMLStreamElement(PCXMLStreamElement *this)
{
  return 1;
}

double PC_CMTimeSaferAdd@<D0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  char v7;
  int v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime rhs;
  CMTime lhs;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  lhs = *a1;
  rhs = *a2;
  CMTimeAdd((CMTime *)a3, &lhs, &rhs);
  if ((*(_DWORD *)(a3 + 12) & 0x1F) == 3 && ((a2->flags | a1->flags) & 2) == 0)
  {
    v7 = SimpCMTime(a1);
    v8 = SimpCMTime(a2);
    if ((v7 & 1) != 0 || v8)
    {
      v10 = *a1;
      v9 = *a2;
      CMTimeAdd(&v11, &v10, &v9);
      result = *(double *)&v11.value;
      *(CMTime *)a3 = v11;
    }
  }
  return result;
}

double PC_CMTimeSaferSubtract@<D0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  char v7;
  int v8;
  CMTime v9;
  CMTime v10;
  CMTime v11;
  CMTime rhs;
  CMTime lhs;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  lhs = *a1;
  rhs = *a2;
  CMTimeSubtract((CMTime *)a3, &lhs, &rhs);
  if ((*(_DWORD *)(a3 + 12) & 0x1F) == 3 && ((a2->flags | a1->flags) & 2) == 0)
  {
    v7 = SimpCMTime(a1);
    v8 = SimpCMTime(a2);
    if ((v7 & 1) != 0 || v8)
    {
      v10 = *a1;
      v9 = *a2;
      CMTimeSubtract(&v11, &v10, &v9);
      result = *(double *)&v11.value;
      *(CMTime *)a3 = v11;
    }
  }
  return result;
}

double PC_CMTimeMultiply64Divide64@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int32_t v19;
  CMTime v21;
  int8x16_t v22[2];
  int8x16_t v23[2];
  int8x16_t v24;
  int8x16_t v25;
  _OWORD v26[2];
  _BYTE v27[32];
  _BYTE time[32];

  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (a3)
  {
    v8 = *(_QWORD *)a1;
    v9 = *(_DWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 12);
    if ((v10 & 0x1D) != 1)
    {
      v15 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(a4 + 16) = 0;
      *(_QWORD *)time = v8;
      *(_DWORD *)&time[8] = v9;
      *(_DWORD *)&time[12] = v10;
      *(_QWORD *)&time[16] = v15;
      CMTimeMultiplyByFloat64((CMTime *)a4, (CMTime *)time, (double)a2 / (double)a3);
      goto LABEL_37;
    }
    if (v9)
    {
      v11 = v9;
      bignum_s256_init_from_s64(v8, (uint64_t *)time);
      bignum_s256_init_from_s64(a2, (uint64_t *)v27);
      if (*(_QWORD *)time == *(int *)time)
      {
        v12 = *(_QWORD *)&time[16];
        if ((*(_QWORD *)time & 0x8000000000000000) != 0)
        {
          if (*(_QWORD *)&time[8] != -1 || *(_QWORD *)&time[16] != -1)
            goto LABEL_20;
        }
        else
        {
          v12 = *(_QWORD *)&time[8] | *(_QWORD *)&time[16];
          if (*(_OWORD *)&time[8] != 0)
            goto LABEL_20;
        }
        if (*(_QWORD *)&time[24] != v12 || *(_QWORD *)v27 != *(int *)v27)
          goto LABEL_20;
        v16 = *(_QWORD *)&v27[16];
        if ((*(_QWORD *)v27 & 0x8000000000000000) != 0)
        {
          if (*(_OWORD *)&v27[8] != __PAIR128__(-1, -1))
            goto LABEL_20;
        }
        else
        {
          v16 = *(_QWORD *)&v27[8] | *(_QWORD *)&v27[16];
          if (*(_OWORD *)&v27[8] != 0)
            goto LABEL_20;
        }
        if (*(_QWORD *)&v27[24] == v16)
        {
          bignum_s256_init_from_s64(*(_QWORD *)v27 * *(_QWORD *)time, (uint64_t *)v26);
          goto LABEL_21;
        }
      }
LABEL_20:
      bignum_s256_init_from_s64(0, (uint64_t *)v26);
      v24 = *(int8x16_t *)time;
      v23[0] = *(int8x16_t *)v27;
      bignum_s128_full_multiply((unint64_t *)&v24, (unint64_t *)v23, v26);
LABEL_21:
      bignum_s256_init_from_s64(v11, v24.i64);
      *(int8x16_t *)time = v24;
      *(int8x16_t *)&time[16] = v25;
      bignum_s256_init_from_s64(a3, v24.i64);
      *(int8x16_t *)v27 = v24;
      *(int8x16_t *)&v27[16] = v25;
      if (*(_QWORD *)time == *(int *)time)
      {
        v17 = *(_QWORD *)&time[16];
        if ((*(_QWORD *)time & 0x8000000000000000) != 0)
        {
          if (*(_QWORD *)&time[8] != -1 || *(_QWORD *)&time[16] != -1)
            goto LABEL_35;
        }
        else
        {
          v17 = *(_QWORD *)&time[8] | *(_QWORD *)&time[16];
          if (*(_OWORD *)&time[8] != 0)
            goto LABEL_35;
        }
        if (*(_QWORD *)&time[24] != v17 || *(_QWORD *)v27 != *(int *)v27)
          goto LABEL_35;
        v18 = *(_QWORD *)&v27[16];
        if ((*(_QWORD *)v27 & 0x8000000000000000) != 0)
        {
          if (*(_OWORD *)&v27[8] != __PAIR128__(-1, -1))
            goto LABEL_35;
        }
        else
        {
          v18 = *(_QWORD *)&v27[8] | *(_QWORD *)&v27[16];
          if (*(_OWORD *)&v27[8] != 0)
            goto LABEL_35;
        }
        if (*(_QWORD *)&v27[24] == v18)
        {
          bignum_s256_init_from_s64(*(_QWORD *)v27 * *(_QWORD *)time, v24.i64);
LABEL_36:
          *(_QWORD *)a4 = 0;
          *(_QWORD *)(a4 + 8) = 0;
          *(_QWORD *)(a4 + 16) = 0;
          v23[0] = (int8x16_t)v26[0];
          v23[1] = (int8x16_t)v26[1];
          v22[0] = v24;
          v22[1] = v25;
          IntermediateLargeInteger::makeCMTime(v23, v22, (v10 & 0x1F) == 3, 0, a4);
          goto LABEL_37;
        }
      }
LABEL_35:
      bignum_s256_init_from_s64(0, v24.i64);
      v23[0] = *(int8x16_t *)time;
      v22[0] = *(int8x16_t *)v27;
      bignum_s128_full_multiply((unint64_t *)v23, (unint64_t *)v22, &v24);
      goto LABEL_36;
    }
  }
  v13 = MEMORY[0x1E0CA2E18];
  v14 = *MEMORY[0x1E0CA2E18];
  *(_OWORD *)a4 = *MEMORY[0x1E0CA2E18];
  *(_QWORD *)(a4 + 16) = *(_QWORD *)(v13 + 16);
LABEL_37:
  if ((*(_DWORD *)(a4 + 12) & 0x1F) != 3)
  {
    v19 = *(_DWORD *)(a1 + 8);
    if (*(_DWORD *)(a4 + 8) > v19)
    {
      memset(time, 0, 24);
      v21 = *(CMTime *)a4;
      CMTimeConvertScale((CMTime *)time, &v21, v19, kCMTimeRoundingMethod_RoundTowardZero);
      if ((time[12] & 0x1F) != 3)
      {
        *(_QWORD *)&v14 = *(_QWORD *)time;
        *(_OWORD *)a4 = *(_OWORD *)time;
        *(_QWORD *)(a4 + 16) = *(_QWORD *)&time[16];
      }
    }
  }
  return *(double *)&v14;
}

uint64_t PC_CMTimeGetSampleNumber(CMTime *a1, CMTime *a2)
{
  unsigned int timescale;
  int32_t v5;
  CMTimeRoundingMethod v6;
  double Seconds;
  const __CFString *v9;
  const __CFString *v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime time;
  CMTime v16;
  CMTime v17;
  CMTime v18;

  timescale = a1->timescale;
  if (!timescale || (a1->flags & 0x1D) != 1 || (v5 = a2->timescale) == 0 || !a2->value)
  {
    if ((~a2->flags & 0x11) != 0 && a2->value)
    {
      v18 = *a1;
      v9 = PC_CMTimeToFractionString(&v18);
      v17 = *a2;
      v10 = PC_CMTimeToFractionString(&v17);
      NSLog(CFSTR("error: PC_CMTimeGetSampleNumber t.timescale == 0 || Non-Numeric(t) || Invalid(t) || sampleDuration.timescale == 0 || sampleDuration.value == 0 (t=%@, sd=%@)"), v9, v10);
    }
    return 0;
  }
  if ((unint64_t)a1->value >> 63 == timescale >> 31)
    v6 = kCMTimeRoundingMethod_RoundTowardZero;
  else
    v6 = kCMTimeRoundingMethod_RoundAwayFromZero;
  memset(&v16, 0, sizeof(v16));
  time = *a1;
  CMTimeConvertScale(&v16, &time, v5, v6);
  if ((v16.flags & 0x1F) != 3)
    return v16.value / a2->value;
  memset(&v14, 0, sizeof(v14));
  v13 = *a2;
  CMTimeConvertScale(&v14, &v13, a1->timescale, v6);
  if ((v14.flags & 0x1F) == 3)
  {
    v12 = *a1;
    Seconds = CMTimeGetSeconds(&v12);
    v11 = *a2;
    return (uint64_t)(Seconds / CMTimeGetSeconds(&v11));
  }
  if (!v14.value)
    return 0;
  return a1->value / v14.value;
}

const __CFString *PC_CMTimeToFractionString(CMTime *a1)
{
  CMTimeFlags flags;
  CMTimeEpoch epoch;
  void *v5;
  double v6;
  const char *v7;
  CMTimeFlags v8;
  const char *v9;
  const char *v10;
  void *v11;
  double Seconds;
  const char *v13;
  CMTimeFlags v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CMTime v20;
  CMTime v21;
  CMTime v22;
  CMTime time;

  flags = a1->flags;
  if ((flags & 0x1D) != 1)
  {
    v20 = *a1;
    return PC_CMTimeToString(&v20);
  }
  epoch = a1->epoch;
  if ((flags & 2) == 0 && !epoch)
  {
    if ((~flags & 0x11) != 0)
    {
      time = *a1;
      return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lf(%lld/%d)"), CMTimeGetSeconds(&time), a1->value, a1->timescale, v17, v18, v19);
    }
    goto LABEL_16;
  }
  if (!epoch)
  {
LABEL_16:
    v11 = (void *)MEMORY[0x1E0CB3940];
    v21 = *a1;
    Seconds = CMTimeGetSeconds(&v21);
    v13 = "+round";
    v14 = a1->flags;
    if ((v14 & 2) == 0)
      v13 = "";
    if ((a1->flags & 0x1D) == 1)
      v15 = v13;
    else
      v15 = "";
    v16 = "+indef";
    if ((~v14 & 0x11) != 0)
      v16 = "";
    return (const __CFString *)objc_msgSend(v11, "stringWithFormat:", CFSTR("%lf(%lld/%d%s%s)"), *(_QWORD *)&Seconds, a1->value, a1->timescale, v15, v16, v19);
  }
  v5 = (void *)MEMORY[0x1E0CB3940];
  v22 = *a1;
  v6 = CMTimeGetSeconds(&v22);
  v7 = "+round";
  v8 = a1->flags;
  if ((v8 & 2) == 0)
    v7 = "";
  if ((a1->flags & 0x1D) == 1)
    v9 = v7;
  else
    v9 = "";
  v10 = "+indef";
  if ((~v8 & 0x11) != 0)
    v10 = "";
  return (const __CFString *)objc_msgSend(v5, "stringWithFormat:", CFSTR("%lf(%lld/%d+epoch=%lld%s%s)"), *(_QWORD *)&v6, a1->value, a1->timescale, a1->epoch, v9, v10);
}

double PC_CMTimeFromSampleNumberAndDuration@<D0>(uint64_t multiplier@<X0>, CMTime *a2@<X1>, CMTime *a3@<X8>)
{
  double result;
  __int128 v5;
  CMTimeEpoch epoch;
  CMTime time;
  CMTime v8;

  if (multiplier == (int)multiplier)
  {
    time = *a2;
    CMTimeMultiply(&v8, &time, multiplier);
  }
  else
  {
    v5 = *(_OWORD *)&a2->value;
    epoch = a2->epoch;
    PC_CMTimeMultiply64Divide64((uint64_t)&v5, multiplier, 1, (uint64_t)&v8);
  }
  result = *(double *)&v8.value;
  *a3 = v8;
  return result;
}

__n128 PC_CMTimeFloorToSampleDuration@<Q0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime *v6;
  CMTimeRoundingMethod v7;
  __n128 result;
  uint64_t value;
  uint64_t v10;
  uint64_t v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime time2;
  CMTime time1;

  if ((a2->flags & 0x1D) == 1
    && (time1 = *a2,
        v6 = (CMTime *)MEMORY[0x1E0CA2E68],
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
        CMTimeCompare(&time1, &time2)))
  {
    v14 = *a1;
    v13 = *v6;
    if (CMTimeCompare(&v14, &v13) >= 0)
      v7 = kCMTimeRoundingMethod_RoundTowardZero;
    else
      v7 = kCMTimeRoundingMethod_RoundAwayFromZero;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v12 = *a1;
    CMTimeConvertScale((CMTime *)a3, &v12, a2->timescale, v7);
    value = a2->value;
    if (a2->value >= 2)
    {
      v10 = *(_QWORD *)a3 / (unint64_t)value * value;
      v11 = (*(_QWORD *)a3 - value + 1) / value * value;
      if (*(uint64_t *)a3 >= 0)
        v11 = v10;
      *(_QWORD *)a3 = v11;
    }
    *(_DWORD *)(a3 + 12) &= ~2u;
  }
  else
  {
    result = *(__n128 *)&a1->value;
    *(_OWORD *)a3 = *(_OWORD *)&a1->value;
    *(_QWORD *)(a3 + 16) = a1->epoch;
  }
  return result;
}

__n128 PC_CMTimeCeilingToSampleDuration@<Q0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime *v6;
  CMTimeRoundingMethod v7;
  __n128 result;
  uint64_t value;
  uint64_t v10;
  uint64_t v11;
  CMTime v12;
  CMTime v13;
  CMTime v14;
  CMTime time2;
  CMTime time1;

  if ((a2->flags & 0x1D) == 1
    && (time1 = *a2,
        v6 = (CMTime *)MEMORY[0x1E0CA2E68],
        time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68],
        CMTimeCompare(&time1, &time2)))
  {
    v14 = *a1;
    v13 = *v6;
    if (CMTimeCompare(&v14, &v13) < 0)
      v7 = kCMTimeRoundingMethod_RoundTowardZero;
    else
      v7 = kCMTimeRoundingMethod_RoundAwayFromZero;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v12 = *a1;
    CMTimeConvertScale((CMTime *)a3, &v12, a2->timescale, v7);
    value = a2->value;
    if (a2->value >= 2)
    {
      v10 = (value + *(_QWORD *)a3 - 1) / value * value;
      v11 = -*(_QWORD *)a3 % (unint64_t)value + *(_QWORD *)a3;
      if (*(uint64_t *)a3 >= 0)
        v11 = v10;
      *(_QWORD *)a3 = v11;
    }
    *(_DWORD *)(a3 + 12) &= ~2u;
  }
  else
  {
    result = *(__n128 *)&a1->value;
    *(_OWORD *)a3 = *(_OWORD *)&a1->value;
    *(_QWORD *)(a3 + 16) = a1->epoch;
  }
  return result;
}

CMTime *PC_CMTimeMakeWithSecondsRoundToNearest@<X0>(int32_t a1@<W0>, CMTime *a2@<X8>, double a3@<D0>)
{
  return CMTimeMakeWithSeconds(a2, 0.5 / (double)a1 + a3, a1);
}

CMTime *PC_CMTimeRangeMakeWithStartEnd@<X0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime v7;
  CMTime v8;
  CMTime v9;
  CMTime v10;
  CMTime rhs;
  CMTime lhs;
  CMTime v13;

  if ((~a1->flags & 9) == 0 && (a2->flags & 0x1D) == 1)
  {
    lhs = *a2;
    rhs = *(CMTime *)kPC_CMTimeOneYear;
    CMTimeSubtract(&v13, &lhs, &rhs);
    *a1 = v13;
  }
  memset(&v13, 0, sizeof(v13));
  v10 = *a2;
  v9 = *a1;
  PC_CMTimeSaferSubtract(&v10, &v9, (uint64_t)&v13);
  v8 = *a1;
  v7 = v13;
  return CMTimeRangeSaferMake(&v8, &v7, a3);
}

__n128 PC_CMTimeHalve@<Q0>(CMTime *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t timescale;
  CMTimeScale v5;
  uint64_t v6;
  uint64_t value;
  uint64_t v8;
  __n128 result;
  CMTime time;
  CMTime v11;

  if ((a1->flags & 0x1D) == 1)
  {
    if ((a1->value & 1) != 0)
    {
      timescale = a1->timescale;
      if ((int)timescale > 0x3FFFFFFF)
      {
        v6 = a1->timescale;
        value = a1->value;
        do
        {
          v8 = value;
          value = v6;
          v6 = v8 % v6;
        }
        while (v6);
        if (value < 0)
          value = -value;
        if ((unint64_t)value < 2)
        {
          NSLog(CFSTR("PC_CMTimeHalve: WARNING: Halving CMTime %lld/%d is falling back to CMTimeMultiplyByFloat64 - loss of precision"), a1->value, timescale);
          time = *a1;
          CMTimeMultiplyByFloat64(&v11, &time, 0.5);
          *a1 = v11;
          a1->flags |= 2u;
          goto LABEL_14;
        }
        a1->value /= value;
        v5 = 2 * (timescale / value);
      }
      else
      {
        v5 = 2 * timescale;
      }
      a1->timescale = v5;
      goto LABEL_14;
    }
    a1->value /= 2;
  }
LABEL_14:
  result = *(__n128 *)&a1->value;
  *(_OWORD *)a2 = *(_OWORD *)&a1->value;
  *(_QWORD *)(a2 + 16) = a1->epoch;
  return result;
}

double PC_CMTimeRangeEnd@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  CMTime v5;
  CMTime v6;

  if ((~*(_DWORD *)(a1 + 12) & 9) != 0 || (~*(_DWORD *)(a1 + 36) & 5) != 0)
  {
    v6 = *(CMTime *)a1;
    v5 = *(CMTime *)(a1 + 24);
    *(double *)&v3 = PC_CMTimeSaferAdd(&v6, &v5, a2);
  }
  else
  {
    v2 = MEMORY[0x1E0CA2E30];
    v3 = *MEMORY[0x1E0CA2E30];
    *(_OWORD *)a2 = *MEMORY[0x1E0CA2E30];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(v2 + 16);
  }
  return *(double *)&v3;
}

uint64_t GetCMTimeHash(uint64_t a1)
{
  uint64_t v1;

  v1 = *(int *)(a1 + 8);
  if ((_DWORD)v1)
    return ((*(_QWORD *)a1 << 10) / v1);
  else
    return 0;
}

uint64_t PC_CMTimeRangeToString(CMTimeRange *a1)
{
  __int128 v2;
  CMTimeFlags flags;
  CMTime *p_duration;
  CMTime *v5;
  int32_t v6;
  int32_t v7;
  BOOL v8;
  void *v9;
  const __CFString *v10;
  const __CFString *v11;
  CMTime *v13;
  void *v14;
  CMTime *v15;
  const __CFString *v16;
  CMTimeFlags v17;
  CMTime *v18;
  CMTime *v19;
  CMTimeFlags v20;
  const __CFString *v21;
  const __CFString *v22;
  void *v23;
  Float64 Seconds;
  uint64_t v25;
  uint64_t v26;
  CMTime v27;
  CMTime start;
  CMTime v29;
  CMTime v30;
  CMTime v31;
  CMTime v32;
  CMTime v33;
  CMTime duration;
  CMTime v35;
  CMTime v36;
  CMTime v37;
  CMTime v38;
  CMTime v39;
  CMTime v40;
  CMTime v41;
  CMTime v42;
  CMTime v43;
  CMTime v44;
  CMTime time;
  CMTime v46;
  CMTime v47;
  CMTime v48;
  CMTime v49;
  CMTime time2;
  CMTime time1;
  _OWORD v52[3];
  CMTime v53;

  memset(&v53, 0, sizeof(v53));
  v2 = *(_OWORD *)&a1->start.epoch;
  v52[0] = *(_OWORD *)&a1->start.value;
  v52[1] = v2;
  v52[2] = *(_OWORD *)&a1->duration.timescale;
  PC_CMTimeRangeEnd((uint64_t)v52, (uint64_t)&v53);
  flags = a1->start.flags;
  if ((flags & 0x1D) != 1)
    goto LABEL_16;
  if ((flags & 1) == 0)
    goto LABEL_16;
  if ((v53.flags & 0x1D) != 1)
    goto LABEL_16;
  if ((a1->duration.flags & 1) == 0)
    goto LABEL_16;
  p_duration = &a1->duration;
  time1 = a1->duration;
  v5 = (CMTime *)MEMORY[0x1E0CA2E68];
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  v6 = CMTimeCompare(&time1, &time2);
  flags = a1->start.flags;
  if (v6 < 0)
    goto LABEL_16;
  if ((~flags & 5) == 0)
  {
    *(_OWORD *)&v49.value = *(_OWORD *)&p_duration->value;
    v49.epoch = a1->duration.epoch;
    v48 = *v5;
    v7 = CMTimeCompare(&v49, &v48);
    flags = a1->start.flags;
    if (v7)
      goto LABEL_16;
  }
  if ((~flags & 9) == 0)
  {
    *(_OWORD *)&v47.value = *(_OWORD *)&p_duration->value;
    v47.epoch = a1->duration.epoch;
    v46 = *v5;
    if (CMTimeCompare(&v47, &v46))
    {
      flags = a1->start.flags;
      if ((~a1->duration.flags & 5) != 0)
      {
LABEL_16:
        v8 = (v53.flags & 0x1F) != 3 || (flags & 0x1F) == 3;
        if (v8 || (a1->duration.flags & 0x1F) == 3)
        {
          v9 = (void *)MEMORY[0x1E0CB3940];
          if ((flags & 1) != 0 && (a1->duration.flags & 1) != 0)
          {
            v18 = &a1->duration;
            duration = a1->duration;
            v19 = (CMTime *)MEMORY[0x1E0CA2E68];
            v33 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
            v10 = CFSTR("INVALID:");
            if ((CMTimeCompare(&duration, &v33) & 0x80000000) == 0)
            {
              v20 = a1->start.flags;
              if ((~v20 & 5) == 0)
              {
                *(_OWORD *)&v32.value = *(_OWORD *)&v18->value;
                v32.epoch = a1->duration.epoch;
                v31 = *v19;
                if (CMTimeCompare(&v32, &v31))
                  goto LABEL_24;
                v20 = a1->start.flags;
              }
              if ((~v20 & 9) != 0
                || (*(_OWORD *)&v30.value = *(_OWORD *)&v18->value,
                    v30.epoch = a1->duration.epoch,
                    v29 = *v19,
                    !CMTimeCompare(&v30, &v29))
                || (~a1->duration.flags & 5) == 0)
              {
                if (a1->start.epoch == a1->duration.epoch)
                  v10 = &stru_1E65EDDA0;
              }
            }
          }
          else
          {
            v10 = CFSTR("INVALID:");
          }
LABEL_24:
          start = a1->start;
          v11 = PC_CMTimeToString(&start);
          v27 = v53;
          return objc_msgSend(v9, "stringWithFormat:", CFSTR("[%@%@ - %@]"), v10, v11, PC_CMTimeToString(&v27), v26);
        }
        v13 = &a1->duration;
        v14 = (void *)MEMORY[0x1E0CB3940];
        if ((flags & a1->duration.flags & 1) != 0)
        {
          *(_OWORD *)&v43.value = *(_OWORD *)&v13->value;
          v43.epoch = a1->duration.epoch;
          v15 = (CMTime *)MEMORY[0x1E0CA2E68];
          v42 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
          v16 = CFSTR("INVALID:");
          if ((CMTimeCompare(&v43, &v42) & 0x80000000) == 0)
          {
            v17 = a1->start.flags;
            if ((~v17 & 5) != 0)
              goto LABEL_30;
            *(_OWORD *)&v41.value = *(_OWORD *)&v13->value;
            v41.epoch = a1->duration.epoch;
            v40 = *v15;
            if (!CMTimeCompare(&v41, &v40))
            {
              v17 = a1->start.flags;
LABEL_30:
              if ((~v17 & 9) != 0
                || (*(_OWORD *)&v39.value = *(_OWORD *)&v13->value,
                    v39.epoch = a1->duration.epoch,
                    v38 = *v15,
                    !CMTimeCompare(&v39, &v38))
                || (~a1->duration.flags & 5) == 0)
              {
                if (a1->start.epoch == a1->duration.epoch)
                  v16 = &stru_1E65EDDA0;
              }
            }
          }
        }
        else
        {
          v16 = CFSTR("INVALID:");
        }
        v37 = a1->start;
        v21 = PC_CMTimeToString(&v37);
        v36 = v53;
        v22 = PC_CMTimeToString(&v36);
        v35 = *v13;
        return objc_msgSend(v14, "stringWithFormat:", CFSTR("[%@%@ - %@ (end rounded; start&dur weren't) dur=%@]"),
                 v16,
                 v21,
                 v22,
                 PC_CMTimeToString(&v35));
      }
    }
    else
    {
      flags = a1->start.flags;
    }
  }
  if (a1->duration.epoch | a1->start.epoch || (flags & 0x1F) == 3 || (v53.flags & 0x1F) == 3)
    goto LABEL_16;
  v23 = (void *)MEMORY[0x1E0CB3940];
  time = a1->start;
  Seconds = CMTimeGetSeconds(&time);
  v44 = v53;
  return objc_msgSend(v23, "stringWithFormat:", CFSTR("[%lf - %lf]"), *(_QWORD *)&Seconds, CMTimeGetSeconds(&v44), v25, v26);
}

const __CFString *PC_CMTimeToString(CMTime *a1)
{
  CMTimeFlags flags;
  void *v5;
  double Seconds;
  CMTimeFlags v7;
  const char *v8;
  const char *v9;
  const char *v10;
  int v12;
  int v13;
  void *v14;
  double v16;
  CMTimeFlags v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const __CFString *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CMTime v25;
  CMTime time;
  CMTime v27;

  flags = a1->flags;
  if ((flags & 0x1D) == 1 || (~flags & 5) == 0 || (flags & 9) == 9)
  {
    if (a1->epoch)
    {
      v5 = (void *)MEMORY[0x1E0CB3940];
      time = *a1;
      Seconds = CMTimeGetSeconds(&time);
      v7 = a1->flags;
      v8 = "+round";
      if ((v7 & 2) == 0)
        v8 = "";
      if ((a1->flags & 0x1D) == 1)
        v9 = v8;
      else
        v9 = "";
      if ((~v7 & 0x11) != 0)
        v10 = "";
      else
        v10 = "+indef";
      return (const __CFString *)objc_msgSend(v5, "stringWithFormat:", CFSTR("%lf+epoch=%lld%s%s"), *(_QWORD *)&Seconds, a1->epoch, v9, v10);
    }
    else
    {
      v12 = flags & 0x1F;
      v13 = flags & 0x11;
      v14 = (void *)MEMORY[0x1E0CB3940];
      if (v12 == 3 || v13 == 17)
      {
        v25 = *a1;
        v16 = CMTimeGetSeconds(&v25);
        v17 = a1->flags;
        v18 = "+round";
        if ((v17 & 2) == 0)
          v18 = "";
        if ((a1->flags & 0x1D) == 1)
          v19 = v18;
        else
          v19 = "";
        if ((~v17 & 0x11) != 0)
          v20 = "";
        else
          v20 = "+indef";
        return (const __CFString *)objc_msgSend(v14, "stringWithFormat:", CFSTR("%lf%s%s"), *(_QWORD *)&v16, v19, v20, v24);
      }
      else
      {
        v27 = *a1;
        return (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithFormat:", CFSTR("%lf"), CMTimeGetSeconds(&v27), v22, v23, v24);
      }
    }
  }
  else
  {
    v21 = CFSTR("indef");
    if ((flags & 0x10) == 0)
      v21 = CFSTR("nan");
    if ((flags & 1) != 0)
      return v21;
    else
      return CFSTR("inval");
  }
}

void PCXMLReadStream::PCXMLReadStream(PCXMLReadStream *this, const PCURL *a2)
{
  _QWORD *v4;
  CFStringRef v5;
  char *v6;
  PCXMLReadStream *v7;
  PCString v8;

  PCSerializerReadStream::PCSerializerReadStream(this);
  *v4 = &off_1E6513270;
  PCURL::PCURL((PCURL *)(v4 + 19), a2);
  *((_QWORD *)this + 24) = 0;
  *((_BYTE *)this + 160) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  if (*(_QWORD *)a2)
  {
    v5 = CFURLCopyPath(*(CFURLRef *)a2);
    PCURL::PCURL((PCURL *)&v8, v5);
    v6 = PCString::createCStr(&v8);
    CFRelease(v5);
    *((_QWORD *)this + 24) = xmlReaderForFile(v6, 0, 0x80000);
    free(v6);
    PCString::~PCString(&v8);
  }
  v7 = (PCXMLReadStream *)malloc_type_malloc(0xC80uLL, 0x10F10407CD822B3uLL);
  *((_QWORD *)this + 22) = v7;
  PCXMLReadStream::fixLocale(v7);
}

void sub_1B29B5764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCSerializerReadStream *v10;
  PCURL *v11;

  PCURL::~PCURL(v11);
  PCSerializerReadStream::~PCSerializerReadStream(v10);
  _Unwind_Resume(a1);
}

void PCSerializerReadStream::PCSerializerReadStream(PCSerializerReadStream *this)
{
  *(_QWORD *)this = off_1E65130B0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_QWORD *)this + 13) = 0;
  CMTimeMake((CMTime *)((char *)this + 112), 1, 1);
  *((_QWORD *)this + 17) = 0x3FF0000000000000;
  *((_BYTE *)this + 144) = 0;
}

void sub_1B29B5818(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  std::deque<PCSerializerReadStream::HandlerInfo>::~deque[abi:ne180100]((_QWORD *)(v1 + 56));
  std::deque<unsigned long>::~deque[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

char *PCXMLReadStream::fixLocale(PCXMLReadStream *this)
{
  char *v1;
  char *result;

  v1 = setlocale(4, 0);
  result = (char *)strcmp("C", v1);
  if ((_DWORD)result)
    return setlocale(4, "C");
  return result;
}

void PCXMLReadStream::PCXMLReadStream(PCXMLReadStream *this, const __CFData *a2)
{
  _QWORD *v4;
  const UInt8 *BytePtr;
  CFIndex Length;
  void *v7;
  PCXMLReadStream *v8;

  PCSerializerReadStream::PCSerializerReadStream(this);
  *v4 = &off_1E6513270;
  PCURL::PCURL((PCURL *)(v4 + 19), 0);
  *((_BYTE *)this + 160) = 0;
  *((_DWORD *)this + 46) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 52) = 0;
  BytePtr = CFDataGetBytePtr(a2);
  Length = CFDataGetLength(a2);
  v7 = malloc_type_malloc(Length + 1, 0x1CCDB95DuLL);
  memcpy(v7, BytePtr, Length);
  *((_BYTE *)v7 + Length) = 0;
  *((_QWORD *)this + 24) = xmlReaderForMemory((const char *)v7, Length, 0, 0, 0x80000);
  *((_QWORD *)this + 25) = v7;
  v8 = (PCXMLReadStream *)malloc_type_malloc(0xC80uLL, 0x10F10407CD822B3uLL);
  *((_QWORD *)this + 22) = v8;
  PCXMLReadStream::fixLocale(v8);
}

void sub_1B29B5958(_Unwind_Exception *a1)
{
  PCSerializerReadStream *v1;
  PCURL *v2;

  PCURL::~PCURL(v2);
  PCSerializerReadStream::~PCSerializerReadStream(v1);
  _Unwind_Resume(a1);
}

void PCXMLReadStream::~PCXMLReadStream(PCXMLReadStream *this)
{
  _QWORD *i;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_1E6513270;
  for (i = (_QWORD *)((char *)this + 8); ; std::deque<unsigned long>::__maybe_remove_back_spare[abi:ne180100](i, 1))
  {
    v3 = *((_QWORD *)this + 6);
    if (!v3)
      break;
    (*(void (**)(PCXMLReadStream *, _QWORD))(*(_QWORD *)this + 48))(this, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2)+ (((unint64_t)(v3 + *((_QWORD *)this + 5) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((v3 + *((_QWORD *)this + 5) - 1) & 0x1FF)));
    --*((_QWORD *)this + 6);
  }
  v4 = (void *)*((_QWORD *)this + 25);
  if (v4)
    free(v4);
  xmlFreeTextReader(*((xmlTextReaderPtr *)this + 24));
  free(*((void **)this + 22));
  PCURL::~PCURL((PCXMLReadStream *)((char *)this + 152));
  PCSerializerReadStream::~PCSerializerReadStream(this);
}

{
  PCXMLReadStream::~PCXMLReadStream(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCXMLReadStream::parse(PCXMLReadStream *this)
{
  xmlTextReader *v2;
  int v3;
  int v4;
  int v5;
  char *v6;
  PCString v8;

  v2 = (xmlTextReader *)*((_QWORD *)this + 24);
  if (!v2)
  {
    PCSerializerReadStream::popAllHandlers(this);
    return 0;
  }
  v3 = xmlTextReaderRead(v2);
  if (v3 < 1)
  {
LABEL_5:
    v5 = v3;
    PCSerializerReadStream::popAllHandlers(this);
    if (v5 < 0)
      goto LABEL_10;
  }
  else
  {
    while (1)
    {
      PCXMLReadStream::processNode((xmlTextReaderPtr *)this);
      v4 = *((_DWORD *)this + 52);
      if (v4)
        break;
      v3 = xmlTextReaderRead(*((xmlTextReaderPtr *)this + 24));
      if (v3 <= 0)
        goto LABEL_5;
    }
    if (v4 == 1)
    {
      PCSerializerReadStream::popAllHandlers(this);
LABEL_10:
      PCURL::getFilename((const __CFURL **)this + 19, &v8);
      v6 = PCString::createCStr(&v8);
      PCString::~PCString(&v8);
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s : parsing error\n", v6);
      free(v6);
      return 0;
    }
    PCSerializerReadStream::popAllHandlers(this);
  }
  return 1;
}

void sub_1B29B5B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PCXMLReadStream::processNode(xmlTextReaderPtr *this)
{
  const xmlChar *v2;
  char *v3;
  int IsEmptyElement;
  int v5;
  int v6;
  uint64_t v7;
  _QWORD **v8;
  xmlChar *String;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  PCStreamElement *Element;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  const char *v20;
  char *CStr;
  uint64_t v22;
  uint64_t v23;
  PCSharedCount v24;
  char buffer[512];
  uint64_t v26;
  CFRange v27;
  CFRange v28;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = xmlTextReaderConstName(this[24]);
  if (v2)
    v3 = (char *)v2;
  else
    v3 = "--";
  IsEmptyElement = xmlTextReaderIsEmptyElement(this[24]);
  v5 = xmlTextReaderNodeType(this[24]);
  switch(v5)
  {
    case 1:
      v12 = PCSerializerReadStream::currentElement((PCSerializerReadStream *)this);
      if (v12)
      {
        v13 = v12;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 184))(v12))
        {
          if (!*(_BYTE *)(v13 + 12))
            PCSerializerReadStream::processElement((uint64_t)this, v13);
        }
      }
      v23 = 0;
      v24.var0 = 0;
      v22 = 0;
      if (PCSerializerReadStream::getElementInfo(this, v3, &v23, &v24, &v22))
      {
        Element = (PCStreamElement *)PCXMLReadStream::createElement((uint64_t)this, *(_DWORD *)(v23 + 8), (uint64_t)v24.var0, v22);
        PCSerializerReadStream::pushElement((PCSerializerReadStream *)this, Element);
        if (xmlTextReaderHasAttributes(this[24]) && xmlTextReaderMoveToNextAttribute(this[24]))
        {
          do
          {
            v15 = (const char *)xmlTextReaderConstName(this[24]);
            v16 = (const char *)xmlTextReaderConstValue(this[24]);
            PCXMLStreamElement::addAttribute((uint64_t)Element, v15, v16);
          }
          while (xmlTextReaderMoveToNextAttribute(this[24]));
        }
        if (IsEmptyElement)
        {
          if (!*((_BYTE *)Element + 40) && !*((_BYTE *)Element + 12))
            PCSerializerReadStream::processElement((uint64_t)this, (uint64_t)Element);
          if (Element == (PCStreamElement *)PCSerializerReadStream::currentHandlerElement((PCSerializerReadStream *)this))
            PCSerializerReadStream::popHandler(this);
          PCSerializerReadStream::popElement(this);
        }
      }
      else
      {
        xmlTextReaderNext(this[24]);
      }
      return;
    case 3:
    case 13:
    case 14:
      v6 = v5;
      v7 = PCSerializerReadStream::currentElement((PCSerializerReadStream *)this);
      if (v7)
      {
        v8 = (_QWORD **)v7;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 184))(v7))
        {
          if (v6 != 14 || (*(unsigned int (**)(_QWORD *))(*v8[3] + 64))(v8[3]))
          {
            String = xmlTextReaderReadString(this[24]);
            ((void (*)(_QWORD **, xmlChar *, BOOL))(*v8)[22])(v8, String, *((_BYTE *)this + 160) == 0);
            goto LABEL_18;
          }
        }
      }
      return;
    case 5:
      v17 = PCSerializerReadStream::currentElement((PCSerializerReadStream *)this);
      if (!v17)
        return;
      v18 = v17;
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 184))(v17))
        return;
      v19 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v3, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
      PCSharedCount::PCSharedCount(&v24);
      if (CFStringCompare(v19, CFSTR("amp"), 0))
      {
        if (CFStringCompare(v19, CFSTR("lt"), 0))
        {
          if (CFStringCompare(v19, CFSTR("gt"), 0))
          {
            if (CFStringCompare(v19, CFSTR("quot"), 0))
            {
              if (CFStringCompare(v19, CFSTR("apos"), 0))
              {
                if (CFStringCompare(v19, CFSTR("space"), 0))
                {
                  v27.location = 0;
                  v27.length = 2;
                  if (CFStringCompareWithOptions(v19, CFSTR("#x"), v27, 0))
                  {
                    v28.location = 0;
                    v28.length = 1;
                    if (CFStringCompareWithOptions(v19, CFSTR("#"), v28, 0))
                      goto LABEL_54;
                    CFStringGetCString(v19, buffer, 512, 0);
                    LODWORD(v23) = 0;
                    if (sscanf(buffer, "#%d", &v23) != 1)
                      goto LABEL_54;
                  }
                  else
                  {
                    CFStringGetCString(v19, buffer, 512, 0);
                    LODWORD(v23) = 0;
                    if (sscanf(buffer, "#x%x", &v23) != 1)
                      goto LABEL_54;
                  }
                  buffer[0] = v23;
                  buffer[1] = 0;
                  PCString::set((PCString *)&v24, buffer);
LABEL_54:
                  CStr = PCString::createCStr((PCString *)&v24);
                  (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v18 + 176))(v18, CStr, 0);
                  *((_BYTE *)this + 160) = 1;
                  CFRelease(v19);
                  PCString::~PCString((PCString *)&v24);
                  return;
                }
                v20 = " ";
              }
              else
              {
                v20 = "'";
              }
            }
            else
            {
              v20 = "\"";
            }
          }
          else
          {
            v20 = ">";
          }
        }
        else
        {
          v20 = "<";
        }
      }
      else
      {
        v20 = "&";
      }
      PCString::set((PCString *)&v24, v20);
      goto LABEL_54;
    case 15:
      v10 = PCSerializerReadStream::currentElement((PCSerializerReadStream *)this);
      if (v10)
      {
        v11 = v10;
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 184))(v10))
        {
          if (!*(_BYTE *)(v11 + 40) && !*(_BYTE *)(v11 + 12))
            PCSerializerReadStream::processElement((uint64_t)this, v11);
          if (v11 == PCSerializerReadStream::currentHandlerElement((PCSerializerReadStream *)this))
            PCSerializerReadStream::popHandler(this);
          PCSerializerReadStream::popElement(this);
        }
      }
LABEL_18:
      *((_BYTE *)this + 160) = 0;
      return;
    default:
      return;
  }
}

void sub_1B29B6038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
  PCString::~PCString(&a13);
  _Unwind_Resume(a1);
}

uint64_t PCXMLReadStream::abortParse(uint64_t this)
{
  *(_DWORD *)(this + 208) = 1;
  return this;
}

uint64_t PCXMLReadStream::stopParse(uint64_t this)
{
  *(_DWORD *)(this + 208) = 2;
  return this;
}

uint64_t PCXMLReadStream::getURL(PCXMLReadStream *this)
{
  return (uint64_t)this + 152;
}

uint64_t PCXMLReadStream::createElement(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;

  v8 = *(_DWORD *)(a1 + 184);
  if (v8 > 0xF)
  {
    v9 = operator new();
    PCXMLStreamElement::PCXMLStreamElement(v9, a2, a3, a4);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 176) + 200 * v8;
    PCXMLStreamElement::PCXMLStreamElement(v9, a2, a3, a4);
  }
  ++*(_DWORD *)(a1 + 184);
  return v9;
}

void sub_1B29B6120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C407CD822B3);
  _Unwind_Resume(a1);
}

uint64_t PCXMLReadStream::destroyElement(uint64_t this, PCStreamElement *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = this;
  v3 = *(_QWORD *)(this + 176);
  if (v3 <= (unint64_t)a2 && v3 + 3200 >= (unint64_t)a2)
  {
    this = (**(uint64_t (***)(PCStreamElement *))a2)(a2);
  }
  else if (a2)
  {
    this = (*(uint64_t (**)(PCStreamElement *))(*(_QWORD *)a2 + 8))(a2);
  }
  --*(_DWORD *)(v2 + 184);
  return this;
}

__n128 IntermediateLargeInteger::gcd@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X1>, int8x16_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  __n128 result;
  int8x16_t v26;
  int8x16_t v27[2];
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30[2];

  bignum_s256_init_from_s64(0, v28.i64);
  v6 = a1->i64[1];
  if (a1->i64[0] < 0)
  {
    if (v6 == -1)
    {
      v7 = a1[1].i64[0];
      if (v7 == -1)
        goto LABEL_47;
    }
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  if (v6)
    goto LABEL_7;
  v7 = a1[1].i64[0];
  if (v7)
    goto LABEL_7;
LABEL_47:
  v8 = a1[1].i64[1] == v7;
LABEL_8:
  v9 = a2->i64[0];
  v10 = a2->i64[1];
  if (a2->i64[0] < 0)
  {
    if (v10 == -1)
    {
      v11 = a2[1].i64[0];
      if (v11 == -1)
        goto LABEL_48;
    }
LABEL_14:
    v12 = 0;
    goto LABEL_15;
  }
  if (v10)
    goto LABEL_14;
  v11 = a2[1].i64[0];
  if (v11)
    goto LABEL_14;
LABEL_48:
  v12 = a2[1].i64[1] == v11;
  while (1)
  {
LABEL_15:
    v13 = v12;
    if (!v12)
      goto LABEL_18;
    if (v8)
      break;
    if (!v9)
      goto LABEL_46;
LABEL_18:
    v14 = a2[1];
    v28 = *a2;
    v29 = v14;
    v15 = a1->i64[1];
    if (a1->i64[0] < 0)
    {
      if (v15 != -1 || (v16 = a1[1].i64[0], v16 != -1))
      {
LABEL_33:
        bignum_s256_init_from_s64(0, v30[0].i64);
        bignum_s256_init_from_s64(0, v27[0].i64);
        bignum_s256_divide(a1, a2, v30, v27);
        goto LABEL_34;
      }
    }
    else
    {
      if (v15)
        goto LABEL_33;
      v16 = a1[1].i64[0];
      if (v16)
        goto LABEL_33;
    }
    if (a1[1].i64[1] != v16)
      goto LABEL_33;
    v17 = a2[1].i64[0];
    if (v9 < 0)
    {
      if (v10 != -1 || v17 != -1)
        goto LABEL_33;
      v18 = -1;
    }
    else
    {
      v18 = v10 | v17;
      if (v18)
        goto LABEL_33;
    }
    if (a2[1].i64[1] != v18)
      goto LABEL_33;
    bignum_s256_init_from_s64(a1->i64[0] % v9, v27[0].i64);
LABEL_34:
    v19 = v27[1];
    *a2 = v27[0];
    a2[1] = v19;
    v20 = v29;
    *a1 = v28;
    a1[1] = v20;
    v9 = a2->i64[0];
    v10 = a2->i64[1];
    v12 = 0;
    v8 = v13;
    if (a2->i64[0] < 0)
    {
      if (v10 == -1)
      {
        v12 = 0;
        v8 = v13;
        if (a2[1].i64[0] == -1)
        {
          v21 = -1;
LABEL_41:
          v12 = a2[1].i64[1] == v21;
          v8 = v13;
        }
      }
    }
    else if (!v10)
    {
      v12 = 0;
      v8 = v13;
      if (!a2[1].i64[0])
      {
        v21 = 0;
        goto LABEL_41;
      }
    }
  }
  if (v9)
  {
    v22 = a1->i64[0];
    do
    {
      v23 = v22;
      v22 = v9;
      v9 = v23 % v9;
    }
    while (v9);
    bignum_s256_init_from_s64(v22, v30[0].i64);
    v24 = v30[1];
    *a1 = v30[0];
    a1[1] = v24;
  }
LABEL_46:
  result = *(__n128 *)a1;
  v26 = a1[1];
  *a3 = *a1;
  a3[1] = v26;
  return result;
}

void IntermediateLargeInteger::makeCMTime(int8x16_t *a1@<X0>, int8x16_t *a2@<X1>, int a3@<W2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  CMTime *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  int8x16_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  int8x16_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  int8x16_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  __int128 v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CMTime v60;
  CMTime lhs;
  _BYTE v62[32];
  int8x16_t v63[2];
  int8x16_t v64[2];
  _BYTE v65[32];
  uint64_t v66[4];

  if ((a4 & 1) == 0)
  {
    v9 = a1->i64[0];
    v10 = a1->i64[1];
    if (a1->i64[0] < 0)
    {
      if (v10 != -1)
        goto LABEL_13;
      v11 = a1[1].i64[0];
      if (v11 != -1)
        goto LABEL_13;
    }
    else
    {
      if (v10)
        goto LABEL_13;
      v11 = a1[1].i64[0];
      if (v11)
        goto LABEL_13;
    }
    if (a1[1].i64[1] == v11)
    {
      v12 = a2->i64[0];
      if (!HIDWORD(a2->i64[0]) && !a2->i64[1] && !a2[1].i64[1] && !(a2[1].i64[0] | v12 & 0x80000000))
      {
        *(_QWORD *)a5 = 0;
        *(_QWORD *)(a5 + 8) = 0;
        *(_QWORD *)(a5 + 16) = 0;
        CMTimeMake((CMTime *)a5, v9, v12);
        if (a3)
          *(_DWORD *)(a5 + 12) |= 2u;
        return;
      }
    }
  }
LABEL_13:
  if (IntermediateLargeInteger::operator==(a2, 0))
  {
    v13 = MEMORY[0x1E0CA2E18];
    *(_OWORD *)a5 = *MEMORY[0x1E0CA2E18];
    v14 = *(_QWORD *)(v13 + 16);
    goto LABEL_103;
  }
  bignum_s256_init_from_s64(0, v66);
  v15 = a1[1].u64[1];
  v16 = v15 >> 63;
  if ((v15 & 0x8000000000000000) != 0)
  {
    bignum_s256_init_from_s64(0, (uint64_t *)v65);
    bignum_s256_sub((uint64_t)v66, (uint64_t)a1, (uint64_t)v65);
    v17 = *(int8x16_t *)&v65[16];
    *a1 = *(int8x16_t *)v65;
    a1[1] = v17;
  }
  if (a2[1].i64[1] < 0)
  {
    bignum_s256_init_from_s64(0, (uint64_t *)v65);
    bignum_s256_sub((uint64_t)v66, (uint64_t)a2, (uint64_t)v65);
    v18 = *(int8x16_t *)&v65[16];
    *a2 = *(int8x16_t *)v65;
    a2[1] = v18;
    LODWORD(v16) = v16 ^ 1;
  }
  v19 = a1[1];
  v64[0] = *a1;
  v64[1] = v19;
  v20 = a2[1];
  v63[0] = *a2;
  v63[1] = v20;
  IntermediateLargeInteger::gcd(v64, v63, (int8x16_t *)v65);
  if ((*(_QWORD *)v65 & 0x8000000000000000) == 0
    && *(_OWORD *)&v65[8] == 0
    && *(_QWORD *)v65 == 1
    && !*(_QWORD *)&v65[24])
  {
    goto LABEL_53;
  }
  v21 = a1->i64[1];
  if (a1->i64[0] < 0)
  {
    if (v21 != -1)
      goto LABEL_37;
    v22 = a1[1].i64[0];
    if (v22 != -1)
      goto LABEL_37;
  }
  else
  {
    if (v21)
      goto LABEL_37;
    v22 = a1[1].i64[0];
    if (v22)
      goto LABEL_37;
  }
  if (a1[1].i64[1] == v22)
  {
    if ((*(_QWORD *)v65 & 0x8000000000000000) != 0)
    {
      if (*(_OWORD *)&v65[8] != __PAIR128__(-1, -1))
        goto LABEL_37;
      v23 = -1;
    }
    else
    {
      v23 = *(_QWORD *)&v65[8] | *(_QWORD *)&v65[16];
      if (*(_OWORD *)&v65[8] != 0)
        goto LABEL_37;
    }
    if (*(_QWORD *)&v65[24] == v23)
    {
      bignum_s256_init_from_s64(a1->i64[0] / *(uint64_t *)v65, (uint64_t *)v62);
      goto LABEL_38;
    }
  }
LABEL_37:
  bignum_s256_init_from_s64(0, (uint64_t *)v62);
  bignum_s256_divide(a1, (int8x16_t *)v65, (int8x16_t *)v62, 0);
LABEL_38:
  v24 = *(int8x16_t *)&v62[16];
  *a1 = *(int8x16_t *)v62;
  a1[1] = v24;
  v25 = a2->i64[1];
  if (a2->i64[0] < 0)
  {
    if (v25 != -1)
      goto LABEL_51;
    v26 = a2[1].i64[0];
    if (v26 != -1)
      goto LABEL_51;
  }
  else
  {
    if (v25)
      goto LABEL_51;
    v26 = a2[1].i64[0];
    if (v26)
      goto LABEL_51;
  }
  if (a2[1].i64[1] != v26)
    goto LABEL_51;
  v27 = *(_QWORD *)&v65[16];
  if ((*(_QWORD *)v65 & 0x8000000000000000) != 0)
  {
    if (*(_OWORD *)&v65[8] == __PAIR128__(-1, -1))
      goto LABEL_49;
LABEL_51:
    bignum_s256_init_from_s64(0, (uint64_t *)v62);
    bignum_s256_divide(a2, (int8x16_t *)v65, (int8x16_t *)v62, 0);
    goto LABEL_52;
  }
  v27 = *(_QWORD *)&v65[8] | *(_QWORD *)&v65[16];
  if (*(_OWORD *)&v65[8] != 0)
    goto LABEL_51;
LABEL_49:
  if (*(_QWORD *)&v65[24] != v27)
    goto LABEL_51;
  bignum_s256_init_from_s64(a2->i64[0] / *(uint64_t *)v65, (uint64_t *)v62);
LABEL_52:
  v28 = *(int8x16_t *)&v62[16];
  *a2 = *(int8x16_t *)v62;
  a2[1] = v28;
LABEL_53:
  v29 = (CMTime *)MEMORY[0x1E0CA2E68];
  *(_OWORD *)a5 = *MEMORY[0x1E0CA2E68];
  *(_QWORD *)(a5 + 16) = v29->epoch;
  if (a3)
    *(_DWORD *)(a5 + 12) |= 2u;
  while (1)
  {
    v30 = a1->i64[1];
    if (a1->i64[0] < 0)
    {
      if (v30 != -1)
        goto LABEL_62;
      v31 = a1[1].i64[0];
      if (v31 != -1)
        goto LABEL_62;
    }
    else
    {
      if (v30)
        goto LABEL_62;
      v31 = a1[1].i64[0];
      if (v31)
        goto LABEL_62;
    }
    if (a1[1].i64[1] == v31)
      break;
LABEL_62:
    if (!HIDWORD(a2->i64[0]) && !a2->i64[1] && !a2[1].i64[1] && a2->i64[0] <= 1uLL && !a2[1].i64[0])
      break;
    *(_DWORD *)(a5 + 12) |= 2u;
    bignum_s256_init_from_s64(0, (uint64_t *)v62);
    v32 = 0;
    v33 = a1->i64[0];
    do
    {
      v34 = a1->u64[v32 + 1];
      *((_QWORD *)&v35 + 1) = v34;
      *(_QWORD *)&v35 = v33;
      *(_QWORD *)&v62[v32 * 8] = v35 >> 1;
      ++v32;
      v33 = v34;
    }
    while (v32 != 3);
    *(_QWORD *)&v62[24] = v34 >> 1;
    v36 = *(int8x16_t *)&v62[16];
    *a1 = *(int8x16_t *)v62;
    a1[1] = v36;
    bignum_s256_init_from_s64(0, (uint64_t *)v62);
    v37 = 0;
    v38 = a2->i64[0];
    do
    {
      v39 = a2->u64[v37 + 1];
      *((_QWORD *)&v40 + 1) = v39;
      *(_QWORD *)&v40 = v38;
      *(_QWORD *)&v62[v37 * 8] = v40 >> 1;
      ++v37;
      v38 = v39;
    }
    while (v37 != 3);
    *(_QWORD *)&v62[24] = v39 >> 1;
    v41 = *(int8x16_t *)&v62[16];
    *a2 = *(int8x16_t *)v62;
    a2[1] = v41;
  }
  v42 = 0;
  while (2)
  {
    v43 = a2->i64[0];
    if (HIDWORD(a2->i64[0]) || a2->i64[1] || a2[1].i64[1] || a2[1].i64[0])
    {
      if (v43 < 2)
        goto LABEL_90;
    }
    else if ((v43 & 0x80000000) == 0)
    {
      goto LABEL_90;
    }
    *(_DWORD *)(a5 + 12) |= 2u;
    if (!IntermediateLargeInteger::operator==(a1, 1))
    {
      bignum_s256_init_from_s64(0, (uint64_t *)v62);
      v44 = 0;
      v45 = a1->i64[0];
      do
      {
        v46 = a1->u64[v44 + 1];
        *((_QWORD *)&v47 + 1) = v46;
        *(_QWORD *)&v47 = v45;
        *(_QWORD *)&v62[v44 * 8] = v47 >> 1;
        ++v44;
        v45 = v46;
      }
      while (v44 != 3);
      *(_QWORD *)&v62[24] = v46 >> 1;
      goto LABEL_84;
    }
    if ((v42 & 1) == 0)
    {
      v42 = 1;
      bignum_s256_init_from_s64(1, (uint64_t *)v62);
LABEL_84:
      v48 = *(int8x16_t *)&v62[16];
      *a1 = *(int8x16_t *)v62;
      a1[1] = v48;
      bignum_s256_init_from_s64(0, (uint64_t *)v62);
      v49 = 0;
      v50 = a2->i64[0];
      do
      {
        v51 = a2->u64[v49 + 1];
        *((_QWORD *)&v52 + 1) = v51;
        *(_QWORD *)&v52 = v50;
        *(_QWORD *)&v62[v49 * 8] = v52 >> 1;
        ++v49;
        v50 = v51;
      }
      while (v49 != 3);
      *(_QWORD *)&v62[24] = v51 >> 1;
      v53 = *(int8x16_t *)&v62[16];
      *a2 = *(int8x16_t *)v62;
      a2[1] = v53;
      continue;
    }
    break;
  }
  bignum_s256_init_from_s64(0, (uint64_t *)v62);
  v54 = *(int8x16_t *)&v62[16];
  *a1 = *(int8x16_t *)v62;
  a1[1] = v54;
  bignum_s256_init_from_s64(1, (uint64_t *)v62);
  v55 = *(int8x16_t *)&v62[16];
  *a2 = *(int8x16_t *)v62;
  a2[1] = v55;
LABEL_90:
  v56 = a1->i64[0];
  v57 = a1->i64[1];
  if (a1->i64[0] < 0)
  {
    if (v57 != -1)
      goto LABEL_97;
    v58 = a1[1].i64[0];
    if (v58 != -1)
      goto LABEL_97;
LABEL_96:
    if (a1[1].i64[1] != v58)
      goto LABEL_97;
LABEL_101:
    *(_QWORD *)a5 = v56;
    *(_DWORD *)(a5 + 8) = a2->i64[0];
    if ((_DWORD)v16)
      goto LABEL_102;
    return;
  }
  if (!v57)
  {
    v58 = a1[1].i64[0];
    if (!v58)
      goto LABEL_96;
  }
LABEL_97:
  if (!IntermediateLargeInteger::operator==(a2, 1))
  {
    v56 = a1->i64[0];
    goto LABEL_101;
  }
  v59 = MEMORY[0x1E0CA2E30];
  *(_OWORD *)a5 = *MEMORY[0x1E0CA2E30];
  *(_QWORD *)(a5 + 16) = *(_QWORD *)(v59 + 16);
  if (!(_DWORD)v16)
    return;
LABEL_102:
  lhs = *v29;
  v60 = *(CMTime *)a5;
  CMTimeSubtract((CMTime *)v62, &lhs, &v60);
  *(_OWORD *)a5 = *(_OWORD *)v62;
  v14 = *(_QWORD *)&v62[16];
LABEL_103:
  *(_QWORD *)(a5 + 16) = v14;
}

BOOL IntermediateLargeInteger::operator==(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  if ((*a1 & 0x8000000000000000) == 0)
  {
    if (!v2)
    {
      v3 = a1[2];
      if (!v3)
        return *a1 == a2 && a1[3] == v3;
    }
    return 0;
  }
  if (v2 != -1)
    return 0;
  v3 = a1[2];
  if (v3 != -1)
    return 0;
  return *a1 == a2 && a1[3] == v3;
}

void PCXMLWriteStream::PCXMLWriteStream(PCXMLWriteStream *this, PCStream *a2, int a3, int a4)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char __str[32];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  PCSerializerWriteStream::PCSerializerWriteStream(this);
  *(_QWORD *)v8 = &off_1E65132D0;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 80) = a2;
  PCURL::PCURL((PCURL *)(v8 + 1120), 0);
  v9 = setlocale(4, 0);
  if (strcmp("C", v9))
    setlocale(4, "C");
  PCStream::operator<<(*((_QWORD *)this + 10), "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
  PCStream::operator<<(*((_QWORD *)this + 10), "<!DOCTYPE ozxmlscene>\n");
  snprintf(__str, 0x20uLL, "%d.%d", a3, a4);
  v10 = PCStream::operator<<(*((_QWORD *)this + 10), "<ozml version=\"");
  v11 = PCStream::operator<<(v10, __str);
  PCStream::operator<<(v11, "\">\n\n");
  *((_DWORD *)this + 22) = 0;
}

void sub_1B29B6B48(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v4;

  std::deque<PCHash128>::~deque[abi:ne180100](v2);
  *v1 = &unk_1E6512FB0;
  v4 = (void *)v1[1];
  if (v4)
  {
    v1[2] = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t PCXMLWriteStream::close(PCXMLWriteStream *this)
{
  return PCStream::operator<<(*((_QWORD *)this + 10), "\n</ozml>\n");
}

uint64_t PCXMLWriteStream::getURL(PCXMLWriteStream *this)
{
  const void *v2;
  void *v3;

  v2 = (const void *)*((_QWORD *)this + 10);
  if (v2
  {
    return (uint64_t)v3 + 8;
  }
  else
  {
    return (uint64_t)this + 1120;
  }
}

void PCXMLWriteStream::startElement(PCXMLWriteStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int32 v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  PCException_ScopeUndefined *exception;
  struct type_info *v30;
  void (*v31)(void *);
  uint64_t v32;
  char v33;
  __n128 v34;

  v8 = a2;
  v10 = (char *)this + 92;
  v11 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 1) == v11)
    v12 = 0;
  else
    v12 = *(_QWORD *)(v11 - 8);
  v13 = *((_QWORD *)this + 9);
  v14 = (char *)this + 92;
  if (v13)
  {
    v15 = v13 + *((_QWORD *)this + 8) - 1;
    v16 = *(_QWORD *)(*((_QWORD *)this + 5) + ((v15 >> 5) & 0x7FFFFFFFFFFFFF8));
    v17 = v16 + 16 * v15;
    v19 = *(unsigned __int8 *)(v17 + 13);
    v18 = (_BYTE *)(v17 + 13);
    v14 = (char *)this + 92;
    if (!v19)
    {
      *((_WORD *)this + 46) = 2622;
      v14 = (char *)this + 94;
      v20 = v16 + 16 * v15;
      *(_BYTE *)(v20 + 12) = 0;
      *v18 = 1;
      *(_BYTE *)(v20 + 14) = 1;
    }
  }
  if (!v12)
  {
    PCPrint("scope not defined!\n", a2, a3, a4, a5, a6, a7, a8, v33);
    exception = (PCException_ScopeUndefined *)__cxa_allocate_exception(0x40uLL);
    *(_OWORD *)exception = 0u;
    *((_OWORD *)exception + 1) = 0u;
    *((_OWORD *)exception + 2) = 0u;
    *((_OWORD *)exception + 3) = 0u;
    PCException_ScopeUndefined::PCException_ScopeUndefined(exception);
    v31 = (void (*)(void *))PCException_ScopeUndefined::~PCException_ScopeUndefined;
LABEL_13:
    __cxa_throw(exception, v30, v31);
  }
  if (!*(_QWORD *)v12)
  {
LABEL_12:
    PCStream::operator<<(*((_QWORD *)this + 10), v10);
    PCPrint("Token not defined in scope %s!\n", v22, v23, v24, v25, v26, v27, v28, **(_QWORD **)(*((_QWORD *)this + 2) - 8));
    exception = (PCException_ScopeUndefined *)__cxa_allocate_exception(0x40uLL);
    *(_OWORD *)exception = 0u;
    *((_OWORD *)exception + 1) = 0u;
    *((_OWORD *)exception + 2) = 0u;
    *((_OWORD *)exception + 3) = 0u;
    PCException_NoElementDefined::PCException_NoElementDefined(exception);
    v31 = (void (*)(void *))PCException_NoElementDefined::~PCException_NoElementDefined;
    goto LABEL_13;
  }
  while (*(_DWORD *)(v12 + 8) != (_DWORD)a2 || *(_DWORD *)(v12 + 12))
  {
    v21 = *(_QWORD *)(v12 + 16);
    v12 += 16;
    if (!v21)
      goto LABEL_12;
  }
  if (*((_DWORD *)this + 22))
  {
    v32 = 0;
    do
      v14[v32++] = 9;
    while (v32 < *((_DWORD *)this + 22));
    v14 += v32;
  }
  *(_WORD *)v14 = 60;
  strcat((char *)this + 92, *(const char **)v12);
  PCStream::operator<<(*((_QWORD *)this + 10), v10);
  v34.n128_u64[0] = *(_QWORD *)v12;
  v34.n128_u32[2] = v8;
  v34.n128_u16[6] = 1;
  v34.n128_u8[14] = 0;
  std::deque<PCXMLWriteStream::PCXMLElementInfo>::push_back((_QWORD *)this + 4, &v34);
  ++*((_DWORD *)this + 22);
}

void sub_1B29B6DDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void PCException_ScopeUndefined::PCException_ScopeUndefined(PCException_ScopeUndefined *this)
{
  _QWORD *v1;

  PCException::PCException(this);
  *v1 = &unk_1E6513430;
}

void PCException_NoElementDefined::PCException_NoElementDefined(PCException_NoElementDefined *this)
{
  _QWORD *v1;

  PCException::PCException(this);
  *v1 = &unk_1E6513470;
}

uint64_t PCXMLWriteStream::endElement(PCXMLWriteStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  uint64_t v17;
  PCException_NoElementDefined *exception;
  char v20;

  v8 = *((_QWORD *)this + 9);
  if (!v8)
  {
    PCPrint("endElement() called without startElement()!\n", a2, a3, a4, a5, a6, a7, a8, v20);
    exception = (PCException_NoElementDefined *)__cxa_allocate_exception(0x40uLL);
    *(_OWORD *)exception = 0u;
    *((_OWORD *)exception + 1) = 0u;
    *((_OWORD *)exception + 2) = 0u;
    *((_OWORD *)exception + 3) = 0u;
    PCException_NoElementDefined::PCException_NoElementDefined(exception);
  }
  v10 = *((_DWORD *)this + 22) - 1;
  *((_DWORD *)this + 22) = v10;
  v11 = v8 + *((_QWORD *)this + 8) - 1;
  v12 = *(_QWORD *)(*((_QWORD *)this + 5) + ((v11 >> 5) & 0x7FFFFFFFFFFFFF8));
  v13 = v12 + 16 * v11;
  if (*(_BYTE *)(v13 + 12))
  {
    v14 = "/>\n";
  }
  else
  {
    v14 = (char *)this + 92;
    if (*(_BYTE *)(v12 + 16 * v11 + 14))
      v15 = v10 == 0;
    else
      v15 = 1;
    v16 = (char *)this + 92;
    if (!v15)
    {
      v17 = 0;
      do
        v14[v17++] = 9;
      while (v17 < *((_DWORD *)this + 22));
      v16 = &v14[v17];
    }
    *(_WORD *)v16 = 12092;
    strcpy(v16 + 2, *(const char **)v13);
    strcpy(&v14[strlen((const char *)this + 92)], ">\n");
  }
  PCStream::operator<<(*((_QWORD *)this + 10), v14);
  --*((_QWORD *)this + 9);
  return std::deque<PVLoadedEffectItem>::__maybe_remove_back_spare[abi:ne180100]((_QWORD *)this + 4, 1);
}

void sub_1B29B6F70(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t PCXMLWriteStream::writeBlankLine(PCXMLWriteStream *this)
{
  return PCStream::operator<<(*((_QWORD *)this + 10), "\n");
}

char *PCXMLWriteStream::terminateStartTag(PCXMLWriteStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  char *v14;
  uint64_t v15;
  PCException_NoElementDefined *exception;
  char v18;

  v8 = *((_QWORD *)this + 9);
  if (!v8)
  {
    PCPrint("endElement() called without startElement()!\n", a2, a3, a4, a5, a6, a7, a8, v18);
    exception = (PCException_NoElementDefined *)__cxa_allocate_exception(0x40uLL);
    *(_OWORD *)exception = 0u;
    *((_OWORD *)exception + 1) = 0u;
    *((_OWORD *)exception + 2) = 0u;
    *((_OWORD *)exception + 3) = 0u;
    PCException_NoElementDefined::PCException_NoElementDefined(exception);
  }
  v9 = v8 + *((_QWORD *)this + 8) - 1;
  v10 = *(_QWORD *)(*((_QWORD *)this + 5) + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8));
  v11 = v10 + 16 * v9;
  v13 = *(unsigned __int8 *)(v11 + 13);
  v12 = (_BYTE *)(v11 + 13);
  if (v13)
    return (char *)this + 92;
  v15 = v9;
  v14 = (char *)this + 93;
  *((_WORD *)this + 46) = 62;
  *(_BYTE *)(v10 + 16 * v15 + 12) = 0;
  *v12 = 1;
  return v14;
}

void sub_1B29B7048(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t PCXMLWriteStream::writeValue(PCXMLWriteStream *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char *started;

  v8 = a2;
  started = PCXMLWriteStream::terminateStartTag(this, a2, a3, a4, a5, a6, a7, a8);
  snprintf(started, (PCXMLWriteStream *)((char *)this + 92) - (PCXMLWriteStream *)started + 1024, "%d", v8);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

{
  int v8;
  char *started;

  v8 = a2;
  started = PCXMLWriteStream::terminateStartTag(this, a2, a3, a4, a5, a6, a7, a8);
  snprintf(started, (PCXMLWriteStream *)((char *)this + 92) - (PCXMLWriteStream *)started + 1024, "%u", v8);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

{
  char *started;

  started = PCXMLWriteStream::terminateStartTag(this, a2, a3, a4, a5, a6, a7, a8);
  snprintf(started, (PCXMLWriteStream *)((char *)this + 92) - (PCXMLWriteStream *)started + 1024, "%lld", a2);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

{
  char *started;

  started = PCXMLWriteStream::terminateStartTag(this, a2, a3, a4, a5, a6, a7, a8);
  snprintf(started, (PCXMLWriteStream *)((char *)this + 92) - (PCXMLWriteStream *)started + 1024, "%llu", a2);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

uint64_t PCXMLWriteStream::writeValue(PCXMLWriteStream *this, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *started;

  started = PCXMLWriteStream::terminateStartTag(this, a3, a4, a5, a6, a7, a8, a9);
  snprintf(started, (PCXMLWriteStream *)((char *)this + 92) - (PCXMLWriteStream *)started + 1024, "%.10g", a2);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

uint64_t PCXMLWriteStream::writeValue(PCXMLWriteStream *this, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *started;

  started = PCXMLWriteStream::terminateStartTag(this, a3, a4, a5, a6, a7, a8, a9);
  snprintf(started, (PCXMLWriteStream *)((char *)this + 92) - (PCXMLWriteStream *)started + 1024, "%.17lg", a2);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

uint64_t PCXMLWriteStream::writeValue(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *started;

  started = PCXMLWriteStream::terminateStartTag((PCXMLWriteStream *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  snprintf(started, a1 + 92 - (_QWORD)started + 1024, "%08x%08x%08x%08x", *a2, a2[1], a2[2], a2[3]);
  return PCStream::operator<<(*(_QWORD *)(a1 + 80), (char *)(a1 + 92));
}

void PCXMLWriteStream::writeValue(PCXMLWriteStream *this, PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFString *v9;
  const __CFString *v10;
  CFIndex v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  char *v19;
  size_t v20;
  PCException_NoElementDefined *exception;
  char v22;

  if (!*((_QWORD *)this + 9))
  {
    PCPrint("value not within an element body!\n", (uint64_t)a2, a3, a4, a5, a6, a7, a8, v22);
    exception = (PCException_NoElementDefined *)__cxa_allocate_exception(0x40uLL);
    *(_OWORD *)exception = 0u;
    *((_OWORD *)exception + 1) = 0u;
    *((_OWORD *)exception + 2) = 0u;
    *((_OWORD *)exception + 3) = 0u;
    PCException_NoElementDefined::PCException_NoElementDefined(exception);
  }
  v9 = PCString::cf_str(a2);
  v10 = myCFXMLCreateStringByEscapingEntities(v9);
  v11 = 4 * CFStringGetLength(v10);
  v12 = (char *)malloc_type_malloc(v11 + 256, 0x6B92E561uLL);
  if (v12)
  {
    v13 = v12;
    v14 = *((_QWORD *)this + 9) + *((_QWORD *)this + 8) - 1;
    v15 = *(_QWORD *)(*((_QWORD *)this + 5) + ((v14 >> 5) & 0x7FFFFFFFFFFFFF8));
    v16 = v15 + 16 * v14;
    v18 = *(unsigned __int8 *)(v16 + 13);
    v17 = (_BYTE *)(v16 + 13);
    v19 = v12;
    if (!v18)
    {
      *v12 = 62;
      v19 = v12 + 1;
      *(_BYTE *)(v15 + 16 * v14 + 12) = 0;
      *v17 = 1;
    }
    *v19 = 0;
    v20 = strlen(v12);
    CFStringGetCString(v10, &v13[v20], v11, 0x8000100u);
    PCStream::operator<<(*((_QWORD *)this + 10), v13);
    free(v13);
  }
  CFRelease(v10);
}

void sub_1B29B73F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFMutableStringRef myCFXMLCreateStringByEscapingEntities(CFStringRef theString)
{
  CFMutableStringRef MutableCopy;
  CFRange v3;
  CFRange v4;
  CFRange v5;
  CFRange v6;

  MutableCopy = CFStringCreateMutableCopy(0, 0, theString);
  v3.length = CFStringGetLength(MutableCopy);
  v3.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("&"), CFSTR("&amp;"), v3, 0);
  v4.length = CFStringGetLength(MutableCopy);
  v4.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("<"), CFSTR("&lt;"), v4, 0);
  v5.length = CFStringGetLength(MutableCopy);
  v5.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR(">"), CFSTR("&gt;"), v5, 0);
  v6.length = CFStringGetLength(MutableCopy);
  v6.location = 0;
  CFStringFindAndReplace(MutableCopy, CFSTR("\""), CFSTR("&quot;"), v6, 0);
  return MutableCopy;
}

uint64_t PCXMLWriteStream::writeValue(PCXMLWriteStream *this, const CMTime *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *started;

  started = PCXMLWriteStream::terminateStartTag(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  snprintf(started, (PCXMLWriteStream *)((char *)this + 92) - (PCXMLWriteStream *)started + 1024, "%lld %d %x %lld", a2->value, a2->timescale, a2->flags, a2->epoch);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

uint64_t PCXMLWriteStream::getAttributeInfo(PCXMLWriteStream *this, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  PCException_NoElementDefined *exception;
  struct type_info *v9;
  void (*v10)(void *);

  v2 = *((_QWORD *)this + 9);
  if (!v2)
  {
    exception = (PCException_NoElementDefined *)__cxa_allocate_exception(0x40uLL);
    *(_OWORD *)exception = 0u;
    *((_OWORD *)exception + 1) = 0u;
    *((_OWORD *)exception + 2) = 0u;
    *((_OWORD *)exception + 3) = 0u;
    PCException_NoElementDefined::PCException_NoElementDefined(exception);
    v10 = (void (*)(void *))PCException_NoElementDefined::~PCException_NoElementDefined;
LABEL_10:
    __cxa_throw(exception, v9, v10);
  }
  v4 = *((_QWORD *)this + 2);
  if (*((_QWORD *)this + 1) == v4 || (result = *(_QWORD *)(v4 - 8)) == 0)
  {
    exception = (PCException_NoElementDefined *)__cxa_allocate_exception(0x40uLL);
    *(_OWORD *)exception = 0u;
    *((_OWORD *)exception + 1) = 0u;
    *((_OWORD *)exception + 2) = 0u;
    *((_OWORD *)exception + 3) = 0u;
    PCException_ScopeUndefined::PCException_ScopeUndefined(exception);
    v10 = (void (*)(void *))PCException_ScopeUndefined::~PCException_ScopeUndefined;
    goto LABEL_10;
  }
  if (!*(_QWORD *)result)
  {
LABEL_9:
    exception = (PCException_NoElementDefined *)__cxa_allocate_exception(0x40uLL);
    *(_OWORD *)exception = 0u;
    *((_OWORD *)exception + 1) = 0u;
    *((_OWORD *)exception + 2) = 0u;
    *((_OWORD *)exception + 3) = 0u;
    PCException_AttributeUndefined::PCException_AttributeUndefined(exception);
    v10 = (void (*)(void *))PCException_AttributeUndefined::~PCException_AttributeUndefined;
    goto LABEL_10;
  }
  v6 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 5)
                             + (((unint64_t)(v2 + *((_QWORD *)this + 8) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                 + 16 * (v2 + *((_BYTE *)this + 64) - 1)
                 + 8);
  while (*(_DWORD *)(result + 8) != v6 || *(_DWORD *)(result + 12) != a2)
  {
    v7 = *(_QWORD *)(result + 16);
    result += 16;
    if (!v7)
      goto LABEL_9;
  }
  return result;
}

void sub_1B29B7674(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void PCException_AttributeUndefined::PCException_AttributeUndefined(PCException_AttributeUndefined *this)
{
  _QWORD *v1;

  PCException::PCException(this);
  *v1 = &unk_1E65134B0;
}

uint64_t PCXMLWriteStream::writeAttribute(PCXMLWriteStream *this, int a2, int a3)
{
  const char **AttributeInfo;

  AttributeInfo = (const char **)PCXMLWriteStream::getAttributeInfo(this, a2);
  snprintf((char *)this + 92, 0x400uLL, " %s=\"%u\"", *AttributeInfo, a3);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

{
  const char **AttributeInfo;

  AttributeInfo = (const char **)PCXMLWriteStream::getAttributeInfo(this, a2);
  snprintf((char *)this + 92, 0x400uLL, " %s=\"%d\"", *AttributeInfo, a3);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

uint64_t PCXMLWriteStream::writeAttribute(PCXMLWriteStream *this, int a2, uint64_t a3)
{
  const char **AttributeInfo;

  AttributeInfo = (const char **)PCXMLWriteStream::getAttributeInfo(this, a2);
  snprintf((char *)this + 92, 0x400uLL, " %s=\"%llu\"", *AttributeInfo, a3);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

{
  const char **AttributeInfo;

  AttributeInfo = (const char **)PCXMLWriteStream::getAttributeInfo(this, a2);
  snprintf((char *)this + 92, 0x400uLL, " %s=\"%lld\"", *AttributeInfo, a3);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

uint64_t PCXMLWriteStream::writeAttribute(PCXMLWriteStream *this, int a2, float a3)
{
  const char **AttributeInfo;

  AttributeInfo = (const char **)PCXMLWriteStream::getAttributeInfo(this, a2);
  snprintf((char *)this + 92, 0x400uLL, " %s=\"%.10g\"", *AttributeInfo, a3);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

uint64_t PCXMLWriteStream::writeAttribute(PCXMLWriteStream *this, int a2, double a3)
{
  const char **AttributeInfo;

  AttributeInfo = (const char **)PCXMLWriteStream::getAttributeInfo(this, a2);
  snprintf((char *)this + 92, 0x400uLL, " %s=\"%.17lg\"", *AttributeInfo, a3);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

uint64_t PCXMLWriteStream::writeAttribute(uint64_t a1, int a2, _DWORD *a3)
{
  const char **AttributeInfo;

  AttributeInfo = (const char **)PCXMLWriteStream::getAttributeInfo((PCXMLWriteStream *)a1, a2);
  snprintf((char *)(a1 + 92), 0x400uLL, " %s=\"%08x%08x%08x%08x\"", *AttributeInfo, *a3, a3[1], a3[2], a3[3]);
  return PCStream::operator<<(*(_QWORD *)(a1 + 80), (char *)(a1 + 92));
}

void PCXMLWriteStream::writeAttribute(PCXMLWriteStream *this, int a2, PCString *a3)
{
  const char **AttributeInfo;
  __CFString *v6;
  const __CFString *v7;
  CFIndex v8;
  char *v9;
  char *v10;
  size_t v11;

  AttributeInfo = (const char **)PCXMLWriteStream::getAttributeInfo(this, a2);
  v6 = PCString::cf_str(a3);
  v7 = myCFXMLCreateStringByEscapingEntities(v6);
  v8 = 4 * CFStringGetLength(v7);
  v9 = (char *)malloc_type_malloc(v8 + 256, 0xDDCDE674uLL);
  if (v9)
  {
    v10 = v9;
    *v9 = 32;
    strcpy(v9 + 1, *AttributeInfo);
    strcat(v10, "=\"");
    v11 = strlen(v10);
    CFStringGetCString(v7, &v10[v11], v8, 0x8000100u);
    *(_WORD *)&v10[strlen(v10)] = 34;
    PCStream::operator<<(*((_QWORD *)this + 10), v10);
    free(v10);
  }
  CFRelease(v7);
}

uint64_t PCXMLWriteStream::writeAttribute(PCXMLWriteStream *this, int a2, const CMTime *a3)
{
  const char **AttributeInfo;

  AttributeInfo = (const char **)PCXMLWriteStream::getAttributeInfo(this, a2);
  snprintf((char *)this + 92, 0x400uLL, " %s=\"%lld %d %x %lld\"", *AttributeInfo, a3->value, a3->timescale, a3->flags, a3->epoch);
  return PCStream::operator<<(*((_QWORD *)this + 10), (char *)this + 92);
}

uint64_t PCXMLWriteStream::writeOptionalAttribute(PCXMLWriteStream *this, uint64_t a2, const PCString *a3)
{
  return (*(uint64_t (**)(PCXMLWriteStream *, uint64_t, const PCString *))(*(_QWORD *)this + 200))(this, a2, a3);
}

void PCXMLWriteStream::~PCXMLWriteStream(PCXMLWriteStream *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E65132D0;
  PCURL::~PCURL((PCXMLWriteStream *)((char *)this + 1120));
  std::deque<PCHash128>::~deque[abi:ne180100]((_QWORD *)this + 4);
  *(_QWORD *)this = &unk_1E6512FB0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E65132D0;
  PCURL::~PCURL((PCXMLWriteStream *)((char *)this + 1120));
  std::deque<PCHash128>::~deque[abi:ne180100]((_QWORD *)this + 4);
  *(_QWORD *)this = &unk_1E6512FB0;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E29170);
}

void PCException_ScopeUndefined::~PCException_ScopeUndefined(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void PCException_NoElementDefined::~PCException_NoElementDefined(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void PCException_AttributeUndefined::~PCException_AttributeUndefined(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

__n128 std::deque<PCXMLWriteStream::PCXMLElementInfo>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<PCXMLWriteStream::PCXMLElementInfo>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void std::deque<PCXMLWriteStream::PCXMLElementInfo>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B29B7F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float PCEstimateGammaFromTag(const PCICCTag *a1)
{
  float v1;
  uint64_t v2;
  uint64_t v4;
  void (**v5)(_anonymous_namespace_::EstimateGammaVisitor *__hidden);
  float v6;

  PCGetTransferFunctionFromTag(a1, &v4);
  if (!v4)
    return 0.0;
  v5 = &off_1E65134F0;
  v6 = 0.0;
  (*(void (**)(uint64_t, void (***)(_anonymous_namespace_::EstimateGammaVisitor *__hidden)))(*(_QWORD *)v4 + 24))(v4, &v5);
  v1 = v6;
  v2 = v4;
  v4 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return v1;
}

void sub_1B29B7FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

float PCEstimateGammaFromTransferFunction(uint64_t a1)
{
  void (**v2)(_anonymous_namespace_::EstimateGammaVisitor *__hidden);
  float v3;

  v2 = &off_1E65134F0;
  v3 = 0.0;
  (*(void (**)(uint64_t, void (***)(_anonymous_namespace_::EstimateGammaVisitor *__hidden)))(*(_QWORD *)a1 + 24))(a1, &v2);
  return v3;
}

void `anonymous namespace'::EstimateGammaVisitor::~EstimateGammaVisitor(_anonymous_namespace_::EstimateGammaVisitor *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t `anonymous namespace'::EstimateGammaVisitor::visit(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1065353216;
  return result;
}

void `anonymous namespace'::EstimateGammaVisitor::visit(_anonymous_namespace_::EstimateGammaVisitor *this, const PCICCTransferFunctionGamma *a2)
{
  *((float *)this + 2) = PCICCTransferFunctionGamma::getGamma(a2);
}

void `anonymous namespace'::EstimateGammaVisitor::visit(_anonymous_namespace_::EstimateGammaVisitor *this, const PCICCTransferFunctionLUT *a2)
{
  uint64_t LUTEnd;
  uint64_t FactoryForSerialization;
  float v6;

  LUTEnd = PCICCTransferFunctionLUT::getLUTEnd(a2);
  FactoryForSerialization = OZFactoryBase::getFactoryForSerialization((uint64_t)a2);
  v6 = 1.0;
  if (LUTEnd - FactoryForSerialization != 8)
    v6 = PCEstimateGammaNumerically<PCICCTransferFunctionLUT>((uint64_t)a2);
  *((float *)this + 2) = v6;
}

void `anonymous namespace'::EstimateGammaVisitor::visit(_anonymous_namespace_::EstimateGammaVisitor *this, const PCICCTransferFunctionParametric0 *a2)
{
  *((float *)this + 2) = PCICCTransferFunctionGamma::getGamma(a2);
}

void `anonymous namespace'::EstimateGammaVisitor::visit(_anonymous_namespace_::EstimateGammaVisitor *this, const PCICCTransferFunctionParametric1 *a2)
{
  *((float *)this + 2) = PCEstimateGammaNumerically<PCICCTransferFunctionLUT>((uint64_t)a2);
}

void `anonymous namespace'::EstimateGammaVisitor::visit(_anonymous_namespace_::EstimateGammaVisitor *this, const PCICCTransferFunctionParametric2 *a2)
{
  *((float *)this + 2) = PCEstimateGammaNumerically<PCICCTransferFunctionLUT>((uint64_t)a2);
}

void `anonymous namespace'::EstimateGammaVisitor::visit(_anonymous_namespace_::EstimateGammaVisitor *this, const PCICCTransferFunctionParametric3 *a2)
{
  float Gamma;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;

  Gamma = PCICCTransferFunctionGamma::getGamma(a2);
  v5 = PCICCTransferFunctionParametric3::getA(a2);
  v6 = PCICCTransferFunctionParametric3::getB(a2);
  v7 = PCICCTransferFunctionParametric3::getC(a2);
  v8 = PCICCTransferFunctionParametric3::getD(a2);
  if (PCIs709TransferFunction(Gamma, v5, v6, v7, v8))
  {
    v9 = 1.961;
  }
  else if (PCIssRGBTransferFunction(Gamma, v5, v6, v7, v8))
  {
    v9 = 2.2;
  }
  else
  {
    v9 = PCEstimateGammaNumerically<PCICCTransferFunctionLUT>((uint64_t)a2);
  }
  *((float *)this + 2) = v9;
}

void `anonymous namespace'::EstimateGammaVisitor::visit(_anonymous_namespace_::EstimateGammaVisitor *this, const PCICCTransferFunctionParametric4 *a2)
{
  *((float *)this + 2) = PCEstimateGammaNumerically<PCICCTransferFunctionLUT>((uint64_t)a2);
}

float PCEstimateGammaNumerically<PCICCTransferFunctionLUT>(uint64_t a1)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  int v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v17;
  float v18;

  v2 = (*(float (**)(uint64_t, float))(*(_QWORD *)a1 + 16))(a1, 0.5);
  if (v2 < 0.01 || v2 > 0.99)
    goto LABEL_7;
  v3 = 0.0;
  v4 = logf(v2) / -0.69315;
  do
  {
    v5 = (*(float (**)(uint64_t, float))(*(_QWORD *)a1 + 16))(a1, v3 * 0.00097656);
    v6 = vabds_f32(v5, powf(v3 * 0.00097656, v4));
    v3 = v3 + 1.0;
  }
  while (v3 != 1025.0 && v6 < 0.001);
  if (v6 >= 0.001)
  {
LABEL_7:
    v7 = 0.0;
    v8 = 52;
    v9 = 0.0;
    do
    {
      v10 = (*(float (**)(uint64_t, float))(*(_QWORD *)a1 + 16))(a1, (float)v8 * 0.00097656);
      if ((v10 <= -0.00001 || v10 >= 0.00001) && fabsf(v10 + -1.0) >= 0.00001)
      {
        v11 = logf(v10);
        v9 = v9 + (float)(v11 / logf((float)v8 * 0.00097656));
        v7 = v7 + 1.0;
      }
      ++v8;
    }
    while (v8 != 1024);
    v12 = 0.0;
    v13 = v9 / v7;
    do
    {
      v14 = (*(float (**)(uint64_t, float))(*(_QWORD *)a1 + 16))(a1, v12 * 0.00097656);
      v15 = powf(v12 * 0.00097656, v13);
      if ((float)(v12 * 0.00097656) > 0.9 || (float)(v12 * 0.00097656) < 0.1)
        v17 = 0.01;
      else
        v17 = 0.05;
      v18 = vabds_f32(v14, v15);
      v12 = v12 + 1.0;
    }
    while (v12 != 1025.0 && v18 < v17);
    v4 = 0.0;
    if (v18 < v17)
      return floorf((float)(v13 * 10.0) + 0.5) / 10.0;
  }
  return v4;
}

void PCString::PCString(PCString *this, const char *a2)
{
  __CFString *Copy;

  if (a2 && *a2)
    Copy = (__CFString *)CFStringCreateWithCString(0, a2, 0x8000100u);
  else
    Copy = (__CFString *)CFStringCreateCopy(0, &stru_1E65EDDA0);
  this->var0 = Copy;
}

void PCString::PCString(PCString *this, const char *a2, const char *a3)
{
  __CFString *v4;

  v4 = 0;
  if (a2 && a3)
    v4 = (__CFString *)CFStringCreateWithCString(0, a2, 0x8000100u);
  this->var0 = v4;
}

void PCString::PCString(PCString *this, const unsigned __int16 *a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = 0;
    while (a2[v2++])
      ;
    this->var0 = (__CFString *)CFStringCreateWithCharacters(0, a2, v2 - 1);
  }
}

void PCString::PCString(PCString *this, const PCString *a2)
{
  __CFString *var0;

  this->var0 = 0;
  var0 = a2->var0;
  if (var0)
    this->var0 = (__CFString *)CFStringCreateCopy(0, var0);
}

void PCString::PCString(PCString *this, const __CFString *cf, int a3)
{
  __CFString *Copy;

  if (!a3)
  {
    if (cf)
    {
      Copy = (__CFString *)CFStringCreateCopy(0, cf);
      goto LABEL_7;
    }
LABEL_6:
    Copy = 0;
    goto LABEL_7;
  }
  if (!cf)
    goto LABEL_6;
  Copy = (__CFString *)CFRetain(cf);
LABEL_7:
  this->var0 = Copy;
}

void PCString::~PCString(PCString *this)
{
  __CFString *var0;

  var0 = this->var0;
  if (var0)
    CFRelease(var0);
}

uint64_t *PCString::intern(PCString *this, const PCString *a2)
{
  unsigned __int8 v3;
  _QWORD *v5;

  {
    v5 = (_QWORD *)operator new();
    v5[2] = 0;
    v5[1] = 0;
    *v5 = v5 + 1;
    PCString::intern(PCString const&)::sTable = (uint64_t)v5;
  }
  return std::__tree<PCString>::__emplace_unique_key_args<PCString,PCString const&>((PCString *)PCString::intern(PCString const&)::sTable, this, (CFStringRef *)&this->var0)+ 4;
}

void sub_1B29B8B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PCString::set(PCString *this, const PCString *a2)
{
  __CFString *var0;

  var0 = this->var0;
  if (var0)
  {
    this->var0 = 0;
    CFRelease(var0);
  }
  if (a2->var0)
    this->var0 = (__CFString *)CFStringCreateCopy(0, a2->var0);
}

void PCString::clear(PCString *this)
{
  __CFString *var0;

  var0 = this->var0;
  if (var0)
  {
    this->var0 = 0;
    CFRelease(var0);
  }
}

void PCString::set(PCString *this, const char *a2)
{
  __CFString *v3;
  __CFString *var0;

  v3 = (__CFString *)CFStringCreateWithCString(0, a2, 0x8000100u);
  var0 = this->var0;
  if (this->var0)
  {
    this->var0 = 0;
    CFRelease(var0);
  }
  this->var0 = v3;
}

__CFString *PCString::set(PCString *this, UniChar *chars)
{
  uint64_t v4;
  CFIndex v6;
  __CFString *var0;
  __CFString *result;

  if (*chars)
  {
    v4 = 0;
    while (chars[++v4])
      ;
    v6 = v4;
  }
  else
  {
    v6 = 0;
  }
  var0 = this->var0;
  if (this->var0)
  {
    this->var0 = 0;
    CFRelease(var0);
  }
  result = (__CFString *)CFStringCreateWithCharacters(0, chars, v6);
  this->var0 = result;
  return result;
}

void PCString::set(PCString *this, CFStringRef theString)
{
  __CFString *var0;

  var0 = this->var0;
  if (var0)
  {
    this->var0 = 0;
    CFRelease(var0);
  }
  if (theString)
    this->var0 = (__CFString *)CFStringCreateCopy(0, theString);
}

BOOL PCString::empty(PCString *this)
{
  __CFString *var0;

  var0 = this->var0;
  return !var0 || CFStringGetLength(var0) == 0;
}

__CFString *PCString::size(PCString *this)
{
  __CFString *result;

  result = this->var0;
  if (result)
    return (__CFString *)CFStringGetLength(result);
  return result;
}

char *PCString::createCStr(PCString *this)
{
  __CFString *var0;
  CFIndex Length;
  CFIndex v4;
  char *v5;

  var0 = this->var0;
  if (var0)
  {
    Length = CFStringGetLength(var0);
    v4 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    v5 = (char *)malloc_type_malloc(v4, 0xB8E0C132uLL);
    if (v5)
      CFStringGetCString(this->var0, v5, v4, 0x8000100u);
  }
  else
  {
    v5 = (char *)malloc_type_malloc(1uLL, 0x100004077774924uLL);
    *v5 = 0;
  }
  return v5;
}

char *PCString::createUTF8Str(PCString *this)
{
  __CFString *var0;
  CFIndex Length;
  CFIndex v4;
  char *v5;

  var0 = this->var0;
  if (!var0)
    return 0;
  Length = CFStringGetLength(var0);
  v4 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v5 = (char *)malloc_type_malloc(v4, 0xF3DDC59EuLL);
  if (v5)
    CFStringGetCString(this->var0, v5, v4, 0x8000100u);
  return v5;
}

__CFString *PCString::cf_str(PCString *this)
{
  if (this->var0)
    return this->var0;
  else
    return &stru_1E65EDDA0;
}

UniChar *PCString::createUniStr(PCString *this)
{
  __CFString *var0;
  CFIndex Length;
  UniChar *v4;
  CFRange v6;

  var0 = this->var0;
  if (!var0)
    return 0;
  Length = CFStringGetLength(var0);
  v4 = (UniChar *)malloc_type_malloc(2 * Length + 2, 0x1000040BDFB0063uLL);
  if (v4)
  {
    v6.location = 0;
    v6.length = Length;
    CFStringGetCharacters(this->var0, v6, v4);
    v4[Length] = 0;
  }
  return v4;
}

char *PCString::createVerifiedFormatString(PCString *this, const char *a2)
{
  char *CStr;
  int v4;
  char *v5;
  const char *v6;

  CStr = PCString::createCStr(this);
  v4 = strlen(a2);
  v5 = (char *)malloc_type_malloc(v4 + 1, 0x34160C44uLL);
  strcpy(v5, a2);
  v6 = fmtcheck(CStr, v5);
  free(v5);
  if (v6 != CStr)
  {
    free(CStr);
    return 0;
  }
  return CStr;
}

CFComparisonResult PCString::compare(PCString *this, const PCString *a2)
{
  __CFString *var0;
  __CFString *v3;
  BOOL v5;
  BOOL v6;

  var0 = this->var0;
  v3 = a2->var0;
  if (!((unint64_t)var0 | (unint64_t)v3))
    return 0;
  if (var0)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (!v5)
    return 0xFFFFFFFFLL;
  if (var0)
    v6 = v3 == 0;
  else
    v6 = 0;
  if (v6)
    return 1;
  else
    return CFStringCompare(var0, v3, 0x20uLL);
}

CFComparisonResult PCString::caseInsensitiveCompare(PCString *this, const PCString *a2)
{
  __CFString *var0;
  __CFString *v3;
  BOOL v5;
  BOOL v6;

  var0 = this->var0;
  v3 = a2->var0;
  if (!((unint64_t)var0 | (unint64_t)v3))
    return 0;
  if (var0)
    v5 = 1;
  else
    v5 = v3 == 0;
  if (!v5)
    return 0xFFFFFFFFLL;
  if (var0)
    v6 = v3 == 0;
  else
    v6 = 0;
  if (v6)
    return 1;
  else
    return CFStringCompare(var0, v3, 0x21uLL);
}

PCString *PCString::insert(PCString *this, CFIndex a2, const PCString *a3)
{
  __CFString *var0;
  const __CFAllocator *v6;
  __CFString *MutableCopy;
  __CFString *v9;

  var0 = this->var0;
  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (var0)
  {
    MutableCopy = CFStringCreateMutableCopy(v6, 0, var0);
    CFStringInsert(MutableCopy, a2, a3->var0);
    v9 = this->var0;
    if (this->var0)
    {
      this->var0 = 0;
      CFRelease(v9);
    }
  }
  else
  {
    MutableCopy = (__CFString *)CFStringCreateCopy(v6, a3->var0);
  }
  this->var0 = MutableCopy;
  return this;
}

PCString *PCString::append(PCString *this, const PCString *a2)
{
  __CFString *var0;
  const __CFAllocator *v4;
  const __CFArray *v5;
  __CFString *v6;
  __CFString *v7;
  void *values[3];

  values[2] = *(void **)MEMORY[0x1E0C80C00];
  var0 = a2->var0;
  if (a2->var0)
  {
    if (this->var0)
    {
      values[0] = this->var0;
      values[1] = var0;
      v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v5 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)values, 2, MEMORY[0x1E0C9B378]);
      v6 = (__CFString *)CFStringCreateByCombiningStrings(v4, v5, &stru_1E65EDDA0);
      CFRelease(v5);
      v7 = this->var0;
      if (this->var0)
      {
        this->var0 = 0;
        CFRelease(v7);
      }
      this->var0 = v6;
    }
    else
    {
      PCString::set(this, a2);
    }
  }
  return this;
}

PCString *PCString::append(PCString *this, const char *a2)
{
  __CFString *MutableCopy;
  __CFString *var0;

  if (a2)
  {
    if (this->var0)
    {
      MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, this->var0);
      CFStringAppendCString(MutableCopy, a2, 0x8000100u);
      var0 = this->var0;
      if (this->var0)
      {
        this->var0 = 0;
        CFRelease(var0);
      }
      this->var0 = MutableCopy;
    }
    else
    {
      PCString::set(this, a2);
    }
  }
  return this;
}

PCString *PCString::erase(PCString *this, CFIndex a2, unsigned int a3)
{
  CFIndex v5;
  __CFString *MutableCopy;
  __CFString *var0;
  CFRange v9;

  if (a3 && this->var0)
  {
    v5 = a3;
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, this->var0);
    v9.location = a2;
    v9.length = v5;
    CFStringDelete(MutableCopy, v9);
    var0 = this->var0;
    if (this->var0)
    {
      this->var0 = 0;
      CFRelease(var0);
    }
    this->var0 = MutableCopy;
  }
  return this;
}

PCString *PCString::replace(PCString *this, CFIndex a2, unsigned int a3, const PCString *a4)
{
  CFIndex v7;
  __CFString *MutableCopy;
  __CFString *var0;
  CFRange v11;

  if (a4->var0 && this->var0)
  {
    v7 = a3;
    MutableCopy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, this->var0);
    v11.location = a2;
    v11.length = v7;
    CFStringReplace(MutableCopy, v11, a4->var0);
    var0 = this->var0;
    if (this->var0)
    {
      this->var0 = 0;
      CFRelease(var0);
    }
    this->var0 = MutableCopy;
  }
  return this;
}

uint64_t PCString::find(PCString *this, const PCString *a2)
{
  __CFString *var0;
  CFRange v3;
  BOOL v4;

  var0 = this->var0;
  if (!var0)
    return 0xFFFFFFFFLL;
  v3 = CFStringFind(var0, a2->var0, 0);
  if (v3.length)
    v4 = v3.location == -1;
  else
    v4 = 1;
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return LODWORD(v3.location);
}

void PCString::substr(PCString *this@<X0>, CFIndex a2@<X1>, unsigned int a3@<W2>, CFStringRef *a4@<X8>)
{
  CFStringRef v5;
  CFStringRef v6;
  CFRange v7;

  if (this->var0)
  {
    v7.length = a3;
    v7.location = a2;
    v5 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], this->var0, v7);
    v6 = v5;
    if (v5)
      CFRetain(v5);
    *a4 = v6;
    CFRelease(v6);
  }
  else
  {
    *a4 = 0;
  }
}

void sub_1B29B93A8(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCString::substrTo(PCString *this@<X0>, uint64_t a2@<X1>, CFStringRef *a3@<X8>)
{
  CFStringRef v4;
  CFStringRef v5;
  CFRange v6;

  if (this->var0
    && (v6.length = a2 + 1,
        v6.location = 0,
        (v4 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], this->var0, v6)) != 0))
  {
    v5 = v4;
    CFRetain(v4);
    *a3 = v5;
    CFRelease(v5);
  }
  else
  {
    *a3 = 0;
  }
}

void sub_1B29B941C(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCString::substrFrom(PCString *this@<X0>, CFIndex a2@<X1>, CFStringRef *a3@<X8>)
{
  __CFString *var0;
  CFRange v7;
  CFStringRef v8;
  CFStringRef v9;

  var0 = this->var0;
  if (var0 && (v7.length = CFStringGetLength(var0) - a2, v7.length >= 0))
  {
    v7.location = a2;
    v8 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E0C9AE00], this->var0, v7);
    v9 = v8;
    if (v8)
      CFRetain(v8);
    *a3 = v9;
    CFRelease(v9);
  }
  else
  {
    *a3 = 0;
  }
}

void sub_1B29B94AC(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCString::sprintf(PCString *this, CFStringRef format, ...)
{
  __CFString *var0;
  va_list va;

  va_start(va, format);
  var0 = this->var0;
  if (var0)
  {
    this->var0 = 0;
    CFRelease(var0);
  }
  if (format)
    this->var0 = (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, format, va);
}

void PCString::sprintf(PCString *this, const char *__format, ...)
{
  va_list va;

  va_start(va, __format);
  vsnprintf(sprintf_buf, 0x800uLL, __format, va);
  byte_1EF07587F = 0;
  PCString::set(this, sprintf_buf);
}

void PCString::ssprintf(PCString *this@<X0>, PCString *a2@<X8>, ...)
{
  va_list va;

  va_start(va, a2);
  a2->var0 = 0;
  vsnprintf(sprintf_buf, 0x800uLL, (const char *)this, va);
  byte_1EF07587F = 0;
  PCString::set(a2, sprintf_buf);
}

void sub_1B29B95D0(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCString::format(PCString *this@<X0>, PCString *a2@<X8>)
{
  a2->var0 = 0;
  PCString::sprintf(a2, CFSTR("%d"), this);
}

void sub_1B29B9620(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

void PCString::format(PCString *this@<X0>, double a2@<D0>, PCString *a3@<X8>)
{
  a3->var0 = 0;
  PCString::sprintf(a3, CFSTR("%lg"), *(_QWORD *)&a2);
}

void sub_1B29B9670(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<PCString>::__emplace_unique_key_args<PCString,PCString const&>(PCString *a1, PCString *this, CFStringRef *a3)
{
  const PCString *v5;
  uint64_t *var0;
  uint64_t **v7;
  uint64_t *v9[3];
  const PCString *v10;

  v5 = std::__tree<std::__value_type<PCString,TXFont *>,std::__map_value_compare<PCString,std::__value_type<PCString,TXFont *>,std::less<PCString>,true>,std::allocator<std::__value_type<PCString,TXFont *>>>::__find_equal<PCString>(a1, &v10, this);
  var0 = (uint64_t *)v5->var0;
  if (!v5->var0)
  {
    v7 = (uint64_t **)v5;
    std::__tree<PCString>::__construct_node<PCString const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v10, v7, v9[0]);
    var0 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<PCString,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<PCString,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return var0;
}

_QWORD *std::__tree<PCString>::__construct_node<PCString const&>@<X0>(uint64_t a1@<X0>, CFStringRef *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;

  v5 = a1 + 8;
  result = operator new(0x28uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result[4] = 0;
  if (*a2)
  {
    v7 = result;
    result = CFStringCreateCopy(0, *a2);
    v7[4] = result;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B29B9774(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<PCString,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<PCString,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<PCString,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<PCString,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  PCString *v2;

  v2 = *(PCString **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      PCString::~PCString(v2 + 4);
    operator delete(v2);
  }
}

const __CFString *PCString::ns_str(PCString *this)
{
  if (this->var0)
    return this->var0;
  else
    return &stru_1E65EDDA0;
}

void PCString::stringWithoutSpacesAndNewlines(PCString *this@<X0>, PCString *a2@<X8>)
{
  const __CFString *v3;

  v3 = (const __CFString *)-[__CFString stringByRemovingCharactersInSet:](this->var0, "stringByRemovingCharactersInSet:", objc_msgSend(MEMORY[0x1E0CB3500], "whitespaceAndNewlineCharacterSet"));
  a2->var0 = 0;
  PCString::set(a2, v3);
}

uint64_t PCString::composedCharacterCount(PCString *this)
{
  return -[__CFString composedCharacterCount](this->var0, "composedCharacterCount");
}

uint64_t PCString::isWhitespaceAndNewline(PCString *this)
{
  return -[__CFString isAllWhitespaceAndNewline](this->var0, "isAllWhitespaceAndNewline");
}

uint64_t PCString::isNewline(PCString *this)
{
  return -[__CFString isNewline](this->var0, "isNewline");
}

void PCConditionVariable::PCConditionVariable(PCConditionVariable *this)
{
  pthread_cond_init((pthread_cond_t *)this, 0);
}

void PCConditionVariable::~PCConditionVariable(pthread_cond_t *this)
{
  pthread_cond_destroy(this);
}

uint64_t PCConditionVariable::wait(pthread_cond_t *this, PCMutex *a2)
{
  return pthread_cond_wait(this, &a2->_Mutex);
}

void PCMutex::PCMutex(PCMutex *this)
{
  uint64_t v1;
  uint64_t v2;
  PCException *exception;
  PCString v4;
  PCString v5;

  this->_vptr$PCMutex = (void **)&off_1E6513568;
  v1 = pthread_mutex_init(&this->_Mutex, 0);
  if ((_DWORD)v1)
  {
    v2 = v1;
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"error: %s returned %d", &v5, "pthread_mutex_init(&_Mutex, NULL)", v2);
    PCString::PCString(&v4, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCMutex.cpp");
    PCException::PCException(exception, &v5, &v4, 26);
    *(_QWORD *)exception = &unk_1E65135B0;
  }
}

void sub_1B29B9984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  void *v12;
  int v13;

  PCString::~PCString(&a11);
  PCString::~PCString(&a12);
  if (v13)
    __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

void PCMutex::PCMutex(PCMutex *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  PCException *v7;
  uint64_t v8;
  uint64_t v9;
  PCException *v10;
  PCException *exception;
  PCException *v12;
  PCException *v13;
  PCString v14;
  PCString v15;
  pthread_mutexattr_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  this->_vptr$PCMutex = (void **)&off_1E6513568;
  if (a2)
  {
    v3 = pthread_mutexattr_init(&v16);
    if ((_DWORD)v3)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"error: %s returned %d", &v15, "pthread_mutexattr_init(&rmta)", v3);
      PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCMutex.cpp");
      PCException::PCException(exception, &v15, &v14, 47);
      *(_QWORD *)exception = &unk_1E65135B0;
    }
    v4 = pthread_mutexattr_settype(&v16, 2);
    if ((_DWORD)v4)
    {
      v12 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"error: %s returned %d", &v15, "pthread_mutexattr_settype(&rmta, PTHREAD_MUTEX_RECURSIVE)", v4);
      PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCMutex.cpp");
      PCException::PCException(v12, &v15, &v14, 48);
      *(_QWORD *)v12 = &unk_1E65135B0;
    }
    v5 = pthread_mutex_init(&this->_Mutex, &v16);
    if ((_DWORD)v5)
    {
      v13 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"error: %s returned %d", &v15, "pthread_mutex_init(&_Mutex, &rmta)", v5);
      PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCMutex.cpp");
      PCException::PCException(v13, &v15, &v14, 50);
      *(_QWORD *)v13 = &unk_1E65135B0;
    }
    v6 = pthread_mutexattr_destroy(&v16);
    if ((_DWORD)v6)
    {
      v7 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"error: %s returned %d", &v15, "pthread_mutexattr_destroy(&rmta)", v6);
      PCString::PCString(&v14, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCMutex.cpp");
      PCException::PCException(v7, &v15, &v14, 52);
      *(_QWORD *)v7 = &unk_1E65135B0;
    }
  }
  else
  {
    v8 = pthread_mutex_init(&this->_Mutex, 0);
    if ((_DWORD)v8)
    {
      v9 = v8;
      v10 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"error: %s returned %d", (PCString *)&v16, "pthread_mutex_init(&_Mutex, NULL)", v9);
      PCString::PCString(&v15, "/Library/Caches/com.apple.xbs/Sources/ProCoreiOS/PCMutex.cpp");
      PCException::PCException(v10, (const PCString *)&v16, &v15, 56);
      *(_QWORD *)v10 = &unk_1E65135B0;
    }
  }
}

void sub_1B29B9D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13, PCString a14)
{
  void *v14;
  char v15;

  PCString::~PCString(&a12);
  PCString::~PCString(&a13);
  if ((v15 & 1) != 0)
    __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

void PCMutex::~PCMutex(PCMutex *this)
{
  this->_vptr$PCMutex = (void **)&off_1E6513568;
  pthread_mutex_destroy(&this->_Mutex);
}

{
  this->_vptr$PCMutex = (void **)&off_1E6513568;
  pthread_mutex_destroy(&this->_Mutex);
}

{
  this->_vptr$PCMutex = (void **)&off_1E6513568;
  pthread_mutex_destroy(&this->_Mutex);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCMutex::lock(PCMutex *this)
{
  return pthread_mutex_lock(&this->_Mutex);
}

uint64_t PCMutex::unlock(PCMutex *this)
{
  return pthread_mutex_unlock(&this->_Mutex);
}

void PCSystemException::~PCSystemException(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void PCSystemException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCSystemException"));
}

void PCSemaphore::PCSemaphore(PCSemaphore *this, unsigned int a2)
{
  pthread_mutex_t *v2;

  *(_QWORD *)this = a2;
  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_cond_init((pthread_cond_t *)((char *)this + 8), 0);
  pthread_mutex_init(v2, 0);
}

void PCSemaphore::~PCSemaphore(PCSemaphore *this)
{
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 56));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 8));
}

uint64_t PCSemaphore::wait(PCSemaphore *this)
{
  pthread_mutex_t *v2;
  uint64_t i;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  for (i = *(_QWORD *)this; !*(_QWORD *)this; i = *(_QWORD *)this)
    pthread_cond_wait((pthread_cond_t *)((char *)this + 8), v2);
  *(_QWORD *)this = i - 1;
  return pthread_mutex_unlock(v2);
}

uint64_t PCSemaphore::signal(PCSemaphore *this)
{
  pthread_mutex_t *v2;

  v2 = (pthread_mutex_t *)((char *)this + 56);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 56));
  ++*(_QWORD *)this;
  pthread_cond_signal((pthread_cond_t *)((char *)this + 8));
  return pthread_mutex_unlock(v2);
}

void PCThread::PCThread(PCThread *this, void (*a2)(void *), void *a3, const char *a4)
{
  _QWORD *v8;
  size_t v9;
  char *v10;
  size_t v11;
  pthread_attr_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v8 = (_QWORD *)operator new();
  *v8 = a2;
  v8[1] = a3;
  v8[2] = 0;
  if (a4)
  {
    v9 = strlen(a4) + 1;
    v10 = (char *)operator new[]();
    v8[2] = v10;
    strncpy(v10, a4, v9);
  }
  v11 = 0;
  pthread_attr_init(&v12);
  pthread_attr_getstacksize(&v12, &v11);
  if (!(v11 >> 20))
    pthread_attr_setstacksize(&v12, 0x100000uLL);
  if (pthread_create((pthread_t *)this, &v12, (void *(__cdecl *)(void *))PCThread::startup, v8))
    MEMORY[0x1B5E29170](v8, 0x90C401993945DLL);
}

uint64_t PCThread::startup(PCThread *this, void *a2)
{
  const char *v3;
  uint64_t v4;

  v3 = (const char *)*((_QWORD *)this + 2);
  if (v3)
    pthread_setname_np(v3);
  (*(void (**)(_QWORD, void *))this)(*((_QWORD *)this + 1), a2);
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
    *((_QWORD *)this + 2) = 0;
  }
  MEMORY[0x1B5E29170](this, 0x90C401993945DLL);
  return 0;
}

void PCThread::PCThread(PCThread *this)
{
  *(_QWORD *)this = pthread_self();
}

uint64_t PCThread::detach(pthread_t *this)
{
  return pthread_detach(*this);
}

BOOL PCThread::isSelf(_opaque_pthread_t **this)
{
  _opaque_pthread_t *v1;
  _opaque_pthread_t *v2;

  v1 = *this;
  v2 = pthread_self();
  return pthread_equal(v1, v2) != 0;
}

_QWORD *operator<<(_QWORD *a1, int a2)
{
  const char *v3;
  uint64_t v4;

  switch(a2)
  {
    case 0:
      v3 = "PC_BLEND_NORMAL";
      goto LABEL_54;
    case 1:
      v3 = "PC_BLEND_SEPARATOR0";
      goto LABEL_62;
    case 2:
      v3 = "PC_BLEND_SUBTRACT";
      goto LABEL_58;
    case 3:
      v3 = "PC_BLEND_DARKEN";
      goto LABEL_54;
    case 4:
      v3 = "PC_BLEND_MULTIPLY";
      goto LABEL_58;
    case 5:
      v3 = "PC_BLEND_COLOR_BURN";
      goto LABEL_62;
    case 6:
      v3 = "PC_BLEND_LINEAR_BURN";
      goto LABEL_20;
    case 7:
      v3 = "PC_BLEND_SEPARATOR1";
      goto LABEL_62;
    case 8:
      v3 = "PC_BLEND_ADD";
      goto LABEL_52;
    case 9:
      v3 = "PC_BLEND_LIGHTEN";
      goto LABEL_45;
    case 10:
      v3 = "PC_BLEND_SCREEN";
      goto LABEL_54;
    case 11:
      v3 = "PC_BLEND_COLOR_DODGE";
      goto LABEL_20;
    case 12:
      v3 = "PC_BLEND_LINEAR_DODGE";
      goto LABEL_30;
    case 13:
      v3 = "PC_BLEND_SEPARATOR2";
      goto LABEL_62;
    case 14:
      v3 = "PC_BLEND_OVERLAY";
      goto LABEL_45;
    case 15:
      v3 = "PC_BLEND_SOFT_LIGHT";
      goto LABEL_62;
    case 16:
      v3 = "PC_BLEND_HARD_LIGHT";
      goto LABEL_62;
    case 17:
      v3 = "PC_BLEND_VIVID_LIGHT";
LABEL_20:
      v4 = 20;
      goto LABEL_65;
    case 18:
      v3 = "PC_BLEND_LINEAR_LIGHT";
      goto LABEL_30;
    case 19:
      v3 = "PC_BLEND_PIN_LIGHT";
      goto LABEL_43;
    case 20:
      v3 = "PC_BLEND_HARD_MIX";
      goto LABEL_58;
    case 21:
      v3 = "PC_BLEND_SEPARATOR3";
      goto LABEL_62;
    case 22:
      v3 = "PC_BLEND_DIFFERENCE";
      goto LABEL_62;
    case 23:
      v3 = "PC_BLEND_EXCLUSION";
      goto LABEL_43;
    case 24:
      v3 = "PC_BLEND_SEPARATOR4";
      goto LABEL_62;
    case 25:
      v3 = "PC_BLEND_STENCIL_ALPHA";
      v4 = 22;
      goto LABEL_65;
    case 26:
      v3 = "PC_BLEND_STENCIL_LUMA";
LABEL_30:
      v4 = 21;
      goto LABEL_65;
    case 27:
      v3 = "PC_BLEND_SILHOUETTE_ALPHA";
      v4 = 25;
      goto LABEL_65;
    case 28:
      v3 = "PC_BLEND_SILHOUETTE_LUMA";
      v4 = 24;
      goto LABEL_65;
    case 29:
      v3 = "PC_BLEND_BEHIND";
      goto LABEL_54;
    case 30:
      v3 = "PC_BLEND_SEPARATOR5";
      goto LABEL_62;
    case 31:
      v3 = "PC_BLEND_ALPHA_ADD";
      goto LABEL_43;
    case 32:
      v3 = "PC_BLEND_LUMINESCENT_PREMUL";
      goto LABEL_41;
    case 33:
      v3 = "PC_BLEND_SEPARATOR6";
      goto LABEL_62;
    case 34:
      v3 = "PC_BLEND_COMBINE";
      goto LABEL_45;
    case 35:
      v3 = "PC_BLEND_LIGHT_WRAP";
      goto LABEL_62;
    case 36:
      v3 = "PC_BLEND_SUPPORTED_LIST_END";
LABEL_41:
      v4 = 27;
      goto LABEL_65;
    case 37:
      v3 = "PC_BLEND_SEPARATOR";
LABEL_43:
      v4 = 18;
      goto LABEL_65;
    case 38:
      v3 = "PC_BLEND_AVERAGE";
LABEL_45:
      v4 = 16;
      goto LABEL_65;
    case 39:
      v3 = "PC_BLEND_CLEAR";
      goto LABEL_48;
    case 40:
      v3 = "PC_BLEND_COLOR";
LABEL_48:
      v4 = 14;
      goto LABEL_65;
    case 41:
      v3 = "PC_BLEND_DISSOLVE";
      goto LABEL_58;
    case 42:
      v3 = "PC_BLEND_GRAY";
      goto LABEL_64;
    case 43:
      v3 = "PC_BLEND_HUE";
LABEL_52:
      v4 = 12;
      goto LABEL_65;
    case 44:
      v3 = "PC_BLEND_INVERT";
LABEL_54:
      v4 = 15;
      goto LABEL_65;
    case 45:
      v3 = "PC_BLEND_LUMINOSITY";
      goto LABEL_62;
    case 46:
      v3 = "PC_BLEND_MASK";
      goto LABEL_64;
    case 47:
      v3 = "PC_BLEND_NEGATION";
LABEL_58:
      v4 = 17;
      goto LABEL_65;
    case 48:
      v3 = "PC_BLEND_NONE";
      goto LABEL_64;
    case 49:
      v3 = "PC_BLEND_OVER";
      goto LABEL_64;
    case 50:
      v3 = "PC_BLEND_SATURATION";
LABEL_62:
      v4 = 19;
      goto LABEL_65;
    case 51:
      v3 = "PC_BLEND_TEST";
LABEL_64:
      v4 = 13;
LABEL_65:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
      break;
    default:
      return a1;
  }
  return a1;
}

PCColorSpaceCache *PCGetWorkingColorSpace(PCColorSpaceCache *result)
{
  if ((_DWORD)result == 1)
    return (PCColorSpaceCache *)PCColorSpaceCache::cgRec2020Linear(result);
  if (!(_DWORD)result)
    return (PCColorSpaceCache *)PCColorSpaceCache::cgsRGB(result);
  return result;
}

uint64_t PCGetUIColorSpaceID()
{
  return 3;
}

float PCGetWorkingColorSpaceLuminanceCoefficients(int a1, uint64_t a2)
{
  return PCGetGamutColorSpaceLuminanceCoefficients(4 * (a1 != 0), a2);
}

float PCGetGamutColorSpaceLuminanceCoefficients(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  float result;

  if (a1 <= 5)
  {
    if (initGamutInfo(void)::once != -1)
      dispatch_once_f(&initGamutInfo(void)::once, 0, (dispatch_function_t)actuallyInitGamutInfo);
    v4 = gamutInfo + 72 * a1;
    *(_DWORD *)a2 = *(_DWORD *)v4;
    *(_DWORD *)(a2 + 4) = *(_DWORD *)(v4 + 4);
    result = *(float *)(v4 + 8);
    *(float *)(a2 + 8) = result;
  }
  return result;
}

uint64_t PCGetColorGamut(int a1)
{
  return 4 * (a1 != 0);
}

void PCGetColorSpaceLuminanceCoefficients(CGColorSpace *a1, float *a2)
{
  float v4;
  float v5;
  float v6;
  float v7[3];
  float32x4_t v8[2];
  _DWORD v9[56];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (CGColorSpaceGetModel(a1))
  {
    PCICCProfile::PCICCProfile((PCICCProfile *)v9, a1);
    PCGetChromaticities((PCICCProfile *)v9, v8);
    PCGetLuminanceCoefficients(v8[0].f32, v7);
    v4 = v7[0];
    v5 = v7[1];
    v6 = v7[2];
    PCICCProfile::~PCICCProfile((PCICCProfile *)v9);
    if (v4 == 0.0 && v5 == 0.0 && v6 == 0.0)
    {
      PCGetRec709LuminanceCoefficients((uint64_t)v9);
      v4 = *(float *)v9;
      v5 = *(float *)&v9[1];
      v6 = *(float *)&v9[2];
    }
  }
  else
  {
    v5 = 0.0;
    v4 = 1.0;
    v6 = 0.0;
  }
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
}

void sub_1B29BA690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
  {
    PCICCProfile::~PCICCProfile((PCICCProfile *)&a16);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B29BA630);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PCGetWorkingColorSpaceRGBToYCbCrMatrix(int a1, uint64_t a2)
{
  uint64_t result;
  uint64_t i;
  uint64_t j;

  result = getGamutInfoForWorkingGamut(a1);
  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 12; j += 4)
      *(_DWORD *)(a2 + j) = *(_DWORD *)(result + j);
    result += 12;
    a2 += 12;
  }
  return result;
}

uint64_t getGamutInfoForWorkingGamut(int a1)
{
  uint64_t v2;

  if (initGamutInfo(void)::once != -1)
    dispatch_once_f(&initGamutInfo(void)::once, 0, (dispatch_function_t)actuallyInitGamutInfo);
  v2 = 288;
  if (!a1)
    v2 = 0;
  return gamutInfo + v2;
}

uint64_t PCGetWorkingColorSpaceYCbCrToRGBMatrix(int a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;

  result = getGamutInfoForWorkingGamut(a1);
  v4 = 0;
  v5 = result + 36;
  do
  {
    for (i = 0; i != 12; i += 4)
      *(_DWORD *)(a2 + i) = *(_DWORD *)(v5 + i);
    ++v4;
    v5 += 12;
    a2 += 12;
  }
  while (v4 != 3);
  return result;
}

void actuallyInitGamutInfo(void *a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[2];

  v1 = (_OWORD *)operator new[]();
  v2 = v1 + 28;
  *v1 = xmmword_1B305A620;
  v3 = (uint64_t)(v1 + 1);
  v4 = v3;
  do
  {
    *(_OWORD *)v4 = xmmword_1B304F230;
    *(_OWORD *)(v4 + 16) = xmmword_1B304F230;
    *(_OWORD *)(v4 + 32) = xmmword_1B30520F0;
    *(_OWORD *)(v4 + 48) = xmmword_1B304F240;
    *(_QWORD *)(v4 + 64) = 0x3F80000000000000;
    v4 += 72;
  }
  while ((_OWORD *)v4 != v2);
  v5 = 0;
  gamutInfo = v3;
  do
  {
    if (v5 == 288)
    {
      v6 = kPCChromaticities_ITU_R2020;
      v7 = *(_OWORD *)&dword_1B3058B98;
    }
    else
    {
      v6 = kPCChromaticities_ITU_R709_2;
      v7 = *(_OWORD *)&qword_1B3058B18;
    }
    v8[0] = v6;
    v8[1] = v7;
    PCGetRGBToYCbCrMatrix((float *)v8, gamutInfo + v5);
    PCGetYCbCrToRGBMatrix((float *)v8, gamutInfo + v5 + 36);
    v5 += 72;
  }
  while (v5 != 432);
}

void PCICCTransferFunctionLinear::PCICCTransferFunctionLinear(PCICCTransferFunctionLinear *this)
{
  *(_QWORD *)this = &off_1E65135F0;
}

void PCICCTransferFunctionLinear::~PCICCTransferFunctionLinear(PCICCTransferFunctionLinear *this)
{
  JUMPOUT(0x1B5E29170);
}

uint64_t PCICCTransferFunctionLinear::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, a1);
}

void PCICCTransferFunctionGamma::PCICCTransferFunctionGamma(PCICCTransferFunctionGamma *this, float a2)
{
  *(_QWORD *)this = &off_1E6513620;
  *((float *)this + 2) = a2;
}

void PCICCTransferFunctionGamma::~PCICCTransferFunctionGamma(PCICCTransferFunctionGamma *this)
{
  JUMPOUT(0x1B5E29170);
}

float PCICCTransferFunctionGamma::operator()(uint64_t a1, float a2)
{
  return powf(a2, *(float *)(a1 + 8));
}

float PCICCTransferFunctionGamma::getGamma(PCICCTransferFunctionGamma *this)
{
  return *((float *)this + 2);
}

uint64_t PCICCTransferFunctionGamma::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1);
}

void PCICCTransferFunctionLUT::~PCICCTransferFunctionLUT(PCICCTransferFunctionLUT *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E6513650;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E6513650;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E29170);
}

float PCICCTransferFunctionLUT::operator()(uint64_t a1, float a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  unint64_t v5;

  if (a2 <= 0.0)
    return **(float **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = ((*(_QWORD *)(a1 + 16) - v2) >> 2) - 1;
  if (a2 >= 1.0)
    return *(float *)(v2 + 4 * v3);
  v4 = (float)(unint64_t)v3 * a2;
  v5 = vcvtms_u32_f32(v4);
  return (1.0 - (float)(v4 - (float)v5)) * *(float *)(v2 + 4 * v5)
       + (float)(v4 - (float)v5) * *(float *)(v2 + 4 * v5 + 4);
}

uint64_t PCICCTransferFunctionLUT::getLUTEnd(PCICCTransferFunctionLUT *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t PCICCTransferFunctionLUT::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1);
}

void PCICCTransferFunctionParametric0::PCICCTransferFunctionParametric0(PCICCTransferFunctionParametric0 *this, float a2)
{
  *(_QWORD *)this = &off_1E6513680;
  *((float *)this + 2) = a2;
}

void PCICCTransferFunctionParametric0::~PCICCTransferFunctionParametric0(PCICCTransferFunctionParametric0 *this)
{
  JUMPOUT(0x1B5E29170);
}

float PCICCTransferFunctionParametric0::operator()(uint64_t a1, float a2)
{
  return powf(a2, *(float *)(a1 + 8));
}

uint64_t PCICCTransferFunctionParametric0::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1);
}

void PCICCTransferFunctionParametric1::~PCICCTransferFunctionParametric1(PCICCTransferFunctionParametric1 *this)
{
  JUMPOUT(0x1B5E29170);
}

float PCICCTransferFunctionParametric1::operator()(float *a1, float a2)
{
  float v2;
  float v3;

  v3 = a1[3];
  v2 = a1[4];
  if ((float)((float)-v2 / v3) <= a2)
    return powf(v2 + (float)(v3 * a2), a1[2]);
  else
    return 0.0;
}

uint64_t PCICCTransferFunctionParametric1::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, a1);
}

void PCICCTransferFunctionParametric2::~PCICCTransferFunctionParametric2(PCICCTransferFunctionParametric2 *this)
{
  JUMPOUT(0x1B5E29170);
}

float PCICCTransferFunctionParametric2::operator()(float *a1, float a2)
{
  float v2;
  float v3;

  v3 = a1[3];
  v2 = a1[4];
  if ((float)((float)-v2 / v3) <= a2)
    return powf(v2 + (float)(v3 * a2), a1[2]) + a1[5];
  else
    return a1[5];
}

uint64_t PCICCTransferFunctionParametric2::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a1);
}

void PCICCTransferFunctionParametric3::PCICCTransferFunctionParametric3(PCICCTransferFunctionParametric3 *this, float a2, float a3, float a4, float a5, float a6)
{
  *(_QWORD *)this = &off_1E6513710;
  *((float *)this + 2) = a2;
  *((float *)this + 3) = a3;
  *((float *)this + 4) = a4;
  *((float *)this + 5) = a5;
  *((float *)this + 6) = a6;
}

void PCICCTransferFunctionParametric3::~PCICCTransferFunctionParametric3(PCICCTransferFunctionParametric3 *this)
{
  JUMPOUT(0x1B5E29170);
}

float PCICCTransferFunctionParametric3::operator()(float *a1, float a2)
{
  if (a1[6] <= a2)
    return powf((float)(a1[3] * a2) + a1[4], a1[2]);
  else
    return a1[5] * a2;
}

float PCICCTransferFunctionParametric3::getA(PCICCTransferFunctionParametric3 *this)
{
  return *((float *)this + 3);
}

float PCICCTransferFunctionParametric3::getB(PCICCTransferFunctionParametric3 *this)
{
  return *((float *)this + 4);
}

float PCICCTransferFunctionParametric3::getC(PCICCTransferFunctionParametric3 *this)
{
  return *((float *)this + 5);
}

float PCICCTransferFunctionParametric3::getD(PCICCTransferFunctionParametric3 *this)
{
  return *((float *)this + 6);
}

uint64_t PCICCTransferFunctionParametric3::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1);
}

void PCICCTransferFunctionParametric4::~PCICCTransferFunctionParametric4(PCICCTransferFunctionParametric4 *this)
{
  JUMPOUT(0x1B5E29170);
}

float PCICCTransferFunctionParametric4::operator()(float *a1, float a2)
{
  float v3;
  float v4;

  if (a1[6] <= a2)
  {
    v3 = powf((float)(a1[3] * a2) + a1[4], a1[2]);
    v4 = a1[7];
  }
  else
  {
    v3 = a1[5] * a2;
    v4 = a1[8];
  }
  return v3 + v4;
}

uint64_t PCICCTransferFunctionParametric4::accept(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, a1);
}

void PCGetTransferFunctionFromTag(const PCICCTag *a1@<X0>, uint64_t *a2@<X8>)
{
  int Size;
  int v5;
  uint64_t FactoryForSerialization;
  const unsigned __int8 *v7;
  int Int32Number;
  const unsigned __int8 *v9;
  unsigned int v10;
  const unsigned __int8 *v11;
  ProCore::Private *v12;
  unsigned int v13;
  uint64_t v14;
  const unsigned __int8 *v15;
  ProCore::Private *v16;
  float v17;
  ProCore::Private *UInt16Number;
  const unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  float v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  float S15Fixed16Number;
  const unsigned __int8 *v27;
  float v28;
  const unsigned __int8 *v29;
  float v30;
  float v31;
  const unsigned __int8 *v32;
  float v33;
  const unsigned __int8 *v34;
  float v35;
  const unsigned __int8 *v36;
  float v37;
  float v38;
  const unsigned __int8 *v39;
  float v40;
  const unsigned __int8 *v41;
  float v42;
  const unsigned __int8 *v43;
  float v44;
  const unsigned __int8 *v45;
  float v46;
  float v47;
  const unsigned __int8 *v48;
  float v49;
  const unsigned __int8 *v50;
  float v51;
  const unsigned __int8 *v52;
  float v53;
  const unsigned __int8 *v54;
  float v55;
  const unsigned __int8 *v56;
  float v57;
  const unsigned __int8 *v58;
  float v59;
  void (**v60)(PCICCTransferFunctionGamma *__hidden);
  void *__p;
  void *v62;

  Size = PVPerfStats::FrameStats::GetSize(a1);
  if (Size > 1800688194)
  {
    if (Size == 1800688195)
      goto LABEL_7;
    v5 = 1918128707;
  }
  else
  {
    if (Size == 1649693251)
      goto LABEL_7;
    v5 = 1733579331;
  }
  if (Size != v5)
  {
LABEL_15:
    *a2 = 0;
    return;
  }
LABEL_7:
  FactoryForSerialization = OZFactoryBase::getFactoryForSerialization((uint64_t)a1);
  Int32Number = ProCore::Private::getInt32Number((ProCore::Private *)FactoryForSerialization, v7);
  if (Int32Number == 1885434465)
  {
    switch(ProCore::Private::getUInt16Number((ProCore::Private *)(FactoryForSerialization + 8), v9))
    {
      case 0u:
        v16 = (ProCore::Private *)ProCore::Private::getInt32Number((ProCore::Private *)(FactoryForSerialization + 12), v15);
        if (v16 >> 1 == 58982)
          v17 = 1.8;
        else
          v17 = ProCore::Private::convertFromS15Fixed16(v16);
        v14 = operator new();
        v60 = &off_1E6513680;
        goto LABEL_32;
      case 1u:
        S15Fixed16Number = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 12), v15);
        v28 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 16), v27);
        v30 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 20), v29);
        v14 = operator new();
        *(_QWORD *)v14 = &off_1E65136B0;
        *(float *)(v14 + 8) = S15Fixed16Number;
        *(float *)(v14 + 12) = v28;
        *(float *)(v14 + 16) = v30;
        goto LABEL_33;
      case 2u:
        v31 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 12), v15);
        v33 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 16), v32);
        v35 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 20), v34);
        v37 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 24), v36);
        v14 = operator new();
        *(_QWORD *)v14 = &off_1E65136E0;
        *(float *)(v14 + 8) = v31;
        *(float *)(v14 + 12) = v33;
        *(float *)(v14 + 16) = v35;
        *(float *)(v14 + 20) = v37;
        goto LABEL_33;
      case 3u:
        v38 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 12), v15);
        v40 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 16), v39);
        v42 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 20), v41);
        v44 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 24), v43);
        v46 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 28), v45);
        v14 = operator new();
        *(_QWORD *)v14 = &off_1E6513710;
        *(float *)(v14 + 8) = v38;
        *(float *)(v14 + 12) = v40;
        *(float *)(v14 + 16) = v42;
        *(float *)(v14 + 20) = v44;
        *(float *)(v14 + 24) = v46;
        goto LABEL_33;
      case 4u:
        v47 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 12), v15);
        v49 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 16), v48);
        v51 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 20), v50);
        v53 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 24), v52);
        v55 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 28), v54);
        v57 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 32), v56);
        v59 = ProCore::Private::getS15Fixed16Number((ProCore::Private *)(FactoryForSerialization + 36), v58);
        v14 = operator new();
        *(_QWORD *)v14 = &off_1E6513740;
        *(float *)(v14 + 8) = v47;
        *(float *)(v14 + 12) = v49;
        *(float *)(v14 + 16) = v51;
        *(float *)(v14 + 20) = v53;
        *(float *)(v14 + 24) = v55;
        *(float *)(v14 + 28) = v57;
        *(float *)(v14 + 32) = v59;
        goto LABEL_33;
      default:
        goto LABEL_15;
    }
  }
  if (Int32Number != 1668641398)
    goto LABEL_15;
  v10 = ProCore::Private::getInt32Number((ProCore::Private *)(FactoryForSerialization + 8), v9);
  v12 = (ProCore::Private *)(FactoryForSerialization + 12);
  if (v10 == 1)
  {
    UInt16Number = (ProCore::Private *)ProCore::Private::getUInt16Number(v12, v11);
    if (((unsigned __int16)UInt16Number & 0xFFFE) == 0x1CC)
      v17 = 1.8;
    else
      v17 = ProCore::Private::convertFromU8Fixed8(UInt16Number);
    v14 = operator new();
    v60 = &off_1E6513620;
LABEL_32:
    *(_QWORD *)v14 = v60;
    *(float *)(v14 + 8) = v17;
    goto LABEL_33;
  }
  v13 = v10;
  if (!v10)
  {
    v14 = operator new();
    *(_QWORD *)v14 = &off_1E65135F0;
LABEL_33:
    *a2 = v14;
    return;
  }
  if ((v10 & 0x7FFFFFFF) == 0x400 && !memcmp(v12, &is_sRGB_LUT(unsigned char const*,unsigned int)::sRGB_LUT, 0x800uLL))
  {
    v14 = operator new();
    *(_QWORD *)v14 = &off_1E6513710;
    *(_OWORD *)(v14 + 8) = xmmword_1B305A650;
    *(_DWORD *)(v14 + 24) = 1025565713;
    goto LABEL_33;
  }
  std::vector<float>::vector(&__p, v13);
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = (double)ProCore::Private::getUInt16Number((ProCore::Private *)((char *)v12 + (v20 & 0xFFFFFFFE)), v19)/ 65535.0;
    v23 = __p;
    *((float *)__p + v21++) = v22;
    v20 += 2;
  }
  while (v13 != v21);
  v24 = (uint64_t)v62;
  v25 = (_QWORD *)operator new();
  *v25 = &off_1E6513650;
  v25[2] = 0;
  v25[3] = 0;
  v25[1] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(v25 + 1, v23, v24, (v24 - (uint64_t)v23) >> 2);
  *a2 = (uint64_t)v25;
  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }
}

void sub_1B29BB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1B5E29170](v11, 0x81C4018A671A6);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t PCMakeTRCTag(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD v4[2];
  int v5;

  v4[0] = &off_1E6513840;
  v4[1] = a2;
  v5 = a3;
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(a1, v4);
}

void `anonymous namespace'::MakeTagVisitor::~MakeTagVisitor(_anonymous_namespace_::MakeTagVisitor *this)
{
  JUMPOUT(0x1B5E29170);
}

_WORD *`anonymous namespace'::MakeTagVisitor::visit(_anonymous_namespace_::MakeTagVisitor *this, const PCICCTransferFunctionLinear *a2)
{
  beginCurveTag(*((ProCore::Private **)this + 1), *((_DWORD *)this + 4));
  return addTableToTag(*((PCICCTag **)this + 1), 0, 0);
}

_WORD *`anonymous namespace'::MakeTagVisitor::visit(_anonymous_namespace_::MakeTagVisitor *this, const PCICCTransferFunctionGamma *a2)
{
  float v5;
  uint64_t v6;

  beginCurveTag(*((ProCore::Private **)this + 1), *((_DWORD *)this + 4));
  v5 = *((float *)a2 + 2);
  return addTableToTag(*((PCICCTag **)this + 1), &v5, (const float *)&v6);
}

_WORD *`anonymous namespace'::MakeTagVisitor::visit(_anonymous_namespace_::MakeTagVisitor *this, const float **a2)
{
  beginCurveTag(*((ProCore::Private **)this + 1), *((_DWORD *)this + 4));
  return addTableToTag(*((PCICCTag **)this + 1), a2[1], a2[2]);
}

_BYTE *`anonymous namespace'::MakeTagVisitor::visit(_anonymous_namespace_::MakeTagVisitor *this, const PCICCTransferFunctionParametric0 *a2)
{
  PCICCTag *v4;
  float v5;
  ProCore::Private *v6;

  beginParametricTag(*((ProCore::Private **)this + 1), *((_DWORD *)this + 4), 0);
  v5 = *((float *)a2 + 2);
  v6 = (ProCore::Private *)*((_QWORD *)this + 1);
  if (fabsf(v5 + -1.8) >= 0.00001)
    return ProCore::Private::add15Fixed16ToTag(v6, v4, v5);
  else
    return ProCore::Private::addInt32ToTag(v6, (PCICCTag *)0x1CCCC);
}

_BYTE *`anonymous namespace'::MakeTagVisitor::visit(_anonymous_namespace_::MakeTagVisitor *this, const PCICCTransferFunctionParametric1 *a2)
{
  PCICCTag *v4;
  PCICCTag *v5;
  PCICCTag *v6;

  beginParametricTag(*((ProCore::Private **)this + 1), *((_DWORD *)this + 4), (PCICCTag *)1);
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v4, *((float *)a2 + 2));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v5, *((float *)a2 + 3));
  return ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v6, *((float *)a2 + 4));
}

_BYTE *`anonymous namespace'::MakeTagVisitor::visit(_anonymous_namespace_::MakeTagVisitor *this, const PCICCTransferFunctionParametric2 *a2)
{
  PCICCTag *v4;
  PCICCTag *v5;
  PCICCTag *v6;
  PCICCTag *v7;

  beginParametricTag(*((ProCore::Private **)this + 1), *((_DWORD *)this + 4), (PCICCTag *)2);
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v4, *((float *)a2 + 2));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v5, *((float *)a2 + 3));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v6, *((float *)a2 + 4));
  return ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v7, *((float *)a2 + 5));
}

_BYTE *`anonymous namespace'::MakeTagVisitor::visit(_anonymous_namespace_::MakeTagVisitor *this, const PCICCTransferFunctionParametric3 *a2)
{
  PCICCTag *v4;
  PCICCTag *v5;
  PCICCTag *v6;
  PCICCTag *v7;
  PCICCTag *v8;

  beginParametricTag(*((ProCore::Private **)this + 1), *((_DWORD *)this + 4), (PCICCTag *)3);
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v4, *((float *)a2 + 2));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v5, *((float *)a2 + 3));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v6, *((float *)a2 + 4));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v7, *((float *)a2 + 5));
  return ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v8, *((float *)a2 + 6));
}

_BYTE *`anonymous namespace'::MakeTagVisitor::visit(_anonymous_namespace_::MakeTagVisitor *this, const PCICCTransferFunctionParametric4 *a2)
{
  PCICCTag *v4;
  PCICCTag *v5;
  PCICCTag *v6;
  PCICCTag *v7;
  PCICCTag *v8;
  PCICCTag *v9;
  PCICCTag *v10;

  beginParametricTag(*((ProCore::Private **)this + 1), *((_DWORD *)this + 4), (PCICCTag *)4);
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v4, *((float *)a2 + 2));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v5, *((float *)a2 + 3));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v6, *((float *)a2 + 4));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v7, *((float *)a2 + 5));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v8, *((float *)a2 + 6));
  ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v9, *((float *)a2 + 7));
  return ProCore::Private::add15Fixed16ToTag(*((ProCore::Private **)this + 1), v10, *((float *)a2 + 8));
}

_DWORD *beginCurveTag(ProCore::Private *this, unsigned int a2)
{
  if (a2 <= 3)
    PCICCTag::reset((uint64_t)this, dword_1B305A660[a2]);
  ProCore::Private::addInt32ToTag(this, (PCICCTag *)0x63757276);
  return ProCore::Private::addInt32ToTag(this, 0);
}

_WORD *addTableToTag(PCICCTag *a1, const float *a2, const float *a3)
{
  const float *v4;
  PCICCTag *v6;
  _WORD *result;
  float v8;
  int v9;
  float v10;
  PCICCTag *v11;
  PCICCTag *v12;
  float v13;
  float v14;
  double v15;

  v4 = a2;
  if ((char *)a3 - (char *)a2 != 4)
  {
    v6 = (PCICCTag *)((unint64_t)((char *)a3 - (char *)a2) >> 2);
LABEL_5:
    for (result = ProCore::Private::addInt32ToTag(a1, v6); v4 != a3; result = ProCore::Private::addInt16ToTag(a1, v11))
    {
      v8 = *v4++;
      v9 = vcvtmd_s64_f64((float)(v8 * 65535.0) + 0.5 + 0.0000001);
      v10 = (float)v9;
      if ((float)v9 > 65535.0)
        v10 = 65535.0;
      if (v9 >= 0)
        v11 = (PCICCTag *)(int)v10;
      else
        v11 = 0;
    }
    return result;
  }
  if (ProCore::Private::convertToU8Fixed8(a1, *a2) == 256)
  {
    v6 = 0;
    goto LABEL_5;
  }
  ProCore::Private::addInt32ToTag(a1, (PCICCTag *)1);
  v13 = 4.0;
  if (*v4 <= 4.0)
    v13 = *v4;
  if (*v4 >= 0.25)
    v14 = v13;
  else
    v14 = 0.25;
  v15 = v14;
  if (v14 >= 2.25 || v15 <= 2.15)
  {
    if (v14 <= 1.75 || v15 >= 1.85)
    {
      if (v15 > 0.95 && v15 < 1.05)
        v14 = 1.0;
    }
    else
    {
      v14 = 1.8;
    }
  }
  else
  {
    v14 = 2.2;
  }
  if (fabsf(v14 + -1.8) >= 0.00001)
    return ProCore::Private::add8Fixed8ToTag(a1, v12, v14);
  else
    return ProCore::Private::addInt16ToTag(a1, (PCICCTag *)0x1CC);
}

_WORD *beginParametricTag(ProCore::Private *this, unsigned int a2, PCICCTag *a3)
{
  if (a2 <= 3)
    PCICCTag::reset((uint64_t)this, dword_1B305A660[a2]);
  ProCore::Private::addInt32ToTag(this, (PCICCTag *)0x70617261);
  ProCore::Private::addInt32ToTag(this, 0);
  ProCore::Private::addInt16ToTag(this, a3);
  return ProCore::Private::addInt16ToTag(this, 0);
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B29BB7F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

Float64 OZChannelSecondsForFigTime(const CMTime *a1, int32_t a2)
{
  CMTime v3;
  CMTime time;
  CMTime v5;

  memset(&v5, 0, sizeof(v5));
  time = *a1;
  CMTimeConvertScale(&v5, &time, a2, kCMTimeRoundingMethod_RoundTowardZero);
  v3 = v5;
  return CMTimeGetSeconds(&v3);
}

double FigTimeToFrameWithRate(const CMTime *a1, double a2)
{
  return floor(OZChannelSecondsForFigTime(a1, a1->timescale) * a2 + 0.0000001);
}

BOOL PCMath::equal(PCMath *this, const CMTime *a2, const CMTime *a3, const CMTime *a4)
{
  int v4;
  CMTime v7;
  CMTime v8;
  CMTime time2;
  CMTime time1;

  v4 = *((_DWORD *)this + 3);
  if ((v4 & 0x1D) != 1 || (a2->flags & 0x1D) != 1)
    return (~v4 & 5) == 0 && (~a2->flags & 5) == 0 || (~v4 & 9) == 0 && (~a2->flags & 9) == 0;
  time1 = *(CMTime *)this;
  time2 = *a2;
  PC_CMTimeSaferSubtract(&time1, &time2, (uint64_t)&v7);
  v8 = v7;
  time1 = v7;
  time2 = *(CMTime *)*(_QWORD *)&MEMORY[0x1E0CA2E68];
  if (CMTimeCompare(&time1, &time2) < 0)
    operator*(&v8, &time1, -1.0);
  else
    time1 = v8;
  v8 = time1;
  time2 = *a3;
  return CMTimeCompare(&time1, &time2) < 1;
}

void sub_1B29BBA9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double PCTimeRange::getRangeEnclosingWholeFrames@<D0>(PCTimeRange *this@<X0>, const CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  CMTime v7;
  __int128 v8;
  uint64_t v9;
  CMTime v10;
  CMTime v11;
  CMTime v12;
  CMTime v13;

  memset(&v11, 0, sizeof(v11));
  v13 = *(CMTime *)this;
  v12 = *(CMTime *)((_BYTE *)this + 1);
  PC_CMTimeSaferAdd(&v13, &v12, (uint64_t)&v11);
  memset(&v10, 0, sizeof(v10));
  v13 = *(CMTime *)this;
  v12 = *a2;
  PC_CMTimeFloorToSampleDuration(&v13, &v12, (uint64_t)&v10);
  v8 = 0uLL;
  v9 = 0;
  v13 = v11;
  v12 = v10;
  PC_CMTimeSaferSubtract(&v13, &v12, (uint64_t)&v7);
  v13 = v7;
  v12 = *a2;
  PC_CMTimeCeilingToSampleDuration(&v13, &v12, (uint64_t)&v8);
  *(CMTime *)a3 = v10;
  result = *(double *)&v8;
  *(_OWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 40) = v9;
  return result;
}

uint64_t half::convert(half *this)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  float v11;

  v1 = (this >> 16) & 0x8000;
  v2 = (this >> 23);
  v3 = this & 0x7FFFFF;
  v4 = v2 - 112;
  if (v2 > 0x70)
  {
    if (v2 == 255)
    {
      v6 = (v3 < 0x2000) | (v3 >> 13) | v1 | 0x7C00;
      LOWORD(v1) = v1 | 0x7C00;
      if (v3)
        LOWORD(v1) = v6;
    }
    else
    {
      v7 = v3 + 0x2000;
      v8 = v2 - 111;
      if (v3 >= 0x7FE000)
        v7 = 0;
      else
        v8 = v4;
      if (((unsigned __int16)this & 0x1000) != 0)
        v3 = v7;
      else
        v8 = v4;
      if (v8 < 0x1F)
      {
        v1 |= (v8 << 10) | (v3 >> 13);
      }
      else
      {
        v11 = 1.0e10;
        v9 = 10;
        do
        {
          v11 = v11 * v11;
          --v9;
        }
        while (v9);
        LOWORD(v1) = v1 | 0x7C00;
      }
    }
  }
  else
  {
    v5 = (v3 | 0x800000) >> (113 - v2);
    if ((v5 & 0x1000) != 0)
      v5 += 0x2000;
    v1 |= v5 >> 13;
    if (v2 < 0x66)
      LOWORD(v1) = 0;
  }
  return (__int16)v1;
}

void HGParamBufferDesc::printParamValuesFromBuffer(HGParamBufferDesc *this@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  const std::string::value_type *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if (*((_QWORD *)this + 5) == a3)
  {
    v6 = *((_QWORD *)this + 2);
    if (*((_QWORD *)this + 3) != v6)
    {
      v8 = 0;
      v9 = &a2[a3];
      do
      {
        v10 = PVInstructionGraphContext::HGNodeCache(*(PVInstructionGraphContext **)(v6 + 8 * v8));
        if (&a2[v10 + HGParamField::fieldSize(*(HGParamField **)(*((_QWORD *)this + 2) + 8 * v8))] > v9)
          break;
        (*(void (**)(void **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 2) + 8 * v8) + 40))(__p);
        v11 = (v14 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
        v12 = (v14 & 0x80u) == 0 ? (void *)v14 : __p[1];
        std::string::append(a4, v11, (std::string::size_type)v12);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        ++v8;
        v6 = *((_QWORD *)this + 2);
      }
      while (v8 < (*((_QWORD *)this + 3) - v6) >> 3);
    }
  }
  else
  {
    std::string::append(a4, " paramBufferData and ParamBufferDesc.size() does not match, Aborting logging param values\n");
  }
}

void sub_1B29BBFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if ((*(char *)(v15 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t HGParamField::fieldSize(HGParamField *this)
{
  return *((_QWORD *)this + 4);
}

void HGComicStrokeAndBlend::HGComicStrokeAndBlend(HGComicStrokeAndBlend *this)
{
  uint64_t v2;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E65138E0;
  *(_QWORD *)(v2 + 408) = 0x3F80000000000000;
  *(_DWORD *)(v2 + 416) = 1065353216;
  *(_QWORD *)(v2 + 428) = 0;
  *(_QWORD *)(v2 + 420) = 0;
  HGNode::SetFlags((HGNode *)v2, 2, 4);
  *((_DWORD *)this + 4) |= 0x620u;
}

void sub_1B29BC0B0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HGComicStrokeAndBlend::~HGComicStrokeAndBlend(HGNode *this)
{
  void *v1;

  HGNode::~HGNode(this);
  HGObject::operator delete(v1);
}

uint64_t HGComicStrokeAndBlend::SetParameter(HGComicStrokeAndBlend *this, int a2, float a3, float a4, float a5, float a6)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (*((float *)this + 102) == a3)
        goto LABEL_17;
      *((float *)this + 102) = a3;
      result = 1;
      break;
    case 1:
      if (*((float *)this + 105) == a3)
        goto LABEL_17;
      *((float *)this + 105) = a3;
      result = 1;
      break;
    case 2:
      if (*((float *)this + 106) == a3)
        goto LABEL_17;
      *((float *)this + 106) = a3;
      result = 1;
      break;
    case 3:
      if (*((float *)this + 107) == a3)
        goto LABEL_17;
      *((float *)this + 107) = a3;
      result = 1;
      break;
    case 4:
      if (*((float *)this + 108) == a3)
        goto LABEL_17;
      *((float *)this + 108) = a3;
      result = 1;
      break;
    case 5:
      if (*((float *)this + 103) == a3)
        goto LABEL_17;
      *((float *)this + 103) = a3;
      result = 1;
      break;
    case 6:
      if (*((float *)this + 104) == a3)
      {
LABEL_17:
        result = 0;
      }
      else
      {
        *((float *)this + 104) = a3;
        result = 1;
      }
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HGComicStrokeAndBlend::IntermediateFormat()
{
  return 24;
}

uint64_t HGComicStrokeAndBlend::GetDOD(HGComicStrokeAndBlend *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  double v6;
  const HGTransform *v7;
  uint64_t v8;
  HGTransformUtils *v9;
  float v10;
  _BYTE v12[144];
  HGRect v13;
  HGRect v14;

  v13 = a4;
  if (a3 != 1)
    return 0;
  if (HGRect::IsInfinite(&v13))
    return *(_QWORD *)&v13.var0;
  v6 = *((float *)this + 104);
  HGTransform::HGTransform((HGTransform *)v12);
  HGTransform::Scale((HGTransform *)v12, v6, v6, 1.0);
  v7 = *(const HGTransform **)&v13.var0;
  v8 = *(_QWORD *)&v13.var2;
  v10 = HGTransformUtils::MinW(v9);
  *(_QWORD *)&v14.var0 = v8;
  DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v12, v7, v14, 0.5, v10);
  HGTransform::~HGTransform((HGTransform *)v12);
  return DOD;
}

void sub_1B29BC278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B29BC28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HGComicStrokeAndBlend::GetROI(HGComicStrokeAndBlend *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  unint64_t v5;
  double v7;
  HGTransformUtils *v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  HGTransformUtils *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[144];
  HGRect v27;
  HGRect v28;
  HGRect v29;
  HGRect v30;
  HGRect v31;
  HGRect v32;
  HGRect v33;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  switch(a3)
  {
    case 0:
      v7 = (float)(*((float *)this + 103) * (float)(1.0 / *((float *)this + 104)));
      HGTransform::HGTransform((HGTransform *)v26);
      HGTransform::Scale((HGTransform *)v26, v7, v7, 1.0);
      *(_QWORD *)&v27.var0 = 0;
      *(_QWORD *)&v27.var2 = 0;
      v9 = HGTransformUtils::MinW(v8);
      *(_QWORD *)&v32.var0 = v4;
      *(_QWORD *)&v27.var0 = HGTransformUtils::GetROI((HGTransformUtils *)v26, v5, v32, 0.5, v9);
      *(_QWORD *)&v27.var2 = *(_QWORD *)&v28.var0;
      LODWORD(v10) = vcvtps_s32_f32(*((float *)this + 102) + *((float *)this + 102));
      *(_QWORD *)&v28.var2 = v10 | (v10 << 32);
      v28.var0 = -(int)v10;
      v28.var1 = -(int)v10;
      HGRect::Grow(&v27, v28);
      v11 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      v13 = v12;
      *(_QWORD *)&v29.var0 = v11;
      *(_QWORD *)&v29.var2 = v13;
      HGRect::Grow(&v27, v29);
      goto LABEL_7;
    case 1:
      v18 = 1.0 / *((float *)this + 104);
      HGTransform::HGTransform((HGTransform *)v26);
      HGTransform::Scale((HGTransform *)v26, v18, v18, 1.0);
      *(_QWORD *)&v27.var0 = 0;
      *(_QWORD *)&v27.var2 = 0;
      v20 = HGTransformUtils::MinW(v19);
      *(_QWORD *)&v33.var0 = v4;
      *(_QWORD *)&v27.var0 = HGTransformUtils::GetROI((HGTransformUtils *)v26, v5, v33, 0.5, v20);
      *(_QWORD *)&v27.var2 = v21;
      v22 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      v24 = v23;
      *(_QWORD *)&v31.var0 = v22;
      *(_QWORD *)&v31.var2 = v24;
      HGRect::Grow(&v27, v31);
LABEL_7:
      HGTransform::~HGTransform((HGTransform *)v26);
      break;
    case 2:
      *(_QWORD *)&v27.var0 = HGRectMake4i(0, 0, 0x200u, 0x200u);
      *(_QWORD *)&v27.var2 = v14;
      break;
    case 3:
      v27 = a4;
      v15 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      v17 = v16;
      *(_QWORD *)&v30.var0 = v15;
      *(_QWORD *)&v30.var2 = v17;
      HGRect::Grow(&v27, v30);
      break;
    default:
      v27 = (HGRect)HGRectNull;
      break;
  }
  return *(_QWORD *)&v27.var0;
}

void sub_1B29BC494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B29BC4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B29BC4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B29BC4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void sub_1B29BC4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HGComicStrokeAndBlend::RenderTile(HGComicStrokeAndBlend *this, HGTile *a2)
{
  float v4;
  float v5;
  uint64_t v6;
  int v7;
  float32x4_t v8;
  int32x2_t v9;
  uint64_t v10;
  int v11;
  int v12;
  float32x4_t v13;
  float v14;
  float v15;
  float v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  int32x4_t v32;
  float32x2_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  int8x16_t v36;
  float v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  uint64_t v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float v52;
  int32x4_t v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float v67;
  float32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float v75;
  float v76;
  float v77;
  uint64_t v78;
  uint64_t v79;
  float32x4_t v80;
  int32x4_t v81;
  float32x2_t v82;
  float32x4_t *v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  float32x4_t v87;
  int32x4_t v88;
  float32x4_t *v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  float v96;
  float32_t v97;
  float32x2_t v98;
  float32x2_t v100;
  float32x4_t v101;
  int8x16_t v102;
  int32x4_t v103;
  float32x4_t v105;
  float v106;
  float v107;
  float32x2_t v108;
  float32x2_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int v115;
  float32x4_t v116;
  int v117;
  float v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int8x16_t v123;
  float32x4_t v124;

  v4 = *((float *)this + 104);
  v5 = *((float *)this + 103);
  v6 = HGTile::Renderer(a2);
  v7 = (*(uint64_t (**)(HGComicStrokeAndBlend *, uint64_t))(*(_QWORD *)this + 312))(this, v6);
  v9 = *(int32x2_t *)a2;
  v115 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v115 >= 1)
  {
    v10 = (*((_DWORD *)a2 + 2) - v9.i32[0]);
    if ((int)v10 >= 1)
    {
      v11 = v7;
      v12 = 0;
      *(float32x2_t *)v13.f32 = vadd_f32(vcvt_f32_s32(v9), (float32x2_t)0x3F0000003F000000);
      v13.i64[1] = 0x3F80000000000000;
      v14 = *((float *)this + 102);
      v15 = 1.0 / (float)(v14 * (float)(v14 * 3.0));
      v16 = v14 + v14;
      v118 = v5 * (float)(1.0 / v4);
      v17 = *((_QWORD *)a2 + 2);
      v18.i64[0] = 0x3F0000003F000000;
      v18.i64[1] = 0x3F0000003F000000;
      __asm { FMOV            V11.2S, #-1.0 }
      v24 = 0uLL;
      v25 = v13;
      v121 = v13;
      do
      {
        v117 = v12;
        v26 = 0;
        v116 = v25;
        v27 = v25;
        do
        {
          v28 = vmulq_n_f32(v27, v118);
          v29 = *((_QWORD *)a2 + 10);
          v30 = *((int *)a2 + 22);
          v31 = vsubq_f32(v28, v13);
          if (v11)
          {
            v32 = vaddq_s32(vcvtq_s32_f32(v31), vcltzq_f32(v31));
            v33 = (float32x2_t)vsubq_f32(v31, vcvtq_f32_s32(v32)).u64[0];
            v34 = (float32x4_t *)(v29 + 16 * (v32.i32[0] + v32.i32[1] * (int)v30));
            v35 = vaddq_f32(*v34, vmulq_n_f32(vsubq_f32(v34[1], *v34), v33.f32[0]));
            v36 = (int8x16_t)vaddq_f32(v35, vmulq_lane_f32(vsubq_f32(vaddq_f32(v34[v30], vmulq_n_f32(vsubq_f32(v34[(int)v30 + 1], v34[v30]), v33.f32[0])), v35), v33, 1));
            v37 = 0.5;
            v119 = v27;
            if (v16 <= 1.0)
              goto LABEL_16;
          }
          else
          {
            v38 = vaddq_f32(v31, v18);
            v39 = vcvtq_s32_f32(v38);
            v38.i64[0] = vaddq_s32(v39, vcgtq_f32(vcvtq_f32_s32(v39), v38)).u64[0];
            v36 = *(int8x16_t *)(v29 + 16 * (v38.i32[0] + v38.i32[1] * (int)v30));
            v37 = 0.5;
            v119 = v27;
            if (v16 <= 1.0)
              goto LABEL_16;
          }
          v120 = v28;
          v40 = (float32x2_t)vextq_s8(v36, v36, 4uLL).u64[0];
          *(float32x2_t *)v8.f32 = vadd_f32(vadd_f32(v40, v40), _D11);
          v41 = vnegq_f32(v8);
          v42 = (int)v30 + 1;
          v43 = 1.0;
          do
          {
            v122 = v41;
            v124 = v8;
            v123 = v36;
            v57 = expf(-(float)(v43 * v15));
            v58 = vsubq_f32(vaddq_f32(v120, v124), v121);
            if (v11)
            {
              v59 = vaddq_s32(vcvtq_s32_f32(v58), vcltzq_f32(v58));
              v60 = vsubq_f32(v58, vcvtq_f32_s32(v59));
              v61 = (float32x4_t *)(v29 + 16 * (v59.i32[0] + v59.i32[1] * (int)v30));
              v62 = *v61;
              v63 = vsubq_f32(v61[1], *v61);
              v64 = v61[v30];
              v65 = vaddq_f32(*v61, vmulq_f32(v63, v60));
              v66 = vsubq_f32(v61[v42], v64);
              v67 = vaddq_f32(v65, vmulq_lane_f32(vsubq_f32(vaddq_f32(v64, vmulq_f32(v60, v66)), v65), *(float32x2_t *)v60.f32, 1)).f32[0];
              v48 = v122;
              v68 = vsubq_f32(vaddq_f32(v120, v122), v121);
              v69 = vaddq_s32(vcvtq_s32_f32(v68), vcltzq_f32(v68));
              v70 = vsubq_f32(v68, vcvtq_f32_s32(v69));
              v71 = (float32x4_t *)(v29 + 16 * (v69.i32[0] + v69.i32[1] * (int)v30));
              *(float *)v69.i32 = vaddq_f32(*v71, vmulq_f32(vsubq_f32(v71[1], *v71), v70)).f32[0];
              v52 = v67
                  + (float)(*(float *)v69.i32
                          + vmuls_lane_f32((float)(v71[v30].f32[0] + (float)((float)(v71[v42].f32[0] - v71[v30].f32[0]) * v70.f32[0]))- *(float *)v69.i32, *(float32x2_t *)v70.f32, 1));
              v72 = vaddq_f32(v62, vmulq_n_f32(v63, v60.f32[0]));
              v47 = (int8x16_t)vaddq_f32(v72, vmulq_lane_f32(vsubq_f32(vaddq_f32(v64, vmulq_n_f32(v66, v60.f32[0])), v72), *(float32x2_t *)v60.f32, 1));
              v24 = 0uLL;
              v53 = vaddq_s32(vcvtq_s32_f32(v68), vcltzq_f32(v68));
              v68.i64[0] = vsubq_f32(v68, vcvtq_f32_s32(v53)).u64[0];
              v54 = (float32x4_t *)(v29 + 16 * (v53.i32[0] + v53.i32[1] * (int)v30));
              v28 = vaddq_f32(*v54, vmulq_n_f32(vsubq_f32(v54[1], *v54), v68.f32[0]));
              v74 = (int8x16_t)vaddq_f32(v28, vmulq_lane_f32(vsubq_f32(vaddq_f32(v54[v30], vmulq_n_f32(vsubq_f32(v54[v42], v54[v30]), v68.f32[0])), v28), *(float32x2_t *)v68.f32, 1));
            }
            else
            {
              v44.i64[0] = 0x3F0000003F000000;
              v44.i64[1] = 0x3F0000003F000000;
              v45 = vaddq_f32(v58, v44);
              v46 = vcvtq_s32_f32(v45);
              v45.i64[0] = vaddq_s32(v46, vcgtq_f32(vcvtq_f32_s32(v46), v45)).u64[0];
              v47 = *(int8x16_t *)(v29 + 16 * (v45.i32[0] + v45.i32[1] * (int)v30));
              v48 = v122;
              v49 = vsubq_f32(vaddq_f32(v120, v122), v121);
              v50 = vaddq_f32(v49, v44);
              v51 = (float32x4_t)vcvtq_s32_f32(v50);
              v50.i64[0] = vaddq_s32((int32x4_t)v51, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v51), v50)).u64[0];
              v52 = *(float *)v47.i32 + *(float *)(v29 + 16 * (v50.i32[0] + v50.i32[1] * (int)v30));
              v24 = 0uLL;
              v51.i64[0] = 0x3F0000003F000000;
              v51.i64[1] = 0x3F0000003F000000;
              v73 = vaddq_f32(v49, v51);
              v28 = (float32x4_t)vcvtq_s32_f32(v73);
              v73.i64[0] = vaddq_s32((int32x4_t)v28, vcgtq_f32(vcvtq_f32_s32((int32x4_t)v28), v73)).u64[0];
              v74 = *(int8x16_t *)(v29 + 16 * (v73.i32[0] + v73.i32[1] * (int)v30));
            }
            v36 = v123;
            *(float *)v36.i32 = *(float *)v123.i32 + (float)(v57 * v52);
            v37 = v37 + v57;
            v55 = (float32x4_t)vextq_s8(v47, v47, 4uLL);
            *(float32x2_t *)v55.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32), _D11);
            v8 = vaddq_f32(v124, v55);
            v56 = (float32x4_t)vextq_s8(v74, v74, 4uLL);
            *(float32x2_t *)v56.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v56.f32), _D11);
            v56.i64[0] = vnegq_f32(v56).u64[0];
            v56.i64[1] = v24.i64[1];
            v41 = vaddq_f32(v48, v56);
            v43 = v43 + 1.0;
          }
          while (v43 < v16);
LABEL_16:
          v75 = (float)(*(float *)v36.i32 * 0.5) / v37;
          v76 = 0.0;
          v18.i64[0] = 0x3F0000003F000000;
          v18.i64[1] = 0x3F0000003F000000;
          if (v75 > 0.0)
          {
            v77 = fminf(fmaxf(v75 / 0.8, 0.0), 1.0);
            v76 = (float)(v77 * v77) * (float)(3.0 - (float)(v77 + v77));
          }
          v78 = *((_QWORD *)a2 + 12);
          v79 = *((int *)a2 + 26);
          v13 = v121;
          v80 = vsubq_f32(vmulq_n_f32(v119, 1.0 / v4), v121);
          if (v11)
          {
            v81 = vaddq_s32(vcvtq_s32_f32(v80), vcltzq_f32(v80));
            v82 = (float32x2_t)vsubq_f32(v80, vcvtq_f32_s32(v81)).u64[0];
            v83 = (float32x4_t *)(v78 + 16 * (v81.i32[0] + v81.i32[1] * (int)v79));
            v28 = v83[v79];
            v84 = vaddq_f32(*v83, vmulq_n_f32(vsubq_f32(v83[1], *v83), v82.f32[0]));
            v85 = vaddq_f32(v84, vmulq_lane_f32(vsubq_f32(vaddq_f32(v28, vmulq_n_f32(vsubq_f32(v83[(int)v79 + 1], v28), v82.f32[0])), v84), v82, 1));
            if (*((float *)this + 108) != 0.0)
            {
              v86 = *((int *)a2 + 34);
              v87 = vsubq_f32(v119, v121);
              v88 = vaddq_s32(vcvtq_s32_f32(v87), vcltzq_f32(v87));
              v87.i64[0] = vsubq_f32(v87, vcvtq_f32_s32(v88)).u64[0];
              v89 = (float32x4_t *)(*((_QWORD *)a2 + 16) + 16 * (v88.i32[0] + v88.i32[1] * (int)v86));
              v90 = vaddq_f32(*v89, vmulq_n_f32(vsubq_f32(v89[1], *v89), v87.f32[0]));
              v28 = vsubq_f32(vaddq_f32(v89[v86], vmulq_n_f32(vsubq_f32(v89[(int)v86 + 1], v89[v86]), v87.f32[0])), v90);
              v91 = vaddq_f32(v90, vmulq_lane_f32(v28, *(float32x2_t *)v87.f32, 1));
              goto LABEL_24;
            }
          }
          else
          {
            v92 = vaddq_f32(v80, v18);
            v93 = vcvtq_s32_f32(v92);
            v92.i64[0] = vaddq_s32(v93, vcgtq_f32(vcvtq_f32_s32(v93), v92)).u64[0];
            v85 = *(float32x4_t *)(v78 + 16 * (v92.i32[0] + v92.i32[1] * (int)v79));
            if (*((float *)this + 108) != 0.0)
            {
              v94 = vaddq_f32(vsubq_f32(v119, v121), v18);
              v95 = vcvtq_s32_f32(v94);
              v28 = vcvtq_f32_s32(v95);
              v94.i64[0] = vaddq_s32(v95, vcgtq_f32(v28, v94)).u64[0];
              v91 = *(float32x4_t *)(*((_QWORD *)a2 + 16) + 16 * (v94.i32[0] + v94.i32[1] * *((_DWORD *)a2 + 34)));
              goto LABEL_24;
            }
          }
          v91 = v85;
LABEL_24:
          v96 = 1.0 - v76;
          v97 = v96 * v96;
          v98.f32[0] = v96 * (float)(v96 * v96);
          v98.f32[1] = v97;
          __asm { FMOV            V3.2S, #1.0 }
          v100 = vsub_f32(_D3, v98);
          *(float32x2_t *)v28.f32 = vmul_f32(v100, *(float32x2_t *)v85.f32);
          v28.i32[2] = vmuls_lane_f32(v100.f32[1], v85, 2);
          v101 = v28;
          v101.i32[3] = v85.i32[3];
          if (*((float *)this + 105) != 0.0)
          {
            v28.i32[3] = 0;
            v102 = (int8x16_t)vmulq_f32(v28, (float32x4_t)xmmword_1B309B420);
            *(float32x2_t *)v102.i8 = vadd_f32(*(float32x2_t *)v102.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v102, v102, 8uLL));
            v103 = vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v102.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1)), 0);
            v103.i32[3] = v101.i32[3];
            v101 = (float32x4_t)v103;
          }
          __asm { FMOV            V2.4S, #1.0 }
          v105 = vmaxnmq_f32(vminnmq_f32(v101, _Q2), v24);
          if (*((float *)this + 106) != 0.0)
          {
            v106 = ceilf(vmuls_lane_f32(63.0, v105, 2));
            v107 = floorf(v106 * 0.125);
            v108.f32[0] = v106 + (float)(v107 * -8.0);
            v108.f32[1] = v107;
            v109 = vmaxnm_f32(vminnm_f32(vmul_f32(vmaxnm_f32(vminnm_f32(vadd_f32(vmul_f32(*(float32x2_t *)v105.f32, (float32x2_t)vdup_n_s32(0x3DFC0000u)), vadd_f32(vmul_f32(v108, (float32x2_t)0x3E0000003E000000), (float32x2_t)vdup_n_s32(0x3A800000u))), _D3), 0), (float32x2_t)0x4400000044000000), (float32x2_t)0x4400000044000000), 0);
            v110 = *(float32x4_t *)(*((_QWORD *)a2 + 14)
                                  + 16 * ((int)v109.f32[0] + *((_DWORD *)a2 + 30) * (int)v109.f32[1]));
            v110.i32[3] = 0;
            v111 = vminnmq_f32(v110, (float32x4_t)xmmword_1B3051560);
            v111.i32[3] = 0;
            v112 = vmaxnmq_f32(v111, v24);
            v112.i32[3] = v105.i32[3];
            v105 = v112;
          }
          if (*((float *)this + 107) == 1.0)
          {
            v113 = vmulq_laneq_f32(v105, v91, 3);
            v113.i32[3] = v105.i32[3];
            v105 = v113;
          }
          v105.i32[3] = v91.i32[3];
          *(float32x4_t *)(v17 + 16 * v26) = v105;
          v27 = vaddq_f32(v119, (float32x4_t)xmmword_1B304F230);
          ++v26;
        }
        while (v26 != v10);
        v25 = vaddq_f32(v116, (float32x4_t)xmmword_1B304F240);
        v17 += 16 * *((int *)a2 + 6);
        v12 = v117 + 1;
      }
      while (v117 + 1 != v115);
    }
  }
  return 0;
}

HGComicStrokeAndBlend *HGComicStrokeAndBlend::GetOutput(HGComicStrokeAndBlend *this, HGRenderer *a2, char *a3)
{
  char *v4;
  char *v5;
  char *v6;
  float v7;
  char *v8;
  float v9;
  uint64_t v11;
  uint64_t v12;

  HGNode::SetParameter((HGNode *)this, 0, *((float *)this + 102), 0.0, 0.0, 0.0, a3);
  HGNode::SetParameter((HGNode *)this, 1, *((float *)this + 105), 0.0, 0.0, 0.0, v4);
  HGNode::SetParameter((HGNode *)this, 2, *((float *)this + 106), 0.0, 0.0, 0.0, v5);
  if (*((float *)this + 107) == 1.0)
    v7 = 1.0;
  else
    v7 = 0.0;
  HGNode::SetParameter((HGNode *)this, 3, v7, 0.0, 0.0, 0.0, v6);
  if (*((float *)this + 108) == 1.0)
    v9 = 1.0;
  else
    v9 = 0.0;
  HGNode::SetParameter((HGNode *)this, 4, v9, 0.0, 0.0, 0.0, v8);
  if (*((float *)this + 106) == 0.0)
  {
    v11 = (*(uint64_t (**)(HGComicStrokeAndBlend *, _QWORD))(*(_QWORD *)this + 128))(this, 0);
    (*(void (**)(HGComicStrokeAndBlend *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, 2, v11);
    if (*((float *)this + 108) != 0.0)
      return this;
  }
  else if (*((float *)this + 108) != 0.0)
  {
    return this;
  }
  v12 = (*(uint64_t (**)(HGComicStrokeAndBlend *, _QWORD))(*(_QWORD *)this + 128))(this, 0);
  (*(void (**)(HGComicStrokeAndBlend *, uint64_t, uint64_t))(*(_QWORD *)this + 120))(this, 3, v12);
  return this;
}

const char *HGComicStrokeAndBlend::GetProgram(HGComicStrokeAndBlend *this, HGRenderer *a2)
{
  if (HGRenderer::GetTarget(a2, 393216) > 0x60B0F)
    return aMetal10Len0000_366;
  if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
    return aGlfs10Len00000;
  return 0;
}

uint64_t HGComicStrokeAndBlend::BindTexture(HGComicStrokeAndBlend *this, HGHandler *a2, uint64_t a3)
{
  float v5;
  HGHandler *v6;
  int v7;

  if ((_DWORD)a3 == 1)
  {
    v5 = 1.0 / *((float *)this + 104);
    v6 = a2;
    v7 = 1;
  }
  else
  {
    if ((_DWORD)a3)
    {
      HGHandler::TexCoord(a2, a3, 0, 0, 0);
      goto LABEL_7;
    }
    v5 = *((float *)this + 103) * (float)(1.0 / *((float *)this + 104));
    v6 = a2;
    v7 = 0;
  }
  HGHandler::TexCoord(v6, v7, 0, 0, 0);
  (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 104))(a2, v5, v5, 1.0);
LABEL_7:
  (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, a3, 0);
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 56))(a2, 0);
  (*(void (**)(HGHandler *, uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, 1, 1);
  return 0;
}

uint64_t HGTraversal::RecursiveTraversal<(HGTraversal::NodeInput)1,(HGTraversal::InputOrder)0>::Visitor::willVisitChildren()
{
  return 1;
}

BOOL HGTraversal::RecursiveTraversal<(HGTraversal::NodeInput)1,(HGTraversal::InputOrder)0>::Visitor::willVisitChild(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(a3, a4) != 0;
}

uint64_t HGTraversal::RecursiveTraversal<(HGTraversal::NodeInput)1,(HGTraversal::InputOrder)0>::Visitor::terminate()
{
  return 0;
}

uint64_t HGTraversal::RecursiveTraversal<(HGTraversal::NodeInput)1,(HGTraversal::InputOrder)0>::operator()(uint64_t result, HGRenderer *a2, uint64_t a3, void (***a4)(uint64_t, HGRenderer *, uint64_t))
{
  uint64_t v7;
  int v8;
  void (**v9)(uint64_t, HGRenderer *, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  HGNode *v13;
  HGNode *Output;
  uint64_t (**v15)(uint64_t, HGRenderer *, uint64_t);

  if (a3)
  {
    v7 = result;
    result = ((uint64_t (*)(void (***)(uint64_t, HGRenderer *, uint64_t)))(*a4)[9])(a4);
    if ((result & 1) == 0)
    {
      (*a4)[2]((uint64_t)a4, a2, a3);
      v8 = ((uint64_t (*)(uint64_t, HGRenderer *, uint64_t))(*a4)[3])((uint64_t)a4, a2, a3);
      v9 = *a4;
      if (v8)
      {
        (*v9)((uint64_t)a4, a2, a3);
        if (((unsigned int (*)(uint64_t, HGRenderer *, uint64_t))(*a4)[4])((uint64_t)a4, a2, a3))
        {
          v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
          if (v10)
          {
            v11 = v10;
            v12 = 0;
            do
            {
              ((void (*)(void (***)(uint64_t, HGRenderer *, uint64_t), HGRenderer *, uint64_t, uint64_t))(*a4)[5])(a4, a2, a3, v12);
              if (((unsigned int (*)(void (***)(uint64_t, HGRenderer *, uint64_t), HGRenderer *, uint64_t, uint64_t))(*a4)[6])(a4, a2, a3, v12))
              {
                ((void (*)(void (***)(uint64_t, HGRenderer *, uint64_t), HGRenderer *, uint64_t, uint64_t))(*a4)[7])(a4, a2, a3, v12);
                v13 = (HGNode *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(a3, v12);
                if (v13)
                {
                  Output = HGRenderer::GetOutput(a2, v13);
                  if (Output)
                    HGTraversal::RecursiveTraversal<(HGTraversal::NodeInput)1,(HGTraversal::InputOrder)0>::operator()(v7, a2, Output, a4);
                }
              }
              v12 = (v12 + 1);
            }
            while (v11 != (_DWORD)v12);
          }
        }
        v15 = (uint64_t (**)(uint64_t, HGRenderer *, uint64_t))(*a4 + 1);
      }
      else
      {
        v15 = (uint64_t (**)(uint64_t, HGRenderer *, uint64_t))(v9 + 8);
      }
      return (*v15)((uint64_t)a4, a2, a3);
    }
  }
  return result;
}

uint64_t HGTraversal::IterativeUniqueTraversal<(HGTraversal::NodeInput)0,(HGTraversal::IteratorOrder)0,(HGTraversal::TraversalOrder)0,(HGTraversal::InputOrder)0>::Visitor::terminate()
{
  return 0;
}

void HGTraversal::IterativeUniqueTraversal<(HGTraversal::NodeInput)0,(HGTraversal::IteratorOrder)0,(HGTraversal::TraversalOrder)0,(HGTraversal::InputOrder)0>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  __int128 *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void **v44;
  void **v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;
  void *__p[2];
  __int128 v56;
  __int128 v57;
  void *v58;
  char *v59;
  char *v60;

  v58 = 0;
  v59 = 0;
  v60 = 0;
  v56 = 0u;
  v57 = 0u;
  *(_OWORD *)__p = 0u;
  v53 = 0;
  v54 = 0;
  v52 = &v53;
  v5 = (char *)operator new(8uLL);
  *(_QWORD *)v5 = a3;
  v6 = v5 + 8;
  v58 = v5;
  v60 = v5 + 8;
  do
  {
    v7 = *((_QWORD *)v6 - 1);
    v59 = v6 - 8;
    v8 = v53;
    v9 = &v53;
LABEL_5:
    v10 = v9;
    if (v8)
    {
      do
      {
        v9 = (uint64_t **)v8;
        v11 = v8[4];
        if (v7 < v11)
        {
          v8 = *v9;
          goto LABEL_5;
        }
        if (v11 >= v7)
          goto LABEL_2;
        v8 = v9[1];
      }
      while (v8);
      v10 = v9 + 1;
    }
    v12 = (uint64_t *)operator new(0x28uLL);
    v12[4] = v7;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v9;
    *v10 = v12;
    if (*v52)
    {
      v52 = (uint64_t **)*v52;
      v12 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v53, v12);
    v13 = (char *)__p[1];
    ++v54;
    if ((void *)v56 == __p[1])
      v14 = 0;
    else
      v14 = (((_QWORD)v56 - (unint64_t)__p[1]) << 6) - 1;
    v15 = *((_QWORD *)&v57 + 1);
    v16 = *((_QWORD *)&v57 + 1) + v57;
    if (v14 == *((_QWORD *)&v57 + 1) + (_QWORD)v57)
    {
      std::deque<HGNode *>::__add_back_capacity((uint64_t)__p);
      v15 = *((_QWORD *)&v57 + 1);
      v13 = (char *)__p[1];
      v16 = v57 + *((_QWORD *)&v57 + 1);
    }
    *(_QWORD *)(*(_QWORD *)&v13[(v16 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v16 & 0x1FF)) = v7;
    *((_QWORD *)&v57 + 1) = v15 + 1;
    v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 112))(v7);
    if (v17)
    {
      v18 = 0;
      while (1)
      {
        v20 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v7 + 128))(v7, v18);
        v21 = v20;
        if (!v20)
          goto LABEL_21;
        v22 = v59;
        if (v59 >= v60)
          break;
        *(_QWORD *)v59 = v20;
        v19 = (uint64_t)(v22 + 8);
LABEL_20:
        v59 = (char *)v19;
LABEL_21:
        v18 = (v18 + 1);
        if ((_DWORD)v18 == v17)
          goto LABEL_2;
      }
      v23 = v58;
      v24 = v59 - (_BYTE *)v58;
      v25 = (v59 - (_BYTE *)v58) >> 3;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v27 = v60 - (_BYTE *)v58;
      if ((v60 - (_BYTE *)v58) >> 2 > v26)
        v26 = v27 >> 2;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
        v28 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        if (v28 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v29 = operator new(8 * v28);
        v30 = (uint64_t *)&v29[8 * v25];
        *v30 = v21;
        v19 = (uint64_t)(v30 + 1);
        if (v22 == v23)
        {
LABEL_33:
          v58 = v30;
          v60 = &v29[8 * v28];
          if (!v22)
            goto LABEL_20;
          goto LABEL_43;
        }
      }
      else
      {
        v29 = 0;
        v30 = (uint64_t *)(8 * v25);
        *(_QWORD *)(8 * v25) = v21;
        v19 = 8 * v25 + 8;
        if (v22 == v23)
          goto LABEL_33;
      }
      v31 = v22 - 8 - v23;
      if (v31 < 0x58)
        goto LABEL_75;
      if ((unint64_t)(v22 - &v29[v24]) < 0x20)
        goto LABEL_75;
      v32 = (v31 >> 3) + 1;
      v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
      v34 = &v22[-v33];
      v30 = (uint64_t *)((char *)v30 - v33);
      v35 = &v29[8 * v25 - 16];
      v36 = (__int128 *)(v22 - 16);
      v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = *v36;
        *(v35 - 1) = *(v36 - 1);
        *v35 = v38;
        v35 -= 2;
        v36 -= 2;
        v37 -= 4;
      }
      while (v37);
      v22 = v34;
      if (v32 != (v32 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_75:
        do
        {
          v39 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v30 = v39;
        }
        while (v22 != v23);
      }
      v22 = v58;
      v58 = v30;
      v60 = &v29[8 * v28];
      if (!v22)
        goto LABEL_20;
LABEL_43:
      operator delete(v22);
      goto LABEL_20;
    }
LABEL_2:
    v6 = v59;
  }
  while (v58 != v59);
  v40 = (char *)__p[1] + 8 * ((unint64_t)v57 >> 9);
  if ((void *)v56 == __p[1])
    v41 = 0;
  else
    v41 = (_QWORD *)(*v40 + 8 * (v57 & 0x1FF));
LABEL_47:
  v42 = v41 - 512;
  while (1)
  {
    if ((void *)v56 == __p[1])
    {
      if (!v41)
        break;
    }
    else if (v41 == (_QWORD *)(*(_QWORD *)((char *)__p[1]
                                          + (((*((_QWORD *)&v57 + 1) + (_QWORD)v57) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((*((_QWORD *)&v57 + 1) + v57) & 0x1FF)))
    {
      break;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a4 + 8))(a4, a2, *v41) & 1) != 0)
      break;
    (**(void (***)(uint64_t, uint64_t, _QWORD))a4)(a4, a2, *v41++);
    if ((_QWORD *)*v40 == ++v42)
    {
      v43 = (_QWORD *)v40[1];
      ++v40;
      v41 = v43;
      goto LABEL_47;
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v52, v53);
  v44 = (void **)__p[1];
  v45 = (void **)v56;
  *((_QWORD *)&v57 + 1) = 0;
  v46 = v56 - (unint64_t)__p[1];
  if ((unint64_t)v56 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v44);
      v45 = (void **)v56;
      v44 = (void **)((char *)__p[1] + 8);
      __p[1] = v44;
      v46 = v56 - (_QWORD)v44;
    }
    while ((_QWORD)v56 - (_QWORD)v44 > 0x10uLL);
  }
  v47 = v46 >> 3;
  if (v47 == 1)
  {
    v48 = 256;
LABEL_61:
    *(_QWORD *)&v57 = v48;
  }
  else if (v47 == 2)
  {
    v48 = 512;
    goto LABEL_61;
  }
  if (v44 != v45)
  {
    do
    {
      v49 = *v44++;
      operator delete(v49);
    }
    while (v44 != v45);
    if ((void *)v56 != __p[1])
      *(_QWORD *)&v56 = v56 + (((unint64_t)__p[1] - v56 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v58)
    operator delete(v58);
}

void sub_1B29BD5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a12, a13);
  std::deque<HGNode *>::~deque[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t HGTraversal::IterativeUniqueTraversal<(HGTraversal::NodeInput)1,(HGTraversal::IteratorOrder)0,(HGTraversal::TraversalOrder)0,(HGTraversal::InputOrder)0>::Visitor::terminate()
{
  return 0;
}

void HGTraversal::IterativeUniqueTraversal<(HGTraversal::NodeInput)1,(HGTraversal::IteratorOrder)0,(HGTraversal::TraversalOrder)0,(HGTraversal::InputOrder)0>::operator()(uint64_t a1, HGRenderer *a2, uint64_t a3, uint64_t a4)
{
  char *v5;
  char *v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  HGNode *v20;
  HGNode *Output;
  HGNode *v22;
  _BYTE *v23;
  _BYTE *v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  HGNode **v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  __int128 *v37;
  uint64_t v38;
  __int128 v39;
  HGNode *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void **v45;
  void **v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t v55;
  void *__p[2];
  __int128 v57;
  __int128 v58;
  void *v59;
  char *v60;
  char *v61;

  v59 = 0;
  v60 = 0;
  v61 = 0;
  v57 = 0u;
  v58 = 0u;
  *(_OWORD *)__p = 0u;
  v54 = 0;
  v55 = 0;
  v53 = &v54;
  v5 = (char *)operator new(8uLL);
  *(_QWORD *)v5 = a3;
  v6 = v5 + 8;
  v59 = v5;
  v61 = v5 + 8;
  do
  {
    v7 = *((_QWORD *)v6 - 1);
    v60 = v6 - 8;
    v8 = v54;
    v9 = &v54;
LABEL_5:
    v10 = v9;
    if (v8)
    {
      do
      {
        v9 = (uint64_t **)v8;
        v11 = v8[4];
        if (v7 < v11)
        {
          v8 = *v9;
          goto LABEL_5;
        }
        if (v11 >= v7)
          goto LABEL_2;
        v8 = v9[1];
      }
      while (v8);
      v10 = v9 + 1;
    }
    v12 = (uint64_t *)operator new(0x28uLL);
    v12[4] = v7;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = (uint64_t)v9;
    *v10 = v12;
    if (*v53)
    {
      v53 = (uint64_t **)*v53;
      v12 = *v10;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v54, v12);
    v13 = (char *)__p[1];
    ++v55;
    if ((void *)v57 == __p[1])
      v14 = 0;
    else
      v14 = (((_QWORD)v57 - (unint64_t)__p[1]) << 6) - 1;
    v15 = *((_QWORD *)&v58 + 1);
    v16 = *((_QWORD *)&v58 + 1) + v58;
    if (v14 == *((_QWORD *)&v58 + 1) + (_QWORD)v58)
    {
      std::deque<HGNode *>::__add_back_capacity((uint64_t)__p);
      v15 = *((_QWORD *)&v58 + 1);
      v13 = (char *)__p[1];
      v16 = v58 + *((_QWORD *)&v58 + 1);
    }
    *(_QWORD *)(*(_QWORD *)&v13[(v16 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v16 & 0x1FF)) = v7;
    *((_QWORD *)&v58 + 1) = v15 + 1;
    v17 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v7 + 112))(v7);
    if (v17)
    {
      v18 = 0;
      while (1)
      {
        v20 = (HGNode *)(*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v7 + 128))(v7, v18);
        if (!v20)
          goto LABEL_21;
        Output = HGRenderer::GetOutput(a2, v20);
        v22 = Output;
        if (!Output)
          goto LABEL_21;
        v23 = v60;
        if (v60 >= v61)
          break;
        *(_QWORD *)v60 = Output;
        v19 = (uint64_t)(v23 + 8);
LABEL_20:
        v60 = (char *)v19;
LABEL_21:
        v18 = (v18 + 1);
        if ((_DWORD)v18 == v17)
          goto LABEL_2;
      }
      v24 = v59;
      v25 = v60 - (_BYTE *)v59;
      v26 = (v60 - (_BYTE *)v59) >> 3;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v28 = v61 - (_BYTE *)v59;
      if ((v61 - (_BYTE *)v59) >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v30 = operator new(8 * v29);
        v31 = (HGNode **)&v30[8 * v26];
        *v31 = v22;
        v19 = (uint64_t)(v31 + 1);
        if (v23 == v24)
        {
LABEL_34:
          v59 = v31;
          v61 = &v30[8 * v29];
          if (!v23)
            goto LABEL_20;
          goto LABEL_44;
        }
      }
      else
      {
        v30 = 0;
        v31 = (HGNode **)(8 * v26);
        *(_QWORD *)(8 * v26) = v22;
        v19 = 8 * v26 + 8;
        if (v23 == v24)
          goto LABEL_34;
      }
      v32 = v23 - 8 - v24;
      if (v32 < 0x58)
        goto LABEL_76;
      if ((unint64_t)(v23 - &v30[v25]) < 0x20)
        goto LABEL_76;
      v33 = (v32 >> 3) + 1;
      v34 = 8 * (v33 & 0x3FFFFFFFFFFFFFFCLL);
      v35 = &v23[-v34];
      v31 = (HGNode **)((char *)v31 - v34);
      v36 = &v30[8 * v26 - 16];
      v37 = (__int128 *)(v23 - 16);
      v38 = v33 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v39 = *v37;
        *(v36 - 1) = *(v37 - 1);
        *v36 = v39;
        v36 -= 2;
        v37 -= 2;
        v38 -= 4;
      }
      while (v38);
      v23 = v35;
      if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_76:
        do
        {
          v40 = (HGNode *)*((_QWORD *)v23 - 1);
          v23 -= 8;
          *--v31 = v40;
        }
        while (v23 != v24);
      }
      v23 = v59;
      v59 = v31;
      v61 = &v30[8 * v29];
      if (!v23)
        goto LABEL_20;
LABEL_44:
      operator delete(v23);
      goto LABEL_20;
    }
LABEL_2:
    v6 = v60;
  }
  while (v59 != v60);
  v41 = (char *)__p[1] + 8 * ((unint64_t)v58 >> 9);
  if ((void *)v57 == __p[1])
    v42 = 0;
  else
    v42 = (_QWORD *)(*v41 + 8 * (v58 & 0x1FF));
LABEL_48:
  v43 = v42 - 512;
  while (1)
  {
    if ((void *)v57 == __p[1])
    {
      if (!v42)
        break;
    }
    else if (v42 == (_QWORD *)(*(_QWORD *)((char *)__p[1]
                                          + (((*((_QWORD *)&v58 + 1) + (_QWORD)v58) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((*((_QWORD *)&v58 + 1) + v58) & 0x1FF)))
    {
      break;
    }
    if (((*(uint64_t (**)(uint64_t, HGRenderer *, _QWORD))(*(_QWORD *)a4 + 8))(a4, a2, *v42) & 1) != 0)
      break;
    (**(void (***)(uint64_t, HGRenderer *, _QWORD))a4)(a4, a2, *v42++);
    if ((_QWORD *)*v41 == ++v43)
    {
      v44 = (_QWORD *)v41[1];
      ++v41;
      v42 = v44;
      goto LABEL_48;
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v53, v54);
  v45 = (void **)__p[1];
  v46 = (void **)v57;
  *((_QWORD *)&v58 + 1) = 0;
  v47 = v57 - (unint64_t)__p[1];
  if ((unint64_t)v57 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v45);
      v46 = (void **)v57;
      v45 = (void **)((char *)__p[1] + 8);
      __p[1] = v45;
      v47 = v57 - (_QWORD)v45;
    }
    while ((_QWORD)v57 - (_QWORD)v45 > 0x10uLL);
  }
  v48 = v47 >> 3;
  if (v48 == 1)
  {
    v49 = 256;
LABEL_62:
    *(_QWORD *)&v58 = v49;
  }
  else if (v48 == 2)
  {
    v49 = 512;
    goto LABEL_62;
  }
  if (v45 != v46)
  {
    do
    {
      v50 = *v45++;
      operator delete(v50);
    }
    while (v45 != v46);
    if ((void *)v57 != __p[1])
      *(_QWORD *)&v57 = v57 + (((unint64_t)__p[1] - v57 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  if (v59)
    operator delete(v59);
}

void sub_1B29BDADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a12, a13);
  std::deque<HGNode *>::~deque[abi:ne180100]((uint64_t)&a15);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<HGNode *>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::deque<HGNode *>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      std::__split_buffer<HGNode **>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    std::__split_buffer<HGNode **>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1B29BE144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B29BE160(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B29BE174(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B29BE18C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__split_buffer<HGNode **>::push_back(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<HGNode **>::push_front(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void HFGrabCutInterface::HFGrabCutInterface(HFGrabCutInterface *this, const __CFUUID *a2)
{
  HFGrabCut *v3;

  this->var0 = (void **)&off_1E6513B78;
  v3 = (HFGrabCut *)operator new();
  HFGrabCut::HFGrabCut(v3);
  this->var1 = v3;
}

void sub_1B29BE518(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40C5845091);
  _Unwind_Resume(a1);
}

void HFGrabCutInterface::~HFGrabCutInterface(HFGrabCutInterface *this)
{
  HFGrabCut *var1;

  this->var0 = (void **)&off_1E6513B78;
  var1 = this->var1;
  if (var1)
    (*(void (**)(HFGrabCut *))(*(_QWORD *)var1 + 8))(var1);
}

{
  HFGrabCut *var1;

  this->var0 = (void **)&off_1E6513B78;
  var1 = this->var1;
  if (var1)
    (*(void (**)(HFGrabCut *))(*(_QWORD *)var1 + 8))(var1);
  JUMPOUT(0x1B5E29170);
}

HFGrabCut *HFGrabCutInterface::InitDataModels(HFGrabCutInterface *this, HGBitmap *a2, HGBitmap *a3, unint64_t a4)
{
  return HFGrabCut::InitDataModels(this->var1, a2, a3, a4);
}

void HFGrabCutInterface::GenerateMask(HFGrabCutInterface *this, HGBitmap *a2, HGBitmap *a3, HGBitmap *a4, double a5, int a6, double a7, __n128 a8)
{
  HFGrabCut::GenerateMask(this->var1, a2, a3, a4, a5, a6, a7, a8);
}

HFGrabCut *HFGrabCutInterface::Reset(HFGrabCutInterface *this)
{
  return HFGrabCut::Reset(this->var1);
}

void HGGradient::HGGradient(HGGradient *this)
{
  _QWORD *v2;
  HGNode *v3;
  HGNode *v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E6513BA8;
  v2[51] = 0;
  v3 = (HGNode *)HGObject::operator new(0x1A0uLL);
  HGNode::HGNode(v3);
  v4 = (HGNode *)*((_QWORD *)this + 51);
  if (v4 == v3)
  {
    if (v3)
      (*(void (**)(HGNode *))(*(_QWORD *)v3 + 24))(v3);
  }
  else
  {
    if (v4)
      (*(void (**)(HGNode *))(*(_QWORD *)v4 + 24))(v4);
    *((_QWORD *)this + 51) = v3;
  }
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_DWORD *)this + 117) = 1065353216;
  *((_DWORD *)this + 122) = 1065353216;
  *((_DWORD *)this + 128) = 1065353216;
}

void sub_1B29BE68C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  v4 = *(_QWORD *)(v1 + 408);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  HGNode::~HGNode((HGNode *)v1);
  _Unwind_Resume(a1);
}

void HGGradient::~HGGradient(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E6513BA8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode(this);
}

{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E6513BA8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  HGNode::~HGNode(this);
  HGObject::operator delete(v3);
}

uint64_t HGGradient::SetGradientMode(uint64_t a1, int a2)
{
  HGGradientRadial *GradientNode;
  uint64_t result;

  *(_DWORD *)(a1 + 416) = a2;
  GradientNode = HGGradient::_createGradientNode(a1, a2);
  result = *(_QWORD *)(a1 + 408);
  if ((HGGradientRadial *)result == GradientNode)
  {
    if (GradientNode)
      return (*(uint64_t (**)(HGGradientRadial *))(*(_QWORD *)GradientNode + 24))(GradientNode);
  }
  else
  {
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    *(_QWORD *)(a1 + 408) = GradientNode;
  }
  return result;
}

void sub_1B29BE7E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

HGGradientRadial *HGGradient::_createGradientNode(uint64_t a1, int a2)
{
  HGGradientRadial *v2;

  if (a2 == 1)
  {
    v2 = (HGGradientRadial *)HGObject::operator new(0x1B0uLL);
    HGGradientRadial::HGGradientRadial(v2);
  }
  else if (a2)
  {
    v2 = (HGGradientRadial *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode((HGNode *)v2);
  }
  else
  {
    v2 = (HGGradientRadial *)HGObject::operator new(0x1B0uLL);
    HGGradientLinear::HGGradientLinear(v2);
  }
  return v2;
}

void sub_1B29BE868(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B29BE87C(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B29BE890(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t HGGradient::GetOutput(HGNode *this, HGRenderer *a2)
{
  HGNode *Input;

  Input = HGRenderer::GetInput(a2, this, 0);
  (*(void (**)(_QWORD, _QWORD, float, float, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 0, *((float *)this + 105), *((float *)this + 106), *((float *)this + 107), *((float *)this + 108));
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 1, *((float *)this + 109), *((float *)this + 110), *((float *)this + 111), *((float *)this + 112));
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 2, *((float *)this + 113), *((float *)this + 114), *((float *)this + 115), *((float *)this + 116));
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 3, *((float *)this + 117), *((float *)this + 118), *((float *)this + 119), *((float *)this + 120));
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 4, *((float *)this + 121), *((float *)this + 122), *((float *)this + 123), *((float *)this + 124));
  (*(void (**)(_QWORD, uint64_t, float, float, float, float))(**((_QWORD **)this + 51) + 96))(*((_QWORD *)this + 51), 5, *((float *)this + 125), *((float *)this + 126), *((float *)this + 127), *((float *)this + 128));
  (*(void (**)(_QWORD, _QWORD, HGNode *))(**((_QWORD **)this + 51) + 120))(*((_QWORD *)this + 51), 0, Input);
  return *((_QWORD *)this + 51);
}

uint64_t HGGradient::SetParameter(HGNode *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  char *v7;
  float *v8;
  char *v9;
  float *v10;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  v7 = (char *)this + 420;
  v8 = (float *)((char *)this + 16 * a2 + 420);
  if (*v8 == a3)
  {
    v9 = &v7[16 * a2];
    if (*((float *)v9 + 1) == a4 && *((float *)v9 + 2) == a5 && *(float *)&v7[16 * a2 + 12] == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)&v7[16 * a2];
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits(this, a2, a7);
  return 1;
}

uint64_t HGCVPixelBufferPoolImpl::HGCVPixelBufferPoolImpl(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::string __str;
  char *v29;
  std::__shared_weak_count *v30;

  v4 = (_QWORD *)HGPool::BasePool::BasePool(a1);
  *v4 = &off_1E6513F60;
  v4[2] = *a2;
  v5 = a2[1];
  v4[3] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = *a2;
  v8 = a2[1];
  *(_QWORD *)(a1 + 56) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 152) = *a2;
  v11 = a2[1];
  *(_QWORD *)(a1 + 160) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_OWORD *)(a1 + 232) = 0uLL;
  *(_OWORD *)(a1 + 216) = 0uLL;
  *(_OWORD *)(a1 + 200) = 0uLL;
  *(_OWORD *)(a1 + 184) = 0uLL;
  *(_OWORD *)(a1 + 168) = 0uLL;
  *(_OWORD *)(a1 + 264) = 0uLL;
  *(_OWORD *)(a1 + 280) = 0uLL;
  *(_OWORD *)(a1 + 296) = 0uLL;
  *(_BYTE *)(a1 + 343) = 14;
  *(_QWORD *)(a1 + 312) = 0;
  strcpy((char *)(a1 + 320), "(unnamed) pool");
  *(_BYTE *)(a1 + 367) = 6;
  strcpy((char *)(a1 + 344), "hgpool");
  *(_DWORD *)(a1 + 368) = 0;
  *(_WORD *)(a1 + 372) = 257;
  *(_BYTE *)(a1 + 374) = 1;
  *(_WORD *)(a1 + 8) = 17;
  v14 = *(unsigned __int16 *)(a1 + 10) | 0x110000;
  *(_QWORD *)(a1 + 144) = v14;
  *(_QWORD *)(a1 + 248) = v14;
  *(_QWORD *)(a1 + 256) = 850045863;
  *(_QWORD *)a1 = &off_1E6513E10;
  v15 = operator new(0x38uLL);
  v15[1] = 0;
  v16 = v15 + 1;
  v15[2] = 0;
  *v15 = &unk_1E6513FD0;
  v15[3] = &unk_1E6514020;
  *((_OWORD *)v15 + 2) = xmmword_1B309B460;
  v15[6] = 5000000000;
  v29 = (char *)(v15 + 3);
  v30 = (std::__shared_weak_count *)v15;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v15 + 3);
  __str.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  std::mutex::lock((std::mutex *)(a1 + 256));
  do
    v18 = __ldxr(v16);
  while (__stxr(v18 + 1, v16));
  v19 = *(std::__shared_weak_count **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = v15 + 3;
  *(_QWORD *)(a1 + 176) = v15;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  std::mutex::unlock((std::mutex *)(a1 + 256));
  if (__str.__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)__str.__r_.__value_.__l.__size_ + 16))(__str.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }
  }
  *((_BYTE *)&__str.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&__str, "hgcv");
  std::string::operator=((std::string *)(a1 + 344), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v24 = v30;
  if (v30)
  {
    v25 = (unint64_t *)&v30->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return a1;
}

void sub_1B29BED4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;
  HGPool::BasePool *v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::~Pool(v16, v18);
  _Unwind_Resume(a1);
}

void sub_1B29BED88(_Unwind_Exception *a1, HGPool::BasePool *a2)
{
  uint64_t v2;

  HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::~Pool(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::~Pool(uint64_t a1, HGPool::BasePool *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;

  *(_QWORD *)a1 = &off_1E6513F60;
  HGPool::unregisterPool((HGPool *)a1, a2);
  if (*(char *)(a1 + 367) < 0)
  {
    operator delete(*(void **)(a1 + 344));
    if ((*(char *)(a1 + 343) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_24:
    operator delete(*(void **)(a1 + 320));
    goto LABEL_3;
  }
  if (*(char *)(a1 + 343) < 0)
    goto LABEL_24;
LABEL_3:
  std::mutex::~mutex((std::mutex *)(a1 + 256));
  HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::~List((int64x2_t *)(a1 + 152));
  std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::~deque[abi:ne180100](a1 + 80);
  v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v6 = *(std::__shared_weak_count **)(a1 + 56);
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = *(std::__shared_weak_count **)(a1 + 40);
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v12)
    return a1;
  v13 = (unint64_t *)&v12->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (v14)
    return a1;
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  return a1;
}

void HGCVPixelBufferPool::HGCVPixelBufferPool(HGCVPixelBufferPool *this)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  HGPool::BasePool *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[3];
  std::__shared_weak_count *v14;

  HGObject::HGObject((HGObject *)this);
  *v2 = off_1E6513E80;
  v3 = (std::__shared_weak_count *)operator new(0x20uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6514080;
  v3[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E65140D0;
  v13[2] = v3 + 1;
  v14 = v3;
  v5 = operator new();
  v6 = v5;
  v13[0] = v3 + 1;
  v13[1] = v3;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  HGCVPixelBufferPoolImpl::HGCVPixelBufferPoolImpl(v5, v13);
  *((_QWORD *)this + 2) = v6;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  HGPool::registerPool(*((HGPool **)this + 2), v8);
  v10 = v14;
  if (v14)
  {
    v11 = (unint64_t *)&v14->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1B29BF098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  HGObject *v11;
  uint64_t v12;

  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1B5E29170](v12, 0x10B3C40C3EE8A59);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  HGObject::~HGObject(v11);
  _Unwind_Resume(a1);
}

void sub_1B29BF0D4(_Unwind_Exception *a1)
{
  HGObject *v1;

  HGObject::~HGObject(v1);
  _Unwind_Resume(a1);
}

void sub_1B29BF0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  HGObject *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)va);
  HGObject::~HGObject(v3);
  _Unwind_Resume(a1);
}

void HGCVPixelBufferPool::~HGCVPixelBufferPool(HGCVPixelBufferPool *this, HGPool::BasePool *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E6513E80;
  HGPool::unregisterPool(*((HGPool **)this + 2), a2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  HGObject::~HGObject((HGObject *)this);
}

{
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E6513E80;
  HGPool::unregisterPool(*((HGPool **)this + 2), a2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  HGObject::~HGObject((HGObject *)this);
  HGObject::operator delete(v4);
}

std::string *HGCVPixelBufferPool::setLabel(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(_QWORD *)(a1 + 16) + 320), a2);
}

void HGCVPixelBufferPool::setServicingPolicy(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  std::mutex::lock((std::mutex *)(v3 + 256));
  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(v3 + 176);
  *(_QWORD *)(v3 + 168) = v5;
  *(_QWORD *)(v3 + 176) = v4;
  if (!v8)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
    std::mutex::unlock((std::mutex *)(v3 + 256));
  }
  else
  {
LABEL_8:
    std::mutex::unlock((std::mutex *)(v3 + 256));
  }
}

void HGCVPixelBufferPool::setRecyclingPolicy(HGCVPixelBufferPool *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;

  v6 = a3 << 20;
  v7 = 1000000 * a4;
  v8 = (std::__shared_weak_count *)operator new(0x38uLL);
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6513FD0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6514020;
  v8[1].__shared_owners_ = a2;
  v8[1].__shared_weak_owners_ = v6;
  v8[2].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v10 = *((_QWORD *)this + 2);
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  std::mutex::lock((std::mutex *)(v10 + 256));
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = *(std::__shared_weak_count **)(v10 + 176);
  *(_QWORD *)(v10 + 168) = v8 + 1;
  *(_QWORD *)(v10 + 176) = v8;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::mutex::unlock((std::mutex *)(v10 + 256));
  if (!v8)
    goto LABEL_14;
  v16 = (unint64_t *)&v8->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
LABEL_14:
    if (!v8)
      return;
  }
  v18 = (unint64_t *)&v8->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1B29BF3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGPool::ServicingPolicy>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::service(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  std::mutex *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v8 = (std::mutex *)(a1 + 256);
  std::mutex::lock((std::mutex *)(a1 + 256));
  if (*(_QWORD *)(a1 + 224))
  {
    v9 = 0;
    do
    {
      v10 = atomic_load((unint64_t *)(a1 + 232));
      if (v10 <= a2)
      {
        v11 = atomic_load((unint64_t *)(a1 + 240));
        if (v11 <= a4)
        {
          v12 = *(_QWORD *)(a1 + 216);
          v13 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8));
          if (std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(v13 + ((v12 & 0x3F) << 6) + 40) <= a3)
            break;
        }
      }
      HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::_pop_front((int64x2_t *)(a1 + 152));
      ++v9;
    }
    while (*(_QWORD *)(a1 + 224));
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      kdebug_trace();
    }
  }
  std::mutex::unlock(v8);
}

void sub_1B29BF56C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B29BF580(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void HGCVPixelBufferPool::clear(HGCVPixelBufferPool *this)
{
  HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::clear(*((_QWORD *)this + 2));
}

void HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::clear(uint64_t a1)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)(a1 + 256);
  std::mutex::lock((std::mutex *)(a1 + 256));
  if (*(_QWORD *)(a1 + 224))
  {
    v3 = 0;
    do
    {
      HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::_pop_front((int64x2_t *)(a1 + 152));
      --v3;
    }
    while (*(_QWORD *)(a1 + 224));
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      kdebug_trace();
    }
  }
  std::mutex::unlock(v2);
}

void sub_1B29BF670(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B29BF684(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

CVPixelBufferRef HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::newObject(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  const char *v5;
  char *v6;
  int v7;
  CVPixelBufferRef v8;
  __CVBuffer *v9;
  __CVBuffer *v10;
  __CVBuffer *v11;
  CVPixelBufferRef v12;
  __CVBuffer *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  size_t DataSize;
  unint64_t *v25;
  unint64_t v26;
  unsigned __int8 v27;
  HGLogger *v28;
  CVPixelBufferRef pixelBuffer[2];
  _BYTE v31[32];
  __int128 v32;
  _BYTE v33[24];

  if ((a3 & 1) != 0 || (v4 = *(_QWORD *)(a1 + 32)) == 0)
  {
    *(_OWORD *)v33 = *(_OWORD *)a2;
    *(_QWORD *)&v33[16] = *(_QWORD *)(a2 + 16);
  }
  else
  {
    (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v4 + 16))(v33);
  }
  std::mutex::lock((std::mutex *)(a1 + 256));
  HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::retrieveObject((int64x2_t *)(a1 + 152), (__int128 *)v33, (uint64_t)pixelBuffer);
  std::mutex::unlock((std::mutex *)(a1 + 256));
  if (pixelBuffer[0])
  {
    BYTE8(v32) = 1;
    *(std::chrono::steady_clock::time_point *)&v31[24] = std::chrono::steady_clock::now();
    *(_QWORD *)&v32 = v32 + 1;
    HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::reused((uint64_t)pixelBuffer);
    kdebug_trace();
    v7 = *(_DWORD *)(a1 + 368);
    if (v7 == 1)
    {
      kdebug_trace();
      v12 = pixelBuffer[0];
      v13 = (__CVBuffer *)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v33);
      HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::deleted((uint64_t)pixelBuffer);
      pixelBuffer[0] = v13;
      *(_OWORD *)v31 = *(_OWORD *)v33;
      *(_QWORD *)&v31[13] = *(_QWORD *)&v33[13];
      HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::allocated((uint64_t)pixelBuffer);
      kdebug_trace();
      (*(void (**)(_QWORD, CVPixelBufferRef))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), v12);
      kdebug_trace();
    }
    else if (v7 == 2)
    {
      kdebug_trace();
      v9 = pixelBuffer[0];
      v8 = pixelBuffer[1];
      v10 = (__CVBuffer *)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v33);
      HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::deleted((uint64_t)pixelBuffer);
      pixelBuffer[0] = v10;
      pixelBuffer[1] = v9;
      *(_OWORD *)v31 = *(_OWORD *)v33;
      *(_QWORD *)&v31[13] = *(_QWORD *)&v33[13];
      HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::allocated((uint64_t)pixelBuffer);
      kdebug_trace();
      (*(void (**)(_QWORD, CVPixelBufferRef))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), v8);
      kdebug_trace();
    }
  }
  else
  {
    kdebug_trace();
    v11 = (__CVBuffer *)(*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v33);
    *(_OWORD *)v31 = *(_OWORD *)v33;
    *(_QWORD *)&v32 = 0;
    *(_OWORD *)&v31[16] = *(unint64_t *)&v33[16];
    pixelBuffer[0] = v11;
    pixelBuffer[1] = 0;
    BYTE8(v32) = 1;
    *(std::chrono::steady_clock::time_point *)&v31[24] = std::chrono::steady_clock::now();
    *(_QWORD *)&v32 = v32 + 1;
    HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::allocated((uint64_t)pixelBuffer);
    kdebug_trace();
    kdebug_trace();
  }
  if (pixelBuffer[0])
  {
    std::mutex::lock((std::mutex *)(a1 + 256));
    v14 = *(_QWORD *)(a1 + 96);
    v15 = *(_QWORD *)(a1 + 88);
    v16 = 8 * (v14 - v15) - 1;
    if (v14 == v15)
      v16 = 0;
    v17 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
    if (v16 == v17)
    {
      std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::__add_back_capacity(a1 + 80);
      v15 = *(_QWORD *)(a1 + 88);
      v17 = *(_QWORD *)(a1 + 120) + *(_QWORD *)(a1 + 112);
    }
    v18 = (_OWORD *)(*(_QWORD *)(v15 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v17 & 0x3F) << 6));
    v19 = *(_OWORD *)pixelBuffer;
    v20 = *(_OWORD *)v31;
    v21 = v32;
    v18[2] = *(_OWORD *)&v31[16];
    v18[3] = v21;
    *v18 = v19;
    v18[1] = v20;
    ++*(_QWORD *)(a1 + 120);
    v22 = (unint64_t *)(a1 + 128);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    DataSize = CVPixelBufferGetDataSize(pixelBuffer[0]);
    v25 = (unint64_t *)(a1 + 136);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 + DataSize, v25));
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    kdebug_trace();
    std::mutex::unlock((std::mutex *)(a1 + 256));
  }
  else
  {
    v27 = atomic_load(HGLogger::_enabled);
    if ((v27 & 1) != 0)
    {
      v28 = (HGLogger *)(a1 + 344);
      if (*(char *)(a1 + 367) < 0)
        v28 = *(HGLogger **)v28;
      HGLogger::log(v28, (const char *)1, (HGLogger *)"HGPool::newObject() - Failed to recycle or allocate object! Oops.", v5, v6);
    }
  }
  return pixelBuffer[0];
}

void sub_1B29BFB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B29BFB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B29BFBA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B29BFBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void sub_1B29BFBD0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::releaseObject(uint64_t a1, uint64_t a2)
{
  std::mutex *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t *v12;
  unint64_t v13;
  size_t DataSize;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  char *v18;
  CVPixelBufferRef v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  size_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  _OWORD v34[2];
  _OWORD v35[2];
  CVPixelBufferRef pixelBuffer[2];
  __int128 v37;
  _BYTE v38[32];
  uint64_t v39;

  v39 = a2;
  v3 = (std::mutex *)(a1 + 256);
  std::mutex::lock((std::mutex *)(a1 + 256));
  HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,true>::retrieveObject((int64x2_t *)(a1 + 48), &v39, (uint64_t)pixelBuffer);
  if (pixelBuffer[0])
  {
    v38[24] = 0;
    *(std::chrono::steady_clock::time_point *)&v38[8] = std::chrono::steady_clock::now();
    HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::recycled((uint64_t)pixelBuffer);
    kdebug_trace();
    v4 = *(_QWORD *)(a1 + 200);
    v5 = *(_QWORD *)(a1 + 192);
    v6 = 8 * (v4 - v5) - 1;
    if (v4 == v5)
      v6 = 0;
    v7 = *(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 216);
    if (v6 == v7)
    {
      std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::__add_back_capacity(a1 + 184);
      v5 = *(_QWORD *)(a1 + 192);
      v7 = *(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 216);
    }
    v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v7 & 0x3F) << 6));
    v9 = *(_OWORD *)pixelBuffer;
    v10 = v37;
    v11 = *(_OWORD *)&v38[16];
    v8[2] = *(_OWORD *)v38;
    v8[3] = v11;
    *v8 = v9;
    v8[1] = v10;
    ++*(_QWORD *)(a1 + 224);
    v12 = (unint64_t *)(a1 + 232);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    DataSize = CVPixelBufferGetDataSize(pixelBuffer[0]);
    v15 = (unint64_t *)(a1 + 240);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + DataSize, v15));
    HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::service((int64x2_t *)(a1 + 152), a1);
  }
  else
  {
    HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::retrieveObject((int64x2_t *)(a1 + 152), &v39, (uint64_t)v34);
    *(_OWORD *)pixelBuffer = v34[0];
    v37 = v34[1];
    *(_OWORD *)v38 = v35[0];
    *(_OWORD *)&v38[9] = *(_OWORD *)((char *)v35 + 9);
    v19 = *(CVPixelBufferRef *)&v34[0];
    if (*(_QWORD *)&v34[0])
    {
      v20 = *(_QWORD *)(a1 + 200);
      v21 = *(_QWORD *)(a1 + 192);
      v22 = 8 * (v20 - v21) - 1;
      if (v20 == v21)
        v22 = 0;
      v23 = *(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 216);
      if (v22 == v23)
      {
        std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::__add_back_capacity(a1 + 184);
        v21 = *(_QWORD *)(a1 + 192);
        v23 = *(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 216);
      }
      v24 = (_OWORD *)(*(_QWORD *)(v21 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((v23 & 0x3F) << 6));
      v25 = *(_OWORD *)pixelBuffer;
      v26 = v37;
      v27 = *(_OWORD *)&v38[16];
      v24[2] = *(_OWORD *)v38;
      v24[3] = v27;
      *v24 = v25;
      v24[1] = v26;
      ++*(_QWORD *)(a1 + 224);
      v28 = (unint64_t *)(a1 + 232);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 + 1, v28));
      v30 = CVPixelBufferGetDataSize(pixelBuffer[0]);
      v31 = (unint64_t *)(a1 + 240);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + v30, v31));
      v33 = "HGPool::releaseObject() - Attempting to double-release a free object: <%p>";
      v19 = pixelBuffer[0];
    }
    else
    {
      v33 = "HGPool::releaseObject() - Attempting to release an unmanaged object: <%p>";
    }
    HGLogger::warning((HGLogger *)v33, v17, v18, v19);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  kdebug_trace();
  std::mutex::unlock(v3);
}

void sub_1B29BFEA0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B29BFEB4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void HGCVPixelBuffer::~HGCVPixelBuffer(HGCVPixelBuffer *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E6513EB8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
      HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::releaseObject(*(_QWORD *)(v3 + 16), v2);
    else
      CVPixelBufferRelease(*((CVPixelBufferRef *)this + 3));
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  HGObject::~HGObject((HGObject *)this);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_QWORD *)this = off_1E6513EB8;
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
      HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::releaseObject(*(_QWORD *)(v3 + 16), v2);
    else
      CVPixelBufferRelease(*((CVPixelBufferRef *)this + 3));
  }
  v4 = *((_QWORD *)this + 2);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  HGObject::~HGObject((HGObject *)this);
  HGObject::operator delete(v5);
}

void HGCVPixelBuffer::create(HGCVPixelBuffer *this@<X0>, HGObject **a2@<X8>)
{
  HGObject *v5;

  *a2 = 0;
  if (this)
  {
    CVPixelBufferRetain((CVPixelBufferRef)this);
    v5 = (HGObject *)HGObject::operator new(0x20uLL);
    HGObject::HGObject(v5);
    *(_QWORD *)v5 = off_1E6513EB8;
    *((_QWORD *)v5 + 2) = 0;
    *((_QWORD *)v5 + 3) = this;
    *a2 = v5;
  }
}

void sub_1B29BFFFC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HGCVPixelBuffer::convert(HGCVPixelBuffer *this@<X0>, HGObject **a2@<X8>)
{
  HGObject *v5;

  *a2 = 0;
  if (this)
  {
    v5 = (HGObject *)HGObject::operator new(0x20uLL);
    HGObject::HGObject(v5);
    *(_QWORD *)v5 = off_1E6513EB8;
    *((_QWORD *)v5 + 2) = 0;
    *((_QWORD *)v5 + 3) = this;
    *a2 = v5;
  }
}

void sub_1B29C0064(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HGCVPixelBuffer::create(HGCVPixelBuffer *this@<X0>, size_t a2@<X1>, OSType a3@<W2>, int a4@<W3>, HGObject **a5@<X8>)
{
  CVPixelBufferRef CVPixelBuffer;
  CVPixelBufferRef v7;
  HGObject *v8;

  *a5 = 0;
  if (CVPixelBuffer)
  {
    v7 = CVPixelBuffer;
    v8 = (HGObject *)HGObject::operator new(0x20uLL);
    HGObject::HGObject(v8);
    *(_QWORD *)v8 = off_1E6513EB8;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = v7;
    *a5 = v8;
  }
}

void sub_1B29C00D0(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void HGCVPixelBuffer::create(HGCVPixelBuffer *this@<X0>, size_t a2@<X1>, OSType a3@<W2>, HGObject **a4@<X8>)
{
  CVPixelBufferRef CVPixelBuffer;
  CVPixelBufferRef v6;
  HGObject *v7;

  *a4 = 0;
  if (CVPixelBuffer)
  {
    v6 = CVPixelBuffer;
    v7 = (HGObject *)HGObject::operator new(0x20uLL);
    HGObject::HGObject(v7);
    *(_QWORD *)v7 = off_1E6513EB8;
    *((_QWORD *)v7 + 2) = 0;
    *((_QWORD *)v7 + 3) = v6;
    *a4 = v7;
  }
}

void sub_1B29C0140(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

CVPixelBufferRef `anonymous namespace'::_allocateCVPixelBuffer(_anonymous_namespace_ *this, size_t a2, OSType a3, int a4)
{
  void **v8;
  CFDictionaryRef v9;
  void *v10;
  const __CFDictionary *v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  unsigned __int8 v15;
  CVPixelBufferRef v16;
  CVPixelBufferRef pixelBufferOut;
  _BYTE v19[16];
  void *v20;
  void *v21;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  HGTraceGuard::HGTraceGuard((HGTraceGuard *)v19, "hgcv", 1, "allocateCVPixelBuffer()");
  keys[0] = *(void **)MEMORY[0x1E0CBC078];
  v8 = (void **)MEMORY[0x1E0C9AE50];
  if (!a4)
    v8 = (void **)MEMORY[0x1E0C9AE40];
  values = *v8;
  v9 = CFDictionaryCreate(0, (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v10 = (void *)*MEMORY[0x1E0CA8FF0];
  v20 = v9;
  v21 = v10;
  v11 = CFDictionaryCreate(0, (const void **)&v21, (const void **)&v20, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  pixelBufferOut = 0;
  v12 = CVPixelBufferCreate(0, (size_t)this, a2, a3, v11, &pixelBufferOut);
  if ((_DWORD)v12)
  {
    v15 = atomic_load(HGLogger::_enabled);
    if ((v15 & 1) != 0)
      HGLogger::log((HGLogger *)"hgcv", (const char *)1, (HGLogger *)" **** CVPixelBufferRef() error! booo! (%d)\n", v13, v14, v12);
    pixelBufferOut = 0;
  }
  CFRelease(v9);
  CFRelease(v11);
  v16 = pixelBufferOut;
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)v19);
  return v16;
}

void sub_1B29C02E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B29C02F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

void sub_1B29C0310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  HGTraceGuard::~HGTraceGuard((HGTraceGuard *)va);
  _Unwind_Resume(a1);
}

const char *HGCVPixelBuffer::create@<X0>(_anonymous_namespace_ *this@<X1>, const char **a2@<X0>, char *a3@<X2>, OSType a4@<W3>, char a5@<W4>, HGObject **a6@<X8>)
{
  const char *v8;
  const char *v9;
  char *v10;
  CVPixelBufferRef CVPixelBuffer;
  HGObject *v12;
  const char *result;
  _QWORD v14[2];
  OSType v15;
  char v16;

  *a6 = 0;
  if (!this || !a3)
    return HGLogger::warning((HGLogger *)"HGCVPixelBuffer::create() failed. Invalid size (width == 0 || height == 0).", (const char *)this, a3);
  v8 = *a2;
  if (!*a2)
  {
    if (CVPixelBuffer)
      goto LABEL_5;
    return HGLogger::warning((HGLogger *)"HGCVPixelBuffer::create() failed. Could not allocate CVPixelBuffer.", v9, v10);
  }
  v14[0] = this;
  v14[1] = a3;
  v15 = a4;
  v16 = a5;
  CVPixelBuffer = HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::newObject(*((_QWORD *)v8 + 2), (uint64_t)v14, 0);
  if (!CVPixelBuffer)
    return HGLogger::warning((HGLogger *)"HGCVPixelBuffer::create() failed. Could not allocate CVPixelBuffer.", v9, v10);
LABEL_5:
  v12 = (HGObject *)HGObject::operator new(0x20uLL);
  HGObject::HGObject(v12);
  *(_QWORD *)v12 = off_1E6513EB8;
  result = *a2;
  *((_QWORD *)v12 + 2) = *a2;
  if (result)
    result = (const char *)(*(uint64_t (**)(const char *))(*(_QWORD *)result + 16))(result);
  *((_QWORD *)v12 + 3) = CVPixelBuffer;
  *a6 = v12;
  return result;
}

void sub_1B29C0420(_Unwind_Exception *a1)
{
  HGObject *v1;
  void *v3;

  HGObject::~HGObject(v1);
  HGObject::operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B29C0438(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

const char *HGCVPixelBuffer::create@<X0>(const char **a1@<X0>, _anonymous_namespace_ *a2@<X1>, char *a3@<X2>, OSType a4@<W3>, HGObject **a5@<X8>)
{
  return HGCVPixelBuffer::create(a2, a1, a3, a4, 1, a5);
}

size_t HGCVPixelBuffer::w(HGCVPixelBuffer *this, size_t a2)
{
  size_t PlaneCount;
  __CVBuffer *v5;
  OSType PixelFormatType;
  __CVBuffer *v7;

  PlaneCount = CVPixelBufferGetPlaneCount(*((CVPixelBufferRef *)this + 3));
  v5 = (__CVBuffer *)*((_QWORD *)this + 3);
  if (!PlaneCount)
    return CVPixelBufferGetWidth(v5);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v5);
  v7 = (__CVBuffer *)*((_QWORD *)this + 3);
  if (PixelFormatType == 1647392369)
    return CVPixelBufferGetWidth(v7) >> 1;
  else
    return CVPixelBufferGetWidthOfPlane(v7, a2);
}

size_t HGCVPixelBuffer::h(HGCVPixelBuffer *this, size_t a2)
{
  size_t PlaneCount;
  __CVBuffer *v5;
  OSType PixelFormatType;
  __CVBuffer *v7;

  PlaneCount = CVPixelBufferGetPlaneCount(*((CVPixelBufferRef *)this + 3));
  v5 = (__CVBuffer *)*((_QWORD *)this + 3);
  if (!PlaneCount)
    return CVPixelBufferGetHeight(v5);
  PixelFormatType = CVPixelBufferGetPixelFormatType(v5);
  v7 = (__CVBuffer *)*((_QWORD *)this + 3);
  if (PixelFormatType == 1647392369)
    return CVPixelBufferGetHeight(v7) >> 1;
  else
    return CVPixelBufferGetHeightOfPlane(v7, a2);
}

size_t HGCVPixelBuffer::rowBytes(HGCVPixelBuffer *this, size_t a2)
{
  size_t PlaneCount;
  __CVBuffer *v5;

  PlaneCount = CVPixelBufferGetPlaneCount(*((CVPixelBufferRef *)this + 3));
  v5 = (__CVBuffer *)*((_QWORD *)this + 3);
  if (PlaneCount)
    return CVPixelBufferGetBytesPerRowOfPlane(v5, a2);
  else
    return CVPixelBufferGetBytesPerRow(v5);
}

BOOL HGCVPixelBuffer::lock(HGCVPixelBuffer *this, CVPixelBufferLockFlags lockFlags)
{
  return CVPixelBufferLockBaseAddress(*((CVPixelBufferRef *)this + 3), lockFlags) == 0;
}

BOOL HGCVPixelBuffer::unlock(HGCVPixelBuffer *this, CVPixelBufferLockFlags unlockFlags)
{
  return CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 3), unlockFlags) == 0;
}

void *HGCVPixelBuffer::ptr(HGCVPixelBuffer *this, size_t a2)
{
  size_t PlaneCount;
  __CVBuffer *v5;

  PlaneCount = CVPixelBufferGetPlaneCount(*((CVPixelBufferRef *)this + 3));
  v5 = (__CVBuffer *)*((_QWORD *)this + 3);
  if (PlaneCount)
    return CVPixelBufferGetBaseAddressOfPlane(v5, a2);
  else
    return CVPixelBufferGetBaseAddress(v5);
}

void HGCVPixelBufferPoolImpl::~HGCVPixelBufferPoolImpl(HGCVPixelBufferPoolImpl *this, HGPool::BasePool *a2)
{
  HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::~Pool((uint64_t)this, a2);
  JUMPOUT(0x1B5E29170);
}

unint64_t HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::usedObjectsCount(uint64_t a1)
{
  return atomic_load((unint64_t *)(a1 + 128));
}

unint64_t HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::usedTotalUsage(uint64_t a1)
{
  return atomic_load((unint64_t *)(a1 + 136));
}

unint64_t HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::freeObjectsCount(uint64_t a1)
{
  return atomic_load((unint64_t *)(a1 + 232));
}

unint64_t HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::freeTotalUsage(uint64_t a1)
{
  return atomic_load((unint64_t *)(a1 + 240));
}

void HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::service(uint64_t a1)
{
  std::mutex *v2;

  v2 = (std::mutex *)(a1 + 256);
  std::mutex::lock((std::mutex *)(a1 + 256));
  if (HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::service((int64x2_t *)(a1 + 152), a1))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    kdebug_trace();
  }
  std::mutex::unlock(v2);
}

void sub_1B29C071C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::trace(std::mutex *a1)
{
  std::mutex *v2;
  std::mutex *sig;

  v2 = a1 + 4;
  std::mutex::lock(a1 + 4);
  sig = a1 + 5;
  if (a1[5].__m_.__opaque[15] < 0)
    sig = (std::mutex *)sig->__m_.__sig;
  (*(void (**)(std::mutex *, std::mutex *))(a1->__m_.__sig + 24))(a1, sig);
  (*(void (**)(std::mutex *))(a1->__m_.__sig + 16))(a1);
  (*(void (**)(std::mutex *))(a1->__m_.__sig + 40))(a1);
  (*(void (**)(std::mutex *))(a1->__m_.__sig + 32))(a1);
  std::mutex::unlock(v2);
}

void sub_1B29C0908(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B29C091C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B29C0930(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1B29C0944(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::log(uint64_t a1, const char *a2)
{
  HGLogger *v3;
  const char *v4;
  char *v5;
  unsigned __int8 v6;
  _QWORD *v7;
  const char *v8;
  char *v9;
  unsigned __int8 v10;
  const char *v11;
  char *v12;
  unsigned __int8 v13;

  v3 = (HGLogger *)(a1 + 344);
  if (*(char *)(a1 + 367) < 0)
  {
    v3 = *(HGLogger **)v3;
    if ((int)HGLogger::getLevel(v3, a2) < 2)
      return;
  }
  else if ((int)HGLogger::getLevel((HGLogger *)(a1 + 344), a2) < 2)
  {
    return;
  }
  std::mutex::lock((std::mutex *)(a1 + 256));
  v6 = atomic_load(HGLogger::_enabled);
  if ((v6 & 1) != 0)
  {
    v7 = (_QWORD *)(a1 + 320);
    if (*(char *)(a1 + 343) < 0)
      v7 = (_QWORD *)*v7;
    HGLogger::log(v3, (const char *)2, (HGLogger *)"pool '%s' (%p)\n", v4, v5, v7, a1);
  }
  HGLogger::indent(1);
  v10 = atomic_load(HGLogger::_enabled);
  if ((v10 & 1) != 0)
    HGLogger::log(v3, (const char *)2, (HGLogger *)"live objects:\n", v8, v9);
  HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,true>::log((_QWORD *)(a1 + 48), v3);
  v13 = atomic_load(HGLogger::_enabled);
  if ((v13 & 1) != 0)
    HGLogger::log(v3, (const char *)2, (HGLogger *)"free objects:\n", v11, v12);
  HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::log((_QWORD *)(a1 + 152), v3);
  HGLogger::indent(0xFFFFFFFFLL);
  std::mutex::unlock((std::mutex *)(a1 + 256));
}

void sub_1B29C0A70(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::canService(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 372);
}

uint64_t HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::canTrace(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 373);
}

uint64_t HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::canLog(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 374);
}

void HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::~Pool(uint64_t a1, HGPool::BasePool *a2)
{
  HGPool::Pool<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::~Pool(a1, a2);
  JUMPOUT(0x1B5E29170);
}

int64x2_t *HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::~List(int64x2_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  while (a1[4].i64[1])
    HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::_pop_front(a1);
  std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::~deque[abi:ne180100]((uint64_t)a1[2].i64);
  v2 = (std::__shared_weak_count *)a1[1].i64[1];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (std::__shared_weak_count *)a1->i64[1];
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

uint64_t HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::_pop_front(int64x2_t *a1)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unint64_t *v6;
  unint64_t v7;
  size_t DataSize;
  unint64_t *v9;
  unint64_t v10;
  void **v11;
  int64x2_t v12;
  CVPixelBufferRef pixelBuffer[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = (__int128 *)(*(_QWORD *)(a1[2].i64[1] + (((unint64_t)a1[4].i64[0] >> 3) & 0x1FFFFFFFFFFFFFF8))
                  + ((a1[4].i64[0] & 0x3F) << 6));
  v3 = v2[3];
  v5 = *v2;
  v4 = v2[1];
  v16 = v2[2];
  v17 = v3;
  *(_OWORD *)pixelBuffer = v5;
  v15 = v4;
  v6 = (unint64_t *)&a1[5];
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  DataSize = CVPixelBufferGetDataSize(pixelBuffer[0]);
  v9 = &a1[5].u64[1];
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - DataSize, v9));
  v11 = (void **)a1[2].i64[1];
  v12 = vaddq_s64(a1[4], (int64x2_t)xmmword_1B304F0B0);
  a1[4] = v12;
  if (v12.i64[0] >= 0x80uLL)
  {
    operator delete(*v11);
    a1[2].i64[1] += 8;
    a1[4].i64[0] -= 64;
  }
  HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::deleted((uint64_t)pixelBuffer);
  kdebug_trace();
  kdebug_trace();
  (*(void (**)(uint64_t, CVPixelBufferRef))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0], pixelBuffer[0]);
  if (pixelBuffer[1])
    (*(void (**)(uint64_t))(*(_QWORD *)a1->i64[0] + 24))(a1->i64[0]);
  return kdebug_trace();
}

void sub_1B29C0CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11)
{
  HGSignPost::EventScopeGuard::~EventScopeGuard((HGSignPost::EventScopeGuard *)&a11);
  _Unwind_Resume(a1);
}

void HGSignPost::EventScopeGuard::~EventScopeGuard(HGSignPost::EventScopeGuard *this)
{
  kdebug_trace();
}

uint64_t HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::deleted(uint64_t a1)
{
  __IOSurface *IOSurface;
  const char *ID;
  char *v4;
  unsigned __int8 v5;
  unsigned __int8 v7;
  void *__p;
  char v9;

  CVPixelBufferGetDataSize(*(CVPixelBufferRef *)a1);
  HGPool::DescriptorString<HGCVPixelBufferPool::Descriptor>::str((_BYTE *)(a1 + 16));
  IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)a1);
  ID = (const char *)IOSurfaceGetID(IOSurface);
  if (v9 < 0)
  {
    operator delete(__p);
    v7 = atomic_load(HGLogger::_enabled);
    if ((v7 & 1) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = atomic_load(HGLogger::_enabled);
  if ((v5 & 1) != 0)
LABEL_3:
    HGLogger::log((HGLogger *)"hgcv", (const char *)1, (HGLogger *)"HGCV - deleted entry: \n", ID, v4);
LABEL_4:
  HGLogger::indent(1);
  HGPool::EntryLog<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::log(a1, (HGLogger *)"hgcv", (const char *)1);
  return HGLogger::indent(0xFFFFFFFFLL);
}

void sub_1B29C0E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HGPool::DescriptorString<HGCVPixelBufferPool::Descriptor>::str(_BYTE *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  char v16;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v12);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" x ", 3);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  v16 = a1[19];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v16, 1);
  v16 = a1[18];
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v16, 1);
  v16 = a1[17];
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v16, 1);
  v16 = a1[16];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v16, 1);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", PSC:", 6);
  if (a1[20])
    v9 = "Y";
  else
    v9 = "N";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, 1);
  std::stringbuf::str();
  v12[0] = *MEMORY[0x1E0DE4F50];
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v13[0] = v10;
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E290BC](&v15);
}

void sub_1B29C0FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void HGPool::EntryLog<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::log(uint64_t a1, HGLogger *a2, const char *a3)
{
  CVPixelBufferRef v6;
  _BYTE *v7;
  HGLoggerUtils *DataSize;
  const char *v9;
  char *v10;
  unsigned __int8 v11;
  void **v12;
  void **v13;
  std::chrono::steady_clock::time_point v14;
  const char *v15;
  char *v16;
  unsigned __int8 v17;
  void **v18;
  void *p_p;
  void **v20;
  void *__p;
  char v22;
  void *v23[2];
  char v24;
  void *v25[2];
  char v26;

  v7 = (_BYTE *)(a1 + 16);
  v6 = *(CVPixelBufferRef *)a1;
  DataSize = (HGLoggerUtils *)CVPixelBufferGetDataSize(*(CVPixelBufferRef *)a1);
  HGLoggerUtils::bytesPrettyString(DataSize);
  HGPool::DescriptorString<HGCVPixelBufferPool::Descriptor>::str(v7);
  if (*(_BYTE *)(a1 + 56))
  {
    v11 = atomic_load(HGLogger::_enabled);
    if ((v11 & 1) != 0)
    {
      v12 = v25;
      if (v26 < 0)
        v12 = (void **)v25[0];
      v13 = v23;
      if (v24 < 0)
        v13 = (void **)v23[0];
      HGLogger::log(a2, a3, (HGLogger *)"%p %10s  %4lu   %s\n", v9, v10, v6, v12, *(_QWORD *)(a1 + 48), v13);
    }
    goto LABEL_17;
  }
  v14.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  HGLoggerUtils::timePrettyString((HGLoggerUtils *)(v14.__d_.__rep_ - *(_QWORD *)(a1 + 40)));
  v17 = atomic_load(HGLogger::_enabled);
  if ((v17 & 1) != 0)
  {
    v18 = v25;
    if (v26 < 0)
      v18 = (void **)v25[0];
    p_p = &__p;
    if (v22 < 0)
      p_p = __p;
    v20 = v23;
    if (v24 < 0)
      v20 = (void **)v23[0];
    HGLogger::log(a2, a3, (HGLogger *)"%p %10s  %4lu  %10s   %s\n", v15, v16, v6, v18, *(_QWORD *)(a1 + 48), p_p, v20);
  }
  if ((v22 & 0x80000000) == 0)
  {
LABEL_17:
    if ((v24 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_21;
  }
  operator delete(__p);
  if ((v24 & 0x80000000) == 0)
  {
LABEL_18:
    if ((v26 & 0x80000000) == 0)
      return;
LABEL_22:
    operator delete(v25[0]);
    return;
  }
LABEL_21:
  operator delete(v23[0]);
  if (v26 < 0)
    goto LABEL_22;
}

void sub_1B29C1188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a19 < 0)
  {
    operator delete(__p);
    if ((a25 & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v25 - 49) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a25 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a20);
  if ((*(char *)(v25 - 49) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)(v25 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 32;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 64;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_emplace<HGPool::FixedServicingPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6513FD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<HGPool::FixedServicingPolicy>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6513FD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<HGPool::FixedServicingPolicy>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void HGPool::FixedServicingPolicy::~FixedServicingPolicy(HGPool::FixedServicingPolicy *this)
{
  JUMPOUT(0x1B5E29170);
}

void std::__shared_ptr_emplace<`anonymous namespace'::HGCVPixelBufferAllocator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6514080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::HGCVPixelBufferAllocator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E6514080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::HGCVPixelBufferAllocator>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::HGCVPixelBufferAllocator::~HGCVPixelBufferAllocator(_anonymous_namespace_::HGCVPixelBufferAllocator *this)
{
  JUMPOUT(0x1B5E29170);
}

CVPixelBufferRef `anonymous namespace'::HGCVPixelBufferAllocator::allocate(uint64_t a1, uint64_t a2)
{
}

void `anonymous namespace'::HGCVPixelBufferAllocator::release(_anonymous_namespace_::HGCVPixelBufferAllocator *this, CVPixelBufferRef texture)
{
  CVPixelBufferRelease(texture);
}

_QWORD *HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::retrieveObject@<X0>(int64x2_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  _BYTE v19[24];
  _BYTE *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v21 = *a2;
  v22 = *((_QWORD *)a2 + 2);
  v14 = 0;
  v15 = v21;
  v16 = v22;
  v18 = 0;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)v6 = &off_1E6514128;
  *((_QWORD *)v6 + 4) = 0;
  *(_OWORD *)(v6 + 40) = *a2;
  *((_QWORD *)v6 + 7) = *((_QWORD *)a2 + 2);
  v18 = v6;
  HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::_retrieve(a1, v17, a3);
  v7 = v18;
  if (v18 == v17)
  {
    v8 = 4;
    v7 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  result = v20;
  if (v20 == v19)
  {
    v12 = 4;
    result = v19;
  }
  else
  {
    if (!v20)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_1B29C1504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22,uint64_t a23,char *a24)
{
  char *v24;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v26 = a20;
  if (a20 == v24)
  {
    v27 = 4;
    v26 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_6;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_6:
  v28 = a13;
  if (a13 == &a10)
  {
    v29 = 4;
    v28 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_11:
  v30 = a24;
  if (a24 == &a21)
  {
    v31 = 4;
    v30 = &a21;
  }
  else
  {
    if (!a24)
      goto LABEL_16;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void **HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::_retrieve@<X0>(int64x2_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  size_t DataSize;
  unint64_t *v27;
  unint64_t v28;
  _BYTE v29[24];
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_BYTE *)(a3 + 36) = 1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 1;
  v5 = a1[4].i64[0] + a1[4].i64[1];
  v6 = a1[2].i64[1];
  v7 = (uint64_t *)(v6 + 8 * (v5 >> 6));
  if (a1[3].i64[0] != v6)
  {
    v8 = *v7 + ((v5 & 0x3F) << 6);
    v9 = *(_QWORD *)(v6 + (((unint64_t)a1[4].i64[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((a1[4].i64[0] & 0x3F) << 6);
    v10 = (_QWORD *)a2[3];
    if (v10)
      goto LABEL_3;
LABEL_6:
    v30 = 0;
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  v10 = (_QWORD *)a2[3];
  if (!v10)
    goto LABEL_6;
LABEL_3:
  if (v10 == a2)
  {
    v30 = (void **)v29;
    (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v29);
  }
  else
  {
    v30 = (void **)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
  }
LABEL_8:
  if (v8 != v9)
  {
    v11 = *v7;
    while (1)
    {
      v12 = v8;
      if (v8 == v11)
        v12 = *(v7 - 1) + 4096;
      if (!v30)
        std::__throw_bad_function_call[abi:ne180100]();
      if (((*((uint64_t (**)(void **, uint64_t))*v30 + 6))(v30, v12 - 64) & 1) != 0)
        break;
      v11 = *v7;
      if (v8 == *v7)
      {
        v13 = *--v7;
        v11 = v13;
        v8 = v13 + 4096;
      }
      v8 -= 64;
      if (v8 == v9)
      {
        v8 = v9;
        break;
      }
    }
  }
  result = v30;
  if (v30 == (void **)v29)
  {
    v15 = 4;
    result = (void **)v29;
  }
  else
  {
    if (!v30)
      goto LABEL_23;
    v15 = 5;
  }
  result = (void **)(*((uint64_t (**)(void))*result + v15))();
LABEL_23:
  v16 = a1[2].i64[1];
  if (a1[3].i64[0] == v16)
  {
    if (!v8)
      return result;
  }
  else if (v8 == *(_QWORD *)(v16 + (((unint64_t)a1[4].i64[0] >> 3) & 0x1FFFFFFFFFFFFFF8))
                + ((a1[4].i64[0] & 0x3F) << 6))
  {
    return result;
  }
  v17 = v8 - *v7;
  v18 = v17 >> 6;
  if (v17 < 65)
  {
    v22 = 64 - v18;
    v20 = (char *)&v7[-(v22 >> 6)];
    v21 = *(_QWORD *)v20 + ((unint64_t)(~(_BYTE)v22 & 0x3F) << 6);
  }
  else
  {
    v19 = v18 - 1;
    v20 = (char *)&v7[v19 >> 6];
    v21 = *(_QWORD *)v20 + ((v19 & 0x3F) << 6);
  }
  v23 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v21;
  *(_OWORD *)(a3 + 16) = v23;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(a3 + 41) = *(_OWORD *)(v21 + 41);
  v24 = (unint64_t *)&a1[5];
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  DataSize = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)a3);
  v27 = &a1[5].u64[1];
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - DataSize, v27));
  return std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::erase(a1 + 2, v20, (char *)v21);
}

void sub_1B29C1848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(exception_object);
}

void **std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::erase(int64x2_t *a1, char *a2, char *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  const void **v15;
  char v16;
  const void **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const void **v21;
  char *v22;
  unint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  const void **v29;
  _BYTE *v30;
  char v31;
  const void **v32;
  _BYTE *v33;
  uint64_t v34;
  unint64_t v35;
  int64x2_t v36;
  unint64_t v37;
  void **v38;
  void **result;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  const void **v46[4];

  v6 = a1[2].u64[0];
  v7 = a1->i64[1];
  v8 = a1[1].i64[0];
  v9 = (const void **)(v7 + 8 * (v6 >> 6));
  if (v8 != v7)
  {
    v10 = (char *)*v9 + 64 * (a1[2].i64[0] & 0x3F);
    if (a3 != v10)
      goto LABEL_3;
LABEL_7:
    v14 = 0;
    v12 = *v9;
    goto LABEL_8;
  }
  v10 = 0;
  if (!a3)
    goto LABEL_7;
LABEL_3:
  v11 = ((uint64_t)&a3[-*(_QWORD *)a2] >> 6) + 8 * (a2 - (char *)v9);
  v12 = *v9;
  v13 = v10 - (_BYTE *)*v9;
  v14 = v11 - (v13 >> 6);
  if (v11 != v13 >> 6)
  {
    if (v11 < 1)
    {
      v23 = 63 - v11;
      LOBYTE(v11) = ~(63 - v11);
      v15 = &v9[-(v23 >> 6)];
    }
    else
    {
      v15 = &v9[(unint64_t)v11 >> 6];
    }
    v24 = *v15;
    v17 = (const void **)((char *)*v15 + 64 * (unint64_t)(v11 & 0x3F));
    v25 = a1[2].i64[1];
    if (v14 > (unint64_t)(v25 - 1) >> 1)
    {
      v26 = (char *)v17 - v24;
      v27 = ((char *)v17 - v24) >> 6;
      if (v26 < -63)
      {
        v42 = 62 - v27;
        v29 = &v15[-(v42 >> 6)];
        v30 = (char *)*v29 + 64 * (unint64_t)(~(_BYTE)v42 & 0x3F);
        v31 = v25 + v6;
        v32 = (const void **)(v7 + 8 * ((v25 + v6) >> 6));
        if (v8 != v7)
          goto LABEL_14;
      }
      else
      {
        v28 = v27 + 1;
        v29 = &v15[v28 >> 6];
        v30 = (char *)*v29 + 64 * (v28 & 0x3F);
        v31 = v25 + v6;
        v32 = (const void **)(v7 + 8 * ((v25 + v6) >> 6));
        if (v8 != v7)
        {
LABEL_14:
          v33 = (char *)*v32 + 64 * (unint64_t)(v31 & 0x3F);
LABEL_28:
          v46[0] = v15;
          v46[1] = v17;
          std::__for_each_segment[abi:ne180100]<std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>,std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>>>(v29, v30, v32, v33, (uint64_t)v46);
          v38 = (void **)a1->i64[1];
          v43 = (void **)a1[1].i64[0];
          v37 = a1[2].u64[0];
          v44 = a1[2].i64[1];
          a1[2].i64[1] = v44 - 1;
          v45 = 8 * ((char *)v43 - (char *)v38) - 1;
          if (v43 == v38)
            v45 = 0;
          if (v45 - (v44 + v37) + 1 >= 0x80)
          {
            operator delete(*(v43 - 1));
            v16 = 0;
            v38 = (void **)a1->i64[1];
            a1[1].i64[0] -= 8;
            v37 = a1[2].u64[0];
          }
          else
          {
            v16 = 0;
          }
          goto LABEL_19;
        }
      }
      v33 = 0;
      goto LABEL_28;
    }
    v16 = 0;
    v34 = (char *)v17 - v24;
    v19 = ((char *)v17 - v24) >> 6;
    if (v34 < -63)
      goto LABEL_16;
LABEL_9:
    v20 = v19 + 1;
    v21 = &v15[v20 >> 6];
    v22 = (char *)*v21 + 64 * (v20 & 0x3F);
    goto LABEL_17;
  }
LABEL_8:
  v16 = 1;
  v15 = (const void **)(v7 + 8 * (v6 >> 6));
  v17 = (const void **)v10;
  v18 = v10 - v12;
  v19 = (v10 - v12) >> 6;
  if (v18 >= -63)
    goto LABEL_9;
LABEL_16:
  v35 = 62 - v19;
  v21 = &v15[-(v35 >> 6)];
  v22 = (char *)*v21 + 64 * (unint64_t)(~(_BYTE)v35 & 0x3F);
LABEL_17:
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>,std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>,0>(v9, v10, v15, (char *)v17, v21, v22, v46);
  v36 = vaddq_s64(a1[2], (int64x2_t)xmmword_1B304F0B0);
  a1[2] = v36;
  v37 = v36.i64[0];
  v38 = (void **)a1->i64[1];
  if (v36.i64[0] >= 0x80uLL)
  {
    operator delete(*v38);
    v38 = (void **)(a1->i64[1] + 8);
    a1->i64[1] = (uint64_t)v38;
    v37 = a1[2].i64[0] - 64;
    a1[2].i64[0] = v37;
  }
LABEL_19:
  result = &v38[v37 >> 6];
  if ((void **)a1[1].i64[0] == v38)
  {
    v40 = 0;
    if ((v16 & 1) != 0)
      return result;
  }
  else
  {
    v40 = (unint64_t)*result + 64 * (v37 & 0x3F);
    if ((v16 & 1) != 0)
      return result;
  }
  v41 = v14 + ((uint64_t)(v40 - (_QWORD)*result) >> 6);
  if (v41 < 1)
    result -= (unint64_t)(63 - v41) >> 6;
  else
    result += (unint64_t)v41 >> 6;
  return result;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>,std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>,0>@<X0>(const void **a1@<X1>, char *a2@<X2>, const void **a3@<X3>, char *a4@<X4>, const void **a5@<X5>, char *a6@<X6>, const void ***a7@<X8>)
{
  const void **v8;
  _BYTE *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *result;
  uint64_t v20;
  char *v21;
  const void **v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;

  v8 = a5;
  if (a1 == a3)
  {
    if (a2 == a4)
      goto LABEL_42;
    v35 = (uint64_t)*a5;
    v36 = a4;
    while (1)
    {
      v37 = (uint64_t)&a6[-v35] >> 6;
      v38 = (v36 - a2) >> 6;
      if (v38 >= v37)
        v38 = v37;
      v36 -= 64 * v38;
      a6 -= 64 * v38;
      if (v38)
        result = memmove(a6, v36, (v38 << 6) - 7);
      if (v36 == a2)
        break;
      v39 = (uint64_t)*--v8;
      v35 = v39;
      a6 = (char *)(v39 + 4096);
    }
    goto LABEL_40;
  }
  v14 = *a3;
  if (*a3 != a4)
  {
    v15 = (uint64_t)*a5;
    v16 = a4;
    while (1)
    {
      v17 = (uint64_t)&a6[-v15] >> 6;
      v18 = (v16 - v14) >> 6;
      if (v18 >= v17)
        v18 = v17;
      v16 -= 64 * v18;
      a6 -= 64 * v18;
      if (v18)
        result = memmove(a6, v16, (v18 << 6) - 7);
      if (v16 == v14)
        break;
      v20 = (uint64_t)*--v8;
      v15 = v20;
      a6 = (char *)(v20 + 4096);
    }
    if ((char *)*v8 + 4096 == a6)
    {
      v21 = (char *)v8[1];
      ++v8;
      a6 = v21;
    }
  }
  v22 = a3 - 1;
  if (a3 - 1 != a1)
  {
    v23 = (char *)*v8;
    do
    {
      while (1)
      {
        v24 = *v22;
        v25 = (char *)*v22 + 4096;
        while (1)
        {
          v26 = (a6 - v23) >> 6;
          v27 = (v25 - v24) >> 6;
          if (v27 >= v26)
            v27 = v26;
          v25 -= 64 * v27;
          a6 -= 64 * v27;
          if (v27)
            result = memmove(a6, v25, (v27 << 6) - 7);
          if (v25 == v24)
            break;
          v28 = (char *)*--v8;
          v23 = v28;
          a6 = v28 + 4096;
        }
        v23 = (char *)*v8;
        if ((char *)*v8 + 4096 == a6)
          break;
        if (--v22 == a1)
          goto LABEL_24;
      }
      v29 = (char *)v8[1];
      ++v8;
      v23 = v29;
      a6 = v29;
      --v22;
    }
    while (v22 != a1);
  }
LABEL_24:
  v30 = (char *)*a1 + 4096;
  if (v30 != a2)
  {
    v31 = (uint64_t)*v8;
    while (1)
    {
      v32 = (uint64_t)&a6[-v31] >> 6;
      v33 = (v30 - a2) >> 6;
      if (v33 >= v32)
        v33 = v32;
      v30 -= 64 * v33;
      a6 -= 64 * v33;
      if (v33)
        result = memmove(a6, v30, (v33 << 6) - 7);
      if (v30 == a2)
        break;
      v34 = (uint64_t)*--v8;
      v31 = v34;
      a6 = (char *)(v34 + 4096);
    }
LABEL_40:
    if ((char *)*v8 + 4096 == a6)
    {
      v40 = (char *)v8[1];
      ++v8;
      a6 = v40;
    }
  }
LABEL_42:
  *a7 = a3;
  a7[1] = (const void **)a4;
  a7[2] = v8;
  a7[3] = (const void **)a6;
  return result;
}

const void **std::__for_each_segment[abi:ne180100]<std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>,std::__move_loop<std::_ClassicAlgPolicy>::_MoveSegment<std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>,std::__deque_iterator<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>*,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>&,HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>**,long,64l>>>(const void **result, _BYTE *__src, const void **a3, _BYTE *a4, uint64_t a5)
{
  _BYTE *v7;
  char *v8;
  void **v9;
  const void **v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const void **i;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void **v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void **v32;
  _BYTE *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;

  v7 = __src;
  v9 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (result != a3)
  {
    v11 = result;
    v12 = (char *)*result + 4096;
    if (v12 != __src)
    {
      v14 = (char *)*v9++;
      v13 = v14;
      while (1)
      {
        v15 = (v13 - v8 + 4096) >> 6;
        if ((v12 - v7) >> 6 >= v15)
          v16 = v15;
        else
          v16 = (v12 - v7) >> 6;
        if (v16)
          result = (const void **)memmove(v8, v7, (v16 << 6) - 7);
        v7 += 64 * v16;
        if (v7 == v12)
          break;
        v17 = (char *)*v9++;
        v13 = v17;
        v8 = v17;
      }
      v8 += 64 * v16;
      if ((char *)*(v9 - 1) + 4096 == v8)
      {
        v8 = (char *)*v9;
        *(_QWORD *)a5 = v9;
        *(_QWORD *)(a5 + 8) = v8;
        i = v11 + 1;
        if (v11 + 1 != a3)
          goto LABEL_16;
LABEL_39:
        v33 = *a3;
        if (v33 == a4)
          goto LABEL_50;
        v35 = (char *)*v9++;
        v34 = v35;
        while (1)
        {
          v36 = (v34 - v8 + 4096) >> 6;
          v37 = (a4 - v33) >> 6 >= v36 ? v36 : (a4 - v33) >> 6;
          if (v37)
            result = (const void **)memmove(v8, v33, (v37 << 6) - 7);
          v33 += 64 * v37;
          if (v33 == a4)
            break;
          v38 = (char *)*v9++;
          v34 = v38;
          v8 = v38;
        }
        v8 += 64 * v37;
        v32 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8)
        {
LABEL_49:
          v9 = v32;
          goto LABEL_50;
        }
        goto LABEL_37;
      }
      --v9;
    }
    *(_QWORD *)a5 = v9;
    *(_QWORD *)(a5 + 8) = v8;
    for (i = v11 + 1; i != a3; ++i)
    {
LABEL_16:
      while (1)
      {
        v19 = 0;
        v20 = (char *)*i;
        v22 = (char *)*v9++;
        v21 = v22;
        while (1)
        {
          v23 = (v21 - v8 + 4096) >> 6;
          if ((4096 - (v19 << 6)) >> 6 >= v23)
            v24 = v23;
          else
            v24 = (4096 - (v19 << 6)) >> 6;
          if (v24)
            result = (const void **)memmove(v8, &v20[64 * v19], (v24 << 6) - 7);
          v19 += v24;
          if (v19 == 64)
            break;
          v25 = (char *)*v9++;
          v21 = v25;
          v8 = v25;
        }
        v8 += 64 * v24;
        v26 = v9 - 1;
        if ((char *)*(v9 - 1) + 4096 != v8)
          break;
        v8 = (char *)*v9;
        *(_QWORD *)a5 = v9;
        *(_QWORD *)(a5 + 8) = v8;
        if (++i == a3)
          goto LABEL_39;
      }
      --v9;
      *(_QWORD *)a5 = v26;
      *(_QWORD *)(a5 + 8) = v8;
    }
    goto LABEL_39;
  }
  if (__src != a4)
  {
    v28 = (char *)*v9++;
    v27 = v28;
    while (1)
    {
      v29 = (v27 - v8 + 4096) >> 6;
      if ((a4 - v7) >> 6 >= v29)
        v30 = v29;
      else
        v30 = (a4 - v7) >> 6;
      if (v30)
        result = (const void **)memmove(v8, v7, (v30 << 6) - 7);
      v7 += 64 * v30;
      if (v7 == a4)
        break;
      v31 = (char *)*v9++;
      v27 = v31;
      v8 = v31;
    }
    v8 += 64 * v30;
    v32 = v9 - 1;
    if ((char *)*(v9 - 1) + 4096 != v8)
      goto LABEL_49;
LABEL_37:
    v8 = (char *)*v9;
  }
LABEL_50:
  *(_QWORD *)a5 = v9;
  *(_QWORD *)(a5 + 8) = v8;
  return result;
}

_QWORD *std::__function::__func<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6514128;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6514128;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E29170);
}

char *std::__function::__func<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_1E6514128;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      *((_QWORD *)v2 + 4) = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      goto LABEL_6;
    }
    v4 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
  }
  *((_QWORD *)v2 + 4) = v4;
LABEL_6:
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return v2;
}

void sub_1B29C21E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  *(_QWORD *)a2 = &off_1E6514128;
  v4 = a2 + 8;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 == a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = v4;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
  }
  result = *(__n128 *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

uint64_t std::__function::__func<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

BOOL std::__function::__func<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 16) == *(_QWORD *)(a1 + 40)
      && *(_QWORD *)(a2 + 24) == *(_QWORD *)(a1 + 48)
      && *(_DWORD *)(a2 + 32) == *(_DWORD *)(a1 + 56)
      && *(unsigned __int8 *)(a2 + 36) == *(unsigned __int8 *)(a1 + 60);
}

uint64_t std::__function::__func<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N6HGPool16MatchDescriptionIP10__CVBufferN19HGCVPixelBufferPool10DescriptorEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N6HGPool16MatchDescriptionIP10__CVBufferN19HGCVPixelBufferPool10DescriptorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N6HGPool16MatchDescriptionIP10__CVBufferN19HGCVPixelBufferPool10DescriptorEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N6HGPool16MatchDescriptionIP10__CVBufferN19HGCVPixelBufferPool10DescriptorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchDescription<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::target_type()
{
}

uint64_t HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::reused(uint64_t a1)
{
  __IOSurface *IOSurface;
  const char *ID;
  char *v4;
  unsigned __int8 v5;
  unsigned __int8 v7;
  void *__p;
  char v9;

  CVPixelBufferGetDataSize(*(CVPixelBufferRef *)a1);
  HGPool::DescriptorString<HGCVPixelBufferPool::Descriptor>::str((_BYTE *)(a1 + 16));
  IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)a1);
  ID = (const char *)IOSurfaceGetID(IOSurface);
  if (v9 < 0)
  {
    operator delete(__p);
    v7 = atomic_load(HGLogger::_enabled);
    if ((v7 & 1) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = atomic_load(HGLogger::_enabled);
  if ((v5 & 1) != 0)
LABEL_3:
    HGLogger::log((HGLogger *)"hgcv", (const char *)1, (HGLogger *)"HGCV - reused entry:\n", ID, v4);
LABEL_4:
  HGLogger::indent(1);
  HGPool::EntryLog<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::log(a1, (HGLogger *)"hgcv", (const char *)1);
  return HGLogger::indent(0xFFFFFFFFLL);
}

void sub_1B29C24B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::allocated(uint64_t a1)
{
  __IOSurface *IOSurface;
  const char *ID;
  char *v4;
  unsigned __int8 v5;
  unsigned __int8 v7;
  void *__p;
  char v9;

  CVPixelBufferGetDataSize(*(CVPixelBufferRef *)a1);
  HGPool::DescriptorString<HGCVPixelBufferPool::Descriptor>::str((_BYTE *)(a1 + 16));
  IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)a1);
  ID = (const char *)IOSurfaceGetID(IOSurface);
  if (v9 < 0)
  {
    operator delete(__p);
    v7 = atomic_load(HGLogger::_enabled);
    if ((v7 & 1) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = atomic_load(HGLogger::_enabled);
  if ((v5 & 1) != 0)
LABEL_3:
    HGLogger::log((HGLogger *)"hgcv", (const char *)1, (HGLogger *)"HGCV - allocated entry:\n", ID, v4);
LABEL_4:
  HGLogger::indent(1);
  HGPool::EntryLog<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::log(a1, (HGLogger *)"hgcv", (const char *)1);
  return HGLogger::indent(0xFFFFFFFFLL);
}

void sub_1B29C25BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::__add_back_capacity(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  char *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  BOOL v37;
  int64_t v38;
  unint64_t v39;
  char *v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int64_t v45;
  unint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  size_t v58;
  unint64_t v59;
  char *v60;
  unint64_t v61;
  int64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  _OWORD *v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  _OWORD *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  void *v90;
  void *v91;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x40;
  v4 = v2 - 64;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_78:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v31 = (v5 - v9) >> 2;
      if (v5 == v9)
        v31 = 1;
      if (!(v31 >> 61))
      {
        v32 = v31 >> 2;
        v33 = 8 * v31;
        v34 = (char *)operator new(8 * v31);
        v35 = &v34[8 * v32];
        v36 = &v34[v33];
        v38 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v38 & 0xFFFFFFFFFFFFFFF8];
          v39 = v38 - 8;
          if ((unint64_t)(v38 - 8) >= 0x38)
          {
            v74 = &v34[8 * v32];
            v40 = v74;
            if ((unint64_t)(v74 - v7) >= 0x20)
            {
              v75 = (v39 >> 3) + 1;
              v76 = 8 * (v75 & 0x3FFFFFFFFFFFFFFCLL);
              v40 = &v35[v76];
              v7 += v76;
              v77 = (__int128 *)(v6 + 3);
              v78 = v74 + 16;
              v79 = v75 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v80 = *v77;
                *(v78 - 1) = *(v77 - 1);
                *v78 = v80;
                v77 += 2;
                v78 += 2;
                v79 -= 4;
              }
              while (v79);
              if (v75 == (v75 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v40 = &v34[8 * v32];
          }
          do
          {
            v81 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v40 = v81;
            v40 += 8;
          }
          while (v40 != v5);
        }
        goto LABEL_76;
      }
LABEL_87:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_78;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v91 = operator new(0x1000uLL);
      std::__split_buffer<HGNode **>::push_back((char **)a1, &v91);
      return;
    }
    v91 = operator new(0x1000uLL);
    std::__split_buffer<HGNode **>::push_front((void **)a1, &v91);
    v41 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v41 + 1);
    v8 = *v41;
    *(_QWORD *)(a1 + 8) = v41 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_78;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v42 = (v5 - v9) >> 2;
      if (v5 == v9)
        v42 = 1;
      if (!(v42 >> 61))
      {
        v43 = v42 >> 2;
        v44 = 8 * v42;
        v34 = (char *)operator new(8 * v42);
        v35 = &v34[8 * v43];
        v36 = &v34[v44];
        v45 = v5 - v7;
        v37 = v5 == v7;
        v5 = v35;
        if (!v37)
        {
          v5 = &v35[v45 & 0xFFFFFFFFFFFFFFF8];
          v46 = v45 - 8;
          if ((unint64_t)(v45 - 8) >= 0x38)
          {
            v82 = &v34[8 * v43];
            v47 = v82;
            if ((unint64_t)(v82 - v7) >= 0x20)
            {
              v83 = (v46 >> 3) + 1;
              v84 = 8 * (v83 & 0x3FFFFFFFFFFFFFFCLL);
              v47 = &v35[v84];
              v7 += v84;
              v85 = (__int128 *)(v41 + 3);
              v86 = v82 + 16;
              v87 = v83 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v88 = *v85;
                *(v86 - 1) = *(v85 - 1);
                *v86 = v88;
                v85 += 2;
                v86 += 2;
                v87 -= 4;
              }
              while (v87);
              if (v83 == (v83 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_76;
            }
          }
          else
          {
            v47 = &v34[8 * v43];
          }
          do
          {
            v89 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v47 = v89;
            v47 += 8;
          }
          while (v47 != v5);
        }
LABEL_76:
        *(_QWORD *)a1 = v34;
        *(_QWORD *)(a1 + 8) = v35;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v36;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_78;
      }
      goto LABEL_87;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_87;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0x1000uLL);
  v27 = &v25[8 * v21];
  v28 = &v25[8 * v24];
  if (v21 == v24)
  {
    v90 = v26;
    if (v20 < 1)
    {
      if (v18 == v19)
        v48 = 1;
      else
        v48 = v20 >> 2;
      if (v48 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v49 = (char *)operator new(8 * v48);
      v27 = &v49[8 * (v48 >> 2)];
      v28 = &v49[8 * v48];
      operator delete(v25);
      v50 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v49;
      *(_QWORD *)v27 = v90;
      v29 = v27 + 8;
      if (v18 == v50)
        goto LABEL_45;
    }
    else
    {
      v30 = v21 + 2;
      if (v21 >= -1)
        v30 = v21 + 1;
      v27 -= 8 * (v30 >> 1);
      *(_QWORD *)v27 = v26;
      v29 = v27 + 8;
      if (v18 == v19)
        goto LABEL_45;
    }
    do
    {
LABEL_50:
      if (v27 == v25)
      {
        if (v29 >= v28)
        {
          if (v28 == v27)
            v59 = 1;
          else
            v59 = (v28 - v27) >> 2;
          if (v59 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v60 = (char *)operator new(8 * v59);
          v25 = v60;
          v61 = (v59 + 3) >> 2;
          v53 = &v60[8 * v61];
          v62 = v29 - v27;
          v37 = v29 == v27;
          v29 = v53;
          if (!v37)
          {
            v29 = &v53[v62 & 0xFFFFFFFFFFFFFFF8];
            v63 = v62 - 8;
            v64 = &v60[8 * v61];
            v65 = v27;
            if (v63 < 0x38)
              goto LABEL_91;
            v66 = 8 * v61;
            v64 = &v60[8 * v61];
            v65 = v27;
            if ((unint64_t)(v64 - v27) < 0x20)
              goto LABEL_91;
            v67 = (v63 >> 3) + 1;
            v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
            v64 = &v53[v68];
            v65 = &v27[v68];
            v69 = (__int128 *)(v27 + 16);
            v70 = &v60[v66 + 16];
            v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v72 = *v69;
              *((_OWORD *)v70 - 1) = *(v69 - 1);
              *(_OWORD *)v70 = v72;
              v69 += 2;
              v70 += 32;
              v71 -= 4;
            }
            while (v71);
            if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_91:
              do
              {
                v73 = *(_QWORD *)v65;
                v65 += 8;
                *(_QWORD *)v64 = v73;
                v64 += 8;
              }
              while (v64 != v29);
            }
          }
          v28 = &v60[8 * v59];
          operator delete(v27);
        }
        else
        {
          v55 = (v28 - v29) >> 3;
          if (v55 >= -1)
            v56 = v55 + 1;
          else
            v56 = v55 + 2;
          v57 = &v29[8 * (v56 >> 1)];
          v53 = &v57[-(v29 - v27)];
          v58 = v29 - v27;
          v37 = v29 == v27;
          v29 = v57;
          if (!v37)
            memmove(v53, v27, v58);
          v25 = v27;
        }
      }
      else
      {
        v53 = v27;
      }
      v54 = *(_QWORD *)(v18 - 8);
      v18 -= 8;
      *((_QWORD *)v53 - 1) = v54;
      v51 = v53 - 8;
      v27 = v51;
    }
    while (v18 != *(_QWORD *)(a1 + 8));
    goto LABEL_46;
  }
  *(_QWORD *)v27 = v26;
  v29 = v27 + 8;
  if (v18 != v19)
    goto LABEL_50;
LABEL_45:
  v51 = v27;
LABEL_46:
  v52 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v51;
  *(_QWORD *)(a1 + 16) = v29;
  *(_QWORD *)(a1 + 24) = v28;
  if (v52)
    operator delete(v52);
}

void sub_1B29C2B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  void *v9;

  operator delete(__p);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_1B29C2B50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B29C2B64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B29C2B7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,true>::retrieveObject@<X0>(int64x2_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v19 = 0;
  v20 = v5;
  v14 = 0;
  v15 = v5;
  v6 = operator new(0x30uLL);
  *v6 = &off_1E6514230;
  v6[4] = 0;
  v6[5] = v5;
  v17 = v6;
  HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,true>::_retrieve(a1, v16, a3);
  v7 = v17;
  if (v17 == v16)
  {
    v8 = 4;
    v7 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  result = v19;
  if (v19 == v18)
  {
    v12 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_1B29C2CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v24 = a18;
  if (a18 == v22)
  {
    v25 = 4;
    v24 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  v26 = a13;
  if (a13 == &a10)
  {
    v27 = 4;
    v26 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_11:
  v28 = a22;
  if (a22 == &a19)
  {
    v29 = 4;
    v28 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_16;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

uint64_t HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::service(int64x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (!a1[1].i64[0])
    return 0;
  if (a1[4].i64[1])
  {
    v4 = 0;
    do
    {
      v5 = atomic_load((unint64_t *)&a1[5]);
      if (v5 <= (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1].i64[0] + 16))(a1[1].i64[0], a2))
      {
        v6 = atomic_load(&a1[5].u64[1]);
        if (v6 <= (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1].i64[0] + 24))(a1[1].i64[0], a2))
        {
          v7 = a1[4].u64[0];
          v8 = *(_QWORD *)(a1[2].i64[1] + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8));
          v9 = std::chrono::steady_clock::now().__d_.__rep_ - *(_QWORD *)(v8 + ((v7 & 0x3F) << 6) + 40);
          if (v9 <= (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1[1].i64[0] + 32))(a1[1].i64[0], a2))
            break;
        }
      }
      HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::_pop_front(a1);
      ++v4;
    }
    while (a1[4].i64[1]);
    return v4;
  }
  return 0;
}

_QWORD *HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::retrieveObject@<X0>(int64x2_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v19 = 0;
  v20 = v5;
  v14 = 0;
  v15 = v5;
  v6 = operator new(0x30uLL);
  *v6 = &off_1E6514230;
  v6[4] = 0;
  v6[5] = v5;
  v17 = v6;
  HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::_retrieve(a1, v16, a3);
  v7 = v17;
  if (v17 == v16)
  {
    v8 = 4;
    v7 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v14;
  if (v14 == v13)
  {
    v10 = 4;
    v9 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  result = v19;
  if (v19 == v18)
  {
    v12 = 4;
    result = v18;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
}

void sub_1B29C2FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char *a18, char a19, uint64_t a20,uint64_t a21,char *a22)
{
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v24 = a18;
  if (a18 == v22)
  {
    v25 = 4;
    v24 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  v26 = a13;
  if (a13 == &a10)
  {
    v27 = 4;
    v26 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_11:
  v28 = a22;
  if (a22 == &a19)
  {
    v29 = 4;
    v28 = &a19;
  }
  else
  {
    if (!a22)
      goto LABEL_16;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_16:
  _Unwind_Resume(exception_object);
}

void **HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,true>::_retrieve@<X0>(int64x2_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  size_t DataSize;
  unint64_t *v27;
  unint64_t v28;
  _BYTE v29[24];
  void **v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_BYTE *)(a3 + 36) = 1;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 1;
  v5 = a1[4].i64[0] + a1[4].i64[1];
  v6 = a1[2].i64[1];
  v7 = (uint64_t *)(v6 + 8 * (v5 >> 6));
  if (a1[3].i64[0] != v6)
  {
    v8 = *v7 + ((v5 & 0x3F) << 6);
    v9 = *(_QWORD *)(v6 + (((unint64_t)a1[4].i64[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) + ((a1[4].i64[0] & 0x3F) << 6);
    v10 = (_QWORD *)a2[3];
    if (v10)
      goto LABEL_3;
LABEL_6:
    v30 = 0;
    goto LABEL_8;
  }
  v8 = 0;
  v9 = 0;
  v10 = (_QWORD *)a2[3];
  if (!v10)
    goto LABEL_6;
LABEL_3:
  if (v10 == a2)
  {
    v30 = (void **)v29;
    (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v29);
  }
  else
  {
    v30 = (void **)(*(uint64_t (**)(_QWORD *))(*v10 + 16))(v10);
  }
LABEL_8:
  if (v8 != v9)
  {
    v11 = *v7;
    while (1)
    {
      v12 = v8;
      if (v8 == v11)
        v12 = *(v7 - 1) + 4096;
      if (!v30)
        std::__throw_bad_function_call[abi:ne180100]();
      if (((*((uint64_t (**)(void **, uint64_t))*v30 + 6))(v30, v12 - 64) & 1) != 0)
        break;
      v11 = *v7;
      if (v8 == *v7)
      {
        v13 = *--v7;
        v11 = v13;
        v8 = v13 + 4096;
      }
      v8 -= 64;
      if (v8 == v9)
      {
        v8 = v9;
        break;
      }
    }
  }
  result = v30;
  if (v30 == (void **)v29)
  {
    v15 = 4;
    result = (void **)v29;
  }
  else
  {
    if (!v30)
      goto LABEL_23;
    v15 = 5;
  }
  result = (void **)(*((uint64_t (**)(void))*result + v15))();
LABEL_23:
  v16 = a1[2].i64[1];
  if (a1[3].i64[0] == v16)
  {
    if (!v8)
      return result;
  }
  else if (v8 == *(_QWORD *)(v16 + (((unint64_t)a1[4].i64[0] >> 3) & 0x1FFFFFFFFFFFFFF8))
                + ((a1[4].i64[0] & 0x3F) << 6))
  {
    return result;
  }
  v17 = v8 - *v7;
  v18 = v17 >> 6;
  if (v17 < 65)
  {
    v22 = 64 - v18;
    v20 = (char *)&v7[-(v22 >> 6)];
    v21 = *(_QWORD *)v20 + ((unint64_t)(~(_BYTE)v22 & 0x3F) << 6);
  }
  else
  {
    v19 = v18 - 1;
    v20 = (char *)&v7[v19 >> 6];
    v21 = *(_QWORD *)v20 + ((v19 & 0x3F) << 6);
  }
  v23 = *(_OWORD *)(v21 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v21;
  *(_OWORD *)(a3 + 16) = v23;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v21 + 32);
  *(_OWORD *)(a3 + 41) = *(_OWORD *)(v21 + 41);
  v24 = (unint64_t *)&a1[5];
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  DataSize = CVPixelBufferGetDataSize(*(CVPixelBufferRef *)a3);
  v27 = &a1[5].u64[1];
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - DataSize, v27));
  return std::deque<HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>::erase(a1 + 2, v20, (char *)v21);
}

void sub_1B29C32E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  if (a13 == &a10)
  {
    (*(void (**)(void))(a10 + 32))();
    _Unwind_Resume(exception_object);
  }
  if (!a13)
    _Unwind_Resume(exception_object);
  (*(void (**)(void))(*a13 + 40))();
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_1E6514230;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_1E6514230;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::__function::__func<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = operator new(0x30uLL);
  *v2 = &off_1E6514230;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v5 = *(_QWORD *)(a1 + 40);
    v2[4] = v4;
    v2[5] = v5;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v2[5] = *(_QWORD *)(a1 + 40);
  return v2;
}

void sub_1B29C3494(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;

  *a2 = &off_1E6514230;
  v4 = a2 + 1;
  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    if (result == a1 + 8)
    {
      a2[4] = v4;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    }
    else
    {
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 16))(result, v4);
      a2[4] = result;
    }
    a2[5] = *(_QWORD *)(a1 + 40);
  }
  else
  {
    a2[4] = 0;
    a2[5] = *(_QWORD *)(a1 + 40);
  }
  return result;
}

uint64_t std::__function::__func<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::destroy(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

BOOL std::__function::__func<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *a2 == *(_QWORD *)(a1 + 40);
}

uint64_t std::__function::__func<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::target(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N6HGPool11MatchObjectIP10__CVBufferN19HGCVPixelBufferPool10DescriptorEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N6HGPool11MatchObjectIP10__CVBufferN19HGCVPixelBufferPool10DescriptorEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N6HGPool11MatchObjectIP10__CVBufferN19HGCVPixelBufferPool10DescriptorEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N6HGPool11MatchObjectIP10__CVBufferN19HGCVPixelBufferPool10DescriptorEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *std::__function::__func<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>,std::allocator<HGPool::MatchObject<__CVBuffer *,HGCVPixelBufferPool::Descriptor>>,BOOL ()(HGPool::Entry<__CVBuffer *,HGCVPixelBufferPool::Descriptor> const&)>::target_type()
{
}

uint64_t HGPool::EntryEventHandler<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::recycled(uint64_t a1)
{
  __IOSurface *IOSurface;
  const char *ID;
  char *v4;
  unsigned __int8 v5;
  unsigned __int8 v7;
  void *__p;
  char v9;

  CVPixelBufferGetDataSize(*(CVPixelBufferRef *)a1);
  HGPool::DescriptorString<HGCVPixelBufferPool::Descriptor>::str((_BYTE *)(a1 + 16));
  IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)a1);
  ID = (const char *)IOSurfaceGetID(IOSurface);
  if (v9 < 0)
  {
    operator delete(__p);
    v7 = atomic_load(HGLogger::_enabled);
    if ((v7 & 1) == 0)
      goto LABEL_4;
    goto LABEL_3;
  }
  v5 = atomic_load(HGLogger::_enabled);
  if ((v5 & 1) != 0)
LABEL_3:
    HGLogger::log((HGLogger *)"hgcv", (const char *)1, (HGLogger *)"HGCV - recycled entry:\n", ID, v4);
LABEL_4:
  HGLogger::indent(1);
  HGPool::EntryLog<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::log(a1, (HGLogger *)"hgcv", (const char *)1);
  return HGLogger::indent(0xFFFFFFFFLL);
}

void sub_1B29C3744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t HGPool::EntryTrace<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::trace(uint64_t a1)
{
  __IOSurface *IOSurface;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  char *v6;
  const std::locale::facet *v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  uint64_t v16;
  void *v18[2];
  unsigned __int8 v19;
  std::string v20;
  std::locale v21[2];
  std::string::size_type v22;
  _QWORD v23[2];
  _QWORD v24[11];
  char v25;
  uint64_t v26;

  IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)a1);
  IOSurfaceGetID(IOSurface);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v23);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)",  sid: ", 8);
  v4 = v3;
  v5 = *v3;
  v6 = (char *)v3 + *(_QWORD *)(*v3 - 24);
  if (*((_DWORD *)v6 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
    v7 = std::locale::use_facet(v21, MEMORY[0x1E0DE4A90]);
    v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 32);
    std::locale::~locale(v21);
    *((_DWORD *)v6 + 36) = v8;
    v5 = *v4;
  }
  *((_DWORD *)v6 + 36) = 48;
  *(uint64_t *)((char *)v4 + *(_QWORD *)(v5 - 24) + 24) = 8;
  *(_DWORD *)((char *)v4 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v4 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFFB5 | 8;
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (", 2);
  *(_DWORD *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 8) & 0xFFFFFFB5 | 2;
  v11 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)")", 1);
  HGPool::DescriptorString<HGCVPixelBufferPool::Descriptor>::str((_BYTE *)(a1 + 16));
  std::stringbuf::str();
  if ((v19 & 0x80u) == 0)
    v12 = v18;
  else
    v12 = (void **)v18[0];
  if ((v19 & 0x80u) == 0)
    v13 = v19;
  else
    v13 = (std::string::size_type)v18[1];
  v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v22 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21[0].__locale_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if ((char)v19 < 0)
  {
    operator delete(v18[0]);
    if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_11;
  }
  else if ((SHIBYTE(v20.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_11;
  }
  operator delete(v20.__r_.__value_.__l.__data_);
LABEL_11:
  CVPixelBufferGetDataSize(*(CVPixelBufferRef *)a1);
  if (*(_BYTE *)(a1 + 56))
  {
    if ((SHIBYTE(v22) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  std::chrono::steady_clock::now();
  if (SHIBYTE(v22) < 0)
LABEL_13:
    operator delete(v21[0].__locale_);
LABEL_14:
  v23[0] = *MEMORY[0x1E0DE4F50];
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v23 + *(_QWORD *)(v23[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v24[0] = v16;
  v24[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1B5E290BC](&v26);
}

void sub_1B29C39FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,std::locale a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,true>::log(_QWORD *a1, HGLogger *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  HGLoggerUtils *v13;
  const char *v14;
  char *v15;
  unsigned __int8 v16;
  void **v17;
  unint64_t v18;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (a1[9])
  {
    HGLogger::indent(1);
    v4 = a1[5];
    if (a1[6] != v4)
    {
      v5 = a1[8];
      v6 = (_QWORD *)(v4 + 8 * (v5 >> 6));
      v7 = (__int128 *)(*v6 + ((v5 & 0x3F) << 6));
      v8 = *(_QWORD *)(v4 + (((a1[9] + v5) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((a1[9] + v5) & 0x3F) << 6);
      while (v7 != (__int128 *)v8)
      {
        v9 = *v7;
        v10 = v7[1];
        v11 = v7[3];
        v21 = v7[2];
        v22 = v11;
        *(_OWORD *)__p = v9;
        v20 = v10;
        HGPool::EntryLog<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::log((uint64_t)__p, a2, (const char *)3);
        v7 += 4;
        if ((__int128 *)((char *)v7 - *v6) == (__int128 *)4096)
        {
          v12 = (__int128 *)v6[1];
          ++v6;
          v7 = v12;
        }
      }
    }
    HGLogger::indent(0xFFFFFFFFLL);
    v13 = (HGLoggerUtils *)atomic_load(a1 + 11);
    HGLoggerUtils::bytesPrettyString(v13);
    v16 = atomic_load(HGLogger::_enabled);
    if ((v16 & 1) != 0)
    {
      if ((SBYTE7(v20) & 0x80u) == 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      v18 = atomic_load(a1 + 10);
      HGLogger::log(a2, (const char *)2, (HGLogger *)"total : %s (%lu)\n", v14, v15, v17, v18);
    }
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B29C3BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HGPool::List<__CVBuffer *,HGCVPixelBufferPool::Descriptor,false>::log(_QWORD *a1, HGLogger *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  HGLoggerUtils *v13;
  const char *v14;
  char *v15;
  unsigned __int8 v16;
  void **v17;
  unint64_t v18;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (a1[9])
  {
    HGLogger::indent(1);
    v4 = a1[5];
    if (a1[6] != v4)
    {
      v5 = a1[8];
      v6 = (_QWORD *)(v4 + 8 * (v5 >> 6));
      v7 = (__int128 *)(*v6 + ((v5 & 0x3F) << 6));
      v8 = *(_QWORD *)(v4 + (((a1[9] + v5) >> 3) & 0x1FFFFFFFFFFFFFF8)) + (((a1[9] + v5) & 0x3F) << 6);
      while (v7 != (__int128 *)v8)
      {
        v9 = *v7;
        v10 = v7[1];
        v11 = v7[3];
        v21 = v7[2];
        v22 = v11;
        *(_OWORD *)__p = v9;
        v20 = v10;
        HGPool::EntryLog<__CVBuffer *,HGCVPixelBufferPool::Descriptor>::log((uint64_t)__p, a2, (const char *)3);
        v7 += 4;
        if ((__int128 *)((char *)v7 - *v6) == (__int128 *)4096)
        {
          v12 = (__int128 *)v6[1];
          ++v6;
          v7 = v12;
        }
      }
    }
    HGLogger::indent(0xFFFFFFFFLL);
    v13 = (HGLoggerUtils *)atomic_load(a1 + 11);
    HGLoggerUtils::bytesPrettyString(v13);
    v16 = atomic_load(HGLogger::_enabled);
    if ((v16 & 1) != 0)
    {
      if ((SBYTE7(v20) & 0x80u) == 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      v18 = atomic_load(a1 + 10);
      HGLogger::log(a2, (const char *)2, (HGLogger *)"total : %s (%lu)\n", v14, v15, v17, v18);
    }
    if (SBYTE7(v20) < 0)
      operator delete(__p[0]);
  }
}

void sub_1B29C3D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void HGCVBitmap::~HGCVBitmap(HGBitmap *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E65142B8;
  v3 = *((_QWORD *)this + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGBitmap::~HGBitmap(this, a2);
}

{
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E65142B8;
  v3 = *((_QWORD *)this + 16);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  HGBitmap::~HGBitmap(this, a2);
  HGObject::operator delete(v4);
}

HGCVPixelBuffer *HGCVBitmap::_create@<X0>(HGCVPixelBuffer **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, size_t a5@<X4>, _QWORD *a6@<X8>)
{
  HGCVPixelBuffer *v9;
  size_t v10;
  int v13;
  _QWORD *v14;
  HGCVPixelBuffer *result;

  *a6 = 0;
  v9 = *a1;
  if (v9)
  {
    v10 = a5;
    v13 = HGCVPixelBuffer::rowBytes(v9, a5);
    v14 = HGObject::operator new(0x90uLL);
    HGBitmap::HGBitmap((uint64_t)v14, a2, a3, a4, 0, v13);
    *v14 = off_1E65142B8;
    result = *a1;
    v14[16] = *a1;
    if (result)
      result = (HGCVPixelBuffer *)(*(uint64_t (**)(HGCVPixelBuffer *))(*(_QWORD *)result + 16))(result);
  }
  else
  {
    v14 = HGObject::operator new(0x90uLL);
    HGBitmap::HGBitmap((uint64_t)v14, 0, 0, a4, 0, 0);
    *v14 = off_1E65142B8;
    result = *a1;
    v14[16] = *a1;
    if (result)
      result = (HGCVPixelBuffer *)(*(uint64_t (**)(HGCVPixelBuffer *))(*(_QWORD *)result + 16))(result);
    v10 = 0;
  }
  v14[17] = v10;
  *((_DWORD *)v14 + 3) |= 1u;
  *a6 = v14;
  return result;
}

void sub_1B29C3F04(_Unwind_Exception *a1, void *a2)
{
  HGBitmap *v2;
  void *v4;

  HGBitmap::~HGBitmap(v2, a2);
  HGObject::operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1B29C3F34(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

HGCVPixelBuffer *HGCVBitmap::create@<X0>(HGCVPixelBuffer *a1@<X0>, int a2@<W1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  HGCVPixelBuffer *result;
  HGCVPixelBuffer *v13;

  HGCVPixelBuffer::create(a1, (HGObject **)&v13);
  if (v13)
  {
    v7 = HGCVPixelBuffer::w(v13, a3);
    v8 = HGCVPixelBuffer::h(v13, a3);
    v9 = HGRectMake4i(0, 0, v7, v8);
    v11 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  HGCVBitmap::_create(&v13, v9, v11, a2, a3, a4);
  result = v13;
  if (v13)
    return (HGCVPixelBuffer *)(*(uint64_t (**)(HGCVPixelBuffer *))(*(_QWORD *)v13 + 24))(v13);
  return result;
}

void sub_1B29C4000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

HGCVPixelBuffer *HGCVBitmap::create@<X0>(HGCVPixelBuffer **a1@<X0>, int a2@<W1>, size_t a3@<X2>, _QWORD *a4@<X8>)
{
  HGCVPixelBuffer *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = *a1;
  if (v8)
  {
    v9 = HGCVPixelBuffer::w(v8, a3);
    v10 = HGCVPixelBuffer::h(*a1, a3);
    v11 = HGRectMake4i(0, 0, v9, v10);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  return HGCVBitmap::_create(a1, v11, v13, a2, a3, a4);
}

HGCVPixelBuffer *HGCVBitmap::create@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  unint64_t v6;
  int v7;
  HGCVPixelBuffer *v8;
  int v9;
  size_t v10;
  OSType v11;
  _BOOL4 v12;
  HGCVPixelBuffer *result;
  HGCVPixelBuffer *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  v6 = HGFormatUtils::collapseRectForFormat(&v15, a3);
  v8 = (HGCVPixelBuffer *)(v7 - v6);
  v10 = (v9 - HIDWORD(v6));
  v11 = HGCV::CVPixelFormatForHGFormat(a3);
  v12 = HGCV::AllowPixelSizeCastingForHGFormat(a3);
  HGCVPixelBuffer::create(v8, v10, v11, v12, (HGObject **)&v14);
  HGCVBitmap::_create(&v14, v15, v16, a3, 0, a4);
  result = v14;
  if (v14)
    return (HGCVPixelBuffer *)(*(uint64_t (**)(HGCVPixelBuffer *))(*(_QWORD *)v14 + 24))(v14);
  return result;
}

void sub_1B29C4174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

HGCVPixelBuffer *HGCVBitmap::create@<X0>(const char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  unint64_t v8;
  int v9;
  _anonymous_namespace_ *v10;
  int v11;
  char *v12;
  OSType v13;
  char v14;
  HGCVPixelBuffer *result;
  HGCVPixelBuffer *v16;
  uint64_t v17;
  uint64_t v18;

  v17 = a2;
  v18 = a3;
  v8 = HGFormatUtils::collapseRectForFormat(&v17, a4);
  v10 = (_anonymous_namespace_ *)(v9 - v8);
  v12 = (char *)(v11 - HIDWORD(v8));
  v13 = HGCV::CVPixelFormatForHGFormat(a4);
  v14 = HGCV::AllowPixelSizeCastingForHGFormat(a4);
  HGCVPixelBuffer::create(v10, a1, v12, v13, v14, (HGObject **)&v16);
  HGCVBitmap::_create(&v16, v17, v18, a4, 0, a5);
  result = v16;
  if (v16)
    return (HGCVPixelBuffer *)(*(uint64_t (**)(HGCVPixelBuffer *))(*(_QWORD *)v16 + 24))(v16);
  return result;
}

void sub_1B29C4258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

BOOL HGCVBitmap::lock(HGCVBitmap *this, CVPixelBufferLockFlags a2)
{
  _BOOL8 v3;
  void *v4;

  v3 = HGCVPixelBuffer::lock(*((HGCVPixelBuffer **)this + 16), a2);
  if (v3)
  {
    v4 = HGCVPixelBuffer::ptr(*((HGCVPixelBuffer **)this + 16), *((_QWORD *)this + 17));
    if (v4 == *((void **)this + 10))
      return v3;
    goto LABEL_5;
  }
  v4 = 0;
  if (*((_QWORD *)this + 10))
LABEL_5:
    *((_QWORD *)this + 10) = v4;
  return v3;
}

BOOL HGCVBitmap::unlock(HGCVBitmap *this, CVPixelBufferLockFlags a2)
{
  _BOOL8 v3;
  void *v4;

  v3 = HGCVPixelBuffer::unlock(*((HGCVPixelBuffer **)this + 16), a2);
  if (v3)
  {
    v4 = HGCVPixelBuffer::ptr(*((HGCVPixelBuffer **)this + 16), *((_QWORD *)this + 17));
    if (v4 == *((void **)this + 10))
      return v3;
    goto LABEL_5;
  }
  v4 = 0;
  if (*((_QWORD *)this + 10))
LABEL_5:
    *((_QWORD *)this + 10) = v4;
  return v3;
}

void *HGCVBitmap::getCVBitmapStorage(HGBitmap *this, HGBitmap *a2)
{
  unint64_t v3;
  void *v4;
  const void *Storage;
  const void *v6;

  v3 = 0;
  while (v3 | (unint64_t)this)
  {
    if (v3)
    {
      this = 0;
      v4 = *(void **)(v3 + 16);
      v3 = 0;
    }
    else if (this)
    {
      Storage = (const void *)HGBitmap::GetStorage(this);
      if (Storage)
      {
        v6 = (const void *)HGBitmap::GetStorage(this);
        if (!v6)
          goto LABEL_12;
      }
      else
      {
        v3 = 0;
        v6 = (const void *)HGBitmap::GetStorage(this);
        if (!v6)
        {
LABEL_12:
          this = 0;
          goto LABEL_3;
        }
      }
    }
    else
    {
      v3 = 0;
      v4 = 0;
    }
LABEL_3:
    if (v4)
      return v4;
  }
  return 0;
}

void HGeometryData::HGeometryData(HGeometryData *this, HGRasterizer *a2, uint64_t a3)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 3) = 34;
  HGArrayDataRef::allocate(this, 4, 0, 0);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 7) = 3;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 16), 2, 0, 0);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 11) = 3;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 32), 2, 0, 0);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 15) = 34;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 48), 4, 0, 0);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 19) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 64), 16, 0, 0);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 23) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 80), 16, 0, 0);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_DWORD *)this + 27) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 96), 16, 0, 0);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 31) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 112), 16, 0, 0);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_DWORD *)this + 35) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 128), 16, 0, 0);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 39) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 144), 16, 0, 0);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_DWORD *)this + 43) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 160), 16, 0, 0);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 47) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 176), 16, 0, 0);
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 51) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 192), 16, 0, 0);
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_DWORD *)this + 55) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 208), 16, 0, 0);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_DWORD *)this + 59) = 28;
  HGArrayDataRef::allocate((HGeometryData *)((char *)this + 224), 16, 0, 0);
  *((_BYTE *)this + 240) = 0;
  *((_DWORD *)this + 61) = 0;
  *((_BYTE *)this + 248) = 0;
  *((_DWORD *)this + 63) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 33) = a2;
  *((_QWORD *)this + 34) = a3;
}

void sub_1B29C46A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _Unwind_Exception *a11)
{
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t *v14;

  if (*v13)
  {
    HGeometryData::HGeometryData();
    a1 = a11;
  }
  HGArray<__simd128_float32_t,(HGFormat)28>::~HGArray(v12);
  HGArray<__simd128_float32_t,(HGFormat)28>::~HGArray(v14);
  HGArray<__simd128_float32_t,(HGFormat)28>::~HGArray(v11);
  _Unwind_Resume(a1);
}

uint64_t *HGArray<__simd128_float32_t,(HGFormat)28>::~HGArray(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *a1;
  if (*a1)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      v5 = *(_QWORD *)(v2 + 16);
      if (v5)
        MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
      MEMORY[0x1B5E29170](v2, 0x1080C4098BBCF0FLL);
    }
  }
  return a1;
}

double HGeometryData::operator=(unsigned int **a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int *v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int *v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  double result;

  v4 = *a1;
  v5 = *(unsigned int **)a2;
  if (*a1 != *(unsigned int **)a2)
  {
    if (v4)
    {
      do
      {
        v6 = __ldaxr(v4);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v4));
      if (!v7)
      {
        v8 = *((_QWORD *)v4 + 2);
        if (v8)
          MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v4, 0x1080C4098BBCF0FLL);
      }
      v5 = *(unsigned int **)a2;
    }
    *a1 = v5;
    if (v5)
    {
      do
        v9 = __ldaxr(v5);
      while (__stlxr(v9 + 1, v5));
    }
  }
  a1[1] = *(unsigned int **)(a2 + 8);
  v10 = a1[2];
  v11 = *(unsigned int **)(a2 + 16);
  if (v10 != v11)
  {
    if (v10)
    {
      do
      {
        v12 = __ldaxr(v10);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v10));
      if (!v13)
      {
        v14 = *((_QWORD *)v10 + 2);
        if (v14)
          MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v10, 0x1080C4098BBCF0FLL);
      }
      v11 = *(unsigned int **)(a2 + 16);
    }
    a1[2] = v11;
    if (v11)
    {
      do
        v15 = __ldaxr(v11);
      while (__stlxr(v15 + 1, v11));
    }
  }
  a1[3] = *(unsigned int **)(a2 + 24);
  v16 = a1[4];
  v17 = *(unsigned int **)(a2 + 32);
  if (v16 != v17)
  {
    if (v16)
    {
      do
      {
        v18 = __ldaxr(v16);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v16));
      if (!v19)
      {
        v20 = *((_QWORD *)v16 + 2);
        if (v20)
          MEMORY[0x1B5E2914C](v20, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v16, 0x1080C4098BBCF0FLL);
      }
      v17 = *(unsigned int **)(a2 + 32);
    }
    a1[4] = v17;
    if (v17)
    {
      do
        v21 = __ldaxr(v17);
      while (__stlxr(v21 + 1, v17));
    }
  }
  a1[5] = *(unsigned int **)(a2 + 40);
  v22 = a1[6];
  v23 = *(unsigned int **)(a2 + 48);
  if (v22 != v23)
  {
    if (v22)
    {
      do
      {
        v24 = __ldaxr(v22);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v22));
      if (!v25)
      {
        v26 = *((_QWORD *)v22 + 2);
        if (v26)
          MEMORY[0x1B5E2914C](v26, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v22, 0x1080C4098BBCF0FLL);
      }
      v23 = *(unsigned int **)(a2 + 48);
    }
    a1[6] = v23;
    if (v23)
    {
      do
        v27 = __ldaxr(v23);
      while (__stlxr(v27 + 1, v23));
    }
  }
  a1[7] = *(unsigned int **)(a2 + 56);
  v28 = a1[8];
  v29 = *(unsigned int **)(a2 + 64);
  if (v28 != v29)
  {
    if (v28)
    {
      do
      {
        v30 = __ldaxr(v28);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v28));
      if (!v31)
      {
        v32 = *((_QWORD *)v28 + 2);
        if (v32)
          MEMORY[0x1B5E2914C](v32, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v28, 0x1080C4098BBCF0FLL);
      }
      v29 = *(unsigned int **)(a2 + 64);
    }
    a1[8] = v29;
    if (v29)
    {
      do
        v33 = __ldaxr(v29);
      while (__stlxr(v33 + 1, v29));
    }
  }
  a1[9] = *(unsigned int **)(a2 + 72);
  v34 = a1[10];
  v35 = *(unsigned int **)(a2 + 80);
  if (v34 != v35)
  {
    if (v34)
    {
      do
      {
        v36 = __ldaxr(v34);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v34));
      if (!v37)
      {
        v38 = *((_QWORD *)v34 + 2);
        if (v38)
          MEMORY[0x1B5E2914C](v38, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v34, 0x1080C4098BBCF0FLL);
      }
      v35 = *(unsigned int **)(a2 + 80);
    }
    a1[10] = v35;
    if (v35)
    {
      do
        v39 = __ldaxr(v35);
      while (__stlxr(v39 + 1, v35));
    }
  }
  a1[11] = *(unsigned int **)(a2 + 88);
  v40 = a1[12];
  v41 = *(unsigned int **)(a2 + 96);
  if (v40 != v41)
  {
    if (v40)
    {
      do
      {
        v42 = __ldaxr(v40);
        v43 = v42 - 1;
      }
      while (__stlxr(v43, v40));
      if (!v43)
      {
        v44 = *((_QWORD *)v40 + 2);
        if (v44)
          MEMORY[0x1B5E2914C](v44, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v40, 0x1080C4098BBCF0FLL);
      }
      v41 = *(unsigned int **)(a2 + 96);
    }
    a1[12] = v41;
    if (v41)
    {
      do
        v45 = __ldaxr(v41);
      while (__stlxr(v45 + 1, v41));
    }
  }
  a1[13] = *(unsigned int **)(a2 + 104);
  v46 = a1[14];
  v47 = *(unsigned int **)(a2 + 112);
  if (v46 != v47)
  {
    if (v46)
    {
      do
      {
        v48 = __ldaxr(v46);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v46));
      if (!v49)
      {
        v50 = *((_QWORD *)v46 + 2);
        if (v50)
          MEMORY[0x1B5E2914C](v50, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v46, 0x1080C4098BBCF0FLL);
      }
      v47 = *(unsigned int **)(a2 + 112);
    }
    a1[14] = v47;
    if (v47)
    {
      do
        v51 = __ldaxr(v47);
      while (__stlxr(v51 + 1, v47));
    }
  }
  a1[15] = *(unsigned int **)(a2 + 120);
  v52 = a1[16];
  v53 = *(unsigned int **)(a2 + 128);
  if (v52 != v53)
  {
    if (v52)
    {
      do
      {
        v54 = __ldaxr(v52);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v52));
      if (!v55)
      {
        v56 = *((_QWORD *)v52 + 2);
        if (v56)
          MEMORY[0x1B5E2914C](v56, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v52, 0x1080C4098BBCF0FLL);
      }
      v53 = *(unsigned int **)(a2 + 128);
    }
    a1[16] = v53;
    if (v53)
    {
      do
        v57 = __ldaxr(v53);
      while (__stlxr(v57 + 1, v53));
    }
  }
  a1[17] = *(unsigned int **)(a2 + 136);
  v58 = a1[18];
  v59 = *(unsigned int **)(a2 + 144);
  if (v58 != v59)
  {
    if (v58)
    {
      do
      {
        v60 = __ldaxr(v58);
        v61 = v60 - 1;
      }
      while (__stlxr(v61, v58));
      if (!v61)
      {
        v62 = *((_QWORD *)v58 + 2);
        if (v62)
          MEMORY[0x1B5E2914C](v62, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v58, 0x1080C4098BBCF0FLL);
      }
      v59 = *(unsigned int **)(a2 + 144);
    }
    a1[18] = v59;
    if (v59)
    {
      do
        v63 = __ldaxr(v59);
      while (__stlxr(v63 + 1, v59));
    }
  }
  a1[19] = *(unsigned int **)(a2 + 152);
  v64 = a1[20];
  v65 = *(unsigned int **)(a2 + 160);
  if (v64 != v65)
  {
    if (v64)
    {
      do
      {
        v66 = __ldaxr(v64);
        v67 = v66 - 1;
      }
      while (__stlxr(v67, v64));
      if (!v67)
      {
        v68 = *((_QWORD *)v64 + 2);
        if (v68)
          MEMORY[0x1B5E2914C](v68, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v64, 0x1080C4098BBCF0FLL);
      }
      v65 = *(unsigned int **)(a2 + 160);
    }
    a1[20] = v65;
    if (v65)
    {
      do
        v69 = __ldaxr(v65);
      while (__stlxr(v69 + 1, v65));
    }
  }
  a1[21] = *(unsigned int **)(a2 + 168);
  v70 = a1[22];
  v71 = *(unsigned int **)(a2 + 176);
  if (v70 != v71)
  {
    if (v70)
    {
      do
      {
        v72 = __ldaxr(v70);
        v73 = v72 - 1;
      }
      while (__stlxr(v73, v70));
      if (!v73)
      {
        v74 = *((_QWORD *)v70 + 2);
        if (v74)
          MEMORY[0x1B5E2914C](v74, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v70, 0x1080C4098BBCF0FLL);
      }
      v71 = *(unsigned int **)(a2 + 176);
    }
    a1[22] = v71;
    if (v71)
    {
      do
        v75 = __ldaxr(v71);
      while (__stlxr(v75 + 1, v71));
    }
  }
  a1[23] = *(unsigned int **)(a2 + 184);
  v76 = a1[24];
  v77 = *(unsigned int **)(a2 + 192);
  if (v76 != v77)
  {
    if (v76)
    {
      do
      {
        v78 = __ldaxr(v76);
        v79 = v78 - 1;
      }
      while (__stlxr(v79, v76));
      if (!v79)
      {
        v80 = *((_QWORD *)v76 + 2);
        if (v80)
          MEMORY[0x1B5E2914C](v80, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v76, 0x1080C4098BBCF0FLL);
      }
      v77 = *(unsigned int **)(a2 + 192);
    }
    a1[24] = v77;
    if (v77)
    {
      do
        v81 = __ldaxr(v77);
      while (__stlxr(v81 + 1, v77));
    }
  }
  a1[25] = *(unsigned int **)(a2 + 200);
  v82 = a1[26];
  v83 = *(unsigned int **)(a2 + 208);
  if (v82 != v83)
  {
    if (v82)
    {
      do
      {
        v84 = __ldaxr(v82);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, v82));
      if (!v85)
      {
        v86 = *((_QWORD *)v82 + 2);
        if (v86)
          MEMORY[0x1B5E2914C](v86, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v82, 0x1080C4098BBCF0FLL);
      }
      v83 = *(unsigned int **)(a2 + 208);
    }
    a1[26] = v83;
    if (v83)
    {
      do
        v87 = __ldaxr(v83);
      while (__stlxr(v87 + 1, v83));
    }
  }
  a1[27] = *(unsigned int **)(a2 + 216);
  v88 = a1[28];
  v89 = *(unsigned int **)(a2 + 224);
  if (v88 != v89)
  {
    if (v88)
    {
      do
      {
        v90 = __ldaxr(v88);
        v91 = v90 - 1;
      }
      while (__stlxr(v91, v88));
      if (!v91)
      {
        v92 = *((_QWORD *)v88 + 2);
        if (v92)
          MEMORY[0x1B5E2914C](v92, 0x1000C8077774924);
        MEMORY[0x1B5E29170](v88, 0x1080C4098BBCF0FLL);
      }
      v89 = *(unsigned int **)(a2 + 224);
    }
    a1[28] = v89;
    if (v89)
    {
      do
        v93 = __ldaxr(v89);
      while (__stlxr(v93 + 1, v89));
    }
  }
  a1[29] = *(unsigned int **)(a2 + 232);
  *((_BYTE *)a1 + 240) = *(_BYTE *)(a2 + 240);
  *((_DWORD *)a1 + 61) = *(_DWORD *)(a2 + 244);
  result = *(double *)(a2 + 252);
  *(double *)((char *)a1 + 252) = result;
  *((_DWORD *)a1 + 65) = *(_DWORD *)(a2 + 260);
  *((_BYTE *)a1 + 248) = *(_BYTE *)(a2 + 248);
  return result;
}

__n128 HGeometryData::CopyVertex(uint64_t a1, uint64_t a2, int *a3, int a4, char a5)
{
  __n128 result;

  *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16)
            + *(int *)(*(_QWORD *)(a1 + 64) + 4) * (uint64_t)*a3
            + *(int *)(a1 + 72)) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16)
                                             + *(int *)(*(_QWORD *)(a2 + 64) + 4) * (uint64_t)a4
                                             + *(int *)(a2 + 72));
  *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16)
            + *(int *)(*(_QWORD *)(a1 + 80) + 4) * (uint64_t)*a3
            + *(int *)(a1 + 88)) = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 80) + 16)
                                             + *(int *)(*(_QWORD *)(a2 + 80) + 4) * (uint64_t)a4
                                             + *(int *)(a2 + 88));
  result = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 96) + 16)
                     + *(int *)(*(_QWORD *)(a2 + 96) + 4) * (uint64_t)a4
                     + *(int *)(a2 + 104));
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16)
            + *(int *)(*(_QWORD *)(a1 + 96) + 4) * (uint64_t)*a3
            + *(int *)(a1 + 104)) = result;
  if ((a5 & 1) != 0)
  {
    result = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 112) + 16)
                       + *(int *)(*(_QWORD *)(a2 + 112) + 4) * (uint64_t)a4
                       + *(int *)(a2 + 120));
    *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 16)
              + *(int *)(*(_QWORD *)(a1 + 112) + 4) * (uint64_t)*a3
              + *(int *)(a1 + 120)) = result;
    if ((a5 & 2) == 0)
    {
LABEL_3:
      if ((a5 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((a5 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 128) + 16)
                     + *(int *)(*(_QWORD *)(a2 + 128) + 4) * (uint64_t)a4
                     + *(int *)(a2 + 136));
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 16)
            + *(int *)(*(_QWORD *)(a1 + 128) + 4) * (uint64_t)*a3
            + *(int *)(a1 + 136)) = result;
  if ((a5 & 4) == 0)
  {
LABEL_4:
    if ((a5 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  result = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 144) + 16)
                     + *(int *)(*(_QWORD *)(a2 + 144) + 4) * (uint64_t)a4
                     + *(int *)(a2 + 152));
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 16)
            + *(int *)(*(_QWORD *)(a1 + 144) + 4) * (uint64_t)*a3
            + *(int *)(a1 + 152)) = result;
  if ((a5 & 8) == 0)
  {
LABEL_5:
    if ((a5 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  result = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 160) + 16)
                     + *(int *)(*(_QWORD *)(a2 + 160) + 4) * (uint64_t)a4
                     + *(int *)(a2 + 168));
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 16)
            + *(int *)(*(_QWORD *)(a1 + 160) + 4) * (uint64_t)*a3
            + *(int *)(a1 + 168)) = result;
  if ((a5 & 0x10) == 0)
  {
LABEL_6:
    if ((a5 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  result = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 176) + 16)
                     + *(int *)(*(_QWORD *)(a2 + 176) + 4) * (uint64_t)a4
                     + *(int *)(a2 + 184));
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 16)
            + *(int *)(*(_QWORD *)(a1 + 176) + 4) * (uint64_t)*a3
            + *(int *)(a1 + 184)) = result;
  if ((a5 & 0x20) == 0)
  {
LABEL_7:
    if ((a5 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    result = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 208) + 16)
                       + *(int *)(*(_QWORD *)(a2 + 208) + 4) * (uint64_t)a4
                       + *(int *)(a2 + 216));
    *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 16)
              + *(int *)(*(_QWORD *)(a1 + 208) + 4) * (uint64_t)*a3
              + *(int *)(a1 + 216)) = result;
    if ((a5 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_15:
  result = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 192) + 16)
                     + *(int *)(*(_QWORD *)(a2 + 192) + 4) * (uint64_t)a4
                     + *(int *)(a2 + 200));
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 16)
            + *(int *)(*(_QWORD *)(a1 + 192) + 4) * (uint64_t)*a3
            + *(int *)(a1 + 200)) = result;
  if ((a5 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if ((a5 & 0x80) == 0)
  {
LABEL_9:
    ++*a3;
    return result;
  }
LABEL_17:
  result = *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a2 + 224) + 16)
                     + *(int *)(*(_QWORD *)(a2 + 224) + 4) * (uint64_t)a4
                     + *(int *)(a2 + 232));
  *(__n128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 16)
            + *(int *)(*(_QWORD *)(a1 + 224) + 4) * (uint64_t)(*a3)++
            + *(int *)(a1 + 232)) = result;
  return result;
}

float64x2_t HGeometryData::InterpVertex(uint64_t a1, uint64_t a2, int *a3, int a4, int a5, char a6, float64x2_t result)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float64x2_t v27;
  float64x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float64x2_t v41;
  float64x2_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float64x2_t v62;
  float64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float64x2_t v69;
  float64x2_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float64x2_t v76;
  float64x2_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;

  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(_QWORD *)(v7 + 16);
  LODWORD(v7) = *(_DWORD *)(v7 + 4);
  v9 = *(int *)(a2 + 72);
  v10 = *(float32x4_t *)(v8 + (int)v7 * (uint64_t)a5 + v9);
  v11 = *(float32x4_t *)(v8 + (int)v7 * (uint64_t)a4 + v9);
  v12 = vcvtq_f64_f32(*(float32x2_t *)v10.f32);
  v13 = vcvt_hight_f64_f32(v10);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 16)
                 + *(int *)(*(_QWORD *)(a1 + 64) + 4) * (uint64_t)*a3
                 + *(int *)(a1 + 72)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v11.f32), v12), result.f64[0]), v12)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v11), v13), result.f64[0]), v13));
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(v14 + 16);
  LODWORD(v14) = *(_DWORD *)(v14 + 4);
  v16 = *(int *)(a2 + 88);
  v17 = *(float32x4_t *)(v15 + (int)v14 * (uint64_t)a5 + v16);
  v18 = *(float32x4_t *)(v15 + (int)v14 * (uint64_t)a4 + v16);
  v19 = vcvtq_f64_f32(*(float32x2_t *)v17.f32);
  v20 = vcvt_hight_f64_f32(v17);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 16)
                 + *(int *)(*(_QWORD *)(a1 + 80) + 4) * (uint64_t)*a3
                 + *(int *)(a1 + 88)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v18.f32), v19), result.f64[0]), v19)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v18), v20), result.f64[0]), v20));
  v21 = *(_QWORD *)(a2 + 96);
  v22 = *(_QWORD *)(v21 + 16);
  v23 = *(_DWORD *)(v21 + 4);
  v24 = *(int *)(a2 + 104);
  v25 = *(float32x4_t *)(v22 + v23 * (uint64_t)a5 + v24);
  v26 = *(float32x4_t *)(v22 + v23 * (uint64_t)a4 + v24);
  v27 = vcvtq_f64_f32(*(float32x2_t *)v25.f32);
  v28 = vcvt_hight_f64_f32(v25);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 16)
                 + *(int *)(*(_QWORD *)(a1 + 96) + 4) * (uint64_t)*a3
                 + *(int *)(a1 + 104)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v26.f32), v27), result.f64[0]), v27)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v26), v28), result.f64[0]), v28));
  if ((a6 & 1) != 0)
  {
    v29 = *(_QWORD *)(a2 + 112);
    v30 = *(_QWORD *)(v29 + 16);
    LODWORD(v29) = *(_DWORD *)(v29 + 4);
    v31 = *(int *)(a2 + 120);
    v32 = *(float32x4_t *)(v30 + (int)v29 * (uint64_t)a5 + v31);
    v33 = *(float32x4_t *)(v30 + (int)v29 * (uint64_t)a4 + v31);
    v34 = vcvtq_f64_f32(*(float32x2_t *)v32.f32);
    v35 = vcvt_hight_f64_f32(v32);
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 16)
                   + *(int *)(*(_QWORD *)(a1 + 112) + 4) * (uint64_t)*a3
                   + *(int *)(a1 + 120)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v33.f32), v34), result.f64[0]), v34)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v33), v35), result.f64[0]), v35));
    if ((a6 & 2) == 0)
    {
LABEL_3:
      if ((a6 & 4) == 0)
        goto LABEL_4;
      goto LABEL_12;
    }
  }
  else if ((a6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v36 = *(_QWORD *)(a2 + 128);
  v37 = *(_QWORD *)(v36 + 16);
  LODWORD(v36) = *(_DWORD *)(v36 + 4);
  v38 = *(int *)(a2 + 136);
  v39 = *(float32x4_t *)(v37 + (int)v36 * (uint64_t)a5 + v38);
  v40 = *(float32x4_t *)(v37 + (int)v36 * (uint64_t)a4 + v38);
  v41 = vcvtq_f64_f32(*(float32x2_t *)v39.f32);
  v42 = vcvt_hight_f64_f32(v39);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 16)
                 + *(int *)(*(_QWORD *)(a1 + 128) + 4) * (uint64_t)*a3
                 + *(int *)(a1 + 136)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v40.f32), v41), result.f64[0]), v41)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v40), v42), result.f64[0]), v42));
  if ((a6 & 4) == 0)
  {
LABEL_4:
    if ((a6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_13;
  }
LABEL_12:
  v43 = *(_QWORD *)(a2 + 144);
  v44 = *(_QWORD *)(v43 + 16);
  LODWORD(v43) = *(_DWORD *)(v43 + 4);
  v45 = *(int *)(a2 + 152);
  v46 = *(float32x4_t *)(v44 + (int)v43 * (uint64_t)a5 + v45);
  v47 = *(float32x4_t *)(v44 + (int)v43 * (uint64_t)a4 + v45);
  v48 = vcvtq_f64_f32(*(float32x2_t *)v46.f32);
  v49 = vcvt_hight_f64_f32(v46);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 144) + 16)
                 + *(int *)(*(_QWORD *)(a1 + 144) + 4) * (uint64_t)*a3
                 + *(int *)(a1 + 152)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v47.f32), v48), result.f64[0]), v48)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v47), v49), result.f64[0]), v49));
  if ((a6 & 8) == 0)
  {
LABEL_5:
    if ((a6 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_14;
  }
LABEL_13:
  v50 = *(_QWORD *)(a2 + 160);
  v51 = *(_QWORD *)(v50 + 16);
  LODWORD(v50) = *(_DWORD *)(v50 + 4);
  v52 = *(int *)(a2 + 168);
  v53 = *(float32x4_t *)(v51 + (int)v50 * (uint64_t)a5 + v52);
  v54 = *(float32x4_t *)(v51 + (int)v50 * (uint64_t)a4 + v52);
  v55 = vcvtq_f64_f32(*(float32x2_t *)v53.f32);
  v56 = vcvt_hight_f64_f32(v53);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 16)
                 + *(int *)(*(_QWORD *)(a1 + 160) + 4) * (uint64_t)*a3
                 + *(int *)(a1 + 168)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v54.f32), v55), result.f64[0]), v55)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v54), v56), result.f64[0]), v56));
  if ((a6 & 0x10) == 0)
  {
LABEL_6:
    if ((a6 & 0x20) == 0)
      goto LABEL_7;
    goto LABEL_15;
  }
LABEL_14:
  v57 = *(_QWORD *)(a2 + 176);
  v58 = *(_QWORD *)(v57 + 16);
  LODWORD(v57) = *(_DWORD *)(v57 + 4);
  v59 = *(int *)(a2 + 184);
  v60 = *(float32x4_t *)(v58 + (int)v57 * (uint64_t)a5 + v59);
  v61 = *(float32x4_t *)(v58 + (int)v57 * (uint64_t)a4 + v59);
  v62 = vcvtq_f64_f32(*(float32x2_t *)v60.f32);
  v63 = vcvt_hight_f64_f32(v60);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 176) + 16)
                 + *(int *)(*(_QWORD *)(a1 + 176) + 4) * (uint64_t)*a3
                 + *(int *)(a1 + 184)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v61.f32), v62), result.f64[0]), v62)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v61), v63), result.f64[0]), v63));
  if ((a6 & 0x20) == 0)
  {
LABEL_7:
    if ((a6 & 0x40) == 0)
      goto LABEL_8;
LABEL_16:
    v71 = *(_QWORD *)(a2 + 208);
    v72 = *(_QWORD *)(v71 + 16);
    LODWORD(v71) = *(_DWORD *)(v71 + 4);
    v73 = *(int *)(a2 + 216);
    v74 = *(float32x4_t *)(v72 + (int)v71 * (uint64_t)a5 + v73);
    v75 = *(float32x4_t *)(v72 + (int)v71 * (uint64_t)a4 + v73);
    v76 = vcvtq_f64_f32(*(float32x2_t *)v74.f32);
    v77 = vcvt_hight_f64_f32(v74);
    *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 208) + 16)
                   + *(int *)(*(_QWORD *)(a1 + 208) + 4) * (uint64_t)*a3
                   + *(int *)(a1 + 216)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v75.f32), v76), result.f64[0]), v76)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v75), v77), result.f64[0]), v77));
    if ((a6 & 0x80) == 0)
      goto LABEL_9;
    goto LABEL_17;
  }
LABEL_15:
  v64 = *(_QWORD *)(a2 + 192);
  v65 = *(_QWORD *)(v64 + 16);
  LODWORD(v64) = *(_DWORD *)(v64 + 4);
  v66 = *(int *)(a2 + 200);
  v67 = *(float32x4_t *)(v65 + (int)v64 * (uint64_t)a5 + v66);
  v68 = *(float32x4_t *)(v65 + (int)v64 * (uint64_t)a4 + v66);
  v69 = vcvtq_f64_f32(*(float32x2_t *)v67.f32);
  v70 = vcvt_hight_f64_f32(v67);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + 16)
                 + *(int *)(*(_QWORD *)(a1 + 192) + 4) * (uint64_t)*a3
                 + *(int *)(a1 + 200)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v68.f32), v69), result.f64[0]), v69)), vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v68), v70), result.f64[0]), v70));
  if ((a6 & 0x40) != 0)
    goto LABEL_16;
LABEL_8:
  if ((a6 & 0x80) == 0)
  {
LABEL_9:
    ++*a3;
    return result;
  }
LABEL_17:
  v78 = *(_QWORD *)(a2 + 224);
  v79 = *(_QWORD *)(v78 + 16);
  LODWORD(v78) = *(_DWORD *)(v78 + 4);
  v80 = *(int *)(a2 + 232);
  v81 = *(float32x4_t *)(v79 + (int)v78 * (uint64_t)a5 + v80);
  v82 = *(float32x4_t *)(v79 + (int)v78 * (uint64_t)a4 + v80);
  v83 = vcvtq_f64_f32(*(float32x2_t *)v81.f32);
  v84 = vcvt_hight_f64_f32(v81);
  v85 = vmulq_n_f64(vsubq_f64(vcvtq_f64_f32(*(float32x2_t *)v82.f32), v83), result.f64[0]);
  result = vaddq_f64(vmulq_n_f64(vsubq_f64(vcvt_hight_f64_f32(v82), v84), result.f64[0]), v84);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 16)
                 + *(int *)(*(_QWORD *)(a1 + 224) + 4) * (uint64_t)(*a3)++
                 + *(int *)(a1 + 232)) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v85, v83)), result);
  return result;
}

void HGeometryData::ClipToEdge(int a1, int a2, uint64_t a3, int a4, uint64_t a5, int *a6, char a7, float a8)
{
  int v14;
  char v15;
  double v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  float v21;
  float64x2_t v22;
  int v23;
  char v24;
  BOOL v25;
  char v26;
  int v27;
  char v28;
  float64x2_t v29;
  float64x2_t v30;

  *a6 = 0;
  v30 = *(float64x2_t *)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 16) + *(int *)(a3 + 88));
  if ((a4 - 1) <= 0xFFFFFFFD)
  {
    v14 = 0;
    v15 = a1 ^ 1;
    v16 = a8;
    v17 = -a4;
    v18 = 1;
    v19 = 4 * a2;
    do
    {
      v20 = v14;
      if (v17 + v18)
        v14 = v18;
      else
        v14 = 0;
      v22 = *(float64x2_t *)(*(_QWORD *)(*(_QWORD *)(a3 + 80) + 16)
                           + *(int *)(*(_QWORD *)(a3 + 80) + 4) * (uint64_t)v14
                           + *(int *)(a3 + 88));
      v29 = v22;
      v21 = *(float *)((char *)v30.f64 + v19);
      LODWORD(v22.f64[0]) = *(_DWORD *)((char *)v29.f64 + v19);
      if (*(float *)v22.f64 < a8)
        v23 = 1;
      else
        v23 = a1;
      if ((v23 & 1) != 0 || v21 < a8)
      {
        v24 = *(float *)v22.f64 > a8 ? 1 : v15;
        if ((v24 & 1) != 0 || v21 > a8)
        {
          if ((a1 & 1) == 0 && (*(float *)v22.f64 < a8 ? (v25 = v21 < a8) : (v25 = 1), !v25)
            || (*(float *)v22.f64 <= a8 ? (v26 = 1) : (v26 = v15), (v26 & 1) == 0 && v21 <= a8))
          {
            v22.f64[0] = (v16 - v21) / (*(float *)v22.f64 - v21);
            HGeometryData::InterpVertex(a5, a3, a6, v14, v20, a7, v22);
            goto LABEL_5;
          }
          if (v21 >= a8)
            v27 = 1;
          else
            v27 = v23;
          if (v21 <= a8)
            v28 = 1;
          else
            v28 = v24;
          if (v27 == 1 && (v28 & 1) != 0)
            goto LABEL_5;
          v22.f64[0] = (v16 - v21) / (*(float *)v22.f64 - v21);
          HGeometryData::InterpVertex(a5, a3, a6, v14, v20, a7, v22);
        }
      }
      HGeometryData::CopyVertex(a5, a3, a6, v14, a7);
LABEL_5:
      v30 = v29;
      ++v18;
    }
    while (v17 + v18 != 1);
  }
}

uint64_t HGeometryData::ClipPoly(HGArrayDataRef *a1, int *a2, unint64_t a3, unint64_t a4, int *a5, unsigned int a6, HGArrayDataRef *a7, uint64_t a8, _QWORD *a9)
{
  float v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  void *v22;
  int v23;
  const void *v24;
  uint64_t v25;
  HGArrayDataRef *v26;
  uint64_t v27;
  HGArrayDataRef *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  void *v33;
  void *v34;
  int v35;
  const void *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  void *v41;
  void *v42;
  int v43;
  const void *v44;
  uint64_t v45;
  HGArrayDataRef *v46;
  uint64_t v47;
  HGArrayDataRef *v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  void *v53;
  void *v54;
  int v55;
  const void *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  void *v61;
  void *v62;
  int v63;
  const void *v64;
  uint64_t v65;
  HGArrayDataRef *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  int v71;
  void *v72;
  void *v73;
  int v74;
  const void *v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  void *v80;
  void *v81;
  int v82;
  const void *v83;
  HGArrayDataRef *v84;
  uint64_t v85;
  int v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  HGArrayDataRef *v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  int v96;
  int v97;
  int v98;
  void *v99;
  void *v100;
  int v101;
  const void *v102;
  uint64_t v103;
  _QWORD *v104;
  HGArrayDataRef *v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  int v110;
  int v111;
  int v112;
  void *v113;
  void *v114;
  int v115;
  const void *v116;
  uint64_t v117;
  int v118;
  int *v119;
  int v120;
  __n128 v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  float32x4_t *v125;
  int8x16_t v126;
  unsigned __int32 v127;
  _BOOL4 v128;
  unsigned int v129;
  int v130;
  int v131;
  int8x16_t v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  HGArrayDataRef *v139;
  HGArrayDataRef *v140;
  HGArrayDataRef *v143;
  HGArrayDataRef *v144;
  unsigned int v145;
  int v146[4];
  int v147[4];
  int v148[4];
  int v149[4];
  int v150[4];
  int v151[4];
  int v152[4];
  int v153[4];
  int v154[4];
  int v155[4];
  int v156[4];
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  int v160[4];

  v159 = a6;
  v157 = 0;
  v158 = 0x1C00000000;
  HGArrayDataRef::allocate((HGArrayDataRef *)&v157, 16, 0, 0);
  v144 = a1;
  v15 = (float)((float)a6 * 1.5) + 4.0;
  v16 = v15;
  v17 = *(_QWORD *)(a8 + 64);
  v143 = a7;
  v145 = v15;
  if (!v17)
  {
    if ((int)v16 <= 0)
    {
      v27 = a9[8];
      if (!v27)
        goto LABEL_31;
    }
    else
    {
      HGArrayDataRef::allocate((HGArrayDataRef *)(a8 + 64), 16, v16, v15);
      v26 = (HGArrayDataRef *)(a9 + 8);
      v27 = a9[8];
      v16 = v145;
      if (!v27)
      {
LABEL_17:
        HGArrayDataRef::allocate(v26, 16, v16, v16);
        v28 = (HGArrayDataRef *)(a8 + 80);
        v29 = *(_QWORD *)(a8 + 80);
        v16 = v145;
        if (v29)
          goto LABEL_32;
        goto LABEL_46;
      }
    }
LABEL_20:
    v30 = *(_DWORD *)(v27 + 12);
    if (v30 >= (int)v16)
    {
LABEL_30:
      *(_DWORD *)(v27 + 8) = v16;
      goto LABEL_31;
    }
    v31 = *(_DWORD *)(v27 + 4);
    v32 = v31 * v16;
    *(_DWORD *)(v27 + 12) = v16;
    if (v31 * (_DWORD)v16)
    {
      v33 = (void *)operator new[]();
      v34 = v33;
      v35 = v31 * v30;
      if (v31 * v30)
      {
        v36 = *(const void **)(v27 + 16);
        if (v36)
        {
          if (v35 >= v32)
            v35 = v32;
          memcpy(v33, v36, v35);
        }
      }
      v16 = v145;
      v37 = *(_QWORD *)(v27 + 16);
      if (!v37)
        goto LABEL_29;
    }
    else
    {
      v34 = 0;
      v37 = *(_QWORD *)(v27 + 16);
      if (!v37)
        goto LABEL_29;
    }
    MEMORY[0x1B5E2914C](v37, 0x1000C8077774924, v16);
    v16 = v145;
LABEL_29:
    *(_QWORD *)(v27 + 16) = v34;
    goto LABEL_30;
  }
  v18 = *(_DWORD *)(v17 + 12);
  if (v18 < (int)v16)
  {
    v19 = *(_DWORD *)(v17 + 4);
    v20 = v19 * v16;
    *(_DWORD *)(v17 + 12) = v16;
    if (v19 * (_DWORD)v16)
    {
      v21 = (void *)operator new[]();
      v22 = v21;
      v23 = v19 * v18;
      if (v19 * v18)
      {
        v24 = *(const void **)(v17 + 16);
        if (v24)
        {
          if (v23 >= v20)
            v23 = v20;
          memcpy(v21, v24, v23);
        }
      }
      v16 = v145;
      v25 = *(_QWORD *)(v17 + 16);
      if (!v25)
        goto LABEL_11;
    }
    else
    {
      v22 = 0;
      v25 = *(_QWORD *)(v17 + 16);
      if (!v25)
        goto LABEL_11;
    }
    MEMORY[0x1B5E2914C](v25, 0x1000C8077774924, v16);
    v16 = v145;
LABEL_11:
    *(_QWORD *)(v17 + 16) = v22;
  }
  *(_DWORD *)(v17 + 8) = v16;
  v26 = (HGArrayDataRef *)(a9 + 8);
  v27 = a9[8];
  if (v27)
    goto LABEL_20;
  if ((int)v16 > 0)
    goto LABEL_17;
LABEL_31:
  v28 = (HGArrayDataRef *)(a8 + 80);
  v29 = *(_QWORD *)(a8 + 80);
  if (!v29)
  {
    if ((int)v16 < 1)
    {
      v47 = a9[10];
      if (!v47)
        goto LABEL_67;
      goto LABEL_56;
    }
LABEL_46:
    HGArrayDataRef::allocate(v28, 16, v16, v16);
    v46 = (HGArrayDataRef *)(a9 + 10);
    v47 = a9[10];
    v16 = v145;
    if (!v47)
    {
LABEL_47:
      HGArrayDataRef::allocate(v46, 16, v16, v16);
      v48 = (HGArrayDataRef *)(a8 + 96);
      v49 = *(_QWORD *)(a8 + 96);
      v16 = v145;
      if (v49)
        goto LABEL_68;
      goto LABEL_82;
    }
LABEL_56:
    v50 = *(_DWORD *)(v47 + 12);
    if (v50 >= (int)v16)
    {
LABEL_66:
      *(_DWORD *)(v47 + 8) = v16;
      goto LABEL_67;
    }
    v51 = *(_DWORD *)(v47 + 4);
    v52 = v51 * v16;
    *(_DWORD *)(v47 + 12) = v16;
    if (v51 * (_DWORD)v16)
    {
      v53 = (void *)operator new[]();
      v54 = v53;
      v55 = v51 * v50;
      if (v51 * v50)
      {
        v56 = *(const void **)(v47 + 16);
        if (v56)
        {
          if (v55 >= v52)
            v55 = v52;
          memcpy(v53, v56, v55);
        }
      }
      v16 = v145;
      v57 = *(_QWORD *)(v47 + 16);
      if (!v57)
        goto LABEL_65;
    }
    else
    {
      v54 = 0;
      v57 = *(_QWORD *)(v47 + 16);
      if (!v57)
        goto LABEL_65;
    }
    MEMORY[0x1B5E2914C](v57, 0x1000C8077774924, v16);
    v16 = v145;
LABEL_65:
    *(_QWORD *)(v47 + 16) = v54;
    goto LABEL_66;
  }
LABEL_32:
  v38 = *(_DWORD *)(v29 + 12);
  if (v38 >= (int)v16)
    goto LABEL_42;
  v39 = *(_DWORD *)(v29 + 4);
  v40 = v39 * v16;
  *(_DWORD *)(v29 + 12) = v16;
  if (v39 * (_DWORD)v16)
  {
    v41 = (void *)operator new[]();
    v42 = v41;
    v43 = v39 * v38;
    if (v39 * v38)
    {
      v44 = *(const void **)(v29 + 16);
      if (v44)
      {
        if (v43 >= v40)
          v43 = v40;
        memcpy(v41, v44, v43);
      }
    }
    v16 = v145;
    v45 = *(_QWORD *)(v29 + 16);
    if (!v45)
      goto LABEL_41;
  }
  else
  {
    v42 = 0;
    v45 = *(_QWORD *)(v29 + 16);
    if (!v45)
      goto LABEL_41;
  }
  MEMORY[0x1B5E2914C](v45, 0x1000C8077774924, v16);
  v16 = v145;
LABEL_41:
  *(_QWORD *)(v29 + 16) = v42;
LABEL_42:
  *(_DWORD *)(v29 + 8) = v16;
  v46 = (HGArrayDataRef *)(a9 + 10);
  v47 = a9[10];
  if (v47)
    goto LABEL_56;
  if ((int)v16 >= 1)
    goto LABEL_47;
LABEL_67:
  v48 = (HGArrayDataRef *)(a8 + 96);
  v49 = *(_QWORD *)(a8 + 96);
  if (!v49)
  {
    if ((int)v16 < 1)
    {
      v67 = a9[12];
      if (!v67)
        goto LABEL_101;
      goto LABEL_90;
    }
LABEL_82:
    HGArrayDataRef::allocate(v48, 16, v16, v16);
    v66 = (HGArrayDataRef *)(a9 + 12);
    v67 = a9[12];
    v16 = v145;
    if (!v67)
    {
LABEL_83:
      HGArrayDataRef::allocate(v66, 16, v16, v16);
      v68 = v157;
      v16 = v145;
      if (v157)
        goto LABEL_102;
LABEL_110:
      HGArrayDataRef::allocate((HGArrayDataRef *)&v157, 16, v16, v145);
      v16 = v145;
      goto LABEL_111;
    }
LABEL_90:
    v69 = *(_DWORD *)(v67 + 12);
    if (v69 >= (int)v16)
    {
LABEL_100:
      *(_DWORD *)(v67 + 8) = v16;
      goto LABEL_101;
    }
    v70 = *(_DWORD *)(v67 + 4);
    v71 = v70 * v16;
    *(_DWORD *)(v67 + 12) = v16;
    if (v70 * (_DWORD)v16)
    {
      v72 = (void *)operator new[]();
      v73 = v72;
      v74 = v70 * v69;
      if (v70 * v69)
      {
        v75 = *(const void **)(v67 + 16);
        if (v75)
        {
          if (v74 >= v71)
            v74 = v71;
          memcpy(v72, v75, v74);
        }
      }
      v16 = v145;
      v76 = *(_QWORD *)(v67 + 16);
      if (!v76)
        goto LABEL_99;
    }
    else
    {
      v73 = 0;
      v76 = *(_QWORD *)(v67 + 16);
      if (!v76)
        goto LABEL_99;
    }
    MEMORY[0x1B5E2914C](v76, 0x1000C8077774924, v16);
    v16 = v145;
LABEL_99:
    *(_QWORD *)(v67 + 16) = v73;
    goto LABEL_100;
  }
LABEL_68:
  v58 = *(_DWORD *)(v49 + 12);
  if (v58 >= (int)v16)
    goto LABEL_78;
  v59 = *(_DWORD *)(v49 + 4);
  v60 = v59 * v16;
  *(_DWORD *)(v49 + 12) = v16;
  if (v59 * (_DWORD)v16)
  {
    v61 = (void *)operator new[]();
    v62 = v61;
    v63 = v59 * v58;
    if (v59 * v58)
    {
      v64 = *(const void **)(v49 + 16);
      if (v64)
      {
        if (v63 >= v60)
          v63 = v60;
        memcpy(v61, v64, v63);
      }
    }
    v16 = v145;
    v65 = *(_QWORD *)(v49 + 16);
    if (!v65)
      goto LABEL_77;
  }
  else
  {
    v62 = 0;
    v65 = *(_QWORD *)(v49 + 16);
    if (!v65)
      goto LABEL_77;
  }
  MEMORY[0x1B5E2914C](v65, 0x1000C8077774924, v16);
  v16 = v145;
LABEL_77:
  *(_QWORD *)(v49 + 16) = v62;
LABEL_78:
  *(_DWORD *)(v49 + 8) = v16;
  v66 = (HGArrayDataRef *)(a9 + 12);
  v67 = a9[12];
  if (v67)
    goto LABEL_90;
  if ((int)v16 >= 1)
    goto LABEL_83;
LABEL_101:
  v68 = v157;
  if (v157)
  {
LABEL_102:
    v77 = *(_DWORD *)(v68 + 12);
    if (v77 < (int)v16)
    {
      v78 = *(_DWORD *)(v68 + 4);
      v79 = v78 * v16;
      *(_DWORD *)(v68 + 12) = v16;
      if (v78 * (_DWORD)v16)
      {
        v80 = (void *)operator new[]();
        v16 = v145;
        v81 = v80;
        v82 = v78 * v77;
        if (v78 * v77)
        {
          v83 = *(const void **)(v68 + 16);
          if (v83)
          {
            if (v82 >= v79)
              v82 = v79;
            memcpy(v80, v83, v82);
            v16 = v145;
          }
        }
      }
      else
      {
        v81 = 0;
      }
      v85 = *(_QWORD *)(v68 + 16);
      if (v85)
      {
        MEMORY[0x1B5E2914C](v85, 0x1000C8077774924, v16);
        v16 = v145;
      }
      *(_QWORD *)(v68 + 16) = v81;
    }
    *(_DWORD *)(v68 + 8) = v16;
    v84 = v143;
    v139 = (HGArrayDataRef *)HIDWORD(a4);
    v140 = (HGArrayDataRef *)HIDWORD(a3);
    if (!a6)
      goto LABEL_122;
    goto LABEL_120;
  }
  if ((int)v16 > 0)
    goto LABEL_110;
LABEL_111:
  v84 = v143;
  v139 = (HGArrayDataRef *)HIDWORD(a4);
  v140 = (HGArrayDataRef *)HIDWORD(a3);
  if (a6)
  {
LABEL_120:
    v86 = 0;
    do
    {
      v87 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)(*(_QWORD *)(*(_QWORD *)a5 + 16)+ *(int *)(*(_QWORD *)a5 + 4) * (uint64_t)v86+ a5[2]), 3);
      v88 = vrecpeq_f32(v87);
      v89 = vmulq_f32(v88, vrecpsq_f32(v87, v88));
      *(float32x4_t *)(*(_QWORD *)(v157 + 16) + *(int *)(v157 + 4) * (uint64_t)v86 + (int)v158) = vmulq_f32(vrecpsq_f32(v87, v89), v89);
      *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 96) + 16)
                + *(int *)(*(_QWORD *)(a8 + 96) + 4) * (uint64_t)v86
                + *(int *)(a8 + 104)) = *(_OWORD *)(*(_QWORD *)(v157 + 16)
                                                  + *(int *)(v157 + 4) * (uint64_t)v86
                                                  + (int)v158);
      *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a8 + 80) + 16)
                     + *(int *)(*(_QWORD *)(a8 + 80) + 4) * (uint64_t)v86
                     + *(int *)(a8 + 88)) = vmulq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)a5 + 16)+ *(int *)(*(_QWORD *)a5 + 4) * (uint64_t)v86+ a5[2]), *(float32x4_t *)(*(_QWORD *)(v157 + 16)+ *(int *)(v157 + 4) * (uint64_t)v86+ (int)v158));
      *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 64) + 16)
                + *(int *)(*(_QWORD *)(a8 + 64) + 4) * (uint64_t)v86
                + *(int *)(a8 + 72)) = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)v84 + 8) + 16)
                                                 + *(int *)(*((_QWORD *)v84 + 8) + 4)
                                                 * (uint64_t)*(int *)(*(_QWORD *)(*(_QWORD *)a2 + 16)
                                                                   + *(int *)(*(_QWORD *)a2 + 4) * (uint64_t)v86
                                                                   + a2[2])
                                                 + *((int *)v84 + 18));
      ++v86;
    }
    while (a6 != v86);
  }
LABEL_122:
  v90 = 0;
  v91 = v144;
  do
  {
    if (((*(_DWORD *)(*((_QWORD *)v91 + 33) + 1068) >> v90) & 1) == 0)
      goto LABEL_123;
    v92 = a8 + 16 * v90;
    v95 = *(_QWORD *)(v92 + 112);
    v94 = (int *)(v92 + 112);
    v93 = v95;
    if (!v95)
    {
      if ((int)v16 <= 0)
      {
        v106 = a9[2 * v90 + 14];
        if (!v106)
          goto LABEL_154;
      }
      else
      {
        HGArrayDataRef::allocate((HGArrayDataRef *)v94, 16, v16, v145);
        v16 = v145;
        v108 = &a9[2 * v90];
        v109 = v108[14];
        v105 = (HGArrayDataRef *)(v108 + 14);
        v106 = v109;
        if (!v109)
        {
LABEL_141:
          HGArrayDataRef::allocate(v105, 16, v16, v145);
          v16 = v145;
          goto LABEL_154;
        }
      }
LABEL_143:
      v110 = *(_DWORD *)(v106 + 12);
      if (v110 >= (int)v16)
      {
LABEL_153:
        *(_DWORD *)(v106 + 8) = v16;
        goto LABEL_154;
      }
      v111 = *(_DWORD *)(v106 + 4);
      v112 = v111 * v16;
      *(_DWORD *)(v106 + 12) = v16;
      if (v111 * (_DWORD)v16)
      {
        v113 = (void *)operator new[]();
        v16 = v145;
        v114 = v113;
        v115 = v111 * v110;
        if (v111 * v110)
        {
          v116 = *(const void **)(v106 + 16);
          if (v116)
          {
            if (v115 >= v112)
              v115 = v112;
            memcpy(v113, v116, v115);
            v16 = v145;
          }
        }
        v117 = *(_QWORD *)(v106 + 16);
        if (!v117)
          goto LABEL_152;
      }
      else
      {
        v114 = 0;
        v117 = *(_QWORD *)(v106 + 16);
        if (!v117)
          goto LABEL_152;
      }
      MEMORY[0x1B5E2914C](v117, 0x1000C8077774924, v16);
      v16 = v145;
LABEL_152:
      *(_QWORD *)(v106 + 16) = v114;
      goto LABEL_153;
    }
    v96 = *(_DWORD *)(v93 + 12);
    if (v96 >= (int)v16)
      goto LABEL_136;
    v97 = *(_DWORD *)(v93 + 4);
    v98 = v97 * v16;
    *(_DWORD *)(v93 + 12) = v16;
    if (v97 * (_DWORD)v16)
    {
      v99 = (void *)operator new[]();
      v16 = v145;
      v100 = v99;
      v101 = v97 * v96;
      if (v97 * v96)
      {
        v102 = *(const void **)(v93 + 16);
        if (v102)
        {
          if (v101 >= v98)
            v101 = v98;
          memcpy(v99, v102, v101);
          v16 = v145;
        }
      }
      v103 = *(_QWORD *)(v93 + 16);
      if (!v103)
        goto LABEL_135;
    }
    else
    {
      v100 = 0;
      v103 = *(_QWORD *)(v93 + 16);
      if (!v103)
        goto LABEL_135;
    }
    MEMORY[0x1B5E2914C](v103, 0x1000C8077774924, v16);
    v16 = v145;
LABEL_135:
    *(_QWORD *)(v93 + 16) = v100;
LABEL_136:
    *(_DWORD *)(v93 + 8) = v16;
    v104 = &a9[2 * v90];
    v107 = v104[14];
    v105 = (HGArrayDataRef *)(v104 + 14);
    v106 = v107;
    if (v107)
      goto LABEL_143;
    if ((int)v16 > 0)
      goto LABEL_141;
LABEL_154:
    v91 = v144;
    if (a6)
    {
      v118 = 0;
      do
      {
        v119 = (int *)((char *)v143 + 16 * v90 + 112);
        *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)v94 + 16) + *(int *)(*(_QWORD *)v94 + 4) * (uint64_t)v118 + v94[2]) = vmulq_f32(*(float32x4_t *)(*(_QWORD *)(*(_QWORD *)v119 + 16) + *(int *)(*(_QWORD *)v119 + 4) * (uint64_t)*(int *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + *(int *)(*(_QWORD *)a2 + 4) * (uint64_t)v118 + a2[2]) + v119[2]), *(float32x4_t *)(*(_QWORD *)(v157 + 16) + *(int *)(v157 + 4) * (uint64_t)v118 + (int)v158));
        ++v118;
      }
      while (a6 != v118);
    }
LABEL_123:
    ++v90;
  }
  while (v90 != 8);
  v160[0] = 0;
  v120 = *(_DWORD *)(*((_QWORD *)v91 + 33) + 1068);
  HGeometryData::ClipToEdge(1, 0, a8, a6, (uint64_t)a9, v160, v120, (float)(int)a4);
  HGeometryData::ClipToEdge(1, 1, (uint64_t)a9, v160[0], a8, (int *)&v159, v120, (float)(int)v139);
  HGeometryData::ClipToEdge(0, 0, a8, v159, (uint64_t)a9, v160, v120, (float)(int)a3);
  HGeometryData::ClipToEdge(0, 1, (uint64_t)a9, v160[0], a8, (int *)&v159, v120, (float)(int)v140);
  v122 = v159;
  if (v159 >= 2)
  {
    v123 = 0;
    v124 = *(_QWORD *)(a8 + 80);
    v125 = (float32x4_t *)(*(_QWORD *)(v124 + 16) + *(int *)(a8 + 88));
    v126 = vmvnq_s8((int8x16_t)vceqq_f32(*v125, *(float32x4_t *)((char *)v125 + (int)(*(_DWORD *)(v124 + 4) * (v159 - 1)))));
    *(int32x2_t *)v126.i8 = vpmin_s32(*(int32x2_t *)v126.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v126, v126, 8uLL));
    v127 = vpmin_s32(*(int32x2_t *)v126.i8, *(int32x2_t *)v126.i8).u32[0];
    v128 = v127 == 0;
    v129 = v128 - v159;
    if (v127)
      v122 = v159;
    else
      v122 = v159 - 1;
    if (v127)
      v130 = 0;
    else
      v130 = *(_DWORD *)(v124 + 4);
    v121 = *(__n128 *)((char *)v125 + v130);
    LODWORD(v125) = *(_DWORD *)(a8 + 88);
    do
    {
      while (1)
      {
        v131 = v128 + v123;
        if (!v123)
          break;
        v132 = vmvnq_s8((int8x16_t)vceqq_f32((float32x4_t)v121, *(float32x4_t *)(*(_QWORD *)(v124 + 16)+ *(int *)(v124 + 4) * (uint64_t)v131+ (int)v125)));
        *(int32x2_t *)v132.i8 = vpmin_s32(*(int32x2_t *)v132.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL));
        if (vpmin_s32(*(int32x2_t *)v132.i8, *(int32x2_t *)v132.i8).u32[0])
          break;
        v122 = (v122 - 1);
        ++v123;
        if (!(v129 + v123))
          goto LABEL_190;
      }
      *(_OWORD *)v146 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 64) + 16)
                                  + *(int *)(*(_QWORD *)(a8 + 64) + 4) * (uint64_t)v131
                                  + *(int *)(a8 + 72));
      *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 64)) = *(_OWORD *)v146;
      *(_OWORD *)v147 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 80) + 16)
                                  + *(int *)(*(_QWORD *)(a8 + 80) + 4) * (uint64_t)v131
                                  + *(int *)(a8 + 88));
      *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 80)) = *(_OWORD *)v147;
      *(_OWORD *)v148 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 96) + 16)
                                  + *(int *)(*(_QWORD *)(a8 + 96) + 4) * (uint64_t)v131
                                  + *(int *)(a8 + 104));
      *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 96)) = *(_OWORD *)v148;
      v133 = *(_DWORD *)(*((_QWORD *)v91 + 33) + 1068);
      if ((v133 & 1) != 0)
      {
        *(_OWORD *)v149 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 112) + 16)
                                    + *(int *)(*(_QWORD *)(a8 + 112) + 4) * (uint64_t)v131
                                    + *(int *)(a8 + 120));
        *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 112)) = *(_OWORD *)v149;
        v133 = *(_DWORD *)(*((_QWORD *)v91 + 33) + 1068);
      }
      if ((v133 & 2) != 0)
      {
        *(_OWORD *)v150 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 128) + 16)
                                    + *(int *)(*(_QWORD *)(a8 + 128) + 4) * (uint64_t)v131
                                    + *(int *)(a8 + 136));
        *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 128)) = *(_OWORD *)v150;
        v133 = *(_DWORD *)(*((_QWORD *)v91 + 33) + 1068);
      }
      if ((v133 & 4) != 0)
      {
        *(_OWORD *)v151 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 144) + 16)
                                    + *(int *)(*(_QWORD *)(a8 + 144) + 4) * (uint64_t)v131
                                    + *(int *)(a8 + 152));
        *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 144)) = *(_OWORD *)v151;
        v133 = *(_DWORD *)(*((_QWORD *)v91 + 33) + 1068);
      }
      if ((v133 & 8) != 0)
      {
        *(_OWORD *)v152 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 160) + 16)
                                    + *(int *)(*(_QWORD *)(a8 + 160) + 4) * (uint64_t)v131
                                    + *(int *)(a8 + 168));
        *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 160)) = *(_OWORD *)v152;
        v133 = *(_DWORD *)(*((_QWORD *)v91 + 33) + 1068);
      }
      if ((v133 & 0x10) != 0)
      {
        *(_OWORD *)v153 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 176) + 16)
                                    + *(int *)(*(_QWORD *)(a8 + 176) + 4) * (uint64_t)v131
                                    + *(int *)(a8 + 184));
        *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 176)) = *(_OWORD *)v153;
        v133 = *(_DWORD *)(*((_QWORD *)v91 + 33) + 1068);
      }
      if ((v133 & 0x20) != 0)
      {
        *(_OWORD *)v154 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 192) + 16)
                                    + *(int *)(*(_QWORD *)(a8 + 192) + 4) * (uint64_t)v131
                                    + *(int *)(a8 + 200));
        *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 192)) = *(_OWORD *)v154;
        v133 = *(_DWORD *)(*((_QWORD *)v91 + 33) + 1068);
      }
      if ((v133 & 0x40) != 0)
      {
        *(_OWORD *)v155 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 208) + 16)
                                    + *(int *)(*(_QWORD *)(a8 + 208) + 4) * (uint64_t)v131
                                    + *(int *)(a8 + 216));
        *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 208)) = *(_OWORD *)v155;
        v133 = *(_DWORD *)(*((_QWORD *)v91 + 33) + 1068);
      }
      if ((v133 & 0x80) != 0)
      {
        *(_OWORD *)v156 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a8 + 224) + 16)
                                    + *(int *)(*(_QWORD *)(a8 + 224) + 4) * (uint64_t)v131
                                    + *(int *)(a8 + 232));
        *(_OWORD *)HGArray<__simd128_float32_t,(HGFormat)28>::append((HGArrayDataRef *)((char *)v91 + 224)) = *(_OWORD *)v156;
      }
      v124 = *(_QWORD *)(a8 + 80);
      v125 = (float32x4_t *)*(int *)(a8 + 88);
      v121 = *(__n128 *)((char *)v125 + *(_QWORD *)(v124 + 16) + *(int *)(v124 + 4) * (uint64_t)v131);
      ++v123;
    }
    while (v129 + v123);
  }
LABEL_190:
  v134 = v157;
  if (v157)
  {
    do
    {
      v135 = __ldaxr((unsigned int *)v134);
      v136 = v135 - 1;
    }
    while (__stlxr(v136, (unsigned int *)v134));
    if (!v136)
    {
      v137 = *(_QWORD *)(v134 + 16);
      if (v137)
        MEMORY[0x1B5E2914C](v137, 0x1000C8077774924, v121);
      MEMORY[0x1B5E29170](v134, 0x1080C4098BBCF0FLL, v121);
    }
  }
  return v122;
}

void sub_1B29C67EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  HGArray<__simd128_float32_t,(HGFormat)28>::~HGArray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B29C6800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;

  if (a20)
  {
    HGeometryData::HGeometryData();
    exception_object = *(_Unwind_Exception **)(v20 - 96);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B29C6828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  HGArray<__simd128_float32_t,(HGFormat)28>::~HGArray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B29C683C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  HGArray<__simd128_float32_t,(HGFormat)28>::~HGArray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B29C6850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  HGArray<__simd128_float32_t,(HGFormat)28>::~HGArray((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B29C6864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  HGArray<__simd128_float32_t,(HGFormat)28>::~HGArray((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t HGeometryData::GetValidPolygons(uint64_t this, HGArrayDataRef *a2, uint64_t a3, uint64_t a4, int *a5, unsigned int a6, int a7)
{
  unsigned int v7;
  HGArrayDataRef *v10;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  void *v18;
  void *v19;
  const void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v44;
  HGRect v45;

  v7 = a6;
  v10 = (HGArrayDataRef *)this;
  *(_QWORD *)&v45.var0 = a3;
  *(_QWORD *)&v45.var2 = a4;
  if (a7 == -1)
  {
    if (*(_QWORD *)a5)
    {
      v12 = *(_DWORD *)(*(_QWORD *)a5 + 8);
      v22 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        goto LABEL_48;
    }
    else
    {
      v12 = 0;
      v22 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        goto LABEL_48;
    }
    v32 = *(_DWORD *)(v22 + 12);
    if (v32 <= -2)
    {
      v33 = *(_DWORD *)(v22 + 4);
      *(_DWORD *)(v22 + 12) = -1;
      if (v33)
      {
        this = operator new[]();
        v34 = *(_QWORD *)(v22 + 16);
        if (!v34)
        {
          v36 = this;
          goto LABEL_47;
        }
        v35 = v33 * v32;
        if (v33 * v32 >= -v33)
          v35 = -v33;
        v36 = this;
        memcpy((void *)this, *(const void **)(v22 + 16), v35);
      }
      else
      {
        v36 = 0;
        v34 = *(_QWORD *)(v22 + 16);
        if (!v34)
        {
LABEL_47:
          *(_QWORD *)(v22 + 16) = v36;
          goto LABEL_48;
        }
      }
      this = MEMORY[0x1B5E2914C](v34, 0x1000C8077774924);
      goto LABEL_47;
    }
LABEL_48:
    v37 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_58;
    v38 = *(_DWORD *)(v37 + 12);
    if (v38 > -2)
      goto LABEL_58;
    v39 = *(_DWORD *)(v37 + 4);
    *(_DWORD *)(v37 + 12) = -1;
    if (v39)
    {
      this = operator new[]();
      v40 = *(_QWORD *)(v37 + 16);
      if (!v40)
      {
        *(_QWORD *)(v37 + 16) = this;
        if (v12 <= v7)
          return this;
        goto LABEL_63;
      }
      v41 = v39 * v38;
      if (v39 * v38 >= -v39)
        v41 = -v39;
      v42 = this;
      memcpy((void *)this, *(const void **)(v37 + 16), v41);
    }
    else
    {
      v42 = 0;
      v40 = *(_QWORD *)(v37 + 16);
      if (!v40)
      {
LABEL_57:
        *(_QWORD *)(v37 + 16) = v42;
        goto LABEL_58;
      }
    }
    this = MEMORY[0x1B5E2914C](v40, 0x1000C8077774924);
    goto LABEL_57;
  }
  v12 = a7 + a6;
  v13 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    if (a7 > 0)
      this = HGArrayDataRef::allocate((HGArrayDataRef *)this, 4, a7, a7);
LABEL_16:
    v23 = *(_QWORD *)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_36;
    goto LABEL_17;
  }
  v14 = *(_DWORD *)(v13 + 12);
  if (v14 >= a7)
    goto LABEL_16;
  v15 = *(_DWORD *)(v13 + 4);
  v16 = v15 * a7;
  *(_DWORD *)(v13 + 12) = a7;
  if (v15 * a7)
  {
    v17 = v15 * v14;
    v18 = (void *)operator new[]();
    v19 = v18;
    if (v17)
    {
      v20 = *(const void **)(v13 + 16);
      if (v20)
      {
        if (v17 >= v16)
          v21 = v16;
        else
          v21 = v17;
        memcpy(v18, v20, v21);
      }
    }
  }
  else
  {
    v19 = 0;
  }
  this = *(_QWORD *)(v13 + 16);
  if (this)
    this = MEMORY[0x1B5E2914C](this, 0x1000C8077774924);
  *(_QWORD *)(v13 + 16) = v19;
  v23 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
  {
LABEL_36:
    if (a7 > 0)
    {
      this = HGArrayDataRef::allocate(a2, 1, a7, a7);
      if (v12 <= v7)
        return this;
      goto LABEL_63;
    }
LABEL_58:
    if (v12 <= v7)
      return this;
    goto LABEL_63;
  }
LABEL_17:
  v24 = *(_DWORD *)(v23 + 12);
  if (v24 >= a7)
    goto LABEL_58;
  v25 = *(_DWORD *)(v23 + 4);
  v26 = v25 * a7;
  *(_DWORD *)(v23 + 12) = a7;
  if (v25 * a7)
  {
    v27 = v25 * v24;
    v28 = (void *)operator new[]();
    v29 = v28;
    if (v27)
    {
      v30 = *(const void **)(v23 + 16);
      if (v30)
      {
        if (v27 >= v26)
          v31 = v26;
        else
          v31 = v27;
        memcpy(v28, v30, v31);
      }
    }
  }
  else
  {
    v29 = 0;
  }
  this = *(_QWORD *)(v23 + 16);
  if (this)
    this = MEMORY[0x1B5E2914C](this, 0x1000C8077774924);
  *(_QWORD *)(v23 + 16) = v29;
  if (v12 > v7)
  {
    do
    {
LABEL_63:
      v43 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)a5 + 16) + *(int *)(*(_QWORD *)a5 + 4) * (uint64_t)(int)v7 + a5[2]);
      this = HGRectExcludesRect(*(uint64_t *)&v45.var0, *(uint64_t *)&v45.var2, *v43, v43[1]);
      if (!(_DWORD)this)
      {
        *(_DWORD *)HGArray<int,(HGFormat)34>::append(v10) = v7;
        v44 = !HGRect::ContainsRect(&v45, *(HGRect *)(*(_QWORD *)(*(_QWORD *)a5 + 16) + *(int *)(*(_QWORD *)a5 + 4) * (uint64_t)(int)v7 + a5[2]));
        this = HGArray<BOOL,(HGFormat)0>::append(a2);
        *(_BYTE *)this = v44;
      }
      ++v7;
    }
    while (v12 != v7);
  }
  return this;
}

