uint64_t HgcColorCurves::GetDOD(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  HGRenderer *v8;
  HGNode *v9;
  unsigned int v10;
  HGNode *Input;
  uint64_t DOD;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  HGNode *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  switch(a3)
  {
    case 0:
      return v5;
    case 1:
      v8 = a2;
      v9 = this;
      v10 = 1;
      goto LABEL_6;
    case 2:
      v8 = a2;
      v9 = this;
      v10 = 2;
      goto LABEL_6;
    case 3:
      v8 = a2;
      v9 = this;
      v10 = 3;
      goto LABEL_6;
    case 4:
      v8 = a2;
      v9 = this;
      v10 = 4;
LABEL_6:
      Input = HGRenderer::GetInput(v8, v9, v10);
      DOD = HGRenderer::GetDOD(a2, Input);
      v14 = HGRectIntersection(v5, v4, DOD, v13);
      if (HGRectIsNull(v14, v15))
        goto LABEL_7;
      v16 = HGRenderer::GetInput(a2, this, 0);
      v17 = HGRenderer::GetDOD(a2, v16);
      v5 = HGRectUnion(v17, v18, 0, 0);
      break;
    default:
LABEL_7:
      v5 = 0;
      break;
  }
  return v5;
}

uint64_t HgcColorCurves::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGRenderer *v6;
  unsigned int v7;
  HGNode *Input;

  switch(a3)
  {
    case 0:
      return *(_QWORD *)&a4.var0;
    case 1:
      v6 = a2;
      v7 = 1;
      goto LABEL_7;
    case 2:
      v6 = a2;
      v7 = 2;
      goto LABEL_7;
    case 3:
      v6 = a2;
      v7 = 3;
      goto LABEL_7;
    case 4:
      v6 = a2;
      v7 = 4;
LABEL_7:
      Input = HGRenderer::GetInput(v6, this, v7);
      *(_QWORD *)&a4.var0 = HGRenderer::GetDOD(a2, Input);
      break;
    default:
      *(_QWORD *)&a4.var0 = 0;
      break;
  }
  return *(_QWORD *)&a4.var0;
}

void HgcColorCurves::HgcColorCurves(HgcColorCurves *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E6C38;
  v3 = (_OWORD *)operator new();
  v3[16] = 0u;
  v3[17] = 0u;
  v3[14] = 0u;
  v3[15] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[18] = 0u;
  v3[19] = xmmword_1B3050E20;
  v3[20] = xmmword_1B3050FF0;
  v3[21] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcColorCurves *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 5);
  (*(void (**)(HgcColorCurves *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 2, 5);
  (*(void (**)(HgcColorCurves *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 3, 5);
  (*(void (**)(HgcColorCurves *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 4, 5);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28761A4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcColorCurves::~HgcColorCurves(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E6C38;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AF73A19ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcColorCurves::~HgcColorCurves(this);
  HGObject::operator delete(v1);
}

uint64_t HgcColorCurves::SetParameter(HgcColorCurves *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;

  v7 = 0xFFFFFFFFLL;
  switch((int)a2)
  {
    case 0:
      v8 = (float *)*((_QWORD *)this + 51);
      if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
        return 0;
      *v8 = a3;
      v8[1] = a4;
      v9 = v8 + 3;
      v8[2] = a5;
      goto LABEL_92;
    case 1:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[4] == a3 && v10[5] == a4 && v10[6] == a5 && v10[7] == a6)
        return 0;
      v10[4] = a3;
      v10[5] = a4;
      v9 = v10 + 7;
      v10[6] = a5;
      goto LABEL_92;
    case 2:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[8] == a3 && v11[9] == a4 && v11[10] == a5 && v11[11] == a6)
        return 0;
      v11[8] = a3;
      v11[9] = a4;
      v9 = v11 + 11;
      v11[10] = a5;
      goto LABEL_92;
    case 3:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[12] == a3 && v12[13] == a4 && v12[14] == a5 && v12[15] == a6)
        return 0;
      v12[12] = a3;
      v12[13] = a4;
      v9 = v12 + 15;
      v12[14] = a5;
      goto LABEL_92;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[16] == a3 && v13[17] == a4 && v13[18] == a5 && v13[19] == a6)
        return 0;
      v13[16] = a3;
      v13[17] = a4;
      v9 = v13 + 19;
      v13[18] = a5;
      goto LABEL_92;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[20] == a3 && v14[21] == a4 && v14[22] == a5 && v14[23] == a6)
        return 0;
      v14[20] = a3;
      v14[21] = a4;
      v9 = v14 + 23;
      v14[22] = a5;
      goto LABEL_92;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[24] == a3 && v15[25] == a4 && v15[26] == a5 && v15[27] == a6)
        return 0;
      v15[24] = a3;
      v15[25] = a4;
      v9 = v15 + 27;
      v15[26] = a5;
      goto LABEL_92;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[28] == a3 && v16[29] == a4 && v16[30] == a5 && v16[31] == a6)
        return 0;
      v16[28] = a3;
      v16[29] = a4;
      v9 = v16 + 31;
      v16[30] = a5;
      goto LABEL_92;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[32] == a3 && v17[33] == a4 && v17[34] == a5 && v17[35] == a6)
        return 0;
      v17[32] = a3;
      v17[33] = a4;
      v9 = v17 + 35;
      v17[34] = a5;
      goto LABEL_92;
    case 10:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[36] == a3 && v18[37] == a4 && v18[38] == a5 && v18[39] == a6)
        return 0;
      v18[36] = a3;
      v18[37] = a4;
      v9 = v18 + 39;
      v18[38] = a5;
      goto LABEL_92;
    case 11:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[40] == a3 && v19[41] == a4 && v19[42] == a5 && v19[43] == a6)
        return 0;
      v19[40] = a3;
      v19[41] = a4;
      v9 = v19 + 43;
      v19[42] = a5;
      goto LABEL_92;
    case 12:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[44] == a3 && v20[45] == a4 && v20[46] == a5 && v20[47] == a6)
        return 0;
      v20[44] = a3;
      v20[45] = a4;
      v9 = v20 + 47;
      v20[46] = a5;
      goto LABEL_92;
    case 13:
      v21 = (float *)*((_QWORD *)this + 51);
      if (v21[48] == a3 && v21[49] == a4 && v21[50] == a5 && v21[51] == a6)
        return 0;
      v21[48] = a3;
      v21[49] = a4;
      v9 = v21 + 51;
      v21[50] = a5;
      goto LABEL_92;
    case 14:
      v22 = (float *)*((_QWORD *)this + 51);
      if (v22[52] == a3 && v22[53] == a4 && v22[54] == a5 && v22[55] == a6)
        return 0;
      v22[52] = a3;
      v22[53] = a4;
      v9 = v22 + 55;
      v22[54] = a5;
      goto LABEL_92;
    case 15:
      v23 = (float *)*((_QWORD *)this + 51);
      if (v23[56] == a3 && v23[57] == a4 && v23[58] == a5 && v23[59] == a6)
        return 0;
      v23[56] = a3;
      v23[57] = a4;
      v9 = v23 + 59;
      v23[58] = a5;
      goto LABEL_92;
    case 16:
      v24 = (float *)*((_QWORD *)this + 51);
      if (v24[60] == a3 && v24[61] == a4 && v24[62] == a5 && v24[63] == a6)
        return 0;
      v24[60] = a3;
      v24[61] = a4;
      v9 = v24 + 63;
      v24[62] = a5;
      goto LABEL_92;
    case 17:
      v25 = (float *)*((_QWORD *)this + 51);
      if (v25[64] == a3 && v25[65] == a4 && v25[66] == a5 && v25[67] == a6)
        return 0;
      v25[64] = a3;
      v25[65] = a4;
      v9 = v25 + 67;
      v25[66] = a5;
      goto LABEL_92;
    case 18:
      v26 = (float *)*((_QWORD *)this + 51);
      if (v26[68] == a3 && v26[69] == a4 && v26[70] == a5 && v26[71] == a6)
        return 0;
      v26[68] = a3;
      v26[69] = a4;
      v9 = v26 + 71;
      v26[70] = a5;
LABEL_92:
      *v9 = a6;
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return v7;
  }
}

uint64_t HgcColorCurves::GetParameter(HgcColorCurves *this, int a2, float *a3)
{
  uint64_t v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;

  v3 = 0xFFFFFFFFLL;
  switch(a2)
  {
    case 0:
      v4 = (float *)*((_QWORD *)this + 51);
      *a3 = *v4;
      a3[1] = v4[1];
      a3[2] = v4[2];
      v5 = v4 + 3;
      goto LABEL_20;
    case 1:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[4];
      a3[1] = v6[5];
      a3[2] = v6[6];
      v5 = v6 + 7;
      goto LABEL_20;
    case 2:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[8];
      a3[1] = v7[9];
      a3[2] = v7[10];
      v5 = v7 + 11;
      goto LABEL_20;
    case 3:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[12];
      a3[1] = v8[13];
      a3[2] = v8[14];
      v5 = v8 + 15;
      goto LABEL_20;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[16];
      a3[1] = v9[17];
      a3[2] = v9[18];
      v5 = v9 + 19;
      goto LABEL_20;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[20];
      a3[1] = v10[21];
      a3[2] = v10[22];
      v5 = v10 + 23;
      goto LABEL_20;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[24];
      a3[1] = v11[25];
      a3[2] = v11[26];
      v5 = v11 + 27;
      goto LABEL_20;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[28];
      a3[1] = v12[29];
      a3[2] = v12[30];
      v5 = v12 + 31;
      goto LABEL_20;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[32];
      a3[1] = v13[33];
      a3[2] = v13[34];
      v5 = v13 + 35;
      goto LABEL_20;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[36];
      a3[1] = v14[37];
      a3[2] = v14[38];
      v5 = v14 + 39;
      goto LABEL_20;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[40];
      a3[1] = v15[41];
      a3[2] = v15[42];
      v5 = v15 + 43;
      goto LABEL_20;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[44];
      a3[1] = v16[45];
      a3[2] = v16[46];
      v5 = v16 + 47;
      goto LABEL_20;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[48];
      a3[1] = v17[49];
      a3[2] = v17[50];
      v5 = v17 + 51;
      goto LABEL_20;
    case 14:
      v18 = (float *)*((_QWORD *)this + 51);
      *a3 = v18[52];
      a3[1] = v18[53];
      a3[2] = v18[54];
      v5 = v18 + 55;
      goto LABEL_20;
    case 15:
      v19 = (float *)*((_QWORD *)this + 51);
      *a3 = v19[56];
      a3[1] = v19[57];
      a3[2] = v19[58];
      v5 = v19 + 59;
      goto LABEL_20;
    case 16:
      v20 = (float *)*((_QWORD *)this + 51);
      *a3 = v20[60];
      a3[1] = v20[61];
      a3[2] = v20[62];
      v5 = v20 + 63;
      goto LABEL_20;
    case 17:
      v21 = (float *)*((_QWORD *)this + 51);
      *a3 = v21[64];
      a3[1] = v21[65];
      a3[2] = v21[66];
      v5 = v21 + 67;
      goto LABEL_20;
    case 18:
      v22 = (float *)*((_QWORD *)this + 51);
      *a3 = v22[68];
      a3[1] = v22[69];
      a3[2] = v22[70];
      v5 = v22 + 71;
LABEL_20:
      v3 = 0;
      a3[3] = *v5;
      break;
    default:
      return v3;
  }
  return v3;
}

const char *HgcEquirectToSinusoidal::GetProgram(HgcEquirectToSinusoidal *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000005e0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 3.141592741, 1.570796371, 0.1591549367);\n"
             "    const half4 c1 = half4(-6.283185482, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = half2(hg_Params[0].xy);\n"
             "    s0.y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    s0.xy = float2(r0.xy)*float2(c0.xx) + s0.xy;\n"
             "    s0.xz = s0.xy*hg_Params[1].xy;\n"
             "    s0.xz = s0.xz - float2(c0.yz);\n"
             "    s0.z = cos(s0.z);\n"
             "    s0.w = 1.00000f / s0.z;\n"
             "    s0.w = s0.x*s0.w;\n"
             "    s0.z = abs(s0.z);\n"
             "    s0.x = select(s0.x, s0.w, -s0.z < 0.00000h);\n"
             "    s0.x = s0.x + float(c0.y);\n"
             "    s0.z = s0.x*float(c0.w);\n"
             "    s0.z = floor(s0.z);\n"
             "    s0.w = 1.00000f / hg_Params[1].x;\n"
             "    s0.x = s0.z*float(c1.x) + s0.x;\n"
             "    s0.x = s0.x*s0.w;\n"
             "    s0.xy = float2(r0.xy)*-float2(c0.xx) + s0.xy;\n"
             "    s0.w = float(c1.y);\n"
             "    s1.y = dot(s0.xyw, hg_Params[5].xyz);\n"
             "    s1.x = dot(s0.xyw, hg_Params[4].xyz);\n"
             "    s1.xy = s1.xy + hg_Params[6].xy;\n"
             "    s1.xy = s1.xy*hg_Params[6].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=739ef7cd:ec497388:410f5cf9:f088d68f\n"
             "//SIG=00400000:00000000:00000000:00000001:0002:0007:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000583\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 3.141592741, 1.570796371, 0.1591549367);\n"
             "    const float4 c1 = float4(-6.283185482, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Params[0].xy;\n"
             "    r1.y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    r1.x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    r1.xy = r0.xy*c0.xx + r1.xy;\n"
             "    r1.xz = r1.xy*hg_Params[1].xy;\n"
             "    r1.xz = r1.xz - c0.yz;\n"
             "    r1.z = cos(r1.z);\n"
             "    r1.w = 1.00000f / r1.z;\n"
             "    r1.w = r1.x*r1.w;\n"
             "    r1.z = abs(r1.z);\n"
             "    r1.x = select(r1.x, r1.w, -r1.z < 0.00000f);\n"
             "    r1.x = r1.x + c0.y;\n"
             "    r1.z = r1.x*c0.w;\n"
             "    r1.z = floor(r1.z);\n"
             "    r1.w = 1.00000f / hg_Params[1].x;\n"
             "    r1.x = r1.z*c1.x + r1.x;\n"
             "    r1.x = r1.x*r1.w;\n"
             "    r1.xy = r0.xy*-c0.xx + r1.xy;\n"
             "    r1.w = c1.y;\n"
             "    r0.y = dot(r1.xyw, hg_Params[5].xyz);\n"
             "    r0.x = dot(r1.xyw, hg_Params[4].xyz);\n"
             "    r0.xy = r0.xy + hg_Params[6].xy;\n"
             "    r0.xy = r0.xy*hg_Params[6].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=aeeac98c:3c5d117d:e39fb2a0:534a5e83\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:0007:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000641\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 3.141592741, 1.570796371, 0.1591549367);\n"
           "    const highp vec4 c1 = vec4(-6.283185482, 1.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = hg_ProgramLocal0.xy;\n"
           "    r1.y = dot(hg_TexCoord0, hg_ProgramLocal3);\n"
           "    r1.x = dot(hg_TexCoord0, hg_ProgramLocal2);\n"
           "    r1.xy = r0.xy*c0.xx + r1.xy;\n"
           "    r1.xz = r1.xy*hg_ProgramLocal1.xy;\n"
           "    r1.xz = r1.xz - c0.yz;\n"
           "    r1.z = cos(r1.z);\n"
           "    r1.w = 1.00000 / r1.z;\n"
           "    r1.w = r1.x*r1.w;\n"
           "    r1.z = abs(r1.z);\n"
           "    r1.x = -r1.z < 0.00000 ? r1.w : r1.x;\n"
           "    r1.x = r1.x + c0.y;\n"
           "    r1.z = r1.x*c0.w;\n"
           "    r1.z = floor(r1.z);\n"
           "    r1.w = 1.00000 / hg_ProgramLocal1.x;\n"
           "    r1.x = r1.z*c1.x + r1.x;\n"
           "    r1.x = r1.x*r1.w;\n"
           "    r1.xy = r0.xy*-c0.xx + r1.xy;\n"
           "    r1.w = c1.y;\n"
           "    r0.y = dot(r1.xyw, hg_ProgramLocal5.xyz);\n"
           "    r0.x = dot(r1.xyw, hg_ProgramLocal4.xyz);\n"
           "    r0.xy = r0.xy + hg_ProgramLocal6.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal6.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=3a4335bf:4b19fd84:3008ac39:3dc1cae3\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:0007:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcEquirectToSinusoidal::InitProgramDescriptor(HgcEquirectToSinusoidal *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcEquirectToSinusoidal_hgc_visible", "//Metal1.0     \n//LEN=00000004c7\n[[ visible ]] FragmentOut HgcEquirectToSinusoidal_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 3.141592741, 1.570796371, 0.1591549367);\n"
    "    const float4 c1 = float4(-6.283185482, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = hg_Params[0].xy;\n"
    "    r1.y = dot(texCoord0, hg_Params[3]);\n"
    "    r1.x = dot(texCoord0, hg_Params[2]);\n"
    "    r1.xy = r0.xy*c0.xx + r1.xy;\n"
    "    r1.xz = r1.xy*hg_Params[1].xy;\n"
    "    r1.xz = r1.xz - c0.yz;\n"
    "    r1.z = cos(r1.z);\n"
    "    r1.w = 1.00000f / r1.z;\n"
    "    r1.w = r1.x*r1.w;\n"
    "    r1.z = abs(r1.z);\n"
    "    r1.x = select(r1.x, r1.w, -r1.z < 0.00000f);\n"
    "    r1.x = r1.x + c0.y;\n"
    "    r1.z = r1.x*c0.w;\n"
    "    r1.z = floor(r1.z);\n"
    "    r1.w = 1.00000f / hg_Params[1].x;\n"
    "    r1.x = r1.z*c1.x + r1.x;\n"
    "    r1.x = r1.x*r1.w;\n"
    "    r1.xy = r0.xy*-c0.xx + r1.xy;\n"
    "    r1.w = c1.y;\n"
    "    r0.y = dot(r1.xyw, hg_Params[5].xyz);\n"
    "    r0.x = dot(r1.xyw, hg_Params[4].xyz);\n"
    "    r0.xy = r0.xy + hg_Params[6].xy;\n"
    "    r0.xy = r0.xy*hg_Params[6].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2876AC0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcEquirectToSinusoidal");
}

void sub_1B2876AD0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2876C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2876CA0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2876C98);
}

_QWORD *HgcEquirectToSinusoidal::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcEquirectToSinusoidal [hgc1]");
}

uint64_t HgcEquirectToSinusoidal::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 6, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcEquirectToSinusoidal::Bind(HgcEquirectToSinusoidal *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcEquirectToSinusoidal *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcEquirectToSinusoidal::RenderTile(HgcEquirectToSinusoidal *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int32x2_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int64x2_t v68;
  int64x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  float32x4_t v105;
  uint64_t v106;
  int32x4_t v107;
  float32x2_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  float32x4_t *v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  float32x4_t *v121;
  uint64_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  float32x4_t v133;
  int8x16_t v134;
  int32x2_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int64x2_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  int8x16_t v153;
  int8x16_t v154;
  float32x4_t v155;
  int8x16_t v156;
  int8x16_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int32x4_t v166;
  int32x4_t v167;
  uint64_t v168;
  float32x4_t v169;
  uint64_t v170;
  int32x4_t v171;
  float32x2_t v172;
  float32x4_t *v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  int32x4_t v177;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcEquirectToSinusoidal *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v21 = *(float32x4_t *)(v19 + 32);
          v20 = *(float32x4_t *)(v19 + 48);
          v22 = (int8x16_t)vmulq_f32(v17, v20);
          v23 = (int8x16_t)vmulq_f32(v18, v20);
          v24 = (int8x16_t)vaddq_f32((float32x4_t)v22, (float32x4_t)vextq_s8(v22, v22, 4uLL));
          v25 = (int8x16_t)vaddq_f32((float32x4_t)v23, (float32x4_t)vextq_s8(v23, v23, 4uLL));
          v26 = (int8x16_t)vmulq_f32(v17, v21);
          v27 = (int8x16_t)vmulq_f32(v18, v21);
          v28 = (int8x16_t)vaddq_f32((float32x4_t)v26, (float32x4_t)vextq_s8(v26, v26, 4uLL));
          v29 = (int8x16_t)vaddq_f32((float32x4_t)v27, (float32x4_t)vextq_s8(v27, v27, 4uLL));
          v30 = (int8x16_t)vaddq_f32((float32x4_t)v28, (float32x4_t)vextq_s8(v28, v28, 8uLL));
          v31 = *(int8x16_t *)(v19 + 96);
          v32 = *(float32x4_t *)(v19 + 112);
          v33 = (float32x4_t)vbslq_s8(v31, v30, (int8x16_t)vaddq_f32((float32x4_t)v24, (float32x4_t)vextq_s8(v24, v24, 8uLL)));
          v34 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)v29, (float32x4_t)vextq_s8(v29, v29, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v25, (float32x4_t)vextq_s8(v25, v25, 8uLL)));
          v35 = *(int8x16_t *)(v19 + 16);
          v36 = vmulq_laneq_f32(*(float32x4_t *)v19, v32, 2);
          v37 = (int8x16_t)vaddq_f32(v36, v33);
          v38 = (int32x2_t)vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v37.i8);
          *(int32x2_t *)v39.i8 = vdup_lane_s32(v38, 0);
          v39.u64[1] = (unint64_t)vdup_lane_s32(v38, 1);
          v40 = (int8x16_t)vaddq_f32(v36, v34);
          v41 = (int32x2_t)vmul_f32(*(float32x2_t *)v35.i8, *(float32x2_t *)v40.i8);
          *(int32x2_t *)v42.i8 = vdup_lane_s32(v41, 0);
          v42.u64[1] = (unint64_t)vdup_lane_s32(v41, 1);
          v43 = *(int8x16_t *)(v19 + 128);
          v44 = *(float32x4_t *)(v19 + 144);
          v45 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v43, v40, v42), v44);
          v46 = (float32x4_t)vbslq_s8(v43, v37, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v43, v37, v39), v44));
          v47 = (float32x4_t)vbslq_s8(v43, v40, v45);
          v49 = *(float32x4_t *)(v19 + 160);
          v48 = *(int8x16_t *)(v19 + 176);
          v50 = vmulq_f32(v49, v46);
          v51 = vmulq_f32(v49, v47);
          v52 = vcvtq_f32_s32(vcvtq_s32_f32(v50));
          v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
          v54 = vabdq_f32(vsubq_f32(v50, vsubq_f32(v52, (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v52, v50)))), v32);
          v55 = vabdq_f32(vsubq_f32(v51, vsubq_f32(v53, (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v53, v51)))), v32);
          v56 = *(float32x4_t *)(v19 + 192);
          v57 = *(float32x4_t *)(v19 + 208);
          v58 = vsubq_f32(v54, v56);
          v59 = vsubq_f32(v55, v56);
          v60 = vmulq_f32(v58, v58);
          v61 = (int8x16_t)vmulq_f32(v59, v59);
          v62 = *(float32x4_t *)(v19 + 224);
          v63 = *(float32x4_t *)(v19 + 240);
          v64 = (int8x16_t)vaddq_f32(v63, vmulq_f32((float32x4_t)v61, vaddq_f32(v57, vmulq_f32(v62, (float32x4_t)v61))));
          v65 = (int8x16_t)vmulq_f32(v60, vaddq_f32(v63, vmulq_f32(v60, vaddq_f32(v57, vmulq_f32(v62, v60)))));
          v66 = *(float32x4_t *)(v19 + 256);
          v67 = *(float32x4_t *)(v19 + 272);
          v68 = (int64x2_t)vmulq_f32(v58, vaddq_f32(v66, (float32x4_t)v65));
          v65.i64[0] = v46.i64[0];
          v65.i64[1] = v68.i64[1];
          v69 = (int64x2_t)vmulq_f32(v59, vaddq_f32(v66, vmulq_f32((float32x4_t)v61, (float32x4_t)v64)));
          v61.i64[0] = v47.i64[0];
          v61.i64[1] = v69.i64[1];
          v46.i64[1] = vdupq_laneq_s64(v68, 1).u64[0];
          v47.i64[1] = vdupq_laneq_s64(v69, 1).u64[0];
          v70 = (float32x4_t)vrev64q_s32((int32x4_t)v46);
          v71 = (float32x4_t)vrev64q_s32((int32x4_t)v47);
          v72 = vminq_f32(vmaxq_f32(vrecpeq_f32(v70), v66), v67);
          v73 = vminq_f32(vmaxq_f32(vrecpeq_f32(v71), v66), v67);
          v74 = vminq_f32(vmaxq_f32(vmulq_f32(v72, vrecpsq_f32(v70, v72)), v66), v67);
          v75 = vminq_f32(vmaxq_f32(vmulq_f32(v73, vrecpsq_f32(v71, v73)), v66), v67);
          v76 = (int8x16_t)vmulq_f32(v74, vrecpsq_f32(v70, v74));
          v77 = *(int8x16_t *)(v19 + 288);
          v78 = (float32x4_t)vbslq_s8(v77, v76, v65);
          v79 = (float32x4_t)vbslq_s8(v77, (int8x16_t)vmulq_f32(v75, vrecpsq_f32(v71, v75)), v61);
          v80 = vbslq_s8(v77, (int8x16_t)vmulq_n_f32(v78, v78.f32[0]), v65);
          v81 = vbslq_s8(v77, (int8x16_t)vmulq_n_f32(v79, v79.f32[0]), v61);
          v61.i64[0] = *(_QWORD *)(v19 + 312);
          *(int8x8_t *)v75.f32 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v80, v80, 8uLL), *(int8x8_t *)v61.i8);
          v65.i64[0] = v80.i64[0];
          v65.i64[1] = v75.i64[0];
          *(int8x8_t *)v61.i8 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL), *(int8x8_t *)v61.i8);
          v64.i64[0] = v81.i64[0];
          v64.i64[1] = v61.i64[0];
          v75.i64[1] = v80.i64[0];
          v61.i64[1] = v81.i64[0];
          v81.i64[0] = vbslq_s8(v31, (int8x16_t)vaddq_f32(v63, (float32x4_t)vbslq_s8(v31, vbslq_s8((int8x16_t)vcgtq_f32(v75, v66), vextq_s8(v65, v65, 0xCuLL), v65), v65)), v65).u64[0];
          v80.i64[0] = vbslq_s8(v31, (int8x16_t)vaddq_f32(v63, (float32x4_t)vbslq_s8(v31, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v61, v66), vextq_s8(v64, v64, 0xCuLL), v64), v64)), v64).u64[0];
          v61.i64[0] = v81.i64[0];
          v61.i64[1] = vmulq_f32(v49, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v81, 0)).i64[1];
          v75.i64[0] = v80.i64[0];
          v75.i64[1] = vmulq_f32(v49, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v80, 0)).i64[1];
          v82 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v61));
          v83 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
          v81.i64[1] = vsubq_f32(v82, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v82, *(float32x4_t *)&v61), v48, (int8x16_t)0)).i64[1];
          v80.i64[1] = vsubq_f32(v83, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v83, v75), v48, (int8x16_t)0)).i64[1];
          v84 = (float32x4_t)vextq_s8(v35, v35, 4uLL);
          v85 = vminq_f32(vmaxq_f32(vmulq_f32(v63, vrecpeq_f32(v84)), v66), v67);
          v86 = (int8x16_t)vmulq_f32(v85, vrecpsq_f32(v84, v85));
          v87 = vbslq_s8(v77, v86, v81);
          v88 = vbslq_s8(v77, v86, v80);
          v89 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v62, (float32x4_t)v87, 2), (float32x4_t)v87), v87);
          v90 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v62, (float32x4_t)v88, 2), (float32x4_t)v88), v88);
          v91 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_laneq_f32(v90, v90, 3), v88);
          v92 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_laneq_f32(v89, v89, 3), v87), v36);
          v93 = (int8x16_t)vsubq_f32(v91, v36);
          v94 = v92;
          v94.i32[3] = 1.0;
          v95 = v93;
          v95.i32[3] = 1.0;
          v96 = *(int8x16_t *)(v19 + 320);
          v92.i64[1] = vextq_s8(v94, v94, 8uLL).u64[0];
          *(int8x8_t *)v94.i8 = vqtbl1_s8(v92, *(int8x8_t *)v96.i8);
          v63.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
          v94.u64[1] = (unint64_t)vqtbl1_s8(v92, *(int8x8_t *)v63.f32);
          v93.i64[1] = vextq_s8(v95, v95, 8uLL).u64[0];
          *(int8x8_t *)v92.i8 = vqtbl1_s8(v93, *(int8x8_t *)v96.i8);
          v92.u64[1] = (unint64_t)vqtbl1_s8(v93, *(int8x8_t *)v63.f32);
          v98 = *(float32x4_t *)(v19 + 64);
          v97 = *(float32x4_t *)(v19 + 80);
          v99 = (int32x4_t)vmulq_f32((float32x4_t)v94, v97);
          v100 = (int32x4_t)vmulq_f32(v97, (float32x4_t)v92);
          v101 = (int32x4_t)vmulq_f32((float32x4_t)v94, v98);
          v102 = (int32x4_t)vmulq_f32((float32x4_t)v92, v98);
          v103 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL), vaddq_f32((float32x4_t)v102, (float32x4_t)vrev64q_s32(v102))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 4uLL), vaddq_f32((float32x4_t)v100, (float32x4_t)vrev64q_s32(v100))));
          v104 = *((int *)a2 + 22);
          v105 = vsubq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), vaddq_f32((float32x4_t)v101, (float32x4_t)vrev64q_s32(v101))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL), vaddq_f32((float32x4_t)v99, (float32x4_t)vrev64q_s32(v99)))), v9);
          v106 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v107 = vaddq_s32(vcvtq_s32_f32(v105), vcltzq_f32(v105));
            v108 = (float32x2_t)vsubq_f32(v105, vcvtq_f32_s32(v107)).u64[0];
            v109 = (float32x4_t *)(v106 + 16 * (v107.i32[0] + v107.i32[1] * (int)v104));
            v110 = vaddq_f32(*v109, vmulq_n_f32(vsubq_f32(v109[1], *v109), v108.f32[0]));
            v111 = vaddq_f32(v110, vmulq_lane_f32(vsubq_f32(vaddq_f32(v109[v104], vmulq_n_f32(vsubq_f32(v109[(int)v104 + 1], v109[v104]), v108.f32[0])), v110), v108, 1));
            v112 = vsubq_f32(v103, v9);
            v113 = vaddq_s32(vcvtq_s32_f32(v112), vcltzq_f32(v112));
            v112.i64[0] = vsubq_f32(v112, vcvtq_f32_s32(v113)).u64[0];
            v114 = (float32x4_t *)(v106 + 16 * (v113.i32[0] + v113.i32[1] * (int)v104));
            v115 = vaddq_f32(*v114, vmulq_n_f32(vsubq_f32(v114[1], *v114), v112.f32[0]));
            v116 = vaddq_f32(v115, vmulq_lane_f32(vsubq_f32(vaddq_f32(v114[v104], vmulq_n_f32(vsubq_f32(v114[(int)v104 + 1], v114[v104]), v112.f32[0])), v115), *(float32x2_t *)v112.f32, 1));
          }
          else
          {
            v117 = vaddq_f32(v105, v13);
            v118 = vcvtq_s32_f32(v117);
            v117.i64[0] = vaddq_s32(v118, vcgtq_f32(vcvtq_f32_s32(v118), v117)).u64[0];
            v111 = *(float32x4_t *)(v106 + 16 * (v117.i32[0] + v117.i32[1] * (int)v104));
            v119 = vaddq_f32(vsubq_f32(v103, v9), v13);
            v120 = vcvtq_s32_f32(v119);
            v119.i64[0] = vaddq_s32(v120, vcgtq_f32(vcvtq_f32_s32(v120), v119)).u64[0];
            v116 = *(float32x4_t *)(v106 + 16 * (v119.i32[0] + v119.i32[1] * (int)v104));
          }
          v121 = (float32x4_t *)(v11 + 16 * v15);
          *v121 = v111;
          v121[1] = v116;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v122 = *((_QWORD *)this + 51);
        v123 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v122 + 48));
        v124 = (int8x16_t)vaddq_f32((float32x4_t)v123, (float32x4_t)vextq_s8(v123, v123, 4uLL));
        v125 = (int8x16_t)vaddq_f32((float32x4_t)v124, (float32x4_t)vextq_s8(v124, v124, 8uLL));
        v126 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v122 + 32));
        v127 = (int8x16_t)vaddq_f32((float32x4_t)v126, (float32x4_t)vextq_s8(v126, v126, 4uLL));
        v128 = (int8x16_t)vaddq_f32((float32x4_t)v127, (float32x4_t)vextq_s8(v127, v127, 8uLL));
        v129 = *(int8x16_t *)(v122 + 96);
        v130 = *(float32x4_t *)(v122 + 112);
        v131 = (float32x4_t)vbslq_s8(v129, v128, v125);
        v132 = *(int8x16_t *)(v122 + 16);
        v133 = vmulq_laneq_f32(*(float32x4_t *)v122, v130, 2);
        v134 = (int8x16_t)vaddq_f32(v133, v131);
        v135 = (int32x2_t)vmul_f32(*(float32x2_t *)v132.i8, *(float32x2_t *)v134.i8);
        *(int32x2_t *)v136.i8 = vdup_lane_s32(v135, 0);
        v136.u64[1] = (unint64_t)vdup_lane_s32(v135, 1);
        v137 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v122 + 128), v134, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v122 + 128), v134, v136), *(float32x4_t *)(v122 + 144)));
        v138 = *(float32x4_t *)(v122 + 160);
        v139 = *(int8x16_t *)(v122 + 176);
        v140 = vmulq_f32(v138, v137);
        v141 = vcvtq_f32_s32(vcvtq_s32_f32(v140));
        v142 = vsubq_f32(vabdq_f32(vsubq_f32(v140, vsubq_f32(v141, (float32x4_t)vandq_s8(v139, (int8x16_t)vcgtq_f32(v141, v140)))), v130), *(float32x4_t *)(v122 + 192));
        v143 = vmulq_f32(v142, v142);
        v144 = *(float32x4_t *)(v122 + 224);
        v145 = *(float32x4_t *)(v122 + 240);
        v146 = (int8x16_t)vmulq_f32(v143, vaddq_f32(v145, vmulq_f32(v143, vaddq_f32(*(float32x4_t *)(v122 + 208), vmulq_f32(v144, v143)))));
        v147 = *(float32x4_t *)(v122 + 256);
        v148 = *(float32x4_t *)(v122 + 272);
        v149 = (int64x2_t)vmulq_f32(v142, vaddq_f32(v147, (float32x4_t)v146));
        v146.i64[0] = v137.i64[0];
        v146.i64[1] = v149.i64[1];
        v137.i64[1] = vdupq_laneq_s64(v149, 1).u64[0];
        v150 = (float32x4_t)vrev64q_s32((int32x4_t)v137);
        v151 = vminq_f32(vmaxq_f32(vrecpeq_f32(v150), v147), v148);
        v152 = vminq_f32(vmaxq_f32(vmulq_f32(v151, vrecpsq_f32(v150, v151)), v147), v148);
        v153 = (int8x16_t)vmulq_f32(v152, vrecpsq_f32(v150, v152));
        v154 = *(int8x16_t *)(v122 + 288);
        v155 = (float32x4_t)vbslq_s8(v154, v153, v146);
        v156 = vbslq_s8(v154, (int8x16_t)vmulq_n_f32(v155, v155.f32[0]), v146);
        *(int8x8_t *)v146.i8 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v156, v156, 8uLL), *(int8x8_t *)(v122 + 312));
        v157.i64[0] = v156.i64[0];
        v157.i64[1] = v146.i64[0];
        v146.i64[1] = v156.i64[0];
        v156.i64[0] = vbslq_s8(v129, (int8x16_t)vaddq_f32(v145, (float32x4_t)vbslq_s8(v129, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v146, v147), vextq_s8(v157, v157, 0xCuLL), v157), v157)), v157).u64[0];
        v146.i64[0] = v156.i64[0];
        v146.i64[1] = vmulq_f32(v138, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v156, 0)).i64[1];
        v158 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v146));
        v156.i64[1] = vsubq_f32(v158, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v158, *(float32x4_t *)&v146), v139, (int8x16_t)0)).i64[1];
        v159 = (float32x4_t)vextq_s8(v132, v132, 4uLL);
        v160 = vminq_f32(vmaxq_f32(vmulq_f32(v145, vrecpeq_f32(v159)), v147), v148);
        v161 = vbslq_s8(v154, (int8x16_t)vmulq_f32(v160, vrecpsq_f32(v159, v160)), v156);
        v162 = (float32x4_t)vbslq_s8(v129, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v144, (float32x4_t)v161, 2), (float32x4_t)v161), v161);
        v163 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v129, (int8x16_t)vmulq_laneq_f32(v162, v162, 3), v161), v133);
        v164 = v163;
        v164.i32[3] = 1.0;
        v165 = *(int8x16_t *)(v122 + 320);
        v163.i64[1] = vextq_s8(v164, v164, 8uLL).u64[0];
        *(int8x8_t *)v164.i8 = vqtbl1_s8(v163, *(int8x8_t *)v165.i8);
        v164.u64[1] = (unint64_t)vqtbl1_s8(v163, (int8x8_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL));
        v166 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v122 + 80), (float32x4_t)v164);
        v167 = (int32x4_t)vmulq_f32((float32x4_t)v164, *(float32x4_t *)(v122 + 64));
        v168 = *((int *)a2 + 22);
        v169 = vsubq_f32((float32x4_t)vbslq_s8(v129, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL), vaddq_f32((float32x4_t)v167, (float32x4_t)vrev64q_s32(v167))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 4uLL), vaddq_f32((float32x4_t)v166, (float32x4_t)vrev64q_s32(v166)))), v9);
        v170 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v171 = vaddq_s32(vcvtq_s32_f32(v169), vcltzq_f32(v169));
          v172 = (float32x2_t)vsubq_f32(v169, vcvtq_f32_s32(v171)).u64[0];
          v173 = (float32x4_t *)(v170 + 16 * (v171.i32[0] + v171.i32[1] * (int)v168));
          v174 = vaddq_f32(*v173, vmulq_n_f32(vsubq_f32(v173[1], *v173), v172.f32[0]));
          v175 = vaddq_f32(v174, vmulq_lane_f32(vsubq_f32(vaddq_f32(v173[v168], vmulq_n_f32(vsubq_f32(v173[(int)v168 + 1], v173[v168]), v172.f32[0])), v174), v172, 1));
        }
        else
        {
          v176 = vaddq_f32(v169, v13);
          v177 = vcvtq_s32_f32(v176);
          v176.i64[0] = vaddq_s32(v177, vcgtq_f32(vcvtq_f32_s32(v177), v176)).u64[0];
          v175 = *(float32x4_t *)(v170 + 16 * (v176.i32[0] + v176.i32[1] * (int)v168));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v175;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcEquirectToSinusoidal::GetDOD(HgcEquirectToSinusoidal *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcEquirectToSinusoidal *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcEquirectToSinusoidal::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcEquirectToSinusoidal::HgcEquirectToSinusoidal(HgcEquirectToSinusoidal *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E6EA0;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 112) = xmmword_1B304F760;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051780;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051790;
  *(_OWORD *)(v3 + 176) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 192) = xmmword_1B30517A0;
  *(_OWORD *)(v3 + 208) = xmmword_1B30517B0;
  *(_OWORD *)(v3 + 224) = xmmword_1B30517C0;
  *(_OWORD *)(v3 + 240) = xmmword_1B30517D0;
  *(_OWORD *)(v3 + 256) = xmmword_1B30517E0;
  *(int32x4_t *)(v3 + 272) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 288) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 304) = xmmword_1B3051020;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 320) = xmmword_1B30517F0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcEquirectToSinusoidal *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28778D4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcEquirectToSinusoidal::~HgcEquirectToSinusoidal(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E6EA0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcEquirectToSinusoidal::~HgcEquirectToSinusoidal(this);
  HGObject::operator delete(v1);
}

uint64_t HgcEquirectToSinusoidal::SetParameter(HgcEquirectToSinusoidal *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  __n128 *v12;
  __n128 *v13;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_33;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_33;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_33;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_33;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == a3.n128_f32[0]
        && v12[4].n128_f32[1] == a4
        && v12[4].n128_f32[2] == a6
        && v12[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12[4].n128_u32[0] = a3.n128_u32[0];
      v12[4].n128_f32[1] = a4;
      v12[4].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[21] = a3;
      goto LABEL_33;
    case 5:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[22] = a3;
LABEL_33:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcEquirectToSinusoidal::GetParameter(HgcEquirectToSinusoidal *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_8;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_8;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_8;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_8;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[84];
      a3[1] = v8[85];
      a3[2] = v8[86];
      v4 = v8 + 87;
      goto LABEL_8;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[88];
      a3[1] = v9[89];
      a3[2] = v9[90];
      v4 = v9 + 91;
LABEL_8:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcSinusoidalToEquirect::GetProgram(HgcSinusoidalToEquirect *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000477\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 3.141592741, 1.570796371, 1.000000000);\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    s0.xy = hg_Params[0].xy*float2(c0.xx) + s0.xy;\n"
             "    s0.xz = s0.xy*hg_Params[1].xy;\n"
             "    s0.xz = s0.xz - float2(c0.yz);\n"
             "    s0.z = cos(s0.z);\n"
             "    s0.x = s0.x*s0.z + float(c0.y);\n"
             "    s0.x = s0.x/hg_Params[1].x;\n"
             "    s0.xy = hg_Params[0].xy*-float2(c0.xx) + s0.xy;\n"
             "    s0.w = float(c0.w);\n"
             "    s1.y = dot(s0.xyw, hg_Params[5].xyz);\n"
             "    s1.x = dot(s0.xyw, hg_Params[4].xyz);\n"
             "    s1.xy = s1.xy + hg_Params[6].xy;\n"
             "    s1.xy = s1.xy*hg_Params[6].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=907f1e3b:69c9b012:9e08d289:d3acd372\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0007:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000044b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 3.141592741, 1.570796371, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    r0.xy = hg_Params[0].xy*c0.xx + r0.xy;\n"
             "    r0.xz = r0.xy*hg_Params[1].xy;\n"
             "    r0.xz = r0.xz - c0.yz;\n"
             "    r0.z = cos(r0.z);\n"
             "    r0.x = r0.x*r0.z + c0.y;\n"
             "    r0.x = r0.x/hg_Params[1].x;\n"
             "    r0.xy = hg_Params[0].xy*-c0.xx + r0.xy;\n"
             "    r0.w = c0.w;\n"
             "    r1.y = dot(r0.xyw, hg_Params[5].xyz);\n"
             "    r1.x = dot(r0.xyw, hg_Params[4].xyz);\n"
             "    r1.xy = r1.xy + hg_Params[6].xy;\n"
             "    r1.xy = r1.xy*hg_Params[6].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=de8c2ebc:47618ec8:de3c5c19:82ba5b0b\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0007:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000514\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 3.141592741, 1.570796371, 1.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.y = dot(hg_TexCoord0, hg_ProgramLocal3);\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal2);\n"
           "    r0.xy = hg_ProgramLocal0.xy*c0.xx + r0.xy;\n"
           "    r0.xz = r0.xy*hg_ProgramLocal1.xy;\n"
           "    r0.xz = r0.xz - c0.yz;\n"
           "    r0.z = cos(r0.z);\n"
           "    r0.x = r0.x*r0.z + c0.y;\n"
           "    r0.x = r0.x/hg_ProgramLocal1.x;\n"
           "    r0.xy = hg_ProgramLocal0.xy*-c0.xx + r0.xy;\n"
           "    r0.w = c0.w;\n"
           "    r1.y = dot(r0.xyw, hg_ProgramLocal5.xyz);\n"
           "    r1.x = dot(r0.xyw, hg_ProgramLocal4.xyz);\n"
           "    r1.xy = r1.xy + hg_ProgramLocal6.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal6.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r1.xy);\n"
           "}\n"
           "//MD5=ad3a381e:4e10c63a:6e43c5d0:f30a6f2c\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0007:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcSinusoidalToEquirect::InitProgramDescriptor(HgcSinusoidalToEquirect *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSinusoidalToEquirect_hgc_visible", "//Metal1.0     \n//LEN=000000038f\n[[ visible ]] FragmentOut HgcSinusoidalToEquirect_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 3.141592741, 1.570796371, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.y = dot(texCoord0, hg_Params[3]);\n"
    "    r0.x = dot(texCoord0, hg_Params[2]);\n"
    "    r0.xy = hg_Params[0].xy*c0.xx + r0.xy;\n"
    "    r0.xz = r0.xy*hg_Params[1].xy;\n"
    "    r0.xz = r0.xz - c0.yz;\n"
    "    r0.z = cos(r0.z);\n"
    "    r0.x = r0.x*r0.z + c0.y;\n"
    "    r0.x = r0.x/hg_Params[1].x;\n"
    "    r0.xy = hg_Params[0].xy*-c0.xx + r0.xy;\n"
    "    r0.w = c0.w;\n"
    "    r1.y = dot(r0.xyw, hg_Params[5].xyz);\n"
    "    r1.x = dot(r0.xyw, hg_Params[4].xyz);\n"
    "    r1.xy = r1.xy + hg_Params[6].xy;\n"
    "    r1.xy = r1.xy*hg_Params[6].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2877D14()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSinusoidalToEquirect");
}

void sub_1B2877D24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2877EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2877EF4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2877EECLL);
}

_QWORD *HgcSinusoidalToEquirect::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSinusoidalToEquirect [hgc1]");
}

uint64_t HgcSinusoidalToEquirect::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 6, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcSinusoidalToEquirect::Bind(HgcSinusoidalToEquirect *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcSinusoidalToEquirect *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSinusoidalToEquirect::RenderTile(HgcSinusoidalToEquirect *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int32x2_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  float32x4_t v87;
  uint64_t v88;
  int32x4_t v89;
  float32x2_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  float32x4_t v101;
  int32x4_t v102;
  float32x4_t *v103;
  uint64_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  int8x16_t v116;
  int32x2_t v117;
  int8x16_t v118;
  int8x16_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int32x4_t v133;
  int32x4_t v134;
  uint64_t v135;
  float32x4_t v136;
  uint64_t v137;
  int32x4_t v138;
  float32x2_t v139;
  float32x4_t *v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  int32x4_t v144;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcSinusoidalToEquirect *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v21 = *(float32x4_t *)(v19 + 32);
          v20 = *(float32x4_t *)(v19 + 48);
          v22 = (int8x16_t)vmulq_f32(v17, v20);
          v23 = (int8x16_t)vmulq_f32(v18, v20);
          v24 = (int8x16_t)vaddq_f32((float32x4_t)v22, (float32x4_t)vextq_s8(v22, v22, 4uLL));
          v25 = (int8x16_t)vaddq_f32((float32x4_t)v23, (float32x4_t)vextq_s8(v23, v23, 4uLL));
          v26 = (int8x16_t)vmulq_f32(v17, v21);
          v27 = (int8x16_t)vmulq_f32(v18, v21);
          v28 = (int8x16_t)vaddq_f32((float32x4_t)v26, (float32x4_t)vextq_s8(v26, v26, 4uLL));
          v29 = (int8x16_t)vaddq_f32((float32x4_t)v27, (float32x4_t)vextq_s8(v27, v27, 4uLL));
          v30 = (int8x16_t)vaddq_f32((float32x4_t)v28, (float32x4_t)vextq_s8(v28, v28, 8uLL));
          v31 = *(int8x16_t *)(v19 + 96);
          v32 = *(float32x4_t *)(v19 + 112);
          v33 = (float32x4_t)vbslq_s8(v31, v30, (int8x16_t)vaddq_f32((float32x4_t)v24, (float32x4_t)vextq_s8(v24, v24, 8uLL)));
          v34 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)v29, (float32x4_t)vextq_s8(v29, v29, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v25, (float32x4_t)vextq_s8(v25, v25, 8uLL)));
          v35 = *(float32x4_t *)(v19 + 16);
          v36 = vmulq_laneq_f32(*(float32x4_t *)v19, v32, 2);
          v37 = (int8x16_t)vaddq_f32(v36, v33);
          v38 = (int32x2_t)vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v37.i8);
          *(int32x2_t *)v39.i8 = vdup_lane_s32(v38, 0);
          v39.u64[1] = (unint64_t)vdup_lane_s32(v38, 1);
          v40 = (int8x16_t)vaddq_f32(v36, v34);
          v41 = (int32x2_t)vmul_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v40.i8);
          *(int32x2_t *)v42.i8 = vdup_lane_s32(v41, 0);
          v42.u64[1] = (unint64_t)vdup_lane_s32(v41, 1);
          v43 = *(int8x16_t *)(v19 + 128);
          v44 = *(float32x4_t *)(v19 + 144);
          v45 = vbslq_s8(v43, v37, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v43, v37, v39), v44));
          v46 = vbslq_s8(v43, v40, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v43, v40, v42), v44));
          v47 = *(float32x4_t *)(v19 + 160);
          v48 = *(int8x16_t *)(v19 + 176);
          v49 = vmulq_f32(v47, (float32x4_t)v45);
          v50 = vmulq_f32(v47, (float32x4_t)v46);
          v51 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
          v52 = vcvtq_f32_s32(vcvtq_s32_f32(v50));
          v53 = vsubq_f32(v50, vsubq_f32(v52, (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v52, v50))));
          v54 = vabdq_f32(vsubq_f32(v49, vsubq_f32(v51, (float32x4_t)vandq_s8(v48, (int8x16_t)vcgtq_f32(v51, v49)))), v32);
          v55 = vabdq_f32(v53, v32);
          v56 = *(float32x4_t *)(v19 + 192);
          v57 = *(float32x4_t *)(v19 + 208);
          v58 = vsubq_f32(v54, v56);
          v59 = vsubq_f32(v55, v56);
          v60 = vmulq_f32(v58, v58);
          v61 = vmulq_f32(v59, v59);
          v62 = *(float32x4_t *)(v19 + 224);
          v63 = *(float32x4_t *)(v19 + 240);
          v64 = vaddq_f32(v57, vmulq_f32(v62, v60));
          v65 = vaddq_f32(v57, vmulq_f32(v62, v61));
          v66 = vmulq_f32(v60, vaddq_f32(v63, vmulq_f32(v60, v64)));
          v67 = *(float32x4_t *)(v19 + 256);
          v68 = *(float32x4_t *)(v19 + 272);
          v69 = vmulq_f32(v58, vaddq_f32(v67, v66));
          v70 = vmulq_f32(v59, vaddq_f32(v67, vmulq_f32(v61, vaddq_f32(v63, vmulq_f32(v61, v65)))));
          v45.i64[1] = v69.i64[1];
          v46.i64[1] = v70.i64[1];
          v71 = vminq_f32(vmaxq_f32(vrecpeq_f32(v35), v63), v68);
          v72 = vminq_f32(vmaxq_f32(vmulq_f32(v71, vrecpsq_f32(v35, v71)), v63), v68);
          v73 = vmulq_f32(v72, vrecpsq_f32(v35, v72));
          v74 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v73, (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(v67, vmulq_laneq_f32((float32x4_t)v45, v69, 2)), v45)), v45), v36);
          v75 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v73, (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(v67, vmulq_laneq_f32((float32x4_t)v46, v70, 2)), v46)), v46), v36);
          v76 = v74;
          v76.i32[3] = 1.0;
          v77 = v75;
          v77.i32[3] = 1.0;
          v78 = *(int8x16_t *)(v19 + 288);
          v74.i64[1] = vextq_s8(v76, v76, 8uLL).u64[0];
          *(int8x8_t *)v76.i8 = vqtbl1_s8(v74, *(int8x8_t *)v78.i8);
          v69.i64[0] = vextq_s8(v78, v78, 8uLL).u64[0];
          v76.u64[1] = (unint64_t)vqtbl1_s8(v74, *(int8x8_t *)v69.f32);
          v75.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
          *(int8x8_t *)v74.i8 = vqtbl1_s8(v75, *(int8x8_t *)v78.i8);
          v74.u64[1] = (unint64_t)vqtbl1_s8(v75, *(int8x8_t *)v69.f32);
          v80 = *(float32x4_t *)(v19 + 64);
          v79 = *(float32x4_t *)(v19 + 80);
          v81 = (int32x4_t)vmulq_f32((float32x4_t)v76, v79);
          v82 = (int32x4_t)vmulq_f32(v79, (float32x4_t)v74);
          v83 = (int32x4_t)vmulq_f32((float32x4_t)v76, v80);
          v84 = (int32x4_t)vmulq_f32((float32x4_t)v74, v80);
          v85 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL), vaddq_f32((float32x4_t)v84, (float32x4_t)vrev64q_s32(v84))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL), vaddq_f32((float32x4_t)v82, (float32x4_t)vrev64q_s32(v82))));
          v86 = *((int *)a2 + 22);
          v87 = vsubq_f32((float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL), vaddq_f32((float32x4_t)v83, (float32x4_t)vrev64q_s32(v83))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 4uLL), vaddq_f32((float32x4_t)v81, (float32x4_t)vrev64q_s32(v81)))), v9);
          v88 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v89 = vaddq_s32(vcvtq_s32_f32(v87), vcltzq_f32(v87));
            v90 = (float32x2_t)vsubq_f32(v87, vcvtq_f32_s32(v89)).u64[0];
            v91 = (float32x4_t *)(v88 + 16 * (v89.i32[0] + v89.i32[1] * (int)v86));
            v92 = vaddq_f32(*v91, vmulq_n_f32(vsubq_f32(v91[1], *v91), v90.f32[0]));
            v93 = vaddq_f32(v92, vmulq_lane_f32(vsubq_f32(vaddq_f32(v91[v86], vmulq_n_f32(vsubq_f32(v91[(int)v86 + 1], v91[v86]), v90.f32[0])), v92), v90, 1));
            v94 = vsubq_f32(v85, v9);
            v95 = vaddq_s32(vcvtq_s32_f32(v94), vcltzq_f32(v94));
            v94.i64[0] = vsubq_f32(v94, vcvtq_f32_s32(v95)).u64[0];
            v96 = (float32x4_t *)(v88 + 16 * (v95.i32[0] + v95.i32[1] * (int)v86));
            v97 = vaddq_f32(*v96, vmulq_n_f32(vsubq_f32(v96[1], *v96), v94.f32[0]));
            v98 = vaddq_f32(v97, vmulq_lane_f32(vsubq_f32(vaddq_f32(v96[v86], vmulq_n_f32(vsubq_f32(v96[(int)v86 + 1], v96[v86]), v94.f32[0])), v97), *(float32x2_t *)v94.f32, 1));
          }
          else
          {
            v99 = vaddq_f32(v87, v13);
            v100 = vcvtq_s32_f32(v99);
            v99.i64[0] = vaddq_s32(v100, vcgtq_f32(vcvtq_f32_s32(v100), v99)).u64[0];
            v93 = *(float32x4_t *)(v88 + 16 * (v99.i32[0] + v99.i32[1] * (int)v86));
            v101 = vaddq_f32(vsubq_f32(v85, v9), v13);
            v102 = vcvtq_s32_f32(v101);
            v101.i64[0] = vaddq_s32(v102, vcgtq_f32(vcvtq_f32_s32(v102), v101)).u64[0];
            v98 = *(float32x4_t *)(v88 + 16 * (v101.i32[0] + v101.i32[1] * (int)v86));
          }
          v103 = (float32x4_t *)(v11 + 16 * v15);
          *v103 = v93;
          v103[1] = v98;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v104 = *((_QWORD *)this + 51);
        v105 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v104 + 48));
        v106 = (int8x16_t)vaddq_f32((float32x4_t)v105, (float32x4_t)vextq_s8(v105, v105, 4uLL));
        v107 = (int8x16_t)vaddq_f32((float32x4_t)v106, (float32x4_t)vextq_s8(v106, v106, 8uLL));
        v108 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v104 + 32));
        v109 = (int8x16_t)vaddq_f32((float32x4_t)v108, (float32x4_t)vextq_s8(v108, v108, 4uLL));
        v110 = (int8x16_t)vaddq_f32((float32x4_t)v109, (float32x4_t)vextq_s8(v109, v109, 8uLL));
        v111 = *(int8x16_t *)(v104 + 96);
        v112 = *(float32x4_t *)(v104 + 112);
        v113 = (float32x4_t)vbslq_s8(v111, v110, v107);
        v114 = *(float32x4_t *)(v104 + 16);
        v115 = vmulq_laneq_f32(*(float32x4_t *)v104, v112, 2);
        v116 = (int8x16_t)vaddq_f32(v115, v113);
        v117 = (int32x2_t)vmul_f32(*(float32x2_t *)v114.f32, *(float32x2_t *)v116.i8);
        *(int32x2_t *)v118.i8 = vdup_lane_s32(v117, 0);
        v118.u64[1] = (unint64_t)vdup_lane_s32(v117, 1);
        v119 = vbslq_s8(*(int8x16_t *)(v104 + 128), v116, (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v104 + 128), v116, v118), *(float32x4_t *)(v104 + 144)));
        v120 = vmulq_f32(*(float32x4_t *)(v104 + 160), (float32x4_t)v119);
        v121 = vcvtq_f32_s32(vcvtq_s32_f32(v120));
        v122 = vsubq_f32(vabdq_f32(vsubq_f32(v120, vsubq_f32(v121, (float32x4_t)vandq_s8(*(int8x16_t *)(v104 + 176), (int8x16_t)vcgtq_f32(v121, v120)))), v112), *(float32x4_t *)(v104 + 192));
        v123 = vmulq_f32(v122, v122);
        v124 = *(float32x4_t *)(v104 + 240);
        v125 = *(float32x4_t *)(v104 + 256);
        v126 = *(float32x4_t *)(v104 + 272);
        v127 = vmulq_f32(v122, vaddq_f32(v125, vmulq_f32(v123, vaddq_f32(v124, vmulq_f32(v123, vaddq_f32(*(float32x4_t *)(v104 + 208), vmulq_f32(*(float32x4_t *)(v104 + 224), v123)))))));
        v119.i64[1] = v127.i64[1];
        v128 = vminq_f32(vmaxq_f32(vrecpeq_f32(v114), v124), v126);
        v129 = vminq_f32(vmaxq_f32(vmulq_f32(v128, vrecpsq_f32(v114, v128)), v124), v126);
        v130 = (int8x16_t)vsubq_f32((float32x4_t)vbslq_s8(v111, (int8x16_t)vmulq_f32(vmulq_f32(v129, vrecpsq_f32(v114, v129)), (float32x4_t)vbslq_s8(v111, (int8x16_t)vaddq_f32(v125, vmulq_laneq_f32((float32x4_t)v119, v127, 2)), v119)), v119), v115);
        v131 = v130;
        v131.i32[3] = 1.0;
        v132 = *(int8x16_t *)(v104 + 288);
        v130.i64[1] = vextq_s8(v131, v131, 8uLL).u64[0];
        *(int8x8_t *)v131.i8 = vqtbl1_s8(v130, *(int8x8_t *)v132.i8);
        v131.u64[1] = (unint64_t)vqtbl1_s8(v130, (int8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL));
        v133 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v104 + 80), (float32x4_t)v131);
        v134 = (int32x4_t)vmulq_f32((float32x4_t)v131, *(float32x4_t *)(v104 + 64));
        v135 = *((int *)a2 + 22);
        v136 = vsubq_f32((float32x4_t)vbslq_s8(v111, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v134, (int8x16_t)v134, 8uLL), vaddq_f32((float32x4_t)v134, (float32x4_t)vrev64q_s32(v134))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 4uLL), vaddq_f32((float32x4_t)v133, (float32x4_t)vrev64q_s32(v133)))), v9);
        v137 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v138 = vaddq_s32(vcvtq_s32_f32(v136), vcltzq_f32(v136));
          v139 = (float32x2_t)vsubq_f32(v136, vcvtq_f32_s32(v138)).u64[0];
          v140 = (float32x4_t *)(v137 + 16 * (v138.i32[0] + v138.i32[1] * (int)v135));
          v141 = vaddq_f32(*v140, vmulq_n_f32(vsubq_f32(v140[1], *v140), v139.f32[0]));
          v142 = vaddq_f32(v141, vmulq_lane_f32(vsubq_f32(vaddq_f32(v140[v135], vmulq_n_f32(vsubq_f32(v140[(int)v135 + 1], v140[v135]), v139.f32[0])), v141), v139, 1));
        }
        else
        {
          v143 = vaddq_f32(v136, v13);
          v144 = vcvtq_s32_f32(v143);
          v143.i64[0] = vaddq_s32(v144, vcgtq_f32(vcvtq_f32_s32(v144), v143)).u64[0];
          v142 = *(float32x4_t *)(v137 + 16 * (v143.i32[0] + v143.i32[1] * (int)v135));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v142;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSinusoidalToEquirect::GetDOD(HgcSinusoidalToEquirect *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcSinusoidalToEquirect *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcSinusoidalToEquirect::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcSinusoidalToEquirect::HgcSinusoidalToEquirect(HgcSinusoidalToEquirect *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E7108;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 112) = xmmword_1B304F760;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051780;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051790;
  *(_OWORD *)(v3 + 176) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 192) = xmmword_1B30517A0;
  *(_OWORD *)(v3 + 208) = xmmword_1B30517B0;
  *(_OWORD *)(v3 + 224) = xmmword_1B3051920;
  *(_OWORD *)(v3 + 240) = xmmword_1B3051930;
  *(_OWORD *)(v3 + 256) = xmmword_1B3051940;
  *(int32x4_t *)(v3 + 272) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 288) = xmmword_1B30517F0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcSinusoidalToEquirect *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2878934(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSinusoidalToEquirect::~HgcSinusoidalToEquirect(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E7108;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4055B0EC01);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSinusoidalToEquirect::~HgcSinusoidalToEquirect(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSinusoidalToEquirect::SetParameter(HgcSinusoidalToEquirect *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  __n128 *v12;
  __n128 *v13;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_33;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_33;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_33;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_33;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == a3.n128_f32[0]
        && v12[4].n128_f32[1] == a4
        && v12[4].n128_f32[2] == a6
        && v12[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12[4].n128_u32[0] = a3.n128_u32[0];
      v12[4].n128_f32[1] = a4;
      v12[4].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[19] = a3;
      goto LABEL_33;
    case 5:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[20] = a3;
LABEL_33:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSinusoidalToEquirect::GetParameter(HgcSinusoidalToEquirect *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_8;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_8;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_8;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_8;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[76];
      a3[1] = v8[77];
      a3[2] = v8[78];
      v4 = v8 + 79;
      goto LABEL_8;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[80];
      a3[1] = v9[81];
      a3[2] = v9[82];
      v4 = v9 + 83;
LABEL_8:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcOuterGlowColorize::GetProgram(HgcOuterGlowColorize *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000036e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.x = r0.w*half(hg_Params[3].x);\n"
             "    r0.x = fmin(r0.x, c0.x);\n"
             "    r1.xyz = mix(half3(hg_Params[0].xyz), half3(hg_Params[1].xyz), r0.xxx);\n"
             "    r0.x = r0.x*half(hg_Params[2].x);\n"
             "    r1.w = fmin(r0.x, c0.x);\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a78979a8:fd2d617d:0ff48bb0:9d0bd711\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000349\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w;\n"
             "    r0.x = r0.w*hg_Params[3].x;\n"
             "    r0.x = fmin(r0.x, c0.x);\n"
             "    r1.xyz = mix(hg_Params[0].xyz, hg_Params[1].xyz, r0.xxx);\n"
             "    r0.x = r0.x*hg_Params[2].x;\n"
             "    r1.w = fmin(r0.x, c0.x);\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=bf2ac94e:cbede188:491e5bf7:f6bff8f8\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000039e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.w = texture2D(hg_Texture0, hg_TexCoord0.xy).w;\n"
           "    r0.x = r0.w*hg_ProgramLocal3.x;\n"
           "    r0.x = min(r0.x, c0.x);\n"
           "    r1.xyz = mix(hg_ProgramLocal0.xyz, hg_ProgramLocal1.xyz, r0.xxx);\n"
           "    r0.x = r0.x*hg_ProgramLocal2.x;\n"
           "    r1.w = min(r0.x, c0.x);\n"
           "    r1.xyz = r1.xyz*r1.www;\n"
           "    gl_FragColor = r1;\n"
           "}\n"
           "//MD5=b36fd428:cd4964f7:0a8f8443:c0a19b70\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcOuterGlowColorize::InitProgramDescriptor(HgcOuterGlowColorize *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcOuterGlowColorize_hgc_visible", "//Metal1.0     \n//LEN=0000000227\n[[ visible ]] FragmentOut HgcOuterGlowColorize_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = color0.w;\n"
    "    r0.x = r0.w*hg_Params[3].x;\n"
    "    r0.x = fmin(r0.x, c0.x);\n"
    "    r1.xyz = mix(hg_Params[0].xyz, hg_Params[1].xyz, r0.xxx);\n"
    "    r0.x = r0.x*hg_Params[2].x;\n"
    "    r1.w = fmin(r0.x, c0.x);\n"
    "    r1.xyz = r1.xyz*r1.www;\n"
    "    output.color0 = r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2878D74()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcOuterGlowColorize");
}

void sub_1B2878D84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2878E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2878EC4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2878EBCLL);
}

_QWORD *HgcOuterGlowColorize::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcOuterGlowColorize [hgc1]");
}

uint64_t HgcOuterGlowColorize::BindTexture(HgcOuterGlowColorize *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcOuterGlowColorize::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcOuterGlowColorize::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t *v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v42) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(_QWORD *)(a1 + 408);
          v13 = *(float32x4_t *)(v11 + 32);
          v12 = *(float32x4_t *)(v11 + 48);
          v14 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10 - 32), 3);
          v15 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10 - 16), 3);
          v16 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10), 3);
          v17 = vmulq_laneq_f32(v12, *(float32x4_t *)(v6 + v10 + 16), 3);
          v18 = *(float32x4_t *)(v11 + 64);
          v19 = *(int8x16_t *)(v11 + 80);
          v20 = vminq_f32(v14, v18);
          v21 = vminq_f32(v15, v18);
          v22 = vminq_f32(v16, v18);
          v23 = vminq_f32(v17, v18);
          v24 = vsubq_f32(*(float32x4_t *)(v11 + 16), *(float32x4_t *)v11);
          v25 = (int8x16_t)vaddq_f32(*(float32x4_t *)v11, vmulq_n_f32(v24, v20.f32[0]));
          v26 = (int8x16_t)vaddq_f32(*(float32x4_t *)v11, vmulq_n_f32(v24, v21.f32[0]));
          v27 = (int8x16_t)vaddq_f32(*(float32x4_t *)v11, vmulq_n_f32(v24, v22.f32[0]));
          v28 = (int8x16_t)vaddq_f32(*(float32x4_t *)v11, vmulq_n_f32(v24, v23.f32[0]));
          v29 = (int8x16_t)vmulq_f32(v20, v13);
          v30 = (int8x16_t)vmulq_f32(v21, v13);
          v31 = (int8x16_t)vmulq_f32(v22, v13);
          v32 = (int8x16_t)vmulq_f32(v23, v13);
          v33 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v29, v29, 4uLL), v18);
          v34 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v30, v30, 4uLL), v18);
          v35 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v31, v31, 4uLL), v18);
          v36 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v32, v32, 4uLL), v18);
          v37 = (float32x4_t)vbslq_s8(v19, v33, v25);
          v38 = (float32x4_t)vbslq_s8(v19, v34, v26);
          v39 = (float32x4_t)vbslq_s8(v19, v35, v27);
          v40 = (float32x4_t)vbslq_s8(v19, v36, v28);
          v41 = (int8x16_t *)(v5 + v10);
          v41[-2] = vbslq_s8(v19, v33, (int8x16_t)vmulq_laneq_f32(v37, v37, 3));
          v41[-1] = vbslq_s8(v19, v34, (int8x16_t)vmulq_laneq_f32(v38, v38, 3));
          *v41 = vbslq_s8(v19, v35, (int8x16_t)vmulq_laneq_f32(v39, v39, 3));
          v41[1] = vbslq_s8(v19, v36, (int8x16_t)vmulq_laneq_f32(v40, v40, 3));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v42) = -v9;
      }
      if ((int)v42 < v4)
      {
        v42 = v42;
        do
        {
          v43 = *(_QWORD *)(a1 + 408);
          v44 = *(float32x4_t *)(v43 + 64);
          v45 = vminq_f32(vmulq_laneq_f32(*(float32x4_t *)(v43 + 48), *(float32x4_t *)(v6 + 16 * v42), 3), v44);
          v46 = (int8x16_t)vaddq_f32(*(float32x4_t *)v43, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v43 + 16), *(float32x4_t *)v43), v45.f32[0]));
          v47 = (int8x16_t)vmulq_f32(v45, *(float32x4_t *)(v43 + 32));
          v48 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v47, v47, 4uLL), v44);
          v49 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v43 + 80), v48, v46);
          *(int8x16_t *)(v5 + 16 * v42++) = vbslq_s8(*(int8x16_t *)(v43 + 80), v48, (int8x16_t)vmulq_laneq_f32(v49, v49, 3));
        }
        while (v42 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcOuterGlowColorize::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcOuterGlowColorize::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcOuterGlowColorize::HgcOuterGlowColorize(HgcOuterGlowColorize *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E7370;
  v3 = (_OWORD *)operator new();
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[4] = xmmword_1B304FAB0;
  v3[5] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28792B4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcOuterGlowColorize::~HgcOuterGlowColorize(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E7370;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcOuterGlowColorize::~HgcOuterGlowColorize(this);
  HGObject::operator delete(v1);
}

uint64_t HgcOuterGlowColorize::SetParameter(HgcOuterGlowColorize *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcOuterGlowColorize::GetParameter(HgcOuterGlowColorize *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcOuterGlowLumaWeight::GetProgram(HgcOuterGlowLumaWeight *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000322\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.x = dot(r1, half4(hg_Params[0]));\n"
             "    output.color0 = mix(float4(r0), float4(r1), float4(r2.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=f7bfe6a2:88950761:be7159d0:97f9f84c\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002f6\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.x = dot(r1, hg_Params[0]);\n"
             "    output.color0 = mix(r0, r1, r2.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9fa36ebc:6508dcfd:296c9c6b:33b0a2dc\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002a0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2.x = dot(r1, hg_ProgramLocal0);\n"
           "    gl_FragColor = mix(r0, r1, r2.xxxx);\n"
           "}\n"
           "//MD5=3b9e3d80:45d1b0ae:1c548164:2c72b248\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcOuterGlowLumaWeight::InitProgramDescriptor(HgcOuterGlowLumaWeight *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcOuterGlowLumaWeight_hgc_visible", "//Metal1.0     \n//LEN=000000015b\n[[ visible ]] FragmentOut HgcOuterGlowLumaWeight_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r2.x = dot(r1, hg_Params[0]);\n"
    "    output.color0 = mix(r0, r1, r2.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28794C0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcOuterGlowLumaWeight");
}

void sub_1B28794D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2879610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2879658()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2879650);
}

_QWORD *HgcOuterGlowLumaWeight::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcOuterGlowLumaWeight [hgc1]");
}

uint64_t HgcOuterGlowLumaWeight::BindTexture(HgcOuterGlowLumaWeight *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcOuterGlowLumaWeight::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcOuterGlowLumaWeight::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v30) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)(v8 + v12 - 16);
          v14 = *(float32x4_t *)(v6 + v12 - 32);
          v15 = *(float32x4_t *)(v6 + v12 - 16);
          v16 = *(float32x4_t *)(v6 + v12);
          v17 = *(float32x4_t *)(v6 + v12 + 16);
          v18 = *(float32x4_t *)*(_QWORD *)(a1 + 408);
          v19 = vmulq_f32(v14, v18);
          v20 = vmulq_f32(v15, v18);
          v21 = vmulq_f32(v16, v18);
          v22 = vmulq_f32(v17, v18);
          v23 = vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL));
          v24 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL));
          v25 = vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL));
          v26 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL));
          v27 = vaddq_f32(*(float32x4_t *)(v8 + v12), vmulq_n_f32(vsubq_f32(v16, *(float32x4_t *)(v8 + v12)), vaddq_f32(v25, (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2)).f32[0]));
          v28 = vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), vmulq_n_f32(vsubq_f32(v17, *(float32x4_t *)(v8 + v12 + 16)), vaddq_f32(v26, (float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2)).f32[0]));
          v29 = (float32x4_t *)(v5 + v12);
          v29[-2] = vaddq_f32(*(float32x4_t *)(v8 + v12 - 32), vmulq_n_f32(vsubq_f32(v14, *(float32x4_t *)(v8 + v12 - 32)), vaddq_f32(v23, (float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2)).f32[0]));
          v29[-1] = vaddq_f32(v13, vmulq_n_f32(vsubq_f32(v15, v13), vaddq_f32(v24, (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2)).f32[0]));
          *v29 = v27;
          v29[1] = v28;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v30) = -v11;
      }
      if ((int)v30 < v4)
      {
        v30 = v30;
        do
        {
          v31 = *(float32x4_t *)(v6 + 16 * v30);
          v32 = vmulq_f32(v31, *(float32x4_t *)*(_QWORD *)(a1 + 408));
          v33 = vaddq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL));
          *(float32x4_t *)(v5 + 16 * v30) = vaddq_f32(*(float32x4_t *)(v8 + 16 * v30), vmulq_n_f32(vsubq_f32(v31, *(float32x4_t *)(v8 + 16 * v30)), vaddq_f32(v33, (float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2)).f32[0]));
          ++v30;
        }
        while (v30 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcOuterGlowLumaWeight::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcOuterGlowLumaWeight::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcOuterGlowLumaWeight::HgcOuterGlowLumaWeight(HgcOuterGlowLumaWeight *this)
{
  _QWORD *v2;
  _QWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E75D8;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28799E0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcOuterGlowLumaWeight::~HgcOuterGlowLumaWeight(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E75D8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcOuterGlowLumaWeight::~HgcOuterGlowLumaWeight(this);
  HGObject::operator delete(v1);
}

uint64_t HgcOuterGlowLumaWeight::SetParameter(HgcOuterGlowLumaWeight *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcOuterGlowLumaWeight::GetParameter(HgcOuterGlowLumaWeight *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcFillColor::GetProgram(HgcFillColor *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002ef\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = half3(hg_Params[0].xyz);\n"
             "    r1.w = c0.w;\n"
             "    r1 = mix(r0, r1, half4(hg_Params[1]));\n"
             "    output.color0 = float4(r1)*float4(r0.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ac5026c4:147961bc:ea1ebdb9:14a34980\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0002:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002cd\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = hg_Params[0].xyz;\n"
             "    r1.w = c0.w;\n"
             "    r1 = mix(r0, r1, hg_Params[1]);\n"
             "    output.color0 = r1*r0.wwww;\n"
             "    return output;\n"
             "}\n"
             "//MD5=56f16a5c:e268dd2e:7b8ddc53:4c1b5dba\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0002:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002cc\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = hg_ProgramLocal0.xyz;\n"
           "    r1.w = c0.w;\n"
           "    r1 = mix(r0, r1, hg_ProgramLocal1);\n"
           "    gl_FragColor = r1*r0.wwww;\n"
           "}\n"
           "//MD5=17569828:c63ee1b1:73a10350:7f7b3af7\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcFillColor::InitProgramDescriptor(HgcFillColor *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcFillColor_hgc_visible", "//Metal1.0     \n//LEN=00000001a3\n[[ visible ]] FragmentOut HgcFillColor_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = hg_Params[0].xyz;\n"
    "    r1.w = c0.w;\n"
    "    r1 = mix(r0, r1, hg_Params[1]);\n"
    "    output.color0 = r1*r0.wwww;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2879BC8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcFillColor");
}

void sub_1B2879BD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2879CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2879D18()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2879D10);
}

_QWORD *HgcFillColor::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcFillColor [hgc1]");
}

uint64_t HgcFillColor::BindTexture(HgcFillColor *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcFillColor::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcFillColor::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t v20;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *(float32x4_t **)(a1 + 408);
          v14 = *v13;
          v15 = v13[1];
          v14.i32[3] = 1.0;
          v16 = vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v6 + v10 + 16), vmulq_f32(v15, vsubq_f32(v14, *(float32x4_t *)(v6 + v10 + 16)))), *(float32x4_t *)(v6 + v10 + 16), 3);
          v17 = (float32x4_t *)(v5 + v10);
          v17[-2] = vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v6 + v10 - 32), vmulq_f32(v15, vsubq_f32(v14, *(float32x4_t *)(v6 + v10 - 32)))), *(float32x4_t *)(v6 + v10 - 32), 3);
          v17[-1] = vmulq_laneq_f32(vaddq_f32(v11, vmulq_f32(v15, vsubq_f32(v14, v11))), v11, 3);
          *v17 = vmulq_laneq_f32(vaddq_f32(v12, vmulq_f32(v15, vsubq_f32(v14, v12))), v12, 3);
          v17[1] = v16;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v18) = -v9;
      }
      if ((int)v18 < v4)
      {
        v18 = v18;
        do
        {
          v19 = *(float32x4_t **)(a1 + 408);
          v20 = *v19;
          v20.i32[3] = 1.0;
          *(float32x4_t *)(v5 + 16 * v18) = vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v6 + 16 * v18), vmulq_f32(v19[1], vsubq_f32(v20, *(float32x4_t *)(v6 + 16 * v18)))), *(float32x4_t *)(v6 + 16 * v18), 3);
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcFillColor::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcFillColor::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcFillColor::HgcFillColor(HgcFillColor *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E7840;
  v3 = (_OWORD *)operator new();
  v3[1] = 0u;
  v3[2] = 0u;
  *v3 = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B287A020(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcFillColor::~HgcFillColor(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E7840;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40EED21634);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcFillColor::~HgcFillColor(this);
  HGObject::operator delete(v1);
}

uint64_t HgcFillColor::SetParameter(HgcFillColor *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  uint64_t v8;
  int32x4_t v9;

  if ((_DWORD)a2 == 1)
  {
    v8 = *((_QWORD *)this + 51);
    if (*(float *)(v8 + 16) != a3.n128_f32[0]
      || *(float *)(v8 + 20) != a3.n128_f32[0]
      || *(float *)(v8 + 24) != a3.n128_f32[0]
      || *(float *)(v8 + 28) != a3.n128_f32[0])
    {
      v9 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(int32x4_t *)(v8 + 16) = v9;
      *(__n128 *)(v8 + 32) = a3;
      goto LABEL_13;
    }
    return 0;
  }
  if (!(_DWORD)a2)
  {
    v7 = *((_QWORD *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a4
      || *(float *)(v7 + 8) != a5
      || *(float *)(v7 + 12) != a6)
    {
      *(_DWORD *)v7 = a3.n128_u32[0];
      *(float *)(v7 + 4) = a4;
      *(float *)(v7 + 8) = a5;
      *(float *)(v7 + 12) = a6;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcFillColor::GetParameter(HgcFillColor *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[8];
    a3[1] = v5[9];
    a3[2] = v5[10];
    v4 = v5 + 11;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    v4 = v3 + 3;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcVignetteBB::GetProgram(HgcVignetteBB *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000055f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, 1.000000000, 0.5870000124, 0.2989999950);\n"
             "    const half4 c1 = half4(0.1140000001, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord1.xy*hg_Params[3].xy;\n"
             "    s0.xy = s0.xy*float2(c0.xx) + hg_Params[0].xy;\n"
             "    s0.xy = s0.xy + float2(c0.yy);\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s0.x = dot(s0.xy, s0.xy);\n"
             "    s0.x = sqrt(s0.x);\n"
             "    s0.x = clamp(s0.x*hg_Params[1].x + hg_Params[1].y, 0.00000f, 1.00000f);\n"
             "    s0.xyz = mix(float3(c0.yyy), hg_Params[2].xyz, s0.xxx);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    s1.xyz = float3(r1.xyz)*s0.xxx;\n"
             "    s1.w = s1.y*float(c0.z);\n"
             "    s1.w = s1.x*float(c0.w) + s1.w;\n"
             "    s0.x = s1.z*float(c1.x) + s1.w;\n"
             "    s1.w = float(r0.w);\n"
             "    s0 = mix(s0.xxxx, s1, s0.yyyz);\n"
             "    s1.w = s0.w;\n"
             "    s1.xyz = s0.xyz*s0.www;\n"
             "    output.color0 = mix(float4(r0), s1, hg_Params[4]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=95f5cf05:5ec1ea8a:596c5974:cb603b52\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0005:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000050a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, 1.000000000, 0.5870000124, 0.2989999950);\n"
             "    const float4 c1 = float4(0.1140000001, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord1.xy*hg_Params[3].xy;\n"
             "    r0.xy = r0.xy*c0.xx + hg_Params[0].xy;\n"
             "    r0.xy = r0.xy + c0.yy;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.x = dot(r0.xy, r0.xy);\n"
             "    r0.x = sqrt(r0.x);\n"
             "    r0.x = clamp(r0.x*hg_Params[1].x + hg_Params[1].y, 0.00000f, 1.00000f);\n"
             "    r0.xyz = mix(c0.yyy, hg_Params[2].xyz, r0.xxx);\n"
             "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
             "    r2.xyz = r2.xyz*r0.xxx;\n"
             "    r2.w = r2.y*c0.z;\n"
             "    r2.w = r2.x*c0.w + r2.w;\n"
             "    r0.x = r2.z*c1.x + r2.w;\n"
             "    r2.w = r1.w;\n"
             "    r0 = mix(r0.xxxx, r2, r0.yyyz);\n"
             "    r2.w = r0.w;\n"
             "    r2.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = mix(r1, r2, hg_Params[4]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=04da8362:7b4fb5ce:32995c07:3621730f\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0005:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000598\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(2.000000000, 1.000000000, 0.5870000124, 0.2989999950);\n"
           "    const highp vec4 c1 = vec4(0.1140000001, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = hg_TexCoord1.xy*hg_ProgramLocal3.xy;\n"
           "    r0.xy = r0.xy*c0.xx + hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.xy + c0.yy;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.x = dot(r0.xy, r0.xy);\n"
           "    r0.x = sqrt(r0.x);\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal1.x + hg_ProgramLocal1.y, 0.00000, 1.00000);\n"
           "    r0.xyz = mix(c0.yyy, hg_ProgramLocal2.xyz, r0.xxx);\n"
           "    r2.xyz = r1.xyz / max(r1.w, 1.00000e-06);\n"
           "    r2.xyz = r2.xyz*r0.xxx;\n"
           "    r2.w = r2.y*c0.z;\n"
           "    r2.w = r2.x*c0.w + r2.w;\n"
           "    r0.x = r2.z*c1.x + r2.w;\n"
           "    r2.w = r1.w;\n"
           "    r0 = mix(r0.xxxx, r2, r0.yyyz);\n"
           "    r2.w = r0.w;\n"
           "    r2.xyz = r0.xyz*r0.www;\n"
           "    gl_FragColor = mix(r1, r2, hg_ProgramLocal4);\n"
           "}\n"
           "//MD5=61180778:7d0e1783:10075720:d28f755e\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0005:0003:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void HgcVignetteBB::InitProgramDescriptor(HgcVignetteBB *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcVignetteBB_hgc_visible", "//Metal1.0     \n//LEN=00000003f1\n[[ visible ]] FragmentOut HgcVignetteBB_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(2.000000000, 1.000000000, 0.5870000124, 0.2989999950);\n"
    "    const float4 c1 = float4(0.1140000001, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord1.xy*hg_Params[3].xy;\n"
    "    r0.xy = r0.xy*c0.xx + hg_Params[0].xy;\n"
    "    r0.xy = r0.xy + c0.yy;\n"
    "    r1 = color0;\n"
    "    r0.x = dot(r0.xy, r0.xy);\n"
    "    r0.x = sqrt(r0.x);\n"
    "    r0.x = clamp(r0.x*hg_Params[1].x + hg_Params[1].y, 0.00000f, 1.00000f);\n"
    "    r0.xyz = mix(c0.yyy, hg_Params[2].xyz, r0.xxx);\n"
    "    r2.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
    "    r2.xyz = r2.xyz*r0.xxx;\n"
    "    r2.w = r2.y*c0.z;\n"
    "    r2.w = r2.x*c0.w + r2.w;\n"
    "    r0.x = r2.z*c1.x + r2.w;\n"
    "    r2.w = r1.w;\n"
    "    r0 = mix(r0.xxxx, r2, r0.yyyz);\n"
    "    r2.w = r0.w;\n"
    "    r2.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = mix(r1, r2, hg_Params[4]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B287A288()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcVignetteBB");
}

void sub_1B287A298(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B287A3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B287A420()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B287A418);
}

_QWORD *HgcVignetteBB::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcVignetteBB [hgc1]");
}

uint64_t HgcVignetteBB::BindTexture(HgcVignetteBB *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcVignetteBB::Bind(HgcVignetteBB *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcVignetteBB *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcVignetteBB::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  float32x4_t v68;
  int8x16_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x8_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t *v98;
  uint64_t v99;
  uint64_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x8_t v122;
  float32x4_t v123;
  float32x4_t v124;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    v7 = a2[10];
    *(float32x2_t *)v8.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8.i64[1] = 0x3F80000000000000;
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 3)
      {
        LODWORD(v99) = 0;
        v13 = v8;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = v8;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = *(_QWORD *)(a1 + 408);
          v16 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v17 = *(float32x4_t *)(v15 + 48);
          v18 = vmulq_f32(v13, v17);
          v19 = vmulq_f32(v14, v17);
          v20 = vmulq_f32(v16, v17);
          v22 = *(float32x4_t *)(v15 + 64);
          v21 = *(float32x4_t *)(v15 + 80);
          v23 = *(float32x4_t *)(v15 + 16);
          v24 = *(float32x4_t *)(v15 + 96);
          v25 = *(float32x4_t *)(v15 + 112);
          v26 = vaddq_f32(v24, vaddq_f32(*(float32x4_t *)v15, vmulq_lane_f32(v18, *(float32x2_t *)v21.f32, 1)));
          v27 = vaddq_f32(v24, vaddq_f32(*(float32x4_t *)v15, vmulq_lane_f32(v19, *(float32x2_t *)v21.f32, 1)));
          v28 = vaddq_f32(v24, vaddq_f32(*(float32x4_t *)v15, vmulq_lane_f32(v20, *(float32x2_t *)v21.f32, 1)));
          v29 = *(float32x4_t *)(*(_QWORD *)&v7 + v11);
          v30 = *(float32x4_t *)(*(_QWORD *)&v7 + v11 + 16);
          v31 = vmulq_f32(v26, v26);
          v32 = vmulq_f32(v27, v27);
          v33 = vmulq_f32(v28, v28);
          v34 = vaddq_f32(v31, (float32x4_t)vrev64q_s32((int32x4_t)v31));
          v35 = vaddq_f32(v32, (float32x4_t)vrev64q_s32((int32x4_t)v32));
          v36 = vaddq_f32(v33, (float32x4_t)vrev64q_s32((int32x4_t)v33));
          v37 = vminq_f32(vrsqrteq_f32(v34), v21);
          v38 = vminq_f32(vrsqrteq_f32(v35), v21);
          v39 = vminq_f32(vrsqrteq_f32(v36), v21);
          v40 = vmulq_f32(v37, vrsqrtsq_f32(vmulq_f32(v34, v37), v37));
          v41 = *(float32x4_t *)(*(_QWORD *)&v7 + v11 + 32);
          v42 = vminq_f32(v40, v21);
          v43 = vminq_f32(vmulq_f32(v38, vrsqrtsq_f32(vmulq_f32(v35, v38), v38)), v21);
          v44 = vminq_f32(vmulq_f32(v39, vrsqrtsq_f32(vmulq_f32(v36, v39), v39)), v21);
          v45 = vminq_f32(vmulq_f32(v42, vrsqrtsq_f32(vmulq_f32(v34, v42), v42)), v21);
          v46 = vminq_f32(vmulq_f32(v43, vrsqrtsq_f32(vmulq_f32(v35, v43), v43)), v21);
          v47 = vmulq_f32(v36, vminq_f32(vmulq_f32(v44, vrsqrtsq_f32(vmulq_f32(v36, v44), v44)), v21));
          v48 = (float32x4_t)vrev64q_s32((int32x4_t)v23);
          v49 = vaddq_f32(vmulq_f32(vmulq_f32(v34, v45), v23), v48);
          v50 = vmulq_f32(v47, v23);
          v51 = vaddq_f32(vmulq_f32(vmulq_f32(v35, v46), v23), v48);
          v52 = vsubq_f32(*(float32x4_t *)(v15 + 32), v24);
          v53 = vmulq_n_f32(v52, vminq_f32(vmaxq_f32(v49, v25), v24).f32[0]);
          v54 = vmulq_n_f32(v52, vminq_f32(vmaxq_f32(v51, v25), v24).f32[0]);
          v55 = vmulq_n_f32(v52, vminq_f32(vmaxq_f32(vaddq_f32(v50, v48), v25), v24).f32[0]);
          v57 = *(float32x4_t *)(v15 + 128);
          v56 = *(float32x4_t *)(v15 + 144);
          v58 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3), v57);
          v59 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 3), v57);
          v60 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 3), v57);
          v61 = (int8x16_t)vaddq_f32(v24, v53);
          v62 = vmulq_f32(vrecpeq_f32(v58), v56);
          v63 = vmulq_f32(vrecpeq_f32(v59), v56);
          v64 = vmulq_f32(vrecpeq_f32(v60), v56);
          v65 = (int8x16_t)vaddq_f32(v24, v54);
          v66 = (int8x16_t)vaddq_f32(v24, v55);
          v67 = (int8x16_t)vmulq_n_f32(vmulq_f32(v29, vmulq_f32(v62, vrecpsq_f32(v62, v58))), *(float *)v61.i32);
          v68 = vmulq_n_f32(vmulq_f32(v30, vmulq_f32(v63, vrecpsq_f32(v63, v59))), *(float *)v65.i32);
          v69 = (int8x16_t)vmulq_n_f32(vmulq_f32(v41, vmulq_f32(v64, vrecpsq_f32(v64, v60))), *(float *)v66.i32);
          v70 = *(int8x16_t *)(v15 + 160);
          v71 = *(float32x4_t *)(v15 + 176);
          v72 = (float32x4_t)vbslq_s8(v70, (int8x16_t)vmulq_f32(v56, (float32x4_t)vextq_s8(v67, v67, 8uLL)), v67);
          v73 = (float32x4_t)vbslq_s8(v70, (int8x16_t)vmulq_f32(v56, (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL)), (int8x16_t)v68);
          v74 = (float32x4_t)vbslq_s8(v70, (int8x16_t)vmulq_f32(v56, (float32x4_t)vextq_s8(v69, v69, 8uLL)), v69);
          v75 = (int8x16_t)vaddq_f32(vmulq_n_f32(v25, v73.f32[0]), v73);
          v76 = (int8x16_t)vaddq_f32(vmulq_n_f32(v25, v74.f32[0]), v74);
          v77 = (float32x4_t)vbslq_s8(v70, (int8x16_t)vaddq_f32(vmulq_n_f32(v25, v72.f32[0]), v72), v67);
          v78 = (float32x4_t)vbslq_s8(v70, v75, (int8x16_t)v68);
          v79 = (float32x4_t)vbslq_s8(v70, v76, v69);
          v80 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 0xCuLL), vmulq_laneq_f32(v71, v77, 2));
          v81 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 0xCuLL), vmulq_laneq_f32(v71, v78, 2));
          v82 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 0xCuLL), vmulq_laneq_f32(v71, v79, 2));
          v83 = *(float32x4_t *)(v15 + 192);
          v84 = *(int8x16_t *)(v15 + 208);
          v85 = (float32x4_t)vbslq_s8((int8x16_t)v83, v80, v61);
          v86 = vbslq_s8((int8x16_t)v83, v81, v65);
          v87 = vbslq_s8((int8x16_t)v83, v82, v66);
          v88 = (float32x4_t)vbslq_s8(v70, (int8x16_t)v29, v67);
          v89 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 0);
          v90 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.i8, 0);
          v91 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.i8, 0);
          *(int8x8_t *)v83.f32 = vqtbl1_s8((int8x16_t)v85, *(int8x8_t *)v84.i8);
          v92 = (int8x8_t)vextq_s8(v84, v84, 8uLL).u64[0];
          *(int8x8_t *)&v83.u32[2] = vqtbl1_s8((int8x16_t)v85, v92);
          *(int8x8_t *)v85.f32 = vqtbl1_s8(v86, *(int8x8_t *)v84.i8);
          *(int8x8_t *)&v85.u32[2] = vqtbl1_s8(v86, v92);
          v93 = vsubq_f32((float32x4_t)vbslq_s8(v70, (int8x16_t)v30, (int8x16_t)v68), v90);
          *(int8x8_t *)v68.f32 = vqtbl1_s8(v87, *(int8x8_t *)v84.i8);
          *(int8x8_t *)&v68.u32[2] = vqtbl1_s8(v87, v92);
          v94 = vsubq_f32((float32x4_t)vbslq_s8(v70, (int8x16_t)v41, v69), v91);
          v95 = vaddq_f32(v89, vmulq_f32(v83, vsubq_f32(v88, v89)));
          v96 = vaddq_f32(v90, vmulq_f32(v85, v93));
          v97 = vaddq_f32(v91, vmulq_f32(v68, v94));
          v98 = (float32x4_t *)(*(_QWORD *)&v6 + v11);
          *v98 = vaddq_f32(v29, vmulq_f32(v22, vsubq_f32((float32x4_t)vbslq_s8(v70, (int8x16_t)v95, (int8x16_t)vmulq_laneq_f32(v95, v95, 3)), v29)));
          v98[1] = vaddq_f32(v30, vmulq_f32(v22, vsubq_f32((float32x4_t)vbslq_s8(v70, (int8x16_t)v96, (int8x16_t)vmulq_laneq_f32(v96, v96, 3)), v30)));
          v98[2] = vaddq_f32(v41, vmulq_f32(v22, vsubq_f32((float32x4_t)vbslq_s8(v70, (int8x16_t)v97, (int8x16_t)vmulq_laneq_f32(v97, v97, 3)), v41)));
          v13 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F230);
          v12 -= 3;
          v11 += 48;
        }
        while (v5 + v12 > 2);
        LODWORD(v99) = -v12;
      }
      if ((int)v99 < v5)
      {
        v99 = v99;
        do
        {
          v100 = *(_QWORD *)(a1 + 408);
          v101 = *(float32x4_t *)(v100 + 80);
          v102 = *(float32x4_t *)(v100 + 96);
          v103 = *(float32x4_t *)(v100 + 112);
          v104 = vaddq_f32(v102, vaddq_f32(*(float32x4_t *)v100, vmulq_lane_f32(vmulq_f32(v13, *(float32x4_t *)(v100 + 48)), *(float32x2_t *)v101.f32, 1)));
          v105 = vmulq_f32(v104, v104);
          v106 = vaddq_f32(v105, (float32x4_t)vrev64q_s32((int32x4_t)v105));
          v107 = vminq_f32(vrsqrteq_f32(v106), v101);
          v108 = vminq_f32(vmulq_f32(v107, vrsqrtsq_f32(vmulq_f32(v107, v106), v107)), v101);
          v109 = vminq_f32(vmulq_f32(v108, vrsqrtsq_f32(vmulq_f32(v108, v106), v108)), v101);
          v110 = *(float32x4_t *)(*(_QWORD *)&v7 + 16 * v99);
          v111 = (int8x16_t)vaddq_f32(v102, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v100 + 32), v102), vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(vmulq_f32(v106, v109), *(float32x4_t *)(v100 + 16)), (float32x4_t)vrev64q_s32(*(int32x4_t *)(v100 + 16))), v103), v102).f32[0]));
          v112 = *(float32x4_t *)(v100 + 144);
          v113 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 3), *(float32x4_t *)(v100 + 128));
          v114 = vmulq_f32(vrecpeq_f32(v113), v112);
          v115 = (int8x16_t)vmulq_n_f32(vmulq_f32(v110, vmulq_f32(v114, vrecpsq_f32(v114, v113))), *(float *)v111.i32);
          v116 = (int8x16_t)vmulq_f32(v112, (float32x4_t)vextq_s8(v115, v115, 8uLL));
          v117 = *(int8x16_t *)(v100 + 160);
          v118 = (float32x4_t)vbslq_s8(v117, v116, v115);
          v119 = (float32x4_t)vbslq_s8(v117, (int8x16_t)vaddq_f32(vmulq_n_f32(v103, v118.f32[0]), v118), v115);
          v120 = *(int8x16_t *)(v100 + 208);
          v121 = vbslq_s8(*(int8x16_t *)(v100 + 192), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v119, 0xCuLL), vmulq_laneq_f32(*(float32x4_t *)(v100 + 176), v119, 2)), v111);
          *(int8x8_t *)v119.f32 = vqtbl1_s8(v121, *(int8x8_t *)v120.i8);
          v122 = vqtbl1_s8(v121, (int8x8_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL));
          v123 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v121.i8, 0);
          *(int8x8_t *)&v119.u32[2] = v122;
          v124 = vaddq_f32(v123, vmulq_f32(v119, vsubq_f32((float32x4_t)vbslq_s8(v117, (int8x16_t)v110, v115), v123)));
          *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v99) = vaddq_f32(v110, vmulq_f32(*(float32x4_t *)(v100 + 64), vsubq_f32((float32x4_t)vbslq_s8(v117, (int8x16_t)v124, (int8x16_t)vmulq_laneq_f32(v124, v124, 3)), v110)));
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          ++v99;
        }
        while (v99 < v5);
      }
      v8 = vaddq_f32(v8, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v6 += v9;
      *(_QWORD *)&v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcVignetteBB::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcVignetteBB::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcVignetteBB::HgcVignetteBB(HgcVignetteBB *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E7AA8;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = v4;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_OWORD *)(v3 + 80) = xmmword_1B30519D0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 112) = xmmword_1B30519E0;
  *(int32x4_t *)(v3 + 128) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 144) = xmmword_1B30519F0;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 176) = xmmword_1B3051A00;
  *(_OWORD *)(v3 + 192) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 208) = xmmword_1B3051A10;
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B287ABBC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcVignetteBB::~HgcVignetteBB(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E7AA8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40881B329ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcVignetteBB::~HgcVignetteBB(this);
  HGObject::operator delete(v1);
}

uint64_t HgcVignetteBB::SetParameter(HgcVignetteBB *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  float v11;
  __n128 *v12;
  __n128 *v13;
  int32x4_t v14;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_28;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_28;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == a3.n128_f32[0]
        && v10[2].n128_f32[1] == a4
        && v10[2].n128_f32[2] == a6
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u32[0] = a3.n128_u32[0];
      v10[2].n128_f32[1] = a4;
      v10[2].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v10[2].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[14] = a3;
      goto LABEL_28;
    case 3:
      v11 = -a4;
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[3].n128_f32[0] == (float)-a3.n128_f32[0]
        && v12[3].n128_f32[1] == v11
        && v12[3].n128_f32[2] == 0.0
        && v12[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12[3].n128_f32[0] = -a3.n128_f32[0];
      v12[3].n128_f32[1] = v11;
      a3.n128_f32[1] = a4;
      v12[3].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[15] = a3;
      goto LABEL_28;
    case 4:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[4].n128_f32[0] == a3.n128_f32[0]
        && v13[4].n128_f32[1] == a3.n128_f32[0]
        && v13[4].n128_f32[2] == a3.n128_f32[0]
        && v13[4].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v14 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v13[4] = (__n128)v14;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[16] = a3;
LABEL_28:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcVignetteBB::GetParameter(HgcVignetteBB *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_7;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_7;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[56];
      a3[1] = v6[57];
      a3[2] = v6[58];
      v4 = v6 + 59;
      goto LABEL_7;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[60];
      a3[1] = v7[61];
      a3[2] = v7[62];
      v4 = v7 + 63;
      goto LABEL_7;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[64];
      a3[1] = v8[65];
      a3[2] = v8[66];
      v4 = v8 + 67;
LABEL_7:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcGradientBlur2::GetProgram(HgcGradientBlur2 *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_63;
    else
      return aMetal10Len0000_64;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_20;
  }
}

void HgcGradientBlur2::InitProgramDescriptor(HgcGradientBlur2 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGradientBlur2_hgc_visible", "//Metal1.0     \n//LEN=0000000d41\n[[ visible ]] FragmentOut HgcGradientBlur2_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3,\n    float4 color4,\n    float4 texCoord5)\n{\n    const float4 c0 = float4(7.000000000, 3.000000000, 2.000000000, 1.000000000);\n"
    "    const float4 c1 = float4(4.000000000, 0.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r2.w = c0.w;\n"
    "    r2.xy = texCoord5.xy;\n"
    "    r2.x = dot(r2.xyw, hg_Params[1].xyz);\n"
    "    r2.x = r2.x*hg_Params[2].x + c0.w;\n"
    "    r3.x = r2.x*c0.x;\n"
    "    r4.y = floor(fabs(r3.x));\n"
    "    r3.w = select(r4.y, -r4.y, r3.x < 0.00000f);\n"
    "    r2.w = r3.w - c0.y;\n"
    "    r4.x = r3.x - r3.w;\n"
    "    r3.x = abs(hg_Params[0].x);\n"
    "    r5.y = float(r2.w == c0.z);\n"
    "    r6.x = float(r3.w < c1.x);\n"
    "    r6.z = float(r2.x < c0.w);\n"
    "    r6.y = float(c1.y < r2.x);\n"
    "    r2.y = fmin(r6.y, r6.z);\n"
    "    r6.y = float(-r6.x >= c1.y);\n"
    "    r6.x = r2.y*hg_Params[0].x;\n"
    "    r2.z = r6.x*r6.y;\n"
    "    r6.x = float(c1.y >= r2.w);\n"
    "    r6.y = r2.w - c0.w;\n"
    "    r6.y = abs(r6.y);\n"
    "    r6.x = float(-r6.x >= c1.y);\n"
    "    r7.x = r2.z*r6.x;\n"
    "    r7.y = float(-r6.y >= c1.y);\n"
    "    r6.z = r7.x*r7.y;\n"
    "    r7.y = float(-r7.y >= c1.y);\n"
    "    r5.x = r7.x*r7.y;\n"
    "    r7 = select(r0, r1, -r6.zzzz < 0.00000f);\n"
    "    r8 = color2;\n"
    "    r6.x = r5.x*r5.y;\n"
    "    r7 = select(r7, r8, -r6.xxxx < 0.00000f);\n"
    "    r9.y = float(-r5.y >= c1.y);\n"
    "    r9.x = float(r2.w == c0.y);\n"
    "    r6.y = r5.x*r9.y;\n"
    "    r6.w = r9.x;\n"
    "    r3.z = r6.y*r9.x;\n"
    "    r5 = color3;\n"
    "    r7 = select(r7, r5, -r3.zzzz < 0.00000f);\n"
    "    r6.w = float(-r6.w >= c1.y);\n"
    "    r3.y = r6.y*r6.w;\n"
    "    r9 = select(r1, r8, -r6.zzzz < 0.00000f);\n"
    "    r6 = select(r9, r5, -r6.xxxx < 0.00000f);\n"
    "    r9 = color4;\n"
    "    r6 = select(r6, r9, -r3.zzzz < 0.00000f);\n"
    "    r6 = select(r6, c1.zyyz, -r3.yyyy < 0.00000f);\n"
    "    r7 = select(r7, c1.zyyz, -r3.yyyy < 0.00000f);\n"
    "    r4.z = float(r3.w == c1.z);\n"
    "    r3.y = float(c1.y >= r3.w);\n"
    "    r3.w = r3.w - c0.z;\n"
    "    r3.w = abs(r3.w);\n"
    "    r3.xzw = float3(-r3.xyw >= c1.yyy);\n"
    "    r3.y = fmin(r2.y, r3.x);\n"
    "    r4.y = fmin(r3.y, r3.z);\n"
    "    r4.w = fmin(r4.y, r4.z);\n"
    "    r4.y = r4.y*-r4.z + r4.y;\n"
    "    r3.z = c1.z - r4.x;\n"
    "    r6 = mix(r6, r7, r3.zzzz);\n"
    "    r7 = select(r1, r8, -r4.wwww < 0.00000f);\n"
    "    r1 = select(r0, r1, -r4.wwww < 0.00000f);\n"
    "    r4.z = fmin(r4.y, r3.w);\n"
    "    r8 = select(r1, r8, -r4.zzzz < 0.00000f);\n"
    "    r7 = select(r7, r5, -r4.zzzz < 0.00000f);\n"
    "    r1.x = r3.w;\n"
    "    r1.y = abs(r2.w);\n"
    "    r1.xy = float2(-r1.xy >= c1.yy);\n"
    "    r1.z = r1.y;\n"
    "    r1.x = fmin(r4.y, r1.x);\n"
    "    r1.y = fmin(r1.x, r1.y);\n"
    "    r1.z = float(-r1.z >= c1.y);\n"
    "    r5 = select(r8, r5, -r1.yyyy < 0.00000f);\n"
    "    r1.x = fmin(r1.x, r1.z);\n"
    "    r7 = select(r7, r9, -r1.yyyy < 0.00000f);\n"
    "    r7 = select(r7, c1.zyyz, -r1.xxxx < 0.00000f);\n"
    "    r5 = select(r5, c1.zyyz, -r1.xxxx < 0.00000f);\n"
    "    r5 = mix(r7, r5, r3.zzzz);\n"
    "    r6 = select(r0, r6, -r2.zzzz < 0.00000f);\n"
    "    r5 = select(r6, r5, -r3.yyyy < 0.00000f);\n"
    "    r4.x = float(c1.y >= r2.x);\n"
    "    r8.x = r4.x;\n"
    "    r8.y = r2.y;\n"
    "    r8.xy = float2(-r8.xy >= c1.yy);\n"
    "    r8.x = fmin(r8.y, r8.x);\n"
    "    r8.y = fmin(r8.y, r4.x);\n"
    "    r5 = select(r5, r0, -r8.yyyy < 0.00000f);\n"
    "    r8.y = r8.x*-hg_Params[0].x;\n"
    "    r5 = select(r5, r9, r8.yyyy < 0.00000f);\n"
    "    r8.x = fmin(r8.x, r3.x);\n"
    "    output.color0 = select(r5, r0, -r8.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B287AFB0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGradientBlur2");
}

void sub_1B287AFC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B287B200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B287B268()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B287B260);
}

_QWORD *HgcGradientBlur2::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGradientBlur2 [hgc1]");
}

uint64_t HgcGradientBlur2::BindTexture(HgcGradientBlur2 *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  uint64_t result;
  int v7;

  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 0;
      goto LABEL_8;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 1;
      goto LABEL_8;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 2;
      goto LABEL_8;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 3;
      goto LABEL_8;
    case 4:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 4, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 4;
LABEL_8:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
        result = 0;
      }
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcGradientBlur2::Bind(HgcGradientBlur2 *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 5, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcGradientBlur2 *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcGradientBlur2::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x8_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int32x4_t v97;
  int8x16_t v98;
  float32x4_t v99;
  int8x16_t v100;
  int8x16_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  float32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int32x4_t v112;
  float32x4_t v113;
  int8x16_t v114;
  float32x4_t v115;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    v6 = a2[18];
    v7 = a2[16];
    v8 = a2[17].i32[0];
    v9 = a2[14];
    v10 = a2[15].i32[0];
    v11 = a2[12];
    v12 = a2[13].i32[0];
    v13 = a2[10];
    v14 = a2[11].i32[0];
    *(float32x2_t *)v15.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v15.i64[1] = 0x3F80000000000000;
    v16 = 16 * a2[3].i32[0];
    v17 = 16 * a2[19].i32[0];
    v18 = 16 * v10;
    v19 = 16 * v14;
    do
    {
      if (v4 >= 1)
      {
        v20 = 0;
        v21 = v15;
        do
        {
          v22 = *(_QWORD *)(a1 + 408);
          v23 = *(float32x4_t *)(v22 + 48);
          v24.i64[0] = v21.i64[0];
          v24.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
          v25 = *(int8x16_t *)(v22 + 64);
          v26 = *(float32x4_t *)(v22 + 80);
          *(int8x8_t *)v27.f32 = vqtbl1_s8(v24, *(int8x8_t *)v25.i8);
          *(int8x8_t *)&v27.u32[2] = vqtbl1_s8(v24, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
          v28 = vmulq_f32(*(float32x4_t *)(v22 + 16), v27);
          v29 = vaddq_f32(v23, vmulq_f32(*(float32x4_t *)(v22 + 32), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL), vaddq_f32(v28, (float32x4_t)vrev64q_s32((int32x4_t)v28)))));
          v30 = vmulq_f32(v26, v29);
          v31 = vabsq_f32((float32x4_t)vrev64q_s32((int32x4_t)v30));
          v32 = vcvtq_f32_s32(vcvtq_s32_f32(v31));
          v33 = (int8x16_t)vcgtq_f32(v32, v31);
          v34 = *(int8x16_t *)(*(_QWORD *)&v13 + v20);
          v35 = (float32x4_t)vdupq_lane_s64(vsubq_f32(v32, (float32x4_t)vbslq_s8(v33, (int8x16_t)v26, (int8x16_t)0)).i64[0], 0);
          v36 = *(int8x16_t *)(*(_QWORD *)&v11 + v20);
          v37 = veorq_s8((int8x16_t)v35, vandq_s8(vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL), v25));
          v38 = (int8x8_t)vextq_s8(v37, v37, 8uLL).u64[0];
          *(int8x8_t *)v35.f32 = vext_s8(v38, *(int8x8_t *)v30.f32, 4uLL);
          v35.i64[0] = vsubq_f32(v30, v35).u64[0];
          v30.i64[1] = v37.i64[1];
          v39 = (int8x16_t)vsubq_f32(v30, v26);
          v40 = (float32x4_t)vextq_s8(v39, (int8x16_t)v29, 8uLL);
          v41.i64[0] = v29.i64[0];
          *(float32x2_t *)v42.i8 = vabs_f32(*(float32x2_t *)v22);
          *(int8x8_t *)v30.f32 = vext_s8(v38, *(int8x8_t *)v42.i8, 4uLL);
          v41.i64[1] = v39.i64[1];
          *(int8x8_t *)&v30.u32[2] = vext_s8(*(int8x8_t *)v42.i8, v38, 4uLL);
          v44 = *(float32x4_t *)(v22 + 96);
          v43 = *(float32x4_t *)(v22 + 112);
          v42.u64[1] = (unint64_t)v38;
          v39.i64[0] = vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v44, v30)).u64[0];
          v39.i64[1] = vandq_s8(*(int8x16_t *)&v44, (int8x16_t)vcgtq_f32(v44, v40)).i64[1];
          v46 = *(int8x16_t *)(v22 + 128);
          v45 = *(int8x16_t *)(v22 + 144);
          v47 = (int8x16_t)vceqq_f32(v41, v44);
          v48 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v41, v43))), v39);
          v49 = vbslq_s8(v46, (int8x16_t)vminq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL)), (int8x16_t)v41);
          v50 = vbslq_s8(v45, (int8x16_t)vmulq_lane_f32(*(float32x4_t *)v22, *(float32x2_t *)v49.i8, 1), (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgeq_f32(vnegq_f32(v48), v43))));
          v51 = *(int8x16_t *)(v22 + 160);
          v52 = (float32x4_t)vbslq_s8(v51, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v50, v50, 0xCuLL), *(float *)v50.i32), v49);
          v53 = (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 0xCuLL);
          v54 = (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
          v55 = (int8x16_t)vsubq_f32(v54, v43);
          v56 = (float32x4_t)vorrq_s8(vandq_s8(vandq_s8((int8x16_t)v23, v45), (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vandq_s8(vbslq_s8(v45, vandq_s8((int8x16_t)v23, (int8x16_t)vcgeq_f32(v43, v53)), v55), *(int8x16_t *)(v22 + 176))), v43)), vandq_s8(vbicq_s8(v55, v45), *(int8x16_t *)(v22 + 176)));
          v57 = vandq_s8((int8x16_t)v23, v47);
          v58 = (int8x16_t)vmulq_laneq_f32(v56, v52, 2);
          v59 = (float32x4_t)vbslq_s8(v45, v58, vandq_s8((int8x16_t)v43, (int8x16_t)vcgeq_f32(vnegq_f32(v56), v44)));
          v60 = (int32x4_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v59, 0xCuLL), v59.f32[0]);
          v61 = (float32x4_t)vbslq_s8(v45, v58, vandq_s8((int8x16_t)v43, (int8x16_t)vcgeq_f32(vnegq_f32(v59), v44)));
          v62 = (float32x4_t)vbslq_s8(v45, (int8x16_t)vmulq_lane_f32(v61, *(float32x2_t *)v61.f32, 1), vextq_s8(v57, v57, 8uLL));
          v63 = *(float32x4_t *)(v22 + 192);
          v64 = *(float32x4_t *)(v22 + 208);
          v65 = *(int8x16_t *)(*(_QWORD *)&v9 + v20);
          v66.i64[0] = vmulq_lane_f32(v62, *(float32x2_t *)v62.f32, 1).u64[0];
          v67 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v60, 2), v63), v36, v34);
          v66.i64[1] = v60.i64[1];
          v68 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 0), v63);
          v69 = (float32x4_t)vbslq_s8(v45, vandq_s8((int8x16_t)v23, (int8x16_t)vceqq_f32(v53, v64)), vandq_s8((int8x16_t)v43, (int8x16_t)vcgeq_f32(vnegq_f32(v62), v63)));
          v70 = vbslq_s8(v46, (int8x16_t)vmulq_n_f32(v69, v62.f32[0]), v66);
          v72 = *(int8x16_t *)(v22 + 224);
          v71 = *(float32x4_t *)(v22 + 240);
          v73 = (float32x4_t)vbslq_s8(v72, vextq_s8((int8x16_t)v69, (int8x16_t)v69, 4uLL), v70);
          v74 = vbslq_s8(v68, v65, v67);
          v75 = (int32x4_t)vbslq_s8(v51, (int8x16_t)vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL), *(float32x2_t *)v73.f32, 1), v42);
          v76 = *(int8x16_t *)(*(_QWORD *)&v7 + v20);
          v77 = (float32x4_t)vbslq_s8(v72, vandq_s8((int8x16_t)v43, (int8x16_t)vcgeq_f32(vnegq_f32(v73), v64)), v70);
          v78 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v75, 2), v63);
          v79 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vmulq_laneq_f32(v77, v77, 3), (int8x16_t)v75);
          v80 = (float32x4_t)vbslq_s8(v46, vandq_s8((int8x16_t)v43, (int8x16_t)vcgeq_f32(v64, (float32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL))), (int8x16_t)v75);
          v81 = *(float32x4_t *)(v22 + 272);
          *(int8x8_t *)&v80.u32[2] = vand_s8((int8x8_t)vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL)), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v22 + 256), *(int8x16_t *)(v22 + 256), 8uLL));
          v82 = *(int8x16_t *)(*(_QWORD *)&v6 + v20);
          v83 = (int32x4_t)vnegq_f32(v80);
          v35.i64[1] = vandq_s8(*(int8x16_t *)&v64, (int8x16_t)vceqq_f32((float32x4_t)vrev64q_s32(v79), v64)).i64[1];
          v84 = (int32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vcgeq_f32((float32x4_t)vuzp1q_s32(v83, vrev64q_s32(v83)), v63));
          v85 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vminq_f32(v52, (float32x4_t)vrev64q_s32(v84)), (int8x16_t)v84);
          v86 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vminq_f32(v85, (float32x4_t)vextq_s8((int8x16_t)v85, (int8x16_t)v85, 4uLL)), (int8x16_t)v35);
          v87 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v79, 2), v63), v82, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 0), v63), v76, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v77, 2), v63), v65, v36)));
          v88 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.i8, 1), v63);
          v89 = (float32x4_t)vbslq_s8(v72, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL), (float32x4_t)vrev64q_s32(v86)), (int8x16_t)v86);
          v90 = (int32x4_t)vbslq_s8(v46, (int8x16_t)vsubq_f32(v89, vmulq_laneq_f32(v89, v89, 2)), (int8x16_t)v89);
          v91 = (float32x4_t)vbslq_s8(v88, (int8x16_t)v23, v87);
          v92 = (float32x4_t)vbslq_s8(v51, (int8x16_t)vsubq_f32(v81, (float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL)), (int8x16_t)v85);
          v93 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v88, (int8x16_t)v23, vbslq_s8(v78, v76, v74)), v91), v92, 2), v91);
          v94 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v90, 3), v63);
          v95 = vbslq_s8(v94, v65, v36);
          v96 = vbslq_s8(v94, v36, v34);
          v97 = (int32x4_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 0xCuLL), (float32x4_t)vrev64q_s32((int32x4_t)v92));
          v98 = vandq_s8((int8x16_t)v81, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vbslq_s8(v45, vextq_s8((int8x16_t)v92, (int8x16_t)v92, 0xCuLL), (int8x16_t)vabsq_f32(v54))), v71));
          v99 = (float32x4_t)vextq_s8((int8x16_t)v15, v98, 0xCuLL);
          v99.i64[0] = v98.i64[0];
          v100 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v97, 2), v63);
          v90.i64[1] = vdupq_laneq_s64((int64x2_t)v97, 1).u64[0];
          v101 = vbslq_s8(v100, v65, v96);
          v102 = (float32x4_t)vbslq_s8(v45, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v90), v99), (int8x16_t)v99);
          v103 = (float32x4_t)vbslq_s8(v46, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v102), v102), (int8x16_t)v102);
          v104 = vandq_s8((int8x16_t)v81, (int8x16_t)vcgeq_f32(vnegq_f32(v103), v71));
          v105 = (float32x4_t)vextq_s8(v104, (int8x16_t)v103, 8uLL);
          v103.i64[1] = v104.i64[1];
          v106 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 1), v63), v76, v101);
          v103.i64[0] = vbslq_s8(v45, (int8x16_t)vminq_f32(v103, v105), (int8x16_t)v103).u64[0];
          v107 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 1), v63), v82, vbslq_s8(v100, v76, v95));
          v108 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 0), v63);
          v109 = (float32x4_t)vbslq_s8(v108, (int8x16_t)v23, v106);
          v110 = (float32x4_t)vbslq_s8(v108, (int8x16_t)v23, v107);
          v111 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), v63), v93, v34);
          v112 = (int32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vcgeq_f32(v71, v52));
          v113 = (float32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vbslq_s8(v45, (int8x16_t)v112, (int8x16_t)v52)), v71));
          v114 = (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v113), v113);
          v113.i64[0] = vbslq_s8(v45, v114, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v45, v114, (int8x16_t)v113), (float32x4_t)vrev64q_s32(v112))).u64[0];
          v115 = (float32x4_t)vbslq_s8(v45, v114, (int8x16_t)vmulq_n_f32(vnegq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)v22)), v113.f32[0]));
          *(int8x16_t *)(*(_QWORD *)&v5 + v20) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vminq_f32(v115, v92), 0), v63), v34, vbslq_s8((int8x16_t)vcgtq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 1)), v82, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1), v63), v34, vbslq_s8(
                                                         (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1), v63), (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32(v109, v110), v92, 2), v110), v111))));
          v21 = vaddq_f32(v21, (float32x4_t)xmmword_1B304F230);
          v20 += 16;
        }
        while (16 * v4 != v20);
      }
      v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v16;
      *(_QWORD *)&v6 += v17;
      *(_QWORD *)&v7 += 16 * v8;
      *(_QWORD *)&v9 += v18;
      *(_QWORD *)&v11 += 16 * v12;
      *(_QWORD *)&v13 += v19;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcGradientBlur2::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 5)
    return 0;
  else
    return a4;
}

uint64_t HgcGradientBlur2::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 5)
    return 0;
  else
    return a4;
}

void HgcGradientBlur2::HgcGradientBlur2(HgcGradientBlur2 *this)
{
  _QWORD *v2;
  _OWORD *v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E7D10;
  v3 = (_OWORD *)operator new();
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  *v3 = 0u;
  v3[1] = v4;
  v3[2] = 0u;
  v3[3] = xmmword_1B304FAB0;
  v3[4] = xmmword_1B3051A40;
  v3[5] = xmmword_1B3051A50;
  v3[6] = xmmword_1B3051A60;
  v3[7] = xmmword_1B3050190;
  v3[8] = xmmword_1B3050FF0;
  v3[9] = xmmword_1B3050E20;
  v3[10] = xmmword_1B3050FE0;
  v3[11] = xmmword_1B3050FD0;
  v3[12] = 0u;
  v3[13] = xmmword_1B3051A70;
  v3[14] = xmmword_1B3050F70;
  v3[15] = xmmword_1B304EF70;
  __asm { FMOV            V2.4S, #1.0 }
  v3[16] = xmmword_1B3051A80;
  v3[17] = _Q2;
  v3[18] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B287BB68(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGradientBlur2::~HgcGradientBlur2(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E7D10;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FDACBBE0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGradientBlur2::~HgcGradientBlur2(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGradientBlur2::SetParameter(HgcGradientBlur2 *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  __n128 *v11;

  switch((_DWORD)a2)
  {
    case 2:
      v8 = *((_QWORD *)this + 51);
      if (*(float *)(v8 + 32) != a3.n128_f32[0]
        || *(float *)(v8 + 36) != a4
        || *(float *)(v8 + 40) != a5
        || *(float *)(v8 + 44) != a6)
      {
        *(_DWORD *)(v8 + 32) = a3.n128_u32[0];
        *(float *)(v8 + 36) = a4;
        *(float *)(v8 + 40) = a5;
        *(float *)(v8 + 44) = a6;
        goto LABEL_19;
      }
      return 0;
    case 1:
      v9 = -a4;
      v10 = -a6;
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[1].n128_f32[0] != (float)-a3.n128_f32[0]
        || v11[1].n128_f32[1] != v9
        || v11[1].n128_f32[2] != v10
        || v11[1].n128_f32[3] != 0.0)
      {
        v11[1].n128_f32[0] = -a3.n128_f32[0];
        v11[1].n128_f32[1] = v9;
        v11[1].n128_f32[2] = v10;
        a3.n128_f32[1] = a4;
        v11[1].n128_u32[3] = 0;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        v11[18] = a3;
        goto LABEL_19;
      }
      return 0;
    case 0:
      v7 = *((_QWORD *)this + 51);
      if (*(float *)v7 != a3.n128_f32[0]
        || *(float *)(v7 + 4) != a4
        || *(float *)(v7 + 8) != a5
        || *(float *)(v7 + 12) != a6)
      {
        *(_DWORD *)v7 = a3.n128_u32[0];
        *(float *)(v7 + 4) = a4;
        *(float *)(v7 + 8) = a5;
        *(float *)(v7 + 12) = a6;
LABEL_19:
        HGNode::ClearBits((HGNode *)this, a2, a7);
        return 1;
      }
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcGradientBlur2::GetParameter(HgcGradientBlur2 *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t result;

  switch(a2)
  {
    case 2:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[8];
      a3[1] = v5[9];
      a3[2] = v5[10];
      v4 = v5 + 11;
      goto LABEL_7;
    case 1:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[72];
      a3[1] = v6[73];
      a3[2] = v6[74];
      v4 = v6 + 75;
      goto LABEL_7;
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
LABEL_7:
      result = 0;
      a3[3] = *v4;
      return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcCheckerboard::GetProgram(HgcCheckerboard *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000050a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, 1.000000000, -2.000000000, 3.000000000);\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.y = select(-frag._texCoord0.y, frag._texCoord0.y, hg_Params[4].z < 0.00000h);\n"
             "    s0.x = frag._texCoord0.x;\n"
             "    s0.xy = s0.xy - hg_Params[0].xy;\n"
             "    s0.xy = s0.xy*hg_Params[4].xy;\n"
             "    s0.z = dot(s0.xy, hg_Params[5].xy);\n"
             "    s0.w = dot(s0.xy, hg_Params[6].xy);\n"
             "    s0.xy = s0.zw*hg_Params[3].xx + float2(c0.xx);\n"
             "    s0.xy = fract(s0.xy);\n"
             "    s0.zw = -s0.xy + float2(c0.yy);\n"
             "    s0.xy = fmin(s0.zw, s0.xy);\n"
             "    s0.xy = clamp(s0.xy*hg_Params[3].yy + hg_Params[3].zz, 0.00000f, 1.00000f);\n"
             "    s0.zw = s0.xy*float2(c0.zz) + float2(c0.ww);\n"
             "    s0.zw = s0.zw*s0.xy;\n"
             "    s0.zw = s0.zw*s0.xy;\n"
             "    s0.y = fmin(s0.z, s0.w);\n"
             "    s0.x = fmax(s0.z, s0.w);\n"
             "    s0.x = s0.y - s0.x;\n"
             "    s0.x = s0.x + float(c0.y);\n"
             "    s0 = mix(hg_Params[2], hg_Params[1], s0.xxxx);\n"
             "    s1.w = s0.w;\n"
             "    s1.xyz = s0.xyz*s0.www;\n"
             "    output.color0 = mix(s1, s0, hg_Params[7]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2b8d1193:0f2d3a2f:e34f6846:3561d638\n"
             "//SIG=00400000:00000000:00000000:00000000:0001:0008:0002:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, 1.000000000, -2.000000000, 3.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.y = select(-frag._texCoord0.y, frag._texCoord0.y, hg_Params[4].z < 0.00000f);\n"
             "    r0.x = frag._texCoord0.x;\n"
             "    r0.xy = r0.xy - hg_Params[0].xy;\n"
             "    r0.xy = r0.xy*hg_Params[4].xy;\n"
             "    r0.z = dot(r0.xy, hg_Params[5].xy);\n"
             "    r0.w = dot(r0.xy, hg_Params[6].xy);\n"
             "    r0.xy = r0.zw*hg_Params[3].xx + c0.xx;\n"
             "    r0.xy = fract(r0.xy);\n"
             "    r0.zw = -r0.xy + c0.yy;\n"
             "    r0.xy = fmin(r0.zw, r0.xy);\n"
             "    r0.xy = clamp(r0.xy*hg_Params[3].yy + hg_Params[3].zz, 0.00000f, 1.00000f);\n"
             "    r0.zw = r0.xy*c0.zz + c0.ww;\n"
             "    r0.zw = r0.zw*r0.xy;\n"
             "    r0.zw = r0.zw*r0.xy;\n"
             "    r0.y = fmin(r0.z, r0.w);\n"
             "    r0.x = fmax(r0.z, r0.w);\n"
             "    r0.x = r0.y - r0.x;\n"
             "    r0.x = r0.x + c0.y;\n"
             "    r0 = mix(hg_Params[2], hg_Params[1], r0.xxxx);\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = mix(r1, r0, hg_Params[7]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5a8a2c8b:f5b10d58:b97e6cdf:7a8e7ddc\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0008:0002:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000616\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.2500000000, 1.000000000, -2.000000000, 3.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.y = hg_ProgramLocal4.z < 0.00000 ? hg_TexCoord0.y : -hg_TexCoord0.y;\n"
           "    r0.x = hg_TexCoord0.x;\n"
           "    r0.xy = r0.xy - hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal4.xy;\n"
           "    r0.z = dot(r0.xy, hg_ProgramLocal5.xy);\n"
           "    r0.w = dot(r0.xy, hg_ProgramLocal6.xy);\n"
           "    r0.xy = r0.zw*hg_ProgramLocal3.xx + c0.xx;\n"
           "    r0.xy = fract(r0.xy);\n"
           "    r0.zw = -r0.xy + c0.yy;\n"
           "    r0.xy = min(r0.zw, r0.xy);\n"
           "    r0.xy = clamp(r0.xy*hg_ProgramLocal3.yy + hg_ProgramLocal3.zz, vec2(0.00000), vec2(1.00000));\n"
           "    r0.zw = r0.xy*c0.zz + c0.ww;\n"
           "    r0.zw = r0.zw*r0.xy;\n"
           "    r0.zw = r0.zw*r0.xy;\n"
           "    r0.y = min(r0.z, r0.w);\n"
           "    r0.x = max(r0.z, r0.w);\n"
           "    r0.x = r0.y - r0.x;\n"
           "    r0.x = r0.x + c0.y;\n"
           "    r0 = mix(hg_ProgramLocal2, hg_ProgramLocal1, r0.xxxx);\n"
           "    r1.w = r0.w;\n"
           "    r1.xyz = r0.xyz*r0.www;\n"
           "    gl_FragColor = mix(r1, r0, hg_ProgramLocal7);\n"
           "}\n"
           "//MD5=cca23b34:3829397e:b592375e:962cf0d3\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0008:0002:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcCheckerboard::InitProgramDescriptor(HgcCheckerboard *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcCheckerboard_hgc_visible", "//Metal1.0     \n//LEN=000000043d\n[[ visible ]] FragmentOut HgcCheckerboard_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.2500000000, 1.000000000, -2.000000000, 3.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.y = select(-texCoord0.y, texCoord0.y, hg_Params[4].z < 0.00000f);\n"
    "    r0.x = texCoord0.x;\n"
    "    r0.xy = r0.xy - hg_Params[0].xy;\n"
    "    r0.xy = r0.xy*hg_Params[4].xy;\n"
    "    r0.z = dot(r0.xy, hg_Params[5].xy);\n"
    "    r0.w = dot(r0.xy, hg_Params[6].xy);\n"
    "    r0.xy = r0.zw*hg_Params[3].xx + c0.xx;\n"
    "    r0.xy = fract(r0.xy);\n"
    "    r0.zw = -r0.xy + c0.yy;\n"
    "    r0.xy = fmin(r0.zw, r0.xy);\n"
    "    r0.xy = clamp(r0.xy*hg_Params[3].yy + hg_Params[3].zz, 0.00000f, 1.00000f);\n"
    "    r0.zw = r0.xy*c0.zz + c0.ww;\n"
    "    r0.zw = r0.zw*r0.xy;\n"
    "    r0.zw = r0.zw*r0.xy;\n"
    "    r0.y = fmin(r0.z, r0.w);\n"
    "    r0.x = fmax(r0.z, r0.w);\n"
    "    r0.x = r0.y - r0.x;\n"
    "    r0.x = r0.x + c0.y;\n"
    "    r0 = mix(hg_Params[2], hg_Params[1], r0.xxxx);\n"
    "    r1.w = r0.w;\n"
    "    r1.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = mix(r1, r0, hg_Params[7]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B287BE58()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcCheckerboard");
}

void sub_1B287BE68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B287BF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B287BFA8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B287BFA0);
}

_QWORD *HgcCheckerboard::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcCheckerboard [hgc1]");
}

uint64_t HgcCheckerboard::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcCheckerboard::Bind(HgcCheckerboard *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HgcCheckerboard *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcCheckerboard::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t *v8;
  uint64_t v9;
  int v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  float32x2_t v56;
  float32x2_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x8_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x8_t v74;
  float32x4_t v75;
  int8x8_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  uint64_t v91;
  uint64_t v92;
  int8x16_t v93;
  float32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  float32x4_t v106;
  int8x8_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = (float32x4_t *)a2[2];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v8 = v6 + 2;
    v9 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 4)
      {
        LODWORD(v91) = 0;
        v12 = v7;
      }
      else
      {
        v10 = 0;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *(_QWORD *)(a1 + 408);
          v17 = *(float32x4_t *)(v16 + 64);
          v18 = *(float32x4_t *)(v16 + 80);
          v19 = *(int8x16_t *)(v16 + 144);
          v20 = vandq_s8(vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL), *(int8x16_t *)(v16 + 128));
          v21 = vmulq_f32(v17, vsubq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v12, veorq_s8(v20, (int8x16_t)vnegq_f32(v12))), *(float32x4_t *)v16));
          v22 = vmulq_f32(v17, vsubq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v13, veorq_s8(v20, (int8x16_t)vnegq_f32(v13))), *(float32x4_t *)v16));
          v23 = vmulq_f32(v17, vsubq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v14, veorq_s8(v20, (int8x16_t)vnegq_f32(v14))), *(float32x4_t *)v16));
          v24 = vmulq_f32(v17, vsubq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v15, veorq_s8(v20, (int8x16_t)vnegq_f32(v15))), *(float32x4_t *)v16));
          v25 = (int8x16_t)vmulq_f32(v18, v21);
          v26 = (int8x16_t)vmulq_f32(v18, v22);
          v27 = (int8x16_t)vmulq_f32(v18, v23);
          v28 = (int8x16_t)vmulq_f32(v18, v24);
          v21.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v25, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v7, v25, 0xCuLL)).i64[1];
          v22.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v26, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v7, v26, 0xCuLL)).i64[1];
          v23.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v27, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v7, v27, 0xCuLL)).i64[1];
          v24.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v28, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v7, v28, 0xCuLL)).i64[1];
          v30 = *(float32x4_t *)(v16 + 96);
          v29 = *(float32x4_t *)(v16 + 112);
          v31 = (int8x16_t)vmulq_f32(v30, v21);
          v32 = (int8x16_t)vmulq_f32(v30, v22);
          v33 = (int8x16_t)vmulq_f32(v30, v23);
          v34 = (int8x16_t)vmulq_f32(v30, v24);
          v35 = *(int8x16_t *)(v16 + 160);
          v36 = *(float32x4_t *)(v16 + 176);
          v37 = vbslq_s8(v35, (int8x16_t)v21, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v31, v31, 4uLL), (float32x4_t)vextq_s8(v31, v31, 8uLL)));
          v38 = vbslq_s8(v35, (int8x16_t)v22, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v32, v32, 4uLL), (float32x4_t)vextq_s8(v32, v32, 8uLL)));
          v39 = vbslq_s8(v35, (int8x16_t)v23, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v33, v33, 4uLL), (float32x4_t)vextq_s8(v33, v33, 8uLL)));
          v40 = vbslq_s8(v35, (int8x16_t)v24, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v34, v34, 4uLL), (float32x4_t)vextq_s8(v34, v34, 8uLL)));
          v41 = (float32x4_t)vextq_s8(v40, v40, 8uLL);
          v42 = *(float32x4_t *)(v16 + 32);
          v43 = *(float32x4_t *)(v16 + 48);
          v44 = vaddq_f32(v36, vmulq_n_f32((float32x4_t)vextq_s8(v37, v37, 8uLL), v43.f32[0]));
          v45 = vmulq_n_f32((float32x4_t)vextq_s8(v38, v38, 8uLL), v43.f32[0]);
          v46 = vmulq_n_f32((float32x4_t)vextq_s8(v39, v39, 8uLL), v43.f32[0]);
          v47 = vaddq_f32(v36, v45);
          v48 = vaddq_f32(v36, v46);
          v49 = vaddq_f32(v36, vmulq_n_f32(v41, v43.f32[0]));
          v50 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
          v51 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
          v52 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
          v53 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
          v54 = *(float32x4_t *)(v16 + 192);
          v55 = *(int8x16_t *)(v16 + 208);
          *(float32x2_t *)v44.f32 = vsub_f32(*(float32x2_t *)v44.f32, vsub_f32(*(float32x2_t *)v50.f32, (float32x2_t)vand_s8(*(int8x8_t *)v54.f32, (int8x8_t)*(_OWORD *)&vcgtq_f32(v50, v44))));
          v50.i64[0] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
          v56 = vsub_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v44.f32);
          *(float32x2_t *)v47.f32 = vsub_f32(*(float32x2_t *)v47.f32, vsub_f32(*(float32x2_t *)v51.f32, (float32x2_t)vand_s8(*(int8x8_t *)v54.f32, (int8x8_t)*(_OWORD *)&vcgtq_f32(v51, v47))));
          *(float32x2_t *)v51.f32 = vsub_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v47.f32);
          *(float32x2_t *)v48.f32 = vsub_f32(*(float32x2_t *)v48.f32, vsub_f32(*(float32x2_t *)v52.f32, (float32x2_t)vand_s8(*(int8x8_t *)v54.f32, (int8x8_t)*(_OWORD *)&vcgtq_f32(v52, v48))));
          *(float32x2_t *)v52.f32 = vsub_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v48.f32);
          *(float32x2_t *)v49.f32 = vsub_f32(*(float32x2_t *)v49.f32, vsub_f32(*(float32x2_t *)v53.f32, (float32x2_t)vand_s8(*(int8x8_t *)v54.f32, (int8x8_t)*(_OWORD *)&vcgtq_f32(v53, v49))));
          *(float32x2_t *)v53.f32 = vsub_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v49.f32);
          *(int32x2_t *)v50.f32 = vdup_laneq_s32((int32x4_t)v43, 2);
          v36.i64[0] = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL).u64[0];
          *(float32x2_t *)v44.f32 = vmin_f32(vmax_f32(vadd_f32(*(float32x2_t *)v50.f32, vmul_lane_f32(vmin_f32(v56, *(float32x2_t *)v44.f32), *(float32x2_t *)v43.f32, 1)), *(float32x2_t *)v55.i8), *(float32x2_t *)v54.f32);
          v57 = (float32x2_t)vextq_s8(v55, v55, 8uLL).u64[0];
          *(float32x2_t *)v47.f32 = vmin_f32(vmax_f32(vadd_f32(*(float32x2_t *)v50.f32, vmul_lane_f32(vmin_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v47.f32), *(float32x2_t *)v43.f32, 1)), *(float32x2_t *)v55.i8), *(float32x2_t *)v54.f32);
          *(float32x2_t *)v48.f32 = vmin_f32(vmax_f32(vadd_f32(*(float32x2_t *)v50.f32, vmul_lane_f32(vmin_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v48.f32), *(float32x2_t *)v43.f32, 1)), *(float32x2_t *)v55.i8), *(float32x2_t *)v54.f32);
          *(float32x2_t *)v43.f32 = vmin_f32(vmax_f32(vadd_f32(*(float32x2_t *)v50.f32, vmul_lane_f32(vmin_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v49.f32), *(float32x2_t *)v43.f32, 1)), *(float32x2_t *)v55.i8), *(float32x2_t *)v54.f32);
          *(float32x2_t *)v49.f32 = vadd_f32(v57, vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v43.f32));
          *(float32x2_t *)v53.f32 = vmul_f32(*(float32x2_t *)v44.f32, vadd_f32(v57, vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v44.f32)));
          v53.i64[1] = v44.i64[0];
          *(float32x2_t *)v50.f32 = vmul_f32(*(float32x2_t *)v53.f32, *(float32x2_t *)v44.f32);
          *(float32x2_t *)v58.f32 = vmul_f32(*(float32x2_t *)v47.f32, vadd_f32(v57, vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v47.f32)));
          v58.i64[1] = v47.i64[0];
          *(float32x2_t *)v59.f32 = vmul_f32(*(float32x2_t *)v48.f32, vadd_f32(v57, vmul_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v48.f32)));
          v59.i64[1] = v48.i64[0];
          v60 = (int8x8_t)vmul_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v47.f32);
          v44.i64[1] = v53.i64[0];
          *(float32x2_t *)v51.f32 = vmul_f32(*(float32x2_t *)v59.f32, *(float32x2_t *)v48.f32);
          *(float32x2_t *)v61.f32 = vmul_f32(*(float32x2_t *)v43.f32, *(float32x2_t *)v49.f32);
          v47.i64[1] = v58.i64[0];
          v61.i64[1] = v43.i64[0];
          *(float32x2_t *)v52.f32 = vmul_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v43.f32);
          v48.i64[1] = v59.i64[0];
          v43.i64[1] = v61.i64[0];
          v62 = (int8x16_t)vmulq_f32(v44, v53);
          v63 = (int8x16_t)vmulq_f32(v47, v58);
          v64 = (int8x16_t)vmulq_f32(v48, v59);
          v65 = (int8x16_t)vmulq_f32(v43, v61);
          v66 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v62, v62, 4uLL), (float32x4_t)vextq_s8(v62, v62, 8uLL));
          v67 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v63, v63, 4uLL), (float32x4_t)vextq_s8(v63, v63, 8uLL));
          v68 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v64, v64, 4uLL), (float32x4_t)vextq_s8(v64, v64, 8uLL));
          v69 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v65, v65, 4uLL), (float32x4_t)vextq_s8(v65, v65, 8uLL));
          v70 = (float32x4_t)vextq_s8(v62, v66, 8uLL);
          *(int8x8_t *)v61.f32 = vext_s8(*(int8x8_t *)v66.i8, *(int8x8_t *)v50.f32, 4uLL);
          *(int8x8_t *)v50.f32 = vext_s8(*(int8x8_t *)v50.f32, *(int8x8_t *)v66.i8, 4uLL);
          v66.i64[1] = v62.i64[1];
          v71 = (float32x4_t)vextq_s8(v63, v67, 8uLL);
          *(int8x8_t *)v55.i8 = vext_s8(*(int8x8_t *)v67.i8, v60, 4uLL);
          *(int8x8_t *)v72.f32 = vext_s8(v60, *(int8x8_t *)v67.i8, 4uLL);
          v67.i64[1] = v63.i64[1];
          v73 = (float32x4_t)vextq_s8(v64, v68, 8uLL);
          v74 = vext_s8(*(int8x8_t *)v68.i8, *(int8x8_t *)v51.f32, 4uLL);
          *(int8x8_t *)v51.f32 = vext_s8(*(int8x8_t *)v51.f32, *(int8x8_t *)v68.i8, 4uLL);
          v68.i64[1] = v64.i64[1];
          v75 = (float32x4_t)vextq_s8(v65, v69, 8uLL);
          v76 = vext_s8(*(int8x8_t *)v69.i8, *(int8x8_t *)v52.f32, 4uLL);
          *(int8x8_t *)v52.f32 = vext_s8(*(int8x8_t *)v52.f32, *(int8x8_t *)v69.i8, 4uLL);
          v50.i64[1] = v61.i64[0];
          v72.i64[1] = v55.i64[0];
          *(int8x8_t *)&v51.u32[2] = v74;
          v69.i64[1] = v65.i64[1];
          *(int8x8_t *)&v52.u32[2] = v76;
          v77 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vmaxq_f32(v70, v50), v66);
          v78 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vmaxq_f32(v71, v72), v67);
          v79 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vmaxq_f32(v73, v51), v68);
          v80 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vmaxq_f32(v75, v52), v69);
          v75.i32[0] = vaddq_f32(v54, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1), v77)).u32[0];
          v77.i32[0] = vaddq_f32(v54, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1), v78)).u32[0];
          v79.i32[0] = vaddq_f32(v54, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1), v79)).u32[0];
          v80.i32[0] = vaddq_f32(v54, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1), v80)).u32[0];
          v81 = vsubq_f32(*(float32x4_t *)(v16 + 16), v42);
          v82 = vaddq_f32(v42, vmulq_n_f32(v81, v75.f32[0]));
          v83 = vaddq_f32(v42, vmulq_n_f32(v81, v77.f32[0]));
          v84 = vaddq_f32(v42, vmulq_n_f32(v81, v79.f32[0]));
          v85 = vaddq_f32(v42, vmulq_n_f32(v81, v80.f32[0]));
          v86 = *(int8x16_t *)(v16 + 224);
          v87 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v82, (int8x16_t)vmulq_laneq_f32(v82, v82, 3));
          v88 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v83, (int8x16_t)vmulq_laneq_f32(v83, v83, 3));
          v89 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v84, (int8x16_t)vmulq_laneq_f32(v84, v84, 3));
          v90 = (float32x4_t)vbslq_s8(v86, (int8x16_t)v85, (int8x16_t)vmulq_laneq_f32(v85, v85, 3));
          v11[-2] = vaddq_f32(vmulq_f32(v29, vsubq_f32(v82, v87)), v87);
          v11[-1] = vaddq_f32(vmulq_f32(v29, vsubq_f32(v83, v88)), v88);
          *v11 = vaddq_f32(vmulq_f32(v29, vsubq_f32(v84, v89)), v89);
          v11[1] = vaddq_f32(vmulq_f32(v29, vsubq_f32(v85, v90)), v90);
          v11 += 4;
          v12 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v10 -= 4;
        }
        while (v5 + v10 > 3);
        LODWORD(v91) = -v10;
      }
      if ((int)v91 < v5)
      {
        v91 = v91;
        do
        {
          v92 = *(_QWORD *)(a1 + 408);
          v93 = *(int8x16_t *)(v92 + 144);
          v94 = vmulq_f32(*(float32x4_t *)(v92 + 64), vsubq_f32((float32x4_t)vbslq_s8(v93, (int8x16_t)v12, veorq_s8(vandq_s8(vextq_s8(*(int8x16_t *)(v92 + 64), *(int8x16_t *)(v92 + 64), 4uLL), *(int8x16_t *)(v92 + 128)), (int8x16_t)vnegq_f32(v12))), *(float32x4_t *)v92));
          v95 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v92 + 80), v94);
          v94.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v95, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v7, v95, 0xCuLL)).i64[1];
          v96 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v92 + 96), v94);
          v97 = *(float32x4_t *)(v92 + 176);
          v98 = vbslq_s8(*(int8x16_t *)(v92 + 160), (int8x16_t)v94, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v96, v96, 4uLL), (float32x4_t)vextq_s8(v96, v96, 8uLL)));
          v99 = *(int32x4_t *)(v92 + 48);
          v100 = vaddq_f32(v97, vmulq_n_f32((float32x4_t)vextq_s8(v98, v98, 8uLL), *(float *)v99.i32));
          v101 = vcvtq_f32_s32(vcvtq_s32_f32(v100));
          v102 = *(float32x4_t *)(v92 + 192);
          v103 = *(int8x16_t *)(v92 + 208);
          *(float32x2_t *)v100.f32 = vsub_f32(*(float32x2_t *)v100.f32, vsub_f32(*(float32x2_t *)v101.f32, (float32x2_t)vand_s8(*(int8x8_t *)v102.f32, (int8x8_t)*(_OWORD *)&vcgtq_f32(v101, v100))));
          *(float32x2_t *)v100.f32 = vmin_f32(vmax_f32(vadd_f32((float32x2_t)vdup_laneq_s32(v99, 2), vmul_lane_f32(vmin_f32(vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL), *(float32x2_t *)v100.f32), *(float32x2_t *)v100.f32), *(float32x2_t *)v99.i8, 1)), *(float32x2_t *)v103.i8), *(float32x2_t *)v102.f32);
          *(float32x2_t *)v97.f32 = vmul_f32(*(float32x2_t *)v100.f32, vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL), vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL), *(float32x2_t *)v100.f32)));
          v97.i64[1] = v100.i64[0];
          *(float32x2_t *)v101.f32 = vmul_f32(*(float32x2_t *)v97.f32, *(float32x2_t *)v100.f32);
          v100.i64[1] = v97.i64[0];
          v104 = (int8x16_t)vmulq_f32(v100, v97);
          v105 = (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v104, v104, 4uLL), (float32x4_t)vextq_s8(v104, v104, 8uLL));
          v106 = (float32x4_t)vextq_s8(v104, v105, 8uLL);
          v107 = vext_s8(*(int8x8_t *)v105.i8, *(int8x8_t *)v101.f32, 4uLL);
          *(int8x8_t *)v101.f32 = vext_s8(*(int8x8_t *)v101.f32, *(int8x8_t *)v105.i8, 4uLL);
          v105.i64[1] = v104.i64[1];
          *(int8x8_t *)&v101.u32[2] = v107;
          v108 = (float32x4_t)vbslq_s8(v93, (int8x16_t)vmaxq_f32(v106, v101), v105);
          v109 = vaddq_f32(*(float32x4_t *)(v92 + 32), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v92 + 16), *(float32x4_t *)(v92 + 32)), vaddq_f32(v102, vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 1), v108)).f32[0]));
          v110 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v92 + 224), (int8x16_t)v109, (int8x16_t)vmulq_laneq_f32(v109, v109, 3));
          v6[v91] = vaddq_f32(vmulq_f32(*(float32x4_t *)(v92 + 112), vsubq_f32(v109, v110)), v110);
          v12 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          ++v91;
        }
        while (v91 < v5);
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      ++v4;
      v8 = (float32x4_t *)((char *)v8 + v9);
      v6 = (float32x4_t *)((char *)v6 + v9);
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcCheckerboard::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcCheckerboard::GetROI()
{
  return 0;
}

void HgcCheckerboard::HgcCheckerboard(HgcCheckerboard *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E7F78;
  v3 = (_OWORD *)operator new();
  v3[6] = 0u;
  v3[7] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[8] = xmmword_1B3051AB0;
  v3[9] = xmmword_1B3050E20;
  v3[10] = xmmword_1B3050FE0;
  v3[11] = xmmword_1B3051AC0;
  __asm { FMOV            V0.4S, #1.0 }
  v3[12] = _Q0;
  v3[13] = xmmword_1B3051AD0;
  v3[14] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B287C818(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcCheckerboard::~HgcCheckerboard(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E7F78;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4019FCA701);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcCheckerboard::~HgcCheckerboard(this);
  HGObject::operator delete(v1);
}

uint64_t HgcCheckerboard::SetParameter(HgcCheckerboard *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 7)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcCheckerboard::GetParameter(HgcCheckerboard *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 7)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcConcentricPolygons::GetProgram(HgcConcentricPolygons *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000007bd\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 1.000000000, 0.7500000000, 0.000000000);\n"
             "    const half4 c1 = half4(0.2500000000, 3.000000000, -2.000000000, 0.000000000);\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    s0.xy = s0.xy*hg_Params[5].xy;\n"
             "    s1.y = dot(s0.xyz, hg_Params[7].zwz);\n"
             "    s0.x = dot(s0.xyz, hg_Params[7].xyx);\n"
             "    s0.y = s1.y;\n"
             "    s1 = float4(dot(s0.xy, s0.xy));\n"
             "    s1 = sqrt(s1);\n"
             "    s0.x = atan2(s0.y, s0.x);\n"
             "    s2.x = s0.x;\n"
             "    s0.x = s0.x*hg_Params[6].y;\n"
             "    s0.x = floor(s0.x);\n"
             "    s0.x = float(c0.x) + s0.x;\n"
             "    s0.x = hg_Params[6].x*s0.x + -s2.x;\n"
             "    s0 = cos(s0.xxxx);\n"
             "    s0 = s0*s1;\n"
             "    s2.x = clamp(s0.x - hg_Params[8].x, 0.00000f, 1.00000f);\n"
             "    s2.x = float(c0.y) - s2.x;\n"
             "    s1.x = float(c0.y) + s0.x;\n"
             "    s1.x = clamp(s1.x - hg_Params[9].x, 0.00000f, 1.00000f);\n"
             "    s2.x = s2.x*s1.x;\n"
             "    s0 = s0/hg_Params[3].xxxx;\n"
             "    s0 = fract(s0);\n"
             "    s0 = s0 + hg_Params[3].yyyy;\n"
             "    s0 = fract(s0);\n"
             "    s1 = float4(c0.zzzz) - s0;\n"
             "    s3 = float4(s1 < float4(c0.wwww));\n"
             "    s1 = float4(c0.zzzz) + s1;\n"
             "    s0 = select(s0, s1, -s3 < 0.00000h);\n"
             "    s3 = float4(c1.xxxx) - s0;\n"
             "    s1 = float4(s3 < float4(c0.wwww));\n"
             "    s3 = float4(c1.xxxx) + s3;\n"
             "    s0 = select(s3, s0, -s1 < 0.00000h);\n"
             "    s0 = clamp(mix(float4(c0.xxxx), s0, hg_Params[4]), 0.00000f, 1.00000f);\n"
             "    s1 = s0*s0;\n"
             "    s3 = s1*float4(c1.yyyy);\n"
             "    s1 = s1*s0;\n"
             "    s1 = s1*float4(c1.zzzz) + s3;\n"
             "    s1 = mix(hg_Params[1], hg_Params[2], s1);\n"
             "    s0.x = s2.x*s2.x;\n"
             "    s3.x = s0.x*float(c1.y);\n"
             "    s0.x = s0.x*s2.x;\n"
             "    s0.x = s0.x*float(c1.z) + s3.x;\n"
             "    output.color0.xyz = s1.xyz*s0.xxx;\n"
             "    output.color0.w = s0.x*s1.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=86fd0cc1:c4902811:0f4c8661:2d2e7bc8\n"
             "//SIG=00400000:00000000:00000000:00000000:0002:000a:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000756\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 1.000000000, 0.7500000000, 0.000000000);\n"
             "    const float4 c1 = float4(0.2500000000, 3.000000000, -2.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    r0.xy = r0.xy*hg_Params[5].xy;\n"
             "    r1.y = dot(r0.xyz, hg_Params[7].zwz);\n"
             "    r0.x = dot(r0.xyz, hg_Params[7].xyx);\n"
             "    r0.y = r1.y;\n"
             "    r1 = float4(dot(r0.xy, r0.xy));\n"
             "    r1 = sqrt(r1);\n"
             "    r0.x = atan2(r0.y, r0.x);\n"
             "    r2.x = r0.x;\n"
             "    r0.x = r0.x*hg_Params[6].y;\n"
             "    r0.x = floor(r0.x);\n"
             "    r0.x = c0.x + r0.x;\n"
             "    r0.x = hg_Params[6].x*r0.x + -r2.x;\n"
             "    r0 = cos(r0.xxxx);\n"
             "    r0 = r0*r1;\n"
             "    r2.x = clamp(r0.x - hg_Params[8].x, 0.00000f, 1.00000f);\n"
             "    r2.x = c0.y - r2.x;\n"
             "    r1.x = c0.y + r0.x;\n"
             "    r1.x = clamp(r1.x - hg_Params[9].x, 0.00000f, 1.00000f);\n"
             "    r2.x = r2.x*r1.x;\n"
             "    r0 = r0/hg_Params[3].xxxx;\n"
             "    r0 = fract(r0);\n"
             "    r0 = r0 + hg_Params[3].yyyy;\n"
             "    r0 = fract(r0);\n"
             "    r1 = c0.zzzz - r0;\n"
             "    r3 = float4(r1 < c0.wwww);\n"
             "    r1 = c0.zzzz + r1;\n"
             "    r0 = select(r0, r1, -r3 < 0.00000f);\n"
             "    r3 = c1.xxxx - r0;\n"
             "    r1 = float4(r3 < c0.wwww);\n"
             "    r3 = c1.xxxx + r3;\n"
             "    r0 = select(r3, r0, -r1 < 0.00000f);\n"
             "    r0 = clamp(mix(c0.xxxx, r0, hg_Params[4]), 0.00000f, 1.00000f);\n"
             "    r1 = r0*r0;\n"
             "    r3 = r1*c1.yyyy;\n"
             "    r1 = r1*r0;\n"
             "    r1 = r1*c1.zzzz + r3;\n"
             "    r1 = mix(hg_Params[1], hg_Params[2], r1);\n"
             "    r0.x = r2.x*r2.x;\n"
             "    r3.x = r0.x*c1.y;\n"
             "    r0.x = r0.x*r2.x;\n"
             "    r0.x = r0.x*c1.z + r3.x;\n"
             "    output.color0.xyz = r1.xyz*r0.xxx;\n"
             "    output.color0.w = r0.x*r1.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=ae5dc3ce:fae50fae:dfe3436a:57d73211\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:000a:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000009b5\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 1.000000000, 0.7500000000, 0.000000000);\n"
           "    const highp vec4 c1 = vec4(0.2500000000, 3.000000000, -2.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.xyz = hg_TexCoord0.xyz - hg_ProgramLocal0.xyz;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal5.xy;\n"
           "    r1.y = dot(r0.xyz, hg_ProgramLocal7.zwz);\n"
           "    r0.x = dot(r0.xyz, hg_ProgramLocal7.xyx);\n"
           "    r0.y = r1.y;\n"
           "    r1 = vec4(dot(r0.xy, r0.xy));\n"
           "    r1 = sqrt(r1);\n"
           "    r0.x = atan(r0.y, r0.x);\n"
           "    r2.x = r0.x;\n"
           "    r0.x = r0.x*hg_ProgramLocal6.y;\n"
           "    r0.x = floor(r0.x);\n"
           "    r0.x = c0.x + r0.x;\n"
           "    r0.x = hg_ProgramLocal6.x*r0.x + -r2.x;\n"
           "    r0 = cos(r0.xxxx);\n"
           "    r0 = r0*r1;\n"
           "    r2.x = clamp(r0.x - hg_ProgramLocal8.x, 0.00000, 1.00000);\n"
           "    r2.x = c0.y - r2.x;\n"
           "    r1.x = c0.y + r0.x;\n"
           "    r1.x = clamp(r1.x - hg_ProgramLocal9.x, 0.00000, 1.00000);\n"
           "    r2.x = r2.x*r1.x;\n"
           "    r0 = r0/hg_ProgramLocal3.xxxx;\n"
           "    r0 = fract(r0);\n"
           "    r0 = r0 + hg_ProgramLocal3.yyyy;\n"
           "    r0 = fract(r0);\n"
           "    r1 = c0.zzzz - r0;\n"
           "    r3 = vec4(lessThan(r1, c0.wwww));\n"
           "    r1 = c0.zzzz + r1;\n"
           "    r0 = vec4(-r3.x < 0.00000 ? r1.x : r0.x, -r3.y < 0.00000 ? r1.y : r0.y, -r3.z < 0.00000 ? r1.z : r0.z, -r"
           "3.w < 0.00000 ? r1.w : r0.w);\n"
           "    r3 = c1.xxxx - r0;\n"
           "    r1 = vec4(lessThan(r3, c0.wwww));\n"
           "    r3 = c1.xxxx + r3;\n"
           "    r0 = vec4(-r1.x < 0.00000 ? r0.x : r3.x, -r1.y < 0.00000 ? r0.y : r3.y, -r1.z < 0.00000 ? r0.z : r3.z, -r"
           "1.w < 0.00000 ? r0.w : r3.w);\n"
           "    r0 = clamp(mix(c0.xxxx, r0, hg_ProgramLocal4), vec4(0.00000), vec4(1.00000));\n"
           "    r1 = r0*r0;\n"
           "    r3 = r1*c1.yyyy;\n"
           "    r1 = r1*r0;\n"
           "    r1 = r1*c1.zzzz + r3;\n"
           "    r1 = mix(hg_ProgramLocal1, hg_ProgramLocal2, r1);\n"
           "    r0.x = r2.x*r2.x;\n"
           "    r3.x = r0.x*c1.y;\n"
           "    r0.x = r0.x*r2.x;\n"
           "    r0.x = r0.x*c1.z + r3.x;\n"
           "    gl_FragColor.xyz = r1.xyz*r0.xxx;\n"
           "    gl_FragColor.w = r0.x*r1.w;\n"
           "}\n"
           "//MD5=95471142:9a52715b:c290f85f:c081a39b\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:000a:0004:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcConcentricPolygons::InitProgramDescriptor(HgcConcentricPolygons *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcConcentricPolygons_hgc_visible", "//Metal1.0     \n//LEN=00000006c0\n[[ visible ]] FragmentOut HgcConcentricPolygons_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 1.000000000, 0.7500000000, 0.000000000);\n"
    "    const float4 c1 = float4(0.2500000000, 3.000000000, -2.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = texCoord0.xyz - hg_Params[0].xyz;\n"
    "    r0.xy = r0.xy*hg_Params[5].xy;\n"
    "    r1.y = dot(r0.xyz, hg_Params[7].zwz);\n"
    "    r0.x = dot(r0.xyz, hg_Params[7].xyx);\n"
    "    r0.y = r1.y;\n"
    "    r1 = float4(dot(r0.xy, r0.xy));\n"
    "    r1 = sqrt(r1);\n"
    "    r0.x = atan2(r0.y, r0.x);\n"
    "    r2.x = r0.x;\n"
    "    r0.x = r0.x*hg_Params[6].y;\n"
    "    r0.x = floor(r0.x);\n"
    "    r0.x = c0.x + r0.x;\n"
    "    r0.x = hg_Params[6].x*r0.x + -r2.x;\n"
    "    r0 = cos(r0.xxxx);\n"
    "    r0 = r0*r1;\n"
    "    r2.x = clamp(r0.x - hg_Params[8].x, 0.00000f, 1.00000f);\n"
    "    r2.x = c0.y - r2.x;\n"
    "    r1.x = c0.y + r0.x;\n"
    "    r1.x = clamp(r1.x - hg_Params[9].x, 0.00000f, 1.00000f);\n"
    "    r2.x = r2.x*r1.x;\n"
    "    r0 = r0/hg_Params[3].xxxx;\n"
    "    r0 = fract(r0);\n"
    "    r0 = r0 + hg_Params[3].yyyy;\n"
    "    r0 = fract(r0);\n"
    "    r1 = c0.zzzz - r0;\n"
    "    r3 = float4(r1 < c0.wwww);\n"
    "    r1 = c0.zzzz + r1;\n"
    "    r0 = select(r0, r1, -r3 < 0.00000f);\n"
    "    r3 = c1.xxxx - r0;\n"
    "    r1 = float4(r3 < c0.wwww);\n"
    "    r3 = c1.xxxx + r3;\n"
    "    r0 = select(r3, r0, -r1 < 0.00000f);\n"
    "    r0 = clamp(mix(c0.xxxx, r0, hg_Params[4]), 0.00000f, 1.00000f);\n"
    "    r1 = r0*r0;\n"
    "    r3 = r1*c1.yyyy;\n"
    "    r1 = r1*r0;\n"
    "    r1 = r1*c1.zzzz + r3;\n"
    "    r1 = mix(hg_Params[1], hg_Params[2], r1);\n"
    "    r0.x = r2.x*r2.x;\n"
    "    r3.x = r0.x*c1.y;\n"
    "    r0.x = r0.x*r2.x;\n"
    "    r0.x = r0.x*c1.z + r3.x;\n"
    "    output.color0.xyz = r1.xyz*r0.xxx;\n"
    "    output.color0.w = r0.x*r1.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B287CA20()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcConcentricPolygons");
}

void sub_1B287CA30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051B00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B287CB30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B287CB70()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B287CB68);
}

_QWORD *HgcConcentricPolygons::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcConcentricPolygons [hgc1]");
}

uint64_t HgcConcentricPolygons::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcConcentricPolygons::Bind(HgcConcentricPolygons *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HgcConcentricPolygons *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcConcentricPolygons::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int64x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  __int128 v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t *v166;
  uint64_t v167;
  float32x4_t v168;
  float32x4_t v169;
  int64x2_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  __int128 v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v6 = a2[2];
    v7.i64[1] = 0x3F80000000000000;
    v8 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 2)
      {
        v9 = 0;
        v11 = v7;
      }
      else
      {
        v9 = 0;
        v10 = v5;
        v11 = v7;
        do
        {
          v12 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F230);
          v13 = *(_QWORD *)(a1 + 408);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vsubq_f32(v11, *(float32x4_t *)v13);
          v16 = vsubq_f32(v12, *(float32x4_t *)v13);
          v17 = *(float32x4_t *)(v13 + 64);
          v18 = *(float32x4_t *)(v13 + 80);
          v19.i64[0] = vmulq_f32(v15, v18).u64[0];
          v18.i64[0] = vmulq_f32(v16, v18).u64[0];
          v19.i64[1] = v15.i64[1];
          v21 = *(float32x4_t *)(v13 + 96);
          v20 = *(int64x2_t *)(v13 + 112);
          v22 = (float32x4_t)vdupq_laneq_s64(v20, 1);
          v18.i64[1] = v16.i64[1];
          v23 = vmulq_f32(v19, v22);
          v24 = vmulq_f32(v18, v22);
          v25 = (float32x4_t)vdupq_lane_s64(v20.i64[0], 0);
          v26 = vmulq_f32(v25, v19);
          v27 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL), vaddq_f32(v23, (float32x4_t)vrev64q_s32((int32x4_t)v23)));
          v28 = vmulq_f32(v25, v18);
          v29 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL), vaddq_f32(v28, (float32x4_t)vrev64q_s32((int32x4_t)v28)));
          v30 = *(float32x4_t *)(v13 + 176);
          v31 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v13 + 160), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), vaddq_f32(v26, (float32x4_t)vrev64q_s32((int32x4_t)v26))), v27);
          v32 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v13 + 160), v29, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL), vaddq_f32(v24, (float32x4_t)vrev64q_s32((int32x4_t)v24))));
          v25.i64[0] = vmulq_f32(v31, v31).u64[0];
          v29.i64[0] = vmulq_f32(v32, v32).u64[0];
          v33 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1));
          v34 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.i8, 1));
          v35 = vminq_f32(vrsqrteq_f32(v33), v30);
          v36 = vminq_f32(vrsqrteq_f32(v34), v30);
          v37 = (float32x4_t)vrev64q_s32((int32x4_t)v31);
          v38 = (float32x4_t)vrev64q_s32((int32x4_t)v32);
          v39 = vabsq_f32(v37);
          v40 = vabsq_f32(v38);
          v41 = vabsq_f32(v31);
          v42 = vabsq_f32(v32);
          v43 = vmaxq_f32(v41, v39);
          v44 = vmaxq_f32(v42, v40);
          v45 = vminq_f32(v41, v39);
          v46 = vminq_f32(v42, v40);
          v47 = vsubq_f32(v39, v41);
          v48 = vsubq_f32(v40, v42);
          v50 = *(float32x4_t *)(v13 + 192);
          v49 = *(float32x4_t *)(v13 + 208);
          v51 = vmaxq_f32(v43, v50);
          v52 = vmaxq_f32(v44, v50);
          v53 = vminq_f32(vmaxq_f32(vrecpeq_f32(v51), v49), v30);
          v54 = vminq_f32(vmaxq_f32(vrecpeq_f32(v52), v49), v30);
          v55 = vminq_f32(vmaxq_f32(vmulq_f32(v53, vrecpsq_f32(v51, v53)), v49), v30);
          v56 = vminq_f32(vmulq_f32(v35, vrsqrtsq_f32(vmulq_f32(v35, v33), v35)), v30);
          v57 = vminq_f32(vmaxq_f32(vmulq_f32(v54, vrecpsq_f32(v52, v54)), v49), v30);
          v58 = vmulq_f32(v45, vmulq_f32(v55, vrecpsq_f32(v51, v55)));
          v59 = vmulq_f32(v46, vmulq_f32(v57, vrecpsq_f32(v52, v57)));
          v60 = vmulq_f32(v58, v58);
          v61 = vmulq_f32(v59, v59);
          v62 = *(float32x4_t *)(v13 + 224);
          v63 = *(float32x4_t *)(v13 + 240);
          v64 = vaddq_f32(v62, vmulq_f32(v60, v63));
          v65 = vaddq_f32(v62, vmulq_f32(v63, v61));
          v66 = *(float32x4_t *)(v13 + 256);
          v67 = *(float32x4_t *)(v13 + 272);
          v68 = vaddq_f32(v66, vmulq_f32(v60, v64));
          v69 = vaddq_f32(v66, vmulq_f32(v61, v65));
          v70 = vmulq_f32(v56, vrsqrtsq_f32(vmulq_f32(v56, v33), v56));
          v71 = vaddq_f32(v67, vmulq_f32(v60, v68));
          v72 = vaddq_f32(v67, vmulq_f32(v61, v69));
          v73 = *(float32x4_t *)(v13 + 288);
          v74 = *(float32x4_t *)(v13 + 304);
          v75 = vminq_f32(vmulq_f32(v36, vrsqrtsq_f32(vmulq_f32(v36, v34), v36)), v30);
          v76 = vmulq_f32(v60, vaddq_f32(v73, vmulq_f32(v60, v71)));
          v77 = vmulq_f32(v61, vaddq_f32(v73, vmulq_f32(v61, v72)));
          v78 = vmulq_f32(v58, vaddq_f32(v74, v76));
          v80 = *(float32x4_t *)(v13 + 320);
          v79 = *(float32x4_t *)(v13 + 336);
          v81 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v47, v79), (int8x16_t)vsubq_f32(v80, v78), (int8x16_t)v78);
          v82 = vmulq_f32(v59, vaddq_f32(v74, v77));
          v83 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v48, v79), (int8x16_t)vsubq_f32(v80, v82), (int8x16_t)v82);
          v84 = *(float32x4_t *)(v13 + 352);
          v85 = *(int8x16_t *)(v13 + 368);
          v86 = vmulq_f32(vminq_f32(v70, v30), v33);
          v87 = (float32x4_t)veorq_s8(vandq_s8(v85, (int8x16_t)v37), vbslq_s8((int8x16_t)vcgtq_f32(v79, v31), (int8x16_t)vsubq_f32(v84, v81), (int8x16_t)v81));
          v88 = (float32x4_t)veorq_s8(vandq_s8(v85, (int8x16_t)v38), vbslq_s8((int8x16_t)vcgtq_f32(v79, v32), (int8x16_t)vsubq_f32(v84, v83), (int8x16_t)v83));
          v89 = vmulq_lane_f32(v87, *(float32x2_t *)v21.f32, 1);
          v90 = vmulq_lane_f32(v88, *(float32x2_t *)v21.f32, 1);
          v91 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
          v92 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
          v93 = (int8x16_t)vcgtq_f32(v91, v89);
          v94 = (int8x16_t)vcgtq_f32(v92, v90);
          v95 = *(float32x4_t *)(v13 + 384);
          v96 = *(float32x4_t *)(v13 + 400);
          v87.i32[0] = vsubq_f32(vmulq_f32(v21, vaddq_f32(v96, vsubq_f32(v91, (float32x4_t)vbslq_s8(v93, (int8x16_t)v95, (int8x16_t)0)))), v87).u32[0];
          v21.i32[0] = vsubq_f32(vmulq_f32(v21, vaddq_f32(v96, vsubq_f32(v92, (float32x4_t)vbslq_s8(v94, (int8x16_t)v95, (int8x16_t)0)))), v88).u32[0];
          v97 = *(float32x4_t *)(v13 + 416);
          v98 = *(float32x4_t *)(v13 + 432);
          v99 = vmulq_f32(v34, vminq_f32(vmulq_f32(v75, vrsqrtsq_f32(vmulq_f32(v75, v34), v75)), v30));
          v100 = vmulq_n_f32(v97, v87.f32[0]);
          v101 = vmulq_n_f32(v97, v21.f32[0]);
          v102 = vcvtq_f32_s32(vcvtq_s32_f32(v100));
          v103 = vcvtq_f32_s32(vcvtq_s32_f32(v101));
          v104 = vsubq_f32(vabdq_f32(vsubq_f32(v100, vsubq_f32(v102, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v102, v100)))), v96), v98);
          v105 = vsubq_f32(vabdq_f32(vsubq_f32(v101, vsubq_f32(v103, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v103, v101)))), v96), v98);
          v106 = vmulq_f32(v104, v104);
          v107 = vmulq_f32(v105, v105);
          v108 = *(float32x4_t *)(v13 + 448);
          v109 = *(float32x4_t *)(v13 + 464);
          v110 = vaddq_f32(v108, vmulq_f32(v109, v106));
          v111 = vaddq_f32(v108, vmulq_f32(v109, v107));
          v112 = vmulq_f32(v106, v110);
          v113 = *(float32x4_t *)(v13 + 480);
          v114 = *(float32x4_t *)(v13 + 496);
          v115 = vmulq_f32(v86, vmulq_f32(v104, vaddq_f32(v114, vmulq_f32(v106, vaddq_f32(v113, v112)))));
          v116 = vmulq_f32(v99, vmulq_f32(v105, vaddq_f32(v114, vmulq_f32(v107, vaddq_f32(v113, vmulq_f32(v107, v111))))));
          v117 = *(float32x4_t *)(v13 + 128);
          v118 = *(float32x4_t *)(v13 + 144);
          v119 = *(_OWORD *)(v13 + 48);
          v120 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v119, 0);
          v121 = vsubq_f32(vaddq_f32(v95, v115), v118);
          v122 = vminq_f32(vmaxq_f32(vrecpeq_f32(v120), v49), v30);
          v123 = vmulq_f32(v122, vrecpsq_f32(v120, v122));
          v124 = vsubq_f32(v115, v117);
          v125 = vsubq_f32(v95, vminq_f32(vmaxq_f32(vsubq_f32(v116, v117), v79), v95));
          v126 = vminq_f32(vmaxq_f32(v123, v49), v30);
          v127 = vmulq_f32(v126, vrecpsq_f32(v120, v126));
          v128 = vmulq_f32(v127, v115);
          v129 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v95, v116), v118), v79), v95);
          v130 = vmulq_f32(v127, v116);
          v131 = vcvtq_f32_s32(vcvtq_s32_f32(v128));
          v132 = vcvtq_f32_s32(vcvtq_s32_f32(v130));
          v133 = vmulq_f32(vsubq_f32(v95, vminq_f32(vmaxq_f32(v124, v79), v95)), vminq_f32(vmaxq_f32(v121, v79), v95));
          v134 = vmulq_f32(v125, v129);
          v135 = vsubq_f32(v128, vsubq_f32(v131, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v131, v128))));
          v136 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v119, 1);
          v137 = vaddq_f32(v136, v135);
          v138 = vaddq_f32(v136, vsubq_f32(v130, vsubq_f32(v132, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v132, v130)))));
          v139 = vcvtq_f32_s32(vcvtq_s32_f32(v137));
          v140 = vcvtq_f32_s32(vcvtq_s32_f32(v138));
          v141 = vsubq_f32(v137, vsubq_f32(v139, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v139, v137))));
          v142 = vsubq_f32(v138, vsubq_f32(v140, (float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v140, v138))));
          v143 = *(float32x4_t *)(v13 + 512);
          v144 = *(float32x4_t *)(v13 + 528);
          v145 = vsubq_f32(v143, v141);
          v146 = vsubq_f32(v143, v142);
          v147 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v79, v145)), v79), (int8x16_t)vaddq_f32(v143, v145), (int8x16_t)v141);
          v148 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v79, v146)), v79), (int8x16_t)vaddq_f32(v143, v146), (int8x16_t)v142);
          v149 = vsubq_f32(v98, v147);
          v150 = vsubq_f32(v98, v148);
          v151 = vaddq_f32(v96, vmulq_f32(v17, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v79, v149)), v79), (int8x16_t)v147, (int8x16_t)vaddq_f32(v98, v149)), v96)));
          v152 = vaddq_f32(v96, vmulq_f32(v17, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v95, (int8x16_t)vcgtq_f32(v79, v150)), v79), (int8x16_t)v148, (int8x16_t)vaddq_f32(v98, v150)), v96)));
          v153 = vminq_f32(vmaxq_f32(v151, v79), v95);
          v154 = vminq_f32(vmaxq_f32(v152, v79), v95);
          v155 = vmulq_f32(v153, v153);
          v156 = vmulq_f32(v154, v154);
          v157 = vmulq_f32(v155, v144);
          v158 = vmulq_f32(v153, v155);
          v159 = *(float32x4_t *)(v13 + 544);
          v160 = vsubq_f32(vmulq_f32(v156, v144), vmulq_f32(vmulq_f32(v154, v156), v159));
          v161 = vsubq_f32(*(float32x4_t *)(v13 + 32), v14);
          v162 = vmulq_f32(vsubq_f32(v157, vmulq_f32(v158, v159)), v161);
          v163 = vmulq_f32(v160, v161);
          v164 = vmulq_f32(v133, v133);
          v165 = vmulq_f32(v134, v134);
          v166 = (float32x4_t *)(*(_QWORD *)&v6 + 16 * v9);
          *v166 = vmulq_n_f32(vaddq_f32(v14, v162), vsubq_f32(vmulq_f32(v164, v144), vmulq_f32(vmulq_f32(v133, v164), v159)).f32[0]);
          v166[1] = vmulq_n_f32(vaddq_f32(v14, v163), vsubq_f32(vmulq_f32(v165, v144), vmulq_f32(vmulq_f32(v134, v165), v159)).f32[0]);
          v11 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          v9 += 2;
          v10 -= 2;
        }
        while (v10 > 1);
        v9 = v9;
      }
      if ((int)v9 < v5)
      {
        v167 = *(_QWORD *)(a1 + 408);
        v168 = vsubq_f32(v11, *(float32x4_t *)v167);
        v169.i64[0] = vmulq_f32(v168, *(float32x4_t *)(v167 + 80)).u64[0];
        v169.i64[1] = v168.i64[1];
        v171 = *(float32x4_t *)(v167 + 96);
        v170 = *(int64x2_t *)(v167 + 112);
        v172 = vmulq_f32(v169, (float32x4_t)vdupq_laneq_s64(v170, 1));
        v173 = vmulq_f32((float32x4_t)vdupq_lane_s64(v170.i64[0], 0), v169);
        v174 = *(float32x4_t *)(v167 + 176);
        v175 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v167 + 160), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v173, (int8x16_t)v173, 8uLL), vaddq_f32(v173, (float32x4_t)vrev64q_s32((int32x4_t)v173))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v172, (int8x16_t)v172, 4uLL), vaddq_f32(v172, (float32x4_t)vrev64q_s32((int32x4_t)v172))));
        v169.i64[0] = vmulq_f32(v175, v175).u64[0];
        v176 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v169.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v169.f32, 1));
        v177 = vminq_f32(vrsqrteq_f32(v176), v174);
        v178 = vminq_f32(vmulq_f32(v177, vrsqrtsq_f32(vmulq_f32(v177, v176), v177)), v174);
        v179 = vmulq_f32(vminq_f32(vmulq_f32(v178, vrsqrtsq_f32(vmulq_f32(v178, v176), v178)), v174), v176);
        v180 = (float32x4_t)vrev64q_s32((int32x4_t)v175);
        v181 = vabsq_f32(v180);
        v182 = vabsq_f32(v175);
        v183 = vmaxq_f32(v182, v181);
        v184 = vminq_f32(v182, v181);
        v185 = vsubq_f32(v181, v182);
        v186 = *(float32x4_t *)(v167 + 208);
        v187 = vmaxq_f32(v183, *(float32x4_t *)(v167 + 192));
        v188 = vminq_f32(vmaxq_f32(vrecpeq_f32(v187), v186), v174);
        v189 = vminq_f32(vmaxq_f32(vmulq_f32(v188, vrecpsq_f32(v187, v188)), v186), v174);
        v190 = vmulq_f32(v184, vmulq_f32(v189, vrecpsq_f32(v187, v189)));
        v191 = vmulq_f32(v190, v190);
        v192 = vmulq_f32(v190, vaddq_f32(*(float32x4_t *)(v167 + 304), vmulq_f32(v191, vaddq_f32(*(float32x4_t *)(v167 + 288), vmulq_f32(v191, vaddq_f32(*(float32x4_t *)(v167 + 272), vmulq_f32(v191, vaddq_f32(*(float32x4_t *)(v167 + 256), vmulq_f32(v191, vaddq_f32(*(float32x4_t *)(v167 + 224), vmulq_f32(*(float32x4_t *)(v167 + 240), v191)))))))))));
        v193 = *(float32x4_t *)(v167 + 336);
        v194 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v185, v193), (int8x16_t)vsubq_f32(*(float32x4_t *)(v167 + 320), v192), (int8x16_t)v192);
        v195 = (float32x4_t)veorq_s8(vandq_s8(*(int8x16_t *)(v167 + 368), (int8x16_t)v180), vbslq_s8((int8x16_t)vcgtq_f32(v193, v175), (int8x16_t)vsubq_f32(*(float32x4_t *)(v167 + 352), v194), (int8x16_t)v194));
        v196 = vmulq_lane_f32(v195, *(float32x2_t *)v171.f32, 1);
        v197 = vcvtq_f32_s32(vcvtq_s32_f32(v196));
        v198 = *(float32x4_t *)(v167 + 384);
        v199 = *(float32x4_t *)(v167 + 400);
        v195.i32[0] = vsubq_f32(vmulq_f32(v171, vaddq_f32(v199, vsubq_f32(v197, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v197, v196), (int8x16_t)v198, (int8x16_t)0)))), v195).u32[0];
        v200 = *(float32x4_t *)(v167 + 432);
        v201 = vmulq_n_f32(*(float32x4_t *)(v167 + 416), v195.f32[0]);
        v202 = vcvtq_f32_s32(vcvtq_s32_f32(v201));
        v203 = vsubq_f32(vabdq_f32(vsubq_f32(v201, vsubq_f32(v202, (float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)vcgtq_f32(v202, v201)))), v199), v200);
        v204 = vmulq_f32(v203, v203);
        v205 = vmulq_f32(v179, vmulq_f32(v203, vaddq_f32(*(float32x4_t *)(v167 + 496), vmulq_f32(v204, vaddq_f32(*(float32x4_t *)(v167 + 480), vmulq_f32(v204, vaddq_f32(*(float32x4_t *)(v167 + 448), vmulq_f32(*(float32x4_t *)(v167 + 464), v204))))))));
        v206 = vmulq_f32(vsubq_f32(v198, vminq_f32(vmaxq_f32(vsubq_f32(v205, *(float32x4_t *)(v167 + 128)), v193), v198)), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v198, v205), *(float32x4_t *)(v167 + 144)), v193), v198));
        v207 = *(_OWORD *)(v167 + 48);
        v208 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v207, 0);
        v209 = vminq_f32(vmaxq_f32(vrecpeq_f32(v208), v186), v174);
        v210 = vminq_f32(vmaxq_f32(vmulq_f32(v209, vrecpsq_f32(v208, v209)), v186), v174);
        v211 = vmulq_f32(vmulq_f32(v210, vrecpsq_f32(v208, v210)), v205);
        v212 = vcvtq_f32_s32(vcvtq_s32_f32(v211));
        v213 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v207, 1), vsubq_f32(v211, vsubq_f32(v212, (float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)vcgtq_f32(v212, v211)))));
        v214 = vcvtq_f32_s32(vcvtq_s32_f32(v213));
        v215 = vsubq_f32(v213, vsubq_f32(v214, (float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)vcgtq_f32(v214, v213))));
        v216 = *(float32x4_t *)(v167 + 512);
        v217 = vsubq_f32(v216, v215);
        v218 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)vcgtq_f32(v193, v217)), v193), (int8x16_t)vaddq_f32(v216, v217), (int8x16_t)v215);
        v219 = vsubq_f32(v200, v218);
        v220 = vminq_f32(vmaxq_f32(vaddq_f32(v199, vmulq_f32(*(float32x4_t *)(v167 + 64), vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)vcgtq_f32(v193, v219)), v193), (int8x16_t)v218, (int8x16_t)vaddq_f32(v200, v219)), v199))), v193), v198);
        v221 = vmulq_f32(v220, v220);
        v222 = vmulq_f32(v206, v206);
        *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v9) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(v167 + 16), vmulq_f32(vsubq_f32(vmulq_f32(v221, *(float32x4_t *)(v167 + 528)), vmulq_f32(vmulq_f32(v220, v221), *(float32x4_t *)(v167 + 544))), vsubq_f32(*(float32x4_t *)(v167 + 32), *(float32x4_t *)(v167 + 16)))), vsubq_f32(vmulq_f32(v222, *(float32x4_t *)(v167 + 528)), vmulq_f32(vmulq_f32(v206, v222), *(float32x4_t *)(v167 + 544))).f32[0]);
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      *(_QWORD *)&v6 += v8;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcConcentricPolygons::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcConcentricPolygons::GetROI()
{
  return 0;
}

void HgcConcentricPolygons::HgcConcentricPolygons(HgcConcentricPolygons *this)
{
  _QWORD *v2;
  HgcConcentricPolygons::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E81E0;
  v3 = (HgcConcentricPolygons::State *)operator new();
  HgcConcentricPolygons::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B287D694(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcConcentricPolygons::~HgcConcentricPolygons(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E81E0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40CD7AB3DBLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcConcentricPolygons::~HgcConcentricPolygons(this);
  HGObject::operator delete(v1);
}

uint64_t HgcConcentricPolygons::SetParameter(HgcConcentricPolygons *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  __n128 *v12;
  int32x4_t v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_53;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_53;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_53;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_53;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == a3.n128_f32[0]
        && v12[4].n128_f32[1] == a3.n128_f32[0]
        && v12[4].n128_f32[2] == a3.n128_f32[0]
        && v12[4].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v13 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v12[4] = (__n128)v13;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[36] = a3;
      goto LABEL_53;
    case 5:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[20] == a3.n128_f32[0] && v14[21] == a4 && v14[22] == a5 && v14[23] == a6)
        return 0;
      v14[20] = a3.n128_f32[0];
      v14[21] = a4;
      v14[22] = a5;
      v14[23] = a6;
      goto LABEL_53;
    case 6:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[24] == a3.n128_f32[0] && v15[25] == a4 && v15[26] == a5 && v15[27] == a6)
        return 0;
      v15[24] = a3.n128_f32[0];
      v15[25] = a4;
      v15[26] = a5;
      v15[27] = a6;
      goto LABEL_53;
    case 7:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[28] == a3.n128_f32[0] && v16[29] == a4 && v16[30] == a5 && v16[31] == a6)
        return 0;
      v16[28] = a3.n128_f32[0];
      v16[29] = a4;
      v16[30] = a5;
      v16[31] = a6;
      goto LABEL_53;
    case 8:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[32] == a3.n128_f32[0] && v17[33] == a4 && v17[34] == a5 && v17[35] == a6)
        return 0;
      v17[32] = a3.n128_f32[0];
      v17[33] = a4;
      v17[34] = a5;
      v17[35] = a6;
      goto LABEL_53;
    case 9:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[36] == a3.n128_f32[0] && v18[37] == a4 && v18[38] == a5 && v18[39] == a6)
        return 0;
      v18[36] = a3.n128_f32[0];
      v18[37] = a4;
      v18[38] = a5;
      v18[39] = a6;
LABEL_53:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcConcentricPolygons::GetParameter(HgcConcentricPolygons *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_12;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_12;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_12;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_12;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[144];
      a3[1] = v8[145];
      a3[2] = v8[146];
      v4 = v8 + 147;
      goto LABEL_12;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_12;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_12;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_12;
    case 8:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[32];
      a3[1] = v13[33];
      a3[2] = v13[34];
      v4 = v13 + 35;
      goto LABEL_12;
    case 9:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[36];
      a3[1] = v12[37];
      a3[2] = v12[38];
      v4 = v12 + 39;
LABEL_12:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double HgcConcentricPolygons::State::State(HgcConcentricPolygons::State *this)
{
  double result;
  __int128 v2;

  result = 0.0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 10) = xmmword_1B3050E20;
  *((int32x4_t *)this + 11) = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)&v2 = 0x80000000800000;
  *((_QWORD *)&v2 + 1) = 0x80000000800000;
  *((_OWORD *)this + 12) = xmmword_1B3051840;
  *((_OWORD *)this + 13) = v2;
  *((_OWORD *)this + 14) = xmmword_1B3051B10;
  *((_OWORD *)this + 15) = xmmword_1B3051B20;
  *((_OWORD *)this + 16) = xmmword_1B3051B30;
  *((_OWORD *)this + 17) = xmmword_1B3051B40;
  *((_OWORD *)this + 18) = xmmword_1B3051B50;
  *((_OWORD *)this + 19) = xmmword_1B3051B60;
  *((_OWORD *)this + 20) = xmmword_1B3051B70;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = xmmword_1B3051B80;
  *((_OWORD *)this + 23) = xmmword_1B3051080;
  __asm { FMOV            V1.4S, #1.0 }
  *(_QWORD *)&v2 = 0x3F0000003F000000;
  *((_QWORD *)&v2 + 1) = 0x3F0000003F000000;
  *((_OWORD *)this + 24) = _Q1;
  *((_OWORD *)this + 25) = v2;
  __asm { FMOV            V2.4S, #0.25 }
  *((int32x4_t *)this + 26) = vdupq_n_s32(0x3E22F983u);
  *((_OWORD *)this + 27) = _Q2;
  *((int32x4_t *)this + 28) = vdupq_n_s32(0x42A2BAF0u);
  *((int32x4_t *)this + 29) = vdupq_n_s32(0xC28E3DFF);
  *((int32x4_t *)this + 30) = vdupq_n_s32(0xC2255A97);
  *((int32x4_t *)this + 31) = vdupq_n_s32(0x40C90FDBu);
  __asm
  {
    FMOV            V1.4S, #0.75
    FMOV            V2.4S, #3.0
  }
  *((_OWORD *)this + 32) = _Q1;
  *((_OWORD *)this + 33) = _Q2;
  *(_QWORD *)&_Q1 = 0x4000000040000000;
  *((_QWORD *)&_Q1 + 1) = 0x4000000040000000;
  *((_OWORD *)this + 34) = _Q1;
  *((_OWORD *)this + 35) = xmmword_1B3050F70;
  *((_OWORD *)this + 36) = 0u;
  return result;
}

const char *HgcChannelBlur::GetProgram(HgcChannelBlur *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000378\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1.xyz = r1.xyz / fmax(r1.w, 6.10350e-05h);\n"
             "    r1.xyz = mix(r0.xyz, r1.xyz, half3(hg_Params[0].xyz));\n"
             "    output.color0.xyz = float3(r1.xyz)*float3(r0.www);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=bf7ff0fe:d2f0c9da:e48c02b2:a9c85d76\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000034d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
             "    r1.xyz = mix(r0.xyz, r1.xyz, hg_Params[0].xyz);\n"
             "    output.color0.xyz = r1.xyz*r0.www;\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=1eb47937:0a22926f:7a54733b:05d12848\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002f2\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1.xyz = r1.xyz / max(r1.w, 1.00000e-06);\n"
           "    r1.xyz = mix(r0.xyz, r1.xyz, hg_ProgramLocal0.xyz);\n"
           "    gl_FragColor.xyz = r1.xyz*r0.www;\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=7511d386:542c3bfe:06b0257c:faba6f39\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcChannelBlur::InitProgramDescriptor(HgcChannelBlur *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcChannelBlur_hgc_visible", "//Metal1.0     \n//LEN=00000001aa\n[[ visible ]] FragmentOut HgcChannelBlur_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1.xyz = r1.xyz / fmax(r1.w, 1.00000e-06f);\n"
    "    r1.xyz = mix(r0.xyz, r1.xyz, hg_Params[0].xyz);\n"
    "    output.color0.xyz = r1.xyz*r0.www;\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B287DD64()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcChannelBlur");
}

void sub_1B287DD74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B287DEB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B287DEFC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B287DEF4);
}

_QWORD *HgcChannelBlur::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcChannelBlur [hgc1]");
}

uint64_t HgcChannelBlur::BindTexture(HgcChannelBlur *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcChannelBlur::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcChannelBlur::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t *v33;
  uint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v34) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)(v6 + v12 - 32);
          v14 = *(float32x4_t *)(v6 + v12 - 16);
          v15 = *(float32x4_t *)(v6 + v12);
          v16 = *(float32x4_t *)(v6 + v12 + 16);
          v17 = *(_QWORD *)(a1 + 408);
          v18 = *(float32x4_t *)(v17 + 16);
          v19 = *(float32x4_t *)(v17 + 32);
          v20 = *(int8x16_t *)(v17 + 48);
          v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v18);
          v22 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v18);
          v23 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v18);
          v24 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v18);
          v25 = vmulq_f32(vrecpeq_f32(v21), v19);
          v26 = vmulq_f32(vrecpeq_f32(v22), v19);
          v27 = vmulq_f32(vrecpeq_f32(v23), v19);
          v28 = vmulq_f32(vrecpeq_f32(v24), v19);
          v29 = vbslq_s8(v20, *(int8x16_t *)(v8 + v12 - 32), (int8x16_t)vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v8 + v12 - 32), vmulq_f32(vsubq_f32(vmulq_f32(v13, vmulq_f32(v25, vrecpsq_f32(v25, v21))), *(float32x4_t *)(v8 + v12 - 32)), *(float32x4_t *)v17)), *(float32x4_t *)(v8 + v12 - 32), 3));
          v30 = vbslq_s8(v20, *(int8x16_t *)(v8 + v12 - 16), (int8x16_t)vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), vmulq_f32(*(float32x4_t *)v17, vsubq_f32(vmulq_f32(v14, vmulq_f32(v26, vrecpsq_f32(v26, v22))), *(float32x4_t *)(v8 + v12 - 16)))), *(float32x4_t *)(v8 + v12 - 16), 3));
          v31 = vbslq_s8(v20, *(int8x16_t *)(v8 + v12), (int8x16_t)vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v8 + v12), vmulq_f32(*(float32x4_t *)v17, vsubq_f32(vmulq_f32(v15, vmulq_f32(v27, vrecpsq_f32(v27, v23))), *(float32x4_t *)(v8 + v12)))), *(float32x4_t *)(v8 + v12), 3));
          v32 = vbslq_s8(v20, *(int8x16_t *)(v8 + v12 + 16), (int8x16_t)vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), vmulq_f32(*(float32x4_t *)v17, vsubq_f32(vmulq_f32(v16, vmulq_f32(v28, vrecpsq_f32(v28, v24))), *(float32x4_t *)(v8 + v12 + 16)))), *(float32x4_t *)(v8 + v12 + 16), 3));
          v33 = (int8x16_t *)(v5 + v12);
          v33[-2] = v29;
          v33[-1] = v30;
          *v33 = v31;
          v33[1] = v32;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v34) = -v11;
      }
      if ((int)v34 < v4)
      {
        v34 = v34;
        do
        {
          v35 = *(float32x4_t *)(v6 + 16 * v34);
          v36 = *(_QWORD *)(a1 + 408);
          v37 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 3), *(float32x4_t *)(v36 + 16));
          v38 = vmulq_f32(vrecpeq_f32(v37), *(float32x4_t *)(v36 + 32));
          *(int8x16_t *)(v5 + 16 * v34) = vbslq_s8(*(int8x16_t *)(v36 + 48), *(int8x16_t *)(v8 + 16 * v34), (int8x16_t)vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v8 + 16 * v34), vmulq_f32(*(float32x4_t *)v36, vsubq_f32(vmulq_f32(v35, vmulq_f32(v38, vrecpsq_f32(v38, v37))), *(float32x4_t *)(v8 + 16 * v34)))), *(float32x4_t *)(v8 + 16 * v34), 3));
          ++v34;
        }
        while (v34 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcChannelBlur::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcChannelBlur::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcChannelBlur::HgcChannelBlur(HgcChannelBlur *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E8448;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(int32x4_t *)(v3 + 16) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 32) = xmmword_1B3051BC0;
  *(_OWORD *)(v3 + 48) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B287E300(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcChannelBlur::~HgcChannelBlur(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E8448;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcChannelBlur::~HgcChannelBlur(this);
  HGObject::operator delete(v1);
}

uint64_t HgcChannelBlur::SetParameter(HgcChannelBlur *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcChannelBlur::GetParameter(HgcChannelBlur *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcChannelBlurNoPremult::GetProgram(HgcChannelBlurNoPremult *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002f2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[0]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=71e089ca:82dc604d:921d323b:8c63d522\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002d5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    output.color0 = mix(r0, r1, hg_Params[0]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=19049a07:c1b7d36e:88d051c2:edb06ce9\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000027f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal0);\n"
           "}\n"
           "//MD5=e59d54b8:dcfffceb:e9177f14:9c43910d\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcChannelBlurNoPremult::InitProgramDescriptor(HgcChannelBlurNoPremult *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcChannelBlurNoPremult_hgc_visible", "//Metal1.0     \n//LEN=000000013b\n[[ visible ]] FragmentOut HgcChannelBlurNoPremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    output.color0 = mix(r0, r1, hg_Params[0]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B287E4E8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcChannelBlurNoPremult");
}

void sub_1B287E4F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B287E638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B287E680()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B287E678);
}

_QWORD *HgcChannelBlurNoPremult::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcChannelBlurNoPremult [hgc1]");
}

uint64_t HgcChannelBlurNoPremult::BindTexture(HgcChannelBlurNoPremult *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcChannelBlurNoPremult::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcChannelBlurNoPremult::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t *v17;
  uint64_t v18;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)*(_QWORD *)(a1 + 408);
          v14 = vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), vmulq_f32(vsubq_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x4_t *)(v8 + v12 - 16)), v13));
          v15 = vaddq_f32(*(float32x4_t *)(v8 + v12), vmulq_f32(vsubq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)(v8 + v12)), v13));
          v16 = vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), vmulq_f32(vsubq_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x4_t *)(v8 + v12 + 16)), v13));
          v17 = (float32x4_t *)(v5 + v12);
          v17[-2] = vaddq_f32(*(float32x4_t *)(v8 + v12 - 32), vmulq_f32(vsubq_f32(*(float32x4_t *)(v6 + v12 - 32), *(float32x4_t *)(v8 + v12 - 32)), v13));
          v17[-1] = v14;
          *v17 = v15;
          v17[1] = v16;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v18) = -v11;
      }
      if ((int)v18 < v4)
      {
        v18 = v18;
        do
        {
          *(float32x4_t *)(v5 + 16 * v18) = vaddq_f32(*(float32x4_t *)(v8 + 16 * v18), vmulq_f32(vsubq_f32(*(float32x4_t *)(v6 + 16 * v18), *(float32x4_t *)(v8 + 16 * v18)), *(float32x4_t *)*(_QWORD *)(a1 + 408)));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcChannelBlurNoPremult::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcChannelBlurNoPremult::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcChannelBlurNoPremult::HgcChannelBlurNoPremult(HgcChannelBlurNoPremult *this)
{
  _QWORD *v2;
  _QWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E86B0;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B287E9A4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcChannelBlurNoPremult::~HgcChannelBlurNoPremult(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E86B0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcChannelBlurNoPremult::~HgcChannelBlurNoPremult(this);
  HGObject::operator delete(v1);
}

uint64_t HgcChannelBlurNoPremult::SetParameter(HgcChannelBlurNoPremult *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcChannelBlurNoPremult::GetParameter(HgcChannelBlurNoPremult *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcSunburst::GetProgram(HgcSunburst *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000e50\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.05747731403, -0.01348046958, -0.1212390736, 0.1956359297);\n"
             "    const half4 c1 = half4(0.9999956489, -0.3329946101, 1.570796371, 3.141592741);\n"
             "    const half4 c2 = half4(0.000000000, 6.283185482, 0.5000000000, 2.000000000);\n"
             "    const half4 c3 = half4(3.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.z = dot(frag._texCoord0, hg_Params[4]);\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[3]);\n"
             "    s1.z = abs(s0.z);\n"
             "    s0.w = abs(s0.x);\n"
             "    s0.y = fmax(s0.w, s1.z);\n"
             "    s1.x = 1.00000f / s0.y;\n"
             "    s0.y = fmin(s0.w, s1.z);\n"
             "    s1.w = s0.y*s1.x;\n"
             "    s1.x = s1.w*s1.w;\n"
             "    s0.y = s1.x*float(c0.y) + float(c0.x);\n"
             "    s0.y = s0.y*s1.x + float(c0.z);\n"
             "    s0.y = s0.y*s1.x + float(c0.w);\n"
             "    s1.y = s0.y*s1.x + float(c1.y);\n"
             "    s0.w = s1.z - s0.w;\n"
             "    s0.y = s0.z;\n"
             "    s2.x = s1.y*s1.x + float(c1.x);\n"
             "    s1.x = dot(s0.xy, s0.xy);\n"
             "    s0.y = s2.x*s1.w;\n"
             "    s1.y = float(c1.z) - s0.y;\n"
             "    s0.y = select(s0.y, s1.y, s0.w < 0.00000h);\n"
             "    s1.x = sqrt(s1.x);\n"
             "    s2.x = float(c1.w) - s0.y;\n"
             "    s0.y = select(s0.y, s2.x, s0.z < 0.00000h);\n"
             "    s0.z = s1.x*hg_Params[12].z + hg_Params[13].z;\n"
             "    s0.x = select(s0.y, -s0.y, s0.x < 0.00000h);\n"
             "    s0.y = sin(s0.z);\n"
             "    s0.x = s0.y*hg_Params[11].x + s0.x;\n"
             "    s0.y = s0.x + float(c2.y);\n"
             "    s0.x = select(s0.x, s0.y, s0.x < 0.00000h);\n"
             "    s0.z = 1.00000f / hg_Params[0].x;\n"
             "    s0.y = s0.x*s0.z;\n"
             "    s0.y = floor(s0.y);\n"
             "    s0.x = s0.x*s0.z + -s0.y;\n"
             "    s0.y = s0.x*hg_Params[0].x;\n"
             "    s0.x = cos(s0.y);\n"
             "    r0.zw = half2(hg_Params[7].zw) - half2(hg_Params[8].xy);\n"
             "    r1.x = dot(r0.zw, r0.zw);\n"
             "    s0.y = sin(s0.y);\n"
             "    s0.zw = s1.xx*s0.xy;\n"
             "    s0.xy = s0.zw - hg_Params[8].xy;\n"
             "    s0.x = dot(s0.xy, float2(r0.zw));\n"
             "    s0.x = s0.x/float(r1.x);\n"
             "    s0.xy = s0.xx*float2(r0.zw) + hg_Params[8].xy;\n"
             "    s2.xy = s0.zw - s0.xy;\n"
             "    s0.x = dot(s2.xy, s2.xy);\n"
             "    s1.y = rsqrt(s0.x);\n"
             "    r0.xy = half2(s1.yy)*half2(s2.xy);\n"
             "    r1.xy = half2(hg_Params[5].xy) - half2(hg_Params[6].xy);\n"
             "    s0.xy = s0.zw - hg_Params[6].xy;\n"
             "    s2.x = dot(s0.xy, float2(r1.xy));\n"
             "    s2.y = dot(float2(r1.xy), float2(r1.xy));\n"
             "    s0.y = -float(r0.z);\n"
             "    s0.x = float(r0.w);\n"
             "    r1.w = half(s2.x)/half(s2.y);\n"
             "    r1.zw = r1.ww*r1.xy + half2(hg_Params[6].xy);\n"
             "    s0.zw = s0.zw - float2(r1.zw);\n"
             "    r1.z = dot(half2(s0.zw), half2(s0.zw));\n"
             "    s2.w = rsqrt(float(r1.z));\n"
             "    s0.zw = s2.ww*s0.zw;\n"
             "    s0.xy = normalize(s0.xy).xy;\n"
             "    s2.z = dot(s0.xy, float2(r0.xy));\n"
             "    s0.y = -float(r1.x);\n"
             "    s0.x = float(r1.y);\n"
             "    r0.xy = r1.xy;\n"
             "    r0.w = r1.x;\n"
             "    r0.z = -r0.y;\n"
             "    s2.x = float(-float(fabs(r0.x)) >= float(c2.x));\n"
             "    r1.xy = select(half2(s0.xy), r0.zw, -half2(s2.xx) < 0.00000h);\n"
             "    s0.xy = normalize(float2(r1.xy)).xy;\n"
             "    s0.x = dot(s0.xy, s0.zw);\n"
             "    s3.x = fabs(s0.x)*s2.w;\n"
             "    s0.x = s0.x/s3.x;\n"
             "    s3.z = fabs(s2.z)*s1.y;\n"
             "    s0.z = s2.z/s3.z;\n"
             "    s0.x = fmin(s0.x, s0.z);\n"
             "    s0.x = clamp(mix(float(c2.z), s0.x, hg_Params[9].x), 0.00000f, 1.00000f);\n"
             "    s0.y = s0.x*s0.x;\n"
             "    s0.z = hg_Params[10].z - s1.x;\n"
             "    s0.x = -s0.x*float(c2.w) + float(c3.x);\n"
             "    s0.x = s0.y*s0.x;\n"
             "    s0.y = clamp(mix(float(c2.z), s0.z, hg_Params[9].x), 0.00000f, 1.00000f);\n"
             "    s0.z = -s0.y*float(c2.w) + float(c3.x);\n"
             "    s0.y = s0.y*s0.y;\n"
             "    s0.y = s0.y*s0.z;\n"
             "    s0.x = s0.x*s0.y;\n"
             "    output.color0 = mix(hg_Params[2], hg_Params[1], s0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=74961cca:f23dedd6:326fab47:bc4a156c\n"
             "//SIG=00400000:00000000:00000000:00000000:0004:000e:0006:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000cfd\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.05747731403, -0.01348046958, -0.1212390736, 0.1956359297);\n"
             "    const float4 c1 = float4(0.9999956489, -0.3329946101, 1.570796371, 3.141592741);\n"
             "    const float4 c2 = float4(0.000000000, 6.283185482, 0.5000000000, 2.000000000);\n"
             "    const float4 c3 = float4(3.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.z = dot(frag._texCoord0, hg_Params[4]);\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[3]);\n"
             "    r1.z = abs(r0.z);\n"
             "    r0.w = abs(r0.x);\n"
             "    r0.y = fmax(r0.w, r1.z);\n"
             "    r1.x = 1.00000f / r0.y;\n"
             "    r0.y = fmin(r0.w, r1.z);\n"
             "    r1.w = r0.y*r1.x;\n"
             "    r1.x = r1.w*r1.w;\n"
             "    r0.y = r1.x*c0.y + c0.x;\n"
             "    r0.y = r0.y*r1.x + c0.z;\n"
             "    r0.y = r0.y*r1.x + c0.w;\n"
             "    r1.y = r0.y*r1.x + c1.y;\n"
             "    r0.w = r1.z - r0.w;\n"
             "    r0.y = r0.z;\n"
             "    r2.x = r1.y*r1.x + c1.x;\n"
             "    r1.x = dot(r0.xy, r0.xy);\n"
             "    r0.y = r2.x*r1.w;\n"
             "    r1.y = c1.z - r0.y;\n"
             "    r0.y = select(r0.y, r1.y, r0.w < 0.00000f);\n"
             "    r1.x = sqrt(r1.x);\n"
             "    r2.x = c1.w - r0.y;\n"
             "    r0.y = select(r0.y, r2.x, r0.z < 0.00000f);\n"
             "    r0.z = r1.x*hg_Params[12].z + hg_Params[13].z;\n"
             "    r0.x = select(r0.y, -r0.y, r0.x < 0.00000f);\n"
             "    r0.y = sin(r0.z);\n"
             "    r0.x = r0.y*hg_Params[11].x + r0.x;\n"
             "    r0.y = r0.x + c2.y;\n"
             "    r0.x = select(r0.x, r0.y, r0.x < 0.00000f);\n"
             "    r0.z = 1.00000f / hg_Params[0].x;\n"
             "    r0.y = r0.x*r0.z;\n"
             "    r0.y = floor(r0.y);\n"
             "    r0.x = r0.x*r0.z + -r0.y;\n"
             "    r0.y = r0.x*hg_Params[0].x;\n"
             "    r0.x = cos(r0.y);\n"
             "    r2.zw = hg_Params[7].zw - hg_Params[8].xy;\n"
             "    r3.x = dot(r2.zw, r2.zw);\n"
             "    r0.y = sin(r0.y);\n"
             "    r0.zw = r1.xx*r0.xy;\n"
             "    r0.xy = r0.zw - hg_Params[8].xy;\n"
             "    r0.x = dot(r0.xy, r2.zw);\n"
             "    r0.x = r0.x/r3.x;\n"
             "    r0.xy = r0.xx*r2.zw + hg_Params[8].xy;\n"
             "    r3.xy = r0.zw - r0.xy;\n"
             "    r0.x = dot(r3.xy, r3.xy);\n"
             "    r1.y = rsqrt(r0.x);\n"
             "    r2.xy = r1.yy*r3.xy;\n"
             "    r3.xy = hg_Params[5].xy - hg_Params[6].xy;\n"
             "    r0.xy = r0.zw - hg_Params[6].xy;\n"
             "    r4.x = dot(r0.xy, r3.xy);\n"
             "    r4.y = dot(r3.xy, r3.xy);\n"
             "    r0.y = -r2.z;\n"
             "    r0.x = r2.w;\n"
             "    r3.w = r4.x/r4.y;\n"
             "    r3.zw = r3.ww*r3.xy + hg_Params[6].xy;\n"
             "    r0.zw = r0.zw - r3.zw;\n"
             "    r3.z = dot(r0.zw, r0.zw);\n"
             "    r4.w = rsqrt(r3.z);\n"
             "    r0.zw = r4.ww*r0.zw;\n"
             "    r0.xy = normalize(r0.xy).xy;\n"
             "    r4.z = dot(r0.xy, r2.xy);\n"
             "    r0.y = -r3.x;\n"
             "    r0.x = r3.y;\n"
             "    r3.w = r3.x;\n"
             "    r3.z = -r3.y;\n"
             "    r4.x = float(-fabs(r3.x) >= c2.x);\n"
             "    r3.xy = select(r0.xy, r3.zw, -r4.xx < 0.00000f);\n"
             "    r0.xy = normalize(r3.xy).xy;\n"
             "    r0.x = dot(r0.xy, r0.zw);\n"
             "    r2.x = fabs(r0.x)*r4.w;\n"
             "    r0.x = r0.x/r2.x;\n"
             "    r3.z = fabs(r4.z)*r1.y;\n"
             "    r0.z = r4.z/r3.z;\n"
             "    r0.x = fmin(r0.x, r0.z);\n"
             "    r0.x = clamp(mix(c2.z, r0.x, hg_Params[9].x), 0.00000f, 1.00000f);\n"
             "    r0.y = r0.x*r0.x;\n"
             "    r0.z = hg_Params[10].z - r1.x;\n"
             "    r0.x = -r0.x*c2.w + c3.x;\n"
             "    r0.x = r0.y*r0.x;\n"
             "    r0.y = clamp(mix(c2.z, r0.z, hg_Params[9].x), 0.00000f, 1.00000f);\n"
             "    r0.z = -r0.y*c2.w + c3.x;\n"
             "    r0.y = r0.y*r0.y;\n"
             "    r0.y = r0.y*r0.z;\n"
             "    r0.x = r0.x*r0.y;\n"
             "    output.color0 = mix(hg_Params[2], hg_Params[1], r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=fb86d404:1e650e8f:989e6e84:ee2d82fe\n"
             "//SIG=00000000:00000000:00000000:00000000:0004:000e:0005:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000f3c\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "uniform highp vec4 hg_ProgramLocal13;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.05747731403, -0.01348046958, -0.1212390736, 0.1956359297);\n"
           "    const highp vec4 c1 = vec4(0.9999956489, -0.3329946101, 1.570796371, 3.141592741);\n"
           "    const highp vec4 c2 = vec4(0.000000000, 6.283185482, 0.5000000000, 2.000000000);\n"
           "    const highp vec4 c3 = vec4(3.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0.z = dot(hg_TexCoord0, hg_ProgramLocal4);\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal3);\n"
           "    r1.z = abs(r0.z);\n"
           "    r0.w = abs(r0.x);\n"
           "    r0.y = max(r0.w, r1.z);\n"
           "    r1.x = 1.00000 / r0.y;\n"
           "    r0.y = min(r0.w, r1.z);\n"
           "    r1.w = r0.y*r1.x;\n"
           "    r1.x = r1.w*r1.w;\n"
           "    r0.y = r1.x*c0.y + c0.x;\n"
           "    r0.y = r0.y*r1.x + c0.z;\n"
           "    r0.y = r0.y*r1.x + c0.w;\n"
           "    r1.y = r0.y*r1.x + c1.y;\n"
           "    r0.w = r1.z - r0.w;\n"
           "    r0.y = r0.z;\n"
           "    r2.x = r1.y*r1.x + c1.x;\n"
           "    r1.x = dot(r0.xy, r0.xy);\n"
           "    r0.y = r2.x*r1.w;\n"
           "    r1.y = c1.z - r0.y;\n"
           "    r0.y = r0.w < 0.00000 ? r1.y : r0.y;\n"
           "    r1.x = sqrt(r1.x);\n"
           "    r2.x = c1.w - r0.y;\n"
           "    r0.y = r0.z < 0.00000 ? r2.x : r0.y;\n"
           "    r0.z = r1.x*hg_ProgramLocal12.z + hg_ProgramLocal13.z;\n"
           "    r0.x = r0.x < 0.00000 ? -r0.y : r0.y;\n"
           "    r0.y = sin(r0.z);\n"
           "    r0.x = r0.y*hg_ProgramLocal11.x + r0.x;\n"
           "    r0.y = r0.x + c2.y;\n"
           "    r0.x = r0.x < 0.00000 ? r0.y : r0.x;\n"
           "    r0.z = 1.00000 / hg_ProgramLocal0.x;\n"
           "    r0.y = r0.x*r0.z;\n"
           "    r0.y = floor(r0.y);\n"
           "    r0.x = r0.x*r0.z + -r0.y;\n"
           "    r0.y = r0.x*hg_ProgramLocal0.x;\n"
           "    r0.x = cos(r0.y);\n"
           "    r2.zw = hg_ProgramLocal7.zw - hg_ProgramLocal8.xy;\n"
           "    r3.x = dot(r2.zw, r2.zw);\n"
           "    r0.y = sin(r0.y);\n"
           "    r0.zw = r1.xx*r0.xy;\n"
           "    r0.xy = r0.zw - hg_ProgramLocal8.xy;\n"
           "    r0.x = dot(r0.xy, r2.zw);\n"
           "    r0.x = r0.x/r3.x;\n"
           "    r0.xy = r0.xx*r2.zw + hg_ProgramLocal8.xy;\n"
           "    r3.xy = r0.zw - r0.xy;\n"
           "    r0.x = dot(r3.xy, r3.xy);\n"
           "    r1.y = inversesqrt(r0.x);\n"
           "    r2.xy = r1.yy*r3.xy;\n"
           "    r3.xy = hg_ProgramLocal5.xy - hg_ProgramLocal6.xy;\n"
           "    r0.xy = r0.zw - hg_ProgramLocal6.xy;\n"
           "    r4.x = dot(r0.xy, r3.xy);\n"
           "    r4.y = dot(r3.xy, r3.xy);\n"
           "    r0.y = -r2.z;\n"
           "    r0.x = r2.w;\n"
           "    r3.w = r4.x/r4.y;\n"
           "    r3.zw = r3.ww*r3.xy + hg_ProgramLocal6.xy;\n"
           "    r0.zw = r0.zw - r3.zw;\n"
           "    r3.z = dot(r0.zw, r0.zw);\n"
           "    r4.w = inversesqrt(r3.z);\n"
           "    r0.zw = r4.ww*r0.zw;\n"
           "    r0.xy = normalize(r0.xy).xy;\n"
           "    r4.z = dot(r0.xy, r2.xy);\n"
           "    r0.y = -r3.x;\n"
           "    r0.x = r3.y;\n"
           "    r3.w = r3.x;\n"
           "    r3.z = -r3.y;\n"
           "    r4.x = float(-abs(r3.x) >= c2.x);\n"
           "    r3.xy = vec2(-r4.x < 0.00000 ? r3.z : r0.x, -r4.x < 0.00000 ? r3.w : r0.y);\n"
           "    r0.xy = normalize(r3.xy).xy;\n"
           "    r0.x = dot(r0.xy, r0.zw);\n"
           "    r2.x = abs(r0.x)*r4.w;\n"
           "    r0.x = r0.x/r2.x;\n"
           "    r3.z = abs(r4.z)*r1.y;\n"
           "    r0.z = r4.z/r3.z;\n"
           "    r0.x = min(r0.x, r0.z);\n"
           "    r0.x = clamp(mix(c2.z, r0.x, hg_ProgramLocal9.x), 0.00000, 1.00000);\n"
           "    r0.y = r0.x*r0.x;\n"
           "    r0.z = hg_ProgramLocal10.z - r1.x;\n"
           "    r0.x = -r0.x*c2.w + c3.x;\n"
           "    r0.x = r0.y*r0.x;\n"
           "    r0.y = clamp(mix(c2.z, r0.z, hg_ProgramLocal9.x), 0.00000, 1.00000);\n"
           "    r0.z = -r0.y*c2.w + c3.x;\n"
           "    r0.y = r0.y*r0.y;\n"
           "    r0.y = r0.y*r0.z;\n"
           "    r0.x = r0.x*r0.y;\n"
           "    gl_FragColor = mix(hg_ProgramLocal2, hg_ProgramLocal1, r0.xxxx);\n"
           "}\n"
           "//MD5=637b6a09:19bbf311:4eb52fad:46dd2e12\n"
           "//SIG=00000000:00000000:00000000:00000000:0004:000e:0005:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcSunburst::InitProgramDescriptor(HgcSunburst *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSunburst_hgc_visible", "//Metal1.0     \n//LEN=0000000c57\n[[ visible ]] FragmentOut HgcSunburst_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.05747731403, -0.01348046958, -0.1212390736, 0.1956359297);\n"
    "    const float4 c1 = float4(0.9999956489, -0.3329946101, 1.570796371, 3.141592741);\n"
    "    const float4 c2 = float4(0.000000000, 6.283185482, 0.5000000000, 2.000000000);\n"
    "    const float4 c3 = float4(3.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.z = dot(texCoord0, hg_Params[4]);\n"
    "    r0.x = dot(texCoord0, hg_Params[3]);\n"
    "    r1.z = abs(r0.z);\n"
    "    r0.w = abs(r0.x);\n"
    "    r0.y = fmax(r0.w, r1.z);\n"
    "    r1.x = 1.00000f / r0.y;\n"
    "    r0.y = fmin(r0.w, r1.z);\n"
    "    r1.w = r0.y*r1.x;\n"
    "    r1.x = r1.w*r1.w;\n"
    "    r0.y = r1.x*c0.y + c0.x;\n"
    "    r0.y = r0.y*r1.x + c0.z;\n"
    "    r0.y = r0.y*r1.x + c0.w;\n"
    "    r1.y = r0.y*r1.x + c1.y;\n"
    "    r0.w = r1.z - r0.w;\n"
    "    r0.y = r0.z;\n"
    "    r2.x = r1.y*r1.x + c1.x;\n"
    "    r1.x = dot(r0.xy, r0.xy);\n"
    "    r0.y = r2.x*r1.w;\n"
    "    r1.y = c1.z - r0.y;\n"
    "    r0.y = select(r0.y, r1.y, r0.w < 0.00000f);\n"
    "    r1.x = sqrt(r1.x);\n"
    "    r2.x = c1.w - r0.y;\n"
    "    r0.y = select(r0.y, r2.x, r0.z < 0.00000f);\n"
    "    r0.z = r1.x*hg_Params[12].z + hg_Params[13].z;\n"
    "    r0.x = select(r0.y, -r0.y, r0.x < 0.00000f);\n"
    "    r0.y = sin(r0.z);\n"
    "    r0.x = r0.y*hg_Params[11].x + r0.x;\n"
    "    r0.y = r0.x + c2.y;\n"
    "    r0.x = select(r0.x, r0.y, r0.x < 0.00000f);\n"
    "    r0.z = 1.00000f / hg_Params[0].x;\n"
    "    r0.y = r0.x*r0.z;\n"
    "    r0.y = floor(r0.y);\n"
    "    r0.x = r0.x*r0.z + -r0.y;\n"
    "    r0.y = r0.x*hg_Params[0].x;\n"
    "    r0.x = cos(r0.y);\n"
    "    r2.zw = hg_Params[7].zw - hg_Params[8].xy;\n"
    "    r3.x = dot(r2.zw, r2.zw);\n"
    "    r0.y = sin(r0.y);\n"
    "    r0.zw = r1.xx*r0.xy;\n"
    "    r0.xy = r0.zw - hg_Params[8].xy;\n"
    "    r0.x = dot(r0.xy, r2.zw);\n"
    "    r0.x = r0.x/r3.x;\n"
    "    r0.xy = r0.xx*r2.zw + hg_Params[8].xy;\n"
    "    r3.xy = r0.zw - r0.xy;\n"
    "    r0.x = dot(r3.xy, r3.xy);\n"
    "    r1.y = rsqrt(r0.x);\n"
    "    r2.xy = r1.yy*r3.xy;\n"
    "    r3.xy = hg_Params[5].xy - hg_Params[6].xy;\n"
    "    r0.xy = r0.zw - hg_Params[6].xy;\n"
    "    r4.x = dot(r0.xy, r3.xy);\n"
    "    r4.y = dot(r3.xy, r3.xy);\n"
    "    r0.y = -r2.z;\n"
    "    r0.x = r2.w;\n"
    "    r3.w = r4.x/r4.y;\n"
    "    r3.zw = r3.ww*r3.xy + hg_Params[6].xy;\n"
    "    r0.zw = r0.zw - r3.zw;\n"
    "    r3.z = dot(r0.zw, r0.zw);\n"
    "    r4.w = rsqrt(r3.z);\n"
    "    r0.zw = r4.ww*r0.zw;\n"
    "    r0.xy = normalize(r0.xy).xy;\n"
    "    r4.z = dot(r0.xy, r2.xy);\n"
    "    r0.y = -r3.x;\n"
    "    r0.x = r3.y;\n"
    "    r3.w = r3.x;\n"
    "    r3.z = -r3.y;\n"
    "    r4.x = float(-fabs(r3.x) >= c2.x);\n"
    "    r3.xy = select(r0.xy, r3.zw, -r4.xx < 0.00000f);\n"
    "    r0.xy = normalize(r3.xy).xy;\n"
    "    r0.x = dot(r0.xy, r0.zw);\n"
    "    r2.x = fabs(r0.x)*r4.w;\n"
    "    r0.x = r0.x/r2.x;\n"
    "    r3.z = fabs(r4.z)*r1.y;\n"
    "    r0.z = r4.z/r3.z;\n"
    "    r0.x = fmin(r0.x, r0.z);\n"
    "    r0.x = clamp(mix(c2.z, r0.x, hg_Params[9].x), 0.00000f, 1.00000f);\n"
    "    r0.y = r0.x*r0.x;\n"
    "    r0.z = hg_Params[10].z - r1.x;\n"
    "    r0.x = -r0.x*c2.w + c3.x;\n"
    "    r0.x = r0.y*r0.x;\n"
    "    r0.y = clamp(mix(c2.z, r0.z, hg_Params[9].x), 0.00000f, 1.00000f);\n"
    "    r0.z = -r0.y*c2.w + c3.x;\n"
    "    r0.y = r0.y*r0.y;\n"
    "    r0.y = r0.y*r0.z;\n"
    "    r0.x = r0.x*r0.y;\n"
    "    output.color0 = mix(hg_Params[2], hg_Params[1], r0.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B287EB8C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSunburst");
}

void sub_1B287EB9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051C00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B287EC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B287ECDC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B287ECD4);
}

_QWORD *HgcSunburst::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSunburst [hgc1]");
}

uint64_t HgcSunburst::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcSunburst::Bind(HgcSunburst *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, *((_QWORD *)this + 51) + 208, 1);
  (*(void (**)(HgcSunburst *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSunburst::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  unint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int64x2_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x16_t v100;
  int64x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  int8x16_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int8x16_t v123;
  int64x2_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int8x16_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    *(float32x2_t *)v6.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v6.i64[1] = 0x3F80000000000000;
    v7 = 16 * a2[3].i32[0];
    do
    {
      if (v4 >= 1)
      {
        v8 = 0;
        v9 = v6;
        do
        {
          v10 = *(_QWORD *)(a1 + 408);
          v11 = vmulq_f32(v9, *(float32x4_t *)(v10 + 64));
          v12 = vaddq_f32(v11, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL));
          v13 = vmulq_f32(v9, *(float32x4_t *)(v10 + 48));
          v14 = (int8x16_t)vaddq_f32(v12, (float32x4_t)vdupq_lane_s64(v12.i64[0], 0));
          v15 = vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL));
          v15.i64[0] = vaddq_f32(v15, (float32x4_t)vdupq_laneq_s64((int64x2_t)v15, 1)).u64[0];
          v16.i64[0] = v15.i64[0];
          v15.i64[1] = vextq_s8(v14, v14, 8uLL).u64[0];
          v16.i64[1] = v14.i64[1];
          v17 = *(int8x16_t *)(v10 + 224);
          *(int8x8_t *)v18.i8 = vqtbl1_s8((int8x16_t)v15, *(int8x8_t *)v17.i8);
          v18.u64[1] = (unint64_t)vqtbl1_s8((int8x16_t)v15, (int8x8_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL));
          v19 = (int8x16_t)vabsq_f32(v16);
          v20 = vandq_s8(*(int8x16_t *)(v10 + 240), v18);
          v21 = *(int8x16_t *)(v10 + 256);
          v22 = *(float32x4_t *)(v10 + 272);
          v23 = (int32x4_t)vbslq_s8(v21, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8(v20, v20, 8uLL), (float32x4_t)vextq_s8(v19, v19, 4uLL)), v20);
          v24 = (float32x4_t)vrev64q_s32(v23);
          v25 = *(float32x4_t *)(v10 + 288);
          v26 = *(int8x16_t *)(v10 + 304);
          v27 = vminq_f32(vmaxq_f32(vrecpeq_f32(v24), v22), v25);
          v28 = vminq_f32(vmaxq_f32(vmulq_f32(v27, vrecpsq_f32(v24, v27)), v22), v25);
          v29 = (int8x16_t)vmulq_f32(v28, vrecpsq_f32(v24, v28));
          *(int8x8_t *)v28.f32 = vext_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), 4uLL);
          v30 = vextq_s8(v19, v29, 0xCuLL).u64[0];
          v29.i64[1] = v19.i64[1];
          v28.i64[1] = v30;
          v31 = (float32x4_t)vbslq_s8(v26, v29, (int8x16_t)vmulq_lane_f32(v28, (float32x2_t)*(_OWORD *)&vbslq_s8(v21, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), v28), v20), 1));
          v28.i64[0] = vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL), v31, 3).u64[0];
          v23.i64[0] = v28.i64[0];
          v23.i64[1] = vdupq_laneq_s64((int64x2_t)v31, 1).u64[0];
          v32 = (float32x4_t)vrev64q_s32(v23);
          v33 = *(float32x4_t *)(v10 + 320);
          v34 = *(float32x4_t *)(v10 + 336);
          v35 = vmulq_n_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v34, vmulq_n_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v22, vmulq_f32(v33, v32)), v20), v28.f32[0])), v20), v28.f32[0]);
          v37 = *(float32x4_t *)(v10 + 352);
          v36 = *(float32x4_t *)(v10 + 368);
          v38 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v37, v35), v20);
          v28.i64[1] = v31.i64[1];
          v39 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v36, vmulq_n_f32(v38, v28.f32[0])), (int8x16_t)v28);
          v40 = *(float32x4_t *)(v10 + 400);
          v41 = vbslq_s8(*(int8x16_t *)(v10 + 384), (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v39), v38), (int8x16_t)v38);
          v42 = (float32x4_t)vbslq_s8(v21, vextq_s8(v41, v41, 4uLL), v41);
          v43 = vmulq_f32(v42, v42);
          v44 = (int8x16_t)vaddq_f32(v43, (float32x4_t)vrev64q_s32((int32x4_t)v43));
          v45.i64[0] = v44.i64[0];
          v45.i64[1] = v39.i64[1];
          v46 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v39, v44, 8uLL), vaddq_f32(v36, vmulq_lane_f32(v39, *(float32x2_t *)v39.f32, 1)).f32[0]), v41);
          v47 = *(int8x16_t *)(v10 + 416);
          v48 = *(float32x4_t *)(v10 + 432);
          v49 = (float32x4_t)vbslq_s8(v47, v45, (int8x16_t)vsubq_f32(v40, v46));
          v50 = vminq_f32(vrsqrteq_f32(v49), v48);
          v51 = (int32x4_t)vbslq_s8(v21, vbslq_s8((int8x16_t)vcgtq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL)), (int8x16_t)v49, (int8x16_t)v46), v41);
          v52 = vminq_f32(vmulq_f32(v50, vrsqrtsq_f32(vmulq_f32(v50, v49), v50)), v48);
          v53 = (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v52, vrsqrtsq_f32(vmulq_f32(v52, v49), v52)), v48), v49);
          v54 = (int32x4_t)vbslq_s8(v47, (int8x16_t)v51, vbslq_s8((int8x16_t)vcgtq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL)), (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(v40, (float32x4_t)vrev64q_s32(v51))), (int8x16_t)v51));
          v55 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v10 + 208), vmulq_n_f32(*(float32x4_t *)(v10 + 192), *(float *)v53.i32));
          v56 = *(float32x4_t *)(v10 + 448);
          v57 = *(float32x4_t *)(v10 + 464);
          v58 = veorq_s8(vandq_s8((int8x16_t)v54, (int8x16_t)v56), (int8x16_t)vrev64q_s32(v54));
          *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v58.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL), 4uLL);
          v40.i64[1] = vextq_s8(v55, v58, 0xCuLL).u64[0];
          v59 = *(float32x4_t *)(v10 + 480);
          v60 = *(float32x4_t *)(v10 + 496);
          v61 = vaddq_f32(v57, vmulq_f32(v59, v40));
          v62 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
          v63 = vsubq_f32(v61, vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v60, (int8x16_t)vcgtq_f32(v62, v61))));
          v64 = *(float32x4_t *)(v10 + 512);
          v65 = *(float32x4_t *)(v10 + 528);
          v66 = vaddq_f32(v57, vabdq_f32(v63, v64));
          v67 = vmulq_f32(v66, v66);
          v68 = *(float32x4_t *)(v10 + 544);
          v69 = *(float32x4_t *)(v10 + 560);
          v58.i64[1] = v55.i64[1];
          v71 = *(float32x4_t *)(v10 + 576);
          v70 = *(float32x4_t *)(v10 + 592);
          v72 = (float32x4_t)vbslq_s8(v47, v58, (int8x16_t)vmulq_f32(v66, vaddq_f32(v71, vmulq_f32(v67, vaddq_f32(v69, vmulq_f32(v67, vaddq_f32(v65, vmulq_f32(v68, v67))))))));
          v73 = (int32x4_t)vaddq_f32(vmulq_lane_f32(*(float32x4_t *)(v10 + 176), *(float32x2_t *)v72.f32, 1), v72);
          v74 = (float32x4_t)vbslq_s8(v47, (int8x16_t)v73, (int8x16_t)vaddq_f32(v71, (float32x4_t)vrev64q_s32(v73)));
          v75 = (float32x4_t)vextq_s8(*(int8x16_t *)v10, *(int8x16_t *)v10, 8uLL);
          v76 = vminq_f32(vmaxq_f32(vmulq_f32(v71, vrecpeq_f32(v75)), v69), v25);
          v77 = (int8x16_t)vmulq_f32(v76, vrecpsq_f32(v75, v76));
          v78 = vbslq_s8((int8x16_t)vcgtq_f32(v71, v74), (int8x16_t)vrev64q_s32((int32x4_t)v74), (int8x16_t)v74);
          *(int8x8_t *)v79.f32 = vext_s8(*(int8x8_t *)v78.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), 4uLL);
          v79.i64[1] = vextq_s8(v77, v78, 0xCuLL).u64[0];
          v78.i64[1] = v77.i64[1];
          v80 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_n_f32(v79, *(float *)v78.i32), v78);
          v81 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
          v82 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vsubq_f32(v81, (float32x4_t)vandq_s8((int8x16_t)v60, (int8x16_t)vcgtq_f32(v81, v80))), v78);
          v83 = (int32x4_t)vmulq_n_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)v10), vsubq_f32(vmulq_laneq_f32(v82, v82, 2), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1)).f32[0]);
          v84 = vmulq_f32(v69, (float32x4_t)vrev64q_s32(v83));
          v85 = vcvtq_f32_s32(vcvtq_s32_f32(v84));
          v86 = vsubq_f32(vabdq_f32(vsubq_f32(v84, vsubq_f32(v85, (float32x4_t)vandq_s8((int8x16_t)v68, (int8x16_t)vcgtq_f32(v85, v84)))), v65), v64);
          v87 = vmulq_f32(v86, v86);
          v88 = (int8x16_t)vmulq_f32(v86, vaddq_f32(v37, vmulq_f32(v87, vaddq_f32(v57, vmulq_f32(v87, vaddq_f32(v60, vmulq_f32(v59, v87)))))));
          v89 = *(float32x4_t *)(v10 + 128);
          v90 = *(float32x4_t *)(v10 + 144);
          v91 = vaddq_f32(v57, vmulq_f32(v59, (float32x4_t)vbslq_s8(v47, v88, (int8x16_t)v83)));
          v92 = *(float32x4_t *)(v10 + 96);
          v93 = vsubq_f32(*(float32x4_t *)(v10 + 112), (float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL));
          v94 = vcvtq_f32_s32(vcvtq_s32_f32(v91));
          v95 = (int64x2_t)vmulq_f32(v93, v93);
          v96.i64[0] = vdupq_laneq_s64(v95, 1).u64[0];
          v96.i64[1] = v95.i64[0];
          v97 = vaddq_f32(v57, vabdq_f32(vsubq_f32(v91, vsubq_f32(v94, (float32x4_t)vandq_s8((int8x16_t)v60, (int8x16_t)vcgtq_f32(v94, v91)))), v64));
          v98 = vmulq_f32(v97, v97);
          v99 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 8uLL), (float32x4_t)vrev64q_s32(v96));
          v100 = vbslq_s8(v47, v88, (int8x16_t)vmulq_f32(v97, vaddq_f32(v71, vmulq_f32(v98, vaddq_f32(v69, vmulq_f32(v98, vaddq_f32(v65, vmulq_f32(v68, v98))))))));
          v101 = (int64x2_t)vmulq_n_f32((float32x4_t)vextq_s8(v100, v100, 8uLL), *(float *)v53.i32);
          v102 = (float32x4_t)vdupq_laneq_s64(v101, 1);
          v64.i64[0] = vsubq_f32(v102, v89).u64[0];
          v64.i64[1] = v101.i64[1];
          v103 = (float32x4_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL);
          v104 = vmulq_f32(v103, v64);
          v105 = vminq_f32(vmaxq_f32(vrecpeq_f32(v99), v34), v25);
          v106 = vminq_f32(vmaxq_f32(vmulq_f32(v105, vrecpsq_f32(v99, v105)), v34), v25);
          v107 = vaddq_f32(v89, vmulq_n_f32(v103, vmulq_f32(vmulq_f32(v106, vrecpsq_f32(v99, v106)), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1))).f32[0]));
          v108 = (float32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v107, 8uLL);
          v107.i64[1] = v101.i64[1];
          v109 = vsubq_f32(v108, v107);
          v110 = vmulq_f32(v109, v109);
          v110.i64[0] = vaddq_f32(v110, (float32x4_t)vrev64q_s32((int32x4_t)v110)).u64[0];
          v110.i64[1] = v102.i64[0];
          v111 = (float32x4_t)vrev64q_s32((int32x4_t)v110);
          v112 = vminq_f32(vrsqrteq_f32(v111), v25);
          v113 = vminq_f32(vmulq_f32(v112, vrsqrtsq_f32(vmulq_f32(v112, v111), v112)), v25);
          v114 = (int8x16_t)vmulq_f32(v113, vrsqrtsq_f32(vmulq_f32(v113, v111), v113));
          v113.i64[0] = vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL).u64[0];
          v53.i64[0] = vbslq_s8(v47, v53, v114).u64[0];
          v115 = vsubq_f32(*(float32x4_t *)(v10 + 80), v92);
          v109.i64[0] = vmulq_lane_f32(v109, *(float32x2_t *)v53.i8, 1).u64[0];
          v102.i64[0] = vsubq_f32(v102, v92).u64[0];
          v102.i64[1] = v101.i64[1];
          v116 = vmulq_f32(v115, v102);
          v117 = vmulq_f32(v115, v115);
          v109.i64[1] = v93.i64[1];
          v118 = vbslq_s8(v47, (int8x16_t)vaddq_f32(v116, (float32x4_t)vrev64q_s32((int32x4_t)v116)), (int8x16_t)vaddq_f32(v117, (float32x4_t)vrev64q_s32((int32x4_t)v117)));
          v119 = (float32x4_t)vextq_s8(v118, v118, 8uLL);
          *(float32x2_t *)v102.f32 = vneg_f32((float32x2_t)vext_s8(*(int8x8_t *)v109.f32, *(int8x8_t *)v103.f32, 4uLL));
          v120 = vminq_f32(vmaxq_f32(vrecpeq_f32(v119), v71), v25);
          v102.i64[1] = v113.i64[0];
          v121 = vminq_f32(vmaxq_f32(vmulq_f32(v120, vrecpsq_f32(v119, v120)), v71), v25);
          v122 = (float32x4_t)vbslq_s8(v47, vextq_s8((int8x16_t)v109, (int8x16_t)v109, 0xCuLL), (int8x16_t)v102);
          v123 = (int8x16_t)vsubq_f32(v122, vaddq_f32((float32x4_t)vdupq_lane_s64(v92.i64[0], 0), vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v115.i64[0], 0), vmulq_n_f32(vmulq_f32(v121, vrecpsq_f32(v119, v121)), *(float *)v118.i32), 3)));
          v119.i64[0] = vextq_s8(v123, v123, 8uLL).u64[0];
          v121.i64[0] = v122.i64[0];
          v121.i64[1] = v123.i64[1];
          *(int8x8_t *)v119.f32 = vext_s8((int8x8_t)vmul_f32(*(float32x2_t *)v119.f32, *(float32x2_t *)v119.f32), (int8x8_t)vmul_f32(*(float32x2_t *)v122.f32, *(float32x2_t *)v122.f32), 4uLL);
          v119.i64[1] = v119.i64[0];
          v124 = (int64x2_t)vaddq_f32(vmulq_f32(v121, v121), v119);
          v103.i64[0] = v115.i64[0];
          v103.i64[1] = vdupq_laneq_s64(v124, 1).u64[0];
          v125 = (float32x4_t)vrev64q_s32((int32x4_t)v103);
          v126 = vminq_f32(vrsqrteq_f32(v125), v69);
          v127 = vminq_f32(vmulq_f32(v126, vrsqrtsq_f32(vmulq_f32(v126, v125), v126)), v69);
          v128 = vmulq_f32(v127, vrsqrtsq_f32(vmulq_f32(v127, v125), v127));
          v129 = (int8x16_t)vmulq_laneq_f32(v121, v128, 3);
          v126.i64[0] = v122.i64[0];
          v126.i64[1] = v129.i64[1];
          *(float32x2_t *)v106.f32 = vneg_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v115.f32));
          v106.i64[1] = vextq_s8(v129, v129, 8uLL).u64[0];
          v126.i64[0] = vmulq_f32(v126, v126).u64[0];
          v130 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1));
          v131 = vminq_f32(vmulq_f32(vrsqrteq_f32(v130), v70), v25);
          v122.i64[0] = vmulq_f32(vmulq_f32(v131, vrsqrtsq_f32(vmulq_f32(v131, v130), v131)), v122).u64[0];
          v115.i64[1] = vextq_s8((int8x16_t)v124, (int8x16_t)v115, 0xCuLL).u64[0];
          v122.i64[1] = v129.i64[1];
          v132 = vbslq_s8(v47, (int8x16_t)v125, (int8x16_t)v106);
          v133 = (int8x16_t)vnegq_f32(v115);
          v134 = vbslq_s8(v26, vextq_s8(v133, v133, 0xCuLL), (int8x16_t)v115);
          v135 = (int8x16_t)vmulq_f32(v109, v122);
          v56.i64[0] = vandq_s8((int8x16_t)v68, (int8x16_t)vcgeq_f32((float32x4_t)vorrq_s8(v134, (int8x16_t)v56), v71)).u64[0];
          v136 = *(float32x4_t *)(v10 + 608);
          v137 = *(float32x4_t *)(v10 + 624);
          v138 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 0), v136), vextq_s8(v134, v134, 8uLL), v132);
          v71.i64[0] = vmulq_f32(v138, v138).u64[0];
          v139 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1));
          v140 = vminq_f32(vmulq_f32(v70, vrsqrteq_f32(v139)), v25);
          v141 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v135.i64[0], 0), (float32x4_t)vextq_s8((int8x16_t)v6, v135, 0xCuLL)), (int8x16_t)v128);
          v142 = vmulq_f32(vmulq_f32(v140, vrsqrtsq_f32(vmulq_f32(v140, v139), v140)), v138);
          v143 = (float32x4_t)vextq_s8(v132, (int8x16_t)v142, 8uLL);
          v56.i64[1] = v141.i64[1];
          v142.i64[1] = v132.i64[1];
          v144 = vmulq_f32(v142, v143);
          v145 = vaddq_f32(v144, (float32x4_t)vrev64q_s32((int32x4_t)v144));
          v146 = vmulq_laneq_f32(vabsq_f32(v145), v141, 3);
          v147 = vminq_f32(vmaxq_f32(vrecpeq_f32(v146), v34), v25);
          v148 = vminq_f32(vmaxq_f32(vmulq_f32(v147, vrecpsq_f32(v146, v147)), v34), v25);
          v149 = vmulq_f32(v148, vrecpsq_f32(v146, v148));
          v150 = vmulq_lane_f32(vabsq_f32(v56), *(float32x2_t *)v53.i8, 1);
          v151 = vminq_f32(vmaxq_f32(vrecpeq_f32(v150), v136), v25);
          v152 = vmulq_f32(v149, v145);
          v153 = vminq_f32(vmaxq_f32(vmulq_f32(v151, vrecpsq_f32(v150, v151)), v136), v25);
          v154 = (int8x16_t)vmulq_f32(vmulq_f32(v153, vrecpsq_f32(v150, v153)), v56);
          v155 = (float32x4_t)vextq_s8(v154, (int8x16_t)v152, 8uLL);
          v152.i64[1] = v154.i64[1];
          v156 = vminq_f32(vmaxq_f32(vaddq_f32(v65, vmulq_f32(v90, vsubq_f32(vminq_f32(v152, v155), v65))), v136), v68);
          v156.i64[0] = vbslq_s8(v47, (int8x16_t)v156, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v156), v156.f32[0])).u64[0];
          v156.i64[1] = vsubq_f32(*(float32x4_t *)(v10 + 160), (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v53, 0)).i64[1];
          v157 = (float32x4_t)vbslq_s8(v47, (int8x16_t)vsubq_f32(v33, vmulq_f32(v137, v156)), (int8x16_t)v156);
          v154.i64[0] = vmulq_lane_f32(v157, *(float32x2_t *)v157.f32, 1).u64[0];
          v155.i64[0] = vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL).u64[0];
          *(int8x8_t *)v33.f32 = vext_s8(*(int8x8_t *)v155.f32, *(int8x8_t *)v154.i8, 4uLL);
          *(int8x8_t *)v155.f32 = vext_s8(*(int8x8_t *)v154.i8, *(int8x8_t *)v155.f32, 4uLL);
          v155.i64[1] = v33.i64[0];
          v154.i64[1] = v157.i64[1];
          v158 = (float32x4_t)vbslq_s8(v47, v154, (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v137, vmulq_n_f32(vsubq_f32(v155, v137), v90.f32[0])), v136), v60));
          v158.i64[1] = vsubq_f32(v137, vmulq_f32(v70, (float32x4_t)vextq_s8(*(int8x16_t *)&v6, *(int8x16_t *)&v158, 0xCuLL))).i64[1];
          v159 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(v158, v158), (int8x16_t)v158);
          v160 = (float32x4_t)vbslq_s8(v47, (int8x16_t)v159, (int8x16_t)vmulq_laneq_f32(v159, v159, 2));
          *(float32x4_t *)(*(_QWORD *)&v5 + v8) = vaddq_f32(*(float32x4_t *)(v10 + 32), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v10 + 16), *(float32x4_t *)(v10 + 32)), vmulq_lane_f32(v160, *(float32x2_t *)v160.f32, 1).f32[0]));
          v9 = vaddq_f32(v9, (float32x4_t)xmmword_1B304F230);
          v8 += 16;
        }
        while (16 * v4 != v8);
      }
      v6 = vaddq_f32(v6, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSunburst::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcSunburst::GetROI()
{
  return 0;
}

void HgcSunburst::HgcSunburst(HgcSunburst *this)
{
  _QWORD *v2;
  HgcSunburst::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E8918;
  v3 = (HgcSunburst::State *)operator new();
  HgcSunburst::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B287F78C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSunburst::~HgcSunburst(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E8918;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4033510130);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSunburst::~HgcSunburst(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSunburst::SetParameter(HgcSunburst *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  __n128 *v15;
  float *v16;
  float *v17;
  __n128 *v18;
  float *v19;
  __n128 *v20;
  __n128 *v21;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_73;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_73;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_73;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_73;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_73;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_73;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_73;
    case 7:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[7].n128_f32[0] == 0.0
        && v15[7].n128_f32[1] == 0.0
        && v15[7].n128_f32[2] == a3.n128_f32[0]
        && v15[7].n128_f32[3] == a4)
      {
        return 0;
      }
      v15[7].n128_u64[0] = 0;
      v15[7].n128_u32[2] = a3.n128_u32[0];
      v15[7].n128_f32[3] = a4;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[40] = a3;
      goto LABEL_73;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_73;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_73;
    case 10:
      v18 = (__n128 *)*((_QWORD *)this + 51);
      if (v18[10].n128_f32[0] == 0.0
        && v18[10].n128_f32[1] == 0.0
        && v18[10].n128_f32[2] == a3.n128_f32[0]
        && v18[10].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v18[10].n128_u64[0] = 0;
      v18[10].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v18[10].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v18[41] = a3;
      goto LABEL_73;
    case 11:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6)
        return 0;
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
      goto LABEL_73;
    case 12:
      v20 = (__n128 *)*((_QWORD *)this + 51);
      if (v20[12].n128_f32[0] == 0.0
        && v20[12].n128_f32[1] == 0.0
        && v20[12].n128_f32[2] == a3.n128_f32[0]
        && v20[12].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v20[12].n128_u64[0] = 0;
      v20[12].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v20[12].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v20[42] = a3;
      goto LABEL_73;
    case 13:
      v21 = (__n128 *)*((_QWORD *)this + 51);
      if (v21[13].n128_f32[0] == 0.0
        && v21[13].n128_f32[1] == 0.0
        && v21[13].n128_f32[2] == a3.n128_f32[0]
        && v21[13].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v21[13].n128_u64[0] = 0;
      v21[13].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v21[13].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v21[43] = a3;
LABEL_73:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSunburst::GetParameter(HgcSunburst *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_16;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_16;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_16;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_16;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_16;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_16;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_16;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[160];
      a3[1] = v11[161];
      a3[2] = v11[162];
      v4 = v11 + 163;
      goto LABEL_16;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_16;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      v4 = v13 + 39;
      goto LABEL_16;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[164];
      a3[1] = v14[165];
      a3[2] = v14[166];
      v4 = v14 + 167;
      goto LABEL_16;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      v4 = v15 + 47;
      goto LABEL_16;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[168];
      a3[1] = v16[169];
      a3[2] = v16[170];
      v4 = v16 + 171;
      goto LABEL_16;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[172];
      a3[1] = v17[173];
      a3[2] = v17[174];
      v4 = v17 + 175;
LABEL_16:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double HgcSunburst::State::State(HgcSunburst::State *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 14) = xmmword_1B3051C10;
  *((_OWORD *)this + 15) = xmmword_1B3051A80;
  *((_OWORD *)this + 16) = xmmword_1B3050FF0;
  *((_OWORD *)this + 17) = xmmword_1B3051C20;
  *((int32x4_t *)this + 18) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 19) = xmmword_1B3050FE0;
  *((_OWORD *)this + 20) = xmmword_1B3051C30;
  *((_OWORD *)this + 21) = xmmword_1B3051C40;
  *((_OWORD *)this + 22) = xmmword_1B3051C50;
  *((_OWORD *)this + 23) = xmmword_1B3051C60;
  *((_OWORD *)this + 24) = xmmword_1B3050F70;
  *((_OWORD *)this + 25) = xmmword_1B3051C70;
  *((_OWORD *)this + 26) = xmmword_1B3050E20;
  *((_OWORD *)this + 27) = xmmword_1B3051C80;
  *((_OWORD *)this + 28) = xmmword_1B3051080;
  *((_OWORD *)this + 29) = xmmword_1B3051C90;
  *((_OWORD *)this + 30) = xmmword_1B3051CA0;
  *((_OWORD *)this + 31) = xmmword_1B3051CB0;
  *((_OWORD *)this + 32) = xmmword_1B3051CC0;
  *((_OWORD *)this + 33) = xmmword_1B3051CD0;
  *((_OWORD *)this + 34) = xmmword_1B3051CE0;
  *((_OWORD *)this + 35) = xmmword_1B3051CF0;
  *((_OWORD *)this + 36) = xmmword_1B3051D00;
  *((_OWORD *)this + 37) = xmmword_1B3051D10;
  *((_OWORD *)this + 38) = xmmword_1B3051D20;
  *((_OWORD *)this + 39) = xmmword_1B3051D30;
  *((_OWORD *)this + 42) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  return result;
}

const char *HgcBadTV::GetProgram(HgcBadTV *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000a0a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, 0.5000000000, -1.000000000, 0.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 3.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[3]);\n"
             "    s1.y = s0.x + hg_Params[6].y;\n"
             "    s0.y = float(c0.y)*hg_Params[9].x + s0.x;\n"
             "    s0.z = s0.y/hg_Params[9].x;\n"
             "    s0.w = floor(s0.z);\n"
             "    s0.w = -s0.w*hg_Params[9].x + s0.y;\n"
             "    s0.z = float(c0.y);\n"
             "    s0.xy = s0.zw + hg_Params[13].xy;\n"
             "    s0.xy = s0.xy*hg_Params[13].zw;\n"
             "    s1.x = (float) hg_Texture0.sample(hg_Sampler0, s0.xy).x;\n"
             "    s1.z = dot(frag._texCoord0, hg_Params[4]);\n"
             "    s1.w = dot(frag._texCoord0, hg_Params[5]);\n"
             "    r0.z = half(s1.x)*c0.x + c0.z;\n"
             "    r0.y = dot(half4(frag._texCoord0), half4(hg_Params[2]));\n"
             "    s1.x = float(r0.z)*hg_Params[8].x + float(r0.y);\n"
             "    r0.yzw = c0.www;\n"
             "    r0.x = half(hg_Params[11].x);\n"
             "    s0 = s1 - float4(r0);\n"
             "    s2 = s1 + float4(r0);\n"
             "    s3.x = dot(s0, hg_Params[0]);\n"
             "    s3.y = dot(s0, hg_Params[1]);\n"
             "    s0.y = dot(s2, hg_Params[1]);\n"
             "    s0.x = dot(s2, hg_Params[0]);\n"
             "    s2.x = dot(s1, hg_Params[1]);\n"
             "    s2.z = dot(s1, hg_Params[0]);\n"
             "    s0.xy = s0.xy + hg_Params[14].xy;\n"
             "    s0.xy = s0.xy*hg_Params[14].zw;\n"
             "    r0.x = (half) hg_Texture1.sample(hg_Sampler1, s0.xy).x;\n"
             "    s2.w = s2.x;\n"
             "    s1.xy = s2.zw + hg_Params[14].xy;\n"
             "    s1.xy = s1.xy*hg_Params[14].zw;\n"
             "    r0.yw = (half2) hg_Texture1.sample(hg_Sampler1, s1.xy).yw;\n"
             "    s2.y = s2.x*hg_Params[10].y;\n"
             "    s3.xy = s3.xy + hg_Params[14].xy;\n"
             "    s3.xy = s3.xy*hg_Params[14].zw;\n"
             "    r0.z = (half) hg_Texture1.sample(hg_Sampler1, s3.xy).z;\n"
             "    s2.x = fract(s2.y);\n"
             "    s2.x = clamp(s2.x*hg_Params[10].z + -hg_Params[10].x, 0.00000f, 1.00000f);\n"
             "    s2.y = -s2.x - s2.x;\n"
             "    r1.w = dot(r0, half4(hg_Params[12]));\n"
             "    s2.x = s2.x*s2.x;\n"
             "    s2.y = s2.y + float(c1.y);\n"
             "    s2.x = s2.x*s2.y;\n"
             "    s2.x = mix(hg_Params[10].w, -float(c0.z), s2.x);\n"
             "    r1.xyz = mix(r1.www, r0.xyz, half3(hg_Params[7].xyz));\n"
             "    output.color0.xyz = float3(r1.xyz)*s2.xxx;\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2abb2c53:70ff5636:9b411af0:96cc0ba5\n"
             "//SIG=00400000:00000000:00000000:00000003:0002:000f:0006:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000096f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, 0.5000000000, -1.000000000, 0.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 3.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[3]);\n"
             "    r1.y = r0.x + hg_Params[6].y;\n"
             "    r0.y = c0.y*hg_Params[9].x + r0.x;\n"
             "    r0.z = r0.y/hg_Params[9].x;\n"
             "    r0.w = floor(r0.z);\n"
             "    r0.w = -r0.w*hg_Params[9].x + r0.y;\n"
             "    r0.z = c0.y;\n"
             "    r0.xy = r0.zw + hg_Params[13].xy;\n"
             "    r0.xy = r0.xy*hg_Params[13].zw;\n"
             "    r1.x = hg_Texture0.sample(hg_Sampler0, r0.xy).x;\n"
             "    r1.z = dot(frag._texCoord0, hg_Params[4]);\n"
             "    r1.w = dot(frag._texCoord0, hg_Params[5]);\n"
             "    r0.z = r1.x*c0.x + c0.z;\n"
             "    r0.y = dot(frag._texCoord0, hg_Params[2]);\n"
             "    r1.x = r0.z*hg_Params[8].x + r0.y;\n"
             "    r0.yzw = c0.www;\n"
             "    r0.x = hg_Params[11].x;\n"
             "    r2 = r1 - r0;\n"
             "    r0 = r1 + r0;\n"
             "    r3.x = dot(r2, hg_Params[0]);\n"
             "    r3.y = dot(r2, hg_Params[1]);\n"
             "    r2.y = dot(r0, hg_Params[1]);\n"
             "    r2.x = dot(r0, hg_Params[0]);\n"
             "    r0.x = dot(r1, hg_Params[1]);\n"
             "    r0.z = dot(r1, hg_Params[0]);\n"
             "    r2.xy = r2.xy + hg_Params[14].xy;\n"
             "    r2.xy = r2.xy*hg_Params[14].zw;\n"
             "    r2.x = hg_Texture1.sample(hg_Sampler1, r2.xy).x;\n"
             "    r0.w = r0.x;\n"
             "    r1.xy = r0.zw + hg_Params[14].xy;\n"
             "    r1.xy = r1.xy*hg_Params[14].zw;\n"
             "    r2.yw = hg_Texture1.sample(hg_Sampler1, r1.xy).yw;\n"
             "    r0.y = r0.x*hg_Params[10].y;\n"
             "    r3.xy = r3.xy + hg_Params[14].xy;\n"
             "    r3.xy = r3.xy*hg_Params[14].zw;\n"
             "    r2.z = hg_Texture1.sample(hg_Sampler1, r3.xy).z;\n"
             "    r0.x = fract(r0.y);\n"
             "    r0.x = clamp(r0.x*hg_Params[10].z + -hg_Params[10].x, 0.00000f, 1.00000f);\n"
             "    r0.y = -r0.x - r0.x;\n"
             "    r1.w = dot(r2, hg_Params[12]);\n"
             "    r0.x = r0.x*r0.x;\n"
             "    r0.y = r0.y + c1.y;\n"
             "    r0.x = r0.x*r0.y;\n"
             "    r0.x = mix(hg_Params[10].w, -c0.z, r0.x);\n"
             "    r1.xyz = mix(r1.www, r2.xyz, hg_Params[7].xyz);\n"
             "    output.color0.xyz = r1.xyz*r0.xxx;\n"
             "    output.color0.w = r2.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=11b19c4d:d942f3cf:da282a43:c3f6e35e\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:000f:0004:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000b5a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "uniform highp vec4 hg_ProgramLocal13;\n"
           "uniform highp vec4 hg_ProgramLocal14;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(2.000000000, 0.5000000000, -1.000000000, 0.000000000);\n"
           "    const highp vec4 c1 = vec4(0.000000000, 3.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal3);\n"
           "    r1.y = r0.x + hg_ProgramLocal6.y;\n"
           "    r0.y = c0.y*hg_ProgramLocal9.x + r0.x;\n"
           "    r0.z = r0.y/hg_ProgramLocal9.x;\n"
           "    r0.w = floor(r0.z);\n"
           "    r0.w = -r0.w*hg_ProgramLocal9.x + r0.y;\n"
           "    r0.z = c0.y;\n"
           "    r0.xy = r0.zw + hg_ProgramLocal13.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal13.zw;\n"
           "    r1.x = texture2D(hg_Texture0, r0.xy).x;\n"
           "    r1.z = dot(hg_TexCoord0, hg_ProgramLocal4);\n"
           "    r1.w = dot(hg_TexCoord0, hg_ProgramLocal5);\n"
           "    r0.z = r1.x*c0.x + c0.z;\n"
           "    r0.y = dot(hg_TexCoord0, hg_ProgramLocal2);\n"
           "    r1.x = r0.z*hg_ProgramLocal8.x + r0.y;\n"
           "    r0.yzw = c0.www;\n"
           "    r0.x = hg_ProgramLocal11.x;\n"
           "    r2 = r1 - r0;\n"
           "    r0 = r1 + r0;\n"
           "    r3.x = dot(r2, hg_ProgramLocal0);\n"
           "    r3.y = dot(r2, hg_ProgramLocal1);\n"
           "    r2.y = dot(r0, hg_ProgramLocal1);\n"
           "    r2.x = dot(r0, hg_ProgramLocal0);\n"
           "    r0.x = dot(r1, hg_ProgramLocal1);\n"
           "    r0.z = dot(r1, hg_ProgramLocal0);\n"
           "    r2.xy = r2.xy + hg_ProgramLocal14.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal14.zw;\n"
           "    r2.x = texture2D(hg_Texture1, r2.xy).x;\n"
           "    r0.w = r0.x;\n"
           "    r1.xy = r0.zw + hg_ProgramLocal14.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal14.zw;\n"
           "    r2.yw = texture2D(hg_Texture1, r1.xy).yw;\n"
           "    r0.y = r0.x*hg_ProgramLocal10.y;\n"
           "    r3.xy = r3.xy + hg_ProgramLocal14.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal14.zw;\n"
           "    r2.z = texture2D(hg_Texture1, r3.xy).z;\n"
           "    r0.x = fract(r0.y);\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal10.z + -hg_ProgramLocal10.x, 0.00000, 1.00000);\n"
           "    r0.y = -r0.x - r0.x;\n"
           "    r1.w = dot(r2, hg_ProgramLocal12);\n"
           "    r0.x = r0.x*r0.x;\n"
           "    r0.y = r0.y + c1.y;\n"
           "    r0.x = r0.x*r0.y;\n"
           "    r0.x = mix(hg_ProgramLocal10.w, -c0.z, r0.x);\n"
           "    r1.xyz = mix(r1.www, r2.xyz, hg_ProgramLocal7.xyz);\n"
           "    gl_FragColor.xyz = r1.xyz*r0.xxx;\n"
           "    gl_FragColor.w = r2.w;\n"
           "}\n"
           "//MD5=0b2bb717:11fa548a:6dd858f6:4ce3e43b\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:000f:0004:0000:0000:0000:0000:0000:0001:02:0:1:0\n";
  }
}

void HgcBadTV::InitProgramDescriptor(HgcBadTV *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBadTV_hgc_visible", "//Metal1.0     \n//LEN=0000000876\n[[ visible ]] FragmentOut HgcBadTV_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(2.000000000, 0.5000000000, -1.000000000, 0.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 3.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = dot(texCoord0, hg_Params[3]);\n"
    "    r1.y = r0.x + hg_Params[6].y;\n"
    "    r0.y = c0.y*hg_Params[9].x + r0.x;\n"
    "    r0.z = r0.y/hg_Params[9].x;\n"
    "    r0.w = floor(r0.z);\n"
    "    r0.w = -r0.w*hg_Params[9].x + r0.y;\n"
    "    r0.z = c0.y;\n"
    "    r0.xy = r0.zw + hg_Params[13].xy;\n"
    "    r0.xy = r0.xy*hg_Params[13].zw;\n"
    "    r1.x = hg_Texture0.sample(hg_Sampler0, r0.xy).x;\n"
    "    r1.z = dot(texCoord0, hg_Params[4]);\n"
    "    r1.w = dot(texCoord0, hg_Params[5]);\n"
    "    r0.z = r1.x*c0.x + c0.z;\n"
    "    r0.y = dot(texCoord0, hg_Params[2]);\n"
    "    r1.x = r0.z*hg_Params[8].x + r0.y;\n"
    "    r0.yzw = c0.www;\n"
    "    r0.x = hg_Params[11].x;\n"
    "    r2 = r1 - r0;\n"
    "    r0 = r1 + r0;\n"
    "    r3.x = dot(r2, hg_Params[0]);\n"
    "    r3.y = dot(r2, hg_Params[1]);\n"
    "    r2.y = dot(r0, hg_Params[1]);\n"
    "    r2.x = dot(r0, hg_Params[0]);\n"
    "    r0.x = dot(r1, hg_Params[1]);\n"
    "    r0.z = dot(r1, hg_Params[0]);\n"
    "    r2.xy = r2.xy + hg_Params[14].xy;\n"
    "    r2.xy = r2.xy*hg_Params[14].zw;\n"
    "    r2.x = hg_Texture1.sample(hg_Sampler1, r2.xy).x;\n"
    "    r0.w = r0.x;\n"
    "    r1.xy = r0.zw + hg_Params[14].xy;\n"
    "    r1.xy = r1.xy*hg_Params[14].zw;\n"
    "    r2.yw = hg_Texture1.sample(hg_Sampler1, r1.xy).yw;\n"
    "    r0.y = r0.x*hg_Params[10].y;\n"
    "    r3.xy = r3.xy + hg_Params[14].xy;\n"
    "    r3.xy = r3.xy*hg_Params[14].zw;\n"
    "    r2.z = hg_Texture1.sample(hg_Sampler1, r3.xy).z;\n"
    "    r0.x = fract(r0.y);\n"
    "    r0.x = clamp(r0.x*hg_Params[10].z + -hg_Params[10].x, 0.00000f, 1.00000f);\n"
    "    r0.y = -r0.x - r0.x;\n"
    "    r1.w = dot(r2, hg_Params[12]);\n"
    "    r0.x = r0.x*r0.x;\n"
    "    r0.y = r0.y + c1.y;\n"
    "    r0.x = r0.x*r0.y;\n"
    "    r0.x = mix(hg_Params[10].w, -c0.z, r0.x);\n"
    "    r1.xyz = mix(r1.www, r2.xyz, hg_Params[7].xyz);\n"
    "    output.color0.xyz = r1.xyz*r0.xxx;\n"
    "    output.color0.w = r2.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2880044()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBadTV");
}

void sub_1B2880054(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051270;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2880254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28802B4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28802ACLL);
}

_QWORD *HgcBadTV::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBadTV [hgc1]");
}

uint64_t HgcBadTV::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  void (*v9)(uint64_t, uint64_t, __n128, __n128, __n128, __n128);
  int v10;
  uint64_t v12;
  uint64_t v13;

  if (a3 == 1)
  {
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46);
    v7.n128_f32[0] = (float)*(int *)(a2 + 240);
    v8.n128_f32[0] = (float)*(int *)(a2 + 244);
    if (v10)
    {
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
    }
    v12 = a2;
    v13 = 14;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46);
    v7.n128_f32[0] = (float)*(int *)(a2 + 240);
    v8.n128_f32[0] = (float)*(int *)(a2 + 244);
    if (v4)
    {
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
    }
    v12 = a2;
    v13 = 13;
  }
  v9(v12, v13, v7, v8, v5, v6);
  return 0;
}

uint64_t HgcBadTV::Bind(HgcBadTV *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HgcBadTV *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcBadTV::RenderTile(HgcBadTV *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  uint64_t v52;
  float32x4_t v53;
  uint64_t v54;
  int32x4_t v55;
  float32x2_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  uint64_t v119;
  int32x4_t v120;
  float32x2_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  int8x16_t v124;
  float32x4_t v125;
  int32x4_t v126;
  float32x4_t *v127;
  float32x4_t v128;
  int8x16_t v129;
  float32x4_t v130;
  int32x4_t v131;
  float32x4_t v132;
  int32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  float32x4_t v143;
  int8x16_t v144;
  float32x4_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  float32x2_t v152;
  float32x4_t *v153;
  float32x4_t v154;
  int8x16_t v155;
  float32x4_t v156;
  int32x4_t v157;
  float32x4_t *v158;
  float32x4_t v159;
  int8x16_t v160;
  float32x4_t v161;
  int32x4_t v162;
  float32x4_t v163;
  int32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int32x4_t v178;
  float32x2_t v179;
  float32x4_t *v180;
  float32x4_t v181;
  int8x16_t v182;
  float32x4_t v183;
  int32x4_t v184;
  float32x4_t *v185;
  float32x4_t v186;
  int8x16_t v187;
  float32x4_t v188;
  int32x4_t v189;
  float32x4_t v190;
  int32x4_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  float32x4_t v204;
  int8x16_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  int8x16_t v209;
  float32x4_t v210;
  float32x4_t v211;
  int8x16_t v212;
  int8x16_t v213;
  float32x4_t v214;
  float32x4_t v215;
  int8x16_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  int8x16_t *v223;
  uint64_t v224;
  int8x16_t v225;
  int8x16_t v226;
  float32x4_t v227;
  int8x16_t v228;
  int8x16_t v229;
  float32x4_t v230;
  int8x16_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  int8x16_t v237;
  float32x4_t v238;
  int8x16_t v239;
  uint64_t v240;
  float32x4_t v241;
  uint64_t v242;
  int32x4_t v243;
  float32x2_t v244;
  float32x4_t *v245;
  float32x4_t v246;
  int8x16_t v247;
  float32x4_t v248;
  int32x4_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int8x16_t v253;
  float32x4_t v254;
  int8x16_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  int8x16_t v259;
  int8x16_t v260;
  float32x4_t v261;
  float32x4_t v262;
  int8x16_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  float32x4_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  float32x4_t v278;
  int8x16_t v279;
  uint64_t v280;
  float32x4_t v281;
  uint64_t v282;
  int32x4_t v283;
  float32x2_t v284;
  float32x4_t *v285;
  float32x4_t v286;
  int8x16_t v287;
  int8x16_t v288;
  float32x4_t v289;
  int32x4_t v290;
  float32x4_t *v291;
  float32x4_t v292;
  int8x16_t v293;
  float32x4_t v294;
  int32x4_t v295;
  float32x4_t v296;
  int32x4_t v297;
  float32x4_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  float32x4_t v303;
  int32x4_t v304;
  float32x2_t v305;
  float32x4_t *v306;
  float32x4_t v307;
  int8x16_t v308;
  float32x4_t v309;
  int32x4_t v310;
  int8x16_t v311;
  float32x4_t v312;
  int8x16_t v313;
  float32x4_t v314;
  float32x4_t v315;
  int8x16_t v316;
  int8x16_t v317;
  float32x4_t v318;
  int8x16_t v319;
  float32x4_t v320;
  int8x16_t v321;
  float32x4_t v322;
  float32x4_t v323;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcBadTV *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 48);
          v21 = (int8x16_t)vmulq_f32(v17, v20);
          v22 = (int8x16_t)vmulq_f32(v18, v20);
          v23 = (int8x16_t)vaddq_f32((float32x4_t)v21, (float32x4_t)vextq_s8(v21, v21, 4uLL));
          v24 = (int8x16_t)vaddq_f32((float32x4_t)v22, (float32x4_t)vextq_s8(v22, v22, 4uLL));
          v25 = (int32x4_t)vaddq_f32((float32x4_t)v24, (float32x4_t)vextq_s8(v24, v24, 8uLL));
          v26 = (float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)v23, (float32x4_t)vextq_s8(v23, v23, 8uLL)));
          v27 = (float32x4_t)vrev64q_s32(v25);
          v28 = *(int8x16_t *)(v19 + 144);
          v29 = *(int8x16_t *)(v19 + 208);
          v30 = *(float32x4_t *)(v19 + 224);
          v31 = vmulq_n_f32((float32x4_t)v29, *(float *)v28.i32);
          v32 = (int8x16_t)vaddq_f32(v31, v26);
          v33 = (int8x16_t)vaddq_f32(v31, v27);
          v34 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
          v35 = vminq_f32(vmaxq_f32(vrecpeq_f32(v34), (float32x4_t)v29), v30);
          v36 = vminq_f32(vmaxq_f32(vmulq_f32(v35, vrecpsq_f32(v34, v35)), (float32x4_t)v29), v30);
          v37 = vmulq_f32(v36, vrecpsq_f32(v34, v36));
          v35.i64[0] = v32.i64[0];
          v35.i64[1] = vdupq_laneq_s64((int64x2_t)vmulq_lane_f32(v37, *(float32x2_t *)v32.i8, 1), 1).u64[0];
          v38 = (float32x4_t)vrev64q_s32((int32x4_t)v35);
          v35.i64[0] = v33.i64[0];
          v35.i64[1] = vdupq_laneq_s64((int64x2_t)vmulq_lane_f32(v37, *(float32x2_t *)v33.i8, 1), 1).u64[0];
          v39 = (float32x4_t)vrev64q_s32((int32x4_t)v35);
          v40 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
          v41 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
          v42 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v40, v38), v29, (int8x16_t)0);
          v43 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v41, v39), v29, (int8x16_t)0);
          v44 = (int8x16_t)vsubq_f32(v40, v42);
          v45 = (int8x16_t)vsubq_f32(v41, v43);
          v46 = (float32x4_t)vextq_s8(v44, v32, 8uLL);
          v32.i32[3] = v44.i32[3];
          v47 = (float32x4_t)vextq_s8(v45, v33, 8uLL);
          v33.i32[3] = v45.i32[3];
          v48 = (int8x16_t)vsubq_f32(v46, vmulq_n_f32((float32x4_t)v32, *(float *)v28.i32));
          v49 = (int8x16_t)vsubq_f32(v47, vmulq_n_f32((float32x4_t)v33, *(float *)v28.i32));
          v48.i32[2] = 0.5;
          v49.i32[2] = 0.5;
          v50 = (float32x4_t)vextq_s8(v48, v48, 8uLL);
          v51 = (float32x4_t)vextq_s8(v49, v49, 8uLL);
          v52 = *((int *)a2 + 22);
          v53 = vsubq_f32(v50, v9);
          v54 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v55 = vaddq_s32(vcvtq_s32_f32(v53), vcltzq_f32(v53));
            v56 = (float32x2_t)vsubq_f32(v53, vcvtq_f32_s32(v55)).u64[0];
            v57 = (float32x4_t *)(v54 + 16 * (v55.i32[0] + v55.i32[1] * (int)v52));
            v58 = vaddq_f32(*v57, vmulq_n_f32(vsubq_f32(v57[1], *v57), v56.f32[0]));
            v59 = (int8x16_t)vaddq_f32(v58, vmulq_lane_f32(vsubq_f32(vaddq_f32(v57[v52], vmulq_n_f32(vsubq_f32(v57[(int)v52 + 1], v57[v52]), v56.f32[0])), v58), v56, 1));
            v60 = vsubq_f32(v51, v9);
            v61 = vaddq_s32(vcvtq_s32_f32(v60), vcltzq_f32(v60));
            v60.i64[0] = vsubq_f32(v60, vcvtq_f32_s32(v61)).u64[0];
            v62 = (float32x4_t *)(v54 + 16 * (v61.i32[0] + v61.i32[1] * (int)v52));
            v63 = vaddq_f32(*v62, vmulq_n_f32(vsubq_f32(v62[1], *v62), v60.f32[0]));
            v64 = (int8x16_t)vaddq_f32(v63, vmulq_lane_f32(vsubq_f32(vaddq_f32(v62[v52], vmulq_n_f32(vsubq_f32(v62[(int)v52 + 1], v62[v52]), v60.f32[0])), v63), *(float32x2_t *)v60.f32, 1));
          }
          else
          {
            v65 = vaddq_f32(v53, v13);
            v66 = vcvtq_s32_f32(v65);
            v65.i64[0] = vaddq_s32(v66, vcgtq_f32(vcvtq_f32_s32(v66), v65)).u64[0];
            v59 = *(int8x16_t *)(v54 + 16 * (v65.i32[0] + v65.i32[1] * (int)v52));
            v67 = vaddq_f32(vsubq_f32(v51, v9), v13);
            v68 = vcvtq_s32_f32(v67);
            v67.i64[0] = vaddq_s32(v68, vcgtq_f32(vcvtq_f32_s32(v68), v67)).u64[0];
            v64 = *(int8x16_t *)(v54 + 16 * (v67.i32[0] + v67.i32[1] * (int)v52));
          }
          v69 = *(float32x4_t *)(v19 + 96);
          v70 = (int8x16_t)vaddq_f32(v69, v26);
          v71 = (int8x16_t)vaddq_f32(v69, v27);
          v73 = *(int8x16_t *)(v19 + 240);
          v72 = *(int8x16_t *)(v19 + 256);
          v74.i64[0] = vbslq_s8(v73, v59, v70).u64[0];
          v75.i64[0] = vbslq_s8(v73, v64, v71).u64[0];
          v76 = *(float32x4_t *)(v19 + 64);
          v77 = *(float32x4_t *)(v19 + 80);
          v78 = (int8x16_t)vmulq_f32(v17, v76);
          v79 = (int8x16_t)vmulq_f32(v18, v76);
          v80 = vaddq_f32((float32x4_t)v78, (float32x4_t)vextq_s8(v78, v78, 4uLL));
          v81 = vaddq_f32((float32x4_t)v79, (float32x4_t)vextq_s8(v79, v79, 4uLL));
          v74.i64[1] = vaddq_f32(v80, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v80, 0)).i64[1];
          v75.i64[1] = vaddq_f32(v81, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v81, 0)).i64[1];
          v82 = (int8x16_t)vmulq_f32(v17, v77);
          v83 = (int8x16_t)vmulq_f32(v18, v77);
          v84 = (int8x16_t)vaddq_f32((float32x4_t)v82, (float32x4_t)vextq_s8(v82, v82, 4uLL));
          v85 = (int8x16_t)vaddq_f32((float32x4_t)v83, (float32x4_t)vextq_s8(v83, v83, 4uLL));
          v86 = vbslq_s8(v72, (int8x16_t)vaddq_f32((float32x4_t)v84, (float32x4_t)vextq_s8(v84, v84, 8uLL)), v74);
          v87 = vbslq_s8(v72, (int8x16_t)vaddq_f32((float32x4_t)v85, (float32x4_t)vextq_s8(v85, v85, 8uLL)), v75);
          v89 = *(float32x4_t *)(v19 + 272);
          v88 = *(int8x16_t *)(v19 + 288);
          v90 = vaddq_f32(v89, vmulq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s64(v86.i64[0], 0)));
          v91 = vaddq_f32(v89, vmulq_f32((float32x4_t)v88, (float32x4_t)vdupq_lane_s64(v87.i64[0], 0)));
          v92 = *(float32x4_t *)(v19 + 32);
          v93 = (int8x16_t)vmulq_f32(v17, v92);
          v94 = (int8x16_t)vmulq_f32(v18, v92);
          v95 = vaddq_f32((float32x4_t)v93, (float32x4_t)vextq_s8(v93, v93, 4uLL));
          v96 = vaddq_f32((float32x4_t)v94, (float32x4_t)vextq_s8(v94, v94, 4uLL));
          v95.i64[0] = vaddq_f32(v95, (float32x4_t)vdupq_laneq_s64((int64x2_t)v95, 1)).u64[0];
          v96.i64[0] = vaddq_f32(v96, (float32x4_t)vdupq_laneq_s64((int64x2_t)v96, 1)).u64[0];
          v95.i64[1] = vdupq_laneq_s64((int64x2_t)v90, 1).u64[0];
          v96.i64[1] = vdupq_laneq_s64((int64x2_t)v91, 1).u64[0];
          v97 = *(float32x4_t *)(v19 + 128);
          v98 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v95), vmulq_laneq_f32(v97, v90, 2));
          v99 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v96), vmulq_laneq_f32(v97, v91, 2));
          v100 = (float32x4_t)vbslq_s8(v73, v98, v86);
          v101 = (float32x4_t)vbslq_s8(v73, v99, v87);
          v102 = (float32x4_t)vandq_s8(*(int8x16_t *)(v19 + 176), v73);
          v103 = vaddq_f32(v102, v100);
          v104 = vaddq_f32(v102, v101);
          v106 = *(float32x4_t *)v19;
          v105 = *(float32x4_t *)(v19 + 16);
          v107 = (int8x16_t)vmulq_f32(v105, v103);
          v108 = (int8x16_t)vmulq_f32(v105, v104);
          v109 = (int8x16_t)vaddq_f32((float32x4_t)v107, (float32x4_t)vextq_s8(v107, v107, 4uLL));
          v110 = (int8x16_t)vaddq_f32((float32x4_t)v108, (float32x4_t)vextq_s8(v108, v108, 4uLL));
          v111 = (int8x16_t)vmulq_f32(*(float32x4_t *)v19, v103);
          v112 = (int8x16_t)vmulq_f32(*(float32x4_t *)v19, v104);
          v113 = (int8x16_t)vaddq_f32((float32x4_t)v111, (float32x4_t)vextq_s8(v111, v111, 4uLL));
          v114 = (int8x16_t)vaddq_f32((float32x4_t)v112, (float32x4_t)vextq_s8(v112, v112, 4uLL));
          v115 = (float32x4_t)vbslq_s8(v73, (int8x16_t)vaddq_f32((float32x4_t)v113, (float32x4_t)vextq_s8(v113, v113, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v109, (float32x4_t)vextq_s8(v109, v109, 8uLL)));
          v116 = (float32x4_t)vbslq_s8(v73, (int8x16_t)vaddq_f32((float32x4_t)v114, (float32x4_t)vextq_s8(v114, v114, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v110, (float32x4_t)vextq_s8(v110, v110, 8uLL)));
          v117 = *((int *)a2 + 26);
          v118 = vsubq_f32(v115, v9);
          v119 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v120 = vaddq_s32(vcvtq_s32_f32(v118), vcltzq_f32(v118));
            v121 = (float32x2_t)vsubq_f32(v118, vcvtq_f32_s32(v120)).u64[0];
            v122 = (float32x4_t *)(v119 + 16 * (v120.i32[0] + v120.i32[1] * (int)v117));
            v123 = vaddq_f32(*v122, vmulq_n_f32(vsubq_f32(v122[1], *v122), v121.f32[0]));
            v124 = (int8x16_t)vaddq_f32(v123, vmulq_lane_f32(vsubq_f32(vaddq_f32(v122[v117], vmulq_n_f32(vsubq_f32(v122[(int)v117 + 1], v122[v117]), v121.f32[0])), v123), v121, 1));
            v125 = vsubq_f32(v116, v9);
            v126 = vaddq_s32(vcvtq_s32_f32(v125), vcltzq_f32(v125));
            v125.i64[0] = vsubq_f32(v125, vcvtq_f32_s32(v126)).u64[0];
            v127 = (float32x4_t *)(v119 + 16 * (v126.i32[0] + v126.i32[1] * (int)v117));
            v128 = vaddq_f32(*v127, vmulq_n_f32(vsubq_f32(v127[1], *v127), v125.f32[0]));
            v129 = (int8x16_t)vaddq_f32(v128, vmulq_lane_f32(vsubq_f32(vaddq_f32(v127[v117], vmulq_n_f32(vsubq_f32(v127[(int)v117 + 1], v127[v117]), v125.f32[0])), v128), *(float32x2_t *)v125.f32, 1));
          }
          else
          {
            v130 = vaddq_f32(v118, v13);
            v131 = vcvtq_s32_f32(v130);
            v130.i64[0] = vaddq_s32(v131, vcgtq_f32(vcvtq_f32_s32(v131), v130)).u64[0];
            v124 = *(int8x16_t *)(v119 + 16 * (v130.i32[0] + v130.i32[1] * (int)v117));
            v132 = vaddq_f32(vsubq_f32(v116, v9), v13);
            v133 = vcvtq_s32_f32(v132);
            v132.i64[0] = vaddq_s32(v133, vcgtq_f32(vcvtq_f32_s32(v133), v132)).u64[0];
            v129 = *(int8x16_t *)(v119 + 16 * (v132.i32[0] + v132.i32[1] * (int)v117));
          }
          v134 = vmvnq_s8(v72);
          v135 = (int8x16_t)vmulq_f32(v105, v100);
          v136 = (int8x16_t)vmulq_f32(v105, v101);
          v137 = (int8x16_t)vaddq_f32((float32x4_t)v135, (float32x4_t)vextq_s8(v135, v135, 4uLL));
          v138 = (int8x16_t)vaddq_f32((float32x4_t)v136, (float32x4_t)vextq_s8(v136, v136, 4uLL));
          v139 = (int8x16_t)vmulq_f32(v106, v100);
          v140 = (int8x16_t)vmulq_f32(v106, v101);
          v141 = (int8x16_t)vaddq_f32((float32x4_t)v139, (float32x4_t)vextq_s8(v139, v139, 4uLL));
          v142 = (int8x16_t)vaddq_f32((float32x4_t)v140, (float32x4_t)vextq_s8(v140, v140, 4uLL));
          v143 = (float32x4_t)vextq_s8(v137, v141, 8uLL);
          v137.i64[1] = v141.i64[1];
          v144 = (int8x16_t)vaddq_f32((float32x4_t)v137, v143);
          v145 = (float32x4_t)vextq_s8(v138, v142, 8uLL);
          v138.i64[1] = v142.i64[1];
          v146 = (int8x16_t)vaddq_f32((float32x4_t)v138, v145);
          v147 = vorrq_s8(vandq_s8(vextq_s8(v144, v144, 4uLL), v72), vandq_s8(v144, v134));
          v148 = vorrq_s8(vandq_s8(vextq_s8(v146, v146, 4uLL), v72), vandq_s8(v146, v134));
          v149 = (float32x4_t)vextq_s8(v148, v148, 8uLL);
          v150 = vsubq_f32((float32x4_t)vextq_s8(v147, v147, 8uLL), v9);
          if (v5)
          {
            v151 = vaddq_s32(vcvtq_s32_f32(v150), vcltzq_f32(v150));
            v152 = (float32x2_t)vsubq_f32(v150, vcvtq_f32_s32(v151)).u64[0];
            v153 = (float32x4_t *)(v119 + 16 * (v151.i32[0] + v151.i32[1] * (int)v117));
            v154 = vaddq_f32(*v153, vmulq_n_f32(vsubq_f32(v153[1], *v153), v152.f32[0]));
            v155 = (int8x16_t)vaddq_f32(v154, vmulq_lane_f32(vsubq_f32(vaddq_f32(v153[v117], vmulq_n_f32(vsubq_f32(v153[(int)v117 + 1], v153[v117]), v152.f32[0])), v154), v152, 1));
            v156 = vsubq_f32(v149, v9);
            v157 = vaddq_s32(vcvtq_s32_f32(v156), vcltzq_f32(v156));
            v156.i64[0] = vsubq_f32(v156, vcvtq_f32_s32(v157)).u64[0];
            v158 = (float32x4_t *)(v119 + 16 * (v157.i32[0] + v157.i32[1] * (int)v117));
            v159 = vaddq_f32(*v158, vmulq_n_f32(vsubq_f32(v158[1], *v158), v156.f32[0]));
            v160 = (int8x16_t)vaddq_f32(v159, vmulq_lane_f32(vsubq_f32(vaddq_f32(v158[v117], vmulq_n_f32(vsubq_f32(v158[(int)v117 + 1], v158[v117]), v156.f32[0])), v159), *(float32x2_t *)v156.f32, 1));
          }
          else
          {
            v161 = vaddq_f32(v150, v13);
            v162 = vcvtq_s32_f32(v161);
            v161.i64[0] = vaddq_s32(v162, vcgtq_f32(vcvtq_f32_s32(v162), v161)).u64[0];
            v155 = *(int8x16_t *)(v119 + 16 * (v161.i32[0] + v161.i32[1] * (int)v117));
            v163 = vaddq_f32(vsubq_f32(v149, v9), v13);
            v164 = vcvtq_s32_f32(v163);
            v163.i64[0] = vaddq_s32(v164, vcgtq_f32(vcvtq_f32_s32(v164), v163)).u64[0];
            v160 = *(int8x16_t *)(v119 + 16 * (v163.i32[0] + v163.i32[1] * (int)v117));
          }
          v165 = vsubq_f32(v100, v102);
          v166 = vsubq_f32(v101, v102);
          v167 = (int8x16_t)vmulq_f32(v106, v165);
          v168 = (int8x16_t)vmulq_f32(v106, v166);
          v169 = (int8x16_t)vaddq_f32((float32x4_t)v167, (float32x4_t)vextq_s8(v167, v167, 4uLL));
          v170 = (int8x16_t)vaddq_f32((float32x4_t)v168, (float32x4_t)vextq_s8(v168, v168, 4uLL));
          v171 = (int8x16_t)vmulq_f32(v105, v165);
          v172 = (int8x16_t)vmulq_f32(v105, v166);
          v173 = (int8x16_t)vaddq_f32((float32x4_t)v171, (float32x4_t)vextq_s8(v171, v171, 4uLL));
          v174 = (int8x16_t)vaddq_f32((float32x4_t)v172, (float32x4_t)vextq_s8(v172, v172, 4uLL));
          v175 = (float32x4_t)vbslq_s8(v73, (int8x16_t)vaddq_f32((float32x4_t)v169, (float32x4_t)vextq_s8(v169, v169, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v173, (float32x4_t)vextq_s8(v173, v173, 8uLL)));
          v176 = (float32x4_t)vbslq_s8(v73, (int8x16_t)vaddq_f32((float32x4_t)v170, (float32x4_t)vextq_s8(v170, v170, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v174, (float32x4_t)vextq_s8(v174, v174, 8uLL)));
          v177 = vsubq_f32(v175, v9);
          if (v5)
          {
            v178 = vaddq_s32(vcvtq_s32_f32(v177), vcltzq_f32(v177));
            v179 = (float32x2_t)vsubq_f32(v177, vcvtq_f32_s32(v178)).u64[0];
            v180 = (float32x4_t *)(v119 + 16 * (v178.i32[0] + v178.i32[1] * (int)v117));
            v181 = vaddq_f32(*v180, vmulq_n_f32(vsubq_f32(v180[1], *v180), v179.f32[0]));
            v182 = (int8x16_t)vaddq_f32(v181, vmulq_lane_f32(vsubq_f32(vaddq_f32(v180[v117], vmulq_n_f32(vsubq_f32(v180[(int)v117 + 1], v180[v117]), v179.f32[0])), v181), v179, 1));
            v183 = vsubq_f32(v176, v9);
            v184 = vaddq_s32(vcvtq_s32_f32(v183), vcltzq_f32(v183));
            v183.i64[0] = vsubq_f32(v183, vcvtq_f32_s32(v184)).u64[0];
            v185 = (float32x4_t *)(v119 + 16 * (v184.i32[0] + v184.i32[1] * (int)v117));
            v186 = vaddq_f32(*v185, vmulq_n_f32(vsubq_f32(v185[1], *v185), v183.f32[0]));
            v187 = (int8x16_t)vaddq_f32(v186, vmulq_lane_f32(vsubq_f32(vaddq_f32(v185[v117], vmulq_n_f32(vsubq_f32(v185[(int)v117 + 1], v185[v117]), v183.f32[0])), v186), *(float32x2_t *)v183.f32, 1));
          }
          else
          {
            v188 = vaddq_f32(v177, v13);
            v189 = vcvtq_s32_f32(v188);
            v188.i64[0] = vaddq_s32(v189, vcgtq_f32(vcvtq_f32_s32(v189), v188)).u64[0];
            v182 = *(int8x16_t *)(v119 + 16 * (v188.i32[0] + v188.i32[1] * (int)v117));
            v190 = vaddq_f32(vsubq_f32(v176, v9), v13);
            v191 = vcvtq_s32_f32(v190);
            v190.i64[0] = vaddq_s32(v191, vcgtq_f32(vcvtq_f32_s32(v191), v190)).u64[0];
            v187 = *(int8x16_t *)(v119 + 16 * (v190.i32[0] + v190.i32[1] * (int)v117));
          }
          v192 = vmvnq_s8(v73);
          v193 = vorrq_s8(vandq_s8(v160, v192), vandq_s8(v73, v129));
          v194 = *(int8x16_t *)(v19 + 160);
          v195 = vbslq_s8(*(int8x16_t *)(v19 + 304), v182, vorrq_s8(vandq_s8(v155, v192), vandq_s8(v73, v124)));
          v196 = vbslq_s8(*(int8x16_t *)(v19 + 304), v187, v193);
          v197 = (float32x4_t)vrev64q_s32((int32x4_t)vmulq_n_f32((float32x4_t)v194, *(float *)v147.i32));
          v198 = (float32x4_t)vrev64q_s32((int32x4_t)vmulq_n_f32((float32x4_t)v194, *(float *)v148.i32));
          v199 = vcvtq_f32_s32(vcvtq_s32_f32(v197));
          v200 = vcvtq_f32_s32(vcvtq_s32_f32(v198));
          v201 = (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32(vmulq_laneq_f32(vsubq_f32(v197, vsubq_f32(v199, (float32x4_t)vandq_s8(v88, (int8x16_t)vcgtq_f32(v199, v197)))), (float32x4_t)v194, 2), (float32x4_t)v194), v89), (float32x4_t)v88);
          v202 = (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32(vmulq_laneq_f32(vsubq_f32(v198, vsubq_f32(v200, (float32x4_t)vandq_s8(v88, (int8x16_t)vcgtq_f32(v200, v198)))), (float32x4_t)v194, 2), (float32x4_t)v194), v89), (float32x4_t)v88);
          v203 = vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v201), (float32x4_t)v201)), v192);
          v204 = (float32x4_t)vorrq_s8(v203, vandq_s8(v73, v201));
          v205 = vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v202), (float32x4_t)v202)), v192);
          v206 = (float32x4_t)vorrq_s8(v205, vandq_s8(v73, v202));
          v207 = *(float32x4_t *)(v19 + 192);
          v208 = (int8x16_t)vmulq_f32(v207, (float32x4_t)v195);
          v209 = (int8x16_t)vmulq_f32(v207, (float32x4_t)v196);
          v210 = vaddq_f32((float32x4_t)v208, (float32x4_t)vextq_s8(v208, v208, 4uLL));
          v211 = vaddq_f32((float32x4_t)v209, (float32x4_t)vextq_s8(v209, v209, 4uLL));
          v212 = vandq_s8(v73, (int8x16_t)vmulq_f32(v204, v204));
          v213 = vandq_s8(v73, (int8x16_t)vmulq_f32(v206, v206));
          v214 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_f32(v89, (float32x4_t)vorrq_s8(v212, v203)), v192), v212);
          v215 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_f32(v89, (float32x4_t)vorrq_s8(v213, v205)), v192), v213);
          v216 = (int8x16_t)vsubq_f32((float32x4_t)v88, (float32x4_t)v194);
          v217 = (float32x4_t)vextq_s8(v216, v216, 0xCuLL);
          v218 = (float32x4_t)vextq_s8(v194, v194, 0xCuLL);
          LODWORD(v219) = vaddq_f32(v218, vmulq_f32(v217, vmulq_lane_f32(v214, *(float32x2_t *)v214.f32, 1))).u32[0];
          v215.i32[0] = vaddq_f32(v218, vmulq_f32(v217, vmulq_lane_f32(v215, *(float32x2_t *)v215.f32, 1))).u32[0];
          v220 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v210, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v210.f32, 1)), 3);
          v221 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v211, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v211.f32, 1)), 3);
          v222 = *(float32x4_t *)(v19 + 112);
          v223 = (int8x16_t *)(v11 + 16 * v15);
          *v223 = vorrq_s8(vandq_s8((int8x16_t)vmulq_n_f32(vaddq_f32(v220, vmulq_f32(v222, vsubq_f32((float32x4_t)v195, v220))), v219), v134), vandq_s8(v195, v72));
          v223[1] = vorrq_s8(vandq_s8((int8x16_t)vmulq_n_f32(vaddq_f32(v221, vmulq_f32(v222, vsubq_f32((float32x4_t)v196, v221))), v215.f32[0]), v134), vandq_s8(v196, v72));
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v224 = *((_QWORD *)this + 51);
        v225 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v224 + 48));
        v226 = (int8x16_t)vaddq_f32((float32x4_t)v225, (float32x4_t)vextq_s8(v225, v225, 4uLL));
        v227 = (float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)v226, (float32x4_t)vextq_s8(v226, v226, 8uLL)));
        v228 = *(int8x16_t *)(v224 + 144);
        v229 = *(int8x16_t *)(v224 + 208);
        v230 = *(float32x4_t *)(v224 + 224);
        v231 = (int8x16_t)vaddq_f32(vmulq_n_f32((float32x4_t)v229, *(float *)v228.i32), v227);
        v232 = (float32x4_t)vextq_s8(v228, v228, 8uLL);
        v233 = vminq_f32(vmaxq_f32(vrecpeq_f32(v232), (float32x4_t)v229), v230);
        v234 = vminq_f32(vmaxq_f32(vmulq_f32(v233, vrecpsq_f32(v232, v233)), (float32x4_t)v229), v230);
        v234.i64[0] = vdupq_laneq_s64((int64x2_t)vmulq_lane_f32(vmulq_f32(v234, vrecpsq_f32(v232, v234)), *(float32x2_t *)v231.i8, 1), 1).u64[0];
        v232.i64[0] = v231.i64[0];
        v232.i64[1] = v234.i64[0];
        v235 = (float32x4_t)vrev64q_s32((int32x4_t)v232);
        v236 = vcvtq_f32_s32(vcvtq_s32_f32(v235));
        v237 = (int8x16_t)vsubq_f32(v236, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v236, v235), v229, (int8x16_t)0));
        v238 = (float32x4_t)vextq_s8(v237, v231, 8uLL);
        v231.i32[3] = v237.i32[3];
        v239 = (int8x16_t)vsubq_f32(v238, vmulq_n_f32((float32x4_t)v231, *(float *)v228.i32));
        v239.i32[2] = 0.5;
        v240 = *((int *)a2 + 22);
        v241 = vsubq_f32((float32x4_t)vextq_s8(v239, v239, 8uLL), v9);
        v242 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v243 = vaddq_s32(vcvtq_s32_f32(v241), vcltzq_f32(v241));
          v244 = (float32x2_t)vsubq_f32(v241, vcvtq_f32_s32(v243)).u64[0];
          v245 = (float32x4_t *)(v242 + 16 * (v243.i32[0] + v243.i32[1] * (int)v240));
          v246 = vaddq_f32(*v245, vmulq_n_f32(vsubq_f32(v245[1], *v245), v244.f32[0]));
          v247 = (int8x16_t)vaddq_f32(v246, vmulq_lane_f32(vsubq_f32(vaddq_f32(v245[v240], vmulq_n_f32(vsubq_f32(v245[(int)v240 + 1], v245[v240]), v244.f32[0])), v246), v244, 1));
        }
        else
        {
          v248 = vaddq_f32(v241, v13);
          v249 = vcvtq_s32_f32(v248);
          v248.i64[0] = vaddq_s32(v249, vcgtq_f32(vcvtq_f32_s32(v249), v248)).u64[0];
          v247 = *(int8x16_t *)(v242 + 16 * (v248.i32[0] + v248.i32[1] * (int)v240));
        }
        v250 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v224 + 96), v227);
        v251 = *(int8x16_t *)(v224 + 240);
        v252 = *(int8x16_t *)(v224 + 256);
        v250.i64[0] = vbslq_s8(v251, v247, v250).u64[0];
        v253 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v224 + 64));
        v254 = vaddq_f32((float32x4_t)v253, (float32x4_t)vextq_s8(v253, v253, 4uLL));
        v250.i64[1] = vaddq_f32(v254, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v254, 0)).i64[1];
        v255 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v224 + 80));
        v256 = (int8x16_t)vaddq_f32((float32x4_t)v255, (float32x4_t)vextq_s8(v255, v255, 4uLL));
        v257 = (int8x16_t)vaddq_f32((float32x4_t)v256, (float32x4_t)vextq_s8(v256, v256, 8uLL));
        v258 = vmvnq_s8(v252);
        v259 = vbslq_s8(v252, v257, v250);
        v261 = *(float32x4_t *)(v224 + 272);
        v260 = *(int8x16_t *)(v224 + 288);
        v262 = vaddq_f32(v261, vmulq_f32((float32x4_t)v260, (float32x4_t)vdupq_lane_s64(v259.i64[0], 0)));
        v263 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v224 + 32));
        v264 = vaddq_f32((float32x4_t)v263, (float32x4_t)vextq_s8(v263, v263, 4uLL));
        v264.i64[0] = vaddq_f32(v264, (float32x4_t)vdupq_laneq_s64((int64x2_t)v264, 1)).u64[0];
        v264.i64[1] = vdupq_laneq_s64((int64x2_t)v262, 1).u64[0];
        v265 = (float32x4_t)vbslq_s8(v251, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v264), vmulq_laneq_f32(*(float32x4_t *)(v224 + 128), v262, 2)), v259);
        v266 = (float32x4_t)vandq_s8(*(int8x16_t *)(v224 + 176), v251);
        v267 = vaddq_f32(v266, v265);
        v268 = *(float32x4_t *)(v224 + 16);
        v269 = (int8x16_t)vmulq_f32(v268, v267);
        v270 = (int8x16_t)vaddq_f32((float32x4_t)v269, (float32x4_t)vextq_s8(v269, v269, 4uLL));
        v271 = (int8x16_t)vmulq_f32(*(float32x4_t *)v224, v267);
        v272 = (int8x16_t)vaddq_f32((float32x4_t)v271, (float32x4_t)vextq_s8(v271, v271, 4uLL));
        v273 = (float32x4_t)vbslq_s8(v251, (int8x16_t)vaddq_f32((float32x4_t)v272, (float32x4_t)vextq_s8(v272, v272, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v270, (float32x4_t)vextq_s8(v270, v270, 8uLL)));
        v274 = (int8x16_t)vmulq_f32(v268, v265);
        v275 = (int8x16_t)vaddq_f32((float32x4_t)v274, (float32x4_t)vextq_s8(v274, v274, 4uLL));
        v276 = (int8x16_t)vmulq_f32(*(float32x4_t *)v224, v265);
        v277 = (int8x16_t)vaddq_f32((float32x4_t)v276, (float32x4_t)vextq_s8(v276, v276, 4uLL));
        v278 = (float32x4_t)vextq_s8(v275, v277, 8uLL);
        v275.i64[1] = v277.i64[1];
        v279 = (int8x16_t)vaddq_f32((float32x4_t)v275, v278);
        v280 = *((int *)a2 + 26);
        v281 = vsubq_f32(v273, v9);
        v282 = *((_QWORD *)a2 + 12);
        if (v5)
        {
          v283 = vaddq_s32(vcvtq_s32_f32(v281), vcltzq_f32(v281));
          v284 = (float32x2_t)vsubq_f32(v281, vcvtq_f32_s32(v283)).u64[0];
          v285 = (float32x4_t *)(v282 + 16 * (v283.i32[0] + v283.i32[1] * (int)v280));
          v286 = vaddq_f32(*v285, vmulq_n_f32(vsubq_f32(v285[1], *v285), v284.f32[0]));
          v287 = (int8x16_t)vaddq_f32(v286, vmulq_lane_f32(vsubq_f32(vaddq_f32(v285[v280], vmulq_n_f32(vsubq_f32(v285[(int)v280 + 1], v285[v280]), v284.f32[0])), v286), v284, 1));
          v288 = vorrq_s8(vandq_s8(vextq_s8(v279, v279, 4uLL), v252), vandq_s8(v279, v258));
          v289 = vsubq_f32((float32x4_t)vextq_s8(v288, v288, 8uLL), v9);
          v290 = vaddq_s32(vcvtq_s32_f32(v289), vcltzq_f32(v289));
          v289.i64[0] = vsubq_f32(v289, vcvtq_f32_s32(v290)).u64[0];
          v291 = (float32x4_t *)(v282 + 16 * (v290.i32[0] + v290.i32[1] * (int)v280));
          v292 = vaddq_f32(*v291, vmulq_n_f32(vsubq_f32(v291[1], *v291), v289.f32[0]));
          v293 = (int8x16_t)vaddq_f32(v292, vmulq_lane_f32(vsubq_f32(vaddq_f32(v291[v280], vmulq_n_f32(vsubq_f32(v291[(int)v280 + 1], v291[v280]), v289.f32[0])), v292), *(float32x2_t *)v289.f32, 1));
        }
        else
        {
          v294 = vaddq_f32(v281, v13);
          v295 = vcvtq_s32_f32(v294);
          v294.i64[0] = vaddq_s32(v295, vcgtq_f32(vcvtq_f32_s32(v295), v294)).u64[0];
          v287 = *(int8x16_t *)(v282 + 16 * (v294.i32[0] + v294.i32[1] * (int)v280));
          v288 = vorrq_s8(vandq_s8(vextq_s8(v279, v279, 4uLL), v252), vandq_s8(v279, v258));
          v296 = vaddq_f32(vsubq_f32((float32x4_t)vextq_s8(v288, v288, 8uLL), v9), v13);
          v297 = vcvtq_s32_f32(v296);
          v296.i64[0] = vaddq_s32(v297, vcgtq_f32(vcvtq_f32_s32(v297), v296)).u64[0];
          v293 = *(int8x16_t *)(v282 + 16 * (v296.i32[0] + v296.i32[1] * (int)v280));
        }
        v298 = vsubq_f32(v265, v266);
        v299 = (int8x16_t)vmulq_f32(*(float32x4_t *)v224, v298);
        v300 = (int8x16_t)vaddq_f32((float32x4_t)v299, (float32x4_t)vextq_s8(v299, v299, 4uLL));
        v301 = (int8x16_t)vmulq_f32(v268, v298);
        v302 = (int8x16_t)vaddq_f32((float32x4_t)v301, (float32x4_t)vextq_s8(v301, v301, 4uLL));
        v303 = vsubq_f32((float32x4_t)vbslq_s8(v251, (int8x16_t)vaddq_f32((float32x4_t)v300, (float32x4_t)vextq_s8(v300, v300, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v302, (float32x4_t)vextq_s8(v302, v302, 8uLL))), v9);
        if (v5)
        {
          v304 = vaddq_s32(vcvtq_s32_f32(v303), vcltzq_f32(v303));
          v305 = (float32x2_t)vsubq_f32(v303, vcvtq_f32_s32(v304)).u64[0];
          v306 = (float32x4_t *)(v282 + 16 * (v304.i32[0] + v304.i32[1] * (int)v280));
          v307 = vaddq_f32(*v306, vmulq_n_f32(vsubq_f32(v306[1], *v306), v305.f32[0]));
          v308 = (int8x16_t)vaddq_f32(v307, vmulq_lane_f32(vsubq_f32(vaddq_f32(v306[v280], vmulq_n_f32(vsubq_f32(v306[(int)v280 + 1], v306[v280]), v305.f32[0])), v307), v305, 1));
        }
        else
        {
          v309 = vaddq_f32(v303, v13);
          v310 = vcvtq_s32_f32(v309);
          v309.i64[0] = vaddq_s32(v310, vcgtq_f32(vcvtq_f32_s32(v310), v309)).u64[0];
          v308 = *(int8x16_t *)(v282 + 16 * (v309.i32[0] + v309.i32[1] * (int)v280));
        }
        v311 = vmvnq_s8(v251);
        v312 = *(float32x4_t *)(v224 + 160);
        v313 = vbslq_s8(*(int8x16_t *)(v224 + 304), v308, vorrq_s8(vandq_s8(v293, v311), vandq_s8(v251, v287)));
        v314 = (float32x4_t)vrev64q_s32((int32x4_t)vmulq_n_f32(v312, *(float *)v288.i32));
        v315 = vcvtq_f32_s32(vcvtq_s32_f32(v314));
        v316 = (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32(vmulq_laneq_f32(vsubq_f32(v314, vsubq_f32(v315, (float32x4_t)vandq_s8(v260, (int8x16_t)vcgtq_f32(v315, v314)))), v312, 2), v312), v261), (float32x4_t)v260);
        v317 = vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v316), (float32x4_t)v316)), v311);
        v318 = (float32x4_t)vorrq_s8(v317, vandq_s8(v251, v316));
        v319 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v224 + 192), (float32x4_t)v313);
        v320 = vaddq_f32((float32x4_t)v319, (float32x4_t)vextq_s8(v319, v319, 4uLL));
        v321 = vandq_s8(v251, (int8x16_t)vmulq_f32(v318, v318));
        v322 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vaddq_f32(v261, (float32x4_t)vorrq_s8(v321, v317)), v311), v321);
        v322.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v312, 3), vmulq_laneq_f32(vmulq_lane_f32(v322, *(float32x2_t *)v322.f32, 1), vsubq_f32((float32x4_t)v260, v312), 3)).u32[0];
        v323 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v320, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 1)), 3);
        *(int8x16_t *)(v11 + 16 * v15) = vorrq_s8(vandq_s8((int8x16_t)vmulq_n_f32(vaddq_f32(v323, vmulq_f32(*(float32x4_t *)(v224 + 112), vsubq_f32((float32x4_t)v313, v323))), v322.f32[0]), v258), vandq_s8(v313, v252));
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcBadTV::GetDOD(HgcBadTV *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    if ((*(int (**)(HgcBadTV *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) < 1)
      goto LABEL_7;
LABEL_6:
    v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    HGRectGrow(v5, v4, v6);
    goto LABEL_7;
  }
  if (a3)
  {
    v7 = &HGRectNull;
    return *(_QWORD *)v7;
  }
  if ((*(int (**)(HgcBadTV *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) > 0)
    goto LABEL_6;
LABEL_7:
  v7 = &HGRectInfinite;
  return *(_QWORD *)v7;
}

uint64_t HgcBadTV::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 > 1)
    return 0;
  Input = HGRenderer::GetInput(a2, this, a3);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcBadTV::HgcBadTV(HgcBadTV *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E8B80;
  v3 = operator new();
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = xmmword_1B3051D70;
  *(int32x4_t *)(v3 + 224) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 240) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 256) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 272) = xmmword_1B3051D80;
  *(_OWORD *)(v3 + 288) = xmmword_1B3051D90;
  *(_OWORD *)(v3 + 304) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcBadTV *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  (*(void (**)(HgcBadTV *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B288170C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBadTV::~HgcBadTV(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E8B80;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C400F47AF14);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBadTV::~HgcBadTV(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBadTV::SetParameter(HgcBadTV *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  __n128 *v14;
  __n128 *v15;
  int32x4_t v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_70;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_70;
    case 2:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 320) = a3;
      return v8;
    case 3:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 336) = a3;
      return v8;
    case 4:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_70;
    case 5:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_70;
    case 6:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_70;
    case 7:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_70;
    case 8:
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[6].n128_f32[0] == 0.0
        && v14[6].n128_f32[1] == a3.n128_f32[0]
        && v14[6].n128_f32[2] == 0.0
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u32[0] = 0;
      v14[6].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v14[6].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[22] = a3;
      goto LABEL_70;
    case 9:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[7].n128_f32[0] == a3.n128_f32[0]
        && v15[7].n128_f32[1] == a3.n128_f32[0]
        && v15[7].n128_f32[2] == a3.n128_f32[0]
        && v15[7].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v16 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v16.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v15[7] = (__n128)v16;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[23] = a3;
      goto LABEL_70;
    case 10:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[32] == a3.n128_f32[0] && v17[33] == a4 && v17[34] == a5 && v17[35] == a6)
        return 0;
      v17[32] = a3.n128_f32[0];
      v17[33] = a4;
      v17[34] = a5;
      v17[35] = a6;
      goto LABEL_70;
    case 11:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[36] == a3.n128_f32[0] && v18[37] == a4 && v18[38] == a5 && v18[39] == a6)
        return 0;
      v18[36] = a3.n128_f32[0];
      v18[37] = a4;
      v18[38] = a5;
      v18[39] = a6;
      goto LABEL_70;
    case 12:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[40] == a3.n128_f32[0] && v19[41] == a4 && v19[42] == a5 && v19[43] == a6)
        return 0;
      v19[40] = a3.n128_f32[0];
      v19[41] = a4;
      v19[42] = a5;
      v19[43] = a6;
      goto LABEL_70;
    case 13:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[44] == a3.n128_f32[0] && v20[45] == a4 && v20[46] == a5 && v20[47] == a6)
        return 0;
      v20[44] = a3.n128_f32[0];
      v20[45] = a4;
      v20[46] = a5;
      v20[47] = a6;
      goto LABEL_70;
    case 14:
      v21 = (float *)*((_QWORD *)this + 51);
      if (v21[48] == a3.n128_f32[0] && v21[49] == a4 && v21[50] == a5 && v21[51] == a6)
        return 0;
      v21[48] = a3.n128_f32[0];
      v21[49] = a4;
      v21[50] = a5;
      v21[51] = a6;
LABEL_70:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcBadTV::GetParameter(HgcBadTV *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_17;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_17;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[80];
      a3[1] = v6[81];
      a3[2] = v6[82];
      v4 = v6 + 83;
      goto LABEL_17;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[84];
      a3[1] = v7[85];
      a3[2] = v7[86];
      v4 = v7 + 87;
      goto LABEL_17;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[8];
      a3[1] = v8[9];
      a3[2] = v8[10];
      v4 = v8 + 11;
      goto LABEL_17;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[12];
      a3[1] = v9[13];
      a3[2] = v9[14];
      v4 = v9 + 15;
      goto LABEL_17;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[16];
      a3[1] = v10[17];
      a3[2] = v10[18];
      v4 = v10 + 19;
      goto LABEL_17;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[20];
      a3[1] = v11[21];
      a3[2] = v11[22];
      v4 = v11 + 23;
      goto LABEL_17;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[88];
      a3[1] = v12[89];
      a3[2] = v12[90];
      v4 = v12 + 91;
      goto LABEL_17;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[92];
      a3[1] = v13[93];
      a3[2] = v13[94];
      v4 = v13 + 95;
      goto LABEL_17;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[32];
      a3[1] = v14[33];
      a3[2] = v14[34];
      v4 = v14 + 35;
      goto LABEL_17;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[36];
      a3[1] = v15[37];
      a3[2] = v15[38];
      v4 = v15 + 39;
      goto LABEL_17;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[40];
      a3[1] = v16[41];
      a3[2] = v16[42];
      v4 = v16 + 43;
      goto LABEL_17;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[44];
      a3[1] = v17[45];
      a3[2] = v17[46];
      v4 = v17 + 47;
      goto LABEL_17;
    case 14:
      v18 = (float *)*((_QWORD *)this + 51);
      *a3 = v18[48];
      a3[1] = v18[49];
      a3[2] = v18[50];
      v4 = v18 + 51;
LABEL_17:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcBadFilmGrain::GetProgram(HgcBadFilmGrain *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000057c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2.xyz = (half3) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).xyz;\n"
             "    r1.xyz = r2.xyz*c0.xxx + r1.xyz;\n"
             "    r2 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.w = -r2.w + c0.y;\n"
             "    r1.xyz = r1.xyz - c0.yyy;\n"
             "    r1.xyz = r2.www*r1.xyz + r2.xyz;\n"
             "    r1.w = r0.w;\n"
             "    r2.w = c0.y;\n"
             "    r2.xyz = half3(hg_Params[0].xyz);\n"
             "    r2 = r1*r2;\n"
             "    r2.w = dot(r2, half4(hg_Params[2]));\n"
             "    r2.xyz = mix(r2.www, r2.xyz, half3(hg_Params[1].xyz));\n"
             "    output.color0.xyz = float3(r0.www)*float3(r2.xyz);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b7f95722:d7eb99b3:dc5bc7d2:bb9c022f\n"
             "//SIG=00400000:00000007:00000007:00000007:0001:0003:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000053e\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2.xyz = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).xyz;\n"
             "    r1.xyz = r2.xyz*c0.xxx + r1.xyz;\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.w = -r2.w + c0.y;\n"
             "    r1.xyz = r1.xyz - c0.yyy;\n"
             "    r1.xyz = r2.www*r1.xyz + r2.xyz;\n"
             "    r1.w = r0.w;\n"
             "    r2.w = c0.y;\n"
             "    r2.xyz = hg_Params[0].xyz;\n"
             "    r2 = r1*r2;\n"
             "    r2.w = dot(r2, hg_Params[2]);\n"
             "    r2.xyz = mix(r2.www, r2.xyz, hg_Params[1].xyz);\n"
             "    output.color0.xyz = r0.www*r2.xyz;\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=dfb87f00:b205b4a3:c2e2b10f:0e279a93\n"
             "//SIG=00000000:00000007:00000007:00000000:0001:0003:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000519\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(2.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2.xyz = texture2D(hg_Texture2, hg_TexCoord2.xy).xyz;\n"
           "    r1.xyz = r2.xyz*c0.xxx + r1.xyz;\n"
           "    r2 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2.w = -r2.w + c0.y;\n"
           "    r1.xyz = r1.xyz - c0.yyy;\n"
           "    r1.xyz = r2.www*r1.xyz + r2.xyz;\n"
           "    r1.w = r0.w;\n"
           "    r2.w = c0.y;\n"
           "    r2.xyz = hg_ProgramLocal0.xyz;\n"
           "    r2 = r1*r2;\n"
           "    r2.w = dot(r2, hg_ProgramLocal2);\n"
           "    r2.xyz = mix(r2.www, r2.xyz, hg_ProgramLocal1.xyz);\n"
           "    gl_FragColor.xyz = r0.www*r2.xyz;\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=8133aa43:73a39584:bedabd76:ccf31031\n"
           "//SIG=00000000:00000007:00000007:00000000:0001:0003:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcBadFilmGrain::InitProgramDescriptor(HgcBadFilmGrain *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBadFilmGrain_hgc_visible", "//Metal1.0     \n//LEN=0000000321\n[[ visible ]] FragmentOut HgcBadFilmGrain_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2)\n{\n    const float4 c0 = float4(2.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2.xyz = color2.xyz;\n"
    "    r1.xyz = r2.xyz*c0.xxx + r1.xyz;\n"
    "    r2 = color1;\n"
    "    r2.w = -r2.w + c0.y;\n"
    "    r1.xyz = r1.xyz - c0.yyy;\n"
    "    r1.xyz = r2.www*r1.xyz + r2.xyz;\n"
    "    r1.w = r0.w;\n"
    "    r2.w = c0.y;\n"
    "    r2.xyz = hg_Params[0].xyz;\n"
    "    r2 = r1*r2;\n"
    "    r2.w = dot(r2, hg_Params[2]);\n"
    "    r2.xyz = mix(r2.www, r2.xyz, hg_Params[1].xyz);\n"
    "    output.color0.xyz = r0.www*r2.xyz;\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2881E94()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBadFilmGrain");
}

void sub_1B2881EA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2882024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2882074()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B288206CLL);
}

_QWORD *HgcBadFilmGrain::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBadFilmGrain [hgc1]");
}

uint64_t HgcBadFilmGrain::BindTexture(HgcBadFilmGrain *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 2)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 2;
  }
  else if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcBadFilmGrain::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcBadFilmGrain::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t *v67;
  uint64_t v68;
  float32x4_t v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(int *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 96);
    v8 = *(_QWORD *)(a2 + 112);
    v9 = 16 * *(int *)(a2 + 120);
    v10 = 16 * *(int *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 80);
    v12 = 16 * *(int *)(a2 + 104);
    v13 = 16 * v5;
    do
    {
      if (v4 < 4)
      {
        LODWORD(v68) = 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = *(float32x4_t *)(v11 + v14);
          v17 = *(float32x4_t *)(v11 + v14 + 16);
          v18 = *(float32x4_t *)(v11 + v14 + 32);
          v19 = *(float32x4_t *)(v11 + v14 + 48);
          v20 = *(_QWORD *)(a1 + 408);
          v22 = *(float32x4_t *)(v20 + 32);
          v21 = *(float32x4_t *)(v20 + 48);
          v23 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v21);
          v24 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 3), v21);
          v25 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 3), v21);
          v26 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 3), v21);
          v27 = *(float32x4_t *)(v20 + 64);
          v28 = *(float32x4_t *)(v20 + 80);
          v29 = vmulq_f32(vrecpeq_f32(v23), v27);
          v30 = vmulq_f32(vrecpeq_f32(v24), v27);
          v31 = vmulq_f32(vrecpeq_f32(v25), v27);
          v32 = vmulq_f32(vrecpeq_f32(v26), v27);
          v33 = vaddq_f32(vmulq_f32(v16, vmulq_f32(v29, vrecpsq_f32(v29, v23))), vmulq_laneq_f32(*(float32x4_t *)(v8 + v14), v28, 2));
          v34 = vaddq_f32(vmulq_f32(v17, vmulq_f32(v30, vrecpsq_f32(v30, v24))), vmulq_laneq_f32(*(float32x4_t *)(v8 + v14 + 16), v28, 2));
          v35 = vaddq_f32(vmulq_f32(v18, vmulq_f32(v31, vrecpsq_f32(v31, v25))), vmulq_laneq_f32(*(float32x4_t *)(v8 + v14 + 32), v28, 2));
          v36 = vaddq_f32(vmulq_f32(v19, vmulq_f32(v32, vrecpsq_f32(v32, v26))), vmulq_laneq_f32(*(float32x4_t *)(v8 + v14 + 48), v28, 2));
          v37 = *(int8x16_t *)(v20 + 96);
          v38 = *(float32x4_t *)(v20 + 112);
          v39 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vsubq_f32(v28, *(float32x4_t *)(v7 + v14)), *(int8x16_t *)(v7 + v14));
          v40 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vsubq_f32(v28, *(float32x4_t *)(v7 + v14 + 16)), *(int8x16_t *)(v7 + v14 + 16));
          v41 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vsubq_f32(v28, *(float32x4_t *)(v7 + v14 + 32)), *(int8x16_t *)(v7 + v14 + 32));
          v42 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vsubq_f32(v28, *(float32x4_t *)(v7 + v14 + 48)), *(int8x16_t *)(v7 + v14 + 48));
          v43 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32(v36, v38), v42, 3), v42);
          v44 = (float32x4_t)vbslq_s8(v37, (int8x16_t)v16, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32(v33, v38), v39, 3), v39));
          v45 = *(float32x4_t *)(v20 + 16);
          v46 = (float32x4_t)vbslq_s8(v37, (int8x16_t)v38, *(int8x16_t *)v20);
          v47 = vmulq_f32(v46, v44);
          v48 = vmulq_f32(v46, (float32x4_t)vbslq_s8(v37, (int8x16_t)v17, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32(v34, v38), v40, 3), v40)));
          v49 = vmulq_f32(v46, (float32x4_t)vbslq_s8(v37, (int8x16_t)v18, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32(v35, v38), v41, 3), v41)));
          v50 = vmulq_f32(v46, (float32x4_t)vbslq_s8(v37, (int8x16_t)v19, v43));
          v51 = vmulq_f32(v22, v47);
          v52 = vmulq_f32(v22, v48);
          v53 = vmulq_f32(v22, v49);
          v54 = vmulq_f32(v22, v50);
          v55 = vaddq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL));
          v56 = vaddq_f32(v52, (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL));
          v57 = vaddq_f32(v53, (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL));
          v58 = vaddq_f32(v54, (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 4uLL));
          v59 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32(v55, (float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL)), (int8x16_t)v47);
          v60 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32(v56, (float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL)), (int8x16_t)v48);
          v61 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32(v57, (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL)), (int8x16_t)v49);
          v62 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32(v58, (float32x4_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL)), (int8x16_t)v50);
          v63 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3);
          v64 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 3);
          v65 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 3);
          v66 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 3);
          v67 = (int8x16_t *)(v6 + v14);
          *v67 = vbslq_s8(v37, (int8x16_t)v16, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v63, vmulq_f32(v45, vsubq_f32(v59, v63))), v16, 3));
          v67[1] = vbslq_s8(v37, (int8x16_t)v17, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v64, vmulq_f32(v45, vsubq_f32(v60, v64))), v17, 3));
          v67[2] = vbslq_s8(v37, (int8x16_t)v18, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v65, vmulq_f32(v45, vsubq_f32(v61, v65))), v18, 3));
          v67[3] = vbslq_s8(v37, (int8x16_t)v19, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v66, vmulq_f32(v45, vsubq_f32(v62, v66))), v19, 3));
          v15 -= 4;
          v14 += 64;
        }
        while (v4 + v15 > 3);
        LODWORD(v68) = -v15;
      }
      if ((int)v68 < v4)
      {
        v68 = v68;
        do
        {
          v69 = *(float32x4_t *)(v11 + 16 * v68);
          v70 = *(_QWORD *)(a1 + 408);
          v71 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 3), *(float32x4_t *)(v70 + 48));
          v72 = *(float32x4_t *)(v70 + 80);
          v73 = vmulq_f32(vrecpeq_f32(v71), *(float32x4_t *)(v70 + 64));
          v74 = *(float32x4_t *)(v7 + 16 * v68);
          v75 = vaddq_f32(vmulq_f32(v69, vmulq_f32(v73, vrecpsq_f32(v73, v71))), vmulq_laneq_f32(*(float32x4_t *)(v8 + 16 * v68), v72, 2));
          v76 = (int8x16_t)vsubq_f32(v72, v74);
          v77 = *(int8x16_t *)(v70 + 96);
          v78 = (float32x4_t)vbslq_s8(v77, v76, (int8x16_t)v74);
          v79 = vmulq_f32((float32x4_t)vbslq_s8(v77, *(int8x16_t *)(v70 + 112), *(int8x16_t *)v70), (float32x4_t)vbslq_s8(v77, (int8x16_t)v69, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32(v75, *(float32x4_t *)(v70 + 112)), v78, 3), v78)));
          v80 = vmulq_f32(*(float32x4_t *)(v70 + 32), v79);
          v81 = vaddq_f32(v80, (float32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 4uLL));
          v82 = (float32x4_t)vbslq_s8(v77, (int8x16_t)vaddq_f32(v81, (float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 8uLL)), (int8x16_t)v79);
          v83 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 3);
          *(int8x16_t *)(v6 + 16 * v68++) = vbslq_s8(v77, (int8x16_t)v69, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v83, vmulq_f32(*(float32x4_t *)(v70 + 16), vsubq_f32(v82, v83))), v69, 3));
        }
        while (v68 < v4);
      }
      ++v3;
      v8 += v9;
      v11 += v10;
      v7 += v12;
      v6 += v13;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcBadFilmGrain::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 3)
    return 0;
  else
    return a4;
}

uint64_t HgcBadFilmGrain::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 3)
    return 0;
  else
    return a4;
}

void HgcBadFilmGrain::HgcBadFilmGrain(HgcBadFilmGrain *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E8DE8;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(int32x4_t *)(v3 + 48) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 64) = xmmword_1B3051BC0;
  *(_OWORD *)(v3 + 80) = xmmword_1B3051DD0;
  __asm { FMOV            V2.4S, #1.0 }
  *(_OWORD *)(v3 + 96) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 112) = _Q2;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B288268C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBadFilmGrain::~HgcBadFilmGrain(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E8DE8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBadFilmGrain::~HgcBadFilmGrain(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBadFilmGrain::SetParameter(HgcBadFilmGrain *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;

  switch((_DWORD)a2)
  {
    case 2:
      v9 = *((_QWORD *)this + 51);
      if (*(float *)(v9 + 32) != a3.n128_f32[0]
        || *(float *)(v9 + 36) != a4
        || *(float *)(v9 + 40) != a5
        || *(float *)(v9 + 44) != a6)
      {
        *(_DWORD *)(v9 + 32) = a3.n128_u32[0];
        *(float *)(v9 + 36) = a4;
        *(float *)(v9 + 40) = a5;
        *(float *)(v9 + 44) = a6;
        goto LABEL_19;
      }
      return 0;
    case 1:
      v10 = *((_QWORD *)this + 51);
      if (*(float *)(v10 + 16) != a3.n128_f32[0]
        || *(float *)(v10 + 20) != a3.n128_f32[0]
        || *(float *)(v10 + 24) != a3.n128_f32[0]
        || *(float *)(v10 + 28) != 0.0)
      {
        v11 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
        v11.i32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        *(int32x4_t *)(v10 + 16) = v11;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v10 + 144) = a3;
        goto LABEL_19;
      }
      return 0;
    case 0:
      v7 = *((_QWORD *)this + 51);
      if (*(float *)v7 != a3.n128_f32[0]
        || *(float *)(v7 + 4) != a3.n128_f32[0]
        || *(float *)(v7 + 8) != a3.n128_f32[0]
        || *(float *)(v7 + 12) != 0.0)
      {
        v8 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
        v8.i32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        *(int32x4_t *)v7 = v8;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v7 + 128) = a3;
LABEL_19:
        HGNode::ClearBits((HGNode *)this, a2, a7);
        return 1;
      }
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcBadFilmGrain::GetParameter(HgcBadFilmGrain *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t result;

  switch(a2)
  {
    case 2:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[8];
      a3[1] = v5[9];
      a3[2] = v5[10];
      v4 = v5 + 11;
      goto LABEL_7;
    case 1:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[36];
      a3[1] = v6[37];
      a3[2] = v6[38];
      v4 = v6 + 39;
      goto LABEL_7;
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[32];
      a3[1] = v3[33];
      a3[2] = v3[34];
      v4 = v3 + 35;
LABEL_7:
      result = 0;
      a3[3] = *v4;
      return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcBadFilm::GetProgram(HgcBadFilm *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000048b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1.w = -r1.w + c0.w;\n"
             "    r2.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2.xyz = r1.www*r2.xyz + r1.xyz;\n"
             "    r2.w = r0.w;\n"
             "    r1.w = c0.w;\n"
             "    r1.xyz = half3(hg_Params[0].xyz);\n"
             "    r1 = r2*r1;\n"
             "    r1.w = dot(r1, half4(hg_Params[2]));\n"
             "    r1.xyz = mix(r1.www, r1.xyz, half3(hg_Params[1].xyz));\n"
             "    output.color0.xyz = float3(r0.www)*float3(r1.xyz);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=7f3b73ff:77860bf1:8da1611f:77735ce2\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0003:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000454\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1.w = -r1.w + c0.w;\n"
             "    r2.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2.xyz = r1.www*r2.xyz + r1.xyz;\n"
             "    r2.w = r0.w;\n"
             "    r1.w = c0.w;\n"
             "    r1.xyz = hg_Params[0].xyz;\n"
             "    r1 = r2*r1;\n"
             "    r1.w = dot(r1, hg_Params[2]);\n"
             "    r1.xyz = mix(r1.www, r1.xyz, hg_Params[1].xyz);\n"
             "    output.color0.xyz = r0.www*r1.xyz;\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=16e1c220:63c2dd20:172b69a4:32b2b359\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0003:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000453\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1.w = -r1.w + c0.w;\n"
           "    r2.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2.xyz = r1.www*r2.xyz + r1.xyz;\n"
           "    r2.w = r0.w;\n"
           "    r1.w = c0.w;\n"
           "    r1.xyz = hg_ProgramLocal0.xyz;\n"
           "    r1 = r2*r1;\n"
           "    r1.w = dot(r1, hg_ProgramLocal2);\n"
           "    r1.xyz = mix(r1.www, r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    gl_FragColor.xyz = r0.www*r1.xyz;\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=8e2ff0e1:0003b2b7:40890114:42824d09\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0003:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcBadFilm::InitProgramDescriptor(HgcBadFilm *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBadFilm_hgc_visible", "//Metal1.0     \n//LEN=00000002ad\n[[ visible ]] FragmentOut HgcBadFilm_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1.w = -r1.w + c0.w;\n"
    "    r2.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2.xyz = r1.www*r2.xyz + r1.xyz;\n"
    "    r2.w = r0.w;\n"
    "    r1.w = c0.w;\n"
    "    r1.xyz = hg_Params[0].xyz;\n"
    "    r1 = r2*r1;\n"
    "    r1.w = dot(r1, hg_Params[2]);\n"
    "    r1.xyz = mix(r1.www, r1.xyz, hg_Params[1].xyz);\n"
    "    output.color0.xyz = r0.www*r1.xyz;\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2882994()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBadFilm");
}

void sub_1B28829A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2882AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2882B2C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2882B24);
}

_QWORD *HgcBadFilm::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBadFilm [hgc1]");
}

uint64_t HgcBadFilm::BindTexture(HgcBadFilm *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcBadFilm::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcBadFilm::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t *v57;
  uint64_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v58) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)(v8 + v12 - 32);
          v14 = *(float32x4_t *)(v8 + v12 - 16);
          v15 = *(float32x4_t *)(v8 + v12);
          v16 = *(float32x4_t *)(v8 + v12 + 16);
          v17 = *(_QWORD *)(a1 + 408);
          v19 = *(float32x4_t *)(v17 + 32);
          v18 = *(float32x4_t *)(v17 + 48);
          v20 = *(int8x16_t *)(v17 + 64);
          v21 = *(float32x4_t *)(v17 + 80);
          v22 = (float32x4_t)vbslq_s8(v20, (int8x16_t)vsubq_f32(v18, *(float32x4_t *)(v6 + v12 - 32)), *(int8x16_t *)(v6 + v12 - 32));
          v23 = (float32x4_t)vbslq_s8(v20, (int8x16_t)vsubq_f32(v18, *(float32x4_t *)(v6 + v12 - 16)), *(int8x16_t *)(v6 + v12 - 16));
          v24 = (float32x4_t)vbslq_s8(v20, (int8x16_t)vsubq_f32(v18, *(float32x4_t *)(v6 + v12)), *(int8x16_t *)(v6 + v12));
          v25 = (float32x4_t)vbslq_s8(v20, (int8x16_t)vsubq_f32(v18, *(float32x4_t *)(v6 + v12 + 16)), *(int8x16_t *)(v6 + v12 + 16));
          v26 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v21);
          v27 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v21);
          v28 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v21);
          v29 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v21);
          v30 = vmulq_f32(v18, vrecpeq_f32(v26));
          v31 = vmulq_f32(v18, vrecpeq_f32(v27));
          v32 = vmulq_f32(v18, vrecpeq_f32(v28));
          v33 = vmulq_f32(v18, vrecpeq_f32(v29));
          v34 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v15, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v15, vmulq_f32(v32, vrecpsq_f32(v32, v28))), v24, 3), v24));
          v35 = *(float32x4_t *)(v17 + 16);
          v36 = (float32x4_t)vbslq_s8(v20, (int8x16_t)v18, *(int8x16_t *)v17);
          v37 = vmulq_f32(v36, (float32x4_t)vbslq_s8(v20, (int8x16_t)v13, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v13, vmulq_f32(v30, vrecpsq_f32(v30, v26))), v22, 3), v22)));
          v38 = vmulq_f32(v36, (float32x4_t)vbslq_s8(v20, (int8x16_t)v14, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v14, vmulq_f32(v31, vrecpsq_f32(v31, v27))), v23, 3), v23)));
          v39 = vmulq_f32(v36, v34);
          v40 = vmulq_f32(v36, (float32x4_t)vbslq_s8(v20, (int8x16_t)v16, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v16, vmulq_f32(v33, vrecpsq_f32(v33, v29))), v25, 3), v25)));
          v41 = vmulq_f32(v19, v37);
          v42 = vmulq_f32(v19, v38);
          v43 = vmulq_f32(v19, v39);
          v44 = vmulq_f32(v19, v40);
          v45 = vaddq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL));
          v46 = vaddq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL));
          v47 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          v48 = vaddq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL));
          v49 = (float32x4_t)vbslq_s8(v20, (int8x16_t)vaddq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL)), (int8x16_t)v37);
          v50 = (float32x4_t)vbslq_s8(v20, (int8x16_t)vaddq_f32(v46, (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL)), (int8x16_t)v38);
          v51 = (float32x4_t)vbslq_s8(v20, (int8x16_t)vaddq_f32(v47, (float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL)), (int8x16_t)v39);
          v52 = (float32x4_t)vbslq_s8(v20, (int8x16_t)vaddq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL)), (int8x16_t)v40);
          v53 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 3);
          v54 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 3);
          v55 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 3);
          v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 3);
          v57 = (int8x16_t *)(v5 + v12);
          v57[-2] = vbslq_s8(v20, (int8x16_t)v13, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v53, vmulq_f32(v35, vsubq_f32(v49, v53))), v13, 3));
          v57[-1] = vbslq_s8(v20, (int8x16_t)v14, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v54, vmulq_f32(v35, vsubq_f32(v50, v54))), v14, 3));
          *v57 = vbslq_s8(v20, (int8x16_t)v15, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v55, vmulq_f32(v35, vsubq_f32(v51, v55))), v15, 3));
          v57[1] = vbslq_s8(v20, (int8x16_t)v16, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v56, vmulq_f32(v35, vsubq_f32(v52, v56))), v16, 3));
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v58) = -v11;
      }
      if ((int)v58 < v4)
      {
        v58 = v58;
        do
        {
          v59 = *(float32x4_t *)(v8 + 16 * v58);
          v60 = *(_QWORD *)(a1 + 408);
          v61 = *(float32x4_t *)(v60 + 48);
          v62 = *(int8x16_t *)(v60 + 64);
          v63 = (float32x4_t)vbslq_s8(v62, (int8x16_t)vsubq_f32(v61, *(float32x4_t *)(v6 + 16 * v58)), *(int8x16_t *)(v6 + 16 * v58));
          v64 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), *(float32x4_t *)(v60 + 80));
          v65 = vmulq_f32(v61, vrecpeq_f32(v64));
          v66 = vmulq_f32((float32x4_t)vbslq_s8(v62, (int8x16_t)v61, *(int8x16_t *)v60), (float32x4_t)vbslq_s8(v62, (int8x16_t)v59, (int8x16_t)vaddq_f32(vmulq_laneq_f32(vmulq_f32(v59, vmulq_f32(v65, vrecpsq_f32(v65, v64))), v63, 3), v63)));
          v67 = vmulq_f32(*(float32x4_t *)(v60 + 32), v66);
          v68 = vaddq_f32(v67, (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 4uLL));
          v69 = (float32x4_t)vbslq_s8(v62, (int8x16_t)vaddq_f32(v68, (float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL)), (int8x16_t)v66);
          v70 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 3);
          *(int8x16_t *)(v5 + 16 * v58++) = vbslq_s8(v62, (int8x16_t)v59, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v70, vmulq_f32(*(float32x4_t *)(v60 + 16), vsubq_f32(v69, v70))), v59, 3));
        }
        while (v58 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcBadFilm::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcBadFilm::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcBadFilm::HgcBadFilm(HgcBadFilm *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E9050;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = xmmword_1B3051E00;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050F70;
  *(int32x4_t *)(v3 + 80) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B288308C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBadFilm::~HgcBadFilm(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E9050;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AE2C30F4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBadFilm::~HgcBadFilm(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBadFilm::SetParameter(HgcBadFilm *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x4_t v11;

  switch((_DWORD)a2)
  {
    case 2:
      v9 = *((_QWORD *)this + 51);
      if (*(float *)(v9 + 32) != a3.n128_f32[0]
        || *(float *)(v9 + 36) != a4
        || *(float *)(v9 + 40) != a5
        || *(float *)(v9 + 44) != a6)
      {
        *(_DWORD *)(v9 + 32) = a3.n128_u32[0];
        *(float *)(v9 + 36) = a4;
        *(float *)(v9 + 40) = a5;
        *(float *)(v9 + 44) = a6;
        goto LABEL_19;
      }
      return 0;
    case 1:
      v10 = *((_QWORD *)this + 51);
      if (*(float *)(v10 + 16) != a3.n128_f32[0]
        || *(float *)(v10 + 20) != a3.n128_f32[0]
        || *(float *)(v10 + 24) != a3.n128_f32[0]
        || *(float *)(v10 + 28) != 0.0)
      {
        v11 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
        v11.i32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        *(int32x4_t *)(v10 + 16) = v11;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v10 + 112) = a3;
        goto LABEL_19;
      }
      return 0;
    case 0:
      v7 = *((_QWORD *)this + 51);
      if (*(float *)v7 != a3.n128_f32[0]
        || *(float *)(v7 + 4) != a3.n128_f32[0]
        || *(float *)(v7 + 8) != a3.n128_f32[0]
        || *(float *)(v7 + 12) != 0.0)
      {
        v8 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
        v8.i32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        *(int32x4_t *)v7 = v8;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v7 + 96) = a3;
LABEL_19:
        HGNode::ClearBits((HGNode *)this, a2, a7);
        return 1;
      }
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcBadFilm::GetParameter(HgcBadFilm *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t result;

  switch(a2)
  {
    case 2:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[8];
      a3[1] = v5[9];
      a3[2] = v5[10];
      v4 = v5 + 11;
      goto LABEL_7;
    case 1:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[28];
      a3[1] = v6[29];
      a3[2] = v6[30];
      v4 = v6 + 31;
      goto LABEL_7;
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[24];
      a3[1] = v3[25];
      a3[2] = v3[26];
      v4 = v3 + 27;
LABEL_7:
      result = 0;
      a3[3] = *v4;
      return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcPrism::GetProgram(HgcPrism *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000042b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xw = (half2) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xw;\n"
             "    r1.yw = (half2) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).yw;\n"
             "    r2.zw = (half2) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).zw;\n"
             "    output.color0.x = float(r0.x);\n"
             "    output.color0.y = float(r1.y);\n"
             "    output.color0.z = float(r2.z);\n"
             "    r0.w = fmax(r0.w, r1.w);\n"
             "    output.color0.w = fmax(float(r0.w), float(r2.w));\n"
             "    return output;\n"
             "}\n"
             "//MD5=e654a3e1:34bc99dd:e96e2a9d:a9cdaa6e\n"
             "//SIG=00400000:00000007:00000007:00000007:0000:0000:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000003f4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xw = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xw;\n"
             "    r1.yw = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).yw;\n"
             "    r2.zw = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).zw;\n"
             "    output.color0.x = r0.x;\n"
             "    output.color0.y = r1.y;\n"
             "    output.color0.z = r2.z;\n"
             "    r0.w = fmax(r0.w, r1.w);\n"
             "    output.color0.w = fmax(r0.w, r2.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=922c027f:e9701412:b8e336b5:f88230fc\n"
             "//SIG=00000000:00000007:00000007:00000000:0000:0000:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000349\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xw = texture2D(hg_Texture0, hg_TexCoord0.xy).xw;\n"
           "    r1.yw = texture2D(hg_Texture1, hg_TexCoord1.xy).yw;\n"
           "    r2.zw = texture2D(hg_Texture2, hg_TexCoord2.xy).zw;\n"
           "    gl_FragColor.x = r0.x;\n"
           "    gl_FragColor.y = r1.y;\n"
           "    gl_FragColor.z = r2.z;\n"
           "    r0.w = max(r0.w, r1.w);\n"
           "    gl_FragColor.w = max(r0.w, r2.w);\n"
           "}\n"
           "//MD5=4e6e7057:d79f48ee:b15cedc0:30878a3d\n"
           "//SIG=00000000:00000007:00000007:00000000:0000:0000:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcPrism::InitProgramDescriptor(HgcPrism *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPrism_hgc_visible", "//Metal1.0     \n//LEN=00000001d0\n[[ visible ]] FragmentOut HgcPrism_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xw = color0.xw;\n"
    "    r1.yw = color1.yw;\n"
    "    r2.zw = color2.zw;\n"
    "    output.color0.x = r0.x;\n"
    "    output.color0.y = r1.y;\n"
    "    output.color0.z = r2.z;\n"
    "    r0.w = fmax(r0.w, r1.w);\n"
    "    output.color0.w = fmax(r0.w, r2.w);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2883390()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPrism");
}

void sub_1B28833A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2883520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2883570()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2883568);
}

_QWORD *HgcPrism::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPrism [hgc1]");
}

uint64_t HgcPrism::BindTexture(HgcPrism *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 2)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 2;
  }
  else if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcPrism::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcPrism::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  uint64_t v18;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 112);
    v7 = *(_QWORD *)(a2 + 96);
    v8 = 16 * *(int *)(a2 + 104);
    v9 = 16 * *(int *)(a2 + 120);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(int8x16_t *)(*(_QWORD *)(a1 + 408) + 16);
          v14 = vbslq_s8(v13, (int8x16_t)vmaxq_f32(vmaxq_f32(*(float32x4_t *)(v7 + v12 - 16), (float32x4_t)0), *(float32x4_t *)(v6 + v12 - 16)), *(int8x16_t *)(v7 + v12 - 16));
          v15 = vbslq_s8(v13, (int8x16_t)vmaxq_f32(vmaxq_f32(*(float32x4_t *)(v7 + v12), (float32x4_t)0), *(float32x4_t *)(v6 + v12)), *(int8x16_t *)(v7 + v12));
          v16 = vbslq_s8(v13, (int8x16_t)vmaxq_f32(vmaxq_f32(*(float32x4_t *)(v7 + v12 + 16), (float32x4_t)0), *(float32x4_t *)(v6 + v12 + 16)), *(int8x16_t *)(v7 + v12 + 16));
          v17 = (int8x16_t *)(v5 + v12);
          v17[-2] = vbslq_s8(v13, (int8x16_t)vmaxq_f32(vmaxq_f32(*(float32x4_t *)(v7 + v12 - 32), (float32x4_t)0), *(float32x4_t *)(v6 + v12 - 32)), *(int8x16_t *)(v7 + v12 - 32));
          v17[-1] = v14;
          *v17 = v15;
          v17[1] = v16;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v18) = -v11;
      }
      if ((int)v18 < v4)
      {
        v18 = v18;
        do
        {
          *(int8x16_t *)(v5 + 16 * v18) = vbslq_s8(*(int8x16_t *)(*(_QWORD *)(a1 + 408) + 16), (int8x16_t)vmaxq_f32(vmaxq_f32(*(float32x4_t *)(v7 + 16 * v18), (float32x4_t)0), *(float32x4_t *)(v6 + 16 * v18)), *(int8x16_t *)(v7 + 16 * v18));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v7 += v8;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcPrism::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 3)
    return 0;
  else
    return a4;
}

uint64_t HgcPrism::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 3)
    return 0;
  else
    return a4;
}

void HgcPrism::HgcPrism(HgcPrism *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E92B8;
  v3 = (_OWORD *)operator new();
  *v3 = xmmword_1B3050E20;
  v3[1] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28838B8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPrism::~HgcPrism(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E92B8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcPrism::~HgcPrism(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPrism::SetParameter(HgcPrism *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcPrism::GetParameter(HgcPrism *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcVariableBlurIntensity::GetProgram(HgcVariableBlurIntensity *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000307\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.zw = c0.zz;\n"
             "    r0.x = dot(half4(frag._texCoord0), half4(hg_Params[3]));\n"
             "    r0.y = dot(half4(frag._texCoord0), half4(hg_Params[4]));\n"
             "    r0 = r0 - half4(hg_Params[0]);\n"
             "    r0.x = dot(r0, r0);\n"
             "    r0.x = sqrt(r0.x);\n"
             "    r0.x = r0.x - half(hg_Params[2].x);\n"
             "    output.color0 = clamp(float4(r0.xxxx)*hg_Params[1], 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e1f018d2:5a1b5082:fd5acce8:74cf3a05\n"
             "//SIG=00400000:00000000:00000000:00000000:0001:0005:0001:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002d9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.zw = c0.zz;\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[3]);\n"
             "    r0.y = dot(frag._texCoord0, hg_Params[4]);\n"
             "    r0 = r0 - hg_Params[0];\n"
             "    r0.x = dot(r0, r0);\n"
             "    r0.x = sqrt(r0.x);\n"
             "    r0.x = r0.x - hg_Params[2].x;\n"
             "    output.color0 = clamp(r0.xxxx*hg_Params[1], 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ccd81247:4273da42:e852416e:94c39b7c\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0005:0001:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000390\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0;\n"
           "\n"
           "    r0.zw = c0.zz;\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal3);\n"
           "    r0.y = dot(hg_TexCoord0, hg_ProgramLocal4);\n"
           "    r0 = r0 - hg_ProgramLocal0;\n"
           "    r0.x = dot(r0, r0);\n"
           "    r0.x = sqrt(r0.x);\n"
           "    r0.x = r0.x - hg_ProgramLocal2.x;\n"
           "    gl_FragColor = clamp(r0.xxxx*hg_ProgramLocal1, vec4(0.00000), vec4(1.00000));\n"
           "}\n"
           "//MD5=e3684308:62925a6e:e5e2c473:74fc23c7\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0005:0001:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcVariableBlurIntensity::InitProgramDescriptor(HgcVariableBlurIntensity *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcVariableBlurIntensity_hgc_visible", "//Metal1.0     \n//LEN=0000000240\n[[ visible ]] FragmentOut HgcVariableBlurIntensity_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.zw = c0.zz;\n"
    "    r0.x = dot(texCoord0, hg_Params[3]);\n"
    "    r0.y = dot(texCoord0, hg_Params[4]);\n"
    "    r0 = r0 - hg_Params[0];\n"
    "    r0.x = dot(r0, r0);\n"
    "    r0.x = sqrt(r0.x);\n"
    "    r0.x = r0.x - hg_Params[2].x;\n"
    "    output.color0 = clamp(r0.xxxx*hg_Params[1], 0.00000f, 1.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2883A0C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcVariableBlurIntensity");
}

void sub_1B2883A1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2883B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2883B5C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2883B54);
}

_QWORD *HgcVariableBlurIntensity::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcVariableBlurIntensity [hgc1]");
}

uint64_t HgcVariableBlurIntensity::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcVariableBlurIntensity::Bind(HgcVariableBlurIntensity *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcVariableBlurIntensity *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcVariableBlurIntensity::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t *v8;
  uint64_t v9;
  int v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = (float32x4_t *)a2[2];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v8 = v6 + 2;
    v9 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 4)
      {
        LODWORD(v70) = 0;
        v12 = v7;
      }
      else
      {
        v10 = 0;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = *(_QWORD *)(a1 + 408);
          v17 = *(float32x4_t *)(v15 + 32);
          v16 = *(float32x4_t *)(v15 + 48);
          v18 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v19 = vmulq_f32(v12, v16);
          v20 = vmulq_f32(v13, v16);
          v21 = vmulq_f32(v14, v16);
          v22 = vmulq_f32(v18, v16);
          v23 = (int8x16_t)vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL));
          v24 = (int8x16_t)vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL));
          v25 = (int8x16_t)vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 4uLL));
          v26 = (int8x16_t)vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL));
          *(float32x2_t *)v23.i8 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
          *(float32x2_t *)v24.i8 = vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
          v28 = *(float32x4_t *)(v15 + 64);
          v27 = *(int8x16_t *)(v15 + 80);
          v29 = vmulq_f32(v12, v28);
          v30 = vmulq_f32(v13, v28);
          v31 = vmulq_f32(v14, v28);
          v32 = vmulq_f32(v18, v28);
          *(float32x2_t *)v25.i8 = vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
          v33 = vaddq_f32(v29, (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL));
          v34 = vaddq_f32(v30, (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL));
          v35 = vaddq_f32(v31, (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL));
          v36 = vaddq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL));
          *(float32x2_t *)v26.i8 = vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
          v37 = (float32x4_t)vbslq_s8(v27, (int8x16_t)vaddq_f32(v34, (float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL)), v24);
          v38 = *(float32x4_t *)(v15 + 16);
          v39 = vsubq_f32((float32x4_t)vbslq_s8(v27, (int8x16_t)vaddq_f32(v33, (float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL)), v23), *(float32x4_t *)v15);
          v40 = vsubq_f32(v37, *(float32x4_t *)v15);
          v41 = vsubq_f32((float32x4_t)vbslq_s8(v27, (int8x16_t)vaddq_f32(v35, (float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL)), v25), *(float32x4_t *)v15);
          v42 = vsubq_f32((float32x4_t)vbslq_s8(v27, (int8x16_t)vaddq_f32(v36, (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL)), v26), *(float32x4_t *)v15);
          v43 = vmulq_f32(v39, v39);
          v44 = vmulq_f32(v40, v40);
          v45 = vmulq_f32(v41, v41);
          v46 = vmulq_f32(v42, v42);
          v47 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          v48 = vaddq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL));
          v49 = vaddq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL));
          v50 = vaddq_f32(v46, (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 4uLL));
          v51 = vaddq_f32(v47, (float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL));
          v52 = vaddq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL));
          v53 = vaddq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL));
          v54 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL));
          v55 = *(float32x4_t *)(v15 + 96);
          v56 = *(float32x4_t *)(v15 + 112);
          v57 = vminq_f32(vrsqrteq_f32(v51), v55);
          v58 = vminq_f32(vrsqrteq_f32(v52), v55);
          v59 = vminq_f32(vrsqrteq_f32(v53), v55);
          v60 = vminq_f32(vrsqrteq_f32(v54), v55);
          v61 = vminq_f32(vmulq_f32(v57, vrsqrtsq_f32(vmulq_f32(v57, v51), v57)), v55);
          v62 = vminq_f32(vmulq_f32(v58, vrsqrtsq_f32(vmulq_f32(v58, v52), v58)), v55);
          v63 = vminq_f32(vmulq_f32(v59, vrsqrtsq_f32(vmulq_f32(v59, v53), v59)), v55);
          v64 = vminq_f32(vmulq_f32(v60, vrsqrtsq_f32(vmulq_f32(v60, v54), v60)), v55);
          v65 = vmaxq_f32(vmulq_n_f32(v38, vsubq_f32(vmulq_f32(v51, vminq_f32(vmulq_f32(v61, vrsqrtsq_f32(vmulq_f32(v61, v51), v61)), v55)), v17).f32[0]), v56);
          v66 = vmaxq_f32(vmulq_n_f32(v38, vsubq_f32(vmulq_f32(v52, vminq_f32(vmulq_f32(v62, vrsqrtsq_f32(vmulq_f32(v52, v62), v62)), v55)), v17).f32[0]), v56);
          v67 = vmaxq_f32(vmulq_n_f32(v38, vsubq_f32(vmulq_f32(v53, vminq_f32(vmulq_f32(v63, vrsqrtsq_f32(vmulq_f32(v53, v63), v63)), v55)), v17).f32[0]), v56);
          v68 = vmaxq_f32(vmulq_n_f32(v38, vsubq_f32(vmulq_f32(v54, vminq_f32(vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32(v54, v64), v64)), v55)), v17).f32[0]), v56);
          v69 = *(float32x4_t *)(v15 + 128);
          v11[-2] = vminq_f32(v65, v69);
          v11[-1] = vminq_f32(v66, v69);
          *v11 = vminq_f32(v67, v69);
          v11[1] = vminq_f32(v68, v69);
          v11 += 4;
          v12 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v10 -= 4;
        }
        while (v5 + v10 > 3);
        LODWORD(v70) = -v10;
      }
      if ((int)v70 < v5)
      {
        v70 = v70;
        do
        {
          v71 = *(_QWORD *)(a1 + 408);
          v72 = vmulq_f32(v12, *(float32x4_t *)(v71 + 48));
          v73 = (int8x16_t)vaddq_f32(v72, (float32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL));
          v74 = vmulq_f32(v12, *(float32x4_t *)(v71 + 64));
          *(float32x2_t *)v73.i8 = vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL));
          v75 = vaddq_f32(v74, (float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL));
          v76 = vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v71 + 80), (int8x16_t)vaddq_f32(v75, (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), v73), *(float32x4_t *)v71);
          v77 = vmulq_f32(v76, v76);
          v78 = vaddq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL));
          v79 = vaddq_f32(v78, (float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL));
          v80 = *(float32x4_t *)(v71 + 96);
          v81 = vminq_f32(vrsqrteq_f32(v79), v80);
          v82 = vminq_f32(vmulq_f32(v81, vrsqrtsq_f32(vmulq_f32(v81, v79), v81)), v80);
          v6[v70] = vminq_f32(vmaxq_f32(vmulq_n_f32(*(float32x4_t *)(v71 + 16), vsubq_f32(vmulq_f32(vminq_f32(vmulq_f32(v82, vrsqrtsq_f32(vmulq_f32(v82, v79), v82)), v80), v79), *(float32x4_t *)(v71 + 32)).f32[0]), *(float32x4_t *)(v71 + 112)), *(float32x4_t *)(v71 + 128));
          v12 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          ++v70;
        }
        while (v70 < v5);
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      ++v4;
      v8 = (float32x4_t *)((char *)v8 + v9);
      v6 = (float32x4_t *)((char *)v6 + v9);
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcVariableBlurIntensity::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcVariableBlurIntensity::GetROI()
{
  return 0;
}

void HgcVariableBlurIntensity::HgcVariableBlurIntensity(HgcVariableBlurIntensity *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E9520;
  v3 = (_OWORD *)operator new();
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[4] = 0u;
  v3[5] = xmmword_1B3050FF0;
  v3[6] = xmmword_1B3051C80;
  v3[7] = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  v3[8] = _Q1;
  v3[9] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28840DC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcVariableBlurIntensity::~HgcVariableBlurIntensity(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E9520;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcVariableBlurIntensity::~HgcVariableBlurIntensity(this);
  HGObject::operator delete(v1);
}

uint64_t HgcVariableBlurIntensity::SetParameter(HgcVariableBlurIntensity *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  __n128 *v9;
  int32x4_t v10;
  float *v11;
  float *v12;
  float *v13;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_28;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] == a3.n128_f32[0]
        && v9[1].n128_f32[1] == a3.n128_f32[0]
        && v9[1].n128_f32[2] == a3.n128_f32[0]
        && v9[1].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v10 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v9[1] = (__n128)v10;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[9] = a3;
      goto LABEL_28;
    case 2:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[8] == a3.n128_f32[0] && v11[9] == a4 && v11[10] == a5 && v11[11] == a6)
        return 0;
      v11[8] = a3.n128_f32[0];
      v11[9] = a4;
      v11[10] = a5;
      v11[11] = a6;
      goto LABEL_28;
    case 3:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[12] == a3.n128_f32[0] && v12[13] == a4 && v12[14] == a5 && v12[15] == a6)
        return 0;
      v12[12] = a3.n128_f32[0];
      v12[13] = a4;
      v12[14] = a5;
      v12[15] = a6;
      goto LABEL_28;
    case 4:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[16] == a3.n128_f32[0] && v13[17] == a4 && v13[18] == a5 && v13[19] == a6)
        return 0;
      v13[16] = a3.n128_f32[0];
      v13[17] = a4;
      v13[18] = a5;
      v13[19] = a6;
LABEL_28:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcVariableBlurIntensity::GetParameter(HgcVariableBlurIntensity *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_7;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[36];
      a3[1] = v5[37];
      a3[2] = v5[38];
      v4 = v5 + 39;
      goto LABEL_7;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_7;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_7;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
LABEL_7:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcConcentricSquareChecker::GetProgram(HgcConcentricSquareChecker *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000d26\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.05747731403, -0.01348046958, -0.1212390736, 0.1956359297);\n"
             "    const half4 c1 = half4(0.9999956489, -0.3329946101, 1.570796371, 3.141592741);\n"
             "    const half4 c2 = half4(6.283185482, 0.1591549367, 1.000000000, 57.29577637);\n"
             "    const half4 c3 = half4(2.000000000, 3.000000000, 0.5000000000, 0.000000000);\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[10]);\n"
             "    s0.z = dot(frag._texCoord0, hg_Params[11]);\n"
             "    s1.z = abs(s0.x);\n"
             "    s0.w = abs(s0.z);\n"
             "    s0.y = fmax(s0.w, s1.z);\n"
             "    s1.x = 1.00000f / s0.y;\n"
             "    s0.y = fmin(s0.w, s1.z);\n"
             "    s0.y = s0.y*s1.x;\n"
             "    s1.x = s0.y*s0.y;\n"
             "    s1.y = s1.x*float(c0.y) + float(c0.x);\n"
             "    s1.y = s1.y*s1.x + float(c0.z);\n"
             "    s1.y = s1.y*s1.x + float(c0.w);\n"
             "    s1.y = s1.y*s1.x + float(c1.y);\n"
             "    s1.x = s1.y*s1.x + float(c1.x);\n"
             "    s1.w = s1.x*s0.y;\n"
             "    s0.y = s0.z;\n"
             "    s1.xy = s0.xy*s0.xy;\n"
             "    s0.y = s1.z - s0.w;\n"
             "    s2.x = float(c1.z) - s1.w;\n"
             "    s0.w = dot(s1.xy, 1.00000f);\n"
             "    s0.y = select(s1.w, s2.x, s0.y < 0.00000h);\n"
             "    s2.x = float(c1.w) - s0.y;\n"
             "    s0.y = select(s0.y, s2.x, s0.x < 0.00000h);\n"
             "    s0.w = sqrt(s0.w);\n"
             "    s1.x = pow(s0.w, hg_Params[3].x);\n"
             "    s0.y = select(s0.y, -s0.y, s0.z < 0.00000h);\n"
             "    s0.y = s1.x*hg_Params[4].x + s0.y;\n"
             "    s1.y = s0.y*float(c2.y);\n"
             "    s1.y = floor(s1.y);\n"
             "    s1.y = -s1.y*float(c2.x) + s0.y;\n"
             "    s1.z = s1.y + float(c2.x);\n"
             "    s0.y = select(s0.y, s1.z, s0.y < 0.00000h);\n"
             "    s1.y = s0.y/hg_Params[2].x;\n"
             "    s1.z = s1.x*hg_Params[4].x;\n"
             "    s1.y = floor(s1.y);\n"
             "    s1.w = s1.y*hg_Params[2].x + -s1.z;\n"
             "    s2.x = sin(s1.w);\n"
             "    s1.y = s1.y + float(c2.z);\n"
             "    s1.y = s1.y*hg_Params[2].x + -s1.z;\n"
             "    s2.y = s0.z*s2.x;\n"
             "    s1.w = cos(s1.w);\n"
             "    s2.y = s0.x*s1.w + s2.y;\n"
             "    s2.x = -s2.y*s2.x + s0.z;\n"
             "    s1.w = -s2.y*s1.w + s0.x;\n"
             "    s2.x = s2.x*s2.x;\n"
             "    s1.z = s1.w*s1.w + s2.x;\n"
             "    s1.w = sin(s1.y);\n"
             "    s2.x = s0.z*s1.w;\n"
             "    s1.y = cos(s1.y);\n"
             "    s2.x = s0.x*s1.y + s2.x;\n"
             "    s0.xz = -s2.xx*s1.yw + s0.xz;\n"
             "    s0.z = s0.z*s0.z;\n"
             "    s0.x = s0.x*s0.x + s0.z;\n"
             "    s0.z = s1.x/hg_Params[1].x;\n"
             "    s1.x = floor(s0.z);\n"
             "    s1.y = 1.00000f / hg_Params[3].x;\n"
             "    s0.z = s1.x*hg_Params[1].x;\n"
             "    s0.z = pow(s0.z, s1.y);\n"
             "    s1.w = s1.x*hg_Params[1].x + hg_Params[1].x;\n"
             "    s1.w = pow(s1.w, s1.y);\n"
             "    s1.y = s1.w - s0.w;\n"
             "    s0.z = s0.w - s0.z;\n"
             "    s0.z = fmin(s0.z, s1.y);\n"
             "    s1.z = sqrt(s1.z);\n"
             "    s0.x = sqrt(s0.x);\n"
             "    s0.x = fmin(s1.z, s0.x);\n"
             "    s0.x = fmin(s0.x, s0.z);\n"
             "    s0.z = s0.y/hg_Params[0].z;\n"
             "    s0.x = clamp(s0.x*hg_Params[8].x, 0.00000f, 1.00000f);\n"
             "    s0.w = s0.z*float(c2.w);\n"
             "    s1.y = floor(s0.w);\n"
             "    s1.z = s1.y*float(c3.z);\n"
             "    s0.w = s1.x*float(c3.z);\n"
             "    s1.z = floor(s1.z);\n"
             "    s0.w = floor(s0.w);\n"
             "    s0.w = -s0.w*float(c3.x) + s1.x;\n"
             "    s1.y = -s1.z*float(c3.x) + s1.y;\n"
             "    s0.w = s0.w - s1.y;\n"
             "    s0.y = s0.x*s0.x;\n"
             "    s0.z = -s0.x*float(c3.x) + float(c3.y);\n"
             "    s0.y = s0.y*s0.z;\n"
             "    s2 = select(hg_Params[6], hg_Params[5], -fabs(s0.wwww) < 0.00000h);\n"
             "    s0.x = select(s0.x, s0.y, hg_Params[9].x < 0.00000h);\n"
             "    output.color0 = mix(hg_Params[7], s2, s0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=dbac2526:79b17fd5:8be5b65d:46f882f6\n"
             "//SIG=00400000:00000000:00000000:00000000:0004:000c:0003:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000ca9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.05747731403, -0.01348046958, -0.1212390736, 0.1956359297);\n"
             "    const float4 c1 = float4(0.9999956489, -0.3329946101, 1.570796371, 3.141592741);\n"
             "    const float4 c2 = float4(6.283185482, 0.1591549367, 1.000000000, 57.29577637);\n"
             "    const float4 c3 = float4(2.000000000, 3.000000000, 0.5000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[10]);\n"
             "    r0.z = dot(frag._texCoord0, hg_Params[11]);\n"
             "    r1.z = abs(r0.x);\n"
             "    r0.w = abs(r0.z);\n"
             "    r0.y = fmax(r0.w, r1.z);\n"
             "    r1.x = 1.00000f / r0.y;\n"
             "    r0.y = fmin(r0.w, r1.z);\n"
             "    r0.y = r0.y*r1.x;\n"
             "    r1.x = r0.y*r0.y;\n"
             "    r1.y = r1.x*c0.y + c0.x;\n"
             "    r1.y = r1.y*r1.x + c0.z;\n"
             "    r1.y = r1.y*r1.x + c0.w;\n"
             "    r1.y = r1.y*r1.x + c1.y;\n"
             "    r1.x = r1.y*r1.x + c1.x;\n"
             "    r1.w = r1.x*r0.y;\n"
             "    r0.y = r0.z;\n"
             "    r1.xy = r0.xy*r0.xy;\n"
             "    r0.y = r1.z - r0.w;\n"
             "    r2.x = c1.z - r1.w;\n"
             "    r0.w = dot(r1.xy, 1.00000f);\n"
             "    r0.y = select(r1.w, r2.x, r0.y < 0.00000f);\n"
             "    r2.x = c1.w - r0.y;\n"
             "    r0.y = select(r0.y, r2.x, r0.x < 0.00000f);\n"
             "    r0.w = sqrt(r0.w);\n"
             "    r1.x = pow(r0.w, hg_Params[3].x);\n"
             "    r0.y = select(r0.y, -r0.y, r0.z < 0.00000f);\n"
             "    r0.y = r1.x*hg_Params[4].x + r0.y;\n"
             "    r1.y = r0.y*c2.y;\n"
             "    r1.y = floor(r1.y);\n"
             "    r1.y = -r1.y*c2.x + r0.y;\n"
             "    r1.z = r1.y + c2.x;\n"
             "    r0.y = select(r0.y, r1.z, r0.y < 0.00000f);\n"
             "    r1.y = r0.y/hg_Params[2].x;\n"
             "    r1.z = r1.x*hg_Params[4].x;\n"
             "    r1.y = floor(r1.y);\n"
             "    r1.w = r1.y*hg_Params[2].x + -r1.z;\n"
             "    r2.x = sin(r1.w);\n"
             "    r1.y = r1.y + c2.z;\n"
             "    r1.y = r1.y*hg_Params[2].x + -r1.z;\n"
             "    r2.y = r0.z*r2.x;\n"
             "    r1.w = cos(r1.w);\n"
             "    r2.y = r0.x*r1.w + r2.y;\n"
             "    r2.x = -r2.y*r2.x + r0.z;\n"
             "    r1.w = -r2.y*r1.w + r0.x;\n"
             "    r2.x = r2.x*r2.x;\n"
             "    r1.z = r1.w*r1.w + r2.x;\n"
             "    r1.w = sin(r1.y);\n"
             "    r2.x = r0.z*r1.w;\n"
             "    r1.y = cos(r1.y);\n"
             "    r2.x = r0.x*r1.y + r2.x;\n"
             "    r0.xz = -r2.xx*r1.yw + r0.xz;\n"
             "    r0.z = r0.z*r0.z;\n"
             "    r0.x = r0.x*r0.x + r0.z;\n"
             "    r0.z = r1.x/hg_Params[1].x;\n"
             "    r1.x = floor(r0.z);\n"
             "    r1.y = 1.00000f / hg_Params[3].x;\n"
             "    r0.z = r1.x*hg_Params[1].x;\n"
             "    r0.z = pow(r0.z, r1.y);\n"
             "    r1.w = r1.x*hg_Params[1].x + hg_Params[1].x;\n"
             "    r1.w = pow(r1.w, r1.y);\n"
             "    r1.y = r1.w - r0.w;\n"
             "    r0.z = r0.w - r0.z;\n"
             "    r0.z = fmin(r0.z, r1.y);\n"
             "    r1.z = sqrt(r1.z);\n"
             "    r0.x = sqrt(r0.x);\n"
             "    r0.x = fmin(r1.z, r0.x);\n"
             "    r0.x = fmin(r0.x, r0.z);\n"
             "    r0.z = r0.y/hg_Params[0].z;\n"
             "    r0.x = clamp(r0.x*hg_Params[8].x, 0.00000f, 1.00000f);\n"
             "    r0.w = r0.z*c2.w;\n"
             "    r1.y = floor(r0.w);\n"
             "    r1.z = r1.y*c3.z;\n"
             "    r0.w = r1.x*c3.z;\n"
             "    r1.z = floor(r1.z);\n"
             "    r0.w = floor(r0.w);\n"
             "    r0.w = -r0.w*c3.x + r1.x;\n"
             "    r1.y = -r1.z*c3.x + r1.y;\n"
             "    r0.w = r0.w - r1.y;\n"
             "    r0.y = r0.x*r0.x;\n"
             "    r0.z = -r0.x*c3.x + c3.y;\n"
             "    r0.y = r0.y*r0.z;\n"
             "    r2 = select(hg_Params[6], hg_Params[5], -fabs(r0.wwww) < 0.00000f);\n"
             "    r0.x = select(r0.x, r0.y, hg_Params[9].x < 0.00000f);\n"
             "    output.color0 = mix(hg_Params[7], r2, r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=84a1ae38:6df132d1:7ca06595:7126459f\n"
             "//SIG=00000000:00000000:00000000:00000000:0004:000c:0003:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000f31\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.05747731403, -0.01348046958, -0.1212390736, 0.1956359297);\n"
           "    const highp vec4 c1 = vec4(0.9999956489, -0.3329946101, 1.570796371, 3.141592741);\n"
           "    const highp vec4 c2 = vec4(6.283185482, 0.1591549367, 1.000000000, 57.29577637);\n"
           "    const highp vec4 c3 = vec4(2.000000000, 3.000000000, 0.5000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal10);\n"
           "    r0.z = dot(hg_TexCoord0, hg_ProgramLocal11);\n"
           "    r1.z = abs(r0.x);\n"
           "    r0.w = abs(r0.z);\n"
           "    r0.y = max(r0.w, r1.z);\n"
           "    r1.x = 1.00000 / r0.y;\n"
           "    r0.y = min(r0.w, r1.z);\n"
           "    r0.y = r0.y*r1.x;\n"
           "    r1.x = r0.y*r0.y;\n"
           "    r1.y = r1.x*c0.y + c0.x;\n"
           "    r1.y = r1.y*r1.x + c0.z;\n"
           "    r1.y = r1.y*r1.x + c0.w;\n"
           "    r1.y = r1.y*r1.x + c1.y;\n"
           "    r1.x = r1.y*r1.x + c1.x;\n"
           "    r1.w = r1.x*r0.y;\n"
           "    r0.y = r0.z;\n"
           "    r1.xy = r0.xy*r0.xy;\n"
           "    r0.y = r1.z - r0.w;\n"
           "    r2.x = c1.z - r1.w;\n"
           "    r0.w = dot(r1.xy, vec2(1.00000));\n"
           "    r0.y = r0.y < 0.00000 ? r2.x : r1.w;\n"
           "    r2.x = c1.w - r0.y;\n"
           "    r0.y = r0.x < 0.00000 ? r2.x : r0.y;\n"
           "    r0.w = sqrt(r0.w);\n"
           "    r1.x = pow(r0.w, hg_ProgramLocal3.x);\n"
           "    r0.y = r0.z < 0.00000 ? -r0.y : r0.y;\n"
           "    r0.y = r1.x*hg_ProgramLocal4.x + r0.y;\n"
           "    r1.y = r0.y*c2.y;\n"
           "    r1.y = floor(r1.y);\n"
           "    r1.y = -r1.y*c2.x + r0.y;\n"
           "    r1.z = r1.y + c2.x;\n"
           "    r0.y = r0.y < 0.00000 ? r1.z : r0.y;\n"
           "    r1.y = r0.y/hg_ProgramLocal2.x;\n"
           "    r1.z = r1.x*hg_ProgramLocal4.x;\n"
           "    r1.y = floor(r1.y);\n"
           "    r1.w = r1.y*hg_ProgramLocal2.x + -r1.z;\n"
           "    r2.x = sin(r1.w);\n"
           "    r1.y = r1.y + c2.z;\n"
           "    r1.y = r1.y*hg_ProgramLocal2.x + -r1.z;\n"
           "    r2.y = r0.z*r2.x;\n"
           "    r1.w = cos(r1.w);\n"
           "    r2.y = r0.x*r1.w + r2.y;\n"
           "    r2.x = -r2.y*r2.x + r0.z;\n"
           "    r1.w = -r2.y*r1.w + r0.x;\n"
           "    r2.x = r2.x*r2.x;\n"
           "    r1.z = r1.w*r1.w + r2.x;\n"
           "    r1.w = sin(r1.y);\n"
           "    r2.x = r0.z*r1.w;\n"
           "    r1.y = cos(r1.y);\n"
           "    r2.x = r0.x*r1.y + r2.x;\n"
           "    r0.xz = -r2.xx*r1.yw + r0.xz;\n"
           "    r0.z = r0.z*r0.z;\n"
           "    r0.x = r0.x*r0.x + r0.z;\n"
           "    r0.z = r1.x/hg_ProgramLocal1.x;\n"
           "    r1.x = floor(r0.z);\n"
           "    r1.y = 1.00000 / hg_ProgramLocal3.x;\n"
           "    r0.z = r1.x*hg_ProgramLocal1.x;\n"
           "    r0.z = pow(r0.z, r1.y);\n"
           "    r1.w = r1.x*hg_ProgramLocal1.x + hg_ProgramLocal1.x;\n"
           "    r1.w = pow(r1.w, r1.y);\n"
           "    r1.y = r1.w - r0.w;\n"
           "    r0.z = r0.w - r0.z;\n"
           "    r0.z = min(r0.z, r1.y);\n"
           "    r1.z = sqrt(r1.z);\n"
           "    r0.x = sqrt(r0.x);\n"
           "    r0.x = min(r1.z, r0.x);\n"
           "    r0.x = min(r0.x, r0.z);\n"
           "    r0.z = r0.y/hg_ProgramLocal0.z;\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal8.x, 0.00000, 1.00000);\n"
           "    r0.w = r0.z*c2.w;\n"
           "    r1.y = floor(r0.w);\n"
           "    r1.z = r1.y*c3.z;\n"
           "    r0.w = r1.x*c3.z;\n"
           "    r1.z = floor(r1.z);\n"
           "    r0.w = floor(r0.w);\n"
           "    r0.w = -r0.w*c3.x + r1.x;\n"
           "    r1.y = -r1.z*c3.x + r1.y;\n"
           "    r0.w = r0.w - r1.y;\n"
           "    r0.y = r0.x*r0.x;\n"
           "    r0.z = -r0.x*c3.x + c3.y;\n"
           "    r0.y = r0.y*r0.z;\n"
           "    r2 = vec4(-abs(r0.w) < 0.00000 ? hg_ProgramLocal5.x : hg_ProgramLocal6.x, -abs(r0.w) < 0.00000 ? hg_Progr"
           "amLocal5.y : hg_ProgramLocal6.y, -abs(r0.w) < 0.00000 ? hg_ProgramLocal5.z : hg_ProgramLocal6.z, -abs(r0.w) <"
           " 0.00000 ? hg_ProgramLocal5.w : hg_ProgramLocal6.w);\n"
           "    r0.x = hg_ProgramLocal9.x < 0.00000 ? r0.y : r0.x;\n"
           "    gl_FragColor = mix(hg_ProgramLocal7, r2, r0.xxxx);\n"
           "}\n"
           "//MD5=7234e1c4:a32e7a07:b649f2ac:cf9c2fc0\n"
           "//SIG=00000000:00000000:00000000:00000000:0004:000c:0003:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcConcentricSquareChecker::InitProgramDescriptor(HgcConcentricSquareChecker *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcConcentricSquareChecker_hgc_visible", "//Metal1.0     \n//LEN=0000000c12\n[[ visible ]] FragmentOut HgcConcentricSquareChecker_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.05747731403, -0.01348046958, -0.1212390736, 0.1956359297);\n"
    "    const float4 c1 = float4(0.9999956489, -0.3329946101, 1.570796371, 3.141592741);\n"
    "    const float4 c2 = float4(6.283185482, 0.1591549367, 1.000000000, 57.29577637);\n"
    "    const float4 c3 = float4(2.000000000, 3.000000000, 0.5000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = dot(texCoord0, hg_Params[10]);\n"
    "    r0.z = dot(texCoord0, hg_Params[11]);\n"
    "    r1.z = abs(r0.x);\n"
    "    r0.w = abs(r0.z);\n"
    "    r0.y = fmax(r0.w, r1.z);\n"
    "    r1.x = 1.00000f / r0.y;\n"
    "    r0.y = fmin(r0.w, r1.z);\n"
    "    r0.y = r0.y*r1.x;\n"
    "    r1.x = r0.y*r0.y;\n"
    "    r1.y = r1.x*c0.y + c0.x;\n"
    "    r1.y = r1.y*r1.x + c0.z;\n"
    "    r1.y = r1.y*r1.x + c0.w;\n"
    "    r1.y = r1.y*r1.x + c1.y;\n"
    "    r1.x = r1.y*r1.x + c1.x;\n"
    "    r1.w = r1.x*r0.y;\n"
    "    r0.y = r0.z;\n"
    "    r1.xy = r0.xy*r0.xy;\n"
    "    r0.y = r1.z - r0.w;\n"
    "    r2.x = c1.z - r1.w;\n"
    "    r0.w = dot(r1.xy, 1.00000f);\n"
    "    r0.y = select(r1.w, r2.x, r0.y < 0.00000f);\n"
    "    r2.x = c1.w - r0.y;\n"
    "    r0.y = select(r0.y, r2.x, r0.x < 0.00000f);\n"
    "    r0.w = sqrt(r0.w);\n"
    "    r1.x = pow(r0.w, hg_Params[3].x);\n"
    "    r0.y = select(r0.y, -r0.y, r0.z < 0.00000f);\n"
    "    r0.y = r1.x*hg_Params[4].x + r0.y;\n"
    "    r1.y = r0.y*c2.y;\n"
    "    r1.y = floor(r1.y);\n"
    "    r1.y = -r1.y*c2.x + r0.y;\n"
    "    r1.z = r1.y + c2.x;\n"
    "    r0.y = select(r0.y, r1.z, r0.y < 0.00000f);\n"
    "    r1.y = r0.y/hg_Params[2].x;\n"
    "    r1.z = r1.x*hg_Params[4].x;\n"
    "    r1.y = floor(r1.y);\n"
    "    r1.w = r1.y*hg_Params[2].x + -r1.z;\n"
    "    r2.x = sin(r1.w);\n"
    "    r1.y = r1.y + c2.z;\n"
    "    r1.y = r1.y*hg_Params[2].x + -r1.z;\n"
    "    r2.y = r0.z*r2.x;\n"
    "    r1.w = cos(r1.w);\n"
    "    r2.y = r0.x*r1.w + r2.y;\n"
    "    r2.x = -r2.y*r2.x + r0.z;\n"
    "    r1.w = -r2.y*r1.w + r0.x;\n"
    "    r2.x = r2.x*r2.x;\n"
    "    r1.z = r1.w*r1.w + r2.x;\n"
    "    r1.w = sin(r1.y);\n"
    "    r2.x = r0.z*r1.w;\n"
    "    r1.y = cos(r1.y);\n"
    "    r2.x = r0.x*r1.y + r2.x;\n"
    "    r0.xz = -r2.xx*r1.yw + r0.xz;\n"
    "    r0.z = r0.z*r0.z;\n"
    "    r0.x = r0.x*r0.x + r0.z;\n"
    "    r0.z = r1.x/hg_Params[1].x;\n"
    "    r1.x = floor(r0.z);\n"
    "    r1.y = 1.00000f / hg_Params[3].x;\n"
    "    r0.z = r1.x*hg_Params[1].x;\n"
    "    r0.z = pow(r0.z, r1.y);\n"
    "    r1.w = r1.x*hg_Params[1].x + hg_Params[1].x;\n"
    "    r1.w = pow(r1.w, r1.y);\n"
    "    r1.y = r1.w - r0.w;\n"
    "    r0.z = r0.w - r0.z;\n"
    "    r0.z = fmin(r0.z, r1.y);\n"
    "    r1.z = sqrt(r1.z);\n"
    "    r0.x = sqrt(r0.x);\n"
    "    r0.x = fmin(r1.z, r0.x);\n"
    "    r0.x = fmin(r0.x, r0.z);\n"
    "    r0.z = r0.y/hg_Params[0].z;\n"
    "    r0.x = clamp(r0.x*hg_Params[8].x, 0.00000f, 1.00000f);\n"
    "    r0.w = r0.z*c2.w;\n"
    "    r1.y = floor(r0.w);\n"
    "    r1.z = r1.y*c3.z;\n"
    "    r0.w = r1.x*c3.z;\n"
    "    r1.z = floor(r1.z);\n"
    "    r0.w = floor(r0.w);\n"
    "    r0.w = -r0.w*c3.x + r1.x;\n"
    "    r1.y = -r1.z*c3.x + r1.y;\n"
    "    r0.w = r0.w - r1.y;\n"
    "    r0.y = r0.x*r0.x;\n"
    "    r0.z = -r0.x*c3.x + c3.y;\n"
    "    r0.y = r0.y*r0.z;\n"
    "    r2 = select(hg_Params[6], hg_Params[5], -fabs(r0.wwww) < 0.00000f);\n"
    "    r0.x = select(r0.x, r0.y, hg_Params[9].x < 0.00000f);\n"
    "    output.color0 = mix(hg_Params[7], r2, r0.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28844A4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcConcentricSquareChecker");
}

void sub_1B28844B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051E50;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28845B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28845F4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28845ECLL);
}

_QWORD *HgcConcentricSquareChecker::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcConcentricSquareChecker [hgc1]");
}

uint64_t HgcConcentricSquareChecker::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcConcentricSquareChecker::Bind(HgcConcentricSquareChecker *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HgcConcentricSquareChecker *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcConcentricSquareChecker::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  float32x4_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x8_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x16_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  int8x16_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int8x16_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int8x16_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int32x4_t v173;
  int8x16_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  int64x2_t v184;
  int8x16_t v185;
  float32x4_t v186;
  int32x4_t v187;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  int32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    *(float32x2_t *)v6.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v6.i64[1] = 0x3F80000000000000;
    v189 = v6;
    v7 = 16 * a2[3].i32[0];
    do
    {
      if (v4 >= 1)
      {
        v8 = 0;
        v9 = v189;
        do
        {
          v204 = v9;
          v10 = *(_QWORD *)(a1 + 408);
          v11 = vmulq_f32(v9, *(float32x4_t *)(v10 + 160));
          v12 = vaddq_f32(v11, (float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 4uLL));
          v13 = vmulq_f32(v9, *(float32x4_t *)(v10 + 176));
          v14 = vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL));
          v15 = (int8x16_t)vaddq_f32(v12, (float32x4_t)vdupq_laneq_s64((int64x2_t)v12, 1));
          v16 = (int8x16_t)vaddq_f32(v14, (float32x4_t)vdupq_lane_s64(v14.i64[0], 0));
          v17.i64[0] = v15.i64[0];
          v17.i64[1] = v16.i64[1];
          v18 = (int64x2_t)vabsq_f32((float32x4_t)vextq_s8(v16, v15, 8uLL));
          v19 = *(int8x16_t *)(v10 + 208);
          v20 = vandq_s8(*(int8x16_t *)(v10 + 192), (int8x16_t)vsliq_n_s64(v17, v17, 0x20uLL));
          v21 = (int32x4_t)vbslq_s8(v19, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8(v20, v20, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL)), v20);
          v22 = (float32x4_t)vrev64q_s32(v21);
          v24 = *(float32x4_t *)(v10 + 224);
          v23 = *(float32x4_t *)(v10 + 240);
          v25 = vminq_f32(vmaxq_f32(vrecpeq_f32(v22), v24), v23);
          v26 = vminq_f32(vmaxq_f32(vmulq_f32(v25, vrecpsq_f32(v22, v25)), v24), v23);
          v27 = (int32x4_t)vmulq_f32(v26, vrecpsq_f32(v22, v26));
          *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
          v26.i64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v27, 0xCuLL).u64[0];
          v28 = (int32x4_t)vbslq_s8(v19, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), v26), v20), *(float *)v27.i32), v20);
          v27.i64[0] = vmulq_lane_f32((float32x4_t)vrev64q_s32(v28), *(float32x2_t *)v28.i8, 1).u64[0];
          v26.i64[0] = v27.i64[0];
          v26.i64[1] = v18.i64[1];
          v27.i64[1] = vdupq_laneq_s64(v18, 1).u64[0];
          v30 = *(float32x4_t *)(v10 + 256);
          v29 = *(float32x4_t *)(v10 + 272);
          v31 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vaddq_f32(v24, vmulq_f32(v30, (float32x4_t)vrev64q_s32(v27))), (int8x16_t)v26);
          v32 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vaddq_f32(v29, vmulq_n_f32(v31, v31.f32[0])), (int8x16_t)v26);
          v202 = *(float32x4_t *)(v10 + 288);
          v203 = *(float32x4_t *)(v10 + 304);
          v33 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vaddq_f32(v202, vmulq_n_f32(v32, v32.f32[0])), (int8x16_t)v26);
          v34 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vaddq_f32(v203, vmulq_n_f32(v33, v33.f32[0])), (int8x16_t)v26);
          v36 = *(int8x16_t *)(v10 + 320);
          v35 = *(int8x16_t *)(v10 + 336);
          v37 = vbslq_s8(v36, (int8x16_t)v34, (int8x16_t)vmulq_n_f32((float32x4_t)vdupq_lane_s64(v28.i64[0], 0), vaddq_f32(v203, vmulq_lane_f32(v34, *(float32x2_t *)v34.f32, 1)).f32[0]));
          v38 = (float32x4_t)vbslq_s8(v19, vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL), v20);
          v39 = (int8x16_t)vmulq_f32(v38, v38);
          v26.i64[0] = vextq_s8(v37, v37, 8uLL).u64[0];
          v40 = vext_s8(*(int8x8_t *)v39.i8, *(int8x8_t *)v26.f32, 4uLL);
          *(int8x8_t *)v26.f32 = vext_s8(*(int8x8_t *)v26.f32, *(int8x8_t *)v39.i8, 4uLL);
          *(int8x8_t *)v41.f32 = v40;
          v41.i64[1] = v26.i64[0];
          *(int8x8_t *)&v26.u32[2] = v40;
          v42 = (float32x4_t)vextq_s8(v37, v39, 8uLL);
          v43 = (float32x4_t)vbslq_s8(v35, (int8x16_t)vaddq_f32(v41, v42), vbslq_s8(v19, (int8x16_t)vsubq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL)), v20));
          v44 = *(float32x4_t *)(v10 + 352);
          v199 = *(int32x4_t *)(v10 + 368);
          v45 = (int32x4_t)vbslq_s8(v19, vbslq_s8((int8x16_t)vcgtq_f32(v44, v43), (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(v202, v26)), (int8x16_t)v42), (int8x16_t)v43);
          v46 = (float32x4_t)vrev64q_s32(v45);
          v47 = (float32x4_t)vbslq_s8(v19, vbslq_s8((int8x16_t)vcgtq_f32(v44, v46), (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(v44, v46)), (int8x16_t)v45), (int8x16_t)v43);
          v48 = vminq_f32(vrsqrteq_f32(v47), v44);
          v49 = vminq_f32(vmulq_f32(v48, vrsqrtsq_f32(vmulq_f32(v48, v47), v48)), v44);
          v50 = vbslq_s8(v35, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v49, vrsqrtsq_f32(vmulq_f32(v49, v47), v49)), v44), v47), (int8x16_t)v47);
          v51 = *(int32x4_t *)(v10 + 32);
          v190 = *(float32x4_t *)(v10 + 48);
          v52 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vceqq_f32(v190, v29)), v29), (int8x16_t)v30, vextq_s8(v50, v50, 0xCuLL));
          v201 = *(float32x4_t *)(v10 + 384);
          v200 = *(float32x4_t *)(v10 + 400);
          v53 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v52, (int8x16_t)v199), (int8x16_t)v30);
          v197 = *(float32x4_t *)(v10 + 416);
          v198 = *(float32x4_t *)(v10 + 432);
          v54 = (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v53, v198));
          v55 = *(float32x4_t *)(v10 + 448);
          v56 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v52, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v200, (int8x16_t)vcgtq_f32(v201, v52))), v197), v54);
          v57 = vsubq_f32(vsubq_f32(v53, v30), vmulq_f32(vmulq_f32(v55, v54), v53));
          v195 = *(float32x4_t *)(v10 + 480);
          v196 = *(float32x4_t *)(v10 + 464);
          v58 = vmulq_f32(v57, v57);
          v193 = *(float32x4_t *)(v10 + 512);
          v194 = *(float32x4_t *)(v10 + 496);
          v191 = *(float32x4_t *)(v10 + 544);
          v192 = *(float32x4_t *)(v10 + 528);
          v59 = *(float32x4_t *)(v10 + 576);
          v60 = *(float32x4_t *)(v10 + 592);
          v61 = vmaxq_f32(vmulq_f32(v190, vaddq_f32(v56, vmulq_f32(v57, vaddq_f32(*(float32x4_t *)(v10 + 560), vmulq_f32(v57, vaddq_f32(vaddq_f32(v192, vmulq_f32(v191, v57)), vmulq_f32(v58, vaddq_f32(vaddq_f32(v196, vmulq_f32(v195, v57)), vmulq_f32(v58, vaddq_f32(v194, vmulq_f32(v193, v57))))))))))), v59);
          v62 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
          v63 = vsubq_f32(v62, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v62, v61)));
          v64 = vsubq_f32(v61, v63);
          v66 = *(float32x4_t *)(v10 + 608);
          v65 = *(float32x4_t *)(v10 + 624);
          v68 = *(float32x4_t *)(v10 + 640);
          v67 = *(float32x4_t *)(v10 + 656);
          v69 = vmulq_f32(v64, vaddq_f32(v67, vmulq_f32(v64, vaddq_f32(vaddq_f32(v65, vmulq_f32(v68, v64)), vmulq_f32(vmulq_f32(v64, v64), vaddq_f32(v60, vmulq_f32(v66, v64)))))));
          v70 = *(int32x4_t *)(v10 + 672);
          v71 = *(int8x16_t *)(v10 + 688);
          v72 = (int8x16_t)vmulq_f32(vaddq_f32(v30, v69), (float32x4_t)vshlq_n_s32(vaddq_s32(v70, vcvtq_s32_f32(v63)), 0x17uLL));
          v73 = *(int32x4_t *)(v10 + 64);
          v74 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vaddq_f32(vmulq_n_f32((float32x4_t)vrev64q_s32(v73), *(float *)v72.i32), (float32x4_t)vbslq_s8(v19, veorq_s8(vandq_s8(vextq_s8(v50, v50, 4uLL), (int8x16_t)v70), v50), v50)), v50);
          v75 = (float32x4_t)vbslq_s8(v71, v72, (int8x16_t)vmulq_f32(v67, v74));
          v76 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
          v77 = (float32x4_t)vbslq_s8(v71, v72, (int8x16_t)vsubq_f32(v74, vmulq_f32(v65, (float32x4_t)vbslq_s8(v71, v72, (int8x16_t)vsubq_f32(v76, (float32x4_t)vandq_s8((int8x16_t)v68, (int8x16_t)vcgtq_f32(v76, v75)))))));
          v77.i64[1] = vaddq_f32(v67, (float32x4_t)vextq_s8(*(int8x16_t *)&v70, *(int8x16_t *)&v77, 0xCuLL)).i64[1];
          v78 = (float32x4_t)vbslq_s8(v19, vbslq_s8((int8x16_t)vcgtq_f32(v66, v74), vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL), (int8x16_t)v74), v50);
          v79 = (float32x4_t)vrev64q_s32(v51);
          v80 = vminq_f32(vmaxq_f32(vrecpeq_f32(v79), v60), v23);
          v81 = vminq_f32(vmaxq_f32(vmulq_f32(v80, vrecpsq_f32(v79, v80)), v60), v23);
          v77.i64[0] = vbslq_s8(v71, (int8x16_t)v77, (int8x16_t)vmulq_f32(vmulq_f32(v81, vrecpsq_f32(v79, v81)), v78)).u64[0];
          v77.i64[1] = vmulq_n_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v73, 0), *(float *)&v77).i64[1];
          v82 = vcvtq_f32_s32(vcvtq_s32_f32(v77));
          v83 = (int32x4_t)vbslq_s8(v19, (int8x16_t)vsubq_f32(v82, (float32x4_t)vandq_s8((int8x16_t)v68, (int8x16_t)vcgtq_f32(v82, v77))), (int8x16_t)v77);
          v84 = v35;
          v85 = (float32x4_t)vbslq_s8(v35, (int8x16_t)vsubq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL), *(float32x2_t *)v83.i8, 1), (float32x4_t)vrev64q_s32(v83)), (int8x16_t)v83);
          v87 = *(float32x4_t *)(v10 + 704);
          v86 = *(float32x4_t *)(v10 + 720);
          v88 = vaddq_f32(v87, vmulq_f32(v86, (float32x4_t)vextq_s8((int8x16_t)v85, (int8x16_t)v85, 0xCuLL)));
          v89 = vcvtq_f32_s32(vcvtq_s32_f32(v88));
          v90 = vaddq_f32(v87, vabdq_f32(vsubq_f32(v88, vsubq_f32(v89, (float32x4_t)vandq_s8((int8x16_t)v30, (int8x16_t)vcgtq_f32(v89, v88)))), v55));
          v91 = vmulq_f32(v90, v90);
          v93 = *(float32x4_t *)(v10 + 736);
          v92 = *(float32x4_t *)(v10 + 752);
          v94 = *(float32x4_t *)(v10 + 768);
          v95 = *(float32x4_t *)(v10 + 784);
          v96 = (int32x4_t)vmulq_f32(v90, vaddq_f32(v95, vmulq_f32(v91, vaddq_f32(v94, vmulq_f32(v91, vaddq_f32(v93, vmulq_f32(v92, v91)))))));
          v97 = *(float32x4_t *)(v10 + 800);
          v98 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vaddq_f32(v97, v85), (int8x16_t)v85);
          v99 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vsubq_f32(vmulq_n_f32(v98, *(float *)v51.i32), (float32x4_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 4uLL)), (int8x16_t)v85);
          v100 = vmulq_f32(v95, v99);
          v101 = vcvtq_f32_s32(vcvtq_s32_f32(v100));
          v102 = vsubq_f32(vabdq_f32(vsubq_f32(v100, vsubq_f32(v101, (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v101, v100)))), v92), v93);
          v103 = vmulq_f32(v102, v102);
          v104 = vmulq_f32(v102, vaddq_f32(v68, vmulq_f32(v103, vaddq_f32(v67, vmulq_f32(v103, vaddq_f32(v86, vmulq_f32(v87, v103)))))));
          v105 = (int8x16_t)vaddq_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v104, (int8x16_t)v99, 8uLL), v78.f32[0]), (float32x4_t)vbslq_s8(v71, (int8x16_t)v96, (int8x16_t)vmulq_laneq_f32((float32x4_t)vrev64q_s32(v96), v78, 2)));
          v106 = (float32x4_t)vbslq_s8(v71, (int8x16_t)v96, v105);
          v107 = (float32x4_t)vbslq_s8(v71, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), vmulq_lane_f32(v106, *(float32x2_t *)v106.f32, 1)), v105);
          v108 = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), vmulq_lane_f32(v104, *(float32x2_t *)v107.f32, 1));
          v109 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(vmulq_f32(v107, v107).i64[0], 0), vmulq_laneq_f32((float32x4_t)vrev64q_s32((int32x4_t)v108), v108, 3));
          v107.i64[0] = v99.i64[0];
          v107.i64[1] = v109.i64[1];
          v110 = vaddq_f32(v65, vmulq_f32(v95, (float32x4_t)vextq_s8(v109, (int8x16_t)v99, 8uLL)));
          v111 = vcvtq_f32_s32(vcvtq_s32_f32(v110));
          v112 = vaddq_f32(v65, vabdq_f32(vsubq_f32(v110, vsubq_f32(v111, (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v111, v110)))), v92));
          v113 = vmulq_f32(v112, v112);
          v114 = (float32x4_t)vbslq_s8(v35, (int8x16_t)vmulq_f32(v112, vaddq_f32(v68, vmulq_f32(v113, vaddq_f32(v67, vmulq_f32(v113, vaddq_f32(v86, vmulq_f32(v87, v113))))))), (int8x16_t)v107);
          v115 = vmulq_f32(v95, v114);
          v116 = vcvtq_f32_s32(vcvtq_s32_f32(v115));
          v117 = vsubq_f32(vabdq_f32(vsubq_f32(v115, vsubq_f32(v116, (float32x4_t)vandq_s8((int8x16_t)v97, (int8x16_t)vcgtq_f32(v116, v115)))), v94), v92);
          v118 = vmulq_f32(v117, v117);
          v119 = (int32x4_t)vbslq_s8(v19, (int8x16_t)vmulq_f32(v117, vaddq_f32(v65, vmulq_f32(v118, vaddq_f32(v87, vmulq_f32(v118, vaddq_f32(v93, vmulq_f32(v86, v118))))))), (int8x16_t)v114);
          v120 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v10 + 816), (int8x16_t)vsubq_f32(v78, vmulq_n_f32((float32x4_t)vrev64q_s32(v119), vaddq_f32(vmulq_laneq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), v114, 3), vmulq_lane_f32(v78, *(float32x2_t *)v119.i8, 1)).f32[0])), (int8x16_t)v78);
          v121 = (float32x4_t)vbslq_s8(v36, (int8x16_t)vmulq_f32(v120, v120), (int8x16_t)v120);
          v122 = vbslq_s8(v71, (int8x16_t)vaddq_f32(vmulq_f32(v121, v121), (float32x4_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL)), (int8x16_t)v121);
          v123 = *(int8x16_t *)(v10 + 16);
          v124 = (float32x4_t)vextq_s8(v123, v123, 8uLL);
          v125 = vminq_f32(vmaxq_f32(vrecpeq_f32(v124), v95), v23);
          v126 = vminq_f32(vmaxq_f32(vmulq_f32(v125, vrecpsq_f32(v124, v125)), v95), v23);
          v127 = vbslq_s8(v36, (int8x16_t)vmulq_n_f32(vmulq_f32(v126, vrecpsq_f32(v124, v126)), *(float *)v119.i32), v122);
          v128 = (float32x4_t)vextq_s8(v127, v127, 8uLL);
          v129 = vcvtq_f32_s32(vcvtq_s32_f32(v128));
          v128.i64[0] = vsubq_f32(v129, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v129, v128), (int8x16_t)v30, (int8x16_t)0)).u64[0];
          v128.i64[1] = v119.i64[1];
          v130 = (float32x4_t)vrev64q_s32((int32x4_t)v190);
          v131 = vminq_f32(vmaxq_f32(vmulq_f32(v59, vrecpeq_f32(v130)), v60), v23);
          v132 = vbslq_s8(v19, (int8x16_t)vmulq_f32(v131, vrecpsq_f32(v130, v131)), (int8x16_t)v128);
          v133 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vceqq_f32((float32x4_t)vextq_s8(v132, v132, 0xCuLL), v97)), v97), (int8x16_t)v94, vbslq_s8(v36, (int8x16_t)vmulq_n_f32(v124, *(float *)v132.i32), v122));
          v134 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v133, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v93, (int8x16_t)vcgtq_f32(v92, v133))), v86);
          v135 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v133, (int8x16_t)v70), (int8x16_t)v94);
          v136 = (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v135, v87));
          v137 = vaddq_f32(v134, v136);
          v138 = vsubq_f32(vsubq_f32(v135, v94), vmulq_f32(vmulq_f32(v68, v136), v135));
          v139 = vmulq_f32(v138, v138);
          v140 = vmulq_f32(v139, vaddq_f32(vaddq_f32(v65, vmulq_f32(v66, v138)), vmulq_f32(v139, vaddq_f32(v60, vmulq_f32(v59, v138)))));
          v141 = *(float32x4_t *)(v10 + 560);
          v142 = vmaxq_f32(vmulq_lane_f32(vaddq_f32(v137, vmulq_f32(v138, vaddq_f32(v192, vmulq_f32(v138, vaddq_f32(vaddq_f32(v141, vmulq_f32(v191, v138)), v140))))), *(float32x2_t *)v132.i8, 1), v193);
          v143 = vcvtq_f32_s32(vcvtq_s32_f32(v142));
          v144 = vsubq_f32(v143, (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v143, v142)));
          v145 = vsubq_f32(v142, v144);
          v146 = (float32x4_t)vextq_s8(v123, v123, 4uLL);
          v147 = vbslq_s8(v84, (int8x16_t)vaddq_f32(v146, vmulq_n_f32(v146, *(float *)v132.i32)), v132);
          v148 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vceqq_f32((float32x4_t)vextq_s8(v147, v147, 8uLL), v97)), v97), (int8x16_t)v94, v147);
          v149 = vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v148, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v60, (int8x16_t)vcgtq_f32(v66, v148))), v59);
          v150 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v148, (int8x16_t)v70), (int8x16_t)v94);
          v151 = (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v150, v141));
          v152 = vsubq_f32(vsubq_f32(v150, v94), vmulq_f32(vmulq_f32(v92, v151), v150));
          v153 = vmulq_f32(v152, v152);
          v154 = vaddq_f32(vaddq_f32(v149, v151), vmulq_f32(v152, vaddq_f32(v55, vmulq_f32(v152, vaddq_f32(vaddq_f32(v195, vmulq_f32(v196, v152)), vmulq_f32(v153, vaddq_f32(vaddq_f32(v191, vmulq_f32(v192, v152)), vmulq_f32(v153, vaddq_f32(v193, vmulq_f32(v194, v152))))))))));
          v155 = (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v144), v199), 0x17uLL);
          v156 = vmaxq_f32(vmulq_lane_f32(v154, *(float32x2_t *)v147.i8, 1), v198);
          v157 = vcvtq_f32_s32(vcvtq_s32_f32(v156));
          v158 = (int8x16_t)vmulq_f32(vaddq_f32(v94, vmulq_f32(v145, vaddq_f32(v198, vmulq_f32(v145, vaddq_f32(vaddq_f32(v196, vmulq_f32(v55, v145)), vmulq_f32(vmulq_f32(v145, v145), vaddq_f32(v194, vmulq_f32(v195, v145)))))))), v155);
          v159 = vsubq_f32(v157, (float32x4_t)vandq_s8((int8x16_t)v94, (int8x16_t)vcgtq_f32(v157, v156)));
          v160 = vsubq_f32(v156, v159);
          v161 = (float32x4_t)vbslq_s8(v36, v158, v122);
          v162 = (float32x4_t)vbslq_s8(v84, (int8x16_t)vmulq_f32(vaddq_f32(v94, vmulq_f32(v160, vaddq_f32(v202, vmulq_f32(v160, vaddq_f32(vaddq_f32(v201, vmulq_f32(v203, v160)), vmulq_f32(vmulq_f32(v160, v160), vaddq_f32(v197, vmulq_f32(v200, v160)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v159), v199), 0x17uLL)), v132);
          v163 = (int8x16_t)vsubq_f32(v162, v161);
          v164 = (float32x4_t)vbslq_s8(v19, vextq_s8(v163, v163, 8uLL), (int8x16_t)v162);
          v117.i64[0] = v161.i64[0];
          v117.i64[1] = vsubq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v161), v161).i64[1];
          v161.i64[1] = vminq_f32(v117, (float32x4_t)vextq_s8(*(int8x16_t *)&v164, *(int8x16_t *)&v164, 0xCuLL)).i64[1];
          v165 = vminq_f32(vrsqrteq_f32(v164), v197);
          v166 = vminq_f32(vmulq_f32(v165, vrsqrtsq_f32(vmulq_f32(v165, v164), v165)), v197);
          v167 = vminq_f32(vrsqrteq_f32(v161), v23);
          v168 = (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v166, vrsqrtsq_f32(vmulq_f32(v166, v164), v166)), v197), v164);
          v169 = vminq_f32(vmulq_f32(v167, vrsqrtsq_f32(vmulq_f32(v167, v161), v167)), v23);
          v170 = (float32x4_t)vbslq_s8(v71, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v168, (int8x16_t)v164, 8uLL), (float32x4_t)vbslq_s8(v71, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v169, vrsqrtsq_f32(vmulq_f32(v169, v161), v169)), v23), v161), (int8x16_t)v161)), (int8x16_t)v161);
          v161.i64[0] = vbslq_s8(v71, (int8x16_t)vminq_f32(v170, (float32x4_t)vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL)), (int8x16_t)v161).u64[0];
          v171 = vminq_f32(vmaxq_f32(vrecpeq_f32(*(float32x4_t *)v10), v95), v23);
          v172 = vminq_f32(vmaxq_f32(vmulq_f32(v171, vrecpsq_f32(*(float32x4_t *)v10, v171)), v95), v23);
          v173 = (int32x4_t)vmulq_lane_f32(vmulq_f32(v172, vrecpsq_f32(*(float32x4_t *)v10, v172)), *(float32x2_t *)v161.f32, 1);
          v161.i64[1] = v173.i64[1];
          v174 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_f32(*(float32x4_t *)(v10 + 128), v161), v97), v30);
          v164.i64[1] = v168.i64[1];
          v175 = (float32x4_t)vextq_s8((int8x16_t)vmulq_f32(*(float32x4_t *)(v10 + 272), (float32x4_t)vrev64q_s32(v173)), v174, 8uLL);
          v176 = vcvtq_f32_s32(vcvtq_s32_f32(v175));
          v177 = (float32x4_t)vbslq_s8(v71, (int8x16_t)v164, (int8x16_t)vsubq_f32(v176, (float32x4_t)vandq_s8((int8x16_t)v97, (int8x16_t)vcgtq_f32(v176, v175))));
          v178 = vmulq_f32(v68, (float32x4_t)vextq_s8((int8x16_t)v177, (int8x16_t)v177, 0xCuLL));
          v176.i64[0] = v177.i64[0];
          v176.i64[1] = v178.i64[1];
          v178.i64[0] = vextq_s8((int8x16_t)v178, (int8x16_t)v177, 0xCuLL).u64[0];
          v178.i64[1] = v178.i64[0];
          v172.i64[0] = v174.i64[0];
          v172.i64[1] = vmulq_f32(v92, v178).i64[1];
          v179 = vcvtq_f32_s32(vcvtq_s32_f32(v176));
          v180 = vsubq_f32(v179, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v179, v176), (int8x16_t)v94, (int8x16_t)0));
          v181 = vcvtq_f32_s32(vcvtq_s32_f32(v172));
          v182 = vmulq_f32(v30, vsubq_f32(v181, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v181, v172), (int8x16_t)v94, (int8x16_t)0)));
          v183 = vmulq_laneq_f32(v141, v180, 2);
          v180.i64[0] = vextq_s8((int8x16_t)v180, (int8x16_t)v177, 0xCuLL).u64[0];
          v180.i64[1] = v180.i64[0];
          v184 = (int64x2_t)vsubq_f32(vsubq_f32(v180, v182), (float32x4_t)vdupq_lane_s64(vsubq_f32(v177, v183).i64[0], 0));
          v182.i64[0] = v174.i64[0];
          v182.i64[1] = vdupq_laneq_s64(v184, 1).u64[0];
          v174.i64[1] = v184.i64[1];
          v185 = vbslq_s8(v19, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v182), *(float *)v174.i32), v174);
          v186 = (float32x4_t)vbslq_s8(v36, (int8x16_t)vsubq_f32(v200, vmulq_f32(v201, (float32x4_t)vextq_s8(v185, v185, 8uLL))), v185);
          v187 = (int32x4_t)vbslq_s8(v19, (int8x16_t)vmulq_laneq_f32(v186, v186, 2), (int8x16_t)v186);
          *(float32x4_t *)(*(_QWORD *)&v5 + v8) = vaddq_f32(*(float32x4_t *)(v10 + 112), vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vceqq_f32((float32x4_t)vdupq_laneq_s32(v187, 3), *(float32x4_t *)(v10 + 832)), *(int8x16_t *)(v10 + 80), *(int8x16_t *)(v10 + 96)), *(float32x4_t *)(v10 + 112)), *(float *)vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v10 + 832), *(float32x4_t *)(v10 + 144)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v187.i8, 1), (int8x16_t)v187).i32));
          v9 = vaddq_f32(v204, (float32x4_t)xmmword_1B304F230);
          v8 += 16;
        }
        while (16 * v4 != v8);
      }
      v189 = vaddq_f32(v189, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcConcentricSquareChecker::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcConcentricSquareChecker::GetROI()
{
  return 0;
}

void HgcConcentricSquareChecker::HgcConcentricSquareChecker(HgcConcentricSquareChecker *this)
{
  _QWORD *v2;
  HgcConcentricSquareChecker::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E9788;
  v3 = (HgcConcentricSquareChecker::State *)operator new();
  HgcConcentricSquareChecker::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28853C0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcConcentricSquareChecker::~HgcConcentricSquareChecker(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E9788;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40BBCF7DE3);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcConcentricSquareChecker::~HgcConcentricSquareChecker(this);
  HGObject::operator delete(v1);
}

uint64_t HgcConcentricSquareChecker::SetParameter(HgcConcentricSquareChecker *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  __n128 *v17;
  float *v18;
  float *v19;

  switch((int)a2)
  {
    case 0:
      v7 = (__n128 *)*((_QWORD *)this + 51);
      if (v7->n128_f32[0] == 0.0
        && v7->n128_f32[1] == 0.0
        && v7->n128_f32[2] == a3.n128_f32[0]
        && v7->n128_f32[3] == 0.0)
      {
        return 0;
      }
      v7->n128_u64[0] = 0;
      v7->n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v7->n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v7[53] = a3;
      goto LABEL_63;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_63;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_63;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_63;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_63;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_63;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_63;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_63;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_63;
    case 9:
      v17 = (__n128 *)*((_QWORD *)this + 51);
      if (v17[9].n128_f32[0] == (float)-a3.n128_f32[0]
        && v17[9].n128_f32[1] == 0.0
        && v17[9].n128_f32[2] == 0.0
        && v17[9].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v17[9].n128_f32[0] = -a3.n128_f32[0];
      v17[9].n128_u64[1] = 0;
      v17[9].n128_u32[1] = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v17[54] = a3;
      goto LABEL_63;
    case 10:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6)
        return 0;
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_63;
    case 11:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6)
        return 0;
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
LABEL_63:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

uint64_t HgcConcentricSquareChecker::GetParameter(HgcConcentricSquareChecker *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[212];
      a3[1] = v3[213];
      a3[2] = v3[214];
      v4 = v3 + 215;
      goto LABEL_14;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_14;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_14;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_14;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_14;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_14;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_14;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_14;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_14;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[216];
      a3[1] = v13[217];
      a3[2] = v13[218];
      v4 = v13 + 219;
      goto LABEL_14;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      v4 = v14 + 43;
      goto LABEL_14;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      v4 = v15 + 47;
LABEL_14:
      result = 0;
      a3[3] = *v4;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

double HgcConcentricSquareChecker::State::State(HgcConcentricSquareChecker::State *this)
{
  double result;
  __int128 v2;
  __int128 v3;

  result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)&v2 = 0x8000000080000000;
  *((_QWORD *)&v2 + 1) = 0x8000000080000000;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = v2;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = xmmword_1B3051A80;
  *((_OWORD *)this + 13) = xmmword_1B3050FF0;
  *((_OWORD *)this + 14) = xmmword_1B3051C20;
  *((int32x4_t *)this + 15) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 16) = xmmword_1B3051E60;
  *((_OWORD *)this + 17) = xmmword_1B3051E70;
  *((_OWORD *)this + 18) = xmmword_1B3051E80;
  *((_OWORD *)this + 19) = xmmword_1B3051E90;
  *((_OWORD *)this + 20) = xmmword_1B3050FE0;
  *((_OWORD *)this + 21) = xmmword_1B3050F70;
  *((_OWORD *)this + 22) = xmmword_1B3051EA0;
  *((_OWORD *)this + 23) = xmmword_1B3051EB0;
  *((_OWORD *)this + 24) = xmmword_1B3051EC0;
  *((_OWORD *)this + 25) = xmmword_1B3051ED0;
  *((_OWORD *)this + 26) = xmmword_1B3051EE0;
  *((_OWORD *)this + 27) = xmmword_1B3051EF0;
  *((_OWORD *)this + 28) = xmmword_1B3051F00;
  *((_OWORD *)this + 29) = xmmword_1B3051F10;
  *((_OWORD *)this + 30) = xmmword_1B3051F20;
  *((_OWORD *)this + 31) = xmmword_1B3051F30;
  *((_OWORD *)this + 32) = xmmword_1B3051F40;
  *((_OWORD *)this + 33) = xmmword_1B3051F50;
  *((_OWORD *)this + 34) = xmmword_1B3051F60;
  *((_OWORD *)this + 35) = xmmword_1B3051F70;
  *((_OWORD *)this + 36) = xmmword_1B3051F80;
  *((_OWORD *)this + 37) = xmmword_1B3051F90;
  *((_OWORD *)this + 38) = xmmword_1B3051FA0;
  *((_OWORD *)this + 39) = xmmword_1B3051FB0;
  *((_OWORD *)this + 40) = xmmword_1B3051FC0;
  *((_OWORD *)this + 41) = xmmword_1B3051FD0;
  *((_OWORD *)this + 42) = xmmword_1B3051FE0;
  *((_OWORD *)this + 43) = xmmword_1B3050E20;
  *((_OWORD *)this + 44) = xmmword_1B3051FF0;
  *((_OWORD *)this + 45) = xmmword_1B3052000;
  *((_OWORD *)this + 46) = xmmword_1B3052010;
  *((_OWORD *)this + 47) = xmmword_1B3052020;
  *((_OWORD *)this + 48) = xmmword_1B3052030;
  *((_OWORD *)this + 49) = xmmword_1B3052040;
  *(_QWORD *)&v3 = 0xFFFFFFFFLL;
  *((_QWORD *)&v3 + 1) = 0xFFFFFFFFLL;
  *((_OWORD *)this + 50) = xmmword_1B304F240;
  *((_OWORD *)this + 51) = v3;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 52) = 0u;
  return result;
}

uint64_t HgcZoomBlur::Setup(HgcZoomBlur *this, void *a2)
{
  uint64_t v2;
  __int128 v3;
  float32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  __int128 v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  float32x4_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  float32x4_t v19;
  __int128 v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  int8x16_t v28;
  uint64_t v29;

  v2 = *((_QWORD *)this + 51);
  v3 = *(_OWORD *)(v2 + 304);
  v4 = *(float32x4_t *)(v2 + 16);
  v5 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v4, 2);
  v6 = (int8x16_t)vsubq_f32(*(float32x4_t *)(v2 + 336), *(float32x4_t *)v2);
  v7 = vmulq_laneq_f32((float32x4_t)vextq_s8(v6, v6, 8uLL), v4, 2);
  v8 = (int8x16_t)vmulq_laneq_f32((float32x4_t)0, v4, 2);
  v5.i64[0] = vextq_s8(v5, v5, 8uLL).u64[0];
  *(float32x2_t *)&v9 = vmul_f32(*(float32x2_t *)(v2 + 288), *(float32x2_t *)v5.i8);
  *((int8x8_t *)&v9 + 1) = vand_s8(*(int8x8_t *)&v9, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v2 + 352), *(int8x16_t *)(v2 + 352), 8uLL));
  v10 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL), v7);
  *(_OWORD *)(v2 + 32) = v9;
  *(float32x2_t *)&v9 = vmul_f32(*(float32x2_t *)&v3, *(float32x2_t *)v5.i8);
  v11 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v9 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v11 + 352), *(int8x16_t *)(v11 + 352), 8uLL), *(int8x8_t *)&v9);
  *(_OWORD *)(v11 + 48) = v9;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 64) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 352), vextq_s8(v8, v8, 8uLL), *(int8x16_t *)(*((_QWORD *)this + 51) + 320));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 80) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 352), vextq_s8(v10, v10, 8uLL), *(int8x16_t *)(*((_QWORD *)this + 51) + 336));
  v12 = *((_QWORD *)this + 51);
  v13 = *(_OWORD *)(v12 + 304);
  v14 = *(float32x4_t *)(v12 + 16);
  v15 = (int8x16_t)vaddq_f32(*(float32x4_t *)v12, vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v12 + 336), *(float32x4_t *)v12), v14, 3));
  *(float32x2_t *)&v9 = vmul_laneq_f32(*(float32x2_t *)(v12 + 288), v14, 3);
  *((int8x8_t *)&v9 + 1) = vand_s8(*(int8x8_t *)&v9, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v12 + 352), *(int8x16_t *)(v12 + 352), 8uLL));
  *(_OWORD *)(v12 + 96) = v9;
  *(float32x2_t *)&v9 = vmul_laneq_f32(*(float32x2_t *)&v13, v14, 3);
  v16 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v9 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v16 + 352), *(int8x16_t *)(v16 + 352), 8uLL), *(int8x8_t *)&v9);
  *(_OWORD *)(v16 + 112) = v9;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 128) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 352), (int8x16_t)vmulq_laneq_f32((float32x4_t)0, v14, 3), *(int8x16_t *)(*((_QWORD *)this + 51) + 320));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 144) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 352), v15, *(int8x16_t *)(*((_QWORD *)this + 51) + 336));
  v17 = *((_QWORD *)this + 51);
  v18 = *(_OWORD *)(v17 + 304);
  v19 = *(float32x4_t *)v17;
  v20 = *(_OWORD *)(v17 + 16);
  v21 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v20, 1);
  v22 = vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(v17 + 336), *(float32x4_t *)v17), *(float32x2_t *)&v20, 1);
  v23 = (int8x16_t)vmulq_lane_f32((float32x4_t)0, *(float32x2_t *)&v20, 1);
  v21.i64[0] = vextq_s8(v21, v21, 8uLL).u64[0];
  *(float32x2_t *)&v9 = vmul_f32(*(float32x2_t *)(v17 + 288), *(float32x2_t *)v21.i8);
  *((int8x8_t *)&v9 + 1) = vand_s8(*(int8x8_t *)&v9, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v17 + 352), *(int8x16_t *)(v17 + 352), 8uLL));
  *(_OWORD *)(v17 + 160) = v9;
  *(float32x2_t *)&v9 = vmul_f32(*(float32x2_t *)&v18, *(float32x2_t *)v21.i8);
  v24 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v9 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v24 + 352), *(int8x16_t *)(v24 + 352), 8uLL), *(int8x8_t *)&v9);
  *(_OWORD *)(v24 + 176) = v9;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 192) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 352), vextq_s8(v23, v23, 8uLL), *(int8x16_t *)(*((_QWORD *)this + 51) + 320));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 208) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 352), (int8x16_t)vaddq_f32(v19, v22), *(int8x16_t *)(*((_QWORD *)this + 51) + 336));
  v25 = *((_QWORD *)this + 51);
  v26 = *(_OWORD *)(v25 + 304);
  v27 = *(_OWORD *)(v25 + 16);
  v28 = (int8x16_t)vaddq_f32(*(float32x4_t *)v25, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v25 + 336), *(float32x4_t *)v25), *(float *)&v27));
  *(float32x2_t *)&v9 = vmul_n_f32(*(float32x2_t *)(v25 + 288), *(float *)&v27);
  *((int8x8_t *)&v9 + 1) = vand_s8(*(int8x8_t *)&v9, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v25 + 352), *(int8x16_t *)(v25 + 352), 8uLL));
  *(_OWORD *)(v25 + 224) = v9;
  *(float32x2_t *)&v9 = vmul_n_f32(*(float32x2_t *)&v26, *(float *)&v27);
  v29 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v9 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v29 + 352), *(int8x16_t *)(v29 + 352), 8uLL), *(int8x8_t *)&v9);
  *(_OWORD *)(v29 + 240) = v9;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 256) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 352), (int8x16_t)vmulq_n_f32((float32x4_t)0, *(float *)&v27), *(int8x16_t *)(*((_QWORD *)this + 51) + 320));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 272) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 352), v28, *(int8x16_t *)(*((_QWORD *)this + 51) + 336));
  return 0;
}

const char *HgcZoomBlur::GetProgram(HgcZoomBlur *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000046a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.1500000060, 0.1000000015, 0.2000000030, 0.2500000000);\n"
             "    const half4 c1 = half4(0.3000000119, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r0 = r0*c0.xxxx;\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r1 = r1*c0.yyyy + r0;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r1 = r0*c0.zzzz + r1;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r0 = r0*c0.wwww + r1;\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r1)*float4(c1.xxxx) + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=fc232b15:2f276203:cc91062b:883d9a91\n"
             "//SIG=00400000:00000000:00000000:00000001:0002:0000:0002:0000:0000:0000:003e:0000:0005:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000430\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.1500000060, 0.1000000015, 0.2000000030, 0.2500000000);\n"
             "    const float4 c1 = float4(0.3000000119, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r0 = r0*c0.xxxx;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r1 = r1*c0.yyyy + r0;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r1 = r0*c0.zzzz + r1;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r0 = r0*c0.wwww + r1;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r1*c1.xxxx + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=19d15d43:ff823cb7:d72fe942:788f3172\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:0000:0002:0000:0000:0000:003e:0000:0005:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000430\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.1500000060, 0.1000000015, 0.2000000030, 0.2500000000);\n"
           "    const defaultp vec4 c1 = vec4(0.3000000119, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord1.xy);\n"
           "    r0 = r0*c0.xxxx;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord2.xy);\n"
           "    r1 = r1*c0.yyyy + r0;\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord3.xy);\n"
           "    r1 = r0*c0.zzzz + r1;\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord4.xy);\n"
           "    r0 = r0*c0.wwww + r1;\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r1*c1.xxxx + r0;\n"
           "}\n"
           "//MD5=ae0f0794:7111a765:7489048d:7d74bca9\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:0000:0002:0000:0000:0000:0000:0000:0005:01:0:1:0\n";
  }
}

void HgcZoomBlur::InitProgramDescriptor(HgcZoomBlur *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcZoomBlur_hgc_visible", "//Metal1.0     \n//LEN=00000003ae\n[[ visible ]] FragmentOut HgcZoomBlur_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3,\n    float4 texCoord4)\n{\n    const float4 c0 = float4(0.1500000060, 0.1000000015, 0.2000000030, 0.2500000000);\n"
    "    const float4 c1 = float4(0.3000000119, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord1.xy);\n"
    "    r0 = r0*c0.xxxx;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord2.xy);\n"
    "    r1 = r1*c0.yyyy + r0;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord3.xy);\n"
    "    r1 = r0*c0.zzzz + r1;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord4.xy);\n"
    "    r0 = r0*c0.wwww + r1;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    output.color0 = r1*c1.xxxx + r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2885E18()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcZoomBlur");
}

void sub_1B2885E28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28860A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2886118()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2886110);
}

_QWORD *HgcZoomBlur::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcZoomBlur [hgc1]");
}

uint64_t HgcZoomBlur::BindTexture(HgcZoomBlur *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v6;

  if (a3)
    return 0xFFFFFFFFLL;
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 32);
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 96);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 160);
  HGHandler::TexCoord(a2, 4, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 224);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcZoomBlur::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcZoomBlur::RenderTile(float32x4_t **this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int v15;
  uint64_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  int v30;
  float32x4_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  uint64_t v39;
  float32x4_t v40;
  uint64_t v41;
  int32x4_t v42;
  float32x2_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t *v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  float32x4_t *v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;
  float32x2_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int32x4_t v89;
  float32x4_t *v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int32x4_t v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t *v118;
  int v119;
  float32x4_t *v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  uint64_t v125;
  float32x4_t v126;
  uint64_t v127;
  int32x4_t v128;
  float32x2_t v129;
  float32x4_t *v130;
  float32x4_t v131;
  int8x16_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int32x4_t v140;
  float32x4_t *v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x2_t v144;
  float32x4_t v145;
  float32x4_t v146;
  int32x4_t v147;
  float32x4_t *v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int32x4_t v152;
  float32x4_t v153;
  int32x4_t v154;
  int8x16_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  int32x4_t v161;

  v4 = HGTile::Renderer(a2);
  v5 = ((uint64_t (*)(float32x4_t **, uint64_t))(*this)[19].i64[1])(this, v4);
  v6 = *((_DWORD *)a2 + 1);
  v7 = (*((_DWORD *)a2 + 3) - v6);
  if ((int)v7 >= 1)
  {
    v8 = 0;
    v10.f32[0] = (float)*(int *)a2 + 0.5;
    v9 = this[51];
    v10.f32[1] = (float)v6 + 0.5;
    v10.i32[2] = 0;
    v10.i32[3] = 1.0;
    v11 = 0uLL;
    v12 = vaddq_f32(v9[5], vaddq_f32(vaddq_f32(vmulq_n_f32(v9[2], v10.f32[0]), vmulq_n_f32(v9[3], v10.f32[1])), vmulq_f32(v9[4], (float32x4_t)0)));
    v13 = vaddq_f32(v9[9], vaddq_f32(vaddq_f32(vmulq_n_f32(v9[6], v10.f32[0]), vmulq_n_f32(v9[7], v10.f32[1])), vmulq_f32(v9[8], (float32x4_t)0)));
    v14 = vaddq_f32(v9[13], vaddq_f32(vaddq_f32(vmulq_n_f32(v9[10], v10.f32[0]), vmulq_n_f32(v9[11], v10.f32[1])), vmulq_f32(v9[12], (float32x4_t)0)));
    v15 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v16 = *((_QWORD *)a2 + 10);
    v17 = vaddq_f32(v9[17], vaddq_f32(vaddq_f32(vmulq_n_f32(v9[14], v10.f32[0]), vmulq_n_f32(v9[15], v10.f32[1])), vmulq_f32(v9[16], (float32x4_t)0)));
    v18 = *((int *)a2 + 22);
    v19 = *((_QWORD *)a2 + 2);
    v20 = v16 + 16;
    v21 = 16 * *((int *)a2 + 6);
    v22.i64[0] = 0x4000000040000000;
    v22.i64[1] = 0x4000000040000000;
    v23.i64[0] = 0x3F0000003F000000;
    v23.i64[1] = 0x3F0000003F000000;
    do
    {
      v24 = this[51];
      v25 = vaddq_f32(v12, vmulq_f32(v11, v24[3]));
      v26 = vaddq_f32(v13, vmulq_f32(v11, v24[7]));
      v27 = vaddq_f32(v14, vmulq_f32(v11, v24[11]));
      v28 = vaddq_f32(v17, vmulq_f32(v11, v24[15]));
      if (v15 < 2)
      {
        v119 = 0;
        v31 = 0uLL;
      }
      else
      {
        v29 = 0;
        v30 = 0;
        v31 = 0uLL;
        do
        {
          v32 = this[51];
          v33 = v32[2];
          v34 = vaddq_f32(v25, vmulq_f32(v31, v33));
          v35 = v32[6];
          v36 = vaddq_f32(v26, vmulq_f32(v31, v35));
          v37 = vaddq_f32(v33, v34);
          v38 = vaddq_f32(v35, v36);
          v39 = *((int *)a2 + 22);
          v40 = vsubq_f32(v34, v10);
          v41 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v42 = vaddq_s32(vcvtq_s32_f32(v40), vcltzq_f32(v40));
            v43 = (float32x2_t)vsubq_f32(v40, vcvtq_f32_s32(v42)).u64[0];
            v44 = (float32x4_t *)(v41 + 16 * (v42.i32[0] + v42.i32[1] * (int)v39));
            v45 = vaddq_f32(*v44, vmulq_n_f32(vsubq_f32(v44[1], *v44), v43.f32[0]));
            v46 = vaddq_f32(v45, vmulq_lane_f32(vsubq_f32(vaddq_f32(v44[v39], vmulq_n_f32(vsubq_f32(v44[(int)v39 + 1], v44[v39]), v43.f32[0])), v45), v43, 1));
            v47 = vsubq_f32(v37, v10);
            v48 = vaddq_s32(vcvtq_s32_f32(v47), vcltzq_f32(v47));
            v47.i64[0] = vsubq_f32(v47, vcvtq_f32_s32(v48)).u64[0];
            v49 = (float32x4_t *)(v41 + 16 * (v48.i32[0] + v48.i32[1] * (int)v39));
            v50 = vaddq_f32(*v49, vmulq_n_f32(vsubq_f32(v49[1], *v49), v47.f32[0]));
            v51 = vaddq_f32(v50, vmulq_lane_f32(vsubq_f32(vaddq_f32(v49[v39], vmulq_n_f32(vsubq_f32(v49[(int)v39 + 1], v49[v39]), v47.f32[0])), v50), *(float32x2_t *)v47.f32, 1));
            v52 = v32[23];
            v53 = vmulq_f32(v46, v52);
            v54 = vmulq_f32(v52, v51);
            v55 = vsubq_f32(v36, v10);
            v56 = vaddq_s32(vcvtq_s32_f32(v55), vcltzq_f32(v55));
            v55.i64[0] = vsubq_f32(v55, vcvtq_f32_s32(v56)).u64[0];
            v57 = (float32x4_t *)(v41 + 16 * (v56.i32[0] + v56.i32[1] * (int)v39));
            v58 = vaddq_f32(*v57, vmulq_n_f32(vsubq_f32(v57[1], *v57), v55.f32[0]));
            v59 = vaddq_f32(v58, vmulq_lane_f32(vsubq_f32(vaddq_f32(v57[v39], vmulq_n_f32(vsubq_f32(v57[(int)v39 + 1], v57[v39]), v55.f32[0])), v58), *(float32x2_t *)v55.f32, 1));
            v60 = vsubq_f32(v38, v10);
            v61 = vaddq_s32(vcvtq_s32_f32(v60), vcltzq_f32(v60));
            v60.i64[0] = vsubq_f32(v60, vcvtq_f32_s32(v61)).u64[0];
            v62 = (float32x4_t *)(v41 + 16 * (v61.i32[0] + v61.i32[1] * (int)v39));
            v63 = vaddq_f32(*v62, vmulq_n_f32(vsubq_f32(v62[1], *v62), v60.f32[0]));
            v64 = vaddq_f32(v63, vmulq_lane_f32(vsubq_f32(vaddq_f32(v62[v39], vmulq_n_f32(vsubq_f32(v62[(int)v39 + 1], v62[v39]), v60.f32[0])), v63), *(float32x2_t *)v60.f32, 1));
          }
          else
          {
            v65 = vaddq_f32(v40, v23);
            v66 = vcvtq_s32_f32(v65);
            v65.i64[0] = vaddq_s32(v66, vcgtq_f32(vcvtq_f32_s32(v66), v65)).u64[0];
            v67 = vaddq_f32(vsubq_f32(v37, v10), v23);
            v68 = vcvtq_s32_f32(v67);
            v67.i64[0] = vaddq_s32(v68, vcgtq_f32(vcvtq_f32_s32(v68), v67)).u64[0];
            v69 = *(float32x4_t *)(v41 + 16 * (v67.i32[0] + v67.i32[1] * (int)v39));
            v70 = v32[23];
            v53 = vmulq_f32(*(float32x4_t *)(v41 + 16 * (v65.i32[0] + v65.i32[1] * (int)v39)), v70);
            v54 = vmulq_f32(v69, v70);
            v71 = vaddq_f32(vsubq_f32(v36, v10), v23);
            v72 = vcvtq_s32_f32(v71);
            v71.i64[0] = vaddq_s32(v72, vcgtq_f32(vcvtq_f32_s32(v72), v71)).u64[0];
            v59 = *(float32x4_t *)(v41 + 16 * (v71.i32[0] + v71.i32[1] * (int)v39));
            v73 = vaddq_f32(vsubq_f32(v38, v10), v23);
            v74 = vcvtq_s32_f32(v73);
            v73.i64[0] = vaddq_s32(v74, vcgtq_f32(vcvtq_f32_s32(v74), v73)).u64[0];
            v64 = *(float32x4_t *)(v41 + 16 * (v73.i32[0] + v73.i32[1] * (int)v39));
          }
          v75 = v32[10];
          v76 = vaddq_f32(v27, vmulq_f32(v31, v75));
          v77 = v32[14];
          v78 = vaddq_f32(v28, vmulq_f32(v31, v77));
          v79 = vaddq_f32(v75, v76);
          v80 = vaddq_f32(v77, v78);
          v81 = v32[24];
          v82 = vsubq_f32(v76, v10);
          if (v5)
          {
            v83 = vaddq_s32(vcvtq_s32_f32(v82), vcltzq_f32(v82));
            v84 = (float32x2_t)vsubq_f32(v82, vcvtq_f32_s32(v83)).u64[0];
            v85 = (float32x4_t *)(v41 + 16 * (v83.i32[0] + v83.i32[1] * (int)v39));
            v86 = vaddq_f32(*v85, vmulq_n_f32(vsubq_f32(v85[1], *v85), v84.f32[0]));
            v87 = vaddq_f32(v86, vmulq_lane_f32(vsubq_f32(vaddq_f32(v85[v39], vmulq_n_f32(vsubq_f32(v85[(int)v39 + 1], v85[v39]), v84.f32[0])), v86), v84, 1));
            v88 = vsubq_f32(v79, v10);
            v89 = vaddq_s32(vcvtq_s32_f32(v88), vcltzq_f32(v88));
            v88.i64[0] = vsubq_f32(v88, vcvtq_f32_s32(v89)).u64[0];
            v90 = (float32x4_t *)(v41 + 16 * (v89.i32[0] + v89.i32[1] * (int)v39));
            v91 = vaddq_f32(*v90, vmulq_n_f32(vsubq_f32(v90[1], *v90), v88.f32[0]));
            v92 = vaddq_f32(v91, vmulq_lane_f32(vsubq_f32(vaddq_f32(v90[v39], vmulq_n_f32(vsubq_f32(v90[(int)v39 + 1], v90[v39]), v88.f32[0])), v91), *(float32x2_t *)v88.f32, 1));
            v93 = vmulq_laneq_f32(v87, v81, 2);
            v94 = vmulq_laneq_f32(v92, v81, 2);
            v95 = vsubq_f32(v78, v10);
            v96 = vaddq_s32(vcvtq_s32_f32(v95), vcltzq_f32(v95));
            v95.i64[0] = vsubq_f32(v95, vcvtq_f32_s32(v96)).u64[0];
            v97 = (float32x4_t *)(v41 + 16 * (v96.i32[0] + v96.i32[1] * (int)v39));
            v98 = vaddq_f32(*v97, vmulq_n_f32(vsubq_f32(v97[1], *v97), v95.f32[0]));
            v99 = vaddq_f32(v98, vmulq_lane_f32(vsubq_f32(vaddq_f32(v97[v39], vmulq_n_f32(vsubq_f32(v97[(int)v39 + 1], v97[v39]), v95.f32[0])), v98), *(float32x2_t *)v95.f32, 1));
            v100 = vsubq_f32(v80, v10);
            v101 = vaddq_s32(vcvtq_s32_f32(v100), vcltzq_f32(v100));
            v100.i64[0] = vsubq_f32(v100, vcvtq_f32_s32(v101)).u64[0];
            v102 = (float32x4_t *)(v41 + 16 * (v101.i32[0] + v101.i32[1] * (int)v39));
            v103 = vaddq_f32(*v102, vmulq_n_f32(vsubq_f32(v102[1], *v102), v100.f32[0]));
            v104 = vaddq_f32(v103, vmulq_lane_f32(vsubq_f32(vaddq_f32(v102[v39], vmulq_n_f32(vsubq_f32(v102[(int)v39 + 1], v102[v39]), v100.f32[0])), v103), *(float32x2_t *)v100.f32, 1));
          }
          else
          {
            v105 = vaddq_f32(v82, v23);
            v106 = vcvtq_s32_f32(v105);
            v105.i64[0] = vaddq_s32(v106, vcgtq_f32(vcvtq_f32_s32(v106), v105)).u64[0];
            v107 = vaddq_f32(vsubq_f32(v79, v10), v23);
            v108 = vcvtq_s32_f32(v107);
            v107.i64[0] = vaddq_s32(v108, vcgtq_f32(vcvtq_f32_s32(v108), v107)).u64[0];
            v109 = *(float32x4_t *)(v41 + 16 * (v107.i32[0] + v107.i32[1] * (int)v39));
            v93 = vmulq_laneq_f32(*(float32x4_t *)(v41 + 16 * (v105.i32[0] + v105.i32[1] * (int)v39)), v81, 2);
            v94 = vmulq_laneq_f32(v109, v81, 2);
            v110 = vaddq_f32(vsubq_f32(v78, v10), v23);
            v111 = vcvtq_s32_f32(v110);
            v110.i64[0] = vaddq_s32(v111, vcgtq_f32(vcvtq_f32_s32(v111), v110)).u64[0];
            v99 = *(float32x4_t *)(v41 + 16 * (v110.i32[0] + v110.i32[1] * (int)v39));
            v112 = vaddq_f32(vsubq_f32(v80, v10), v23);
            v113 = vcvtq_s32_f32(v112);
            v112.i64[0] = vaddq_s32(v113, vcgtq_f32(vcvtq_f32_s32(v113), v112)).u64[0];
            v104 = *(float32x4_t *)(v41 + 16 * (v112.i32[0] + v112.i32[1] * (int)v39));
          }
          v31 = vaddq_f32(v31, v22);
          v114 = vaddq_f32(vaddq_f32(vaddq_f32(v53, vmulq_n_f32(v59, v81.f32[0])), v93), vmulq_laneq_f32(v99, v81, 3));
          v115 = vaddq_f32(vaddq_f32(vaddq_f32(v54, vmulq_n_f32(v64, v81.f32[0])), v94), vmulq_laneq_f32(v104, v81, 3));
          v116 = v32[25];
          v117 = vaddq_f32(v115, vmulq_n_f32(*(float32x4_t *)(v20 + v29), v116.f32[0]));
          v118 = (float32x4_t *)(v19 + v29);
          *v118 = vaddq_f32(v114, vmulq_n_f32(*(float32x4_t *)(v20 + v29 - 16), v116.f32[0]));
          v118[1] = v117;
          v30 -= 2;
          v29 += 32;
        }
        while (v15 + v30 > 1);
        v119 = -v30;
      }
      if (v119 < v15)
      {
        v120 = this[51];
        v121 = vaddq_f32(v25, vmulq_f32(v31, v120[2]));
        v122 = vaddq_f32(v26, vmulq_f32(v31, v120[6]));
        v123 = vaddq_f32(v27, vmulq_f32(v31, v120[10]));
        v124 = vaddq_f32(v28, vmulq_f32(v31, v120[14]));
        v125 = *((int *)a2 + 22);
        v126 = vsubq_f32(v121, v10);
        v127 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v128 = vaddq_s32(vcvtq_s32_f32(v126), vcltzq_f32(v126));
          v129 = (float32x2_t)vsubq_f32(v126, vcvtq_f32_s32(v128)).u64[0];
          v130 = (float32x4_t *)(v127 + 16 * (v128.i32[0] + v128.i32[1] * (int)v125));
          v131 = vaddq_f32(*v130, vmulq_n_f32(vsubq_f32(v130[1], *v130), v129.f32[0]));
          v132 = (int8x16_t)v120[24];
          v133 = vmulq_f32(v120[23], vaddq_f32(v131, vmulq_lane_f32(vsubq_f32(vaddq_f32(v130[v125], vmulq_n_f32(vsubq_f32(v130[(int)v125 + 1], v130[v125]), v129.f32[0])), v131), v129, 1)));
          v134 = vsubq_f32(v122, v10);
          v135 = vaddq_s32(vcvtq_s32_f32(v134), vcltzq_f32(v134));
          v134.i64[0] = vsubq_f32(v134, vcvtq_f32_s32(v135)).u64[0];
          v136 = (float32x4_t *)(v127 + 16 * (v135.i32[0] + v135.i32[1] * (int)v125));
          v137 = vaddq_f32(*v136, vmulq_n_f32(vsubq_f32(v136[1], *v136), v134.f32[0]));
          v138 = vaddq_f32(v133, vmulq_n_f32(vaddq_f32(v137, vmulq_lane_f32(vsubq_f32(vaddq_f32(v136[v125], vmulq_n_f32(vsubq_f32(v136[(int)v125 + 1], v136[v125]), v134.f32[0])), v137), *(float32x2_t *)v134.f32, 1)), *(float *)v132.i32));
          v139 = vsubq_f32(v123, v10);
          v140 = vaddq_s32(vcvtq_s32_f32(v139), vcltzq_f32(v139));
          v139.i64[0] = vsubq_f32(v139, vcvtq_f32_s32(v140)).u64[0];
          v141 = (float32x4_t *)(v127 + 16 * (v140.i32[0] + v140.i32[1] * (int)v125));
          v142 = vaddq_f32(*v141, vmulq_n_f32(vsubq_f32(v141[1], *v141), v139.f32[0]));
          v143 = vaddq_f32(v142, vmulq_lane_f32(vsubq_f32(vaddq_f32(v141[v125], vmulq_n_f32(vsubq_f32(v141[(int)v125 + 1], v141[v125]), v139.f32[0])), v142), *(float32x2_t *)v139.f32, 1));
          v144 = (float32x2_t)vextq_s8(v132, v132, 8uLL).u64[0];
          v145 = vaddq_f32(v138, vmulq_laneq_f32(v143, (float32x4_t)v132, 2));
          v146 = vsubq_f32(v124, v10);
          v147 = vaddq_s32(vcvtq_s32_f32(v146), vcltzq_f32(v146));
          v146.i64[0] = vsubq_f32(v146, vcvtq_f32_s32(v147)).u64[0];
          v148 = (float32x4_t *)(v127 + 16 * (v147.i32[0] + v147.i32[1] * (int)v125));
          v149 = vaddq_f32(*v148, vmulq_n_f32(vsubq_f32(v148[1], *v148), v146.f32[0]));
          v150 = vaddq_f32(v149, vmulq_lane_f32(vsubq_f32(vaddq_f32(v148[v125], vmulq_n_f32(vsubq_f32(v148[(int)v125 + 1], v148[v125]), v146.f32[0])), v149), *(float32x2_t *)v146.f32, 1));
        }
        else
        {
          v151 = vaddq_f32(v126, v23);
          v152 = vcvtq_s32_f32(v151);
          v151.i64[0] = vaddq_s32(v152, vcgtq_f32(vcvtq_f32_s32(v152), v151)).u64[0];
          v153 = vaddq_f32(vsubq_f32(v122, v10), v23);
          v154 = vcvtq_s32_f32(v153);
          v153.i64[0] = vaddq_s32(v154, vcgtq_f32(vcvtq_f32_s32(v154), v153)).u64[0];
          v155 = (int8x16_t)v120[24];
          v156 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v127 + 16 * (v151.i32[0] + v151.i32[1] * (int)v125)), v120[23]), vmulq_n_f32(*(float32x4_t *)(v127 + 16 * (v153.i32[0] + v153.i32[1] * (int)v125)), *(float *)v155.i32));
          v157 = vaddq_f32(vsubq_f32(v123, v10), v23);
          v158 = vcvtq_s32_f32(v157);
          v157.i64[0] = vaddq_s32(v158, vcgtq_f32(vcvtq_f32_s32(v158), v157)).u64[0];
          v159 = *(float32x4_t *)(v127 + 16 * (v157.i32[0] + v157.i32[1] * (int)v125));
          v144 = (float32x2_t)vextq_s8(v155, v155, 8uLL).u64[0];
          v145 = vaddq_f32(v156, vmulq_laneq_f32(v159, (float32x4_t)v155, 2));
          v160 = vaddq_f32(vsubq_f32(v124, v10), v23);
          v161 = vcvtq_s32_f32(v160);
          v160.i64[0] = vaddq_s32(v161, vcgtq_f32(vcvtq_f32_s32(v161), v160)).u64[0];
          v150 = *(float32x4_t *)(v127 + 16 * (v160.i32[0] + v160.i32[1] * (int)v125));
        }
        *(float32x4_t *)(v19 + 16 * v119) = vaddq_f32(vaddq_f32(v145, vmulq_lane_f32(v150, v144, 1)), vmulq_n_f32(*(float32x4_t *)(v16 + 16 * (v8 * v18 + v119)), COERCE_FLOAT(*(_OWORD *)&v120[25])));
      }
      __asm { FMOV            V16.4S, #1.0 }
      v11 = vaddq_f32(v11, _Q16);
      v19 += v21;
      ++v8;
      v20 += 16 * v18;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcZoomBlur::GetDOD(HgcZoomBlur *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  const HGTransform *v6;
  uint64_t v8;
  uint64_t v9;
  HGTransformUtils *v10;
  float v11;
  uint64_t DOD;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  HGTransformUtils *v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  HGTransformUtils *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  HGTransformUtils *v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v36[9];
  HGRect v37;
  HGRect v38;
  HGRect v39;
  HGRect v40;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(const HGTransform **)&a4.var0;
  if ((*(int (**)(HgcZoomBlur *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v8 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v6 = (const HGTransform *)HGRectGrow((uint64_t)v6, v5, v8);
    v5 = v9;
  }
  HGTransform::HGTransform((HGTransform *)v36);
  HGTransform::LoadMatrixf(v36, (float32x2_t *)(*((_QWORD *)this + 51) + 32));
  HGTransform::Invert2D((HGTransform *)v36);
  v11 = HGTransformUtils::MinW(v10);
  *(_QWORD *)&v37.var0 = v5;
  DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v36, v6, v37, 0.5, v11);
  v14 = HGRectUnion((uint64_t)v6, v5, DOD, v13);
  v16 = v15;
  HGTransform::LoadMatrixf(v36, (float32x2_t *)(*((_QWORD *)this + 51) + 96));
  HGTransform::Invert2D((HGTransform *)v36);
  v18 = HGTransformUtils::MinW(v17);
  *(_QWORD *)&v38.var0 = v5;
  v19 = HGTransformUtils::GetDOD((HGTransformUtils *)v36, v6, v38, 0.5, v18);
  v21 = HGRectUnion(v14, v16, v19, v20);
  v23 = v22;
  HGTransform::LoadMatrixf(v36, (float32x2_t *)(*((_QWORD *)this + 51) + 160));
  HGTransform::Invert2D((HGTransform *)v36);
  v25 = HGTransformUtils::MinW(v24);
  *(_QWORD *)&v39.var0 = v5;
  v26 = HGTransformUtils::GetDOD((HGTransformUtils *)v36, v6, v39, 0.5, v25);
  v28 = HGRectUnion(v21, v23, v26, v27);
  v30 = v29;
  HGTransform::LoadMatrixf(v36, (float32x2_t *)(*((_QWORD *)this + 51) + 224));
  HGTransform::Invert2D((HGTransform *)v36);
  v32 = HGTransformUtils::MinW(v31);
  *(_QWORD *)&v40.var0 = v5;
  v33 = HGTransformUtils::GetDOD((HGTransformUtils *)v36, v6, v40, 0.5, v32);
  v4 = HGRectUnion(v28, v30, v33, v34);
  HGTransform::~HGTransform((HGTransform *)v36);
  return v4;
}

void sub_1B2886E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HgcZoomBlur::GetROI(HgcZoomBlur *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  HGTransformUtils *v9;
  float v10;
  uint64_t ROI;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  HGTransformUtils *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  HGTransformUtils *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  HGTransformUtils *v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float64x2_t v38[9];
  HGRect v39;
  HGRect v40;
  HGRect v41;
  HGRect v42;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(_QWORD *)&a4.var0;
  HGTransform::HGTransform((HGTransform *)v38);
  HGTransform::LoadMatrixf(v38, (float32x2_t *)(*((_QWORD *)this + 51) + 32));
  v10 = HGTransformUtils::MinW(v9);
  *(_QWORD *)&v39.var0 = v5;
  ROI = HGTransformUtils::GetROI((HGTransformUtils *)v38, v6, v39, 0.5, v10);
  v13 = HGRectUnion(v6, v5, ROI, v12);
  v15 = v14;
  HGTransform::LoadMatrixf(v38, (float32x2_t *)(*((_QWORD *)this + 51) + 96));
  v17 = HGTransformUtils::MinW(v16);
  *(_QWORD *)&v40.var0 = v5;
  v18 = HGTransformUtils::GetROI((HGTransformUtils *)v38, v6, v40, 0.5, v17);
  v20 = HGRectUnion(v13, v15, v18, v19);
  v22 = v21;
  HGTransform::LoadMatrixf(v38, (float32x2_t *)(*((_QWORD *)this + 51) + 160));
  v24 = HGTransformUtils::MinW(v23);
  *(_QWORD *)&v41.var0 = v5;
  v25 = HGTransformUtils::GetROI((HGTransformUtils *)v38, v6, v41, 0.5, v24);
  v27 = HGRectUnion(v20, v22, v25, v26);
  v29 = v28;
  HGTransform::LoadMatrixf(v38, (float32x2_t *)(*((_QWORD *)this + 51) + 224));
  v31 = HGTransformUtils::MinW(v30);
  *(_QWORD *)&v42.var0 = v5;
  v32 = HGTransformUtils::GetROI((HGTransformUtils *)v38, v6, v42, 0.5, v31);
  v4 = HGRectUnion(v27, v29, v32, v33);
  v35 = v34;
  HGTransform::~HGTransform((HGTransform *)v38);
  if ((*(int (**)(HgcZoomBlur *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v36 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(v4, v35, v36);
  }
  return v4;
}

void sub_1B2887060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void HgcZoomBlur::HgcZoomBlur(HgcZoomBlur *this)
{
  uint64_t v2;
  HgcZoomBlur::State *v3;
  double v4;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E64E99F0;
  *(_DWORD *)(v2 + 416) = 1;
  v3 = (HgcZoomBlur::State *)operator new();
  v4 = HgcZoomBlur::State::State(v3);
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcZoomBlur *, _QWORD, uint64_t, double))(*(_QWORD *)this + 136))(this, 0, 1, v4);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2887108(_Unwind_Exception *a1)
{
  HGNode *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x1000C407DC911DDLL);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcZoomBlur::~HgcZoomBlur(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E99F0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C407DC911DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcZoomBlur::~HgcZoomBlur(this);
  HGObject::operator delete(v1);
}

uint64_t HgcZoomBlur::SetParameter(HgcZoomBlur *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  v11 = 1;
  *((_DWORD *)this + 104) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v11;
}

uint64_t HgcZoomBlur::GetParameter(HgcZoomBlur *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

HgcZoomBlur *HgcZoomBlur::GetOutput(HgcZoomBlur *this, void *a2)
{
  if (*((_DWORD *)this + 104))
  {
    HgcZoomBlur::Setup(this, a2);
    *((_DWORD *)this + 104) = 0;
  }
  return this;
}

double HgcZoomBlur::State::State(HgcZoomBlur::State *this)
{
  double result;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = xmmword_1B304F230;
  *((_OWORD *)this + 3) = xmmword_1B304F240;
  *((_OWORD *)this + 4) = xmmword_1B304F250;
  *((_OWORD *)this + 5) = xmmword_1B304EFF0;
  *((_OWORD *)this + 6) = xmmword_1B304F230;
  *((_OWORD *)this + 7) = xmmword_1B304F240;
  *((_OWORD *)this + 8) = xmmword_1B304F250;
  *((_OWORD *)this + 9) = xmmword_1B304EFF0;
  *((_OWORD *)this + 10) = xmmword_1B304F230;
  *((_OWORD *)this + 11) = xmmword_1B304F240;
  *((_OWORD *)this + 12) = xmmword_1B304F250;
  *((_OWORD *)this + 13) = xmmword_1B304EFF0;
  *((_OWORD *)this + 14) = xmmword_1B304F230;
  *((_OWORD *)this + 15) = xmmword_1B304F240;
  *((_OWORD *)this + 16) = xmmword_1B304F250;
  *((_OWORD *)this + 17) = xmmword_1B304EFF0;
  *((_OWORD *)this + 18) = xmmword_1B304F230;
  *((_OWORD *)this + 19) = xmmword_1B304F240;
  *((_OWORD *)this + 20) = xmmword_1B304F250;
  *((_OWORD *)this + 21) = xmmword_1B304EFF0;
  *((_OWORD *)this + 22) = xmmword_1B3050F80;
  *((int32x4_t *)this + 23) = vdupq_n_s32(0x3E19999Au);
  *(_QWORD *)&result = 1036831949;
  *((_OWORD *)this + 24) = xmmword_1B3052090;
  *((_OWORD *)this + 25) = xmmword_1B30520A0;
  return result;
}

uint64_t HgcConvolvePass8tapPoint::Setup(HgcConvolvePass8tapPoint *this, void *a2)
{
  __int128 *v2;
  __int128 v3;
  float32x4_t v4;
  int8x16_t v5;
  __int128 v6;
  int8x16_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  float32x4_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  float32x4_t v17;
  int8x16_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  float32x4_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  float32x4_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  float32x4_t v32;
  int8x16_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  float32x4_t v43;
  int8x16_t v44;
  uint64_t v45;

  v2 = (__int128 *)*((_QWORD *)this + 51);
  v3 = v2[50];
  v4 = (float32x4_t)v2[16];
  v5 = (int8x16_t)*v2;
  *(float32x2_t *)&v6 = vmul_f32((float32x2_t)v2[49], *(float32x2_t *)v2);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)v2 + 53), *((int8x16_t *)v2 + 53), 8uLL), *(int8x8_t *)&v6);
  v7 = (int8x16_t)vmulq_f32(*(float32x4_t *)v2, (float32x4_t)0);
  v8 = vmulq_f32(vsubq_f32(*((float32x4_t *)v2 + 52), v4), *(float32x4_t *)v2);
  v2[17] = v6;
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)&v3, *(float32x2_t *)v5.i8);
  v9 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v9 + 848), *(int8x16_t *)(v9 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v9 + 288) = v6;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 304) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), v7, *(int8x16_t *)(*((_QWORD *)this + 51) + 816));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 320) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), (int8x16_t)vaddq_f32(v4, v8), *(int8x16_t *)(*((_QWORD *)this + 51) + 832));
  v10 = *((_QWORD *)this + 51);
  v11 = *(_OWORD *)(v10 + 800);
  v12 = *(float32x4_t *)(v10 + 16);
  v13 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v10 + 256), vmulq_f32(vsubq_f32(*(float32x4_t *)(v10 + 832), *(float32x4_t *)(v10 + 256)), v12));
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)(v10 + 784), *(float32x2_t *)v12.f32);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v10 + 848), *(int8x16_t *)(v10 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v10 + 336) = v6;
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)&v11, *(float32x2_t *)v12.f32);
  v14 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v14 + 848), *(int8x16_t *)(v14 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v14 + 352) = v6;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 368) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), (int8x16_t)vmulq_f32(v12, (float32x4_t)0), *(int8x16_t *)(*((_QWORD *)this + 51) + 816));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 384) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), v13, *(int8x16_t *)(*((_QWORD *)this + 51) + 832));
  v15 = *((_QWORD *)this + 51);
  v16 = *(_OWORD *)(v15 + 800);
  v17 = *(float32x4_t *)(v15 + 32);
  v18 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v15 + 256), vmulq_f32(vsubq_f32(*(float32x4_t *)(v15 + 832), *(float32x4_t *)(v15 + 256)), v17));
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)(v15 + 784), *(float32x2_t *)v17.f32);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v15 + 848), *(int8x16_t *)(v15 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v15 + 400) = v6;
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)&v16, *(float32x2_t *)v17.f32);
  v19 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v19 + 848), *(int8x16_t *)(v19 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v19 + 416) = v6;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 432) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), (int8x16_t)vmulq_f32(v17, (float32x4_t)0), *(int8x16_t *)(*((_QWORD *)this + 51) + 816));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 448) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), v18, *(int8x16_t *)(*((_QWORD *)this + 51) + 832));
  v20 = *((_QWORD *)this + 51);
  v21 = *(_OWORD *)(v20 + 800);
  v22 = *(float32x4_t *)(v20 + 48);
  v23 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v20 + 256), vmulq_f32(vsubq_f32(*(float32x4_t *)(v20 + 832), *(float32x4_t *)(v20 + 256)), v22));
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)(v20 + 784), *(float32x2_t *)v22.f32);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v20 + 848), *(int8x16_t *)(v20 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v20 + 464) = v6;
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)&v21, *(float32x2_t *)v22.f32);
  v24 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v24 + 848), *(int8x16_t *)(v24 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v24 + 480) = v6;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 496) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), (int8x16_t)vmulq_f32(v22, (float32x4_t)0), *(int8x16_t *)(*((_QWORD *)this + 51) + 816));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 512) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), v23, *(int8x16_t *)(*((_QWORD *)this + 51) + 832));
  v25 = *((_QWORD *)this + 51);
  v26 = *(_OWORD *)(v25 + 800);
  v27 = *(float32x4_t *)(v25 + 64);
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)(v25 + 784), *(float32x2_t *)v27.f32);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v25 + 848), *(int8x16_t *)(v25 + 848), 8uLL), *(int8x8_t *)&v6);
  v28 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v25 + 256), vmulq_f32(vsubq_f32(*(float32x4_t *)(v25 + 832), *(float32x4_t *)(v25 + 256)), v27));
  *(_OWORD *)(v25 + 528) = v6;
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)&v26, *(float32x2_t *)v27.f32);
  v29 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v29 + 848), *(int8x16_t *)(v29 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v29 + 544) = v6;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 560) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), (int8x16_t)vmulq_f32(v27, (float32x4_t)0), *(int8x16_t *)(*((_QWORD *)this + 51) + 816));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 576) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), v28, *(int8x16_t *)(*((_QWORD *)this + 51) + 832));
  v30 = *((_QWORD *)this + 51);
  v31 = *(_OWORD *)(v30 + 800);
  v32 = *(float32x4_t *)(v30 + 80);
  v33 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v30 + 256), vmulq_f32(vsubq_f32(*(float32x4_t *)(v30 + 832), *(float32x4_t *)(v30 + 256)), v32));
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)(v30 + 784), *(float32x2_t *)v32.f32);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v30 + 848), *(int8x16_t *)(v30 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v30 + 592) = v6;
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)&v31, *(float32x2_t *)v32.f32);
  v34 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v34 + 848), *(int8x16_t *)(v34 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v34 + 608) = v6;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 624) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), (int8x16_t)vmulq_f32(v32, (float32x4_t)0), *(int8x16_t *)(*((_QWORD *)this + 51) + 816));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 640) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), v33, *(int8x16_t *)(*((_QWORD *)this + 51) + 832));
  v35 = *((_QWORD *)this + 51);
  v36 = *(_OWORD *)(v35 + 800);
  v37 = *(float32x4_t *)(v35 + 256);
  v38 = *(float32x4_t *)(v35 + 96);
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)(v35 + 784), *(float32x2_t *)v38.f32);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v35 + 848), *(int8x16_t *)(v35 + 848), 8uLL), *(int8x8_t *)&v6);
  v39 = vmulq_f32(vsubq_f32(*(float32x4_t *)(v35 + 832), v37), v38);
  *(_OWORD *)(v35 + 656) = v6;
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)&v36, *(float32x2_t *)v38.f32);
  v40 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v40 + 848), *(int8x16_t *)(v40 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v40 + 672) = v6;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 688) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), (int8x16_t)vmulq_f32(v38, (float32x4_t)0), *(int8x16_t *)(*((_QWORD *)this + 51) + 816));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 704) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), (int8x16_t)vaddq_f32(v37, v39), *(int8x16_t *)(*((_QWORD *)this + 51) + 832));
  v41 = *((_QWORD *)this + 51);
  v42 = *(_OWORD *)(v41 + 800);
  v43 = *(float32x4_t *)(v41 + 112);
  v44 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v41 + 256), vmulq_f32(vsubq_f32(*(float32x4_t *)(v41 + 832), *(float32x4_t *)(v41 + 256)), v43));
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)(v41 + 784), *(float32x2_t *)v43.f32);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v41 + 848), *(int8x16_t *)(v41 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v41 + 720) = v6;
  *(float32x2_t *)&v6 = vmul_f32(*(float32x2_t *)&v42, *(float32x2_t *)v43.f32);
  v45 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v6 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v45 + 848), *(int8x16_t *)(v45 + 848), 8uLL), *(int8x8_t *)&v6);
  *(_OWORD *)(v45 + 736) = v6;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 752) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), (int8x16_t)vmulq_f32(v43, (float32x4_t)0), *(int8x16_t *)(*((_QWORD *)this + 51) + 816));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 768) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 848), v44, *(int8x16_t *)(*((_QWORD *)this + 51) + 832));
  return 0;
}

const char *HgcConvolvePass8tapPoint::GetProgram(HgcConvolvePass8tapPoint *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000554\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r3 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r4 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r5 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy);\n"
             "    r6 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy);\n"
             "    r7 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord7.xy);\n"
             "    r0 = half4(hg_Params[8])*r0;\n"
             "    r0 = half4(hg_Params[9])*r1 + r0;\n"
             "    r0 = half4(hg_Params[10])*r2 + r0;\n"
             "    r0 = half4(hg_Params[11])*r3 + r0;\n"
             "    r0 = half4(hg_Params[12])*r4 + r0;\n"
             "    r0 = half4(hg_Params[13])*r5 + r0;\n"
             "    r0 = half4(hg_Params[14])*r6 + r0;\n"
             "    output.color0 = hg_Params[15]*float4(r7) + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=8765b539:97ccd79e:9caee91b:e14d6e48\n"
             "//SIG=00400000:00000000:00000000:00000001:0000:0010:0008:0000:0000:0000:01fe:0000:0008:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004d5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy);\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy);\n"
             "    r3 = hg_Texture0.sample(hg_Sampler0, frag._texCoord3.xy);\n"
             "    r4 = hg_Texture0.sample(hg_Sampler0, frag._texCoord4.xy);\n"
             "    r5 = hg_Texture0.sample(hg_Sampler0, frag._texCoord5.xy);\n"
             "    r6 = hg_Texture0.sample(hg_Sampler0, frag._texCoord6.xy);\n"
             "    r7 = hg_Texture0.sample(hg_Sampler0, frag._texCoord7.xy);\n"
             "    r0 = hg_Params[8]*r0;\n"
             "    r0 = hg_Params[9]*r1 + r0;\n"
             "    r0 = hg_Params[10]*r2 + r0;\n"
             "    r0 = hg_Params[11]*r3 + r0;\n"
             "    r0 = hg_Params[12]*r4 + r0;\n"
             "    r0 = hg_Params[13]*r5 + r0;\n"
             "    r0 = hg_Params[14]*r6 + r0;\n"
             "    output.color0 = hg_Params[15]*r7 + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=5c030f28:c308b641:a58af8f8:2afac759\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0010:0008:0000:0000:0000:01fe:0000:0008:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007b0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "uniform defaultp vec4 hg_ProgramLocal4;\n"
           "uniform defaultp vec4 hg_ProgramLocal5;\n"
           "uniform defaultp vec4 hg_ProgramLocal6;\n"
           "uniform defaultp vec4 hg_ProgramLocal7;\n"
           "uniform defaultp vec4 hg_ProgramLocal8;\n"
           "uniform defaultp vec4 hg_ProgramLocal9;\n"
           "uniform defaultp vec4 hg_ProgramLocal10;\n"
           "uniform defaultp vec4 hg_ProgramLocal11;\n"
           "uniform defaultp vec4 hg_ProgramLocal12;\n"
           "uniform defaultp vec4 hg_ProgramLocal13;\n"
           "uniform defaultp vec4 hg_ProgramLocal14;\n"
           "uniform defaultp vec4 hg_ProgramLocal15;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "varying highp vec4 hg_TexCoord3;\n"
           "varying highp vec4 hg_TexCoord4;\n"
           "varying highp vec4 hg_TexCoord5;\n"
           "varying highp vec4 hg_TexCoord6;\n"
           "varying highp vec4 hg_TexCoord7;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord1.xy);\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord2.xy);\n"
           "    r3 = texture2D(hg_Texture0, hg_TexCoord3.xy);\n"
           "    r4 = texture2D(hg_Texture0, hg_TexCoord4.xy);\n"
           "    r5 = texture2D(hg_Texture0, hg_TexCoord5.xy);\n"
           "    r6 = texture2D(hg_Texture0, hg_TexCoord6.xy);\n"
           "    r7 = texture2D(hg_Texture0, hg_TexCoord7.xy);\n"
           "    r0 = hg_ProgramLocal8*r0;\n"
           "    r0 = hg_ProgramLocal9*r1 + r0;\n"
           "    r0 = hg_ProgramLocal10*r2 + r0;\n"
           "    r0 = hg_ProgramLocal11*r3 + r0;\n"
           "    r0 = hg_ProgramLocal12*r4 + r0;\n"
           "    r0 = hg_ProgramLocal13*r5 + r0;\n"
           "    r0 = hg_ProgramLocal14*r6 + r0;\n"
           "    gl_FragColor = hg_ProgramLocal15*r7 + r0;\n"
           "}\n"
           "//MD5=4a3878a3:975389dc:09d027a2:b42b0281\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0010:0008:0000:0000:0000:0000:0000:0008:01:0:1:0\n";
  }
}

void HgcConvolvePass8tapPoint::InitProgramDescriptor(HgcConvolvePass8tapPoint *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcConvolvePass8tapPoint_hgc_visible", "//Metal1.0     \n//LEN=0000000490\n[[ visible ]] FragmentOut HgcConvolvePass8tapPoint_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2,\n    float4 texCoord3,\n    float4 texCoord4,\n    float4 texCoord5,\n    float4 texCoord6,\n    float4 texCoord7)\n{\n    float4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, texCoord0.xy);\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, texCoord1.xy);\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, texCoord2.xy);\n"
    "    r3 = hg_Texture0.sample(hg_Sampler0, texCoord3.xy);\n"
    "    r4 = hg_Texture0.sample(hg_Sampler0, texCoord4.xy);\n"
    "    r5 = hg_Texture0.sample(hg_Sampler0, texCoord5.xy);\n"
    "    r6 = hg_Texture0.sample(hg_Sampler0, texCoord6.xy);\n"
    "    r7 = hg_Texture0.sample(hg_Sampler0, texCoord7.xy);\n"
    "    r0 = hg_Params[8]*r0;\n"
    "    r0 = hg_Params[9]*r1 + r0;\n"
    "    r0 = hg_Params[10]*r2 + r0;\n"
    "    r0 = hg_Params[11]*r3 + r0;\n"
    "    r0 = hg_Params[12]*r4 + r0;\n"
    "    r0 = hg_Params[13]*r5 + r0;\n"
    "    r0 = hg_Params[14]*r6 + r0;\n"
    "    output.color0 = hg_Params[15]*r7 + r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28877C4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcConvolvePass8tapPoint");
}

void sub_1B28877D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30520C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2887B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2887B9C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2887B94);
}

_QWORD *HgcConvolvePass8tapPoint::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcConvolvePass8tapPoint [hgc1]");
}

uint64_t HgcConvolvePass8tapPoint::BindTexture(HgcConvolvePass8tapPoint *this, HGHandler *a2, int a3)
{
  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 272);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 336);
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 400);
  HGHandler::TexCoord(a2, 3, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 464);
  HGHandler::TexCoord(a2, 4, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 528);
  HGHandler::TexCoord(a2, 5, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 592);
  HGHandler::TexCoord(a2, 6, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 656);
  HGHandler::TexCoord(a2, 7, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 720);
  return 0;
}

uint64_t HgcConvolvePass8tapPoint::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, a1[51] + 80, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, a1[51] + 96, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, a1[51] + 112, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, a1[51] + 128, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, a1[51] + 144, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, a1[51] + 160, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, a1[51] + 176, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, a1[51] + 192, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, a1[51] + 208, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 14, a1[51] + 224, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 15, a1[51] + 240, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcConvolvePass8tapPoint::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  float v5;
  float v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t *v46;
  int v47;
  float32x4_t v48;
  int32x4_t v49;
  __int32 v50;
  float32x4_t v51;
  __int32 v52;
  int32x4_t v53;
  __int32 v54;
  float32x4_t v55;
  int32x4_t v56;
  __int32 v57;
  __int32 v58;
  float32x4_t v59;
  __int32 v60;
  int32x4_t v61;
  __int32 v62;
  float32x4_t v63;
  int32x4_t v64;
  __int32 v65;
  __int32 v66;
  __int32 v67;
  __int32 v68;
  float32x4_t v69;
  int32x4_t v70;
  __int32 v71;
  float32x4_t v72;
  int32x4_t v73;
  __int32 v74;
  __int32 v75;
  __int32 v76;
  __int32 v77;
  float32x4_t v78;
  int32x4_t v79;
  uint64_t v80;

  v2 = *(_DWORD *)(a2 + 4);
  v3 = *(_DWORD *)(a2 + 12) - v2;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = (float)*(int *)a2 + 0.5;
    v6 = (float)v2 + 0.5;
    v7 = *(float32x4_t **)(a1 + 408);
    v8 = vmulq_n_f32(v7[21], v5);
    v9 = vmulq_n_f32(v7[25], v5);
    v10 = vmulq_n_f32(v7[29], v5);
    v11 = vmulq_n_f32(v7[33], v5);
    v12 = vmulq_n_f32(v7[37], v5);
    v14.f32[0] = v5;
    v14.f32[1] = v6;
    v14.i32[2] = 0;
    v13 = vmulq_n_f32(v7[41], v5);
    v14.i32[3] = 1.0;
    v15 = vmulq_n_f32(v7[45], v5);
    v16 = vaddq_f32(vmulq_n_f32(v7[17], v5), vmulq_n_f32(v7[18], v6));
    v17 = 0uLL;
    v18 = vaddq_f32(v7[20], vaddq_f32(v16, vmulq_f32(v7[19], (float32x4_t)0)));
    v19 = vaddq_f32(v7[24], vaddq_f32(vaddq_f32(v8, vmulq_n_f32(v7[22], v6)), vmulq_f32(v7[23], (float32x4_t)0)));
    v20 = vaddq_f32(v7[28], vaddq_f32(vaddq_f32(v9, vmulq_n_f32(v7[26], v6)), vmulq_f32(v7[27], (float32x4_t)0)));
    v21 = vaddq_f32(v7[32], vaddq_f32(vaddq_f32(v10, vmulq_n_f32(v7[30], v6)), vmulq_f32(v7[31], (float32x4_t)0)));
    v22 = vaddq_f32(v7[36], vaddq_f32(vaddq_f32(v11, vmulq_n_f32(v7[34], v6)), vmulq_f32(v7[35], (float32x4_t)0)));
    v23 = vaddq_f32(v7[40], vaddq_f32(vaddq_f32(v12, vmulq_n_f32(v7[38], v6)), vmulq_f32(v7[39], (float32x4_t)0)));
    v24 = vaddq_f32(v7[44], vaddq_f32(vaddq_f32(v13, vmulq_n_f32(v7[42], v6)), vmulq_f32(v7[43], (float32x4_t)0)));
    v25 = vaddq_f32(v7[48], vaddq_f32(vaddq_f32(v15, vmulq_n_f32(v7[46], v6)), vmulq_f32(v7[47], (float32x4_t)0)));
    v26 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v27 = *(_QWORD *)(a2 + 16);
    v28 = 16 * *(int *)(a2 + 24);
    v29.i64[0] = 0x3F0000003F000000;
    v29.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V19.4S, #1.0 }
    do
    {
      if (v26 >= 1)
      {
        v35 = 0;
        v36 = *(float32x4_t **)(a1 + 408);
        v37 = vaddq_f32(v18, vmulq_f32(v17, v36[18]));
        v38 = vaddq_f32(v19, vmulq_f32(v17, v36[22]));
        v39 = vaddq_f32(v20, vmulq_f32(v17, v36[26]));
        v40 = vaddq_f32(v21, vmulq_f32(v17, v36[30]));
        v41 = vaddq_f32(v22, vmulq_f32(v17, v36[34]));
        v42 = vaddq_f32(v23, vmulq_f32(v17, v36[38]));
        v43 = vaddq_f32(v24, vmulq_f32(v17, v36[42]));
        v44 = vaddq_f32(v25, vmulq_f32(v17, v36[46]));
        v45 = 0uLL;
        do
        {
          v46 = *(float32x4_t **)(a1 + 408);
          v47 = *(_DWORD *)(a2 + 88);
          v48 = vaddq_f32(vsubq_f32(vaddq_f32(v37, vmulq_f32(v45, v46[17])), v14), v29);
          v49 = vcvtq_s32_f32(v48);
          v48.i64[0] = vaddq_s32(v49, vcgtq_f32(vcvtq_f32_s32(v49), v48)).u64[0];
          v50 = v48.i32[1];
          v51 = vaddq_f32(vsubq_f32(vaddq_f32(v38, vmulq_f32(v45, v46[21])), v14), v29);
          v52 = v48.i32[0];
          v53 = vcvtq_s32_f32(v51);
          v53.i64[0] = vaddq_s32(v53, vcgtq_f32(vcvtq_f32_s32(v53), v51)).u64[0];
          v54 = v53.i32[1];
          v55 = vaddq_f32(vsubq_f32(vaddq_f32(v39, vmulq_f32(v45, v46[25])), v14), v29);
          v56 = vcvtq_s32_f32(v55);
          v57 = v53.i32[0];
          v53.i64[0] = vaddq_s32(v56, vcgtq_f32(vcvtq_f32_s32(v56), v55)).u64[0];
          v58 = v53.i32[1];
          v59 = vaddq_f32(vsubq_f32(vaddq_f32(v40, vmulq_f32(v45, v46[29])), v14), v29);
          v60 = v53.i32[0];
          v61 = vcvtq_s32_f32(v59);
          v61.i64[0] = vaddq_s32(v61, vcgtq_f32(vcvtq_f32_s32(v61), v59)).u64[0];
          v62 = v61.i32[1];
          v63 = vaddq_f32(vsubq_f32(vaddq_f32(v41, vmulq_f32(v45, v46[33])), v14), v29);
          v64 = vcvtq_s32_f32(v63);
          v65 = v61.i32[0];
          v61.i64[0] = vaddq_s32(v64, vcgtq_f32(vcvtq_f32_s32(v64), v63)).u64[0];
          v66 = v61.i32[1];
          v67 = v61.i32[0];
          v68 = v52 + v50 * v47;
          v69 = vaddq_f32(vsubq_f32(vaddq_f32(v42, vmulq_f32(v45, v46[37])), v14), v29);
          v70 = vcvtq_s32_f32(v69);
          v69.i64[0] = vaddq_s32(v70, vcgtq_f32(vcvtq_f32_s32(v70), v69)).u64[0];
          v71 = v57 + v54 * v47;
          v72 = vaddq_f32(vsubq_f32(vaddq_f32(v43, vmulq_f32(v45, v46[41])), v14), v29);
          v73 = vcvtq_s32_f32(v72);
          v74 = v60 + v58 * v47;
          v72.i64[0] = vaddq_s32(v73, vcgtq_f32(vcvtq_f32_s32(v73), v72)).u64[0];
          v75 = v72.i32[1];
          v76 = v65 + v62 * v47;
          v77 = v72.i32[0];
          v78 = vaddq_f32(vsubq_f32(vaddq_f32(v44, vmulq_f32(v45, v46[45])), v14), v29);
          v79 = vcvtq_s32_f32(v78);
          v78.i64[0] = vaddq_s32(v79, vcgtq_f32(vcvtq_f32_s32(v79), v78)).u64[0];
          v80 = *(_QWORD *)(a2 + 80);
          *(float32x4_t *)(v27 + v35) = vaddq_f32(vmulq_f32(*(float32x4_t *)(v80 + 16 * (v78.i32[0] + v78.i32[1] * v47)), v46[15]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v80 + 16 * (v77 + v75 * v47)), v46[14]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v80 + 16 * (v69.i32[0] + v69.i32[1] * v47)), v46[13]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v80 + 16 * (v67 + v66 * v47)), v46[12]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v80 + 16 * v76), v46[11]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v80 + 16 * v74), v46[10]), vaddq_f32(vmulq_f32(*(float32x4_t *)(v80 + 16 * v68), v46[8]), vmulq_f32(*(float32x4_t *)(v80 + 16 * v71), v46[9]))))))));
          v45 = vaddq_f32(v45, _Q19);
          v35 += 16;
        }
        while (16 * v26 != v35);
      }
      v17 = vaddq_f32(v17, _Q19);
      ++v4;
      v27 += v28;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcConvolvePass8tapPoint::GetDOD(HgcConvolvePass8tapPoint *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  const HGTransform *v6;
  HGTransformUtils *v8;
  float v9;
  uint64_t DOD;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  HGTransformUtils *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  HGTransformUtils *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  HGTransformUtils *v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  HGTransformUtils *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  HGTransformUtils *v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  HGTransformUtils *v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  HGTransformUtils *v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float64x2_t v62[9];
  HGRect v63;
  HGRect v64;
  HGRect v65;
  HGRect v66;
  HGRect v67;
  HGRect v68;
  HGRect v69;
  HGRect v70;

  v4 = 0;
  if (!a3)
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(const HGTransform **)&a4.var0;
    HGTransform::HGTransform((HGTransform *)v62);
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 272));
    HGTransform::Invert2D((HGTransform *)v62);
    v9 = HGTransformUtils::MinW(v8);
    *(_QWORD *)&v63.var0 = v5;
    DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v62, v6, v63, 0.5, v9);
    v12 = HGRectUnion(0, 0, DOD, v11);
    v14 = v13;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 336));
    HGTransform::Invert2D((HGTransform *)v62);
    v16 = HGTransformUtils::MinW(v15);
    *(_QWORD *)&v64.var0 = v5;
    v17 = HGTransformUtils::GetDOD((HGTransformUtils *)v62, v6, v64, 0.5, v16);
    v19 = HGRectUnion(v12, v14, v17, v18);
    v21 = v20;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 400));
    HGTransform::Invert2D((HGTransform *)v62);
    v23 = HGTransformUtils::MinW(v22);
    *(_QWORD *)&v65.var0 = v5;
    v24 = HGTransformUtils::GetDOD((HGTransformUtils *)v62, v6, v65, 0.5, v23);
    v26 = HGRectUnion(v19, v21, v24, v25);
    v28 = v27;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 464));
    HGTransform::Invert2D((HGTransform *)v62);
    v30 = HGTransformUtils::MinW(v29);
    *(_QWORD *)&v66.var0 = v5;
    v31 = HGTransformUtils::GetDOD((HGTransformUtils *)v62, v6, v66, 0.5, v30);
    v33 = HGRectUnion(v26, v28, v31, v32);
    v35 = v34;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 528));
    HGTransform::Invert2D((HGTransform *)v62);
    v37 = HGTransformUtils::MinW(v36);
    *(_QWORD *)&v67.var0 = v5;
    v38 = HGTransformUtils::GetDOD((HGTransformUtils *)v62, v6, v67, 0.5, v37);
    v40 = HGRectUnion(v33, v35, v38, v39);
    v42 = v41;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 592));
    HGTransform::Invert2D((HGTransform *)v62);
    v44 = HGTransformUtils::MinW(v43);
    *(_QWORD *)&v68.var0 = v5;
    v45 = HGTransformUtils::GetDOD((HGTransformUtils *)v62, v6, v68, 0.5, v44);
    v47 = HGRectUnion(v40, v42, v45, v46);
    v49 = v48;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 656));
    HGTransform::Invert2D((HGTransform *)v62);
    v51 = HGTransformUtils::MinW(v50);
    *(_QWORD *)&v69.var0 = v5;
    v52 = HGTransformUtils::GetDOD((HGTransformUtils *)v62, v6, v69, 0.5, v51);
    v54 = HGRectUnion(v47, v49, v52, v53);
    v56 = v55;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 720));
    HGTransform::Invert2D((HGTransform *)v62);
    v58 = HGTransformUtils::MinW(v57);
    *(_QWORD *)&v70.var0 = v5;
    v59 = HGTransformUtils::GetDOD((HGTransformUtils *)v62, v6, v70, 0.5, v58);
    v4 = HGRectUnion(v54, v56, v59, v60);
    HGTransform::~HGTransform((HGTransform *)v62);
  }
  return v4;
}

void sub_1B2888830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HgcConvolvePass8tapPoint::GetROI(HgcConvolvePass8tapPoint *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  HGTransformUtils *v8;
  float v9;
  uint64_t ROI;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  HGTransformUtils *v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  HGTransformUtils *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  HGTransformUtils *v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  HGTransformUtils *v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  HGTransformUtils *v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  HGTransformUtils *v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  HGTransformUtils *v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  float64x2_t v62[9];
  HGRect v63;
  HGRect v64;
  HGRect v65;
  HGRect v66;
  HGRect v67;
  HGRect v68;
  HGRect v69;
  HGRect v70;

  v4 = 0;
  if (!a3)
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    HGTransform::HGTransform((HGTransform *)v62);
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 272));
    v9 = HGTransformUtils::MinW(v8);
    *(_QWORD *)&v63.var0 = v5;
    ROI = HGTransformUtils::GetROI((HGTransformUtils *)v62, v6, v63, 0.5, v9);
    v12 = HGRectUnion(0, 0, ROI, v11);
    v14 = v13;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 336));
    v16 = HGTransformUtils::MinW(v15);
    *(_QWORD *)&v64.var0 = v5;
    v17 = HGTransformUtils::GetROI((HGTransformUtils *)v62, v6, v64, 0.5, v16);
    v19 = HGRectUnion(v12, v14, v17, v18);
    v21 = v20;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 400));
    v23 = HGTransformUtils::MinW(v22);
    *(_QWORD *)&v65.var0 = v5;
    v24 = HGTransformUtils::GetROI((HGTransformUtils *)v62, v6, v65, 0.5, v23);
    v26 = HGRectUnion(v19, v21, v24, v25);
    v28 = v27;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 464));
    v30 = HGTransformUtils::MinW(v29);
    *(_QWORD *)&v66.var0 = v5;
    v31 = HGTransformUtils::GetROI((HGTransformUtils *)v62, v6, v66, 0.5, v30);
    v33 = HGRectUnion(v26, v28, v31, v32);
    v35 = v34;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 528));
    v37 = HGTransformUtils::MinW(v36);
    *(_QWORD *)&v67.var0 = v5;
    v38 = HGTransformUtils::GetROI((HGTransformUtils *)v62, v6, v67, 0.5, v37);
    v40 = HGRectUnion(v33, v35, v38, v39);
    v42 = v41;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 592));
    v44 = HGTransformUtils::MinW(v43);
    *(_QWORD *)&v68.var0 = v5;
    v45 = HGTransformUtils::GetROI((HGTransformUtils *)v62, v6, v68, 0.5, v44);
    v47 = HGRectUnion(v40, v42, v45, v46);
    v49 = v48;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 656));
    v51 = HGTransformUtils::MinW(v50);
    *(_QWORD *)&v69.var0 = v5;
    v52 = HGTransformUtils::GetROI((HGTransformUtils *)v62, v6, v69, 0.5, v51);
    v54 = HGRectUnion(v47, v49, v52, v53);
    v56 = v55;
    HGTransform::LoadMatrixf(v62, (float32x2_t *)(*((_QWORD *)this + 51) + 720));
    v58 = HGTransformUtils::MinW(v57);
    *(_QWORD *)&v70.var0 = v5;
    v59 = HGTransformUtils::GetROI((HGTransformUtils *)v62, v6, v70, 0.5, v58);
    v4 = HGRectUnion(v54, v56, v59, v60);
    HGTransform::~HGTransform((HGTransform *)v62);
  }
  return v4;
}

void sub_1B2888B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void HgcConvolvePass8tapPoint::HgcConvolvePass8tapPoint(HgcConvolvePass8tapPoint *this)
{
  uint64_t v2;
  HgcConvolvePass8tapPoint::State *v3;
  double v4;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E64E9C58;
  *(_DWORD *)(v2 + 416) = 1;
  v3 = (HgcConvolvePass8tapPoint::State *)operator new();
  v4 = HgcConvolvePass8tapPoint::State::State(v3);
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcConvolvePass8tapPoint *, _QWORD, uint64_t, double))(*(_QWORD *)this + 136))(this, 0, 1, v4);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2888BC0(_Unwind_Exception *a1)
{
  HGNode *v1;
  uint64_t v2;
  uint64_t v3;

  v3 = v2;
  MEMORY[0x1B5E29170](v3, 0x1000C40A461079ELL);
  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcConvolvePass8tapPoint::~HgcConvolvePass8tapPoint(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E9C58;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40A461079ELL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcConvolvePass8tapPoint::~HgcConvolvePass8tapPoint(this);
  HGObject::operator delete(v1);
}

uint64_t HgcConvolvePass8tapPoint::SetParameter(HgcConvolvePass8tapPoint *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;

  if (a2 > 0x10)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  v11 = 1;
  *((_DWORD *)this + 104) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v11;
}

uint64_t HgcConvolvePass8tapPoint::GetParameter(HgcConvolvePass8tapPoint *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 0x10)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

HgcConvolvePass8tapPoint *HgcConvolvePass8tapPoint::GetOutput(HgcConvolvePass8tapPoint *this, void *a2)
{
  if (*((_DWORD *)this + 104))
  {
    HgcConvolvePass8tapPoint::Setup(this, a2);
    *((_DWORD *)this + 104) = 0;
  }
  return this;
}

double HgcConvolvePass8tapPoint::State::State(HgcConvolvePass8tapPoint::State *this)
{
  double result;

  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = xmmword_1B304F230;
  *((_OWORD *)this + 18) = xmmword_1B304F240;
  *((_OWORD *)this + 19) = xmmword_1B304F250;
  *((_OWORD *)this + 20) = xmmword_1B304EFF0;
  *((_OWORD *)this + 21) = xmmword_1B304F230;
  *((_OWORD *)this + 22) = xmmword_1B304F240;
  *((_OWORD *)this + 23) = xmmword_1B304F250;
  *((_OWORD *)this + 24) = xmmword_1B304EFF0;
  *((_OWORD *)this + 25) = xmmword_1B304F230;
  *((_OWORD *)this + 26) = xmmword_1B304F240;
  *((_OWORD *)this + 27) = xmmword_1B304F250;
  *((_OWORD *)this + 28) = xmmword_1B304EFF0;
  *((_OWORD *)this + 29) = xmmword_1B304F230;
  *((_OWORD *)this + 30) = xmmword_1B304F240;
  *((_OWORD *)this + 31) = xmmword_1B304F250;
  *((_OWORD *)this + 32) = xmmword_1B304EFF0;
  *((_OWORD *)this + 33) = xmmword_1B304F230;
  *((_OWORD *)this + 34) = xmmword_1B304F240;
  *((_OWORD *)this + 35) = xmmword_1B304F250;
  *((_OWORD *)this + 36) = xmmword_1B304EFF0;
  *((_OWORD *)this + 37) = xmmword_1B304F230;
  *((_OWORD *)this + 38) = xmmword_1B304F240;
  *((_OWORD *)this + 39) = xmmword_1B304F250;
  *((_OWORD *)this + 40) = xmmword_1B304EFF0;
  *((_OWORD *)this + 41) = xmmword_1B304F230;
  *((_OWORD *)this + 42) = xmmword_1B304F240;
  *((_OWORD *)this + 43) = xmmword_1B304F250;
  *((_OWORD *)this + 44) = xmmword_1B304EFF0;
  *((_OWORD *)this + 45) = xmmword_1B304F230;
  *((_OWORD *)this + 46) = xmmword_1B304F240;
  *((_OWORD *)this + 47) = xmmword_1B304F250;
  *((_OWORD *)this + 48) = xmmword_1B304EFF0;
  *((_OWORD *)this + 49) = xmmword_1B304F230;
  *((_OWORD *)this + 50) = xmmword_1B304F240;
  *((_OWORD *)this + 51) = xmmword_1B304F250;
  result = NAN;
  *((_OWORD *)this + 52) = xmmword_1B304EFF0;
  *((_OWORD *)this + 53) = xmmword_1B3050F80;
  return result;
}

const char *HgcGradientRadial::GetProgram(HgcGradientRadial *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000628\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.5000000000, 1.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    s0.x = dot(s0.xyz, s0.xyz);\n"
             "    s0.x = sqrt(s0.x);\n"
             "    s0.x = s0.x - hg_Params[1].x;\n"
             "    r0.x = half(hg_Params[1].y) - half(hg_Params[1].x);\n"
             "    s0.x = s0.x/float(r0.x);\n"
             "    s1.x = s0.x*hg_Params[1].z;\n"
             "    s1.x = fmax(s1.x, float(c0.x));\n"
             "    s1.x = fmin(s1.x, hg_Params[1].w);\n"
             "    s1.y = float(c0.x);\n"
             "    s1.xy = floor(s1.xy);\n"
             "    s1.xy = s1.xy + float2(c0.yy);\n"
             "    s1.xy = s1.xy + hg_Params[2].xy;\n"
             "    s1.xy = s1.xy*hg_Params[2].zw;\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    s1.x = float(c0.z) - s0.x;\n"
             "    s0.x = clamp(s0.x*float(r0.x) + float(c0.y), 0.00000f, 1.00000f);\n"
             "    r2.x = half(c0.x >= half(hg_Params[1].x));\n"
             "    s0.x = fmax(s0.x, float(r2.x));\n"
             "    s1.x = clamp(s1.x*float(r0.x) + float(c0.y), 0.00000f, 1.00000f);\n"
             "    r2.x = half(c0.x >= half(hg_Params[1].y));\n"
             "    s1.x = fmax(s1.x, float(r2.x));\n"
             "    s0.x = s0.x*s1.x;\n"
             "    s1.xyz = float3(r1.xyz);\n"
             "    s1.w = float(r1.w)*s0.x;\n"
             "    s1.xyz = s1.xyz*s1.www;\n"
             "    output.color0 = s1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=3c4c54e1:241e28b8:e52b03f9:f634c44d\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0003:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000591\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.5000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    r0.x = dot(r0.xyz, r0.xyz);\n"
             "    r0.x = sqrt(r0.x);\n"
             "    r0.x = r0.x - hg_Params[1].x;\n"
             "    r1.x = hg_Params[1].y - hg_Params[1].x;\n"
             "    r0.x = r0.x/r1.x;\n"
             "    r2.x = r0.x*hg_Params[1].z;\n"
             "    r2.x = fmax(r2.x, c0.x);\n"
             "    r2.x = fmin(r2.x, hg_Params[1].w);\n"
             "    r2.y = c0.x;\n"
             "    r2.xy = floor(r2.xy);\n"
             "    r2.xy = r2.xy + c0.yy;\n"
             "    r2.xy = r2.xy + hg_Params[2].xy;\n"
             "    r2.xy = r2.xy*hg_Params[2].zw;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
             "    r3.x = c0.z - r0.x;\n"
             "    r0.x = clamp(r0.x*r1.x + c0.y, 0.00000f, 1.00000f);\n"
             "    r4.x = float(c0.x >= hg_Params[1].x);\n"
             "    r0.x = fmax(r0.x, r4.x);\n"
             "    r3.x = clamp(r3.x*r1.x + c0.y, 0.00000f, 1.00000f);\n"
             "    r4.x = float(c0.x >= hg_Params[1].y);\n"
             "    r3.x = fmax(r3.x, r4.x);\n"
             "    r0.x = r0.x*r3.x;\n"
             "    r2.w = r2.w*r0.x;\n"
             "    r2.xyz = r2.xyz*r2.www;\n"
             "    output.color0 = r2;\n"
             "    return output;\n"
             "}\n"
             "//MD5=605cffe4:afd68dec:9f2f4cf2:de416909\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0003:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000005c1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.5000000000, 1.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0.xyz = hg_TexCoord0.xyz - hg_ProgramLocal0.xyz;\n"
           "    r0.x = dot(r0.xyz, r0.xyz);\n"
           "    r0.x = sqrt(r0.x);\n"
           "    r0.x = r0.x - hg_ProgramLocal1.x;\n"
           "    r1.x = hg_ProgramLocal1.y - hg_ProgramLocal1.x;\n"
           "    r0.x = r0.x/r1.x;\n"
           "    r2.x = r0.x*hg_ProgramLocal1.z;\n"
           "    r2.x = max(r2.x, c0.x);\n"
           "    r2.x = min(r2.x, hg_ProgramLocal1.w);\n"
           "    r2.y = c0.x;\n"
           "    r2.xy = floor(r2.xy);\n"
           "    r2.xy = r2.xy + c0.yy;\n"
           "    r2.xy = r2.xy + hg_ProgramLocal2.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal2.zw;\n"
           "    r2 = texture2D(hg_Texture0, r2.xy);\n"
           "    r3.x = c0.z - r0.x;\n"
           "    r0.x = clamp(r0.x*r1.x + c0.y, 0.00000, 1.00000);\n"
           "    r4.x = float(c0.x >= hg_ProgramLocal1.x);\n"
           "    r0.x = max(r0.x, r4.x);\n"
           "    r3.x = clamp(r3.x*r1.x + c0.y, 0.00000, 1.00000);\n"
           "    r4.x = float(c0.x >= hg_ProgramLocal1.y);\n"
           "    r3.x = max(r3.x, r4.x);\n"
           "    r0.x = r0.x*r3.x;\n"
           "    r2.w = r2.w*r0.x;\n"
           "    r2.xyz = r2.xyz*r2.www;\n"
           "    gl_FragColor = r2;\n"
           "}\n"
           "//MD5=3ba5fef6:24dc82ff:dc6f0318:0ed76bfc\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0003:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcGradientRadial::InitProgramDescriptor(HgcGradientRadial *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGradientRadial_hgc_visible", "//Metal1.0     \n//LEN=00000004d5\n[[ visible ]] FragmentOut HgcGradientRadial_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 0.5000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = texCoord0.xyz - hg_Params[0].xyz;\n"
    "    r0.x = dot(r0.xyz, r0.xyz);\n"
    "    r0.x = sqrt(r0.x);\n"
    "    r0.x = r0.x - hg_Params[1].x;\n"
    "    r1.x = hg_Params[1].y - hg_Params[1].x;\n"
    "    r0.x = r0.x/r1.x;\n"
    "    r2.x = r0.x*hg_Params[1].z;\n"
    "    r2.x = fmax(r2.x, c0.x);\n"
    "    r2.x = fmin(r2.x, hg_Params[1].w);\n"
    "    r2.y = c0.x;\n"
    "    r2.xy = floor(r2.xy);\n"
    "    r2.xy = r2.xy + c0.yy;\n"
    "    r2.xy = r2.xy + hg_Params[2].xy;\n"
    "    r2.xy = r2.xy*hg_Params[2].zw;\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
    "    r3.x = c0.z - r0.x;\n"
    "    r0.x = clamp(r0.x*r1.x + c0.y, 0.00000f, 1.00000f);\n"
    "    r4.x = float(c0.x >= hg_Params[1].x);\n"
    "    r0.x = fmax(r0.x, r4.x);\n"
    "    r3.x = clamp(r3.x*r1.x + c0.y, 0.00000f, 1.00000f);\n"
    "    r4.x = float(c0.x >= hg_Params[1].y);\n"
    "    r3.x = fmax(r3.x, r4.x);\n"
    "    r0.x = r0.x*r3.x;\n"
    "    r2.w = r2.w*r0.x;\n"
    "    r2.xyz = r2.xyz*r2.www;\n"
    "    output.color0 = r2;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2888EC8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGradientRadial");
}

void sub_1B2888ED8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2889058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28890A8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28890A0);
}

_QWORD *HgcGradientRadial::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGradientRadial [hgc1]");
}

uint64_t HgcGradientRadial::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 2, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcGradientRadial::Bind(HgcGradientRadial *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgcGradientRadial *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcGradientRadial::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  float32x4_t v5;
  int v6;
  int32x2_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  int32x4_t v50;
  __int32 v51;
  int32x2_t v52;
  float32x4_t v53;
  int32x4_t v54;
  __int32 v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t *v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  float32x4_t v99;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    v6 = a2[1].i32[0] - v2.i32[0];
    v7 = a2[2];
    v8 = 16 * a2[3].i32[0];
    v9.i64[0] = 0x3F0000003F000000;
    v9.i64[1] = 0x3F0000003F000000;
    v10 = v5;
    do
    {
      if (v6 < 2)
      {
        v11 = 0;
        v13 = v10;
      }
      else
      {
        v11 = 0;
        v12 = v6;
        v13 = v10;
        do
        {
          v14 = *(_QWORD *)(a1 + 408);
          v15 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v16 = *(float32x4_t *)(v14 + 16);
          v17 = vsubq_f32(v13, *(float32x4_t *)v14);
          v18 = vsubq_f32(v15, *(float32x4_t *)v14);
          v19 = vmulq_f32(v17, v17);
          v20 = vmulq_f32(v18, v18);
          v21 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), vaddq_f32(v19, (float32x4_t)vrev64q_s32((int32x4_t)v19)));
          v22 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), vaddq_f32(v20, (float32x4_t)vrev64q_s32((int32x4_t)v20)));
          v23 = *(float32x4_t *)(v14 + 32);
          v24 = *(float32x4_t *)(v14 + 48);
          v25 = vminq_f32(vrsqrteq_f32(v21), v23);
          v26 = vminq_f32(vrsqrteq_f32(v22), v23);
          v27 = vminq_f32(vmulq_f32(v25, vrsqrtsq_f32(vmulq_f32(v25, v21), v25)), v23);
          v28 = vminq_f32(vmulq_f32(v26, vrsqrtsq_f32(vmulq_f32(v26, v22), v26)), v23);
          v29 = vmulq_f32(v21, vminq_f32(vmulq_f32(v27, vrsqrtsq_f32(vmulq_f32(v21, v27), v27)), v23));
          v30 = vmulq_f32(v22, vminq_f32(vmulq_f32(v28, vrsqrtsq_f32(vmulq_f32(v22, v28), v28)), v23));
          v31 = (float32x4_t)vrev64q_s32((int32x4_t)v16);
          v32 = vsubq_f32(v31, v16);
          v33 = vminq_f32(vmaxq_f32(vrecpeq_f32(v32), v24), v23);
          v34 = vminq_f32(vmaxq_f32(vmulq_f32(v33, vrecpsq_f32(v32, v33)), v24), v23);
          v35 = vmulq_f32(v34, vrecpsq_f32(v32, v34));
          v36 = vmulq_f32(vsubq_f32(v29, v16), v35);
          v37 = vmulq_f32(vsubq_f32(v30, v16), v35);
          v38 = *(float32x4_t *)(v14 + 64);
          v39 = *(float32x4_t *)(v14 + 80);
          v40 = (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 0xCuLL);
          v41 = vminq_f32(vmaxq_f32(vmulq_laneq_f32(v36, v16, 2), v38), v40);
          v42 = vminq_f32(vmaxq_f32(vmulq_laneq_f32(v37, v16, 2), v38), v40);
          v41.i32[1] = 0;
          v42.i32[1] = 0;
          v43 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
          v44 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
          v45 = vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v43, v41)));
          v46 = vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v44, v42)));
          v47 = *(float32x4_t *)(v14 + 96);
          v48 = *(int8x16_t *)(v14 + 112);
          LODWORD(v14) = a2[11].i32[0];
          v49 = vaddq_f32(vsubq_f32(vaddq_f32(v47, v45), v5), v9);
          v50 = vcvtq_s32_f32(v49);
          v49.i64[0] = vaddq_s32(v50, vcgtq_f32(vcvtq_f32_s32(v50), v49)).u64[0];
          v51 = v49.i32[1];
          v52 = a2[10];
          v53 = vaddq_f32(vsubq_f32(vaddq_f32(v47, v46), v5), v9);
          v54 = vcvtq_s32_f32(v53);
          v55 = v49.i32[0];
          v53.i64[0] = vaddq_s32(v54, vcgtq_f32(vcvtq_f32_s32(v54), v53)).u64[0];
          v56 = vsubq_f32(v39, v36);
          v57 = vsubq_f32(v39, v37);
          v58 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v38, v16));
          v59 = vmaxq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v32, v36), v47), v38), v39), v58);
          v60 = vmaxq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v32, v37), v47), v38), v39), v58);
          v61 = vaddq_f32(v47, vmulq_f32(v32, v56));
          v62 = vmaxq_f32(vaddq_f32(v47, vmulq_f32(v32, v57)), v38);
          v63 = *(float32x4_t *)(*(_QWORD *)&v52 + 16 * (v55 + v51 * (int)v14));
          v64 = vminq_f32(v62, v39);
          v65 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v38, v31));
          v66 = vmaxq_f32(vminq_f32(vmaxq_f32(v61, v38), v39), v65);
          v67 = *(float32x4_t *)(*(_QWORD *)&v52 + 16 * (v53.i32[0] + v53.i32[1] * (int)v14));
          v60.i32[0] = vmulq_f32(v60, vmaxq_f32(v64, v65)).u32[0];
          v68 = (int8x16_t)vmulq_n_f32(v63, vmulq_f32(v59, v66).f32[0]);
          v69 = (int8x16_t)vmulq_n_f32(v67, v60.f32[0]);
          v70 = (float32x4_t)vbslq_s8(v48, v68, (int8x16_t)v63);
          v71 = (float32x4_t)vbslq_s8(v48, v69, (int8x16_t)v67);
          v72 = (int8x16_t *)(*(_QWORD *)&v7 + 16 * v11);
          *v72 = vbslq_s8(v48, v68, (int8x16_t)vmulq_laneq_f32(v70, v70, 3));
          v72[1] = vbslq_s8(v48, v69, (int8x16_t)vmulq_laneq_f32(v71, v71, 3));
          v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v11 += 2;
          v12 -= 2;
        }
        while (v12 > 1);
        v11 = v11;
      }
      if ((int)v11 < v6)
      {
        v73 = *(_QWORD *)(a1 + 408);
        v74 = *(float32x4_t *)(v73 + 16);
        v75 = vsubq_f32(v13, *(float32x4_t *)v73);
        v76 = vmulq_f32(v75, v75);
        v77 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), vaddq_f32(v76, (float32x4_t)vrev64q_s32((int32x4_t)v76)));
        v78 = *(float32x4_t *)(v73 + 32);
        v79 = *(float32x4_t *)(v73 + 48);
        v80 = vminq_f32(vrsqrteq_f32(v77), v78);
        v81 = vminq_f32(vmulq_f32(v80, vrsqrtsq_f32(vmulq_f32(v80, v77), v80)), v78);
        v82 = vsubq_f32(vmulq_f32(v77, vminq_f32(vmulq_f32(v81, vrsqrtsq_f32(vmulq_f32(v81, v77), v81)), v78)), v74);
        v83 = (float32x4_t)vrev64q_s32((int32x4_t)v74);
        v84 = vsubq_f32(v83, v74);
        v85 = vminq_f32(vmaxq_f32(vrecpeq_f32(v84), v79), v78);
        v86 = vminq_f32(vmaxq_f32(vmulq_f32(v85, vrecpsq_f32(v84, v85)), v79), v78);
        v87 = vmulq_f32(v82, vmulq_f32(v86, vrecpsq_f32(v84, v86)));
        v88 = *(float32x4_t *)(v73 + 64);
        v89 = *(float32x4_t *)(v73 + 80);
        v90 = vminq_f32(vmaxq_f32(vmulq_laneq_f32(v87, v74, 2), v88), (float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 0xCuLL));
        v90.i32[1] = 0;
        v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
        v92 = vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v91, v90)));
        v93 = *(float32x4_t *)(v73 + 96);
        v94 = *(int8x16_t *)(v73 + 112);
        v95 = vaddq_f32(vsubq_f32(vaddq_f32(v93, v92), v5), v9);
        v96 = vcvtq_s32_f32(v95);
        v95.i64[0] = vaddq_s32(v96, vcgtq_f32(vcvtq_f32_s32(v96), v95)).u64[0];
        v97 = *(float32x4_t *)(*(_QWORD *)&a2[10] + 16 * (v95.i32[0] + v95.i32[1] * a2[11].i32[0]));
        v98 = (int8x16_t)vmulq_n_f32(v97, vmulq_f32(vmaxq_f32(vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v84, v87), v93), v88), v89), (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgeq_f32(v88, v74))), vmaxq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v93, vmulq_f32(v84, vsubq_f32(v89, v87))), v88), v89), (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgeq_f32(v88, v83)))).f32[0]);
        v99 = (float32x4_t)vbslq_s8(v94, v98, (int8x16_t)v97);
        *(int8x16_t *)(*(_QWORD *)&v7 + 16 * v11) = vbslq_s8(v94, v98, (int8x16_t)vmulq_laneq_f32(v99, v99, 3));
      }
      v10 = vaddq_f32(v10, (float32x4_t)xmmword_1B304F240);
      *(_QWORD *)&v7 += v8;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcGradientRadial::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcGradientRadial::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  return HGRenderer::GetDOD(a2, Input);
}

void HgcGradientRadial::HgcGradientRadial(HgcGradientRadial *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64E9EC0;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(int32x4_t *)(v3 + 32) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 48) = xmmword_1B3051200;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_OWORD *)(v3 + 80) = xmmword_1B30520F0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3052100;
  *(_OWORD *)(v3 + 112) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcGradientRadial *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2889778(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGradientRadial::~HgcGradientRadial(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64E9EC0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AE2C30F4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGradientRadial::~HgcGradientRadial(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGradientRadial::SetParameter(HgcGradientRadial *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcGradientRadial::GetParameter(HgcGradientRadial *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcAddNoise::GetProgram(HgcAddNoise *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003a8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r0 = r0*c0.xxxw + -c0.wwwy;\n"
             "    r0 = r0*half4(hg_Params[0]);\n"
             "    r0 = mix(r0, fabs(r0), half4(hg_Params[1]));\n"
             "    output.color0 = float4(r0)*float4(r1.wwww);\n"
             "    return output;\n"
             "}\n"
             "//MD5=351c513a:5317fbd3:3bf78317:c73476bd\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000380\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r0 = r0*c0.xxxw + -c0.wwwy;\n"
             "    r0 = r0*hg_Params[0];\n"
             "    r0 = mix(r0, fabs(r0), hg_Params[1]);\n"
             "    output.color0 = r0*r1.wwww;\n"
             "    return output;\n"
             "}\n"
             "//MD5=00c8b6e9:aac4b27c:ea17cbcf:84848fcd\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000035a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.w = texture2D(hg_Texture1, hg_TexCoord1.xy).w;\n"
           "    r0 = r0*c0.xxxw + -c0.wwwy;\n"
           "    r0 = r0*hg_ProgramLocal0;\n"
           "    r0 = mix(r0, abs(r0), hg_ProgramLocal1);\n"
           "    gl_FragColor = r0*r1.wwww;\n"
           "}\n"
           "//MD5=38b093f1:a0f98003:aa398f2b:c4ce3f45\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcAddNoise::InitProgramDescriptor(HgcAddNoise *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcAddNoise_hgc_visible", "//Metal1.0     \n//LEN=00000001da\n[[ visible ]] FragmentOut HgcAddNoise_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = color1.w;\n"
    "    r0 = r0*c0.xxxw + -c0.wwwy;\n"
    "    r0 = r0*hg_Params[0];\n"
    "    r0 = mix(r0, fabs(r0), hg_Params[1]);\n"
    "    output.color0 = r0*r1.wwww;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2889980()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcAddNoise");
}

void sub_1B2889990(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2889AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2889B18()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2889B10);
}

_QWORD *HgcAddNoise::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcAddNoise [hgc1]");
}

uint64_t HgcAddNoise::BindTexture(HgcAddNoise *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcAddNoise::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcAddNoise::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t v31;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v29) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t **)(a1 + 408);
          v14 = v13[2];
          v15 = v13[3];
          v16 = vaddq_f32(v14, vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), v15));
          v17 = vaddq_f32(v14, vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), v15));
          v18 = vaddq_f32(v14, vmulq_f32(*(float32x4_t *)(v8 + v12), v15));
          v19 = vaddq_f32(v14, vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), v15));
          v20 = v13[1];
          v21 = vmulq_f32(*v13, v16);
          v22 = vmulq_f32(*v13, v17);
          v23 = vmulq_f32(*v13, v18);
          v24 = vmulq_f32(*v13, v19);
          v25 = vmulq_laneq_f32(vaddq_f32(v22, vmulq_f32(v20, vsubq_f32(vabsq_f32(v22), v22))), *(float32x4_t *)(v6 + v12 - 16), 3);
          v26 = vmulq_laneq_f32(vaddq_f32(v23, vmulq_f32(v20, vsubq_f32(vabsq_f32(v23), v23))), *(float32x4_t *)(v6 + v12), 3);
          v27 = vmulq_laneq_f32(vaddq_f32(v24, vmulq_f32(v20, vsubq_f32(vabsq_f32(v24), v24))), *(float32x4_t *)(v6 + v12 + 16), 3);
          v28 = (float32x4_t *)(v5 + v12);
          v28[-2] = vmulq_laneq_f32(vaddq_f32(v21, vmulq_f32(v20, vsubq_f32(vabsq_f32(v21), v21))), *(float32x4_t *)(v6 + v12 - 32), 3);
          v28[-1] = v25;
          *v28 = v26;
          v28[1] = v27;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v29) = -v11;
      }
      if ((int)v29 < v4)
      {
        v29 = v29;
        do
        {
          v30 = *(float32x4_t **)(a1 + 408);
          v31 = vmulq_f32(*v30, vaddq_f32(v30[2], vmulq_f32(*(float32x4_t *)(v8 + 16 * v29), v30[3])));
          *(float32x4_t *)(v5 + 16 * v29) = vmulq_laneq_f32(vaddq_f32(v31, vmulq_f32(v30[1], vsubq_f32(vabsq_f32(v31), v31))), *(float32x4_t *)(v6 + 16 * v29), 3);
          ++v29;
        }
        while (v29 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcAddNoise::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcAddNoise::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcAddNoise::HgcAddNoise(HgcAddNoise *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EA128;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = xmmword_1B3052130;
  v3[3] = xmmword_1B3052140;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2889EE0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcAddNoise::~HgcAddNoise(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EA128;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcAddNoise::~HgcAddNoise(this);
  HGObject::operator delete(v1);
}

uint64_t HgcAddNoise::SetParameter(HgcAddNoise *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcAddNoise::GetParameter(HgcAddNoise *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcAddNoiseNormal::GetProgram(HgcAddNoiseNormal *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003ba\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xyz = r0.xyz*c0.xxx + c0.yyy;\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xyz);\n"
             "    r1.xyz = r1.www*r0.xyz + r1.xyz;\n"
             "    output.color0 = fmax(float4(r1), float4(c0.zzzz));\n"
             "    return output;\n"
             "}\n"
             "//MD5=b6eb1b5d:36aa7a4a:639b7de7:07a796b5\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000398\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r0.xyz = r0.xyz*c0.xxx + c0.yyy;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
             "    r1.xyz = r1.www*r0.xyz + r1.xyz;\n"
             "    output.color0 = fmax(r1, c0.zzzz);\n"
             "    return output;\n"
             "}\n"
             "//MD5=21c19ffa:62c5fd90:2921b5b6:e1068e7e\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000346\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture0, hg_TexCoord0.xy).xyz;\n"
           "    r0.xyz = r0.xyz*c0.xxx + c0.yyy;\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz;\n"
           "    r1.xyz = r1.www*r0.xyz + r1.xyz;\n"
           "    gl_FragColor = max(r1, c0.zzzz);\n"
           "}\n"
           "//MD5=5d3fb6b8:ba12248d:f5f40f6b:61a1a675\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcAddNoiseNormal::InitProgramDescriptor(HgcAddNoiseNormal *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcAddNoiseNormal_hgc_visible", "//Metal1.0     \n//LEN=00000001f8\n[[ visible ]] FragmentOut HgcAddNoiseNormal_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(2.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color0.xyz;\n"
    "    r0.xyz = r0.xyz*c0.xxx + c0.yyy;\n"
    "    r1 = color1;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
    "    r1.xyz = r1.www*r0.xyz + r1.xyz;\n"
    "    output.color0 = fmax(r1, c0.zzzz);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B288A0EC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcAddNoiseNormal");
}

void sub_1B288A0FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B288A23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B288A284()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B288A27CLL);
}

_QWORD *HgcAddNoiseNormal::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcAddNoiseNormal [hgc1]");
}

uint64_t HgcAddNoiseNormal::BindTexture(HgcAddNoiseNormal *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcAddNoiseNormal::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcAddNoiseNormal::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v24) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(_QWORD *)(a1 + 408);
          v14 = *(float32x4_t *)(v13 + 32);
          v15 = *(int8x16_t *)(v13 + 48);
          v16 = *(float32x4_t *)(v13 + 16);
          v17 = vaddq_f32(v16, vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), v14));
          v18 = (float32x4_t)vbslq_s8(v15, *(int8x16_t *)(v6 + v12 - 16), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v12 - 16), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v16, vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), v14)), *(float32x4_t *)v13), *(float32x4_t *)(v6 + v12 - 16), 3)));
          v19 = (float32x4_t)vbslq_s8(v15, *(int8x16_t *)(v6 + v12), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v12), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v16, vmulq_f32(*(float32x4_t *)(v8 + v12), v14)), *(float32x4_t *)v13), *(float32x4_t *)(v6 + v12), 3)));
          v20 = (float32x4_t)vbslq_s8(v15, *(int8x16_t *)(v6 + v12 + 16), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v12 + 16), vmulq_laneq_f32(vmulq_f32(vaddq_f32(v16, vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), v14)), *(float32x4_t *)v13), *(float32x4_t *)(v6 + v12 + 16), 3)));
          v21 = *(float32x4_t *)(v13 + 64);
          v22 = vmaxq_f32((float32x4_t)vbslq_s8(v15, *(int8x16_t *)(v6 + v12 - 32), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + v12 - 32), vmulq_laneq_f32(vmulq_f32(v17, *(float32x4_t *)v13), *(float32x4_t *)(v6 + v12 - 32), 3))), v21);
          v23 = (float32x4_t *)(v5 + v12);
          v23[-2] = v22;
          v23[-1] = vmaxq_f32(v18, v21);
          *v23 = vmaxq_f32(v19, v21);
          v23[1] = vmaxq_f32(v20, v21);
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v24) = -v11;
      }
      if ((int)v24 < v4)
      {
        v24 = v24;
        do
        {
          v25 = *(_QWORD *)(a1 + 408);
          *(float32x4_t *)(v5 + 16 * v24) = vmaxq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v25 + 48), *(int8x16_t *)(v6 + 16 * v24), (int8x16_t)vaddq_f32(*(float32x4_t *)(v6 + 16 * v24), vmulq_laneq_f32(vmulq_f32(vaddq_f32(*(float32x4_t *)(v25 + 16), vmulq_f32(*(float32x4_t *)(v8 + 16 * v24), *(float32x4_t *)(v25 + 32))), *(float32x4_t *)v25), *(float32x4_t *)(v6 + 16 * v24), 3))), *(float32x4_t *)(v25 + 64));
          ++v24;
        }
        while (v24 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcAddNoiseNormal::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcAddNoiseNormal::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcAddNoiseNormal::HgcAddNoiseNormal(HgcAddNoiseNormal *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EA390;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = xmmword_1B3052130;
  *(_OWORD *)(v3 + 32) = xmmword_1B3051520;
  *(_OWORD *)(v3 + 48) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B288A630(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcAddNoiseNormal::~HgcAddNoiseNormal(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EA390;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcAddNoiseNormal::~HgcAddNoiseNormal(this);
  HGObject::operator delete(v1);
}

uint64_t HgcAddNoiseNormal::SetParameter(HgcAddNoiseNormal *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v8;
  int32x4_t v9;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (__n128 *)*((_QWORD *)this + 51);
  if (v8->n128_f32[0] == a3.n128_f32[0]
    && v8->n128_f32[1] == a3.n128_f32[0]
    && v8->n128_f32[2] == a3.n128_f32[0]
    && v8->n128_f32[3] == 0.0)
  {
    return 0;
  }
  v9 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
  v9.i32[2] = a3.n128_u32[0];
  a3.n128_f32[1] = a4;
  *v8 = (__n128)v9;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  v8[5] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcAddNoiseNormal::GetParameter(HgcAddNoiseNormal *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[20];
    a3[1] = v3[21];
    a3[2] = v3[22];
    result = v3[23];
    a3[3] = result;
  }
  return result;
}

const char *HgcHalftone::GetProgram(HgcHalftone *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000623\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.5000000000, 2.000000000, 3.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord1 - hg_Params[0];\n"
             "    s0 = s0*hg_Params[4];\n"
             "    s1.x = dot(s0, hg_Params[1]);\n"
             "    s1.y = dot(s0, hg_Params[2]);\n"
             "    s1.xy = s1.xy + hg_Params[0].xy;\n"
             "    s1.xy = fract(s1.xy);\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s0 = s1.xxyy - float4(c0.xyxy);\n"
             "    s0 = clamp(s0 + s0, 0.00000f, 1.00000f);\n"
             "    s2 = -s0*float4(c0.zzzz) + float4(c0.wwww);\n"
             "    s0 = s0*s0;\n"
             "    s0 = s0*s2;\n"
             "    s0.yw = -s0.yw;\n"
             "    s0 = s0*float4(c0.yyyy) + float4(c0.xyxy);\n"
             "    s1 = float4(s1.xxyy < float4(c0.yyyy));\n"
             "    s1.yw = -s1.yw;\n"
             "    s1 = s1 + float4(c1.xyxy);\n"
             "    s1 = s0*s1;\n"
             "    r1.xyz = half3(dot(r0, half4(hg_Params[5])));\n"
             "    s1.xyz = float3(dot(s1, 1.00000f));\n"
             "    s1.xyz = float3(r1.xyz) - s1.xyz;\n"
             "    s1.xyz = clamp(s1.xyz*hg_Params[3].xyz + float3(c0.yyy), 0.00000f, 1.00000f);\n"
             "    s1.xyz = s1.xyz*float3(r0.www);\n"
             "    s1.w = float(r0.w);\n"
             "    output.color0 = mix(float4(r0), s1, hg_Params[6]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=8dc40409:6be48a07:e4177f1a:ed135c9a\n"
             "//SIG=00400000:00000001:00000001:00000001:0002:0007:0005:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000005ad\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.5000000000, 2.000000000, 3.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord1 - hg_Params[0];\n"
             "    r0 = r0*hg_Params[4];\n"
             "    r1.x = dot(r0, hg_Params[1]);\n"
             "    r1.y = dot(r0, hg_Params[2]);\n"
             "    r1.xy = r1.xy + hg_Params[0].xy;\n"
             "    r1.xy = fract(r1.xy);\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r2 = r1.xxyy - c0.xyxy;\n"
             "    r2 = clamp(r2 + r2, 0.00000f, 1.00000f);\n"
             "    r3 = -r2*c0.zzzz + c0.wwww;\n"
             "    r2 = r2*r2;\n"
             "    r2 = r2*r3;\n"
             "    r2.yw = -r2.yw;\n"
             "    r2 = r2*c0.yyyy + c0.xyxy;\n"
             "    r1 = float4(r1.xxyy < c0.yyyy);\n"
             "    r1.yw = -r1.yw;\n"
             "    r1 = r1 + c1.xyxy;\n"
             "    r1 = r2*r1;\n"
             "    r3.xyz = float3(dot(r0, hg_Params[5]));\n"
             "    r1.xyz = float3(dot(r1, 1.00000f));\n"
             "    r3.xyz = r3.xyz - r1.xyz;\n"
             "    r3.xyz = clamp(r3.xyz*hg_Params[3].xyz + c0.yyy, 0.00000f, 1.00000f);\n"
             "    r3.xyz = r3.xyz*r0.www;\n"
             "    r3.w = r0.w;\n"
             "    output.color0 = mix(r0, r3, hg_Params[6]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=af220099:6dd2dcb9:59b4a777:090c1842\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0007:0004:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006ad\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.5000000000, 2.000000000, 3.000000000);\n"
           "    const highp vec4 c1 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = hg_TexCoord1 - hg_ProgramLocal0;\n"
           "    r0 = r0*hg_ProgramLocal4;\n"
           "    r1.x = dot(r0, hg_ProgramLocal1);\n"
           "    r1.y = dot(r0, hg_ProgramLocal2);\n"
           "    r1.xy = r1.xy + hg_ProgramLocal0.xy;\n"
           "    r1.xy = fract(r1.xy);\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r2 = r1.xxyy - c0.xyxy;\n"
           "    r2 = clamp(r2 + r2, vec4(0.00000), vec4(1.00000));\n"
           "    r3 = -r2*c0.zzzz + c0.wwww;\n"
           "    r2 = r2*r2;\n"
           "    r2 = r2*r3;\n"
           "    r2.yw = -r2.yw;\n"
           "    r2 = r2*c0.yyyy + c0.xyxy;\n"
           "    r1 = vec4(lessThan(r1.xxyy, c0.yyyy));\n"
           "    r1.yw = -r1.yw;\n"
           "    r1 = r1 + c1.xyxy;\n"
           "    r1 = r2*r1;\n"
           "    r3.xyz = vec3(dot(r0, hg_ProgramLocal5));\n"
           "    r1.xyz = vec3(dot(r1, vec4(1.00000)));\n"
           "    r3.xyz = r3.xyz - r1.xyz;\n"
           "    r3.xyz = clamp(r3.xyz*hg_ProgramLocal3.xyz + c0.yyy, vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = r3.xyz*r0.www;\n"
           "    r3.w = r0.w;\n"
           "    gl_FragColor = mix(r0, r3, hg_ProgramLocal6);\n"
           "}\n"
           "//MD5=b81ba7f9:b2977399:5c257506:b0583d81\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0007:0004:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void HgcHalftone::InitProgramDescriptor(HgcHalftone *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcHalftone_hgc_visible", "//Metal1.0     \n//LEN=0000000492\n[[ visible ]] FragmentOut HgcHalftone_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 0.5000000000, 2.000000000, 3.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord1 - hg_Params[0];\n"
    "    r0 = r0*hg_Params[4];\n"
    "    r1.x = dot(r0, hg_Params[1]);\n"
    "    r1.y = dot(r0, hg_Params[2]);\n"
    "    r1.xy = r1.xy + hg_Params[0].xy;\n"
    "    r1.xy = fract(r1.xy);\n"
    "    r0 = color0;\n"
    "    r2 = r1.xxyy - c0.xyxy;\n"
    "    r2 = clamp(r2 + r2, 0.00000f, 1.00000f);\n"
    "    r3 = -r2*c0.zzzz + c0.wwww;\n"
    "    r2 = r2*r2;\n"
    "    r2 = r2*r3;\n"
    "    r2.yw = -r2.yw;\n"
    "    r2 = r2*c0.yyyy + c0.xyxy;\n"
    "    r1 = float4(r1.xxyy < c0.yyyy);\n"
    "    r1.yw = -r1.yw;\n"
    "    r1 = r1 + c1.xyxy;\n"
    "    r1 = r2*r1;\n"
    "    r3.xyz = float3(dot(r0, hg_Params[5]));\n"
    "    r1.xyz = float3(dot(r1, 1.00000f));\n"
    "    r3.xyz = r3.xyz - r1.xyz;\n"
    "    r3.xyz = clamp(r3.xyz*hg_Params[3].xyz + c0.yyy, 0.00000f, 1.00000f);\n"
    "    r3.xyz = r3.xyz*r0.www;\n"
    "    r3.w = r0.w;\n"
    "    output.color0 = mix(r0, r3, hg_Params[6]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B288A834()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcHalftone");
}

void sub_1B288A844(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B288A984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B288A9CC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B288A9C4);
}

_QWORD *HgcHalftone::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcHalftone [hgc1]");
}

uint64_t HgcHalftone::BindTexture(HgcHalftone *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcHalftone::Bind(HgcHalftone *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HgcHalftone *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcHalftone::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t *v95;
  uint64_t v96;
  uint64_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    v7 = a2[10];
    *(float32x2_t *)v8.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8.i64[1] = 0x3F80000000000000;
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 3)
      {
        LODWORD(v96) = 0;
        v13 = v8;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = v8;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *(_QWORD *)(a1 + 408);
          v17 = *(float32x4_t *)(v16 + 16);
          v18 = *(float32x4_t *)(v16 + 64);
          v19 = *(float32x4_t *)(v16 + 80);
          v20 = vmulq_f32(vsubq_f32(v13, *(float32x4_t *)v16), v18);
          v21 = vmulq_f32(vsubq_f32(v14, *(float32x4_t *)v16), v18);
          v22 = vmulq_f32(vsubq_f32(v15, *(float32x4_t *)v16), v18);
          v23 = vmulq_f32(v20, v17);
          v24 = vmulq_f32(v21, v17);
          v25 = vmulq_f32(v22, v17);
          v26 = vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL));
          v27 = vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL));
          v28 = vaddq_f32(v25, (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL));
          v30 = *(float32x4_t *)(v16 + 32);
          v29 = *(float32x4_t *)(v16 + 48);
          v31 = vmulq_f32(v20, v30);
          v32 = vmulq_f32(v21, v30);
          v33 = vmulq_f32(v22, v30);
          v34 = vaddq_f32(v31, (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL));
          v35 = vaddq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL));
          v36 = vaddq_f32(v33, (float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL));
          v37 = vaddq_f32(v35, (float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL));
          v38 = *(float32x4_t *)(v16 + 96);
          v39 = *(float32x4_t *)(v16 + 112);
          v40 = vaddq_f32(*(float32x4_t *)v16, (float32x4_t)vbslq_s8((int8x16_t)v39, (int8x16_t)vaddq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), (int8x16_t)vaddq_f32(v34, (float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL))));
          v41 = vaddq_f32(*(float32x4_t *)v16, (float32x4_t)vbslq_s8((int8x16_t)v39, (int8x16_t)vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), (int8x16_t)v37));
          v42 = vaddq_f32(*(float32x4_t *)v16, (float32x4_t)vbslq_s8((int8x16_t)v39, (int8x16_t)vaddq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL)), (int8x16_t)vaddq_f32(v36, (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL))));
          v43 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
          v44 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
          v45 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
          v46 = *(float32x4_t *)(v16 + 128);
          v47 = *(int8x16_t *)(v16 + 144);
          v48 = (int8x16_t)vsubq_f32(v40, vsubq_f32(v43, (float32x4_t)vandq_s8((int8x16_t)v46, (int8x16_t)vcgtq_f32(v43, v40))));
          v49 = (int8x16_t)vsubq_f32(v41, vsubq_f32(v44, (float32x4_t)vandq_s8((int8x16_t)v46, (int8x16_t)vcgtq_f32(v44, v41))));
          v50 = (int8x16_t)vsubq_f32(v42, vsubq_f32(v45, (float32x4_t)vandq_s8((int8x16_t)v46, (int8x16_t)vcgtq_f32(v45, v42))));
          *(int8x8_t *)v41.f32 = vqtbl1_s8(v48, *(int8x8_t *)v47.i8);
          v44.i64[0] = vextq_s8(v47, v47, 8uLL).u64[0];
          *(int8x8_t *)&v41.u32[2] = vqtbl1_s8(v48, *(int8x8_t *)v44.f32);
          v52 = *(float32x4_t *)(*(_QWORD *)&v7 + v11);
          v51 = *(float32x4_t *)(*(_QWORD *)&v7 + v11 + 16);
          *(int8x8_t *)v37.f32 = vqtbl1_s8(v49, *(int8x8_t *)v47.i8);
          *(int8x8_t *)v39.f32 = vqtbl1_s8(v50, *(int8x8_t *)v47.i8);
          *(int8x8_t *)&v37.u32[2] = vqtbl1_s8(v49, *(int8x8_t *)v44.f32);
          *(int8x8_t *)&v39.u32[2] = vqtbl1_s8(v50, *(int8x8_t *)v44.f32);
          v53 = *(float32x4_t *)(v16 + 160);
          v54 = *(float32x4_t *)(v16 + 176);
          v55 = vsubq_f32(v41, v53);
          v56 = vsubq_f32(v37, v53);
          v57 = vsubq_f32(v39, v53);
          v58 = vminq_f32(vmaxq_f32(vaddq_f32(v55, v55), v54), v46);
          v59 = vminq_f32(vmaxq_f32(vaddq_f32(v56, v56), v54), v46);
          v60 = *(float32x4_t *)(v16 + 192);
          v61 = *(float32x4_t *)(v16 + 208);
          v62 = vminq_f32(vmaxq_f32(vaddq_f32(v57, v57), v54), v46);
          v63 = vsubq_f32(v60, vmulq_f32(v58, v61));
          v64 = vsubq_f32(v60, vmulq_f32(v59, v61));
          v65 = vsubq_f32(v60, vmulq_f32(v62, v61));
          v66 = *(float32x4_t *)(*(_QWORD *)&v7 + v11 + 32);
          v67 = vmulq_f32(vmulq_f32(v58, v58), v63);
          v68 = vmulq_f32(vmulq_f32(v59, v59), v64);
          v69 = vmulq_f32(vmulq_f32(v62, v62), v65);
          v70 = *(int8x16_t *)(v16 + 224);
          v71 = *(float32x4_t *)(v16 + 240);
          v72 = vmulq_f32(v71, (float32x4_t)vbslq_s8(v70, (int8x16_t)v69, (int8x16_t)vnegq_f32(v69)));
          v73 = (float32x4_t)vandq_s8((int8x16_t)v46, (int8x16_t)vcgtq_f32(v71, v41));
          v74 = vaddq_f32(v53, vmulq_f32(v71, (float32x4_t)vbslq_s8(v70, (int8x16_t)v67, (int8x16_t)vnegq_f32(v67))));
          v75 = (float32x4_t)vandq_s8((int8x16_t)v46, (int8x16_t)vcgtq_f32(v71, v37));
          v76 = (float32x4_t)vandq_s8((int8x16_t)v46, (int8x16_t)vcgtq_f32(v71, v39));
          v77 = (float32x4_t)vbslq_s8(v70, (int8x16_t)v73, (int8x16_t)vnegq_f32(v73));
          v78 = vaddq_f32(v53, vmulq_f32(v71, (float32x4_t)vbslq_s8(v70, (int8x16_t)v68, (int8x16_t)vnegq_f32(v68))));
          v79 = (float32x4_t)vbslq_s8(v70, (int8x16_t)v75, (int8x16_t)vnegq_f32(v75));
          v80 = (float32x4_t)vbslq_s8(v70, (int8x16_t)v76, (int8x16_t)vnegq_f32(v76));
          v81 = *(float32x4_t *)(v16 + 256);
          v82 = *(int8x16_t *)(v16 + 272);
          v83 = vmulq_f32(v74, vaddq_f32(v81, v77));
          v84 = vmulq_f32(v78, vaddq_f32(v81, v79));
          v85 = vmulq_f32(vaddq_f32(v53, v72), vaddq_f32(v81, v80));
          v86 = vmulq_f32(v52, v19);
          v87 = vmulq_f32(v51, v19);
          v88 = vmulq_f32(v66, v19);
          v89 = vaddq_f32(v86, (float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL));
          v90 = vaddq_f32(v87, (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 4uLL));
          v91 = vaddq_f32(v88, (float32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 4uLL));
          v92 = vaddq_f32(v83, (float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL));
          v93 = vaddq_f32(v84, (float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL));
          v94 = vaddq_f32(v85, (float32x4_t)vextq_s8((int8x16_t)v85, (int8x16_t)v85, 4uLL));
          v95 = (float32x4_t *)(*(_QWORD *)&v6 + v11);
          *v95 = vaddq_f32(v52, vmulq_f32(v38, vsubq_f32((float32x4_t)vbslq_s8(v82, (int8x16_t)v52, (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v71, vmulq_f32(v29, vsubq_f32(vaddq_f32(v89, (float32x4_t)vextq_s8((int8x16_t)v89,
                                                                              (int8x16_t)v89,
                                                                              8uLL)),
                                                             vaddq_f32(v92, (float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL))))), v54), v46), v52, 3)), v52)));
          v95[1] = vaddq_f32(v51, vmulq_f32(v38, vsubq_f32((float32x4_t)vbslq_s8(v82, (int8x16_t)v51, (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v71, vmulq_f32(v29, vsubq_f32(vaddq_f32(v90, (float32x4_t)vextq_s8((int8x16_t)v90,
                                                                                (int8x16_t)v90,
                                                                                8uLL)),
                                                               vaddq_f32(v93, (float32x4_t)vextq_s8((int8x16_t)v93, (int8x16_t)v93, 8uLL))))), v54), v46), v51, 3)), v51)));
          v95[2] = vaddq_f32(v66, vmulq_f32(v38, vsubq_f32((float32x4_t)vbslq_s8(v82, (int8x16_t)v66, (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v71, vmulq_f32(v29, vsubq_f32(vaddq_f32(v91, (float32x4_t)vextq_s8((int8x16_t)v91,
                                                                                (int8x16_t)v91,
                                                                                8uLL)),
                                                               vaddq_f32(v94, (float32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL))))), v54), v46), v66, 3)), v66)));
          v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v12 -= 3;
          v11 += 48;
        }
        while (v5 + v12 > 2);
        LODWORD(v96) = -v12;
      }
      if ((int)v96 < v5)
      {
        v96 = v96;
        do
        {
          v97 = *(_QWORD *)(a1 + 408);
          v98 = vmulq_f32(vsubq_f32(v13, *(float32x4_t *)v97), *(float32x4_t *)(v97 + 64));
          v99 = vmulq_f32(v98, *(float32x4_t *)(v97 + 16));
          v100 = vaddq_f32(v99, (float32x4_t)vextq_s8((int8x16_t)v99, (int8x16_t)v99, 4uLL));
          v101 = vmulq_f32(v98, *(float32x4_t *)(v97 + 32));
          v102 = vaddq_f32(v101, (float32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL));
          v103 = vaddq_f32(*(float32x4_t *)v97, (float32x4_t)vbslq_s8(*(int8x16_t *)(v97 + 112), (int8x16_t)vaddq_f32(v100, (float32x4_t)vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL)), (int8x16_t)vaddq_f32(v102, (float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL))));
          v104 = vcvtq_f32_s32(vcvtq_s32_f32(v103));
          v105 = *(float32x4_t *)(v97 + 128);
          v106 = *(int8x16_t *)(v97 + 144);
          v107 = (int8x16_t)vsubq_f32(v103, vsubq_f32(v104, (float32x4_t)vandq_s8((int8x16_t)v105, (int8x16_t)vcgtq_f32(v104, v103))));
          *(int8x8_t *)v104.f32 = vqtbl1_s8(v107, *(int8x8_t *)v106.i8);
          *(int8x8_t *)&v104.u32[2] = vqtbl1_s8(v107, (int8x8_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL));
          v108 = *(float32x4_t *)(v97 + 160);
          v109 = *(float32x4_t *)(v97 + 176);
          v110 = vsubq_f32(v104, v108);
          v111 = vminq_f32(vmaxq_f32(vaddq_f32(v110, v110), v109), v105);
          v112 = vmulq_f32(vmulq_f32(v111, v111), vsubq_f32(*(float32x4_t *)(v97 + 192), vmulq_f32(v111, *(float32x4_t *)(v97 + 208))));
          v113 = *(float32x4_t *)(v97 + 240);
          v114 = *(float32x4_t *)(*(_QWORD *)&v7 + 16 * v96);
          v115 = (float32x4_t)vandq_s8((int8x16_t)v105, (int8x16_t)vcgtq_f32(v113, v104));
          v116 = vmulq_f32(vaddq_f32(v108, vmulq_f32(v113, (float32x4_t)vbslq_s8(*(int8x16_t *)(v97 + 224), (int8x16_t)v112, (int8x16_t)vnegq_f32(v112)))), vaddq_f32(*(float32x4_t *)(v97 + 256), (float32x4_t)vbslq_s8(*(int8x16_t *)(v97 + 224), (int8x16_t)v115, (int8x16_t)vnegq_f32(v115))));
          v117 = vmulq_f32(v114, *(float32x4_t *)(v97 + 80));
          v118 = vaddq_f32(v117, (float32x4_t)vextq_s8((int8x16_t)v117, (int8x16_t)v117, 4uLL));
          v119 = vaddq_f32(v116, (float32x4_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 4uLL));
          *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v96) = vaddq_f32(v114, vmulq_f32(*(float32x4_t *)(v97 + 96), vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v97 + 272), (int8x16_t)v114, (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v113, vmulq_f32(*(float32x4_t *)(v97 + 48), vsubq_f32(vaddq_f32(v118, (float32x4_t)vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL)), vaddq_f32(v119, (float32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL))))), v109), v105),
                                                                                          v114,
                                                                                          3)),
                                                              v114)));
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          ++v96;
        }
        while (v96 < v5);
      }
      v8 = vaddq_f32(v8, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v6 += v9;
      *(_QWORD *)&v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcHalftone::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcHalftone::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcHalftone::HgcHalftone(HgcHalftone *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v10;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EA5F8;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = xmmword_1B3050E20;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v3 + 128) = _Q1;
  *(_OWORD *)(v3 + 144) = xmmword_1B3052180;
  *(_OWORD *)(v3 + 160) = xmmword_1B3052190;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  __asm { FMOV            V1.4S, #3.0 }
  *(_QWORD *)&v10 = 0x4000000040000000;
  *((_QWORD *)&v10 + 1) = 0x4000000040000000;
  *(_OWORD *)(v3 + 192) = _Q1;
  *(_OWORD *)(v3 + 208) = v10;
  *(_QWORD *)&_Q1 = 0xFFFFFFFFLL;
  *((_QWORD *)&_Q1 + 1) = 0xFFFFFFFFLL;
  *(_QWORD *)&v10 = 0x3F0000003F000000;
  *((_QWORD *)&v10 + 1) = 0x3F0000003F000000;
  *(_OWORD *)(v3 + 224) = _Q1;
  *(_OWORD *)(v3 + 240) = v10;
  *(_OWORD *)(v3 + 256) = xmmword_1B3050190;
  *(_OWORD *)(v3 + 272) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B288B1E4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcHalftone::~HgcHalftone(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EA5F8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B2834900);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcHalftone::~HgcHalftone(this);
  HGObject::operator delete(v1);
}

uint64_t HgcHalftone::SetParameter(HgcHalftone *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  __n128 *v11;
  int32x4_t v12;
  float *v13;
  float *v14;
  __n128 *v15;
  int32x4_t v16;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_38;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_38;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_38;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == a3.n128_f32[0]
        && v11[3].n128_f32[1] == a3.n128_f32[0]
        && v11[3].n128_f32[2] == a3.n128_f32[0]
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v12.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3] = (__n128)v12;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[18] = a3;
      goto LABEL_38;
    case 4:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[16] == a3.n128_f32[0] && v13[17] == a4 && v13[18] == a5 && v13[19] == a6)
        return 0;
      v13[16] = a3.n128_f32[0];
      v13[17] = a4;
      v13[18] = a5;
      v13[19] = a6;
      goto LABEL_38;
    case 5:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[20] == a3.n128_f32[0] && v14[21] == a4 && v14[22] == a5 && v14[23] == a6)
        return 0;
      v14[20] = a3.n128_f32[0];
      v14[21] = a4;
      v14[22] = a5;
      v14[23] = a6;
      goto LABEL_38;
    case 6:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[6].n128_f32[0] == a3.n128_f32[0]
        && v15[6].n128_f32[1] == a3.n128_f32[0]
        && v15[6].n128_f32[2] == a3.n128_f32[0]
        && v15[6].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v16 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v15[6] = (__n128)v16;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[19] = a3;
LABEL_38:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcHalftone::GetParameter(HgcHalftone *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[72];
      a3[1] = v7[73];
      a3[2] = v7[74];
      v4 = v7 + 75;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[76];
      a3[1] = v10[77];
      a3[2] = v10[78];
      v4 = v10 + 79;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcConcentricCirclesGradient::GetProgram(HgcConcentricCirclesGradient *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000673\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 1.000000000, 255.0000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2, s3, s4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord0 - hg_Params[0];\n"
             "    s0 = hg_Params[2]*s0;\n"
             "    s0.x = dot(s0, s0);\n"
             "    s0.x = sqrt(s0.x);\n"
             "    s1.x = s0.x + hg_Params[1].x;\n"
             "    s2.x = s1.x*hg_Params[3].x;\n"
             "    s3.x = fract(s2.x);\n"
             "    s2.x = floor(s2.x);\n"
             "    s2.x = s2.x*float(c0.x);\n"
             "    s2.x = fract(s2.x);\n"
             "    s2.x = float(c0.y) - s2.x;\n"
             "    s4.x = float(c0.z) - s3.x;\n"
             "    s2.x = select(s4.x, s3.x, s2.x < 0.00000h);\n"
             "    s1.x = hg_Params[2].z*s1.x;\n"
             "    s1.x = clamp(s1.x*hg_Params[3].x, 0.00000f, 1.00000f);\n"
             "    s1.x = select(s2.x, s1.x, hg_Params[4].x < 0.00000h);\n"
             "    s1.x = select(s1.x, s3.x, -hg_Params[4].x < 0.00000h);\n"
             "    s1.y = float(c0.x);\n"
             "    s1.x = s1.x*float(c0.w) + float(c0.x);\n"
             "    s1.xy = s1.xy + hg_Params[7].xy;\n"
             "    s1.xy = s1.xy*hg_Params[7].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    s4.x = clamp(s0.x - hg_Params[5].x, 0.00000f, 1.00000f);\n"
             "    s4.x = float(c0.z) - s4.x;\n"
             "    s0.x = float(c0.z) + s0.x;\n"
             "    s0.x = clamp(s0.x - hg_Params[6].x, 0.00000f, 1.00000f);\n"
             "    s4.x = s4.x*s0.x;\n"
             "    output.color0.xyz = float3(r0.xyz)*s4.xxx;\n"
             "    output.color0.w = s4.x*float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=20d13e24:0afe4634:71fedd8a:5c8ce0a8\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0008:0006:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000619\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 1.000000000, 255.0000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord0 - hg_Params[0];\n"
             "    r0 = hg_Params[2]*r0;\n"
             "    r0.x = dot(r0, r0);\n"
             "    r0.x = sqrt(r0.x);\n"
             "    r1.x = r0.x + hg_Params[1].x;\n"
             "    r2.x = r1.x*hg_Params[3].x;\n"
             "    r3.x = fract(r2.x);\n"
             "    r2.x = floor(r2.x);\n"
             "    r2.x = r2.x*c0.x;\n"
             "    r2.x = fract(r2.x);\n"
             "    r2.x = c0.y - r2.x;\n"
             "    r4.x = c0.z - r3.x;\n"
             "    r2.x = select(r4.x, r3.x, r2.x < 0.00000f);\n"
             "    r1.x = hg_Params[2].z*r1.x;\n"
             "    r1.x = clamp(r1.x*hg_Params[3].x, 0.00000f, 1.00000f);\n"
             "    r1.x = select(r2.x, r1.x, hg_Params[4].x < 0.00000f);\n"
             "    r1.x = select(r1.x, r3.x, -hg_Params[4].x < 0.00000f);\n"
             "    r1.y = c0.x;\n"
             "    r1.x = r1.x*c0.w + c0.x;\n"
             "    r1.xy = r1.xy + hg_Params[7].xy;\n"
             "    r1.xy = r1.xy*hg_Params[7].zw;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    r4.x = clamp(r0.x - hg_Params[5].x, 0.00000f, 1.00000f);\n"
             "    r4.x = c0.z - r4.x;\n"
             "    r0.x = c0.z + r0.x;\n"
             "    r0.x = clamp(r0.x - hg_Params[6].x, 0.00000f, 1.00000f);\n"
             "    r4.x = r4.x*r0.x;\n"
             "    output.color0.xyz = r1.xyz*r4.xxx;\n"
             "    output.color0.w = r4.x*r1.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=2455fc03:d741007b:415d6661:64eafc04\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0008:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006f6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 1.000000000, 255.0000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = hg_TexCoord0 - hg_ProgramLocal0;\n"
           "    r0 = hg_ProgramLocal2*r0;\n"
           "    r0.x = dot(r0, r0);\n"
           "    r0.x = sqrt(r0.x);\n"
           "    r1.x = r0.x + hg_ProgramLocal1.x;\n"
           "    r2.x = r1.x*hg_ProgramLocal3.x;\n"
           "    r3.x = fract(r2.x);\n"
           "    r2.x = floor(r2.x);\n"
           "    r2.x = r2.x*c0.x;\n"
           "    r2.x = fract(r2.x);\n"
           "    r2.x = c0.y - r2.x;\n"
           "    r4.x = c0.z - r3.x;\n"
           "    r2.x = r2.x < 0.00000 ? r3.x : r4.x;\n"
           "    r1.x = hg_ProgramLocal2.z*r1.x;\n"
           "    r1.x = clamp(r1.x*hg_ProgramLocal3.x, 0.00000, 1.00000);\n"
           "    r1.x = hg_ProgramLocal4.x < 0.00000 ? r1.x : r2.x;\n"
           "    r1.x = -hg_ProgramLocal4.x < 0.00000 ? r3.x : r1.x;\n"
           "    r1.y = c0.x;\n"
           "    r1.x = r1.x*c0.w + c0.x;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal7.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal7.zw;\n"
           "    r1 = texture2D(hg_Texture0, r1.xy);\n"
           "    r4.x = clamp(r0.x - hg_ProgramLocal5.x, 0.00000, 1.00000);\n"
           "    r4.x = c0.z - r4.x;\n"
           "    r0.x = c0.z + r0.x;\n"
           "    r0.x = clamp(r0.x - hg_ProgramLocal6.x, 0.00000, 1.00000);\n"
           "    r4.x = r4.x*r0.x;\n"
           "    gl_FragColor.xyz = r1.xyz*r4.xxx;\n"
           "    gl_FragColor.w = r4.x*r1.w;\n"
           "}\n"
           "//MD5=c62793ac:e7dfe5c6:3d8170b3:d400384d\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0008:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcConcentricCirclesGradient::InitProgramDescriptor(HgcConcentricCirclesGradient *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcConcentricCirclesGradient_hgc_visible", "//Metal1.0     \n//LEN=0000000568\n[[ visible ]] FragmentOut HgcConcentricCirclesGradient_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 1.000000000, 255.0000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord0 - hg_Params[0];\n"
    "    r0 = hg_Params[2]*r0;\n"
    "    r0.x = dot(r0, r0);\n"
    "    r0.x = sqrt(r0.x);\n"
    "    r1.x = r0.x + hg_Params[1].x;\n"
    "    r2.x = r1.x*hg_Params[3].x;\n"
    "    r3.x = fract(r2.x);\n"
    "    r2.x = floor(r2.x);\n"
    "    r2.x = r2.x*c0.x;\n"
    "    r2.x = fract(r2.x);\n"
    "    r2.x = c0.y - r2.x;\n"
    "    r4.x = c0.z - r3.x;\n"
    "    r2.x = select(r4.x, r3.x, r2.x < 0.00000f);\n"
    "    r1.x = hg_Params[2].z*r1.x;\n"
    "    r1.x = clamp(r1.x*hg_Params[3].x, 0.00000f, 1.00000f);\n"
    "    r1.x = select(r2.x, r1.x, hg_Params[4].x < 0.00000f);\n"
    "    r1.x = select(r1.x, r3.x, -hg_Params[4].x < 0.00000f);\n"
    "    r1.y = c0.x;\n"
    "    r1.x = r1.x*c0.w + c0.x;\n"
    "    r1.xy = r1.xy + hg_Params[7].xy;\n"
    "    r1.xy = r1.xy*hg_Params[7].zw;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    r4.x = clamp(r0.x - hg_Params[5].x, 0.00000f, 1.00000f);\n"
    "    r4.x = c0.z - r4.x;\n"
    "    r0.x = c0.z + r0.x;\n"
    "    r0.x = clamp(r0.x - hg_Params[6].x, 0.00000f, 1.00000f);\n"
    "    r4.x = r4.x*r0.x;\n"
    "    output.color0.xyz = r1.xyz*r4.xxx;\n"
    "    output.color0.w = r4.x*r1.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B288B68C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcConcentricCirclesGradient");
}

void sub_1B288B69C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B288B81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B288B86C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B288B864);
}

_QWORD *HgcConcentricCirclesGradient::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcConcentricCirclesGradient [hgc1]");
}

uint64_t HgcConcentricCirclesGradient::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 7, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcConcentricCirclesGradient::Bind(HgcConcentricCirclesGradient *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HgcConcentricCirclesGradient *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcConcentricCirclesGradient::RenderTile(HgcConcentricCirclesGradient *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  uint64_t v66;
  float32x4_t v67;
  uint64_t v68;
  int32x4_t v69;
  float32x2_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  float32x4_t *v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t *v85;
  uint64_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  float32x4_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  uint64_t v108;
  float32x4_t v109;
  uint64_t v110;
  int32x4_t v111;
  float32x2_t v112;
  float32x4_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int32x4_t v117;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcConcentricCirclesGradient *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 16);
          v21 = *(float32x4_t *)(v19 + 32);
          v22 = *(float32x4_t *)(v19 + 48);
          v23 = vmulq_f32(v21, vsubq_f32(v17, *(float32x4_t *)v19));
          v24 = vmulq_f32(v21, vsubq_f32(v18, *(float32x4_t *)v19));
          v25 = (int8x16_t)vmulq_f32(v23, v23);
          v26 = (int8x16_t)vmulq_f32(v24, v24);
          v27 = (int8x16_t)vaddq_f32((float32x4_t)v25, (float32x4_t)vextq_s8(v25, v25, 4uLL));
          v28 = (int8x16_t)vaddq_f32((float32x4_t)v26, (float32x4_t)vextq_s8(v26, v26, 4uLL));
          v29 = vaddq_f32((float32x4_t)v27, (float32x4_t)vextq_s8(v27, v27, 8uLL));
          v30 = vaddq_f32((float32x4_t)v28, (float32x4_t)vextq_s8(v28, v28, 8uLL));
          v32 = *(float32x4_t *)(v19 + 112);
          v31 = *(int8x16_t *)(v19 + 128);
          v33 = vminq_f32(vrsqrteq_f32(v29), v32);
          v34 = vminq_f32(vrsqrteq_f32(v30), v32);
          v35 = vminq_f32(vmulq_f32(v33, vrsqrtsq_f32(vmulq_f32(v33, v29), v33)), v32);
          v36 = vminq_f32(vmulq_f32(v34, vrsqrtsq_f32(vmulq_f32(v34, v30), v34)), v32);
          v37 = vmulq_f32(v29, vminq_f32(vmulq_f32(v35, vrsqrtsq_f32(vmulq_f32(v29, v35), v35)), v32));
          v38 = vmulq_f32(v30, vminq_f32(vmulq_f32(v36, vrsqrtsq_f32(vmulq_f32(v30, v36), v36)), v32));
          v39 = vaddq_f32(v37, v20);
          v40 = vaddq_f32(v38, v20);
          v41 = vmulq_f32(v39, v22);
          v42 = vmulq_f32(v40, v22);
          v43 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
          v44 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
          v45 = vsubq_f32(v43, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v43, v41)));
          v46 = vsubq_f32(v44, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v44, v42)));
          v47 = (int8x16_t)vsubq_f32(v41, v45);
          v48 = (int8x16_t)vsubq_f32(v42, v46);
          v50 = *(float32x4_t *)(v19 + 144);
          v49 = *(float32x4_t *)(v19 + 160);
          v51 = vmulq_f32(v50, v45);
          v52 = vmulq_f32(v50, v46);
          v53 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
          v54 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
          v55 = vmulq_laneq_f32(v39, v21, 2);
          v56 = vmulq_f32(v22, vmulq_laneq_f32(v40, v21, 2));
          v57 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_f32(v22, v55), v49), (float32x4_t)v31);
          v58 = *(float32x4_t *)(v19 + 64);
          v59 = (int8x16_t)vcgtq_f32(v49, v58);
          v60 = (int8x16_t)vcgtq_f32(v58, v49);
          v61 = vbslq_s8(v60, v47, vbslq_s8(v59, v57, vbslq_s8((int8x16_t)vcgtq_f32(v49, vsubq_f32(v49, vsubq_f32(v51, vsubq_f32(v53, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v53, v51)))))), v47, (int8x16_t)vsubq_f32((float32x4_t)v31, (float32x4_t)v47))));
          v62 = vbslq_s8(v60, v48, vbslq_s8(v59, (int8x16_t)vminq_f32(vmaxq_f32(v56, v49), (float32x4_t)v31), vbslq_s8((int8x16_t)vcgtq_f32(v49, vsubq_f32(v49, vsubq_f32(v52, vsubq_f32(v54, (float32x4_t)vandq_s8(v31, (int8x16_t)vcgtq_f32(v54, v52)))))), v48, (int8x16_t)vsubq_f32((float32x4_t)v31, (float32x4_t)v48))));
          v61.i32[1] = 0.5;
          v62.i32[1] = 0.5;
          v63 = *(float32x4_t *)(v19 + 176);
          v64 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v19 + 192), (int8x16_t)vaddq_f32(v50, vmulq_f32(v63, (float32x4_t)v61)), v61);
          v65 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v19 + 192), (int8x16_t)vaddq_f32(v50, vmulq_f32(v63, (float32x4_t)v62)), v62);
          v66 = *((int *)a2 + 22);
          v67 = vsubq_f32(v64, v9);
          v68 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v69 = vaddq_s32(vcvtq_s32_f32(v67), vcltzq_f32(v67));
            v70 = (float32x2_t)vsubq_f32(v67, vcvtq_f32_s32(v69)).u64[0];
            v71 = (float32x4_t *)(v68 + 16 * (v69.i32[0] + v69.i32[1] * (int)v66));
            v72 = vaddq_f32(*v71, vmulq_n_f32(vsubq_f32(v71[1], *v71), v70.f32[0]));
            v73 = vaddq_f32(v72, vmulq_lane_f32(vsubq_f32(vaddq_f32(v71[v66], vmulq_n_f32(vsubq_f32(v71[(int)v66 + 1], v71[v66]), v70.f32[0])), v72), v70, 1));
            v74 = vsubq_f32(v65, v9);
            v75 = vaddq_s32(vcvtq_s32_f32(v74), vcltzq_f32(v74));
            v74.i64[0] = vsubq_f32(v74, vcvtq_f32_s32(v75)).u64[0];
            v76 = (float32x4_t *)(v68 + 16 * (v75.i32[0] + v75.i32[1] * (int)v66));
            v77 = vaddq_f32(*v76, vmulq_n_f32(vsubq_f32(v76[1], *v76), v74.f32[0]));
            v78 = vaddq_f32(v77, vmulq_lane_f32(vsubq_f32(vaddq_f32(v76[v66], vmulq_n_f32(vsubq_f32(v76[(int)v66 + 1], v76[v66]), v74.f32[0])), v77), *(float32x2_t *)v74.f32, 1));
          }
          else
          {
            v79 = vaddq_f32(v67, v13);
            v80 = vcvtq_s32_f32(v79);
            v79.i64[0] = vaddq_s32(v80, vcgtq_f32(vcvtq_f32_s32(v80), v79)).u64[0];
            v73 = *(float32x4_t *)(v68 + 16 * (v79.i32[0] + v79.i32[1] * (int)v66));
            v81 = vaddq_f32(vsubq_f32(v65, v9), v13);
            v82 = vcvtq_s32_f32(v81);
            v81.i64[0] = vaddq_s32(v82, vcgtq_f32(vcvtq_f32_s32(v82), v81)).u64[0];
            v78 = *(float32x4_t *)(v68 + 16 * (v81.i32[0] + v81.i32[1] * (int)v66));
          }
          v83 = *(float32x4_t *)(v19 + 80);
          v84 = *(float32x4_t *)(v19 + 96);
          v85 = (float32x4_t *)(v11 + 16 * v15);
          *v85 = vmulq_n_f32(v73, vmulq_f32(vsubq_f32((float32x4_t)v31, vminq_f32(vmaxq_f32(vsubq_f32(v37, v83), v49), (float32x4_t)v31)), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v37, (float32x4_t)v31), v84), v49), (float32x4_t)v31)).f32[0]);
          v85[1] = vmulq_n_f32(v78, vmulq_f32(vsubq_f32((float32x4_t)v31, vminq_f32(vmaxq_f32(vsubq_f32(v38, v83), v49), (float32x4_t)v31)), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v38, (float32x4_t)v31), v84), v49), (float32x4_t)v31)).f32[0]);
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v86 = *((_QWORD *)this + 51);
        v87 = *(float32x4_t *)(v86 + 32);
        v88 = *(float32x4_t *)(v86 + 48);
        v89 = vmulq_f32(v87, vsubq_f32(v17, *(float32x4_t *)v86));
        v90 = (int8x16_t)vmulq_f32(v89, v89);
        v91 = (int8x16_t)vaddq_f32((float32x4_t)v90, (float32x4_t)vextq_s8(v90, v90, 4uLL));
        v92 = vaddq_f32((float32x4_t)v91, (float32x4_t)vextq_s8(v91, v91, 8uLL));
        v94 = *(float32x4_t *)(v86 + 112);
        v93 = *(int8x16_t *)(v86 + 128);
        v95 = vminq_f32(vrsqrteq_f32(v92), v94);
        v96 = vminq_f32(vmulq_f32(v95, vrsqrtsq_f32(vmulq_f32(v95, v92), v95)), v94);
        v97 = vmulq_f32(v92, vminq_f32(vmulq_f32(v96, vrsqrtsq_f32(vmulq_f32(v96, v92), v96)), v94));
        v98 = vaddq_f32(v97, *(float32x4_t *)(v86 + 16));
        v99 = vmulq_f32(v98, v88);
        v100 = vcvtq_f32_s32(vcvtq_s32_f32(v99));
        v101 = vsubq_f32(v100, (float32x4_t)vandq_s8(v93, (int8x16_t)vcgtq_f32(v100, v99)));
        v102 = (int8x16_t)vsubq_f32(v99, v101);
        v104 = *(float32x4_t *)(v86 + 144);
        v103 = *(float32x4_t *)(v86 + 160);
        v105 = vmulq_f32(v104, v101);
        v106 = vcvtq_f32_s32(vcvtq_s32_f32(v105));
        v107 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v86 + 64), v103), v102, vbslq_s8((int8x16_t)vcgtq_f32(v103, *(float32x4_t *)(v86 + 64)), (int8x16_t)vminq_f32(vmaxq_f32(vmulq_f32(v88, vmulq_laneq_f32(v98, v87, 2)), v103), (float32x4_t)v93), vbslq_s8((int8x16_t)vcgtq_f32(v103, vsubq_f32(v103, vsubq_f32(v105, vsubq_f32(v106, (float32x4_t)vandq_s8(v93, (int8x16_t)vcgtq_f32(v106, v105)))))), v102, (int8x16_t)vsubq_f32((float32x4_t)v93, (float32x4_t)v102))));
        v107.i32[1] = 0.5;
        v108 = *((int *)a2 + 22);
        v109 = vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v86 + 192), (int8x16_t)vaddq_f32(v104, vmulq_f32(*(float32x4_t *)(v86 + 176), (float32x4_t)v107)), v107), v9);
        v110 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v111 = vaddq_s32(vcvtq_s32_f32(v109), vcltzq_f32(v109));
          v112 = (float32x2_t)vsubq_f32(v109, vcvtq_f32_s32(v111)).u64[0];
          v113 = (float32x4_t *)(v110 + 16 * (v111.i32[0] + v111.i32[1] * (int)v108));
          v114 = vaddq_f32(*v113, vmulq_n_f32(vsubq_f32(v113[1], *v113), v112.f32[0]));
          v115 = vaddq_f32(v114, vmulq_lane_f32(vsubq_f32(vaddq_f32(v113[v108], vmulq_n_f32(vsubq_f32(v113[(int)v108 + 1], v113[v108]), v112.f32[0])), v114), v112, 1));
        }
        else
        {
          v116 = vaddq_f32(v109, v13);
          v117 = vcvtq_s32_f32(v116);
          v116.i64[0] = vaddq_s32(v117, vcgtq_f32(vcvtq_f32_s32(v117), v116)).u64[0];
          v115 = *(float32x4_t *)(v110 + 16 * (v116.i32[0] + v116.i32[1] * (int)v108));
        }
        *(float32x4_t *)(v11 + 16 * v15) = vmulq_n_f32(v115, vmulq_f32(vsubq_f32((float32x4_t)v93, vminq_f32(vmaxq_f32(vsubq_f32(v97, *(float32x4_t *)(v86 + 80)), v103), (float32x4_t)v93)), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v97, (float32x4_t)v93), *(float32x4_t *)(v86 + 96)), v103), (float32x4_t)v93)).f32[0]);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcConcentricCirclesGradient::GetDOD(HgcConcentricCirclesGradient *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcConcentricCirclesGradient *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcConcentricCirclesGradient::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcConcentricCirclesGradient::HgcConcentricCirclesGradient(HgcConcentricCirclesGradient *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EA860;
  v3 = (_OWORD *)operator new();
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[6] = 0u;
  v3[7] = xmmword_1B3051C80;
  v3[8] = xmmword_1B304F230;
  v3[9] = xmmword_1B3051880;
  v3[10] = 0u;
  v3[11] = xmmword_1B30521C0;
  v3[12] = xmmword_1B3050E20;
  v3[13] = xmmword_1B3050F70;
  v3[14] = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcConcentricCirclesGradient *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B288C1F8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcConcentricCirclesGradient::~HgcConcentricCirclesGradient(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EA860;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4019FCA701);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcConcentricCirclesGradient::~HgcConcentricCirclesGradient(this);
  HGObject::operator delete(v1);
}

uint64_t HgcConcentricCirclesGradient::SetParameter(HgcConcentricCirclesGradient *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  __n128 *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_38;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] == a4 && v9[1].n128_f32[1] == 0.0 && v9[1].n128_f32[2] == 0.0 && v9[1].n128_f32[3] == 0.0)
        return 0;
      v9[1].n128_f32[0] = a4;
      v9[1].n128_u64[1] = 0;
      v9[1].n128_u32[1] = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[14] = a3;
      goto LABEL_38;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_38;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_38;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_38;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_38;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
LABEL_38:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcConcentricCirclesGradient::GetParameter(HgcConcentricCirclesGradient *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[56];
      a3[1] = v5[57];
      a3[2] = v5[58];
      v4 = v5 + 59;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcBloomThreshold::GetProgram(HgcBloomThreshold *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003b8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0*half4(hg_Params[1]) + half4(hg_Params[0]);\n"
             "    r0 = fmax(r0, c0.xxxx);\n"
             "    r1.x = fmax(r0.x, r0.y);\n"
             "    r1.x = fmax(r1.x, r0.z);\n"
             "    r0.w = select(r0.w, r1.x, half(hg_Params[3].w) < 0.00000h);\n"
             "    r0.w = fmin(r0.w, half(hg_Params[2].y));\n"
             "    output.color0.w = fmax(float(r0.w), hg_Params[2].x);\n"
             "    output.color0.xyz = float3(r0.xyz);\n"
             "    return output;\n"
             "}\n"
             "//MD5=bd2a1d6a:4fe8cc52:c8984623:4431d1c5\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000038b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0*hg_Params[1] + hg_Params[0];\n"
             "    r0 = fmax(r0, c0.xxxx);\n"
             "    r1.x = fmax(r0.x, r0.y);\n"
             "    r1.x = fmax(r1.x, r0.z);\n"
             "    r0.w = select(r0.w, r1.x, hg_Params[3].w < 0.00000f);\n"
             "    r0.w = fmin(r0.w, hg_Params[2].y);\n"
             "    output.color0.w = fmax(r0.w, hg_Params[2].x);\n"
             "    output.color0.xyz = r0.xyz;\n"
             "    return output;\n"
             "}\n"
             "//MD5=1fde8f2d:934afc7e:2c9979c1:2afcb114\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003d9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = r0*hg_ProgramLocal1 + hg_ProgramLocal0;\n"
           "    r0 = max(r0, c0.xxxx);\n"
           "    r1.x = max(r0.x, r0.y);\n"
           "    r1.x = max(r1.x, r0.z);\n"
           "    r0.w = hg_ProgramLocal3.w < 0.00000 ? r1.x : r0.w;\n"
           "    r0.w = min(r0.w, hg_ProgramLocal2.y);\n"
           "    gl_FragColor.w = max(r0.w, hg_ProgramLocal2.x);\n"
           "    gl_FragColor.xyz = r0.xyz;\n"
           "}\n"
           "//MD5=723a64df:03115b68:238a77b6:8159d15a\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcBloomThreshold::InitProgramDescriptor(HgcBloomThreshold *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBloomThreshold_hgc_visible", "//Metal1.0     \n//LEN=0000000266\n[[ visible ]] FragmentOut HgcBloomThreshold_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0*hg_Params[1] + hg_Params[0];\n"
    "    r0 = fmax(r0, c0.xxxx);\n"
    "    r1.x = fmax(r0.x, r0.y);\n"
    "    r1.x = fmax(r1.x, r0.z);\n"
    "    r0.w = select(r0.w, r1.x, hg_Params[3].w < 0.00000f);\n"
    "    r0.w = fmin(r0.w, hg_Params[2].y);\n"
    "    output.color0.w = fmax(r0.w, hg_Params[2].x);\n"
    "    output.color0.xyz = r0.xyz;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B288C688()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBloomThreshold");
}

void sub_1B288C698(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B288C798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B288C7D8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B288C7D0);
}

_QWORD *HgcBloomThreshold::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBloomThreshold [hgc1]");
}

uint64_t HgcBloomThreshold::BindTexture(HgcBloomThreshold *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcBloomThreshold::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcBloomThreshold::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t *v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v40) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(_QWORD *)(a1 + 408);
          v12 = *(float32x4_t *)(v11 + 16);
          v13 = vaddq_f32(*(float32x4_t *)v11, vmulq_f32(*(float32x4_t *)(v6 + v10 - 32), v12));
          v14 = vaddq_f32(*(float32x4_t *)v11, vmulq_f32(*(float32x4_t *)(v6 + v10 - 16), v12));
          v15 = vaddq_f32(*(float32x4_t *)v11, vmulq_f32(*(float32x4_t *)(v6 + v10), v12));
          v16 = vaddq_f32(*(float32x4_t *)v11, vmulq_f32(*(float32x4_t *)(v6 + v10 + 16), v12));
          v17 = *(float32x4_t *)(v11 + 64);
          v18 = *(int8x16_t *)(v11 + 80);
          v19 = vmaxq_f32(v13, v17);
          v20 = vmaxq_f32(v14, v17);
          v21 = vmaxq_f32(v15, v17);
          v22 = vmaxq_f32(v16, v17);
          v23 = (int8x16_t)vmaxq_f32(vmaxq_f32(v19, (float32x4_t)vrev64q_s32((int32x4_t)v19)), (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
          v24 = (int8x16_t)vmaxq_f32(vmaxq_f32(v20, (float32x4_t)vrev64q_s32((int32x4_t)v20)), (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
          v25 = (int8x16_t)vmaxq_f32(vmaxq_f32(v21, (float32x4_t)vrev64q_s32((int32x4_t)v21)), (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
          v26 = (int8x16_t)vmaxq_f32(vmaxq_f32(v22, (float32x4_t)vrev64q_s32((int32x4_t)v22)), (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          v27 = *(int8x16_t *)(v11 + 32);
          v28 = (int8x16_t)vcgtq_f32(v17, *(float32x4_t *)(v11 + 48));
          v29 = vbslq_s8(v28, vextq_s8(v23, v23, 4uLL), (int8x16_t)v19);
          v30 = vbslq_s8(v28, vextq_s8(v24, v24, 4uLL), (int8x16_t)v20);
          v31 = vbslq_s8(v28, vextq_s8(v25, v25, 4uLL), (int8x16_t)v21);
          v32 = (float32x4_t)vbslq_s8(v18, vbslq_s8(v28, vextq_s8(v26, v26, 4uLL), (int8x16_t)v22), (int8x16_t)v22);
          v33 = (float32x4_t)vextq_s8(v27, v27, 8uLL);
          v34 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v18, v29, (int8x16_t)v19), v33), (int8x16_t)v19);
          v35 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v18, v30, (int8x16_t)v20), v33), (int8x16_t)v20);
          v36 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v18, v31, (int8x16_t)v21), v33), (int8x16_t)v21);
          v37 = (float32x4_t)vbslq_s8(v18, (int8x16_t)vminq_f32(v32, v33), (int8x16_t)v22);
          v38 = (float32x4_t)vextq_s8(v27, v27, 4uLL);
          v39 = (int8x16_t *)(v5 + v10);
          v39[-2] = vbslq_s8(v18, (int8x16_t)vmaxq_f32(v34, v38), (int8x16_t)v19);
          v39[-1] = vbslq_s8(v18, (int8x16_t)vmaxq_f32(v35, v38), (int8x16_t)v20);
          *v39 = vbslq_s8(v18, (int8x16_t)vmaxq_f32(v36, v38), (int8x16_t)v21);
          v39[1] = vbslq_s8(v18, (int8x16_t)vmaxq_f32(v37, v38), (int8x16_t)v22);
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v40) = -v9;
      }
      if ((int)v40 < v4)
      {
        v40 = v40;
        do
        {
          v41 = *(_QWORD *)(a1 + 408);
          v42 = *(float32x4_t *)(v41 + 64);
          v43 = vmaxq_f32(vaddq_f32(*(float32x4_t *)v41, vmulq_f32(*(float32x4_t *)(v6 + 16 * v40), *(float32x4_t *)(v41 + 16))), v42);
          v44 = (int8x16_t)vmaxq_f32(vmaxq_f32(v43, (float32x4_t)vrev64q_s32((int32x4_t)v43)), (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 8uLL));
          *(int8x16_t *)(v5 + 16 * v40++) = vbslq_s8(*(int8x16_t *)(v41 + 80), (int8x16_t)vmaxq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v41 + 80), (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v41 + 80), vbslq_s8((int8x16_t)vcgtq_f32(v42, *(float32x4_t *)(v41 + 48)), vextq_s8(v44, v44, 4uLL), (int8x16_t)v43), (int8x16_t)v43), (float32x4_t)vextq_s8(*(int8x16_t *)(v41 + 32), *(int8x16_t *)(v41 + 32), 8uLL)), (int8x16_t)v43), (float32x4_t)vextq_s8(*(int8x16_t *)(v41 + 32), *(int8x16_t *)(v41 + 32), 4uLL)), (int8x16_t)v43);
        }
        while (v40 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcBloomThreshold::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcBloomThreshold::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcBloomThreshold::HgcBloomThreshold(HgcBloomThreshold *this)
{
  _QWORD *v2;
  _OWORD *v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EAAC8;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  v3[2] = 0u;
  v3[3] = v4;
  v3[4] = 0u;
  v3[5] = xmmword_1B3050F70;
  v3[6] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B288CC18(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBloomThreshold::~HgcBloomThreshold(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EAAC8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AC4F46D1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBloomThreshold::~HgcBloomThreshold(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBloomThreshold::SetParameter(HgcBloomThreshold *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float v11;
  __n128 *v12;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_23;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_23;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_23;
    case 3:
      v11 = -a3.n128_f32[0];
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[3].n128_f32[0] == 0.0
        && v12[3].n128_f32[1] == 0.0
        && v12[3].n128_f32[2] == 0.0
        && v12[3].n128_f32[3] == v11)
      {
        return 0;
      }
      v12[3].n128_u64[0] = 0;
      v12[3].n128_u32[2] = 0;
      a3.n128_f32[1] = a4;
      v12[3].n128_f32[3] = v11;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[6] = a3;
LABEL_23:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcBloomThreshold::GetParameter(HgcBloomThreshold *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_6;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_6;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_6;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[24];
      a3[1] = v7[25];
      a3[2] = v7[26];
      v4 = v7 + 27;
LABEL_6:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcEchoScaleAndAdd::GetProgram(HgcEchoScaleAndAdd *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003e5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r1*half4(hg_Params[0]) + r0;\n"
             "    r1.xyz = fmin(r1.xyz, half3(hg_Params[1].xxx));\n"
             "    r1.xyz = fmin(r1.xyz, half3(hg_Params[1].xxx));\n"
             "    r1.w = fmin(r1.w, c0.w);\n"
             "    output.color0 = fmax(float4(r1), float4(c0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=5794dc2a:32344ad2:bbd4a64d:cb8b1ddb\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000003b5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r1*hg_Params[0] + r0;\n"
             "    r1.xyz = fmin(r1.xyz, hg_Params[1].xxx);\n"
             "    r1.xyz = fmin(r1.xyz, hg_Params[1].xxx);\n"
             "    r1.w = fmin(r1.w, c0.w);\n"
             "    output.color0 = fmax(r1, c0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=bed4bc78:50e387c7:c077773c:181c959b\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000390\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r1*hg_ProgramLocal0 + r0;\n"
           "    r1.xyz = min(r1.xyz, hg_ProgramLocal1.xxx);\n"
           "    r1.xyz = min(r1.xyz, hg_ProgramLocal1.xxx);\n"
           "    r1.w = min(r1.w, c0.w);\n"
           "    gl_FragColor = max(r1, c0.xxxx);\n"
           "}\n"
           "//MD5=0098c1ad:709ee8f9:9af35b62:bcd18ec4\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcEchoScaleAndAdd::InitProgramDescriptor(HgcEchoScaleAndAdd *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcEchoScaleAndAdd_hgc_visible", "//Metal1.0     \n//LEN=0000000216\n[[ visible ]] FragmentOut HgcEchoScaleAndAdd_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    r1 = r1*hg_Params[0] + r0;\n"
    "    r1.xyz = fmin(r1.xyz, hg_Params[1].xxx);\n"
    "    r1.xyz = fmin(r1.xyz, hg_Params[1].xxx);\n"
    "    r1.w = fmin(r1.w, c0.w);\n"
    "    output.color0 = fmax(r1, c0.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B288CF84()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcEchoScaleAndAdd");
}

void sub_1B288CF94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B288D0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B288D11C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B288D114);
}

_QWORD *HgcEchoScaleAndAdd::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcEchoScaleAndAdd [hgc1]");
}

uint64_t HgcEchoScaleAndAdd::BindTexture(HgcEchoScaleAndAdd *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcEchoScaleAndAdd::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcEchoScaleAndAdd::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 104);
    v8 = *(_QWORD *)(a2 + 96);
    v9 = 16 * *(int *)(a2 + 88);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v28) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(_QWORD *)(a1 + 408);
          v14 = vaddq_f32(*(float32x4_t *)(v8 + v12 - 32), vmulq_f32(*(float32x4_t *)(v6 + v12 - 32), *(float32x4_t *)v13));
          v15 = vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), vmulq_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x4_t *)v13));
          v16 = vaddq_f32(*(float32x4_t *)(v8 + v12), vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)v13));
          v17 = vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), vmulq_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x4_t *)v13));
          v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v13 + 16), 0);
          v19 = *(int8x16_t *)(v13 + 32);
          v20 = *(float32x4_t *)(v13 + 48);
          v21 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v14, (int8x16_t)vminq_f32(v14, v18)), v18);
          v22 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v15, (int8x16_t)vminq_f32(v15, v18)), v18);
          v23 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v16, (int8x16_t)vminq_f32(v16, v18)), v18);
          v24 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v17, (int8x16_t)vminq_f32(v17, v18)), v18);
          v25 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v17, v24), v20), v24);
          v26 = *(float32x4_t *)(v13 + 64);
          v27 = (float32x4_t *)(v5 + v12);
          v27[-2] = vmaxq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v14, v21), v20), v21), v26);
          v27[-1] = vmaxq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v15, v22), v20), v22), v26);
          *v27 = vmaxq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)v16, v23), v20), v23), v26);
          v27[1] = vmaxq_f32(v25, v26);
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v28) = -v11;
      }
      if ((int)v28 < v4)
      {
        v28 = v28;
        do
        {
          v29 = *(_QWORD *)(a1 + 408);
          v30 = vaddq_f32(*(float32x4_t *)(v8 + 16 * v28), vmulq_f32(*(float32x4_t *)(v6 + 16 * v28), *(float32x4_t *)v29));
          v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v29 + 16), 0);
          v32 = *(int8x16_t *)(v29 + 32);
          v33 = (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v32, (int8x16_t)v30, (int8x16_t)vminq_f32(v30, v31)), v31);
          *(float32x4_t *)(v5 + 16 * v28++) = vmaxq_f32((float32x4_t)vbslq_s8(v32, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v32, (int8x16_t)v30, v33), *(float32x4_t *)(v29 + 48)), v33), *(float32x4_t *)(v29 + 64));
        }
        while (v28 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcEchoScaleAndAdd::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcEchoScaleAndAdd::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcEchoScaleAndAdd::HgcEchoScaleAndAdd(HgcEchoScaleAndAdd *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EAD30;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 48) = xmmword_1B3052220;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B288D50C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcEchoScaleAndAdd::~HgcEchoScaleAndAdd(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EAD30;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C404247E4FDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcEchoScaleAndAdd::~HgcEchoScaleAndAdd(this);
  HGObject::operator delete(v1);
}

uint64_t HgcEchoScaleAndAdd::SetParameter(HgcEchoScaleAndAdd *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcEchoScaleAndAdd::GetParameter(HgcEchoScaleAndAdd *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcConcentricCircles::GetProgram(HgcConcentricCircles *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000005e7\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.7500000000, 0.000000000, 0.2500000000, 0.5000000000);\n"
             "    const half4 c1 = half4(3.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = frag._texCoord0 - hg_Params[0];\n"
             "    s0 = hg_Params[5]*s0;\n"
             "    s0 = float4(dot(s0, s0));\n"
             "    s0 = sqrt(s0);\n"
             "    s1 = s0 + hg_Params[3].yyyy;\n"
             "    s1 = s1/hg_Params[3].xxxx;\n"
             "    s1 = fract(s1);\n"
             "    s2 = float4(c0.xxxx) - s1;\n"
             "    s3 = float4(s2 < float4(c0.yyyy));\n"
             "    s2 = float4(c0.xxxx) + s2;\n"
             "    s1 = select(s1, s2, -s3 < 0.00000h);\n"
             "    s3 = float4(c0.zzzz) - s1;\n"
             "    s2 = float4(s3 < float4(c0.yyyy));\n"
             "    s3 = float4(c0.zzzz) + s3;\n"
             "    s1 = select(s3, s1, -s2 < 0.00000h);\n"
             "    s1 = clamp(mix(float4(c0.wwww), s1, hg_Params[4]), 0.00000f, 1.00000f);\n"
             "    s2 = s1*s1;\n"
             "    s3 = s2*float4(c1.xxxx);\n"
             "    s2 = s2*s1;\n"
             "    s2 = s2*float4(c1.yyyy) + s3;\n"
             "    s2 = mix(hg_Params[1], hg_Params[2], s2);\n"
             "    s1.x = clamp(s0.x - hg_Params[6].x, 0.00000f, 1.00000f);\n"
             "    s1.x = float(c1.z) - s1.x;\n"
             "    s0.x = float(c1.z) + s0.x;\n"
             "    s0.x = clamp(s0.x - hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    s1.x = s1.x*s0.x;\n"
             "    output.color0.xyz = s2.xyz*s1.xxx;\n"
             "    output.color0.w = s1.x*s2.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=bef0cca1:e5539de3:676d9ca3:5def84e1\n"
             "//SIG=00400000:00000000:00000000:00000000:0002:0008:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000595\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.7500000000, 0.000000000, 0.2500000000, 0.5000000000);\n"
             "    const float4 c1 = float4(3.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = frag._texCoord0 - hg_Params[0];\n"
             "    r0 = hg_Params[5]*r0;\n"
             "    r0 = float4(dot(r0, r0));\n"
             "    r0 = sqrt(r0);\n"
             "    r1 = r0 + hg_Params[3].yyyy;\n"
             "    r1 = r1/hg_Params[3].xxxx;\n"
             "    r1 = fract(r1);\n"
             "    r2 = c0.xxxx - r1;\n"
             "    r3 = float4(r2 < c0.yyyy);\n"
             "    r2 = c0.xxxx + r2;\n"
             "    r1 = select(r1, r2, -r3 < 0.00000f);\n"
             "    r3 = c0.zzzz - r1;\n"
             "    r2 = float4(r3 < c0.yyyy);\n"
             "    r3 = c0.zzzz + r3;\n"
             "    r1 = select(r3, r1, -r2 < 0.00000f);\n"
             "    r1 = clamp(mix(c0.wwww, r1, hg_Params[4]), 0.00000f, 1.00000f);\n"
             "    r2 = r1*r1;\n"
             "    r3 = r2*c1.xxxx;\n"
             "    r2 = r2*r1;\n"
             "    r2 = r2*c1.yyyy + r3;\n"
             "    r2 = mix(hg_Params[1], hg_Params[2], r2);\n"
             "    r1.x = clamp(r0.x - hg_Params[6].x, 0.00000f, 1.00000f);\n"
             "    r1.x = c1.z - r1.x;\n"
             "    r0.x = c1.z + r0.x;\n"
             "    r0.x = clamp(r0.x - hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    r1.x = r1.x*r0.x;\n"
             "    output.color0.xyz = r2.xyz*r1.xxx;\n"
             "    output.color0.w = r1.x*r2.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=8e8929da:97cec00a:038fad01:723fe795\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:0008:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000079b\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.7500000000, 0.000000000, 0.2500000000, 0.5000000000);\n"
           "    const highp vec4 c1 = vec4(3.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = hg_TexCoord0 - hg_ProgramLocal0;\n"
           "    r0 = hg_ProgramLocal5*r0;\n"
           "    r0 = vec4(dot(r0, r0));\n"
           "    r0 = sqrt(r0);\n"
           "    r1 = r0 + hg_ProgramLocal3.yyyy;\n"
           "    r1 = r1/hg_ProgramLocal3.xxxx;\n"
           "    r1 = fract(r1);\n"
           "    r2 = c0.xxxx - r1;\n"
           "    r3 = vec4(lessThan(r2, c0.yyyy));\n"
           "    r2 = c0.xxxx + r2;\n"
           "    r1 = vec4(-r3.x < 0.00000 ? r2.x : r1.x, -r3.y < 0.00000 ? r2.y : r1.y, -r3.z < 0.00000 ? r2.z : r1.z, -r"
           "3.w < 0.00000 ? r2.w : r1.w);\n"
           "    r3 = c0.zzzz - r1;\n"
           "    r2 = vec4(lessThan(r3, c0.yyyy));\n"
           "    r3 = c0.zzzz + r3;\n"
           "    r1 = vec4(-r2.x < 0.00000 ? r1.x : r3.x, -r2.y < 0.00000 ? r1.y : r3.y, -r2.z < 0.00000 ? r1.z : r3.z, -r"
           "2.w < 0.00000 ? r1.w : r3.w);\n"
           "    r1 = clamp(mix(c0.wwww, r1, hg_ProgramLocal4), vec4(0.00000), vec4(1.00000));\n"
           "    r2 = r1*r1;\n"
           "    r3 = r2*c1.xxxx;\n"
           "    r2 = r2*r1;\n"
           "    r2 = r2*c1.yyyy + r3;\n"
           "    r2 = mix(hg_ProgramLocal1, hg_ProgramLocal2, r2);\n"
           "    r1.x = clamp(r0.x - hg_ProgramLocal6.x, 0.00000, 1.00000);\n"
           "    r1.x = c1.z - r1.x;\n"
           "    r0.x = c1.z + r0.x;\n"
           "    r0.x = clamp(r0.x - hg_ProgramLocal7.x, 0.00000, 1.00000);\n"
           "    r1.x = r1.x*r0.x;\n"
           "    gl_FragColor.xyz = r2.xyz*r1.xxx;\n"
           "    gl_FragColor.w = r1.x*r2.w;\n"
           "}\n"
           "//MD5=9c3a62f8:cedc9e9e:1c65ef8f:6d92b9c6\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:0008:0004:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcConcentricCircles::InitProgramDescriptor(HgcConcentricCircles *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcConcentricCircles_hgc_visible", "//Metal1.0     \n//LEN=00000004fe\n[[ visible ]] FragmentOut HgcConcentricCircles_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.7500000000, 0.000000000, 0.2500000000, 0.5000000000);\n"
    "    const float4 c1 = float4(3.000000000, -2.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = texCoord0 - hg_Params[0];\n"
    "    r0 = hg_Params[5]*r0;\n"
    "    r0 = float4(dot(r0, r0));\n"
    "    r0 = sqrt(r0);\n"
    "    r1 = r0 + hg_Params[3].yyyy;\n"
    "    r1 = r1/hg_Params[3].xxxx;\n"
    "    r1 = fract(r1);\n"
    "    r2 = c0.xxxx - r1;\n"
    "    r3 = float4(r2 < c0.yyyy);\n"
    "    r2 = c0.xxxx + r2;\n"
    "    r1 = select(r1, r2, -r3 < 0.00000f);\n"
    "    r3 = c0.zzzz - r1;\n"
    "    r2 = float4(r3 < c0.yyyy);\n"
    "    r3 = c0.zzzz + r3;\n"
    "    r1 = select(r3, r1, -r2 < 0.00000f);\n"
    "    r1 = clamp(mix(c0.wwww, r1, hg_Params[4]), 0.00000f, 1.00000f);\n"
    "    r2 = r1*r1;\n"
    "    r3 = r2*c1.xxxx;\n"
    "    r2 = r2*r1;\n"
    "    r2 = r2*c1.yyyy + r3;\n"
    "    r2 = mix(hg_Params[1], hg_Params[2], r2);\n"
    "    r1.x = clamp(r0.x - hg_Params[6].x, 0.00000f, 1.00000f);\n"
    "    r1.x = c1.z - r1.x;\n"
    "    r0.x = c1.z + r0.x;\n"
    "    r0.x = clamp(r0.x - hg_Params[7].x, 0.00000f, 1.00000f);\n"
    "    r1.x = r1.x*r0.x;\n"
    "    output.color0.xyz = r2.xyz*r1.xxx;\n"
    "    output.color0.w = r1.x*r2.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B288D718()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcConcentricCircles");
}

void sub_1B288D728(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B288D828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B288D868()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B288D860);
}

_QWORD *HgcConcentricCircles::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcConcentricCircles [hgc1]");
}

uint64_t HgcConcentricCircles::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcConcentricCircles::Bind(HgcConcentricCircles *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HgcConcentricCircles *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcConcentricCircles::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  float32x4_t v6;
  int32x2_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  __int128 v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t *v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  __int128 v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    *(float32x2_t *)v6.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v6.i64[1] = 0x3F80000000000000;
    v7 = a2[2];
    v8 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 2)
      {
        v9 = 0;
        v11 = v6;
      }
      else
      {
        v9 = 0;
        v10 = v5;
        v11 = v6;
        do
        {
          v12 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F230);
          v13 = *(_QWORD *)(a1 + 408);
          v14 = *(float32x4_t *)(v13 + 16);
          v16 = *(float32x4_t *)(v13 + 64);
          v15 = *(float32x4_t *)(v13 + 80);
          v17 = vmulq_f32(v15, vsubq_f32(v11, *(float32x4_t *)v13));
          v18 = vmulq_f32(v15, vsubq_f32(v12, *(float32x4_t *)v13));
          v19 = vmulq_f32(v17, v17);
          v20 = vmulq_f32(v18, v18);
          v21 = vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL));
          v22 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL));
          v23 = vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL));
          v24 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          v25 = *(float32x4_t *)(v13 + 128);
          v26 = *(float32x4_t *)(v13 + 144);
          v27 = vminq_f32(vrsqrteq_f32(v23), v25);
          v28 = vminq_f32(vrsqrteq_f32(v24), v25);
          v29 = vminq_f32(vmulq_f32(v27, vrsqrtsq_f32(vmulq_f32(v27, v23), v27)), v25);
          v30 = vminq_f32(vmulq_f32(v28, vrsqrtsq_f32(vmulq_f32(v28, v24), v28)), v25);
          v31 = vmulq_f32(v23, vminq_f32(vmulq_f32(v29, vrsqrtsq_f32(vmulq_f32(v23, v29), v29)), v25));
          v32 = *(_OWORD *)(v13 + 48);
          v33 = vmulq_f32(v24, vminq_f32(vmulq_f32(v30, vrsqrtsq_f32(vmulq_f32(v24, v30), v30)), v25));
          v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v32, 1);
          v35 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v32, 0);
          v36 = vminq_f32(vmaxq_f32(vrecpeq_f32(v35), v26), v25);
          v37 = vminq_f32(vmaxq_f32(vmulq_f32(v36, vrecpsq_f32(v35, v36)), v26), v25);
          v38 = vmulq_f32(v37, vrecpsq_f32(v35, v37));
          v39 = vmulq_f32(vaddq_f32(v31, v34), v38);
          v40 = vmulq_f32(vaddq_f32(v33, v34), v38);
          v41 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
          v42 = vcvtq_f32_s32(vcvtq_s32_f32(v40));
          v43 = *(float32x4_t *)(v13 + 160);
          v44 = *(float32x4_t *)(v13 + 176);
          v45 = vsubq_f32(v39, vsubq_f32(v41, (float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v41, v39))));
          v46 = vsubq_f32(v40, vsubq_f32(v42, (float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v42, v40))));
          v47 = vsubq_f32(v44, v45);
          v48 = vsubq_f32(v44, v46);
          v49 = *(float32x4_t *)(v13 + 192);
          v50 = *(float32x4_t *)(v13 + 208);
          v51 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v49, v47)), v49), (int8x16_t)vaddq_f32(v44, v47), (int8x16_t)v45);
          v52 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v49, v48)), v49), (int8x16_t)vaddq_f32(v44, v48), (int8x16_t)v46);
          v53 = vsubq_f32(v50, v51);
          v54 = vsubq_f32(v50, v52);
          v55 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v49, v53)), v49), (int8x16_t)v51, (int8x16_t)vaddq_f32(v50, v53));
          v56 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v43, (int8x16_t)vcgtq_f32(v49, v54)), v49), (int8x16_t)v52, (int8x16_t)vaddq_f32(v50, v54));
          v57 = *(float32x4_t *)(v13 + 224);
          v58 = *(float32x4_t *)(v13 + 240);
          v59 = vaddq_f32(v57, vmulq_f32(v16, vsubq_f32(v56, v57)));
          v60 = vminq_f32(vmaxq_f32(vaddq_f32(v57, vmulq_f32(v16, vsubq_f32(v55, v57))), v49), v43);
          v61 = vminq_f32(vmaxq_f32(v59, v49), v43);
          v62 = vmulq_f32(v60, v60);
          v63 = vmulq_f32(v61, v61);
          v64 = vmulq_f32(v60, v62);
          v65 = vmulq_f32(v62, v58);
          v66 = vmulq_f32(v63, v58);
          v67 = vmulq_f32(v61, v63);
          v68 = *(float32x4_t *)(v13 + 256);
          v69 = vsubq_f32(v65, vmulq_f32(v64, v68));
          v70 = vsubq_f32(v66, vmulq_f32(v67, v68));
          v71 = vsubq_f32(*(float32x4_t *)(v13 + 32), v14);
          v72 = *(float32x4_t *)(v13 + 96);
          v73 = *(float32x4_t *)(v13 + 112);
          v74 = (float32x4_t *)(*(_QWORD *)&v7 + 16 * v9);
          *v74 = vmulq_n_f32(vaddq_f32(v14, vmulq_f32(v69, v71)), vmulq_f32(vsubq_f32(v43, vminq_f32(vmaxq_f32(vsubq_f32(v31, v72), v49), v43)), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v31, v43), v73), v49), v43)).f32[0]);
          v74[1] = vmulq_n_f32(vaddq_f32(v14, vmulq_f32(v70, v71)), vmulq_f32(vsubq_f32(v43, vminq_f32(vmaxq_f32(vsubq_f32(v33, v72), v49), v43)), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32(v33, v43), v73), v49), v43)).f32[0]);
          v11 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          v9 += 2;
          v10 -= 2;
        }
        while (v10 > 1);
        v9 = v9;
      }
      if ((int)v9 < v5)
      {
        v75 = *(_QWORD *)(a1 + 408);
        v76 = vmulq_f32(*(float32x4_t *)(v75 + 80), vsubq_f32(v11, *(float32x4_t *)v75));
        v77 = vmulq_f32(v76, v76);
        v78 = vaddq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 4uLL));
        v79 = vaddq_f32(v78, (float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL));
        v80 = *(float32x4_t *)(v75 + 128);
        v81 = *(float32x4_t *)(v75 + 144);
        v82 = vminq_f32(vrsqrteq_f32(v79), v80);
        v83 = vminq_f32(vmulq_f32(v82, vrsqrtsq_f32(vmulq_f32(v82, v79), v82)), v80);
        v84 = *(_OWORD *)(v75 + 48);
        v85 = vmulq_f32(v79, vminq_f32(vmulq_f32(v83, vrsqrtsq_f32(vmulq_f32(v83, v79), v83)), v80));
        v86 = vaddq_f32(v85, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v84, 1));
        v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v84, 0);
        v88 = vminq_f32(vmaxq_f32(vrecpeq_f32(v87), v81), v80);
        v89 = vminq_f32(vmaxq_f32(vmulq_f32(v88, vrecpsq_f32(v87, v88)), v81), v80);
        v90 = vmulq_f32(v86, vmulq_f32(v89, vrecpsq_f32(v87, v89)));
        v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
        v92 = *(float32x4_t *)(v75 + 160);
        v93 = *(float32x4_t *)(v75 + 176);
        v94 = vsubq_f32(v90, vsubq_f32(v91, (float32x4_t)vandq_s8((int8x16_t)v92, (int8x16_t)vcgtq_f32(v91, v90))));
        v95 = vsubq_f32(v93, v94);
        v96 = (int8x16_t)vaddq_f32(v93, v95);
        v97 = *(float32x4_t *)(v75 + 192);
        v98 = *(float32x4_t *)(v75 + 208);
        v99 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v92, (int8x16_t)vcgtq_f32(v97, v95)), v97), v96, (int8x16_t)v94);
        v100 = vsubq_f32(v98, v99);
        v101 = vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v75 + 224), vmulq_f32(*(float32x4_t *)(v75 + 64), vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v92, (int8x16_t)vcgtq_f32(v97, v100)), v97), (int8x16_t)v99, (int8x16_t)vaddq_f32(v98, v100)), *(float32x4_t *)(v75 + 224)))), v97), v92);
        v102 = vmulq_f32(v101, v101);
        *(float32x4_t *)(*(_QWORD *)&v7 + 16 * v9) = vmulq_n_f32(vaddq_f32(*(float32x4_t *)(v75 + 16), vmulq_f32(vsubq_f32(vmulq_f32(v102, *(float32x4_t *)(v75 + 240)), vmulq_f32(vmulq_f32(v101, v102), *(float32x4_t *)(v75 + 256))), vsubq_f32(*(float32x4_t *)(v75 + 32), *(float32x4_t *)(v75 + 16)))), vmulq_f32(vsubq_f32(v92, vminq_f32(vmaxq_f32(vsubq_f32(v85, *(float32x4_t *)(v75 + 96)), v97), v92)), vminq_f32(vmaxq_f32(
                                                             vsubq_f32(vaddq_f32(v85, v92), *(float32x4_t *)(v75 + 112)),
                                                             v97),
                                                           v92)).f32[0]);
      }
      v6 = vaddq_f32(v6, (float32x4_t)xmmword_1B304F240);
      *(_QWORD *)&v7 += v8;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcConcentricCircles::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcConcentricCircles::GetROI()
{
  return 0;
}

void HgcConcentricCircles::HgcConcentricCircles(HgcConcentricCircles *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EAF98;
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)&v4 = 0x80000000800000;
  *((_QWORD *)&v4 + 1) = 0x80000000800000;
  *(int32x4_t *)(v3 + 128) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 144) = v4;
  __asm
  {
    FMOV            V1.4S, #1.0
    FMOV            V2.4S, #0.75
  }
  *(_OWORD *)(v3 + 160) = _Q1;
  *(_OWORD *)(v3 + 176) = _Q2;
  __asm { FMOV            V1.4S, #0.25 }
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = _Q1;
  *(_QWORD *)&_Q1 = 0x3F0000003F000000;
  *((_QWORD *)&_Q1 + 1) = 0x3F0000003F000000;
  __asm { FMOV            V2.4S, #3.0 }
  *(_OWORD *)(v3 + 224) = _Q1;
  *(_OWORD *)(v3 + 240) = _Q2;
  *(_QWORD *)&_Q1 = 0x4000000040000000;
  *((_QWORD *)&_Q1 + 1) = 0x4000000040000000;
  *(_OWORD *)(v3 + 256) = _Q1;
  *(_OWORD *)(v3 + 272) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 288) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B288DF1C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcConcentricCircles::~HgcConcentricCircles(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EAF98;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FDACBBE0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcConcentricCircles::~HgcConcentricCircles(this);
  HGObject::operator delete(v1);
}

uint64_t HgcConcentricCircles::SetParameter(HgcConcentricCircles *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  __n128 *v12;
  int32x4_t v13;
  float *v14;
  float *v15;
  float *v16;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_43;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_43;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_43;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_43;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == a3.n128_f32[0]
        && v12[4].n128_f32[1] == a3.n128_f32[0]
        && v12[4].n128_f32[2] == a3.n128_f32[0]
        && v12[4].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v13 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v12[4] = (__n128)v13;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[18] = a3;
      goto LABEL_43;
    case 5:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[20] == a3.n128_f32[0] && v14[21] == a4 && v14[22] == a5 && v14[23] == a6)
        return 0;
      v14[20] = a3.n128_f32[0];
      v14[21] = a4;
      v14[22] = a5;
      v14[23] = a6;
      goto LABEL_43;
    case 6:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[24] == a3.n128_f32[0] && v15[25] == a4 && v15[26] == a5 && v15[27] == a6)
        return 0;
      v15[24] = a3.n128_f32[0];
      v15[25] = a4;
      v15[26] = a5;
      v15[27] = a6;
      goto LABEL_43;
    case 7:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[28] == a3.n128_f32[0] && v16[29] == a4 && v16[30] == a5 && v16[31] == a6)
        return 0;
      v16[28] = a3.n128_f32[0];
      v16[29] = a4;
      v16[30] = a5;
      v16[31] = a6;
LABEL_43:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcConcentricCircles::GetParameter(HgcConcentricCircles *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_10;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_10;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_10;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_10;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[72];
      a3[1] = v8[73];
      a3[2] = v8[74];
      v4 = v8 + 75;
      goto LABEL_10;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_10;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_10;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
LABEL_10:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcGradientColorize::GetProgram(HgcGradientColorize *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000865\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.9999899864, 0.5000000000, -2.000000000, 1.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 0.2989999950, 0.5870000124, 0.1140000001);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1.x = dot(r1, half4(hg_Params[0]));\n"
             "    r1.x = c0.x - r1.x;\n"
             "    r1.x = r1.x*half(hg_Params[1].x) + half(hg_Params[1].y);\n"
             "    r1.y = r1.x*c0.y;\n"
             "    r1.y = fract(r1.y);\n"
             "    r1.z = -r1.y + c0.y;\n"
             "    r1.z = fabs(r1.z)*c0.z + c0.w;\n"
             "    r1.y = select(r1.z, r1.x, half(hg_Params[2].x) < 0.00000h);\n"
             "    r1.z = fract(r1.x);\n"
             "    r1.x = abs(r1.x);\n"
             "    r1.xz = half2(-r1.xz >= c1.xx);\n"
             "    r1.y = fract(r1.y);\n"
             "    r1.y = r1.y + r1.z;\n"
             "    r1.x = r1.y - r1.x;\n"
             "    r1.x = r1.x*half(hg_Params[3].x);\n"
             "    r1.x = fmin(r1.x, half(hg_Params[3].y));\n"
             "    r1.x = fmax(r1.x, c1.x);\n"
             "    r1.x = floor(r1.x);\n"
             "    r1.y = c0.y;\n"
             "    r1.x = r1.x + c0.y;\n"
             "    r1.xy = r1.xy + half2(hg_Params[8].xy);\n"
             "    r1.xy = r1.xy*half2(hg_Params[8].zw);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, float2(r1.xy));\n"
             "    r2.x = dot(r1.xyz, c1.yzw);\n"
             "    r2 = clamp(mix(r2.xxxx, r1, half4(hg_Params[4])), 0.00000h, 1.00000h);\n"
             "    r2 = select(r1, r2, -half4(hg_Params[6].xxxx) < 0.00000h);\n"
             "    r1.w = dot(r2, half4(hg_Params[5]));\n"
             "    r1.xyz = mix(r1.www, r2.yzw, half3(hg_Params[4].yzw));\n"
             "    r2 = r2.yzwx*r0.wwww + -r0;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    r1.w = r0.w;\n"
             "    r1 = mix(r0, r1, half4(hg_Params[7].xxxx));\n"
             "    r0 = r2*half4(hg_Params[7].xxxx) + r0;\n"
             "    output.color0 = select(float4(r1), float4(r0), -fabs(hg_Params[6].xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e4df9caf:550b4986:84965cbc:7a8ddf33\n"
             "//SIG=00400000:00000001:00000001:00000003:0002:0009:0003:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000007e9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.9999899864, 0.5000000000, -2.000000000, 1.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 0.2989999950, 0.5870000124, 0.1140000001);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1.x = dot(r1, hg_Params[0]);\n"
             "    r1.x = c0.x - r1.x;\n"
             "    r1.x = r1.x*hg_Params[1].x + hg_Params[1].y;\n"
             "    r1.y = r1.x*c0.y;\n"
             "    r1.y = fract(r1.y);\n"
             "    r1.z = -r1.y + c0.y;\n"
             "    r1.z = fabs(r1.z)*c0.z + c0.w;\n"
             "    r1.y = select(r1.z, r1.x, hg_Params[2].x < 0.00000f);\n"
             "    r1.z = fract(r1.x);\n"
             "    r1.x = abs(r1.x);\n"
             "    r1.xz = float2(-r1.xz >= c1.xx);\n"
             "    r1.y = fract(r1.y);\n"
             "    r1.y = r1.y + r1.z;\n"
             "    r1.x = r1.y - r1.x;\n"
             "    r1.x = r1.x*hg_Params[3].x;\n"
             "    r1.x = fmin(r1.x, hg_Params[3].y);\n"
             "    r1.x = fmax(r1.x, c1.x);\n"
             "    r1.x = floor(r1.x);\n"
             "    r1.y = c0.y;\n"
             "    r1.x = r1.x + c0.y;\n"
             "    r1.xy = r1.xy + hg_Params[8].xy;\n"
             "    r1.xy = r1.xy*hg_Params[8].zw;\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
             "    r2.x = dot(r1.xyz, c1.yzw);\n"
             "    r2 = clamp(mix(r2.xxxx, r1, hg_Params[4]), 0.00000f, 1.00000f);\n"
             "    r2 = select(r1, r2, -hg_Params[6].xxxx < 0.00000f);\n"
             "    r1.w = dot(r2, hg_Params[5]);\n"
             "    r1.xyz = mix(r1.www, r2.yzw, hg_Params[4].yzw);\n"
             "    r2 = r2.yzwx*r0.wwww + -r0;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    r1.w = r0.w;\n"
             "    r1 = mix(r0, r1, hg_Params[7].xxxx);\n"
             "    r0 = r2*hg_Params[7].xxxx + r0;\n"
             "    output.color0 = select(r1, r0, -fabs(hg_Params[6].xxxx) < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5038cae5:eae89ab1:f10a7871:340599ee\n"
             "//SIG=00000000:00000001:00000001:00000000:0002:0009:0003:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000a11\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "uniform mediump vec4 hg_ProgramLocal5;\n"
           "uniform mediump vec4 hg_ProgramLocal6;\n"
           "uniform mediump vec4 hg_ProgramLocal7;\n"
           "uniform mediump vec4 hg_ProgramLocal8;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.9999899864, 0.5000000000, -2.000000000, 1.000000000);\n"
           "    const mediump vec4 c1 = vec4(0.000000000, 0.2989999950, 0.5870000124, 0.1140000001);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1.x = dot(r1, hg_ProgramLocal0);\n"
           "    r1.x = c0.x - r1.x;\n"
           "    r1.x = r1.x*hg_ProgramLocal1.x + hg_ProgramLocal1.y;\n"
           "    r1.y = r1.x*c0.y;\n"
           "    r1.y = fract(r1.y);\n"
           "    r1.z = -r1.y + c0.y;\n"
           "    r1.z = abs(r1.z)*c0.z + c0.w;\n"
           "    r1.y = hg_ProgramLocal2.x < 0.00000 ? r1.x : r1.z;\n"
           "    r1.z = fract(r1.x);\n"
           "    r1.x = abs(r1.x);\n"
           "    r1.xz = vec2(greaterThanEqual(-r1.xz, c1.xx));\n"
           "    r1.y = fract(r1.y);\n"
           "    r1.y = r1.y + r1.z;\n"
           "    r1.x = r1.y - r1.x;\n"
           "    r1.x = r1.x*hg_ProgramLocal3.x;\n"
           "    r1.x = min(r1.x, hg_ProgramLocal3.y);\n"
           "    r1.x = max(r1.x, c1.x);\n"
           "    r1.x = floor(r1.x);\n"
           "    r1.y = c0.y;\n"
           "    r1.x = r1.x + c0.y;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal8.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal8.zw;\n"
           "    r1 = texture2D(hg_Texture1, r1.xy);\n"
           "    r2.x = dot(r1.xyz, c1.yzw);\n"
           "    r2 = clamp(mix(r2.xxxx, r1, hg_ProgramLocal4), vec4(0.00000), vec4(1.00000));\n"
           "    r2 = vec4(-hg_ProgramLocal6.x < 0.00000 ? r2.x : r1.x, -hg_ProgramLocal6.x < 0.00000 ? r2.y : r1.y, -hg_P"
           "rogramLocal6.x < 0.00000 ? r2.z : r1.z, -hg_ProgramLocal6.x < 0.00000 ? r2.w : r1.w);\n"
           "    r1.w = dot(r2, hg_ProgramLocal5);\n"
           "    r1.xyz = mix(r1.www, r2.yzw, hg_ProgramLocal4.yzw);\n"
           "    r2 = r2.yzwx*r0.wwww + -r0;\n"
           "    r1.xyz = r1.xyz*r0.www;\n"
           "    r1.w = r0.w;\n"
           "    r1 = mix(r0, r1, hg_ProgramLocal7.xxxx);\n"
           "    r0 = r2*hg_ProgramLocal7.xxxx + r0;\n"
           "    gl_FragColor = vec4(-abs(hg_ProgramLocal6.x) < 0.00000 ? r0.x : r1.x, -abs(hg_ProgramLocal6.x) < 0.00000 "
           "? r0.y : r1.y, -abs(hg_ProgramLocal6.x) < 0.00000 ? r0.z : r1.z, -abs(hg_ProgramLocal6.x) < 0.00000 ? r0.w : "
           "r1.w);\n"
           "}\n"
           "//MD5=d68c4bec:79c321ab:7cc31d0b:f45abdec\n"
           "//SIG=00000000:00000001:00000001:00000000:0002:0009:0003:0000:0000:0000:0000:0000:0001:02:0:1:0\n";
  }
}

void HgcGradientColorize::InitProgramDescriptor(HgcGradientColorize *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGradientColorize_hgc_visible", "//Metal1.0     \n//LEN=00000006a4\n[[ visible ]] FragmentOut HgcGradientColorize_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1)\n{\n    const float4 c0 = float4(0.9999899864, 0.5000000000, -2.000000000, 1.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 0.2989999950, 0.5870000124, 0.1140000001);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = dot(r1, hg_Params[0]);\n"
    "    r1.x = c0.x - r1.x;\n"
    "    r1.x = r1.x*hg_Params[1].x + hg_Params[1].y;\n"
    "    r1.y = r1.x*c0.y;\n"
    "    r1.y = fract(r1.y);\n"
    "    r1.z = -r1.y + c0.y;\n"
    "    r1.z = fabs(r1.z)*c0.z + c0.w;\n"
    "    r1.y = select(r1.z, r1.x, hg_Params[2].x < 0.00000f);\n"
    "    r1.z = fract(r1.x);\n"
    "    r1.x = abs(r1.x);\n"
    "    r1.xz = float2(-r1.xz >= c1.xx);\n"
    "    r1.y = fract(r1.y);\n"
    "    r1.y = r1.y + r1.z;\n"
    "    r1.x = r1.y - r1.x;\n"
    "    r1.x = r1.x*hg_Params[3].x;\n"
    "    r1.x = fmin(r1.x, hg_Params[3].y);\n"
    "    r1.x = fmax(r1.x, c1.x);\n"
    "    r1.x = floor(r1.x);\n"
    "    r1.y = c0.y;\n"
    "    r1.x = r1.x + c0.y;\n"
    "    r1.xy = r1.xy + hg_Params[8].xy;\n"
    "    r1.xy = r1.xy*hg_Params[8].zw;\n"
    "    r1 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
    "    r2.x = dot(r1.xyz, c1.yzw);\n"
    "    r2 = clamp(mix(r2.xxxx, r1, hg_Params[4]), 0.00000f, 1.00000f);\n"
    "    r2 = select(r1, r2, -hg_Params[6].xxxx < 0.00000f);\n"
    "    r1.w = dot(r2, hg_Params[5]);\n"
    "    r1.xyz = mix(r1.www, r2.yzw, hg_Params[4].yzw);\n"
    "    r2 = r2.yzwx*r0.wwww + -r0;\n"
    "    r1.xyz = r1.xyz*r0.www;\n"
    "    r1.w = r0.w;\n"
    "    r1 = mix(r0, r1, hg_Params[7].xxxx);\n"
    "    r0 = r2*hg_Params[7].xxxx + r0;\n"
    "    output.color0 = select(r1, r0, -fabs(hg_Params[6].xxxx) < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B288E410()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGradientColorize");
}

void sub_1B288E420(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052270;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B288E5A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B288E5F0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B288E5E8);
}

_QWORD *HgcGradientColorize::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGradientColorize [hgc1]");
}

uint64_t HgcGradientColorize::BindTexture(HgcGradientColorize *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v8.n128_u32[0] = 1.0;
      v9.n128_u32[0] = 1.0;
    }
    else
    {
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v6.n128_f32[0] = (float)*((int *)a2 + 60);
    v7.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 8, v6, v7, v8, v9);
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v4)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  return 0;
}

uint64_t HgcGradientColorize::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, a1[51] + 80, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, a1[51] + 96, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, a1[51] + 112, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcGradientColorize::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  float32x4_t v5;
  int v6;
  int32x2_t v7;
  int32x2_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  int v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  float32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  __int32 v111;
  __int32 v112;
  float32x4_t v113;
  int32x4_t v114;
  __int32 v115;
  __int32 v116;
  __int32 v117;
  int32x2_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  __int128 v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t *v158;
  uint64_t v159;
  float32x4_t v160;
  uint64_t v161;
  float32x4_t v162;
  float32x4_t v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  int8x16_t v169;
  float32x4_t v170;
  int32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  int32x4_t v176;
  int64x2_t v177;
  int8x16_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  int8x16_t v183;
  int8x16_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  int32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    v6 = a2[1].i32[0] - v2.i32[0];
    v7 = a2[2];
    v8 = a2[10];
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    v11.i64[0] = 0x3F0000003F000000;
    v11.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v6 < 3)
      {
        LODWORD(v159) = 0;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        do
        {
          v14 = *(float32x4_t *)(*(_QWORD *)&v8 + v12);
          v15 = *(float32x4_t *)(*(_QWORD *)&v8 + v12 + 16);
          v16 = *(float32x4_t *)(*(_QWORD *)&v8 + v12 + 32);
          v17 = *(_QWORD *)(a1 + 408);
          v18 = *(float32x4_t *)(v17 + 128);
          v19 = *(float32x4_t *)(v17 + 144);
          v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v18);
          v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 3), v18);
          v22 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 3), v18);
          v23 = vmulq_f32(vrecpeq_f32(v20), v19);
          v24 = vmulq_f32(vrecpeq_f32(v21), v19);
          v25 = vmulq_f32(vrecpeq_f32(v22), v19);
          v26 = (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v20));
          v27 = (int8x16_t)vmulq_f32(v24, vrecpsq_f32(v24, v21));
          v28 = (int8x16_t)vmulq_f32(v25, vrecpsq_f32(v25, v22));
          v30 = *(int8x16_t *)(v17 + 160);
          v29 = *(float32x4_t *)(v17 + 176);
          v31 = *(float32x4_t *)(v17 + 16);
          v32 = vmulq_f32(*(float32x4_t *)v17, vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v30, v26), (int8x16_t)v29)));
          v33 = vmulq_f32(*(float32x4_t *)v17, vmulq_f32(v15, (float32x4_t)vorrq_s8(vandq_s8(v30, v27), (int8x16_t)v29)));
          v34 = vmulq_f32(*(float32x4_t *)v17, vmulq_f32(v16, (float32x4_t)vorrq_s8(vandq_s8(v30, v28), (int8x16_t)v29)));
          v35 = vaddq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 4uLL));
          v36 = vaddq_f32(v33, (float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL));
          v37 = vaddq_f32(v34, (float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL));
          v38 = vaddq_f32(v35, (float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL));
          v39 = vaddq_f32(v36, (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL));
          v41 = *(float32x4_t *)(v17 + 192);
          v40 = *(int8x16_t *)(v17 + 208);
          v42 = (float32x4_t)vrev64q_s32((int32x4_t)v31);
          v43 = vaddq_f32(v42, vmulq_f32(v31, vsubq_f32(v41, v38)));
          v44 = vmulq_f32(v31, vsubq_f32(v41, vaddq_f32(v37, (float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL))));
          v45 = vaddq_f32(v42, vmulq_f32(v31, vsubq_f32(v41, v39)));
          v46 = (int32x4_t)vaddq_f32(v42, v44);
          v47 = (float32x4_t)vbslq_s8(v40, (int8x16_t)v43, (int8x16_t)vmulq_f32(v41, (float32x4_t)vrev64q_s32((int32x4_t)v43)));
          v48 = (float32x4_t)vbslq_s8(v40, (int8x16_t)v45, (int8x16_t)vmulq_f32(v41, (float32x4_t)vrev64q_s32((int32x4_t)v45)));
          v49 = (float32x4_t)vbslq_s8(v40, (int8x16_t)v46, (int8x16_t)vmulq_f32(v41, (float32x4_t)vrev64q_s32(v46)));
          v50 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
          v51 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
          v52 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
          v54 = *(float32x4_t *)(v17 + 224);
          v53 = *(float32x4_t *)(v17 + 240);
          v55 = vsubq_f32(v48, vsubq_f32(v51, (float32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(v51, v48))));
          v56 = (int8x16_t)vsubq_f32(v49, vsubq_f32(v52, (float32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(v52, v49))));
          v57 = (int32x4_t)vbslq_s8(v40, (int8x16_t)v43, (int8x16_t)vsubq_f32(v47, vsubq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(v50, v47)))));
          v58 = (int32x4_t)vbslq_s8(v40, (int8x16_t)v45, (int8x16_t)v55);
          v59 = (int32x4_t)vbslq_s8(v40, (int8x16_t)v46, v56);
          v55.i64[0] = v57.i64[0];
          v55.i64[1] = vsubq_f32(v54, (float32x4_t)vextq_s8(*(int8x16_t *)&v5, *(int8x16_t *)&v57, 0xCuLL)).i64[1];
          v43.i64[0] = v58.i64[0];
          v43.i64[1] = vsubq_f32(v54, (float32x4_t)vextq_s8(*(int8x16_t *)&v5, *(int8x16_t *)&v58, 0xCuLL)).i64[1];
          v45.i64[0] = v59.i64[0];
          v45.i64[1] = vsubq_f32(v54, (float32x4_t)vextq_s8(*(int8x16_t *)&v5, *(int8x16_t *)&v59, 0xCuLL)).i64[1];
          v60 = (int64x2_t)vaddq_f32(v41, vmulq_f32(v53, vabsq_f32(v55)));
          v61 = (int64x2_t)vaddq_f32(v41, vmulq_f32(v53, vabsq_f32(v43)));
          v62 = (int64x2_t)vaddq_f32(v41, vmulq_f32(v53, vabsq_f32(v45)));
          v43.i64[0] = v57.i64[0];
          v43.i64[1] = v60.i64[1];
          v45.i64[0] = v58.i64[0];
          v45.i64[1] = v61.i64[1];
          v46.i64[0] = v59.i64[0];
          v46.i64[1] = v62.i64[1];
          v57.i64[1] = vdupq_laneq_s64(v60, 1).u64[0];
          v58.i64[1] = vdupq_laneq_s64(v61, 1).u64[0];
          v59.i64[1] = vdupq_laneq_s64(v62, 1).u64[0];
          v63 = *(float32x4_t *)(v17 + 48);
          v64 = (int8x16_t)vcgtq_f32(v53, (float32x4_t)vrev64q_s32(*(int32x4_t *)(v17 + 32)));
          v65 = vbslq_s8(v40, (int8x16_t)v43, vbslq_s8(v64, (int8x16_t)vrev64q_s32(v57), vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL)));
          v66 = vbslq_s8(v40, (int8x16_t)v45, vbslq_s8(v64, (int8x16_t)vrev64q_s32(v58), vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL)));
          v67 = vbslq_s8(v40, (int8x16_t)v46, vbslq_s8(v64, (int8x16_t)vrev64q_s32(v59), vextq_s8((int8x16_t)v46, (int8x16_t)v46, 4uLL)));
          v68 = (float32x4_t)vextq_s8(v65, v65, 8uLL);
          v69 = (float32x4_t)vextq_s8(v66, v66, 8uLL);
          v70 = (float32x4_t)vextq_s8(v67, v67, 8uLL);
          v71 = vcvtq_f32_s32(vcvtq_s32_f32(v68));
          v72 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
          v73 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
          v65.i64[1] = vsubq_f32(v68, vsubq_f32(v71, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v71, v68), *(int8x16_t *)&v41, (int8x16_t)0))).i64[1];
          v66.i64[1] = vsubq_f32(v69, vsubq_f32(v72, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v72, v69), *(int8x16_t *)&v41, (int8x16_t)0))).i64[1];
          v67.i64[1] = vsubq_f32(v70, vsubq_f32(v73, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v73, v70), *(int8x16_t *)&v41, (int8x16_t)0))).i64[1];
          v75 = *(int8x16_t *)(v17 + 256);
          v74 = *(float32x4_t *)(v17 + 272);
          v76 = (float32x4_t)vandq_s8(v75, v65);
          v77 = (float32x4_t)vandq_s8(v75, v66);
          v78 = (float32x4_t)vandq_s8(v75, v67);
          v79 = vandq_s8((int8x16_t)v74, (int8x16_t)vcgeq_f32(vnegq_f32(v76), v29));
          v80 = vandq_s8((int8x16_t)v74, (int8x16_t)vcgeq_f32(vnegq_f32(v77), v29));
          v81 = vandq_s8((int8x16_t)v74, (int8x16_t)vcgeq_f32(vnegq_f32(v78), v29));
          v82 = *(int8x16_t *)(v17 + 288);
          v83 = *(float32x4_t *)(v17 + 304);
          v84 = (float32x4_t)vbslq_s8(v82, (int8x16_t)v76, v79);
          v85 = (float32x4_t)vbslq_s8(v82, (int8x16_t)v77, v80);
          v86 = (float32x4_t)vbslq_s8(v82, (int8x16_t)v78, v81);
          v87 = vcvtq_f32_s32(vcvtq_s32_f32(v84));
          v88 = vcvtq_f32_s32(vcvtq_s32_f32(v85));
          v89 = vcvtq_f32_s32(vcvtq_s32_f32(v86));
          v90 = (float32x4_t)vbslq_s8(v82, (int8x16_t)vsubq_f32(v84, vsubq_f32(v87, (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v87, v84)))), v79);
          v91 = (float32x4_t)vbslq_s8(v82, (int8x16_t)vsubq_f32(v85, vsubq_f32(v88, (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v88, v85)))), v80);
          v92 = (float32x4_t)vbslq_s8(v82, (int8x16_t)vsubq_f32(v86, vsubq_f32(v89, (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v89, v86)))), v81);
          v93 = (float32x4_t)vbslq_s8(v40, (int8x16_t)v90, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 4uLL), v90));
          v94 = (float32x4_t)vbslq_s8(v40, (int8x16_t)v91, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL), v91));
          v95 = (float32x4_t)vbslq_s8(v40, (int8x16_t)v92, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 4uLL), v92));
          v96 = (float32x4_t)vrev64q_s32((int32x4_t)v63);
          v97 = vmaxq_f32(vminq_f32(vmulq_f32(v63, vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v93), v93)), v96), v53);
          v98 = vmaxq_f32(vminq_f32(vmulq_f32(v63, vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v94), v94)), v96), v53);
          v99 = vmaxq_f32(vminq_f32(vmulq_f32(v63, vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v95), v95)), v96), v53);
          v100 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
          v101 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
          v102 = vcvtq_f32_s32(vcvtq_s32_f32(v99));
          v103 = vsubq_f32(v100, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v100, v97), (int8x16_t)v74, (int8x16_t)0));
          v104 = vsubq_f32(v101, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v101, v98), (int8x16_t)v74, (int8x16_t)0));
          v105 = vsubq_f32(v102, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v102, v99), (int8x16_t)v74, (int8x16_t)0));
          v103.i32[1] = 0.5;
          v104.i32[1] = 0.5;
          v105.i32[1] = 0.5;
          v106 = (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32(v83, v103), (int8x16_t)v103);
          v107 = (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32(v83, v104), (int8x16_t)v104);
          v108 = (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32(v83, v105), (int8x16_t)v105);
          v109 = vaddq_f32(vsubq_f32(v106, v5), v11);
          v110 = vcvtq_s32_f32(v109);
          v109.i64[0] = vaddq_s32(v110, vcgtq_f32(vcvtq_f32_s32(v110), v109)).u64[0];
          v111 = v109.i32[1];
          v112 = a2[13].i32[0];
          v113 = vaddq_f32(vsubq_f32(v107, v5), v11);
          v114 = vcvtq_s32_f32(v113);
          v115 = v109.i32[0];
          v109.i64[0] = vaddq_s32(v114, vcgtq_f32(vcvtq_f32_s32(v114), v113)).u64[0];
          v116 = v115 + v111 * v112;
          v117 = v109.i32[0] + v109.i32[1] * v112;
          v118 = a2[12];
          v119 = vaddq_f32(vsubq_f32(v108, v5), v11);
          v120 = *(float32x4_t *)(*(_QWORD *)&v118 + 16 * v116);
          v121 = vcvtq_s32_f32(v119);
          v119.i64[0] = vaddq_s32(v121, vcgtq_f32(vcvtq_f32_s32(v121), v119)).u64[0];
          v122 = *(float32x4_t *)(*(_QWORD *)&v118 + 16 * v117);
          v123 = *(float32x4_t *)(*(_QWORD *)&v118 + 16 * (v119.i32[0] + v119.i32[1] * v112));
          v125 = *(float32x4_t *)(v17 + 320);
          v124 = *(float32x4_t *)(v17 + 336);
          v126 = vmulq_f32(v120, v125);
          v127 = vmulq_f32(v122, v125);
          v128 = vmulq_f32(v123, v125);
          v129 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))), 0);
          v130 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))), 0);
          v131 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 2), vaddq_f32(v128, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 1))), 0);
          v132 = *(float32x4_t *)(v17 + 64);
          v133 = *(float32x4_t *)(v17 + 80);
          v134 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v129, vmulq_f32(v132, vsubq_f32(v120, v129))), v124), v74);
          v135 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v130, vmulq_f32(v132, vsubq_f32(v122, v130))), v124), v74);
          v136 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v131, vmulq_f32(v132, vsubq_f32(v123, v131))), v124), v74);
          v137 = *(_OWORD *)(v17 + 112);
          v138 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v17 + 96), 0);
          v139 = (int8x16_t)vcgtq_f32(v138, v124);
          v140 = (float32x4_t)vbslq_s8(v139, v134, (int8x16_t)v120);
          v141 = (float32x4_t)vbslq_s8(v139, v135, (int8x16_t)v122);
          v142 = (float32x4_t)vbslq_s8(v139, v136, (int8x16_t)v123);
          v143 = vmulq_f32(v133, v140);
          v144 = vmulq_f32(v133, v141);
          v145 = vmulq_f32(v133, v142);
          v146 = vaddq_f32(v143, (float32x4_t)vextq_s8((int8x16_t)v143, (int8x16_t)v143, 4uLL));
          v147 = vaddq_f32(v144, (float32x4_t)vextq_s8((int8x16_t)v144, (int8x16_t)v144, 4uLL));
          v148 = vaddq_f32(v145, (float32x4_t)vextq_s8((int8x16_t)v145, (int8x16_t)v145, 4uLL));
          v149 = (float32x4_t)vextq_s8((int8x16_t)v140, (int8x16_t)v140, 4uLL);
          v150 = (float32x4_t)vextq_s8((int8x16_t)v141, (int8x16_t)v141, 4uLL);
          v151 = (float32x4_t)vextq_s8((int8x16_t)v142, (int8x16_t)v142, 4uLL);
          v152 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v146, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v146.f32, 1)), 3);
          v153 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v147, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.f32, 1)), 3);
          v154 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v148, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v148.f32, 1)), 3);
          v155 = (float32x4_t)vextq_s8((int8x16_t)v132, (int8x16_t)v132, 4uLL);
          v156 = *(int8x16_t *)(v17 + 352);
          v157 = (int8x16_t)vceqq_f32(v138, v124);
          v158 = (int8x16_t *)(*(_QWORD *)&v7 + v12);
          *v158 = vbslq_s8(v157, (int8x16_t)vaddq_f32(v14, vmulq_n_f32(vsubq_f32(vmulq_laneq_f32(v149, v14, 3), v14), *(float *)&v137)), (int8x16_t)vaddq_f32(v14, vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8(v156, (int8x16_t)v14, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v152, vmulq_f32(v155, vsubq_f32(v149, v152))), v14, 3)), v14), *(float *)&v137)));
          v158[1] = vbslq_s8(v157, (int8x16_t)vaddq_f32(v15, vmulq_n_f32(vsubq_f32(vmulq_laneq_f32(v150, v15, 3), v15), *(float *)&v137)), (int8x16_t)vaddq_f32(v15, vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8(v156, (int8x16_t)v15, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v153, vmulq_f32(v155, vsubq_f32(v150, v153))), v15, 3)), v15), *(float *)&v137)));
          v158[2] = vbslq_s8(v157, (int8x16_t)vaddq_f32(v16, vmulq_n_f32(vsubq_f32(vmulq_laneq_f32(v151, v16, 3), v16), *(float *)&v137)), (int8x16_t)vaddq_f32(v16, vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8(v156, (int8x16_t)v16, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v154, vmulq_f32(v155, vsubq_f32(v151, v154))), v16, 3)), v16), *(float *)&v137)));
          v13 -= 3;
          v12 += 48;
        }
        while (v6 + v13 > 2);
        LODWORD(v159) = -v13;
      }
      if ((int)v159 < v6)
      {
        v159 = v159;
        do
        {
          v160 = *(float32x4_t *)(*(_QWORD *)&v8 + 16 * v159);
          v161 = *(_QWORD *)(a1 + 408);
          v162 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v160, 3), *(float32x4_t *)(v161 + 128));
          v163 = vmulq_f32(vrecpeq_f32(v162), *(float32x4_t *)(v161 + 144));
          v164 = (int8x16_t)vmulq_f32(v163, vrecpsq_f32(v163, v162));
          v165 = *(float32x4_t *)(v161 + 176);
          v166 = vmulq_f32(*(float32x4_t *)v161, vmulq_f32(v160, (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v161 + 160), v164), (int8x16_t)v165)));
          v167 = vaddq_f32(v166, (float32x4_t)vextq_s8((int8x16_t)v166, (int8x16_t)v166, 4uLL));
          v168 = vaddq_f32(v167, (float32x4_t)vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL));
          v170 = *(float32x4_t *)(v161 + 192);
          v169 = *(int8x16_t *)(v161 + 208);
          v171 = (int32x4_t)vaddq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)(v161 + 16)), vmulq_f32(*(float32x4_t *)(v161 + 16), vsubq_f32(v170, v168)));
          v172 = (float32x4_t)vbslq_s8(v169, (int8x16_t)v171, (int8x16_t)vmulq_f32(v170, (float32x4_t)vrev64q_s32(v171)));
          v173 = vcvtq_f32_s32(vcvtq_s32_f32(v172));
          v175 = *(float32x4_t *)(v161 + 224);
          v174 = *(float32x4_t *)(v161 + 240);
          v176 = (int32x4_t)vbslq_s8(v169, (int8x16_t)v171, (int8x16_t)vsubq_f32(v172, vsubq_f32(v173, (float32x4_t)vandq_s8((int8x16_t)v175, (int8x16_t)vcgtq_f32(v173, v172)))));
          v173.i64[0] = v176.i64[0];
          v173.i64[1] = vsubq_f32(v175, (float32x4_t)vextq_s8(*(int8x16_t *)&v5, *(int8x16_t *)&v176, 0xCuLL)).i64[1];
          v177 = (int64x2_t)vaddq_f32(v170, vmulq_f32(v174, vabsq_f32(v173)));
          v173.i64[0] = v176.i64[0];
          v173.i64[1] = v177.i64[1];
          v176.i64[1] = vdupq_laneq_s64(v177, 1).u64[0];
          v178 = vbslq_s8(v169, (int8x16_t)v173, vbslq_s8((int8x16_t)vcgtq_f32(v174, (float32x4_t)vrev64q_s32(*(int32x4_t *)(v161 + 32))), (int8x16_t)vrev64q_s32(v176), vextq_s8((int8x16_t)v173, (int8x16_t)v173, 4uLL)));
          v179 = (float32x4_t)vextq_s8(v178, v178, 8uLL);
          v180 = vcvtq_f32_s32(vcvtq_s32_f32(v179));
          v178.i64[1] = vsubq_f32(v179, vsubq_f32(v180, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v180, v179), *(int8x16_t *)&v170, (int8x16_t)0))).i64[1];
          v181 = *(float32x4_t *)(v161 + 272);
          v182 = (float32x4_t)vandq_s8(*(int8x16_t *)(v161 + 256), v178);
          v183 = vandq_s8((int8x16_t)v181, (int8x16_t)vcgeq_f32(vnegq_f32(v182), v165));
          v184 = *(int8x16_t *)(v161 + 288);
          v185 = (float32x4_t)vbslq_s8(v184, (int8x16_t)v182, v183);
          v186 = vcvtq_f32_s32(vcvtq_s32_f32(v185));
          v187 = (float32x4_t)vbslq_s8(v184, (int8x16_t)vsubq_f32(v185, vsubq_f32(v186, (float32x4_t)vandq_s8((int8x16_t)v181, (int8x16_t)vcgtq_f32(v186, v185)))), v183);
          v188 = (float32x4_t)vbslq_s8(v169, (int8x16_t)v187, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v187, (int8x16_t)v187, 4uLL), v187));
          v189 = vmaxq_f32(vminq_f32(vmulq_f32(*(float32x4_t *)(v161 + 48), vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v188), v188)), (float32x4_t)vrev64q_s32(*(int32x4_t *)(v161 + 48))), v174);
          v190 = vcvtq_f32_s32(vcvtq_s32_f32(v189));
          v191 = vsubq_f32(v190, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v190, v189), (int8x16_t)v181, (int8x16_t)0));
          v191.i32[1] = 0.5;
          v192 = vaddq_f32(vsubq_f32((float32x4_t)vbslq_s8(v169, (int8x16_t)vaddq_f32(*(float32x4_t *)(v161 + 304), v191), (int8x16_t)v191), v5), v11);
          v193 = vcvtq_s32_f32(v192);
          v192.i64[0] = vaddq_s32(v193, vcgtq_f32(vcvtq_f32_s32(v193), v192)).u64[0];
          v194 = *(float32x4_t *)(*(_QWORD *)&a2[12] + 16 * (v192.i32[0] + v192.i32[1] * a2[13].i32[0]));
          v195 = *(float32x4_t *)(v161 + 336);
          v196 = vmulq_f32(v194, *(float32x4_t *)(v161 + 320));
          v197 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v196, 2), vaddq_f32(v196, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v196.f32, 1))), 0);
          v198 = *(float32x4_t *)(v161 + 64);
          v199 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v161 + 96), 0);
          v200 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v199, v195), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v197, vmulq_f32(v198, vsubq_f32(v194, v197))), v195), v181), (int8x16_t)v194);
          v201 = vmulq_f32(*(float32x4_t *)(v161 + 80), v200);
          v202 = vaddq_f32(v201, (float32x4_t)vextq_s8((int8x16_t)v201, (int8x16_t)v201, 4uLL));
          v203 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v202, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v202.f32, 1)), 3);
          v204 = (float32x4_t)vextq_s8((int8x16_t)v200, (int8x16_t)v200, 4uLL);
          *(float32x4_t *)(*(_QWORD *)&v7 + 16 * v159++) = vaddq_f32(v160, vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vceqq_f32(v199, v195), (int8x16_t)vmulq_laneq_f32(v204, v160, 3), vbslq_s8(*(int8x16_t *)(v161 + 352), (int8x16_t)v160, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v203, vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v198, (int8x16_t)v198, 4uLL), vsubq_f32(v204, v203))), v160,
                                                                                               3))),
                                                                 v160),
                                                               COERCE_FLOAT(*(_OWORD *)(v161 + 112))));
        }
        while (v159 < v6);
      }
      ++v4;
      *(_QWORD *)&v7 += v9;
      *(_QWORD *)&v8 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcGradientColorize::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __int128 *v5;

  if (a3 == 1)
  {
    v5 = &HGRectInfinite;
  }
  else
  {
    if (!a3)
      return a4;
    v5 = &HGRectNull;
  }
  return *(_QWORD *)v5;
}

uint64_t HgcGradientColorize::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 1u);
    *(_QWORD *)&a4.var0 = HGRenderer::GetDOD(a2, Input);
  }
  else if (a3)
  {
    *(_QWORD *)&a4.var0 = 0;
  }
  return *(_QWORD *)&a4.var0;
}

void HgcGradientColorize::HgcGradientColorize(HgcGradientColorize *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EB200;
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(int32x4_t *)(v3 + 128) = vdupq_n_s32(0x358637BDu);
  *(int32x4_t *)(v3 + 144) = vdupq_n_s32(0x3F804020u);
  *(_OWORD *)(v3 + 160) = xmmword_1B30514E0;
  *(_OWORD *)(v3 + 176) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3052280;
  *(_OWORD *)(v3 + 208) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 224) = xmmword_1B3051030;
  *(_OWORD *)(v3 + 240) = xmmword_1B3052290;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v3 + 256) = xmmword_1B3051470;
  *(_OWORD *)(v3 + 272) = _Q1;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 304) = xmmword_1B3051880;
  *(_OWORD *)(v3 + 320) = xmmword_1B30522A0;
  *(_QWORD *)(v3 + 336) = 0;
  *(_QWORD *)(v3 + 344) = 0;
  *(_OWORD *)(v3 + 352) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcGradientColorize *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B288F374(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGradientColorize::~HgcGradientColorize(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EB200;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGradientColorize::~HgcGradientColorize(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGradientColorize::SetParameter(HgcGradientColorize *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 7)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcGradientColorize::GetParameter(HgcGradientColorize *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 7)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcColorize::GetProgram(HgcColorize *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000365\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r1.w = dot(r1.xyz, half3(hg_Params[4].xyz));\n"
             "    r2.xyz = mix(half3(hg_Params[0].xyz), half3(hg_Params[1].xyz), r1.www);\n"
             "    r1.xyz = mix(r1.xyz, r2.xyz, half3(hg_Params[2].xyz));\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[3]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3a4870b4:dd71f1cd:5ca4f76a:0c031596\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0005:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000333\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r1.w = dot(r1.xyz, hg_Params[4].xyz);\n"
             "    r2.xyz = mix(hg_Params[0].xyz, hg_Params[1].xyz, r1.www);\n"
             "    r1.xyz = mix(r1.xyz, r2.xyz, hg_Params[2].xyz);\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(r0, r1, hg_Params[3]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=980d7def:0d85c9e4:540ce630:ff0d306b\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0005:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003a9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r1.w = dot(r1.xyz, hg_ProgramLocal4.xyz);\n"
           "    r2.xyz = mix(hg_ProgramLocal0.xyz, hg_ProgramLocal1.xyz, r1.www);\n"
           "    r1.xyz = mix(r1.xyz, r2.xyz, hg_ProgramLocal2.xyz);\n"
           "    r1.w = r0.w;\n"
           "    r1.xyz = r1.xyz*r0.www;\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal3);\n"
           "}\n"
           "//MD5=fded8519:04e80645:c2334220:c7e1904c\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0005:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcColorize::InitProgramDescriptor(HgcColorize *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcColorize_hgc_visible", "//Metal1.0     \n//LEN=0000000208\n[[ visible ]] FragmentOut HgcColorize_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r1.w = dot(r1.xyz, hg_Params[4].xyz);\n"
    "    r2.xyz = mix(hg_Params[0].xyz, hg_Params[1].xyz, r1.www);\n"
    "    r1.xyz = mix(r1.xyz, r2.xyz, hg_Params[2].xyz);\n"
    "    r1.w = r0.w;\n"
    "    r1.xyz = r1.xyz*r0.www;\n"
    "    output.color0 = mix(r0, r1, hg_Params[3]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B288F57C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcColorize");
}

void sub_1B288F58C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B288F68C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B288F6CC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B288F6C4);
}

_QWORD *HgcColorize::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcColorize [hgc1]");
}

uint64_t HgcColorize::BindTexture(HgcColorize *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcColorize::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcColorize::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t *v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 3)
      {
        LODWORD(v41) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = *(float32x4_t *)(v6 + v9);
          v12 = *(float32x4_t *)(v6 + v9 + 16);
          v13 = *(float32x4_t *)(v6 + v9 + 32);
          v14 = *(_QWORD *)(a1 + 408);
          v16 = *(float32x4_t *)(v14 + 64);
          v15 = *(float32x4_t *)(v14 + 80);
          v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v15);
          v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
          v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
          v20 = *(float32x4_t *)(v14 + 96);
          v21 = *(int8x16_t *)(v14 + 112);
          v22 = vmulq_f32(vrecpeq_f32(v17), v20);
          v23 = vmulq_f32(vrecpeq_f32(v18), v20);
          v24 = vmulq_f32(vrecpeq_f32(v19), v20);
          v25 = vmulq_f32(v11, vmulq_f32(v22, vrecpsq_f32(v22, v17)));
          v26 = vmulq_f32(v12, vmulq_f32(v23, vrecpsq_f32(v23, v18)));
          v27 = vmulq_f32(v13, vmulq_f32(v24, vrecpsq_f32(v24, v19)));
          v28 = (int32x4_t)vmulq_f32(v25, v16);
          v29 = (int32x4_t)vmulq_f32(v26, v16);
          v30 = (int32x4_t)vmulq_f32(v16, v27);
          v31 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v28), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL))), (int8x16_t)v25);
          v32 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v29), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL))), (int8x16_t)v26);
          v33 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v30), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL))), (int8x16_t)v27);
          v34 = vsubq_f32(*(float32x4_t *)(v14 + 16), *(float32x4_t *)v14);
          v35 = vsubq_f32(vaddq_f32(*(float32x4_t *)v14, vmulq_laneq_f32(v34, v32, 3)), v32);
          v36 = *(float32x4_t *)(v14 + 32);
          v37 = *(float32x4_t *)(v14 + 48);
          v38 = vaddq_f32(v11, vmulq_f32(v37, vsubq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)v11, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)v11, (int8x16_t)vaddq_f32(vmulq_f32(v36, vsubq_f32(vaddq_f32(*(float32x4_t *)v14, vmulq_laneq_f32(v34, v31, 3)), v31)),
                                                                              v31)),
                                                  v11,
                                                  3)),
                      v11)));
          v39 = vaddq_f32(v13, vmulq_f32(v37, vsubq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)v13, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)v13, (int8x16_t)vaddq_f32(vmulq_f32(v36, vsubq_f32(vaddq_f32(*(float32x4_t *)v14, vmulq_laneq_f32(v34, v33, 3)), v33)),
                                                                              v33)),
                                                  v13,
                                                  3)),
                      v13)));
          v40 = (float32x4_t *)(v5 + v9);
          *v40 = v38;
          v40[1] = vaddq_f32(v12, vmulq_f32(v37, vsubq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)v12, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v21, (int8x16_t)v12, (int8x16_t)vaddq_f32(vmulq_f32(v36, v35), v32)), v12, 3)), v12)));
          v40[2] = v39;
          v10 -= 3;
          v9 += 48;
        }
        while (v4 + v10 > 2);
        LODWORD(v41) = -v10;
      }
      if ((int)v41 < v4)
      {
        v41 = v41;
        do
        {
          v42 = *(float32x4_t *)(v6 + 16 * v41);
          v43 = *(_QWORD *)(a1 + 408);
          v44 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 3), *(float32x4_t *)(v43 + 80));
          v45 = *(int8x16_t *)(v43 + 112);
          v46 = vmulq_f32(vrecpeq_f32(v44), *(float32x4_t *)(v43 + 96));
          v47 = vmulq_f32(v42, vmulq_f32(v46, vrecpsq_f32(v46, v44)));
          v48 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v43 + 64), v47);
          v49 = (float32x4_t)vbslq_s8(v45, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v48), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL))), (int8x16_t)v47);
          *(float32x4_t *)(v5 + 16 * v41++) = vaddq_f32(v42, vmulq_f32(*(float32x4_t *)(v43 + 48), vsubq_f32((float32x4_t)vbslq_s8(v45, (int8x16_t)v42, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v45, (int8x16_t)v42, (int8x16_t)vaddq_f32(vmulq_f32(*(float32x4_t *)(v43 + 32), vsubq_f32(vaddq_f32(*(float32x4_t *)v43, vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v43 + 16), *(float32x4_t *)v43), v49, 3)), v49)), v49)), v42, 3)), v42)));
        }
        while (v41 < v4);
      }
      ++v3;
      v5 += v7;
      v6 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcColorize::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcColorize::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcColorize::HgcColorize(HgcColorize *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EB468;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(int32x4_t *)(v3 + 80) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 96) = xmmword_1B3051BC0;
  *(_OWORD *)(v3 + 112) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B288FBB0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcColorize::~HgcColorize(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EB468;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcColorize::~HgcColorize(this);
  HGObject::operator delete(v1);
}

uint64_t HgcColorize::SetParameter(HgcColorize *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  int32x4_t v11;
  __n128 *v12;
  int32x4_t v13;
  float *v14;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_28;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_28;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == a3.n128_f32[0]
        && v10[2].n128_f32[1] == a3.n128_f32[0]
        && v10[2].n128_f32[2] == a3.n128_f32[0]
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v11.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v10[2] = (__n128)v11;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[8] = a3;
      goto LABEL_28;
    case 3:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[3].n128_f32[0] == a3.n128_f32[0]
        && v12[3].n128_f32[1] == a3.n128_f32[0]
        && v12[3].n128_f32[2] == a3.n128_f32[0]
        && v12[3].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v13 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v12[3] = (__n128)v13;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[9] = a3;
      goto LABEL_28;
    case 4:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[16] == a3.n128_f32[0] && v14[17] == a4 && v14[18] == a5 && v14[19] == a6)
        return 0;
      v14[16] = a3.n128_f32[0];
      v14[17] = a4;
      v14[18] = a5;
      v14[19] = a6;
LABEL_28:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcColorize::GetParameter(HgcColorize *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_7;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_7;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[32];
      a3[1] = v6[33];
      a3[2] = v6[34];
      v4 = v6 + 35;
      goto LABEL_7;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[36];
      a3[1] = v7[37];
      a3[2] = v7[38];
      v4 = v7 + 39;
      goto LABEL_7;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
LABEL_7:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcTint::GetProgram(HgcTint *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000449\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 2.000000000, 0.5000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1.w = dot(r0.xyz, half3(hg_Params[2].xyz));\n"
             "    r2.x = c0.x - r1.w;\n"
             "    r1.xyz = r2.xxx*half3(hg_Params[0].xyz) + -r2.xxx;\n"
             "    r2.xyz = r1.xyz*c0.yyy + c0.xxx;\n"
             "    r1.xyz = r1.www*half3(hg_Params[0].xyz);\n"
             "    r1.xyz = r1.xyz*c0.yyy + -r2.xyz;\n"
             "    r1.w = half(r1.w < c0.z);\n"
             "    r1.xyz = r1.www*r1.xyz + r2.xyz;\n"
             "    r0.xyz = mix(r0.xyz, r1.xyz, half3(hg_Params[1].xyz));\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=04f0bcff:4d38e968:d07fa6e8:57df7249\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0003:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000423\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 2.000000000, 0.5000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1.w = dot(r0.xyz, hg_Params[2].xyz);\n"
             "    r2.x = c0.x - r1.w;\n"
             "    r1.xyz = r2.xxx*hg_Params[0].xyz + -r2.xxx;\n"
             "    r2.xyz = r1.xyz*c0.yyy + c0.xxx;\n"
             "    r1.xyz = r1.www*hg_Params[0].xyz;\n"
             "    r1.xyz = r1.xyz*c0.yyy + -r2.xyz;\n"
             "    r1.w = float(r1.w < c0.z);\n"
             "    r1.xyz = r1.www*r1.xyz + r2.xyz;\n"
             "    r0.xyz = mix(r0.xyz, r1.xyz, hg_Params[1].xyz);\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=c6570594:5405df00:ca65ea1b:4658b6d9\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0003:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000449\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 2.000000000, 0.5000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1.w = dot(r0.xyz, hg_ProgramLocal2.xyz);\n"
           "    r2.x = c0.x - r1.w;\n"
           "    r1.xyz = r2.xxx*hg_ProgramLocal0.xyz + -r2.xxx;\n"
           "    r2.xyz = r1.xyz*c0.yyy + c0.xxx;\n"
           "    r1.xyz = r1.www*hg_ProgramLocal0.xyz;\n"
           "    r1.xyz = r1.xyz*c0.yyy + -r2.xyz;\n"
           "    r1.w = float(r1.w < c0.z);\n"
           "    r1.xyz = r1.www*r1.xyz + r2.xyz;\n"
           "    r0.xyz = mix(r0.xyz, r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    r0.xyz = r0.xyz*r0.www;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=a108dd96:02070503:886bbc19:11741088\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0003:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcTint::InitProgramDescriptor(HgcTint *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTint_hgc_visible", "//Metal1.0     \n//LEN=00000002f4\n[[ visible ]] FragmentOut HgcTint_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 2.000000000, 0.5000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.w = dot(r0.xyz, hg_Params[2].xyz);\n"
    "    r2.x = c0.x - r1.w;\n"
    "    r1.xyz = r2.xxx*hg_Params[0].xyz + -r2.xxx;\n"
    "    r2.xyz = r1.xyz*c0.yyy + c0.xxx;\n"
    "    r1.xyz = r1.www*hg_Params[0].xyz;\n"
    "    r1.xyz = r1.xyz*c0.yyy + -r2.xyz;\n"
    "    r1.w = float(r1.w < c0.z);\n"
    "    r1.xyz = r1.www*r1.xyz + r2.xyz;\n"
    "    r0.xyz = mix(r0.xyz, r1.xyz, hg_Params[1].xyz);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B288FF94()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcTint");
}

void sub_1B288FFA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28900A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28900E4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28900DCLL);
}

_QWORD *HgcTint::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTint [hgc1]");
}

uint64_t HgcTint::BindTexture(HgcTint *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcTint::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcTint::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t *v72;
  uint64_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  int8x16_t v90;
  float32x4_t v91;
  float32x4_t v92;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v73) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 32);
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v13 = *(float32x4_t *)(v6 + v10);
          v14 = *(float32x4_t *)(v6 + v10 + 16);
          v15 = *(_QWORD *)(a1 + 408);
          v17 = *(float32x4_t *)(v15 + 32);
          v16 = *(float32x4_t *)(v15 + 48);
          v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v16);
          v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v16);
          v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v16);
          v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v16);
          v22 = *(float32x4_t *)(v15 + 64);
          v23 = *(int8x16_t *)(v15 + 80);
          v24 = vmulq_f32(vrecpeq_f32(v18), v22);
          v25 = vmulq_f32(vrecpeq_f32(v19), v22);
          v26 = vmulq_f32(vrecpeq_f32(v20), v22);
          v27 = vmulq_f32(vrecpeq_f32(v21), v22);
          v28 = vandq_s8(v23, (int8x16_t)vmulq_f32(v24, vrecpsq_f32(v24, v18)));
          v29 = vandq_s8(v23, (int8x16_t)vmulq_f32(v25, vrecpsq_f32(v25, v19)));
          v31 = *(float32x4_t *)(v15 + 96);
          v30 = *(int8x16_t *)(v15 + 112);
          v32 = vmulq_f32(v11, (float32x4_t)vorrq_s8(v28, (int8x16_t)v31));
          v33 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v29, (int8x16_t)v31));
          v34 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)vmulq_f32(v26, vrecpsq_f32(v26, v20))), (int8x16_t)v31));
          v35 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v23, (int8x16_t)vmulq_f32(v27, vrecpsq_f32(v27, v21))), (int8x16_t)v31));
          v36 = (int32x4_t)vmulq_f32(v17, v32);
          v37 = (int32x4_t)vmulq_f32(v17, v33);
          v38 = (int32x4_t)vmulq_f32(v17, v34);
          v39 = (int32x4_t)vmulq_f32(v17, v35);
          v40 = vaddq_f32((float32x4_t)vrev64q_s32(v36), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL)));
          v41 = vaddq_f32((float32x4_t)vrev64q_s32(v37), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL)));
          v42 = vaddq_f32((float32x4_t)vrev64q_s32(v38), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL)));
          v43 = vaddq_f32((float32x4_t)vrev64q_s32(v39), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL)));
          v44 = vsubq_f32(v31, v40);
          v45 = vsubq_f32(v31, v41);
          v46 = vsubq_f32(v31, v42);
          v47 = vsubq_f32(v31, v43);
          v48 = *(float32x4_t *)(v15 + 16);
          v49 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v40, (int8x16_t)vsubq_f32(vmulq_laneq_f32(*(float32x4_t *)v15, v44, 3), (float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 3)));
          v50 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v41, (int8x16_t)vsubq_f32(vmulq_laneq_f32(*(float32x4_t *)v15, v45, 3), (float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 3)));
          v51 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v42, (int8x16_t)vsubq_f32(vmulq_laneq_f32(*(float32x4_t *)v15, v46, 3), (float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 3)));
          v52 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v43, (int8x16_t)vsubq_f32(vmulq_laneq_f32(*(float32x4_t *)v15, v47, 3), (float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 3)));
          v53 = *(float32x4_t *)(v15 + 128);
          v54 = *(float32x4_t *)(v15 + 144);
          v55 = vaddq_f32(v53, vmulq_f32(v54, v49));
          v56 = vaddq_f32(v53, vmulq_f32(v54, v50));
          v57 = vaddq_f32(v53, vmulq_f32(v54, v51));
          v58 = (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v15, v52, 3);
          v59 = vaddq_f32(v53, vmulq_f32(v54, v52));
          v60 = (int8x16_t)vsubq_f32(vmulq_laneq_f32((float32x4_t)vbslq_s8(v30, (int8x16_t)v40, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v15, v49, 3)), v54, 2), v55);
          v61 = (int8x16_t)vsubq_f32(vmulq_laneq_f32((float32x4_t)vbslq_s8(v30, (int8x16_t)v41, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v15, v50, 3)), v54, 2), v56);
          v62 = (int8x16_t)vsubq_f32(vmulq_laneq_f32((float32x4_t)vbslq_s8(v30, (int8x16_t)v42, (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v15, v51, 3)), v54, 2), v57);
          v63 = (int8x16_t)vsubq_f32(vmulq_laneq_f32((float32x4_t)vbslq_s8(v30, (int8x16_t)v43, v58), v54, 2), v59);
          v64 = (float32x4_t)vbslq_s8(v30, vandq_s8((int8x16_t)v53, (int8x16_t)vcgtq_f32(v54, (float32x4_t)vbslq_s8(v30, (int8x16_t)v40, v60))), v60);
          v65 = (float32x4_t)vbslq_s8(v30, vandq_s8((int8x16_t)v53, (int8x16_t)vcgtq_f32(v54, (float32x4_t)vbslq_s8(v30, (int8x16_t)v41, v61))), v61);
          v66 = (float32x4_t)vbslq_s8(v30, vandq_s8((int8x16_t)v53, (int8x16_t)vcgtq_f32(v54, (float32x4_t)vbslq_s8(v30, (int8x16_t)v42, v62))), v62);
          v67 = (float32x4_t)vbslq_s8(v30, vandq_s8((int8x16_t)v53, (int8x16_t)vcgtq_f32(v54, (float32x4_t)vbslq_s8(v30, (int8x16_t)v43, v63))), v63);
          v68 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v32, (int8x16_t)vaddq_f32(v32, vmulq_f32(v48, vsubq_f32(vaddq_f32(v55, vmulq_laneq_f32(v64, v64, 3)), v32))));
          v69 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v33, (int8x16_t)vaddq_f32(v33, vmulq_f32(v48, vsubq_f32(vaddq_f32(v56, vmulq_laneq_f32(v65, v65, 3)), v33))));
          v70 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v34, (int8x16_t)vaddq_f32(v34, vmulq_f32(v48, vsubq_f32(vaddq_f32(v57, vmulq_laneq_f32(v66, v66, 3)), v34))));
          v71 = (float32x4_t)vbslq_s8(v30, (int8x16_t)v35, (int8x16_t)vaddq_f32(v35, vmulq_f32(v48, vsubq_f32(vaddq_f32(v59, vmulq_laneq_f32(v67, v67, 3)), v35))));
          v72 = (int8x16_t *)(v5 + v10);
          v72[-2] = vbslq_s8(v30, (int8x16_t)v32, (int8x16_t)vmulq_laneq_f32(v68, v68, 3));
          v72[-1] = vbslq_s8(v30, (int8x16_t)v33, (int8x16_t)vmulq_laneq_f32(v69, v69, 3));
          *v72 = vbslq_s8(v30, (int8x16_t)v34, (int8x16_t)vmulq_laneq_f32(v70, v70, 3));
          v72[1] = vbslq_s8(v30, (int8x16_t)v35, (int8x16_t)vmulq_laneq_f32(v71, v71, 3));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v73) = -v9;
      }
      if ((int)v73 < v4)
      {
        v73 = v73;
        do
        {
          v74 = *(float32x4_t *)(v6 + 16 * v73);
          v75 = *(_QWORD *)(a1 + 408);
          v76 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 3), *(float32x4_t *)(v75 + 48));
          v77 = vmulq_f32(vrecpeq_f32(v76), *(float32x4_t *)(v75 + 64));
          v78 = vandq_s8(*(int8x16_t *)(v75 + 80), (int8x16_t)vmulq_f32(v77, vrecpsq_f32(v77, v76)));
          v79 = *(float32x4_t *)(v75 + 96);
          v80 = *(int8x16_t *)(v75 + 112);
          v81 = vmulq_f32(v74, (float32x4_t)vorrq_s8(v78, (int8x16_t)v79));
          v82 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v75 + 32), v81);
          v83 = vaddq_f32((float32x4_t)vrev64q_s32(v82), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL)));
          v84 = vsubq_f32(v79, v83);
          v85 = (float32x4_t)vbslq_s8(v80, (int8x16_t)v83, (int8x16_t)vsubq_f32(vmulq_laneq_f32(*(float32x4_t *)v75, v84, 3), (float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 3)));
          v86 = *(float32x4_t *)(v75 + 128);
          v87 = *(float32x4_t *)(v75 + 144);
          v88 = (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)v75, v85, 3);
          v89 = vaddq_f32(v86, vmulq_f32(v87, v85));
          v90 = (int8x16_t)vsubq_f32(vmulq_laneq_f32((float32x4_t)vbslq_s8(v80, (int8x16_t)v83, v88), v87, 2), v89);
          v91 = (float32x4_t)vbslq_s8(v80, vandq_s8((int8x16_t)v86, (int8x16_t)vcgtq_f32(v87, (float32x4_t)vbslq_s8(v80, (int8x16_t)v83, v90))), v90);
          v92 = (float32x4_t)vbslq_s8(v80, (int8x16_t)v81, (int8x16_t)vaddq_f32(v81, vmulq_f32(*(float32x4_t *)(v75 + 16), vsubq_f32(vaddq_f32(v89, vmulq_laneq_f32(v91, v91, 3)), v81))));
          *(int8x16_t *)(v5 + 16 * v73++) = vbslq_s8(v80, (int8x16_t)v81, (int8x16_t)vmulq_laneq_f32(v92, v92, 3));
        }
        while (v73 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcTint::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcTint::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcTint::HgcTint(HgcTint *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EB6D0;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(int32x4_t *)(v3 + 48) = vdupq_n_s32(0x358637BDu);
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x3F804020u);
  *(_OWORD *)(v3 + 80) = xmmword_1B30514E0;
  *(_OWORD *)(v3 + 96) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 112) = xmmword_1B3050F70;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v3 + 128) = _Q0;
  *(_OWORD *)(v3 + 144) = xmmword_1B30522E0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2890714(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcTint::~HgcTint(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EB6D0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40C3A7E6FCLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcTint::~HgcTint(this);
  HGObject::operator delete(v1);
}

uint64_t HgcTint::SetParameter(HgcTint *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int32x4_t v10;

  switch((_DWORD)a2)
  {
    case 2:
      v8 = *((_QWORD *)this + 51);
      if (*(float *)(v8 + 32) != a3.n128_f32[0]
        || *(float *)(v8 + 36) != a4
        || *(float *)(v8 + 40) != a5
        || *(float *)(v8 + 44) != a6)
      {
        *(_DWORD *)(v8 + 32) = a3.n128_u32[0];
        *(float *)(v8 + 36) = a4;
        *(float *)(v8 + 40) = a5;
        *(float *)(v8 + 44) = a6;
        goto LABEL_19;
      }
      return 0;
    case 1:
      v9 = *((_QWORD *)this + 51);
      if (*(float *)(v9 + 16) != a3.n128_f32[0]
        || *(float *)(v9 + 20) != a3.n128_f32[0]
        || *(float *)(v9 + 24) != a3.n128_f32[0]
        || *(float *)(v9 + 28) != 0.0)
      {
        v10 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
        v10.i32[2] = a3.n128_u32[0];
        a3.n128_f32[1] = a4;
        *(int32x4_t *)(v9 + 16) = v10;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        *(__n128 *)(v9 + 160) = a3;
        goto LABEL_19;
      }
      return 0;
    case 0:
      v7 = *((_QWORD *)this + 51);
      if (*(float *)v7 != a3.n128_f32[0]
        || *(float *)(v7 + 4) != a4
        || *(float *)(v7 + 8) != a5
        || *(float *)(v7 + 12) != a6)
      {
        *(_DWORD *)v7 = a3.n128_u32[0];
        *(float *)(v7 + 4) = a4;
        *(float *)(v7 + 8) = a5;
        *(float *)(v7 + 12) = a6;
LABEL_19:
        HGNode::ClearBits((HGNode *)this, a2, a7);
        return 1;
      }
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcTint::GetParameter(HgcTint *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t result;

  switch(a2)
  {
    case 2:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[8];
      a3[1] = v5[9];
      a3[2] = v5[10];
      v4 = v5 + 11;
      goto LABEL_7;
    case 1:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[40];
      a3[1] = v6[41];
      a3[2] = v6[42];
      v4 = v6 + 43;
      goto LABEL_7;
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
LABEL_7:
      result = 0;
      a3[3] = *v4;
      return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcBadTVNoise::GetProgram(HgcBadTVNoise *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000c0a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, 0.5000000000, -1.000000000, 0.000000000);\n"
             "    const half4 c1 = half4(9.999999975e-07, 3.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[3]);\n"
             "    s1.y = s0.x + hg_Params[6].y;\n"
             "    s0.y = float(c0.y)*hg_Params[9].x + s0.x;\n"
             "    s0.z = s0.y/hg_Params[9].x;\n"
             "    s0.w = floor(s0.z);\n"
             "    s0.w = -s0.w*hg_Params[9].x + s0.y;\n"
             "    s0.z = float(c0.y);\n"
             "    s0.xy = s0.zw + hg_Params[13].xy;\n"
             "    s0.xy = s0.xy*hg_Params[13].zw;\n"
             "    s1.x = (float) hg_Texture0.sample(hg_Sampler0, s0.xy).x;\n"
             "    s1.w = dot(frag._texCoord0, hg_Params[5]);\n"
             "    s1.z = dot(frag._texCoord0, hg_Params[4]);\n"
             "    r0.z = half(s1.x)*c0.x + c0.z;\n"
             "    r0.y = dot(half4(frag._texCoord0), half4(hg_Params[2]));\n"
             "    s1.x = float(r0.z)*hg_Params[8].x + float(r0.y);\n"
             "    r0.yzw = c0.www;\n"
             "    r0.x = half(hg_Params[11].x);\n"
             "    s0 = s1 - float4(r0);\n"
             "    s2 = s1 + float4(r0);\n"
             "    s3.x = dot(s0, hg_Params[0]);\n"
             "    s3.y = dot(s0, hg_Params[1]);\n"
             "    s3.xy = s3.xy + hg_Params[14].xy;\n"
             "    s3.xy = s3.xy*hg_Params[14].zw;\n"
             "    r0.z = (half) hg_Texture1.sample(hg_Sampler1, s3.xy).z;\n"
             "    r0.w = dot(half4(s1), half4(hg_Params[1]));\n"
             "    r0.y = dot(half4(s2), half4(hg_Params[1]));\n"
             "    r0.x = dot(half4(s2), half4(hg_Params[0]));\n"
             "    s1.x = dot(s1, hg_Params[0]);\n"
             "    s1.y = float(r0.w);\n"
             "    s0.xy = s1.xy + hg_Params[14].xy;\n"
             "    s0.xy = s0.xy*hg_Params[14].zw;\n"
             "    r1.yw = (half2) hg_Texture1.sample(hg_Sampler1, s0.xy).yw;\n"
             "    s3.xy = float2(r0.xy) + hg_Params[14].xy;\n"
             "    s3.xy = s3.xy*hg_Params[14].zw;\n"
             "    r0.x = (half) hg_Texture1.sample(hg_Sampler1, s3.xy).x;\n"
             "    r0.y = r1.y;\n"
             "    r2.x = fmax(r1.w, c1.x);\n"
             "    s1.xy = s1.xy + hg_Params[15].xy;\n"
             "    s1.xy = s1.xy*hg_Params[15].zw;\n"
             "    r1.xyz = (half3) hg_Texture2.sample(hg_Sampler2, s1.xy).xyz;\n"
             "    r2.xyz = r0.xyz/r2.xxx;\n"
             "    r2.xyz = r1.xyz*c0.xxx + r2.xyz;\n"
             "    r1.x = r0.w*half(hg_Params[10].y);\n"
             "    r1.x = fract(r1.x);\n"
             "    r1.x = clamp(r1.x*half(hg_Params[10].z) + -half(hg_Params[10].x), 0.00000h, 1.00000h);\n"
             "    r1.y = -r1.x - r1.x;\n"
             "    r2.xyz = r2.xyz + c0.zzz;\n"
             "    r2.w = r1.w;\n"
             "    r2.w = dot(r2, half4(hg_Params[12]));\n"
             "    r1.x = r1.x*r1.x;\n"
             "    r1.y = r1.y + c1.y;\n"
             "    r1.x = r1.x*r1.y;\n"
             "    r1.x = mix(half(hg_Params[10].w), -c0.z, r1.x);\n"
             "    r2.xyz = mix(r2.www, r2.xyz, half3(hg_Params[7].xyz));\n"
             "    s2.xyz = float3(r2.xyz)*float3(r1.xxx);\n"
             "    output.color0.xyz = float3(r1.www)*s2.xyz;\n"
             "    output.color0.w = float(r1.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=498cabae:86511759:b43e45ef:926b0e9e\n"
             "//SIG=00400000:00000000:00000000:00000007:0002:0010:0007:0000:0000:0000:0002:0000:0001:03:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000b11\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, 0.5000000000, -1.000000000, 0.000000000);\n"
             "    const float4 c1 = float4(9.999999975e-07, 3.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[3]);\n"
             "    r1.y = r0.x + hg_Params[6].y;\n"
             "    r0.y = c0.y*hg_Params[9].x + r0.x;\n"
             "    r0.z = r0.y/hg_Params[9].x;\n"
             "    r0.w = floor(r0.z);\n"
             "    r0.w = -r0.w*hg_Params[9].x + r0.y;\n"
             "    r0.z = c0.y;\n"
             "    r0.xy = r0.zw + hg_Params[13].xy;\n"
             "    r0.xy = r0.xy*hg_Params[13].zw;\n"
             "    r1.x = hg_Texture0.sample(hg_Sampler0, r0.xy).x;\n"
             "    r1.w = dot(frag._texCoord0, hg_Params[5]);\n"
             "    r1.z = dot(frag._texCoord0, hg_Params[4]);\n"
             "    r0.z = r1.x*c0.x + c0.z;\n"
             "    r0.y = dot(frag._texCoord0, hg_Params[2]);\n"
             "    r1.x = r0.z*hg_Params[8].x + r0.y;\n"
             "    r0.yzw = c0.www;\n"
             "    r0.x = hg_Params[11].x;\n"
             "    r2 = r1 - r0;\n"
             "    r0 = r1 + r0;\n"
             "    r3.x = dot(r2, hg_Params[0]);\n"
             "    r3.y = dot(r2, hg_Params[1]);\n"
             "    r3.xy = r3.xy + hg_Params[14].xy;\n"
             "    r3.xy = r3.xy*hg_Params[14].zw;\n"
             "    r3.z = hg_Texture1.sample(hg_Sampler1, r3.xy).z;\n"
             "    r3.w = dot(r1, hg_Params[1]);\n"
             "    r3.y = dot(r0, hg_Params[1]);\n"
             "    r3.x = dot(r0, hg_Params[0]);\n"
             "    r1.x = dot(r1, hg_Params[0]);\n"
             "    r1.y = r3.w;\n"
             "    r2.xy = r1.xy + hg_Params[14].xy;\n"
             "    r2.xy = r2.xy*hg_Params[14].zw;\n"
             "    r2.yw = hg_Texture1.sample(hg_Sampler1, r2.xy).yw;\n"
             "    r0.xy = r3.xy + hg_Params[14].xy;\n"
             "    r0.xy = r0.xy*hg_Params[14].zw;\n"
             "    r3.x = hg_Texture1.sample(hg_Sampler1, r0.xy).x;\n"
             "    r3.y = r2.y;\n"
             "    r0.x = fmax(r2.w, c1.x);\n"
             "    r1.xy = r1.xy + hg_Params[15].xy;\n"
             "    r1.xy = r1.xy*hg_Params[15].zw;\n"
             "    r2.xyz = hg_Texture2.sample(hg_Sampler2, r1.xy).xyz;\n"
             "    r0.xyz = r3.xyz/r0.xxx;\n"
             "    r0.xyz = r2.xyz*c0.xxx + r0.xyz;\n"
             "    r2.x = r3.w*hg_Params[10].y;\n"
             "    r2.x = fract(r2.x);\n"
             "    r2.x = clamp(r2.x*hg_Params[10].z + -hg_Params[10].x, 0.00000f, 1.00000f);\n"
             "    r2.y = -r2.x - r2.x;\n"
             "    r0.xyz = r0.xyz + c0.zzz;\n"
             "    r0.w = r2.w;\n"
             "    r0.w = dot(r0, hg_Params[12]);\n"
             "    r2.x = r2.x*r2.x;\n"
             "    r2.y = r2.y + c1.y;\n"
             "    r2.x = r2.x*r2.y;\n"
             "    r2.x = mix(hg_Params[10].w, -c0.z, r2.x);\n"
             "    r0.xyz = mix(r0.www, r0.xyz, hg_Params[7].xyz);\n"
             "    r0.xyz = r0.xyz*r2.xxx;\n"
             "    output.color0.xyz = r2.www*r0.xyz;\n"
             "    output.color0.w = r2.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=0c2451b2:c060efc8:22fe2a90:433534a4\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:0010:0004:0000:0000:0000:0002:0000:0001:03:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000ce7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "uniform highp vec4 hg_ProgramLocal13;\n"
           "uniform highp vec4 hg_ProgramLocal14;\n"
           "uniform highp vec4 hg_ProgramLocal15;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(2.000000000, 0.5000000000, -1.000000000, 0.000000000);\n"
           "    const highp vec4 c1 = vec4(9.999999975e-07, 3.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal3);\n"
           "    r1.y = r0.x + hg_ProgramLocal6.y;\n"
           "    r0.y = c0.y*hg_ProgramLocal9.x + r0.x;\n"
           "    r0.z = r0.y/hg_ProgramLocal9.x;\n"
           "    r0.w = floor(r0.z);\n"
           "    r0.w = -r0.w*hg_ProgramLocal9.x + r0.y;\n"
           "    r0.z = c0.y;\n"
           "    r0.xy = r0.zw + hg_ProgramLocal13.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal13.zw;\n"
           "    r1.x = texture2D(hg_Texture0, r0.xy).x;\n"
           "    r1.w = dot(hg_TexCoord0, hg_ProgramLocal5);\n"
           "    r1.z = dot(hg_TexCoord0, hg_ProgramLocal4);\n"
           "    r0.z = r1.x*c0.x + c0.z;\n"
           "    r0.y = dot(hg_TexCoord0, hg_ProgramLocal2);\n"
           "    r1.x = r0.z*hg_ProgramLocal8.x + r0.y;\n"
           "    r0.yzw = c0.www;\n"
           "    r0.x = hg_ProgramLocal11.x;\n"
           "    r2 = r1 - r0;\n"
           "    r0 = r1 + r0;\n"
           "    r3.x = dot(r2, hg_ProgramLocal0);\n"
           "    r3.y = dot(r2, hg_ProgramLocal1);\n"
           "    r3.xy = r3.xy + hg_ProgramLocal14.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal14.zw;\n"
           "    r3.z = texture2D(hg_Texture1, r3.xy).z;\n"
           "    r3.w = dot(r1, hg_ProgramLocal1);\n"
           "    r3.y = dot(r0, hg_ProgramLocal1);\n"
           "    r3.x = dot(r0, hg_ProgramLocal0);\n"
           "    r1.x = dot(r1, hg_ProgramLocal0);\n"
           "    r1.y = r3.w;\n"
           "    r2.xy = r1.xy + hg_ProgramLocal14.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal14.zw;\n"
           "    r2.yw = texture2D(hg_Texture1, r2.xy).yw;\n"
           "    r0.xy = r3.xy + hg_ProgramLocal14.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal14.zw;\n"
           "    r3.x = texture2D(hg_Texture1, r0.xy).x;\n"
           "    r3.y = r2.y;\n"
           "    r0.x = max(r2.w, c1.x);\n"
           "    r1.xy = r1.xy + hg_ProgramLocal15.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal15.zw;\n"
           "    r2.xyz = texture2D(hg_Texture2, r1.xy).xyz;\n"
           "    r0.xyz = r3.xyz/r0.xxx;\n"
           "    r0.xyz = r2.xyz*c0.xxx + r0.xyz;\n"
           "    r2.x = r3.w*hg_ProgramLocal10.y;\n"
           "    r2.x = fract(r2.x);\n"
           "    r2.x = clamp(r2.x*hg_ProgramLocal10.z + -hg_ProgramLocal10.x, 0.00000, 1.00000);\n"
           "    r2.y = -r2.x - r2.x;\n"
           "    r0.xyz = r0.xyz + c0.zzz;\n"
           "    r0.w = r2.w;\n"
           "    r0.w = dot(r0, hg_ProgramLocal12);\n"
           "    r2.x = r2.x*r2.x;\n"
           "    r2.y = r2.y + c1.y;\n"
           "    r2.x = r2.x*r2.y;\n"
           "    r2.x = mix(hg_ProgramLocal10.w, -c0.z, r2.x);\n"
           "    r0.xyz = mix(r0.www, r0.xyz, hg_ProgramLocal7.xyz);\n"
           "    r0.xyz = r0.xyz*r2.xxx;\n"
           "    gl_FragColor.xyz = r2.www*r0.xyz;\n"
           "    gl_FragColor.w = r2.w;\n"
           "}\n"
           "//MD5=03a35758:837e8af4:ecd5aa3b:2dbff166\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:0010:0004:0000:0000:0000:0000:0000:0001:03:0:1:0\n";
  }
}

void HgcBadTVNoise::InitProgramDescriptor(HgcBadTVNoise *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBadTVNoise_hgc_visible", "//Metal1.0     \n//LEN=00000009fb\n[[ visible ]] FragmentOut HgcBadTVNoise_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1, \n    texture2d< float > hg_Texture2, \n    sampler hg_Sampler2,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(2.000000000, 0.5000000000, -1.000000000, 0.000000000);\n"
    "    const float4 c1 = float4(9.999999975e-07, 3.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = dot(texCoord0, hg_Params[3]);\n"
    "    r1.y = r0.x + hg_Params[6].y;\n"
    "    r0.y = c0.y*hg_Params[9].x + r0.x;\n"
    "    r0.z = r0.y/hg_Params[9].x;\n"
    "    r0.w = floor(r0.z);\n"
    "    r0.w = -r0.w*hg_Params[9].x + r0.y;\n"
    "    r0.z = c0.y;\n"
    "    r0.xy = r0.zw + hg_Params[13].xy;\n"
    "    r0.xy = r0.xy*hg_Params[13].zw;\n"
    "    r1.x = hg_Texture0.sample(hg_Sampler0, r0.xy).x;\n"
    "    r1.w = dot(texCoord0, hg_Params[5]);\n"
    "    r1.z = dot(texCoord0, hg_Params[4]);\n"
    "    r0.z = r1.x*c0.x + c0.z;\n"
    "    r0.y = dot(texCoord0, hg_Params[2]);\n"
    "    r1.x = r0.z*hg_Params[8].x + r0.y;\n"
    "    r0.yzw = c0.www;\n"
    "    r0.x = hg_Params[11].x;\n"
    "    r2 = r1 - r0;\n"
    "    r0 = r1 + r0;\n"
    "    r3.x = dot(r2, hg_Params[0]);\n"
    "    r3.y = dot(r2, hg_Params[1]);\n"
    "    r3.xy = r3.xy + hg_Params[14].xy;\n"
    "    r3.xy = r3.xy*hg_Params[14].zw;\n"
    "    r3.z = hg_Texture1.sample(hg_Sampler1, r3.xy).z;\n"
    "    r3.w = dot(r1, hg_Params[1]);\n"
    "    r3.y = dot(r0, hg_Params[1]);\n"
    "    r3.x = dot(r0, hg_Params[0]);\n"
    "    r1.x = dot(r1, hg_Params[0]);\n"
    "    r1.y = r3.w;\n"
    "    r2.xy = r1.xy + hg_Params[14].xy;\n"
    "    r2.xy = r2.xy*hg_Params[14].zw;\n"
    "    r2.yw = hg_Texture1.sample(hg_Sampler1, r2.xy).yw;\n"
    "    r0.xy = r3.xy + hg_Params[14].xy;\n"
    "    r0.xy = r0.xy*hg_Params[14].zw;\n"
    "    r3.x = hg_Texture1.sample(hg_Sampler1, r0.xy).x;\n"
    "    r3.y = r2.y;\n"
    "    r0.x = fmax(r2.w, c1.x);\n"
    "    r1.xy = r1.xy + hg_Params[15].xy;\n"
    "    r1.xy = r1.xy*hg_Params[15].zw;\n"
    "    r2.xyz = hg_Texture2.sample(hg_Sampler2, r1.xy).xyz;\n"
    "    r0.xyz = r3.xyz/r0.xxx;\n"
    "    r0.xyz = r2.xyz*c0.xxx + r0.xyz;\n"
    "    r2.x = r3.w*hg_Params[10].y;\n"
    "    r2.x = fract(r2.x);\n"
    "    r2.x = clamp(r2.x*hg_Params[10].z + -hg_Params[10].x, 0.00000f, 1.00000f);\n"
    "    r2.y = -r2.x - r2.x;\n"
    "    r0.xyz = r0.xyz + c0.zzz;\n"
    "    r0.w = r2.w;\n"
    "    r0.w = dot(r0, hg_Params[12]);\n"
    "    r2.x = r2.x*r2.x;\n"
    "    r2.y = r2.y + c1.y;\n"
    "    r2.x = r2.x*r2.y;\n"
    "    r2.x = mix(hg_Params[10].w, -c0.z, r2.x);\n"
    "    r0.xyz = mix(r0.www, r0.xyz, hg_Params[7].xyz);\n"
    "    r0.xyz = r0.xyz*r2.xxx;\n"
    "    output.color0.xyz = r2.www*r0.xyz;\n"
    "    output.color0.w = r2.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2890A00()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBadTVNoise");
}

void sub_1B2890A10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30520C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2890C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2890D00()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2890CF8);
}

_QWORD *HgcBadTVNoise::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBadTVNoise [hgc1]");
}

uint64_t HgcBadTVNoise::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  void (*v9)(uint64_t, uint64_t, __n128, __n128, __n128, __n128);
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;

  if (a3 == 2)
  {
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46);
    v7.n128_f32[0] = (float)*(int *)(a2 + 240);
    v8.n128_f32[0] = (float)*(int *)(a2 + 244);
    if (v10)
    {
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
    }
    v13 = a2;
    v14 = 15;
  }
  else if (a3 == 1)
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46);
    v7.n128_f32[0] = (float)*(int *)(a2 + 240);
    v8.n128_f32[0] = (float)*(int *)(a2 + 244);
    if (v11)
    {
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
    }
    v13 = a2;
    v14 = 14;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46);
    v7.n128_f32[0] = (float)*(int *)(a2 + 240);
    v8.n128_f32[0] = (float)*(int *)(a2 + 244);
    if (v4)
    {
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
      v9 = *(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
    }
    v13 = a2;
    v14 = 13;
  }
  v9(v13, v14, v7, v8, v5, v6);
  return 0;
}

uint64_t HgcBadTVNoise::Bind(HgcBadTVNoise *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HgcBadTVNoise *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcBadTVNoise::RenderTile(HgcBadTVNoise *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  uint64_t v49;
  float32x4_t v50;
  uint64_t v51;
  int32x4_t v52;
  float32x2_t v53;
  float32x4_t *v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  int8x16_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float32x4_t v109;
  uint64_t v110;
  float32x4_t v111;
  uint64_t v112;
  int32x4_t v113;
  float32x2_t v114;
  float32x4_t *v115;
  float32x4_t v116;
  int8x16_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x4_t *v120;
  float32x4_t v121;
  int8x16_t v122;
  float32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  int32x4_t v126;
  int8x16_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  float32x4_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  float32x4_t v151;
  float32x4_t v152;
  int32x4_t v153;
  float32x2_t v154;
  float32x4_t *v155;
  float32x4_t v156;
  int8x16_t v157;
  float32x4_t v158;
  int32x4_t v159;
  float32x2_t v160;
  float32x4_t *v161;
  float32x4_t v162;
  int8x16_t v163;
  int32x4_t v164;
  float32x4_t *v165;
  float32x4_t v166;
  int8x16_t v167;
  int32x4_t v168;
  float32x4_t *v169;
  float32x4_t v170;
  int8x16_t v171;
  float32x4_t v172;
  int32x4_t v173;
  float32x4_t v174;
  int32x4_t v175;
  float32x4_t v176;
  int32x4_t v177;
  float32x4_t v178;
  int32x4_t v179;
  uint64_t v180;
  uint64_t v181;
  int32x4_t v182;
  float32x2_t v183;
  float32x4_t *v184;
  float32x4_t v185;
  int8x16_t v186;
  int32x4_t v187;
  float32x2_t v188;
  float32x4_t *v189;
  float32x4_t v190;
  int8x16_t v191;
  float32x4_t v192;
  int32x4_t v193;
  float32x4_t v194;
  int32x4_t v195;
  int8x16_t v196;
  int8x16_t v197;
  float32x4_t v198;
  float32x4_t v199;
  int32x2_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  int32x4_t v213;
  float32x4_t v214;
  int8x16_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  int8x16_t v221;
  int8x16_t v222;
  float32x4_t v223;
  float32x4_t v224;
  int8x16_t v225;
  int8x16_t v226;
  float32x4_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  float32x4_t v232;
  float32x4_t v233;
  int8x16_t v234;
  int8x16_t v235;
  float32x4_t v236;
  float32x4_t v237;
  int8x16_t v238;
  float32x4_t v239;
  float32x4_t v240;
  int8x16_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  int8x16_t *v245;
  uint64_t v246;
  int8x16_t v247;
  int8x16_t v248;
  float32x4_t v249;
  int8x16_t v250;
  int8x16_t v251;
  float32x4_t v252;
  int8x16_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  int8x16_t v259;
  float32x4_t v260;
  int8x16_t v261;
  uint64_t v262;
  float32x4_t v263;
  uint64_t v264;
  int32x4_t v265;
  float32x2_t v266;
  float32x4_t *v267;
  float32x4_t v268;
  int8x16_t v269;
  float32x4_t v270;
  int32x4_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  float32x4_t v276;
  int8x16_t v277;
  int8x16_t v278;
  int8x16_t v279;
  int8x16_t v280;
  float32x4_t v281;
  int8x16_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  uint64_t v294;
  float32x4_t v295;
  uint64_t v296;
  int32x4_t v297;
  float32x2_t v298;
  float32x4_t *v299;
  float32x4_t v300;
  int8x16_t v301;
  float32x4_t v302;
  int32x4_t v303;
  int8x16_t v304;
  float32x4_t v305;
  int8x16_t v306;
  float32x4_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  float32x4_t v315;
  int32x4_t v316;
  float32x2_t v317;
  float32x4_t *v318;
  float32x4_t v319;
  int8x16_t v320;
  int32x4_t v321;
  float32x4_t *v322;
  float32x4_t v323;
  int8x16_t v324;
  float32x4_t v325;
  int32x4_t v326;
  float32x4_t v327;
  int32x4_t v328;
  uint64_t v329;
  uint64_t v330;
  int32x4_t v331;
  float32x2_t v332;
  float32x4_t *v333;
  float32x4_t v334;
  int8x16_t v335;
  float32x4_t v336;
  int32x4_t v337;
  int8x16_t v338;
  int8x16_t v339;
  float32x4_t v340;
  int32x2_t v341;
  float32x4_t v342;
  float32x4_t v343;
  int8x16_t v344;
  float32x4_t v345;
  float32x4_t v346;
  int32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  int8x16_t v351;
  float32x4_t v352;
  int8x16_t v353;
  int8x16_t v354;
  int8x16_t v355;
  float32x4_t v356;
  int8x16_t v357;
  float32x4_t v358;
  int8x16_t v359;
  int8x16_t v360;
  float32x4_t v361;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcBadTVNoise *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 48);
          v21 = (int8x16_t)vmulq_f32(v17, v20);
          v22 = (int8x16_t)vmulq_f32(v18, v20);
          v23 = (int8x16_t)vaddq_f32((float32x4_t)v21, (float32x4_t)vextq_s8(v21, v21, 4uLL));
          v24 = (int8x16_t)vaddq_f32((float32x4_t)v22, (float32x4_t)vextq_s8(v22, v22, 4uLL));
          v25 = (float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)v23, (float32x4_t)vextq_s8(v23, v23, 8uLL)));
          v26 = (float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)v24, (float32x4_t)vextq_s8(v24, v24, 8uLL)));
          v27 = *(int8x16_t *)(v19 + 144);
          v28 = *(int8x16_t *)(v19 + 208);
          v29 = *(float32x4_t *)(v19 + 224);
          v30 = vmulq_n_f32((float32x4_t)v28, *(float *)v27.i32);
          v31 = (int8x16_t)vaddq_f32(v30, v25);
          v32 = (int8x16_t)vaddq_f32(v30, v26);
          v33 = (float32x4_t)vextq_s8(v27, v27, 8uLL);
          v34 = vminq_f32(vmaxq_f32(vrecpeq_f32(v33), (float32x4_t)v28), v29);
          v35 = vminq_f32(vmaxq_f32(vmulq_f32(v34, vrecpsq_f32(v33, v34)), (float32x4_t)v28), v29);
          v36 = vmulq_f32(v35, vrecpsq_f32(v33, v35));
          v37.i64[0] = v31.i64[0];
          v37.i64[1] = vdupq_laneq_s64((int64x2_t)vmulq_lane_f32(v36, *(float32x2_t *)v31.i8, 1), 1).u64[0];
          v38 = (float32x4_t)vrev64q_s32(v37);
          v37.i64[0] = v32.i64[0];
          v37.i64[1] = vdupq_laneq_s64((int64x2_t)vmulq_lane_f32(v36, *(float32x2_t *)v32.i8, 1), 1).u64[0];
          v39 = (float32x4_t)vrev64q_s32(v37);
          v40 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
          v41 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
          v42 = (int8x16_t)vsubq_f32(v40, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v40, v38), v28, (int8x16_t)0));
          v43 = (int8x16_t)vsubq_f32(v41, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v41, v39), v28, (int8x16_t)0));
          v44 = (float32x4_t)vextq_s8(v42, v31, 8uLL);
          v31.i32[3] = v42.i32[3];
          v45 = (float32x4_t)vextq_s8(v43, v32, 8uLL);
          v32.i32[3] = v43.i32[3];
          v46 = (int8x16_t)vsubq_f32(v44, vmulq_n_f32((float32x4_t)v31, *(float *)v27.i32));
          v47 = (int8x16_t)vsubq_f32(v45, vmulq_n_f32((float32x4_t)v32, *(float *)v27.i32));
          v46.i32[2] = 0.5;
          v47.i32[2] = 0.5;
          v48 = (float32x4_t)vextq_s8(v47, v47, 8uLL);
          v49 = *((int *)a2 + 22);
          v50 = vsubq_f32((float32x4_t)vextq_s8(v46, v46, 8uLL), v9);
          v51 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v52 = vaddq_s32(vcvtq_s32_f32(v50), vcltzq_f32(v50));
            v53 = (float32x2_t)vsubq_f32(v50, vcvtq_f32_s32(v52)).u64[0];
            v54 = (float32x4_t *)(v51 + 16 * (v52.i32[0] + v52.i32[1] * (int)v49));
            v55 = vaddq_f32(*v54, vmulq_n_f32(vsubq_f32(v54[1], *v54), v53.f32[0]));
            v56 = (int8x16_t)vaddq_f32(v55, vmulq_lane_f32(vsubq_f32(vaddq_f32(v54[v49], vmulq_n_f32(vsubq_f32(v54[(int)v49 + 1], v54[v49]), v53.f32[0])), v55), v53, 1));
            v57 = vsubq_f32(v48, v9);
            v58 = vaddq_s32(vcvtq_s32_f32(v57), vcltzq_f32(v57));
            v57.i64[0] = vsubq_f32(v57, vcvtq_f32_s32(v58)).u64[0];
            v59 = (float32x4_t *)(v51 + 16 * (v58.i32[0] + v58.i32[1] * (int)v49));
            v60 = vaddq_f32(*v59, vmulq_n_f32(vsubq_f32(v59[1], *v59), v57.f32[0]));
            v61 = (int8x16_t)vaddq_f32(v60, vmulq_lane_f32(vsubq_f32(vaddq_f32(v59[v49], vmulq_n_f32(vsubq_f32(v59[(int)v49 + 1], v59[v49]), v57.f32[0])), v60), *(float32x2_t *)v57.f32, 1));
          }
          else
          {
            v62 = vaddq_f32(v50, v13);
            v63 = vcvtq_s32_f32(v62);
            v62.i64[0] = vaddq_s32(v63, vcgtq_f32(vcvtq_f32_s32(v63), v62)).u64[0];
            v56 = *(int8x16_t *)(v51 + 16 * (v62.i32[0] + v62.i32[1] * (int)v49));
            v64 = vaddq_f32(vsubq_f32(v48, v9), v13);
            v65 = vcvtq_s32_f32(v64);
            v64.i64[0] = vaddq_s32(v65, vcgtq_f32(vcvtq_f32_s32(v65), v64)).u64[0];
            v61 = *(int8x16_t *)(v51 + 16 * (v64.i32[0] + v64.i32[1] * (int)v49));
          }
          v66 = *(float32x4_t *)(v19 + 96);
          v67 = (int8x16_t)vaddq_f32(v66, v25);
          v68 = (int8x16_t)vaddq_f32(v66, v26);
          v69 = *(int8x16_t *)(v19 + 240);
          v70 = *(int8x16_t *)(v19 + 256);
          v71.i64[0] = vbslq_s8(v69, v56, v67).u64[0];
          v68.i64[0] = vbslq_s8(v69, v61, v68).u64[0];
          v73 = *(float32x4_t *)(v19 + 64);
          v72 = *(float32x4_t *)(v19 + 80);
          v74 = (int8x16_t)vmulq_f32(v17, v72);
          v75 = (int8x16_t)vmulq_f32(v18, v72);
          v76 = vaddq_f32((float32x4_t)v74, (float32x4_t)vextq_s8(v74, v74, 4uLL));
          v77 = vaddq_f32((float32x4_t)v75, (float32x4_t)vextq_s8(v75, v75, 4uLL));
          v71.i64[1] = vaddq_f32(v76, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v76, 0)).i64[1];
          v68.i64[1] = vaddq_f32(v77, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v77, 0)).i64[1];
          v78 = (int8x16_t)vmulq_f32(v17, v73);
          v79 = (int8x16_t)vmulq_f32(v18, v73);
          v80 = (int8x16_t)vaddq_f32((float32x4_t)v78, (float32x4_t)vextq_s8(v78, v78, 4uLL));
          v81 = (int8x16_t)vaddq_f32((float32x4_t)v79, (float32x4_t)vextq_s8(v79, v79, 4uLL));
          v82 = vbslq_s8(v70, (int8x16_t)vaddq_f32((float32x4_t)v80, (float32x4_t)vextq_s8(v80, v80, 8uLL)), v71);
          v83 = vbslq_s8(v70, (int8x16_t)vaddq_f32((float32x4_t)v81, (float32x4_t)vextq_s8(v81, v81, 8uLL)), v68);
          v84 = *(int8x16_t *)(v19 + 272);
          v85 = *(float32x4_t *)(v19 + 288);
          v86 = vaddq_f32((float32x4_t)v84, vmulq_f32(v85, (float32x4_t)vdupq_lane_s64(v82.i64[0], 0)));
          v87 = vaddq_f32((float32x4_t)v84, vmulq_f32(v85, (float32x4_t)vdupq_lane_s64(v83.i64[0], 0)));
          v88 = *(float32x4_t *)(v19 + 32);
          v89 = (int8x16_t)vmulq_f32(v17, v88);
          v90 = (int8x16_t)vmulq_f32(v18, v88);
          v91 = vaddq_f32((float32x4_t)v89, (float32x4_t)vextq_s8(v89, v89, 4uLL));
          v92 = vaddq_f32((float32x4_t)v90, (float32x4_t)vextq_s8(v90, v90, 4uLL));
          v91.i64[0] = vaddq_f32(v91, (float32x4_t)vdupq_laneq_s64((int64x2_t)v91, 1)).u64[0];
          v92.i64[0] = vaddq_f32(v92, (float32x4_t)vdupq_laneq_s64((int64x2_t)v92, 1)).u64[0];
          v91.i64[1] = vdupq_laneq_s64((int64x2_t)v86, 1).u64[0];
          v92.i64[1] = vdupq_laneq_s64((int64x2_t)v87, 1).u64[0];
          v93 = *(float32x4_t *)(v19 + 128);
          v94 = (float32x4_t)vbslq_s8(v69, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v91), vmulq_laneq_f32(v93, v86, 2)), v82);
          v95 = (float32x4_t)vbslq_s8(v69, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v92), vmulq_laneq_f32(v93, v87, 2)), v83);
          v96 = (float32x4_t)vandq_s8(*(int8x16_t *)(v19 + 176), v69);
          v97 = vsubq_f32(v94, v96);
          v98 = vsubq_f32(v95, v96);
          v100 = *(float32x4_t *)v19;
          v99 = *(float32x4_t *)(v19 + 16);
          v101 = (int8x16_t)vmulq_f32(*(float32x4_t *)v19, v97);
          v102 = (int8x16_t)vmulq_f32(*(float32x4_t *)v19, v98);
          v103 = (int8x16_t)vaddq_f32((float32x4_t)v101, (float32x4_t)vextq_s8(v101, v101, 4uLL));
          v104 = (int8x16_t)vaddq_f32((float32x4_t)v102, (float32x4_t)vextq_s8(v102, v102, 4uLL));
          v105 = (int8x16_t)vmulq_f32(v99, v97);
          v106 = (int8x16_t)vmulq_f32(v99, v98);
          v107 = (int8x16_t)vaddq_f32((float32x4_t)v105, (float32x4_t)vextq_s8(v105, v105, 4uLL));
          v108 = (int8x16_t)vaddq_f32((float32x4_t)v106, (float32x4_t)vextq_s8(v106, v106, 4uLL));
          v109 = (float32x4_t)vbslq_s8(v69, (int8x16_t)vaddq_f32((float32x4_t)v104, (float32x4_t)vextq_s8(v104, v104, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v108, (float32x4_t)vextq_s8(v108, v108, 8uLL)));
          v110 = *((int *)a2 + 26);
          v111 = vsubq_f32((float32x4_t)vbslq_s8(v69, (int8x16_t)vaddq_f32((float32x4_t)v103, (float32x4_t)vextq_s8(v103, v103, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v107, (float32x4_t)vextq_s8(v107, v107, 8uLL))), v9);
          v112 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v113 = vaddq_s32(vcvtq_s32_f32(v111), vcltzq_f32(v111));
            v114 = (float32x2_t)vsubq_f32(v111, vcvtq_f32_s32(v113)).u64[0];
            v115 = (float32x4_t *)(v112 + 16 * (v113.i32[0] + v113.i32[1] * (int)v110));
            v116 = vaddq_f32(*v115, vmulq_n_f32(vsubq_f32(v115[1], *v115), v114.f32[0]));
            v117 = (int8x16_t)vaddq_f32(v116, vmulq_lane_f32(vsubq_f32(vaddq_f32(v115[v110], vmulq_n_f32(vsubq_f32(v115[(int)v110 + 1], v115[v110]), v114.f32[0])), v116), v114, 1));
            v118 = vsubq_f32(v109, v9);
            v119 = vaddq_s32(vcvtq_s32_f32(v118), vcltzq_f32(v118));
            v118.i64[0] = vsubq_f32(v118, vcvtq_f32_s32(v119)).u64[0];
            v120 = (float32x4_t *)(v112 + 16 * (v119.i32[0] + v119.i32[1] * (int)v110));
            v121 = vaddq_f32(*v120, vmulq_n_f32(vsubq_f32(v120[1], *v120), v118.f32[0]));
            v122 = (int8x16_t)vaddq_f32(v121, vmulq_lane_f32(vsubq_f32(vaddq_f32(v120[v110], vmulq_n_f32(vsubq_f32(v120[(int)v110 + 1], v120[v110]), v118.f32[0])), v121), *(float32x2_t *)v118.f32, 1));
          }
          else
          {
            v123 = vaddq_f32(v111, v13);
            v124 = vcvtq_s32_f32(v123);
            v123.i64[0] = vaddq_s32(v124, vcgtq_f32(vcvtq_f32_s32(v124), v123)).u64[0];
            v117 = *(int8x16_t *)(v112 + 16 * (v123.i32[0] + v123.i32[1] * (int)v110));
            v125 = vaddq_f32(vsubq_f32(v109, v9), v13);
            v126 = vcvtq_s32_f32(v125);
            v125.i64[0] = vaddq_s32(v126, vcgtq_f32(vcvtq_f32_s32(v126), v125)).u64[0];
            v122 = *(int8x16_t *)(v112 + 16 * (v125.i32[0] + v125.i32[1] * (int)v110));
          }
          v127 = vmvnq_s8(v70);
          v128 = vaddq_f32(v96, v94);
          v129 = vaddq_f32(v96, v95);
          v130 = (int8x16_t)vmulq_f32(v99, v94);
          v131 = (int8x16_t)vmulq_f32(v99, v95);
          v132 = vaddq_f32((float32x4_t)v130, (float32x4_t)vextq_s8(v130, v130, 4uLL));
          v133 = vaddq_f32((float32x4_t)v131, (float32x4_t)vextq_s8(v131, v131, 4uLL));
          v134 = vorrq_s8(vandq_s8(v70, v117), vandq_s8((int8x16_t)vaddq_f32(v132, (float32x4_t)vdupq_lane_s64(v132.i64[0], 0)), v127));
          v135 = vorrq_s8(vandq_s8(v70, v122), vandq_s8((int8x16_t)vaddq_f32(v133, (float32x4_t)vdupq_lane_s64(v133.i64[0], 0)), v127));
          v136 = (int8x16_t)vmulq_f32(v99, v128);
          v137 = (int8x16_t)vmulq_f32(v99, v129);
          v138 = (int8x16_t)vaddq_f32((float32x4_t)v136, (float32x4_t)vextq_s8(v136, v136, 4uLL));
          v139 = vaddq_f32((float32x4_t)v137, (float32x4_t)vextq_s8(v137, v137, 4uLL));
          v138.i64[0] = vaddq_f32((float32x4_t)v138, (float32x4_t)vdupq_laneq_s64((int64x2_t)v138, 1)).u64[0];
          v127.i64[0] = vaddq_f32(v139, (float32x4_t)vdupq_laneq_s64((int64x2_t)v139, 1)).u64[0];
          v138.i64[1] = v134.i64[1];
          v127.i64[1] = v135.i64[1];
          v140 = vmvnq_s8(v69);
          v141 = (int8x16_t)vmulq_f32(v100, v128);
          v142 = (int8x16_t)vmulq_f32(v100, v129);
          v143 = (int8x16_t)vaddq_f32((float32x4_t)v141, (float32x4_t)vextq_s8(v141, v141, 4uLL));
          v144 = (int8x16_t)vaddq_f32((float32x4_t)v142, (float32x4_t)vextq_s8(v142, v142, 4uLL));
          v145 = vorrq_s8(vandq_s8(v138, v140), vandq_s8(v69, (int8x16_t)vaddq_f32((float32x4_t)v143, (float32x4_t)vextq_s8(v143, v143, 8uLL))));
          v146 = vorrq_s8(vandq_s8(v127, v140), vandq_s8(v69, (int8x16_t)vaddq_f32((float32x4_t)v144, (float32x4_t)vextq_s8(v144, v144, 8uLL))));
          v147 = (int8x16_t)vmulq_f32(v100, v94);
          v148 = (int8x16_t)vmulq_f32(v100, v95);
          v149 = (int8x16_t)vaddq_f32((float32x4_t)v147, (float32x4_t)vextq_s8(v147, v147, 4uLL));
          v150 = (int8x16_t)vaddq_f32((float32x4_t)v148, (float32x4_t)vextq_s8(v148, v148, 4uLL));
          v151 = (float32x4_t)vorrq_s8(vandq_s8(vextq_s8(v146, v146, 8uLL), v140), vandq_s8(v69, (int8x16_t)vaddq_f32((float32x4_t)v150, (float32x4_t)vextq_s8(v150, v150, 8uLL))));
          v152 = vsubq_f32((float32x4_t)vorrq_s8(vandq_s8(vextq_s8(v145, v145, 8uLL), v140), vandq_s8(v69, (int8x16_t)vaddq_f32((float32x4_t)v149, (float32x4_t)vextq_s8(v149, v149, 8uLL)))), v9);
          if (v5)
          {
            v153 = vaddq_s32(vcvtq_s32_f32(v152), vcltzq_f32(v152));
            v154 = (float32x2_t)vsubq_f32(v152, vcvtq_f32_s32(v153)).u64[0];
            v155 = (float32x4_t *)(v112 + 16 * (v153.i32[0] + v153.i32[1] * (int)v110));
            v156 = vaddq_f32(*v155, vmulq_n_f32(vsubq_f32(v155[1], *v155), v154.f32[0]));
            v157 = (int8x16_t)vaddq_f32(v156, vmulq_lane_f32(vsubq_f32(vaddq_f32(v155[v110], vmulq_n_f32(vsubq_f32(v155[(int)v110 + 1], v155[v110]), v154.f32[0])), v156), v154, 1));
            v158 = vsubq_f32(v151, v9);
            v159 = vaddq_s32(vcvtq_s32_f32(v158), vcltzq_f32(v158));
            v160 = (float32x2_t)vsubq_f32(v158, vcvtq_f32_s32(v159)).u64[0];
            v161 = (float32x4_t *)(v112 + 16 * (v159.i32[0] + v159.i32[1] * (int)v110));
            v162 = vaddq_f32(*v161, vmulq_n_f32(vsubq_f32(v161[1], *v161), v160.f32[0]));
            v163 = (int8x16_t)vaddq_f32(v162, vmulq_lane_f32(vsubq_f32(vaddq_f32(v161[v110], vmulq_n_f32(vsubq_f32(v161[(int)v110 + 1], v161[v110]), v160.f32[0])), v162), v160, 1));
            v167 = (int8x16_t)vsubq_f32((float32x4_t)v145, v9);
            v164 = vaddq_s32(vcvtq_s32_f32((float32x4_t)v167), vcltzq_f32((float32x4_t)v167));
            v167.i64[0] = vsubq_f32((float32x4_t)v167, vcvtq_f32_s32(v164)).u64[0];
            v165 = (float32x4_t *)(v112 + 16 * (v164.i32[0] + v164.i32[1] * (int)v110));
            v166 = vaddq_f32(*v165, vmulq_n_f32(vsubq_f32(v165[1], *v165), *(float *)v167.i32));
            v167.i64[0] = vaddq_f32(v166, vmulq_lane_f32(vsubq_f32(vaddq_f32(v165[v110], vmulq_n_f32(vsubq_f32(v165[(int)v110 + 1], v165[v110]), *(float *)v167.i32)), v166), *(float32x2_t *)v167.i8, 1)).u64[0];
            v171 = (int8x16_t)vsubq_f32((float32x4_t)v146, v9);
            v168 = vaddq_s32(vcvtq_s32_f32((float32x4_t)v171), vcltzq_f32((float32x4_t)v171));
            v171.i64[0] = vsubq_f32((float32x4_t)v171, vcvtq_f32_s32(v168)).u64[0];
            v169 = (float32x4_t *)(v112 + 16 * (v168.i32[0] + v168.i32[1] * (int)v110));
            v170 = vaddq_f32(*v169, vmulq_n_f32(vsubq_f32(v169[1], *v169), *(float *)v171.i32));
            v171.i64[0] = vaddq_f32(v170, vmulq_lane_f32(vsubq_f32(vaddq_f32(v169[v110], vmulq_n_f32(vsubq_f32(v169[(int)v110 + 1], v169[v110]), *(float *)v171.i32)), v170), *(float32x2_t *)v171.i8, 1)).u64[0];
          }
          else
          {
            v172 = vaddq_f32(v152, v13);
            v173 = vcvtq_s32_f32(v172);
            v172.i64[0] = vaddq_s32(v173, vcgtq_f32(vcvtq_f32_s32(v173), v172)).u64[0];
            v157 = *(int8x16_t *)(v112 + 16 * (v172.i32[0] + v172.i32[1] * (int)v110));
            v158 = vsubq_f32(v151, v9);
            v174 = vaddq_f32(v158, v13);
            v175 = vcvtq_s32_f32(v174);
            v174.i64[0] = vaddq_s32(v175, vcgtq_f32(vcvtq_f32_s32(v175), v174)).u64[0];
            v163 = *(int8x16_t *)(v112 + 16 * (v174.i32[0] + v174.i32[1] * (int)v110));
            v176 = vaddq_f32(vsubq_f32((float32x4_t)v145, v9), v13);
            v177 = vcvtq_s32_f32(v176);
            v176.i64[0] = vaddq_s32(v177, vcgtq_f32(vcvtq_f32_s32(v177), v176)).u64[0];
            v167 = *(int8x16_t *)(v112 + 16 * (v176.i32[0] + v176.i32[1] * (int)v110));
            v178 = vaddq_f32(vsubq_f32((float32x4_t)v146, v9), v13);
            v179 = vcvtq_s32_f32(v178);
            v178.i64[0] = vaddq_s32(v179, vcgtq_f32(vcvtq_f32_s32(v179), v178)).u64[0];
            v171 = *(int8x16_t *)(v112 + 16 * (v178.i32[0] + v178.i32[1] * (int)v110));
          }
          v180 = *((int *)a2 + 30);
          v181 = *((_QWORD *)a2 + 14);
          if (v5)
          {
            v182 = vaddq_s32(vcvtq_s32_f32(v152), vcltzq_f32(v152));
            v183 = (float32x2_t)vsubq_f32(v152, vcvtq_f32_s32(v182)).u64[0];
            v184 = (float32x4_t *)(v181 + 16 * (v182.i32[0] + v182.i32[1] * (int)v180));
            v185 = vaddq_f32(*v184, vmulq_n_f32(vsubq_f32(v184[1], *v184), v183.f32[0]));
            v186 = (int8x16_t)vaddq_f32(v185, vmulq_lane_f32(vsubq_f32(vaddq_f32(v184[v180], vmulq_n_f32(vsubq_f32(v184[(int)v180 + 1], v184[v180]), v183.f32[0])), v185), v183, 1));
            v187 = vaddq_s32(vcvtq_s32_f32(v158), vcltzq_f32(v158));
            v188 = (float32x2_t)vsubq_f32(v158, vcvtq_f32_s32(v187)).u64[0];
            v189 = (float32x4_t *)(v181 + 16 * (v187.i32[0] + v187.i32[1] * (int)v180));
            v190 = vaddq_f32(*v189, vmulq_n_f32(vsubq_f32(v189[1], *v189), v188.f32[0]));
            v191 = (int8x16_t)vaddq_f32(v190, vmulq_lane_f32(vsubq_f32(vaddq_f32(v189[v180], vmulq_n_f32(vsubq_f32(v189[(int)v180 + 1], v189[v180]), v188.f32[0])), v190), v188, 1));
          }
          else
          {
            v192 = vaddq_f32(v152, v13);
            v193 = vcvtq_s32_f32(v192);
            v192.i64[0] = vaddq_s32(v193, vcgtq_f32(vcvtq_f32_s32(v193), v192)).u64[0];
            v186 = *(int8x16_t *)(v181 + 16 * (v192.i32[0] + v192.i32[1] * (int)v180));
            v194 = vaddq_f32(v158, v13);
            v195 = vcvtq_s32_f32(v194);
            v194.i64[0] = vaddq_s32(v195, vcgtq_f32(vcvtq_f32_s32(v195), v194)).u64[0];
            v191 = *(int8x16_t *)(v181 + 16 * (v194.i32[0] + v194.i32[1] * (int)v180));
          }
          v167.i64[1] = v145.i64[1];
          v171.i64[1] = v146.i64[1];
          v197 = *(int8x16_t *)(v19 + 304);
          v196 = *(int8x16_t *)(v19 + 320);
          v198 = (float32x4_t)vbslq_s8(v197, v157, v167);
          v199 = (float32x4_t)vbslq_s8(v197, v163, v171);
          v200 = (int32x2_t)vmaxq_f32((float32x4_t)vextq_s8(v163, v163, 0xCuLL), v85).u64[0];
          v201 = (float32x4_t)vbslq_s8(v196, v157, v186);
          v202 = (float32x4_t)vbslq_s8(v196, v163, v191);
          v203 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32((float32x4_t)vextq_s8(v157, v157, 0xCuLL), v85), 0);
          v204 = (float32x4_t)vdupq_lane_s32(v200, 0);
          v205 = *(float32x4_t *)(v19 + 336);
          v206 = *(float32x4_t *)(v19 + 352);
          v207 = vmulq_f32(vrecpeq_f32(v204), v205);
          v208 = vmvnq_s8(v197);
          v209 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v203), v205), v206), v29);
          v210 = vminq_f32(vmaxq_f32(v207, v206), v29);
          v211 = vmulq_f32(vmulq_f32(v210, vrecpsq_f32(v204, v210)), v199);
          v212 = vaddq_f32(vmulq_laneq_f32(v201, v85, 2), vmulq_f32(vmulq_f32(v209, vrecpsq_f32(v203, v209)), v198));
          v213 = *(int32x4_t *)(v19 + 160);
          v214 = (float32x4_t)vrev64q_s32(v213);
          v215 = (int8x16_t)vmulq_laneq_f32(v214, v198, 3);
          v216 = vmulq_laneq_f32(v214, v199, 3);
          v214.i64[0] = v215.i64[0];
          v214.i64[1] = v201.i64[1];
          v209.i64[0] = v216.i64[0];
          v209.i64[1] = v202.i64[1];
          v217 = vaddq_f32(vmulq_laneq_f32(v202, v85, 2), v211);
          v218 = vcvtq_f32_s32(vcvtq_s32_f32(v214));
          v219 = vcvtq_f32_s32(vcvtq_s32_f32(v209));
          v215.i64[0] = vsubq_f32((float32x4_t)v215, vsubq_f32(v218, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v218, v214), v84, (int8x16_t)0))).u64[0];
          v216.i64[0] = vsubq_f32(v216, vsubq_f32(v219, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v219, v209), v84, (int8x16_t)0))).u64[0];
          v215.i64[1] = v201.i64[1];
          v216.i64[1] = v202.i64[1];
          v215.i64[0] = vminq_f32(vmaxq_f32(vsubq_f32(vmulq_laneq_f32((float32x4_t)v215, (float32x4_t)v213, 2), (float32x4_t)v213), (float32x4_t)v28), (float32x4_t)v84).u64[0];
          v220.i64[0] = vminq_f32(vmaxq_f32(vsubq_f32(vmulq_laneq_f32(v216, (float32x4_t)v213, 2), (float32x4_t)v213), (float32x4_t)v28), (float32x4_t)v84).u64[0];
          v215.i64[1] = v201.i64[1];
          v220.i64[1] = v202.i64[1];
          v221 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32((float32x4_t)v215), (float32x4_t)v215)), v197), vandq_s8(v215, v208));
          v222 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32(v220), v220)), v197), vandq_s8((int8x16_t)v220, v208));
          v223 = *(float32x4_t *)(v19 + 368);
          v224 = *(float32x4_t *)(v19 + 384);
          v225 = (int8x16_t)vsubq_f32(v212, v223);
          v226 = (int8x16_t)vsubq_f32(v217, v223);
          v227 = *(float32x4_t *)(v19 + 192);
          v228 = (int8x16_t)vmulq_f32(v227, (float32x4_t)vbslq_s8(v196, v221, v225));
          v229 = (int8x16_t)vmulq_f32(v227, (float32x4_t)vbslq_s8(v196, v222, v226));
          v230 = (int8x16_t)vaddq_f32((float32x4_t)v228, (float32x4_t)vextq_s8(v228, v228, 4uLL));
          v231 = (int8x16_t)vaddq_f32((float32x4_t)v229, (float32x4_t)vextq_s8(v229, v229, 4uLL));
          v232 = (float32x4_t)vbslq_s8(v196, (int8x16_t)vaddq_f32((float32x4_t)v230, (float32x4_t)vextq_s8(v230, v230, 8uLL)), v225);
          v233 = (float32x4_t)vbslq_s8(v196, (int8x16_t)vaddq_f32((float32x4_t)v231, (float32x4_t)vextq_s8(v231, v231, 8uLL)), v226);
          v234 = vorrq_s8(vandq_s8(v69, (int8x16_t)vmulq_f32((float32x4_t)v221, (float32x4_t)v221)), vandq_s8(v221, v140));
          v235 = vorrq_s8(vandq_s8(v69, (int8x16_t)vmulq_f32((float32x4_t)v222, (float32x4_t)v222)), vandq_s8(v222, v140));
          v236 = (float32x4_t)vorrq_s8(vandq_s8(v197, (int8x16_t)vaddq_f32(v224, (float32x4_t)v234)), vandq_s8(v234, v208));
          v237 = (float32x4_t)vorrq_s8(vandq_s8(v197, (int8x16_t)vaddq_f32(v224, (float32x4_t)v235)), vandq_s8(v235, v208));
          v238 = (int8x16_t)vsubq_f32(v223, (float32x4_t)v213);
          v239 = (float32x4_t)vextq_s8(v238, v238, 0xCuLL);
          v240 = (float32x4_t)vextq_s8((int8x16_t)v213, (int8x16_t)v213, 0xCuLL);
          v234.i64[0] = vaddq_f32(v240, vmulq_f32(v239, vmulq_lane_f32(v236, *(float32x2_t *)v236.f32, 1))).u64[0];
          v241.i64[0] = vaddq_f32(v240, vmulq_f32(v239, vmulq_lane_f32(v237, *(float32x2_t *)v237.f32, 1))).u64[0];
          v241.i64[1] = v237.i64[1];
          v242 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v232, 3);
          v243 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v233, 3);
          v244 = *(float32x4_t *)(v19 + 112);
          v234.i64[1] = v236.i64[1];
          v245 = (int8x16_t *)(v11 + 16 * v15);
          *v245 = vbslq_s8(v196, v234, (int8x16_t)vmulq_laneq_f32(vmulq_n_f32(vaddq_f32(v242, vmulq_f32(v244, vsubq_f32(v232, v242))), *(float *)v234.i32), v236, 3));
          v245[1] = vbslq_s8(v196, v241, (int8x16_t)vmulq_laneq_f32(vmulq_n_f32(vaddq_f32(v243, vmulq_f32(v244, vsubq_f32(v233, v243))), *(float *)v241.i32), v237, 3));
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v246 = *((_QWORD *)this + 51);
        v247 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v246 + 48));
        v248 = (int8x16_t)vaddq_f32((float32x4_t)v247, (float32x4_t)vextq_s8(v247, v247, 4uLL));
        v249 = (float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)v248, (float32x4_t)vextq_s8(v248, v248, 8uLL)));
        v250 = *(int8x16_t *)(v246 + 144);
        v251 = *(int8x16_t *)(v246 + 208);
        v252 = *(float32x4_t *)(v246 + 224);
        v253 = (int8x16_t)vaddq_f32(vmulq_n_f32((float32x4_t)v251, *(float *)v250.i32), v249);
        v254 = (float32x4_t)vextq_s8(v250, v250, 8uLL);
        v255 = vminq_f32(vmaxq_f32(vrecpeq_f32(v254), (float32x4_t)v251), v252);
        v256 = vminq_f32(vmaxq_f32(vmulq_f32(v255, vrecpsq_f32(v254, v255)), (float32x4_t)v251), v252);
        v254.i64[0] = vdupq_laneq_s64((int64x2_t)vmulq_lane_f32(vmulq_f32(v256, vrecpsq_f32(v254, v256)), *(float32x2_t *)v253.i8, 1), 1).u64[0];
        v256.i64[0] = v253.i64[0];
        v256.i64[1] = v254.i64[0];
        v257 = (float32x4_t)vrev64q_s32((int32x4_t)v256);
        v258 = vcvtq_f32_s32(vcvtq_s32_f32(v257));
        v259 = (int8x16_t)vsubq_f32(v258, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v258, v257), v251, (int8x16_t)0));
        v260 = (float32x4_t)vextq_s8(v259, v253, 8uLL);
        v253.i32[3] = v259.i32[3];
        v261 = (int8x16_t)vsubq_f32(v260, vmulq_n_f32((float32x4_t)v253, *(float *)v250.i32));
        v261.i32[2] = 0.5;
        v262 = *((int *)a2 + 22);
        v263 = vsubq_f32((float32x4_t)vextq_s8(v261, v261, 8uLL), v9);
        v264 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v265 = vaddq_s32(vcvtq_s32_f32(v263), vcltzq_f32(v263));
          v266 = (float32x2_t)vsubq_f32(v263, vcvtq_f32_s32(v265)).u64[0];
          v267 = (float32x4_t *)(v264 + 16 * (v265.i32[0] + v265.i32[1] * (int)v262));
          v268 = vaddq_f32(*v267, vmulq_n_f32(vsubq_f32(v267[1], *v267), v266.f32[0]));
          v269 = (int8x16_t)vaddq_f32(v268, vmulq_lane_f32(vsubq_f32(vaddq_f32(v267[v262], vmulq_n_f32(vsubq_f32(v267[(int)v262 + 1], v267[v262]), v266.f32[0])), v268), v266, 1));
        }
        else
        {
          v270 = vaddq_f32(v263, v13);
          v271 = vcvtq_s32_f32(v270);
          v270.i64[0] = vaddq_s32(v271, vcgtq_f32(vcvtq_f32_s32(v271), v270)).u64[0];
          v269 = *(int8x16_t *)(v264 + 16 * (v270.i32[0] + v270.i32[1] * (int)v262));
        }
        v272 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v246 + 96), v249);
        v273 = *(int8x16_t *)(v246 + 240);
        v274.i64[0] = vbslq_s8(v273, v269, v272).u64[0];
        v275 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v246 + 80));
        v276 = vaddq_f32((float32x4_t)v275, (float32x4_t)vextq_s8(v275, v275, 4uLL));
        v274.i64[1] = vaddq_f32(v276, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v276, 0)).i64[1];
        v277 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v246 + 64));
        v278 = (int8x16_t)vaddq_f32((float32x4_t)v277, (float32x4_t)vextq_s8(v277, v277, 4uLL));
        v279 = vbslq_s8(*(int8x16_t *)(v246 + 256), (int8x16_t)vaddq_f32((float32x4_t)v278, (float32x4_t)vextq_s8(v278, v278, 8uLL)), v274);
        v280 = *(int8x16_t *)(v246 + 272);
        v281 = *(float32x4_t *)(v246 + 288);
        v282 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v246 + 32));
        v283 = vaddq_f32((float32x4_t)v282, (float32x4_t)vextq_s8(v282, v282, 4uLL));
        v284 = vaddq_f32((float32x4_t)v280, vmulq_f32(v281, (float32x4_t)vdupq_lane_s64(v279.i64[0], 0)));
        v283.i64[0] = vaddq_f32(v283, (float32x4_t)vdupq_laneq_s64((int64x2_t)v283, 1)).u64[0];
        v283.i64[1] = vdupq_laneq_s64((int64x2_t)v284, 1).u64[0];
        v285 = (float32x4_t)vbslq_s8(v273, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v283), vmulq_laneq_f32(*(float32x4_t *)(v246 + 128), v284, 2)), v279);
        v286 = (float32x4_t)vandq_s8(*(int8x16_t *)(v246 + 176), v273);
        v287 = vsubq_f32(v285, v286);
        v289 = *(float32x4_t *)v246;
        v288 = *(float32x4_t *)(v246 + 16);
        v290 = (int8x16_t)vmulq_f32(*(float32x4_t *)v246, v287);
        v291 = (int8x16_t)vaddq_f32((float32x4_t)v290, (float32x4_t)vextq_s8(v290, v290, 4uLL));
        v292 = (int8x16_t)vmulq_f32(v288, v287);
        v293 = (int8x16_t)vaddq_f32((float32x4_t)v292, (float32x4_t)vextq_s8(v292, v292, 4uLL));
        v294 = *((int *)a2 + 26);
        v295 = vsubq_f32((float32x4_t)vbslq_s8(v273, (int8x16_t)vaddq_f32((float32x4_t)v291, (float32x4_t)vextq_s8(v291, v291, 8uLL)), (int8x16_t)vaddq_f32((float32x4_t)v293, (float32x4_t)vextq_s8(v293, v293, 8uLL))), v9);
        v296 = *((_QWORD *)a2 + 12);
        if (v5)
        {
          v297 = vaddq_s32(vcvtq_s32_f32(v295), vcltzq_f32(v295));
          v298 = (float32x2_t)vsubq_f32(v295, vcvtq_f32_s32(v297)).u64[0];
          v299 = (float32x4_t *)(v296 + 16 * (v297.i32[0] + v297.i32[1] * (int)v294));
          v300 = vaddq_f32(*v299, vmulq_n_f32(vsubq_f32(v299[1], *v299), v298.f32[0]));
          v301 = (int8x16_t)vaddq_f32(v300, vmulq_lane_f32(vsubq_f32(vaddq_f32(v299[v294], vmulq_n_f32(vsubq_f32(v299[(int)v294 + 1], v299[v294]), v298.f32[0])), v300), v298, 1));
        }
        else
        {
          v302 = vaddq_f32(v295, v13);
          v303 = vcvtq_s32_f32(v302);
          v302.i64[0] = vaddq_s32(v303, vcgtq_f32(vcvtq_f32_s32(v303), v302)).u64[0];
          v301 = *(int8x16_t *)(v296 + 16 * (v302.i32[0] + v302.i32[1] * (int)v294));
        }
        v304 = vmvnq_s8(v273);
        v305 = vaddq_f32(v286, v285);
        v306 = (int8x16_t)vmulq_f32(v288, v285);
        v307 = vaddq_f32((float32x4_t)v306, (float32x4_t)vextq_s8(v306, v306, 4uLL));
        v308 = (int8x16_t)vmulq_f32(v288, v305);
        v309 = (int8x16_t)vaddq_f32((float32x4_t)v308, (float32x4_t)vextq_s8(v308, v308, 4uLL));
        v309.i64[0] = vaddq_f32((float32x4_t)v309, (float32x4_t)vdupq_laneq_s64((int64x2_t)v309, 1)).u64[0];
        v309.i64[1] = vorrq_s8(vandq_s8(*(int8x16_t *)(v246 + 256), v301), vandq_s8((int8x16_t)vaddq_f32(v307, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v307, 0)), vmvnq_s8(*(int8x16_t *)(v246 + 256)))).i64[1];
        v310 = (int8x16_t)vmulq_f32(v289, v305);
        v311 = (int8x16_t)vaddq_f32((float32x4_t)v310, (float32x4_t)vextq_s8(v310, v310, 4uLL));
        v312 = vorrq_s8(vandq_s8(v309, v304), vandq_s8(v273, (int8x16_t)vaddq_f32((float32x4_t)v311, (float32x4_t)vextq_s8(v311, v311, 8uLL))));
        v313 = (int8x16_t)vmulq_f32(v289, v285);
        v314 = (int8x16_t)vaddq_f32((float32x4_t)v313, (float32x4_t)vextq_s8(v313, v313, 4uLL));
        v315 = vsubq_f32((float32x4_t)vorrq_s8(vandq_s8(vextq_s8(v312, v312, 8uLL), v304), vandq_s8(v273, (int8x16_t)vaddq_f32((float32x4_t)v314, (float32x4_t)vextq_s8(v314, v314, 8uLL)))), v9);
        if (v5)
        {
          v316 = vaddq_s32(vcvtq_s32_f32(v315), vcltzq_f32(v315));
          v317 = (float32x2_t)vsubq_f32(v315, vcvtq_f32_s32(v316)).u64[0];
          v318 = (float32x4_t *)(v296 + 16 * (v316.i32[0] + v316.i32[1] * (int)v294));
          v319 = vaddq_f32(*v318, vmulq_n_f32(vsubq_f32(v318[1], *v318), v317.f32[0]));
          v320 = (int8x16_t)vaddq_f32(v319, vmulq_lane_f32(vsubq_f32(vaddq_f32(v318[v294], vmulq_n_f32(vsubq_f32(v318[(int)v294 + 1], v318[v294]), v317.f32[0])), v319), v317, 1));
          v324 = (int8x16_t)vsubq_f32((float32x4_t)v312, v9);
          v321 = vaddq_s32(vcvtq_s32_f32((float32x4_t)v324), vcltzq_f32((float32x4_t)v324));
          v324.i64[0] = vsubq_f32((float32x4_t)v324, vcvtq_f32_s32(v321)).u64[0];
          v322 = (float32x4_t *)(v296 + 16 * (v321.i32[0] + v321.i32[1] * (int)v294));
          v323 = vaddq_f32(*v322, vmulq_n_f32(vsubq_f32(v322[1], *v322), *(float *)v324.i32));
          v324.i64[0] = vaddq_f32(v323, vmulq_lane_f32(vsubq_f32(vaddq_f32(v322[v294], vmulq_n_f32(vsubq_f32(v322[(int)v294 + 1], v322[v294]), *(float *)v324.i32)), v323), *(float32x2_t *)v324.i8, 1)).u64[0];
        }
        else
        {
          v325 = vaddq_f32(v315, v13);
          v326 = vcvtq_s32_f32(v325);
          v325.i64[0] = vaddq_s32(v326, vcgtq_f32(vcvtq_f32_s32(v326), v325)).u64[0];
          v320 = *(int8x16_t *)(v296 + 16 * (v325.i32[0] + v325.i32[1] * (int)v294));
          v327 = vaddq_f32(vsubq_f32((float32x4_t)v312, v9), v13);
          v328 = vcvtq_s32_f32(v327);
          v327.i64[0] = vaddq_s32(v328, vcgtq_f32(vcvtq_f32_s32(v328), v327)).u64[0];
          v324 = *(int8x16_t *)(v296 + 16 * (v327.i32[0] + v327.i32[1] * (int)v294));
        }
        v329 = *((int *)a2 + 30);
        v330 = *((_QWORD *)a2 + 14);
        if (v5)
        {
          v331 = vaddq_s32(vcvtq_s32_f32(v315), vcltzq_f32(v315));
          v332 = (float32x2_t)vsubq_f32(v315, vcvtq_f32_s32(v331)).u64[0];
          v333 = (float32x4_t *)(v330 + 16 * (v331.i32[0] + v331.i32[1] * (int)v329));
          v334 = vaddq_f32(*v333, vmulq_n_f32(vsubq_f32(v333[1], *v333), v332.f32[0]));
          v335 = (int8x16_t)vaddq_f32(v334, vmulq_lane_f32(vsubq_f32(vaddq_f32(v333[v329], vmulq_n_f32(vsubq_f32(v333[(int)v329 + 1], v333[v329]), v332.f32[0])), v334), v332, 1));
        }
        else
        {
          v336 = vaddq_f32(v315, v13);
          v337 = vcvtq_s32_f32(v336);
          v336.i64[0] = vaddq_s32(v337, vcgtq_f32(vcvtq_f32_s32(v337), v336)).u64[0];
          v335 = *(int8x16_t *)(v330 + 16 * (v336.i32[0] + v336.i32[1] * (int)v329));
        }
        v324.i64[1] = v312.i64[1];
        v339 = *(int8x16_t *)(v246 + 304);
        v338 = *(int8x16_t *)(v246 + 320);
        v340 = (float32x4_t)vbslq_s8(v339, v320, v324);
        v341 = (int32x2_t)vmaxq_f32((float32x4_t)vextq_s8(v320, v320, 0xCuLL), v281).u64[0];
        v342 = (float32x4_t)vbslq_s8(v338, v320, v335);
        v343 = (float32x4_t)vdupq_lane_s32(v341, 0);
        v344 = vmvnq_s8(v339);
        v345 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v343), *(float32x4_t *)(v246 + 336)), *(float32x4_t *)(v246 + 352)), v252);
        v346 = vaddq_f32(vmulq_laneq_f32(v342, v281, 2), vmulq_f32(vmulq_f32(v345, vrecpsq_f32(v343, v345)), v340));
        v347 = *(int32x4_t *)(v246 + 160);
        v348 = vmulq_laneq_f32((float32x4_t)vrev64q_s32(v347), v340, 3);
        v343.i64[0] = v348.i64[0];
        v343.i64[1] = v342.i64[1];
        v349 = vcvtq_f32_s32(vcvtq_s32_f32(v343));
        v348.i64[0] = vsubq_f32(v348, vsubq_f32(v349, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v349, v343), v280, (int8x16_t)0))).u64[0];
        v348.i64[1] = v342.i64[1];
        v350.i64[0] = vminq_f32(vmaxq_f32(vsubq_f32(vmulq_laneq_f32(v348, (float32x4_t)v347, 2), (float32x4_t)v347), (float32x4_t)v251), (float32x4_t)v280).u64[0];
        v350.i64[1] = v342.i64[1];
        v351 = vorrq_s8(vandq_s8((int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(vnegq_f32(v350), v350)), v339), vandq_s8((int8x16_t)v350, v344));
        v352 = *(float32x4_t *)(v246 + 368);
        v353 = (int8x16_t)vsubq_f32(v346, v352);
        v354 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v246 + 192), (float32x4_t)vbslq_s8(v338, v351, v353));
        v355 = (int8x16_t)vaddq_f32((float32x4_t)v354, (float32x4_t)vextq_s8(v354, v354, 4uLL));
        v356 = (float32x4_t)vbslq_s8(v338, (int8x16_t)vaddq_f32((float32x4_t)v355, (float32x4_t)vextq_s8(v355, v355, 8uLL)), v353);
        v357 = vorrq_s8(vandq_s8(v273, (int8x16_t)vmulq_f32((float32x4_t)v351, (float32x4_t)v351)), vandq_s8(v351, v304));
        v358 = (float32x4_t)vorrq_s8(vandq_s8(v339, (int8x16_t)vaddq_f32(*(float32x4_t *)(v246 + 384), (float32x4_t)v357)), vandq_s8(v357, v344));
        v359 = (int8x16_t)vsubq_f32(v352, (float32x4_t)v347);
        v360 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(v359, v359, 0xCuLL), vmulq_lane_f32(v358, *(float32x2_t *)v358.f32, 1));
        v361 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v356, 3);
        v360.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v347, (int8x16_t)v347, 0xCuLL), (float32x4_t)v360).u64[0];
        v360.i64[1] = v358.i64[1];
        *(int8x16_t *)(v11 + 16 * v15) = vbslq_s8(v338, v360, (int8x16_t)vmulq_laneq_f32(vmulq_n_f32(vaddq_f32(v361, vmulq_f32(*(float32x4_t *)(v246 + 112), vsubq_f32(v356, v361))), *(float *)v360.i32), v358, 3));
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcBadTVNoise::GetDOD(HgcBadTVNoise *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 2)
  {
    if ((*(int (**)(HgcBadTVNoise *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) < 1)
      goto LABEL_5;
    goto LABEL_4;
  }
  if (a3 > 1)
  {
    v7 = &HGRectNull;
    return *(_QWORD *)v7;
  }
  if ((*(int (**)(HgcBadTVNoise *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) > 0)
  {
LABEL_4:
    v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    HGRectGrow(v5, v4, v6);
  }
LABEL_5:
  v7 = &HGRectInfinite;
  return *(_QWORD *)v7;
}

uint64_t HgcBadTVNoise::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 > 2)
    return 0;
  Input = HGRenderer::GetInput(a2, this, a3);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcBadTVNoise::HgcBadTVNoise(HgcBadTVNoise *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EB938;
  v3 = operator new();
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = xmmword_1B3051D70;
  *(int32x4_t *)(v3 + 224) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 240) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 256) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 272) = xmmword_1B3052300;
  *(_OWORD *)(v3 + 288) = xmmword_1B3052310;
  *(_OWORD *)(v3 + 304) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 320) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 336) = xmmword_1B3051BC0;
  __asm { FMOV            V2.4S, #1.0 }
  *(_OWORD *)(v3 + 352) = xmmword_1B3052320;
  *(_OWORD *)(v3 + 368) = _Q2;
  *(_OWORD *)(v3 + 432) = 0u;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 416) = 0u;
  *(_OWORD *)(v3 + 384) = xmmword_1B30511A0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcBadTVNoise *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  (*(void (**)(HgcBadTVNoise *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  (*(void (**)(HgcBadTVNoise *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 2, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28924F4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBadTVNoise::~HgcBadTVNoise(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EB938;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4019C028F0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBadTVNoise::~HgcBadTVNoise(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBadTVNoise::SetParameter(HgcBadTVNoise *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  __n128 *v14;
  __n128 *v15;
  int32x4_t v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_70;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_70;
    case 2:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 400) = a3;
      return v8;
    case 3:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 416) = a3;
      return v8;
    case 4:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_70;
    case 5:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_70;
    case 6:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_70;
    case 7:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_70;
    case 8:
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[6].n128_f32[0] == 0.0
        && v14[6].n128_f32[1] == a3.n128_f32[0]
        && v14[6].n128_f32[2] == 0.0
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u32[0] = 0;
      v14[6].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v14[6].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[27] = a3;
      goto LABEL_70;
    case 9:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[7].n128_f32[0] == a3.n128_f32[0]
        && v15[7].n128_f32[1] == a3.n128_f32[0]
        && v15[7].n128_f32[2] == a3.n128_f32[0]
        && v15[7].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v16 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v16.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v15[7] = (__n128)v16;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[28] = a3;
      goto LABEL_70;
    case 10:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[32] == a3.n128_f32[0] && v17[33] == a4 && v17[34] == a5 && v17[35] == a6)
        return 0;
      v17[32] = a3.n128_f32[0];
      v17[33] = a4;
      v17[34] = a5;
      v17[35] = a6;
      goto LABEL_70;
    case 11:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[36] == a3.n128_f32[0] && v18[37] == a4 && v18[38] == a5 && v18[39] == a6)
        return 0;
      v18[36] = a3.n128_f32[0];
      v18[37] = a4;
      v18[38] = a5;
      v18[39] = a6;
      goto LABEL_70;
    case 12:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[40] == a3.n128_f32[0] && v19[41] == a4 && v19[42] == a5 && v19[43] == a6)
        return 0;
      v19[40] = a3.n128_f32[0];
      v19[41] = a4;
      v19[42] = a5;
      v19[43] = a6;
      goto LABEL_70;
    case 13:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[44] == a3.n128_f32[0] && v20[45] == a4 && v20[46] == a5 && v20[47] == a6)
        return 0;
      v20[44] = a3.n128_f32[0];
      v20[45] = a4;
      v20[46] = a5;
      v20[47] = a6;
      goto LABEL_70;
    case 14:
      v21 = (float *)*((_QWORD *)this + 51);
      if (v21[48] == a3.n128_f32[0] && v21[49] == a4 && v21[50] == a5 && v21[51] == a6)
        return 0;
      v21[48] = a3.n128_f32[0];
      v21[49] = a4;
      v21[50] = a5;
      v21[51] = a6;
LABEL_70:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcBadTVNoise::GetParameter(HgcBadTVNoise *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_17;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_17;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[100];
      a3[1] = v6[101];
      a3[2] = v6[102];
      v4 = v6 + 103;
      goto LABEL_17;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[104];
      a3[1] = v7[105];
      a3[2] = v7[106];
      v4 = v7 + 107;
      goto LABEL_17;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[8];
      a3[1] = v8[9];
      a3[2] = v8[10];
      v4 = v8 + 11;
      goto LABEL_17;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[12];
      a3[1] = v9[13];
      a3[2] = v9[14];
      v4 = v9 + 15;
      goto LABEL_17;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[16];
      a3[1] = v10[17];
      a3[2] = v10[18];
      v4 = v10 + 19;
      goto LABEL_17;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[20];
      a3[1] = v11[21];
      a3[2] = v11[22];
      v4 = v11 + 23;
      goto LABEL_17;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[108];
      a3[1] = v12[109];
      a3[2] = v12[110];
      v4 = v12 + 111;
      goto LABEL_17;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[112];
      a3[1] = v13[113];
      a3[2] = v13[114];
      v4 = v13 + 115;
      goto LABEL_17;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[32];
      a3[1] = v14[33];
      a3[2] = v14[34];
      v4 = v14 + 35;
      goto LABEL_17;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[36];
      a3[1] = v15[37];
      a3[2] = v15[38];
      v4 = v15 + 39;
      goto LABEL_17;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[40];
      a3[1] = v16[41];
      a3[2] = v16[42];
      v4 = v16 + 43;
      goto LABEL_17;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[44];
      a3[1] = v17[45];
      a3[2] = v17[46];
      v4 = v17 + 47;
      goto LABEL_17;
    case 14:
      v18 = (float *)*((_QWORD *)this + 51);
      *a3 = v18[48];
      a3[1] = v18[49];
      a3[2] = v18[50];
      v4 = v18 + 51;
LABEL_17:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcPixellate::GetProgram(HgcPixellate *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000476\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = c0.w;\n"
             "    r0.xy = half2(frag._texCoord0.xy);\n"
             "    s0.x = dot(float3(r0.xyw), hg_Params[0].xyz);\n"
             "    s0.y = dot(float3(r0.xyw), hg_Params[1].xyz);\n"
             "    s0.xy = s0.xy - hg_Params[4].xy;\n"
             "    s0.xy = s0.xy*hg_Params[5].xx;\n"
             "    s0.xy = floor(s0.xy);\n"
             "    s0.xy = s0.xy + float2(c0.xx);\n"
             "    s0.xy = s0.xy*hg_Params[5].yy + hg_Params[4].xy;\n"
             "    s0.w = float(c0.w);\n"
             "    s1.x = dot(s0.xyw, hg_Params[2].xyz);\n"
             "    s1.y = dot(s0.xyw, hg_Params[3].xyz);\n"
             "    s1.xy = s1.xy + hg_Params[6].xy;\n"
             "    s1.xy = s1.xy*hg_Params[6].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=0107f939:ef0cb262:11f4b0de:2cc04d20\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0007:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000043c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = c0.w;\n"
             "    r0.xy = frag._texCoord0.xy;\n"
             "    r1.x = dot(r0.xyw, hg_Params[0].xyz);\n"
             "    r1.y = dot(r0.xyw, hg_Params[1].xyz);\n"
             "    r1.xy = r1.xy - hg_Params[4].xy;\n"
             "    r1.xy = r1.xy*hg_Params[5].xx;\n"
             "    r1.xy = floor(r1.xy);\n"
             "    r1.xy = r1.xy + c0.xx;\n"
             "    r1.xy = r1.xy*hg_Params[5].yy + hg_Params[4].xy;\n"
             "    r1.w = c0.w;\n"
             "    r0.x = dot(r1.xyw, hg_Params[2].xyz);\n"
             "    r0.y = dot(r1.xyw, hg_Params[3].xyz);\n"
             "    r0.xy = r0.xy + hg_Params[6].xy;\n"
             "    r0.xy = r0.xy*hg_Params[6].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=440cbbda:b6a1b8d5:85aa1c1f:37511405\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0007:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000508\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.w = c0.w;\n"
           "    r0.xy = hg_TexCoord0.xy;\n"
           "    r1.x = dot(r0.xyw, hg_ProgramLocal0.xyz);\n"
           "    r1.y = dot(r0.xyw, hg_ProgramLocal1.xyz);\n"
           "    r1.xy = r1.xy - hg_ProgramLocal4.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal5.xx;\n"
           "    r1.xy = floor(r1.xy);\n"
           "    r1.xy = r1.xy + c0.xx;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal5.yy + hg_ProgramLocal4.xy;\n"
           "    r1.w = c0.w;\n"
           "    r0.x = dot(r1.xyw, hg_ProgramLocal2.xyz);\n"
           "    r0.y = dot(r1.xyw, hg_ProgramLocal3.xyz);\n"
           "    r0.xy = r0.xy + hg_ProgramLocal6.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal6.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=0b6d2b85:129e9ec3:f86fe2b2:4c57f63c\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0007:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcPixellate::InitProgramDescriptor(HgcPixellate *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPixellate_hgc_visible", "//Metal1.0     \n//LEN=000000037b\n[[ visible ]] FragmentOut HgcPixellate_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = c0.w;\n"
    "    r0.xy = texCoord0.xy;\n"
    "    r1.x = dot(r0.xyw, hg_Params[0].xyz);\n"
    "    r1.y = dot(r0.xyw, hg_Params[1].xyz);\n"
    "    r1.xy = r1.xy - hg_Params[4].xy;\n"
    "    r1.xy = r1.xy*hg_Params[5].xx;\n"
    "    r1.xy = floor(r1.xy);\n"
    "    r1.xy = r1.xy + c0.xx;\n"
    "    r1.xy = r1.xy*hg_Params[5].yy + hg_Params[4].xy;\n"
    "    r1.w = c0.w;\n"
    "    r0.x = dot(r1.xyw, hg_Params[2].xyz);\n"
    "    r0.y = dot(r1.xyw, hg_Params[3].xyz);\n"
    "    r0.xy = r0.xy + hg_Params[6].xy;\n"
    "    r0.xy = r0.xy*hg_Params[6].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2892C7C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPixellate");
}

void sub_1B2892C8C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2892E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2892E5C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2892E54);
}

_QWORD *HgcPixellate::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPixellate [hgc1]");
}

uint64_t HgcPixellate::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 6, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcPixellate::Bind(HgcPixellate *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcPixellate *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcPixellate::RenderTile(HgcPixellate *this, float32x4_t **a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int v16;
  float32x4_t *v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  float32x4_t v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unint64_t v25;
  float32x4_t v26;
  int8x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  __int128 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int8x16_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t *v83;
  int32x4_t v84;
  float32x2_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  float32x4_t *v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  float32x4_t v106;
  int32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;
  uint64_t v112;
  uint64_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  float32x4_t v117;
  int8x8_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int8x16_t v121;
  float32x4_t v122;
  float32x4_t v123;
  __int128 v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int32x4_t v129;
  int32x4_t v130;
  uint64_t v131;
  float32x4_t v132;
  float32x4_t *v133;
  int32x4_t v134;
  float32x2_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int32x4_t v140;

  v4 = HGTile::Renderer((HGTile *)a2);
  v5 = (*(uint64_t (**)(HgcPixellate *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = (int32x2_t)*a2;
  v7 = *((_DWORD *)a2 + 3) - ((unint64_t)*a2 >> 32);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = a2[2];
    v12 = v11 + 2;
    v13 = 16 * *((int *)a2 + 6);
    v14.i64[0] = 0x3F0000003F000000;
    v14.i64[1] = 0x3F0000003F000000;
    v15 = v9;
    do
    {
      if (v10 < 4)
      {
        LODWORD(v112) = 0;
        v18 = (int8x16_t)v15;
      }
      else
      {
        v16 = 0;
        v17 = v12;
        v18 = (int8x16_t)v15;
        do
        {
          v19 = (int8x16_t)vaddq_f32((float32x4_t)v18, (float32x4_t)xmmword_1B304F230);
          v20 = (int8x16_t)vaddq_f32((float32x4_t)v19, (float32x4_t)xmmword_1B304F230);
          v21 = vaddq_f32((float32x4_t)v20, (float32x4_t)xmmword_1B304F230);
          v22 = *((_QWORD *)this + 51);
          v24 = *(int8x16_t *)(v22 + 96);
          v23 = *(int8x16_t *)(v22 + 112);
          v25 = vextq_s8(v24, v24, 8uLL).u64[0];
          v18.i64[1] = v25;
          *(int8x8_t *)v26.f32 = vqtbl1_s8(v18, *(int8x8_t *)v23.i8);
          v27 = (int8x8_t)vextq_s8(v23, v23, 8uLL).u64[0];
          *(int8x8_t *)&v26.u32[2] = vqtbl1_s8(v18, v27);
          v19.i64[1] = v25;
          *(int8x8_t *)v28.f32 = vqtbl1_s8(v19, *(int8x8_t *)v23.i8);
          *(int8x8_t *)&v28.u32[2] = vqtbl1_s8(v19, v27);
          v20.i64[1] = v25;
          *(int8x8_t *)v19.i8 = vqtbl1_s8(v20, *(int8x8_t *)v23.i8);
          v19.u64[1] = (unint64_t)vqtbl1_s8(v20, v27);
          v20.i64[0] = v21.i64[0];
          v20.i64[1] = v25;
          *(int8x8_t *)v29.f32 = vqtbl1_s8(v20, *(int8x8_t *)v23.i8);
          *(int8x8_t *)&v29.u32[2] = vqtbl1_s8(v20, v27);
          v30 = *(float32x4_t *)(v22 + 16);
          v31 = (int32x4_t)vmulq_f32(v26, *(float32x4_t *)v22);
          v32 = (int32x4_t)vmulq_f32(v28, *(float32x4_t *)v22);
          v33 = (int32x4_t)vmulq_f32((float32x4_t)v19, *(float32x4_t *)v22);
          v34 = (int32x4_t)vmulq_f32(*(float32x4_t *)v22, v29);
          v35 = (int32x4_t)vmulq_f32(v26, v30);
          v36 = (int32x4_t)vmulq_f32(v28, v30);
          v37 = (int32x4_t)vmulq_f32((float32x4_t)v19, v30);
          v38 = (int32x4_t)vmulq_f32(v29, v30);
          v39 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), vaddq_f32((float32x4_t)v36, (float32x4_t)vrev64q_s32(v36)));
          v40 = *(int8x16_t *)(v22 + 128);
          v41 = *(float32x4_t *)(v22 + 144);
          v42 = (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL), vaddq_f32((float32x4_t)v31, (float32x4_t)vrev64q_s32(v31))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), vaddq_f32((float32x4_t)v35, (float32x4_t)vrev64q_s32(v35))));
          v43 = (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL), vaddq_f32((float32x4_t)v34, (float32x4_t)vrev64q_s32(v34))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL), vaddq_f32((float32x4_t)v38, (float32x4_t)vrev64q_s32(v38))));
          v44 = *(float32x4_t *)(v22 + 64);
          v45 = *(_OWORD *)(v22 + 80);
          v46 = vmulq_n_f32(vsubq_f32(v42, v44), *(float *)&v45);
          v47 = vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), vaddq_f32((float32x4_t)v32, (float32x4_t)vrev64q_s32(v32))), v39), v44), *(float *)&v45);
          v48 = vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), vaddq_f32((float32x4_t)v33, (float32x4_t)vrev64q_s32(v33))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL), vaddq_f32((float32x4_t)v37, (float32x4_t)vrev64q_s32(v37)))), v44), *(float *)&v45);
          v49 = vmulq_n_f32(vsubq_f32(v43, v44), *(float *)&v45);
          v50 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
          v51 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
          v52 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
          v53 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
          v54 = (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v50, v46));
          v55 = (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v51, v47));
          v56 = (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v52, v48));
          v57 = (float32x4_t)vandq_s8(v24, (int8x16_t)vcgtq_f32(v53, v49));
          v58 = (int8x16_t)vaddq_f32(v44, vmulq_lane_f32(vaddq_f32(v41, vsubq_f32(v50, v54)), *(float32x2_t *)&v45, 1));
          v59 = (int8x16_t)vaddq_f32(v44, vmulq_lane_f32(vaddq_f32(v41, vsubq_f32(v51, v55)), *(float32x2_t *)&v45, 1));
          v60 = (int8x16_t)vaddq_f32(v44, vmulq_lane_f32(vaddq_f32(v41, vsubq_f32(v52, v56)), *(float32x2_t *)&v45, 1));
          v61 = (int8x16_t)vaddq_f32(v44, vmulq_lane_f32(vaddq_f32(v41, vsubq_f32(v53, v57)), *(float32x2_t *)&v45, 1));
          v62 = v58;
          v62.i32[3] = 1.0;
          v63 = v59;
          v63.i32[3] = 1.0;
          v64 = v60;
          v64.i32[3] = 1.0;
          v65 = v61;
          v65.i32[3] = 1.0;
          v58.i64[1] = vextq_s8(v62, v62, 8uLL).u64[0];
          *(int8x8_t *)v62.i8 = vqtbl1_s8(v58, *(int8x8_t *)v23.i8);
          v62.u64[1] = (unint64_t)vqtbl1_s8(v58, v27);
          v59.i64[1] = vextq_s8(v63, v63, 8uLL).u64[0];
          *(int8x8_t *)v58.i8 = vqtbl1_s8(v59, *(int8x8_t *)v23.i8);
          v58.u64[1] = (unint64_t)vqtbl1_s8(v59, v27);
          v60.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
          *(int8x8_t *)v59.i8 = vqtbl1_s8(v60, *(int8x8_t *)v23.i8);
          v59.u64[1] = (unint64_t)vqtbl1_s8(v60, v27);
          v61.i64[1] = vextq_s8(v65, v65, 8uLL).u64[0];
          *(int8x8_t *)v23.i8 = vqtbl1_s8(v61, *(int8x8_t *)v23.i8);
          v23.u64[1] = (unint64_t)vqtbl1_s8(v61, v27);
          v66 = *(float32x4_t *)(v22 + 32);
          v67 = *(float32x4_t *)(v22 + 48);
          v68 = (int32x4_t)vmulq_f32((float32x4_t)v62, v66);
          v69 = (int32x4_t)vmulq_f32((float32x4_t)v58, v66);
          v70 = (int32x4_t)vmulq_f32((float32x4_t)v59, v66);
          v71 = (int32x4_t)vmulq_f32(v66, (float32x4_t)v23);
          v72 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 8uLL), vaddq_f32((float32x4_t)v71, (float32x4_t)vrev64q_s32(v71)));
          v73 = (int32x4_t)vmulq_f32((float32x4_t)v62, v67);
          v74 = (int32x4_t)vmulq_f32((float32x4_t)v58, v67);
          v75 = (int32x4_t)vmulq_f32((float32x4_t)v59, v67);
          v76 = (int32x4_t)vmulq_f32((float32x4_t)v23, v67);
          v77 = (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), vaddq_f32((float32x4_t)v68, (float32x4_t)vrev64q_s32(v68))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL), vaddq_f32((float32x4_t)v73, (float32x4_t)vrev64q_s32(v73))));
          v78 = (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL), vaddq_f32((float32x4_t)v69, (float32x4_t)vrev64q_s32(v69))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL), vaddq_f32((float32x4_t)v74, (float32x4_t)vrev64q_s32(v74))));
          v79 = (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL), vaddq_f32((float32x4_t)v70, (float32x4_t)vrev64q_s32(v70))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL), vaddq_f32((float32x4_t)v75, (float32x4_t)vrev64q_s32(v75))));
          v80 = (float32x4_t)vbslq_s8(v40, v72, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL), vaddq_f32((float32x4_t)v76, (float32x4_t)vrev64q_s32(v76))));
          v81 = *((int *)a2 + 22);
          v82 = vsubq_f32(v77, v9);
          v83 = a2[10];
          if (v5)
          {
            v84 = vaddq_s32(vcvtq_s32_f32(v82), vcltzq_f32(v82));
            v85 = (float32x2_t)vsubq_f32(v82, vcvtq_f32_s32(v84)).u64[0];
            v86 = &v83[v84.i32[0] + v84.i32[1] * (int)v81];
            v87 = vaddq_f32(*v86, vmulq_n_f32(vsubq_f32(v86[1], *v86), v85.f32[0]));
            v88 = vaddq_f32(v87, vmulq_lane_f32(vsubq_f32(vaddq_f32(v86[v81], vmulq_n_f32(vsubq_f32(v86[(int)v81 + 1], v86[v81]), v85.f32[0])), v87), v85, 1));
            v89 = vsubq_f32(v78, v9);
            v90 = vaddq_s32(vcvtq_s32_f32(v89), vcltzq_f32(v89));
            v89.i64[0] = vsubq_f32(v89, vcvtq_f32_s32(v90)).u64[0];
            v91 = &v83[v90.i32[0] + v90.i32[1] * (int)v81];
            v92 = vaddq_f32(*v91, vmulq_n_f32(vsubq_f32(v91[1], *v91), v89.f32[0]));
            v93 = vaddq_f32(v92, vmulq_lane_f32(vsubq_f32(vaddq_f32(v91[v81], vmulq_n_f32(vsubq_f32(v91[(int)v81 + 1], v91[v81]), v89.f32[0])), v92), *(float32x2_t *)v89.f32, 1));
            v94 = vsubq_f32(v79, v9);
            v95 = vaddq_s32(vcvtq_s32_f32(v94), vcltzq_f32(v94));
            v94.i64[0] = vsubq_f32(v94, vcvtq_f32_s32(v95)).u64[0];
            v96 = &v83[v95.i32[0] + v95.i32[1] * (int)v81];
            v97 = vaddq_f32(*v96, vmulq_n_f32(vsubq_f32(v96[1], *v96), v94.f32[0]));
            v98 = vaddq_f32(v97, vmulq_lane_f32(vsubq_f32(vaddq_f32(v96[v81], vmulq_n_f32(vsubq_f32(v96[(int)v81 + 1], v96[v81]), v94.f32[0])), v97), *(float32x2_t *)v94.f32, 1));
            v99 = vsubq_f32(v80, v9);
            v100 = vaddq_s32(vcvtq_s32_f32(v99), vcltzq_f32(v99));
            v99.i64[0] = vsubq_f32(v99, vcvtq_f32_s32(v100)).u64[0];
            v101 = &v83[v100.i32[0] + v100.i32[1] * (int)v81];
            v102 = vaddq_f32(*v101, vmulq_n_f32(vsubq_f32(v101[1], *v101), v99.f32[0]));
            v103 = vaddq_f32(v102, vmulq_lane_f32(vsubq_f32(vaddq_f32(v101[v81], vmulq_n_f32(vsubq_f32(v101[(int)v81 + 1], v101[v81]), v99.f32[0])), v102), *(float32x2_t *)v99.f32, 1));
          }
          else
          {
            v104 = vaddq_f32(v82, v14);
            v105 = vcvtq_s32_f32(v104);
            v104.i64[0] = vaddq_s32(v105, vcgtq_f32(vcvtq_f32_s32(v105), v104)).u64[0];
            v88 = v83[v104.i32[0] + v104.i32[1] * (int)v81];
            v106 = vaddq_f32(vsubq_f32(v78, v9), v14);
            v107 = vcvtq_s32_f32(v106);
            v106.i64[0] = vaddq_s32(v107, vcgtq_f32(vcvtq_f32_s32(v107), v106)).u64[0];
            v93 = v83[v106.i32[0] + v106.i32[1] * (int)v81];
            v108 = vaddq_f32(vsubq_f32(v79, v9), v14);
            v109 = vcvtq_s32_f32(v108);
            v108.i64[0] = vaddq_s32(v109, vcgtq_f32(vcvtq_f32_s32(v109), v108)).u64[0];
            v98 = v83[v108.i32[0] + v108.i32[1] * (int)v81];
            v110 = vaddq_f32(vsubq_f32(v80, v9), v14);
            v111 = vcvtq_s32_f32(v110);
            v110.i64[0] = vaddq_s32(v111, vcgtq_f32(vcvtq_f32_s32(v111), v110)).u64[0];
            v103 = v83[v110.i32[0] + v110.i32[1] * (int)v81];
          }
          v17[-2] = v88;
          v17[-1] = v93;
          *v17 = v98;
          v17[1] = v103;
          v17 += 4;
          v18 = (int8x16_t)vaddq_f32(v21, (float32x4_t)xmmword_1B304F230);
          v16 -= 4;
        }
        while (v10 + v16 > 3);
        LODWORD(v112) = -v16;
      }
      if ((int)v112 < v10)
      {
        v112 = v112;
        do
        {
          v113 = *((_QWORD *)this + 51);
          v114 = *(int8x16_t *)(v113 + 96);
          v115 = *(int8x16_t *)(v113 + 112);
          v116.i64[0] = v18.i64[0];
          v116.i64[1] = vextq_s8(v114, v114, 8uLL).u64[0];
          *(int8x8_t *)v117.f32 = vqtbl1_s8(v116, *(int8x8_t *)v115.i8);
          v118 = (int8x8_t)vextq_s8(v115, v115, 8uLL).u64[0];
          *(int8x8_t *)&v117.u32[2] = vqtbl1_s8(v116, v118);
          v119 = (int32x4_t)vmulq_f32(*(float32x4_t *)v113, v117);
          v120 = (int32x4_t)vmulq_f32(v117, *(float32x4_t *)(v113 + 16));
          v121 = *(int8x16_t *)(v113 + 128);
          v122 = (float32x4_t)vbslq_s8(v121, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL), vaddq_f32((float32x4_t)v119, (float32x4_t)vrev64q_s32(v119))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 4uLL), vaddq_f32((float32x4_t)v120, (float32x4_t)vrev64q_s32(v120))));
          v123 = *(float32x4_t *)(v113 + 64);
          v124 = *(_OWORD *)(v113 + 80);
          v125 = vmulq_n_f32(vsubq_f32(v122, v123), *(float *)&v124);
          v126 = vcvtq_f32_s32(vcvtq_s32_f32(v125));
          v127 = (int8x16_t)vaddq_f32(v123, vmulq_lane_f32(vaddq_f32(*(float32x4_t *)(v113 + 144), vsubq_f32(v126, (float32x4_t)vandq_s8(v114, (int8x16_t)vcgtq_f32(v126, v125)))), *(float32x2_t *)&v124, 1));
          v128 = v127;
          v128.i32[3] = 1.0;
          v127.i64[1] = vextq_s8(v128, v128, 8uLL).u64[0];
          *(int8x8_t *)v115.i8 = vqtbl1_s8(v127, *(int8x8_t *)v115.i8);
          v115.u64[1] = (unint64_t)vqtbl1_s8(v127, v118);
          v129 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v113 + 32), (float32x4_t)v115);
          v130 = (int32x4_t)vmulq_f32((float32x4_t)v115, *(float32x4_t *)(v113 + 48));
          v131 = *((int *)a2 + 22);
          v132 = vsubq_f32((float32x4_t)vbslq_s8(v121, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), vaddq_f32((float32x4_t)v129, (float32x4_t)vrev64q_s32(v129))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v130, (int8x16_t)v130, 4uLL), vaddq_f32((float32x4_t)v130, (float32x4_t)vrev64q_s32(v130)))), v9);
          v133 = a2[10];
          if (v5)
          {
            v134 = vaddq_s32(vcvtq_s32_f32(v132), vcltzq_f32(v132));
            v135 = (float32x2_t)vsubq_f32(v132, vcvtq_f32_s32(v134)).u64[0];
            v136 = &v133[v134.i32[0] + v134.i32[1] * (int)v131];
            v137 = vaddq_f32(*v136, vmulq_n_f32(vsubq_f32(v136[1], *v136), v135.f32[0]));
            v138 = vaddq_f32(v137, vmulq_lane_f32(vsubq_f32(vaddq_f32(v136[v131], vmulq_n_f32(vsubq_f32(v136[(int)v131 + 1], v136[v131]), v135.f32[0])), v137), v135, 1));
          }
          else
          {
            v139 = vaddq_f32(v132, v14);
            v140 = vcvtq_s32_f32(v139);
            v139.i64[0] = vaddq_s32(v140, vcgtq_f32(vcvtq_f32_s32(v140), v139)).u64[0];
            v138 = v133[v139.i32[0] + v139.i32[1] * (int)v131];
          }
          v11[v112] = v138;
          v18 = (int8x16_t)vaddq_f32((float32x4_t)v18, (float32x4_t)xmmword_1B304F230);
          ++v112;
        }
        while (v112 < v10);
      }
      v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v12 = (float32x4_t *)((char *)v12 + v13);
      v11 = (float32x4_t *)((char *)v11 + v13);
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcPixellate::GetDOD(HgcPixellate *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcPixellate *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcPixellate::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcPixellate::HgcPixellate(HgcPixellate *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EBBA0;
  v3 = (_OWORD *)operator new();
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[6] = xmmword_1B3051310;
  v3[7] = xmmword_1B30517F0;
  v3[8] = xmmword_1B3050E20;
  v3[9] = xmmword_1B3052100;
  v3[10] = 0u;
  v3[11] = 0u;
  v3[12] = 0u;
  v3[13] = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcPixellate *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B289398C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPixellate::~HgcPixellate(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EBBA0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C405DF52C91);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcPixellate::~HgcPixellate(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPixellate::SetParameter(HgcPixellate *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v7;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  float *v12;
  float *v13;

  switch((int)a2)
  {
    case 0:
      v7 = (__n128 *)*((_QWORD *)this + 51);
      if (v7->n128_f32[0] == a3.n128_f32[0] && v7->n128_f32[1] == a4 && v7->n128_f32[2] == a6 && v7->n128_f32[3] == 0.0)
        return 0;
      v7->n128_u32[0] = a3.n128_u32[0];
      v7->n128_f32[1] = a4;
      v7->n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v7->n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v7[10] = a3;
      goto LABEL_33;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] == a3.n128_f32[0]
        && v9[1].n128_f32[1] == a4
        && v9[1].n128_f32[2] == a6
        && v9[1].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v9[1].n128_u32[0] = a3.n128_u32[0];
      v9[1].n128_f32[1] = a4;
      v9[1].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v9[1].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[11] = a3;
      goto LABEL_33;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == a3.n128_f32[0]
        && v10[2].n128_f32[1] == a4
        && v10[2].n128_f32[2] == a6
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u32[0] = a3.n128_u32[0];
      v10[2].n128_f32[1] = a4;
      v10[2].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v10[2].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[12] = a3;
      goto LABEL_33;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == a3.n128_f32[0]
        && v11[3].n128_f32[1] == a4
        && v11[3].n128_f32[2] == a6
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u32[0] = a3.n128_u32[0];
      v11[3].n128_f32[1] = a4;
      v11[3].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[13] = a3;
      goto LABEL_33;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_33;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
LABEL_33:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcPixellate::GetParameter(HgcPixellate *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[40];
      a3[1] = v3[41];
      a3[2] = v3[42];
      v4 = v3 + 43;
      goto LABEL_8;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[44];
      a3[1] = v5[45];
      a3[2] = v5[46];
      v4 = v5 + 47;
      goto LABEL_8;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[48];
      a3[1] = v6[49];
      a3[2] = v6[50];
      v4 = v6 + 51;
      goto LABEL_8;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[52];
      a3[1] = v7[53];
      a3[2] = v7[54];
      v4 = v7 + 55;
      goto LABEL_8;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_8;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
LABEL_8:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcSoftGradient::GetProgram(HgcSoftGradient *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000424\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(9.999999975e-07, 2.000000000, 3.000000000, 1.000000000);\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy;\n"
             "    s0.w = float(c0.w);\n"
             "    s1.x = dot(s0.xyw, hg_Params[3].xyz);\n"
             "    s2.y = dot(s0.xyw, hg_Params[4].xyz);\n"
             "    s3.z = dot(s0.xyw, hg_Params[5].xyz);\n"
             "    s1.y = s2.y;\n"
             "    s1.z = s3.z;\n"
             "    s1.w = dot(s0.xyw, hg_Params[6].xyz);\n"
             "    s2 = 1.00000f / s1.wwww;\n"
             "    s2 = s1*s2 + hg_Params[0];\n"
             "    s2 = float4(dot(s2, s2));\n"
             "    s3.x = s2.x + float(c0.x);\n"
             "    s3 = rsqrt(s3.xxxx);\n"
             "    s3 = s2*s3;\n"
             "    s3 = clamp(s3*hg_Params[2] + float4(c0.wwww), 0.00000f, 1.00000f);\n"
             "    s0 = -s3*float4(c0.yyyy) + float4(c0.zzzz);\n"
             "    s3 = s3*s3;\n"
             "    s3 = s3*s0;\n"
             "    output.color0 = hg_Params[1]*s3;\n"
             "    return output;\n"
             "}\n"
             "//MD5=55e05c77:ee2e26c8:a35b3ccf:c483c97d\n"
             "//SIG=00400000:00000000:00000000:00000000:0001:0007:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000400\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(9.999999975e-07, 2.000000000, 3.000000000, 1.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy;\n"
             "    r0.w = c0.w;\n"
             "    r1.x = dot(r0.xyw, hg_Params[3].xyz);\n"
             "    r2.y = dot(r0.xyw, hg_Params[4].xyz);\n"
             "    r3.z = dot(r0.xyw, hg_Params[5].xyz);\n"
             "    r1.y = r2.y;\n"
             "    r1.z = r3.z;\n"
             "    r1.w = dot(r0.xyw, hg_Params[6].xyz);\n"
             "    r2 = 1.00000f / r1.wwww;\n"
             "    r2 = r1*r2 + hg_Params[0];\n"
             "    r2 = float4(dot(r2, r2));\n"
             "    r3.x = r2.x + c0.x;\n"
             "    r3 = rsqrt(r3.xxxx);\n"
             "    r3 = r2*r3;\n"
             "    r3 = clamp(r3*hg_Params[2] + c0.wwww, 0.00000f, 1.00000f);\n"
             "    r0 = -r3*c0.yyyy + c0.zzzz;\n"
             "    r3 = r3*r3;\n"
             "    r3 = r3*r0;\n"
             "    output.color0 = hg_Params[1]*r3;\n"
             "    return output;\n"
             "}\n"
             "//MD5=1cc6da38:f890ee88:351e9368:bd36a39f\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0007:0004:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000515\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(9.999999975e-07, 2.000000000, 3.000000000, 1.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy;\n"
           "    r0.w = c0.w;\n"
           "    r1.x = dot(r0.xyw, hg_ProgramLocal3.xyz);\n"
           "    r2.y = dot(r0.xyw, hg_ProgramLocal4.xyz);\n"
           "    r3.z = dot(r0.xyw, hg_ProgramLocal5.xyz);\n"
           "    r1.y = r2.y;\n"
           "    r1.z = r3.z;\n"
           "    r1.w = dot(r0.xyw, hg_ProgramLocal6.xyz);\n"
           "    r2 = vec4(1.00000) / r1.wwww;\n"
           "    r2 = r1*r2 + hg_ProgramLocal0;\n"
           "    r2 = vec4(dot(r2, r2));\n"
           "    r3.x = r2.x + c0.x;\n"
           "    r3 = inversesqrt(r3.xxxx);\n"
           "    r3 = r2*r3;\n"
           "    r3 = clamp(r3*hg_ProgramLocal2 + c0.wwww, vec4(0.00000), vec4(1.00000));\n"
           "    r0 = -r3*c0.yyyy + c0.zzzz;\n"
           "    r3 = r3*r3;\n"
           "    r3 = r3*r0;\n"
           "    gl_FragColor = hg_ProgramLocal1*r3;\n"
           "}\n"
           "//MD5=efdce9e6:1314f22d:1502dc67:5c9715c8\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0007:0004:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcSoftGradient::InitProgramDescriptor(HgcSoftGradient *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSoftGradient_hgc_visible", "//Metal1.0     \n//LEN=0000000364\n[[ visible ]] FragmentOut HgcSoftGradient_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(9.999999975e-07, 2.000000000, 3.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy;\n"
    "    r0.w = c0.w;\n"
    "    r1.x = dot(r0.xyw, hg_Params[3].xyz);\n"
    "    r2.y = dot(r0.xyw, hg_Params[4].xyz);\n"
    "    r3.z = dot(r0.xyw, hg_Params[5].xyz);\n"
    "    r1.y = r2.y;\n"
    "    r1.z = r3.z;\n"
    "    r1.w = dot(r0.xyw, hg_Params[6].xyz);\n"
    "    r2 = 1.00000f / r1.wwww;\n"
    "    r2 = r1*r2 + hg_Params[0];\n"
    "    r2 = float4(dot(r2, r2));\n"
    "    r3.x = r2.x + c0.x;\n"
    "    r3 = rsqrt(r3.xxxx);\n"
    "    r3 = r2*r3;\n"
    "    r3 = clamp(r3*hg_Params[2] + c0.wwww, 0.00000f, 1.00000f);\n"
    "    r0 = -r3*c0.yyyy + c0.zzzz;\n"
    "    r3 = r3*r3;\n"
    "    r3 = r3*r0;\n"
    "    output.color0 = hg_Params[1]*r3;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2893DF4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSoftGradient");
}

void sub_1B2893E04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2893F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2893F44()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2893F3CLL);
}

_QWORD *HgcSoftGradient::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSoftGradient [hgc1]");
}

uint64_t HgcSoftGradient::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcSoftGradient::Bind(HgcSoftGradient *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HgcSoftGradient *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSoftGradient::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  int8x8_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t *v71;
  int8x16_t v72;
  uint64_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v6 = a2[2];
    v7.i64[1] = 0x3F80000000000000;
    v8 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 2)
      {
        v9 = 0;
        v11 = v7;
      }
      else
      {
        v9 = 0;
        v10 = v5;
        v11 = v7;
        do
        {
          v12 = (int8x16_t)v11;
          v13 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F230);
          v12.i32[3] = 1.0;
          v14 = vextq_s8(v12, v12, 8uLL).u64[0];
          v15 = *(_QWORD *)(a1 + 408);
          v12.i64[0] = v13.i64[0];
          v16 = (int8x16_t)v13;
          v11.i64[1] = v14;
          v17 = *(float32x4_t *)(v15 + 96);
          v18 = *(int8x16_t *)(v15 + 112);
          v16.i32[3] = 1.0;
          *(int8x8_t *)v19.f32 = vqtbl1_s8((int8x16_t)v11, *(int8x8_t *)v18.i8);
          v20 = (int8x8_t)vextq_s8(v18, v18, 8uLL).u64[0];
          *(int8x8_t *)&v19.u32[2] = vqtbl1_s8((int8x16_t)v11, v20);
          v12.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
          *(int8x8_t *)v21.f32 = vqtbl1_s8(v12, *(int8x8_t *)v18.i8);
          v23 = *(float32x4_t *)(v15 + 32);
          v22 = *(float32x4_t *)(v15 + 48);
          *(int8x8_t *)v12.i8 = vqtbl1_s8(v12, v20);
          v24 = vmulq_f32(v19, v22);
          v25 = *(float32x4_t *)(v15 + 64);
          v26 = *(float32x4_t *)(v15 + 80);
          v27 = vmulq_f32(v19, v25);
          v21.i64[1] = v12.i64[0];
          v28 = vmulq_f32(v19, v26);
          v29 = vmulq_f32(v22, v21);
          v30 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v7, 4uLL), vaddq_f32(v27, (float32x4_t)vrev64q_s32((int32x4_t)v27)));
          v31 = vaddq_f32(v28, vaddq_f32((float32x4_t)vdupq_lane_s64(v28.i64[0], 0), (float32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v28, 0xCuLL)));
          v32 = *(int8x16_t *)(v15 + 128);
          v33 = *(int8x16_t *)(v15 + 144);
          v34 = vmulq_f32(v21, v25);
          v30.i64[0] = vbslq_s8(v32, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v24, 1), vaddq_f32(v24, (float32x4_t)vrev64q_s32((int32x4_t)v24))), v30).u64[0];
          v35 = vmulq_f32(v21, v26);
          v30.i64[1] = v31.i64[1];
          v36 = (int32x4_t)vmulq_f32(v19, v17);
          v37 = (int32x4_t)vmulq_f32(v21, v17);
          v29.i64[0] = vbslq_s8(v32, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v29, 1), vaddq_f32(v29, (float32x4_t)vrev64q_s32((int32x4_t)v29))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v7, 4uLL), vaddq_f32(v34, (float32x4_t)vrev64q_s32((int32x4_t)v34)))).u64[0];
          v29.i64[1] = vaddq_f32(v35, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v35, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v7, *(int8x16_t *)&v35, 0xCuLL))).i64[1];
          v38 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v36), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL))), v30);
          v39 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v37), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL))), (int8x16_t)v29);
          v40 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 3);
          v41 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 3);
          v42 = *(float32x4_t *)(v15 + 160);
          v43 = *(float32x4_t *)(v15 + 176);
          v44 = vminq_f32(vmaxq_f32(vrecpeq_f32(v40), v42), v43);
          v45 = vminq_f32(vmaxq_f32(vrecpeq_f32(v41), v42), v43);
          v46 = vminq_f32(vmaxq_f32(vmulq_f32(v44, vrecpsq_f32(v40, v44)), v42), v43);
          v47 = vminq_f32(vmaxq_f32(vmulq_f32(v45, vrecpsq_f32(v41, v45)), v42), v43);
          v48 = vmulq_f32(vmulq_f32(v46, vrecpsq_f32(v40, v46)), v38);
          v49 = *(float32x4_t *)(v15 + 16);
          v50 = vaddq_f32(v48, *(float32x4_t *)v15);
          v51 = vaddq_f32(*(float32x4_t *)v15, vmulq_f32(vmulq_f32(v47, vrecpsq_f32(v41, v47)), v39));
          v52 = vmulq_f32(v50, v50);
          v53 = vmulq_f32(v51, v51);
          v54 = vaddq_f32(v52, (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 4uLL));
          v55 = vaddq_f32(v53, (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 4uLL));
          v56 = vaddq_f32(v54, (float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL));
          v57 = *(float32x4_t *)(v15 + 192);
          v58 = *(float32x4_t *)(v15 + 208);
          v59 = vaddq_f32(v55, (float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL));
          v42.i64[0] = vaddq_f32(v57, v56).u64[0];
          v57.i64[0] = vaddq_f32(v57, v59).u64[0];
          v11 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v60 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 0)), v43);
          v61 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 0)), v43);
          v62 = vminq_f32(vmulq_f32(v60, vrsqrtsq_f32(vmulq_n_f32(v60, v42.f32[0]), v60)), v43);
          v63 = vminq_f32(vmulq_f32(v61, vrsqrtsq_f32(vmulq_n_f32(v61, v57.f32[0]), v61)), v43);
          v64 = vmulq_f32(v56, vmulq_f32(v62, vrsqrtsq_f32(vmulq_n_f32(v62, v42.f32[0]), v62)));
          v65 = vaddq_f32(v58, vmulq_f32(vmulq_f32(v59, vmulq_f32(v63, vrsqrtsq_f32(vmulq_n_f32(v63, v57.f32[0]), v63))), v23));
          v66 = *(float32x4_t *)(v15 + 224);
          v67 = *(float32x4_t *)(v15 + 240);
          v68 = vminq_f32(vmaxq_f32(vaddq_f32(v58, vmulq_f32(v64, v23)), v66), v58);
          v69 = vminq_f32(vmaxq_f32(v65, v66), v58);
          v70 = *(float32x4_t *)(v15 + 256);
          v71 = (float32x4_t *)(*(_QWORD *)&v6 + 16 * v9);
          *v71 = vmulq_f32(v49, vmulq_f32(vmulq_f32(v68, v68), vsubq_f32(v67, vmulq_f32(v68, v70))));
          v71[1] = vmulq_f32(v49, vmulq_f32(vmulq_f32(v69, v69), vsubq_f32(v67, vmulq_f32(v69, v70))));
          v9 += 2;
          v10 -= 2;
        }
        while (v10 > 1);
        v9 = v9;
      }
      if ((int)v9 < v5)
      {
        v72 = (int8x16_t)v11;
        v72.i32[3] = 1.0;
        v73 = *(_QWORD *)(a1 + 408);
        v11.i64[1] = vextq_s8(v72, v72, 8uLL).u64[0];
        v74 = *(int8x16_t *)(v73 + 112);
        *(int8x8_t *)v75.f32 = vqtbl1_s8((int8x16_t)v11, *(int8x8_t *)v74.i8);
        *(int8x8_t *)&v75.u32[2] = vqtbl1_s8((int8x16_t)v11, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL));
        v76 = vmulq_f32(*(float32x4_t *)(v73 + 48), v75);
        v77 = vmulq_f32(v75, *(float32x4_t *)(v73 + 64));
        v78 = vmulq_f32(v75, *(float32x4_t *)(v73 + 80));
        v76.i64[0] = vbslq_s8(*(int8x16_t *)(v73 + 128), (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v76, 1), vaddq_f32(v76, (float32x4_t)vrev64q_s32((int32x4_t)v76))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v7, 4uLL), vaddq_f32(v77, (float32x4_t)vrev64q_s32((int32x4_t)v77)))).u64[0];
        v76.i64[1] = vaddq_f32(v78, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v78, 0), (float32x4_t)vextq_s8(*(int8x16_t *)&v7, *(int8x16_t *)&v78, 0xCuLL))).i64[1];
        v79 = (int32x4_t)vmulq_f32(v75, *(float32x4_t *)(v73 + 96));
        v80 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v73 + 144), (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v79), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL))), (int8x16_t)v76);
        v81 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 3);
        v82 = *(float32x4_t *)(v73 + 160);
        v83 = *(float32x4_t *)(v73 + 176);
        v84 = vminq_f32(vmaxq_f32(vrecpeq_f32(v81), v82), v83);
        v85 = vminq_f32(vmaxq_f32(vmulq_f32(v84, vrecpsq_f32(v81, v84)), v82), v83);
        v86 = vaddq_f32(*(float32x4_t *)v73, vmulq_f32(vmulq_f32(v85, vrecpsq_f32(v81, v85)), v80));
        v87 = vmulq_f32(v86, v86);
        v88 = vaddq_f32(v87, (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 4uLL));
        v89 = vaddq_f32(v88, (float32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL));
        v81.i64[0] = vaddq_f32(*(float32x4_t *)(v73 + 192), v89).u64[0];
        v90 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 0)), v83);
        v91 = vminq_f32(vmulq_f32(v90, vrsqrtsq_f32(vmulq_n_f32(v90, v81.f32[0]), v90)), v83);
        v92 = vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v73 + 208), vmulq_f32(vmulq_f32(v89, vmulq_f32(v91, vrsqrtsq_f32(vmulq_n_f32(v91, v81.f32[0]), v91))), *(float32x4_t *)(v73 + 32))), *(float32x4_t *)(v73 + 224)), *(float32x4_t *)(v73 + 208));
        *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v9) = vmulq_f32(*(float32x4_t *)(v73 + 16), vmulq_f32(vmulq_f32(v92, v92), vsubq_f32(*(float32x4_t *)(v73 + 240), vmulq_f32(v92, *(float32x4_t *)(v73 + 256)))));
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      *(_QWORD *)&v6 += v8;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcSoftGradient::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcSoftGradient::GetROI()
{
  return 0;
}

void HgcSoftGradient::HgcSoftGradient(HgcSoftGradient *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EBE08;
  v3 = operator new();
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  *(_OWORD *)v3 = v4;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = v4;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = xmmword_1B30517F0;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 144) = xmmword_1B3050F70;
  *(_QWORD *)&v5 = 0x80000000800000;
  *((_QWORD *)&v5 + 1) = 0x80000000800000;
  *(_OWORD *)(v3 + 160) = v5;
  *(int32x4_t *)(v3 + 176) = vdupq_n_s32(0x7F7FFFFFu);
  __asm { FMOV            V2.4S, #1.0 }
  *(_OWORD *)(v3 + 192) = xmmword_1B3052380;
  *(_OWORD *)(v3 + 208) = _Q2;
  __asm { FMOV            V0.4S, #3.0 }
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = _Q0;
  *(_QWORD *)&_Q0 = 0x4000000040000000;
  *((_QWORD *)&_Q0 + 1) = 0x4000000040000000;
  *(_OWORD *)(v3 + 256) = _Q0;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B289460C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSoftGradient::~HgcSoftGradient(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EBE08;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSoftGradient::~HgcSoftGradient(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSoftGradient::SetParameter(HgcSoftGradient *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7, double a8)
{
  float v8;
  float v9;
  float v10;
  __n128 *v11;
  float *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;

  switch((int)a2)
  {
    case 0:
      v8 = -a4;
      v9 = -a5;
      v10 = -a6;
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11->n128_f32[0] == (float)-a3.n128_f32[0]
        && v11->n128_f32[1] == v8
        && v11->n128_f32[2] == v9
        && v11->n128_f32[3] == v10)
      {
        return 0;
      }
      v11->n128_f32[0] = -a3.n128_f32[0];
      v11->n128_f32[1] = v8;
      a3.n128_f32[1] = a4;
      v11->n128_f32[2] = v9;
      v11->n128_f32[3] = v10;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[17] = a3;
      goto LABEL_38;
    case 1:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[4] == a3.n128_f32[0] && v13[5] == a4 && v13[6] == a5 && v13[7] == a6)
        return 0;
      v13[4] = a3.n128_f32[0];
      v13[5] = a4;
      v13[6] = a5;
      v13[7] = a6;
      goto LABEL_38;
    case 2:
      *(float *)&a8 = -a3.n128_f32[0];
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[2].n128_f32[0] == (float)-a3.n128_f32[0]
        && v14[2].n128_f32[1] == *(float *)&a8
        && v14[2].n128_f32[2] == *(float *)&a8
        && v14[2].n128_f32[3] == *(float *)&a8)
      {
        return 0;
      }
      a3.n128_f32[1] = a4;
      v14[2] = (__n128)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[18] = a3;
      goto LABEL_38;
    case 3:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[3].n128_f32[0] == a3.n128_f32[0]
        && v15[3].n128_f32[1] == a4
        && v15[3].n128_f32[2] == a6
        && v15[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v15[3].n128_u32[0] = a3.n128_u32[0];
      v15[3].n128_f32[1] = a4;
      v15[3].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v15[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[19] = a3;
      goto LABEL_38;
    case 4:
      v16 = (__n128 *)*((_QWORD *)this + 51);
      if (v16[4].n128_f32[0] == a3.n128_f32[0]
        && v16[4].n128_f32[1] == a4
        && v16[4].n128_f32[2] == a6
        && v16[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v16[4].n128_u32[0] = a3.n128_u32[0];
      v16[4].n128_f32[1] = a4;
      v16[4].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v16[4].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v16[20] = a3;
      goto LABEL_38;
    case 5:
      v17 = (__n128 *)*((_QWORD *)this + 51);
      if (v17[5].n128_f32[0] == a3.n128_f32[0]
        && v17[5].n128_f32[1] == a4
        && v17[5].n128_f32[2] == a6
        && v17[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v17[5].n128_u32[0] = a3.n128_u32[0];
      v17[5].n128_f32[1] = a4;
      v17[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v17[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v17[21] = a3;
      goto LABEL_38;
    case 6:
      v18 = (__n128 *)*((_QWORD *)this + 51);
      if (v18[6].n128_f32[0] == a3.n128_f32[0]
        && v18[6].n128_f32[1] == a4
        && v18[6].n128_f32[2] == a6
        && v18[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v18[6].n128_u32[0] = a3.n128_u32[0];
      v18[6].n128_f32[1] = a4;
      v18[6].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v18[6].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v18[22] = a3;
LABEL_38:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSoftGradient::GetParameter(HgcSoftGradient *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[68];
      a3[1] = v3[69];
      a3[2] = v3[70];
      v4 = v3 + 71;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[72];
      a3[1] = v6[73];
      a3[2] = v6[74];
      v4 = v6 + 75;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[76];
      a3[1] = v7[77];
      a3[2] = v7[78];
      v4 = v7 + 79;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[80];
      a3[1] = v8[81];
      a3[2] = v8[82];
      v4 = v8 + 83;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[84];
      a3[1] = v9[85];
      a3[2] = v9[86];
      v4 = v9 + 87;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[88];
      a3[1] = v10[89];
      a3[2] = v10[90];
      v4 = v10 + 91;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcSlitScanGlow::GetProgram(HgcSlitScanGlow *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000035c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s0.xyz = frag._texCoord1.xyz - hg_Params[3].xyz;\n"
             "    s0.xyz = hg_Params[0].xyz*float3(c0.xxz) + s0.xyz;\n"
             "    s0.y = dot(hg_Params[4].xyz, s0.xyz);\n"
             "    s0.x = hg_Params[1].x/fabs(s0.y);\n"
             "    output.color0 = s0.xxxx*hg_Params[2] + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3331e337:d9b358da:1e3761e2:0cc37934\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0005:0002:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000033d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = frag._texCoord1.xyz - hg_Params[3].xyz;\n"
             "    r1.xyz = hg_Params[0].xyz*c0.xxz + r1.xyz;\n"
             "    r1.y = dot(hg_Params[4].xyz, r1.xyz);\n"
             "    r1.x = hg_Params[1].x/fabs(r1.y);\n"
             "    output.color0 = r1.xxxx*hg_Params[2] + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=f117c655:742faaba:2178c20e:cb142331\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0005:0002:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003c8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = hg_TexCoord1.xyz - hg_ProgramLocal3.xyz;\n"
           "    r1.xyz = hg_ProgramLocal0.xyz*c0.xxz + r1.xyz;\n"
           "    r1.y = dot(hg_ProgramLocal4.xyz, r1.xyz);\n"
           "    r1.x = hg_ProgramLocal1.x/abs(r1.y);\n"
           "    gl_FragColor = r1.xxxx*hg_ProgramLocal2 + r0;\n"
           "}\n"
           "//MD5=15760490:e33b0e92:18590895:417bfdca\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0005:0002:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void HgcSlitScanGlow::InitProgramDescriptor(HgcSlitScanGlow *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSlitScanGlow_hgc_visible", "//Metal1.0     \n//LEN=0000000226\n[[ visible ]] FragmentOut HgcSlitScanGlow_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = texCoord1.xyz - hg_Params[3].xyz;\n"
    "    r1.xyz = hg_Params[0].xyz*c0.xxz + r1.xyz;\n"
    "    r1.y = dot(hg_Params[4].xyz, r1.xyz);\n"
    "    r1.x = hg_Params[1].x/fabs(r1.y);\n"
    "    output.color0 = r1.xxxx*hg_Params[2] + r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2894B0C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSlitScanGlow");
}

void sub_1B2894B1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2894C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2894CA4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2894C9CLL);
}

_QWORD *HgcSlitScanGlow::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSlitScanGlow [hgc1]");
}

uint64_t HgcSlitScanGlow::BindTexture(HgcSlitScanGlow *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcSlitScanGlow::Bind(HgcSlitScanGlow *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcSlitScanGlow *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSlitScanGlow::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  uint64_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    v7 = a2[10];
    *(float32x2_t *)v8.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8.i64[1] = 0x3F80000000000000;
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 3)
      {
        LODWORD(v39) = 0;
        v13 = v8;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = v8;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *(float32x4_t **)(a1 + 408);
          v17 = v16[3];
          v18 = v16[4];
          v19 = v16[6];
          v20 = v16[7];
          v21 = v16[1];
          v22 = v16[2];
          v23 = vmulq_f32(*v16, v16[5]);
          v24 = vmulq_f32(v18, vaddq_f32(vsubq_f32(v13, v17), v23));
          v25 = vmulq_f32(v18, vaddq_f32(vsubq_f32(v14, v17), v23));
          v26 = vmulq_f32(v18, vaddq_f32(vsubq_f32(v15, v17), v23));
          v27 = vabsq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL), vaddq_f32(v24, (float32x4_t)vrev64q_s32((int32x4_t)v24)))));
          v28 = vabsq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL), vaddq_f32(v25, (float32x4_t)vrev64q_s32((int32x4_t)v25)))));
          v29 = vabsq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL), vaddq_f32(v26, (float32x4_t)vrev64q_s32((int32x4_t)v26)))));
          v30 = vminq_f32(vmaxq_f32(vrecpeq_f32(v27), v19), v20);
          v31 = vminq_f32(vmaxq_f32(vrecpeq_f32(v28), v19), v20);
          v32 = vminq_f32(vmaxq_f32(vrecpeq_f32(v29), v19), v20);
          v33 = vminq_f32(vmaxq_f32(vmulq_f32(v30, vrecpsq_f32(v27, v30)), v19), v20);
          v34 = vminq_f32(vmaxq_f32(vmulq_f32(v31, vrecpsq_f32(v28, v31)), v19), v20);
          v35 = vminq_f32(vmaxq_f32(vmulq_f32(v32, vrecpsq_f32(v29, v32)), v19), v20);
          v36 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 16), vmulq_n_f32(v22, vmulq_f32(vmulq_f32(v34, vrecpsq_f32(v28, v34)), v21).f32[0]));
          v37 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 32), vmulq_n_f32(v22, vmulq_f32(vmulq_f32(v35, vrecpsq_f32(v29, v35)), v21).f32[0]));
          v38 = (float32x4_t *)(*(_QWORD *)&v6 + v11);
          *v38 = vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11), vmulq_n_f32(v22, vmulq_f32(vmulq_f32(v33, vrecpsq_f32(v27, v33)), v21).f32[0]));
          v38[1] = v36;
          v38[2] = v37;
          v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v12 -= 3;
          v11 += 48;
        }
        while (v5 + v12 > 2);
        LODWORD(v39) = -v12;
      }
      if ((int)v39 < v5)
      {
        v39 = v39;
        do
        {
          v40 = *(float32x4_t **)(a1 + 408);
          v41 = vmulq_f32(v40[4], vaddq_f32(vsubq_f32(v13, v40[3]), vmulq_f32(*v40, v40[5])));
          v42 = vabsq_f32((float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 4uLL), vaddq_f32(v41, (float32x4_t)vrev64q_s32((int32x4_t)v41)))));
          v43 = v40[6];
          v44 = v40[7];
          v45 = vminq_f32(vmaxq_f32(vrecpeq_f32(v42), v43), v44);
          v46 = vminq_f32(vmaxq_f32(vmulq_f32(v45, vrecpsq_f32(v42, v45)), v43), v44);
          *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v39) = vaddq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + 16 * v39), vmulq_n_f32(v40[2], vmulq_f32(vmulq_f32(v46, vrecpsq_f32(v42, v46)), v40[1]).f32[0]));
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          ++v39;
        }
        while (v39 < v5);
      }
      v8 = vaddq_f32(v8, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v6 += v9;
      *(_QWORD *)&v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcSlitScanGlow::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcSlitScanGlow::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcSlitScanGlow::HgcSlitScanGlow(HgcSlitScanGlow *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EC070;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = xmmword_1B3052100;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051200;
  *(int32x4_t *)(v3 + 112) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28951A8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSlitScanGlow::~HgcSlitScanGlow(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EC070;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSlitScanGlow::~HgcSlitScanGlow(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSlitScanGlow::SetParameter(HgcSlitScanGlow *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;

  switch((int)a2)
  {
    case 0:
      v7 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 128) = a3;
      return v7;
    case 1:
      v8 = (float *)*((_QWORD *)this + 51);
      if (*v8 == a3.n128_f32[0] && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
        return 0;
      *v8 = a3.n128_f32[0];
      v8[1] = a4;
      v8[2] = a5;
      v8[3] = a6;
      goto LABEL_30;
    case 2:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_30;
    case 3:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_30;
    case 4:
      v7 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 144) = a3;
      return v7;
    case 5:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_30;
    case 6:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
LABEL_30:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcSlitScanGlow::GetParameter(HgcSlitScanGlow *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[32];
      a3[1] = v3[33];
      a3[2] = v3[34];
      v4 = v3 + 35;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = *v5;
      a3[1] = v5[1];
      a3[2] = v5[2];
      v4 = v5 + 3;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[4];
      a3[1] = v6[5];
      a3[2] = v6[6];
      v4 = v6 + 7;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[8];
      a3[1] = v7[9];
      a3[2] = v7[10];
      v4 = v7 + 11;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[36];
      a3[1] = v8[37];
      a3[2] = v8[38];
      v4 = v8 + 39;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[12];
      a3[1] = v9[13];
      a3[2] = v9[14];
      v4 = v9 + 15;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[16];
      a3[1] = v10[17];
      a3[2] = v10[18];
      v4 = v10 + 19;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcPolarToRect::GetProgram(HgcPolarToRect *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000006b3\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, 0.000000000, 0.5000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy*hg_Params[3].xy + hg_Params[2].xy;\n"
             "    s1.x = s0.x*hg_Params[0].x;\n"
             "    s1.y = cos(s1.x);\n"
             "    s1.zw = hg_Params[2].xy + hg_Params[2].xy;\n"
             "    s1.x = sin(s1.x);\n"
             "    s1.xy = s0.yy*s1.xy + hg_Params[1].xy;\n"
             "    s0.zw = s1.xy/s1.zw;\n"
             "    s2.xy = fract(s0.zw);\n"
             "    s2.xy = s1.zw*s2.xy;\n"
             "    s0.xy = floor(s0.zw);\n"
             "    s0.zw = s0.xy*float2(c0.zz);\n"
             "    s0.zw = floor(s0.zw);\n"
             "    s0.xy = -s0.zw*float2(c0.xx) + s0.xy;\n"
             "    s1.zw = s1.zw - s2.xy;\n"
             "    s1.zw = mix(s2.xy, s1.zw, fabs(s0.xy));\n"
             "    r0.z = abs(half(hg_Params[5].z));\n"
             "    s1.xy = select(s1.zw, s1.xy, -float2(r0.zz) < 0.00000h);\n"
             "    r0.xy = half2(s1.zw) - half2(s1.xy);\n"
             "    r0.xy = half2(c0.zz < fabs(r0.xy));\n"
             "    r0.z = half(-r0.z >= c0.y);\n"
             "    r0.x = fmax(r0.x, r0.y);\n"
             "    r0.y = half(-r0.z >= c0.y);\n"
             "    r0.x = fmin(r0.y, r0.x);\n"
             "    s1.xy = select(s1.xy, s1.zw, -float2(r0.xx) < 0.00000h);\n"
             "    s1.xy = s1.xy - hg_Params[2].xy;\n"
             "    s1.xy = s1.xy*hg_Params[4].xy;\n"
             "    s1.xy = s1.xy + hg_Params[6].xy;\n"
             "    s1.xy = s1.xy*hg_Params[6].zw;\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    output.color0 = select(float4(r1), float4(c0.yyyy), -float4(r0.xxxx) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=4792c725:8e9383f8:97acf09a:4901eb69\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0007:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000653\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, 0.000000000, 0.5000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy*hg_Params[3].xy + hg_Params[2].xy;\n"
             "    r1.x = r0.x*hg_Params[0].x;\n"
             "    r1.y = cos(r1.x);\n"
             "    r1.zw = hg_Params[2].xy + hg_Params[2].xy;\n"
             "    r1.x = sin(r1.x);\n"
             "    r1.xy = r0.yy*r1.xy + hg_Params[1].xy;\n"
             "    r0.zw = r1.xy/r1.zw;\n"
             "    r2.xy = fract(r0.zw);\n"
             "    r2.xy = r1.zw*r2.xy;\n"
             "    r0.xy = floor(r0.zw);\n"
             "    r0.zw = r0.xy*c0.zz;\n"
             "    r0.zw = floor(r0.zw);\n"
             "    r0.xy = -r0.zw*c0.xx + r0.xy;\n"
             "    r1.zw = r1.zw - r2.xy;\n"
             "    r1.zw = mix(r2.xy, r1.zw, fabs(r0.xy));\n"
             "    r0.z = abs(hg_Params[5].z);\n"
             "    r1.xy = select(r1.zw, r1.xy, -r0.zz < 0.00000f);\n"
             "    r0.xy = r1.zw - r1.xy;\n"
             "    r0.xy = float2(c0.zz < fabs(r0.xy));\n"
             "    r0.z = float(-r0.z >= c0.y);\n"
             "    r0.x = fmax(r0.x, r0.y);\n"
             "    r0.y = float(-r0.z >= c0.y);\n"
             "    r0.x = fmin(r0.y, r0.x);\n"
             "    r1.xy = select(r1.xy, r1.zw, -r0.xx < 0.00000f);\n"
             "    r1.xy = r1.xy - hg_Params[2].xy;\n"
             "    r1.xy = r1.xy*hg_Params[4].xy;\n"
             "    r1.xy = r1.xy + hg_Params[6].xy;\n"
             "    r1.xy = r1.xy*hg_Params[6].zw;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    output.color0 = select(r1, c0.yyyy, -r0.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b639f045:aeadeeb8:e66c00d4:18d96586\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0007:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007b4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(2.000000000, 0.000000000, 0.5000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy*hg_ProgramLocal3.xy + hg_ProgramLocal2.xy;\n"
           "    r1.x = r0.x*hg_ProgramLocal0.x;\n"
           "    r1.y = cos(r1.x);\n"
           "    r1.zw = hg_ProgramLocal2.xy + hg_ProgramLocal2.xy;\n"
           "    r1.x = sin(r1.x);\n"
           "    r1.xy = r0.yy*r1.xy + hg_ProgramLocal1.xy;\n"
           "    r0.zw = r1.xy/r1.zw;\n"
           "    r2.xy = fract(r0.zw);\n"
           "    r2.xy = r1.zw*r2.xy;\n"
           "    r0.xy = floor(r0.zw);\n"
           "    r0.zw = r0.xy*c0.zz;\n"
           "    r0.zw = floor(r0.zw);\n"
           "    r0.xy = -r0.zw*c0.xx + r0.xy;\n"
           "    r1.zw = r1.zw - r2.xy;\n"
           "    r1.zw = mix(r2.xy, r1.zw, abs(r0.xy));\n"
           "    r0.z = abs(hg_ProgramLocal5.z);\n"
           "    r1.xy = vec2(-r0.z < 0.00000 ? r1.x : r1.z, -r0.z < 0.00000 ? r1.y : r1.w);\n"
           "    r0.xy = r1.zw - r1.xy;\n"
           "    r0.xy = vec2(lessThan(c0.zz, abs(r0.xy)));\n"
           "    r0.z = float(-r0.z >= c0.y);\n"
           "    r0.x = max(r0.x, r0.y);\n"
           "    r0.y = float(-r0.z >= c0.y);\n"
           "    r0.x = min(r0.y, r0.x);\n"
           "    r1.xy = vec2(-r0.x < 0.00000 ? r1.z : r1.x, -r0.x < 0.00000 ? r1.w : r1.y);\n"
           "    r1.xy = r1.xy - hg_ProgramLocal2.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal4.xy;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal6.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal6.zw;\n"
           "    r1 = texture2D(hg_Texture0, r1.xy);\n"
           "    gl_FragColor = vec4(-r0.x < 0.00000 ? c0.y : r1.x, -r0.x < 0.00000 ? c0.y : r1.y, -r0.x < 0.00000 ? c0.y "
           ": r1.z, -r0.x < 0.00000 ? c0.y : r1.w);\n"
           "}\n"
           "//MD5=f5d72695:4c61ea17:4f14cea2:d8909f3c\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0007:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcPolarToRect::InitProgramDescriptor(HgcPolarToRect *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPolarToRect_hgc_visible", "//Metal1.0     \n//LEN=0000000594\n[[ visible ]] FragmentOut HgcPolarToRect_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.5000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy*hg_Params[3].xy + hg_Params[2].xy;\n"
    "    r1.x = r0.x*hg_Params[0].x;\n"
    "    r1.y = cos(r1.x);\n"
    "    r1.zw = hg_Params[2].xy + hg_Params[2].xy;\n"
    "    r1.x = sin(r1.x);\n"
    "    r1.xy = r0.yy*r1.xy + hg_Params[1].xy;\n"
    "    r0.zw = r1.xy/r1.zw;\n"
    "    r2.xy = fract(r0.zw);\n"
    "    r2.xy = r1.zw*r2.xy;\n"
    "    r0.xy = floor(r0.zw);\n"
    "    r0.zw = r0.xy*c0.zz;\n"
    "    r0.zw = floor(r0.zw);\n"
    "    r0.xy = -r0.zw*c0.xx + r0.xy;\n"
    "    r1.zw = r1.zw - r2.xy;\n"
    "    r1.zw = mix(r2.xy, r1.zw, fabs(r0.xy));\n"
    "    r0.z = abs(hg_Params[5].z);\n"
    "    r1.xy = select(r1.zw, r1.xy, -r0.zz < 0.00000f);\n"
    "    r0.xy = r1.zw - r1.xy;\n"
    "    r0.xy = float2(c0.zz < fabs(r0.xy));\n"
    "    r0.z = float(-r0.z >= c0.y);\n"
    "    r0.x = fmax(r0.x, r0.y);\n"
    "    r0.y = float(-r0.z >= c0.y);\n"
    "    r0.x = fmin(r0.y, r0.x);\n"
    "    r1.xy = select(r1.xy, r1.zw, -r0.xx < 0.00000f);\n"
    "    r1.xy = r1.xy - hg_Params[2].xy;\n"
    "    r1.xy = r1.xy*hg_Params[4].xy;\n"
    "    r1.xy = r1.xy + hg_Params[6].xy;\n"
    "    r1.xy = r1.xy*hg_Params[6].zw;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    output.color0 = select(r1, c0.yyyy, -r0.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28955E4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPolarToRect");
}

void sub_1B28955F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2895774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28957C4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28957BCLL);
}

_QWORD *HgcPolarToRect::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPolarToRect [hgc1]");
}

uint64_t HgcPolarToRect::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 6, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcPolarToRect::Bind(HgcPolarToRect *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcPolarToRect *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcPolarToRect::RenderTile(HgcPolarToRect *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x2_t v36;
  float32x2_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x8_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  float32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  uint64_t v104;
  float32x4_t v105;
  uint64_t v106;
  int32x4_t v107;
  float32x2_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  int8x16_t v111;
  float32x4_t v112;
  int32x4_t v113;
  float32x4_t *v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t v117;
  int32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  int8x16_t v121;
  int8x16_t *v122;
  uint64_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int32x4_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x2_t v138;
  float32x2_t v139;
  int8x16_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  int8x16_t v146;
  int32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int8x16_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  float32x4_t v157;
  int8x16_t v158;
  float32x4_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  int8x16_t v163;
  float32x4_t v164;
  uint64_t v165;
  float32x4_t v166;
  uint64_t v167;
  int32x4_t v168;
  float32x2_t v169;
  float32x4_t *v170;
  float32x4_t v171;
  int8x16_t v172;
  float32x4_t v173;
  int32x4_t v174;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcPolarToRect *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 32);
          v21 = *(float32x4_t *)(v19 + 48);
          v22 = vaddq_f32(v20, vmulq_f32(v17, v21));
          v23 = vaddq_f32(v20, vmulq_f32(v18, v21));
          v24 = *(float32x4_t *)(v19 + 16);
          v25 = (int32x4_t)vmulq_f32(*(float32x4_t *)v19, v22);
          v26 = (int32x4_t)vmulq_f32(*(float32x4_t *)v19, v23);
          v27 = *(float32x4_t *)(v19 + 96);
          v28 = *(int8x16_t *)(v19 + 112);
          v29 = vmulq_f32(v27, (float32x4_t)vrev64q_s32(v25));
          v30 = vmulq_f32(v27, (float32x4_t)vrev64q_s32(v26));
          v31 = vcvtq_f32_s32(vcvtq_s32_f32(v29));
          v32 = vcvtq_f32_s32(vcvtq_s32_f32(v30));
          v33 = vsubq_f32(v30, vsubq_f32(v32, (float32x4_t)vandq_s8(v28, (int8x16_t)vcgtq_f32(v32, v30))));
          v34 = *(float32x4_t *)(v19 + 128);
          v35 = *(float32x4_t *)(v19 + 144);
          v36 = (float32x2_t)vabdq_f32(vsubq_f32(v29, vsubq_f32(v31, (float32x4_t)vandq_s8(v28, (int8x16_t)vcgtq_f32(v31, v29)))), v34).u64[0];
          v37 = (float32x2_t)vabdq_f32(v33, v34).u64[0];
          v39 = *(float32x4_t *)(v19 + 160);
          v38 = *(int8x16_t *)(v19 + 176);
          v40 = *(int8x16_t *)(v19 + 192);
          v41 = *(float32x4_t *)(v19 + 208);
          v43 = *(int8x16_t *)(v19 + 224);
          v42 = *(float32x4_t *)(v19 + 240);
          v44 = (int8x8_t)vmvnq_s8(v43).u64[0];
          v45 = vsub_f32(v36, *(float32x2_t *)v35.f32);
          v46 = vmul_f32(v45, v45);
          *(int8x8_t *)v25.i8 = vorr_s8(vand_s8((int8x8_t)vmul_f32(v45, vadd_f32(*(float32x2_t *)v41.f32, vmul_f32(v46, vadd_f32(*(float32x2_t *)v40.i8, vmul_f32(v46, vadd_f32(*(float32x2_t *)v39.f32, vmul_f32(*(float32x2_t *)v38.i8, v46))))))), v44), vand_s8(*(int8x8_t *)v43.i8, *(int8x8_t *)v25.i8));
          v25.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32);
          v47 = vsub_f32(v37, *(float32x2_t *)v35.f32);
          v48 = vmul_f32(v47, v47);
          *(int8x8_t *)v26.i8 = vorr_s8(vand_s8((int8x8_t)vmul_f32(v47, vadd_f32(*(float32x2_t *)v41.f32, vmul_f32(v48, vadd_f32(*(float32x2_t *)v40.i8, vmul_f32(v48, vadd_f32(*(float32x2_t *)v39.f32, vmul_f32(*(float32x2_t *)v38.i8, v48))))))), v44), vand_s8(*(int8x8_t *)v43.i8, *(int8x8_t *)v26.i8));
          v26.i64[1] = v25.i64[1];
          v49 = vaddq_f32(v41, vmulq_f32((float32x4_t)v40, (float32x4_t)v25));
          v50 = vaddq_f32(v41, vmulq_f32((float32x4_t)v40, (float32x4_t)v26));
          v51 = vcvtq_f32_s32(vcvtq_s32_f32(v49));
          v52 = vcvtq_f32_s32(vcvtq_s32_f32(v50));
          v53 = vaddq_f32(v41, vabdq_f32(vsubq_f32(v49, vsubq_f32(v51, (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v51, v49)))), v39));
          v54 = vaddq_f32(v41, vabdq_f32(vsubq_f32(v50, vsubq_f32(v52, (float32x4_t)vandq_s8(v38, (int8x16_t)vcgtq_f32(v52, v50)))), v39));
          v55 = vmulq_f32(v53, v53);
          v56 = vmulq_f32(v54, v54);
          v57 = vaddq_f32(v35, vmulq_f32(v34, v55));
          v58 = vaddq_f32(v35, vmulq_f32(v34, v56));
          v59 = vaddq_f32((float32x4_t)v28, vmulq_f32(v55, v57));
          v60 = vaddq_f32((float32x4_t)v28, vmulq_f32(v56, v58));
          v61 = vaddq_f32(v27, vmulq_f32(v55, v59));
          v62 = vaddq_f32(v27, vmulq_f32(v56, v60));
          v63 = vbslq_s8(v43, (int8x16_t)vmulq_f32(v53, v61), (int8x16_t)v25);
          v64 = vbslq_s8(v43, (int8x16_t)vmulq_f32(v54, v62), (int8x16_t)v26);
          v65 = (int32x4_t)vaddq_f32(v24, vmulq_lane_f32((float32x4_t)v63, *(float32x2_t *)v22.f32, 1));
          v66 = (int32x4_t)vaddq_f32(v24, vmulq_lane_f32((float32x4_t)v64, *(float32x2_t *)v23.f32, 1));
          v62.i64[0] = v65.i64[0];
          v62.i64[1] = v63.i64[1];
          v61.i64[0] = v66.i64[0];
          v61.i64[1] = v64.i64[1];
          v67 = vminq_f32(vmaxq_f32(vrecpeq_f32(v62), v41), v42);
          v68 = vminq_f32(vmaxq_f32(vrecpeq_f32(v61), v41), v42);
          v69 = vminq_f32(vmaxq_f32(vmulq_f32(v67, vrecpsq_f32(v62, v67)), v41), v42);
          v70 = vminq_f32(vmaxq_f32(vmulq_f32(v68, vrecpsq_f32(v61, v68)), v41), v42);
          v71 = (float32x4_t)vextq_s8(v63, (int8x16_t)v65, 8uLL);
          v72 = (float32x4_t)vextq_s8(v64, (int8x16_t)v66, 8uLL);
          v73 = (int8x16_t)vmulq_f32(vmulq_f32(v69, vrecpsq_f32(v62, v69)), v71);
          v74 = (int8x16_t)vmulq_f32(vmulq_f32(v70, vrecpsq_f32(v61, v70)), v72);
          v75 = (float32x4_t)vextq_s8(v73, v73, 8uLL);
          v76 = (float32x4_t)vextq_s8(v74, v74, 8uLL);
          v77 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
          v78 = vcvtq_f32_s32(vcvtq_s32_f32(v76));
          v79 = *(int8x16_t *)(v19 + 256);
          v80 = *(int8x16_t *)(v19 + 272);
          v81 = vsubq_f32(v77, (float32x4_t)vandq_s8(v79, (int8x16_t)vcgtq_f32(v77, v75)));
          v82 = vsubq_f32(v78, (float32x4_t)vandq_s8(v79, (int8x16_t)vcgtq_f32(v78, v76)));
          v83 = (int8x16_t)vmulq_f32(v71, vsubq_f32(v75, v81));
          v84 = (int8x16_t)vmulq_f32(v72, vsubq_f32(v76, v82));
          v41.i64[0] = v81.i64[0];
          v41.i64[1] = vmulq_f32(*(float32x4_t *)&v79, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v81, 0)).i64[1];
          v75.i64[0] = v82.i64[0];
          v75.i64[1] = vmulq_f32(*(float32x4_t *)&v79, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v82, 0)).i64[1];
          v85 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
          v86 = vcvtq_f32_s32(vcvtq_s32_f32(v75));
          v87 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v85, v41), v40, (int8x16_t)0);
          v88 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v86, v75), v40, (int8x16_t)0);
          v75.i64[0] = vsubq_f32(v81, vmulq_laneq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)vsubq_f32(v85, v87), 1), (float32x4_t)v38, 3)).u64[0];
          v38.i64[0] = vsubq_f32(v82, vmulq_laneq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)vsubq_f32(v86, v88), 1), (float32x4_t)v38, 3)).u64[0];
          v89 = vextq_s8(v83, v83, 8uLL);
          v90 = (float32x4_t)vextq_s8(v84, v84, 8uLL);
          v65.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v83, 0), vmulq_f32(vsubq_f32(vsubq_f32(v62, *(float32x4_t *)&v89), *(float32x4_t *)&v89), vabsq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v75, 0)))).i64[1];
          v66.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v84, 0), vmulq_f32(vsubq_f32(vsubq_f32(v61, v90), v90), vabsq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v38, 0)))).i64[1];
          *(float32x2_t *)v83.i8 = vabs_f32(*(float32x2_t *)(v19 + 88));
          v91 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.i8, 0), (float32x4_t)v80);
          v84.i64[0] = vbslq_s8(v91, (int8x16_t)v65, (int8x16_t)vdupq_laneq_s64((int64x2_t)v65, 1)).u64[0];
          v84.i64[1] = v65.i64[1];
          v89.i64[0] = vbslq_s8(v91, (int8x16_t)v66, (int8x16_t)vdupq_laneq_s64((int64x2_t)v66, 1)).u64[0];
          v89.i64[1] = v66.i64[1];
          v92 = vextq_s8(v84, v84, 8uLL);
          v93 = vextq_s8(v89, v89, 8uLL);
          *(float32x2_t *)v65.i8 = vsub_f32(*(float32x2_t *)v92.i8, *(float32x2_t *)v84.i8);
          v65.i64[1] = v83.i64[0];
          *(float32x2_t *)v66.i8 = vsub_f32(*(float32x2_t *)v93.i8, *(float32x2_t *)v89.i8);
          v66.i64[1] = v83.i64[0];
          v94 = *(float32x4_t *)(v19 + 288);
          v65.i64[0] = vandq_s8((int8x16_t)vcagtq_f32((float32x4_t)v65, v94), v79).u64[0];
          v66.i64[0] = vandq_s8((int8x16_t)vcagtq_f32((float32x4_t)v66, v94), v79).u64[0];
          v75.i64[0] = v65.i64[0];
          v75.i64[1] = v83.i64[0];
          v90.i64[0] = v66.i64[0];
          v90.i64[1] = v83.i64[0];
          v95 = vandq_s8(v80, (int8x16_t)vcgeq_f32(vnegq_f32(v75), v94));
          v96 = vandq_s8(v80, (int8x16_t)vcgeq_f32(vnegq_f32(v90), v94));
          v75.i64[0] = vextq_s8(v95, v95, 8uLL).u64[0];
          v90.i64[0] = v65.i64[0];
          v90.i64[1] = v95.i64[1];
          v81.i64[0] = vextq_s8(v96, v96, 8uLL).u64[0];
          v82.i64[0] = v66.i64[0];
          v82.i64[1] = v96.i64[1];
          v65.i64[1] = vdupq_laneq_s64((int64x2_t)v95, 1).u64[0];
          v66.i64[1] = vdupq_laneq_s64((int64x2_t)v96, 1).u64[0];
          v65.i64[0] = vmaxq_f32(v90, (float32x4_t)vrev64q_s32(v65)).u64[0];
          v66.i64[0] = vmaxq_f32(v82, (float32x4_t)vrev64q_s32(v66)).u64[0];
          *(int8x8_t *)v90.f32 = vext_s8(*(int8x8_t *)v75.f32, *(int8x8_t *)v65.i8, 4uLL);
          *(int8x8_t *)v75.f32 = vext_s8(*(int8x8_t *)v65.i8, *(int8x8_t *)v75.f32, 4uLL);
          v65.i64[1] = v95.i64[1];
          *(int8x8_t *)v95.i8 = vext_s8(*(int8x8_t *)v81.f32, *(int8x8_t *)v66.i8, 4uLL);
          *(int8x8_t *)v81.f32 = vext_s8(*(int8x8_t *)v66.i8, *(int8x8_t *)v81.f32, 4uLL);
          v66.i64[1] = v96.i64[1];
          v75.i64[1] = v90.i64[0];
          v81.i64[1] = v95.i64[0];
          v65.i64[0] = vbslq_s8(v43, (int8x16_t)v65, vandq_s8(v79, (int8x16_t)vcgeq_f32(vnegq_f32(v75), (float32x4_t)v80))).u64[0];
          v66.i64[0] = vbslq_s8(v43, (int8x16_t)v66, vandq_s8(v79, (int8x16_t)vcgeq_f32(vnegq_f32(v81), (float32x4_t)v80))).u64[0];
          v97 = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 0));
          v98 = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 0));
          v99 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v97, (float32x4_t)v80), v92, v84), v20);
          v100 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v98, (float32x4_t)v80), v93, v89), v20);
          v101 = *(float32x4_t *)(v19 + 64);
          v102 = vmulq_f32(v101, v99);
          v103 = vmulq_f32(v101, v100);
          v104 = *((int *)a2 + 22);
          v105 = vsubq_f32(v102, v9);
          v106 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v107 = vaddq_s32(vcvtq_s32_f32(v105), vcltzq_f32(v105));
            v108 = (float32x2_t)vsubq_f32(v105, vcvtq_f32_s32(v107)).u64[0];
            v109 = (float32x4_t *)(v106 + 16 * (v107.i32[0] + v107.i32[1] * (int)v104));
            v110 = vaddq_f32(*v109, vmulq_n_f32(vsubq_f32(v109[1], *v109), v108.f32[0]));
            v111 = (int8x16_t)vaddq_f32(v110, vmulq_lane_f32(vsubq_f32(vaddq_f32(v109[v104], vmulq_n_f32(vsubq_f32(v109[(int)v104 + 1], v109[v104]), v108.f32[0])), v110), v108, 1));
            v112 = vsubq_f32(v103, v9);
            v113 = vaddq_s32(vcvtq_s32_f32(v112), vcltzq_f32(v112));
            v112.i64[0] = vsubq_f32(v112, vcvtq_f32_s32(v113)).u64[0];
            v114 = (float32x4_t *)(v106 + 16 * (v113.i32[0] + v113.i32[1] * (int)v104));
            v115 = vaddq_f32(*v114, vmulq_n_f32(vsubq_f32(v114[1], *v114), v112.f32[0]));
            v116 = (int8x16_t)vaddq_f32(v115, vmulq_lane_f32(vsubq_f32(vaddq_f32(v114[v104], vmulq_n_f32(vsubq_f32(v114[(int)v104 + 1], v114[v104]), v112.f32[0])), v115), *(float32x2_t *)v112.f32, 1));
          }
          else
          {
            v117 = vaddq_f32(v105, v13);
            v118 = vcvtq_s32_f32(v117);
            v117.i64[0] = vaddq_s32(v118, vcgtq_f32(vcvtq_f32_s32(v118), v117)).u64[0];
            v111 = *(int8x16_t *)(v106 + 16 * (v117.i32[0] + v117.i32[1] * (int)v104));
            v119 = vaddq_f32(vsubq_f32(v103, v9), v13);
            v120 = vcvtq_s32_f32(v119);
            v119.i64[0] = vaddq_s32(v120, vcgtq_f32(vcvtq_f32_s32(v120), v119)).u64[0];
            v116 = *(int8x16_t *)(v106 + 16 * (v119.i32[0] + v119.i32[1] * (int)v104));
          }
          v121 = *(int8x16_t *)(v19 + 304);
          v122 = (int8x16_t *)(v11 + 16 * v15);
          *v122 = vbslq_s8((int8x16_t)vcgtq_f32(v97, (float32x4_t)v121), v121, v111);
          v122[1] = vbslq_s8((int8x16_t)vcgtq_f32(v98, (float32x4_t)v121), v121, v116);
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v123 = *((_QWORD *)this + 51);
        v124 = *(float32x4_t *)(v123 + 32);
        v125 = vaddq_f32(v124, vmulq_f32(v17, *(float32x4_t *)(v123 + 48)));
        v126 = (int32x4_t)vmulq_f32(*(float32x4_t *)v123, v125);
        v127 = *(float32x4_t *)(v123 + 96);
        v128 = *(int8x16_t *)(v123 + 112);
        v129 = vmulq_f32(v127, (float32x4_t)vrev64q_s32(v126));
        v130 = vcvtq_f32_s32(vcvtq_s32_f32(v129));
        v131 = vsubq_f32(v129, vsubq_f32(v130, (float32x4_t)vandq_s8(v128, (int8x16_t)vcgtq_f32(v130, v129))));
        v132 = *(float32x4_t *)(v123 + 128);
        v133 = *(float32x4_t *)(v123 + 144);
        v134 = *(float32x4_t *)(v123 + 160);
        v135 = *(int8x16_t *)(v123 + 176);
        v136 = *(int8x16_t *)(v123 + 192);
        v137 = *(float32x4_t *)(v123 + 208);
        v138 = vsub_f32((float32x2_t)*(_OWORD *)&vabdq_f32(v131, v132), *(float32x2_t *)v133.f32);
        *(float32x2_t *)v131.f32 = vmul_f32(v138, v138);
        v139 = vmul_f32(*(float32x2_t *)v131.f32, vadd_f32(*(float32x2_t *)v136.i8, vmul_f32(*(float32x2_t *)v131.f32, vadd_f32(*(float32x2_t *)v134.f32, vmul_f32(*(float32x2_t *)v135.i8, *(float32x2_t *)v131.f32)))));
        v140 = *(int8x16_t *)(v123 + 224);
        v141 = *(float32x4_t *)(v123 + 240);
        *(int8x8_t *)v126.i8 = vorr_s8(vand_s8((int8x8_t)vmul_f32(v138, vadd_f32(*(float32x2_t *)v137.f32, v139)), (int8x8_t)*(_OWORD *)&vmvnq_s8(v140)), vand_s8(*(int8x8_t *)v140.i8, *(int8x8_t *)v126.i8));
        v126.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v124.f32);
        v142 = vaddq_f32(v137, vmulq_f32((float32x4_t)v136, (float32x4_t)v126));
        v143 = vcvtq_f32_s32(vcvtq_s32_f32(v142));
        v144 = vaddq_f32(v137, vabdq_f32(vsubq_f32(v142, vsubq_f32(v143, (float32x4_t)vandq_s8(v135, (int8x16_t)vcgtq_f32(v143, v142)))), v134));
        v145 = vmulq_f32(v144, v144);
        v146 = vbslq_s8(v140, (int8x16_t)vmulq_f32(v144, vaddq_f32(v127, vmulq_f32(v145, vaddq_f32((float32x4_t)v128, vmulq_f32(v145, vaddq_f32(v133, vmulq_f32(v132, v145))))))), (int8x16_t)v126);
        v147 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v123 + 16), vmulq_lane_f32((float32x4_t)v146, *(float32x2_t *)v125.f32, 1));
        v148.i64[0] = v147.i64[0];
        v148.i64[1] = v146.i64[1];
        v149 = vminq_f32(vmaxq_f32(vrecpeq_f32(v148), v137), v141);
        v150 = vminq_f32(vmaxq_f32(vmulq_f32(v149, vrecpsq_f32(v148, v149)), v137), v141);
        v151 = (float32x4_t)vextq_s8(v146, (int8x16_t)v147, 8uLL);
        v152 = (int8x16_t)vmulq_f32(vmulq_f32(v150, vrecpsq_f32(v148, v150)), v151);
        v153 = (float32x4_t)vextq_s8(v152, v152, 8uLL);
        v154 = vcvtq_f32_s32(vcvtq_s32_f32(v153));
        v155 = *(int8x16_t *)(v123 + 256);
        v156 = *(int8x16_t *)(v123 + 272);
        v157 = vsubq_f32(v154, (float32x4_t)vandq_s8(v155, (int8x16_t)vcgtq_f32(v154, v153)));
        v158 = (int8x16_t)vmulq_f32(v151, vsubq_f32(v153, v157));
        v132.i64[0] = v157.i64[0];
        v132.i64[1] = vmulq_f32(*(float32x4_t *)&v155, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v157, 0)).i64[1];
        v159 = vcvtq_f32_s32(vcvtq_s32_f32(v132));
        v159.i64[0] = vsubq_f32(v157, vmulq_laneq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)vsubq_f32(v159, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v159, v132), v136, (int8x16_t)0)), 1), (float32x4_t)v135, 3)).u64[0];
        v160 = (float32x4_t)vextq_s8(v158, v158, 8uLL);
        v147.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v158, 0), vmulq_f32(vsubq_f32(vsubq_f32(v148, v160), v160), vabsq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v159, 0)))).i64[1];
        *(float32x2_t *)v159.f32 = vabs_f32(*(float32x2_t *)(v123 + 88));
        v158.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v159.f32, 0), (float32x4_t)v156), (int8x16_t)v147, (int8x16_t)vdupq_laneq_s64((int64x2_t)v147, 1)).u64[0];
        v158.i64[1] = v147.i64[1];
        v161 = vextq_s8(v158, v158, 8uLL);
        *(float32x2_t *)v147.i8 = vsub_f32(*(float32x2_t *)v161.i8, *(float32x2_t *)v158.i8);
        v147.i64[1] = v159.i64[0];
        v162 = *(float32x4_t *)(v123 + 288);
        v147.i64[0] = vandq_s8((int8x16_t)vcagtq_f32((float32x4_t)v147, v162), v155).u64[0];
        v132.i64[0] = v147.i64[0];
        v132.i64[1] = v159.i64[0];
        v163 = vandq_s8(v156, (int8x16_t)vcgeq_f32(vnegq_f32(v132), v162));
        v162.i64[0] = v147.i64[0];
        v162.i64[1] = v163.i64[1];
        v135.i64[0] = vextq_s8(v163, v163, 8uLL).u64[0];
        v147.i64[1] = vdupq_laneq_s64((int64x2_t)v163, 1).u64[0];
        v147.i64[0] = vmaxq_f32(v162, (float32x4_t)vrev64q_s32(v147)).u64[0];
        *(int8x8_t *)v132.f32 = vext_s8(*(int8x8_t *)v147.i8, *(int8x8_t *)v135.i8, 4uLL);
        v147.i64[1] = v163.i64[1];
        *(int8x8_t *)&v132.u32[2] = vext_s8(*(int8x8_t *)v135.i8, *(int8x8_t *)v147.i8, 4uLL);
        v147.i64[0] = vbslq_s8(v140, (int8x16_t)v147, vandq_s8(v155, (int8x16_t)vcgeq_f32(vnegq_f32(v132), (float32x4_t)v156))).u64[0];
        v164 = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.i8, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.i8, 0));
        v165 = *((int *)a2 + 22);
        v166 = vsubq_f32(vmulq_f32(*(float32x4_t *)(v123 + 64), vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v164, (float32x4_t)v156), v161, v158), v124)), v9);
        v167 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v168 = vaddq_s32(vcvtq_s32_f32(v166), vcltzq_f32(v166));
          v169 = (float32x2_t)vsubq_f32(v166, vcvtq_f32_s32(v168)).u64[0];
          v170 = (float32x4_t *)(v167 + 16 * (v168.i32[0] + v168.i32[1] * (int)v165));
          v171 = vaddq_f32(*v170, vmulq_n_f32(vsubq_f32(v170[1], *v170), v169.f32[0]));
          v172 = (int8x16_t)vaddq_f32(v171, vmulq_lane_f32(vsubq_f32(vaddq_f32(v170[v165], vmulq_n_f32(vsubq_f32(v170[(int)v165 + 1], v170[v165]), v169.f32[0])), v171), v169, 1));
        }
        else
        {
          v173 = vaddq_f32(v166, v13);
          v174 = vcvtq_s32_f32(v173);
          v173.i64[0] = vaddq_s32(v174, vcgtq_f32(vcvtq_f32_s32(v174), v173)).u64[0];
          v172 = *(int8x16_t *)(v167 + 16 * (v173.i32[0] + v173.i32[1] * (int)v165));
        }
        *(int8x16_t *)(v11 + 16 * v15) = vbslq_s8((int8x16_t)vcgtq_f32(v164, *(float32x4_t *)(v123 + 304)), *(int8x16_t *)(v123 + 304), v172);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcPolarToRect::GetDOD(HgcPolarToRect *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcPolarToRect *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcPolarToRect::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcPolarToRect::HgcPolarToRect(HgcPolarToRect *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EC2D8;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B30523D0;
  *(_OWORD *)(v3 + 112) = xmmword_1B30523E0;
  *(_OWORD *)(v3 + 128) = xmmword_1B30523F0;
  *(_OWORD *)(v3 + 144) = xmmword_1B3052400;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051CD0;
  *(_OWORD *)(v3 + 176) = xmmword_1B3052410;
  *(_OWORD *)(v3 + 192) = xmmword_1B3052420;
  *(_OWORD *)(v3 + 208) = xmmword_1B3052430;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050E20;
  *(int32x4_t *)(v3 + 240) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 256) = xmmword_1B3052440;
  *(_OWORD *)(v3 + 272) = xmmword_1B304F250;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 288) = xmmword_1B3052100;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcPolarToRect *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B2896504(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPolarToRect::~HgcPolarToRect(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EC2D8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4055B0EC01);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcPolarToRect::~HgcPolarToRect(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPolarToRect::SetParameter(HgcPolarToRect *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  __n128 *v13;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_33;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_33;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_33;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_33;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_33;
    case 5:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[5].n128_f32[0] == 0.0
        && v13[5].n128_f32[1] == 0.0
        && v13[5].n128_f32[2] == a3.n128_f32[0]
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u64[0] = 0;
      v13[5].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[20] = a3;
LABEL_33:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcPolarToRect::GetParameter(HgcPolarToRect *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_8;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_8;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_8;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_8;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_8;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[80];
      a3[1] = v9[81];
      a3[2] = v9[82];
      v4 = v9 + 83;
LABEL_8:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcConcentricTriangleChecker::GetProgram(HgcConcentricTriangleChecker *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_153;
    else
      return aMetal10Len0000_154;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_50;
  }
}

void HgcConcentricTriangleChecker::InitProgramDescriptor(HgcConcentricTriangleChecker *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcConcentricTriangleChecker_hgc_visible", aMetal10Len0000_155);
}

void sub_1B2896930()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcConcentricTriangleChecker");
}

void sub_1B2896940(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051E50;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2896A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2896A80()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2896A78);
}

_QWORD *HgcConcentricTriangleChecker::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcConcentricTriangleChecker [hgc1]");
}

uint64_t HgcConcentricTriangleChecker::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcConcentricTriangleChecker::Bind(HgcConcentricTriangleChecker *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HgcConcentricTriangleChecker *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcConcentricTriangleChecker::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  float32x4_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  int8x16_t v83;
  int32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  float32x4_t v136;
  int8x16_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int8x16_t v142;
  int8x16_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int32x4_t v157;
  int8x16_t v158;
  int32x4_t v159;
  int8x16_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int8x16_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  int8x16_t v176;
  float32x4_t v177;
  float32x4_t v178;
  int8x16_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int8x16_t v186;
  int64x2_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  int32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  int8x16_t v198;
  int64x2_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  int8x16_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  int32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  int8x16_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  int8x16_t v230;
  float32x4_t v231;
  int8x16_t v232;
  int8x16_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  int8x16_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  int8x16_t v248;
  int8x16_t v249;
  float32x4_t v250;
  int64x2_t v251;
  float32x4_t v252;
  int8x16_t v253;
  int8x16_t v254;
  int32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  int8x16_t v265;
  int8x16_t v266;
  float32x4_t v267;
  int32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  int64x2_t v272;
  float32x4_t v273;
  int8x16_t v274;
  int8x16_t v275;
  float32x4_t v276;
  int8x16_t v277;
  float32x4_t v278;
  int8x16_t v279;
  float32x4_t v280;
  int32x4_t v281;
  int64x2_t v282;
  float32x4_t v283;
  int8x16_t v284;
  int8x16_t v285;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  int32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  int8x16_t v308;
  float32x4_t v309;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    *(float32x2_t *)v6.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v6.i64[1] = 0x3F80000000000000;
    v287 = v6;
    v7 = 16 * a2[3].i32[0];
    v8 = 0uLL;
    do
    {
      if (v4 >= 1)
      {
        v9 = 0;
        v10 = v287;
        do
        {
          v309 = v10;
          v11 = *(_QWORD *)(a1 + 408);
          v12 = vmulq_f32(v10, *(float32x4_t *)(v11 + 160));
          v13 = vmulq_f32(v10, *(float32x4_t *)(v11 + 176));
          v14 = (int8x16_t)vaddq_f32(v12, (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL));
          v15 = vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 4uLL));
          v16 = (float32x4_t)vextq_s8((int8x16_t)v15, v14, 8uLL);
          v15.i64[1] = v14.i64[1];
          v17 = vaddq_f32(v15, v16);
          v18 = (int32x4_t)vabsq_f32(v17);
          v19 = *(int8x16_t *)(v11 + 208);
          v20 = vandq_s8(*(int8x16_t *)(v11 + 192), (int8x16_t)vsliq_n_s64((int64x2_t)v17, (int64x2_t)v17, 0x20uLL));
          v21 = vbslq_s8(v19, (int8x16_t)vmaxq_f32((float32x4_t)vextq_s8(v20, v20, 8uLL), (float32x4_t)vrev64q_s32(v18)), v20);
          v22 = (float32x4_t)vextq_s8(v21, v21, 0xCuLL);
          v23 = *(float32x4_t *)(v11 + 224);
          v24 = *(float32x4_t *)(v11 + 240);
          v25 = vminq_f32(vmaxq_f32(vrecpeq_f32(v22), v23), v24);
          v26 = vminq_f32(vmaxq_f32(vmulq_f32(v25, vrecpsq_f32(v22, v25)), v23), v24);
          v27.i64[0] = vmulq_f32(v26, vrecpsq_f32(v22, v26)).u64[0];
          v27.i64[1] = vdupq_laneq_s64((int64x2_t)v18, 1).u64[0];
          v28 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v19, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v21, v21, 8uLL), (float32x4_t)vrev64q_s32(v27)), v20), *(float *)v27.i32), v20);
          v29 = (int32x4_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 0xCuLL), v28, 3);
          v22.i64[0] = v29.i64[0];
          *(int8x8_t *)v30.f32 = vext_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), 4uLL);
          v31 = vextq_s8((int8x16_t)v18, (int8x16_t)v29, 0xCuLL).u64[0];
          v29.i64[1] = v27.i64[1];
          v22.i64[1] = v18.i64[1];
          v32 = *(int8x16_t *)(v11 + 256);
          v30.i64[1] = v31;
          v33 = *(int8x16_t *)(v11 + 288);
          v304 = *(float32x4_t *)(v11 + 304);
          v34 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v22, (int8x16_t)vaddq_f32(v23, vmulq_f32(*(float32x4_t *)(v11 + 272), (float32x4_t)vrev64q_s32(v29))));
          v35 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v22, (int8x16_t)vaddq_f32(v304, vmulq_n_f32(v34, v34.f32[0])));
          v36 = (float32x4_t)vbslq_s8(v32, (int8x16_t)vsubq_f32(v30, v28), (int8x16_t)v28);
          v37 = *(float32x4_t *)(v11 + 320);
          v305 = *(float32x4_t *)(v11 + 336);
          v38 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v22, (int8x16_t)vaddq_f32(v37, vmulq_n_f32(v35, v35.f32[0])));
          v39 = (float32x4_t)vbslq_s8(v33, (int8x16_t)v22, (int8x16_t)vaddq_f32(v305, vmulq_n_f32(v38, v38.f32[0])));
          v40 = (int8x16_t)vmulq_n_f32(v36, vaddq_f32(v305, vmulq_lane_f32(v39, *(float32x2_t *)v39.f32, 1)).f32[0]);
          v41 = (float32x4_t)vbslq_s8(v19, vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), (int8x16_t)v36);
          v42 = vmulq_f32(v41, v41);
          v30.i64[0] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 0xCuLL).u64[0];
          v30.i64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 4uLL).u64[0];
          v43 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vaddq_f32(v42, v30), (int8x16_t)v36);
          v44 = *(float32x4_t *)(v11 + 352);
          v300 = *(float32x4_t *)(v11 + 368);
          v308 = v32;
          v45 = (float32x4_t)vbslq_s8(v32, vbslq_s8((int8x16_t)vcgtq_f32(v44, v43), (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(v37, (float32x4_t)vextq_s8(v40, v40, 0xCuLL))), vextq_s8(v40, v40, 8uLL)), (int8x16_t)v43);
          v46 = (int32x4_t)vbslq_s8(v32, vbslq_s8((int8x16_t)vcgtq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL)), (int8x16_t)vsubq_f32(v300, v45), (int8x16_t)v45), (int8x16_t)v43);
          v47 = (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 0xCuLL);
          v48 = vminq_f32(vrsqrteq_f32(v47), v300);
          v49 = vminq_f32(vmulq_f32(v48, vrsqrtsq_f32(vmulq_f32(v48, v47), v48)), v300);
          v50 = vminq_f32(vmulq_f32(v49, vrsqrtsq_f32(vmulq_f32(v49, v47), v49)), v300);
          v51 = *(float32x4_t *)(v11 + 32);
          v52 = *(int32x4_t *)(v11 + 48);
          v53 = (int32x4_t)vmulq_f32(v50, v47);
          v54 = *(float32x4_t *)(v11 + 400);
          v55 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vceqq_f32((float32x4_t)vrev64q_s32(v52), v44)), v44), (int8x16_t)v54, (int8x16_t)vrev64q_s32(v53));
          v295 = *(int32x4_t *)(v11 + 384);
          v56 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v55, (int8x16_t)v295), (int8x16_t)v54);
          v302 = *(float32x4_t *)(v11 + 416);
          v303 = v44;
          v301 = *(float32x4_t *)(v11 + 432);
          v298 = *(float32x4_t *)(v11 + 464);
          v299 = *(float32x4_t *)(v11 + 448);
          v57 = (float32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(v56, v298));
          v58 = *(float32x4_t *)(v11 + 480);
          v59 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v55, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v301, (int8x16_t)vcgtq_f32(v302, v55))), v299), v57);
          v60 = vsubq_f32(vsubq_f32(v56, v54), vmulq_f32(vmulq_f32(v58, v57), v56));
          v296 = *(float32x4_t *)(v11 + 496);
          v297 = *(float32x4_t *)(v11 + 512);
          v61 = vmulq_f32(v60, v60);
          v62 = *(float32x4_t *)(v11 + 560);
          v306 = *(float32x4_t *)(v11 + 544);
          v307 = *(float32x4_t *)(v11 + 528);
          v63 = *(float32x4_t *)(v11 + 592);
          v64 = *(float32x4_t *)(v11 + 624);
          v65 = vmaxq_f32(vmulq_n_f32(vaddq_f32(v59, vmulq_f32(v60, vaddq_f32(v63, vmulq_f32(v60, vaddq_f32(vaddq_f32(v62, vmulq_f32(*(float32x4_t *)(v11 + 576), v60)), vmulq_f32(v61, vaddq_f32(vaddq_f32(v296, vmulq_f32(v297, v60)), vmulq_f32(v61, vaddq_f32(v307, vmulq_f32(v306, v60)))))))))), *(float *)v52.i32), *(float32x4_t *)(v11 + 608));
          v66 = vcvtq_f32_s32(vcvtq_s32_f32(v65));
          v67 = vsubq_f32(v66, (float32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(v66, v65)));
          v68 = vsubq_f32(v65, v67);
          v69 = *(float32x4_t *)(v11 + 656);
          v70 = *(float32x4_t *)(v11 + 640);
          v71 = *(float32x4_t *)(v11 + 672);
          v72 = *(float32x4_t *)(v11 + 688);
          v73 = *(int32x4_t *)(v11 + 704);
          v74 = *(float32x4_t *)(v11 + 720);
          v75 = vbslq_s8(v33, veorq_s8(vandq_s8((int8x16_t)v46, (int8x16_t)v295), (int8x16_t)vrev64q_s32(v46)), (int8x16_t)vmulq_f32(vaddq_f32(v54, vmulq_f32(v68, vaddq_f32(v72, vmulq_f32(v68, vaddq_f32(vaddq_f32(v69, vmulq_f32(v71, v68)), vmulq_f32(vmulq_f32(v68, v68), vaddq_f32(v64, vmulq_f32(v70, v68)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v73, vcvtq_s32_f32(v67)), 0x17uLL)));
          v76 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v75.i64[0], 0), vmulq_lane_f32(*(float32x4_t *)(v11 + 64), *(float32x2_t *)v75.i8, 1));
          v77 = (float32x4_t)vextq_s8(v76, v75, 8uLL);
          v75.i64[1] = v76.i64[1];
          v78 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vmulq_f32(v72, v77), v75);
          v79 = vcvtq_f32_s32(vcvtq_s32_f32(v78));
          v80 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vsubq_f32(v79, (float32x4_t)vandq_s8((int8x16_t)v71, (int8x16_t)vcgtq_f32(v79, v78))), v75);
          v81 = vbslq_s8(v33, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL), vmulq_laneq_f32(v80, v72, 3)), v75);
          v82 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vaddq_f32(v72, (float32x4_t)vextq_s8(v81, v81, 4uLL)), v81);
          v83 = vbslq_s8((int8x16_t)vcgtq_f32(v72, v82), (int8x16_t)vrev64q_s32((int32x4_t)v82), (int8x16_t)v82);
          v84 = *(int32x4_t *)(v11 + 16);
          v85 = (float32x4_t)vrev64q_s32(v84);
          v86 = vminq_f32(vmaxq_f32(vrecpeq_f32(v85), v74), v24);
          v87 = vminq_f32(vmaxq_f32(vmulq_f32(v86, vrecpsq_f32(v85, v86)), v74), v24);
          v88 = vmulq_f32(vmulq_f32(v87, vrecpsq_f32(v85, v87)), v82);
          v53.i64[1] = v83.i64[1];
          v89 = vcvtq_f32_s32(vcvtq_s32_f32(v88));
          v90 = (float32x4_t)vbslq_s8(v308, (int8x16_t)vsubq_f32(v89, (float32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(v89, v88))), (int8x16_t)v53);
          v91 = vminq_f32(vmaxq_f32(vrecpeq_f32(v51), v74), v24);
          v92 = vminq_f32(vmaxq_f32(vmulq_f32(v91, vrecpsq_f32(v51, v91)), v74), v24);
          v93 = (int8x16_t)vmulq_laneq_f32(vmulq_f32(v92, vrecpsq_f32(v51, v92)), v90, 2);
          v94 = (float32x4_t)vextq_s8(v93, v93, 8uLL);
          v95 = vcvtq_f32_s32(vcvtq_s32_f32(v94));
          v96 = vmulq_laneq_f32(v51, vsubq_f32(v95, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v95, v94), (int8x16_t)v74, v8)), 2);
          v294 = v71;
          v97 = vmulq_f32(v71, (float32x4_t)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL));
          v98 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
          v99 = vsubq_f32(vabdq_f32(vsubq_f32(v97, vsubq_f32(v98, (float32x4_t)vandq_s8((int8x16_t)v74, (int8x16_t)vcgtq_f32(v98, v97)))), v69), v70);
          v100 = vmulq_f32(v99, v99);
          v101 = *(float32x4_t *)(v11 + 608);
          v292 = v63;
          v288 = *(float32x4_t *)(v11 + 576);
          v51.i64[0] = vaddq_f32(v51, v96).u64[0];
          v51.i64[1] = vmulq_f32(v99, vaddq_f32(v288, vmulq_f32(v100, vaddq_f32(v63, vmulq_f32(v100, vaddq_f32(v64, vmulq_f32(v101, v100))))))).i64[1];
          v102 = vaddq_f32(v74, vmulq_f32(v71, (float32x4_t)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 4uLL)));
          v103 = vcvtq_f32_s32(vcvtq_s32_f32(v102));
          v104 = vaddq_f32(v74, vabdq_f32(vsubq_f32(v102, vsubq_f32(v103, (float32x4_t)vandq_s8((int8x16_t)v69, (int8x16_t)vcgtq_f32(v103, v102)))), v70));
          v105 = vmulq_f32(v104, v104);
          v106 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vmulq_f32(v104, vaddq_f32(*(float32x4_t *)(v11 + 688), vmulq_f32(v105, vaddq_f32(v63, vmulq_f32(v105, vaddq_f32(v64, vmulq_f32(v101, v105))))))), (int8x16_t)v51);
          v107 = *(float32x4_t *)(v11 + 736);
          v108 = vaddq_f32(v107, vmulq_f32(*(float32x4_t *)(v11 + 752), (float32x4_t)vrev64q_s32((int32x4_t)v106)));
          v109 = vcvtq_f32_s32(vcvtq_s32_f32(v108));
          v110 = vaddq_f32(v107, vabdq_f32(vsubq_f32(v108, vsubq_f32(v109, (float32x4_t)vandq_s8((int8x16_t)v54, (int8x16_t)vcgtq_f32(v109, v108)))), v58));
          v111 = vmulq_f32(v110, v110);
          v113 = *(float32x4_t *)(v11 + 768);
          v112 = *(float32x4_t *)(v11 + 784);
          v114 = *(float32x4_t *)(v11 + 800);
          v293 = *(float32x4_t *)(v11 + 816);
          v115 = vmulq_f32(v293, v106);
          v116 = vcvtq_f32_s32(vcvtq_s32_f32(v115));
          v117 = (int32x4_t)vmulq_f32(v110, vaddq_f32(v293, vmulq_f32(v111, vaddq_f32(v114, vmulq_f32(v111, vaddq_f32(v113, vmulq_f32(v112, v111)))))));
          v289 = v112;
          v118 = vsubq_f32(vabdq_f32(vsubq_f32(v115, vsubq_f32(v116, (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v116, v115)))), v112), v113);
          v119 = vmulq_f32(v118, v118);
          v291 = *(float32x4_t *)(v11 + 752);
          v120 = (int8x16_t)vmulq_f32(v118, vaddq_f32(v70, vmulq_f32(v119, vaddq_f32(v69, vmulq_f32(v119, vaddq_f32(v291, vmulq_f32(v107, v119)))))));
          v121 = (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
          v122 = vminq_f32(vmaxq_f32(vmulq_f32(v293, vrecpeq_f32(v121)), v114), v24);
          v123 = vmulq_f32(v122, vrecpsq_f32(v121, v122));
          v117.i64[0] = vbslq_s8(v33, v120, (int8x16_t)v117).u64[0];
          v121.i64[0] = v117.i64[0];
          v117.i64[1] = vdupq_laneq_s64((int64x2_t)v123, 1).u64[0];
          v124 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vceqq_f32((float32x4_t)vrev64q_s32(v117), v293)), v293), (int8x16_t)v114, vextq_s8((int8x16_t)v106, (int8x16_t)vmulq_n_f32(v90, *(float *)v84.i32), 8uLL));
          v125 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v124, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v113, (int8x16_t)vcgtq_f32(v112, v124)));
          v126 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v124, (int8x16_t)v73), (int8x16_t)v114);
          v127 = (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v126, v107));
          v128 = vsubq_f32(vsubq_f32(v126, v114), vmulq_f32(vmulq_f32(v70, v127), v126));
          v290 = v62;
          v129 = vmulq_f32(v128, v128);
          v121.i64[1] = v123.i64[1];
          v130 = vmaxq_f32(vmulq_laneq_f32(vaddq_f32(vaddq_f32(vsubq_f32(v125, v291), v127), vmulq_f32(v128, vaddq_f32(v58, vmulq_f32(v128, vaddq_f32(vaddq_f32(v297, vmulq_f32(v296, v128)), vmulq_f32(v129, vaddq_f32(vaddq_f32(v288, vmulq_f32(v62, v128)), vmulq_f32(v129, vaddq_f32(v306, vmulq_f32(v307, v128)))))))))), v123, 2), v298);
          v131 = vcvtq_f32_s32(vcvtq_s32_f32(v130));
          v132 = vsubq_f32(v131, (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v131, v130)));
          v133 = vsubq_f32(v130, v132);
          v134 = v54;
          v135 = (int8x16_t)vmulq_f32(vaddq_f32(v114, vmulq_f32(v133, vaddq_f32(v300, vmulq_f32(v133, vaddq_f32(vaddq_f32(v302, vmulq_f32(v54, v133)), vmulq_f32(vmulq_f32(v133, v133), vaddq_f32(v299, vmulq_f32(v301, v133)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(vcvtq_s32_f32(v132), v295), 0x17uLL));
          v136 = (float32x4_t)vbslq_s8(v19, v135, (int8x16_t)v90);
          v137 = (int8x16_t)vmulq_laneq_f32(v121, v136, 3);
          v123.i64[0] = v137.i64[0];
          v123.i64[1] = v106.i64[1];
          v138 = (float32x4_t)vextq_s8((int8x16_t)v106, v137, 8uLL);
          v139 = vmulq_laneq_f32(v138, v136, 3);
          v140 = (float32x4_t)vextq_s8(v135, vandq_s8((int8x16_t)v134, (int8x16_t)vceqq_f32(v123, v139)), 0xCuLL);
          *(int8x8_t *)v127.f32 = vext_s8(*(int8x8_t *)v139.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL), 4uLL);
          v127.i64[1] = vextq_s8((int8x16_t)v140, (int8x16_t)v139, 0xCuLL).u64[0];
          v141 = (float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL);
          v140.i64[0] = v139.i64[0];
          v142 = vandq_s8((int8x16_t)v114, (int8x16_t)vceqq_f32(v123, v140));
          v143 = vbslq_s8(v19, vextq_s8(v142, v142, 4uLL), (int8x16_t)v121);
          v144 = (float32x4_t)vbslq_s8(v19, (int8x16_t)vaddq_f32(v141, vmulq_lane_f32(v141, *(float32x2_t *)v136.f32, 1)), (int8x16_t)v121);
          v145 = v64;
          v146 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vceqq_f32((float32x4_t)vextq_s8((int8x16_t)v144, (int8x16_t)v144, 8uLL), v64)), v64), (int8x16_t)v114, vextq_s8((int8x16_t)v144, (int8x16_t)v144, 0xCuLL));
          v147 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v146, (int8x16_t)v73), (int8x16_t)v114);
          v148 = (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v147, v62));
          v149 = vsubq_f32(vsubq_f32(v147, v114), vmulq_f32(vmulq_f32(v112, v148), v147));
          v150 = vmulq_f32(v149, v149);
          v151 = (int32x4_t)vminq_f32((float32x4_t)vextq_s8(v143, v143, 8uLL), v127);
          v8 = 0uLL;
          v152 = vmaxq_f32(vmulq_laneq_f32(vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v146, 0x17uLL)), (float32x4_t)vandq_s8((int8x16_t)v292, (int8x16_t)vcgtq_f32(v101, v146))), v288), v148), vmulq_f32(v149, vaddq_f32(v299, vmulq_f32(v149, vaddq_f32(vaddq_f32(v58, vmulq_f32(v298, v149)), vmulq_f32(v150,
                                 vaddq_f32(vaddq_f32(v306, vmulq_f32(v307, v149)), vmulq_f32(v150, vaddq_f32(v297, vmulq_f32(v296, v149)))))))))), v144, 2), v301);
          v153 = vcvtq_f32_s32(vcvtq_s32_f32(v152));
          v154 = vsubq_f32(v153, (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v153, v152)));
          v155 = (float32x4_t)vbslq_s8(v33, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32(v151), v64), vextq_s8((int8x16_t)vsubq_f32(v138, v112), (int8x16_t)v139, 8uLL), (int8x16_t)v123), (int8x16_t)v123);
          v156 = vsubq_f32(v152, v154);
          v157 = vcvtq_s32_f32(v154);
          v159 = *(int32x4_t *)(v11 + 832);
          v158 = *(int8x16_t *)(v11 + 848);
          v160 = (int8x16_t)vmulq_f32(vaddq_f32(v114, vmulq_f32(v156, vaddq_f32(*(float32x4_t *)(v11 + 272), vmulq_f32(v156, vaddq_f32(vaddq_f32(v303, vmulq_f32(v304, v156)), vmulq_f32(vmulq_f32(v156, v156), vaddq_f32(v302, vmulq_f32(v134, v156)))))))), (float32x4_t)vshlq_n_s32(vaddq_s32(v159, v157), 0x17uLL));
          v161 = (float32x4_t)vrev64q_s32((int32x4_t)v136);
          v162 = vaddq_f32(v74, vmulq_f32(v294, v161));
          v163 = vcvtq_f32_s32(vcvtq_s32_f32(v162));
          v164 = vaddq_f32(v74, vabdq_f32(vsubq_f32(v162, vsubq_f32(v163, (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v163, v162)))), v70));
          v165 = vmulq_f32(v164, v164);
          v62.i64[0] = vbslq_s8(v33, v160, (int8x16_t)v151).u64[0];
          v166 = vmulq_f32(v164, vaddq_f32(*(float32x4_t *)(v11 + 688), vmulq_f32(v165, vaddq_f32(v292, vmulq_f32(v165, vaddq_f32(v145, vmulq_f32(v101, v165)))))));
          v167 = (int8x16_t)vnegq_f32(v155);
          v168 = vmulq_n_f32(v155, v62.f32[0]);
          v155.i64[1] = v166.i64[1];
          v169 = vmulq_f32(v113, v136);
          v170 = vcvtq_f32_s32(vcvtq_s32_f32(v169));
          v171 = vsubq_f32(vabdq_f32(vsubq_f32(v169, vsubq_f32(v170, (float32x4_t)vandq_s8((int8x16_t)v291, (int8x16_t)vcgtq_f32(v170, v169)))), v107), v70);
          v172 = vaddq_f32(v168, (float32x4_t)vextq_s8(v167, v167, 8uLL));
          v173 = vmulq_f32(v171, v171);
          v174 = vmulq_f32(v172, v172);
          v175 = vaddq_f32(v288, vmulq_f32(v173, vaddq_f32(v292, vmulq_f32(v173, vaddq_f32(v145, vmulq_f32(v101, v173))))));
          v176 = (int8x16_t)vmulq_f32(v171, v175);
          v175.i64[1] = vextq_s8((int8x16_t)v174, (int8x16_t)v174, 0xCuLL).u64[0];
          v177 = (float32x4_t)vbslq_s8(v158, v176, (int8x16_t)v155);
          v178 = vmulq_n_f32(v177, v136.f32[0]);
          v155.i64[0] = v144.i64[0];
          v155.i64[1] = v178.i64[1];
          v179 = (int8x16_t)vaddq_f32(v174, v175);
          v174.i64[0] = v177.i64[0];
          v174.i64[1] = vsubq_f32(v178, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v177, 0)).i64[1];
          v180 = vmulq_f32(v172, v174);
          v181 = (float32x4_t)vextq_s8(v179, (int8x16_t)v139, 8uLL);
          v182 = vaddq_f32(v180, (float32x4_t)vdupq_laneq_s32((int32x4_t)v180, 3));
          v183 = vminq_f32(vmaxq_f32(vrecpeq_f32(v181), v74), v24);
          v184 = vminq_f32(vmaxq_f32(vmulq_f32(v183, vrecpsq_f32(v181, v183)), v74), v24);
          v185 = vmulq_f32(v184, vrecpsq_f32(v181, v184));
          v184.i64[0] = vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL).u64[0];
          v185.i64[0] = vmulq_laneq_f32(v185, v182, 2).u64[0];
          *(float32x2_t *)v177.f32 = vadd_f32(vmul_n_f32(*(float32x2_t *)v184.f32, v185.f32[0]), *(float32x2_t *)v177.f32);
          *(float32x2_t *)&v177.u32[2] = vneg_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v184.f32));
          v185.i64[1] = vdupq_laneq_s64((int64x2_t)v172, 1).u64[0];
          v186 = vbslq_s8(v158, (int8x16_t)vrev64q_s32((int32x4_t)v185), (int8x16_t)v177);
          v185.i64[0] = vextq_s8(v186, v186, 8uLL).u64[0];
          *(float32x2_t *)v182.f32 = vmul_f32(*(float32x2_t *)v185.f32, *(float32x2_t *)v185.f32);
          *(float32x2_t *)v182.f32 = vadd_f32(*(float32x2_t *)v182.f32, (float32x2_t)vrev64_s32(*(int32x2_t *)v182.f32));
          v187 = (int64x2_t)vsubq_f32(v155, (float32x4_t)vdupq_lane_s64(v186.i64[0], 0));
          v188 = vminq_f32(vmaxq_f32(vrecpeq_f32(*(float32x4_t *)v11), v74), v24);
          v189.i64[0] = v182.i64[0];
          v189.i64[1] = v184.i64[0];
          *(int8x8_t *)v148.f32 = vext_s8(*(int8x8_t *)v182.f32, *(int8x8_t *)v184.f32, 4uLL);
          v190 = (float32x4_t)vextq_s8((int8x16_t)v172, (int8x16_t)v182, 8uLL);
          v148.i64[1] = v185.i64[0];
          v191 = vminq_f32(vmaxq_f32(vmulq_f32(v188, vrecpsq_f32(*(float32x4_t *)v11, v188)), v74), v24);
          v192 = vmulq_laneq_f32(vmulq_f32(v191, vrecpsq_f32(*(float32x4_t *)v11, v191)), v136, 2);
          v193 = vminq_f32(vrsqrteq_f32(v190), v290);
          v182.i64[0] = v192.i64[0];
          v182.i64[1] = v172.i64[1];
          v194 = vminq_f32(vmulq_f32(v193, vrsqrtsq_f32(vmulq_f32(v193, v190), v193)), v290);
          v195 = (int32x4_t)vorrq_s8((int8x16_t)v159, (int8x16_t)v182);
          v196 = *(float32x4_t *)(v11 + 864);
          v197 = *(float32x4_t *)(v11 + 880);
          v192.i64[0] = vmulq_f32(v192, v196).u64[0];
          v198 = (int8x16_t)vnegq_f32(v189);
          v199 = (int64x2_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgeq_f32((float32x4_t)vrev64q_s32(v195), v293));
          v200 = (float32x4_t)vbslq_s8(v33, vextq_s8(v198, v198, 0xCuLL), (int8x16_t)v148);
          v192.i64[1] = vdupq_laneq_s64(v199, 1).u64[0];
          v201 = (float32x4_t)vrev64q_s32((int32x4_t)v192);
          v148.i64[0] = vextq_s8((int8x16_t)v199, (int8x16_t)v199, 8uLL).u64[0];
          v202 = vcvtq_f32_s32(vcvtq_s32_f32(v201));
          v201.i64[0] = vsubq_f32(v202, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v202, v201), (int8x16_t)v196, (int8x16_t)0)).u64[0];
          *(int8x8_t *)v202.f32 = vext_s8(*(int8x8_t *)v201.f32, *(int8x8_t *)v148.f32, 4uLL);
          *(int8x8_t *)v148.f32 = vext_s8(*(int8x8_t *)v148.f32, *(int8x8_t *)v201.f32, 4uLL);
          v201.i64[1] = v199.i64[1];
          v148.i64[1] = v202.i64[0];
          v202.i64[0] = v200.i64[0];
          v203 = (int8x16_t)vmulq_f32(v196, v148);
          v204 = vmulq_f32(v194, vrsqrtsq_f32(vmulq_f32(v194, v190), v194));
          v205 = (float32x4_t)vbslq_s8(v158, v203, (int8x16_t)v201);
          v206 = vcvtq_f32_s32(vcvtq_s32_f32(v205));
          v207 = vmulq_laneq_f32(v200, v204, 2);
          v202.i64[1] = v207.i64[1];
          v202.i64[0] = vmulq_f32(v202, v202).u64[0];
          v208 = vbslq_s8(v158, (int8x16_t)vsubq_f32(v206, (float32x4_t)vandq_s8((int8x16_t)v291, (int8x16_t)vcgtq_f32(v206, v205))), (int8x16_t)v201);
          v209 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vmulq_f32(v289, v161), v208);
          v210 = vcvtq_f32_s32(vcvtq_s32_f32(v209));
          v211 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vsubq_f32(v210, (float32x4_t)vandq_s8((int8x16_t)v114, (int8x16_t)vcgtq_f32(v210, v209))), v208);
          v212 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v202.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v202.f32, 1));
          v213 = (float32x4_t)vbslq_s8(v308, (int8x16_t)vsubq_f32(v211, vmulq_laneq_f32(v197, v211, 2)), (int8x16_t)v211);
          v214 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vsubq_f32(v161, vmulq_lane_f32(v213, *(float32x2_t *)v197.f32, 1)), (int8x16_t)v213);
          v210.i64[0] = vsubq_f32(v214, (float32x4_t)vrev64q_s32((int32x4_t)v214)).u64[0];
          v210.i64[1] = v214.i64[1];
          v215 = vminq_f32(vrsqrteq_f32(v212), v24);
          v216 = *(float32x4_t *)(v11 + 912);
          v217 = (int32x4_t)vandq_s8((int8x16_t)v134, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)vdupq_lane_s64(vandq_s8(vbslq_s8(v33, (int8x16_t)v210, (int8x16_t)vdupq_laneq_s64((int64x2_t)v210, 1)), *(int8x16_t *)(v11 + 896)).i64[0], 0)), v303));
          v206.i64[0] = vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL).u64[0];
          v218 = vminq_f32((float32x4_t)vdupq_laneq_s32(v217, 2), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v217.i8, 1));
          *(float32x2_t *)v206.f32 = vmul_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v206.f32);
          *(float32x2_t *)v206.f32 = vadd_f32(*(float32x2_t *)v206.f32, (float32x2_t)vrev64_s32(*(int32x2_t *)v206.f32));
          v190.i64[0] = v139.i64[0];
          v206.i64[1] = vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL).u64[0];
          v101.i64[0] = v62.i64[0];
          v190.i64[1] = v187.i64[1];
          v219 = vminq_f32(vmulq_f32(v215, vrsqrtsq_f32(vmulq_f32(v215, v212), v215)), v24);
          v220 = vmulq_n_f32((float32x4_t)vdupq_lane_s64(v144.i64[0], 0), v62.f32[0]);
          v139.i64[1] = vdupq_laneq_s64(v187, 1).u64[0];
          v221 = vmulq_f32(v219, vrsqrtsq_f32(vmulq_f32(v219, v212), v219));
          v62.i64[1] = vdupq_laneq_s64((int64x2_t)v204, 1).u64[0];
          v222 = *(float32x4_t *)(v11 + 928);
          v223 = *(float32x4_t *)(v11 + 944);
          v224 = (int8x16_t)vmulq_f32(v221, v200);
          v225 = (float32x4_t)vbslq_s8(v308, (int8x16_t)vaddq_f32(v222, (float32x4_t)vrev64q_s32((int32x4_t)v139)), (int8x16_t)v206);
          v206.i64[0] = v224.i64[0];
          v226 = (float32x4_t)vbslq_s8(v33, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v62), v222), (int8x16_t)vrev64q_s32((int32x4_t)v225), (int8x16_t)v190), (int8x16_t)v190);
          v227 = (float32x4_t)vextq_s8((int8x16_t)v225, (int8x16_t)v225, 4uLL);
          v228 = vminq_f32(vrsqrteq_f32(v227), v222);
          v206.i64[1] = v207.i64[1];
          v229 = vmulq_f32(v228, vrsqrtsq_f32(vmulq_f32(v228, v227), v228));
          v230 = (int8x16_t)vsubq_f32(v226, (float32x4_t)vdupq_laneq_s64((int64x2_t)v220, 1));
          v231 = vminq_f32(v229, v222);
          v232 = (int8x16_t)vdupq_laneq_s64((int64x2_t)v206, 1);
          v233 = (int8x16_t)vmulq_f32(v231, vrsqrtsq_f32(vmulq_f32(v231, v227), v231));
          v227.i64[0] = v230.i64[0];
          v227.i64[1] = v226.i64[1];
          v234 = (float32x4_t)vbslq_s8(v158, (int8x16_t)v225, v233);
          v225.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v218, v216), v232, v224).u64[0];
          v235 = vmulq_f32(v227, v227);
          v235.i64[0] = vaddq_f32(v235, (float32x4_t)vrev64q_s32((int32x4_t)v235)).u64[0];
          v235.i64[1] = v234.i64[1];
          v236 = vmulq_f32((float32x4_t)vzip2q_s64((int64x2_t)vsubq_f32(v178, v220), (int64x2_t)v178), v227);
          v237 = vminq_f32(vmaxq_f32(vrecpeq_f32(v235), v197), v24);
          v238 = vminq_f32(vmaxq_f32(vmulq_f32(v237, vrecpsq_f32(v235, v237)), v197), v24);
          v235.i64[0] = vmulq_f32(vmulq_f32(v238, vrecpsq_f32(v235, v238)), vaddq_f32(v236, (float32x4_t)vrev64q_s32((int32x4_t)v236))).u64[0];
          v239 = (float32x4_t)vextq_s8((int8x16_t)v226, v230, 8uLL);
          v226.i64[0] = vmulq_laneq_f32(v239, v234, 3).u64[0];
          v226.i64[1] = v178.i64[1];
          v225.i64[1] = vaddq_f32(v220, vmulq_n_f32(v239, *(float *)&v235)).i64[1];
          v240 = (int8x16_t)vmulq_f32(v226, v225);
          v241 = vsubq_f32(v226, v225);
          v242 = vmulq_f32(v241, v241);
          v218.i64[0] = vextq_s8((int8x16_t)v242, (int8x16_t)v242, 4uLL).u64[0];
          v218.i64[1] = vextq_s8((int8x16_t)v242, (int8x16_t)v242, 0xCuLL).u64[0];
          v243 = vaddq_f32(v242, v218);
          v244 = vminq_f32(vrsqrteq_f32(v243), v222);
          v245 = vminq_f32(vmulq_f32(v244, vrsqrtsq_f32(vmulq_f32(v244, v243), v244)), v222);
          v230.i64[1] = vaddq_f32((float32x4_t)vextq_s8(v240, v240, 4uLL), (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v240, 0)).i64[1];
          v246 = (float32x4_t)vbslq_s8(v158, (int8x16_t)vmulq_f32(v245, vrsqrtsq_f32(vmulq_f32(v245, v243), v245)), v230);
          v247 = (float32x4_t)vrev64q_s32((int32x4_t)v246);
          v248 = (int8x16_t)vnegq_f32(v247);
          v244.i64[0] = vbslq_s8(v33, v248, (int8x16_t)v247).u64[0];
          v249 = vextq_s8((int8x16_t)v246, (int8x16_t)v246, 4uLL);
          v235.i64[1] = v234.i64[1];
          v178.i64[0] = v244.i64[0];
          *(float32x2_t *)&v178.u32[2] = vabs_f32((float32x2_t)*(_OWORD *)&vextq_s8(v249, v249, 8uLL));
          v244.i64[1] = vandq_s8(*(int8x16_t *)&v197, (int8x16_t)vcgeq_f32(vnegq_f32(v178), v216)).i64[1];
          v250 = (float32x4_t)vbslq_s8(v158, (int8x16_t)v235, (int8x16_t)v244);
          v248.i64[1] = vmulq_laneq_f32(v241, v246, 2).i64[1];
          v251 = (int64x2_t)vandq_s8((int8x16_t)v197, (int8x16_t)vcgeq_f32(vnegq_f32(v250), v216));
          v244.i64[0] = v250.i64[0];
          v244.i64[1] = v251.i64[1];
          v250.i64[1] = vdupq_laneq_s64(v251, 1).u64[0];
          v252 = (float32x4_t)vrev64q_s32((int32x4_t)v250);
          v253 = vbslq_s8(v33, (int8x16_t)v247, v248);
          v254 = *(int8x16_t *)(v11 + 208);
          v255 = (int32x4_t)vbslq_s8(v254, (int8x16_t)vminq_f32(v252, v244), (int8x16_t)v244);
          v256 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v255, 3), v216), v253, (int8x16_t)v255);
          v244.i64[0] = vmulq_f32(v256, v256).u64[0];
          v257 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v244.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v244.f32, 1));
          v258 = vminq_f32(vrsqrteq_f32(v257), v24);
          v259 = vminq_f32(vmulq_f32(v258, vrsqrtsq_f32(vmulq_f32(v258, v257), v258)), v24);
          v260 = vmulq_f32(vmulq_f32(v259, vrsqrtsq_f32(vmulq_f32(v259, v257), v259)), v256);
          v261 = (float32x4_t)vextq_s8(v253, (int8x16_t)v260, 8uLL);
          v260.i64[1] = v253.i64[1];
          *(float32x2_t *)v253.i8 = vabs_f32((float32x2_t)vext_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL), *(int8x8_t *)v246.f32, 4uLL));
          v253.i64[1] = vextq_s8((int8x16_t)v234, (int8x16_t)v234, 8uLL).u64[0];
          *(int8x8_t *)v259.f32 = vqtbl1_s8(v253, *(int8x8_t *)v223.f32);
          v262 = vmulq_f32(v260, v261);
          *(int8x8_t *)&v259.u32[2] = vqtbl1_s8(v253, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v223, (int8x16_t)v223, 8uLL));
          v263 = vminq_f32(vmaxq_f32(vrecpeq_f32(v259), v305), v24);
          v264 = vminq_f32(vmaxq_f32(vmulq_f32(v263, vrecpsq_f32(v259, v263)), v305), v24);
          v265 = (int8x16_t)vaddq_f32(v262, (float32x4_t)vrev64q_s32((int32x4_t)v262));
          v266 = (int8x16_t)vmulq_f32(v264, vrecpsq_f32(v259, v264));
          *(int8x8_t *)v223.f32 = vext_s8(*(int8x8_t *)v265.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v266, v266, 8uLL), 4uLL);
          v261.i64[0] = v265.i64[0];
          v261.i64[1] = v266.i64[1];
          v223.i64[1] = vextq_s8(v266, v265, 0xCuLL).u64[0];
          v267 = (float32x4_t)vbslq_s8(v308, (int8x16_t)vmulq_laneq_f32(v223, v246, 3), (int8x16_t)v261);
          v268 = (int32x4_t)vmulq_laneq_f32(v267, v267, 3);
          v267.i64[0] = vbslq_s8(v33, (int8x16_t)v267, (int8x16_t)v268).u64[0];
          v269 = vmulq_f32(v247, vabsq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v267.f32, 0)));
          v270 = vminq_f32(vmaxq_f32(vrecpeq_f32(v269), v303), v24);
          v101.i64[1] = v204.i64[1];
          v271 = vminq_f32(vmaxq_f32(vmulq_f32(v270, vrecpsq_f32(v269, v270)), v303), v24);
          v272 = (int64x2_t)vbslq_s8(v158, (int8x16_t)v255, (int8x16_t)vmulq_n_f32(vmulq_f32(v271, vrecpsq_f32(v269, v271)), v267.f32[0]));
          v273 = (float32x4_t)vbslq_s8(v33, (int8x16_t)vsubq_f32(v101, v136), (int8x16_t)v268);
          v274 = (int8x16_t)vabsq_f32(v273);
          v275 = (int8x16_t)vsubq_f32(v136, (float32x4_t)vextq_s8((int8x16_t)v136, (int8x16_t)v136, 0xCuLL));
          v273.i64[1] = vminq_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v273, *(int8x16_t *)&v273, 4uLL), (float32x4_t)vextq_s8(v274, v274, 8uLL)).i64[1];
          v268.i64[0] = v275.i64[0];
          v268.i64[1] = vdupq_laneq_s64(v272, 1).u64[0];
          v276 = (float32x4_t)vbslq_s8(v158, (int8x16_t)vabsq_f32((float32x4_t)vrev64q_s32(v268)), (int8x16_t)v273);
          v277 = (int8x16_t)vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v275.i8, 0), v276);
          v278 = (float32x4_t)vextq_s8(v277, (int8x16_t)v276, 8uLL);
          v276.i64[1] = v277.i64[1];
          v279 = vbslq_s8(v33, (int8x16_t)vminq_f32(v278, v276), (int8x16_t)v276);
          v280 = (float32x4_t)vbslq_s8(v33, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8((int8x16_t)v272, v275, 8uLL), v222), v279, vextq_s8(v279, v279, 0xCuLL)), (int8x16_t)v276);
          v114.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(*(float32x4_t *)(v11 + 128), v280), v222), v114).u64[0];
          v114.i64[1] = v272.i64[1];
          v281 = (int32x4_t)vbslq_s8(v254, vandq_s8((int8x16_t)v197, (int8x16_t)vcgtq_f32(v114, v216)), (int8x16_t)v114);
          v282 = (int64x2_t)vsubq_f32(v306, vmulq_f32(v307, (float32x4_t)vdupq_lane_s64(v281.i64[0], 0)));
          v278.i64[0] = v281.i64[0];
          v278.i64[1] = vdupq_laneq_s64(v282, 1).u64[0];
          v275.i64[0] = v281.i64[0];
          v275.i64[1] = v282.i64[1];
          v283 = (float32x4_t)vbslq_s8(v308, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v278), *(float *)v281.i32), v275);
          v284 = (int8x16_t)vcgtq_f32(v216, vminq_f32(vnegq_f32(vminq_f32((float32x4_t)vdupq_laneq_s32(v281, 2), (float32x4_t)vdupq_laneq_s32(v281, 3))), vnegq_f32(vminq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v234, 2), (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8((int8x16_t)v196, (int8x16_t)vcgtq_f32(v280, v216)), 1)))));
          v285 = vbslq_s8(v33, (int8x16_t)v283, (int8x16_t)vmulq_laneq_f32(v283, v283, 2));
          *(float32x4_t *)(*(_QWORD *)&v5 + v9) = vaddq_f32(*(float32x4_t *)(v11 + 112), vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8(v284, *(int8x16_t *)(v11 + 80), *(int8x16_t *)(v11 + 96)), *(float32x4_t *)(v11 + 112)), *(float *)vbslq_s8((int8x16_t)vcgtq_f32(v222, *(float32x4_t *)(v11 + 144)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v285.i8, 1), v285).i32));
          v10 = vaddq_f32(v309, (float32x4_t)xmmword_1B304F230);
          v9 += 16;
        }
        while (16 * v4 != v9);
      }
      v287 = vaddq_f32(v287, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcConcentricTriangleChecker::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcConcentricTriangleChecker::GetROI()
{
  return 0;
}

void HgcConcentricTriangleChecker::HgcConcentricTriangleChecker(HgcConcentricTriangleChecker *this)
{
  _QWORD *v2;
  HgcConcentricTriangleChecker::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EC540;
  v3 = (HgcConcentricTriangleChecker::State *)operator new();
  HgcConcentricTriangleChecker::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B2897DAC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcConcentricTriangleChecker::~HgcConcentricTriangleChecker(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EC540;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C403ECDB685);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcConcentricTriangleChecker::~HgcConcentricTriangleChecker(this);
  HGObject::operator delete(v1);
}

uint64_t HgcConcentricTriangleChecker::SetParameter(HgcConcentricTriangleChecker *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  __n128 *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  __n128 *v17;
  float *v18;
  float *v19;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_63;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_63;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_63;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_63;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == 0.0
        && v12[4].n128_f32[1] == 0.0
        && v12[4].n128_f32[2] == a3.n128_f32[0]
        && v12[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12[4].n128_u64[0] = 0;
      v12[4].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[60] = a3;
      goto LABEL_63;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_63;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_63;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_63;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_63;
    case 9:
      v17 = (__n128 *)*((_QWORD *)this + 51);
      if (v17[9].n128_f32[0] == (float)-a3.n128_f32[0]
        && v17[9].n128_f32[1] == 0.0
        && v17[9].n128_f32[2] == 0.0
        && v17[9].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v17[9].n128_f32[0] = -a3.n128_f32[0];
      v17[9].n128_u64[1] = 0;
      v17[9].n128_u32[1] = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v17[61] = a3;
      goto LABEL_63;
    case 10:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6)
        return 0;
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_63;
    case 11:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6)
        return 0;
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
LABEL_63:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

uint64_t HgcConcentricTriangleChecker::GetParameter(HgcConcentricTriangleChecker *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  uint64_t result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_14;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_14;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_14;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_14;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[240];
      a3[1] = v8[241];
      a3[2] = v8[242];
      v4 = v8 + 243;
      goto LABEL_14;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_14;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_14;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_14;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_14;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[244];
      a3[1] = v13[245];
      a3[2] = v13[246];
      v4 = v13 + 247;
      goto LABEL_14;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      v4 = v14 + 43;
      goto LABEL_14;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      v4 = v15 + 47;
LABEL_14:
      result = 0;
      a3[3] = *v4;
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

double HgcConcentricTriangleChecker::State::State(HgcConcentricTriangleChecker::State *this)
{
  double result;
  __int128 v2;

  result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_QWORD *)&v2 = 0x8000000080000000;
  *((_QWORD *)&v2 + 1) = 0x8000000080000000;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = v2;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = xmmword_1B3050FD0;
  *((_OWORD *)this + 13) = xmmword_1B3050F70;
  *((_OWORD *)this + 14) = xmmword_1B3051C20;
  *((int32x4_t *)this + 15) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 16) = xmmword_1B3050FF0;
  *((_OWORD *)this + 17) = xmmword_1B3052470;
  *((_OWORD *)this + 18) = xmmword_1B3050E20;
  *((_OWORD *)this + 19) = xmmword_1B3052480;
  *((_OWORD *)this + 20) = xmmword_1B3052490;
  *((_OWORD *)this + 21) = xmmword_1B30524A0;
  *((_OWORD *)this + 22) = xmmword_1B30524B0;
  *((_OWORD *)this + 23) = xmmword_1B30524C0;
  *((_OWORD *)this + 24) = xmmword_1B30524D0;
  *((_OWORD *)this + 25) = xmmword_1B30524E0;
  *((_OWORD *)this + 26) = xmmword_1B30524F0;
  *((_OWORD *)this + 27) = xmmword_1B3052500;
  *((_OWORD *)this + 28) = xmmword_1B3052510;
  *((_OWORD *)this + 29) = xmmword_1B3052520;
  *((_OWORD *)this + 30) = xmmword_1B3052530;
  *((_OWORD *)this + 31) = xmmword_1B3052540;
  *((_OWORD *)this + 32) = xmmword_1B3052550;
  *((_OWORD *)this + 33) = xmmword_1B3052560;
  *((_OWORD *)this + 34) = xmmword_1B3052570;
  *((_OWORD *)this + 35) = xmmword_1B3052580;
  *((_OWORD *)this + 36) = xmmword_1B3052590;
  *((_OWORD *)this + 37) = xmmword_1B30525A0;
  *((_OWORD *)this + 38) = xmmword_1B30525B0;
  *((_OWORD *)this + 39) = xmmword_1B30525C0;
  *((_OWORD *)this + 40) = xmmword_1B30525D0;
  *((_OWORD *)this + 41) = xmmword_1B30525E0;
  *((_OWORD *)this + 42) = xmmword_1B30525F0;
  *((_OWORD *)this + 43) = xmmword_1B3052600;
  *((_OWORD *)this + 44) = xmmword_1B3052610;
  *((_OWORD *)this + 45) = xmmword_1B3052620;
  *((_OWORD *)this + 46) = xmmword_1B3052630;
  *((_OWORD *)this + 47) = xmmword_1B3052640;
  *((_OWORD *)this + 48) = xmmword_1B3052650;
  *((_OWORD *)this + 49) = xmmword_1B3052660;
  *((_OWORD *)this + 50) = xmmword_1B3052670;
  *((_OWORD *)this + 51) = xmmword_1B3052680;
  *((_OWORD *)this + 52) = xmmword_1B3052690;
  *((_OWORD *)this + 53) = xmmword_1B3050FE0;
  *((_OWORD *)this + 54) = xmmword_1B30526A0;
  *((_OWORD *)this + 55) = xmmword_1B30526B0;
  *((_OWORD *)this + 56) = xmmword_1B3051470;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = xmmword_1B30526C0;
  *((_OWORD *)this + 59) = xmmword_1B30526D0;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  return result;
}

const char *HgcRectToPolar::GetProgram(HgcRectToPolar *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000007af\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.01348046958, 0.05747731403, 0.000000000, -0.1212390736);\n"
             "    const half4 c1 = half4(0.1956359297, -0.3329946101, 0.9999956489, 1.570796371);\n"
             "    const half4 c2 = half4(6.283185482, 3.141592741, 0.000000000, 0.000000000);\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy*hg_Params[4].xy;\n"
             "    s0.zw = float2(c0.zz);\n"
             "    s0 = s0 + hg_Params[6];\n"
             "    s0 = s0 - hg_Params[1];\n"
             "    s1.xy = abs(s0.xy);\n"
             "    s1.z = fmax(s1.x, s1.y);\n"
             "    s1.w = 1.00000f / s1.z;\n"
             "    s1.z = fmin(s1.x, s1.y);\n"
             "    s1.z = s1.z*s1.w;\n"
             "    s1.w = s1.z*s1.z;\n"
             "    s2.x = s1.w*float(c0.x) + float(c0.y);\n"
             "    s2.x = s2.x*s1.w + float(c0.w);\n"
             "    s2.x = s2.x*s1.w + float(c1.x);\n"
             "    s2.x = s2.x*s1.w + float(c1.y);\n"
             "    s1.w = s2.x*s1.w + float(c1.z);\n"
             "    s1.z = s1.w*s1.z;\n"
             "    s1.x = s1.y - s1.x;\n"
             "    s1.w = -s1.z + float(c1.w);\n"
             "    s1.x = select(s1.z, s1.w, s1.x < 0.00000h);\n"
             "    s1.y = -s1.x + float(c2.y);\n"
             "    s1.x = select(s1.x, s1.y, s0.y < 0.00000h);\n"
             "    s1.x = select(s1.x, -s1.x, s0.x < 0.00000h);\n"
             "    s0.x = dot(s0, s0);\n"
             "    s1.y = s1.x + float(c2.x);\n"
             "    s1.x = select(s1.x, s1.y, s1.x < 0.00000h);\n"
             "    s1.x = s1.x*hg_Params[0].x;\n"
             "    s1.y = float(s1.x < hg_Params[6].x);\n"
             "    s0.y = select(s1.x, hg_Params[2].y, -s1.y < 0.00000h);\n"
             "    s0.w = sqrt(s0.x);\n"
             "    s0.z = select(s0.y, s1.x, hg_Params[3].z < 0.00000h);\n"
             "    s0.xy = s0.zw - hg_Params[6].xy;\n"
             "    s0.xy = s0.xy*hg_Params[5].xy;\n"
             "    s0.xy = s0.xy + hg_Params[7].xy;\n"
             "    s0.xy = s0.xy*hg_Params[7].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=04e687d1:0d14dd88:2b14bde3:83f6d5b3\n"
             "//SIG=00400000:00000000:00000000:00000001:0003:0008:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000766\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.01348046958, 0.05747731403, 0.000000000, -0.1212390736);\n"
             "    const float4 c1 = float4(0.1956359297, -0.3329946101, 0.9999956489, 1.570796371);\n"
             "    const float4 c2 = float4(6.283185482, 3.141592741, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy*hg_Params[4].xy;\n"
             "    r0.zw = c0.zz;\n"
             "    r0 = r0 + hg_Params[6];\n"
             "    r0 = r0 - hg_Params[1];\n"
             "    r1.xy = abs(r0.xy);\n"
             "    r1.z = fmax(r1.x, r1.y);\n"
             "    r1.w = 1.00000f / r1.z;\n"
             "    r1.z = fmin(r1.x, r1.y);\n"
             "    r1.z = r1.z*r1.w;\n"
             "    r1.w = r1.z*r1.z;\n"
             "    r2.x = r1.w*c0.x + c0.y;\n"
             "    r2.x = r2.x*r1.w + c0.w;\n"
             "    r2.x = r2.x*r1.w + c1.x;\n"
             "    r2.x = r2.x*r1.w + c1.y;\n"
             "    r1.w = r2.x*r1.w + c1.z;\n"
             "    r1.z = r1.w*r1.z;\n"
             "    r1.x = r1.y - r1.x;\n"
             "    r1.w = -r1.z + c1.w;\n"
             "    r1.x = select(r1.z, r1.w, r1.x < 0.00000f);\n"
             "    r1.y = -r1.x + c2.y;\n"
             "    r1.x = select(r1.x, r1.y, r0.y < 0.00000f);\n"
             "    r1.x = select(r1.x, -r1.x, r0.x < 0.00000f);\n"
             "    r0.x = dot(r0, r0);\n"
             "    r1.y = r1.x + c2.x;\n"
             "    r1.x = select(r1.x, r1.y, r1.x < 0.00000f);\n"
             "    r1.x = r1.x*hg_Params[0].x;\n"
             "    r1.y = float(r1.x < hg_Params[6].x);\n"
             "    r0.y = select(r1.x, hg_Params[2].y, -r1.y < 0.00000f);\n"
             "    r0.w = sqrt(r0.x);\n"
             "    r0.z = select(r0.y, r1.x, hg_Params[3].z < 0.00000f);\n"
             "    r0.xy = r0.zw - hg_Params[6].xy;\n"
             "    r0.xy = r0.xy*hg_Params[5].xy;\n"
             "    r0.xy = r0.xy + hg_Params[7].xy;\n"
             "    r0.xy = r0.xy*hg_Params[7].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ef595f7a:523c5c3c:39779605:04665436\n"
             "//SIG=00000000:00000000:00000000:00000000:0003:0008:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000832\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.01348046958, 0.05747731403, 0.000000000, -0.1212390736);\n"
           "    const highp vec4 c1 = vec4(0.1956359297, -0.3329946101, 0.9999956489, 1.570796371);\n"
           "    const highp vec4 c2 = vec4(6.283185482, 3.141592741, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy*hg_ProgramLocal4.xy;\n"
           "    r0.zw = c0.zz;\n"
           "    r0 = r0 + hg_ProgramLocal6;\n"
           "    r0 = r0 - hg_ProgramLocal1;\n"
           "    r1.xy = abs(r0.xy);\n"
           "    r1.z = max(r1.x, r1.y);\n"
           "    r1.w = 1.00000 / r1.z;\n"
           "    r1.z = min(r1.x, r1.y);\n"
           "    r1.z = r1.z*r1.w;\n"
           "    r1.w = r1.z*r1.z;\n"
           "    r2.x = r1.w*c0.x + c0.y;\n"
           "    r2.x = r2.x*r1.w + c0.w;\n"
           "    r2.x = r2.x*r1.w + c1.x;\n"
           "    r2.x = r2.x*r1.w + c1.y;\n"
           "    r1.w = r2.x*r1.w + c1.z;\n"
           "    r1.z = r1.w*r1.z;\n"
           "    r1.x = r1.y - r1.x;\n"
           "    r1.w = -r1.z + c1.w;\n"
           "    r1.x = r1.x < 0.00000 ? r1.w : r1.z;\n"
           "    r1.y = -r1.x + c2.y;\n"
           "    r1.x = r0.y < 0.00000 ? r1.y : r1.x;\n"
           "    r1.x = r0.x < 0.00000 ? -r1.x : r1.x;\n"
           "    r0.x = dot(r0, r0);\n"
           "    r1.y = r1.x + c2.x;\n"
           "    r1.x = r1.x < 0.00000 ? r1.y : r1.x;\n"
           "    r1.x = r1.x*hg_ProgramLocal0.x;\n"
           "    r1.y = float(r1.x < hg_ProgramLocal6.x);\n"
           "    r0.y = -r1.y < 0.00000 ? hg_ProgramLocal2.y : r1.x;\n"
           "    r0.w = sqrt(r0.x);\n"
           "    r0.z = hg_ProgramLocal3.z < 0.00000 ? r1.x : r0.y;\n"
           "    r0.xy = r0.zw - hg_ProgramLocal6.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal5.xy;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal7.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal7.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=b546554b:1773f366:575acd20:506c540d\n"
           "//SIG=00000000:00000000:00000000:00000000:0003:0008:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcRectToPolar::InitProgramDescriptor(HgcRectToPolar *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcRectToPolar_hgc_visible", "//Metal1.0     \n//LEN=00000006a7\n[[ visible ]] FragmentOut HgcRectToPolar_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.01348046958, 0.05747731403, 0.000000000, -0.1212390736);\n"
    "    const float4 c1 = float4(0.1956359297, -0.3329946101, 0.9999956489, 1.570796371);\n"
    "    const float4 c2 = float4(6.283185482, 3.141592741, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy*hg_Params[4].xy;\n"
    "    r0.zw = c0.zz;\n"
    "    r0 = r0 + hg_Params[6];\n"
    "    r0 = r0 - hg_Params[1];\n"
    "    r1.xy = abs(r0.xy);\n"
    "    r1.z = fmax(r1.x, r1.y);\n"
    "    r1.w = 1.00000f / r1.z;\n"
    "    r1.z = fmin(r1.x, r1.y);\n"
    "    r1.z = r1.z*r1.w;\n"
    "    r1.w = r1.z*r1.z;\n"
    "    r2.x = r1.w*c0.x + c0.y;\n"
    "    r2.x = r2.x*r1.w + c0.w;\n"
    "    r2.x = r2.x*r1.w + c1.x;\n"
    "    r2.x = r2.x*r1.w + c1.y;\n"
    "    r1.w = r2.x*r1.w + c1.z;\n"
    "    r1.z = r1.w*r1.z;\n"
    "    r1.x = r1.y - r1.x;\n"
    "    r1.w = -r1.z + c1.w;\n"
    "    r1.x = select(r1.z, r1.w, r1.x < 0.00000f);\n"
    "    r1.y = -r1.x + c2.y;\n"
    "    r1.x = select(r1.x, r1.y, r0.y < 0.00000f);\n"
    "    r1.x = select(r1.x, -r1.x, r0.x < 0.00000f);\n"
    "    r0.x = dot(r0, r0);\n"
    "    r1.y = r1.x + c2.x;\n"
    "    r1.x = select(r1.x, r1.y, r1.x < 0.00000f);\n"
    "    r1.x = r1.x*hg_Params[0].x;\n"
    "    r1.y = float(r1.x < hg_Params[6].x);\n"
    "    r0.y = select(r1.x, hg_Params[2].y, -r1.y < 0.00000f);\n"
    "    r0.w = sqrt(r0.x);\n"
    "    r0.z = select(r0.y, r1.x, hg_Params[3].z < 0.00000f);\n"
    "    r0.xy = r0.zw - hg_Params[6].xy;\n"
    "    r0.xy = r0.xy*hg_Params[5].xy;\n"
    "    r0.xy = r0.xy + hg_Params[7].xy;\n"
    "    r0.xy = r0.xy*hg_Params[7].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B289864C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcRectToPolar");
}

void sub_1B289865C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28987DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B289882C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2898824);
}

_QWORD *HgcRectToPolar::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcRectToPolar [hgc1]");
}

uint64_t HgcRectToPolar::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 7, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcRectToPolar::Bind(HgcRectToPolar *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HgcRectToPolar *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcRectToPolar::RenderTile(HgcRectToPolar *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x2_t v20;
  float32x4_t v21;
  int8x8_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  int64x2_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  float32x4_t v102;
  uint64_t v103;
  float32x4_t v104;
  uint64_t v105;
  int32x4_t v106;
  float32x2_t v107;
  float32x4_t *v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  float32x4_t *v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x4_t *v120;
  uint64_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int32x4_t v126;
  int8x16_t v127;
  int32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  int64x2_t v147;
  int8x16_t v148;
  float32x4_t v149;
  int8x16_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int8x16_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int8x16_t v156;
  int32x4_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  int8x16_t v164;
  float32x4_t v165;
  uint64_t v166;
  float32x4_t v167;
  uint64_t v168;
  int32x4_t v169;
  float32x2_t v170;
  float32x4_t *v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  int32x4_t v175;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcRectToPolar *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17.i64[0] = v14.i64[0];
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x2_t *)(v19 + 64);
          *(float32x2_t *)v21.f32 = vmul_f32(*(float32x2_t *)v17.f32, v20);
          v22 = *(int8x8_t *)(v19 + 120);
          *(int8x8_t *)&v21.u32[2] = vand_s8(v22, *(int8x8_t *)v21.f32);
          *(float32x2_t *)v23.f32 = vmul_f32(*(float32x2_t *)v18.f32, v20);
          *(int8x8_t *)&v23.u32[2] = vand_s8(v22, *(int8x8_t *)v23.f32);
          v25 = *(float32x4_t *)(v19 + 80);
          v24 = *(float32x4_t *)(v19 + 96);
          v26 = vaddq_f32(v24, v21);
          v27 = vaddq_f32(v24, v23);
          v28 = *(float32x4_t *)(v19 + 16);
          v29 = (int32x4_t)vsubq_f32(v26, v28);
          v30 = (int32x4_t)vsubq_f32(v27, v28);
          v31 = (int8x16_t)vabdq_f32(v26, v28);
          v32 = (int8x16_t)vabdq_f32(v27, v28);
          v33.i64[0] = v31.i64[0];
          v33.i64[1] = vdupq_laneq_s64((int64x2_t)vmaxq_f32((float32x4_t)vextq_s8(v31, v31, 8uLL), (float32x4_t)vextq_s8(v31, v31, 0xCuLL)), 1).u64[0];
          v34 = (float32x4_t)vrev64q_s32(v33);
          v33.i64[0] = v32.i64[0];
          v33.i64[1] = vdupq_laneq_s64((int64x2_t)vmaxq_f32((float32x4_t)vextq_s8(v32, v32, 8uLL), (float32x4_t)vextq_s8(v32, v32, 0xCuLL)), 1).u64[0];
          v35 = (float32x4_t)vrev64q_s32(v33);
          v36 = *(float32x4_t *)(v19 + 128);
          v37 = *(float32x4_t *)(v19 + 144);
          v38 = vminq_f32(vmaxq_f32(vrecpeq_f32(v34), v36), v37);
          v39 = vminq_f32(vmaxq_f32(vrecpeq_f32(v35), v36), v37);
          v40 = vminq_f32(vmaxq_f32(vmulq_f32(v38, vrecpsq_f32(v34, v38)), v36), v37);
          v41 = vminq_f32(vmaxq_f32(vmulq_f32(v39, vrecpsq_f32(v35, v39)), v36), v37);
          v42 = (int8x16_t)vmulq_f32(v40, vrecpsq_f32(v34, v40));
          v43 = (int8x16_t)vmulq_f32(v41, vrecpsq_f32(v35, v41));
          v44 = vextq_s8(v42, v31, 8uLL);
          v45.i64[0] = vextq_s8(v42, v31, 0xCuLL).u64[0];
          *(int8x8_t *)v40.f32 = vext_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), 4uLL);
          v31.i64[1] = v42.i64[1];
          v46 = (float32x4_t)vextq_s8(v43, v32, 8uLL);
          v47.i64[0] = vextq_s8(v43, v32, 0xCuLL).u64[0];
          v48.i64[0] = v32.i64[0];
          v48.i64[1] = v43.i64[1];
          v45.i64[1] = v40.i64[0];
          *(int8x8_t *)&v47.u32[2] = vext_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), 4uLL);
          v49 = *(int8x16_t *)(v19 + 160);
          v50 = *(int8x16_t *)(v19 + 176);
          v51 = (float32x4_t)vbslq_s8(v49, (int8x16_t)vminq_f32((float32x4_t)v44, v45), v31);
          v52 = (float32x4_t)vbslq_s8(v49, (int8x16_t)vminq_f32(v46, v47), v48);
          v53 = vmulq_laneq_f32(v51, v51, 3);
          v54 = vmulq_laneq_f32(v52, v52, 3);
          v44.i64[0] = v51.i64[0];
          v44.i64[1] = v53.i64[1];
          v45.i64[0] = v52.i64[0];
          v45.i64[1] = v54.i64[1];
          v51.i64[1] = vdupq_laneq_s64((int64x2_t)v53, 1).u64[0];
          v52.i64[1] = vdupq_laneq_s64((int64x2_t)v54, 1).u64[0];
          v55 = (float32x4_t)vbslq_s8(v50, (int8x16_t)vmulq_laneq_f32((float32x4_t)vrev64q_s32((int32x4_t)v51), v53, 2), v44);
          v56 = (float32x4_t)vbslq_s8(v50, (int8x16_t)vmulq_laneq_f32((float32x4_t)vrev64q_s32((int32x4_t)v52), v54, 2), (int8x16_t)v45);
          v57 = *(float32x4_t *)(v19 + 192);
          v58 = *(float32x4_t *)(v19 + 208);
          v59 = vaddq_f32(v36, vmulq_laneq_f32(v57, v55, 3));
          v60 = vaddq_f32(v58, vmulq_laneq_f32(vaddq_f32(v36, vmulq_laneq_f32(v57, v56, 3)), v56, 3));
          v61 = (int8x16_t)vmulq_laneq_f32(vaddq_f32(v58, vmulq_laneq_f32(v59, v55, 3)), v55, 3);
          v62 = *(float32x4_t *)(v19 + 224);
          v63 = *(float32x4_t *)(v19 + 240);
          v64 = (float32x4_t)vbslq_s8(v50, (int8x16_t)vaddq_f32(v63, vmulq_n_f32(v55, vaddq_f32(v63, vmulq_laneq_f32(vaddq_f32(v62, (float32x4_t)v61), v55, 3)).f32[0])), v44);
          v65 = (float32x4_t)vbslq_s8(v50, (int8x16_t)vaddq_f32(v63, vmulq_n_f32(v56, vaddq_f32(v63, vmulq_laneq_f32(vaddq_f32(v62, vmulq_laneq_f32(v60, v56, 3)), v56, 3)).f32[0])), (int8x16_t)v45);
          v66 = (int8x16_t)vmulq_laneq_f32(v64, v64, 3);
          v64.i64[0] = vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v64), v64).u64[0];
          v61.i64[0] = v64.i64[0];
          v61.i64[1] = v66.i64[1];
          v67 = (int64x2_t)vmulq_laneq_f32(v65, v65, 3);
          v64.i64[1] = vdupq_laneq_s64((int64x2_t)v66, 1).u64[0];
          v65.i64[0] = vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v65), v65).u64[0];
          v66.i64[0] = v65.i64[0];
          v66.i64[1] = v67.i64[1];
          v65.i64[1] = vdupq_laneq_s64(v67, 1).u64[0];
          v68 = vbslq_s8(v50, (int8x16_t)vsubq_f32(v62, (float32x4_t)vrev64q_s32((int32x4_t)v64)), v61);
          v69 = vbslq_s8(v50, (int8x16_t)vsubq_f32(v62, (float32x4_t)vrev64q_s32((int32x4_t)v65)), v66);
          v70 = *(float32x4_t *)(v19 + 256);
          v71 = *(int8x16_t *)(v19 + 272);
          v72 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v70, (float32x4_t)v68), vextq_s8(v68, v68, 0xCuLL), vextq_s8(v68, v68, 8uLL));
          v73 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v70, (float32x4_t)v69), vextq_s8(v69, v69, 0xCuLL), vextq_s8(v69, v69, 8uLL));
          v74 = (int32x4_t)vbslq_s8(v71, (int8x16_t)v72, (int8x16_t)vsubq_f32(v70, (float32x4_t)vrev64q_s32(v72)));
          v75 = (int32x4_t)vbslq_s8(v71, (int8x16_t)v73, (int8x16_t)vsubq_f32(v70, (float32x4_t)vrev64q_s32(v73)));
          v76 = *(int8x16_t *)(v19 + 288);
          v77 = *(int8x16_t *)(v19 + 304);
          v78 = (int32x4_t)veorq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v70, (float32x4_t)vrev64q_s32(v29)), (int8x16_t)vrev64q_s32(v74), (int8x16_t)v74), vandq_s8(v76, (int8x16_t)v29));
          v79 = (int32x4_t)veorq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v70, (float32x4_t)vrev64q_s32(v30)), (int8x16_t)vrev64q_s32(v75), (int8x16_t)v75), vandq_s8(v76, (int8x16_t)v30));
          v80 = (int8x16_t)vmulq_f32((float32x4_t)v29, (float32x4_t)v29);
          v81 = (int8x16_t)vmulq_f32((float32x4_t)v30, (float32x4_t)v30);
          v82 = (int8x16_t)vaddq_f32((float32x4_t)v80, (float32x4_t)vextq_s8(v80, v80, 4uLL));
          v83 = (int8x16_t)vaddq_f32((float32x4_t)v81, (float32x4_t)vextq_s8(v81, v81, 4uLL));
          v84 = (int32x4_t)vbslq_s8(v71, (int8x16_t)v78, (int8x16_t)vaddq_f32(v63, (float32x4_t)vrev64q_s32(v78)));
          v85 = (int32x4_t)vbslq_s8(v71, (int8x16_t)v79, (int8x16_t)vaddq_f32(v63, (float32x4_t)vrev64q_s32(v79)));
          v86 = (int8x16_t)vmulq_f32(*(float32x4_t *)v19, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v70, (float32x4_t)v84), (int8x16_t)vrev64q_s32(v84), (int8x16_t)v84));
          v87 = (int8x16_t)vmulq_f32(*(float32x4_t *)v19, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v70, (float32x4_t)v85), (int8x16_t)vrev64q_s32(v85), (int8x16_t)v85));
          v88 = (int32x4_t)vbslq_s8(v71, v86, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v77, (int8x16_t)vcgtq_f32(v24, (float32x4_t)v86))));
          v89 = (int32x4_t)vbslq_s8(v71, v87, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v77, (int8x16_t)vcgtq_f32(v24, (float32x4_t)v87))));
          v90 = *(int8x16_t *)(v19 + 32);
          v91 = vbslq_s8(v71, (int8x16_t)vaddq_f32((float32x4_t)v82, (float32x4_t)vextq_s8(v82, v82, 8uLL)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)v77), v90, (int8x16_t)vrev64q_s32(v88)));
          v92 = vbslq_s8(v71, (int8x16_t)vaddq_f32((float32x4_t)v83, (float32x4_t)vextq_s8(v83, v83, 8uLL)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v89, (float32x4_t)v77), v90, (int8x16_t)vrev64q_s32(v89)));
          v93 = (float32x4_t)vextq_s8(v91, v91, 4uLL);
          v94 = (float32x4_t)vextq_s8(v92, v92, 4uLL);
          v95 = vminq_f32(vrsqrteq_f32(v93), (float32x4_t)v77);
          v96 = vminq_f32(vrsqrteq_f32(v94), (float32x4_t)v77);
          v97 = vminq_f32(vmulq_f32(v95, vrsqrtsq_f32(vmulq_f32(v95, v93), v95)), (float32x4_t)v77);
          v98 = vminq_f32(vmulq_f32(v96, vrsqrtsq_f32(vmulq_f32(v96, v94), v96)), (float32x4_t)v77);
          v91.i64[1] = vmulq_f32(vminq_f32(vmulq_f32(v97, vrsqrtsq_f32(vmulq_f32(v97, v93), v97)), *(float32x4_t *)&v77), v93).i64[1];
          v92.i64[1] = vmulq_f32(vminq_f32(vmulq_f32(v98, vrsqrtsq_f32(vmulq_f32(v98, v94), v98)), *(float32x4_t *)&v77), v94).i64[1];
          v99 = (int8x16_t)vcgtq_f32((float32x4_t)v77, *(float32x4_t *)(v19 + 48));
          v100 = vbslq_s8(v49, vbslq_s8(v99, vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL), vextq_s8(v91, v91, 0xCuLL)), v91);
          v101 = vbslq_s8(v49, vbslq_s8(v99, vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL), vextq_s8(v92, v92, 0xCuLL)), v92);
          v102 = vmulq_f32(v25, vsubq_f32((float32x4_t)vextq_s8(v101, v101, 8uLL), v24));
          v103 = *((int *)a2 + 22);
          v104 = vsubq_f32(vmulq_f32(v25, vsubq_f32((float32x4_t)vextq_s8(v100, v100, 8uLL), v24)), v9);
          v105 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v106 = vaddq_s32(vcvtq_s32_f32(v104), vcltzq_f32(v104));
            v107 = (float32x2_t)vsubq_f32(v104, vcvtq_f32_s32(v106)).u64[0];
            v108 = (float32x4_t *)(v105 + 16 * (v106.i32[0] + v106.i32[1] * (int)v103));
            v109 = vaddq_f32(*v108, vmulq_n_f32(vsubq_f32(v108[1], *v108), v107.f32[0]));
            v110 = vaddq_f32(v109, vmulq_lane_f32(vsubq_f32(vaddq_f32(v108[v103], vmulq_n_f32(vsubq_f32(v108[(int)v103 + 1], v108[v103]), v107.f32[0])), v109), v107, 1));
            v111 = vsubq_f32(v102, v9);
            v112 = vaddq_s32(vcvtq_s32_f32(v111), vcltzq_f32(v111));
            v111.i64[0] = vsubq_f32(v111, vcvtq_f32_s32(v112)).u64[0];
            v113 = (float32x4_t *)(v105 + 16 * (v112.i32[0] + v112.i32[1] * (int)v103));
            v114 = vaddq_f32(*v113, vmulq_n_f32(vsubq_f32(v113[1], *v113), v111.f32[0]));
            v115 = vaddq_f32(v114, vmulq_lane_f32(vsubq_f32(vaddq_f32(v113[v103], vmulq_n_f32(vsubq_f32(v113[(int)v103 + 1], v113[v103]), v111.f32[0])), v114), *(float32x2_t *)v111.f32, 1));
          }
          else
          {
            v116 = vaddq_f32(v104, v13);
            v117 = vcvtq_s32_f32(v116);
            v116.i64[0] = vaddq_s32(v117, vcgtq_f32(vcvtq_f32_s32(v117), v116)).u64[0];
            v110 = *(float32x4_t *)(v105 + 16 * (v116.i32[0] + v116.i32[1] * (int)v103));
            v118 = vaddq_f32(vsubq_f32(v102, v9), v13);
            v119 = vcvtq_s32_f32(v118);
            v118.i64[0] = vaddq_s32(v119, vcgtq_f32(vcvtq_f32_s32(v119), v118)).u64[0];
            v115 = *(float32x4_t *)(v105 + 16 * (v118.i32[0] + v118.i32[1] * (int)v103));
          }
          v120 = (float32x4_t *)(v11 + 16 * v15);
          *v120 = v110;
          v120[1] = v115;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v121 = *((_QWORD *)this + 51);
        *(float32x2_t *)v122.f32 = vmul_f32(*(float32x2_t *)v17.f32, *(float32x2_t *)(v121 + 64));
        *(int8x8_t *)&v122.u32[2] = vand_s8(*(int8x8_t *)(v121 + 120), *(int8x8_t *)v122.f32);
        v123 = *(float32x4_t *)(v121 + 96);
        v124 = vaddq_f32(v123, v122);
        v125 = *(float32x4_t *)(v121 + 16);
        v126 = (int32x4_t)vsubq_f32(v124, v125);
        v127 = (int8x16_t)vabdq_f32(v124, v125);
        v128.i64[0] = v127.i64[0];
        v128.i64[1] = vdupq_laneq_s64((int64x2_t)vmaxq_f32((float32x4_t)vextq_s8(v127, v127, 8uLL), (float32x4_t)vextq_s8(v127, v127, 0xCuLL)), 1).u64[0];
        v129 = (float32x4_t)vrev64q_s32(v128);
        v130 = *(float32x4_t *)(v121 + 128);
        v131 = *(float32x4_t *)(v121 + 144);
        v132 = vminq_f32(vmaxq_f32(vrecpeq_f32(v129), v130), v131);
        v133 = vminq_f32(vmaxq_f32(vmulq_f32(v132, vrecpsq_f32(v129, v132)), v130), v131);
        v134 = (int8x16_t)vmulq_f32(v133, vrecpsq_f32(v129, v133));
        v135 = (float32x4_t)vextq_s8(v134, v127, 8uLL);
        v136.i64[0] = vextq_s8(v134, v127, 0xCuLL).u64[0];
        v127.i64[1] = v134.i64[1];
        *(int8x8_t *)&v136.u32[2] = vext_s8(*(int8x8_t *)v127.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v134, v134, 8uLL), 4uLL);
        v137 = (int8x16_t)vminq_f32(v135, v136);
        v138 = *(int8x16_t *)(v121 + 160);
        v139 = *(int8x16_t *)(v121 + 176);
        v140 = (float32x4_t)vbslq_s8(v138, v137, v127);
        v141 = vmulq_laneq_f32(v140, v140, 3);
        v136.i64[0] = v140.i64[0];
        v136.i64[1] = v141.i64[1];
        v140.i64[1] = vdupq_laneq_s64((int64x2_t)v141, 1).u64[0];
        v142 = (float32x4_t)vbslq_s8(v139, (int8x16_t)vmulq_laneq_f32((float32x4_t)vrev64q_s32((int32x4_t)v140), v141, 2), (int8x16_t)v136);
        v143 = vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v121 + 208), vmulq_laneq_f32(vaddq_f32(v130, vmulq_laneq_f32(*(float32x4_t *)(v121 + 192), v142, 3)), v142, 3)), v142, 3);
        v144 = *(float32x4_t *)(v121 + 224);
        v145 = *(float32x4_t *)(v121 + 240);
        v146 = (float32x4_t)vbslq_s8(v139, (int8x16_t)vaddq_f32(v145, vmulq_n_f32(v142, vaddq_f32(v145, vmulq_laneq_f32(vaddq_f32(v144, v143), v142, 3)).f32[0])), (int8x16_t)v136);
        v147 = (int64x2_t)vmulq_laneq_f32(v146, v146, 3);
        v146.i64[0] = vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v146), v146).u64[0];
        v136.i64[0] = v146.i64[0];
        v136.i64[1] = v147.i64[1];
        v146.i64[1] = vdupq_laneq_s64(v147, 1).u64[0];
        v148 = vbslq_s8(v139, (int8x16_t)vsubq_f32(v144, (float32x4_t)vrev64q_s32((int32x4_t)v146)), (int8x16_t)v136);
        v149 = *(float32x4_t *)(v121 + 256);
        v150 = *(int8x16_t *)(v121 + 272);
        v151 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, (float32x4_t)v148), vextq_s8(v148, v148, 0xCuLL), vextq_s8(v148, v148, 8uLL));
        v152 = (int32x4_t)vbslq_s8(v150, (int8x16_t)v151, (int8x16_t)vsubq_f32(v149, (float32x4_t)vrev64q_s32(v151)));
        v153 = *(int8x16_t *)(v121 + 304);
        v154 = (int32x4_t)veorq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v149, (float32x4_t)vrev64q_s32(v126)), (int8x16_t)vrev64q_s32(v152), (int8x16_t)v152), vandq_s8(*(int8x16_t *)(v121 + 288), (int8x16_t)v126));
        v155 = (int32x4_t)vbslq_s8(v150, (int8x16_t)v154, (int8x16_t)vaddq_f32(v145, (float32x4_t)vrev64q_s32(v154)));
        v156 = (int8x16_t)vmulq_f32(*(float32x4_t *)v121, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v149, (float32x4_t)v155), (int8x16_t)vrev64q_s32(v155), (int8x16_t)v155));
        v157 = (int32x4_t)vbslq_s8(v150, v156, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v153, (int8x16_t)vcgtq_f32(v123, (float32x4_t)v156))));
        v158 = (int8x16_t)vmulq_f32((float32x4_t)v126, (float32x4_t)v126);
        v159 = (int8x16_t)vaddq_f32((float32x4_t)v158, (float32x4_t)vextq_s8(v158, v158, 4uLL));
        v160 = vbslq_s8(v150, (int8x16_t)vaddq_f32((float32x4_t)v159, (float32x4_t)vextq_s8(v159, v159, 8uLL)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v157, (float32x4_t)v153), *(int8x16_t *)(v121 + 32), (int8x16_t)vrev64q_s32(v157)));
        v161 = (float32x4_t)vextq_s8(v160, v160, 4uLL);
        v162 = vminq_f32(vrsqrteq_f32(v161), (float32x4_t)v153);
        v163 = vminq_f32(vmulq_f32(v162, vrsqrtsq_f32(vmulq_f32(v162, v161), v162)), (float32x4_t)v153);
        v160.i64[1] = vmulq_f32(vminq_f32(vmulq_f32(v163, vrsqrtsq_f32(vmulq_f32(v163, v161), v163)), *(float32x4_t *)&v153), v161).i64[1];
        v164 = vbslq_s8(v138, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v153, *(float32x4_t *)(v121 + 48)), vextq_s8((int8x16_t)v157, (int8x16_t)v157, 8uLL), vextq_s8(v160, v160, 0xCuLL)), v160);
        v165 = vmulq_f32(*(float32x4_t *)(v121 + 80), vsubq_f32((float32x4_t)vextq_s8(v164, v164, 8uLL), v123));
        v166 = *((int *)a2 + 22);
        v167 = vsubq_f32(v165, v9);
        v168 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v169 = vaddq_s32(vcvtq_s32_f32(v167), vcltzq_f32(v167));
          v170 = (float32x2_t)vsubq_f32(v167, vcvtq_f32_s32(v169)).u64[0];
          v171 = (float32x4_t *)(v168 + 16 * (v169.i32[0] + v169.i32[1] * (int)v166));
          v172 = vaddq_f32(*v171, vmulq_n_f32(vsubq_f32(v171[1], *v171), v170.f32[0]));
          v173 = vaddq_f32(v172, vmulq_lane_f32(vsubq_f32(vaddq_f32(v171[v166], vmulq_n_f32(vsubq_f32(v171[(int)v166 + 1], v171[v166]), v170.f32[0])), v172), v170, 1));
        }
        else
        {
          v174 = vaddq_f32(v167, v13);
          v175 = vcvtq_s32_f32(v174);
          v174.i64[0] = vaddq_s32(v175, vcgtq_f32(vcvtq_f32_s32(v175), v174)).u64[0];
          v173 = *(float32x4_t *)(v168 + 16 * (v174.i32[0] + v174.i32[1] * (int)v166));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v173;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcRectToPolar::GetDOD(HgcRectToPolar *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcRectToPolar *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcRectToPolar::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcRectToPolar::HgcRectToPolar(HgcRectToPolar *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EC7A8;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = xmmword_1B3050F80;
  *(_OWORD *)(v3 + 128) = xmmword_1B3052720;
  *(int32x4_t *)(v3 + 144) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 160) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 192) = xmmword_1B3051B20;
  *(_OWORD *)(v3 + 208) = xmmword_1B3051B30;
  *(_OWORD *)(v3 + 224) = xmmword_1B3052730;
  *(_OWORD *)(v3 + 240) = xmmword_1B3052740;
  *(_OWORD *)(v3 + 256) = xmmword_1B3052750;
  *(_OWORD *)(v3 + 272) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 288) = xmmword_1B3051080;
  *(_OWORD *)(v3 + 304) = xmmword_1B3052760;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 336) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcRectToPolar *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28994A4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcRectToPolar::~HgcRectToPolar(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EC7A8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AF73A19ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcRectToPolar::~HgcRectToPolar(this);
  HGObject::operator delete(v1);
}

uint64_t HgcRectToPolar::SetParameter(HgcRectToPolar *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  __n128 *v11;
  float *v12;
  float *v13;
  float *v14;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_38;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_38;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == 0.0
        && v10[2].n128_f32[1] == a3.n128_f32[0]
        && v10[2].n128_f32[2] == 0.0
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u32[0] = 0;
      v10[2].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v10[2].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[20] = a3;
      goto LABEL_38;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == 0.0
        && v11[3].n128_f32[1] == 0.0
        && v11[3].n128_f32[2] == a3.n128_f32[0]
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u64[0] = 0;
      v11[3].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[21] = a3;
      goto LABEL_38;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_38;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_38;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
LABEL_38:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcRectToPolar::GetParameter(HgcRectToPolar *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[80];
      a3[1] = v6[81];
      a3[2] = v6[82];
      v4 = v6 + 83;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[84];
      a3[1] = v7[85];
      a3[2] = v7[86];
      v4 = v7 + 87;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcRadialMask::GetProgram(HgcRadialMask *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000487\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.z = c0.z;\n"
             "    r0.x = dot(half4(hg_Params[3]), half4(frag._texCoord1));\n"
             "    r0.y = dot(half4(hg_Params[4]), half4(frag._texCoord1));\n"
             "    r0.w = dot(half4(hg_Params[5]), half4(frag._texCoord1));\n"
             "    r0.xy = r0.xy/r0.ww;\n"
             "    s0.xyz = float3(r0.xyz) - hg_Params[1].xyz;\n"
             "    s0.xyz = s0.xyz*hg_Params[0].xyz;\n"
             "    s0 = float4(dot(s0.xyz, s0.xyz));\n"
             "    s0 = sqrt(s0);\n"
             "    r0 = half4(hg_Params[2]) - c0.xxxx;\n"
             "    r0 = fmax(r0, c0.zzzz);\n"
             "    s0 = clamp(s0 - float4(r0), 0.00000f, 1.00000f);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = float4(r1)*-s0 + float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=e75a9164:3b0d8c52:0c8fceba:c495b31d\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0006:0003:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000423\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.z = c0.z;\n"
             "    r0.x = dot(hg_Params[3], frag._texCoord1);\n"
             "    r0.y = dot(hg_Params[4], frag._texCoord1);\n"
             "    r0.w = dot(hg_Params[5], frag._texCoord1);\n"
             "    r0.xy = r0.xy/r0.ww;\n"
             "    r0.xyz = r0.xyz - hg_Params[1].xyz;\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
             "    r0 = float4(dot(r0.xyz, r0.xyz));\n"
             "    r0 = sqrt(r0);\n"
             "    r1 = hg_Params[2] - c0.xxxx;\n"
             "    r1 = fmax(r1, c0.zzzz);\n"
             "    r0 = clamp(r0 - r1, 0.00000f, 1.00000f);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = r1*-r0 + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=df5607ad:9dddec28:82175469:ef6d075e\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0006:0002:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004d9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.z = c0.z;\n"
           "    r0.x = dot(hg_ProgramLocal3, hg_TexCoord1);\n"
           "    r0.y = dot(hg_ProgramLocal4, hg_TexCoord1);\n"
           "    r0.w = dot(hg_ProgramLocal5, hg_TexCoord1);\n"
           "    r0.xy = r0.xy/r0.ww;\n"
           "    r0.xyz = r0.xyz - hg_ProgramLocal1.xyz;\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xyz;\n"
           "    r0 = vec4(dot(r0.xyz, r0.xyz));\n"
           "    r0 = sqrt(r0);\n"
           "    r1 = hg_ProgramLocal2 - c0.xxxx;\n"
           "    r1 = max(r1, c0.zzzz);\n"
           "    r0 = clamp(r0 - r1, vec4(0.00000), vec4(1.00000));\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = r1*-r0 + r1;\n"
           "}\n"
           "//MD5=d1232ce3:078d3eef:7e652fe6:3c4368bf\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0006:0002:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void HgcRadialMask::InitProgramDescriptor(HgcRadialMask *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcRadialMask_hgc_visible", "//Metal1.0     \n//LEN=00000002fe\n[[ visible ]] FragmentOut HgcRadialMask_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.z = c0.z;\n"
    "    r0.x = dot(hg_Params[3], texCoord1);\n"
    "    r0.y = dot(hg_Params[4], texCoord1);\n"
    "    r0.w = dot(hg_Params[5], texCoord1);\n"
    "    r0.xy = r0.xy/r0.ww;\n"
    "    r0.xyz = r0.xyz - hg_Params[1].xyz;\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xyz;\n"
    "    r0 = float4(dot(r0.xyz, r0.xyz));\n"
    "    r0 = sqrt(r0);\n"
    "    r1 = hg_Params[2] - c0.xxxx;\n"
    "    r1 = fmax(r1, c0.zzzz);\n"
    "    r0 = clamp(r0 - r1, 0.00000f, 1.00000f);\n"
    "    r1 = color0;\n"
    "    output.color0 = r1*-r0 + r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B2899948()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcRadialMask");
}

void sub_1B2899958(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052790;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B2899A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B2899AE0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B2899AD8);
}

_QWORD *HgcRadialMask::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcRadialMask [hgc1]");
}

uint64_t HgcRadialMask::BindTexture(HgcRadialMask *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcRadialMask::Bind(HgcRadialMask *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcRadialMask *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcRadialMask::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  int32x2_t v7;
  float32x4_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t *v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    v7 = a2[10];
    *(float32x2_t *)v8.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v8.i64[1] = 0x3F80000000000000;
    v9 = 16 * a2[3].i32[0];
    v10 = 16 * a2[11].i32[0];
    do
    {
      if (v5 < 3)
      {
        LODWORD(v82) = 0;
        v13 = v8;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = v8;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *(_QWORD *)(a1 + 408);
          v17 = *(float32x4_t *)(v16 + 48);
          v18 = vmulq_f32(v13, v17);
          v19 = vmulq_f32(v14, v17);
          v20 = vmulq_f32(v15, v17);
          v21 = (int8x16_t)vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL));
          v22 = (int8x16_t)vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL));
          v23 = (int8x16_t)vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL));
          v24 = *(float32x4_t *)(v16 + 64);
          v25 = *(float32x4_t *)(v16 + 80);
          *(float32x2_t *)v21.i8 = vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
          v26 = vmulq_f32(v13, v24);
          v27 = vmulq_f32(v14, v24);
          v28 = vmulq_f32(v15, v24);
          *(float32x2_t *)v22.i8 = vadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
          v29 = vaddq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 4uLL));
          v30 = vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL));
          v31 = vaddq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL));
          *(float32x2_t *)v23.i8 = vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
          v32 = (int8x16_t)vaddq_f32(v30, (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL));
          v33 = vmulq_f32(v13, v25);
          v34 = vmulq_f32(v14, v25);
          v35 = vmulq_f32(v15, v25);
          v36 = *(int8x16_t *)(v16 + 96);
          v37 = *(int8x16_t *)(v16 + 112);
          v38 = vbslq_s8(v36, (int8x16_t)vaddq_f32(v29, (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)), v21);
          v39 = vaddq_f32(v33, (float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL));
          v40 = vaddq_f32(v34, (float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL));
          v41 = vaddq_f32(v35, (float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL));
          v42 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32(v39, (float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL)), v38);
          v43 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32(v40, (float32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL)), vbslq_s8(v36, v32, v22));
          v44 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32(v41, (float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL)), vbslq_s8(v36, (int8x16_t)vaddq_f32(v31, (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL)), v23));
          v45 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 3);
          v46 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 3);
          v47 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 3);
          v48 = *(float32x4_t *)(v16 + 128);
          v49 = *(float32x4_t *)(v16 + 144);
          v50 = vminq_f32(vmaxq_f32(vrecpeq_f32(v45), v48), v49);
          v51 = vminq_f32(vmaxq_f32(vrecpeq_f32(v46), v48), v49);
          v52 = vminq_f32(vmaxq_f32(vrecpeq_f32(v47), v48), v49);
          v53 = vminq_f32(vmaxq_f32(vmulq_f32(v50, vrecpsq_f32(v45, v50)), v48), v49);
          v54 = vminq_f32(vmaxq_f32(vmulq_f32(v51, vrecpsq_f32(v46, v51)), v48), v49);
          v55 = vminq_f32(vmaxq_f32(vmulq_f32(v52, vrecpsq_f32(v47, v52)), v48), v49);
          v45.i64[0] = vmulq_f32(vmulq_f32(v53, vrecpsq_f32(v45, v53)), v42).u64[0];
          v46.i64[0] = vmulq_f32(vmulq_f32(v54, vrecpsq_f32(v46, v54)), v43).u64[0];
          v47.i64[0] = vmulq_f32(vmulq_f32(v55, vrecpsq_f32(v47, v55)), v44).u64[0];
          v45.i64[1] = v42.i64[1];
          v46.i64[1] = v43.i64[1];
          v47.i64[1] = v44.i64[1];
          v56 = *(float32x4_t *)(v16 + 16);
          v57 = vmulq_f32(*(float32x4_t *)v16, vsubq_f32(v45, v56));
          v58 = vmulq_f32(*(float32x4_t *)v16, vsubq_f32(v46, v56));
          v59 = vmulq_f32(*(float32x4_t *)v16, vsubq_f32(v47, v56));
          v60 = (int32x4_t)vmulq_f32(v57, v57);
          v61 = (int32x4_t)vmulq_f32(v58, v58);
          v62 = (int32x4_t)vmulq_f32(v59, v59);
          v63 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v60, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.i8, 1)));
          v64 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v61, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.i8, 1)));
          v65 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v62, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.i8, 1)));
          v66 = vminq_f32(vrsqrteq_f32(v63), v49);
          v67 = vminq_f32(vrsqrteq_f32(v64), v49);
          v68 = vminq_f32(vrsqrteq_f32(v65), v49);
          v69 = vminq_f32(vmulq_f32(v66, vrsqrtsq_f32(vmulq_f32(v66, v63), v66)), v49);
          v70 = vminq_f32(vmulq_f32(v67, vrsqrtsq_f32(vmulq_f32(v67, v64), v67)), v49);
          v71 = vminq_f32(vmulq_f32(v68, vrsqrtsq_f32(vmulq_f32(v68, v65), v68)), v49);
          v72 = vmulq_f32(v64, vminq_f32(vmulq_f32(v70, vrsqrtsq_f32(vmulq_f32(v64, v70), v70)), v49));
          v73 = *(float32x4_t *)(v16 + 176);
          v74 = vmaxq_f32(vsubq_f32(*(float32x4_t *)(v16 + 32), *(float32x4_t *)(v16 + 160)), v73);
          v75 = vmaxq_f32(vsubq_f32(vmulq_f32(v63, vminq_f32(vmulq_f32(v69, vrsqrtsq_f32(vmulq_f32(v63, v69), v69)), v49)), v74), v73);
          v76 = vmaxq_f32(vsubq_f32(v72, v74), v73);
          v77 = vmaxq_f32(vsubq_f32(vmulq_f32(v65, vminq_f32(vmulq_f32(v71, vrsqrtsq_f32(vmulq_f32(v65, v71), v71)), v49)), v74), v73);
          v78 = *(float32x4_t *)(v16 + 192);
          v79 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 16), vmulq_f32(vminq_f32(v76, v78), *(float32x4_t *)(*(_QWORD *)&v7 + v11 + 16)));
          v80 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11 + 32), vmulq_f32(vminq_f32(v77, v78), *(float32x4_t *)(*(_QWORD *)&v7 + v11 + 32)));
          v81 = (float32x4_t *)(*(_QWORD *)&v6 + v11);
          *v81 = vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + v11), vmulq_f32(vminq_f32(v75, v78), *(float32x4_t *)(*(_QWORD *)&v7 + v11)));
          v81[1] = v79;
          v81[2] = v80;
          v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v12 -= 3;
          v11 += 48;
        }
        while (v5 + v12 > 2);
        LODWORD(v82) = -v12;
      }
      if ((int)v82 < v5)
      {
        v82 = v82;
        do
        {
          v83 = *(_QWORD *)(a1 + 408);
          v84 = vmulq_f32(v13, *(float32x4_t *)(v83 + 48));
          v85 = (int8x16_t)vaddq_f32(v84, (float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 4uLL));
          *(float32x2_t *)v85.i8 = vadd_f32(*(float32x2_t *)v85.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL));
          v86 = vmulq_f32(v13, *(float32x4_t *)(v83 + 64));
          v87 = vaddq_f32(v86, (float32x4_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 4uLL));
          v88 = vmulq_f32(v13, *(float32x4_t *)(v83 + 80));
          v89 = vaddq_f32(v88, (float32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 4uLL));
          v90 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v83 + 112), (int8x16_t)vaddq_f32(v89, (float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL)), vbslq_s8(*(int8x16_t *)(v83 + 96), (int8x16_t)vaddq_f32(v87, (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL)), v85));
          v91 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v90, 3);
          v92 = *(float32x4_t *)(v83 + 128);
          v93 = *(float32x4_t *)(v83 + 144);
          v94 = vminq_f32(vmaxq_f32(vrecpeq_f32(v91), v92), v93);
          v95 = vminq_f32(vmaxq_f32(vmulq_f32(v94, vrecpsq_f32(v91, v94)), v92), v93);
          v91.i64[0] = vmulq_f32(vmulq_f32(v95, vrecpsq_f32(v91, v95)), v90).u64[0];
          v91.i64[1] = v90.i64[1];
          v96 = vmulq_f32(*(float32x4_t *)v83, vsubq_f32(v91, *(float32x4_t *)(v83 + 16)));
          v97 = (int32x4_t)vmulq_f32(v96, v96);
          v98 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v97, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.i8, 1)));
          v99 = vminq_f32(vrsqrteq_f32(v98), v93);
          v100 = vminq_f32(vmulq_f32(v99, vrsqrtsq_f32(vmulq_f32(v99, v98), v99)), v93);
          *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v82) = vsubq_f32(*(float32x4_t *)(*(_QWORD *)&v7 + 16 * v82), vmulq_f32(vminq_f32(vmaxq_f32(vsubq_f32(vmulq_f32(vminq_f32(vmulq_f32(v100, vrsqrtsq_f32(vmulq_f32(v100, v98), v100)), v93), v98), vmaxq_f32(vsubq_f32(*(float32x4_t *)(v83 + 32), *(float32x4_t *)(v83 + 160)), *(float32x4_t *)(v83 + 176))), *(float32x4_t *)(v83 + 176)), *(float32x4_t *)(v83 + 192)),
                                                            *(float32x4_t *)(*(_QWORD *)&v7 + 16 * v82)));
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          ++v82;
        }
        while (v82 < v5);
      }
      v8 = vaddq_f32(v8, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v6 += v9;
      *(_QWORD *)&v7 += v10;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcRadialMask::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcRadialMask::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcRadialMask::HgcRadialMask(HgcRadialMask *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64ECA10;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 112) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 128) = xmmword_1B30527A0;
  *(int32x4_t *)(v3 + 144) = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)&v4 = 0x3F0000003F000000;
  *((_QWORD *)&v4 + 1) = 0x3F0000003F000000;
  *(_OWORD *)(v3 + 160) = v4;
  *(_OWORD *)(v3 + 176) = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v3 + 192) = _Q1;
  *(_OWORD *)(v3 + 208) = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B289A238(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcRadialMask::~HgcRadialMask(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64ECA10;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C405DF52C91);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcRadialMask::~HgcRadialMask(this);
  HGObject::operator delete(v1);
}

uint64_t HgcRadialMask::SetParameter(HgcRadialMask *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  int32x4_t v11;
  float *v12;
  float *v13;
  float *v14;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_33;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_33;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == a3.n128_f32[0]
        && v10[2].n128_f32[1] == a3.n128_f32[0]
        && v10[2].n128_f32[2] == a3.n128_f32[0]
        && v10[2].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v11 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      v10[2] = (__n128)v11;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[13] = a3;
      goto LABEL_33;
    case 3:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[12] == a3.n128_f32[0] && v12[13] == a4 && v12[14] == a5 && v12[15] == a6)
        return 0;
      v12[12] = a3.n128_f32[0];
      v12[13] = a4;
      v12[14] = a5;
      v12[15] = a6;
      goto LABEL_33;
    case 4:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[16] == a3.n128_f32[0] && v13[17] == a4 && v13[18] == a5 && v13[19] == a6)
        return 0;
      v13[16] = a3.n128_f32[0];
      v13[17] = a4;
      v13[18] = a5;
      v13[19] = a6;
      goto LABEL_33;
    case 5:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[20] == a3.n128_f32[0] && v14[21] == a4 && v14[22] == a5 && v14[23] == a6)
        return 0;
      v14[20] = a3.n128_f32[0];
      v14[21] = a4;
      v14[22] = a5;
      v14[23] = a6;
LABEL_33:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcRadialMask::GetParameter(HgcRadialMask *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_8;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_8;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[52];
      a3[1] = v6[53];
      a3[2] = v6[54];
      v4 = v6 + 55;
      goto LABEL_8;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_8;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_8;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
LABEL_8:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcWideScreen::GetProgram(HgcWideScreen *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000006a5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[7]);\n"
             "    s0.w = s0.x;\n"
             "    s1.x = 1.00000f / s0.x;\n"
             "    s0.z = dot(frag._texCoord0, hg_Params[6]);\n"
             "    s0.y = dot(frag._texCoord0, hg_Params[5]);\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[4]);\n"
             "    s1 = s0*s1.xxxx;\n"
             "    s0.xzw = s1.xzw;\n"
             "    s0.y = s1.y - hg_Params[3].y;\n"
             "    s1.z = dot(s0, hg_Params[10]);\n"
             "    s2.x = 1.00000f / s1.z;\n"
             "    s1.w = dot(s0, hg_Params[9]);\n"
             "    s1.z = dot(s0, hg_Params[8]);\n"
             "    s2.xy = s2.xx*s1.zw;\n"
             "    s2.xy = s2.xy + hg_Params[12].xy;\n"
             "    s2.xy = s2.xy*hg_Params[12].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s2.xy);\n"
             "    s1.w = clamp(hg_Params[1].y - s1.y, 0.00000f, 1.00000f);\n"
             "    s1.z = clamp(s1.y - hg_Params[1].x, 0.00000f, 1.00000f);\n"
             "    s1.z = fmin(s1.z, s1.w);\n"
             "    s0 = mix(hg_Params[2], float4(r0), s1.zzzz);\n"
             "    s1.z = hg_Params[11].z - s1.x;\n"
             "    s1.x = s1.x - hg_Params[11].x;\n"
             "    s1.xz = fmax(s1.xz, float2(c0.xx));\n"
             "    s1.z = fmin(s1.x, s1.z);\n"
             "    s1.x = clamp(hg_Params[0].y - s1.y, 0.00000f, 1.00000f);\n"
             "    s1.y = clamp(s1.y - hg_Params[0].x, 0.00000f, 1.00000f);\n"
             "    s1.x = fmin(s1.y, s1.x);\n"
             "    s1.x = fmin(s1.x, s1.z);\n"
             "    output.color0 = s1.xxxx*s0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=79b4dd01:96ef81ec:23a0b0b1:d588db1c\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:000d:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000682\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[7]);\n"
             "    r0.w = r0.x;\n"
             "    r1.x = 1.00000f / r0.x;\n"
             "    r0.z = dot(frag._texCoord0, hg_Params[6]);\n"
             "    r0.y = dot(frag._texCoord0, hg_Params[5]);\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[4]);\n"
             "    r1 = r0*r1.xxxx;\n"
             "    r0.xzw = r1.xzw;\n"
             "    r0.y = r1.y - hg_Params[3].y;\n"
             "    r1.z = dot(r0, hg_Params[10]);\n"
             "    r2.x = 1.00000f / r1.z;\n"
             "    r1.w = dot(r0, hg_Params[9]);\n"
             "    r1.z = dot(r0, hg_Params[8]);\n"
             "    r2.xy = r2.xx*r1.zw;\n"
             "    r2.xy = r2.xy + hg_Params[12].xy;\n"
             "    r2.xy = r2.xy*hg_Params[12].zw;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
             "    r1.w = clamp(hg_Params[1].y - r1.y, 0.00000f, 1.00000f);\n"
             "    r1.z = clamp(r1.y - hg_Params[1].x, 0.00000f, 1.00000f);\n"
             "    r1.z = fmin(r1.z, r1.w);\n"
             "    r2 = mix(hg_Params[2], r2, r1.zzzz);\n"
             "    r1.z = hg_Params[11].z - r1.x;\n"
             "    r1.x = r1.x - hg_Params[11].x;\n"
             "    r1.xz = fmax(r1.xz, c0.xx);\n"
             "    r1.z = fmin(r1.x, r1.z);\n"
             "    r1.x = clamp(hg_Params[0].y - r1.y, 0.00000f, 1.00000f);\n"
             "    r1.y = clamp(r1.y - hg_Params[0].x, 0.00000f, 1.00000f);\n"
             "    r1.x = fmin(r1.y, r1.x);\n"
             "    r1.x = fmin(r1.x, r1.z);\n"
             "    output.color0 = r1.xxxx*r2;\n"
             "    return output;\n"
             "}\n"
             "//MD5=59775702:36a7ac3c:7db322bc:a7682c2c\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:000d:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000833\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "uniform highp vec4 hg_ProgramLocal11;\n"
           "uniform highp vec4 hg_ProgramLocal12;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal7);\n"
           "    r0.w = r0.x;\n"
           "    r1.x = 1.00000 / r0.x;\n"
           "    r0.z = dot(hg_TexCoord0, hg_ProgramLocal6);\n"
           "    r0.y = dot(hg_TexCoord0, hg_ProgramLocal5);\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal4);\n"
           "    r1 = r0*r1.xxxx;\n"
           "    r0.xzw = r1.xzw;\n"
           "    r0.y = r1.y - hg_ProgramLocal3.y;\n"
           "    r1.z = dot(r0, hg_ProgramLocal10);\n"
           "    r2.x = 1.00000 / r1.z;\n"
           "    r1.w = dot(r0, hg_ProgramLocal9);\n"
           "    r1.z = dot(r0, hg_ProgramLocal8);\n"
           "    r2.xy = r2.xx*r1.zw;\n"
           "    r2.xy = r2.xy + hg_ProgramLocal12.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal12.zw;\n"
           "    r2 = texture2D(hg_Texture0, r2.xy);\n"
           "    r1.w = clamp(hg_ProgramLocal1.y - r1.y, 0.00000, 1.00000);\n"
           "    r1.z = clamp(r1.y - hg_ProgramLocal1.x, 0.00000, 1.00000);\n"
           "    r1.z = min(r1.z, r1.w);\n"
           "    r2 = mix(hg_ProgramLocal2, r2, r1.zzzz);\n"
           "    r1.z = hg_ProgramLocal11.z - r1.x;\n"
           "    r1.x = r1.x - hg_ProgramLocal11.x;\n"
           "    r1.xz = max(r1.xz, c0.xx);\n"
           "    r1.z = min(r1.x, r1.z);\n"
           "    r1.x = clamp(hg_ProgramLocal0.y - r1.y, 0.00000, 1.00000);\n"
           "    r1.y = clamp(r1.y - hg_ProgramLocal0.x, 0.00000, 1.00000);\n"
           "    r1.x = min(r1.y, r1.x);\n"
           "    r1.x = min(r1.x, r1.z);\n"
           "    gl_FragColor = r1.xxxx*r2;\n"
           "}\n"
           "//MD5=e3e38e5f:edf6dd79:ba35ac24:50971d88\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:000d:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcWideScreen::InitProgramDescriptor(HgcWideScreen *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcWideScreen_hgc_visible", "//Metal1.0     \n//LEN=00000005b0\n[[ visible ]] FragmentOut HgcWideScreen_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = dot(texCoord0, hg_Params[7]);\n"
    "    r0.w = r0.x;\n"
    "    r1.x = 1.00000f / r0.x;\n"
    "    r0.z = dot(texCoord0, hg_Params[6]);\n"
    "    r0.y = dot(texCoord0, hg_Params[5]);\n"
    "    r0.x = dot(texCoord0, hg_Params[4]);\n"
    "    r1 = r0*r1.xxxx;\n"
    "    r0.xzw = r1.xzw;\n"
    "    r0.y = r1.y - hg_Params[3].y;\n"
    "    r1.z = dot(r0, hg_Params[10]);\n"
    "    r2.x = 1.00000f / r1.z;\n"
    "    r1.w = dot(r0, hg_Params[9]);\n"
    "    r1.z = dot(r0, hg_Params[8]);\n"
    "    r2.xy = r2.xx*r1.zw;\n"
    "    r2.xy = r2.xy + hg_Params[12].xy;\n"
    "    r2.xy = r2.xy*hg_Params[12].zw;\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
    "    r1.w = clamp(hg_Params[1].y - r1.y, 0.00000f, 1.00000f);\n"
    "    r1.z = clamp(r1.y - hg_Params[1].x, 0.00000f, 1.00000f);\n"
    "    r1.z = fmin(r1.z, r1.w);\n"
    "    r2 = mix(hg_Params[2], r2, r1.zzzz);\n"
    "    r1.z = hg_Params[11].z - r1.x;\n"
    "    r1.x = r1.x - hg_Params[11].x;\n"
    "    r1.xz = fmax(r1.xz, c0.xx);\n"
    "    r1.z = fmin(r1.x, r1.z);\n"
    "    r1.x = clamp(hg_Params[0].y - r1.y, 0.00000f, 1.00000f);\n"
    "    r1.y = clamp(r1.y - hg_Params[0].x, 0.00000f, 1.00000f);\n"
    "    r1.x = fmin(r1.y, r1.x);\n"
    "    r1.x = fmin(r1.x, r1.z);\n"
    "    output.color0 = r1.xxxx*r2;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B289A664()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcWideScreen");
}

void sub_1B289A674(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30511E0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B289A7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B289A844()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B289A83CLL);
}

_QWORD *HgcWideScreen::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcWideScreen [hgc1]");
}

uint64_t HgcWideScreen::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 12, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcWideScreen::Bind(HgcWideScreen *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HgcWideScreen *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcWideScreen::RenderTile(HgcWideScreen *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float32x4_t v84;
  uint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  int32x4_t v88;
  float32x2_t v89;
  float32x4_t *v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int32x4_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  float32x4_t v100;
  int32x4_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int8x16_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x8_t v112;
  int8x16_t v113;
  int8x8_t v114;
  int8x16_t v115;
  int8x8_t v116;
  float32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  float32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int8x16_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t *v139;
  uint64_t v140;
  int8x16_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  float32x4_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  int8x16_t v160;
  float32x4_t v161;
  int8x16_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int8x16_t v167;
  float32x4_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int8x16_t v171;
  uint64_t v172;
  float32x4_t v173;
  uint64_t v174;
  int32x4_t v175;
  float32x2_t v176;
  float32x4_t *v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  int32x4_t v181;
  int8x16_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int8x16_t v186;
  int8x8_t v187;
  int8x16_t v188;
  int8x16_t v189;
  int8x16_t v190;
  int32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int32x4_t v197;
  int8x16_t v198;
  float32x4_t v199;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcWideScreen *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 112);
          v21 = *(float32x4_t *)(v19 + 128);
          v22 = (int8x16_t)vmulq_f32(v17, v20);
          v23 = (int8x16_t)vmulq_f32(v18, v20);
          v24 = (int8x16_t)vaddq_f32((float32x4_t)v22, (float32x4_t)vextq_s8(v22, v22, 4uLL));
          v25 = (int8x16_t)vaddq_f32((float32x4_t)v23, (float32x4_t)vextq_s8(v23, v23, 4uLL));
          v26 = (int8x16_t)vaddq_f32((float32x4_t)v24, (float32x4_t)vextq_s8(v24, v24, 8uLL));
          v27 = vextq_s8(v26, v26, 4uLL);
          v29 = *(float32x4_t *)(v19 + 80);
          v28 = *(float32x4_t *)(v19 + 96);
          v30 = (int8x16_t)vmulq_f32(v17, v28);
          v31 = vaddq_f32((float32x4_t)v30, (float32x4_t)vextq_s8(v30, v30, 4uLL));
          v32 = (int8x16_t)vaddq_f32(v31, (float32x4_t)vdupq_lane_s64(v31.i64[0], 0));
          v34 = *(int8x16_t *)(v19 + 224);
          v33 = *(int8x16_t *)(v19 + 240);
          v35 = vbslq_s8(v34, v32, v27);
          v27.i64[0] = v26.i64[0];
          v36 = (int8x16_t)vaddq_f32((float32x4_t)v25, (float32x4_t)vextq_s8(v25, v25, 8uLL));
          v37 = (int8x16_t)vmulq_f32(v18, v28);
          v38 = vaddq_f32((float32x4_t)v37, (float32x4_t)vextq_s8(v37, v37, 4uLL));
          v39 = vextq_s8(v36, v36, 4uLL);
          v40 = vbslq_s8(v34, (int8x16_t)vaddq_f32(v38, (float32x4_t)vdupq_lane_s64(v38.i64[0], 0)), v39);
          v39.i64[0] = v36.i64[0];
          v41 = *(float32x4_t *)(v19 + 192);
          v42 = *(float32x4_t *)(v19 + 208);
          v43 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v27), v41), v42);
          v44 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v39), v41), v42);
          v45 = vminq_f32(vmaxq_f32(vmulq_f32(v43, vrecpsq_f32((float32x4_t)v27, v43)), v41), v42);
          v46 = vminq_f32(vmaxq_f32(vmulq_f32(v44, vrecpsq_f32((float32x4_t)v39, v44)), v41), v42);
          v45.i32[0] = vmulq_f32(v45, vrecpsq_f32((float32x4_t)v27, v45)).u32[0];
          v27.i32[0] = vmulq_f32(v46, vrecpsq_f32((float32x4_t)v39, v46)).u32[0];
          v47 = (int8x16_t)vmulq_f32(v17, v29);
          v48 = (int8x16_t)vmulq_f32(v18, v29);
          v49 = (int8x16_t)vaddq_f32((float32x4_t)v47, (float32x4_t)vextq_s8(v47, v47, 4uLL));
          v50 = (int8x16_t)vaddq_f32((float32x4_t)v48, (float32x4_t)vextq_s8(v48, v48, 4uLL));
          v49.i64[0] = vaddq_f32((float32x4_t)v49, (float32x4_t)vdupq_laneq_s64((int64x2_t)v49, 1)).u64[0];
          v50.i64[0] = vaddq_f32((float32x4_t)v50, (float32x4_t)vdupq_laneq_s64((int64x2_t)v50, 1)).u64[0];
          v49.i64[1] = v35.i64[1];
          v50.i64[1] = v40.i64[1];
          v52 = *(float32x4_t *)(v19 + 48);
          v51 = *(float32x4_t *)(v19 + 64);
          v53 = (int8x16_t)vmulq_f32(v17, v51);
          v54 = (int8x16_t)vmulq_f32(v18, v51);
          v55 = (int8x16_t)vaddq_f32((float32x4_t)v53, (float32x4_t)vextq_s8(v53, v53, 4uLL));
          v56 = (int8x16_t)vaddq_f32((float32x4_t)v54, (float32x4_t)vextq_s8(v54, v54, 4uLL));
          v57 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v33, (int8x16_t)vaddq_f32((float32x4_t)v55, (float32x4_t)vextq_s8(v55, v55, 8uLL)), v49), v45.f32[0]);
          v58 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v33, (int8x16_t)vaddq_f32((float32x4_t)v56, (float32x4_t)vextq_s8(v56, v56, 8uLL)), v50), *(float *)v27.i32);
          v59 = *(int8x16_t *)(v19 + 256);
          v60 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vsubq_f32((float32x4_t)v57, v52), v57);
          v61 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vsubq_f32((float32x4_t)v58, v52), v58);
          v63 = *(float32x4_t *)(v19 + 144);
          v62 = *(float32x4_t *)(v19 + 160);
          v64 = (int8x16_t)vmulq_f32(v62, v60);
          v65 = (int8x16_t)vmulq_f32(v62, v61);
          v66 = vaddq_f32((float32x4_t)v64, (float32x4_t)vextq_s8(v64, v64, 4uLL));
          v67 = vaddq_f32((float32x4_t)v65, (float32x4_t)vextq_s8(v65, v65, 4uLL));
          v68 = (float32x4_t)vextq_s8((int8x16_t)vaddq_f32(v66, (float32x4_t)vdupq_lane_s64(v66.i64[0], 0)), v57, 8uLL);
          v69 = (float32x4_t)vextq_s8((int8x16_t)vaddq_f32(v67, (float32x4_t)vdupq_lane_s64(v67.i64[0], 0)), v58, 8uLL);
          v70 = vminq_f32(vmaxq_f32(vrecpeq_f32(v68), v41), v42);
          v71 = vminq_f32(vmaxq_f32(vrecpeq_f32(v69), v41), v42);
          v72 = vminq_f32(vmaxq_f32(vmulq_f32(v70, vrecpsq_f32(v68, v70)), v41), v42);
          v73 = vminq_f32(vmaxq_f32(vmulq_f32(v71, vrecpsq_f32(v69, v71)), v41), v42);
          v69.i32[0] = vmulq_f32(v73, vrecpsq_f32(v69, v73)).u32[0];
          v74 = (int8x16_t)vmulq_f32(v63, v60);
          v75 = (int8x16_t)vmulq_f32(v63, v61);
          v76 = vaddq_f32((float32x4_t)v74, (float32x4_t)vextq_s8(v74, v74, 4uLL));
          v77 = vaddq_f32((float32x4_t)v75, (float32x4_t)vextq_s8(v75, v75, 4uLL));
          v57.i64[1] = vaddq_f32(v76, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v76, 0)).i64[1];
          v58.i64[1] = vaddq_f32(v77, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v77, 0)).i64[1];
          v78 = (int8x16_t)vmulq_f32(v21, v60);
          v79 = (int8x16_t)vmulq_f32(v21, v61);
          v80 = (int8x16_t)vaddq_f32((float32x4_t)v78, (float32x4_t)vextq_s8(v78, v78, 4uLL));
          v81 = (int8x16_t)vaddq_f32((float32x4_t)v79, (float32x4_t)vextq_s8(v79, v79, 4uLL));
          v82 = vbslq_s8(v34, (int8x16_t)vaddq_f32((float32x4_t)v80, (float32x4_t)vextq_s8(v80, v80, 8uLL)), v57);
          v83 = vbslq_s8(v34, (int8x16_t)vaddq_f32((float32x4_t)v81, (float32x4_t)vextq_s8(v81, v81, 8uLL)), v58);
          v84 = vmulq_n_f32((float32x4_t)vextq_s8(v83, v83, 8uLL), v69.f32[0]);
          v85 = *((int *)a2 + 22);
          v86 = vsubq_f32(vmulq_n_f32((float32x4_t)vextq_s8(v82, v82, 8uLL), vmulq_f32(v72, vrecpsq_f32(v68, v72)).f32[0]), v9);
          v87 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v88 = vaddq_s32(vcvtq_s32_f32(v86), vcltzq_f32(v86));
            v89 = (float32x2_t)vsubq_f32(v86, vcvtq_f32_s32(v88)).u64[0];
            v90 = (float32x4_t *)(v87 + 16 * (v88.i32[0] + v88.i32[1] * (int)v85));
            v91 = vaddq_f32(*v90, vmulq_n_f32(vsubq_f32(v90[1], *v90), v89.f32[0]));
            v92 = vaddq_f32(v91, vmulq_lane_f32(vsubq_f32(vaddq_f32(v90[v85], vmulq_n_f32(vsubq_f32(v90[(int)v85 + 1], v90[v85]), v89.f32[0])), v91), v89, 1));
            v93 = vsubq_f32(v84, v9);
            v94 = vaddq_s32(vcvtq_s32_f32(v93), vcltzq_f32(v93));
            v93.i64[0] = vsubq_f32(v93, vcvtq_f32_s32(v94)).u64[0];
            v95 = (float32x4_t *)(v87 + 16 * (v94.i32[0] + v94.i32[1] * (int)v85));
            v96 = vaddq_f32(*v95, vmulq_n_f32(vsubq_f32(v95[1], *v95), v93.f32[0]));
            v97 = vaddq_f32(v96, vmulq_lane_f32(vsubq_f32(vaddq_f32(v95[v85], vmulq_n_f32(vsubq_f32(v95[(int)v85 + 1], v95[v85]), v93.f32[0])), v96), *(float32x2_t *)v93.f32, 1));
          }
          else
          {
            v98 = vaddq_f32(v86, v13);
            v99 = vcvtq_s32_f32(v98);
            v98.i64[0] = vaddq_s32(v99, vcgtq_f32(vcvtq_f32_s32(v99), v98)).u64[0];
            v92 = *(float32x4_t *)(v87 + 16 * (v98.i32[0] + v98.i32[1] * (int)v85));
            v100 = vaddq_f32(vsubq_f32(v84, v9), v13);
            v101 = vcvtq_s32_f32(v100);
            v100.i64[0] = vaddq_s32(v101, vcgtq_f32(vcvtq_f32_s32(v101), v100)).u64[0];
            v97 = *(float32x4_t *)(v87 + 16 * (v100.i32[0] + v100.i32[1] * (int)v85));
          }
          v102 = vmvnq_s8(v34);
          v103 = vmvnq_s8(v33);
          v104 = vmvnq_s8(v59);
          v105 = *(int8x16_t *)(v19 + 16);
          v106 = (int8x16_t)vsubq_f32((float32x4_t)v105, (float32x4_t)v82);
          v107 = (int8x16_t)vsubq_f32((float32x4_t)v105, (float32x4_t)v83);
          v108 = *(float32x4_t *)(v19 + 272);
          v109 = *(float32x4_t *)(v19 + 288);
          v110 = (int8x16_t)vminq_f32(vmaxq_f32((float32x4_t)vextq_s8(v106, v106, 8uLL), v41), v108);
          v111 = (int8x16_t)vminq_f32(vmaxq_f32((float32x4_t)vextq_s8(v107, v107, 8uLL), v41), v108);
          v112 = (int8x8_t)vextq_s8(v110, v110, 8uLL).u64[0];
          v113.i64[0] = v82.i64[0];
          v113.i64[1] = v110.i64[1];
          v110.i64[0] = vextq_s8(v110, v82, 0xCuLL).u64[0];
          v114 = vext_s8(*(int8x8_t *)v82.i8, v112, 4uLL);
          v115.i64[0] = v83.i64[0];
          v115.i64[1] = v111.i64[1];
          v110.u64[1] = (unint64_t)v114;
          v116 = (int8x8_t)vextq_s8(v111, v111, 8uLL).u64[0];
          v111.i64[0] = vextq_s8(v111, v83, 0xCuLL).u64[0];
          v111.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v83.i8, v116, 4uLL);
          v117 = (float32x4_t)vextq_s8(v105, v105, 8uLL);
          v118 = (int32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32((float32x4_t)v110, v117), v108), v41)), vandq_s8(v113, v102));
          v119 = (int32x4_t)vorrq_s8(vandq_s8(v34, (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32((float32x4_t)v111, v117), v108), v41)), vandq_s8(v115, v102));
          v120 = *(float32x4_t *)(v19 + 32);
          v121 = vaddq_f32(v120, vmulq_f32(vminq_f32((float32x4_t)vdupq_laneq_s32(v118, 2), (float32x4_t)vdupq_laneq_s32(v118, 3)), vsubq_f32(v92, v120)));
          v122 = vmulq_f32(vminq_f32((float32x4_t)vdupq_laneq_s32(v119, 2), (float32x4_t)vdupq_laneq_s32(v119, 3)), vsubq_f32(v97, v120));
          v123 = *(float32x4_t *)(v19 + 176);
          v118.i64[1] = vsubq_f32(v123, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v118, 0)).i64[1];
          v119.i64[1] = vsubq_f32(v123, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v119, 0)).i64[1];
          v124 = vorrq_s8(vandq_s8(v33, (int8x16_t)vsubq_f32((float32x4_t)v118, v123)), vandq_s8((int8x16_t)v118, v103));
          v125 = vorrq_s8(vandq_s8(v33, (int8x16_t)vsubq_f32((float32x4_t)v119, v123)), vandq_s8((int8x16_t)v119, v103));
          v126 = vorrq_s8(vandq_s8(v124, v59), vandq_s8((int8x16_t)vmaxq_f32((float32x4_t)v124, v108), v104));
          v127 = vorrq_s8(vandq_s8(v125, v59), vandq_s8((int8x16_t)vmaxq_f32((float32x4_t)v125, v108), v104));
          v126.i64[1] = vminq_f32((float32x4_t)vextq_s8(v126, v126, 8uLL), *(float32x4_t *)&v126).i64[1];
          v127.i64[1] = vminq_f32((float32x4_t)vextq_s8(v127, v127, 8uLL), *(float32x4_t *)&v127).i64[1];
          v128 = vorrq_s8(vandq_s8(v126, v103), vandq_s8(v33, (int8x16_t)vminq_f32(vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)vsubq_f32(*(float32x4_t *)v19, (float32x4_t)v126)), v108), v109)));
          v129 = vorrq_s8(vandq_s8(v127, v103), vandq_s8(v33, (int8x16_t)vminq_f32(vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)vsubq_f32(*(float32x4_t *)v19, (float32x4_t)v127)), v108), v109)));
          v130 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v19);
          v131 = (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32((float32x4_t)v128, v130), v109), v41);
          v132 = (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32((float32x4_t)v129, v130), v109), v41);
          v133 = (int32x4_t)vorrq_s8(vandq_s8(v128, v104), vandq_s8(v59, v131));
          v134 = (int32x4_t)vorrq_s8(vandq_s8(v129, v104), vandq_s8(v59, v132));
          v135 = (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v133), (float32x4_t)v133);
          v136 = (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v134), (float32x4_t)v134);
          v137 = (float32x4_t)vextq_s8((int8x16_t)v133, v135, 8uLL);
          v135.i64[1] = v133.i64[1];
          v138 = (float32x4_t)vextq_s8((int8x16_t)v134, v136, 8uLL);
          v136.i64[1] = v134.i64[1];
          v139 = (float32x4_t *)(v11 + 16 * v15);
          *v139 = vmulq_n_f32(v121, vminq_f32((float32x4_t)v135, v137).f32[0]);
          v139[1] = vmulq_n_f32(vaddq_f32(v120, v122), vminq_f32((float32x4_t)v136, v138).f32[0]);
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v140 = *((_QWORD *)this + 51);
        v141 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v140 + 112));
        v142 = (int8x16_t)vaddq_f32((float32x4_t)v141, (float32x4_t)vextq_s8(v141, v141, 4uLL));
        v143 = (int8x16_t)vaddq_f32((float32x4_t)v142, (float32x4_t)vextq_s8(v142, v142, 8uLL));
        v144 = vextq_s8(v143, v143, 4uLL);
        v145 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v140 + 96));
        v146 = vaddq_f32((float32x4_t)v145, (float32x4_t)vextq_s8(v145, v145, 4uLL));
        v147 = (int8x16_t)vaddq_f32(v146, (float32x4_t)vdupq_lane_s64(v146.i64[0], 0));
        v149 = *(int8x16_t *)(v140 + 224);
        v148 = *(int8x16_t *)(v140 + 240);
        v150 = vbslq_s8(v149, v147, v144);
        v144.i64[0] = v143.i64[0];
        v151 = *(float32x4_t *)(v140 + 192);
        v152 = *(float32x4_t *)(v140 + 208);
        v153 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v144), v151), v152);
        v154 = vminq_f32(vmaxq_f32(vmulq_f32(v153, vrecpsq_f32((float32x4_t)v144, v153)), v151), v152);
        v155 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v140 + 80));
        v156 = (int8x16_t)vaddq_f32((float32x4_t)v155, (float32x4_t)vextq_s8(v155, v155, 4uLL));
        v156.i64[0] = vaddq_f32((float32x4_t)v156, (float32x4_t)vdupq_laneq_s64((int64x2_t)v156, 1)).u64[0];
        v156.i64[1] = v150.i64[1];
        v157 = (int8x16_t)vmulq_f32(v17, *(float32x4_t *)(v140 + 64));
        v158 = (int8x16_t)vaddq_f32((float32x4_t)v157, (float32x4_t)vextq_s8(v157, v157, 4uLL));
        v159 = (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v148, (int8x16_t)vaddq_f32((float32x4_t)v158, (float32x4_t)vextq_s8(v158, v158, 8uLL)), v156), vmulq_f32(v154, vrecpsq_f32((float32x4_t)v144, v154)).f32[0]);
        v160 = *(int8x16_t *)(v140 + 256);
        v161 = (float32x4_t)vbslq_s8(v160, (int8x16_t)vsubq_f32((float32x4_t)v159, *(float32x4_t *)(v140 + 48)), v159);
        v162 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v140 + 160), v161);
        v163 = vaddq_f32((float32x4_t)v162, (float32x4_t)vextq_s8(v162, v162, 4uLL));
        v164 = (float32x4_t)vextq_s8((int8x16_t)vaddq_f32(v163, (float32x4_t)vdupq_lane_s64(v163.i64[0], 0)), v159, 8uLL);
        v165 = vminq_f32(vmaxq_f32(vrecpeq_f32(v164), v151), v152);
        v166 = vminq_f32(vmaxq_f32(vmulq_f32(v165, vrecpsq_f32(v164, v165)), v151), v152);
        v167 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v140 + 144), v161);
        v168 = vaddq_f32((float32x4_t)v167, (float32x4_t)vextq_s8(v167, v167, 4uLL));
        v159.i64[1] = vaddq_f32(v168, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v168, 0)).i64[1];
        v169 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v140 + 128), v161);
        v170 = (int8x16_t)vaddq_f32((float32x4_t)v169, (float32x4_t)vextq_s8(v169, v169, 4uLL));
        v171 = vbslq_s8(v149, (int8x16_t)vaddq_f32((float32x4_t)v170, (float32x4_t)vextq_s8(v170, v170, 8uLL)), v159);
        v172 = *((int *)a2 + 22);
        v173 = vsubq_f32(vmulq_n_f32((float32x4_t)vextq_s8(v171, v171, 8uLL), vmulq_f32(v166, vrecpsq_f32(v164, v166)).f32[0]), v9);
        v174 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v175 = vaddq_s32(vcvtq_s32_f32(v173), vcltzq_f32(v173));
          v176 = (float32x2_t)vsubq_f32(v173, vcvtq_f32_s32(v175)).u64[0];
          v177 = (float32x4_t *)(v174 + 16 * (v175.i32[0] + v175.i32[1] * (int)v172));
          v178 = vaddq_f32(*v177, vmulq_n_f32(vsubq_f32(v177[1], *v177), v176.f32[0]));
          v179 = vaddq_f32(v178, vmulq_lane_f32(vsubq_f32(vaddq_f32(v177[v172], vmulq_n_f32(vsubq_f32(v177[(int)v172 + 1], v177[v172]), v176.f32[0])), v178), v176, 1));
        }
        else
        {
          v180 = vaddq_f32(v173, v13);
          v181 = vcvtq_s32_f32(v180);
          v180.i64[0] = vaddq_s32(v181, vcgtq_f32(vcvtq_f32_s32(v181), v180)).u64[0];
          v179 = *(float32x4_t *)(v174 + 16 * (v180.i32[0] + v180.i32[1] * (int)v172));
        }
        v182 = *(int8x16_t *)(v140 + 16);
        v183 = (int8x16_t)vsubq_f32((float32x4_t)v182, (float32x4_t)v171);
        v184 = *(float32x4_t *)(v140 + 272);
        v185 = *(float32x4_t *)(v140 + 288);
        v186 = (int8x16_t)vminq_f32(vmaxq_f32((float32x4_t)vextq_s8(v183, v183, 8uLL), v151), v184);
        v187 = (int8x8_t)vextq_s8(v186, v186, 8uLL).u64[0];
        v188.i64[0] = v171.i64[0];
        v188.i64[1] = v186.i64[1];
        v186.i64[0] = vextq_s8(v186, v171, 0xCuLL).u64[0];
        v186.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v171.i8, v187, 4uLL);
        v189 = vmvnq_s8(v148);
        v190 = vmvnq_s8(v160);
        v191 = (int32x4_t)vorrq_s8(vandq_s8(v149, (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32((float32x4_t)v186, (float32x4_t)vextq_s8(v182, v182, 8uLL)), v184), v151)), vandq_s8(v188, vmvnq_s8(v149)));
        v192 = vaddq_f32(*(float32x4_t *)(v140 + 32), vmulq_f32(vminq_f32((float32x4_t)vdupq_laneq_s32(v191, 2), (float32x4_t)vdupq_laneq_s32(v191, 3)), vsubq_f32(v179, *(float32x4_t *)(v140 + 32))));
        v193 = *(float32x4_t *)(v140 + 176);
        v191.i64[1] = vsubq_f32(v193, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v191, 0)).i64[1];
        v194 = vorrq_s8(vandq_s8(v148, (int8x16_t)vsubq_f32((float32x4_t)v191, v193)), vandq_s8((int8x16_t)v191, v189));
        v195 = vorrq_s8(vandq_s8(v194, v160), vandq_s8((int8x16_t)vmaxq_f32((float32x4_t)v194, v184), v190));
        v195.i64[1] = vminq_f32((float32x4_t)vextq_s8(v195, v195, 8uLL), *(float32x4_t *)&v195).i64[1];
        v196 = vorrq_s8(vandq_s8(v195, v189), vandq_s8(v148, (int8x16_t)vminq_f32(vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)vsubq_f32(*(float32x4_t *)v140, (float32x4_t)v195)), v184), v185)));
        v197 = (int32x4_t)vorrq_s8(vandq_s8(v196, v190), vandq_s8(v160, (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32((float32x4_t)v196, (float32x4_t)vrev64q_s32(*(int32x4_t *)v140)), v185), v151)));
        v198 = (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v197), (float32x4_t)v197);
        v199 = (float32x4_t)vextq_s8((int8x16_t)v197, v198, 8uLL);
        v198.i64[1] = v197.i64[1];
        *(float32x4_t *)(v11 + 16 * v15) = vmulq_n_f32(v192, vminq_f32((float32x4_t)v198, v199).f32[0]);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcWideScreen::GetDOD(HgcWideScreen *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcWideScreen *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcWideScreen::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcWideScreen::HgcWideScreen(HgcWideScreen *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64ECC78;
  v3 = operator new();
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 192) = xmmword_1B30527D0;
  *(int32x4_t *)(v3 + 208) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 224) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 240) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 256) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 272) = xmmword_1B30527E0;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 288) = xmmword_1B304F230;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcWideScreen *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B289B5BC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcWideScreen::~HgcWideScreen(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64ECC78;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4055B0EC01);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcWideScreen::~HgcWideScreen(this);
  HGObject::operator delete(v1);
}

uint64_t HgcWideScreen::SetParameter(HgcWideScreen *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  uint64_t v8;
  float *v9;
  float *v10;
  __n128 *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_64;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_64;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_64;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == 0.0
        && v11[3].n128_f32[1] == a3.n128_f32[0]
        && v11[3].n128_f32[2] == 0.0
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u32[0] = 0;
      v11[3].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[19] = a3;
      goto LABEL_64;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_64;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_64;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_64;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_64;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_64;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_64;
    case 10:
      v8 = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(*((_QWORD *)this + 51) + 320) = a3;
      return v8;
    case 11:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6)
        return 0;
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_64;
    case 12:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6)
        return 0;
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
LABEL_64:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcWideScreen::GetParameter(HgcWideScreen *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_15;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_15;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_15;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[76];
      a3[1] = v7[77];
      a3[2] = v7[78];
      v4 = v7 + 79;
      goto LABEL_15;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_15;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_15;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_15;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_15;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_15;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      v4 = v13 + 39;
      goto LABEL_15;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[80];
      a3[1] = v14[81];
      a3[2] = v14[82];
      v4 = v14 + 83;
      goto LABEL_15;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[40];
      a3[1] = v15[41];
      a3[2] = v15[42];
      v4 = v15 + 43;
      goto LABEL_15;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[44];
      a3[1] = v16[45];
      a3[2] = v16[46];
      v4 = v16 + 47;
LABEL_15:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcInvert::GetProgram(HgcInvert *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000032c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(9.999999975e-07, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = fmax(r0.w, c0.x);\n"
             "    r1.x = 1.00000h / r1.x;\n"
             "    r1.xyz = -r0.xyz*r1.xxx + c0.yyy;\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[0]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5349f503:9490d2ad:6deddcd2:a0e49043\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0001:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000318\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(9.999999975e-07, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = fmax(r0.w, c0.x);\n"
             "    r1.x = 1.00000f / r1.x;\n"
             "    r1.xyz = -r0.xyz*r1.xxx + c0.yyy;\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(r0, r1, hg_Params[0]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=10a12ec8:c6429c29:23372981:4ba120da\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002e6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(9.999999975e-07, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.x = max(r0.w, c0.x);\n"
           "    r1.x = 1.00000 / r1.x;\n"
           "    r1.xyz = -r0.xyz*r1.xxx + c0.yyy;\n"
           "    r1.w = r0.w;\n"
           "    r1.xyz = r1.xyz*r0.www;\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal0);\n"
           "}\n"
           "//MD5=a9364a1b:d6c67907:14d2fe4a:a93ad32b\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcInvert::InitProgramDescriptor(HgcInvert *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcInvert_hgc_visible", "//Metal1.0     \n//LEN=00000001eb\n[[ visible ]] FragmentOut HgcInvert_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(9.999999975e-07, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = fmax(r0.w, c0.x);\n"
    "    r1.x = 1.00000f / r1.x;\n"
    "    r1.xyz = -r0.xyz*r1.xxx + c0.yyy;\n"
    "    r1.w = r0.w;\n"
    "    r1.xyz = r1.xyz*r0.www;\n"
    "    output.color0 = mix(r0, r1, hg_Params[0]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B289BC84()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcInvert");
}

void sub_1B289BC94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B289BD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B289BDD4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B289BDCCLL);
}

_QWORD *HgcInvert::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcInvert [hgc1]");
}

uint64_t HgcInvert::BindTexture(HgcInvert *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcInvert::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcInvert::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t *v39;
  uint64_t v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v40) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v12 = *(float32x4_t *)(v6 + v10 - 32);
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v13 = *(float32x4_t *)(v6 + v10);
          v14 = *(float32x4_t *)(v6 + v10 + 16);
          v15 = *(_QWORD *)(a1 + 408);
          v16 = *(float32x4_t *)(v15 + 16);
          v17 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 0xCuLL), v16);
          v18 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 0xCuLL), v16);
          v19 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL), v16);
          v20 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 0xCuLL), v16);
          v21 = *(float32x4_t *)(v15 + 32);
          v22 = *(float32x4_t *)(v15 + 48);
          v23 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v17), v21), v22);
          v24 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v18), v21), v22);
          v25 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v19), v21), v22);
          v26 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v20), v21), v22);
          v27 = *(float32x4_t *)(v15 + 64);
          v28 = *(float32x4_t *)(v15 + 80);
          v29 = vminq_f32(v23, v27);
          v30 = vminq_f32(v24, v27);
          v31 = vminq_f32(v25, v27);
          v32 = vminq_f32(v26, v27);
          v33 = (int8x16_t)vsubq_f32(v28, vmulq_n_f32(v12, vmulq_f32(v29, vrecpsq_f32(v17, v29)).f32[0]));
          v34 = *(int8x16_t *)(v15 + 96);
          v35 = vaddq_f32(v12, vmulq_f32(*(float32x4_t *)v15, vsubq_f32((float32x4_t)vbslq_s8(v34, (int8x16_t)v12, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v34, (int8x16_t)v12, v33), v12, 3)), v12)));
          v36 = vaddq_f32(v11, vmulq_f32(*(float32x4_t *)v15, vsubq_f32((float32x4_t)vbslq_s8(v34, (int8x16_t)v11, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v34, (int8x16_t)v11, (int8x16_t)vsubq_f32(v28, vmulq_n_f32(v11, vmulq_f32(v30, vrecpsq_f32(v18, v30)).f32[0]))), v11, 3)), v11)));
          v37 = vaddq_f32(v13, vmulq_f32(*(float32x4_t *)v15, vsubq_f32((float32x4_t)vbslq_s8(v34, (int8x16_t)v13, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v34, (int8x16_t)v13, (int8x16_t)vsubq_f32(v28, vmulq_n_f32(v13, vmulq_f32(v31, vrecpsq_f32(v19, v31)).f32[0]))), v13, 3)), v13)));
          v38 = vaddq_f32(v14, vmulq_f32(*(float32x4_t *)v15, vsubq_f32((float32x4_t)vbslq_s8(v34, (int8x16_t)v14, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v34, (int8x16_t)v14, (int8x16_t)vsubq_f32(v28, vmulq_n_f32(v14, vmulq_f32(v32, vrecpsq_f32(v20, v32)).f32[0]))), v14, 3)), v14)));
          v39 = (float32x4_t *)(v5 + v10);
          v39[-2] = v35;
          v39[-1] = v36;
          *v39 = v37;
          v39[1] = v38;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v40) = -v9;
      }
      if ((int)v40 < v4)
      {
        v40 = v40;
        do
        {
          v41 = *(float32x4_t *)(v6 + 16 * v40);
          v42 = *(_QWORD *)(a1 + 408);
          v43 = vmaxq_f32((float32x4_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL), *(float32x4_t *)(v42 + 16));
          v44 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v43), *(float32x4_t *)(v42 + 32)), *(float32x4_t *)(v42 + 48)), *(float32x4_t *)(v42 + 64));
          *(float32x4_t *)(v5 + 16 * v40++) = vaddq_f32(v41, vmulq_f32(*(float32x4_t *)v42, vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v42 + 96), (int8x16_t)v41, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v42 + 96), (int8x16_t)v41, (int8x16_t)vsubq_f32(*(float32x4_t *)(v42 + 80), vmulq_n_f32(v41, vmulq_f32(v44, vrecpsq_f32(v43, v44)).f32[0]))), v41, 3)), v41)));
        }
        while (v40 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcInvert::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcInvert::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcInvert::HgcInvert(HgcInvert *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64ECEE0;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_OWORD *)(v3 + 16) = xmmword_1B3052380;
  *(_OWORD *)(v3 + 32) = xmmword_1B3051540;
  *(_OWORD *)(v3 + 48) = xmmword_1B3051200;
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 80) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 96) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B289C1EC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcInvert::~HgcInvert(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64ECEE0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AC4F46D1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcInvert::~HgcInvert(this);
  HGObject::operator delete(v1);
}

uint64_t HgcInvert::SetParameter(HgcInvert *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcInvert::GetParameter(HgcInvert *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcChannelMixer::GetProgram(HgcChannelMixer *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000375\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r2.x = clamp(dot(r1, half4(hg_Params[3])), 0.00000h, 1.00000h);\n"
             "    r3.w = r2.x;\n"
             "    r3.z = dot(r1, half4(hg_Params[2]));\n"
             "    r3.x = dot(r1, half4(hg_Params[0]));\n"
             "    r3.y = dot(r1, half4(hg_Params[1]));\n"
             "    r3.xyz = r3.xyz*r2.xxx;\n"
             "    output.color0 = mix(float4(r0), float4(r3), hg_Params[4]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ee693deb:25a18329:2369ace4:a9832916\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0005:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000344\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r2.x = clamp(dot(r1, hg_Params[3]), 0.00000f, 1.00000f);\n"
             "    r3.w = r2.x;\n"
             "    r3.z = dot(r1, hg_Params[2]);\n"
             "    r3.x = dot(r1, hg_Params[0]);\n"
             "    r3.y = dot(r1, hg_Params[1]);\n"
             "    r3.xyz = r3.xyz*r2.xxx;\n"
             "    output.color0 = mix(r0, r3, hg_Params[4]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=8c34ae41:ec1890af:07ea7f20:d2990174\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0005:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003b6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r2.x = clamp(dot(r1, hg_ProgramLocal3), 0.00000, 1.00000);\n"
           "    r3.w = r2.x;\n"
           "    r3.z = dot(r1, hg_ProgramLocal2);\n"
           "    r3.x = dot(r1, hg_ProgramLocal0);\n"
           "    r3.y = dot(r1, hg_ProgramLocal1);\n"
           "    r3.xyz = r3.xyz*r2.xxx;\n"
           "    gl_FragColor = mix(r0, r3, hg_ProgramLocal4);\n"
           "}\n"
           "//MD5=5ad42bd4:4af0283b:59ba1e6b:099c0690\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0005:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcChannelMixer::InitProgramDescriptor(HgcChannelMixer *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcChannelMixer_hgc_visible", "//Metal1.0     \n//LEN=000000021d\n[[ visible ]] FragmentOut HgcChannelMixer_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r2.x = clamp(dot(r1, hg_Params[3]), 0.00000f, 1.00000f);\n"
    "    r3.w = r2.x;\n"
    "    r3.z = dot(r1, hg_Params[2]);\n"
    "    r3.x = dot(r1, hg_Params[0]);\n"
    "    r3.y = dot(r1, hg_Params[1]);\n"
    "    r3.xyz = r3.xyz*r2.xxx;\n"
    "    output.color0 = mix(r0, r3, hg_Params[4]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B289C3D4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcChannelMixer");
}

void sub_1B289C3E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B289C4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B289C524()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B289C51CLL);
}

_QWORD *HgcChannelMixer::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcChannelMixer [hgc1]");
}

uint64_t HgcChannelMixer::BindTexture(HgcChannelMixer *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcChannelMixer::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcChannelMixer::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t *v57;
  unsigned int v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v58 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v15 = *(float32x4_t *)(v13 + 64);
          v14 = *(float32x4_t *)(v13 + 80);
          v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v14);
          v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
          v18 = *(float32x4_t *)(v13 + 96);
          v19 = *(int8x16_t *)(v13 + 112);
          v20 = vmulq_f32(vrecpeq_f32(v16), v18);
          v21 = vmulq_f32(vrecpeq_f32(v17), v18);
          v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
          v23 = vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
          v24 = *(float32x4_t *)(v13 + 128);
          v25 = *(float32x4_t *)(v13 + 144);
          v26 = vmulq_f32(v11, (float32x4_t)vorrq_s8(v22, (int8x16_t)v24));
          v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v23, (int8x16_t)v24));
          v29 = *(float32x4_t *)(v13 + 32);
          v28 = *(float32x4_t *)(v13 + 48);
          v30 = vmulq_f32(v28, v26);
          v31 = vmulq_f32(v28, v27);
          v32 = vaddq_f32(v30, (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL));
          v33 = vaddq_f32(v31, (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL));
          v34 = vmaxq_f32(vaddq_f32(v32, (float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL)), v24);
          v35 = vmaxq_f32(vaddq_f32(v33, (float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL)), v24);
          v36 = vmulq_f32(v26, v29);
          v37 = (int8x16_t)vminq_f32(v34, v25);
          v38 = vmulq_f32(v27, v29);
          v39 = vaddq_f32(v36, (float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL));
          v40 = vaddq_f32(v38, (float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL));
          v41 = (int8x16_t)vminq_f32(v35, v25);
          v42 = *(float32x4_t *)(v13 + 16);
          v43 = vmulq_f32(v26, *(float32x4_t *)v13);
          v44 = vmulq_f32(v27, *(float32x4_t *)v13);
          v45 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          v46 = *(int8x16_t *)(v13 + 160);
          v47 = *(int8x16_t *)(v13 + 176);
          v48 = vbslq_s8(v46, (int8x16_t)vaddq_f32(v39, (float32x4_t)vdupq_lane_s64(v39.i64[0], 0)), vextq_s8(v37, v37, 4uLL));
          v49 = vaddq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL));
          v44.i64[0] = vaddq_f32(v45, (float32x4_t)vdupq_laneq_s64((int64x2_t)v45, 1)).u64[0];
          v49.i64[0] = vaddq_f32(v49, (float32x4_t)vdupq_laneq_s64((int64x2_t)v49, 1)).u64[0];
          v50 = vmulq_f32(v26, v42);
          v51 = vmulq_f32(v27, v42);
          v44.i64[1] = v48.i64[1];
          v52 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL));
          v53 = vaddq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL));
          v49.i64[1] = vbslq_s8(v46, (int8x16_t)vaddq_f32(v40, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v40, 0)), vextq_s8(v41, v41, 4uLL)).i64[1];
          v54 = (float32x4_t)vbslq_s8(v47, (int8x16_t)vaddq_f32(v52, (float32x4_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL)), (int8x16_t)v44);
          v55 = (float32x4_t)vbslq_s8(v47, (int8x16_t)vaddq_f32(v53, (float32x4_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL)), (int8x16_t)v49);
          v56 = *(int8x16_t *)(v13 + 192);
          v57 = (float32x4_t *)(v5 + v10);
          v57[-1] = vaddq_f32(v11, vmulq_f32(v15, vsubq_f32((float32x4_t)vbslq_s8(v56, (int8x16_t)v54, (int8x16_t)vmulq_n_f32(v54, *(float *)v37.i32)), v11)));
          *v57 = vaddq_f32(v12, vmulq_f32(v15, vsubq_f32((float32x4_t)vbslq_s8(v56, (int8x16_t)v55, (int8x16_t)vmulq_n_f32(v55, *(float *)v41.i32)), v12)));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v58 = -v9;
      }
      if ((int)v58 < v4)
      {
        v59 = *(float32x4_t *)(v6 + 16 * v58);
        v60 = *(_QWORD *)(a1 + 408);
        v61 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 3), *(float32x4_t *)(v60 + 80));
        v62 = vmulq_f32(vrecpeq_f32(v61), *(float32x4_t *)(v60 + 96));
        v63 = vandq_s8(*(int8x16_t *)(v60 + 112), (int8x16_t)vmulq_f32(v62, vrecpsq_f32(v62, v61)));
        v64 = *(float32x4_t *)(v60 + 128);
        v65 = vmulq_f32(v59, (float32x4_t)vorrq_s8(v63, (int8x16_t)v64));
        v66 = vmulq_f32(*(float32x4_t *)(v60 + 48), v65);
        v67 = vaddq_f32(v66, (float32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL));
        v68 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v67, (float32x4_t)vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL)), v64), *(float32x4_t *)(v60 + 144));
        v69 = vmulq_f32(v65, *(float32x4_t *)(v60 + 32));
        v70 = vaddq_f32(v69, (float32x4_t)vextq_s8((int8x16_t)v69, (int8x16_t)v69, 4uLL));
        v71 = vmulq_f32(v65, *(float32x4_t *)v60);
        v72 = vaddq_f32(v71, (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL));
        v73 = vbslq_s8(*(int8x16_t *)(v60 + 160), (int8x16_t)vaddq_f32(v70, (float32x4_t)vdupq_lane_s64(v70.i64[0], 0)), vextq_s8(v68, v68, 4uLL));
        v70.i64[0] = vaddq_f32(v72, (float32x4_t)vdupq_laneq_s64((int64x2_t)v72, 1)).u64[0];
        v70.i64[1] = v73.i64[1];
        v74 = vmulq_f32(v65, *(float32x4_t *)(v60 + 16));
        v75 = vaddq_f32(v74, (float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL));
        v76 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v60 + 176), (int8x16_t)vaddq_f32(v75, (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), (int8x16_t)v70);
        *(float32x4_t *)(v5 + 16 * v58) = vaddq_f32(v59, vmulq_f32(*(float32x4_t *)(v60 + 64), vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v60 + 192), (int8x16_t)v76, (int8x16_t)vmulq_n_f32(v76, *(float *)v68.i32)), v59)));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcChannelMixer::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcChannelMixer::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcChannelMixer::HgcChannelMixer(HgcChannelMixer *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64ED148;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(int32x4_t *)(v3 + 80) = vdupq_n_s32(0x358637BDu);
  *(int32x4_t *)(v3 + 96) = vdupq_n_s32(0x3F804020u);
  *(_OWORD *)(v3 + 112) = xmmword_1B30514E0;
  *(_OWORD *)(v3 + 128) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 144) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B289CA80(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcChannelMixer::~HgcChannelMixer(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64ED148;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C400F93440CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcChannelMixer::~HgcChannelMixer(this);
  HGObject::operator delete(v1);
}

uint64_t HgcChannelMixer::SetParameter(HgcChannelMixer *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcChannelMixer::GetParameter(HgcChannelMixer *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcChannelBalance::GetProgram(HgcChannelBalance *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004eb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 6.10350e-05h);\n"
             "    r2.xyz = half3(hg_Params[2].xyz) - half3(hg_Params[1].xyz);\n"
             "    r3.xyz = r1.xyz - c0.xxx;\n"
             "    r3.xyz = r3.xyz*r2.xyz;\n"
             "    r3.xyz = r3.xyz + r3.xyz;\n"
             "    r2.xyz = half3(hg_Params[1].xyz) - half3(hg_Params[0].xyz);\n"
             "    r2.xyz = r2.xyz*r1.xyz;\n"
             "    r4.xyz = half3(r1.xyz >= c0.xxx);\n"
             "    r3.xyz = r3.xyz + half3(hg_Params[1].xyz);\n"
             "    r4.xyz = r3.xyz*r4.xyz;\n"
             "    r2.xyz = r2.xyz*c0.yyy + half3(hg_Params[0].xyz);\n"
             "    r1.xyz = half3(r1.xyz < c0.xxx);\n"
             "    r1.xyz = r2.xyz*r1.xyz + r4.xyz;\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(float4(r0), float4(r1), hg_Params[3]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=eb9e2f45:42fccbc9:fba54ed1:3a8cef47\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0004:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004af\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
             "    r2.xyz = hg_Params[2].xyz - hg_Params[1].xyz;\n"
             "    r3.xyz = r1.xyz - c0.xxx;\n"
             "    r3.xyz = r3.xyz*r2.xyz;\n"
             "    r3.xyz = r3.xyz + r3.xyz;\n"
             "    r2.xyz = hg_Params[1].xyz - hg_Params[0].xyz;\n"
             "    r2.xyz = r2.xyz*r1.xyz;\n"
             "    r4.xyz = float3(r1.xyz >= c0.xxx);\n"
             "    r3.xyz = r3.xyz + hg_Params[1].xyz;\n"
             "    r4.xyz = r3.xyz*r4.xyz;\n"
             "    r2.xyz = r2.xyz*c0.yyy + hg_Params[0].xyz;\n"
             "    r1.xyz = float3(r1.xyz < c0.xxx);\n"
             "    r1.xyz = r2.xyz*r1.xyz + r4.xyz;\n"
             "    r1.w = r0.w;\n"
             "    r1.xyz = r1.xyz*r0.www;\n"
             "    output.color0 = mix(r0, r1, hg_Params[3]);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b9bbdce9:9128e2b8:6729f690:c077f518\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000051f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.5000000000, 2.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz / max(r0.w, 1.00000e-06);\n"
           "    r2.xyz = hg_ProgramLocal2.xyz - hg_ProgramLocal1.xyz;\n"
           "    r3.xyz = r1.xyz - c0.xxx;\n"
           "    r3.xyz = r3.xyz*r2.xyz;\n"
           "    r3.xyz = r3.xyz + r3.xyz;\n"
           "    r2.xyz = hg_ProgramLocal1.xyz - hg_ProgramLocal0.xyz;\n"
           "    r2.xyz = r2.xyz*r1.xyz;\n"
           "    r4.xyz = vec3(greaterThanEqual(r1.xyz, c0.xxx));\n"
           "    r3.xyz = r3.xyz + hg_ProgramLocal1.xyz;\n"
           "    r4.xyz = r3.xyz*r4.xyz;\n"
           "    r2.xyz = r2.xyz*c0.yyy + hg_ProgramLocal0.xyz;\n"
           "    r1.xyz = vec3(lessThan(r1.xyz, c0.xxx));\n"
           "    r1.xyz = r2.xyz*r1.xyz + r4.xyz;\n"
           "    r1.w = r0.w;\n"
           "    r1.xyz = r1.xyz*r0.www;\n"
           "    gl_FragColor = mix(r0, r1, hg_ProgramLocal3);\n"
           "}\n"
           "//MD5=5895473c:eceea28d:f9ab752f:c58b7f58\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcChannelBalance::InitProgramDescriptor(HgcChannelBalance *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcChannelBalance_hgc_visible", "//Metal1.0     \n//LEN=000000038a\n[[ visible ]] FragmentOut HgcChannelBalance_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.5000000000, 2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz / fmax(r0.w, 1.00000e-06f);\n"
    "    r2.xyz = hg_Params[2].xyz - hg_Params[1].xyz;\n"
    "    r3.xyz = r1.xyz - c0.xxx;\n"
    "    r3.xyz = r3.xyz*r2.xyz;\n"
    "    r3.xyz = r3.xyz + r3.xyz;\n"
    "    r2.xyz = hg_Params[1].xyz - hg_Params[0].xyz;\n"
    "    r2.xyz = r2.xyz*r1.xyz;\n"
    "    r4.xyz = float3(r1.xyz >= c0.xxx);\n"
    "    r3.xyz = r3.xyz + hg_Params[1].xyz;\n"
    "    r4.xyz = r3.xyz*r4.xyz;\n"
    "    r2.xyz = r2.xyz*c0.yyy + hg_Params[0].xyz;\n"
    "    r1.xyz = float3(r1.xyz < c0.xxx);\n"
    "    r1.xyz = r2.xyz*r1.xyz + r4.xyz;\n"
    "    r1.w = r0.w;\n"
    "    r1.xyz = r1.xyz*r0.www;\n"
    "    output.color0 = mix(r0, r1, hg_Params[3]);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B289CC88()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcChannelBalance");
}

void sub_1B289CC98(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B289CD98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B289CDD8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B289CDD0);
}

_QWORD *HgcChannelBalance::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcChannelBalance [hgc1]");
}

uint64_t HgcChannelBalance::BindTexture(HgcChannelBalance *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcChannelBalance::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcChannelBalance::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  __int128 v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t *v44;
  uint64_t v45;
  float32x4_t v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 3)
      {
        LODWORD(v45) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = *(float32x4_t *)(v6 + v9);
          v12 = *(float32x4_t *)(v6 + v9 + 16);
          v13 = *(float32x4_t *)(v6 + v9 + 32);
          v14 = *(_QWORD *)(a1 + 408);
          v15 = *(float32x4_t *)(v14 + 64);
          v16 = *(float32x4_t *)(v14 + 80);
          v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v15);
          v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v15);
          v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v15);
          v20 = vmulq_f32(vrecpeq_f32(v17), v16);
          v21 = vmulq_f32(vrecpeq_f32(v18), v16);
          v22 = vmulq_f32(vrecpeq_f32(v19), v16);
          v23 = vmulq_f32(v11, vmulq_f32(v20, vrecpsq_f32(v20, v17)));
          v24 = vmulq_f32(v12, vmulq_f32(v21, vrecpsq_f32(v21, v18)));
          v25 = vmulq_f32(v13, vmulq_f32(v22, vrecpsq_f32(v22, v19)));
          v26 = *(float32x4_t *)(v14 + 16);
          v27 = *(float32x4_t *)(v14 + 48);
          v28 = *(float32x4_t *)(v14 + 96);
          v29 = *(int8x16_t *)(v14 + 112);
          v30 = vsubq_f32(*(float32x4_t *)(v14 + 32), v26);
          v31 = vmulq_f32(v30, vsubq_f32(v23, v28));
          v32 = vmulq_f32(v30, vsubq_f32(v24, v28));
          v33 = vmulq_f32(v30, vsubq_f32(v25, v28));
          v34 = vsubq_f32(v26, *(float32x4_t *)v14);
          v35 = vaddq_f32(v26, vaddq_f32(v31, v31));
          v36 = vaddq_f32(v26, vaddq_f32(v32, v32));
          v37 = vaddq_f32(v26, vaddq_f32(v33, v33));
          v38 = vmulq_f32(v35, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgeq_f32(v23, v28)));
          v39 = *(_OWORD *)(v14 + 128);
          v40 = *(int8x16_t *)(v14 + 144);
          v41 = vaddq_f32(v11, vmulq_f32(v27, vsubq_f32((float32x4_t)vbslq_s8(v40, (int8x16_t)v11, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v40, (int8x16_t)v11, (int8x16_t)vaddq_f32(v38, vmulq_f32((float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v28, v23)), vaddq_f32(*(float32x4_t *)v14,
                                                                                  vmulq_lane_f32(vmulq_f32(v23, v34), *(float32x2_t *)&v39, 1))))), v11, 3)), v11)));
          v42 = vaddq_f32(v12, vmulq_f32(v27, vsubq_f32((float32x4_t)vbslq_s8(v40, (int8x16_t)v12, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v40, (int8x16_t)v12, (int8x16_t)vaddq_f32(vmulq_f32(v36, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgeq_f32(v24, v28))), vmulq_f32((float32x4_t)vandq_s8(
                                                                                               v29,
                                                                                               (int8x16_t)vcgtq_f32(v28, v24)),
                                                                                vaddq_f32(*(float32x4_t *)v14, vmulq_lane_f32(vmulq_f32(v24, v34), *(float32x2_t *)&v39, 1))))), v12, 3)), v12)));
          v43 = vaddq_f32(v13, vmulq_f32(v27, vsubq_f32((float32x4_t)vbslq_s8(v40, (int8x16_t)v13, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v40, (int8x16_t)v13, (int8x16_t)vaddq_f32(vmulq_f32(v37, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgeq_f32(v25, v28))), vmulq_f32((float32x4_t)vandq_s8(
                                                                                               v29,
                                                                                               (int8x16_t)vcgtq_f32(v28, v25)),
                                                                                vaddq_f32(*(float32x4_t *)v14, vmulq_lane_f32(vmulq_f32(v25, v34), *(float32x2_t *)&v39, 1))))), v13, 3)), v13)));
          v44 = (float32x4_t *)(v5 + v9);
          *v44 = v41;
          v44[1] = v42;
          v44[2] = v43;
          v10 -= 3;
          v9 += 48;
        }
        while (v4 + v10 > 2);
        LODWORD(v45) = -v10;
      }
      if ((int)v45 < v4)
      {
        v45 = v45;
        do
        {
          v46 = *(float32x4_t *)(v6 + 16 * v45);
          v47 = *(_QWORD *)(a1 + 408);
          v48 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 3), *(float32x4_t *)(v47 + 64));
          v49 = vmulq_f32(vrecpeq_f32(v48), *(float32x4_t *)(v47 + 80));
          v50 = vmulq_f32(v46, vmulq_f32(v49, vrecpsq_f32(v49, v48)));
          v51 = *(float32x4_t *)(v47 + 16);
          v52 = *(float32x4_t *)(v47 + 96);
          v53 = vmulq_f32(vsubq_f32(*(float32x4_t *)(v47 + 32), v51), vsubq_f32(v50, v52));
          *(float32x4_t *)(v5 + 16 * v45++) = vaddq_f32(v46, vmulq_f32(*(float32x4_t *)(v47 + 48), vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v47 + 144), (int8x16_t)v46, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v47 + 144), (int8x16_t)v46, (int8x16_t)vaddq_f32(vmulq_f32(vaddq_f32(v51, vaddq_f32(v53, v53)), (float32x4_t)vandq_s8(*(int8x16_t *)(v47 + 112), (int8x16_t)vcgeq_f32(v50, v52))), vmulq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(v47 + 112), (int8x16_t)vcgtq_f32(v52, v50)), vaddq_f32(*(float32x4_t *)v47, vmulq_lane_f32(vmulq_f32(v50, vsubq_f32(v51, *(float32x4_t *)v47)), *(float32x2_t *)(v47 + 128), 1))))), v46, 3)), v46)));
        }
        while (v45 < v4);
      }
      ++v3;
      v5 += v7;
      v6 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcChannelBalance::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcChannelBalance::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcChannelBalance::HgcChannelBalance(HgcChannelBalance *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64ED3B0;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x358637BDu);
  *(_OWORD *)(v3 + 80) = xmmword_1B3051BC0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051510;
  *(_OWORD *)(v3 + 112) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 128) = xmmword_1B304EF60;
  *(_OWORD *)(v3 + 144) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B289D2E4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcChannelBalance::~HgcChannelBalance(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64ED3B0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcChannelBalance::~HgcChannelBalance(this);
  HGObject::operator delete(v1);
}

uint64_t HgcChannelBalance::SetParameter(HgcChannelBalance *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcChannelBalance::GetParameter(HgcChannelBalance *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcCircleBlur2::GetProgram(HgcCircleBlur2 *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_174;
    else
      return aMetal10Len0000_175;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_57;
  }
}

void HgcCircleBlur2::InitProgramDescriptor(HgcCircleBlur2 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcCircleBlur2_hgc_visible", "//Metal1.0     \n//LEN=0000000d02\n[[ visible ]] FragmentOut HgcCircleBlur2_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2,\n    float4 color3,\n    float4 color4,\n    float4 texCoord5)\n{\n    const float4 c0 = float4(7.000000000, 3.000000000, 2.000000000, 1.000000000);\n"
    "    const float4 c1 = float4(4.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = c0.w;\n"
    "    r1.xy = texCoord5.xy;\n"
    "    r2.y = dot(r1.xyw, hg_Params[3].xyz);\n"
    "    r2.x = dot(r1.xyw, hg_Params[2].xyz);\n"
    "    r2.x = dot(r2.xy, r2.xy);\n"
    "    r2.x = sqrt(r2.x);\n"
    "    r2.x = -r2.x*hg_Params[1].x + c0.w;\n"
    "    r2.y = r2.x*c0.x;\n"
    "    r1 = color1;\n"
    "    r3 = color2;\n"
    "    r4 = color3;\n"
    "    r2.z = floor(fabs(r2.y));\n"
    "    r2.z = select(r2.z, -r2.z, r2.y < 0.00000f);\n"
    "    r5.x = r2.z - c0.y;\n"
    "    r5.w = r5.x - c0.w;\n"
    "    r6.yz = r5.xx - c0.zy;\n"
    "    r5.w = abs(r5.w);\n"
    "    r6.yz = abs(r6.yz);\n"
    "    r2.y = r2.y - r2.z;\n"
    "    r5.z = float(c1.z < r2.x);\n"
    "    r5.y = float(r2.x < c0.w);\n"
    "    r5.y = fmin(r5.z, r5.y);\n"
    "    r5.z = r5.y*hg_Params[0].x;\n"
    "    r2.w = float(r2.z >= c1.x);\n"
    "    r2.w = r5.z*r2.w;\n"
    "    r5.z = float(c1.z >= r5.x);\n"
    "    r5.zw = float2(-r5.zw >= c1.zz);\n"
    "    r5.x = abs(r5.x);\n"
    "    r7 = color4;\n"
    "    r5.z = r2.w*r5.z;\n"
    "    r6.x = r5.z*r5.w;\n"
    "    r5.z = r5.z*-r5.w + r5.z;\n"
    "    r6.y = float(-r6.y >= c1.z);\n"
    "    r5.w = r5.z*r6.y;\n"
    "    r8 = select(r0, r1, -r6.xxxx < 0.00000f);\n"
    "    r9 = select(r1, r3, -r6.xxxx < 0.00000f);\n"
    "    r6.yz = float2(-r6.yz >= c1.zz);\n"
    "    r9 = select(r9, r4, -r5.wwww < 0.00000f);\n"
    "    r8 = select(r8, r3, -r5.wwww < 0.00000f);\n"
    "    r5.z = r5.z*r6.y;\n"
    "    r6.y = r5.z*r6.z;\n"
    "    r6.z = float(-r6.z >= c1.z);\n"
    "    r5.z = r5.z*r6.z;\n"
    "    r8 = select(r8, r4, -r6.yyyy < 0.00000f);\n"
    "    r6 = select(r9, r7, -r6.yyyy < 0.00000f);\n"
    "    r6 = select(r6, c1.yzzy, -r5.zzzz < 0.00000f);\n"
    "    r9.x = float(-fabs(hg_Params[0].x) >= c1.z);\n"
    "    r8 = select(r8, c1.yzzy, -r5.zzzz < 0.00000f);\n"
    "    r5.w = r2.z - c1.y;\n"
    "    r5.z = abs(r5.w);\n"
    "    r5.w = float(c1.z >= r2.z);\n"
    "    r9.y = fmin(r5.y, r9.x);\n"
    "    r5.zw = float2(-r5.zw >= c1.zz);\n"
    "    r5.w = fmin(r9.y, r5.w);\n"
    "    r9.z = fmin(r5.w, r5.z);\n"
    "    r5.xz = float2(-r5.xz >= c1.zz);\n"
    "    r5.z = fmin(r5.w, r5.z);\n"
    "    r2.z = float(r2.z == c0.z);\n"
    "    r5.w = fmin(r5.z, r2.z);\n"
    "    r9.w = c1.y - r2.y;\n"
    "    r6 = mix(r6, r8, r9.wwww);\n"
    "    r8 = select(r1, r3, -r9.zzzz < 0.00000f);\n"
    "    r1 = select(r0, r1, -r9.zzzz < 0.00000f);\n"
    "    r2.z = r5.z*-r2.z + r5.z;\n"
    "    r5.z = fmin(r2.z, r5.x);\n"
    "    r8 = select(r8, r4, -r5.wwww < 0.00000f);\n"
    "    r1 = select(r1, r3, -r5.wwww < 0.00000f);\n"
    "    r2.z = r2.z*-r5.x + r2.z;\n"
    "    r8 = select(r8, r7, -r5.zzzz < 0.00000f);\n"
    "    r8 = select(r8, c1.yzzy, -r2.zzzz < 0.00000f);\n"
    "    r1 = select(r1, r4, -r5.zzzz < 0.00000f);\n"
    "    r1 = select(r1, c1.yzzy, -r2.zzzz < 0.00000f);\n"
    "    r2.x = float(c1.z >= r2.x);\n"
    "    r2.y = r2.x;\n"
    "    r2.z = r5.y;\n"
    "    r2.yz = float2(-r2.yz >= c1.zz);\n"
    "    r2.xy = fmin(r2.zz, r2.xy);\n"
    "    r1 = mix(r8, r1, r9.wwww);\n"
    "    r6 = select(r0, r6, -r2.wwww < 0.00000f);\n"
    "    r6 = select(r6, r1, -r9.yyyy < 0.00000f);\n"
    "    r6 = select(r6, r0, -r2.xxxx < 0.00000f);\n"
    "    r2.x = r2.y*-hg_Params[0].x;\n"
    "    r6 = select(r6, r7, r2.xxxx < 0.00000f);\n"
    "    r2.x = fmin(r2.y, r9.x);\n"
    "    output.color0 = select(r6, r0, -r2.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B289D4F0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcCircleBlur2");
}

void sub_1B289D500(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B289D740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B289D7A8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B289D7A0);
}

_QWORD *HgcCircleBlur2::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcCircleBlur2 [hgc1]");
}

uint64_t HgcCircleBlur2::BindTexture(HgcCircleBlur2 *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  uint64_t result;
  int v7;

  switch(a3)
  {
    case 0:
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 0;
      goto LABEL_8;
    case 1:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 1;
      goto LABEL_8;
    case 2:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 2;
      goto LABEL_8;
    case 3:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 3, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 3;
      goto LABEL_8;
    case 4:
      (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 4, 0);
      (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
      v4 = a2;
      v5 = 4;
LABEL_8:
      HGHandler::TexCoord(v4, v5, 0, 0, 0);
      v7 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
      result = 0;
      if (!v7)
      {
        (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
        result = 0;
      }
      break;
    default:
      result = 0xFFFFFFFFLL;
      break;
  }
  return result;
}

uint64_t HgcCircleBlur2::Bind(HgcCircleBlur2 *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 5, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HgcCircleBlur2 *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcCircleBlur2::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  int32x2_t v6;
  int32x2_t v7;
  uint64_t v8;
  int32x2_t v9;
  uint64_t v10;
  int32x2_t v11;
  uint64_t v12;
  int32x2_t v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x8_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  int8x8_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int32x4_t v94;
  int8x16_t v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  float32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  float32x4_t v109;
  int8x16_t v110;
  int32x4_t v111;
  int8x16_t v112;
  float32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    v6 = a2[18];
    v7 = a2[16];
    v8 = a2[17].i32[0];
    v9 = a2[14];
    v10 = a2[15].i32[0];
    v11 = a2[12];
    v12 = a2[13].i32[0];
    v13 = a2[10];
    v14 = a2[11].i32[0];
    *(float32x2_t *)v15.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v15.i64[1] = 0x3F80000000000000;
    v16 = 16 * a2[3].i32[0];
    v17 = 16 * a2[19].i32[0];
    v18 = 16 * v10;
    v19 = 16 * v14;
    do
    {
      if (v4 >= 1)
      {
        v20 = 0;
        v21 = v15;
        do
        {
          v22 = *(_QWORD *)(a1 + 408);
          v23 = *(float32x4_t *)(v22 + 64);
          v24 = *(int8x16_t *)(v22 + 80);
          v25.i64[0] = v21.i64[0];
          v25.i64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
          *(int8x8_t *)v26.f32 = vqtbl1_s8(v25, *(int8x8_t *)v24.i8);
          v27 = (int8x8_t)vextq_s8(v24, v24, 8uLL).u64[0];
          *(int8x8_t *)&v26.u32[2] = vqtbl1_s8(v25, v27);
          v28 = vmulq_f32(*(float32x4_t *)(v22 + 48), v26);
          v29 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL), vaddq_f32(v28, (float32x4_t)vrev64q_s32((int32x4_t)v28)));
          v30 = vmulq_f32(v26, *(float32x4_t *)(v22 + 32));
          v31 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), vaddq_f32(v30, (float32x4_t)vrev64q_s32((int32x4_t)v30)));
          v32 = *(int8x16_t *)(v22 + 96);
          v33 = *(float32x4_t *)(v22 + 112);
          v34 = (float32x4_t)vbslq_s8(v32, v31, v29);
          v35 = vmulq_f32(v34, v34);
          v36 = vaddq_f32(v35, (float32x4_t)vrev64q_s32((int32x4_t)v35));
          v37 = vminq_f32(vrsqrteq_f32(v36), v23);
          v38 = vminq_f32(vmulq_f32(v37, vrsqrtsq_f32(vmulq_f32(v37, v36), v37)), v23);
          v39 = (int32x4_t)vsubq_f32(v33, vmulq_f32(*(float32x4_t *)(v22 + 16), vmulq_f32(vminq_f32(vmulq_f32(v38, vrsqrtsq_f32(vmulq_f32(v38, v36), v38)), v23), v36)));
          v40 = (float32x4_t)vbslq_s8(v32, (int8x16_t)v39, (int8x16_t)vmulq_f32(v33, (float32x4_t)vrev64q_s32(v39)));
          v41 = vabsq_f32((float32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL));
          v42 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
          v43 = (int8x16_t)vsubq_f32(v42, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v42, v41), (int8x16_t)v33, (int8x16_t)0));
          v42.i64[0] = vextq_s8(v43, v43, 8uLL).u64[0];
          v44.i64[0] = v40.i64[0];
          v44.i64[1] = v43.i64[1];
          v46 = *(int8x16_t *)(v22 + 128);
          v45 = *(float32x4_t *)(v22 + 144);
          v47 = vandq_s8(vextq_s8((int8x16_t)v15, v44, 0xCuLL), v46);
          *(int8x8_t *)v42.f32 = veor_s8((int8x8_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL), *(int8x8_t *)v42.f32);
          v48 = veorq_s8(v47, v44);
          v49 = (float32x4_t)vextq_s8(v48, (int8x16_t)v40, 8uLL);
          v50 = vext_s8(*(int8x8_t *)v42.f32, *(int8x8_t *)v40.f32, 4uLL);
          *(int8x8_t *)v42.f32 = vext_s8(*(int8x8_t *)v40.f32, *(int8x8_t *)v42.f32, 4uLL);
          v40.i64[1] = v48.i64[1];
          v51 = (int8x16_t)vsubq_f32(v49, v45);
          *(int8x8_t *)&v42.u32[2] = v50;
          v52 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 0);
          v53 = *(int8x16_t *)(v22 + 176);
          v51.i64[1] = vsubq_f32((float32x4_t)vextq_s8(v51, v51, 4uLL), v45).i64[1];
          v54 = (float32x4_t)vbslq_s8(v53, (int8x16_t)vsubq_f32(v40, v42), (int8x16_t)v40);
          v55 = *(float32x4_t *)(v22 + 192);
          v56 = *(int8x16_t *)(v22 + 208);
          v57 = *(int8x16_t *)(*(_QWORD *)&v13 + v20);
          v58 = vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v54, v55));
          v59 = (float32x4_t)vrev64q_s32((int32x4_t)v54);
          v60 = vbslq_s8(v56, vextq_s8(v58, v58, 8uLL), vandq_s8(*(int8x16_t *)(v22 + 160), v51));
          v61 = (float32x4_t)vbslq_s8(v53, vandq_s8((int8x16_t)v55, (int8x16_t)vcgtq_f32(v55, v59)), v60);
          v62 = *(int8x16_t *)(*(_QWORD *)&v11 + v20);
          v63 = vbslq_s8(v53, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL), v61), v60);
          v64 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vmulq_lane_f32((float32x4_t)vextq_s8(*(int8x16_t *)v22, *(int8x16_t *)v22, 8uLL), *(float32x2_t *)v63.i8, 1), v63);
          v65 = *(int8x16_t *)(*(_QWORD *)&v9 + v20);
          v67 = *(int8x16_t *)(v22 + 224);
          v66 = *(float32x4_t *)(v22 + 240);
          v68 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v67, vandq_s8((int8x16_t)v45, (int8x16_t)vcgeq_f32(v59, v55)), (int8x16_t)v54), v64, 2);
          v69 = vandq_s8((int8x16_t)v33, (int8x16_t)vcgeq_f32(v55, v64));
          v70 = (float32x4_t)vbslq_s8(v56, vextq_s8(v69, v69, 8uLL), v63);
          v71 = (float32x4_t)vbslq_s8(v67, v68, (int8x16_t)v54);
          v72 = (int8x16_t)vcgeq_f32(vnegq_f32(v70), v66);
          v69.i64[0] = vextq_s8(v72, v72, 8uLL).u64[0];
          v73 = *(float32x4_t *)(v22 + 272);
          *(int8x8_t *)v70.f32 = vand_s8(*(int8x8_t *)v70.f32, *(int8x8_t *)(v22 + 256));
          *(int8x8_t *)&v70.u32[2] = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), *(int8x8_t *)v69.i8);
          v74 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vmulq_laneq_f32(v70, v71, 3), (int8x16_t)v70);
          v75 = (int8x16_t)vabdq_f32(v52, v45);
          v76 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 0xCuLL), v74, 2);
          v77 = vsubq_f32(v74, vmulq_laneq_f32(v74, v74, 3));
          v74.i64[1] = v77.i64[1];
          v78 = (float32x4_t)vbslq_s8(v32, v76, v75);
          v79 = *(int8x16_t *)(*(_QWORD *)&v7 + v20);
          v80 = (float32x4_t)vbslq_s8(v53, vandq_s8((int8x16_t)v55, (int8x16_t)vcgeq_f32(vnegq_f32(v78), v66)), (int8x16_t)v78);
          v81 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 0);
          v82 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL), v77, 2), (int8x16_t)v74);
          v83 = vandq_s8((int8x16_t)v55, (int8x16_t)vcgeq_f32(vnegq_f32(v80), v66));
          v84 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 3);
          v85 = vmulq_lane_f32(v82, *(float32x2_t *)v83.i8, 1);
          v86 = (float32x4_t)vrev64q_s32((int32x4_t)v71);
          v87.i64[0] = vmulq_laneq_f32((float32x4_t)vextq_s8(v83, (int8x16_t)v15, 4uLL), v85, 2).u64[0];
          *(float32x2_t *)&v82.u32[2] = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL));
          v87.i64[1] = v83.i64[1];
          v88 = (int8x16_t)vcgtq_f32(v81, v66);
          v89 = (int8x16_t)vcgtq_f32(v84, v66);
          v90 = vbslq_s8(v89, v79, vbslq_s8(v88, v65, v62));
          v91 = vbslq_s8(v89, v65, vbslq_s8(v88, v62, v57));
          v92 = *(int8x16_t *)(*(_QWORD *)&v6 + v20);
          v93 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1), v66);
          v94 = (int32x4_t)vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32((float32x4_t)vorrq_s8(v46, *(int8x16_t *)v22), v66));
          *(int8x8_t *)v24.i8 = vqtbl1_s8((int8x16_t)v82, *(int8x8_t *)v24.i8);
          v24.u64[1] = (unint64_t)vand_s8(vqtbl1_s8((int8x16_t)v82, v27), (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v22 + 288), *(int8x16_t *)(v22 + 288), 8uLL));
          v95 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v85, (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(vnegq_f32(v87), v66), (int8x16_t)v55, (int8x16_t)0)), 2), v66);
          v96 = (float32x4_t)vbslq_s8(v67, vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(v66, v86)), v24);
          v97 = vbslq_s8(v32, (int8x16_t)v94, (int8x16_t)vminq_f32(v96, (float32x4_t)vrev64q_s32(v94)));
          v98 = (float32x4_t)vbslq_s8(v95, (int8x16_t)v73, vbslq_s8(v93, v92, v90));
          v96.i64[1] = vandq_s8(*(int8x16_t *)&v33, (int8x16_t)vcgeq_f32(vnegq_f32(v96), v66)).i64[1];
          v99 = (float32x4_t)vbslq_s8(v95, (int8x16_t)v73, vbslq_s8(v93, v79, v91));
          v100 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v97, v97, 8uLL), v96), (int8x16_t)v96);
          v101 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v22 + 304), vandq_s8((int8x16_t)v33, (int8x16_t)vcgeq_f32(vnegq_f32(v100), v66)), (int8x16_t)v100);
          v101.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v101), v101).i64[1];
          v102 = (float32x4_t)vbslq_s8(v56, vandq_s8((int8x16_t)v55, (int8x16_t)vceqq_f32(v23, v71)), (int8x16_t)v71);
          v97.i64[1] = vminq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)&v100), v100).i64[1];
          v103 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vrev64q_s32((int32x4_t)vminq_f32(v101, v102)), (int8x16_t)v101);
          v104 = (int8x16_t)vsubq_f32(v55, v102);
          v105 = (float32x4_t)vbslq_s8(v67, vextq_s8(v104, v104, 8uLL), v97);
          v106 = (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32(v99, v98), v105, 3), v98);
          v107 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), v66);
          v108 = vbslq_s8(v107, v65, v62);
          v109 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vsubq_f32(v103, vmulq_f32(v102, v103)), (int8x16_t)v71);
          v110 = vbslq_s8(v107, v62, v57);
          v111 = (int32x4_t)vbslq_s8(v56, (int8x16_t)vminq_f32(v109, (float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL)), (int8x16_t)v103);
          v112 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v111, 3), v66);
          v113 = (float32x4_t)vbslq_s8(v56, (int8x16_t)vsubq_f32(v109, vmulq_n_f32(v109, *(float *)v111.i32)), (int8x16_t)v71);
          v114 = vbslq_s8(v112, v65, v110);
          v115 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v111, 2), v66);
          v109.i64[0] = vandq_s8((int8x16_t)v73, (int8x16_t)vcgeq_f32(v66, v113)).u64[0];
          v116 = vbslq_s8(v115, v92, vbslq_s8(v112, v79, v108));
          v102.i64[0] = v109.i64[0];
          v102.i64[1] = vdupq_laneq_s64((int64x2_t)v113, 1).u64[0];
          v117 = vbslq_s8(v115, v79, v114);
          v109.i64[1] = v113.i64[1];
          v118 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2), v66);
          v119 = (float32x4_t)vbslq_s8(v56, vextq_s8((int8x16_t)v111, (int8x16_t)v111, 0xCuLL), vbslq_s8(v53, (int8x16_t)vrev64q_s32((int32x4_t)v102), (int8x16_t)v109));
          v120 = (float32x4_t)vbslq_s8(v118, (int8x16_t)v73, v116);
          v121 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v22 + 320), vandq_s8((int8x16_t)v55, (int8x16_t)vcgeq_f32(vnegq_f32(v119), v73)), (int8x16_t)v119);
          v55.i64[0] = vminq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 2), v121).u64[0];
          v55.i64[1] = v121.i64[1];
          v32.i64[0] = vbslq_s8(v32, (int8x16_t)vmulq_lane_f32(vnegq_f32(*(float32x4_t *)v22), *(float32x2_t *)v55.f32, 1), (int8x16_t)v55).u64[0];
          *(int8x16_t *)(*(_QWORD *)&v5 + v20) = vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 0)), v66), v57, vbslq_s8((int8x16_t)vcgtq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 0)), v92, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 0), v66), v57, vbslq_s8(
                                                         (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1), v66), (int8x16_t)vaddq_f32(vmulq_laneq_f32(vsubq_f32((float32x4_t)vbslq_s8(v118, (int8x16_t)v73, v117), v120), v105, 3), v120), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 3), v66),
                                                           v106,
                                                           v57)))));
          v21 = vaddq_f32(v21, (float32x4_t)xmmword_1B304F230);
          v20 += 16;
        }
        while (16 * v4 != v20);
      }
      v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v16;
      *(_QWORD *)&v6 += v17;
      *(_QWORD *)&v7 += 16 * v8;
      *(_QWORD *)&v9 += v18;
      *(_QWORD *)&v11 += 16 * v12;
      *(_QWORD *)&v13 += v19;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcCircleBlur2::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 5)
    return 0;
  else
    return a4;
}

uint64_t HgcCircleBlur2::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 5)
    return 0;
  else
    return a4;
}

void HgcCircleBlur2::HgcCircleBlur2(HgcCircleBlur2 *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64ED618;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = xmmword_1B3052850;
  *(_OWORD *)(v3 + 80) = xmmword_1B30517F0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 112) = xmmword_1B3052860;
  *(_OWORD *)(v3 + 128) = xmmword_1B3052870;
  *(_OWORD *)(v3 + 144) = xmmword_1B3052880;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051A80;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3052890;
  *(_OWORD *)(v3 + 208) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050F70;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_OWORD *)(v3 + 256) = xmmword_1B3051470;
  *(_OWORD *)(v3 + 272) = xmmword_1B304FAB0;
  *(_QWORD *)&v4 = 0xFFFFFFFFLL;
  *((_QWORD *)&v4 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(v3 + 288) = xmmword_1B3051020;
  *(_OWORD *)(v3 + 304) = v4;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 320) = xmmword_1B30528A0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B289E110(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcCircleBlur2::~HgcCircleBlur2(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64ED618;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcCircleBlur2::~HgcCircleBlur2(this);
  HGObject::operator delete(v1);
}

uint64_t HgcCircleBlur2::SetParameter(HgcCircleBlur2 *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  __n128 *v11;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_23;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_23;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == a3.n128_f32[0]
        && v10[2].n128_f32[1] == a4
        && v10[2].n128_f32[2] == a6
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u32[0] = a3.n128_u32[0];
      v10[2].n128_f32[1] = a4;
      v10[2].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v10[2].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[21] = a3;
      goto LABEL_23;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == a3.n128_f32[0]
        && v11[3].n128_f32[1] == a4
        && v11[3].n128_f32[2] == a6
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u32[0] = a3.n128_u32[0];
      v11[3].n128_f32[1] = a4;
      v11[3].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[22] = a3;
LABEL_23:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcCircleBlur2::GetParameter(HgcCircleBlur2 *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_6;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_6;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[84];
      a3[1] = v6[85];
      a3[2] = v6[86];
      v4 = v6 + 87;
      goto LABEL_6;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[88];
      a3[1] = v7[89];
      a3[2] = v7[90];
      v4 = v7 + 91;
LABEL_6:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcDesaturate::GetProgram(HgcDesaturate *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002ec\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz*half3(hg_Params[1].xyz);\n"
             "    r2.xyz = r1.xxx + r1.yyy;\n"
             "    r2.xyz = r2.xyz + r1.zzz;\n"
             "    output.color0.xyz = mix(float3(r0.xyz), float3(r2.xyz), hg_Params[0].xyz);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c13c1f6f:a8d34f6a:c6f98e80:605f6713\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0002:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002c8\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = r0.xyz*hg_Params[1].xyz;\n"
             "    r2.xyz = r1.xxx + r1.yyy;\n"
             "    r2.xyz = r2.xyz + r1.zzz;\n"
             "    output.color0.xyz = mix(r0.xyz, r2.xyz, hg_Params[0].xyz);\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d12e2948:f98c727c:a06757c8:adf771b8\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0002:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002c1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = r0.xyz*hg_ProgramLocal1.xyz;\n"
           "    r2.xyz = r1.xxx + r1.yyy;\n"
           "    r2.xyz = r2.xyz + r1.zzz;\n"
           "    gl_FragColor.xyz = mix(r0.xyz, r2.xyz, hg_ProgramLocal0.xyz);\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=e6fa976f:92b63afd:66546278:4f57367f\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0002:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcDesaturate::InitProgramDescriptor(HgcDesaturate *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcDesaturate_hgc_visible", "//Metal1.0     \n//LEN=000000019f\n[[ visible ]] FragmentOut HgcDesaturate_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = r0.xyz*hg_Params[1].xyz;\n"
    "    r2.xyz = r1.xxx + r1.yyy;\n"
    "    r2.xyz = r2.xyz + r1.zzz;\n"
    "    output.color0.xyz = mix(r0.xyz, r2.xyz, hg_Params[0].xyz);\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B289E48C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcDesaturate");
}

void sub_1B289E49C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B289E59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B289E5DC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B289E5D4);
}

_QWORD *HgcDesaturate::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcDesaturate [hgc1]");
}

uint64_t HgcDesaturate::BindTexture(HgcDesaturate *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcDesaturate::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcDesaturate::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  int32x4_t v30;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v27) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 32);
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v13 = *(float32x4_t *)(v6 + v10);
          v14 = *(float32x4_t *)(v6 + v10 + 16);
          v15 = *(_QWORD *)(a1 + 408);
          v16 = *(float32x4_t *)(v15 + 16);
          v17 = (int32x4_t)vmulq_f32(v11, v16);
          v18 = (int32x4_t)vmulq_f32(v12, v16);
          v19 = (int32x4_t)vmulq_f32(v13, v16);
          v20 = (int32x4_t)vmulq_f32(v14, v16);
          v21 = *(int8x16_t *)(v15 + 32);
          v22 = vbslq_s8(v21, (int8x16_t)v11, (int8x16_t)vaddq_f32(v11, vmulq_f32(*(float32x4_t *)v15, vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v17, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.i8, 1))), v11))));
          v23 = vbslq_s8(v21, (int8x16_t)v12, (int8x16_t)vaddq_f32(v12, vmulq_f32(*(float32x4_t *)v15, vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v18, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.i8, 1))), v12))));
          v24 = vbslq_s8(v21, (int8x16_t)v13, (int8x16_t)vaddq_f32(v13, vmulq_f32(*(float32x4_t *)v15, vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v19, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.i8, 1))), v13))));
          v25 = vbslq_s8(v21, (int8x16_t)v14, (int8x16_t)vaddq_f32(v14, vmulq_f32(*(float32x4_t *)v15, vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v20, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1))), v14))));
          v26 = (int8x16_t *)(v5 + v10);
          v26[-2] = v22;
          v26[-1] = v23;
          *v26 = v24;
          v26[1] = v25;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v27) = -v9;
      }
      if ((int)v27 < v4)
      {
        v27 = v27;
        do
        {
          v28 = *(float32x4_t *)(v6 + 16 * v27);
          v29 = *(_QWORD *)(a1 + 408);
          v30 = (int32x4_t)vmulq_f32(v28, *(float32x4_t *)(v29 + 16));
          *(int8x16_t *)(v5 + 16 * v27++) = vbslq_s8(*(int8x16_t *)(v29 + 32), (int8x16_t)v28, (int8x16_t)vaddq_f32(v28, vmulq_f32(*(float32x4_t *)v29, vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(v30, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 1))), v28))));
        }
        while (v27 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcDesaturate::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcDesaturate::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcDesaturate::HgcDesaturate(HgcDesaturate *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64ED880;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = xmmword_1B3050F70;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B289E964(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcDesaturate::~HgcDesaturate(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64ED880;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcDesaturate::~HgcDesaturate(this);
  HGObject::operator delete(v1);
}

uint64_t HgcDesaturate::SetParameter(HgcDesaturate *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;

  if ((_DWORD)a2 == 1)
  {
    v9 = *((_QWORD *)this + 51);
    if (*(float *)(v9 + 16) != a3.n128_f32[0]
      || *(float *)(v9 + 20) != a4
      || *(float *)(v9 + 24) != a5
      || *(float *)(v9 + 28) != a6)
    {
      *(_DWORD *)(v9 + 16) = a3.n128_u32[0];
      *(float *)(v9 + 20) = a4;
      *(float *)(v9 + 24) = a5;
      *(float *)(v9 + 28) = a6;
      goto LABEL_13;
    }
    return 0;
  }
  if (!(_DWORD)a2)
  {
    v7 = *((_QWORD *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a3.n128_f32[0]
      || *(float *)(v7 + 8) != a3.n128_f32[0]
      || *(float *)(v7 + 12) != 0.0)
    {
      v8 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v8.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      *(int32x4_t *)v7 = v8;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v7 + 48) = a3;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcDesaturate::GetParameter(HgcDesaturate *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[4];
    a3[1] = v5[5];
    a3[2] = v5[6];
    v4 = v5 + 7;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[12];
    a3[1] = v3[13];
    a3[2] = v3[14];
    v4 = v3 + 15;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcGamma::GetProgram(HgcGamma *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002cd\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1 = pow(r0, half4(hg_Params[0]));\n"
             "    r0 = select(r1, r0, r0 < 0.00000h);\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=d445bf68:80be2210:5727272c:2d70df80\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002b9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1 = pow(r0, hg_Params[0]);\n"
             "    r0 = select(r1, r0, r0 < 0.00000f);\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=b121f8af:89f66aab:78391152:b6d2352f\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002e0\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1 = pow(r0, hg_ProgramLocal0);\n"
           "    r0 = vec4(r0.x < 0.00000 ? r0.x : r1.x, r0.y < 0.00000 ? r0.y : r1.y, r0.z < 0.00000 ? r0.z : r1.z, r0.w "
           "< 0.00000 ? r0.w : r1.w);\n"
           "    r0.xyz = r0.xyz*r0.www;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=edf8dcf2:63809fb8:16f51e90:99a1d9d8\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcGamma::InitProgramDescriptor(HgcGamma *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGamma_hgc_visible", "//Metal1.0     \n//LEN=000000018b\n[[ visible ]] FragmentOut HgcGamma_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1 = pow(r0, hg_Params[0]);\n"
    "    r0 = select(r1, r0, r0 < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B289EBDC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGamma");
}

void sub_1B289EBEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B289ECEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B289ED2C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B289ED24);
}

_QWORD *HgcGamma::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGamma [hgc1]");
}

uint64_t HgcGamma::BindTexture(HgcGamma *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcGamma::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcGamma::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  int8x16_t *v71;
  unsigned int v72;
  float32x4_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v72 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v14);
          v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
          v17 = *(float32x4_t *)(v13 + 32);
          v18 = *(int8x16_t *)(v13 + 48);
          v19 = vmulq_f32(vrecpeq_f32(v15), v17);
          v20 = vmulq_f32(vrecpeq_f32(v16), v17);
          v21 = vandq_s8(v18, (int8x16_t)vmulq_f32(v19, vrecpsq_f32(v19, v15)));
          v22 = vandq_s8(v18, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
          v23 = *(int8x16_t *)(v13 + 64);
          v24 = *(int8x16_t *)(v13 + 80);
          v25 = vmulq_f32(v11, (float32x4_t)vorrq_s8(v21, v23));
          v26 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v22, v23));
          v27 = vandq_s8(v24, (int8x16_t)v25);
          v28 = vandq_s8(v24, (int8x16_t)v26);
          v29 = *(float32x4_t *)(v13 + 96);
          v30 = *(float32x4_t *)(v13 + 112);
          v31 = (float32x4_t)vorrq_s8(v27, (int8x16_t)v29);
          v32 = (float32x4_t)vorrq_s8(v28, (int8x16_t)v29);
          v33 = *(int8x16_t *)(v13 + 128);
          v34 = *(float32x4_t *)(v13 + 144);
          v35 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v25, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v30, v25)));
          v36 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v26, 0x17uLL)), (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v30, v26)));
          v37 = *(float32x4_t *)(v13 + 160);
          v38 = *(float32x4_t *)(v13 + 176);
          v39 = vsubq_f32(v35, v34);
          v40 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v31, v37));
          v41 = (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v32, v37));
          v42 = vsubq_f32(v36, v34);
          v43 = vsubq_f32(vsubq_f32(v31, v29), vmulq_f32(vmulq_f32(v38, v40), v31));
          v44 = vsubq_f32(vsubq_f32(v32, v29), vmulq_f32(vmulq_f32(v38, v41), v32));
          v45 = *(float32x4_t *)(v13 + 192);
          v46 = *(float32x4_t *)(v13 + 208);
          v47 = *(float32x4_t *)(v13 + 224);
          v48 = *(float32x4_t *)(v13 + 240);
          v49 = vmulq_f32(*(float32x4_t *)v13, vaddq_f32(vaddq_f32(v42, v41), vmulq_f32(v44, vaddq_f32(vaddq_f32(v47, vmulq_f32(v48, v44)), vmulq_f32(vmulq_f32(v44, v44), vaddq_f32(v45, vmulq_f32(v46, v44)))))));
          v50 = *(float32x4_t *)(v13 + 256);
          v51 = *(float32x4_t *)(v13 + 272);
          v52 = vmaxq_f32(vmulq_f32(*(float32x4_t *)v13, vaddq_f32(vaddq_f32(v39, v40), vmulq_f32(v43, vaddq_f32(vaddq_f32(v47, vmulq_f32(v48, v43)), vmulq_f32(vmulq_f32(v43, v43), vaddq_f32(v45, vmulq_f32(v46, v43))))))), v50);
          v53 = vmaxq_f32(v49, v50);
          v54 = vcvtq_f32_s32(vcvtq_s32_f32(v52));
          v55 = vcvtq_f32_s32(vcvtq_s32_f32(v53));
          v56 = vsubq_f32(v54, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v54, v52)));
          v57 = vsubq_f32(v55, (float32x4_t)vandq_s8((int8x16_t)v29, (int8x16_t)vcgtq_f32(v55, v53)));
          v58 = vsubq_f32(v52, v56);
          v59 = vsubq_f32(v53, v57);
          v60 = *(float32x4_t *)(v13 + 288);
          v61 = *(float32x4_t *)(v13 + 304);
          v62 = vmulq_f32(v59, vaddq_f32(v61, vmulq_f32(v59, vaddq_f32(v51, vmulq_f32(v60, v59)))));
          v63 = vaddq_f32(v29, vmulq_f32(v58, vaddq_f32(v61, vmulq_f32(v58, vaddq_f32(v51, vmulq_f32(v60, v58))))));
          v64 = vcvtq_s32_f32(v57);
          v65 = vaddq_f32(v29, v62);
          v66 = *(int32x4_t *)(v13 + 320);
          v67 = *(float32x4_t *)(v13 + 336);
          v68 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v67, v25), (int8x16_t)v25, (int8x16_t)vmulq_f32(v63, (float32x4_t)vshlq_n_s32(vaddq_s32(v66, vcvtq_s32_f32(v56)), 0x17uLL)));
          v69 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v67, v26), (int8x16_t)v26, (int8x16_t)vmulq_f32(v65, (float32x4_t)vshlq_n_s32(vaddq_s32(v66, v64), 0x17uLL)));
          v70 = *(int8x16_t *)(v13 + 352);
          v71 = (int8x16_t *)(v5 + v10);
          v71[-1] = vbslq_s8(v70, (int8x16_t)v68, (int8x16_t)vmulq_laneq_f32(v68, v68, 3));
          *v71 = vbslq_s8(v70, (int8x16_t)v69, (int8x16_t)vmulq_laneq_f32(v69, v69, 3));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v72 = -v9;
      }
      if ((int)v72 < v4)
      {
        v73 = *(float32x4_t *)(v6 + 16 * v72);
        v74 = *(_QWORD *)(a1 + 408);
        v75 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 3), *(float32x4_t *)(v74 + 16));
        v76 = vmulq_f32(vrecpeq_f32(v75), *(float32x4_t *)(v74 + 32));
        v77 = vmulq_f32(v73, (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v74 + 48), (int8x16_t)vmulq_f32(v76, vrecpsq_f32(v76, v75))), *(int8x16_t *)(v74 + 64)));
        v78 = *(float32x4_t *)(v74 + 96);
        v79 = (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v74 + 80), (int8x16_t)v77), (int8x16_t)v78);
        v80 = (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v79, *(float32x4_t *)(v74 + 160)));
        v81 = vsubq_f32(vsubq_f32(v79, v78), vmulq_f32(vmulq_f32(*(float32x4_t *)(v74 + 176), v80), v79));
        v82 = vmaxq_f32(vmulq_f32(*(float32x4_t *)v74, vaddq_f32(vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v77, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v74 + 128), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v74 + 112), v77))), *(float32x4_t *)(v74 + 144)), v80), vmulq_f32(v81, vaddq_f32(vaddq_f32(*(float32x4_t *)(v74 + 224), vmulq_f32(*(float32x4_t *)(v74 + 240), v81)), vmulq_f32(vmulq_f32(v81, v81), vaddq_f32(*(float32x4_t *)(v74 + 192), vmulq_f32(*(float32x4_t *)(v74 + 208), v81))))))),
                *(float32x4_t *)(v74 + 256));
        v83 = vcvtq_f32_s32(vcvtq_s32_f32(v82));
        v84 = vsubq_f32(v83, (float32x4_t)vandq_s8((int8x16_t)v78, (int8x16_t)vcgtq_f32(v83, v82)));
        v85 = vsubq_f32(v82, v84);
        v86 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v74 + 336), v77), (int8x16_t)v77, (int8x16_t)vmulq_f32(vaddq_f32(v78, vmulq_f32(v85, vaddq_f32(*(float32x4_t *)(v74 + 304), vmulq_f32(v85, vaddq_f32(*(float32x4_t *)(v74 + 272), vmulq_f32(*(float32x4_t *)(v74 + 288), v85)))))), (float32x4_t)vshlq_n_s32(vaddq_s32(*(int32x4_t *)(v74 + 320), vcvtq_s32_f32(v84)), 0x17uLL)));
        *(int8x16_t *)(v5 + 16 * v72) = vbslq_s8(*(int8x16_t *)(v74 + 352), (int8x16_t)v86, (int8x16_t)vmulq_laneq_f32(v86, v86, 3));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcGamma::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcGamma::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcGamma::HgcGamma(HgcGamma *this)
{
  _QWORD *v2;
  int32x4_t *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EDAE8;
  v3 = (int32x4_t *)operator new();
  HgcGamma::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B289F280(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGamma::~HgcGamma(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EDAE8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGamma::~HgcGamma(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGamma::SetParameter(HgcGamma *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcGamma::GetParameter(HgcGamma *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

double HgcGamma::State::State(int32x4_t *this)
{
  int32x4_t v6;
  double result;

  *this = 0u;
  this[1] = vdupq_n_s32(0x358637BDu);
  this[2] = vdupq_n_s32(0x3F804020u);
  this[3] = (int32x4_t)xmmword_1B30514E0;
  this[4] = (int32x4_t)xmmword_1B304EFF0;
  this[5] = vdupq_n_s32(0x807FFFFF);
  __asm { FMOV            V0.4S, #1.0 }
  v6.i64[0] = 0x80000000800000;
  v6.i64[1] = 0x80000000800000;
  this[6] = _Q0;
  this[7] = v6;
  this[8] = vdupq_n_s32(0x7F800000u);
  this[9] = vdupq_n_s32(0x42FE0000u);
  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  this[10] = vdupq_n_s32(0x3FB504F3u);
  this[11] = v6;
  this[12] = vdupq_n_s32(0x3F047D53u);
  this[13] = vdupq_n_s32(0xBEA9AC62);
  this[14] = vdupq_n_s32(0x3FB89666u);
  this[15] = vdupq_n_s32(0xBF398D4B);
  this[16] = vdupq_n_s32(0xC2FE0000);
  this[17] = vdupq_n_s32(0x3E6E687Cu);
  this[18] = vdupq_n_s32(0x3D96C2DFu);
  this[19] = vdupq_n_s32(0x3F318D85u);
  _Q0.i64[0] = 0x7F0000007FLL;
  _Q0.i64[1] = 0x7F0000007FLL;
  this[20] = _Q0;
  this[21] = 0u;
  result = 0.0;
  this[22] = (int32x4_t)xmmword_1B3050F70;
  return result;
}

const char *HgcHSVAdjust::GetProgram(HgcHSVAdjust *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000b03\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.9999899864, 9.999999747e-06, 9.999999975e-07, 0.000000000);\n"
             "    const half4 c1 = half4(0.001000000047, 0.000000000, 2.000000000, 4.000000000);\n"
             "    const half4 c2 = half4(0.1666666716, 6.000000000, 0.000000000, 0.000000000);\n"
             "    const half4 c3 = half4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
             "    const half4 c4 = half4(1.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.w = float(r0.w);\n"
             "    r1.xyz = fmax(r0.xxx, r0.yyy);\n"
             "    r1.xyz = fmax(r1.xyz, r0.zzz);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.x = r1.x + c0.y;\n"
             "    r2.x = 1.00000h / r1.x;\n"
             "    r2.yz = r2.xx;\n"
             "    r0.xyz = r0.xyz*r2.xyz;\n"
             "    r2.xyz = fmax(r0.xxx, r0.yyy);\n"
             "    r2.xyz = fmax(r2.xyz, r0.zzz);\n"
             "    r3.x = fmin(r0.x, r0.y);\n"
             "    r3.x = fmin(r3.x, r0.z);\n"
             "    r3.x = r2.x - r3.x;\n"
             "    r4.xyz = half3(r0.xyz >= r2.xyz);\n"
             "    r4.yz = clamp(r4.yz - r4.xx, 0.00000h, 1.00000h);\n"
             "    r4.z = clamp(r4.z - r4.y, 0.00000h, 1.00000h);\n"
             "    r2.x = r2.x + c0.y;\n"
             "    r2.x = r3.x/r2.x;\n"
             "    r0.xyz = r0.yzx - r0.zxy;\n"
             "    r5.xyz = half3(r3.xxx >= c0.zzz);\n"
             "    r5.xyz = c0.www - r5.xyz;\n"
             "    r3.x = r3.x + c1.x;\n"
             "    r0.xyz = r0.xyz/r3.xxx;\n"
             "    r0.xyz = select(c0.www, r0.xyz, r5.xyz < 0.00000h);\n"
             "    r0.xyz = r0.xyz + c1.yzw;\n"
             "    r0 = half4(dot(r0.xyz, r4.xyz));\n"
             "    r0 = r0*c2.xxxx + half4(hg_Params[0].xxxx);\n"
             "    r2.xy = clamp(r2.xy*half2(hg_Params[0].yz), 0.00000h, 1.00000h);\n"
             "    r0 = fract(r0);\n"
             "    r0 = r0*c2.yyyy;\n"
             "    r3.xyz = fract(r0.xyz);\n"
             "    r0 = floor(r0);\n"
             "    r5 = clamp(r0 - c3, 0.00000h, 1.00000h);\n"
             "    r0.xyz = clamp(r0.xyz - c1.www, 0.00000h, 1.00000h);\n"
             "    r4.xyz = -c3.xyy*r2.xxx;\n"
             "    r4.z = r4.z*r3.z;\n"
             "    r6.xyz = c4.xyz*r2.xxx;\n"
             "    r6.x = r6.x*r3.x + r6.y;\n"
             "    r0.xyz = select(r6.xyz, r4.xyz, -r0.xyz < 0.00000h);\n"
             "    r4.xyz = c4.yyz*r2.xxx;\n"
             "    r4.y = r4.y*r3.y;\n"
             "    r0.xyz = select(r4.xyz, r0.xyz, -r5.www < 0.00000h);\n"
             "    r6.xyz = c4.yzx*r2.xxx;\n"
             "    r6.z = r6.z*r3.z + r6.x;\n"
             "    r0.xyz = select(r6.xyz, r0.xyz, -r5.zzz < 0.00000h);\n"
             "    r4.xyz = c4.yzy*r2.xxx;\n"
             "    r4.x = r4.x*r3.x;\n"
             "    r0.xyz = select(r4.xyz, r0.xyz, -r5.yyy < 0.00000h);\n"
             "    r6.xyz = c4.zxy*r2.xxx;\n"
             "    r6.y = r6.y*r3.y + r6.z;\n"
             "    r0.xyz = select(r6.xyz, r0.xyz, -r5.xxx < 0.00000h);\n"
             "    r0.xyz = r0.xyz*r2.yyy + r2.yyy;\n"
             "    output.color0.xyz = float3(r0.xyz)*float3(r1.xyz);\n"
             "    return output;\n"
             "}\n"
             "//MD5=7883c6d5:51db1adb:a231afea:eb60148c\n"
             "//SIG=00400000:00000001:00000001:00000001:0005:0001:0007:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000ae5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.9999899864, 9.999999747e-06, 9.999999975e-07, 0.000000000);\n"
             "    const float4 c1 = float4(0.001000000047, 0.000000000, 2.000000000, 4.000000000);\n"
             "    const float4 c2 = float4(0.1666666716, 6.000000000, 0.000000000, 0.000000000);\n"
             "    const float4 c3 = float4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
             "    const float4 c4 = float4(1.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.w = r0.w;\n"
             "    r1.xyz = fmax(r0.xxx, r0.yyy);\n"
             "    r1.xyz = fmax(r1.xyz, r0.zzz);\n"
             "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
             "    r1.x = r1.x + c0.y;\n"
             "    r2.x = 1.00000f / r1.x;\n"
             "    r2.yz = r2.xx;\n"
             "    r0.xyz = r0.xyz*r2.xyz;\n"
             "    r2.xyz = fmax(r0.xxx, r0.yyy);\n"
             "    r2.xyz = fmax(r2.xyz, r0.zzz);\n"
             "    r3.x = fmin(r0.x, r0.y);\n"
             "    r3.x = fmin(r3.x, r0.z);\n"
             "    r3.x = r2.x - r3.x;\n"
             "    r4.xyz = float3(r0.xyz >= r2.xyz);\n"
             "    r4.yz = clamp(r4.yz - r4.xx, 0.00000f, 1.00000f);\n"
             "    r4.z = clamp(r4.z - r4.y, 0.00000f, 1.00000f);\n"
             "    r2.x = r2.x + c0.y;\n"
             "    r2.x = r3.x/r2.x;\n"
             "    r0.xyz = r0.yzx - r0.zxy;\n"
             "    r5.xyz = float3(r3.xxx >= c0.zzz);\n"
             "    r5.xyz = c0.www - r5.xyz;\n"
             "    r3.x = r3.x + c1.x;\n"
             "    r0.xyz = r0.xyz/r3.xxx;\n"
             "    r0.xyz = select(c0.www, r0.xyz, r5.xyz < 0.00000f);\n"
             "    r0.xyz = r0.xyz + c1.yzw;\n"
             "    r0 = float4(dot(r0.xyz, r4.xyz));\n"
             "    r0 = r0*c2.xxxx + hg_Params[0].xxxx;\n"
             "    r2.xy = clamp(r2.xy*hg_Params[0].yz, 0.00000f, 1.00000f);\n"
             "    r0 = fract(r0);\n"
             "    r0 = r0*c2.yyyy;\n"
             "    r3.xyz = fract(r0.xyz);\n"
             "    r0 = floor(r0);\n"
             "    r5 = clamp(r0 - c3, 0.00000f, 1.00000f);\n"
             "    r0.xyz = clamp(r0.xyz - c1.www, 0.00000f, 1.00000f);\n"
             "    r4.xyz = -c3.xyy*r2.xxx;\n"
             "    r4.z = r4.z*r3.z;\n"
             "    r6.xyz = c4.xyz*r2.xxx;\n"
             "    r6.x = r6.x*r3.x + r6.y;\n"
             "    r0.xyz = select(r6.xyz, r4.xyz, -r0.xyz < 0.00000f);\n"
             "    r4.xyz = c4.yyz*r2.xxx;\n"
             "    r4.y = r4.y*r3.y;\n"
             "    r0.xyz = select(r4.xyz, r0.xyz, -r5.www < 0.00000f);\n"
             "    r6.xyz = c4.yzx*r2.xxx;\n"
             "    r6.z = r6.z*r3.z + r6.x;\n"
             "    r0.xyz = select(r6.xyz, r0.xyz, -r5.zzz < 0.00000f);\n"
             "    r4.xyz = c4.yzy*r2.xxx;\n"
             "    r4.x = r4.x*r3.x;\n"
             "    r0.xyz = select(r4.xyz, r0.xyz, -r5.yyy < 0.00000f);\n"
             "    r6.xyz = c4.zxy*r2.xxx;\n"
             "    r6.y = r6.y*r3.y + r6.z;\n"
             "    r0.xyz = select(r6.xyz, r0.xyz, -r5.xxx < 0.00000f);\n"
             "    r0.xyz = r0.xyz*r2.yyy + r2.yyy;\n"
             "    output.color0.xyz = r0.xyz*r1.xyz;\n"
             "    return output;\n"
             "}\n"
             "//MD5=f5f3fea9:1c4cd307:ff2dd395:182a3704\n"
             "//SIG=00000000:00000001:00000001:00000000:0005:0001:0007:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000c48\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.9999899864, 9.999999747e-06, 9.999999975e-07, 0.000000000);\n"
           "    const mediump vec4 c1 = vec4(0.001000000047, 0.000000000, 2.000000000, 4.000000000);\n"
           "    const mediump vec4 c2 = vec4(0.1666666716, 6.000000000, 0.000000000, 0.000000000);\n"
           "    const mediump vec4 c3 = vec4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
           "    const mediump vec4 c4 = vec4(1.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4, r5, r6;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor.w = r0.w;\n"
           "    r1.xyz = max(r0.xxx, r0.yyy);\n"
           "    r1.xyz = max(r1.xyz, r0.zzz);\n"
           "    r1.xyz = max(r1.xyz, c0.xxx);\n"
           "    r1.x = r1.x + c0.y;\n"
           "    r2.x = 1.00000 / r1.x;\n"
           "    r2.yz = r2.xx;\n"
           "    r0.xyz = r0.xyz*r2.xyz;\n"
           "    r2.xyz = max(r0.xxx, r0.yyy);\n"
           "    r2.xyz = max(r2.xyz, r0.zzz);\n"
           "    r3.x = min(r0.x, r0.y);\n"
           "    r3.x = min(r3.x, r0.z);\n"
           "    r3.x = r2.x - r3.x;\n"
           "    r4.xyz = vec3(greaterThanEqual(r0.xyz, r2.xyz));\n"
           "    r4.yz = clamp(r4.yz - r4.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r4.z = clamp(r4.z - r4.y, 0.00000, 1.00000);\n"
           "    r2.x = r2.x + c0.y;\n"
           "    r2.x = r3.x/r2.x;\n"
           "    r0.xyz = r0.yzx - r0.zxy;\n"
           "    r5.xyz = vec3(greaterThanEqual(r3.xxx, c0.zzz));\n"
           "    r5.xyz = c0.www - r5.xyz;\n"
           "    r3.x = r3.x + c1.x;\n"
           "    r0.xyz = r0.xyz/r3.xxx;\n"
           "    r0.xyz = vec3(r5.x < 0.00000 ? r0.x : c0.w, r5.y < 0.00000 ? r0.y : c0.w, r5.z < 0.00000 ? r0.z : c0.w);\n"
           "    r0.xyz = r0.xyz + c1.yzw;\n"
           "    r0 = vec4(dot(r0.xyz, r4.xyz));\n"
           "    r0 = r0*c2.xxxx + hg_ProgramLocal0.xxxx;\n"
           "    r2.xy = clamp(r2.xy*hg_ProgramLocal0.yz, vec2(0.00000), vec2(1.00000));\n"
           "    r0 = fract(r0);\n"
           "    r0 = r0*c2.yyyy;\n"
           "    r3.xyz = fract(r0.xyz);\n"
           "    r0 = floor(r0);\n"
           "    r5 = clamp(r0 - c3, vec4(0.00000), vec4(1.00000));\n"
           "    r0.xyz = clamp(r0.xyz - c1.www, vec3(0.00000), vec3(1.00000));\n"
           "    r4.xyz = -c3.xyy*r2.xxx;\n"
           "    r4.z = r4.z*r3.z;\n"
           "    r6.xyz = c4.xyz*r2.xxx;\n"
           "    r6.x = r6.x*r3.x + r6.y;\n"
           "    r0.xyz = vec3(-r0.x < 0.00000 ? r4.x : r6.x, -r0.y < 0.00000 ? r4.y : r6.y, -r0.z < 0.00000 ? r4.z : r6.z"
           ");\n"
           "    r4.xyz = c4.yyz*r2.xxx;\n"
           "    r4.y = r4.y*r3.y;\n"
           "    r0.xyz = vec3(-r5.w < 0.00000 ? r0.x : r4.x, -r5.w < 0.00000 ? r0.y : r4.y, -r5.w < 0.00000 ? r0.z : r4.z"
           ");\n"
           "    r6.xyz = c4.yzx*r2.xxx;\n"
           "    r6.z = r6.z*r3.z + r6.x;\n"
           "    r0.xyz = vec3(-r5.z < 0.00000 ? r0.x : r6.x, -r5.z < 0.00000 ? r0.y : r6.y, -r5.z < 0.00000 ? r0.z : r6.z"
           ");\n"
           "    r4.xyz = c4.yzy*r2.xxx;\n"
           "    r4.x = r4.x*r3.x;\n"
           "    r0.xyz = vec3(-r5.y < 0.00000 ? r0.x : r4.x, -r5.y < 0.00000 ? r0.y : r4.y, -r5.y < 0.00000 ? r0.z : r4.z"
           ");\n"
           "    r6.xyz = c4.zxy*r2.xxx;\n"
           "    r6.y = r6.y*r3.y + r6.z;\n"
           "    r0.xyz = vec3(-r5.x < 0.00000 ? r0.x : r6.x, -r5.x < 0.00000 ? r0.y : r6.y, -r5.x < 0.00000 ? r0.z : r6.z"
           ");\n"
           "    r0.xyz = r0.xyz*r2.yyy + r2.yyy;\n"
           "    gl_FragColor.xyz = r0.xyz*r1.xyz;\n"
           "}\n"
           "//MD5=f7ef366c:8b7c85f0:e967084d:9605452e\n"
           "//SIG=00000000:00000001:00000001:00000000:0005:0001:0007:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcHSVAdjust::InitProgramDescriptor(HgcHSVAdjust *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcHSVAdjust_hgc_visible", "//Metal1.0     \n//LEN=00000009bb\n[[ visible ]] FragmentOut HgcHSVAdjust_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.9999899864, 9.999999747e-06, 9.999999975e-07, 0.000000000);\n"
    "    const float4 c1 = float4(0.001000000047, 0.000000000, 2.000000000, 4.000000000);\n"
    "    const float4 c2 = float4(0.1666666716, 6.000000000, 0.000000000, 0.000000000);\n"
    "    const float4 c3 = float4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
    "    const float4 c4 = float4(1.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    output.color0.w = r0.w;\n"
    "    r1.xyz = fmax(r0.xxx, r0.yyy);\n"
    "    r1.xyz = fmax(r1.xyz, r0.zzz);\n"
    "    r1.xyz = fmax(r1.xyz, c0.xxx);\n"
    "    r1.x = r1.x + c0.y;\n"
    "    r2.x = 1.00000f / r1.x;\n"
    "    r2.yz = r2.xx;\n"
    "    r0.xyz = r0.xyz*r2.xyz;\n"
    "    r2.xyz = fmax(r0.xxx, r0.yyy);\n"
    "    r2.xyz = fmax(r2.xyz, r0.zzz);\n"
    "    r3.x = fmin(r0.x, r0.y);\n"
    "    r3.x = fmin(r3.x, r0.z);\n"
    "    r3.x = r2.x - r3.x;\n"
    "    r4.xyz = float3(r0.xyz >= r2.xyz);\n"
    "    r4.yz = clamp(r4.yz - r4.xx, 0.00000f, 1.00000f);\n"
    "    r4.z = clamp(r4.z - r4.y, 0.00000f, 1.00000f);\n"
    "    r2.x = r2.x + c0.y;\n"
    "    r2.x = r3.x/r2.x;\n"
    "    r0.xyz = r0.yzx - r0.zxy;\n"
    "    r5.xyz = float3(r3.xxx >= c0.zzz);\n"
    "    r5.xyz = c0.www - r5.xyz;\n"
    "    r3.x = r3.x + c1.x;\n"
    "    r0.xyz = r0.xyz/r3.xxx;\n"
    "    r0.xyz = select(c0.www, r0.xyz, r5.xyz < 0.00000f);\n"
    "    r0.xyz = r0.xyz + c1.yzw;\n"
    "    r0 = float4(dot(r0.xyz, r4.xyz));\n"
    "    r0 = r0*c2.xxxx + hg_Params[0].xxxx;\n"
    "    r2.xy = clamp(r2.xy*hg_Params[0].yz, 0.00000f, 1.00000f);\n"
    "    r0 = fract(r0);\n"
    "    r0 = r0*c2.yyyy;\n"
    "    r3.xyz = fract(r0.xyz);\n"
    "    r0 = floor(r0);\n"
    "    r5 = clamp(r0 - c3, 0.00000f, 1.00000f);\n"
    "    r0.xyz = clamp(r0.xyz - c1.www, 0.00000f, 1.00000f);\n"
    "    r4.xyz = -c3.xyy*r2.xxx;\n"
    "    r4.z = r4.z*r3.z;\n"
    "    r6.xyz = c4.xyz*r2.xxx;\n"
    "    r6.x = r6.x*r3.x + r6.y;\n"
    "    r0.xyz = select(r6.xyz, r4.xyz, -r0.xyz < 0.00000f);\n"
    "    r4.xyz = c4.yyz*r2.xxx;\n"
    "    r4.y = r4.y*r3.y;\n"
    "    r0.xyz = select(r4.xyz, r0.xyz, -r5.www < 0.00000f);\n"
    "    r6.xyz = c4.yzx*r2.xxx;\n"
    "    r6.z = r6.z*r3.z + r6.x;\n"
    "    r0.xyz = select(r6.xyz, r0.xyz, -r5.zzz < 0.00000f);\n"
    "    r4.xyz = c4.yzy*r2.xxx;\n"
    "    r4.x = r4.x*r3.x;\n"
    "    r0.xyz = select(r4.xyz, r0.xyz, -r5.yyy < 0.00000f);\n"
    "    r6.xyz = c4.zxy*r2.xxx;\n"
    "    r6.y = r6.y*r3.y + r6.z;\n"
    "    r0.xyz = select(r6.xyz, r0.xyz, -r5.xxx < 0.00000f);\n"
    "    r0.xyz = r0.xyz*r2.yyy + r2.yyy;\n"
    "    output.color0.xyz = r0.xyz*r1.xyz;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B289F560()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcHSVAdjust");
}

void sub_1B289F570(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B289F670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B289F6B0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B289F6A8);
}

_QWORD *HgcHSVAdjust::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcHSVAdjust [hgc1]");
}

uint64_t HgcHSVAdjust::BindTexture(HgcHSVAdjust *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcHSVAdjust::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcHSVAdjust::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int8x16_t v42;
  float32x2_t v43;
  int8x8_t v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  int8x8_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t *v119;
  unsigned int v120;
  float32x4_t v121;
  uint64_t v122;
  float32x4_t v123;
  int8x16_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  int8x16_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x2_t v144;
  int8x16_t v145;
  float32x4_t v146;
  int8x16_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x2_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  int32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  int8x16_t v162;
  float32x4_t v163;
  int8x16_t v164;
  float32x4_t v165;
  int8x16_t v166;
  float32x4_t v167;
  int8x16_t v168;
  float32x4_t v169;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v120 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vmaxq_f32(vmaxq_f32(vmaxq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2)), v14);
          v16 = vmaxq_f32(vmaxq_f32(vmaxq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2)), v14);
          v18 = *(float32x4_t *)(v13 + 32);
          v17 = *(int8x16_t *)(v13 + 48);
          v19 = (float32x4_t)vbslq_s8(v17, (int8x16_t)vaddq_f32(v15, v18), (int8x16_t)v15);
          v20 = (float32x4_t)vbslq_s8(v17, (int8x16_t)vaddq_f32(v16, v18), (int8x16_t)v16);
          v21 = *(float32x4_t *)(v13 + 64);
          v22 = *(float32x4_t *)(v13 + 80);
          v24 = *(float32x4_t *)(v13 + 96);
          v23 = *(float32x4_t *)(v13 + 112);
          v25 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v19), v21), v22), v24);
          v26 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v20), v21), v22), v24);
          v27 = (int8x16_t)vmulq_f32(v25, vrecpsq_f32(v19, v25));
          v28 = (int8x16_t)vmulq_f32(v26, vrecpsq_f32(v20, v26));
          v29 = vmulq_f32(v11, (float32x4_t)vbslq_s8(v17, v27, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v27.i8, 0)));
          v30 = vmulq_f32(v12, (float32x4_t)vbslq_s8(v17, v28, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v28.i8, 0)));
          v31 = vmaxq_f32(vmaxq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2));
          v32 = vmaxq_f32(vmaxq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2));
          v33 = vsubq_f32(v31, vminq_f32(vminq_f32(v29, (float32x4_t)vrev64q_s32((int32x4_t)v29)), (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)));
          v34 = vsubq_f32(v32, vminq_f32(vminq_f32(v30, (float32x4_t)vrev64q_s32((int32x4_t)v30)), (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL)));
          v35 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgeq_f32(v29, v31));
          v36 = (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgeq_f32(v30, v32));
          v37 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v35, (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0)), v22), v23));
          v38 = (float32x4_t)vbslq_s8(v17, (int8x16_t)v36, (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 0)), v22), v23));
          v39 = (float32x4_t)vbslq_s8(v17, (int8x16_t)vaddq_f32(v18, v31), (int8x16_t)v31);
          v40 = (float32x4_t)vbslq_s8(v17, (int8x16_t)vaddq_f32(v18, v32), (int8x16_t)v32);
          v41 = *(float32x4_t *)(v13 + 128);
          v42 = *(int8x16_t *)(v13 + 144);
          v43 = (float32x2_t)vqtbl1_s8((int8x16_t)v29, *(int8x8_t *)v41.f32);
          v44 = (int8x8_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
          v45 = (float32x2_t)vqtbl1_s8((int8x16_t)v29, v44);
          *(int8x8_t *)v41.f32 = vqtbl1_s8((int8x16_t)v30, *(int8x8_t *)v41.f32);
          v46 = (float32x2_t)vqtbl1_s8((int8x16_t)v30, v44);
          v47 = (float32x2_t)vqtbl1_s8((int8x16_t)v29, *(int8x8_t *)v42.i8);
          v48 = (int8x8_t)vextq_s8(v42, v42, 8uLL).u64[0];
          *(int8x8_t *)v29.f32 = vqtbl1_s8((int8x16_t)v29, v48);
          *(int8x8_t *)v42.i8 = vqtbl1_s8((int8x16_t)v30, *(int8x8_t *)v42.i8);
          *(int8x8_t *)v30.f32 = vqtbl1_s8((int8x16_t)v30, v48);
          *(float32x2_t *)v49.f32 = vsub_f32(v43, v47);
          v50 = vminq_f32(vmaxq_f32(vmulq_f32(v21, vrecpeq_f32(v39)), v22), v24);
          v51 = vminq_f32(vmaxq_f32(vmulq_f32(v21, vrecpeq_f32(v40)), v22), v24);
          *(float32x2_t *)&v49.u32[2] = vsub_f32(v45, *(float32x2_t *)v29.f32);
          *(float32x2_t *)v41.f32 = vsub_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v42.i8);
          *(float32x2_t *)&v41.u32[2] = vsub_f32(v46, *(float32x2_t *)v30.f32);
          v53 = *(float32x4_t *)(v13 + 160);
          v52 = *(float32x4_t *)(v13 + 176);
          v54 = vsubq_f32(v52, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0), v53)));
          v55 = vsubq_f32(v52, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0), v53)));
          v56 = *(float32x4_t *)(v13 + 192);
          v57 = *(float32x4_t *)(v13 + 208);
          v58 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(v33, v56), 0);
          v59 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(v34, v56), 0);
          v37.i64[1] = vminq_f32(vmaxq_f32(vsubq_f32(v37, (float32x4_t)vextq_s8(*(int8x16_t *)&v37, *(int8x16_t *)&v37, 0xCuLL)), v22), v23).i64[1];
          v38.i64[1] = vminq_f32(vmaxq_f32(vsubq_f32(v38, (float32x4_t)vextq_s8(*(int8x16_t *)&v38, *(int8x16_t *)&v38, 0xCuLL)), v22), v23).i64[1];
          v60 = vminq_f32(vmaxq_f32(vmulq_f32(v21, vrecpeq_f32(v58)), v57), v24);
          v61 = vminq_f32(vmaxq_f32(vmulq_f32(v21, vrecpeq_f32(v59)), v57), v24);
          v62 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v54), (int8x16_t)vmulq_f32(v49, vmulq_f32(v60, vrecpsq_f32(v58, v60))), (int8x16_t)v52);
          v63 = *(float32x4_t *)(v13 + 224);
          v64 = *(float32x4_t *)(v13 + 240);
          v65 = (int32x4_t)vmulq_f32(v37, vaddq_f32(v63, v62));
          v66 = (int32x4_t)vmulq_f32(v38, vaddq_f32(v63, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v52, v55), (int8x16_t)vmulq_f32(v41, vmulq_f32(v61, vrecpsq_f32(v59, v61))), (int8x16_t)v52)));
          v67 = (float32x4_t)vbslq_s8(v17, (int8x16_t)vmulq_f32(v34, vmulq_f32(v51, vrecpsq_f32(v40, v51))), (int8x16_t)v32);
          v68 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13, 0);
          v69 = vaddq_f32(v68, vmulq_f32(v64, vaddq_f32((float32x4_t)vdupq_laneq_s32(v65, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 1)))));
          v70 = vaddq_f32(v68, vmulq_f32(v64, vaddq_f32((float32x4_t)vdupq_laneq_s32(v66, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 1)))));
          v71 = (float32x4_t)vextq_s8(*(int8x16_t *)v13, *(int8x16_t *)v13, 4uLL);
          v72 = vmaxq_f32(vmulq_f32(v71, v67), v52);
          v71.i64[0] = vminq_f32(vmaxq_f32(vmulq_f32(v71, (float32x4_t)vbslq_s8(v17, (int8x16_t)vmulq_f32(v33, vmulq_f32(v50, vrecpsq_f32(v39, v50))), (int8x16_t)v31)), v52), v23).u64[0];
          v73 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
          v74 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
          v75 = vsubq_f32(v70, vsubq_f32(v74, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v74, v70))));
          v76 = *(float32x4_t *)(v13 + 256);
          v77 = *(float32x4_t *)(v13 + 272);
          v78 = vmulq_f32(v76, vsubq_f32(v69, vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v73, v69)))));
          v79 = vmulq_f32(v76, v75);
          v80 = vcvtq_f32_s32(vcvtq_s32_f32(v78));
          v81 = vcvtq_f32_s32(vcvtq_s32_f32(v79));
          v82 = vsubq_f32(v80, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v80, v78)));
          v83 = vsubq_f32(v81, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v81, v79)));
          v80.i64[0] = vminq_f32(v72, v23).u64[0];
          v84 = vsubq_f32(v78, v82);
          v85 = vsubq_f32(v79, v83);
          v86 = vsubq_f32(v82, v77);
          v87 = vmaxq_f32(vsubq_f32(v83, v77), v52);
          v88 = *(float32x4_t *)(v13 + 288);
          v89 = *(float32x4_t *)(v13 + 304);
          v90 = vmaxq_f32(vsubq_f32(v82, v88), v52);
          v91 = (int32x4_t)vminq_f32(vmaxq_f32(v86, v52), v23);
          v92 = vmaxq_f32(vsubq_f32(v83, v88), v52);
          v93 = vmulq_n_f32(v89, v71.f32[0]);
          v94 = vmulq_n_f32(v89, v80.f32[0]);
          v95 = (int32x4_t)vminq_f32(v87, v23);
          v93.i64[1] = vmulq_f32(v84, v93).i64[1];
          v94.i64[1] = vmulq_f32(v85, v94).i64[1];
          v96 = *(float32x4_t *)(v13 + 320);
          v97 = *(float32x4_t *)(v13 + 336);
          v98 = vminq_f32(v90, v23);
          v99 = vmulq_n_f32(v96, v71.f32[0]);
          v100 = vmulq_n_f32(v96, v80.f32[0]);
          v101 = vminq_f32(v92, v23);
          v102 = vbslq_s8(v17, (int8x16_t)vaddq_f32(vmulq_f32(v84, v99), (float32x4_t)vrev64q_s32((int32x4_t)v99)), (int8x16_t)v99);
          v103 = vmulq_n_f32(v97, v71.f32[0]);
          v104 = vmulq_n_f32(v97, v80.f32[0]);
          v105 = *(int8x16_t *)(v13 + 352);
          v106 = *(float32x4_t *)(v13 + 368);
          v107 = vmulq_n_f32(v106, v71.f32[0]);
          v108 = vmulq_n_f32(v106, v80.f32[0]);
          v107.i64[1] = vaddq_f32(vmulq_f32(v84, v107), (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v107, 0)).i64[1];
          v108.i64[1] = vaddq_f32(vmulq_f32(v85, v108), (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v108, 0)).i64[1];
          v109 = vbslq_s8((int8x16_t)vcgtq_f32(v101, v52), (int8x16_t)v94, vbslq_s8(v17, (int8x16_t)vaddq_f32(vmulq_f32(v85, v100), (float32x4_t)vrev64q_s32((int32x4_t)v100)), (int8x16_t)v100));
          v110 = *(float32x4_t *)(v13 + 384);
          v111 = *(float32x4_t *)(v13 + 400);
          v112 = vmulq_n_f32(v110, v71.f32[0]);
          v113 = vmulq_n_f32(v110, v80.f32[0]);
          v114 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v95, 3), v52), v109, vbslq_s8(v105, (int8x16_t)vmulq_f32(v85, v104), (int8x16_t)v104));
          v115 = vmulq_n_f32(v111, v71.f32[0]);
          v116 = vmulq_n_f32(v111, v80.f32[0]);
          v117 = (int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1), vmulq_lane_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.i8, 0), v52), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.i8, 1), v52), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v91, 2), v52), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v91, 3), v52), vbslq_s8((int8x16_t)vcgtq_f32(v98, v52), (int8x16_t)v93, v102), vbslq_s8(v105, (int8x16_t)vmulq_f32(v84, v103), (int8x16_t)v103)), (int8x16_t)v107), vbslq_s8(v17, (int8x16_t)vmulq_f32(v84, v112), (int8x16_t)v112)),
                                                 vbslq_s8(v105, (int8x16_t)vaddq_f32(vmulq_f32(v84, v115), (float32x4_t)vextq_s8((int8x16_t)v115, (int8x16_t)v115, 4uLL)), (int8x16_t)v115)), *(float32x2_t *)v71.f32, 1)), v19);
          v118 = *(int8x16_t *)(v13 + 416);
          v119 = (int8x16_t *)(v5 + v10);
          v119[-1] = vbslq_s8(v118, (int8x16_t)v84, v117);
          *v119 = vbslq_s8(v118, (int8x16_t)v85, (int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1), vmulq_lane_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.i8, 0), v52), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v95.i8, 1), v52), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v95, 2), v52), v114, (int8x16_t)v108), vbslq_s8(v17, (int8x16_t)vmulq_f32(v85, v113), (int8x16_t)v113)),
                                                    vbslq_s8(v105, (int8x16_t)vaddq_f32(vmulq_f32(v85, v116), (float32x4_t)vextq_s8((int8x16_t)v116, (int8x16_t)v116, 4uLL)), (int8x16_t)v116)), *(float32x2_t *)v80.f32, 1)), v20));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v120 = -v9;
      }
      if ((int)v120 < v4)
      {
        v121 = *(float32x4_t *)(v6 + 16 * v120);
        v122 = *(_QWORD *)(a1 + 408);
        v123 = vmaxq_f32(vmaxq_f32(vmaxq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v121.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v121.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v121, 2)), *(float32x4_t *)(v122 + 16));
        v125 = *(float32x4_t *)(v122 + 32);
        v124 = *(int8x16_t *)(v122 + 48);
        v126 = (float32x4_t)vbslq_s8(v124, (int8x16_t)vaddq_f32(v123, v125), (int8x16_t)v123);
        v127 = *(float32x4_t *)(v122 + 64);
        v128 = *(float32x4_t *)(v122 + 80);
        v129 = *(float32x4_t *)(v122 + 96);
        v130 = *(float32x4_t *)(v122 + 112);
        v131 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v126), v127), v128), v129);
        v132 = (int8x16_t)vmulq_f32(v131, vrecpsq_f32(v126, v131));
        v133 = vmulq_f32(v121, (float32x4_t)vbslq_s8(v124, v132, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v132.i8, 0)));
        v134 = vmaxq_f32(vmaxq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 2));
        v135 = vsubq_f32(v134, vminq_f32(vminq_f32(v133, (float32x4_t)vrev64q_s32((int32x4_t)v133)), (float32x4_t)vextq_s8((int8x16_t)v133, (int8x16_t)v133, 8uLL)));
        v136 = (float32x4_t)vandq_s8((int8x16_t)v130, (int8x16_t)vcgeq_f32(v133, v134));
        v137 = (float32x4_t)vbslq_s8(v124, (int8x16_t)v136, (int8x16_t)vminq_f32(vmaxq_f32(vsubq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 0)), v128), v130));
        v137.i64[1] = vminq_f32(vmaxq_f32(vsubq_f32(v137, (float32x4_t)vextq_s8(*(int8x16_t *)&v137, *(int8x16_t *)&v137, 0xCuLL)), v128), v130).i64[1];
        v138 = (float32x4_t)vbslq_s8(v124, (int8x16_t)vaddq_f32(v125, v134), (int8x16_t)v134);
        v139 = vminq_f32(vmaxq_f32(vmulq_f32(v127, vrecpeq_f32(v138)), v128), v129);
        v140 = vmulq_f32(v139, vrecpsq_f32(v138, v139));
        v141 = *(int8x16_t *)(v122 + 128);
        v142 = *(float32x4_t *)(v122 + 144);
        v143 = (float32x2_t)vqtbl1_s8((int8x16_t)v133, *(int8x8_t *)v141.i8);
        *(int8x8_t *)v141.i8 = vqtbl1_s8((int8x16_t)v133, (int8x8_t)*(_OWORD *)&vextq_s8(v141, v141, 8uLL));
        v144 = (float32x2_t)vqtbl1_s8((int8x16_t)v133, *(int8x8_t *)v142.f32);
        *(int8x8_t *)v133.f32 = vqtbl1_s8((int8x16_t)v133, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL));
        *(float32x2_t *)v142.f32 = vsub_f32(v143, v144);
        *(float32x2_t *)&v142.u32[2] = vsub_f32(*(float32x2_t *)v141.i8, *(float32x2_t *)v133.f32);
        v145 = (int8x16_t)vmulq_f32(v135, v140);
        v146 = *(float32x4_t *)(v122 + 176);
        v147 = (int8x16_t)vcgeq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 0), *(float32x4_t *)(v122 + 160));
        v148 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(v135, *(float32x4_t *)(v122 + 192)), 0);
        v149 = vminq_f32(vmaxq_f32(vmulq_f32(v127, vrecpeq_f32(v148)), *(float32x4_t *)(v122 + 208)), v129);
        v150 = (int32x4_t)vmulq_f32(v137, vaddq_f32(*(float32x4_t *)(v122 + 224), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v146, vsubq_f32(v146, (float32x4_t)vandq_s8((int8x16_t)v130, v147))), (int8x16_t)vmulq_f32(v142, vmulq_f32(v149, vrecpsq_f32(v148, v149))), (int8x16_t)v146)));
        v151 = (float32x4_t)vbslq_s8(v124, v145, (int8x16_t)v134);
        v152 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122, 0), vmulq_f32(*(float32x4_t *)(v122 + 240), vaddq_f32((float32x4_t)vdupq_laneq_s32(v150, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v150.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v150.i8, 1)))));
        v153 = (float32x2_t)vminq_f32(vmaxq_f32(vmulq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v122, *(int8x16_t *)v122, 4uLL), v151), v146), v130).u64[0];
        v154 = vcvtq_f32_s32(vcvtq_s32_f32(v152));
        v155 = vmulq_f32(*(float32x4_t *)(v122 + 256), vsubq_f32(v152, vsubq_f32(v154, (float32x4_t)vandq_s8((int8x16_t)v130, (int8x16_t)vcgtq_f32(v154, v152)))));
        v156 = vcvtq_f32_s32(vcvtq_s32_f32(v155));
        v157 = vsubq_f32(v156, (float32x4_t)vandq_s8((int8x16_t)v130, (int8x16_t)vcgtq_f32(v156, v155)));
        v158 = vsubq_f32(v155, v157);
        v159 = (int32x4_t)vminq_f32(vmaxq_f32(vsubq_f32(v157, *(float32x4_t *)(v122 + 272)), v146), v130);
        v160 = vmulq_n_f32(*(float32x4_t *)(v122 + 304), v153.f32[0]);
        v160.i64[1] = vmulq_f32(v160, v158).i64[1];
        v161 = vmulq_n_f32(*(float32x4_t *)(v122 + 320), v153.f32[0]);
        v162 = vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32(vmaxq_f32(vsubq_f32(v157, *(float32x4_t *)(v122 + 288)), v146), v130), v146), (int8x16_t)v160, vbslq_s8(v124, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v161), vmulq_f32(v161, v158)), (int8x16_t)v161));
        v163 = vmulq_n_f32(*(float32x4_t *)(v122 + 336), v153.f32[0]);
        v164 = *(int8x16_t *)(v122 + 352);
        v165 = vmulq_n_f32(*(float32x4_t *)(v122 + 368), v153.f32[0]);
        v165.i64[1] = vaddq_f32(vmulq_f32(v158, v165), (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v165, 0)).i64[1];
        v166 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v159, 2), v146), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v159, 3), v146), v162, vbslq_s8(v164, (int8x16_t)vmulq_f32(v163, v158), (int8x16_t)v163)), (int8x16_t)v165);
        v167 = vmulq_n_f32(*(float32x4_t *)(v122 + 384), v153.f32[0]);
        v168 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v159.i8, 1), v146), v166, vbslq_s8(v124, (int8x16_t)vmulq_f32(v158, v167), (int8x16_t)v167));
        v169 = vmulq_n_f32(*(float32x4_t *)(v122 + 400), v153.f32[0]);
        *(int8x16_t *)(v5 + 16 * v120) = vbslq_s8(*(int8x16_t *)(v122 + 416), (int8x16_t)v158, (int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v153, 1), vmulq_lane_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v159.i8, 0), v146), v168, vbslq_s8(v164, (int8x16_t)vaddq_f32(vmulq_f32(v158, v169), (float32x4_t)vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL)), (int8x16_t)v169)), v153, 1)),
                                                          v126));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcHSVAdjust::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcHSVAdjust::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcHSVAdjust::HgcHSVAdjust(HgcHSVAdjust *this)
{
  _QWORD *v2;
  HgcHSVAdjust::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EDD50;
  v3 = (HgcHSVAdjust::State *)operator new();
  HgcHSVAdjust::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28A0080(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcHSVAdjust::~HgcHSVAdjust(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EDD50;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4003455651);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcHSVAdjust::~HgcHSVAdjust(this);
  HGObject::operator delete(v1);
}

uint64_t HgcHSVAdjust::SetParameter(HgcHSVAdjust *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcHSVAdjust::GetParameter(HgcHSVAdjust *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

double HgcHSVAdjust::State::State(HgcHSVAdjust::State *this)
{
  double result;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = xmmword_1B30528F0;
  *((_OWORD *)this + 2) = xmmword_1B3052900;
  *((_OWORD *)this + 3) = xmmword_1B3050E20;
  *((_OWORD *)this + 4) = xmmword_1B3051BC0;
  *((_OWORD *)this + 5) = xmmword_1B3051200;
  __asm { FMOV            V0.4S, #1.0 }
  *((int32x4_t *)this + 6) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 7) = _Q0;
  *((_OWORD *)this + 8) = xmmword_1B3052910;
  *((_OWORD *)this + 9) = xmmword_1B3052920;
  *((_OWORD *)this + 10) = xmmword_1B3052930;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = xmmword_1B3052940;
  *((_OWORD *)this + 13) = xmmword_1B3052320;
  *((_OWORD *)this + 14) = xmmword_1B3052950;
  *((int32x4_t *)this + 15) = vdupq_n_s32(0x3E2AAAABu);
  __asm { FMOV            V0.4S, #6.0 }
  *((_OWORD *)this + 16) = _Q0;
  *((_OWORD *)this + 17) = xmmword_1B304FD40;
  *((_OWORD *)this + 18) = xmmword_1B3052960;
  *((_OWORD *)this + 19) = xmmword_1B3052970;
  *((_OWORD *)this + 20) = xmmword_1B3052980;
  *((_OWORD *)this + 21) = xmmword_1B3052990;
  *((_OWORD *)this + 22) = xmmword_1B3050FF0;
  *((_OWORD *)this + 23) = xmmword_1B30529A0;
  *((_OWORD *)this + 24) = xmmword_1B30529B0;
  *((_OWORD *)this + 25) = xmmword_1B30529C0;
  result = 0.0;
  *((_OWORD *)this + 26) = xmmword_1B3050F70;
  return result;
}

const char *HgcThreshold::GetProgram(HgcThreshold *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003cd\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.3086000085, 0.6093999743, 0.08200000226, 0.5000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1.x = dot(r0.xyz, c0.xyz);\n"
             "    r1.x = r1.x - half(hg_Params[0].x);\n"
             "    r1.x = clamp(r1.x*half(hg_Params[1].x) + c0.w, 0.00000h, 1.00000h);\n"
             "    r1.xyz = mix(half3(hg_Params[2].xyz), half3(hg_Params[3].xyz), r1.xxx);\n"
             "    output.color0.xyz = float3(r1.xyz)*float3(r0.www);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3e367a35:87ffd1e7:5344623c:ebddf248\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000399\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.3086000085, 0.6093999743, 0.08200000226, 0.5000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1.x = dot(r0.xyz, c0.xyz);\n"
             "    r1.x = r1.x - hg_Params[0].x;\n"
             "    r1.x = clamp(r1.x*hg_Params[1].x + c0.w, 0.00000f, 1.00000f);\n"
             "    r1.xyz = mix(hg_Params[2].xyz, hg_Params[3].xyz, r1.xxx);\n"
             "    output.color0.xyz = r1.xyz*r0.www;\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=1347d45c:88fbdcfe:bb1ed88f:7ad162bd\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003e3\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.3086000085, 0.6093999743, 0.08200000226, 0.5000000000);\n"
           "    mediump vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1.x = dot(r0.xyz, c0.xyz);\n"
           "    r1.x = r1.x - hg_ProgramLocal0.x;\n"
           "    r1.x = clamp(r1.x*hg_ProgramLocal1.x + c0.w, 0.00000, 1.00000);\n"
           "    r1.xyz = mix(hg_ProgramLocal2.xyz, hg_ProgramLocal3.xyz, r1.xxx);\n"
           "    gl_FragColor.xyz = r1.xyz*r0.www;\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=f0e7df4e:490c8f43:1514f43f:5cb2cb90\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcThreshold::InitProgramDescriptor(HgcThreshold *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcThreshold_hgc_visible", "//Metal1.0     \n//LEN=000000026f\n[[ visible ]] FragmentOut HgcThreshold_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.3086000085, 0.6093999743, 0.08200000226, 0.5000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.x = dot(r0.xyz, c0.xyz);\n"
    "    r1.x = r1.x - hg_Params[0].x;\n"
    "    r1.x = clamp(r1.x*hg_Params[1].x + c0.w, 0.00000f, 1.00000f);\n"
    "    r1.xyz = mix(hg_Params[2].xyz, hg_Params[3].xyz, r1.xxx);\n"
    "    output.color0.xyz = r1.xyz*r0.www;\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A036C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcThreshold");
}

void sub_1B28A037C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A047C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A04BC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A04B4);
}

_QWORD *HgcThreshold::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcThreshold [hgc1]");
}

uint64_t HgcThreshold::BindTexture(HgcThreshold *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcThreshold::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcThreshold::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t *v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v53) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 32);
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v13 = *(float32x4_t *)(v6 + v10);
          v14 = *(float32x4_t *)(v6 + v10 + 16);
          v15 = *(_QWORD *)(a1 + 408);
          v16 = *(float32x4_t *)(v15 + 64);
          v17 = *(float32x4_t *)(v15 + 80);
          v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v16);
          v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v16);
          v20 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v16);
          v21 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3), v16);
          v22 = vmulq_f32(vrecpeq_f32(v18), v17);
          v23 = vmulq_f32(vrecpeq_f32(v19), v17);
          v24 = vmulq_f32(vrecpeq_f32(v20), v17);
          v25 = vmulq_f32(vrecpeq_f32(v21), v17);
          v26 = (int8x16_t)vmulq_f32(v22, vrecpsq_f32(v22, v18));
          v27 = (int8x16_t)vmulq_f32(v25, vrecpsq_f32(v25, v21));
          v28 = *(int8x16_t *)(v15 + 96);
          v29 = *(float32x4_t *)(v15 + 112);
          v30 = vmulq_f32(v11, (float32x4_t)vorrq_s8(vandq_s8(v28, v26), (int8x16_t)v29));
          v31 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v28, (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v19))), (int8x16_t)v29));
          v32 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v28, (int8x16_t)vmulq_f32(v24, vrecpsq_f32(v24, v20))), (int8x16_t)v29));
          v33 = vmulq_f32(v14, (float32x4_t)vorrq_s8(vandq_s8(v28, v27), (int8x16_t)v29));
          v34 = *(float32x4_t *)(v15 + 128);
          v35 = *(float32x4_t *)(v15 + 144);
          v36 = vmulq_f32(v34, v30);
          v37 = vmulq_f32(v34, v31);
          v38 = vmulq_f32(v34, v32);
          v39 = vmulq_f32(v34, v33);
          v40 = *(float32x4_t *)(v15 + 16);
          v41 = vaddq_f32(v35, vmulq_f32(v40, vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), vaddq_f32(v37, (float32x4_t)vrev64q_s32((int32x4_t)v37))), *(float32x4_t *)v15)));
          v42 = vaddq_f32(v35, vmulq_f32(v40, vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), vaddq_f32(v38, (float32x4_t)vrev64q_s32((int32x4_t)v38))), *(float32x4_t *)v15)));
          v43 = vaddq_f32(v35, vmulq_f32(v40, vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), vaddq_f32(v39, (float32x4_t)vrev64q_s32((int32x4_t)v39))), *(float32x4_t *)v15)));
          v44 = vmaxq_f32(vaddq_f32(v35, vmulq_f32(v40, vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), vaddq_f32(v36, (float32x4_t)vrev64q_s32((int32x4_t)v36))), *(float32x4_t *)v15))), v29);
          v45 = vmaxq_f32(v41, v29);
          v46 = vmaxq_f32(v42, v29);
          v47 = vmaxq_f32(v43, v29);
          v48 = *(float32x4_t *)(v15 + 160);
          v49 = *(int8x16_t *)(v15 + 176);
          v44.i32[0] = vminq_f32(v44, v48).u32[0];
          v45.i32[0] = vminq_f32(v45, v48).u32[0];
          v46.i32[0] = vminq_f32(v46, v48).u32[0];
          v47.i32[0] = vminq_f32(v47, v48).u32[0];
          v50 = *(float32x4_t *)(v15 + 32);
          v51 = vsubq_f32(*(float32x4_t *)(v15 + 48), v50);
          v52 = (int8x16_t *)(v5 + v10);
          v52[-2] = vbslq_s8(v49, (int8x16_t)v30, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v50, vmulq_n_f32(v51, v44.f32[0])), v30, 3));
          v52[-1] = vbslq_s8(v49, (int8x16_t)v31, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v50, vmulq_n_f32(v51, v45.f32[0])), v31, 3));
          *v52 = vbslq_s8(v49, (int8x16_t)v32, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v50, vmulq_n_f32(v51, v46.f32[0])), v32, 3));
          v52[1] = vbslq_s8(v49, (int8x16_t)v33, (int8x16_t)vmulq_laneq_f32(vaddq_f32(v50, vmulq_n_f32(v51, v47.f32[0])), v33, 3));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v53) = -v9;
      }
      if ((int)v53 < v4)
      {
        v53 = v53;
        do
        {
          v54 = *(float32x4_t *)(v6 + 16 * v53);
          v55 = *(_QWORD *)(a1 + 408);
          v56 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 3), *(float32x4_t *)(v55 + 64));
          v57 = vmulq_f32(vrecpeq_f32(v56), *(float32x4_t *)(v55 + 80));
          v58 = *(float32x4_t *)(v55 + 112);
          v59 = vmulq_f32(v54, (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v55 + 96), (int8x16_t)vmulq_f32(v57, vrecpsq_f32(v57, v56))), (int8x16_t)v58));
          v60 = vmulq_f32(*(float32x4_t *)(v55 + 128), v59);
          *(int8x16_t *)(v5 + 16 * v53++) = vbslq_s8(*(int8x16_t *)(v55 + 176), (int8x16_t)v59, (int8x16_t)vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v55 + 32), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v55 + 48), *(float32x4_t *)(v55 + 32)), vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v55 + 144), vmulq_f32(*(float32x4_t *)(v55 + 16), vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v60,
                                                                                          (int8x16_t)v60,
                                                                                          8uLL),
                                                                           vaddq_f32(v60, (float32x4_t)vrev64q_s32((int32x4_t)v60))), *(float32x4_t *)v55))), v58), *(float32x4_t *)(v55 + 160)).f32[0])), v59, 3));
        }
        while (v53 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcThreshold::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcThreshold::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcThreshold::HgcThreshold(HgcThreshold *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EDFB8;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x358637BDu);
  *(int32x4_t *)(v3 + 80) = vdupq_n_s32(0x3F804020u);
  *(_OWORD *)(v3 + 96) = xmmword_1B30514E0;
  *(_OWORD *)(v3 + 112) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 128) = xmmword_1B30529E0;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051880;
  *(_OWORD *)(v3 + 160) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28A09FC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcThreshold::~HgcThreshold(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EDFB8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C408070C27FLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcThreshold::~HgcThreshold(this);
  HGObject::operator delete(v1);
}

uint64_t HgcThreshold::SetParameter(HgcThreshold *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcThreshold::GetParameter(HgcThreshold *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcThresholdNoPremult::GetProgram(HgcThresholdNoPremult *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000398\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.3086000085, 0.6093999743, 0.08200000226, 0.5000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = dot(r0.xyz, c0.xyz);\n"
             "    r1.x = r1.x - half(hg_Params[0].x);\n"
             "    r1.x = clamp(r1.x*half(hg_Params[1].x) + c0.w, 0.00000h, 1.00000h);\n"
             "    r1.xyz = mix(half3(hg_Params[2].xyz), half3(hg_Params[3].xyz), r1.xxx);\n"
             "    output.color0.xyz = float3(r1.xyz)*float3(r0.www);\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=46bbe74a:ec8517ba:6283b3b5:c6491d59\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000363\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.3086000085, 0.6093999743, 0.08200000226, 0.5000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.x = dot(r0.xyz, c0.xyz);\n"
             "    r1.x = r1.x - hg_Params[0].x;\n"
             "    r1.x = clamp(r1.x*hg_Params[1].x + c0.w, 0.00000f, 1.00000f);\n"
             "    r1.xyz = mix(hg_Params[2].xyz, hg_Params[3].xyz, r1.xxx);\n"
             "    output.color0.xyz = r1.xyz*r0.www;\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=0ed2bc8f:f40c7ec7:aaca0e69:6319817e\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003b7\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "uniform defaultp vec4 hg_ProgramLocal2;\n"
           "uniform defaultp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.3086000085, 0.6093999743, 0.08200000226, 0.5000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.x = dot(r0.xyz, c0.xyz);\n"
           "    r1.x = r1.x - hg_ProgramLocal0.x;\n"
           "    r1.x = clamp(r1.x*hg_ProgramLocal1.x + c0.w, 0.00000, 1.00000);\n"
           "    r1.xyz = mix(hg_ProgramLocal2.xyz, hg_ProgramLocal3.xyz, r1.xxx);\n"
           "    gl_FragColor.xyz = r1.xyz*r0.www;\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=d344230a:2f6aff7d:b2683a2c:501e1b6e\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcThresholdNoPremult::InitProgramDescriptor(HgcThresholdNoPremult *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcThresholdNoPremult_hgc_visible", "//Metal1.0     \n//LEN=0000000242\n[[ visible ]] FragmentOut HgcThresholdNoPremult_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.3086000085, 0.6093999743, 0.08200000226, 0.5000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.x = dot(r0.xyz, c0.xyz);\n"
    "    r1.x = r1.x - hg_Params[0].x;\n"
    "    r1.x = clamp(r1.x*hg_Params[1].x + c0.w, 0.00000f, 1.00000f);\n"
    "    r1.xyz = mix(hg_Params[2].xyz, hg_Params[3].xyz, r1.xxx);\n"
    "    output.color0.xyz = r1.xyz*r0.www;\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A0C08()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcThresholdNoPremult");
}

void sub_1B28A0C18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A0D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A0D58()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A0D50);
}

_QWORD *HgcThresholdNoPremult::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcThresholdNoPremult [hgc1]");
}

uint64_t HgcThresholdNoPremult::BindTexture(HgcThresholdNoPremult *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcThresholdNoPremult::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcThresholdNoPremult::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t *v39;
  uint64_t v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v40) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 32);
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v13 = *(float32x4_t *)(v6 + v10);
          v14 = *(float32x4_t *)(v6 + v10 + 16);
          v15 = *(_QWORD *)(a1 + 408);
          v16 = *(float32x4_t *)(v15 + 64);
          v17 = *(float32x4_t *)(v15 + 80);
          v18 = vmulq_f32(v11, v16);
          v19 = vmulq_f32(v12, v16);
          v20 = vmulq_f32(v13, v16);
          v21 = vmulq_f32(v14, v16);
          v22 = *(float32x4_t *)(v15 + 16);
          v23 = vaddq_f32(v17, vmulq_f32(v22, vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), vaddq_f32(v18, (float32x4_t)vrev64q_s32((int32x4_t)v18))), *(float32x4_t *)v15)));
          v24 = vaddq_f32(v17, vmulq_f32(v22, vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), vaddq_f32(v19, (float32x4_t)vrev64q_s32((int32x4_t)v19))), *(float32x4_t *)v15)));
          v25 = vaddq_f32(v17, vmulq_f32(v22, vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), vaddq_f32(v20, (float32x4_t)vrev64q_s32((int32x4_t)v20))), *(float32x4_t *)v15)));
          v26 = vaddq_f32(v17, vmulq_f32(v22, vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), vaddq_f32(v21, (float32x4_t)vrev64q_s32((int32x4_t)v21))), *(float32x4_t *)v15)));
          v27 = *(float32x4_t *)(v15 + 96);
          v28 = *(float32x4_t *)(v15 + 112);
          v29 = vmaxq_f32(v24, v27);
          v30 = vmaxq_f32(v25, v27);
          v31 = vmaxq_f32(v26, v27);
          v27.i32[0] = vminq_f32(vmaxq_f32(v23, v27), v28).u32[0];
          v23.i32[0] = vminq_f32(v29, v28).u32[0];
          v29.i32[0] = vminq_f32(v30, v28).u32[0];
          v31.i32[0] = vminq_f32(v31, v28).u32[0];
          v32 = *(float32x4_t *)(v15 + 32);
          v33 = vsubq_f32(*(float32x4_t *)(v15 + 48), v32);
          v34 = (int8x16_t)vmulq_laneq_f32(vaddq_f32(v32, vmulq_n_f32(v33, v27.f32[0])), v11, 3);
          v35 = (int8x16_t)vmulq_laneq_f32(vaddq_f32(v32, vmulq_n_f32(v33, v23.f32[0])), v12, 3);
          v36 = (int8x16_t)vmulq_laneq_f32(vaddq_f32(v32, vmulq_n_f32(v33, v29.f32[0])), v13, 3);
          v37 = (int8x16_t)vmulq_laneq_f32(vaddq_f32(v32, vmulq_n_f32(v33, v31.f32[0])), v14, 3);
          v38 = *(int8x16_t *)(v15 + 128);
          v39 = (int8x16_t *)(v5 + v10);
          v39[-2] = vbslq_s8(v38, (int8x16_t)v11, v34);
          v39[-1] = vbslq_s8(v38, (int8x16_t)v12, v35);
          *v39 = vbslq_s8(v38, (int8x16_t)v13, v36);
          v39[1] = vbslq_s8(v38, (int8x16_t)v14, v37);
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v40) = -v9;
      }
      if ((int)v40 < v4)
      {
        v40 = v40;
        do
        {
          v41 = *(float32x4_t *)(v6 + 16 * v40);
          v42 = *(_QWORD *)(a1 + 408);
          v43 = vmulq_f32(v41, *(float32x4_t *)(v42 + 64));
          *(int8x16_t *)(v5 + 16 * v40++) = vbslq_s8(*(int8x16_t *)(v42 + 128), (int8x16_t)v41, (int8x16_t)vmulq_laneq_f32(vaddq_f32(*(float32x4_t *)(v42 + 32), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v42 + 48), *(float32x4_t *)(v42 + 32)), vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v42 + 80), vmulq_f32(*(float32x4_t *)(v42 + 16), vsubq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v43,
                                                                                          (int8x16_t)v43,
                                                                                          8uLL),
                                                                           vaddq_f32(v43, (float32x4_t)vrev64q_s32((int32x4_t)v43))), *(float32x4_t *)v42))), *(float32x4_t *)(v42 + 96)), *(float32x4_t *)(v42 + 112)).f32[0])), v41, 3));
        }
        while (v40 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcThresholdNoPremult::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcThresholdNoPremult::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcThresholdNoPremult::HgcThresholdNoPremult(HgcThresholdNoPremult *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EE220;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = xmmword_1B30529E0;
  *(_OWORD *)(v3 + 80) = xmmword_1B3051880;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_OWORD *)(v3 + 112) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28A11B0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcThresholdNoPremult::~HgcThresholdNoPremult(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EE220;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40265AC83CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcThresholdNoPremult::~HgcThresholdNoPremult(this);
  HGObject::operator delete(v1);
}

uint64_t HgcThresholdNoPremult::SetParameter(HgcThresholdNoPremult *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcThresholdNoPremult::GetParameter(HgcThresholdNoPremult *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcBlackHole::GetProgram(HgcBlackHole *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000089a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 2.000000000, 9.999999975e-07, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[4]);\n"
             "    s0.z = 1.00000f / s0.x;\n"
             "    s0.y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    s0.xy = s0.xy*s0.zz + -hg_Params[0].xy;\n"
             "    s1.x = dot(s0.xy, s0.xy);\n"
             "    s0.z = fmax(s1.x, float(c0.z));\n"
             "    s0.z = rsqrt(s0.z);\n"
             "    s1.z = s0.z*s1.x;\n"
             "    s0.w = clamp(s1.z/hg_Params[1].y, 0.00000f, 1.00000f);\n"
             "    s0.w = s0.w*hg_Params[1].x + s1.z;\n"
             "    s0.xy = s0.zz*s0.xy;\n"
             "    s0.xy = s0.xy*s0.ww + hg_Params[0].xy;\n"
             "    s0.w = float(c0.x);\n"
             "    s1.x = dot(s0.xyw, hg_Params[7].xyz);\n"
             "    s1.w = 1.00000f / s1.x;\n"
             "    s1.y = dot(s0.xyw, hg_Params[6].xyz);\n"
             "    s1.x = dot(s0.xyw, hg_Params[5].xyz);\n"
             "    s0.xy = s1.xy*s1.ww;\n"
             "    s0.xy = s0.xy*hg_Params[1].zz;\n"
             "    s1.xy = float2(hg_Params[9].xy < s0.xy);\n"
             "    s0.zw = float2(s0.xy < hg_Params[8].xy);\n"
             "    s0.z = fmax(s0.z, s0.w);\n"
             "    s1.x = fmax(s1.x, s1.y);\n"
             "    s0.z = fmax(s0.z, s1.x);\n"
             "    s0.xy = fmax(s0.xy, hg_Params[8].xy);\n"
             "    s0.w = s1.z + hg_Params[1].x;\n"
             "    s0.w = s0.w*hg_Params[1].z;\n"
             "    s1.xy = fmin(s0.xy, hg_Params[9].xy);\n"
             "    s0.x = s1.z/s0.w;\n"
             "    s0.x = clamp(s0.x*float(c0.y) + -float(c0.x), 0.00000f, 1.00000f);\n"
             "    s2.x = s0.x*hg_Params[1].w + -hg_Params[1].w;\n"
             "    s1.xy = s1.xy + hg_Params[10].xy;\n"
             "    s1.xy = s1.xy*hg_Params[10].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    s0 = select(float4(r0), float4(c0.wwww), -s0.zzzz < 0.00000h);\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    s2.x = s2.x + float(c0.x);\n"
             "    output.color0 = mix(float4(r0), s0, s2.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6a13015c:19aee921:f2e59211:e0c573af\n"
             "//SIG=00400000:00000002:00000002:00000003:0001:000b:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000845\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 2.000000000, 9.999999975e-07, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[4]);\n"
             "    r0.z = 1.00000f / r0.x;\n"
             "    r0.y = dot(frag._texCoord0, hg_Params[3]);\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    r0.xy = r0.xy*r0.zz + -hg_Params[0].xy;\n"
             "    r1.x = dot(r0.xy, r0.xy);\n"
             "    r0.z = fmax(r1.x, c0.z);\n"
             "    r0.z = rsqrt(r0.z);\n"
             "    r1.z = r0.z*r1.x;\n"
             "    r0.w = clamp(r1.z/hg_Params[1].y, 0.00000f, 1.00000f);\n"
             "    r0.w = r0.w*hg_Params[1].x + r1.z;\n"
             "    r0.xy = r0.zz*r0.xy;\n"
             "    r0.xy = r0.xy*r0.ww + hg_Params[0].xy;\n"
             "    r0.w = c0.x;\n"
             "    r1.x = dot(r0.xyw, hg_Params[7].xyz);\n"
             "    r1.w = 1.00000f / r1.x;\n"
             "    r1.y = dot(r0.xyw, hg_Params[6].xyz);\n"
             "    r1.x = dot(r0.xyw, hg_Params[5].xyz);\n"
             "    r0.xy = r1.xy*r1.ww;\n"
             "    r0.xy = r0.xy*hg_Params[1].zz;\n"
             "    r1.xy = float2(hg_Params[9].xy < r0.xy);\n"
             "    r0.zw = float2(r0.xy < hg_Params[8].xy);\n"
             "    r0.z = fmax(r0.z, r0.w);\n"
             "    r1.x = fmax(r1.x, r1.y);\n"
             "    r0.z = fmax(r0.z, r1.x);\n"
             "    r0.xy = fmax(r0.xy, hg_Params[8].xy);\n"
             "    r0.w = r1.z + hg_Params[1].x;\n"
             "    r0.w = r0.w*hg_Params[1].z;\n"
             "    r1.xy = fmin(r0.xy, hg_Params[9].xy);\n"
             "    r0.x = r1.z/r0.w;\n"
             "    r0.x = clamp(r0.x*c0.y + -c0.x, 0.00000f, 1.00000f);\n"
             "    r2.x = r0.x*hg_Params[1].w + -hg_Params[1].w;\n"
             "    r1.xy = r1.xy + hg_Params[10].xy;\n"
             "    r1.xy = r1.xy*hg_Params[10].zw;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    r1 = select(r1, c0.wwww, -r0.zzzz < 0.00000f);\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r2.x = r2.x + c0.x;\n"
             "    output.color0 = mix(r0, r1, r2.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c9c31fb8:6ce03718:6c72788b:8bdb4e7e\n"
             "//SIG=00000000:00000002:00000002:00000000:0001:000b:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000a08\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "uniform highp vec4 hg_ProgramLocal10;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.000000000, 2.000000000, 9.999999975e-07, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal4);\n"
           "    r0.z = 1.00000 / r0.x;\n"
           "    r0.y = dot(hg_TexCoord0, hg_ProgramLocal3);\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal2);\n"
           "    r0.xy = r0.xy*r0.zz + -hg_ProgramLocal0.xy;\n"
           "    r1.x = dot(r0.xy, r0.xy);\n"
           "    r0.z = max(r1.x, c0.z);\n"
           "    r0.z = inversesqrt(r0.z);\n"
           "    r1.z = r0.z*r1.x;\n"
           "    r0.w = clamp(r1.z/hg_ProgramLocal1.y, 0.00000, 1.00000);\n"
           "    r0.w = r0.w*hg_ProgramLocal1.x + r1.z;\n"
           "    r0.xy = r0.zz*r0.xy;\n"
           "    r0.xy = r0.xy*r0.ww + hg_ProgramLocal0.xy;\n"
           "    r0.w = c0.x;\n"
           "    r1.x = dot(r0.xyw, hg_ProgramLocal7.xyz);\n"
           "    r1.w = 1.00000 / r1.x;\n"
           "    r1.y = dot(r0.xyw, hg_ProgramLocal6.xyz);\n"
           "    r1.x = dot(r0.xyw, hg_ProgramLocal5.xyz);\n"
           "    r0.xy = r1.xy*r1.ww;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal1.zz;\n"
           "    r1.xy = vec2(lessThan(hg_ProgramLocal9.xy, r0.xy));\n"
           "    r0.zw = vec2(lessThan(r0.xy, hg_ProgramLocal8.xy));\n"
           "    r0.z = max(r0.z, r0.w);\n"
           "    r1.x = max(r1.x, r1.y);\n"
           "    r0.z = max(r0.z, r1.x);\n"
           "    r0.xy = max(r0.xy, hg_ProgramLocal8.xy);\n"
           "    r0.w = r1.z + hg_ProgramLocal1.x;\n"
           "    r0.w = r0.w*hg_ProgramLocal1.z;\n"
           "    r1.xy = min(r0.xy, hg_ProgramLocal9.xy);\n"
           "    r0.x = r1.z/r0.w;\n"
           "    r0.x = clamp(r0.x*c0.y + -c0.x, 0.00000, 1.00000);\n"
           "    r2.x = r0.x*hg_ProgramLocal1.w + -hg_ProgramLocal1.w;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal10.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal10.zw;\n"
           "    r1 = texture2D(hg_Texture0, r1.xy);\n"
           "    r1 = vec4(-r0.z < 0.00000 ? c0.w : r1.x, -r0.z < 0.00000 ? c0.w : r1.y, -r0.z < 0.00000 ? c0.w : r1.z, -r"
           "0.z < 0.00000 ? c0.w : r1.w);\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r2.x = r2.x + c0.x;\n"
           "    gl_FragColor = mix(r0, r1, r2.xxxx);\n"
           "}\n"
           "//MD5=ae1a15c1:a19d495d:6c5a57d1:75b7f5f8\n"
           "//SIG=00000000:00000002:00000002:00000000:0001:000b:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcBlackHole::InitProgramDescriptor(HgcBlackHole *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBlackHole_hgc_visible", "//Metal1.0     \n//LEN=00000006fd\n[[ visible ]] FragmentOut HgcBlackHole_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 color1,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(1.000000000, 2.000000000, 9.999999975e-07, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = dot(texCoord0, hg_Params[4]);\n"
    "    r0.z = 1.00000f / r0.x;\n"
    "    r0.y = dot(texCoord0, hg_Params[3]);\n"
    "    r0.x = dot(texCoord0, hg_Params[2]);\n"
    "    r0.xy = r0.xy*r0.zz + -hg_Params[0].xy;\n"
    "    r1.x = dot(r0.xy, r0.xy);\n"
    "    r0.z = fmax(r1.x, c0.z);\n"
    "    r0.z = rsqrt(r0.z);\n"
    "    r1.z = r0.z*r1.x;\n"
    "    r0.w = clamp(r1.z/hg_Params[1].y, 0.00000f, 1.00000f);\n"
    "    r0.w = r0.w*hg_Params[1].x + r1.z;\n"
    "    r0.xy = r0.zz*r0.xy;\n"
    "    r0.xy = r0.xy*r0.ww + hg_Params[0].xy;\n"
    "    r0.w = c0.x;\n"
    "    r1.x = dot(r0.xyw, hg_Params[7].xyz);\n"
    "    r1.w = 1.00000f / r1.x;\n"
    "    r1.y = dot(r0.xyw, hg_Params[6].xyz);\n"
    "    r1.x = dot(r0.xyw, hg_Params[5].xyz);\n"
    "    r0.xy = r1.xy*r1.ww;\n"
    "    r0.xy = r0.xy*hg_Params[1].zz;\n"
    "    r1.xy = float2(hg_Params[9].xy < r0.xy);\n"
    "    r0.zw = float2(r0.xy < hg_Params[8].xy);\n"
    "    r0.z = fmax(r0.z, r0.w);\n"
    "    r1.x = fmax(r1.x, r1.y);\n"
    "    r0.z = fmax(r0.z, r1.x);\n"
    "    r0.xy = fmax(r0.xy, hg_Params[8].xy);\n"
    "    r0.w = r1.z + hg_Params[1].x;\n"
    "    r0.w = r0.w*hg_Params[1].z;\n"
    "    r1.xy = fmin(r0.xy, hg_Params[9].xy);\n"
    "    r0.x = r1.z/r0.w;\n"
    "    r0.x = clamp(r0.x*c0.y + -c0.x, 0.00000f, 1.00000f);\n"
    "    r2.x = r0.x*hg_Params[1].w + -hg_Params[1].w;\n"
    "    r1.xy = r1.xy + hg_Params[10].xy;\n"
    "    r1.xy = r1.xy*hg_Params[10].zw;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    r1 = select(r1, c0.wwww, -r0.zzzz < 0.00000f);\n"
    "    r0 = color1;\n"
    "    r2.x = r2.x + c0.x;\n"
    "    output.color0 = mix(r0, r1, r2.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A13BC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBlackHole");
}

void sub_1B28A13CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514D0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A158C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A15E4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A15DCLL);
}

_QWORD *HgcBlackHole::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBlackHole [hgc1]");
}

uint64_t HgcBlackHole::BindTexture(HgcBlackHole *this, HGHandler *a2, int a3)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  int v8;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 1, 0, 0, 0);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v8)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v6.n128_u32[0] = 1.0;
      v7.n128_u32[0] = 1.0;
    }
    else
    {
      v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v4.n128_f32[0] = (float)*((int *)a2 + 60);
    v5.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 10, v4, v5, v6, v7);
  }
  return 0;
}

uint64_t HgcBlackHole::Bind(HgcBlackHole *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HgcBlackHole *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcBlackHole::RenderTile(HgcBlackHole *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float32x4_t v86;
  int8x8_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  float32x2_t v92;
  int8x16_t v93;
  float32x2_t v94;
  int8x16_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  uint64_t v115;
  int32x4_t v116;
  uint64_t v117;
  int32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  float32x4_t v128;
  uint64_t v129;
  float32x4_t v130;
  uint64_t v131;
  int32x4_t v132;
  float32x2_t v133;
  float32x4_t *v134;
  float32x4_t v135;
  int8x16_t v136;
  float32x4_t v137;
  int32x4_t v138;
  float32x4_t *v139;
  float32x4_t v140;
  int8x16_t v141;
  float32x4_t v142;
  int32x4_t v143;
  float32x4_t v144;
  int32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int8x16_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t *v161;
  unsigned int v162;
  uint64_t v163;
  int8x16_t v164;
  int8x16_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  float32x4_t v176;
  int8x16_t v177;
  float32x4_t v178;
  float32x4_t v179;
  int32x4_t v180;
  int8x16_t v181;
  float32x4_t v182;
  int8x16_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x16_t v192;
  int8x16_t v193;
  float32x4_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int8x16_t v197;
  float32x4_t v198;
  int8x16_t v199;
  float32x2_t v200;
  int8x16_t v201;
  float32x4_t v202;
  float32x4_t v203;
  int8x16_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int8x16_t v207;
  int8x16_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  uint64_t v212;
  int32x4_t v213;
  float32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  uint64_t v217;
  float32x4_t v218;
  uint64_t v219;
  int32x4_t v220;
  float32x2_t v221;
  float32x4_t *v222;
  float32x4_t v223;
  int8x16_t v224;
  float32x4_t v225;
  int32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcBlackHole *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 12);
    v13 = 16 * *((int *)a2 + 6);
    v14 = 16 * *((int *)a2 + 26);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    v16 = (float32x4_t)v9;
    do
    {
      if (v10 < 2)
      {
        v162 = 0;
        v19 = v16;
      }
      else
      {
        v17 = 0;
        v18 = 16;
        v19 = v16;
        do
        {
          v20 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v21 = *((_QWORD *)this + 51);
          v22 = *(float32x4_t *)(v21 + 64);
          v23 = *(float32x4_t *)(v21 + 80);
          v24 = (int8x16_t)vmulq_f32(v19, v22);
          v25 = (int8x16_t)vmulq_f32(v20, v22);
          v26 = (int8x16_t)vaddq_f32((float32x4_t)v24, (float32x4_t)vextq_s8(v24, v24, 4uLL));
          v27 = (int8x16_t)vaddq_f32((float32x4_t)v25, (float32x4_t)vextq_s8(v25, v25, 4uLL));
          v28 = vaddq_f32((float32x4_t)vextq_s8(v26, v26, 8uLL), (float32x4_t)v26);
          v29 = vaddq_f32((float32x4_t)vextq_s8(v27, v27, 8uLL), (float32x4_t)v27);
          v30 = *(float32x4_t *)(v21 + 160);
          v31 = *(float32x4_t *)(v21 + 176);
          v32 = vminq_f32(vmaxq_f32(vrecpeq_f32(v28), v30), v31);
          v33 = vminq_f32(vmaxq_f32(vrecpeq_f32(v29), v30), v31);
          v34 = vminq_f32(vmaxq_f32(vmulq_f32(v32, vrecpsq_f32(v28, v32)), v30), v31);
          v35 = vminq_f32(vmaxq_f32(vmulq_f32(v33, vrecpsq_f32(v29, v33)), v30), v31);
          v36 = vmulq_f32(v34, vrecpsq_f32(v28, v34));
          v37 = vmulq_f32(v35, vrecpsq_f32(v29, v35));
          v39 = *(float32x4_t *)(v21 + 32);
          v38 = *(float32x4_t *)(v21 + 48);
          v40 = (int8x16_t)vmulq_f32(v19, v38);
          v41 = (int8x16_t)vmulq_f32(v20, v38);
          v42 = (int8x16_t)vaddq_f32((float32x4_t)v40, (float32x4_t)vextq_s8(v40, v40, 4uLL));
          v43 = vaddq_f32((float32x4_t)v41, (float32x4_t)vextq_s8(v41, v41, 4uLL));
          v42.i64[0] = vaddq_f32((float32x4_t)v42, (float32x4_t)vdupq_laneq_s64((int64x2_t)v42, 1)).u64[0];
          v44.i64[0] = vaddq_f32(v43, (float32x4_t)vdupq_laneq_s64((int64x2_t)v43, 1)).u64[0];
          v42.i64[1] = v36.i64[1];
          v44.i64[1] = v37.i64[1];
          v45 = (int8x16_t)vmulq_f32(v19, v39);
          v46 = (int8x16_t)vmulq_f32(v20, v39);
          v47 = (int8x16_t)vaddq_f32((float32x4_t)v45, (float32x4_t)vextq_s8(v45, v45, 4uLL));
          v48 = (int8x16_t)vaddq_f32((float32x4_t)v46, (float32x4_t)vextq_s8(v46, v46, 4uLL));
          v49 = (int8x16_t)vaddq_f32((float32x4_t)v48, (float32x4_t)vextq_s8(v48, v48, 8uLL));
          v51 = *(int8x16_t *)(v21 + 192);
          v50 = *(float32x4_t *)(v21 + 208);
          v52 = (float32x4_t)vbslq_s8(v51, (int8x16_t)vaddq_f32((float32x4_t)v47, (float32x4_t)vextq_s8(v47, v47, 8uLL)), v42);
          v53 = (float32x4_t)vbslq_s8(v51, v49, v44);
          v54 = vmulq_laneq_f32(v52, v52, 2);
          v55 = *(int8x16_t *)(v21 + 16);
          v56 = (int8x16_t)vsubq_f32(v54, *(float32x4_t *)v21);
          v57 = (int8x16_t)vsubq_f32(vmulq_laneq_f32(v53, v53, 2), *(float32x4_t *)v21);
          v58 = vmulq_f32((float32x4_t)v56, (float32x4_t)v56);
          v59 = vmulq_f32((float32x4_t)v57, (float32x4_t)v57);
          v60 = (int8x16_t)vaddq_f32(v58, (float32x4_t)vrev64q_s32((int32x4_t)v58));
          v61 = (int8x16_t)vaddq_f32(v59, (float32x4_t)vrev64q_s32((int32x4_t)v59));
          v62.i64[0] = v56.i64[0];
          v62.i64[1] = vmaxq_f32((float32x4_t)vextq_s8(v60, v60, 8uLL), v50).i64[1];
          v63.i64[0] = v57.i64[0];
          v63.i64[1] = vmaxq_f32((float32x4_t)vextq_s8(v61, v61, 8uLL), v50).i64[1];
          v64 = vminq_f32(vrsqrteq_f32(v62), v31);
          v65 = vminq_f32(vrsqrteq_f32(v63), v31);
          v66 = vminq_f32(vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32(v64, v62), v64)), v31);
          v67 = vminq_f32(vmulq_f32(v65, vrsqrtsq_f32(vmulq_f32(v65, v63), v65)), v31);
          v56.i64[1] = vmulq_f32(v66, vrsqrtsq_f32(vmulq_f32(v66, v62), v66)).i64[1];
          v57.i64[1] = vmulq_f32(v67, vrsqrtsq_f32(vmulq_f32(v67, v63), v67)).i64[1];
          v68 = (int32x4_t)vmulq_n_f32((float32x4_t)v56, *(float *)v60.i32);
          v69 = (int32x4_t)vmulq_n_f32((float32x4_t)v57, *(float *)v61.i32);
          v70 = (float32x4_t)vextq_s8(v55, v55, 8uLL);
          v71 = vminq_f32(vmaxq_f32(vrecpeq_f32(v70), v50), v31);
          v72 = vminq_f32(vmaxq_f32(vmulq_f32(v71, vrecpsq_f32(v70, v71)), v50), v31);
          v73 = vmulq_f32(v72, vrecpsq_f32(v70, v72));
          v74 = vmaxq_f32(vmulq_laneq_f32(v73, (float32x4_t)v68, 2), v30);
          v75 = vmaxq_f32(vmulq_laneq_f32(v73, (float32x4_t)v69, 2), v30);
          v76 = *(int8x16_t *)(v21 + 224);
          v77 = *(int8x16_t *)(v21 + 240);
          v78 = (float32x4_t)vbslq_s8(v77, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v68), vmulq_n_f32((float32x4_t)vbslq_s8(v77, (int8x16_t)vminq_f32(v74, (float32x4_t)v76), v56), *(float *)v55.i32)), v56);
          v79 = (float32x4_t)vbslq_s8(v77, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v69), vmulq_n_f32((float32x4_t)vbslq_s8(v77, (int8x16_t)vminq_f32(v75, (float32x4_t)v76), v57), *(float *)v55.i32)), v57);
          v74.i64[0] = vmulq_laneq_f32(v78, v78, 2).u64[0];
          v75.i64[0] = vmulq_laneq_f32(v79, v79, 2).u64[0];
          v74.i64[1] = v78.i64[1];
          v75.i64[1] = v79.i64[1];
          v80 = (int8x16_t)vaddq_f32(*(float32x4_t *)v21, vmulq_laneq_f32(v74, v78, 3));
          v81 = (int8x16_t)vaddq_f32(*(float32x4_t *)v21, vmulq_laneq_f32(v75, v79, 3));
          v82 = v80;
          v82.i32[3] = 1.0;
          v83 = v81;
          v83.i32[3] = 1.0;
          v80.i64[1] = vextq_s8(v82, v82, 8uLL).u64[0];
          v84 = *(int8x16_t *)(v21 + 256);
          v85 = *(int8x16_t *)(v21 + 272);
          *(int8x8_t *)v86.f32 = vqtbl1_s8(v80, *(int8x8_t *)v84.i8);
          v87 = (int8x8_t)vextq_s8(v84, v84, 8uLL).u64[0];
          *(int8x8_t *)&v86.u32[2] = vqtbl1_s8(v80, v87);
          v81.i64[1] = vextq_s8(v83, v83, 8uLL).u64[0];
          *(int8x8_t *)v84.i8 = vqtbl1_s8(v81, *(int8x8_t *)v84.i8);
          v84.u64[1] = (unint64_t)vqtbl1_s8(v81, v87);
          v89 = *(float32x4_t *)(v21 + 96);
          v88 = *(float32x4_t *)(v21 + 112);
          v90 = (int8x16_t)vmulq_f32(v86, v88);
          v91 = (int8x16_t)vmulq_f32(v88, (float32x4_t)v84);
          v92 = vadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)vrev64_s32(*(int32x2_t *)v90.i8));
          v93 = vextq_s8(v90, v90, 8uLL);
          *(float32x2_t *)v93.i8 = vadd_f32(*(float32x2_t *)v93.i8, v92);
          v94 = vadd_f32(*(float32x2_t *)v91.i8, (float32x2_t)vrev64_s32(*(int32x2_t *)v91.i8));
          v95 = vextq_s8(v91, v91, 8uLL);
          *(float32x2_t *)v95.i8 = vadd_f32(*(float32x2_t *)v95.i8, v94);
          *(int8x8_t *)v62.f32 = vext_s8(*(int8x8_t *)v93.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v68, (int8x16_t)v68, 8uLL), 4uLL);
          v62.i64[1] = vextq_s8((int8x16_t)v68, v93, 0xCuLL).u64[0];
          *(int8x8_t *)v80.i8 = vext_s8(*(int8x8_t *)v95.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v69, (int8x16_t)v69, 8uLL), 4uLL);
          v80.i64[1] = vextq_s8((int8x16_t)v69, v95, 0xCuLL).u64[0];
          v96 = vminq_f32(vmaxq_f32(vrecpeq_f32(v62), v50), v31);
          v97 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v80), v50), v31);
          v98 = vminq_f32(vmaxq_f32(vmulq_f32(v96, vrecpsq_f32(v62, v96)), v50), v31);
          v99 = vminq_f32(vmaxq_f32(vmulq_f32(v97, vrecpsq_f32((float32x4_t)v80, v97)), v50), v31);
          v100 = vbslq_s8(v85, (int8x16_t)v68, (int8x16_t)vmulq_f32(v98, vrecpsq_f32(v62, v98)));
          v101 = vbslq_s8(v85, (int8x16_t)v69, (int8x16_t)vmulq_f32(v99, vrecpsq_f32((float32x4_t)v80, v99)));
          v102 = (int32x4_t)vmulq_f32(v86, v89);
          v103 = (int32x4_t)vmulq_f32((float32x4_t)v84, v89);
          v102.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v102, v9, 4uLL), vaddq_f32((float32x4_t)v102, (float32x4_t)vrev64q_s32(v102))).u64[0];
          v103.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v103, v9, 4uLL), vaddq_f32((float32x4_t)v103, (float32x4_t)vrev64q_s32(v103))).u64[0];
          v102.i64[1] = v100.i64[1];
          v103.i64[1] = v101.i64[1];
          v104 = (int32x4_t)vmulq_f32(v86, v23);
          v105 = (int32x4_t)vmulq_f32((float32x4_t)v84, v23);
          v106 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL), vaddq_f32((float32x4_t)v105, (float32x4_t)vrev64q_s32(v105)));
          v107 = vbslq_s8(v51, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL), vaddq_f32((float32x4_t)v104, (float32x4_t)vrev64q_s32(v104))), (int8x16_t)v102);
          v108 = vbslq_s8(v51, v106, (int8x16_t)v103);
          v109 = (int8x16_t)vmulq_laneq_f32(vmulq_laneq_f32((float32x4_t)v107, (float32x4_t)v107, 3), (float32x4_t)v55, 2);
          v110 = (int8x16_t)vmulq_laneq_f32(vmulq_laneq_f32((float32x4_t)v108, (float32x4_t)v108, 3), (float32x4_t)v55, 2);
          v112 = *(float32x4_t *)(v21 + 128);
          v111 = *(float32x4_t *)(v21 + 144);
          v103.i64[0] = vandq_s8(v76, (int8x16_t)vcgtq_f32((float32x4_t)v109, v111)).u64[0];
          v62.i64[0] = vandq_s8(v76, (int8x16_t)vcgtq_f32((float32x4_t)v110, v111)).u64[0];
          v89.i64[0] = v103.i64[0];
          v89.i64[1] = v107.i64[1];
          v85.i64[0] = v62.i64[0];
          v85.i64[1] = v108.i64[1];
          v113 = (float32x4_t)vdupq_lane_s64(vandq_s8(v76, (int8x16_t)vcgtq_f32(v112, (float32x4_t)v109)).i64[0], 0);
          v114 = (float32x4_t)vdupq_lane_s64(vandq_s8(v76, (int8x16_t)vcgtq_f32(v112, (float32x4_t)v110)).i64[0], 0);
          v115 = vdupq_laneq_s64((int64x2_t)v113, 1).u64[0];
          v113.i64[0] = v109.i64[0];
          v116.i64[0] = v109.i64[0];
          v116.i64[1] = v115;
          v117 = vdupq_laneq_s64((int64x2_t)v114, 1).u64[0];
          v114.i64[0] = v110.i64[0];
          v118.i64[0] = v110.i64[0];
          v118.i64[1] = v117;
          v119.i64[0] = v109.i64[0];
          v119.i64[1] = vmaxq_f32(v113, (float32x4_t)vrev64q_s32(v116)).i64[1];
          v120 = vmaxq_f32(v114, (float32x4_t)vrev64q_s32(v118));
          v114.i64[0] = v110.i64[0];
          v114.i64[1] = v120.i64[1];
          v120.i64[0] = vdupq_laneq_s64((int64x2_t)v107, 1).u64[0];
          v103.i64[1] = v120.i64[0];
          v116.i64[0] = vdupq_laneq_s64((int64x2_t)v108, 1).u64[0];
          v62.i64[1] = v116.i64[0];
          v121 = (int32x4_t)vmaxq_f32(v89, (float32x4_t)vrev64q_s32(v103));
          v122 = (int32x4_t)vmaxq_f32((float32x4_t)v85, (float32x4_t)vrev64q_s32((int32x4_t)v62));
          v109.i64[1] = vmaxq_f32(v119, (float32x4_t)vextq_s8(v107, *(int8x16_t *)&v121, 8uLL)).i64[1];
          v110.i64[1] = vmaxq_f32(v114, (float32x4_t)vextq_s8(v108, *(int8x16_t *)&v122, 8uLL)).i64[1];
          v109.i64[0] = vmaxq_f32((float32x4_t)v109, v112).u64[0];
          v110.i64[0] = vmaxq_f32((float32x4_t)v110, v112).u64[0];
          v121.i64[1] = v120.i64[0];
          v123 = (float32x4_t)vrev64q_s32(v121);
          v122.i64[1] = v116.i64[0];
          v124 = (float32x4_t)vrev64q_s32(v122);
          v125 = (float32x4_t)vextq_s8(v55, v55, 4uLL);
          v126 = (int32x4_t)vbslq_s8(v77, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v77, (int8x16_t)vaddq_f32(v125, v123), v109), (float32x4_t)v55, 2), v109);
          v127 = (int32x4_t)vbslq_s8(v77, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v77, (int8x16_t)vaddq_f32(v125, v124), v110), (float32x4_t)v55, 2), v110);
          v110.i64[0] = vminq_f32((float32x4_t)v126, v111).u64[0];
          v110.i64[1] = v107.i64[1];
          v128.i64[0] = vminq_f32((float32x4_t)v127, v111).u64[0];
          v128.i64[1] = v108.i64[1];
          v129 = *((int *)a2 + 22);
          v130 = vsubq_f32((float32x4_t)v110, (float32x4_t)v9);
          v131 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v132 = vaddq_s32(vcvtq_s32_f32(v130), vcltzq_f32(v130));
            v133 = (float32x2_t)vsubq_f32(v130, vcvtq_f32_s32(v132)).u64[0];
            v134 = (float32x4_t *)(v131 + 16 * (v132.i32[0] + v132.i32[1] * (int)v129));
            v135 = vaddq_f32(*v134, vmulq_n_f32(vsubq_f32(v134[1], *v134), v133.f32[0]));
            v136 = (int8x16_t)vaddq_f32(v135, vmulq_lane_f32(vsubq_f32(vaddq_f32(v134[v129], vmulq_n_f32(vsubq_f32(v134[(int)v129 + 1], v134[v129]), v133.f32[0])), v135), v133, 1));
            v137 = vsubq_f32(v128, (float32x4_t)v9);
            v138 = vaddq_s32(vcvtq_s32_f32(v137), vcltzq_f32(v137));
            v137.i64[0] = vsubq_f32(v137, vcvtq_f32_s32(v138)).u64[0];
            v139 = (float32x4_t *)(v131 + 16 * (v138.i32[0] + v138.i32[1] * (int)v129));
            v140 = vaddq_f32(*v139, vmulq_n_f32(vsubq_f32(v139[1], *v139), v137.f32[0]));
            v141 = (int8x16_t)vaddq_f32(v140, vmulq_lane_f32(vsubq_f32(vaddq_f32(v139[v129], vmulq_n_f32(vsubq_f32(v139[(int)v129 + 1], v139[v129]), v137.f32[0])), v140), *(float32x2_t *)v137.f32, 1));
          }
          else
          {
            v142 = vaddq_f32(v130, v15);
            v143 = vcvtq_s32_f32(v142);
            v142.i64[0] = vaddq_s32(v143, vcgtq_f32(vcvtq_f32_s32(v143), v142)).u64[0];
            v136 = *(int8x16_t *)(v131 + 16 * (v142.i32[0] + v142.i32[1] * (int)v129));
            v144 = vaddq_f32(vsubq_f32(v128, (float32x4_t)v9), v15);
            v145 = vcvtq_s32_f32(v144);
            v144.i64[0] = vaddq_s32(v145, vcgtq_f32(vcvtq_f32_s32(v145), v144)).u64[0];
            v141 = *(int8x16_t *)(v131 + 16 * (v144.i32[0] + v144.i32[1] * (int)v129));
          }
          v146 = (float32x4_t)vextq_s8((int8x16_t)v126, (int8x16_t)v126, 0xCuLL);
          v147 = (float32x4_t)vextq_s8((int8x16_t)v127, (int8x16_t)v127, 0xCuLL);
          v148 = vminq_f32(vmaxq_f32(vrecpeq_f32(v146), v50), v31);
          v149 = vminq_f32(vmaxq_f32(vrecpeq_f32(v147), v50), v31);
          v150 = vminq_f32(vmaxq_f32(vmulq_f32(v148, vrecpsq_f32(v146, v148)), v50), v31);
          v151 = vminq_f32(vmaxq_f32(vmulq_f32(v149, vrecpsq_f32(v147, v149)), v50), v31);
          v152.i64[0] = vmulq_laneq_f32(vmulq_f32(v150, vrecpsq_f32(v146, v150)), (float32x4_t)v107, 2).u64[0];
          v151.i64[0] = vmulq_laneq_f32(vmulq_f32(v151, vrecpsq_f32(v147, v151)), (float32x4_t)v108, 2).u64[0];
          v152.i64[1] = v126.i64[1];
          v151.i64[1] = v127.i64[1];
          v153 = *(float32x4_t *)(v21 + 288);
          v154 = *(int8x16_t *)(v21 + 304);
          v155 = vaddq_f32(v30, vmulq_f32(v153, v152));
          v156 = vaddq_f32(v30, vmulq_f32(v153, v151));
          v157 = vminq_f32(vmaxq_f32(v155, (float32x4_t)v154), (float32x4_t)v76);
          v158 = (float32x4_t)vextq_s8(v55, v55, 0xCuLL);
          v159 = vsubq_f32(vmulq_laneq_f32(v157, (float32x4_t)v55, 3), v158);
          v160 = vaddq_f32(*(float32x4_t *)(v12 + v18), vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v127, 2), (float32x4_t)v154), v154, v141), *(float32x4_t *)(v12 + v18)), vaddq_f32((float32x4_t)v76, vsubq_f32(vmulq_laneq_f32(vminq_f32(vmaxq_f32(v156, (float32x4_t)v154), (float32x4_t)v76), (float32x4_t)v55, 3), v158)).f32[0]));
          v161 = (float32x4_t *)(v11 + v18);
          v161[-1] = vaddq_f32(*(float32x4_t *)(v12 + v18 - 16), vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v126, 2), (float32x4_t)v154), v154, v136), *(float32x4_t *)(v12 + v18 - 16)), vaddq_f32((float32x4_t)v76, v159).f32[0]));
          *v161 = v160;
          v19 = vaddq_f32(v20, (float32x4_t)xmmword_1B304F230);
          v17 -= 2;
          v18 += 32;
        }
        while (v10 + v17 > 1);
        v162 = -v17;
      }
      if ((int)v162 < v10)
      {
        v163 = *((_QWORD *)this + 51);
        v164 = (int8x16_t)vmulq_f32(v19, *(float32x4_t *)(v163 + 64));
        v165 = (int8x16_t)vaddq_f32((float32x4_t)v164, (float32x4_t)vextq_s8(v164, v164, 4uLL));
        v166 = vaddq_f32((float32x4_t)vextq_s8(v165, v165, 8uLL), (float32x4_t)v165);
        v167 = *(float32x4_t *)(v163 + 160);
        v168 = *(float32x4_t *)(v163 + 176);
        v169 = vminq_f32(vmaxq_f32(vrecpeq_f32(v166), v167), v168);
        v170 = vminq_f32(vmaxq_f32(vmulq_f32(v169, vrecpsq_f32(v166, v169)), v167), v168);
        v171 = vmulq_f32(v170, vrecpsq_f32(v166, v170));
        v172 = (int8x16_t)vmulq_f32(v19, *(float32x4_t *)(v163 + 48));
        v173 = (int8x16_t)vaddq_f32((float32x4_t)v172, (float32x4_t)vextq_s8(v172, v172, 4uLL));
        v173.i64[0] = vaddq_f32((float32x4_t)v173, (float32x4_t)vdupq_laneq_s64((int64x2_t)v173, 1)).u64[0];
        v173.i64[1] = v171.i64[1];
        v174 = (int8x16_t)vmulq_f32(v19, *(float32x4_t *)(v163 + 32));
        v175 = (int8x16_t)vaddq_f32((float32x4_t)v174, (float32x4_t)vextq_s8(v174, v174, 4uLL));
        v177 = *(int8x16_t *)(v163 + 192);
        v176 = *(float32x4_t *)(v163 + 208);
        v178 = (float32x4_t)vbslq_s8(v177, (int8x16_t)vaddq_f32((float32x4_t)v175, (float32x4_t)vextq_s8(v175, v175, 8uLL)), v173);
        v179 = vmulq_laneq_f32(v178, v178, 2);
        v180 = *(int32x4_t *)(v163 + 16);
        v181 = (int8x16_t)vsubq_f32(v179, *(float32x4_t *)v163);
        v182 = vmulq_f32((float32x4_t)v181, (float32x4_t)v181);
        v183 = (int8x16_t)vaddq_f32(v182, (float32x4_t)vrev64q_s32((int32x4_t)v182));
        v184.i64[0] = v181.i64[0];
        v184.i64[1] = vmaxq_f32((float32x4_t)vextq_s8(v183, v183, 8uLL), v176).i64[1];
        v185 = vminq_f32(vrsqrteq_f32(v184), v168);
        v186 = vminq_f32(vmulq_f32(v185, vrsqrtsq_f32(vmulq_f32(v185, v184), v185)), v168);
        v181.i64[1] = vmulq_f32(v186, vrsqrtsq_f32(vmulq_f32(v186, v184), v186)).i64[1];
        v187 = (int32x4_t)vmulq_n_f32((float32x4_t)v181, *(float *)v183.i32);
        v188 = (float32x4_t)vextq_s8((int8x16_t)v180, (int8x16_t)v180, 8uLL);
        v189 = vminq_f32(vmaxq_f32(vrecpeq_f32(v188), v176), v168);
        v190 = vminq_f32(vmaxq_f32(vmulq_f32(v189, vrecpsq_f32(v188, v189)), v176), v168);
        v191 = vmaxq_f32(vmulq_laneq_f32(vmulq_f32(v190, vrecpsq_f32(v188, v190)), (float32x4_t)v187, 2), v167);
        v192 = *(int8x16_t *)(v163 + 224);
        v193 = *(int8x16_t *)(v163 + 240);
        v194 = (float32x4_t)vbslq_s8(v193, (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v187), vmulq_n_f32((float32x4_t)vbslq_s8(v193, (int8x16_t)vminq_f32(v191, (float32x4_t)v192), v181), *(float *)v180.i32)), v181);
        v191.i64[0] = vmulq_laneq_f32(v194, v194, 2).u64[0];
        v191.i64[1] = v194.i64[1];
        v195 = (int8x16_t)vaddq_f32(*(float32x4_t *)v163, vmulq_laneq_f32(v191, v194, 3));
        v196 = v195;
        v196.i32[3] = 1.0;
        v195.i64[1] = vextq_s8(v196, v196, 8uLL).u64[0];
        v197 = *(int8x16_t *)(v163 + 256);
        *(int8x8_t *)v198.f32 = vqtbl1_s8(v195, *(int8x8_t *)v197.i8);
        *(int8x8_t *)&v198.u32[2] = vqtbl1_s8(v195, (int8x8_t)*(_OWORD *)&vextq_s8(v197, v197, 8uLL));
        v199 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v163 + 112), v198);
        v200 = vadd_f32(*(float32x2_t *)v199.i8, (float32x2_t)vrev64_s32(*(int32x2_t *)v199.i8));
        v201 = vextq_s8(v199, v199, 8uLL);
        *(float32x2_t *)v201.i8 = vadd_f32(*(float32x2_t *)v201.i8, v200);
        *(int8x8_t *)v195.i8 = vext_s8(*(int8x8_t *)v201.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v187, (int8x16_t)v187, 8uLL), 4uLL);
        v195.i64[1] = vextq_s8((int8x16_t)v187, v201, 0xCuLL).u64[0];
        v202 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v195), v176), v168);
        v203 = vminq_f32(vmaxq_f32(vmulq_f32(v202, vrecpsq_f32((float32x4_t)v195, v202)), v176), v168);
        v204 = vbslq_s8(*(int8x16_t *)(v163 + 272), (int8x16_t)v187, (int8x16_t)vmulq_f32(v203, vrecpsq_f32((float32x4_t)v195, v203)));
        v205 = (int32x4_t)vmulq_f32(v198, *(float32x4_t *)(v163 + 96));
        v205.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v205, v9, 4uLL), vaddq_f32((float32x4_t)v205, (float32x4_t)vrev64q_s32(v205))).u64[0];
        v205.i64[1] = v204.i64[1];
        v206 = (int32x4_t)vmulq_f32(v198, *(float32x4_t *)(v163 + 80));
        v207 = vbslq_s8(v177, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v206, (int8x16_t)v206, 8uLL), vaddq_f32((float32x4_t)v206, (float32x4_t)vrev64q_s32(v206))), (int8x16_t)v205);
        v208 = (int8x16_t)vmulq_laneq_f32(vmulq_laneq_f32((float32x4_t)v207, (float32x4_t)v207, 3), (float32x4_t)v180, 2);
        v210 = *(float32x4_t *)(v163 + 128);
        v209 = *(float32x4_t *)(v163 + 144);
        v187.i64[0] = vandq_s8(v192, (int8x16_t)vcgtq_f32((float32x4_t)v208, v209)).u64[0];
        v191.i64[0] = v187.i64[0];
        v191.i64[1] = v207.i64[1];
        v211 = (float32x4_t)vdupq_lane_s64(vandq_s8(v192, (int8x16_t)vcgtq_f32(v210, (float32x4_t)v208)).i64[0], 0);
        v212 = vdupq_laneq_s64((int64x2_t)v211, 1).u64[0];
        v211.i64[0] = v208.i64[0];
        v213.i64[0] = v208.i64[0];
        v213.i64[1] = v212;
        v214.i64[0] = v208.i64[0];
        v214.i64[1] = vmaxq_f32(v211, (float32x4_t)vrev64q_s32(v213)).i64[1];
        v211.i64[0] = vdupq_laneq_s64((int64x2_t)v207, 1).u64[0];
        v187.i64[1] = v211.i64[0];
        v215 = (int32x4_t)vmaxq_f32(v191, (float32x4_t)vrev64q_s32(v187));
        v208.i64[1] = vmaxq_f32(v214, (float32x4_t)vextq_s8(v207, *(int8x16_t *)&v215, 8uLL)).i64[1];
        v208.i64[0] = vmaxq_f32((float32x4_t)v208, v210).u64[0];
        v215.i64[1] = v211.i64[0];
        v216 = (int32x4_t)vbslq_s8(v193, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v193, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v180, (int8x16_t)v180, 4uLL), (float32x4_t)vrev64q_s32(v215)), v208), (float32x4_t)v180, 2), v208);
        v209.i64[0] = vminq_f32((float32x4_t)v216, v209).u64[0];
        v209.i64[1] = v207.i64[1];
        v217 = *((int *)a2 + 22);
        v218 = vsubq_f32(v209, (float32x4_t)v9);
        v219 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v220 = vaddq_s32(vcvtq_s32_f32(v218), vcltzq_f32(v218));
          v221 = (float32x2_t)vsubq_f32(v218, vcvtq_f32_s32(v220)).u64[0];
          v222 = (float32x4_t *)(v219 + 16 * (v220.i32[0] + v220.i32[1] * (int)v217));
          v223 = vaddq_f32(*v222, vmulq_n_f32(vsubq_f32(v222[1], *v222), v221.f32[0]));
          v224 = (int8x16_t)vaddq_f32(v223, vmulq_lane_f32(vsubq_f32(vaddq_f32(v222[v217], vmulq_n_f32(vsubq_f32(v222[(int)v217 + 1], v222[v217]), v221.f32[0])), v223), v221, 1));
        }
        else
        {
          v225 = vaddq_f32(v218, v15);
          v226 = vcvtq_s32_f32(v225);
          v225.i64[0] = vaddq_s32(v226, vcgtq_f32(vcvtq_f32_s32(v226), v225)).u64[0];
          v224 = *(int8x16_t *)(v219 + 16 * (v225.i32[0] + v225.i32[1] * (int)v217));
        }
        v227 = (float32x4_t)vextq_s8((int8x16_t)v216, (int8x16_t)v216, 0xCuLL);
        v228 = vminq_f32(vmaxq_f32(vrecpeq_f32(v227), v176), v168);
        v229 = vminq_f32(vmaxq_f32(vmulq_f32(v228, vrecpsq_f32(v227, v228)), v176), v168);
        v229.i64[0] = vmulq_laneq_f32(vmulq_f32(v229, vrecpsq_f32(v227, v229)), (float32x4_t)v207, 2).u64[0];
        v229.i64[1] = v216.i64[1];
        *(float32x4_t *)(v11 + 16 * v162) = vaddq_f32(*(float32x4_t *)(v12 + 16 * v162), vmulq_n_f32(vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v216, 2), *(float32x4_t *)(v163 + 304)), *(int8x16_t *)(v163 + 304), v224), *(float32x4_t *)(v12 + 16 * v162)), vaddq_f32((float32x4_t)v192, vsubq_f32(vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v167, vmulq_f32(*(float32x4_t *)(v163 + 288), v229)),
                                                            *(float32x4_t *)(v163 + 304)),
                                                          (float32x4_t)v192),
                                                        (float32x4_t)v180,
                                                        3),
                                                      (float32x4_t)vdupq_laneq_s32(v180, 3))).f32[0]));
      }
      v16 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F240);
      v12 += v14;
      v11 += v13;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcBlackHole::GetDOD(HgcBlackHole *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 != 1)
  {
    if (a3)
    {
      v7 = &HGRectNull;
    }
    else
    {
      if ((*(int (**)(HgcBlackHole *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
      {
        v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        HGRectGrow(v5, v4, v6);
      }
      v7 = &HGRectInfinite;
    }
    return *(_QWORD *)v7;
  }
  return v5;
}

uint64_t HgcBlackHole::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 1)
    return *(_QWORD *)&a4.var0;
  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcBlackHole::HgcBlackHole(HgcBlackHole *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EE488;
  v3 = operator new();
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 160) = xmmword_1B3052A20;
  *(int32x4_t *)(v3 + 176) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 192) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 208) = xmmword_1B3052A30;
  *(_OWORD *)(v3 + 224) = xmmword_1B3051310;
  *(_OWORD *)(v3 + 240) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 256) = xmmword_1B30517F0;
  *(_OWORD *)(v3 + 272) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  *(_OWORD *)(v3 + 288) = xmmword_1B3052A40;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcBlackHole *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28A25D4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBlackHole::~HgcBlackHole(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EE488;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBlackHole::~HgcBlackHole(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBlackHole::SetParameter(HgcBlackHole *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  float *v16;
  float *v17;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_53;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_53;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_53;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_53;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_53;
    case 5:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[20] = a3;
      goto LABEL_53;
    case 6:
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[6].n128_f32[0] == a3.n128_f32[0]
        && v14[6].n128_f32[1] == a4
        && v14[6].n128_f32[2] == a6
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u32[0] = a3.n128_u32[0];
      v14[6].n128_f32[1] = a4;
      v14[6].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v14[6].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[21] = a3;
      goto LABEL_53;
    case 7:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[7].n128_f32[0] == a3.n128_f32[0]
        && v15[7].n128_f32[1] == a4
        && v15[7].n128_f32[2] == a6
        && v15[7].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v15[7].n128_u32[0] = a3.n128_u32[0];
      v15[7].n128_f32[1] = a4;
      v15[7].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v15[7].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[22] = a3;
      goto LABEL_53;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_53;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
LABEL_53:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcBlackHole::GetParameter(HgcBlackHole *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_12;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_12;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_12;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_12;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_12;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[80];
      a3[1] = v9[81];
      a3[2] = v9[82];
      v4 = v9 + 83;
      goto LABEL_12;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[84];
      a3[1] = v10[85];
      a3[2] = v10[86];
      v4 = v10 + 87;
      goto LABEL_12;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[88];
      a3[1] = v11[89];
      a3[2] = v11[90];
      v4 = v11 + 91;
      goto LABEL_12;
    case 8:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[32];
      a3[1] = v13[33];
      a3[2] = v13[34];
      v4 = v13 + 35;
      goto LABEL_12;
    case 9:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[36];
      a3[1] = v12[37];
      a3[2] = v12[38];
      v4 = v12 + 39;
LABEL_12:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcBulge::GetProgram(HgcBulge *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000483\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 3.000000000, 9.999999975e-07);\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    s0.xy = s0.xy*hg_Params[2].zw;\n"
             "    s0.z = dot(s0.xy, s0.xy);\n"
             "    s0.w = s0.z + float(c0.w);\n"
             "    s0.w = rsqrt(s0.w);\n"
             "    s0.z = s0.w*s0.z;\n"
             "    s0.z = clamp(-s0.z*hg_Params[1].x + float(c0.x), 0.00000f, 1.00000f);\n"
             "    s0.w = s0.z*float(c0.y) + float(c0.z);\n"
             "    s0.z = s0.z*s0.z;\n"
             "    s0.z = s0.z*s0.w;\n"
             "    s0.z = s0.z*hg_Params[1].y + float(c0.x);\n"
             "    s0.xy = s0.xy*s0.zz;\n"
             "    s0.xy = s0.xy*hg_Params[2].xy + hg_Params[0].xy;\n"
             "    s0.xy = s0.xy + hg_Params[3].xy;\n"
             "    s0.xy = s0.xy*hg_Params[3].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=92b92d6f:14d4cb0d:4ae8af5e:de26b470\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0004:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000045a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 3.000000000, 9.999999975e-07);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    r0.xy = r0.xy*hg_Params[2].zw;\n"
             "    r0.z = dot(r0.xy, r0.xy);\n"
             "    r0.w = r0.z + c0.w;\n"
             "    r0.w = rsqrt(r0.w);\n"
             "    r0.z = r0.w*r0.z;\n"
             "    r0.z = clamp(-r0.z*hg_Params[1].x + c0.x, 0.00000f, 1.00000f);\n"
             "    r0.w = r0.z*c0.y + c0.z;\n"
             "    r0.z = r0.z*r0.z;\n"
             "    r0.z = r0.z*r0.w;\n"
             "    r0.z = r0.z*hg_Params[1].y + c0.x;\n"
             "    r0.xy = r0.xy*r0.zz;\n"
             "    r0.xy = r0.xy*hg_Params[2].xy + hg_Params[0].xy;\n"
             "    r0.xy = r0.xy + hg_Params[3].xy;\n"
             "    r0.xy = r0.xy*hg_Params[3].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=70c635f2:cc98e99c:085238fa:c321cd3a\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0004:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004b3\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.000000000, -2.000000000, 3.000000000, 9.999999975e-07);\n"
           "    highp vec4 r0;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy - hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal2.zw;\n"
           "    r0.z = dot(r0.xy, r0.xy);\n"
           "    r0.w = r0.z + c0.w;\n"
           "    r0.w = inversesqrt(r0.w);\n"
           "    r0.z = r0.w*r0.z;\n"
           "    r0.z = clamp(-r0.z*hg_ProgramLocal1.x + c0.x, 0.00000, 1.00000);\n"
           "    r0.w = r0.z*c0.y + c0.z;\n"
           "    r0.z = r0.z*r0.z;\n"
           "    r0.z = r0.z*r0.w;\n"
           "    r0.z = r0.z*hg_ProgramLocal1.y + c0.x;\n"
           "    r0.xy = r0.xy*r0.zz;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal2.xy + hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal3.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal3.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=9586b2c2:73b3ed81:d68ee330:3bb33f85\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0004:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcBulge::InitProgramDescriptor(HgcBulge *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBulge_hgc_visible", "//Metal1.0     \n//LEN=0000000395\n[[ visible ]] FragmentOut HgcBulge_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 3.000000000, 9.999999975e-07);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy - hg_Params[0].xy;\n"
    "    r0.xy = r0.xy*hg_Params[2].zw;\n"
    "    r0.z = dot(r0.xy, r0.xy);\n"
    "    r0.w = r0.z + c0.w;\n"
    "    r0.w = rsqrt(r0.w);\n"
    "    r0.z = r0.w*r0.z;\n"
    "    r0.z = clamp(-r0.z*hg_Params[1].x + c0.x, 0.00000f, 1.00000f);\n"
    "    r0.w = r0.z*c0.y + c0.z;\n"
    "    r0.z = r0.z*r0.z;\n"
    "    r0.z = r0.z*r0.w;\n"
    "    r0.z = r0.z*hg_Params[1].y + c0.x;\n"
    "    r0.xy = r0.xy*r0.zz;\n"
    "    r0.xy = r0.xy*hg_Params[2].xy + hg_Params[0].xy;\n"
    "    r0.xy = r0.xy + hg_Params[3].xy;\n"
    "    r0.xy = r0.xy*hg_Params[3].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A2BB8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBulge");
}

void sub_1B28A2BC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A2D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A2D98()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A2D90);
}

_QWORD *HgcBulge::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBulge [hgc1]");
}

uint64_t HgcBulge::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcBulge::Bind(HgcBulge *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcBulge *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcBulge::RenderTile(HgcBulge *this, float32x4_t **a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  __int128 v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t *v91;
  int32x4_t v92;
  float32x2_t v93;
  float32x4_t *v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;
  float32x4_t *v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int32x4_t v103;
  float32x4_t *v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  float32x4_t *v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  float32x4_t v114;
  int32x4_t v115;
  float32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  int32x4_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  int8x16_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;
  int64x2_t v127;
  int8x16_t v128;
  int8x16_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int64x2_t v135;
  float32x4_t v136;
  int8x16_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  uint64_t v141;
  float32x4_t v142;
  float32x4_t *v143;
  int32x4_t v144;
  float32x2_t v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int32x4_t v150;

  v4 = HGTile::Renderer((HGTile *)a2);
  v5 = (*(uint64_t (**)(HgcBulge *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = (int32x2_t)*a2;
  v7 = *((_DWORD *)a2 + 3) - ((unint64_t)*a2 >> 32);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = a2[2];
    v12 = v11 + 2;
    v13 = 16 * *((int *)a2 + 6);
    v14.i64[0] = 0x3F0000003F000000;
    v14.i64[1] = 0x3F0000003F000000;
    v15 = (float32x4_t)v9;
    do
    {
      if (v10 < 4)
      {
        LODWORD(v120) = 0;
        v18 = v15;
      }
      else
      {
        v16 = 0;
        v17 = v12;
        v18 = v15;
        do
        {
          v19 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v20 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v21 = vaddq_f32(v20, (float32x4_t)xmmword_1B304F230);
          v22 = *((_QWORD *)this + 51);
          v23 = *(_OWORD *)(v22 + 16);
          v24 = vsubq_f32(v18, *(float32x4_t *)v22);
          v25 = *(int8x16_t *)(v22 + 32);
          v26 = *(float32x4_t *)(v22 + 48);
          v27 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
          v28 = vmulq_f32(v24, v27);
          v29 = vmulq_f32(vsubq_f32(v19, *(float32x4_t *)v22), v27);
          v30 = vmulq_f32(vsubq_f32(v20, *(float32x4_t *)v22), v27);
          v31 = vmulq_f32(vsubq_f32(v21, *(float32x4_t *)v22), v27);
          v32 = (int8x16_t)vmulq_f32(v28, v28);
          v33 = (int8x16_t)vmulq_f32(v29, v29);
          v34 = (int8x16_t)vmulq_f32(v30, v30);
          v35 = (int8x16_t)vmulq_f32(v31, v31);
          v36 = (int64x2_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v32.i64[0], 0), (float32x4_t)vextq_s8(v9, v32, 0xCuLL));
          v37 = (int64x2_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v33.i64[0], 0), (float32x4_t)vextq_s8(v9, v33, 0xCuLL));
          v38 = (int64x2_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v34.i64[0], 0), (float32x4_t)vextq_s8(v9, v34, 0xCuLL));
          v39 = (int64x2_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v35.i64[0], 0), (float32x4_t)vextq_s8(v9, v35, 0xCuLL));
          v40.i64[0] = v28.i64[0];
          v40.i64[1] = v36.i64[1];
          v41.i64[0] = v29.i64[0];
          v41.i64[1] = v37.i64[1];
          v42.i64[0] = v30.i64[0];
          v42.i64[1] = v38.i64[1];
          v43.i64[0] = v31.i64[0];
          v43.i64[1] = v39.i64[1];
          v28.i64[1] = vdupq_laneq_s64(v36, 1).u64[0];
          v29.i64[1] = vdupq_laneq_s64(v37, 1).u64[0];
          v30.i64[1] = vdupq_laneq_s64(v38, 1).u64[0];
          v31.i64[1] = vdupq_laneq_s64(v39, 1).u64[0];
          v44 = *(int8x16_t *)(v22 + 64);
          v45 = *(int8x16_t *)(v22 + 80);
          v46 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vaddq_f32(v26, (float32x4_t)vrev64q_s32((int32x4_t)v28)), v40);
          v47 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vaddq_f32(v26, (float32x4_t)vrev64q_s32((int32x4_t)v29)), v41);
          v48 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vaddq_f32(v26, (float32x4_t)vrev64q_s32((int32x4_t)v30)), v42);
          v49 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vaddq_f32(v26, (float32x4_t)vrev64q_s32((int32x4_t)v31)), v43);
          v50 = vminq_f32(vrsqrteq_f32(v46), (float32x4_t)v45);
          v51 = vminq_f32(vrsqrteq_f32(v47), (float32x4_t)v45);
          v52 = vminq_f32(vrsqrteq_f32(v48), (float32x4_t)v45);
          v53 = vminq_f32(vrsqrteq_f32(v49), (float32x4_t)v45);
          v54 = vminq_f32(vmulq_f32(v50, vrsqrtsq_f32(vmulq_f32(v50, v46), v50)), (float32x4_t)v45);
          v55 = vminq_f32(vmulq_f32(v51, vrsqrtsq_f32(vmulq_f32(v51, v47), v51)), (float32x4_t)v45);
          v56 = vminq_f32(vmulq_f32(v52, vrsqrtsq_f32(vmulq_f32(v52, v48), v52)), (float32x4_t)v45);
          v57 = vminq_f32(vmulq_f32(v53, vrsqrtsq_f32(vmulq_f32(v53, v49), v53)), (float32x4_t)v45);
          v58 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vmulq_f32(v54, vrsqrtsq_f32(vmulq_f32(v54, v46), v54)), v40);
          v59 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vmulq_f32(v55, vrsqrtsq_f32(vmulq_f32(v55, v47), v55)), v41);
          v60 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vmulq_f32(v56, vrsqrtsq_f32(vmulq_f32(v56, v48), v56)), v42);
          v61 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vmulq_f32(v57, vrsqrtsq_f32(vmulq_f32(v57, v49), v57)), v43);
          v42.i64[0] = v58.i64[0];
          v42.i64[1] = vmulq_laneq_f32(v58, v58, 3).i64[1];
          v54.i64[0] = v59.i64[0];
          v54.i64[1] = vmulq_laneq_f32(v59, v59, 3).i64[1];
          v55.i64[0] = v60.i64[0];
          v55.i64[1] = vmulq_laneq_f32(v60, v60, 3).i64[1];
          v40.i64[0] = v61.i64[0];
          v40.i64[1] = vmulq_laneq_f32(v61, v61, 3).i64[1];
          v62 = (int8x16_t)vmaxq_f32(vsubq_f32((float32x4_t)v45, vmulq_n_f32((float32x4_t)v42, *(float *)&v23)), v26);
          v63 = vmaxq_f32(vsubq_f32((float32x4_t)v45, vmulq_n_f32(v54, *(float *)&v23)), v26);
          v64 = vmaxq_f32(vsubq_f32((float32x4_t)v45, vmulq_n_f32(v55, *(float *)&v23)), v26);
          v65 = vmaxq_f32(vsubq_f32((float32x4_t)v45, vmulq_n_f32((float32x4_t)v40, *(float *)&v23)), v26);
          v66 = (int64x2_t)vminq_f32((float32x4_t)v62, (float32x4_t)v45);
          v67 = (int64x2_t)vminq_f32(v63, (float32x4_t)v45);
          v68 = (int64x2_t)vminq_f32(v64, (float32x4_t)v45);
          v69 = (int64x2_t)vminq_f32(v65, (float32x4_t)v45);
          v45.i64[0] = v58.i64[0];
          v45.i64[1] = v66.i64[1];
          v62.i64[0] = v59.i64[0];
          v62.i64[1] = v67.i64[1];
          v42.i64[0] = v60.i64[0];
          v42.i64[1] = v68.i64[1];
          v43.i64[0] = v61.i64[0];
          v43.i64[1] = v69.i64[1];
          v58.i64[1] = vdupq_laneq_s64(v66, 1).u64[0];
          v59.i64[1] = vdupq_laneq_s64(v67, 1).u64[0];
          v60.i64[1] = vdupq_laneq_s64(v68, 1).u64[0];
          v61.i64[1] = vdupq_laneq_s64(v69, 1).u64[0];
          v70 = *(float32x4_t *)(v22 + 96);
          v71 = *(float32x4_t *)(v22 + 112);
          v72 = vbslq_s8(v44, (int8x16_t)vaddq_f32(v70, vmulq_f32((float32x4_t)vrev64q_s32((int32x4_t)v58), v71)), v45);
          v73 = vbslq_s8(v44, (int8x16_t)vaddq_f32(v70, vmulq_f32((float32x4_t)vrev64q_s32((int32x4_t)v59), v71)), v62);
          v74 = vbslq_s8(v44, (int8x16_t)vaddq_f32(v70, vmulq_f32((float32x4_t)vrev64q_s32((int32x4_t)v60), v71)), v42);
          v75 = vbslq_s8(v44, (int8x16_t)vaddq_f32(v70, vmulq_f32((float32x4_t)vrev64q_s32((int32x4_t)v61), v71)), v43);
          v76 = *(int8x16_t *)(v22 + 128);
          v77 = (float32x4_t)vbslq_s8(v76, (int8x16_t)vmulq_f32((float32x4_t)v72, (float32x4_t)v72), v72);
          v78 = (float32x4_t)vbslq_s8(v76, (int8x16_t)vmulq_f32((float32x4_t)v73, (float32x4_t)v73), v73);
          v79 = (float32x4_t)vbslq_s8(v76, (int8x16_t)vmulq_f32((float32x4_t)v74, (float32x4_t)v74), v74);
          v80 = (float32x4_t)vbslq_s8(v76, (int8x16_t)vmulq_f32((float32x4_t)v75, (float32x4_t)v75), v75);
          v81 = vaddq_f32(v71, vmulq_lane_f32(vmulq_laneq_f32(v77, v77, 3), *(float32x2_t *)&v23, 1));
          v82 = vaddq_f32(v71, vmulq_lane_f32(vmulq_laneq_f32(v78, v78, 3), *(float32x2_t *)&v23, 1));
          v83 = vaddq_f32(v71, vmulq_lane_f32(vmulq_laneq_f32(v79, v79, 3), *(float32x2_t *)&v23, 1));
          v77.i64[1] = v81.i64[1];
          v78.i64[1] = v82.i64[1];
          v79.i64[1] = v83.i64[1];
          v84 = vaddq_f32(v71, vmulq_lane_f32(vmulq_laneq_f32(v80, v80, 3), *(float32x2_t *)&v23, 1));
          v80.i64[1] = v84.i64[1];
          v85 = vaddq_f32(*(float32x4_t *)v22, vmulq_f32((float32x4_t)v25, vmulq_laneq_f32(v77, v81, 2)));
          v86 = vaddq_f32(*(float32x4_t *)v22, vmulq_f32((float32x4_t)v25, vmulq_laneq_f32(v78, v82, 2)));
          v87 = vaddq_f32(*(float32x4_t *)v22, vmulq_f32((float32x4_t)v25, vmulq_laneq_f32(v79, v83, 2)));
          v88 = vaddq_f32(*(float32x4_t *)v22, vmulq_f32((float32x4_t)v25, vmulq_laneq_f32(v80, v84, 2)));
          v89 = *((int *)a2 + 22);
          v90 = vsubq_f32(v85, (float32x4_t)v9);
          v91 = a2[10];
          if (v5)
          {
            v92 = vaddq_s32(vcvtq_s32_f32(v90), vcltzq_f32(v90));
            v93 = (float32x2_t)vsubq_f32(v90, vcvtq_f32_s32(v92)).u64[0];
            v94 = &v91[v92.i32[0] + v92.i32[1] * (int)v89];
            v95 = vaddq_f32(*v94, vmulq_n_f32(vsubq_f32(v94[1], *v94), v93.f32[0]));
            v96 = vaddq_f32(v95, vmulq_lane_f32(vsubq_f32(vaddq_f32(v94[v89], vmulq_n_f32(vsubq_f32(v94[(int)v89 + 1], v94[v89]), v93.f32[0])), v95), v93, 1));
            v97 = vsubq_f32(v86, (float32x4_t)v9);
            v98 = vaddq_s32(vcvtq_s32_f32(v97), vcltzq_f32(v97));
            v97.i64[0] = vsubq_f32(v97, vcvtq_f32_s32(v98)).u64[0];
            v99 = &v91[v98.i32[0] + v98.i32[1] * (int)v89];
            v100 = vaddq_f32(*v99, vmulq_n_f32(vsubq_f32(v99[1], *v99), v97.f32[0]));
            v101 = vaddq_f32(v100, vmulq_lane_f32(vsubq_f32(vaddq_f32(v99[v89], vmulq_n_f32(vsubq_f32(v99[(int)v89 + 1], v99[v89]), v97.f32[0])), v100), *(float32x2_t *)v97.f32, 1));
            v102 = vsubq_f32(v87, (float32x4_t)v9);
            v103 = vaddq_s32(vcvtq_s32_f32(v102), vcltzq_f32(v102));
            v102.i64[0] = vsubq_f32(v102, vcvtq_f32_s32(v103)).u64[0];
            v104 = &v91[v103.i32[0] + v103.i32[1] * (int)v89];
            v105 = vaddq_f32(*v104, vmulq_n_f32(vsubq_f32(v104[1], *v104), v102.f32[0]));
            v106 = vaddq_f32(v105, vmulq_lane_f32(vsubq_f32(vaddq_f32(v104[v89], vmulq_n_f32(vsubq_f32(v104[(int)v89 + 1], v104[v89]), v102.f32[0])), v105), *(float32x2_t *)v102.f32, 1));
            v107 = vsubq_f32(v88, (float32x4_t)v9);
            v108 = vaddq_s32(vcvtq_s32_f32(v107), vcltzq_f32(v107));
            v107.i64[0] = vsubq_f32(v107, vcvtq_f32_s32(v108)).u64[0];
            v109 = &v91[v108.i32[0] + v108.i32[1] * (int)v89];
            v110 = vaddq_f32(*v109, vmulq_n_f32(vsubq_f32(v109[1], *v109), v107.f32[0]));
            v111 = vaddq_f32(v110, vmulq_lane_f32(vsubq_f32(vaddq_f32(v109[v89], vmulq_n_f32(vsubq_f32(v109[(int)v89 + 1], v109[v89]), v107.f32[0])), v110), *(float32x2_t *)v107.f32, 1));
          }
          else
          {
            v112 = vaddq_f32(v90, v14);
            v113 = vcvtq_s32_f32(v112);
            v112.i64[0] = vaddq_s32(v113, vcgtq_f32(vcvtq_f32_s32(v113), v112)).u64[0];
            v96 = v91[v112.i32[0] + v112.i32[1] * (int)v89];
            v114 = vaddq_f32(vsubq_f32(v86, (float32x4_t)v9), v14);
            v115 = vcvtq_s32_f32(v114);
            v114.i64[0] = vaddq_s32(v115, vcgtq_f32(vcvtq_f32_s32(v115), v114)).u64[0];
            v101 = v91[v114.i32[0] + v114.i32[1] * (int)v89];
            v116 = vaddq_f32(vsubq_f32(v87, (float32x4_t)v9), v14);
            v117 = vcvtq_s32_f32(v116);
            v116.i64[0] = vaddq_s32(v117, vcgtq_f32(vcvtq_f32_s32(v117), v116)).u64[0];
            v106 = v91[v116.i32[0] + v116.i32[1] * (int)v89];
            v118 = vaddq_f32(vsubq_f32(v88, (float32x4_t)v9), v14);
            v119 = vcvtq_s32_f32(v118);
            v118.i64[0] = vaddq_s32(v119, vcgtq_f32(vcvtq_f32_s32(v119), v118)).u64[0];
            v111 = v91[v118.i32[0] + v118.i32[1] * (int)v89];
          }
          v17[-2] = v96;
          v17[-1] = v101;
          *v17 = v106;
          v17[1] = v111;
          v17 += 4;
          v18 = vaddq_f32(v21, (float32x4_t)xmmword_1B304F230);
          v16 -= 4;
        }
        while (v10 + v16 > 3);
        LODWORD(v120) = -v16;
      }
      if ((int)v120 < v10)
      {
        v120 = v120;
        do
        {
          v121 = *((_QWORD *)this + 51);
          v122 = *(_OWORD *)(v121 + 16);
          v123 = *(int8x16_t *)(v121 + 32);
          v124 = *(float32x4_t *)(v121 + 48);
          v125 = vmulq_f32(vsubq_f32(v18, *(float32x4_t *)v121), (float32x4_t)vextq_s8(v123, v123, 8uLL));
          v126 = (int8x16_t)vmulq_f32(v125, v125);
          v127 = (int64x2_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v126.i64[0], 0), (float32x4_t)vextq_s8(v9, v126, 0xCuLL));
          v128.i64[0] = v125.i64[0];
          v128.i64[1] = v127.i64[1];
          v125.i64[1] = vdupq_laneq_s64(v127, 1).u64[0];
          v129 = *(int8x16_t *)(v121 + 64);
          v130 = *(float32x4_t *)(v121 + 80);
          v131 = (float32x4_t)vbslq_s8(v129, (int8x16_t)vaddq_f32(v124, (float32x4_t)vrev64q_s32((int32x4_t)v125)), v128);
          v132 = vminq_f32(vrsqrteq_f32(v131), v130);
          v133 = vminq_f32(vmulq_f32(v132, vrsqrtsq_f32(vmulq_f32(v132, v131), v132)), v130);
          v134 = (float32x4_t)vbslq_s8(v129, (int8x16_t)vmulq_f32(v133, vrsqrtsq_f32(vmulq_f32(v133, v131), v133)), v128);
          v133.i64[0] = v134.i64[0];
          v133.i64[1] = vmulq_laneq_f32(v134, v134, 3).i64[1];
          v135 = (int64x2_t)vminq_f32(vmaxq_f32(vsubq_f32(v130, vmulq_n_f32(v133, *(float *)&v122)), v124), v130);
          v128.i64[0] = v134.i64[0];
          v128.i64[1] = v135.i64[1];
          v134.i64[1] = vdupq_laneq_s64(v135, 1).u64[0];
          v136 = *(float32x4_t *)(v121 + 112);
          v137 = vbslq_s8(v129, (int8x16_t)vaddq_f32(*(float32x4_t *)(v121 + 96), vmulq_f32(v136, (float32x4_t)vrev64q_s32((int32x4_t)v134))), v128);
          v138 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v121 + 128), (int8x16_t)vmulq_f32((float32x4_t)v137, (float32x4_t)v137), v137);
          v139 = vaddq_f32(v136, vmulq_lane_f32(vmulq_laneq_f32(v138, v138, 3), *(float32x2_t *)&v122, 1));
          v138.i64[1] = v139.i64[1];
          v140 = vaddq_f32(*(float32x4_t *)v121, vmulq_f32((float32x4_t)v123, vmulq_laneq_f32(v138, v139, 2)));
          v141 = *((int *)a2 + 22);
          v142 = vsubq_f32(v140, (float32x4_t)v9);
          v143 = a2[10];
          if (v5)
          {
            v144 = vaddq_s32(vcvtq_s32_f32(v142), vcltzq_f32(v142));
            v145 = (float32x2_t)vsubq_f32(v142, vcvtq_f32_s32(v144)).u64[0];
            v146 = &v143[v144.i32[0] + v144.i32[1] * (int)v141];
            v147 = vaddq_f32(*v146, vmulq_n_f32(vsubq_f32(v146[1], *v146), v145.f32[0]));
            v148 = vaddq_f32(v147, vmulq_lane_f32(vsubq_f32(vaddq_f32(v146[v141], vmulq_n_f32(vsubq_f32(v146[(int)v141 + 1], v146[v141]), v145.f32[0])), v147), v145, 1));
          }
          else
          {
            v149 = vaddq_f32(v142, v14);
            v150 = vcvtq_s32_f32(v149);
            v149.i64[0] = vaddq_s32(v150, vcgtq_f32(vcvtq_f32_s32(v150), v149)).u64[0];
            v148 = v143[v149.i32[0] + v149.i32[1] * (int)v141];
          }
          v11[v120] = v148;
          v18 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          ++v120;
        }
        while (v120 < v10);
      }
      v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v12 = (float32x4_t *)((char *)v12 + v13);
      v11 = (float32x4_t *)((char *)v11 + v13);
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcBulge::GetDOD(HgcBulge *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcBulge *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcBulge::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcBulge::HgcBulge(HgcBulge *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EE6F0;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = xmmword_1B3052A80;
  v3[4] = xmmword_1B3050F70;
  v3[5] = xmmword_1B3052A90;
  v3[6] = xmmword_1B3052AA0;
  v3[7] = xmmword_1B3052AB0;
  v3[8] = xmmword_1B3050FE0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcBulge *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28A38B0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBulge::~HgcBulge(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EE6F0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40265AC83CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBulge::~HgcBulge(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBulge::SetParameter(HgcBulge *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcBulge::GetParameter(HgcBulge *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcBumpMap::GetProgram(HgcBumpMap *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000617\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 255.0000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = (half2) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xy;\n"
             "    r1.x = half(hg_Params[5].x) - c0.x;\n"
             "    r2 = select(c0.xyyy, half4(hg_Params[1]), -r1.xxxx < 0.00000h);\n"
             "    r1.z = dot(half4(frag._texCoord1), r2);\n"
             "    r2 = select(c0.yxyy, half4(hg_Params[2]), -r1.xxxx < 0.00000h);\n"
             "    r1.w = dot(half4(frag._texCoord1), r2);\n"
             "    r0.y = clamp(r0.y, 0.00000h, 1.00000h);\n"
             "    r0.x = clamp(r0.x, 0.00000h, 1.00000h);\n"
             "    r2.xyw = select(c0.xyy, half3(hg_Params[3].xyw), -r1.xxx < 0.00000h);\n"
             "    r0.xy = r0.xy*c0.zz;\n"
             "    s0.xy = float2(r0.xy)*hg_Params[0].xy + float2(r1.zw);\n"
             "    r1.xyw = select(c0.yxy, half3(hg_Params[4].xyw), -r1.xxx < 0.00000h);\n"
             "    s0.w = float(c0.x);\n"
             "    s1.y = dot(s0.xyw, float3(r1.xyw));\n"
             "    s1.x = dot(s0.xyw, float3(r2.xyw));\n"
             "    s1.xy = s1.xy + hg_Params[6].xy;\n"
             "    s1.xy = s1.xy*hg_Params[6].zw;\n"
             "    output.color0 = (float4) hg_Texture1.sample(hg_Sampler1, s1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=77c07abe:e65ef4dd:22b8dffd:3b7bdcb8\n"
             "//SIG=00400000:00000001:00000001:00000003:0001:0007:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000005a1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 255.0000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xy;\n"
             "    r1.x = hg_Params[5].x - c0.x;\n"
             "    r2 = select(c0.xyyy, hg_Params[1], -r1.xxxx < 0.00000f);\n"
             "    r1.z = dot(frag._texCoord1, r2);\n"
             "    r2 = select(c0.yxyy, hg_Params[2], -r1.xxxx < 0.00000f);\n"
             "    r1.w = dot(frag._texCoord1, r2);\n"
             "    r0.y = clamp(r0.y, 0.00000f, 1.00000f);\n"
             "    r0.x = clamp(r0.x, 0.00000f, 1.00000f);\n"
             "    r2.xyw = select(c0.xyy, hg_Params[3].xyw, -r1.xxx < 0.00000f);\n"
             "    r0.xy = r0.xy*c0.zz;\n"
             "    r0.xy = r0.xy*hg_Params[0].xy + r1.zw;\n"
             "    r1.xyw = select(c0.yxy, hg_Params[4].xyw, -r1.xxx < 0.00000f);\n"
             "    r0.w = c0.x;\n"
             "    r1.y = dot(r0.xyw, r1.xyw);\n"
             "    r1.x = dot(r0.xyw, r2.xyw);\n"
             "    r1.xy = r1.xy + hg_Params[6].xy;\n"
             "    r1.xy = r1.xy*hg_Params[6].zw;\n"
             "    output.color0 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=661bfc5c:5c0c5fd2:30595d2a:723dd8a0\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0007:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000007e4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.000000000, 0.000000000, 255.0000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = texture2D(hg_Texture0, hg_TexCoord0.xy).xy;\n"
           "    r1.x = hg_ProgramLocal5.x - c0.x;\n"
           "    r2 = vec4(-r1.x < 0.00000 ? hg_ProgramLocal1.x : c0.x, -r1.x < 0.00000 ? hg_ProgramLocal1.y : c0.y, -r1.x"
           " < 0.00000 ? hg_ProgramLocal1.z : c0.y, -r1.x < 0.00000 ? hg_ProgramLocal1.w : c0.y);\n"
           "    r1.z = dot(hg_TexCoord1, r2);\n"
           "    r2 = vec4(-r1.x < 0.00000 ? hg_ProgramLocal2.x : c0.y, -r1.x < 0.00000 ? hg_ProgramLocal2.y : c0.x, -r1.x"
           " < 0.00000 ? hg_ProgramLocal2.z : c0.y, -r1.x < 0.00000 ? hg_ProgramLocal2.w : c0.y);\n"
           "    r1.w = dot(hg_TexCoord1, r2);\n"
           "    r0.y = clamp(r0.y, 0.00000, 1.00000);\n"
           "    r0.x = clamp(r0.x, 0.00000, 1.00000);\n"
           "    r2.xyw = vec3(-r1.x < 0.00000 ? hg_ProgramLocal3.x : c0.x, -r1.x < 0.00000 ? hg_ProgramLocal3.y : c0.y, -"
           "r1.x < 0.00000 ? hg_ProgramLocal3.w : c0.y);\n"
           "    r0.xy = r0.xy*c0.zz;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal0.xy + r1.zw;\n"
           "    r1.xyw = vec3(-r1.x < 0.00000 ? hg_ProgramLocal4.x : c0.y, -r1.x < 0.00000 ? hg_ProgramLocal4.y : c0.x, -"
           "r1.x < 0.00000 ? hg_ProgramLocal4.w : c0.y);\n"
           "    r0.w = c0.x;\n"
           "    r1.y = dot(r0.xyw, r1.xyw);\n"
           "    r1.x = dot(r0.xyw, r2.xyw);\n"
           "    r1.xy = r1.xy + hg_ProgramLocal6.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal6.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture1, r1.xy);\n"
           "}\n"
           "//MD5=8b17983a:4fa93b82:a3f4a4c4:8b754c50\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0007:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcBumpMap::InitProgramDescriptor(HgcBumpMap *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBumpMap_hgc_visible", "//Metal1.0     \n//LEN=000000045d\n[[ visible ]] FragmentOut HgcBumpMap_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 255.0000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = color0.xy;\n"
    "    r1.x = hg_Params[5].x - c0.x;\n"
    "    r2 = select(c0.xyyy, hg_Params[1], -r1.xxxx < 0.00000f);\n"
    "    r1.z = dot(texCoord1, r2);\n"
    "    r2 = select(c0.yxyy, hg_Params[2], -r1.xxxx < 0.00000f);\n"
    "    r1.w = dot(texCoord1, r2);\n"
    "    r0.y = clamp(r0.y, 0.00000f, 1.00000f);\n"
    "    r0.x = clamp(r0.x, 0.00000f, 1.00000f);\n"
    "    r2.xyw = select(c0.xyy, hg_Params[3].xyw, -r1.xxx < 0.00000f);\n"
    "    r0.xy = r0.xy*c0.zz;\n"
    "    r0.xy = r0.xy*hg_Params[0].xy + r1.zw;\n"
    "    r1.xyw = select(c0.yxy, hg_Params[4].xyw, -r1.xxx < 0.00000f);\n"
    "    r0.w = c0.x;\n"
    "    r1.y = dot(r0.xyw, r1.xyw);\n"
    "    r1.x = dot(r0.xyw, r2.xyw);\n"
    "    r1.xy = r1.xy + hg_Params[6].xy;\n"
    "    r1.xy = r1.xy*hg_Params[6].zw;\n"
    "    output.color0 = hg_Texture1.sample(hg_Sampler1, r1.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A3AB8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBumpMap");
}

void sub_1B28A3AC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A3C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A3CE0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A3CD8);
}

_QWORD *HgcBumpMap::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBumpMap [hgc1]");
}

uint64_t HgcBumpMap::BindTexture(HgcBumpMap *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  if (a3 == 1)
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v8.n128_u32[0] = 1.0;
      v9.n128_u32[0] = 1.0;
    }
    else
    {
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v6.n128_f32[0] = (float)*((int *)a2 + 60);
    v7.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 6, v6, v7, v8, v9);
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v4)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  return 0;
}

uint64_t HgcBumpMap::Bind(HgcBumpMap *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcBumpMap *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcBumpMap::RenderTile(HgcBumpMap *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  int v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  float32x4_t v87;
  uint64_t v88;
  int32x4_t v89;
  float32x2_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  float32x4_t *v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  float32x4_t v106;
  int32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x4_t *v110;
  uint64_t v111;
  uint64_t v112;
  int8x16_t v113;
  float32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  float32x4_t v118;
  int32x4_t v119;
  int8x16_t v120;
  int32x4_t v121;
  int8x16_t v122;
  int8x16_t v123;
  float32x4_t v124;
  int8x16_t v125;
  float32x4_t v126;
  int8x16_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  float32x4_t v132;
  uint64_t v133;
  float32x4_t v134;
  uint64_t v135;
  int32x4_t v136;
  float32x2_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int32x4_t v142;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcBumpMap *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 10);
    v13 = 16 * *((int *)a2 + 6);
    v14 = 16 * *((int *)a2 + 22);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    v16 = v9;
    do
    {
      if (v10 < 3)
      {
        LODWORD(v111) = 0;
        v19 = v16;
      }
      else
      {
        v17 = 0;
        v18 = 0;
        v19 = v16;
        do
        {
          v20 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v21 = vaddq_f32(v20, (float32x4_t)xmmword_1B304F230);
          v22 = *((_QWORD *)this + 51);
          v23 = *(int8x16_t *)(v22 + 96);
          v24 = *(float32x4_t *)(v22 + 112);
          v25 = *(int8x16_t *)(v22 + 64);
          v26.i64[0] = vsubq_f32(*(float32x4_t *)(v22 + 80), (float32x4_t)v23).u64[0];
          v27 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0), v24);
          v28 = (float32x4_t)vbslq_s8(v27, *(int8x16_t *)(v22 + 16), v23);
          v29 = (int8x16_t)vmulq_f32(v19, v28);
          v30 = (int8x16_t)vmulq_f32(v20, v28);
          v31 = (int8x16_t)vmulq_f32(v21, v28);
          v32 = (int8x16_t)vaddq_f32((float32x4_t)v29, (float32x4_t)vextq_s8(v29, v29, 4uLL));
          v33 = vaddq_f32((float32x4_t)v30, (float32x4_t)vextq_s8(v30, v30, 4uLL));
          v34 = vaddq_f32((float32x4_t)v31, (float32x4_t)vextq_s8(v31, v31, 4uLL));
          v35.i64[0] = v26.i64[0];
          v35.i64[1] = vaddq_f32(*(float32x4_t *)&v32, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v32, 0)).i64[1];
          v32.i64[0] = v26.i64[0];
          v32.i64[1] = vaddq_f32(v33, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v33, 0)).i64[1];
          v26.i64[1] = vaddq_f32(v34, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v34, 0)).i64[1];
          v36 = *(int8x16_t *)(v22 + 128);
          v37 = *(int8x16_t *)(v22 + 144);
          v38 = *(int8x16_t *)(v22 + 48);
          v39 = (float32x4_t)vbslq_s8(v27, *(int8x16_t *)(v22 + 32), v36);
          v40 = (int8x16_t)vmulq_f32(v19, v39);
          v41 = (int8x16_t)vmulq_f32(v20, v39);
          v42 = (int8x16_t)vmulq_f32(v21, v39);
          v43 = (int8x16_t)vaddq_f32((float32x4_t)v40, (float32x4_t)vextq_s8(v40, v40, 4uLL));
          v44 = (int8x16_t)vaddq_f32((float32x4_t)v41, (float32x4_t)vextq_s8(v41, v41, 4uLL));
          v45 = (int8x16_t)vaddq_f32((float32x4_t)v42, (float32x4_t)vextq_s8(v42, v42, 4uLL));
          v46 = vbslq_s8(v37, (int8x16_t)vaddq_f32((float32x4_t)v43, (float32x4_t)vextq_s8(v43, v43, 8uLL)), v35);
          v47 = vbslq_s8(v37, (int8x16_t)vaddq_f32((float32x4_t)v44, (float32x4_t)vextq_s8(v44, v44, 8uLL)), v32);
          v48 = vbslq_s8(v37, (int8x16_t)vaddq_f32((float32x4_t)v45, (float32x4_t)vextq_s8(v45, v45, 8uLL)), v26);
          v49 = *(float32x4_t *)(v22 + 160);
          v50 = *(float32x4_t *)(v22 + 176);
          v51 = vminq_f32(vmaxq_f32(*(float32x4_t *)(v12 + v17), v49), v50);
          v52 = vminq_f32(vmaxq_f32(*(float32x4_t *)(v12 + v17 + 16), v49), v50);
          v53 = vminq_f32(vmaxq_f32(*(float32x4_t *)(v12 + v17 + 32), v49), v50);
          v54 = *(float32x4_t *)(v22 + 192);
          v55 = *(float32x4_t *)(v22 + 208);
          v56 = vminq_f32(vmaxq_f32(v51, v54), v55);
          v57 = vminq_f32(vmaxq_f32(v52, v54), v55);
          v58 = vminq_f32(vmaxq_f32(v53, v54), v55);
          v59 = vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.i8, 0), v24);
          v60 = vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.i8, 0), v24);
          v61 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.i8, 0), v24);
          v62 = (float32x4_t)vbslq_s8((int8x16_t)v59, v38, v23);
          v63 = (float32x4_t)vbslq_s8((int8x16_t)v60, v38, v23);
          v64 = (float32x4_t)vbslq_s8(v61, v38, v23);
          v65 = *(float32x4_t *)(v22 + 224);
          v66 = *(int8x16_t *)(v22 + 240);
          v67 = vaddq_f32((float32x4_t)vextq_s8(v46, v46, 8uLL), vmulq_f32(vmulq_f32(v56, v65), *(float32x4_t *)v22));
          v68 = vaddq_f32((float32x4_t)vextq_s8(v47, v47, 8uLL), vmulq_f32(vmulq_f32(v57, v65), *(float32x4_t *)v22));
          v69 = vaddq_f32((float32x4_t)vextq_s8(v48, v48, 8uLL), vmulq_f32(vmulq_f32(v58, v65), *(float32x4_t *)v22));
          v67.i32[3] = 1.0;
          v68.i32[3] = 1.0;
          v69.i32[3] = 1.0;
          v70 = (int32x4_t)vmulq_f32(v67, (float32x4_t)vbslq_s8((int8x16_t)v59, v25, v36));
          v71 = (int8x16_t)vmulq_f32(v68, (float32x4_t)vbslq_s8((int8x16_t)v60, v25, v36));
          v72 = (int8x16_t)vmulq_f32(v69, (float32x4_t)vbslq_s8(v61, v25, v36));
          *(int8x8_t *)v48.i8 = vqtbl1_s8((int8x16_t)v70, *(int8x8_t *)v66.i8);
          v25.i64[0] = vextq_s8(v66, v66, 8uLL).u64[0];
          *(int8x8_t *)v70.i8 = vqtbl1_s8((int8x16_t)v70, *(int8x8_t *)v25.i8);
          v59.i64[0] = v48.i64[0];
          *(int8x8_t *)v36.i8 = vext_s8(*(int8x8_t *)v70.i8, *(int8x8_t *)v48.i8, 4uLL);
          *(int8x8_t *)v73.f32 = vext_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)v70.i8, 4uLL);
          v48.i64[1] = v70.i64[0];
          *(int8x8_t *)v60.i8 = vqtbl1_s8(v71, *(int8x8_t *)v66.i8);
          *(int8x8_t *)v71.i8 = vqtbl1_s8(v71, *(int8x8_t *)v25.i8);
          v65.i64[0] = v60.i64[0];
          *(int8x8_t *)v74.f32 = vext_s8(*(int8x8_t *)v60.i8, *(int8x8_t *)v71.i8, 4uLL);
          v60.i64[1] = v71.i64[0];
          *(int8x8_t *)v75.f32 = vqtbl1_s8(v72, *(int8x8_t *)v66.i8);
          *(int8x8_t *)v72.i8 = vqtbl1_s8(v72, *(int8x8_t *)v25.i8);
          v59.i64[1] = v70.i64[0];
          v65.i64[1] = v71.i64[0];
          v70.i64[0] = v75.i64[0];
          *(int8x8_t *)v76.f32 = vext_s8(*(int8x8_t *)v75.f32, *(int8x8_t *)v72.i8, 4uLL);
          v75.i64[1] = v72.i64[0];
          v70.i64[1] = v72.i64[0];
          v73.i64[1] = v36.i64[0];
          *(int8x8_t *)&v74.u32[2] = vext_s8(*(int8x8_t *)v71.i8, *(int8x8_t *)v60.i8, 4uLL);
          *(int8x8_t *)&v76.u32[2] = vext_s8(*(int8x8_t *)v72.i8, *(int8x8_t *)v75.f32, 4uLL);
          v77 = (int8x16_t)vaddq_f32(v73, vaddq_f32((float32x4_t)vrev64q_s32(v59), (float32x4_t)v48));
          v78 = (int8x16_t)vaddq_f32(v74, vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v65), (float32x4_t)v60));
          v79 = (int8x16_t)vmulq_f32(v67, v62);
          v80 = (int8x16_t)vmulq_f32(v68, v63);
          *(int8x8_t *)v48.i8 = vqtbl1_s8(v79, *(int8x8_t *)v66.i8);
          *(int8x8_t *)v79.i8 = vqtbl1_s8(v79, *(int8x8_t *)v25.i8);
          v59.i64[0] = v48.i64[0];
          v59.i64[1] = v79.i64[0];
          v81 = (int8x16_t)vmulq_f32(v69, v64);
          *(int8x8_t *)v69.f32 = vqtbl1_s8(v80, *(int8x8_t *)v66.i8);
          *(int8x8_t *)v80.i8 = vqtbl1_s8(v80, *(int8x8_t *)v25.i8);
          v36.i64[0] = v69.i64[0];
          v36.i64[1] = v80.i64[0];
          *(int8x8_t *)v73.f32 = vqtbl1_s8(v81, *(int8x8_t *)v66.i8);
          *(int8x8_t *)v81.i8 = vqtbl1_s8(v81, *(int8x8_t *)v25.i8);
          v25.i64[0] = v73.i64[0];
          v25.i64[1] = v81.i64[0];
          v60.i64[0] = v48.i64[0];
          v60.i64[1] = v79.i64[0];
          v62.i64[0] = v69.i64[0];
          v62.i64[1] = v80.i64[0];
          v63.i64[0] = v73.i64[0];
          v63.i64[1] = v81.i64[0];
          v79.i64[1] = v48.i64[0];
          v80.i64[1] = v69.i64[0];
          v81.i64[1] = v73.i64[0];
          v82 = *(int8x16_t *)(v22 + 256);
          v83 = (float32x4_t)vbslq_s8(v82, (int8x16_t)vaddq_f32((float32x4_t)v79, vaddq_f32((float32x4_t)v59, (float32x4_t)vrev64q_s32(v60))), v77);
          v84 = (float32x4_t)vbslq_s8(v82, (int8x16_t)vaddq_f32((float32x4_t)v80, vaddq_f32((float32x4_t)v36, (float32x4_t)vrev64q_s32((int32x4_t)v62))), v78);
          v85 = (float32x4_t)vbslq_s8(v82, (int8x16_t)vaddq_f32((float32x4_t)v81, vaddq_f32((float32x4_t)v25, (float32x4_t)vrev64q_s32((int32x4_t)v63))), (int8x16_t)vaddq_f32(v76, vaddq_f32((float32x4_t)vrev64q_s32(v70), v75)));
          v86 = *((int *)a2 + 26);
          v87 = vsubq_f32(v83, v9);
          v88 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v89 = vaddq_s32(vcvtq_s32_f32(v87), vcltzq_f32(v87));
            v90 = (float32x2_t)vsubq_f32(v87, vcvtq_f32_s32(v89)).u64[0];
            v91 = (float32x4_t *)(v88 + 16 * (v89.i32[0] + v89.i32[1] * (int)v86));
            v92 = vaddq_f32(*v91, vmulq_n_f32(vsubq_f32(v91[1], *v91), v90.f32[0]));
            v93 = vaddq_f32(v92, vmulq_lane_f32(vsubq_f32(vaddq_f32(v91[v86], vmulq_n_f32(vsubq_f32(v91[(int)v86 + 1], v91[v86]), v90.f32[0])), v92), v90, 1));
            v94 = vsubq_f32(v84, v9);
            v95 = vaddq_s32(vcvtq_s32_f32(v94), vcltzq_f32(v94));
            v94.i64[0] = vsubq_f32(v94, vcvtq_f32_s32(v95)).u64[0];
            v96 = (float32x4_t *)(v88 + 16 * (v95.i32[0] + v95.i32[1] * (int)v86));
            v97 = vaddq_f32(*v96, vmulq_n_f32(vsubq_f32(v96[1], *v96), v94.f32[0]));
            v98 = vaddq_f32(v97, vmulq_lane_f32(vsubq_f32(vaddq_f32(v96[v86], vmulq_n_f32(vsubq_f32(v96[(int)v86 + 1], v96[v86]), v94.f32[0])), v97), *(float32x2_t *)v94.f32, 1));
            v99 = vsubq_f32(v85, v9);
            v100 = vaddq_s32(vcvtq_s32_f32(v99), vcltzq_f32(v99));
            v99.i64[0] = vsubq_f32(v99, vcvtq_f32_s32(v100)).u64[0];
            v101 = (float32x4_t *)(v88 + 16 * (v100.i32[0] + v100.i32[1] * (int)v86));
            v102 = vaddq_f32(*v101, vmulq_n_f32(vsubq_f32(v101[1], *v101), v99.f32[0]));
            v103 = vaddq_f32(v102, vmulq_lane_f32(vsubq_f32(vaddq_f32(v101[v86], vmulq_n_f32(vsubq_f32(v101[(int)v86 + 1], v101[v86]), v99.f32[0])), v102), *(float32x2_t *)v99.f32, 1));
          }
          else
          {
            v104 = vaddq_f32(v87, v15);
            v105 = vcvtq_s32_f32(v104);
            v104.i64[0] = vaddq_s32(v105, vcgtq_f32(vcvtq_f32_s32(v105), v104)).u64[0];
            v93 = *(float32x4_t *)(v88 + 16 * (v104.i32[0] + v104.i32[1] * (int)v86));
            v106 = vaddq_f32(vsubq_f32(v84, v9), v15);
            v107 = vcvtq_s32_f32(v106);
            v106.i64[0] = vaddq_s32(v107, vcgtq_f32(vcvtq_f32_s32(v107), v106)).u64[0];
            v98 = *(float32x4_t *)(v88 + 16 * (v106.i32[0] + v106.i32[1] * (int)v86));
            v108 = vaddq_f32(vsubq_f32(v85, v9), v15);
            v109 = vcvtq_s32_f32(v108);
            v108.i64[0] = vaddq_s32(v109, vcgtq_f32(vcvtq_f32_s32(v109), v108)).u64[0];
            v103 = *(float32x4_t *)(v88 + 16 * (v108.i32[0] + v108.i32[1] * (int)v86));
          }
          v110 = (float32x4_t *)(v11 + v17);
          *v110 = v93;
          v110[1] = v98;
          v110[2] = v103;
          v19 = vaddq_f32(v21, (float32x4_t)xmmword_1B304F230);
          v18 -= 3;
          v17 += 48;
        }
        while (v10 + v18 > 2);
        LODWORD(v111) = -v18;
      }
      if ((int)v111 < v10)
      {
        v111 = v111;
        do
        {
          v112 = *((_QWORD *)this + 51);
          v113 = *(int8x16_t *)(v112 + 96);
          v114 = *(float32x4_t *)(v112 + 112);
          v115.i64[0] = vsubq_f32(*(float32x4_t *)(v112 + 80), (float32x4_t)v113).u64[0];
          v116 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.i8, 0), v114);
          v117 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vbslq_s8(v116, *(int8x16_t *)(v112 + 16), v113));
          v118 = vaddq_f32((float32x4_t)v117, (float32x4_t)vextq_s8(v117, v117, 4uLL));
          v115.i64[1] = vaddq_f32(v118, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v118, 0)).i64[1];
          v119 = *(int32x4_t *)(v112 + 128);
          v120 = (int8x16_t)vmulq_f32(v19, (float32x4_t)vbslq_s8(v116, *(int8x16_t *)(v112 + 32), (int8x16_t)v119));
          v121 = (int32x4_t)vaddq_f32((float32x4_t)v120, (float32x4_t)vextq_s8(v120, v120, 4uLL));
          v122 = vbslq_s8(*(int8x16_t *)(v112 + 144), (int8x16_t)vaddq_f32((float32x4_t)v121, (float32x4_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 8uLL)), v115);
          v123 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.i8, 0), v114);
          v124 = (float32x4_t)vbslq_s8(v123, *(int8x16_t *)(v112 + 48), v113);
          v125 = *(int8x16_t *)(v112 + 240);
          v126 = vaddq_f32(vmulq_f32(vmulq_f32(vminq_f32(vmaxq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v12 + 16 * v111), *(float32x4_t *)(v112 + 160)), *(float32x4_t *)(v112 + 176)), *(float32x4_t *)(v112 + 192)), *(float32x4_t *)(v112 + 208)), *(float32x4_t *)(v112 + 224)), *(float32x4_t *)v112), (float32x4_t)vextq_s8(v122, v122, 8uLL));
          v126.i32[3] = 1.0;
          v127 = (int8x16_t)vmulq_f32(v126, (float32x4_t)vbslq_s8(v123, *(int8x16_t *)(v112 + 64), (int8x16_t)v119));
          *(int8x8_t *)v128.f32 = vqtbl1_s8(v127, *(int8x8_t *)v125.i8);
          v121.i64[0] = vextq_s8(v125, v125, 8uLL).u64[0];
          *(int8x8_t *)v127.i8 = vqtbl1_s8(v127, *(int8x8_t *)v121.i8);
          v119.i64[0] = v128.i64[0];
          *(int8x8_t *)v129.f32 = vext_s8(*(int8x8_t *)v128.f32, *(int8x8_t *)v127.i8, 4uLL);
          v128.i64[1] = v127.i64[0];
          v119.i64[1] = v127.i64[0];
          *(int8x8_t *)&v129.u32[2] = vext_s8(*(int8x8_t *)v127.i8, *(int8x8_t *)v128.f32, 4uLL);
          v130 = (int8x16_t)vaddq_f32(v129, vaddq_f32((float32x4_t)vrev64q_s32(v119), v128));
          v131 = (int8x16_t)vmulq_f32(v126, v124);
          *(int8x8_t *)v126.f32 = vqtbl1_s8(v131, *(int8x8_t *)v125.i8);
          *(int8x8_t *)v131.i8 = vqtbl1_s8(v131, *(int8x8_t *)v121.i8);
          v128.i64[0] = v126.i64[0];
          v128.i64[1] = v131.i64[0];
          v121.i64[0] = v126.i64[0];
          v121.i64[1] = v131.i64[0];
          v131.i64[1] = v126.i64[0];
          v132 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v112 + 256), (int8x16_t)vaddq_f32((float32x4_t)v131, vaddq_f32(v128, (float32x4_t)vrev64q_s32(v121))), v130);
          v133 = *((int *)a2 + 26);
          v134 = vsubq_f32(v132, v9);
          v135 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v136 = vaddq_s32(vcvtq_s32_f32(v134), vcltzq_f32(v134));
            v137 = (float32x2_t)vsubq_f32(v134, vcvtq_f32_s32(v136)).u64[0];
            v138 = (float32x4_t *)(v135 + 16 * (v136.i32[0] + v136.i32[1] * (int)v133));
            v139 = vaddq_f32(*v138, vmulq_n_f32(vsubq_f32(v138[1], *v138), v137.f32[0]));
            v140 = vaddq_f32(v139, vmulq_lane_f32(vsubq_f32(vaddq_f32(v138[v133], vmulq_n_f32(vsubq_f32(v138[(int)v133 + 1], v138[v133]), v137.f32[0])), v139), v137, 1));
          }
          else
          {
            v141 = vaddq_f32(v134, v15);
            v142 = vcvtq_s32_f32(v141);
            v141.i64[0] = vaddq_s32(v142, vcgtq_f32(vcvtq_f32_s32(v142), v141)).u64[0];
            v140 = *(float32x4_t *)(v135 + 16 * (v141.i32[0] + v141.i32[1] * (int)v133));
          }
          *(float32x4_t *)(v11 + 16 * v111) = v140;
          v19 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          ++v111;
        }
        while (v111 < v10);
      }
      v16 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v11 += v13;
      v12 += v14;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcBumpMap::GetDOD(HgcBumpMap *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    if ((*(int (**)(HgcBumpMap *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v5, v4, v7);
    }
    v6 = &HGRectInfinite;
    return *(_QWORD *)v6;
  }
  if (a3)
  {
    v6 = &HGRectNull;
    return *(_QWORD *)v6;
  }
  return v5;
}

uint64_t HgcBumpMap::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 1u);
    DOD = HGRenderer::GetDOD(a2, Input);
    v9 = v8;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(DOD, v9, v10);
    }
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
  return DOD;
}

void HgcBumpMap::HgcBumpMap(HgcBumpMap *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EE958;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B304F230;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 128) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 144) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 160) = xmmword_1B3052AD0;
  *(_OWORD *)(v3 + 176) = xmmword_1B3052AE0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3052AF0;
  *(_OWORD *)(v3 + 208) = xmmword_1B3052B00;
  *(_OWORD *)(v3 + 224) = xmmword_1B3052B10;
  *(_OWORD *)(v3 + 240) = xmmword_1B3051230;
  *(_OWORD *)(v3 + 256) = xmmword_1B3050E20;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcBumpMap *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28A4894(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBumpMap::~HgcBumpMap(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EE958;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40881B329ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBumpMap::~HgcBumpMap(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBumpMap::SetParameter(HgcBumpMap *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcBumpMap::GetParameter(HgcBumpMap *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcSharpen::GetProgram(HgcSharpen *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000372\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r0 - r1;\n"
             "    r1 = r1*half4(hg_Params[0]) + r0;\n"
             "    output.color0 = fmax(float4(r1), float4(c0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=6d227d23:e2d8f1e0:7a8b7623:f062fc6d\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000350\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r0 - r1;\n"
             "    r1 = r1*hg_Params[0] + r0;\n"
             "    output.color0 = fmax(r1, c0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=03345423:bcf88fe0:84a8ea4c:4a08ddb4\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002fe\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r0 - r1;\n"
           "    r1 = r1*hg_ProgramLocal0 + r0;\n"
           "    gl_FragColor = max(r1, c0.xxxx);\n"
           "}\n"
           "//MD5=6620382a:da9b350f:8e11e9c5:2447645f\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcSharpen::InitProgramDescriptor(HgcSharpen *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSharpen_hgc_visible", "//Metal1.0     \n//LEN=00000001a9\n[[ visible ]] FragmentOut HgcSharpen_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r0 - r1;\n"
    "    r1 = r1*hg_Params[0] + r0;\n"
    "    output.color0 = fmax(r1, c0.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A4A9C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSharpen");
}

void sub_1B28A4AAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A4BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A4C34()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A4C2CLL);
}

_QWORD *HgcSharpen::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSharpen [hgc1]");
}

uint64_t HgcSharpen::BindTexture(HgcSharpen *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcSharpen::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcSharpen::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t **)(a1 + 408);
          v14 = v13[1];
          v15 = vmaxq_f32(vaddq_f32(*(float32x4_t *)(v8 + v12 - 32), vmulq_f32(vsubq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)(v6 + v12 - 32)), *v13)), v14);
          v16 = vmaxq_f32(vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), vmulq_f32(vsubq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)(v6 + v12 - 16)), *v13)), v14);
          v17 = vmaxq_f32(vaddq_f32(*(float32x4_t *)(v8 + v12), vmulq_f32(vsubq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)(v6 + v12)), *v13)), v14);
          v18 = vmaxq_f32(vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), vmulq_f32(vsubq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)(v6 + v12 + 16)), *v13)), v14);
          v19 = (float32x4_t *)(v5 + v12);
          v19[-2] = v15;
          v19[-1] = v16;
          *v19 = v17;
          v19[1] = v18;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v20) = -v11;
      }
      if ((int)v20 < v4)
      {
        v20 = v20;
        do
        {
          *(float32x4_t *)(v5 + 16 * v20) = vmaxq_f32(vaddq_f32(*(float32x4_t *)(v8 + 16 * v20), vmulq_f32(vsubq_f32(*(float32x4_t *)(v8 + 16 * v20), *(float32x4_t *)(v6 + 16 * v20)), *(float32x4_t *)*(_QWORD *)(a1 + 408))), *(float32x4_t *)(*(_QWORD *)(a1 + 408) + 16));
          ++v20;
        }
        while (v20 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSharpen::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcSharpen::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcSharpen::HgcSharpen(HgcSharpen *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EEBC0;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28A4F70(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSharpen::~HgcSharpen(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EEBC0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSharpen::~HgcSharpen(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSharpen::SetParameter(HgcSharpen *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcSharpen::GetParameter(HgcSharpen *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcDisplace::GetProgram(HgcDisplace *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000005d5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(255.0000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = (half2) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xy;\n"
             "    r0.zw = r0.xy*half2(hg_Params[4].zw);\n"
             "    r0.y = half(frag._texCoord1.y)*half(hg_Params[3].y);\n"
             "    r0.x = half(frag._texCoord1.x)*half(hg_Params[2].x) + half(hg_Params[2].w);\n"
             "    r0.y = half(frag._texCoord1.x)*half(hg_Params[3].x) + r0.y;\n"
             "    r0.x = half(frag._texCoord1.y)*half(hg_Params[2].y) + r0.x;\n"
             "    r0.y = r0.y + half(hg_Params[3].w);\n"
             "    r0.xy = r0.zw*c0.xx + r0.xy;\n"
             "    r0.z = r0.y*half(hg_Params[0].y);\n"
             "    r0.z = r0.x*half(hg_Params[0].x) + r0.z;\n"
             "    r0.y = r0.y*half(hg_Params[1].y);\n"
             "    r0.x = r0.x*half(hg_Params[1].x) + r0.y;\n"
             "    r0.z = r0.z + half(hg_Params[0].w);\n"
             "    r0.w = r0.x + half(hg_Params[1].w);\n"
             "    s0.xy = float2(r0.zw) + hg_Params[5].xy;\n"
             "    s0.xy = s0.xy*hg_Params[5].zw;\n"
             "    output.color0 = (float4) hg_Texture1.sample(hg_Sampler1, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=35739934:0e5b3df2:c04d6778:ea5b610f\n"
             "//SIG=00400000:00000001:00000001:00000003:0001:0006:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000054b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(255.0000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xy;\n"
             "    r0.zw = r0.xy*hg_Params[4].zw;\n"
             "    r0.y = frag._texCoord1.y*hg_Params[3].y;\n"
             "    r0.x = frag._texCoord1.x*hg_Params[2].x + hg_Params[2].w;\n"
             "    r0.y = frag._texCoord1.x*hg_Params[3].x + r0.y;\n"
             "    r0.x = frag._texCoord1.y*hg_Params[2].y + r0.x;\n"
             "    r0.y = r0.y + hg_Params[3].w;\n"
             "    r0.xy = r0.zw*c0.xx + r0.xy;\n"
             "    r0.z = r0.y*hg_Params[0].y;\n"
             "    r0.z = r0.x*hg_Params[0].x + r0.z;\n"
             "    r0.y = r0.y*hg_Params[1].y;\n"
             "    r0.x = r0.x*hg_Params[1].x + r0.y;\n"
             "    r0.z = r0.z + hg_Params[0].w;\n"
             "    r0.w = r0.x + hg_Params[1].w;\n"
             "    r0.xy = r0.zw + hg_Params[5].xy;\n"
             "    r0.xy = r0.xy*hg_Params[5].zw;\n"
             "    output.color0 = hg_Texture1.sample(hg_Sampler1, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9c75529a:3b5ad96d:ed26341d:b2487e0d\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0006:0001:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000005d9\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(255.0000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0;\n"
           "\n"
           "    r0.xy = texture2D(hg_Texture0, hg_TexCoord0.xy).xy;\n"
           "    r0.zw = r0.xy*hg_ProgramLocal4.zw;\n"
           "    r0.y = hg_TexCoord1.y*hg_ProgramLocal3.y;\n"
           "    r0.x = hg_TexCoord1.x*hg_ProgramLocal2.x + hg_ProgramLocal2.w;\n"
           "    r0.y = hg_TexCoord1.x*hg_ProgramLocal3.x + r0.y;\n"
           "    r0.x = hg_TexCoord1.y*hg_ProgramLocal2.y + r0.x;\n"
           "    r0.y = r0.y + hg_ProgramLocal3.w;\n"
           "    r0.xy = r0.zw*c0.xx + r0.xy;\n"
           "    r0.z = r0.y*hg_ProgramLocal0.y;\n"
           "    r0.z = r0.x*hg_ProgramLocal0.x + r0.z;\n"
           "    r0.y = r0.y*hg_ProgramLocal1.y;\n"
           "    r0.x = r0.x*hg_ProgramLocal1.x + r0.y;\n"
           "    r0.z = r0.z + hg_ProgramLocal0.w;\n"
           "    r0.w = r0.x + hg_ProgramLocal1.w;\n"
           "    r0.xy = r0.zw + hg_ProgramLocal5.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal5.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture1, r0.xy);\n"
           "}\n"
           "//MD5=da256a95:eb520204:b56553ac:8f15f498\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0006:0001:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcDisplace::InitProgramDescriptor(HgcDisplace *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcDisplace_hgc_visible", "//Metal1.0     \n//LEN=00000003fc\n[[ visible ]] FragmentOut HgcDisplace_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(255.0000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = color0.xy;\n"
    "    r0.zw = r0.xy*hg_Params[4].zw;\n"
    "    r0.y = texCoord1.y*hg_Params[3].y;\n"
    "    r0.x = texCoord1.x*hg_Params[2].x + hg_Params[2].w;\n"
    "    r0.y = texCoord1.x*hg_Params[3].x + r0.y;\n"
    "    r0.x = texCoord1.y*hg_Params[2].y + r0.x;\n"
    "    r0.y = r0.y + hg_Params[3].w;\n"
    "    r0.xy = r0.zw*c0.xx + r0.xy;\n"
    "    r0.z = r0.y*hg_Params[0].y;\n"
    "    r0.z = r0.x*hg_Params[0].x + r0.z;\n"
    "    r0.y = r0.y*hg_Params[1].y;\n"
    "    r0.x = r0.x*hg_Params[1].x + r0.y;\n"
    "    r0.z = r0.z + hg_Params[0].w;\n"
    "    r0.w = r0.x + hg_Params[1].w;\n"
    "    r0.xy = r0.zw + hg_Params[5].xy;\n"
    "    r0.xy = r0.xy*hg_Params[5].zw;\n"
    "    output.color0 = hg_Texture1.sample(hg_Sampler1, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A5154()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcDisplace");
}

void sub_1B28A5164(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052790;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A5324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A537C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A5374);
}

_QWORD *HgcDisplace::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcDisplace [hgc1]");
}

uint64_t HgcDisplace::BindTexture(HgcDisplace *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  if (a3 == 1)
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v8.n128_u32[0] = 1.0;
      v9.n128_u32[0] = 1.0;
    }
    else
    {
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v6.n128_f32[0] = (float)*((int *)a2 + 60);
    v7.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 5, v6, v7, v8, v9);
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v4)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  return 0;
}

uint64_t HgcDisplace::Bind(HgcDisplace *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcDisplace *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcDisplace::RenderTile(HgcDisplace *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  __int128 v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  uint64_t v88;
  float32x4_t v89;
  uint64_t v90;
  int32x4_t v91;
  float32x2_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int32x4_t v97;
  float32x4_t *v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int32x4_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int32x4_t v107;
  float32x4_t *v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  float32x4_t v115;
  int32x4_t v116;
  float32x4_t v117;
  int32x4_t v118;
  float32x4_t *v119;
  uint64_t v120;
  uint64_t v121;
  float32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  uint64_t v139;
  float32x4_t v140;
  uint64_t v141;
  int32x4_t v142;
  float32x2_t v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int32x4_t v148;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcDisplace *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 10);
    v13 = 16 * *((int *)a2 + 22);
    v14 = 16 * *((int *)a2 + 6);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    v16 = (float32x4_t)v9;
    do
    {
      if (v10 < 4)
      {
        LODWORD(v120) = 0;
        v19 = v16;
      }
      else
      {
        v17 = 0;
        v18 = 32;
        v19 = v16;
        do
        {
          v20 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v21 = vaddq_f32(v20, (float32x4_t)xmmword_1B304F230);
          v22 = vaddq_f32(v21, (float32x4_t)xmmword_1B304F230);
          v23 = *((_QWORD *)this + 51);
          v24.i64[0] = v19.i64[0];
          v24.i64[1] = *(_QWORD *)(v12 + v18 - 32);
          v26 = *(int32x4_t *)(v23 + 32);
          v25 = *(int32x4_t *)(v23 + 48);
          v27 = (float32x4_t)vrev64q_s32(v25);
          v28 = (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
          v29 = *(int8x16_t *)(v23 + 80);
          v25.i64[1] = *(_QWORD *)(v23 + 72);
          v30 = vmulq_f32(v20, (float32x4_t)v26);
          v31 = vmulq_n_f32(v27, v20.f32[0]);
          v32 = (float32x4_t)vrev64q_s32(v26);
          v33 = vmulq_lane_f32(v32, *(float32x2_t *)v20.f32, 1);
          v20.i64[1] = *(_QWORD *)(v12 + v18 - 16);
          v34 = vmulq_f32(v21, (float32x4_t)v26);
          v35 = vmulq_n_f32(v27, v21.f32[0]);
          v36 = vmulq_lane_f32(v32, *(float32x2_t *)v21.f32, 1);
          v21.i64[1] = *(_QWORD *)(v12 + v18);
          v37.i64[0] = v22.i64[0];
          v37.i64[1] = *(_QWORD *)(v12 + v18 + 16);
          v38 = (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 0xCuLL);
          v39 = vbslq_s8(v29, (int8x16_t)vaddq_f32(vmulq_f32(v19, (float32x4_t)v26), v38), (int8x16_t)vmulq_f32(v24, (float32x4_t)v25));
          v40 = vbslq_s8(v29, (int8x16_t)vaddq_f32(v30, v38), (int8x16_t)vmulq_f32(v20, (float32x4_t)v25));
          v41 = vbslq_s8(v29, (int8x16_t)vaddq_f32(v34, v38), (int8x16_t)vmulq_f32(v21, (float32x4_t)v25));
          v42 = vbslq_s8(v29, (int8x16_t)vaddq_f32(vmulq_f32(v22, (float32x4_t)v26), v38), (int8x16_t)vmulq_f32(v37, (float32x4_t)v25));
          v43 = (int8x16_t)vaddq_f32(v31, (float32x4_t)v40);
          v44 = *(int8x16_t *)(v23 + 96);
          v45 = *(_OWORD *)(v23 + 112);
          v46 = vbslq_s8(v44, (int8x16_t)vaddq_f32(vmulq_n_f32(v27, v19.f32[0]), (float32x4_t)v39), v39);
          v47 = vbslq_s8(v44, v43, v40);
          v48 = vbslq_s8(v44, (int8x16_t)vaddq_f32(v35, (float32x4_t)v41), v41);
          v49 = vbslq_s8(v44, (int8x16_t)vaddq_f32(vmulq_n_f32(v27, v22.f32[0]), (float32x4_t)v42), v42);
          v50 = vbslq_s8(v29, (int8x16_t)vaddq_f32(vmulq_lane_f32(v32, *(float32x2_t *)v19.f32, 1), (float32x4_t)v46), v46);
          v51 = vbslq_s8(v29, (int8x16_t)vaddq_f32(v33, (float32x4_t)v47), v47);
          v52 = vbslq_s8(v29, (int8x16_t)vaddq_f32(v36, (float32x4_t)v48), v48);
          v53 = vbslq_s8(v29, (int8x16_t)vaddq_f32(vmulq_lane_f32(v32, *(float32x2_t *)v22.f32, 1), (float32x4_t)v49), v49);
          v54 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vaddq_f32(v28, (float32x4_t)v50), v50);
          v55 = vbslq_s8(v44, (int8x16_t)vaddq_f32(v28, (float32x4_t)v51), v51);
          v56 = vbslq_s8(v44, (int8x16_t)vaddq_f32(v28, (float32x4_t)v52), v52);
          v57 = vbslq_s8(v44, (int8x16_t)vaddq_f32(v28, (float32x4_t)v53), v53);
          v49.i64[0] = vaddq_f32(vmulq_n_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v54, 1), *(float *)&v45), v54).u64[0];
          v55.i64[0] = vaddq_f32(vmulq_n_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v55, 1), *(float *)&v45), (float32x4_t)v55).u64[0];
          v56.i64[0] = vaddq_f32(vmulq_n_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v56, 1), *(float *)&v45), (float32x4_t)v56).u64[0];
          v57.i64[0] = vaddq_f32(vmulq_n_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v57, 1), *(float *)&v45), (float32x4_t)v57).u64[0];
          v59 = *(int8x16_t *)v23;
          v58 = *(float32x4_t *)(v23 + 16);
          v60 = (float32x4_t)vextq_s8(v59, v59, 0xCuLL);
          v61 = (float32x4_t)vextq_s8(v59, v59, 8uLL);
          v49.i64[1] = vaddq_f32(vmulq_n_f32(v61, *(float *)&v49), vmulq_lane_f32(v60, *(float32x2_t *)&v49, 1)).i64[1];
          v55.i64[1] = vaddq_f32(vmulq_n_f32(v61, *(float *)&v55), vmulq_lane_f32(v60, *(float32x2_t *)&v55, 1)).i64[1];
          v56.i64[1] = vaddq_f32(vmulq_n_f32(v61, *(float *)&v56), vmulq_lane_f32(v60, *(float32x2_t *)&v56, 1)).i64[1];
          v57.i64[1] = vaddq_f32(vmulq_n_f32(v61, *(float *)&v57), vmulq_lane_f32(v60, *(float32x2_t *)&v57, 1)).i64[1];
          v62 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vmulq_f32(v58, (float32x4_t)v49), v49);
          v63 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vmulq_f32(v58, (float32x4_t)v55), v55);
          v64 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vmulq_f32(v58, (float32x4_t)v56), v56);
          v65 = (float32x4_t)vbslq_s8(v44, (int8x16_t)vmulq_f32(v58, (float32x4_t)v57), v57);
          v66 = (int8x16_t)vaddq_f32(vmulq_f32(v58, v62), (float32x4_t)vrev64q_s32((int32x4_t)v62));
          v67 = (int8x16_t)vaddq_f32(vmulq_f32(v58, v63), (float32x4_t)vrev64q_s32((int32x4_t)v63));
          v68 = (int8x16_t)vaddq_f32(vmulq_f32(v58, v64), (float32x4_t)vrev64q_s32((int32x4_t)v64));
          v69 = (int8x16_t)vaddq_f32(vmulq_f32(v58, v65), (float32x4_t)vrev64q_s32((int32x4_t)v65));
          v70 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v23);
          v71 = (int8x16_t)vaddq_f32(v70, v62);
          v72 = (int8x16_t)vaddq_f32(v70, v63);
          v73 = (int8x16_t)vaddq_f32(v70, v64);
          v74 = (int8x16_t)vaddq_f32(v70, v65);
          *(int8x8_t *)v70.f32 = vext_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL), 4uLL);
          v61.i64[0] = vextq_s8(v71, v66, 0xCuLL).u64[0];
          v66.i64[1] = v71.i64[1];
          *(int8x8_t *)v71.i8 = vext_s8(*(int8x8_t *)v67.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL), 4uLL);
          v44.i64[0] = vextq_s8(v72, v67, 0xCuLL).u64[0];
          v67.i64[1] = v72.i64[1];
          *(int8x8_t *)v72.i8 = vext_s8(*(int8x8_t *)v68.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL), 4uLL);
          v32.i64[0] = vextq_s8(v73, v68, 0xCuLL).u64[0];
          v68.i64[1] = v73.i64[1];
          *(int8x8_t *)v73.i8 = vext_s8(*(int8x8_t *)v69.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL), 4uLL);
          v33.i64[0] = vextq_s8(v74, v69, 0xCuLL).u64[0];
          v69.i64[1] = v74.i64[1];
          v70.i64[1] = v61.i64[0];
          v71.i64[1] = v44.i64[0];
          v72.i64[1] = v32.i64[0];
          v73.i64[1] = v33.i64[0];
          v75 = (int8x16_t)vaddq_f32(v58, v70);
          v76 = (int8x16_t)vaddq_f32(v58, (float32x4_t)v71);
          v77 = (int8x16_t)vaddq_f32(v58, (float32x4_t)v72);
          v78 = (int8x16_t)vaddq_f32(v58, (float32x4_t)v73);
          v79 = *(int8x16_t *)(v23 + 128);
          v80 = vbslq_s8(v79, v66, v75);
          v81 = vbslq_s8(v79, v67, v76);
          v82 = vbslq_s8(v79, v68, v77);
          v83 = vbslq_s8(v79, v69, v78);
          v84 = (float32x4_t)vextq_s8(v80, v80, 8uLL);
          v85 = (float32x4_t)vextq_s8(v81, v81, 8uLL);
          v86 = (float32x4_t)vextq_s8(v82, v82, 8uLL);
          v87 = (float32x4_t)vextq_s8(v83, v83, 8uLL);
          v88 = *((int *)a2 + 26);
          v89 = vsubq_f32(v84, (float32x4_t)v9);
          v90 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v91 = vaddq_s32(vcvtq_s32_f32(v89), vcltzq_f32(v89));
            v92 = (float32x2_t)vsubq_f32(v89, vcvtq_f32_s32(v91)).u64[0];
            v93 = (float32x4_t *)(v90 + 16 * (v91.i32[0] + v91.i32[1] * (int)v88));
            v94 = vaddq_f32(*v93, vmulq_n_f32(vsubq_f32(v93[1], *v93), v92.f32[0]));
            v95 = vaddq_f32(v94, vmulq_lane_f32(vsubq_f32(vaddq_f32(v93[v88], vmulq_n_f32(vsubq_f32(v93[(int)v88 + 1], v93[v88]), v92.f32[0])), v94), v92, 1));
            v96 = vsubq_f32(v85, (float32x4_t)v9);
            v97 = vaddq_s32(vcvtq_s32_f32(v96), vcltzq_f32(v96));
            v96.i64[0] = vsubq_f32(v96, vcvtq_f32_s32(v97)).u64[0];
            v98 = (float32x4_t *)(v90 + 16 * (v97.i32[0] + v97.i32[1] * (int)v88));
            v99 = vaddq_f32(*v98, vmulq_n_f32(vsubq_f32(v98[1], *v98), v96.f32[0]));
            v100 = vaddq_f32(v99, vmulq_lane_f32(vsubq_f32(vaddq_f32(v98[v88], vmulq_n_f32(vsubq_f32(v98[(int)v88 + 1], v98[v88]), v96.f32[0])), v99), *(float32x2_t *)v96.f32, 1));
            v101 = vsubq_f32(v86, (float32x4_t)v9);
            v102 = vaddq_s32(vcvtq_s32_f32(v101), vcltzq_f32(v101));
            v101.i64[0] = vsubq_f32(v101, vcvtq_f32_s32(v102)).u64[0];
            v103 = (float32x4_t *)(v90 + 16 * (v102.i32[0] + v102.i32[1] * (int)v88));
            v104 = vaddq_f32(*v103, vmulq_n_f32(vsubq_f32(v103[1], *v103), v101.f32[0]));
            v105 = vaddq_f32(v104, vmulq_lane_f32(vsubq_f32(vaddq_f32(v103[v88], vmulq_n_f32(vsubq_f32(v103[(int)v88 + 1], v103[v88]), v101.f32[0])), v104), *(float32x2_t *)v101.f32, 1));
            v106 = vsubq_f32(v87, (float32x4_t)v9);
            v107 = vaddq_s32(vcvtq_s32_f32(v106), vcltzq_f32(v106));
            v106.i64[0] = vsubq_f32(v106, vcvtq_f32_s32(v107)).u64[0];
            v108 = (float32x4_t *)(v90 + 16 * (v107.i32[0] + v107.i32[1] * (int)v88));
            v109 = vaddq_f32(*v108, vmulq_n_f32(vsubq_f32(v108[1], *v108), v106.f32[0]));
            v110 = vaddq_f32(v109, vmulq_lane_f32(vsubq_f32(vaddq_f32(v108[v88], vmulq_n_f32(vsubq_f32(v108[(int)v88 + 1], v108[v88]), v106.f32[0])), v109), *(float32x2_t *)v106.f32, 1));
          }
          else
          {
            v111 = vaddq_f32(v89, v15);
            v112 = vcvtq_s32_f32(v111);
            v111.i64[0] = vaddq_s32(v112, vcgtq_f32(vcvtq_f32_s32(v112), v111)).u64[0];
            v95 = *(float32x4_t *)(v90 + 16 * (v111.i32[0] + v111.i32[1] * (int)v88));
            v113 = vaddq_f32(vsubq_f32(v85, (float32x4_t)v9), v15);
            v114 = vcvtq_s32_f32(v113);
            v113.i64[0] = vaddq_s32(v114, vcgtq_f32(vcvtq_f32_s32(v114), v113)).u64[0];
            v100 = *(float32x4_t *)(v90 + 16 * (v113.i32[0] + v113.i32[1] * (int)v88));
            v115 = vaddq_f32(vsubq_f32(v86, (float32x4_t)v9), v15);
            v116 = vcvtq_s32_f32(v115);
            v115.i64[0] = vaddq_s32(v116, vcgtq_f32(vcvtq_f32_s32(v116), v115)).u64[0];
            v105 = *(float32x4_t *)(v90 + 16 * (v115.i32[0] + v115.i32[1] * (int)v88));
            v117 = vaddq_f32(vsubq_f32(v87, (float32x4_t)v9), v15);
            v118 = vcvtq_s32_f32(v117);
            v117.i64[0] = vaddq_s32(v118, vcgtq_f32(vcvtq_f32_s32(v118), v117)).u64[0];
            v110 = *(float32x4_t *)(v90 + 16 * (v117.i32[0] + v117.i32[1] * (int)v88));
          }
          v119 = (float32x4_t *)(v11 + v18);
          v119[-2] = v95;
          v119[-1] = v100;
          *v119 = v105;
          v119[1] = v110;
          v19 = vaddq_f32(v22, (float32x4_t)xmmword_1B304F230);
          v17 -= 4;
          v18 += 64;
        }
        while (v10 + v17 > 3);
        LODWORD(v120) = -v17;
      }
      if ((int)v120 < v10)
      {
        v120 = v120;
        do
        {
          v121 = *((_QWORD *)this + 51);
          v122.i64[0] = v19.i64[0];
          v122.i64[1] = *(_QWORD *)(v12 + 16 * v120);
          v124 = *(int32x4_t *)(v121 + 32);
          v123 = *(int32x4_t *)(v121 + 48);
          v125 = (float32x4_t)vrev64q_s32(v123);
          v126 = (float32x4_t)vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL);
          v127 = *(int8x16_t *)(v121 + 80);
          v123.i64[1] = *(_QWORD *)(v121 + 72);
          v128 = vbslq_s8(v127, (int8x16_t)vaddq_f32(vmulq_f32(v19, (float32x4_t)v124), (float32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 0xCuLL)), (int8x16_t)vmulq_f32(v122, (float32x4_t)v123));
          v129 = (int8x16_t)vaddq_f32(vmulq_n_f32(v125, v19.f32[0]), (float32x4_t)v128);
          v130 = *(int8x16_t *)(v121 + 96);
          v131 = vbslq_s8(v130, v129, v128);
          v132 = vbslq_s8(v127, (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)vrev64q_s32(v124), *(float32x2_t *)v19.f32, 1), (float32x4_t)v131), v131);
          v133 = vbslq_s8(v130, (int8x16_t)vaddq_f32(v126, (float32x4_t)v132), v132);
          v133.i64[0] = vaddq_f32(vmulq_n_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v133, 1), COERCE_FLOAT(*(_OWORD *)(v121 + 112))), (float32x4_t)v133).u64[0];
          v134 = *(float32x4_t *)(v121 + 16);
          v133.i64[1] = vaddq_f32(vmulq_n_f32((float32x4_t)vdupq_lane_s64(*(_QWORD *)v121, 0), *(float *)&v133), vmulq_lane_f32((float32x4_t)vextq_s8(v9, *(int8x16_t *)v121, 0xCuLL), *(float32x2_t *)&v133, 1)).i64[1];
          v135 = (float32x4_t)vbslq_s8(v130, (int8x16_t)vmulq_f32(v134, (float32x4_t)v133), v133);
          v136 = (int8x16_t)vaddq_f32(vmulq_f32(v134, v135), (float32x4_t)vrev64q_s32((int32x4_t)v135));
          v137 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)v121), v135);
          *(int8x8_t *)v129.i8 = vext_s8(*(int8x8_t *)v136.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL), 4uLL);
          v126.i64[0] = vextq_s8(v137, v136, 0xCuLL).u64[0];
          v136.i64[1] = v137.i64[1];
          v129.i64[1] = v126.i64[0];
          v138 = vbslq_s8(*(int8x16_t *)(v121 + 128), v136, (int8x16_t)vaddq_f32(v134, (float32x4_t)v129));
          v139 = *((int *)a2 + 26);
          v140 = vsubq_f32((float32x4_t)vextq_s8(v138, v138, 8uLL), (float32x4_t)v9);
          v141 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v142 = vaddq_s32(vcvtq_s32_f32(v140), vcltzq_f32(v140));
            v143 = (float32x2_t)vsubq_f32(v140, vcvtq_f32_s32(v142)).u64[0];
            v144 = (float32x4_t *)(v141 + 16 * (v142.i32[0] + v142.i32[1] * (int)v139));
            v145 = vaddq_f32(*v144, vmulq_n_f32(vsubq_f32(v144[1], *v144), v143.f32[0]));
            v146 = vaddq_f32(v145, vmulq_lane_f32(vsubq_f32(vaddq_f32(v144[v139], vmulq_n_f32(vsubq_f32(v144[(int)v139 + 1], v144[v139]), v143.f32[0])), v145), v143, 1));
          }
          else
          {
            v147 = vaddq_f32(v140, v15);
            v148 = vcvtq_s32_f32(v147);
            v147.i64[0] = vaddq_s32(v148, vcgtq_f32(vcvtq_f32_s32(v148), v147)).u64[0];
            v146 = *(float32x4_t *)(v141 + 16 * (v147.i32[0] + v147.i32[1] * (int)v139));
          }
          *(float32x4_t *)(v11 + 16 * v120) = v146;
          v19 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          ++v120;
        }
        while (v120 < v10);
      }
      v16 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v12 += v13;
      v11 += v14;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcDisplace::GetDOD(HgcDisplace *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    if ((*(int (**)(HgcDisplace *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v5, v4, v7);
    }
    v6 = &HGRectInfinite;
    return *(_QWORD *)v6;
  }
  if (a3)
  {
    v6 = &HGRectNull;
    return *(_QWORD *)v6;
  }
  return v5;
}

uint64_t HgcDisplace::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 1u);
    DOD = HGRenderer::GetDOD(a2, Input);
    v9 = v8;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(DOD, v9, v10);
    }
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
  return DOD;
}

void HgcDisplace::HgcDisplace(HgcDisplace *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EEE28;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 96) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 112) = xmmword_1B30521C0;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050FE0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcDisplace *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28A5EC8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcDisplace::~HgcDisplace(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EEE28;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B8406A4ELL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcDisplace::~HgcDisplace(this);
  HGObject::operator delete(v1);
}

uint64_t HgcDisplace::SetParameter(HgcDisplace *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  __n128 *v12;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_28;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_28;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_28;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_28;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == 0.0
        && v12[4].n128_f32[1] == 0.0
        && v12[4].n128_f32[2] == a3.n128_f32[0]
        && v12[4].n128_f32[3] == a4)
      {
        return 0;
      }
      v12[4].n128_u64[0] = 0;
      v12[4].n128_u32[2] = a3.n128_u32[0];
      v12[4].n128_f32[3] = a4;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[9] = a3;
LABEL_28:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcDisplace::GetParameter(HgcDisplace *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_7;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_7;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_7;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_7;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[36];
      a3[1] = v8[37];
      a3[2] = v8[38];
      v4 = v8 + 39;
LABEL_7:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcDroplet::GetProgram(HgcDroplet *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000068a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(9.999999975e-07, 1.000000000, -2.000000000, 0.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
             "    const half4 c2 = half4(0.000000000, 1.000000000, -1.000000000, 0.000000000);\n"
             "    float4 s0, s1, s2, s3, s4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    s1 = float4(dot(s0.xy, s0.xy));\n"
             "    s2.x = fmax(s1.x, float(c0.x));\n"
             "    s2 = rsqrt(s2.xxxx);\n"
             "    s1 = s1*s2;\n"
             "    s2.xy = s0.xy*s2.xy;\n"
             "    s1 = s1*hg_Params[2].xxxx + hg_Params[2].yyyy;\n"
             "    s1 = s1 - float4(c1);\n"
             "    s3.xyz = clamp(s1.xyz, 0.00000f, 1.00000f);\n"
             "    s4.xyz = -s3.xyz*float3(c1.zzz) + float3(c1.www);\n"
             "    s3.xyz = s3.xyz*s3.xyz;\n"
             "    s4.xyz = s3.xyz*s4.xyz;\n"
             "    s4.xyz = s4.xyz*float3(c0.yzy) + float3(c2.xyz);\n"
             "    s3.x = select(s4.x, float(c2.x), s1.x < 0.00000h);\n"
             "    s3.x = select(s4.y, s3.x, s1.y < 0.00000h);\n"
             "    s3.x = select(s4.z, s3.x, s1.z < 0.00000h);\n"
             "    s1.x = select(float(c2.x), s3.x, s1.w < 0.00000h);\n"
             "    s1.xy = s1.xx*s2.xy;\n"
             "    s1.xy = s1.xy*hg_Params[2].zz + s0.xy;\n"
             "    s1.xy = s1.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    s1.xy = s1.xy + hg_Params[3].xy;\n"
             "    s1.xy = s1.xy*hg_Params[3].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f1401852:f3219aae:bb97dfbe:6220e491\n"
             "//SIG=00400000:00000000:00000000:00000001:0003:0004:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000064b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(9.999999975e-07, 1.000000000, -2.000000000, 0.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
             "    const float4 c2 = float4(0.000000000, 1.000000000, -1.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
             "    r1 = float4(dot(r0.xy, r0.xy));\n"
             "    r2.x = fmax(r1.x, c0.x);\n"
             "    r2 = rsqrt(r2.xxxx);\n"
             "    r1 = r1*r2;\n"
             "    r2.xy = r0.xy*r2.xy;\n"
             "    r1 = r1*hg_Params[2].xxxx + hg_Params[2].yyyy;\n"
             "    r1 = r1 - c1;\n"
             "    r3.xyz = clamp(r1.xyz, 0.00000f, 1.00000f);\n"
             "    r4.xyz = -r3.xyz*c1.zzz + c1.www;\n"
             "    r3.xyz = r3.xyz*r3.xyz;\n"
             "    r4.xyz = r3.xyz*r4.xyz;\n"
             "    r4.xyz = r4.xyz*c0.yzy + c2.xyz;\n"
             "    r3.x = select(r4.x, c2.x, r1.x < 0.00000f);\n"
             "    r3.x = select(r4.y, r3.x, r1.y < 0.00000f);\n"
             "    r3.x = select(r4.z, r3.x, r1.z < 0.00000f);\n"
             "    r1.x = select(c2.x, r3.x, r1.w < 0.00000f);\n"
             "    r1.xy = r1.xx*r2.xy;\n"
             "    r1.xy = r1.xy*hg_Params[2].zz + r0.xy;\n"
             "    r1.xy = r1.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    r1.xy = r1.xy + hg_Params[3].xy;\n"
             "    r1.xy = r1.xy*hg_Params[3].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b446a2bf:45b43480:19608501:dc95c27c\n"
             "//SIG=00000000:00000000:00000000:00000000:0003:0004:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000699\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(9.999999975e-07, 1.000000000, -2.000000000, 0.000000000);\n"
           "    const highp vec4 c1 = vec4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
           "    const highp vec4 c2 = vec4(0.000000000, 1.000000000, -1.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy*hg_ProgramLocal0.xy + hg_ProgramLocal0.zw;\n"
           "    r1 = vec4(dot(r0.xy, r0.xy));\n"
           "    r2.x = max(r1.x, c0.x);\n"
           "    r2 = inversesqrt(r2.xxxx);\n"
           "    r1 = r1*r2;\n"
           "    r2.xy = r0.xy*r2.xy;\n"
           "    r1 = r1*hg_ProgramLocal2.xxxx + hg_ProgramLocal2.yyyy;\n"
           "    r1 = r1 - c1;\n"
           "    r3.xyz = clamp(r1.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r4.xyz = -r3.xyz*c1.zzz + c1.www;\n"
           "    r3.xyz = r3.xyz*r3.xyz;\n"
           "    r4.xyz = r3.xyz*r4.xyz;\n"
           "    r4.xyz = r4.xyz*c0.yzy + c2.xyz;\n"
           "    r3.x = r1.x < 0.00000 ? c2.x : r4.x;\n"
           "    r3.x = r1.y < 0.00000 ? r3.x : r4.y;\n"
           "    r3.x = r1.z < 0.00000 ? r3.x : r4.z;\n"
           "    r1.x = r1.w < 0.00000 ? r3.x : c2.x;\n"
           "    r1.xy = r1.xx*r2.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal2.zz + r0.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal1.xy + hg_ProgramLocal1.zw;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal3.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal3.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r1.xy);\n"
           "}\n"
           "//MD5=224e842e:f8e208ab:8334dcb5:ba1d6959\n"
           "//SIG=00000000:00000000:00000000:00000000:0003:0004:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcDroplet::InitProgramDescriptor(HgcDroplet *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcDroplet_hgc_visible", "//Metal1.0     \n//LEN=0000000588\n[[ visible ]] FragmentOut HgcDroplet_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(9.999999975e-07, 1.000000000, -2.000000000, 0.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
    "    const float4 c2 = float4(0.000000000, 1.000000000, -1.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy*hg_Params[0].xy + hg_Params[0].zw;\n"
    "    r1 = float4(dot(r0.xy, r0.xy));\n"
    "    r2.x = fmax(r1.x, c0.x);\n"
    "    r2 = rsqrt(r2.xxxx);\n"
    "    r1 = r1*r2;\n"
    "    r2.xy = r0.xy*r2.xy;\n"
    "    r1 = r1*hg_Params[2].xxxx + hg_Params[2].yyyy;\n"
    "    r1 = r1 - c1;\n"
    "    r3.xyz = clamp(r1.xyz, 0.00000f, 1.00000f);\n"
    "    r4.xyz = -r3.xyz*c1.zzz + c1.www;\n"
    "    r3.xyz = r3.xyz*r3.xyz;\n"
    "    r4.xyz = r3.xyz*r4.xyz;\n"
    "    r4.xyz = r4.xyz*c0.yzy + c2.xyz;\n"
    "    r3.x = select(r4.x, c2.x, r1.x < 0.00000f);\n"
    "    r3.x = select(r4.y, r3.x, r1.y < 0.00000f);\n"
    "    r3.x = select(r4.z, r3.x, r1.z < 0.00000f);\n"
    "    r1.x = select(c2.x, r3.x, r1.w < 0.00000f);\n"
    "    r1.xy = r1.xx*r2.xy;\n"
    "    r1.xy = r1.xy*hg_Params[2].zz + r0.xy;\n"
    "    r1.xy = r1.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
    "    r1.xy = r1.xy + hg_Params[3].xy;\n"
    "    r1.xy = r1.xy*hg_Params[3].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A628C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcDroplet");
}

void sub_1B28A629C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A641C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A646C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A6464);
}

_QWORD *HgcDroplet::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcDroplet [hgc1]");
}

uint64_t HgcDroplet::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcDroplet::Bind(HgcDroplet *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcDroplet *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcDroplet::RenderTile(HgcDroplet *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  float32x4_t v57;
  uint64_t v58;
  int32x4_t v59;
  float32x2_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  float32x4_t *v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x4_t *v73;
  uint64_t v74;
  float32x4_t v75;
  int32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x2_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int32x4_t v87;
  float32x4_t v88;
  uint64_t v89;
  float32x4_t v90;
  uint64_t v91;
  int32x4_t v92;
  float32x2_t v93;
  float32x4_t *v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcDroplet *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(int8x16_t *)(v19 + 16);
          v21 = (float32x4_t)vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 8uLL);
          v22 = vaddq_f32(vmulq_f32(v17, *(float32x4_t *)v19), v21);
          v23 = vaddq_f32(vmulq_f32(v18, *(float32x4_t *)v19), v21);
          v21.i64[0] = vmulq_f32(v22, v22).u64[0];
          v24 = (int32x2_t)vmulq_f32(v23, v23).u64[0];
          v25 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1));
          v26 = vaddq_f32((float32x4_t)vdupq_lane_s32(v24, 0), (float32x4_t)vdupq_lane_s32(v24, 1));
          v28 = *(float32x4_t *)(v19 + 32);
          v27 = *(float32x4_t *)(v19 + 48);
          v29 = (int32x2_t)vmaxq_f32(v25, v27).u64[0];
          v27.i64[0] = vmaxq_f32(v26, v27).u64[0];
          v30 = *(float32x4_t *)(v19 + 64);
          v31 = *(float32x4_t *)(v19 + 80);
          v32 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(v29, 0)), v30);
          v33 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0)), v30);
          v34 = vminq_f32(vmulq_f32(v32, vrsqrtsq_f32(vmulq_n_f32(v32, *(float *)v29.i32), v32)), v30);
          v35 = vminq_f32(vmulq_f32(v33, vrsqrtsq_f32(vmulq_n_f32(v33, v27.f32[0]), v33)), v30);
          v36 = vmulq_f32(v34, vrsqrtsq_f32(vmulq_n_f32(v34, *(float *)v29.i32), v34));
          v37 = vmulq_f32(v35, vrsqrtsq_f32(vmulq_n_f32(v35, v27.f32[0]), v35));
          v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1);
          v39 = (int32x4_t)vsubq_f32(vaddq_f32(v38, vmulq_n_f32(vmulq_f32(v25, v36), v28.f32[0])), v31);
          v40 = (int32x4_t)vsubq_f32(vaddq_f32(v38, vmulq_n_f32(vmulq_f32(v26, v37), v28.f32[0])), v31);
          v41 = *(float32x4_t *)(v19 + 96);
          v42 = *(float32x4_t *)(v19 + 112);
          v43 = vminq_f32(vmaxq_f32((float32x4_t)v39, v41), v42);
          v44 = vminq_f32(vmaxq_f32((float32x4_t)v40, v41), v42);
          v45 = *(float32x4_t *)(v19 + 128);
          v46 = *(float32x4_t *)(v19 + 144);
          v47 = vsubq_f32(v45, vmulq_f32(v43, v46));
          v48 = vmulq_f32(vmulq_f32(v44, v44), vsubq_f32(v45, vmulq_f32(v44, v46)));
          v49 = *(int8x16_t *)(v19 + 160);
          v50 = *(float32x4_t *)(v19 + 176);
          v51 = (int32x4_t)vaddq_f32((float32x4_t)v49, vmulq_f32(v50, vmulq_f32(vmulq_f32(v43, v43), v47)));
          v52 = (int32x4_t)vaddq_f32((float32x4_t)v49, vmulq_f32(v50, v48));
          v53 = vaddq_f32(v22, vmulq_laneq_f32(vmulq_n_f32(vmulq_f32(v22, v36), *(float *)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v49, (float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 0xCuLL)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v49, (float32x4_t)vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v49, (float32x4_t)vrev64q_s32(v39)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v49, (float32x4_t)v39), v49, (int8x16_t)v51), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v51.i8, 1)),
                                    (int8x16_t)vdupq_laneq_s32(v51, 2)),
                                  v49).i32),
                    v28,
                    2));
          v54 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          v55 = vaddq_f32(v54, vmulq_f32((float32x4_t)v20, vaddq_f32(v23, vmulq_laneq_f32(vmulq_n_f32(vmulq_f32(v23, v37), *(float *)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v49, (float32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v49, (float32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v49, (float32x4_t)vrev64q_s32(v40)), vbslq_s8(
                                            (int8x16_t)vcgtq_f32((float32x4_t)v49, (float32x4_t)v40),
                                            v49,
                                            (int8x16_t)v52),
                                          (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v52.i8, 1)),
                                        (int8x16_t)vdupq_laneq_s32(v52, 2)),
                                      v49).i32),
                        v28,
                        2))));
          v56 = *((int *)a2 + 22);
          v57 = vsubq_f32(vaddq_f32(v54, vmulq_f32((float32x4_t)v20, v53)), v9);
          v58 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v59 = vaddq_s32(vcvtq_s32_f32(v57), vcltzq_f32(v57));
            v60 = (float32x2_t)vsubq_f32(v57, vcvtq_f32_s32(v59)).u64[0];
            v61 = (float32x4_t *)(v58 + 16 * (v59.i32[0] + v59.i32[1] * (int)v56));
            v62 = vaddq_f32(*v61, vmulq_n_f32(vsubq_f32(v61[1], *v61), v60.f32[0]));
            v63 = vaddq_f32(v62, vmulq_lane_f32(vsubq_f32(vaddq_f32(v61[v56], vmulq_n_f32(vsubq_f32(v61[(int)v56 + 1], v61[v56]), v60.f32[0])), v62), v60, 1));
            v64 = vsubq_f32(v55, v9);
            v65 = vaddq_s32(vcvtq_s32_f32(v64), vcltzq_f32(v64));
            v64.i64[0] = vsubq_f32(v64, vcvtq_f32_s32(v65)).u64[0];
            v66 = (float32x4_t *)(v58 + 16 * (v65.i32[0] + v65.i32[1] * (int)v56));
            v67 = vaddq_f32(*v66, vmulq_n_f32(vsubq_f32(v66[1], *v66), v64.f32[0]));
            v68 = vaddq_f32(v67, vmulq_lane_f32(vsubq_f32(vaddq_f32(v66[v56], vmulq_n_f32(vsubq_f32(v66[(int)v56 + 1], v66[v56]), v64.f32[0])), v67), *(float32x2_t *)v64.f32, 1));
          }
          else
          {
            v69 = vaddq_f32(v57, v13);
            v70 = vcvtq_s32_f32(v69);
            v69.i64[0] = vaddq_s32(v70, vcgtq_f32(vcvtq_f32_s32(v70), v69)).u64[0];
            v63 = *(float32x4_t *)(v58 + 16 * (v69.i32[0] + v69.i32[1] * (int)v56));
            v71 = vaddq_f32(vsubq_f32(v55, v9), v13);
            v72 = vcvtq_s32_f32(v71);
            v71.i64[0] = vaddq_s32(v72, vcgtq_f32(vcvtq_f32_s32(v72), v71)).u64[0];
            v68 = *(float32x4_t *)(v58 + 16 * (v71.i32[0] + v71.i32[1] * (int)v56));
          }
          v73 = (float32x4_t *)(v11 + 16 * v15);
          *v73 = v63;
          v73[1] = v68;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v74 = *((_QWORD *)this + 51);
        v75 = vaddq_f32(vmulq_f32(v17, *(float32x4_t *)v74), (float32x4_t)vextq_s8(*(int8x16_t *)v74, *(int8x16_t *)v74, 8uLL));
        v76 = (int32x2_t)vmulq_f32(v75, v75).u64[0];
        v77 = vaddq_f32((float32x4_t)vdupq_lane_s32(v76, 0), (float32x4_t)vdupq_lane_s32(v76, 1));
        v78 = *(float32x4_t *)(v74 + 32);
        v79 = (int32x2_t)vmaxq_f32(v77, *(float32x4_t *)(v74 + 48)).u64[0];
        v80 = *(float32x4_t *)(v74 + 64);
        v81 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(v79, 0)), v80);
        v82 = vminq_f32(vmulq_f32(v81, vrsqrtsq_f32(vmulq_n_f32(v81, *(float *)v79.i32), v81)), v80);
        v83 = vmulq_f32(v82, vrsqrtsq_f32(vmulq_n_f32(v82, *(float *)v79.i32), v82));
        v84 = (int32x4_t)vsubq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1), vmulq_n_f32(vmulq_f32(v77, v83), v78.f32[0])), *(float32x4_t *)(v74 + 80));
        v85 = vminq_f32(vmaxq_f32((float32x4_t)v84, *(float32x4_t *)(v74 + 96)), *(float32x4_t *)(v74 + 112));
        v86 = *(int8x16_t *)(v74 + 160);
        v87 = (int32x4_t)vaddq_f32((float32x4_t)v86, vmulq_f32(*(float32x4_t *)(v74 + 176), vmulq_f32(vmulq_f32(v85, v85), vsubq_f32(*(float32x4_t *)(v74 + 128), vmulq_f32(v85, *(float32x4_t *)(v74 + 144))))));
        v88 = vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)(v74 + 16), *(int8x16_t *)(v74 + 16), 8uLL), vmulq_f32(*(float32x4_t *)(v74 + 16), vaddq_f32(v75, vmulq_laneq_f32(vmulq_n_f32(vmulq_f32(v75, v83), *(float *)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v86, (float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 0xCuLL)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v86, (float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL)), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v86, (float32x4_t)vrev64q_s32(v84)), vbslq_s8(
                                          (int8x16_t)vcgtq_f32((float32x4_t)v86, (float32x4_t)v84),
                                          v86,
                                          (int8x16_t)v87),
                                        (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v87.i8, 1)),
                                      (int8x16_t)vdupq_laneq_s32(v87, 2)),
                                    v86).i32),
                      v78,
                      2))));
        v89 = *((int *)a2 + 22);
        v90 = vsubq_f32(v88, v9);
        v91 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v92 = vaddq_s32(vcvtq_s32_f32(v90), vcltzq_f32(v90));
          v93 = (float32x2_t)vsubq_f32(v90, vcvtq_f32_s32(v92)).u64[0];
          v94 = (float32x4_t *)(v91 + 16 * (v92.i32[0] + v92.i32[1] * (int)v89));
          v95 = vaddq_f32(*v94, vmulq_n_f32(vsubq_f32(v94[1], *v94), v93.f32[0]));
          v96 = vaddq_f32(v95, vmulq_lane_f32(vsubq_f32(vaddq_f32(v94[v89], vmulq_n_f32(vsubq_f32(v94[(int)v89 + 1], v94[v89]), v93.f32[0])), v95), v93, 1));
        }
        else
        {
          v97 = vaddq_f32(v90, v13);
          v98 = vcvtq_s32_f32(v97);
          v97.i64[0] = vaddq_s32(v98, vcgtq_f32(vcvtq_f32_s32(v98), v97)).u64[0];
          v96 = *(float32x4_t *)(v91 + 16 * (v97.i32[0] + v97.i32[1] * (int)v89));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v96;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcDroplet::GetDOD(HgcDroplet *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcDroplet *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcDroplet::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcDroplet::HgcDroplet(HgcDroplet *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EF090;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = xmmword_1B3052380;
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 80) = xmmword_1B304FD40;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *(_OWORD *)(v3 + 112) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 128) = xmmword_1B3052B60;
  *(_OWORD *)(v3 + 144) = xmmword_1B3051520;
  *(_OWORD *)(v3 + 160) = xmmword_1B30529C0;
  *(_OWORD *)(v3 + 176) = xmmword_1B3052B70;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcDroplet *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28A6D10(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcDroplet::~HgcDroplet(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EF090;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C408070C27FLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcDroplet::~HgcDroplet(this);
  HGObject::operator delete(v1);
}

uint64_t HgcDroplet::SetParameter(HgcDroplet *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcDroplet::GetParameter(HgcDroplet *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcFunHouse::GetProgram(HgcFunHouse *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000699\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 1.000000000, -2.000000000, 3.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = half2(hg_Params[5].xy)*c0.xx;\n"
             "    s0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    s0.xy = s0.xy*hg_Params[4].zw;\n"
             "    s1.x = dot(s0.xy, hg_Params[1].xy);\n"
             "    s1.y = dot(s0.xy, hg_Params[1].zw);\n"
             "    s0.x = clamp(abs(s1.x), 0.00000f, 1.00000f);\n"
             "    s0.x = clamp(float(c0.y) - s0.x, 0.00000f, 1.00000f);\n"
             "    s2.x = s0.x*float(c0.z) + float(c0.w);\n"
             "    s0.x = s0.x*s0.x;\n"
             "    s2.x = s0.x*s2.x;\n"
             "    s2.x = mix(float(c0.y), hg_Params[3].x, s2.x);\n"
             "    s1.x = s1.x*s2.x;\n"
             "    s0.x = dot(s1.xy, hg_Params[2].xy);\n"
             "    s0.y = dot(s1.xy, hg_Params[2].zw);\n"
             "    s0.xy = s0.xy*hg_Params[4].xy + hg_Params[0].xy;\n"
             "    s2.xy = fmax(s0.xy, -float2(r0.xy));\n"
             "    s2.xy = fmin(s2.xy, float2(r0.xy));\n"
             "    s1.xy = -float2(r0.xy) - s0.xy;\n"
             "    s0.xy = s0.xy - float2(r0.xy);\n"
             "    s1.x = fmax(s1.x, s1.y);\n"
             "    s1.y = fmax(s0.x, s0.y);\n"
             "    s1.x = fmax(s1.x, s1.y);\n"
             "    s2.xy = s2.xy + hg_Params[6].xy;\n"
             "    s2.xy = s2.xy*hg_Params[6].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s2.xy);\n"
             "    output.color0 = select(float4(r0), float4(c1.xxxx), -s1.xxxx < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=03ee8fb5:12efa0c1:01eee3df:c06fd0f7\n"
             "//SIG=00400000:00000000:00000000:00000001:0002:0007:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000639\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 1.000000000, -2.000000000, 3.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = hg_Params[5].xy*c0.xx;\n"
             "    r1.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    r1.xy = r1.xy*hg_Params[4].zw;\n"
             "    r2.x = dot(r1.xy, hg_Params[1].xy);\n"
             "    r2.y = dot(r1.xy, hg_Params[1].zw);\n"
             "    r1.x = clamp(abs(r2.x), 0.00000f, 1.00000f);\n"
             "    r1.x = clamp(c0.y - r1.x, 0.00000f, 1.00000f);\n"
             "    r3.x = r1.x*c0.z + c0.w;\n"
             "    r1.x = r1.x*r1.x;\n"
             "    r3.x = r1.x*r3.x;\n"
             "    r3.x = mix(c0.y, hg_Params[3].x, r3.x);\n"
             "    r2.x = r2.x*r3.x;\n"
             "    r1.x = dot(r2.xy, hg_Params[2].xy);\n"
             "    r1.y = dot(r2.xy, hg_Params[2].zw);\n"
             "    r1.xy = r1.xy*hg_Params[4].xy + hg_Params[0].xy;\n"
             "    r3.xy = fmax(r1.xy, -r0.xy);\n"
             "    r3.xy = fmin(r3.xy, r0.xy);\n"
             "    r2.xy = -r0.xy - r1.xy;\n"
             "    r1.xy = r1.xy - r0.xy;\n"
             "    r2.x = fmax(r2.x, r2.y);\n"
             "    r2.y = fmax(r1.x, r1.y);\n"
             "    r2.x = fmax(r2.x, r2.y);\n"
             "    r3.xy = r3.xy + hg_Params[6].xy;\n"
             "    r3.xy = r3.xy*hg_Params[6].zw;\n"
             "    r3 = hg_Texture0.sample(hg_Sampler0, r3.xy);\n"
             "    output.color0 = select(r3, c1.xxxx, -r2.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=94f4bf66:7c889179:a07da9c3:99f4d58f\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:0007:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000075e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 1.000000000, -2.000000000, 3.000000000);\n"
           "    const highp vec4 c1 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.xy = hg_ProgramLocal5.xy*c0.xx;\n"
           "    r1.xy = hg_TexCoord0.xy - hg_ProgramLocal0.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal4.zw;\n"
           "    r2.x = dot(r1.xy, hg_ProgramLocal1.xy);\n"
           "    r2.y = dot(r1.xy, hg_ProgramLocal1.zw);\n"
           "    r1.x = clamp(abs(r2.x), 0.00000, 1.00000);\n"
           "    r1.x = clamp(c0.y - r1.x, 0.00000, 1.00000);\n"
           "    r3.x = r1.x*c0.z + c0.w;\n"
           "    r1.x = r1.x*r1.x;\n"
           "    r3.x = r1.x*r3.x;\n"
           "    r3.x = mix(c0.y, hg_ProgramLocal3.x, r3.x);\n"
           "    r2.x = r2.x*r3.x;\n"
           "    r1.x = dot(r2.xy, hg_ProgramLocal2.xy);\n"
           "    r1.y = dot(r2.xy, hg_ProgramLocal2.zw);\n"
           "    r1.xy = r1.xy*hg_ProgramLocal4.xy + hg_ProgramLocal0.xy;\n"
           "    r3.xy = max(r1.xy, -r0.xy);\n"
           "    r3.xy = min(r3.xy, r0.xy);\n"
           "    r2.xy = -r0.xy - r1.xy;\n"
           "    r1.xy = r1.xy - r0.xy;\n"
           "    r2.x = max(r2.x, r2.y);\n"
           "    r2.y = max(r1.x, r1.y);\n"
           "    r2.x = max(r2.x, r2.y);\n"
           "    r3.xy = r3.xy + hg_ProgramLocal6.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal6.zw;\n"
           "    r3 = texture2D(hg_Texture0, r3.xy);\n"
           "    gl_FragColor = vec4(-r2.x < 0.00000 ? c1.x : r3.x, -r2.x < 0.00000 ? c1.x : r3.y, -r2.x < 0.00000 ? c1.x "
           ": r3.z, -r2.x < 0.00000 ? c1.x : r3.w);\n"
           "}\n"
           "//MD5=0e9040f6:b640f8ae:e9836955:e39f326a\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:0007:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcFunHouse::InitProgramDescriptor(HgcFunHouse *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcFunHouse_hgc_visible", "//Metal1.0     \n//LEN=0000000577\n[[ visible ]] FragmentOut HgcFunHouse_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 1.000000000, -2.000000000, 3.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = hg_Params[5].xy*c0.xx;\n"
    "    r1.xy = texCoord0.xy - hg_Params[0].xy;\n"
    "    r1.xy = r1.xy*hg_Params[4].zw;\n"
    "    r2.x = dot(r1.xy, hg_Params[1].xy);\n"
    "    r2.y = dot(r1.xy, hg_Params[1].zw);\n"
    "    r1.x = clamp(abs(r2.x), 0.00000f, 1.00000f);\n"
    "    r1.x = clamp(c0.y - r1.x, 0.00000f, 1.00000f);\n"
    "    r3.x = r1.x*c0.z + c0.w;\n"
    "    r1.x = r1.x*r1.x;\n"
    "    r3.x = r1.x*r3.x;\n"
    "    r3.x = mix(c0.y, hg_Params[3].x, r3.x);\n"
    "    r2.x = r2.x*r3.x;\n"
    "    r1.x = dot(r2.xy, hg_Params[2].xy);\n"
    "    r1.y = dot(r2.xy, hg_Params[2].zw);\n"
    "    r1.xy = r1.xy*hg_Params[4].xy + hg_Params[0].xy;\n"
    "    r3.xy = fmax(r1.xy, -r0.xy);\n"
    "    r3.xy = fmin(r3.xy, r0.xy);\n"
    "    r2.xy = -r0.xy - r1.xy;\n"
    "    r1.xy = r1.xy - r0.xy;\n"
    "    r2.x = fmax(r2.x, r2.y);\n"
    "    r2.y = fmax(r1.x, r1.y);\n"
    "    r2.x = fmax(r2.x, r2.y);\n"
    "    r3.xy = r3.xy + hg_Params[6].xy;\n"
    "    r3.xy = r3.xy*hg_Params[6].zw;\n"
    "    r3 = hg_Texture0.sample(hg_Sampler0, r3.xy);\n"
    "    output.color0 = select(r3, c1.xxxx, -r2.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A6F18()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcFunHouse");
}

void sub_1B28A6F28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A70A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A70F8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A70F0);
}

_QWORD *HgcFunHouse::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcFunHouse [hgc1]");
}

uint64_t HgcFunHouse::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 6, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcFunHouse::Bind(HgcFunHouse *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcFunHouse *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcFunHouse::RenderTile(HgcFunHouse *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  uint64_t v59;
  int32x4_t v60;
  float32x2_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t *v80;
  uint64_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  int8x16_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  uint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  int32x4_t v103;
  float32x2_t v104;
  float32x4_t *v105;
  float32x4_t v106;
  int8x16_t v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcFunHouse *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(int8x16_t *)(v19 + 64);
          v21 = *(int8x16_t *)(v19 + 112);
          v22 = vmulq_f32(*(float32x4_t *)(v19 + 80), *(float32x4_t *)(v19 + 96));
          v23 = *(int8x16_t *)(v19 + 16);
          v24 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          v25 = vmulq_f32(vsubq_f32(v17, *(float32x4_t *)v19), v24);
          v26 = vmulq_f32(vsubq_f32(v18, *(float32x4_t *)v19), v24);
          v27 = vmulq_f32((float32x4_t)v23, v25);
          v28 = vmulq_f32((float32x4_t)v23, v26);
          v29 = (float32x4_t)vextq_s8(v23, v23, 8uLL);
          v30 = vmulq_f32(v25, v29);
          v31 = vmulq_f32(v26, v29);
          v32 = (int8x16_t)vaddq_f32(v30, (float32x4_t)vrev64q_s32((int32x4_t)v30));
          v33 = (int8x16_t)vaddq_f32(v31, (float32x4_t)vrev64q_s32((int32x4_t)v31));
          v34 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v27, (float32x4_t)vrev64q_s32((int32x4_t)v27)), v32);
          v35 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v28, (float32x4_t)vrev64q_s32((int32x4_t)v28)), v33);
          v36 = *(int8x16_t *)(v19 + 128);
          v37 = *(float32x4_t *)(v19 + 144);
          v38 = vminq_f32(vmaxq_f32(vsubq_f32(v37, vminq_f32(vmaxq_f32(vabsq_f32(v34), (float32x4_t)v36), v37)), (float32x4_t)v36), v37);
          v39 = vminq_f32(vmaxq_f32(vsubq_f32(v37, vminq_f32(vmaxq_f32(vabsq_f32(v35), (float32x4_t)v36), v37)), (float32x4_t)v36), v37);
          v40 = *(float32x4_t *)(v19 + 160);
          v41 = *(float32x4_t *)(v19 + 176);
          v42 = vaddq_f32(v40, vmulq_f32(v38, v41));
          v43 = vmulq_f32(vmulq_f32(v39, v39), vaddq_f32(v40, vmulq_f32(v39, v41)));
          v44 = *(int8x16_t *)(v19 + 32);
          v45 = vsubq_f32(*(float32x4_t *)(v19 + 48), v37);
          v46 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(vaddq_f32(v37, vmulq_f32(v45, vmulq_f32(vmulq_f32(v38, v38), v42))), v34), v32);
          v47 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmulq_f32(vaddq_f32(v37, vmulq_f32(v45, v43)), v35), v33);
          v48 = vmulq_f32((float32x4_t)v44, v46);
          v49 = vmulq_f32((float32x4_t)v44, v47);
          v50 = (float32x4_t)vextq_s8(v44, v44, 8uLL);
          v51 = vmulq_f32(v50, v46);
          v52 = vmulq_f32(v50, v47);
          v53 = vaddq_f32(*(float32x4_t *)v19, vmulq_f32((float32x4_t)v20, (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v48, (float32x4_t)vrev64q_s32((int32x4_t)v48)), (int8x16_t)vaddq_f32(v51, (float32x4_t)vrev64q_s32((int32x4_t)v51)))));
          v54 = vaddq_f32(*(float32x4_t *)v19, vmulq_f32((float32x4_t)v20, (float32x4_t)vbslq_s8(v21, (int8x16_t)vaddq_f32(v49, (float32x4_t)vrev64q_s32((int32x4_t)v49)), (int8x16_t)vaddq_f32(v52, (float32x4_t)vrev64q_s32((int32x4_t)v52)))));
          v55 = vnegq_f32(v22);
          v56 = vminq_f32(vmaxq_f32(v54, v55), v22);
          v57 = *((int *)a2 + 22);
          v58 = vsubq_f32(vminq_f32(vmaxq_f32(v53, v55), v22), v9);
          v59 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v60 = vaddq_s32(vcvtq_s32_f32(v58), vcltzq_f32(v58));
            v61 = (float32x2_t)vsubq_f32(v58, vcvtq_f32_s32(v60)).u64[0];
            v62 = (float32x4_t *)(v59 + 16 * (v60.i32[0] + v60.i32[1] * (int)v57));
            v63 = vaddq_f32(*v62, vmulq_n_f32(vsubq_f32(v62[1], *v62), v61.f32[0]));
            v64 = (int8x16_t)vaddq_f32(v63, vmulq_lane_f32(vsubq_f32(vaddq_f32(v62[v57], vmulq_n_f32(vsubq_f32(v62[(int)v57 + 1], v62[v57]), v61.f32[0])), v63), v61, 1));
            v65 = vsubq_f32(v56, v9);
            v66 = vaddq_s32(vcvtq_s32_f32(v65), vcltzq_f32(v65));
            v65.i64[0] = vsubq_f32(v65, vcvtq_f32_s32(v66)).u64[0];
            v67 = (float32x4_t *)(v59 + 16 * (v66.i32[0] + v66.i32[1] * (int)v57));
            v68 = vaddq_f32(*v67, vmulq_n_f32(vsubq_f32(v67[1], *v67), v65.f32[0]));
            v69 = (int8x16_t)vaddq_f32(v68, vmulq_lane_f32(vsubq_f32(vaddq_f32(v67[v57], vmulq_n_f32(vsubq_f32(v67[(int)v57 + 1], v67[v57]), v65.f32[0])), v68), *(float32x2_t *)v65.f32, 1));
          }
          else
          {
            v70 = vaddq_f32(v58, v13);
            v71 = vcvtq_s32_f32(v70);
            v70.i64[0] = vaddq_s32(v71, vcgtq_f32(vcvtq_f32_s32(v71), v70)).u64[0];
            v64 = *(int8x16_t *)(v59 + 16 * (v70.i32[0] + v70.i32[1] * (int)v57));
            v72 = vaddq_f32(vsubq_f32(v56, v9), v13);
            v73 = vcvtq_s32_f32(v72);
            v72.i64[0] = vaddq_s32(v73, vcgtq_f32(vcvtq_f32_s32(v73), v72)).u64[0];
            v69 = *(int8x16_t *)(v59 + 16 * (v72.i32[0] + v72.i32[1] * (int)v57));
          }
          v74 = vsubq_f32(v55, v53);
          v75 = vsubq_f32(v55, v54);
          v76 = vsubq_f32(v53, v22);
          v77 = vsubq_f32(v54, v22);
          v78 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmaxq_f32(v74, (float32x4_t)vrev64q_s32((int32x4_t)v74)), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v76), v76));
          v79 = (float32x4_t)vbslq_s8(v21, (int8x16_t)vmaxq_f32(v75, (float32x4_t)vrev64q_s32((int32x4_t)v75)), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v77), v77));
          v80 = (int8x16_t *)(v11 + 16 * v15);
          *v80 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v78, (float32x4_t)vrev64q_s32((int32x4_t)v78)), 0), (float32x4_t)v36), v36, v64);
          v80[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v79, (float32x4_t)vrev64q_s32((int32x4_t)v79)), 0), (float32x4_t)v36), v36, v69);
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v81 = *((_QWORD *)this + 51);
        v82 = *(int8x16_t *)(v81 + 64);
        v83 = *(int8x16_t *)(v81 + 112);
        v84 = vmulq_f32(*(float32x4_t *)(v81 + 80), *(float32x4_t *)(v81 + 96));
        v85 = *(int8x16_t *)(v81 + 16);
        v86 = vmulq_f32(vsubq_f32(v17, *(float32x4_t *)v81), (float32x4_t)vextq_s8(v82, v82, 8uLL));
        v87 = vmulq_f32((float32x4_t)v85, v86);
        v88 = vmulq_f32(v86, (float32x4_t)vextq_s8(v85, v85, 8uLL));
        v89 = (int8x16_t)vaddq_f32(v88, (float32x4_t)vrev64q_s32((int32x4_t)v88));
        v90 = (float32x4_t)vbslq_s8(v83, (int8x16_t)vaddq_f32(v87, (float32x4_t)vrev64q_s32((int32x4_t)v87)), v89);
        v91 = *(int8x16_t *)(v81 + 128);
        v92 = *(float32x4_t *)(v81 + 144);
        v93 = vminq_f32(vmaxq_f32(vsubq_f32(v92, vminq_f32(vmaxq_f32(vabsq_f32(v90), (float32x4_t)v91), v92)), (float32x4_t)v91), v92);
        v94 = *(int8x16_t *)(v81 + 32);
        v95 = (float32x4_t)vbslq_s8(v83, (int8x16_t)vmulq_f32(vaddq_f32(v92, vmulq_f32(vsubq_f32(*(float32x4_t *)(v81 + 48), v92), vmulq_f32(vmulq_f32(v93, v93), vaddq_f32(*(float32x4_t *)(v81 + 160), vmulq_f32(v93, *(float32x4_t *)(v81 + 176)))))), v90), v89);
        v96 = vmulq_f32((float32x4_t)v94, v95);
        v97 = vmulq_f32((float32x4_t)vextq_s8(v94, v94, 8uLL), v95);
        v98 = vaddq_f32(*(float32x4_t *)v81, vmulq_f32((float32x4_t)v82, (float32x4_t)vbslq_s8(v83, (int8x16_t)vaddq_f32(v96, (float32x4_t)vrev64q_s32((int32x4_t)v96)), (int8x16_t)vaddq_f32(v97, (float32x4_t)vrev64q_s32((int32x4_t)v97)))));
        v99 = vnegq_f32(v84);
        v100 = *((int *)a2 + 22);
        v101 = vsubq_f32(vminq_f32(vmaxq_f32(v98, v99), v84), v9);
        v102 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v103 = vaddq_s32(vcvtq_s32_f32(v101), vcltzq_f32(v101));
          v104 = (float32x2_t)vsubq_f32(v101, vcvtq_f32_s32(v103)).u64[0];
          v105 = (float32x4_t *)(v102 + 16 * (v103.i32[0] + v103.i32[1] * (int)v100));
          v106 = vaddq_f32(*v105, vmulq_n_f32(vsubq_f32(v105[1], *v105), v104.f32[0]));
          v107 = (int8x16_t)vaddq_f32(v106, vmulq_lane_f32(vsubq_f32(vaddq_f32(v105[v100], vmulq_n_f32(vsubq_f32(v105[(int)v100 + 1], v105[v100]), v104.f32[0])), v106), v104, 1));
        }
        else
        {
          v108 = vaddq_f32(v101, v13);
          v109 = vcvtq_s32_f32(v108);
          v108.i64[0] = vaddq_s32(v109, vcgtq_f32(vcvtq_f32_s32(v109), v108)).u64[0];
          v107 = *(int8x16_t *)(v102 + 16 * (v108.i32[0] + v108.i32[1] * (int)v100));
        }
        v110 = vsubq_f32(v99, v98);
        v111 = vsubq_f32(v98, v84);
        v112 = (float32x4_t)vbslq_s8(v83, (int8x16_t)vmaxq_f32(v110, (float32x4_t)vrev64q_s32((int32x4_t)v110)), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v111), v111));
        *(int8x16_t *)(v11 + 16 * v15) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v112, (float32x4_t)vrev64q_s32((int32x4_t)v112)), 0), (float32x4_t)v91), v91, v107);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcFunHouse::GetDOD(HgcFunHouse *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcFunHouse *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcFunHouse::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcFunHouse::HgcFunHouse(HgcFunHouse *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EF2F8;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = xmmword_1B3052100;
  *(_OWORD *)(v3 + 112) = xmmword_1B3050E20;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_OWORD *)(v3 + 144) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 160) = xmmword_1B3052B90;
  *(_OWORD *)(v3 + 176) = xmmword_1B3052BA0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcFunHouse *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28A79E4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcFunHouse::~HgcFunHouse(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EF2F8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C408070C27FLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcFunHouse::~HgcFunHouse(this);
  HGObject::operator delete(v1);
}

uint64_t HgcFunHouse::SetParameter(HgcFunHouse *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcFunHouse::GetParameter(HgcFunHouse *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcGlassBlock::GetProgram(HgcGlassBlock *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000052b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    s1.xy = s0.xy*hg_Params[1].xy;\n"
             "    s1.xy = floor(s1.xy);\n"
             "    s1.xy = s1.xy*hg_Params[1].zw;\n"
             "    s0.xy = s0.xy - s1.xy;\n"
             "    s2.x = dot(s1.xy, hg_Params[2].xy);\n"
             "    s2.y = dot(s1.xy, hg_Params[2].zw);\n"
             "    s2.xy = s2.xy + s0.xy;\n"
             "    s2.xy = s2.xy + hg_Params[0].xy;\n"
             "    s1.xy = fmax(s2.xy, hg_Params[3].xy);\n"
             "    s1.xy = fmin(s1.xy, hg_Params[4].xy);\n"
             "    s0.xy = hg_Params[3].xy - s2.xy;\n"
             "    s2.xy = s2.xy - hg_Params[4].xy;\n"
             "    s0.x = fmax(s0.x, s0.y);\n"
             "    s0.y = fmax(s2.x, s2.y);\n"
             "    s0.x = fmax(s0.x, s0.y);\n"
             "    s1.xy = s1.xy + hg_Params[5].xy;\n"
             "    s1.xy = s1.xy*hg_Params[5].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    output.color0 = select(float4(r0), float4(c0.xxxx), -s0.xxxx < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=923753ff:6091895a:5c182939:63500d82\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0006:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000508\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    r1.xy = r0.xy*hg_Params[1].xy;\n"
             "    r1.xy = floor(r1.xy);\n"
             "    r1.xy = r1.xy*hg_Params[1].zw;\n"
             "    r0.xy = r0.xy - r1.xy;\n"
             "    r2.x = dot(r1.xy, hg_Params[2].xy);\n"
             "    r2.y = dot(r1.xy, hg_Params[2].zw);\n"
             "    r2.xy = r2.xy + r0.xy;\n"
             "    r2.xy = r2.xy + hg_Params[0].xy;\n"
             "    r1.xy = fmax(r2.xy, hg_Params[3].xy);\n"
             "    r1.xy = fmin(r1.xy, hg_Params[4].xy);\n"
             "    r0.xy = hg_Params[3].xy - r2.xy;\n"
             "    r2.xy = r2.xy - hg_Params[4].xy;\n"
             "    r0.x = fmax(r0.x, r0.y);\n"
             "    r0.y = fmax(r2.x, r2.y);\n"
             "    r0.x = fmax(r0.x, r0.y);\n"
             "    r1.xy = r1.xy + hg_Params[5].xy;\n"
             "    r1.xy = r1.xy*hg_Params[5].zw;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    output.color0 = select(r1, c0.xxxx, -r0.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=45605842:b5e56ddb:8975c6e1:60f2d2ee\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0006:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000060a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy - hg_ProgramLocal0.xy;\n"
           "    r1.xy = r0.xy*hg_ProgramLocal1.xy;\n"
           "    r1.xy = floor(r1.xy);\n"
           "    r1.xy = r1.xy*hg_ProgramLocal1.zw;\n"
           "    r0.xy = r0.xy - r1.xy;\n"
           "    r2.x = dot(r1.xy, hg_ProgramLocal2.xy);\n"
           "    r2.y = dot(r1.xy, hg_ProgramLocal2.zw);\n"
           "    r2.xy = r2.xy + r0.xy;\n"
           "    r2.xy = r2.xy + hg_ProgramLocal0.xy;\n"
           "    r1.xy = max(r2.xy, hg_ProgramLocal3.xy);\n"
           "    r1.xy = min(r1.xy, hg_ProgramLocal4.xy);\n"
           "    r0.xy = hg_ProgramLocal3.xy - r2.xy;\n"
           "    r2.xy = r2.xy - hg_ProgramLocal4.xy;\n"
           "    r0.x = max(r0.x, r0.y);\n"
           "    r0.y = max(r2.x, r2.y);\n"
           "    r0.x = max(r0.x, r0.y);\n"
           "    r1.xy = r1.xy + hg_ProgramLocal5.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal5.zw;\n"
           "    r1 = texture2D(hg_Texture0, r1.xy);\n"
           "    gl_FragColor = vec4(-r0.x < 0.00000 ? c0.x : r1.x, -r0.x < 0.00000 ? c0.x : r1.y, -r0.x < 0.00000 ? c0.x "
           ": r1.z, -r0.x < 0.00000 ? c0.x : r1.w);\n"
           "}\n"
           "//MD5=f8373a7b:5845bf46:0573595f:6b414c4e\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0006:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcGlassBlock::InitProgramDescriptor(HgcGlassBlock *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGlassBlock_hgc_visible", "//Metal1.0     \n//LEN=0000000448\n[[ visible ]] FragmentOut HgcGlassBlock_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy - hg_Params[0].xy;\n"
    "    r1.xy = r0.xy*hg_Params[1].xy;\n"
    "    r1.xy = floor(r1.xy);\n"
    "    r1.xy = r1.xy*hg_Params[1].zw;\n"
    "    r0.xy = r0.xy - r1.xy;\n"
    "    r2.x = dot(r1.xy, hg_Params[2].xy);\n"
    "    r2.y = dot(r1.xy, hg_Params[2].zw);\n"
    "    r2.xy = r2.xy + r0.xy;\n"
    "    r2.xy = r2.xy + hg_Params[0].xy;\n"
    "    r1.xy = fmax(r2.xy, hg_Params[3].xy);\n"
    "    r1.xy = fmin(r1.xy, hg_Params[4].xy);\n"
    "    r0.xy = hg_Params[3].xy - r2.xy;\n"
    "    r2.xy = r2.xy - hg_Params[4].xy;\n"
    "    r0.x = fmax(r0.x, r0.y);\n"
    "    r0.y = fmax(r2.x, r2.y);\n"
    "    r0.x = fmax(r0.x, r0.y);\n"
    "    r1.xy = r1.xy + hg_Params[5].xy;\n"
    "    r1.xy = r1.xy*hg_Params[5].zw;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    output.color0 = select(r1, c0.xxxx, -r0.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A7BEC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGlassBlock");
}

void sub_1B28A7BFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052790;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A7D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A7DCC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A7DC4);
}

_QWORD *HgcGlassBlock::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGlassBlock [hgc1]");
}

uint64_t HgcGlassBlock::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 5, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcGlassBlock::Bind(HgcGlassBlock *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcGlassBlock *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcGlassBlock::RenderTile(HgcGlassBlock *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  uint64_t v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  int32x4_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  int32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  int8x16_t *v95;
  uint64_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int8x16_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  float32x4_t v111;
  uint64_t v112;
  float32x4_t v113;
  uint64_t v114;
  int32x4_t v115;
  float32x2_t v116;
  float32x4_t *v117;
  float32x4_t v118;
  int8x16_t v119;
  float32x4_t v120;
  int32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcGlassBlock *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 3)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v20 = *((_QWORD *)this + 51);
          v21 = *(int8x16_t *)(v20 + 16);
          v22 = vsubq_f32(v17, *(float32x4_t *)v20);
          v23 = vsubq_f32(v18, *(float32x4_t *)v20);
          v24 = vsubq_f32(v19, *(float32x4_t *)v20);
          v25 = vmulq_f32(v22, (float32x4_t)v21);
          v26 = vmulq_f32(v23, (float32x4_t)v21);
          v27 = vmulq_f32(v24, (float32x4_t)v21);
          v28 = vcvtq_f32_s32(vcvtq_s32_f32(v25));
          v29 = vcvtq_f32_s32(vcvtq_s32_f32(v26));
          v30 = vcvtq_f32_s32(vcvtq_s32_f32(v27));
          v31 = (int8x16_t)vcgtq_f32(v28, v25);
          v32 = *(float32x4_t *)(v20 + 64);
          v33 = *(int8x16_t *)(v20 + 80);
          v34 = (float32x4_t)vextq_s8(v21, v21, 8uLL);
          v35 = vmulq_f32(v34, vsubq_f32(v28, (float32x4_t)vandq_s8(v33, v31)));
          v36 = vmulq_f32(v34, vsubq_f32(v29, (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v29, v26))));
          v37 = vmulq_f32(v34, vsubq_f32(v30, (float32x4_t)vandq_s8(v33, (int8x16_t)vcgtq_f32(v30, v27))));
          v38 = vsubq_f32(v22, v35);
          v39 = vsubq_f32(v23, v36);
          v40 = vsubq_f32(v24, v37);
          v41 = *(int8x16_t *)(v20 + 32);
          v42 = *(float32x4_t *)(v20 + 48);
          v43 = vmulq_f32((float32x4_t)v41, v35);
          v44 = vmulq_f32((float32x4_t)v41, v36);
          v45 = vmulq_f32((float32x4_t)v41, v37);
          v46 = (float32x4_t)vextq_s8(v41, v41, 8uLL);
          v47 = vmulq_f32(v46, v35);
          v48 = vmulq_f32(v46, v36);
          v49 = vmulq_f32(v46, v37);
          v50 = (int8x16_t)vaddq_f32(v47, (float32x4_t)vrev64q_s32((int32x4_t)v47));
          v51 = (int8x16_t)vaddq_f32(v49, (float32x4_t)vrev64q_s32((int32x4_t)v49));
          v52 = *(int8x16_t *)(v20 + 96);
          v53 = vaddq_f32(v38, (float32x4_t)vbslq_s8(v52, (int8x16_t)vaddq_f32(v43, (float32x4_t)vrev64q_s32((int32x4_t)v43)), v50));
          v54 = vaddq_f32(v40, (float32x4_t)vbslq_s8(v52, (int8x16_t)vaddq_f32(v45, (float32x4_t)vrev64q_s32((int32x4_t)v45)), v51));
          v55 = vaddq_f32(*(float32x4_t *)v20, v53);
          v56 = vaddq_f32(*(float32x4_t *)v20, vaddq_f32(v39, (float32x4_t)vbslq_s8(v52, (int8x16_t)vaddq_f32(v44, (float32x4_t)vrev64q_s32((int32x4_t)v44)), (int8x16_t)vaddq_f32(v48, (float32x4_t)vrev64q_s32((int32x4_t)v48)))));
          v57 = vaddq_f32(*(float32x4_t *)v20, v54);
          v58 = vminq_f32(vmaxq_f32(v56, v42), v32);
          v59 = vminq_f32(vmaxq_f32(v57, v42), v32);
          v60 = *((int *)a2 + 22);
          v61 = vsubq_f32(vminq_f32(vmaxq_f32(v55, v42), v32), v9);
          v62 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v63 = vaddq_s32(vcvtq_s32_f32(v61), vcltzq_f32(v61));
            v64 = (float32x2_t)vsubq_f32(v61, vcvtq_f32_s32(v63)).u64[0];
            v65 = (float32x4_t *)(v62 + 16 * (v63.i32[0] + v63.i32[1] * (int)v60));
            v66 = vaddq_f32(*v65, vmulq_n_f32(vsubq_f32(v65[1], *v65), v64.f32[0]));
            v67 = (int8x16_t)vaddq_f32(v66, vmulq_lane_f32(vsubq_f32(vaddq_f32(v65[v60], vmulq_n_f32(vsubq_f32(v65[(int)v60 + 1], v65[v60]), v64.f32[0])), v66), v64, 1));
            v68 = vsubq_f32(v58, v9);
            v69 = vaddq_s32(vcvtq_s32_f32(v68), vcltzq_f32(v68));
            v68.i64[0] = vsubq_f32(v68, vcvtq_f32_s32(v69)).u64[0];
            v70 = (float32x4_t *)(v62 + 16 * (v69.i32[0] + v69.i32[1] * (int)v60));
            v71 = vaddq_f32(*v70, vmulq_n_f32(vsubq_f32(v70[1], *v70), v68.f32[0]));
            v72 = (int8x16_t)vaddq_f32(v71, vmulq_lane_f32(vsubq_f32(vaddq_f32(v70[v60], vmulq_n_f32(vsubq_f32(v70[(int)v60 + 1], v70[v60]), v68.f32[0])), v71), *(float32x2_t *)v68.f32, 1));
            v73 = vsubq_f32(v59, v9);
            v74 = vaddq_s32(vcvtq_s32_f32(v73), vcltzq_f32(v73));
            v73.i64[0] = vsubq_f32(v73, vcvtq_f32_s32(v74)).u64[0];
            v75 = (float32x4_t *)(v62 + 16 * (v74.i32[0] + v74.i32[1] * (int)v60));
            v76 = vaddq_f32(*v75, vmulq_n_f32(vsubq_f32(v75[1], *v75), v73.f32[0]));
            v77 = (int8x16_t)vaddq_f32(v76, vmulq_lane_f32(vsubq_f32(vaddq_f32(v75[v60], vmulq_n_f32(vsubq_f32(v75[(int)v60 + 1], v75[v60]), v73.f32[0])), v76), *(float32x2_t *)v73.f32, 1));
          }
          else
          {
            v78 = vaddq_f32(v61, v13);
            v79 = vcvtq_s32_f32(v78);
            v78.i64[0] = vaddq_s32(v79, vcgtq_f32(vcvtq_f32_s32(v79), v78)).u64[0];
            v67 = *(int8x16_t *)(v62 + 16 * (v78.i32[0] + v78.i32[1] * (int)v60));
            v80 = vaddq_f32(vsubq_f32(v58, v9), v13);
            v81 = vcvtq_s32_f32(v80);
            v80.i64[0] = vaddq_s32(v81, vcgtq_f32(vcvtq_f32_s32(v81), v80)).u64[0];
            v72 = *(int8x16_t *)(v62 + 16 * (v80.i32[0] + v80.i32[1] * (int)v60));
            v82 = vaddq_f32(vsubq_f32(v59, v9), v13);
            v83 = vcvtq_s32_f32(v82);
            v82.i64[0] = vaddq_s32(v83, vcgtq_f32(vcvtq_f32_s32(v83), v82)).u64[0];
            v77 = *(int8x16_t *)(v62 + 16 * (v82.i32[0] + v82.i32[1] * (int)v60));
          }
          v84 = vsubq_f32(v42, v55);
          v85 = vsubq_f32(v42, v56);
          v86 = vsubq_f32(v42, v57);
          v87 = vsubq_f32(v55, v32);
          v88 = vsubq_f32(v56, v32);
          v89 = vsubq_f32(v57, v32);
          v90 = (float32x4_t)vbslq_s8(v52, (int8x16_t)vmaxq_f32(v84, (float32x4_t)vrev64q_s32((int32x4_t)v84)), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v87), v87));
          v91 = (float32x4_t)vbslq_s8(v52, (int8x16_t)vmaxq_f32(v85, (float32x4_t)vrev64q_s32((int32x4_t)v85)), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v88), v88));
          v92 = (float32x4_t)vbslq_s8(v52, (int8x16_t)vmaxq_f32(v86, (float32x4_t)vrev64q_s32((int32x4_t)v86)), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v89), v89));
          v93 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v90, (float32x4_t)vrev64q_s32((int32x4_t)v90)), 0);
          v94 = *(int8x16_t *)(v20 + 112);
          v95 = (int8x16_t *)(v11 + 16 * v15);
          *v95 = vbslq_s8((int8x16_t)vcgtq_f32(v93, (float32x4_t)v94), v94, v67);
          v95[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v91, (float32x4_t)vrev64q_s32((int32x4_t)v91)), 0), (float32x4_t)v94), v94, v72);
          v95[2] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v92, (float32x4_t)vrev64q_s32((int32x4_t)v92)), 0), (float32x4_t)v94), v94, v77);
          v17 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v15 += 3;
          v16 -= 3;
        }
        while (v16 > 2);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        do
        {
          v96 = *((_QWORD *)this + 51);
          v97 = *(int8x16_t *)(v96 + 16);
          v98 = vsubq_f32(v17, *(float32x4_t *)v96);
          v99 = vmulq_f32(v98, (float32x4_t)v97);
          v100 = vcvtq_f32_s32(vcvtq_s32_f32(v99));
          v101 = (int8x16_t)vcgtq_f32(v100, v99);
          v102 = *(float32x4_t *)(v96 + 64);
          v103 = vmulq_f32((float32x4_t)vextq_s8(v97, v97, 8uLL), vsubq_f32(v100, (float32x4_t)vandq_s8(*(int8x16_t *)(v96 + 80), v101)));
          v105 = *(int8x16_t *)(v96 + 32);
          v104 = *(float32x4_t *)(v96 + 48);
          v106 = vmulq_f32((float32x4_t)v105, v103);
          v107 = vsubq_f32(v98, v103);
          v108 = vmulq_f32((float32x4_t)vextq_s8(v105, v105, 8uLL), v103);
          v109 = (int8x16_t)vaddq_f32(v108, (float32x4_t)vrev64q_s32((int32x4_t)v108));
          v110 = *(int8x16_t *)(v96 + 96);
          v111 = vaddq_f32(*(float32x4_t *)v96, vaddq_f32(v107, (float32x4_t)vbslq_s8(v110, (int8x16_t)vaddq_f32(v106, (float32x4_t)vrev64q_s32((int32x4_t)v106)), v109)));
          v112 = *((int *)a2 + 22);
          v113 = vsubq_f32(vminq_f32(vmaxq_f32(v111, v104), v102), v9);
          v114 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v115 = vaddq_s32(vcvtq_s32_f32(v113), vcltzq_f32(v113));
            v116 = (float32x2_t)vsubq_f32(v113, vcvtq_f32_s32(v115)).u64[0];
            v117 = (float32x4_t *)(v114 + 16 * (v115.i32[0] + v115.i32[1] * (int)v112));
            v118 = vaddq_f32(*v117, vmulq_n_f32(vsubq_f32(v117[1], *v117), v116.f32[0]));
            v119 = (int8x16_t)vaddq_f32(v118, vmulq_lane_f32(vsubq_f32(vaddq_f32(v117[v112], vmulq_n_f32(vsubq_f32(v117[(int)v112 + 1], v117[v112]), v116.f32[0])), v118), v116, 1));
          }
          else
          {
            v120 = vaddq_f32(v113, v13);
            v121 = vcvtq_s32_f32(v120);
            v120.i64[0] = vaddq_s32(v121, vcgtq_f32(vcvtq_f32_s32(v121), v120)).u64[0];
            v119 = *(int8x16_t *)(v114 + 16 * (v120.i32[0] + v120.i32[1] * (int)v112));
          }
          v122 = vsubq_f32(v104, v111);
          v123 = vsubq_f32(v111, v102);
          v124 = (float32x4_t)vbslq_s8(v110, (int8x16_t)vmaxq_f32(v122, (float32x4_t)vrev64q_s32((int32x4_t)v122)), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v123), v123));
          *(int8x16_t *)(v11 + 16 * v15) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v124, (float32x4_t)vrev64q_s32((int32x4_t)v124)), 0), *(float32x4_t *)(v96 + 112)), *(int8x16_t *)(v96 + 112), v119);
          v17 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          ++v15;
        }
        while (v15 < v10);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v11 += v12;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcGlassBlock::GetDOD(HgcGlassBlock *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcGlassBlock *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcGlassBlock::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcGlassBlock::HgcGlassBlock(HgcGlassBlock *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EF560;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = xmmword_1B30520F0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3050E20;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcGlassBlock *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28A86C4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGlassBlock::~HgcGlassBlock(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EF560;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AE2C30F4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGlassBlock::~HgcGlassBlock(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGlassBlock::SetParameter(HgcGlassBlock *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcGlassBlock::GetParameter(HgcGlassBlock *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcInsectEyeBorder::GetProgram(HgcInsectEyeBorder *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000b45\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.732100010, -2.000000000, 0.3333329856, 0.6766660213);\n"
             "    const half4 c1 = half4(3.000000000, 0.5000000000, 0.9990000129, 1.000000000);\n"
             "    const half4 c2 = half4(0.000000000, -0.8659999967, 0.2500000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2, s3, s4, s5, s6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord1.xy + hg_Params[5].xy;\n"
             "    s1 = s0.xxxx*hg_Params[3].xxxx + hg_Params[3].zzzz;\n"
             "    s0 = s0.yyyy*hg_Params[3].yyyy + hg_Params[3].wwww;\n"
             "    s1.yw = s1.yw + hg_Params[4].xx;\n"
             "    s0.zw = s0.zw + hg_Params[4].yy;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s2 = s0 + s0;\n"
             "    s3 = fract(s2);\n"
             "    s2 = s2 - s3;\n"
             "    s3 = s1*float4(c0.xxxx) + -s0;\n"
             "    s4 = fract(s3);\n"
             "    s3 = s3 - s4;\n"
             "    s4 = s1*float4(c0.xxxx) + s0;\n"
             "    s5 = fract(s4);\n"
             "    s4 = s4 - s5;\n"
             "    s5 = s2*float4(c0.yyyy) + s4;\n"
             "    s5 = s5*float4(c0.zzzz) + float4(c0.wwww);\n"
             "    s5 = fract(s5);\n"
             "    s5 = s5*float4(c1.xxxx) + float4(c1.yyyy);\n"
             "    s6 = fract(s5);\n"
             "    s5 = s5 - s6;\n"
             "    s3 = s2 + s3;\n"
             "    s3 = s3 - s4;\n"
             "    s3 = s3 + s5;\n"
             "    s3 = s3 - float4(c1.zzzz);\n"
             "    s4 = s2*float4(c0.yyyy) + s4;\n"
             "    s4 = s4 - s5;\n"
             "    s4 = s4*float4(c0.zzzz);\n"
             "    s6 = fract(s4);\n"
             "    s4 = s4 - s6;\n"
             "    s5 = select(-float4(c0.yyyy), float4(c1.wwww), s3 < 0.00000h);\n"
             "    s4 = -float4(c0.yyyy)*s4 + s5;\n"
             "    s4 = s4 + s2;\n"
             "    s6 = select(-float4(c1.yyyy), float4(c1.wwww), s3 < 0.00000h);\n"
             "    s2 = s2*float4(c1.yyyy) + s6;\n"
             "    s5 = fract(s2);\n"
             "    s2 = s2 - s5;\n"
             "    s3 = float4(s3 >= float4(c2.xxxx));\n"
             "    s2 = s2 + s3;\n"
             "    s6 = s4*float4(c1.yyyy);\n"
             "    s6 = fract(s6);\n"
             "    s2 = s2 - s6;\n"
             "    s4 = s4*float4(c2.yyyy) + s1;\n"
             "    s2 = s0 - s2;\n"
             "    s5 = s2 + s2;\n"
             "    s3 = s4*float4(c0.xxxx) + -s2;\n"
             "    s4 = s4*float4(c0.xxxx) + s2;\n"
             "    s6 = clamp(s5*hg_Params[1].xxxx + hg_Params[1].yyyy, 0.00000f, 1.00000f);\n"
             "    s5 = clamp(s5*hg_Params[2].xxxx + hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
             "    s6 = fmax(s6, s5);\n"
             "    s1 = clamp(s3*hg_Params[1].xxxx + hg_Params[1].yyyy, 0.00000f, 1.00000f);\n"
             "    s6 = fmax(s6, s1);\n"
             "    s3 = clamp(s3*hg_Params[2].xxxx + hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
             "    s6 = fmax(s6, s3);\n"
             "    s0 = clamp(s4*hg_Params[1].xxxx + hg_Params[1].yyyy, 0.00000f, 1.00000f);\n"
             "    s6 = fmax(s6, s0);\n"
             "    s4 = clamp(s4*hg_Params[2].xxxx + hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
             "    s6 = fmax(s6, s4);\n"
             "    s6.x = dot(s6, float4(c2.zzzz));\n"
             "    s6 = hg_Params[0]*s6.xxxx;\n"
             "    s2.x = float(c1.w) - s6.w;\n"
             "    output.color0 = float4(r0)*s2.xxxx + s6;\n"
             "    return output;\n"
             "}\n"
             "//MD5=fcecd767:012dd04a:c4688ab3:897931b5\n"
             "//SIG=00400000:00000001:00000001:00000001:0003:0006:0008:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000a7b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.732100010, -2.000000000, 0.3333329856, 0.6766660213);\n"
             "    const float4 c1 = float4(3.000000000, 0.5000000000, 0.9990000129, 1.000000000);\n"
             "    const float4 c2 = float4(0.000000000, -0.8659999967, 0.2500000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord1.xy + hg_Params[5].xy;\n"
             "    r1 = r0.xxxx*hg_Params[3].xxxx + hg_Params[3].zzzz;\n"
             "    r0 = r0.yyyy*hg_Params[3].yyyy + hg_Params[3].wwww;\n"
             "    r1.yw = r1.yw + hg_Params[4].xx;\n"
             "    r0.zw = r0.zw + hg_Params[4].yy;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3 = r0 + r0;\n"
             "    r4 = fract(r3);\n"
             "    r3 = r3 - r4;\n"
             "    r4 = r1*c0.xxxx + -r0;\n"
             "    r5 = fract(r4);\n"
             "    r4 = r4 - r5;\n"
             "    r5 = r1*c0.xxxx + r0;\n"
             "    r6 = fract(r5);\n"
             "    r5 = r5 - r6;\n"
             "    r6 = r3*c0.yyyy + r5;\n"
             "    r6 = r6*c0.zzzz + c0.wwww;\n"
             "    r6 = fract(r6);\n"
             "    r6 = r6*c1.xxxx + c1.yyyy;\n"
             "    r7 = fract(r6);\n"
             "    r6 = r6 - r7;\n"
             "    r4 = r3 + r4;\n"
             "    r4 = r4 - r5;\n"
             "    r4 = r4 + r6;\n"
             "    r4 = r4 - c1.zzzz;\n"
             "    r5 = r3*c0.yyyy + r5;\n"
             "    r5 = r5 - r6;\n"
             "    r5 = r5*c0.zzzz;\n"
             "    r7 = fract(r5);\n"
             "    r5 = r5 - r7;\n"
             "    r6 = select(-c0.yyyy, c1.wwww, r4 < 0.00000f);\n"
             "    r5 = -c0.yyyy*r5 + r6;\n"
             "    r5 = r5 + r3;\n"
             "    r7 = select(-c1.yyyy, c1.wwww, r4 < 0.00000f);\n"
             "    r3 = r3*c1.yyyy + r7;\n"
             "    r6 = fract(r3);\n"
             "    r3 = r3 - r6;\n"
             "    r4 = float4(r4 >= c2.xxxx);\n"
             "    r3 = r3 + r4;\n"
             "    r7 = r5*c1.yyyy;\n"
             "    r7 = fract(r7);\n"
             "    r3 = r3 - r7;\n"
             "    r5 = r5*c2.yyyy + r1;\n"
             "    r3 = r0 - r3;\n"
             "    r6 = r3 + r3;\n"
             "    r4 = r5*c0.xxxx + -r3;\n"
             "    r5 = r5*c0.xxxx + r3;\n"
             "    r7 = clamp(r6*hg_Params[1].xxxx + hg_Params[1].yyyy, 0.00000f, 1.00000f);\n"
             "    r6 = clamp(r6*hg_Params[2].xxxx + hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
             "    r7 = fmax(r7, r6);\n"
             "    r1 = clamp(r4*hg_Params[1].xxxx + hg_Params[1].yyyy, 0.00000f, 1.00000f);\n"
             "    r7 = fmax(r7, r1);\n"
             "    r4 = clamp(r4*hg_Params[2].xxxx + hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
             "    r7 = fmax(r7, r4);\n"
             "    r0 = clamp(r5*hg_Params[1].xxxx + hg_Params[1].yyyy, 0.00000f, 1.00000f);\n"
             "    r7 = fmax(r7, r0);\n"
             "    r5 = clamp(r5*hg_Params[2].xxxx + hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
             "    r7 = fmax(r7, r5);\n"
             "    r7.x = dot(r7, c2.zzzz);\n"
             "    r7 = hg_Params[0]*r7.xxxx;\n"
             "    r3.x = c1.w - r7.w;\n"
             "    output.color0 = r2*r3.xxxx + r7;\n"
             "    return output;\n"
             "}\n"
             "//MD5=29772597:07d3da4a:620c352b:a8ee10ef\n"
             "//SIG=00000000:00000001:00000001:00000000:0003:0006:0008:0000:0000:0000:0006:0000:0002:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000c61\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.732100010, -2.000000000, 0.3333329856, 0.6766660213);\n"
           "    const highp vec4 c1 = vec4(3.000000000, 0.5000000000, 0.9990000129, 1.000000000);\n"
           "    const highp vec4 c2 = vec4(0.000000000, -0.8659999967, 0.2500000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
           "\n"
           "    r0.xy = hg_TexCoord1.xy + hg_ProgramLocal5.xy;\n"
           "    r1 = r0.xxxx*hg_ProgramLocal3.xxxx + hg_ProgramLocal3.zzzz;\n"
           "    r0 = r0.yyyy*hg_ProgramLocal3.yyyy + hg_ProgramLocal3.wwww;\n"
           "    r1.yw = r1.yw + hg_ProgramLocal4.xx;\n"
           "    r0.zw = r0.zw + hg_ProgramLocal4.yy;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r3 = r0 + r0;\n"
           "    r4 = fract(r3);\n"
           "    r3 = r3 - r4;\n"
           "    r4 = r1*c0.xxxx + -r0;\n"
           "    r5 = fract(r4);\n"
           "    r4 = r4 - r5;\n"
           "    r5 = r1*c0.xxxx + r0;\n"
           "    r6 = fract(r5);\n"
           "    r5 = r5 - r6;\n"
           "    r6 = r3*c0.yyyy + r5;\n"
           "    r6 = r6*c0.zzzz + c0.wwww;\n"
           "    r6 = fract(r6);\n"
           "    r6 = r6*c1.xxxx + c1.yyyy;\n"
           "    r7 = fract(r6);\n"
           "    r6 = r6 - r7;\n"
           "    r4 = r3 + r4;\n"
           "    r4 = r4 - r5;\n"
           "    r4 = r4 + r6;\n"
           "    r4 = r4 - c1.zzzz;\n"
           "    r5 = r3*c0.yyyy + r5;\n"
           "    r5 = r5 - r6;\n"
           "    r5 = r5*c0.zzzz;\n"
           "    r7 = fract(r5);\n"
           "    r5 = r5 - r7;\n"
           "    r6 = vec4(r4.x < 0.00000 ? c1.w : -c0.y, r4.y < 0.00000 ? c1.w : -c0.y, r4.z < 0.00000 ? c1.w : -c0.y, r4"
           ".w < 0.00000 ? c1.w : -c0.y);\n"
           "    r5 = -c0.yyyy*r5 + r6;\n"
           "    r5 = r5 + r3;\n"
           "    r7 = vec4(r4.x < 0.00000 ? c1.w : -c1.y, r4.y < 0.00000 ? c1.w : -c1.y, r4.z < 0.00000 ? c1.w : -c1.y, r4"
           ".w < 0.00000 ? c1.w : -c1.y);\n"
           "    r3 = r3*c1.yyyy + r7;\n"
           "    r6 = fract(r3);\n"
           "    r3 = r3 - r6;\n"
           "    r4 = vec4(greaterThanEqual(r4, c2.xxxx));\n"
           "    r3 = r3 + r4;\n"
           "    r7 = r5*c1.yyyy;\n"
           "    r7 = fract(r7);\n"
           "    r3 = r3 - r7;\n"
           "    r5 = r5*c2.yyyy + r1;\n"
           "    r3 = r0 - r3;\n"
           "    r6 = r3 + r3;\n"
           "    r4 = r5*c0.xxxx + -r3;\n"
           "    r5 = r5*c0.xxxx + r3;\n"
           "    r7 = clamp(r6*hg_ProgramLocal1.xxxx + hg_ProgramLocal1.yyyy, vec4(0.00000), vec4(1.00000));\n"
           "    r6 = clamp(r6*hg_ProgramLocal2.xxxx + hg_ProgramLocal2.yyyy, vec4(0.00000), vec4(1.00000));\n"
           "    r7 = max(r7, r6);\n"
           "    r1 = clamp(r4*hg_ProgramLocal1.xxxx + hg_ProgramLocal1.yyyy, vec4(0.00000), vec4(1.00000));\n"
           "    r7 = max(r7, r1);\n"
           "    r4 = clamp(r4*hg_ProgramLocal2.xxxx + hg_ProgramLocal2.yyyy, vec4(0.00000), vec4(1.00000));\n"
           "    r7 = max(r7, r4);\n"
           "    r0 = clamp(r5*hg_ProgramLocal1.xxxx + hg_ProgramLocal1.yyyy, vec4(0.00000), vec4(1.00000));\n"
           "    r7 = max(r7, r0);\n"
           "    r5 = clamp(r5*hg_ProgramLocal2.xxxx + hg_ProgramLocal2.yyyy, vec4(0.00000), vec4(1.00000));\n"
           "    r7 = max(r7, r5);\n"
           "    r7.x = dot(r7, c2.zzzz);\n"
           "    r7 = hg_ProgramLocal0*r7.xxxx;\n"
           "    r3.x = c1.w - r7.w;\n"
           "    gl_FragColor = r2*r3.xxxx + r7;\n"
           "}\n"
           "//MD5=66565287:e80d4994:c5c5fcd7:9edc3cac\n"
           "//SIG=00000000:00000001:00000001:00000000:0003:0006:0008:0000:0000:0000:0000:0000:0002:01:0:1:0\n";
  }
}

void HgcInsectEyeBorder::InitProgramDescriptor(HgcInsectEyeBorder *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcInsectEyeBorder_hgc_visible", "//Metal1.0     \n//LEN=0000000967\n[[ visible ]] FragmentOut HgcInsectEyeBorder_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(1.732100010, -2.000000000, 0.3333329856, 0.6766660213);\n"
    "    const float4 c1 = float4(3.000000000, 0.5000000000, 0.9990000129, 1.000000000);\n"
    "    const float4 c2 = float4(0.000000000, -0.8659999967, 0.2500000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5, r6, r7;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord1.xy + hg_Params[5].xy;\n"
    "    r1 = r0.xxxx*hg_Params[3].xxxx + hg_Params[3].zzzz;\n"
    "    r0 = r0.yyyy*hg_Params[3].yyyy + hg_Params[3].wwww;\n"
    "    r1.yw = r1.yw + hg_Params[4].xx;\n"
    "    r0.zw = r0.zw + hg_Params[4].yy;\n"
    "    r2 = color0;\n"
    "    r3 = r0 + r0;\n"
    "    r4 = fract(r3);\n"
    "    r3 = r3 - r4;\n"
    "    r4 = r1*c0.xxxx + -r0;\n"
    "    r5 = fract(r4);\n"
    "    r4 = r4 - r5;\n"
    "    r5 = r1*c0.xxxx + r0;\n"
    "    r6 = fract(r5);\n"
    "    r5 = r5 - r6;\n"
    "    r6 = r3*c0.yyyy + r5;\n"
    "    r6 = r6*c0.zzzz + c0.wwww;\n"
    "    r6 = fract(r6);\n"
    "    r6 = r6*c1.xxxx + c1.yyyy;\n"
    "    r7 = fract(r6);\n"
    "    r6 = r6 - r7;\n"
    "    r4 = r3 + r4;\n"
    "    r4 = r4 - r5;\n"
    "    r4 = r4 + r6;\n"
    "    r4 = r4 - c1.zzzz;\n"
    "    r5 = r3*c0.yyyy + r5;\n"
    "    r5 = r5 - r6;\n"
    "    r5 = r5*c0.zzzz;\n"
    "    r7 = fract(r5);\n"
    "    r5 = r5 - r7;\n"
    "    r6 = select(-c0.yyyy, c1.wwww, r4 < 0.00000f);\n"
    "    r5 = -c0.yyyy*r5 + r6;\n"
    "    r5 = r5 + r3;\n"
    "    r7 = select(-c1.yyyy, c1.wwww, r4 < 0.00000f);\n"
    "    r3 = r3*c1.yyyy + r7;\n"
    "    r6 = fract(r3);\n"
    "    r3 = r3 - r6;\n"
    "    r4 = float4(r4 >= c2.xxxx);\n"
    "    r3 = r3 + r4;\n"
    "    r7 = r5*c1.yyyy;\n"
    "    r7 = fract(r7);\n"
    "    r3 = r3 - r7;\n"
    "    r5 = r5*c2.yyyy + r1;\n"
    "    r3 = r0 - r3;\n"
    "    r6 = r3 + r3;\n"
    "    r4 = r5*c0.xxxx + -r3;\n"
    "    r5 = r5*c0.xxxx + r3;\n"
    "    r7 = clamp(r6*hg_Params[1].xxxx + hg_Params[1].yyyy, 0.00000f, 1.00000f);\n"
    "    r6 = clamp(r6*hg_Params[2].xxxx + hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
    "    r7 = fmax(r7, r6);\n"
    "    r1 = clamp(r4*hg_Params[1].xxxx + hg_Params[1].yyyy, 0.00000f, 1.00000f);\n"
    "    r7 = fmax(r7, r1);\n"
    "    r4 = clamp(r4*hg_Params[2].xxxx + hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
    "    r7 = fmax(r7, r4);\n"
    "    r0 = clamp(r5*hg_Params[1].xxxx + hg_Params[1].yyyy, 0.00000f, 1.00000f);\n"
    "    r7 = fmax(r7, r0);\n"
    "    r5 = clamp(r5*hg_Params[2].xxxx + hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
    "    r7 = fmax(r7, r5);\n"
    "    r7.x = dot(r7, c2.zzzz);\n"
    "    r7 = hg_Params[0]*r7.xxxx;\n"
    "    r3.x = c1.w - r7.w;\n"
    "    output.color0 = r2*r3.xxxx + r7;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A88CC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcInsectEyeBorder");
}

void sub_1B28A88DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052790;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A8A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A8A64()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A8A5CLL);
}

_QWORD *HgcInsectEyeBorder::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcInsectEyeBorder [hgc1]");
}

uint64_t HgcInsectEyeBorder::BindTexture(HgcInsectEyeBorder *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcInsectEyeBorder::Bind(HgcInsectEyeBorder *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcInsectEyeBorder *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcInsectEyeBorder::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  int32x2_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  __int128 v14;
  float32x4_t v15;
  int8x16_t v16;
  int32x2_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  __int128 v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    v6 = a2[10];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v8 = 16 * a2[3].i32[0];
    v9 = 16 * a2[11].i32[0];
    do
    {
      if (v4 >= 1)
      {
        v10 = 0;
        v11 = v7;
        do
        {
          v12 = *(_QWORD *)(a1 + 408);
          v14 = *(_OWORD *)(v12 + 32);
          v13 = *(float32x4_t *)(v12 + 48);
          v15 = *(float32x4_t *)(v12 + 64);
          *(float32x2_t *)v13.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), vmul_f32(*(float32x2_t *)v13.f32, vadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)(v12 + 80))));
          v16 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
          v17 = (int32x2_t)vaddq_f32(v15, v13).u64[0];
          *(int32x2_t *)v18.f32 = vdup_lane_s32(*(int32x2_t *)v13.f32, 1);
          *(int32x2_t *)&v18.u32[2] = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v13.f32), 1);
          v19 = *(float32x4_t *)(v12 + 112);
          v20 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v12 + 96), v16, (int8x16_t)vdupq_lane_s32(v17, 0));
          v21 = vaddq_f32(v18, v18);
          v22 = vcvtq_f32_s32(vcvtq_s32_f32(v21));
          v23 = *(float32x4_t *)(v12 + 128);
          v24 = *(float32x4_t *)(v12 + 144);
          v25 = vmulq_f32(v23, v20);
          v26 = vsubq_f32(v25, v18);
          v27 = vcvtq_f32_s32(vcvtq_s32_f32(v26));
          v28 = vaddq_f32(v18, v25);
          v29 = vcvtq_f32_s32(vcvtq_s32_f32(v28));
          v30 = vsubq_f32(v21, vsubq_f32(v21, vsubq_f32(v22, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v22, v21)))));
          v31 = vsubq_f32(v28, vsubq_f32(v28, vsubq_f32(v29, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v29, v28)))));
          v32 = vsubq_f32(v31, vmulq_f32(v24, v30));
          v33 = *(float32x4_t *)(v12 + 176);
          v34 = vaddq_f32(*(float32x4_t *)(v12 + 160), vmulq_f32(v33, v32));
          v35 = vcvtq_f32_s32(vcvtq_s32_f32(v34));
          v36 = vsubq_f32(v27, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v27, v26)));
          v37 = vsubq_f32(v34, vsubq_f32(v35, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v35, v34))));
          v38 = *(float32x4_t *)(v12 + 192);
          v39 = vaddq_f32(v38, vmulq_f32(*(float32x4_t *)(v12 + 208), v37));
          v40 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
          v41 = vsubq_f32(v26, vsubq_f32(v26, v36));
          v42 = vsubq_f32(v39, vsubq_f32(v39, vsubq_f32(v40, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v40, v39)))));
          v43 = vaddq_f32(vsubq_f32(vaddq_f32(v30, v41), v31), v42);
          v44 = vmulq_f32(v33, vsubq_f32(v32, v42));
          v45 = *(float32x4_t *)(v12 + 240);
          v46 = vsubq_f32(v43, *(float32x4_t *)(v12 + 224));
          v47 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
          v48 = vsubq_f32(v44, vsubq_f32(v44, vsubq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v47, v44)))));
          v49 = (int8x16_t)vcgtq_f32(v45, v46);
          v50 = vaddq_f32((float32x4_t)vbslq_s8(v49, (int8x16_t)v19, (int8x16_t)v24), vmulq_f32(v24, v48));
          v51 = vaddq_f32(vmulq_f32(v30, v38), (float32x4_t)vbslq_s8(v49, (int8x16_t)v19, *(int8x16_t *)(v12 + 256)));
          v52 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
          v53 = vaddq_f32(v30, v50);
          v54 = vsubq_f32(v51, vsubq_f32(v51, vsubq_f32(v52, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v52, v51)))));
          v55 = vmulq_f32(v38, v53);
          v56 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
          v57 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v12 + 272), v53), v20);
          v58 = vsubq_f32(v18, vsubq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgeq_f32(v46, v45)), v54), vsubq_f32(v55, vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v19, (int8x16_t)vcgtq_f32(v56, v55))))));
          v59 = vaddq_f32(v58, v58);
          v60 = vmulq_f32(v23, v57);
          v61 = vsubq_f32(v60, v58);
          v62 = vaddq_f32(v60, v58);
          v63 = *(_OWORD *)(v12 + 16);
          v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v63, 1);
          v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v14, 1);
          v66 = vmulq_f32(vmaxq_f32(vmaxq_f32(vmaxq_f32(vmaxq_f32(vmaxq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v64, vmulq_n_f32(v59, *(float *)&v63)), v45), v19), vminq_f32(vmaxq_f32(vaddq_f32(v65, vmulq_n_f32(v59, *(float *)&v14)), v45), v19)), vminq_f32(vmaxq_f32(vaddq_f32(v64, vmulq_n_f32(v61, *(float *)&v63)), v45), v19)), vminq_f32(vmaxq_f32(vaddq_f32(v65, vmulq_n_f32(v61, *(float *)&v14)), v45), v19)), vminq_f32(vmaxq_f32(vaddq_f32(v64, vmulq_n_f32(v62, *(float *)&v63)), v45), v19)), vminq_f32(vmaxq_f32(vaddq_f32(v65, vmulq_n_f32(v62, *(float *)&v14)), v45), v19)), *(float32x4_t *)(v12 + 288));
          v67 = vaddq_f32(v66, (float32x4_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 4uLL));
          v68 = vmulq_n_f32(*(float32x4_t *)v12, vaddq_f32(v67, (float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2)).f32[0]);
          *(float32x4_t *)(*(_QWORD *)&v5 + v10) = vaddq_f32(v68, vmulq_n_f32(*(float32x4_t *)(*(_QWORD *)&v6 + v10), vsubq_f32(v19, (float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 3)).f32[0]));
          v11 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F230);
          v10 += 16;
        }
        while (16 * v4 != v10);
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v8;
      *(_QWORD *)&v6 += v9;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcInsectEyeBorder::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcInsectEyeBorder::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcInsectEyeBorder::HgcInsectEyeBorder(HgcInsectEyeBorder *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EF7C8;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)&v4 = 0xFFFFFFFFLL;
  *((_QWORD *)&v4 + 1) = 0xFFFFFFFFLL;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 112) = _Q1;
  *(_QWORD *)&_Q1 = 0x4000000040000000;
  *((_QWORD *)&_Q1 + 1) = 0x4000000040000000;
  *(int32x4_t *)(v3 + 128) = vdupq_n_s32(0x3FDDB574u);
  *(_OWORD *)(v3 + 144) = _Q1;
  *(int32x4_t *)(v3 + 160) = vdupq_n_s32(0x3F2D39FCu);
  *(int32x4_t *)(v3 + 176) = vdupq_n_s32(0x3EAAAA9Fu);
  *(_QWORD *)&v4 = 0x3F0000003F000000;
  *((_QWORD *)&v4 + 1) = 0x3F0000003F000000;
  __asm { FMOV            V1.4S, #3.0 }
  *(_OWORD *)(v3 + 192) = v4;
  *(_OWORD *)(v3 + 208) = _Q1;
  *(int32x4_t *)(v3 + 224) = vdupq_n_s32(0x3F7FBE77u);
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)&v4 = 0xBF000000BF000000;
  *((_QWORD *)&v4 + 1) = 0xBF000000BF000000;
  *(_OWORD *)(v3 + 256) = v4;
  *(int32x4_t *)(v3 + 272) = vdupq_n_s32(0xBF5DB22D);
  __asm { FMOV            V0.4S, #0.25 }
  *(_OWORD *)(v3 + 288) = _Q0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28A9074(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcInsectEyeBorder::~HgcInsectEyeBorder(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EF7C8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FDACBBE0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcInsectEyeBorder::~HgcInsectEyeBorder(this);
  HGObject::operator delete(v1);
}

uint64_t HgcInsectEyeBorder::SetParameter(HgcInsectEyeBorder *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcInsectEyeBorder::GetParameter(HgcInsectEyeBorder *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcMirror::GetProgram(HgcMirror *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000369\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    s1.x = dot(s0.xyz, hg_Params[1].xyx);\n"
             "    s1.y = dot(s0.xyz, hg_Params[1].zwz);\n"
             "    s1.x = abs(s1.x);\n"
             "    s0.x = dot(s1.xy, hg_Params[2].xy);\n"
             "    s0.y = dot(s1.xy, hg_Params[2].zw);\n"
             "    s0.xy = s0.xy + hg_Params[0].xy;\n"
             "    s0.xy = s0.xy + hg_Params[3].xy;\n"
             "    s0.xy = s0.xy*hg_Params[3].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=51d2cbf8:cd7ed173:8143842d:05654dc4\n"
             "//SIG=00400000:00000000:00000000:00000001:0000:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000361\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    r1.x = dot(r0.xyz, hg_Params[1].xyx);\n"
             "    r1.y = dot(r0.xyz, hg_Params[1].zwz);\n"
             "    r1.x = abs(r1.x);\n"
             "    r0.x = dot(r1.xy, hg_Params[2].xy);\n"
             "    r0.y = dot(r1.xy, hg_Params[2].zw);\n"
             "    r0.xy = r0.xy + hg_Params[0].xy;\n"
             "    r0.xy = r0.xy + hg_Params[3].xy;\n"
             "    r0.xy = r0.xy*hg_Params[3].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c4438bd7:7a0ef036:b3cf2aa5:3af6f19d\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003b4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xyz = hg_TexCoord0.xyz - hg_ProgramLocal0.xyz;\n"
           "    r1.x = dot(r0.xyz, hg_ProgramLocal1.xyx);\n"
           "    r1.y = dot(r0.xyz, hg_ProgramLocal1.zwz);\n"
           "    r1.x = abs(r1.x);\n"
           "    r0.x = dot(r1.xy, hg_ProgramLocal2.xy);\n"
           "    r0.y = dot(r1.xy, hg_ProgramLocal2.zw);\n"
           "    r0.xy = r0.xy + hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal3.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal3.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=d8b98ed2:1ec59725:5b8b1d55:d7142854\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0004:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcMirror::InitProgramDescriptor(HgcMirror *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcMirror_hgc_visible", "//Metal1.0     \n//LEN=000000029d\n[[ visible ]] FragmentOut HgcMirror_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = texCoord0.xyz - hg_Params[0].xyz;\n"
    "    r1.x = dot(r0.xyz, hg_Params[1].xyx);\n"
    "    r1.y = dot(r0.xyz, hg_Params[1].zwz);\n"
    "    r1.x = abs(r1.x);\n"
    "    r0.x = dot(r1.xy, hg_Params[2].xy);\n"
    "    r0.y = dot(r1.xy, hg_Params[2].zw);\n"
    "    r0.xy = r0.xy + hg_Params[0].xy;\n"
    "    r0.xy = r0.xy + hg_Params[3].xy;\n"
    "    r0.xy = r0.xy*hg_Params[3].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A9280()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcMirror");
}

void sub_1B28A9290(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28A9410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28A9460()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28A9458);
}

_QWORD *HgcMirror::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcMirror [hgc1]");
}

uint64_t HgcMirror::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcMirror::Bind(HgcMirror *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcMirror *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcMirror::RenderTile(HgcMirror *this, float32x4_t **a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  int64x2_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  uint64_t v59;
  float32x4_t v60;
  float32x4_t *v61;
  int32x4_t v62;
  float32x2_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int32x4_t v68;
  float32x4_t *v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t *v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int32x4_t v83;
  float32x4_t v84;
  int32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  float32x4_t v88;
  int32x4_t v89;
  uint64_t v90;
  uint64_t v91;
  int64x2_t v92;
  float32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t *v104;
  int32x4_t v105;
  float32x2_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;

  v4 = HGTile::Renderer((HGTile *)a2);
  v5 = (*(uint64_t (**)(HgcMirror *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = (int32x2_t)*a2;
  v7 = *((_DWORD *)a2 + 3) - ((unint64_t)*a2 >> 32);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = a2[2];
    v12 = v11 + 2;
    v13 = 16 * *((int *)a2 + 6);
    v14.i64[0] = 0x3F0000003F000000;
    v14.i64[1] = 0x3F0000003F000000;
    v15 = v9;
    do
    {
      if (v10 < 4)
      {
        LODWORD(v90) = 0;
        v18 = v15;
      }
      else
      {
        v16 = 0;
        v17 = v12;
        v18 = v15;
        do
        {
          v19 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v20 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v21 = vaddq_f32(v20, (float32x4_t)xmmword_1B304F230);
          v22 = *((_QWORD *)this + 51);
          v23 = *(int64x2_t *)(v22 + 16);
          v24 = vsubq_f32(v18, *(float32x4_t *)v22);
          v25 = vsubq_f32(v19, *(float32x4_t *)v22);
          v26 = vsubq_f32(v20, *(float32x4_t *)v22);
          v27 = (float32x4_t)vdupq_lane_s64(v23.i64[0], 0);
          v28 = vsubq_f32(v21, *(float32x4_t *)v22);
          v29 = (int32x4_t)vmulq_f32(v24, v27);
          v30 = (int32x4_t)vmulq_f32(v25, v27);
          v31 = (int32x4_t)vmulq_f32(v26, v27);
          v32 = (int32x4_t)vmulq_f32(v28, v27);
          v33 = (float32x4_t)vdupq_laneq_s64(v23, 1);
          v34 = (int32x4_t)vmulq_f32(v24, v33);
          v35 = (int32x4_t)vmulq_f32(v25, v33);
          v36 = (int32x4_t)vmulq_f32(v26, v33);
          v37 = (int32x4_t)vmulq_f32(v28, v33);
          v39 = *(int8x16_t *)(v22 + 32);
          v38 = *(int8x16_t *)(v22 + 48);
          v40 = vbslq_s8(v38, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), vaddq_f32((float32x4_t)v32, (float32x4_t)vrev64q_s32(v32))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL), vaddq_f32((float32x4_t)v37, (float32x4_t)vrev64q_s32(v37))));
          v41 = *(int8x16_t *)(v22 + 64);
          v42 = (float32x4_t)vandq_s8(vbslq_s8(v38, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL), vaddq_f32((float32x4_t)v29, (float32x4_t)vrev64q_s32(v29))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL), vaddq_f32((float32x4_t)v34, (float32x4_t)vrev64q_s32(v34)))), v41);
          v43 = (float32x4_t)vandq_s8(vbslq_s8(v38, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL), vaddq_f32((float32x4_t)v30, (float32x4_t)vrev64q_s32(v30))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL), vaddq_f32((float32x4_t)v35, (float32x4_t)vrev64q_s32(v35)))), v41);
          v44 = (float32x4_t)vandq_s8(vbslq_s8(v38, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL), vaddq_f32((float32x4_t)v31, (float32x4_t)vrev64q_s32(v31))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 4uLL), vaddq_f32((float32x4_t)v36, (float32x4_t)vrev64q_s32(v36)))), v41);
          v45 = (float32x4_t)vandq_s8(v40, v41);
          v46 = vmulq_f32((float32x4_t)v39, v42);
          v47 = vmulq_f32((float32x4_t)v39, v43);
          v48 = vmulq_f32((float32x4_t)v39, v44);
          v49 = vmulq_f32((float32x4_t)v39, v45);
          v50 = (float32x4_t)vextq_s8(v39, v39, 8uLL);
          v51 = vmulq_f32(v50, v42);
          v52 = vmulq_f32(v50, v43);
          v53 = vmulq_f32(v50, v44);
          v54 = vmulq_f32(v50, v45);
          v55 = vaddq_f32(*(float32x4_t *)v22, (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v46, (float32x4_t)vrev64q_s32((int32x4_t)v46)), (int8x16_t)vaddq_f32(v51, (float32x4_t)vrev64q_s32((int32x4_t)v51))));
          v56 = vaddq_f32(*(float32x4_t *)v22, (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v47, (float32x4_t)vrev64q_s32((int32x4_t)v47)), (int8x16_t)vaddq_f32(v52, (float32x4_t)vrev64q_s32((int32x4_t)v52))));
          v57 = vaddq_f32(*(float32x4_t *)v22, (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v48, (float32x4_t)vrev64q_s32((int32x4_t)v48)), (int8x16_t)vaddq_f32(v53, (float32x4_t)vrev64q_s32((int32x4_t)v53))));
          v58 = vaddq_f32(*(float32x4_t *)v22, (float32x4_t)vbslq_s8(v38, (int8x16_t)vaddq_f32(v49, (float32x4_t)vrev64q_s32((int32x4_t)v49)), (int8x16_t)vaddq_f32(v54, (float32x4_t)vrev64q_s32((int32x4_t)v54))));
          v59 = *((int *)a2 + 22);
          v60 = vsubq_f32(v55, v9);
          v61 = a2[10];
          if (v5)
          {
            v62 = vaddq_s32(vcvtq_s32_f32(v60), vcltzq_f32(v60));
            v63 = (float32x2_t)vsubq_f32(v60, vcvtq_f32_s32(v62)).u64[0];
            v64 = &v61[v62.i32[0] + v62.i32[1] * (int)v59];
            v65 = vaddq_f32(*v64, vmulq_n_f32(vsubq_f32(v64[1], *v64), v63.f32[0]));
            v66 = vaddq_f32(v65, vmulq_lane_f32(vsubq_f32(vaddq_f32(v64[v59], vmulq_n_f32(vsubq_f32(v64[(int)v59 + 1], v64[v59]), v63.f32[0])), v65), v63, 1));
            v67 = vsubq_f32(v56, v9);
            v68 = vaddq_s32(vcvtq_s32_f32(v67), vcltzq_f32(v67));
            v67.i64[0] = vsubq_f32(v67, vcvtq_f32_s32(v68)).u64[0];
            v69 = &v61[v68.i32[0] + v68.i32[1] * (int)v59];
            v70 = vaddq_f32(*v69, vmulq_n_f32(vsubq_f32(v69[1], *v69), v67.f32[0]));
            v71 = vaddq_f32(v70, vmulq_lane_f32(vsubq_f32(vaddq_f32(v69[v59], vmulq_n_f32(vsubq_f32(v69[(int)v59 + 1], v69[v59]), v67.f32[0])), v70), *(float32x2_t *)v67.f32, 1));
            v72 = vsubq_f32(v57, v9);
            v73 = vaddq_s32(vcvtq_s32_f32(v72), vcltzq_f32(v72));
            v72.i64[0] = vsubq_f32(v72, vcvtq_f32_s32(v73)).u64[0];
            v74 = &v61[v73.i32[0] + v73.i32[1] * (int)v59];
            v75 = vaddq_f32(*v74, vmulq_n_f32(vsubq_f32(v74[1], *v74), v72.f32[0]));
            v76 = vaddq_f32(v75, vmulq_lane_f32(vsubq_f32(vaddq_f32(v74[v59], vmulq_n_f32(vsubq_f32(v74[(int)v59 + 1], v74[v59]), v72.f32[0])), v75), *(float32x2_t *)v72.f32, 1));
            v77 = vsubq_f32(v58, v9);
            v78 = vaddq_s32(vcvtq_s32_f32(v77), vcltzq_f32(v77));
            v77.i64[0] = vsubq_f32(v77, vcvtq_f32_s32(v78)).u64[0];
            v79 = &v61[v78.i32[0] + v78.i32[1] * (int)v59];
            v80 = vaddq_f32(*v79, vmulq_n_f32(vsubq_f32(v79[1], *v79), v77.f32[0]));
            v81 = vaddq_f32(v80, vmulq_lane_f32(vsubq_f32(vaddq_f32(v79[v59], vmulq_n_f32(vsubq_f32(v79[(int)v59 + 1], v79[v59]), v77.f32[0])), v80), *(float32x2_t *)v77.f32, 1));
          }
          else
          {
            v82 = vaddq_f32(v60, v14);
            v83 = vcvtq_s32_f32(v82);
            v82.i64[0] = vaddq_s32(v83, vcgtq_f32(vcvtq_f32_s32(v83), v82)).u64[0];
            v66 = v61[v82.i32[0] + v82.i32[1] * (int)v59];
            v84 = vaddq_f32(vsubq_f32(v56, v9), v14);
            v85 = vcvtq_s32_f32(v84);
            v84.i64[0] = vaddq_s32(v85, vcgtq_f32(vcvtq_f32_s32(v85), v84)).u64[0];
            v71 = v61[v84.i32[0] + v84.i32[1] * (int)v59];
            v86 = vaddq_f32(vsubq_f32(v57, v9), v14);
            v87 = vcvtq_s32_f32(v86);
            v86.i64[0] = vaddq_s32(v87, vcgtq_f32(vcvtq_f32_s32(v87), v86)).u64[0];
            v76 = v61[v86.i32[0] + v86.i32[1] * (int)v59];
            v88 = vaddq_f32(vsubq_f32(v58, v9), v14);
            v89 = vcvtq_s32_f32(v88);
            v88.i64[0] = vaddq_s32(v89, vcgtq_f32(vcvtq_f32_s32(v89), v88)).u64[0];
            v81 = v61[v88.i32[0] + v88.i32[1] * (int)v59];
          }
          v17[-2] = v66;
          v17[-1] = v71;
          *v17 = v76;
          v17[1] = v81;
          v17 += 4;
          v18 = vaddq_f32(v21, (float32x4_t)xmmword_1B304F230);
          v16 -= 4;
        }
        while (v10 + v16 > 3);
        LODWORD(v90) = -v16;
      }
      if ((int)v90 < v10)
      {
        v90 = v90;
        do
        {
          v91 = *((_QWORD *)this + 51);
          v92 = *(int64x2_t *)(v91 + 16);
          v93 = vsubq_f32(v18, *(float32x4_t *)v91);
          v94 = (int32x4_t)vmulq_f32(v93, (float32x4_t)vdupq_lane_s64(v92.i64[0], 0));
          v95 = (int32x4_t)vmulq_f32(v93, (float32x4_t)vdupq_laneq_s64(v92, 1));
          v97 = *(int8x16_t *)(v91 + 32);
          v96 = *(int8x16_t *)(v91 + 48);
          v98 = (float32x4_t)vandq_s8(vbslq_s8(v96, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL), vaddq_f32((float32x4_t)v94, (float32x4_t)vrev64q_s32(v94))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v95, (int8x16_t)v95, 4uLL), vaddq_f32((float32x4_t)v95, (float32x4_t)vrev64q_s32(v95)))), *(int8x16_t *)(v91 + 64));
          v99 = vmulq_f32((float32x4_t)v97, v98);
          v100 = vmulq_f32((float32x4_t)vextq_s8(v97, v97, 8uLL), v98);
          v101 = vaddq_f32(*(float32x4_t *)v91, (float32x4_t)vbslq_s8(v96, (int8x16_t)vaddq_f32(v99, (float32x4_t)vrev64q_s32((int32x4_t)v99)), (int8x16_t)vaddq_f32(v100, (float32x4_t)vrev64q_s32((int32x4_t)v100))));
          v102 = *((int *)a2 + 22);
          v103 = vsubq_f32(v101, v9);
          v104 = a2[10];
          if (v5)
          {
            v105 = vaddq_s32(vcvtq_s32_f32(v103), vcltzq_f32(v103));
            v106 = (float32x2_t)vsubq_f32(v103, vcvtq_f32_s32(v105)).u64[0];
            v107 = &v104[v105.i32[0] + v105.i32[1] * (int)v102];
            v108 = vaddq_f32(*v107, vmulq_n_f32(vsubq_f32(v107[1], *v107), v106.f32[0]));
            v109 = vaddq_f32(v108, vmulq_lane_f32(vsubq_f32(vaddq_f32(v107[v102], vmulq_n_f32(vsubq_f32(v107[(int)v102 + 1], v107[v102]), v106.f32[0])), v108), v106, 1));
          }
          else
          {
            v110 = vaddq_f32(v103, v14);
            v111 = vcvtq_s32_f32(v110);
            v110.i64[0] = vaddq_s32(v111, vcgtq_f32(vcvtq_f32_s32(v111), v110)).u64[0];
            v109 = v104[v110.i32[0] + v110.i32[1] * (int)v102];
          }
          v11[v90] = v109;
          v18 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          ++v90;
        }
        while (v90 < v10);
      }
      v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v12 = (float32x4_t *)((char *)v12 + v13);
      v11 = (float32x4_t *)((char *)v11 + v13);
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcMirror::GetDOD(HgcMirror *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcMirror *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcMirror::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcMirror::HgcMirror(HgcMirror *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EFA30;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = xmmword_1B3050E20;
  v3[4] = xmmword_1B3051470;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcMirror *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28A9D38(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcMirror::~HgcMirror(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EFA30;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C404247E4FDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcMirror::~HgcMirror(this);
  HGObject::operator delete(v1);
}

uint64_t HgcMirror::SetParameter(HgcMirror *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcMirror::GetParameter(HgcMirror *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcPoke::GetProgram(HgcPoke *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000062f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-9.999999747e-06, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 s0, s1, s2, s3, s4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy;\n"
             "    s0.w = float(c0.w);\n"
             "    s1.x = dot(s0.xyw, hg_Params[1].xyz);\n"
             "    s1.y = dot(s0.xyw, hg_Params[2].xyz);\n"
             "    s2.x = dot(s0.xyw, hg_Params[3].xyz);\n"
             "    s3.x = fmin(float(c0.x), s2.x);\n"
             "    s4.x = fmax(-float(c0.x), s2.x);\n"
             "    s4.x = select(s4.x, s3.x, s2.x < 0.00000h);\n"
             "    s0.xy = s1.xy/s4.xx;\n"
             "    s0.xy = s0.xy - hg_Params[0].xy;\n"
             "    s2.x = dot(s0.xy, s0.xy);\n"
             "    s2.x = sqrt(s2.x);\n"
             "    s2.x = fmax(s2.x, -float(c0.x));\n"
             "    s2.x = s2.x*hg_Params[0].z;\n"
             "    s2.xy = rsqrt(s2.xx);\n"
             "    s0.xy = s0.xy*s2.xy + hg_Params[0].xy;\n"
             "    s3.x = dot(s0.xyw, hg_Params[4].xyz);\n"
             "    s3.y = dot(s0.xyw, hg_Params[5].xyz);\n"
             "    s0.x = dot(s0.xyw, hg_Params[6].xyz);\n"
             "    s1.x = fmin(float(c0.x), s0.x);\n"
             "    s4.x = fmax(-float(c0.x), s0.x);\n"
             "    s0.x = select(s4.x, s1.x, s0.x < 0.00000h);\n"
             "    s3.xy = s3.xy/s0.xx;\n"
             "    s3.xy = mix(frag._texCoord0.xy, s3.xy, hg_Params[0].ww);\n"
             "    s3.xy = s3.xy + hg_Params[7].xy;\n"
             "    s3.xy = s3.xy*hg_Params[7].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s3.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=bd0830a9:aab142cf:99cf138c:15d22ec0\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0008:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000005ff\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-9.999999747e-06, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy;\n"
             "    r0.w = c0.w;\n"
             "    r1.x = dot(r0.xyw, hg_Params[1].xyz);\n"
             "    r1.y = dot(r0.xyw, hg_Params[2].xyz);\n"
             "    r2.x = dot(r0.xyw, hg_Params[3].xyz);\n"
             "    r3.x = fmin(c0.x, r2.x);\n"
             "    r4.x = fmax(-c0.x, r2.x);\n"
             "    r4.x = select(r4.x, r3.x, r2.x < 0.00000f);\n"
             "    r0.xy = r1.xy/r4.xx;\n"
             "    r0.xy = r0.xy - hg_Params[0].xy;\n"
             "    r2.x = dot(r0.xy, r0.xy);\n"
             "    r2.x = sqrt(r2.x);\n"
             "    r2.x = fmax(r2.x, -c0.x);\n"
             "    r2.x = r2.x*hg_Params[0].z;\n"
             "    r2.xy = rsqrt(r2.xx);\n"
             "    r0.xy = r0.xy*r2.xy + hg_Params[0].xy;\n"
             "    r3.x = dot(r0.xyw, hg_Params[4].xyz);\n"
             "    r3.y = dot(r0.xyw, hg_Params[5].xyz);\n"
             "    r0.x = dot(r0.xyw, hg_Params[6].xyz);\n"
             "    r1.x = fmin(c0.x, r0.x);\n"
             "    r4.x = fmax(-c0.x, r0.x);\n"
             "    r0.x = select(r4.x, r1.x, r0.x < 0.00000f);\n"
             "    r3.xy = r3.xy/r0.xx;\n"
             "    r3.xy = mix(frag._texCoord0.xy, r3.xy, hg_Params[0].ww);\n"
             "    r3.xy = r3.xy + hg_Params[7].xy;\n"
             "    r3.xy = r3.xy*hg_Params[7].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r3.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1b5ba5c5:aa920837:f8db8825:5254c488\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0008:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006e8\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-9.999999747e-06, 0.000000000, 0.000000000, 1.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy;\n"
           "    r0.w = c0.w;\n"
           "    r1.x = dot(r0.xyw, hg_ProgramLocal1.xyz);\n"
           "    r1.y = dot(r0.xyw, hg_ProgramLocal2.xyz);\n"
           "    r2.x = dot(r0.xyw, hg_ProgramLocal3.xyz);\n"
           "    r3.x = min(c0.x, r2.x);\n"
           "    r4.x = max(-c0.x, r2.x);\n"
           "    r4.x = r2.x < 0.00000 ? r3.x : r4.x;\n"
           "    r0.xy = r1.xy/r4.xx;\n"
           "    r0.xy = r0.xy - hg_ProgramLocal0.xy;\n"
           "    r2.x = dot(r0.xy, r0.xy);\n"
           "    r2.x = sqrt(r2.x);\n"
           "    r2.x = max(r2.x, -c0.x);\n"
           "    r2.x = r2.x*hg_ProgramLocal0.z;\n"
           "    r2.xy = inversesqrt(r2.xx);\n"
           "    r0.xy = r0.xy*r2.xy + hg_ProgramLocal0.xy;\n"
           "    r3.x = dot(r0.xyw, hg_ProgramLocal4.xyz);\n"
           "    r3.y = dot(r0.xyw, hg_ProgramLocal5.xyz);\n"
           "    r0.x = dot(r0.xyw, hg_ProgramLocal6.xyz);\n"
           "    r1.x = min(c0.x, r0.x);\n"
           "    r4.x = max(-c0.x, r0.x);\n"
           "    r0.x = r0.x < 0.00000 ? r1.x : r4.x;\n"
           "    r3.xy = r3.xy/r0.xx;\n"
           "    r3.xy = mix(hg_TexCoord0.xy, r3.xy, hg_ProgramLocal0.ww);\n"
           "    r3.xy = r3.xy + hg_ProgramLocal7.xy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal7.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r3.xy);\n"
           "}\n"
           "//MD5=3224aef6:c3c89f59:ad138ce0:a8809eab\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0008:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcPoke::InitProgramDescriptor(HgcPoke *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPoke_hgc_visible", "//Metal1.0     \n//LEN=0000000533\n[[ visible ]] FragmentOut HgcPoke_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-9.999999747e-06, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy;\n"
    "    r0.w = c0.w;\n"
    "    r1.x = dot(r0.xyw, hg_Params[1].xyz);\n"
    "    r1.y = dot(r0.xyw, hg_Params[2].xyz);\n"
    "    r2.x = dot(r0.xyw, hg_Params[3].xyz);\n"
    "    r3.x = fmin(c0.x, r2.x);\n"
    "    r4.x = fmax(-c0.x, r2.x);\n"
    "    r4.x = select(r4.x, r3.x, r2.x < 0.00000f);\n"
    "    r0.xy = r1.xy/r4.xx;\n"
    "    r0.xy = r0.xy - hg_Params[0].xy;\n"
    "    r2.x = dot(r0.xy, r0.xy);\n"
    "    r2.x = sqrt(r2.x);\n"
    "    r2.x = fmax(r2.x, -c0.x);\n"
    "    r2.x = r2.x*hg_Params[0].z;\n"
    "    r2.xy = rsqrt(r2.xx);\n"
    "    r0.xy = r0.xy*r2.xy + hg_Params[0].xy;\n"
    "    r3.x = dot(r0.xyw, hg_Params[4].xyz);\n"
    "    r3.y = dot(r0.xyw, hg_Params[5].xyz);\n"
    "    r0.x = dot(r0.xyw, hg_Params[6].xyz);\n"
    "    r1.x = fmin(c0.x, r0.x);\n"
    "    r4.x = fmax(-c0.x, r0.x);\n"
    "    r0.x = select(r4.x, r1.x, r0.x < 0.00000f);\n"
    "    r3.xy = r3.xy/r0.xx;\n"
    "    r3.xy = mix(texCoord0.xy, r3.xy, hg_Params[0].ww);\n"
    "    r3.xy = r3.xy + hg_Params[7].xy;\n"
    "    r3.xy = r3.xy*hg_Params[7].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r3.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28A9F40()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPoke");
}

void sub_1B28A9F50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28AA0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28AA120()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28AA118);
}

_QWORD *HgcPoke::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPoke [hgc1]");
}

uint64_t HgcPoke::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 7, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcPoke::Bind(HgcPoke *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HgcPoke *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcPoke::RenderTile(HgcPoke *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x8_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  uint64_t v90;
  float32x4_t v91;
  uint64_t v92;
  int32x4_t v93;
  float32x2_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  float32x4_t *v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x4_t *v107;
  int8x16_t v108;
  uint64_t v109;
  uint64_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  int8x8_t v114;
  float32x4_t v115;
  int32x4_t v116;
  int8x16_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int8x16_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  float32x4_t v138;
  int32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  uint64_t v145;
  float32x4_t v146;
  uint64_t v147;
  int32x4_t v148;
  float32x2_t v149;
  float32x4_t *v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int32x4_t v154;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcPoke *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = (float32x4_t)v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = (int8x16_t)v17;
          v19.i32[3] = 1.0;
          v20 = (int8x16_t)v18;
          v20.i32[3] = 1.0;
          v21 = vextq_s8(v19, v19, 8uLL).u64[0];
          v22.i64[0] = v17.i64[0];
          v22.i64[1] = v21;
          v23 = *((_QWORD *)this + 51);
          v25 = *(float32x4_t *)(v23 + 96);
          v24 = *(int8x16_t *)(v23 + 112);
          *(int8x8_t *)v26.f32 = vqtbl1_s8(v22, *(int8x8_t *)v24.i8);
          v27 = (int8x8_t)vextq_s8(v24, v24, 8uLL).u64[0];
          *(int8x8_t *)&v26.u32[2] = vqtbl1_s8(v22, v27);
          v22.i64[0] = v18.i64[0];
          v22.i64[1] = vextq_s8(v20, v20, 8uLL).u64[0];
          *(int8x8_t *)v28.f32 = vqtbl1_s8(v22, *(int8x8_t *)v24.i8);
          *(int8x8_t *)&v28.u32[2] = vqtbl1_s8(v22, v27);
          v29 = *(float32x4_t *)(v23 + 16);
          v30 = vmulq_f32(v26, v29);
          v31 = vmulq_f32(v29, v28);
          v32 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v30, 1), vaddq_f32(v30, (float32x4_t)vrev64q_s32((int32x4_t)v30)));
          v33 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v31, 1), vaddq_f32(v31, (float32x4_t)vrev64q_s32((int32x4_t)v31)));
          v34 = *(float32x4_t *)(v23 + 32);
          v35 = *(float32x4_t *)(v23 + 48);
          v36 = (int32x4_t)vmulq_f32(v26, v34);
          v37 = (int32x4_t)vmulq_f32(v28, v34);
          v38 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, v9, 4uLL), vaddq_f32((float32x4_t)v36, (float32x4_t)vrev64q_s32(v36)));
          v39 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v37, v9, 4uLL), vaddq_f32((float32x4_t)v37, (float32x4_t)vrev64q_s32(v37)));
          v40 = *(int8x16_t *)(v23 + 128);
          v41 = *(float32x4_t *)(v23 + 144);
          v42 = (float32x4_t)vbslq_s8(v40, v32, v38);
          v43 = (float32x4_t)vbslq_s8(v40, v33, v39);
          v44 = (int32x4_t)vmulq_f32(v26, v35);
          v45 = (int32x4_t)vmulq_f32(v28, v35);
          v46 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), vaddq_f32((float32x4_t)v44, (float32x4_t)vrev64q_s32(v44)));
          v47 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 8uLL), vaddq_f32((float32x4_t)v45, (float32x4_t)vrev64q_s32(v45)));
          v49 = *(float32x4_t *)(v23 + 160);
          v48 = *(float32x4_t *)(v23 + 176);
          v50 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v48, v46), (int8x16_t)vminq_f32(v46, v41), (int8x16_t)vmaxq_f32(v46, v49)), 0);
          v51 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v48, v47), (int8x16_t)vminq_f32(v47, v41), (int8x16_t)vmaxq_f32(v47, v49)), 0);
          v53 = *(float32x4_t *)(v23 + 192);
          v52 = *(float32x4_t *)(v23 + 208);
          v54 = vminq_f32(vmaxq_f32(vrecpeq_f32(v50), v53), v52);
          v55 = vminq_f32(vmaxq_f32(vrecpeq_f32(v51), v53), v52);
          v56 = vminq_f32(vmaxq_f32(vmulq_f32(v54, vrecpsq_f32(v50, v54)), v53), v52);
          v57 = vminq_f32(vmaxq_f32(vmulq_f32(v55, vrecpsq_f32(v51, v55)), v53), v52);
          v50.i64[0] = vsubq_f32(vmulq_f32(vmulq_f32(v56, vrecpsq_f32(v50, v56)), v42), *(float32x4_t *)v23).u64[0];
          v42.i64[0] = vsubq_f32(vmulq_f32(vmulq_f32(v57, vrecpsq_f32(v51, v57)), v43), *(float32x4_t *)v23).u64[0];
          v43.i64[0] = v50.i64[0];
          v43.i64[1] = v19.i64[1];
          v19.i64[0] = v42.i64[0];
          v19.i64[1] = v20.i64[1];
          v58 = vmulq_f32(v43, v43);
          v59 = vmulq_f32((float32x4_t)v19, (float32x4_t)v19);
          v60 = (int8x16_t)vaddq_f32(v58, (float32x4_t)vrev64q_s32((int32x4_t)v58));
          v61 = (int8x16_t)vaddq_f32(v59, (float32x4_t)vrev64q_s32((int32x4_t)v59));
          v62 = vminq_f32(vrsqrteq_f32((float32x4_t)v60), v52);
          v63 = vminq_f32(vrsqrteq_f32((float32x4_t)v61), v52);
          v64 = vminq_f32(vmulq_f32(v62, vrsqrtsq_f32(vmulq_f32(v62, (float32x4_t)v60), v62)), v52);
          v65 = vminq_f32(vmulq_f32(v63, vrsqrtsq_f32(vmulq_f32(v63, (float32x4_t)v61), v63)), v52);
          v60.i64[0] = vmulq_laneq_f32(vmaxq_f32(vmulq_f32((float32x4_t)v60, vminq_f32(vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32((float32x4_t)v60, v64), v64)), v52)), v49), *(float32x4_t *)v23, 2).u64[0];
          v61.i64[0] = vmulq_laneq_f32(vmaxq_f32(vmulq_f32((float32x4_t)v61, vminq_f32(vmulq_f32(v65, vrsqrtsq_f32(vmulq_f32((float32x4_t)v61, v65), v65)), v52)), v49), *(float32x4_t *)v23, 2).u64[0];
          v66 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.i8, 0)), v52);
          v67 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.i8, 0)), v52);
          v68 = vminq_f32(vmulq_f32(v66, vrsqrtsq_f32(vmulq_n_f32(v66, *(float *)v60.i32), v66)), v52);
          v69 = vminq_f32(vmulq_f32(v67, vrsqrtsq_f32(vmulq_n_f32(v67, *(float *)v61.i32), v67)), v52);
          *(float32x2_t *)v60.i8 = vadd_f32(*(float32x2_t *)v23, vmul_f32(*(float32x2_t *)v50.f32, vmul_f32(*(float32x2_t *)v68.f32, (float32x2_t)*(_OWORD *)&vrsqrtsq_f32(vmulq_n_f32(v68, *(float *)v60.i32), v68))));
          *(float32x2_t *)v61.i8 = vadd_f32(*(float32x2_t *)v23, vmul_f32(*(float32x2_t *)v42.f32, vmul_f32(*(float32x2_t *)v69.f32, (float32x2_t)*(_OWORD *)&vrsqrtsq_f32(vmulq_n_f32(v69, *(float *)v61.i32), v69))));
          v60.i64[1] = v21;
          *(int8x8_t *)v70.f32 = vqtbl1_s8(v60, *(int8x8_t *)v24.i8);
          *(int8x8_t *)&v70.u32[2] = vqtbl1_s8(v60, v27);
          v61.i64[1] = v22.i64[1];
          *(int8x8_t *)v24.i8 = vqtbl1_s8(v61, *(int8x8_t *)v24.i8);
          v24.u64[1] = (unint64_t)vqtbl1_s8(v61, v27);
          v71 = *(float32x4_t *)(v23 + 64);
          v72 = *(float32x4_t *)(v23 + 80);
          v73 = (int32x4_t)vmulq_f32(v70, v71);
          v74 = (int32x4_t)vmulq_f32(v71, (float32x4_t)v24);
          v75 = (int32x4_t)vmulq_f32(v70, v72);
          v76 = (int32x4_t)vmulq_f32((float32x4_t)v24, v72);
          v77 = (int32x4_t)vmulq_f32(v70, v25);
          v78 = (int32x4_t)vmulq_f32((float32x4_t)v24, v25);
          v79 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), vaddq_f32((float32x4_t)v77, (float32x4_t)vrev64q_s32(v77)));
          v80 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), vaddq_f32((float32x4_t)v78, (float32x4_t)vrev64q_s32(v78)));
          v81 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v48, v79), (int8x16_t)vminq_f32(v79, v41), (int8x16_t)vmaxq_f32(v79, v49)), 0);
          v82 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v48, v80), (int8x16_t)vminq_f32(v80, v41), (int8x16_t)vmaxq_f32(v80, v49)), 0);
          v83 = (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL), vaddq_f32((float32x4_t)v74, (float32x4_t)vrev64q_s32(v74))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL), vaddq_f32((float32x4_t)v76, (float32x4_t)vrev64q_s32(v76))));
          v84 = vminq_f32(vmaxq_f32(vrecpeq_f32(v81), v53), v52);
          v85 = vminq_f32(vmaxq_f32(vrecpeq_f32(v82), v53), v52);
          v86 = vminq_f32(vmaxq_f32(vmulq_f32(v84, vrecpsq_f32(v81, v84)), v53), v52);
          v87 = vminq_f32(vmaxq_f32(vmulq_f32(v85, vrecpsq_f32(v82, v85)), v53), v52);
          v88 = vaddq_f32(v17, vmulq_laneq_f32(vsubq_f32(vmulq_f32(vmulq_f32(v86, vrecpsq_f32(v81, v86)), (float32x4_t)vbslq_s8(v40, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), vaddq_f32((float32x4_t)v73, (float32x4_t)vrev64q_s32(v73))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 4uLL), vaddq_f32((float32x4_t)v75, (float32x4_t)vrev64q_s32(v75))))), v17), *(float32x4_t *)v23, 3));
          v89 = vaddq_f32(v18, vmulq_laneq_f32(vsubq_f32(vmulq_f32(vmulq_f32(v87, vrecpsq_f32(v82, v87)), v83), v18), *(float32x4_t *)v23, 3));
          v90 = *((int *)a2 + 22);
          v91 = vsubq_f32(v88, (float32x4_t)v9);
          v92 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v93 = vaddq_s32(vcvtq_s32_f32(v91), vcltzq_f32(v91));
            v94 = (float32x2_t)vsubq_f32(v91, vcvtq_f32_s32(v93)).u64[0];
            v95 = (float32x4_t *)(v92 + 16 * (v93.i32[0] + v93.i32[1] * (int)v90));
            v96 = vaddq_f32(*v95, vmulq_n_f32(vsubq_f32(v95[1], *v95), v94.f32[0]));
            v97 = vaddq_f32(v96, vmulq_lane_f32(vsubq_f32(vaddq_f32(v95[v90], vmulq_n_f32(vsubq_f32(v95[(int)v90 + 1], v95[v90]), v94.f32[0])), v96), v94, 1));
            v98 = vsubq_f32(v89, (float32x4_t)v9);
            v99 = vaddq_s32(vcvtq_s32_f32(v98), vcltzq_f32(v98));
            v98.i64[0] = vsubq_f32(v98, vcvtq_f32_s32(v99)).u64[0];
            v100 = (float32x4_t *)(v92 + 16 * (v99.i32[0] + v99.i32[1] * (int)v90));
            v101 = vaddq_f32(*v100, vmulq_n_f32(vsubq_f32(v100[1], *v100), v98.f32[0]));
            v102 = vaddq_f32(v101, vmulq_lane_f32(vsubq_f32(vaddq_f32(v100[v90], vmulq_n_f32(vsubq_f32(v100[(int)v90 + 1], v100[v90]), v98.f32[0])), v101), *(float32x2_t *)v98.f32, 1));
          }
          else
          {
            v103 = vaddq_f32(v91, v13);
            v104 = vcvtq_s32_f32(v103);
            v103.i64[0] = vaddq_s32(v104, vcgtq_f32(vcvtq_f32_s32(v104), v103)).u64[0];
            v97 = *(float32x4_t *)(v92 + 16 * (v103.i32[0] + v103.i32[1] * (int)v90));
            v105 = vaddq_f32(vsubq_f32(v89, (float32x4_t)v9), v13);
            v106 = vcvtq_s32_f32(v105);
            v105.i64[0] = vaddq_s32(v106, vcgtq_f32(vcvtq_f32_s32(v106), v105)).u64[0];
            v102 = *(float32x4_t *)(v92 + 16 * (v105.i32[0] + v105.i32[1] * (int)v90));
          }
          v107 = (float32x4_t *)(v11 + 16 * v15);
          *v107 = v97;
          v107[1] = v102;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v108 = (int8x16_t)v17;
        v108.i32[3] = 1.0;
        v109 = vextq_s8(v108, v108, 8uLL).u64[0];
        v110 = *((_QWORD *)this + 51);
        v111.i64[0] = v17.i64[0];
        v111.i64[1] = v109;
        v112 = *(int8x16_t *)(v110 + 112);
        *(int8x8_t *)v113.f32 = vqtbl1_s8(v111, *(int8x8_t *)v112.i8);
        v114 = (int8x8_t)vextq_s8(v112, v112, 8uLL).u64[0];
        *(int8x8_t *)&v113.u32[2] = vqtbl1_s8(v111, v114);
        v115 = vmulq_f32(*(float32x4_t *)(v110 + 16), v113);
        v116 = (int32x4_t)vmulq_f32(v113, *(float32x4_t *)(v110 + 32));
        v117 = *(int8x16_t *)(v110 + 128);
        v118 = *(float32x4_t *)(v110 + 144);
        v119 = (float32x4_t)vbslq_s8(v117, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v115, 1), vaddq_f32(v115, (float32x4_t)vrev64q_s32((int32x4_t)v115))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v116, v9, 4uLL), vaddq_f32((float32x4_t)v116, (float32x4_t)vrev64q_s32(v116))));
        v120 = (int32x4_t)vmulq_f32(v113, *(float32x4_t *)(v110 + 48));
        v121 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v120, (int8x16_t)v120, 8uLL), vaddq_f32((float32x4_t)v120, (float32x4_t)vrev64q_s32(v120)));
        v122 = *(float32x4_t *)(v110 + 160);
        v123 = *(float32x4_t *)(v110 + 176);
        v124 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v123, v121), (int8x16_t)vminq_f32(v121, v118), (int8x16_t)vmaxq_f32(v121, v122)), 0);
        v125 = *(float32x4_t *)(v110 + 192);
        v126 = *(float32x4_t *)(v110 + 208);
        v127 = vminq_f32(vmaxq_f32(vrecpeq_f32(v124), v125), v126);
        v128 = vminq_f32(vmaxq_f32(vmulq_f32(v127, vrecpsq_f32(v124, v127)), v125), v126);
        v119.i64[0] = vsubq_f32(vmulq_f32(vmulq_f32(v128, vrecpsq_f32(v124, v128)), v119), *(float32x4_t *)v110).u64[0];
        v124.i64[0] = v119.i64[0];
        v124.i64[1] = v108.i64[1];
        v129 = vmulq_f32(v124, v124);
        v130 = (int8x16_t)vaddq_f32(v129, (float32x4_t)vrev64q_s32((int32x4_t)v129));
        v131 = vminq_f32(vrsqrteq_f32((float32x4_t)v130), v126);
        v132 = vminq_f32(vmulq_f32(v131, vrsqrtsq_f32(vmulq_f32(v131, (float32x4_t)v130), v131)), v126);
        v130.i64[0] = vmulq_laneq_f32(vmaxq_f32(vmulq_f32(vminq_f32(vmulq_f32(v132, vrsqrtsq_f32(vmulq_f32(v132, (float32x4_t)v130), v132)), v126), (float32x4_t)v130), v122), *(float32x4_t *)v110, 2).u64[0];
        v133 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.i8, 0)), v126);
        v134 = vminq_f32(vmulq_f32(v133, vrsqrtsq_f32(vmulq_n_f32(v133, *(float *)v130.i32), v133)), v126);
        *(float32x2_t *)v130.i8 = vadd_f32(*(float32x2_t *)v110, vmul_f32(*(float32x2_t *)v119.f32, vmul_f32(*(float32x2_t *)v134.f32, (float32x2_t)*(_OWORD *)&vrsqrtsq_f32(vmulq_n_f32(v134, *(float *)v130.i32), v134))));
        v130.i64[1] = v109;
        *(int8x8_t *)v135.f32 = vqtbl1_s8(v130, *(int8x8_t *)v112.i8);
        *(int8x8_t *)&v135.u32[2] = vqtbl1_s8(v130, v114);
        v136 = (int32x4_t)vmulq_f32(*(float32x4_t *)(v110 + 64), v135);
        v137 = (int32x4_t)vmulq_f32(v135, *(float32x4_t *)(v110 + 80));
        v138 = (float32x4_t)vbslq_s8(v117, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL), vaddq_f32((float32x4_t)v136, (float32x4_t)vrev64q_s32(v136))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v137, (int8x16_t)v137, 4uLL), vaddq_f32((float32x4_t)v137, (float32x4_t)vrev64q_s32(v137))));
        v139 = (int32x4_t)vmulq_f32(v135, *(float32x4_t *)(v110 + 96));
        v140 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v139, (int8x16_t)v139, 8uLL), vaddq_f32((float32x4_t)v139, (float32x4_t)vrev64q_s32(v139)));
        v141 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v123, v140), (int8x16_t)vminq_f32(v140, v118), (int8x16_t)vmaxq_f32(v140, v122)), 0);
        v142 = vminq_f32(vmaxq_f32(vrecpeq_f32(v141), v125), v126);
        v143 = vminq_f32(vmaxq_f32(vmulq_f32(v142, vrecpsq_f32(v141, v142)), v125), v126);
        v144 = vaddq_f32(v17, vmulq_laneq_f32(vsubq_f32(vmulq_f32(vmulq_f32(v143, vrecpsq_f32(v141, v143)), v138), v17), *(float32x4_t *)v110, 3));
        v145 = *((int *)a2 + 22);
        v146 = vsubq_f32(v144, (float32x4_t)v9);
        v147 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v148 = vaddq_s32(vcvtq_s32_f32(v146), vcltzq_f32(v146));
          v149 = (float32x2_t)vsubq_f32(v146, vcvtq_f32_s32(v148)).u64[0];
          v150 = (float32x4_t *)(v147 + 16 * (v148.i32[0] + v148.i32[1] * (int)v145));
          v151 = vaddq_f32(*v150, vmulq_n_f32(vsubq_f32(v150[1], *v150), v149.f32[0]));
          v152 = vaddq_f32(v151, vmulq_lane_f32(vsubq_f32(vaddq_f32(v150[v145], vmulq_n_f32(vsubq_f32(v150[(int)v145 + 1], v150[v145]), v149.f32[0])), v151), v149, 1));
        }
        else
        {
          v153 = vaddq_f32(v146, v13);
          v154 = vcvtq_s32_f32(v153);
          v153.i64[0] = vaddq_s32(v154, vcgtq_f32(vcvtq_f32_s32(v154), v153)).u64[0];
          v152 = *(float32x4_t *)(v147 + 16 * (v153.i32[0] + v153.i32[1] * (int)v145));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v152;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcPoke::GetDOD(HgcPoke *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcPoke *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcPoke::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcPoke::HgcPoke(HgcPoke *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EFC98;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = xmmword_1B30517F0;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 144) = xmmword_1B3052BF0;
  *(_OWORD *)(v3 + 160) = xmmword_1B3052900;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_OWORD *)(v3 + 192) = xmmword_1B30527A0;
  *(int32x4_t *)(v3 + 208) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 224) = 0u;
  *(_OWORD *)(v3 + 240) = 0u;
  *(_OWORD *)(v3 + 256) = 0u;
  *(_OWORD *)(v3 + 272) = 0u;
  *(_OWORD *)(v3 + 288) = 0u;
  *(_OWORD *)(v3 + 304) = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcPoke *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28AAD28(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPoke::~HgcPoke(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EFC98;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B2834900);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcPoke::~HgcPoke(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPoke::SetParameter(HgcPoke *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_38;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] == a3.n128_f32[0]
        && v9[1].n128_f32[1] == a4
        && v9[1].n128_f32[2] == a6
        && v9[1].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v9[1].n128_u32[0] = a3.n128_u32[0];
      v9[1].n128_f32[1] = a4;
      v9[1].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v9[1].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[14] = a3;
      goto LABEL_38;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == a3.n128_f32[0]
        && v10[2].n128_f32[1] == a4
        && v10[2].n128_f32[2] == a6
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u32[0] = a3.n128_u32[0];
      v10[2].n128_f32[1] = a4;
      v10[2].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v10[2].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[15] = a3;
      goto LABEL_38;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == a3.n128_f32[0]
        && v11[3].n128_f32[1] == a4
        && v11[3].n128_f32[2] == a6
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u32[0] = a3.n128_u32[0];
      v11[3].n128_f32[1] = a4;
      v11[3].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[16] = a3;
      goto LABEL_38;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == a3.n128_f32[0]
        && v12[4].n128_f32[1] == a4
        && v12[4].n128_f32[2] == a6
        && v12[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12[4].n128_u32[0] = a3.n128_u32[0];
      v12[4].n128_f32[1] = a4;
      v12[4].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[17] = a3;
      goto LABEL_38;
    case 5:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[18] = a3;
      goto LABEL_38;
    case 6:
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[6].n128_f32[0] == a3.n128_f32[0]
        && v14[6].n128_f32[1] == a4
        && v14[6].n128_f32[2] == a6
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u32[0] = a3.n128_u32[0];
      v14[6].n128_f32[1] = a4;
      v14[6].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v14[6].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[19] = a3;
LABEL_38:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcPoke::GetParameter(HgcPoke *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[56];
      a3[1] = v5[57];
      a3[2] = v5[58];
      v4 = v5 + 59;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[60];
      a3[1] = v6[61];
      a3[2] = v6[62];
      v4 = v6 + 63;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[64];
      a3[1] = v7[65];
      a3[2] = v7[66];
      v4 = v7 + 67;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[68];
      a3[1] = v8[69];
      a3[2] = v8[70];
      v4 = v8 + 71;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[72];
      a3[1] = v9[73];
      a3[2] = v9[74];
      v4 = v9 + 75;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[76];
      a3[1] = v10[77];
      a3[2] = v10[78];
      v4 = v10 + 79;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcShapeCheckerboard::GetProgram(HgcShapeCheckerboard *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_225;
    else
      return aMetal10Len0000_226;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_74;
  }
}

void HgcShapeCheckerboard::InitProgramDescriptor(HgcShapeCheckerboard *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcShapeCheckerboard_hgc_visible", aMetal10Len0000_227);
}

void sub_1B28AB21C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcShapeCheckerboard");
}

void sub_1B28AB22C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051C00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28AB32C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28AB36C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28AB364);
}

_QWORD *HgcShapeCheckerboard::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcShapeCheckerboard [hgc1]");
}

uint64_t HgcShapeCheckerboard::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcShapeCheckerboard::Bind(HgcShapeCheckerboard *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, *((_QWORD *)this + 51) + 208, 1);
  (*(void (**)(HgcShapeCheckerboard *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcShapeCheckerboard::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int v2;
  int v3;
  int v4;
  int32x2_t v5;
  float32x4_t v6;
  uint64_t v7;
  int8x16_t v8;
  uint64_t v9;
  float32x4_t v10;
  _OWORD *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int64x2_t v46;
  int8x16_t v47;
  int32x4_t v48;
  float32x4_t v49;
  int64x2_t v50;
  float32x4_t v51;
  int64x2_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  int8x16_t v59;
  float32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  int8x16_t v121;
  float32x4_t v122;
  int8x16_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int64x2_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  int8x16_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int8x16_t v142;
  float32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  float32x4_t v149;
  int8x16_t v150;
  float32x4_t v151;
  int8x16_t v152;
  int8x16_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int32x4_t v167;
  int64x2_t v168;
  float32x4_t v169;
  int8x16_t v170;
  int8x16_t v171;
  float32x4_t v172;
  float32x4_t v173;
  int8x16_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  int64x2_t v182;
  float32x4_t v183;
  int64x2_t v184;
  float32x4_t v185;
  int32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int8x16_t v197;
  int8x16_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  int8x16_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  int8x16_t v212;
  int8x16_t v213;
  float32x4_t v214;
  float32x4_t v215;
  int8x16_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int64x2_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  int64x2_t v242;
  float32x4_t v243;
  int8x16_t v244;
  int32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  int8x16_t v250;
  float32x4_t v251;
  int8x16_t v252;
  int8x16_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  int32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  int32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  int8x16_t v270;
  int8x16_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  int8x16_t v275;
  int8x16_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  int8x16_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  int8x16_t v291;
  int64x2_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  int8x16_t v296;
  int32x4_t v297;
  int8x16_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  int8x16_t v302;
  int64x2_t v303;
  int8x16_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  int8x16_t v312;
  int8x16_t v313;
  float32x4_t v314;
  float32x4_t v315;
  int8x16_t v316;
  int8x16_t v317;
  float32x4_t v318;
  float32x4_t v319;
  int8x16_t v320;
  float32x4_t v321;
  float32x4_t v322;
  int8x16_t v323;
  int64x2_t v324;
  int32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  int8x16_t v329;
  float32x4_t v330;
  float32x4_t v331;
  int64x2_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  int8x16_t v337;
  float32x4_t v338;
  int32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  int32x4_t v342;
  float32x4_t v343;
  int8x16_t v344;
  float32x4_t v345;
  float32x4_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  float32x4_t v350;
  int8x16_t v351;
  float32x4_t v352;
  int8x16_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  int8x16_t v364;
  float32x4_t v365;
  float32x4_t v366;
  int32x4_t v367;
  int8x16_t v368;
  float32x4_t v369;
  float32x4_t v370;
  int8x16_t v371;
  int8x16_t v372;
  float32x4_t v373;
  float32x4_t v374;
  int32x4_t v375;
  int32x4_t v376;
  int8x16_t v377;
  float32x4_t v378;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  int8x8_t v385;
  float32x4_t v386;
  float32x4_t v387;
  int8x8_t v388;
  float32x4_t v389;
  int8x16_t v390;
  float32x4_t v391;
  float32x4_t v392;

  v2 = a2[1].i32[1] - a2->i32[1];
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = a2[1].i32[0] - a2->i32[0];
    v5 = a2[2];
    *(float32x2_t *)v6.f32 = vadd_f32(vcvt_f32_s32(*a2), (float32x2_t)0x3F0000003F000000);
    v6.i64[1] = 0x3F80000000000000;
    v380 = v6;
    v7 = 16 * a2[3].i32[0];
    v8 = 0uLL;
    do
    {
      if (v4 >= 1)
      {
        v9 = 0;
        v10 = v380;
        do
        {
          v392 = v10;
          v11 = *(_OWORD **)(a1 + 408);
          v12 = vmulq_f32(v10, *((float32x4_t *)v11 + 13));
          v13 = vaddq_f32(v12, (float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v12, 4uLL));
          v14 = *((float32x4_t *)v11 + 15);
          v15 = *((float32x4_t *)v11 + 14);
          v17 = *((float32x4_t *)v11 + 16);
          v16 = *((int8x16_t *)v11 + 17);
          v18 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(*(float32x4_t *)v11), v15), v14), v17);
          v19 = vmulq_f32(v10, *((float32x4_t *)v11 + 12));
          v20 = vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL));
          v21 = (int8x16_t)vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
          v22 = vbslq_s8(v16, (int8x16_t)vmulq_f32(v18, vrecpsq_f32(*(float32x4_t *)v11, v18)), (int8x16_t)vaddq_f32(v13, (float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL)));
          v24 = *((int8x16_t *)v11 + 18);
          v23 = *((float32x4_t *)v11 + 19);
          v25 = vbslq_s8(v24, v21, vextq_s8(v22, v22, 8uLL));
          v26 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
          v27 = vmulq_n_f32(v26, *(float *)v22.i32);
          v28 = vcvtq_f32_s32(vcvtq_s32_f32(v27));
          v386 = (float32x4_t)vextq_s8(*(int8x16_t *)v11, *(int8x16_t *)v11, 4uLL);
          v29 = (float32x4_t)vbslq_s8(v24, v21, (int8x16_t)vmulq_f32(v386, v23));
          v30 = vsubq_f32(v26, vmulq_n_f32(vsubq_f32(v28, (float32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_f32(v28, v27))), COERCE_FLOAT(*v11)));
          v27.i64[0] = vsubq_f32(v30, (float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 3)).u64[0];
          v31 = *((int8x16_t *)v11 + 21);
          v388 = (int8x8_t)vextq_s8(*((int8x16_t *)v11 + 20), *((int8x16_t *)v11 + 20), 8uLL).u64[0];
          v28.i64[0] = v27.i64[0];
          *(int8x8_t *)&v28.u32[2] = vand_s8(*(int8x8_t *)v27.f32, v388);
          v32 = (float32x4_t)vrev64q_s32((int32x4_t)__PAIR128__(v28.u64[1], v27.u64[0]));
          v33.i64[0] = v30.i64[0];
          v33.i64[1] = vdupq_laneq_s64((int64x2_t)vmaxq_f32(v28, v32), 1).u64[0];
          v34 = (float32x4_t)vrev64q_s32(v33);
          v35 = vminq_f32(vmaxq_f32(vrecpeq_f32(v34), v14), v17);
          v36 = vminq_f32(vmaxq_f32(vmulq_f32(v35, vrecpsq_f32(v34, v35)), v14), v17);
          v30.i64[1] = vmulq_f32(v36, vrecpsq_f32(v34, v36)).i64[1];
          v37 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vminq_f32(v28, v32), (int8x16_t)v30);
          v38 = vmulq_laneq_f32(v37, v37, 3);
          v36.i64[0] = v37.i64[0];
          v36.i64[1] = v38.i64[1];
          v37.i64[1] = vdupq_laneq_s64((int64x2_t)v38, 1).u64[0];
          v39 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_laneq_f32((float32x4_t)vrev64q_s32((int32x4_t)v37), v38, 2), (int8x16_t)v36);
          v41 = *((float32x4_t *)v11 + 22);
          v40 = *((float32x4_t *)v11 + 23);
          v42 = *((float32x4_t *)v11 + 24);
          v43 = *((float32x4_t *)v11 + 25);
          v44 = *((float32x4_t *)v11 + 26);
          v390 = *((int8x16_t *)v11 + 27);
          v391 = v43;
          v45 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(v44, vmulq_n_f32(v39, vaddq_f32(v44, vmulq_laneq_f32(vaddq_f32(v43, vmulq_laneq_f32(vaddq_f32(v42, vmulq_laneq_f32(vaddq_f32(v41, vmulq_laneq_f32(v40, v39, 3)), v39, 3)), v39, 3)),
                                                  v39,
                                                  3)).f32[0])),
                               (int8x16_t)v36);
          v46 = (int64x2_t)vmulq_laneq_f32(v45, v45, 3);
          v47.i64[0] = v45.i64[0];
          v47.i64[1] = v46.i64[1];
          v45.i64[1] = vdupq_laneq_s64(v46, 1).u64[0];
          v48 = (int32x4_t)vbslq_s8(v31, (int8x16_t)vsubq_f32(v43, (float32x4_t)vrev64q_s32((int32x4_t)v45)), v47);
          v49 = vsubq_f32(v32, v28);
          v32.i64[0] = v27.i64[0];
          v32.i64[1] = v49.i64[1];
          v50 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32(v44, v32), (int8x16_t)vrev64q_s32(v48), (int8x16_t)v48);
          v32.i64[0] = v27.i64[0];
          v32.i64[1] = v50.i64[1];
          v27.i64[1] = vdupq_laneq_s64(v50, 1).u64[0];
          v51 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vsubq_f32(v42, (float32x4_t)vrev64q_s32((int32x4_t)v27)), (int8x16_t)v32);
          v52 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32(v40, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL)), (int8x16_t)v51, (int8x16_t)vrev64q_s32((int32x4_t)v51));
          v32.i64[0] = v51.i64[0];
          v53 = vextq_s8((int8x16_t)v52, (int8x16_t)v51, 8uLL);
          v54 = *((float32x4_t *)v11 + 6);
          v55 = vminq_f32(vmaxq_f32(vmulq_f32(v43, vrecpeq_f32(v54)), v42), v17);
          v56 = vmulq_f32(v55, vrecpsq_f32(v54, v55));
          v32.i64[1] = vdupq_laneq_s64(v52, 1).u64[0];
          v22.i64[1] = v56.i64[1];
          v51.i64[1] = vmulq_f32(v40, v56).i64[1];
          v57 = (int8x16_t)vrev64q_s32((int32x4_t)v32);
          v59 = *((int8x16_t *)v11 + 28);
          v58 = *((float32x4_t *)v11 + 29);
          v60 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vmulq_f32(v51, v51), (int8x16_t)v51);
          v32.i64[0] = vaddq_f32(vmulq_f32(v60, v60), (float32x4_t)vrev64q_s32((int32x4_t)v60)).u64[0];
          v55.i64[0] = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
          *(int8x8_t *)v43.f32 = vext_s8(*(int8x8_t *)v55.f32, *(int8x8_t *)v32.f32, 4uLL);
          *(int8x8_t *)v55.f32 = vext_s8(*(int8x8_t *)v32.f32, *(int8x8_t *)v55.f32, 4uLL);
          v61 = veorq_s8(vandq_s8(v57, v390), v53);
          v62.i64[0] = v32.i64[0];
          v62.i64[1] = v60.i64[1];
          v55.i64[1] = v43.i64[0];
          v63 = vminq_f32(vrsqrteq_f32(v55), v41);
          v64 = vminq_f32(vmulq_f32(v63, vrsqrtsq_f32(vmulq_f32(v63, v55), v63)), v41);
          v65 = (float32x4_t)vbslq_s8(v24, v62, (int8x16_t)vaddq_f32(*((float32x4_t *)v11 + 8), (float32x4_t)vextq_s8(v61, v61, 8uLL)));
          v66 = vminq_f32(vmaxq_f32(vrecpeq_f32(v65), v42), v17);
          v67 = vminq_f32(vmaxq_f32(vmulq_f32(v66, vrecpsq_f32(v65, v66)), v42), v17);
          v43.i64[0] = v48.i64[0];
          v43.i64[1] = vmulq_laneq_f32(vmulq_f32(v67, vrecpsq_f32(v65, v67)), v65, 3).i64[1];
          v68 = vcvtq_f32_s32(vcvtq_s32_f32(v43));
          v69 = (int8x16_t)vsubq_f32(v68, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, v43), (int8x16_t)v41, v8));
          v70 = (float32x4_t)vbslq_s8(v24, v62, (int8x16_t)vmulq_f32(v23, (float32x4_t)vrev64q_s32((int32x4_t)v65)));
          v71 = (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v64, vrsqrtsq_f32(vmulq_f32(v64, v55), v64)), v41), v55);
          v72 = vmulq_f32(v23, (float32x4_t)vrev64q_s32((int32x4_t)v70));
          v73 = vcvtq_f32_s32(vcvtq_s32_f32(v72));
          v74 = vsubq_f32(vabdq_f32(vsubq_f32(v72, vsubq_f32(v73, (float32x4_t)vandq_s8((int8x16_t)v41, (int8x16_t)vcgtq_f32(v73, v72)))), v14), v15);
          v75 = *((float32x4_t *)v11 + 30);
          v76 = *((float32x4_t *)v11 + 31);
          v77 = vmulq_f32(v74, v74);
          v78 = vmulq_f32(v74, vaddq_f32(v40, vmulq_f32(v77, vaddq_f32(v76, vmulq_f32(v77, vaddq_f32(v58, vmulq_f32(v75, v77)))))));
          v79 = (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v65, (int8x16_t)v65, 0xCuLL), vmulq_laneq_f32((float32x4_t)vextq_s8(v69, (int8x16_t)v48, 8uLL), v65, 2));
          v80 = vaddq_f32(v76, vmulq_f32(v75, v70));
          v81 = vcvtq_f32_s32(vcvtq_s32_f32(v80));
          v48.i64[1] = v78.i64[1];
          v82 = vabdq_f32(vsubq_f32(v80, vsubq_f32(v81, (float32x4_t)vandq_s8((int8x16_t)v58, (int8x16_t)vcgtq_f32(v81, v80)))), v23);
          v83 = (float32x4_t)vbslq_s8(v16, v79, v61);
          v84 = vaddq_f32(v76, v82);
          v85 = vmulq_f32(v84, v84);
          v86 = *((float32x4_t *)v11 + 32);
          v87 = *((float32x4_t *)v11 + 33);
          v389 = v15;
          v88 = *((float32x4_t *)v11 + 34);
          v89 = *((float32x4_t *)v11 + 35);
          v90 = (float32x4_t)vbslq_s8(v24, v62, (int8x16_t)vmulq_f32(v84, vaddq_f32(v88, vmulq_f32(v85, vaddq_f32(v87, vmulq_f32(v85, vaddq_f32(v15, vmulq_f32(v86, v85))))))));
          v91 = vmulq_f32(v88, v83);
          v92 = vcvtq_f32_s32(vcvtq_s32_f32(v91));
          v93 = vsubq_f32(vabdq_f32(vsubq_f32(v91, vsubq_f32(v92, (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v92, v91)))), v86), v76);
          v94 = vmulq_f32(v93, v93);
          v382 = v58;
          v383 = v75;
          v95 = vmulq_f32(v94, vaddq_f32(v89, vmulq_f32(v94, vaddq_f32(v75, vmulq_f32(v58, v94)))));
          v96 = *((float32x4_t *)v11 + 36);
          v97 = *((float32x4_t *)v11 + 37);
          v98 = vaddq_f32(v96, vmulq_f32(v89, (float32x4_t)vrev64q_s32((int32x4_t)v83)));
          v99 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
          v93.i64[0] = vmulq_f32(v93, vaddq_f32(v96, v95)).u64[0];
          v100 = vaddq_f32(v96, vabdq_f32(vsubq_f32(v98, vsubq_f32(v99, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v99, v98)))), v87));
          v101 = vmulq_f32(v100, v100);
          v93.i64[1] = v90.i64[1];
          v102 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v29, v90), (int8x16_t)v48);
          v103 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vmulq_f32(v100, vaddq_f32(v58, vmulq_f32(v101, vaddq_f32(v75, vmulq_f32(v101, vaddq_f32(v86, vmulq_f32(v76, v101))))))), (int8x16_t)v93);
          v104 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_laneq_f32(v102, v29, 3), (int8x16_t)v102);
          v384 = (float32x4_t)vbslq_s8(v31, v71, v22);
          v105 = vmulq_laneq_f32(v103, v384, 3);
          v93.i64[0] = vsubq_f32(v105, (float32x4_t)vdupq_laneq_s64((int64x2_t)v104, 1)).u64[0];
          v101.i64[0] = v105.i64[0];
          v105.i64[1] = vdupq_laneq_s64((int64x2_t)v103, 1).u64[0];
          v106 = vmulq_f32(v96, (float32x4_t)vrev64q_s32((int32x4_t)v105));
          v107 = vcvtq_f32_s32(vcvtq_s32_f32(v106));
          v101.i64[1] = v103.i64[1];
          v108 = vsubq_f32(vabdq_f32(vsubq_f32(v106, vsubq_f32(v107, (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v107, v106)))), v23), v97);
          v109 = vmulq_f32(v108, v108);
          v110 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v108, vaddq_f32(v88, vmulq_f32(v109, vaddq_f32(v87, vmulq_f32(v109, vaddq_f32(v15, vmulq_f32(v86, v109))))))), (int8x16_t)v101);
          v111 = vaddq_f32(v97, vmulq_f32(v96, v110));
          v112 = vcvtq_f32_s32(vcvtq_s32_f32(v111));
          v113 = vaddq_f32(v97, vabdq_f32(vsubq_f32(v111, vsubq_f32(v112, (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v112, v111)))), v88));
          v114 = vmulq_f32(v113, v113);
          v381 = *((float32x4_t *)v11 + 23);
          v115 = (int32x4_t)vmulq_f32(v113, vaddq_f32(v381, vmulq_f32(v114, vaddq_f32(v76, vmulq_f32(v114, vaddq_f32(v87, vmulq_f32(v86, v114)))))));
          v387 = *((float32x4_t *)v11 + 11);
          v116 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_laneq_f32(*((float32x4_t *)v11 + 10), v29, 3), (int8x16_t)v110);
          v93.i64[1] = vmulq_laneq_f32((float32x4_t)vrev64q_s32(v115), v116, 2).i64[1];
          v117 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_laneq_f32(v116, v116, 3), (int8x16_t)v93);
          v118 = vsubq_f32(v117, v104);
          v119 = (float32x4_t)vzip2q_s64((int64x2_t)v118, (int64x2_t)v29);
          v120 = (int8x16_t)vmulq_f32(v119, v117);
          v121 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v120.i64[0], 0), (float32x4_t)vextq_s8((int8x16_t)v387, v120, 0xCuLL));
          v122 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_laneq_f32((float32x4_t)vzip2q_s64((int64x2_t)v29, (int64x2_t)v118), v118, 3), (int8x16_t)v116);
          v98.i64[0] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u64[0];
          v123 = vextq_s8((int8x16_t)v122, (int8x16_t)v122, 0xCuLL);
          *(float32x2_t *)v123.i8 = vadd_f32(vmul_f32(*(float32x2_t *)v98.f32, *(float32x2_t *)v98.f32), *(float32x2_t *)v123.i8);
          *(int8x8_t *)v58.f32 = vext_s8(*(int8x8_t *)v123.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL), 4uLL);
          v58.i64[1] = vextq_s8(v121, v123, 0xCuLL).u64[0];
          v124 = *((float32x4_t *)v11 + 38);
          v125 = *((float32x4_t *)v11 + 39);
          v126 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v58), v124), v14), v17);
          v127 = (float32x4_t)vbslq_s8(v24, v121, (int8x16_t)vmulq_f32(v126, vrecpsq_f32(v58, v126)));
          v128 = v122;
          v128.i32[3] = 0;
          v129 = vsubq_f32(v104, v128);
          v83.i64[1] = vminq_f32(vmaxq_f32(vmulq_laneq_f32((float32x4_t)vzip2q_s64(*(int64x2_t *)&v129, *(int64x2_t *)&v127), v127, 2), v381), v89).i64[1];
          v130 = (float32x4_t)vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL);
          v131 = (int64x2_t)vsubq_f32(v130, v128);
          v132 = (float32x4_t)vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL);
          v15.i64[0] = vextq_s8((int8x16_t)v131, (int8x16_t)v132, 0xCuLL).u64[0];
          v15.i64[1] = vextq_s8((int8x16_t)v129, vextq_s8((int8x16_t)v131, (int8x16_t)v131, 8uLL), 0xCuLL).u64[0];
          v133 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_laneq_f32(v15, v129, 3), (int8x16_t)v83);
          v134 = (float32x4_t)vzip2q_s64(v131, (int64x2_t)v129);
          v135 = (int8x16_t)vmulq_f32((float32x4_t)vzip2q_s64((int64x2_t)v129, v131), v134);
          v136 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v134, v129, 2), v133), (int8x16_t)v83);
          v137 = vminq_f32(vmaxq_f32(vrecpeq_f32(v136), v124), v17);
          v138 = vminq_f32(vmaxq_f32(vmulq_f32(v137, vrecpsq_f32(v136, v137)), v124), v17);
          v139 = (int32x4_t)vbslq_s8(v24, (int8x16_t)vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v138, vrecpsq_f32(v136, v138)), (float32x4_t)vzip2q_s64((int64x2_t)v129, (int64x2_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v135.i64[0], 0), (float32x4_t)vextq_s8(v135, v135, 0xCuLL)))), v44), v89), (int8x16_t)v83);
          v140 = (float32x4_t)vdupq_laneq_s32(v139, 3);
          *(float32x2_t *)v140.f32 = vadd_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v140, (int8x16_t)v140, 8uLL), *(float32x2_t *)v98.f32), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v104, (int8x16_t)v104, 8uLL));
          *(int8x8_t *)v83.f32 = vext_s8(*(int8x8_t *)v140.f32, *(int8x8_t *)v132.f32, 4uLL);
          v83.i64[1] = v83.i64[0];
          v141 = (float32x4_t)vzip2q_s64((int64x2_t)v129, (int64x2_t)v83);
          v142 = (int8x16_t)vnegq_f32(v141);
          v143 = (float32x4_t)vbslq_s8(v24, vextq_s8(v142, v142, 0xCuLL), (int8x16_t)v141);
          v144 = vextq_s8((int8x16_t)v139, (int8x16_t)v143, 0xCuLL);
          v144.i64[0] = v104.i64[0];
          v145 = (int8x16_t)vnegq_f32(v143);
          v146 = vbslq_s8(v31, vextq_s8(v145, v145, 4uLL), v144);
          v147 = (int8x16_t)vceqq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v143.f32, 0), v125);
          *(int8x8_t *)v143.f32 = vbsl_s8((int8x8_t)*(_OWORD *)&vextq_s8(v147, v147, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8(v146, v146, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v143, (int8x16_t)v143, 8uLL));
          v148 = (int8x16_t)vdupq_laneq_s32(v139, 2);
          *(float32x2_t *)v140.f32 = vsub_f32(*(float32x2_t *)v140.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v130, (int8x16_t)v130, 8uLL));
          *(float32x2_t *)v148.i8 = vsub_f32(vadd_f32(*(float32x2_t *)v130.f32, vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v148, v148, 8uLL), *(float32x2_t *)v132.f32)), *(float32x2_t *)v122.f32);
          v132.i64[0] = v148.i64[0];
          v132.i64[1] = v140.i64[0];
          *(int8x8_t *)v44.f32 = vqtbl1_s8((int8x16_t)v132, *(int8x8_t *)v390.i8);
          v385 = (int8x8_t)vextq_s8(v390, v390, 8uLL).u64[0];
          *(int8x8_t *)&v44.u32[2] = vqtbl1_s8((int8x16_t)v132, v385);
          *(float32x2_t *)v130.f32 = vmul_f32(*(float32x2_t *)v143.f32, *(float32x2_t *)v143.f32);
          *(float32x2_t *)v130.f32 = vadd_f32(*(float32x2_t *)v130.f32, (float32x2_t)vrev64_s32(*(int32x2_t *)v130.f32));
          v149 = vmulq_f32(v132, v132);
          v150 = vextq_s8((int8x16_t)v139, (int8x16_t)v149, 0xCuLL);
          *(float32x2_t *)&v130.u32[2] = vadd_f32(vmul_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v148.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v150, v150, 8uLL));
          v152 = *((int8x16_t *)v11 + 40);
          v151 = *((float32x4_t *)v11 + 41);
          *(int8x8_t *)v122.f32 = vqtbl1_s8((int8x16_t)v130, *(int8x8_t *)v152.i8);
          *(int8x8_t *)&v122.u32[2] = vqtbl1_s8((int8x16_t)v130, (int8x8_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL));
          v153 = (int8x16_t)vaddq_f32(vmulq_f32(v44, v44), (float32x4_t)vuzp2q_s32((int32x4_t)v149, (int32x4_t)v149));
          v154 = vminq_f32(vrsqrteq_f32(v122), v125);
          v155 = vminq_f32(vmulq_f32(v154, vrsqrtsq_f32(vmulq_f32(v154, v122), v154)), v125);
          *(float32x2_t *)v155.f32 = vmul_f32(*(float32x2_t *)v155.f32, (float32x2_t)*(_OWORD *)&vrsqrtsq_f32(vmulq_f32(v122, v155), v155));
          *(float32x2_t *)v143.f32 = vmul_f32(vmul_lane_f32(*(float32x2_t *)v148.i8, *(float32x2_t *)v155.f32, 1), vmul_n_f32(*(float32x2_t *)v143.f32, v155.f32[0]));
          *(float32x2_t *)v143.f32 = vadd_f32(*(float32x2_t *)v143.f32, (float32x2_t)vrev64_s32(*(int32x2_t *)v143.f32));
          v143.i64[1] = v140.i64[0];
          *(int8x8_t *)v140.f32 = vext_s8(*(int8x8_t *)v139.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL), 4uLL);
          v140.i64[1] = vextq_s8(v153, (int8x16_t)v139, 0xCuLL).u64[0];
          v156 = vminq_f32(vrsqrteq_f32(v140), v125);
          v157 = vminq_f32(vmulq_f32(v156, vrsqrtsq_f32(vmulq_f32(v156, v140), v156)), v125);
          v158 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v157, vrsqrtsq_f32(vmulq_f32(v157, v140), v157)), v125), v140), (int8x16_t)v143);
          v159 = vmulq_f32(v158, v158);
          v157.i64[0] = vextq_s8((int8x16_t)v159, (int8x16_t)v159, 0xCuLL).u64[0];
          v157.i64[1] = v157.i64[0];
          v160 = vaddq_f32(v159, v157);
          v157.i64[0] = vmulq_lane_f32(v158, *(float32x2_t *)v158.f32, 1).u64[0];
          v157.i64[1] = v160.i64[1];
          v161 = (float32x4_t)vextq_s8(v153, (int8x16_t)v139, 8uLL);
          v162 = vminq_f32(vrsqrteq_f32(v161), v125);
          v163 = vminq_f32(vmulq_f32(v162, vrsqrtsq_f32(vmulq_f32(v162, v161), v162)), v125);
          v164 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v163, vrsqrtsq_f32(vmulq_f32(v163, v161), v163)), v125), v161), (int8x16_t)v157);
          v165 = vminq_f32(vrsqrteq_f32(v164), v17);
          v166 = vmulq_f32(v165, vrsqrtsq_f32(vmulq_f32(v165, v164), v165));
          v165.i64[0] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
          v146.u64[1] = (unint64_t)vext_s8(*(int8x8_t *)v165.f32, *(int8x8_t *)v98.f32, 4uLL);
          v167 = (int32x4_t)vnegq_f32(v119);
          v168 = (int64x2_t)vbslq_s8(v24, vextq_s8((int8x16_t)v167, (int8x16_t)v167, 0xCuLL), v146);
          v169 = vminq_f32(v166, v17);
          v170 = (int8x16_t)vdupq_laneq_s32((int32x4_t)vmulq_f32(v169, vrsqrtsq_f32(vmulq_f32(v169, v164), v169)), 2);
          *(float32x2_t *)v158.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL));
          *(int32x2_t *)v170.i8 = vrev64_s32(*(int32x2_t *)v98.f32);
          v170.i64[1] = v158.i64[0];
          v171 = vbslq_s8(v59, (int8x16_t)vrev64q_s32(v167), v170);
          v118.i64[0] = vbslq_s8((int8x16_t)vceqq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 2), v124), v171, (int8x16_t)vdupq_laneq_s64(v168, 1)).u64[0];
          v118.i64[1] = v171.i64[1];
          v167.i64[0] = vmulq_f32(v118, v118).u64[0];
          v172 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v167.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v167.i8, 1));
          v173 = vminq_f32(vmulq_f32(v97, vrsqrteq_f32(v172)), v125);
          v174 = (int8x16_t)vmulq_f32(vmulq_f32(v173, vrsqrtsq_f32(vmulq_f32(v173, v172), v173)), v118);
          v172.i64[0] = v174.i64[0];
          v172.i64[1] = v171.i64[1];
          v175 = vmulq_f32(v172, (float32x4_t)vextq_s8(v171, v174, 8uLL));
          v176 = *((float32x4_t *)v11 + 5);
          v177 = vminq_f32(vmaxq_f32(vmulq_f32(v391, vrecpeq_f32(v176)), v124), v17);
          v178 = vmulq_f32(v177, vrecpsq_f32(v176, v177));
          v173.i64[0] = v139.i64[0];
          v173.i64[1] = v178.i64[1];
          v168.i64[1] = vmulq_f32(v381, v178).i64[1];
          v179 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(*((float32x4_t *)v11 + 7), (float32x4_t)vextq_s8((int8x16_t)v178, (int8x16_t)v139, 8uLL)), (int8x16_t)v168);
          v180 = vminq_f32(vmaxq_f32(vrecpeq_f32(v179), v124), v17);
          v181 = vminq_f32(vmaxq_f32(vmulq_f32(v180, vrecpsq_f32(v179, v180)), v124), v17);
          v182 = (int64x2_t)vmulq_laneq_f32(vmulq_f32(v181, vrecpsq_f32(v179, v181)), v179, 3);
          v178.i64[0] = v164.i64[0];
          v178.i64[1] = v182.i64[1];
          v183 = vcvtq_f32_s32(vcvtq_s32_f32(v178));
          v184 = (int64x2_t)vsubq_f32(v183, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v183, v178), (int8x16_t)v89, (int8x16_t)0));
          v175.i64[0] = vmulq_n_f32(v164, vaddq_f32(v175, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v175.f32, 1)).f32[0]).u64[0];
          v183.i64[0] = v175.i64[0];
          v175.i64[1] = vdupq_laneq_s64(v184, 1).u64[0];
          v183.i64[1] = v184.i64[1];
          v164.i64[1] = vdupq_laneq_s64(v182, 1).u64[0];
          v185 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v164), v183), vbslq_s8(v31, (int8x16_t)vsubq_f32(v179, vmulq_laneq_f32((float32x4_t)vrev64q_s32((int32x4_t)v175), v179, 2)), (int8x16_t)v173));
          v186 = (int32x4_t)vmulq_f32(v151, v185);
          v187 = vmulq_f32(v151, (float32x4_t)vrev64q_s32(v186));
          v188 = vcvtq_f32_s32(vcvtq_s32_f32(v187));
          v189 = vsubq_f32(v187, vsubq_f32(v188, (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v188, v187))));
          v190 = vmulq_f32(v151, (float32x4_t)vrev64q_s32((int32x4_t)v179));
          v191 = vcvtq_f32_s32(vcvtq_s32_f32(v190));
          v192 = vsubq_f32(v190, vsubq_f32(v191, (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v191, v190))));
          v193 = vsubq_f32(vabdq_f32(v189, v23), v97);
          v194 = vmulq_f32(v193, v193);
          v195 = vsubq_f32(vabdq_f32(v192, v23), v97);
          v196 = vmulq_f32(v195, v195);
          v197 = (int8x16_t)vmulq_f32(v195, vaddq_f32(v88, vmulq_f32(v196, vaddq_f32(v87, vmulq_f32(v196, vaddq_f32(v389, vmulq_f32(v86, v196)))))));
          v198 = (int8x16_t)vmulq_f32(v193, vaddq_f32(v88, vmulq_f32(v194, vaddq_f32(v87, vmulq_f32(v194, vaddq_f32(v389, vmulq_f32(v86, v194)))))));
          v199 = vaddq_f32(v97, vmulq_f32(v96, (float32x4_t)vbslq_s8(v24, (int8x16_t)v186, v197)));
          v200 = vcvtq_f32_s32(vcvtq_s32_f32(v199));
          v201 = vaddq_f32(v97, vabdq_f32(vsubq_f32(v199, vsubq_f32(v200, (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v200, v199)))), v88));
          v202 = vmulq_f32(v201, v201);
          v203 = (int8x16_t)vmulq_f32(v201, vaddq_f32(v381, vmulq_f32(v202, vaddq_f32(v76, vmulq_f32(v202, vaddq_f32(v87, vmulq_f32(v86, v202)))))));
          v204 = vmulq_f32(v151, (float32x4_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 0xCuLL));
          v205 = vcvtq_f32_s32(vcvtq_s32_f32(v204));
          v206 = vsubq_f32(vabdq_f32(vsubq_f32(v204, vsubq_f32(v205, (float32x4_t)vandq_s8((int8x16_t)v87, (int8x16_t)vcgtq_f32(v205, v204)))), v86), v76);
          v207 = vmulq_f32(v206, v206);
          v208 = vbslq_s8(v24, v203, v197);
          v203.i64[0] = vmulq_f32(v206, vaddq_f32(v96, vmulq_f32(v207, vaddq_f32(v89, vmulq_f32(v207, vaddq_f32(v383, vmulq_f32(v382, v207))))))).u64[0];
          v209 = (float32x4_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 8uLL);
          v210 = vaddq_f32(v151, vmulq_f32(v89, v209));
          v211 = vcvtq_f32_s32(vcvtq_s32_f32(v210));
          v212 = vbslq_s8(v24, (int8x16_t)v186, v198);
          v203.i64[1] = v208.i64[1];
          v213 = vbslq_s8(v16, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8(v212, v212, 0xCuLL), v29, 3), (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8(v208, v208, 4uLL), v29, 3));
          v214 = vaddq_f32(v151, vabdq_f32(vsubq_f32(v210, vsubq_f32(v211, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v211, v210)))), v87));
          v215 = vmulq_f32(v214, v214);
          v216 = vbslq_s8(v59, (int8x16_t)vmulq_f32(v214, vaddq_f32(v382, vmulq_f32(v215, vaddq_f32(v383, vmulq_f32(v215, vaddq_f32(v86, vmulq_f32(v76, v215))))))), v203);
          v217 = vaddq_f32(v97, vmulq_f32(v96, v179));
          v218 = vcvtq_f32_s32(vcvtq_s32_f32(v217));
          v219 = vaddq_f32(v97, vabdq_f32(vsubq_f32(v217, vsubq_f32(v218, (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgtq_f32(v218, v217)))), v88));
          v220 = vmulq_f32(v219, v219);
          v221 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_laneq_f32(*((float32x4_t *)v11 + 9), v29, 3), v216);
          v179.i64[1] = vmulq_laneq_f32((float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v219, vaddq_f32(v381, vmulq_f32(v220, vaddq_f32(v76, vmulq_f32(v220, vaddq_f32(v87, vmulq_f32(v86, v220)))))))), v221, 2).i64[1];
          v222 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_laneq_f32(v221, v221, 3), (int8x16_t)v179);
          v223 = vsubq_f32(v222, (float32x4_t)vdupq_lane_s64(v213.i64[0], 0));
          v215.i64[0] = v213.i64[0];
          v215.i64[1] = v223.i64[1];
          v224 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v215, v215), (int8x16_t)v221);
          v76.i64[0] = vmulq_laneq_f32(v224, v384, 3).u64[0];
          v76.i64[1] = v224.i64[1];
          v86.i64[0] = v222.i64[0];
          *(float32x2_t *)&v86.u32[2] = vsub_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v213.i8);
          v225 = vmulq_f32(v215, v86);
          v220.i64[0] = v213.i64[0];
          v220.i64[1] = vdupq_laneq_s64((int64x2_t)v223, 1).u64[0];
          v226 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vaddq_f32(vmulq_laneq_f32((float32x4_t)vrev64q_s32((int32x4_t)v220), v223, 2), v76), (int8x16_t)v76);
          v227 = (float32x4_t)vextq_s8((int8x16_t)v226, (int8x16_t)v226, 0xCuLL);
          v228 = vminq_f32(vmaxq_f32(vrecpeq_f32(v227), v14), v17);
          v229 = vminq_f32(vmaxq_f32(vmulq_f32(v228, vrecpsq_f32(v227, v228)), v14), v17);
          v230 = vmulq_laneq_f32(vmulq_f32(v229, vrecpsq_f32(v227, v229)), vaddq_f32(v225, (float32x4_t)vdupq_laneq_s32((int32x4_t)v225, 3)), 2);
          v231 = (float32x4_t)vextq_s8((int8x16_t)v223, v213, 8uLL);
          v232 = v226;
          v232.i32[3] = 0;
          v233 = (int8x16_t)vsubq_f32(vaddq_f32(v215, vmulq_n_f32(v231, vminq_f32(vmaxq_f32(v230, v124), v87).f32[0])), v232);
          v210.i64[0] = v233.i64[0];
          v210.i64[1] = v223.i64[1];
          v234 = (int8x16_t)vnegq_f32(v210);
          v235 = (int64x2_t)vbslq_s8(*((int8x16_t *)v11 + 43), vextq_s8(v234, v234, 4uLL), vextq_s8((int8x16_t)v210, (int8x16_t)v210, 0xCuLL));
          v215.i64[0] = vbslq_s8((int8x16_t)vceqq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v223, 2), v124), (int8x16_t)v235, (int8x16_t)vdupq_laneq_s64(v235, 1)).u64[0];
          v236 = vsubq_f32(v231, v232);
          *(int8x8_t *)v235.i8 = vext_s8(*(int8x8_t *)v222.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v236, (int8x16_t)v236, 8uLL), 4uLL);
          v211.i64[0] = vextq_s8((int8x16_t)v236, (int8x16_t)v222, 0xCuLL).u64[0];
          v211.i64[1] = v235.i64[0];
          v237 = (float32x4_t)vextq_s8((int8x16_t)v236, (int8x16_t)v222, 8uLL);
          v238 = vaddq_f32(vmulq_laneq_f32(v211, v236, 3), vmulq_laneq_f32(v237, v236, 2));
          v149.i64[0] = vsubq_f32(v226, (float32x4_t)vdupq_laneq_s64((int64x2_t)v232, 1)).u64[0];
          v149.i64[1] = v223.i64[1];
          v239 = vmulq_f32(v237, v149);
          v239.i64[0] = vaddq_f32(v239, (float32x4_t)vrev64q_s32((int32x4_t)v239)).u64[0];
          v240 = vminq_f32(vmaxq_f32(vrecpeq_f32(v238), v14), v17);
          v241 = vminq_f32(vmaxq_f32(vmulq_f32(v240, vrecpsq_f32(v238, v240)), v14), v17);
          v239.i64[1] = v223.i64[1];
          v242 = (int64x2_t)vaddq_f32(v232, vmulq_n_f32(v236, vminq_f32(vmaxq_f32(vmulq_f32(vmulq_f32(v241, vrecpsq_f32(v238, v241)), v239), v124), v87).f32[0]));
          v223.i64[0] = vextq_s8((int8x16_t)v223, v233, 0xCuLL).u64[0];
          v223.i64[1] = v223.i64[0];
          *(int8x8_t *)v232.f32 = vext_s8(*(int8x8_t *)v165.f32, (int8x8_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v233.i8, *(float32x2_t *)v233.i8), 1), 4uLL);
          v232.i64[1] = v232.i64[0];
          v243 = vaddq_f32(v232, vmulq_n_f32(v223, *(float *)v233.i32));
          v244 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_laneq_s64(v242, 1), v226);
          v232.i64[0] = vextq_s8((int8x16_t)v243, v244, 0xCuLL).u64[0];
          *(int8x8_t *)&v232.u32[2] = vext_s8(*(int8x8_t *)v244.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v243, (int8x16_t)v243, 8uLL), 4uLL);
          v244.i64[1] = v243.i64[1];
          v235.i64[1] = v165.i64[0];
          v243.i64[0] = v222.i64[0];
          v243.i64[1] = v236.i64[1];
          v245 = (int32x4_t)vnegq_f32(v243);
          v246 = (float32x4_t)vbslq_s8(v16, vextq_s8((int8x16_t)v245, (int8x16_t)v245, 0xCuLL), (int8x16_t)v235);
          v247 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_lane_f32(v232, *(float32x2_t *)v244.i8, 1), v244);
          v248 = (float32x4_t)vextq_s8((int8x16_t)v247, (int8x16_t)v247, 8uLL);
          v249 = vminq_f32(vrsqrteq_f32(v248), v125);
          v250 = (int8x16_t)vaddq_f32(vmulq_f32(v247, v247), v248);
          v251 = vminq_f32(vmulq_f32(v249, vrsqrtsq_f32(vmulq_f32(v249, v248), v249)), v125);
          v252 = (int8x16_t)vmulq_f32(v251, vrsqrtsq_f32(vmulq_f32(v251, v248), v251));
          v253 = (int8x16_t)vrev64q_s32((int32x4_t)v236);
          v253.i64[0] = v247.i64[0];
          v254 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vrev64q_s32(v245), v253);
          v255 = (float32x4_t)vbslq_s8((int8x16_t)vceqq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v236, 2), v125), (int8x16_t)v254, (int8x16_t)vdupq_lane_s64(v246.i64[0], 0));
          v247.i64[0] = vextq_s8((int8x16_t)v255, (int8x16_t)v255, 8uLL).u64[0];
          *(float32x2_t *)v236.f32 = vmul_f32(*(float32x2_t *)v254.f32, *(float32x2_t *)v254.f32);
          *(int8x8_t *)v247.f32 = vext_s8((int8x8_t)vmul_f32(*(float32x2_t *)v247.f32, *(float32x2_t *)v247.f32), *(int8x8_t *)v236.f32, 4uLL);
          v247.i64[1] = v247.i64[0];
          *(float32x2_t *)v236.f32 = vadd_f32(*(float32x2_t *)v236.f32, (float32x2_t)vrev64_s32(*(int32x2_t *)v236.f32));
          v222.i64[1] = vaddq_f32(vmulq_f32(v255, v255), v247).i64[1];
          v247.i64[0] = vextq_s8((int8x16_t)v246, (int8x16_t)v246, 8uLL).u64[0];
          *(int8x8_t *)v238.f32 = vext_s8(*(int8x8_t *)v247.f32, *(int8x8_t *)v236.f32, 4uLL);
          *(int8x8_t *)v247.f32 = vext_s8(*(int8x8_t *)v236.f32, *(int8x8_t *)v247.f32, 4uLL);
          v247.i64[1] = v238.i64[0];
          v256 = vminq_f32(vrsqrteq_f32(v247), v41);
          v257 = vminq_f32(vmulq_f32(v256, vrsqrtsq_f32(vmulq_f32(v256, v247), v256)), v41);
          v258 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v257, vrsqrtsq_f32(vmulq_f32(v257, v247), v257)), (int8x16_t)v222);
          v259 = vminq_f32(vmulq_f32(v391, vrsqrteq_f32(v258)), v17);
          v260 = vmulq_f32(v210, v210);
          v260.i64[0] = vaddq_f32(v260, (float32x4_t)vextq_s8((int8x16_t)v260, (int8x16_t)v258, 4uLL)).u64[0];
          v261 = (int32x4_t)vbslq_s8(v24, (int8x16_t)vmulq_f32(v259, vrsqrtsq_f32(vmulq_f32(v259, v258), v259)), (int8x16_t)v258);
          v258.i64[0] = v261.i64[0];
          v258.i64[1] = v260.i64[0];
          v262 = (float32x4_t)vrev64q_s32((int32x4_t)v258);
          v263 = vminq_f32(vrsqrteq_f32(v262), v41);
          v264 = vminq_f32(vmulq_f32(v263, vrsqrtsq_f32(vmulq_f32(v263, v262), v263)), v41);
          v265 = vmulq_f32(v264, vrsqrtsq_f32(vmulq_f32(v264, v262), v264));
          v215.i64[1] = v265.i64[1];
          v264.i64[0] = vmulq_f32(v215, v215).u64[0];
          v266 = (int32x4_t)vbslq_s8(v16, v250, v252);
          v267 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v264.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v264.f32, 1));
          v268 = vmulq_f32(v97, vrsqrteq_f32(v267));
          v8 = 0uLL;
          v269 = vminq_f32(v268, v125);
          v270 = (int8x16_t)vmulq_f32(vmulq_f32(v269, vrsqrtsq_f32(vmulq_f32(v269, v267), v269)), v215);
          v271 = (int8x16_t)vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v233.i64[0], 0), v265, 3);
          v272 = (float32x4_t)vextq_s8(v271, v270, 8uLL);
          v267.i64[0] = v270.i64[0];
          v267.i64[1] = v271.i64[1];
          v273 = (float32x4_t)vrev64q_s32(v266);
          v274 = vmulq_f32(v267, v272);
          v275 = (int8x16_t)vaddq_f32(v274, (float32x4_t)vrev64q_s32((int32x4_t)v274));
          *(int8x8_t *)v272.f32 = vext_s8(*(int8x8_t *)v275.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL), 4uLL);
          v267.i64[0] = vextq_s8((int8x16_t)v186, v275, 0xCuLL).u64[0];
          v275.i64[1] = v186.i64[1];
          v272.i64[1] = v267.i64[0];
          v276 = (int8x16_t)vsubq_f32(v209, v272);
          v277 = vminq_f32(vmaxq_f32(vrecpeq_f32(v273), v14), v17);
          v278 = (float32x4_t)vbslq_s8(v59, v276, v275);
          v279 = vminq_f32(vmaxq_f32(vmulq_f32(v277, vrecpsq_f32(v273, v277)), v14), v17);
          v280 = (int8x16_t)vmulq_f32(vmulq_f32(v279, vrecpsq_f32(v273, v279)), v278);
          v281 = (float32x4_t)vbslq_s8(v16, v280, (int8x16_t)v278);
          v283 = *((float32x4_t *)v11 + 44);
          v282 = *((float32x4_t *)v11 + 45);
          v284 = vmulq_f32(v283, v281);
          v285 = vcvtq_f32_s32(vcvtq_s32_f32(v284));
          v286 = *((float32x4_t *)v11 + 42);
          v287 = vsubq_f32(vabdq_f32(vsubq_f32(v284, vsubq_f32(v285, (float32x4_t)vandq_s8((int8x16_t)v41, (int8x16_t)vcgtq_f32(v285, v284)))), v14), v389);
          v288 = vmulq_f32(v287, v287);
          v289 = *((float32x4_t *)v11 + 46);
          v290 = *((float32x4_t *)v11 + 47);
          v17.i64[0] = vextq_s8((int8x16_t)v286, (int8x16_t)v286, 8uLL).u64[0];
          v291 = (int8x16_t)vmulq_f32(v287, vaddq_f32(v381, vmulq_f32(v288, vaddq_f32(v290, vmulq_f32(v288, vaddq_f32(v282, vmulq_f32(v289, v288)))))));
          v292 = (int64x2_t)vrev64q_s32((int32x4_t)vsubq_f32(v246, v384));
          v14.i64[1] = v292.i64[1];
          v14.i64[0] = v261.i64[0];
          v293 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vsubq_f32(v386, (float32x4_t)vextq_s8((int8x16_t)v292, (int8x16_t)v261, 8uLL)), vbslq_s8(v16, v280, v291));
          v294 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vmulq_laneq_f32(v293, v384, 3), (int8x16_t)v293);
          v295 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vsubq_f32(vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v294, (int8x16_t)v294, 4uLL), v246, 3), v294), (int8x16_t)v293);
          *(int8x8_t *)v210.f32 = vqtbl1_s8((int8x16_t)v261, *(int8x8_t *)v286.f32);
          *(int8x8_t *)v41.f32 = vqtbl1_s8((int8x16_t)v261, *(int8x8_t *)v17.f32);
          v261.i64[1] = vdupq_laneq_s64(v292, 1).u64[0];
          v296 = (int8x16_t)vsubq_f32(*(float32x4_t *)v11, v14);
          v297 = (int32x4_t)vbslq_s8(v24, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v292, (int8x16_t)vminq_f32(v14, (float32x4_t)vrev64q_s32(v261)), 8uLL), (float32x4_t)vbslq_s8(v24, vextq_s8(v296, v296, 8uLL), (int8x16_t)v295)), (int8x16_t)v295);
          v298 = vextq_s8((int8x16_t)v282, (int8x16_t)v384, 0xCuLL);
          v292.i64[0] = vminq_f32((float32x4_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 8uLL), (float32x4_t)vextq_s8((int8x16_t)v297, (int8x16_t)v297, 0xCuLL)).u64[0];
          *(float32x2_t *)v295.f32 = vmul_n_f32((float32x2_t)*(_OWORD *)&vextq_s8(v298, v298, 8uLL), v384.f32[0]);
          *(int8x8_t *)v298.i8 = vext_s8(*(int8x8_t *)v295.f32, *(int8x8_t *)v297.i8, 4uLL);
          *(int8x8_t *)v295.f32 = vext_s8(*(int8x8_t *)v297.i8, *(int8x8_t *)v295.f32, 4uLL);
          v295.i64[1] = v298.i64[0];
          v299 = vcvtq_f32_s32(vcvtq_s32_f32(v295));
          v241.i64[0] = v297.i64[0];
          v241.i64[1] = vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v384, (int8x16_t)v384, 0xCuLL), v246, 2).u64[0];
          v300 = (float32x4_t)vrev64q_s32((int32x4_t)v241);
          v301 = vcvtq_f32_s32(vcvtq_s32_f32(v300));
          v302 = (int8x16_t)vsubq_f32(v299, (float32x4_t)vandq_s8((int8x16_t)v88, (int8x16_t)vcgtq_f32(v299, v295)));
          v303 = (int64x2_t)vsubq_f32(v301, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v301, v300), (int8x16_t)v89, (int8x16_t)0));
          v300.i64[0] = v297.i64[0];
          v300.i64[1] = v303.i64[1];
          v304 = vbslq_s8(v59, v302, (int8x16_t)v292);
          v305 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v290, (float32x4_t)vextq_s8(v304, v304, 8uLL)), v304);
          v297.i64[1] = vdupq_laneq_s64(v303, 1).u64[0];
          v306 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vmulq_f32(v290, (float32x4_t)vrev64q_s32(v297)), (int8x16_t)v300);
          v307 = vcvtq_f32_s32(vcvtq_s32_f32(v305));
          v308 = vcvtq_f32_s32(vcvtq_s32_f32(v306));
          v309 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vsubq_f32(v308, (float32x4_t)vandq_s8((int8x16_t)v289, (int8x16_t)vcgtq_f32(v308, v306))), (int8x16_t)v300);
          v310 = (float32x4_t)vbslq_s8(v31, (int8x16_t)vsubq_f32(v307, (float32x4_t)vandq_s8((int8x16_t)v289, (int8x16_t)vcgtq_f32(v307, v305))), v304);
          v311 = *((float32x4_t *)v11 + 48);
          v309.i64[1] = vsubq_f32(v309, vmulq_laneq_f32(v311, v309, 3)).i64[1];
          v312 = vbslq_s8(v59, (int8x16_t)vsubq_f32(v310, vmulq_laneq_f32(v311, v310, 3)), (int8x16_t)v310);
          v313 = vbslq_s8(v31, (int8x16_t)vabsq_f32((float32x4_t)vextq_s8(v312, v312, 8uLL)), (int8x16_t)v309);
          v308.i64[0] = vextq_s8(*((int8x16_t *)v11 + 49), *((int8x16_t *)v11 + 49), 8uLL).u64[0];
          v300.i64[0] = v313.i64[0];
          *(int8x8_t *)&v300.u32[2] = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v313, v313, 8uLL), *(int8x8_t *)v308.f32);
          v314 = (float32x4_t)vandq_s8((int8x16_t)v89, (int8x16_t)vcgeq_f32(vnegq_f32(v300), v125));
          v313.i64[1] = vsubq_f32(v314, (float32x4_t)vrev64q_s32(*(int32x4_t *)&v314)).i64[1];
          v315 = *((float32x4_t *)v11 + 3);
          v316 = vbslq_s8(v31, (int8x16_t)vabsq_f32((float32x4_t)vextq_s8((int8x16_t)v315, (int8x16_t)v315, 4uLL)), v313);
          *(int8x8_t *)v89.f32 = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v316, v316, 8uLL), *(int8x8_t *)v308.f32);
          v308.i64[0] = v316.i64[0];
          v308.i64[1] = v89.i64[0];
          v317 = (int8x16_t)vnegq_f32(v308);
          *(int8x8_t *)v286.f32 = vqtbl1_s8(v317, *(int8x8_t *)v286.f32);
          *(int8x8_t *)&v286.u32[2] = vqtbl1_s8(v317, *(int8x8_t *)v17.f32);
          v254.i64[1] = v255.i64[1];
          v318 = *((float32x4_t *)v11 + 50);
          v319 = *((float32x4_t *)v11 + 51);
          v320 = *((int8x16_t *)v11 + 52);
          v321 = (float32x4_t)vbslq_s8(v320, v312, vandq_s8((int8x16_t)v319, (int8x16_t)vcgeq_f32(v286, v318)));
          v322 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v321, (int8x16_t)v321, 8uLL), vmulq_laneq_f32(v321, v321, 3)), (int8x16_t)v321);
          v323 = (int8x16_t)vrev64q_s32((int32x4_t)v321);
          v324 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32(vminq_f32((float32x4_t)vextq_s8((int8x16_t)v321, (int8x16_t)v321, 4uLL), (float32x4_t)vextq_s8(v323, v323, 8uLL)), v319), (int8x16_t)vdupq_lane_s64(v322.i64[0], 0), (int8x16_t)v319);
          v323.i64[0] = vandq_s8((int8x16_t)v319, (int8x16_t)vceqq_f32(v315, v319)).u64[0];
          v29.i64[0] = v323.i64[0];
          v29.i64[1] = vdupq_laneq_s64(v324, 1).u64[0];
          v323.i64[1] = v324.i64[1];
          v210.i64[1] = v41.i64[0];
          v325 = (int32x4_t)vbslq_s8(v59, (int8x16_t)vminq_f32(v322, (float32x4_t)vrev64q_s32((int32x4_t)v29)), v323);
          v326 = (float32x4_t)vrev64q_s32((int32x4_t)v322);
          v325.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v325, *(int8x16_t *)&v325, 8uLL), v318), *(int8x16_t *)&v326, (int8x16_t)vrev64q_s32(v325)).i64[1];
          v327 = vmulq_f32(v210, v254);
          v328 = (float32x4_t)vandq_s8(vbslq_s8(v59, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v315), v311), (int8x16_t)v325), *((int8x16_t *)v11 + 53));
          v210.i64[0] = vandq_s8((int8x16_t)v319, (int8x16_t)vcgeq_f32(vnegq_f32(v328), v318)).u64[0];
          v210.i64[1] = v328.i64[1];
          v329 = vbslq_s8(v16, (int8x16_t)vminq_f32(v326, v210), (int8x16_t)v210);
          v330 = (float32x4_t)vbslq_s8(v24, (int8x16_t)vminq_f32((float32x4_t)vextq_s8(v329, v329, 8uLL), (float32x4_t)vextq_s8(v329, v329, 0xCuLL)), v329);
          v331 = *((float32x4_t *)v11 + 4);
          v316.u64[1] = (unint64_t)vand_s8((int8x8_t)vsub_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v331.f32, 0), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v311, (int8x16_t)v311, 8uLL)), v388);
          v332 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32(v330, v319), vextq_s8((int8x16_t)v282, v316, 0xCuLL), (int8x16_t)vrev64q_s32((int32x4_t)v330));
          v333 = vminq_f32(vrsqrteq_f32(v273), v125);
          v334 = vmulq_f32(v327, (float32x4_t)vextq_s8((int8x16_t)v327, (int8x16_t)v327, 8uLL));
          v335 = vminq_f32(vmulq_f32(v333, vrsqrtsq_f32(vmulq_f32(v333, v273), v333)), v125);
          v336 = (float32x4_t)vbslq_s8(v16, (int8x16_t)vaddq_f32(v334, (float32x4_t)vrev64q_s32((int32x4_t)v334)), (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v335, vrsqrtsq_f32(vmulq_f32(v335, v273), v335)), v125), v273));
          v330.i64[0] = vsubq_f32(vmulq_lane_f32(v330, *(float32x2_t *)v330.f32, 1), v330).u64[0];
          v337 = (int8x16_t)vdupq_laneq_s64(v332, 1);
          v330.i64[1] = v337.i64[0];
          v338 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32((int32x4_t)v330), (float32x4_t)vbslq_s8(v59, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8((int8x16_t)v319, (int8x16_t)vceqq_f32(v315, v311))), v316)), v316);
          v336.i64[0] = vmulq_lane_f32(v336, *(float32x2_t *)v336.f32, 1).u64[0];
          v336.i64[1] = v246.i64[1];
          v339 = (int32x4_t)vbslq_s8(v16, (int8x16_t)vminq_f32(v336, v338), (int8x16_t)v338);
          v338.i64[0] = vbslq_s8((int8x16_t)vcgtq_f32(v318, (float32x4_t)vrev64q_s32(v339)), (int8x16_t)v339, v337).u64[0];
          v340 = vmulq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v384, 1), v290);
          v338.i64[1] = v339.i64[1];
          v341 = (float32x4_t)vbslq_s8(v59, vandq_s8((int8x16_t)v319, (int8x16_t)vcgeq_f32((float32x4_t)vrev64q_s32((int32x4_t)vorrq_s8((int8x16_t)v331, v390)), v318)), (int8x16_t)v338);
          v342 = (int32x4_t)vbslq_s8(v31, (int8x16_t)vsubq_f32(v319, v322), (int8x16_t)v322);
          v343 = (float32x4_t)vbslq_s8(v320, (int8x16_t)v341, vandq_s8((int8x16_t)v319, (int8x16_t)vcgeq_f32(vnegq_f32(v341), v318)));
          v344 = (int8x16_t)vminq_f32((float32x4_t)vrev64q_s32(v342), (float32x4_t)vextq_s8((int8x16_t)v341, (int8x16_t)v341, 0xCuLL));
          v345 = (float32x4_t)vextq_s8(v344, (int8x16_t)v340, 8uLL);
          v340.i64[1] = v344.i64[1];
          v346 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v342, (int8x16_t)v342, 8uLL), v343), (int8x16_t)v343);
          v347 = vbslq_s8(v31, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v346, (int8x16_t)v346, 8uLL), v346), (int8x16_t)v322);
          v348 = vbslq_s8(v16, (int8x16_t)v340, (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(v185, v340)));
          v349 = vbslq_s8((int8x16_t)vcgtq_f32(v345, v318), v347, (int8x16_t)v346);
          *(int8x8_t *)v345.f32 = vqtbl1_s8(v348, *(int8x8_t *)v390.i8);
          *(int8x8_t *)&v345.u32[2] = vqtbl1_s8(v348, v385);
          v350 = vmulq_f32(v283, v345);
          v351 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v347, v347, 0xCuLL), v318), vextq_s8(v347, v347, 8uLL), vbslq_s8(v16, v349, (int8x16_t)v346));
          v352 = vcvtq_f32_s32(vcvtq_s32_f32(v350));
          v353 = *((int8x16_t *)v11 + 54);
          v354 = *((float32x4_t *)v11 + 55);
          v355 = vabdq_f32(vsubq_f32(v350, vsubq_f32(v352, (float32x4_t)vandq_s8(v353, (int8x16_t)vcgtq_f32(v352, v350)))), v354);
          v356 = *((float32x4_t *)v11 + 56);
          v357 = *((float32x4_t *)v11 + 57);
          v358 = vsubq_f32(v355, v356);
          v359 = (float32x4_t)vbslq_s8(v16, v351, (int8x16_t)v346);
          v360 = vmulq_f32(v358, v358);
          v361 = vmulq_f32(v360, vaddq_f32(v282, vmulq_f32(v289, v360)));
          v362 = *((float32x4_t *)v11 + 58);
          v363 = vaddq_f32(v362, vmulq_f32(v360, vaddq_f32(v357, v361)));
          v364 = vandq_s8(v353, (int8x16_t)vcgeq_f32(vnegq_f32(v359), v318));
          v365 = vmulq_f32(v358, v363);
          v366 = (float32x4_t)vextq_s8(v364, (int8x16_t)v359, 8uLL);
          v359.i64[1] = v364.i64[1];
          v367 = (int32x4_t)vbslq_s8(v59, (int8x16_t)vminq_f32(v359, v366), (int8x16_t)v359);
          v368 = vbslq_s8(v31, (int8x16_t)vminq_f32((float32x4_t)vextq_s8((int8x16_t)v367, (int8x16_t)v367, 8uLL), (float32x4_t)vrev64q_s32(v367)), (int8x16_t)v367);
          v369 = vmulq_laneq_f32(v365, v384, 3);
          v370 = (float32x4_t)vextq_s8((int8x16_t)v365, (int8x16_t)v369, 8uLL);
          v369.i64[1] = v365.i64[1];
          v371 = vbslq_s8(v16, vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vextq_s8(v368, v368, 0xCuLL), v318), (int8x16_t)vsubq_f32(vmulq_laneq_f32(v370, v246, 3), v369), v368), v368);
          v372 = vandq_s8(v353, (int8x16_t)vceqq_f32(v331, v311));
          v373 = (float32x4_t)vbslq_s8(v31, vextq_s8(v372, v372, 4uLL), v371);
          v374 = (float32x4_t)vbslq_s8(v59, (int8x16_t)vsubq_f32(vmulq_laneq_f32(v373, v373, 2), v373), (int8x16_t)v373);
          v375 = (int32x4_t)vbslq_s8(v16, (int8x16_t)v374, (int8x16_t)vminq_f32(v374, (float32x4_t)vextq_s8((int8x16_t)v374, (int8x16_t)v374, 8uLL)));
          v376 = (int32x4_t)vminq_f32(vmaxq_f32(vmulq_n_f32(v387, *(float *)vbslq_s8((int8x16_t)vcgtq_f32(v318, (float32x4_t)vrev64q_s32(v375)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v185.f32, 1), (int8x16_t)v375).i32), v362), v357);
          v377 = (int8x16_t)vmulq_lane_f32((float32x4_t)vrev64q_s32(v376), *(float32x2_t *)v376.i8, 1);
          v378 = (float32x4_t)vbslq_s8(v16, v377, (int8x16_t)vsubq_f32(v356, vmulq_f32(v354, (float32x4_t)vbslq_s8(v16, v377, (int8x16_t)v376))));
          *(float32x4_t *)(*(_QWORD *)&v5 + v9) = vaddq_f32(*((float32x4_t *)v11 + 2), vmulq_n_f32(vsubq_f32(*((float32x4_t *)v11 + 1), *((float32x4_t *)v11 + 2)), vmulq_lane_f32(v378, *(float32x2_t *)v378.f32, 1).f32[0]));
          v10 = vaddq_f32(v392, (float32x4_t)xmmword_1B304F230);
          v9 += 16;
        }
        while (16 * v4 != v9);
      }
      v380 = vaddq_f32(v380, (float32x4_t)xmmword_1B304F240);
      ++v3;
      *(_QWORD *)&v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcShapeCheckerboard::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcShapeCheckerboard::GetROI()
{
  return 0;
}

void HgcShapeCheckerboard::HgcShapeCheckerboard(HgcShapeCheckerboard *this)
{
  _QWORD *v2;
  HgcShapeCheckerboard::State *v3;
  uint64_t v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64EFF00;
  v3 = (HgcShapeCheckerboard::State *)operator new();
  HgcShapeCheckerboard::State::State(v3);
  *((_QWORD *)this + 51) = v4;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28ACB5C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcShapeCheckerboard::~HgcShapeCheckerboard(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64EFF00;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40F46B6991);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcShapeCheckerboard::~HgcShapeCheckerboard(this);
  HGObject::operator delete(v1);
}

uint64_t HgcShapeCheckerboard::SetParameter(HgcShapeCheckerboard *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  __n128 *v16;
  __n128 *v17;
  __n128 *v18;
  __n128 *v19;
  float *v20;
  float *v21;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_73;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_73;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_73;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_73;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_73;
    case 5:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[5].n128_f32[0] == 0.0
        && v13[5].n128_f32[1] == 0.0
        && v13[5].n128_f32[2] == a3.n128_f32[0]
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u64[0] = 0;
      v13[5].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[59] = a3;
      goto LABEL_73;
    case 6:
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[6].n128_f32[0] == 0.0
        && v14[6].n128_f32[1] == 0.0
        && v14[6].n128_f32[2] == a3.n128_f32[0]
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u64[0] = 0;
      v14[6].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v14[6].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[60] = a3;
      goto LABEL_73;
    case 7:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[7].n128_f32[0] == 0.0
        && v15[7].n128_f32[1] == 0.0
        && v15[7].n128_f32[2] == 0.0
        && v15[7].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v15[7].n128_u64[0] = 0;
      v15[7].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v15[7].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[61] = a3;
      goto LABEL_73;
    case 8:
      v16 = (__n128 *)*((_QWORD *)this + 51);
      if (v16[8].n128_f32[0] == 0.0
        && v16[8].n128_f32[1] == 0.0
        && v16[8].n128_f32[2] == 0.0
        && v16[8].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v16[8].n128_u64[0] = 0;
      v16[8].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v16[8].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v16[62] = a3;
      goto LABEL_73;
    case 9:
      v17 = (__n128 *)*((_QWORD *)this + 51);
      if (v17[9].n128_f32[0] == 0.0
        && v17[9].n128_f32[1] == 0.0
        && v17[9].n128_f32[2] == a3.n128_f32[0]
        && v17[9].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v17[9].n128_u64[0] = 0;
      v17[9].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v17[9].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v17[63] = a3;
      goto LABEL_73;
    case 10:
      v18 = (__n128 *)*((_QWORD *)this + 51);
      if (v18[10].n128_f32[0] == 0.0
        && v18[10].n128_f32[1] == 0.0
        && v18[10].n128_f32[2] == a3.n128_f32[0]
        && v18[10].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v18[10].n128_u64[0] = 0;
      v18[10].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v18[10].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v18[64] = a3;
      goto LABEL_73;
    case 11:
      v19 = (__n128 *)*((_QWORD *)this + 51);
      if (v19[11].n128_f32[0] == 0.0
        && v19[11].n128_f32[1] == a3.n128_f32[0]
        && v19[11].n128_f32[2] == 0.0
        && v19[11].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v19[11].n128_u32[0] = 0;
      v19[11].n128_u32[1] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v19[11].n128_u64[1] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v19[65] = a3;
      goto LABEL_73;
    case 12:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[48] == a3.n128_f32[0] && v20[49] == a4 && v20[50] == a5 && v20[51] == a6)
        return 0;
      v20[48] = a3.n128_f32[0];
      v20[49] = a4;
      v20[50] = a5;
      v20[51] = a6;
      goto LABEL_73;
    case 13:
      v21 = (float *)*((_QWORD *)this + 51);
      if (v21[52] == a3.n128_f32[0] && v21[53] == a4 && v21[54] == a5 && v21[55] == a6)
        return 0;
      v21[52] = a3.n128_f32[0];
      v21[53] = a4;
      v21[54] = a5;
      v21[55] = a6;
LABEL_73:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcShapeCheckerboard::GetParameter(HgcShapeCheckerboard *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_16;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_16;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_16;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_16;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_16;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[236];
      a3[1] = v9[237];
      a3[2] = v9[238];
      v4 = v9 + 239;
      goto LABEL_16;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[240];
      a3[1] = v10[241];
      a3[2] = v10[242];
      v4 = v10 + 243;
      goto LABEL_16;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[244];
      a3[1] = v11[245];
      a3[2] = v11[246];
      v4 = v11 + 247;
      goto LABEL_16;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[248];
      a3[1] = v12[249];
      a3[2] = v12[250];
      v4 = v12 + 251;
      goto LABEL_16;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[252];
      a3[1] = v13[253];
      a3[2] = v13[254];
      v4 = v13 + 255;
      goto LABEL_16;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[256];
      a3[1] = v14[257];
      a3[2] = v14[258];
      v4 = v14 + 259;
      goto LABEL_16;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[260];
      a3[1] = v15[261];
      a3[2] = v15[262];
      v4 = v15 + 263;
      goto LABEL_16;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[48];
      a3[1] = v16[49];
      a3[2] = v16[50];
      v4 = v16 + 51;
      goto LABEL_16;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[52];
      a3[1] = v17[53];
      a3[2] = v17[54];
      v4 = v17 + 55;
LABEL_16:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double HgcShapeCheckerboard::State::State(HgcShapeCheckerboard::State *this)
{
  double result;
  __int128 v2;

  result = 0.0;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 14) = xmmword_1B3052C20;
  *((_OWORD *)this + 15) = xmmword_1B3052C30;
  *((int32x4_t *)this + 16) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 17) = xmmword_1B3050E20;
  *((_OWORD *)this + 18) = xmmword_1B3050FE0;
  *((_OWORD *)this + 19) = xmmword_1B3052C40;
  *((_OWORD *)this + 20) = xmmword_1B3052C50;
  *((_OWORD *)this + 21) = xmmword_1B3050F70;
  *((_OWORD *)this + 22) = xmmword_1B3052C60;
  *((_OWORD *)this + 23) = xmmword_1B3052C70;
  *((_OWORD *)this + 24) = xmmword_1B3052C80;
  *((_OWORD *)this + 25) = xmmword_1B3052C90;
  *((_OWORD *)this + 26) = xmmword_1B3052CA0;
  *((_OWORD *)this + 27) = xmmword_1B3052CB0;
  *((_OWORD *)this + 28) = xmmword_1B3050FF0;
  *((_OWORD *)this + 29) = xmmword_1B3052CC0;
  *((_OWORD *)this + 30) = xmmword_1B3052CD0;
  *((_OWORD *)this + 31) = xmmword_1B3052CE0;
  *((_OWORD *)this + 32) = xmmword_1B3052CF0;
  *((_OWORD *)this + 33) = xmmword_1B3052D00;
  *((_OWORD *)this + 34) = xmmword_1B3052D10;
  *((_OWORD *)this + 35) = xmmword_1B3052D20;
  *((_OWORD *)this + 36) = xmmword_1B3052D30;
  *((_OWORD *)this + 37) = xmmword_1B3052D40;
  *((_OWORD *)this + 38) = xmmword_1B3052D50;
  *((_OWORD *)this + 39) = xmmword_1B3052D60;
  *((_OWORD *)this + 40) = xmmword_1B30510C0;
  *((_OWORD *)this + 41) = xmmword_1B3052D70;
  *((_OWORD *)this + 42) = xmmword_1B3052D80;
  *((_OWORD *)this + 43) = xmmword_1B30528A0;
  *((_OWORD *)this + 44) = xmmword_1B3052D90;
  *((_OWORD *)this + 45) = xmmword_1B3052DA0;
  *((_OWORD *)this + 46) = xmmword_1B3052DB0;
  *((_OWORD *)this + 47) = xmmword_1B3052DC0;
  *((_OWORD *)this + 48) = xmmword_1B3052DD0;
  *((_OWORD *)this + 49) = xmmword_1B3051020;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = xmmword_1B3051310;
  *(_QWORD *)&v2 = 0xFFFFFFFFLL;
  *((_QWORD *)&v2 + 1) = 0xFFFFFFFFLL;
  *((_OWORD *)this + 52) = v2;
  *((_OWORD *)this + 53) = xmmword_1B3050FD0;
  *((_OWORD *)this + 54) = xmmword_1B3052DE0;
  *((_OWORD *)this + 55) = xmmword_1B3052DF0;
  *((_OWORD *)this + 56) = xmmword_1B3052E00;
  *((_OWORD *)this + 57) = xmmword_1B3052E10;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 58) = xmmword_1B3052E20;
  return result;
}

const char *HgcGradientLinear::GetProgram(HgcGradientLinear *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000047a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = half3(hg_Params[1].xyz) - half3(hg_Params[0].xyz);\n"
             "    s0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    s0.x = dot(float3(r0.xyz), s0.xyz);\n"
             "    r0.x = dot(r0.xyz, r0.xyz);\n"
             "    s0.x = s0.x/float(r0.x);\n"
             "    s0.x = s0.x*hg_Params[2].x;\n"
             "    s0.x = fmax(s0.x, float(c0.x));\n"
             "    s0.x = fmin(s0.x, hg_Params[2].y);\n"
             "    s0.y = float(c0.x);\n"
             "    s0.xy = floor(s0.xy);\n"
             "    s0.xy = s0.xy + float2(c0.yy);\n"
             "    s0.xy = s0.xy + hg_Params[3].xy;\n"
             "    s0.xy = s0.xy*hg_Params[3].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c6ef7e31:8f35d263:e751ba94:acdce837\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000430\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Params[1].xyz - hg_Params[0].xyz;\n"
             "    r1.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    r1.x = dot(r0.xyz, r1.xyz);\n"
             "    r0.x = dot(r0.xyz, r0.xyz);\n"
             "    r1.x = r1.x/r0.x;\n"
             "    r1.x = r1.x*hg_Params[2].x;\n"
             "    r1.x = fmax(r1.x, c0.x);\n"
             "    r1.x = fmin(r1.x, hg_Params[2].y);\n"
             "    r1.y = c0.x;\n"
             "    r1.xy = floor(r1.xy);\n"
             "    r1.xy = r1.xy + c0.yy;\n"
             "    r1.xy = r1.xy + hg_Params[3].xy;\n"
             "    r1.xy = r1.xy*hg_Params[3].zw;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=488f41f1:ccf438e8:81c55cc8:b2ecdb0c\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000047f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xyz = hg_ProgramLocal1.xyz - hg_ProgramLocal0.xyz;\n"
           "    r1.xyz = hg_TexCoord0.xyz - hg_ProgramLocal0.xyz;\n"
           "    r1.x = dot(r0.xyz, r1.xyz);\n"
           "    r0.x = dot(r0.xyz, r0.xyz);\n"
           "    r1.x = r1.x/r0.x;\n"
           "    r1.x = r1.x*hg_ProgramLocal2.x;\n"
           "    r1.x = max(r1.x, c0.x);\n"
           "    r1.x = min(r1.x, hg_ProgramLocal2.y);\n"
           "    r1.y = c0.x;\n"
           "    r1.xy = floor(r1.xy);\n"
           "    r1.xy = r1.xy + c0.yy;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal3.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal3.zw;\n"
           "    r1 = texture2D(hg_Texture0, r1.xy);\n"
           "    r1.xyz = r1.xyz*r1.www;\n"
           "    gl_FragColor = r1;\n"
           "}\n"
           "//MD5=2e4e42fc:8f04ac5e:7600ec8d:83fb8fce\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0004:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcGradientLinear::InitProgramDescriptor(HgcGradientLinear *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGradientLinear_hgc_visible", "//Metal1.0     \n//LEN=0000000374\n[[ visible ]] FragmentOut HgcGradientLinear_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = hg_Params[1].xyz - hg_Params[0].xyz;\n"
    "    r1.xyz = texCoord0.xyz - hg_Params[0].xyz;\n"
    "    r1.x = dot(r0.xyz, r1.xyz);\n"
    "    r0.x = dot(r0.xyz, r0.xyz);\n"
    "    r1.x = r1.x/r0.x;\n"
    "    r1.x = r1.x*hg_Params[2].x;\n"
    "    r1.x = fmax(r1.x, c0.x);\n"
    "    r1.x = fmin(r1.x, hg_Params[2].y);\n"
    "    r1.y = c0.x;\n"
    "    r1.xy = floor(r1.xy);\n"
    "    r1.xy = r1.xy + c0.yy;\n"
    "    r1.xy = r1.xy + hg_Params[3].xy;\n"
    "    r1.xy = r1.xy*hg_Params[3].zw;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    r1.xyz = r1.xyz*r1.www;\n"
    "    output.color0 = r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28AD510()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGradientLinear");
}

void sub_1B28AD520(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28AD6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28AD6F0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28AD6E8);
}

_QWORD *HgcGradientLinear::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGradientLinear [hgc1]");
}

uint64_t HgcGradientLinear::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcGradientLinear::Bind(HgcGradientLinear *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcGradientLinear *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcGradientLinear::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  float32x4_t v5;
  int v6;
  int32x2_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  __int32 v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x2_t v45;
  __int32 v46;
  __int32 v47;
  float32x4_t v48;
  int32x4_t v49;
  __int32 v50;
  __int32 v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t *v57;
  uint64_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  float32x4_t v71;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    *(float32x2_t *)v5.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v5.i64[1] = 0x3F80000000000000;
    v6 = a2[1].i32[0] - v2.i32[0];
    v7 = a2[2];
    v8 = 16 * a2[3].i32[0];
    v9.i64[0] = 0x3F0000003F000000;
    v9.i64[1] = 0x3F0000003F000000;
    v10 = v5;
    do
    {
      if (v6 < 3)
      {
        v11 = 0;
        v13 = v10;
      }
      else
      {
        v11 = 0;
        v12 = v6;
        v13 = v10;
        do
        {
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *(_QWORD *)(a1 + 408);
          v17 = vsubq_f32(*(float32x4_t *)(v16 + 16), *(float32x4_t *)v16);
          v18 = vmulq_f32(v17, vsubq_f32(v13, *(float32x4_t *)v16));
          v19 = vmulq_f32(v17, vsubq_f32(v14, *(float32x4_t *)v16));
          v20 = vmulq_f32(v17, vsubq_f32(v15, *(float32x4_t *)v16));
          v21 = vmulq_f32(v17, v17);
          v22 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), vaddq_f32(v21, (float32x4_t)vrev64q_s32((int32x4_t)v21)));
          v23 = *(float32x4_t *)(v16 + 32);
          v24 = *(float32x4_t *)(v16 + 48);
          v25 = *(float32x4_t *)(v16 + 64);
          v26 = *(float32x4_t *)(v16 + 80);
          v27 = vminq_f32(vmaxq_f32(vrecpeq_f32(v22), v24), v25);
          v28 = vminq_f32(vmaxq_f32(vmulq_f32(v27, vrecpsq_f32(v22, v27)), v24), v25);
          v29 = vmulq_f32(v28, vrecpsq_f32(v22, v28));
          v30 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL), vaddq_f32(v18, (float32x4_t)vrev64q_s32((int32x4_t)v18))), v29);
          v31 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), vaddq_f32(v19, (float32x4_t)vrev64q_s32((int32x4_t)v19))), v29);
          v32 = vmaxq_f32(vmulq_f32(v23, vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), vaddq_f32(v20, (float32x4_t)vrev64q_s32((int32x4_t)v20))), v29)), v26);
          v33 = (float32x4_t)vrev64q_s32((int32x4_t)v23);
          v34 = vminq_f32(vmaxq_f32(vmulq_f32(v23, v30), v26), v33);
          v35 = vminq_f32(vmaxq_f32(vmulq_f32(v23, v31), v26), v33);
          v34.i32[1] = 0;
          v36 = vminq_f32(v32, v33);
          v35.i32[1] = 0;
          v36.i32[1] = 0;
          v37 = vcvtq_f32_s32(vcvtq_s32_f32(v34));
          v38 = vcvtq_f32_s32(vcvtq_s32_f32(v35));
          v39 = vcvtq_f32_s32(vcvtq_s32_f32(v36));
          v40 = *(int8x16_t *)(v16 + 96);
          v41 = *(float32x4_t *)(v16 + 112);
          v42 = a2[11].i32[0];
          v43 = vaddq_f32(vsubq_f32(vaddq_f32(v41, vsubq_f32(v37, (float32x4_t)vandq_s8(v40, (int8x16_t)vcgtq_f32(v37, v34)))), v5), v9);
          v44 = vcvtq_s32_f32(v43);
          v43.i64[0] = vaddq_s32(v44, vcgtq_f32(vcvtq_f32_s32(v44), v43)).u64[0];
          v45 = a2[10];
          v46 = v43.i32[1];
          v47 = v43.i32[0];
          v48 = vaddq_f32(vsubq_f32(vaddq_f32(v41, vsubq_f32(v38, (float32x4_t)vandq_s8(v40, (int8x16_t)vcgtq_f32(v38, v35)))), v5), v9);
          v49 = vcvtq_s32_f32(v48);
          v50 = v47 + v46 * v42;
          v48.i64[0] = vaddq_s32(v49, vcgtq_f32(vcvtq_f32_s32(v49), v48)).u64[0];
          v51 = v48.i32[0] + v48.i32[1] * v42;
          v52 = vaddq_f32(vsubq_f32(vaddq_f32(v41, vsubq_f32(v39, (float32x4_t)vandq_s8(v40, (int8x16_t)vcgtq_f32(v39, v36)))), v5), v9);
          v53 = vcvtq_s32_f32(v52);
          v52.i64[0] = vaddq_s32(v53, vcgtq_f32(vcvtq_f32_s32(v53), v52)).u64[0];
          v54 = *(float32x4_t *)(*(_QWORD *)&v45 + 16 * (v52.i32[0] + v52.i32[1] * v42));
          v55 = *(int8x16_t *)(v16 + 128);
          v56 = vbslq_s8(v55, *(int8x16_t *)(*(_QWORD *)&v45 + 16 * v51), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(*(_QWORD *)&v45 + 16 * v51), *(float32x4_t *)(*(_QWORD *)&v45 + 16 * v51), 3));
          v57 = (int8x16_t *)(*(_QWORD *)&v7 + 16 * v11);
          *v57 = vbslq_s8(v55, *(int8x16_t *)(*(_QWORD *)&v45 + 16 * v50), (int8x16_t)vmulq_laneq_f32(*(float32x4_t *)(*(_QWORD *)&v45 + 16 * v50), *(float32x4_t *)(*(_QWORD *)&v45 + 16 * v50), 3));
          v57[1] = v56;
          v57[2] = vbslq_s8(v55, (int8x16_t)v54, (int8x16_t)vmulq_laneq_f32(v54, v54, 3));
          v13 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v11 += 3;
          v12 -= 3;
        }
        while (v12 > 2);
        v11 = v11;
      }
      if ((int)v11 < v6)
      {
        do
        {
          v58 = *(_QWORD *)(a1 + 408);
          v59 = vsubq_f32(*(float32x4_t *)(v58 + 16), *(float32x4_t *)v58);
          v60 = vmulq_f32(v59, vsubq_f32(v13, *(float32x4_t *)v58));
          v61 = vmulq_f32(v59, v59);
          v62 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), vaddq_f32(v61, (float32x4_t)vrev64q_s32((int32x4_t)v61)));
          v63 = *(float32x4_t *)(v58 + 48);
          v64 = *(float32x4_t *)(v58 + 64);
          v65 = vminq_f32(vmaxq_f32(vrecpeq_f32(v62), v63), v64);
          v66 = vminq_f32(vmaxq_f32(vmulq_f32(v65, vrecpsq_f32(v62, v65)), v63), v64);
          v67 = vminq_f32(vmaxq_f32(vmulq_f32(*(float32x4_t *)(v58 + 32), vmulq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL), vaddq_f32(v60, (float32x4_t)vrev64q_s32((int32x4_t)v60))), vmulq_f32(v66, vrecpsq_f32(v62, v66)))), *(float32x4_t *)(v58 + 80)), (float32x4_t)vrev64q_s32(*(int32x4_t *)(v58 + 32)));
          v67.i32[1] = 0;
          v68 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
          v69 = vaddq_f32(vsubq_f32(vaddq_f32(*(float32x4_t *)(v58 + 112), vsubq_f32(v68, (float32x4_t)vandq_s8(*(int8x16_t *)(v58 + 96), (int8x16_t)vcgtq_f32(v68, v67)))), v5), v9);
          v70 = vcvtq_s32_f32(v69);
          v69.i64[0] = vaddq_s32(v70, vcgtq_f32(vcvtq_f32_s32(v70), v69)).u64[0];
          v71 = *(float32x4_t *)(*(_QWORD *)&a2[10] + 16 * (v69.i32[0] + v69.i32[1] * a2[11].i32[0]));
          *(int8x16_t *)(*(_QWORD *)&v7 + 16 * v11) = vbslq_s8(*(int8x16_t *)(v58 + 128), (int8x16_t)v71, (int8x16_t)vmulq_laneq_f32(v71, v71, 3));
          v13 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          ++v11;
        }
        while (v11 < v6);
      }
      v10 = vaddq_f32(v10, (float32x4_t)xmmword_1B304F240);
      ++v4;
      *(_QWORD *)&v7 += v8;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcGradientLinear::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcGradientLinear::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  return HGRenderer::GetDOD(a2, Input);
}

void HgcGradientLinear::HgcGradientLinear(HgcGradientLinear *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F0168;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = xmmword_1B3051200;
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_OWORD *)(v3 + 96) = xmmword_1B30520F0;
  *(_OWORD *)(v3 + 112) = xmmword_1B3052100;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcGradientLinear *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28ADD38(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGradientLinear::~HgcGradientLinear(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F0168;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40265AC83CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGradientLinear::~HgcGradientLinear(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGradientLinear::SetParameter(HgcGradientLinear *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcGradientLinear::GetParameter(HgcGradientLinear *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcUnsharpMask::GetProgram(HgcUnsharpMask *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000456\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r0 - r1;\n"
             "    r2 = r1 - half4(hg_Params[1].xxxx);\n"
             "    r2 = fmax(r2, c0.xxxx);\n"
             "    r3 = r1 + half4(hg_Params[1].xxxx);\n"
             "    r3 = fmin(r3, c0.xxxx);\n"
             "    r1 = select(r2, r3, r1 < 0.00000h);\n"
             "    r1 = r1*half4(hg_Params[0]) + r0;\n"
             "    r1.w = clamp(r1.w, 0.00000h, 1.00000h);\n"
             "    output.color0 = fmax(float4(c0.xxxx), float4(r1));\n"
             "    return output;\n"
             "}\n"
             "//MD5=d5cc6433:5d4a0953:df92ea2c:fe812aae\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000426\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r0 - r1;\n"
             "    r2 = r1 - hg_Params[1].xxxx;\n"
             "    r2 = fmax(r2, c0.xxxx);\n"
             "    r3 = r1 + hg_Params[1].xxxx;\n"
             "    r3 = fmin(r3, c0.xxxx);\n"
             "    r1 = select(r2, r3, r1 < 0.00000f);\n"
             "    r1 = r1*hg_Params[0] + r0;\n"
             "    r1.w = clamp(r1.w, 0.00000f, 1.00000f);\n"
             "    output.color0 = fmax(c0.xxxx, r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ccd2b00d:c432c5e1:52e56883:8fe20380\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0004:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000045f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r0 - r1;\n"
           "    r2 = r1 - hg_ProgramLocal1.xxxx;\n"
           "    r2 = max(r2, c0.xxxx);\n"
           "    r3 = r1 + hg_ProgramLocal1.xxxx;\n"
           "    r3 = min(r3, c0.xxxx);\n"
           "    r1 = vec4(r1.x < 0.00000 ? r3.x : r2.x, r1.y < 0.00000 ? r3.y : r2.y, r1.z < 0.00000 ? r3.z : r2.z, r1.w "
           "< 0.00000 ? r3.w : r2.w);\n"
           "    r1 = r1*hg_ProgramLocal0 + r0;\n"
           "    r1.w = clamp(r1.w, 0.00000, 1.00000);\n"
           "    gl_FragColor = max(c0.xxxx, r1);\n"
           "}\n"
           "//MD5=8e720e80:e9b0ca1b:b5490642:451c7808\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0004:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcUnsharpMask::InitProgramDescriptor(HgcUnsharpMask *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcUnsharpMask_hgc_visible", "//Metal1.0     \n//LEN=0000000283\n[[ visible ]] FragmentOut HgcUnsharpMask_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r0 - r1;\n"
    "    r2 = r1 - hg_Params[1].xxxx;\n"
    "    r2 = fmax(r2, c0.xxxx);\n"
    "    r3 = r1 + hg_Params[1].xxxx;\n"
    "    r3 = fmin(r3, c0.xxxx);\n"
    "    r1 = select(r2, r3, r1 < 0.00000f);\n"
    "    r1 = r1*hg_Params[0] + r0;\n"
    "    r1.w = clamp(r1.w, 0.00000f, 1.00000f);\n"
    "    output.color0 = fmax(c0.xxxx, r1);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28ADF40()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcUnsharpMask");
}

void sub_1B28ADF50(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28AE090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28AE0D8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28AE0D0);
}

_QWORD *HgcUnsharpMask::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcUnsharpMask [hgc1]");
}

uint64_t HgcUnsharpMask::BindTexture(HgcUnsharpMask *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcUnsharpMask::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcUnsharpMask::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v29) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t *)(v8 + v12 - 32);
          v14 = *(float32x4_t *)(v8 + v12 - 16);
          v15 = *(float32x4_t *)(v8 + v12);
          v16 = *(float32x4_t *)(v8 + v12 + 16);
          v17 = vsubq_f32(v13, *(float32x4_t *)(v6 + v12 - 32));
          v18 = vsubq_f32(v14, *(float32x4_t *)(v6 + v12 - 16));
          v19 = vsubq_f32(v15, *(float32x4_t *)(v6 + v12));
          v20 = *(_QWORD *)(a1 + 408);
          v21 = vsubq_f32(v16, *(float32x4_t *)(v6 + v12 + 16));
          v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v20 + 16), 0);
          v23 = *(float32x4_t *)(v20 + 32);
          v24 = vaddq_f32(v13, vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v23, v17), (int8x16_t)vminq_f32(vaddq_f32(v17, v22), v23), (int8x16_t)vmaxq_f32(vsubq_f32(v17, v22), v23)), *(float32x4_t *)v20));
          v25 = vaddq_f32(v14, vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v23, v18), (int8x16_t)vminq_f32(vaddq_f32(v18, v22), v23), (int8x16_t)vmaxq_f32(vsubq_f32(v18, v22), v23)), *(float32x4_t *)v20));
          v26 = vaddq_f32(v15, vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v23, v19), (int8x16_t)vminq_f32(vaddq_f32(v19, v22), v23), (int8x16_t)vmaxq_f32(vsubq_f32(v19, v22), v23)), *(float32x4_t *)v20));
          v27 = vaddq_f32(v16, vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v23, v21), (int8x16_t)vminq_f32(vaddq_f32(v21, v22), v23), (int8x16_t)vmaxq_f32(vsubq_f32(v21, v22), v23)), *(float32x4_t *)v20));
          v18.i64[0] = vextq_s8(*(int8x16_t *)(v20 + 48), *(int8x16_t *)(v20 + 48), 8uLL).u64[0];
          v22.i64[0] = vextq_s8(*(int8x16_t *)(v20 + 64), *(int8x16_t *)(v20 + 64), 8uLL).u64[0];
          *(float32x2_t *)&v24.u32[2] = vmin_f32(vmax_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL), *(float32x2_t *)v18.f32), *(float32x2_t *)v22.f32);
          *(float32x2_t *)&v25.u32[2] = vmin_f32(vmax_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), *(float32x2_t *)v18.f32), *(float32x2_t *)v22.f32);
          *(float32x2_t *)&v26.u32[2] = vmin_f32(vmax_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), *(float32x2_t *)v18.f32), *(float32x2_t *)v22.f32);
          *(float32x2_t *)&v27.u32[2] = vmin_f32(vmax_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL), *(float32x2_t *)v18.f32), *(float32x2_t *)v22.f32);
          v28 = (float32x4_t *)(v5 + v12);
          v28[-2] = vmaxq_f32(v24, v23);
          v28[-1] = vmaxq_f32(v25, v23);
          *v28 = vmaxq_f32(v26, v23);
          v28[1] = vmaxq_f32(v27, v23);
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v29) = -v11;
      }
      if ((int)v29 < v4)
      {
        v29 = v29;
        do
        {
          v30 = *(float32x4_t *)(v8 + 16 * v29);
          v31 = vsubq_f32(v30, *(float32x4_t *)(v6 + 16 * v29));
          v32 = *(_QWORD *)(a1 + 408);
          v33 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v32 + 16), 0);
          v34 = *(float32x4_t *)(v32 + 32);
          v35 = vaddq_f32(v30, vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v34, v31), (int8x16_t)vminq_f32(vaddq_f32(v31, v33), v34), (int8x16_t)vmaxq_f32(vsubq_f32(v31, v33), v34)), *(float32x4_t *)v32));
          *(float32x2_t *)&v35.u32[2] = vmin_f32(vmax_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v32 + 48), *(int8x16_t *)(v32 + 48), 8uLL)), (float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v32 + 64), *(int8x16_t *)(v32 + 64), 8uLL));
          *(float32x4_t *)(v5 + 16 * v29++) = vmaxq_f32(v35, v34);
        }
        while (v29 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcUnsharpMask::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcUnsharpMask::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcUnsharpMask::HgcUnsharpMask(HgcUnsharpMask *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F03D0;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = xmmword_1B3052E80;
  *(_OWORD *)(v3 + 64) = xmmword_1B3052220;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28AE540(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcUnsharpMask::~HgcUnsharpMask(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F03D0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcUnsharpMask::~HgcUnsharpMask(this);
  HGObject::operator delete(v1);
}

uint64_t HgcUnsharpMask::SetParameter(HgcUnsharpMask *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  int32x4_t v8;
  uint64_t v9;

  if ((_DWORD)a2 == 1)
  {
    v9 = *((_QWORD *)this + 51);
    if (*(float *)(v9 + 16) != a3.n128_f32[0]
      || *(float *)(v9 + 20) != a4
      || *(float *)(v9 + 24) != a5
      || *(float *)(v9 + 28) != a6)
    {
      *(_DWORD *)(v9 + 16) = a3.n128_u32[0];
      *(float *)(v9 + 20) = a4;
      *(float *)(v9 + 24) = a5;
      *(float *)(v9 + 28) = a6;
      goto LABEL_13;
    }
    return 0;
  }
  if (!(_DWORD)a2)
  {
    v7 = *((_QWORD *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a3.n128_f32[0]
      || *(float *)(v7 + 8) != a3.n128_f32[0]
      || *(float *)(v7 + 12) != a3.n128_f32[0])
    {
      v8 = vdupq_lane_s32((int32x2_t)a3.n128_u64[0], 0);
      a3.n128_f32[1] = a4;
      *(int32x4_t *)v7 = v8;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v7 + 80) = a3;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcUnsharpMask::GetParameter(HgcUnsharpMask *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[4];
    a3[1] = v5[5];
    a3[2] = v5[6];
    v4 = v5 + 7;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[20];
    a3[1] = v3[21];
    a3[2] = v3[22];
    v4 = v3 + 23;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcRingLens::GetProgram(HgcRingLens *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000930\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2, s3, s4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord1.xy*hg_Params[4].xy + hg_Params[4].zw;\n"
             "    s1 = float4(dot(s0.xy, s0.xy));\n"
             "    s2 = rsqrt(s1.xxxx);\n"
             "    s2 = select(s2, float4(c0.xxxx), s1 < 0.00000h);\n"
             "    s2 = select(float4(c0.xxxx), s2, -s1 < 0.00000h);\n"
             "    s0.xy = s0.xy*s2.xy;\n"
             "    s1 = s1*s2;\n"
             "    s2.xy = s1.xy*hg_Params[0].xx + hg_Params[0].yy;\n"
             "    s3 = clamp(s1 - hg_Params[2].xxxx, 0.00000f, 1.00000f);\n"
             "    s3 = clamp(float4(c0.yyyy) - s3, 0.00000f, 1.00000f);\n"
             "    s4 = -s3*float4(c0.zzzz) + float4(c0.wwww);\n"
             "    s3 = s3*s3;\n"
             "    s3 = s3*s4;\n"
             "    s1 = clamp(s1 - hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
             "    s1 = clamp(float4(c0.yyyy) - s1, 0.00000f, 1.00000f);\n"
             "    s4 = -s1*float4(c0.zzzz) + float4(c0.wwww);\n"
             "    s1 = s1*s1;\n"
             "    s1 = s1*s4;\n"
             "    s2.xy = clamp(s2.xy, 0.00000f, 1.00000f);\n"
             "    s2.xy = s2.xy*hg_Params[0].zz + hg_Params[0].ww;\n"
             "    s4.x = s2.x + float(c0.y);\n"
             "    s4.x = s4.x*-s2.x + s4.x;\n"
             "    s4.xy = s2.xy/s4.xx;\n"
             "    s4.xy = clamp(s4.xy*hg_Params[1].xx + hg_Params[1].yy, 0.00000f, 1.00000f);\n"
             "    s4.xy = s4.xy*hg_Params[1].zz;\n"
             "    s0.xy = s0.xy*s4.xy;\n"
             "    s0.xy = s0.xy*hg_Params[5].xy + hg_Params[5].zw;\n"
             "    s2.xy = fmax(s0.xy, -hg_Params[3].xy);\n"
             "    s2.xy = fmin(s2.xy, hg_Params[3].xy);\n"
             "    s4.xy = -hg_Params[3].xy - s0.xy;\n"
             "    s0.xy = s0.xy - hg_Params[3].xy;\n"
             "    s4.x = fmax(s4.x, s4.y);\n"
             "    s4.y = fmax(s0.x, s0.y);\n"
             "    s4.x = fmax(s4.x, s4.y);\n"
             "    s2.xy = s2.xy + hg_Params[6].xy;\n"
             "    s2.xy = s2.xy*hg_Params[6].zw;\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, s2.xy);\n"
             "    s4 = select(float4(r0), float4(c0.xxxx), -s4.xxxx < 0.00000h);\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    s3 = mix(float4(r0), s4, s3);\n"
             "    output.color0 = mix(s3, float4(r0), s1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=4f9e8c5b:54bb4b90:918f192a:0c3b49eb\n"
             "//SIG=00400000:00000001:00000001:00000003:0001:0007:0006:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000008af\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord1.xy*hg_Params[4].xy + hg_Params[4].zw;\n"
             "    r1 = float4(dot(r0.xy, r0.xy));\n"
             "    r2 = rsqrt(r1.xxxx);\n"
             "    r2 = select(r2, c0.xxxx, r1 < 0.00000f);\n"
             "    r2 = select(c0.xxxx, r2, -r1 < 0.00000f);\n"
             "    r0.xy = r0.xy*r2.xy;\n"
             "    r1 = r1*r2;\n"
             "    r2.xy = r1.xy*hg_Params[0].xx + hg_Params[0].yy;\n"
             "    r3 = clamp(r1 - hg_Params[2].xxxx, 0.00000f, 1.00000f);\n"
             "    r3 = clamp(c0.yyyy - r3, 0.00000f, 1.00000f);\n"
             "    r4 = -r3*c0.zzzz + c0.wwww;\n"
             "    r3 = r3*r3;\n"
             "    r3 = r3*r4;\n"
             "    r1 = clamp(r1 - hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
             "    r1 = clamp(c0.yyyy - r1, 0.00000f, 1.00000f);\n"
             "    r4 = -r1*c0.zzzz + c0.wwww;\n"
             "    r1 = r1*r1;\n"
             "    r1 = r1*r4;\n"
             "    r2.xy = clamp(r2.xy, 0.00000f, 1.00000f);\n"
             "    r2.xy = r2.xy*hg_Params[0].zz + hg_Params[0].ww;\n"
             "    r4.x = r2.x + c0.y;\n"
             "    r4.x = r4.x*-r2.x + r4.x;\n"
             "    r4.xy = r2.xy/r4.xx;\n"
             "    r4.xy = clamp(r4.xy*hg_Params[1].xx + hg_Params[1].yy, 0.00000f, 1.00000f);\n"
             "    r4.xy = r4.xy*hg_Params[1].zz;\n"
             "    r0.xy = r0.xy*r4.xy;\n"
             "    r0.xy = r0.xy*hg_Params[5].xy + hg_Params[5].zw;\n"
             "    r2.xy = fmax(r0.xy, -hg_Params[3].xy);\n"
             "    r2.xy = fmin(r2.xy, hg_Params[3].xy);\n"
             "    r4.xy = -hg_Params[3].xy - r0.xy;\n"
             "    r0.xy = r0.xy - hg_Params[3].xy;\n"
             "    r4.x = fmax(r4.x, r4.y);\n"
             "    r4.y = fmax(r0.x, r0.y);\n"
             "    r4.x = fmax(r4.x, r4.y);\n"
             "    r2.xy = r2.xy + hg_Params[6].xy;\n"
             "    r2.xy = r2.xy*hg_Params[6].zw;\n"
             "    r2 = hg_Texture1.sample(hg_Sampler1, r2.xy);\n"
             "    r2 = select(r2, c0.xxxx, -r4.xxxx < 0.00000f);\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r3 = mix(r0, r2, r3);\n"
             "    output.color0 = mix(r3, r0, r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a85dccd2:7635320d:526a2005:86ecb05c\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0007:0005:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000ac5\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0.xy = hg_TexCoord1.xy*hg_ProgramLocal4.xy + hg_ProgramLocal4.zw;\n"
           "    r1 = vec4(dot(r0.xy, r0.xy));\n"
           "    r2 = inversesqrt(r1.xxxx);\n"
           "    r2 = vec4(r1.x < 0.00000 ? c0.x : r2.x, r1.y < 0.00000 ? c0.x : r2.y, r1.z < 0.00000 ? c0.x : r2.z, r1.w "
           "< 0.00000 ? c0.x : r2.w);\n"
           "    r2 = vec4(-r1.x < 0.00000 ? r2.x : c0.x, -r1.y < 0.00000 ? r2.y : c0.x, -r1.z < 0.00000 ? r2.z : c0.x, -r"
           "1.w < 0.00000 ? r2.w : c0.x);\n"
           "    r0.xy = r0.xy*r2.xy;\n"
           "    r1 = r1*r2;\n"
           "    r2.xy = r1.xy*hg_ProgramLocal0.xx + hg_ProgramLocal0.yy;\n"
           "    r3 = clamp(r1 - hg_ProgramLocal2.xxxx, vec4(0.00000), vec4(1.00000));\n"
           "    r3 = clamp(c0.yyyy - r3, vec4(0.00000), vec4(1.00000));\n"
           "    r4 = -r3*c0.zzzz + c0.wwww;\n"
           "    r3 = r3*r3;\n"
           "    r3 = r3*r4;\n"
           "    r1 = clamp(r1 - hg_ProgramLocal2.yyyy, vec4(0.00000), vec4(1.00000));\n"
           "    r1 = clamp(c0.yyyy - r1, vec4(0.00000), vec4(1.00000));\n"
           "    r4 = -r1*c0.zzzz + c0.wwww;\n"
           "    r1 = r1*r1;\n"
           "    r1 = r1*r4;\n"
           "    r2.xy = clamp(r2.xy, vec2(0.00000), vec2(1.00000));\n"
           "    r2.xy = r2.xy*hg_ProgramLocal0.zz + hg_ProgramLocal0.ww;\n"
           "    r4.x = r2.x + c0.y;\n"
           "    r4.x = r4.x*-r2.x + r4.x;\n"
           "    r4.xy = r2.xy/r4.xx;\n"
           "    r4.xy = clamp(r4.xy*hg_ProgramLocal1.xx + hg_ProgramLocal1.yy, vec2(0.00000), vec2(1.00000));\n"
           "    r4.xy = r4.xy*hg_ProgramLocal1.zz;\n"
           "    r0.xy = r0.xy*r4.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal5.xy + hg_ProgramLocal5.zw;\n"
           "    r2.xy = max(r0.xy, -hg_ProgramLocal3.xy);\n"
           "    r2.xy = min(r2.xy, hg_ProgramLocal3.xy);\n"
           "    r4.xy = -hg_ProgramLocal3.xy - r0.xy;\n"
           "    r0.xy = r0.xy - hg_ProgramLocal3.xy;\n"
           "    r4.x = max(r4.x, r4.y);\n"
           "    r4.y = max(r0.x, r0.y);\n"
           "    r4.x = max(r4.x, r4.y);\n"
           "    r2.xy = r2.xy + hg_ProgramLocal6.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal6.zw;\n"
           "    r2 = texture2D(hg_Texture1, r2.xy);\n"
           "    r2 = vec4(-r4.x < 0.00000 ? c0.x : r2.x, -r4.x < 0.00000 ? c0.x : r2.y, -r4.x < 0.00000 ? c0.x : r2.z, -r"
           "4.x < 0.00000 ? c0.x : r2.w);\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r3 = mix(r0, r2, r3);\n"
           "    gl_FragColor = mix(r3, r0, r1);\n"
           "}\n"
           "//MD5=46cb039c:4ad86a39:1b96f54c:335834e1\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0007:0005:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcRingLens::InitProgramDescriptor(HgcRingLens *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcRingLens_hgc_visible", "//Metal1.0     \n//LEN=0000000772\n[[ visible ]] FragmentOut HgcRingLens_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1,\n    float4 texCoord1)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 2.000000000, 3.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord1.xy*hg_Params[4].xy + hg_Params[4].zw;\n"
    "    r1 = float4(dot(r0.xy, r0.xy));\n"
    "    r2 = rsqrt(r1.xxxx);\n"
    "    r2 = select(r2, c0.xxxx, r1 < 0.00000f);\n"
    "    r2 = select(c0.xxxx, r2, -r1 < 0.00000f);\n"
    "    r0.xy = r0.xy*r2.xy;\n"
    "    r1 = r1*r2;\n"
    "    r2.xy = r1.xy*hg_Params[0].xx + hg_Params[0].yy;\n"
    "    r3 = clamp(r1 - hg_Params[2].xxxx, 0.00000f, 1.00000f);\n"
    "    r3 = clamp(c0.yyyy - r3, 0.00000f, 1.00000f);\n"
    "    r4 = -r3*c0.zzzz + c0.wwww;\n"
    "    r3 = r3*r3;\n"
    "    r3 = r3*r4;\n"
    "    r1 = clamp(r1 - hg_Params[2].yyyy, 0.00000f, 1.00000f);\n"
    "    r1 = clamp(c0.yyyy - r1, 0.00000f, 1.00000f);\n"
    "    r4 = -r1*c0.zzzz + c0.wwww;\n"
    "    r1 = r1*r1;\n"
    "    r1 = r1*r4;\n"
    "    r2.xy = clamp(r2.xy, 0.00000f, 1.00000f);\n"
    "    r2.xy = r2.xy*hg_Params[0].zz + hg_Params[0].ww;\n"
    "    r4.x = r2.x + c0.y;\n"
    "    r4.x = r4.x*-r2.x + r4.x;\n"
    "    r4.xy = r2.xy/r4.xx;\n"
    "    r4.xy = clamp(r4.xy*hg_Params[1].xx + hg_Params[1].yy, 0.00000f, 1.00000f);\n"
    "    r4.xy = r4.xy*hg_Params[1].zz;\n"
    "    r0.xy = r0.xy*r4.xy;\n"
    "    r0.xy = r0.xy*hg_Params[5].xy + hg_Params[5].zw;\n"
    "    r2.xy = fmax(r0.xy, -hg_Params[3].xy);\n"
    "    r2.xy = fmin(r2.xy, hg_Params[3].xy);\n"
    "    r4.xy = -hg_Params[3].xy - r0.xy;\n"
    "    r0.xy = r0.xy - hg_Params[3].xy;\n"
    "    r4.x = fmax(r4.x, r4.y);\n"
    "    r4.y = fmax(r0.x, r0.y);\n"
    "    r4.x = fmax(r4.x, r4.y);\n"
    "    r2.xy = r2.xy + hg_Params[6].xy;\n"
    "    r2.xy = r2.xy*hg_Params[6].zw;\n"
    "    r2 = hg_Texture1.sample(hg_Sampler1, r2.xy);\n"
    "    r2 = select(r2, c0.xxxx, -r4.xxxx < 0.00000f);\n"
    "    r0 = color0;\n"
    "    r3 = mix(r0, r2, r3);\n"
    "    output.color0 = mix(r3, r0, r1);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28AE7AC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcRingLens");
}

void sub_1B28AE7BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28AE97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28AE9D4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28AE9CCLL);
}

_QWORD *HgcRingLens::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcRingLens [hgc1]");
}

uint64_t HgcRingLens::BindTexture(HgcRingLens *this, HGHandler *a2, int a3)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  int v8;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      return 0xFFFFFFFFLL;
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v6.n128_u32[0] = 1.0;
      v7.n128_u32[0] = 1.0;
    }
    else
    {
      v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v4.n128_f32[0] = (float)*((int *)a2 + 60);
    v5.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 6, v4, v5, v6, v7);
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    v8 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v8)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  return 0;
}

uint64_t HgcRingLens::Bind(HgcRingLens *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HgcRingLens *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcRingLens::RenderTile(HgcRingLens *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  _OWORD *v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  float32x4_t v71;
  uint64_t v72;
  int32x4_t v73;
  float32x2_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t *v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  __int128 v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t *v111;
  unsigned int v112;
  _OWORD *v113;
  float32x4_t v114;
  float32x4_t v115;
  int32x2_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  uint64_t v135;
  float32x4_t v136;
  uint64_t v137;
  int32x4_t v138;
  float32x2_t v139;
  float32x4_t *v140;
  float32x4_t v141;
  int8x16_t v142;
  float32x4_t v143;
  int32x4_t v144;
  __int128 v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcRingLens *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 10);
    v13 = 16 * *((int *)a2 + 6);
    v14 = 16 * *((int *)a2 + 22);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    v16 = v9;
    do
    {
      if (v10 < 2)
      {
        v112 = 0;
        v19 = v16;
      }
      else
      {
        v17 = 0;
        v18 = 16;
        v19 = v16;
        do
        {
          v20 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v21 = (_OWORD *)*((_QWORD *)this + 51);
          v22 = *((float32x4_t *)v21 + 3);
          v23 = *((int8x16_t *)v21 + 4);
          v24 = (float32x4_t)vextq_s8(v23, v23, 8uLL);
          v25 = vaddq_f32(vmulq_f32(v19, (float32x4_t)v23), v24);
          v26 = vaddq_f32(vmulq_f32(v20, (float32x4_t)v23), v24);
          v27 = (int32x2_t)vmulq_f32(v25, v25).u64[0];
          v23.i64[0] = vmulq_f32(v26, v26).u64[0];
          v28 = vaddq_f32((float32x4_t)vdupq_lane_s32(v27, 0), (float32x4_t)vdupq_lane_s32(v27, 1));
          v29 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.i8, 1));
          v31 = *((int8x16_t *)v21 + 5);
          v30 = *((float32x4_t *)v21 + 6);
          v32 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 0)), v30);
          v33 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 0)), v30);
          v34 = vminq_f32(vmulq_f32(v32, vrsqrtsq_f32(vmulq_n_f32(v32, v28.f32[0]), v32)), v30);
          v35 = vminq_f32(vmulq_f32(v33, vrsqrtsq_f32(vmulq_n_f32(v33, v29.f32[0]), v33)), v30);
          v36 = (int8x16_t)vmulq_f32(v34, vrsqrtsq_f32(vmulq_n_f32(v34, v28.f32[0]), v34));
          v37 = (int8x16_t)vmulq_f32(v35, vrsqrtsq_f32(vmulq_n_f32(v35, v29.f32[0]), v35));
          v38 = *((int8x16_t *)v21 + 7);
          v39 = *((float32x4_t *)v21 + 8);
          v40 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v28, (float32x4_t)v38), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v38, v28), v38, v36), v38);
          v41 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v29, (float32x4_t)v38), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v38, v29), v38, v37), v38);
          v42 = vmulq_f32(v25, v40);
          v43 = vmulq_f32(v26, v41);
          v44 = vmulq_f32(v28, v40);
          v45 = vmulq_f32(v29, v41);
          v46 = *((float32x4_t *)v21 + 1);
          v47 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21, 1);
          v48 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v21, 3);
          v49 = vaddq_f32(v48, vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v47, vmulq_n_f32(v44, COERCE_FLOAT(*v21))), (float32x4_t)v38), v39), *(float32x4_t *)v21, 2));
          v50 = vaddq_f32(v48, vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v47, vmulq_n_f32(v45, COERCE_FLOAT(*v21))), (float32x4_t)v38), v39), *(float32x4_t *)v21, 2));
          v51 = vaddq_f32(v39, v49);
          v52 = vaddq_f32(v39, v50);
          v53 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v51, vmulq_f32(v49, v51)), 0);
          v54 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v52, vmulq_f32(v50, v52)), 0);
          v55 = *((float32x4_t *)v21 + 11);
          v56 = vminq_f32(vmaxq_f32(vrecpeq_f32(v53), v55), v30);
          v57 = vminq_f32(vmaxq_f32(vrecpeq_f32(v54), v55), v30);
          v58 = vminq_f32(vmaxq_f32(vmulq_f32(v56, vrecpsq_f32(v53, v56)), v55), v30);
          v59 = vminq_f32(vmaxq_f32(vmulq_f32(v57, vrecpsq_f32(v54, v57)), v55), v30);
          v60 = vmulq_f32(v50, vmulq_f32(v59, vrecpsq_f32(v54, v59)));
          v61 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1);
          v62 = vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v61, vmulq_n_f32(v60, v46.f32[0])), (float32x4_t)v38), v39), v46, 2);
          v63 = vmulq_f32(v42, vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v61, vmulq_n_f32(vmulq_f32(v49, vmulq_f32(v58, vrecpsq_f32(v53, v58))), v46.f32[0])), (float32x4_t)v38), v39), v46, 2));
          v64 = vmulq_f32(v43, v62);
          v65 = (float32x4_t)vextq_s8(v31, v31, 8uLL);
          v66 = vaddq_f32(vmulq_f32(v63, (float32x4_t)v31), v65);
          v67 = vaddq_f32(vmulq_f32((float32x4_t)v31, v64), v65);
          v68 = vnegq_f32(v22);
          v69 = vminq_f32(vmaxq_f32(v67, v68), v22);
          v70 = *((int *)a2 + 26);
          v71 = vsubq_f32(vminq_f32(vmaxq_f32(v66, v68), v22), v9);
          v72 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v73 = vaddq_s32(vcvtq_s32_f32(v71), vcltzq_f32(v71));
            v74 = (float32x2_t)vsubq_f32(v71, vcvtq_f32_s32(v73)).u64[0];
            v75 = (float32x4_t *)(v72 + 16 * (v73.i32[0] + v73.i32[1] * (int)v70));
            v76 = vaddq_f32(*v75, vmulq_n_f32(vsubq_f32(v75[1], *v75), v74.f32[0]));
            v77 = (int8x16_t)vaddq_f32(v76, vmulq_lane_f32(vsubq_f32(vaddq_f32(v75[v70], vmulq_n_f32(vsubq_f32(v75[(int)v70 + 1], v75[v70]), v74.f32[0])), v76), v74, 1));
            v78 = vsubq_f32(v69, v9);
            v79 = vaddq_s32(vcvtq_s32_f32(v78), vcltzq_f32(v78));
            v78.i64[0] = vsubq_f32(v78, vcvtq_f32_s32(v79)).u64[0];
            v80 = (float32x4_t *)(v72 + 16 * (v79.i32[0] + v79.i32[1] * (int)v70));
            v81 = vaddq_f32(*v80, vmulq_n_f32(vsubq_f32(v80[1], *v80), v78.f32[0]));
            v82 = (int8x16_t)vaddq_f32(v81, vmulq_lane_f32(vsubq_f32(vaddq_f32(v80[v70], vmulq_n_f32(vsubq_f32(v80[(int)v70 + 1], v80[v70]), v78.f32[0])), v81), *(float32x2_t *)v78.f32, 1));
          }
          else
          {
            v83 = vaddq_f32(v71, v15);
            v84 = vcvtq_s32_f32(v83);
            v83.i64[0] = vaddq_s32(v84, vcgtq_f32(vcvtq_f32_s32(v84), v83)).u64[0];
            v77 = *(int8x16_t *)(v72 + 16 * (v83.i32[0] + v83.i32[1] * (int)v70));
            v85 = vaddq_f32(vsubq_f32(v69, v9), v15);
            v86 = vcvtq_s32_f32(v85);
            v85.i64[0] = vaddq_s32(v86, vcgtq_f32(vcvtq_f32_s32(v86), v85)).u64[0];
            v82 = *(int8x16_t *)(v72 + 16 * (v85.i32[0] + v85.i32[1] * (int)v70));
          }
          v87 = v21[2];
          v88 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v87, 0);
          v89 = vminq_f32(vmaxq_f32(vsubq_f32(v39, vminq_f32(vmaxq_f32(vsubq_f32(v44, v88), (float32x4_t)v38), v39)), (float32x4_t)v38), v39);
          v90 = vminq_f32(vmaxq_f32(vsubq_f32(v39, vminq_f32(vmaxq_f32(vsubq_f32(v45, v88), (float32x4_t)v38), v39)), (float32x4_t)v38), v39);
          v91 = *((float32x4_t *)v21 + 9);
          v92 = *((float32x4_t *)v21 + 10);
          v93 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v87, 1);
          v94 = vminq_f32(vmaxq_f32(vsubq_f32(v39, vminq_f32(vmaxq_f32(vsubq_f32(v44, v93), (float32x4_t)v38), v39)), (float32x4_t)v38), v39);
          v95 = vminq_f32(vmaxq_f32(vsubq_f32(v39, vminq_f32(vmaxq_f32(vsubq_f32(v45, v93), (float32x4_t)v38), v39)), (float32x4_t)v38), v39);
          v96 = vmulq_f32(vmulq_f32(v94, v94), vsubq_f32(v91, vmulq_f32(v92, v94)));
          v97 = vsubq_f32(v68, v66);
          v98 = vsubq_f32(v68, v67);
          v99 = vsubq_f32(v66, v22);
          v100 = vsubq_f32(v67, v22);
          v101 = (int8x16_t)vmaxq_f32(v98, (float32x4_t)vrev64q_s32((int32x4_t)v98));
          v102 = *((int8x16_t *)v21 + 12);
          v103 = (float32x4_t)vbslq_s8(v102, (int8x16_t)vmaxq_f32(v97, (float32x4_t)vrev64q_s32((int32x4_t)v97)), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v99), v99));
          v104 = (float32x4_t)vbslq_s8(v102, v101, (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v100), v100));
          v105 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v103, (float32x4_t)vrev64q_s32((int32x4_t)v103)), 0), (float32x4_t)v38), v38, v77);
          v106 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v104, (float32x4_t)vrev64q_s32((int32x4_t)v104)), 0), (float32x4_t)v38), v38, v82);
          v107 = *(float32x4_t *)(v12 + v18 - 16);
          v108 = *(float32x4_t *)(v12 + v18);
          v109 = vaddq_f32(v107, vmulq_f32(vmulq_f32(vmulq_f32(v89, v89), vsubq_f32(v91, vmulq_f32(v89, v92))), vsubq_f32(v105, v107)));
          v110 = vaddq_f32(v108, vmulq_f32(vmulq_f32(vmulq_f32(v90, v90), vsubq_f32(v91, vmulq_f32(v90, v92))), vsubq_f32(v106, v108)));
          v111 = (float32x4_t *)(v11 + v18);
          v111[-1] = vaddq_f32(v109, vmulq_f32(v96, vsubq_f32(v107, v109)));
          *v111 = vaddq_f32(v110, vmulq_f32(vmulq_f32(vmulq_f32(v95, v95), vsubq_f32(v91, vmulq_f32(v92, v95))), vsubq_f32(v108, v110)));
          v19 = vaddq_f32(v20, (float32x4_t)xmmword_1B304F230);
          v17 -= 2;
          v18 += 32;
        }
        while (v10 + v17 > 1);
        v112 = -v17;
      }
      if ((int)v112 < v10)
      {
        v113 = (_OWORD *)*((_QWORD *)this + 51);
        v114 = *((float32x4_t *)v113 + 3);
        v115 = vaddq_f32(vmulq_f32(v19, *((float32x4_t *)v113 + 4)), (float32x4_t)vextq_s8(*((int8x16_t *)v113 + 4), *((int8x16_t *)v113 + 4), 8uLL));
        v116 = (int32x2_t)vmulq_f32(v115, v115).u64[0];
        v117 = vaddq_f32((float32x4_t)vdupq_lane_s32(v116, 0), (float32x4_t)vdupq_lane_s32(v116, 1));
        v118 = *((float32x4_t *)v113 + 6);
        v119 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.f32, 0)), v118);
        v120 = vminq_f32(vmulq_f32(v119, vrsqrtsq_f32(vmulq_n_f32(v119, v117.f32[0]), v119)), v118);
        v121 = (int8x16_t)vmulq_f32(v120, vrsqrtsq_f32(vmulq_n_f32(v120, v117.f32[0]), v120));
        v122 = *((int8x16_t *)v113 + 7);
        v123 = *((float32x4_t *)v113 + 8);
        v124 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v117, (float32x4_t)v122), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v122, v117), v122, v121), v122);
        v125 = vmulq_f32(v115, v124);
        v126 = vmulq_f32(v117, v124);
        v127 = vaddq_f32((float32x4_t)vdupq_laneq_s32(*(int32x4_t *)v113, 3), vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113, 1), vmulq_n_f32(v126, COERCE_FLOAT(*v113))), (float32x4_t)v122), v123), *(float32x4_t *)v113, 2));
        v128 = vaddq_f32(v123, v127);
        v129 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v128, vmulq_f32(v127, v128)), 0);
        v130 = *((float32x4_t *)v113 + 11);
        v131 = vminq_f32(vmaxq_f32(vrecpeq_f32(v129), v130), v118);
        v132 = vminq_f32(vmaxq_f32(vmulq_f32(v131, vrecpsq_f32(v129, v131)), v130), v118);
        v133 = vaddq_f32(vmulq_f32(*((float32x4_t *)v113 + 5), vmulq_f32(v125, vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v113[1], 1), vmulq_n_f32(vmulq_f32(v127, vmulq_f32(v132, vrecpsq_f32(v129, v132))), COERCE_FLOAT(v113[1]))), (float32x4_t)v122), v123), *((float32x4_t *)v113 + 1), 2))), (float32x4_t)vextq_s8(*((int8x16_t *)v113 + 5), *((int8x16_t *)v113 + 5), 8uLL));
        v134 = vnegq_f32(v114);
        v135 = *((int *)a2 + 26);
        v136 = vsubq_f32(vminq_f32(vmaxq_f32(v133, v134), v114), v9);
        v137 = *((_QWORD *)a2 + 12);
        if (v5)
        {
          v138 = vaddq_s32(vcvtq_s32_f32(v136), vcltzq_f32(v136));
          v139 = (float32x2_t)vsubq_f32(v136, vcvtq_f32_s32(v138)).u64[0];
          v140 = (float32x4_t *)(v137 + 16 * (v138.i32[0] + v138.i32[1] * (int)v135));
          v141 = vaddq_f32(*v140, vmulq_n_f32(vsubq_f32(v140[1], *v140), v139.f32[0]));
          v142 = (int8x16_t)vaddq_f32(v141, vmulq_lane_f32(vsubq_f32(vaddq_f32(v140[v135], vmulq_n_f32(vsubq_f32(v140[(int)v135 + 1], v140[v135]), v139.f32[0])), v141), v139, 1));
        }
        else
        {
          v143 = vaddq_f32(v136, v15);
          v144 = vcvtq_s32_f32(v143);
          v143.i64[0] = vaddq_s32(v144, vcgtq_f32(vcvtq_f32_s32(v144), v143)).u64[0];
          v142 = *(int8x16_t *)(v137 + 16 * (v143.i32[0] + v143.i32[1] * (int)v135));
        }
        v145 = v113[2];
        v146 = vminq_f32(vmaxq_f32(vsubq_f32(v123, vminq_f32(vmaxq_f32(vsubq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v145, 0)), (float32x4_t)v122), v123)), (float32x4_t)v122), v123);
        v147 = *((float32x4_t *)v113 + 9);
        v148 = *((float32x4_t *)v113 + 10);
        v149 = vminq_f32(vmaxq_f32(vsubq_f32(v123, vminq_f32(vmaxq_f32(vsubq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v145, 1)), (float32x4_t)v122), v123)), (float32x4_t)v122), v123);
        v150 = vsubq_f32(v134, v133);
        v151 = vsubq_f32(v133, v114);
        v152 = (float32x4_t)vbslq_s8(*((int8x16_t *)v113 + 12), (int8x16_t)vmaxq_f32(v150, (float32x4_t)vrev64q_s32((int32x4_t)v150)), (int8x16_t)vmaxq_f32((float32x4_t)vrev64q_s32((int32x4_t)v151), v151));
        v153 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmaxq_f32(v152, (float32x4_t)vrev64q_s32((int32x4_t)v152)), 0), (float32x4_t)v122), v122, v142);
        v154 = *(float32x4_t *)(v12 + 16 * v112);
        v155 = vaddq_f32(v154, vmulq_f32(vmulq_f32(vmulq_f32(v146, v146), vsubq_f32(v147, vmulq_f32(v146, v148))), vsubq_f32(v153, v154)));
        *(float32x4_t *)(v11 + 16 * v112) = vaddq_f32(v155, vmulq_f32(vmulq_f32(vmulq_f32(v149, v149), vsubq_f32(v147, vmulq_f32(v148, v149))), vsubq_f32(v154, v155)));
      }
      v16 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F240);
      v12 += v14;
      v11 += v13;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcRingLens::GetDOD(HgcRingLens *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3)
  {
    if (a3 == 1)
    {
      if ((*(int (**)(HgcRingLens *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
      {
        v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
        HGRectGrow(v5, v4, v6);
      }
      v7 = &HGRectInfinite;
    }
    else
    {
      v7 = &HGRectNull;
    }
    return *(_QWORD *)v7;
  }
  return v5;
}

uint64_t HgcRingLens::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  HGNode *Input;
  uint64_t DOD;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3)
    return *(_QWORD *)&a4.var0;
  if (a3 != 1)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 1u);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcRingLens::HgcRingLens(HgcRingLens *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F0638;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(int32x4_t *)(v3 + 96) = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  __asm
  {
    FMOV            V0.4S, #1.0
    FMOV            V1.4S, #3.0
  }
  *(_OWORD *)(v3 + 128) = _Q0;
  *(_OWORD *)(v3 + 144) = _Q1;
  *(_QWORD *)&_Q0 = 0x4000000040000000;
  *((_QWORD *)&_Q0 + 1) = 0x4000000040000000;
  *(_OWORD *)(v3 + 160) = _Q0;
  *(_OWORD *)(v3 + 176) = xmmword_1B30527A0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3050E20;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcRingLens *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28AF5B0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcRingLens::~HgcRingLens(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F0638;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C400F93440CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcRingLens::~HgcRingLens(this);
  HGObject::operator delete(v1);
}

uint64_t HgcRingLens::SetParameter(HgcRingLens *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcRingLens::GetParameter(HgcRingLens *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 5)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcScrape::GetProgram(HgcScrape *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000055d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.zw = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    s0.xy = s0.zw/hg_Params[4].xy;\n"
             "    s0.zw = s0.xy*hg_Params[1].xy;\n"
             "    s1.x = dot(s0.xy, hg_Params[1].xy);\n"
             "    s0.z = float(s0.z >= -s0.w);\n"
             "    s1.y = float(s1.x >= hg_Params[2].x);\n"
             "    s1.z = float(-s1.y >= float(c0.z));\n"
             "    s1.z = fmin(s0.z, s1.z);\n"
             "    s1.w = s1.x*hg_Params[3].w;\n"
             "    s0.w = float(c0.x)*hg_Params[2].x + -s1.x;\n"
             "    s0.z = fmin(s0.z, s1.y);\n"
             "    s0.z = select(float(c0.z), s0.w, -s0.z < 0.00000h);\n"
             "    s1.w = -s1.x*s1.w;\n"
             "    s0.w = s1.w*float(c0.x);\n"
             "    s0.z = select(s0.z, s0.w, -s1.z < 0.00000h);\n"
             "    s0.zw = s0.zz*hg_Params[1].xy + s0.xy;\n"
             "    s0.xy = 1.00000f / hg_Params[4].zw;\n"
             "    s0.xy = s0.zw*s0.xy + hg_Params[0].xy;\n"
             "    s0.xy = s0.xy + hg_Params[5].xy;\n"
             "    s0.xy = s0.xy*hg_Params[5].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=8c06b24b:742de15f:1accd534:17b6e57b\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0006:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000053b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.zw = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    r0.xy = r0.zw/hg_Params[4].xy;\n"
             "    r0.zw = r0.xy*hg_Params[1].xy;\n"
             "    r1.x = dot(r0.xy, hg_Params[1].xy);\n"
             "    r0.z = float(r0.z >= -r0.w);\n"
             "    r1.y = float(r1.x >= hg_Params[2].x);\n"
             "    r1.z = float(-r1.y >= c0.z);\n"
             "    r1.z = fmin(r0.z, r1.z);\n"
             "    r1.w = r1.x*hg_Params[3].w;\n"
             "    r0.w = c0.x*hg_Params[2].x + -r1.x;\n"
             "    r0.z = fmin(r0.z, r1.y);\n"
             "    r0.z = select(c0.z, r0.w, -r0.z < 0.00000f);\n"
             "    r1.w = -r1.x*r1.w;\n"
             "    r0.w = r1.w*c0.x;\n"
             "    r0.z = select(r0.z, r0.w, -r1.z < 0.00000f);\n"
             "    r0.zw = r0.zz*hg_Params[1].xy + r0.xy;\n"
             "    r0.xy = 1.00000f / hg_Params[4].zw;\n"
             "    r0.xy = r0.zw*r0.xy + hg_Params[0].xy;\n"
             "    r0.xy = r0.xy + hg_Params[5].xy;\n"
             "    r0.xy = r0.xy*hg_Params[5].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=48ec55eb:abdbcddb:7094ba93:e7fe714b\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0006:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000005df\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.zw = hg_TexCoord0.xy - hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.zw/hg_ProgramLocal4.xy;\n"
           "    r0.zw = r0.xy*hg_ProgramLocal1.xy;\n"
           "    r1.x = dot(r0.xy, hg_ProgramLocal1.xy);\n"
           "    r0.z = float(r0.z >= -r0.w);\n"
           "    r1.y = float(r1.x >= hg_ProgramLocal2.x);\n"
           "    r1.z = float(-r1.y >= c0.z);\n"
           "    r1.z = min(r0.z, r1.z);\n"
           "    r1.w = r1.x*hg_ProgramLocal3.w;\n"
           "    r0.w = c0.x*hg_ProgramLocal2.x + -r1.x;\n"
           "    r0.z = min(r0.z, r1.y);\n"
           "    r0.z = -r0.z < 0.00000 ? r0.w : c0.z;\n"
           "    r1.w = -r1.x*r1.w;\n"
           "    r0.w = r1.w*c0.x;\n"
           "    r0.z = -r1.z < 0.00000 ? r0.w : r0.z;\n"
           "    r0.zw = r0.zz*hg_ProgramLocal1.xy + r0.xy;\n"
           "    r0.xy = vec2(1.00000) / hg_ProgramLocal4.zw;\n"
           "    r0.xy = r0.zw*r0.xy + hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal5.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal5.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=5a52b265:2b1e48aa:6b76214c:5cb8511c\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0006:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcScrape::InitProgramDescriptor(HgcScrape *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcScrape_hgc_visible", "//Metal1.0     \n//LEN=0000000477\n[[ visible ]] FragmentOut HgcScrape_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.zw = texCoord0.xy - hg_Params[0].xy;\n"
    "    r0.xy = r0.zw/hg_Params[4].xy;\n"
    "    r0.zw = r0.xy*hg_Params[1].xy;\n"
    "    r1.x = dot(r0.xy, hg_Params[1].xy);\n"
    "    r0.z = float(r0.z >= -r0.w);\n"
    "    r1.y = float(r1.x >= hg_Params[2].x);\n"
    "    r1.z = float(-r1.y >= c0.z);\n"
    "    r1.z = fmin(r0.z, r1.z);\n"
    "    r1.w = r1.x*hg_Params[3].w;\n"
    "    r0.w = c0.x*hg_Params[2].x + -r1.x;\n"
    "    r0.z = fmin(r0.z, r1.y);\n"
    "    r0.z = select(c0.z, r0.w, -r0.z < 0.00000f);\n"
    "    r1.w = -r1.x*r1.w;\n"
    "    r0.w = r1.w*c0.x;\n"
    "    r0.z = select(r0.z, r0.w, -r1.z < 0.00000f);\n"
    "    r0.zw = r0.zz*hg_Params[1].xy + r0.xy;\n"
    "    r0.xy = 1.00000f / hg_Params[4].zw;\n"
    "    r0.xy = r0.zw*r0.xy + hg_Params[0].xy;\n"
    "    r0.xy = r0.xy + hg_Params[5].xy;\n"
    "    r0.xy = r0.xy*hg_Params[5].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28AF7B8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcScrape");
}

void sub_1B28AF7C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052790;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28AF948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28AF998()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28AF990);
}

_QWORD *HgcScrape::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcScrape [hgc1]");
}

uint64_t HgcScrape::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 5, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcScrape::Bind(HgcScrape *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcScrape *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcScrape::RenderTile(HgcScrape *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  uint64_t v87;
  float32x4_t v88;
  uint64_t v89;
  int32x4_t v90;
  float32x2_t v91;
  float32x4_t *v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t *v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int32x4_t v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  float32x4_t *v111;
  uint64_t v112;
  float32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  float32x4_t v116;
  int8x16_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int8x16_t v123;
  float32x4_t v124;
  int8x16_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int32x4_t v133;
  float32x4_t v134;
  int32x4_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  float32x4_t v140;
  uint64_t v141;
  float32x4_t v142;
  uint64_t v143;
  int32x4_t v144;
  float32x2_t v145;
  float32x4_t *v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int32x4_t v150;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcScrape *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = (float32x4_t)v9;
    do
    {
      if (v10 < 3)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v20 = *((_QWORD *)this + 51);
          v21 = *(int8x16_t *)(v20 + 16);
          v22 = vsubq_f32(v17, *(float32x4_t *)v20);
          v23 = vsubq_f32(v18, *(float32x4_t *)v20);
          v25 = *(int8x16_t *)(v20 + 64);
          v24 = *(int8x16_t *)(v20 + 80);
          v26 = *(float32x4_t *)(v20 + 96);
          v27 = *(int8x16_t *)(v20 + 112);
          v28 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v25), (float32x4_t)v24), v26);
          v29 = vminq_f32(vmaxq_f32(vmulq_f32(v28, vrecpsq_f32((float32x4_t)v25, v28)), (float32x4_t)v24), v26);
          v30 = vmulq_f32(v29, vrecpsq_f32((float32x4_t)v25, v29));
          v31 = (int8x16_t)vmulq_f32(v22, v30);
          v32 = (int8x16_t)vmulq_f32(v23, v30);
          v33 = (int8x16_t)vmulq_f32(vsubq_f32(v19, *(float32x4_t *)v20), v30);
          v34.i64[0] = v31.i64[0];
          v34.i64[1] = vmulq_f32((float32x4_t)v21, (float32x4_t)v31).u64[0];
          v35.i64[0] = v32.i64[0];
          v35.i64[1] = vmulq_f32((float32x4_t)v21, (float32x4_t)v32).u64[0];
          v36.i64[0] = v33.i64[0];
          v36.i64[1] = vmulq_f32((float32x4_t)v21, (float32x4_t)v33).u64[0];
          v37 = vmulq_f32((float32x4_t)v21, v34);
          v38 = vmulq_f32((float32x4_t)v21, v35);
          v39 = vmulq_f32((float32x4_t)v21, v36);
          v40 = (int8x16_t)vaddq_f32(v37, (float32x4_t)vrev64q_s32((int32x4_t)v37));
          v41 = (int8x16_t)vaddq_f32(v38, (float32x4_t)vrev64q_s32((int32x4_t)v38));
          v42 = (int8x16_t)vaddq_f32(v39, (float32x4_t)vrev64q_s32((int32x4_t)v39));
          v31.i64[1] = vandq_s8(v24, (int8x16_t)vcgeq_f32(v34, vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)__PAIR128__(*(unint64_t *)(&v34 + 8), *(unint64_t *)&v31))))).i64[1];
          v32.i64[1] = vandq_s8(v24, (int8x16_t)vcgeq_f32(v35, vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)__PAIR128__(*(unint64_t *)(&v35 + 8), *(unint64_t *)&v32))))).i64[1];
          v33.i64[1] = vandq_s8(v24, (int8x16_t)vcgeq_f32(v36, vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)__PAIR128__(*(unint64_t *)(&v36 + 8), *(unint64_t *)&v33))))).i64[1];
          v43 = *(float32x4_t *)(v20 + 32);
          v44 = *(float32x4_t *)(v20 + 48);
          v46 = *(int8x16_t *)(v20 + 128);
          v45 = *(int8x16_t *)(v20 + 144);
          v47 = vbslq_s8(v46, v40, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v27, (int8x16_t)vcgeq_f32((float32x4_t)v40, v43))));
          v48 = vbslq_s8(v46, v41, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v27, (int8x16_t)vcgeq_f32((float32x4_t)v41, v43))));
          v49 = vbslq_s8(v46, v42, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v27, (int8x16_t)vcgeq_f32((float32x4_t)v42, v43))));
          v50 = (float32x4_t)vextq_s8(v9, vandq_s8(v45, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v47), (float32x4_t)v27)), 0xCuLL);
          v51 = (float32x4_t)vextq_s8(v9, vandq_s8(v45, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v48), (float32x4_t)v27)), 0xCuLL);
          v52 = (float32x4_t)vextq_s8(v9, vandq_s8(v45, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v49), (float32x4_t)v27)), 0xCuLL);
          v50.i64[0] = v47.i64[0];
          v51.i64[0] = v48.i64[0];
          v52.i64[0] = v49.i64[0];
          v47.i64[1] = vminq_f32(*(float32x4_t *)&v31, v50).i64[1];
          v48.i64[1] = vminq_f32(*(float32x4_t *)&v32, v51).i64[1];
          v49.i64[1] = vminq_f32(*(float32x4_t *)&v33, v52).i64[1];
          v53 = *(int8x16_t *)(v20 + 160);
          v54 = *(int8x16_t *)(v20 + 176);
          v55 = vbslq_s8(v53, (int8x16_t)vmulq_n_f32(v44, *(float *)v47.i32), v47);
          v56 = vbslq_s8(v53, (int8x16_t)vmulq_n_f32(v44, *(float *)v48.i32), v48);
          v57 = vbslq_s8(v53, (int8x16_t)vmulq_n_f32(v44, *(float *)v49.i32), v49);
          v58 = (int8x16_t)vnegq_f32((float32x4_t)v55);
          v59 = (int8x16_t)vnegq_f32((float32x4_t)v56);
          v60 = (int8x16_t)vnegq_f32((float32x4_t)v57);
          v61 = vmulq_n_f32((float32x4_t)v45, v43.f32[0]);
          v62 = vbslq_s8(v53, (int8x16_t)vaddq_f32(v61, (float32x4_t)vextq_s8(v58, v58, 4uLL)), v31);
          v63 = vbslq_s8(v53, (int8x16_t)vaddq_f32(v61, (float32x4_t)vextq_s8(v59, v59, 4uLL)), v32);
          v64 = vbslq_s8(v53, (int8x16_t)vaddq_f32(v61, (float32x4_t)vextq_s8(v60, v60, 4uLL)), v33);
          v65 = (int32x4_t)vbslq_s8(v54, (int8x16_t)vminq_f32((float32x4_t)v62, (float32x4_t)vextq_s8(v55, v55, 0xCuLL)), v62);
          v66 = (int32x4_t)vbslq_s8(v54, (int8x16_t)vminq_f32((float32x4_t)v63, (float32x4_t)vextq_s8(v56, v56, 0xCuLL)), v63);
          v67 = (int32x4_t)vbslq_s8(v54, (int8x16_t)vminq_f32((float32x4_t)v64, (float32x4_t)vextq_s8(v57, v57, 0xCuLL)), v64);
          v68 = (float32x4_t)vbslq_s8(v54, v55, (int8x16_t)vmulq_n_f32((float32x4_t)v55, *(float *)v58.i32));
          v69 = (float32x4_t)vbslq_s8(v54, v56, (int8x16_t)vmulq_n_f32((float32x4_t)v56, *(float *)v59.i32));
          v70 = (float32x4_t)vbslq_s8(v54, v57, (int8x16_t)vmulq_n_f32((float32x4_t)v57, *(float *)v60.i32));
          v65.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)&v65, *(float32x4_t *)&v45), (int8x16_t)vrev64q_s32(v65), v45).i64[1];
          v71 = (int32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_f32((float32x4_t)v45, v68), (int8x16_t)v65);
          v66.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)&v66, *(float32x4_t *)&v45), (int8x16_t)vrev64q_s32(v66), v45).i64[1];
          v72 = (int32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_f32((float32x4_t)v45, v69), (int8x16_t)v66);
          v67.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)&v67, *(float32x4_t *)&v45), (int8x16_t)vrev64q_s32(v67), v45).i64[1];
          v73 = (int32x4_t)vbslq_s8(v53, (int8x16_t)vmulq_f32((float32x4_t)v45, v70), (int8x16_t)v67);
          v74 = (float32x4_t)vextq_s8(v21, v21, 8uLL);
          v75 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v71.i64[0], 0), vmulq_laneq_f32(v74, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, (float32x4_t)v45), (int8x16_t)vdupq_laneq_s32(v71, 3), (int8x16_t)v71), 2));
          v76 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v72.i64[0], 0), vmulq_laneq_f32(v74, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v69, (float32x4_t)v45), (int8x16_t)vdupq_laneq_s32(v72, 3), (int8x16_t)v72), 2));
          v77 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v73.i64[0], 0), vmulq_laneq_f32(v74, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v70, (float32x4_t)v45), (int8x16_t)vdupq_laneq_s32(v73, 3), (int8x16_t)v73), 2));
          v78 = (float32x4_t)vextq_s8(v25, v25, 8uLL);
          v79 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v78), *(float32x4_t *)(v20 + 192)), (float32x4_t)v24), v26);
          v80 = (int8x16_t)vmulq_f32(v79, vrecpsq_f32(v78, v79));
          v26.i64[0] = v80.i64[0];
          v78.i64[0] = v80.i64[0];
          v81 = (float32x4_t)vextq_s8(v75, v80, 8uLL);
          v82 = (float32x4_t)vextq_s8(v76, v80, 8uLL);
          v53.i64[0] = v80.i64[0];
          v53.i64[1] = v75.i64[1];
          v26.i64[1] = v76.i64[1];
          v83 = (float32x4_t)vextq_s8(v77, v80, 8uLL);
          v78.i64[1] = v77.i64[1];
          v84 = vaddq_f32(*(float32x4_t *)v20, vmulq_f32(v81, (float32x4_t)v53));
          v85 = vaddq_f32(*(float32x4_t *)v20, vmulq_f32(v82, v26));
          v86 = vaddq_f32(*(float32x4_t *)v20, vmulq_f32(v83, v78));
          v87 = *((int *)a2 + 22);
          v88 = vsubq_f32(v84, (float32x4_t)v9);
          v89 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v90 = vaddq_s32(vcvtq_s32_f32(v88), vcltzq_f32(v88));
            v91 = (float32x2_t)vsubq_f32(v88, vcvtq_f32_s32(v90)).u64[0];
            v92 = (float32x4_t *)(v89 + 16 * (v90.i32[0] + v90.i32[1] * (int)v87));
            v93 = vaddq_f32(*v92, vmulq_n_f32(vsubq_f32(v92[1], *v92), v91.f32[0]));
            v94 = vaddq_f32(v93, vmulq_lane_f32(vsubq_f32(vaddq_f32(v92[v87], vmulq_n_f32(vsubq_f32(v92[(int)v87 + 1], v92[v87]), v91.f32[0])), v93), v91, 1));
            v95 = vsubq_f32(v85, (float32x4_t)v9);
            v96 = vaddq_s32(vcvtq_s32_f32(v95), vcltzq_f32(v95));
            v95.i64[0] = vsubq_f32(v95, vcvtq_f32_s32(v96)).u64[0];
            v97 = (float32x4_t *)(v89 + 16 * (v96.i32[0] + v96.i32[1] * (int)v87));
            v98 = vaddq_f32(*v97, vmulq_n_f32(vsubq_f32(v97[1], *v97), v95.f32[0]));
            v99 = vaddq_f32(v98, vmulq_lane_f32(vsubq_f32(vaddq_f32(v97[v87], vmulq_n_f32(vsubq_f32(v97[(int)v87 + 1], v97[v87]), v95.f32[0])), v98), *(float32x2_t *)v95.f32, 1));
            v100 = vsubq_f32(v86, (float32x4_t)v9);
            v101 = vaddq_s32(vcvtq_s32_f32(v100), vcltzq_f32(v100));
            v100.i64[0] = vsubq_f32(v100, vcvtq_f32_s32(v101)).u64[0];
            v102 = (float32x4_t *)(v89 + 16 * (v101.i32[0] + v101.i32[1] * (int)v87));
            v103 = vaddq_f32(*v102, vmulq_n_f32(vsubq_f32(v102[1], *v102), v100.f32[0]));
            v104 = vaddq_f32(v103, vmulq_lane_f32(vsubq_f32(vaddq_f32(v102[v87], vmulq_n_f32(vsubq_f32(v102[(int)v87 + 1], v102[v87]), v100.f32[0])), v103), *(float32x2_t *)v100.f32, 1));
          }
          else
          {
            v105 = vaddq_f32(v88, v13);
            v106 = vcvtq_s32_f32(v105);
            v105.i64[0] = vaddq_s32(v106, vcgtq_f32(vcvtq_f32_s32(v106), v105)).u64[0];
            v94 = *(float32x4_t *)(v89 + 16 * (v105.i32[0] + v105.i32[1] * (int)v87));
            v107 = vaddq_f32(vsubq_f32(v85, (float32x4_t)v9), v13);
            v108 = vcvtq_s32_f32(v107);
            v107.i64[0] = vaddq_s32(v108, vcgtq_f32(vcvtq_f32_s32(v108), v107)).u64[0];
            v99 = *(float32x4_t *)(v89 + 16 * (v107.i32[0] + v107.i32[1] * (int)v87));
            v109 = vaddq_f32(vsubq_f32(v86, (float32x4_t)v9), v13);
            v110 = vcvtq_s32_f32(v109);
            v109.i64[0] = vaddq_s32(v110, vcgtq_f32(vcvtq_f32_s32(v110), v109)).u64[0];
            v104 = *(float32x4_t *)(v89 + 16 * (v109.i32[0] + v109.i32[1] * (int)v87));
          }
          v111 = (float32x4_t *)(v11 + 16 * v15);
          *v111 = v94;
          v111[1] = v99;
          v111[2] = v104;
          v17 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v15 += 3;
          v16 -= 3;
        }
        while (v16 > 2);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        do
        {
          v112 = *((_QWORD *)this + 51);
          v113 = *(float32x4_t *)(v112 + 16);
          v115 = *(int8x16_t *)(v112 + 64);
          v114 = *(int8x16_t *)(v112 + 80);
          v116 = *(float32x4_t *)(v112 + 96);
          v117 = *(int8x16_t *)(v112 + 112);
          v118 = vminq_f32(vmaxq_f32(vrecpeq_f32((float32x4_t)v115), (float32x4_t)v114), v116);
          v119 = vminq_f32(vmaxq_f32(vmulq_f32(v118, vrecpsq_f32((float32x4_t)v115, v118)), (float32x4_t)v114), v116);
          v120 = (int8x16_t)vmulq_f32(vsubq_f32(v17, *(float32x4_t *)v112), vmulq_f32(v119, vrecpsq_f32((float32x4_t)v115, v119)));
          v121.i64[0] = v120.i64[0];
          v121.i64[1] = vmulq_f32(v113, (float32x4_t)v120).u64[0];
          v122 = vmulq_f32(v113, v121);
          v123 = (int8x16_t)vaddq_f32(v122, (float32x4_t)vrev64q_s32((int32x4_t)v122));
          v120.i64[1] = vandq_s8(v114, (int8x16_t)vcgeq_f32(v121, vnegq_f32((float32x4_t)vrev64q_s32((int32x4_t)__PAIR128__(*(unint64_t *)(&v121 + 8), *(unint64_t *)&v120))))).i64[1];
          v124 = *(float32x4_t *)(v112 + 32);
          v125 = *(int8x16_t *)(v112 + 144);
          v126 = vbslq_s8(*(int8x16_t *)(v112 + 128), v123, (int8x16_t)vrev64q_s32((int32x4_t)vandq_s8(v117, (int8x16_t)vcgeq_f32((float32x4_t)v123, v124))));
          v127 = (float32x4_t)vextq_s8(v9, vandq_s8(v125, (int8x16_t)vcgeq_f32(vnegq_f32((float32x4_t)v126), (float32x4_t)v117)), 0xCuLL);
          v127.i64[0] = v126.i64[0];
          v126.i64[1] = vminq_f32(*(float32x4_t *)&v120, v127).i64[1];
          v128 = *(int8x16_t *)(v112 + 160);
          v129 = *(int8x16_t *)(v112 + 176);
          v130 = vbslq_s8(v128, (int8x16_t)vmulq_n_f32(*(float32x4_t *)(v112 + 48), *(float *)v126.i32), v126);
          v131 = (int8x16_t)vnegq_f32((float32x4_t)v130);
          v132 = vbslq_s8(v128, (int8x16_t)vaddq_f32(vmulq_n_f32((float32x4_t)v125, v124.f32[0]), (float32x4_t)vextq_s8(v131, v131, 4uLL)), v120);
          v133 = (int32x4_t)vbslq_s8(v129, (int8x16_t)vminq_f32((float32x4_t)v132, (float32x4_t)vextq_s8(v130, v130, 0xCuLL)), v132);
          v134 = (float32x4_t)vbslq_s8(v129, v130, (int8x16_t)vmulq_n_f32((float32x4_t)v130, *(float *)v131.i32));
          v133.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)&v133, *(float32x4_t *)&v125), (int8x16_t)vrev64q_s32(v133), v125).i64[1];
          v135 = (int32x4_t)vbslq_s8(v128, (int8x16_t)vmulq_f32((float32x4_t)v125, v134), (int8x16_t)v133);
          v136 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v135.i64[0], 0), vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(v113.i64[0], 0), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v134, (float32x4_t)v125), (int8x16_t)vdupq_laneq_s32(v135, 3), (int8x16_t)v135), 2));
          v137 = (float32x4_t)vextq_s8(v115, v115, 8uLL);
          v138 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v137), *(float32x4_t *)(v112 + 192)), (float32x4_t)v114), v116);
          v139 = (int8x16_t)vmulq_f32(v138, vrecpsq_f32(v137, v138));
          v116.i64[0] = v139.i64[0];
          v116.i64[1] = v136.i64[1];
          v140 = vaddq_f32(*(float32x4_t *)v112, vmulq_f32((float32x4_t)vextq_s8(v136, v139, 8uLL), v116));
          v141 = *((int *)a2 + 22);
          v142 = vsubq_f32(v140, (float32x4_t)v9);
          v143 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v144 = vaddq_s32(vcvtq_s32_f32(v142), vcltzq_f32(v142));
            v145 = (float32x2_t)vsubq_f32(v142, vcvtq_f32_s32(v144)).u64[0];
            v146 = (float32x4_t *)(v143 + 16 * (v144.i32[0] + v144.i32[1] * (int)v141));
            v147 = vaddq_f32(*v146, vmulq_n_f32(vsubq_f32(v146[1], *v146), v145.f32[0]));
            v148 = vaddq_f32(v147, vmulq_lane_f32(vsubq_f32(vaddq_f32(v146[v141], vmulq_n_f32(vsubq_f32(v146[(int)v141 + 1], v146[v141]), v145.f32[0])), v147), v145, 1));
          }
          else
          {
            v149 = vaddq_f32(v142, v13);
            v150 = vcvtq_s32_f32(v149);
            v149.i64[0] = vaddq_s32(v150, vcgtq_f32(vcvtq_f32_s32(v150), v149)).u64[0];
            v148 = *(float32x4_t *)(v143 + 16 * (v149.i32[0] + v149.i32[1] * (int)v141));
          }
          *(float32x4_t *)(v11 + 16 * v15) = v148;
          v17 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          ++v15;
        }
        while (v15 < v10);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v11 += v12;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcScrape::GetDOD(HgcScrape *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcScrape *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcScrape::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcScrape::HgcScrape(HgcScrape *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F08A0;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = xmmword_1B3052EB0;
  *(int32x4_t *)(v3 + 96) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 112) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 144) = xmmword_1B3052EC0;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3052ED0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcScrape *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28B04CC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcScrape::~HgcScrape(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F08A0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C405DF52C91);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcScrape::~HgcScrape(this);
  HGObject::operator delete(v1);
}

uint64_t HgcScrape::SetParameter(HgcScrape *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  __n128 *v11;
  float *v12;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_28;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_28;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_28;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == 0.0
        && v11[3].n128_f32[1] == 0.0
        && v11[3].n128_f32[2] == 0.0
        && v11[3].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v11[3].n128_u64[0] = 0;
      v11[3].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[13] = a3;
      goto LABEL_28;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
LABEL_28:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcScrape::GetParameter(HgcScrape *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_7;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_7;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_7;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[52];
      a3[1] = v7[53];
      a3[2] = v7[54];
      v4 = v7 + 55;
      goto LABEL_7;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
LABEL_7:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcSphere::GetProgram(HgcSphere *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000604\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    s1.xy = float2(dot(s0.xy, s0.xy));\n"
             "    s2.xy = rsqrt(s1.xx);\n"
             "    s2.xy = select(s2.xy, float2(c0.xx), s1.xy < 0.00000h);\n"
             "    s2.xy = select(float2(c0.xx), s2.xy, -s1.xy < 0.00000h);\n"
             "    s0.xy = s0.xy*s2.xy;\n"
             "    s2.xy = s1.xy*s2.xy;\n"
             "    s2.xy = s2.xy*-hg_Params[0].xx + float2(c0.yy);\n"
             "    s1.x = rsqrt(s2.x);\n"
             "    s1.x = select(s1.x, float(c0.x), s2.x < 0.00000h);\n"
             "    s1.x = select(float(c0.x), s1.x, -s2.x < 0.00000h);\n"
             "    s1.xy = s2.xy*-s1.xx + float2(c0.yy);\n"
             "    s1.xy = s1.xy*hg_Params[0].yy;\n"
             "    s1.xy = s0.xy*s1.xy;\n"
             "    s1.xy = s1.xy*hg_Params[2].xy + hg_Params[2].zw;\n"
             "    s1.xy = s1.xy + hg_Params[3].xy;\n"
             "    s1.xy = s1.xy*hg_Params[3].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    s0.xy = s0.xy*hg_Params[1].xy;\n"
             "    s0.xy = abs(s0.xy);\n"
             "    s2.x = s2.x*hg_Params[0].y;\n"
             "    s0.x = dot(s0.xy, 1.00000f);\n"
             "    s2.x = clamp(s2.x/s0.x, 0.00000f, 1.00000f);\n"
             "    output.color0 = float4(r0)*s2.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=4d8e01b0:b3e5db97:c2bb956b:0528b83b\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0004:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000005bb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
             "    r1.xy = float2(dot(r0.xy, r0.xy));\n"
             "    r2.xy = rsqrt(r1.xx);\n"
             "    r2.xy = select(r2.xy, c0.xx, r1.xy < 0.00000f);\n"
             "    r2.xy = select(c0.xx, r2.xy, -r1.xy < 0.00000f);\n"
             "    r0.xy = r0.xy*r2.xy;\n"
             "    r2.xy = r1.xy*r2.xy;\n"
             "    r2.xy = r2.xy*-hg_Params[0].xx + c0.yy;\n"
             "    r1.x = rsqrt(r2.x);\n"
             "    r1.x = select(r1.x, c0.x, r2.x < 0.00000f);\n"
             "    r1.x = select(c0.x, r1.x, -r2.x < 0.00000f);\n"
             "    r1.xy = r2.xy*-r1.xx + c0.yy;\n"
             "    r1.xy = r1.xy*hg_Params[0].yy;\n"
             "    r1.xy = r0.xy*r1.xy;\n"
             "    r1.xy = r1.xy*hg_Params[2].xy + hg_Params[2].zw;\n"
             "    r1.xy = r1.xy + hg_Params[3].xy;\n"
             "    r1.xy = r1.xy*hg_Params[3].zw;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    r0.xy = r0.xy*hg_Params[1].xy;\n"
             "    r0.xy = abs(r0.xy);\n"
             "    r2.x = r2.x*hg_Params[0].y;\n"
             "    r0.x = dot(r0.xy, 1.00000f);\n"
             "    r2.x = clamp(r2.x/r0.x, 0.00000f, 1.00000f);\n"
             "    output.color0 = r1*r2.xxxx;\n"
             "    return output;\n"
             "}\n"
             "//MD5=a41f88c2:55f89c1e:965035a8:1d59be45\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0004:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000064c\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy*hg_ProgramLocal1.xy + hg_ProgramLocal1.zw;\n"
           "    r1.xy = vec2(dot(r0.xy, r0.xy));\n"
           "    r2.xy = inversesqrt(r1.xx);\n"
           "    r2.xy = vec2(r1.x < 0.00000 ? c0.x : r2.x, r1.y < 0.00000 ? c0.x : r2.y);\n"
           "    r2.xy = vec2(-r1.x < 0.00000 ? r2.x : c0.x, -r1.y < 0.00000 ? r2.y : c0.x);\n"
           "    r0.xy = r0.xy*r2.xy;\n"
           "    r2.xy = r1.xy*r2.xy;\n"
           "    r2.xy = r2.xy*-hg_ProgramLocal0.xx + c0.yy;\n"
           "    r1.x = inversesqrt(r2.x);\n"
           "    r1.x = r2.x < 0.00000 ? c0.x : r1.x;\n"
           "    r1.x = -r2.x < 0.00000 ? r1.x : c0.x;\n"
           "    r1.xy = r2.xy*-r1.xx + c0.yy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal0.yy;\n"
           "    r1.xy = r0.xy*r1.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal2.xy + hg_ProgramLocal2.zw;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal3.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal3.zw;\n"
           "    r1 = texture2D(hg_Texture0, r1.xy);\n"
           "    r0.xy = r0.xy*hg_ProgramLocal1.xy;\n"
           "    r0.xy = abs(r0.xy);\n"
           "    r2.x = r2.x*hg_ProgramLocal0.y;\n"
           "    r0.x = dot(r0.xy, vec2(1.00000));\n"
           "    r2.x = clamp(r2.x/r0.x, 0.00000, 1.00000);\n"
           "    gl_FragColor = r1*r2.xxxx;\n"
           "}\n"
           "//MD5=90c4cc3a:4e963b51:03b89f4d:742fd01c\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0004:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcSphere::InitProgramDescriptor(HgcSphere *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSphere_hgc_visible", "//Metal1.0     \n//LEN=00000004f7\n[[ visible ]] FragmentOut HgcSphere_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy*hg_Params[1].xy + hg_Params[1].zw;\n"
    "    r1.xy = float2(dot(r0.xy, r0.xy));\n"
    "    r2.xy = rsqrt(r1.xx);\n"
    "    r2.xy = select(r2.xy, c0.xx, r1.xy < 0.00000f);\n"
    "    r2.xy = select(c0.xx, r2.xy, -r1.xy < 0.00000f);\n"
    "    r0.xy = r0.xy*r2.xy;\n"
    "    r2.xy = r1.xy*r2.xy;\n"
    "    r2.xy = r2.xy*-hg_Params[0].xx + c0.yy;\n"
    "    r1.x = rsqrt(r2.x);\n"
    "    r1.x = select(r1.x, c0.x, r2.x < 0.00000f);\n"
    "    r1.x = select(c0.x, r1.x, -r2.x < 0.00000f);\n"
    "    r1.xy = r2.xy*-r1.xx + c0.yy;\n"
    "    r1.xy = r1.xy*hg_Params[0].yy;\n"
    "    r1.xy = r0.xy*r1.xy;\n"
    "    r1.xy = r1.xy*hg_Params[2].xy + hg_Params[2].zw;\n"
    "    r1.xy = r1.xy + hg_Params[3].xy;\n"
    "    r1.xy = r1.xy*hg_Params[3].zw;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    r0.xy = r0.xy*hg_Params[1].xy;\n"
    "    r0.xy = abs(r0.xy);\n"
    "    r2.x = r2.x*hg_Params[0].y;\n"
    "    r0.x = dot(r0.xy, 1.00000f);\n"
    "    r2.x = clamp(r2.x/r0.x, 0.00000f, 1.00000f);\n"
    "    output.color0 = r1*r2.xxxx;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28B0894()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSphere");
}

void sub_1B28B08A4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28B0A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28B0A74()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28B0A6CLL);
}

_QWORD *HgcSphere::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSphere [hgc1]");
}

uint64_t HgcSphere::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcSphere::Bind(HgcSphere *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcSphere *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcSphere::RenderTile(HgcSphere *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  _OWORD *v19;
  int8x16_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x2_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  float32x4_t v51;
  uint64_t v52;
  int32x4_t v53;
  float32x2_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t *v80;
  uint64_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int32x2_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  int8x16_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t v97;
  float32x4_t v98;
  uint64_t v99;
  int32x4_t v100;
  float32x2_t v101;
  float32x4_t *v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcSphere *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = (_OWORD *)*((_QWORD *)this + 51);
          v21 = *(int8x16_t *)v19;
          v20 = *((int8x16_t *)v19 + 1);
          v22 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          v23 = vaddq_f32(vmulq_f32(v17, (float32x4_t)v20), v22);
          v24 = vaddq_f32(vmulq_f32(v18, (float32x4_t)v20), v22);
          v25 = (int32x2_t)vmulq_f32(v23, v23).u64[0];
          v22.i64[0] = vmulq_f32(v24, v24).u64[0];
          v26 = vaddq_f32((float32x4_t)vdupq_lane_s32(v25, 0), (float32x4_t)vdupq_lane_s32(v25, 1));
          v27 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1));
          v29 = *((int8x16_t *)v19 + 2);
          v28 = *((float32x4_t *)v19 + 3);
          v30 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 0)), v28);
          v31 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0)), v28);
          v32 = vminq_f32(vmulq_f32(v30, vrsqrtsq_f32(vmulq_n_f32(v30, v26.f32[0]), v30)), v28);
          v33 = vminq_f32(vmulq_f32(v31, vrsqrtsq_f32(vmulq_n_f32(v31, v27.f32[0]), v31)), v28);
          v34 = (int8x16_t)vmulq_f32(v32, vrsqrtsq_f32(vmulq_n_f32(v32, v26.f32[0]), v32));
          v35 = (int8x16_t)vmulq_f32(v33, vrsqrtsq_f32(vmulq_n_f32(v33, v27.f32[0]), v33));
          v37 = *((int8x16_t *)v19 + 4);
          v36 = *((float32x4_t *)v19 + 5);
          v38 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26, (float32x4_t)v37), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v37, v26), v37, v34), v37);
          v39 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v27, (float32x4_t)v37), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v37, v27), v37, v35), v37);
          v40 = vmulq_f32(v23, v38);
          v41 = vmulq_f32(v24, v39);
          v42 = vsubq_f32(v36, vmulq_n_f32(vmulq_f32(v26, v38), COERCE_FLOAT(*v19)));
          v43 = vsubq_f32(v36, vmulq_n_f32(vmulq_f32(v27, v39), COERCE_FLOAT(*v19)));
          v44 = vminq_f32(vrsqrteq_f32(v42), v28);
          v45 = vminq_f32(vrsqrteq_f32(v43), v28);
          v46 = vminq_f32(vmulq_f32(v44, vrsqrtsq_f32(vmulq_f32(v44, v42), v44)), v28);
          v47 = vminq_f32(vmulq_f32(v45, vrsqrtsq_f32(vmulq_f32(v45, v43), v45)), v28);
          v48 = (float32x4_t)vextq_s8(v29, v29, 8uLL);
          v49 = vaddq_f32(v48, vmulq_f32((float32x4_t)v29, vmulq_f32(v41, vmulq_lane_f32(vsubq_f32(v36, vmulq_n_f32(v43, *(float *)vbslq_s8((int8x16_t)vcgtq_f32(v43, (float32x4_t)v37), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v37, v43), v37, (int8x16_t)vmulq_f32(v47, vrsqrtsq_f32(vmulq_f32(v43, v47), v47))), v37).i32)), *(float32x2_t *)v19, 1))));
          v50 = *((int *)a2 + 22);
          v51 = vsubq_f32(vaddq_f32(v48, vmulq_f32((float32x4_t)v29, vmulq_f32(v40, vmulq_lane_f32(vsubq_f32(v36, vmulq_n_f32(v42, *(float *)vbslq_s8((int8x16_t)vcgtq_f32(v42, (float32x4_t)v37), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v37, v42), v37, (int8x16_t)vmulq_f32(v46, vrsqrtsq_f32(vmulq_f32(v42, v46), v46))), v37).i32)), *(float32x2_t *)v19,
                          1)))),
                  v9);
          v52 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v53 = vaddq_s32(vcvtq_s32_f32(v51), vcltzq_f32(v51));
            v54 = (float32x2_t)vsubq_f32(v51, vcvtq_f32_s32(v53)).u64[0];
            v55 = (float32x4_t *)(v52 + 16 * (v53.i32[0] + v53.i32[1] * (int)v50));
            v56 = vaddq_f32(*v55, vmulq_n_f32(vsubq_f32(v55[1], *v55), v54.f32[0]));
            v57 = vaddq_f32(v56, vmulq_lane_f32(vsubq_f32(vaddq_f32(v55[v50], vmulq_n_f32(vsubq_f32(v55[(int)v50 + 1], v55[v50]), v54.f32[0])), v56), v54, 1));
            v58 = vsubq_f32(v49, v9);
            v59 = vaddq_s32(vcvtq_s32_f32(v58), vcltzq_f32(v58));
            v58.i64[0] = vsubq_f32(v58, vcvtq_f32_s32(v59)).u64[0];
            v60 = (float32x4_t *)(v52 + 16 * (v59.i32[0] + v59.i32[1] * (int)v50));
            v61 = vaddq_f32(*v60, vmulq_n_f32(vsubq_f32(v60[1], *v60), v58.f32[0]));
            v62 = vaddq_f32(v61, vmulq_lane_f32(vsubq_f32(vaddq_f32(v60[v50], vmulq_n_f32(vsubq_f32(v60[(int)v50 + 1], v60[v50]), v58.f32[0])), v61), *(float32x2_t *)v58.f32, 1));
          }
          else
          {
            v63 = vaddq_f32(v51, v13);
            v64 = vcvtq_s32_f32(v63);
            v63.i64[0] = vaddq_s32(v64, vcgtq_f32(vcvtq_f32_s32(v64), v63)).u64[0];
            v57 = *(float32x4_t *)(v52 + 16 * (v63.i32[0] + v63.i32[1] * (int)v50));
            v65 = vaddq_f32(vsubq_f32(v49, v9), v13);
            v66 = vcvtq_s32_f32(v65);
            v65.i64[0] = vaddq_s32(v66, vcgtq_f32(vcvtq_f32_s32(v66), v65)).u64[0];
            v62 = *(float32x4_t *)(v52 + 16 * (v65.i32[0] + v65.i32[1] * (int)v50));
          }
          v67 = vmulq_f32((float32x4_t)v20, v40);
          v68 = vmulq_f32((float32x4_t)v20, v41);
          v69 = vabsq_f32(v67);
          v70 = vabsq_f32(v68);
          v71 = vmulq_lane_f32(v42, *(float32x2_t *)v21.i8, 1);
          v72 = vmulq_lane_f32(v43, *(float32x2_t *)v21.i8, 1);
          v73 = vaddq_f32(v69, (float32x4_t)vrev64q_s32((int32x4_t)v69));
          v74 = vaddq_f32(v70, (float32x4_t)vrev64q_s32((int32x4_t)v70));
          v75 = *((float32x4_t *)v19 + 6);
          v76 = vminq_f32(vmaxq_f32(vrecpeq_f32(v73), v75), v28);
          v77 = vminq_f32(vmaxq_f32(vrecpeq_f32(v74), v75), v28);
          v78 = vminq_f32(vmaxq_f32(vmulq_f32(v76, vrecpsq_f32(v73, v76)), v75), v28);
          v79 = vminq_f32(vmaxq_f32(vmulq_f32(v77, vrecpsq_f32(v74, v77)), v75), v28);
          v80 = (float32x4_t *)(v11 + 16 * v15);
          *v80 = vmulq_n_f32(v57, vminq_f32(vmaxq_f32(vmulq_f32(v71, vmulq_f32(v78, vrecpsq_f32(v73, v78))), (float32x4_t)v37), v36).f32[0]);
          v80[1] = vmulq_n_f32(v62, vminq_f32(vmaxq_f32(vmulq_f32(v72, vmulq_f32(v79, vrecpsq_f32(v74, v79))), (float32x4_t)v37), v36).f32[0]);
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v81 = *((_QWORD *)this + 51);
        v82 = *(int8x16_t *)(v81 + 16);
        v83 = vaddq_f32(vmulq_f32(v17, (float32x4_t)v82), (float32x4_t)vextq_s8(v82, v82, 8uLL));
        v84 = (int32x2_t)vmulq_f32(v83, v83).u64[0];
        v85 = vaddq_f32((float32x4_t)vdupq_lane_s32(v84, 0), (float32x4_t)vdupq_lane_s32(v84, 1));
        v86 = *(float32x4_t *)(v81 + 48);
        v87 = vminq_f32(vrsqrteq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 0)), v86);
        v88 = vminq_f32(vmulq_f32(v87, vrsqrtsq_f32(vmulq_n_f32(v87, v85.f32[0]), v87)), v86);
        v89 = (int8x16_t)vmulq_f32(v88, vrsqrtsq_f32(vmulq_n_f32(v88, v85.f32[0]), v88));
        v91 = *(int8x16_t *)(v81 + 64);
        v90 = *(float32x4_t *)(v81 + 80);
        v92 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v85, (float32x4_t)v91), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v91, v85), v91, v89), v91);
        v93 = vmulq_f32(v83, v92);
        v94 = vsubq_f32(v90, vmulq_n_f32(vmulq_f32(v85, v92), COERCE_FLOAT(*(_OWORD *)v81)));
        v95 = vminq_f32(vrsqrteq_f32(v94), v86);
        v96 = vminq_f32(vmulq_f32(v95, vrsqrtsq_f32(vmulq_f32(v95, v94), v95)), v86);
        v97 = *((int *)a2 + 22);
        v98 = vsubq_f32(vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)(v81 + 32), *(int8x16_t *)(v81 + 32), 8uLL), vmulq_f32(*(float32x4_t *)(v81 + 32), vmulq_f32(v93, vmulq_lane_f32(vsubq_f32(v90, vmulq_n_f32(v94, *(float *)vbslq_s8((int8x16_t)vcgtq_f32(v94, (float32x4_t)v91), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v91, v94), v91, (int8x16_t)vmulq_f32(v96, vrsqrtsq_f32(vmulq_f32(v96, v94), v96))), v91).i32)), *(float32x2_t *)v81,
                        1)))),
                v9);
        v99 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v100 = vaddq_s32(vcvtq_s32_f32(v98), vcltzq_f32(v98));
          v101 = (float32x2_t)vsubq_f32(v98, vcvtq_f32_s32(v100)).u64[0];
          v102 = (float32x4_t *)(v99 + 16 * (v100.i32[0] + v100.i32[1] * (int)v97));
          v103 = vaddq_f32(*v102, vmulq_n_f32(vsubq_f32(v102[1], *v102), v101.f32[0]));
          v104 = vaddq_f32(v103, vmulq_lane_f32(vsubq_f32(vaddq_f32(v102[v97], vmulq_n_f32(vsubq_f32(v102[(int)v97 + 1], v102[v97]), v101.f32[0])), v103), v101, 1));
        }
        else
        {
          v105 = vaddq_f32(v98, v13);
          v106 = vcvtq_s32_f32(v105);
          v105.i64[0] = vaddq_s32(v106, vcgtq_f32(vcvtq_f32_s32(v106), v105)).u64[0];
          v104 = *(float32x4_t *)(v99 + 16 * (v105.i32[0] + v105.i32[1] * (int)v97));
        }
        v107 = vabsq_f32(vmulq_f32((float32x4_t)v82, v93));
        v108 = vmulq_lane_f32(v94, *(float32x2_t *)v81, 1);
        v109 = vaddq_f32(v107, (float32x4_t)vrev64q_s32((int32x4_t)v107));
        v110 = *(float32x4_t *)(v81 + 96);
        v111 = vminq_f32(vmaxq_f32(vrecpeq_f32(v109), v110), v86);
        v112 = vminq_f32(vmaxq_f32(vmulq_f32(v111, vrecpsq_f32(v109, v111)), v110), v86);
        *(float32x4_t *)(v11 + 16 * v15) = vmulq_n_f32(v104, vminq_f32(vmaxq_f32(vmulq_f32(v108, vmulq_f32(v112, vrecpsq_f32(v109, v112))), (float32x4_t)v91), v90).f32[0]);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcSphere::GetDOD(HgcSphere *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcSphere *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcSphere::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcSphere::HgcSphere(HgcSphere *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F0B08;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(int32x4_t *)(v3 + 48) = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_OWORD *)(v3 + 80) = xmmword_1B30520F0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3051200;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcSphere *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28B136C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSphere::~HgcSphere(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F0B08;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AC4F46D1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSphere::~HgcSphere(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSphere::SetParameter(HgcSphere *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcSphere::GetParameter(HgcSphere *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcStarburst::GetProgram(HgcStarburst *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000481\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    s0.xy = s0.xy*hg_Params[2].xy;\n"
             "    s1.x = dot(s0.xy, s0.xy);\n"
             "    s2.x = rsqrt(s1.x);\n"
             "    s2.x = select(s2.x, float(c0.x), s1.x < 0.00000h);\n"
             "    s2.x = select(float(c0.x), s2.x, -s1.x < 0.00000h);\n"
             "    s1.x = s1.x*s2.x;\n"
             "    s1.x = s1.x*hg_Params[1].x;\n"
             "    s2.x = 1.00000f / s1.x;\n"
             "    s1.x = select(float(c0.x), s2.x, -fabs(s1.x) < 0.00000h);\n"
             "    s0.xy = s0.xy*s1.xx;\n"
             "    s0.xy = s0.xy*hg_Params[2].zw + hg_Params[0].xy;\n"
             "    s0.xy = s0.xy + hg_Params[3].xy;\n"
             "    s0.xy = s0.xy*hg_Params[3].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a0ff7be3:b85ede51:50c93473:23ae51c3\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0004:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000466\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    r0.xy = r0.xy*hg_Params[2].xy;\n"
             "    r1.x = dot(r0.xy, r0.xy);\n"
             "    r2.x = rsqrt(r1.x);\n"
             "    r2.x = select(r2.x, c0.x, r1.x < 0.00000f);\n"
             "    r2.x = select(c0.x, r2.x, -r1.x < 0.00000f);\n"
             "    r1.x = r1.x*r2.x;\n"
             "    r1.x = r1.x*hg_Params[1].x;\n"
             "    r2.x = 1.00000f / r1.x;\n"
             "    r1.x = select(c0.x, r2.x, -fabs(r1.x) < 0.00000f);\n"
             "    r0.xy = r0.xy*r1.xx;\n"
             "    r0.xy = r0.xy*hg_Params[2].zw + hg_Params[0].xy;\n"
             "    r0.xy = r0.xy + hg_Params[3].xy;\n"
             "    r0.xy = r0.xy*hg_Params[3].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=4a25b0fa:7e7e212d:922c67d7:82d26d77\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0004:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004a6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy - hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal2.xy;\n"
           "    r1.x = dot(r0.xy, r0.xy);\n"
           "    r2.x = inversesqrt(r1.x);\n"
           "    r2.x = r1.x < 0.00000 ? c0.x : r2.x;\n"
           "    r2.x = -r1.x < 0.00000 ? r2.x : c0.x;\n"
           "    r1.x = r1.x*r2.x;\n"
           "    r1.x = r1.x*hg_ProgramLocal1.x;\n"
           "    r2.x = 1.00000 / r1.x;\n"
           "    r1.x = -abs(r1.x) < 0.00000 ? r2.x : c0.x;\n"
           "    r0.xy = r0.xy*r1.xx;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal2.zw + hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal3.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal3.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=2b8f2ceb:cdb9613d:6ed67f0c:56be17a3\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0004:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcStarburst::InitProgramDescriptor(HgcStarburst *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcStarburst_hgc_visible", "//Metal1.0     \n//LEN=00000003a5\n[[ visible ]] FragmentOut HgcStarburst_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy - hg_Params[0].xy;\n"
    "    r0.xy = r0.xy*hg_Params[2].xy;\n"
    "    r1.x = dot(r0.xy, r0.xy);\n"
    "    r2.x = rsqrt(r1.x);\n"
    "    r2.x = select(r2.x, c0.x, r1.x < 0.00000f);\n"
    "    r2.x = select(c0.x, r2.x, -r1.x < 0.00000f);\n"
    "    r1.x = r1.x*r2.x;\n"
    "    r1.x = r1.x*hg_Params[1].x;\n"
    "    r2.x = 1.00000f / r1.x;\n"
    "    r1.x = select(c0.x, r2.x, -fabs(r1.x) < 0.00000f);\n"
    "    r0.xy = r0.xy*r1.xx;\n"
    "    r0.xy = r0.xy*hg_Params[2].zw + hg_Params[0].xy;\n"
    "    r0.xy = r0.xy + hg_Params[3].xy;\n"
    "    r0.xy = r0.xy*hg_Params[3].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28B1574()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcStarburst");
}

void sub_1B28B1584(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28B1704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28B1754()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28B174CLL);
}

_QWORD *HgcStarburst::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcStarburst [hgc1]");
}

uint64_t HgcStarburst::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcStarburst::Bind(HgcStarburst *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcStarburst *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcStarburst::RenderTile(HgcStarburst *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t v56;
  uint64_t v57;
  int32x4_t v58;
  float32x2_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t *v79;
  uint64_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  uint64_t v94;
  float32x4_t v95;
  uint64_t v96;
  int32x4_t v97;
  float32x2_t v98;
  float32x4_t *v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int32x4_t v103;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcStarburst *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 3)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v20 = *((_QWORD *)this + 51);
          v21 = *(float32x4_t *)(v20 + 16);
          v22 = *(int8x16_t *)(v20 + 32);
          v23 = *(float32x4_t *)(v20 + 48);
          v24 = vmulq_f32(vsubq_f32(v17, *(float32x4_t *)v20), (float32x4_t)v22);
          v25 = vmulq_f32(vsubq_f32(v18, *(float32x4_t *)v20), (float32x4_t)v22);
          v26 = vmulq_f32(vsubq_f32(v19, *(float32x4_t *)v20), (float32x4_t)v22);
          v27 = vmulq_f32(v24, v24);
          v28 = vmulq_f32(v25, v25);
          v29 = vmulq_f32(v26, v26);
          v30 = vaddq_f32(v27, (float32x4_t)vrev64q_s32((int32x4_t)v27));
          v31 = vaddq_f32(v28, (float32x4_t)vrev64q_s32((int32x4_t)v28));
          v32 = vaddq_f32(v29, (float32x4_t)vrev64q_s32((int32x4_t)v29));
          v33 = vminq_f32(vrsqrteq_f32(v30), v23);
          v34 = vminq_f32(vrsqrteq_f32(v31), v23);
          v35 = vminq_f32(vrsqrteq_f32(v32), v23);
          v36 = vminq_f32(vmulq_f32(v33, vrsqrtsq_f32(vmulq_f32(v30, v33), v33)), v23);
          v37 = vminq_f32(vmulq_f32(v34, vrsqrtsq_f32(vmulq_f32(v31, v34), v34)), v23);
          v38 = vminq_f32(vmulq_f32(v35, vrsqrtsq_f32(vmulq_f32(v32, v35), v35)), v23);
          v39 = *(int8x16_t *)(v20 + 64);
          v40 = *(float32x4_t *)(v20 + 80);
          v41 = vmulq_f32(v21, vmulq_f32(v30, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v30, (float32x4_t)v39), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v39, v30), v39, (int8x16_t)vmulq_f32(v36, vrsqrtsq_f32(vmulq_f32(v30, v36), v36))), v39)));
          v42 = vmulq_f32(v21, vmulq_f32(v31, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v31, (float32x4_t)v39), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v39, v31), v39, (int8x16_t)vmulq_f32(v37, vrsqrtsq_f32(vmulq_f32(v31, v37), v37))), v39)));
          v43 = vmulq_f32(v21, vmulq_f32(v32, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v32, (float32x4_t)v39), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v39, v32), v39, (int8x16_t)vmulq_f32(v38, vrsqrtsq_f32(vmulq_f32(v32, v38), v38))), v39)));
          v44 = vminq_f32(vmaxq_f32(vrecpeq_f32(v41), v40), v23);
          v45 = vminq_f32(vmaxq_f32(vrecpeq_f32(v42), v40), v23);
          v46 = vminq_f32(vmaxq_f32(vrecpeq_f32(v43), v40), v23);
          v47 = vminq_f32(vmaxq_f32(vmulq_f32(v44, vrecpsq_f32(v41, v44)), v40), v23);
          v48 = vminq_f32(vmaxq_f32(vmulq_f32(v45, vrecpsq_f32(v42, v45)), v40), v23);
          v49 = vminq_f32(vmaxq_f32(vmulq_f32(v46, vrecpsq_f32(v43, v46)), v40), v23);
          v50 = vmulq_n_f32(v26, *(float *)vbslq_s8((int8x16_t)vceqq_f32(v43, (float32x4_t)v39), (int8x16_t)vmulq_f32(v49, vrecpsq_f32(v43, v49)), v39).i32);
          v51 = (float32x4_t)vextq_s8(v22, v22, 8uLL);
          v52 = vaddq_f32(*(float32x4_t *)v20, vmulq_f32(v51, vmulq_n_f32(v24, *(float *)vbslq_s8((int8x16_t)vceqq_f32(v41, (float32x4_t)v39), (int8x16_t)vmulq_f32(v47, vrecpsq_f32(v41, v47)), v39).i32)));
          v53 = vaddq_f32(*(float32x4_t *)v20, vmulq_f32(v51, vmulq_n_f32(v25, *(float *)vbslq_s8((int8x16_t)vceqq_f32(v42, (float32x4_t)v39), (int8x16_t)vmulq_f32(v48, vrecpsq_f32(v42, v48)), v39).i32)));
          v54 = vaddq_f32(*(float32x4_t *)v20, vmulq_f32(v51, v50));
          v55 = *((int *)a2 + 22);
          v56 = vsubq_f32(v52, v9);
          v57 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v58 = vaddq_s32(vcvtq_s32_f32(v56), vcltzq_f32(v56));
            v59 = (float32x2_t)vsubq_f32(v56, vcvtq_f32_s32(v58)).u64[0];
            v60 = (float32x4_t *)(v57 + 16 * (v58.i32[0] + v58.i32[1] * (int)v55));
            v61 = vaddq_f32(*v60, vmulq_n_f32(vsubq_f32(v60[1], *v60), v59.f32[0]));
            v62 = vaddq_f32(v61, vmulq_lane_f32(vsubq_f32(vaddq_f32(v60[v55], vmulq_n_f32(vsubq_f32(v60[(int)v55 + 1], v60[v55]), v59.f32[0])), v61), v59, 1));
            v63 = vsubq_f32(v53, v9);
            v64 = vaddq_s32(vcvtq_s32_f32(v63), vcltzq_f32(v63));
            v63.i64[0] = vsubq_f32(v63, vcvtq_f32_s32(v64)).u64[0];
            v65 = (float32x4_t *)(v57 + 16 * (v64.i32[0] + v64.i32[1] * (int)v55));
            v66 = vaddq_f32(*v65, vmulq_n_f32(vsubq_f32(v65[1], *v65), v63.f32[0]));
            v67 = vaddq_f32(v66, vmulq_lane_f32(vsubq_f32(vaddq_f32(v65[v55], vmulq_n_f32(vsubq_f32(v65[(int)v55 + 1], v65[v55]), v63.f32[0])), v66), *(float32x2_t *)v63.f32, 1));
            v68 = vsubq_f32(v54, v9);
            v69 = vaddq_s32(vcvtq_s32_f32(v68), vcltzq_f32(v68));
            v68.i64[0] = vsubq_f32(v68, vcvtq_f32_s32(v69)).u64[0];
            v70 = (float32x4_t *)(v57 + 16 * (v69.i32[0] + v69.i32[1] * (int)v55));
            v71 = vaddq_f32(*v70, vmulq_n_f32(vsubq_f32(v70[1], *v70), v68.f32[0]));
            v72 = vaddq_f32(v71, vmulq_lane_f32(vsubq_f32(vaddq_f32(v70[v55], vmulq_n_f32(vsubq_f32(v70[(int)v55 + 1], v70[v55]), v68.f32[0])), v71), *(float32x2_t *)v68.f32, 1));
          }
          else
          {
            v73 = vaddq_f32(v56, v13);
            v74 = vcvtq_s32_f32(v73);
            v73.i64[0] = vaddq_s32(v74, vcgtq_f32(vcvtq_f32_s32(v74), v73)).u64[0];
            v62 = *(float32x4_t *)(v57 + 16 * (v73.i32[0] + v73.i32[1] * (int)v55));
            v75 = vaddq_f32(vsubq_f32(v53, v9), v13);
            v76 = vcvtq_s32_f32(v75);
            v75.i64[0] = vaddq_s32(v76, vcgtq_f32(vcvtq_f32_s32(v76), v75)).u64[0];
            v67 = *(float32x4_t *)(v57 + 16 * (v75.i32[0] + v75.i32[1] * (int)v55));
            v77 = vaddq_f32(vsubq_f32(v54, v9), v13);
            v78 = vcvtq_s32_f32(v77);
            v77.i64[0] = vaddq_s32(v78, vcgtq_f32(vcvtq_f32_s32(v78), v77)).u64[0];
            v72 = *(float32x4_t *)(v57 + 16 * (v77.i32[0] + v77.i32[1] * (int)v55));
          }
          v79 = (float32x4_t *)(v11 + 16 * v15);
          *v79 = v62;
          v79[1] = v67;
          v79[2] = v72;
          v17 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v15 += 3;
          v16 -= 3;
        }
        while (v16 > 2);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        do
        {
          v80 = *((_QWORD *)this + 51);
          v81 = *(int8x16_t *)(v80 + 32);
          v82 = *(float32x4_t *)(v80 + 48);
          v83 = vmulq_f32(vsubq_f32(v17, *(float32x4_t *)v80), (float32x4_t)v81);
          v84 = vmulq_f32(v83, v83);
          v85 = vaddq_f32(v84, (float32x4_t)vrev64q_s32((int32x4_t)v84));
          v86 = vminq_f32(vrsqrteq_f32(v85), v82);
          v87 = vminq_f32(vmulq_f32(v86, vrsqrtsq_f32(vmulq_f32(v86, v85), v86)), v82);
          v88 = *(int8x16_t *)(v80 + 64);
          v89 = *(float32x4_t *)(v80 + 80);
          v90 = vmulq_f32(*(float32x4_t *)(v80 + 16), vmulq_f32(v85, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v85, (float32x4_t)v88), vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, v85), v88, (int8x16_t)vmulq_f32(v87, vrsqrtsq_f32(vmulq_f32(v85, v87), v87))), v88)));
          v91 = vminq_f32(vmaxq_f32(vrecpeq_f32(v90), v89), v82);
          v92 = vminq_f32(vmaxq_f32(vmulq_f32(v91, vrecpsq_f32(v90, v91)), v89), v82);
          v93 = vaddq_f32(*(float32x4_t *)v80, vmulq_f32((float32x4_t)vextq_s8(v81, v81, 8uLL), vmulq_n_f32(v83, *(float *)vbslq_s8((int8x16_t)vceqq_f32(v90, (float32x4_t)v88), (int8x16_t)vmulq_f32(v92, vrecpsq_f32(v90, v92)), v88).i32)));
          v94 = *((int *)a2 + 22);
          v95 = vsubq_f32(v93, v9);
          v96 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v97 = vaddq_s32(vcvtq_s32_f32(v95), vcltzq_f32(v95));
            v98 = (float32x2_t)vsubq_f32(v95, vcvtq_f32_s32(v97)).u64[0];
            v99 = (float32x4_t *)(v96 + 16 * (v97.i32[0] + v97.i32[1] * (int)v94));
            v100 = vaddq_f32(*v99, vmulq_n_f32(vsubq_f32(v99[1], *v99), v98.f32[0]));
            v101 = vaddq_f32(v100, vmulq_lane_f32(vsubq_f32(vaddq_f32(v99[v94], vmulq_n_f32(vsubq_f32(v99[(int)v94 + 1], v99[v94]), v98.f32[0])), v100), v98, 1));
          }
          else
          {
            v102 = vaddq_f32(v95, v13);
            v103 = vcvtq_s32_f32(v102);
            v102.i64[0] = vaddq_s32(v103, vcgtq_f32(vcvtq_f32_s32(v103), v102)).u64[0];
            v101 = *(float32x4_t *)(v96 + 16 * (v102.i32[0] + v102.i32[1] * (int)v94));
          }
          *(float32x4_t *)(v11 + 16 * v15) = v101;
          v17 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          ++v15;
        }
        while (v15 < v10);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v11 += v12;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcStarburst::GetDOD(HgcStarburst *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcStarburst *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcStarburst::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcStarburst::HgcStarburst(HgcStarburst *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F0D70;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(int32x4_t *)(v3 + 48) = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_OWORD *)(v3 + 80) = xmmword_1B3051200;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcStarburst *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28B2010(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcStarburst::~HgcStarburst(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F0D70;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcStarburst::~HgcStarburst(this);
  HGObject::operator delete(v1);
}

uint64_t HgcStarburst::SetParameter(HgcStarburst *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcStarburst::GetParameter(HgcStarburst *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcTarget::GetProgram(HgcTarget *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000035b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 s0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    s0.xy = s0.xy*hg_Params[2].xy;\n"
             "    s0.x = dot(s0.xyz, s0.xyz);\n"
             "    s0.x = sqrt(s0.x);\n"
             "    s0.xy = hg_Params[1].xy*s0.xx;\n"
             "    s0.xy = s0.xy*hg_Params[2].zw;\n"
             "    s0.xy = hg_Params[0].xy*hg_Params[3].xy + s0.xy;\n"
             "    s0.xy = s0.xy + hg_Params[4].xy;\n"
             "    s0.xy = s0.xy*hg_Params[4].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ac96bfce:09ba92e3:8764527f:8b5afa0f\n"
             "//SIG=00400000:00000000:00000000:00000001:0000:0005:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000353\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    r0.xy = r0.xy*hg_Params[2].xy;\n"
             "    r0.x = dot(r0.xyz, r0.xyz);\n"
             "    r0.x = sqrt(r0.x);\n"
             "    r0.xy = hg_Params[1].xy*r0.xx;\n"
             "    r0.xy = r0.xy*hg_Params[2].zw;\n"
             "    r0.xy = hg_Params[0].xy*hg_Params[3].xy + r0.xy;\n"
             "    r0.xy = r0.xy + hg_Params[4].xy;\n"
             "    r0.xy = r0.xy*hg_Params[4].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=05d694f9:b6299cf1:8d93c22c:699acf95\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0005:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003cb\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    highp vec4 r0;\n"
           "\n"
           "    r0.xyz = hg_TexCoord0.xyz - hg_ProgramLocal0.xyz;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal2.xy;\n"
           "    r0.x = dot(r0.xyz, r0.xyz);\n"
           "    r0.x = sqrt(r0.x);\n"
           "    r0.xy = hg_ProgramLocal1.xy*r0.xx;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal2.zw;\n"
           "    r0.xy = hg_ProgramLocal0.xy*hg_ProgramLocal3.xy + r0.xy;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal4.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal4.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=75a310c2:453607b6:d982f4ee:d995b63f\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0005:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcTarget::InitProgramDescriptor(HgcTarget *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTarget_hgc_visible", "//Metal1.0     \n//LEN=000000028f\n[[ visible ]] FragmentOut HgcTarget_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = texCoord0.xyz - hg_Params[0].xyz;\n"
    "    r0.xy = r0.xy*hg_Params[2].xy;\n"
    "    r0.x = dot(r0.xyz, r0.xyz);\n"
    "    r0.x = sqrt(r0.x);\n"
    "    r0.xy = hg_Params[1].xy*r0.xx;\n"
    "    r0.xy = r0.xy*hg_Params[2].zw;\n"
    "    r0.xy = hg_Params[0].xy*hg_Params[3].xy + r0.xy;\n"
    "    r0.xy = r0.xy + hg_Params[4].xy;\n"
    "    r0.xy = r0.xy*hg_Params[4].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28B2218()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcTarget");
}

void sub_1B28B2228(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28B23A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28B23F8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28B23F0);
}

_QWORD *HgcTarget::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTarget [hgc1]");
}

uint64_t HgcTarget::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 4, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcTarget::Bind(HgcTarget *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HgcTarget *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcTarget::RenderTile(HgcTarget *this, float32x4_t **a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  float32x4_t *v11;
  float32x4_t *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int v16;
  float32x4_t *v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t v60;
  float32x4_t v61;
  float32x4_t *v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  int32x4_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t *v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  int32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  float32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  int32x4_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  float32x4_t *v104;
  int32x4_t v105;
  float32x2_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;

  v4 = HGTile::Renderer((HGTile *)a2);
  v5 = (*(uint64_t (**)(HgcTarget *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = (int32x2_t)*a2;
  v7 = *((_DWORD *)a2 + 3) - ((unint64_t)*a2 >> 32);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = a2[2];
    v12 = v11 + 2;
    v13 = 16 * *((int *)a2 + 6);
    v14.i64[0] = 0x3F0000003F000000;
    v14.i64[1] = 0x3F0000003F000000;
    v15 = v9;
    do
    {
      if (v10 < 4)
      {
        LODWORD(v91) = 0;
        v18 = v15;
      }
      else
      {
        v16 = 0;
        v17 = v12;
        v18 = v15;
        do
        {
          v19 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v20 = vaddq_f32(v19, (float32x4_t)xmmword_1B304F230);
          v21 = vaddq_f32(v20, (float32x4_t)xmmword_1B304F230);
          v22 = *((_QWORD *)this + 51);
          v23 = *(float32x4_t *)(v22 + 16);
          v24 = vsubq_f32(v18, *(float32x4_t *)v22);
          v25 = vsubq_f32(v19, *(float32x4_t *)v22);
          v26 = vsubq_f32(v20, *(float32x4_t *)v22);
          v27 = vsubq_f32(v21, *(float32x4_t *)v22);
          v28 = *(int8x16_t *)(v22 + 32);
          v29.i64[0] = vmulq_f32(v24, (float32x4_t)v28).u64[0];
          v30.i64[0] = vmulq_f32(v25, (float32x4_t)v28).u64[0];
          v31.i64[0] = vmulq_f32(v26, (float32x4_t)v28).u64[0];
          v32.i64[0] = vmulq_f32(v27, (float32x4_t)v28).u64[0];
          v29.i64[1] = v24.i64[1];
          v30.i64[1] = v25.i64[1];
          v31.i64[1] = v26.i64[1];
          v32.i64[1] = v27.i64[1];
          v33 = (int32x4_t)vmulq_f32(v29, v29);
          v34 = (int32x4_t)vmulq_f32(v30, v30);
          v35 = (int32x4_t)vmulq_f32(v31, v31);
          v36 = (int32x4_t)vmulq_f32(v32, v32);
          v37 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), vaddq_f32((float32x4_t)v33, (float32x4_t)vrev64q_s32(v33)));
          v38 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL), vaddq_f32((float32x4_t)v34, (float32x4_t)vrev64q_s32(v34)));
          v39 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), vaddq_f32((float32x4_t)v35, (float32x4_t)vrev64q_s32(v35)));
          v40 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), vaddq_f32((float32x4_t)v36, (float32x4_t)vrev64q_s32(v36)));
          v41 = *(float32x4_t *)(v22 + 64);
          v42 = vminq_f32(vrsqrteq_f32(v37), v41);
          v43 = vminq_f32(vrsqrteq_f32(v38), v41);
          v44 = vminq_f32(vrsqrteq_f32(v39), v41);
          v45 = vminq_f32(vrsqrteq_f32(v40), v41);
          v46 = vminq_f32(vmulq_f32(v42, vrsqrtsq_f32(vmulq_f32(v42, v37), v42)), v41);
          v47 = vminq_f32(vmulq_f32(v43, vrsqrtsq_f32(vmulq_f32(v43, v38), v43)), v41);
          v48 = vminq_f32(vmulq_f32(v44, vrsqrtsq_f32(vmulq_f32(v39, v44), v44)), v41);
          v49 = vminq_f32(vmulq_f32(v45, vrsqrtsq_f32(vmulq_f32(v40, v45), v45)), v41);
          v50 = vmulq_n_f32(v23, vmulq_f32(v37, vminq_f32(vmulq_f32(v46, vrsqrtsq_f32(vmulq_f32(v37, v46), v46)), v41)).f32[0]);
          v51 = vmulq_n_f32(v23, vmulq_f32(v38, vminq_f32(vmulq_f32(v47, vrsqrtsq_f32(vmulq_f32(v38, v47), v47)), v41)).f32[0]);
          v52 = vmulq_n_f32(v23, vmulq_f32(v39, vminq_f32(vmulq_f32(v48, vrsqrtsq_f32(vmulq_f32(v39, v48), v48)), v41)).f32[0]);
          v53 = vmulq_n_f32(v23, vmulq_f32(v40, vminq_f32(vmulq_f32(v49, vrsqrtsq_f32(vmulq_f32(v40, v49), v49)), v41)).f32[0]);
          v54 = (float32x4_t)vextq_s8(v28, v28, 8uLL);
          v55 = vmulq_f32(*(float32x4_t *)v22, *(float32x4_t *)(v22 + 48));
          v56 = vaddq_f32(v55, vmulq_f32(v54, v50));
          v57 = vaddq_f32(v55, vmulq_f32(v54, v51));
          v58 = vaddq_f32(v55, vmulq_f32(v54, v52));
          v59 = vaddq_f32(v55, vmulq_f32(v54, v53));
          v60 = *((int *)a2 + 22);
          v61 = vsubq_f32(v56, v9);
          v62 = a2[10];
          if (v5)
          {
            v63 = vaddq_s32(vcvtq_s32_f32(v61), vcltzq_f32(v61));
            v64 = (float32x2_t)vsubq_f32(v61, vcvtq_f32_s32(v63)).u64[0];
            v65 = &v62[v63.i32[0] + v63.i32[1] * (int)v60];
            v66 = vaddq_f32(*v65, vmulq_n_f32(vsubq_f32(v65[1], *v65), v64.f32[0]));
            v67 = vaddq_f32(v66, vmulq_lane_f32(vsubq_f32(vaddq_f32(v65[v60], vmulq_n_f32(vsubq_f32(v65[(int)v60 + 1], v65[v60]), v64.f32[0])), v66), v64, 1));
            v68 = vsubq_f32(v57, v9);
            v69 = vaddq_s32(vcvtq_s32_f32(v68), vcltzq_f32(v68));
            v68.i64[0] = vsubq_f32(v68, vcvtq_f32_s32(v69)).u64[0];
            v70 = &v62[v69.i32[0] + v69.i32[1] * (int)v60];
            v71 = vaddq_f32(*v70, vmulq_n_f32(vsubq_f32(v70[1], *v70), v68.f32[0]));
            v72 = vaddq_f32(v71, vmulq_lane_f32(vsubq_f32(vaddq_f32(v70[v60], vmulq_n_f32(vsubq_f32(v70[(int)v60 + 1], v70[v60]), v68.f32[0])), v71), *(float32x2_t *)v68.f32, 1));
            v73 = vsubq_f32(v58, v9);
            v74 = vaddq_s32(vcvtq_s32_f32(v73), vcltzq_f32(v73));
            v73.i64[0] = vsubq_f32(v73, vcvtq_f32_s32(v74)).u64[0];
            v75 = &v62[v74.i32[0] + v74.i32[1] * (int)v60];
            v76 = vaddq_f32(*v75, vmulq_n_f32(vsubq_f32(v75[1], *v75), v73.f32[0]));
            v77 = vaddq_f32(v76, vmulq_lane_f32(vsubq_f32(vaddq_f32(v75[v60], vmulq_n_f32(vsubq_f32(v75[(int)v60 + 1], v75[v60]), v73.f32[0])), v76), *(float32x2_t *)v73.f32, 1));
            v78 = vsubq_f32(v59, v9);
            v79 = vaddq_s32(vcvtq_s32_f32(v78), vcltzq_f32(v78));
            v78.i64[0] = vsubq_f32(v78, vcvtq_f32_s32(v79)).u64[0];
            v80 = &v62[v79.i32[0] + v79.i32[1] * (int)v60];
            v81 = vaddq_f32(*v80, vmulq_n_f32(vsubq_f32(v80[1], *v80), v78.f32[0]));
            v82 = vaddq_f32(v81, vmulq_lane_f32(vsubq_f32(vaddq_f32(v80[v60], vmulq_n_f32(vsubq_f32(v80[(int)v60 + 1], v80[v60]), v78.f32[0])), v81), *(float32x2_t *)v78.f32, 1));
          }
          else
          {
            v83 = vaddq_f32(v61, v14);
            v84 = vcvtq_s32_f32(v83);
            v83.i64[0] = vaddq_s32(v84, vcgtq_f32(vcvtq_f32_s32(v84), v83)).u64[0];
            v67 = v62[v83.i32[0] + v83.i32[1] * (int)v60];
            v85 = vaddq_f32(vsubq_f32(v57, v9), v14);
            v86 = vcvtq_s32_f32(v85);
            v85.i64[0] = vaddq_s32(v86, vcgtq_f32(vcvtq_f32_s32(v86), v85)).u64[0];
            v72 = v62[v85.i32[0] + v85.i32[1] * (int)v60];
            v87 = vaddq_f32(vsubq_f32(v58, v9), v14);
            v88 = vcvtq_s32_f32(v87);
            v87.i64[0] = vaddq_s32(v88, vcgtq_f32(vcvtq_f32_s32(v88), v87)).u64[0];
            v77 = v62[v87.i32[0] + v87.i32[1] * (int)v60];
            v89 = vaddq_f32(vsubq_f32(v59, v9), v14);
            v90 = vcvtq_s32_f32(v89);
            v89.i64[0] = vaddq_s32(v90, vcgtq_f32(vcvtq_f32_s32(v90), v89)).u64[0];
            v82 = v62[v89.i32[0] + v89.i32[1] * (int)v60];
          }
          v17[-2] = v67;
          v17[-1] = v72;
          *v17 = v77;
          v17[1] = v82;
          v17 += 4;
          v18 = vaddq_f32(v21, (float32x4_t)xmmword_1B304F230);
          v16 -= 4;
        }
        while (v10 + v16 > 3);
        LODWORD(v91) = -v16;
      }
      if ((int)v91 < v10)
      {
        v91 = v91;
        do
        {
          v92 = *((_QWORD *)this + 51);
          v93 = vsubq_f32(v18, *(float32x4_t *)v92);
          v94 = *(int8x16_t *)(v92 + 32);
          v95.i64[0] = vmulq_f32(v93, (float32x4_t)v94).u64[0];
          v95.i64[1] = v93.i64[1];
          v96 = (int32x4_t)vmulq_f32(v95, v95);
          v97 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 8uLL), vaddq_f32((float32x4_t)v96, (float32x4_t)vrev64q_s32(v96)));
          v98 = *(float32x4_t *)(v92 + 64);
          v99 = vminq_f32(vrsqrteq_f32(v97), v98);
          v100 = vminq_f32(vmulq_f32(v99, vrsqrtsq_f32(vmulq_f32(v99, v97), v99)), v98);
          v101 = vaddq_f32(vmulq_f32(*(float32x4_t *)v92, *(float32x4_t *)(v92 + 48)), vmulq_f32((float32x4_t)vextq_s8(v94, v94, 8uLL), vmulq_n_f32(*(float32x4_t *)(v92 + 16), vmulq_f32(vminq_f32(vmulq_f32(v100, vrsqrtsq_f32(vmulq_f32(v100, v97), v100)), v98), v97).f32[0])));
          v102 = *((int *)a2 + 22);
          v103 = vsubq_f32(v101, v9);
          v104 = a2[10];
          if (v5)
          {
            v105 = vaddq_s32(vcvtq_s32_f32(v103), vcltzq_f32(v103));
            v106 = (float32x2_t)vsubq_f32(v103, vcvtq_f32_s32(v105)).u64[0];
            v107 = &v104[v105.i32[0] + v105.i32[1] * (int)v102];
            v108 = vaddq_f32(*v107, vmulq_n_f32(vsubq_f32(v107[1], *v107), v106.f32[0]));
            v109 = vaddq_f32(v108, vmulq_lane_f32(vsubq_f32(vaddq_f32(v107[v102], vmulq_n_f32(vsubq_f32(v107[(int)v102 + 1], v107[v102]), v106.f32[0])), v108), v106, 1));
          }
          else
          {
            v110 = vaddq_f32(v103, v14);
            v111 = vcvtq_s32_f32(v110);
            v110.i64[0] = vaddq_s32(v111, vcgtq_f32(vcvtq_f32_s32(v111), v110)).u64[0];
            v109 = v104[v110.i32[0] + v110.i32[1] * (int)v102];
          }
          v11[v91] = v109;
          v18 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          ++v91;
        }
        while (v91 < v10);
      }
      v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v12 = (float32x4_t *)((char *)v12 + v13);
      v11 = (float32x4_t *)((char *)v11 + v13);
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcTarget::GetDOD(HgcTarget *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcTarget *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcTarget::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcTarget::HgcTarget(HgcTarget *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F0FD8;
  v3 = (_OWORD *)operator new();
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[4] = xmmword_1B3051C80;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcTarget *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28B2CF4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcTarget::~HgcTarget(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F0FD8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C404247E4FDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcTarget::~HgcTarget(this);
  HGObject::operator delete(v1);
}

uint64_t HgcTarget::SetParameter(HgcTarget *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcTarget::GetParameter(HgcTarget *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 3)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcTwirl::GetProgram(HgcTwirl *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000005e1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-3.000000000, 1.000000000, 2.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0 = hg_Params[4];\n"
             "    s1.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    s1.xyz = s1.xyz*hg_Params[2].xyx;\n"
             "    s2.x = dot(s1.xyz, s1.xyz);\n"
             "    s2.x = rsqrt(s2.x);\n"
             "    s2.x = s2.x*hg_Params[1].x;\n"
             "    s2.x = clamp(1.00000f / s2.x, 0.00000f, 1.00000f);\n"
             "    s3.x = s2.x*s2.x;\n"
             "    s2.x = s3.x*s2.x;\n"
             "    s3.x = s3.x*float(c0.x) + float(c0.y);\n"
             "    s3.x = s2.x*float(c0.z) + s3.x;\n"
             "    s3.x = s3.x*hg_Params[1].y;\n"
             "    s2.x = cos(s3.x);\n"
             "    s2.y = sin(s3.x);\n"
             "    s3.xy = float2(-s2.y, s2.x);\n"
             "    s2.x = dot(s1.xy, s2.xy);\n"
             "    s2.y = dot(s1.xy, s3.xy);\n"
             "    s2.xy = s2.xy*hg_Params[2].zw + hg_Params[0].xy;\n"
             "    s1.xy = s2.xy + hg_Params[3].xy;\n"
             "    s1.xy = s1.xy*hg_Params[3].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    s2.xy = s2.xy - s0.zw;\n"
             "    s3 = fmin(s2.yyyy, s2.xxxx);\n"
             "    s2.xy = s0.xy - s2.xy;\n"
             "    s3 = fmin(s2.xxxx, s3);\n"
             "    s2 = fmin(s2.yyyy, s3);\n"
             "    output.color0 = select(float4(r0), float4(c0.wwww), s2 < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ef233230:e2d29d8a:2f8950ac:cbce6f0b\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0005:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000005a9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-3.000000000, 1.000000000, 2.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Params[4];\n"
             "    r1.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    r1.xyz = r1.xyz*hg_Params[2].xyx;\n"
             "    r2.x = dot(r1.xyz, r1.xyz);\n"
             "    r2.x = rsqrt(r2.x);\n"
             "    r2.x = r2.x*hg_Params[1].x;\n"
             "    r2.x = clamp(1.00000f / r2.x, 0.00000f, 1.00000f);\n"
             "    r3.x = r2.x*r2.x;\n"
             "    r2.x = r3.x*r2.x;\n"
             "    r3.x = r3.x*c0.x + c0.y;\n"
             "    r3.x = r2.x*c0.z + r3.x;\n"
             "    r3.x = r3.x*hg_Params[1].y;\n"
             "    r2.x = cos(r3.x);\n"
             "    r2.y = sin(r3.x);\n"
             "    r3.xy = float2(-r2.y, r2.x);\n"
             "    r2.x = dot(r1.xy, r2.xy);\n"
             "    r2.y = dot(r1.xy, r3.xy);\n"
             "    r2.xy = r2.xy*hg_Params[2].zw + hg_Params[0].xy;\n"
             "    r1.xy = r2.xy + hg_Params[3].xy;\n"
             "    r1.xy = r1.xy*hg_Params[3].zw;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    r2.xy = r2.xy - r0.zw;\n"
             "    r3 = fmin(r2.yyyy, r2.xxxx);\n"
             "    r2.xy = r0.xy - r2.xy;\n"
             "    r3 = fmin(r2.xxxx, r3);\n"
             "    r2 = fmin(r2.yyyy, r3);\n"
             "    output.color0 = select(r1, c0.wwww, r2 < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=34879b26:7aacb224:e8cc446a:956198eb\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0005:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000067f\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-3.000000000, 1.000000000, 2.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0 = hg_ProgramLocal4;\n"
           "    r1.xyz = hg_TexCoord0.xyz - hg_ProgramLocal0.xyz;\n"
           "    r1.xyz = r1.xyz*hg_ProgramLocal2.xyx;\n"
           "    r2.x = dot(r1.xyz, r1.xyz);\n"
           "    r2.x = inversesqrt(r2.x);\n"
           "    r2.x = r2.x*hg_ProgramLocal1.x;\n"
           "    r2.x = clamp(1.00000 / r2.x, 0.00000, 1.00000);\n"
           "    r3.x = r2.x*r2.x;\n"
           "    r2.x = r3.x*r2.x;\n"
           "    r3.x = r3.x*c0.x + c0.y;\n"
           "    r3.x = r2.x*c0.z + r3.x;\n"
           "    r3.x = r3.x*hg_ProgramLocal1.y;\n"
           "    r2.x = cos(r3.x);\n"
           "    r2.y = sin(r3.x);\n"
           "    r3.xy = vec2(-r2.y, r2.x);\n"
           "    r2.x = dot(r1.xy, r2.xy);\n"
           "    r2.y = dot(r1.xy, r3.xy);\n"
           "    r2.xy = r2.xy*hg_ProgramLocal2.zw + hg_ProgramLocal0.xy;\n"
           "    r1.xy = r2.xy + hg_ProgramLocal3.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal3.zw;\n"
           "    r1 = texture2D(hg_Texture0, r1.xy);\n"
           "    r2.xy = r2.xy - r0.zw;\n"
           "    r3 = min(r2.yyyy, r2.xxxx);\n"
           "    r2.xy = r0.xy - r2.xy;\n"
           "    r3 = min(r2.xxxx, r3);\n"
           "    r2 = min(r2.yyyy, r3);\n"
           "    gl_FragColor = vec4(r2.x < 0.00000 ? c0.w : r1.x, r2.y < 0.00000 ? c0.w : r1.y, r2.z < 0.00000 ? c0.w : r"
           "1.z, r2.w < 0.00000 ? c0.w : r1.w);\n"
           "}\n"
           "//MD5=c7939146:947dda82:3865c810:1124fc93\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0005:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcTwirl::InitProgramDescriptor(HgcTwirl *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTwirl_hgc_visible", "//Metal1.0     \n//LEN=00000004e4\n[[ visible ]] FragmentOut HgcTwirl_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-3.000000000, 1.000000000, 2.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = hg_Params[4];\n"
    "    r1.xyz = texCoord0.xyz - hg_Params[0].xyz;\n"
    "    r1.xyz = r1.xyz*hg_Params[2].xyx;\n"
    "    r2.x = dot(r1.xyz, r1.xyz);\n"
    "    r2.x = rsqrt(r2.x);\n"
    "    r2.x = r2.x*hg_Params[1].x;\n"
    "    r2.x = clamp(1.00000f / r2.x, 0.00000f, 1.00000f);\n"
    "    r3.x = r2.x*r2.x;\n"
    "    r2.x = r3.x*r2.x;\n"
    "    r3.x = r3.x*c0.x + c0.y;\n"
    "    r3.x = r2.x*c0.z + r3.x;\n"
    "    r3.x = r3.x*hg_Params[1].y;\n"
    "    r2.x = cos(r3.x);\n"
    "    r2.y = sin(r3.x);\n"
    "    r3.xy = float2(-r2.y, r2.x);\n"
    "    r2.x = dot(r1.xy, r2.xy);\n"
    "    r2.y = dot(r1.xy, r3.xy);\n"
    "    r2.xy = r2.xy*hg_Params[2].zw + hg_Params[0].xy;\n"
    "    r1.xy = r2.xy + hg_Params[3].xy;\n"
    "    r1.xy = r1.xy*hg_Params[3].zw;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    r2.xy = r2.xy - r0.zw;\n"
    "    r3 = fmin(r2.yyyy, r2.xxxx);\n"
    "    r2.xy = r0.xy - r2.xy;\n"
    "    r3 = fmin(r2.xxxx, r3);\n"
    "    r2 = fmin(r2.yyyy, r3);\n"
    "    output.color0 = select(r1, c0.wwww, r2 < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28B2EFC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcTwirl");
}

void sub_1B28B2F0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28B308C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28B30DC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28B30D4);
}

_QWORD *HgcTwirl::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTwirl [hgc1]");
}

uint64_t HgcTwirl::BindTexture(uint64_t a1, _DWORD *a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(a2[57] - a2[55]);
    v8.n128_f32[0] = 1.0 / (float)(a2[58] - a2[56]);
  }
  v5.n128_f32[0] = (float)(int)a2[60];
  v6.n128_f32[0] = (float)(int)a2[61];
  (*(void (**)(_DWORD *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v5, v6, v7, v8);
  (*(void (**)(_DWORD *, uint64_t, float, float, float, float))(*(_QWORD *)a2 + 136))(a2, 4, (float)(a2[49] - a2[47]), (float)(a2[50] - a2[48]), (float)(int)a2[47], (float)(int)a2[48]);
  return 0;
}

uint64_t HgcTwirl::Bind(HgcTwirl *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgcTwirl *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcTwirl::RenderTile(HGNode *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  HGRenderer *v8;
  HGRenderer *v9;
  HGNode *Input;
  int32x2_t DOD;
  int32x2_t v12;
  int v13;
  float32x4_t v14;
  int32x4_t v15;
  int v16;
  int8x16_t v17;
  uint64_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  int v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x16_t v100;
  int8x16_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  uint64_t v110;
  float32x4_t v111;
  uint64_t v112;
  int32x4_t v113;
  float32x2_t v114;
  float32x4_t *v115;
  float32x4_t v116;
  int8x16_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x4_t *v120;
  float32x4_t v121;
  int8x16_t v122;
  float32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  int32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int8x16_t *v131;
  uint64_t v132;
  float32x4_t v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int8x16_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  int8x16_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  int8x16_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  int8x16_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  uint64_t v174;
  float32x4_t v175;
  uint64_t v176;
  int32x4_t v177;
  float32x2_t v178;
  float32x4_t *v179;
  float32x4_t v180;
  int8x16_t v181;
  float32x4_t v182;
  int32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int32x2_t v187;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HGNode *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *((_DWORD *)a2 + 2);
  v187 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  v8 = (HGRenderer *)HGTile::Renderer(a2);
  v9 = (HGRenderer *)HGTile::Renderer(a2);
  Input = HGRenderer::GetInput(v9, this, 0);
  DOD = (int32x2_t)HGRenderer::GetDOD(v8, Input);
  if (v7 >= 1)
  {
    v13 = 0;
    *(float32x2_t *)v14.f32 = vadd_f32(vcvt_f32_s32(v187), (float32x2_t)0x3F0000003F000000);
    v14.i64[1] = 0x3F80000000000000;
    *(int32x2_t *)v15.i8 = vsub_s32(v12, DOD);
    v15.u64[1] = (unint64_t)DOD;
    v16 = v6 - v187.i32[0];
    v17 = (int8x16_t)vcvtq_f32_s32(v15);
    v18 = *((_QWORD *)a2 + 2);
    v19 = (float32x4_t)vextq_s8(v17, v17, 8uLL);
    v20 = 16 * *((int *)a2 + 6);
    v21.i64[0] = 0x3F0000003F000000;
    v21.i64[1] = 0x3F0000003F000000;
    v22 = v14;
    do
    {
      if (v16 < 2)
      {
        v23 = 0;
        v25 = v22;
      }
      else
      {
        v23 = 0;
        v24 = v6 - v187.i32[0];
        v25 = v22;
        do
        {
          v26 = vaddq_f32(v25, (float32x4_t)xmmword_1B304F230);
          v27 = *((_QWORD *)this + 51);
          v28 = *(float32x4_t *)(v27 + 16);
          v29 = vsubq_f32(v25, *(float32x4_t *)v27);
          v30 = *(int8x16_t *)(v27 + 32);
          v31 = *(float32x4_t *)(v27 + 48);
          v32 = (float32x4_t)vdupq_lane_s64(v30.i64[0], 0);
          v33 = vmulq_f32(v29, v32);
          v34 = vmulq_f32(vsubq_f32(v26, *(float32x4_t *)v27), v32);
          v35 = (int32x4_t)vmulq_f32(v33, v33);
          v36 = (int32x4_t)vmulq_f32(v34, v34);
          v37 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), vaddq_f32((float32x4_t)v35, (float32x4_t)vrev64q_s32(v35)));
          v38 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), vaddq_f32((float32x4_t)v36, (float32x4_t)vrev64q_s32(v36)));
          v39 = vminq_f32(vrsqrteq_f32(v37), v31);
          v40 = vminq_f32(vrsqrteq_f32(v38), v31);
          v41 = vminq_f32(vmulq_f32(v39, vrsqrtsq_f32(vmulq_f32(v39, v37), v39)), v31);
          v42 = vminq_f32(vmulq_f32(v40, vrsqrtsq_f32(vmulq_f32(v40, v38), v40)), v31);
          v43 = vmulq_f32(vmulq_f32(v41, vrsqrtsq_f32(vmulq_f32(v37, v41), v41)), v28);
          v44 = vmulq_f32(vmulq_f32(v42, vrsqrtsq_f32(vmulq_f32(v38, v42), v42)), v28);
          v46 = *(float32x4_t *)(v27 + 64);
          v45 = *(int8x16_t *)(v27 + 80);
          v47 = vminq_f32(vmaxq_f32(vrecpeq_f32(v43), v46), v31);
          v48 = vminq_f32(vmaxq_f32(vrecpeq_f32(v44), v46), v31);
          v49 = vminq_f32(vmaxq_f32(vmulq_f32(v47, vrecpsq_f32(v43, v47)), v46), v31);
          v50 = vminq_f32(vmaxq_f32(vmulq_f32(v48, vrecpsq_f32(v44, v48)), v46), v31);
          v51 = vmulq_f32(v50, vrecpsq_f32(v44, v50));
          v52 = vmaxq_f32(vmulq_f32(v49, vrecpsq_f32(v43, v49)), (float32x4_t)v45);
          v53 = vmaxq_f32(v51, (float32x4_t)v45);
          v54 = *(int8x16_t *)(v27 + 96);
          v55 = *(float32x4_t *)(v27 + 112);
          v56 = vminq_f32(v52, (float32x4_t)v54);
          v57 = vminq_f32(v53, (float32x4_t)v54);
          v58 = vmulq_f32(v56, v56);
          v59 = vmulq_f32(v57, v57);
          v60 = vaddq_f32(vaddq_f32((float32x4_t)v54, vmulq_f32(v58, v55)), vmulq_lane_f32(vmulq_f32(v56, v58), *(float32x2_t *)v55.f32, 1));
          v61 = vaddq_f32(vaddq_f32((float32x4_t)v54, vmulq_f32(v59, v55)), vmulq_lane_f32(vmulq_f32(v57, v59), *(float32x2_t *)v55.f32, 1));
          v62 = vmulq_lane_f32(v60, *(float32x2_t *)v28.f32, 1);
          v63 = vmulq_lane_f32(v61, *(float32x2_t *)v28.f32, 1);
          v64 = *(float32x4_t *)(v27 + 128);
          v65 = *(float32x4_t *)(v27 + 144);
          v66 = vmulq_f32(v64, v62);
          v67 = vmulq_f32(v64, v63);
          v68 = vcvtq_f32_s32(vcvtq_s32_f32(v66));
          v69 = vcvtq_f32_s32(vcvtq_s32_f32(v67));
          v70 = vabdq_f32(vsubq_f32(v66, vsubq_f32(v68, (float32x4_t)vandq_s8(v54, (int8x16_t)vcgtq_f32(v68, v66)))), v65);
          v71 = vabdq_f32(vsubq_f32(v67, vsubq_f32(v69, (float32x4_t)vandq_s8(v54, (int8x16_t)vcgtq_f32(v69, v67)))), v65);
          v72 = *(float32x4_t *)(v27 + 160);
          v73 = *(float32x4_t *)(v27 + 176);
          v74 = vsubq_f32(v70, v72);
          v75 = vsubq_f32(v71, v72);
          v76 = vmulq_f32(v74, v74);
          v77 = vmulq_f32(v75, v75);
          v78 = *(int8x16_t *)(v27 + 192);
          v79 = *(float32x4_t *)(v27 + 208);
          v80 = *(float32x4_t *)(v27 + 224);
          v81 = *(int8x16_t *)(v27 + 240);
          v82 = (int8x16_t)vmulq_f32(v74, vaddq_f32(v80, vmulq_f32(v76, vaddq_f32(v79, vmulq_f32(v76, vaddq_f32(v73, vmulq_f32((float32x4_t)v78, v76)))))));
          v83 = (int8x16_t)vmulq_f32(v75, vaddq_f32(v80, vmulq_f32(v77, vaddq_f32(v79, vmulq_f32(v77, vaddq_f32(v73, vmulq_f32((float32x4_t)v78, v77)))))));
          v84 = vaddq_f32(vmulq_f32((float32x4_t)vrev64q_s32((int32x4_t)v62), v79), v80);
          v85 = vaddq_f32(vmulq_f32((float32x4_t)vrev64q_s32((int32x4_t)v63), v79), v80);
          v86 = vcvtq_f32_s32(vcvtq_s32_f32(v84));
          v87 = vcvtq_f32_s32(vcvtq_s32_f32(v85));
          v88 = vaddq_f32(v80, vabdq_f32(vsubq_f32(v84, vsubq_f32(v86, (float32x4_t)vandq_s8(v78, (int8x16_t)vcgtq_f32(v86, v84)))), v73));
          v89 = vaddq_f32(v80, vabdq_f32(vsubq_f32(v85, vsubq_f32(v87, (float32x4_t)vandq_s8(v78, (int8x16_t)vcgtq_f32(v87, v85)))), v73));
          v90 = vmulq_f32(v88, v88);
          v91 = vmulq_f32(v89, v89);
          v92 = vaddq_f32(v72, vmulq_f32(v65, v90));
          v93 = vaddq_f32(v72, vmulq_f32(v65, v91));
          v94 = vaddq_f32(v64, vmulq_f32(v90, v92));
          v95 = vaddq_f32(v64, vmulq_f32(v91, v93));
          v96 = vaddq_f32((float32x4_t)v54, vmulq_f32(v90, v94));
          v97 = vaddq_f32((float32x4_t)v54, vmulq_f32(v91, v95));
          v98 = (float32x4_t)vbslq_s8(v81, v82, (int8x16_t)vmulq_f32(v88, v96));
          v99 = (float32x4_t)vbslq_s8(v81, v83, (int8x16_t)vmulq_f32(v89, v97));
          v100 = (int8x16_t)vrev64q_s32((int32x4_t)v98);
          v101 = (int8x16_t)vrev64q_s32((int32x4_t)v99);
          v102 = vmulq_f32(v33, v98);
          v103 = vmulq_f32(v34, v99);
          v104 = vmulq_f32(v33, (float32x4_t)vbslq_s8(v81, (int8x16_t)vnegq_f32((float32x4_t)v100), v100));
          v105 = vmulq_f32(v34, (float32x4_t)vbslq_s8(v81, (int8x16_t)vnegq_f32((float32x4_t)v101), v101));
          v106 = (float32x4_t)vbslq_s8(v81, (int8x16_t)vaddq_f32(v103, (float32x4_t)vrev64q_s32((int32x4_t)v103)), (int8x16_t)vaddq_f32(v105, (float32x4_t)vrev64q_s32((int32x4_t)v105)));
          v107 = (float32x4_t)vextq_s8(v30, v30, 8uLL);
          v108 = vaddq_f32(*(float32x4_t *)v27, vmulq_f32(v107, (float32x4_t)vbslq_s8(v81, (int8x16_t)vaddq_f32(v102, (float32x4_t)vrev64q_s32((int32x4_t)v102)), (int8x16_t)vaddq_f32(v104, (float32x4_t)vrev64q_s32((int32x4_t)v104)))));
          v109 = vaddq_f32(*(float32x4_t *)v27, vmulq_f32(v107, v106));
          v110 = *((int *)a2 + 22);
          v111 = vsubq_f32(v108, v14);
          v112 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v113 = vaddq_s32(vcvtq_s32_f32(v111), vcltzq_f32(v111));
            v114 = (float32x2_t)vsubq_f32(v111, vcvtq_f32_s32(v113)).u64[0];
            v115 = (float32x4_t *)(v112 + 16 * (v113.i32[0] + v113.i32[1] * (int)v110));
            v116 = vaddq_f32(*v115, vmulq_n_f32(vsubq_f32(v115[1], *v115), v114.f32[0]));
            v117 = (int8x16_t)vaddq_f32(v116, vmulq_lane_f32(vsubq_f32(vaddq_f32(v115[v110], vmulq_n_f32(vsubq_f32(v115[(int)v110 + 1], v115[v110]), v114.f32[0])), v116), v114, 1));
            v118 = vsubq_f32(v109, v14);
            v119 = vaddq_s32(vcvtq_s32_f32(v118), vcltzq_f32(v118));
            v118.i64[0] = vsubq_f32(v118, vcvtq_f32_s32(v119)).u64[0];
            v120 = (float32x4_t *)(v112 + 16 * (v119.i32[0] + v119.i32[1] * (int)v110));
            v121 = vaddq_f32(*v120, vmulq_n_f32(vsubq_f32(v120[1], *v120), v118.f32[0]));
            v122 = (int8x16_t)vaddq_f32(v121, vmulq_lane_f32(vsubq_f32(vaddq_f32(v120[v110], vmulq_n_f32(vsubq_f32(v120[(int)v110 + 1], v120[v110]), v118.f32[0])), v121), *(float32x2_t *)v118.f32, 1));
          }
          else
          {
            v123 = vaddq_f32(v111, v21);
            v124 = vcvtq_s32_f32(v123);
            v123.i64[0] = vaddq_s32(v124, vcgtq_f32(vcvtq_f32_s32(v124), v123)).u64[0];
            v117 = *(int8x16_t *)(v112 + 16 * (v123.i32[0] + v123.i32[1] * (int)v110));
            v125 = vaddq_f32(vsubq_f32(v109, v14), v21);
            v126 = vcvtq_s32_f32(v125);
            v125.i64[0] = vaddq_s32(v126, vcgtq_f32(vcvtq_f32_s32(v126), v125)).u64[0];
            v122 = *(int8x16_t *)(v112 + 16 * (v125.i32[0] + v125.i32[1] * (int)v110));
          }
          v127 = vsubq_f32(v108, v19);
          v128 = vsubq_f32(v109, v19);
          v129 = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 0));
          v130 = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 0));
          v127.i64[0] = vsubq_f32((float32x4_t)v17, v127).u64[0];
          v128.i64[0] = vsubq_f32((float32x4_t)v17, v128).u64[0];
          v131 = (int8x16_t *)(v18 + 16 * v23);
          *v131 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v45, vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1), vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 0), v129))), v45, v117);
          v131[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v45, vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 1), vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 0), v130))), v45, v122);
          v25 = vaddq_f32(v26, (float32x4_t)xmmword_1B304F230);
          v23 += 2;
          v24 -= 2;
        }
        while (v24 > 1);
        v23 = v23;
      }
      if ((int)v23 < v16)
      {
        v132 = *((_QWORD *)this + 51);
        v133 = *(float32x4_t *)(v132 + 16);
        v134 = *(int8x16_t *)(v132 + 32);
        v135 = *(float32x4_t *)(v132 + 48);
        v136 = vmulq_f32(vsubq_f32(v25, *(float32x4_t *)v132), (float32x4_t)vdupq_lane_s64(v134.i64[0], 0));
        v137 = (int32x4_t)vmulq_f32(v136, v136);
        v138 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v137, (int8x16_t)v137, 8uLL), vaddq_f32((float32x4_t)v137, (float32x4_t)vrev64q_s32(v137)));
        v139 = vminq_f32(vrsqrteq_f32(v138), v135);
        v140 = vminq_f32(vmulq_f32(v139, vrsqrtsq_f32(vmulq_f32(v139, v138), v139)), v135);
        v141 = vmulq_f32(vmulq_f32(v140, vrsqrtsq_f32(vmulq_f32(v140, v138), v140)), v133);
        v143 = *(float32x4_t *)(v132 + 64);
        v142 = *(int8x16_t *)(v132 + 80);
        v144 = vminq_f32(vmaxq_f32(vrecpeq_f32(v141), v143), v135);
        v145 = vminq_f32(vmaxq_f32(vmulq_f32(v144, vrecpsq_f32(v141, v144)), v143), v135);
        v146 = vmaxq_f32(vmulq_f32(v145, vrecpsq_f32(v141, v145)), (float32x4_t)v142);
        v147 = *(int8x16_t *)(v132 + 96);
        v148 = vminq_f32(v146, (float32x4_t)v147);
        v149 = vmulq_f32(v148, v148);
        v150 = vmulq_lane_f32(vaddq_f32(vaddq_f32((float32x4_t)v147, vmulq_f32(v149, *(float32x4_t *)(v132 + 112))), vmulq_lane_f32(vmulq_f32(v148, v149), *(float32x2_t *)(v132 + 112), 1)), *(float32x2_t *)v133.f32, 1);
        v151 = *(float32x4_t *)(v132 + 128);
        v152 = *(float32x4_t *)(v132 + 144);
        v153 = vmulq_f32(v151, v150);
        v154 = vcvtq_f32_s32(vcvtq_s32_f32(v153));
        v155 = vabdq_f32(vsubq_f32(v153, vsubq_f32(v154, (float32x4_t)vandq_s8(v147, (int8x16_t)vcgtq_f32(v154, v153)))), v152);
        v156 = *(float32x4_t *)(v132 + 160);
        v157 = *(float32x4_t *)(v132 + 176);
        v158 = vsubq_f32(v155, v156);
        v159 = vmulq_f32(v158, v158);
        v160 = *(int8x16_t *)(v132 + 192);
        v161 = *(float32x4_t *)(v132 + 208);
        v162 = *(float32x4_t *)(v132 + 224);
        v163 = *(int8x16_t *)(v132 + 240);
        v164 = (int8x16_t)vmulq_f32(v158, vaddq_f32(v162, vmulq_f32(v159, vaddq_f32(v161, vmulq_f32(v159, vaddq_f32(v157, vmulq_f32((float32x4_t)v160, v159)))))));
        v165 = vaddq_f32(vmulq_f32((float32x4_t)vrev64q_s32((int32x4_t)v150), v161), v162);
        v166 = vcvtq_f32_s32(vcvtq_s32_f32(v165));
        v167 = vaddq_f32(v162, vabdq_f32(vsubq_f32(v165, vsubq_f32(v166, (float32x4_t)vandq_s8(v160, (int8x16_t)vcgtq_f32(v166, v165)))), v157));
        v168 = vmulq_f32(v167, v167);
        v169 = (float32x4_t)vbslq_s8(v163, v164, (int8x16_t)vmulq_f32(v167, vaddq_f32((float32x4_t)v147, vmulq_f32(v168, vaddq_f32(v151, vmulq_f32(v168, vaddq_f32(v156, vmulq_f32(v152, v168))))))));
        v170 = (int8x16_t)vrev64q_s32((int32x4_t)v169);
        v171 = vmulq_f32(v136, v169);
        v172 = vmulq_f32(v136, (float32x4_t)vbslq_s8(v163, (int8x16_t)vnegq_f32((float32x4_t)v170), v170));
        v173 = vaddq_f32(*(float32x4_t *)v132, vmulq_f32((float32x4_t)vextq_s8(v134, v134, 8uLL), (float32x4_t)vbslq_s8(v163, (int8x16_t)vaddq_f32(v171, (float32x4_t)vrev64q_s32((int32x4_t)v171)), (int8x16_t)vaddq_f32(v172, (float32x4_t)vrev64q_s32((int32x4_t)v172)))));
        v174 = *((int *)a2 + 22);
        v175 = vsubq_f32(v173, v14);
        v176 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v177 = vaddq_s32(vcvtq_s32_f32(v175), vcltzq_f32(v175));
          v178 = (float32x2_t)vsubq_f32(v175, vcvtq_f32_s32(v177)).u64[0];
          v179 = (float32x4_t *)(v176 + 16 * (v177.i32[0] + v177.i32[1] * (int)v174));
          v180 = vaddq_f32(*v179, vmulq_n_f32(vsubq_f32(v179[1], *v179), v178.f32[0]));
          v181 = (int8x16_t)vaddq_f32(v180, vmulq_lane_f32(vsubq_f32(vaddq_f32(v179[v174], vmulq_n_f32(vsubq_f32(v179[(int)v174 + 1], v179[v174]), v178.f32[0])), v180), v178, 1));
        }
        else
        {
          v182 = vaddq_f32(v175, v21);
          v183 = vcvtq_s32_f32(v182);
          v182.i64[0] = vaddq_s32(v183, vcgtq_f32(vcvtq_f32_s32(v183), v182)).u64[0];
          v181 = *(int8x16_t *)(v176 + 16 * (v182.i32[0] + v182.i32[1] * (int)v174));
        }
        v184 = vsubq_f32(v173, v19);
        v185 = vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v184.f32, 1), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v184.f32, 0));
        v184.i64[0] = vsubq_f32((float32x4_t)v17, v184).u64[0];
        *(int8x16_t *)(v18 + 16 * v23) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v142, vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v184.f32, 1), vminq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v184.f32, 0), v185))), v142, v181);
      }
      v22 = vaddq_f32(v22, (float32x4_t)xmmword_1B304F240);
      v18 += v20;
      ++v13;
    }
    while (v13 != v7);
  }
  return 0;
}

uint64_t HgcTwirl::GetDOD(HgcTwirl *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcTwirl *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcTwirl::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcTwirl::HgcTwirl(HgcTwirl *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F1240;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(int32x4_t *)(v3 + 48) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 64) = xmmword_1B3051200;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)(v3 + 88) = 0;
  *(_OWORD *)(v3 + 96) = xmmword_1B3052F20;
  *(_OWORD *)(v3 + 112) = xmmword_1B3052F30;
  *(_OWORD *)(v3 + 128) = xmmword_1B3052F40;
  *(_OWORD *)(v3 + 144) = xmmword_1B3052F50;
  *(_OWORD *)(v3 + 160) = xmmword_1B3052F60;
  *(_OWORD *)(v3 + 176) = xmmword_1B3052F70;
  *(_OWORD *)(v3 + 192) = xmmword_1B3052F80;
  *(_OWORD *)(v3 + 208) = xmmword_1B3052F90;
  *(_OWORD *)(v3 + 224) = xmmword_1B3052FA0;
  *(_OWORD *)(v3 + 240) = xmmword_1B3050E20;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcTwirl *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28B3C94(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcTwirl::~HgcTwirl(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F1240;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40104B78CFLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcTwirl::~HgcTwirl(this);
  HGObject::operator delete(v1);
}

uint64_t HgcTwirl::SetParameter(HgcTwirl *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcTwirl::GetParameter(HgcTwirl *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcUnderwaterRefractV2::GetProgram(HgcUnderwaterRefractV2 *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000ce4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(6.281380177, 1.000000000, 0.000000000, 0.5000000000);\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    s0.w = 1.00000f / s0.x;\n"
             "    s0.z = 1.00000f / hg_Params[6].z;\n"
             "    s0.y = dot(frag._texCoord0, hg_Params[1]);\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[0]);\n"
             "    s0.xy = s0.xy*s0.ww;\n"
             "    s1.w = s0.x*s0.z + float(c0.w);\n"
             "    s1.z = 1.00000f / hg_Params[7].z;\n"
             "    s1.z = s0.y*s1.z + float(c0.w);\n"
             "    s0.zw = mix(hg_Params[9].xy, hg_Params[9].zw, s1.ww);\n"
             "    s1.xy = mix(hg_Params[14].xy, hg_Params[14].zw, s1.ww);\n"
             "    s2.xy = mix(s0.zw, s1.xy, s1.zz);\n"
             "    s2.xy = s2.xy*float2(c0.xx);\n"
             "    s1.xy = mix(hg_Params[10].xy, hg_Params[10].zw, s1.ww);\n"
             "    s0.zw = mix(hg_Params[15].xy, hg_Params[15].zw, s1.ww);\n"
             "    s0.zw = mix(s1.xy, s0.zw, s1.zz);\n"
             "    s2.z = sin(s2.x);\n"
             "    s2.x = s0.z*float(c0.x);\n"
             "    s1.x = sin(s2.y);\n"
             "    s1.y = s1.x*hg_Params[20].y;\n"
             "    s2.y = sin(s2.x);\n"
             "    s0.z = s0.w*float(c0.x);\n"
             "    s1.y = s2.z*hg_Params[19].y + s1.y;\n"
             "    s2.w = s1.x*hg_Params[20].x;\n"
             "    s0.w = s2.y*hg_Params[21].y + s1.y;\n"
             "    s2.x = sin(s0.z);\n"
             "    s3.x = s2.x*hg_Params[22].y + s0.w;\n"
             "    s1.xy = mix(hg_Params[11].xy, hg_Params[11].zw, s1.ww);\n"
             "    s0.zw = mix(hg_Params[16].xy, hg_Params[16].zw, s1.ww);\n"
             "    s0.zw = mix(s1.xy, s0.zw, s1.zz);\n"
             "    s2.z = s2.z*hg_Params[19].x + s2.w;\n"
             "    s1.x = s2.y*hg_Params[21].x + s2.z;\n"
             "    s1.y = s2.x*hg_Params[22].x + s1.x;\n"
             "    s0.zw = s0.zw*float2(c0.xx);\n"
             "    s1.x = sin(s0.z);\n"
             "    s2.xy = mix(hg_Params[12].xy, hg_Params[12].zw, s1.ww);\n"
             "    s0.z = s1.x*hg_Params[23].x + s1.y;\n"
             "    s2.z = s1.x*hg_Params[23].y + s3.x;\n"
             "    s1.xy = mix(hg_Params[17].xy, hg_Params[17].zw, s1.ww);\n"
             "    s1.xy = mix(s2.xy, s1.xy, s1.zz);\n"
             "    s2.y = s1.x*float(c0.x);\n"
             "    s0.w = sin(s0.w);\n"
             "    s2.x = s0.w*hg_Params[24].y + s2.z;\n"
             "    s2.z = s0.w*hg_Params[24].x + s0.z;\n"
             "    s1.x = s1.y*float(c0.x);\n"
             "    s2.y = sin(s2.y);\n"
             "    s1.y = s2.y*hg_Params[25].y + s2.x;\n"
             "    s2.x = sin(s1.x);\n"
             "    s2.w = s2.x*hg_Params[26].y + s1.y;\n"
             "    s1.xy = mix(hg_Params[13].xy, hg_Params[13].zw, s1.ww);\n"
             "    s0.zw = mix(hg_Params[18].xy, hg_Params[18].zw, s1.ww);\n"
             "    s0.zw = mix(s1.xy, s0.zw, s1.zz);\n"
             "    s3.w = s2.y*hg_Params[25].x + s2.z;\n"
             "    s0.zw = s0.zw*float2(c0.xx);\n"
             "    s0.zw = sin(s0.zw);\n"
             "    s3.x = s2.x*hg_Params[26].x + s3.w;\n"
             "    s3.x = s0.z*hg_Params[27].x + s3.x;\n"
             "    s3.x = s0.w*hg_Params[28].x + s3.x;\n"
             "    s0.x = s3.x*hg_Params[8].x + s0.x;\n"
             "    s0.z = s0.z*hg_Params[27].y + s2.w;\n"
             "    s1.x = s0.w*hg_Params[28].y + s0.z;\n"
             "    s0.y = s1.x*hg_Params[8].y + s0.y;\n"
             "    s0.w = float(c0.y);\n"
             "    s3.x = dot(s0.xyw, hg_Params[5].xyz);\n"
             "    s3.z = 1.00000f / s3.x;\n"
             "    s3.y = dot(s0.xyw, hg_Params[4].xyz);\n"
             "    s3.x = dot(s0.xyw, hg_Params[3].xyz);\n"
             "    s3.xy = s3.xy*s3.zz;\n"
             "    s3.xy = s3.xy + hg_Params[29].xy;\n"
             "    s3.xy = s3.xy*hg_Params[29].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s3.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2103ea10:3689da86:e42936e3:1dc4631c\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:001e:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000c95\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(6.281380177, 1.000000000, 0.000000000, 0.5000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[2]);\n"
             "    r0.w = 1.00000f / r0.x;\n"
             "    r0.z = 1.00000f / hg_Params[6].z;\n"
             "    r0.y = dot(frag._texCoord0, hg_Params[1]);\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[0]);\n"
             "    r0.xy = r0.xy*r0.ww;\n"
             "    r1.w = r0.x*r0.z + c0.w;\n"
             "    r1.z = 1.00000f / hg_Params[7].z;\n"
             "    r1.z = r0.y*r1.z + c0.w;\n"
             "    r0.zw = mix(hg_Params[9].xy, hg_Params[9].zw, r1.ww);\n"
             "    r1.xy = mix(hg_Params[14].xy, hg_Params[14].zw, r1.ww);\n"
             "    r2.xy = mix(r0.zw, r1.xy, r1.zz);\n"
             "    r2.xy = r2.xy*c0.xx;\n"
             "    r1.xy = mix(hg_Params[10].xy, hg_Params[10].zw, r1.ww);\n"
             "    r0.zw = mix(hg_Params[15].xy, hg_Params[15].zw, r1.ww);\n"
             "    r0.zw = mix(r1.xy, r0.zw, r1.zz);\n"
             "    r2.z = sin(r2.x);\n"
             "    r2.x = r0.z*c0.x;\n"
             "    r1.x = sin(r2.y);\n"
             "    r1.y = r1.x*hg_Params[20].y;\n"
             "    r2.y = sin(r2.x);\n"
             "    r0.z = r0.w*c0.x;\n"
             "    r1.y = r2.z*hg_Params[19].y + r1.y;\n"
             "    r2.w = r1.x*hg_Params[20].x;\n"
             "    r0.w = r2.y*hg_Params[21].y + r1.y;\n"
             "    r2.x = sin(r0.z);\n"
             "    r3.x = r2.x*hg_Params[22].y + r0.w;\n"
             "    r1.xy = mix(hg_Params[11].xy, hg_Params[11].zw, r1.ww);\n"
             "    r0.zw = mix(hg_Params[16].xy, hg_Params[16].zw, r1.ww);\n"
             "    r0.zw = mix(r1.xy, r0.zw, r1.zz);\n"
             "    r2.z = r2.z*hg_Params[19].x + r2.w;\n"
             "    r1.x = r2.y*hg_Params[21].x + r2.z;\n"
             "    r1.y = r2.x*hg_Params[22].x + r1.x;\n"
             "    r0.zw = r0.zw*c0.xx;\n"
             "    r1.x = sin(r0.z);\n"
             "    r2.xy = mix(hg_Params[12].xy, hg_Params[12].zw, r1.ww);\n"
             "    r0.z = r1.x*hg_Params[23].x + r1.y;\n"
             "    r2.z = r1.x*hg_Params[23].y + r3.x;\n"
             "    r1.xy = mix(hg_Params[17].xy, hg_Params[17].zw, r1.ww);\n"
             "    r1.xy = mix(r2.xy, r1.xy, r1.zz);\n"
             "    r2.y = r1.x*c0.x;\n"
             "    r0.w = sin(r0.w);\n"
             "    r2.x = r0.w*hg_Params[24].y + r2.z;\n"
             "    r2.z = r0.w*hg_Params[24].x + r0.z;\n"
             "    r1.x = r1.y*c0.x;\n"
             "    r2.y = sin(r2.y);\n"
             "    r1.y = r2.y*hg_Params[25].y + r2.x;\n"
             "    r2.x = sin(r1.x);\n"
             "    r2.w = r2.x*hg_Params[26].y + r1.y;\n"
             "    r1.xy = mix(hg_Params[13].xy, hg_Params[13].zw, r1.ww);\n"
             "    r0.zw = mix(hg_Params[18].xy, hg_Params[18].zw, r1.ww);\n"
             "    r0.zw = mix(r1.xy, r0.zw, r1.zz);\n"
             "    r3.w = r2.y*hg_Params[25].x + r2.z;\n"
             "    r0.zw = r0.zw*c0.xx;\n"
             "    r0.zw = sin(r0.zw);\n"
             "    r3.x = r2.x*hg_Params[26].x + r3.w;\n"
             "    r3.x = r0.z*hg_Params[27].x + r3.x;\n"
             "    r3.x = r0.w*hg_Params[28].x + r3.x;\n"
             "    r0.x = r3.x*hg_Params[8].x + r0.x;\n"
             "    r0.z = r0.z*hg_Params[27].y + r2.w;\n"
             "    r1.x = r0.w*hg_Params[28].y + r0.z;\n"
             "    r0.y = r1.x*hg_Params[8].y + r0.y;\n"
             "    r0.w = c0.y;\n"
             "    r3.x = dot(r0.xyw, hg_Params[5].xyz);\n"
             "    r3.z = 1.00000f / r3.x;\n"
             "    r3.y = dot(r0.xyw, hg_Params[4].xyz);\n"
             "    r3.x = dot(r0.xyw, hg_Params[3].xyz);\n"
             "    r3.xy = r3.xy*r3.zz;\n"
             "    r3.xy = r3.xy + hg_Params[29].xy;\n"
             "    r3.xy = r3.xy*hg_Params[29].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r3.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ef14139d:41b39f2f:53af535a:dc40e694\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:001e:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_83;
  }
}

void HgcUnderwaterRefractV2::InitProgramDescriptor(HgcUnderwaterRefractV2 *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcUnderwaterRefractV2_hgc_visible", "//Metal1.0     \n//LEN=0000000bd2\n[[ visible ]] FragmentOut HgcUnderwaterRefractV2_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(6.281380177, 1.000000000, 0.000000000, 0.5000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = dot(texCoord0, hg_Params[2]);\n"
    "    r0.w = 1.00000f / r0.x;\n"
    "    r0.z = 1.00000f / hg_Params[6].z;\n"
    "    r0.y = dot(texCoord0, hg_Params[1]);\n"
    "    r0.x = dot(texCoord0, hg_Params[0]);\n"
    "    r0.xy = r0.xy*r0.ww;\n"
    "    r1.w = r0.x*r0.z + c0.w;\n"
    "    r1.z = 1.00000f / hg_Params[7].z;\n"
    "    r1.z = r0.y*r1.z + c0.w;\n"
    "    r0.zw = mix(hg_Params[9].xy, hg_Params[9].zw, r1.ww);\n"
    "    r1.xy = mix(hg_Params[14].xy, hg_Params[14].zw, r1.ww);\n"
    "    r2.xy = mix(r0.zw, r1.xy, r1.zz);\n"
    "    r2.xy = r2.xy*c0.xx;\n"
    "    r1.xy = mix(hg_Params[10].xy, hg_Params[10].zw, r1.ww);\n"
    "    r0.zw = mix(hg_Params[15].xy, hg_Params[15].zw, r1.ww);\n"
    "    r0.zw = mix(r1.xy, r0.zw, r1.zz);\n"
    "    r2.z = sin(r2.x);\n"
    "    r2.x = r0.z*c0.x;\n"
    "    r1.x = sin(r2.y);\n"
    "    r1.y = r1.x*hg_Params[20].y;\n"
    "    r2.y = sin(r2.x);\n"
    "    r0.z = r0.w*c0.x;\n"
    "    r1.y = r2.z*hg_Params[19].y + r1.y;\n"
    "    r2.w = r1.x*hg_Params[20].x;\n"
    "    r0.w = r2.y*hg_Params[21].y + r1.y;\n"
    "    r2.x = sin(r0.z);\n"
    "    r3.x = r2.x*hg_Params[22].y + r0.w;\n"
    "    r1.xy = mix(hg_Params[11].xy, hg_Params[11].zw, r1.ww);\n"
    "    r0.zw = mix(hg_Params[16].xy, hg_Params[16].zw, r1.ww);\n"
    "    r0.zw = mix(r1.xy, r0.zw, r1.zz);\n"
    "    r2.z = r2.z*hg_Params[19].x + r2.w;\n"
    "    r1.x = r2.y*hg_Params[21].x + r2.z;\n"
    "    r1.y = r2.x*hg_Params[22].x + r1.x;\n"
    "    r0.zw = r0.zw*c0.xx;\n"
    "    r1.x = sin(r0.z);\n"
    "    r2.xy = mix(hg_Params[12].xy, hg_Params[12].zw, r1.ww);\n"
    "    r0.z = r1.x*hg_Params[23].x + r1.y;\n"
    "    r2.z = r1.x*hg_Params[23].y + r3.x;\n"
    "    r1.xy = mix(hg_Params[17].xy, hg_Params[17].zw, r1.ww);\n"
    "    r1.xy = mix(r2.xy, r1.xy, r1.zz);\n"
    "    r2.y = r1.x*c0.x;\n"
    "    r0.w = sin(r0.w);\n"
    "    r2.x = r0.w*hg_Params[24].y + r2.z;\n"
    "    r2.z = r0.w*hg_Params[24].x + r0.z;\n"
    "    r1.x = r1.y*c0.x;\n"
    "    r2.y = sin(r2.y);\n"
    "    r1.y = r2.y*hg_Params[25].y + r2.x;\n"
    "    r2.x = sin(r1.x);\n"
    "    r2.w = r2.x*hg_Params[26].y + r1.y;\n"
    "    r1.xy = mix(hg_Params[13].xy, hg_Params[13].zw, r1.ww);\n"
    "    r0.zw = mix(hg_Params[18].xy, hg_Params[18].zw, r1.ww);\n"
    "    r0.zw = mix(r1.xy, r0.zw, r1.zz);\n"
    "    r3.w = r2.y*hg_Params[25].x + r2.z;\n"
    "    r0.zw = r0.zw*c0.xx;\n"
    "    r0.zw = sin(r0.zw);\n"
    "    r3.x = r2.x*hg_Params[26].x + r3.w;\n"
    "    r3.x = r0.z*hg_Params[27].x + r3.x;\n"
    "    r3.x = r0.w*hg_Params[28].x + r3.x;\n"
    "    r0.x = r3.x*hg_Params[8].x + r0.x;\n"
    "    r0.z = r0.z*hg_Params[27].y + r2.w;\n"
    "    r1.x = r0.w*hg_Params[28].y + r0.z;\n"
    "    r0.y = r1.x*hg_Params[8].y + r0.y;\n"
    "    r0.w = c0.y;\n"
    "    r3.x = dot(r0.xyw, hg_Params[5].xyz);\n"
    "    r3.z = 1.00000f / r3.x;\n"
    "    r3.y = dot(r0.xyw, hg_Params[4].xyz);\n"
    "    r3.x = dot(r0.xyw, hg_Params[3].xyz);\n"
    "    r3.xy = r3.xy*r3.zz;\n"
    "    r3.xy = r3.xy + hg_Params[29].xy;\n"
    "    r3.xy = r3.xy*hg_Params[29].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r3.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28B3E9C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcUnderwaterRefractV2");
}

void sub_1B28B3EAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052FC0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28B402C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28B407C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28B4074);
}

_QWORD *HgcUnderwaterRefractV2::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcUnderwaterRefractV2 [hgc1]");
}

uint64_t HgcUnderwaterRefractV2::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 29, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcUnderwaterRefractV2::Bind(HgcUnderwaterRefractV2 *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, *((_QWORD *)this + 51) + 144, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, *((_QWORD *)this + 51) + 160, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, *((_QWORD *)this + 51) + 176, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 12, *((_QWORD *)this + 51) + 192, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 13, *((_QWORD *)this + 51) + 208, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 14, *((_QWORD *)this + 51) + 224, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 15, *((_QWORD *)this + 51) + 240, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 16, *((_QWORD *)this + 51) + 256, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 17, *((_QWORD *)this + 51) + 272, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 18, *((_QWORD *)this + 51) + 288, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 19, *((_QWORD *)this + 51) + 304, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 20, *((_QWORD *)this + 51) + 320, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 21, *((_QWORD *)this + 51) + 336, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 22, *((_QWORD *)this + 51) + 352, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 23, *((_QWORD *)this + 51) + 368, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 24, *((_QWORD *)this + 51) + 384, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 25, *((_QWORD *)this + 51) + 400, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 26, *((_QWORD *)this + 51) + 416, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 27, *((_QWORD *)this + 51) + 432, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 28, *((_QWORD *)this + 51) + 448, 1);
  (*(void (**)(HgcUnderwaterRefractV2 *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcUnderwaterRefractV2::RenderTile(HgcUnderwaterRefractV2 *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float32x4_t v15;
  uint64_t v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x4_t v100;
  int8x16_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int8x16_t v120;
  float32x4_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  float32x4_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  float32x4_t v135;
  int8x16_t v136;
  int8x16_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int8x16_t v160;
  float32x4_t v161;
  int8x16_t v162;
  float32x4_t v163;
  float32x4_t v164;
  int8x16_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  int8x16_t v180;
  int8x16_t v181;
  float32x4_t v182;
  float32x4_t v183;
  int64x2_t v184;
  float32x4_t v185;
  int64x2_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int32x4_t v200;
  int8x16_t v201;
  int8x16_t v202;
  float32x4_t v203;
  int8x16_t v204;
  int8x16_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  int8x16_t v226;
  int8x16_t v227;
  int8x16_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  int8x16_t v234;
  int8x16_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int8x16_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  int8x16_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int32x4_t v263;
  int32x4_t v264;
  float32x4_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  int8x16_t v275;
  int8x16_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  float32x4_t v287;
  int32x4_t v288;
  int32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  uint64_t v293;
  float32x4_t v294;
  uint64_t v295;
  int32x4_t v296;
  float32x2_t v297;
  float32x4_t *v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  int32x4_t v302;
  float32x4_t *v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  int32x4_t v308;
  float32x4_t v309;
  int32x4_t v310;
  float32x4_t *v311;
  uint64_t v312;
  int8x16_t v313;
  int8x16_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  int8x16_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  int8x16_t v326;
  int8x16_t v327;
  int8x16_t v328;
  int8x16_t v329;
  int32x4_t v330;
  int8x16_t v331;
  int8x16_t v332;
  float32x4_t v333;
  int8x16_t v334;
  int8x16_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  int8x16_t v343;
  int8x16_t v344;
  float32x4_t v345;
  float32x4_t v346;
  int8x16_t v347;
  int32x4_t v348;
  float32x4_t v349;
  int8x16_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  int8x16_t v355;
  int8x16_t v356;
  float32x4_t v357;
  int8x16_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  int8x16_t v363;
  float32x4_t v364;
  int8x16_t v365;
  int8x16_t v366;
  float32x4_t v367;
  int8x16_t v368;
  float32x4_t v369;
  float32x4_t v370;
  int8x16_t v371;
  float32x4_t v372;
  float32x4_t v373;
  int32x4_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  int32x4_t v384;
  int8x16_t v385;
  float32x4_t v386;
  int32x4_t v387;
  int8x16_t v388;
  uint64_t v389;
  int8x16_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  int8x16_t v397;
  float32x4_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  int8x16_t v406;
  int32x4_t v407;
  int8x16_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  int8x16_t v419;
  int8x16_t v420;
  float32x4_t v421;
  float32x4_t v422;
  int8x16_t v423;
  float32x4_t v424;
  float32x4_t v425;
  int8x16_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  int8x16_t v433;
  int32x4_t v434;
  int8x16_t v435;
  int8x16_t v436;
  int8x16_t v437;
  float32x4_t v438;
  int8x16_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  int8x16_t v443;
  int32x4_t v444;
  int32x4_t v445;
  float32x4_t v446;
  uint64_t v447;
  float32x4_t v448;
  uint64_t v449;
  int32x4_t v450;
  float32x2_t v451;
  float32x4_t *v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  int32x4_t v457;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  int8x16_t v462;
  float32x4_t v463;
  float32x4_t v464;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcUnderwaterRefractV2 *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = (float32x4_t)xmmword_1B304F230;
    v12 = *((_QWORD *)a2 + 2);
    v13 = 16 * *((int *)a2 + 6);
    v14 = 1.0;
    v15 = v9;
    v460 = v9;
    do
    {
      v459 = v15;
      v16 = 0;
      if (v10 < 2)
      {
        v18 = v15;
      }
      else
      {
        v17 = v10;
        v18 = v15;
        do
        {
          v19 = vaddq_f32(v18, v11);
          v20 = *((_QWORD *)this + 51);
          v21 = *(float32x4_t *)(v20 + 32);
          v22 = (int8x16_t)vmulq_f32(v18, v21);
          v23 = (int8x16_t)vmulq_f32(v19, v21);
          v24 = (int8x16_t)vaddq_f32((float32x4_t)v22, (float32x4_t)vextq_s8(v22, v22, 4uLL));
          v25 = (int8x16_t)vaddq_f32((float32x4_t)v23, (float32x4_t)vextq_s8(v23, v23, 4uLL));
          v26 = vaddq_f32((float32x4_t)vextq_s8(v24, v24, 4uLL), (float32x4_t)vextq_s8(v24, v24, 0xCuLL));
          v27 = vaddq_f32((float32x4_t)vextq_s8(v25, v25, 4uLL), (float32x4_t)vextq_s8(v25, v25, 0xCuLL));
          v28 = *(float32x4_t *)(v20 + 464);
          v464 = *(float32x4_t *)(v20 + 448);
          v29 = *(float32x4_t *)(v20 + 480);
          v30 = *(float32x4_t *)(v20 + 496);
          v31 = vminq_f32(vmaxq_f32(vrecpeq_f32(v26), v28), v29);
          v32 = vminq_f32(vmaxq_f32(vrecpeq_f32(v27), v28), v29);
          v33 = vminq_f32(vmaxq_f32(vmulq_f32(v31, vrecpsq_f32(v26, v31)), v28), v29);
          v34 = vminq_f32(vmaxq_f32(vmulq_f32(v32, vrecpsq_f32(v27, v32)), v28), v29);
          v35 = (int8x16_t)vmulq_f32(v33, vrecpsq_f32(v26, v33));
          v36 = (int8x16_t)vmulq_f32(v34, vrecpsq_f32(v27, v34));
          v37 = *(float32x4_t *)(v20 + 96);
          v38 = *(float32x4_t *)(v20 + 112);
          v39 = vminq_f32(vmaxq_f32(vmulq_f32(v28, vrecpeq_f32(v37)), v30), v29);
          v40 = (int8x16_t)vmulq_f32(v39, vrecpsq_f32(v37, v39));
          v42 = *(int8x16_t *)(v20 + 512);
          v41 = *(int8x16_t *)(v20 + 528);
          v43 = vbslq_s8(v42, v40, v35);
          v44 = (int32x4_t)vbslq_s8(v42, v40, v36);
          v45 = *(float32x4_t *)(v20 + 16);
          v46 = (int8x16_t)vmulq_f32(v18, v45);
          v47 = (int8x16_t)vmulq_f32(v19, v45);
          v48 = (int8x16_t)vaddq_f32((float32x4_t)v46, (float32x4_t)vextq_s8(v46, v46, 4uLL));
          v49 = (int8x16_t)vaddq_f32((float32x4_t)v47, (float32x4_t)vextq_s8(v47, v47, 4uLL));
          v48.i64[0] = vaddq_f32((float32x4_t)v48, (float32x4_t)vdupq_laneq_s64((int64x2_t)v48, 1)).u64[0];
          v49.i64[0] = vaddq_f32((float32x4_t)v49, (float32x4_t)vdupq_laneq_s64((int64x2_t)v49, 1)).u64[0];
          v48.i64[1] = v43.i64[1];
          v49.i64[1] = v44.i64[1];
          v50 = (int8x16_t)vmulq_f32(v18, *(float32x4_t *)v20);
          v461 = v19;
          v51 = (int8x16_t)vmulq_f32(v19, *(float32x4_t *)v20);
          v52 = (int8x16_t)vaddq_f32((float32x4_t)v50, (float32x4_t)vextq_s8(v50, v50, 4uLL));
          v53 = (int8x16_t)vaddq_f32((float32x4_t)v51, (float32x4_t)vextq_s8(v51, v51, 4uLL));
          v54 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vaddq_f32((float32x4_t)v52, (float32x4_t)vextq_s8(v52, v52, 8uLL)), v48);
          v55 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vaddq_f32((float32x4_t)v53, (float32x4_t)vextq_s8(v53, v53, 8uLL)), v49);
          v56 = (int8x16_t)vmulq_laneq_f32(v54, v54, 3);
          v44.i64[0] = v56.i64[0];
          v44.i64[1] = vdupq_laneq_s64((int64x2_t)v54, 1).u64[0];
          v57 = (int8x16_t)vmulq_laneq_f32(v55, v55, 3);
          v54.i64[0] = vdupq_laneq_s64((int64x2_t)v55, 1).u64[0];
          v55.i64[0] = v57.i64[0];
          v55.i64[1] = v54.i64[0];
          v58 = (int8x16_t)vaddq_f32(v30, vmulq_n_f32((float32x4_t)vrev64q_s32(v44), *(float *)v56.i32));
          v59 = (int8x16_t)vaddq_f32(v30, vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v55), *(float *)v57.i32));
          v60 = vminq_f32(vmaxq_f32(vmulq_f32(v28, vrecpeq_f32(v38)), v30), v29);
          v61 = (int8x16_t)vmulq_f32(v60, vrecpsq_f32(v38, v60));
          v62 = (float32x4_t)vbslq_s8(v42, v61, v59);
          v63 = vmulq_lane_f32((float32x4_t)vbslq_s8(v42, v61, v58), *(float32x2_t *)v56.i8, 1);
          v64 = *(float32x4_t *)(v20 + 544);
          v65 = *(float32x4_t *)(v20 + 560);
          v66 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vaddq_f32(v64, v63), v58);
          v67 = (float32x4_t)vbslq_s8(v42, (int8x16_t)vaddq_f32(v64, vmulq_lane_f32(v62, *(float32x2_t *)v57.i8, 1)), v59);
          v68 = *(int8x16_t *)(v20 + 144);
          v463 = *(float32x4_t *)(v20 + 128);
          v69 = (float32x4_t)vextq_s8(v68, v68, 8uLL);
          v70 = vsubq_f32((float32x4_t)v68, v69);
          v71 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v66, 3);
          v72 = (int8x16_t)vaddq_f32(v69, vmulq_laneq_f32(v70, v66, 3));
          v73 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v67, 3);
          v74 = (int8x16_t)vaddq_f32(v69, vmulq_laneq_f32(v70, v67, 3));
          v75 = *(int8x16_t *)(v20 + 224);
          v76 = *(int8x16_t *)(v20 + 240);
          v77 = vsubq_f32((float32x4_t)vextq_s8(v75, v75, 8uLL), (float32x4_t)v75);
          v78.i64[0] = vaddq_f32((float32x4_t)v75, vmulq_laneq_f32(v77, v66, 3)).u64[0];
          v75.i64[0] = vaddq_f32((float32x4_t)v75, vmulq_laneq_f32(v77, v67, 3)).u64[0];
          v78.i64[1] = v66.i64[1];
          v75.i64[1] = v67.i64[1];
          v79 = (float32x4_t)vextq_s8(v72, v56, 8uLL);
          v80 = (float32x4_t)vextq_s8(v74, v57, 8uLL);
          v81 = (int8x16_t)vmulq_f32(v64, vaddq_f32(v79, vmulq_laneq_f32(vsubq_f32(v78, v79), v66, 2)));
          v82 = (int8x16_t)vmulq_f32(v64, vaddq_f32(v80, vmulq_laneq_f32(vsubq_f32((float32x4_t)v75, v80), v67, 2)));
          v84 = *(int8x16_t *)(v20 + 160);
          v83 = *(int8x16_t *)(v20 + 176);
          v85 = vsubq_f32((float32x4_t)vextq_s8(v84, v84, 8uLL), (float32x4_t)v84);
          v77.i64[0] = vaddq_f32((float32x4_t)v84, vmulq_laneq_f32(v85, v66, 3)).u64[0];
          v84.i64[0] = vaddq_f32((float32x4_t)v84, vmulq_laneq_f32(v85, v67, 3)).u64[0];
          *(float32x2_t *)v85.f32 = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v76, v76, 8uLL), *(float32x2_t *)v76.i8);
          *(float32x2_t *)v71.i8 = vsub_f32(vadd_f32(*(float32x2_t *)v76.i8, vmul_f32(*(float32x2_t *)v85.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL))), *(float32x2_t *)v77.f32);
          v71.i64[1] = v71.i64[0];
          *(float32x2_t *)v85.f32 = vsub_f32(vadd_f32(*(float32x2_t *)v76.i8, vmul_f32(*(float32x2_t *)v85.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL))), *(float32x2_t *)v84.i8);
          v85.i64[1] = v85.i64[0];
          v86 = (int32x4_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v77.i64[0], 0), vmulq_laneq_f32((float32x4_t)v71, v66, 2));
          v87 = (int32x4_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v84.i64[0], 0), vmulq_laneq_f32(v85, v67, 2));
          v88 = *(float32x4_t *)(v20 + 576);
          v89 = *(int8x16_t *)(v20 + 592);
          v90 = vaddq_f32(v65, vmulq_f32(v88, (float32x4_t)vextq_s8(v81, v81, 8uLL)));
          v91 = vaddq_f32(v65, vmulq_f32(v88, (float32x4_t)vextq_s8(v82, v82, 8uLL)));
          v92 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
          v93 = vcvtq_f32_s32(vcvtq_s32_f32(v91));
          v94 = vaddq_f32(v65, vabdq_f32(vsubq_f32(v90, vsubq_f32(v92, (float32x4_t)vandq_s8(v89, (int8x16_t)vcgtq_f32(v92, v90)))), v64));
          v95 = vaddq_f32(v65, vabdq_f32(vsubq_f32(v91, vsubq_f32(v93, (float32x4_t)vandq_s8(v89, (int8x16_t)vcgtq_f32(v93, v91)))), v64));
          v96 = vmulq_f32(v94, v94);
          v97 = vmulq_f32(v95, v95);
          v98 = *(int8x16_t *)(v20 + 608);
          v99 = *(int8x16_t *)(v20 + 624);
          v101 = *(int8x16_t *)(v20 + 640);
          v100 = *(float32x4_t *)(v20 + 656);
          v81.i64[1] = vmulq_f32(v94, vaddq_f32(v100, vmulq_f32(v96, vaddq_f32(*(float32x4_t *)&v101, vmulq_f32(v96, vaddq_f32(*(float32x4_t *)&v98, vmulq_f32(*(float32x4_t *)&v99, v96))))))).i64[1];
          v82.i64[1] = vmulq_f32(v95, vaddq_f32(v100, vmulq_f32(v97, vaddq_f32(*(float32x4_t *)&v101, vmulq_f32(v97, vaddq_f32(*(float32x4_t *)&v98, vmulq_f32(*(float32x4_t *)&v99, v97))))))).i64[1];
          v102 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v100, (float32x4_t)vextq_s8((int8x16_t)v86, v56, 8uLL)), v81);
          v103 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v100, (float32x4_t)vextq_s8((int8x16_t)v87, v57, 8uLL)), v82);
          v104 = (float32x4_t)vrev64q_s32((int32x4_t)v102);
          v105 = (float32x4_t)vrev64q_s32((int32x4_t)v103);
          v106 = vaddq_f32((float32x4_t)v101, vmulq_f32((float32x4_t)v99, v104));
          v107 = vaddq_f32((float32x4_t)v101, vmulq_f32((float32x4_t)v99, v105));
          v108 = vcvtq_f32_s32(vcvtq_s32_f32(v106));
          v109 = vcvtq_f32_s32(vcvtq_s32_f32(v107));
          v110 = vaddq_f32((float32x4_t)v101, vabdq_f32(vsubq_f32(v106, vsubq_f32(v108, (float32x4_t)vandq_s8(v98, (int8x16_t)vcgtq_f32(v108, v106)))), (float32x4_t)v89));
          v111 = (int8x16_t)vaddq_f32((float32x4_t)v101, vabdq_f32(vsubq_f32(v107, vsubq_f32(v109, (float32x4_t)vandq_s8(v98, (int8x16_t)vcgtq_f32(v109, v107)))), (float32x4_t)v89));
          v112 = (int8x16_t)vmulq_f32(v110, v110);
          v113 = vmulq_f32((float32x4_t)v111, (float32x4_t)v111);
          v112.i64[0] = vmulq_f32(v110, vaddq_f32(v28, vmulq_f32((float32x4_t)v112, vaddq_f32(v30, vmulq_f32((float32x4_t)v112, vaddq_f32(v88, vmulq_f32(v65, (float32x4_t)v112))))))).u64[0];
          v111.i64[0] = vmulq_f32((float32x4_t)v111, vaddq_f32(v28, vmulq_f32(v113, vaddq_f32(v30, vmulq_f32(v113, vaddq_f32(v88, vmulq_f32(v65, v113))))))).u64[0];
          v115 = *(int8x16_t *)(v20 + 320);
          v114 = *(int8x16_t *)(v20 + 336);
          v112.i64[1] = v66.i64[1];
          v111.i64[1] = v67.i64[1];
          v116 = vaddq_f32(v100, vmulq_f32((float32x4_t)v101, v104));
          v117 = vcvtq_f32_s32(vcvtq_s32_f32(v116));
          v118 = vaddq_f32(v100, vmulq_f32((float32x4_t)v101, v105));
          v119 = vcvtq_f32_s32(vcvtq_s32_f32(v118));
          v120 = (int8x16_t)vaddq_f32(v100, vabdq_f32(vsubq_f32(v116, vsubq_f32(v117, (float32x4_t)vandq_s8(v99, (int8x16_t)vcgtq_f32(v117, v116)))), (float32x4_t)v98));
          v121 = vmulq_f32((float32x4_t)v120, (float32x4_t)v120);
          v122 = (int8x16_t)vaddq_f32(v100, vabdq_f32(vsubq_f32(v118, vsubq_f32(v119, (float32x4_t)vandq_s8(v99, (int8x16_t)vcgtq_f32(v119, v118)))), (float32x4_t)v98));
          v123 = vmulq_f32((float32x4_t)v122, (float32x4_t)v122);
          v120.i64[0] = vmulq_f32((float32x4_t)v120, vaddq_f32(v30, vmulq_f32(v121, vaddq_f32(v65, vmulq_f32(v121, vaddq_f32((float32x4_t)v89, vmulq_f32(v88, v121))))))).u64[0];
          v122.i64[0] = vmulq_f32((float32x4_t)v122, vaddq_f32(v30, vmulq_f32(v123, vaddq_f32(v65, vmulq_f32(v123, vaddq_f32((float32x4_t)v89, vmulq_f32(v88, v123))))))).u64[0];
          v124 = (float32x4_t)vrev64q_s32(v86);
          v126 = *(int8x16_t *)(v20 + 672);
          v125 = *(float32x4_t *)(v20 + 688);
          v56.i64[1] = vmulq_f32(v125, v124).i64[1];
          v57.i64[1] = vmulq_f32(v125, (float32x4_t)vrev64q_s32(v87)).i64[1];
          v120.i64[1] = v102.i64[1];
          v127 = *(float32x4_t *)(v20 + 304);
          v462 = *(int8x16_t *)(v20 + 288);
          v122.i64[1] = v103.i64[1];
          v128 = (int32x4_t)vbslq_s8(v126, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v127, v102, 2), (float32x4_t)vbslq_s8(v126, (int8x16_t)vmulq_n_f32((float32x4_t)v115, *(float *)v112.i32), v112)), v112);
          v129 = (int32x4_t)vbslq_s8(v126, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v127, v103, 2), (float32x4_t)vbslq_s8(v126, (int8x16_t)vmulq_n_f32((float32x4_t)v115, *(float *)v111.i32), v111)), v111);
          v130 = (float32x4_t)vextq_s8(v115, v115, 4uLL);
          v132 = *(int8x16_t *)(v20 + 704);
          v131 = *(int8x16_t *)(v20 + 720);
          v133 = vbslq_s8(v132, (int8x16_t)vmulq_n_f32(v130, *(float *)v128.i32), v120);
          v134 = vbslq_s8(v132, (int8x16_t)vmulq_n_f32(v130, *(float *)v129.i32), v122);
          v135 = (float32x4_t)vextq_s8(v114, v114, 8uLL);
          v136 = vbslq_s8(v132, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v128, (int8x16_t)v128, 8uLL), vmulq_lane_f32(v135, *(float32x2_t *)v133.i8, 1)), v56);
          v137 = vbslq_s8(v132, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), vmulq_lane_f32(v135, *(float32x2_t *)v134.i8, 1)), v57);
          v138 = vaddq_f32(v125, vmulq_f32((float32x4_t)v99, (float32x4_t)vextq_s8(v136, v136, 8uLL)));
          v139 = vcvtq_f32_s32(vcvtq_s32_f32(v138));
          v140 = vaddq_f32(v125, vmulq_f32((float32x4_t)v99, (float32x4_t)vextq_s8(v137, v137, 8uLL)));
          v141 = vcvtq_f32_s32(vcvtq_s32_f32(v140));
          v142 = vsubq_f32(v138, vsubq_f32(v139, (float32x4_t)vandq_s8(v98, (int8x16_t)vcgtq_f32(v139, v138))));
          v143 = vsubq_f32(v140, vsubq_f32(v141, (float32x4_t)vandq_s8(v98, (int8x16_t)vcgtq_f32(v141, v140))));
          v144 = vaddq_f32(v125, vabdq_f32(v142, (float32x4_t)v89));
          v145 = vmulq_f32(v144, v144);
          v146 = vaddq_f32(v125, vabdq_f32(v143, (float32x4_t)v89));
          v147 = vmulq_f32(v146, v146);
          v148 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v144, vaddq_f32(v28, vmulq_f32(v145, vaddq_f32(v30, vmulq_f32(v145, vaddq_f32(v88, vmulq_f32(v65, v145))))))), v133);
          v149 = (int32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v146, vaddq_f32(v28, vmulq_f32(v147, vaddq_f32(v30, vmulq_f32(v147, vaddq_f32(v88, vmulq_f32(v65, v147))))))), v134);
          v150 = vsubq_f32((float32x4_t)vextq_s8(v83, v83, 8uLL), (float32x4_t)v83);
          v146.i64[0] = vaddq_f32((float32x4_t)v83, vmulq_laneq_f32(v150, (float32x4_t)v128, 3)).u64[0];
          v150.i64[0] = vaddq_f32((float32x4_t)v83, vmulq_laneq_f32(v150, (float32x4_t)v129, 3)).u64[0];
          v151 = (int8x16_t)vdupq_laneq_s32(v128, 3);
          v153 = *(int8x16_t *)(v20 + 256);
          v152 = *(int8x16_t *)(v20 + 272);
          *(float32x2_t *)v83.i8 = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v153, v153, 8uLL), *(float32x2_t *)v153.i8);
          v154 = (int8x16_t)vdupq_laneq_s32(v129, 3);
          *(float32x2_t *)v151.i8 = vsub_f32(vadd_f32(*(float32x2_t *)v153.i8, vmul_f32(*(float32x2_t *)v83.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v151, v151, 8uLL))), *(float32x2_t *)v146.f32);
          v151.i64[1] = v151.i64[0];
          v155 = vaddq_f32((float32x4_t)vdupq_lane_s64(v146.i64[0], 0), vmulq_laneq_f32((float32x4_t)v151, (float32x4_t)v128, 2));
          *(float32x2_t *)v151.i8 = vsub_f32(vadd_f32(*(float32x2_t *)v153.i8, vmul_f32(*(float32x2_t *)v83.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v154, v154, 8uLL))), *(float32x2_t *)v150.f32);
          v151.i64[1] = v151.i64[0];
          v156 = vaddq_f32((float32x4_t)vdupq_lane_s64(v150.i64[0], 0), vmulq_laneq_f32((float32x4_t)v151, (float32x4_t)v129, 2));
          v157 = (int32x4_t)vaddq_f32(vmulq_lane_f32((float32x4_t)v114, *(float32x2_t *)v148.f32, 1), (float32x4_t)vdupq_laneq_s64((int64x2_t)vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)v148), vmulq_n_f32(v148, v127.f32[0])), 1));
          v158 = (int32x4_t)vaddq_f32(vmulq_lane_f32((float32x4_t)v114, *(float32x2_t *)v149.i8, 1), (float32x4_t)vdupq_laneq_s64((int64x2_t)vaddq_f32((float32x4_t)vrev64q_s32(v149), vmulq_n_f32((float32x4_t)v149, v127.f32[0])), 1));
          v159 = *(int32x4_t *)(v20 + 352);
          v160 = *(int8x16_t *)(v20 + 368);
          v161 = (float32x4_t)vrev64q_s32(v159);
          v157.i64[0] = vaddq_f32(vmulq_n_f32(v161, v148.f32[0]), (float32x4_t)vrev64q_s32(v157)).u64[0];
          v148.i64[0] = vmulq_lane_f32(v148, *(float32x2_t *)v159.i8, 1).u64[0];
          v159.i64[0] = vmulq_lane_f32((float32x4_t)v149, *(float32x2_t *)v159.i8, 1).u64[0];
          v149.i64[0] = vaddq_f32(vmulq_n_f32(v161, *(float *)v149.i32), (float32x4_t)vrev64q_s32(v158)).u64[0];
          v157.i64[1] = v128.i64[1];
          v149.i64[1] = v129.i64[1];
          v162 = (int8x16_t)vmulq_f32((float32x4_t)v131, v155);
          v129.i64[0] = v136.i64[0];
          v129.i64[1] = v162.i64[1];
          v163 = vaddq_f32(v125, vmulq_f32((float32x4_t)v99, (float32x4_t)vextq_s8(v162, v136, 8uLL)));
          v164 = vcvtq_f32_s32(vcvtq_s32_f32(v163));
          v165 = (int8x16_t)vmulq_f32((float32x4_t)v131, v156);
          v158.i64[0] = v137.i64[0];
          v158.i64[1] = v165.i64[1];
          v166 = vaddq_f32(v125, vmulq_f32((float32x4_t)v99, (float32x4_t)vextq_s8(v165, v137, 8uLL)));
          v167 = vcvtq_f32_s32(vcvtq_s32_f32(v166));
          v168 = vaddq_f32(v125, vabdq_f32(vsubq_f32(v163, vsubq_f32(v164, (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v164, v163)))), (float32x4_t)v89));
          v169 = vmulq_f32(v168, v168);
          v170 = vaddq_f32(v125, vabdq_f32(vsubq_f32(v166, vsubq_f32(v167, (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v167, v166)))), (float32x4_t)v89));
          v171 = vmulq_f32(v170, v170);
          v172 = vbslq_s8(v41, (int8x16_t)vmulq_f32(v168, vaddq_f32(v28, vmulq_f32(v169, vaddq_f32(v30, vmulq_f32(v169, vaddq_f32(v88, vmulq_f32(v65, v169))))))), (int8x16_t)v157);
          v173 = vbslq_s8(v41, (int8x16_t)vmulq_f32(v170, vaddq_f32(v28, vmulq_f32(v171, vaddq_f32(v30, vmulq_f32(v171, vaddq_f32(v88, vmulq_f32(v65, v171))))))), (int8x16_t)v149);
          v174 = *(int8x16_t *)(v20 + 192);
          v175 = *(int8x16_t *)(v20 + 208);
          v176 = vsubq_f32((float32x4_t)vextq_s8(v174, v174, 8uLL), (float32x4_t)v174);
          v177 = vaddq_f32((float32x4_t)v174, vmulq_laneq_f32(v176, (float32x4_t)v172, 3));
          v178 = vaddq_f32((float32x4_t)v174, vmulq_laneq_f32(v176, (float32x4_t)v173, 3));
          v179 = (float32x4_t)vextq_s8(v160, v160, 8uLL);
          v180 = vbslq_s8(v42, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v172, v172, 0xCuLL), vmulq_n_f32(v179, *(float *)v172.i32)), (int8x16_t)v129);
          v181 = vbslq_s8(v42, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v173, v173, 0xCuLL), vmulq_n_f32(v179, *(float *)v173.i32)), (int8x16_t)v158);
          v182 = vaddq_f32((float32x4_t)vextq_s8(v137, v137, 4uLL), (float32x4_t)vdupq_lane_s64(v159.i64[0], 0));
          v183 = (float32x4_t)vextq_s8(v160, v160, 0xCuLL);
          v184 = (int64x2_t)vaddq_f32(vaddq_f32((float32x4_t)vextq_s8(v136, v136, 4uLL), (float32x4_t)vdupq_lane_s64(v148.i64[0], 0)), vmulq_n_f32(v183, *(float *)v172.i32));
          v185 = vsubq_f32((float32x4_t)vextq_s8(v152, v152, 8uLL), (float32x4_t)v152);
          v177.i64[0] = vaddq_f32(v177, vmulq_laneq_f32(vsubq_f32(vaddq_f32((float32x4_t)v152, vmulq_laneq_f32(v185, (float32x4_t)v172, 3)), v177), (float32x4_t)v172, 2)).u64[0];
          v177.i64[1] = vdupq_laneq_s64((int64x2_t)v172, 1).u64[0];
          v178.i64[0] = vaddq_f32(v178, vmulq_laneq_f32(vsubq_f32(vaddq_f32((float32x4_t)v152, vmulq_laneq_f32(v185, (float32x4_t)v173, 3)), v178), (float32x4_t)v173, 2)).u64[0];
          v178.i64[1] = vdupq_laneq_s64((int64x2_t)v173, 1).u64[0];
          v186 = (int64x2_t)vaddq_f32(v182, vmulq_n_f32(v183, *(float *)v173.i32));
          v187 = vaddq_f32(v125, vmulq_f32(v100, (float32x4_t)v180));
          v188 = vcvtq_f32_s32(vcvtq_s32_f32(v187));
          v189 = vaddq_f32(v125, vmulq_f32(v100, (float32x4_t)v181));
          v190 = vcvtq_f32_s32(vcvtq_s32_f32(v189));
          v191 = vsubq_f32(v187, vsubq_f32(v188, (float32x4_t)vandq_s8(v101, (int8x16_t)vcgtq_f32(v188, v187))));
          v192 = vsubq_f32(v189, vsubq_f32(v190, (float32x4_t)vandq_s8(v101, (int8x16_t)vcgtq_f32(v190, v189))));
          v193 = vaddq_f32(v125, vabdq_f32(v191, (float32x4_t)v99));
          v194 = vmulq_f32(v193, v193);
          v195 = vaddq_f32(v125, vabdq_f32(v192, (float32x4_t)v99));
          v196 = vmulq_f32(v195, v195);
          v197 = vbslq_s8(v132, (int8x16_t)vmulq_f32(v193, vaddq_f32(v65, vmulq_f32(v194, vaddq_f32(v88, vmulq_f32(v194, vaddq_f32((float32x4_t)v98, vmulq_f32((float32x4_t)v89, v194))))))), v180);
          v198 = vbslq_s8(v132, (int8x16_t)vmulq_f32(v195, vaddq_f32(v65, vmulq_f32(v196, vaddq_f32(v88, vmulq_f32(v196, vaddq_f32((float32x4_t)v98, vmulq_f32((float32x4_t)v89, v196))))))), v181);
          v199 = (int8x16_t)vdupq_laneq_s64(v184, 1);
          v200 = *(int32x4_t *)(v20 + 384);
          v201 = *(int8x16_t *)(v20 + 400);
          v202 = (int8x16_t)vrev64q_s32(v200);
          v203 = (float32x4_t)vrev64q_s32((int32x4_t)v177);
          v199.i64[0] = vbslq_s8(v41, (int8x16_t)vaddq_f32((float32x4_t)v199, vmulq_laneq_f32((float32x4_t)v202, (float32x4_t)v197, 3)), (int8x16_t)vmulq_f32(v125, v203)).u64[0];
          v204 = vextq_s8((int8x16_t)v200, (int8x16_t)v200, 8uLL);
          v199.i64[1] = vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)&v204, *(float32x4_t *)&v197, 3), *(float32x4_t *)&v197).i64[1];
          v205 = (int8x16_t)vrev64q_s32((int32x4_t)v178);
          v202.i64[0] = vbslq_s8(v41, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64(v186, 1), vmulq_laneq_f32((float32x4_t)v202, (float32x4_t)v198, 3)), (int8x16_t)vmulq_f32(v125, (float32x4_t)v205)).u64[0];
          v202.i64[1] = vaddq_f32(vmulq_laneq_f32(*(float32x4_t *)&v204, *(float32x4_t *)&v198, 3), *(float32x4_t *)&v198).i64[1];
          v204.i64[0] = vmulq_f32(v100, v203).u64[0];
          v205.i64[0] = vmulq_f32(v100, (float32x4_t)v205).u64[0];
          v204.i64[1] = v172.i64[1];
          v205.i64[1] = v173.i64[1];
          v206 = vaddq_f32(v100, vmulq_f32((float32x4_t)v101, (float32x4_t)v199));
          v207 = vcvtq_f32_s32(vcvtq_s32_f32(v206));
          v208 = vaddq_f32(v100, vmulq_f32((float32x4_t)v101, (float32x4_t)v202));
          v209 = vcvtq_f32_s32(vcvtq_s32_f32(v208));
          v210 = vaddq_f32(v100, vabdq_f32(vsubq_f32(v206, vsubq_f32(v207, (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v207, v206)))), (float32x4_t)v98));
          v211 = vaddq_f32(v100, vabdq_f32(vsubq_f32(v208, vsubq_f32(v209, (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v209, v208)))), (float32x4_t)v98));
          v212 = vmulq_f32(v210, v210);
          v213 = vmulq_f32(v211, v211);
          v214 = (int32x4_t)vbslq_s8(v126, (int8x16_t)vmulq_f32(v210, vaddq_f32(v30, vmulq_f32(v212, vaddq_f32(v65, vmulq_f32(v212, vaddq_f32((float32x4_t)v89, vmulq_f32(v88, v212))))))), v199);
          v215 = (int32x4_t)vbslq_s8(v126, (int8x16_t)vmulq_f32(v211, vaddq_f32(v30, vmulq_f32(v213, vaddq_f32(v65, vmulq_f32(v213, vaddq_f32((float32x4_t)v89, vmulq_f32(v88, v213))))))), v202);
          v216 = (int32x4_t)vbslq_s8(v126, (int8x16_t)vaddq_f32(vmulq_f32((float32x4_t)v201, (float32x4_t)v214), (float32x4_t)vrev64q_s32(v214)), v204);
          v217 = (int32x4_t)vbslq_s8(v126, (int8x16_t)vaddq_f32(vmulq_f32((float32x4_t)v201, (float32x4_t)v215), (float32x4_t)vrev64q_s32(v215)), v205);
          v218 = vaddq_f32(v125, vmulq_f32((float32x4_t)v99, (float32x4_t)v216));
          v219 = vaddq_f32(v125, vmulq_f32((float32x4_t)v99, (float32x4_t)v217));
          v220 = vcvtq_f32_s32(vcvtq_s32_f32(v218));
          v221 = vcvtq_f32_s32(vcvtq_s32_f32(v219));
          v222 = vaddq_f32(v125, vabdq_f32(vsubq_f32(v218, vsubq_f32(v220, (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v220, v218)))), (float32x4_t)v89));
          v223 = vaddq_f32(v125, vabdq_f32(vsubq_f32(v219, vsubq_f32(v221, (float32x4_t)vandq_s8(v131, (int8x16_t)vcgtq_f32(v221, v219)))), (float32x4_t)v89));
          v224 = vmulq_f32(v222, v222);
          v225 = vmulq_f32(v223, v223);
          v226 = vbslq_s8(v41, (int8x16_t)vmulq_f32(v222, vaddq_f32(v28, vmulq_f32(v224, vaddq_f32(v30, vmulq_f32(v224, vaddq_f32(v88, vmulq_f32(v65, v224))))))), (int8x16_t)v214);
          v227 = vbslq_s8(v41, (int8x16_t)vmulq_f32(v223, vaddq_f32(v28, vmulq_f32(v225, vaddq_f32(v30, vmulq_f32(v225, vaddq_f32(v88, vmulq_f32(v65, v225))))))), (int8x16_t)v215);
          v228 = *(int8x16_t *)(v20 + 416);
          v229 = *(float32x4_t *)(v20 + 432);
          v230 = (float32x4_t)vextq_s8(v228, v228, 8uLL);
          v231 = (float32x4_t)vbslq_s8(v132, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v216, (int8x16_t)v216, 8uLL), vmulq_n_f32(v230, *(float *)v226.i32)), v226);
          v232 = (float32x4_t)vbslq_s8(v132, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v217, (int8x16_t)v217, 8uLL), vmulq_n_f32(v230, *(float *)v227.i32)), v227);
          v233 = vsubq_f32((float32x4_t)vextq_s8(v175, v175, 8uLL), (float32x4_t)v175);
          v234 = (int8x16_t)vdupq_laneq_s32(v216, 3);
          v193.i64[0] = vaddq_f32((float32x4_t)v175, vmulq_laneq_f32(v233, (float32x4_t)v216, 3)).u64[0];
          v235 = (int8x16_t)vdupq_laneq_s32(v217, 3);
          v233.i64[0] = vaddq_f32((float32x4_t)v175, vmulq_laneq_f32(v233, (float32x4_t)v217, 3)).u64[0];
          *(float32x2_t *)v194.f32 = vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(v462, v462, 8uLL), *(float32x2_t *)v462.i8);
          *(float32x2_t *)v234.i8 = vsub_f32(vadd_f32(*(float32x2_t *)v462.i8, vmul_f32(*(float32x2_t *)v194.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v234, v234, 8uLL))), *(float32x2_t *)v193.f32);
          v234.i64[1] = v234.i64[0];
          *(float32x2_t *)v235.i8 = vsub_f32(vadd_f32(*(float32x2_t *)v462.i8, vmul_f32(*(float32x2_t *)v194.f32, (float32x2_t)*(_OWORD *)&vextq_s8(v235, v235, 8uLL))), *(float32x2_t *)v233.f32);
          v235.i64[1] = v235.i64[0];
          v236 = vmulq_f32((float32x4_t)v131, vaddq_f32((float32x4_t)vdupq_lane_s64(v233.i64[0], 0), vmulq_laneq_f32((float32x4_t)v235, (float32x4_t)v217, 2)));
          v233.i64[0] = v197.i64[0];
          v233.i64[1] = vmulq_f32(*(float32x4_t *)&v131, vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v193, 0), vmulq_laneq_f32(*(float32x4_t *)&v234, *(float32x4_t *)&v216, 2))).i64[1];
          v216.i64[0] = v198.i64[0];
          v216.i64[1] = v236.i64[1];
          v237 = *(float32x4_t *)(v20 + 736);
          v238 = *(float32x4_t *)(v20 + 752);
          v239 = vaddq_f32(v237, vmulq_f32(v238, v233));
          v240 = vaddq_f32(v237, vmulq_f32(v238, (float32x4_t)v216));
          v241 = vcvtq_f32_s32(vcvtq_s32_f32(v239));
          v242 = vcvtq_f32_s32(vcvtq_s32_f32(v240));
          v243 = *(int8x16_t *)(v20 + 768);
          v244 = *(float32x4_t *)(v20 + 784);
          v245 = vaddq_f32(v237, vabdq_f32(vsubq_f32(v239, vsubq_f32(v241, (float32x4_t)vandq_s8(v243, (int8x16_t)vcgtq_f32(v241, v239)))), v64));
          v246 = vaddq_f32(v237, vabdq_f32(vsubq_f32(v240, vsubq_f32(v242, (float32x4_t)vandq_s8(v243, (int8x16_t)vcgtq_f32(v242, v240)))), v64));
          v247 = vmulq_f32(v245, v245);
          v248 = vmulq_f32(v246, v246);
          v249 = *(float32x4_t *)(v20 + 800);
          v250 = *(float32x4_t *)(v20 + 816);
          v251 = (float32x4_t)vextq_s8(v201, v201, 4uLL);
          v252 = vmulq_f32(v245, vaddq_f32(v250, vmulq_f32(v247, vaddq_f32(v249, vmulq_f32(v247, vaddq_f32((float32x4_t)v98, vmulq_f32(v244, v247)))))));
          v253 = (float32x4_t)vrev64q_s32((int32x4_t)v231);
          v254 = vmulq_f32(v246, vaddq_f32(v250, vmulq_f32(v248, vaddq_f32(v249, vmulq_f32(v248, vaddq_f32((float32x4_t)v98, vmulq_f32(v244, v248)))))));
          v255 = (int8x16_t)vaddq_f32(v253, vmulq_lane_f32(v251, *(float32x2_t *)v231.f32, 1));
          v256 = vaddq_f32(vmulq_f32((float32x4_t)v228, v231), (float32x4_t)vextq_s8(v255, v255, 0xCuLL));
          v257 = vmulq_lane_f32(v251, *(float32x2_t *)v232.f32, 1);
          v258 = vmulq_f32((float32x4_t)v228, v232);
          v259 = (float32x4_t)vrev64q_s32((int32x4_t)v232);
          v260 = (int8x16_t)vaddq_f32(v259, v257);
          v197.i64[1] = v252.i64[1];
          v198.i64[1] = v254.i64[1];
          v261 = vbslq_s8(v41, (int8x16_t)vaddq_f32((float32x4_t)v197, vmulq_f32(v463, vaddq_f32(vmulq_laneq_f32(v464, v252, 3), vaddq_f32(vmulq_laneq_f32(v229, v252, 2), v256)))), v197);
          v262 = vbslq_s8(v41, (int8x16_t)vaddq_f32((float32x4_t)v198, vmulq_f32(v463, vaddq_f32(vmulq_laneq_f32(v464, v254, 3), vaddq_f32(vmulq_laneq_f32(v229, v254, 2), vaddq_f32(v258, (float32x4_t)vextq_s8(v260, v260, 0xCuLL)))))), v198);
          v263 = (int32x4_t)vbslq_s8(v42, (int8x16_t)vaddq_f32(v253, vmulq_lane_f32((float32x4_t)v261, *(float32x2_t *)v229.f32, 1)), v261);
          v264 = (int32x4_t)vbslq_s8(v42, (int8x16_t)vaddq_f32(v259, vmulq_lane_f32((float32x4_t)v262, *(float32x2_t *)v229.f32, 1)), v262);
          v265 = (float32x4_t)vrev64q_s32((int32x4_t)v464);
          v266 = vbslq_s8(v41, (int8x16_t)v263, (int8x16_t)vaddq_f32(vmulq_n_f32(v463, vaddq_f32((float32x4_t)vdupq_laneq_s32(v263, 2), vmulq_laneq_f32(v265, (float32x4_t)v263, 3)).f32[0]), (float32x4_t)v263));
          v267 = vbslq_s8(v41, (int8x16_t)v264, (int8x16_t)vaddq_f32(vmulq_n_f32(v463, vaddq_f32((float32x4_t)vdupq_laneq_s32(v264, 2), vmulq_laneq_f32(v265, (float32x4_t)v264, 3)).f32[0]), (float32x4_t)v264));
          v268 = v266;
          v268.i32[3] = 1.0;
          v269 = v267;
          v14 = 1.0;
          v269.i32[3] = 1.0;
          v270 = *(int8x16_t *)(v20 + 832);
          v266.i64[1] = vextq_s8(v268, v268, 8uLL).u64[0];
          *(int8x8_t *)v268.i8 = vqtbl1_s8(v266, *(int8x8_t *)v270.i8);
          v229.i64[0] = vextq_s8(v270, v270, 8uLL).u64[0];
          v268.u64[1] = (unint64_t)vqtbl1_s8(v266, *(int8x8_t *)v229.f32);
          v267.i64[1] = vextq_s8(v269, v269, 8uLL).u64[0];
          *(int8x8_t *)v266.i8 = vqtbl1_s8(v267, *(int8x8_t *)v270.i8);
          v266.u64[1] = (unint64_t)vqtbl1_s8(v267, *(int8x8_t *)v229.f32);
          v272 = *(float32x4_t *)(v20 + 64);
          v271 = *(float32x4_t *)(v20 + 80);
          v273 = vmulq_f32((float32x4_t)v268, v271);
          v274 = vmulq_f32(v271, (float32x4_t)v266);
          v275 = (int8x16_t)vaddq_f32(v273, (float32x4_t)vrev64q_s32((int32x4_t)v273));
          v276 = (int8x16_t)vaddq_f32(v274, (float32x4_t)vrev64q_s32((int32x4_t)v274));
          v277 = vaddq_f32(v273, (float32x4_t)vextq_s8(v275, v275, 8uLL));
          v278 = vaddq_f32(v274, (float32x4_t)vextq_s8(v276, v276, 8uLL));
          v279 = *(float32x4_t *)(v20 + 480);
          v280 = vminq_f32(vmaxq_f32(vrecpeq_f32(v277), v30), v279);
          v281 = vminq_f32(vmaxq_f32(vrecpeq_f32(v278), v30), v279);
          v282 = vminq_f32(vmaxq_f32(vmulq_f32(v280, vrecpsq_f32(v277, v280)), v30), v279);
          v283 = vminq_f32(vmaxq_f32(vmulq_f32(v281, vrecpsq_f32(v278, v281)), v30), v279);
          v284 = vmulq_f32(v282, vrecpsq_f32(v277, v282));
          v285 = (int32x4_t)vmulq_f32((float32x4_t)v268, v272);
          v286 = (int32x4_t)vmulq_f32((float32x4_t)v266, v272);
          v285.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v285, v266, 4uLL), vaddq_f32((float32x4_t)v285, (float32x4_t)vrev64q_s32(v285))).u64[0];
          v286.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v286, v266, 4uLL), vaddq_f32((float32x4_t)v286, (float32x4_t)vrev64q_s32(v286))).u64[0];
          v285.i64[1] = v284.i64[1];
          v286.i64[1] = vmulq_f32(v283, vrecpsq_f32(v278, v283)).i64[1];
          v287 = *(float32x4_t *)(v20 + 48);
          v288 = (int32x4_t)vmulq_f32((float32x4_t)v268, v287);
          v289 = (int32x4_t)vmulq_f32((float32x4_t)v266, v287);
          v290 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v288, (int8x16_t)v288, 8uLL), vaddq_f32((float32x4_t)v288, (float32x4_t)vrev64q_s32(v288))), (int8x16_t)v285);
          v291 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v289, (int8x16_t)v289, 8uLL), vaddq_f32((float32x4_t)v289, (float32x4_t)vrev64q_s32(v289))), (int8x16_t)v286);
          v292 = vmulq_laneq_f32(v291, v291, 2);
          v293 = *((int *)a2 + 22);
          v294 = vsubq_f32(vmulq_laneq_f32(v290, v290, 2), v460);
          v295 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v296 = vaddq_s32(vcvtq_s32_f32(v294), vcltzq_f32(v294));
            v297 = (float32x2_t)vsubq_f32(v294, vcvtq_f32_s32(v296)).u64[0];
            v298 = (float32x4_t *)(v295 + 16 * (v296.i32[0] + v296.i32[1] * (int)v293));
            v299 = vaddq_f32(*v298, vmulq_n_f32(vsubq_f32(v298[1], *v298), v297.f32[0]));
            v300 = vaddq_f32(v299, vmulq_lane_f32(vsubq_f32(vaddq_f32(v298[v293], vmulq_n_f32(vsubq_f32(v298[(int)v293 + 1], v298[v293]), v297.f32[0])), v299), v297, 1));
            v301 = vsubq_f32(v292, v460);
            v302 = vaddq_s32(vcvtq_s32_f32(v301), vcltzq_f32(v301));
            v301.i64[0] = vsubq_f32(v301, vcvtq_f32_s32(v302)).u64[0];
            v303 = (float32x4_t *)(v295 + 16 * (v302.i32[0] + v302.i32[1] * (int)v293));
            v304 = vaddq_f32(*v303, vmulq_n_f32(vsubq_f32(v303[1], *v303), v301.f32[0]));
            v305 = vaddq_f32(v304, vmulq_lane_f32(vsubq_f32(vaddq_f32(v303[v293], vmulq_n_f32(vsubq_f32(v303[(int)v293 + 1], v303[v293]), v301.f32[0])), v304), *(float32x2_t *)v301.f32, 1));
          }
          else
          {
            v306.i64[0] = 0x3F0000003F000000;
            v306.i64[1] = 0x3F0000003F000000;
            v307 = vaddq_f32(v294, v306);
            v308 = vcvtq_s32_f32(v307);
            v307.i64[0] = vaddq_s32(v308, vcgtq_f32(vcvtq_f32_s32(v308), v307)).u64[0];
            v300 = *(float32x4_t *)(v295 + 16 * (v307.i32[0] + v307.i32[1] * (int)v293));
            v309 = vaddq_f32(vsubq_f32(v292, v460), v306);
            v310 = vcvtq_s32_f32(v309);
            v309.i64[0] = vaddq_s32(v310, vcgtq_f32(vcvtq_f32_s32(v310), v309)).u64[0];
            v305 = *(float32x4_t *)(v295 + 16 * (v309.i32[0] + v309.i32[1] * (int)v293));
          }
          v11 = (float32x4_t)xmmword_1B304F230;
          v311 = (float32x4_t *)(v12 + 16 * v16);
          *v311 = v300;
          v311[1] = v305;
          v18 = vaddq_f32(v461, (float32x4_t)xmmword_1B304F230);
          v16 += 2;
          v17 -= 2;
        }
        while (v17 > 1);
        v16 = v16;
        v9 = v460;
        v15 = v459;
      }
      if ((int)v16 < v10)
      {
        v312 = *((_QWORD *)this + 51);
        v313 = (int8x16_t)vmulq_f32(v18, *(float32x4_t *)(v312 + 32));
        v314 = (int8x16_t)vaddq_f32((float32x4_t)v313, (float32x4_t)vextq_s8(v313, v313, 4uLL));
        v315 = vaddq_f32((float32x4_t)vextq_s8(v314, v314, 4uLL), (float32x4_t)vextq_s8(v314, v314, 0xCuLL));
        v316 = *(float32x4_t *)(v312 + 448);
        v317 = *(float32x4_t *)(v312 + 464);
        v318 = *(float32x4_t *)(v312 + 480);
        v319 = *(float32x4_t *)(v312 + 496);
        v320 = vminq_f32(vmaxq_f32(vrecpeq_f32(v315), v317), v318);
        v321 = vminq_f32(vmaxq_f32(vmulq_f32(v320, vrecpsq_f32(v315, v320)), v317), v318);
        v322 = (int8x16_t)vmulq_f32(v321, vrecpsq_f32(v315, v321));
        v323 = *(float32x4_t *)(v312 + 96);
        v324 = *(float32x4_t *)(v312 + 112);
        v325 = vminq_f32(vmaxq_f32(vmulq_f32(v317, vrecpeq_f32(v323)), v319), v318);
        v327 = *(int8x16_t *)(v312 + 512);
        v326 = *(int8x16_t *)(v312 + 528);
        v328 = vbslq_s8(v327, (int8x16_t)vmulq_f32(v325, vrecpsq_f32(v323, v325)), v322);
        v329 = (int8x16_t)vmulq_f32(v18, *(float32x4_t *)(v312 + 16));
        v330 = (int32x4_t)vaddq_f32((float32x4_t)v329, (float32x4_t)vextq_s8(v329, v329, 4uLL));
        v330.i64[0] = vaddq_f32((float32x4_t)v330, (float32x4_t)vdupq_laneq_s64((int64x2_t)v330, 1)).u64[0];
        v330.i64[1] = v328.i64[1];
        v331 = (int8x16_t)vmulq_f32(v18, *(float32x4_t *)v312);
        v332 = (int8x16_t)vaddq_f32((float32x4_t)v331, (float32x4_t)vextq_s8(v331, v331, 4uLL));
        v333 = (float32x4_t)vbslq_s8(v326, (int8x16_t)vaddq_f32((float32x4_t)v332, (float32x4_t)vextq_s8(v332, v332, 8uLL)), (int8x16_t)v330);
        v334 = (int8x16_t)vmulq_laneq_f32(v333, v333, 3);
        v330.i64[0] = v334.i64[0];
        v330.i64[1] = vdupq_laneq_s64((int64x2_t)v333, 1).u64[0];
        v335 = (int8x16_t)vaddq_f32(v319, vmulq_n_f32((float32x4_t)vrev64q_s32(v330), *(float *)v334.i32));
        v336 = vminq_f32(vmaxq_f32(vmulq_f32(v317, vrecpeq_f32(v324)), v319), v318);
        v337 = *(float32x4_t *)(v312 + 544);
        v338 = *(float32x4_t *)(v312 + 560);
        v339 = (float32x4_t)vbslq_s8(v327, (int8x16_t)vaddq_f32(v337, vmulq_lane_f32((float32x4_t)vbslq_s8(v327, (int8x16_t)vmulq_f32(v336, vrecpsq_f32(v324, v336)), v335), *(float32x2_t *)v334.i8, 1)), v335);
        v341 = *(float32x4_t *)(v312 + 128);
        v340 = *(float32x4_t *)(v312 + 144);
        v342 = (float32x4_t)vdupq_lane_s64(v340.i64[0], 0);
        v343 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v339, 3);
        v344 = (int8x16_t)vaddq_f32(v342, vmulq_laneq_f32(vsubq_f32(v340, v342), v339, 3));
        v342.i64[0] = vaddq_f32(*(float32x4_t *)(v312 + 224), vmulq_laneq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s64(*(int64x2_t *)(v312 + 224), 1), *(float32x4_t *)(v312 + 224)), v339, 3)).u64[0];
        v342.i64[1] = v339.i64[1];
        v345 = (float32x4_t)vextq_s8(v344, v334, 8uLL);
        v346 = vaddq_f32(v345, vmulq_laneq_f32(vsubq_f32(v342, v345), v339, 2));
        v342.i64[0] = vaddq_f32(*(float32x4_t *)(v312 + 160), vmulq_laneq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s64(*(int64x2_t *)(v312 + 160), 1), *(float32x4_t *)(v312 + 160)), v339, 3)).u64[0];
        *(float32x2_t *)v343.i8 = vsub_f32(vadd_f32(*(float32x2_t *)(v312 + 240), vmul_f32(vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v312 + 240), *(int8x16_t *)(v312 + 240), 8uLL), *(float32x2_t *)(v312 + 240)), (float32x2_t)*(_OWORD *)&vextq_s8(v343, v343, 8uLL))), *(float32x2_t *)v342.f32);
        v343.i64[1] = v343.i64[0];
        v347 = (int8x16_t)vmulq_f32(v337, v346);
        v348 = (int32x4_t)vaddq_f32((float32x4_t)vdupq_lane_s64(v342.i64[0], 0), vmulq_laneq_f32((float32x4_t)v343, v339, 2));
        v349 = *(float32x4_t *)(v312 + 576);
        v350 = *(int8x16_t *)(v312 + 592);
        v351 = vaddq_f32(v338, vmulq_f32(v349, (float32x4_t)vextq_s8(v347, v347, 8uLL)));
        v352 = vcvtq_f32_s32(vcvtq_s32_f32(v351));
        v353 = vaddq_f32(v338, vabdq_f32(vsubq_f32(v351, vsubq_f32(v352, (float32x4_t)vandq_s8(v350, (int8x16_t)vcgtq_f32(v352, v351)))), v337));
        v354 = vmulq_f32(v353, v353);
        v355 = *(int8x16_t *)(v312 + 608);
        v356 = *(int8x16_t *)(v312 + 624);
        v358 = *(int8x16_t *)(v312 + 640);
        v357 = *(float32x4_t *)(v312 + 656);
        v347.i64[1] = vmulq_f32(v353, vaddq_f32(v357, vmulq_f32(v354, vaddq_f32(*(float32x4_t *)&v358, vmulq_f32(v354, vaddq_f32(*(float32x4_t *)&v355, vmulq_f32(*(float32x4_t *)&v356, v354))))))).i64[1];
        v359 = (float32x4_t)vbslq_s8(v326, (int8x16_t)vmulq_f32(v357, (float32x4_t)vextq_s8((int8x16_t)v348, v334, 8uLL)), v347);
        v360 = (float32x4_t)vrev64q_s32((int32x4_t)v359);
        v361 = vaddq_f32((float32x4_t)v358, vmulq_f32((float32x4_t)v356, v360));
        v362 = vcvtq_f32_s32(vcvtq_s32_f32(v361));
        v363 = (int8x16_t)vaddq_f32((float32x4_t)v358, vabdq_f32(vsubq_f32(v361, vsubq_f32(v362, (float32x4_t)vandq_s8(v355, (int8x16_t)vcgtq_f32(v362, v361)))), (float32x4_t)v350));
        v364 = vmulq_f32((float32x4_t)v363, (float32x4_t)v363);
        v363.i64[0] = vmulq_f32((float32x4_t)v363, vaddq_f32(v317, vmulq_f32(v364, vaddq_f32(v319, vmulq_f32(v364, vaddq_f32(v349, vmulq_f32(v338, v364))))))).u64[0];
        v366 = *(int8x16_t *)(v312 + 320);
        v365 = *(int8x16_t *)(v312 + 336);
        v363.i64[1] = v339.i64[1];
        v368 = *(int8x16_t *)(v312 + 672);
        v367 = *(float32x4_t *)(v312 + 688);
        v369 = vaddq_f32(v357, vmulq_f32((float32x4_t)v358, v360));
        v370 = vcvtq_f32_s32(vcvtq_s32_f32(v369));
        v371 = (int8x16_t)vaddq_f32(v357, vabdq_f32(vsubq_f32(v369, vsubq_f32(v370, (float32x4_t)vandq_s8(v356, (int8x16_t)vcgtq_f32(v370, v369)))), (float32x4_t)v355));
        v372 = vmulq_f32((float32x4_t)v371, (float32x4_t)v371);
        v371.i64[0] = vmulq_f32((float32x4_t)v371, vaddq_f32(v319, vmulq_f32(v372, vaddq_f32(v338, vmulq_f32(v372, vaddq_f32((float32x4_t)v350, vmulq_f32(v349, v372))))))).u64[0];
        v371.i64[1] = v359.i64[1];
        v334.i64[1] = vmulq_f32(v367, (float32x4_t)vrev64q_s32(v348)).i64[1];
        v373 = *(float32x4_t *)(v312 + 304);
        v374 = (int32x4_t)vbslq_s8(v368, (int8x16_t)vaddq_f32(vmulq_laneq_f32(v373, v359, 2), (float32x4_t)vbslq_s8(v368, (int8x16_t)vmulq_n_f32((float32x4_t)v366, *(float *)v363.i32), v363)), v363);
        v375 = (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v366, v366, 4uLL), *(float *)v374.i32);
        v376 = *(int8x16_t *)(v312 + 704);
        v377 = *(int8x16_t *)(v312 + 720);
        v378 = vbslq_s8(v376, v375, v371);
        v379 = vbslq_s8(v376, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v374, (int8x16_t)v374, 8uLL), vmulq_lane_f32((float32x4_t)vextq_s8(v365, v365, 8uLL), *(float32x2_t *)v378.i8, 1)), v334);
        v380 = vaddq_f32(v367, vmulq_f32((float32x4_t)v356, (float32x4_t)vextq_s8(v379, v379, 8uLL)));
        v381 = vcvtq_f32_s32(vcvtq_s32_f32(v380));
        v382 = vaddq_f32(v367, vabdq_f32(vsubq_f32(v380, vsubq_f32(v381, (float32x4_t)vandq_s8(v355, (int8x16_t)vcgtq_f32(v381, v380)))), (float32x4_t)v350));
        v383 = vmulq_f32(v382, v382);
        v384 = (int32x4_t)vbslq_s8(v326, (int8x16_t)vmulq_f32(v382, vaddq_f32(v317, vmulq_f32(v383, vaddq_f32(v319, vmulq_f32(v383, vaddq_f32(v349, vmulq_f32(v338, v383))))))), v378);
        v385 = (int8x16_t)vdupq_laneq_s32(v374, 3);
        v382.i64[0] = vaddq_f32(*(float32x4_t *)(v312 + 176), vmulq_laneq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s64(*(int64x2_t *)(v312 + 176), 1), *(float32x4_t *)(v312 + 176)), (float32x4_t)v374, 3)).u64[0];
        *(float32x2_t *)v385.i8 = vsub_f32(vadd_f32(*(float32x2_t *)(v312 + 256), vmul_f32(vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v312 + 256), *(int8x16_t *)(v312 + 256), 8uLL), *(float32x2_t *)(v312 + 256)), (float32x2_t)*(_OWORD *)&vextq_s8(v385, v385, 8uLL))), *(float32x2_t *)v382.f32);
        v385.i64[1] = v385.i64[0];
        v386 = vaddq_f32((float32x4_t)vdupq_lane_s64(v382.i64[0], 0), vmulq_laneq_f32((float32x4_t)v385, (float32x4_t)v374, 2));
        v387 = *(int32x4_t *)(v312 + 352);
        v388 = *(int8x16_t *)(v312 + 368);
        v389 = vmulq_lane_f32((float32x4_t)v384, *(float32x2_t *)v387.i8, 1).u64[0];
        v384.i64[0] = vaddq_f32(vmulq_n_f32((float32x4_t)vrev64q_s32(v387), *(float *)v384.i32), (float32x4_t)vrev64q_s32((int32x4_t)vaddq_f32(vmulq_lane_f32((float32x4_t)v365, *(float32x2_t *)v384.i8, 1), (float32x4_t)vdupq_laneq_s64((int64x2_t)vaddq_f32((float32x4_t)vrev64q_s32(v384), vmulq_n_f32((float32x4_t)v384, v373.f32[0])), 1)))).u64[0];
        v384.i64[1] = v374.i64[1];
        v390 = (int8x16_t)vmulq_f32((float32x4_t)v377, v386);
        v391 = (float32x4_t)vextq_s8(v390, v379, 8uLL);
        v392 = (float32x4_t)vextq_s8(v379, v379, 4uLL);
        v379.i64[1] = v390.i64[1];
        v393 = vaddq_f32(v367, vmulq_f32((float32x4_t)v356, v391));
        v394 = vcvtq_f32_s32(vcvtq_s32_f32(v393));
        v395 = vaddq_f32(v367, vabdq_f32(vsubq_f32(v393, vsubq_f32(v394, (float32x4_t)vandq_s8(v377, (int8x16_t)vcgtq_f32(v394, v393)))), (float32x4_t)v350));
        v396 = vmulq_f32(v395, v395);
        v397 = vbslq_s8(v326, (int8x16_t)vmulq_f32(v395, vaddq_f32(v317, vmulq_f32(v396, vaddq_f32(v319, vmulq_f32(v396, vaddq_f32(v349, vmulq_f32(v338, v396))))))), (int8x16_t)v384);
        v398 = vaddq_f32(*(float32x4_t *)(v312 + 192), vmulq_laneq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s64(*(int64x2_t *)(v312 + 192), 1), *(float32x4_t *)(v312 + 192)), (float32x4_t)v397, 3));
        v399 = vbslq_s8(v327, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(v397, v397, 0xCuLL), vmulq_n_f32((float32x4_t)vextq_s8(v388, v388, 8uLL), *(float *)v397.i32)), v379);
        v400 = (int8x16_t)vaddq_f32(vaddq_f32(v392, (float32x4_t)vdupq_lane_s64(v389, 0)), vmulq_n_f32((float32x4_t)vextq_s8(v397, v388, 0xCuLL), *(float *)v397.i32));
        v398.i64[0] = vaddq_f32(v398, vmulq_laneq_f32(vsubq_f32(vaddq_f32(*(float32x4_t *)(v312 + 272), vmulq_laneq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s64(*(int64x2_t *)(v312 + 272), 1), *(float32x4_t *)(v312 + 272)), (float32x4_t)v397, 3)), v398), (float32x4_t)v397, 2)).u64[0];
        v398.i64[1] = vdupq_laneq_s64((int64x2_t)v397, 1).u64[0];
        v401 = (int8x16_t)vrev64q_s32((int32x4_t)v398);
        v402 = vaddq_f32(v367, vmulq_f32(v357, (float32x4_t)v399));
        v403 = vcvtq_f32_s32(vcvtq_s32_f32(v402));
        v404 = vaddq_f32(v367, vabdq_f32(vsubq_f32(v402, vsubq_f32(v403, (float32x4_t)vandq_s8(v358, (int8x16_t)vcgtq_f32(v403, v402)))), (float32x4_t)v356));
        v405 = vmulq_f32(v404, v404);
        v406 = vbslq_s8(v376, (int8x16_t)vmulq_f32(v404, vaddq_f32(v338, vmulq_f32(v405, vaddq_f32(v349, vmulq_f32(v405, vaddq_f32((float32x4_t)v355, vmulq_f32((float32x4_t)v350, v405))))))), v399);
        v407 = *(int32x4_t *)(v312 + 384);
        v408 = *(int8x16_t *)(v312 + 400);
        v400.i64[0] = vbslq_s8(v326, (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v400, 1), vmulq_laneq_f32((float32x4_t)vrev64q_s32(v407), (float32x4_t)v406, 3)), (int8x16_t)vmulq_f32(v367, (float32x4_t)v401)).u64[0];
        v400.i64[1] = vaddq_f32(vmulq_laneq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v407, 0), *(float32x4_t *)&v406, 3), *(float32x4_t *)&v406).i64[1];
        v401.i64[0] = vmulq_f32(v357, (float32x4_t)v401).u64[0];
        v401.i64[1] = v397.i64[1];
        v409 = vaddq_f32(v357, vmulq_f32((float32x4_t)v358, (float32x4_t)v400));
        v410 = vcvtq_f32_s32(vcvtq_s32_f32(v409));
        v411 = vaddq_f32(v357, vabdq_f32(vsubq_f32(v409, vsubq_f32(v410, (float32x4_t)vandq_s8(v377, (int8x16_t)vcgtq_f32(v410, v409)))), (float32x4_t)v355));
        v412 = vmulq_f32(v411, v411);
        v413 = (int32x4_t)vbslq_s8(v368, (int8x16_t)vmulq_f32(v411, vaddq_f32(v319, vmulq_f32(v412, vaddq_f32(v338, vmulq_f32(v412, vaddq_f32((float32x4_t)v350, vmulq_f32(v349, v412))))))), v400);
        v414 = (int32x4_t)vbslq_s8(v368, (int8x16_t)vaddq_f32(vmulq_f32((float32x4_t)v408, (float32x4_t)v413), (float32x4_t)vrev64q_s32(v413)), v401);
        v415 = vaddq_f32(v367, vmulq_f32((float32x4_t)v356, (float32x4_t)v414));
        v416 = vcvtq_f32_s32(vcvtq_s32_f32(v415));
        v417 = vaddq_f32(v367, vabdq_f32(vsubq_f32(v415, vsubq_f32(v416, (float32x4_t)vandq_s8(v377, (int8x16_t)vcgtq_f32(v416, v415)))), (float32x4_t)v350));
        v418 = vmulq_f32(v417, v417);
        v419 = vbslq_s8(v326, (int8x16_t)vmulq_f32(v417, vaddq_f32(v317, vmulq_f32(v418, vaddq_f32(v319, vmulq_f32(v418, vaddq_f32(v349, vmulq_f32(v338, v418))))))), (int8x16_t)v413);
        v420 = *(int8x16_t *)(v312 + 416);
        v421 = *(float32x4_t *)(v312 + 432);
        v422 = (float32x4_t)vbslq_s8(v376, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v414, (int8x16_t)v414, 8uLL), vmulq_n_f32((float32x4_t)vextq_s8(v420, v420, 8uLL), *(float *)v419.i32)), v419);
        v423 = (int8x16_t)vdupq_laneq_s32(v414, 3);
        v387.i64[0] = vaddq_f32(*(float32x4_t *)(v312 + 208), vmulq_laneq_f32(vsubq_f32((float32x4_t)vdupq_laneq_s64(*(int64x2_t *)(v312 + 208), 1), *(float32x4_t *)(v312 + 208)), (float32x4_t)v414, 3)).u64[0];
        *(float32x2_t *)v317.f32 = vsub_f32(vadd_f32(*(float32x2_t *)(v312 + 288), vmul_f32(vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v312 + 288), *(int8x16_t *)(v312 + 288), 8uLL), *(float32x2_t *)(v312 + 288)), (float32x2_t)*(_OWORD *)&vextq_s8(v423, v423, 8uLL))), *(float32x2_t *)v387.i8);
        v317.i64[1] = v317.i64[0];
        v424 = vaddq_f32((float32x4_t)vdupq_lane_s64(v387.i64[0], 0), vmulq_laneq_f32(v317, (float32x4_t)v414, 2));
        v425 = (float32x4_t)vrev64q_s32((int32x4_t)v422);
        v426 = (int8x16_t)vaddq_f32(v425, vmulq_lane_f32((float32x4_t)vextq_s8(v408, v408, 4uLL), *(float32x2_t *)v422.f32, 1));
        v423.i64[0] = v406.i64[0];
        v423.i64[1] = vmulq_f32(*(float32x4_t *)&v377, v424).i64[1];
        v427 = *(float32x4_t *)(v312 + 736);
        v428 = vaddq_f32(v427, vmulq_f32(*(float32x4_t *)(v312 + 752), (float32x4_t)v423));
        v429 = vcvtq_f32_s32(vcvtq_s32_f32(v428));
        v430 = vaddq_f32(v427, vabdq_f32(vsubq_f32(v428, vsubq_f32(v429, (float32x4_t)vandq_s8(*(int8x16_t *)(v312 + 768), (int8x16_t)vcgtq_f32(v429, v428)))), v337));
        v431 = vmulq_f32(v430, v430);
        v432 = vmulq_f32(v430, vaddq_f32(*(float32x4_t *)(v312 + 816), vmulq_f32(v431, vaddq_f32(*(float32x4_t *)(v312 + 800), vmulq_f32(v431, vaddq_f32((float32x4_t)v355, vmulq_f32(*(float32x4_t *)(v312 + 784), v431)))))));
        v406.i64[1] = v432.i64[1];
        v433 = vbslq_s8(v326, (int8x16_t)vaddq_f32((float32x4_t)v406, vmulq_f32(v341, vaddq_f32(vmulq_laneq_f32(v316, v432, 3), vaddq_f32(vmulq_laneq_f32(v421, v432, 2), vaddq_f32(vmulq_f32((float32x4_t)v420, v422), (float32x4_t)vextq_s8(v426, v426, 0xCuLL)))))), v406);
        v434 = (int32x4_t)vbslq_s8(v327, (int8x16_t)vaddq_f32(v425, vmulq_lane_f32((float32x4_t)v433, *(float32x2_t *)v421.f32, 1)), v433);
        v435 = vbslq_s8(v326, (int8x16_t)v434, (int8x16_t)vaddq_f32(vmulq_n_f32(v341, vaddq_f32((float32x4_t)vdupq_laneq_s32(v434, 2), vmulq_laneq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v316.f32, 1), (float32x4_t)v434, 3)).f32[0]), (float32x4_t)v434));
        v436 = v435;
        *(float *)&v436.i32[3] = v14;
        v437 = *(int8x16_t *)(v312 + 832);
        v435.i64[1] = vextq_s8(v436, v436, 8uLL).u64[0];
        *(int8x8_t *)v436.i8 = vqtbl1_s8(v435, *(int8x8_t *)v437.i8);
        v436.u64[1] = (unint64_t)vqtbl1_s8(v435, (int8x8_t)*(_OWORD *)&vextq_s8(v437, v437, 8uLL));
        v438 = vmulq_f32(*(float32x4_t *)(v312 + 80), (float32x4_t)v436);
        v439 = (int8x16_t)vaddq_f32(v438, (float32x4_t)vrev64q_s32((int32x4_t)v438));
        v440 = vaddq_f32(v438, (float32x4_t)vextq_s8(v439, v439, 8uLL));
        v441 = vminq_f32(vmaxq_f32(vrecpeq_f32(v440), v319), v318);
        v442 = vminq_f32(vmaxq_f32(vmulq_f32(v441, vrecpsq_f32(v440, v441)), v319), v318);
        v443 = (int8x16_t)vmulq_f32(v442, vrecpsq_f32(v440, v442));
        v444 = (int32x4_t)vmulq_f32((float32x4_t)v436, *(float32x4_t *)(v312 + 64));
        v444.i64[0] = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v444, v443, 4uLL), vaddq_f32((float32x4_t)v444, (float32x4_t)vrev64q_s32(v444))).u64[0];
        v444.i64[1] = v443.i64[1];
        v445 = (int32x4_t)vmulq_f32((float32x4_t)v436, *(float32x4_t *)(v312 + 48));
        v446 = (float32x4_t)vbslq_s8(v326, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v445, (int8x16_t)v445, 8uLL), vaddq_f32((float32x4_t)v445, (float32x4_t)vrev64q_s32(v445))), (int8x16_t)v444);
        v447 = *((int *)a2 + 22);
        v448 = vsubq_f32(vmulq_laneq_f32(v446, v446, 2), v9);
        v449 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v450 = vaddq_s32(vcvtq_s32_f32(v448), vcltzq_f32(v448));
          v451 = (float32x2_t)vsubq_f32(v448, vcvtq_f32_s32(v450)).u64[0];
          v452 = (float32x4_t *)(v449 + 16 * (v450.i32[0] + v450.i32[1] * (int)v447));
          v453 = vaddq_f32(*v452, vmulq_n_f32(vsubq_f32(v452[1], *v452), v451.f32[0]));
          v454 = vaddq_f32(v453, vmulq_lane_f32(vsubq_f32(vaddq_f32(v452[v447], vmulq_n_f32(vsubq_f32(v452[(int)v447 + 1], v452[v447]), v451.f32[0])), v453), v451, 1));
        }
        else
        {
          v455.i64[0] = 0x3F0000003F000000;
          v455.i64[1] = 0x3F0000003F000000;
          v456 = vaddq_f32(v448, v455);
          v457 = vcvtq_s32_f32(v456);
          v456.i64[0] = vaddq_s32(v457, vcgtq_f32(vcvtq_f32_s32(v457), v456)).u64[0];
          v454 = *(float32x4_t *)(v449 + 16 * (v456.i32[0] + v456.i32[1] * (int)v447));
        }
        *(float32x4_t *)(v12 + 16 * v16) = v454;
        v15 = v459;
        v11 = (float32x4_t)xmmword_1B304F230;
      }
      v15 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F240);
      v12 += v13;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcUnderwaterRefractV2::GetDOD(HgcUnderwaterRefractV2 *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcUnderwaterRefractV2 *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcUnderwaterRefractV2::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcUnderwaterRefractV2::HgcUnderwaterRefractV2(HgcUnderwaterRefractV2 *this)
{
  _QWORD *v2;
  HgcUnderwaterRefractV2::State *v3;
  double v4;
  uint64_t v5;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F14A8;
  v3 = (HgcUnderwaterRefractV2::State *)operator new();
  v4 = HgcUnderwaterRefractV2::State::State(v3);
  *((_QWORD *)this + 51) = v5;
  (*(void (**)(HgcUnderwaterRefractV2 *, _QWORD, uint64_t, double))(*(_QWORD *)this + 136))(this, 0, 1, v4);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28B5E74(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcUnderwaterRefractV2::~HgcUnderwaterRefractV2(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F14A8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40336BE119);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcUnderwaterRefractV2::~HgcUnderwaterRefractV2(this);
  HGObject::operator delete(v1);
}

uint64_t HgcUnderwaterRefractV2::SetParameter(HgcUnderwaterRefractV2 *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  float *v10;
  __n128 *v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_148;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_148;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_148;
    case 3:
      v11 = (__n128 *)*((_QWORD *)this + 51);
      if (v11[3].n128_f32[0] == a3.n128_f32[0]
        && v11[3].n128_f32[1] == a4
        && v11[3].n128_f32[2] == a6
        && v11[3].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v11[3].n128_u32[0] = a3.n128_u32[0];
      v11[3].n128_f32[1] = a4;
      v11[3].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v11[3].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v11[53] = a3;
      goto LABEL_148;
    case 4:
      v12 = (__n128 *)*((_QWORD *)this + 51);
      if (v12[4].n128_f32[0] == a3.n128_f32[0]
        && v12[4].n128_f32[1] == a4
        && v12[4].n128_f32[2] == a6
        && v12[4].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v12[4].n128_u32[0] = a3.n128_u32[0];
      v12[4].n128_f32[1] = a4;
      v12[4].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v12[4].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v12[54] = a3;
      goto LABEL_148;
    case 5:
      v13 = (__n128 *)*((_QWORD *)this + 51);
      if (v13[5].n128_f32[0] == a3.n128_f32[0]
        && v13[5].n128_f32[1] == a4
        && v13[5].n128_f32[2] == a6
        && v13[5].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v13[5].n128_u32[0] = a3.n128_u32[0];
      v13[5].n128_f32[1] = a4;
      v13[5].n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v13[5].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v13[55] = a3;
      goto LABEL_148;
    case 6:
      v14 = (__n128 *)*((_QWORD *)this + 51);
      if (v14[6].n128_f32[0] == 0.0
        && v14[6].n128_f32[1] == 0.0
        && v14[6].n128_f32[2] == a3.n128_f32[0]
        && v14[6].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v14[6].n128_u64[0] = 0;
      v14[6].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v14[6].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v14[56] = a3;
      goto LABEL_148;
    case 7:
      v15 = (__n128 *)*((_QWORD *)this + 51);
      if (v15[7].n128_f32[0] == 0.0
        && v15[7].n128_f32[1] == 0.0
        && v15[7].n128_f32[2] == a3.n128_f32[0]
        && v15[7].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v15[7].n128_u64[0] = 0;
      v15[7].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v15[7].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v15[57] = a3;
      goto LABEL_148;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
      goto LABEL_148;
    case 9:
      v17 = (float *)*((_QWORD *)this + 51);
      if (v17[36] == a3.n128_f32[0] && v17[37] == a4 && v17[38] == a5 && v17[39] == a6)
        return 0;
      v17[36] = a3.n128_f32[0];
      v17[37] = a4;
      v17[38] = a5;
      v17[39] = a6;
      goto LABEL_148;
    case 10:
      v18 = (float *)*((_QWORD *)this + 51);
      if (v18[40] == a3.n128_f32[0] && v18[41] == a4 && v18[42] == a5 && v18[43] == a6)
        return 0;
      v18[40] = a3.n128_f32[0];
      v18[41] = a4;
      v18[42] = a5;
      v18[43] = a6;
      goto LABEL_148;
    case 11:
      v19 = (float *)*((_QWORD *)this + 51);
      if (v19[44] == a3.n128_f32[0] && v19[45] == a4 && v19[46] == a5 && v19[47] == a6)
        return 0;
      v19[44] = a3.n128_f32[0];
      v19[45] = a4;
      v19[46] = a5;
      v19[47] = a6;
      goto LABEL_148;
    case 12:
      v20 = (float *)*((_QWORD *)this + 51);
      if (v20[48] == a3.n128_f32[0] && v20[49] == a4 && v20[50] == a5 && v20[51] == a6)
        return 0;
      v20[48] = a3.n128_f32[0];
      v20[49] = a4;
      v20[50] = a5;
      v20[51] = a6;
      goto LABEL_148;
    case 13:
      v21 = (float *)*((_QWORD *)this + 51);
      if (v21[52] == a3.n128_f32[0] && v21[53] == a4 && v21[54] == a5 && v21[55] == a6)
        return 0;
      v21[52] = a3.n128_f32[0];
      v21[53] = a4;
      v21[54] = a5;
      v21[55] = a6;
      goto LABEL_148;
    case 14:
      v22 = (float *)*((_QWORD *)this + 51);
      if (v22[56] == a3.n128_f32[0] && v22[57] == a4 && v22[58] == a5 && v22[59] == a6)
        return 0;
      v22[56] = a3.n128_f32[0];
      v22[57] = a4;
      v22[58] = a5;
      v22[59] = a6;
      goto LABEL_148;
    case 15:
      v23 = (float *)*((_QWORD *)this + 51);
      if (v23[60] == a3.n128_f32[0] && v23[61] == a4 && v23[62] == a5 && v23[63] == a6)
        return 0;
      v23[60] = a3.n128_f32[0];
      v23[61] = a4;
      v23[62] = a5;
      v23[63] = a6;
      goto LABEL_148;
    case 16:
      v24 = (float *)*((_QWORD *)this + 51);
      if (v24[64] == a3.n128_f32[0] && v24[65] == a4 && v24[66] == a5 && v24[67] == a6)
        return 0;
      v24[64] = a3.n128_f32[0];
      v24[65] = a4;
      v24[66] = a5;
      v24[67] = a6;
      goto LABEL_148;
    case 17:
      v25 = (float *)*((_QWORD *)this + 51);
      if (v25[68] == a3.n128_f32[0] && v25[69] == a4 && v25[70] == a5 && v25[71] == a6)
        return 0;
      v25[68] = a3.n128_f32[0];
      v25[69] = a4;
      v25[70] = a5;
      v25[71] = a6;
      goto LABEL_148;
    case 18:
      v26 = (float *)*((_QWORD *)this + 51);
      if (v26[72] == a3.n128_f32[0] && v26[73] == a4 && v26[74] == a5 && v26[75] == a6)
        return 0;
      v26[72] = a3.n128_f32[0];
      v26[73] = a4;
      v26[74] = a5;
      v26[75] = a6;
      goto LABEL_148;
    case 19:
      v27 = (float *)*((_QWORD *)this + 51);
      if (v27[76] == a3.n128_f32[0] && v27[77] == a4 && v27[78] == a5 && v27[79] == a6)
        return 0;
      v27[76] = a3.n128_f32[0];
      v27[77] = a4;
      v27[78] = a5;
      v27[79] = a6;
      goto LABEL_148;
    case 20:
      v28 = (float *)*((_QWORD *)this + 51);
      if (v28[80] == a3.n128_f32[0] && v28[81] == a4 && v28[82] == a5 && v28[83] == a6)
        return 0;
      v28[80] = a3.n128_f32[0];
      v28[81] = a4;
      v28[82] = a5;
      v28[83] = a6;
      goto LABEL_148;
    case 21:
      v29 = (float *)*((_QWORD *)this + 51);
      if (v29[84] == a3.n128_f32[0] && v29[85] == a4 && v29[86] == a5 && v29[87] == a6)
        return 0;
      v29[84] = a3.n128_f32[0];
      v29[85] = a4;
      v29[86] = a5;
      v29[87] = a6;
      goto LABEL_148;
    case 22:
      v30 = (float *)*((_QWORD *)this + 51);
      if (v30[88] == a3.n128_f32[0] && v30[89] == a4 && v30[90] == a5 && v30[91] == a6)
        return 0;
      v30[88] = a3.n128_f32[0];
      v30[89] = a4;
      v30[90] = a5;
      v30[91] = a6;
      goto LABEL_148;
    case 23:
      v31 = (float *)*((_QWORD *)this + 51);
      if (v31[92] == a3.n128_f32[0] && v31[93] == a4 && v31[94] == a5 && v31[95] == a6)
        return 0;
      v31[92] = a3.n128_f32[0];
      v31[93] = a4;
      v31[94] = a5;
      v31[95] = a6;
      goto LABEL_148;
    case 24:
      v32 = (float *)*((_QWORD *)this + 51);
      if (v32[96] == a3.n128_f32[0] && v32[97] == a4 && v32[98] == a5 && v32[99] == a6)
        return 0;
      v32[96] = a3.n128_f32[0];
      v32[97] = a4;
      v32[98] = a5;
      v32[99] = a6;
      goto LABEL_148;
    case 25:
      v33 = (float *)*((_QWORD *)this + 51);
      if (v33[100] == a3.n128_f32[0] && v33[101] == a4 && v33[102] == a5 && v33[103] == a6)
        return 0;
      v33[100] = a3.n128_f32[0];
      v33[101] = a4;
      v33[102] = a5;
      v33[103] = a6;
      goto LABEL_148;
    case 26:
      v34 = (float *)*((_QWORD *)this + 51);
      if (v34[104] == a3.n128_f32[0] && v34[105] == a4 && v34[106] == a5 && v34[107] == a6)
        return 0;
      v34[104] = a3.n128_f32[0];
      v34[105] = a4;
      v34[106] = a5;
      v34[107] = a6;
      goto LABEL_148;
    case 27:
      v35 = (float *)*((_QWORD *)this + 51);
      if (v35[108] == a3.n128_f32[0] && v35[109] == a4 && v35[110] == a5 && v35[111] == a6)
        return 0;
      v35[108] = a3.n128_f32[0];
      v35[109] = a4;
      v35[110] = a5;
      v35[111] = a6;
      goto LABEL_148;
    case 28:
      v36 = (float *)*((_QWORD *)this + 51);
      if (v36[112] == a3.n128_f32[0] && v36[113] == a4 && v36[114] == a5 && v36[115] == a6)
        return 0;
      v36[112] = a3.n128_f32[0];
      v36[113] = a4;
      v36[114] = a5;
      v36[115] = a6;
LABEL_148:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcUnderwaterRefractV2::GetParameter(HgcUnderwaterRefractV2 *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  float *v28;
  float *v29;
  float *v30;
  float *v31;
  float *v32;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_31;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_31;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_31;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[212];
      a3[1] = v7[213];
      a3[2] = v7[214];
      v4 = v7 + 215;
      goto LABEL_31;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[216];
      a3[1] = v8[217];
      a3[2] = v8[218];
      v4 = v8 + 219;
      goto LABEL_31;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[220];
      a3[1] = v9[221];
      a3[2] = v9[222];
      v4 = v9 + 223;
      goto LABEL_31;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[224];
      a3[1] = v10[225];
      a3[2] = v10[226];
      v4 = v10 + 227;
      goto LABEL_31;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[228];
      a3[1] = v11[229];
      a3[2] = v11[230];
      v4 = v11 + 231;
      goto LABEL_31;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
      goto LABEL_31;
    case 9:
      v13 = (float *)*((_QWORD *)this + 51);
      *a3 = v13[36];
      a3[1] = v13[37];
      a3[2] = v13[38];
      v4 = v13 + 39;
      goto LABEL_31;
    case 10:
      v14 = (float *)*((_QWORD *)this + 51);
      *a3 = v14[40];
      a3[1] = v14[41];
      a3[2] = v14[42];
      v4 = v14 + 43;
      goto LABEL_31;
    case 11:
      v15 = (float *)*((_QWORD *)this + 51);
      *a3 = v15[44];
      a3[1] = v15[45];
      a3[2] = v15[46];
      v4 = v15 + 47;
      goto LABEL_31;
    case 12:
      v16 = (float *)*((_QWORD *)this + 51);
      *a3 = v16[48];
      a3[1] = v16[49];
      a3[2] = v16[50];
      v4 = v16 + 51;
      goto LABEL_31;
    case 13:
      v17 = (float *)*((_QWORD *)this + 51);
      *a3 = v17[52];
      a3[1] = v17[53];
      a3[2] = v17[54];
      v4 = v17 + 55;
      goto LABEL_31;
    case 14:
      v18 = (float *)*((_QWORD *)this + 51);
      *a3 = v18[56];
      a3[1] = v18[57];
      a3[2] = v18[58];
      v4 = v18 + 59;
      goto LABEL_31;
    case 15:
      v19 = (float *)*((_QWORD *)this + 51);
      *a3 = v19[60];
      a3[1] = v19[61];
      a3[2] = v19[62];
      v4 = v19 + 63;
      goto LABEL_31;
    case 16:
      v20 = (float *)*((_QWORD *)this + 51);
      *a3 = v20[64];
      a3[1] = v20[65];
      a3[2] = v20[66];
      v4 = v20 + 67;
      goto LABEL_31;
    case 17:
      v21 = (float *)*((_QWORD *)this + 51);
      *a3 = v21[68];
      a3[1] = v21[69];
      a3[2] = v21[70];
      v4 = v21 + 71;
      goto LABEL_31;
    case 18:
      v22 = (float *)*((_QWORD *)this + 51);
      *a3 = v22[72];
      a3[1] = v22[73];
      a3[2] = v22[74];
      v4 = v22 + 75;
      goto LABEL_31;
    case 19:
      v23 = (float *)*((_QWORD *)this + 51);
      *a3 = v23[76];
      a3[1] = v23[77];
      a3[2] = v23[78];
      v4 = v23 + 79;
      goto LABEL_31;
    case 20:
      v24 = (float *)*((_QWORD *)this + 51);
      *a3 = v24[80];
      a3[1] = v24[81];
      a3[2] = v24[82];
      v4 = v24 + 83;
      goto LABEL_31;
    case 21:
      v25 = (float *)*((_QWORD *)this + 51);
      *a3 = v25[84];
      a3[1] = v25[85];
      a3[2] = v25[86];
      v4 = v25 + 87;
      goto LABEL_31;
    case 22:
      v26 = (float *)*((_QWORD *)this + 51);
      *a3 = v26[88];
      a3[1] = v26[89];
      a3[2] = v26[90];
      v4 = v26 + 91;
      goto LABEL_31;
    case 23:
      v27 = (float *)*((_QWORD *)this + 51);
      *a3 = v27[92];
      a3[1] = v27[93];
      a3[2] = v27[94];
      v4 = v27 + 95;
      goto LABEL_31;
    case 24:
      v28 = (float *)*((_QWORD *)this + 51);
      *a3 = v28[96];
      a3[1] = v28[97];
      a3[2] = v28[98];
      v4 = v28 + 99;
      goto LABEL_31;
    case 25:
      v29 = (float *)*((_QWORD *)this + 51);
      *a3 = v29[100];
      a3[1] = v29[101];
      a3[2] = v29[102];
      v4 = v29 + 103;
      goto LABEL_31;
    case 26:
      v30 = (float *)*((_QWORD *)this + 51);
      *a3 = v30[104];
      a3[1] = v30[105];
      a3[2] = v30[106];
      v4 = v30 + 107;
      goto LABEL_31;
    case 27:
      v31 = (float *)*((_QWORD *)this + 51);
      *a3 = v31[108];
      a3[1] = v31[109];
      a3[2] = v31[110];
      v4 = v31 + 111;
      goto LABEL_31;
    case 28:
      v32 = (float *)*((_QWORD *)this + 51);
      *a3 = v32[112];
      a3[1] = v32[113];
      a3[2] = v32[114];
      v4 = v32 + 115;
LABEL_31:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double HgcUnderwaterRefractV2::State::State(HgcUnderwaterRefractV2::State *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 26) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = xmmword_1B3052FD0;
  *((int32x4_t *)this + 30) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 31) = xmmword_1B3052FE0;
  *((_OWORD *)this + 32) = xmmword_1B3050FE0;
  *((_OWORD *)this + 33) = xmmword_1B3050E20;
  *((_OWORD *)this + 34) = xmmword_1B3052FF0;
  *((_OWORD *)this + 35) = xmmword_1B3053000;
  *((_OWORD *)this + 36) = xmmword_1B3053010;
  *((_OWORD *)this + 37) = xmmword_1B3053020;
  *((_OWORD *)this + 38) = xmmword_1B3053030;
  *((_OWORD *)this + 39) = xmmword_1B3053040;
  *((_OWORD *)this + 40) = xmmword_1B3053050;
  *((_OWORD *)this + 41) = xmmword_1B3053060;
  *((_OWORD *)this + 42) = xmmword_1B3050FF0;
  *((_OWORD *)this + 43) = xmmword_1B3053070;
  *((_OWORD *)this + 44) = xmmword_1B3050F70;
  *((_OWORD *)this + 45) = xmmword_1B3053080;
  *((_OWORD *)this + 46) = xmmword_1B3053090;
  *((_OWORD *)this + 47) = xmmword_1B30530A0;
  *((_OWORD *)this + 48) = xmmword_1B30530B0;
  *((_OWORD *)this + 49) = xmmword_1B30530C0;
  *((_OWORD *)this + 50) = xmmword_1B30530D0;
  *((_OWORD *)this + 51) = xmmword_1B30530E0;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 52) = xmmword_1B30517F0;
  *((_OWORD *)this + 53) = 0u;
  return result;
}

const char *HgcWave::GetProgram(HgcWave *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000046a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy*hg_Params[6].xy;\n"
             "    s1.xy = frag._texCoord0.xy - hg_Params[2].xy;\n"
             "    s2.x = hg_Params[1].x*s1.x;\n"
             "    s2.x = sin(s2.x);\n"
             "    s2.y = hg_Params[0].x*s2.x;\n"
             "    s1.x = hg_Params[1].x*s1.y;\n"
             "    s1.x = sin(s1.x);\n"
             "    s2.x = hg_Params[0].x*s1.x;\n"
             "    s2.xy = s2.xy*hg_Params[6].xy;\n"
             "    s2.xy = s2.xy*hg_Params[3].xy + s0.xy;\n"
             "    s2.xy = s2.xy*hg_Params[6].zw;\n"
             "    s1.xy = fmin(s2.xy, hg_Params[4].xy);\n"
             "    s1.xy = fmax(s1.xy, hg_Params[4].zw);\n"
             "    s2.xy = select(s1.xy, s2.xy, hg_Params[5].xy < 0.00000h);\n"
             "    s2.xy = s2.xy + hg_Params[7].xy;\n"
             "    s2.xy = s2.xy*hg_Params[7].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s2.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5400a7ca:2c54e984:3d4e4af3:9f87c9d8\n"
             "//SIG=00400000:00000000:00000000:00000001:0000:0008:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000462\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy*hg_Params[6].xy;\n"
             "    r1.xy = frag._texCoord0.xy - hg_Params[2].xy;\n"
             "    r2.x = hg_Params[1].x*r1.x;\n"
             "    r2.x = sin(r2.x);\n"
             "    r2.y = hg_Params[0].x*r2.x;\n"
             "    r1.x = hg_Params[1].x*r1.y;\n"
             "    r1.x = sin(r1.x);\n"
             "    r2.x = hg_Params[0].x*r1.x;\n"
             "    r2.xy = r2.xy*hg_Params[6].xy;\n"
             "    r2.xy = r2.xy*hg_Params[3].xy + r0.xy;\n"
             "    r2.xy = r2.xy*hg_Params[6].zw;\n"
             "    r1.xy = fmin(r2.xy, hg_Params[4].xy);\n"
             "    r1.xy = fmax(r1.xy, hg_Params[4].zw);\n"
             "    r2.xy = select(r1.xy, r2.xy, hg_Params[5].xy < 0.00000f);\n"
             "    r2.xy = r2.xy + hg_Params[7].xy;\n"
             "    r2.xy = r2.xy*hg_Params[7].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=81e7491b:b78c38e6:f39489bb:def99b37\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0008:0003:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000584\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy*hg_ProgramLocal6.xy;\n"
           "    r1.xy = hg_TexCoord0.xy - hg_ProgramLocal2.xy;\n"
           "    r2.x = hg_ProgramLocal1.x*r1.x;\n"
           "    r2.x = sin(r2.x);\n"
           "    r2.y = hg_ProgramLocal0.x*r2.x;\n"
           "    r1.x = hg_ProgramLocal1.x*r1.y;\n"
           "    r1.x = sin(r1.x);\n"
           "    r2.x = hg_ProgramLocal0.x*r1.x;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal6.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal3.xy + r0.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal6.zw;\n"
           "    r1.xy = min(r2.xy, hg_ProgramLocal4.xy);\n"
           "    r1.xy = max(r1.xy, hg_ProgramLocal4.zw);\n"
           "    r2.xy = vec2(hg_ProgramLocal5.x < 0.00000 ? r2.x : r1.x, hg_ProgramLocal5.y < 0.00000 ? r2.y : r1.y);\n"
           "    r2.xy = r2.xy + hg_ProgramLocal7.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal7.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r2.xy);\n"
           "}\n"
           "//MD5=1b1fac7b:6a58cce4:075d267f:f5f3bc11\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0008:0003:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcWave::InitProgramDescriptor(HgcWave *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcWave_hgc_visible", "//Metal1.0     \n//LEN=0000000396\n[[ visible ]] FragmentOut HgcWave_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy*hg_Params[6].xy;\n"
    "    r1.xy = texCoord0.xy - hg_Params[2].xy;\n"
    "    r2.x = hg_Params[1].x*r1.x;\n"
    "    r2.x = sin(r2.x);\n"
    "    r2.y = hg_Params[0].x*r2.x;\n"
    "    r1.x = hg_Params[1].x*r1.y;\n"
    "    r1.x = sin(r1.x);\n"
    "    r2.x = hg_Params[0].x*r1.x;\n"
    "    r2.xy = r2.xy*hg_Params[6].xy;\n"
    "    r2.xy = r2.xy*hg_Params[3].xy + r0.xy;\n"
    "    r2.xy = r2.xy*hg_Params[6].zw;\n"
    "    r1.xy = fmin(r2.xy, hg_Params[4].xy);\n"
    "    r1.xy = fmax(r1.xy, hg_Params[4].zw);\n"
    "    r2.xy = select(r1.xy, r2.xy, hg_Params[5].xy < 0.00000f);\n"
    "    r2.xy = r2.xy + hg_Params[7].xy;\n"
    "    r2.xy = r2.xy*hg_Params[7].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28B6D90()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcWave");
}

void sub_1B28B6DA0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28B6F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28B6F70()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28B6F68);
}

_QWORD *HgcWave::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcWave [hgc1]");
}

uint64_t HgcWave::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 7, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcWave::Bind(HgcWave *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HgcWave *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcWave::RenderTile(HgcWave *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  _OWORD *v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  float32x4_t v64;
  uint64_t v65;
  float32x4_t v66;
  uint64_t v67;
  int32x4_t v68;
  float32x2_t v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  int32x4_t v81;
  float32x4_t *v82;
  _OWORD *v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int8x16_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  uint64_t v104;
  int32x4_t v105;
  float32x2_t v106;
  float32x4_t *v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcWave *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = (_OWORD *)*((_QWORD *)this + 51);
          v20 = *((int8x16_t *)v19 + 6);
          v21 = *((float32x4_t *)v19 + 7);
          v22 = vmulq_f32(v17, (float32x4_t)v20);
          v23 = *((float32x4_t *)v19 + 2);
          v24 = *((float32x4_t *)v19 + 3);
          v25 = vsubq_f32(v17, v23);
          v26 = vsubq_f32(v18, v23);
          v27 = *((float32x4_t *)v19 + 1);
          v28 = *((float32x4_t *)v19 + 8);
          v29 = *((int8x16_t *)v19 + 9);
          v30 = vaddq_f32(v21, vmulq_f32(vmulq_f32(v27, v25), v28));
          v31 = vaddq_f32(v21, vmulq_f32(vmulq_f32(v27, v26), v28));
          v32 = vcvtq_f32_s32(vcvtq_s32_f32(v30));
          v33 = vcvtq_f32_s32(vcvtq_s32_f32(v31));
          v34 = vsubq_f32(v30, vsubq_f32(v32, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v32, v30))));
          v35 = vsubq_f32(v31, vsubq_f32(v33, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v33, v31))));
          v36 = *((float32x4_t *)v19 + 10);
          v37 = *((float32x4_t *)v19 + 11);
          v38 = vaddq_f32(v21, vabdq_f32(v34, v36));
          v39 = vaddq_f32(v21, vabdq_f32(v35, v36));
          v40 = vmulq_f32(v38, v38);
          v41 = vmulq_f32(v39, v39);
          v42 = *((float32x4_t *)v19 + 12);
          v43 = *((float32x4_t *)v19 + 13);
          v44 = *((float32x4_t *)v19 + 14);
          v45 = *((int8x16_t *)v19 + 15);
          v46 = vaddq_f32(v21, vmulq_f32(vmulq_lane_f32(v27, *(float32x2_t *)v25.f32, 1), v28));
          v47 = vaddq_f32(v21, vmulq_f32(vmulq_lane_f32(v27, *(float32x2_t *)v26.f32, 1), v28));
          v48 = vcvtq_f32_s32(vcvtq_s32_f32(v46));
          v49 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
          v50 = vaddq_f32(v21, vabdq_f32(vsubq_f32(v46, vsubq_f32(v48, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v48, v46)))), v36));
          v51 = vaddq_f32(v21, vabdq_f32(vsubq_f32(v47, vsubq_f32(v49, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v49, v47)))), v36));
          v52 = vmulq_f32(v50, v50);
          v53 = vmulq_f32(v51, v51);
          v54 = vaddq_f32(v22, vmulq_f32(v24, vmulq_f32((float32x4_t)v20, (float32x4_t)vbslq_s8(v45, (int8x16_t)vmulq_f32(*(float32x4_t *)v19, vmulq_f32(v50, vaddq_f32(v44, vmulq_f32(v52, vaddq_f32(v43, vmulq_f32(v52, vaddq_f32(v37, vmulq_f32(v42, v52)))))))), (int8x16_t)vmulq_n_f32(
                                                  (float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v38, vaddq_f32(v44, vmulq_f32(v40, vaddq_f32(v43, vmulq_f32(v40, vaddq_f32(v37, vmulq_f32(v42, v40)))))))), COERCE_FLOAT(*v19))))));
          v55 = vaddq_f32(vmulq_f32(v18, (float32x4_t)v20), vmulq_f32(v24, vmulq_f32((float32x4_t)v20, (float32x4_t)vbslq_s8(v45, (int8x16_t)vmulq_f32(*(float32x4_t *)v19, vmulq_f32(v51, vaddq_f32(v44, vmulq_f32(v53, vaddq_f32(v43, vmulq_f32(v53, vaddq_f32(v37, vmulq_f32(v42, v53)))))))), (int8x16_t)vmulq_n_f32(
                                                  (float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v39, vaddq_f32(v44, vmulq_f32(v41, vaddq_f32(v43, vmulq_f32(v41, vaddq_f32(v37, vmulq_f32(v42, v41)))))))), COERCE_FLOAT(*v19))))));
          v56 = (float32x4_t)vextq_s8(v20, v20, 8uLL);
          v57 = (int8x16_t)vmulq_f32(v56, v54);
          v58 = (int8x16_t)vmulq_f32(v56, v55);
          v59 = *((int8x16_t *)v19 + 4);
          v60 = vminq_f32((float32x4_t)v57, (float32x4_t)v59);
          v61 = vminq_f32((float32x4_t)v58, (float32x4_t)v59);
          v62 = (float32x4_t)vextq_s8(v59, v59, 8uLL);
          v63 = (int8x16_t)vcgtq_f32(*((float32x4_t *)v19 + 16), *((float32x4_t *)v19 + 5));
          v64 = (float32x4_t)vbslq_s8(v63, v58, (int8x16_t)vmaxq_f32(v61, v62));
          v65 = *((int *)a2 + 22);
          v66 = vsubq_f32((float32x4_t)vbslq_s8(v63, v57, (int8x16_t)vmaxq_f32(v60, v62)), v9);
          v67 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v68 = vaddq_s32(vcvtq_s32_f32(v66), vcltzq_f32(v66));
            v69 = (float32x2_t)vsubq_f32(v66, vcvtq_f32_s32(v68)).u64[0];
            v70 = (float32x4_t *)(v67 + 16 * (v68.i32[0] + v68.i32[1] * (int)v65));
            v71 = vaddq_f32(*v70, vmulq_n_f32(vsubq_f32(v70[1], *v70), v69.f32[0]));
            v72 = vaddq_f32(v71, vmulq_lane_f32(vsubq_f32(vaddq_f32(v70[v65], vmulq_n_f32(vsubq_f32(v70[(int)v65 + 1], v70[v65]), v69.f32[0])), v71), v69, 1));
            v73 = vsubq_f32(v64, v9);
            v74 = vaddq_s32(vcvtq_s32_f32(v73), vcltzq_f32(v73));
            v73.i64[0] = vsubq_f32(v73, vcvtq_f32_s32(v74)).u64[0];
            v75 = (float32x4_t *)(v67 + 16 * (v74.i32[0] + v74.i32[1] * (int)v65));
            v76 = vaddq_f32(*v75, vmulq_n_f32(vsubq_f32(v75[1], *v75), v73.f32[0]));
            v77 = vaddq_f32(v76, vmulq_lane_f32(vsubq_f32(vaddq_f32(v75[v65], vmulq_n_f32(vsubq_f32(v75[(int)v65 + 1], v75[v65]), v73.f32[0])), v76), *(float32x2_t *)v73.f32, 1));
          }
          else
          {
            v78 = vaddq_f32(v66, v13);
            v79 = vcvtq_s32_f32(v78);
            v78.i64[0] = vaddq_s32(v79, vcgtq_f32(vcvtq_f32_s32(v79), v78)).u64[0];
            v72 = *(float32x4_t *)(v67 + 16 * (v78.i32[0] + v78.i32[1] * (int)v65));
            v80 = vaddq_f32(vsubq_f32(v64, v9), v13);
            v81 = vcvtq_s32_f32(v80);
            v80.i64[0] = vaddq_s32(v81, vcgtq_f32(vcvtq_f32_s32(v81), v80)).u64[0];
            v77 = *(float32x4_t *)(v67 + 16 * (v80.i32[0] + v80.i32[1] * (int)v65));
          }
          v82 = (float32x4_t *)(v11 + 16 * v15);
          *v82 = v72;
          v82[1] = v77;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v83 = (_OWORD *)*((_QWORD *)this + 51);
        v84 = vsubq_f32(v17, *((float32x4_t *)v83 + 2));
        v85 = *((float32x4_t *)v83 + 1);
        v86 = *((int8x16_t *)v83 + 6);
        v87 = *((float32x4_t *)v83 + 7);
        v88 = *((float32x4_t *)v83 + 8);
        v89 = *((int8x16_t *)v83 + 9);
        v90 = vaddq_f32(v87, vmulq_f32(vmulq_f32(v85, v84), v88));
        v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
        v92 = vsubq_f32(v90, vsubq_f32(v91, (float32x4_t)vandq_s8(v89, (int8x16_t)vcgtq_f32(v91, v90))));
        v93 = *((float32x4_t *)v83 + 10);
        v94 = vaddq_f32(v87, vabdq_f32(v92, v93));
        v95 = vmulq_f32(v94, v94);
        v96 = vaddq_f32(v87, vmulq_f32(vmulq_lane_f32(v85, *(float32x2_t *)v84.f32, 1), v88));
        v97 = vcvtq_f32_s32(vcvtq_s32_f32(v96));
        v98 = vaddq_f32(v87, vabdq_f32(vsubq_f32(v96, vsubq_f32(v97, (float32x4_t)vandq_s8(v89, (int8x16_t)vcgtq_f32(v97, v96)))), v93));
        v99 = vmulq_f32(v98, v98);
        v100 = (int8x16_t)vmulq_f32((float32x4_t)vextq_s8(v86, v86, 8uLL), vaddq_f32(vmulq_f32(v17, (float32x4_t)v86), vmulq_f32(*((float32x4_t *)v83 + 3), vmulq_f32((float32x4_t)v86, (float32x4_t)vbslq_s8(*((int8x16_t *)v83 + 15), (int8x16_t)vmulq_f32(*(float32x4_t *)v83, vmulq_f32(v98, vaddq_f32(*((float32x4_t *)v83 + 14), vmulq_f32(v99, vaddq_f32(*((float32x4_t *)v83 + 13),
                                                                      vmulq_f32(v99, vaddq_f32(*((float32x4_t *)v83 + 11), vmulq_f32(*((float32x4_t *)v83 + 12), v99)))))))), (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v94, vaddq_f32(*((float32x4_t *)v83 + 14), vmulq_f32(v95, vaddq_f32(*((float32x4_t *)v83 + 13), vmulq_f32(v95, vaddq_f32(*((float32x4_t *)v83 + 11), vmulq_f32(*((float32x4_t *)v83 + 12), v95)))))))), COERCE_FLOAT(*v83)))))));
        v101 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*((float32x4_t *)v83 + 16), *((float32x4_t *)v83 + 5)), v100, (int8x16_t)vmaxq_f32(vminq_f32((float32x4_t)v100, *((float32x4_t *)v83 + 4)), (float32x4_t)vextq_s8(*((int8x16_t *)v83 + 4), *((int8x16_t *)v83 + 4), 8uLL)));
        v102 = *((int *)a2 + 22);
        v103 = vsubq_f32(v101, v9);
        v104 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v105 = vaddq_s32(vcvtq_s32_f32(v103), vcltzq_f32(v103));
          v106 = (float32x2_t)vsubq_f32(v103, vcvtq_f32_s32(v105)).u64[0];
          v107 = (float32x4_t *)(v104 + 16 * (v105.i32[0] + v105.i32[1] * (int)v102));
          v108 = vaddq_f32(*v107, vmulq_n_f32(vsubq_f32(v107[1], *v107), v106.f32[0]));
          v109 = vaddq_f32(v108, vmulq_lane_f32(vsubq_f32(vaddq_f32(v107[v102], vmulq_n_f32(vsubq_f32(v107[(int)v102 + 1], v107[v102]), v106.f32[0])), v108), v106, 1));
        }
        else
        {
          v110 = vaddq_f32(v103, v13);
          v111 = vcvtq_s32_f32(v110);
          v110.i64[0] = vaddq_s32(v111, vcgtq_f32(vcvtq_f32_s32(v111), v110)).u64[0];
          v109 = *(float32x4_t *)(v104 + 16 * (v110.i32[0] + v110.i32[1] * (int)v102));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v109;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcWave::GetDOD(HgcWave *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcWave *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcWave::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcWave::HgcWave(HgcWave *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F1710;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = xmmword_1B3053160;
  *(_OWORD *)(v3 + 128) = xmmword_1B3053170;
  *(_OWORD *)(v3 + 144) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051880;
  *(_OWORD *)(v3 + 176) = xmmword_1B3053180;
  *(_OWORD *)(v3 + 192) = xmmword_1B3053190;
  *(_OWORD *)(v3 + 208) = xmmword_1B30531A0;
  *(_OWORD *)(v3 + 224) = xmmword_1B30531B0;
  *(_OWORD *)(v3 + 240) = xmmword_1B3050E20;
  *(_QWORD *)(v3 + 256) = 0;
  *(_QWORD *)(v3 + 264) = 0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcWave *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28B78E8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcWave::~HgcWave(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F1710;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40881B329ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcWave::~HgcWave(this);
  HGObject::operator delete(v1);
}

uint64_t HgcWave::SetParameter(HgcWave *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 6)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcWave::GetParameter(HgcWave *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 6)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcScaleAndAddClampDazzle::GetProgram(HgcScaleAndAddClampDazzle *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003b1\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r1*half4(hg_Params[0]) + r0;\n"
             "    r1.w = fmin(r1.w, c0.w);\n"
             "    r1.xyz = fmin(r1.xyz, half3(hg_Params[1].xyz));\n"
             "    output.color0 = fmax(float4(r1), float4(c0.xxxx));\n"
             "    return output;\n"
             "}\n"
             "//MD5=fe79b40d:214bfd7f:518ff8a2:75725324\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000388\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = r1*hg_Params[0] + r0;\n"
             "    r1.w = fmin(r1.w, c0.w);\n"
             "    r1.xyz = fmin(r1.xyz, hg_Params[1].xyz);\n"
             "    output.color0 = fmax(r1, c0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=38827cc6:0975ef63:75b0fada:9c695211\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000360\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = r1*hg_ProgramLocal0 + r0;\n"
           "    r1.w = min(r1.w, c0.w);\n"
           "    r1.xyz = min(r1.xyz, hg_ProgramLocal1.xyz);\n"
           "    gl_FragColor = max(r1, c0.xxxx);\n"
           "}\n"
           "//MD5=a22c88ac:6adfb8b3:27136144:420f2ceb\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcScaleAndAddClampDazzle::InitProgramDescriptor(HgcScaleAndAddClampDazzle *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcScaleAndAddClampDazzle_hgc_visible", "//Metal1.0     \n//LEN=00000001f0\n[[ visible ]] FragmentOut HgcScaleAndAddClampDazzle_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1 = color0;\n"
    "    r1 = r1*hg_Params[0] + r0;\n"
    "    r1.w = fmin(r1.w, c0.w);\n"
    "    r1.xyz = fmin(r1.xyz, hg_Params[1].xyz);\n"
    "    output.color0 = fmax(r1, c0.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28B7AF0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcScaleAndAddClampDazzle");
}

void sub_1B28B7B00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28B7C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28B7C88()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28B7C80);
}

_QWORD *HgcScaleAndAddClampDazzle::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcScaleAndAddClampDazzle [hgc1]");
}

uint64_t HgcScaleAndAddClampDazzle::BindTexture(HgcScaleAndAddClampDazzle *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcScaleAndAddClampDazzle::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcScaleAndAddClampDazzle::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  int8x16_t v31;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 104);
    v8 = *(_QWORD *)(a2 + 96);
    v9 = 16 * *(int *)(a2 + 88);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v28) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(_QWORD *)(a1 + 408);
          v14 = *(float32x4_t *)(v13 + 16);
          v15 = vaddq_f32(*(float32x4_t *)(v8 + v12 - 32), vmulq_f32(*(float32x4_t *)(v6 + v12 - 32), *(float32x4_t *)v13));
          v16 = vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), vmulq_f32(*(float32x4_t *)(v6 + v12 - 16), *(float32x4_t *)v13));
          v17 = vaddq_f32(*(float32x4_t *)(v8 + v12), vmulq_f32(*(float32x4_t *)(v6 + v12), *(float32x4_t *)v13));
          v18 = vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), vmulq_f32(*(float32x4_t *)(v6 + v12 + 16), *(float32x4_t *)v13));
          v19 = *(float32x4_t *)(v13 + 32);
          v20 = *(int8x16_t *)(v13 + 48);
          v21 = (int8x16_t)vminq_f32(v15, v19);
          v22 = (int8x16_t)vminq_f32(v16, v19);
          v23 = (int8x16_t)vminq_f32(v17, v19);
          v24 = (int8x16_t)vminq_f32(v18, v19);
          v25 = (float32x4_t)vbslq_s8(v20, v24, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v20, v24, (int8x16_t)v18), v14));
          v26 = *(float32x4_t *)(v13 + 64);
          v27 = (float32x4_t *)(v5 + v12);
          v27[-2] = vmaxq_f32((float32x4_t)vbslq_s8(v20, v21, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v20, v21, (int8x16_t)v15), v14)), v26);
          v27[-1] = vmaxq_f32((float32x4_t)vbslq_s8(v20, v22, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v20, v22, (int8x16_t)v16), v14)), v26);
          *v27 = vmaxq_f32((float32x4_t)vbslq_s8(v20, v23, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(v20, v23, (int8x16_t)v17), v14)), v26);
          v27[1] = vmaxq_f32(v25, v26);
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v28) = -v11;
      }
      if ((int)v28 < v4)
      {
        v28 = v28;
        do
        {
          v29 = *(_QWORD *)(a1 + 408);
          v30 = vaddq_f32(*(float32x4_t *)(v8 + 16 * v28), vmulq_f32(*(float32x4_t *)(v6 + 16 * v28), *(float32x4_t *)v29));
          v31 = (int8x16_t)vminq_f32(v30, *(float32x4_t *)(v29 + 32));
          *(float32x4_t *)(v5 + 16 * v28++) = vmaxq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v29 + 48), v31, (int8x16_t)vminq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v29 + 48), v31, (int8x16_t)v30), *(float32x4_t *)(v29 + 16))), *(float32x4_t *)(v29 + 64));
        }
        while (v28 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcScaleAndAddClampDazzle::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcScaleAndAddClampDazzle::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcScaleAndAddClampDazzle::HgcScaleAndAddClampDazzle(HgcScaleAndAddClampDazzle *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F1978;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = xmmword_1B3052220;
  v3[3] = xmmword_1B3050F70;
  v3[4] = 0u;
  v3[5] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28B8048(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcScaleAndAddClampDazzle::~HgcScaleAndAddClampDazzle(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F1978;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40565EDBD2);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcScaleAndAddClampDazzle::~HgcScaleAndAddClampDazzle(this);
  HGObject::operator delete(v1);
}

uint64_t HgcScaleAndAddClampDazzle::SetParameter(HgcScaleAndAddClampDazzle *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  uint64_t v8;
  int32x4_t v9;

  if ((_DWORD)a2 == 1)
  {
    v8 = *((_QWORD *)this + 51);
    if (*(float *)(v8 + 16) != a3.n128_f32[0]
      || *(float *)(v8 + 20) != a3.n128_f32[0]
      || *(float *)(v8 + 24) != a3.n128_f32[0]
      || *(float *)(v8 + 28) != 0.0)
    {
      v9 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v9.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      *(int32x4_t *)(v8 + 16) = v9;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v8 + 80) = a3;
      goto LABEL_13;
    }
    return 0;
  }
  if (!(_DWORD)a2)
  {
    v7 = *((_QWORD *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a4
      || *(float *)(v7 + 8) != a5
      || *(float *)(v7 + 12) != a6)
    {
      *(_DWORD *)v7 = a3.n128_u32[0];
      *(float *)(v7 + 4) = a4;
      *(float *)(v7 + 8) = a5;
      *(float *)(v7 + 12) = a6;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcScaleAndAddClampDazzle::GetParameter(HgcScaleAndAddClampDazzle *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[20];
    a3[1] = v5[21];
    a3[2] = v5[22];
    v4 = v5 + 23;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    v4 = v3 + 3;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcOverlappingCircles::GetProgram(HgcOverlappingCircles *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000d2d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.500000000, 2.000000000, 0.5000000000, 3.000000000);\n"
             "    const half4 c1 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    float4 s0, s1, s2, s3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.z = dot(frag._texCoord0, hg_Params[6]);\n"
             "    s0.w = 1.00000f / hg_Params[1].x;\n"
             "    s0.x = dot(frag._texCoord0, hg_Params[5]);\n"
             "    s0.y = s0.z;\n"
             "    s1.xy = s0.ww*s0.xy;\n"
             "    s1.xy = floor(s1.xy);\n"
             "    s1.xy = -s1.xy*hg_Params[1].xx + s0.xy;\n"
             "    s1.zw = hg_Params[1].xx*float2(c0.zz);\n"
             "    r0.zw = c0.xx*half2(hg_Params[1].xx);\n"
             "    r1.y = half(s1.w);\n"
             "    r1.x = r0.z;\n"
             "    s2.zw = s1.xy - float2(r1.xy);\n"
             "    s2.w = s2.w*s2.w;\n"
             "    s2.z = s2.z*s2.z + s2.w;\n"
             "    s2.y = s1.w;\n"
             "    s2.x = -s1.z;\n"
             "    s2.xy = s1.xy - s2.xy;\n"
             "    s2.y = s2.y*s2.y;\n"
             "    s2.x = s2.x*s2.x + s2.y;\n"
             "    s2.yz = sqrt(s2.zx);\n"
             "    s2.y = hg_Params[0].x - s2.y;\n"
             "    s2.x = clamp(s2.y*hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    s2.y = hg_Params[0].x - s2.z;\n"
             "    s2.y = clamp(s2.y*hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    s2.z = -s2.x*float(c0.y) + float(c0.w);\n"
             "    s2.x = s2.x*s2.x;\n"
             "    s0.y = s2.x*s2.z;\n"
             "    s2.z = s2.y*s2.y;\n"
             "    s2.w = -s2.y*float(c0.y) + float(c0.w);\n"
             "    s2.xy = s1.xy - s1.zw;\n"
             "    s2.y = s2.y*s2.y;\n"
             "    s3.x = s2.x*s2.x + s2.y;\n"
             "    r0.y = sqrt(half(s3.x));\n"
             "    r0.y = half(hg_Params[0].x) - r0.y;\n"
             "    r0.y = clamp(r0.y*half(hg_Params[7].x), 0.00000h, 1.00000h);\n"
             "    r1.y = -half(s1.w);\n"
             "    r1.x = half(s1.z);\n"
             "    s3.xy = s1.xy - float2(r1.xy);\n"
             "    r0.x = half(s2.z)*half(s2.w);\n"
             "    s2 = mix(hg_Params[4], hg_Params[2], float4(r0.xxxx));\n"
             "    s2 = mix(s2, hg_Params[2], s0.yyyy);\n"
             "    s1.w = -float(r0.y)*float(c0.y) + float(c0.w);\n"
             "    r0.y = r0.y*r0.y;\n"
             "    r0.y = r0.y*half(s1.w);\n"
             "    s2 = mix(s2, hg_Params[3], float4(r0.yyyy));\n"
             "    s1.w = s3.y*s3.y;\n"
             "    s1.w = s3.x*s3.x + s1.w;\n"
             "    r0.z = rsqrt(half(s1.w));\n"
             "    s1.w = float(r0.w);\n"
             "    s1.xy = s1.xy - s1.zw;\n"
             "    s1.z = 1.00000f / float(r0.z);\n"
             "    s1.y = s1.y*s1.y;\n"
             "    s1.x = s1.x*s1.x + s1.y;\n"
             "    s1.z = hg_Params[0].x - s1.z;\n"
             "    s1.y = clamp(s1.z*hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    s1.x = sqrt(s1.x);\n"
             "    s1.x = hg_Params[0].x - s1.x;\n"
             "    r0.w = clamp(half(s1.x)*half(hg_Params[7].x), 0.00000h, 1.00000h);\n"
             "    s1.z = -s1.y*float(c0.y) + float(c0.w);\n"
             "    s1.y = s1.y*s1.y;\n"
             "    r0.z = half(s1.y)*half(s1.z);\n"
             "    s3 = mix(hg_Params[4], hg_Params[3], float4(r0.zzzz));\n"
             "    s1.x = -float(r0.w)*float(c0.y) + float(c0.w);\n"
             "    r0.w = r0.w*r0.w;\n"
             "    r0.w = r0.w*half(s1.x);\n"
             "    s3 = mix(s3, hg_Params[3], float4(r0.wwww));\n"
             "    s2 = mix(s2, hg_Params[2], float4(r0.wwww));\n"
             "    s2 = mix(s2, hg_Params[2], float4(r0.zzzz));\n"
             "    s3 = mix(s3, hg_Params[2], float4(r0.yyyy));\n"
             "    s1.xy = s0.wz*s0.xw;\n"
             "    s1.xz = floor(s1.yx);\n"
             "    s1.yw = s1.xz*float2(c0.zz);\n"
             "    s1.yw = floor(s1.yw);\n"
             "    s1.xz = -s1.yw*float2(c0.yy) + s1.xz;\n"
             "    s1.xy = float2(-fabs(s1.xz) >= float2(c1.xx));\n"
             "    s1.x = s1.x - s1.y;\n"
             "    s3 = mix(s3, hg_Params[3], float4(r0.xxxx));\n"
             "    s3 = mix(s3, hg_Params[3], s0.yyyy);\n"
             "    s1.x = float(-fabs(s1.x) >= float(c1.x));\n"
             "    output.color0 = select(s2, s3, -s1.xxxx < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=729f8d42:3aa54242:f50e99e6:2a2f0512\n"
             "//SIG=00400000:00000000:00000000:00000000:0002:0008:0006:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000be9\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.500000000, 2.000000000, 0.5000000000, 3.000000000);\n"
             "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.z = dot(frag._texCoord0, hg_Params[6]);\n"
             "    r0.w = 1.00000f / hg_Params[1].x;\n"
             "    r0.x = dot(frag._texCoord0, hg_Params[5]);\n"
             "    r0.y = r0.z;\n"
             "    r1.xy = r0.ww*r0.xy;\n"
             "    r1.xy = floor(r1.xy);\n"
             "    r1.xy = -r1.xy*hg_Params[1].xx + r0.xy;\n"
             "    r1.zw = hg_Params[1].xx*c0.zz;\n"
             "    r2.zw = c0.xx*hg_Params[1].xx;\n"
             "    r3.y = r1.w;\n"
             "    r3.x = r2.z;\n"
             "    r3.zw = r1.xy - r3.xy;\n"
             "    r3.w = r3.w*r3.w;\n"
             "    r3.z = r3.z*r3.z + r3.w;\n"
             "    r3.y = r1.w;\n"
             "    r3.x = -r1.z;\n"
             "    r3.xy = r1.xy - r3.xy;\n"
             "    r3.y = r3.y*r3.y;\n"
             "    r3.x = r3.x*r3.x + r3.y;\n"
             "    r3.yz = sqrt(r3.zx);\n"
             "    r3.y = hg_Params[0].x - r3.y;\n"
             "    r3.x = clamp(r3.y*hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    r3.y = hg_Params[0].x - r3.z;\n"
             "    r3.y = clamp(r3.y*hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    r3.z = -r3.x*c0.y + c0.w;\n"
             "    r3.x = r3.x*r3.x;\n"
             "    r0.y = r3.x*r3.z;\n"
             "    r3.z = r3.y*r3.y;\n"
             "    r3.w = -r3.y*c0.y + c0.w;\n"
             "    r3.xy = r1.xy - r1.zw;\n"
             "    r3.y = r3.y*r3.y;\n"
             "    r4.x = r3.x*r3.x + r3.y;\n"
             "    r2.y = sqrt(r4.x);\n"
             "    r2.y = hg_Params[0].x - r2.y;\n"
             "    r2.y = clamp(r2.y*hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    r4.y = -r1.w;\n"
             "    r4.x = r1.z;\n"
             "    r4.xy = r1.xy - r4.xy;\n"
             "    r2.x = r3.z*r3.w;\n"
             "    r3 = mix(hg_Params[4], hg_Params[2], r2.xxxx);\n"
             "    r3 = mix(r3, hg_Params[2], r0.yyyy);\n"
             "    r1.w = -r2.y*c0.y + c0.w;\n"
             "    r2.y = r2.y*r2.y;\n"
             "    r2.y = r2.y*r1.w;\n"
             "    r3 = mix(r3, hg_Params[3], r2.yyyy);\n"
             "    r1.w = r4.y*r4.y;\n"
             "    r1.w = r4.x*r4.x + r1.w;\n"
             "    r2.z = rsqrt(r1.w);\n"
             "    r1.w = r2.w;\n"
             "    r1.xy = r1.xy - r1.zw;\n"
             "    r1.z = 1.00000f / r2.z;\n"
             "    r1.y = r1.y*r1.y;\n"
             "    r1.x = r1.x*r1.x + r1.y;\n"
             "    r1.z = hg_Params[0].x - r1.z;\n"
             "    r1.y = clamp(r1.z*hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    r1.x = sqrt(r1.x);\n"
             "    r1.x = hg_Params[0].x - r1.x;\n"
             "    r2.w = clamp(r1.x*hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    r1.z = -r1.y*c0.y + c0.w;\n"
             "    r1.y = r1.y*r1.y;\n"
             "    r2.z = r1.y*r1.z;\n"
             "    r4 = mix(hg_Params[4], hg_Params[3], r2.zzzz);\n"
             "    r1.x = -r2.w*c0.y + c0.w;\n"
             "    r2.w = r2.w*r2.w;\n"
             "    r2.w = r2.w*r1.x;\n"
             "    r4 = mix(r4, hg_Params[3], r2.wwww);\n"
             "    r3 = mix(r3, hg_Params[2], r2.wwww);\n"
             "    r3 = mix(r3, hg_Params[2], r2.zzzz);\n"
             "    r4 = mix(r4, hg_Params[2], r2.yyyy);\n"
             "    r1.xy = r0.wz*r0.xw;\n"
             "    r1.xz = floor(r1.yx);\n"
             "    r1.yw = r1.xz*c0.zz;\n"
             "    r1.yw = floor(r1.yw);\n"
             "    r1.xz = -r1.yw*c0.yy + r1.xz;\n"
             "    r1.xy = float2(-fabs(r1.xz) >= c1.xx);\n"
             "    r1.x = r1.x - r1.y;\n"
             "    r4 = mix(r4, hg_Params[3], r2.xxxx);\n"
             "    r4 = mix(r4, hg_Params[3], r0.yyyy);\n"
             "    r1.x = float(-fabs(r1.x) >= c1.x);\n"
             "    output.color0 = select(r3, r4, -r1.xxxx < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3541d97c:3ceca835:d1636424:fb3ca751\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:0008:0005:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000dc6\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.500000000, 2.000000000, 0.5000000000, 3.000000000);\n"
           "    const highp vec4 c1 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0.z = dot(hg_TexCoord0, hg_ProgramLocal6);\n"
           "    r0.w = 1.00000 / hg_ProgramLocal1.x;\n"
           "    r0.x = dot(hg_TexCoord0, hg_ProgramLocal5);\n"
           "    r0.y = r0.z;\n"
           "    r1.xy = r0.ww*r0.xy;\n"
           "    r1.xy = floor(r1.xy);\n"
           "    r1.xy = -r1.xy*hg_ProgramLocal1.xx + r0.xy;\n"
           "    r1.zw = hg_ProgramLocal1.xx*c0.zz;\n"
           "    r2.zw = c0.xx*hg_ProgramLocal1.xx;\n"
           "    r3.y = r1.w;\n"
           "    r3.x = r2.z;\n"
           "    r3.zw = r1.xy - r3.xy;\n"
           "    r3.w = r3.w*r3.w;\n"
           "    r3.z = r3.z*r3.z + r3.w;\n"
           "    r3.y = r1.w;\n"
           "    r3.x = -r1.z;\n"
           "    r3.xy = r1.xy - r3.xy;\n"
           "    r3.y = r3.y*r3.y;\n"
           "    r3.x = r3.x*r3.x + r3.y;\n"
           "    r3.yz = sqrt(r3.zx);\n"
           "    r3.y = hg_ProgramLocal0.x - r3.y;\n"
           "    r3.x = clamp(r3.y*hg_ProgramLocal7.x, 0.00000, 1.00000);\n"
           "    r3.y = hg_ProgramLocal0.x - r3.z;\n"
           "    r3.y = clamp(r3.y*hg_ProgramLocal7.x, 0.00000, 1.00000);\n"
           "    r3.z = -r3.x*c0.y + c0.w;\n"
           "    r3.x = r3.x*r3.x;\n"
           "    r0.y = r3.x*r3.z;\n"
           "    r3.z = r3.y*r3.y;\n"
           "    r3.w = -r3.y*c0.y + c0.w;\n"
           "    r3.xy = r1.xy - r1.zw;\n"
           "    r3.y = r3.y*r3.y;\n"
           "    r4.x = r3.x*r3.x + r3.y;\n"
           "    r2.y = sqrt(r4.x);\n"
           "    r2.y = hg_ProgramLocal0.x - r2.y;\n"
           "    r2.y = clamp(r2.y*hg_ProgramLocal7.x, 0.00000, 1.00000);\n"
           "    r4.y = -r1.w;\n"
           "    r4.x = r1.z;\n"
           "    r4.xy = r1.xy - r4.xy;\n"
           "    r2.x = r3.z*r3.w;\n"
           "    r3 = mix(hg_ProgramLocal4, hg_ProgramLocal2, r2.xxxx);\n"
           "    r3 = mix(r3, hg_ProgramLocal2, r0.yyyy);\n"
           "    r1.w = -r2.y*c0.y + c0.w;\n"
           "    r2.y = r2.y*r2.y;\n"
           "    r2.y = r2.y*r1.w;\n"
           "    r3 = mix(r3, hg_ProgramLocal3, r2.yyyy);\n"
           "    r1.w = r4.y*r4.y;\n"
           "    r1.w = r4.x*r4.x + r1.w;\n"
           "    r2.z = inversesqrt(r1.w);\n"
           "    r1.w = r2.w;\n"
           "    r1.xy = r1.xy - r1.zw;\n"
           "    r1.z = 1.00000 / r2.z;\n"
           "    r1.y = r1.y*r1.y;\n"
           "    r1.x = r1.x*r1.x + r1.y;\n"
           "    r1.z = hg_ProgramLocal0.x - r1.z;\n"
           "    r1.y = clamp(r1.z*hg_ProgramLocal7.x, 0.00000, 1.00000);\n"
           "    r1.x = sqrt(r1.x);\n"
           "    r1.x = hg_ProgramLocal0.x - r1.x;\n"
           "    r2.w = clamp(r1.x*hg_ProgramLocal7.x, 0.00000, 1.00000);\n"
           "    r1.z = -r1.y*c0.y + c0.w;\n"
           "    r1.y = r1.y*r1.y;\n"
           "    r2.z = r1.y*r1.z;\n"
           "    r4 = mix(hg_ProgramLocal4, hg_ProgramLocal3, r2.zzzz);\n"
           "    r1.x = -r2.w*c0.y + c0.w;\n"
           "    r2.w = r2.w*r2.w;\n"
           "    r2.w = r2.w*r1.x;\n"
           "    r4 = mix(r4, hg_ProgramLocal3, r2.wwww);\n"
           "    r3 = mix(r3, hg_ProgramLocal2, r2.wwww);\n"
           "    r3 = mix(r3, hg_ProgramLocal2, r2.zzzz);\n"
           "    r4 = mix(r4, hg_ProgramLocal2, r2.yyyy);\n"
           "    r1.xy = r0.wz*r0.xw;\n"
           "    r1.xz = floor(r1.yx);\n"
           "    r1.yw = r1.xz*c0.zz;\n"
           "    r1.yw = floor(r1.yw);\n"
           "    r1.xz = -r1.yw*c0.yy + r1.xz;\n"
           "    r1.xy = vec2(greaterThanEqual(-abs(r1.xz), c1.xx));\n"
           "    r1.x = r1.x - r1.y;\n"
           "    r4 = mix(r4, hg_ProgramLocal3, r2.xxxx);\n"
           "    r4 = mix(r4, hg_ProgramLocal3, r0.yyyy);\n"
           "    r1.x = float(-abs(r1.x) >= c1.x);\n"
           "    gl_FragColor = vec4(-r1.x < 0.00000 ? r4.x : r3.x, -r1.x < 0.00000 ? r4.y : r3.y, -r1.x < 0.00000 ? r4.z "
           ": r3.z, -r1.x < 0.00000 ? r4.w : r3.w);\n"
           "}\n"
           "//MD5=7266f630:876155f1:694b993b:5f8533d7\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:0008:0005:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcOverlappingCircles::InitProgramDescriptor(HgcOverlappingCircles *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcOverlappingCircles_hgc_visible", "//Metal1.0     \n//LEN=0000000b4d\n[[ visible ]] FragmentOut HgcOverlappingCircles_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(1.500000000, 2.000000000, 0.5000000000, 3.000000000);\n"
    "    const float4 c1 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.z = dot(texCoord0, hg_Params[6]);\n"
    "    r0.w = 1.00000f / hg_Params[1].x;\n"
    "    r0.x = dot(texCoord0, hg_Params[5]);\n"
    "    r0.y = r0.z;\n"
    "    r1.xy = r0.ww*r0.xy;\n"
    "    r1.xy = floor(r1.xy);\n"
    "    r1.xy = -r1.xy*hg_Params[1].xx + r0.xy;\n"
    "    r1.zw = hg_Params[1].xx*c0.zz;\n"
    "    r2.zw = c0.xx*hg_Params[1].xx;\n"
    "    r3.y = r1.w;\n"
    "    r3.x = r2.z;\n"
    "    r3.zw = r1.xy - r3.xy;\n"
    "    r3.w = r3.w*r3.w;\n"
    "    r3.z = r3.z*r3.z + r3.w;\n"
    "    r3.y = r1.w;\n"
    "    r3.x = -r1.z;\n"
    "    r3.xy = r1.xy - r3.xy;\n"
    "    r3.y = r3.y*r3.y;\n"
    "    r3.x = r3.x*r3.x + r3.y;\n"
    "    r3.yz = sqrt(r3.zx);\n"
    "    r3.y = hg_Params[0].x - r3.y;\n"
    "    r3.x = clamp(r3.y*hg_Params[7].x, 0.00000f, 1.00000f);\n"
    "    r3.y = hg_Params[0].x - r3.z;\n"
    "    r3.y = clamp(r3.y*hg_Params[7].x, 0.00000f, 1.00000f);\n"
    "    r3.z = -r3.x*c0.y + c0.w;\n"
    "    r3.x = r3.x*r3.x;\n"
    "    r0.y = r3.x*r3.z;\n"
    "    r3.z = r3.y*r3.y;\n"
    "    r3.w = -r3.y*c0.y + c0.w;\n"
    "    r3.xy = r1.xy - r1.zw;\n"
    "    r3.y = r3.y*r3.y;\n"
    "    r4.x = r3.x*r3.x + r3.y;\n"
    "    r2.y = sqrt(r4.x);\n"
    "    r2.y = hg_Params[0].x - r2.y;\n"
    "    r2.y = clamp(r2.y*hg_Params[7].x, 0.00000f, 1.00000f);\n"
    "    r4.y = -r1.w;\n"
    "    r4.x = r1.z;\n"
    "    r4.xy = r1.xy - r4.xy;\n"
    "    r2.x = r3.z*r3.w;\n"
    "    r3 = mix(hg_Params[4], hg_Params[2], r2.xxxx);\n"
    "    r3 = mix(r3, hg_Params[2], r0.yyyy);\n"
    "    r1.w = -r2.y*c0.y + c0.w;\n"
    "    r2.y = r2.y*r2.y;\n"
    "    r2.y = r2.y*r1.w;\n"
    "    r3 = mix(r3, hg_Params[3], r2.yyyy);\n"
    "    r1.w = r4.y*r4.y;\n"
    "    r1.w = r4.x*r4.x + r1.w;\n"
    "    r2.z = rsqrt(r1.w);\n"
    "    r1.w = r2.w;\n"
    "    r1.xy = r1.xy - r1.zw;\n"
    "    r1.z = 1.00000f / r2.z;\n"
    "    r1.y = r1.y*r1.y;\n"
    "    r1.x = r1.x*r1.x + r1.y;\n"
    "    r1.z = hg_Params[0].x - r1.z;\n"
    "    r1.y = clamp(r1.z*hg_Params[7].x, 0.00000f, 1.00000f);\n"
    "    r1.x = sqrt(r1.x);\n"
    "    r1.x = hg_Params[0].x - r1.x;\n"
    "    r2.w = clamp(r1.x*hg_Params[7].x, 0.00000f, 1.00000f);\n"
    "    r1.z = -r1.y*c0.y + c0.w;\n"
    "    r1.y = r1.y*r1.y;\n"
    "    r2.z = r1.y*r1.z;\n"
    "    r4 = mix(hg_Params[4], hg_Params[3], r2.zzzz);\n"
    "    r1.x = -r2.w*c0.y + c0.w;\n"
    "    r2.w = r2.w*r2.w;\n"
    "    r2.w = r2.w*r1.x;\n"
    "    r4 = mix(r4, hg_Params[3], r2.wwww);\n"
    "    r3 = mix(r3, hg_Params[2], r2.wwww);\n"
    "    r3 = mix(r3, hg_Params[2], r2.zzzz);\n"
    "    r4 = mix(r4, hg_Params[2], r2.yyyy);\n"
    "    r1.xy = r0.wz*r0.xw;\n"
    "    r1.xz = floor(r1.yx);\n"
    "    r1.yw = r1.xz*c0.zz;\n"
    "    r1.yw = floor(r1.yw);\n"
    "    r1.xz = -r1.yw*c0.yy + r1.xz;\n"
    "    r1.xy = float2(-fabs(r1.xz) >= c1.xx);\n"
    "    r1.x = r1.x - r1.y;\n"
    "    r4 = mix(r4, hg_Params[3], r2.xxxx);\n"
    "    r4 = mix(r4, hg_Params[3], r0.yyyy);\n"
    "    r1.x = float(-fabs(r1.x) >= c1.x);\n"
    "    output.color0 = select(r3, r4, -r1.xxxx < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28B82C0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcOverlappingCircles");
}

void sub_1B28B82D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050E00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28B83D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28B8410()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28B8408);
}

_QWORD *HgcOverlappingCircles::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcOverlappingCircles [hgc1]");
}

uint64_t HgcOverlappingCircles::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcOverlappingCircles::Bind(HgcOverlappingCircles *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HgcOverlappingCircles *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcOverlappingCircles::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x2_t v8;
  float32x4_t v9;
  uint64_t v10;
  int8x16_t v11;
  uint64_t v12;
  int v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  int8x16_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  uint64_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  float32x4_t v99;
  int8x16_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int8x16_t v125;
  float32x4_t v126;
  int8x16_t v127;
  int8x16_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int8x16_t v149;
  int8x16_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int8x16_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  int8x16_t v174;
  int8x16_t v175;
  float32x4_t v176;
  int8x16_t v177;
  int32x4_t v178;
  int32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  int8x16_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  int8x16_t v189;
  float32x4_t v190;
  int8x16_t v191;
  float32x4_t v192;
  int32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  int8x16_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  int32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  int8x16_t *v208;
  uint64_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  int8x16_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  int8x16_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  int8x16_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  int8x16_t v230;
  float32x4_t v231;
  float32x4_t v232;
  int8x16_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  int8x16_t v237;
  float32x4_t v238;
  int8x16_t v239;
  int8x16_t v240;
  float32x4_t v241;
  int8x16_t v242;
  int8x16_t v243;
  float32x4_t v244;
  int8x16_t v245;
  float32x4_t v246;
  int8x8_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int8x16_t v252;
  float32x4_t v253;
  uint64_t v254;
  float32x4_t v255;
  int8x16_t v256;
  int8x16_t v257;
  int8x16_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  int8x16_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  int8x16_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  int8x16_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  int8x16_t v293;
  float32x4_t v294;
  int8x16_t v295;
  int8x16_t v296;
  float32x4_t v297;
  float32x4_t v298;
  int8x16_t v299;
  int32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  int8x16_t v304;
  int32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v309;
  float32x4_t v310;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v6 = (float32x4_t)xmmword_1B304F230;
    v7 = (float32x4_t)xmmword_1B304F240;
    v8 = a2[2];
    v9.i64[1] = 0x3F80000000000000;
    v10 = 16 * a2[3].i32[0];
    v11 = 0uLL;
    do
    {
      if (v5 < 2)
      {
        v12 = 0;
        v14 = v9;
      }
      else
      {
        v12 = 0;
        v13 = v5;
        v309 = v9;
        v14 = v9;
        do
        {
          v15 = *(_QWORD *)(a1 + 408);
          v16 = vaddq_f32(v14, v6);
          v17 = *(float32x4_t *)(v15 + 96);
          v18 = *(float32x4_t *)(v15 + 112);
          v19 = vmulq_f32(v14, v17);
          v20 = vmulq_f32(v16, v17);
          v310 = v16;
          v21 = vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL));
          v22 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL));
          v23 = *(int8x16_t *)(v15 + 16);
          v24 = (float32x4_t)vextq_s8(v23, v23, 4uLL);
          v25 = *(float32x4_t *)(v15 + 128);
          v26 = *(float32x4_t *)(v15 + 144);
          v27 = (int8x16_t)vaddq_f32(v21, (float32x4_t)vdupq_lane_s64(v21.i64[0], 0));
          v29 = *(float32x4_t *)(v15 + 160);
          v28 = *(int8x16_t *)(v15 + 176);
          v30 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v24), v25), v26), v29);
          v31 = *(float32x4_t *)(v15 + 64);
          v32 = *(float32x4_t *)(v15 + 80);
          v33 = vmulq_f32(v14, v32);
          v34 = (int8x16_t)vmulq_f32(v30, vrecpsq_f32(v24, v30));
          v35 = vmulq_f32(v16, v32);
          v36 = vaddq_f32(v33, (float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL));
          v37 = vaddq_f32(v35, (float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 4uLL));
          v38 = vbslq_s8(v28, v27, v34);
          v27.i64[0] = vaddq_f32(v36, (float32x4_t)vdupq_laneq_s64((int64x2_t)v36, 1)).u64[0];
          v39 = vbslq_s8(v28, (int8x16_t)vaddq_f32(v22, (float32x4_t)vdupq_lane_s64(v22.i64[0], 0)), v34);
          v34.i64[0] = vaddq_f32(v37, (float32x4_t)vdupq_laneq_s64((int64x2_t)v37, 1)).u64[0];
          v27.i64[1] = v38.i64[1];
          v34.i64[1] = v39.i64[1];
          v41 = *(int8x16_t *)(v15 + 192);
          v40 = *(float32x4_t *)(v15 + 208);
          v42 = (float32x4_t)vbslq_s8(v41, vextq_s8(v27, v27, 4uLL), v27);
          v43 = (float32x4_t)vbslq_s8(v41, vextq_s8(v34, v34, 4uLL), v34);
          v44 = vmulq_laneq_f32(v42, v42, 3);
          v45 = vmulq_laneq_f32(v43, v43, 3);
          v46 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
          v47 = vcvtq_f32_s32(vcvtq_s32_f32(v45));
          v48 = vsubq_f32(v42, vmulq_n_f32(vsubq_f32(v46, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v46, v44), (int8x16_t)v26, v11)), *(float *)v23.i32));
          v49.i64[0] = v48.i64[0];
          v49.i64[1] = vmulq_n_f32(v40, *(float *)&v23).i64[1];
          v50 = vsubq_f32(v43, vmulq_n_f32(vsubq_f32(v47, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v47, v45), (int8x16_t)v26, v11)), *(float *)v23.i32));
          v51.i64[0] = v50.i64[0];
          v51.i64[1] = v49.i64[1];
          v52 = *(float32x4_t *)(v15 + 224);
          v53 = *(float32x4_t *)(v15 + 240);
          v54 = (int8x16_t)vmulq_n_f32(v52, *(float *)v23.i32);
          v55 = (float32x4_t)vextq_s8(v49, v49, 8uLL);
          v56 = (float32x4_t)vextq_s8(v51, v51, 8uLL);
          v57 = vextq_s8(v54, v54, 8uLL);
          v58 = v6;
          v59 = vsubq_f32((float32x4_t)v49, (float32x4_t)vbslq_s8((int8x16_t)v53, v57, (int8x16_t)v55));
          v60 = vsubq_f32((float32x4_t)v51, (float32x4_t)vbslq_s8((int8x16_t)v53, v57, (int8x16_t)v56));
          v61 = vextq_s8((int8x16_t)v59, (int8x16_t)v59, 8uLL);
          v62 = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL);
          v63 = (int8x16_t)vmulq_f32(v59, v59);
          v64 = (int8x16_t)vmulq_f32(v60, v60);
          v65 = (float32x4_t)vbslq_s8(v28, v61, vextq_s8(v63, v63, 8uLL));
          v66 = (float32x4_t)vbslq_s8(v28, v62, vextq_s8(v64, v64, 8uLL));
          v67 = vaddq_f32(vmulq_f32(v65, v65), (float32x4_t)vrev64q_s32((int32x4_t)v65));
          v65.i64[0] = vsubq_f32(v48, v55).u64[0];
          v68.i64[0] = v55.i64[0];
          v68.i64[1] = v67.i64[1];
          v67.i64[0] = vsubq_f32(v50, v56).u64[0];
          v62.i64[0] = v56.i64[0];
          v62.i64[1] = vaddq_f32(vmulq_f32(v66, v66), (float32x4_t)vrev64q_s32(*(int32x4_t *)&v66)).i64[1];
          v69 = (int8x16_t)vnegq_f32((float32x4_t)v49);
          v70 = (int8x16_t)vnegq_f32((float32x4_t)v51);
          v71 = vextq_s8(v69, v69, 8uLL);
          v72 = vextq_s8(v70, v70, 8uLL);
          v73 = (float32x4_t)vbslq_s8((int8x16_t)v53, v71, v68);
          v74 = (float32x4_t)vbslq_s8((int8x16_t)v53, v72, v62);
          v48.i64[0] = vsubq_f32(v48, v73).u64[0];
          v75.i64[0] = vsubq_f32(v50, v74).u64[0];
          v48.i64[1] = v73.i64[1];
          v75.i64[1] = v74.i64[1];
          v76 = (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)v55, v71);
          v77 = vbslq_s8(v41, (int8x16_t)vmulq_f32(v48, v48), (int8x16_t)v48);
          v78 = vbslq_s8(v41, (int8x16_t)vmulq_f32(v75, v75), (int8x16_t)v75);
          *(float32x2_t *)v74.f32 = vadd_f32(vmul_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)v77.i8), (float32x2_t)vrev64_s32(*(int32x2_t *)v77.i8));
          *(float32x2_t *)v73.f32 = vadd_f32(vmul_f32(*(float32x2_t *)v78.i8, *(float32x2_t *)v78.i8), (float32x2_t)vrev64_s32(*(int32x2_t *)v78.i8));
          v75.i64[0] = vextq_s8(v78, v78, 8uLL).u64[0];
          v74.i64[1] = vextq_s8(v77, v77, 8uLL).u64[0];
          v80 = *(int8x16_t *)(v15 + 256);
          v79 = *(float32x4_t *)(v15 + 272);
          *(int8x8_t *)v81.f32 = vqtbl1_s8((int8x16_t)v74, *(int8x8_t *)v80.i8);
          v78.i64[0] = vextq_s8(v80, v80, 8uLL).u64[0];
          v73.i64[1] = v75.i64[0];
          *(int8x8_t *)&v81.u32[2] = vqtbl1_s8((int8x16_t)v74, *(int8x8_t *)v78.i8);
          v82 = (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)v56, v72);
          *(int8x8_t *)v74.f32 = vqtbl1_s8((int8x16_t)v73, *(int8x8_t *)v80.i8);
          *(int8x8_t *)&v74.u32[2] = vqtbl1_s8((int8x16_t)v73, *(int8x8_t *)v78.i8);
          v83 = vminq_f32(vrsqrteq_f32(v81), v29);
          v84 = vminq_f32(vrsqrteq_f32(v74), v29);
          v85 = vminq_f32(vmulq_f32(v83, vrsqrtsq_f32(vmulq_f32(v81, v83), v83)), v29);
          v86 = vminq_f32(vmulq_f32(v84, vrsqrtsq_f32(vmulq_f32(v74, v84), v84)), v29);
          v87 = vmulq_f32(v81, vminq_f32(vmulq_f32(v85, vrsqrtsq_f32(vmulq_f32(v81, v85), v85)), v29));
          v88 = vmulq_f32(v74, vminq_f32(vmulq_f32(v86, vrsqrtsq_f32(vmulq_f32(v74, v86), v86)), v29));
          v89 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v15);
          v90 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_lane_f32(v18, (float32x2_t)*(_OWORD *)&vsubq_f32(v89, v87), 1), v52), v40);
          *(int8x8_t *)v75.f32 = vext_s8(*(int8x8_t *)v90.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL), 4uLL);
          v91 = vextq_s8((int8x16_t)v87, v90, 0xCuLL).u64[0];
          v90.i64[1] = v87.i64[1];
          v92 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_lane_f32(v18, (float32x2_t)*(_OWORD *)&vsubq_f32(v89, v88), 1), v52), v40);
          *(int8x8_t *)v93.f32 = vext_s8(*(int8x8_t *)v92.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL), 4uLL);
          v84.i64[0] = vextq_s8((int8x16_t)v88, v92, 0xCuLL).u64[0];
          v92.i64[1] = v88.i64[1];
          v75.i64[1] = v91;
          v93.i64[1] = v84.i64[0];
          v88.i64[0] = vbslq_s8((int8x16_t)v53, v90, (int8x16_t)vminq_f32(vmaxq_f32(vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)v53, v90, (int8x16_t)vsubq_f32(v89, v75)), v18.f32[0]), v52), v40)).u64[0];
          v94.i64[0] = vbslq_s8((int8x16_t)v53, v92, (int8x16_t)vminq_f32(vmaxq_f32(vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)v53, v92, (int8x16_t)vsubq_f32(v89, v93)), v18.f32[0]), v52), v40)).u64[0];
          v88.i64[1] = vsubq_f32(v26, vmulq_f32(v25, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v88, 0))).i64[1];
          v94.i64[1] = vsubq_f32(v26, vmulq_f32(v25, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v94, 0))).i64[1];
          v95 = vbslq_s8((int8x16_t)v53, (int8x16_t)vmulq_f32(v88, v88), (int8x16_t)v88);
          v96 = vbslq_s8((int8x16_t)v53, (int8x16_t)vmulq_f32(v94, v94), (int8x16_t)v94);
          v97 = (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v96, v96, 4uLL), *(float *)v96.i32);
          v98 = vbslq_s8(v41, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v95, v95, 4uLL), *(float *)v95.i32), v27);
          v99 = *(float32x4_t *)(v15 + 288);
          v100 = *(int8x16_t *)(v15 + 304);
          v65.i64[1] = vbslq_s8(v28, (int8x16_t)vmulq_lane_f32((float32x4_t)vextq_s8(v95, v95, 0xCuLL), *(float32x2_t *)&v95, 1), (int8x16_t)vsubq_f32(v79, vmulq_f32(v99, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v95, 0)))).i64[1];
          v67.i64[1] = vbslq_s8(v28, (int8x16_t)vmulq_lane_f32((float32x4_t)vextq_s8(v95, v96, 0xCuLL), *(float32x2_t *)&v96, 1), (int8x16_t)vsubq_f32(v79, vmulq_f32(v99, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v96, 0)))).i64[1];
          v101 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v65, v65), (int8x16_t)v65);
          v102 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v67, v67), (int8x16_t)v67);
          v103 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v101, v101)), v101);
          v104 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v102, v102)), v102);
          v105 = vminq_f32(vrsqrteq_f32(v103), v99);
          v106 = vminq_f32(vrsqrteq_f32(v104), v99);
          v107 = vmulq_f32(v105, vrsqrtsq_f32(vmulq_f32(v105, v103), v105));
          v108 = vbslq_s8(v41, v97, v34);
          v109 = vminq_f32(v107, v99);
          v110 = vminq_f32(vmulq_f32(v106, vrsqrtsq_f32(vmulq_f32(v106, v104), v106)), v99);
          v103.i64[0] = vsubq_f32(v89, vmulq_f32(vminq_f32(vmulq_f32(v109, vrsqrtsq_f32(vmulq_f32(v109, v103), v109)), v99), v103)).u64[0];
          v109.i64[0] = vsubq_f32(v89, vmulq_f32(vminq_f32(vmulq_f32(v110, vrsqrtsq_f32(vmulq_f32(v110, v104), v110)), v99), v104)).u64[0];
          v103.i64[1] = v54.i64[1];
          v109.i64[1] = v54.i64[1];
          v103.i64[0] = vminq_f32(vmaxq_f32(vmulq_n_f32(v103, v18.f32[0]), v79), v40).u64[0];
          v109.i64[0] = vminq_f32(vmaxq_f32(vmulq_n_f32(v109, v18.f32[0]), v79), v40).u64[0];
          v103.i64[1] = v54.i64[1];
          v111 = (int8x16_t)vsubq_f32((float32x4_t)v49, v76);
          v112 = (int8x16_t)vsubq_f32((float32x4_t)v51, v82);
          v109.i64[1] = v54.i64[1];
          v113 = (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v101, 0xCuLL), v101, 2), (int8x16_t)v103);
          v114 = (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 0xCuLL), v102, 2), (int8x16_t)v109);
          v115 = (int8x16_t)vmulq_lane_f32((float32x4_t)vextq_s8(v112, v112, 8uLL), *(float32x2_t *)v112.i8, 1);
          v116 = (int8x16_t)vaddq_f32(vmulq_n_f32((float32x4_t)vextq_s8(v111, v111, 4uLL), *(float *)v111.i32), (float32x4_t)vbslq_s8(v100, (int8x16_t)vmulq_lane_f32((float32x4_t)vextq_s8(v111, v111, 8uLL), *(float32x2_t *)v111.i8, 1), v49));
          v117 = vmulq_n_f32((float32x4_t)vextq_s8(v112, v112, 4uLL), *(float *)v112.i32);
          v119 = *(float32x4_t *)(v15 + 32);
          v118 = *(float32x4_t *)(v15 + 48);
          v120 = (float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v100, v116, v49));
          v121 = (float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v100, (int8x16_t)vaddq_f32(v117, (float32x4_t)vbslq_s8(v100, v115, v51)), v51));
          v122 = vminq_f32(vrsqrteq_f32(v120), v99);
          v123 = vminq_f32(vrsqrteq_f32(v121), v99);
          v124 = vminq_f32(vmulq_f32(v122, vrsqrtsq_f32(vmulq_f32(v122, v120), v122)), v99);
          v125 = vbslq_s8(v41, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v113, v113), (int8x16_t)v113), (float32x4_t)vbslq_s8(v100, (int8x16_t)vsubq_f32(v79, vmulq_lane_f32(v99, *(float32x2_t *)v113.f32, 1)), v49), 3), (int8x16_t)v113);
          v126 = vminq_f32(vmulq_f32(v123, vrsqrtsq_f32(vmulq_f32(v123, v121), v123)), v99);
          v127 = vbslq_s8(v41, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v114, v114), (int8x16_t)v114), (float32x4_t)vbslq_s8(v100, (int8x16_t)vsubq_f32(v79, vmulq_lane_f32(v99, *(float32x2_t *)v114.f32, 1)), v51), 3), (int8x16_t)v114);
          v128 = (int8x16_t)vmulq_f32(v126, vrsqrtsq_f32(vmulq_f32(v126, v121), v126));
          v129 = (float32x4_t)vbslq_s8(v28, (int8x16_t)vmulq_f32(v124, vrsqrtsq_f32(vmulq_f32(v124, v120), v124)), v125);
          v130 = (float32x4_t)vbslq_s8(v28, v128, v127);
          v131 = (float32x4_t)vbslq_s8(v100, (int8x16_t)v129, v49);
          v132 = (float32x4_t)vbslq_s8(v100, (int8x16_t)v130, v51);
          v131.i64[0] = vsubq_f32(v131, (float32x4_t)vdupq_laneq_s64((int64x2_t)v131, 1)).u64[0];
          v133 = vminq_f32(vmaxq_f32(vrecpeq_f32(v129), v79), v29);
          v134 = vminq_f32(vmaxq_f32(vrecpeq_f32(v130), v79), v29);
          v132.i64[0] = vsubq_f32(v132, (float32x4_t)vdupq_laneq_s64((int64x2_t)v132, 1)).u64[0];
          v135 = vmulq_f32(v133, vrecpsq_f32(v129, v133));
          v136 = vmulq_f32(v134, vrecpsq_f32(v130, v134));
          v137 = vsubq_f32(v119, v31);
          v138 = vaddq_f32(v31, vmulq_n_f32(v137, v113.f32[0]));
          v139 = vminq_f32(vmaxq_f32(v135, v79), v29);
          v140 = vminq_f32(vmaxq_f32(v136, v79), v29);
          v141 = vaddq_f32(v138, vmulq_lane_f32(vsubq_f32(v119, v138), *(float32x2_t *)v98.i8, 1));
          v131.i64[1] = vmulq_f32(v139, vrecpsq_f32(v129, v139)).i64[1];
          v132.i64[1] = vmulq_f32(v140, vrecpsq_f32(v130, v140)).i64[1];
          v142 = vaddq_f32(v141, vmulq_lane_f32(vsubq_f32(v118, v141), *(float32x2_t *)v125.i8, 1));
          v143 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v131, v131), (int8x16_t)v131);
          v144 = (float32x4_t)vbslq_s8(v41, (int8x16_t)vmulq_f32(v132, v132), (int8x16_t)v132);
          v131.i64[0] = vaddq_f32(vmulq_f32(v143, v143), (float32x4_t)vrev64q_s32((int32x4_t)v143)).u64[0];
          v145 = (float32x4_t)vextq_s8(*(int8x16_t *)v15, *(int8x16_t *)v15, 8uLL);
          v132.i64[0] = vaddq_f32(vmulq_f32(v144, v144), (float32x4_t)vrev64q_s32((int32x4_t)v144)).u64[0];
          v146 = vsubq_f32(v145, v143);
          v147 = vsubq_f32(v145, v144);
          v131.i64[1] = v146.i64[1];
          v132.i64[1] = v147.i64[1];
          v148 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
          v149 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_laneq_f32(v148, v146, 2), v79), v40);
          v150 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_laneq_f32(v148, v147, 2), v79), v40);
          v151 = (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)v131, v149);
          v152 = (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)v132, v150);
          v153 = vminq_f32(vrsqrteq_f32(v151), v99);
          v154 = vminq_f32(vrsqrteq_f32(v152), v99);
          v155 = vminq_f32(vmulq_f32(v153, vrsqrtsq_f32(vmulq_f32(v153, v151), v153)), v99);
          v156 = vminq_f32(vmulq_f32(v154, vrsqrtsq_f32(vmulq_f32(v154, v152), v154)), v99);
          v11 = 0uLL;
          v157 = (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)vsubq_f32(*(float32x4_t *)v15, (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v155, vrsqrtsq_f32(vmulq_f32(v155, v151), v155)), v99), v151), v149)), v149);
          v158 = (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)vsubq_f32(*(float32x4_t *)v15, (float32x4_t)vbslq_s8((int8x16_t)v53, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v156, vrsqrtsq_f32(vmulq_f32(v156, v152), v156)), v99), v152), v150)), v150);
          v159 = (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL);
          v160 = *(float32x4_t *)(v15 + 320);
          v161 = *(float32x4_t *)(v15 + 336);
          v129.i64[1] = vminq_f32(vmaxq_f32(vmulq_n_f32(v159, *(float *)&v157), v160), v161).i64[1];
          v130.i64[1] = vminq_f32(vmaxq_f32(vmulq_n_f32(v159, *(float *)&v158), v160), v161).i64[1];
          v162 = vsubq_f32(v161, vmulq_f32(v160, (float32x4_t)vextq_s8((int8x16_t)v157, (int8x16_t)v158, 0xCuLL)));
          v157.i64[1] = vsubq_f32(v161, vmulq_f32(v160, (float32x4_t)vextq_s8(*(int8x16_t *)&v157, *(int8x16_t *)&v157, 0xCuLL))).i64[1];
          v158.i64[1] = v162.i64[1];
          v53.i64[0] = vmulq_f32(v157, v157).u64[0];
          v155.i64[0] = vmulq_f32(v158, v158).u64[0];
          v53.i64[1] = v157.i64[1];
          v155.i64[1] = v162.i64[1];
          v163 = (int8x16_t)vmulq_lane_f32(v53, *(float32x2_t *)v53.f32, 1);
          v164 = (int8x16_t)vmulq_lane_f32(v155, *(float32x2_t *)v155.f32, 1);
          v165 = vsubq_f32(v118, v31);
          v166 = (float32x4_t)vbslq_s8(v28, v163, (int8x16_t)v129);
          v168 = *(float32x4_t *)(v15 + 352);
          v167 = *(int8x16_t *)(v15 + 368);
          v169 = (float32x4_t)vbslq_s8(v28, v164, (int8x16_t)v130);
          v6 = v58;
          v99.i64[0] = vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL).u64[0];
          *(float32x2_t *)v164.i8 = vmul_f32((float32x2_t)vqtbl1_s8(v98, *(int8x8_t *)v80.i8), (float32x2_t)vqtbl1_s8(v98, *(int8x8_t *)v168.f32));
          *(float32x2_t *)v162.f32 = vmul_f32((float32x2_t)vqtbl1_s8(v98, *(int8x8_t *)v78.i8), (float32x2_t)vqtbl1_s8(v98, *(int8x8_t *)v99.f32));
          *(float32x2_t *)v80.i8 = vmul_f32((float32x2_t)vqtbl1_s8(v108, *(int8x8_t *)v80.i8), (float32x2_t)vqtbl1_s8(v108, *(int8x8_t *)v168.f32));
          *(float32x2_t *)v78.i8 = vmul_f32((float32x2_t)vqtbl1_s8(v108, *(int8x8_t *)v78.i8), (float32x2_t)vqtbl1_s8(v108, *(int8x8_t *)v99.f32));
          v164.i64[1] = v162.i64[0];
          *(int8x8_t *)v162.f32 = vqtbl1_s8(v164, *(int8x8_t *)v167.i8);
          v99.i64[0] = vextq_s8(v167, v167, 8uLL).u64[0];
          v170 = vaddq_f32(v31, vmulq_laneq_f32(v165, v166, 2));
          *(int8x8_t *)&v162.u32[2] = vqtbl1_s8(v164, *(int8x8_t *)v99.f32);
          v80.i64[1] = v78.i64[0];
          *(int8x8_t *)v168.f32 = vqtbl1_s8(v80, *(int8x8_t *)v167.i8);
          *(int8x8_t *)&v168.u32[2] = vqtbl1_s8(v80, *(int8x8_t *)v99.f32);
          v171 = vcvtq_f32_s32(vcvtq_s32_f32(v162));
          v172 = vcvtq_f32_s32(vcvtq_s32_f32(v168));
          v173 = (float32x4_t)vbslq_s8(v100, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v100, (int8x16_t)vmulq_f32(v166, v166), (int8x16_t)v166), vsubq_f32(v161, vmulq_laneq_f32(v160, v166, 3)).f32[0]), (int8x16_t)v166);
          v174 = (int8x16_t)vcgtq_f32(v171, v162);
          v175 = (int8x16_t)vcgtq_f32(v172, v168);
          v176 = *(float32x4_t *)(v15 + 384);
          v177 = *(int8x16_t *)(v15 + 400);
          v178 = (int32x4_t)vsubq_f32(v171, (float32x4_t)vandq_s8((int8x16_t)v176, v174));
          v179 = (int32x4_t)vsubq_f32(v172, (float32x4_t)vandq_s8((int8x16_t)v176, v175));
          v180 = vaddq_f32(v170, vmulq_laneq_f32(vsubq_f32(v118, v170), v173, 3));
          v181 = (float32x4_t)vbslq_s8(v177, (int8x16_t)v178, (int8x16_t)vmulq_f32(v176, (float32x4_t)vrev64q_s32(v178)));
          v182 = (float32x4_t)vbslq_s8(v177, (int8x16_t)v179, (int8x16_t)vmulq_f32(v176, (float32x4_t)vrev64q_s32(v179)));
          v183 = vcvtq_f32_s32(vcvtq_s32_f32(v181));
          v184 = (int8x16_t)vsubq_f32(v183, (float32x4_t)vandq_s8((int8x16_t)v161, (int8x16_t)vcgtq_f32(v183, v181)));
          v185 = vcvtq_f32_s32(vcvtq_s32_f32(v182));
          v186 = (float32x4_t)vbslq_s8(v177, (int8x16_t)v178, v184);
          v187 = vaddq_f32(v142, vmulq_laneq_f32(vsubq_f32(v119, v142), v173, 3));
          v188 = (float32x4_t)vbslq_s8(v177, (int8x16_t)v179, (int8x16_t)vsubq_f32(v185, (float32x4_t)vandq_s8((int8x16_t)v161, (int8x16_t)vcgtq_f32(v185, v182))));
          v189 = (int8x16_t)vaddq_f32(v187, vmulq_laneq_f32(vsubq_f32(v119, v187), v173, 2));
          v191 = *(int8x16_t *)(v15 + 416);
          v190 = *(float32x4_t *)(v15 + 432);
          v192 = vaddq_f32(v180, vmulq_lane_f32(vsubq_f32(v119, v180), *(float32x2_t *)v173.f32, 1));
          v193 = (int32x4_t)vorrq_s8(v191, (int8x16_t)vsubq_f32(v186, vmulq_lane_f32((float32x4_t)vrev64q_s32((int32x4_t)v186), *(float32x2_t *)v160.f32, 1)));
          v194 = (float32x4_t)vandq_s8((int8x16_t)v40, (int8x16_t)vcgeq_f32((float32x4_t)vuzp1q_s32(v193, vrev64q_s32(v193)), v79));
          v195 = vaddq_f32(v192, vmulq_n_f32(vsubq_f32(v118, v192), v173.f32[0]));
          v196 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8((int8x16_t)v176, (int8x16_t)vcgeq_f32((float32x4_t)vorrq_s8(v191, (int8x16_t)vsubq_f32(v194, (float32x4_t)vrev64q_s32((int32x4_t)v194))), v79)), 0), v190), (int8x16_t)vaddq_f32(v195, vmulq_lane_f32(vsubq_f32(v118, v195), *(float32x2_t *)v98.i8, 1)), v189);
          v197 = vaddq_f32(v31, vmulq_n_f32(v137, v114.f32[0]));
          v198 = vaddq_f32(v197, vmulq_lane_f32(vsubq_f32(v119, v197), *(float32x2_t *)v108.i8, 1));
          v199 = (float32x4_t)vbslq_s8(v100, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v100, (int8x16_t)vmulq_f32(v169, v169), (int8x16_t)v169), vsubq_f32(v161, vmulq_laneq_f32(v160, v169, 3)).f32[0]), (int8x16_t)v169);
          v200 = vaddq_f32(v31, vmulq_laneq_f32(v165, v169, 2));
          v201 = vaddq_f32(v198, vmulq_lane_f32(vsubq_f32(v118, v198), *(float32x2_t *)v127.i8, 1));
          v202 = vaddq_f32(v200, vmulq_laneq_f32(vsubq_f32(v118, v200), v199, 3));
          v203 = vaddq_f32(v201, vmulq_laneq_f32(vsubq_f32(v119, v201), v199, 3));
          v204 = (int32x4_t)vorrq_s8(v191, (int8x16_t)vsubq_f32(v188, vmulq_lane_f32((float32x4_t)vrev64q_s32((int32x4_t)v188), *(float32x2_t *)v160.f32, 1)));
          v205 = vaddq_f32(v202, vmulq_lane_f32(vsubq_f32(v119, v202), *(float32x2_t *)v199.f32, 1));
          v206 = (float32x4_t)vandq_s8((int8x16_t)v40, (int8x16_t)vcgeq_f32((float32x4_t)vuzp1q_s32(v204, vrev64q_s32(v204)), v79));
          v207 = vaddq_f32(v205, vmulq_n_f32(vsubq_f32(v118, v205), v199.f32[0]));
          v208 = (int8x16_t *)(*(_QWORD *)&v8 + 16 * v12);
          *v208 = v196;
          v208[1] = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8((int8x16_t)v176, (int8x16_t)vcgeq_f32((float32x4_t)vorrq_s8(v191, (int8x16_t)vsubq_f32(v206, (float32x4_t)vrev64q_s32((int32x4_t)v206))), v79)), 0), v190), (int8x16_t)vaddq_f32(v207, vmulq_lane_f32(vsubq_f32(v118, v207), *(float32x2_t *)v108.i8, 1)), (int8x16_t)vaddq_f32(v203, vmulq_laneq_f32(vsubq_f32(v119, v203), v199, 2)));
          v14 = vaddq_f32(v310, v58);
          v12 += 2;
          v13 -= 2;
        }
        while (v13 > 1);
        v12 = v12;
        v7 = (float32x4_t)xmmword_1B304F240;
        v9 = v309;
      }
      if ((int)v12 < v5)
      {
        v209 = *(_QWORD *)(a1 + 408);
        v210 = *(float32x4_t *)(v209 + 112);
        v211 = vmulq_f32(v14, *(float32x4_t *)(v209 + 96));
        v212 = vaddq_f32(v211, (float32x4_t)vextq_s8((int8x16_t)v211, (int8x16_t)v211, 4uLL));
        v213 = *(int8x16_t *)(v209 + 16);
        v214 = (float32x4_t)vextq_s8(v213, v213, 4uLL);
        v215 = *(float32x4_t *)(v209 + 128);
        v216 = *(float32x4_t *)(v209 + 144);
        v218 = *(float32x4_t *)(v209 + 160);
        v217 = *(float32x4_t *)(v209 + 176);
        v219 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v214), v215), v216), v218);
        v220 = vbslq_s8((int8x16_t)v217, (int8x16_t)vaddq_f32(v212, (float32x4_t)vdupq_lane_s64(v212.i64[0], 0)), (int8x16_t)vmulq_f32(v219, vrecpsq_f32(v214, v219)));
        v221 = *(float32x4_t *)(v209 + 64);
        v222 = vmulq_f32(v14, *(float32x4_t *)(v209 + 80));
        v223 = vaddq_f32(v222, (float32x4_t)vextq_s8((int8x16_t)v222, (int8x16_t)v222, 4uLL));
        v223.i64[0] = vaddq_f32(v223, (float32x4_t)vdupq_laneq_s64((int64x2_t)v223, 1)).u64[0];
        v223.i64[1] = v220.i64[1];
        v225 = *(int8x16_t *)(v209 + 192);
        v224 = *(float32x4_t *)(v209 + 208);
        v226 = (float32x4_t)vbslq_s8(v225, vextq_s8((int8x16_t)v223, (int8x16_t)v223, 4uLL), (int8x16_t)v223);
        v227 = vmulq_laneq_f32(v226, v226, 3);
        v228 = vcvtq_f32_s32(vcvtq_s32_f32(v227));
        v229 = vsubq_f32(v226, vmulq_n_f32(vsubq_f32(v228, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v228, v227), (int8x16_t)v216, v11)), *(float *)v213.i32));
        v230.i64[0] = v229.i64[0];
        v230.i64[1] = vmulq_n_f32(v224, *(float *)&v213).i64[1];
        v231 = *(float32x4_t *)(v209 + 224);
        v232 = *(float32x4_t *)(v209 + 240);
        v233 = (int8x16_t)vmulq_n_f32(v231, *(float *)v213.i32);
        v234 = (float32x4_t)vextq_s8(v230, v230, 8uLL);
        v235 = vsubq_f32((float32x4_t)v230, (float32x4_t)vbslq_s8((int8x16_t)v232, vextq_s8(v233, v233, 8uLL), (int8x16_t)v234));
        v236 = (float32x4_t)vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL);
        v237 = (int8x16_t)vmulq_f32(v235, v235);
        v238 = (float32x4_t)vbslq_s8((int8x16_t)v217, (int8x16_t)v236, vextq_s8(v237, v237, 8uLL));
        v236.i64[0] = v234.i64[0];
        v236.i64[1] = vaddq_f32(vmulq_f32(v238, v238), (float32x4_t)vrev64q_s32(*(int32x4_t *)&v238)).i64[1];
        v239 = (int8x16_t)vnegq_f32((float32x4_t)v230);
        v240 = vextq_s8(v239, v239, 8uLL);
        v241 = (float32x4_t)vbslq_s8((int8x16_t)v232, v240, (int8x16_t)v236);
        v236.i64[0] = vsubq_f32(v229, v241).u64[0];
        v236.i64[1] = v241.i64[1];
        v229.i64[0] = vsubq_f32(v229, v234).u64[0];
        v242 = vbslq_s8(v225, (int8x16_t)vmulq_f32(v236, v236), (int8x16_t)v236);
        *(float32x2_t *)v243.i8 = vadd_f32(vmul_f32(*(float32x2_t *)v242.i8, *(float32x2_t *)v242.i8), (float32x2_t)vrev64_s32(*(int32x2_t *)v242.i8));
        v243.i64[1] = vextq_s8(v242, v242, 8uLL).u64[0];
        v245 = *(int8x16_t *)(v209 + 256);
        v244 = *(float32x4_t *)(v209 + 272);
        *(int8x8_t *)v246.f32 = vqtbl1_s8(v243, *(int8x8_t *)v245.i8);
        v247 = (int8x8_t)vextq_s8(v245, v245, 8uLL).u64[0];
        *(int8x8_t *)&v246.u32[2] = vqtbl1_s8(v243, v247);
        v248 = vminq_f32(vrsqrteq_f32(v246), v218);
        v249 = vminq_f32(vmulq_f32(v248, vrsqrtsq_f32(vmulq_f32(v248, v246), v248)), v218);
        v250 = vmulq_f32(v246, vminq_f32(vmulq_f32(v249, vrsqrtsq_f32(vmulq_f32(v246, v249), v249)), v218));
        v251 = (float32x4_t)vrev64q_s32(*(int32x4_t *)v209);
        v252 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_lane_f32(v210, (float32x2_t)*(_OWORD *)&vsubq_f32(v251, v250), 1), v231), v224);
        *(int8x8_t *)v253.f32 = vext_s8(*(int8x8_t *)v252.i8, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v250, (int8x16_t)v250, 8uLL), 4uLL);
        v254 = vextq_s8((int8x16_t)v250, v252, 0xCuLL).u64[0];
        v252.i64[1] = v250.i64[1];
        v253.i64[1] = v254;
        v231.i64[0] = vbslq_s8((int8x16_t)v232, v252, (int8x16_t)vminq_f32(vmaxq_f32(vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)v232, v252, (int8x16_t)vsubq_f32(v251, v253)), v210.f32[0]), v231), v224)).u64[0];
        v255 = (float32x4_t)vbslq_s8((int8x16_t)v232, (int8x16_t)v234, v240);
        v231.i64[1] = vsubq_f32(v216, vmulq_f32(v215, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v231, 0))).i64[1];
        v256 = vbslq_s8((int8x16_t)v232, (int8x16_t)vmulq_f32(v231, v231), (int8x16_t)v231);
        v257 = vbslq_s8(v225, (int8x16_t)vmulq_n_f32((float32x4_t)vextq_s8(v256, v256, 4uLL), *(float *)v256.i32), (int8x16_t)v223);
        v259 = *(float32x4_t *)(v209 + 288);
        v258 = *(int8x16_t *)(v209 + 304);
        v229.i64[1] = vbslq_s8(*(int8x16_t *)&v217, (int8x16_t)vmulq_lane_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v223, v256, 0xCuLL), *(float32x2_t *)&v256, 1), (int8x16_t)vsubq_f32(v244, vmulq_f32(v259, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v256, 0)))).i64[1];
        v260 = (float32x4_t)vbslq_s8(v225, (int8x16_t)vmulq_f32(v229, v229), (int8x16_t)v229);
        v261 = vaddq_f32((float32x4_t)vrev64q_s32((int32x4_t)vmulq_f32(v260, v260)), v260);
        v262 = vminq_f32(vrsqrteq_f32(v261), v259);
        v263 = vminq_f32(vmulq_f32(v262, vrsqrtsq_f32(vmulq_f32(v262, v261), v262)), v259);
        v261.i64[0] = vsubq_f32(v251, vmulq_f32(vminq_f32(vmulq_f32(v263, vrsqrtsq_f32(vmulq_f32(v263, v261), v263)), v259), v261)).u64[0];
        v261.i64[1] = v233.i64[1];
        v261.i64[0] = vminq_f32(vmaxq_f32(vmulq_n_f32(v261, v210.f32[0]), v244), v224).u64[0];
        v261.i64[1] = v233.i64[1];
        v264 = (int8x16_t)vsubq_f32((float32x4_t)v230, v255);
        v265 = (float32x4_t)vbslq_s8((int8x16_t)v232, (int8x16_t)vmulq_laneq_f32((float32x4_t)vextq_s8((int8x16_t)v260, (int8x16_t)v260, 0xCuLL), v260, 2), (int8x16_t)v261);
        v266 = *(float32x4_t *)(v209 + 32);
        v267 = *(float32x4_t *)(v209 + 48);
        v268 = vaddq_f32(v221, vmulq_n_f32(vsubq_f32(v266, v221), v265.f32[0]));
        v269 = vaddq_f32(v268, vmulq_lane_f32(vsubq_f32(v266, v268), *(float32x2_t *)v257.i8, 1));
        v270 = vbslq_s8(v225, (int8x16_t)vmulq_laneq_f32((float32x4_t)vbslq_s8(v225, (int8x16_t)vmulq_f32(v265, v265), (int8x16_t)v265), (float32x4_t)vbslq_s8(v258, (int8x16_t)vsubq_f32(v244, vmulq_lane_f32(v259, *(float32x2_t *)v265.f32, 1)), v230), 3), (int8x16_t)v265);
        v271 = vaddq_f32(v269, vmulq_lane_f32(vsubq_f32(v267, v269), *(float32x2_t *)v270.i8, 1));
        v272 = (float32x4_t)vrev64q_s32((int32x4_t)vbslq_s8(v258, (int8x16_t)vaddq_f32(vmulq_n_f32((float32x4_t)vextq_s8(v264, v264, 4uLL), *(float *)v264.i32), (float32x4_t)vbslq_s8(v258, (int8x16_t)vmulq_lane_f32((float32x4_t)vextq_s8(v264, v264, 8uLL), *(float32x2_t *)v264.i8, 1), v230)), v230));
        v273 = vminq_f32(vrsqrteq_f32(v272), v259);
        v274 = vminq_f32(vmulq_f32(v273, vrsqrtsq_f32(vmulq_f32(v273, v272), v273)), v259);
        v275 = (float32x4_t)vbslq_s8((int8x16_t)v217, (int8x16_t)vmulq_f32(v274, vrsqrtsq_f32(vmulq_f32(v274, v272), v274)), v270);
        v276 = (float32x4_t)vbslq_s8(v258, (int8x16_t)v275, v230);
        v276.i64[0] = vsubq_f32(v276, (float32x4_t)vdupq_laneq_s64((int64x2_t)v276, 1)).u64[0];
        v277 = vminq_f32(vmaxq_f32(vrecpeq_f32(v275), v244), v218);
        v278 = vminq_f32(vmaxq_f32(vmulq_f32(v277, vrecpsq_f32(v275, v277)), v244), v218);
        v276.i64[1] = vmulq_f32(v278, vrecpsq_f32(v275, v278)).i64[1];
        v279 = (float32x4_t)vbslq_s8(v225, (int8x16_t)vmulq_f32(v276, v276), (int8x16_t)v276);
        v278.i64[0] = vaddq_f32(vmulq_f32(v279, v279), (float32x4_t)vrev64q_s32((int32x4_t)v279)).u64[0];
        v280 = vsubq_f32((float32x4_t)vdupq_lane_s64(*(_QWORD *)v209, 0), v279);
        v278.i64[1] = v280.i64[1];
        v281 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_laneq_f32((float32x4_t)vrev64q_s32((int32x4_t)v210), v280, 2), v244), v224);
        v282 = (float32x4_t)vbslq_s8((int8x16_t)v232, (int8x16_t)v278, v281);
        v283 = vminq_f32(vrsqrteq_f32(v282), v259);
        v284 = vminq_f32(vmulq_f32(v283, vrsqrtsq_f32(vmulq_f32(v283, v282), v283)), v259);
        v285 = (float32x4_t)vbslq_s8((int8x16_t)v232, (int8x16_t)vsubq_f32(*(float32x4_t *)v209, (float32x4_t)vbslq_s8((int8x16_t)v232, (int8x16_t)vmulq_f32(vminq_f32(vmulq_f32(v284, vrsqrtsq_f32(vmulq_f32(v284, v282), v284)), v259), v282), v281)), v281);
        v286 = *(float32x4_t *)(v209 + 320);
        v287 = *(float32x4_t *)(v209 + 336);
        v275.i64[1] = vminq_f32(vmaxq_f32(vmulq_n_f32((float32x4_t)vextq_s8(*(int8x16_t *)&v210, *(int8x16_t *)&v210, 4uLL), *(float *)&v285), v286), v287).i64[1];
        v285.i64[1] = vsubq_f32(v287, vmulq_f32(v286, (float32x4_t)vextq_s8(*(int8x16_t *)&v275, *(int8x16_t *)&v285, 0xCuLL))).i64[1];
        v232.i64[0] = vmulq_f32(v285, v285).u64[0];
        v232.i64[1] = v285.i64[1];
        v288 = (float32x4_t)vbslq_s8((int8x16_t)v217, (int8x16_t)vmulq_lane_f32(v232, *(float32x2_t *)v232.f32, 1), (int8x16_t)v275);
        v289 = vaddq_f32(v221, vmulq_laneq_f32(vsubq_f32(v267, v221), v288, 2));
        v290 = (float32x4_t)vbslq_s8(v258, (int8x16_t)vmulq_n_f32((float32x4_t)vbslq_s8(v258, (int8x16_t)vmulq_f32(v288, v288), (int8x16_t)v288), vsubq_f32(v287, vmulq_laneq_f32(v286, v288, 3)).f32[0]), (int8x16_t)v288);
        v291 = vaddq_f32(v289, vmulq_laneq_f32(vsubq_f32(v267, v289), v290, 3));
        v292 = vaddq_f32(v271, vmulq_laneq_f32(vsubq_f32(v266, v271), v290, 3));
        v293 = (int8x16_t)vaddq_f32(v292, vmulq_laneq_f32(vsubq_f32(v266, v292), v290, 2));
        v294 = vaddq_f32(v291, vmulq_lane_f32(vsubq_f32(v266, v291), *(float32x2_t *)v290.f32, 1));
        v295 = *(int8x16_t *)(v209 + 352);
        v296 = *(int8x16_t *)(v209 + 368);
        *(float32x2_t *)v291.f32 = vmul_f32((float32x2_t)vqtbl1_s8(v257, *(int8x8_t *)v245.i8), (float32x2_t)vqtbl1_s8(v257, *(int8x8_t *)v295.i8));
        *(float32x2_t *)&v291.u32[2] = vmul_f32((float32x2_t)vqtbl1_s8(v257, v247), (float32x2_t)vqtbl1_s8(v257, (int8x8_t)*(_OWORD *)&vextq_s8(v295, v295, 8uLL)));
        *(int8x8_t *)v217.f32 = vqtbl1_s8((int8x16_t)v291, *(int8x8_t *)v296.i8);
        *(int8x8_t *)&v217.u32[2] = vqtbl1_s8((int8x16_t)v291, (int8x8_t)*(_OWORD *)&vextq_s8(v296, v296, 8uLL));
        v297 = vcvtq_f32_s32(vcvtq_s32_f32(v217));
        v298 = *(float32x4_t *)(v209 + 384);
        v299 = *(int8x16_t *)(v209 + 400);
        v300 = (int32x4_t)vsubq_f32(v297, (float32x4_t)vandq_s8((int8x16_t)v298, (int8x16_t)vcgtq_f32(v297, v217)));
        v301 = (float32x4_t)vbslq_s8(v299, (int8x16_t)v300, (int8x16_t)vmulq_f32(v298, (float32x4_t)vrev64q_s32(v300)));
        v302 = vcvtq_f32_s32(vcvtq_s32_f32(v301));
        v303 = (float32x4_t)vbslq_s8(v299, (int8x16_t)v300, (int8x16_t)vsubq_f32(v302, (float32x4_t)vandq_s8((int8x16_t)v287, (int8x16_t)vcgtq_f32(v302, v301))));
        v304 = *(int8x16_t *)(v209 + 416);
        v305 = (int32x4_t)vorrq_s8(v304, (int8x16_t)vsubq_f32(v303, vmulq_lane_f32((float32x4_t)vrev64q_s32((int32x4_t)v303), *(float32x2_t *)v286.f32, 1)));
        v306 = (float32x4_t)vandq_s8((int8x16_t)v224, (int8x16_t)vcgeq_f32((float32x4_t)vuzp1q_s32(v305, vrev64q_s32(v305)), v244));
        v307 = vaddq_f32(v294, vmulq_n_f32(vsubq_f32(v267, v294), v290.f32[0]));
        *(int8x16_t *)(*(_QWORD *)&v8 + 16 * v12) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8((int8x16_t)v298, (int8x16_t)vcgeq_f32((float32x4_t)vorrq_s8(v304, (int8x16_t)vsubq_f32(v306, (float32x4_t)vrev64q_s32((int32x4_t)v306))), v244)), 0), *(float32x4_t *)(v209 + 432)), (int8x16_t)vaddq_f32(v307, vmulq_lane_f32(vsubq_f32(v267, v307), *(float32x2_t *)v257.i8, 1)), v293);
      }
      v9 = vaddq_f32(v9, v7);
      *(_QWORD *)&v8 += v10;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcOverlappingCircles::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcOverlappingCircles::GetROI()
{
  return 0;
}

void HgcOverlappingCircles::HgcOverlappingCircles(HgcOverlappingCircles *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F1BE0;
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 128) = xmmword_1B30531F0;
  *(_OWORD *)(v3 + 144) = xmmword_1B3053200;
  *(int32x4_t *)(v3 + 160) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 176) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 208) = xmmword_1B3052440;
  *(_OWORD *)(v3 + 224) = xmmword_1B3053210;
  *(_OWORD *)(v3 + 240) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 256) = xmmword_1B3053220;
  *(_OWORD *)(v3 + 272) = xmmword_1B3053230;
  *(_OWORD *)(v3 + 288) = xmmword_1B3053240;
  *(_OWORD *)(v3 + 304) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 320) = xmmword_1B3051520;
  *(_OWORD *)(v3 + 336) = xmmword_1B3053250;
  *(_OWORD *)(v3 + 352) = xmmword_1B3053260;
  *(_OWORD *)(v3 + 368) = xmmword_1B3053270;
  *(_QWORD *)&v4 = 0xFFFFFFFFLL;
  *((_QWORD *)&v4 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(v3 + 384) = xmmword_1B3053280;
  *(_OWORD *)(v3 + 400) = v4;
  *(_OWORD *)(v3 + 416) = xmmword_1B3053290;
  *(_QWORD *)(v3 + 432) = 0;
  *(_QWORD *)(v3 + 440) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28B9610(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcOverlappingCircles::~HgcOverlappingCircles(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F1BE0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40502CBA4ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcOverlappingCircles::~HgcOverlappingCircles(this);
  HGObject::operator delete(v1);
}

uint64_t HgcOverlappingCircles::SetParameter(HgcOverlappingCircles *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 7)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcOverlappingCircles::GetParameter(HgcOverlappingCircles *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 7)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcStripes::GetProgram(HgcStripes *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000396\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(-0.2500000000, 1.000000000, -2.000000000, 3.000000000);\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.x = frag._texCoord0.x - hg_Params[0].x;\n"
             "    s0.x = s0.x*hg_Params[4].x;\n"
             "    s0.x = s0.x*hg_Params[3].x + float(c0.x);\n"
             "    s0.x = fract(s0.x);\n"
             "    s1.x = float(c0.y) - s0.x;\n"
             "    s0.x = fmin(s1.x, s0.x);\n"
             "    s0.x = clamp(s0.x*hg_Params[3].y + hg_Params[3].z, 0.00000f, 1.00000f);\n"
             "    s1.x = s0.x*s0.x;\n"
             "    s0.x = s0.x*float(c0.z) + float(c0.w);\n"
             "    s1.x = s1.x*s0.x;\n"
             "    s1 = mix(hg_Params[2], hg_Params[1], s1.xxxx);\n"
             "    s1.xyz = s1.xyz*s1.www;\n"
             "    output.color0 = s1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=cd593903:1395adbb:516858ac:228073c2\n"
             "//SIG=00400000:00000000:00000000:00000000:0001:0005:0002:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000037c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(-0.2500000000, 1.000000000, -2.000000000, 3.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = frag._texCoord0.x - hg_Params[0].x;\n"
             "    r0.x = r0.x*hg_Params[4].x;\n"
             "    r0.x = r0.x*hg_Params[3].x + c0.x;\n"
             "    r0.x = fract(r0.x);\n"
             "    r1.x = c0.y - r0.x;\n"
             "    r0.x = fmin(r1.x, r0.x);\n"
             "    r0.x = clamp(r0.x*hg_Params[3].y + hg_Params[3].z, 0.00000f, 1.00000f);\n"
             "    r1.x = r0.x*r0.x;\n"
             "    r0.x = r0.x*c0.z + c0.w;\n"
             "    r1.x = r1.x*r0.x;\n"
             "    r1 = mix(hg_Params[2], hg_Params[1], r1.xxxx);\n"
             "    r1.xyz = r1.xyz*r1.www;\n"
             "    output.color0 = r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d808b12e:5c6a25c2:eb69d0f7:d2428bf7\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0005:0002:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000431\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(-0.2500000000, 1.000000000, -2.000000000, 3.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.x = hg_TexCoord0.x - hg_ProgramLocal0.x;\n"
           "    r0.x = r0.x*hg_ProgramLocal4.x;\n"
           "    r0.x = r0.x*hg_ProgramLocal3.x + c0.x;\n"
           "    r0.x = fract(r0.x);\n"
           "    r1.x = c0.y - r0.x;\n"
           "    r0.x = min(r1.x, r0.x);\n"
           "    r0.x = clamp(r0.x*hg_ProgramLocal3.y + hg_ProgramLocal3.z, 0.00000, 1.00000);\n"
           "    r1.x = r0.x*r0.x;\n"
           "    r0.x = r0.x*c0.z + c0.w;\n"
           "    r1.x = r1.x*r0.x;\n"
           "    r1 = mix(hg_ProgramLocal2, hg_ProgramLocal1, r1.xxxx);\n"
           "    r1.xyz = r1.xyz*r1.www;\n"
           "    gl_FragColor = r1;\n"
           "}\n"
           "//MD5=37d9f537:dbf71379:d39542ba:055040f7\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0005:0002:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcStripes::InitProgramDescriptor(HgcStripes *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcStripes_hgc_visible", "//Metal1.0     \n//LEN=00000002db\n[[ visible ]] FragmentOut HgcStripes_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(-0.2500000000, 1.000000000, -2.000000000, 3.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = texCoord0.x - hg_Params[0].x;\n"
    "    r0.x = r0.x*hg_Params[4].x;\n"
    "    r0.x = r0.x*hg_Params[3].x + c0.x;\n"
    "    r0.x = fract(r0.x);\n"
    "    r1.x = c0.y - r0.x;\n"
    "    r0.x = fmin(r1.x, r0.x);\n"
    "    r0.x = clamp(r0.x*hg_Params[3].y + hg_Params[3].z, 0.00000f, 1.00000f);\n"
    "    r1.x = r0.x*r0.x;\n"
    "    r0.x = r0.x*c0.z + c0.w;\n"
    "    r1.x = r1.x*r0.x;\n"
    "    r1 = mix(hg_Params[2], hg_Params[1], r1.xxxx);\n"
    "    r1.xyz = r1.xyz*r1.www;\n"
    "    output.color0 = r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28B981C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcStripes");
}

void sub_1B28B982C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28B992C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28B996C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28B9964);
}

_QWORD *HgcStripes::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcStripes [hgc1]");
}

uint64_t HgcStripes::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcStripes::Bind(HgcStripes *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HgcStripes *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcStripes::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int8x16_t *v6;
  float32x4_t v7;
  int8x16_t *v8;
  uint64_t v9;
  int v10;
  int8x16_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = (int8x16_t *)a2[2];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v8 = v6 + 2;
    v9 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 4)
      {
        LODWORD(v52) = 0;
        v12 = v7;
      }
      else
      {
        v10 = 0;
        v11 = v8;
        v12 = v7;
        do
        {
          v13 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          v14 = vaddq_f32(v13, (float32x4_t)xmmword_1B304F230);
          v15 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F230);
          v16 = *(_QWORD *)(a1 + 408);
          v17 = *(float32x4_t *)(v16 + 64);
          v18 = *(float32x4_t *)(v16 + 80);
          v19 = vmulq_f32(vsubq_f32(v12, *(float32x4_t *)v16), v17);
          v20 = vmulq_f32(vsubq_f32(v13, *(float32x4_t *)v16), v17);
          v21 = vmulq_f32(vsubq_f32(v14, *(float32x4_t *)v16), v17);
          v22 = vmulq_f32(vsubq_f32(v15, *(float32x4_t *)v16), v17);
          v24 = *(float32x4_t *)(v16 + 32);
          v23 = *(float32x4_t *)(v16 + 48);
          v25 = vaddq_f32(v18, vmulq_f32(v19, v23));
          v26 = vaddq_f32(v18, vmulq_f32(v20, v23));
          v27 = vaddq_f32(v18, vmulq_f32(v21, v23));
          v28 = vaddq_f32(v18, vmulq_f32(v22, v23));
          v29 = vcvtq_f32_s32(vcvtq_s32_f32(v25));
          v30 = vcvtq_f32_s32(vcvtq_s32_f32(v26));
          v31 = vcvtq_f32_s32(vcvtq_s32_f32(v27));
          v32 = vcvtq_f32_s32(vcvtq_s32_f32(v28));
          v33 = *(float32x4_t *)(v16 + 96);
          v34 = *(float32x4_t *)(v16 + 112);
          v35 = vsubq_f32(v25, vsubq_f32(v29, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v29, v25))));
          v36 = vsubq_f32(v26, vsubq_f32(v30, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v30, v26))));
          v37 = vsubq_f32(v27, vsubq_f32(v31, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v31, v27))));
          v38 = vsubq_f32(v28, vsubq_f32(v32, (float32x4_t)vandq_s8((int8x16_t)v33, (int8x16_t)vcgtq_f32(v32, v28))));
          v39 = (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL);
          v40 = vminq_f32(vmaxq_f32(vaddq_f32(v39, vmulq_lane_f32(vminq_f32(vsubq_f32(v33, v35), v35), *(float32x2_t *)v23.f32, 1)), v34), v33);
          v41 = vminq_f32(vmaxq_f32(vaddq_f32(v39, vmulq_lane_f32(vminq_f32(vsubq_f32(v33, v36), v36), *(float32x2_t *)v23.f32, 1)), v34), v33);
          v42 = vminq_f32(vmaxq_f32(vaddq_f32(v39, vmulq_lane_f32(vminq_f32(vsubq_f32(v33, v37), v37), *(float32x2_t *)v23.f32, 1)), v34), v33);
          v43 = vminq_f32(vmaxq_f32(vaddq_f32(v39, vmulq_lane_f32(vminq_f32(vsubq_f32(v33, v38), v38), *(float32x2_t *)v23.f32, 1)), v34), v33);
          v44 = *(float32x4_t *)(v16 + 128);
          v45 = *(float32x4_t *)(v16 + 144);
          v46 = vsubq_f32(*(float32x4_t *)(v16 + 16), v24);
          v47 = vaddq_f32(v24, vmulq_n_f32(v46, vmulq_f32(vmulq_f32(v40, v40), vaddq_f32(v44, vmulq_f32(v40, v45))).f32[0]));
          v48 = vaddq_f32(v24, vmulq_n_f32(v46, vmulq_f32(vmulq_f32(v41, v41), vaddq_f32(v44, vmulq_f32(v41, v45))).f32[0]));
          v49 = vaddq_f32(v24, vmulq_n_f32(v46, vmulq_f32(vmulq_f32(v42, v42), vaddq_f32(v44, vmulq_f32(v42, v45))).f32[0]));
          v50 = vaddq_f32(v24, vmulq_n_f32(v46, vmulq_f32(vmulq_f32(v43, v43), vaddq_f32(v44, vmulq_f32(v43, v45))).f32[0]));
          v51 = *(int8x16_t *)(v16 + 160);
          v11[-2] = vbslq_s8(v51, (int8x16_t)v47, (int8x16_t)vmulq_laneq_f32(v47, v47, 3));
          v11[-1] = vbslq_s8(v51, (int8x16_t)v48, (int8x16_t)vmulq_laneq_f32(v48, v48, 3));
          *v11 = vbslq_s8(v51, (int8x16_t)v49, (int8x16_t)vmulq_laneq_f32(v49, v49, 3));
          v11[1] = vbslq_s8(v51, (int8x16_t)v50, (int8x16_t)vmulq_laneq_f32(v50, v50, 3));
          v11 += 4;
          v12 = vaddq_f32(v15, (float32x4_t)xmmword_1B304F230);
          v10 -= 4;
        }
        while (v5 + v10 > 3);
        LODWORD(v52) = -v10;
      }
      if ((int)v52 < v5)
      {
        v52 = v52;
        do
        {
          v53 = *(_QWORD *)(a1 + 408);
          v54 = *(float32x4_t *)(v53 + 48);
          v55 = vaddq_f32(*(float32x4_t *)(v53 + 80), vmulq_f32(vmulq_f32(vsubq_f32(v12, *(float32x4_t *)v53), *(float32x4_t *)(v53 + 64)), v54));
          v56 = vcvtq_f32_s32(vcvtq_s32_f32(v55));
          v57 = *(float32x4_t *)(v53 + 96);
          v58 = vsubq_f32(v55, vsubq_f32(v56, (float32x4_t)vandq_s8((int8x16_t)v57, (int8x16_t)vcgtq_f32(v56, v55))));
          v59 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL), vmulq_lane_f32(vminq_f32(vsubq_f32(v57, v58), v58), *(float32x2_t *)v54.f32, 1)), *(float32x4_t *)(v53 + 112)), v57);
          v60 = vaddq_f32(*(float32x4_t *)(v53 + 32), vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v53 + 16), *(float32x4_t *)(v53 + 32)), vmulq_f32(vmulq_f32(v59, v59), vaddq_f32(*(float32x4_t *)(v53 + 128), vmulq_f32(v59, *(float32x4_t *)(v53 + 144)))).f32[0]));
          v6[v52] = vbslq_s8(*(int8x16_t *)(v53 + 160), (int8x16_t)v60, (int8x16_t)vmulq_laneq_f32(v60, v60, 3));
          v12 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          ++v52;
        }
        while (v52 < v5);
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      ++v4;
      v8 = (int8x16_t *)((char *)v8 + v9);
      v6 = (int8x16_t *)((char *)v6 + v9);
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcStripes::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcStripes::GetROI()
{
  return 0;
}

void HgcStripes::HgcStripes(HgcStripes *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F1E48;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = xmmword_1B3053160;
  *(_OWORD *)(v3 + 96) = xmmword_1B304F230;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_OWORD *)(v3 + 128) = xmmword_1B3052B90;
  *(_OWORD *)(v3 + 144) = xmmword_1B3052BA0;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28B9E80(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcStripes::~HgcStripes(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F1E48;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40C3A7E6FCLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcStripes::~HgcStripes(this);
  HGObject::operator delete(v1);
}

uint64_t HgcStripes::SetParameter(HgcStripes *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcStripes::GetParameter(HgcStripes *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcTriangularCheckerboard::GetProgram(HgcTriangularCheckerboard *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000071c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, -2.000000000, 3.000000000, 1.000000000);\n"
             "    float4 s0, s1, s2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xyz = frag._texCoord0.xyz;\n"
             "    s0.w = float(c0.w);\n"
             "    s1.x = dot(s0, hg_Params[4]);\n"
             "    s0.x = dot(s0, hg_Params[3]);\n"
             "    s0.y = s1.x;\n"
             "    s0.zw = fabs(s0.xy)*hg_Params[6].xy;\n"
             "    s0.xy = floor(s0.zw);\n"
             "    s0.zw = fract(s0.zw);\n"
             "    s0.xy = s0.xy*float2(c0.xx);\n"
             "    s0.xy = fract(s0.xy);\n"
             "    s0.xy = s0.xy + s0.xy;\n"
             "    s0.xy = floor(s0.xy);\n"
             "    s2.zw = s0.xy - float2(c0.ww);\n"
             "    s2.xy = float2(c0.ww) - s0.zw;\n"
             "    s0.w = select(s2.y, s0.w, s2.w < 0.00000h);\n"
             "    s0.z = select(s0.z, s2.x, s2.z < 0.00000h);\n"
             "    s2.zw = s0.zw*hg_Params[6].zw;\n"
             "    s0.zw = s2.zw - hg_Params[6].zw;\n"
             "    s2.x = s0.z;\n"
             "    s2.y = s2.w;\n"
             "    s0.x = dot(s2.xy, hg_Params[5].xy);\n"
             "    s2.z = s0.x;\n"
             "    s2.y = -s0.w;\n"
             "    s2.x = s2.w;\n"
             "    s2.xyz = abs(s2.xyz);\n"
             "    s0.zw = fmin(s2.yx, s2.zz);\n"
             "    s0.z = select(s0.z, s0.w, s0.x < 0.00000h);\n"
             "    s0.z = clamp(s0.z*hg_Params[2].z + float(c0.x), 0.00000f, 1.00000f);\n"
             "    s0.w = s0.z*float(c0.y) + float(c0.z);\n"
             "    s0.z = s0.z*s0.z;\n"
             "    s0.z = s0.z*s0.w;\n"
             "    s0.w = -s0.z + float(c0.w);\n"
             "    s0.y = s0.y - float(c0.w);\n"
             "    s0.y = select(s0.z, s0.w, s0.y < 0.00000h);\n"
             "    s0.z = -s0.y + float(c0.w);\n"
             "    s0.x = select(s0.y, s0.z, s0.x < 0.00000h);\n"
             "    s0.y = -s0.x + float(c0.w);\n"
             "    s0.z = select(float(c0.w), -float(c0.w), s1.x < 0.00000h);\n"
             "    s0.x = select(s0.x, s0.y, s0.z < 0.00000h);\n"
             "    output.color0 = mix(hg_Params[0], hg_Params[1], s0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2110c064:e4c305a3:072ae072:19d887c8\n"
             "//SIG=00400000:00000000:00000000:00000000:0001:0007:0003:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000006c0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, -2.000000000, 3.000000000, 1.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = frag._texCoord0.xyz;\n"
             "    r0.w = c0.w;\n"
             "    r1.x = dot(r0, hg_Params[4]);\n"
             "    r0.x = dot(r0, hg_Params[3]);\n"
             "    r0.y = r1.x;\n"
             "    r0.zw = fabs(r0.xy)*hg_Params[6].xy;\n"
             "    r0.xy = floor(r0.zw);\n"
             "    r0.zw = fract(r0.zw);\n"
             "    r0.xy = r0.xy*c0.xx;\n"
             "    r0.xy = fract(r0.xy);\n"
             "    r0.xy = r0.xy + r0.xy;\n"
             "    r0.xy = floor(r0.xy);\n"
             "    r2.zw = r0.xy - c0.ww;\n"
             "    r2.xy = c0.ww - r0.zw;\n"
             "    r0.w = select(r2.y, r0.w, r2.w < 0.00000f);\n"
             "    r0.z = select(r0.z, r2.x, r2.z < 0.00000f);\n"
             "    r2.zw = r0.zw*hg_Params[6].zw;\n"
             "    r0.zw = r2.zw - hg_Params[6].zw;\n"
             "    r2.x = r0.z;\n"
             "    r2.y = r2.w;\n"
             "    r0.x = dot(r2.xy, hg_Params[5].xy);\n"
             "    r2.z = r0.x;\n"
             "    r2.y = -r0.w;\n"
             "    r2.x = r2.w;\n"
             "    r2.xyz = abs(r2.xyz);\n"
             "    r0.zw = fmin(r2.yx, r2.zz);\n"
             "    r0.z = select(r0.z, r0.w, r0.x < 0.00000f);\n"
             "    r0.z = clamp(r0.z*hg_Params[2].z + c0.x, 0.00000f, 1.00000f);\n"
             "    r0.w = r0.z*c0.y + c0.z;\n"
             "    r0.z = r0.z*r0.z;\n"
             "    r0.z = r0.z*r0.w;\n"
             "    r0.w = -r0.z + c0.w;\n"
             "    r0.y = r0.y - c0.w;\n"
             "    r0.y = select(r0.z, r0.w, r0.y < 0.00000f);\n"
             "    r0.z = -r0.y + c0.w;\n"
             "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
             "    r0.y = -r0.x + c0.w;\n"
             "    r0.z = select(c0.w, -c0.w, r1.x < 0.00000f);\n"
             "    r0.x = select(r0.x, r0.y, r0.z < 0.00000f);\n"
             "    output.color0 = mix(hg_Params[0], hg_Params[1], r0.xxxx);\n"
             "    return output;\n"
             "}\n"
             "//MD5=26633091:d2a70f55:ff153893:8600ba58\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0007:0003:0000:0000:0000:0002:0000:0001:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000795\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, -2.000000000, 3.000000000, 1.000000000);\n"
           "    highp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xyz = hg_TexCoord0.xyz;\n"
           "    r0.w = c0.w;\n"
           "    r1.x = dot(r0, hg_ProgramLocal4);\n"
           "    r0.x = dot(r0, hg_ProgramLocal3);\n"
           "    r0.y = r1.x;\n"
           "    r0.zw = abs(r0.xy)*hg_ProgramLocal6.xy;\n"
           "    r0.xy = floor(r0.zw);\n"
           "    r0.zw = fract(r0.zw);\n"
           "    r0.xy = r0.xy*c0.xx;\n"
           "    r0.xy = fract(r0.xy);\n"
           "    r0.xy = r0.xy + r0.xy;\n"
           "    r0.xy = floor(r0.xy);\n"
           "    r2.zw = r0.xy - c0.ww;\n"
           "    r2.xy = c0.ww - r0.zw;\n"
           "    r0.w = r2.w < 0.00000 ? r0.w : r2.y;\n"
           "    r0.z = r2.z < 0.00000 ? r2.x : r0.z;\n"
           "    r2.zw = r0.zw*hg_ProgramLocal6.zw;\n"
           "    r0.zw = r2.zw - hg_ProgramLocal6.zw;\n"
           "    r2.x = r0.z;\n"
           "    r2.y = r2.w;\n"
           "    r0.x = dot(r2.xy, hg_ProgramLocal5.xy);\n"
           "    r2.z = r0.x;\n"
           "    r2.y = -r0.w;\n"
           "    r2.x = r2.w;\n"
           "    r2.xyz = abs(r2.xyz);\n"
           "    r0.zw = min(r2.yx, r2.zz);\n"
           "    r0.z = r0.x < 0.00000 ? r0.w : r0.z;\n"
           "    r0.z = clamp(r0.z*hg_ProgramLocal2.z + c0.x, 0.00000, 1.00000);\n"
           "    r0.w = r0.z*c0.y + c0.z;\n"
           "    r0.z = r0.z*r0.z;\n"
           "    r0.z = r0.z*r0.w;\n"
           "    r0.w = -r0.z + c0.w;\n"
           "    r0.y = r0.y - c0.w;\n"
           "    r0.y = r0.y < 0.00000 ? r0.w : r0.z;\n"
           "    r0.z = -r0.y + c0.w;\n"
           "    r0.x = r0.x < 0.00000 ? r0.z : r0.y;\n"
           "    r0.y = -r0.x + c0.w;\n"
           "    r0.z = r1.x < 0.00000 ? -c0.w : c0.w;\n"
           "    r0.x = r0.z < 0.00000 ? r0.y : r0.x;\n"
           "    gl_FragColor = mix(hg_ProgramLocal0, hg_ProgramLocal1, r0.xxxx);\n"
           "}\n"
           "//MD5=947deea3:fe3d74d0:edb136c6:894e955c\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0007:0003:0000:0000:0000:0000:0000:0001:00:0:1:0\n";
  }
}

void HgcTriangularCheckerboard::InitProgramDescriptor(HgcTriangularCheckerboard *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcTriangularCheckerboard_hgc_visible", "//Metal1.0     \n//LEN=000000062e\n[[ visible ]] FragmentOut HgcTriangularCheckerboard_hgc_visible(const constant float4* hg_Params,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, -2.000000000, 3.000000000, 1.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = texCoord0.xyz;\n"
    "    r0.w = c0.w;\n"
    "    r1.x = dot(r0, hg_Params[4]);\n"
    "    r0.x = dot(r0, hg_Params[3]);\n"
    "    r0.y = r1.x;\n"
    "    r0.zw = fabs(r0.xy)*hg_Params[6].xy;\n"
    "    r0.xy = floor(r0.zw);\n"
    "    r0.zw = fract(r0.zw);\n"
    "    r0.xy = r0.xy*c0.xx;\n"
    "    r0.xy = fract(r0.xy);\n"
    "    r0.xy = r0.xy + r0.xy;\n"
    "    r0.xy = floor(r0.xy);\n"
    "    r2.zw = r0.xy - c0.ww;\n"
    "    r2.xy = c0.ww - r0.zw;\n"
    "    r0.w = select(r2.y, r0.w, r2.w < 0.00000f);\n"
    "    r0.z = select(r0.z, r2.x, r2.z < 0.00000f);\n"
    "    r2.zw = r0.zw*hg_Params[6].zw;\n"
    "    r0.zw = r2.zw - hg_Params[6].zw;\n"
    "    r2.x = r0.z;\n"
    "    r2.y = r2.w;\n"
    "    r0.x = dot(r2.xy, hg_Params[5].xy);\n"
    "    r2.z = r0.x;\n"
    "    r2.y = -r0.w;\n"
    "    r2.x = r2.w;\n"
    "    r2.xyz = abs(r2.xyz);\n"
    "    r0.zw = fmin(r2.yx, r2.zz);\n"
    "    r0.z = select(r0.z, r0.w, r0.x < 0.00000f);\n"
    "    r0.z = clamp(r0.z*hg_Params[2].z + c0.x, 0.00000f, 1.00000f);\n"
    "    r0.w = r0.z*c0.y + c0.z;\n"
    "    r0.z = r0.z*r0.z;\n"
    "    r0.z = r0.z*r0.w;\n"
    "    r0.w = -r0.z + c0.w;\n"
    "    r0.y = r0.y - c0.w;\n"
    "    r0.y = select(r0.z, r0.w, r0.y < 0.00000f);\n"
    "    r0.z = -r0.y + c0.w;\n"
    "    r0.x = select(r0.y, r0.z, r0.x < 0.00000f);\n"
    "    r0.y = -r0.x + c0.w;\n"
    "    r0.z = select(c0.w, -c0.w, r1.x < 0.00000f);\n"
    "    r0.x = select(r0.x, r0.y, r0.z < 0.00000f);\n"
    "    output.color0 = mix(hg_Params[0], hg_Params[1], r0.xxxx);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28BA088()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcTriangularCheckerboard");
}

void sub_1B28BA098(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28BA198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28BA1D8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28BA1D0);
}

_QWORD *HgcTriangularCheckerboard::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcTriangularCheckerboard [hgc1]");
}

uint64_t HgcTriangularCheckerboard::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcTriangularCheckerboard::Bind(HgcTriangularCheckerboard *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HgcTriangularCheckerboard *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcTriangularCheckerboard::RenderTile(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  int v3;
  int v4;
  int v5;
  int32x2_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int64x2_t v73;
  int64x2_t v74;
  float32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  int8x8_t v83;
  int32x4_t v84;
  int32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x8_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int64x2_t v92;
  int64x2_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int64x2_t v100;
  int64x2_t v101;
  float32x4_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int8x16_t v114;
  int8x16_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t *v119;
  uint64_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;
  int8x16_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x16_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x16_t v143;
  float32x4_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  int8x16_t v150;
  float32x4_t v151;
  float32x4_t v152;
  int64x2_t v153;
  float32x4_t v154;
  int8x16_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  int32x4_t v162;
  int64x2_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  int32x4_t v170;
  int64x2_t v171;
  int32x4_t v172;
  int8x16_t v173;

  v2 = *a2;
  v3 = a2[1].i32[1] - HIDWORD(*(unint64_t *)a2);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a2[1].i32[0] - v2.i32[0];
    v6 = a2[2];
    *(float32x2_t *)v7.f32 = vadd_f32(vcvt_f32_s32(v2), (float32x2_t)0x3F0000003F000000);
    v7.i64[1] = 0x3F80000000000000;
    v8 = 16 * a2[3].i32[0];
    do
    {
      if (v5 < 2)
      {
        v9 = 0;
        v11 = v7;
      }
      else
      {
        v9 = 0;
        v10 = v5;
        v11 = v7;
        do
        {
          v12 = vaddq_f32(v11, (float32x4_t)xmmword_1B304F230);
          v11.i32[3] = 1.0;
          v13 = v12;
          v14 = *(_QWORD *)(a1 + 408);
          v15 = *(float32x4_t *)(v14 + 64);
          v16 = *(float32x4_t *)(v14 + 80);
          v13.i32[3] = 1.0;
          v17 = vmulq_f32(v11, v15);
          v18 = vmulq_f32(v13, v15);
          v19 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          v20 = vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL));
          v21 = (int32x4_t)vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL));
          v23 = *(float32x4_t *)(v14 + 32);
          v22 = *(float32x4_t *)(v14 + 48);
          v24 = vmulq_f32(v11, v22);
          v25 = vmulq_f32(v13, v22);
          v26 = vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 4uLL));
          v27 = vaddq_f32(v25, (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL));
          v28 = (int32x4_t)vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL));
          v30 = *(float32x4_t *)(v14 + 96);
          v29 = *(int8x16_t *)(v14 + 112);
          v31 = vmulq_f32(v30, vabsq_f32((float32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL)), (int8x16_t)vrev64q_s32(v21))));
          v32 = vmulq_f32(v30, vabsq_f32((float32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL)), (int8x16_t)vrev64q_s32(v28))));
          v33 = vcvtq_f32_s32(vcvtq_s32_f32(v31));
          v34 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
          v36 = *(float32x4_t *)(v14 + 128);
          v35 = *(float32x4_t *)(v14 + 144);
          v37 = vsubq_f32(v33, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v33, v31), (int8x16_t)v36, (int8x16_t)0));
          v38 = vmulq_f32(v35, v37);
          v37.i64[1] = v31.i64[0];
          v39 = vsubq_f32(v34, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v34, v32), (int8x16_t)v36, (int8x16_t)0));
          v40 = vmulq_f32(v35, v39);
          v39.i64[1] = v32.i64[0];
          v41 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
          v42 = vcvtq_f32_s32(vcvtq_s32_f32(v39));
          v43 = (int8x16_t)vsubq_f32(v37, vsubq_f32(v41, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v41, v37), (int8x16_t)v36, (int8x16_t)0)));
          v37.i64[0] = v38.i64[0];
          v37.i64[1] = v43.i64[1];
          v44 = (int8x16_t)vsubq_f32(v39, vsubq_f32(v42, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v42, v39), (int8x16_t)v36, (int8x16_t)0)));
          v42.i64[0] = v40.i64[0];
          v42.i64[1] = v44.i64[1];
          v45 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
          v46 = vcvtq_f32_s32(vcvtq_s32_f32(v42));
          v47 = vsubq_f32(v38, vsubq_f32(v45, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v45, v37), (int8x16_t)v36, (int8x16_t)0)));
          v48 = vsubq_f32(v40, vsubq_f32(v46, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v46, v42), (int8x16_t)v36, (int8x16_t)0)));
          v47.i64[0] = vaddq_f32(v47, v47).u64[0];
          v48.i64[0] = vaddq_f32(v48, v48).u64[0];
          v47.i64[1] = v43.i64[1];
          v48.i64[1] = v44.i64[1];
          v49 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
          v50 = vcvtq_f32_s32(vcvtq_s32_f32(v48));
          v51 = (int8x16_t)vsubq_f32(v49, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v49, v47), (int8x16_t)v36, (int8x16_t)0));
          v52 = (float32x4_t)vextq_s8(v43, v51, 8uLL);
          v51.i64[1] = v43.i64[1];
          v53 = (int8x16_t)vsubq_f32(v50, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v50, v48), (int8x16_t)v36, (int8x16_t)0));
          v54 = (float32x4_t)vextq_s8(v44, v53, 8uLL);
          v50.i64[0] = v53.i64[0];
          v50.i64[1] = v44.i64[1];
          v55 = vsubq_f32(v52, v35);
          v56 = vsubq_f32(v54, v35);
          v52.i64[0] = vsubq_f32(v36, v52).u64[0];
          v54.i64[0] = vsubq_f32(v36, v54).u64[0];
          v52.i64[1] = v55.i64[1];
          v54.i64[1] = v56.i64[1];
          v57 = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
          v58 = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL);
          v59 = *(float32x4_t *)(v14 + 160);
          v60 = *(int8x16_t *)(v14 + 176);
          v61 = (int8x16_t)vcgtq_f32(v59, v52);
          v62 = (int8x16_t)vcgtq_f32(v59, v54);
          v63 = vbslq_s8(v60, vbslq_s8(v61, v51, v57), v51);
          v64 = vbslq_s8(v60, vbslq_s8(v62, (int8x16_t)v50, v58), (int8x16_t)v50);
          v65 = vbslq_s8(v61, v57, v63);
          v66 = vbslq_s8(v62, v58, v64);
          v68 = *(int8x16_t *)(v14 + 192);
          v67 = *(int8x16_t *)(v14 + 208);
          v69 = (float32x4_t)vbslq_s8(v68, v65, v63);
          v70 = (float32x4_t)vbslq_s8(v68, v66, v64);
          v71 = vmulq_f32(v30, v69);
          v72 = vmulq_f32(v30, v70);
          v73 = (int64x2_t)vsubq_f32(v71, v30);
          v74 = (int64x2_t)vsubq_f32(v72, v30);
          v69.i64[1] = v73.i64[1];
          v70.i64[1] = v74.i64[1];
          v75 = (float32x4_t)vmvnq_s8(v68);
          v76 = (int8x16_t)vzip2q_s64(v73, (int64x2_t)v71);
          v77 = (int8x16_t)vzip2q_s64(v74, (int64x2_t)v72);
          v78 = (float32x4_t)vbslq_s8(v67, vextq_s8(v76, v76, 8uLL), v76);
          v79 = (float32x4_t)vbslq_s8(v67, vextq_s8(v77, v77, 8uLL), v77);
          v80 = vmulq_f32(v16, v78);
          v81 = vmulq_f32(v16, v79);
          v82 = (int32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32(v80, (float32x4_t)vrev64q_s32((int32x4_t)v80)), (int8x16_t)v69);
          *(float32x2_t *)v73.i8 = vneg_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL));
          v83 = (int8x8_t)vextq_s8(v68, v68, 8uLL).u64[0];
          v84 = (int32x4_t)vbslq_s8(v29, (int8x16_t)vaddq_f32(v81, (float32x4_t)vrev64q_s32((int32x4_t)v81)), (int8x16_t)v70);
          v70.i64[0] = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
          v78.i64[0] = vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL).u64[0];
          v73.u64[1] = (unint64_t)vorr_s8(vand_s8(*(int8x8_t *)v82.i8, v83), vand_s8(*(int8x8_t *)v70.f32, *(int8x8_t *)v78.f32));
          *(float32x2_t *)v70.f32 = vneg_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL));
          *(int8x8_t *)&v70.u32[2] = vorr_s8(vand_s8(*(int8x8_t *)v84.i8, v83), vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v79, (int8x16_t)v79, 8uLL), *(int8x8_t *)v78.f32));
          v85 = (int32x4_t)vabsq_f32((float32x4_t)vbslq_s8(v29, vextq_s8((int8x16_t)v73, (int8x16_t)v73, 0xCuLL), (int8x16_t)v73));
          v87 = *(float32x4_t *)(v14 + 224);
          v86 = *(float32x4_t *)(v14 + 240);
          *(int8x8_t *)v75.f32 = vqtbl1_s8((int8x16_t)v85, *(int8x8_t *)v87.f32);
          v88 = (int8x8_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL).u64[0];
          *(int8x8_t *)&v75.u32[2] = vqtbl1_s8((int8x16_t)v85, v88);
          v89 = (int32x4_t)vabsq_f32((float32x4_t)vbslq_s8(v29, vextq_s8((int8x16_t)v70, (int8x16_t)v70, 0xCuLL), (int8x16_t)v70));
          *(int8x8_t *)v78.f32 = vqtbl1_s8((int8x16_t)v89, *(int8x8_t *)v87.f32);
          *(int8x8_t *)&v78.u32[2] = vqtbl1_s8((int8x16_t)v89, v88);
          v90 = (int32x4_t)vminq_f32(v75, (float32x4_t)vdupq_laneq_s32(v85, 2));
          v91 = (int32x4_t)vminq_f32(v78, (float32x4_t)vdupq_laneq_s32(v89, 2));
          v87.i64[0] = v82.i64[0];
          v87.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v59, (float32x4_t)vextq_s8(*(int8x16_t *)&v90, *(int8x16_t *)&v82, 8uLL)), (int8x16_t)vrev64q_s32(v90), *(int8x16_t *)&v90).i64[1];
          v78.i64[0] = v84.i64[0];
          v78.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v59, (float32x4_t)vextq_s8(*(int8x16_t *)&v91, *(int8x16_t *)&v84, 8uLL)), (int8x16_t)vrev64q_s32(v91), *(int8x16_t *)&v91).i64[1];
          v92 = (int64x2_t)vminq_f32(vmaxq_f32(vaddq_f32(v86, vmulq_f32(v23, v87)), v59), v35);
          v93 = (int64x2_t)vminq_f32(vmaxq_f32(vaddq_f32(v86, vmulq_f32(v23, v78)), v59), v35);
          v78.i64[0] = v82.i64[0];
          v78.i64[1] = v92.i64[1];
          v90.i64[0] = v84.i64[0];
          v90.i64[1] = v93.i64[1];
          v82.i64[1] = vdupq_laneq_s64(v92, 1).u64[0];
          v84.i64[1] = vdupq_laneq_s64(v93, 1).u64[0];
          v94 = *(float32x4_t *)(v14 + 256);
          v95 = *(float32x4_t *)(v14 + 272);
          v96 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vaddq_f32(v86, vmulq_f32(v94, (float32x4_t)vrev64q_s32(v82))), (int8x16_t)v78);
          v97 = (float32x4_t)vbslq_s8(v60, (int8x16_t)vaddq_f32(v86, vmulq_f32(v94, (float32x4_t)vrev64q_s32(v84))), (int8x16_t)v90);
          v98 = (float32x4_t)vbslq_s8(v68, (int8x16_t)vmulq_f32(v96, v96), (int8x16_t)v96);
          v99 = (float32x4_t)vbslq_s8(v68, (int8x16_t)vmulq_f32(v97, v97), (int8x16_t)v97);
          v100 = (int64x2_t)vmulq_laneq_f32(v98, v98, 3);
          v101 = (int64x2_t)vmulq_laneq_f32(v99, v99, 3);
          v90.i64[0] = v98.i64[0];
          v90.i64[1] = v100.i64[1];
          v87.i64[0] = v99.i64[0];
          v87.i64[1] = v101.i64[1];
          v98.i64[1] = vdupq_laneq_s64(v100, 1).u64[0];
          v99.i64[1] = vdupq_laneq_s64(v101, 1).u64[0];
          v102 = vsubq_f32(v35, (float32x4_t)vrev64q_s32((int32x4_t)v98));
          v103 = (int8x16_t)vsubq_f32(v35, (float32x4_t)vrev64q_s32((int32x4_t)v99));
          v104 = (float32x4_t)vbslq_s8(v60, (int8x16_t)v102, (int8x16_t)v90);
          v105 = (float32x4_t)vbslq_s8(v60, v103, (int8x16_t)v87);
          v106 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vsubq_f32(v104, v59), (int8x16_t)v104);
          v107 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vsubq_f32(v105, v59), (int8x16_t)v105);
          v108 = (int32x4_t)vbslq_s8(v29, (int8x16_t)v106, vbslq_s8((int8x16_t)vcgtq_f32(v94, v106), vextq_s8((int8x16_t)v106, (int8x16_t)v106, 8uLL), vextq_s8((int8x16_t)v106, (int8x16_t)v106, 4uLL)));
          v109 = (int32x4_t)vbslq_s8(v29, (int8x16_t)v107, vbslq_s8((int8x16_t)vcgtq_f32(v94, v107), vextq_s8((int8x16_t)v107, (int8x16_t)v107, 8uLL), vextq_s8((int8x16_t)v107, (int8x16_t)v107, 4uLL)));
          v110 = (int64x2_t)vsubq_f32(v94, (float32x4_t)vextq_s8((int8x16_t)xmmword_1B304F230, (int8x16_t)v108, 0xCuLL));
          v102.i64[0] = v108.i64[0];
          v102.i64[1] = v110.i64[1];
          v98.i64[0] = v109.i64[0];
          v111 = (int64x2_t)vsubq_f32(v94, (float32x4_t)vextq_s8((int8x16_t)xmmword_1B304F230, (int8x16_t)v109, 0xCuLL));
          v108.i64[1] = vdupq_laneq_s64(v110, 1).u64[0];
          v98.i64[1] = v111.i64[1];
          v11 = vaddq_f32(v12, (float32x4_t)xmmword_1B304F230);
          v109.i64[1] = vdupq_laneq_s64(v111, 1).u64[0];
          v112 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v94, v102), vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL), (int8x16_t)vrev64q_s32(v108));
          v113 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v94, v98), vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL), (int8x16_t)vrev64q_s32(v109));
          v114 = vbslq_s8(v29, (int8x16_t)v112, (int8x16_t)vsubq_f32(v86, (float32x4_t)vrev64q_s32(v112)));
          v115 = vbslq_s8(v29, (int8x16_t)v113, (int8x16_t)vsubq_f32(v86, (float32x4_t)vrev64q_s32(v113)));
          v114.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32(v95, (float32x4_t)vextq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v59, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), (int8x16_t)v95, (int8x16_t)v94), v114, 8uLL)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v114.i8, 1), v114).u32[0];
          v21.i32[0] = vbslq_s8((int8x16_t)vcgtq_f32(v95, (float32x4_t)vextq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v59, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL)), (int8x16_t)v95, (int8x16_t)v94), v115, 8uLL)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v115.i8, 1), v115).u32[0];
          v116 = vsubq_f32(*(float32x4_t *)(v14 + 16), *(float32x4_t *)v14);
          v117 = vaddq_f32(*(float32x4_t *)v14, vmulq_n_f32(v116, *(float *)v114.i32));
          v118 = vaddq_f32(*(float32x4_t *)v14, vmulq_n_f32(v116, *(float *)v21.i32));
          v119 = (float32x4_t *)(*(_QWORD *)&v6 + 16 * v9);
          *v119 = v117;
          v119[1] = v118;
          v9 += 2;
          v10 -= 2;
        }
        while (v10 > 1);
        v9 = v9;
      }
      if ((int)v9 < v5)
      {
        v11.i32[3] = 1.0;
        v120 = *(_QWORD *)(a1 + 408);
        v121 = vmulq_f32(v11, *(float32x4_t *)(v120 + 64));
        v122 = vaddq_f32(v121, (float32x4_t)vextq_s8((int8x16_t)v121, (int8x16_t)v121, 4uLL));
        v123 = (int32x4_t)vaddq_f32(v122, (float32x4_t)vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL));
        v124 = vmulq_f32(v11, *(float32x4_t *)(v120 + 48));
        v125 = vaddq_f32(v124, (float32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 4uLL));
        v126 = (int8x16_t)vaddq_f32(v125, (float32x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL));
        v128 = *(float32x4_t *)(v120 + 96);
        v127 = *(int8x16_t *)(v120 + 112);
        v129 = vmulq_f32(v128, vabsq_f32((float32x4_t)vbslq_s8(v127, v126, (int8x16_t)vrev64q_s32(v123))));
        v130 = vcvtq_f32_s32(vcvtq_s32_f32(v129));
        v132 = *(float32x4_t *)(v120 + 128);
        v131 = *(float32x4_t *)(v120 + 144);
        v133 = vsubq_f32(v130, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v130, v129), (int8x16_t)v132, (int8x16_t)0));
        v134 = vmulq_f32(v131, v133);
        v133.i64[1] = v129.i64[0];
        v135 = vcvtq_f32_s32(vcvtq_s32_f32(v133));
        v136 = (int8x16_t)vsubq_f32(v133, vsubq_f32(v135, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v135, v133), (int8x16_t)v132, (int8x16_t)0)));
        v133.i64[0] = v134.i64[0];
        v133.i64[1] = v136.i64[1];
        v137 = vcvtq_f32_s32(vcvtq_s32_f32(v133));
        v138 = vsubq_f32(v134, vsubq_f32(v137, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v137, v133), (int8x16_t)v132, (int8x16_t)0)));
        v138.i64[0] = vaddq_f32(v138, v138).u64[0];
        v138.i64[1] = v136.i64[1];
        v139 = vcvtq_f32_s32(vcvtq_s32_f32(v138));
        v140 = (int8x16_t)vsubq_f32(v139, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v139, v138), (int8x16_t)v132, (int8x16_t)0));
        v141 = (float32x4_t)vextq_s8(v136, v140, 8uLL);
        v140.i64[1] = v136.i64[1];
        v142 = vsubq_f32(v141, v131);
        v141.i64[0] = vsubq_f32(v132, v141).u64[0];
        v141.i64[1] = v142.i64[1];
        v143 = vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL);
        v144 = *(float32x4_t *)(v120 + 160);
        v145 = *(int8x16_t *)(v120 + 176);
        v146 = (int8x16_t)vcgtq_f32(v144, v141);
        v147 = vbslq_s8(v145, vbslq_s8(v146, v140, v143), v140);
        v148 = vbslq_s8(v146, v143, v147);
        v149 = *(int8x16_t *)(v120 + 192);
        v150 = *(int8x16_t *)(v120 + 208);
        v151 = (float32x4_t)vbslq_s8(v149, v148, v147);
        v152 = vmulq_f32(v128, v151);
        v153 = (int64x2_t)vsubq_f32(v152, v128);
        v151.i64[1] = v153.i64[1];
        v154 = (float32x4_t)vmvnq_s8(v149);
        v155 = (int8x16_t)vzip2q_s64(v153, (int64x2_t)v152);
        v156 = (float32x4_t)vbslq_s8(v150, vextq_s8(v155, v155, 8uLL), v155);
        v157 = vmulq_f32(*(float32x4_t *)(v120 + 80), v156);
        v158 = (int32x4_t)vbslq_s8(v127, (int8x16_t)vaddq_f32(v157, (float32x4_t)vrev64q_s32((int32x4_t)v157)), (int8x16_t)v151);
        *(float32x2_t *)v151.f32 = vneg_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v158, (int8x16_t)v158, 8uLL));
        *(int8x8_t *)&v151.u32[2] = vorr_s8(vand_s8(*(int8x8_t *)v158.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL)), vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v156, (int8x16_t)v156, 8uLL), (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v154, (int8x16_t)v154, 8uLL)));
        v159 = (int32x4_t)vabsq_f32((float32x4_t)vbslq_s8(v127, vextq_s8((int8x16_t)v151, (int8x16_t)v151, 0xCuLL), (int8x16_t)v151));
        v160 = *(float32x4_t *)(v120 + 224);
        v161 = *(float32x4_t *)(v120 + 240);
        *(int8x8_t *)v154.f32 = vqtbl1_s8((int8x16_t)v159, *(int8x8_t *)v160.f32);
        *(int8x8_t *)&v154.u32[2] = vqtbl1_s8((int8x16_t)v159, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL));
        v162 = (int32x4_t)vminq_f32(v154, (float32x4_t)vdupq_laneq_s32(v159, 2));
        v160.i64[0] = v158.i64[0];
        v160.i64[1] = vbslq_s8((int8x16_t)vcgtq_f32(v144, (float32x4_t)vextq_s8(*(int8x16_t *)&v162, *(int8x16_t *)&v158, 8uLL)), (int8x16_t)vrev64q_s32(v162), *(int8x16_t *)&v162).i64[1];
        v163 = (int64x2_t)vminq_f32(vmaxq_f32(vaddq_f32(v161, vmulq_f32(*(float32x4_t *)(v120 + 32), v160)), v144), v131);
        v162.i64[0] = v158.i64[0];
        v162.i64[1] = v163.i64[1];
        v158.i64[1] = vdupq_laneq_s64(v163, 1).u64[0];
        v164 = *(float32x4_t *)(v120 + 256);
        v165 = (float32x4_t)vbslq_s8(v145, (int8x16_t)vaddq_f32(v161, vmulq_f32(v164, (float32x4_t)vrev64q_s32(v158))), (int8x16_t)v162);
        v166 = (float32x4_t)vbslq_s8(v149, (int8x16_t)vmulq_f32(v165, v165), (int8x16_t)v165);
        v167 = vmulq_laneq_f32(v166, v166, 3);
        v149.i64[0] = v166.i64[0];
        v149.i64[1] = v167.i64[1];
        v166.i64[1] = vdupq_laneq_s64((int64x2_t)v167, 1).u64[0];
        v168 = (float32x4_t)vbslq_s8(v145, (int8x16_t)vsubq_f32(v131, (float32x4_t)vrev64q_s32((int32x4_t)v166)), v149);
        v169 = (float32x4_t)vbslq_s8(v150, (int8x16_t)vsubq_f32(v168, v144), (int8x16_t)v168);
        v170 = (int32x4_t)vbslq_s8(v127, (int8x16_t)v169, vbslq_s8((int8x16_t)vcgtq_f32(v164, v169), vextq_s8((int8x16_t)v169, (int8x16_t)v169, 8uLL), vextq_s8((int8x16_t)v169, (int8x16_t)v169, 4uLL)));
        v171 = (int64x2_t)vsubq_f32(v164, (float32x4_t)vextq_s8((int8x16_t)xmmword_1B304F230, (int8x16_t)v170, 0xCuLL));
        v167.i64[0] = v170.i64[0];
        v167.i64[1] = v171.i64[1];
        v170.i64[1] = vdupq_laneq_s64(v171, 1).u64[0];
        v172 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v164, v167), vextq_s8((int8x16_t)v167, (int8x16_t)v167, 8uLL), (int8x16_t)vrev64q_s32(v170));
        v173 = vbslq_s8(v127, (int8x16_t)v172, (int8x16_t)vsubq_f32(v161, (float32x4_t)vrev64q_s32(v172)));
        *(float32x4_t *)(*(_QWORD *)&v6 + 16 * v9) = vaddq_f32(*(float32x4_t *)v120, vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v120 + 16), *(float32x4_t *)v120), *(float *)vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v120 + 272), (float32x4_t)vextq_s8(vbslq_s8((int8x16_t)vcgtq_f32(v144, (float32x4_t)vextq_s8((int8x16_t)v123, (int8x16_t)v123, 8uLL)), *(int8x16_t *)(v120 + 272), (int8x16_t)v164), v173, 8uLL)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v173.i8, 1), v173).i32));
      }
      v7 = vaddq_f32(v7, (float32x4_t)xmmword_1B304F240);
      *(_QWORD *)&v6 += v8;
      ++v4;
    }
    while (v4 != v3);
  }
  return 0;
}

uint64_t HgcTriangularCheckerboard::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcTriangularCheckerboard::GetROI()
{
  return 0;
}

void HgcTriangularCheckerboard::HgcTriangularCheckerboard(HgcTriangularCheckerboard *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F20B0;
  v3 = operator new();
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = xmmword_1B3050E20;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v3 + 128) = _Q0;
  *(_OWORD *)(v3 + 144) = xmmword_1B30532D0;
  *(_OWORD *)(v3 + 160) = xmmword_1B304F240;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 192) = xmmword_1B3050FE0;
  *(_OWORD *)(v3 + 208) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 224) = xmmword_1B30532E0;
  *(_OWORD *)(v3 + 240) = xmmword_1B30532F0;
  *(_OWORD *)(v3 + 256) = xmmword_1B3052AB0;
  *(_OWORD *)(v3 + 272) = xmmword_1B3053300;
  *(_QWORD *)(v3 + 288) = 0;
  *(_QWORD *)(v3 + 296) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28BAC18(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcTriangularCheckerboard::~HgcTriangularCheckerboard(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F20B0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FDACBBE0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcTriangularCheckerboard::~HgcTriangularCheckerboard(this);
  HGObject::operator delete(v1);
}

uint64_t HgcTriangularCheckerboard::SetParameter(HgcTriangularCheckerboard *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  float *v9;
  __n128 *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_38;
    case 1:
      v9 = (float *)*((_QWORD *)this + 51);
      if (v9[4] == a3.n128_f32[0] && v9[5] == a4 && v9[6] == a5 && v9[7] == a6)
        return 0;
      v9[4] = a3.n128_f32[0];
      v9[5] = a4;
      v9[6] = a5;
      v9[7] = a6;
      goto LABEL_38;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == 0.0
        && v10[2].n128_f32[1] == 0.0
        && v10[2].n128_f32[2] == a3.n128_f32[0]
        && v10[2].n128_f32[3] == 0.0)
      {
        return 0;
      }
      v10[2].n128_u64[0] = 0;
      v10[2].n128_u32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v10[2].n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[18] = a3;
      goto LABEL_38;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_38;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_38;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_38;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
LABEL_38:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcTriangularCheckerboard::GetParameter(HgcTriangularCheckerboard *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_9;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[4];
      a3[1] = v5[5];
      a3[2] = v5[6];
      v4 = v5 + 7;
      goto LABEL_9;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[72];
      a3[1] = v6[73];
      a3[2] = v6[74];
      v4 = v6 + 75;
      goto LABEL_9;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_9;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_9;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_9;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
LABEL_9:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcLumaKeyer::GetProgram(HgcLumaKeyer *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000042f\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 255.0000000, 0.5000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = (half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = fmin(r0.x, half(hg_Params[2].x));\n"
             "    r0.x = r0.x*c0.y + c0.z;\n"
             "    r0.y = c0.z;\n"
             "    r1.xy = r0.xy + half2(hg_Params[3].xy);\n"
             "    r1.xy = r1.xy*half2(hg_Params[3].zw);\n"
             "    r1.x = (half) hg_Texture1.sample(hg_Sampler1, float2(r1.xy)).x;\n"
             "    output.color0 = clamp(float4(r1.xxxx)*hg_Params[1] + hg_Params[0], 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9210a0b9:ff0b1101:f2edec97:0645fd57\n"
             "//SIG=00400000:00000001:00000001:00000003:0001:0004:0002:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000003fe\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 255.0000000, 0.5000000000, 0.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).x;\n"
             "    r0.x = fmax(r0.x, c0.x);\n"
             "    r0.x = fmin(r0.x, hg_Params[2].x);\n"
             "    r0.x = r0.x*c0.y + c0.z;\n"
             "    r0.y = c0.z;\n"
             "    r0.xy = r0.xy + hg_Params[3].xy;\n"
             "    r0.xy = r0.xy*hg_Params[3].zw;\n"
             "    r0.x = hg_Texture1.sample(hg_Sampler1, r0.xy).x;\n"
             "    output.color0 = clamp(r0.xxxx*hg_Params[1] + hg_Params[0], 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=19e36f6b:1cb791d3:f1ba4e18:294004e7\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0004:0001:0000:0000:0000:0002:0000:0001:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000419\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 255.0000000, 0.5000000000, 0.000000000);\n"
           "    mediump vec4 r0;\n"
           "\n"
           "    r0.x = texture2D(hg_Texture0, hg_TexCoord0.xy).x;\n"
           "    r0.x = max(r0.x, c0.x);\n"
           "    r0.x = min(r0.x, hg_ProgramLocal2.x);\n"
           "    r0.x = r0.x*c0.y + c0.z;\n"
           "    r0.y = c0.z;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal3.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal3.zw;\n"
           "    r0.x = texture2D(hg_Texture1, r0.xy).x;\n"
           "    gl_FragColor = clamp(r0.xxxx*hg_ProgramLocal1 + hg_ProgramLocal0, vec4(0.00000), vec4(1.00000));\n"
           "}\n"
           "//MD5=e741176d:1294b5be:d42e275a:62f3727d\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0004:0001:0000:0000:0000:0000:0000:0001:02:0:1:0\n";
  }
}

void HgcLumaKeyer::InitProgramDescriptor(HgcLumaKeyer *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcLumaKeyer_hgc_visible", "//Metal1.0     \n//LEN=00000002b2\n[[ visible ]] FragmentOut HgcLumaKeyer_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1)\n{\n    const float4 c0 = float4(0.000000000, 255.0000000, 0.5000000000, 0.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.x = color0.x;\n"
    "    r0.x = fmax(r0.x, c0.x);\n"
    "    r0.x = fmin(r0.x, hg_Params[2].x);\n"
    "    r0.x = r0.x*c0.y + c0.z;\n"
    "    r0.y = c0.z;\n"
    "    r0.xy = r0.xy + hg_Params[3].xy;\n"
    "    r0.xy = r0.xy*hg_Params[3].zw;\n"
    "    r0.x = hg_Texture1.sample(hg_Sampler1, r0.xy).x;\n"
    "    output.color0 = clamp(r0.xxxx*hg_Params[1] + hg_Params[0], 0.00000f, 1.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28BB0AC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcLumaKeyer");
}

void sub_1B28BB0BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28BB23C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28BB28C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28BB284);
}

_QWORD *HgcLumaKeyer::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcLumaKeyer [hgc1]");
}

uint64_t HgcLumaKeyer::BindTexture(HgcLumaKeyer *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;

  if (a3 == 1)
  {
    if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    {
      v8.n128_u32[0] = 1.0;
      v9.n128_u32[0] = 1.0;
    }
    else
    {
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v6.n128_f32[0] = (float)*((int *)a2 + 60);
    v7.n128_f32[0] = (float)*((int *)a2 + 61);
    (*(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v6, v7, v8, v9);
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    result = 0;
    if (v4)
      return result;
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  }
  return 0;
}

uint64_t HgcLumaKeyer::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcLumaKeyer::RenderTile(float32x4_t **this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  int v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  int32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  int32x4_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  uint64_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t v65;
  uint64_t v66;
  int32x4_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;

  v4 = HGTile::Renderer(a2);
  v5 = ((uint64_t (*)(float32x4_t **, uint64_t))(*this)[19].i64[1])(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 10);
    v13 = 16 * *((int *)a2 + 22);
    v14 = 16 * *((int *)a2 + 6);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v10 < 4)
      {
        LODWORD(v60) = 0;
      }
      else
      {
        v16 = 0;
        v17 = 32;
        do
        {
          v18 = this[51];
          v20 = v18[2];
          v19 = v18[3];
          v21 = v18[4];
          v22 = v18[5];
          v23 = vaddq_f32(v21, vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v12 + v17 - 32), v19), v20), v22));
          v24 = vaddq_f32(v21, vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v12 + v17 - 16), v19), v20), v22));
          v25 = vaddq_f32(v21, vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v12 + v17), v19), v20), v22));
          v23.i32[1] = 0.5;
          v24.i32[1] = 0.5;
          v25.i32[1] = 0.5;
          v26 = vaddq_f32(v21, vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v12 + v17 + 16), v19), v20), v22));
          v26.i32[1] = 0.5;
          v27 = *((int *)a2 + 26);
          v28 = vsubq_f32(v23, v9);
          v29 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v30 = vaddq_s32(vcvtq_s32_f32(v28), vcltzq_f32(v28));
            v28.i64[0] = vsubq_f32(v28, vcvtq_f32_s32(v30)).u64[0];
            v31 = (float32x4_t *)(v29 + 16 * (v30.i32[0] + v30.i32[1] * (int)v27));
            v32 = vaddq_f32(*v31, vmulq_n_f32(vsubq_f32(v31[1], *v31), v28.f32[0]));
            v28.i32[0] = vaddq_f32(v32, vmulq_lane_f32(vsubq_f32(vaddq_f32(v31[v27], vmulq_n_f32(vsubq_f32(v31[(int)v27 + 1], v31[v27]), v28.f32[0])), v32), *(float32x2_t *)v28.f32, 1)).u32[0];
            v36 = vsubq_f32(v24, v9);
            v33 = vaddq_s32(vcvtq_s32_f32(v36), vcltzq_f32(v36));
            v36.i64[0] = vsubq_f32(v36, vcvtq_f32_s32(v33)).u64[0];
            v34 = (float32x4_t *)(v29 + 16 * (v33.i32[0] + v33.i32[1] * (int)v27));
            v35 = vaddq_f32(*v34, vmulq_n_f32(vsubq_f32(v34[1], *v34), v36.f32[0]));
            v36.i32[0] = vaddq_f32(v35, vmulq_lane_f32(vsubq_f32(vaddq_f32(v34[v27], vmulq_n_f32(vsubq_f32(v34[(int)v27 + 1], v34[v27]), v36.f32[0])), v35), *(float32x2_t *)v36.f32, 1)).u32[0];
            v40 = vsubq_f32(v25, v9);
            v37 = vaddq_s32(vcvtq_s32_f32(v40), vcltzq_f32(v40));
            v40.i64[0] = vsubq_f32(v40, vcvtq_f32_s32(v37)).u64[0];
            v38 = (float32x4_t *)(v29 + 16 * (v37.i32[0] + v37.i32[1] * (int)v27));
            v39 = vaddq_f32(*v38, vmulq_n_f32(vsubq_f32(v38[1], *v38), v40.f32[0]));
            v40.i32[0] = vaddq_f32(v39, vmulq_lane_f32(vsubq_f32(vaddq_f32(v38[v27], vmulq_n_f32(vsubq_f32(v38[(int)v27 + 1], v38[v27]), v40.f32[0])), v39), *(float32x2_t *)v40.f32, 1)).u32[0];
            v44 = vsubq_f32(v26, v9);
            v41 = vaddq_s32(vcvtq_s32_f32(v44), vcltzq_f32(v44));
            v44.i64[0] = vsubq_f32(v44, vcvtq_f32_s32(v41)).u64[0];
            v42 = (float32x4_t *)(v29 + 16 * (v41.i32[0] + v41.i32[1] * (int)v27));
            v43 = vaddq_f32(*v42, vmulq_n_f32(vsubq_f32(v42[1], *v42), v44.f32[0]));
            v44.i32[0] = vaddq_f32(v43, vmulq_lane_f32(vsubq_f32(vaddq_f32(v42[v27], vmulq_n_f32(vsubq_f32(v42[(int)v27 + 1], v42[v27]), v44.f32[0])), v43), *(float32x2_t *)v44.f32, 1)).u32[0];
          }
          else
          {
            v45 = vaddq_f32(v28, v15);
            v46 = vcvtq_s32_f32(v45);
            v45.i64[0] = vaddq_s32(v46, vcgtq_f32(vcvtq_f32_s32(v46), v45)).u64[0];
            v28 = *(float32x4_t *)(v29 + 16 * (v45.i32[0] + v45.i32[1] * (int)v27));
            v47 = vaddq_f32(vsubq_f32(v24, v9), v15);
            v48 = vcvtq_s32_f32(v47);
            v47.i64[0] = vaddq_s32(v48, vcgtq_f32(vcvtq_f32_s32(v48), v47)).u64[0];
            v36 = *(float32x4_t *)(v29 + 16 * (v47.i32[0] + v47.i32[1] * (int)v27));
            v49 = vaddq_f32(vsubq_f32(v25, v9), v15);
            v50 = vcvtq_s32_f32(v49);
            v49.i64[0] = vaddq_s32(v50, vcgtq_f32(vcvtq_f32_s32(v50), v49)).u64[0];
            v40 = *(float32x4_t *)(v29 + 16 * (v49.i32[0] + v49.i32[1] * (int)v27));
            v51 = vaddq_f32(vsubq_f32(v26, v9), v15);
            v52 = vcvtq_s32_f32(v51);
            v51.i64[0] = vaddq_s32(v52, vcgtq_f32(vcvtq_f32_s32(v52), v51)).u64[0];
            v44 = *(float32x4_t *)(v29 + 16 * (v51.i32[0] + v51.i32[1] * (int)v27));
          }
          v53 = v18[1];
          v54 = vmaxq_f32(vaddq_f32(*v18, vmulq_n_f32(v53, v28.f32[0])), v19);
          v55 = vmaxq_f32(vaddq_f32(*v18, vmulq_n_f32(v53, v36.f32[0])), v19);
          v56 = vmaxq_f32(vaddq_f32(*v18, vmulq_n_f32(v53, v40.f32[0])), v19);
          v57 = vmaxq_f32(vaddq_f32(*v18, vmulq_n_f32(v53, v44.f32[0])), v19);
          v58 = v18[6];
          v59 = (float32x4_t *)(v11 + v17);
          v59[-2] = vminq_f32(v54, v58);
          v59[-1] = vminq_f32(v55, v58);
          *v59 = vminq_f32(v56, v58);
          v59[1] = vminq_f32(v57, v58);
          v16 -= 4;
          v17 += 64;
        }
        while (v10 + v16 > 3);
        LODWORD(v60) = -v16;
      }
      if ((int)v60 < v10)
      {
        v60 = v60;
        do
        {
          v61 = this[51];
          v62 = v61[3];
          v63 = vaddq_f32(v61[4], vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v12 + 16 * v60), v62), v61[2]), v61[5]));
          v63.i32[1] = 0.5;
          v64 = *((int *)a2 + 26);
          v65 = vsubq_f32(v63, v9);
          v66 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v67 = vaddq_s32(vcvtq_s32_f32(v65), vcltzq_f32(v65));
            v65.i64[0] = vsubq_f32(v65, vcvtq_f32_s32(v67)).u64[0];
            v68 = (float32x4_t *)(v66 + 16 * (v67.i32[0] + v67.i32[1] * (int)v64));
            v69 = vaddq_f32(*v68, vmulq_n_f32(vsubq_f32(v68[1], *v68), v65.f32[0]));
            v65.i32[0] = vaddq_f32(v69, vmulq_lane_f32(vsubq_f32(vaddq_f32(v68[v64], vmulq_n_f32(vsubq_f32(v68[(int)v64 + 1], v68[v64]), v65.f32[0])), v69), *(float32x2_t *)v65.f32, 1)).u32[0];
          }
          else
          {
            v70 = vaddq_f32(v65, v15);
            v71 = vcvtq_s32_f32(v70);
            v70.i64[0] = vaddq_s32(v71, vcgtq_f32(vcvtq_f32_s32(v71), v70)).u64[0];
            v65 = *(float32x4_t *)(v66 + 16 * (v70.i32[0] + v70.i32[1] * (int)v64));
          }
          *(float32x4_t *)(v11 + 16 * v60++) = vminq_f32(vmaxq_f32(vaddq_f32(*v61, vmulq_n_f32(v61[1], v65.f32[0])), v62), v61[6]);
        }
        while (v60 < v10);
      }
      ++v8;
      v12 += v13;
      v11 += v14;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcLumaKeyer::GetDOD(HgcLumaKeyer *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 1)
  {
    if ((*(int (**)(HgcLumaKeyer *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v5, v4, v7);
    }
    v6 = &HGRectInfinite;
    return *(_QWORD *)v6;
  }
  if (a3)
  {
    v6 = &HGRectNull;
    return *(_QWORD *)v6;
  }
  return v5;
}

uint64_t HgcLumaKeyer::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, 1u);
    DOD = HGRenderer::GetDOD(a2, Input);
    v9 = v8;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(DOD, v9, v10);
    }
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
  return DOD;
}

void HgcLumaKeyer::HgcLumaKeyer(HgcLumaKeyer *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F2318;
  v3 = (_OWORD *)operator new();
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[4] = xmmword_1B3051880;
  v3[5] = xmmword_1B30521C0;
  __asm { FMOV            V1.4S, #1.0 }
  v3[6] = _Q1;
  v3[7] = 0u;
  v3[8] = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcLumaKeyer *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28BBAE8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcLumaKeyer::~HgcLumaKeyer(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F2318;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40265AC83CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcLumaKeyer::~HgcLumaKeyer(this);
  HGObject::operator delete(v1);
}

uint64_t HgcLumaKeyer::SetParameter(HgcLumaKeyer *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v7;
  uint64_t v8;
  __n128 *v9;

  switch((_DWORD)a2)
  {
    case 2:
      v8 = *((_QWORD *)this + 51);
      if (*(float *)(v8 + 32) != a3.n128_f32[0]
        || *(float *)(v8 + 36) != a4
        || *(float *)(v8 + 40) != a5
        || *(float *)(v8 + 44) != a6)
      {
        *(_DWORD *)(v8 + 32) = a3.n128_u32[0];
        *(float *)(v8 + 36) = a4;
        *(float *)(v8 + 40) = a5;
        *(float *)(v8 + 44) = a6;
        goto LABEL_19;
      }
      return 0;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] != a3.n128_f32[0]
        || v9[1].n128_f32[1] != a4
        || v9[1].n128_f32[2] != a5
        || v9[1].n128_f32[3] != a3.n128_f32[0])
      {
        v9[1].n128_f32[2] = a5;
        v9[1].n128_u32[3] = a3.n128_u32[0];
        v9[1].n128_u32[0] = a3.n128_u32[0];
        v9[1].n128_f32[1] = a4;
        a3.n128_f32[1] = a4;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        v9[8] = a3;
        goto LABEL_19;
      }
      return 0;
    case 0:
      v7 = (__n128 *)*((_QWORD *)this + 51);
      if (v7->n128_f32[0] != a3.n128_f32[0]
        || v7->n128_f32[1] != a4
        || v7->n128_f32[2] != a5
        || v7->n128_f32[3] != a3.n128_f32[0])
      {
        v7->n128_f32[2] = a5;
        v7->n128_u32[3] = a3.n128_u32[0];
        v7->n128_u32[0] = a3.n128_u32[0];
        v7->n128_f32[1] = a4;
        a3.n128_f32[1] = a4;
        a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
        v7[7] = a3;
LABEL_19:
        HGNode::ClearBits((HGNode *)this, a2, a7);
        return 1;
      }
      return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcLumaKeyer::GetParameter(HgcLumaKeyer *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  uint64_t result;

  switch(a2)
  {
    case 2:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[8];
      a3[1] = v5[9];
      a3[2] = v5[10];
      v4 = v5 + 11;
      goto LABEL_7;
    case 1:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[32];
      a3[1] = v6[33];
      a3[2] = v6[34];
      v4 = v6 + 35;
      goto LABEL_7;
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[28];
      a3[1] = v3[29];
      a3[2] = v3[30];
      v4 = v3 + 31;
LABEL_7:
      result = 0;
      a3[3] = *v4;
      return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcLumaKey::GetProgram(HgcLumaKey *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000056d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1.xz = half2(dot(r0.xyz, half3(hg_Params[0].xyz)));\n"
             "    r2.x = half(hg_Params[2].y) - half(hg_Params[2].x);\n"
             "    r2.xz = 1.00000h / r2.xx;\n"
             "    r3.xz = r1.xz - half2(hg_Params[2].xx);\n"
             "    r3.xz = r3.xz*r2.xz;\n"
             "    r2.xz = half2(r1.xz >= half2(hg_Params[2].xx));\n"
             "    r2.xz = r2.xz*r3.xz;\n"
             "    r3.xz = half2(r1.xz >= half2(hg_Params[2].yy));\n"
             "    r2.x = clamp(r2.x + r3.x, 0.00000h, 1.00000h);\n"
             "    r2.y = c0.y - r2.x;\n"
             "    r4.z = c0.y - half(hg_Params[2].y);\n"
             "    r4.z = half(r1.z < r4.z);\n"
             "    r2.z = clamp(r3.z*r4.z + r2.z, 0.00000h, 1.00000h);\n"
             "    r2.w = c0.y - r2.z;\n"
             "    r2.w = dot(r2, half4(hg_Params[1]));\n"
             "    r2.w = r2.w*r0.w;\n"
             "    output.color0.xyz = float3(r0.xyz)*float3(r2.www);\n"
             "    output.color0.w = float(r2.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=52a4b6c7:8bf69931:c3eec1fe:8683b5cd\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0003:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000522\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1.xz = float2(dot(r0.xyz, hg_Params[0].xyz));\n"
             "    r2.x = hg_Params[2].y - hg_Params[2].x;\n"
             "    r2.xz = 1.00000f / r2.xx;\n"
             "    r3.xz = r1.xz - hg_Params[2].xx;\n"
             "    r3.xz = r3.xz*r2.xz;\n"
             "    r2.xz = float2(r1.xz >= hg_Params[2].xx);\n"
             "    r2.xz = r2.xz*r3.xz;\n"
             "    r3.xz = float2(r1.xz >= hg_Params[2].yy);\n"
             "    r2.x = clamp(r2.x + r3.x, 0.00000f, 1.00000f);\n"
             "    r2.y = c0.y - r2.x;\n"
             "    r4.z = c0.y - hg_Params[2].y;\n"
             "    r4.z = float(r1.z < r4.z);\n"
             "    r2.z = clamp(r3.z*r4.z + r2.z, 0.00000f, 1.00000f);\n"
             "    r2.w = c0.y - r2.z;\n"
             "    r2.w = dot(r2, hg_Params[1]);\n"
             "    r2.w = r2.w*r0.w;\n"
             "    output.color0.xyz = r0.xyz*r2.www;\n"
             "    output.color0.w = r2.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=34c6f3dd:16366c1e:a18fd862:e09b84d4\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0003:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000572\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1.xz = vec2(dot(r0.xyz, hg_ProgramLocal0.xyz));\n"
           "    r2.x = hg_ProgramLocal2.y - hg_ProgramLocal2.x;\n"
           "    r2.xz = vec2(1.00000) / r2.xx;\n"
           "    r3.xz = r1.xz - hg_ProgramLocal2.xx;\n"
           "    r3.xz = r3.xz*r2.xz;\n"
           "    r2.xz = vec2(greaterThanEqual(r1.xz, hg_ProgramLocal2.xx));\n"
           "    r2.xz = r2.xz*r3.xz;\n"
           "    r3.xz = vec2(greaterThanEqual(r1.xz, hg_ProgramLocal2.yy));\n"
           "    r2.x = clamp(r2.x + r3.x, 0.00000, 1.00000);\n"
           "    r2.y = c0.y - r2.x;\n"
           "    r4.z = c0.y - hg_ProgramLocal2.y;\n"
           "    r4.z = float(r1.z < r4.z);\n"
           "    r2.z = clamp(r3.z*r4.z + r2.z, 0.00000, 1.00000);\n"
           "    r2.w = c0.y - r2.z;\n"
           "    r2.w = dot(r2, hg_ProgramLocal1);\n"
           "    r2.w = r2.w*r0.w;\n"
           "    gl_FragColor.xyz = r0.xyz*r2.www;\n"
           "    gl_FragColor.w = r2.w;\n"
           "}\n"
           "//MD5=95a6db3a:54e9f3de:6f929bed:508d296b\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0003:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcLumaKey::InitProgramDescriptor(HgcLumaKey *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcLumaKey_hgc_visible", "//Metal1.0     \n//LEN=00000003f6\n[[ visible ]] FragmentOut HgcLumaKey_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xz = float2(dot(r0.xyz, hg_Params[0].xyz));\n"
    "    r2.x = hg_Params[2].y - hg_Params[2].x;\n"
    "    r2.xz = 1.00000f / r2.xx;\n"
    "    r3.xz = r1.xz - hg_Params[2].xx;\n"
    "    r3.xz = r3.xz*r2.xz;\n"
    "    r2.xz = float2(r1.xz >= hg_Params[2].xx);\n"
    "    r2.xz = r2.xz*r3.xz;\n"
    "    r3.xz = float2(r1.xz >= hg_Params[2].yy);\n"
    "    r2.x = clamp(r2.x + r3.x, 0.00000f, 1.00000f);\n"
    "    r2.y = c0.y - r2.x;\n"
    "    r4.z = c0.y - hg_Params[2].y;\n"
    "    r4.z = float(r1.z < r4.z);\n"
    "    r2.z = clamp(r3.z*r4.z + r2.z, 0.00000f, 1.00000f);\n"
    "    r2.w = c0.y - r2.z;\n"
    "    r2.w = dot(r2, hg_Params[1]);\n"
    "    r2.w = r2.w*r0.w;\n"
    "    output.color0.xyz = r0.xyz*r2.www;\n"
    "    output.color0.w = r2.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28BBDD4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcLumaKey");
}

void sub_1B28BBDE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28BBEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28BBF24()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28BBF1CLL);
}

_QWORD *HgcLumaKey::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcLumaKey [hgc1]");
}

uint64_t HgcLumaKey::BindTexture(HgcLumaKey *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcLumaKey::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcLumaKey::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t *v79;
  uint64_t v80;
  float32x4_t v81;
  uint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int64x2_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x16_t v98;
  int8x16_t v99;
  float32x4_t v100;
  int64x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 3)
      {
        LODWORD(v80) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        do
        {
          v11 = *(float32x4_t *)(v6 + v9);
          v12 = *(float32x4_t *)(v6 + v9 + 16);
          v13 = *(float32x4_t *)(v6 + v9 + 32);
          v14 = *(_QWORD *)(a1 + 408);
          v15 = *(float32x4_t *)(v14 + 32);
          v16 = *(float32x4_t *)(v14 + 48);
          v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v16);
          v18 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v16);
          v19 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 3), v16);
          v20 = *(float32x4_t *)(v14 + 64);
          v21 = *(int8x16_t *)(v14 + 80);
          v22 = vmulq_f32(vrecpeq_f32(v17), v20);
          v23 = vmulq_f32(vrecpeq_f32(v18), v20);
          v24 = vmulq_f32(vrecpeq_f32(v19), v20);
          v25 = (int8x16_t)vmulq_f32(v22, vrecpsq_f32(v22, v17));
          v26 = (int8x16_t)vmulq_f32(v23, vrecpsq_f32(v23, v18));
          v27 = vandq_s8(v21, v25);
          v28 = *(float32x4_t *)(v14 + 96);
          v29 = vmulq_f32(v11, (float32x4_t)vorrq_s8(v27, (int8x16_t)v28));
          v30 = vmulq_f32(v12, (float32x4_t)vorrq_s8(vandq_s8(v21, v26), (int8x16_t)v28));
          v31 = vmulq_f32(v13, (float32x4_t)vorrq_s8(vandq_s8(v21, (int8x16_t)vmulq_f32(v24, vrecpsq_f32(v24, v19))), (int8x16_t)v28));
          v32 = *(float32x4_t *)(v14 + 16);
          v33 = (int64x2_t)vmulq_f32(*(float32x4_t *)v14, v29);
          v34 = (int64x2_t)vmulq_f32(*(float32x4_t *)v14, v30);
          v35 = (int64x2_t)vmulq_f32(*(float32x4_t *)v14, v31);
          v36 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s64(v33.i64[0], 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.i8, 1)), (float32x4_t)vdupq_laneq_s64(v33, 1));
          v37 = (float32x4_t)vdupq_lane_s64(vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v15), v15).i64[0], 0);
          v38 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s64(v34.i64[0], 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 1)), (float32x4_t)vdupq_laneq_s64(v34, 1));
          v39 = *(float32x4_t *)(v14 + 144);
          v40 = vminq_f32(vmaxq_f32(vmulq_f32(v20, vrecpeq_f32(v37)), *(float32x4_t *)(v14 + 112)), *(float32x4_t *)(v14 + 128));
          v41 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s64(v35.i64[0], 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1)), (float32x4_t)vdupq_laneq_s64(v35, 1));
          v42 = vmulq_f32(v40, vrecpsq_f32(v37, v40));
          v43 = (float32x4_t)vdupq_lane_s64(v15.i64[0], 0);
          v44 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1);
          v45 = vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v36, v43)), vmulq_f32(vsubq_f32(v36, v43), v42));
          v46 = vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v38, v43)), vmulq_f32(vsubq_f32(v38, v43), v42));
          v47 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v36, v44));
          v48 = vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v41, v43)), vmulq_f32(vsubq_f32(v41, v43), v42));
          v49 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v38, v44));
          v50 = (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgeq_f32(v41, v44));
          v44.i64[0] = vminq_f32(vmaxq_f32(vaddq_f32(v47, v45), v28), v39).u64[0];
          v51.i64[0] = v44.i64[0];
          v51.i64[1] = v45.i64[1];
          v52.i64[0] = vminq_f32(vmaxq_f32(vaddq_f32(v49, v46), v28), v39).u64[0];
          v53.i64[0] = v52.i64[0];
          v53.i64[1] = v46.i64[1];
          v54.i64[0] = vminq_f32(vmaxq_f32(vaddq_f32(v50, v48), v28), v39).u64[0];
          v44.i64[1] = vdupq_laneq_s64((int64x2_t)v45, 1).u64[0];
          v45.i64[0] = v54.i64[0];
          v45.i64[1] = v48.i64[1];
          v52.i64[1] = vdupq_laneq_s64((int64x2_t)v46, 1).u64[0];
          v54.i64[1] = vdupq_laneq_s64((int64x2_t)v48, 1).u64[0];
          v55 = (int8x16_t)vsubq_f32(v39, (float32x4_t)vrev64q_s32(v52));
          v56 = (int8x16_t)vsubq_f32(v39, (float32x4_t)vrev64q_s32(v54));
          v57 = *(int8x16_t *)(v14 + 160);
          v58 = *(int8x16_t *)(v14 + 176);
          v59 = (float32x4_t)vbslq_s8(v57, (int8x16_t)vsubq_f32(v39, (float32x4_t)vrev64q_s32((int32x4_t)v44)), v51);
          v60 = (float32x4_t)vbslq_s8(v57, v55, v53);
          v61 = vsubq_f32(v39, (float32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL));
          v62 = (int8x16_t)vcgtq_f32(v61, v36);
          v63 = (float32x4_t)vbslq_s8(v57, v56, (int8x16_t)v45);
          v64 = vmaxq_f32(vaddq_f32(vmulq_f32(v49, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v61, v38))), v60), v28);
          v65 = vmaxq_f32(vaddq_f32(vmulq_f32(v50, (float32x4_t)vandq_s8((int8x16_t)v39, (int8x16_t)vcgtq_f32(v61, v41))), v63), v28);
          v66 = (int64x2_t)vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v47, (float32x4_t)vandq_s8((int8x16_t)v39, v62)), v59), v28), v39);
          v67 = (int64x2_t)vminq_f32(v64, v39);
          v68 = (int64x2_t)vminq_f32(v65, v39);
          v41.i64[0] = v59.i64[0];
          v41.i64[1] = v66.i64[1];
          v62.i64[0] = v60.i64[0];
          v62.i64[1] = v67.i64[1];
          v38.i64[0] = v63.i64[0];
          v38.i64[1] = v68.i64[1];
          v59.i64[1] = vdupq_laneq_s64(v66, 1).u64[0];
          v60.i64[1] = vdupq_laneq_s64(v67, 1).u64[0];
          v63.i64[1] = vdupq_laneq_s64(v68, 1).u64[0];
          v69 = (float32x4_t)vrev64q_s32((int32x4_t)v63);
          v70 = vmulq_f32(v32, (float32x4_t)vbslq_s8(v58, (int8x16_t)vsubq_f32(v39, (float32x4_t)vrev64q_s32((int32x4_t)v59)), (int8x16_t)v41));
          v71 = vmulq_f32(v32, (float32x4_t)vbslq_s8(v58, (int8x16_t)vsubq_f32(v39, (float32x4_t)vrev64q_s32((int32x4_t)v60)), v62));
          v72 = vmulq_f32(v32, (float32x4_t)vbslq_s8(v58, (int8x16_t)vsubq_f32(v39, v69), (int8x16_t)v38));
          v73 = vaddq_f32(v70, (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 4uLL));
          v74 = vaddq_f32(v71, (float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v71, 4uLL));
          v75 = vaddq_f32(v72, (float32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL));
          v76 = vmulq_f32(v29, vaddq_f32(v73, (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)));
          v77 = vmulq_f32(v30, vaddq_f32(v74, (float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL)));
          v78 = vmulq_f32(v31, vaddq_f32(v75, (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)));
          v79 = (int8x16_t *)(v5 + v9);
          *v79 = vbslq_s8(v58, (int8x16_t)v76, (int8x16_t)vmulq_laneq_f32(v29, v76, 3));
          v79[1] = vbslq_s8(v58, (int8x16_t)v77, (int8x16_t)vmulq_laneq_f32(v30, v77, 3));
          v79[2] = vbslq_s8(v58, (int8x16_t)v78, (int8x16_t)vmulq_laneq_f32(v31, v78, 3));
          v10 -= 3;
          v9 += 48;
        }
        while (v4 + v10 > 2);
        LODWORD(v80) = -v10;
      }
      if ((int)v80 < v4)
      {
        v80 = v80;
        do
        {
          v81 = *(float32x4_t *)(v6 + 16 * v80);
          v82 = *(_QWORD *)(a1 + 408);
          v83 = *(float32x4_t *)(v82 + 32);
          v84 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 3), *(float32x4_t *)(v82 + 48));
          v85 = *(float32x4_t *)(v82 + 64);
          v86 = vmulq_f32(vrecpeq_f32(v84), v85);
          v87 = vandq_s8(*(int8x16_t *)(v82 + 80), (int8x16_t)vmulq_f32(v86, vrecpsq_f32(v86, v84)));
          v88 = *(float32x4_t *)(v82 + 96);
          v89 = vmulq_f32(v81, (float32x4_t)vorrq_s8(v87, (int8x16_t)v88));
          v90 = (int64x2_t)vmulq_f32(*(float32x4_t *)v82, v89);
          v91 = (float32x4_t)vdupq_lane_s64(vsubq_f32((float32x4_t)vrev64q_s32((int32x4_t)v83), v83).i64[0], 0);
          v92 = vaddq_f32(vaddq_f32((float32x4_t)vdupq_lane_s64(v90.i64[0], 0), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v90.i8, 1)), (float32x4_t)vdupq_laneq_s64(v90, 1));
          v93 = *(float32x4_t *)(v82 + 144);
          v94 = vminq_f32(vmaxq_f32(vmulq_f32(v85, vrecpeq_f32(v91)), *(float32x4_t *)(v82 + 112)), *(float32x4_t *)(v82 + 128));
          v95 = (float32x4_t)vdupq_lane_s64(v83.i64[0], 0);
          v96 = vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v93, (int8x16_t)vcgeq_f32(v92, v95)), vmulq_f32(vsubq_f32(v92, v95), vmulq_f32(v94, vrecpsq_f32(v91, v94))));
          v97 = (float32x4_t)vandq_s8((int8x16_t)v93, (int8x16_t)vcgeq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1)));
          v91.i64[0] = vminq_f32(vmaxq_f32(vaddq_f32(v97, v96), v88), v93).u64[0];
          v98.i64[0] = v91.i64[0];
          v98.i64[1] = v96.i64[1];
          v91.i64[1] = vdupq_laneq_s64((int64x2_t)v96, 1).u64[0];
          v99 = *(int8x16_t *)(v82 + 176);
          v100 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v82 + 160), (int8x16_t)vsubq_f32(v93, (float32x4_t)vrev64q_s32((int32x4_t)v91)), v98);
          v101 = (int64x2_t)vminq_f32(vmaxq_f32(vaddq_f32(vmulq_f32(v97, (float32x4_t)vandq_s8((int8x16_t)v93, (int8x16_t)vcgtq_f32(vsubq_f32(v93, (float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 0xCuLL)), v92))), v100), v88), v93);
          v88.i64[0] = v100.i64[0];
          v88.i64[1] = v101.i64[1];
          v100.i64[1] = vdupq_laneq_s64(v101, 1).u64[0];
          v102 = vmulq_f32(*(float32x4_t *)(v82 + 16), (float32x4_t)vbslq_s8(v99, (int8x16_t)vsubq_f32(v93, (float32x4_t)vrev64q_s32((int32x4_t)v100)), (int8x16_t)v88));
          v103 = vaddq_f32(v102, (float32x4_t)vextq_s8((int8x16_t)v102, (int8x16_t)v102, 4uLL));
          v104 = vmulq_f32(v89, vaddq_f32(v103, (float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 8uLL)));
          *(int8x16_t *)(v5 + 16 * v80++) = vbslq_s8(v99, (int8x16_t)v104, (int8x16_t)vmulq_laneq_f32(v89, v104, 3));
        }
        while (v80 < v4);
      }
      ++v3;
      v5 += v7;
      v6 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcLumaKey::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcLumaKey::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcLumaKey::HgcLumaKey(HgcLumaKey *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F2580;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(int32x4_t *)(v3 + 48) = vdupq_n_s32(0x358637BDu);
  *(int32x4_t *)(v3 + 64) = vdupq_n_s32(0x3F804020u);
  *(_OWORD *)(v3 + 80) = xmmword_1B30514E0;
  *(_OWORD *)(v3 + 96) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 112) = xmmword_1B3053350;
  __asm { FMOV            V1.4S, #1.0 }
  *(int32x4_t *)(v3 + 128) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 144) = _Q1;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 176) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28BC62C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcLumaKey::~HgcLumaKey(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F2580;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C408070C27FLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcLumaKey::~HgcLumaKey(this);
  HGObject::operator delete(v1);
}

uint64_t HgcLumaKey::SetParameter(HgcLumaKey *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcLumaKey::GetParameter(HgcLumaKey *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcSpillRemoval::GetProgram(HgcSpillRemoval *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000535\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(8.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = half3(dot(r0, half4(hg_Params[3])));\n"
             "    r2.xyz = half3(dot(r0, half4(hg_Params[4])));\n"
             "    r2.xyz = abs(r2.xyz);\n"
             "    r1.xyz = r2.xyz*half3(hg_Params[5].xyz) + r1.xyz;\n"
             "    r3.x = dot(r0, half4(hg_Params[0]));\n"
             "    r3.y = dot(r0, half4(hg_Params[1]));\n"
             "    r3.z = dot(r0, half4(hg_Params[2]));\n"
             "    r4.x = dot(r0, half4(hg_Params[6]));\n"
             "    r4.y = dot(r0, half4(hg_Params[7]));\n"
             "    r4.z = dot(r0, half4(hg_Params[8]));\n"
             "    r2.xyz = clamp(r2.xyz*half3(hg_Params[9].xyz), 0.00000h, 1.00000h);\n"
             "    r3.xyz = mix(r3.xyz, r4.xyz, r2.xyz);\n"
             "    r1.xyz = clamp(r1.xyz*c0.xxx + c0.yyy, 0.00000h, 1.00000h);\n"
             "    output.color0.xyz = mix(float3(r3.xyz), float3(r0.xyz), float3(r1.xyz));\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=dd20372d:5357e7df:1d9b6437:986450e5\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:000a:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004ce\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(8.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = float3(dot(r0, hg_Params[3]));\n"
             "    r2.xyz = float3(dot(r0, hg_Params[4]));\n"
             "    r2.xyz = abs(r2.xyz);\n"
             "    r1.xyz = r2.xyz*hg_Params[5].xyz + r1.xyz;\n"
             "    r3.x = dot(r0, hg_Params[0]);\n"
             "    r3.y = dot(r0, hg_Params[1]);\n"
             "    r3.z = dot(r0, hg_Params[2]);\n"
             "    r4.x = dot(r0, hg_Params[6]);\n"
             "    r4.y = dot(r0, hg_Params[7]);\n"
             "    r4.z = dot(r0, hg_Params[8]);\n"
             "    r2.xyz = clamp(r2.xyz*hg_Params[9].xyz, 0.00000f, 1.00000f);\n"
             "    r3.xyz = mix(r3.xyz, r4.xyz, r2.xyz);\n"
             "    r1.xyz = clamp(r1.xyz*c0.xxx + c0.yyy, 0.00000f, 1.00000f);\n"
             "    output.color0.xyz = mix(r3.xyz, r0.xyz, r1.xyz);\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=2a7f44f2:b70a9079:2738f6f9:4a6d0db3\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:000a:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000630\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "uniform mediump vec4 hg_ProgramLocal5;\n"
           "uniform mediump vec4 hg_ProgramLocal6;\n"
           "uniform mediump vec4 hg_ProgramLocal7;\n"
           "uniform mediump vec4 hg_ProgramLocal8;\n"
           "uniform mediump vec4 hg_ProgramLocal9;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(8.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = vec3(dot(r0, hg_ProgramLocal3));\n"
           "    r2.xyz = vec3(dot(r0, hg_ProgramLocal4));\n"
           "    r2.xyz = abs(r2.xyz);\n"
           "    r1.xyz = r2.xyz*hg_ProgramLocal5.xyz + r1.xyz;\n"
           "    r3.x = dot(r0, hg_ProgramLocal0);\n"
           "    r3.y = dot(r0, hg_ProgramLocal1);\n"
           "    r3.z = dot(r0, hg_ProgramLocal2);\n"
           "    r4.x = dot(r0, hg_ProgramLocal6);\n"
           "    r4.y = dot(r0, hg_ProgramLocal7);\n"
           "    r4.z = dot(r0, hg_ProgramLocal8);\n"
           "    r2.xyz = clamp(r2.xyz*hg_ProgramLocal9.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = mix(r3.xyz, r4.xyz, r2.xyz);\n"
           "    r1.xyz = clamp(r1.xyz*c0.xxx + c0.yyy, vec3(0.00000), vec3(1.00000));\n"
           "    gl_FragColor.xyz = mix(r3.xyz, r0.xyz, r1.xyz);\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=d7db2a5c:2a3b9e67:91789da8:3f82cfaa\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:000a:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcSpillRemoval::InitProgramDescriptor(HgcSpillRemoval *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSpillRemoval_hgc_visible", "//Metal1.0     \n//LEN=00000003a7\n[[ visible ]] FragmentOut HgcSpillRemoval_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(8.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = float3(dot(r0, hg_Params[3]));\n"
    "    r2.xyz = float3(dot(r0, hg_Params[4]));\n"
    "    r2.xyz = abs(r2.xyz);\n"
    "    r1.xyz = r2.xyz*hg_Params[5].xyz + r1.xyz;\n"
    "    r3.x = dot(r0, hg_Params[0]);\n"
    "    r3.y = dot(r0, hg_Params[1]);\n"
    "    r3.z = dot(r0, hg_Params[2]);\n"
    "    r4.x = dot(r0, hg_Params[6]);\n"
    "    r4.y = dot(r0, hg_Params[7]);\n"
    "    r4.z = dot(r0, hg_Params[8]);\n"
    "    r2.xyz = clamp(r2.xyz*hg_Params[9].xyz, 0.00000f, 1.00000f);\n"
    "    r3.xyz = mix(r3.xyz, r4.xyz, r2.xyz);\n"
    "    r1.xyz = clamp(r1.xyz*c0.xxx + c0.yyy, 0.00000f, 1.00000f);\n"
    "    output.color0.xyz = mix(r3.xyz, r0.xyz, r1.xyz);\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28BC838()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSpillRemoval");
}

void sub_1B28BC848(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051B00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28BC948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28BC988()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28BC980);
}

_QWORD *HgcSpillRemoval::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSpillRemoval [hgc1]");
}

uint64_t HgcSpillRemoval::BindTexture(HgcSpillRemoval *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcSpillRemoval::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, a1[51] + 80, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, a1[51] + 96, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, a1[51] + 112, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, a1[51] + 128, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, a1[51] + 144, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcSpillRemoval::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t *v70;
  unsigned int v71;
  float32x4_t v72;
  uint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v71 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v11 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v15 = *(float32x4_t *)(v13 + 32);
          v14 = *(float32x4_t *)(v13 + 48);
          v16 = vmulq_f32(v12, v14);
          v17 = vmulq_f32(v11, v14);
          v18 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          v19 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          v20 = *(float32x4_t *)(v13 + 64);
          v21 = *(float32x4_t *)(v13 + 80);
          v22 = vmulq_f32(v12, v20);
          v23 = vmulq_f32(v11, v20);
          v24 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL));
          v25 = vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL));
          v26 = vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL));
          v27 = *(float32x4_t *)(v13 + 16);
          v28 = vmulq_f32(v12, *(float32x4_t *)v13);
          v29 = vmulq_f32(v11, *(float32x4_t *)v13);
          v30 = vaddq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL));
          v31 = vabsq_f32(v26);
          v32 = vaddq_f32(v29, (float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v29, 4uLL));
          v33 = vmulq_f32(v12, v27);
          v34 = vmulq_f32(v11, v27);
          v35 = vaddq_f32(v33, (float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL));
          v36 = vaddq_f32(v34, (float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL));
          v37 = vmulq_f32(v12, v15);
          v38 = vmulq_f32(v11, v15);
          v39 = vaddq_f32(v37, (float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL));
          v40 = vaddq_f32(v38, (float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL));
          v41 = *(float32x4_t *)(v13 + 96);
          v42 = *(float32x4_t *)(v13 + 112);
          v43 = vmulq_f32(v12, v41);
          v44 = vmulq_f32(v11, v41);
          v45 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          v46 = vaddq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 4uLL));
          v47 = vmulq_f32(v12, v42);
          v48 = vmulq_f32(v11, v42);
          v49 = vaddq_f32(vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), vmulq_f32(v21, v31));
          v50 = vaddq_f32(v47, (float32x4_t)vextq_s8((int8x16_t)v47, (int8x16_t)v47, 4uLL));
          v51 = vaddq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 4uLL));
          v52 = *(int8x16_t *)(v13 + 160);
          v53 = *(float32x4_t *)(v13 + 176);
          v30.i64[0] = vbslq_s8(v52, (int8x16_t)vaddq_f32(v30, (float32x4_t)vdupq_laneq_s64((int64x2_t)v30, 1)), (int8x16_t)vaddq_f32(v35, (float32x4_t)vdupq_laneq_s64((int64x2_t)v35, 1))).u64[0];
          v32.i64[0] = vbslq_s8(v52, (int8x16_t)vaddq_f32(v32, (float32x4_t)vdupq_laneq_s64((int64x2_t)v32, 1)), (int8x16_t)vaddq_f32(v36, (float32x4_t)vdupq_laneq_s64((int64x2_t)v36, 1))).u64[0];
          v54 = vaddq_f32(v51, (float32x4_t)vdupq_laneq_s64((int64x2_t)v51, 1));
          v35.i64[0] = vbslq_s8(v52, (int8x16_t)vaddq_f32(v45, (float32x4_t)vdupq_laneq_s64((int64x2_t)v45, 1)), (int8x16_t)vaddq_f32(v50, (float32x4_t)vdupq_laneq_s64((int64x2_t)v50, 1))).u64[0];
          v55 = *(float32x4_t *)(v13 + 128);
          v56 = *(float32x4_t *)(v13 + 144);
          v57 = vmulq_f32(v12, v55);
          v54.i64[0] = vbslq_s8(v52, (int8x16_t)vaddq_f32(v46, (float32x4_t)vdupq_laneq_s64((int64x2_t)v46, 1)), (int8x16_t)v54).u64[0];
          v58 = vaddq_f32(v57, (float32x4_t)vextq_s8((int8x16_t)v57, (int8x16_t)v57, 4uLL));
          v59 = vabsq_f32(vaddq_f32(v25, (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)));
          v60 = vmulq_f32(v11, v55);
          v30.i64[1] = vaddq_f32(v39, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v39, 0)).i64[1];
          v61 = vaddq_f32(v60, (float32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 4uLL));
          v32.i64[1] = vaddq_f32(v40, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v40, 0)).i64[1];
          v35.i64[1] = vaddq_f32(v58, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v58, 0)).i64[1];
          v54.i64[1] = vaddq_f32(v61, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v61, 0)).i64[1];
          v62 = vaddq_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), vmulq_f32(v21, v59));
          v63 = vmaxq_f32(vmulq_f32(v31, v56), v53);
          v64 = *(float32x4_t *)(v13 + 192);
          v65 = *(float32x4_t *)(v13 + 208);
          v66 = vaddq_f32(v30, vmulq_f32(vminq_f32(v63, v64), vsubq_f32(v35, v30)));
          v67 = vaddq_f32(v32, vmulq_f32(vminq_f32(vmaxq_f32(vmulq_f32(v59, v56), v53), v64), vsubq_f32(v54, v32)));
          v68 = (int8x16_t)vaddq_f32(v66, vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v64, vmulq_f32(v49, v65)), v53), v64), vsubq_f32(v12, v66)));
          v69 = *(int8x16_t *)(v13 + 224);
          v70 = (int8x16_t *)(v5 + v10);
          v70[-1] = vbslq_s8(v69, (int8x16_t)v12, v68);
          *v70 = vbslq_s8(v69, (int8x16_t)v11, (int8x16_t)vaddq_f32(v67, vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v64, vmulq_f32(v62, v65)), v53), v64), vsubq_f32(v11, v67))));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v71 = -v9;
      }
      if ((int)v71 < v4)
      {
        v72 = *(float32x4_t *)(v6 + 16 * v71);
        v73 = *(_QWORD *)(a1 + 408);
        v74 = vmulq_f32(v72, *(float32x4_t *)(v73 + 48));
        v75 = vaddq_f32(v74, (float32x4_t)vextq_s8((int8x16_t)v74, (int8x16_t)v74, 4uLL));
        v76 = vmulq_f32(v72, *(float32x4_t *)(v73 + 64));
        v77 = vaddq_f32(v76, (float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 4uLL));
        v78 = vabsq_f32(vaddq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL)));
        v79 = vmulq_f32(v72, *(float32x4_t *)v73);
        v80 = vaddq_f32(v79, (float32x4_t)vextq_s8((int8x16_t)v79, (int8x16_t)v79, 4uLL));
        v81 = vmulq_f32(v72, *(float32x4_t *)(v73 + 16));
        v82 = vaddq_f32(v81, (float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 4uLL));
        v83 = vmulq_f32(v72, *(float32x4_t *)(v73 + 32));
        v84 = vaddq_f32(v83, (float32x4_t)vextq_s8((int8x16_t)v83, (int8x16_t)v83, 4uLL));
        v85 = *(int8x16_t *)(v73 + 160);
        v86 = *(float32x4_t *)(v73 + 176);
        v80.i64[0] = vbslq_s8(v85, (int8x16_t)vaddq_f32(v80, (float32x4_t)vdupq_laneq_s64((int64x2_t)v80, 1)), (int8x16_t)vaddq_f32(v82, (float32x4_t)vdupq_laneq_s64((int64x2_t)v82, 1))).u64[0];
        v80.i64[1] = vaddq_f32(v84, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v84, 0)).i64[1];
        v87 = vmulq_f32(v72, *(float32x4_t *)(v73 + 96));
        v88 = vaddq_f32(v87, (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 4uLL));
        v89 = vmulq_f32(v72, *(float32x4_t *)(v73 + 112));
        v90 = vaddq_f32(v89, (float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v89, 4uLL));
        v88.i64[0] = vbslq_s8(v85, (int8x16_t)vaddq_f32(v88, (float32x4_t)vdupq_laneq_s64((int64x2_t)v88, 1)), (int8x16_t)vaddq_f32(v90, (float32x4_t)vdupq_laneq_s64((int64x2_t)v90, 1))).u64[0];
        v91 = vmulq_f32(v72, *(float32x4_t *)(v73 + 128));
        v92 = vaddq_f32(v91, (float32x4_t)vextq_s8((int8x16_t)v91, (int8x16_t)v91, 4uLL));
        v88.i64[1] = vaddq_f32(v92, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v92, 0)).i64[1];
        v93 = *(float32x4_t *)(v73 + 192);
        v94 = vaddq_f32(v80, vmulq_f32(vminq_f32(vmaxq_f32(vmulq_f32(v78, *(float32x4_t *)(v73 + 144)), v86), v93), vsubq_f32(v88, v80)));
        *(int8x16_t *)(v5 + 16 * v71) = vbslq_s8(*(int8x16_t *)(v73 + 224), (int8x16_t)v72, (int8x16_t)vaddq_f32(v94, vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v93, vmulq_f32(vaddq_f32(vaddq_f32(v75, (float32x4_t)vextq_s8((int8x16_t)v75, (int8x16_t)v75, 8uLL)), vmulq_f32(*(float32x4_t *)(v73 + 80), v78)), *(float32x4_t *)(v73 + 208))),
                                                               v86),
                                                             v93),
                                                           vsubq_f32(v72, v94))));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSpillRemoval::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcSpillRemoval::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcSpillRemoval::HgcSpillRemoval(HgcSpillRemoval *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F27E8;
  v3 = operator new();
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 160) = xmmword_1B3050E20;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 208) = xmmword_1B3053370;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28BD068(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSpillRemoval::~HgcSpillRemoval(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F27E8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4019FCA701);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSpillRemoval::~HgcSpillRemoval(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSpillRemoval::SetParameter(HgcSpillRemoval *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 9)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcSpillRemoval::GetParameter(HgcSpillRemoval *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 9)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcCopyAlpha::GetProgram(HgcCopyAlpha *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000308\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    output.color0 = select(float4(r0), float4(r1.wwww), hg_Params[0] < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=11f893c9:de97dd84:418df084:cc2bc75e\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002ec\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    output.color0 = select(r0, r1.wwww, hg_Params[0] < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a417c3aa:b6fd4dbf:6923bcc2:606096e3\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000031a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.w = texture2D(hg_Texture1, hg_TexCoord1.xy).w;\n"
           "    gl_FragColor = vec4(hg_ProgramLocal0.x < 0.00000 ? r1.w : r0.x, hg_ProgramLocal0.y < 0.00000 ? r1.w : r0."
           "y, hg_ProgramLocal0.z < 0.00000 ? r1.w : r0.z, hg_ProgramLocal0.w < 0.00000 ? r1.w : r0.w);\n"
           "}\n"
           "//MD5=0f6e1c32:2a212d0f:09b27458:157f91ae\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcCopyAlpha::InitProgramDescriptor(HgcCopyAlpha *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcCopyAlpha_hgc_visible", "//Metal1.0     \n//LEN=0000000147\n[[ visible ]] FragmentOut HgcCopyAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = color1.w;\n"
    "    output.color0 = select(r0, r1.wwww, hg_Params[0] < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28BD274()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcCopyAlpha");
}

void sub_1B28BD284(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28BD3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28BD40C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28BD404);
}

_QWORD *HgcCopyAlpha::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcCopyAlpha [hgc1]");
}

uint64_t HgcCopyAlpha::BindTexture(HgcCopyAlpha *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcCopyAlpha::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcCopyAlpha::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  uint64_t v18;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = (int8x16_t)vcgtq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 408) + 16), *(float32x4_t *)*(_QWORD *)(a1 + 408));
          v14 = vbslq_s8(v13, (int8x16_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + v12 - 16), 3), *(int8x16_t *)(v8 + v12 - 16));
          v15 = vbslq_s8(v13, (int8x16_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + v12), 3), *(int8x16_t *)(v8 + v12));
          v16 = vbslq_s8(v13, (int8x16_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + v12 + 16), 3), *(int8x16_t *)(v8 + v12 + 16));
          v17 = (int8x16_t *)(v5 + v12);
          v17[-2] = vbslq_s8(v13, (int8x16_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + v12 - 32), 3), *(int8x16_t *)(v8 + v12 - 32));
          v17[-1] = v14;
          *v17 = v15;
          v17[1] = v16;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v18) = -v11;
      }
      if ((int)v18 < v4)
      {
        v18 = v18;
        do
        {
          *(int8x16_t *)(v5 + 16 * v18) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 408) + 16), *(float32x4_t *)*(_QWORD *)(a1 + 408)), (int8x16_t)vdupq_laneq_s32(*(int32x4_t *)(v6 + 16 * v18), 3), *(int8x16_t *)(v8 + 16 * v18));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcCopyAlpha::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcCopyAlpha::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcCopyAlpha::HgcCopyAlpha(HgcCopyAlpha *this)
{
  _QWORD *v2;
  _OWORD *v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F2A50;
  v3 = (_OWORD *)operator new();
  *(_QWORD *)&v4 = 0x8000000080000000;
  *((_QWORD *)&v4 + 1) = 0x8000000080000000;
  *v3 = v4;
  v3[1] = 0u;
  v3[2] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28BD730(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcCopyAlpha::~HgcCopyAlpha(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F2A50;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40EED21634);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcCopyAlpha::~HgcCopyAlpha(this);
  HGObject::operator delete(v1);
}

uint64_t HgcCopyAlpha::SetParameter(HgcCopyAlpha *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float v8;
  float v9;
  float v10;
  __n128 *v11;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = -a4;
  v9 = -a5;
  v10 = -a6;
  v11 = (__n128 *)*((_QWORD *)this + 51);
  if (v11->n128_f32[0] == (float)-a3.n128_f32[0]
    && v11->n128_f32[1] == v8
    && v11->n128_f32[2] == v9
    && v11->n128_f32[3] == v10)
  {
    return 0;
  }
  v11->n128_f32[0] = -a3.n128_f32[0];
  v11->n128_f32[1] = v8;
  a3.n128_f32[1] = a4;
  v11->n128_f32[2] = v9;
  v11->n128_f32[3] = v10;
  a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
  v11[2] = a3;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcCopyAlpha::GetParameter(HgcCopyAlpha *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = v3[8];
    a3[1] = v3[9];
    a3[2] = v3[10];
    result = v3[11];
    a3[3] = result;
  }
  return result;
}

const char *HgcAlphaMult::GetProgram(HgcAlphaMult *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000030d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    output.color0.xyz = float3(r0.xyz);\n"
             "    output.color0.w = float(r0.w)*float(r1.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=9e4dcdb5:915b7698:b2e65d35:32806837\n"
             "//SIG=00400000:00000003:00000003:00000003:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000002eb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    output.color0.xyz = r0.xyz;\n"
             "    output.color0.w = r0.w*r1.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=72620547:651c5a3d:bc9c844f:23b4dcac\n"
             "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000268\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.w = texture2D(hg_Texture1, hg_TexCoord1.xy).w;\n"
           "    gl_FragColor.xyz = r0.xyz;\n"
           "    gl_FragColor.w = r0.w*r1.w;\n"
           "}\n"
           "//MD5=230dbdb0:e5d30084:169cb3a0:451e7339\n"
           "//SIG=00000000:00000003:00000003:00000000:0000:0000:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcAlphaMult::InitProgramDescriptor(HgcAlphaMult *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcAlphaMult_hgc_visible", "//Metal1.0     \n//LEN=0000000146\n[[ visible ]] FragmentOut HgcAlphaMult_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = color1.w;\n"
    "    output.color0.xyz = r0.xyz;\n"
    "    output.color0.w = r0.w*r1.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28BD934()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcAlphaMult");
}

void sub_1B28BD944(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28BDA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28BDACC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28BDAC4);
}

_QWORD *HgcAlphaMult::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcAlphaMult [hgc1]");
}

uint64_t HgcAlphaMult::BindTexture(HgcAlphaMult *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcAlphaMult::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcAlphaMult::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  uint64_t v18;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(int8x16_t *)*(_QWORD *)(a1 + 408);
          v14 = vbslq_s8(v13, (int8x16_t)vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)(v6 + v12 - 16)), *(int8x16_t *)(v8 + v12 - 16));
          v15 = vbslq_s8(v13, (int8x16_t)vmulq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)(v6 + v12)), *(int8x16_t *)(v8 + v12));
          v16 = vbslq_s8(v13, (int8x16_t)vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)(v6 + v12 + 16)), *(int8x16_t *)(v8 + v12 + 16));
          v17 = (int8x16_t *)(v5 + v12);
          v17[-2] = vbslq_s8(v13, (int8x16_t)vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)(v6 + v12 - 32)), *(int8x16_t *)(v8 + v12 - 32));
          v17[-1] = v14;
          *v17 = v15;
          v17[1] = v16;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v18) = -v11;
      }
      if ((int)v18 < v4)
      {
        v18 = v18;
        do
        {
          *(int8x16_t *)(v5 + 16 * v18) = vbslq_s8(*(int8x16_t *)*(_QWORD *)(a1 + 408), (int8x16_t)vmulq_f32(*(float32x4_t *)(v8 + 16 * v18), *(float32x4_t *)(v6 + 16 * v18)), *(int8x16_t *)(v8 + 16 * v18));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcAlphaMult::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcAlphaMult::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcAlphaMult::HgcAlphaMult(HgcAlphaMult *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F2CB8;
  v3 = (_OWORD *)operator new();
  *v3 = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28BDDB0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcAlphaMult::~HgcAlphaMult(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F2CB8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcAlphaMult::~HgcAlphaMult(this);
  HGObject::operator delete(v1);
}

uint64_t HgcAlphaMult::SetParameter(HgcAlphaMult *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcAlphaMult::GetParameter(HgcAlphaMult *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcSolidColor::GetProgram(HgcSolidColor *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00400000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000177\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]])\n"
             "{\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0 = hg_Params[0];\n"
             "    return output;\n"
             "}\n"
             "//MD5=7872d295:7b2c1273:7805b654:83c6a562\n"
             "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000162\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "void main()\n"
           "{\n"
           "\n"
           "    gl_FragColor = hg_ProgramLocal0;\n"
           "}\n"
           "//MD5=3516c664:47c72e5c:14a395a6:40522bd5\n"
           "//SIG=00000000:00000000:00000000:00000000:0000:0001:0000:0000:0000:0000:0000:0000:0000:00:0:1:0\n";
  }
}

void HgcSolidColor::InitProgramDescriptor(HgcSolidColor *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSolidColor_hgc_visible", "//Metal1.0     \n//LEN=00000000c9\n[[ visible ]] FragmentOut HgcSolidColor_hgc_visible(const constant float4* hg_Params)\n{\n    FragmentOut output;\n"
    "\n"
    "    output.color0 = hg_Params[0];\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28BDF04()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSolidColor");
}

void sub_1B28BDF14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  void **v32;
  void *v33;
  char v34;
  __int128 v35;
  uint64_t v36[13];

  *(_DWORD *)(v31 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v31 - 56), "FragmentOut");
  *(_OWORD *)(v31 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v30, v31 - 64);
  if (*(char *)(v31 - 33) < 0)
    operator delete(*(void **)(v31 - 56));
  memset(v36, 0, 24);
  LODWORD(v32) = 2;
  std::string::basic_string[abi:ne180100]<0>(&v33, "float4");
  v35 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v36, (uint64_t)&v32);
  if (v34 < 0)
    operator delete(v33);
  HGProgramDescriptor::SetArgumentBindings(v30, v36);
  v32 = (void **)v36;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v32);
}

void sub_1B28BDFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  a10 = &a19;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void sub_1B28BE008()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28BE000);
}

_QWORD *HgcSolidColor::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSolidColor [hgc1]");
}

uint64_t HgcSolidColor::BindTexture()
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcSolidColor::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcSolidColor::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = (_OWORD *)(v5 + 32);
    v7 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v11) = 0;
      }
      else
      {
        v8 = 0;
        v9 = v6;
        do
        {
          v10 = *(_OWORD *)*(_QWORD *)(a1 + 408);
          *(v9 - 2) = v10;
          *(v9 - 1) = v10;
          *v9 = v10;
          v9[1] = v10;
          v9 += 4;
          v8 -= 4;
        }
        while (v4 + v8 > 3);
        LODWORD(v11) = -v8;
      }
      if ((int)v11 < v4)
      {
        v11 = v11;
        do
          *(_OWORD *)(v5 + 16 * v11++) = *(_OWORD *)*(_QWORD *)(a1 + 408);
        while (v11 < v4);
      }
      ++v3;
      v6 = (_OWORD *)((char *)v6 + v7);
      v5 += v7;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSolidColor::GetDOD(uint64_t a1, uint64_t a2, int a3)
{
  __int128 *v3;

  v3 = &HGRectInfinite;
  if (a3)
    v3 = &HGRectNull;
  return *(_QWORD *)v3;
}

uint64_t HgcSolidColor::GetROI()
{
  return 0;
}

void HgcSolidColor::HgcSolidColor(HgcSolidColor *this)
{
  _QWORD *v2;
  _QWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F2F20;
  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v3[1] = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28BE1DC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSolidColor::~HgcSolidColor(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F2F20;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40451B5BE8);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSolidColor::~HgcSolidColor(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSolidColor::SetParameter(HgcSolidColor *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcSolidColor::GetParameter(HgcSolidColor *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcInsectEye::GetProgram(HgcInsectEye *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000e74\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.732100010, 2.000000000, 0.3333333433, 0.6666666865);\n"
             "    const half4 c1 = half4(3.000000000, 0.5000000000, 0.9990000129, 1.000000000);\n"
             "    const half4 c2 = half4(-1.500000000, 0.8659999967, 0.2500000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    float4 s0, s1, s2, s3, s4, s5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy + hg_Params[5].xy;\n"
             "    s1.x = s0.x*hg_Params[3].x + hg_Params[3].z;\n"
             "    s1.yw = s1.xx + hg_Params[4].xx;\n"
             "    s2.z = s0.y*hg_Params[3].y + hg_Params[3].w;\n"
             "    s2.xy = s2.zz;\n"
             "    s2.zw = s2.zz + hg_Params[4].yy;\n"
             "    s1.xz = s1.xx;\n"
             "    s3 = s1*float4(c0.xxxx) + s2;\n"
             "    s1 = s1*float4(c0.xxxx) + -s2;\n"
             "    s2 = s2 + s2;\n"
             "    s2 = floor(s2);\n"
             "    s3 = floor(s3);\n"
             "    s4 = -s2*float4(c0.yyyy) + s3;\n"
             "    s5 = s4*float4(c0.zzzz) + float4(c0.wwww);\n"
             "    s5 = fract(s5);\n"
             "    s1 = floor(s1);\n"
             "    s1 = s2 + s1;\n"
             "    s5 = s5*float4(c1.xxxx) + float4(c1.yyyy);\n"
             "    s5 = floor(s5);\n"
             "    s1 = s1 - s3;\n"
             "    s1 = s1 + s5;\n"
             "    s4 = s4 - s5;\n"
             "    s4 = s4*float4(c0.zzzz);\n"
             "    s1 = float4(s1 >= float4(c1.zzzz));\n"
             "    s4 = floor(s4);\n"
             "    s4 = s4*float4(c0.yyyy) + s1;\n"
             "    s4 = s2 + s4;\n"
             "    s2 = s2*float4(c1.yyyy);\n"
             "    s4 = s4 + float4(c1.wwww);\n"
             "    s3 = s4*hg_Params[0].xxxx;\n"
             "    s2 = s1*float4(c2.xxxx) + s2;\n"
             "    s2 = s2 + float4(c1.wwww);\n"
             "    s2 = floor(s2);\n"
             "    s1 = s2 + s1;\n"
             "    s4 = s4*float4(c1.yyyy);\n"
             "    s4 = fract(s4);\n"
             "    s1 = s1 - s4;\n"
             "    s3 = s3*float4(c2.yyyy) + hg_Params[1].xxxx;\n"
             "    s5 = s0.xxxx - s3;\n"
             "    s1 = s1*hg_Params[0].yyyy + hg_Params[1].yyyy;\n"
             "    s0 = s0.yyyy - s1;\n"
             "    s2.x = s5.y*hg_Params[2].x + s3.y;\n"
             "    s2.y = s0.y*hg_Params[2].x + s1.y;\n"
             "    s3.y = s0.x*hg_Params[2].x + s1.x;\n"
             "    s3.x = s5.x*hg_Params[2].x + s3.x;\n"
             "    s1.xy = floor(s3.xy);\n"
             "    s2.xy = floor(s2.xy);\n"
             "    s3.xy = s2.xy - hg_Params[5].xy;\n"
             "    s1.xy = s1.xy - hg_Params[5].xy;\n"
             "    s3.xy = s3.xy + float2(c1.yy);\n"
             "    s3.xy = s3.xy*hg_Params[6].xy;\n"
             "    s1.xy = s1.xy + float2(c1.yy);\n"
             "    s1.xy = s1.xy*hg_Params[6].xy;\n"
             "    s3.xy = fmin(s3.xy, hg_Params[7].zw);\n"
             "    s1.xy = fmin(s1.xy, hg_Params[7].zw);\n"
             "    s3.xy = fmax(s3.xy, hg_Params[7].xy);\n"
             "    s4.xy = s3.xy + hg_Params[8].xy;\n"
             "    s4.xy = s4.xy*hg_Params[8].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s4.xy);\n"
             "    s1.xy = fmax(s1.xy, hg_Params[7].xy);\n"
             "    s2.xy = s1.xy + hg_Params[8].xy;\n"
             "    s2.xy = s2.xy*hg_Params[8].zw;\n"
             "    r1 = (half4) hg_Texture0.sample(hg_Sampler0, s2.xy);\n"
             "    s1.y = s0.z*hg_Params[2].x + s1.z;\n"
             "    s1.xz = s5.zw*hg_Params[2].xx + s3.zw;\n"
             "    s1.xy = floor(s1.xy);\n"
             "    s1.xy = s1.xy - hg_Params[5].xy;\n"
             "    s1.xy = s1.xy + float2(c1.yy);\n"
             "    s1.xy = s1.xy*hg_Params[6].xy;\n"
             "    s1.xy = fmin(s1.xy, hg_Params[7].zw);\n"
             "    s1.w = s0.w*hg_Params[2].x + s1.w;\n"
             "    s1.zw = floor(s1.zw);\n"
             "    s1.zw = s1.zw - hg_Params[5].xy;\n"
             "    s1.zw = s1.zw + float2(c1.yy);\n"
             "    s4.xy = s1.zw*hg_Params[6].xy;\n"
             "    s4.xy = fmin(s4.xy, hg_Params[7].zw);\n"
             "    r1 = r1 + r0;\n"
             "    s1.xy = fmax(s1.xy, hg_Params[7].xy);\n"
             "    s1.xy = s1.xy + hg_Params[8].xy;\n"
             "    s1.xy = s1.xy*hg_Params[8].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    s4.xy = fmax(s4.xy, hg_Params[7].xy);\n"
             "    s4.xy = s4.xy + hg_Params[8].xy;\n"
             "    s4.xy = s4.xy*hg_Params[8].zw;\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, s4.xy);\n"
             "    r0 = r1 + r0;\n"
             "    r0 = r0 + r2;\n"
             "    output.color0 = float4(r0)*float4(c2.zzzz);\n"
             "    return output;\n"
             "}\n"
             "//MD5=52a01150:42be61b6:4acfa810:1af012e0\n"
             "//SIG=00400000:00000000:00000000:00000001:0003:0009:0009:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000d95\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.732100010, 2.000000000, 0.3333333433, 0.6666666865);\n"
             "    const float4 c1 = float4(3.000000000, 0.5000000000, 0.9990000129, 1.000000000);\n"
             "    const float4 c2 = float4(-1.500000000, 0.8659999967, 0.2500000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4, r5;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy + hg_Params[5].xy;\n"
             "    r1.x = r0.x*hg_Params[3].x + hg_Params[3].z;\n"
             "    r1.yw = r1.xx + hg_Params[4].xx;\n"
             "    r2.z = r0.y*hg_Params[3].y + hg_Params[3].w;\n"
             "    r2.xy = r2.zz;\n"
             "    r2.zw = r2.zz + hg_Params[4].yy;\n"
             "    r1.xz = r1.xx;\n"
             "    r3 = r1*c0.xxxx + r2;\n"
             "    r1 = r1*c0.xxxx + -r2;\n"
             "    r2 = r2 + r2;\n"
             "    r2 = floor(r2);\n"
             "    r3 = floor(r3);\n"
             "    r4 = -r2*c0.yyyy + r3;\n"
             "    r5 = r4*c0.zzzz + c0.wwww;\n"
             "    r5 = fract(r5);\n"
             "    r1 = floor(r1);\n"
             "    r1 = r2 + r1;\n"
             "    r5 = r5*c1.xxxx + c1.yyyy;\n"
             "    r5 = floor(r5);\n"
             "    r1 = r1 - r3;\n"
             "    r1 = r1 + r5;\n"
             "    r4 = r4 - r5;\n"
             "    r4 = r4*c0.zzzz;\n"
             "    r1 = float4(r1 >= c1.zzzz);\n"
             "    r4 = floor(r4);\n"
             "    r4 = r4*c0.yyyy + r1;\n"
             "    r4 = r2 + r4;\n"
             "    r2 = r2*c1.yyyy;\n"
             "    r4 = r4 + c1.wwww;\n"
             "    r3 = r4*hg_Params[0].xxxx;\n"
             "    r2 = r1*c2.xxxx + r2;\n"
             "    r2 = r2 + c1.wwww;\n"
             "    r2 = floor(r2);\n"
             "    r1 = r2 + r1;\n"
             "    r4 = r4*c1.yyyy;\n"
             "    r4 = fract(r4);\n"
             "    r1 = r1 - r4;\n"
             "    r3 = r3*c2.yyyy + hg_Params[1].xxxx;\n"
             "    r5 = r0.xxxx - r3;\n"
             "    r1 = r1*hg_Params[0].yyyy + hg_Params[1].yyyy;\n"
             "    r0 = r0.yyyy - r1;\n"
             "    r2.x = r5.y*hg_Params[2].x + r3.y;\n"
             "    r2.y = r0.y*hg_Params[2].x + r1.y;\n"
             "    r3.y = r0.x*hg_Params[2].x + r1.x;\n"
             "    r3.x = r5.x*hg_Params[2].x + r3.x;\n"
             "    r1.xy = floor(r3.xy);\n"
             "    r2.xy = floor(r2.xy);\n"
             "    r3.xy = r2.xy - hg_Params[5].xy;\n"
             "    r1.xy = r1.xy - hg_Params[5].xy;\n"
             "    r3.xy = r3.xy + c1.yy;\n"
             "    r3.xy = r3.xy*hg_Params[6].xy;\n"
             "    r1.xy = r1.xy + c1.yy;\n"
             "    r1.xy = r1.xy*hg_Params[6].xy;\n"
             "    r3.xy = fmin(r3.xy, hg_Params[7].zw);\n"
             "    r1.xy = fmin(r1.xy, hg_Params[7].zw);\n"
             "    r3.xy = fmax(r3.xy, hg_Params[7].xy);\n"
             "    r4.xy = r3.xy + hg_Params[8].xy;\n"
             "    r4.xy = r4.xy*hg_Params[8].zw;\n"
             "    r4 = hg_Texture0.sample(hg_Sampler0, r4.xy);\n"
             "    r1.xy = fmax(r1.xy, hg_Params[7].xy);\n"
             "    r2.xy = r1.xy + hg_Params[8].xy;\n"
             "    r2.xy = r2.xy*hg_Params[8].zw;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
             "    r1.y = r0.z*hg_Params[2].x + r1.z;\n"
             "    r1.xz = r5.zw*hg_Params[2].xx + r3.zw;\n"
             "    r1.xy = floor(r1.xy);\n"
             "    r1.xy = r1.xy - hg_Params[5].xy;\n"
             "    r1.xy = r1.xy + c1.yy;\n"
             "    r1.xy = r1.xy*hg_Params[6].xy;\n"
             "    r1.xy = fmin(r1.xy, hg_Params[7].zw);\n"
             "    r1.w = r0.w*hg_Params[2].x + r1.w;\n"
             "    r1.zw = floor(r1.zw);\n"
             "    r1.zw = r1.zw - hg_Params[5].xy;\n"
             "    r1.zw = r1.zw + c1.yy;\n"
             "    r5.xy = r1.zw*hg_Params[6].xy;\n"
             "    r5.xy = fmin(r5.xy, hg_Params[7].zw);\n"
             "    r2 = r2 + r4;\n"
             "    r1.xy = fmax(r1.xy, hg_Params[7].xy);\n"
             "    r1.xy = r1.xy + hg_Params[8].xy;\n"
             "    r1.xy = r1.xy*hg_Params[8].zw;\n"
             "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    r5.xy = fmax(r5.xy, hg_Params[7].xy);\n"
             "    r5.xy = r5.xy + hg_Params[8].xy;\n"
             "    r5.xy = r5.xy*hg_Params[8].zw;\n"
             "    r5 = hg_Texture0.sample(hg_Sampler0, r5.xy);\n"
             "    r1 = r2 + r1;\n"
             "    r1 = r1 + r5;\n"
             "    output.color0 = r1*c2.zzzz;\n"
             "    return output;\n"
             "}\n"
             "//MD5=59327816:e3c49bf6:e84bc72b:d9fb3ed4\n"
             "//SIG=00000000:00000000:00000000:00000000:0003:0009:0006:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000f1a\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.732100010, 2.000000000, 0.3333333433, 0.6666666865);\n"
           "    const highp vec4 c1 = vec4(3.000000000, 0.5000000000, 0.9990000129, 1.000000000);\n"
           "    const highp vec4 c2 = vec4(-1.500000000, 0.8659999967, 0.2500000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4, r5;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy + hg_ProgramLocal5.xy;\n"
           "    r1.x = r0.x*hg_ProgramLocal3.x + hg_ProgramLocal3.z;\n"
           "    r1.yw = r1.xx + hg_ProgramLocal4.xx;\n"
           "    r2.z = r0.y*hg_ProgramLocal3.y + hg_ProgramLocal3.w;\n"
           "    r2.xy = r2.zz;\n"
           "    r2.zw = r2.zz + hg_ProgramLocal4.yy;\n"
           "    r1.xz = r1.xx;\n"
           "    r3 = r1*c0.xxxx + r2;\n"
           "    r1 = r1*c0.xxxx + -r2;\n"
           "    r2 = r2 + r2;\n"
           "    r2 = floor(r2);\n"
           "    r3 = floor(r3);\n"
           "    r4 = -r2*c0.yyyy + r3;\n"
           "    r5 = r4*c0.zzzz + c0.wwww;\n"
           "    r5 = fract(r5);\n"
           "    r1 = floor(r1);\n"
           "    r1 = r2 + r1;\n"
           "    r5 = r5*c1.xxxx + c1.yyyy;\n"
           "    r5 = floor(r5);\n"
           "    r1 = r1 - r3;\n"
           "    r1 = r1 + r5;\n"
           "    r4 = r4 - r5;\n"
           "    r4 = r4*c0.zzzz;\n"
           "    r1 = vec4(greaterThanEqual(r1, c1.zzzz));\n"
           "    r4 = floor(r4);\n"
           "    r4 = r4*c0.yyyy + r1;\n"
           "    r4 = r2 + r4;\n"
           "    r2 = r2*c1.yyyy;\n"
           "    r4 = r4 + c1.wwww;\n"
           "    r3 = r4*hg_ProgramLocal0.xxxx;\n"
           "    r2 = r1*c2.xxxx + r2;\n"
           "    r2 = r2 + c1.wwww;\n"
           "    r2 = floor(r2);\n"
           "    r1 = r2 + r1;\n"
           "    r4 = r4*c1.yyyy;\n"
           "    r4 = fract(r4);\n"
           "    r1 = r1 - r4;\n"
           "    r3 = r3*c2.yyyy + hg_ProgramLocal1.xxxx;\n"
           "    r5 = r0.xxxx - r3;\n"
           "    r1 = r1*hg_ProgramLocal0.yyyy + hg_ProgramLocal1.yyyy;\n"
           "    r0 = r0.yyyy - r1;\n"
           "    r2.x = r5.y*hg_ProgramLocal2.x + r3.y;\n"
           "    r2.y = r0.y*hg_ProgramLocal2.x + r1.y;\n"
           "    r3.y = r0.x*hg_ProgramLocal2.x + r1.x;\n"
           "    r3.x = r5.x*hg_ProgramLocal2.x + r3.x;\n"
           "    r1.xy = floor(r3.xy);\n"
           "    r2.xy = floor(r2.xy);\n"
           "    r3.xy = r2.xy - hg_ProgramLocal5.xy;\n"
           "    r1.xy = r1.xy - hg_ProgramLocal5.xy;\n"
           "    r3.xy = r3.xy + c1.yy;\n"
           "    r3.xy = r3.xy*hg_ProgramLocal6.xy;\n"
           "    r1.xy = r1.xy + c1.yy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal6.xy;\n"
           "    r3.xy = min(r3.xy, hg_ProgramLocal7.zw);\n"
           "    r1.xy = min(r1.xy, hg_ProgramLocal7.zw);\n"
           "    r3.xy = max(r3.xy, hg_ProgramLocal7.xy);\n"
           "    r4.xy = r3.xy + hg_ProgramLocal8.xy;\n"
           "    r4.xy = r4.xy*hg_ProgramLocal8.zw;\n"
           "    r4 = texture2D(hg_Texture0, r4.xy);\n"
           "    r1.xy = max(r1.xy, hg_ProgramLocal7.xy);\n"
           "    r2.xy = r1.xy + hg_ProgramLocal8.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal8.zw;\n"
           "    r2 = texture2D(hg_Texture0, r2.xy);\n"
           "    r1.y = r0.z*hg_ProgramLocal2.x + r1.z;\n"
           "    r1.xz = r5.zw*hg_ProgramLocal2.xx + r3.zw;\n"
           "    r1.xy = floor(r1.xy);\n"
           "    r1.xy = r1.xy - hg_ProgramLocal5.xy;\n"
           "    r1.xy = r1.xy + c1.yy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal6.xy;\n"
           "    r1.xy = min(r1.xy, hg_ProgramLocal7.zw);\n"
           "    r1.w = r0.w*hg_ProgramLocal2.x + r1.w;\n"
           "    r1.zw = floor(r1.zw);\n"
           "    r1.zw = r1.zw - hg_ProgramLocal5.xy;\n"
           "    r1.zw = r1.zw + c1.yy;\n"
           "    r5.xy = r1.zw*hg_ProgramLocal6.xy;\n"
           "    r5.xy = min(r5.xy, hg_ProgramLocal7.zw);\n"
           "    r2 = r2 + r4;\n"
           "    r1.xy = max(r1.xy, hg_ProgramLocal7.xy);\n"
           "    r1.xy = r1.xy + hg_ProgramLocal8.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal8.zw;\n"
           "    r1 = texture2D(hg_Texture0, r1.xy);\n"
           "    r5.xy = max(r5.xy, hg_ProgramLocal7.xy);\n"
           "    r5.xy = r5.xy + hg_ProgramLocal8.xy;\n"
           "    r5.xy = r5.xy*hg_ProgramLocal8.zw;\n"
           "    r5 = texture2D(hg_Texture0, r5.xy);\n"
           "    r1 = r2 + r1;\n"
           "    r1 = r1 + r5;\n"
           "    gl_FragColor = r1*c2.zzzz;\n"
           "}\n"
           "//MD5=c3a3a991:cc1e86b8:4bc654a3:983f0a2e\n"
           "//SIG=00000000:00000000:00000000:00000000:0003:0009:0006:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcInsectEye::InitProgramDescriptor(HgcInsectEye *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcInsectEye_hgc_visible", "//Metal1.0     \n//LEN=0000000cd4\n[[ visible ]] FragmentOut HgcInsectEye_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(1.732100010, 2.000000000, 0.3333333433, 0.6666666865);\n"
    "    const float4 c1 = float4(3.000000000, 0.5000000000, 0.9990000129, 1.000000000);\n"
    "    const float4 c2 = float4(-1.500000000, 0.8659999967, 0.2500000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4, r5;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy + hg_Params[5].xy;\n"
    "    r1.x = r0.x*hg_Params[3].x + hg_Params[3].z;\n"
    "    r1.yw = r1.xx + hg_Params[4].xx;\n"
    "    r2.z = r0.y*hg_Params[3].y + hg_Params[3].w;\n"
    "    r2.xy = r2.zz;\n"
    "    r2.zw = r2.zz + hg_Params[4].yy;\n"
    "    r1.xz = r1.xx;\n"
    "    r3 = r1*c0.xxxx + r2;\n"
    "    r1 = r1*c0.xxxx + -r2;\n"
    "    r2 = r2 + r2;\n"
    "    r2 = floor(r2);\n"
    "    r3 = floor(r3);\n"
    "    r4 = -r2*c0.yyyy + r3;\n"
    "    r5 = r4*c0.zzzz + c0.wwww;\n"
    "    r5 = fract(r5);\n"
    "    r1 = floor(r1);\n"
    "    r1 = r2 + r1;\n"
    "    r5 = r5*c1.xxxx + c1.yyyy;\n"
    "    r5 = floor(r5);\n"
    "    r1 = r1 - r3;\n"
    "    r1 = r1 + r5;\n"
    "    r4 = r4 - r5;\n"
    "    r4 = r4*c0.zzzz;\n"
    "    r1 = float4(r1 >= c1.zzzz);\n"
    "    r4 = floor(r4);\n"
    "    r4 = r4*c0.yyyy + r1;\n"
    "    r4 = r2 + r4;\n"
    "    r2 = r2*c1.yyyy;\n"
    "    r4 = r4 + c1.wwww;\n"
    "    r3 = r4*hg_Params[0].xxxx;\n"
    "    r2 = r1*c2.xxxx + r2;\n"
    "    r2 = r2 + c1.wwww;\n"
    "    r2 = floor(r2);\n"
    "    r1 = r2 + r1;\n"
    "    r4 = r4*c1.yyyy;\n"
    "    r4 = fract(r4);\n"
    "    r1 = r1 - r4;\n"
    "    r3 = r3*c2.yyyy + hg_Params[1].xxxx;\n"
    "    r5 = r0.xxxx - r3;\n"
    "    r1 = r1*hg_Params[0].yyyy + hg_Params[1].yyyy;\n"
    "    r0 = r0.yyyy - r1;\n"
    "    r2.x = r5.y*hg_Params[2].x + r3.y;\n"
    "    r2.y = r0.y*hg_Params[2].x + r1.y;\n"
    "    r3.y = r0.x*hg_Params[2].x + r1.x;\n"
    "    r3.x = r5.x*hg_Params[2].x + r3.x;\n"
    "    r1.xy = floor(r3.xy);\n"
    "    r2.xy = floor(r2.xy);\n"
    "    r3.xy = r2.xy - hg_Params[5].xy;\n"
    "    r1.xy = r1.xy - hg_Params[5].xy;\n"
    "    r3.xy = r3.xy + c1.yy;\n"
    "    r3.xy = r3.xy*hg_Params[6].xy;\n"
    "    r1.xy = r1.xy + c1.yy;\n"
    "    r1.xy = r1.xy*hg_Params[6].xy;\n"
    "    r3.xy = fmin(r3.xy, hg_Params[7].zw);\n"
    "    r1.xy = fmin(r1.xy, hg_Params[7].zw);\n"
    "    r3.xy = fmax(r3.xy, hg_Params[7].xy);\n"
    "    r4.xy = r3.xy + hg_Params[8].xy;\n"
    "    r4.xy = r4.xy*hg_Params[8].zw;\n"
    "    r4 = hg_Texture0.sample(hg_Sampler0, r4.xy);\n"
    "    r1.xy = fmax(r1.xy, hg_Params[7].xy);\n"
    "    r2.xy = r1.xy + hg_Params[8].xy;\n"
    "    r2.xy = r2.xy*hg_Params[8].zw;\n"
    "    r2 = hg_Texture0.sample(hg_Sampler0, r2.xy);\n"
    "    r1.y = r0.z*hg_Params[2].x + r1.z;\n"
    "    r1.xz = r5.zw*hg_Params[2].xx + r3.zw;\n"
    "    r1.xy = floor(r1.xy);\n"
    "    r1.xy = r1.xy - hg_Params[5].xy;\n"
    "    r1.xy = r1.xy + c1.yy;\n"
    "    r1.xy = r1.xy*hg_Params[6].xy;\n"
    "    r1.xy = fmin(r1.xy, hg_Params[7].zw);\n"
    "    r1.w = r0.w*hg_Params[2].x + r1.w;\n"
    "    r1.zw = floor(r1.zw);\n"
    "    r1.zw = r1.zw - hg_Params[5].xy;\n"
    "    r1.zw = r1.zw + c1.yy;\n"
    "    r5.xy = r1.zw*hg_Params[6].xy;\n"
    "    r5.xy = fmin(r5.xy, hg_Params[7].zw);\n"
    "    r2 = r2 + r4;\n"
    "    r1.xy = fmax(r1.xy, hg_Params[7].xy);\n"
    "    r1.xy = r1.xy + hg_Params[8].xy;\n"
    "    r1.xy = r1.xy*hg_Params[8].zw;\n"
    "    r1 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    r5.xy = fmax(r5.xy, hg_Params[7].xy);\n"
    "    r5.xy = r5.xy + hg_Params[8].xy;\n"
    "    r5.xy = r5.xy*hg_Params[8].zw;\n"
    "    r5 = hg_Texture0.sample(hg_Sampler0, r5.xy);\n"
    "    r1 = r2 + r1;\n"
    "    r1 = r1 + r5;\n"
    "    output.color0 = r1*c2.zzzz;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28BE3C0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcInsectEye");
}

void sub_1B28BE3D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3052270;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28BE550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28BE5A0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28BE598);
}

_QWORD *HgcInsectEye::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcInsectEye [hgc1]");
}

uint64_t HgcInsectEye::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 8, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcInsectEye::Bind(HgcInsectEye *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HgcInsectEye *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcInsectEye::RenderTile(HgcInsectEye *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  __int128 v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int8x16_t v72;
  int8x16_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x2_t v82;
  int32x4_t v83;
  uint64_t v84;
  float32x4_t v85;
  uint64_t v86;
  int32x4_t v87;
  float32x2_t v88;
  float32x4_t *v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  int32x4_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  float32x4_t v100;
  int32x4_t v101;
  int8x16_t v102;
  unint64_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  float32x4_t v109;
  int8x16_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  float32x2_t v115;
  float32x4_t *v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  float32x4_t *v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x4_t v126;
  int32x4_t v127;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcInsectEye *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = (float32x4_t)v9;
    do
    {
      if (v10 >= 1)
      {
        v15 = 0;
        v16 = v14;
        do
        {
          v17 = *((_QWORD *)this + 51);
          v19 = *(float32x4_t *)(v17 + 64);
          v18 = *(float32x4_t *)(v17 + 80);
          v20 = vaddq_f32(v16, v18);
          v21 = *(float32x4_t *)(v17 + 32);
          v22 = *(int32x4_t *)(v17 + 48);
          v23 = (int8x16_t)vaddq_f32(vmulq_f32(v20, (float32x4_t)v22), (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
          v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1);
          v25 = (int8x16_t)vdupq_laneq_s32((int32x4_t)vaddq_f32((float32x4_t)vdupq_laneq_s32(v22, 3), vmulq_lane_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1), *(float32x2_t *)v20.f32, 1)), 2);
          v25.u64[1] = (unint64_t)vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 1), (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
          v26 = *(int8x16_t *)(v17 + 144);
          v27 = vbslq_s8(*(int8x16_t *)(v17 + 128), v23, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(v19, (float32x4_t)v23), 0));
          v28 = (float32x4_t)vbslq_s8(v26, (int8x16_t)vdupq_lane_s64(v27.i64[0], 0), v27);
          v30 = *(float32x4_t *)(v17 + 160);
          v29 = *(int8x16_t *)(v17 + 176);
          v31 = vmulq_lane_f32(v28, *(float32x2_t *)v30.f32, 1);
          v32 = vaddq_f32((float32x4_t)v25, v31);
          v33 = vsubq_f32(v31, (float32x4_t)v25);
          v34 = vaddq_f32((float32x4_t)v25, (float32x4_t)v25);
          v35 = vcvtq_f32_s32(vcvtq_s32_f32(v34));
          v36 = vsubq_f32(v35, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v35, v34)));
          v37 = vcvtq_f32_s32(vcvtq_s32_f32(v32));
          v38 = vsubq_f32(v37, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v37, v32)));
          v39 = vsubq_f32(v38, vmulq_n_f32(v36, v30.f32[0]));
          v40 = *(float32x4_t *)(v17 + 208);
          v41 = vaddq_f32(*(float32x4_t *)(v17 + 192), vmulq_f32(v40, v39));
          v42 = vcvtq_f32_s32(vcvtq_s32_f32(v41));
          v43 = vsubq_f32(v41, vsubq_f32(v42, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v42, v41))));
          v44 = vcvtq_f32_s32(vcvtq_s32_f32(v33));
          v45 = vaddq_f32(v36, vsubq_f32(v44, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v44, v33))));
          v46 = *(float32x4_t *)(v17 + 224);
          v47 = vaddq_f32(v46, vmulq_f32(*(float32x4_t *)(v17 + 240), v43));
          v48 = vcvtq_f32_s32(vcvtq_s32_f32(v47));
          v49 = vsubq_f32(v48, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v48, v47)));
          v50 = vaddq_f32(vsubq_f32(v45, v38), v49);
          v51 = vmulq_f32(v40, vsubq_f32(v39, v49));
          v52 = *(int8x16_t *)(v17 + 272);
          v53 = (float32x4_t)vandq_s8(v29, (int8x16_t)vcgeq_f32(v50, *(float32x4_t *)(v17 + 256)));
          v54 = vcvtq_f32_s32(vcvtq_s32_f32(v51));
          v55 = vaddq_f32((float32x4_t)v29, vaddq_f32(v36, vaddq_f32(v53, vmulq_n_f32(vsubq_f32(v54, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v54, v51))), v30.f32[0]))));
          v56 = *(_OWORD *)(v17 + 16);
          v57 = vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)v17));
          v58 = vaddq_f32((float32x4_t)v29, vaddq_f32(vmulq_f32(v36, v46), vmulq_laneq_f32(v53, v30, 2)));
          v59 = vcvtq_f32_s32(vcvtq_s32_f32(v58));
          v60 = vaddq_f32(v53, vsubq_f32(v59, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v59, v58))));
          v61 = vmulq_f32(v46, v55);
          v62 = vcvtq_f32_s32(vcvtq_s32_f32(v61));
          v63 = vaddq_f32(v60, vsubq_f32(vsubq_f32(v62, (float32x4_t)vandq_s8(v29, (int8x16_t)vcgtq_f32(v62, v61))), v61));
          v64 = (int32x4_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v56, 0), vmulq_n_f32(v57, *(float *)v52.i32));
          v65 = (int8x16_t)vsubq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 0), (float32x4_t)v64);
          v66 = (int32x4_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v56, 1), vmulq_lane_f32(v63, *(float32x2_t *)v17, 1));
          v67 = vsubq_f32(v24, (float32x4_t)v66);
          v68 = vmulq_n_f32(v67, v21.f32[0]);
          v69 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v17 + 128), (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v64), vmulq_lane_f32(v21, *(float32x2_t *)v65.i8, 1)), (int8x16_t)vaddq_f32((float32x4_t)v66, v68));
          v70 = (float32x4_t)vrev64q_s32((int32x4_t)v21);
          v71 = *(float32x4_t *)(v17 + 304);
          v72 = vbslq_s8(*(int8x16_t *)(v17 + 288), (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(v66), vmulq_n_f32(v70, v67.f32[0])), (int8x16_t)v64);
          v73 = vbslq_s8(*(int8x16_t *)(v17 + 128), (int8x16_t)vaddq_f32(vmulq_f32(v21, (float32x4_t)v65), (float32x4_t)v72), v72);
          v74 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v73));
          v75 = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
          v76 = vcvtq_f32_s32(vcvtq_s32_f32(v69));
          v77 = vaddq_f32(v71, vsubq_f32(vsubq_f32(v76, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v76, v69), v29, (int8x16_t)0)), v18));
          v79 = *(float32x4_t *)(v17 + 96);
          v78 = *(int8x16_t *)(v17 + 112);
          v80.i64[0] = vmulq_f32(v79, v77).u64[0];
          v80.i64[1] = v73.i64[1];
          v74.i64[0] = vmulq_f32(v79, vaddq_f32(v71, vsubq_f32(vsubq_f32(v74, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v74, (float32x4_t)v73), v29, (int8x16_t)0)), v18))).u64[0];
          v74.i64[1] = v66.i64[1];
          v81 = (float32x4_t)vextq_s8(v78, v78, 8uLL);
          v80.i64[0] = vminq_f32(v80, v81).u64[0];
          v80.i64[1] = v73.i64[1];
          v82 = (float32x2_t)vminq_f32(v74, v81).u64[0];
          v83 = (int32x4_t)vmaxq_f32(v80, (float32x4_t)v78);
          v66.i64[0] = v83.i64[0];
          v66.i64[1] = v73.i64[1];
          v84 = *((int *)a2 + 22);
          v85 = vsubq_f32((float32x4_t)v66, (float32x4_t)v9);
          v86 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v87 = vaddq_s32(vcvtq_s32_f32(v85), vcltzq_f32(v85));
            v88 = (float32x2_t)vsubq_f32(v85, vcvtq_f32_s32(v87)).u64[0];
            v89 = (float32x4_t *)(v86 + 16 * (v87.i32[0] + v87.i32[1] * (int)v84));
            v90 = vaddq_f32(*v89, vmulq_n_f32(vsubq_f32(v89[1], *v89), v88.f32[0]));
            v91 = vaddq_f32(v90, vmulq_lane_f32(vsubq_f32(vaddq_f32(v89[v84], vmulq_n_f32(vsubq_f32(v89[(int)v84 + 1], v89[v84]), v88.f32[0])), v90), v88, 1));
            *(float32x2_t *)v92.i8 = vmax_f32(v82, *(float32x2_t *)v78.i8);
            v92.i64[1] = v75;
            v93 = vsubq_f32((float32x4_t)v92, (float32x4_t)v9);
            v94 = vaddq_s32(vcvtq_s32_f32(v93), vcltzq_f32(v93));
            v93.i64[0] = vsubq_f32(v93, vcvtq_f32_s32(v94)).u64[0];
            v95 = (float32x4_t *)(v86 + 16 * (v94.i32[0] + v94.i32[1] * (int)v84));
            v96 = vaddq_f32(*v95, vmulq_n_f32(vsubq_f32(v95[1], *v95), v93.f32[0]));
            v97 = vaddq_f32(v96, vmulq_lane_f32(vsubq_f32(vaddq_f32(v95[v84], vmulq_n_f32(vsubq_f32(v95[(int)v84 + 1], v95[v84]), v93.f32[0])), v96), *(float32x2_t *)v93.f32, 1));
          }
          else
          {
            v98 = vaddq_f32(v85, v13);
            v99 = vcvtq_s32_f32(v98);
            v98.i64[0] = vaddq_s32(v99, vcgtq_f32(vcvtq_f32_s32(v99), v98)).u64[0];
            v91 = *(float32x4_t *)(v86 + 16 * (v98.i32[0] + v98.i32[1] * (int)v84));
            *(float32x2_t *)v92.i8 = vmax_f32(v82, *(float32x2_t *)v78.i8);
            v92.i64[1] = v75;
            v100 = vaddq_f32(vsubq_f32((float32x4_t)v92, (float32x4_t)v9), v13);
            v101 = vcvtq_s32_f32(v100);
            v100.i64[0] = vaddq_s32(v101, vcgtq_f32(vcvtq_f32_s32(v101), v100)).u64[0];
            v97 = *(float32x4_t *)(v86 + 16 * (v100.i32[0] + v100.i32[1] * (int)v84));
          }
          *(float32x2_t *)v102.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v70.f32, v67, 2), (float32x2_t)*(_OWORD *)&vextq_s8(v92, v9, 4uLL));
          v102.i64[1] = v75;
          v103 = vextq_s8(v65, v65, 8uLL).u64[0];
          v104.i64[0] = v103;
          v104.i64[1] = HIDWORD(v103);
          v105 = (float32x4_t)vorrq_s8(vandq_s8(v102, vmvnq_s8(v26)), vandq_s8(v26, (int8x16_t)vaddq_f32(vmulq_n_f32(v104, v21.f32[0]), (float32x4_t)vzip1q_s32((int32x4_t)vextq_s8(v73, v73, 8uLL), v83))));
          v106 = vcvtq_f32_s32(vcvtq_s32_f32(v105));
          v107.i64[0] = vmulq_f32(v79, vaddq_f32(v71, vsubq_f32(vsubq_f32(v106, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v106, v105), v29, (int8x16_t)0)), v18))).u64[0];
          v107.i64[1] = v105.i64[1];
          v107.i64[0] = vminq_f32(v107, v81).u64[0];
          v107.i64[1] = v105.i64[1];
          v108 = vbslq_s8(*(int8x16_t *)(v17 + 320), (int8x16_t)vaddq_f32(v68, v107), (int8x16_t)v107);
          v109 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v108));
          v110 = (int8x16_t)vaddq_f32(*(float32x4_t *)(v17 + 336), vsubq_f32(vsubq_f32(v109, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v109, (float32x4_t)v108), v52, (int8x16_t)0)), (float32x4_t)vdupq_lane_s64(v18.i64[0], 0)));
          v111.i64[0] = v108.i64[0];
          v111.i64[1] = v110.i64[1];
          v112 = vminq_f32(vmulq_f32(v79, (float32x4_t)vextq_s8(v110, v108, 8uLL)), v81);
          v113 = vsubq_f32(vmaxq_f32(v111, (float32x4_t)v78), (float32x4_t)v9);
          if (v5)
          {
            v114 = vaddq_s32(vcvtq_s32_f32(v113), vcltzq_f32(v113));
            v115 = (float32x2_t)vsubq_f32(v113, vcvtq_f32_s32(v114)).u64[0];
            v116 = (float32x4_t *)(v86 + 16 * (v114.i32[0] + v114.i32[1] * (int)v84));
            v117 = vaddq_f32(*v116, vmulq_n_f32(vsubq_f32(v116[1], *v116), v115.f32[0]));
            v118 = vaddq_f32(v117, vmulq_lane_f32(vsubq_f32(vaddq_f32(v116[v84], vmulq_n_f32(vsubq_f32(v116[(int)v84 + 1], v116[v84]), v115.f32[0])), v117), v115, 1));
            v119 = vsubq_f32(vmaxq_f32(v112, (float32x4_t)v78), (float32x4_t)v9);
            v120 = vaddq_s32(vcvtq_s32_f32(v119), vcltzq_f32(v119));
            v119.i64[0] = vsubq_f32(v119, vcvtq_f32_s32(v120)).u64[0];
            v121 = (float32x4_t *)(v86 + 16 * (v120.i32[0] + v120.i32[1] * (int)v84));
            v122 = vaddq_f32(*v121, vmulq_n_f32(vsubq_f32(v121[1], *v121), v119.f32[0]));
            v123 = vaddq_f32(v122, vmulq_lane_f32(vsubq_f32(vaddq_f32(v121[v84], vmulq_n_f32(vsubq_f32(v121[(int)v84 + 1], v121[v84]), v119.f32[0])), v122), *(float32x2_t *)v119.f32, 1));
          }
          else
          {
            v124 = vaddq_f32(v113, v13);
            v125 = vcvtq_s32_f32(v124);
            v124.i64[0] = vaddq_s32(v125, vcgtq_f32(vcvtq_f32_s32(v125), v124)).u64[0];
            v118 = *(float32x4_t *)(v86 + 16 * (v124.i32[0] + v124.i32[1] * (int)v84));
            v126 = vaddq_f32(vsubq_f32(vmaxq_f32(v112, (float32x4_t)v78), (float32x4_t)v9), v13);
            v127 = vcvtq_s32_f32(v126);
            v126.i64[0] = vaddq_s32(v127, vcgtq_f32(vcvtq_f32_s32(v127), v126)).u64[0];
            v123 = *(float32x4_t *)(v86 + 16 * (v126.i32[0] + v126.i32[1] * (int)v84));
          }
          *(float32x4_t *)(v11 + v15) = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v91, v97), v118), v123), *(float32x4_t *)(v17 + 352));
          v16 = vaddq_f32(v16, (float32x4_t)xmmword_1B304F230);
          v15 += 16;
        }
        while (16 * v10 != v15);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      ++v8;
      v11 += v12;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcInsectEye::GetDOD(HgcInsectEye *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcInsectEye *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcInsectEye::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcInsectEye::HgcInsectEye(HgcInsectEye *this)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v10;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F3188;
  v3 = operator new();
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_QWORD *)&v4 = 0xFFFFFFFFLL;
  *((_QWORD *)&v4 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)(v3 + 128) = xmmword_1B3050E20;
  *(_OWORD *)(v3 + 144) = v4;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v3 + 160) = xmmword_1B30533C0;
  *(_OWORD *)(v3 + 176) = _Q1;
  *(int32x4_t *)(v3 + 192) = vdupq_n_s32(0x3F2AAAABu);
  *(int32x4_t *)(v3 + 208) = vdupq_n_s32(0x3EAAAAABu);
  *(_QWORD *)&v10 = 0x3F0000003F000000;
  *((_QWORD *)&v10 + 1) = 0x3F0000003F000000;
  __asm { FMOV            V1.4S, #3.0 }
  *(_OWORD *)(v3 + 224) = v10;
  *(_OWORD *)(v3 + 240) = _Q1;
  *(int32x4_t *)(v3 + 256) = vdupq_n_s32(0x3F7FBE77u);
  *(_OWORD *)(v3 + 272) = xmmword_1B30533D0;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050FF0;
  *(_OWORD *)(v3 + 304) = xmmword_1B3052100;
  *(_OWORD *)(v3 + 320) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 336) = xmmword_1B30533E0;
  __asm { FMOV            V0.4S, #0.25 }
  *(_OWORD *)(v3 + 352) = _Q0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcInsectEye *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28BF034(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcInsectEye::~HgcInsectEye(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F3188;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C409BD2D9E4);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcInsectEye::~HgcInsectEye(this);
  HGObject::operator delete(v1);
}

uint64_t HgcInsectEye::SetParameter(HgcInsectEye *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 7)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcInsectEye::GetParameter(HgcInsectEye *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 7)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcAlphaKeyer::GetProgram(HgcAlphaKeyer *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000736\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 255.0000000, 0.5000000000, 512.0000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = (half3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r1.x = fmax(r0.x, c0.x);\n"
             "    r1.x = fmin(r1.x, half(hg_Params[3].x));\n"
             "    r1.x = r1.x*c0.y + c0.z;\n"
             "    r1.y = c0.z;\n"
             "    r2.xy = r1.xy + half2(hg_Params[5].xy);\n"
             "    r2.xy = r2.xy*half2(hg_Params[5].zw);\n"
             "    r2.xz = clamp((half2) hg_Texture2.sample(hg_Sampler2, float2(r2.xy)).xz, 0.00000h, 1.00000h);\n"
             "    r3.yz = half2(hg_Params[0].yz)*r2.zz + r0.yz;\n"
             "    r3.yz = r3.yz*c0.ww;\n"
             "    r3.yz = fmin(r3.yz, half2(hg_Params[4].yz));\n"
             "    r3.yz = fmax(r3.yz, -half2(hg_Params[4].yz));\n"
             "    r3.xy = r3.yz + half2(hg_Params[6].xy);\n"
             "    r3.xy = r3.xy*half2(hg_Params[6].zw);\n"
             "    r3.y = (half) hg_Texture1.sample(hg_Sampler1, float2(r3.xy)).y;\n"
             "    r3.x = clamp(r3.y, 0.00000h, 1.00000h);\n"
             "    r3.y = c0.z;\n"
             "    r3.x = r3.x*c0.y + c0.z;\n"
             "    r3.xy = r3.xy + half2(hg_Params[5].xy);\n"
             "    r3.xy = r3.xy*half2(hg_Params[5].zw);\n"
             "    r3.y = (half) hg_Texture2.sample(hg_Sampler2, float2(r3.xy)).y;\n"
             "    r3.x = r3.y*r2.x;\n"
             "    output.color0.xyz = float3(r0.xyz);\n"
             "    output.color0.w = clamp(float(r3.x)*hg_Params[2].w + hg_Params[1].w, 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=365ad5a4:2d70eae9:2a4a3903:d6200a4c\n"
             "//SIG=00400000:00000001:00000001:00000007:0001:0007:0004:0000:0000:0000:0002:0000:0001:03:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000006ae\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 255.0000000, 0.5000000000, 512.0000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).xyz;\n"
             "    r1.x = fmax(r0.x, c0.x);\n"
             "    r1.x = fmin(r1.x, hg_Params[3].x);\n"
             "    r1.x = r1.x*c0.y + c0.z;\n"
             "    r1.y = c0.z;\n"
             "    r1.xy = r1.xy + hg_Params[5].xy;\n"
             "    r1.xy = r1.xy*hg_Params[5].zw;\n"
             "    r1.xz = clamp(hg_Texture2.sample(hg_Sampler2, r1.xy).xz, 0.00000f, 1.00000f);\n"
             "    r2.yz = hg_Params[0].yz*r1.zz + r0.yz;\n"
             "    r2.yz = r2.yz*c0.ww;\n"
             "    r2.yz = fmin(r2.yz, hg_Params[4].yz);\n"
             "    r2.yz = fmax(r2.yz, -hg_Params[4].yz);\n"
             "    r2.xy = r2.yz + hg_Params[6].xy;\n"
             "    r2.xy = r2.xy*hg_Params[6].zw;\n"
             "    r2.y = hg_Texture1.sample(hg_Sampler1, r2.xy).y;\n"
             "    r2.x = clamp(r2.y, 0.00000f, 1.00000f);\n"
             "    r2.y = c0.z;\n"
             "    r2.x = r2.x*c0.y + c0.z;\n"
             "    r2.xy = r2.xy + hg_Params[5].xy;\n"
             "    r2.xy = r2.xy*hg_Params[5].zw;\n"
             "    r2.y = hg_Texture2.sample(hg_Sampler2, r2.xy).y;\n"
             "    r2.x = r2.y*r1.x;\n"
             "    output.color0.xyz = r0.xyz;\n"
             "    output.color0.w = clamp(r2.x*hg_Params[2].w + hg_Params[1].w, 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3bba7fab:8b2bf066:7d4960ed:1e72d98b\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0007:0003:0000:0000:0000:0002:0000:0001:03:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000708\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "uniform mediump vec4 hg_ProgramLocal5;\n"
           "uniform mediump vec4 hg_ProgramLocal6;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(0.000000000, 255.0000000, 0.5000000000, 512.0000000);\n"
           "    mediump vec4 r0, r1, r2;\n"
           "\n"
           "    r0.xyz = texture2D(hg_Texture0, hg_TexCoord0.xy).xyz;\n"
           "    r1.x = max(r0.x, c0.x);\n"
           "    r1.x = min(r1.x, hg_ProgramLocal3.x);\n"
           "    r1.x = r1.x*c0.y + c0.z;\n"
           "    r1.y = c0.z;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal5.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal5.zw;\n"
           "    r1.xz = clamp(texture2D(hg_Texture2, r1.xy).xz, vec2(0.00000), vec2(1.00000));\n"
           "    r2.yz = hg_ProgramLocal0.yz*r1.zz + r0.yz;\n"
           "    r2.yz = r2.yz*c0.ww;\n"
           "    r2.yz = min(r2.yz, hg_ProgramLocal4.yz);\n"
           "    r2.yz = max(r2.yz, -hg_ProgramLocal4.yz);\n"
           "    r2.xy = r2.yz + hg_ProgramLocal6.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal6.zw;\n"
           "    r2.y = texture2D(hg_Texture1, r2.xy).y;\n"
           "    r2.x = clamp(r2.y, 0.00000, 1.00000);\n"
           "    r2.y = c0.z;\n"
           "    r2.x = r2.x*c0.y + c0.z;\n"
           "    r2.xy = r2.xy + hg_ProgramLocal5.xy;\n"
           "    r2.xy = r2.xy*hg_ProgramLocal5.zw;\n"
           "    r2.y = texture2D(hg_Texture2, r2.xy).y;\n"
           "    r2.x = r2.y*r1.x;\n"
           "    gl_FragColor.xyz = r0.xyz;\n"
           "    gl_FragColor.w = clamp(r2.x*hg_ProgramLocal2.w + hg_ProgramLocal1.w, 0.00000, 1.00000);\n"
           "}\n"
           "//MD5=8bfb139e:c9783c82:edcf70dc:02dc9b7b\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0007:0003:0000:0000:0000:0000:0000:0001:03:0:1:0\n";
  }
}

void HgcAlphaKeyer::InitProgramDescriptor(HgcAlphaKeyer *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcAlphaKeyer_hgc_visible", "//Metal1.0     \n//LEN=0000000541\n[[ visible ]] FragmentOut HgcAlphaKeyer_hgc_visible(const constant float4* hg_Params,\n    float4 color0, \n    texture2d< float > hg_Texture1, \n    sampler hg_Sampler1, \n    texture2d< float > hg_Texture2, \n    sampler hg_Sampler2)\n{\n    const float4 c0 = float4(0.000000000, 255.0000000, 0.5000000000, 512.0000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = color0.xyz;\n"
    "    r1.x = fmax(r0.x, c0.x);\n"
    "    r1.x = fmin(r1.x, hg_Params[3].x);\n"
    "    r1.x = r1.x*c0.y + c0.z;\n"
    "    r1.y = c0.z;\n"
    "    r1.xy = r1.xy + hg_Params[5].xy;\n"
    "    r1.xy = r1.xy*hg_Params[5].zw;\n"
    "    r1.xz = clamp(hg_Texture2.sample(hg_Sampler2, r1.xy).xz, 0.00000f, 1.00000f);\n"
    "    r2.yz = hg_Params[0].yz*r1.zz + r0.yz;\n"
    "    r2.yz = r2.yz*c0.ww;\n"
    "    r2.yz = fmin(r2.yz, hg_Params[4].yz);\n"
    "    r2.yz = fmax(r2.yz, -hg_Params[4].yz);\n"
    "    r2.xy = r2.yz + hg_Params[6].xy;\n"
    "    r2.xy = r2.xy*hg_Params[6].zw;\n"
    "    r2.y = hg_Texture1.sample(hg_Sampler1, r2.xy).y;\n"
    "    r2.x = clamp(r2.y, 0.00000f, 1.00000f);\n"
    "    r2.y = c0.z;\n"
    "    r2.x = r2.x*c0.y + c0.z;\n"
    "    r2.xy = r2.xy + hg_Params[5].xy;\n"
    "    r2.xy = r2.xy*hg_Params[5].zw;\n"
    "    r2.y = hg_Texture2.sample(hg_Sampler2, r2.xy).y;\n"
    "    r2.x = r2.y*r1.x;\n"
    "    output.color0.xyz = r0.xyz;\n"
    "    output.color0.w = clamp(r2.x*hg_Params[2].w + hg_Params[1].w, 0.00000f, 1.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28BF23C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcAlphaKeyer");
}

void sub_1B28BF24C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051040;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28BF44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28BF4AC()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28BF4A4);
}

_QWORD *HgcAlphaKeyer::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcAlphaKeyer [hgc1]");
}

uint64_t HgcAlphaKeyer::BindTexture(HgcAlphaKeyer *this, HGHandler *a2, int a3)
{
  int v4;
  uint64_t result;
  int v6;
  __n128 v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  void (*v11)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128);
  int v12;
  HGHandler *v13;
  uint64_t v14;

  if (a3 == 2)
  {
    v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    v9.n128_f32[0] = (float)*((int *)a2 + 60);
    v10.n128_f32[0] = (float)*((int *)a2 + 61);
    if (v6)
    {
      v11 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v7.n128_u32[0] = 1.0;
      v8.n128_u32[0] = 1.0;
    }
    else
    {
      v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v11 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v13 = a2;
    v14 = 5;
    goto LABEL_15;
  }
  if (a3 == 1)
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    v9.n128_f32[0] = (float)*((int *)a2 + 60);
    v10.n128_f32[0] = (float)*((int *)a2 + 61);
    if (v12)
    {
      v11 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v7.n128_u32[0] = 1.0;
      v8.n128_u32[0] = 1.0;
    }
    else
    {
      v7.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v11 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v8.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v13 = a2;
    v14 = 6;
LABEL_15:
    v11(v13, v14, v9, v10, v7, v8);
    return 0;
  }
  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (v4)
    return result;
  (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  return 0;
}

uint64_t HgcAlphaKeyer::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcAlphaKeyer::RenderTile(HgcAlphaKeyer *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float32x4_t v15;
  int v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  uint64_t v33;
  float32x4_t v34;
  uint64_t v35;
  int32x4_t v36;
  float32x2_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  float32x4_t v87;
  uint64_t v88;
  int32x4_t v89;
  float32x2_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  int32x4_t v93;
  float32x4_t v94;
  int32x4_t v95;
  float32x4_t *v96;
  float32x4_t v97;
  int32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  float32x4_t *v101;
  float32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  float32x4_t *v106;
  float32x4_t v107;
  int32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  float32x4_t v115;
  int32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  int8x16_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int32x4_t v131;
  float32x2_t v132;
  float32x4_t *v133;
  float32x4_t v134;
  int32x4_t v135;
  float32x4_t *v136;
  float32x4_t v137;
  float32x4_t v138;
  int32x4_t v139;
  float32x4_t *v140;
  float32x4_t v141;
  float32x4_t v142;
  int32x4_t v143;
  float32x4_t *v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int32x4_t v148;
  float32x4_t v149;
  int32x4_t v150;
  float32x4_t v151;
  int32x4_t v152;
  float32x4_t v153;
  int32x4_t v154;
  float v155;
  float v156;
  float v157;
  float v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t *v170;
  uint64_t v171;
  int8x16_t v172;
  uint64_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  uint64_t v178;
  float32x4_t v179;
  uint64_t v180;
  int32x4_t v181;
  float32x2_t v182;
  float32x4_t *v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  int8x16_t v191;
  uint64_t v192;
  float32x4_t v193;
  uint64_t v194;
  int32x4_t v195;
  float32x2_t v196;
  float32x4_t *v197;
  float32x4_t v198;
  int32x4_t v199;
  float32x4_t v200;
  int32x4_t v201;
  int8x16_t v202;
  float32x4_t v203;
  int32x4_t v204;
  float32x2_t v205;
  float32x4_t *v206;
  float32x4_t v207;
  float32x4_t v208;
  int32x4_t v209;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcAlphaKeyer *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = *((_QWORD *)a2 + 10);
    v13 = 16 * *((int *)a2 + 22);
    v14 = 16 * *((int *)a2 + 6);
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    do
    {
      if (v10 < 4)
      {
        LODWORD(v171) = 0;
      }
      else
      {
        v16 = 0;
        v17 = 32;
        do
        {
          v18 = *(int8x16_t *)(v12 + v17 - 32);
          v19 = *(int8x16_t *)(v12 + v17 - 16);
          v20 = *(int8x16_t *)(v12 + v17);
          v21 = *(int8x16_t *)(v12 + v17 + 16);
          v22 = *((_QWORD *)this + 51);
          v24 = *(float32x4_t *)(v22 + 80);
          v23 = *(float32x4_t *)(v22 + 96);
          v25 = *(float32x4_t *)(v22 + 48);
          v26 = vminq_f32(vmaxq_f32((float32x4_t)v20, v24), v25);
          v27 = vminq_f32(vmaxq_f32((float32x4_t)v21, v24), v25);
          v28 = *(float32x4_t *)(v22 + 112);
          v29 = vaddq_f32(v23, vmulq_f32(vminq_f32(vmaxq_f32((float32x4_t)v18, v24), v25), v28));
          v30 = vaddq_f32(v23, vmulq_f32(vminq_f32(vmaxq_f32((float32x4_t)v19, v24), v25), v28));
          v31 = vaddq_f32(v23, vmulq_f32(v26, v28));
          v29.i32[1] = 0.5;
          v30.i32[1] = 0.5;
          v31.i32[1] = 0.5;
          v32 = vaddq_f32(v23, vmulq_f32(v27, v28));
          v32.i32[1] = 0.5;
          v33 = *((int *)a2 + 30);
          v34 = vsubq_f32(v29, v9);
          v35 = *((_QWORD *)a2 + 14);
          if (v5)
          {
            v36 = vaddq_s32(vcvtq_s32_f32(v34), vcltzq_f32(v34));
            v37 = (float32x2_t)vsubq_f32(v34, vcvtq_f32_s32(v36)).u64[0];
            v38 = (float32x4_t *)(v35 + 16 * (v36.i32[0] + v36.i32[1] * (int)v33));
            v39 = vaddq_f32(*v38, vmulq_n_f32(vsubq_f32(v38[1], *v38), v37.f32[0]));
            v40 = vaddq_f32(v39, vmulq_lane_f32(vsubq_f32(vaddq_f32(v38[v33], vmulq_n_f32(vsubq_f32(v38[(int)v33 + 1], v38[v33]), v37.f32[0])), v39), v37, 1));
            v41 = vsubq_f32(v30, v9);
            v42 = vaddq_s32(vcvtq_s32_f32(v41), vcltzq_f32(v41));
            v41.i64[0] = vsubq_f32(v41, vcvtq_f32_s32(v42)).u64[0];
            v43 = (float32x4_t *)(v35 + 16 * (v42.i32[0] + v42.i32[1] * (int)v33));
            v44 = vaddq_f32(*v43, vmulq_n_f32(vsubq_f32(v43[1], *v43), v41.f32[0]));
            v45 = vaddq_f32(v44, vmulq_lane_f32(vsubq_f32(vaddq_f32(v43[v33], vmulq_n_f32(vsubq_f32(v43[(int)v33 + 1], v43[v33]), v41.f32[0])), v44), *(float32x2_t *)v41.f32, 1));
            v46 = vsubq_f32(v31, v9);
            v47 = vaddq_s32(vcvtq_s32_f32(v46), vcltzq_f32(v46));
            v46.i64[0] = vsubq_f32(v46, vcvtq_f32_s32(v47)).u64[0];
            v48 = (float32x4_t *)(v35 + 16 * (v47.i32[0] + v47.i32[1] * (int)v33));
            v49 = vaddq_f32(*v48, vmulq_n_f32(vsubq_f32(v48[1], *v48), v46.f32[0]));
            v50 = vaddq_f32(v49, vmulq_lane_f32(vsubq_f32(vaddq_f32(v48[v33], vmulq_n_f32(vsubq_f32(v48[(int)v33 + 1], v48[v33]), v46.f32[0])), v49), *(float32x2_t *)v46.f32, 1));
            v51 = vsubq_f32(v32, v9);
            v52 = vaddq_s32(vcvtq_s32_f32(v51), vcltzq_f32(v51));
            v51.i64[0] = vsubq_f32(v51, vcvtq_f32_s32(v52)).u64[0];
            v53 = (float32x4_t *)(v35 + 16 * (v52.i32[0] + v52.i32[1] * (int)v33));
            v54 = vaddq_f32(*v53, vmulq_n_f32(vsubq_f32(v53[1], *v53), v51.f32[0]));
            v55 = vaddq_f32(v54, vmulq_lane_f32(vsubq_f32(vaddq_f32(v53[v33], vmulq_n_f32(vsubq_f32(v53[(int)v33 + 1], v53[v33]), v51.f32[0])), v54), *(float32x2_t *)v51.f32, 1));
          }
          else
          {
            v56 = vaddq_f32(v34, v15);
            v57 = vcvtq_s32_f32(v56);
            v56.i64[0] = vaddq_s32(v57, vcgtq_f32(vcvtq_f32_s32(v57), v56)).u64[0];
            v40 = *(float32x4_t *)(v35 + 16 * (v56.i32[0] + v56.i32[1] * (int)v33));
            v58 = vaddq_f32(vsubq_f32(v30, v9), v15);
            v59 = vcvtq_s32_f32(v58);
            v58.i64[0] = vaddq_s32(v59, vcgtq_f32(vcvtq_f32_s32(v59), v58)).u64[0];
            v45 = *(float32x4_t *)(v35 + 16 * (v58.i32[0] + v58.i32[1] * (int)v33));
            v60 = vaddq_f32(vsubq_f32(v31, v9), v15);
            v61 = vcvtq_s32_f32(v60);
            v60.i64[0] = vaddq_s32(v61, vcgtq_f32(vcvtq_f32_s32(v61), v60)).u64[0];
            v50 = *(float32x4_t *)(v35 + 16 * (v60.i32[0] + v60.i32[1] * (int)v33));
            v62 = vaddq_f32(vsubq_f32(v32, v9), v15);
            v63 = vcvtq_s32_f32(v62);
            v62.i64[0] = vaddq_s32(v63, vcgtq_f32(vcvtq_f32_s32(v63), v62)).u64[0];
            v55 = *(float32x4_t *)(v35 + 16 * (v62.i32[0] + v62.i32[1] * (int)v33));
          }
          v64 = vmaxq_f32(v40, v24);
          v65 = vmaxq_f32(v50, v24);
          v66 = vmaxq_f32(v55, v24);
          v67 = *(float32x4_t *)(v22 + 128);
          v68 = vminq_f32(v64, v67);
          v69 = vminq_f32(vmaxq_f32(v45, v24), v67);
          v70 = vminq_f32(v65, v67);
          v71 = vminq_f32(v66, v67);
          v72 = *(float32x4_t *)(v22 + 64);
          v73 = vminq_f32(vmulq_f32(v28, vaddq_f32((float32x4_t)v18, vmulq_laneq_f32(*(float32x4_t *)v22, v68, 2))), v72);
          v74 = vminq_f32(vmulq_f32(v28, vaddq_f32((float32x4_t)v19, vmulq_laneq_f32(*(float32x4_t *)v22, v69, 2))), v72);
          v75 = vminq_f32(vmulq_f32(v28, vaddq_f32((float32x4_t)v20, vmulq_laneq_f32(*(float32x4_t *)v22, v70, 2))), v72);
          v76 = vminq_f32(vmulq_f32(v28, vaddq_f32((float32x4_t)v21, vmulq_laneq_f32(*(float32x4_t *)v22, v71, 2))), v72);
          v77 = vnegq_f32(v72);
          v78 = (int8x16_t)vmaxq_f32(v73, v77);
          v79 = (int8x16_t)vmaxq_f32(v74, v77);
          v80 = (int8x16_t)vmaxq_f32(v75, v77);
          v81 = (int8x16_t)vmaxq_f32(v76, v77);
          v82 = (float32x4_t)vextq_s8(v78, v78, 4uLL);
          v83 = (float32x4_t)vextq_s8(v79, v79, 4uLL);
          v84 = (float32x4_t)vextq_s8(v80, v80, 4uLL);
          v85 = (float32x4_t)vextq_s8(v81, v81, 4uLL);
          v86 = *((int *)a2 + 26);
          v87 = vsubq_f32(v82, v9);
          v88 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v89 = vaddq_s32(vcvtq_s32_f32(v87), vcltzq_f32(v87));
            v90 = (float32x2_t)vsubq_f32(v87, vcvtq_f32_s32(v89)).u64[0];
            v91 = (float32x4_t *)(v88 + 16 * (v89.i32[0] + v89.i32[1] * (int)v86));
            v92 = vaddq_f32(*v91, vmulq_n_f32(vsubq_f32(v91[1], *v91), v90.f32[0]));
            v93 = (int32x4_t)vaddq_f32(v92, vmulq_lane_f32(vsubq_f32(vaddq_f32(v91[v86], vmulq_n_f32(vsubq_f32(v91[(int)v86 + 1], v91[v86]), v90.f32[0])), v92), v90, 1));
            v94 = vsubq_f32(v83, v9);
            v95 = vaddq_s32(vcvtq_s32_f32(v94), vcltzq_f32(v94));
            v94.i64[0] = vsubq_f32(v94, vcvtq_f32_s32(v95)).u64[0];
            v96 = (float32x4_t *)(v88 + 16 * (v95.i32[0] + v95.i32[1] * (int)v86));
            v97 = vaddq_f32(*v96, vmulq_n_f32(vsubq_f32(v96[1], *v96), v94.f32[0]));
            v98 = (int32x4_t)vaddq_f32(v97, vmulq_lane_f32(vsubq_f32(vaddq_f32(v96[v86], vmulq_n_f32(vsubq_f32(v96[(int)v86 + 1], v96[v86]), v94.f32[0])), v97), *(float32x2_t *)v94.f32, 1));
            v99 = vsubq_f32(v84, v9);
            v100 = vaddq_s32(vcvtq_s32_f32(v99), vcltzq_f32(v99));
            v99.i64[0] = vsubq_f32(v99, vcvtq_f32_s32(v100)).u64[0];
            v101 = (float32x4_t *)(v88 + 16 * (v100.i32[0] + v100.i32[1] * (int)v86));
            v102 = vaddq_f32(*v101, vmulq_n_f32(vsubq_f32(v101[1], *v101), v99.f32[0]));
            v103 = (int32x4_t)vaddq_f32(v102, vmulq_lane_f32(vsubq_f32(vaddq_f32(v101[v86], vmulq_n_f32(vsubq_f32(v101[(int)v86 + 1], v101[v86]), v99.f32[0])), v102), *(float32x2_t *)v99.f32, 1));
            v104 = vsubq_f32(v85, v9);
            v105 = vaddq_s32(vcvtq_s32_f32(v104), vcltzq_f32(v104));
            v104.i64[0] = vsubq_f32(v104, vcvtq_f32_s32(v105)).u64[0];
            v106 = (float32x4_t *)(v88 + 16 * (v105.i32[0] + v105.i32[1] * (int)v86));
            v107 = vaddq_f32(*v106, vmulq_n_f32(vsubq_f32(v106[1], *v106), v104.f32[0]));
            v108 = (int32x4_t)vaddq_f32(v107, vmulq_lane_f32(vsubq_f32(vaddq_f32(v106[v86], vmulq_n_f32(vsubq_f32(v106[(int)v86 + 1], v106[v86]), v104.f32[0])), v107), *(float32x2_t *)v104.f32, 1));
          }
          else
          {
            v109 = vaddq_f32(v87, v15);
            v110 = vcvtq_s32_f32(v109);
            v109.i64[0] = vaddq_s32(v110, vcgtq_f32(vcvtq_f32_s32(v110), v109)).u64[0];
            v93 = *(int32x4_t *)(v88 + 16 * (v109.i32[0] + v109.i32[1] * (int)v86));
            v111 = vaddq_f32(vsubq_f32(v83, v9), v15);
            v112 = vcvtq_s32_f32(v111);
            v111.i64[0] = vaddq_s32(v112, vcgtq_f32(vcvtq_f32_s32(v112), v111)).u64[0];
            v98 = *(int32x4_t *)(v88 + 16 * (v111.i32[0] + v111.i32[1] * (int)v86));
            v113 = vaddq_f32(vsubq_f32(v84, v9), v15);
            v114 = vcvtq_s32_f32(v113);
            v113.i64[0] = vaddq_s32(v114, vcgtq_f32(vcvtq_f32_s32(v114), v113)).u64[0];
            v103 = *(int32x4_t *)(v88 + 16 * (v113.i32[0] + v113.i32[1] * (int)v86));
            v115 = vaddq_f32(vsubq_f32(v85, v9), v15);
            v116 = vcvtq_s32_f32(v115);
            v115.i64[0] = vaddq_s32(v116, vcgtq_f32(vcvtq_f32_s32(v116), v115)).u64[0];
            v108 = *(int32x4_t *)(v88 + 16 * (v115.i32[0] + v115.i32[1] * (int)v86));
          }
          v117 = vmaxq_f32((float32x4_t)vrev64q_s32(v93), v24);
          v118 = vmaxq_f32((float32x4_t)vrev64q_s32(v98), v24);
          v119 = vmaxq_f32((float32x4_t)vrev64q_s32(v103), v24);
          v120 = vmaxq_f32((float32x4_t)vrev64q_s32(v108), v24);
          v121 = (int8x16_t)vminq_f32(v117, v67);
          v122 = (int8x16_t)vminq_f32(v118, v67);
          v123 = (int8x16_t)vminq_f32(v119, v67);
          v124 = (int8x16_t)vminq_f32(v120, v67);
          v121.i32[1] = 0.5;
          v122.i32[1] = 0.5;
          v123.i32[1] = 0.5;
          v124.i32[1] = 0.5;
          v125 = *(int8x16_t *)(v22 + 144);
          v126 = (float32x4_t)vbslq_s8(v125, (int8x16_t)vaddq_f32(v23, vmulq_f32(v28, (float32x4_t)v121)), v121);
          v127 = (float32x4_t)vbslq_s8(v125, (int8x16_t)vaddq_f32(v23, vmulq_f32(v28, (float32x4_t)v122)), v122);
          v128 = (float32x4_t)vbslq_s8(v125, (int8x16_t)vaddq_f32(v23, vmulq_f32(v28, (float32x4_t)v123)), v123);
          v129 = (float32x4_t)vbslq_s8(v125, (int8x16_t)vaddq_f32(v23, vmulq_f32(v28, (float32x4_t)v124)), v124);
          v130 = vsubq_f32(v126, v9);
          if (v5)
          {
            v131 = vaddq_s32(vcvtq_s32_f32(v130), vcltzq_f32(v130));
            v132 = (float32x2_t)vsubq_f32(v130, vcvtq_f32_s32(v131)).u64[0];
            v133 = (float32x4_t *)(v35 + 16 * (v131.i32[0] + v131.i32[1] * (int)v33));
            v134 = vaddq_f32(*v133, vmulq_n_f32(vsubq_f32(v133[1], *v133), v132.f32[0]));
            v130.i64[0] = vaddq_f32(v134, vmulq_lane_f32(vsubq_f32(vaddq_f32(v133[v33], vmulq_n_f32(vsubq_f32(v133[(int)v33 + 1], v133[v33]), v132.f32[0])), v134), v132, 1)).u64[0];
            v138 = vsubq_f32(v127, v9);
            v135 = vaddq_s32(vcvtq_s32_f32(v138), vcltzq_f32(v138));
            v138.i64[0] = vsubq_f32(v138, vcvtq_f32_s32(v135)).u64[0];
            v136 = (float32x4_t *)(v35 + 16 * (v135.i32[0] + v135.i32[1] * (int)v33));
            v137 = vaddq_f32(*v136, vmulq_n_f32(vsubq_f32(v136[1], *v136), v138.f32[0]));
            v138.i64[0] = vaddq_f32(v137, vmulq_lane_f32(vsubq_f32(vaddq_f32(v136[v33], vmulq_n_f32(vsubq_f32(v136[(int)v33 + 1], v136[v33]), v138.f32[0])), v137), *(float32x2_t *)v138.f32, 1)).u64[0];
            v142 = vsubq_f32(v128, v9);
            v139 = vaddq_s32(vcvtq_s32_f32(v142), vcltzq_f32(v142));
            v142.i64[0] = vsubq_f32(v142, vcvtq_f32_s32(v139)).u64[0];
            v140 = (float32x4_t *)(v35 + 16 * (v139.i32[0] + v139.i32[1] * (int)v33));
            v141 = vaddq_f32(*v140, vmulq_n_f32(vsubq_f32(v140[1], *v140), v142.f32[0]));
            v142.i64[0] = vaddq_f32(v141, vmulq_lane_f32(vsubq_f32(vaddq_f32(v140[v33], vmulq_n_f32(vsubq_f32(v140[(int)v33 + 1], v140[v33]), v142.f32[0])), v141), *(float32x2_t *)v142.f32, 1)).u64[0];
            v146 = vsubq_f32(v129, v9);
            v143 = vaddq_s32(vcvtq_s32_f32(v146), vcltzq_f32(v146));
            v146.i64[0] = vsubq_f32(v146, vcvtq_f32_s32(v143)).u64[0];
            v144 = (float32x4_t *)(v35 + 16 * (v143.i32[0] + v143.i32[1] * (int)v33));
            v145 = vaddq_f32(*v144, vmulq_n_f32(vsubq_f32(v144[1], *v144), v146.f32[0]));
            v146.i64[0] = vaddq_f32(v145, vmulq_lane_f32(vsubq_f32(vaddq_f32(v144[v33], vmulq_n_f32(vsubq_f32(v144[(int)v33 + 1], v144[v33]), v146.f32[0])), v145), *(float32x2_t *)v146.f32, 1)).u64[0];
          }
          else
          {
            v147 = vaddq_f32(v130, v15);
            v148 = vcvtq_s32_f32(v147);
            v147.i64[0] = vaddq_s32(v148, vcgtq_f32(vcvtq_f32_s32(v148), v147)).u64[0];
            v130 = *(float32x4_t *)(v35 + 16 * (v147.i32[0] + v147.i32[1] * (int)v33));
            v149 = vaddq_f32(vsubq_f32(v127, v9), v15);
            v150 = vcvtq_s32_f32(v149);
            v149.i64[0] = vaddq_s32(v150, vcgtq_f32(vcvtq_f32_s32(v150), v149)).u64[0];
            v138 = *(float32x4_t *)(v35 + 16 * (v149.i32[0] + v149.i32[1] * (int)v33));
            v151 = vaddq_f32(vsubq_f32(v128, v9), v15);
            v152 = vcvtq_s32_f32(v151);
            v151.i64[0] = vaddq_s32(v152, vcgtq_f32(vcvtq_f32_s32(v152), v151)).u64[0];
            v142 = *(float32x4_t *)(v35 + 16 * (v151.i32[0] + v151.i32[1] * (int)v33));
            v153 = vaddq_f32(vsubq_f32(v129, v9), v15);
            v154 = vcvtq_s32_f32(v153);
            v153.i64[0] = vaddq_s32(v154, vcgtq_f32(vcvtq_f32_s32(v154), v153)).u64[0];
            v146 = *(float32x4_t *)(v35 + 16 * (v153.i32[0] + v153.i32[1] * (int)v33));
          }
          LODWORD(v155) = vmulq_lane_f32(v68, *(float32x2_t *)v130.f32, 1).u32[0];
          LODWORD(v156) = vmulq_lane_f32(v69, *(float32x2_t *)v138.f32, 1).u32[0];
          LODWORD(v157) = vmulq_lane_f32(v70, *(float32x2_t *)v142.f32, 1).u32[0];
          LODWORD(v158) = vmulq_lane_f32(v71, *(float32x2_t *)v146.f32, 1).u32[0];
          v159 = *(float32x4_t *)(v22 + 16);
          v160 = *(float32x4_t *)(v22 + 32);
          v161 = vmaxq_f32(vaddq_f32(v159, vmulq_n_f32(v160, v155)), v67);
          v162 = vmaxq_f32(vaddq_f32(v159, vmulq_n_f32(v160, v156)), v67);
          v163 = vmaxq_f32(vaddq_f32(v159, vmulq_n_f32(v160, v157)), v67);
          v164 = vmaxq_f32(vaddq_f32(v159, vmulq_n_f32(v160, v158)), v67);
          v165 = (int8x16_t)vminq_f32(v161, v28);
          v166 = (int8x16_t)vminq_f32(v162, v28);
          v167 = (int8x16_t)vminq_f32(v163, v28);
          v168 = (int8x16_t)vminq_f32(v164, v28);
          v169 = *(int8x16_t *)(v22 + 160);
          v170 = (int8x16_t *)(v11 + v17);
          v170[-2] = vbslq_s8(v169, v165, v18);
          v170[-1] = vbslq_s8(v169, v166, v19);
          *v170 = vbslq_s8(v169, v167, v20);
          v170[1] = vbslq_s8(v169, v168, v21);
          v16 -= 4;
          v17 += 64;
        }
        while (v10 + v16 > 3);
        LODWORD(v171) = -v16;
      }
      if ((int)v171 < v10)
      {
        v171 = v171;
        do
        {
          v172 = *(int8x16_t *)(v12 + 16 * v171);
          v173 = *((_QWORD *)this + 51);
          v175 = *(float32x4_t *)(v173 + 80);
          v174 = *(float32x4_t *)(v173 + 96);
          v176 = *(float32x4_t *)(v173 + 112);
          v177 = vaddq_f32(v174, vmulq_f32(vminq_f32(vmaxq_f32((float32x4_t)v172, v175), *(float32x4_t *)(v173 + 48)), v176));
          v177.i32[1] = 0.5;
          v178 = *((int *)a2 + 30);
          v179 = vsubq_f32(v177, v9);
          v180 = *((_QWORD *)a2 + 14);
          if (v5)
          {
            v181 = vaddq_s32(vcvtq_s32_f32(v179), vcltzq_f32(v179));
            v182 = (float32x2_t)vsubq_f32(v179, vcvtq_f32_s32(v181)).u64[0];
            v183 = (float32x4_t *)(v180 + 16 * (v181.i32[0] + v181.i32[1] * (int)v178));
            v184 = vaddq_f32(*v183, vmulq_n_f32(vsubq_f32(v183[1], *v183), v182.f32[0]));
            v185 = vaddq_f32(v184, vmulq_lane_f32(vsubq_f32(vaddq_f32(v183[v178], vmulq_n_f32(vsubq_f32(v183[(int)v178 + 1], v183[v178]), v182.f32[0])), v184), v182, 1));
          }
          else
          {
            v186 = vaddq_f32(v179, v15);
            v187 = vcvtq_s32_f32(v186);
            v186.i64[0] = vaddq_s32(v187, vcgtq_f32(vcvtq_f32_s32(v187), v186)).u64[0];
            v185 = *(float32x4_t *)(v180 + 16 * (v186.i32[0] + v186.i32[1] * (int)v178));
          }
          v188 = vmaxq_f32(v185, v175);
          v189 = *(float32x4_t *)(v173 + 128);
          v190 = vminq_f32(v188, v189);
          v191 = (int8x16_t)vmaxq_f32(vminq_f32(vmulq_f32(v176, vaddq_f32((float32x4_t)v172, vmulq_laneq_f32(*(float32x4_t *)v173, v190, 2))), *(float32x4_t *)(v173 + 64)), vnegq_f32(*(float32x4_t *)(v173 + 64)));
          v192 = *((int *)a2 + 26);
          v193 = vsubq_f32((float32x4_t)vextq_s8(v191, v191, 4uLL), v9);
          v194 = *((_QWORD *)a2 + 12);
          if (v5)
          {
            v195 = vaddq_s32(vcvtq_s32_f32(v193), vcltzq_f32(v193));
            v196 = (float32x2_t)vsubq_f32(v193, vcvtq_f32_s32(v195)).u64[0];
            v197 = (float32x4_t *)(v194 + 16 * (v195.i32[0] + v195.i32[1] * (int)v192));
            v198 = vaddq_f32(*v197, vmulq_n_f32(vsubq_f32(v197[1], *v197), v196.f32[0]));
            v199 = (int32x4_t)vaddq_f32(v198, vmulq_lane_f32(vsubq_f32(vaddq_f32(v197[v192], vmulq_n_f32(vsubq_f32(v197[(int)v192 + 1], v197[v192]), v196.f32[0])), v198), v196, 1));
          }
          else
          {
            v200 = vaddq_f32(v193, v15);
            v201 = vcvtq_s32_f32(v200);
            v200.i64[0] = vaddq_s32(v201, vcgtq_f32(vcvtq_f32_s32(v201), v200)).u64[0];
            v199 = *(int32x4_t *)(v194 + 16 * (v200.i32[0] + v200.i32[1] * (int)v192));
          }
          v202 = (int8x16_t)vminq_f32(vmaxq_f32((float32x4_t)vrev64q_s32(v199), v175), v189);
          v202.i32[1] = 0.5;
          v203 = vsubq_f32((float32x4_t)vbslq_s8(*(int8x16_t *)(v173 + 144), (int8x16_t)vaddq_f32(v174, vmulq_f32(v176, (float32x4_t)v202)), v202), v9);
          if (v5)
          {
            v204 = vaddq_s32(vcvtq_s32_f32(v203), vcltzq_f32(v203));
            v205 = (float32x2_t)vsubq_f32(v203, vcvtq_f32_s32(v204)).u64[0];
            v206 = (float32x4_t *)(v180 + 16 * (v204.i32[0] + v204.i32[1] * (int)v178));
            v207 = vaddq_f32(*v206, vmulq_n_f32(vsubq_f32(v206[1], *v206), v205.f32[0]));
            v203.i64[0] = vaddq_f32(v207, vmulq_lane_f32(vsubq_f32(vaddq_f32(v206[v178], vmulq_n_f32(vsubq_f32(v206[(int)v178 + 1], v206[v178]), v205.f32[0])), v207), v205, 1)).u64[0];
          }
          else
          {
            v208 = vaddq_f32(v203, v15);
            v209 = vcvtq_s32_f32(v208);
            v208.i64[0] = vaddq_s32(v209, vcgtq_f32(vcvtq_f32_s32(v209), v208)).u64[0];
            v203 = *(float32x4_t *)(v180 + 16 * (v208.i32[0] + v208.i32[1] * (int)v178));
          }
          *(int8x16_t *)(v11 + 16 * v171++) = vbslq_s8(*(int8x16_t *)(v173 + 160), (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(*(float32x4_t *)(v173 + 16), vmulq_n_f32(*(float32x4_t *)(v173 + 32), vmulq_lane_f32(v190, *(float32x2_t *)v203.f32, 1).f32[0])), v189), v176), v172);
        }
        while (v171 < v10);
      }
      ++v8;
      v12 += v13;
      v11 += v14;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcAlphaKeyer::GetDOD(HgcAlphaKeyer *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 == 2 || a3 == 1)
  {
    if ((*(int (**)(HgcAlphaKeyer *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v5, v4, v7);
    }
    v6 = &HGRectInfinite;
    return *(_QWORD *)v6;
  }
  if (a3)
  {
    v6 = &HGRectNull;
    return *(_QWORD *)v6;
  }
  return v5;
}

uint64_t HgcAlphaKeyer::GetROI(HGNode *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3 == 2 || a3 == 1)
  {
    Input = HGRenderer::GetInput(a2, this, a3);
    DOD = HGRenderer::GetDOD(a2, Input);
    v9 = v8;
    if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(DOD, v9, v10);
    }
  }
  else if (a3)
  {
    return 0;
  }
  else
  {
    return *(_QWORD *)&a4.var0;
  }
  return DOD;
}

void HgcAlphaKeyer::HgcAlphaKeyer(HgcAlphaKeyer *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F33F0;
  v3 = (_OWORD *)operator new();
  v3[4] = 0u;
  v3[5] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  v3[6] = xmmword_1B3051880;
  v3[7] = xmmword_1B3053400;
  v3[8] = xmmword_1B3053410;
  v3[9] = xmmword_1B3050E20;
  v3[10] = xmmword_1B3050F70;
  v3[11] = 0u;
  v3[12] = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcAlphaKeyer *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 2, 1);
  (*(void (**)(HgcAlphaKeyer *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C04C8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcAlphaKeyer::~HgcAlphaKeyer(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F33F0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C400F93440CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcAlphaKeyer::~HgcAlphaKeyer(this);
  HGObject::operator delete(v1);
}

uint64_t HgcAlphaKeyer::SetParameter(HgcAlphaKeyer *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  float *v7;
  __n128 *v9;
  __n128 *v10;
  float *v11;
  float *v12;

  switch((int)a2)
  {
    case 0:
      v7 = (float *)*((_QWORD *)this + 51);
      if (*v7 == a3.n128_f32[0] && v7[1] == a4 && v7[2] == a5 && v7[3] == a6)
        return 0;
      *v7 = a3.n128_f32[0];
      v7[1] = a4;
      v7[2] = a5;
      v7[3] = a6;
      goto LABEL_28;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] == 0.0
        && v9[1].n128_f32[1] == 0.0
        && v9[1].n128_f32[2] == 0.0
        && v9[1].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v9[1].n128_u64[0] = 0;
      v9[1].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v9[1].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[11] = a3;
      goto LABEL_28;
    case 2:
      v10 = (__n128 *)*((_QWORD *)this + 51);
      if (v10[2].n128_f32[0] == 0.0
        && v10[2].n128_f32[1] == 0.0
        && v10[2].n128_f32[2] == 0.0
        && v10[2].n128_f32[3] == a3.n128_f32[0])
      {
        return 0;
      }
      v10[2].n128_u64[0] = 0;
      v10[2].n128_u32[3] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      v10[2].n128_u32[2] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v10[12] = a3;
      goto LABEL_28;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_28;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
LABEL_28:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcAlphaKeyer::GetParameter(HgcAlphaKeyer *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = *v3;
      a3[1] = v3[1];
      a3[2] = v3[2];
      v4 = v3 + 3;
      goto LABEL_7;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[44];
      a3[1] = v5[45];
      a3[2] = v5[46];
      v4 = v5 + 47;
      goto LABEL_7;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[48];
      a3[1] = v6[49];
      a3[2] = v6[50];
      v4 = v6 + 51;
      goto LABEL_7;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_7;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
LABEL_7:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

const char *HgcSpillRemovalDarkEdges::GetProgram(HgcSpillRemovalDarkEdges *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000078a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(8.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    const half4 c1 = half4(-0.1145000011, -0.3855000138, 0.5000000000, 0.000000000);\n"
             "    const half4 c2 = half4(0.5016000271, -0.4555999935, -0.04589999840, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4, r5, r6;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = half3(dot(r0, half4(hg_Params[3])));\n"
             "    r2.xyz = half3(dot(r0, half4(hg_Params[4])));\n"
             "    r2.xyz = abs(r2.xyz);\n"
             "    r1.xyz = r2.xyz*half3(hg_Params[5].xyz) + r1.xyz;\n"
             "    r3.x = dot(r0, half4(hg_Params[0]));\n"
             "    r3.y = dot(r0, half4(hg_Params[1]));\n"
             "    r3.z = dot(r0, half4(hg_Params[2]));\n"
             "    r4.x = dot(r0, half4(hg_Params[6]));\n"
             "    r4.y = dot(r0, half4(hg_Params[7]));\n"
             "    r4.z = dot(r0, half4(hg_Params[8]));\n"
             "    r2.xyz = clamp(r2.xyz*half3(hg_Params[9].xyz), 0.00000h, 1.00000h);\n"
             "    r3.xyz = mix(r3.xyz, r4.xyz, r2.xyz);\n"
             "    r1.xyz = clamp(r1.xyz*c0.xxx + c0.yyy, 0.00000h, 1.00000h);\n"
             "    r3.xyz = mix(r3.xyz, r0.xyz, r1.xyz);\n"
             "    r4.xyz = r0.xyz - r3.xyz;\n"
             "    r4.xyz = abs(r4.xyz);\n"
             "    r4.w = dot(r4.xyz, 1.00000h);\n"
             "    r4.w = clamp(r4.w + r4.w, 0.00000h, 1.00000h);\n"
             "    r5.x = dot(r3.xyz, c1.xyz);\n"
             "    r5.y = dot(r3.xyz, c2.xyz);\n"
             "    r5.w = fmax(r5.x, r5.y);\n"
             "    r5.w = clamp(r5.w*half(hg_Params[11].w), 0.00000h, 1.00000h);\n"
             "    r4.w = r4.w*-r5.w + r4.w;\n"
             "    r6.xyz = r3.xyz*half3(hg_Params[10].xyz);\n"
             "    output.color0.xyz = mix(float3(r3.xyz), float3(r6.xyz), float3(r4.www));\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5e46a0a4:5e1795bd:dc5c1ec8:da3b6779\n"
             "//SIG=00400000:00000001:00000001:00000001:0003:000c:0007:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000712\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(8.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
             "    const float4 c1 = float4(-0.1145000011, -0.3855000138, 0.5000000000, 0.000000000);\n"
             "    const float4 c2 = float4(0.5016000271, -0.4555999935, -0.04589999840, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = float3(dot(r0, hg_Params[3]));\n"
             "    r2.xyz = float3(dot(r0, hg_Params[4]));\n"
             "    r2.xyz = abs(r2.xyz);\n"
             "    r1.xyz = r2.xyz*hg_Params[5].xyz + r1.xyz;\n"
             "    r3.x = dot(r0, hg_Params[0]);\n"
             "    r3.y = dot(r0, hg_Params[1]);\n"
             "    r3.z = dot(r0, hg_Params[2]);\n"
             "    r4.x = dot(r0, hg_Params[6]);\n"
             "    r4.y = dot(r0, hg_Params[7]);\n"
             "    r4.z = dot(r0, hg_Params[8]);\n"
             "    r2.xyz = clamp(r2.xyz*hg_Params[9].xyz, 0.00000f, 1.00000f);\n"
             "    r3.xyz = mix(r3.xyz, r4.xyz, r2.xyz);\n"
             "    r1.xyz = clamp(r1.xyz*c0.xxx + c0.yyy, 0.00000f, 1.00000f);\n"
             "    r3.xyz = mix(r3.xyz, r0.xyz, r1.xyz);\n"
             "    r2.xyz = r0.xyz - r3.xyz;\n"
             "    r2.xyz = abs(r2.xyz);\n"
             "    r2.w = dot(r2.xyz, 1.00000f);\n"
             "    r2.w = clamp(r2.w + r2.w, 0.00000f, 1.00000f);\n"
             "    r4.x = dot(r3.xyz, c1.xyz);\n"
             "    r4.y = dot(r3.xyz, c2.xyz);\n"
             "    r4.w = fmax(r4.x, r4.y);\n"
             "    r4.w = clamp(r4.w*hg_Params[11].w, 0.00000f, 1.00000f);\n"
             "    r2.w = r2.w*-r4.w + r2.w;\n"
             "    r1.xyz = r3.xyz*hg_Params[10].xyz;\n"
             "    output.color0.xyz = mix(r3.xyz, r1.xyz, r2.www);\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=68740772:3fbd3ca3:f1de555d:ef80afb8\n"
             "//SIG=00000000:00000001:00000001:00000000:0003:000c:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000008d4\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "uniform mediump vec4 hg_ProgramLocal5;\n"
           "uniform mediump vec4 hg_ProgramLocal6;\n"
           "uniform mediump vec4 hg_ProgramLocal7;\n"
           "uniform mediump vec4 hg_ProgramLocal8;\n"
           "uniform mediump vec4 hg_ProgramLocal9;\n"
           "uniform mediump vec4 hg_ProgramLocal10;\n"
           "uniform mediump vec4 hg_ProgramLocal11;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(8.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
           "    const mediump vec4 c1 = vec4(-0.1145000011, -0.3855000138, 0.5000000000, 0.000000000);\n"
           "    const mediump vec4 c2 = vec4(0.5016000271, -0.4555999935, -0.04589999840, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = vec3(dot(r0, hg_ProgramLocal3));\n"
           "    r2.xyz = vec3(dot(r0, hg_ProgramLocal4));\n"
           "    r2.xyz = abs(r2.xyz);\n"
           "    r1.xyz = r2.xyz*hg_ProgramLocal5.xyz + r1.xyz;\n"
           "    r3.x = dot(r0, hg_ProgramLocal0);\n"
           "    r3.y = dot(r0, hg_ProgramLocal1);\n"
           "    r3.z = dot(r0, hg_ProgramLocal2);\n"
           "    r4.x = dot(r0, hg_ProgramLocal6);\n"
           "    r4.y = dot(r0, hg_ProgramLocal7);\n"
           "    r4.z = dot(r0, hg_ProgramLocal8);\n"
           "    r2.xyz = clamp(r2.xyz*hg_ProgramLocal9.xyz, vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = mix(r3.xyz, r4.xyz, r2.xyz);\n"
           "    r1.xyz = clamp(r1.xyz*c0.xxx + c0.yyy, vec3(0.00000), vec3(1.00000));\n"
           "    r3.xyz = mix(r3.xyz, r0.xyz, r1.xyz);\n"
           "    r2.xyz = r0.xyz - r3.xyz;\n"
           "    r2.xyz = abs(r2.xyz);\n"
           "    r2.w = dot(r2.xyz, vec3(1.00000));\n"
           "    r2.w = clamp(r2.w + r2.w, 0.00000, 1.00000);\n"
           "    r4.x = dot(r3.xyz, c1.xyz);\n"
           "    r4.y = dot(r3.xyz, c2.xyz);\n"
           "    r4.w = max(r4.x, r4.y);\n"
           "    r4.w = clamp(r4.w*hg_ProgramLocal11.w, 0.00000, 1.00000);\n"
           "    r2.w = r2.w*-r4.w + r2.w;\n"
           "    r1.xyz = r3.xyz*hg_ProgramLocal10.xyz;\n"
           "    gl_FragColor.xyz = mix(r3.xyz, r1.xyz, r2.www);\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=410aa58f:8c05333b:5a6fa5fb:425b4ded\n"
           "//SIG=00000000:00000001:00000001:00000000:0003:000c:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcSpillRemovalDarkEdges::InitProgramDescriptor(HgcSpillRemovalDarkEdges *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcSpillRemovalDarkEdges_hgc_visible", "//Metal1.0     \n//LEN=00000005f4\n[[ visible ]] FragmentOut HgcSpillRemovalDarkEdges_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(8.000000000, 1.000000000, 0.000000000, 0.000000000);\n"
    "    const float4 c1 = float4(-0.1145000011, -0.3855000138, 0.5000000000, 0.000000000);\n"
    "    const float4 c2 = float4(0.5016000271, -0.4555999935, -0.04589999840, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = float3(dot(r0, hg_Params[3]));\n"
    "    r2.xyz = float3(dot(r0, hg_Params[4]));\n"
    "    r2.xyz = abs(r2.xyz);\n"
    "    r1.xyz = r2.xyz*hg_Params[5].xyz + r1.xyz;\n"
    "    r3.x = dot(r0, hg_Params[0]);\n"
    "    r3.y = dot(r0, hg_Params[1]);\n"
    "    r3.z = dot(r0, hg_Params[2]);\n"
    "    r4.x = dot(r0, hg_Params[6]);\n"
    "    r4.y = dot(r0, hg_Params[7]);\n"
    "    r4.z = dot(r0, hg_Params[8]);\n"
    "    r2.xyz = clamp(r2.xyz*hg_Params[9].xyz, 0.00000f, 1.00000f);\n"
    "    r3.xyz = mix(r3.xyz, r4.xyz, r2.xyz);\n"
    "    r1.xyz = clamp(r1.xyz*c0.xxx + c0.yyy, 0.00000f, 1.00000f);\n"
    "    r3.xyz = mix(r3.xyz, r0.xyz, r1.xyz);\n"
    "    r2.xyz = r0.xyz - r3.xyz;\n"
    "    r2.xyz = abs(r2.xyz);\n"
    "    r2.w = dot(r2.xyz, 1.00000f);\n"
    "    r2.w = clamp(r2.w + r2.w, 0.00000f, 1.00000f);\n"
    "    r4.x = dot(r3.xyz, c1.xyz);\n"
    "    r4.y = dot(r3.xyz, c2.xyz);\n"
    "    r4.w = fmax(r4.x, r4.y);\n"
    "    r4.w = clamp(r4.w*hg_Params[11].w, 0.00000f, 1.00000f);\n"
    "    r2.w = r2.w*-r4.w + r2.w;\n"
    "    r1.xyz = r3.xyz*hg_Params[10].xyz;\n"
    "    output.color0.xyz = mix(r3.xyz, r1.xyz, r2.www);\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C08A4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcSpillRemovalDarkEdges");
}

void sub_1B28C08B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051E50;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C09B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C09F4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C09ECLL);
}

_QWORD *HgcSpillRemovalDarkEdges::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcSpillRemovalDarkEdges [hgc1]");
}

uint64_t HgcSpillRemovalDarkEdges::BindTexture(HgcSpillRemovalDarkEdges *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcSpillRemovalDarkEdges::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, a1[51] + 80, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, a1[51] + 96, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, a1[51] + 112, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, a1[51] + 128, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 9, a1[51] + 144, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 10, a1[51] + 160, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 11, a1[51] + 176, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcSpillRemovalDarkEdges::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  int8x16_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t *v92;
  unsigned int v93;
  float32x4_t v94;
  uint64_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int8x16_t v126;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v93 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v15 = *(float32x4_t *)(v13 + 32);
          v14 = *(float32x4_t *)(v13 + 48);
          v16 = vmulq_f32(v11, v14);
          v17 = vmulq_f32(v12, v14);
          v18 = vaddq_f32(v16, (float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL));
          v19 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          v21 = *(float32x4_t *)(v13 + 64);
          v20 = *(float32x4_t *)(v13 + 80);
          v22 = vmulq_f32(v11, v21);
          v23 = vmulq_f32(v12, v21);
          v24 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 4uLL));
          v25 = vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 4uLL));
          v26 = *(float32x4_t *)(v13 + 16);
          v27 = vmulq_f32(v11, *(float32x4_t *)v13);
          v28 = vmulq_f32(v12, *(float32x4_t *)v13);
          v29 = vabsq_f32(vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)));
          v30 = vaddq_f32(v27, (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL));
          v31 = vaddq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 4uLL));
          v32 = vabsq_f32(vaddq_f32(v25, (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL)));
          v33 = vmulq_f32(v11, v26);
          v34 = vmulq_f32(v12, v26);
          v35 = vaddq_f32(v33, (float32x4_t)vextq_s8((int8x16_t)v33, (int8x16_t)v33, 4uLL));
          v36 = vaddq_f32(v34, (float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 4uLL));
          v37 = vmulq_f32(v11, v15);
          v38 = vmulq_f32(v12, v15);
          v39 = (int8x16_t)vaddq_f32(v35, (float32x4_t)vdupq_laneq_s64((int64x2_t)v35, 1));
          v40 = vaddq_f32(v37, (float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 4uLL));
          v41 = vaddq_f32(v38, (float32x4_t)vextq_s8((int8x16_t)v38, (int8x16_t)v38, 4uLL));
          v42 = vaddq_f32(v40, (float32x4_t)vdupq_lane_s64(v40.i64[0], 0));
          v43 = *(float32x4_t *)(v13 + 96);
          v44 = *(float32x4_t *)(v13 + 112);
          v45 = vmulq_f32(v11, v43);
          v46 = vmulq_f32(v12, v43);
          v47 = vaddq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)v45, (int8x16_t)v45, 4uLL));
          v48 = vaddq_f32(v46, (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 4uLL));
          v49 = vaddq_f32(vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL)), vmulq_f32(v20, v29));
          v50 = vmulq_f32(v11, v44);
          v51 = vmulq_f32(v12, v44);
          v52 = vaddq_f32(vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)), vmulq_f32(v20, v32));
          v53 = vaddq_f32(v50, (float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL));
          v54 = *(int8x16_t *)(v13 + 192);
          v55 = *(float32x4_t *)(v13 + 208);
          v30.i64[0] = vbslq_s8(v54, (int8x16_t)vaddq_f32(v30, (float32x4_t)vdupq_laneq_s64((int64x2_t)v30, 1)), v39).u64[0];
          v56 = vaddq_f32(v51, (float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 4uLL));
          v31.i64[0] = vbslq_s8(v54, (int8x16_t)vaddq_f32(v31, (float32x4_t)vdupq_laneq_s64((int64x2_t)v31, 1)), (int8x16_t)vaddq_f32(v36, (float32x4_t)vdupq_laneq_s64((int64x2_t)v36, 1))).u64[0];
          v36.i64[0] = vbslq_s8(v54, (int8x16_t)vaddq_f32(v47, (float32x4_t)vdupq_laneq_s64((int64x2_t)v47, 1)), (int8x16_t)vaddq_f32(v53, (float32x4_t)vdupq_laneq_s64((int64x2_t)v53, 1))).u64[0];
          v57 = *(float32x4_t *)(v13 + 128);
          v58 = *(float32x4_t *)(v13 + 144);
          v56.i64[0] = vbslq_s8(v54, (int8x16_t)vaddq_f32(v48, (float32x4_t)vdupq_laneq_s64((int64x2_t)v48, 1)), (int8x16_t)vaddq_f32(v56, (float32x4_t)vdupq_laneq_s64((int64x2_t)v56, 1))).u64[0];
          v59 = vmulq_f32(v11, v57);
          v60 = vaddq_f32(v59, (float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v59, 4uLL));
          v61 = vmulq_f32(v12, v57);
          v30.i64[1] = v42.i64[1];
          v62 = vaddq_f32(v61, (float32x4_t)vextq_s8((int8x16_t)v61, (int8x16_t)v61, 4uLL));
          v31.i64[1] = vaddq_f32(v41, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v41, 0)).i64[1];
          v36.i64[1] = vaddq_f32(v60, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v60, 0)).i64[1];
          v56.i64[1] = vaddq_f32(v62, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v62, 0)).i64[1];
          v63 = vmulq_f32(v29, v58);
          v64 = vmulq_f32(v32, v58);
          v65 = vmaxq_f32(v63, v55);
          v66 = *(float32x4_t *)(v13 + 224);
          v67 = *(float32x4_t *)(v13 + 240);
          v68 = vaddq_f32(v30, vmulq_f32(vminq_f32(v65, v66), vsubq_f32(v36, v30)));
          v69 = vaddq_f32(v31, vmulq_f32(vminq_f32(vmaxq_f32(v64, v55), v66), vsubq_f32(v56, v31)));
          v70 = vaddq_f32(v68, vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v66, vmulq_f32(v49, v67)), v55), v66), vsubq_f32(v11, v68)));
          v71 = vaddq_f32(v69, vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v66, vmulq_f32(v52, v67)), v55), v66), vsubq_f32(v12, v69)));
          v72 = (int32x4_t)vabdq_f32(v11, v70);
          v73 = (int32x4_t)vabdq_f32(v12, v71);
          v74 = *(float32x4_t *)(v13 + 256);
          v75 = *(float32x4_t *)(v13 + 272);
          v76 = vmulq_f32(v70, v74);
          v77 = vmulq_f32(v71, v74);
          v78 = vmulq_f32(v70, v75);
          v79 = vaddq_f32((float32x4_t)vrev64q_s32(v72), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL)));
          v80 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v78, 4uLL), vaddq_f32(v78, (float32x4_t)vrev64q_s32((int32x4_t)v78)));
          v81 = vmulq_f32(v71, v75);
          v82 = vaddq_f32((float32x4_t)vrev64q_s32(v73), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL)));
          v83 = vbslq_s8(v54, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL), vaddq_f32(v76, (float32x4_t)vrev64q_s32((int32x4_t)v76))), v80);
          v84 = vbslq_s8(v54, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v77, (int8x16_t)v77, 8uLL), vaddq_f32(v77, (float32x4_t)vrev64q_s32((int32x4_t)v77))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v81, (int8x16_t)v81, 4uLL), vaddq_f32(v81, (float32x4_t)vrev64q_s32((int32x4_t)v81))));
          v86 = *(float32x4_t *)(v13 + 160);
          v85 = *(float32x4_t *)(v13 + 176);
          v87 = vminq_f32(vmaxq_f32(vaddq_f32(v79, v79), v67), v66);
          v88 = vminq_f32(vmaxq_f32(vaddq_f32(v82, v82), v67), v66);
          v89 = vsubq_f32(v88, vmulq_f32(v88, vminq_f32(vmaxq_f32(vmulq_f32(vmaxq_f32((float32x4_t)vextq_s8(v84, v84, 4uLL), (float32x4_t)vextq_s8(v84, v84, 8uLL)), v85), v75), v74)));
          v90 = (int8x16_t)vaddq_f32(v70, vmulq_laneq_f32(vsubq_f32(vmulq_f32(v70, v86), v70), vsubq_f32(v87, vmulq_f32(v87, vminq_f32(vmaxq_f32(vmulq_f32(vmaxq_f32((float32x4_t)vextq_s8(v83, v83, 4uLL), (float32x4_t)vextq_s8(v83, v83, 8uLL)), v85), v75), v74))), 3));
          v91 = *(int8x16_t *)(v13 + 288);
          v92 = (int8x16_t *)(v5 + v10);
          v92[-1] = vbslq_s8(v91, (int8x16_t)v11, v90);
          *v92 = vbslq_s8(v91, (int8x16_t)v12, (int8x16_t)vaddq_f32(v71, vmulq_laneq_f32(vsubq_f32(vmulq_f32(v71, v86), v71), v89, 3)));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v93 = -v9;
      }
      if ((int)v93 < v4)
      {
        v94 = *(float32x4_t *)(v6 + 16 * v93);
        v95 = *(_QWORD *)(a1 + 408);
        v96 = vmulq_f32(v94, *(float32x4_t *)(v95 + 48));
        v97 = vaddq_f32(v96, (float32x4_t)vextq_s8((int8x16_t)v96, (int8x16_t)v96, 4uLL));
        v98 = vmulq_f32(v94, *(float32x4_t *)(v95 + 64));
        v99 = vaddq_f32(v98, (float32x4_t)vextq_s8((int8x16_t)v98, (int8x16_t)v98, 4uLL));
        v100 = vabsq_f32(vaddq_f32(v99, (float32x4_t)vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL)));
        v101 = vmulq_f32(v94, *(float32x4_t *)v95);
        v102 = vaddq_f32(v101, (float32x4_t)vextq_s8((int8x16_t)v101, (int8x16_t)v101, 4uLL));
        v103 = vmulq_f32(v94, *(float32x4_t *)(v95 + 16));
        v104 = vaddq_f32(v103, (float32x4_t)vextq_s8((int8x16_t)v103, (int8x16_t)v103, 4uLL));
        v105 = vmulq_f32(v94, *(float32x4_t *)(v95 + 32));
        v106 = vaddq_f32(v105, (float32x4_t)vextq_s8((int8x16_t)v105, (int8x16_t)v105, 4uLL));
        v107 = *(int8x16_t *)(v95 + 192);
        v108 = *(float32x4_t *)(v95 + 208);
        v102.i64[0] = vbslq_s8(v107, (int8x16_t)vaddq_f32(v102, (float32x4_t)vdupq_laneq_s64((int64x2_t)v102, 1)), (int8x16_t)vaddq_f32(v104, (float32x4_t)vdupq_laneq_s64((int64x2_t)v104, 1))).u64[0];
        v102.i64[1] = vaddq_f32(v106, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v106, 0)).i64[1];
        v109 = vmulq_f32(v94, *(float32x4_t *)(v95 + 96));
        v110 = vaddq_f32(v109, (float32x4_t)vextq_s8((int8x16_t)v109, (int8x16_t)v109, 4uLL));
        v111 = vmulq_f32(v94, *(float32x4_t *)(v95 + 112));
        v112 = vaddq_f32(v111, (float32x4_t)vextq_s8((int8x16_t)v111, (int8x16_t)v111, 4uLL));
        v110.i64[0] = vbslq_s8(v107, (int8x16_t)vaddq_f32(v110, (float32x4_t)vdupq_laneq_s64((int64x2_t)v110, 1)), (int8x16_t)vaddq_f32(v112, (float32x4_t)vdupq_laneq_s64((int64x2_t)v112, 1))).u64[0];
        v113 = vmulq_f32(v94, *(float32x4_t *)(v95 + 128));
        v114 = vaddq_f32(v113, (float32x4_t)vextq_s8((int8x16_t)v113, (int8x16_t)v113, 4uLL));
        v110.i64[1] = vaddq_f32(v114, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v114, 0)).i64[1];
        v115 = *(float32x4_t *)(v95 + 224);
        v116 = *(float32x4_t *)(v95 + 240);
        v117 = vaddq_f32(v102, vmulq_f32(vminq_f32(vmaxq_f32(vmulq_f32(v100, *(float32x4_t *)(v95 + 144)), v108), v115), vsubq_f32(v110, v102)));
        v118 = vaddq_f32(v117, vmulq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v115, vmulq_f32(vaddq_f32(vaddq_f32(v97, (float32x4_t)vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL)), vmulq_f32(*(float32x4_t *)(v95 + 80), v100)), v116)), v108), v115), vsubq_f32(v94, v117)));
        v119 = (int32x4_t)vabdq_f32(v94, v118);
        v120 = vaddq_f32((float32x4_t)vrev64q_s32(v119), vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v119, 4uLL), (float32x4_t)vextq_s8((int8x16_t)v119, (int8x16_t)v119, 8uLL)));
        v121 = vminq_f32(vmaxq_f32(vaddq_f32(v120, v120), v116), v115);
        v122 = *(float32x4_t *)(v95 + 256);
        v123 = *(float32x4_t *)(v95 + 272);
        v124 = vmulq_f32(v122, v118);
        v125 = vmulq_f32(v123, v118);
        v126 = vbslq_s8(v107, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL), vaddq_f32(v124, (float32x4_t)vrev64q_s32((int32x4_t)v124))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 4uLL), vaddq_f32(v125, (float32x4_t)vrev64q_s32((int32x4_t)v125))));
        *(int8x16_t *)(v5 + 16 * v93) = vbslq_s8(*(int8x16_t *)(v95 + 288), (int8x16_t)v94, (int8x16_t)vaddq_f32(v118, vmulq_laneq_f32(vsubq_f32(vmulq_f32(v118, *(float32x4_t *)(v95 + 160)), v118), vsubq_f32(v121, vmulq_f32(v121, vminq_f32(vmaxq_f32(vmulq_f32(vmaxq_f32((float32x4_t)vextq_s8(v126, v126, 4uLL), (float32x4_t)vextq_s8(v126, v126, 8uLL)), *(float32x4_t *)(v95 + 176)), v123), v122))),
                                                           3)));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcSpillRemovalDarkEdges::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcSpillRemovalDarkEdges::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcSpillRemovalDarkEdges::HgcSpillRemovalDarkEdges(HgcSpillRemovalDarkEdges *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F3658;
  v3 = operator new();
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 192) = xmmword_1B3050E20;
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v3 + 224) = _Q0;
  *(_OWORD *)(v3 + 240) = xmmword_1B3053370;
  *(_OWORD *)(v3 + 256) = xmmword_1B3053440;
  *(_OWORD *)(v3 + 272) = xmmword_1B3053450;
  *(_OWORD *)(v3 + 288) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C12B8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcSpillRemovalDarkEdges::~HgcSpillRemovalDarkEdges(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F3658;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FDACBBE0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcSpillRemovalDarkEdges::~HgcSpillRemovalDarkEdges(this);
  HGObject::operator delete(v1);
}

uint64_t HgcSpillRemovalDarkEdges::SetParameter(HgcSpillRemovalDarkEdges *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 0xB)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcSpillRemovalDarkEdges::GetParameter(HgcSpillRemovalDarkEdges *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 0xB)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcPostKeyer::GetProgram(HgcPostKeyer *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004a5\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.500000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = clamp((half) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w, 0.00000h, 1.00000h);\n"
             "    r1.w = (half) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r2.xyz = (half3) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).xyz;\n"
             "    r2.w = r0.w*r1.w;\n"
             "    r0.xyz = r2.xyz*r2.www;\n"
             "    r0.w = r2.w;\n"
             "    r1.xyz = r2.www*c0.xxx;\n"
             "    r2.xyz = fmin(r2.xyz, r1.xyz);\n"
             "    output.color0 = select(float4(r2), float4(r0), hg_Params[0] < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=ac3c4169:2aa5ccac:b161e04f:c5644a90\n"
             "//SIG=00400000:00000007:00000007:00000007:0001:0001:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000485\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.500000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.w = clamp(hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).w, 0.00000f, 1.00000f);\n"
             "    r1.w = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).w;\n"
             "    r2.xyz = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).xyz;\n"
             "    r2.w = r0.w*r1.w;\n"
             "    r0.xyz = r2.xyz*r2.www;\n"
             "    r0.w = r2.w;\n"
             "    r1.xyz = r2.www*c0.xxx;\n"
             "    r2.xyz = fmin(r2.xyz, r1.xyz);\n"
             "    output.color0 = select(r2, r0, hg_Params[0] < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=b68eca56:efb16708:2aa9ef38:32f07454\n"
             "//SIG=00000000:00000007:00000007:00000000:0001:0001:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000496\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.500000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0.w = clamp(texture2D(hg_Texture0, hg_TexCoord0.xy).w, 0.00000, 1.00000);\n"
           "    r1.w = texture2D(hg_Texture1, hg_TexCoord1.xy).w;\n"
           "    r2.xyz = texture2D(hg_Texture2, hg_TexCoord2.xy).xyz;\n"
           "    r2.w = r0.w*r1.w;\n"
           "    r0.xyz = r2.xyz*r2.www;\n"
           "    r0.w = r2.w;\n"
           "    r1.xyz = r2.www*c0.xxx;\n"
           "    r2.xyz = min(r2.xyz, r1.xyz);\n"
           "    gl_FragColor = vec4(hg_ProgramLocal0.x < 0.00000 ? r0.x : r2.x, hg_ProgramLocal0.y < 0.00000 ? r0.y : r2."
           "y, hg_ProgramLocal0.z < 0.00000 ? r0.z : r2.z, hg_ProgramLocal0.w < 0.00000 ? r0.w : r2.w);\n"
           "}\n"
           "//MD5=355724b1:a103a094:3d401bd8:cc3312ac\n"
           "//SIG=00000000:00000007:00000007:00000000:0001:0001:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcPostKeyer::InitProgramDescriptor(HgcPostKeyer *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcPostKeyer_hgc_visible", "//Metal1.0     \n//LEN=0000000265\n[[ visible ]] FragmentOut HgcPostKeyer_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2)\n{\n    const float4 c0 = float4(1.500000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.w = clamp(color0.w, 0.00000f, 1.00000f);\n"
    "    r1.w = color1.w;\n"
    "    r2.xyz = color2.xyz;\n"
    "    r2.w = r0.w*r1.w;\n"
    "    r0.xyz = r2.xyz*r2.www;\n"
    "    r0.w = r2.w;\n"
    "    r1.xyz = r2.www*c0.xxx;\n"
    "    r2.xyz = fmin(r2.xyz, r1.xyz);\n"
    "    output.color0 = select(r2, r0, hg_Params[0] < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C14C4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcPostKeyer");
}

void sub_1B28C14D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C1654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C16A4()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C169CLL);
}

_QWORD *HgcPostKeyer::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcPostKeyer [hgc1]");
}

uint64_t HgcPostKeyer::BindTexture(HgcPostKeyer *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 2)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 2;
  }
  else if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcPostKeyer::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcPostKeyer::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(int *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 112);
    v8 = *(_QWORD *)(a2 + 96);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 80);
    v12 = 16 * *(int *)(a2 + 120);
    v13 = 16 * v5;
    do
    {
      if (v4 < 4)
      {
        LODWORD(v30) = 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(a1 + 408);
          v17 = *(float32x4_t *)(v16 + 16);
          v18 = *(float32x4_t *)(v16 + 32);
          v19 = *(int8x16_t *)(v16 + 48);
          v20 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v11 + v14), v17), v18), *(float32x4_t *)(v8 + v14));
          v21 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v11 + v14 + 16), v17), v18), *(float32x4_t *)(v8 + v14 + 16));
          v22 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v11 + v14 + 32), v17), v18), *(float32x4_t *)(v8 + v14 + 32));
          v23 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v11 + v14 + 48), v17), v18), *(float32x4_t *)(v8 + v14 + 48));
          v24 = (float32x4_t)vbslq_s8(v19, v20, *(int8x16_t *)(v7 + v14));
          v25 = (float32x4_t)vbslq_s8(v19, v21, *(int8x16_t *)(v7 + v14 + 16));
          v26 = (float32x4_t)vbslq_s8(v19, v22, *(int8x16_t *)(v7 + v14 + 32));
          v27 = (float32x4_t)vbslq_s8(v19, v23, *(int8x16_t *)(v7 + v14 + 48));
          v28 = (int8x16_t)vcgtq_f32(v17, *(float32x4_t *)v16);
          v29 = (int8x16_t *)(v6 + v14);
          *v29 = vbslq_s8(v28, vbslq_s8(v19, v20, (int8x16_t)vmulq_laneq_f32(v24, v24, 3)), vbslq_s8(v19, v20, (int8x16_t)vminq_f32(v24, vmulq_laneq_f32(v18, v24, 3))));
          v29[1] = vbslq_s8(v28, vbslq_s8(v19, v21, (int8x16_t)vmulq_laneq_f32(v25, v25, 3)), vbslq_s8(v19, v21, (int8x16_t)vminq_f32(v25, vmulq_laneq_f32(v18, v25, 3))));
          v29[2] = vbslq_s8(v28, vbslq_s8(v19, v22, (int8x16_t)vmulq_laneq_f32(v26, v26, 3)), vbslq_s8(v19, v22, (int8x16_t)vminq_f32(v26, vmulq_laneq_f32(v18, v26, 3))));
          v29[3] = vbslq_s8(v28, vbslq_s8(v19, v23, (int8x16_t)vmulq_laneq_f32(v27, v27, 3)), vbslq_s8(v19, v23, (int8x16_t)vminq_f32(v27, vmulq_laneq_f32(v18, v27, 3))));
          v15 -= 4;
          v14 += 64;
        }
        while (v4 + v15 > 3);
        LODWORD(v30) = -v15;
      }
      if ((int)v30 < v4)
      {
        v30 = v30;
        do
        {
          v31 = *(_QWORD *)(a1 + 408);
          v32 = *(float32x4_t *)(v31 + 16);
          v33 = *(float32x4_t *)(v31 + 32);
          v34 = (int8x16_t)vmulq_f32(vminq_f32(vmaxq_f32(*(float32x4_t *)(v11 + 16 * v30), v32), v33), *(float32x4_t *)(v8 + 16 * v30));
          v35 = (float32x4_t)vbslq_s8(*(int8x16_t *)(v31 + 48), v34, *(int8x16_t *)(v7 + 16 * v30));
          *(int8x16_t *)(v6 + 16 * v30++) = vbslq_s8(*(int8x16_t *)(v31 + 48), v34, vbslq_s8((int8x16_t)vcgtq_f32(v32, *(float32x4_t *)v31), (int8x16_t)vmulq_laneq_f32(v35, v35, 3), (int8x16_t)vminq_f32(v35, vmulq_laneq_f32(v33, v35, 3))));
        }
        while (v30 < v4);
      }
      ++v3;
      v8 += v9;
      v11 += v10;
      v7 += v12;
      v6 += v13;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcPostKeyer::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 3)
    return 0;
  else
    return a4;
}

uint64_t HgcPostKeyer::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 3)
    return 0;
  else
    return a4;
}

void HgcPostKeyer::HgcPostKeyer(HgcPostKeyer *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F38C0;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = xmmword_1B3053480;
  v3[3] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C1AF0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcPostKeyer::~HgcPostKeyer(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F38C0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcPostKeyer::~HgcPostKeyer(this);
  HGObject::operator delete(v1);
}

uint64_t HgcPostKeyer::SetParameter(HgcPostKeyer *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcPostKeyer::GetParameter(HgcPostKeyer *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcAnalyzeGrain::GetProgram(HgcAnalyzeGrain *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return aMetal10Len0000_300;
    else
      return aMetal10Len0000_301;
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return aGlfs20Len00000_99;
  }
}

void HgcAnalyzeGrain::InitProgramDescriptor(HgcAnalyzeGrain *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcAnalyzeGrain_hgc_visible", aMetal10Len0000_302);
}

void sub_1B28C1CD8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcAnalyzeGrain");
}

void sub_1B28C1CE8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C2128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C21D0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C21C8);
}

_QWORD *HgcAnalyzeGrain::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcAnalyzeGrain [hgc1]");
}

uint64_t HgcAnalyzeGrain::BindTexture(HgcAnalyzeGrain *this, HGHandler *a2, int a3)
{
  int v4;
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;
  void (*v9)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128);
  int v10;
  int v11;
  HGHandler *v13;
  uint64_t v14;

  if (a3 == 2)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 2, 0, 0, 0);
    HGHandler::TexCoord(a2, 7, 0, 0, 0);
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
      (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 1.0, 1.0, 0.0);
    v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    v7.n128_f32[0] = (float)*((int *)a2 + 60);
    v8.n128_f32[0] = (float)*((int *)a2 + 61);
    if (v10)
    {
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v13 = a2;
    v14 = 2;
  }
  else if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 1, 0, 0, 0);
    v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    v7.n128_f32[0] = (float)*((int *)a2 + 60);
    v8.n128_f32[0] = (float)*((int *)a2 + 61);
    if (v11)
    {
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v13 = a2;
    v14 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    HGHandler::TexCoord(a2, 0, 0, 0, 0);
    HGHandler::TexCoord(a2, 5, 0, 0, 0);
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
      (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, -1.0, -1.0, 0.0);
    HGHandler::TexCoord(a2, 3, 0, 0, 0);
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
      (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, -1.0, 0.0, 0.0);
    HGHandler::TexCoord(a2, 6, 0, 0, 0);
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
      (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, -1.0, 1.0, 0.0);
    HGHandler::TexCoord(a2, 4, 0, 0, 0);
    if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
      (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    (*(void (**)(HGHandler *, double, double, double))(*(_QWORD *)a2 + 96))(a2, 0.0, -1.0, 0.0);
    v4 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
    v7.n128_f32[0] = (float)*((int *)a2 + 60);
    v8.n128_f32[0] = (float)*((int *)a2 + 61);
    if (v4)
    {
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v5.n128_u32[0] = 1.0;
      v6.n128_u32[0] = 1.0;
    }
    else
    {
      v5.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 57) - *((_DWORD *)a2 + 55));
      v9 = *(void (**)(HGHandler *, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136);
      v6.n128_f32[0] = 1.0 / (float)(*((_DWORD *)a2 + 58) - *((_DWORD *)a2 + 56));
    }
    v13 = a2;
    v14 = 0;
  }
  v9(v13, v14, v7, v8, v5, v6);
  return 0;
}

uint64_t HgcAnalyzeGrain::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcAnalyzeGrain::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t i;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(int *)(a2 + 88);
    v5 = *(int *)(a2 + 104);
    v6 = *(int *)(a2 + 120);
    v7 = (*(_DWORD *)(a2 + 8) - *(_DWORD *)a2);
    v8 = *(_QWORD *)(a2 + 112);
    v9 = *(_QWORD *)(a2 + 96);
    v10 = 16 * v4;
    v11 = 16 * v6;
    v12 = *(_QWORD *)(a2 + 80);
    v13 = v8 + 16 * v6;
    v14 = 16 * *(int *)(a2 + 24);
    v15 = 16 * v5;
    v16 = v9 + 16 * v5;
    v17 = v12 + 16 * v4;
    v18 = ~(_DWORD)v6;
    v19 = -(int)v6;
    v20 = *(_QWORD *)(a2 + 16);
    v21 = ~(_DWORD)v5;
    v22 = -(int)v5;
    v23 = ~(_DWORD)v4;
    v24 = -(int)v4;
    do
    {
      if ((int)v7 >= 1)
      {
        v25 = 0;
        for (i = 0; i != v7; ++i)
        {
          v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v12 + 16 * (v23 + (int)i)), 0);
          v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v17 + v25 - 16), 0);
          v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v12 + 16 * (v24 + (int)i + 1)), 0);
          v30 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)(v17 + v25 + 16), 0);
          v31 = *(_QWORD *)(a1 + 408);
          v32 = *(float32x4_t *)(v31 + 16);
          v33 = vsubq_f32(vaddq_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)(v12 + 16 * (v24 + (int)i)))), vsubq_f32(vaddq_f32(v30, vaddq_f32(v28, vmulq_n_f32(*(float32x4_t *)v31, COERCE_FLOAT(*(_OWORD *)(v17 + v25))))), v27)), v29);
          v34 = vsubq_f32(vaddq_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)(v12 + v25 + 16))), vsubq_f32(vaddq_f32(v27, vaddq_f32(v28, vmulq_n_f32(*(float32x4_t *)v31, COERCE_FLOAT(*(_OWORD *)(v12 + v25 - 16))))), v30)), v29);
          v35 = vaddq_f32(vmulq_f32(v34, v34), vmulq_f32(v33, v33));
          v36 = *(float32x4_t *)(v31 + 48);
          v37 = vminq_f32(vmulq_f32(vrsqrteq_f32(v35), *(float32x4_t *)(v31 + 32)), v36);
          v38 = *(float32x4_t *)(v31 + 80);
          *(int8x16_t *)(v20 + 16 * i) = vbslq_s8(*(int8x16_t *)(v31 + 128), *(int8x16_t *)(v12 + 16 * i), vbslq_s8(*(int8x16_t *)(v31 + 112), vandq_s8((int8x16_t)v38, (int8x16_t)vcgeq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(*(float32x4_t *)(v9 + v25), *(float32x4_t *)(v9 + 16 * (v21 + (int)i))), *(float32x4_t *)(v9 + v25 - 16)), *(float32x4_t *)(v16 + v25 - 16)),
                                                                      *(float32x4_t *)(v9 + 16 * (v22 + (int)i))),
                                                                    *(float32x4_t *)(v16 + v25)),
                                                                  *(float32x4_t *)(v9 + 16 * (v22 + (int)i + 1))),
                                                                *(float32x4_t *)(v9 + v25 + 16)),
                                                              *(float32x4_t *)(v16 + v25 + 16)),
                                                            v38)),
                                             vbslq_s8(*(int8x16_t *)(v31 + 96), vandq_s8((int8x16_t)v38, (int8x16_t)vcgeq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(vmulq_f32(*(float32x4_t *)(v8 + v25), *(float32x4_t *)(v8 + 16 * (v18 + (int)i))), *(float32x4_t *)(v8 + v25 - 16)), *(float32x4_t *)(v13 + v25 - 16)), *(float32x4_t *)(v8 + 16 * (v19 + (int)i))), *(float32x4_t *)(v13 + v25)), *(float32x4_t *)(v8 + 16 * (v19 + (int)i + 1))),
                                                                  *(float32x4_t *)(v8 + v25 + 16)),
                                                                *(float32x4_t *)(v13 + v25 + 16)),
                                                              v38)),
                                               (int8x16_t)vmulq_f32(*(float32x4_t *)(v31 + 64), vmulq_f32(vminq_f32(vmulq_f32(v37, vrsqrtsq_f32(vmulq_f32(v37, v35), v37)), v36), v35)))));
          v25 += 16;
        }
      }
      v12 += v10;
      v9 += v15;
      v8 += v11;
      ++v3;
      v13 += v11;
      v20 += v14;
      v16 += v15;
      v17 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcAnalyzeGrain::GetDOD(HgcAnalyzeGrain *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 > 2)
    return 0;
  v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v5, v4, v6);
}

uint64_t HgcAnalyzeGrain::GetROI(HgcAnalyzeGrain *this, HGRenderer *a2, unsigned int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)&a4.var2;
  v5 = *(_QWORD *)&a4.var0;
  if (a3 > 2)
    return 0;
  v6 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
  return HGRectGrow(v5, v4, v6);
}

void HgcAnalyzeGrain::HgcAnalyzeGrain(HgcAnalyzeGrain *this)
{
  _QWORD *v2;
  _OWORD *v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F3B28;
  v3 = (_OWORD *)operator new();
  *v3 = xmmword_1B3051520;
  v3[1] = xmmword_1B30534A0;
  v3[2] = xmmword_1B3051BC0;
  v3[3] = xmmword_1B30534B0;
  v3[4] = xmmword_1B30534C0;
  v3[5] = xmmword_1B3051560;
  *(_QWORD *)&v4 = 0xFFFFFFFF00000000;
  *((_QWORD *)&v4 + 1) = 0xFFFFFFFF00000000;
  v3[6] = v4;
  v3[7] = xmmword_1B30503B0;
  v3[8] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcAnalyzeGrain *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  (*(void (**)(HgcAnalyzeGrain *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 1, 1);
  (*(void (**)(HgcAnalyzeGrain *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, 2, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28C2AB0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcAnalyzeGrain::~HgcAnalyzeGrain(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F3B28;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40265AC83CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcAnalyzeGrain::~HgcAnalyzeGrain(this);
  HGObject::operator delete(v1);
}

uint64_t HgcAnalyzeGrain::SetParameter(HgcAnalyzeGrain *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcAnalyzeGrain::GetParameter(HgcAnalyzeGrain *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcLocateScreen::GetProgram(HgcLocateScreen *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000480\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.yzw = (half3) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).yzw;\n"
             "    r1.xyz = r0.yyy;\n"
             "    r2.xyz = r0.zzz;\n"
             "    r3.xyz = atan2(r2.xyz, r1.xyz);\n"
             "    r1.xyz = r1.xyz*r1.xyz;\n"
             "    r2.xyz = r2.xyz*r2.xyz + r1.xyz;\n"
             "    r2.xyz = sqrt(r2.xyz);\n"
             "    r2.xyz = half3(r2.xyz > half3(hg_Params[2].xyz));\n"
             "    r1.xyz = half3(r3.xyz < half3(hg_Params[1].xyz));\n"
             "    r3.xyz = half3(r3.xyz > half3(hg_Params[0].xyz));\n"
             "    r3.xyz = r3.xyz + r1.xyz;\n"
             "    r3.xyz = half3(r3.xyz >= c0.xxx);\n"
             "    r3.xyz = r2.xyz + r3.xyz;\n"
             "    output.color0.xyz = float3(float3(r3.xyz) >= float3(c0.xxx));\n"
             "    output.color0.w = float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=bd50a921:07ba7b16:f8789052:b7eb8a35\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0003:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000454\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.yzw = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).yzw;\n"
             "    r1.xyz = r0.yyy;\n"
             "    r2.xyz = r0.zzz;\n"
             "    r3.xyz = atan2(r2.xyz, r1.xyz);\n"
             "    r1.xyz = r1.xyz*r1.xyz;\n"
             "    r2.xyz = r2.xyz*r2.xyz + r1.xyz;\n"
             "    r2.xyz = sqrt(r2.xyz);\n"
             "    r2.xyz = float3(r2.xyz > hg_Params[2].xyz);\n"
             "    r1.xyz = float3(r3.xyz < hg_Params[1].xyz);\n"
             "    r3.xyz = float3(r3.xyz > hg_Params[0].xyz);\n"
             "    r3.xyz = r3.xyz + r1.xyz;\n"
             "    r3.xyz = float3(r3.xyz >= c0.xxx);\n"
             "    r3.xyz = r2.xyz + r3.xyz;\n"
             "    output.color0.xyz = float3(r3.xyz >= c0.xxx);\n"
             "    output.color0.w = r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=6a3f04bd:04c57ffc:fc3da61c:898fd344\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004af\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3;\n"
           "\n"
           "    r0.yzw = texture2D(hg_Texture0, hg_TexCoord0.xy).yzw;\n"
           "    r1.xyz = r0.yyy;\n"
           "    r2.xyz = r0.zzz;\n"
           "    r3.xyz = atan(r2.xyz, r1.xyz);\n"
           "    r1.xyz = r1.xyz*r1.xyz;\n"
           "    r2.xyz = r2.xyz*r2.xyz + r1.xyz;\n"
           "    r2.xyz = sqrt(r2.xyz);\n"
           "    r2.xyz = vec3(greaterThan(r2.xyz, hg_ProgramLocal2.xyz));\n"
           "    r1.xyz = vec3(lessThan(r3.xyz, hg_ProgramLocal1.xyz));\n"
           "    r3.xyz = vec3(greaterThan(r3.xyz, hg_ProgramLocal0.xyz));\n"
           "    r3.xyz = r3.xyz + r1.xyz;\n"
           "    r3.xyz = vec3(greaterThanEqual(r3.xyz, c0.xxx));\n"
           "    r3.xyz = r2.xyz + r3.xyz;\n"
           "    gl_FragColor.xyz = vec3(greaterThanEqual(r3.xyz, c0.xxx));\n"
           "    gl_FragColor.w = r0.w;\n"
           "}\n"
           "//MD5=6dd6ceec:e52b1134:8f219427:4ceff825\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0003:0004:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcLocateScreen::InitProgramDescriptor(HgcLocateScreen *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcLocateScreen_hgc_visible", "//Metal1.0     \n//LEN=000000032d\n[[ visible ]] FragmentOut HgcLocateScreen_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(2.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.yzw = color0.yzw;\n"
    "    r1.xyz = r0.yyy;\n"
    "    r2.xyz = r0.zzz;\n"
    "    r3.xyz = atan2(r2.xyz, r1.xyz);\n"
    "    r1.xyz = r1.xyz*r1.xyz;\n"
    "    r2.xyz = r2.xyz*r2.xyz + r1.xyz;\n"
    "    r2.xyz = sqrt(r2.xyz);\n"
    "    r2.xyz = float3(r2.xyz > hg_Params[2].xyz);\n"
    "    r1.xyz = float3(r3.xyz < hg_Params[1].xyz);\n"
    "    r3.xyz = float3(r3.xyz > hg_Params[0].xyz);\n"
    "    r3.xyz = r3.xyz + r1.xyz;\n"
    "    r3.xyz = float3(r3.xyz >= c0.xxx);\n"
    "    r3.xyz = r2.xyz + r3.xyz;\n"
    "    output.color0.xyz = float3(r3.xyz >= c0.xxx);\n"
    "    output.color0.w = r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C2C04()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcLocateScreen");
}

void sub_1B28C2C14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C2D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C2D54()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C2D4CLL);
}

_QWORD *HgcLocateScreen::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcLocateScreen [hgc1]");
}

uint64_t HgcLocateScreen::BindTexture(HgcLocateScreen *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcLocateScreen::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcLocateScreen::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  int8x16_t v65;
  int32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t *v82;
  unsigned int v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  uint64_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  int32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v83 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v11 = *(float32x4_t *)(v6 + v10);
          v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1);
          v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1);
          v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2);
          v16 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2);
          v17 = vabsq_f32(v15);
          v18 = vabsq_f32(v16);
          v19 = vabsq_f32(v13);
          v20 = vabsq_f32(v14);
          v21 = vmaxq_f32(v19, v17);
          v22 = vmaxq_f32(v20, v18);
          v23 = vminq_f32(v19, v17);
          v24 = vminq_f32(v20, v18);
          v25 = vsubq_f32(v17, v19);
          v26 = vsubq_f32(v18, v20);
          v27 = *(_QWORD *)(a1 + 408);
          v29 = *(float32x4_t *)(v27 + 32);
          v28 = *(float32x4_t *)(v27 + 48);
          v30 = vmaxq_f32(v21, v28);
          v31 = vmaxq_f32(v22, v28);
          v32 = *(float32x4_t *)(v27 + 64);
          v33 = *(float32x4_t *)(v27 + 80);
          v34 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v30), v32), v33);
          v35 = vmaxq_f32(vmulq_f32(vrecpeq_f32(v31), v32), v33);
          v36 = *(float32x4_t *)(v27 + 96);
          v37 = *(float32x4_t *)(v27 + 112);
          v38 = vminq_f32(v34, v36);
          v39 = vminq_f32(v35, v36);
          v40 = vmulq_f32(v23, vmulq_f32(v38, vrecpsq_f32(v30, v38)));
          v41 = vmulq_f32(v24, vmulq_f32(v39, vrecpsq_f32(v31, v39)));
          v42 = vmulq_f32(v40, v40);
          v43 = vmulq_f32(v41, v41);
          v44 = *(float32x4_t *)(v27 + 128);
          v45 = *(float32x4_t *)(v27 + 144);
          v46 = vmulq_f32(v42, v44);
          v47 = vaddq_f32(v45, vmulq_f32(v43, vaddq_f32(v37, vmulq_f32(v44, v43))));
          v48 = vmulq_f32(v42, vaddq_f32(v45, vmulq_f32(v42, vaddq_f32(v37, v46))));
          v49 = *(float32x4_t *)(v27 + 160);
          v50 = *(float32x4_t *)(v27 + 176);
          v51 = vaddq_f32(v50, vmulq_f32(v42, vaddq_f32(v49, v48)));
          v52 = vaddq_f32(v50, vmulq_f32(v43, vaddq_f32(v49, vmulq_f32(v43, v47))));
          v53 = *(float32x4_t *)(v27 + 192);
          v54 = *(float32x4_t *)(v27 + 208);
          v55 = vmulq_f32(v40, vaddq_f32(v53, vmulq_f32(v42, v51)));
          v56 = vmulq_f32(v41, vaddq_f32(v53, vmulq_f32(v43, v52)));
          v57 = *(float32x4_t *)(v27 + 224);
          v58 = *(float32x4_t *)(v27 + 240);
          v59 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, v57), (int8x16_t)vsubq_f32(v54, v55), (int8x16_t)v55);
          v60 = (int8x16_t)vcgtq_f32(v57, v14);
          v61 = *(int8x16_t *)(v27 + 256);
          v62 = *(int8x16_t *)(v27 + 272);
          v63 = vandq_s8(v61, (int8x16_t)v15);
          v64 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v26, v57), (int8x16_t)vsubq_f32(v54, v56), (int8x16_t)v56);
          v65 = vandq_s8(v61, (int8x16_t)v16);
          v66 = (int32x4_t)vmulq_f32(v12, v12);
          v67 = (int32x4_t)vmulq_f32(v11, v11);
          v68 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v66, 2), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.i8, 1));
          v69 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v67, 2), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.i8, 1));
          v70 = vbslq_s8((int8x16_t)vcgtq_f32(v57, v13), (int8x16_t)vsubq_f32(v58, v59), (int8x16_t)v59);
          v71 = vminq_f32(vmulq_f32(v32, vrsqrteq_f32(v68)), v36);
          v72 = vminq_f32(vmulq_f32(v32, vrsqrteq_f32(v69)), v36);
          v73 = (float32x4_t)veorq_s8(v63, v70);
          v74 = (float32x4_t)veorq_s8(v65, vbslq_s8(v60, (int8x16_t)vsubq_f32(v58, v64), (int8x16_t)v64));
          v75 = (float32x4_t)vandq_s8(v62, (int8x16_t)vcgtq_f32(vmulq_f32(v68, vminq_f32(vmulq_f32(v71, vrsqrtsq_f32(vmulq_f32(v68, v71), v71)), v36)), v29));
          v76 = *(float32x4_t *)(v27 + 16);
          v77 = (int8x16_t)vcgtq_f32(v76, v73);
          v78 = vaddq_f32((float32x4_t)vandq_s8(v62, (int8x16_t)vcgtq_f32(v76, v74)), (float32x4_t)vandq_s8(v62, (int8x16_t)vcgtq_f32(v74, *(float32x4_t *)v27)));
          v79 = *(float32x4_t *)(v27 + 288);
          v80 = *(int8x16_t *)(v27 + 304);
          v81 = vbslq_s8(v80, (int8x16_t)v12, vandq_s8(v62, (int8x16_t)vcgeq_f32(vaddq_f32(v75, (float32x4_t)vandq_s8(v62, (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vandq_s8(v62, v77), (float32x4_t)vandq_s8(v62, (int8x16_t)vcgtq_f32(v73, *(float32x4_t *)v27))), v79))), v79)));
          v82 = (int8x16_t *)(v5 + v10);
          v82[-1] = v81;
          *v82 = vbslq_s8(v80, (int8x16_t)v11, vandq_s8(v62, (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vandq_s8(v62, (int8x16_t)vcgtq_f32(vmulq_f32(v69, vminq_f32(vmulq_f32(v72, vrsqrtsq_f32(vmulq_f32(v69, v72), v72)), v36)), v29)), (float32x4_t)vandq_s8(v62, (int8x16_t)vcgeq_f32(v78, v79))), v79)));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v83 = -v9;
      }
      if ((int)v83 < v4)
      {
        v84 = *(float32x4_t *)(v6 + 16 * v83);
        v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1);
        v86 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2);
        v87 = vabsq_f32(v86);
        v88 = vabsq_f32(v85);
        v89 = vmaxq_f32(v88, v87);
        v90 = vminq_f32(v88, v87);
        v91 = vsubq_f32(v87, v88);
        v92 = *(_QWORD *)(a1 + 408);
        v93 = vmaxq_f32(v89, *(float32x4_t *)(v92 + 48));
        v94 = *(float32x4_t *)(v92 + 64);
        v95 = *(float32x4_t *)(v92 + 96);
        v96 = vminq_f32(vmaxq_f32(vmulq_f32(vrecpeq_f32(v93), v94), *(float32x4_t *)(v92 + 80)), v95);
        v97 = vmulq_f32(v90, vmulq_f32(v96, vrecpsq_f32(v93, v96)));
        v98 = vmulq_f32(v97, v97);
        v99 = vmulq_f32(v97, vaddq_f32(*(float32x4_t *)(v92 + 192), vmulq_f32(v98, vaddq_f32(*(float32x4_t *)(v92 + 176), vmulq_f32(v98, vaddq_f32(*(float32x4_t *)(v92 + 160), vmulq_f32(v98, vaddq_f32(*(float32x4_t *)(v92 + 144), vmulq_f32(v98, vaddq_f32(*(float32x4_t *)(v92 + 112), vmulq_f32(*(float32x4_t *)(v92 + 128), v98)))))))))));
        v100 = *(float32x4_t *)(v92 + 224);
        v101 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v91, v100), (int8x16_t)vsubq_f32(*(float32x4_t *)(v92 + 208), v99), (int8x16_t)v99);
        v102 = *(int8x16_t *)(v92 + 272);
        v103 = (float32x4_t)veorq_s8(vandq_s8(*(int8x16_t *)(v92 + 256), (int8x16_t)v86), vbslq_s8((int8x16_t)vcgtq_f32(v100, v85), (int8x16_t)vsubq_f32(*(float32x4_t *)(v92 + 240), v101), (int8x16_t)v101));
        v104 = (int32x4_t)vmulq_f32(v84, v84);
        v105 = vaddq_f32((float32x4_t)vdupq_laneq_s32(v104, 2), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.i8, 1));
        v106 = vminq_f32(vmulq_f32(v94, vrsqrteq_f32(v105)), v95);
        *(int8x16_t *)(v5 + 16 * v83) = vbslq_s8(*(int8x16_t *)(v92 + 304), (int8x16_t)v84, vandq_s8(v102, (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(vmulq_f32(v105, vminq_f32(vmulq_f32(v106, vrsqrtsq_f32(vmulq_f32(v105, v106), v106)), v95)), *(float32x4_t *)(v92 + 32))),
                                                             (float32x4_t)vandq_s8(v102, (int8x16_t)vcgeq_f32(vaddq_f32((float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(v103, *(float32x4_t *)v92)), (float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(*(float32x4_t *)(v92 + 16), v103))), *(float32x4_t *)(v92 + 288)))), *(float32x4_t *)(v92 + 288))));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcLocateScreen::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcLocateScreen::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcLocateScreen::HgcLocateScreen(HgcLocateScreen *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F3D90;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = xmmword_1B3051610;
  *(_OWORD *)(v3 + 64) = xmmword_1B3051BC0;
  *(_OWORD *)(v3 + 80) = xmmword_1B3052320;
  *(int32x4_t *)(v3 + 96) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 112) = xmmword_1B30534F0;
  *(_OWORD *)(v3 + 128) = xmmword_1B3053500;
  *(_OWORD *)(v3 + 144) = xmmword_1B3053510;
  *(_OWORD *)(v3 + 160) = xmmword_1B3053520;
  *(_OWORD *)(v3 + 176) = xmmword_1B3053530;
  *(_OWORD *)(v3 + 192) = xmmword_1B3053540;
  *(_OWORD *)(v3 + 208) = xmmword_1B3053550;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_OWORD *)(v3 + 240) = xmmword_1B3053560;
  *(_OWORD *)(v3 + 256) = xmmword_1B3053570;
  *(_OWORD *)(v3 + 272) = xmmword_1B3051560;
  *(_OWORD *)(v3 + 288) = xmmword_1B3051520;
  *(_OWORD *)(v3 + 304) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C33C0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcLocateScreen::~HgcLocateScreen(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F3D90;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B2834900);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcLocateScreen::~HgcLocateScreen(this);
  HGObject::operator delete(v1);
}

uint64_t HgcLocateScreen::SetParameter(HgcLocateScreen *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcLocateScreen::GetParameter(HgcLocateScreen *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcInvertAlpha::GetProgram(HgcInvertAlpha *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000002b2\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = float3(r0.xyz);\n"
             "    output.color0.w = float(c0.w) - float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=4195638f:c7609322:8fa04399:e21f718d\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000298\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0.xyz = r0.xyz;\n"
             "    output.color0.w = c0.w - r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=ee7da282:6172f56e:8cc51801:07937604\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0000:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=000000023e\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor.xyz = r0.xyz;\n"
           "    gl_FragColor.w = c0.w - r0.w;\n"
           "}\n"
           "//MD5=dcb63e70:610d1313:d4058fd4:49e585a2\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0000:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcInvertAlpha::InitProgramDescriptor(HgcInvertAlpha *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcInvertAlpha_hgc_visible", "//Metal1.0     \n//LEN=0000000170\n[[ visible ]] FragmentOut HgcInvertAlpha_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    output.color0.xyz = r0.xyz;\n"
    "    output.color0.w = c0.w - r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C35CC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcInvertAlpha");
}

void sub_1B28C35DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C36DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C371C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C3714);
}

_QWORD *HgcInvertAlpha::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcInvertAlpha [hgc1]");
}

uint64_t HgcInvertAlpha::BindTexture(HgcInvertAlpha *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcInvertAlpha::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcInvertAlpha::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  uint64_t v18;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v18) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(_QWORD *)(a1 + 408);
          v12 = *(int8x16_t *)(v11 + 16);
          v13 = vbslq_s8(v12, (int8x16_t)vsubq_f32(*(float32x4_t *)v11, *(float32x4_t *)(v6 + v10 - 32)), *(int8x16_t *)(v6 + v10 - 32));
          v14 = vbslq_s8(v12, (int8x16_t)vsubq_f32(*(float32x4_t *)v11, *(float32x4_t *)(v6 + v10 - 16)), *(int8x16_t *)(v6 + v10 - 16));
          v15 = vbslq_s8(v12, (int8x16_t)vsubq_f32(*(float32x4_t *)v11, *(float32x4_t *)(v6 + v10)), *(int8x16_t *)(v6 + v10));
          v16 = vbslq_s8(v12, (int8x16_t)vsubq_f32(*(float32x4_t *)v11, *(float32x4_t *)(v6 + v10 + 16)), *(int8x16_t *)(v6 + v10 + 16));
          v17 = (int8x16_t *)(v5 + v10);
          v17[-2] = v13;
          v17[-1] = v14;
          *v17 = v15;
          v17[1] = v16;
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v18) = -v9;
      }
      if ((int)v18 < v4)
      {
        v18 = v18;
        do
        {
          *(int8x16_t *)(v5 + 16 * v18) = vbslq_s8(*(int8x16_t *)(*(_QWORD *)(a1 + 408) + 16), (int8x16_t)vsubq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 408), *(float32x4_t *)(v6 + 16 * v18)), *(int8x16_t *)(v6 + 16 * v18));
          ++v18;
        }
        while (v18 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcInvertAlpha::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcInvertAlpha::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcInvertAlpha::HgcInvertAlpha(HgcInvertAlpha *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F3FF8;
  v3 = (_OWORD *)operator new();
  *v3 = xmmword_1B304EFF0;
  v3[1] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C39A4(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcInvertAlpha::~HgcInvertAlpha(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F3FF8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcInvertAlpha::~HgcInvertAlpha(this);
  HGObject::operator delete(v1);
}

uint64_t HgcInvertAlpha::SetParameter(HgcInvertAlpha *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcInvertAlpha::GetParameter(HgcInvertAlpha *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcShrinkGrowMatte::GetProgram(HgcShrinkGrowMatte *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000026a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = clamp(hg_Params[0].xxxx*float4(r0) + hg_Params[0].yyyy, 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=6d5f7ded:36457e40:0a4c039f:248cb26e\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000025c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    output.color0 = clamp(hg_Params[0].xxxx*r0 + hg_Params[0].yyyy, 0.00000f, 1.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=027d7c82:092432fd:47560312:0547aee7\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000238\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    gl_FragColor = clamp(hg_ProgramLocal0.xxxx*r0 + hg_ProgramLocal0.yyyy, vec4(0.00000), vec4(1.00000));\n"
           "}\n"
           "//MD5=54873a33:253411f4:86d85163:be7f0eb8\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcShrinkGrowMatte::InitProgramDescriptor(HgcShrinkGrowMatte *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcShrinkGrowMatte_hgc_visible", "//Metal1.0     \n//LEN=0000000138\n[[ visible ]] FragmentOut HgcShrinkGrowMatte_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    output.color0 = clamp(hg_Params[0].xxxx*r0 + hg_Params[0].yyyy, 0.00000f, 1.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C3AF8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcShrinkGrowMatte");
}

void sub_1B28C3B08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C3C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C3C48()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C3C40);
}

_QWORD *HgcShrinkGrowMatte::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcShrinkGrowMatte [hgc1]");
}

uint64_t HgcShrinkGrowMatte::BindTexture(HgcShrinkGrowMatte *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcShrinkGrowMatte::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcShrinkGrowMatte::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t **)(a1 + 408);
          v12 = v11[1];
          v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11->f32, 1);
          v14 = vmaxq_f32(vaddq_f32(v13, vmulq_n_f32(*(float32x4_t *)(v6 + v10 - 32), COERCE_FLOAT(*v11))), v12);
          v15 = vmaxq_f32(vaddq_f32(v13, vmulq_n_f32(*(float32x4_t *)(v6 + v10 - 16), COERCE_FLOAT(*v11))), v12);
          v16 = vmaxq_f32(vaddq_f32(v13, vmulq_n_f32(*(float32x4_t *)(v6 + v10), COERCE_FLOAT(*v11))), v12);
          v17 = vmaxq_f32(vaddq_f32(v13, vmulq_n_f32(*(float32x4_t *)(v6 + v10 + 16), COERCE_FLOAT(*v11))), v12);
          v18 = v11[2];
          v19 = (float32x4_t *)(v5 + v10);
          v19[-2] = vminq_f32(v14, v18);
          v19[-1] = vminq_f32(v15, v18);
          *v19 = vminq_f32(v16, v18);
          v19[1] = vminq_f32(v17, v18);
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v20) = -v9;
      }
      if ((int)v20 < v4)
      {
        v20 = v20;
        do
        {
          *(float32x4_t *)(v5 + 16 * v20) = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(**(int32x2_t **)(a1 + 408), 1), vmulq_n_f32(*(float32x4_t *)(v6 + 16 * v20), COERCE_FLOAT(*(_OWORD *)*(_QWORD *)(a1 + 408)))), *(float32x4_t *)(*(_QWORD *)(a1 + 408) + 16)), *(float32x4_t *)(*(_QWORD *)(a1 + 408) + 32));
          ++v20;
        }
        while (v20 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcShrinkGrowMatte::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcShrinkGrowMatte::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcShrinkGrowMatte::HgcShrinkGrowMatte(HgcShrinkGrowMatte *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F4260;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  v3[2] = _Q0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C3F38(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcShrinkGrowMatte::~HgcShrinkGrowMatte(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F4260;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40EED21634);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcShrinkGrowMatte::~HgcShrinkGrowMatte(this);
  HGObject::operator delete(v1);
}

uint64_t HgcShrinkGrowMatte::SetParameter(HgcShrinkGrowMatte *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcShrinkGrowMatte::GetParameter(HgcShrinkGrowMatte *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcErode::GetProgram(HgcErode *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000037c\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r0*r1;\n"
             "    r2 = c0.xxxx - r0;\n"
             "    r2 = r2*r0;\n"
             "    output.color0 = float4(r2)*float4(c0.yyyy) + float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=71c2c7c7:36cbd345:cf5b3499:c6a8e726\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000359\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = r0*r1;\n"
             "    r2 = c0.xxxx - r0;\n"
             "    r2 = r2*r0;\n"
             "    output.color0 = r2*c0.yyyy + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=975a6424:af4d8e2e:219a5383:c7186f2c\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002dc\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = r0*r1;\n"
           "    r2 = c0.xxxx - r0;\n"
           "    r2 = r2*r0;\n"
           "    gl_FragColor = r2*c0.yyyy + r1;\n"
           "}\n"
           "//MD5=0a099ba2:a107ce1c:b507f13f:1b92ae9c\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcErode::InitProgramDescriptor(HgcErode *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcErode_hgc_visible", "//Metal1.0     \n//LEN=00000001b0\n[[ visible ]] FragmentOut HgcErode_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.5000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = r0*r1;\n"
    "    r2 = c0.xxxx - r0;\n"
    "    r2 = r2*r0;\n"
    "    output.color0 = r2*c0.yyyy + r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C4120()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcErode");
}

void sub_1B28C4130(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C4270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C42B8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C42B0);
}

_QWORD *HgcErode::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcErode [hgc1]");
}

uint64_t HgcErode::BindTexture(HgcErode *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcErode::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcErode::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  uint64_t v20;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v20) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t **)(a1 + 408);
          v14 = v13[1];
          v15 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)(v6 + v12 - 32)), vmulq_f32(v14, vmulq_f32(*(float32x4_t *)(v8 + v12 - 32), vsubq_f32(*v13, *(float32x4_t *)(v8 + v12 - 32)))));
          v16 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)(v6 + v12 - 16)), vmulq_f32(v14, vmulq_f32(*(float32x4_t *)(v8 + v12 - 16), vsubq_f32(*v13, *(float32x4_t *)(v8 + v12 - 16)))));
          v17 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)(v6 + v12)), vmulq_f32(v14, vmulq_f32(*(float32x4_t *)(v8 + v12), vsubq_f32(*v13, *(float32x4_t *)(v8 + v12)))));
          v18 = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)(v6 + v12 + 16)), vmulq_f32(v14, vmulq_f32(*(float32x4_t *)(v8 + v12 + 16), vsubq_f32(*v13, *(float32x4_t *)(v8 + v12 + 16)))));
          v19 = (float32x4_t *)(v5 + v12);
          v19[-2] = v15;
          v19[-1] = v16;
          *v19 = v17;
          v19[1] = v18;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v20) = -v11;
      }
      if ((int)v20 < v4)
      {
        v20 = v20;
        do
        {
          *(float32x4_t *)(v5 + 16 * v20) = vaddq_f32(vmulq_f32(*(float32x4_t *)(v8 + 16 * v20), *(float32x4_t *)(v6 + 16 * v20)), vmulq_f32(*(float32x4_t *)(*(_QWORD *)(a1 + 408) + 16), vmulq_f32(*(float32x4_t *)(v8 + 16 * v20), vsubq_f32(*(float32x4_t *)*(_QWORD *)(a1 + 408), *(float32x4_t *)(v8 + 16 * v20)))));
          ++v20;
        }
        while (v20 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcErode::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcErode::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcErode::HgcErode(HgcErode *this)
{
  _QWORD *v2;
  _OWORD *v3;
  __int128 v9;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F44C8;
  v3 = (_OWORD *)operator new();
  __asm { FMOV            V0.4S, #1.0 }
  *(_QWORD *)&v9 = 0x3F0000003F000000;
  *((_QWORD *)&v9 + 1) = 0x3F0000003F000000;
  *v3 = _Q0;
  v3[1] = v9;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C45D8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcErode::~HgcErode(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F44C8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcErode::~HgcErode(this);
  HGObject::operator delete(v1);
}

uint64_t HgcErode::SetParameter(HgcErode *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcErode::GetParameter(HgcErode *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcBlueGreenScreenCandidate::GetProgram(HgcBlueGreenScreenCandidate *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000044d\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< half > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 1.000000000, 0.7500000000, 0.2500000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = (half3) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r2.xyz = (half3) hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).xyz;\n"
             "    r2.w = r2.x;\n"
             "    r1.w = r1.x;\n"
             "    r2 = r2*c0.xxxw;\n"
             "    r0 = r0*c0.yyyx + r2;\n"
             "    output.color0 = float4(r1)*float4(c0.xxxz) + float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=afa572df:1e672efe:3c473380:3fe513c3\n"
             "//SIG=00400000:00000007:00000007:00000007:0001:0000:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000423\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]], \n"
             "    texture2d< float > hg_Texture2 [[ texture(2) ]], \n"
             "    sampler hg_Sampler2 [[ sampler(2) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 1.000000000, 0.7500000000, 0.2500000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy).xyz;\n"
             "    r2.xyz = hg_Texture2.sample(hg_Sampler2, frag._texCoord2.xy).xyz;\n"
             "    r2.w = r2.x;\n"
             "    r1.w = r1.x;\n"
             "    r2 = r2*c0.xxxw;\n"
             "    r0 = r0*c0.yyyx + r2;\n"
             "    output.color0 = r1*c0.xxxz + r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=9b105f25:958b08fb:dba25ffd:bfc5de91\n"
             "//SIG=00000000:00000007:00000007:00000000:0001:0000:0003:0000:0000:0000:000e:0000:0003:03:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000382\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 1.000000000, 0.7500000000, 0.2500000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = texture2D(hg_Texture1, hg_TexCoord1.xy).xyz;\n"
           "    r2.xyz = texture2D(hg_Texture2, hg_TexCoord2.xy).xyz;\n"
           "    r2.w = r2.x;\n"
           "    r1.w = r1.x;\n"
           "    r2 = r2*c0.xxxw;\n"
           "    r0 = r0*c0.yyyx + r2;\n"
           "    gl_FragColor = r1*c0.xxxz + r0;\n"
           "}\n"
           "//MD5=08283eb6:cc9cd058:68f8ed43:81161420\n"
           "//SIG=00000000:00000007:00000007:00000000:0001:0000:0003:0000:0000:0000:0000:0000:0003:03:0:1:0\n";
  }
}

void HgcBlueGreenScreenCandidate::InitProgramDescriptor(HgcBlueGreenScreenCandidate *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBlueGreenScreenCandidate_hgc_visible", "//Metal1.0     \n//LEN=0000000212\n[[ visible ]] FragmentOut HgcBlueGreenScreenCandidate_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1,\n    float4 color2)\n{\n    const float4 c0 = float4(0.000000000, 1.000000000, 0.7500000000, 0.2500000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.xyz = color1.xyz;\n"
    "    r2.xyz = color2.xyz;\n"
    "    r2.w = r2.x;\n"
    "    r1.w = r1.x;\n"
    "    r2 = r2*c0.xxxw;\n"
    "    r0 = r0*c0.yyyx + r2;\n"
    "    output.color0 = r1*c0.xxxz + r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C472C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBlueGreenScreenCandidate");
}

void sub_1B28C473C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C48BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C490C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C4904);
}

_QWORD *HgcBlueGreenScreenCandidate::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBlueGreenScreenCandidate [hgc1]");
}

uint64_t HgcBlueGreenScreenCandidate::BindTexture(HgcBlueGreenScreenCandidate *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 2)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 2;
  }
  else if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcBlueGreenScreenCandidate::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcBlueGreenScreenCandidate::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(int *)(a2 + 24);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(_QWORD *)(a2 + 112);
    v8 = *(_QWORD *)(a2 + 96);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 88);
    v11 = *(_QWORD *)(a2 + 80);
    v12 = 16 * *(int *)(a2 + 120);
    v13 = 16 * v5;
    do
    {
      if (v4 < 4)
      {
        LODWORD(v25) = 0;
      }
      else
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = *(_QWORD *)(a1 + 408);
          v17 = *(float32x4_t *)(v16 + 16);
          v18 = *(float32x4_t *)(v16 + 32);
          v19 = *(float32x4_t *)(v16 + 48);
          v20 = vaddq_f32(vmulq_f32(v19, (float32x4_t)vbslq_s8(*(int8x16_t *)v16, vextq_s8(*(int8x16_t *)(v8 + v14), *(int8x16_t *)(v8 + v14), 4uLL), *(int8x16_t *)(v8 + v14))), vaddq_f32(vmulq_f32(*(float32x4_t *)(v11 + v14), v18), vmulq_f32(v17, (float32x4_t)vbslq_s8(*(int8x16_t *)v16, vextq_s8(*(int8x16_t *)(v7 + v14), *(int8x16_t *)(v7 + v14), 4uLL), *(int8x16_t *)(v7 + v14)))));
          v21 = vaddq_f32(vmulq_f32(v19, (float32x4_t)vbslq_s8(*(int8x16_t *)v16, vextq_s8(*(int8x16_t *)(v8 + v14 + 16), *(int8x16_t *)(v8 + v14 + 16), 4uLL), *(int8x16_t *)(v8 + v14 + 16))), vaddq_f32(vmulq_f32(*(float32x4_t *)(v11 + v14 + 16), v18), vmulq_f32(v17, (float32x4_t)vbslq_s8(*(int8x16_t *)v16, vextq_s8(*(int8x16_t *)(v7 + v14 + 16), *(int8x16_t *)(v7 + v14 + 16), 4uLL), *(int8x16_t *)(v7 + v14 + 16)))));
          v22 = vaddq_f32(vmulq_f32(v19, (float32x4_t)vbslq_s8(*(int8x16_t *)v16, vextq_s8(*(int8x16_t *)(v8 + v14 + 32), *(int8x16_t *)(v8 + v14 + 32), 4uLL), *(int8x16_t *)(v8 + v14 + 32))), vaddq_f32(vmulq_f32(*(float32x4_t *)(v11 + v14 + 32), v18), vmulq_f32(v17, (float32x4_t)vbslq_s8(*(int8x16_t *)v16, vextq_s8(*(int8x16_t *)(v7 + v14 + 32), *(int8x16_t *)(v7 + v14 + 32), 4uLL), *(int8x16_t *)(v7 + v14 + 32)))));
          v23 = vaddq_f32(vmulq_f32(v19, (float32x4_t)vbslq_s8(*(int8x16_t *)v16, vextq_s8(*(int8x16_t *)(v8 + v14 + 48), *(int8x16_t *)(v8 + v14 + 48), 4uLL), *(int8x16_t *)(v8 + v14 + 48))), vaddq_f32(vmulq_f32(*(float32x4_t *)(v11 + v14 + 48), v18), vmulq_f32(v17, (float32x4_t)vbslq_s8(*(int8x16_t *)v16, vextq_s8(*(int8x16_t *)(v7 + v14 + 48), *(int8x16_t *)(v7 + v14 + 48), 4uLL), *(int8x16_t *)(v7 + v14 + 48)))));
          v24 = (float32x4_t *)(v6 + v14);
          *v24 = v20;
          v24[1] = v21;
          v24[2] = v22;
          v24[3] = v23;
          v15 -= 4;
          v14 += 64;
        }
        while (v4 + v15 > 3);
        LODWORD(v25) = -v15;
      }
      if ((int)v25 < v4)
      {
        v25 = v25;
        do
        {
          v26 = *(_QWORD *)(a1 + 408);
          *(float32x4_t *)(v6 + 16 * v25) = vaddq_f32(vmulq_f32(*(float32x4_t *)(v26 + 48), (float32x4_t)vbslq_s8(*(int8x16_t *)v26, vextq_s8(*(int8x16_t *)(v8 + 16 * v25), *(int8x16_t *)(v8 + 16 * v25), 4uLL), *(int8x16_t *)(v8 + 16 * v25))), vaddq_f32(vmulq_f32(*(float32x4_t *)(v11 + 16 * v25), *(float32x4_t *)(v26 + 32)), vmulq_f32(*(float32x4_t *)(v26 + 16), (float32x4_t)vbslq_s8(*(int8x16_t *)v26, vextq_s8(*(int8x16_t *)(v7 + 16 * v25), *(int8x16_t *)(v7 + 16 * v25), 4uLL),
                                                                 *(int8x16_t *)(v7 + 16 * v25)))));
          ++v25;
        }
        while (v25 < v4);
      }
      ++v3;
      v8 += v9;
      v11 += v10;
      v7 += v12;
      v6 += v13;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcBlueGreenScreenCandidate::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 3)
    return 0;
  else
    return a4;
}

uint64_t HgcBlueGreenScreenCandidate::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 3)
    return 0;
  else
    return a4;
}

void HgcBlueGreenScreenCandidate::HgcBlueGreenScreenCandidate(HgcBlueGreenScreenCandidate *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F4730;
  v3 = (_OWORD *)operator new();
  *v3 = xmmword_1B3050F70;
  v3[1] = xmmword_1B30535D0;
  v3[2] = xmmword_1B3051560;
  v3[3] = xmmword_1B30535E0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C4D04(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBlueGreenScreenCandidate::~HgcBlueGreenScreenCandidate(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F4730;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBlueGreenScreenCandidate::~HgcBlueGreenScreenCandidate(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBlueGreenScreenCandidate::SetParameter(HgcBlueGreenScreenCandidate *this, float a2, float a3, float a4, float a5)
{
  return 0xFFFFFFFFLL;
}

uint64_t HgcBlueGreenScreenCandidate::GetParameter(HgcBlueGreenScreenCandidate *this, int a2, float *a3)
{
  return 0xFFFFFFFFLL;
}

const char *HgcBlueScreen::GetProgram(HgcBlueScreen *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000005fd\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.5000000000, 9.999999975e-07, 9.999999747e-06);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = r0.w + c0.w;\n"
             "    r0.xyz = r0.xyz/r1.www;\n"
             "    r1.x = c0.x - r0.x;\n"
             "    r1.x = mix(r0.z, r1.x, c0.y);\n"
             "    r2.x = half(r1.x >= half(hg_Params[0].x));\n"
             "    r3.x = half(r1.x >= half(hg_Params[1].x));\n"
             "    r4.x = half(hg_Params[1].x) - half(hg_Params[0].x);\n"
             "    r1.x = r1.x - half(hg_Params[0].x);\n"
             "    r1.x = r1.x/r4.x;\n"
             "    r1.x = clamp(r1.x*r2.x + r3.x, 0.00000h, 1.00000h);\n"
             "    r1.x = c0.x - r1.x;\n"
             "    r4.x = half(r1.x >= half(hg_Params[2].x));\n"
             "    r2.x = half(r1.x >= half(hg_Params[3].x));\n"
             "    r3.x = half(hg_Params[3].x) - half(hg_Params[2].x);\n"
             "    r1.x = r1.x - half(hg_Params[2].x);\n"
             "    r3.x = r3.x + c0.z;\n"
             "    r1.x = r1.x/r3.x;\n"
             "    r1.x = clamp(r1.x*r4.x + r2.x, 0.00000h, 1.00000h);\n"
             "    r3.x = c0.x - r1.x;\n"
             "    r1.x = clamp(mix(r1.x, r3.x, half(hg_Params[4].x)), 0.00000h, 1.00000h);\n"
             "    r1.x = r1.x*r0.w;\n"
             "    output.color0.xyz = float3(r0.xyz)*float3(r1.xxx);\n"
             "    output.color0.w = float(r1.x);\n"
             "    return output;\n"
             "}\n"
             "//MD5=d08ac965:a7568849:2272d06e:ee0123cb\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0005:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000005a4\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.5000000000, 9.999999975e-07, 9.999999747e-06);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.w = r0.w + c0.w;\n"
             "    r0.xyz = r0.xyz/r1.www;\n"
             "    r1.x = c0.x - r0.x;\n"
             "    r1.x = mix(r0.z, r1.x, c0.y);\n"
             "    r2.x = float(r1.x >= hg_Params[0].x);\n"
             "    r3.x = float(r1.x >= hg_Params[1].x);\n"
             "    r4.x = hg_Params[1].x - hg_Params[0].x;\n"
             "    r1.x = r1.x - hg_Params[0].x;\n"
             "    r1.x = r1.x/r4.x;\n"
             "    r1.x = clamp(r1.x*r2.x + r3.x, 0.00000f, 1.00000f);\n"
             "    r1.x = c0.x - r1.x;\n"
             "    r4.x = float(r1.x >= hg_Params[2].x);\n"
             "    r2.x = float(r1.x >= hg_Params[3].x);\n"
             "    r3.x = hg_Params[3].x - hg_Params[2].x;\n"
             "    r1.x = r1.x - hg_Params[2].x;\n"
             "    r3.x = r3.x + c0.z;\n"
             "    r1.x = r1.x/r3.x;\n"
             "    r1.x = clamp(r1.x*r4.x + r2.x, 0.00000f, 1.00000f);\n"
             "    r3.x = c0.x - r1.x;\n"
             "    r1.x = clamp(mix(r1.x, r3.x, hg_Params[4].x), 0.00000f, 1.00000f);\n"
             "    r1.x = r1.x*r0.w;\n"
             "    output.color0.xyz = r0.xyz*r1.xxx;\n"
             "    output.color0.w = r1.x;\n"
             "    return output;\n"
             "}\n"
             "//MD5=00135605:cb89b159:2e09724d:79f8c98e\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0005:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000631\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.5000000000, 9.999999975e-07, 9.999999747e-06);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.w = r0.w + c0.w;\n"
           "    r0.xyz = r0.xyz/r1.www;\n"
           "    r1.x = c0.x - r0.x;\n"
           "    r1.x = mix(r0.z, r1.x, c0.y);\n"
           "    r2.x = float(r1.x >= hg_ProgramLocal0.x);\n"
           "    r3.x = float(r1.x >= hg_ProgramLocal1.x);\n"
           "    r4.x = hg_ProgramLocal1.x - hg_ProgramLocal0.x;\n"
           "    r1.x = r1.x - hg_ProgramLocal0.x;\n"
           "    r1.x = r1.x/r4.x;\n"
           "    r1.x = clamp(r1.x*r2.x + r3.x, 0.00000, 1.00000);\n"
           "    r1.x = c0.x - r1.x;\n"
           "    r4.x = float(r1.x >= hg_ProgramLocal2.x);\n"
           "    r2.x = float(r1.x >= hg_ProgramLocal3.x);\n"
           "    r3.x = hg_ProgramLocal3.x - hg_ProgramLocal2.x;\n"
           "    r1.x = r1.x - hg_ProgramLocal2.x;\n"
           "    r3.x = r3.x + c0.z;\n"
           "    r1.x = r1.x/r3.x;\n"
           "    r1.x = clamp(r1.x*r4.x + r2.x, 0.00000, 1.00000);\n"
           "    r3.x = c0.x - r1.x;\n"
           "    r1.x = clamp(mix(r1.x, r3.x, hg_ProgramLocal4.x), 0.00000, 1.00000);\n"
           "    r1.x = r1.x*r0.w;\n"
           "    gl_FragColor.xyz = r0.xyz*r1.xxx;\n"
           "    gl_FragColor.w = r1.x;\n"
           "}\n"
           "//MD5=d6e776cc:aab08d45:a20548aa:c3194eab\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0005:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcBlueScreen::InitProgramDescriptor(HgcBlueScreen *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcBlueScreen_hgc_visible", "//Metal1.0     \n//LEN=000000047b\n[[ visible ]] FragmentOut HgcBlueScreen_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.5000000000, 9.999999975e-07, 9.999999747e-06);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1.w = r0.w + c0.w;\n"
    "    r0.xyz = r0.xyz/r1.www;\n"
    "    r1.x = c0.x - r0.x;\n"
    "    r1.x = mix(r0.z, r1.x, c0.y);\n"
    "    r2.x = float(r1.x >= hg_Params[0].x);\n"
    "    r3.x = float(r1.x >= hg_Params[1].x);\n"
    "    r4.x = hg_Params[1].x - hg_Params[0].x;\n"
    "    r1.x = r1.x - hg_Params[0].x;\n"
    "    r1.x = r1.x/r4.x;\n"
    "    r1.x = clamp(r1.x*r2.x + r3.x, 0.00000f, 1.00000f);\n"
    "    r1.x = c0.x - r1.x;\n"
    "    r4.x = float(r1.x >= hg_Params[2].x);\n"
    "    r2.x = float(r1.x >= hg_Params[3].x);\n"
    "    r3.x = hg_Params[3].x - hg_Params[2].x;\n"
    "    r1.x = r1.x - hg_Params[2].x;\n"
    "    r3.x = r3.x + c0.z;\n"
    "    r1.x = r1.x/r3.x;\n"
    "    r1.x = clamp(r1.x*r4.x + r2.x, 0.00000f, 1.00000f);\n"
    "    r3.x = c0.x - r1.x;\n"
    "    r1.x = clamp(mix(r1.x, r3.x, hg_Params[4].x), 0.00000f, 1.00000f);\n"
    "    r1.x = r1.x*r0.w;\n"
    "    output.color0.xyz = r0.xyz*r1.xxx;\n"
    "    output.color0.w = r1.x;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C4E58()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcBlueScreen");
}

void sub_1B28C4E68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C4F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C4FA8()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C4FA0);
}

_QWORD *HgcBlueScreen::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcBlueScreen [hgc1]");
}

uint64_t HgcBlueScreen::BindTexture(HgcBlueScreen *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcBlueScreen::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcBlueScreen::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t *v58;
  unsigned int v59;
  float32x4_t v60;
  uint64_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v59 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v15 = *(float32x4_t *)(v13 + 64);
          v14 = *(float32x4_t *)(v13 + 80);
          v16 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v11, v14), 3);
          v17 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v12, v14), 3);
          v18 = *(float32x4_t *)(v13 + 96);
          v19 = *(float32x4_t *)(v13 + 112);
          v20 = vminq_f32(vmaxq_f32(vmulq_f32(v14, vrecpeq_f32(v16)), v18), v19);
          v21 = vminq_f32(vmaxq_f32(vmulq_f32(v14, vrecpeq_f32(v17)), v18), v19);
          v22 = (int8x16_t)vmulq_f32(v11, vmulq_f32(v20, vrecpsq_f32(v16, v20)));
          v23 = (int8x16_t)vmulq_f32(v12, vmulq_f32(v21, vrecpsq_f32(v17, v21)));
          v24 = *(int8x16_t *)(v13 + 128);
          v25 = *(float32x4_t *)(v13 + 144);
          v26 = (float32x4_t)vbslq_s8(v24, (int8x16_t)v11, v22);
          v27 = (float32x4_t)vbslq_s8(v24, (int8x16_t)v12, v23);
          v28 = (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL);
          v29 = (float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v27, 8uLL);
          v30 = *(float32x4_t *)(v13 + 160);
          v31 = *(float32x4_t *)(v13 + 176);
          v32 = vaddq_f32(v28, vmulq_f32(v30, vsubq_f32(vsubq_f32(v25, v26), v28)));
          v33 = vaddq_f32(v29, vmulq_f32(v30, vsubq_f32(vsubq_f32(v25, v27), v29)));
          v34 = *(float32x4_t *)(v13 + 16);
          v35 = (int8x16_t)vcgeq_f32(v32, v34);
          v36 = (int8x16_t)vcgeq_f32(v33, v34);
          v37 = vsubq_f32(v34, *(float32x4_t *)v13);
          v38 = vminq_f32(vmaxq_f32(vmulq_f32(v14, vrecpeq_f32(v37)), v18), v19);
          v39 = vmulq_f32(v38, vrecpsq_f32(v37, v38));
          v40 = vsubq_f32(v25, vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v35), vmulq_f32(vmulq_f32(v39, vsubq_f32(v32, *(float32x4_t *)v13)), (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v32, *(float32x4_t *)v13)))), v31), v25));
          v41 = vsubq_f32(v25, vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v36), vmulq_f32(vmulq_f32(v39, vsubq_f32(v33, *(float32x4_t *)v13)), (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v33, *(float32x4_t *)v13)))), v31), v25));
          v42 = *(float32x4_t *)(v13 + 32);
          v43 = *(float32x4_t *)(v13 + 48);
          v44 = (int8x16_t)vcgeq_f32(v40, v42);
          v45 = (int8x16_t)vcgeq_f32(v41, v42);
          v46 = (int8x16_t)vcgeq_f32(v40, v43);
          v47 = (int8x16_t)vcgeq_f32(v41, v43);
          v48 = vsubq_f32(v40, v42);
          v49 = vsubq_f32(v41, v42);
          v50 = vaddq_f32(vsubq_f32(v43, v42), *(float32x4_t *)(v13 + 192));
          v51 = vminq_f32(vmaxq_f32(vmulq_f32(v14, vrecpeq_f32(v50)), v18), v19);
          v52 = vmulq_f32(v51, vrecpsq_f32(v50, v51));
          v53 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v46), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v44), vmulq_f32(v48, v52))), v31), v25);
          v54 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v47), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v45), vmulq_f32(v49, v52))), v31), v25);
          v55 = vaddq_f32(v54, vmulq_f32(v15, vsubq_f32(vsubq_f32(v25, v54), v54)));
          v56 = (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v53, vmulq_f32(v15, vsubq_f32(vsubq_f32(v25, v53), v53))), v31), v25), v26, 3);
          v57 = (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(v55, v31), v25), v27, 3);
          v58 = (int8x16_t *)(v5 + v10);
          v58[-1] = vbslq_s8(v24, vextq_s8(v56, v56, 4uLL), (int8x16_t)vmulq_n_f32(v26, *(float *)v56.i32));
          *v58 = vbslq_s8(v24, vextq_s8(v57, v57, 4uLL), (int8x16_t)vmulq_n_f32(v27, *(float *)v57.i32));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v59 = -v9;
      }
      if ((int)v59 < v4)
      {
        v60 = *(float32x4_t *)(v6 + 16 * v59);
        v61 = *(_QWORD *)(a1 + 408);
        v62 = *(float32x4_t *)(v61 + 80);
        v63 = (float32x4_t)vdupq_laneq_s32((int32x4_t)vaddq_f32(v60, v62), 3);
        v64 = *(float32x4_t *)(v61 + 96);
        v65 = *(float32x4_t *)(v61 + 112);
        v66 = vminq_f32(vmaxq_f32(vmulq_f32(v62, vrecpeq_f32(v63)), v64), v65);
        v67 = (int8x16_t)vmulq_f32(v60, vmulq_f32(v66, vrecpsq_f32(v63, v66)));
        v68 = *(int8x16_t *)(v61 + 128);
        v69 = *(float32x4_t *)(v61 + 144);
        v70 = (float32x4_t)vbslq_s8(v68, (int8x16_t)v60, v67);
        v71 = (float32x4_t)vextq_s8((int8x16_t)v70, (int8x16_t)v70, 8uLL);
        v72 = *(float32x4_t *)(v61 + 176);
        v73 = vaddq_f32(v71, vmulq_f32(*(float32x4_t *)(v61 + 160), vsubq_f32(vsubq_f32(v69, v70), v71)));
        v74 = *(float32x4_t *)(v61 + 16);
        v75 = (float32x4_t)vandq_s8((int8x16_t)v69, (int8x16_t)vcgeq_f32(v73, v74));
        v76 = vsubq_f32(v74, *(float32x4_t *)v61);
        v77 = vminq_f32(vmaxq_f32(vmulq_f32(v62, vrecpeq_f32(v76)), v64), v65);
        v78 = vsubq_f32(v69, vminq_f32(vmaxq_f32(vaddq_f32(v75, vmulq_f32(vmulq_f32(vmulq_f32(v77, vrecpsq_f32(v76, v77)), vsubq_f32(v73, *(float32x4_t *)v61)), (float32x4_t)vandq_s8((int8x16_t)v69, (int8x16_t)vcgeq_f32(v73, *(float32x4_t *)v61)))), v72), v69));
        v79 = *(float32x4_t *)(v61 + 32);
        v80 = *(float32x4_t *)(v61 + 48);
        v81 = (int8x16_t)vcgeq_f32(v78, v79);
        v82 = (int8x16_t)vcgeq_f32(v78, v80);
        v83 = vsubq_f32(v78, v79);
        v84 = vaddq_f32(vsubq_f32(v80, v79), *(float32x4_t *)(v61 + 192));
        v85 = vminq_f32(vmaxq_f32(vmulq_f32(v62, vrecpeq_f32(v84)), v64), v65);
        v86 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v69, v82), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v69, v81), vmulq_f32(v83, vmulq_f32(v85, vrecpsq_f32(v84, v85))))), v72), v69);
        v87 = (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v86, vmulq_f32(*(float32x4_t *)(v61 + 64), vsubq_f32(vsubq_f32(v69, v86), v86))), v72), v69), v70, 3);
        *(int8x16_t *)(v5 + 16 * v59) = vbslq_s8(v68, vextq_s8(v87, v87, 4uLL), (int8x16_t)vmulq_n_f32(v70, *(float *)v87.i32));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcBlueScreen::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcBlueScreen::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcBlueScreen::HgcBlueScreen(HgcBlueScreen *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F4998;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = xmmword_1B3053610;
  *(_OWORD *)(v3 + 96) = xmmword_1B3052320;
  *(int32x4_t *)(v3 + 112) = vdupq_n_s32(0x7F7FFFFFu);
  *(_OWORD *)(v3 + 128) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 144) = xmmword_1B304F230;
  *(_OWORD *)(v3 + 160) = xmmword_1B3051880;
  *(_QWORD *)(v3 + 176) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_OWORD *)(v3 + 192) = xmmword_1B3052380;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C55B8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcBlueScreen::~HgcBlueScreen(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F4998;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C400F93440CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcBlueScreen::~HgcBlueScreen(this);
  HGObject::operator delete(v1);
}

uint64_t HgcBlueScreen::SetParameter(HgcBlueScreen *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcBlueScreen::GetParameter(HgcBlueScreen *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcGreenScreen::GetProgram(HgcGreenScreen *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000639\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.5000000000, 9.999999975e-07, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1.xw = c0.xx - r0.xx;\n"
             "    r1.xw = mix(r0.yy, r1.xw, c0.yy);\n"
             "    r2.xw = half2(r1.xw >= half2(hg_Params[0].xw));\n"
             "    r3.xw = half2(r1.xw >= half2(hg_Params[1].xw));\n"
             "    r4.x = half(hg_Params[1].x) - half(hg_Params[0].x);\n"
             "    r1.xw = r1.xw - half2(hg_Params[0].xw);\n"
             "    r1.xw = r1.xw/r4.xx;\n"
             "    r1.xw = clamp(r1.xw*r2.xw + r3.xw, 0.00000h, 1.00000h);\n"
             "    r1.xw = c0.xx - r1.xw;\n"
             "    r4.xw = half2(r1.xw >= half2(hg_Params[2].xw));\n"
             "    r2.xw = half2(r1.xw >= half2(hg_Params[3].xw));\n"
             "    r3.x = half(hg_Params[3].x) - half(hg_Params[2].x);\n"
             "    r1.xw = r1.xw - half2(hg_Params[2].xw);\n"
             "    r3.x = r3.x + c0.z;\n"
             "    r1.xw = r1.xw/r3.xx;\n"
             "    r1.xw = clamp(r1.xw*r4.xw + r2.xw, 0.00000h, 1.00000h);\n"
             "    r3.xw = c0.xx - r1.xw;\n"
             "    r1.xw = clamp(mix(r1.xw, r3.xw, half2(hg_Params[4].xw)), 0.00000h, 1.00000h);\n"
             "    r1.xw = r1.xw*r0.ww;\n"
             "    output.color0.xyz = float3(r0.xyz)*float3(r1.xxx);\n"
             "    output.color0.w = float(r1.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=054cfaae:eed5dc73:e3cfd1c2:7051e55f\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0005:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000005da\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.5000000000, 9.999999975e-07, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1.xw = c0.xx - r0.xx;\n"
             "    r1.xw = mix(r0.yy, r1.xw, c0.yy);\n"
             "    r2.xw = float2(r1.xw >= hg_Params[0].xw);\n"
             "    r3.xw = float2(r1.xw >= hg_Params[1].xw);\n"
             "    r4.x = hg_Params[1].x - hg_Params[0].x;\n"
             "    r1.xw = r1.xw - hg_Params[0].xw;\n"
             "    r1.xw = r1.xw/r4.xx;\n"
             "    r1.xw = clamp(r1.xw*r2.xw + r3.xw, 0.00000f, 1.00000f);\n"
             "    r1.xw = c0.xx - r1.xw;\n"
             "    r4.xw = float2(r1.xw >= hg_Params[2].xw);\n"
             "    r2.xw = float2(r1.xw >= hg_Params[3].xw);\n"
             "    r3.x = hg_Params[3].x - hg_Params[2].x;\n"
             "    r1.xw = r1.xw - hg_Params[2].xw;\n"
             "    r3.x = r3.x + c0.z;\n"
             "    r1.xw = r1.xw/r3.xx;\n"
             "    r1.xw = clamp(r1.xw*r4.xw + r2.xw, 0.00000f, 1.00000f);\n"
             "    r3.xw = c0.xx - r1.xw;\n"
             "    r1.xw = clamp(mix(r1.xw, r3.xw, hg_Params[4].xw), 0.00000f, 1.00000f);\n"
             "    r1.xw = r1.xw*r0.ww;\n"
             "    output.color0.xyz = r0.xyz*r1.xxx;\n"
             "    output.color0.w = r1.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=51ac4cd7:3337df24:8a4e8f18:759ed30b\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0005:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006bf\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.5000000000, 9.999999975e-07, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1.xw = c0.xx - r0.xx;\n"
           "    r1.xw = mix(r0.yy, r1.xw, c0.yy);\n"
           "    r2.xw = vec2(greaterThanEqual(r1.xw, hg_ProgramLocal0.xw));\n"
           "    r3.xw = vec2(greaterThanEqual(r1.xw, hg_ProgramLocal1.xw));\n"
           "    r4.x = hg_ProgramLocal1.x - hg_ProgramLocal0.x;\n"
           "    r1.xw = r1.xw - hg_ProgramLocal0.xw;\n"
           "    r1.xw = r1.xw/r4.xx;\n"
           "    r1.xw = clamp(r1.xw*r2.xw + r3.xw, vec2(0.00000), vec2(1.00000));\n"
           "    r1.xw = c0.xx - r1.xw;\n"
           "    r4.xw = vec2(greaterThanEqual(r1.xw, hg_ProgramLocal2.xw));\n"
           "    r2.xw = vec2(greaterThanEqual(r1.xw, hg_ProgramLocal3.xw));\n"
           "    r3.x = hg_ProgramLocal3.x - hg_ProgramLocal2.x;\n"
           "    r1.xw = r1.xw - hg_ProgramLocal2.xw;\n"
           "    r3.x = r3.x + c0.z;\n"
           "    r1.xw = r1.xw/r3.xx;\n"
           "    r1.xw = clamp(r1.xw*r4.xw + r2.xw, vec2(0.00000), vec2(1.00000));\n"
           "    r3.xw = c0.xx - r1.xw;\n"
           "    r1.xw = clamp(mix(r1.xw, r3.xw, hg_ProgramLocal4.xw), vec2(0.00000), vec2(1.00000));\n"
           "    r1.xw = r1.xw*r0.ww;\n"
           "    gl_FragColor.xyz = r0.xyz*r1.xxx;\n"
           "    gl_FragColor.w = r1.w;\n"
           "}\n"
           "//MD5=72129de5:5fb54234:6b10d62c:cdab13f5\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0005:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcGreenScreen::InitProgramDescriptor(HgcGreenScreen *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGreenScreen_hgc_visible", "//Metal1.0     \n//LEN=00000004b2\n[[ visible ]] FragmentOut HgcGreenScreen_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.5000000000, 9.999999975e-07, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xw = c0.xx - r0.xx;\n"
    "    r1.xw = mix(r0.yy, r1.xw, c0.yy);\n"
    "    r2.xw = float2(r1.xw >= hg_Params[0].xw);\n"
    "    r3.xw = float2(r1.xw >= hg_Params[1].xw);\n"
    "    r4.x = hg_Params[1].x - hg_Params[0].x;\n"
    "    r1.xw = r1.xw - hg_Params[0].xw;\n"
    "    r1.xw = r1.xw/r4.xx;\n"
    "    r1.xw = clamp(r1.xw*r2.xw + r3.xw, 0.00000f, 1.00000f);\n"
    "    r1.xw = c0.xx - r1.xw;\n"
    "    r4.xw = float2(r1.xw >= hg_Params[2].xw);\n"
    "    r2.xw = float2(r1.xw >= hg_Params[3].xw);\n"
    "    r3.x = hg_Params[3].x - hg_Params[2].x;\n"
    "    r1.xw = r1.xw - hg_Params[2].xw;\n"
    "    r3.x = r3.x + c0.z;\n"
    "    r1.xw = r1.xw/r3.xx;\n"
    "    r1.xw = clamp(r1.xw*r4.xw + r2.xw, 0.00000f, 1.00000f);\n"
    "    r3.xw = c0.xx - r1.xw;\n"
    "    r1.xw = clamp(mix(r1.xw, r3.xw, hg_Params[4].xw), 0.00000f, 1.00000f);\n"
    "    r1.xw = r1.xw*r0.ww;\n"
    "    output.color0.xyz = r0.xyz*r1.xxx;\n"
    "    output.color0.w = r1.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C57C4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGreenScreen");
}

void sub_1B28C57D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C58D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C5914()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C590CLL);
}

_QWORD *HgcGreenScreen::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGreenScreen [hgc1]");
}

uint64_t HgcGreenScreen::BindTexture(HgcGreenScreen *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcGreenScreen::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcGreenScreen::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t *v54;
  unsigned int v55;
  float32x4_t v56;
  uint64_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v55 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v15 = *(float32x4_t *)(v13 + 64);
          v14 = *(float32x4_t *)(v13 + 80);
          v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v14);
          v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
          v18 = *(float32x4_t *)(v13 + 96);
          v19 = *(int8x16_t *)(v13 + 112);
          v20 = vmulq_f32(vrecpeq_f32(v16), v18);
          v21 = vmulq_f32(vrecpeq_f32(v17), v18);
          v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
          v23 = vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
          v24 = *(int8x16_t *)(v13 + 128);
          v25 = *(float32x4_t *)(v13 + 144);
          v26 = vmulq_f32(v11, (float32x4_t)vorrq_s8(v22, v24));
          v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v23, v24));
          v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1);
          v29 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1);
          v30 = *(float32x4_t *)(v13 + 160);
          v31 = *(float32x4_t *)(v13 + 176);
          v32 = vaddq_f32(v28, vmulq_f32(v30, vsubq_f32(vsubq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 0)), v28)));
          v33 = vaddq_f32(v29, vmulq_f32(v30, vsubq_f32(vsubq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0)), v29)));
          v34 = *(float32x4_t *)(v13 + 16);
          v35 = (int8x16_t)vcgeq_f32(v32, v34);
          v36 = (int8x16_t)vcgeq_f32(v33, v34);
          v37 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v34, *(float32x4_t *)v13), 0);
          v38 = *(float32x4_t *)(v13 + 192);
          v39 = *(float32x4_t *)(v13 + 208);
          v40 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v37)), v31), v38);
          v41 = vmulq_f32(v40, vrecpsq_f32(v37, v40));
          v42 = vsubq_f32(v25, vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v35), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v32, *(float32x4_t *)v13)), vmulq_f32(vsubq_f32(v32, *(float32x4_t *)v13), v41))), v39), v25));
          v43 = vsubq_f32(v25, vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v36), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v33, *(float32x4_t *)v13)), vmulq_f32(vsubq_f32(v33, *(float32x4_t *)v13), v41))), v39), v25));
          v44 = *(float32x4_t *)(v13 + 32);
          v45 = *(float32x4_t *)(v13 + 48);
          v46 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(v14, vsubq_f32(v45, v44)), 0);
          v47 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v46)), v31), v38);
          v48 = vmulq_f32(v47, vrecpsq_f32(v46, v47));
          v49 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v42, v45)), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v42, v44)), vmulq_f32(vsubq_f32(v42, v44), v48))), v39), v25);
          v50 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v43, v45)), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v43, v44)), vmulq_f32(vsubq_f32(v43, v44), v48))), v39), v25);
          v51 = (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v49, vmulq_f32(v15, vsubq_f32(vsubq_f32(v25, v49), v49))), v39), v25), v26, 3);
          v52 = (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v50, vmulq_f32(v15, vsubq_f32(vsubq_f32(v25, v50), v50))), v39), v25), v27, 3);
          v53 = *(int8x16_t *)(v13 + 224);
          v54 = (int8x16_t *)(v5 + v10);
          v54[-1] = vbslq_s8(v53, v51, (int8x16_t)vmulq_n_f32(v26, *(float *)v51.i32));
          *v54 = vbslq_s8(v53, v52, (int8x16_t)vmulq_n_f32(v27, *(float *)v52.i32));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v55 = -v9;
      }
      if ((int)v55 < v4)
      {
        v56 = *(float32x4_t *)(v6 + 16 * v55);
        v57 = *(_QWORD *)(a1 + 408);
        v58 = *(float32x4_t *)(v57 + 80);
        v59 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 3), v58);
        v60 = *(float32x4_t *)(v57 + 96);
        v61 = vmulq_f32(vrecpeq_f32(v59), v60);
        v62 = *(float32x4_t *)(v57 + 144);
        v63 = vmulq_f32(v56, (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v57 + 112), (int8x16_t)vmulq_f32(v61, vrecpsq_f32(v61, v59))), *(int8x16_t *)(v57 + 128)));
        v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1);
        v65 = *(float32x4_t *)(v57 + 176);
        v66 = vaddq_f32(v64, vmulq_f32(*(float32x4_t *)(v57 + 160), vsubq_f32(vsubq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 0)), v64)));
        v67 = *(float32x4_t *)(v57 + 16);
        v68 = (int8x16_t)vcgeq_f32(v66, v67);
        v69 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v67, *(float32x4_t *)v57), 0);
        v70 = *(float32x4_t *)(v57 + 192);
        v71 = *(float32x4_t *)(v57 + 208);
        v72 = vminq_f32(vmaxq_f32(vmulq_f32(v60, vrecpeq_f32(v69)), v65), v70);
        v73 = vsubq_f32(v62, vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v62, v68), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v62, (int8x16_t)vcgeq_f32(v66, *(float32x4_t *)v57)), vmulq_f32(vsubq_f32(v66, *(float32x4_t *)v57), vmulq_f32(v72, vrecpsq_f32(v69, v72))))), v71), v62));
        v74 = *(float32x4_t *)(v57 + 32);
        v75 = *(float32x4_t *)(v57 + 48);
        v58.i64[0] = vaddq_f32(v58, vsubq_f32(v75, v74)).u64[0];
        v76 = (float32x4_t)vandq_s8((int8x16_t)v62, (int8x16_t)vcgeq_f32(v73, v74));
        v77 = (float32x4_t)vandq_s8((int8x16_t)v62, (int8x16_t)vcgeq_f32(v73, v75));
        v78 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 0);
        v79 = vsubq_f32(v73, v74);
        v80 = vminq_f32(vmaxq_f32(vmulq_f32(v60, vrecpeq_f32(v78)), v65), v70);
        v81 = vminq_f32(vmaxq_f32(vaddq_f32(v77, vmulq_f32(v76, vmulq_f32(v79, vmulq_f32(v80, vrecpsq_f32(v78, v80))))), v71), v62);
        v82 = (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v81, vmulq_f32(*(float32x4_t *)(v57 + 64), vsubq_f32(vsubq_f32(v62, v81), v81))), v71), v62), v63, 3);
        *(int8x16_t *)(v5 + 16 * v55) = vbslq_s8(*(int8x16_t *)(v57 + 224), v82, (int8x16_t)vmulq_n_f32(v63, *(float *)v82.i32));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcGreenScreen::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcGreenScreen::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcGreenScreen::HgcGreenScreen(HgcGreenScreen *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F4C00;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(int32x4_t *)(v3 + 80) = vdupq_n_s32(0x358637BDu);
  *(int32x4_t *)(v3 + 96) = vdupq_n_s32(0x3F804020u);
  *(_OWORD *)(v3 + 112) = xmmword_1B30514E0;
  *(_OWORD *)(v3 + 128) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 144) = xmmword_1B304FAB0;
  *(_OWORD *)(v3 + 160) = xmmword_1B3053630;
  *(_OWORD *)(v3 + 176) = xmmword_1B3053640;
  *(int32x4_t *)(v3 + 192) = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C5F4C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGreenScreen::~HgcGreenScreen(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F4C00;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4019FCA701);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGreenScreen::~HgcGreenScreen(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGreenScreen::SetParameter(HgcGreenScreen *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcGreenScreen::GetParameter(HgcGreenScreen *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcConcentricPolygonsGradient::GetProgram(HgcConcentricPolygonsGradient *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000086b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.5000000000, 1.000000000, 0.000000000, 255.0000000);\n"
             "    const half4 c1 = half4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0;\n"
             "    float4 s0, s1, s2, s3, s4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    s0.xy = s0.xy*hg_Params[2].xy;\n"
             "    s1.y = dot(s0.xyz, hg_Params[4].zwz);\n"
             "    s0.x = dot(s0.xyz, hg_Params[4].xyx);\n"
             "    s0.y = s1.y;\n"
             "    s1.x = dot(s0.xy, s0.xy);\n"
             "    s1.x = sqrt(s1.x);\n"
             "    s0.x = atan2(s0.y, s0.x);\n"
             "    s2.x = s0.x;\n"
             "    s0.x = s0.x*hg_Params[3].y;\n"
             "    s0.x = floor(s0.x);\n"
             "    s0.x = float(c0.x) + s0.x;\n"
             "    s0.x = hg_Params[3].x*s0.x + -s2.x;\n"
             "    s0.x = cos(s0.x);\n"
             "    s0.x = s0.x*s1.x;\n"
             "    s2.x = clamp(s0.x - hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    s2.x = float(c0.y) - s2.x;\n"
             "    s1.x = float(c0.y) + s0.x;\n"
             "    s1.x = clamp(s1.x - hg_Params[8].x, 0.00000f, 1.00000f);\n"
             "    s2.x = s2.x*s1.x;\n"
             "    s0.x = s0.x*hg_Params[5].x;\n"
             "    s0.x = hg_Params[2].z*s0.x + hg_Params[1].x;\n"
             "    s1.x = fract(s0.x);\n"
             "    s3.x = floor(s0.x);\n"
             "    s3.x = s3.x*float(c0.x);\n"
             "    s3.x = fract(s3.x);\n"
             "    s3.x = float(c0.z) - s3.x;\n"
             "    s4.x = float(c0.y) - s1.x;\n"
             "    s3.x = select(s4.x, s1.x, s3.x < 0.00000h);\n"
             "    s0.x = clamp(s0.x, 0.00000f, 1.00000f);\n"
             "    s0.x = select(s3.x, s0.x, hg_Params[6].x < 0.00000h);\n"
             "    s0.x = select(s0.x, s1.x, -hg_Params[6].x < 0.00000h);\n"
             "    s0.y = float(c0.x);\n"
             "    s0.x = s0.x*float(c0.w) + float(c0.x);\n"
             "    s0.xy = s0.xy + hg_Params[9].xy;\n"
             "    s0.xy = s0.xy*hg_Params[9].zw;\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    s4.x = s2.x*s2.x;\n"
             "    s3.x = s4.x*float(c1.x);\n"
             "    s4.x = s4.x*s2.x;\n"
             "    s4.x = s4.x*float(c1.y) + s3.x;\n"
             "    output.color0.xyz = float3(r0.xyz)*s4.xxx;\n"
             "    output.color0.w = s4.x*float(r0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=c1db0d91:6fd39c5a:ca81035f:9c5e971c\n"
             "//SIG=00400000:00000000:00000000:00000001:0002:000a:0006:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000007fe\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.5000000000, 1.000000000, 0.000000000, 255.0000000);\n"
             "    const float4 c1 = float4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xyz = frag._texCoord0.xyz - hg_Params[0].xyz;\n"
             "    r0.xy = r0.xy*hg_Params[2].xy;\n"
             "    r1.y = dot(r0.xyz, hg_Params[4].zwz);\n"
             "    r0.x = dot(r0.xyz, hg_Params[4].xyx);\n"
             "    r0.y = r1.y;\n"
             "    r1.x = dot(r0.xy, r0.xy);\n"
             "    r1.x = sqrt(r1.x);\n"
             "    r0.x = atan2(r0.y, r0.x);\n"
             "    r2.x = r0.x;\n"
             "    r0.x = r0.x*hg_Params[3].y;\n"
             "    r0.x = floor(r0.x);\n"
             "    r0.x = c0.x + r0.x;\n"
             "    r0.x = hg_Params[3].x*r0.x + -r2.x;\n"
             "    r0.x = cos(r0.x);\n"
             "    r0.x = r0.x*r1.x;\n"
             "    r2.x = clamp(r0.x - hg_Params[7].x, 0.00000f, 1.00000f);\n"
             "    r2.x = c0.y - r2.x;\n"
             "    r1.x = c0.y + r0.x;\n"
             "    r1.x = clamp(r1.x - hg_Params[8].x, 0.00000f, 1.00000f);\n"
             "    r2.x = r2.x*r1.x;\n"
             "    r0.x = r0.x*hg_Params[5].x;\n"
             "    r0.x = hg_Params[2].z*r0.x + hg_Params[1].x;\n"
             "    r1.x = fract(r0.x);\n"
             "    r3.x = floor(r0.x);\n"
             "    r3.x = r3.x*c0.x;\n"
             "    r3.x = fract(r3.x);\n"
             "    r3.x = c0.z - r3.x;\n"
             "    r4.x = c0.y - r1.x;\n"
             "    r3.x = select(r4.x, r1.x, r3.x < 0.00000f);\n"
             "    r0.x = clamp(r0.x, 0.00000f, 1.00000f);\n"
             "    r0.x = select(r3.x, r0.x, hg_Params[6].x < 0.00000f);\n"
             "    r0.x = select(r0.x, r1.x, -hg_Params[6].x < 0.00000f);\n"
             "    r0.y = c0.x;\n"
             "    r0.x = r0.x*c0.w + c0.x;\n"
             "    r0.xy = r0.xy + hg_Params[9].xy;\n"
             "    r0.xy = r0.xy*hg_Params[9].zw;\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    r4.x = r2.x*r2.x;\n"
             "    r3.x = r4.x*c1.x;\n"
             "    r4.x = r4.x*r2.x;\n"
             "    r4.x = r4.x*c1.y + r3.x;\n"
             "    output.color0.xyz = r0.xyz*r4.xxx;\n"
             "    output.color0.w = r4.x*r0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=563de31b:16da76f4:eae8c1e1:21c281de\n"
             "//SIG=00000000:00000000:00000000:00000000:0002:000a:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000932\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "uniform highp vec4 hg_ProgramLocal4;\n"
           "uniform highp vec4 hg_ProgramLocal5;\n"
           "uniform highp vec4 hg_ProgramLocal6;\n"
           "uniform highp vec4 hg_ProgramLocal7;\n"
           "uniform highp vec4 hg_ProgramLocal8;\n"
           "uniform highp vec4 hg_ProgramLocal9;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.5000000000, 1.000000000, 0.000000000, 255.0000000);\n"
           "    const highp vec4 c1 = vec4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0.xyz = hg_TexCoord0.xyz - hg_ProgramLocal0.xyz;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal2.xy;\n"
           "    r1.y = dot(r0.xyz, hg_ProgramLocal4.zwz);\n"
           "    r0.x = dot(r0.xyz, hg_ProgramLocal4.xyx);\n"
           "    r0.y = r1.y;\n"
           "    r1.x = dot(r0.xy, r0.xy);\n"
           "    r1.x = sqrt(r1.x);\n"
           "    r0.x = atan(r0.y, r0.x);\n"
           "    r2.x = r0.x;\n"
           "    r0.x = r0.x*hg_ProgramLocal3.y;\n"
           "    r0.x = floor(r0.x);\n"
           "    r0.x = c0.x + r0.x;\n"
           "    r0.x = hg_ProgramLocal3.x*r0.x + -r2.x;\n"
           "    r0.x = cos(r0.x);\n"
           "    r0.x = r0.x*r1.x;\n"
           "    r2.x = clamp(r0.x - hg_ProgramLocal7.x, 0.00000, 1.00000);\n"
           "    r2.x = c0.y - r2.x;\n"
           "    r1.x = c0.y + r0.x;\n"
           "    r1.x = clamp(r1.x - hg_ProgramLocal8.x, 0.00000, 1.00000);\n"
           "    r2.x = r2.x*r1.x;\n"
           "    r0.x = r0.x*hg_ProgramLocal5.x;\n"
           "    r0.x = hg_ProgramLocal2.z*r0.x + hg_ProgramLocal1.x;\n"
           "    r1.x = fract(r0.x);\n"
           "    r3.x = floor(r0.x);\n"
           "    r3.x = r3.x*c0.x;\n"
           "    r3.x = fract(r3.x);\n"
           "    r3.x = c0.z - r3.x;\n"
           "    r4.x = c0.y - r1.x;\n"
           "    r3.x = r3.x < 0.00000 ? r1.x : r4.x;\n"
           "    r0.x = clamp(r0.x, 0.00000, 1.00000);\n"
           "    r0.x = hg_ProgramLocal6.x < 0.00000 ? r0.x : r3.x;\n"
           "    r0.x = -hg_ProgramLocal6.x < 0.00000 ? r1.x : r0.x;\n"
           "    r0.y = c0.x;\n"
           "    r0.x = r0.x*c0.w + c0.x;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal9.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal9.zw;\n"
           "    r0 = texture2D(hg_Texture0, r0.xy);\n"
           "    r4.x = r2.x*r2.x;\n"
           "    r3.x = r4.x*c1.x;\n"
           "    r4.x = r4.x*r2.x;\n"
           "    r4.x = r4.x*c1.y + r3.x;\n"
           "    gl_FragColor.xyz = r0.xyz*r4.xxx;\n"
           "    gl_FragColor.w = r4.x*r0.w;\n"
           "}\n"
           "//MD5=c7be3d23:f4284469:bdf1bb60:59dfaaf1\n"
           "//SIG=00000000:00000000:00000000:00000000:0002:000a:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcConcentricPolygonsGradient::InitProgramDescriptor(HgcConcentricPolygonsGradient *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcConcentricPolygonsGradient_hgc_visible", "//Metal1.0     \n//LEN=000000074e\n[[ visible ]] FragmentOut HgcConcentricPolygonsGradient_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.5000000000, 1.000000000, 0.000000000, 255.0000000);\n"
    "    const float4 c1 = float4(3.000000000, -2.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xyz = texCoord0.xyz - hg_Params[0].xyz;\n"
    "    r0.xy = r0.xy*hg_Params[2].xy;\n"
    "    r1.y = dot(r0.xyz, hg_Params[4].zwz);\n"
    "    r0.x = dot(r0.xyz, hg_Params[4].xyx);\n"
    "    r0.y = r1.y;\n"
    "    r1.x = dot(r0.xy, r0.xy);\n"
    "    r1.x = sqrt(r1.x);\n"
    "    r0.x = atan2(r0.y, r0.x);\n"
    "    r2.x = r0.x;\n"
    "    r0.x = r0.x*hg_Params[3].y;\n"
    "    r0.x = floor(r0.x);\n"
    "    r0.x = c0.x + r0.x;\n"
    "    r0.x = hg_Params[3].x*r0.x + -r2.x;\n"
    "    r0.x = cos(r0.x);\n"
    "    r0.x = r0.x*r1.x;\n"
    "    r2.x = clamp(r0.x - hg_Params[7].x, 0.00000f, 1.00000f);\n"
    "    r2.x = c0.y - r2.x;\n"
    "    r1.x = c0.y + r0.x;\n"
    "    r1.x = clamp(r1.x - hg_Params[8].x, 0.00000f, 1.00000f);\n"
    "    r2.x = r2.x*r1.x;\n"
    "    r0.x = r0.x*hg_Params[5].x;\n"
    "    r0.x = hg_Params[2].z*r0.x + hg_Params[1].x;\n"
    "    r1.x = fract(r0.x);\n"
    "    r3.x = floor(r0.x);\n"
    "    r3.x = r3.x*c0.x;\n"
    "    r3.x = fract(r3.x);\n"
    "    r3.x = c0.z - r3.x;\n"
    "    r4.x = c0.y - r1.x;\n"
    "    r3.x = select(r4.x, r1.x, r3.x < 0.00000f);\n"
    "    r0.x = clamp(r0.x, 0.00000f, 1.00000f);\n"
    "    r0.x = select(r3.x, r0.x, hg_Params[6].x < 0.00000f);\n"
    "    r0.x = select(r0.x, r1.x, -hg_Params[6].x < 0.00000f);\n"
    "    r0.y = c0.x;\n"
    "    r0.x = r0.x*c0.w + c0.x;\n"
    "    r0.xy = r0.xy + hg_Params[9].xy;\n"
    "    r0.xy = r0.xy*hg_Params[9].zw;\n"
    "    r0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    r4.x = r2.x*r2.x;\n"
    "    r3.x = r4.x*c1.x;\n"
    "    r4.x = r4.x*r2.x;\n"
    "    r4.x = r4.x*c1.y + r3.x;\n"
    "    output.color0.xyz = r0.xyz*r4.xxx;\n"
    "    output.color0.w = r4.x*r0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C6158()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcConcentricPolygonsGradient");
}

void sub_1B28C6168(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051B00;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C62E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C6338()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C6330);
}

_QWORD *HgcConcentricPolygonsGradient::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcConcentricPolygonsGradient [hgc1]");
}

uint64_t HgcConcentricPolygonsGradient::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 9, v5, v6, v7, v8);
  return 0;
}

uint64_t HgcConcentricPolygonsGradient::Bind(HgcConcentricPolygonsGradient *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, *((_QWORD *)this + 51) + 48, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, *((_QWORD *)this + 51) + 64, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 5, *((_QWORD *)this + 51) + 80, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 6, *((_QWORD *)this + 51) + 96, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 7, *((_QWORD *)this + 51) + 112, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 8, *((_QWORD *)this + 51) + 128, 1);
  (*(void (**)(HgcConcentricPolygonsGradient *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgcConcentricPolygonsGradient::RenderTile(HgcConcentricPolygonsGradient *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int64x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  int8x16_t v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  int8x16_t v139;
  int8x16_t v140;
  float32x4_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  uint64_t v149;
  float32x4_t v150;
  uint64_t v151;
  int32x4_t v152;
  float32x2_t v153;
  float32x4_t *v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v158;
  float32x4_t *v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int32x4_t v163;
  float32x4_t v164;
  int32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t *v178;
  uint64_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  int64x2_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int8x16_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  int8x16_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  int8x16_t v207;
  float32x4_t v208;
  int8x16_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  int8x16_t v213;
  int8x16_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  int8x16_t v224;
  float32x4_t v225;
  float32x4_t v226;
  int8x16_t v227;
  uint64_t v228;
  float32x4_t v229;
  uint64_t v230;
  int32x4_t v231;
  float32x2_t v232;
  float32x4_t *v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  int32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgcConcentricPolygonsGradient *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 16);
          v21 = vsubq_f32(v17, *(float32x4_t *)v19);
          v22 = vsubq_f32(v18, *(float32x4_t *)v19);
          v23 = *(float32x4_t *)(v19 + 32);
          v24 = *(float32x4_t *)(v19 + 48);
          v25.i64[0] = vmulq_f32(v21, v23).u64[0];
          v26.i64[0] = vmulq_f32(v22, v23).u64[0];
          v25.i64[1] = v21.i64[1];
          v26.i64[1] = v22.i64[1];
          v27 = *(int64x2_t *)(v19 + 64);
          v28 = *(float32x4_t *)(v19 + 80);
          v29 = (float32x4_t)vdupq_laneq_s64(v27, 1);
          v30 = (int32x4_t)vmulq_f32(v25, v29);
          v31 = (int32x4_t)vmulq_f32(v26, v29);
          v32 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 4uLL), vaddq_f32((float32x4_t)v31, (float32x4_t)vrev64q_s32(v31)));
          v33 = (float32x4_t)vdupq_lane_s64(v27.i64[0], 0);
          v34 = (int32x4_t)vmulq_f32(v33, v25);
          v35 = (int32x4_t)vmulq_f32(v33, v26);
          v36 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL), vaddq_f32((float32x4_t)v34, (float32x4_t)vrev64q_s32(v34)));
          v37 = *(int8x16_t *)(v19 + 144);
          v38 = *(float32x4_t *)(v19 + 160);
          v39 = (float32x4_t)vbslq_s8(v37, v36, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 4uLL), vaddq_f32((float32x4_t)v30, (float32x4_t)vrev64q_s32(v30))));
          v40 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), vaddq_f32((float32x4_t)v35, (float32x4_t)vrev64q_s32(v35))), v32);
          v41 = vmulq_f32(v39, v39);
          v42 = vmulq_f32(v40, v40);
          v43 = vaddq_f32(v41, (float32x4_t)vrev64q_s32((int32x4_t)v41));
          v44 = vaddq_f32(v42, (float32x4_t)vrev64q_s32((int32x4_t)v42));
          v45 = vminq_f32(vrsqrteq_f32(v43), v38);
          v46 = vminq_f32(vrsqrteq_f32(v44), v38);
          v47 = vminq_f32(vmulq_f32(v45, vrsqrtsq_f32(vmulq_f32(v45, v43), v45)), v38);
          v48 = vminq_f32(vmulq_f32(v46, vrsqrtsq_f32(vmulq_f32(v46, v44), v46)), v38);
          v49 = vmulq_f32(vminq_f32(vmulq_f32(v47, vrsqrtsq_f32(vmulq_f32(v47, v43), v47)), v38), v43);
          v50 = vmulq_f32(v44, vminq_f32(vmulq_f32(v48, vrsqrtsq_f32(vmulq_f32(v48, v44), v48)), v38));
          v51 = (int8x16_t)vrev64q_s32((int32x4_t)v39);
          v52 = (int8x16_t)vrev64q_s32((int32x4_t)v40);
          v53 = vabsq_f32((float32x4_t)v51);
          v54 = vabsq_f32((float32x4_t)v52);
          v55 = vabsq_f32(v39);
          v56 = vabsq_f32(v40);
          v57 = vmaxq_f32(v55, v53);
          v58 = vmaxq_f32(v56, v54);
          v59 = vminq_f32(v55, v53);
          v60 = vminq_f32(v56, v54);
          v61 = vsubq_f32(v53, v55);
          v62 = vsubq_f32(v54, v56);
          v63 = *(float32x4_t *)(v19 + 176);
          v64 = *(float32x4_t *)(v19 + 192);
          v65 = vmaxq_f32(v57, v63);
          v66 = vmaxq_f32(v58, v63);
          v67 = vminq_f32(vmaxq_f32(vrecpeq_f32(v65), v64), v38);
          v68 = vminq_f32(vmaxq_f32(vrecpeq_f32(v66), v64), v38);
          v69 = vminq_f32(vmaxq_f32(vmulq_f32(v67, vrecpsq_f32(v65, v67)), v64), v38);
          v70 = vminq_f32(vmaxq_f32(vmulq_f32(v68, vrecpsq_f32(v66, v68)), v64), v38);
          v71 = vmulq_f32(v70, vrecpsq_f32(v66, v70));
          v72 = vmulq_f32(v59, vmulq_f32(v69, vrecpsq_f32(v65, v69)));
          v73 = vmulq_f32(v60, v71);
          v74 = vmulq_f32(v72, v72);
          v75 = vmulq_f32(v73, v73);
          v76 = *(float32x4_t *)(v19 + 208);
          v77 = *(float32x4_t *)(v19 + 224);
          v78 = vaddq_f32(v76, vmulq_f32(v74, v77));
          v79 = vaddq_f32(v76, vmulq_f32(v77, v75));
          v80 = vmulq_f32(v74, v78);
          v81 = *(float32x4_t *)(v19 + 240);
          v82 = *(float32x4_t *)(v19 + 256);
          v83 = vaddq_f32(v82, vmulq_f32(v75, vaddq_f32(v81, vmulq_f32(v75, v79))));
          v84 = vmulq_f32(v74, vaddq_f32(v82, vmulq_f32(v74, vaddq_f32(v81, v80))));
          v85 = *(float32x4_t *)(v19 + 272);
          v86 = *(float32x4_t *)(v19 + 288);
          v87 = (int8x16_t)vmulq_f32(v72, vaddq_f32(v86, vmulq_f32(v74, vaddq_f32(v85, v84))));
          v88 = (int8x16_t)vmulq_f32(v73, vaddq_f32(v86, vmulq_f32(v75, vaddq_f32(v85, vmulq_f32(v75, v83)))));
          v90 = *(float32x4_t *)(v19 + 304);
          v89 = *(float32x4_t *)(v19 + 320);
          v91 = vbslq_s8((int8x16_t)vcgtq_f32(v61, v89), (int8x16_t)vsubq_f32(v90, (float32x4_t)v87), v87);
          v92 = vbslq_s8((int8x16_t)vcgtq_f32(v62, v89), (int8x16_t)vsubq_f32(v90, (float32x4_t)v88), v88);
          v93 = *(float32x4_t *)(v19 + 336);
          v94 = *(int8x16_t *)(v19 + 352);
          v95 = (float32x4_t)veorq_s8(vandq_s8(v94, v51), vbslq_s8((int8x16_t)vcgtq_f32(v89, v39), (int8x16_t)vsubq_f32(v93, (float32x4_t)v91), v91));
          v96 = (float32x4_t)veorq_s8(vandq_s8(v94, v52), vbslq_s8((int8x16_t)vcgtq_f32(v89, v40), (int8x16_t)vsubq_f32(v93, (float32x4_t)v92), v92));
          v97 = vmulq_lane_f32(v95, *(float32x2_t *)v24.f32, 1);
          v98 = vmulq_lane_f32(v96, *(float32x2_t *)v24.f32, 1);
          v99 = vcvtq_f32_s32(vcvtq_s32_f32(v97));
          v100 = vcvtq_f32_s32(vcvtq_s32_f32(v98));
          v101 = (int8x16_t)vcgtq_f32(v99, v97);
          v102 = *(int8x16_t *)(v19 + 368);
          v103 = *(float32x4_t *)(v19 + 384);
          v104 = vsubq_f32(vmulq_f32(v24, vaddq_f32(v103, vsubq_f32(v99, (float32x4_t)vandq_s8(v102, v101)))), v95);
          v105 = vsubq_f32(vmulq_f32(v24, vaddq_f32(v103, vsubq_f32(v100, (float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(v100, v98))))), v96);
          v106 = *(float32x4_t *)(v19 + 400);
          v107 = *(float32x4_t *)(v19 + 416);
          v108 = vmulq_f32(v106, v104);
          v109 = vmulq_f32(v106, v105);
          v110 = vcvtq_f32_s32(vcvtq_s32_f32(v108));
          v111 = vcvtq_f32_s32(vcvtq_s32_f32(v109));
          v112 = vsubq_f32(vabdq_f32(vsubq_f32(v108, vsubq_f32(v110, (float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(v110, v108)))), v103), v107);
          v113 = vsubq_f32(vabdq_f32(vsubq_f32(v109, vsubq_f32(v111, (float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(v111, v109)))), v103), v107);
          v114 = vmulq_f32(v112, v112);
          v115 = vmulq_f32(v113, v113);
          v116 = *(float32x4_t *)(v19 + 432);
          v117 = *(float32x4_t *)(v19 + 448);
          v118 = vaddq_f32(v116, vmulq_f32(v117, v114));
          v119 = vaddq_f32(v116, vmulq_f32(v117, v115));
          v120 = vmulq_f32(v114, v118);
          v121 = *(float32x4_t *)(v19 + 464);
          v122 = *(float32x4_t *)(v19 + 480);
          v123 = vmulq_f32(v112, vaddq_f32(v122, vmulq_f32(v114, vaddq_f32(v121, v120))));
          v124 = vmulq_f32(v113, vaddq_f32(v122, vmulq_f32(v115, vaddq_f32(v121, vmulq_f32(v115, v119)))));
          v125 = vmulq_f32(v49, v123);
          v126 = vmulq_f32(v50, v124);
          v127 = vaddq_f32(v20, vmulq_laneq_f32(vmulq_f32(v28, v125), v23, 2));
          v128 = vaddq_f32(v20, vmulq_laneq_f32(vmulq_f32(v28, v126), v23, 2));
          v129 = vcvtq_f32_s32(vcvtq_s32_f32(v127));
          v130 = vcvtq_f32_s32(vcvtq_s32_f32(v128));
          v131 = vsubq_f32(v129, (float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(v129, v127)));
          v132 = vsubq_f32(v130, (float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(v130, v128)));
          v133 = (int8x16_t)vsubq_f32(v127, v131);
          v134 = (int8x16_t)vsubq_f32(v128, v132);
          v135 = vmulq_f32(v103, v131);
          v136 = vmulq_f32(v103, v132);
          v137 = vcvtq_f32_s32(vcvtq_s32_f32(v135));
          v138 = vcvtq_f32_s32(vcvtq_s32_f32(v136));
          v139 = vbslq_s8((int8x16_t)vcgtq_f32(v89, vsubq_f32(v89, vsubq_f32(v135, vsubq_f32(v137, (float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(v137, v135)))))), v133, (int8x16_t)vsubq_f32((float32x4_t)v102, (float32x4_t)v133));
          v140 = vbslq_s8((int8x16_t)vcgtq_f32(v89, vsubq_f32(v89, vsubq_f32(v136, vsubq_f32(v138, (float32x4_t)vandq_s8(v102, (int8x16_t)vcgtq_f32(v138, v136)))))), v134, (int8x16_t)vsubq_f32((float32x4_t)v102, (float32x4_t)v134));
          v141 = *(float32x4_t *)(v19 + 96);
          v142 = (int8x16_t)vcgtq_f32(v89, v141);
          v143 = vbslq_s8(v142, (int8x16_t)vminq_f32(vmaxq_f32(v128, v89), (float32x4_t)v102), v140);
          v144 = (int8x16_t)vcgtq_f32(v141, v89);
          v145 = vbslq_s8(v144, v133, vbslq_s8(v142, (int8x16_t)vminq_f32(vmaxq_f32(v127, v89), (float32x4_t)v102), v139));
          v146 = vbslq_s8(v144, v134, v143);
          v145.i32[1] = 0.5;
          v146.i32[1] = 0.5;
          v147 = *(float32x4_t *)(v19 + 496);
          v148 = (float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32(v103, vmulq_f32(v147, (float32x4_t)v146)), v146);
          v149 = *((int *)a2 + 22);
          v150 = vsubq_f32((float32x4_t)vbslq_s8(v37, (int8x16_t)vaddq_f32(v103, vmulq_f32(v147, (float32x4_t)v145)), v145), v9);
          v151 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v152 = vaddq_s32(vcvtq_s32_f32(v150), vcltzq_f32(v150));
            v153 = (float32x2_t)vsubq_f32(v150, vcvtq_f32_s32(v152)).u64[0];
            v154 = (float32x4_t *)(v151 + 16 * (v152.i32[0] + v152.i32[1] * (int)v149));
            v155 = vaddq_f32(*v154, vmulq_n_f32(vsubq_f32(v154[1], *v154), v153.f32[0]));
            v156 = vaddq_f32(v155, vmulq_lane_f32(vsubq_f32(vaddq_f32(v154[v149], vmulq_n_f32(vsubq_f32(v154[(int)v149 + 1], v154[v149]), v153.f32[0])), v155), v153, 1));
            v157 = vsubq_f32(v148, v9);
            v158 = vaddq_s32(vcvtq_s32_f32(v157), vcltzq_f32(v157));
            v157.i64[0] = vsubq_f32(v157, vcvtq_f32_s32(v158)).u64[0];
            v159 = (float32x4_t *)(v151 + 16 * (v158.i32[0] + v158.i32[1] * (int)v149));
            v160 = vaddq_f32(*v159, vmulq_n_f32(vsubq_f32(v159[1], *v159), v157.f32[0]));
            v161 = vaddq_f32(v160, vmulq_lane_f32(vsubq_f32(vaddq_f32(v159[v149], vmulq_n_f32(vsubq_f32(v159[(int)v149 + 1], v159[v149]), v157.f32[0])), v160), *(float32x2_t *)v157.f32, 1));
          }
          else
          {
            v162 = vaddq_f32(v150, v13);
            v163 = vcvtq_s32_f32(v162);
            v162.i64[0] = vaddq_s32(v163, vcgtq_f32(vcvtq_f32_s32(v163), v162)).u64[0];
            v156 = *(float32x4_t *)(v151 + 16 * (v162.i32[0] + v162.i32[1] * (int)v149));
            v164 = vaddq_f32(vsubq_f32(v148, v9), v13);
            v165 = vcvtq_s32_f32(v164);
            v164.i64[0] = vaddq_s32(v165, vcgtq_f32(vcvtq_f32_s32(v165), v164)).u64[0];
            v161 = *(float32x4_t *)(v151 + 16 * (v164.i32[0] + v164.i32[1] * (int)v149));
          }
          v166 = *(float32x4_t *)(v19 + 112);
          v167 = *(float32x4_t *)(v19 + 128);
          v168 = vsubq_f32((float32x4_t)v102, vminq_f32(vmaxq_f32(vsubq_f32(v125, v166), v89), (float32x4_t)v102));
          v169 = vsubq_f32((float32x4_t)v102, vminq_f32(vmaxq_f32(vsubq_f32(v126, v166), v89), (float32x4_t)v102));
          v170 = vmaxq_f32(vsubq_f32(vaddq_f32((float32x4_t)v102, v125), v167), v89);
          v171 = vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32((float32x4_t)v102, v126), v167), v89), (float32x4_t)v102);
          v172 = vmulq_f32(v168, vminq_f32(v170, (float32x4_t)v102));
          v173 = vmulq_f32(v169, v171);
          v174 = vmulq_f32(v172, v172);
          v175 = vmulq_f32(v173, v173);
          v176 = *(float32x4_t *)(v19 + 512);
          v177 = *(float32x4_t *)(v19 + 528);
          v178 = (float32x4_t *)(v11 + 16 * v15);
          *v178 = vmulq_n_f32(v156, vsubq_f32(vmulq_f32(v174, v176), vmulq_f32(vmulq_f32(v172, v174), v177)).f32[0]);
          v178[1] = vmulq_n_f32(v161, vsubq_f32(vmulq_f32(v175, v176), vmulq_f32(vmulq_f32(v173, v175), v177)).f32[0]);
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v179 = *((_QWORD *)this + 51);
        v180 = vsubq_f32(v17, *(float32x4_t *)v179);
        v182 = *(float32x4_t *)(v179 + 32);
        v181 = *(float32x4_t *)(v179 + 48);
        v183.i64[0] = vmulq_f32(v180, v182).u64[0];
        v183.i64[1] = v180.i64[1];
        v184 = *(int64x2_t *)(v179 + 64);
        v185 = (int32x4_t)vmulq_f32(v183, (float32x4_t)vdupq_laneq_s64(v184, 1));
        v186 = (int32x4_t)vmulq_f32((float32x4_t)vdupq_lane_s64(v184.i64[0], 0), v183);
        v187 = *(int8x16_t *)(v179 + 144);
        v188 = *(float32x4_t *)(v179 + 160);
        v189 = (float32x4_t)vbslq_s8(v187, (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL), vaddq_f32((float32x4_t)v186, (float32x4_t)vrev64q_s32(v186))), (int8x16_t)vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v185, (int8x16_t)v185, 4uLL), vaddq_f32((float32x4_t)v185, (float32x4_t)vrev64q_s32(v185))));
        v190 = vmulq_f32(v189, v189);
        v191 = vaddq_f32(v190, (float32x4_t)vrev64q_s32((int32x4_t)v190));
        v192 = vminq_f32(vrsqrteq_f32(v191), v188);
        v193 = vminq_f32(vmulq_f32(v192, vrsqrtsq_f32(vmulq_f32(v192, v191), v192)), v188);
        v194 = vmulq_f32(vminq_f32(vmulq_f32(v193, vrsqrtsq_f32(vmulq_f32(v193, v191), v193)), v188), v191);
        v195 = (int8x16_t)vrev64q_s32((int32x4_t)v189);
        v196 = vabsq_f32((float32x4_t)v195);
        v197 = vabsq_f32(v189);
        v198 = vmaxq_f32(v197, v196);
        v199 = vminq_f32(v197, v196);
        v200 = vsubq_f32(v196, v197);
        v201 = *(float32x4_t *)(v179 + 192);
        v202 = vmaxq_f32(v198, *(float32x4_t *)(v179 + 176));
        v203 = vminq_f32(vmaxq_f32(vrecpeq_f32(v202), v201), v188);
        v204 = vminq_f32(vmaxq_f32(vmulq_f32(v203, vrecpsq_f32(v202, v203)), v201), v188);
        v205 = vmulq_f32(v199, vmulq_f32(v204, vrecpsq_f32(v202, v204)));
        v206 = vmulq_f32(v205, v205);
        v207 = (int8x16_t)vmulq_f32(v205, vaddq_f32(*(float32x4_t *)(v179 + 288), vmulq_f32(v206, vaddq_f32(*(float32x4_t *)(v179 + 272), vmulq_f32(v206, vaddq_f32(*(float32x4_t *)(v179 + 256), vmulq_f32(v206, vaddq_f32(*(float32x4_t *)(v179 + 240), vmulq_f32(v206, vaddq_f32(*(float32x4_t *)(v179 + 208),
                                              vmulq_f32(*(float32x4_t *)(v179 + 224), v206)))))))))));
        v208 = *(float32x4_t *)(v179 + 320);
        v209 = vbslq_s8((int8x16_t)vcgtq_f32(v200, v208), (int8x16_t)vsubq_f32(*(float32x4_t *)(v179 + 304), (float32x4_t)v207), v207);
        v210 = (float32x4_t)veorq_s8(vandq_s8(*(int8x16_t *)(v179 + 352), v195), vbslq_s8((int8x16_t)vcgtq_f32(v208, v189), (int8x16_t)vsubq_f32(*(float32x4_t *)(v179 + 336), (float32x4_t)v209), v209));
        v211 = vmulq_lane_f32(v210, *(float32x2_t *)v181.f32, 1);
        v212 = vcvtq_f32_s32(vcvtq_s32_f32(v211));
        v213 = (int8x16_t)vcgtq_f32(v212, v211);
        v214 = *(int8x16_t *)(v179 + 368);
        v215 = *(float32x4_t *)(v179 + 384);
        v216 = vmulq_f32(*(float32x4_t *)(v179 + 400), vsubq_f32(vmulq_f32(v181, vaddq_f32(v215, vsubq_f32(v212, (float32x4_t)vandq_s8(v214, v213)))), v210));
        v217 = vcvtq_f32_s32(vcvtq_s32_f32(v216));
        v218 = vsubq_f32(vabdq_f32(vsubq_f32(v216, vsubq_f32(v217, (float32x4_t)vandq_s8(v214, (int8x16_t)vcgtq_f32(v217, v216)))), v215), *(float32x4_t *)(v179 + 416));
        v219 = vmulq_f32(v218, v218);
        v220 = vmulq_f32(v194, vmulq_f32(v218, vaddq_f32(*(float32x4_t *)(v179 + 480), vmulq_f32(v219, vaddq_f32(*(float32x4_t *)(v179 + 464), vmulq_f32(v219, vaddq_f32(*(float32x4_t *)(v179 + 432), vmulq_f32(*(float32x4_t *)(v179 + 448), v219))))))));
        v221 = vaddq_f32(*(float32x4_t *)(v179 + 16), vmulq_laneq_f32(vmulq_f32(*(float32x4_t *)(v179 + 80), v220), v182, 2));
        v222 = vcvtq_f32_s32(vcvtq_s32_f32(v221));
        v223 = vsubq_f32(v222, (float32x4_t)vandq_s8(v214, (int8x16_t)vcgtq_f32(v222, v221)));
        v224 = (int8x16_t)vsubq_f32(v221, v223);
        v225 = vmulq_f32(v215, v223);
        v226 = vcvtq_f32_s32(vcvtq_s32_f32(v225));
        v227 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v179 + 96), v208), v224, vbslq_s8((int8x16_t)vcgtq_f32(v208, *(float32x4_t *)(v179 + 96)), (int8x16_t)vminq_f32(vmaxq_f32(v221, v208), (float32x4_t)v214), vbslq_s8((int8x16_t)vcgtq_f32(v208, vsubq_f32(v208, vsubq_f32(v225, vsubq_f32(v226, (float32x4_t)vandq_s8(v214, (int8x16_t)vcgtq_f32(v226, v225)))))), v224, (int8x16_t)vsubq_f32((float32x4_t)v214, (float32x4_t)v224))));
        v227.i32[1] = 0.5;
        v228 = *((int *)a2 + 22);
        v229 = vsubq_f32((float32x4_t)vbslq_s8(v187, (int8x16_t)vaddq_f32(v215, vmulq_f32(*(float32x4_t *)(v179 + 496), (float32x4_t)v227)), v227), v9);
        v230 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v231 = vaddq_s32(vcvtq_s32_f32(v229), vcltzq_f32(v229));
          v232 = (float32x2_t)vsubq_f32(v229, vcvtq_f32_s32(v231)).u64[0];
          v233 = (float32x4_t *)(v230 + 16 * (v231.i32[0] + v231.i32[1] * (int)v228));
          v234 = vaddq_f32(*v233, vmulq_n_f32(vsubq_f32(v233[1], *v233), v232.f32[0]));
          v235 = vaddq_f32(v234, vmulq_lane_f32(vsubq_f32(vaddq_f32(v233[v228], vmulq_n_f32(vsubq_f32(v233[(int)v228 + 1], v233[v228]), v232.f32[0])), v234), v232, 1));
        }
        else
        {
          v236 = vaddq_f32(v229, v13);
          v237 = vcvtq_s32_f32(v236);
          v236.i64[0] = vaddq_s32(v237, vcgtq_f32(vcvtq_f32_s32(v237), v236)).u64[0];
          v235 = *(float32x4_t *)(v230 + 16 * (v236.i32[0] + v236.i32[1] * (int)v228));
        }
        v238 = vmulq_f32(vsubq_f32((float32x4_t)v214, vminq_f32(vmaxq_f32(vsubq_f32(v220, *(float32x4_t *)(v179 + 112)), v208), (float32x4_t)v214)), vminq_f32(vmaxq_f32(vsubq_f32(vaddq_f32((float32x4_t)v214, v220), *(float32x4_t *)(v179 + 128)), v208), (float32x4_t)v214));
        v239 = vmulq_f32(v238, v238);
        *(float32x4_t *)(v11 + 16 * v15) = vmulq_n_f32(v235, vsubq_f32(vmulq_f32(v239, *(float32x4_t *)(v179 + 512)), vmulq_f32(vmulq_f32(v238, v239), *(float32x4_t *)(v179 + 528))).f32[0]);
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcConcentricPolygonsGradient::GetDOD(HgcConcentricPolygonsGradient *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgcConcentricPolygonsGradient *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgcConcentricPolygonsGradient::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgcConcentricPolygonsGradient::HgcConcentricPolygonsGradient(HgcConcentricPolygonsGradient *this)
{
  _QWORD *v2;
  HgcConcentricPolygonsGradient::State *v3;
  double v4;
  uint64_t v5;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F4E68;
  v3 = (HgcConcentricPolygonsGradient::State *)operator new();
  v4 = HgcConcentricPolygonsGradient::State::State(v3);
  *((_QWORD *)this + 51) = v5;
  (*(void (**)(HgcConcentricPolygonsGradient *, _QWORD, uint64_t, double))(*(_QWORD *)this + 136))(this, 0, 1, v4);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28C70D8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcConcentricPolygonsGradient::~HgcConcentricPolygonsGradient(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F4E68;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40CD7AB3DBLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcConcentricPolygonsGradient::~HgcConcentricPolygonsGradient(this);
  HGObject::operator delete(v1);
}

uint64_t HgcConcentricPolygonsGradient::SetParameter(HgcConcentricPolygonsGradient *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  __n128 *v7;
  __n128 *v9;
  float *v10;
  float *v11;
  float *v12;
  float *v13;
  float *v14;
  float *v15;
  float *v16;

  switch((int)a2)
  {
    case 0:
      v7 = (__n128 *)*((_QWORD *)this + 51);
      if (v7->n128_f32[0] == a3.n128_f32[0] && v7->n128_f32[1] == a4 && v7->n128_f32[2] == a6 && v7->n128_f32[3] == 0.0)
        return 0;
      v7->n128_u32[0] = a3.n128_u32[0];
      v7->n128_f32[1] = a4;
      v7->n128_f32[2] = a6;
      a3.n128_f32[1] = a4;
      v7->n128_u32[3] = 0;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v7[35] = a3;
      goto LABEL_48;
    case 1:
      v9 = (__n128 *)*((_QWORD *)this + 51);
      if (v9[1].n128_f32[0] == a4 && v9[1].n128_f32[1] == 0.0 && v9[1].n128_f32[2] == 0.0 && v9[1].n128_f32[3] == 0.0)
        return 0;
      v9[1].n128_f32[0] = a4;
      v9[1].n128_u64[1] = 0;
      v9[1].n128_u32[1] = 0;
      a3.n128_f32[1] = a4;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      v9[36] = a3;
      goto LABEL_48;
    case 2:
      v10 = (float *)*((_QWORD *)this + 51);
      if (v10[8] == a3.n128_f32[0] && v10[9] == a4 && v10[10] == a5 && v10[11] == a6)
        return 0;
      v10[8] = a3.n128_f32[0];
      v10[9] = a4;
      v10[10] = a5;
      v10[11] = a6;
      goto LABEL_48;
    case 3:
      v11 = (float *)*((_QWORD *)this + 51);
      if (v11[12] == a3.n128_f32[0] && v11[13] == a4 && v11[14] == a5 && v11[15] == a6)
        return 0;
      v11[12] = a3.n128_f32[0];
      v11[13] = a4;
      v11[14] = a5;
      v11[15] = a6;
      goto LABEL_48;
    case 4:
      v12 = (float *)*((_QWORD *)this + 51);
      if (v12[16] == a3.n128_f32[0] && v12[17] == a4 && v12[18] == a5 && v12[19] == a6)
        return 0;
      v12[16] = a3.n128_f32[0];
      v12[17] = a4;
      v12[18] = a5;
      v12[19] = a6;
      goto LABEL_48;
    case 5:
      v13 = (float *)*((_QWORD *)this + 51);
      if (v13[20] == a3.n128_f32[0] && v13[21] == a4 && v13[22] == a5 && v13[23] == a6)
        return 0;
      v13[20] = a3.n128_f32[0];
      v13[21] = a4;
      v13[22] = a5;
      v13[23] = a6;
      goto LABEL_48;
    case 6:
      v14 = (float *)*((_QWORD *)this + 51);
      if (v14[24] == a3.n128_f32[0] && v14[25] == a4 && v14[26] == a5 && v14[27] == a6)
        return 0;
      v14[24] = a3.n128_f32[0];
      v14[25] = a4;
      v14[26] = a5;
      v14[27] = a6;
      goto LABEL_48;
    case 7:
      v15 = (float *)*((_QWORD *)this + 51);
      if (v15[28] == a3.n128_f32[0] && v15[29] == a4 && v15[30] == a5 && v15[31] == a6)
        return 0;
      v15[28] = a3.n128_f32[0];
      v15[29] = a4;
      v15[30] = a5;
      v15[31] = a6;
      goto LABEL_48;
    case 8:
      v16 = (float *)*((_QWORD *)this + 51);
      if (v16[32] == a3.n128_f32[0] && v16[33] == a4 && v16[34] == a5 && v16[35] == a6)
        return 0;
      v16[32] = a3.n128_f32[0];
      v16[33] = a4;
      v16[34] = a5;
      v16[35] = a6;
LABEL_48:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    default:
      return 0xFFFFFFFFLL;
  }
}

float HgcConcentricPolygonsGradient::GetParameter(HgcConcentricPolygonsGradient *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float *v11;
  float *v12;
  float result;

  switch(a2)
  {
    case 0:
      v3 = (float *)*((_QWORD *)this + 51);
      *a3 = v3[140];
      a3[1] = v3[141];
      a3[2] = v3[142];
      v4 = v3 + 143;
      goto LABEL_11;
    case 1:
      v5 = (float *)*((_QWORD *)this + 51);
      *a3 = v5[144];
      a3[1] = v5[145];
      a3[2] = v5[146];
      v4 = v5 + 147;
      goto LABEL_11;
    case 2:
      v6 = (float *)*((_QWORD *)this + 51);
      *a3 = v6[8];
      a3[1] = v6[9];
      a3[2] = v6[10];
      v4 = v6 + 11;
      goto LABEL_11;
    case 3:
      v7 = (float *)*((_QWORD *)this + 51);
      *a3 = v7[12];
      a3[1] = v7[13];
      a3[2] = v7[14];
      v4 = v7 + 15;
      goto LABEL_11;
    case 4:
      v8 = (float *)*((_QWORD *)this + 51);
      *a3 = v8[16];
      a3[1] = v8[17];
      a3[2] = v8[18];
      v4 = v8 + 19;
      goto LABEL_11;
    case 5:
      v9 = (float *)*((_QWORD *)this + 51);
      *a3 = v9[20];
      a3[1] = v9[21];
      a3[2] = v9[22];
      v4 = v9 + 23;
      goto LABEL_11;
    case 6:
      v10 = (float *)*((_QWORD *)this + 51);
      *a3 = v10[24];
      a3[1] = v10[25];
      a3[2] = v10[26];
      v4 = v10 + 27;
      goto LABEL_11;
    case 7:
      v11 = (float *)*((_QWORD *)this + 51);
      *a3 = v11[28];
      a3[1] = v11[29];
      a3[2] = v11[30];
      v4 = v11 + 31;
      goto LABEL_11;
    case 8:
      v12 = (float *)*((_QWORD *)this + 51);
      *a3 = v12[32];
      a3[1] = v12[33];
      a3[2] = v12[34];
      v4 = v12 + 35;
LABEL_11:
      result = *v4;
      a3[3] = *v4;
      break;
    default:
      return result;
  }
  return result;
}

double HgcConcentricPolygonsGradient::State::State(HgcConcentricPolygonsGradient::State *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = xmmword_1B3050E20;
  *((int32x4_t *)this + 10) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 11) = xmmword_1B3051840;
  *((_OWORD *)this + 12) = xmmword_1B3051200;
  *((_OWORD *)this + 13) = xmmword_1B3051B10;
  *((_OWORD *)this + 14) = xmmword_1B3051B20;
  *((_OWORD *)this + 15) = xmmword_1B3051B30;
  *((_OWORD *)this + 16) = xmmword_1B3051B40;
  *((_OWORD *)this + 17) = xmmword_1B3051B50;
  *((_OWORD *)this + 18) = xmmword_1B3051B60;
  *((_OWORD *)this + 19) = xmmword_1B3051B70;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_OWORD *)this + 21) = xmmword_1B3051B80;
  *((_OWORD *)this + 22) = xmmword_1B3051080;
  *((_OWORD *)this + 23) = xmmword_1B304F230;
  *((_OWORD *)this + 24) = xmmword_1B3051880;
  *((_OWORD *)this + 25) = xmmword_1B3053170;
  *((_OWORD *)this + 26) = xmmword_1B3053670;
  *((_OWORD *)this + 27) = xmmword_1B3053180;
  *((_OWORD *)this + 28) = xmmword_1B3053190;
  *((_OWORD *)this + 29) = xmmword_1B30531A0;
  *((_OWORD *)this + 30) = xmmword_1B30531B0;
  *((_OWORD *)this + 31) = xmmword_1B30521C0;
  *((_OWORD *)this + 32) = xmmword_1B3052B90;
  *((_OWORD *)this + 33) = xmmword_1B3052A40;
  *((_OWORD *)this + 34) = xmmword_1B3050F70;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  return result;
}

const char *HgcDiffScreen::GetProgram(HgcDiffScreen *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=000000065a\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.5000000000, 9.999999975e-07, 0.000000000);\n"
             "    half4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / half4(fmax(r0.www, 6.10350e-05h), 1.);\n"
             "    r1.xw = c0.xx - r0.xx;\n"
             "    r2.xw = r0.zz - r0.yy;\n"
             "    r2.xw = mix(fabs(r2.xw), r1.xw, c0.yy);\n"
             "    r1.xw = half2(r2.xw >= half2(hg_Params[0].xw));\n"
             "    r3.xw = half2(r2.xw >= half2(hg_Params[1].xw));\n"
             "    r4.x = half(hg_Params[1].x) - half(hg_Params[0].x);\n"
             "    r2.xw = r2.xw - half2(hg_Params[0].xw);\n"
             "    r4.x = r4.x + c0.z;\n"
             "    r2.xw = r2.xw/r4.xx;\n"
             "    r2.xw = clamp(r2.xw*r1.xw + r3.xw, 0.00000h, 1.00000h);\n"
             "    r2.xw = c0.xx - r2.xw;\n"
             "    r4.xw = half2(r2.xw >= half2(hg_Params[2].xw));\n"
             "    r1.xw = half2(r2.xw >= half2(hg_Params[3].xw));\n"
             "    r3.x = half(hg_Params[3].x) - half(hg_Params[2].x);\n"
             "    r2.xw = r2.xw - half2(hg_Params[2].xw);\n"
             "    r2.xw = r2.xw/r3.xx;\n"
             "    r2.xw = clamp(r2.xw*r4.xw + r1.xw, 0.00000h, 1.00000h);\n"
             "    r3.xw = c0.xx - r2.xw;\n"
             "    r2.xw = clamp(mix(r2.xw, r3.xw, half2(hg_Params[4].xw)), 0.00000h, 1.00000h);\n"
             "    r2.xw = r2.xw*r0.ww;\n"
             "    output.color0.xyz = float3(r0.xyz)*float3(r2.xxx);\n"
             "    output.color0.w = float(r2.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=1b21e6b8:297b0662:906443c6:c4dc480e\n"
             "//SIG=00400000:00000001:00000001:00000001:0001:0005:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000005fb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.5000000000, 9.999999975e-07, 0.000000000);\n"
             "    float4 r0, r1, r2, r3, r4;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
             "    r1.xw = c0.xx - r0.xx;\n"
             "    r2.xw = r0.zz - r0.yy;\n"
             "    r2.xw = mix(fabs(r2.xw), r1.xw, c0.yy);\n"
             "    r1.xw = float2(r2.xw >= hg_Params[0].xw);\n"
             "    r3.xw = float2(r2.xw >= hg_Params[1].xw);\n"
             "    r4.x = hg_Params[1].x - hg_Params[0].x;\n"
             "    r2.xw = r2.xw - hg_Params[0].xw;\n"
             "    r4.x = r4.x + c0.z;\n"
             "    r2.xw = r2.xw/r4.xx;\n"
             "    r2.xw = clamp(r2.xw*r1.xw + r3.xw, 0.00000f, 1.00000f);\n"
             "    r2.xw = c0.xx - r2.xw;\n"
             "    r4.xw = float2(r2.xw >= hg_Params[2].xw);\n"
             "    r1.xw = float2(r2.xw >= hg_Params[3].xw);\n"
             "    r3.x = hg_Params[3].x - hg_Params[2].x;\n"
             "    r2.xw = r2.xw - hg_Params[2].xw;\n"
             "    r2.xw = r2.xw/r3.xx;\n"
             "    r2.xw = clamp(r2.xw*r4.xw + r1.xw, 0.00000f, 1.00000f);\n"
             "    r3.xw = c0.xx - r2.xw;\n"
             "    r2.xw = clamp(mix(r2.xw, r3.xw, hg_Params[4].xw), 0.00000f, 1.00000f);\n"
             "    r2.xw = r2.xw*r0.ww;\n"
             "    output.color0.xyz = r0.xyz*r2.xxx;\n"
             "    output.color0.w = r2.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=d4dcc50b:2bd21a1d:bfe32c0c:c8f80ee0\n"
             "//SIG=00000000:00000001:00000001:00000000:0001:0005:0005:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000006df\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform mediump vec4 hg_ProgramLocal0;\n"
           "uniform mediump vec4 hg_ProgramLocal1;\n"
           "uniform mediump vec4 hg_ProgramLocal2;\n"
           "uniform mediump vec4 hg_ProgramLocal3;\n"
           "uniform mediump vec4 hg_ProgramLocal4;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const mediump vec4 c0 = vec4(1.000000000, 0.5000000000, 9.999999975e-07, 0.000000000);\n"
           "    mediump vec4 r0, r1, r2, r3, r4;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0 = r0 / vec4(max(r0.www, 1.00000e-06), 1.);\n"
           "    r1.xw = c0.xx - r0.xx;\n"
           "    r2.xw = r0.zz - r0.yy;\n"
           "    r2.xw = mix(abs(r2.xw), r1.xw, c0.yy);\n"
           "    r1.xw = vec2(greaterThanEqual(r2.xw, hg_ProgramLocal0.xw));\n"
           "    r3.xw = vec2(greaterThanEqual(r2.xw, hg_ProgramLocal1.xw));\n"
           "    r4.x = hg_ProgramLocal1.x - hg_ProgramLocal0.x;\n"
           "    r2.xw = r2.xw - hg_ProgramLocal0.xw;\n"
           "    r4.x = r4.x + c0.z;\n"
           "    r2.xw = r2.xw/r4.xx;\n"
           "    r2.xw = clamp(r2.xw*r1.xw + r3.xw, vec2(0.00000), vec2(1.00000));\n"
           "    r2.xw = c0.xx - r2.xw;\n"
           "    r4.xw = vec2(greaterThanEqual(r2.xw, hg_ProgramLocal2.xw));\n"
           "    r1.xw = vec2(greaterThanEqual(r2.xw, hg_ProgramLocal3.xw));\n"
           "    r3.x = hg_ProgramLocal3.x - hg_ProgramLocal2.x;\n"
           "    r2.xw = r2.xw - hg_ProgramLocal2.xw;\n"
           "    r2.xw = r2.xw/r3.xx;\n"
           "    r2.xw = clamp(r2.xw*r4.xw + r1.xw, vec2(0.00000), vec2(1.00000));\n"
           "    r3.xw = c0.xx - r2.xw;\n"
           "    r2.xw = clamp(mix(r2.xw, r3.xw, hg_ProgramLocal4.xw), vec2(0.00000), vec2(1.00000));\n"
           "    r2.xw = r2.xw*r0.ww;\n"
           "    gl_FragColor.xyz = r0.xyz*r2.xxx;\n"
           "    gl_FragColor.w = r2.w;\n"
           "}\n"
           "//MD5=d38620f5:f9b67518:33199026:abe5b0ba\n"
           "//SIG=00000000:00000001:00000001:00000000:0001:0005:0005:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcDiffScreen::InitProgramDescriptor(HgcDiffScreen *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcDiffScreen_hgc_visible", "//Metal1.0     \n//LEN=00000004d2\n[[ visible ]] FragmentOut HgcDiffScreen_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    const float4 c0 = float4(1.000000000, 0.5000000000, 9.999999975e-07, 0.000000000);\n"
    "    float4 r0, r1, r2, r3, r4;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0 = r0 / float4(fmax(r0.www, 1.00000e-06f), 1.);\n"
    "    r1.xw = c0.xx - r0.xx;\n"
    "    r2.xw = r0.zz - r0.yy;\n"
    "    r2.xw = mix(fabs(r2.xw), r1.xw, c0.yy);\n"
    "    r1.xw = float2(r2.xw >= hg_Params[0].xw);\n"
    "    r3.xw = float2(r2.xw >= hg_Params[1].xw);\n"
    "    r4.x = hg_Params[1].x - hg_Params[0].x;\n"
    "    r2.xw = r2.xw - hg_Params[0].xw;\n"
    "    r4.x = r4.x + c0.z;\n"
    "    r2.xw = r2.xw/r4.xx;\n"
    "    r2.xw = clamp(r2.xw*r1.xw + r3.xw, 0.00000f, 1.00000f);\n"
    "    r2.xw = c0.xx - r2.xw;\n"
    "    r4.xw = float2(r2.xw >= hg_Params[2].xw);\n"
    "    r1.xw = float2(r2.xw >= hg_Params[3].xw);\n"
    "    r3.x = hg_Params[3].x - hg_Params[2].x;\n"
    "    r2.xw = r2.xw - hg_Params[2].xw;\n"
    "    r2.xw = r2.xw/r3.xx;\n"
    "    r2.xw = clamp(r2.xw*r4.xw + r1.xw, 0.00000f, 1.00000f);\n"
    "    r3.xw = c0.xx - r2.xw;\n"
    "    r2.xw = clamp(mix(r2.xw, r3.xw, hg_Params[4].xw), 0.00000f, 1.00000f);\n"
    "    r2.xw = r2.xw*r0.ww;\n"
    "    output.color0.xyz = r0.xyz*r2.xxx;\n"
    "    output.color0.w = r2.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C7760()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcDiffScreen");
}

void sub_1B28C7770(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30519C0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C7870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C78B0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C78A8);
}

_QWORD *HgcDiffScreen::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcDiffScreen [hgc1]");
}

uint64_t HgcDiffScreen::BindTexture(HgcDiffScreen *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcDiffScreen::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, a1[51] + 32, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 3, a1[51] + 48, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 4, a1[51] + 64, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcDiffScreen::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t *v60;
  unsigned int v61;
  float32x4_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  int8x16_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int8x16_t v88;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 24);
    v8 = 16 * *(int *)(a2 + 88);
    do
    {
      if (v4 < 2)
      {
        v61 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 16;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 16);
          v12 = *(float32x4_t *)(v6 + v10);
          v13 = *(_QWORD *)(a1 + 408);
          v15 = *(float32x4_t *)(v13 + 64);
          v14 = *(float32x4_t *)(v13 + 80);
          v16 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 3), v14);
          v17 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 3), v14);
          v18 = *(float32x4_t *)(v13 + 96);
          v19 = *(int8x16_t *)(v13 + 112);
          v20 = vmulq_f32(vrecpeq_f32(v16), v18);
          v21 = vmulq_f32(vrecpeq_f32(v17), v18);
          v22 = vandq_s8(v19, (int8x16_t)vmulq_f32(v20, vrecpsq_f32(v20, v16)));
          v23 = vandq_s8(v19, (int8x16_t)vmulq_f32(v21, vrecpsq_f32(v21, v17)));
          v24 = *(int8x16_t *)(v13 + 128);
          v25 = *(float32x4_t *)(v13 + 144);
          v26 = vmulq_f32(v11, (float32x4_t)vorrq_s8(v22, v24));
          v27 = vmulq_f32(v12, (float32x4_t)vorrq_s8(v23, v24));
          v28 = vabdq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1));
          v29 = vabdq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1));
          v30 = *(float32x4_t *)(v13 + 160);
          v31 = *(float32x4_t *)(v13 + 176);
          v32 = vaddq_f32(v28, vmulq_f32(v30, vsubq_f32(vsubq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 0)), v28)));
          v33 = vaddq_f32(v29, vmulq_f32(v30, vsubq_f32(vsubq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0)), v29)));
          v34 = *(float32x4_t *)(v13 + 16);
          v35 = (int8x16_t)vcgeq_f32(v33, v34);
          v36 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(v14, vsubq_f32(v34, *(float32x4_t *)v13)), 0);
          v37 = (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v32, v34));
          v38 = *(float32x4_t *)(v13 + 192);
          v39 = *(float32x4_t *)(v13 + 208);
          v40 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v36)), v31), v38);
          v41 = vmulq_f32(v40, vrecpsq_f32(v36, v40));
          v42 = vsubq_f32(v25, vminq_f32(vmaxq_f32(vaddq_f32(v37, vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v32, *(float32x4_t *)v13)), vmulq_f32(vsubq_f32(v32, *(float32x4_t *)v13), v41))), v39), v25));
          v43 = vsubq_f32(v25, vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v35), vmulq_f32(vmulq_f32(v41, vsubq_f32(v33, *(float32x4_t *)v13)), (float32x4_t)vandq_s8((int8x16_t)v25, (int8x16_t)vcgeq_f32(v33, *(float32x4_t *)v13)))), v39), v25));
          v44 = *(float32x4_t *)(v13 + 32);
          v45 = *(float32x4_t *)(v13 + 48);
          v46 = (int8x16_t)vcgeq_f32(v42, v44);
          v47 = (int8x16_t)vcgeq_f32(v43, v44);
          v48 = (int8x16_t)vcgeq_f32(v42, v45);
          v49 = (int8x16_t)vcgeq_f32(v43, v45);
          v50 = vsubq_f32(v42, v44);
          v51 = vsubq_f32(v43, v44);
          v52 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v45, v44), 0);
          v53 = vminq_f32(vmaxq_f32(vmulq_f32(v18, vrecpeq_f32(v52)), v31), v38);
          v54 = vmulq_f32(v53, vrecpsq_f32(v52, v53));
          v55 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v48), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v46), vmulq_f32(v50, v54))), v39), v25);
          v56 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v49), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v25, v47), vmulq_f32(v51, v54))), v39), v25);
          v57 = (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v55, vmulq_f32(v15, vsubq_f32(vsubq_f32(v25, v55), v55))), v39), v25), v26, 3);
          v58 = (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v56, vmulq_f32(v15, vsubq_f32(vsubq_f32(v25, v56), v56))), v39), v25), v27, 3);
          v59 = *(int8x16_t *)(v13 + 224);
          v60 = (int8x16_t *)(v5 + v10);
          v60[-1] = vbslq_s8(v59, v57, (int8x16_t)vmulq_n_f32(v26, *(float *)v57.i32));
          *v60 = vbslq_s8(v59, v58, (int8x16_t)vmulq_n_f32(v27, *(float *)v58.i32));
          v9 -= 2;
          v10 += 32;
        }
        while (v4 + v9 > 1);
        v61 = -v9;
      }
      if ((int)v61 < v4)
      {
        v62 = *(float32x4_t *)(v6 + 16 * v61);
        v63 = *(_QWORD *)(a1 + 408);
        v64 = *(float32x4_t *)(v63 + 80);
        v65 = vmaxq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 3), v64);
        v66 = *(float32x4_t *)(v63 + 96);
        v67 = vmulq_f32(vrecpeq_f32(v65), v66);
        v68 = *(float32x4_t *)(v63 + 144);
        v69 = vmulq_f32(v62, (float32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v63 + 112), (int8x16_t)vmulq_f32(v67, vrecpsq_f32(v67, v65))), *(int8x16_t *)(v63 + 128)));
        v70 = vabdq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1));
        v71 = *(float32x4_t *)(v63 + 176);
        v72 = vaddq_f32(v70, vmulq_f32(*(float32x4_t *)(v63 + 160), vsubq_f32(vsubq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 0)), v70)));
        v73 = *(float32x4_t *)(v63 + 16);
        v74 = (float32x4_t)vandq_s8((int8x16_t)v68, (int8x16_t)vcgeq_f32(v72, v73));
        v75 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32(v64, vsubq_f32(v73, *(float32x4_t *)v63)), 0);
        v76 = *(float32x4_t *)(v63 + 192);
        v77 = *(float32x4_t *)(v63 + 208);
        v78 = vminq_f32(vmaxq_f32(vmulq_f32(v66, vrecpeq_f32(v75)), v71), v76);
        v79 = vsubq_f32(v68, vminq_f32(vmaxq_f32(vaddq_f32(v74, vmulq_f32(vmulq_f32(vmulq_f32(v78, vrecpsq_f32(v75, v78)), vsubq_f32(v72, *(float32x4_t *)v63)), (float32x4_t)vandq_s8((int8x16_t)v68, (int8x16_t)vcgeq_f32(v72, *(float32x4_t *)v63)))), v77), v68));
        v80 = *(float32x4_t *)(v63 + 32);
        v81 = *(float32x4_t *)(v63 + 48);
        v82 = (int8x16_t)vcgeq_f32(v79, v80);
        v83 = (int8x16_t)vcgeq_f32(v79, v81);
        v84 = vsubq_f32(v79, v80);
        v85 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vsubq_f32(v81, v80), 0);
        v86 = vminq_f32(vmaxq_f32(vmulq_f32(v66, vrecpeq_f32(v85)), v71), v76);
        v87 = vminq_f32(vmaxq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v68, v83), vmulq_f32((float32x4_t)vandq_s8((int8x16_t)v68, v82), vmulq_f32(v84, vmulq_f32(v86, vrecpsq_f32(v85, v86))))), v77), v68);
        v88 = (int8x16_t)vmulq_laneq_f32(vminq_f32(vmaxq_f32(vaddq_f32(v87, vmulq_f32(*(float32x4_t *)(v63 + 64), vsubq_f32(vsubq_f32(v68, v87), v87))), v77), v68), v69, 3);
        *(int8x16_t *)(v5 + 16 * v61) = vbslq_s8(*(int8x16_t *)(v63 + 224), v88, (int8x16_t)vmulq_n_f32(v69, *(float *)v88.i32));
      }
      v6 += v8;
      v5 += v7;
      ++v3;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcDiffScreen::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcDiffScreen::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcDiffScreen::HgcDiffScreen(HgcDiffScreen *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F50D0;
  v3 = operator new();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(int32x4_t *)(v3 + 80) = vdupq_n_s32(0x358637BDu);
  *(int32x4_t *)(v3 + 96) = vdupq_n_s32(0x3F804020u);
  *(_OWORD *)(v3 + 112) = xmmword_1B30514E0;
  *(_OWORD *)(v3 + 128) = xmmword_1B304EFF0;
  *(_OWORD *)(v3 + 144) = xmmword_1B304FAB0;
  *(_OWORD *)(v3 + 160) = xmmword_1B3053630;
  *(_OWORD *)(v3 + 176) = xmmword_1B3053640;
  *(int32x4_t *)(v3 + 192) = vdupq_n_s32(0x7F7FFFFFu);
  *(_QWORD *)(v3 + 208) = 0;
  *(_QWORD *)(v3 + 216) = 0;
  *(_OWORD *)(v3 + 224) = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C7F00(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcDiffScreen::~HgcDiffScreen(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F50D0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4019FCA701);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcDiffScreen::~HgcDiffScreen(this);
  HGObject::operator delete(v1);
}

uint64_t HgcDiffScreen::SetParameter(HgcDiffScreen *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgcDiffScreen::GetParameter(HgcDiffScreen *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 4)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgcGlow::GetProgram(HgcGlow *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000289\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    half4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.w = clamp(dot(r0, half4(hg_Params[0])), 0.00000h, 1.00000h);\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = float4(r0);\n"
             "    return output;\n"
             "}\n"
             "//MD5=5d998599:758e3f56:40d6d91d:c36bf663\n"
             "//SIG=00400000:00000001:00000001:00000001:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000274\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    float4 r0;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r0.w = clamp(dot(r0, hg_Params[0]), 0.00000f, 1.00000f);\n"
             "    r0.xyz = r0.xyz*r0.www;\n"
             "    output.color0 = r0;\n"
             "    return output;\n"
             "}\n"
             "//MD5=f075e461:d01c8cc7:7ae72e43:7087b15b\n"
             "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000240\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    defaultp vec4 r0;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r0.w = clamp(dot(r0, hg_ProgramLocal0), 0.00000, 1.00000);\n"
           "    r0.xyz = r0.xyz*r0.www;\n"
           "    gl_FragColor = r0;\n"
           "}\n"
           "//MD5=2e18c989:40ce49ba:12af5bf2:488e69ff\n"
           "//SIG=00000000:00000001:00000001:00000000:0000:0001:0001:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgcGlow::InitProgramDescriptor(HgcGlow *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGlow_hgc_visible", "//Metal1.0     \n//LEN=0000000145\n[[ visible ]] FragmentOut HgcGlow_hgc_visible(const constant float4* hg_Params,\n    float4 color0)\n{\n    float4 r0;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r0.w = clamp(dot(r0, hg_Params[0]), 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*r0.www;\n"
    "    output.color0 = r0;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C810C()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGlow");
}

void sub_1B28C811C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C825C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C8254);
}

_QWORD *HgcGlow::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGlow [hgc1]");
}

uint64_t HgcGlow::BindTexture(HgcGlow *this, HGHandler *a2, int a3)
{
  uint64_t result;
  int v5;

  if (a3)
    return 0xFFFFFFFFLL;
  (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v5)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcGlow::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcGlow::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t *v39;
  uint64_t v40;
  float32x4_t v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v47;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v40) = 0;
      }
      else
      {
        v9 = 0;
        v10 = 32;
        do
        {
          v11 = *(float32x4_t *)(v6 + v10 - 32);
          v12 = *(float32x4_t *)(v6 + v10 - 16);
          v13 = *(float32x4_t *)(v6 + v10);
          v14 = *(float32x4_t *)(v6 + v10 + 16);
          v15 = *(_QWORD *)(a1 + 408);
          v16 = *(float32x4_t *)(v15 + 16);
          v17 = vmulq_f32(v11, *(float32x4_t *)v15);
          v18 = vmulq_f32(v12, *(float32x4_t *)v15);
          v19 = vmulq_f32(v13, *(float32x4_t *)v15);
          v20 = vmulq_f32(v14, *(float32x4_t *)v15);
          v21 = vaddq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 4uLL));
          v22 = vaddq_f32(v18, (float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v18, 4uLL));
          v23 = vaddq_f32(v19, (float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v19, 4uLL));
          v24 = vaddq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)v20, (int8x16_t)v20, 4uLL));
          v25 = vmaxq_f32(vaddq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL)), v16);
          v26 = vmaxq_f32(vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL)), v16);
          v27 = vmaxq_f32(vaddq_f32(v23, (float32x4_t)vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL)), v16);
          v28 = vmaxq_f32(vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL)), v16);
          v29 = *(float32x4_t *)(v15 + 32);
          v30 = *(int8x16_t *)(v15 + 48);
          v31 = (int8x16_t)vminq_f32(v25, v29);
          v32 = (int8x16_t)vminq_f32(v26, v29);
          v33 = (int8x16_t)vminq_f32(v27, v29);
          v34 = (int8x16_t)vminq_f32(v28, v29);
          v35 = (float32x4_t)vbslq_s8(v30, v31, (int8x16_t)v11);
          v36 = (float32x4_t)vbslq_s8(v30, v32, (int8x16_t)v12);
          v37 = (float32x4_t)vbslq_s8(v30, v33, (int8x16_t)v13);
          v38 = (float32x4_t)vbslq_s8(v30, v34, (int8x16_t)v14);
          v39 = (int8x16_t *)(v5 + v10);
          v39[-2] = vbslq_s8(v30, v31, (int8x16_t)vmulq_laneq_f32(v35, v35, 3));
          v39[-1] = vbslq_s8(v30, v32, (int8x16_t)vmulq_laneq_f32(v36, v36, 3));
          *v39 = vbslq_s8(v30, v33, (int8x16_t)vmulq_laneq_f32(v37, v37, 3));
          v39[1] = vbslq_s8(v30, v34, (int8x16_t)vmulq_laneq_f32(v38, v38, 3));
          v9 -= 4;
          v10 += 64;
        }
        while (v4 + v9 > 3);
        LODWORD(v40) = -v9;
      }
      if ((int)v40 < v4)
      {
        v40 = v40;
        do
        {
          v41 = *(float32x4_t *)(v6 + 16 * v40);
          v42 = *(_QWORD *)(a1 + 408);
          v43 = vmulq_f32(v41, *(float32x4_t *)v42);
          v44 = vaddq_f32(v43, (float32x4_t)vextq_s8((int8x16_t)v43, (int8x16_t)v43, 4uLL));
          v45 = *(int8x16_t *)(v42 + 48);
          v46 = (int8x16_t)vminq_f32(vmaxq_f32(vaddq_f32(v44, (float32x4_t)vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL)), *(float32x4_t *)(v42 + 16)), *(float32x4_t *)(v42 + 32));
          v47 = (float32x4_t)vbslq_s8(v45, v46, (int8x16_t)v41);
          *(int8x16_t *)(v5 + 16 * v40++) = vbslq_s8(v45, v46, (int8x16_t)vmulq_laneq_f32(v47, v47, 3));
        }
        while (v40 < v4);
      }
      ++v3;
      v6 += v7;
      v5 += v8;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcGlow::GetDOD(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

uint64_t HgcGlow::GetROI(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3)
    return 0;
  else
    return a4;
}

void HgcGlow::HgcGlow(HgcGlow *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F5338;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = xmmword_1B304EFF0;
  v3[3] = xmmword_1B3050F70;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C85C8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGlow::~HgcGlow(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F5338;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40FA0F61DDLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGlow::~HgcGlow(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGlow::SetParameter(HgcGlow *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcGlow::GetParameter(HgcGlow *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgcGlowCombineFx::GetProgram(HgcGlowCombineFx *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000421\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1.w = clamp(r0.w*half(hg_Params[0].x), 0.00000h, 1.00000h);\n"
             "    r0.xyz = r0.xyz*half3(hg_Params[0].xxx);\n"
             "    r1.xyz = fmin(r0.xyz, half3(hg_Params[1].xyz));\n"
             "    r0.x = c0.x - r1.w;\n"
             "    r2 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r1.xyz, c0.yyy);\n"
             "    output.color0 = float4(r0.xxxx)*float4(r2) + float4(r1);\n"
             "    return output;\n"
             "}\n"
             "//MD5=d3ba96cc:8b61c946:64e19427:d7b487f8\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0002:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000003ea\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1, r2;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1.w = clamp(r0.w*hg_Params[0].x, 0.00000f, 1.00000f);\n"
             "    r0.xyz = r0.xyz*hg_Params[0].xxx;\n"
             "    r1.xyz = fmin(r0.xyz, hg_Params[1].xyz);\n"
             "    r0.x = c0.x - r1.w;\n"
             "    r2 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1.xyz = fmax(r1.xyz, c0.yyy);\n"
             "    output.color0 = r0.xxxx*r2 + r1;\n"
             "    return output;\n"
             "}\n"
             "//MD5=3b21280a:6210f9e7:24a7efee:ec2123ba\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0002:0003:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000003c5\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "uniform defaultp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1, r2;\n"
           "\n"
           "    r0 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1.w = clamp(r0.w*hg_ProgramLocal0.x, 0.00000, 1.00000);\n"
           "    r0.xyz = r0.xyz*hg_ProgramLocal0.xxx;\n"
           "    r1.xyz = min(r0.xyz, hg_ProgramLocal1.xyz);\n"
           "    r0.x = c0.x - r1.w;\n"
           "    r2 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1.xyz = max(r1.xyz, c0.yyy);\n"
           "    gl_FragColor = r0.xxxx*r2 + r1;\n"
           "}\n"
           "//MD5=30e89c24:cb3d0b26:e5c4addf:a6d738b2\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0002:0003:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcGlowCombineFx::InitProgramDescriptor(HgcGlowCombineFx *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGlowCombineFx_hgc_visible", "//Metal1.0     \n//LEN=0000000249\n[[ visible ]] FragmentOut HgcGlowCombineFx_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(1.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1, r2;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color1;\n"
    "    r1.w = clamp(r0.w*hg_Params[0].x, 0.00000f, 1.00000f);\n"
    "    r0.xyz = r0.xyz*hg_Params[0].xxx;\n"
    "    r1.xyz = fmin(r0.xyz, hg_Params[1].xyz);\n"
    "    r0.x = c0.x - r1.w;\n"
    "    r2 = color0;\n"
    "    r1.xyz = fmax(r1.xyz, c0.yyy);\n"
    "    output.color0 = r0.xxxx*r2 + r1;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C87AC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGlowCombineFx");
}

void sub_1B28C87BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C88FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C8944()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C893CLL);
}

_QWORD *HgcGlowCombineFx::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGlowCombineFx [hgc1]");
}

uint64_t HgcGlowCombineFx::BindTexture(HgcGlowCombineFx *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3)
  {
    if (a3 != 1)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcGlowCombineFx::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, a1[51] + 16, 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcGlowCombineFx::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _OWORD *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t *v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  float32x4_t v49;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 80);
    v7 = 16 * *(int *)(a2 + 104);
    v8 = *(_QWORD *)(a2 + 96);
    v9 = 16 * *(int *)(a2 + 88);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v43) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(_OWORD **)(a1 + 408);
          v14 = *((float32x4_t *)v13 + 1);
          v15 = vmulq_n_f32(*(float32x4_t *)(v8 + v12 - 32), COERCE_FLOAT(*v13));
          v16 = vmulq_n_f32(*(float32x4_t *)(v8 + v12 - 16), COERCE_FLOAT(*v13));
          v17 = vmulq_n_f32(*(float32x4_t *)(v8 + v12), COERCE_FLOAT(*v13));
          v18 = vmulq_n_f32(*(float32x4_t *)(v8 + v12 + 16), COERCE_FLOAT(*v13));
          v19 = *((float32x4_t *)v13 + 2);
          v20 = *((float32x4_t *)v13 + 3);
          v21 = vmaxq_f32(v15, v19);
          v22 = vmaxq_f32(v16, v19);
          v23 = vmaxq_f32(v17, v19);
          v24 = vmaxq_f32(v18, v19);
          v25 = (int8x16_t)vminq_f32(v21, v20);
          v26 = (int8x16_t)vminq_f32(v22, v20);
          v27 = (int8x16_t)vminq_f32(v23, v20);
          v28 = (int8x16_t)vminq_f32(v15, v14);
          v29 = (int8x16_t)vminq_f32(v16, v14);
          v30 = (int8x16_t)vminq_f32(v17, v14);
          v31 = (int8x16_t)vminq_f32(v18, v14);
          v32 = (int8x16_t)vminq_f32(v24, v20);
          v33 = *((int8x16_t *)v13 + 4);
          v34 = *((float32x4_t *)v13 + 5);
          v35 = (float32x4_t)vbslq_s8(v33, v25, v28);
          v36 = (float32x4_t)vbslq_s8(v33, v26, v29);
          v37 = (float32x4_t)vbslq_s8(v33, v27, v30);
          v38 = (float32x4_t)vbslq_s8(v33, v32, v31);
          v39 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v6 + v12 - 16), vsubq_f32(v20, (float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 3)).f32[0]), (float32x4_t)vbslq_s8(v33, v26, (int8x16_t)vmaxq_f32(v36, v34)));
          v40 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v6 + v12), vsubq_f32(v20, (float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 3)).f32[0]), (float32x4_t)vbslq_s8(v33, v27, (int8x16_t)vmaxq_f32(v37, v34)));
          v41 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v6 + v12 + 16), vsubq_f32(v20, (float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 3)).f32[0]), (float32x4_t)vbslq_s8(v33, v32, (int8x16_t)vmaxq_f32(v38, v34)));
          v42 = (float32x4_t *)(v5 + v12);
          v42[-2] = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v6 + v12 - 32), vsubq_f32(v20, (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 3)).f32[0]), (float32x4_t)vbslq_s8(v33, v25, (int8x16_t)vmaxq_f32(v35, v34)));
          v42[-1] = v39;
          *v42 = v40;
          v42[1] = v41;
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v43) = -v11;
      }
      if ((int)v43 < v4)
      {
        v43 = v43;
        do
        {
          v44 = *(_QWORD *)(a1 + 408);
          v45 = vmulq_n_f32(*(float32x4_t *)(v8 + 16 * v43), COERCE_FLOAT(*(_OWORD *)v44));
          v46 = *(float32x4_t *)(v44 + 48);
          v47 = (int8x16_t)vminq_f32(vmaxq_f32(v45, *(float32x4_t *)(v44 + 32)), v46);
          v48 = *(int8x16_t *)(v44 + 64);
          v49 = (float32x4_t)vbslq_s8(v48, v47, (int8x16_t)vminq_f32(v45, *(float32x4_t *)(v44 + 16)));
          *(float32x4_t *)(v5 + 16 * v43) = vaddq_f32(vmulq_n_f32(*(float32x4_t *)(v6 + 16 * v43), vsubq_f32(v46, (float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 3)).f32[0]), (float32x4_t)vbslq_s8(v48, v47, (int8x16_t)vmaxq_f32(v49, *(float32x4_t *)(v44 + 80))));
          ++v43;
        }
        while (v43 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcGlowCombineFx::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcGlowCombineFx::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcGlowCombineFx::HgcGlowCombineFx(HgcGlowCombineFx *this)
{
  _QWORD *v2;
  uint64_t v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F55A0;
  v3 = operator new();
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = xmmword_1B304FAB0;
  *(_OWORD *)(v3 + 64) = xmmword_1B3050F70;
  *(_OWORD *)(v3 + 80) = xmmword_1B30536D0;
  *(_QWORD *)(v3 + 96) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C8D60(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGlowCombineFx::~HgcGlowCombineFx(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F55A0;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40AC4F46D1);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGlowCombineFx::~HgcGlowCombineFx(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGlowCombineFx::SetParameter(HgcGlowCombineFx *this, uint64_t a2, __n128 a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  uint64_t v8;
  int32x4_t v9;

  if ((_DWORD)a2 == 1)
  {
    v8 = *((_QWORD *)this + 51);
    if (*(float *)(v8 + 16) != a3.n128_f32[0]
      || *(float *)(v8 + 20) != a3.n128_f32[0]
      || *(float *)(v8 + 24) != a3.n128_f32[0]
      || *(float *)(v8 + 28) != 0.0)
    {
      v9 = vzip1q_s32((int32x4_t)a3.n128_u32[0], (int32x4_t)a3.n128_u32[0]);
      v9.i32[2] = a3.n128_u32[0];
      a3.n128_f32[1] = a4;
      *(int32x4_t *)(v8 + 16) = v9;
      a3.n128_u64[1] = __PAIR64__(LODWORD(a6), LODWORD(a5));
      *(__n128 *)(v8 + 96) = a3;
      goto LABEL_13;
    }
    return 0;
  }
  if (!(_DWORD)a2)
  {
    v7 = *((_QWORD *)this + 51);
    if (*(float *)v7 != a3.n128_f32[0]
      || *(float *)(v7 + 4) != a4
      || *(float *)(v7 + 8) != a5
      || *(float *)(v7 + 12) != a6)
    {
      *(_DWORD *)v7 = a3.n128_u32[0];
      *(float *)(v7 + 4) = a4;
      *(float *)(v7 + 8) = a5;
      *(float *)(v7 + 12) = a6;
LABEL_13:
      HGNode::ClearBits((HGNode *)this, a2, a7);
      return 1;
    }
    return 0;
  }
  return 0xFFFFFFFFLL;
}

uint64_t HgcGlowCombineFx::GetParameter(HgcGlowCombineFx *this, int a2, float *a3)
{
  float *v3;
  float *v4;
  float *v5;
  uint64_t result;

  if (a2 == 1)
  {
    v5 = (float *)*((_QWORD *)this + 51);
    *a3 = v5[24];
    a3[1] = v5[25];
    a3[2] = v5[26];
    v4 = v5 + 27;
    goto LABEL_5;
  }
  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    v4 = v3 + 3;
LABEL_5:
    result = 0;
    a3[3] = *v4;
    return result;
  }
  return 0xFFFFFFFFLL;
}

const char *HgcGloom::GetProgram(HgcGloom *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000003bb\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< half > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    half4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = (half4) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = (half4) hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = fmin(r0, r1);\n"
             "    r0 = mix(r0, r1, half4(hg_Params[0]));\n"
             "    r1.xyz = r0.xyz;\n"
             "    r1.w = c0.w;\n"
             "    output.color0 = select(float4(r0), float4(r1), float4(r0.wwww) < 0.00000h);\n"
             "    return output;\n"
             "}\n"
             "//MD5=7c874f00:d1204dce:c12d1ca6:2f88d076\n"
             "//SIG=00400000:00000003:00000003:00000003:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000391\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]], \n"
             "    texture2d< float > hg_Texture1 [[ texture(1) ]], \n"
             "    sampler hg_Sampler1 [[ sampler(1) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0 = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy);\n"
             "    r1 = hg_Texture1.sample(hg_Sampler1, frag._texCoord1.xy);\n"
             "    r1 = fmin(r0, r1);\n"
             "    r0 = mix(r0, r1, hg_Params[0]);\n"
             "    r1.xyz = r0.xyz;\n"
             "    r1.w = c0.w;\n"
             "    output.color0 = select(r0, r1, r0.wwww < 0.00000f);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f039a5fd:4335fd66:8678f73a:49766175\n"
             "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0006:0000:0002:02:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000399\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform defaultp sampler2D hg_Texture1;\n"
           "uniform defaultp vec4 hg_ProgramLocal0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
           "    defaultp vec4 r0, r1;\n"
           "\n"
           "    r0 = texture2D(hg_Texture0, hg_TexCoord0.xy);\n"
           "    r1 = texture2D(hg_Texture1, hg_TexCoord1.xy);\n"
           "    r1 = min(r0, r1);\n"
           "    r0 = mix(r0, r1, hg_ProgramLocal0);\n"
           "    r1.xyz = r0.xyz;\n"
           "    r1.w = c0.w;\n"
           "    gl_FragColor = vec4(r0.w < 0.00000 ? r1.x : r0.x, r0.w < 0.00000 ? r1.y : r0.y, r0.w < 0.00000 ? r1.z : r"
           "0.z, r0.w < 0.00000 ? r1.w : r0.w);\n"
           "}\n"
           "//MD5=9d67fc23:6a04ef89:61b68ea2:8c6a758f\n"
           "//SIG=00000000:00000003:00000003:00000000:0001:0001:0002:0000:0000:0000:0000:0000:0002:02:0:1:0\n";
  }
}

void HgcGloom::InitProgramDescriptor(HgcGloom *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcGloom_hgc_visible", "//Metal1.0     \n//LEN=00000001e8\n[[ visible ]] FragmentOut HgcGloom_hgc_visible(const constant float4* hg_Params,\n    float4 color0,\n    float4 color1)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0 = color0;\n"
    "    r1 = color1;\n"
    "    r1 = fmin(r0, r1);\n"
    "    r0 = mix(r0, r1, hg_Params[0]);\n"
    "    r1.xyz = r0.xyz;\n"
    "    r1.w = c0.w;\n"
    "    output.color0 = select(r0, r1, r0.wwww < 0.00000f);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C8FD4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcGloom");
}

void sub_1B28C8FE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051440;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 10;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C9124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C916C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C9164);
}

_QWORD *HgcGloom::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcGloom [hgc1]");
}

uint64_t HgcGloom::BindTexture(HgcGloom *this, HGHandler *a2, int a3)
{
  HGHandler *v4;
  int v5;
  int v6;
  uint64_t result;

  if (a3 == 1)
  {
    (*(void (**)(HGHandler *, uint64_t, _QWORD))(*(_QWORD *)a2 + 72))(a2, 1, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 1;
  }
  else
  {
    if (a3)
      return 0xFFFFFFFFLL;
    (*(void (**)(HGHandler *, _QWORD))(*(_QWORD *)a2 + 72))(a2, 0);
    (*(void (**)(HGHandler *, _QWORD, _QWORD))(*(_QWORD *)a2 + 48))(a2, 0, 0);
    v4 = a2;
    v5 = 0;
  }
  HGHandler::TexCoord(v4, v5, 0, 0, 0);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46);
  result = 0;
  if (!v6)
  {
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
    return 0;
  }
  return result;
}

uint64_t HgcGloom::Bind(_QWORD *a1, uint64_t a2)
{
  (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, a1[51], 1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 192))(a1, a2);
  return 0;
}

uint64_t HgcGloom::RenderTile(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  uint64_t v24;
  float32x4_t *v25;
  int32x4_t v26;
  int8x16_t v27;

  v2 = *(_DWORD *)(a2 + 12) - *(_DWORD *)(a2 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = *(_DWORD *)(a2 + 8) - *(_DWORD *)a2;
    v5 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 96);
    v7 = 16 * *(int *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 80);
    v9 = 16 * *(int *)(a2 + 104);
    v10 = 16 * *(int *)(a2 + 24);
    do
    {
      if (v4 < 4)
      {
        LODWORD(v24) = 0;
      }
      else
      {
        v11 = 0;
        v12 = 32;
        do
        {
          v13 = *(float32x4_t **)(a1 + 408);
          v14 = v13[1];
          v15 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v8 + v12 - 32), vmulq_f32(vsubq_f32(vminq_f32(*(float32x4_t *)(v8 + v12 - 32), *(float32x4_t *)(v6 + v12 - 32)), *(float32x4_t *)(v8 + v12 - 32)), *v13));
          v16 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v8 + v12 - 16), vmulq_f32(vsubq_f32(vminq_f32(*(float32x4_t *)(v8 + v12 - 16), *(float32x4_t *)(v6 + v12 - 16)), *(float32x4_t *)(v8 + v12 - 16)), *v13));
          v17 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v8 + v12), vmulq_f32(vsubq_f32(vminq_f32(*(float32x4_t *)(v8 + v12), *(float32x4_t *)(v6 + v12)), *(float32x4_t *)(v8 + v12)), *v13));
          v18 = (int8x16_t)v15;
          v18.i32[3] = 0;
          v19 = (int8x16_t)v16;
          v19.i32[3] = 0;
          v20 = (int8x16_t)v17;
          v20.i32[3] = 0;
          v21 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v8 + v12 + 16), vmulq_f32(vsubq_f32(vminq_f32(*(float32x4_t *)(v8 + v12 + 16), *(float32x4_t *)(v6 + v12 + 16)), *(float32x4_t *)(v8 + v12 + 16)), *v13));
          v22 = (int8x16_t)v21;
          v22.i32[3] = 0;
          v23 = (int8x16_t *)(v5 + v12);
          v23[-2] = vbslq_s8((int8x16_t)vcgtq_f32(v14, (float32x4_t)vdupq_laneq_s32(v15, 3)), v18, (int8x16_t)v15);
          v23[-1] = vbslq_s8((int8x16_t)vcgtq_f32(v14, (float32x4_t)vdupq_laneq_s32(v16, 3)), v19, (int8x16_t)v16);
          *v23 = vbslq_s8((int8x16_t)vcgtq_f32(v14, (float32x4_t)vdupq_laneq_s32(v17, 3)), v20, (int8x16_t)v17);
          v23[1] = vbslq_s8((int8x16_t)vcgtq_f32(v14, (float32x4_t)vdupq_laneq_s32(v21, 3)), v22, (int8x16_t)v21);
          v11 -= 4;
          v12 += 64;
        }
        while (v4 + v11 > 3);
        LODWORD(v24) = -v11;
      }
      if ((int)v24 < v4)
      {
        v24 = v24;
        do
        {
          v25 = *(float32x4_t **)(a1 + 408);
          v26 = (int32x4_t)vaddq_f32(*(float32x4_t *)(v8 + 16 * v24), vmulq_f32(vsubq_f32(vminq_f32(*(float32x4_t *)(v8 + 16 * v24), *(float32x4_t *)(v6 + 16 * v24)), *(float32x4_t *)(v8 + 16 * v24)), *v25));
          v27 = (int8x16_t)v26;
          v27.i32[3] = 0;
          *(int8x16_t *)(v5 + 16 * v24++) = vbslq_s8((int8x16_t)vcgtq_f32(v25[1], (float32x4_t)vdupq_laneq_s32(v26, 3)), v27, (int8x16_t)v26);
        }
        while (v24 < v4);
      }
      ++v3;
      v8 += v7;
      v6 += v9;
      v5 += v10;
    }
    while (v3 != v2);
  }
  return 0;
}

uint64_t HgcGloom::GetDOD(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

uint64_t HgcGloom::GetROI(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a3 >= 2)
    return 0;
  else
    return a4;
}

void HgcGloom::HgcGloom(HgcGloom *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F5808;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  *((_QWORD *)this + 51) = v3;
  *((_DWORD *)this + 4) |= 0x600u;
}

void sub_1B28C950C(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcGloom::~HgcGloom(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F5808;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40E0EAB150);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcGloom::~HgcGloom(this);
  HGObject::operator delete(v1);
}

uint64_t HgcGloom::SetParameter(HgcGloom *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgcGloom::GetParameter(HgcGloom *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgciOSLightTunnel::GetProgram(HgciOSLightTunnel *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000497\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, 0.6931471825, 0.000000000, 0.000000000);\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    s1.x = dot(s0.xy, s0.xy);\n"
             "    s1.x = rsqrt(s1.x);\n"
             "    s0.z = s1.x*hg_Params[0].z;\n"
             "    s1.x = log2(s0.z);\n"
             "    s1.x = s1.x*hg_Params[0].w;\n"
             "    s1.y = s1.x*float(c0.y);\n"
             "    s1.x = sin(s1.y);\n"
             "    s1.z = cos(s1.y);\n"
             "    s1.yw = s1.zx;\n"
             "    s1.x = -s1.x;\n"
             "    s1 = s0.xyxy*s1;\n"
             "    s1.xy = s1.zx + s1.wy;\n"
             "    s1.xy = s0.zz*s1.xy + hg_Params[0].xy;\n"
             "    s1.z = float(float(c0.x) >= s0.z);\n"
             "    s1.xy = select(frag._texCoord0.xy, s1.xy, -s1.zz < 0.00000h);\n"
             "    s1.xy = s1.xy + hg_Params[1].xy;\n"
             "    s1.xy = s1.xy*hg_Params[1].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2917ad36:7db3cb49:c9ac4d5a:e3cc06d6\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0002:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000483\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, 0.6931471825, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    r1.x = dot(r0.xy, r0.xy);\n"
             "    r1.x = rsqrt(r1.x);\n"
             "    r0.z = r1.x*hg_Params[0].z;\n"
             "    r1.x = log2(r0.z);\n"
             "    r1.x = r1.x*hg_Params[0].w;\n"
             "    r1.y = r1.x*c0.y;\n"
             "    r1.x = sin(r1.y);\n"
             "    r1.z = cos(r1.y);\n"
             "    r1.yw = r1.zx;\n"
             "    r1.x = -r1.x;\n"
             "    r1 = r0.xyxy*r1;\n"
             "    r1.xy = r1.zx + r1.wy;\n"
             "    r1.xy = r0.zz*r1.xy + hg_Params[0].xy;\n"
             "    r1.z = float(c0.x >= r0.z);\n"
             "    r1.xy = select(frag._texCoord0.xy, r1.xy, -r1.zz < 0.00000f);\n"
             "    r1.xy = r1.xy + hg_Params[1].xy;\n"
             "    r1.xy = r1.xy*hg_Params[1].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2863ffc4:80d10bf9:62a5304a:3952a909\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0002:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004ae\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.000000000, 0.6931471825, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy - hg_ProgramLocal0.xy;\n"
           "    r1.x = dot(r0.xy, r0.xy);\n"
           "    r1.x = inversesqrt(r1.x);\n"
           "    r0.z = r1.x*hg_ProgramLocal0.z;\n"
           "    r1.x = log2(r0.z);\n"
           "    r1.x = r1.x*hg_ProgramLocal0.w;\n"
           "    r1.y = r1.x*c0.y;\n"
           "    r1.x = sin(r1.y);\n"
           "    r1.z = cos(r1.y);\n"
           "    r1.yw = r1.zx;\n"
           "    r1.x = -r1.x;\n"
           "    r1 = r0.xyxy*r1;\n"
           "    r1.xy = r1.zx + r1.wy;\n"
           "    r1.xy = r0.zz*r1.xy + hg_ProgramLocal0.xy;\n"
           "    r1.z = float(c0.x >= r0.z);\n"
           "    r1.xy = vec2(-r1.z < 0.00000 ? r1.x : hg_TexCoord0.x, -r1.z < 0.00000 ? r1.y : hg_TexCoord0.y);\n"
           "    r1.xy = r1.xy + hg_ProgramLocal1.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal1.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r1.xy);\n"
           "}\n"
           "//MD5=d6cd45dc:5a6bb6a3:faf99e80:f2a9a10d\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgciOSLightTunnel::InitProgramDescriptor(HgciOSLightTunnel *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgciOSLightTunnel_hgc_visible", "//Metal1.0     \n//LEN=00000003c1\n[[ visible ]] FragmentOut HgciOSLightTunnel_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(1.000000000, 0.6931471825, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy - hg_Params[0].xy;\n"
    "    r1.x = dot(r0.xy, r0.xy);\n"
    "    r1.x = rsqrt(r1.x);\n"
    "    r0.z = r1.x*hg_Params[0].z;\n"
    "    r1.x = log2(r0.z);\n"
    "    r1.x = r1.x*hg_Params[0].w;\n"
    "    r1.y = r1.x*c0.y;\n"
    "    r1.x = sin(r1.y);\n"
    "    r1.z = cos(r1.y);\n"
    "    r1.yw = r1.zx;\n"
    "    r1.x = -r1.x;\n"
    "    r1 = r0.xyxy*r1;\n"
    "    r1.xy = r1.zx + r1.wy;\n"
    "    r1.xy = r0.zz*r1.xy + hg_Params[0].xy;\n"
    "    r1.z = float(c0.x >= r0.z);\n"
    "    r1.xy = select(texCoord0.xy, r1.xy, -r1.zz < 0.00000f);\n"
    "    r1.xy = r1.xy + hg_Params[1].xy;\n"
    "    r1.xy = r1.xy*hg_Params[1].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28C96F0()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgciOSLightTunnel");
}

void sub_1B28C9700(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28C9880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28C98D0()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28C98C8);
}

_QWORD *HgciOSLightTunnel::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgciOSLightTunnel [hgc1]");
}

uint64_t HgciOSLightTunnel::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 1, v5, v6, v7, v8);
  return 0;
}

uint64_t HgciOSLightTunnel::Bind(HgciOSLightTunnel *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HgciOSLightTunnel *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgciOSLightTunnel::RenderTile(HgciOSLightTunnel *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  float32x4_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  uint64_t v106;
  float32x4_t v107;
  uint64_t v108;
  int32x4_t v109;
  float32x2_t v110;
  float32x4_t *v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int32x4_t v115;
  float32x4_t *v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  int32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  float32x4_t *v123;
  uint64_t v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  int8x16_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  float32x4_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int32x4_t v163;
  float32x4_t v164;
  uint64_t v165;
  float32x4_t v166;
  uint64_t v167;
  int32x4_t v168;
  float32x2_t v169;
  float32x4_t *v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  int32x4_t v174;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgciOSLightTunnel *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = (int8x16_t)v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = (int8x16_t)v14;
        do
        {
          v18 = (int8x16_t)vaddq_f32((float32x4_t)v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 16);
          v21 = (int8x16_t)vsubq_f32((float32x4_t)v17, *(float32x4_t *)v19);
          v22 = (int8x16_t)vsubq_f32((float32x4_t)v18, *(float32x4_t *)v19);
          v23 = vmulq_f32((float32x4_t)v21, (float32x4_t)v21);
          v24 = vmulq_f32((float32x4_t)v22, (float32x4_t)v22);
          v25 = vaddq_f32(v23, (float32x4_t)vrev64q_s32((int32x4_t)v23));
          v26 = vaddq_f32(v24, (float32x4_t)vrev64q_s32((int32x4_t)v24));
          v27 = vminq_f32(vrsqrteq_f32(v25), v20);
          v28 = vminq_f32(vrsqrteq_f32(v26), v20);
          v29 = vminq_f32(vmulq_f32(v27, vrsqrtsq_f32(vmulq_f32(v27, v25), v27)), v20);
          v30 = vminq_f32(vmulq_f32(v28, vrsqrtsq_f32(vmulq_f32(v26, v28), v28)), v20);
          v31 = (int8x16_t)vmulq_n_f32(*(float32x4_t *)v19, vmulq_f32(v29, vrsqrtsq_f32(vmulq_f32(v25, v29), v29)).f32[0]);
          v21.i64[1] = v31.i64[1];
          v32 = vmulq_n_f32(*(float32x4_t *)v19, vmulq_f32(v30, vrsqrtsq_f32(vmulq_f32(v26, v30), v30)).f32[0]);
          v22.i64[1] = v32.i64[1];
          v33 = vextq_s8(v21, v21, 8uLL);
          v34 = vextq_s8(v22, v22, 8uLL);
          v35 = *(int8x16_t *)(v19 + 32);
          v36 = *(int8x16_t *)(v19 + 48);
          v37 = (float32x4_t)vorrq_s8(vandq_s8(v33, v35), v36);
          v38 = (float32x4_t)vorrq_s8(vandq_s8(v34, v35), v36);
          v39 = *(float32x4_t *)(v19 + 64);
          v40 = *(int8x16_t *)(v19 + 80);
          v41 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v33, 0x17uLL)), (float32x4_t)vandq_s8(v40, (int8x16_t)vcgtq_f32(v39, (float32x4_t)v33)));
          v42 = vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v34, 0x17uLL)), (float32x4_t)vandq_s8(v40, (int8x16_t)vcgtq_f32(v39, (float32x4_t)v34)));
          v43 = *(float32x4_t *)(v19 + 96);
          v44 = *(float32x4_t *)(v19 + 112);
          v45 = vsubq_f32(v41, v43);
          v46 = vsubq_f32(v42, v43);
          v47 = (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v37, v44));
          v48 = (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v38, v44));
          v49 = vaddq_f32(v45, v47);
          v50 = vaddq_f32(v46, v48);
          v51 = *(float32x4_t *)(v19 + 128);
          v52 = *(float32x4_t *)(v19 + 144);
          v53 = vsubq_f32(vsubq_f32(v37, (float32x4_t)v36), vmulq_f32(vmulq_f32(v51, v47), v37));
          v54 = vsubq_f32(vsubq_f32(v38, (float32x4_t)v36), vmulq_f32(vmulq_f32(v51, v48), v38));
          v55 = vmulq_f32(v53, v53);
          v56 = *(float32x4_t *)(v19 + 160);
          v57 = *(float32x4_t *)(v19 + 176);
          v58 = vaddq_f32(v52, vmulq_f32(v56, v53));
          v59 = vaddq_f32(v52, vmulq_f32(v56, v54));
          v61 = *(float32x4_t *)(v19 + 192);
          v60 = *(float32x4_t *)(v19 + 208);
          v62 = vaddq_f32(v57, vmulq_f32(v61, v53));
          v63 = vaddq_f32(v57, vmulq_f32(v61, v54));
          v65 = *(float32x4_t *)(v19 + 224);
          v64 = *(float32x4_t *)(v19 + 240);
          v66 = vmulq_f32(v54, v54);
          v67 = (int32x4_t)vmulq_f32(v64, (float32x4_t)vrev64q_s32((int32x4_t)vmulq_laneq_f32(vaddq_f32(v49, vmulq_f32(v53, vaddq_f32(v64, vmulq_f32(v53, vaddq_f32(vaddq_f32(v60, vmulq_f32(v65, v53)), vmulq_f32(v55, vaddq_f32(v58, vmulq_f32(v55, v62)))))))), *(float32x4_t *)v19, 3)));
          v68 = (int32x4_t)vmulq_f32(v64, (float32x4_t)vrev64q_s32((int32x4_t)vmulq_laneq_f32(vaddq_f32(v50, vmulq_f32(v54, vaddq_f32(v64, vmulq_f32(v54, vaddq_f32(vaddq_f32(v60, vmulq_f32(v65, v54)), vmulq_f32(v66, vaddq_f32(v59, vmulq_f32(v66, v63)))))))), *(float32x4_t *)v19, 3)));
          v69 = *(float32x4_t *)(v19 + 256);
          v70 = *(float32x4_t *)(v19 + 272);
          v71 = vaddq_f32(v69, vmulq_f32(v70, (float32x4_t)vrev64q_s32(v67)));
          v72 = vaddq_f32(v69, vmulq_f32(v70, (float32x4_t)vrev64q_s32(v68)));
          v73 = vcvtq_f32_s32(vcvtq_s32_f32(v71));
          v74 = vcvtq_f32_s32(vcvtq_s32_f32(v72));
          v75 = vaddq_f32(v69, vabdq_f32(vsubq_f32(v71, vsubq_f32(v73, (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v73, v71)))), v51));
          v76 = vaddq_f32(v69, vabdq_f32(vsubq_f32(v72, vsubq_f32(v74, (float32x4_t)vandq_s8(v36, (int8x16_t)vcgtq_f32(v74, v72)))), v51));
          v77 = vmulq_f32(v75, v75);
          v78 = vmulq_f32(v76, v76);
          v80 = *(float32x4_t *)(v19 + 288);
          v79 = *(float32x4_t *)(v19 + 304);
          v81 = *(int8x16_t *)(v19 + 320);
          v82 = *(float32x4_t *)(v19 + 336);
          v83 = (int8x16_t)vmulq_f32(v75, vaddq_f32(v82, vmulq_f32(v77, vaddq_f32((float32x4_t)v81, vmulq_f32(v77, vaddq_f32(v80, vmulq_f32(v79, v77)))))));
          v84 = (int8x16_t)vmulq_f32(v76, vaddq_f32(v82, vmulq_f32(v78, vaddq_f32((float32x4_t)v81, vmulq_f32(v78, vaddq_f32(v80, vmulq_f32(v79, v78)))))));
          v85 = *(int8x16_t *)(v19 + 352);
          v86 = *(int8x16_t *)(v19 + 368);
          v87 = vbslq_s8(v85, v83, (int8x16_t)v67);
          v88 = vbslq_s8(v85, v84, (int8x16_t)v68);
          v89 = vmulq_f32(v82, (float32x4_t)vextq_s8(v87, v87, 0xCuLL));
          v90 = vmulq_f32(v82, (float32x4_t)vextq_s8(v88, v88, 0xCuLL));
          v91 = vcvtq_f32_s32(vcvtq_s32_f32(v89));
          v92 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
          v93 = vsubq_f32(vabdq_f32(vsubq_f32(v89, vsubq_f32(v91, (float32x4_t)vandq_s8(v81, (int8x16_t)vcgtq_f32(v91, v89)))), v79), v80);
          v94 = vsubq_f32(vabdq_f32(vsubq_f32(v90, vsubq_f32(v92, (float32x4_t)vandq_s8(v81, (int8x16_t)vcgtq_f32(v92, v90)))), v79), v80);
          v95 = vmulq_f32(v93, v93);
          v96 = vmulq_f32(v94, v94);
          v87.i64[1] = vmulq_f32(v93, vaddq_f32(v65, vmulq_f32(v95, vaddq_f32(v64, vmulq_f32(v95, vaddq_f32(v70, vmulq_f32(v69, v95))))))).i64[1];
          v88.i64[1] = vmulq_f32(v94, vaddq_f32(v65, vmulq_f32(v96, vaddq_f32(v64, vmulq_f32(v96, vaddq_f32(v70, vmulq_f32(v69, v96))))))).i64[1];
          v97 = vbslq_s8(v86, v87, vextq_s8(v87, v87, 4uLL));
          v98 = vbslq_s8(v86, v88, vextq_s8(v88, v88, 4uLL));
          v99 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_lane_s64(v21.i64[0], 0), (float32x4_t)vbslq_s8(v85, (int8x16_t)vnegq_f32((float32x4_t)v97), v97));
          v100 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_lane_s64(v22.i64[0], 0), (float32x4_t)vbslq_s8(v85, (int8x16_t)vnegq_f32((float32x4_t)v98), v98));
          v97.i64[0] = *(_QWORD *)(v19 + 384);
          v93.i64[0] = *(_QWORD *)(v19 + 400);
          *(float32x2_t *)v99.i8 = vadd_f32((float32x2_t)vqtbl1_s8(v99, *(int8x8_t *)v97.i8), (float32x2_t)vqtbl1_s8(v99, *(int8x8_t *)v93.f32));
          *(float32x2_t *)v100.i8 = vadd_f32((float32x2_t)vqtbl1_s8(v100, *(int8x8_t *)v97.i8), (float32x2_t)vqtbl1_s8(v100, *(int8x8_t *)v93.f32));
          v31.i64[0] = vaddq_f32(*(float32x4_t *)v19, vmulq_laneq_f32((float32x4_t)v99, (float32x4_t)v31, 2)).u64[0];
          v101.i64[0] = vaddq_f32(*(float32x4_t *)v19, vmulq_laneq_f32((float32x4_t)v100, v32, 2)).u64[0];
          v102 = (int32x4_t)vandq_s8(v81, (int8x16_t)vcgeq_f32((float32x4_t)v81, (float32x4_t)v21));
          v103 = (int32x4_t)vandq_s8(v81, (int8x16_t)vcgeq_f32((float32x4_t)v81, (float32x4_t)v22));
          v31.i64[1] = v102.i64[1];
          v101.i64[1] = v103.i64[1];
          v104 = *(float32x4_t *)(v19 + 416);
          v105 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v103, 2), v104), v101, v18);
          v106 = *((int *)a2 + 22);
          v107 = vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v102, 2), v104), v31, v17), v9);
          v108 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v109 = vaddq_s32(vcvtq_s32_f32(v107), vcltzq_f32(v107));
            v110 = (float32x2_t)vsubq_f32(v107, vcvtq_f32_s32(v109)).u64[0];
            v111 = (float32x4_t *)(v108 + 16 * (v109.i32[0] + v109.i32[1] * (int)v106));
            v112 = vaddq_f32(*v111, vmulq_n_f32(vsubq_f32(v111[1], *v111), v110.f32[0]));
            v113 = vaddq_f32(v112, vmulq_lane_f32(vsubq_f32(vaddq_f32(v111[v106], vmulq_n_f32(vsubq_f32(v111[(int)v106 + 1], v111[v106]), v110.f32[0])), v112), v110, 1));
            v114 = vsubq_f32(v105, v9);
            v115 = vaddq_s32(vcvtq_s32_f32(v114), vcltzq_f32(v114));
            v114.i64[0] = vsubq_f32(v114, vcvtq_f32_s32(v115)).u64[0];
            v116 = (float32x4_t *)(v108 + 16 * (v115.i32[0] + v115.i32[1] * (int)v106));
            v117 = vaddq_f32(*v116, vmulq_n_f32(vsubq_f32(v116[1], *v116), v114.f32[0]));
            v118 = vaddq_f32(v117, vmulq_lane_f32(vsubq_f32(vaddq_f32(v116[v106], vmulq_n_f32(vsubq_f32(v116[(int)v106 + 1], v116[v106]), v114.f32[0])), v117), *(float32x2_t *)v114.f32, 1));
          }
          else
          {
            v119 = vaddq_f32(v107, v13);
            v120 = vcvtq_s32_f32(v119);
            v119.i64[0] = vaddq_s32(v120, vcgtq_f32(vcvtq_f32_s32(v120), v119)).u64[0];
            v113 = *(float32x4_t *)(v108 + 16 * (v119.i32[0] + v119.i32[1] * (int)v106));
            v121 = vaddq_f32(vsubq_f32(v105, v9), v13);
            v122 = vcvtq_s32_f32(v121);
            v121.i64[0] = vaddq_s32(v122, vcgtq_f32(vcvtq_f32_s32(v122), v121)).u64[0];
            v118 = *(float32x4_t *)(v108 + 16 * (v121.i32[0] + v121.i32[1] * (int)v106));
          }
          v123 = (float32x4_t *)(v11 + 16 * v15);
          *v123 = v113;
          v123[1] = v118;
          v17 = (int8x16_t)vaddq_f32((float32x4_t)v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v124 = *((_QWORD *)this + 51);
        v125 = *(float32x4_t *)(v124 + 16);
        v126 = (int8x16_t)vsubq_f32((float32x4_t)v17, *(float32x4_t *)v124);
        v127 = vmulq_f32((float32x4_t)v126, (float32x4_t)v126);
        v128 = vaddq_f32(v127, (float32x4_t)vrev64q_s32((int32x4_t)v127));
        v129 = vminq_f32(vrsqrteq_f32(v128), v125);
        v130 = vminq_f32(vmulq_f32(v129, vrsqrtsq_f32(vmulq_f32(v129, v128), v129)), v125);
        v131 = vmulq_n_f32(*(float32x4_t *)v124, vmulq_f32(v130, vrsqrtsq_f32(vmulq_f32(v128, v130), v130)).f32[0]);
        v126.i64[1] = v131.i64[1];
        v132 = vextq_s8(v126, v126, 8uLL);
        v133 = *(int8x16_t *)(v124 + 48);
        v134 = (float32x4_t)vorrq_s8(vandq_s8(v132, *(int8x16_t *)(v124 + 32)), v133);
        v135 = (float32x4_t)vandq_s8(v133, (int8x16_t)vcgtq_f32(v134, *(float32x4_t *)(v124 + 112)));
        v136 = vaddq_f32(vsubq_f32(vsubq_f32(vcvtq_f32_s32((int32x4_t)vshrq_n_u32((uint32x4_t)v132, 0x17uLL)), (float32x4_t)vandq_s8(*(int8x16_t *)(v124 + 80), (int8x16_t)vcgtq_f32(*(float32x4_t *)(v124 + 64), (float32x4_t)v132))), *(float32x4_t *)(v124 + 96)), v135);
        v137 = *(float32x4_t *)(v124 + 128);
        v138 = vsubq_f32(vsubq_f32(v134, (float32x4_t)v133), vmulq_f32(vmulq_f32(v137, v135), v134));
        v139 = vmulq_f32(v138, v138);
        v140 = *(float32x4_t *)(v124 + 224);
        v141 = *(float32x4_t *)(v124 + 240);
        v142 = (int32x4_t)vmulq_f32(v141, (float32x4_t)vrev64q_s32((int32x4_t)vmulq_laneq_f32(vaddq_f32(v136, vmulq_f32(v138, vaddq_f32(v141, vmulq_f32(v138, vaddq_f32(vaddq_f32(*(float32x4_t *)(v124 + 208), vmulq_f32(v140, v138)), vmulq_f32(v139, vaddq_f32(vaddq_f32(*(float32x4_t *)(v124 + 144),
                                                                                  vmulq_f32(*(float32x4_t *)(v124 + 160), v138)), vmulq_f32(v139, vaddq_f32(*(float32x4_t *)(v124 + 176), vmulq_f32(*(float32x4_t *)(v124 + 192), v138)))))))))), *(float32x4_t *)v124, 3)));
        v143 = *(float32x4_t *)(v124 + 256);
        v144 = *(float32x4_t *)(v124 + 272);
        v145 = vaddq_f32(v143, vmulq_f32(v144, (float32x4_t)vrev64q_s32(v142)));
        v146 = vcvtq_f32_s32(vcvtq_s32_f32(v145));
        v147 = vaddq_f32(v143, vabdq_f32(vsubq_f32(v145, vsubq_f32(v146, (float32x4_t)vandq_s8(v133, (int8x16_t)vcgtq_f32(v146, v145)))), v137));
        v148 = vmulq_f32(v147, v147);
        v149 = *(float32x4_t *)(v124 + 288);
        v150 = *(float32x4_t *)(v124 + 304);
        v151 = *(int8x16_t *)(v124 + 320);
        v152 = *(float32x4_t *)(v124 + 336);
        v153 = (int8x16_t)vmulq_f32(v147, vaddq_f32(v152, vmulq_f32(v148, vaddq_f32((float32x4_t)v151, vmulq_f32(v148, vaddq_f32(v149, vmulq_f32(v150, v148)))))));
        v154 = *(int8x16_t *)(v124 + 352);
        v155 = vbslq_s8(v154, v153, (int8x16_t)v142);
        v156 = vmulq_f32(v152, (float32x4_t)vextq_s8(v155, v155, 0xCuLL));
        v157 = vcvtq_f32_s32(vcvtq_s32_f32(v156));
        v158 = vsubq_f32(vabdq_f32(vsubq_f32(v156, vsubq_f32(v157, (float32x4_t)vandq_s8(v151, (int8x16_t)vcgtq_f32(v157, v156)))), v150), v149);
        v159 = vmulq_f32(v158, v158);
        v155.i64[1] = vmulq_f32(v158, vaddq_f32(v140, vmulq_f32(v159, vaddq_f32(v141, vmulq_f32(v159, vaddq_f32(v144, vmulq_f32(v143, v159))))))).i64[1];
        v160 = vbslq_s8(*(int8x16_t *)(v124 + 368), v155, vextq_s8(v155, v155, 4uLL));
        v161 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_lane_s64(v126.i64[0], 0), (float32x4_t)vbslq_s8(v154, (int8x16_t)vnegq_f32((float32x4_t)v160), v160));
        *(float32x2_t *)v161.i8 = vadd_f32((float32x2_t)vqtbl1_s8(v161, *(int8x8_t *)(v124 + 384)), (float32x2_t)vqtbl1_s8(v161, *(int8x8_t *)(v124 + 400)));
        v162.i64[0] = vaddq_f32(*(float32x4_t *)v124, vmulq_laneq_f32((float32x4_t)v161, v131, 2)).u64[0];
        v163 = (int32x4_t)vandq_s8(v151, (int8x16_t)vcgeq_f32((float32x4_t)v151, (float32x4_t)v126));
        v162.i64[1] = v163.i64[1];
        v164 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32(v163, 2), *(float32x4_t *)(v124 + 416)), v162, v17);
        v165 = *((int *)a2 + 22);
        v166 = vsubq_f32(v164, v9);
        v167 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v168 = vaddq_s32(vcvtq_s32_f32(v166), vcltzq_f32(v166));
          v169 = (float32x2_t)vsubq_f32(v166, vcvtq_f32_s32(v168)).u64[0];
          v170 = (float32x4_t *)(v167 + 16 * (v168.i32[0] + v168.i32[1] * (int)v165));
          v171 = vaddq_f32(*v170, vmulq_n_f32(vsubq_f32(v170[1], *v170), v169.f32[0]));
          v172 = vaddq_f32(v171, vmulq_lane_f32(vsubq_f32(vaddq_f32(v170[v165], vmulq_n_f32(vsubq_f32(v170[(int)v165 + 1], v170[v165]), v169.f32[0])), v171), v169, 1));
        }
        else
        {
          v173 = vaddq_f32(v166, v13);
          v174 = vcvtq_s32_f32(v173);
          v173.i64[0] = vaddq_s32(v174, vcgtq_f32(vcvtq_f32_s32(v174), v173)).u64[0];
          v172 = *(float32x4_t *)(v167 + 16 * (v173.i32[0] + v173.i32[1] * (int)v165));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v172;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgciOSLightTunnel::GetDOD(HgciOSLightTunnel *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgciOSLightTunnel *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgciOSLightTunnel::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgciOSLightTunnel::HgciOSLightTunnel(HgciOSLightTunnel *this)
{
  _QWORD *v2;
  HgciOSLightTunnel::State *v3;
  double v4;
  uint64_t v5;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F5A70;
  v3 = (HgciOSLightTunnel::State *)operator new();
  v4 = HgciOSLightTunnel::State::State(v3);
  *((_QWORD *)this + 51) = v5;
  (*(void (**)(HgciOSLightTunnel *, _QWORD, uint64_t, double))(*(_QWORD *)this + 136))(this, 0, 1, v4);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28CA3CC(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgciOSLightTunnel::~HgciOSLightTunnel(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F5A70;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C4003455651);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgciOSLightTunnel::~HgciOSLightTunnel(this);
  HGObject::operator delete(v1);
}

uint64_t HgciOSLightTunnel::SetParameter(HgciOSLightTunnel *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgciOSLightTunnel::GetParameter(HgciOSLightTunnel *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

double HgciOSLightTunnel::State::State(HgciOSLightTunnel::State *this)
{
  double result;
  __int128 v2;

  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = xmmword_1B3051C80;
  *((_OWORD *)this + 2) = xmmword_1B3051830;
  *((_OWORD *)this + 3) = xmmword_1B304F230;
  *((_OWORD *)this + 4) = xmmword_1B3051840;
  *((_OWORD *)this + 5) = xmmword_1B3051850;
  *((_OWORD *)this + 6) = xmmword_1B3051860;
  *((_OWORD *)this + 7) = xmmword_1B3051870;
  *((_OWORD *)this + 8) = xmmword_1B3051880;
  *((_OWORD *)this + 9) = xmmword_1B3053700;
  *((_OWORD *)this + 10) = xmmword_1B3053710;
  *((_OWORD *)this + 11) = xmmword_1B3053720;
  *((_OWORD *)this + 12) = xmmword_1B3053730;
  *((_OWORD *)this + 13) = xmmword_1B3053740;
  *((_OWORD *)this + 14) = xmmword_1B3053750;
  *((_OWORD *)this + 15) = xmmword_1B3053760;
  *((_OWORD *)this + 16) = xmmword_1B3053770;
  *((_OWORD *)this + 17) = xmmword_1B3053780;
  *((_OWORD *)this + 18) = xmmword_1B3053790;
  *((_OWORD *)this + 19) = xmmword_1B30537A0;
  *((_OWORD *)this + 20) = xmmword_1B30537B0;
  *((_OWORD *)this + 21) = xmmword_1B30537C0;
  *(_QWORD *)&v2 = 0xFFFFFFFFLL;
  *((_QWORD *)&v2 + 1) = 0xFFFFFFFFLL;
  *((_OWORD *)this + 22) = xmmword_1B3050E20;
  *((_OWORD *)this + 23) = v2;
  *((_OWORD *)this + 24) = xmmword_1B30537D0;
  *((_OWORD *)this + 25) = xmmword_1B30537E0;
  *((_OWORD *)this + 26) = 0u;
  return result;
}

const char *HgciOSTwirl::GetProgram(HgciOSTwirl *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=00000004cf\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(1.000000000, -2.000000000, 3.000000000, 0.000000000);\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    s1.x = dot(s0.xy, s0.xy);\n"
             "    s1.x = sqrt(s1.x);\n"
             "    s1.x = s1.x*hg_Params[0].z;\n"
             "    s1.x = fmin(s1.x, float(c0.x));\n"
             "    s0.z = float(c0.x) - s1.x;\n"
             "    s1.x = s0.z*float(c0.y) + float(c0.z);\n"
             "    s1.x = s1.x*s0.z;\n"
             "    s1.x = s1.x*s0.z;\n"
             "    s1.y = s1.x*hg_Params[0].w;\n"
             "    s1.x = sin(s1.y);\n"
             "    s1.z = cos(s1.y);\n"
             "    s1.yw = s1.zx;\n"
             "    s1.x = -s1.x;\n"
             "    s1 = s0.xyxy*s1;\n"
             "    s1.xy = s1.zx + s1.wy;\n"
             "    s1.xy = s1.xy + hg_Params[0].xy;\n"
             "    s1.xy = select(frag._texCoord0.xy, s1.xy, -s0.zz < 0.00000h);\n"
             "    s1.xy = s1.xy + hg_Params[1].xy;\n"
             "    s1.xy = s1.xy*hg_Params[1].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3772d60d:cf7da09f:a9799107:d8eb7c11\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0002:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=00000004ad\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(1.000000000, -2.000000000, 3.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    r1.x = dot(r0.xy, r0.xy);\n"
             "    r1.x = sqrt(r1.x);\n"
             "    r1.x = r1.x*hg_Params[0].z;\n"
             "    r1.x = fmin(r1.x, c0.x);\n"
             "    r0.z = c0.x - r1.x;\n"
             "    r1.x = r0.z*c0.y + c0.z;\n"
             "    r1.x = r1.x*r0.z;\n"
             "    r1.x = r1.x*r0.z;\n"
             "    r1.y = r1.x*hg_Params[0].w;\n"
             "    r1.x = sin(r1.y);\n"
             "    r1.z = cos(r1.y);\n"
             "    r1.yw = r1.zx;\n"
             "    r1.x = -r1.x;\n"
             "    r1 = r0.xyxy*r1;\n"
             "    r1.xy = r1.zx + r1.wy;\n"
             "    r1.xy = r1.xy + hg_Params[0].xy;\n"
             "    r1.xy = select(frag._texCoord0.xy, r1.xy, -r0.zz < 0.00000f);\n"
             "    r1.xy = r1.xy + hg_Params[1].xy;\n"
             "    r1.xy = r1.xy*hg_Params[1].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=40f6c188:38749712:e9c8a05a:80e63062\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0002:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000004d1\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(1.000000000, -2.000000000, 3.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy - hg_ProgramLocal0.xy;\n"
           "    r1.x = dot(r0.xy, r0.xy);\n"
           "    r1.x = sqrt(r1.x);\n"
           "    r1.x = r1.x*hg_ProgramLocal0.z;\n"
           "    r1.x = min(r1.x, c0.x);\n"
           "    r0.z = c0.x - r1.x;\n"
           "    r1.x = r0.z*c0.y + c0.z;\n"
           "    r1.x = r1.x*r0.z;\n"
           "    r1.x = r1.x*r0.z;\n"
           "    r1.y = r1.x*hg_ProgramLocal0.w;\n"
           "    r1.x = sin(r1.y);\n"
           "    r1.z = cos(r1.y);\n"
           "    r1.yw = r1.zx;\n"
           "    r1.x = -r1.x;\n"
           "    r1 = r0.xyxy*r1;\n"
           "    r1.xy = r1.zx + r1.wy;\n"
           "    r1.xy = r1.xy + hg_ProgramLocal0.xy;\n"
           "    r1.xy = vec2(-r0.z < 0.00000 ? r1.x : hg_TexCoord0.x, -r0.z < 0.00000 ? r1.y : hg_TexCoord0.y);\n"
           "    r1.xy = r1.xy + hg_ProgramLocal1.xy;\n"
           "    r1.xy = r1.xy*hg_ProgramLocal1.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r1.xy);\n"
           "}\n"
           "//MD5=61b720b3:0921029c:c5f18401:2253427e\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0002:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgciOSTwirl::InitProgramDescriptor(HgciOSTwirl *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgciOSTwirl_hgc_visible", "//Metal1.0     \n//LEN=00000003e5\n[[ visible ]] FragmentOut HgciOSTwirl_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(1.000000000, -2.000000000, 3.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy - hg_Params[0].xy;\n"
    "    r1.x = dot(r0.xy, r0.xy);\n"
    "    r1.x = sqrt(r1.x);\n"
    "    r1.x = r1.x*hg_Params[0].z;\n"
    "    r1.x = fmin(r1.x, c0.x);\n"
    "    r0.z = c0.x - r1.x;\n"
    "    r1.x = r0.z*c0.y + c0.z;\n"
    "    r1.x = r1.x*r0.z;\n"
    "    r1.x = r1.x*r0.z;\n"
    "    r1.y = r1.x*hg_Params[0].w;\n"
    "    r1.x = sin(r1.y);\n"
    "    r1.z = cos(r1.y);\n"
    "    r1.yw = r1.zx;\n"
    "    r1.x = -r1.x;\n"
    "    r1 = r0.xyxy*r1;\n"
    "    r1.xy = r1.zx + r1.wy;\n"
    "    r1.xy = r1.xy + hg_Params[0].xy;\n"
    "    r1.xy = select(texCoord0.xy, r1.xy, -r0.zz < 0.00000f);\n"
    "    r1.xy = r1.xy + hg_Params[1].xy;\n"
    "    r1.xy = r1.xy*hg_Params[1].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r1.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28CA6B4()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgciOSTwirl");
}

void sub_1B28CA6C4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3051300;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28CA844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28CA894()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28CA88CLL);
}

_QWORD *HgciOSTwirl::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgciOSTwirl [hgc1]");
}

uint64_t HgciOSTwirl::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 1, v5, v6, v7, v8);
  return 0;
}

uint64_t HgciOSTwirl::Bind(HgciOSTwirl *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HgciOSTwirl *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgciOSTwirl::RenderTile(HgciOSTwirl *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  uint64_t v80;
  float32x4_t v81;
  uint64_t v82;
  int32x4_t v83;
  float32x2_t v84;
  float32x4_t *v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  int32x4_t v89;
  float32x4_t *v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t *v97;
  uint64_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int8x16_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int8x16_t v119;
  float32x4_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int8x16_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  float32x4_t v132;
  uint64_t v133;
  float32x4_t v134;
  uint64_t v135;
  int32x4_t v136;
  float32x2_t v137;
  float32x4_t *v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int32x4_t v142;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgciOSTwirl *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = (int8x16_t)v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = (int8x16_t)v14;
        do
        {
          v18 = (int8x16_t)vaddq_f32((float32x4_t)v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 16);
          v21 = vsubq_f32((float32x4_t)v17, *(float32x4_t *)v19);
          v22 = vsubq_f32((float32x4_t)v18, *(float32x4_t *)v19);
          v23 = vmulq_f32(v21, v21);
          v24 = vmulq_f32(v22, v22);
          v25 = vaddq_f32(v23, (float32x4_t)vrev64q_s32((int32x4_t)v23));
          v26 = vaddq_f32(v24, (float32x4_t)vrev64q_s32((int32x4_t)v24));
          v27 = vminq_f32(vrsqrteq_f32(v25), v20);
          v28 = vminq_f32(vrsqrteq_f32(v26), v20);
          v29 = vminq_f32(vmulq_f32(v27, vrsqrtsq_f32(vmulq_f32(v27, v25), v27)), v20);
          v30 = vminq_f32(vmulq_f32(v28, vrsqrtsq_f32(vmulq_f32(v26, v28), v28)), v20);
          v31 = vminq_f32(vmulq_f32(v29, vrsqrtsq_f32(vmulq_f32(v25, v29), v29)), v20);
          v32 = vmulq_laneq_f32(vmulq_f32(v26, vminq_f32(vmulq_f32(v30, vrsqrtsq_f32(vmulq_f32(v26, v30), v30)), v20)), *(float32x4_t *)v19, 2);
          v34 = *(int8x16_t *)(v19 + 32);
          v33 = *(float32x4_t *)(v19 + 48);
          v35 = vsubq_f32((float32x4_t)v34, vminq_f32(vmulq_laneq_f32(vmulq_f32(v25, v31), *(float32x4_t *)v19, 2), (float32x4_t)v34));
          v36 = vsubq_f32((float32x4_t)v34, vminq_f32(v32, (float32x4_t)v34));
          v37 = *(float32x4_t *)(v19 + 64);
          v38 = *(float32x4_t *)(v19 + 80);
          v39 = (float32x4_t)vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 8uLL);
          v40 = (int32x4_t)vmulq_n_f32(v39, vmulq_f32(v35, vmulq_f32(v35, vaddq_f32(v33, vmulq_f32(v35, v37)))).f32[0]);
          v41 = (int32x4_t)vmulq_n_f32(v39, vmulq_f32(v36, vmulq_f32(v36, vaddq_f32(v33, vmulq_f32(v36, v37)))).f32[0]);
          v42 = *(float32x4_t *)(v19 + 96);
          v43 = *(float32x4_t *)(v19 + 112);
          v44 = vaddq_f32(v38, vmulq_f32(v42, (float32x4_t)vrev64q_s32(v40)));
          v45 = vaddq_f32(v38, vmulq_f32(v42, (float32x4_t)vrev64q_s32(v41)));
          v46 = vcvtq_f32_s32(vcvtq_s32_f32(v44));
          v47 = vcvtq_f32_s32(vcvtq_s32_f32(v45));
          v48 = vaddq_f32(v38, vabdq_f32(vsubq_f32(v44, vsubq_f32(v46, (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v46, v44)))), v43));
          v49 = vaddq_f32(v38, vabdq_f32(vsubq_f32(v45, vsubq_f32(v47, (float32x4_t)vandq_s8(v34, (int8x16_t)vcgtq_f32(v47, v45)))), v43));
          v50 = vmulq_f32(v48, v48);
          v51 = vmulq_f32(v49, v49);
          v52 = *(float32x4_t *)(v19 + 128);
          v53 = *(float32x4_t *)(v19 + 144);
          v54 = *(int8x16_t *)(v19 + 160);
          v55 = *(float32x4_t *)(v19 + 176);
          v56 = (int8x16_t)vmulq_f32(v48, vaddq_f32(v55, vmulq_f32(v50, vaddq_f32((float32x4_t)v54, vmulq_f32(v50, vaddq_f32(v52, vmulq_f32(v53, v50)))))));
          v57 = (int8x16_t)vmulq_f32(v49, vaddq_f32(v55, vmulq_f32(v51, vaddq_f32((float32x4_t)v54, vmulq_f32(v51, vaddq_f32(v52, vmulq_f32(v53, v51)))))));
          v58 = *(int8x16_t *)(v19 + 192);
          v59 = *(int8x16_t *)(v19 + 208);
          v60 = vbslq_s8(v58, v56, (int8x16_t)v40);
          v61 = vbslq_s8(v58, v57, (int8x16_t)v41);
          v62 = vmulq_f32(v55, (float32x4_t)vextq_s8(v60, v60, 0xCuLL));
          v63 = vmulq_f32(v55, (float32x4_t)vextq_s8(v61, v61, 0xCuLL));
          v64 = vcvtq_f32_s32(vcvtq_s32_f32(v62));
          v65 = vcvtq_f32_s32(vcvtq_s32_f32(v63));
          v66 = vsubq_f32(vabdq_f32(vsubq_f32(v62, vsubq_f32(v64, (float32x4_t)vandq_s8(v54, (int8x16_t)vcgtq_f32(v64, v62)))), v53), v52);
          v67 = vsubq_f32(vabdq_f32(vsubq_f32(v63, vsubq_f32(v65, (float32x4_t)vandq_s8(v54, (int8x16_t)vcgtq_f32(v65, v63)))), v53), v52);
          v68 = vmulq_f32(v66, v66);
          v69 = vmulq_f32(v67, v67);
          v60.i64[1] = vmulq_f32(v66, vaddq_f32(v37, vmulq_f32(v68, vaddq_f32(v38, vmulq_f32(v68, vaddq_f32(v43, vmulq_f32(v42, v68))))))).i64[1];
          v61.i64[1] = vmulq_f32(v67, vaddq_f32(v37, vmulq_f32(v69, vaddq_f32(v38, vmulq_f32(v69, vaddq_f32(v43, vmulq_f32(v42, v69))))))).i64[1];
          v70 = vbslq_s8(v59, v60, vextq_s8(v60, v60, 4uLL));
          v71 = vbslq_s8(v59, v61, vextq_s8(v61, v61, 4uLL));
          v72 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_lane_s64(v21.i64[0], 0), (float32x4_t)vbslq_s8(v58, (int8x16_t)vnegq_f32((float32x4_t)v70), v70));
          v73 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_lane_s64(v22.i64[0], 0), (float32x4_t)vbslq_s8(v58, (int8x16_t)vnegq_f32((float32x4_t)v71), v71));
          v74 = *(int8x16_t *)(v19 + 224);
          v75 = *(int8x16_t *)(v19 + 240);
          v43.i64[0] = vextq_s8(v74, v74, 8uLL).u64[0];
          v67.i64[0] = vextq_s8(v75, v75, 8uLL).u64[0];
          *(float32x2_t *)v42.f32 = vadd_f32((float32x2_t)vqtbl1_s8(v72, *(int8x8_t *)v74.i8), (float32x2_t)vqtbl1_s8(v72, *(int8x8_t *)v75.i8));
          *(float32x2_t *)&v42.u32[2] = vadd_f32((float32x2_t)vqtbl1_s8(v72, *(int8x8_t *)v43.f32), (float32x2_t)vqtbl1_s8(v72, *(int8x8_t *)v67.f32));
          *(float32x2_t *)v72.i8 = vadd_f32((float32x2_t)vqtbl1_s8(v73, *(int8x8_t *)v74.i8), (float32x2_t)vqtbl1_s8(v73, *(int8x8_t *)v75.i8));
          v72.u64[1] = (unint64_t)vadd_f32((float32x2_t)vqtbl1_s8(v73, *(int8x8_t *)v43.f32), (float32x2_t)vqtbl1_s8(v73, *(int8x8_t *)v67.f32));
          v76 = (int8x16_t)vaddq_f32(*(float32x4_t *)v19, (float32x4_t)v72);
          v77 = *(float32x4_t *)(v19 + 256);
          v78 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0), v77), (int8x16_t)vaddq_f32(*(float32x4_t *)v19, v42), v17);
          v79 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 0), v77), v76, v18);
          v80 = *((int *)a2 + 22);
          v81 = vsubq_f32(v78, v9);
          v82 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v83 = vaddq_s32(vcvtq_s32_f32(v81), vcltzq_f32(v81));
            v84 = (float32x2_t)vsubq_f32(v81, vcvtq_f32_s32(v83)).u64[0];
            v85 = (float32x4_t *)(v82 + 16 * (v83.i32[0] + v83.i32[1] * (int)v80));
            v86 = vaddq_f32(*v85, vmulq_n_f32(vsubq_f32(v85[1], *v85), v84.f32[0]));
            v87 = vaddq_f32(v86, vmulq_lane_f32(vsubq_f32(vaddq_f32(v85[v80], vmulq_n_f32(vsubq_f32(v85[(int)v80 + 1], v85[v80]), v84.f32[0])), v86), v84, 1));
            v88 = vsubq_f32(v79, v9);
            v89 = vaddq_s32(vcvtq_s32_f32(v88), vcltzq_f32(v88));
            v88.i64[0] = vsubq_f32(v88, vcvtq_f32_s32(v89)).u64[0];
            v90 = (float32x4_t *)(v82 + 16 * (v89.i32[0] + v89.i32[1] * (int)v80));
            v91 = vaddq_f32(*v90, vmulq_n_f32(vsubq_f32(v90[1], *v90), v88.f32[0]));
            v92 = vaddq_f32(v91, vmulq_lane_f32(vsubq_f32(vaddq_f32(v90[v80], vmulq_n_f32(vsubq_f32(v90[(int)v80 + 1], v90[v80]), v88.f32[0])), v91), *(float32x2_t *)v88.f32, 1));
          }
          else
          {
            v93 = vaddq_f32(v81, v13);
            v94 = vcvtq_s32_f32(v93);
            v93.i64[0] = vaddq_s32(v94, vcgtq_f32(vcvtq_f32_s32(v94), v93)).u64[0];
            v87 = *(float32x4_t *)(v82 + 16 * (v93.i32[0] + v93.i32[1] * (int)v80));
            v95 = vaddq_f32(vsubq_f32(v79, v9), v13);
            v96 = vcvtq_s32_f32(v95);
            v95.i64[0] = vaddq_s32(v96, vcgtq_f32(vcvtq_f32_s32(v96), v95)).u64[0];
            v92 = *(float32x4_t *)(v82 + 16 * (v95.i32[0] + v95.i32[1] * (int)v80));
          }
          v97 = (float32x4_t *)(v11 + 16 * v15);
          *v97 = v87;
          v97[1] = v92;
          v17 = (int8x16_t)vaddq_f32((float32x4_t)v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v98 = *((_QWORD *)this + 51);
        v99 = *(float32x4_t *)(v98 + 16);
        v100 = vsubq_f32((float32x4_t)v17, *(float32x4_t *)v98);
        v101 = vmulq_f32(v100, v100);
        v102 = vaddq_f32(v101, (float32x4_t)vrev64q_s32((int32x4_t)v101));
        v103 = vminq_f32(vrsqrteq_f32(v102), v99);
        v104 = vminq_f32(vmulq_f32(v103, vrsqrtsq_f32(vmulq_f32(v103, v102), v103)), v99);
        v105 = vmulq_laneq_f32(vmulq_f32(v102, vminq_f32(vmulq_f32(v104, vrsqrtsq_f32(vmulq_f32(v102, v104), v104)), v99)), *(float32x4_t *)v98, 2);
        v106 = *(int8x16_t *)(v98 + 32);
        v107 = vsubq_f32((float32x4_t)v106, vminq_f32(v105, (float32x4_t)v106));
        v108 = *(float32x4_t *)(v98 + 64);
        v109 = *(float32x4_t *)(v98 + 80);
        v110 = (int32x4_t)vmulq_n_f32((float32x4_t)vextq_s8(*(int8x16_t *)v98, *(int8x16_t *)v98, 8uLL), vmulq_f32(v107, vmulq_f32(v107, vaddq_f32(*(float32x4_t *)(v98 + 48), vmulq_f32(v107, v108)))).f32[0]);
        v111 = *(float32x4_t *)(v98 + 96);
        v112 = *(float32x4_t *)(v98 + 112);
        v113 = vaddq_f32(v109, vmulq_f32(v111, (float32x4_t)vrev64q_s32(v110)));
        v114 = vcvtq_f32_s32(vcvtq_s32_f32(v113));
        v115 = vaddq_f32(v109, vabdq_f32(vsubq_f32(v113, vsubq_f32(v114, (float32x4_t)vandq_s8(v106, (int8x16_t)vcgtq_f32(v114, v113)))), v112));
        v116 = vmulq_f32(v115, v115);
        v117 = *(float32x4_t *)(v98 + 128);
        v118 = *(float32x4_t *)(v98 + 144);
        v119 = *(int8x16_t *)(v98 + 160);
        v120 = *(float32x4_t *)(v98 + 176);
        v121 = (int8x16_t)vmulq_f32(v115, vaddq_f32(v120, vmulq_f32(v116, vaddq_f32((float32x4_t)v119, vmulq_f32(v116, vaddq_f32(v117, vmulq_f32(v118, v116)))))));
        v122 = *(int8x16_t *)(v98 + 192);
        v123 = vbslq_s8(v122, v121, (int8x16_t)v110);
        v124 = vmulq_f32(v120, (float32x4_t)vextq_s8(v123, v123, 0xCuLL));
        v125 = vcvtq_f32_s32(vcvtq_s32_f32(v124));
        v126 = vsubq_f32(vabdq_f32(vsubq_f32(v124, vsubq_f32(v125, (float32x4_t)vandq_s8(v119, (int8x16_t)vcgtq_f32(v125, v124)))), v118), v117);
        v127 = vmulq_f32(v126, v126);
        v123.i64[1] = vmulq_f32(v126, vaddq_f32(v108, vmulq_f32(v127, vaddq_f32(v109, vmulq_f32(v127, vaddq_f32(v112, vmulq_f32(v111, v127))))))).i64[1];
        v128 = vbslq_s8(*(int8x16_t *)(v98 + 208), v123, vextq_s8(v123, v123, 4uLL));
        v129 = (int8x16_t)vmulq_f32((float32x4_t)vdupq_lane_s64(v100.i64[0], 0), (float32x4_t)vbslq_s8(v122, (int8x16_t)vnegq_f32((float32x4_t)v128), v128));
        v130 = *(int8x16_t *)(v98 + 224);
        v131 = *(int8x16_t *)(v98 + 240);
        *(int8x8_t *)v126.f32 = vqtbl1_s8(v129, *(int8x8_t *)v130.i8);
        *(int8x8_t *)v130.i8 = vqtbl1_s8(v129, (int8x8_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL));
        *(int8x8_t *)v109.f32 = vqtbl1_s8(v129, *(int8x8_t *)v131.i8);
        *(int8x8_t *)v129.i8 = vqtbl1_s8(v129, (int8x8_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL));
        *(float32x2_t *)v131.i8 = vadd_f32(*(float32x2_t *)v126.f32, *(float32x2_t *)v109.f32);
        v131.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v130.i8, *(float32x2_t *)v129.i8);
        v132 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v107.f32, 0), *(float32x4_t *)(v98 + 256)), (int8x16_t)vaddq_f32(*(float32x4_t *)v98, (float32x4_t)v131), v17);
        v133 = *((int *)a2 + 22);
        v134 = vsubq_f32(v132, v9);
        v135 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v136 = vaddq_s32(vcvtq_s32_f32(v134), vcltzq_f32(v134));
          v137 = (float32x2_t)vsubq_f32(v134, vcvtq_f32_s32(v136)).u64[0];
          v138 = (float32x4_t *)(v135 + 16 * (v136.i32[0] + v136.i32[1] * (int)v133));
          v139 = vaddq_f32(*v138, vmulq_n_f32(vsubq_f32(v138[1], *v138), v137.f32[0]));
          v140 = vaddq_f32(v139, vmulq_lane_f32(vsubq_f32(vaddq_f32(v138[v133], vmulq_n_f32(vsubq_f32(v138[(int)v133 + 1], v138[v133]), v137.f32[0])), v139), v137, 1));
        }
        else
        {
          v141 = vaddq_f32(v134, v13);
          v142 = vcvtq_s32_f32(v141);
          v141.i64[0] = vaddq_s32(v142, vcgtq_f32(vcvtq_f32_s32(v142), v141)).u64[0];
          v140 = *(float32x4_t *)(v135 + 16 * (v141.i32[0] + v141.i32[1] * (int)v133));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v140;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgciOSTwirl::GetDOD(HgciOSTwirl *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgciOSTwirl *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgciOSTwirl::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgciOSTwirl::HgciOSTwirl(HgciOSTwirl *this)
{
  _QWORD *v2;
  _OWORD *v3;
  __int128 v4;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F5CD8;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = xmmword_1B3051C80;
  v3[2] = xmmword_1B304F230;
  v3[3] = xmmword_1B3052B90;
  v3[4] = xmmword_1B3053810;
  v3[5] = xmmword_1B3053820;
  v3[6] = xmmword_1B3053830;
  v3[7] = xmmword_1B3053840;
  v3[8] = xmmword_1B3053790;
  v3[9] = xmmword_1B30537A0;
  v3[10] = xmmword_1B30537B0;
  v3[11] = xmmword_1B30537C0;
  *(_QWORD *)&v4 = 0xFFFFFFFFLL;
  *((_QWORD *)&v4 + 1) = 0xFFFFFFFFLL;
  v3[12] = xmmword_1B3050E20;
  v3[13] = v4;
  v3[14] = xmmword_1B30537D0;
  v3[15] = xmmword_1B30537E0;
  v3[16] = 0u;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgciOSTwirl *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28CB2D8(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgciOSTwirl::~HgciOSTwirl(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F5CD8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40881B329ALL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgciOSTwirl::~HgciOSTwirl(this);
  HGObject::operator delete(v1);
}

uint64_t HgciOSTwirl::SetParameter(HgciOSTwirl *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  float *v8;

  if ((_DWORD)a2)
    return 0xFFFFFFFFLL;
  v8 = (float *)*((_QWORD *)this + 51);
  if (*v8 == a3 && v8[1] == a4 && v8[2] == a5 && v8[3] == a6)
    return 0;
  *v8 = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

float HgciOSTwirl::GetParameter(HgciOSTwirl *this, int a2, float *a3)
{
  float *v3;
  float result;

  if (!a2)
  {
    v3 = (float *)*((_QWORD *)this + 51);
    *a3 = *v3;
    a3[1] = v3[1];
    a3[2] = v3[2];
    result = v3[3];
    a3[3] = result;
  }
  return result;
}

const char *HgciOSStretch::GetProgram(HgciOSStretch *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000460\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(2.000000000, -3.000000000, 1.000000000, 0.000000000);\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    s0.xy = clamp(fabs(s0.xy)*hg_Params[1].xx, 0.00000f, 1.00000f);\n"
             "    s0.zw = float2(c0.zz) - s0.xy;\n"
             "    s1.xy = s0.zw*float2(c0.xx) + float2(c0.yy);\n"
             "    s0.xy = frag._texCoord0.xy - hg_Params[0].yy;\n"
             "    s0.xy = s0.xy*hg_Params[1].zz;\n"
             "    s1.xy = s1.xy*s0.zw;\n"
             "    s0.xy = sin(s0.xy);\n"
             "    s0.xy = s0.xy*hg_Params[1].yy;\n"
             "    s0.zw = s1.xy*s0.zw;\n"
             "    s0.xy = s0.zw*s0.xy + frag._texCoord0.xy;\n"
             "    s0.xy = s0.xy + hg_Params[2].xy;\n"
             "    s0.xy = s0.xy*hg_Params[2].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=7bcad507:16c082ed:16ecd8e9:3ba9bce2\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0003:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000442\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(2.000000000, -3.000000000, 1.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    r0.xy = clamp(fabs(r0.xy)*hg_Params[1].xx, 0.00000f, 1.00000f);\n"
             "    r0.zw = c0.zz - r0.xy;\n"
             "    r1.xy = r0.zw*c0.xx + c0.yy;\n"
             "    r0.xy = frag._texCoord0.xy - hg_Params[0].yy;\n"
             "    r0.xy = r0.xy*hg_Params[1].zz;\n"
             "    r1.xy = r1.xy*r0.zw;\n"
             "    r0.xy = sin(r0.xy);\n"
             "    r0.xy = r0.xy*hg_Params[1].yy;\n"
             "    r0.zw = r1.xy*r0.zw;\n"
             "    r0.xy = r0.zw*r0.xy + frag._texCoord0.xy;\n"
             "    r0.xy = r0.xy + hg_Params[2].xy;\n"
             "    r0.xy = r0.xy*hg_Params[2].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=2b0e1c67:f965a4ae:f0df031e:1fd70b55\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0003:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000471\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(2.000000000, -3.000000000, 1.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy - hg_ProgramLocal0.xy;\n"
           "    r0.xy = clamp(abs(r0.xy)*hg_ProgramLocal1.xx, vec2(0.00000), vec2(1.00000));\n"
           "    r0.zw = c0.zz - r0.xy;\n"
           "    r1.xy = r0.zw*c0.xx + c0.yy;\n"
           "    r0.xy = hg_TexCoord0.xy - hg_ProgramLocal0.yy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal1.zz;\n"
           "    r1.xy = r1.xy*r0.zw;\n"
           "    r0.xy = sin(r0.xy);\n"
           "    r0.xy = r0.xy*hg_ProgramLocal1.yy;\n"
           "    r0.zw = r1.xy*r0.zw;\n"
           "    r0.xy = r0.zw*r0.xy + hg_TexCoord0.xy;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal2.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal2.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=f24858ac:8a889300:88c7d767:f92d5b43\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0003:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgciOSStretch::InitProgramDescriptor(HgciOSStretch *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgciOSStretch_hgc_visible", "//Metal1.0     \n//LEN=0000000376\n[[ visible ]] FragmentOut HgciOSStretch_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(2.000000000, -3.000000000, 1.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy - hg_Params[0].xy;\n"
    "    r0.xy = clamp(fabs(r0.xy)*hg_Params[1].xx, 0.00000f, 1.00000f);\n"
    "    r0.zw = c0.zz - r0.xy;\n"
    "    r1.xy = r0.zw*c0.xx + c0.yy;\n"
    "    r0.xy = texCoord0.xy - hg_Params[0].yy;\n"
    "    r0.xy = r0.xy*hg_Params[1].zz;\n"
    "    r1.xy = r1.xy*r0.zw;\n"
    "    r0.xy = sin(r0.xy);\n"
    "    r0.xy = r0.xy*hg_Params[1].yy;\n"
    "    r0.zw = r1.xy*r0.zw;\n"
    "    r0.xy = r0.zw*r0.xy + texCoord0.xy;\n"
    "    r0.xy = r0.xy + hg_Params[2].xy;\n"
    "    r0.xy = r0.xy*hg_Params[2].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28CB4BC()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgciOSStretch");
}

void sub_1B28CB4CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30513F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28CB64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28CB69C()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28CB694);
}

_QWORD *HgciOSStretch::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgciOSStretch [hgc1]");
}

uint64_t HgciOSStretch::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 2, v5, v6, v7, v8);
  return 0;
}

uint64_t HgciOSStretch::Bind(HgciOSStretch *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HgciOSStretch *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgciOSStretch::RenderTile(HgciOSStretch *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  float32x4_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  int8x16_t v61;
  float32x4_t v62;
  float32x4_t v63;
  uint64_t v64;
  float32x4_t v65;
  uint64_t v66;
  int32x4_t v67;
  float32x2_t v68;
  float32x4_t *v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t *v81;
  uint64_t v82;
  float32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  uint64_t v96;
  float32x4_t v97;
  uint64_t v98;
  int32x4_t v99;
  float32x2_t v100;
  float32x4_t *v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgciOSStretch *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.f32 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 16);
          v21 = *(float32x4_t *)(v19 + 32);
          v22 = *(int8x16_t *)(v19 + 48);
          v23 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_n_f32(vabdq_f32(v17, *(float32x4_t *)v19), v20.f32[0]), v21), (float32x4_t)v22);
          v24 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_n_f32(vabdq_f32(v18, *(float32x4_t *)v19), v20.f32[0]), v21), (float32x4_t)v22);
          v25 = (float32x4_t)vextq_s8(v24, v24, 8uLL);
          v26 = vsubq_f32((float32x4_t)v22, (float32x4_t)vextq_s8(v23, v23, 8uLL));
          v27 = vsubq_f32((float32x4_t)v22, v25);
          v28 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v26, 1);
          v29 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v27, 1);
          v30 = *(float32x4_t *)(v19 + 64);
          v31 = *(float32x4_t *)(v19 + 80);
          v32 = vaddq_f32(v30, vmulq_f32(v28, v31));
          v33 = vaddq_f32(v30, vmulq_f32(v31, v29));
          v34 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19, 1);
          v31.i64[0] = vmulq_laneq_f32(vsubq_f32(v17, v34), v20, 2).u64[0];
          v34.i64[0] = vmulq_laneq_f32(vsubq_f32(v18, v34), v20, 2).u64[0];
          v31.i64[1] = v26.i64[1];
          v34.i64[1] = v27.i64[1];
          v28.i64[0] = vmulq_f32(v28, v32).u64[0];
          v29.i64[0] = vmulq_f32(v29, v33).u64[0];
          v35 = *(float32x4_t *)(v19 + 96);
          v36 = *(float32x4_t *)(v19 + 112);
          v37 = vaddq_f32(v35, vmulq_f32(v31, v36));
          v38 = vaddq_f32(v35, vmulq_f32(v34, v36));
          v39 = vcvtq_f32_s32(vcvtq_s32_f32(v37));
          v40 = vcvtq_f32_s32(vcvtq_s32_f32(v38));
          v41 = vsubq_f32(v37, vsubq_f32(v39, (float32x4_t)vandq_s8(v22, (int8x16_t)vcgtq_f32(v39, v37))));
          v42 = vsubq_f32(v38, vsubq_f32(v40, (float32x4_t)vandq_s8(v22, (int8x16_t)vcgtq_f32(v40, v38))));
          v43 = *(float32x4_t *)(v19 + 128);
          v44 = *(float32x4_t *)(v19 + 144);
          v45 = vabdq_f32(v42, v43);
          v46 = vaddq_f32(v35, vabdq_f32(v41, v43));
          v47 = vaddq_f32(v35, v45);
          v48 = vmulq_f32(v46, v46);
          v49 = vmulq_f32(v47, v47);
          v50 = *(float32x4_t *)(v19 + 160);
          v51 = *(float32x4_t *)(v19 + 176);
          v52 = vaddq_f32(v44, vmulq_f32(v50, v48));
          v53 = vaddq_f32(v44, vmulq_f32(v50, v49));
          v54 = vaddq_f32(v51, vmulq_f32(v48, v52));
          v55 = vaddq_f32(v51, vmulq_f32(v49, v53));
          v56 = *(float32x4_t *)(v19 + 192);
          v57 = (int8x16_t)vmulq_lane_f32(vmulq_f32(v46, vaddq_f32(v56, vmulq_f32(v48, v54))), *(float32x2_t *)v20.f32, 1);
          v58 = (int8x16_t)vmulq_lane_f32(vmulq_f32(v47, vaddq_f32(v56, vmulq_f32(v49, v55))), *(float32x2_t *)v20.f32, 1);
          v59 = (int8x16_t)vmulq_f32(v26, (float32x4_t)vdupq_lane_s64(v28.i64[0], 0));
          v60 = (float32x4_t)vextq_s8(v59, v57, 8uLL);
          v57.i64[1] = v59.i64[1];
          v61 = (int8x16_t)vmulq_f32(v27, (float32x4_t)vdupq_lane_s64(v29.i64[0], 0));
          v62 = (float32x4_t)vextq_s8(v61, v58, 8uLL);
          v58.i64[1] = v61.i64[1];
          v63 = vaddq_f32(v18, vmulq_f32(v62, (float32x4_t)v58));
          v64 = *((int *)a2 + 22);
          v65 = vsubq_f32(vaddq_f32(v17, vmulq_f32(v60, (float32x4_t)v57)), v9);
          v66 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v67 = vaddq_s32(vcvtq_s32_f32(v65), vcltzq_f32(v65));
            v68 = (float32x2_t)vsubq_f32(v65, vcvtq_f32_s32(v67)).u64[0];
            v69 = (float32x4_t *)(v66 + 16 * (v67.i32[0] + v67.i32[1] * (int)v64));
            v70 = vaddq_f32(*v69, vmulq_n_f32(vsubq_f32(v69[1], *v69), v68.f32[0]));
            v71 = vaddq_f32(v70, vmulq_lane_f32(vsubq_f32(vaddq_f32(v69[v64], vmulq_n_f32(vsubq_f32(v69[(int)v64 + 1], v69[v64]), v68.f32[0])), v70), v68, 1));
            v72 = vsubq_f32(v63, v9);
            v73 = vaddq_s32(vcvtq_s32_f32(v72), vcltzq_f32(v72));
            v72.i64[0] = vsubq_f32(v72, vcvtq_f32_s32(v73)).u64[0];
            v74 = (float32x4_t *)(v66 + 16 * (v73.i32[0] + v73.i32[1] * (int)v64));
            v75 = vaddq_f32(*v74, vmulq_n_f32(vsubq_f32(v74[1], *v74), v72.f32[0]));
            v76 = vaddq_f32(v75, vmulq_lane_f32(vsubq_f32(vaddq_f32(v74[v64], vmulq_n_f32(vsubq_f32(v74[(int)v64 + 1], v74[v64]), v72.f32[0])), v75), *(float32x2_t *)v72.f32, 1));
          }
          else
          {
            v77 = vaddq_f32(v65, v13);
            v78 = vcvtq_s32_f32(v77);
            v77.i64[0] = vaddq_s32(v78, vcgtq_f32(vcvtq_f32_s32(v78), v77)).u64[0];
            v71 = *(float32x4_t *)(v66 + 16 * (v77.i32[0] + v77.i32[1] * (int)v64));
            v79 = vaddq_f32(vsubq_f32(v63, v9), v13);
            v80 = vcvtq_s32_f32(v79);
            v79.i64[0] = vaddq_s32(v80, vcgtq_f32(vcvtq_f32_s32(v80), v79)).u64[0];
            v76 = *(float32x4_t *)(v66 + 16 * (v79.i32[0] + v79.i32[1] * (int)v64));
          }
          v81 = (float32x4_t *)(v11 + 16 * v15);
          *v81 = v71;
          v81[1] = v76;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v82 = *((_QWORD *)this + 51);
        v83 = *(float32x4_t *)(v82 + 16);
        v84 = *(int8x16_t *)(v82 + 48);
        v85 = (int8x16_t)vminq_f32(vmaxq_f32(vmulq_n_f32(vabdq_f32(v17, *(float32x4_t *)v82), v83.f32[0]), *(float32x4_t *)(v82 + 32)), (float32x4_t)v84);
        v86 = vsubq_f32((float32x4_t)v84, (float32x4_t)vextq_s8(v85, v85, 8uLL));
        v87 = (float32x4_t)vdupq_laneq_s64((int64x2_t)v86, 1);
        v88.i64[0] = vmulq_laneq_f32(vsubq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82, 1)), v83, 2).u64[0];
        v88.i64[1] = v86.i64[1];
        v89 = *(float32x4_t *)(v82 + 96);
        v90 = vaddq_f32(v89, vmulq_f32(v88, *(float32x4_t *)(v82 + 112)));
        v91 = vcvtq_f32_s32(vcvtq_s32_f32(v90));
        v92 = vaddq_f32(v89, vabdq_f32(vsubq_f32(v90, vsubq_f32(v91, (float32x4_t)vandq_s8(v84, (int8x16_t)vcgtq_f32(v91, v90)))), *(float32x4_t *)(v82 + 128)));
        v93 = vmulq_f32(v92, v92);
        v94 = (int8x16_t)vmulq_lane_f32(vmulq_f32(v92, vaddq_f32(*(float32x4_t *)(v82 + 192), vmulq_f32(v93, vaddq_f32(*(float32x4_t *)(v82 + 176), vmulq_f32(v93, vaddq_f32(*(float32x4_t *)(v82 + 144), vmulq_f32(*(float32x4_t *)(v82 + 160), v93))))))), *(float32x2_t *)v83.f32, 1);
        v95 = (int8x16_t)vmulq_f32(v86, (float32x4_t)vdupq_lane_s64(vmulq_f32(v87, vaddq_f32(*(float32x4_t *)(v82 + 64), vmulq_f32(*(float32x4_t *)(v82 + 80), v87))).i64[0], 0));
        v86.i64[0] = v94.i64[0];
        v86.i64[1] = v95.i64[1];
        v96 = *((int *)a2 + 22);
        v97 = vsubq_f32(vaddq_f32(v17, vmulq_f32((float32x4_t)vextq_s8(v95, v94, 8uLL), v86)), v9);
        v98 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v99 = vaddq_s32(vcvtq_s32_f32(v97), vcltzq_f32(v97));
          v100 = (float32x2_t)vsubq_f32(v97, vcvtq_f32_s32(v99)).u64[0];
          v101 = (float32x4_t *)(v98 + 16 * (v99.i32[0] + v99.i32[1] * (int)v96));
          v102 = vaddq_f32(*v101, vmulq_n_f32(vsubq_f32(v101[1], *v101), v100.f32[0]));
          v103 = vaddq_f32(v102, vmulq_lane_f32(vsubq_f32(vaddq_f32(v101[v96], vmulq_n_f32(vsubq_f32(v101[(int)v96 + 1], v101[v96]), v100.f32[0])), v102), v100, 1));
        }
        else
        {
          v104 = vaddq_f32(v97, v13);
          v105 = vcvtq_s32_f32(v104);
          v104.i64[0] = vaddq_s32(v105, vcgtq_f32(vcvtq_f32_s32(v105), v104)).u64[0];
          v103 = *(float32x4_t *)(v98 + 16 * (v104.i32[0] + v104.i32[1] * (int)v96));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v103;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgciOSStretch::GetDOD(HgciOSStretch *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgciOSStretch *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgciOSStretch::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgciOSStretch::HgciOSStretch(HgciOSStretch *this)
{
  _QWORD *v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F5F40;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  v3[2] = 0u;
  v3[3] = _Q1;
  v3[4] = xmmword_1B3053860;
  v3[5] = xmmword_1B3053870;
  v3[6] = xmmword_1B3053880;
  v3[7] = xmmword_1B3053890;
  v3[8] = xmmword_1B3052100;
  v3[9] = xmmword_1B30538A0;
  v3[10] = xmmword_1B30538B0;
  v3[11] = xmmword_1B30538C0;
  v3[12] = xmmword_1B30538D0;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgciOSStretch *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28CBEB0(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgciOSStretch::~HgciOSStretch(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F5F40;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C400F93440CLL);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgciOSStretch::~HgciOSStretch(this);
  HGObject::operator delete(v1);
}

uint64_t HgciOSStretch::SetParameter(HgciOSStretch *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgciOSStretch::GetParameter(HgciOSStretch *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

const char *HgciOSKaleidoscope::GetProgram(HgciOSKaleidoscope *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000b84\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.05747731403, -0.1212390736, -0.01348046958, 0.1956359297);\n"
             "    const half4 c1 = half4(0.9999956489, 1.570796371, -0.3329946101, 3.141592741);\n"
             "    const half4 c2 = half4(-0.1666666716, 0.008333333768, 0.5000000000, -0.0001984127011);\n"
             "    const half4 c3 = half4(2.480158764e-05, -0.001388888923, 2.755731884e-06, 0.04166666791);\n"
             "    const half4 c4 = half4(0.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 s0, s1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    s0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    s0 = s0.xyxy*hg_Params[1];\n"
             "    s0.xz = s0.xz + s0.yw;\n"
             "    s0.yw = abs(s0.zx);\n"
             "    s1.x = fmax(s0.y, s0.w);\n"
             "    s1.y = 1.00000f / s1.x;\n"
             "    s1.x = fmin(s0.y, s0.w);\n"
             "    s1.x = s1.x*s1.y;\n"
             "    s1.y = s1.x*s1.x;\n"
             "    s1.z = s1.y*float(c0.z) + float(c0.x);\n"
             "    s1.z = s1.z*s1.y + float(c0.y);\n"
             "    s1.z = s1.z*s1.y + float(c0.w);\n"
             "    s1.z = s1.z*s1.y + float(c1.z);\n"
             "    s1.y = s1.z*s1.y + float(c1.x);\n"
             "    s1.x = s1.y*s1.x;\n"
             "    s1.y = -s1.x + float(c1.y);\n"
             "    s0.z = s0.w - s0.y;\n"
             "    s0.z = select(s1.x, s1.y, s0.z < 0.00000h);\n"
             "    s0.w = -s0.z + float(c1.w);\n"
             "    s0.z = select(s0.z, s0.w, s0.x < 0.00000h);\n"
             "    s0.z = s0.z*hg_Params[0].w + float(c2.z);\n"
             "    s0.z = floor(s0.z);\n"
             "    s1.y = s0.z*-hg_Params[0].z;\n"
             "    s1.z = abs(s1.y);\n"
             "    s0.w = float(c1.w) - s1.y;\n"
             "    s0.z = float(c1.y) - s1.y;\n"
             "    s0.z = select(s1.y, s0.w, s0.z < 0.00000h);\n"
             "    s1.x = -float(c1.w) - s0.z;\n"
             "    s0.w = s0.z + float(c1.y);\n"
             "    s0.z = select(s0.z, s1.x, s0.w < 0.00000h);\n"
             "    s0.w = s0.z*s0.z;\n"
             "    s1.x = s0.w*s0.z;\n"
             "    s0.w = s1.x*s0.z;\n"
             "    s0.w = s0.w*s0.z;\n"
             "    s1.x = s1.x*float(c2.x) + s0.z;\n"
             "    s1.x = s0.w*float(c2.y) + s1.x;\n"
             "    s0.w = s0.w*s0.z;\n"
             "    s0.w = s0.w*s0.z;\n"
             "    s1.x = s0.w*float(c2.w) + s1.x;\n"
             "    s0.w = s0.w*s0.z;\n"
             "    s0.z = s0.w*s0.z;\n"
             "    s0.z = s0.z*float(c3.z) + s1.x;\n"
             "    s1.w = -s1.z + float(c1.w);\n"
             "    s1.y = s1.z - float(c1.y);\n"
             "    s1.z = select(s1.z, s1.w, -s1.y < 0.00000h);\n"
             "    s1.z = s1.z*s1.z;\n"
             "    s1.w = s1.z*float(c3.x) + float(c3.y);\n"
             "    s1.w = s1.w*s1.z + float(c3.w);\n"
             "    s0.w = s1.w*s1.z + -float(c2.z);\n"
             "    s1.y = select(-float(c4.y), float(c4.y), -s1.y < 0.00000h);\n"
             "    s0.w = s0.w*s1.z + -float(c4.y);\n"
             "    s0.w = s0.w*s1.y;\n"
             "    s1.x = s0.y*s0.w;\n"
             "    s0.y = s0.z*s0.y;\n"
             "    s0.z = s0.x*s0.z + s1.x;\n"
             "    s0.x = s0.x*s0.w + -s0.y;\n"
             "    s0.y = abs(s0.z);\n"
             "    s0 = s0.xyxy*hg_Params[2];\n"
             "    s0.zw = s0.xz + s0.yw;\n"
             "    s0.xy = s0.zw + hg_Params[0].xy;\n"
             "    s0.xy = s0.xy + hg_Params[3].xy;\n"
             "    s0.xy = s0.xy*hg_Params[3].zw;\n"
             "    output.color0 = (float4) hg_Texture0.sample(hg_Sampler0, s0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=3bc7d522:95d24666:e1b451ca:1644193f\n"
             "//SIG=00400000:00000000:00000000:00000001:0005:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=0000000ad0\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.05747731403, -0.1212390736, -0.01348046958, 0.1956359297);\n"
             "    const float4 c1 = float4(0.9999956489, 1.570796371, -0.3329946101, 3.141592741);\n"
             "    const float4 c2 = float4(-0.1666666716, 0.008333333768, 0.5000000000, -0.0001984127011);\n"
             "    const float4 c3 = float4(2.480158764e-05, -0.001388888923, 2.755731884e-06, 0.04166666791);\n"
             "    const float4 c4 = float4(0.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
             "    float4 r0, r1;\n"
             "    FragmentOut output;\n"
             "\n"
             "    r0.xy = frag._texCoord0.xy - hg_Params[0].xy;\n"
             "    r0 = r0.xyxy*hg_Params[1];\n"
             "    r0.xz = r0.xz + r0.yw;\n"
             "    r0.yw = abs(r0.zx);\n"
             "    r1.x = fmax(r0.y, r0.w);\n"
             "    r1.y = 1.00000f / r1.x;\n"
             "    r1.x = fmin(r0.y, r0.w);\n"
             "    r1.x = r1.x*r1.y;\n"
             "    r1.y = r1.x*r1.x;\n"
             "    r1.z = r1.y*c0.z + c0.x;\n"
             "    r1.z = r1.z*r1.y + c0.y;\n"
             "    r1.z = r1.z*r1.y + c0.w;\n"
             "    r1.z = r1.z*r1.y + c1.z;\n"
             "    r1.y = r1.z*r1.y + c1.x;\n"
             "    r1.x = r1.y*r1.x;\n"
             "    r1.y = -r1.x + c1.y;\n"
             "    r0.z = r0.w - r0.y;\n"
             "    r0.z = select(r1.x, r1.y, r0.z < 0.00000f);\n"
             "    r0.w = -r0.z + c1.w;\n"
             "    r0.z = select(r0.z, r0.w, r0.x < 0.00000f);\n"
             "    r0.z = r0.z*hg_Params[0].w + c2.z;\n"
             "    r0.z = floor(r0.z);\n"
             "    r1.y = r0.z*-hg_Params[0].z;\n"
             "    r1.z = abs(r1.y);\n"
             "    r0.w = c1.w - r1.y;\n"
             "    r0.z = c1.y - r1.y;\n"
             "    r0.z = select(r1.y, r0.w, r0.z < 0.00000f);\n"
             "    r1.x = -c1.w - r0.z;\n"
             "    r0.w = r0.z + c1.y;\n"
             "    r0.z = select(r0.z, r1.x, r0.w < 0.00000f);\n"
             "    r0.w = r0.z*r0.z;\n"
             "    r1.x = r0.w*r0.z;\n"
             "    r0.w = r1.x*r0.z;\n"
             "    r0.w = r0.w*r0.z;\n"
             "    r1.x = r1.x*c2.x + r0.z;\n"
             "    r1.x = r0.w*c2.y + r1.x;\n"
             "    r0.w = r0.w*r0.z;\n"
             "    r0.w = r0.w*r0.z;\n"
             "    r1.x = r0.w*c2.w + r1.x;\n"
             "    r0.w = r0.w*r0.z;\n"
             "    r0.z = r0.w*r0.z;\n"
             "    r0.z = r0.z*c3.z + r1.x;\n"
             "    r1.w = -r1.z + c1.w;\n"
             "    r1.y = r1.z - c1.y;\n"
             "    r1.z = select(r1.z, r1.w, -r1.y < 0.00000f);\n"
             "    r1.z = r1.z*r1.z;\n"
             "    r1.w = r1.z*c3.x + c3.y;\n"
             "    r1.w = r1.w*r1.z + c3.w;\n"
             "    r0.w = r1.w*r1.z + -c2.z;\n"
             "    r1.y = select(-c4.y, c4.y, -r1.y < 0.00000f);\n"
             "    r0.w = r0.w*r1.z + -c4.y;\n"
             "    r0.w = r0.w*r1.y;\n"
             "    r1.x = r0.y*r0.w;\n"
             "    r0.y = r0.z*r0.y;\n"
             "    r0.z = r0.x*r0.z + r1.x;\n"
             "    r0.x = r0.x*r0.w + -r0.y;\n"
             "    r0.y = abs(r0.z);\n"
             "    r0 = r0.xyxy*hg_Params[2];\n"
             "    r0.zw = r0.xz + r0.yw;\n"
             "    r0.xy = r0.zw + hg_Params[0].xy;\n"
             "    r0.xy = r0.xy + hg_Params[3].xy;\n"
             "    r0.xy = r0.xy*hg_Params[3].zw;\n"
             "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
             "    return output;\n"
             "}\n"
             "//MD5=f49665f7:2c904a34:d70304c6:67c30ed8\n"
             "//SIG=00000000:00000000:00000000:00000000:0005:0004:0002:0000:0000:0000:0002:0000:0001:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=0000000b00\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "uniform highp vec4 hg_ProgramLocal0;\n"
           "uniform highp vec4 hg_ProgramLocal1;\n"
           "uniform highp vec4 hg_ProgramLocal2;\n"
           "uniform highp vec4 hg_ProgramLocal3;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "void main()\n"
           "{\n"
           "    const highp vec4 c0 = vec4(0.05747731403, -0.1212390736, -0.01348046958, 0.1956359297);\n"
           "    const highp vec4 c1 = vec4(0.9999956489, 1.570796371, -0.3329946101, 3.141592741);\n"
           "    const highp vec4 c2 = vec4(-0.1666666716, 0.008333333768, 0.5000000000, -0.0001984127011);\n"
           "    const highp vec4 c3 = vec4(2.480158764e-05, -0.001388888923, 2.755731884e-06, 0.04166666791);\n"
           "    const highp vec4 c4 = vec4(0.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
           "    highp vec4 r0, r1;\n"
           "\n"
           "    r0.xy = hg_TexCoord0.xy - hg_ProgramLocal0.xy;\n"
           "    r0 = r0.xyxy*hg_ProgramLocal1;\n"
           "    r0.xz = r0.xz + r0.yw;\n"
           "    r0.yw = abs(r0.zx);\n"
           "    r1.x = max(r0.y, r0.w);\n"
           "    r1.y = 1.00000 / r1.x;\n"
           "    r1.x = min(r0.y, r0.w);\n"
           "    r1.x = r1.x*r1.y;\n"
           "    r1.y = r1.x*r1.x;\n"
           "    r1.z = r1.y*c0.z + c0.x;\n"
           "    r1.z = r1.z*r1.y + c0.y;\n"
           "    r1.z = r1.z*r1.y + c0.w;\n"
           "    r1.z = r1.z*r1.y + c1.z;\n"
           "    r1.y = r1.z*r1.y + c1.x;\n"
           "    r1.x = r1.y*r1.x;\n"
           "    r1.y = -r1.x + c1.y;\n"
           "    r0.z = r0.w - r0.y;\n"
           "    r0.z = r0.z < 0.00000 ? r1.y : r1.x;\n"
           "    r0.w = -r0.z + c1.w;\n"
           "    r0.z = r0.x < 0.00000 ? r0.w : r0.z;\n"
           "    r0.z = r0.z*hg_ProgramLocal0.w + c2.z;\n"
           "    r0.z = floor(r0.z);\n"
           "    r1.y = r0.z*-hg_ProgramLocal0.z;\n"
           "    r1.z = abs(r1.y);\n"
           "    r0.w = c1.w - r1.y;\n"
           "    r0.z = c1.y - r1.y;\n"
           "    r0.z = r0.z < 0.00000 ? r0.w : r1.y;\n"
           "    r1.x = -c1.w - r0.z;\n"
           "    r0.w = r0.z + c1.y;\n"
           "    r0.z = r0.w < 0.00000 ? r1.x : r0.z;\n"
           "    r0.w = r0.z*r0.z;\n"
           "    r1.x = r0.w*r0.z;\n"
           "    r0.w = r1.x*r0.z;\n"
           "    r0.w = r0.w*r0.z;\n"
           "    r1.x = r1.x*c2.x + r0.z;\n"
           "    r1.x = r0.w*c2.y + r1.x;\n"
           "    r0.w = r0.w*r0.z;\n"
           "    r0.w = r0.w*r0.z;\n"
           "    r1.x = r0.w*c2.w + r1.x;\n"
           "    r0.w = r0.w*r0.z;\n"
           "    r0.z = r0.w*r0.z;\n"
           "    r0.z = r0.z*c3.z + r1.x;\n"
           "    r1.w = -r1.z + c1.w;\n"
           "    r1.y = r1.z - c1.y;\n"
           "    r1.z = -r1.y < 0.00000 ? r1.w : r1.z;\n"
           "    r1.z = r1.z*r1.z;\n"
           "    r1.w = r1.z*c3.x + c3.y;\n"
           "    r1.w = r1.w*r1.z + c3.w;\n"
           "    r0.w = r1.w*r1.z + -c2.z;\n"
           "    r1.y = -r1.y < 0.00000 ? c4.y : -c4.y;\n"
           "    r0.w = r0.w*r1.z + -c4.y;\n"
           "    r0.w = r0.w*r1.y;\n"
           "    r1.x = r0.y*r0.w;\n"
           "    r0.y = r0.z*r0.y;\n"
           "    r0.z = r0.x*r0.z + r1.x;\n"
           "    r0.x = r0.x*r0.w + -r0.y;\n"
           "    r0.y = abs(r0.z);\n"
           "    r0 = r0.xyxy*hg_ProgramLocal2;\n"
           "    r0.zw = r0.xz + r0.yw;\n"
           "    r0.xy = r0.zw + hg_ProgramLocal0.xy;\n"
           "    r0.xy = r0.xy + hg_ProgramLocal3.xy;\n"
           "    r0.xy = r0.xy*hg_ProgramLocal3.zw;\n"
           "    gl_FragColor = texture2D(hg_Texture0, r0.xy);\n"
           "}\n"
           "//MD5=d7727e5a:010688ed:757888cd:06bfead3\n"
           "//SIG=00000000:00000000:00000000:00000000:0005:0004:0002:0000:0000:0000:0000:0000:0001:01:0:1:0\n";
  }
}

void HgciOSKaleidoscope::InitProgramDescriptor(HgciOSKaleidoscope *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgciOSKaleidoscope_hgc_visible", "//Metal1.0     \n//LEN=0000000a15\n[[ visible ]] FragmentOut HgciOSKaleidoscope_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0)\n{\n    const float4 c0 = float4(0.05747731403, -0.1212390736, -0.01348046958, 0.1956359297);\n"
    "    const float4 c1 = float4(0.9999956489, 1.570796371, -0.3329946101, 3.141592741);\n"
    "    const float4 c2 = float4(-0.1666666716, 0.008333333768, 0.5000000000, -0.0001984127011);\n"
    "    const float4 c3 = float4(2.480158764e-05, -0.001388888923, 2.755731884e-06, 0.04166666791);\n"
    "    const float4 c4 = float4(0.000000000, -1.000000000, 0.000000000, 0.000000000);\n"
    "    float4 r0, r1;\n"
    "    FragmentOut output;\n"
    "\n"
    "    r0.xy = texCoord0.xy - hg_Params[0].xy;\n"
    "    r0 = r0.xyxy*hg_Params[1];\n"
    "    r0.xz = r0.xz + r0.yw;\n"
    "    r0.yw = abs(r0.zx);\n"
    "    r1.x = fmax(r0.y, r0.w);\n"
    "    r1.y = 1.00000f / r1.x;\n"
    "    r1.x = fmin(r0.y, r0.w);\n"
    "    r1.x = r1.x*r1.y;\n"
    "    r1.y = r1.x*r1.x;\n"
    "    r1.z = r1.y*c0.z + c0.x;\n"
    "    r1.z = r1.z*r1.y + c0.y;\n"
    "    r1.z = r1.z*r1.y + c0.w;\n"
    "    r1.z = r1.z*r1.y + c1.z;\n"
    "    r1.y = r1.z*r1.y + c1.x;\n"
    "    r1.x = r1.y*r1.x;\n"
    "    r1.y = -r1.x + c1.y;\n"
    "    r0.z = r0.w - r0.y;\n"
    "    r0.z = select(r1.x, r1.y, r0.z < 0.00000f);\n"
    "    r0.w = -r0.z + c1.w;\n"
    "    r0.z = select(r0.z, r0.w, r0.x < 0.00000f);\n"
    "    r0.z = r0.z*hg_Params[0].w + c2.z;\n"
    "    r0.z = floor(r0.z);\n"
    "    r1.y = r0.z*-hg_Params[0].z;\n"
    "    r1.z = abs(r1.y);\n"
    "    r0.w = c1.w - r1.y;\n"
    "    r0.z = c1.y - r1.y;\n"
    "    r0.z = select(r1.y, r0.w, r0.z < 0.00000f);\n"
    "    r1.x = -c1.w - r0.z;\n"
    "    r0.w = r0.z + c1.y;\n"
    "    r0.z = select(r0.z, r1.x, r0.w < 0.00000f);\n"
    "    r0.w = r0.z*r0.z;\n"
    "    r1.x = r0.w*r0.z;\n"
    "    r0.w = r1.x*r0.z;\n"
    "    r0.w = r0.w*r0.z;\n"
    "    r1.x = r1.x*c2.x + r0.z;\n"
    "    r1.x = r0.w*c2.y + r1.x;\n"
    "    r0.w = r0.w*r0.z;\n"
    "    r0.w = r0.w*r0.z;\n"
    "    r1.x = r0.w*c2.w + r1.x;\n"
    "    r0.w = r0.w*r0.z;\n"
    "    r0.z = r0.w*r0.z;\n"
    "    r0.z = r0.z*c3.z + r1.x;\n"
    "    r1.w = -r1.z + c1.w;\n"
    "    r1.y = r1.z - c1.y;\n"
    "    r1.z = select(r1.z, r1.w, -r1.y < 0.00000f);\n"
    "    r1.z = r1.z*r1.z;\n"
    "    r1.w = r1.z*c3.x + c3.y;\n"
    "    r1.w = r1.w*r1.z + c3.w;\n"
    "    r0.w = r1.w*r1.z + -c2.z;\n"
    "    r1.y = select(-c4.y, c4.y, -r1.y < 0.00000f);\n"
    "    r0.w = r0.w*r1.z + -c4.y;\n"
    "    r0.w = r0.w*r1.y;\n"
    "    r1.x = r0.y*r0.w;\n"
    "    r0.y = r0.z*r0.y;\n"
    "    r0.z = r0.x*r0.z + r1.x;\n"
    "    r0.x = r0.x*r0.w + -r0.y;\n"
    "    r0.y = abs(r0.z);\n"
    "    r0 = r0.xyxy*hg_Params[2];\n"
    "    r0.zw = r0.xz + r0.yw;\n"
    "    r0.xy = r0.zw + hg_Params[0].xy;\n"
    "    r0.xy = r0.xy + hg_Params[3].xy;\n"
    "    r0.xy = r0.xy*hg_Params[3].zw;\n"
    "    output.color0 = hg_Texture0.sample(hg_Sampler0, r0.xy);\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28CC0B8()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgciOSKaleidoscope");
}

void sub_1B28CC0C8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30515F0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28CC248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28CC298()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28CC290);
}

_QWORD *HgciOSKaleidoscope::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgciOSKaleidoscope [hgc1]");
}

uint64_t HgciOSKaleidoscope::BindTexture(uint64_t a1, uint64_t a2, int a3)
{
  __n128 v5;
  __n128 v6;
  __n128 v7;
  __n128 v8;

  if (a3)
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 144) + 128))(*(_QWORD *)(a2 + 144), 46))
  {
    v7.n128_u32[0] = 1.0;
    v8.n128_u32[0] = 1.0;
  }
  else
  {
    v7.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 228) - *(_DWORD *)(a2 + 220));
    v8.n128_f32[0] = 1.0 / (float)(*(_DWORD *)(a2 + 232) - *(_DWORD *)(a2 + 224));
  }
  v5.n128_f32[0] = (float)*(int *)(a2 + 240);
  v6.n128_f32[0] = (float)*(int *)(a2 + 244);
  (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128))(*(_QWORD *)a2 + 136))(a2, 3, v5, v6, v7, v8);
  return 0;
}

uint64_t HgciOSKaleidoscope::Bind(HgciOSKaleidoscope *this, HGHandler *a2)
{
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  (*(void (**)(HGHandler *, _QWORD, _QWORD, uint64_t))(*(_QWORD *)a2 + 144))(a2, 0, *((_QWORD *)this + 51), 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 1, *((_QWORD *)this + 51) + 16, 1);
  (*(void (**)(HGHandler *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 144))(a2, 2, *((_QWORD *)this + 51) + 32, 1);
  (*(void (**)(HgciOSKaleidoscope *, HGHandler *))(*(_QWORD *)this + 192))(this, a2);
  return 0;
}

uint64_t HgciOSKaleidoscope::RenderTile(HgciOSKaleidoscope *this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int32x2_t v6;
  int v7;
  int v8;
  int8x16_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x8_t v28;
  int8x16_t v29;
  float32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int8x16_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  int64x2_t v69;
  float32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int64x2_t v121;
  int64x2_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int8x16_t v125;
  int8x16_t v126;
  float32x4_t v127;
  float32x4_t v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  float32x4_t v143;
  float32x4_t v144;
  uint64_t v145;
  float32x4_t v146;
  uint64_t v147;
  int32x4_t v148;
  float32x2_t v149;
  float32x4_t *v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int32x4_t v154;
  float32x4_t *v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  int32x4_t v159;
  float32x4_t v160;
  int32x4_t v161;
  float32x4_t *v162;
  uint64_t v163;
  float32x4_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  float32x4_t v168;
  int32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  int8x16_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int32x4_t v178;
  int8x16_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  float32x4_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int64x2_t v192;
  int32x4_t v193;
  float32x4_t v194;
  int8x16_t v195;
  float32x4_t v196;
  float32x4_t v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int32x4_t v203;
  float32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  float32x4_t v207;
  int32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  int32x4_t v216;
  int8x16_t v217;
  int32x4_t v218;
  int8x16_t v219;
  int64x2_t v220;
  float32x4_t v221;
  float32x4_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  float32x2_t v228;
  int8x16_t v229;
  float32x4_t v230;
  uint64_t v231;
  float32x4_t v232;
  uint64_t v233;
  int32x4_t v234;
  float32x2_t v235;
  float32x4_t *v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  int32x4_t v240;

  v4 = HGTile::Renderer(a2);
  v5 = (*(uint64_t (**)(HgciOSKaleidoscope *, uint64_t))(*(_QWORD *)this + 312))(this, v4);
  v6 = *(int32x2_t *)a2;
  v7 = *((_DWORD *)a2 + 3) - HIDWORD(*(_QWORD *)a2);
  if (v7 >= 1)
  {
    v8 = 0;
    *(float32x2_t *)v9.i8 = vadd_f32(vcvt_f32_s32(v6), (float32x2_t)0x3F0000003F000000);
    v9.i64[1] = 0x3F80000000000000;
    v10 = *((_DWORD *)a2 + 2) - v6.i32[0];
    v11 = *((_QWORD *)a2 + 2);
    v12 = 16 * *((int *)a2 + 6);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = (float32x4_t)v9;
    do
    {
      if (v10 < 2)
      {
        v15 = 0;
        v17 = v14;
      }
      else
      {
        v15 = 0;
        v16 = v10;
        v17 = v14;
        do
        {
          v18 = vaddq_f32(v17, (float32x4_t)xmmword_1B304F230);
          v19 = *((_QWORD *)this + 51);
          v20 = *(float32x4_t *)(v19 + 16);
          v21 = vmulq_f32(v20, (float32x4_t)vdupq_lane_s64(vsubq_f32(v17, *(float32x4_t *)v19).i64[0], 0));
          v22 = vmulq_f32(v20, (float32x4_t)vdupq_lane_s64(vsubq_f32(v18, *(float32x4_t *)v19).i64[0], 0));
          v23 = (int8x16_t)vaddq_f32(v21, (float32x4_t)vrev64q_s32((int32x4_t)v21));
          v24 = (int8x16_t)vaddq_f32(v22, (float32x4_t)vrev64q_s32((int32x4_t)v22));
          v26 = *(float32x4_t *)(v19 + 32);
          v25 = *(int8x16_t *)(v19 + 48);
          *(int8x8_t *)v27.i8 = vqtbl1_s8(v23, *(int8x8_t *)v25.i8);
          v28 = (int8x8_t)vextq_s8(v25, v25, 8uLL).u64[0];
          v27.u64[1] = (unint64_t)vqtbl1_s8(v23, v28);
          *(int8x8_t *)v23.i8 = vqtbl1_s8(v24, *(int8x8_t *)v25.i8);
          v23.u64[1] = (unint64_t)vqtbl1_s8(v24, v28);
          v29 = *(int8x16_t *)(v19 + 64);
          v30 = *(float32x4_t *)(v19 + 80);
          v31 = (int32x4_t)vandq_s8(v29, v27);
          v32 = (int32x4_t)vandq_s8(v29, v23);
          v33 = (float32x4_t)vrev64q_s32(v31);
          v34 = (float32x4_t)vrev64q_s32(v32);
          v35 = (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 0xCuLL);
          v36 = (float32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 0xCuLL);
          v37 = (float32x4_t)vrev64q_s32((int32x4_t)vmaxq_f32(v33, v35));
          v38 = (float32x4_t)vrev64q_s32((int32x4_t)vmaxq_f32(v34, v36));
          v39 = *(float32x4_t *)(v19 + 96);
          v40 = *(int32x4_t *)(v19 + 112);
          v41 = vminq_f32(vmaxq_f32(vrecpeq_f32(v37), v30), v39);
          v42 = vminq_f32(vmaxq_f32(vrecpeq_f32(v38), v30), v39);
          v43 = vminq_f32(vmaxq_f32(vmulq_f32(v41, vrecpsq_f32(v37, v41)), v30), v39);
          v44 = vminq_f32(vmaxq_f32(vmulq_f32(v42, vrecpsq_f32(v38, v42)), v30), v39);
          v45 = (float32x4_t)vbslq_s8((int8x16_t)v40, (int8x16_t)vminq_f32(v33, v35), (int8x16_t)vmulq_f32(v43, vrecpsq_f32(v37, v43)));
          v46 = (float32x4_t)vbslq_s8((int8x16_t)v40, (int8x16_t)vminq_f32(v34, v36), (int8x16_t)vmulq_f32(v44, vrecpsq_f32(v38, v44)));
          v47 = (int32x4_t)vmulq_lane_f32(v45, *(float32x2_t *)v45.f32, 1);
          v48 = (int32x4_t)vmulq_lane_f32(v46, *(float32x2_t *)v46.f32, 1);
          v49 = vbslq_s8((int8x16_t)v40, (int8x16_t)v47, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32(v47), *(float *)v47.i32));
          v50 = vbslq_s8((int8x16_t)v40, (int8x16_t)v48, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32(v48), *(float *)v48.i32));
          v51 = *(float32x4_t *)(v19 + 128);
          v52 = *(float32x4_t *)(v19 + 144);
          v53 = vaddq_f32(v52, vmulq_lane_f32(vaddq_f32(v30, vmulq_f32(v51, (float32x4_t)vextq_s8(v9, v50, 0xCuLL))), *(float32x2_t *)v50.i8, 1));
          v54 = vmulq_lane_f32(vaddq_f32(v52, vmulq_lane_f32(vaddq_f32(v30, vmulq_f32(v51, (float32x4_t)vextq_s8(v9, v49, 0xCuLL))), *(float32x2_t *)v49.i8, 1)), *(float32x2_t *)v49.i8, 1);
          v55 = *(float32x4_t *)(v19 + 160);
          v56 = *(float32x4_t *)(v19 + 176);
          v57 = vaddq_f32(v56, vmulq_lane_f32(vaddq_f32(v55, v54), *(float32x2_t *)v49.i8, 1));
          v58 = vaddq_f32(v56, vmulq_lane_f32(vaddq_f32(v55, vmulq_lane_f32(v53, *(float32x2_t *)v50.i8, 1)), *(float32x2_t *)v50.i8, 1));
          v49.i64[1] = v57.i64[1];
          v50.i64[1] = v58.i64[1];
          v59 = (float32x4_t)vbslq_s8((int8x16_t)v40, v49, (int8x16_t)vaddq_f32(v56, vmulq_laneq_f32((float32x4_t)v49, v57, 2)));
          v60 = (float32x4_t)vbslq_s8((int8x16_t)v40, v50, (int8x16_t)vaddq_f32(v56, vmulq_laneq_f32((float32x4_t)v50, v58, 2)));
          v61 = (int32x4_t)vmulq_lane_f32(v59, *(float32x2_t *)v59.f32, 1);
          v62 = (int32x4_t)vmulq_lane_f32(v60, *(float32x2_t *)v60.f32, 1);
          v63 = (int32x4_t)vbslq_s8((int8x16_t)v40, (int8x16_t)v61, (int8x16_t)vsubq_f32(v55, (float32x4_t)vrev64q_s32(v61)));
          v64 = vbslq_s8((int8x16_t)v40, (int8x16_t)v62, (int8x16_t)vsubq_f32(v55, (float32x4_t)vrev64q_s32(v62)));
          v65 = vsubq_f32(v33, v35);
          v66 = vsubq_f32(v34, v36);
          v35.i64[0] = v31.i64[0];
          v35.i64[1] = v65.i64[1];
          v36.i64[0] = v32.i64[0];
          v36.i64[1] = v66.i64[1];
          v68 = *(float32x4_t *)(v19 + 192);
          v67 = *(int8x16_t *)(v19 + 208);
          v69 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, v35), vextq_s8(v9, (int8x16_t)v63, 0xCuLL), (int8x16_t)vdupq_lane_s64(v63.i64[0], 0));
          v40.i64[0] = v31.i64[0];
          v40.i64[1] = vdupq_laneq_s64(v69, 1).u64[0];
          v70 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, v36), vextq_s8(v9, v64, 0xCuLL), (int8x16_t)vdupq_lane_s64(v64.i64[0], 0));
          v63.i64[0] = v32.i64[0];
          v63.i64[1] = vdupq_laneq_s64((int64x2_t)v70, 1).u64[0];
          v31.i64[1] = v69.i64[1];
          v71 = (int32x4_t)vbslq_s8(v67, (int8x16_t)vsubq_f32(v68, (float32x4_t)vrev64q_s32(v40)), (int8x16_t)v31);
          v32.i64[1] = v70.i64[1];
          v72 = (int32x4_t)vbslq_s8(v67, (int8x16_t)vsubq_f32(v68, (float32x4_t)vrev64q_s32(v63)), (int8x16_t)v32);
          v74 = *(float32x4_t *)(v19 + 224);
          v73 = *(int8x16_t *)(v19 + 240);
          v64.i64[0] = v71.i64[0];
          v64.i64[1] = vaddq_f32(v74, vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, (float32x4_t)vextq_s8(*(int8x16_t *)&v71, *(int8x16_t *)&v71, 8uLL)), (int8x16_t)vrev64q_s32(v71), *(int8x16_t *)&v71), *(float32x4_t *)v19, 3)).i64[1];
          v70.i64[0] = v72.i64[0];
          v70.i64[1] = vaddq_f32(v74, vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, (float32x4_t)vextq_s8(*(int8x16_t *)&v72, *(int8x16_t *)&v72, 8uLL)), (int8x16_t)vrev64q_s32(v72), *(int8x16_t *)&v72), *(float32x4_t *)v19, 3)).i64[1];
          v75 = vcvtq_f32_s32(vcvtq_s32_f32((float32x4_t)v64));
          v76 = vcvtq_f32_s32(vcvtq_s32_f32(v70));
          v77 = vsubq_f32(v75, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v75, (float32x4_t)v64), v73, (int8x16_t)0));
          v78 = vnegq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v19, *(int8x16_t *)v19, 4uLL));
          v77.i64[0] = vmulq_laneq_f32(v78, v77, 2).u64[0];
          v78.i64[0] = vmulq_laneq_f32(v78, vsubq_f32(v76, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v76, v70), v73, (int8x16_t)0)), 2).u64[0];
          v80 = *(int8x16_t *)(v19 + 256);
          v79 = *(int8x16_t *)(v19 + 272);
          v81 = vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v77.f32, 1), v80);
          v82 = vandq_s8((int8x16_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1), v80);
          v71.i64[1] = vsubq_f32(*(float32x4_t *)&v73, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v81, 0)).i64[1];
          v72.i64[1] = vsubq_f32(*(float32x4_t *)&v73, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v82, 0)).i64[1];
          v83 = vextq_s8(v81, v81, 0xCuLL);
          v84 = vextq_s8(v82, v82, 0xCuLL);
          v85 = *(int8x16_t *)(v19 + 288);
          v86 = *(int8x16_t *)(v19 + 304);
          v87 = (int32x4_t)vbslq_s8(v85, (int8x16_t)vsubq_f32((float32x4_t)v79, (float32x4_t)v83), (int8x16_t)v71);
          v88 = (int32x4_t)vbslq_s8(v85, (int8x16_t)vsubq_f32((float32x4_t)v79, (float32x4_t)v84), (int8x16_t)v72);
          v89 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, (float32x4_t)v87), (int8x16_t)vrev64q_s32(v87), v83);
          v90 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, (float32x4_t)v88), (int8x16_t)vrev64q_s32(v88), v84);
          v91.i64[0] = v87.i64[0];
          v91.i64[1] = vdupq_laneq_s64((int64x2_t)v89, 1).u64[0];
          v92.i64[0] = v88.i64[0];
          v92.i64[1] = vdupq_laneq_s64((int64x2_t)v90, 1).u64[0];
          v87.i64[1] = v89.i64[1];
          v88.i64[1] = v90.i64[1];
          v93 = (int32x4_t)vbslq_s8(v67, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32(v91), (float32x4_t)v86), (int8x16_t)v87);
          v94 = (int32x4_t)vbslq_s8(v67, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32(v92), (float32x4_t)v86), (int8x16_t)v88);
          v95 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, (float32x4_t)vrev64q_s32(v93)), (int8x16_t)vsubq_f32((float32x4_t)v86, v89), (int8x16_t)v93);
          v96.i64[0] = v93.i64[0];
          v96.i64[1] = vdupq_laneq_s64((int64x2_t)v95, 1).u64[0];
          v97 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v68, (float32x4_t)vrev64q_s32(v94)), (int8x16_t)vsubq_f32((float32x4_t)v86, v90), (int8x16_t)v94);
          v98.i64[0] = v94.i64[0];
          v98.i64[1] = vdupq_laneq_s64((int64x2_t)v97, 1).u64[0];
          v93.i64[1] = v95.i64[1];
          v99 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32((float32x4_t)vrev64q_s32(v96), v95, 2), (int8x16_t)v93);
          v94.i64[1] = v97.i64[1];
          v100 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32((float32x4_t)vrev64q_s32(v98), v97, 2), (int8x16_t)v94);
          v101 = vmulq_laneq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v99, 1), v99, 3);
          v102 = vmulq_laneq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v100, 1), v100, 3);
          v103 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v99), v101.f32[0]), (int8x16_t)v93);
          v104 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v100), v102.f32[0]), (int8x16_t)v94);
          v105 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32(v103, v103, 2), (int8x16_t)v93);
          v106 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32(v104, v104, 2), (int8x16_t)v94);
          v107 = *(float32x4_t *)(v19 + 320);
          v108 = *(int8x16_t *)(v19 + 336);
          v109 = vaddq_f32(vmulq_laneq_f32(v107, v105, 3), vaddq_f32(vmulq_laneq_f32(v101, v107, 2), (float32x4_t)vdupq_laneq_s64((int64x2_t)v105, 1)));
          v110 = vaddq_f32(vmulq_laneq_f32(v107, v106, 3), vaddq_f32(vmulq_laneq_f32(v102, v107, 2), (float32x4_t)vdupq_laneq_s64((int64x2_t)v106, 1)));
          v111 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32(v105, v105, 2), (int8x16_t)v93);
          v112 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32(v106, v106, 2), (int8x16_t)v94);
          v113 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32(v111, v111, 2), (int8x16_t)v93);
          v114 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32(v112, v112, 2), (int8x16_t)v94);
          v109.i64[0] = vaddq_f32(v109, vmulq_laneq_f32((float32x4_t)v86, v113, 3)).u64[0];
          v91.i64[0] = v109.i64[0];
          v91.i64[1] = v81.i64[1];
          v110.i64[0] = vaddq_f32(v110, vmulq_laneq_f32((float32x4_t)v86, v114, 3)).u64[0];
          v115 = vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32(v113, v113, 2), (int8x16_t)v93);
          v116 = vbslq_s8(v67, (int8x16_t)vmulq_laneq_f32(v114, v114, 2), (int8x16_t)v94);
          v96.i64[0] = v110.i64[0];
          v96.i64[1] = v82.i64[1];
          v115.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v109, 0), vmulq_laneq_f32(vmulq_laneq_f32(*(float32x4_t *)&v115, *(float32x4_t *)&v115, 3), v107, 3)).i64[1];
          v116.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v110, 0), vmulq_laneq_f32(vmulq_laneq_f32(*(float32x4_t *)&v116, *(float32x4_t *)&v116, 3), v107, 3)).i64[1];
          v109.i64[1] = vdupq_laneq_s64((int64x2_t)v81, 1).u64[0];
          v110.i64[1] = vdupq_laneq_s64((int64x2_t)v82, 1).u64[0];
          v117 = (int32x4_t)vbslq_s8(v85, (int8x16_t)v91, (int8x16_t)vsubq_f32((float32x4_t)v79, (float32x4_t)vrev64q_s32((int32x4_t)v109)));
          v118 = (int32x4_t)vbslq_s8(v85, (int8x16_t)v96, (int8x16_t)vsubq_f32((float32x4_t)v79, (float32x4_t)vrev64q_s32((int32x4_t)v110)));
          v113.i64[0] = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v117, v9, 4uLL), v107).u64[0];
          v114.i64[0] = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v118, v9, 4uLL), v107).u64[0];
          v109.i64[0] = vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL).u64[0];
          v110.i64[0] = vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL).u64[0];
          *(int8x8_t *)v96.i8 = vext_s8(*(int8x8_t *)v113.f32, *(int8x8_t *)v109.f32, 4uLL);
          *(int8x8_t *)v109.f32 = vext_s8(*(int8x8_t *)v109.f32, *(int8x8_t *)v113.f32, 4uLL);
          v109.i64[1] = v96.i64[0];
          *(int8x8_t *)v96.i8 = vext_s8(*(int8x8_t *)v114.f32, *(int8x8_t *)v110.f32, 4uLL);
          *(int8x8_t *)v110.f32 = vext_s8(*(int8x8_t *)v110.f32, *(int8x8_t *)v114.f32, 4uLL);
          v110.i64[1] = v96.i64[0];
          v119 = (int8x16_t)vcgtq_f32(v109, v68);
          v120 = vbslq_s8((int8x16_t)vcgtq_f32(v110, v68), (int8x16_t)vrev64q_s32(v118), (int8x16_t)v118);
          v118.i64[0] = v113.i64[0];
          v118.i64[1] = vbslq_s8(v119, (int8x16_t)vrev64q_s32(v117), *(int8x16_t *)&v117).i64[1];
          v117.i64[0] = v114.i64[0];
          v117.i64[1] = v120.i64[1];
          v121 = (int64x2_t)vmulq_f32((float32x4_t)v118, (float32x4_t)v118);
          v118.i64[0] = v113.i64[0];
          v118.i64[1] = v121.i64[1];
          v122 = (int64x2_t)vmulq_f32((float32x4_t)v117, (float32x4_t)v117);
          v119.i64[0] = v114.i64[0];
          v119.i64[1] = v122.i64[1];
          v113.i64[1] = vdupq_laneq_s64(v121, 1).u64[0];
          v114.i64[1] = vdupq_laneq_s64(v122, 1).u64[0];
          v123 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vaddq_f32(v74, vmulq_f32(v56, (float32x4_t)vrev64q_s32((int32x4_t)v113))), (int8x16_t)v118);
          v124 = (float32x4_t)vbslq_s8(v67, (int8x16_t)vaddq_f32(v74, vmulq_f32(v56, (float32x4_t)vrev64q_s32((int32x4_t)v114))), v119);
          v125 = (int8x16_t)vaddq_f32(v55, vmulq_laneq_f32(v123, v123, 2));
          v126 = (int8x16_t)vaddq_f32(v55, vmulq_laneq_f32(v124, v124, 2));
          v127 = (float32x4_t)vbslq_s8(v67, v125, (int8x16_t)v118);
          v128 = (float32x4_t)vbslq_s8(v67, v126, v119);
          v129 = (int8x16_t)vcgtq_f32(v127, (float32x4_t)v73);
          v130 = (int8x16_t)vaddq_f32(v51, vmulq_laneq_f32((float32x4_t)vbslq_s8(v67, (int8x16_t)vaddq_f32(v52, vmulq_laneq_f32(v127, v127, 2)), v115), v127, 2));
          v131 = (int8x16_t)vaddq_f32(v51, vmulq_laneq_f32((float32x4_t)vbslq_s8(v67, (int8x16_t)vaddq_f32(v52, vmulq_laneq_f32(v128, v128, 2)), v116), v128, 2));
          v132 = vbslq_s8(v67, (int8x16_t)vmulq_lane_f32((float32x4_t)vbslq_s8(v67, v130, v115), (float32x2_t)*(_OWORD *)&vbslq_s8(v129, v79, v86), 1), v115);
          v133 = vbslq_s8(v67, (int8x16_t)vmulq_lane_f32((float32x4_t)vbslq_s8(v67, v131, v116), (float32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v128, (float32x4_t)v73), v79, v86), 1), v116);
          v134 = vbslq_s8(v108, (int8x16_t)vmulq_laneq_f32((float32x4_t)v132, (float32x4_t)v132, 2), v132);
          v135 = vbslq_s8(v108, (int8x16_t)vmulq_laneq_f32((float32x4_t)v133, (float32x4_t)v133, 2), v133);
          v136 = vbslq_s8(v85, (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)vextq_s8(v132, v132, 4uLL), *(float32x2_t *)v132.i8, 1), vmulq_n_f32((float32x4_t)v134, *(float *)v134.i32)), v134);
          v137 = vbslq_s8(v85, (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)vextq_s8(v133, v133, 4uLL), *(float32x2_t *)v133.i8, 1), vmulq_n_f32((float32x4_t)v135, *(float *)v135.i32)), v135);
          *(int32x2_t *)v136.i8 = vzip1_s32((int32x2_t)vsub_f32(vmul_laneq_f32(*(float32x2_t *)v136.i8, (float32x4_t)v136, 3), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v136.i8, 1)), (int32x2_t)*(_OWORD *)&vextq_s8(v136, v136, 8uLL));
          *(int32x2_t *)v137.i8 = vzip1_s32((int32x2_t)vsub_f32(vmul_laneq_f32(*(float32x2_t *)v137.i8, (float32x4_t)v137, 3), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v137.i8, 1)), (int32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL));
          v138 = *(int8x16_t *)(v19 + 352);
          v139 = *(int8x16_t *)(v19 + 368);
          v140 = (int8x16_t)vmulq_f32(v26, (float32x4_t)vdupq_lane_s64(vandq_s8(v138, v136).i64[0], 0));
          v141 = (int8x16_t)vmulq_f32(v26, (float32x4_t)vdupq_lane_s64(vandq_s8(v138, v137).i64[0], 0));
          *(int8x8_t *)v138.i8 = vqtbl1_s8(v140, *(int8x8_t *)v139.i8);
          v26.i64[0] = vextq_s8(v139, v139, 8uLL).u64[0];
          *(int8x8_t *)v139.i8 = vqtbl1_s8(v141, *(int8x8_t *)v139.i8);
          v142 = *(int8x16_t *)(v19 + 384);
          *(int8x8_t *)v125.i8 = vqtbl1_s8(v140, *(int8x8_t *)v142.i8);
          v85.i64[0] = vextq_s8(v142, v142, 8uLL).u64[0];
          *(int8x8_t *)v142.i8 = vqtbl1_s8(v141, *(int8x8_t *)v142.i8);
          *(float32x2_t *)v140.i8 = vadd_f32((float32x2_t)vqtbl1_s8(v140, *(int8x8_t *)v26.f32), (float32x2_t)vqtbl1_s8(v140, *(int8x8_t *)v85.i8));
          *(float32x2_t *)v141.i8 = vadd_f32((float32x2_t)vqtbl1_s8(v141, *(int8x8_t *)v26.f32), (float32x2_t)vqtbl1_s8(v141, *(int8x8_t *)v85.i8));
          v140.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v138.i8, *(float32x2_t *)v125.i8);
          v141.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v139.i8, *(float32x2_t *)v142.i8);
          v143 = vaddq_f32(*(float32x4_t *)v19, (float32x4_t)v140);
          v144 = vaddq_f32(*(float32x4_t *)v19, (float32x4_t)v141);
          v145 = *((int *)a2 + 22);
          v146 = vsubq_f32(v143, (float32x4_t)v9);
          v147 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v148 = vaddq_s32(vcvtq_s32_f32(v146), vcltzq_f32(v146));
            v149 = (float32x2_t)vsubq_f32(v146, vcvtq_f32_s32(v148)).u64[0];
            v150 = (float32x4_t *)(v147 + 16 * (v148.i32[0] + v148.i32[1] * (int)v145));
            v151 = vaddq_f32(*v150, vmulq_n_f32(vsubq_f32(v150[1], *v150), v149.f32[0]));
            v152 = vaddq_f32(v151, vmulq_lane_f32(vsubq_f32(vaddq_f32(v150[v145], vmulq_n_f32(vsubq_f32(v150[(int)v145 + 1], v150[v145]), v149.f32[0])), v151), v149, 1));
            v153 = vsubq_f32(v144, (float32x4_t)v9);
            v154 = vaddq_s32(vcvtq_s32_f32(v153), vcltzq_f32(v153));
            v153.i64[0] = vsubq_f32(v153, vcvtq_f32_s32(v154)).u64[0];
            v155 = (float32x4_t *)(v147 + 16 * (v154.i32[0] + v154.i32[1] * (int)v145));
            v156 = vaddq_f32(*v155, vmulq_n_f32(vsubq_f32(v155[1], *v155), v153.f32[0]));
            v157 = vaddq_f32(v156, vmulq_lane_f32(vsubq_f32(vaddq_f32(v155[v145], vmulq_n_f32(vsubq_f32(v155[(int)v145 + 1], v155[v145]), v153.f32[0])), v156), *(float32x2_t *)v153.f32, 1));
          }
          else
          {
            v158 = vaddq_f32(v146, v13);
            v159 = vcvtq_s32_f32(v158);
            v158.i64[0] = vaddq_s32(v159, vcgtq_f32(vcvtq_f32_s32(v159), v158)).u64[0];
            v152 = *(float32x4_t *)(v147 + 16 * (v158.i32[0] + v158.i32[1] * (int)v145));
            v160 = vaddq_f32(vsubq_f32(v144, (float32x4_t)v9), v13);
            v161 = vcvtq_s32_f32(v160);
            v160.i64[0] = vaddq_s32(v161, vcgtq_f32(vcvtq_f32_s32(v161), v160)).u64[0];
            v157 = *(float32x4_t *)(v147 + 16 * (v160.i32[0] + v160.i32[1] * (int)v145));
          }
          v162 = (float32x4_t *)(v11 + 16 * v15);
          *v162 = v152;
          v162[1] = v157;
          v17 = vaddq_f32(v18, (float32x4_t)xmmword_1B304F230);
          v15 += 2;
          v16 -= 2;
        }
        while (v16 > 1);
        v15 = v15;
      }
      if ((int)v15 < v10)
      {
        v163 = *((_QWORD *)this + 51);
        v164 = vmulq_f32(*(float32x4_t *)(v163 + 16), (float32x4_t)vdupq_lane_s64(vsubq_f32(v17, *(float32x4_t *)v163).i64[0], 0));
        v165 = (int8x16_t)vaddq_f32(v164, (float32x4_t)vrev64q_s32((int32x4_t)v164));
        v166 = *(int8x16_t *)(v163 + 48);
        *(int8x8_t *)v167.i8 = vqtbl1_s8(v165, *(int8x8_t *)v166.i8);
        v167.u64[1] = (unint64_t)vqtbl1_s8(v165, (int8x8_t)*(_OWORD *)&vextq_s8(v166, v166, 8uLL));
        v168 = *(float32x4_t *)(v163 + 80);
        v169 = (int32x4_t)vandq_s8(*(int8x16_t *)(v163 + 64), v167);
        v170 = (float32x4_t)vrev64q_s32(v169);
        v171 = (float32x4_t)vextq_s8((int8x16_t)v169, (int8x16_t)v169, 0xCuLL);
        v172 = (float32x4_t)vrev64q_s32((int32x4_t)vmaxq_f32(v170, v171));
        v173 = *(float32x4_t *)(v163 + 96);
        v174 = *(int8x16_t *)(v163 + 112);
        v175 = vminq_f32(vmaxq_f32(vrecpeq_f32(v172), v168), v173);
        v176 = vminq_f32(vmaxq_f32(vmulq_f32(v175, vrecpsq_f32(v172, v175)), v168), v173);
        v177 = (float32x4_t)vbslq_s8(v174, (int8x16_t)vminq_f32(v170, v171), (int8x16_t)vmulq_f32(v176, vrecpsq_f32(v172, v176)));
        v178 = (int32x4_t)vmulq_lane_f32(v177, *(float32x2_t *)v177.f32, 1);
        v179 = vbslq_s8(v174, (int8x16_t)v178, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32(v178), *(float *)v178.i32));
        v180 = *(float32x4_t *)(v163 + 128);
        v181 = *(float32x4_t *)(v163 + 144);
        v182 = vmulq_lane_f32(vaddq_f32(v181, vmulq_lane_f32(vaddq_f32(v168, vmulq_f32(v180, (float32x4_t)vextq_s8(v9, v179, 0xCuLL))), *(float32x2_t *)v179.i8, 1)), *(float32x2_t *)v179.i8, 1);
        v183 = *(float32x4_t *)(v163 + 160);
        v184 = *(float32x4_t *)(v163 + 176);
        v185 = vaddq_f32(v184, vmulq_lane_f32(vaddq_f32(v183, v182), *(float32x2_t *)v179.i8, 1));
        v179.i64[1] = v185.i64[1];
        v186 = (float32x4_t)vbslq_s8(v174, v179, (int8x16_t)vaddq_f32(v184, vmulq_laneq_f32((float32x4_t)v179, v185, 2)));
        v187 = (int32x4_t)vmulq_lane_f32(v186, *(float32x2_t *)v186.f32, 1);
        v188 = (int32x4_t)vbslq_s8(v174, (int8x16_t)v187, (int8x16_t)vsubq_f32(v183, (float32x4_t)vrev64q_s32(v187)));
        v189 = vsubq_f32(v170, v171);
        v171.i64[0] = v169.i64[0];
        v171.i64[1] = v189.i64[1];
        v190 = *(int8x16_t *)(v163 + 192);
        v191 = *(int8x16_t *)(v163 + 208);
        v192 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v190, v171), vextq_s8(v9, (int8x16_t)v188, 0xCuLL), (int8x16_t)vdupq_lane_s64(v188.i64[0], 0));
        v188.i64[0] = v169.i64[0];
        v188.i64[1] = vdupq_laneq_s64(v192, 1).u64[0];
        v169.i64[1] = v192.i64[1];
        v193 = (int32x4_t)vbslq_s8(v191, (int8x16_t)vsubq_f32((float32x4_t)v190, (float32x4_t)vrev64q_s32(v188)), (int8x16_t)v169);
        v194 = *(float32x4_t *)(v163 + 224);
        v195 = *(int8x16_t *)(v163 + 240);
        v196.i64[0] = v193.i64[0];
        v196.i64[1] = vaddq_f32(v194, vmulq_laneq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)&v190, (float32x4_t)vextq_s8(*(int8x16_t *)&v193, *(int8x16_t *)&v193, 8uLL)), (int8x16_t)vrev64q_s32(v193), *(int8x16_t *)&v193), *(float32x4_t *)v163, 3)).i64[1];
        v197 = vcvtq_f32_s32(vcvtq_s32_f32(v196));
        v198 = *(int8x16_t *)(v163 + 272);
        v199 = vandq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_laneq_f32(vnegq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v163, *(int8x16_t *)v163, 4uLL)), vsubq_f32(v197, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v197, v196), v195, (int8x16_t)0)), 2), 1), *(int8x16_t *)(v163 + 256));
        v193.i64[1] = vsubq_f32(*(float32x4_t *)&v195, (float32x4_t)vdupq_lane_s64(*(uint64_t *)&v199, 0)).i64[1];
        v200 = vextq_s8(v199, v199, 0xCuLL);
        v201 = *(int8x16_t *)(v163 + 288);
        v202 = *(int8x16_t *)(v163 + 304);
        v203 = (int32x4_t)vbslq_s8(v201, (int8x16_t)vsubq_f32((float32x4_t)v198, (float32x4_t)v200), (int8x16_t)v193);
        v204 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v190, (float32x4_t)v203), (int8x16_t)vrev64q_s32(v203), v200);
        v205.i64[0] = v203.i64[0];
        v205.i64[1] = vdupq_laneq_s64((int64x2_t)v204, 1).u64[0];
        v203.i64[1] = v204.i64[1];
        v206 = (int32x4_t)vbslq_s8(v191, (int8x16_t)vsubq_f32((float32x4_t)vrev64q_s32(v205), (float32x4_t)v202), (int8x16_t)v203);
        v207 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v190, (float32x4_t)vrev64q_s32(v206)), (int8x16_t)vsubq_f32((float32x4_t)v202, v204), (int8x16_t)v206);
        v208.i64[0] = v206.i64[0];
        v208.i64[1] = vdupq_laneq_s64((int64x2_t)v207, 1).u64[0];
        v206.i64[1] = v207.i64[1];
        v209 = (float32x4_t)vbslq_s8(v191, (int8x16_t)vmulq_laneq_f32((float32x4_t)vrev64q_s32(v208), v207, 2), (int8x16_t)v206);
        v210 = vmulq_laneq_f32((float32x4_t)vdupq_laneq_s64((int64x2_t)v209, 1), v209, 3);
        v211 = (float32x4_t)vbslq_s8(v191, (int8x16_t)vmulq_n_f32((float32x4_t)vrev64q_s32((int32x4_t)v209), v210.f32[0]), (int8x16_t)v206);
        v212 = (float32x4_t)vbslq_s8(v191, (int8x16_t)vmulq_laneq_f32(v211, v211, 2), (int8x16_t)v206);
        v213 = *(float32x4_t *)(v163 + 320);
        v214 = vaddq_f32(vmulq_laneq_f32(v213, v212, 3), vaddq_f32(vmulq_laneq_f32(v210, v213, 2), (float32x4_t)vdupq_laneq_s64((int64x2_t)v212, 1)));
        v215 = (float32x4_t)vbslq_s8(v191, (int8x16_t)vmulq_laneq_f32(v212, v212, 2), (int8x16_t)v206);
        v216 = (int32x4_t)vbslq_s8(v191, (int8x16_t)vmulq_laneq_f32(v215, v215, 2), (int8x16_t)v206);
        v214.i64[0] = vaddq_f32(v214, vmulq_laneq_f32((float32x4_t)v202, (float32x4_t)v216, 3)).u64[0];
        v217 = vbslq_s8(v191, (int8x16_t)vmulq_laneq_f32((float32x4_t)v216, (float32x4_t)v216, 2), (int8x16_t)v206);
        v217.i64[1] = vaddq_f32((float32x4_t)vdupq_lane_s64(*(uint64_t *)&v214, 0), vmulq_laneq_f32(vmulq_laneq_f32(*(float32x4_t *)&v217, *(float32x4_t *)&v217, 3), v213, 3)).i64[1];
        v216.i64[0] = v214.i64[0];
        v216.i64[1] = v199.i64[1];
        v214.i64[1] = vdupq_laneq_s64((int64x2_t)v199, 1).u64[0];
        v218 = (int32x4_t)vbslq_s8(v201, (int8x16_t)v216, (int8x16_t)vsubq_f32((float32x4_t)v198, (float32x4_t)vrev64q_s32((int32x4_t)v214)));
        v216.i64[0] = vsubq_f32((float32x4_t)vextq_s8((int8x16_t)v218, v9, 4uLL), v213).u64[0];
        v214.i64[0] = vextq_s8((int8x16_t)v218, (int8x16_t)v218, 8uLL).u64[0];
        *(int8x8_t *)v208.i8 = vext_s8(*(int8x8_t *)v216.i8, *(int8x8_t *)v214.f32, 4uLL);
        *(int8x8_t *)v214.f32 = vext_s8(*(int8x8_t *)v214.f32, *(int8x8_t *)v216.i8, 4uLL);
        v214.i64[1] = v208.i64[0];
        v219 = vbslq_s8((int8x16_t)vcgtq_f32(v214, (float32x4_t)v190), (int8x16_t)vrev64q_s32(v218), (int8x16_t)v218);
        v190.i64[0] = v216.i64[0];
        v190.i64[1] = v219.i64[1];
        v220 = (int64x2_t)vmulq_f32((float32x4_t)v190, (float32x4_t)v190);
        v190.i64[0] = v216.i64[0];
        v190.i64[1] = v220.i64[1];
        v216.i64[1] = vdupq_laneq_s64(v220, 1).u64[0];
        v221 = (float32x4_t)vbslq_s8(v191, (int8x16_t)vaddq_f32(v194, vmulq_f32(v184, (float32x4_t)vrev64q_s32(v216))), v190);
        v222 = (float32x4_t)vbslq_s8(v191, (int8x16_t)vaddq_f32(v183, vmulq_laneq_f32(v221, v221, 2)), v190);
        v223 = vbslq_s8(v191, (int8x16_t)vmulq_lane_f32((float32x4_t)vbslq_s8(v191, (int8x16_t)vaddq_f32(v180, vmulq_laneq_f32((float32x4_t)vbslq_s8(v191, (int8x16_t)vaddq_f32(v181, vmulq_laneq_f32(v222, v222, 2)), v217), v222, 2)), v217), (float32x2_t)*(_OWORD *)&vbslq_s8((int8x16_t)vcgtq_f32(v222, (float32x4_t)v195), v198,
                                                         v202),
                              1),
                 v217);
        v224 = vbslq_s8(*(int8x16_t *)(v163 + 336), (int8x16_t)vmulq_laneq_f32((float32x4_t)v223, (float32x4_t)v223, 2), v223);
        v225 = vbslq_s8(v201, (int8x16_t)vaddq_f32(vmulq_lane_f32((float32x4_t)vextq_s8(v223, v223, 4uLL), *(float32x2_t *)v223.i8, 1), vmulq_n_f32((float32x4_t)v224, *(float *)v224.i32)), v224);
        *(int32x2_t *)v225.i8 = vzip1_s32((int32x2_t)vsub_f32(vmul_laneq_f32(*(float32x2_t *)v225.i8, (float32x4_t)v225, 3), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v225.i8, 1)), (int32x2_t)*(_OWORD *)&vextq_s8(v225, v225, 8uLL));
        v226 = *(int8x16_t *)(v163 + 368);
        v227 = (int8x16_t)vmulq_f32(*(float32x4_t *)(v163 + 32), (float32x4_t)vdupq_lane_s64(vandq_s8(*(int8x16_t *)(v163 + 352), v225).i64[0], 0));
        *(int8x8_t *)v224.i8 = vqtbl1_s8(v227, *(int8x8_t *)v226.i8);
        v228 = (float32x2_t)vqtbl1_s8(v227, (int8x8_t)*(_OWORD *)&vextq_s8(v226, v226, 8uLL));
        v229 = *(int8x16_t *)(v163 + 384);
        *(int8x8_t *)v221.f32 = vqtbl1_s8(v227, *(int8x8_t *)v229.i8);
        *(float32x2_t *)v227.i8 = vadd_f32(v228, (float32x2_t)vqtbl1_s8(v227, (int8x8_t)*(_OWORD *)&vextq_s8(v229, v229, 8uLL)));
        v227.u64[1] = (unint64_t)vadd_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v221.f32);
        v230 = vaddq_f32(*(float32x4_t *)v163, (float32x4_t)v227);
        v231 = *((int *)a2 + 22);
        v232 = vsubq_f32(v230, (float32x4_t)v9);
        v233 = *((_QWORD *)a2 + 10);
        if (v5)
        {
          v234 = vaddq_s32(vcvtq_s32_f32(v232), vcltzq_f32(v232));
          v235 = (float32x2_t)vsubq_f32(v232, vcvtq_f32_s32(v234)).u64[0];
          v236 = (float32x4_t *)(v233 + 16 * (v234.i32[0] + v234.i32[1] * (int)v231));
          v237 = vaddq_f32(*v236, vmulq_n_f32(vsubq_f32(v236[1], *v236), v235.f32[0]));
          v238 = vaddq_f32(v237, vmulq_lane_f32(vsubq_f32(vaddq_f32(v236[v231], vmulq_n_f32(vsubq_f32(v236[(int)v231 + 1], v236[v231]), v235.f32[0])), v237), v235, 1));
        }
        else
        {
          v239 = vaddq_f32(v232, v13);
          v240 = vcvtq_s32_f32(v239);
          v239.i64[0] = vaddq_s32(v240, vcgtq_f32(vcvtq_f32_s32(v240), v239)).u64[0];
          v238 = *(float32x4_t *)(v233 + 16 * (v239.i32[0] + v239.i32[1] * (int)v231));
        }
        *(float32x4_t *)(v11 + 16 * v15) = v238;
      }
      v14 = vaddq_f32(v14, (float32x4_t)xmmword_1B304F240);
      v11 += v12;
      ++v8;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgciOSKaleidoscope::GetDOD(HgciOSKaleidoscope *this, HGRenderer *a2, int a3, HGRect a4)
{
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a3)
  {
    v4 = &HGRectNull;
  }
  else
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    if ((*(int (**)(HgciOSKaleidoscope *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v7 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      HGRectGrow(v6, v5, v7);
    }
    v4 = &HGRectInfinite;
  }
  return *(_QWORD *)v4;
}

uint64_t HgciOSKaleidoscope::GetROI(HGNode *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t DOD;
  HGNode *Input;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
    return 0;
  Input = HGRenderer::GetInput(a2, this, 0);
  DOD = HGRenderer::GetDOD(a2, Input);
  v9 = v8;
  if ((*(int (**)(HGNode *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v10 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    return HGRectGrow(DOD, v9, v10);
  }
  return DOD;
}

void HgciOSKaleidoscope::HgciOSKaleidoscope(HgciOSKaleidoscope *this)
{
  _QWORD *v2;
  HgciOSKaleidoscope::State *v3;
  double v4;
  uint64_t v5;

  HGNode::HGNode((HGNode *)this);
  *v2 = off_1E64F61A8;
  v3 = (HgciOSKaleidoscope::State *)operator new();
  v4 = HgciOSKaleidoscope::State::State(v3);
  *((_QWORD *)this + 51) = v5;
  (*(void (**)(HgciOSKaleidoscope *, _QWORD, uint64_t, double))(*(_QWORD *)this + 136))(this, 0, 1, v4);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28CD214(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgciOSKaleidoscope::~HgciOSKaleidoscope(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F61A8;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C402BC884A0);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgciOSKaleidoscope::~HgciOSKaleidoscope(this);
  HGObject::operator delete(v1);
}

uint64_t HgciOSKaleidoscope::SetParameter(HgciOSKaleidoscope *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return 1;
}

uint64_t HgciOSKaleidoscope::GetParameter(HgciOSKaleidoscope *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 2)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

double HgciOSKaleidoscope::State::State(HgciOSKaleidoscope::State *this)
{
  double result;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = xmmword_1B30538F0;
  *((_OWORD *)this + 4) = xmmword_1B3053900;
  *((_OWORD *)this + 5) = xmmword_1B3053910;
  *((int32x4_t *)this + 6) = vdupq_n_s32(0x7F7FFFFFu);
  *((_OWORD *)this + 7) = xmmword_1B3050E20;
  *((_OWORD *)this + 8) = xmmword_1B3053920;
  *((_OWORD *)this + 9) = xmmword_1B3053930;
  *((_OWORD *)this + 10) = xmmword_1B3053940;
  *((_OWORD *)this + 11) = xmmword_1B3053950;
  *((_OWORD *)this + 12) = xmmword_1B3053960;
  *((_OWORD *)this + 13) = xmmword_1B3050F70;
  *((_OWORD *)this + 14) = xmmword_1B3053970;
  *((_OWORD *)this + 15) = xmmword_1B3053980;
  *((_OWORD *)this + 16) = xmmword_1B3051020;
  *((_OWORD *)this + 17) = xmmword_1B3053990;
  *((_OWORD *)this + 18) = xmmword_1B3050FE0;
  *((_OWORD *)this + 19) = xmmword_1B30539A0;
  *((_OWORD *)this + 20) = xmmword_1B30539B0;
  *((_OWORD *)this + 21) = xmmword_1B3050FF0;
  *((_OWORD *)this + 22) = xmmword_1B3050FD0;
  *((_OWORD *)this + 23) = xmmword_1B3051000;
  result = 0.0;
  *((_OWORD *)this + 24) = xmmword_1B30539C0;
  return result;
}

uint64_t HgcCamcorder::Setup(HgcCamcorder *this, void *a2)
{
  uint64_t v2;
  __int128 v3;
  float32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  float32x4_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  int8x16_t v19;
  int8x16_t v20;
  __int128 v21;
  int8x16_t v22;
  uint64_t v23;

  v2 = *((_QWORD *)this + 51);
  v3 = *(_OWORD *)(v2 + 224);
  DWORD1(v3) = 0;
  v4 = *(float32x4_t *)(v2 + 272);
  v5 = *(int8x16_t *)(v2 + 288);
  v6 = (int8x16_t)vaddq_f32((float32x4_t)vextq_s8(*(int8x16_t *)v2, *(int8x16_t *)v2, 8uLL), v4);
  v7 = (int8x16_t)vaddq_f32(v4, (float32x4_t)vextq_s8(*(int8x16_t *)(v2 + 16), *(int8x16_t *)(v2 + 16), 4uLL));
  *((int8x8_t *)&v3 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v2 + 304), *(int8x16_t *)(v2 + 304), 8uLL), (int8x8_t)v3);
  *(_OWORD *)(v2 + 32) = v3;
  v8 = *((_QWORD *)this + 51);
  *(_QWORD *)&v3 = 0x3F80000000000000;
  *(_QWORD *)&v9 = 0x3F80000000000000;
  *((int8x8_t *)&v9 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v8 + 304), *(int8x16_t *)(v8 + 304), 8uLL), (int8x8_t)0x3F80000000000000);
  *(_OWORD *)(v8 + 48) = v9;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 64) = vbicq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 256), *(int8x16_t *)(*((_QWORD *)this + 51) + 304));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 80) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 304), vbslq_s8(v5, v6, v7), *(int8x16_t *)(*((_QWORD *)this + 51) + 272));
  v10 = *((_QWORD *)this + 51);
  v11 = *(_OWORD *)(v10 + 224);
  v12 = *(float32x4_t *)(v10 + 272);
  v13 = *(int8x16_t *)(v10 + 288);
  v14 = (int8x16_t)vaddq_f32((float32x4_t)vrev64q_s32(*(int32x4_t *)v10), v12);
  DWORD1(v11) = 0;
  v15 = (int8x16_t)vaddq_f32(v12, *(float32x4_t *)(v10 + 16));
  *((int8x8_t *)&v11 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v10 + 304), *(int8x16_t *)(v10 + 304), 8uLL), (int8x8_t)v11);
  *(_OWORD *)(v10 + 96) = v11;
  v16 = *((_QWORD *)this + 51);
  v12.i64[0] = 0x3F80000000000000;
  *(int8x8_t *)&v12.u32[2] = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v16 + 304), *(int8x16_t *)(v16 + 304), 8uLL), (int8x8_t)0x3F80000000000000);
  *(float32x4_t *)(v16 + 112) = v12;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 128) = vbicq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 256), *(int8x16_t *)(*((_QWORD *)this + 51) + 304));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 144) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 304), vbslq_s8(v13, v14, v15), *(int8x16_t *)(*((_QWORD *)this + 51) + 272));
  v17 = *((_QWORD *)this + 51);
  v18 = *(float32x4_t *)(v17 + 272);
  v19 = (int8x16_t)vaddq_f32(*(float32x4_t *)v17, v18);
  v20 = (int8x16_t)vaddq_f32(v18, (float32x4_t)vrev64q_s32(*(int32x4_t *)(v17 + 16)));
  v21 = *(_OWORD *)(v17 + 224);
  DWORD1(v21) = 0;
  v22 = vbslq_s8(*(int8x16_t *)(v17 + 288), v19, v20);
  *((int8x8_t *)&v21 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v17 + 304), *(int8x16_t *)(v17 + 304), 8uLL), (int8x8_t)v21);
  *(_OWORD *)(v17 + 160) = v21;
  v23 = *((_QWORD *)this + 51);
  *((int8x8_t *)&v3 + 1) = vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)(v23 + 304), *(int8x16_t *)(v23 + 304), 8uLL), (int8x8_t)0x3F80000000000000);
  *(_OWORD *)(v23 + 176) = v3;
  *(int8x16_t *)(*((_QWORD *)this + 51) + 192) = vbicq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 256), *(int8x16_t *)(*((_QWORD *)this + 51) + 304));
  *(int8x16_t *)(*((_QWORD *)this + 51) + 208) = vbslq_s8(*(int8x16_t *)(*((_QWORD *)this + 51) + 304), v22, *(int8x16_t *)(*((_QWORD *)this + 51) + 272));
  return 0;
}

const char *HgcCamcorder::GetProgram(HgcCamcorder *this, HGRenderer *a2)
{
  unsigned int Target;

  Target = HGRenderer::GetTarget(a2, 393216);
  if (Target == 396048)
  {
    if ((*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 20) == 27)
      return "//Metal1.0     \n"
             "//LEN=0000000327\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< half > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const half4 c0 = half4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0.z = (float) hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).z;\n"
             "    output.color0.y = (float) hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy).y;\n"
             "    output.color0.x = (float) hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy).x;\n"
             "    output.color0.w = float(c0.w);\n"
             "    return output;\n"
             "}\n"
             "//MD5=a9130b14:c6e84c05:4c5ae62f:3c843d31\n"
             "//SIG=00400000:00000000:00000000:00000001:0001:0000:0000:0000:0000:0000:000e:0000:0003:01:0:1:0\n";
    else
      return "//Metal1.0     \n"
             "//LEN=000000030b\n"
             "fragment FragmentOut fragmentFunc(VertexInOut frag [[ stage_in ]], \n"
             "    const constant float4* hg_Params [[ buffer(0) ]], \n"
             "    texture2d< float > hg_Texture0 [[ texture(0) ]], \n"
             "    sampler hg_Sampler0 [[ sampler(0) ]])\n"
             "{\n"
             "    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
             "    FragmentOut output;\n"
             "\n"
             "    output.color0.z = hg_Texture0.sample(hg_Sampler0, frag._texCoord0.xy).z;\n"
             "    output.color0.y = hg_Texture0.sample(hg_Sampler0, frag._texCoord1.xy).y;\n"
             "    output.color0.x = hg_Texture0.sample(hg_Sampler0, frag._texCoord2.xy).x;\n"
             "    output.color0.w = c0.w;\n"
             "    return output;\n"
             "}\n"
             "//MD5=01696f73:c6970ec9:64df1cb0:c4ea7b43\n"
             "//SIG=00000000:00000000:00000000:00000000:0001:0000:0000:0000:0000:0000:000e:0000:0003:01:0:1:0\n";
  }
  else if (Target <= 0x6060F
         || (*(unsigned int (**)(HGRenderer *, uint64_t))(*(_QWORD *)a2 + 128))(a2, 46))
  {
    return 0;
  }
  else
  {
    return "//GLfs2.0      \n"
           "//LEN=00000002d2\n"
           "#ifndef GL_ES\n"
           "#define lowp\n"
           "#define mediump\n"
           "#define highp\n"
           "#endif\n"
           "#define defaultp mediump\n"
           "uniform defaultp sampler2D hg_Texture0;\n"
           "varying highp vec4 hg_TexCoord0;\n"
           "varying highp vec4 hg_TexCoord1;\n"
           "varying highp vec4 hg_TexCoord2;\n"
           "void main()\n"
           "{\n"
           "    const defaultp vec4 c0 = vec4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
           "\n"
           "    gl_FragColor.z = texture2D(hg_Texture0, hg_TexCoord0.xy).z;\n"
           "    gl_FragColor.y = texture2D(hg_Texture0, hg_TexCoord1.xy).y;\n"
           "    gl_FragColor.x = texture2D(hg_Texture0, hg_TexCoord2.xy).x;\n"
           "    gl_FragColor.w = c0.w;\n"
           "}\n"
           "//MD5=50d06353:c6362d31:7b4fe509:23026d0d\n"
           "//SIG=00000000:00000000:00000000:00000000:0001:0000:0000:0000:0000:0000:0000:0000:0003:01:0:1:0\n";
  }
}

void HgcCamcorder::InitProgramDescriptor(HgcCamcorder *this, HGProgramDescriptor *a2)
{
  HGProgramDescriptor::SetVisibleShaderWithSource(a2, "HgcCamcorder_hgc_visible", "//Metal1.0     \n//LEN=000000026a\n[[ visible ]] FragmentOut HgcCamcorder_hgc_visible(const constant float4* hg_Params, \n    texture2d< float > hg_Texture0, \n    sampler hg_Sampler0,\n    float4 texCoord0,\n    float4 texCoord1,\n    float4 texCoord2)\n{\n    const float4 c0 = float4(0.000000000, 0.000000000, 0.000000000, 1.000000000);\n"
    "    FragmentOut output;\n"
    "\n"
    "    output.color0.z = hg_Texture0.sample(hg_Sampler0, texCoord0.xy).z;\n"
    "    output.color0.y = hg_Texture0.sample(hg_Sampler0, texCoord1.xy).y;\n"
    "    output.color0.x = hg_Texture0.sample(hg_Sampler0, texCoord2.xy).x;\n"
    "    output.color0.w = c0.w;\n"
    "    return output;\n"
    "}\n");
}

void sub_1B28CD690()
{
  HGProgramDescriptor *v0;

  HGProgramDescriptor::SetFragmentFunctionName(v0, "HgcCamcorder");
}

void sub_1B28CD6A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, __int128 a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void *v34[2];
  char v35;
  __int128 v36;
  uint64_t v37[13];

  *(_DWORD *)(v32 - 64) = 4;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v32 - 56), "FragmentOut");
  *(_OWORD *)(v32 - 32) = xmmword_1B3050DF0;
  HGProgramDescriptor::SetReturnBinding(v31, v32 - 64);
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  memset(v37, 0, 24);
  LODWORD(v33) = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B30514B0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 9;
  std::string::basic_string[abi:ne180100]<0>(v34, "texture2d<float>");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 6;
  std::string::basic_string[abi:ne180100]<0>(v34, "sampler");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  LODWORD(v33) = 8;
  std::string::basic_string[abi:ne180100]<0>(v34, "float4");
  v36 = xmmword_1B3050DF0;
  std::vector<HGBinding>::push_back[abi:ne180100](v37, (uint64_t)&v33);
  if (v35 < 0)
    operator delete(v34[0]);
  HGProgramDescriptor::SetArgumentBindings(v31, v37);
  v33 = (void **)v37;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100](&v33);
}

void sub_1B28CD8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  a12 = &a21;
  std::vector<HGBinding>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void sub_1B28CD900()
{
  uint64_t v0;

  if (*(char *)(v0 - 33) < 0)
    operator delete(*(void **)(v0 - 56));
  JUMPOUT(0x1B28CD8F8);
}

_QWORD *HgcCamcorder::shaderDescription@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "HgcCamcorder [hgc1]");
}

uint64_t HgcCamcorder::BindTexture(HgcCamcorder *this, HGHandler *a2, int a3)
{
  if (a3)
    return 0xFFFFFFFFLL;
  HGHandler::TexCoord(a2, 0, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 32);
  HGHandler::TexCoord(a2, 1, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 96);
  HGHandler::TexCoord(a2, 2, 0, 0, 0);
  if (!(*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 18) + 128))(*((_QWORD *)a2 + 18), 46))
    (*(void (**)(HGHandler *))(*(_QWORD *)a2 + 168))(a2);
  (*(void (**)(HGHandler *, uint64_t))(*(_QWORD *)a2 + 120))(a2, *((_QWORD *)this + 51) + 160);
  return 0;
}

uint64_t HgcCamcorder::Bind(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 192))(a1);
  return 0;
}

uint64_t HgcCamcorder::RenderTile(float32x4_t **this, HGTile *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  float v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  int i;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t v42;
  uint64_t v43;
  int32x4_t v44;
  float32x2_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t *v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t *v56;
  float32x4_t v57;
  float32x4_t v58;
  int32x4_t v59;
  float32x4_t *v60;
  float32x4_t v61;
  int8x16_t v62;
  int32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  int8x16_t v66;
  int32x4_t v67;
  float32x4_t *v68;
  float32x4_t v69;
  int8x16_t v70;
  float32x4_t v71;
  int32x4_t v72;
  float32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  int32x4_t v88;
  float32x2_t v89;
  float32x4_t *v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  int32x4_t v94;
  float32x4_t *v95;
  float32x4_t v96;
  int8x16_t v97;
  float32x4_t v98;
  int32x4_t v99;
  float32x4_t *v100;
  float32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  int32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x4_t v107;
  int32x4_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t *v112;
  float32x4_t *v114;
  float32x4_t v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  uint64_t v119;
  int32x4_t v120;
  float32x2_t v121;
  float32x4_t *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  int32x4_t v126;
  float32x4_t *v127;
  float32x4_t v128;
  int8x16_t v129;
  float32x4_t v130;
  int32x4_t v131;
  float32x4_t *v132;
  float32x4_t v133;
  int8x16_t v134;
  float32x4_t v135;
  int32x4_t v136;
  float32x4_t v137;
  int32x4_t v138;
  float32x4_t v139;
  int32x4_t v140;
  int8x16_t v141;

  v4 = HGTile::Renderer(a2);
  v5 = ((uint64_t (*)(float32x4_t **, uint64_t))(*this)[19].i64[1])(this, v4);
  v6 = *((_DWORD *)a2 + 1);
  v7 = *((_DWORD *)a2 + 3) - v6;
  if (v7 >= 1)
  {
    v8 = 0;
    v14.f32[0] = (float)*(int *)a2 + 0.5;
    v9 = (float)v6 + 0.5;
    v10 = this[51];
    v11 = 0uLL;
    v12 = vaddq_f32(v10[5], vaddq_f32(vaddq_f32(vmulq_n_f32(v10[2], v14.f32[0]), vmulq_n_f32(v10[3], v9)), vmulq_f32(v10[4], (float32x4_t)0)));
    v14.f32[1] = v9;
    v14.i32[2] = 0;
    v13 = vaddq_f32(v10[9], vaddq_f32(vaddq_f32(vmulq_n_f32(v10[6], v14.f32[0]), vmulq_n_f32(v10[7], v9)), vmulq_f32(v10[8], (float32x4_t)0)));
    v14.i32[3] = 1.0;
    v15 = *((_DWORD *)a2 + 2) - *(_DWORD *)a2;
    v16 = vaddq_f32(v10[13], vaddq_f32(vaddq_f32(vmulq_n_f32(v10[10], v14.f32[0]), vmulq_n_f32(v10[11], v9)), vmulq_f32(v10[12], (float32x4_t)0)));
    v17 = *((_QWORD *)a2 + 2);
    v18 = 16 * *((int *)a2 + 6);
    __asm { FMOV            V6.4S, #3.0 }
    v24.i64[0] = 0x3F0000003F000000;
    v24.i64[1] = 0x3F0000003F000000;
    do
    {
      v25 = this[51];
      v26 = vaddq_f32(v12, vmulq_f32(v11, v25[3]));
      v27 = vaddq_f32(v13, vmulq_f32(v11, v25[7]));
      v28 = vaddq_f32(v16, vmulq_f32(v11, v25[11]));
      if (v15 < 3)
      {
        v29 = 0;
        v30 = 0uLL;
      }
      else
      {
        v29 = 0;
        v30 = 0uLL;
        for (i = v15; i > 2; i -= 3)
        {
          v32 = this[51];
          v33 = v32[2];
          v34 = vaddq_f32(v26, vmulq_f32(v30, v33));
          v35 = v32[6];
          v36 = vaddq_f32(v27, vmulq_f32(v30, v35));
          v37 = vaddq_f32(v33, v34);
          v38 = vaddq_f32(v35, v36);
          v39 = vaddq_f32(v33, v37);
          v40 = vaddq_f32(v35, v38);
          v41 = *((int *)a2 + 22);
          v42 = vsubq_f32(v34, v14);
          v43 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v44 = vaddq_s32(vcvtq_s32_f32(v42), vcltzq_f32(v42));
            v45 = (float32x2_t)vsubq_f32(v42, vcvtq_f32_s32(v44)).u64[0];
            v46 = (float32x4_t *)(v43 + 16 * (v44.i32[0] + v44.i32[1] * (int)v41));
            v47 = vaddq_f32(*v46, vmulq_n_f32(vsubq_f32(v46[1], *v46), v45.f32[0]));
            v48 = vaddq_f32(v47, vmulq_lane_f32(vsubq_f32(vaddq_f32(v46[v41], vmulq_n_f32(vsubq_f32(v46[(int)v41 + 1], v46[v41]), v45.f32[0])), v47), v45, 1));
            v49 = vsubq_f32(v37, v14);
            v50 = vaddq_s32(vcvtq_s32_f32(v49), vcltzq_f32(v49));
            v49.i64[0] = vsubq_f32(v49, vcvtq_f32_s32(v50)).u64[0];
            v51 = (float32x4_t *)(v43 + 16 * (v50.i32[0] + v50.i32[1] * (int)v41));
            v52 = vaddq_f32(*v51, vmulq_n_f32(vsubq_f32(v51[1], *v51), v49.f32[0]));
            v53 = vaddq_f32(v52, vmulq_lane_f32(vsubq_f32(vaddq_f32(v51[v41], vmulq_n_f32(vsubq_f32(v51[(int)v41 + 1], v51[v41]), v49.f32[0])), v52), *(float32x2_t *)v49.f32, 1));
            v54 = vsubq_f32(v39, v14);
            v55 = vaddq_s32(vcvtq_s32_f32(v54), vcltzq_f32(v54));
            v54.i64[0] = vsubq_f32(v54, vcvtq_f32_s32(v55)).u64[0];
            v56 = (float32x4_t *)(v43 + 16 * (v55.i32[0] + v55.i32[1] * (int)v41));
            v57 = vaddq_f32(*v56, vmulq_n_f32(vsubq_f32(v56[1], *v56), v54.f32[0]));
            v58 = vaddq_f32(v57, vmulq_lane_f32(vsubq_f32(vaddq_f32(v56[v41], vmulq_n_f32(vsubq_f32(v56[(int)v41 + 1], v56[v41]), v54.f32[0])), v57), *(float32x2_t *)v54.f32, 1));
            v62 = (int8x16_t)vsubq_f32(v36, v14);
            v59 = vaddq_s32(vcvtq_s32_f32((float32x4_t)v62), vcltzq_f32((float32x4_t)v62));
            v62.i64[0] = vsubq_f32((float32x4_t)v62, vcvtq_f32_s32(v59)).u64[0];
            v60 = (float32x4_t *)(v43 + 16 * (v59.i32[0] + v59.i32[1] * (int)v41));
            v61 = vaddq_f32(*v60, vmulq_n_f32(vsubq_f32(v60[1], *v60), *(float *)v62.i32));
            v62.i64[0] = vaddq_f32(v61, vmulq_lane_f32(vsubq_f32(vaddq_f32(v60[v41], vmulq_n_f32(vsubq_f32(v60[(int)v41 + 1], v60[v41]), *(float *)v62.i32)), v61), *(float32x2_t *)v62.i8, 1)).u64[0];
            v66 = (int8x16_t)vsubq_f32(v38, v14);
            v63 = vaddq_s32(vcvtq_s32_f32((float32x4_t)v66), vcltzq_f32((float32x4_t)v66));
            v66.i64[0] = vsubq_f32((float32x4_t)v66, vcvtq_f32_s32(v63)).u64[0];
            v64 = (float32x4_t *)(v43 + 16 * (v63.i32[0] + v63.i32[1] * (int)v41));
            v65 = vaddq_f32(*v64, vmulq_n_f32(vsubq_f32(v64[1], *v64), *(float *)v66.i32));
            v66.i64[0] = vaddq_f32(v65, vmulq_lane_f32(vsubq_f32(vaddq_f32(v64[v41], vmulq_n_f32(vsubq_f32(v64[(int)v41 + 1], v64[v41]), *(float *)v66.i32)), v65), *(float32x2_t *)v66.i8, 1)).u64[0];
            v70 = (int8x16_t)vsubq_f32(v40, v14);
            v67 = vaddq_s32(vcvtq_s32_f32((float32x4_t)v70), vcltzq_f32((float32x4_t)v70));
            v70.i64[0] = vsubq_f32((float32x4_t)v70, vcvtq_f32_s32(v67)).u64[0];
            v68 = (float32x4_t *)(v43 + 16 * (v67.i32[0] + v67.i32[1] * (int)v41));
            v69 = vaddq_f32(*v68, vmulq_n_f32(vsubq_f32(v68[1], *v68), *(float *)v70.i32));
            v70.i64[0] = vaddq_f32(v69, vmulq_lane_f32(vsubq_f32(vaddq_f32(v68[v41], vmulq_n_f32(vsubq_f32(v68[(int)v41 + 1], v68[v41]), *(float *)v70.i32)), v69), *(float32x2_t *)v70.i8, 1)).u64[0];
          }
          else
          {
            v71 = vaddq_f32(v42, v24);
            v72 = vcvtq_s32_f32(v71);
            v71.i64[0] = vaddq_s32(v72, vcgtq_f32(vcvtq_f32_s32(v72), v71)).u64[0];
            v48 = *(float32x4_t *)(v43 + 16 * (v71.i32[0] + v71.i32[1] * (int)v41));
            v73 = vaddq_f32(vsubq_f32(v37, v14), v24);
            v74 = vcvtq_s32_f32(v73);
            v73.i64[0] = vaddq_s32(v74, vcgtq_f32(vcvtq_f32_s32(v74), v73)).u64[0];
            v53 = *(float32x4_t *)(v43 + 16 * (v73.i32[0] + v73.i32[1] * (int)v41));
            v75 = vaddq_f32(vsubq_f32(v39, v14), v24);
            v76 = vcvtq_s32_f32(v75);
            v75.i64[0] = vaddq_s32(v76, vcgtq_f32(vcvtq_f32_s32(v76), v75)).u64[0];
            v58 = *(float32x4_t *)(v43 + 16 * (v75.i32[0] + v75.i32[1] * (int)v41));
            v77 = vaddq_f32(vsubq_f32(v36, v14), v24);
            v78 = vcvtq_s32_f32(v77);
            v77.i64[0] = vaddq_s32(v78, vcgtq_f32(vcvtq_f32_s32(v78), v77)).u64[0];
            v62 = *(int8x16_t *)(v43 + 16 * (v77.i32[0] + v77.i32[1] * (int)v41));
            v79 = vaddq_f32(vsubq_f32(v38, v14), v24);
            v80 = vcvtq_s32_f32(v79);
            v79.i64[0] = vaddq_s32(v80, vcgtq_f32(vcvtq_f32_s32(v80), v79)).u64[0];
            v66 = *(int8x16_t *)(v43 + 16 * (v79.i32[0] + v79.i32[1] * (int)v41));
            v81 = vaddq_f32(vsubq_f32(v40, v14), v24);
            v82 = vcvtq_s32_f32(v81);
            v81.i64[0] = vaddq_s32(v82, vcgtq_f32(vcvtq_f32_s32(v82), v81)).u64[0];
            v70 = *(int8x16_t *)(v43 + 16 * (v81.i32[0] + v81.i32[1] * (int)v41));
          }
          v83 = v32[10];
          v84 = vaddq_f32(v28, vmulq_f32(v30, v83));
          v85 = vaddq_f32(v83, v84);
          v86 = vaddq_f32(v83, v85);
          v87 = vsubq_f32(v84, v14);
          if (v5)
          {
            v88 = vaddq_s32(vcvtq_s32_f32(v87), vcltzq_f32(v87));
            v89 = (float32x2_t)vsubq_f32(v87, vcvtq_f32_s32(v88)).u64[0];
            v90 = (float32x4_t *)(v43 + 16 * (v88.i32[0] + v88.i32[1] * (int)v41));
            v91 = vaddq_f32(*v90, vmulq_n_f32(vsubq_f32(v90[1], *v90), v89.f32[0]));
            v92 = (int8x16_t)vaddq_f32(v91, vmulq_lane_f32(vsubq_f32(vaddq_f32(v90[v41], vmulq_n_f32(vsubq_f32(v90[(int)v41 + 1], v90[v41]), v89.f32[0])), v91), v89, 1));
            v93 = vsubq_f32(v85, v14);
            v94 = vaddq_s32(vcvtq_s32_f32(v93), vcltzq_f32(v93));
            v93.i64[0] = vsubq_f32(v93, vcvtq_f32_s32(v94)).u64[0];
            v95 = (float32x4_t *)(v43 + 16 * (v94.i32[0] + v94.i32[1] * (int)v41));
            v96 = vaddq_f32(*v95, vmulq_n_f32(vsubq_f32(v95[1], *v95), v93.f32[0]));
            v97 = (int8x16_t)vaddq_f32(v96, vmulq_lane_f32(vsubq_f32(vaddq_f32(v95[v41], vmulq_n_f32(vsubq_f32(v95[(int)v41 + 1], v95[v41]), v93.f32[0])), v96), *(float32x2_t *)v93.f32, 1));
            v98 = vsubq_f32(v86, v14);
            v99 = vaddq_s32(vcvtq_s32_f32(v98), vcltzq_f32(v98));
            v98.i64[0] = vsubq_f32(v98, vcvtq_f32_s32(v99)).u64[0];
            v100 = (float32x4_t *)(v43 + 16 * (v99.i32[0] + v99.i32[1] * (int)v41));
            v101 = vaddq_f32(*v100, vmulq_n_f32(vsubq_f32(v100[1], *v100), v98.f32[0]));
            v102 = (int8x16_t)vaddq_f32(v101, vmulq_lane_f32(vsubq_f32(vaddq_f32(v100[v41], vmulq_n_f32(vsubq_f32(v100[(int)v41 + 1], v100[v41]), v98.f32[0])), v101), *(float32x2_t *)v98.f32, 1));
          }
          else
          {
            v103 = vaddq_f32(v87, v24);
            v104 = vcvtq_s32_f32(v103);
            v103.i64[0] = vaddq_s32(v104, vcgtq_f32(vcvtq_f32_s32(v104), v103)).u64[0];
            v92 = *(int8x16_t *)(v43 + 16 * (v103.i32[0] + v103.i32[1] * (int)v41));
            v105 = vaddq_f32(vsubq_f32(v85, v14), v24);
            v106 = vcvtq_s32_f32(v105);
            v105.i64[0] = vaddq_s32(v106, vcgtq_f32(vcvtq_f32_s32(v106), v105)).u64[0];
            v97 = *(int8x16_t *)(v43 + 16 * (v105.i32[0] + v105.i32[1] * (int)v41));
            v107 = vaddq_f32(vsubq_f32(v86, v14), v24);
            v108 = vcvtq_s32_f32(v107);
            v107.i64[0] = vaddq_s32(v108, vcgtq_f32(vcvtq_f32_s32(v108), v107)).u64[0];
            v102 = *(int8x16_t *)(v43 + 16 * (v107.i32[0] + v107.i32[1] * (int)v41));
          }
          v62.i64[1] = v48.i64[1];
          v66.i64[1] = v53.i64[1];
          v70.i64[1] = v58.i64[1];
          v30 = vaddq_f32(v30, _Q6);
          v109 = vbslq_s8((int8x16_t)v32[18], v92, v62);
          v110 = vbslq_s8((int8x16_t)v32[18], v97, v66);
          v109.i32[3] = 1.0;
          v111 = vbslq_s8((int8x16_t)v32[18], v102, v70);
          v110.i32[3] = 1.0;
          v111.i32[3] = 1.0;
          v112 = (int8x16_t *)(v17 + 16 * v29);
          *v112 = v109;
          v112[1] = v110;
          v112[2] = v111;
          v29 += 3;
        }
        v29 = v29;
      }
      __asm { FMOV            V20.4S, #1.0 }
      if ((int)v29 < v15)
      {
        do
        {
          v114 = this[51];
          v115 = vaddq_f32(v27, vmulq_f32(v30, v114[6]));
          v116 = vaddq_f32(v28, vmulq_f32(v30, v114[10]));
          v117 = *((int *)a2 + 22);
          v118 = vsubq_f32(vaddq_f32(v26, vmulq_f32(v30, v114[2])), v14);
          v119 = *((_QWORD *)a2 + 10);
          if (v5)
          {
            v120 = vaddq_s32(vcvtq_s32_f32(v118), vcltzq_f32(v118));
            v121 = (float32x2_t)vsubq_f32(v118, vcvtq_f32_s32(v120)).u64[0];
            v122 = (float32x4_t *)(v119 + 16 * (v120.i32[0] + v120.i32[1] * (int)v117));
            v123 = vaddq_f32(*v122, vmulq_n_f32(vsubq_f32(v122[1], *v122), v121.f32[0]));
            v124 = vaddq_f32(v123, vmulq_lane_f32(vsubq_f32(vaddq_f32(v122[v117], vmulq_n_f32(vsubq_f32(v122[(int)v117 + 1], v122[v117]), v121.f32[0])), v123), v121, 1));
            v125 = vsubq_f32(v115, v14);
            v126 = vaddq_s32(vcvtq_s32_f32(v125), vcltzq_f32(v125));
            v125.i64[0] = vsubq_f32(v125, vcvtq_f32_s32(v126)).u64[0];
            v127 = (float32x4_t *)(v119 + 16 * (v126.i32[0] + v126.i32[1] * (int)v117));
            v128 = vaddq_f32(*v127, vmulq_n_f32(vsubq_f32(v127[1], *v127), v125.f32[0]));
            v129.i64[0] = vaddq_f32(v128, vmulq_lane_f32(vsubq_f32(vaddq_f32(v127[v117], vmulq_n_f32(vsubq_f32(v127[(int)v117 + 1], v127[v117]), v125.f32[0])), v128), *(float32x2_t *)v125.f32, 1)).u64[0];
            v129.i64[1] = v124.i64[1];
            v130 = vsubq_f32(v116, v14);
            v131 = vaddq_s32(vcvtq_s32_f32(v130), vcltzq_f32(v130));
            v130.i64[0] = vsubq_f32(v130, vcvtq_f32_s32(v131)).u64[0];
            v132 = (float32x4_t *)(v119 + 16 * (v131.i32[0] + v131.i32[1] * (int)v117));
            v133 = vaddq_f32(*v132, vmulq_n_f32(vsubq_f32(v132[1], *v132), v130.f32[0]));
            v134 = (int8x16_t)vaddq_f32(v133, vmulq_lane_f32(vsubq_f32(vaddq_f32(v132[v117], vmulq_n_f32(vsubq_f32(v132[(int)v117 + 1], v132[v117]), v130.f32[0])), v133), *(float32x2_t *)v130.f32, 1));
          }
          else
          {
            v135 = vaddq_f32(v118, v24);
            v136 = vcvtq_s32_f32(v135);
            v135.i64[0] = vaddq_s32(v136, vcgtq_f32(vcvtq_f32_s32(v136), v135)).u64[0];
            v137 = vaddq_f32(vsubq_f32(v115, v14), v24);
            v138 = vcvtq_s32_f32(v137);
            v137.i64[0] = vaddq_s32(v138, vcgtq_f32(vcvtq_f32_s32(v138), v137)).u64[0];
            v129 = *(int8x16_t *)(v119 + 16 * (v137.i32[0] + v137.i32[1] * (int)v117));
            v129.i64[1] = *(_QWORD *)(v119 + 16 * (v135.i32[0] + v135.i32[1] * (int)v117) + 8);
            v139 = vaddq_f32(vsubq_f32(v116, v14), v24);
            v140 = vcvtq_s32_f32(v139);
            v139.i64[0] = vaddq_s32(v140, vcgtq_f32(vcvtq_f32_s32(v140), v139)).u64[0];
            v134 = *(int8x16_t *)(v119 + 16 * (v139.i32[0] + v139.i32[1] * (int)v117));
          }
          v141 = vbslq_s8((int8x16_t)v114[18], v134, v129);
          v141.i32[3] = 1.0;
          *(int8x16_t *)(v17 + 16 * v29) = v141;
          v30 = vaddq_f32(v30, _Q20);
          ++v29;
        }
        while (v29 < v15);
      }
      v11 = vaddq_f32(v11, _Q20);
      ++v8;
      v17 += v18;
    }
    while (v8 != v7);
  }
  return 0;
}

uint64_t HgcCamcorder::GetDOD(HgcCamcorder *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  const HGTransform *v6;
  uint64_t v8;
  uint64_t v9;
  HGTransformUtils *v10;
  float v11;
  uint64_t DOD;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  HGTransformUtils *v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  HGTransformUtils *v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v29[9];
  HGRect v30;
  HGRect v31;
  HGRect v32;

  if (a3)
    return 0;
  v5 = *(_QWORD *)&a4.var2;
  v6 = *(const HGTransform **)&a4.var0;
  if ((*(int (**)(HgcCamcorder *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
  {
    v8 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
    v6 = (const HGTransform *)HGRectGrow((uint64_t)v6, v5, v8);
    v5 = v9;
  }
  HGTransform::HGTransform((HGTransform *)v29);
  HGTransform::LoadMatrixf(v29, (float32x2_t *)(*((_QWORD *)this + 51) + 32));
  HGTransform::Invert2D((HGTransform *)v29);
  v11 = HGTransformUtils::MinW(v10);
  *(_QWORD *)&v30.var0 = v5;
  DOD = HGTransformUtils::GetDOD((HGTransformUtils *)v29, v6, v30, 0.5, v11);
  v14 = HGRectUnion(0, 0, DOD, v13);
  v16 = v15;
  HGTransform::LoadMatrixf(v29, (float32x2_t *)(*((_QWORD *)this + 51) + 96));
  HGTransform::Invert2D((HGTransform *)v29);
  v18 = HGTransformUtils::MinW(v17);
  *(_QWORD *)&v31.var0 = v5;
  v19 = HGTransformUtils::GetDOD((HGTransformUtils *)v29, v6, v31, 0.5, v18);
  v21 = HGRectUnion(v14, v16, v19, v20);
  v23 = v22;
  HGTransform::LoadMatrixf(v29, (float32x2_t *)(*((_QWORD *)this + 51) + 160));
  HGTransform::Invert2D((HGTransform *)v29);
  v25 = HGTransformUtils::MinW(v24);
  *(_QWORD *)&v32.var0 = v5;
  v26 = HGTransformUtils::GetDOD((HGTransformUtils *)v29, v6, v32, 0.5, v25);
  v4 = HGRectUnion(v21, v23, v26, v27);
  HGTransform::~HGTransform((HGTransform *)v29);
  return v4;
}

void sub_1B28CE4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HgcCamcorder::GetROI(HgcCamcorder *this, HGRenderer *a2, int a3, HGRect a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  HGTransformUtils *v9;
  float v10;
  uint64_t ROI;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  HGTransformUtils *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  HGTransformUtils *v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t v31[9];
  HGRect v32;
  HGRect v33;
  HGRect v34;

  v4 = 0;
  if (!a3)
  {
    v5 = *(_QWORD *)&a4.var2;
    v6 = *(_QWORD *)&a4.var0;
    HGTransform::HGTransform((HGTransform *)v31);
    HGTransform::LoadMatrixf(v31, (float32x2_t *)(*((_QWORD *)this + 51) + 32));
    v10 = HGTransformUtils::MinW(v9);
    *(_QWORD *)&v32.var0 = v5;
    ROI = HGTransformUtils::GetROI((HGTransformUtils *)v31, v6, v32, 0.5, v10);
    v13 = HGRectUnion(0, 0, ROI, v12);
    v15 = v14;
    HGTransform::LoadMatrixf(v31, (float32x2_t *)(*((_QWORD *)this + 51) + 96));
    v17 = HGTransformUtils::MinW(v16);
    *(_QWORD *)&v33.var0 = v5;
    v18 = HGTransformUtils::GetROI((HGTransformUtils *)v31, v6, v33, 0.5, v17);
    v20 = HGRectUnion(v13, v15, v18, v19);
    v22 = v21;
    HGTransform::LoadMatrixf(v31, (float32x2_t *)(*((_QWORD *)this + 51) + 160));
    v24 = HGTransformUtils::MinW(v23);
    *(_QWORD *)&v34.var0 = v5;
    v25 = HGTransformUtils::GetROI((HGTransformUtils *)v31, v6, v34, 0.5, v24);
    v4 = HGRectUnion(v20, v22, v25, v26);
    v28 = v27;
    HGTransform::~HGTransform((HGTransform *)v31);
    if ((*(int (**)(HgcCamcorder *, HGRenderer *))(*(_QWORD *)this + 312))(this, a2) >= 1)
    {
      v29 = HGRectMake4i(0xFFFFFFFF, 0xFFFFFFFF, 1u, 1u);
      return HGRectGrow(v4, v28, v29);
    }
  }
  return v4;
}

void sub_1B28CE64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  HGTransform::~HGTransform((HGTransform *)&a9);
  _Unwind_Resume(a1);
}

void HgcCamcorder::HgcCamcorder(HgcCamcorder *this)
{
  uint64_t v2;
  _OWORD *v3;

  HGNode::HGNode((HGNode *)this);
  *(_QWORD *)v2 = off_1E64F6410;
  *(_DWORD *)(v2 + 416) = 1;
  v3 = (_OWORD *)operator new();
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = xmmword_1B304F230;
  v3[3] = xmmword_1B304F240;
  v3[4] = xmmword_1B304F250;
  v3[5] = xmmword_1B304EFF0;
  v3[6] = xmmword_1B304F230;
  v3[7] = xmmword_1B304F240;
  v3[8] = xmmword_1B304F250;
  v3[9] = xmmword_1B304EFF0;
  v3[10] = xmmword_1B304F230;
  v3[11] = xmmword_1B304F240;
  v3[12] = xmmword_1B304F250;
  v3[13] = xmmword_1B304EFF0;
  v3[14] = xmmword_1B304F230;
  v3[15] = xmmword_1B304F240;
  v3[16] = xmmword_1B304F250;
  v3[17] = xmmword_1B304EFF0;
  v3[18] = xmmword_1B3050E20;
  v3[19] = xmmword_1B3050F80;
  *((_QWORD *)this + 51) = v3;
  (*(void (**)(HgcCamcorder *, _QWORD, uint64_t))(*(_QWORD *)this + 136))(this, 0, 1);
  *((_DWORD *)this + 4) |= 0x601u;
}

void sub_1B28CE744(_Unwind_Exception *a1)
{
  HGNode *v1;

  HGNode::~HGNode(v1);
  _Unwind_Resume(a1);
}

void HgcCamcorder::~HgcCamcorder(HGNode *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E64F6410;
  v2 = *((_QWORD *)this + 51);
  if (v2)
    MEMORY[0x1B5E29170](v2, 0x1000C40B2834900);
  HGNode::~HGNode(this);
}

{
  void *v1;

  HgcCamcorder::~HgcCamcorder(this);
  HGObject::operator delete(v1);
}

uint64_t HgcCamcorder::SetParameter(HgcCamcorder *this, uint64_t a2, float a3, float a4, float a5, float a6, char *a7)
{
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  v7 = *((_QWORD *)this + 51);
  v8 = (float *)(v7 + 16 * a2);
  if (*v8 == a3)
  {
    v9 = v7 + 16 * a2;
    if (*(float *)(v9 + 4) == a4 && *(float *)(v9 + 8) == a5 && *(float *)(v7 + 16 * a2 + 12) == a6)
      return 0;
  }
  *v8 = a3;
  v10 = (float *)(v7 + 16 * a2);
  v10[1] = a4;
  v10[2] = a5;
  v10[3] = a6;
  v11 = 1;
  *((_DWORD *)this + 104) = 1;
  HGNode::ClearBits((HGNode *)this, a2, a7);
  return v11;
}

uint64_t HgcCamcorder::GetParameter(HgcCamcorder *this, unsigned int a2, float *a3)
{
  uint64_t result;
  float *v5;

  if (a2 > 1)
    return 0xFFFFFFFFLL;
  result = 0;
  v5 = (float *)(*((_QWORD *)this + 51) + 16 * a2);
  *a3 = *v5;
  a3[1] = v5[1];
  a3[2] = v5[2];
  a3[3] = v5[3];
  return result;
}

HgcCamcorder *HgcCamcorder::GetOutput(HgcCamcorder *this, void *a2)
{
  if (*((_DWORD *)this + 104))
  {
    HgcCamcorder::Setup(this, a2);
    *((_DWORD *)this + 104) = 0;
  }
  return this;
}

void TXGetGlyphBitmapInfo(uint64_t a1, uint64_t a2, int a3, float64x2_t *a4, double *a5, double *a6, float64x2_t *a7, uint64_t *a8, double a9, double a10, CGGlyph *a11, char a12)
{
  double v21;
  CGGlyph v28;
  float64x2_t v29;
  float64x2_t v30;
  double v31;
  float64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  int64x2_t v43;
  void **HostApplicationDelegate;
  unsigned int MaxGlyphResolution;
  unsigned __int8 v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v52[3];

  v21 = 0.0;
  if (a12)
    v21 = 2.0;
  *(double *)a8 = v21;
  __asm
  {
    FMOV            V1.2D, #1.0
    FMOV            V0.2D, #0.5
  }
  v49 = _Q0;
  v50 = _Q1;
  v48 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
  while (1)
  {
    v28 = *(_WORD *)(a1 + 8);
    *a11 = v28;
    TXCoreTextFont::getMetricsForGlyph(a2, v28, a6, v52, a9);
    v29 = v52[1];
    *a7 = v52[0];
    a7[1] = v29;
    a7[2] = v52[2];
    v30 = a7[1];
    *a4 = *a7;
    a4[1] = v30;
    v31 = *(double *)a8;
    v30.f64[0] = -*(double *)a8;
    *a4 = vsubq_f64(*a4, (float64x2_t)vdupq_lane_s64(*a8, 0));
    v32 = v30.f64[0] - v31;
    v33 = a7->f64[0];
    v34 = ceil(a4[1].f64[0] - v32 + fabs(a7->f64[0]));
    v35 = ceil(a4[1].f64[1] - v32);
    a4[1].f64[0] = v34;
    a4[1].f64[1] = v35;
    v36 = a7[1].f64[0];
    if (v33 >= 0.0)
      v37 = -*(double *)a8;
    else
      v37 = (double)(int)vcvtmd_s64_f64(v33 + 0.5 + 0.0000001) - *(double *)a8;
    a4->f64[0] = v37;
    v38 = v36 * 0.5;
    a4->f64[1] = (double)(int)vcvtmd_s64_f64(a7->f64[1] + 0.5 + 0.0000001) - *(double *)a8;
    v39 = a7->f64[0];
    if (a7->f64[0] < 0.0)
      v39 = -0.0;
    *a5 = v38 + v39;
    if (a3)
    {
      v40 = v50;
      if (a6)
      {
        v40.f64[0] = *a6;
        v40.f64[1] = a6[4];
      }
      v41 = vmulq_n_f64(v40, a10);
      v42 = vrndpq_f64(vaddq_f64(a4[1], vaddq_f64(v41, v41)));
      *(int32x2_t *)&v41.f64[0] = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(vsubq_f64(v49, v41), v48))));
      v43.i64[0] = SLODWORD(v41.f64[0]);
      v43.i64[1] = SHIDWORD(v41.f64[0]);
      *a4 = vaddq_f64(*a4, vcvtq_f64_s64(v43));
      a4[1] = v42;
    }
    HostApplicationDelegate = (void **)OZApplication::getHostApplicationDelegate((OZApplication *)theApp);
    MaxGlyphResolution = OZHostApplicationDelegateHandler::getMaxGlyphResolution(HostApplicationDelegate);
    if (!a6)
      break;
    if (a4[1].f64[0] <= (double)MaxGlyphResolution && a4[1].f64[1] <= (double)MaxGlyphResolution)
      break;
    *a6 = *a6 * 0.9;
    a6[4] = a6[4] * 0.9;
  }
  if ((v47 & 1) == 0
  {
    PCURL::PCURL((PCURL *)&TXGetGlyphBitmapInfo(TXGlyph const*,TXCoreTextFont const*,double,BOOL,double,PCRect<double> &,double &,PCMatrix33Tmpl<double> *,TXGlyphMetrics &,double &,unsigned short &,BOOL)::localizedString, CFSTR("Text Name"));
    __cxa_atexit((void (*)(void *))PCString::~PCString, &TXGetGlyphBitmapInfo(TXGlyph const*,TXCoreTextFont const*,double,BOOL,double,PCRect<double> &,double &,PCMatrix33Tmpl<double> *,TXGlyphMetrics &,double &,unsigned short &,BOOL)::localizedString, &dword_1B2737000);
  }
  OZClampBoundsToMaxTextureSize((OZChannelBase *)&TXGetGlyphBitmapInfo(TXGlyph const*,TXCoreTextFont const*,double,BOOL,double,PCRect<double> &,double &,PCMatrix33Tmpl<double> *,TXGlyphMetrics &,double &,unsigned short &,BOOL)::localizedString, (uint64_t)a4);
}

void sub_1B28CEBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void TXDrawGlyphToBitmap(uint64_t a1, CGColorSpaceRef space, void **a3)
{
  double v5;
  double v6;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  void *v17;
  int v18;
  void *v19;
  size_t v20;
  CGContextRef v21;
  CGContext *v22;
  CGFloat v23;
  CGFloat v24;
  double *v25;
  double v26;
  double v27;
  const __CTFont *CopyWithAttributes;
  double v29;
  float v30;
  float v31;
  float v32;
  double v33;
  CGFloat *v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGAffineTransform transform;
  CGPoint positions;
  uint64_t v42;
  CGRect v43;
  CGRect v44;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return;
  v5 = *(double *)(a1 + 96);
  if (v5 < 0.0 || (v6 = *(double *)(a1 + 104), v6 < 0.0))
  {
    *a3 = 0;
    return;
  }
  v8 = (int)v5;
  v9 = (int)v6;
  v10 = *(unsigned __int8 *)(a1 + 193);
  if (*(_BYTE *)(a1 + 193))
    v11 = 7936;
  else
    v11 = 0;
  if (*(_BYTE *)(a1 + 192))
    v12 = 1;
  else
    v12 = 7;
  v13 = 4 * v8;
  if (!*(_BYTE *)(a1 + 192))
    v13 = (int)v5;
  v14 = v13 << v10;
  if (*(_QWORD *)(a1 + 200))
    v15 = *(_QWORD *)(a1 + 200);
  else
    v15 = v14;
  v16 = *a3;
  v17 = *a3;
  if (!*a3)
  {
    v18 = (int)v6;
    v19 = malloc_type_malloc(v15 * v9, 0x4735C3F6uLL);
    v9 = v18;
    v17 = v19;
    if (!v19)
      goto LABEL_25;
  }
  if (v10)
    v20 = 16;
  else
    v20 = 8;
  v21 = CGBitmapContextCreate(v17, v8, v9, v20, v15, space, v11 | v12);
  if (!v21)
  {
    if (!v16)
      free(v17);
LABEL_25:
    v22 = 0;
    goto LABEL_26;
  }
  v22 = v21;
  *a3 = v17;
LABEL_26:
  v23 = *(double *)(a1 + 96);
  v24 = *(double *)(a1 + 104);
  v25 = *(double **)(a1 + 136);
  if (v25)
  {
    v26 = *v25;
    v27 = v25[4];
  }
  else
  {
    v27 = 1.0;
    v26 = 1.0;
  }
  v43.origin.x = 0.0;
  v43.origin.y = 0.0;
  v43.size.width = *(CGFloat *)(a1 + 96);
  v43.size.height = *(CGFloat *)(a1 + 104);
  CGContextClearRect(v22, v43);
  if (*(_BYTE *)(a1 + 192))
  {
    CGContextSetRGBFillColor(v22, 1.0, 1.0, 1.0, 1.0);
    CGContextSetRGBStrokeColor(v22, 1.0, 1.0, 1.0, 1.0);
  }
  else
  {
    CGContextSetGrayFillColor(v22, 1.0, 1.0);
    CGContextSetGrayStrokeColor(v22, 1.0, 1.0);
  }
  CopyWithAttributes = CTFontCreateCopyWithAttributes(*(CTFontRef *)(a1 + 216), *(CGFloat *)(a1 + 56), 0, 0);
  CGContextSetLineWidth(v22, *(CGFloat *)(a1 + 72));
  CGContextSetMiterLimit(v22, 20.5);
  CGContextSetLineJoin(v22, kCGLineJoinMiter);
  v29 = *(double *)(a1 + 120);
  v30 = v29 - fmin(*(double *)(a1 + 144), 0.0);
  v31 = (float)(int)vcvtmd_s64_f64(v30 + 0.5 + 0.0000001);
  *(float *)&v29 = v29 - *(double *)(a1 + 152);
  v32 = (float)(int)vcvtmd_s64_f64(*(float *)&v29 + 0.5 + 0.0000001);
  if (*(_BYTE *)(a1 + 64))
  {
    v33 = *(double *)(a1 + 72);
    v31 = v31 + (float)(int)vcvtmd_s64_f64(v26 * v33 + 0.5 + 0.0000001);
    v32 = v32 + (float)(int)vcvtmd_s64_f64(v27 * v33 + 0.5 + 0.0000001);
  }
  CGContextSaveGState(v22);
  CGContextTranslateCTM(v22, v31, v32);
  v34 = *(CGFloat **)(a1 + 136);
  if (v34)
  {
    v35 = v34[1];
    v37 = v34[2];
    v36 = v34[3];
    v38 = v34[4];
    v39 = v34[5];
    transform.a = *v34;
    transform.b = v36;
    transform.c = v35;
    transform.d = v38;
    transform.tx = v37;
    transform.ty = v39;
    CGContextConcatCTM(v22, &transform);
  }
  CGContextSetTextDrawingMode(v22, (CGTextDrawingMode)*(unsigned __int8 *)(a1 + 64));
  CGContextSetTextPosition(v22, 0.0, 0.0);
  positions.x = 0.0;
  positions.y = 0.0;
  CTFontDrawGlyphs(CopyWithAttributes, (const CGGlyph *)(a1 + 128), &positions, 1uLL, v22);
  CFRelease(CopyWithAttributes);
  CGContextRestoreGState(v22);
  CGContextSetBlendMode(v22, kCGBlendModeClear);
  CGContextSetLineWidth(v22, *(CGFloat *)(a1 + 120));
  v44.origin.x = 0.0;
  v44.origin.y = 0.0;
  v44.size.width = v23;
  v44.size.height = v24;
  CGContextStrokeRect(v22, v44);
  CGContextFlush(v22);
  CGContextRelease(v22);
}

void TXDrawGlyphToBitmap(uint64_t a1, const PCString *a2, __int32 a3, int a4, CGColorSpace *a5, char a6, void **a7, float64x2_t *a8, double a9, double a10, double *a11, double *a12, char a13, char a14)
{
  __int8 v18;
  double v28;
  double v29;
  __int16 v30;
  PCString v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;
  _BYTE v38[11];
  uint8x8_t v39[28];
  __int16 v40;
  double v41;
  float64x2_t v42[2];
  uint64_t v43;
  uint64_t v44;

  v18 = a4;
  v42[0] = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v42[1] = _Q0;
  v43 = 0;
  v44 = 0;
  v41 = 0.0;
  v40 = 0;
  TXGetGlyphBitmapInfo(a1, (uint64_t)a2, a4, a8, a11, a12, v42, (uint64_t *)&v41, a9, a10, (CGGlyph *)&v40, a14);
  v32 = 0;
  v33 = 0;
  v34 = 0x3FF0000000000000;
  v35 = 0;
  v36 = 0;
  v37 = 1;
  memset(v38, 0, sizeof(v38));
  v28 = *a11;
  v29 = v41;
  v30 = v40;
  PCString::PCString(&v31, a2 + 14);
  TXCGRenderParams::TXCGRenderParams(v39, (uint64_t)&v32, a3, v18, a8, v30, (uint64_t)a12, v42, a9, a10, v28, v29, a13, a6, 0, &v31, a2[15].var0);
  PCString::~PCString(&v31);
  if (v38[2] && v35)
    MEMORY[0x1B5E29170](v35, 0x1000C40FF89C88ELL);
  TXDrawGlyphToBitmap((uint64_t)v39, a5, a7);
  TXCGRenderParams::~TXCGRenderParams((PCString *)v39);
}

void sub_1B28CF0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,PCString a23)
{
  TXCGRenderParams::~TXCGRenderParams(&a23);
  _Unwind_Resume(a1);
}

uint8x8_t *TXCGRenderParams::TXCGRenderParams(uint8x8_t *a1, uint64_t a2, __int32 a3, __int8 a4, _OWORD *a5, __int16 a6, uint64_t a7, _OWORD *a8, double a9, double a10, double a11, double a12, char a13, char a14, uint64_t a15, const PCString *a16, CFTypeRef cf)
{
  uint8x8_t *v28;
  __int128 v29;
  __int128 v30;

  v28 = TXGlyphRequest::TXGlyphRequest(a1, a2);
  v28[6].i32[0] = a3;
  *(double *)&v28[7] = a9;
  v28[8].i8[0] = a4;
  *(double *)&v28[9] = a10;
  v29 = a5[1];
  *(_OWORD *)v28[10].i8 = *a5;
  *(_OWORD *)v28[12].i8 = v29;
  *(double *)&v28[14] = a11;
  *(double *)&v28[15] = a12;
  v28[16].i16[0] = a6;
  v28[17] = (uint8x8_t)a7;
  v30 = a8[1];
  *(_OWORD *)v28[18].i8 = *a8;
  *(_OWORD *)v28[20].i8 = v30;
  *(_OWORD *)v28[22].i8 = a8[2];
  v28[24].i8[0] = a13;
  v28[24].i8[1] = a14;
  v28[25] = (uint8x8_t)a15;
  PCString::PCString((PCString *)&v28[26], a16);
  a1[27] = (uint8x8_t)cf;
  if (cf)
    CFRetain(cf);
  return a1;
}

void sub_1B28CF238(_Unwind_Exception *a1)
{
  uint64_t v1;
  PCString *v2;

  PCString::~PCString(v2);
  if (*(_BYTE *)(v1 + 39))
    TXCGRenderParams::TXCGRenderParams(v1);
  _Unwind_Resume(a1);
}

uint8x8_t *TXGlyphRequest::TXGlyphRequest(uint8x8_t *a1, uint64_t a2)
{
  uint8x8_t v3;
  _QWORD *v5;

  *a1 = *(uint8x8_t *)a2;
  a1[1].i8[0] = *(_BYTE *)(a2 + 8);
  v3 = *(uint8x8_t *)(a2 + 16);
  a1[2] = v3;
  a1[3] = *(uint8x8_t *)(a2 + 24);
  a1[4].i32[0] = *(_DWORD *)(a2 + 32);
  v3.i32[0] = *(_DWORD *)(a2 + 36);
  a1[4].i32[1] = v3.i32[0];
  a1[5] = *(uint8x8_t *)(a2 + 40);
  if (vmovl_u8(v3).i8[6])
  {
    v5 = (_QWORD *)operator new();
    *v5 = 0x3FF0000000000000;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = 0x3FF0000000000000;
    v5[5] = 0;
    v5[6] = 0;
    v5[7] = 0;
    v5[8] = 0x3FF0000000000000;
    a1[3] = (uint8x8_t)v5;
    PCMatrix33Tmpl<double>::operator=((uint64_t)v5, *(_QWORD *)(a2 + 24));
  }
  return a1;
}

double PCMatrix33Tmpl<double>::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a2 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    result = *(double *)(a2 + 64);
    *(double *)(a1 + 64) = result;
  }
  return result;
}

void TXCGRenderParams::~TXCGRenderParams(PCString *this)
{
  __CFString *var0;
  __CFString *v3;

  var0 = this[27].var0;
  if (var0)
    CFRelease(var0);
  PCString::~PCString(this + 26);
  if (HIBYTE(this[4].var0))
  {
    v3 = this[3].var0;
    if (v3)
      MEMORY[0x1B5E29170](v3, 0x1000C40FF89C88ELL);
    this[3].var0 = 0;
  }
}

uint64_t TXCGRenderParams::TXCGRenderParams(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = MEMORY[0x1B5E29170](result, 0x1000C40FF89C88ELL);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

void TXDiscontinuousSelection::TXDiscontinuousSelection(TXDiscontinuousSelection *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)this, 0);
}

void sub_1B28CF42C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

void TXDiscontinuousSelection::addChar(TXDiscontinuousSelection *this, int a2)
{
  unint64_t v4;
  int *v5;
  _DWORD *v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  int *v13;
  char *v14;
  int v15;
  unsigned int v16;

  if ((TXDiscontinuousSelection::contains(this, a2, &v16) & 1) == 0)
  {
    v4 = *((_QWORD *)this + 2);
    v5 = (int *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= v4)
    {
      v7 = *(int **)this;
      v8 = ((uint64_t)v5 - *(_QWORD *)this) >> 2;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 62)
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v10 = v4 - (_QWORD)v7;
      if (v10 >> 1 > v9)
        v9 = v10 >> 1;
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL)
        v11 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v11 = v9;
      if (v11)
      {
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 16, v11);
        v7 = *(int **)this;
        v5 = (int *)*((_QWORD *)this + 1);
      }
      else
      {
        v12 = 0;
      }
      v13 = (int *)&v12[4 * v8];
      v14 = &v12[4 * v11];
      *v13 = a2;
      v6 = v13 + 1;
      while (v5 != v7)
      {
        v15 = *--v5;
        *--v13 = v15;
      }
      *(_QWORD *)this = v13;
      *((_QWORD *)this + 1) = v6;
      *((_QWORD *)this + 2) = v14;
      if (v7)
        operator delete(v7);
    }
    else
    {
      *v5 = a2;
      v6 = v5 + 1;
    }
    *((_QWORD *)this + 1) = v6;
  }
}

uint64_t TXDiscontinuousSelection::contains(TXDiscontinuousSelection *this, int a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v3 = *(_QWORD *)this;
  v4 = *((_QWORD *)this + 1);
  if (*(_QWORD *)this == v4)
    return 0;
  v5 = 0;
  v6 = *(_QWORD *)this;
  while (1)
  {
    if ((v4 - v3) >> 2 <= (unint64_t)v5)
      std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
    if (*(_DWORD *)(v3 + 4 * v5) == a2)
      break;
    v6 += 4;
    ++v5;
    if (v6 == v4)
      return 0;
  }
  *a3 = v5;
  return 1;
}

_QWORD *TXDiscontinuousSelection::removeAll(_QWORD *this)
{
  this[1] = *this;
  return this;
}

uint64_t TXDiscontinuousSelection::getCharOffsetAt(TXDiscontinuousSelection *this, unsigned int a2)
{
  if (a2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2))
    std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
  return *(unsigned int *)(*(_QWORD *)this + 4 * a2);
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

uint64_t TXParagraphStyle::pushDirectionalRun(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t result;

  v3 = a1[122];
  if (v3 >= a1[123])
  {
    result = std::vector<TXDirectionalRun>::__push_back_slow_path<TXDirectionalRun const&>(a1 + 121, a2);
  }
  else
  {
    v4 = *(_BYTE *)(a2 + 16);
    *(_OWORD *)v3 = *(_OWORD *)a2;
    *(_BYTE *)(v3 + 16) = v4;
    result = v3 + 24;
  }
  a1[122] = result;
  return result;
}

void TXParagraphStyle::TXParagraphStyle(TXParagraphStyle *this, TXTextLayout *a2)
{
  TXParagraphStyleFolder_Factory *v4;
  OZFactory *Instance;
  TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *v6;
  OZChannelInfo *v7;
  _OWORD *v8;
  char **v9;
  _OWORD *v15;
  unint64_t v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  OZChannelBase *v30;
  unsigned int NextUniqueID;
  __int128 v32;
  _QWORD v33[2];
  char v34;
  PCString v35;
  PCString v36;

  *((_QWORD *)this + 131) = 0;
  *((_BYTE *)this + 1056) = 1;
  *(_QWORD *)this = &off_1E64F6680;
  *((_QWORD *)this + 1) = &unk_1E64F66E0;
  *((_QWORD *)this + 130) = &unk_1E64F6710;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  PCURL::PCURL((PCURL *)&v36, CFSTR("Text Paragraph Style Heading"));
  Instance = (OZFactory *)TXParagraphStyleFolder_Factory::getInstance(v4);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 40), Instance, &v36, (OZChannelFolder *)((char *)a2 + 58880), 0x193u, 128, 0);
  *((_QWORD *)this + 5) = &off_1E64F6780;
  *((_QWORD *)this + 7) = &unk_1E64F6A58;
  PCString::~PCString(&v36);
  PCURL::PCURL((PCURL *)&v36, CFSTR("Text Layout Alignment Enum"));
  PCURL::PCURL((PCURL *)&v35, CFSTR("Text Layout Alignment"));
  OZChannelEnum::OZChannelEnum((TXParagraphStyle *)((char *)this + 168), 0, &v36, &v35, (OZChannelFolder *)((char *)this + 40), 0x191u, 0, 0, 0);
  PCString::~PCString(&v35);
  PCString::~PCString(&v36);
  PCURL::PCURL((PCURL *)&v36, CFSTR("Text Layout Justification Enum"));
  PCURL::PCURL((PCURL *)&v35, CFSTR("Text Layout Justification"));
  OZChannelEnum::OZChannelEnum((TXParagraphStyle *)((char *)this + 424), 0, &v36, &v35, (OZChannelFolder *)((char *)this + 40), 0x192u, 0, 0, 0);
  PCString::~PCString(&v35);
  PCString::~PCString(&v36);
  PCURL::PCURL((PCURL *)&v36, CFSTR("Text Layout Line Spacing"));
  v7 = (OZChannelInfo *)TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::getInstance(v6);
  OZChannelDouble::OZChannelDouble((TXParagraphStyle *)((char *)this + 680), 0.0, &v36, (OZChannelFolder *)((char *)this + 40), 0x194u, 0, 0, v7);
  PCString::~PCString(&v36);
  *((_QWORD *)this + 106) = 0;
  *((_OWORD *)this + 52) = 0u;
  *((_QWORD *)this + 111) = 0;
  *((_OWORD *)this + 56) = 0u;
  v8 = operator new(0x40uLL);
  v9 = (char **)((char *)this + 888);
  *((_QWORD *)this + 111) = v8;
  *((_QWORD *)this + 113) = v8 + 4;
  *v8 = 0u;
  v8[1] = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  v8[2] = 0u;
  v8[3] = _Q0;
  v32 = _Q0;
  *((_QWORD *)this + 112) = v8 + 4;
  PCWorkingColorVector::PCWorkingColorVector((TXParagraphStyle *)((char *)this + 928));
  *((_QWORD *)this + 118) = a2;
  *((_QWORD *)this + 119) = 0;
  *((_DWORD *)this + 240) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 123) = 0;
  *((_QWORD *)this + 122) = 0;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 124) = (char *)this + 1000;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 127);
  *((_QWORD *)this + 129) = 0;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_BYTE *)this + 872) = 1;
  *((_DWORD *)this + 219) = 1;
  v15 = (_OWORD *)*((_QWORD *)this + 112);
  v16 = *((_QWORD *)this + 113);
  if ((unint64_t)v15 >= v16)
  {
    v18 = ((char *)v15 - *v9) >> 6;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 58)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v20 = v16 - (_QWORD)*v9;
    if (v20 >> 5 > v19)
      v19 = v20 >> 5;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFC0)
      v21 = 0x3FFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)this + 904, v21);
    else
      v22 = 0;
    v23 = &v22[64 * v18];
    v24 = &v22[64 * v21];
    *(_OWORD *)v23 = 0u;
    *((_OWORD *)v23 + 1) = 0u;
    *((_OWORD *)v23 + 2) = 0u;
    *((_OWORD *)v23 + 3) = v32;
    v17 = v23 + 64;
    v25 = (char *)*((_QWORD *)this + 112);
    v26 = (char *)*((_QWORD *)this + 111);
    if (v25 != v26)
    {
      do
      {
        v27 = *((_OWORD *)v25 - 4);
        v28 = *((_OWORD *)v25 - 3);
        v29 = *((_OWORD *)v25 - 1);
        *((_OWORD *)v23 - 2) = *((_OWORD *)v25 - 2);
        *((_OWORD *)v23 - 1) = v29;
        *((_OWORD *)v23 - 4) = v27;
        *((_OWORD *)v23 - 3) = v28;
        v23 -= 64;
        v25 -= 64;
      }
      while (v25 != v26);
      v25 = *v9;
    }
    *((_QWORD *)this + 111) = v23;
    *((_QWORD *)this + 112) = v17;
    *((_QWORD *)this + 113) = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v15 = 0uLL;
    v15[1] = 0uLL;
    v17 = v15 + 4;
    v15[2] = 0uLL;
    v15[3] = v32;
  }
  *((_QWORD *)this + 112) = v17;
  *((_QWORD *)this + 114) = operator new[]();
  *((_QWORD *)this + 115) = 0;
  OZChannel::setKeyframable((OZChannel *)((char *)this + 168), 0);
  OZChannel::setKeyframable((OZChannel *)((char *)this + 424), 0);
  *((_BYTE *)this + 1028) = 0;
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 168), CFSTR("TXAlignmentController"));
  v30 = OZChannelBase::finishInitializing((OZChannelBase *)((char *)this + 168));
  NextUniqueID = OZChannelBase::getNextUniqueID(v30);
  OZChannelBase::setID((OZChannelBase *)((char *)this + 40), NextUniqueID);
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  TXParagraphStyle::pushDirectionalRun((uint64_t *)this, (uint64_t)v33);
}

void sub_1B28CFB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17, PCString a18)
{
  uint64_t v18;
  OZChannelFolder *v19;
  OZChannelEnum *v20;
  OZChannelEnum *v21;
  OZChannel *v22;
  void **v23;
  PCString *v24;
  void **v25;
  _QWORD **v26;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  PCString::~PCString(v24);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v18 + 992, *v26);
  v28 = *(void **)(v18 + 968);
  if (v28)
  {
    *(_QWORD *)(v18 + 976) = v28;
    operator delete(v28);
  }
  v29 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v18 + 896) = v29;
    operator delete(v29);
  }
  v30 = *(void **)(v18 + 832);
  if (v30)
  {
    *(_QWORD *)(v18 + 840) = v30;
    operator delete(v30);
  }
  OZChannel::~OZChannel(v22);
  OZChannelEnum::~OZChannelEnum(v21);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannelFolder::~OZChannelFolder(v19);
  v31 = *v25;
  if (*v25)
  {
    *(_QWORD *)(v18 + 24) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(v18 + 1040) = &off_1E65EB048;
  *(_BYTE *)(v18 + 1056) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v18 + 1048));
  _Unwind_Resume(a1);
}

uint64_t TXParagraphStyle::getTabAtIndex(TXParagraphStyle *this, unsigned int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 104) + 8 * a2);
}

double TXParagraphStyle::insertTab(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  Li3DEngineScene *v21;
  double result;
  uint64_t v23;

  v6 = operator new();
  TXTabStop::TXTabStop(v6, a1, a2, a3);
  v7 = *(uint64_t **)(a1 + 840);
  v8 = *(_QWORD *)(a1 + 848);
  if ((unint64_t)v7 >= v8)
  {
    v10 = *(_QWORD *)(a1 + 832);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v8 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(a1 + 848, v14);
    else
      v15 = 0;
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v6;
    v9 = v16 + 1;
    v18 = *(char **)(a1 + 840);
    v19 = *(char **)(a1 + 832);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = *(char **)(a1 + 832);
    }
    *(_QWORD *)(a1 + 832) = v16;
    *(_QWORD *)(a1 + 840) = v9;
    *(_QWORD *)(a1 + 848) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = v6;
    v9 = v7 + 1;
  }
  *(_QWORD *)(a1 + 840) = v9;
  *(_BYTE *)(a1 + 872) = 1;
  v21 = *(Li3DEngineScene **)(a1 + 944);
  v23 = *(_QWORD *)(a1 + 1032);
  TXTextLayout::invalidateTextObjectsInRange(v21, (int *)&v23);
  result = 0.0;
  *(_QWORD *)(a1 + 1032) = 0;
  return result;
}

void sub_1B28CFE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40EAB8D8F4);
  _Unwind_Resume(a1);
}

uint64_t TXParagraphStyle::clearDirectionalRuns(uint64_t this)
{
  *(_QWORD *)(this + 976) = *(_QWORD *)(this + 968);
  return this;
}

_QWORD *TXParagraphStyle::cloneBehaviorsFromSource(_QWORD *this, const TXParagraphStyle *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  OZChannelFolder *v4;
  const void *v5;
  OZSingleChannelBehavior *v6;
  OZSingleChannelBehavior *v7;
  const OZChannelBase *ChanBase;
  const void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;

  if (this[118])
  {
    v2 = this;
    TXParagraphStyle::getBehaviors(a2, &v12);
    v3 = v13;
    if (v13 != &v12)
    {
      v4 = (OZChannelFolder *)(v2 + 5);
      do
      {
        v5 = (const void *)v3[2];
        if (v5)
        {
          if (v6)
          {
            v7 = v6;
            ChanBase = (const OZChannelBase *)OZSingleChannelBehavior::getChanBase(v6);
            if (ChanBase)
            {
              v9 = (const void *)(*(uint64_t (**)(_QWORD, OZSingleChannelBehavior *, uint64_t))(**((_QWORD **)v7 + 1) + 24))(*((_QWORD *)v7 + 1), v7, 2);
              if (v9)
              {
                if (v10)
                {
                  v11 = v10;
                  if (OZChannelFolder::findMatchingDescendant(v4, ChanBase))
                    (*(void (**)(void *))(*(_QWORD *)v11 + 224))(v11);
                }
              }
            }
          }
        }
        v3 = (uint64_t *)v3[1];
      }
      while (v3 != &v12);
    }
    return std::__list_imp<unsigned int>::clear(&v12);
  }
  return this;
}

void sub_1B28CFF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void TXParagraphStyle::TXParagraphStyle(TXParagraphStyle *this, TXTextLayout *a2, TXParagraphStyle *a3, int a4)
{
  TXParagraphStyleFolder_Factory *v8;
  OZFactory *Instance;
  uint64_t v10;
  unint64_t v11;
  const CMTime *v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t ValueAsInt;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int v26;
  __int128 *v27;
  char v28;
  OZChannelBase *v30;
  unsigned int NextUniqueID;
  __int128 v32;
  char v33;
  PCString v34;

  *((_QWORD *)this + 131) = 0;
  *((_BYTE *)this + 1056) = 1;
  *(_QWORD *)this = &off_1E64F6680;
  *((_QWORD *)this + 1) = &unk_1E64F66E0;
  *((_QWORD *)this + 130) = &unk_1E64F6710;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  PCURL::PCURL((PCURL *)&v34, CFSTR("Text Paragraph Style Heading"));
  Instance = (OZFactory *)TXParagraphStyleFolder_Factory::getInstance(v8);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 40), Instance, &v34, (OZChannelFolder *)((char *)a2 + 58880), 0x193u, 128, 0);
  *((_QWORD *)this + 5) = &off_1E64F6780;
  *((_QWORD *)this + 7) = &unk_1E64F6A58;
  PCString::~PCString(&v34);
  OZChannelEnum::OZChannelEnum((TXParagraphStyle *)((char *)this + 168), (TXParagraphStyle *)((char *)a3 + 168), (OZChannelFolder *)((char *)this + 40));
  OZChannelEnum::OZChannelEnum((TXParagraphStyle *)((char *)this + 424), (TXParagraphStyle *)((char *)a3 + 424), (OZChannelFolder *)((char *)this + 40));
  OZChannel::OZChannel((OZChannel *)((char *)this + 680), (const OZChannelBase *)((char *)a3 + 680), (OZChannelFolder *)((char *)this + 40));
  *((_QWORD *)this + 85) = &off_1E6551358;
  *((_QWORD *)this + 87) = &unk_1E65516B8;
  *((_QWORD *)this + 104) = 0;
  *((_QWORD *)this + 106) = 0;
  *((_QWORD *)this + 105) = 0;
  *((_QWORD *)this + 111) = 0;
  *((_QWORD *)this + 113) = 0;
  *((_QWORD *)this + 112) = 0;
  std::vector<TXLineMetrics>::__init_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>((char *)this + 888, *((__int128 **)a3 + 111), *((__int128 **)a3 + 112), (uint64_t)(*((_QWORD *)a3 + 112) - *((_QWORD *)a3 + 111)) >> 6);
  PCWorkingColorVector::PCWorkingColorVector((TXParagraphStyle *)((char *)this + 928));
  *((_QWORD *)this + 118) = a2;
  *((_QWORD *)this + 119) = 0;
  *((_DWORD *)this + 240) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_QWORD *)this + 123) = 0;
  *((_QWORD *)this + 122) = 0;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 125) = 0;
  *((_QWORD *)this + 124) = (char *)this + 1000;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 127);
  *((_QWORD *)this + 129) = 0;
  v10 = *((_QWORD *)a3 + 104);
  if (((*((_QWORD *)a3 + 105) - v10) & 0x7FFFFFFF8) != 0)
  {
    v11 = 0;
    v12 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      v13 = *(_QWORD *)(v10 + 8 * v11);
      OZChannel::getValueAsDouble((OZChannel *)(v13 + 136), v12, 0.0);
      v15 = v14;
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(v13 + 288), v12, 0.0);
      TXParagraphStyle::insertTab((uint64_t)this, ValueAsInt, v15);
      ++v11;
      v10 = *((_QWORD *)a3 + 104);
    }
    while (v11 < ((unint64_t)(*((_QWORD *)a3 + 105) - v10) >> 3));
  }
  *((_QWORD *)this + 107) = *((_QWORD *)a3 + 107);
  *((_QWORD *)this + 108) = *((_QWORD *)a3 + 108);
  *((_BYTE *)this + 872) = *((_BYTE *)a3 + 872);
  *((_DWORD *)this + 219) = *((_DWORD *)a3 + 219);
  v17 = operator new[]();
  *((_QWORD *)this + 114) = v17;
  v18 = *((unsigned int *)this + 219);
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = 4 * (v18 - 1);
    v21 = 4 * v18;
    do
    {
      if (v20 != v19)
      {
        v22 = *((_QWORD *)a3 + 114);
        if (v22)
          LODWORD(v22) = *(_DWORD *)(v22 + v19);
        *(_DWORD *)(v17 + v19) = v22;
      }
      v19 += 4;
    }
    while (v21 != v19);
  }
  *((_QWORD *)this + 122) = *((_QWORD *)this + 121);
  v23 = *((_QWORD *)a3 + 122);
  v24 = *((_QWORD *)a3 + 121);
  if (v23 != v24)
  {
    v25 = 0;
    v26 = 1;
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 3) <= v25)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v27 = (__int128 *)(v24 + 24 * v25);
      v28 = *((_BYTE *)v27 + 16);
      v32 = *v27;
      v33 = v28;
      TXParagraphStyle::pushDirectionalRun((uint64_t *)this, (uint64_t)&v32);
      v25 = v26;
      v23 = *((_QWORD *)a3 + 122);
      v24 = *((_QWORD *)a3 + 121);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v23 - v24) >> 3) > v26++);
  }
  *((_QWORD *)this + 115) = *((_QWORD *)a3 + 115);
  *((_BYTE *)this + 1028) = 0;
  OZChannelBase::setParameterCtlrClassName((OZChannelBase *)((char *)this + 168), CFSTR("TXAlignmentController"));
  NextUniqueID = OZChannelBase::getNextUniqueID(v30);
  OZChannelBase::setID((OZChannelBase *)((char *)this + 40), NextUniqueID);
  if (a4)
    TXParagraphStyle::cloneBehaviorsFromSource(this, a3);
}

void sub_1B28D0324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, void **a11, OZChannel *a12, OZChannelEnum *a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, PCString a18)
{
  uint64_t v18;
  OZChannelFolder *v19;
  OZChannelEnum *v20;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v18 + 992, *a10);
  v22 = *(void **)(v18 + 968);
  if (v22)
  {
    *(_QWORD *)(v18 + 976) = v22;
    operator delete(v22);
  }
  v23 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v18 + 896) = v23;
    operator delete(v23);
  }
  v24 = *(void **)(v18 + 832);
  if (v24)
  {
    *(_QWORD *)(v18 + 840) = v24;
    operator delete(v24);
  }
  OZChannel::~OZChannel(a12);
  OZChannelEnum::~OZChannelEnum(a13);
  OZChannelEnum::~OZChannelEnum(v20);
  OZChannelFolder::~OZChannelFolder(v19);
  v25 = *a14;
  if (*a14)
  {
    *(_QWORD *)(v18 + 24) = v25;
    operator delete(v25);
  }
  *(_QWORD *)(v18 + 1040) = &off_1E65EB048;
  *(_BYTE *)(v18 + 1056) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v18 + 1048));
  _Unwind_Resume(a1);
}

void TXParagraphStyle::~TXParagraphStyle(TXParagraphStyle *this, uint64_t *a2)
{
  uint64_t v3;
  Li3DEngineScene *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v3 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 1) = a2[3];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[4];
  v4 = (Li3DEngineScene *)*((_QWORD *)this + 118);
  v19 = *((_QWORD *)this + 129);
  TXTextLayout::invalidateTextObjectsInRange(v4, (int *)&v19);
  *((_QWORD *)this + 129) = 0;
  v5 = *((_QWORD *)this + 118);
  v6 = v5 + 1200;
  v7 = *(_QWORD *)(v5 + 1208);
  if (v7 != v5 + 1200)
  {
    do
    {
      v8 = *(_QWORD *)(v7 + 16);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 208))(v8, (char *)this + 168);
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 208))(v8, (char *)this + 680);
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 104);
  v10 = (uint64_t *)*((_QWORD *)this + 105);
  if (v9 != v10)
  {
    do
    {
      v12 = *v9++;
      v11 = v12;
      OZChannelFolder::removeDescendant((OZChannelFolder *)(*((_QWORD *)this + 118) + 58880), (OZChannelBase *)(v12 + 8));
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    while (v9 != v10);
    v9 = (uint64_t *)*((_QWORD *)this + 104);
  }
  *((_QWORD *)this + 105) = v9;
  v13 = (const void *)*((_QWORD *)this + 119);
  if (v13)
    CFRelease(v13);
  OZChannelFolder::removeDescendant((OZChannelFolder *)(*((_QWORD *)this + 118) + 58880), (OZChannelBase *)((char *)this + 40));
  v14 = *((_QWORD *)this + 114);
  if (v14)
    MEMORY[0x1B5E2914C](v14, 0x1000C8052888210);
  *((_QWORD *)this + 114) = 0;
  PCString::~PCString((PCString *)this + 127);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 992, *((_QWORD **)this + 125));
  v15 = (void *)*((_QWORD *)this + 121);
  if (v15)
  {
    *((_QWORD *)this + 122) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 111);
  if (v16)
  {
    *((_QWORD *)this + 112) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 104);
  if (v17)
  {
    *((_QWORD *)this + 105) = v17;
    operator delete(v17);
  }
  OZChannel::~OZChannel((OZChannel *)((char *)this + 680));
  OZChannelEnum::~OZChannelEnum((TXParagraphStyle *)((char *)this + 424));
  OZChannelEnum::~OZChannelEnum((TXParagraphStyle *)((char *)this + 168));
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this + 40));
  v18 = (void *)*((_QWORD *)this + 2);
  if (v18)
  {
    *((_QWORD *)this + 3) = v18;
    operator delete(v18);
  }
}

void TXParagraphStyle::~TXParagraphStyle(TXParagraphStyle *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1040) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1056) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1048));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 1040) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1056) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1048));
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXParagraphStyle::~TXParagraphStyle(TXParagraphStyle *this)
{
  *((_QWORD *)this + 129) = &off_1E65EB048;
  *((_BYTE *)this + 1048) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 130);
}

{
  TXParagraphStyle::~TXParagraphStyle((TXParagraphStyle *)((char *)this - 8));
}

void `virtual thunk to'TXParagraphStyle::~TXParagraphStyle(TXParagraphStyle *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1040) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1056) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1048));
}

{
  TXParagraphStyle::~TXParagraphStyle((TXParagraphStyle *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t TXParagraphStyle::setStart(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 856) = a2;
  return this;
}

uint64_t TXParagraphStyle::setLength(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 864) = a2;
  return this;
}

double TXParagraphStyle::dirty(TXParagraphStyle *this, int a2)
{
  Li3DEngineScene *v3;
  double result;
  uint64_t v5;

  *((_BYTE *)this + 872) = a2;
  if (a2)
  {
    v3 = (Li3DEngineScene *)*((_QWORD *)this + 118);
    v5 = *((_QWORD *)this + 129);
    TXTextLayout::invalidateTextObjectsInRange(v3, (int *)&v5);
    result = 0.0;
    *((_QWORD *)this + 129) = 0;
  }
  return result;
}

double TXParagraphStyle::getAscenderForCharOffset(TXParagraphStyle *this, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  unsigned int v6;

  if (*((_DWORD *)this + 219) == 1)
  {
    v2 = *((_QWORD *)this + 111);
  }
  else
  {
    v3 = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 114);
    v5 = (*((_DWORD *)this + 219) - 1);
    while (1)
    {
      v6 = *v4++;
      if (v6 > a2)
        break;
      v3 -= 64;
      if (!--v5)
      {
        v2 = *((_QWORD *)this + 111) + ((unint64_t)(*((_DWORD *)this + 219) - 1) << 6);
        return *(double *)v2;
      }
    }
    v2 = *((_QWORD *)this + 111) - v3;
  }
  return *(double *)v2;
}

double TXParagraphStyle::getDescenderForCharOffset(TXParagraphStyle *this, unsigned int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((_DWORD *)this + 219);
  v3 = (v2 - 1);
  if (v2 == 1)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    while (*(_DWORD *)(*((_QWORD *)this + 114) + 4 * v4) <= a2)
    {
      if (v3 == ++v4)
      {
        v4 = v3;
        return *(double *)(*((_QWORD *)this + 111) + (v4 << 6) + 8);
      }
    }
  }
  return *(double *)(*((_QWORD *)this + 111) + (v4 << 6) + 8);
}

uint64_t TXParagraphStyle::getLineMetrics@<X0>(uint64_t this@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(this + 888);
  if (a2 >= (unint64_t)((*(_QWORD *)(this + 896) - v3) >> 6))
  {
    v6 = 0uLL;
    *a3 = 0u;
    a3[1] = 0u;
    __asm { FMOV            V1.2D, #-1.0 }
  }
  else
  {
    v4 = (_OWORD *)(v3 + ((uint64_t)a2 << 6));
    v5 = v4[1];
    *a3 = *v4;
    a3[1] = v5;
    v6 = v4[2];
    _Q1 = v4[3];
  }
  a3[2] = v6;
  a3[3] = _Q1;
  return this;
}

uint64_t TXParagraphStyle::shiftDirectionalRunsBy(uint64_t this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v5;

  v2 = *(_QWORD **)(this + 968);
  v3 = *(_QWORD *)(this + 976) - (_QWORD)v2;
  if (v3)
  {
    v4 = 0xAAAAAAAAAAAAAAABLL * (v3 >> 3);
    v5 = 1;
    do
    {
      *v2 += a2;
      v2 += 3;
    }
    while (v4 > v5++);
  }
  return this;
}

double TXParagraphStyle::setGlyphRange(uint64_t a1, double *a2)
{
  double result;

  if ((double *)(a1 + 1032) != a2)
  {
    result = *a2;
    *(double *)(a1 + 1032) = *a2;
  }
  return result;
}

void TXParagraphStyle::shiftCaretInsertionIndices(TXParagraphStyle *this, int a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t *v6;
  int64x2_t v7;
  char *v8;
  char *v9;
  BOOL v10;
  int64x2_t v11;
  int64x2_t v12;
  unint64_t v13;
  uint64_t *v14;
  _QWORD *v15[2];
  unint64_t *v16;

  v15[0] = 0;
  v15[1] = 0;
  v14 = (uint64_t *)v15;
  v3 = (char *)*((_QWORD *)this + 124);
  v4 = (char *)this + 1000;
  if (v3 != (char *)this + 1000)
  {
    v5 = a2;
    v11 = vdupq_n_s64(a2);
    do
    {
      v12 = *(int64x2_t *)(v3 + 40);
      v13 = *((_QWORD *)v3 + 4) + v5;
      v16 = &v13;
      v6 = std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(&v14, &v13, (uint64_t)&std::piecewise_construct, (uint64_t **)&v16);
      v7.i64[0] = 0xFFFFFFFFLL;
      v7.i64[1] = 0xFFFFFFFFLL;
      *(int8x16_t *)(v6 + 5) = vbslq_s8((int8x16_t)vceqq_s64(v12, v7), (int8x16_t)v7, (int8x16_t)vaddq_s64(v12, v11));
      v8 = (char *)*((_QWORD *)v3 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(char **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (char *)*((_QWORD *)v3 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v3;
          v3 = v9;
        }
        while (!v10);
      }
      v3 = v9;
    }
    while (v9 != v4);
  }
  if ((uint64_t **)((char *)this + 992) != &v14)
    std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__tree_node<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,void *> *,long>>((uint64_t **)this + 124, v14, v15);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v14, v15[0]);
}

void sub_1B28D09E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void TXParagraphStyle::clearLeftRightCaretPositionMaps(TXParagraphStyle *this)
{
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 992, *((_QWORD **)this + 125));
  *((_QWORD *)this + 124) = (char *)this + 1000;
  *((_QWORD *)this + 126) = 0;
  *((_QWORD *)this + 125) = 0;
}

uint64_t *TXParagraphStyle::setCaretPositionPair(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  unint64_t v7;
  unint64_t *v8;

  v7 = a2;
  v8 = &v7;
  result = std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((uint64_t **)(a1 + 992), &v7, (uint64_t)&std::piecewise_construct, (uint64_t **)&v8);
  result[5] = a3;
  result[6] = a4;
  return result;
}

_DWORD *TXParagraphStyle::setLineBreaks(TXParagraphStyle *this, unint64_t *a2, int a3)
{
  uint64_t v3;
  _DWORD *result;
  uint64_t v7;

  LODWORD(v3) = a3;
  result = (_DWORD *)*((_QWORD *)this + 114);
  if (result)
    result = (_DWORD *)MEMORY[0x1B5E2914C](result, 0x1000C8052888210);
  *((_QWORD *)this + 114) = 0;
  if ((_DWORD)v3)
  {
    v3 = v3;
    result = (_DWORD *)operator new[]();
    *((_QWORD *)this + 114) = result;
    do
    {
      v7 = *a2++;
      *result++ = v7;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t TXParagraphStyle::shiftLineBreaksBy(uint64_t this, int a2)
{
  unint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(this + 876) != 1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(this + 912);
    do
      *(_DWORD *)(v3 + 4 * v2++) += a2;
    while (v2 < (*(_DWORD *)(this + 876) - 1));
  }
  return this;
}

_QWORD *TXParagraphStyle::getTabs@<X0>(TXParagraphStyle *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(a2, *((const void **)this + 104), *((_QWORD *)this + 105), (uint64_t)(*((_QWORD *)this + 105) - *((_QWORD *)this + 104)) >> 3);
}

uint64_t TXParagraphStyle::setAlignment(TXParagraphStyle *this, int a2, char a3)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 168), MEMORY[0x1E0CA2E68], (double)a2, a3);
}

uint64_t TXParagraphStyle::getAlignment(TXParagraphStyle *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 168), MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t TXParagraphStyle::getHeadingChannel(TXParagraphStyle *this)
{
  return (uint64_t)this + 40;
}

uint64_t TXParagraphStyle::setJustification(TXParagraphStyle *this, int a2)
{
  return OZChannel::setValue((OZChannel *)((char *)this + 424), MEMORY[0x1E0CA2E68], (double)a2, 1);
}

uint64_t TXParagraphStyle::getJustification(TXParagraphStyle *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 424), MEMORY[0x1E0CA2E68], 0.0);
}

uint64_t TXParagraphStyle::getLineSpacingChannel(TXParagraphStyle *this)
{
  return (uint64_t)this + 680;
}

uint64_t TXParagraphStyle::writeHeader(TXParagraphStyle *this, PCSerializerWriteStream *a2)
{
  uint64_t result;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXParagraphStyleScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 500);
  result = (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 232))(a2);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(PCSerializerWriteStream *, uint64_t, _QWORD))(*(_QWORD *)a2 + 144))(a2, 7, *((unsigned int *)this + 16));
  return result;
}

uint64_t TXParagraphStyle::writeBody(TXParagraphStyle *this, PCSerializerWriteStream *a2)
{
  double v4;
  unint64_t v5;
  unsigned int v6;
  const CMTime *v7;
  uint64_t ValueAsInt;

  if (OZChannel::getValueAsInt((OZChannel *)((char *)this + 168), MEMORY[0x1E0CA2E68], 0.0))
  {
    (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*((_QWORD *)this + 23) + 16))((char *)this + 184, a2, 0);
    (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 23) + 24))((char *)this + 184, a2, 0, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  OZChannel::getValueAsDouble((OZChannel *)((char *)this + 680), MEMORY[0x1E0CA2E68], 0.0);
  if (v4 != 0.0)
  {
    (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*((_QWORD *)this + 87) + 16))((char *)this + 696, a2, 0);
    (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 87) + 24))((char *)this + 696, a2, 0, 1, 1);
    (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  }
  if (*((_QWORD *)this + 105) != *((_QWORD *)this + 104))
  {
    v5 = 0;
    v6 = 1;
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 501);
      OZChannel::getValueAsDouble((OZChannel *)(*(_QWORD *)(*((_QWORD *)this + 104) + 8 * v5) + 136), v7, 0.0);
      (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 184))(a2, 1);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)(*((_QWORD *)this + 104) + 8 * v5) + 288), v7, 0.0);
      (*(void (**)(PCSerializerWriteStream *, uint64_t, uint64_t))(*(_QWORD *)a2 + 152))(a2, 2, ValueAsInt);
      (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
      v5 = v6++;
    }
    while (v5 < (uint64_t)(*((_QWORD *)this + 105) - *((_QWORD *)this + 104)) >> 3);
  }
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t TXParagraphStyle::parseBegin(TXParagraphStyle *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXParagraphStyleScope);
  return 1;
}

uint64_t TXParagraphStyle::parseEnd()
{
  return 1;
}

uint64_t TXParagraphStyle::parseElement(TXParagraphStyle *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v6;
  OZChannel *v7;
  OZChannel *v8;
  OZChannel *v10;
  OZChannel *v11;
  double v12;
  OZChannel *v13;
  unsigned int v14;
  double v15;
  uint64_t v16;

  v16 = 0;
  v6 = *((_DWORD *)a3 + 2);
  if (v6 == 501)
  {
    v15 = 0.0;
    v14 = 0;
    PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v15);
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v14);
    TXParagraphStyle::insertTab((uint64_t)this, v14, v15);
    return 1;
  }
  if (v6 == 110)
  {
    PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v16 + 4);
    if (HIDWORD(v16) == 401)
    {
      if (!*((_BYTE *)this + 1028))
      {
        PCSerializerReadStream::pushHandler(a2, (TXParagraphStyle *)((char *)this + 184));
        if (PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 115, (uint64_t)&v16))
        {
          if (v10)
            OZChannel::setDefaultValue(v10, (double)(int)v16);
        }
        if (PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 114, (uint64_t)&v16))
        {
          if (v11)
          {
            v12 = (double)(int)v16;
LABEL_28:
            OZChannel::setInitialValue(v11, v12, 0);
          }
        }
      }
    }
    else
    {
      if (HIDWORD(v16) != 404)
      {
        if (HIDWORD(v16) == 402)
        {
          PCSerializerReadStream::pushHandler(a2, (TXParagraphStyle *)((char *)this + 184));
          if (PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 114, (uint64_t)&v16))
          {
            if ((_DWORD)v16 == 2)
            {
              if (v7)
              {
                OZChannel::setInitialValue(v7, 6.0, 0);
                *((_BYTE *)this + 1028) = 1;
              }
            }
          }
          if (PCSerializerReadStream::getAttributeAsInt32((uint64_t)a2, (uint64_t)a3, 115, (uint64_t)&v16))
          {
            if (v8)
              OZChannel::setDefaultValue(v8, (double)(int)v16);
          }
        }
        return 1;
      }
      PCSerializerReadStream::pushHandler(a2, (TXParagraphStyle *)((char *)this + 696));
      v15 = 0.0;
      if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 115, (uint64_t)&v15))
      {
        if (v13)
          OZChannel::setDefaultValue(v13, v15);
      }
      if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 114, (uint64_t)&v15))
      {
        if (v11)
        {
          v12 = v15;
          goto LABEL_28;
        }
      }
    }
  }
  return 1;
}

void TXParagraphStyle::calcHashForStateAndSetDirty(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  TXTextLayout *v6;
  TXTextLayout *v7;
  CMTime *v8;
  CMTime *v9;
  uint64_t v10;
  int32x4_t v11;
  unsigned int v12;
  uint64_t StyleRunAtCharOffset;
  Li3DEngineScene *v14;
  unsigned int v15;
  __int128 v16;
  CMTime v17;
  unsigned int *v18;
  int8x8_t v19[521];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v1;
  v19[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v19);
  v17 = *v9;
  OZChannel::calcHashForState((OZChannel *)(v10 + 168), (PCSerializerWriteStream *)v19, &v17);
  v17 = *v9;
  OZChannel::calcHashForState((OZChannel *)(v10 + 424), (PCSerializerWriteStream *)v19, &v17);
  v17 = *v9;
  (*(void (**)(_QWORD *, int8x8_t *, CMTime *))(*((_QWORD *)v7 + 7683) + 448))((_QWORD *)v7 + 7683, v19, &v17);
  v11 = *(int32x4_t *)PCHashWriteStream::getHash(v19)->i8;
  *(int32x4_t *)&v17.value = v11;
  v12 = *(_DWORD *)(v10 + 856);
  if (v12 < *(_DWORD *)(v10 + 864) + v12)
  {
    do
    {
      StyleRunAtCharOffset = TXTextLayout::getStyleRunAtCharOffset(v7, v12);
      v15 = *(_DWORD *)(StyleRunAtCharOffset + 24);
      v18 = &v15;
      v16 = *((_OWORD *)std::__tree<std::__value_type<unsigned int,PCHash128>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCHash128>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCHash128>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(v5, &v15, (uint64_t)&std::piecewise_construct, &v18)+ 2);
      PCHash128::operator+=((int *)&v17, (int *)&v16);
      v12 = *(_DWORD *)(StyleRunAtCharOffset + 28) + *(_DWORD *)(StyleRunAtCharOffset + 24);
    }
    while (v12 < *(_DWORD *)(v10 + 864) + *(_DWORD *)(v10 + 856));
    v11 = *(int32x4_t *)&v17.value;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v10 + 928), v11)))) & 1) != 0)
  {
    *(_OWORD *)(v10 + 928) = *(_OWORD *)&v17.value;
    if (v3)
    {
      *(_BYTE *)(v10 + 872) = 1;
      v14 = *(Li3DEngineScene **)(v10 + 944);
      *(_QWORD *)&v16 = *(_QWORD *)(v10 + 1032);
      TXTextLayout::invalidateTextObjectsInRange(v14, (int *)&v16);
      *(_QWORD *)(v10 + 1032) = 0;
    }
  }
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v19);
}

void sub_1B28D12C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)va);
  _Unwind_Resume(a1);
}

int8x8_t *TXParagraphStyle::getStaticHash(uint64_t a1, const void *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  const CMTime *v7;
  uint64_t ValueAsInt;
  int8x8_t *v9;

  (*(void (**)(const void *))(*(_QWORD *)a2 + 40))(a2);
  v4 = *(_QWORD *)(a1 + 832);
  if (*(_QWORD *)(a1 + 840) != v4)
  {
    v5 = 0;
    v6 = 1;
    v7 = (const CMTime *)MEMORY[0x1E0CA2E68];
    do
    {
      OZChannel::getValueAsDouble((OZChannel *)(*(_QWORD *)(v4 + 8 * v5) + 136), v7, 0.0);
      (*(void (**)(const void *))(*(_QWORD *)a2 + 88))(a2);
      ValueAsInt = OZChannel::getValueAsInt((OZChannel *)(*(_QWORD *)(*(_QWORD *)(a1 + 832) + 8 * v5) + 288), v7, 0.0);
      (*(void (**)(const void *, uint64_t))(*(_QWORD *)a2 + 48))(a2, ValueAsInt);
      v5 = v6;
      v4 = *(_QWORD *)(a1 + 832);
      ++v6;
    }
    while (v5 < (*(_QWORD *)(a1 + 840) - v4) >> 3);
  }
  if (!v9)
    __cxa_bad_cast();
  return PCHashWriteStream::getHash(v9);
}

void TXParagraphStyle::setAttributedString(TXParagraphStyle *this, __CFAttributedString *a2)
{
  const void *v4;

  v4 = (const void *)*((_QWORD *)this + 119);
  if (v4)
    CFRelease(v4);
  *((_QWORD *)this + 119) = a2;
}

void TXParagraphStyle::getBehaviors(TXParagraphStyle *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  OZBehavior::GetBehaviorsAffectingChannel((_BYTE *)this + 40, a2, 1);
}

void sub_1B28D1450(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t TXParagraphStyleFolder_Factory::getInstance(TXParagraphStyleFolder_Factory *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXParagraphStyleFolder_Factory::_instanceOnce);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXParagraphStyleFolder_Factory::_instanceOnce, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXParagraphStyleFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXParagraphStyleFolder_Factory::_instance;
}

uint64_t TXParagraphStyleFolder::parseElement(OZChannelFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  int v7;

  v7 = 0;
  if (*((_DWORD *)a3 + 2) != 110)
    return OZChannelFolder::parseElement(this, a2, a3);
  PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 111, (uint64_t)&v7);
  if (v7 == 501)
    return 1;
  else
    return OZChannelFolder::parseElement(this, a2, a3);
}

uint64_t `non-virtual thunk to'TXParagraphStyleFolder::parseElement(TXParagraphStyleFolder *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  return TXParagraphStyleFolder::parseElement((OZChannelFolder *)((char *)this - 16), a2, a3);
}

void TXParagraphStyleFolder::~TXParagraphStyleFolder(OZChannelFolder *this)
{
  OZChannelFolder::~OZChannelFolder(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t OZFactoryBase::getIconName(OZFactoryBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
}

uint64_t OZFactoryBase::getIconNameBW(OZFactoryBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

uint64_t OZFactoryBase::getIconID(OZFactoryBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
}

uint64_t OZFactoryBase::getLibraryIconName(OZFactoryBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
}

uint64_t OZFactoryBase::description(OZFactoryBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

uint64_t OZChannelBase::getInstanceID(OZChannelBase *this)
{
  return this->var3;
}

void ***OZChannelBase::getSerializer(OZChannelBase *this)
{
  return &this->var2;
}

uint64_t OZFactoryBase::getFactoryForSerialization(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t OZChannelBase::isObjectRef(OZChannelBase *this)
{
  return 0;
}

void `non-virtual thunk to'TXParagraphStyleFolder::~TXParagraphStyleFolder(TXParagraphStyleFolder *this)
{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
}

{
  OZChannelFolder::~OZChannelFolder((OZChannelFolder *)((char *)this - 16));
  JUMPOUT(0x1B5E29170);
}

uint64_t TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::getInstance(TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *this)
{
  unint64_t v1;
  char v3;
  char **v4;
  char *v5;

  v1 = atomic_load(&TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::getInstance(void)::TXParagraphStyle_lineSpacingInfo_once);
  if (v1 != -1)
  {
    v5 = &v3;
    v4 = &v5;
    std::__call_once(&TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::getInstance(void)::TXParagraphStyle_lineSpacingInfo_once, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::getInstance(void)::{lambda(void)#1} &&>>);
  }
  return TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::_TXParagraphStyle_lineSpacingInfo;
}

void std::__call_once_param<std::tuple<TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *v0;

  if (!TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::_TXParagraphStyle_lineSpacingInfo)
  {
    v0 = (TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *)operator new();
    TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::TXParagraphStyle_lineSpacingInfo(v0);
    TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::_TXParagraphStyle_lineSpacingInfo = (uint64_t)v0;
  }
}

void sub_1B28D16D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C406F995C74);
  _Unwind_Resume(a1);
}

TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::TXParagraphStyle_lineSpacingInfo(TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *this)
{
  PCString v3;

  PCString::PCString(&v3, "");
  OZChannelInfo::OZChannelInfo((OZChannelInfo *)this, -100.0, 100.0, 1.0, 0.01, 1.0, &v3);
  PCString::~PCString(&v3);
  PCSingleton::PCSingleton((TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *)((char *)this + 80), 100);
  *(_QWORD *)this = &unk_1E64F6C00;
  *((_QWORD *)this + 10) = &unk_1E64F6C20;
  return this;
}

void sub_1B28D1788(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  OZChannelInfo *v10;

  OZChannelInfo::~OZChannelInfo(v10);
  _Unwind_Resume(a1);
}

void TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::~TXParagraphStyle_lineSpacingInfo(TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *this)
{
  PCSingleton::~PCSingleton((TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *)((char *)this + 80));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);
}

{
  PCSingleton::~PCSingleton((TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *)((char *)this + 80));
  OZChannelInfo::~OZChannelInfo((OZChannelInfo *)this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'TXParagraphStyle::TXParagraphStyle_lineSpacingInfo::~TXParagraphStyle_lineSpacingInfo(TXParagraphStyle::TXParagraphStyle_lineSpacingInfo *this)
{
  OZChannelInfo *v1;

  v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);
  OZChannelInfo::~OZChannelInfo(v1);
}

{
  OZChannelInfo *v1;

  v1 = (OZChannelInfo *)((char *)this - 80);
  PCSingleton::~PCSingleton(this);
  OZChannelInfo::~OZChannelInfo(v1);
  JUMPOUT(0x1B5E29170);
}

void OZChannelDouble::OZChannelDouble(OZChannelDouble *this, double a2, const PCString *a3, OZChannelFolder *a4, unsigned int a5, int a6, OZChannelImpl *a7, OZChannelInfo *a8)
{
  OZFactory *OZChannelDouble_FactoryBase;
  OZChannelDouble *v17;
  OZChannelDouble *OZChannelDoubleInfo;
  uint64_t v19;
  uint64_t v20;

  OZChannelDouble_FactoryBase = (OZFactory *)getOZChannelDouble_FactoryBase();
  OZChannel::OZChannel((OZChannel *)this, OZChannelDouble_FactoryBase, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)this = &off_1E6551358;
  *((_QWORD *)this + 2) = &unk_1E65516B8;
  OZChannelDoubleInfo = (OZChannelDouble *)OZChannelDouble::createOZChannelDoubleInfo(v17);
  if (a8)
  {
    v19 = *((_QWORD *)this + 17);
  }
  else
  {
    v19 = OZChannelDouble::_OZChannelDoubleInfo;
    *((_QWORD *)this + 17) = OZChannelDouble::_OZChannelDoubleInfo;
  }
  *((_QWORD *)this + 16) = v19;
  OZChannelDouble::createOZChannelDoubleImpl(OZChannelDoubleInfo);
  if (a7)
  {
    v20 = *((_QWORD *)this + 15);
  }
  else
  {
    v20 = OZChannelDouble::_OZChannelDoubleImpl;
    *((_QWORD *)this + 15) = OZChannelDouble::_OZChannelDoubleImpl;
  }
  *((_QWORD *)this + 14) = v20;
  OZChannel::setDefaultValue((OZChannel *)this, a2);
  OZChannel::setInitialValue((OZChannel *)this, a2, 0);
}

void sub_1B28D196C(_Unwind_Exception *a1)
{
  OZChannel *v1;

  OZChannel::~OZChannel(v1);
  _Unwind_Resume(a1);
}

void std::__call_once_param<std::tuple<TXParagraphStyleFolder_Factory::getInstance(void)::{lambda(void)#1} &&>>::__execute[abi:ne180100]<>()
{
  TXParagraphStyleFolder_Factory *v0;

  v0 = (TXParagraphStyleFolder_Factory *)operator new();
  TXParagraphStyleFolder_Factory::TXParagraphStyleFolder_Factory(v0);
  TXParagraphStyleFolder_Factory::_instance = (uint64_t)v0;
}

void sub_1B28D19C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40479D0EE9);
  _Unwind_Resume(a1);
}

void TXParagraphStyleFolder_Factory::TXParagraphStyleFolder_Factory(TXParagraphStyleFolder_Factory *this)
{
  _QWORD *v2;
  __int128 v3;
  __int128 v4;

  v3 = xmmword_1B3053A10;
  v4 = xmmword_1B3053A00;
  v2 = (_QWORD *)OZFactory::OZFactory((uint64_t)this, &v4, &v3, 1);
  *v2 = &unk_1E64F6DB8;
  PCSingleton::PCSingleton((PCSingleton *)(v2 + 16), 0);
  *(_QWORD *)this = &unk_1E64F6C78;
  *((_QWORD *)this + 16) = &unk_1E64F6D48;
}

void sub_1B28D1A64(_Unwind_Exception *a1)
{
  OZFactory *v1;

  OZFactory::~OZFactory(v1);
  _Unwind_Resume(a1);
}

void TXParagraphStyleFolder_Factory::~TXParagraphStyleFolder_Factory(TXParagraphStyleFolder_Factory *this)
{
  PCSingleton::~PCSingleton((TXParagraphStyleFolder_Factory *)((char *)this + 128));
  OZFactory::~OZFactory((OZFactory *)this);
}

{
  PCSingleton::~PCSingleton((TXParagraphStyleFolder_Factory *)((char *)this + 128));
  OZFactory::~OZFactory((OZFactory *)this);
  JUMPOUT(0x1B5E29170);
}

uint64_t TXParagraphStyleFolder_Factory::create(OZFactory *this, const PCString *a2, unsigned int a3)
{
  uint64_t v6;

  v6 = operator new();
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)v6, this, a2, a3, 0);
  *(_QWORD *)v6 = &off_1E64F6780;
  *(_QWORD *)(v6 + 16) = &unk_1E64F6A58;
  return v6;
}

void sub_1B28D1B50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t TXParagraphStyleFolder_Factory::createCopy(TXParagraphStyleFolder_Factory *this, OZFactoryBase *a2)
{
  uint64_t v3;
  const OZChannelBase *v4;

  v3 = operator new();
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)v3, v4, 0);
  *(_QWORD *)v3 = &off_1E64F6780;
  *(_QWORD *)(v3 + 16) = &unk_1E64F6A58;
  return v3;
}

void sub_1B28D1BF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

uint64_t TXParagraphStyleFolder_Factory::createInstance(TXParagraphStyleFolder_Factory *this, OZFactoryBase *a2)
{
  return 0;
}

void TXParagraphStyleFolder_Factory::description(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("Channel"));
}

uint64_t TXParagraphStyleFolder_Factory::unlocalizedDescription(TXParagraphStyleFolder_Factory *this)
{
  return (*(uint64_t (**)(TXParagraphStyleFolder_Factory *))(*(_QWORD *)this + 40))(this);
}

void TXParagraphStyleFolder_Factory::manufacturer(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("Apple"));
}

uint64_t TXParagraphStyleFolder_Factory::version(TXParagraphStyleFolder_Factory *this)
{
  return 1;
}

void TXParagraphStyleFolder_Factory::getCategoryName(PCSharedCount *a1@<X8>)
{
  PCSharedCount::PCSharedCount(a1);
}

const char *TXParagraphStyleFolder_Factory::getBundleID(TXParagraphStyleFolder_Factory *this)
{
  return "";
}

uint64_t TXParagraphStyleFolder_Factory::getIconIDInternal(TXParagraphStyleFolder_Factory *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t TXParagraphStyleFolder_Factory::createChannelCopy(TXParagraphStyleFolder_Factory *this, OZChannelBase *a2)
{
  uint64_t v3;
  const OZChannelBase *v4;

  v3 = operator new();
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)v3, v4, 0);
  *(_QWORD *)v3 = &off_1E64F6780;
  *(_QWORD *)(v3 + 16) = &unk_1E64F6A58;
  return v3;
}

void sub_1B28D1CE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40138C3426);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXParagraphStyleFolder_Factory::~TXParagraphStyleFolder_Factory(TXParagraphStyleFolder_Factory *this)
{
  OZFactory *v1;

  v1 = (OZFactory *)((char *)this - 128);
  PCSingleton::~PCSingleton(this);
  OZFactory::~OZFactory(v1);
}

{
  TXParagraphStyleFolder_Factory::~TXParagraphStyleFolder_Factory((TXParagraphStyleFolder_Factory *)((char *)this - 128));
}

char *std::vector<TXLineMetrics>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 58)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TXLineMetrics>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

char *std::vector<TXLineMetrics>::__init_with_size[abi:ne180100]<TXLineMetrics*,TXLineMetrics*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<TXLineMetrics>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      v9 = a2[1];
      v10 = a2[3];
      v7[2] = a2[2];
      v7[3] = v10;
      *v7 = v8;
      v7[1] = v9;
      v7 += 4;
      a2 += 4;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B28D1E0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TXDirectionalRun>::__push_back_slow_path<TXDirectionalRun const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *__p;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v20 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v7, v9);
  v11 = &v10[24 * v4];
  __p = v10;
  v17 = v11;
  v19 = &v10[24 * v12];
  v13 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v11[16] = v13;
  v18 = v11 + 24;
  std::vector<TXDirectionalRun>::__swap_out_circular_buffer(a1, &__p);
  v14 = a1[1];
  if (v18 != v17)
    v18 = &v17[(v18 - v17 - 24) % 0x18uLL];
  if (__p)
    operator delete(__p);
  return v14;
}

void sub_1B28D1F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<TXDirectionalRun>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_BYTE *)(v4 + 16) = *(_BYTE *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    v11[5] = 0;
    v11[6] = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t **std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__tree_node<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          *(_OWORD *)(v8 + 5) = *(_OWORD *)(v9 + 5);
          std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__node_insert_multi(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__emplace_multi<std::pair<unsigned long const,std::pair<unsigned long,unsigned long>> const&>(v5, (uint64_t)(a2 + 4));
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1B28D2204(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

_OWORD *std::__tree<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::__map_value_compare<unsigned long,std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>,std::less<unsigned long>,true>,std::allocator<std::__value_type<unsigned long,std::pair<unsigned long,unsigned long>>>>::__emplace_multi<std::pair<unsigned long const,std::pair<unsigned long,unsigned long>> const&>(uint64_t **a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = operator new(0x38uLL);
  v5 = v4;
  v4[2] = *(_OWORD *)a2;
  *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 16);
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (*((_QWORD *)v4 + 4) >= (unint64_t)v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

_QWORD *std::vector<TXTabStop *>::__init_with_size[abi:ne180100]<TXTabStop **,TXTabStop **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<double>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B28D237C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<std::__value_type<unsigned int,PCHash128>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCHash128>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCHash128>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,PCHash128>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCHash128>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCHash128>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

void std::__tree<std::__value_type<unsigned int,PCHash128>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PCHash128>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PCHash128>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _DWORD *v6;

  v5 = a1 + 8;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[7] = **a2;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v6 + 8));
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B28D24AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

_QWORD *TXTabStop::TXTabStop(_QWORD *a1, TXParagraphStyle *a2, unsigned int a3, double a4)
{
  OZChannelFolder *v8;
  OZChannelFolder *HeadingChannel;
  PCString v11;
  PCString v12;

  *a1 = &off_1E64F6E88;
  v8 = (OZChannelFolder *)(a1 + 1);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Layout Tab Stop Heading"));
  HeadingChannel = (OZChannelFolder *)TXParagraphStyle::getHeadingChannel(a2);
  OZChannelFolder::OZChannelFolder(v8, &v12, HeadingChannel, 0x1F5u, 8u, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Layout Tab Stop Position"));
  OZChannelDouble::OZChannelDouble((OZChannelDouble *)(a1 + 17), a4, &v12, v8, 0x1F6u, 0, 0, 0);
  PCString::~PCString(&v12);
  PCURL::PCURL((PCURL *)&v12, CFSTR("Text Layout Tab Stop Type Enum"));
  PCURL::PCURL((PCURL *)&v11, CFSTR("Text Layout Tab Stop Type"));
  OZChannelEnum::OZChannelEnum((OZChannelEnum *)(a1 + 36), a3, &v12, &v11, v8, 0x1F7u, 0, 0, 0);
  PCString::~PCString(&v11);
  PCString::~PCString(&v12);
  OZChannel::setMin((OZChannel *)(a1 + 17), 0.0);
  return a1;
}

void sub_1B28D263C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, PCString a12)
{
  OZChannelFolder *v12;
  OZChannel *v13;
  OZChannelEnum *v14;

  OZChannelEnum::~OZChannelEnum(v14);
  OZChannel::~OZChannel(v13);
  OZChannelFolder::~OZChannelFolder(v12);
  _Unwind_Resume(a1);
}

void TXTabStop::~TXTabStop(TXTabStop *this)
{
  OZChannel *v2;
  OZChannelFolder *v3;

  *(_QWORD *)this = &off_1E64F6E88;
  v2 = (OZChannel *)((char *)this + 136);
  v3 = (OZChannelFolder *)((char *)this + 8);
  OZChannelFolder::removeDescendant((OZChannelFolder *)((char *)this + 8), (OZChannelBase *)((char *)this + 136));
  OZChannelFolder::removeDescendant(v3, (OZChannelBase *)((char *)this + 288));
  OZChannelEnum::~OZChannelEnum((TXTabStop *)((char *)this + 288));
  OZChannel::~OZChannel(v2);
  OZChannelFolder::~OZChannelFolder(v3);
}

{
  TXTabStop::~TXTabStop(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t TXTabStop::writeHeader(TXTabStop *this, PCSerializerWriteStream *a2)
{
  uint64_t v4;

  TXSequenceChannels::pushChannelIntoChannelList(a2, (OZChannelBase *)&TXTabStopScope);
  (*(void (**)(PCSerializerWriteStream *, uint64_t))(*(_QWORD *)a2 + 16))(a2, 401);
  v4 = *((_QWORD *)this + 19);
  this = (TXTabStop *)((char *)this + 152);
  (*(void (**)(TXTabStop *, PCSerializerWriteStream *, _QWORD))(v4 + 16))(this, a2, 0);
  (*(void (**)(TXTabStop *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)this + 24))(this, a2, 0, 1, 1);
  (*(void (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD))(*((_QWORD *)this + 19) + 16))((char *)this + 152, a2, 0);
  (*(void (**)(char *, PCSerializerWriteStream *, _QWORD, uint64_t, uint64_t))(*((_QWORD *)this + 19) + 24))((char *)this + 152, a2, 0, 1, 1);
  return (*(uint64_t (**)(PCSerializerWriteStream *))(*(_QWORD *)a2 + 24))(a2);
}

uint64_t TXTabStop::writeBody(TXTabStop *this, PCSerializerWriteStream *a2)
{
  return PCSerializerWriteStream::popScope((uint64_t)a2);
}

uint64_t TXTabStop::parseBegin(TXTabStop *this, PCSerializerReadStream *a2)
{
  PCSerializerReadStream::pushScope(a2, (uint64_t)&TXTabStopScope);
  return 1;
}

uint64_t TXTabStop::parseElement(TXTabStop *this, PCSerializerReadStream *a2, PCStreamElement *a3)
{
  unint64_t v6;
  int v8;
  double v9;

  if (*((_DWORD *)a3 + 2) == 401)
  {
    v9 = 0.0;
    v8 = 0;
    if (PCSerializerReadStream::getAttributeAsDouble((uint64_t)a2, (uint64_t)a3, 1, (uint64_t)&v9))
      OZChannel::setValue((OZChannel *)((char *)this + 136), MEMORY[0x1E0CA2E68], v9, 0);
    if (PCSerializerReadStream::getAttributeAsUInt32((uint64_t)a2, (uint64_t)a3, 2, (uint64_t)&v8))
    {
      LODWORD(v6) = v8;
      OZChannel::setValue((OZChannel *)((char *)this + 288), MEMORY[0x1E0CA2E68], (double)v6, 0);
    }
  }
  return 1;
}

uint64_t TXTextInput::create(TXTextInput *this, const PCString *a2)
{
  uint64_t SceneNode;
  __int128 v4;

  v4 = xmmword_1B3053B10;
  SceneNode = OZApplication::createSceneNode(theApp, (unsigned int *)&v4, (uint64_t)this, (uint64_t)a2);
  if (SceneNode)
    return SceneNode - 200;
  else
    return 0;
}

void TXTextInput::TXTextInput(TXTextInput *this, OZFactory *a2, const PCString *a3, unsigned int a4)
{
  uint64_t v4;

  TXTextLayout::TXTextLayout(this, a2, a3, a4);
  *(_QWORD *)v4 = off_1E64F6EF8;
  *(_QWORD *)(v4 + 200) = &unk_1E64F7408;
  *(_QWORD *)(v4 + 216) = &unk_1E64F7CE0;
  *(_QWORD *)(v4 + 248) = &off_1E64F6EF8[520];
  *(_QWORD *)(v4 + 6728) = &off_1E64F6EF8[531];
  *(_QWORD *)(v4 + 18976) = &off_1E64F6EF8[558];
  *(_BYTE *)(v4 + 64416) = 0;
}

void TXTextInput::TXTextInput(TXTextInput *this, const TXTextInput *a2, uint64_t a3)
{
  uint64_t v3;

  TXTextLayout::TXTextLayout(this, a2, a3);
  *(_QWORD *)v3 = off_1E64F6EF8;
  *(_QWORD *)(v3 + 200) = &unk_1E64F7408;
  *(_QWORD *)(v3 + 216) = &unk_1E64F7CE0;
  *(_QWORD *)(v3 + 248) = &off_1E64F6EF8[520];
  *(_QWORD *)(v3 + 6728) = &off_1E64F6EF8[531];
  *(_QWORD *)(v3 + 18976) = &off_1E64F6EF8[558];
  *(_BYTE *)(v3 + 64416) = 0;
}

void `non-virtual thunk to'TXTextInput::~TXTextInput(TXTextInput *this)
{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 200));
}

{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 216));
}

{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 248));
}

{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 6728));
}

{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 18976));
}

{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 200));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 216));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 248));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 6728));
  JUMPOUT(0x1B5E29170);
}

{
  TXTextLayout::~TXTextLayout((TXTextInput *)((char *)this - 18976));
  JUMPOUT(0x1B5E29170);
}

void TXTextInput::~TXTextInput(TXTextInput *this)
{
  TXTextLayout::~TXTextLayout(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t `non-virtual thunk to'TXTextInput::deleteThis(TXTextInput *this, OZChannelBase *a2)
{
  return TXTextLayout::deleteThis((TXTextInput *)((char *)this - 200), a2);
}

{
  return TXTextLayout::deleteThis((TXTextInput *)((char *)this - 216), a2);
}

void TXTextInput::cloneBehaviorsEffects(TXTextInput *this, const OZSceneNode *a2, uint64_t a3)
{
  TXTextLayout::cloneBehaviorsEffects(this, a2, a3);
  if (*((_BYTE *)this + 64416))
    TXTextInput::rebuildTextFromBehavior(this);
}

void TXTextInput::rebuildTextFromBehavior(TXTextInput *this)
{
  OZScene **v2;
  uint64_t *v3;
  const void *v4;
  OZBehavior *v5;
  OZRigBehavior *v6;
  OZChannel **Widget;
  uint64_t v8;
  OZScene *v9;
  const void *ChannelForSnapshot;
  void *v11;
  CMTime v12;
  double v13;
  unsigned int v14[2];
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _BYTE v18[8];

  v2 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)v18, v2);
  v15 = (uint64_t)&v15;
  v16 = &v15;
  v17 = 0;
  OZBehavior::GetBehaviorsAffectingChannel((_BYTE *)this + 19048, &v15, 1);
  v3 = v16;
  if (v16 != &v15)
  {
    while (1)
    {
      v4 = (const void *)v3[2];
      if (v4)
      {
        if (v5)
        {
          v6 = v5;
          if (OZBehavior::isEnabledAndUseBehaviors(v5))
          {
            v13 = 0.0;
            *(_QWORD *)v14 = 0;
            Widget = (OZChannel **)OZRigBehavior::getWidget(v6);
            v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 1464))((char *)this + 200);
            v9 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 264))(v8);
            OZScene::getCurrentTime(v9, (__n128 *)&v12);
            OZRigWidget::getCurrentSnapshotIDs(Widget, &v12, &v14[1], v14, &v13);
            ChannelForSnapshot = (const void *)OZRigBehavior::getChannelForSnapshot(v6, v14[1]);
            if (ChannelForSnapshot)
            {
              if (v11)
                break;
            }
          }
        }
      }
      v3 = (uint64_t *)v3[1];
      if (v3 == &v15)
        goto LABEL_8;
    }
    (*(void (**)(CMTime *__return_ptr))(*(_QWORD *)v11 + 848))(&v12);
    TXTextLayout::setString(this, (const PCString *)&v12, 1);
    PCString::~PCString((PCString *)&v12);
  }
LABEL_8:
  std::__list_imp<unsigned int>::clear(&v15);
  TXTextInput::rebuildTextFromCurrentStringChannelState(this);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)v18);
}

void sub_1B28D2D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  PCString::~PCString(&a10);
  std::__list_imp<unsigned int>::clear(&a15);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a18);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'TXTextInput::cloneBehaviorsEffects(TXTextInput *this, const OZSceneNode *a2, uint64_t a3)
{
  TXTextInput::cloneBehaviorsEffects((TXTextInput *)((char *)this - 200), a2, a3);
}

void TXTextInput::getBoundsForHitCheck(uint64_t a1, double *a2, CMTime *a3)
{
  OZChannel *v6;
  char *StringPtr;
  float Size;
  double AlignmentAtCursor;
  _BOOL4 isVerticalLayout;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  double v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  CMTime v26;
  TXTextStyle *v27;
  std::__shared_weak_count *v28;

  v6 = (OZChannel *)(a1 + 20464);
  if (OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E0CA2E68], 0.0)
    && OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) != 2
    || (StringPtr = TXChannelString::getStringPtr((TXChannelString *)(a1 + 19048)),
        PCString::size((PCString *)StringPtr))
    && !TXTextLayout::isAllWhitespace((PCString *)a1))
  {
    (*(void (**)(uint64_t, double *, CMTime *))(*(_QWORD *)(a1 + 200) + 1488))(a1 + 200, a2, a3);
  }
  else
  {
    TXTextLayout::getCurrentStyleForInsertion(a1, &v27);
    v26 = *a3;
    Size = TXTextStyle::getSize((OZChannel *)v27, &v26, 0.0);
    AlignmentAtCursor = TXTextLayout::getAlignmentAtCursor((TXTextLayout *)a1);
    isVerticalLayout = TXTextLayout::isVerticalLayout((TXTextLayout *)a1);
    v11 = Size;
    v12 = Size * 6.0;
    v13 = Size / -3.0;
    v14 = 0.0;
    if (AlignmentAtCursor == 1.0)
      v15 = v12 * -0.5;
    else
      v15 = 0.0;
    if (AlignmentAtCursor == 2.0)
      v16 = -v12;
    else
      v16 = v15;
    if (AlignmentAtCursor == 1.0)
      v14 = v12 * -0.5;
    if (AlignmentAtCursor == 0.0)
      v14 = -v12;
    if (isVerticalLayout)
    {
      v16 = v11 * -0.5;
      v13 = v14;
      v17 = Size;
    }
    else
    {
      v17 = Size * 6.0;
    }
    if (isVerticalLayout)
      v11 = Size * 6.0;
    *a2 = v16;
    a2[1] = v13;
    a2[2] = v17;
    a2[3] = v11;
    v18 = v28;
    if (v28)
    {
      p_shared_owners = (unint64_t *)&v28->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  v21 = 0.0;
  if (OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) == 1
    || OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) == 3)
  {
    v22 = TXTextLayout::getScrollPositionInPixels((TXTextLayout *)a1) + 0.0;
    *a2 = *a2 + 0.0;
    v24 = a2[1];
    v23 = a2 + 1;
    v21 = v24;
LABEL_29:
    *v23 = v22 + v21;
    return;
  }
  if (OZChannel::getValueAsInt(v6, MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    *a2 = *a2 + TXTextLayout::getScrollPositionInPixels((TXTextLayout *)a1) + 0.0;
    v25 = a2[1];
    v23 = a2 + 1;
    v22 = v25;
    goto LABEL_29;
  }
}

void sub_1B28D2FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TXTextInput::behaviorChangedState(TXTextInput *this, OZBehavior *lpsrc)
{
  OZSingleChannelBehavior *v4;
  OZSingleChannelBehavior *v5;
  char *v6;

  if (!lpsrc)
    return 0;
  v6 = (char *)this + 19048;
  if ((!v4 || (char *)OZSingleChannelBehavior::getChanBase(v4) != v6)
    && (!v5 || (char *)OZSingleChannelBehavior::getChanBase(v5) != v6))
  {
    return 0;
  }
  TXTextInput::rebuildTextFromBehavior(this);
  return 1;
}

uint64_t `non-virtual thunk to'TXTextInput::behaviorChangedState(TXTextInput *this, OZBehavior *a2)
{
  return TXTextInput::behaviorChangedState((TXTextInput *)((char *)this - 200), a2);
}

void TXTextInput::removeBehavior(TXTextInput *this, OZBehavior *a2)
{
  OZSceneNode::removeBehavior((TXTextInput *)((char *)this + 200), a2);
}

uint64_t *TXTextInput::updateLinkedObjects(TXTextInput *this)
{
  uint64_t *result;
  uint64_t *v3;
  uint64_t v4;
  const void *v5;
  TXTextInput *v6;
  _QWORD *i;
  const void *v8;
  OZBehavior *v9;
  OZLinkBehavior *v10;
  OZChannelBase *SourceChannel;
  _BYTE v12[25];
  __int128 v13;
  __int128 v14;
  int v15;
  _BYTE v16[25];
  _OWORD v17[2];
  int v18;
  _BYTE v19[25];
  _QWORD v20[4];
  int v21;

  result = (uint64_t *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  if (result)
  {
    v3 = result;
    memset(v20, 0, sizeof(v20));
    memset(v19, 0, 24);
    v21 = 1065353216;
    memset(v17, 0, sizeof(v17));
    memset(v16, 0, 24);
    v18 = 1065353216;
    OZScene::begin_t<TXTextInput,false,true>(result, (uint64_t)v12);
    *(_OWORD *)v19 = *(_OWORD *)v12;
    *(_OWORD *)&v19[9] = *(_OWORD *)&v12[9];
    v21 = v15;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v20, (__n128 *)v14, 0);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
    v4 = v3[151];
    v13 = 0u;
    v14 = 0u;
    v15 = 1065353216;
    *(_QWORD *)v12 = v3 + 150;
    *(_QWORD *)&v12[8] = v4;
    *(_QWORD *)&v12[16] = v3 + 150;
    v12[24] = 0;
    *(_OWORD *)v16 = *(_OWORD *)v12;
    *(_OWORD *)&v16[9] = *(_OWORD *)&v12[9];
    v18 = 1065353216;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(v17, 0, 0);
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)&v13);
    while (*(_QWORD *)v19 != *(_QWORD *)v16)
    {
      if (*(_QWORD *)v19 == *(_QWORD *)&v19[16] || (v5 = *(const void **)(*(_QWORD *)v19 + 16)) == 0)
        v6 = 0;
      else
      if (v6 != this)
      {
        for (i = (_QWORD *)*((_QWORD *)v6 + 151); i != (_QWORD *)((char *)v6 + 1200); i = (_QWORD *)i[1])
        {
          v8 = (const void *)i[2];
          if (v8)
          {
            if (v9)
            {
              v10 = v9;
              if (OZBehavior::isEnabledAndUseBehaviors(v9))
              {
                SourceChannel = OZLinkBehavior::getSourceChannel(v10);
                if (SourceChannel)
                {
                }
              }
            }
          }
        }
      }
      OZObject::iterator_t<TXTextInput,false,true,OZObject::defaultValidator>::operator++((uint64_t *)v19);
    }
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v17);
    return (uint64_t *)std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table((uint64_t)v20);
  }
  return result;
}

void sub_1B28D32B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v11);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(a11);
  _Unwind_Resume(a1);
}

uint64_t *OZScene::begin_t<TXTextInput,false,true>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  const void *v4;

  v3 = (uint64_t *)result[151];
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = result + 150;
  *(_BYTE *)(a2 + 24) = 0;
  if (v3 != result + 150)
  {
    v4 = (const void *)v3[2];
    if (!v4)
      return OZObject::iterator_t<TXTextInput,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
    if (!result)
      return OZObject::iterator_t<TXTextInput,false,true,OZObject::defaultValidator>::operator++((uint64_t *)a2);
  }
  return result;
}

void sub_1B28D3388(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *OZObject::iterator_t<TXTextInput,false,true,OZObject::defaultValidator>::operator++(uint64_t *a1)
{
  uint64_t i;
  const void *v3;

  OZObject::iterator_t<TXTextInput,false,true,OZObject::defaultValidator>::increment(a1);
  for (i = *a1; *a1 != a1[2]; i = *a1)
  {
    v3 = *(const void **)(i + 16);
    if (v3
    {
      break;
    }
    OZObject::iterator_t<TXTextInput,false,true,OZObject::defaultValidator>::increment(a1);
  }
  return a1;
}

uint64_t *`non-virtual thunk to'TXTextInput::updateLinkedObjects(TXTextInput *this)
{
  return TXTextInput::updateLinkedObjects((TXTextInput *)((char *)this - 200));
}

uint64_t TXTextInput::setText(TXTextInput *this, CMTime *a2, PCString *a3)
{
  char *StringPtr;
  unsigned int v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;
  CMTime v14;
  CMTime v15;

  v15 = *a2;
  StringPtr = TXChannelString::getStringPtr((TXTextInput *)((char *)this + 19048));
  v7 = PCString::size((PCString *)StringPtr);
  TXTextInput::deleteTextHelper(this, &v15, 0, v7);
  v14 = *a2;
  v12 = 0;
  v13 = 0;
  TXTextInput::insertHelper((uint64_t)this, &v14, 0, a3, &v12);
  v8 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return (*(uint64_t (**)(TXTextInput *))(*(_QWORD *)this + 1240))(this);
}

void sub_1B28D3504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void TXTextInput::deleteTextHelper(TXTextInput *this, CMTime *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  OZScene *v8;
  char v9;
  __n128 v10;
  int64_t v11;
  OZRenderState v12;
  PCString v13;

  if (a4)
  {
    v4 = a4;
    TXChannelString::getString((PCString *)this + 2381, &v13);
    if (PCString::size(&v13) >= a3)
    {
      if (v4 + a3 > PCString::size(&v13))
        v4 = PCString::size(&v13) - a3;
      PCString::erase(&v13, a3, v4);
      TXTextLayout::setString(this, &v13, 0);
      TXTextLayout::updateParagraphStylesAfterTextDelete((uint64_t **)this, a3, v4);
      TXTextLayout::updateStyleRunsAfterTextDelete(this, a3, v4);
      TXTextLayout::updateDisplayString((PCString *)this, a2);
      *((_BYTE *)this + 19320) = 0;
      TXTextLayout::updateKerningsAfterTextDeletion(this, a3, v4);
      TXTextLayout::resetName((PCString *)this);
      if (TXTextLayout::shouldScaleToBothMargins(this)
        && (*(unsigned int (**)(TXTextInput *))(*(_QWORD *)this + 1144))(this))
      {
        OZChannel::setInitialValue((OZChannel *)((char *)this + 61464), 1.0, 1);
      }
      OZRenderState::OZRenderState(&v12);
      v8 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
      if (v8)
      {
        OZScene::getCurrentTime(v8, &v10);
        *(__n128 *)&v12.var0.var0 = v10;
        v12.var0.var3 = v11;
      }
      TXTextLayout::doLayout(this, &v12, 0);
      OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)(v4 + a3));
      *((int32x2_t *)this + 2407) = vdup_n_s32(a3);
      if (*((_BYTE *)this + 19296)
        && OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
      {
        v9 = 0;
      }
      else
      {
        --a3;
        v9 = 1;
      }
      *((_DWORD *)this + 4746) = a3;
      *((_BYTE *)this + 18988) = v9;
      TXTextLayout::setRecomputeGlyphPositions((uint64_t)this);
    }
    PCString::~PCString(&v13);
  }
}

void sub_1B28D36F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 56));
  _Unwind_Resume(a1);
}

BOOL TXTextInput::insertHelper(uint64_t a1, const CMTime *a2, unsigned int a3, PCString *this, uint64_t *a5)
{
  unsigned int v9;
  int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  UniChar *v18;
  uint64_t StyleRunAtCharOffset;
  OZScene *v20;
  uint64_t v21;
  int v22;
  int v24;
  char v25;
  unsigned int v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  __n128 v31;
  int64_t v32;
  OZRenderState v33;
  PCString v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  CMTime v37;
  PCString v38;

  TXTextLayout::stripUnsupportedXMLChars(this, &v38);
  TXTextInput::stripCarriageReturns(&v38, (PCString *)&v33);
  PCString::set(&v38, (const PCString *)&v33);
  PCString::~PCString((PCString *)&v33);
  v9 = PCString::size(&v38);
  v10 = (int *)(a1 + 18984);
  v11 = *(_DWORD *)(a1 + 19256);
  v12 = *(_DWORD *)(a1 + 19260);
  if (v11 != v12)
  {
    v37 = *a2;
    if (v11 >= v12)
      v13 = v12;
    else
      v13 = v11;
    if (v11 <= v12)
      v14 = v12 - v11;
    else
      v14 = v11 - v12;
    TXTextInput::deleteTextHelper((TXTextInput *)a1, &v37, v13, v14);
  }
  if (v9)
  {
    if (*a5)
    {
      v15 = a5[1];
      v35 = *a5;
      v36 = (std::__shared_weak_count *)v15;
      if (v15)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
    }
    else
    {
      TXTextLayout::getCurrentStyleForInsertion(a1, &v35);
    }
    v18 = PCString::createUniStr(&v38);
    TXChannelString::getString((PCString *)(a1 + 19048), &v34);
    PCString::insert(&v34, a3, &v38);
    TXTextLayout::setString((TXTextLayout *)a1, &v34, 0);
    if (*a5)
    {
      TXTextLayout::updateStyleRunsAfterTextInsert(a1, a3, v9);
      v33.var0.var0 = __PAIR64__(v9, a3);
      if (TXTextLayout::splitStyleRunsInRange((Li3DEngineScene *)a1, (unsigned int *)&v33))
      {
        StyleRunAtCharOffset = TXTextLayout::getStyleRunAtCharOffset((TXTextLayout *)a1, a3);
        std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(StyleRunAtCharOffset + 8), a5);
        TXTextLayout::addStyle(a1, (OZChannelBase **)a5, 1);
      }
    }
    else
    {
      TXTextLayout::updateStyleRunsAfterTextInsert(a1, a3, v9);
    }
    TXTextLayout::updateParagraphStylesAfterTextInsert((TXTextLayout *)a1, a3, v9);
    TXTextLayout::updateDisplayString((PCString *)a1, a2);
    OZRenderState::OZRenderState(&v33);
    v20 = (OZScene *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 200) + 272))(a1 + 200);
    if (v20)
    {
      OZScene::getCurrentTime(v20, &v31);
    }
    else
    {
      v31 = *(__n128 *)MEMORY[0x1E0CA2E68];
      v32 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
    }
    v21 = 0;
    *(__n128 *)&v33.var0.var0 = v31;
    v33.var0.var3 = v32;
    do
    {
      v22 = v18[v21];
      if (v22 == 13 || v22 == 10)
        TXTextLayout::updateParagraphStylesAfterNewLineInsert((TXTextLayout *)a1, a3 + v21);
      ++v21;
    }
    while (v9 != v21);
    TXTextLayout::updateKerningsAfterTextInsertion((uint64_t *)a1, a3, v9);
    if (TXTextLayout::shouldScaleToBothMargins((TXTextLayout *)a1)
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 1144))(a1))
    {
      OZChannel::setInitialValue((OZChannel *)(a1 + 61464), 1.0, 1);
    }
    *v10 = -1;
    TXTextLayout::doLayout((TXTextLayout *)a1, &v33, 0);
    OZChannelBase::setRangeName((OZChannelBase *)a1, (const PCString *)a3);
    *(_DWORD *)(a1 + 19260) = v9 + a3;
    *(_DWORD *)(a1 + 19256) = v9 + a3;
    if (*(_BYTE *)(a1 + 19296)
      && OZChannel::getValueAsInt((OZChannel *)(a1 + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
    {
      v24 = PCString::size(&v38) + a3;
      v25 = 1;
    }
    else
    {
      v26 = PCString::size(&v38);
      v25 = 0;
      v24 = a3 + v26 - 1;
    }
    *v10 = v24;
    *(_BYTE *)(a1 + 18988) = v25;
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 832))(a1, 0.0);
    *v10 = -1;
    TXTextLayout::doMotionLayout((TXTextLayout *)a1, &v33);
    TXTextLayout::performLayoutWithPath((TXTextLayout *)a1, (CMTime *)&v33);
    OZChannelBase::setRangeName((OZChannelBase *)a1, (const PCString *)&v33);
    MEMORY[0x1B5E2914C](v18, 0x1000C80BDFB0063);
    TXTextLayout::resetName((PCString *)a1);
    TXTextLayout::setRecomputeGlyphPositions(a1);
    PCString::~PCString(&v34);
    v27 = v36;
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  PCString::~PCString(&v38);
  return v9 != 0;
}

void sub_1B28D3AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13)
{
  uint64_t v13;

  PCString::~PCString((PCString *)(v13 - 88));
  _Unwind_Resume(a1);
}

void TXTextInput::insertAndCreateStyle(TXTextInput *this, CMTime *a2, uint64_t a3, const PCString *a4, uint64_t a5, uint64_t a6)
{
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  CMTimeEpoch epoch;
  __int128 v27;
  OZSceneNode **v28;
  std::__shared_weak_count *v29;
  __int128 v30;

  v30 = 0uLL;
  if (*((_DWORD *)this + 4814) != *((_DWORD *)this + 4815))
  {
    TXTextLayout::getStyleAtCharOffset((uint64_t)this, a3, &v28);
    std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(v28, &v27);
    v12 = v27;
    v27 = 0uLL;
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    v30 = v12;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    v19 = v29;
    if (v29)
    {
      v20 = (unint64_t *)&v29->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  v25 = *(_OWORD *)&a2->value;
  epoch = a2->epoch;
  (*(void (**)(TXTextInput *, __int128 *, uint64_t, const PCString *, __int128 *, uint64_t, uint64_t))(*(_QWORD *)this + 1208))(this, &v25, a3, a4, &v30, a5, a6);
  v22 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1B28D3D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

BOOL TXTextInput::insert(Li3DEngineScene *this, CMTime *a2, unsigned int a3, PCString *a4, uint64_t *a5, int a6, int a7)
{
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  OZScene **v17;
  _BOOL8 inserted;
  CMTime v20;
  PCString v21;
  PCString v22;

  if (a7)
  {
    v13 = (char *)this + 200;
    if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200))
    {
      if (*(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v13 + 272))((char *)this + 200) + 1504))
      {
        v14 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 272))((char *)this + 200);
        OZChannelBase::setRangeName(*(OZChannelBase **)(v14 + 1504), (const PCString *)1);
      }
    }
  }
  if (a6 && TXTextInput::canHandleUndo(this))
  {
    TXTextInput::getUndoDescription(this, (PCURL *)&v22);
    PCURL::PCURL((PCURL *)&v21, CFSTR("Undo Typing"));
    v15 = (char *)this + 52364;
    if (PCString::compare(&v22, &v21) || *((_DWORD *)this + 4814) != *((_DWORD *)this + 4815))
    {
      PCString::~PCString(&v21);
    }
    else
    {
      v16 = *v15;
      PCString::~PCString(&v21);
      if (!v16)
        goto LABEL_13;
    }
    PCURL::PCURL((PCURL *)&v21, CFSTR("Undo Typing"));
    (*(void (**)(Li3DEngineScene *, PCString *, _QWORD))(*(_QWORD *)this + 872))(this, &v21, 0);
    PCString::~PCString(&v21);
    *v15 = 0;
LABEL_13:
    PCString::~PCString(&v22);
  }
  v17 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v22, v17);
  v20 = *a2;
  inserted = TXTextInput::insertHelper((uint64_t)this, &v20, a3, a4, a5);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v22);
  (*(void (**)(Li3DEngineScene *))(*(_QWORD *)this + 1240))(this);
  return inserted;
}

void sub_1B28D3F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a13);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

void TXTextInput::stripCarriageReturns(PCString *this@<X0>, PCString *a2@<X8>)
{
  const __CFAllocator *v5;
  __CFString *v6;
  __CFString *MutableCopy;
  __CFString *v8;
  CFRange v9;

  if (PCString::size(this) < 2)
  {
    PCString::PCString(a2, this);
  }
  else
  {
    v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v6 = PCString::cf_str(this);
    MutableCopy = CFStringCreateMutableCopy(v5, 0, v6);
    v8 = PCString::cf_str(this);
    v9.length = CFStringGetLength(v8);
    v9.location = 0;
    CFStringFindAndReplace(MutableCopy, CFSTR("\r\n"), CFSTR("\n\n"), v9, 0);
    PCURL::PCURL((PCURL *)a2, MutableCopy);
    CFRelease(MutableCopy);
  }
}

void sub_1B28D3FFC(_Unwind_Exception *a1)
{
  PCString *v1;

  PCString::~PCString(v1);
  _Unwind_Resume(a1);
}

uint64_t TXTextInput::rebuildTextFromCurrentStringChannelState(TXTextInput *this)
{
  char *v2;
  OZScene *v3;
  uint64_t v4;
  OZScene **v5;
  _DWORD *v6;
  char v7;
  uint64_t v8;
  __n128 v10;
  int64_t v11;
  OZRenderState v12;

  OZRenderState::OZRenderState(&v12);
  v2 = (char *)this + 200;
  v3 = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  if (v3)
  {
    OZScene::getCurrentTime(v3, &v10);
  }
  else
  {
    v10 = *(__n128 *)MEMORY[0x1E0CA2E68];
    v11 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  }
  *(__n128 *)&v12.var0.var0 = v10;
  v12.var0.var3 = v11;
  v4 = (*(uint64_t (**)(TXTextInput *))(*(_QWORD *)this + 216))(this);
  v5 = (OZScene **)Li3DEngineScene::sceneManager(this);
  OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v10, v5);
  TXTextLayout::resetState(this);
  TXTextLayout::updateStyleRunsAfterTextInsert((uint64_t)this, 0, v4);
  TXTextLayout::updateDisplayString((PCString *)this, (const CMTime *)&v12);
  (*(void (**)(TXTextInput *))(*(_QWORD *)this + 1096))(this);
  TXTextLayout::createParagraphStylesFromNewLines(this, 0);
  TXTextLayout::rebuildParagraphStyles((PCString *)this);
  v6 = (_DWORD *)((char *)this + 18984);
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v10);
  *((_DWORD *)this + 4746) = -1;
  if (*((_BYTE *)this + 19296)
    && OZChannel::getValueAsInt((OZChannel *)((char *)this + 20464), MEMORY[0x1E0CA2E68], 0.0) == 4)
  {
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v4 = (v4 - 1);
  }
  *v6 = v4;
  *((_BYTE *)this + 18988) = v7;
  (*(void (**)(TXTextInput *, uint64_t, double))(*(_QWORD *)this + 832))(this, v4, 0.0);
  *v6 = -1;
  if ((*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200)
    && *(_QWORD *)((*(uint64_t (**)(char *))(*(_QWORD *)v2 + 272))((char *)this + 200) + 1584))
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 272))((char *)this + 200);
    OZDocument::postNotification(*(OZDocument **)(v8 + 1584), 0x200000);
  }
  return TXTextLayout::setRecomputeGlyphPositions((uint64_t)this);
}

void sub_1B28D41D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&a9);
  _Unwind_Resume(a1);
}

void TXTextInput::deleteText(PCString *this, CMTime *a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  OZChannelBase *v12;
  BOOL v13;
  _BYTE *v14;
  int v15;
  OZScene **v16;
  CMTime v17;
  PCString v18;
  PCString v19;
  PCSharedCount v20;

  PCSharedCount::PCSharedCount(&v20);
  TXTextLayout::getString(this, (PCString *)&v20);
  if (PCString::size((PCString *)&v20) > a3)
  {
    v10 = ((uint64_t (*)(PCString *))this[25].var0[8].data)(&this[25]);
    v11 = v10;
    if (a5)
    {
      if (v10)
      {
        v12 = *(OZChannelBase **)(v10 + 1504);
        if (v12)
          OZChannelBase::setRangeName(v12, (const PCString *)1);
      }
    }
    if (*(_BYTE *)(theApp + 81))
      v13 = 1;
    else
      v13 = v11 == 0;
    if (v13 || !*(_QWORD *)(*(_QWORD *)(v11 + 1584) + 176))
      goto LABEL_18;
    TXParagraphStyleFolder_Factory::getCategoryName((PCSharedCount *)&v19);
    PCURL::PCURL((PCURL *)&v18, CFSTR("Undo Text Delete"));
    v14 = (char *)&this[6545].var0 + 4;
    if (PCString::compare(&v19, &v18) || LODWORD(this[2407].var0) != HIDWORD(this[2407].var0))
    {
      PCString::~PCString(&v18);
    }
    else
    {
      v15 = *v14;
      PCString::~PCString(&v18);
      if (!v15)
        goto LABEL_17;
    }
    PCURL::PCURL((PCURL *)&v18, CFSTR("Undo Text Delete"));
    ((void (*)(PCString *, PCString *, _QWORD))this->var0[27].info)(this, &v18, 0);
    PCString::~PCString(&v18);
    *v14 = 0;
LABEL_17:
    PCString::~PCString(&v19);
LABEL_18:
    v16 = (OZScene **)Li3DEngineScene::sceneManager((Li3DEngineScene *)this);
    OZLockingGroup::WriteSentry::WriteSentry((OZLockingGroup::WriteSentry *)&v19, v16);
    v17 = *a2;
    TXTextInput::deleteTextHelper((TXTextInput *)this, &v17, a3, a4);
    OZLockingGroup::WriteSentry::~WriteSentry((OZLockingGroup::WriteSentry *)&v19);
    ((void (*)(PCString *))this->var0[38].length)(this);
  }
  PCString::~PCString((PCString *)&v20);
}

void sub_1B28D43B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12, PCString a13, PCString a14)
{
  PCString::~PCString(&a12);
  PCString::~PCString(&a13);
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

OZScene *TXTextInput::notify(TXTextInput *this, char a2)
{
  OZScene *result;
  OZScene *v4;
  uint64_t v5;
  uint64_t v6;
  OZChannelRef ***v7;
  OZChannelRef ***v8;
  OZChannelRef **v9;
  OZChannelBase *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  OZChannelRef **MotionOnlyPath;
  OZChannelBase *Channel;
  uint64_t ObjectManipulator;
  uint64_t v18;
  const void *v19;
  unint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t i;
  const void *Object;
  OZSingleChannelBehavior *v25;
  uint64_t ChanBase;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  uint64_t v31;
  char v32;
  unint64_t v33;
  const void *v34;
  OZRigBehavior *v35;
  OZRigBehavior *v36;
  const OZChannelBase *v37;
  OZNotificationManager *v38;
  const PCString *v39;
  uint64_t v40;
  OZChannelBase *v41;
  __int128 v43;
  uint64_t v44;
  PCString v45[2];

  result = TXTextLayout::notify(this, a2);
  if ((a2 & 0xC) != 0)
  {
    result = (OZScene *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
    if (result)
    {
      v4 = result;
      v5 = *((_QWORD *)result + 198);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 168);
        v40 = *((_QWORD *)result + 198);
        v7 = (OZChannelRef ***)(v5 + 296);
        if (v6)
          v8 = (OZChannelRef ***)(v6 + 48);
        else
          v8 = v7;
        v9 = *v8;
        if (*v8 != v8[1])
        {
          v41 = (OZChannelBase *)(*(_QWORD *)(v40 + 24) + 920);
          v10 = (OZChannelBase *)((char *)this + 59408);
          v11 = (char *)this + 24272;
          v12 = (char *)this + 24424;
          v13 = (char *)this + 24576;
          v14 = (char *)this + 24728;
          do
          {
            if (*(_BYTE *)(theApp + 81))
            {
              MotionOnlyPath = OZChannelRef::getMotionOnlyPath(v9);
              PCString::PCString(v45, (const char *)MotionOnlyPath);
              OZChannelRef::OZChannelRef((OZChannelRef *)&v43, v45);
              PCString::~PCString(v45);
              Channel = OZChannelRef::getChannel((OZChannelRef *)&v43, v41);
              OZChannelRef::~OZChannelRef((void **)&v43);
              if (Channel)
                goto LABEL_13;
            }
            else
            {
              Channel = OZChannelRef::getChannel((OZChannelRef *)v9, v41);
              if (Channel)
              {
LABEL_13:
                ObjectManipulator = OZChannelBase::getObjectManipulator(Channel);
                if (ObjectManipulator
                  && (v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)ObjectManipulator + 232))(ObjectManipulator)) != 0
                  && (v19 = (const void *)v18,
                      v20 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 664))(v18) + 8),
                      v43 = xmmword_1B3053B20,
                      OZFactory::isKindOfClass(v20, (int32x4_t *)&v43)))
                {
                  v22 = (char *)(v21 + 194);
                  for (i = v21[195]; (char *)i != v22; i = *(_QWORD *)(i + 8))
                  {
                    Object = (const void *)OZScene::getObject(v4, *(_DWORD *)(i + 16));
                    if (Object)
                    {
                      if (v25)
                      {
                        ChanBase = OZSingleChannelBehavior::getChanBase(v25);
                        v27 = (OZChannelBase *)ChanBase == v10 || ChanBase == (_QWORD)v11;
                        v28 = v27 || ChanBase == (_QWORD)v12;
                        v29 = v28 || ChanBase == (_QWORD)v13;
                        if (v29 || ChanBase == (_QWORD)v14)
                          TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
                      }
                    }
                  }
                }
                else if (Channel == v10
                       || Channel == (OZChannelBase *)v11
                       || Channel == (OZChannelBase *)v12
                       || Channel == (OZChannelBase *)v13
                       || Channel == (OZChannelBase *)v14)
                {
                  TXTextLayout::setAllParagraphsDirty((TXParagraphStyle ***)this);
                }
              }
            }
            v9 += 3;
          }
          while (v9 != v8[1]);
        }
        *(_QWORD *)&v43 = &v43;
        *((_QWORD *)&v43 + 1) = &v43;
        v44 = 0;
        OZBehavior::GetBehaviorsAffectingChannel((_BYTE *)this + 19048, &v43, 1);
        v31 = *((_QWORD *)&v43 + 1);
        if (*((__int128 **)&v43 + 1) == &v43)
        {
          return (OZScene *)std::__list_imp<unsigned int>::clear(&v43);
        }
        else
        {
          v32 = 0;
          do
          {
            v33 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v31 + 16) + 344))(*(_QWORD *)(v31 + 16))
                            + 8);
            *(_OWORD *)&v45[0].var0 = xmmword_1B3053B30;
            if (OZFactory::isKindOfClass(v33, (int32x4_t *)v45))
            {
              v34 = *(const void **)(v31 + 16);
              if (v34)
              {
                if (v35)
                {
                  v36 = v35;
                  if (OZRigBehavior::getWidget(v35))
                  {
                    v37 = (const OZChannelBase *)*((_QWORD *)OZRigBehavior::getWidget(v36) + 136);
                    if (v37)
                    {
                      v38 = *(OZNotificationManager **)(v40 + 168);
                      if (v38)
                        LOBYTE(v38) = OZNotificationManager::wasChannelModified(v38, v37);
                      v32 |= v38;
                    }
                  }
                }
              }
            }
            v31 = *(_QWORD *)(v31 + 8);
          }
          while ((__int128 *)v31 != &v43);
          result = (OZScene *)std::__list_imp<unsigned int>::clear(&v43);
          if ((v32 & 1) != 0)
          {
            TXTextInput::rebuildTextFromBehavior(this);
            return (OZScene *)OZChannelBase::setRangeName((OZChannelBase *)this, v39);
          }
        }
      }
    }
  }
  return result;
}

void sub_1B28D4764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCString a21)
{
  std::__list_imp<unsigned int>::clear(&a17);
  _Unwind_Resume(a1);
}

OZScene *`non-virtual thunk to'TXTextInput::notify(TXTextInput *this, char a2)
{
  return TXTextInput::notify((TXTextInput *)((char *)this - 18976), a2);
}

uint64_t TXTextInput::didFinishLoadingIntoScene(TXTextInput *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(TXTextInput *))(*(_QWORD *)this + 1272))(this);
  *((_BYTE *)this + 64416) = v2 != 0;
  if (v2)
    TXTextInput::rebuildTextFromBehavior(this);
  return TXTextLayout::didFinishLoadingIntoScene(this);
}

uint64_t `non-virtual thunk to'TXTextInput::didFinishLoadingIntoScene(TXTextInput *this)
{
  return TXTextInput::didFinishLoadingIntoScene((TXTextInput *)((char *)this - 200));
}

{
  return TXTextInput::didFinishLoadingIntoScene((TXTextInput *)((char *)this - 216));
}

OZSingleChannelBehavior *TXTextInput::hasLinkedTextString(TXTextInput *this)
{
  uint64_t *v1;
  const void *v2;
  OZBehavior *v3;
  OZSingleChannelBehavior *v4;
  const void *ChanBase;
  void *v6;
  OZChannelBase *SourceChannel;
  void *v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v10 = (uint64_t)&v10;
  v11 = &v10;
  v12 = 0;
  OZBehavior::GetBehaviorsAffectingChannel((_BYTE *)this + 19048, &v10, 1);
  v1 = v11;
  if (v11 == &v10)
  {
LABEL_12:
    v4 = 0;
  }
  else
  {
    while (1)
    {
      v2 = (const void *)v1[2];
      if (v2)
      {
        if (v3)
        {
          v4 = v3;
          if (OZBehavior::isEnabledAndUseBehaviors(v3))
          {
            ChanBase = (const void *)OZSingleChannelBehavior::getChanBase(v4);
            v6 = ChanBase
            SourceChannel = OZLinkBehavior::getSourceChannel(v4);
            if (SourceChannel)
            {
              if (v6)
              {
                if (v8)
                  break;
              }
            }
          }
        }
      }
      v1 = (uint64_t *)v1[1];
      if (v1 == &v10)
        goto LABEL_12;
    }
  }
  std::__list_imp<unsigned int>::clear(&v10);
  return v4;
}

void sub_1B28D491C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<unsigned int>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void OZLocking::acquireObjectLock(OZLocking *this)
{
  PCSharedMutex::lock((std::mutex *)((char *)this + 8));
}

void OZLocking::releaseObjectLock(OZLocking *this)
{
  PCSharedMutex::unlock((std::mutex *)((char *)this + 8));
}

void OZLocking::acquireObjectReadLock(OZLocking *this)
{
  PCSharedMutex::lock_shared((std::mutex *)((char *)this + 8));
}

void OZLocking::releaseObjectReadLock(OZLocking *this)
{
  PCSharedMutex::unlock_shared((std::mutex *)((char *)this + 8));
}

uint64_t OZLockingElement::getLockingID(OZLockingElement *this)
{
  return *((unsigned int *)this + 70);
}

uint64_t TXTextLayout::enableDynamicLineSpacingForDiacritics(uint64_t this, char a2)
{
  *(_BYTE *)(this + 64392) = a2;
  return this;
}

__CFString *TXTextLayout::getLength(TXTextLayout *this)
{
  char *StringPtr;

  StringPtr = TXChannelString::getStringPtr((TXTextLayout *)((char *)this + 19048));
  return PCString::size((PCString *)StringPtr);
}

BOOL TXTextLayout::shouldDoLocalRender(TXTextLayout *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 20056), MEMORY[0x1E0CA2E68], 0.0) == 1;
}

uint64_t TXTextLayout::getOriginalBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 392))(a1);
}

double TXTextLayout::getPixelAspectRatio(TXTextLayout *this)
{
  return 1.0;
}

BOOL TXTextLayout::isFCPEditable(OZChannel *this)
{
  return OZChannel::getValueAsInt(this + 389, MEMORY[0x1E0CA2E68], 0.0) != 0;
}

uint64_t TXTextLayout::setDynamicLineSpacingForDiacritics(uint64_t this, double a2)
{
  *(double *)(this + 64400) = a2;
  return this;
}

double TXTextLayout::getLineShift(TXTextLayout *this)
{
  return 0.0;
}

uint64_t OZSceneNode::getInstanceID(OZSceneNode *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t OZSceneNode::getSerializer(OZSceneNode *this)
{
  return (uint64_t)this + 48;
}

uint64_t OZSceneNode::getScene(OZSceneNode *this)
{
  return *((_QWORD *)this + 121);
}

uint64_t OZSceneNode::getRootChannel(OZSceneNode *this)
{
  return (uint64_t)this + 56;
}

BOOL OZElement::hasMasks(OZElement *this)
{
  return *((_QWORD *)this + 2303) != 0;
}

uint64_t OZElement::numberOfMasks(OZElement *this)
{
  return *((unsigned int *)this + 4606);
}

uint64_t OZElement::masks_begin(OZElement *this)
{
  return *((_QWORD *)this + 2302);
}

uint64_t OZElement::masks_end(OZElement *this)
{
  return (uint64_t)this + 18408;
}

double OZSceneNode::setTimeOffset(OZSceneNode *this, CMTime *a2, char a3)
{
  double result;

  *(_QWORD *)&result = OZChannelObjectRootBase::setTimeOffset((__n128 *)((char *)this + 56), a2, a3).n128_u64[0];
  return result;
}

__n128 OZSceneNode::getTimeExtent@<Q0>(OZSceneNode *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)a2 = *((_OWORD *)this + 13);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 28);
  result = *(__n128 *)((char *)this + 232);
  *(__n128 *)(a2 + 24) = result;
  *(_QWORD *)(a2 + 40) = *((_QWORD *)this + 31);
  return result;
}

uint64_t OZSceneNode::setTimeExtent(OZSceneNode *this, const PCTimeRange *a2, char a3)
{
  return OZChannelObjectRootBase::setTimeExtent((OZSceneNode *)((char *)this + 56), a2, a3);
}

double OZSceneNode::getVersion(OZSceneNode *this)
{
  return *((double *)this + 129);
}

uint64_t OZSceneNode::setVersion(uint64_t this, double a2)
{
  *(double *)(this + 1032) = a2;
  return this;
}

uint64_t OZTransformNode::setDefaultTranslation(OZTransformNode *this, double a2, double a3, double a4)
{
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1352), a2);
  OZChannel::setDefaultValue((OZChannel *)((char *)this + 1504), a3);
  return OZChannel::setDefaultValue((OZChannel *)((char *)this + 1952), a4);
}

OZTransformNode *OZTransformNode::setPixelAspectRatio(OZTransformNode *this, double a2)
{
  *((double *)this + 795) = a2;
  return this;
}

uint64_t OZElement::getUIBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1488))(a1);
}

uint64_t OZElement::getImageBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1480))(a1);
}

BOOL OZElement::hasBlendMode(OZElement *this, const CMTime *a2)
{
  return (*(unsigned int (**)(OZElement *, const CMTime *))(*(_QWORD *)this + 1576))(this, a2) != 0;
}

BOOL `non-virtual thunk to'TXTextLayout::shouldDoLocalRender(TXTextLayout *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 19856), MEMORY[0x1E0CA2E68], 0.0) == 1;
}

uint64_t OZElement::getPixelAspectRatioRN(OZElement *this)
{
  return (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 1328))(this);
}

_QWORD *OZElement::getHashForStateRN@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 + 16), a2, a3, a4, a5);
}

_OWORD *OZElement::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 + 16), a2, a3);
}

uint64_t OZElement::getImageNode(OZElement *this)
{
  return (uint64_t)this + 6528;
}

_QWORD *OZElement::getEffectListForGeode@<X0>(OZElement *this@<X0>, _QWORD *a2@<X8>)
{
  return std::list<OZEffect *>::list(a2, (uint64_t)this + 976);
}

uint64_t OZElement::getEffectsRoot(OZElement *this)
{
  if ((*(unsigned int (**)(OZElement *))(*(_QWORD *)this + 416))(this))
    return *(_QWORD *)(*((_QWORD *)this + 123) + 16);
  else
    return (*(uint64_t (**)(OZElement *))(*(_QWORD *)this + 2160))(this);
}

BOOL `non-virtual thunk to'TXTextLayout::isFCPEditable(TXTextLayout *this)
{
  return OZChannel::getValueAsInt((OZChannel *)((char *)this + 58928), MEMORY[0x1E0CA2E68], 0.0) != 0;
}

uint64_t PCSafe::resetHandle(uint64_t this)
{
  if (*(_QWORD *)(this + 8))
    *(_QWORD *)(this + 8) = 0;
  return this;
}

uint64_t OZObjectManipulator::setNewName(OZObjectManipulator *this, const PCString *a2)
{
  return (*(uint64_t (**)(OZObjectManipulator *, const PCString *))(*(_QWORD *)this + 120))(this, a2);
}

uint64_t `non-virtual thunk to'OZElement::getImageNode(OZElement *this)
{
  return (uint64_t)this + 6512;
}

uint64_t `non-virtual thunk to'OZSceneNode::getFactoryBase(OZSceneNode *this)
{
  return (uint64_t)this - 16;
}

uint64_t `non-virtual thunk to'OZSceneNode::getScene(OZSceneNode *this)
{
  return *((_QWORD *)this + 119);
}

uint64_t OZObjectManipulator::getNaturalDurationFlags(OZObjectManipulator *this)
{
  return 6;
}

uint64_t OZRenderNode::getPreviewBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t `non-virtual thunk to'OZElement::getPixelAspectRatioRN(OZElement *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 816) + 1328))((char *)this - 6528);
}

_QWORD *`non-virtual thunk to'OZElement::getHashForStateRN@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, OZRenderParams *a3@<X2>, uint64_t **a4@<X3>, _OWORD *a5@<X8>)
{
  return OZObjectManipulator::getHashForState((_OWORD *)(a1 - 6512), a2, a3, a4, a5);
}

_OWORD *`non-virtual thunk to'OZElement::getStaticHashRN(uint64_t a1, const void *a2, uint64_t **a3)
{
  return OZObjectManipulator::getStaticHash((_OWORD *)(a1 - 6512), a2, a3);
}

uint64_t `non-virtual thunk to'OZElement::getWorkingColorDescription@<X0>(OZElement *this@<X0>, uint64_t a2@<X8>)
{
  return OZSceneNode::getWorkingColorDescription((OZSceneNode *)((char *)this - 6528), a2);
}

float `non-virtual thunk to'OZElement::getBlendingGamma(OZElement *this)
{
  return OZSceneNode::getBlendingGamma((OZSceneNode *)((char *)this - 6528));
}

uint64_t `non-virtual thunk to'OZElement::getImageBounds(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 6528) + 1480))(a1 - 6528);
}

uint64_t `non-virtual thunk to'OZElement::getObjectManipulator(OZElement *this)
{
  return (uint64_t)this - 6512;
}

void OZImageNode::getResolution(OZImageNode *this, double *a2, double *a3)
{
  *a3 = 1.0;
  *a2 = 1.0;
}

uint64_t OZImageNode::getColorSize(OZImageNode *this, const OZRenderState *a2)
{
  return PCPixelFormat::getBitsPerPixel(a2->var15);
}

BOOL OZImageNode::useFloat(OZImageNode *this, const OZRenderState *a2)
{
  return PCPixelFormat::isFloat(a2->var15);
}

void std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,void *> *>>(_QWORD *a1, __n128 *a2, __n128 *a3)
{
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = a1[1];
  if (!v6)
    goto LABEL_9;
  for (i = 0; i != v6; *(_QWORD *)(*a1 + 8 * i++) = 0)
    ;
  v8 = (_QWORD *)a1[2];
  a1[2] = 0;
  a1[3] = 0;
  if (v8)
  {
    while (a2 != a3)
    {
      v8[2] = a2[1].n128_u64[0];
      v8[3] = a2[1].n128_u64[1];
      v9 = (_QWORD *)*v8;
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__node_insert_multi(a1, v8);
      a2 = (__n128 *)a2->n128_u64[0];
      v8 = v9;
      if (!v9)
        goto LABEL_9;
    }
    do
    {
      v10 = (_QWORD *)*v8;
      operator delete(v8);
      v8 = v10;
    }
    while (v10);
  }
  else
  {
LABEL_9:
    while (a2 != a3)
    {
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_multi<std::pair<OZSceneNode * const,std::__list_iterator<OZSceneNode *,void *>> const&>(a1, a2 + 1);
      a2 = (__n128 *)a2->n128_u64[0];
    }
  }
}

void sub_1B28D4DB8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_1B28D4DD8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__node_insert_multi(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *inserted;

  v4 = a2 + 2;
  v5 = a2[2];
  v6 = HIDWORD(v5);
  v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  inserted = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__node_insert_multi_prepare((uint64_t)a1, v8, v4);
  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

_QWORD *std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__rehash<false>(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__node_insert_multi_perform(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__do_rehash<false>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_multi<std::pair<OZSceneNode * const,std::__list_iterator<OZSceneNode *,void *>> const&>(_QWORD *a1, __n128 *a2)
{
  _QWORD *v4;

  std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__construct_node<std::pair<OZSceneNode * const,std::__list_iterator<OZSceneNode *,void *>> const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__node_insert_multi(a1, v4);
}

void sub_1B28D5328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__construct_node<std::pair<OZSceneNode * const,std::__list_iterator<OZSceneNode *,void *>> const&>@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  __n128 *v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = a1 + 16;
  v6 = (__n128 *)operator new(0x20uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = *a2;
  v6[1] = *a2;
  *(_BYTE *)(a3 + 16) = 1;
  v8 = v6[1].n128_u64[0];
  v9 = HIDWORD(v8);
  v10 = 0x9DDFEA08EB382D69 * (((8 * v8) + 8) ^ HIDWORD(v8));
  v6->n128_u64[0] = 0;
  v6->n128_u64[1] = 0x9DDFEA08EB382D69
                  * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69
                                                                         * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

_QWORD *std::list<OZEffect *>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v8 = *(_QWORD *)(v3 + 16);
      v7[1] = a1;
      v7[2] = v8;
      *v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1B28D5510(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<unsigned int>::clear(v1);
  _Unwind_Resume(a1);
}

_QWORD *OZObject::iterator_t<TXTextInput,false,true,OZObject::defaultValidator>::increment(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = result;
  v2 = result + 2;
  v3 = *result;
  if (*result == result[2])
    goto LABEL_14;
  v4 = *(_QWORD **)(v3 + 16);
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 1056))(v4))
  {
    v5 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v5;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1104))(v4);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 1;
    return result;
  }
  if ((*(unsigned int (**)(_QWORD *))(*v4 + 960))(v4))
  {
    v6 = *v1;
    v14 = v4;
    v15 = &v14;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>((uint64_t)(v1 + 4), &v14, (uint64_t)&std::piecewise_construct, &v15)[3] = v6;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v4 + 1024))(v4);
    *v1 = result;
    return result;
  }
  v7 = *(_QWORD **)(*v1 + 8);
  result = (_QWORD *)v4[120];
  if (!result || v7 == (_QWORD *)*v2)
  {
    *v1 = v7;
    return result;
  }
  v8 = *result;
  if (*((_BYTE *)v1 + 24))
    v9 = *(uint64_t (**)(void))(v8 + 1112);
  else
    v9 = *(uint64_t (**)(void))(v8 + 1032);
  result = (_QWORD *)v9();
  if (v7 != result)
  {
LABEL_13:
    v3 = *v1;
LABEL_14:
    *v1 = *(_QWORD *)(v3 + 8);
    return result;
  }
  if (*((_BYTE *)v1 + 24)
    && (result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 960))(v4[120]), (_DWORD)result))
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[120] + 1024))(v4[120]);
    *v1 = result;
    *((_BYTE *)v1 + 24) = 0;
  }
  else
  {
    *((_BYTE *)v1 + 24) = 0;
    while (1)
    {
      v4 = (_QWORD *)v4[120];
      if (!v4)
        break;
      v15 = v4;
      v10 = std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(v1 + 4, &v15);
      v11 = v10 + 3;
      if (!v10)
        v11 = v2;
      v12 = *v11;
      *v1 = v12;
      result = (_QWORD *)v4[120];
      if (result)
      {
        v13 = *(_QWORD **)(v12 + 8);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 1032))(result);
        if (v13 == result && v13 != (_QWORD *)*v2)
          continue;
      }
      goto LABEL_13;
    }
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__emplace_unique_key_args<OZSceneNode *,std::piecewise_construct_t const&,std::tuple<OZSceneNode * const&>,std::tuple<>>(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD **v12;
  _QWORD *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      for (i = *v12; i; i = (_QWORD *)*i)
      {
        v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10)
              v14 %= v10;
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__rehash<true>(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B28D5960(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::__unordered_map_hasher<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::hash<OZSceneNode *>,std::equal_to<OZSceneNode *>,true>,std::__unordered_map_equal<OZSceneNode *,std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>,std::equal_to<OZSceneNode *>,std::hash<OZSceneNode *>,true>,std::allocator<std::__hash_value_type<OZSceneNode *,std::__list_iterator<OZSceneNode *,void *>>>>::find<OZSceneNode *>(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<TXTextStyle,std::allocator<TXTextStyle>,TXTextStyle&,void>(OZSceneNode **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = operator new(0xC340uLL);
  std::__shared_ptr_emplace<TXTextStyle>::__shared_ptr_emplace[abi:ne180100]<TXTextStyle&,std::allocator<TXTextStyle>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>((uint64_t)a2, v4 + 10, (uint64_t)(v4 + 3));
}

void sub_1B28D5CE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<TXTextStyle>::__shared_ptr_emplace[abi:ne180100]<TXTextStyle&,std::allocator<TXTextStyle>,0>(_QWORD *a1, OZSceneNode **a2)
{
  a1[2] = 0;
  *a1 = &unk_1E64F80A8;
  a1[1] = 0;
  TXTextStyle::TXTextStyle((TXTextStyle *)(a1 + 3), a2, 0);
  return a1;
}

void sub_1B28D5D30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<TXTextStyle>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E64F80A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<TXTextStyle>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E64F80A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<TXTextStyle>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::shared_ptr<TXTextStyle>::__enable_weak_this[abi:ne180100]<OZStyle,TXTextStyle,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void TXTextInput::getUndoDescription(TXTextInput *this@<X0>, PCURL *a2@<X8>)
{
  TXParagraphStyleFolder_Factory *v3;
  OZFactoryBase *v4;
  const void *v5;

  v3 = (TXParagraphStyleFolder_Factory *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  v5 = (const void *)objc_msgSend((id)TXParagraphStyleFolder_Factory::createInstance(v3, v4), "undoActionName");
  PCURL::PCURL(a2, v5);
}

BOOL TXTextInput::canHandleUndo(TXTextInput *this)
{
  TXParagraphStyleFolder_Factory *v1;
  OZFactoryBase *v2;

  v1 = (TXParagraphStyleFolder_Factory *)(*(uint64_t (**)(char *))(*((_QWORD *)this + 25) + 272))((char *)this + 200);
  return TXParagraphStyleFolder_Factory::createInstance(v1, v2) != 0;
}

uint64_t TXTextInput::performDragOperation(OZChannelBase *this, OZFactoryBase *lpsrc, OZChannelBase *MatchingDescendant, unsigned int a4, unsigned int a5, uint64_t a6, const CMTime *a7, const CMTime *a8)
{
  OZChannelBase *v16;
  __CFString **p_var11;
  OZChannelBase *v19;
  OZChannelFolder *v20;
  TXParagraphStyleFolder_Factory *v21;
  OZFactoryBase *v22;
  uint64_t v23;
  uint64_t v24;
  const __CFString *v25;
  __int128 v27;
  uint64_t v28;
  PCString v29;

  if (lpsrc)
  else
    v16 = 0;
  p_var11 = &this[1].var11;
  if ((OZChannelBase *)((uint64_t (*)(__CFString **))this[1].var11[20].isa)(&this[1].var11) != MatchingDescendant
    || v16 == 0)
  {
    return TXTextLayout::performDragOperation(this, lpsrc, MatchingDescendant, a4, a5, a6, a7, a8);
  }
  v19 = (OZChannelBase *)((uint64_t (*)(__CFString **))(*p_var11)[20].isa)(&this[1].var11);
  if (OZChannelBase::isDescendantOf(v16, v19))
    return TXTextLayout::performDragOperation(this, lpsrc, MatchingDescendant, a4, a5, a6, a7, a8);
  v20 = (OZChannelFolder *)((uint64_t (*)(__CFString **))(*p_var11)[20].isa)(&this[1].var11);
  MatchingDescendant = (OZChannelBase *)OZChannelFolder::findMatchingDescendant(v20, v16);
  if (!MatchingDescendant)
    return TXTextLayout::performDragOperation(this, lpsrc, MatchingDescendant, a4, a5, a6, a7, a8);
  v21 = (TXParagraphStyleFolder_Factory *)((uint64_t (*)(__CFString **))(*p_var11)[8].data)(&this[1].var11);
  if (!TXParagraphStyleFolder_Factory::createInstance(v21, v22))
    return TXTextLayout::performDragOperation(this, lpsrc, MatchingDescendant, a4, a5, a6, a7, a8);
  if (((uint64_t (*)(__CFString **))(*p_var11)[8].data)(&this[1].var11))
  {
    if (*(_QWORD *)(((uint64_t (*)(__CFString **))(*p_var11)[8].data)(&this[1].var11) + 1504))
    {
      v23 = ((uint64_t (*)(__CFString **))(*p_var11)[8].data)(&this[1].var11);
      OZChannelBase::setRangeName(*(OZChannelBase **)(v23 + 1504), (const PCString *)1);
    }
  }
  v24 = localizedString((uint64_t)CFSTR("Undo Description Text"), 0);
  v25 = (const __CFString *)objc_msgSend(MEMORY[0x1E0CB3940], "stringWithValidatedFormat:validFormatSpecifiers:error:", v24, CFSTR("%@"), 0, PCString::cf_str(&v16->var4));
  v29.var0 = 0;
  PCString::set(&v29, v25);
  (*((void (**)(OZChannelBase *, PCString *, _QWORD))this->var0 + 109))(this, &v29, 0);
  PCString::~PCString(&v29);
  v27 = *MEMORY[0x1E0CA2E68];
  v28 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  (*((void (**)(PCString *__return_ptr, OZChannelBase *))v16->var0 + 106))(&v29, v16);
  (*((void (**)(OZChannelBase *, __int128 *, PCString *))this->var0 + 18))(this, &v27, &v29);
  PCString::~PCString(&v29);
  return 1;
}

void sub_1B28D610C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'TXTextInput::performDragOperation(TXTextInput *this, OZFactoryBase *a2, OZChannelBase *a3, unsigned int a4, unsigned int a5, uint64_t a6, const CMTime *a7, const CMTime *a8)
{
  return TXTextInput::performDragOperation((OZChannelBase *)((char *)this - 200), a2, a3, a4, a5, a6, a7, a8);
}

{
  return TXTextInput::performDragOperation((OZChannelBase *)((char *)this - 216), a2, a3, a4, a5, a6, a7, a8);
}

void TXTextInput::setupDefaultTitleTextLayout(TXTextInput *this, OZScene *a2)
{
  OZPreferenceManager *v9;
  int v10;
  OZPreferenceManager *v11;
  float v12;
  OZPreferenceManager *v13;
  double v14;
  OZPreferenceManager *v15;
  float v16;
  char *StringPtr;
  unsigned int v18;
  __int128 v19;
  void (**v20)(OZSceneSettings *__hidden);
  int v21;
  int v22;
  CGColorSpace *v23;
  PCString v24;
  _QWORD v25[2];
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  PCString v29;

  PCURL::PCURL((PCURL *)&v29, CFSTR("Text Layout Default Title Text"));
  v27 = *MEMORY[0x1E0CA2E68];
  v28 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  (*(void (**)(TXTextInput *, __int128 *, PCString *))(*(_QWORD *)this + 144))(this, &v27, &v29);
  (*(void (**)(char *, char *, uint64_t))(*((_QWORD *)this + 25) + 1136))((char *)this + 200, (char *)a2 + 1352, 1);
  (*(void (**)(TXTextInput *, PCString *, _QWORD))(*(_QWORD *)this + 536))(this, &v29, 0);
  TXTextLayout::setLayoutMethod(this, 1);
  v25[0] = 0;
  v25[1] = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v19 = _Q0;
  v26 = _Q0;
  v9 = OZSceneSettings::OZSceneSettings((OZSceneSettings *)&v20, (OZScene *)((char *)a2 + 336));
  v10 = v21;
  v11 = (OZPreferenceManager *)OZPreferenceManager::Instance(v9);
  OZPreferenceManager::getSafeZonesTitlePercentage(v11);
  *(double *)&v26 = (*(double (**)(OZScene *))(*(_QWORD *)a2 + 96))(a2) * (float)(v12 * (float)v10);
  *((_QWORD *)&v26 + 1) = 0x4059000000000000;
  (*(void (**)(TXTextInput *, _QWORD *))(*(_QWORD *)this + 344))(this, v25);
  v13 = (OZPreferenceManager *)(*(uint64_t (**)(TXTextInput *, uint64_t, double))(*(_QWORD *)this + 792))(this, 1, 0.0);
  LODWORD(a2) = v22;
  v14 = *((double *)&v26 + 1);
  v15 = (OZPreferenceManager *)OZPreferenceManager::Instance(v13);
  OZPreferenceManager::getSafeZonesTitlePercentage(v15);
  OZTransformNode::setTranslation((OZTransformNode *)((char *)this + 200), 0.0, (double)-(int)a2 * 0.5 + v14 * 0.5 + (double)(int)a2 * 0.5 * (1.0 - v16), MEMORY[0x1E0CA2E68]);
  *((_OWORD *)this + 3689) = v19;
  (*(void (**)(TXTextInput *))(*(_QWORD *)this + 544))(this);
  StringPtr = TXChannelString::getStringPtr((TXTextInput *)((char *)this + 19048));
  v18 = PCString::size((PCString *)StringPtr);
  (*(void (**)(TXTextInput *, _QWORD, _QWORD))(*(_QWORD *)this + 240))(this, 0, v18);
  TXTextLayout::didFinishInitializing(this, 0);
  v20 = &off_1E658F368;
  PCString::~PCString(&v24);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v23);
  PCString::~PCString(&v29);
}

void sub_1B28D6354(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 56));
  _Unwind_Resume(a1);
}

double TXSelectionRange::operator=(uint64_t a1, uint64_t a2)
{
  double result;

  if (a1 != a2)
  {
    result = *(double *)(a2 + 8);
    *(double *)(a1 + 8) = result;
  }
  return result;
}

void TXSequenceChannels::TXSequenceChannels(TXSequenceChannels *this, OZChannelFolder *a2)
{
  PCURL *v4;
  PCURL *v5;
  PCURL *v6;
  PCURL *v7;
  PCURL *v8;
  PCURL *v9;
  PCURL *v10;
  TXSequenceChannels::TXSequenceChannels_trackingImpl *v11;
  TXSequenceChannels::TXSequenceChannels_trackingInfo *Instance;
  OZChannelInfo *v13;
  PCURL *v14;
  PCURL *v15;
  PCString *v16;
  PCURL *v17;
  PCURL *v18;
  PCURL *v19;
  PCURL *v20;
  TXSequenceChannels::TXSequenceChannels_faceBlurImpl *v21;
  TXSequenceChannels::TXSequenceChannels_faceBlurInfo *v22;
  OZChannelInfo *v23;
  PCURL *v24;
  PCURL *v25;
  PCURL *v26;
  PCURL *v27;
  PCURL *v28;
  PCURL *v29;
  TXSequenceChannels::TXSequenceChannels_outlineBlurImpl *v30;
  TXSequenceChannels::TXSequenceChannels_outlineBlurInfo *v31;
  OZChannelInfo *v32;
  PCURL *v33;
  PCURL *v34;
  TXSequenceChannels::TXSequenceChannels_outlineWidthImpl *v35;
  TXSequenceChannels::TXSequenceChannels_outlineWidthInfo *v36;
  OZChannelInfo *v37;
  PCURL *v38;
  PCURL *v39;
  PCURL *v40;
  PCURL *v41;
  PCURL *v42;
  PCURL *v43;
  TXSequenceChannels::TXSequenceChannels_glowBlurImpl *v44;
  TXSequenceChannels::TXSequenceChannels_glowBlurInfo *v45;
  OZChannelInfo *v46;
  PCURL *v47;
  TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl *v48;
  OZChannelImpl *v49;
  PCURL *v50;
  TXSequenceChannels::TXSequenceChannels_glowRadiusImpl *v51;
  TXSequenceChannels::TXSequenceChannels_glowRadiusInfo *v52;
  OZChannelInfo *v53;
  PCURL *v54;
  PCURL *v55;
  PCURL *v56;
  PCURL *v57;
  PCURL *v58;
  PCURL *v59;
  PCURL *v60;
  PCURL *v61;
  TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl *v62;
  TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo *v63;
  OZChannelInfo *v64;
  PCURL *v65;
  PCURL *v66;
  PCURL *v67;
  TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl *v68;
  TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo *v69;
  OZChannelInfo *v70;
  PCURL *v71;
  PCURL *v72;
  PCURL *v73;
  TXSequenceChannels::TXSequenceChannels_characterOffsetImpl *v74;
  TXSequenceChannels::TXSequenceChannels_characterOffsetInfo *v75;
  OZChannelInfo *v76;
  PCURL *v77;
  PCURL *v78;
  PCURL *v79;
  PCURL *v80;
  PCURL *v81;
  PCURL *v82;
  PCURL *v83;
  PCURL *v84;
  PCString v85;
  PCString v86;

  *(_QWORD *)this = &off_1E64F80F8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  PCURL::PCURL((PCURL *)&v86, CFSTR("Text Sequence Channel Format"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 32), &v86, a2, 0x3E8u, 2u, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v4, CFSTR("Text Sequence Channel Position"));
  OZChannelPosition3D::OZChannelPosition3D((TXSequenceChannels *)((char *)this + 160), &v86, (OZChannelFolder *)((char *)this + 32), 0x3E9u, 2u, 3u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v5, CFSTR("Text Sequence Channel FaceOpacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1048), 1.0, &v86, (OZChannelFolder *)((char *)this + 32), 0x414u, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v6, CFSTR("Text Sequence Channel Scale"));
  OZChannelScale3D::OZChannelScale3D((TXSequenceChannels *)((char *)this + 1200), &v86, (OZChannelFolder *)((char *)this + 32), 0x3EBu, 2u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v7, CFSTR("Text Sequence Channel Rotation"));
  OZChannelRotation3D::OZChannelRotation3D((TXSequenceChannels *)((char *)this + 1792), &v86, (OZChannelFolder *)((char *)this + 32), 0x406u, 2u, 4u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v8, CFSTR("Text Sequence Channel Rotation"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 2648), &v86, (OZChannelFolder *)((char *)this + 32), 0x3EAu, 4194314, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v9, CFSTR("Text Sequence Channel Tracking"));
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 2800), &v86, (OZChannelFolder *)((char *)this + 32), 0x3ECu, 2, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v10, CFSTR("Text Sequence Channel Tracking"));
  Instance = (TXSequenceChannels::TXSequenceChannels_trackingInfo *)TXSequenceChannels::TXSequenceChannels_trackingImpl::getInstance(v11);
  v13 = (OZChannelInfo *)TXSequenceChannels::TXSequenceChannels_trackingInfo::getInstance(Instance);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2952), 0.0, &v86, (OZChannelFolder *)((char *)this + 32), 0x415u, 2u, (OZChannelImpl *)Instance, v13);
  PCString::~PCString(&v86);
  PCURL::PCURL(v14, CFSTR("Text Sequence Channel Baseline"));
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 3104), &v86, (OZChannelFolder *)((char *)this + 32), 0x3EDu, 2, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v15, CFSTR("Text Sequence Channel Slant"));
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 3256), &v86, (OZChannelFolder *)((char *)this + 32), 0x3EEu, 2, 0, 0);
  PCString::~PCString(&v86);
  PCString::PCString(v16, "Reveal");
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3408), 1.0, &v86, (OZChannelFolder *)((char *)this + 32), 0x41Au, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v17, CFSTR("Text Sequence Channel Face"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3560), &v86, a2, 0x3EFu, 2u, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v18, CFSTR("Text Sequence Channel FaceColor"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 3688), 1.0, 1.0, 1.0, &v86, (OZChannelFolder *)((char *)this + 3560), 0x3F0u, 2u, 5u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v19, CFSTR("Text Sequence Channel FaceOpacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4696), 1.0, &v86, (OZChannelFolder *)((char *)this + 3560), 0x3F1u, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v20, CFSTR("Text Sequence Channel FaceBlur"));
  v22 = (TXSequenceChannels::TXSequenceChannels_faceBlurInfo *)TXSequenceChannels::TXSequenceChannels_faceBlurImpl::getInstance(v21);
  v23 = (OZChannelInfo *)TXSequenceChannels::TXSequenceChannels_faceBlurInfo::getInstance(v22);
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 4848), &v86, (OZChannelFolder *)((char *)this + 3560), 0x410u, 2u, 2u, (OZChannelImpl *)v22, v23);
  PCString::~PCString(&v86);
  PCURL::PCURL(v24, CFSTR("Text Sequence Channel FaceBlur"));
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 5288), &v86, (OZChannelFolder *)((char *)this + 3560), 0x3F2u, 4194314, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v25, CFSTR("Text Face Four Corner"));
  OZChannelQuad::OZChannelQuad((TXSequenceChannels *)((char *)this + 5440), &v86, (OZChannelFolder *)((char *)this + 3560), 0x40Bu, 2u, 4u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v26, CFSTR("Text Sequence Channel Outline"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8392), &v86, a2, 0x3F3u, 2u, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v27, CFSTR("Text Sequence Channel OutlineColor"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 8520), 1.0, 0.0, 0.0, &v86, (OZChannelFolder *)((char *)this + 8392), 0x3F4u, 2u, 5u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v28, CFSTR("Text Sequence Channel OutlineOpacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 9528), 1.0, &v86, (OZChannelFolder *)((char *)this + 8392), 0x3F5u, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v29, CFSTR("Text Sequence Channel OutlineBlur"));
  v31 = (TXSequenceChannels::TXSequenceChannels_outlineBlurInfo *)TXSequenceChannels::TXSequenceChannels_outlineBlurImpl::getInstance(v30);
  v32 = (OZChannelInfo *)TXSequenceChannels::TXSequenceChannels_outlineBlurInfo::getInstance(v31);
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 9680), &v86, (OZChannelFolder *)((char *)this + 8392), 0x411u, 2u, 2u, (OZChannelImpl *)v31, v32);
  PCString::~PCString(&v86);
  PCURL::PCURL(v33, CFSTR("Text Sequence Channel OutlineBlur"));
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 10120), &v86, (OZChannelFolder *)((char *)this + 8392), 0x3F7u, 4194314, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v34, CFSTR("Text Sequence Channel OutlineWidth"));
  v36 = (TXSequenceChannels::TXSequenceChannels_outlineWidthInfo *)TXSequenceChannels::TXSequenceChannels_outlineWidthImpl::getInstance(v35);
  v37 = (OZChannelInfo *)TXSequenceChannels::TXSequenceChannels_outlineWidthInfo::getInstance(v36);
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 10272), &v86, (OZChannelFolder *)((char *)this + 8392), 0x3F6u, 2, (OZChannelImpl *)v36, v37);
  PCString::~PCString(&v86);
  PCURL::PCURL(v38, CFSTR("Text Outline Layer Order Enum"));
  PCURL::PCURL((PCURL *)&v85, CFSTR("Text Outline Layer Order"));
  OZChannelEnum::OZChannelEnum((TXSequenceChannels *)((char *)this + 10424), &v86, &v85, (OZChannelFolder *)((char *)this + 8392), 0x409u, 2u, 0, 0);
  PCString::~PCString(&v85);
  PCString::~PCString(&v86);
  PCURL::PCURL(v39, CFSTR("Text Outline Four Corner"));
  OZChannelQuad::OZChannelQuad((TXSequenceChannels *)((char *)this + 10680), &v86, (OZChannelFolder *)((char *)this + 8392), 0x40Du, 2u, 4u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v40, CFSTR("Text Sequence Channel Glow"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 13632), &v86, a2, 0x3F8u, 2u, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v41, CFSTR("Text Sequence Channel GlowColor"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 13760), 1.0, 1.0, 0.5, &v86, (OZChannelFolder *)((char *)this + 13632), 0x3F9u, 2u, 5u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v42, CFSTR("Text Sequence Channel GlowOpacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 14768), 1.0, &v86, (OZChannelFolder *)((char *)this + 13632), 0x3FAu, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v43, CFSTR("Text Sequence Channel GlowBlur"));
  v45 = (TXSequenceChannels::TXSequenceChannels_glowBlurInfo *)TXSequenceChannels::TXSequenceChannels_glowBlurImpl::getInstance(v44);
  v46 = (OZChannelInfo *)TXSequenceChannels::TXSequenceChannels_glowBlurInfo::getInstance(v45);
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 14920), 1.0, 1.0, &v86, (OZChannelFolder *)((char *)this + 13632), 0x412u, 2u, 2u, (OZChannelImpl *)v45, v46);
  PCString::~PCString(&v86);
  PCURL::PCURL(v47, CFSTR("Text Sequence Channel GlowBlur"));
  v49 = (OZChannelImpl *)TXSequenceChannels::TXSequenceChannels_glowBlurObsoleteImpl::getInstance(v48);
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 15360), 1.0, &v86, (OZChannelFolder *)((char *)this + 13632), 0x405u, 4194314, v49, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v50, CFSTR("Text Sequence Channel GlowRadius"));
  v52 = (TXSequenceChannels::TXSequenceChannels_glowRadiusInfo *)TXSequenceChannels::TXSequenceChannels_glowRadiusImpl::getInstance(v51);
  v53 = (OZChannelInfo *)TXSequenceChannels::TXSequenceChannels_glowRadiusInfo::getInstance(v52);
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 15512), &v86, (OZChannelFolder *)((char *)this + 13632), 0x3FBu, 2, (OZChannelImpl *)v52, v53);
  PCString::~PCString(&v86);
  PCURL::PCURL(v54, CFSTR("Text Sequence Channel GlowScale"));
  OZChannelScale::OZChannelScale((TXSequenceChannels *)((char *)this + 15664), &v86, (OZChannelFolder *)((char *)this + 13632), 0x402u, 2u, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v55, CFSTR("Text Sequence Channel GlowOffset"));
  OZChannelPosition::OZChannelPosition((TXSequenceChannels *)((char *)this + 16104), &v86, (OZChannelFolder *)((char *)this + 13632), 0x403u, 2u, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v56, CFSTR("Text Glow Layer Order Enum"));
  PCURL::PCURL((PCURL *)&v85, CFSTR("Text Glow Layer Order"));
  OZChannelEnum::OZChannelEnum((TXSequenceChannels *)((char *)this + 16808), &v86, &v85, (OZChannelFolder *)((char *)this + 13632), 0x40Au, 2u, 0, 0);
  PCString::~PCString(&v85);
  PCString::~PCString(&v86);
  PCURL::PCURL(v57, CFSTR("Text Glow Four Corner"));
  OZChannelQuad::OZChannelQuad((TXSequenceChannels *)((char *)this + 17064), &v86, (OZChannelFolder *)((char *)this + 13632), 0x40Eu, 2u, 4u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v58, CFSTR("Text Sequence Channel Drop Shadow"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20016), &v86, a2, 0x3FCu, 2u, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v59, CFSTR("Text Sequence Channel DropShadowColor"));
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 20144), 0.0, 0.0, 0.0, &v86, (OZChannelFolder *)((char *)this + 20016), 0x3FDu, 2u, 5u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v60, CFSTR("Text Sequence Channel DropShadowOpacity"));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21152), 1.0, &v86, (OZChannelFolder *)((char *)this + 20016), 0x3FEu, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v61, CFSTR("Text Sequence Channel DropShadowBlur"));
  v63 = (TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo *)TXSequenceChannels::TXSequenceChannels_dropShadowBlurImpl::getInstance(v62);
  v64 = (OZChannelInfo *)TXSequenceChannels::TXSequenceChannels_dropShadowBlurInfo::getInstance(v63);
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 21304), &v86, (OZChannelFolder *)((char *)this + 20016), 0x413u, 2u, 2u, (OZChannelImpl *)v63, v64);
  PCString::~PCString(&v86);
  PCURL::PCURL(v65, CFSTR("Text Sequence Channel DropShadowBlur"));
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 21744), &v86, (OZChannelFolder *)((char *)this + 20016), 0x401u, 4194314, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v66, CFSTR("Text Sequence Channel DropShadowScale"));
  OZChannelScale::OZChannelScale((TXSequenceChannels *)((char *)this + 21896), &v86, (OZChannelFolder *)((char *)this + 20016), 0x404u, 2u, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v67, CFSTR("Text Sequence Channel DropShadowDistance"));
  v69 = (TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo *)TXSequenceChannels::TXSequenceChannels_dropShadowDistanceImpl::getInstance(v68);
  v70 = (OZChannelInfo *)TXSequenceChannels::TXSequenceChannels_dropShadowDistanceInfo::getInstance(v69);
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 22336), &v86, (OZChannelFolder *)((char *)this + 20016), 0x3FFu, 2, (OZChannelImpl *)v69, v70);
  PCString::~PCString(&v86);
  PCURL::PCURL(v71, CFSTR("Text Sequence Channel DropShadowAngle"));
  OZChannelAngle::OZChannelAngle((OZChannelAngle *)((char *)this + 22488), &v86, (OZChannelFolder *)((char *)this + 20016), 0x400u, 2, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v72, CFSTR("Text Drop Shadow Four Corner"));
  OZChannelQuad::OZChannelQuad((TXSequenceChannels *)((char *)this + 22640), &v86, (OZChannelFolder *)((char *)this + 20016), 0x40Cu, 2u, 4u);
  PCString::~PCString(&v86);
  PCURL::PCURL(v73, CFSTR("Text Sequence Channel Character Offset"));
  v75 = (TXSequenceChannels::TXSequenceChannels_characterOffsetInfo *)TXSequenceChannels::TXSequenceChannels_characterOffsetImpl::getInstance(v74);
  v76 = (OZChannelInfo *)TXSequenceChannels::TXSequenceChannels_characterOffsetInfo::getInstance(v75);
  OZChannelUint32::OZChannelUint32((OZChannelUint32 *)((char *)this + 25592), &v86, (OZChannelFolder *)((char *)this + 32), 0x407u, 2, (OZChannelImpl *)v75, v76);
  PCString::~PCString(&v86);
  PCURL::PCURL(v77, CFSTR("Text Sequence Channel Character Set Enum"));
  PCURL::PCURL((PCURL *)&v85, CFSTR("Text Sequence Channel Character Set"));
  OZChannelEnum::OZChannelEnum((TXSequenceChannels *)((char *)this + 25744), &v86, &v85, (OZChannelFolder *)((char *)this + 32), 0x408u, 2u, 0, 0);
  PCString::~PCString(&v85);
  PCString::~PCString(&v86);
  PCURL::PCURL(v78, CFSTR("Text Sequence Channel 3D"));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26000), &v86, a2, 0x416u, 2u, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v79, CFSTR("Text Sequence Channel 3D Extrusion"));
  OZChannelDouble::OZChannelDouble((TXSequenceChannels *)((char *)this + 26128), &v86, (OZChannelFolder *)((char *)this + 26000), 0x417u, 2, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v80, CFSTR("Text Sequence Channel Front Edge Size"));
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 26280), &v86, (OZChannelFolder *)((char *)this + 26000), 0x418u, 2u, 2u, 0, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v81, CFSTR("Text Sequence Channel Back Edge Size"));
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 26720), &v86, (OZChannelFolder *)((char *)this + 26000), 0x419u, 2u, 2u, 0, 0);
  PCString::~PCString(&v86);
  *((_QWORD *)this + 3395) = a2;
  TXSequenceChannels::makeChannelList(this);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 1048), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 3560), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 3688), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 8392), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 8520), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 13632), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 13760), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 20016), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 20144), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 26000), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 26128), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 26280), 0, 0);
  OZChannelBase::enable((OZChannelBase *)((char *)this + 26720), 0, 0);
  PCURL::PCURL((PCURL *)&v86, CFSTR("Bevel Properties Edge Width"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 26416), &v86, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v82, CFSTR("Bevel Properties Edge Depth"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 26568), &v86, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v83, CFSTR("Bevel Properties Edge Width"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 26856), &v86, 0);
  PCString::~PCString(&v86);
  PCURL::PCURL(v84, CFSTR("Bevel Properties Edge Depth"));
  OZChannelBase::setName((OZChannelBase *)((char *)this + 27008), &v86, 0);
  PCString::~PCString(&v86);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 160), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 160));
  *((_BYTE *)this + 888) = 0;
  *((_BYTE *)this + 600) = 0;
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 1200), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1200));
  OZChannelBase::resetFlag((OZChannelBase *)this + 16, 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 1792));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2648), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2648));
  OZChannelBase::resetFlag((OZChannelBase *)this + 25, 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)this + 25);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 2952), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 2952));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3104), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 3104));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3256), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 3256));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 26000), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 26000));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 26128), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 26128));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 26280), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 26280));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 26720), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 26720));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 3688), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 3688));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4696), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 4696));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 4848), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 4848));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 8520), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 8520));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9528), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 9528));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 9680), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 9680));
  OZChannel::setMin((OZChannel *)((char *)this + 10272), 0.0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10272), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 10272));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 10424), 0, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 10424), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 10424));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 13760), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 13760));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 14768), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 14768));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 14920), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 14920));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 15512), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 15512));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 15664), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 15664));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 16104), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 16104));
  OZChannelBase::enable((OZChannelBase *)((char *)this + 16808), 0, 0);
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 16808), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 16808));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 20144), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 20144));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 21152), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 21152));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 21304), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 21304));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 21896), 16, 0);
  OZChannelFolder::saveStateAsDefault((OZChannelFolder *)((char *)this + 21896));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 22336), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 22336));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 22488), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 22488));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 25592), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 25592));
  OZChannelBase::resetFlag((OZChannelBase *)((char *)this + 25744), 16, 0);
  OZChannelBase::saveStateAsDefault((OZChannelBase *)((char *)this + 25744));
}

void sub_1B28D7854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, OZChannelQuad *a10, OZChannel *a11, OZChannelPercent *a12, void **a13, OZChannelQuad *a14, OZChannel *a15, OZChannelQuad *a16, OZChannel *a17, OZChannelQuad *a18, OZChannel *a19, OZChannelPercent *a20,OZChannelEnum *a21,OZChannel *a22,OZChannel *a23,OZChannel *a24,OZChannel2D *a25,OZChannel2D *a26,OZChannelPercent *a27,OZChannelPosition *a28,OZChannel2D *a29,OZChannel *a30,OZChannel2D *a31,OZChannelPercent *a32,OZChannel2D *a33,OZChannelPercent *a34,OZChannel2D *a35,OZChannelPercent *a36,OZChannel *a37,OZChannel *a38)
{
  uint64_t v38;
  OZChannelFolder *v39;
  OZChannel2D *v40;
  OZChannel2D *v41;
  OZChannel *v42;
  OZChannelFolder *v43;
  OZChannelFolder *v44;
  OZChannelFolder *v45;
  uint64_t v46;
  void *v48;

  PCString::~PCString((PCString *)(v46 - 96));
  OZChannel2D::~OZChannel2D(v41);
  OZChannel2D::~OZChannel2D(v40);
  OZChannel::~OZChannel(v42);
  OZChannelFolder::~OZChannelFolder(v44);
  OZChannelEnum::~OZChannelEnum(a21);
  OZChannel::~OZChannel(a22);
  OZChannelQuad::~OZChannelQuad(a10);
  OZChannel::~OZChannel(a23);
  OZChannel::~OZChannel(a24);
  OZChannel2D::~OZChannel2D(a25);
  OZChannel::~OZChannel(a11);
  OZChannel2D::~OZChannel2D(a26);
  OZChannelPercent::~OZChannelPercent(a27);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v46 - 168));
  OZChannelFolder::~OZChannelFolder(v43);
  OZChannelQuad::~OZChannelQuad(a14);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v46 - 176));
  OZChannelPosition::~OZChannelPosition(a28);
  OZChannel2D::~OZChannel2D(a29);
  OZChannel::~OZChannel(a30);
  OZChannel::~OZChannel(a15);
  OZChannel2D::~OZChannel2D(a31);
  OZChannelPercent::~OZChannelPercent(a32);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v46 - 144));
  OZChannelFolder::~OZChannelFolder(v45);
  OZChannelQuad::~OZChannelQuad(a16);
  OZChannelEnum::~OZChannelEnum(*(OZChannelEnum **)(v46 - 160));
  OZChannel::~OZChannel(*(OZChannel **)(v46 - 152));
  OZChannel::~OZChannel(a17);
  OZChannel2D::~OZChannel2D(a33);
  OZChannelPercent::~OZChannelPercent(a34);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v46 - 136));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v46 - 112));
  OZChannelQuad::~OZChannelQuad(a18);
  OZChannel::~OZChannel(a19);
  OZChannel2D::~OZChannel2D(a35);
  OZChannelPercent::~OZChannelPercent(a36);
  OZChannelColorNoAlpha::~OZChannelColorNoAlpha(*(OZChannelColorNoAlpha **)(v46 - 128));
  OZChannelFolder::~OZChannelFolder(*(OZChannelFolder **)(v46 - 120));
  OZChannelPercent::~OZChannelPercent(a12);
  OZChannel::~OZChannel(a37);
  OZChannel::~OZChannel(a38);
  OZChannelPercent::~OZChannelPercent(*(OZChannelPercent **)(v46 - 224));
  OZChannel::~OZChannel(*(OZChannel **)(v46 - 216));
  OZChannel::~OZChannel(*(OZChannel **)(v46 - 208));
  OZChannelRotation3D::~OZChannelRotation3D(*(OZChannelRotation3D **)(v46 - 200));
  OZChannelScale3D::~OZChannelScale3D(*(OZChannelScale3D **)(v46 - 192));
  OZChannelPercent::~OZChannelPercent(a20);
  OZChannelPosition3D::~OZChannelPosition3D(*(OZChannelPosition3D **)(v46 - 184));
  OZChannelFolder::~OZChannelFolder(v39);
  v48 = *a13;
  if (*a13)
  {
    *(_QWORD *)(v38 + 16) = v48;
    operator delete(v48);
  }
  _Unwind_Resume(a1);
}

void TXSequenceChannels::makeChannelList(TXSequenceChannels *this)
{
  unint64_t v2;
  char *v3;
  char **v4;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;

  v3 = (char *)this + 24;
  v2 = *((_QWORD *)this + 3);
  v4 = (char **)((char *)this + 8);
  v5 = (char *)this + 32;
  v6 = (_QWORD *)*((_QWORD *)this + 2);
  if ((unint64_t)v6 >= v2)
  {
    v8 = ((char *)v6 - *v4) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      goto LABEL_98;
    v9 = v2 - (_QWORD)*v4;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 24, v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = v5;
    v7 = v13 + 8;
    v16 = (char *)*((_QWORD *)this + 1);
    v15 = (char *)*((_QWORD *)this + 2);
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = *v4;
    }
    *((_QWORD *)this + 1) = v13;
    *((_QWORD *)this + 2) = v7;
    *((_QWORD *)this + 3) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = v5;
    v7 = v6 + 1;
  }
  *((_QWORD *)this + 2) = v7;
  v18 = (char *)this + 3560;
  v19 = *((_QWORD *)this + 3);
  if ((unint64_t)v7 >= v19)
  {
    v21 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
      goto LABEL_98;
    v22 = v19 - (_QWORD)*v4;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = v18;
    v20 = v26 + 8;
    v29 = (char *)*((_QWORD *)this + 1);
    v28 = (char *)*((_QWORD *)this + 2);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v4;
    }
    *((_QWORD *)this + 1) = v26;
    *((_QWORD *)this + 2) = v20;
    *((_QWORD *)this + 3) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v7 = v18;
    v20 = v7 + 1;
  }
  *((_QWORD *)this + 2) = v20;
  v31 = (char *)this + 8392;
  v32 = *((_QWORD *)this + 3);
  if ((unint64_t)v20 >= v32)
  {
    v34 = ((char *)v20 - *v4) >> 3;
    if ((unint64_t)(v34 + 1) >> 61)
      goto LABEL_98;
    v35 = v32 - (_QWORD)*v4;
    v36 = v35 >> 2;
    if (v35 >> 2 <= (unint64_t)(v34 + 1))
      v36 = v34 + 1;
    if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
      v37 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v37 = v36;
    if (v37)
      v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v37);
    else
      v38 = 0;
    v39 = &v38[8 * v34];
    v40 = &v38[8 * v37];
    *(_QWORD *)v39 = v31;
    v33 = v39 + 8;
    v42 = (char *)*((_QWORD *)this + 1);
    v41 = (char *)*((_QWORD *)this + 2);
    if (v41 != v42)
    {
      do
      {
        v43 = *((_QWORD *)v41 - 1);
        v41 -= 8;
        *((_QWORD *)v39 - 1) = v43;
        v39 -= 8;
      }
      while (v41 != v42);
      v41 = *v4;
    }
    *((_QWORD *)this + 1) = v39;
    *((_QWORD *)this + 2) = v33;
    *((_QWORD *)this + 3) = v40;
    if (v41)
      operator delete(v41);
  }
  else
  {
    *v20 = v31;
    v33 = v20 + 1;
  }
  *((_QWORD *)this + 2) = v33;
  v44 = (char *)this + 13632;
  v45 = *((_QWORD *)this + 3);
  if ((unint64_t)v33 >= v45)
  {
    v47 = ((char *)v33 - *v4) >> 3;
    if ((unint64_t)(v47 + 1) >> 61)
      goto LABEL_98;
    v48 = v45 - (_QWORD)*v4;
    v49 = v48 >> 2;
    if (v48 >> 2 <= (unint64_t)(v47 + 1))
      v49 = v47 + 1;
    if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
      v50 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v50 = v49;
    if (v50)
      v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v50);
    else
      v51 = 0;
    v52 = &v51[8 * v47];
    v53 = &v51[8 * v50];
    *(_QWORD *)v52 = v44;
    v46 = v52 + 8;
    v55 = (char *)*((_QWORD *)this + 1);
    v54 = (char *)*((_QWORD *)this + 2);
    if (v54 != v55)
    {
      do
      {
        v56 = *((_QWORD *)v54 - 1);
        v54 -= 8;
        *((_QWORD *)v52 - 1) = v56;
        v52 -= 8;
      }
      while (v54 != v55);
      v54 = *v4;
    }
    *((_QWORD *)this + 1) = v52;
    *((_QWORD *)this + 2) = v46;
    *((_QWORD *)this + 3) = v53;
    if (v54)
      operator delete(v54);
  }
  else
  {
    *v33 = v44;
    v46 = v33 + 1;
  }
  *((_QWORD *)this + 2) = v46;
  v57 = (char *)this + 20016;
  v58 = *((_QWORD *)this + 3);
  if ((unint64_t)v46 >= v58)
  {
    v60 = ((char *)v46 - *v4) >> 3;
    if ((unint64_t)(v60 + 1) >> 61)
      goto LABEL_98;
    v61 = v58 - (_QWORD)*v4;
    v62 = v61 >> 2;
    if (v61 >> 2 <= (unint64_t)(v60 + 1))
      v62 = v60 + 1;
    if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v62;
    if (v63)
      v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v63);
    else
      v64 = 0;
    v65 = &v64[8 * v60];
    v66 = &v64[8 * v63];
    *(_QWORD *)v65 = v57;
    v59 = v65 + 8;
    v68 = (char *)*((_QWORD *)this + 1);
    v67 = (char *)*((_QWORD *)this + 2);
    if (v67 != v68)
    {
      do
      {
        v69 = *((_QWORD *)v67 - 1);
        v67 -= 8;
        *((_QWORD *)v65 - 1) = v69;
        v65 -= 8;
      }
      while (v67 != v68);
      v67 = *v4;
    }
    *((_QWORD *)this + 1) = v65;
    *((_QWORD *)this + 2) = v59;
    *((_QWORD *)this + 3) = v66;
    if (v67)
      operator delete(v67);
  }
  else
  {
    *v46 = v57;
    v59 = v46 + 1;
  }
  *((_QWORD *)this + 2) = v59;
  v70 = (char *)this + 26000;
  v71 = *((_QWORD *)this + 3);
  if ((unint64_t)v59 < v71)
  {
    *v59 = v70;
    v72 = v59 + 1;
    goto LABEL_97;
  }
  v73 = ((char *)v59 - *v4) >> 3;
  if ((unint64_t)(v73 + 1) >> 61)
LABEL_98:
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v74 = v71 - (_QWORD)*v4;
  v75 = v74 >> 2;
  if (v74 >> 2 <= (unint64_t)(v73 + 1))
    v75 = v73 + 1;
  if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF8)
    v76 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v76 = v75;
  if (v76)
    v77 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v3, v76);
  else
    v77 = 0;
  v78 = &v77[8 * v73];
  v79 = &v77[8 * v76];
  *(_QWORD *)v78 = v70;
  v72 = v78 + 8;
  v81 = (char *)*((_QWORD *)this + 1);
  v80 = (char *)*((_QWORD *)this + 2);
  if (v80 != v81)
  {
    do
    {
      v82 = *((_QWORD *)v80 - 1);
      v80 -= 8;
      *((_QWORD *)v78 - 1) = v82;
      v78 -= 8;
    }
    while (v80 != v81);
    v80 = *v4;
  }
  *((_QWORD *)this + 1) = v78;
  *((_QWORD *)this + 2) = v72;
  *((_QWORD *)this + 3) = v79;
  if (v80)
    operator delete(v80);
LABEL_97:
  *((_QWORD *)this + 2) = v72;
}

void OZChannelScale3D::~OZChannelScale3D(OZChannelScale3D *this)
{
  *(_QWORD *)this = &off_1E6560F48;
  *((_QWORD *)this + 2) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel2D::~OZChannel2D(this);
}

{
  *(_QWORD *)this = &off_1E6560F48;
  *((_QWORD *)this + 2) = &unk_1E65612A0;
  OZChannel::~OZChannel((OZChannel *)((char *)this + 440));
  OZChannel2D::~OZChannel2D(this);
  JUMPOUT(0x1B5E29170);
}

void TXSequenceChannels::TXSequenceChannels(TXSequenceChannels *this, const TXSequenceChannels *a2, OZChannelFolder *a3)
{
  OZChannelFolder *v6;

  *(_QWORD *)this = &off_1E64F80F8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v6 = (OZChannelFolder *)((char *)this + 32);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 32), (const OZChannelFolder *)((char *)a2 + 32), a3);
  OZChannelPosition3D::OZChannelPosition3D((TXSequenceChannels *)((char *)this + 160), (const TXSequenceChannels *)((char *)a2 + 160), v6);
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 1048), (const OZChannelBase *)((char *)a2 + 1048), v6);
  OZChannelScale3D::OZChannelScale3D((TXSequenceChannels *)((char *)this + 1200), (const TXSequenceChannels *)((char *)a2 + 1200), v6);
  OZChannelRotation3D::OZChannelRotation3D((TXSequenceChannels *)((char *)this + 1792), (const TXSequenceChannels *)((char *)a2 + 1792), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 2648), (const OZChannelBase *)((char *)a2 + 2648), v6);
  *((_QWORD *)this + 331) = &off_1E6551728;
  *((_QWORD *)this + 333) = &unk_1E6551A88;
  OZChannel::OZChannel((OZChannel *)((char *)this + 2800), (const OZChannelBase *)a2 + 25, v6);
  *((_QWORD *)this + 350) = &off_1E6551358;
  *((_QWORD *)this + 352) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 2952), (const OZChannelBase *)((char *)a2 + 2952), v6);
  OZChannel::OZChannel((OZChannel *)((char *)this + 3104), (const OZChannelBase *)((char *)a2 + 3104), v6);
  *((_QWORD *)this + 388) = &off_1E6551358;
  *((_QWORD *)this + 390) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 3256), (const OZChannelBase *)((char *)a2 + 3256), v6);
  *((_QWORD *)this + 407) = &off_1E6551358;
  *((_QWORD *)this + 409) = &unk_1E65516B8;
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 3408), (const OZChannelBase *)((char *)a2 + 3408), v6);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 3560), (const OZChannelFolder *)((char *)a2 + 3560), a3);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 3688), (const TXSequenceChannels *)((char *)a2 + 3688), (OZChannelFolder *)((char *)this + 3560));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 4696), (const OZChannelBase *)((char *)a2 + 4696), (OZChannelFolder *)((char *)this + 3560));
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 4848), (const TXSequenceChannels *)((char *)a2 + 4848), (OZChannelFolder *)((char *)this + 3560));
  OZChannel::OZChannel((OZChannel *)((char *)this + 5288), (const OZChannelBase *)((char *)a2 + 5288), (OZChannelFolder *)((char *)this + 3560));
  *((_QWORD *)this + 661) = &off_1E6551358;
  *((_QWORD *)this + 663) = &unk_1E65516B8;
  OZChannelQuad::OZChannelQuad((TXSequenceChannels *)((char *)this + 5440), (const TXSequenceChannels *)((char *)a2 + 5440), (OZChannelFolder *)((char *)this + 3560));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 8392), (const OZChannelFolder *)((char *)a2 + 8392), a3);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 8520), (const TXSequenceChannels *)((char *)a2 + 8520), (OZChannelFolder *)((char *)this + 8392));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 9528), (const OZChannelBase *)((char *)a2 + 9528), (OZChannelFolder *)((char *)this + 8392));
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 9680), (const TXSequenceChannels *)((char *)a2 + 9680), (OZChannelFolder *)((char *)this + 8392));
  OZChannel::OZChannel((OZChannel *)((char *)this + 10120), (const OZChannelBase *)((char *)a2 + 10120), (OZChannelFolder *)((char *)this + 8392));
  *((_QWORD *)this + 1265) = &off_1E6551358;
  *((_QWORD *)this + 1267) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 10272), (const OZChannelBase *)((char *)a2 + 10272), (OZChannelFolder *)((char *)this + 8392));
  *((_QWORD *)this + 1284) = &off_1E6551358;
  *((_QWORD *)this + 1286) = &unk_1E65516B8;
  OZChannelEnum::OZChannelEnum((TXSequenceChannels *)((char *)this + 10424), (const TXSequenceChannels *)((char *)a2 + 10424), (OZChannelFolder *)((char *)this + 8392));
  OZChannelQuad::OZChannelQuad((TXSequenceChannels *)((char *)this + 10680), (const TXSequenceChannels *)((char *)a2 + 10680), (OZChannelFolder *)((char *)this + 8392));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 13632), (const OZChannelFolder *)((char *)a2 + 13632), a3);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 13760), (const TXSequenceChannels *)((char *)a2 + 13760), (OZChannelFolder *)((char *)this + 13632));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 14768), (const OZChannelBase *)((char *)a2 + 14768), (OZChannelFolder *)((char *)this + 13632));
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 14920), (const TXSequenceChannels *)((char *)a2 + 14920), (OZChannelFolder *)((char *)this + 13632));
  OZChannel::OZChannel((OZChannel *)((char *)this + 15360), (const OZChannelBase *)((char *)a2 + 15360), (OZChannelFolder *)((char *)this + 13632));
  *((_QWORD *)this + 1920) = &off_1E6551358;
  *((_QWORD *)this + 1922) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 15512), (const OZChannelBase *)((char *)a2 + 15512), (OZChannelFolder *)((char *)this + 13632));
  *((_QWORD *)this + 1939) = &off_1E6551358;
  *((_QWORD *)this + 1941) = &unk_1E65516B8;
  OZChannelScale::OZChannelScale((TXSequenceChannels *)((char *)this + 15664), (const TXSequenceChannels *)((char *)a2 + 15664), (OZChannelFolder *)((char *)this + 13632));
  OZChannelPosition::OZChannelPosition((TXSequenceChannels *)((char *)this + 16104), (const TXSequenceChannels *)((char *)a2 + 16104), (OZChannelFolder *)((char *)this + 13632));
  OZChannelEnum::OZChannelEnum((TXSequenceChannels *)((char *)this + 16808), (const TXSequenceChannels *)((char *)a2 + 16808), (OZChannelFolder *)((char *)this + 13632));
  OZChannelQuad::OZChannelQuad((TXSequenceChannels *)((char *)this + 17064), (const TXSequenceChannels *)((char *)a2 + 17064), (OZChannelFolder *)((char *)this + 13632));
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 20016), (const OZChannelFolder *)((char *)a2 + 20016), a3);
  OZChannelColorNoAlpha::OZChannelColorNoAlpha((TXSequenceChannels *)((char *)this + 20144), (const TXSequenceChannels *)((char *)a2 + 20144), (OZChannelFolder *)((char *)this + 20016));
  OZChannelPercent::OZChannelPercent((OZChannelPercent *)((char *)this + 21152), (const OZChannelBase *)((char *)a2 + 21152), (OZChannelFolder *)((char *)this + 20016));
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 21304), (const TXSequenceChannels *)((char *)a2 + 21304), (OZChannelFolder *)((char *)this + 20016));
  OZChannel::OZChannel((OZChannel *)((char *)this + 21744), (const OZChannelBase *)((char *)a2 + 21744), (OZChannelFolder *)((char *)this + 20016));
  *((_QWORD *)this + 2718) = &off_1E6551358;
  *((_QWORD *)this + 2720) = &unk_1E65516B8;
  OZChannelScale::OZChannelScale((TXSequenceChannels *)((char *)this + 21896), (const TXSequenceChannels *)((char *)a2 + 21896), (OZChannelFolder *)((char *)this + 20016));
  OZChannel::OZChannel((OZChannel *)((char *)this + 22336), (const OZChannelBase *)((char *)a2 + 22336), (OZChannelFolder *)((char *)this + 20016));
  *((_QWORD *)this + 2792) = &off_1E6551358;
  *((_QWORD *)this + 2794) = &unk_1E65516B8;
  OZChannel::OZChannel((OZChannel *)((char *)this + 22488), (const OZChannelBase *)((char *)a2 + 22488), (OZChannelFolder *)((char *)this + 20016));
  *((_QWORD *)this + 2811) = &off_1E6551728;
  *((_QWORD *)this + 2813) = &unk_1E6551A88;
  OZChannelQuad::OZChannelQuad((TXSequenceChannels *)((char *)this + 22640), (const TXSequenceChannels *)((char *)a2 + 22640), (OZChannelFolder *)((char *)this + 20016));
  OZChannel::OZChannel((OZChannel *)((char *)this + 25592), (const OZChannelBase *)((char *)a2 + 25592), v6);
  *((_QWORD *)this + 3199) = &off_1E6551AF8;
  *((_QWORD *)this + 3201) = &unk_1E6551E58;
  OZChannelEnum::OZChannelEnum((TXSequenceChannels *)((char *)this + 25744), (const TXSequenceChannels *)((char *)a2 + 25744), v6);
  OZChannelFolder::OZChannelFolder((OZChannelFolder *)((char *)this + 26000), (const OZChannelFolder *)((char *)a2 + 26000), a3);
  OZChannel::OZChannel((OZChannel *)((char *)this + 26128), (const OZChannelBase *)((char *)a2 + 26128), (OZChannelFolder *)((char *)this + 26000));
  *((_QWORD *)this + 3266) = &off_1E6551358;
  *((_QWORD *)this + 3268) = &unk_1E65516B8;
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 26280), (const TXSequenceChannels *)((char *)a2 + 26280), (OZChannelFolder *)((char *)this + 26000));
  OZChannel2D::OZChannel2D((TXSequenceChannels *)((char *)this + 26720), (const TXSequenceChannels *)((char *)a2 + 26720), (OZChannelFolder *)((char *)this + 26000));
  *((_QWORD *)this + 3395) = a3;
  TXSequenceChannels::makeChannelList(this);
  TXSequenceChannels::copyMaterialSequenceFolders((uint64_t)this, (_QWORD *)a2 + 1);
}

