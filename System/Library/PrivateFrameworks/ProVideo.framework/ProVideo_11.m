void sub_1B2CD84C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

BOOL LiAgent::getImageToObjectTransform@<W0>(double **this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return PCMatrix44Tmpl<double>::planarInverseZ(a2, this[22], 0.0);
}

__n128 LiAgent::getImageToWorldTransform@<Q0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *((_QWORD *)this + 23);
  v3 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(v2 + 32);
  v7 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t LiAgent::getImageToDocumentTransform@<X0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v3 = *((_QWORD *)this + 28);
  v14 = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v8 = 0x3FF0000000000000;
  v5 = 0x3FF0000000000000;
  v6 = 0u;
  v7 = 0u;
  v9 = 0u;
  v10 = 0u;
  v12 = 0u;
  v13 = 0u;
  LiAgent::getImageToFilmTransform((uint64_t)this, (uint64_t)&v5);
  return PCMatrix44Tmpl<double>::operator*(v3, (__int128 *)&v5, a2);
}

__n128 LiAgent::getObjectToWorldTransform@<Q0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *((_QWORD *)this + 24);
  v3 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(v2 + 32);
  v7 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

__n128 LiAgent::getEyeToWorldTransform@<Q0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *((_QWORD *)this + 25);
  v3 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(v2 + 32);
  v7 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

__n128 LiAgent::getWorldToFilmTransform@<Q0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  v2 = *((_QWORD *)this + 26);
  v3 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(a2 + 80) = v3;
  v4 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a2 + 112) = v4;
  v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v5;
  result = *(__n128 *)(v2 + 32);
  v7 = *(_OWORD *)(v2 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v7;
  return result;
}

uint64_t LiAgent::getObjectToPixelTransform@<X0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  return PCMatrix44Tmpl<double>::operator*(*((_QWORD *)this + 20), *((__int128 **)this + 22), a2);
}

uint64_t LiAgent::getPixelToObjectTransform@<X0>(double **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = 0x3FF0000000000000;
  v21 = 0x3FF0000000000000;
  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v16 = 0u;
  v17 = 0u;
  v19 = 0u;
  v20 = 0u;
  v22 = 0u;
  v23 = 0u;
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v15, this[22], 0.0);
  v14 = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v8 = 0x3FF0000000000000;
  v5 = 0x3FF0000000000000;
  v6 = 0u;
  v7 = 0u;
  v9 = 0u;
  v10 = 0u;
  v12 = 0u;
  v13 = 0u;
  LiAgent::getInversePixelTransform((uint64_t)this, (uint64_t)&v5, 0.0);
  return PCMatrix44Tmpl<double>::operator*((uint64_t)&v15, (__int128 *)&v5, a2);
}

BOOL LiAgent::getFaceCameraTransform@<W0>(LiAgent *this@<X0>, uint64_t a2@<X8>)
{
  float64x2_t *v3;
  float64x2_t v4;
  float64x2_t v5;
  float64x2_t v6;
  float64x2_t v7;
  float64x2_t v8;
  float64x2_t v9;
  _BOOL8 result;
  float64x2_t v11;
  float64x2_t v12;
  _BYTE v13[32];
  _BYTE v14[32];
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;

  v3 = (float64x2_t *)*((_QWORD *)this + 27);
  v4 = v3[3];
  v6 = *v3;
  v5 = v3[1];
  *(float64x2_t *)v14 = v3[2];
  *(float64x2_t *)&v14[16] = v4;
  *(float64x2_t *)v13 = v6;
  *(float64x2_t *)&v13[16] = v5;
  v7 = v3[7];
  v9 = v3[4];
  v8 = v3[5];
  v17 = v3[6];
  v18 = v7;
  v15 = v9;
  v16 = v8;
  PCMatrix44Tmpl<double>::orthoNormalize((uint64_t)v13);
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  result = PCMatrix44Tmpl<double>::planarInverseW(a2, (double *)v13, 0.0);
  if ((result & 1) == 0)
  {
    *(_QWORD *)&v11.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v14[8], 1).u64[0];
    v11.f64[1] = *(float64_t *)v14;
    *(_QWORD *)&v12.f64[0] = vdupq_laneq_s64(*(int64x2_t *)&v13[8], 1).u64[0];
    v12.f64[1] = *(float64_t *)v13;
    v15 = vsubq_f64(vmulq_f64(*(float64x2_t *)&v13[8], v11), vmulq_f64(*(float64x2_t *)&v14[8], v12));
    v16.f64[0] = *(double *)v13 * *(double *)&v14[8] - *(double *)v14 * *(double *)&v13[8];
    v16.f64[1] = 0.0;
    return PCMatrix44Tmpl<double>::planarInverseW(a2, (double *)v13, 0.0);
  }
  return result;
}

BOOL PCMatrix44Tmpl<double>::orthoNormalize(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  char *v8;
  float64x2_t *v9;
  float64x2_t v10;
  float64x2_t v11;
  double v12;
  uint64_t v13;
  _OWORD *v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  double v18;
  _BOOL8 result;
  _QWORD *v20;
  uint64_t j;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[4];
  uint64_t v25;
  uint64_t v26;

  v2 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  v3 = (uint64_t *)(a1 + 32);
  do
  {
    v4 = *v3;
    v5 = v3[4];
    v6 = (_QWORD *)((char *)v24 + v2);
    *v6 = *(v3 - 4);
    v6[1] = v4;
    v6[2] = v5;
    v2 += 24;
    ++v3;
  }
  while (v2 != 72);
  for (i = 0; i != 3; ++i)
  {
    if (i)
    {
      v8 = (char *)v24 + 24 * i;
      v10 = *(float64x2_t *)(v8 + 8);
      v9 = (float64x2_t *)(v8 + 8);
      v11 = v10;
      v12 = *((double *)v24 + 3 * i);
      v13 = i;
      v14 = (_OWORD *)((char *)v24 + 8);
      do
      {
        v15 = *((double *)v14 - 1);
        v16 = *(float64x2_t *)v14;
        v14 = (_OWORD *)((char *)v14 + 24);
        v17 = vmulq_f64(v11, v16);
        v18 = v12 * v15 + v17.f64[0] + v17.f64[1];
        v12 = v12 - v15 * v18;
        *((double *)v24 + 3 * i) = v12;
        v11 = vsubq_f64(v11, vmulq_n_f64(v16, v18));
        *v9 = v11;
        --v13;
      }
      while (v13);
    }
    result = PCVector3<double>::normalize((double *)v24 + 3 * i, 0.000000100000001);
  }
  v20 = (_QWORD *)(a1 + 64);
  for (j = 16; j != 88; j += 24)
  {
    v22 = *(_QWORD *)((char *)v24 + j - 8);
    v23 = *(_QWORD *)((char *)v24 + j);
    *(v20 - 8) = *(_QWORD *)((char *)&v24[-1] + j);
    *(v20 - 4) = v22;
    *v20 = v23;
    v20[4] = 0;
    ++v20;
  }
  return result;
}

BOOL PCMatrix44Tmpl<double>::planarInverseW(uint64_t a1, double *a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  _BOOL8 v16;

  v4 = a2[9];
  v3 = a2[10];
  v6 = a2[4];
  v5 = a2[5];
  v7 = a2[6];
  v8 = a2[8];
  v9 = v5 * v3 - v4 * v7;
  v11 = a2[1];
  v10 = a2[2];
  v12 = v7 * v8 - v3 * v6;
  v13 = *a2;
  v14 = v4 * v6 - v5 * v8;
  v15 = v10 * v14 + v9 * *a2 + v11 * v12;
  v16 = fabs(v15) >= a3 && v15 != 0.0;
  if (v16)
  {
    *(double *)a1 = v9 * (1.0 / v15);
    *(double *)(a1 + 8) = (v4 * v10 - v3 * v11) * (1.0 / v15);
    *(double *)(a1 + 16) = (v7 * v11 - v5 * v10) * (1.0 / v15);
    *(double *)(a1 + 32) = v12 * (1.0 / v15);
    *(double *)(a1 + 40) = (v3 * v13 - v10 * v8) * (1.0 / v15);
    *(double *)(a1 + 48) = (v10 * v6 - v7 * v13) * (1.0 / v15);
    *(double *)(a1 + 64) = v14 * (1.0 / v15);
    *(double *)(a1 + 72) = (v11 * v8 - v4 * v13) * (1.0 / v15);
    *(double *)(a1 + 80) = (v5 * v13 - v11 * v6) * (1.0 / v15);
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  }
  return v16;
}

void LiAgent::get2DClipPlanes(LiAgent *this@<X0>, LiClipSet *a2@<X8>)
{
  __int128 v3[2];

  LiClipSet::LiClipSet(a2, (LiAgent *)((char *)this + 96));
  v3[0] = 0uLL;
  v3[1] = xmmword_1B304EED0;
  LiClipSet::flatten((uint64_t)a2, v3);
}

void sub_1B2CD8ACC(_Unwind_Exception *a1)
{
  LiClipSet *v1;

  LiClipSet::~LiClipSet(v1);
  _Unwind_Resume(a1);
}

void *LiAgent::getObjectClipPlanes(LiAgent *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 18);
  if (!result)
  {
    getEmptyClipSet();
    return &getEmptyClipSet(void)::emptyClipSet;
  }
  return result;
}

void getEmptyClipSet(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      LiClipSet::LiClipSet((LiClipSet *)&getEmptyClipSet(void)::emptyClipSet);
      __cxa_atexit((void (*)(void *))LiClipSet::~LiClipSet, &getEmptyClipSet(void)::emptyClipSet, &dword_1B2737000);
    }
  }
}

void sub_1B2CD8B78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *LiAgent::getWorldClipPlanes(LiAgent *this)
{
  void *result;

  result = (void *)*((_QWORD *)this + 19);
  if (!result)
  {
    getEmptyClipSet();
    return &getEmptyClipSet(void)::emptyClipSet;
  }
  return result;
}

uint64_t LiAgent::makeHeliumXForm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  BOOL v9;
  uint64_t v11;

  v8 = *(float *)(a1 + 384);
  LODWORD(v11) = *(_DWORD *)(a1 + 380);
  *((float *)&v11 + 1) = v8;
  v9 = *(float *)&v11 == 1.0 && v8 == 1.0;
  if (v9
    && LiRenderingTechnology::getUseHalfHeightFields((LiRenderingTechnology *)(*(_QWORD *)(a1 + 48) + 80)))
  {
    v11 = 0x3F3504F33F800000;
  }
  return LiHelium::createTransformNode(a2, a3, *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 132), (float *)&v11, a4);
}

uint64_t LiAgent::makeHeliumXForm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v4;

  v4 = 0;
  LiAgent::makeHeliumXForm(a1, a2, &v4, a3);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return result;
}

void sub_1B2CD8C8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

BOOL LiAgent::projectAndClipPolygon(double **this, uint64_t **a2, double a3)
{
  LiImagePolygon::clip(a2, (const LiClipSet *)(this + 12));
  return transform(this[20], a2);
}

uint64_t LiAgent::getRenderDevice(LiRenderParameters **this)
{
  return LiRenderParameters::getRenderDevice(this[6]);
}

uint64_t LiAgent::setFilterSize(uint64_t this, float a2, float a3)
{
  *(float *)(this + 380) = a2;
  *(float *)(this + 384) = a3;
  return this;
}

CGColorSpace **LiAgent::setRequestedColorDescription(CGColorSpace **this, const FxColorDescription *a2)
{
  CGColorSpace **result;
  CGColorSpace *v5;

  result = PCCFRef<CGColorSpace *>::operator=(this + 50, &a2->_pcColorDesc._colorSpaceRef._obj);
  v5 = *(CGColorSpace **)&a2->_pcColorDesc._dynamicRange;
  *((_DWORD *)this + 104) = LODWORD(a2->_pcColorDesc._toneMapMethod._gain);
  this[51] = v5;
  *((_BYTE *)this + 424) = a2->_isPremultiplied;
  return result;
}

uint64_t LiAgent::getRequestedColorDescription(LiAgent *this)
{
  return (uint64_t)this + 400;
}

uint64_t LiAgent::isDynamicRangeTrackingRender(FxColorDescription **this)
{
  return LiRenderParameters::isDynamicRangeTrackingRender(this[6]);
}

uint64_t LiAgent::setActualColorSpace(LiAgent *this, CGColorSpace *a2)
{
  return FxColorDescription::setCGColorSpace((FxColorDescription *)((char *)this + 432), a2);
}

uint64_t LiAgent::getActualColorSpace(LiAgent *this)
{
  FxColorDescription *ActualColorDescription;

  ActualColorDescription = (FxColorDescription *)LiAgent::getActualColorDescription(this);
  return FxColorDescription::getCGColorSpace(ActualColorDescription);
}

void LiAgentRequestedColorSpaceSentry::LiAgentRequestedColorSpaceSentry(LiAgentRequestedColorSpaceSentry *this, LiAgent *a2, CGColorSpace *a3)
{
  CGColorSpace *v6;
  FxColorDescription *v7;
  uint64_t v8;

  *(_QWORD *)this = a2;
  v6 = (CGColorSpace *)*((_QWORD *)a2 + 50);
  *((_QWORD *)this + 1) = v6;
  v7 = (FxColorDescription *)((char *)a2 + 400);
  if (v6)
    PCCFRefTraits<CGColorSpace *>::retain(v6);
  v8 = *((_QWORD *)a2 + 51);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 104);
  *((_QWORD *)this + 2) = v8;
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 424);
  FxColorDescription::setCGColorSpace(v7, a3);
}

void sub_1B2CD8DDC(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void LiAgentRequestedColorSpaceSentry::LiAgentRequestedColorSpaceSentry(LiAgentRequestedColorSpaceSentry *this, LiAgent *a2, const FxColorDescription *a3)
{
  CGColorSpace *v6;
  CGColorSpace **v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = a2;
  v6 = (CGColorSpace *)*((_QWORD *)a2 + 50);
  *((_QWORD *)this + 1) = v6;
  v7 = (CGColorSpace **)((char *)a2 + 400);
  if (v6)
    PCCFRefTraits<CGColorSpace *>::retain(v6);
  v8 = *((_QWORD *)a2 + 51);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 104);
  *((_QWORD *)this + 2) = v8;
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 424);
  PCCFRef<CGColorSpace *>::operator=(v7, &a3->_pcColorDesc._colorSpaceRef._obj);
  v9 = *(_QWORD *)&a3->_pcColorDesc._dynamicRange;
  *((_DWORD *)a2 + 104) = LODWORD(a3->_pcColorDesc._toneMapMethod._gain);
  *((_QWORD *)a2 + 51) = v9;
  *((_BYTE *)a2 + 424) = a3->_isPremultiplied;
}

void sub_1B2CD8E84(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry(CGColorSpace **this)
{
  CGColorSpace **v2;
  CGColorSpace *v3;
  CGColorSpace *v4;

  v2 = this + 1;
  v3 = *this;
  PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)*this + 50, this + 1);
  v4 = this[2];
  *((_DWORD *)v3 + 104) = *((_DWORD *)this + 6);
  *((_QWORD *)v3 + 51) = v4;
  *((_BYTE *)v3 + 424) = *((_BYTE *)this + 32);
  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
}

void PCColorDescription::PCColorDescription(PCColorDescription *this)
{
  this->_colorSpaceRef._obj = 0;
  this->_dynamicRange = 0;
  PCToneMapMethod::PCToneMapMethod(&this->_toneMapMethod);
}

void sub_1B2CD8F28(_Unwind_Exception *a1)
{
  CGColorSpace **v1;

  PCCFRef<CGColorSpace *>::~PCCFRef(v1);
  _Unwind_Resume(a1);
}

void LiAgentTransformData::~LiAgentTransformData(LiAgentTransformData *this)
{
  uint64_t v1;

  *(_QWORD *)this = &unk_1E6568DC8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

{
  uint64_t v1;

  *(_QWORD *)this = &unk_1E6568DC8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E29170);
}

void LiAgentData::~LiAgentData(LiAgentData *this)
{
  uint64_t v1;

  *(_QWORD *)this = &unk_1E6568DC8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E29170);
}

void LiAgentMatrixData::~LiAgentMatrixData(LiAgentMatrixData *this)
{
  uint64_t v1;

  *(_QWORD *)this = &unk_1E6568DC8;
  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E29170);
}

LiAgent *std::unique_ptr<LiAgent>::reset[abi:ne180100](LiAgent **a1, LiAgent *a2)
{
  LiAgent *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    LiAgent::~LiAgent(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void LiAgent_getHelium_Matrixes::LiAgent_getHelium_Matrixes(LiAgent_getHelium_Matrixes *this)
{
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *(_QWORD *)this = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 26) = 0x3FF0000000000000;
  *((_QWORD *)this + 21) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)((char *)this + 120) = _Q1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_QWORD *)this + 42) = 0x3FF0000000000000;
  *((_QWORD *)this + 37) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 248) = _Q1;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_QWORD *)this + 58) = 0x3FF0000000000000;
  *((_QWORD *)this + 53) = 0x3FF0000000000000;
  *((_QWORD *)this + 47) = 0x3FF0000000000000;
  *((_QWORD *)this + 48) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *((_QWORD *)this + 79) = 0x3FF0000000000000;
  *((_QWORD *)this + 74) = 0x3FF0000000000000;
  *((_QWORD *)this + 69) = 0x3FF0000000000000;
  *((_QWORD *)this + 63) = 0x3FF0000000000000;
  *((_QWORD *)this + 64) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *((_QWORD *)this + 95) = 0x3FF0000000000000;
  *((_QWORD *)this + 90) = 0x3FF0000000000000;
  *((_QWORD *)this + 85) = 0x3FF0000000000000;
  *((_QWORD *)this + 80) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *((_QWORD *)this + 111) = 0x3FF0000000000000;
  *((_QWORD *)this + 106) = 0x3FF0000000000000;
  *((_QWORD *)this + 101) = 0x3FF0000000000000;
  *((_QWORD *)this + 96) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *((_QWORD *)this + 127) = 0x3FF0000000000000;
  *((_QWORD *)this + 122) = 0x3FF0000000000000;
  *((_QWORD *)this + 117) = 0x3FF0000000000000;
  *((_QWORD *)this + 112) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_QWORD *)this + 143) = 0x3FF0000000000000;
  *((_QWORD *)this + 138) = 0x3FF0000000000000;
  *((_QWORD *)this + 133) = 0x3FF0000000000000;
  *((_QWORD *)this + 128) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1032) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *((_QWORD *)this + 159) = 0x3FF0000000000000;
  *((_QWORD *)this + 154) = 0x3FF0000000000000;
  *((_QWORD *)this + 149) = 0x3FF0000000000000;
  *((_QWORD *)this + 144) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *((_QWORD *)this + 175) = 0x3FF0000000000000;
  *((_QWORD *)this + 170) = 0x3FF0000000000000;
  *((_QWORD *)this + 165) = 0x3FF0000000000000;
  *((_QWORD *)this + 160) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *((_QWORD *)this + 191) = 0x3FF0000000000000;
  *((_QWORD *)this + 186) = 0x3FF0000000000000;
  *((_QWORD *)this + 181) = 0x3FF0000000000000;
  *((_QWORD *)this + 176) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *((_OWORD *)this + 92) = 0u;
  *((_OWORD *)this + 91) = 0u;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *((_QWORD *)this + 207) = 0x3FF0000000000000;
  *((_QWORD *)this + 202) = 0x3FF0000000000000;
  *((_QWORD *)this + 197) = 0x3FF0000000000000;
  *((_QWORD *)this + 192) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *((_QWORD *)this + 223) = 0x3FF0000000000000;
  *((_QWORD *)this + 218) = 0x3FF0000000000000;
  *((_QWORD *)this + 213) = 0x3FF0000000000000;
  *((_QWORD *)this + 208) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *((_OWORD *)this + 107) = 0u;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *((_QWORD *)this + 239) = 0x3FF0000000000000;
  *((_QWORD *)this + 234) = 0x3FF0000000000000;
  *((_QWORD *)this + 229) = 0x3FF0000000000000;
  *((_QWORD *)this + 224) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *((_OWORD *)this + 116) = 0u;
  *((_OWORD *)this + 115) = 0u;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *(_OWORD *)((char *)this + 1880) = 0u;
}

BOOL transform(_OWORD *a1, double *a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL8 result;
  PCException *exception;
  PCString v11;

  v4 = transformPlane<double>(a1, a2, (uint64_t)a2);
  v5 = transformPlane<double>(a1, a2 + 6, (uint64_t)(a2 + 6));
  v6 = transformPlane<double>(a1, a2 + 12, (uint64_t)(a2 + 12));
  v7 = transformPlane<double>(a1, a2 + 18, (uint64_t)(a2 + 18));
  v8 = transformPlane<double>(a1, a2 + 24, (uint64_t)(a2 + 24));
  result = transformPlane<double>(a1, a2 + 30, (uint64_t)(a2 + 30));
  if (!v4 || !v5 || !v6 || !v7 || !v8 || !result)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v11, "transform frustum failed");
    PCException::PCException(exception, &v11);
    *(_QWORD *)exception = &unk_1E6512988;
  }
  return result;
}

void sub_1B2CD943C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

BOOL LiBaseCamera::worldToLocalMatrix@<W0>(LiBaseCamera *this@<X0>, double *a2@<X8>)
{
  _BOOL8 result;
  PCException *exception;
  PCString v5;

  (*(void (**)(double *__return_ptr))(*(_QWORD *)this + 16))(a2);
  result = PCMatrix44Tmpl<double>::invert(a2, a2, 0.0);
  if (!result)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v5, "failed to invert local matrix");
    PCException::PCException(exception, &v5);
  }
  return result;
}

void sub_1B2CD94FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiBaseCamera::worldToFilmMatrix@<X0>(LiBaseCamera *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v5[8];
  _QWORD v6[16];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 32))(v6);
  (*(void (**)(__int128 *__return_ptr, LiBaseCamera *))(*(_QWORD *)this + 24))(v5, this);
  return PCMatrix44Tmpl<double>::operator*((uint64_t)v6, v5, a2);
}

uint64_t LiBaseCamera::filmSpaceIsAnamorphic(LiBaseCamera *this)
{
  return 1;
}

uint64_t LiCamera::copy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  _QWORD v11[16];
  _QWORD v12[4];
  _QWORD v13[3];
  _QWORD v14[3];

  memset(v14, 0, sizeof(v14));
  memset(v13, 0, sizeof(v13));
  v12[0] = 0x3FF0000000000000;
  memset(&v12[1], 0, 24);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 424))(v11, a2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 440))(a2, v14);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 472))(a2, v12);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 456))(a2, v13);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 272))(v10, a2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 288))(a1, v10);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 688))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 696))(a1);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 432))(a1, v11);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 448))(a1, v14);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 480))(a1, v12);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 464))(a1, v13);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 488))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 632))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 640))(a1, v4);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 504))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
  v5 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 536))(a2);
  v6 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 576))(a2);
  (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 544))(a1, v5);
  (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 584))(a1, v6);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 552))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 560))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 592))(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 600))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 624))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 616))(a1, v7);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 664))(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 672))(a1, v8);
}

void LiCamera::getNearFarPlanes(LiCamera *this, double *a2, double *a3)
{
  *a2 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 536))(this);
  *a3 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 576))(this);
}

uint64_t LiCamera::setNearFarPlanes(LiCamera *this, double a2, double a3)
{
  (*(void (**)(LiCamera *, double))(*(_QWORD *)this + 544))(this, a2);
  return (*(uint64_t (**)(LiCamera *, double))(*(_QWORD *)this + 584))(this, a3);
}

double LiCamera::calcFilmSpaceTransform(uint64_t a1, double *a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double result;
  double v11[2];
  double v12;
  double v13;

  (*(void (**)(double *__return_ptr))(*(_QWORD *)a1 + 280))(v11);
  v5 = v12;
  v6 = v13;
  v7 = *a2 + a2[2] * 0.5;
  v8 = v12 / v13 * a2[3];
  a2[2] = v8;
  *a2 = v7 - v8 * 0.5;
  *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a3 = 0x3FF0000000000000;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 104) = 0u;
  *(double *)a3 = a2[2] / v5;
  v9 = v11[1];
  *(double *)(a3 + 24) = *a2 - v11[0] * a2[2] / v5;
  *(double *)(a3 + 40) = a2[3] / v6;
  *(double *)(a3 + 56) = a2[1] - v9 * a2[3] / v6;
  result = 1.0;
  *(_OWORD *)(a3 + 80) = xmmword_1B304EED0;
  return result;
}

void LiCamera::getLocalCenterOfProjection(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  double v5;
  double v6;
  double v7;
  PCException *exception;
  double v9[2];
  PCString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 632))(this);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  if (v4 == 1)
  {
    (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 272))(v9, this);
    v5 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
    if (v5 > -0.0000001 && v5 < 0.0000001)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v10, "ortho cameras don't have a center of projection");
      PCException::PCException(exception, &v10);
    }
    v6 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 688))(this);
    v7 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 488))(this);
    v10.var0 = (__CFString *)0x3FF0000000000000;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    LiCamera::adjustTranslationForModel(1, 0, (double *)&v10, (float64x2_t *)a2, v5, v6, v7, v9[0]);
  }
}

void sub_1B2CD9AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

void LiCamera::getCenterOfProjection(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  double v5;
  double v6;
  double v7;
  PCException *exception;
  PCString v9;
  double v10[2];
  double v11[4];
  float64x2_t v12;
  double v13;

  v4 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 632))(this);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  (*(void (**)(LiCamera *, uint64_t))(*(_QWORD *)this + 440))(this, a2);
  v12 = 0uLL;
  v13 = 0.0;
  (*(void (**)(LiCamera *, float64x2_t *))(*(_QWORD *)this + 456))(this, &v12);
  v11[0] = 1.0;
  memset(&v11[1], 0, 24);
  (*(void (**)(LiCamera *, double *))(*(_QWORD *)this + 472))(this, v11);
  if (v4 == 1)
  {
    (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 272))(v10, this);
    v5 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
    if (v5 > -0.0000001 && v5 < 0.0000001)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v9, "ortho cameras don't have a center of projection");
      PCException::PCException(exception, &v9);
    }
    v6 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 688))(this);
    v7 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 488))(this);
    LiCamera::adjustTranslationForModel(1, 0, v11, (float64x2_t *)a2, v5, v6, v7, v10[0]);
  }
  else if (!v4
         && (v12.f64[0] <= -0.0000001
          || v12.f64[0] >= 0.0000001
          || v12.f64[1] <= -0.0000001
          || v12.f64[1] >= 0.0000001
          || v13 <= -0.0000001
          || v13 >= 0.0000001))
  {
    PCQuat<double>::transform<double>(v11, v12.f64);
    *(float64x2_t *)a2 = vaddq_f64(v12, *(float64x2_t *)a2);
    *(double *)(a2 + 16) = v13 + *(double *)(a2 + 16);
  }
}

void sub_1B2CD9CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

double LiCamera::adjustTranslationForModel(int a1, int a2, double *a3, float64x2_t *a4, double result, double a6, double a7, double a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v15;
  float64x2_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    v18 = v11;
    v19 = v10;
    v20 = v8;
    v21 = v9;
    v15 = a6 * a7 * a8 * 0.5 / tan(result * 0.5 * 3.14159265 / 180.0);
    v16 = 0uLL;
    v17 = v15;
    if (a2 == 1)
    {
      v16 = (float64x2_t)vdupq_n_s64(0x8000000000000000);
      v17 = -v15;
    }
    PCQuat<double>::transform<double>(a3, v16.f64);
    *a4 = vaddq_f64(v16, *a4);
    result = v17 + a4[1].f64[0];
    a4[1].f64[0] = result;
  }
  return result;
}

void LiCamera::getLocalEyePosition(LiCamera *this@<X0>, double *a2@<X8>)
{
  int v4;
  double v5;
  double v6;
  double v7;
  __double2 v8;
  double v9[2];

  v4 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 632))(this);
  *a2 = 0.0;
  a2[1] = 0.0;
  a2[2] = 0.0;
  a2[3] = 1.0;
  if (v4 == 1)
  {
    (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 272))(v9, this);
    v5 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
    v6 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 688))(this);
    v7 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 488))(this);
    v8 = __sincos_stret(v5 * 0.00872664626);
    a2[2] = v9[0] * (v6 * (v8.__cosval * v7)) * 0.5;
    a2[3] = v8.__sinval;
  }
}

void LiCamera::getFocalPoint(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  double v5;
  double v6;
  double v7;
  PCException *exception;
  PCString v9;
  double v10[4];
  double v11[2];

  v4 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 632))(this);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  (*(void (**)(LiCamera *, uint64_t))(*(_QWORD *)this + 440))(this, a2);
  if (!v4)
  {
    (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 272))(v11, this);
    v10[0] = 1.0;
    memset(&v10[1], 0, 24);
    (*(void (**)(LiCamera *, double *))(*(_QWORD *)this + 472))(this, v10);
    v5 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
    if (v5 > -0.0000001 && v5 < 0.0000001)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v9, "viewpoint cameras must have a positive angle of view");
      PCException::PCException(exception, &v9);
    }
    v6 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 688))(this);
    v7 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 488))(this);
    LiCamera::adjustTranslationForModel(0, 1, v10, (float64x2_t *)a2, v5, v6, v7, v11[0]);
  }
}

void sub_1B2CDA01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

double *LiCamera::getPosition@<X0>(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  __n128 v4;
  __n128 v5;
  __n128 v6;
  double v8[16];
  float64x2_t v9;
  double v10;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(LiCamera *, uint64_t))(*(_QWORD *)this + 440))(this, a2);
  v9 = 0uLL;
  v10 = 0.0;
  (*(void (**)(LiCamera *, float64x2_t *))(*(_QWORD *)this + 456))(this, &v9);
  v5.n128_u64[0] = *(_QWORD *)&v9.f64[0];
  v6.n128_u64[0] = 0xBE7AD7F29ABCAF48;
  if (v9.f64[0] <= -0.0000001
    || (v4.n128_u64[0] = 0x3E7AD7F29ABCAF48, v9.f64[0] >= 0.0000001)
    || (v5.n128_u64[0] = *(_QWORD *)&v9.f64[1], v9.f64[1] <= -0.0000001)
    || v9.f64[1] >= 0.0000001
    || (v5.n128_f64[0] = v10, v10 <= -0.0000001)
    || v10 >= 0.0000001)
  {
    v8[0] = 1.0;
    memset(&v8[1], 0, 24);
    (*(void (**)(LiCamera *, double *, __n128, __n128, __n128))(*(_QWORD *)this + 472))(this, v8, v6, v4, v5);
    PCQuat<double>::transform<double>(v8, v9.f64);
    *(float64x2_t *)a2 = vaddq_f64(v9, *(float64x2_t *)a2);
    *(double *)(a2 + 16) = v10 + *(double *)(a2 + 16);
  }
  (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 424))(v8, this);
  return PCMatrix44Tmpl<double>::transform<double>(v8, (double *)a2, (double *)a2);
}

void LiCamera::getViewPoint(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  double v4;
  unint64_t v5;
  int v6;
  double v7;
  double v8;
  unint64_t v9;
  double v10[2];
  float64x2_t v11;
  unint64_t v12;
  double v13[4];

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  v13[0] = 1.0;
  memset(&v13[1], 0, 24);
  (*(void (**)(LiCamera *, double *))(*(_QWORD *)this + 472))(this, v13);
  v4 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
  if (v4 <= -0.0000001 || v4 >= 0.0000001)
  {
    v6 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 632))(this);
    v11 = 0uLL;
    v12 = 0;
    (*(void (**)(LiCamera *, float64x2_t *))(*(_QWORD *)this + 440))(this, &v11);
    if (v6 == 1)
    {
      (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 272))(v10, this);
      v7 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 688))(this);
      v8 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 488))(this);
      LiCamera::adjustTranslationForModel(1, 0, v13, &v11, v4, v7, v8, v10[0]);
    }
    v9 = v12;
    *(float64x2_t *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = 0x3FF0000000000000;
  }
  else
  {
    v11 = 0uLL;
    v12 = 0xBFF0000000000000;
    PCQuat<double>::transform<double>(v13, v11.f64);
    v5 = v12;
    *(float64x2_t *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 24) = 0;
  }
}

double *LiCamera::getViewPointWorld@<X0>(LiCamera *this@<X0>, double *a2@<X8>)
{
  double v5[16];

  (*(void (**)(double *__return_ptr))(*(_QWORD *)this + 144))(a2);
  (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 424))(v5, this);
  return PCMatrix44Tmpl<double>::transform<double>(v5, a2, a2);
}

void LiCamera::getFocalDistance(LiCamera *this)
{
  double v2;
  uint64_t v3;

  v2 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
  if (v2 <= -0.0000001 || v2 >= 0.0000001)
  {
    (*(void (**)(uint64_t *__return_ptr, LiCamera *))(*(_QWORD *)this + 272))(&v3, this);
    (*(void (**)(LiCamera *))(*(_QWORD *)this + 688))(this);
    (*(void (**)(LiCamera *))(*(_QWORD *)this + 488))(this);
    tan(v2 * 0.5 * 3.14159265 / 180.0);
  }
}

long double LiCamera::computeFocalDistance(LiCamera *this, double a2, double a3, double a4, double a5, double a6)
{
  return a3 * a4 * a5 * 0.5 / tan(a2 * 0.5 * 3.14159265 / 180.0);
}

double *LiCamera::adjustTranslationForModel(uint64_t a1, int a2, int a3, float64x2_t *a4)
{
  double v8;
  int v9;
  double v10;
  double v11;
  double v13;
  double v14;
  float64x2_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  int8x16_t v20;
  int32x2_t v21;
  int64x2_t v22;
  PCException *exception;
  float64x2_t v25;
  PCString v26;
  _OWORD v27[8];
  _OWORD v28[8];
  _QWORD v29[16];
  double v30[2];

  v8 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
  v10 = 1.0;
  if (!v9)
    v10 = 0.1;
  if (v8 <= v10)
    v11 = v10;
  else
    v11 = v8;
  if ((((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1) & 1) != 0
     || v8 < 0.1
     || fabs(v8 + -0.1) < 0.0000001)
    && v11 < 5.0
    && a2 == 1)
  {
    v11 = 5.0;
  }
  v13 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
  v14 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(v30, a1);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v29, a1);
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 424))(v28, a1);
  v27[4] = v28[4];
  v27[5] = v28[5];
  v27[6] = v28[6];
  v27[7] = v28[7];
  v27[0] = v28[0];
  v27[1] = v28[1];
  v27[2] = v28[2];
  v27[3] = v28[3];
  if (!PCMatrix44Tmpl<double>::invert((double *)v27, (double *)v27, 0.0))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v26, "singular parent matrix");
    PCException::PCException(exception, &v26);
  }
  PCMatrix44Tmpl<double>::transform<double>((double *)v28, a4->f64, a4->f64);
  *(_QWORD *)&v15.f64[0] = v29[2];
  v16 = *(double *)&v29[10];
  v17 = v13 * v14 * v30[0] * 0.5;
  *(_QWORD *)&v15.f64[1] = v29[6];
  v25 = v15;
  v18 = v17 / tan(v11 * 0.5 * 3.14159265 / 180.0);
  v19 = v16 * v18;
  if (a3 == 1)
    v19 = -(v16 * v18);
  v20 = (int8x16_t)vmulq_n_f64(v25, v18);
  v21 = vdup_n_s32(a3 == 1);
  v22.i64[0] = v21.u32[0];
  v22.i64[1] = v21.u32[1];
  *a4 = vaddq_f64(*a4, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v22, 0x3FuLL)), (int8x16_t)vnegq_f64((float64x2_t)v20), v20));
  a4[1].f64[0] = v19 + a4[1].f64[0];
  return PCMatrix44Tmpl<double>::transform<double>((double *)v27, a4->f64, a4->f64);
}

void sub_1B2CDA6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

void LiCamera::adjustFarPlaneForModel(uint64_t a1, int a2, int a3, double *a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13[2];

  v8 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  v9 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(v13, a1);
  if (a2 != a3)
  {
    v11 = v9 * v10 * v13[0] * 0.5;
    v12 = v11 / tan(v8 * 0.5 * 3.14159265 / 180.0);
    if (a3 == 1)
      v12 = -v12;
    *a4 = *a4 + v12;
  }
}

double LiCamera::getFarDepth(LiCamera *this)
{
  double v2;

  v2 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 576))(this);
  if ((*(unsigned int (**)(LiCamera *))(*(_QWORD *)this + 632))(this) == 1)
    return v2 + (*(double (**)(LiCamera *))(*(_QWORD *)this + 320))(this);
  return v2;
}

uint64_t LiCamera::getNearDepth(LiCamera *this)
{
  return (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 536))(this);
}

uint64_t LiCamera::convertToModel(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  double v6;
  _QWORD v7[3];

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
  if ((_DWORD)result != (_DWORD)a2)
  {
    v5 = result;
    memset(v7, 0, sizeof(v7));
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 440))(a1, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 368))(a1, v5, a2, v7);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 448))(a1, v7);
    v6 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, double *))(*(_QWORD *)a1 + 376))(a1, v5, a2, &v6);
    (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 584))(a1, v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 640))(a1, a2);
  }
  return result;
}

double LiCamera::localToWorldMatrix@<D0>(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  double v5;
  double v6;
  __n128 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  double *v56;
  uint64_t v57;
  double result;
  PCException *exception;
  double v60[16];
  double v61[4];
  double v62;
  double v63;
  double v64;
  unint64_t v65;
  double v66;
  double v67;
  _QWORD v68[3];
  _QWORD v69[3];
  PCString v70;
  double v71;
  double v72;

  v65 = 0;
  v66 = 0.0;
  v67 = 0.0;
  v62 = 0.0;
  v63 = 0.0;
  v64 = 0.0;
  v61[0] = 1.0;
  memset(&v61[1], 0, 24);
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  (*(void (**)(double *__return_ptr))(*(_QWORD *)this + 424))(v60);
  (*(void (**)(LiCamera *, unint64_t *))(*(_QWORD *)this + 440))(this, &v65);
  (*(void (**)(LiCamera *, double *))(*(_QWORD *)this + 472))(this, v61);
  (*(void (**)(LiCamera *, double *))(*(_QWORD *)this + 456))(this, &v62);
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(double *)&v4 = -v62;
  v5 = -v63;
  v6 = -v64;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a2, (float64x2_t)v4, v5, v6);
  v7 = PCMatrix44Tmpl<double>::leftRotate((__int128 *)a2, v61);
  v7.n128_u64[0] = v65;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a2, (float64x2_t)v7, v66, v67);
  PCMatrix44Tmpl<double>::leftMult(a2, v60);
  v8 = *(double *)(a2 + 120);
  if (v8 > -0.0000001 && v8 < 0.0000001)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v70, "!PCMath::isZero(w)");
    PCException::PCException(exception, &v70);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v10 = *(double *)a2;
  v9 = *(double *)(a2 + 8);
  v12 = *(double *)(a2 + 32);
  v11 = *(double *)(a2 + 40);
  v14 = *(double *)(a2 + 64);
  v13 = *(double *)(a2 + 72);
  v15 = *(double *)(a2 + 16);
  v16 = *(double *)(a2 + 48);
  v17 = *(double *)(a2 + 80);
  v18 = sqrt(v15 * v15 + v16 * v16 + v17 * v17);
  if (v18 > -0.0000001 && v18 < 0.0000001)
  {
    v19 = v13 * 0.0;
    v20 = v11 * 0.0;
    v15 = v13 * 0.0 - v11 * 0.0;
    v21 = v9 * 0.0;
    v16 = v9 * 0.0 - v13;
    v17 = v11 - v9 * 0.0;
    v18 = sqrt(v17 * v17 + v16 * v16 + v15 * v15);
    if (v18 > -0.0000001 && v18 < 0.0000001)
    {
      v15 = v13 - v20;
      v16 = v21 - v19;
      v17 = v20 - v9;
      v18 = sqrt(v17 * v17 + v15 * v15 + v16 * v16);
      if (v18 > -0.0000001 && v18 < 0.0000001)
      {
        v15 = v12 * 0.0 - v14;
        v16 = v14 * 0.0 - v10 * 0.0;
        v17 = v10 - v12 * 0.0;
        v18 = sqrt(v17 * v17 + v15 * v15 + v16 * v16);
        if (v18 > -0.0000001 && v18 < 0.0000001)
        {
          v15 = v20 - v19;
          v16 = v13 - v21;
          v17 = v21 - v11;
          v18 = sqrt(v17 * v17 + v16 * v16 + v15 * v15);
          if (v18 > -0.0000001 && v18 < 0.0000001)
          {
            v16 = 0.0;
            v17 = 1.0;
            v15 = 0.0;
            v18 = 1.0;
          }
        }
      }
    }
  }
  v22 = v8 / v18;
  v23 = v15 * v22;
  v24 = v16 * v22;
  *(double *)v68 = v23;
  *(double *)&v68[1] = v24;
  v25 = v17 * v22;
  *(double *)&v68[2] = v25;
  v26 = v14 * v25 + v10 * v23 + v12 * v24;
  v27 = v10 - v23 * v26;
  v28 = v12 - v24 * v26;
  v29 = v14 - v25 * v26;
  v30 = v13 * v25 + v9 * v23 + v11 * v24;
  v31 = v25 * v30;
  v32 = v9 - v23 * v30;
  v33 = v11 - v24 * v30;
  v34 = v13 - v31;
  v35 = sqrt(v34 * v34 + v32 * v32 + v33 * v33);
  if (v35 > -0.0000001 && v35 < 0.0000001)
  {
    v36 = v24 * 0.0;
    v32 = v24 * 0.0 - v25 * 0.0;
    v33 = v25 - v23 * 0.0;
    v34 = v23 * 0.0 - v24;
    v35 = sqrt(v34 * v34 + v32 * v32 + v33 * v33);
    if (v35 > -0.0000001)
    {
      v37 = v36 - v25;
      v38 = v23 - v36;
      v39 = sqrt(v38 * v38 + v37 * v37 + (v25 * 0.0 - v23 * 0.0) * (v25 * 0.0 - v23 * 0.0));
      if (v35 < 0.0000001)
      {
        v34 = v38;
        v33 = v25 * 0.0 - v23 * 0.0;
        v32 = v37;
        v35 = v39;
      }
    }
  }
  v40 = v8 / v35;
  v41 = v32 * (v8 / v35);
  v42 = v33 * (v8 / v35);
  *(double *)v69 = v41;
  *(double *)&v69[1] = v42;
  v43 = v34 * v40;
  *(double *)&v69[2] = v43;
  v44 = v29 * v43 + v27 * v41 + v28 * v42;
  v45 = v27 - v41 * v44;
  v46 = v28 - v42 * v44;
  v47 = v29 - v43 * v44;
  v48 = sqrt(v47 * v47 + v45 * v45 + v46 * v46);
  if (v48 <= -0.0000001 || v48 >= 0.0000001)
  {
    v54 = v8 / v48;
    v51 = v45 * v54;
    v52 = v46 * v54;
    v53 = v47 * v54;
  }
  else
  {
    v49 = v25 * v42 - v24 * v43;
    v50 = v24 * v41 - v23 * v42;
    v51 = v8 * v49;
    v52 = v8 * (v23 * v43 - v25 * v41);
    v53 = v8 * v50;
  }
  v55 = 0;
  v70.var0 = *(__CFString **)&v51;
  v71 = v52;
  v56 = (double *)(a2 + 16);
  v72 = v53;
  do
  {
    v57 = v69[v55];
    *(v56 - 2) = *(double *)((char *)&v70.var0 + v55 * 8);
    *((_QWORD *)v56 - 1) = v57;
    result = *(double *)&v68[v55];
    *v56 = result;
    v56 += 4;
    ++v55;
  }
  while (v55 != 3);
  return result;
}

void sub_1B2CDAE28(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCString::~PCString((PCString *)(v1 - 56));
  _Unwind_Resume(a1);
}

__n128 PCMatrix44Tmpl<double>::leftRotate(__int128 *a1, double *a2)
{
  __n128 result;
  uint64_t i;
  __int128 *v5;
  __int128 v6;
  _BYTE v7[128];
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = 0x3FF0000000000000;
  v14 = 0x3FF0000000000000;
  v11 = 0x3FF0000000000000;
  v8 = 0x3FF0000000000000;
  v9 = 0u;
  v10 = 0u;
  v12 = 0u;
  v13 = 0u;
  v15 = 0u;
  v16 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v8, a2);
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v8, a1, (uint64_t)v7);
  if (v7 != (_BYTE *)a1)
  {
    for (i = 0; i != 8; i += 2)
    {
      v5 = &a1[i];
      result = *(__n128 *)&v7[i * 16];
      v6 = *(_OWORD *)&v7[i * 16 + 16];
      *v5 = (__int128)result;
      v5[1] = v6;
    }
  }
  return result;
}

BOOL LiCamera::worldToLocalMatrix@<W0>(LiCamera *this@<X0>, double *a2@<X8>)
{
  _BOOL8 result;
  PCException *exception;
  PCString v5;

  (*(void (**)(double *__return_ptr))(*(_QWORD *)this + 16))(a2);
  result = PCMatrix44Tmpl<double>::invert(a2, a2, 0.0);
  if (!result)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v5, "singular camera local matrix");
    PCException::PCException(exception, &v5);
  }
  return result;
}

void sub_1B2CDAF88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

double LiCamera::eyeToFilmMatrix@<D0>(LiCamera *this@<X0>, double *a2@<X8>)
{
  double result;
  double v5[3];

  (*(void (**)(double *__return_ptr))(*(_QWORD *)this + 32))(a2);
  result = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
  if (result <= -0.0000001 || result >= 0.0000001)
  {
    (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 328))(v5, this);
    return PCMatrix44Tmpl<double>::rightTranslate(a2, v5[0], v5[1], v5[2]);
  }
  return result;
}

double LiCamera::eyeToFilmMatrixRespectFarDepth@<D0>(LiCamera *this@<X0>, double *a2@<X8>)
{
  double result;
  double v5[3];

  (*(void (**)(double *__return_ptr))(*(_QWORD *)this + 40))(a2);
  result = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
  if (result <= -0.0000001 || result >= 0.0000001)
  {
    (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 328))(v5, this);
    return PCMatrix44Tmpl<double>::rightTranslate(a2, v5[0], v5[1], v5[2]);
  }
  return result;
}

double LiCamera::localToFilmMatrix@<D0>(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&LiCamera::localToFilmMatrix(this, 0, a2);
  return result;
}

float64x2_t LiCamera::localToFilmMatrix@<Q0>(LiCamera *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  float64x2_t result;
  uint64_t i;
  uint64_t v12;
  __int128 v13;
  float64x2_t v14;
  __int128 v15[8];
  double v16[2];
  __int128 v17;
  _BYTE v18[32];
  _BYTE v19[48];
  __int128 v20;
  __int128 v21;
  _BYTE v22[48];

  *(_QWORD *)&v22[40] = 0x3FF0000000000000;
  *(_QWORD *)v22 = 0x3FF0000000000000;
  *(_QWORD *)&v19[40] = 0x3FF0000000000000;
  *(_QWORD *)v19 = 0x3FF0000000000000;
  memset(&v19[8], 0, 32);
  v20 = 0u;
  v21 = 0u;
  memset(&v22[8], 0, 32);
  (*(void (**)(LiCamera *, _BYTE *))(*(_QWORD *)this + 264))(this, v18);
  v6 = *(_OWORD *)v22;
  *(_OWORD *)(a3 + 64) = v21;
  *(_OWORD *)(a3 + 80) = v6;
  v7 = *(_OWORD *)&v22[32];
  *(_OWORD *)(a3 + 96) = *(_OWORD *)&v22[16];
  *(_OWORD *)(a3 + 112) = v7;
  v8 = *(_OWORD *)&v19[16];
  *(_OWORD *)a3 = *(_OWORD *)v19;
  *(_OWORD *)(a3 + 16) = v8;
  v9 = v20;
  *(_OWORD *)(a3 + 32) = *(_OWORD *)&v19[32];
  *(_OWORD *)(a3 + 48) = v9;
  (*(void (**)(__int128 *__return_ptr, LiCamera *))(*(_QWORD *)this + 56))(v15, this);
  PCMatrix44Tmpl<double>::operator*(a3, v15, (uint64_t)v16);
  if (v16 != (double *)a3)
  {
    for (i = 0; i != 16; i += 4)
    {
      v12 = a3 + i * 8;
      result = *(float64x2_t *)&v16[i];
      v13 = *(_OWORD *)&v16[i + 2];
      *(float64x2_t *)v12 = result;
      *(_OWORD *)(v12 + 16) = v13;
    }
  }
  if ((a2 & 1) == 0)
  {
    v16[0] = 0.0;
    v16[1] = 0.0;
    v17 = xmmword_1B304EED0;
    PCMatrix44Tmpl<double>::transform<double>((double *)a3, v16, v16);
    *(_QWORD *)&result.f64[0] = v17;
    if (*(double *)&v17 != 0.0 && *((double *)&v17 + 1) != 0.0)
    {
      result.f64[0] = *((double *)&v17 + 1) / *(double *)&v17;
      if (*((double *)&v17 + 1) / *(double *)&v17 != 1.0)
      {
        v14 = vmulq_n_f64(*(float64x2_t *)(a3 + 64), result.f64[0]);
        result = vmulq_n_f64(*(float64x2_t *)(a3 + 80), result.f64[0]);
        *(float64x2_t *)(a3 + 64) = v14;
        *(float64x2_t *)(a3 + 80) = result;
      }
    }
  }
  return result;
}

double LiCamera::localToFilmMatrixRespectFarDepth@<D0>(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)&result = *(_OWORD *)&LiCamera::localToFilmMatrix(this, 1, a2);
  return result;
}

long double LiCamera::getCameraInternalParams(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v16;
  double v17;
  double v18;
  long double v19;
  long double result;
  double v21[4];

  (*(void (**)(double *__return_ptr))(*(_QWORD *)a1 + 280))(v21);
  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  v5 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
  v6 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
  v7 = v21[2];
  v8 = v21[3];
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(double *)(a2 + 32) = v7 * 0.5;
  v9 = v21[1];
  v10 = v21[0] + v7 * 0.5;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(double *)(a2 + 56) = v10;
  *(double *)(a2 + 72) = v8 * 0.5;
  *(double *)(a2 + 88) = v9 + v8 * 0.5;
  __asm { FMOV            V3.2D, #0.5 }
  *(_OWORD *)(a2 + 112) = _Q3;
  v16 = v5 * v6 * v7;
  v17 = v6 * v8;
  v18 = v16 / (v6 * v8);
  v19 = tan(v4 / 114.591559);
  result = atan(v19 / v18) * 114.591559;
  *(double *)a2 = v18;
  *(long double *)(a2 + 8) = result;
  *(double *)(a2 + 16) = v16;
  *(double *)(a2 + 24) = v17;
  return result;
}

void LiCamera::localToClipMatrix(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  double v5;
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = 0x3FF0000000000000;
  v19 = 0x3FF0000000000000;
  v16 = 0x3FF0000000000000;
  v13 = 0x3FF0000000000000;
  v14 = 0u;
  v15 = 0u;
  v17 = 0u;
  v18 = 0u;
  v20 = 0u;
  v21 = 0u;
  (*(void (**)(LiCamera *, double *))(*(_QWORD *)this + 264))(this, &v9);
  v4 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 632))(this);
  v5 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 112))(this);
  v6 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 120))(this);
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  if (v4 == 1)
  {
    PCMatrix44Tmpl<double>::rightFramePerspective(a2, v11, v12, v10, v6, v6, v5);
  }
  else if (!v4)
  {
    v7 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 520))(this);
    v8 = 0.001;
    if (v7)
      v8 = 1.0;
    if (v10 >= v8)
      v8 = v10;
    v10 = v8;
    PCMatrix44Tmpl<double>::rightPerspective(a2, v8, v9, v5, v6);
  }
}

void PCMatrix44Tmpl<double>::rightPerspective(uint64_t a1, double a2, double a3, double a4, double a5)
{
  long double v9;
  double v10;
  __int128 v11;
  __int128 v12;
  double v13;
  __int128 v14;
  __int128 v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;

  v9 = tan(a2 / 360.0 * 3.14159265) * a4;
  v10 = (a4 + a4) / (v9 * a3 + v9 * a3);
  v13 = (a4 + a4) / (v9 + v9);
  v11 = 0u;
  v12 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = -(a4 + a5) / (a5 - a4);
  v17 = a5 * -2.0 * a4 / (a5 - a4);
  v18 = 0u;
  v19 = xmmword_1B3058A90;
  PCMatrix44Tmpl<double>::rightMult(a1, &v10);
}

double PCMatrix44Tmpl<double>::rightFramePerspective(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v9 = 0x3FF0000000000000;
  v10 = 0u;
  v11 = 0u;
  v13 = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  PCMatrix44Tmpl<double>::setFramePerspective((uint64_t)&v9, a2, a3, a4, a5, a6, a7);
  return PCMatrix44Tmpl<double>::rightMult(a1, (double *)&v9);
}

double LiCamera::imageToFilmMatrix@<D0>(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(double *)a2 = 1.0 / (*(double (**)(LiCamera *))(*(_QWORD *)this + 688))(this);
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  return result;
}

double LiCamera::filmToImageMatrix@<D0>(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(double *)a2 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 688))(this);
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  return result;
}

double LiCamera::worldUnitScale(LiCamera *this, char a2)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v17;
  float64x2_t v18;
  double v19;
  __int128 v20;
  float64x2_t v21;
  double v22;
  float64x2_t v23;
  double v24;
  float64x2_t v25;
  uint64_t v26;
  float64x2_t v27;
  double v28;
  double v29[16];
  double v30[16];

  (*(void (**)(double *__return_ptr))(*(_QWORD *)this + 56))(v30);
  PCMatrix44Tmpl<double>::invert(v30, v30, 0.0);
  (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 32))(v29, this);
  PCMatrix44Tmpl<double>::invert(v29, v29, 0.0);
  v27 = 0uLL;
  v28 = 0.0;
  v25 = 0uLL;
  *(double *)&v26 = 0.5;
  PCMatrix44Tmpl<double>::transform<double>(v30, v25.f64, v27.f64);
  v25 = 0uLL;
  *(double *)&v26 = 0.0;
  __asm { FMOV            V0.2D, #1.0 }
  v23 = _Q0;
  v24 = 0.5;
  PCMatrix44Tmpl<double>::transform<double>(v30, v23.f64, v25.f64);
  v17 = v25;
  v18 = v27;
  v9 = v28;
  v10 = *(double *)&v26;
  if ((a2 & 1) != 0)
  {
    v11 = 1.0;
  }
  else
  {
    (*(void (**)(float64x2_t *__return_ptr, LiCamera *))(*(_QWORD *)this + 272))(&v23, this);
    v12 = v23.f64[0];
    v13 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 688))(this);
    v11 = v12 * v13 / v23.f64[1];
  }
  v23 = 0uLL;
  v24 = 0.0;
  v21 = 0uLL;
  v22 = 0.5;
  PCMatrix44Tmpl<double>::transform<double>(v29, v21.f64, v23.f64);
  v21 = 0uLL;
  v22 = 0.0;
  v19 = v11;
  v20 = xmmword_1B3558470;
  PCMatrix44Tmpl<double>::transform<double>(v29, &v19, v21.f64);
  v14 = vsubq_f64(v18, v17);
  v15 = vsubq_f64(v23, v21);
  return sqrt(vaddvq_f64(vmulq_f64(v14, v14)) + (v9 - v10) * (v9 - v10))
       / sqrt(vaddvq_f64(vmulq_f64(v15, v15)) + (v24 - v22) * (v24 - v22));
}

BOOL LiCamera::ray(uint64_t a1, double *a2, uint64_t a3)
{
  double v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v25[16];

  v6 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
  v8 = *a2;
  v9 = v8 * (*(double (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
  v10 = a2[1];
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
  v12 = v9 * v11;
  v13 = v10 * v11;
  if (fabs(v6) >= 0.0000001)
  {
    v15 = v11 * 0.0;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
    if (v7 == 1)
    {
      v17 = v16 + *(double *)(a3 + 16);
      *(double *)(a3 + 16) = v17;
    }
    else
    {
      v15 = v15 - v16;
      v17 = *(double *)(a3 + 16);
    }
    v18 = v13 - *(double *)(a3 + 8);
    *(double *)(a3 + 24) = v12 - *(double *)a3;
    *(double *)(a3 + 32) = v18;
    *(double *)(a3 + 40) = v15 - v17;
  }
  else
  {
    v14 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
    *(double *)a3 = v12;
    *(double *)(a3 + 8) = v13;
    *(double *)(a3 + 16) = v14;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0xBFF0000000000000;
  }
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v25, a1);
  PCMatrix44Tmpl<double>::transform<double>(v25, (double *)a3, (double *)a3);
  v20 = *(double *)(a3 + 24);
  v21 = *(double *)(a3 + 32);
  v19 = (double *)(a3 + 24);
  v22 = v19[2];
  v23 = v20 * v25[4] + v21 * v25[5] + v22 * v25[6];
  *v19 = v20 * v25[0] + v21 * v25[1] + v22 * v25[2];
  v19[1] = v23;
  v19[2] = v20 * v25[8] + v21 * v25[9] + v22 * v25[10];
  return PCVector3<double>::normalize(v19, 0.000000100000001);
}

uint64_t LiCamera::ray@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(_QWORD *)a1 + 64))(a1, a2, a3);
}

uint64_t LiCamera::ray@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, _OWORD *a3@<X8>)
{
  __int128 v4;

  a3[1] = 0u;
  a3[2] = 0u;
  *a3 = 0u;
  v4 = *a2;
  return (*(uint64_t (**)(uint64_t, __int128 *, _OWORD *))(*(_QWORD *)a1 + 64))(a1, &v4, a3);
}

BOOL LiCamera::getPlaneAtDistance@<W0>(LiCamera *this@<X0>, double a2@<D0>, _OWORD *a3@<X8>)
{
  double v6;
  double v7;
  double v9[16];
  float64x2_t v10;
  unint64_t v11;
  double v12;

  v6 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
  if (v6 <= -0.0000001 || (v7 = 0.0, v6 >= 0.0000001))
  {
    (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 328))(v9, this);
    v7 = v9[2];
  }
  v10 = 0uLL;
  v11 = 0xBFF0000000000000;
  v12 = v7 - a2;
  (*(void (**)(double *__return_ptr, LiCamera *))(*(_QWORD *)this + 24))(v9, this);
  PCMatrix44Tmpl<double>::transform_row<double>(v9, v10.f64, v10.f64);
  *a3 = 0u;
  a3[1] = 0u;
  a3[2] = 0u;
  return PCPlane<double>::setImplicit((uint64_t)a3, &v10);
}

BOOL PCPlane<double>::setImplicit(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2;
  double v3;
  double v4;
  _BOOL8 v5;
  double v6;

  v2 = *a2;
  v3 = a2[1].f64[0];
  v4 = vaddvq_f64(vmulq_f64(v2, v2)) + v3 * v3;
  v5 = v4 >= 1.0e-24 || v4 <= -1.0e-24;
  if (v5)
  {
    *(float64x2_t *)(a1 + 24) = v2;
    *(double *)(a1 + 40) = v3;
    v6 = a2[1].f64[1];
    *(float64x2_t *)a1 = vdivq_f64(vmulq_n_f64(v2, -v6), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4, 0));
    *(double *)(a1 + 16) = -(v6 * v3) / v4;
  }
  return v5;
}

uint64_t LiCamera::getNearClip(uint64_t a1, uint64_t a2)
{
  double v4;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  if (v4 > -0.0000001 && v4 < 0.0000001)
    return 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1);
  (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v6, a1);
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_OWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 40) = v9;
  return 1;
}

void sub_1B2CDBC78(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2CDBC18);
}

uint64_t LiCamera::getFarClip(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  if (v4 > -0.0000001 && v4 < 0.0000001)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 624))(a1);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 208))(&v6, a1);
    *(_OWORD *)a2 = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 40) = v9;
    *(float64x2_t *)(a2 + 24) = vnegq_f64(*(float64x2_t *)(a2 + 24));
    *(double *)(a2 + 40) = -*(double *)(a2 + 40);
    return 1;
  }
  return result;
}

void sub_1B2CDBD54(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B2CDBCC8);
}

void LiCamera::imageToWorldMatrix(uint64_t a1, uint64_t a2)
{
  float64x2_t v4;
  double v5;
  int v6;
  _BOOL4 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  float64x2_t v14;
  __n128 v15;
  double v16[2];
  float64_t v17;
  double v18;
  double v19;
  double v20[4];
  unint64_t v21;
  double v22;
  double v23;
  double v24[16];

  (*(void (**)(double *__return_ptr))(*(_QWORD *)a1 + 424))(v24);
  v21 = 0;
  v22 = 0.0;
  v23 = 0.0;
  v20[0] = 1.0;
  memset(&v20[1], 0, 24);
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 440))(a1, &v21);
  (*(void (**)(uint64_t, double *))(*(_QWORD *)a1 + 472))(a1, v20);
  (*(void (**)(uint64_t, float64_t *))(*(_QWORD *)a1 + 456))(a1, &v17);
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1))
  {
    v5 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
    v7 = v5 < 5.0;
    v8 = v5 * 0.5;
    v9 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
    (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(v16, a1);
    v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
    v11 = v9 * v10 * v16[0];
    v12 = v8 * 3.14159265 / 180.0;
    if ((v6 & v7) != 0)
      v12 = 0.0436332313;
    v13 = v11 * -0.5 / tan(v12);
    v14.f64[0] = 0.0;
    v4 = PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a2, v14, 0.0, v13);
  }
  v4.f64[0] = v17;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a2, v4, v18, v19);
  v15 = PCMatrix44Tmpl<double>::leftRotate((__int128 *)a2, v20);
  v15.n128_u64[0] = v21;
  PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a2, (float64x2_t)v15, v22, v23);
  PCMatrix44Tmpl<double>::leftMult(a2, v24);
}

void LiCamera::worldToImageMatrix(uint64_t a1, float64x2_t *a2)
{
  unint64_t i;
  _OWORD *f64;
  __int128 v6;
  float64x2_t v7;
  double v8;
  __n128 v9;
  float64x2_t v10;
  double v11;
  int v12;
  _BOOL4 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;
  _QWORD v24[16];
  double v25;
  double v26;
  double v27;
  double v28;
  float64x2_t v29;
  double v30;
  double v31;
  double v32;
  double v33;

  v31 = 0.0;
  v32 = 0.0;
  v33 = 0.0;
  v28 = 1.0;
  v29 = 0uLL;
  v30 = 0.0;
  v25 = 0.0;
  v26 = 0.0;
  v27 = 0.0;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 424))(v24);
  (*(void (**)(uint64_t, double *))(*(_QWORD *)a1 + 440))(a1, &v31);
  (*(void (**)(uint64_t, double *))(*(_QWORD *)a1 + 472))(a1, &v28);
  (*(void (**)(uint64_t, double *))(*(_QWORD *)a1 + 456))(a1, &v25);
  if (v24 != (_QWORD *)a2)
  {
    for (i = 0; i != 16; i += 4)
    {
      f64 = (_OWORD *)a2[i / 2].f64;
      v6 = *(_OWORD *)&v24[i + 2];
      *f64 = *(_OWORD *)&v24[i];
      f64[1] = v6;
    }
  }
  PCMatrix44Tmpl<double>::invert(a2->f64, a2->f64, 0.0);
  v7.f64[0] = -v31;
  PCMatrix44Tmpl<double>::leftTranslate(a2, v7, -v32, -v33);
  v21 = v28;
  v22 = v29;
  v23 = v30;
  v8 = v21 * v21 + vaddvq_f64(vmulq_f64(v22, v22)) + v23 * v23;
  if (v8 != 0.0)
  {
    v21 = v28 / v8;
    v22 = vdivq_f64(vnegq_f64(v29), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
    v23 = -v30 / v8;
  }
  v9 = PCMatrix44Tmpl<double>::leftRotate((__int128 *)a2, &v21);
  v9.n128_f64[0] = -v25;
  v10 = PCMatrix44Tmpl<double>::leftTranslate(a2, (float64x2_t)v9, -v26, -v27);
  if (!(*(unsigned int (**)(uint64_t, float64x2_t))(*(_QWORD *)a1 + 632))(a1, v10))
  {
    v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 520))(a1);
    v13 = v11 < 5.0;
    v14 = v11 * 0.5;
    v15 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
    (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(&v21, a1);
    v16 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
    v17 = v15 * v16 * v21;
    v18 = v14 * 3.14159265 / 180.0;
    if ((v12 & v13) != 0)
      v18 = 0.0436332313;
    v19 = v17 * -0.5 / tan(v18);
    v20.f64[0] = 0.0;
    PCMatrix44Tmpl<double>::leftTranslate(a2, v20, 0.0, v19);
  }
}

double LiCamera::eyeToWorldMatrix@<D0>(LiCamera *this@<X0>, double *a2@<X8>)
{
  double result;
  double v5;

  (*(void (**)(double *__return_ptr))(*(_QWORD *)this + 16))(a2);
  if ((*(unsigned int (**)(LiCamera *))(*(_QWORD *)this + 632))(this) == 1)
  {
    result = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
    if (result <= -0.0000001 || result >= 0.0000001)
    {
      v5 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 320))(this);
      return PCMatrix44Tmpl<double>::rightTranslate(a2, 0.0, 0.0, v5);
    }
  }
  return result;
}

double LiCamera::worldToEyeMatrix@<D0>(LiCamera *this@<X0>, float64x2_t *a2@<X8>)
{
  double result;
  double v5;
  float64x2_t v6;

  (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)this + 24))(a2);
  if ((*(unsigned int (**)(LiCamera *))(*(_QWORD *)this + 632))(this) == 1)
  {
    result = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
    if (result <= -0.0000001 || result >= 0.0000001)
    {
      v5 = -(*(double (**)(LiCamera *))(*(_QWORD *)this + 320))(this);
      v6.f64[0] = 0.0;
      *(_QWORD *)&result = *(_OWORD *)&PCMatrix44Tmpl<double>::leftTranslate(a2, v6, 0.0, v5);
    }
  }
  return result;
}

void LiCamera::getEyeFrustum(uint64_t a1, uint64_t a2, float64x2_t *a3, int a4)
{
  double v8;
  double v9;
  _BOOL4 v10;
  _BOOL4 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  _OWORD v23[8];

  v8 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  v9 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  v10 = v9 > -0.0000001;
  v11 = v9 < 0.0000001;
  if (v10 && v11)
    v12 = 0.0;
  else
    v12 = 1.0;
  if (v10 && v11)
    v13 = 1.0;
  else
    v13 = v8;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1))
    v14 = 0.0;
  else
    v14 = -v8;
  v15 = a3->f64[1];
  *(float64_t *)(a2 + 96) = a3->f64[0];
  *(double *)(a2 + 104) = v15;
  *(double *)(a2 + 112) = v14;
  *(_QWORD *)(a2 + 120) = 0;
  *(double *)(a2 + 128) = v13;
  *(double *)(a2 + 136) = v12 * v15;
  PCVector3<double>::normalize((double *)(a2 + 120), 0.000000100000001);
  v16 = vaddq_f64(*a3, a3[1]);
  *(float64x2_t *)(a2 + 144) = v16;
  *(double *)(a2 + 160) = v14;
  *(_QWORD *)(a2 + 168) = 0;
  *(double *)(a2 + 176) = -v13;
  *(double *)(a2 + 184) = vmuld_lane_f64(-v12, v16, 1);
  PCVector3<double>::normalize((double *)(a2 + 168), 0.000000100000001);
  v17 = *a3;
  *(float64x2_t *)a2 = *a3;
  *(double *)(a2 + 16) = v14;
  *(double *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 32) = 0;
  *(double *)(a2 + 40) = v12 * v17.f64[0];
  PCVector3<double>::normalize((double *)(a2 + 24), 0.000000100000001);
  v18 = *a3;
  v19 = a3[1];
  *(double *)(a2 + 72) = -v13;
  v20 = vaddq_f64(v18, v19);
  *(float64x2_t *)(a2 + 48) = v20;
  *(double *)(a2 + 64) = v14;
  *(_QWORD *)(a2 + 80) = 0;
  *(double *)(a2 + 88) = -v12 * v20.f64[0];
  PCVector3<double>::normalize((double *)(a2 + 72), 0.000000100000001);
  v21 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(double *)(a2 + 208) = v8 + v14 - v21;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  *(_QWORD *)(a2 + 232) = 0xBFF0000000000000;
  v22 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  *(_QWORD *)(a2 + 240) = 0;
  *(_QWORD *)(a2 + 248) = 0;
  *(double *)(a2 + 256) = v8 + v14 - v22;
  *(_QWORD *)(a2 + 264) = 0;
  *(_QWORD *)(a2 + 272) = 0;
  *(_QWORD *)(a2 + 280) = 0x3FF0000000000000;
  if (a4)
  {
    (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v23, a1);
    transform(v23, (double *)a2);
  }
}

uint64_t LiCamera::getFrustum(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  __int128 v7;
  double v8;
  double v9;
  double v10;
  double v11;
  __int128 v13;
  __int128 v14;

  v7 = a3[1];
  v13 = *a3;
  v14 = v7;
  v8 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
  v9 = v8 * *(double *)&v13;
  v10 = v8 * *(double *)&v14;
  *((double *)&v13 + 1) = v8 * *((double *)&v13 + 1);
  *((double *)&v14 + 1) = v8 * *((double *)&v14 + 1);
  v11 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
  *(double *)&v13 = v11 * v9;
  *(double *)&v14 = v11 * v10;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, &v13, a4);
}

uint64_t LiCamera::getFrustum(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[4];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 312))(v7);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 256))(a1, a2, v7, a3);
}

__n128 LiCamera::getFilmbackRect@<Q0>(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  float64x2_t v9;

  (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)this + 272))(&v9);
  result = (__n128)v9;
  __asm { FMOV            V1.2D, #-0.5 }
  *(float64x2_t *)a2 = vmulq_f64(v9, _Q1);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

double LiCamera::getEyeFilmback@<D0>(LiCamera *this@<X0>, float64x2_t *a2@<X8>)
{
  double result;

  (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)this + 272))(a2);
  *a2 = vmulq_n_f64(*a2, (*(double (**)(LiCamera *))(*(_QWORD *)this + 488))(this));
  result = (*(double (**)(LiCamera *))(*(_QWORD *)this + 688))(this) * a2->f64[0];
  a2->f64[0] = result;
  return result;
}

__n128 LiCamera::getEyeFilmbackRect@<Q0>(LiCamera *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;
  float64x2_t v9;

  (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)this + 304))(&v9);
  result = (__n128)v9;
  __asm { FMOV            V1.2D, #-0.5 }
  *(float64x2_t *)a2 = vmulq_f64(v9, _Q1);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

double LiCamera::rayMatrix(uint64_t a1, uint64_t a2)
{
  double v4;
  long double v5;
  double v6;
  double v8[16];
  _QWORD v9[2];

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 272))(v9);
  v4 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  v5 = tan(v4 * 3.14159265 / 360.0);
  v6 = 2.0 / *(double *)&v9[1];
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(double *)a2 = v6;
  *(double *)(a2 + 40) = v6;
  *(_QWORD *)(a2 + 80) = 0;
  *(long double *)(a2 + 88) = -1.0 / v5;
  (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v8, a1);
  return PCMatrix44Tmpl<double>::leftMult(a2, v8);
}

uint64_t LiCamera::setRotation(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  float64_t v6;
  float64x2_t v8;
  double v9;
  float64x2_t v10;
  double v11;

  v10 = *a3;
  v11 = a3[1].f64[0];
  (*(void (**)(float64x2_t *__return_ptr))(*(_QWORD *)a1 + 24))(&v8);
  PCMatrix44Tmpl<double>::transform<double>(v8.f64, v10.f64, v10.f64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 480))(a1, a2);
  (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v8, a1);
  PCMatrix44Tmpl<double>::transform<double>(v8.f64, v10.f64, v10.f64);
  v8 = 0uLL;
  v9 = 0.0;
  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)a1 + 440))(a1, &v8);
  v6 = a3[1].f64[0] - v11;
  v8 = vaddq_f64(vsubq_f64(*a3, v10), v8);
  v9 = v6 + v9;
  return (*(uint64_t (**)(uint64_t, float64x2_t *))(*(_QWORD *)a1 + 448))(a1, &v8);
}

double LiCamera::getEulerRotation@<D0>(LiCamera *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  double result;
  double v6[4];
  _OWORD v7[3];
  int v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 648))(this);
  v6[0] = 1.0;
  memset(&v6[1], 0, 24);
  (*(void (**)(LiCamera *, double *))(*(_QWORD *)this + 472))(this, v6);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v21 = 0x3FF0000000000000;
  v18 = 0x3FF0000000000000;
  v15 = 0x3FF0000000000000;
  v12 = 0x3FF0000000000000;
  v13 = 0u;
  v14 = 0u;
  v16 = 0u;
  v17 = 0u;
  v19 = 0u;
  v20 = 0u;
  PCMatrix44Tmpl<double>::setRotationFromQuaternion((uint64_t)&v12, v6);
  memset(v7, 0, sizeof(v7));
  v9 = 0u;
  v10 = 0u;
  v11 = 0;
  v8 = v4;
  PCMatrix44Tmpl<double>::getTransformation((__int128 *)&v12, (uint64_t)v7);
  *(_OWORD *)a2 = v9;
  result = *(double *)&v10;
  a2[2] = v10;
  return result;
}

uint64_t LiCamera::setEulerRotation(uint64_t a1, double *a2)
{
  double v3;
  double v4;
  double v5;
  int v6;
  double v8[4];

  v8[0] = 1.0;
  memset(&v8[1], 0, 24);
  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
  PCQuat<double>::setEulerAngles(v8, v6, v3, v4, v5);
  return (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)a1 + 480))(a1, v8);
}

double *PCQuat<double>::setEulerAngles(double *a1, int a2, double a3, double a4, double a5)
{
  __double2 v9;
  __double2 v10;
  __double2 v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;

  v9 = __sincos_stret(a3 * 0.5);
  v10 = __sincos_stret(a4 * 0.5);
  v11 = __sincos_stret(a5 * 0.5);
  v12 = v9.__sinval * 0.0;
  v13 = v10.__sinval * 0.0;
  v14 = v11.__sinval * 0.0;
  switch(a2)
  {
    case 0:
      v15 = v13 * v14;
      v16 = v10.__sinval * v14;
      v17 = v10.__cosval * v11.__cosval - (v13 * v14 + v10.__sinval * v14 + v13 * v11.__sinval);
      v18 = v10.__cosval * v14;
      v19 = v13 * v11.__cosval + v18;
      v20 = v10.__sinval * v11.__cosval + v18;
      v21 = v13 * v11.__cosval + v10.__cosval * v11.__sinval;
      v22 = v15 - v10.__sinval * v11.__sinval;
      v23 = v13 * v11.__sinval - v15;
      v24 = v16 - v15;
      goto LABEL_4;
    case 1:
      v25 = v14 * v13;
      v26 = v14 * v10.__sinval;
      v27 = v11.__sinval * v13;
      v17 = v11.__cosval * v10.__cosval - (v14 * v13 + v14 * v10.__sinval + v11.__sinval * v13);
      v28 = v11.__cosval * v13;
      v19 = v14 * v10.__cosval + v28;
      v20 = v14 * v10.__cosval + v11.__cosval * v10.__sinval;
      v21 = v11.__sinval * v10.__cosval + v28;
      v22 = v11.__sinval * v10.__sinval - v25;
      v23 = v25 - v27;
      v24 = v25 - v26;
LABEL_4:
      v29 = v19 + v22;
      v30 = v20 + v23;
      v31 = v24 + v21;
      v32 = v9.__cosval * v17 - (v9.__sinval * v29 + v12 * v30 + v12 * (v24 + v21));
      v33 = v9.__sinval * v17;
      v34 = v12 * v17;
      v35 = v33 + v9.__cosval * v29;
      v36 = v34 + v9.__cosval * v30;
      v37 = v12 * v30 - v12 * v31;
      v38 = v12 * v29;
      v39 = v9.__sinval * v31 - v38;
      v40 = v38 - v9.__sinval * v30;
      v41 = v35 + v37;
      v42 = v36 + v39;
      v43 = v40 + v34 + v9.__cosval * v31;
      goto LABEL_8;
    case 2:
      v44 = v9.__sinval * v14;
      v45 = v12 * v14;
      v46 = v12 * v11.__sinval;
      v47 = v9.__cosval * v11.__cosval - (v9.__sinval * v14 + v12 * v14 + v12 * v11.__sinval);
      v48 = v12 * v11.__cosval;
      v49 = v12 * v11.__cosval + v9.__cosval * v14;
      v50 = v9.__sinval * v11.__cosval + v9.__cosval * v14 + v45 - v46;
      v51 = v49 + v9.__sinval * v11.__sinval - v45;
      v52 = v45 - v44 + v48 + v9.__cosval * v11.__sinval;
      v53 = v13 * v52;
      v32 = v10.__cosval * v47 - (v13 * v50 + v10.__sinval * v51 + v13 * v52);
      v54 = v13 * v47;
      v55 = v13 * v47 + v10.__cosval * v50;
      v56 = v10.__sinval * v47 + v10.__cosval * v51;
      v57 = v54 + v10.__cosval * v52;
      v58 = v13 * v51;
      v59 = v58 - v10.__sinval * v52;
      v60 = v10.__sinval * v50 - v58;
      v41 = v55 + v59;
      v42 = v56 + v53 - v13 * v50;
      goto LABEL_7;
    case 3:
      v61 = v14 * v12;
      v62 = v11.__cosval * v9.__cosval - (v14 * v9.__sinval + v14 * v12 + v11.__sinval * v12);
      v63 = v14 * v9.__cosval + v11.__cosval * v12;
      v64 = v11.__sinval * v9.__cosval + v11.__cosval * v12;
      v65 = v14 * v9.__cosval + v11.__cosval * v9.__sinval + v11.__sinval * v12 - v14 * v12;
      v66 = v63 + v61 - v11.__sinval * v9.__sinval;
      v67 = v14 * v9.__sinval - v61 + v64;
      v68 = v13 * v67;
      v32 = v10.__cosval * v62 - (v13 * v65 + v10.__sinval * v66 + v13 * v67);
      v69 = v13 * v62;
      v70 = v13 * v62 + v10.__cosval * v65;
      v71 = v10.__sinval * v62 + v10.__cosval * v66;
      v57 = v69 + v10.__cosval * v67;
      v72 = v13 * v66;
      v73 = v72 - v10.__sinval * v67;
      v60 = v10.__sinval * v65 - v72;
      v41 = v70 + v73;
      v42 = v71 + v68 - v13 * v65;
LABEL_7:
      v43 = v60 + v57;
LABEL_8:
      a1[1] = v41;
      a1[2] = v42;
      a1[3] = v43;
      goto LABEL_12;
    case 4:
      v74 = v9.__sinval * v13;
      v75 = v12 * v10.__sinval;
      v76 = v12 * v13;
      v77 = v9.__cosval * v10.__cosval - (v9.__sinval * v13 + v12 * v10.__sinval + v12 * v13);
      v78 = v12 * v10.__cosval;
      v79 = v9.__cosval * v13;
      v80 = v78 + v9.__cosval * v10.__sinval;
      v81 = v78 + v79;
      v82 = v9.__sinval * v10.__cosval + v79 + v75 - v76;
      v83 = v80 + v74 - v76;
      v84 = v76 - v9.__sinval * v10.__sinval + v81;
      v85 = v14 * v82;
      v86 = v14 * v83;
      v32 = v11.__cosval * v77 - (v14 * v82 + v14 * v83 + v11.__sinval * v84);
      v87 = v14 * v77 + v11.__cosval * v82;
      v88 = v14 * v77 + v11.__cosval * v83;
      v89 = v11.__sinval * v77 + v11.__cosval * v84;
      v90 = v14 * v84;
      v91 = v11.__sinval * v83 - v90;
      v92 = v90 - v11.__sinval * v82;
      v93 = v85 - v86;
      v94 = v87 + v91;
      goto LABEL_11;
    case 5:
      v95 = v13 * v9.__sinval;
      v96 = v10.__sinval * v12;
      v97 = v13 * v12;
      v98 = v10.__cosval * v9.__cosval - (v13 * v9.__sinval + v10.__sinval * v12 + v13 * v12);
      v99 = v13 * v9.__cosval;
      v100 = v10.__cosval * v12;
      v101 = v13 * v9.__cosval + v10.__cosval * v9.__sinval;
      v102 = v10.__sinval * v9.__cosval + v100;
      v103 = v99 + v100;
      v104 = v101 + v97 - v96;
      v105 = v102 + v97 - v95;
      v106 = v10.__sinval * v9.__sinval - v97 + v103;
      v107 = v14 * v104;
      v108 = v14 * v105;
      v32 = v11.__cosval * v98 - (v14 * v104 + v14 * v105 + v11.__sinval * v106);
      v109 = v14 * v98 + v11.__cosval * v104;
      v88 = v14 * v98 + v11.__cosval * v105;
      v89 = v11.__sinval * v98 + v11.__cosval * v106;
      v110 = v14 * v106;
      v92 = v110 - v11.__sinval * v104;
      v93 = v107 - v108;
      v94 = v109 + v11.__sinval * v105 - v110;
LABEL_11:
      a1[1] = v94;
      a1[2] = v88 + v92;
      a1[3] = v93 + v89;
LABEL_12:
      *a1 = v32;
      break;
    default:
      return a1;
  }
  return a1;
}

uint64_t LiCamera::setEulerRotation(uint64_t a1, double *a2, uint64_t a3)
{
  double v5;
  double v6;
  double v7;
  int v8;
  double v10[4];

  v10[0] = 1.0;
  memset(&v10[1], 0, 24);
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 648))(a1);
  PCQuat<double>::setEulerAngles(v10, v8, v5, v6, v7);
  return (*(uint64_t (**)(uint64_t, double *, uint64_t))(*(_QWORD *)a1 + 392))(a1, v10, a3);
}

uint64_t LiCamera::fit(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  float64x2_t v8;
  __int128 v9;
  int v10;
  uint64_t v11;
  float64x2_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  float64x2_t v16;
  __int128 v17;
  int v18;
  uint64_t v19;
  float64x2_t v20;
  __int128 v21;
  int v22;
  uint64_t v23;
  float64x2_t v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  float64x2_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float64x2_t v35;
  float64_t v36;
  float64x2_t v37;
  float64_t v38;
  float64x2_t v39;
  float64_t v40;
  float64x2_t v41;
  float64_t v42;
  float64x2_t v43;
  uint64_t v44;
  float64x2_t v45;
  uint64_t v46;
  double v47;
  float64x2_t v53;
  double v54;
  double v55;
  double v56;
  float64x2_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  __n128 v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double *v70;
  float64x2_t v71;
  double v73;
  int v74;
  double v75;
  double v76;
  float64x2_t v77;
  double v78;
  int v79;
  double v80;
  double v81;
  int v82;
  PCException *exception;
  PCException *v85;
  PCException *v86;
  PCException *v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v95;
  double v97;
  double v98[2];
  float64x2_t v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  double v115;
  __int128 v116;
  double v117;
  __int128 v118;
  double v119;
  __int128 v120;
  uint64_t v121;
  float64x2_t v122;
  double v123;
  __int128 v124;
  float64_t v125;
  PCString v126[2];
  double v127;
  __int128 v128;
  float64_t v129;
  float64x2_t v130;
  double v131;
  __int128 v132[8];
  _OWORD v133[8];
  void *v134;
  uint64_t v135;
  uint64_t v136;
  float64x2_t v137[3];
  float64x2_t v138[3];
  float64x2_t v139[3];
  float64x2_t v140[3];
  float64x2_t v141;
  _OWORD v142[2];
  float64x2_t v143;
  _OWORD v144[2];

  memset(v144, 0, sizeof(v144));
  v143 = 0u;
  v141 = 0u;
  memset(v142, 0, sizeof(v142));
  memset(v140, 0, sizeof(v140));
  memset(v139, 0, sizeof(v139));
  memset(v138, 0, sizeof(v138));
  memset(v137, 0, sizeof(v137));
  (*(void (**)(uint64_t, float64x2_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v137, a4, 1);
  v136 = 0;
  v134 = &unk_1E65691E8;
  v135 = 0;
  PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize((uint64_t)&v134, 1, 3);
  v7 = v136 + 48 * SHIDWORD(v135);
  v8 = v137[0];
  *(float64_t *)(v7 - 32) = v137[1].f64[0];
  *(float64x2_t *)(v7 - 48) = v8;
  v9 = *(__int128 *)((char *)&v137[1] + 8);
  *(float64_t *)(v7 - 8) = v137[2].f64[1];
  *(_OWORD *)(v7 - 24) = v9;
  if ((int)v135 <= SHIDWORD(v135))
    v10 = (2 * (HIDWORD(v135) + 1)) | 1;
  else
    v10 = v135;
  PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize((uint64_t)&v134, HIDWORD(v135) + 1, v10);
  v11 = v136 + 48 * SHIDWORD(v135);
  v12 = v138[0];
  *(float64_t *)(v11 - 32) = v138[1].f64[0];
  *(float64x2_t *)(v11 - 48) = v12;
  v13 = *(__int128 *)((char *)&v138[1] + 8);
  *(float64_t *)(v11 - 8) = v138[2].f64[1];
  *(_OWORD *)(v11 - 24) = v13;
  if ((int)v135 <= SHIDWORD(v135))
    v14 = (2 * (HIDWORD(v135) + 1)) | 1;
  else
    v14 = v135;
  PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize((uint64_t)&v134, HIDWORD(v135) + 1, v14);
  v15 = v136 + 48 * SHIDWORD(v135);
  v16 = v139[0];
  *(float64_t *)(v15 - 32) = v139[1].f64[0];
  *(float64x2_t *)(v15 - 48) = v16;
  v17 = *(__int128 *)((char *)&v139[1] + 8);
  *(float64_t *)(v15 - 8) = v139[2].f64[1];
  *(_OWORD *)(v15 - 24) = v17;
  if ((int)v135 <= SHIDWORD(v135))
    v18 = (2 * (HIDWORD(v135) + 1)) | 1;
  else
    v18 = v135;
  PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize((uint64_t)&v134, HIDWORD(v135) + 1, v18);
  v19 = v136 + 48 * SHIDWORD(v135);
  v20 = v140[0];
  *(float64_t *)(v19 - 32) = v140[1].f64[0];
  *(float64x2_t *)(v19 - 48) = v20;
  v21 = *(__int128 *)((char *)&v140[1] + 8);
  *(float64_t *)(v19 - 8) = v140[2].f64[1];
  *(_OWORD *)(v19 - 24) = v21;
  if ((int)v135 <= SHIDWORD(v135))
    v22 = (2 * (HIDWORD(v135) + 1)) | 1;
  else
    v22 = v135;
  PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize((uint64_t)&v134, HIDWORD(v135) + 1, v22);
  v23 = v136 + 48 * SHIDWORD(v135);
  v24 = v141;
  *(_QWORD *)(v23 - 32) = *(_QWORD *)&v142[0];
  *(float64x2_t *)(v23 - 48) = v24;
  v25 = *(_OWORD *)((char *)v142 + 8);
  *(_QWORD *)(v23 - 8) = *((_QWORD *)&v142[1] + 1);
  *(_OWORD *)(v23 - 24) = v25;
  if ((int)v135 <= SHIDWORD(v135))
    v26 = (2 * (HIDWORD(v135) + 1)) | 1;
  else
    v26 = v135;
  v27 = PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize((uint64_t)&v134, HIDWORD(v135) + 1, v26);
  v28 = v136 + 48 * SHIDWORD(v135);
  v29 = v143;
  *(_QWORD *)(v28 - 32) = *(_QWORD *)&v144[0];
  *(float64x2_t *)(v28 - 48) = v29;
  v30 = *(_OWORD *)((char *)v144 + 8);
  *(_QWORD *)(v28 - 8) = *((_QWORD *)&v144[1] + 1);
  *(_OWORD *)(v28 - 24) = v30;
  v31 = HIDWORD(v135);
  if (SHIDWORD(v135) >= 1)
  {
    v32 = 0;
    do
    {
      if (v32 >= SHIDWORD(v135))
        PCArray_base::badIndex((PCArray_base *)v27);
      v27 = transformPlane<double>(a3, (double *)(v136 + 48 * v32), v136 + 48 * v32);
      if ((v27 & 1) == 0)
        goto LABEL_49;
    }
    while (++v32 != v31);
  }
  v33 = (*(uint64_t (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a2 + 104))(a2, &v134, a5);
  if (!(_DWORD)v33)
  {
LABEL_49:
    v63 = 0;
    goto LABEL_59;
  }
  if ((int)v31 >= 1)
  {
    v34 = 0;
    do
    {
      if (v34 >= SHIDWORD(v135))
        PCArray_base::badIndex((PCArray_base *)v33);
      v33 = inverseTransformPlane<double>(a3, (double *)(v136 + 48 * v34), v136 + 48 * v34);
      if ((v33 & 1) == 0)
        goto LABEL_49;
    }
    while (++v34 != v31);
  }
  if (SHIDWORD(v135) < 1)
    PCArray_base::badIndex((PCArray_base *)v33);
  v35 = *(float64x2_t *)v136;
  v137[1].f64[0] = *(float64_t *)(v136 + 16);
  v137[0] = v35;
  v36 = *(double *)(v136 + 40);
  *(float64x2_t *)((char *)&v137[1] + 8) = *(float64x2_t *)(v136 + 24);
  v137[2].f64[1] = v36;
  if (SHIDWORD(v135) < 2)
    PCArray_base::badIndex((PCArray_base *)v33);
  v37 = *(float64x2_t *)(v136 + 48);
  v138[1].f64[0] = *(float64_t *)(v136 + 64);
  v138[0] = v37;
  v38 = *(double *)(v136 + 88);
  *(float64x2_t *)((char *)&v138[1] + 8) = *(float64x2_t *)(v136 + 72);
  v138[2].f64[1] = v38;
  if (SHIDWORD(v135) < 3)
    PCArray_base::badIndex((PCArray_base *)v33);
  v39 = *(float64x2_t *)(v136 + 96);
  v139[1].f64[0] = *(float64_t *)(v136 + 112);
  v139[0] = v39;
  v40 = *(double *)(v136 + 136);
  *(float64x2_t *)((char *)&v139[1] + 8) = *(float64x2_t *)(v136 + 120);
  v139[2].f64[1] = v40;
  if (SHIDWORD(v135) < 4)
    PCArray_base::badIndex((PCArray_base *)v33);
  v41 = *(float64x2_t *)(v136 + 144);
  v140[1].f64[0] = *(float64_t *)(v136 + 160);
  v140[0] = v41;
  v42 = *(double *)(v136 + 184);
  *(float64x2_t *)((char *)&v140[1] + 8) = *(float64x2_t *)(v136 + 168);
  v140[2].f64[1] = v42;
  if (SHIDWORD(v135) < 5)
    PCArray_base::badIndex((PCArray_base *)v33);
  v43 = *(float64x2_t *)(v136 + 192);
  *(_QWORD *)&v142[0] = *(_QWORD *)(v136 + 208);
  v141 = v43;
  v44 = *(_QWORD *)(v136 + 232);
  *(_OWORD *)((char *)v142 + 8) = *(_OWORD *)(v136 + 216);
  *((_QWORD *)&v142[1] + 1) = v44;
  if (SHIDWORD(v135) <= 5)
    PCArray_base::badIndex((PCArray_base *)v33);
  v45 = *(float64x2_t *)(v136 + 240);
  *(_QWORD *)&v144[0] = *(_QWORD *)(v136 + 256);
  v143 = v45;
  v46 = *(_QWORD *)(v136 + 280);
  *(_OWORD *)((char *)v144 + 8) = *(_OWORD *)(v136 + 264);
  *((_QWORD *)&v144[1] + 1) = v46;
  (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 424))(v133, a1);
  v132[4] = v133[4];
  v132[5] = v133[5];
  v132[6] = v133[6];
  v132[7] = v133[7];
  v132[0] = v133[0];
  v132[1] = v133[1];
  v132[2] = v133[2];
  v132[3] = v133[3];
  if (!PCMatrix44Tmpl<double>::invert((double *)v132, (double *)v132, 0.0))
    svdInvert<double>(v132);
  v47 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  v130 = 0uLL;
  v131 = 0.0;
  if (v47 <= -0.0000001 || v47 >= 0.0000001)
  {
    v116 = 0uLL;
    v117 = 0.0;
    v113 = 0.0;
    v114 = 0.0;
    v115 = 0.0;
    v110 = 0.0;
    v111 = 0.0;
    v112 = 0.0;
    v107 = 0.0;
    v108 = 0.0;
    v109 = 0.0;
    if (!planeIntersection<double>(v137[0].f64, &v137[1].f64[1], v138[0].f64, &v138[1].f64[1], (double *)&v116, &v113))
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(v126, "horizontal planes don't meet");
      PCException::PCException(exception, v126);
    }
    if (!planeIntersection<double>(v139[0].f64, &v139[1].f64[1], v140[0].f64, &v140[1].f64[1], &v110, &v107))
    {
      v86 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(v126, "vertical planes don't meet");
      PCException::PCException(v86, v126);
    }
    v64 = v114 * v109 - v115 * v108;
    v65 = v115 * v107 - v109 * v113;
    v66 = v108 * v113 - v114 * v107;
    v67 = v66 * v66 + v64 * v64 + v65 * v65;
    if (v67 == 0.0)
    {
      v87 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(v126, "intersection lines aren't perpendicular");
      PCException::PCException(v87, v126);
    }
    v68 = ((v107 * v65 - v108 * v64) * (v112 - v117)
         + (v109 * v64 - v107 * v66) * (v111 - *((double *)&v116 + 1))
         + (v108 * v66 - v109 * v65) * (v110 - *(double *)&v116))
        / v67;
    v69 = ((v113 * v65 - v114 * v64) * (v112 - v117)
         + (v115 * v64 - v113 * v66) * (v111 - *((double *)&v116 + 1))
         + (v114 * v66 - v115 * v65) * (v110 - *(double *)&v116))
        / v67;
    v104 = *(double *)&v116 + v113 * v68;
    v105 = *((double *)&v116 + 1) + v114 * v68;
    v106 = v117 + v115 * v68;
    v101 = v107 * v69 + v110;
    v102 = v108 * v69 + v111;
    v103 = v109 * v69 + v112;
    v70 = &v104;
    if (v104 * *((double *)v142 + 1) + *(double *)&v142[1] * v105 + *((double *)&v142[1] + 1) * v106 > v101 * *((double *)v142 + 1) + *(double *)&v142[1] * v102 + *((double *)&v142[1] + 1) * v103)
      v70 = &v101;
    v71 = *(float64x2_t *)v70;
    v131 = v70[2];
    v130 = v71;
    __asm { FMOV            V2.2D, #0.5 }
    *(float64x2_t *)&v126[0].var0 = vmulq_f64(vaddq_f64(v141, v143), _Q2);
    v127 = (*(double *)v142 + *(double *)v144) * 0.5;
    v128 = *(_OWORD *)((char *)v142 + 8);
    v129 = *((double *)&v142[1] + 1);
    v122 = v71;
    v124 = *(_OWORD *)((char *)v142 + 8);
    v123 = v131;
    v125 = *((double *)&v142[1] + 1);
    v99 = 0uLL;
    v100 = 0.0;
    v73 = PCPlane<double>::intersect((double *)v126, v122.f64, v99.f64);
    if (v74)
    {
      v75 = (*(double (**)(uint64_t, double))(*(_QWORD *)a1 + 320))(a1, v73);
      v76 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
      v77 = vsubq_f64(v99, v130);
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 496))(a1, v76 * sqrt(vaddvq_f64(vmulq_f64(v77, v77)) + (v100 - v131) * (v100 - v131)) / v75);
    }
    PCMatrix44Tmpl<double>::transform<double>((double *)v132, v130.f64, v130.f64);
    v78 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 688))(a1);
    v118 = 0x3FF0000000000000uLL;
    v119 = 0.0;
    *(_QWORD *)&v120 = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 472))(a1, &v118);
    (*(void (**)(double *__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(v98, a1);
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
    v80 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
    v81 = LiCamera::adjustTranslationForModel(0, v79, (double *)&v118, &v130, v47, v78, v80, v98[0]);
    (*(void (**)(uint64_t, float64x2_t *, double))(*(_QWORD *)a1 + 448))(a1, &v130, v81);
  }
  else
  {
    __asm { FMOV            V3.2D, #0.5 }
    *(float64x2_t *)&v126[0].var0 = vmulq_f64(vaddq_f64(v137[0], v138[0]), _Q3);
    v127 = (v137[1].f64[0] + v138[1].f64[0]) * 0.5;
    v128 = *(__int128 *)((char *)&v137[1] + 8);
    v129 = v137[2].f64[1];
    v122 = vmulq_f64(vaddq_f64(v139[0], v140[0]), _Q3);
    v123 = (v139[1].f64[0] + v140[1].f64[0]) * 0.5;
    v125 = v139[2].f64[1];
    v124 = *(__int128 *)((char *)&v139[1] + 8);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 360))(&v116, a1);
    v118 = v116;
    v120 = *(_OWORD *)((char *)v142 + 8);
    v119 = v117;
    v121 = *((_QWORD *)&v142[1] + 1);
    if (!intersection<double>((double *)v126, v122.f64, (double *)&v118, v130.f64))
    {
      v85 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString((PCString *)&v116, "orthographic intersection failed");
      PCException::PCException(v85, (const PCString *)&v116);
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 304))(&v116, a1);
    v95 = v138[0].f64[1];
    v97 = v138[0].f64[0];
    v93 = v137[0].f64[1];
    v53 = v137[1];
    v89 = v137[2].f64[0];
    v91 = v137[0].f64[0];
    v92 = v137[2].f64[1];
    v90 = v138[1].f64[0];
    v54 = v139[0].f64[0];
    v55 = v140[0].f64[1];
    v88 = v140[1].f64[0];
    v56 = v139[0].f64[1];
    v57 = v139[1];
    v58 = v139[2].f64[0];
    v59 = v140[0].f64[0];
    v60 = v139[2].f64[1];
    v62.n128_f64[0] = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 488))(a1);
    *(double *)&v116 = *(double *)&v116 / v62.n128_f64[0];
    *((double *)&v116 + 1) = *((double *)&v116 + 1) / v62.n128_f64[0];
    v61 = fabs((v97 - v91) * v53.f64[1] + (v95 - v93) * v89 + (v90 - v53.f64[0]) * v92) / *(double *)&v116;
    v62.n128_f64[0] = fabs((v59 - v54) * v57.f64[1] + (v55 - v56) * v58 + (v88 - v57.f64[0]) * v60)
                    / *((double *)&v116 + 1);
    if (v61 >= v62.n128_f64[0])
      v62.n128_f64[0] = v61;
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)a1 + 496))(a1, v62);
    PCMatrix44Tmpl<double>::transform<double>((double *)v132, v130.f64, v130.f64);
    (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)a1 + 448))(a1, &v130);
  }
  v63 = 1;
LABEL_59:
  v134 = &unk_1E65691E8;
  if ((int)v135 < 0)
    v82 = 1;
  else
    v82 = v135;
  PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize((uint64_t)&v134, 0, v82);
  if (v136)
    MEMORY[0x1B5E2914C](v136, 0x1000C8077774924);
  return v63;
}

void sub_1B2CDDB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,PCString a57)
{
  PCString::~PCString(&a57);
  PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::~PCArray((uint64_t)&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

void svdInvert<double>(__int128 *a1)
{
  _OWORD *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30[4];
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  _OWORD *v59;

  v58[0] = 0;
  v58[1] = 0;
  v58[2] = 0x100000001;
  v59 = 0;
  PCGenMatrix<double>::resize(v58, 4, 4, 1);
  v2 = v59;
  v3 = *a1;
  v4 = a1[1];
  v5 = a1[3];
  v59[2] = a1[2];
  v2[3] = v5;
  v6 = a1[7];
  v8 = a1[4];
  v7 = a1[5];
  v2[6] = a1[6];
  v2[7] = v6;
  v2[4] = v8;
  v2[5] = v7;
  *v2 = v3;
  v2[1] = v4;
  v31[0] = 0;
  v31[1] = 0x100000000;
  v32 = 0;
  v33 = 0;
  v31[2] = 0;
  v34 = 0x100000001;
  v36 = 0;
  v37 = 0;
  v35 = 0;
  v38 = 0x100000001;
  v39 = 0;
  v40 = 0;
  v41 = 0x100000000;
  v42 = 0;
  v43 = 0;
  v44 = 0x100000000;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 1;
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0x100000001;
  v53 = 0;
  v54 = 0;
  v55 = 0x100000000;
  v56 = 0;
  v57 = 0x3F1A36E2EB1C432DLL;
  _svdCall((uint64_t)v31, (uint64_t)v58);
  PCSvd<double>::inverse((uint64_t)v31, v30);
  v9 = convert<double>((uint64_t)v30, (uint64_t)a1);
  v10 = v30[0];
  if (v30[0])
  {
    v11 = *(_DWORD *)(v30[0] - 4) - 1;
    *(_DWORD *)(v30[0] - 4) = v11;
    if (!v11)
      MEMORY[0x1B5E2914C](v10 - 8, 0x1000C8077774924, v9);
  }
  v12 = v54;
  if (v54)
  {
    v13 = *(_DWORD *)(v54 - 4) - 1;
    *(_DWORD *)(v54 - 4) = v13;
    if (!v13)
    {
      MEMORY[0x1B5E2914C](v12 - 8, 0x1000C8077774924, v9);
      v54 = 0;
    }
  }
  v14 = v50;
  if (v50)
  {
    v15 = *(_DWORD *)(v50 - 4) - 1;
    *(_DWORD *)(v50 - 4) = v15;
    if (!v15)
    {
      MEMORY[0x1B5E2914C](v14 - 8, 0x1000C8077774924, v9);
      v50 = 0;
    }
  }
  v16 = v46;
  if (v46)
  {
    v17 = *(_DWORD *)(v46 - 4) - 1;
    *(_DWORD *)(v46 - 4) = v17;
    if (!v17)
    {
      MEMORY[0x1B5E2914C](v16 - 8, 0x1000C8077774924, v9);
      v46 = 0;
    }
  }
  v18 = v43;
  if (v43)
  {
    v19 = *(_DWORD *)(v43 - 4) - 1;
    *(_DWORD *)(v43 - 4) = v19;
    if (!v19)
    {
      MEMORY[0x1B5E2914C](v18 - 8, 0x1000C8077774924, v9);
      v43 = 0;
    }
  }
  v20 = v40;
  if (v40)
  {
    v21 = *(_DWORD *)(v40 - 4) - 1;
    *(_DWORD *)(v40 - 4) = v21;
    if (!v21)
    {
      MEMORY[0x1B5E2914C](v20 - 8, 0x1000C8077774924, v9);
      v40 = 0;
    }
  }
  v22 = v36;
  if (v36)
  {
    v23 = *(_DWORD *)(v36 - 4) - 1;
    *(_DWORD *)(v36 - 4) = v23;
    if (!v23)
    {
      MEMORY[0x1B5E2914C](v22 - 8, 0x1000C8077774924, v9);
      v36 = 0;
    }
  }
  v24 = v32;
  if (v32)
  {
    v25 = *(_DWORD *)(v32 - 4) - 1;
    *(_DWORD *)(v32 - 4) = v25;
    if (!v25)
    {
      MEMORY[0x1B5E2914C](v24 - 8, 0x1000C8077774924, v9);
      v32 = 0;
    }
  }
  v26 = v31[0];
  if (v31[0])
  {
    v27 = *(_DWORD *)(v31[0] - 4) - 1;
    *(_DWORD *)(v31[0] - 4) = v27;
    if (!v27)
      MEMORY[0x1B5E2914C](v26 - 8, 0x1000C8077774924, v9);
  }
  v28 = v58[0];
  if (v58[0])
  {
    v29 = *(_DWORD *)(v58[0] - 4) - 1;
    *(_DWORD *)(v58[0] - 4) = v29;
    if (!v29)
      MEMORY[0x1B5E2914C](v28 - 8, 0x1000C8077774924, v9);
  }
}

void sub_1B2CDDF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  int v8;
  uint64_t v9;
  int v10;
  va_list va;

  va_start(va, a6);
  if (a3)
  {
    v8 = *(_DWORD *)(a3 - 4) - 1;
    *(_DWORD *)(a3 - 4) = v8;
    if (!v8)
      MEMORY[0x1B5E2914C](a3 - 8, 0x1000C8077774924);
  }
  PCSvd<double>::~PCSvd((uint64_t *)va);
  v9 = *(_QWORD *)(v6 - 80);
  if (v9)
  {
    v10 = *(_DWORD *)(v9 - 4) - 1;
    *(_DWORD *)(v9 - 4) = v10;
    if (!v10)
      MEMORY[0x1B5E2914C](v9 - 8, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

BOOL intersection<double>(double *a1, double *a2, double *a3, double *a4)
{
  _BOOL8 result;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  result = planeIntersection<double>(a1, a1 + 3, a2, a2 + 3, &v18, &v15);
  if (result)
  {
    v8 = a3[3];
    v7 = a3[4];
    v9 = a3[5];
    v10 = v8 * v15 + v7 * v16 + v9 * v17;
    if (v10 == 0.0)
    {
      return 0;
    }
    else
    {
      v11 = (v8 * (*a3 - v18) + v7 * (a3[1] - v19) + v9 * (a3[2] - v20)) / v10;
      v12 = v18 + v15 * v11;
      v13 = v19 + v16 * v11;
      v14 = v20 + v17 * v11;
      *a4 = v12;
      a4[1] = v13;
      a4[2] = v14;
      return 1;
    }
  }
  return result;
}

uint64_t PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E65691E8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LiCamera::update(LiCamera *this)
{
  return 0;
}

uint64_t LiCamera::replacement(LiCamera *this)
{
  return 0;
}

uint64_t LiCamera::isAnimating(LiCamera *this)
{
  return 0;
}

BOOL LiCamera::isOkay(LiCamera *this)
{
  double v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  (*(void (**)(LiCamera *, uint64_t *))(*(_QWORD *)this + 440))(this, &v9);
  if ((v9 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if ((v10 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if ((v11 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v5 = 0x3FF0000000000000;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  (*(void (**)(LiCamera *, uint64_t *))(*(_QWORD *)this + 472))(this, &v5);
  if ((v5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return 0;
  }
  v2 = (*(double (**)(LiCamera *))(*(_QWORD *)this + 504))(this);
  return v2 >= 0.0 && (*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000;
}

void LiCamera::print(uint64_t a1, _QWORD *a2, int a3)
{
  int v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  double v18;
  double v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[16];
  uint64_t v23;
  uint64_t v24;

  LiImageSource::printIndent(a2, a3);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 632))(a1);
  if (v6)
  {
    if (v6 == 1)
    {
      v7 = "Frame";
      v8 = a2;
      v9 = 5;
    }
    else
    {
      v7 = "Unknown-model";
      v8 = a2;
      v9 = 13;
    }
  }
  else
  {
    v7 = "Viewpoint";
    v8 = a2;
    v9 = 9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v7, v9);
  v10 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 504))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" camera: aov=", 13);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" focal=", 7);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
  v13 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
  if (v10 != 0.0)
  {
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" cop=", 5);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 336))(&v24, a1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"[", 1);
    v15 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)",", 1);
    v16 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)",", 1);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"]", 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" ", 1);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 536))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 576))(a1);
  v18 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 552))(a1);
  v19 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 592))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"near=", 5);
  std::ostream::operator<<();
  if (v18 > 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"far=", 4);
  std::ostream::operator<<();
  if (v19 > 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 272))(&v23, a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"filmback=[", 10);
  v20 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", ", 2);
  v21 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"]\n", 2);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v22, a1);
  PCMatrix44Tmpl<double>::print((uint64_t)v22, a2, a3 + 2);
}

void PCMatrix44Tmpl<double>::print(uint64_t a1, _QWORD *a2, int a3)
{
  char *v4;
  char *v5;
  size_t v6;
  PCString v7;

  PCMatrix44Tmpl<double>::format(a1, a3, (PCSharedCount *)&v7);
  v4 = PCString::createCStr(&v7);
  v5 = v4;
  if (v4)
  {
    v6 = strlen(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v5, v6);
    free(v5);
  }
  PCString::~PCString(&v7);
}

void sub_1B2CDE5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void LiSimpleCamera::LiSimpleCamera(LiSimpleCamera *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[3];
  *(_QWORD *)this = v3;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[4];
  v4 = a2[2];
  *(_QWORD *)this = v4;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[5];
  v5 = a2[1];
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[6];
  v6 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v6 - 24)) = a2[7];
  *((_DWORD *)this + 2) = 1;
  LiTransform::LiTransform((LiSimpleCamera *)((char *)this + 16));
  *((_QWORD *)this + 28) = 0x3FF0000000000000;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 42) = 0x3FF0000000000000;
  *((_QWORD *)this + 37) = 0x3FF0000000000000;
  *((_QWORD *)this + 32) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 47) = 0x3FF0000000000000;
  *((_QWORD *)this + 48) = 0x4046800000000000;
  *((_BYTE *)this + 392) = 1;
  *((_OWORD *)this + 25) = xmmword_1B3558480;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_OWORD *)this + 27) = xmmword_1B3558490;
  *((_QWORD *)this + 56) = 0x3FF0000000000000;
  *((_WORD *)this + 228) = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  (*(void (**)(LiSimpleCamera *, uint64_t *))(*(_QWORD *)this + 448))(this, &v7);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  (*(void (**)(LiSimpleCamera *, uint64_t *))(*(_QWORD *)this + 400))(this, &v7);
}

void sub_1B2CDE720(_Unwind_Exception *a1, const PCString *a2)
{
  OZChannelBase *v2;

  OZChannelBase::setRangeName(v2, a2);
  _Unwind_Resume(a1);
}

void LiSimpleCamera::LiSimpleCamera(LiSimpleCamera *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *((_BYTE *)this + 480) = 1;
  *(_QWORD *)this = &off_1E6568E28;
  *((_QWORD *)this + 58) = &unk_1E6569148;
  *((_QWORD *)this + 59) = 0;
  *((_DWORD *)this + 2) = 1;
  LiTransform::LiTransform((LiSimpleCamera *)((char *)this + 16));
  *((_QWORD *)this + 28) = 0x3FF0000000000000;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 42) = 0x3FF0000000000000;
  *((_QWORD *)this + 37) = 0x3FF0000000000000;
  *((_QWORD *)this + 32) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *((_QWORD *)this + 47) = 0x3FF0000000000000;
  *((_QWORD *)this + 48) = 0x4046800000000000;
  *((_BYTE *)this + 392) = 1;
  *((_OWORD *)this + 25) = xmmword_1B3558480;
  *((_QWORD *)this + 52) = 0;
  *((_QWORD *)this + 53) = 0;
  *((_OWORD *)this + 27) = xmmword_1B3558490;
  *((_QWORD *)this + 56) = 0x3FF0000000000000;
  *((_WORD *)this + 228) = 0;
  v2 = 0;
  v3 = 0;
  v4 = 0;
  (*(void (**)(LiSimpleCamera *, uint64_t *))(*(_QWORD *)this + 448))(this, &v2);
  v2 = 0;
  v3 = 0;
  v4 = 0;
  (*(void (**)(LiSimpleCamera *, uint64_t *))(*(_QWORD *)this + 400))(this, &v2);
}

void sub_1B2CDE834(_Unwind_Exception *a1, const PCString *a2)
{
  uint64_t v2;
  OZChannelBase *v3;

  OZChannelBase::setRangeName(v3, a2);
  *(_QWORD *)(v2 + 464) = &off_1E65EB048;
  *(_BYTE *)(v2 + 480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 472));
  _Unwind_Resume(a1);
}

void LiSimpleCamera::~LiSimpleCamera(LiSimpleCamera *this, const PCString *a2)
{
  PCString v2;

  v2.var0 = a2->var0;
  *(PCString *)this = (PCString)a2->var0;
  *(PCString *)((char *)this + v2.var0[-1].info) = a2[7];
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 16), a2);
}

{
  *(_QWORD *)this = &off_1E6568E28;
  *((_QWORD *)this + 58) = &unk_1E6569148;
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 16), a2);
  *((_QWORD *)this + 58) = &off_1E65EB048;
  *((_BYTE *)this + 480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 59);
}

{
  *(_QWORD *)this = &off_1E6568E28;
  *((_QWORD *)this + 58) = &unk_1E6569148;
  OZChannelBase::setRangeName((OZChannelBase *)((char *)this + 16), a2);
  *((_QWORD *)this + 58) = &off_1E65EB048;
  *((_BYTE *)this + 480) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 59);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiSimpleCamera::~LiSimpleCamera(LiSimpleCamera *this, const PCString *a2)
{
  char *v2;

  v2 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v2 = &off_1E6568E28;
  *((_QWORD *)v2 + 58) = &unk_1E6569148;
  OZChannelBase::setRangeName((OZChannelBase *)(v2 + 16), a2);
  *((_QWORD *)v2 + 58) = &off_1E65EB048;
  v2[480] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v2 + 59);
}

{
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), a2);
}

__n128 LiSimpleCamera::getFilmback@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[27];
  *a2 = result;
  return result;
}

__n128 LiSimpleCamera::setFilmback(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[27] = *a2;
  return result;
}

__n128 LiSimpleCamera::getParentTransform@<Q0>(LiSimpleCamera *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *((_OWORD *)this + 21);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 20);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *((_OWORD *)this + 23);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)this + 22);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *((_OWORD *)this + 17);
  *(_OWORD *)a2 = *((_OWORD *)this + 16);
  *(_OWORD *)(a2 + 16) = v4;
  result = *((__n128 *)this + 18);
  v6 = *((_OWORD *)this + 19);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t LiSimpleCamera::setParentTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;

  v2 = result + 256;
  if (result + 256 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v2 + j) = *(_QWORD *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  return result;
}

__n128 LiSimpleCamera::getTranslation(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a1[1];
  a2[1].n128_u64[0] = a1[2].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 LiSimpleCamera::setTranslation(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[2].n128_u64[0] = a2[1].n128_u64[0];
  a1[1] = result;
  return result;
}

__n128 LiSimpleCamera::getPivot(uint64_t a1, __n128 *a2)
{
  __n128 result;

  result = *(__n128 *)(a1 + 232);
  a2[1].n128_u64[0] = *(_QWORD *)(a1 + 248);
  *a2 = result;
  return result;
}

__n128 LiSimpleCamera::setPivot(uint64_t a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(_QWORD *)(a1 + 248) = a2[1].n128_u64[0];
  *(__n128 *)(a1 + 232) = result;
  return result;
}

__n128 LiSimpleCamera::getRotation(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a1 + 64 != a2)
  {
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 64);
    result = *(__n128 *)(a1 + 72);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 88);
    *(__n128 *)(a2 + 8) = result;
  }
  return result;
}

__n128 LiSimpleCamera::setRotation(uint64_t a1, uint64_t a2)
{
  __n128 result;

  if (a1 + 64 != a2)
  {
    *(_QWORD *)(a1 + 64) = *(_QWORD *)a2;
    result = *(__n128 *)(a2 + 8);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 24);
    *(__n128 *)(a1 + 72) = result;
  }
  return result;
}

double LiSimpleCamera::getScale(LiSimpleCamera *this)
{
  return *((double *)this + 28);
}

uint64_t LiSimpleCamera::setScale(uint64_t this, double a2)
{
  *(double *)(this + 224) = a2;
  return this;
}

double LiSimpleCamera::getAngleOfView(LiSimpleCamera *this)
{
  return *((double *)this + 48);
}

uint64_t LiSimpleCamera::setAngleOfView(uint64_t this, double a2)
{
  *(double *)(this + 384) = a2;
  return this;
}

uint64_t LiSimpleCamera::getNiceAngleOfView(LiSimpleCamera *this)
{
  return *((unsigned __int8 *)this + 392);
}

uint64_t LiSimpleCamera::setNiceAngleOfView(uint64_t this, char a2)
{
  *(_BYTE *)(this + 392) = a2;
  return this;
}

double LiSimpleCamera::getNearPlane(LiSimpleCamera *this)
{
  return *((double *)this + 50);
}

uint64_t LiSimpleCamera::setNearPlane(uint64_t this, double a2)
{
  *(double *)(this + 400) = a2;
  return this;
}

double LiSimpleCamera::getNearPlaneFade(LiSimpleCamera *this)
{
  return *((double *)this + 52);
}

uint64_t LiSimpleCamera::setNearPlaneFade(uint64_t this, double a2)
{
  *(double *)(this + 416) = a2;
  return this;
}

double LiSimpleCamera::getFarPlane(LiSimpleCamera *this)
{
  return *((double *)this + 51);
}

uint64_t LiSimpleCamera::setFarPlane(uint64_t this, double a2)
{
  *(double *)(this + 408) = a2;
  return this;
}

double LiSimpleCamera::getFarPlaneFade(LiSimpleCamera *this)
{
  return *((double *)this + 53);
}

uint64_t LiSimpleCamera::setFarPlaneFade(uint64_t this, double a2)
{
  *(double *)(this + 424) = a2;
  return this;
}

uint64_t LiSimpleCamera::getNearFadePoints(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v6;
  double v7;
  double v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  _OWORD v15[3];

  memset(v15, 0, sizeof(v15));
  v6 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 96))(a1, v15);
  if ((_DWORD)v6)
  {
    v7 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 552))(a1);
    if (v7 >= 1.0)
      v8 = v7;
    else
      v8 = 1.0;
    v9 = (float64x2_t)v15[0];
    v10 = *(float64x2_t *)((char *)&v15[1] + 8);
    v11 = *((double *)&v15[2] + 1);
    v12 = sqrt(vaddvq_f64(vmulq_f64(v10, v10)) + v11 * v11);
    if (v12 <= -0.000000100000001 || v12 >= 0.000000100000001)
    {
      v10 = vdivq_f64(*(float64x2_t *)((char *)&v15[1] + 8), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0));
      v11 = *((double *)&v15[2] + 1) / v12;
    }
    v13 = *(double *)&v15[1] + v8 * v11;
    *(_OWORD *)a2 = v15[0];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&v15[1];
    *a3 = vaddq_f64(v9, vmulq_n_f64(v10, v8));
    a3[1].f64[0] = v13;
  }
  return v6;
}

uint64_t LiSimpleCamera::getFarFadePoints(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v6;
  double v7;
  double v8;
  float64x2_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  _OWORD v15[3];

  memset(v15, 0, sizeof(v15));
  v6 = (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 104))(a1, v15);
  if ((_DWORD)v6)
  {
    v7 = (*(double (**)(uint64_t))(*(_QWORD *)a1 + 592))(a1);
    if (v7 >= 1.0)
      v8 = v7;
    else
      v8 = 1.0;
    v9 = (float64x2_t)v15[0];
    v10 = *(float64x2_t *)((char *)&v15[1] + 8);
    v11 = *((double *)&v15[2] + 1);
    v12 = sqrt(vaddvq_f64(vmulq_f64(v10, v10)) + v11 * v11);
    if (v12 <= -0.000000100000001 || v12 >= 0.000000100000001)
    {
      v10 = vdivq_f64(*(float64x2_t *)((char *)&v15[1] + 8), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12, 0));
      v11 = *((double *)&v15[2] + 1) / v12;
    }
    v13 = *(double *)&v15[1] + v8 * v11;
    *(_OWORD *)a2 = v15[0];
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&v15[1];
    *a3 = vaddq_f64(v9, vmulq_n_f64(v10, v8));
    a3[1].f64[0] = v13;
  }
  return v6;
}

uint64_t LiSimpleCamera::setFarCrop(uint64_t this, char a2)
{
  *(_BYTE *)(this + 457) = a2;
  return this;
}

uint64_t LiSimpleCamera::getFarCrop(LiSimpleCamera *this)
{
  return *((unsigned __int8 *)this + 457);
}

uint64_t LiSimpleCamera::getCameraModel(LiSimpleCamera *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t LiSimpleCamera::setCameraModel(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t LiSimpleCamera::getRotationOrder(LiSimpleCamera *this)
{
  return 4;
}

uint64_t LiSimpleCamera::set(LiSimpleCamera *this, const LiCamera *a2)
{
  uint64_t i;
  _OWORD *v5;
  __int128 v6;
  uint64_t result;
  _OWORD v8[8];
  _QWORD v9[4];

  v9[0] = 0x3FF0000000000000;
  memset(&v9[1], 0, 24);
  (*(void (**)(const LiCamera *, char *))(*(_QWORD *)a2 + 440))(a2, (char *)this + 16);
  (*(void (**)(const LiCamera *, _QWORD *))(*(_QWORD *)a2 + 472))(a2, v9);
  (*(void (**)(LiSimpleCamera *, _QWORD *))(*(_QWORD *)this + 480))(this, v9);
  (*(void (**)(_OWORD *__return_ptr, const LiCamera *))(*(_QWORD *)a2 + 424))(v8, a2);
  if (v8 != (_OWORD *)((char *)this + 256))
  {
    for (i = 0; i != 8; i += 2)
    {
      v5 = (_OWORD *)((char *)this + i * 16 + 256);
      v6 = v8[i + 1];
      *v5 = v8[i];
      v5[1] = v6;
    }
  }
  *((double *)this + 28) = (*(double (**)(const LiCamera *))(*(_QWORD *)a2 + 488))(a2);
  (*(void (**)(const LiCamera *, char *))(*(_QWORD *)a2 + 456))(a2, (char *)this + 232);
  *((_DWORD *)this + 2) = (*(uint64_t (**)(const LiCamera *))(*(_QWORD *)a2 + 632))(a2);
  *((double *)this + 48) = (*(double (**)(const LiCamera *))(*(_QWORD *)a2 + 504))(a2);
  *((double *)this + 50) = (*(double (**)(const LiCamera *))(*(_QWORD *)a2 + 536))(a2);
  *((double *)this + 51) = (*(double (**)(const LiCamera *))(*(_QWORD *)a2 + 576))(a2);
  *((double *)this + 52) = (*(double (**)(const LiCamera *))(*(_QWORD *)a2 + 552))(a2);
  *((double *)this + 53) = (*(double (**)(const LiCamera *))(*(_QWORD *)a2 + 592))(a2);
  (*(void (**)(_OWORD *__return_ptr, const LiCamera *))(*(_QWORD *)a2 + 272))(v8, a2);
  *((_OWORD *)this + 27) = v8[0];
  *((_BYTE *)this + 456) = (*(uint64_t (**)(const LiCamera *))(*(_QWORD *)a2 + 664))(a2);
  result = (*(uint64_t (**)(const LiCamera *))(*(_QWORD *)a2 + 624))(a2);
  *((_BYTE *)this + 457) = result;
  return result;
}

double LiSimpleCamera::getPixelAspectRatio(LiSimpleCamera *this)
{
  return *((double *)this + 56);
}

uint64_t LiSimpleCamera::setPixelAspectRatio(uint64_t this, double a2)
{
  *(double *)(this + 448) = a2;
  return this;
}

uint64_t LiSimpleCamera::getCrop(LiSimpleCamera *this)
{
  return *((unsigned __int8 *)this + 456);
}

uint64_t LiSimpleCamera::setCrop(uint64_t this, char a2)
{
  *(_BYTE *)(this + 456) = a2;
  return this;
}

double LiAnimCamera::getTime(LiAnimCamera *this)
{
  const PCString *v2;
  double *v3;
  __darwin_suseconds_t tv_usec;
  __darwin_suseconds_t v5;
  _BOOL8 v6;
  double v7;
  double v8;
  double v9;
  double v11;
  timeval v12;

  PCTime::PCTime((PCTime *)&v12);
  gettimeofday(&v12, 0);
  tv_usec = v12.tv_usec;
  v5 = *((_DWORD *)this + 118);
  v6 = v12.tv_usec < v5;
  if (v12.tv_usec < v5)
    tv_usec = v12.tv_usec + 1000000;
  v12.tv_usec = tv_usec - v5;
  v12.tv_sec = v12.tv_sec - v6 - *((_QWORD *)this + 58);
  v7 = ((double)(tv_usec - v5) / 1000000.0 + (double)v12.tv_sec) / *((double *)this + 60);
  v11 = v7;
  if (v7 < 1.0)
  {
    v8 = 0.0;
    if (*((_BYTE *)this + 536))
      v9 = 1.0;
    else
      v9 = 0.0;
    if (*((_BYTE *)this + 537))
      v8 = 1.0;
    PCMath::easeInOut(&v11, v7, v9, v8, 0.0, 1.0, 0, v3);
    v7 = v11;
  }
  OZChannelBase::setRangeName((OZChannelBase *)&v12, v2);
  return v7;
}

void sub_1B2CDF018(_Unwind_Exception *a1, const PCString *a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  OZChannelBase::setRangeName((OZChannelBase *)&a11, a2);
  _Unwind_Resume(a1);
}

double LiCamera::getCropFraction(LiCamera *this)
{
  int v1;
  double result;

  v1 = (*(uint64_t (**)(LiCamera *))(*(_QWORD *)this + 664))(this);
  result = 0.0;
  if (v1)
    return 1.0;
  return result;
}

BOOL transformPlane<double>(_OWORD *a1, double *a2, uint64_t a3)
{
  double v4;
  double v5;
  double v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BOOL8 v11;
  _OWORD v13[8];
  float64x2_t v14;
  double v15;
  double v16;

  v4 = a2[4];
  v5 = a2[5];
  v6 = -(a2[3] * *a2 + v4 * a2[1] + v5 * a2[2]);
  v14.f64[0] = a2[3];
  v14.f64[1] = v4;
  v15 = v5;
  v16 = v6;
  v7 = a1[5];
  v13[4] = a1[4];
  v13[5] = v7;
  v8 = a1[7];
  v13[6] = a1[6];
  v13[7] = v8;
  v9 = a1[1];
  v13[0] = *a1;
  v13[1] = v9;
  v10 = a1[3];
  v13[2] = a1[2];
  v13[3] = v10;
  v11 = PCMatrix44Tmpl<double>::invert((double *)v13, (double *)v13, 0.0);
  if (v11)
  {
    PCMatrix44Tmpl<double>::transform_row<double>((double *)v13, v14.f64, v14.f64);
    PCPlane<double>::setImplicit(a3, &v14);
  }
  return v11;
}

double PCMatrix44Tmpl<double>::setFramePerspective(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v13;
  double v14;
  double v15;
  double result;

  v13 = a3 * 0.5;
  v14 = tan(a4 * 3.14159265 / 360.0);
  if (v14 > 0.0 && v13 / v14 - a7 < a5)
    a5 = v13 / v14 - a7;
  *(double *)a1 = 2.0 / a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(double *)(a1 + 40) = 2.0 / a3;
  v15 = v13 * (a5 + a6);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(double *)(a1 + 80) = (v14 * (a5 - a6) - (v13 + v13)) / v15;
  *(double *)(a1 + 88) = (v13 * a5 - v13 * a6 + v14 * ((a6 + a6) * a5)) / v15;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  result = -v14 / v13;
  *(double *)(a1 + 112) = result;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

void PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E65691E8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<PCPlane<double>,PCArray_Traits<PCPlane<double>>>::resize(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  int v11;
  uint64_t v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  PCException *exception;
  PCString v18;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v18, "PCArray::resize");
    PCException::PCException(exception, &v18);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    v6 = *(int *)(result + 12);
    if ((int)v6 < a2)
    {
      v7 = 48 * v6;
      v8 = a2 - v6;
      do
      {
        v9 = (_OWORD *)(*(_QWORD *)(result + 16) + v7);
        v9[1] = 0uLL;
        v9[2] = 0uLL;
        *v9 = 0uLL;
        v7 += 48;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (v3)
    {
      v10 = (_OWORD *)operator new[]();
      bzero(v10, 48 * v3);
    }
    else
    {
      v10 = 0;
    }
    v11 = *(_DWORD *)(v5 + 12);
    if (a2 >= v11)
      v12 = v11;
    else
      v12 = a2;
    if ((int)v12 < 1)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      v13 = (__int128 *)(*(_QWORD *)(v5 + 16) + 32);
      v14 = v10 + 2;
      v15 = v12;
      do
      {
        *(v14 - 2) = *(v13 - 2);
        *(v14 - 1) = *(v13 - 1);
        v16 = *v13;
        v13 += 3;
        *v14 = v16;
        v14 += 3;
        --v15;
      }
      while (v15);
    }
    if ((int)v12 > v11)
      v11 = v12;
    if (v11 < a2)
      bzero(&v10[3 * v11], 48 * (~v11 + a2) + 48);
    result = *(_QWORD *)(v5 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v5 + 16) = v10;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = a2;
  return result;
}

void sub_1B2CDF434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t inverseTransformPlane<double>(double *a1, double *a2, uint64_t a3)
{
  double v4;
  double v5;
  double v6;
  float64x2_t v8;
  double v9;
  double v10;

  v4 = a2[4];
  v5 = a2[5];
  v6 = -(a2[3] * *a2 + v4 * a2[1] + v5 * a2[2]);
  v8.f64[0] = a2[3];
  v8.f64[1] = v4;
  v9 = v5;
  v10 = v6;
  PCMatrix44Tmpl<double>::transform_row<double>(a1, v8.f64, v8.f64);
  PCPlane<double>::setImplicit(a3, &v8);
  return 1;
}

__n128 convert<double>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t j;
  __n128 result;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  PCException *exception;
  PCString v16;

  if (*(_DWORD *)(a1 + 12) != 4 || *(_DWORD *)(a1 + 8) != 4)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "from.cols() == 4 && from.rows() == 4");
    PCException::PCException(exception, &v16);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v3 = a2;
  if (*(_DWORD *)(a1 + 20) == 1 && *(_DWORD *)(a1 + 16) == 4)
  {
    v9 = *(__int128 **)(a1 + 24);
    v10 = *v9;
    v11 = v9[1];
    v12 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v12;
    *(_OWORD *)a2 = v10;
    *(_OWORD *)(a2 + 16) = v11;
    result = (__n128)v9[4];
    v13 = v9[5];
    v14 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v14;
    *(__n128 *)(a2 + 64) = result;
    *(_OWORD *)(a2 + 80) = v13;
  }
  else
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 4; ++j)
      {
        PCGenMatrix<double>::checkColIndex(a1, j);
        PCGenMatrix<double>::checkRowIndex(a1, i);
        result.n128_u64[0] = *(_QWORD *)(*(_QWORD *)(a1 + 24)
                                       + 8 * (*(_DWORD *)(a1 + 20) * (int)j + *(_DWORD *)(a1 + 16) * (int)i));
        *(_QWORD *)(v3 + 8 * j) = result.n128_u64[0];
      }
      v3 += 32;
    }
  }
  return result;
}

void sub_1B2CDF5F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t PCSvd<double>::inverse@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  uint64_t v5;
  double *v6;
  double v7;
  unsigned int v8;
  double *v9;
  double *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  int v16;
  int v17;
  double *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  double *v27;
  int v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  double v42;
  unint64_t v43;
  double *v44;
  unint64_t v45;
  double *v46;
  double *v47;
  double *v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  _QWORD v54[2];
  double *v55;
  uint64_t v56;
  int v57;
  int v58;
  double *v59;
  double *v60;
  uint64_t v61;
  double *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  int v67;
  double *v68;

  v4 = *(_DWORD *)(a1 + 68);
  PCGenMatrix<double>::PCGenMatrix(&v63, v4, v4, 0, 0.0);
  if (v4 >= 1)
  {
    v5 = 0;
    while (1)
    {
      v6 = (double *)PCGenVector<double>::operator()(a1 + 88, v5);
      v7 = *v6;
      if (fabs(*v6) >= *(double *)(a1 + 216))
        break;
LABEL_26:
      v5 = (v5 + 1);
      if ((_DWORD)v5 == v4)
        goto LABEL_27;
    }
    PCGenMatrix<double>::col(a1 + 56, v5, (uint64_t)&v56);
    v8 = v57;
    PCGenBlockRef<double>::PCGenBlockRef(&v60, v57);
    v61 = v8 | 0x100000000;
    v10 = v59;
    v9 = v60;
    v62 = v60;
    v11 = v57;
    if (v58 == 1)
    {
      if (v57 >= 1)
      {
        do
        {
          v12 = *v10++;
          *v9++ = v12 / v7;
          --v11;
        }
        while (v11);
      }
    }
    else if (v57 >= 1)
    {
      v13 = 8 * v58;
      do
      {
        *v9++ = *v10 / v7;
        v10 = (double *)((char *)v10 + v13);
        --v11;
      }
      while (v11);
    }
    PCGenMatrix<double>::col((uint64_t)&v63, v5, (uint64_t)v54);
    v54[1] = v61;
    v14 = v60;
    v15 = v54[0];
    if ((double *)v54[0] == v60)
    {
      v55 = v62;
      if (!v60)
      {
LABEL_20:
        v18 = v60;
        if (v60)
        {
          v19 = *((_DWORD *)v60 - 1) - 1;
          *((_DWORD *)v60 - 1) = v19;
          if (!v19)
          {
            MEMORY[0x1B5E2914C](v18 - 1, 0x1000C8077774924);
            v60 = 0;
          }
        }
        v20 = v56;
        if (v56)
        {
          v21 = *(_DWORD *)(v56 - 4) - 1;
          *(_DWORD *)(v56 - 4) = v21;
          if (!v21)
            MEMORY[0x1B5E2914C](v20 - 8, 0x1000C8077774924);
        }
        goto LABEL_26;
      }
    }
    else
    {
      if (v54[0])
      {
        v16 = *(_DWORD *)(v54[0] - 4) - 1;
        *(_DWORD *)(v54[0] - 4) = v16;
        if (!v16)
          MEMORY[0x1B5E2914C](v15 - 8, 0x1000C8077774924);
      }
      v54[0] = v14;
      if (!v14)
        goto LABEL_20;
      ++*((_DWORD *)v14 - 1);
      v55 = v62;
    }
    v17 = *((_DWORD *)v14 - 1) - 1;
    *((_DWORD *)v14 - 1) = v17;
    if (!v17)
      MEMORY[0x1B5E2914C](v14 - 1, 0x1000C8077774924);
    goto LABEL_20;
  }
LABEL_27:
  v22 = *(_QWORD *)(a1 + 24);
  if (v22)
  {
    v23 = *(_DWORD *)(v22 - 4);
    *(_DWORD *)(v22 - 4) = v23 + 1;
    v24 = *(_DWORD *)(a1 + 32);
    v26 = *(_DWORD *)(a1 + 40);
    v25 = *(_DWORD *)(a1 + 44);
    v27 = *(double **)(a1 + 48);
    *(_DWORD *)(v22 - 4) = v23 + 2;
  }
  else
  {
    v24 = *(_DWORD *)(a1 + 32);
    v26 = *(_DWORD *)(a1 + 40);
    v25 = *(_DWORD *)(a1 + 44);
    v27 = *(double **)(a1 + 48);
  }
  v28 = v64;
  result = (uint64_t)PCGenBlockRef<double>::PCGenBlockRef(a2, v64 * v24);
  *((_DWORD *)a2 + 2) = v28;
  *((_DWORD *)a2 + 3) = v24;
  *((_DWORD *)a2 + 4) = 1;
  *((_DWORD *)a2 + 5) = v28;
  v30 = *a2;
  a2[3] = *a2;
  v31 = v64;
  if (v64 >= 1)
  {
    v32 = 0;
    v33 = v68;
    v34 = v67;
    v35 = v65;
    v36 = 8 * v25;
    result = 8 * v66;
    v37 = 8 * v67;
    v38 = 8 * v65;
    while (v24 < 1)
    {
LABEL_55:
      ++v32;
      v33 = (double *)((char *)v33 + result);
      if (v32 == v31)
        goto LABEL_56;
    }
    v39 = 0;
    v40 = v27;
    while (1)
    {
      if (v34 == 1)
      {
        if (v25 == 1)
        {
          if ((_DWORD)v35)
          {
            v41 = 0;
            v42 = 0.0;
            do
            {
              v42 = v42 + v33[v41] * v40[v41];
              ++v41;
            }
            while ((_DWORD)v35 != (_DWORD)v41);
            goto LABEL_54;
          }
        }
        else if ((int)v35 >= 1)
        {
          v45 = 0;
          v42 = 0.0;
          v46 = v40;
          do
          {
            v42 = v42 + v33[v45 / 8] * *v46;
            v45 += 8;
            v46 = (double *)((char *)v46 + v36);
          }
          while (v38 != v45);
          goto LABEL_54;
        }
      }
      else if (v25 == 1)
      {
        if ((int)v35 >= 1)
        {
          v43 = 0;
          v42 = 0.0;
          v44 = v33;
          do
          {
            v42 = v42 + *v44 * v40[v43 / 8];
            v43 += 8;
            v44 = (double *)((char *)v44 + v37);
          }
          while (v38 != v43);
          goto LABEL_54;
        }
      }
      else if ((int)v35 >= 1)
      {
        v42 = 0.0;
        v47 = v33;
        v48 = v40;
        v49 = v35;
        do
        {
          v42 = v42 + *v47 * *v48;
          v48 = (double *)((char *)v48 + v36);
          v47 = (double *)((char *)v47 + v37);
          --v49;
        }
        while (v49);
        goto LABEL_54;
      }
      v42 = 0.0;
LABEL_54:
      *(double *)(v30 + 8 * (v32 + v39 * v28)) = v42;
      ++v39;
      v40 += v26;
      if (v39 == v24)
        goto LABEL_55;
    }
  }
LABEL_56:
  if (v22)
  {
    v50 = *(_DWORD *)(v22 - 4) - 1;
    *(_DWORD *)(v22 - 4) = v50;
    if (!v50)
    {
      result = MEMORY[0x1B5E2914C](v22 - 8, 0x1000C8077774924);
      v50 = *(_DWORD *)(v22 - 4);
    }
    v51 = v50 - 1;
    *(_DWORD *)(v22 - 4) = v51;
    if (!v51)
      result = MEMORY[0x1B5E2914C](v22 - 8, 0x1000C8077774924);
  }
  v52 = v63;
  if (v63)
  {
    v53 = *(_DWORD *)(v63 - 4) - 1;
    *(_DWORD *)(v63 - 4) = v53;
    if (!v53)
      return MEMORY[0x1B5E2914C](v52 - 8, 0x1000C8077774924);
  }
  return result;
}

void sub_1B2CDFAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  _Unwind_Exception *v20;
  uint64_t v21;
  int v22;

  v20 = exception_object;
  if (v19)
  {
    PCSvd<double>::inverse(v19, (uint64_t)exception_object, a2, (uint64_t)&a16);
    v20 = a16;
  }
  v21 = a19;
  if (a19)
  {
    v22 = *(_DWORD *)(a19 - 4) - 1;
    *(_DWORD *)(a19 - 4) = v22;
    if (!v22)
      MEMORY[0x1B5E2914C](v21 - 8, 0x1000C8077774924);
  }
  _Unwind_Resume(v20);
}

_QWORD *PCSvd<double>::~PCSvd(_QWORD *a1)
{
  PCGenBlockRef<double>::deref(a1 + 24);
  PCGenBlockRef<double>::deref(a1 + 20);
  PCGenBlockRef<double>::deref(a1 + 17);
  PCGenBlockRef<double>::deref(a1 + 14);
  PCGenBlockRef<double>::deref(a1 + 11);
  PCGenBlockRef<double>::deref(a1 + 7);
  PCGenBlockRef<double>::deref(a1 + 3);
  PCGenBlockRef<double>::deref(a1);
  return a1;
}

uint64_t PCGenMatrix<double>::col@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  v3 = a2;
  result = PCGenMatrix<double>::checkColIndex(a1, a2);
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 20);
  v11 = *(_QWORD *)a1;
  *(_QWORD *)a3 = *(_QWORD *)a1;
  if (v11)
    ++*(_DWORD *)(v11 - 4);
  *(_DWORD *)(a3 + 8) = v7;
  *(_DWORD *)(a3 + 12) = v9;
  *(_QWORD *)(a3 + 16) = v8 + 8 * v10 * v3;
  return result;
}

_QWORD *PCGenMatrix<double>::PCGenMatrix(_QWORD *a1, int a2, int a3, int a4, double a5)
{
  int v9;
  _QWORD *result;
  int v11;
  int v12;
  double *v13;
  BOOL v14;
  unsigned int v15;

  v9 = a3 * a2;
  result = PCGenBlockRef<double>::PCGenBlockRef(a1, a3 * a2);
  *((_DWORD *)result + 2) = a2;
  *((_DWORD *)result + 3) = a3;
  if (a4)
    v11 = a3;
  else
    v11 = 1;
  if (a4)
    v12 = 1;
  else
    v12 = a2;
  *((_DWORD *)result + 4) = v11;
  *((_DWORD *)result + 5) = v12;
  v13 = (double *)*result;
  result[3] = *result;
  if (v13)
    v14 = v9 < 1;
  else
    v14 = 1;
  if (!v14)
  {
    v15 = v9 + 1;
    do
    {
      *v13++ = a5;
      --v15;
    }
    while (v15 > 1);
  }
  return result;
}

void PCMatrix44Tmpl<double>::format(uint64_t a1@<X0>, int a2@<W1>, PCSharedCount *a3@<X8>)
{
  PCString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  PCString *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  int var0_high;
  PCString *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  PCString *v29;
  uint64_t v30;
  int v31;
  PCString *v32;
  uint64_t i;
  int v34;
  PCString *v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  void ***v41;
  PCString v43;
  PCSharedCount v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  void *__p;
  char *v54;
  char *v55;
  PCString v56;
  PCSharedCount v57;

  __p = 0;
  v54 = 0;
  v55 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  std::vector<std::vector<PCString>>::resize(&v47, 4uLL);
  v6 = 0;
  v46 = 0;
  v45 = 0;
  do
  {
    v7 = 0;
    v8 = (uint64_t *)(v47 + 24 * v6);
    do
    {
      PCString::format(v5, *(double *)(a1 + v7), (PCString *)&v57);
      std::vector<PCString>::push_back[abi:ne180100](v8, (PCString *)&v57);
      PCString::~PCString((PCString *)&v57);
      v7 += 32;
    }
    while (v7 != 128);
    PCMatrix44_computeWidth((uint64_t)v8, (signed int *)&v46 + 1, (int *)&v46, &v45);
    v9 = (PCString *)v54;
    if (v54 >= v55)
    {
      v5 = (PCString *)__p;
      v11 = (v54 - (_BYTE *)__p) >> 2;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 62)
        goto LABEL_57;
      v13 = v55 - (_BYTE *)__p;
      if ((v55 - (_BYTE *)__p) >> 1 > v12)
        v12 = v13 >> 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v55, v14);
        v5 = (PCString *)__p;
        v9 = (PCString *)v54;
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[4 * v11];
      *(_DWORD *)v16 = v46;
      v10 = v16 + 4;
      while (v9 != v5)
      {
        var0_high = HIDWORD(v9[-1].var0);
        v9 = (PCString *)((char *)v9 - 4);
        *((_DWORD *)v16 - 1) = var0_high;
        v16 -= 4;
      }
      __p = v16;
      v54 = v10;
      v55 = &v15[4 * v14];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_DWORD *)v54 = v46;
      v10 = (char *)&v9->var0 + 4;
    }
    v54 = v10;
    v18 = (PCString *)v51;
    if (v51 >= v52)
    {
      v5 = (PCString *)v50;
      v20 = (v51 - (_BYTE *)v50) >> 2;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 62)
LABEL_57:
        std::vector<double>::__throw_length_error[abi:ne180100]();
      v22 = v52 - (_BYTE *)v50;
      if ((v52 - (_BYTE *)v50) >> 1 > v21)
        v21 = v22 >> 1;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v23 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&v52, v23);
        v5 = (PCString *)v50;
        v18 = (PCString *)v51;
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[4 * v20];
      *(_DWORD *)v25 = v45;
      v19 = v25 + 4;
      while (v18 != v5)
      {
        v26 = HIDWORD(v18[-1].var0);
        v18 = (PCString *)((char *)v18 - 4);
        *((_DWORD *)v25 - 1) = v26;
        v25 -= 4;
      }
      v50 = v25;
      v51 = v19;
      v52 = &v24[4 * v23];
      if (v5)
        operator delete(v5);
    }
    else
    {
      *(_DWORD *)v51 = v45;
      v19 = (char *)&v18->var0 + 4;
    }
    v51 = v19;
    ++v6;
    a1 += 8;
  }
  while (v6 != 4);
  v28 = v47;
  v27 = v48;
  PCSharedCount::PCSharedCount(a3);
  PCSharedCount::PCSharedCount(&v57);
  PCSharedCount::PCSharedCount(&v44);
  if (a2 >= 1)
  {
    do
    {
      PCString::PCString(&v56, (const PCString *)&v44);
      PCString::append(v29, "  ");
      PCString::set((PCString *)&v44, &v56);
      PCString::~PCString(&v56);
      --a2;
    }
    while (a2);
  }
  v30 = 0;
  v31 = -1431655765 * ((v27 - v28) >> 3);
  do
  {
    PCString::PCString(&v56, (const PCString *)&v44);
    PCString::append(v32, "[");
    PCString::set((PCString *)&v57, &v56);
    PCString::~PCString(&v56);
    if (v31 >= 1)
    {
      for (i = 0; i != v31; ++i)
      {
        PCString::PCString(&v43, (const PCString *)(*(_QWORD *)(v47 + 24 * i) + 8 * v30));
        HIDWORD(v46) = PCString::size(&v43);
        PCURL::PCURL((PCURL *)&v56, CFSTR("."));
        v34 = PCString::find(&v43, &v56);
        PCString::~PCString(&v56);
        if (v34 >= 0)
          v36 = v34;
        else
          v36 = HIDWORD(v46);
        v37 = HIDWORD(v46) - v36;
        v45 = HIDWORD(v46) - v36;
        LODWORD(v46) = v36;
        v38 = *((_DWORD *)__p + i);
        v39 = *((_DWORD *)v50 + i);
        LODWORD(v46) = v36 + 1;
        if (v36 < v38)
        {
          do
          {
            PCString::PCString(&v56, " ");
            PCString::insert(&v43, 0, &v56);
            PCString::~PCString(&v56);
            v40 = v46;
            LODWORD(v46) = v46 + 1;
          }
          while (v40 < v38);
          goto LABEL_47;
        }
        while (1)
        {
          v45 = v37 + 1;
          if (v37 >= v39)
            break;
          PCString::PCString(&v56, " ");
          PCString::append(&v43, &v56);
          PCString::~PCString(&v56);
LABEL_47:
          v37 = v45;
        }
        PCString::PCString(v35, " ");
        PCString::append((PCString *)&v57, &v56);
        PCString::~PCString(&v56);
        PCString::append((PCString *)&v57, &v43);
        PCString::~PCString(&v43);
      }
    }
    PCString::append((PCString *)&v57, " ]\n");
    PCString::append((PCString *)a3, (const PCString *)&v57);
    ++v30;
  }
  while (v30 != 4);
  PCString::~PCString((PCString *)&v44);
  PCString::~PCString((PCString *)&v57);
  v57.var0 = (PC_Sp_counted_base *)&v47;
  std::vector<std::vector<PCString>>::__destroy_vector::operator()[abi:ne180100](v41);
  if (v50)
  {
    v51 = (char *)v50;
    operator delete(v50);
  }
  if (__p)
  {
    v54 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B2CE0160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCString *a9, PCString a10, PCString a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  uint64_t v21;

  PCString::~PCString((PCString *)(v21 - 88));
  PCString::~PCString(a9);
  *(_QWORD *)(v21 - 88) = &a14;
  std::vector<std::vector<PCString>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v21 - 88));
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::vector<PCString>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<PCString>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void PCMatrix44_computeWidth(uint64_t a1, signed int *a2, int *a3, int *a4)
{
  PCString *v7;
  unint64_t v8;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  PCString *v15;
  signed int v16;
  int v17;
  int v18;
  int v19;
  PCString v20;

  v7 = *(PCString **)a1;
  v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if ((v8 >> 3))
  {
    v10 = PCString::size(*(PCString **)a1);
    PCURL::PCURL((PCURL *)&v20, CFSTR("."));
    v11 = PCString::find(v7, &v20);
    PCString::~PCString(&v20);
    *a2 = v10;
    if (v11 >= 0)
      v12 = v11;
    else
      v12 = v10;
    *a3 = v12;
    *a4 = v10 - v12;
    if ((int)(v8 >> 3) >= 2)
    {
      v13 = (v8 >> 3) - 1;
      v14 = 8;
      do
      {
        v15 = (PCString *)(*(_QWORD *)a1 + v14);
        v16 = PCString::size(v15);
        PCURL::PCURL((PCURL *)&v20, CFSTR("."));
        v17 = PCString::find(v15, &v20);
        PCString::~PCString(&v20);
        if (v17 >= 0)
          v18 = v17;
        else
          v18 = v16;
        if (*a2 < v16)
          *a2 = v16;
        if (*a3 < v18)
          *a3 = v18;
        v19 = v16 - v18;
        if (*a4 < v19)
          *a4 = v19;
        v14 += 8;
        --v13;
      }
      while (v13);
    }
  }
  else
  {
    *a4 = 0;
    *a3 = 0;
    *a2 = 0;
  }
}

void sub_1B2CE0434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<PCString>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<PCString>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<PCString>>::~__split_buffer(&v15);
  }
}

void sub_1B2CE059C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<PCString>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<PCString>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<PCString>>,std::reverse_iterator<std::vector<PCString>*>,std::reverse_iterator<std::vector<PCString>*>,std::reverse_iterator<std::vector<PCString>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<PCString>>,std::reverse_iterator<std::vector<PCString>*>,std::reverse_iterator<std::vector<PCString>*>,std::reverse_iterator<std::vector<PCString>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PCString>>,std::reverse_iterator<std::vector<PCString>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PCString>>,std::reverse_iterator<std::vector<PCString>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PCString>>,std::reverse_iterator<std::vector<PCString>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<PCString>>,std::reverse_iterator<std::vector<PCString>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<PCString>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<PCString>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<PCString>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<PCString>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<PCString>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t PCSvd<double>::inverse(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  int v4;
  int v5;

  v4 = *(_DWORD *)(result - 4) - 1;
  *(_DWORD *)(result - 4) = v4;
  if (!v4)
    OUTLINED_FUNCTION_1();
  v5 = v4 - 1;
  *(_DWORD *)(result - 4) = v5;
  if (!v5)
    OUTLINED_FUNCTION_1();
  *(_QWORD *)a4 = a2;
  *(_DWORD *)(a4 + 8) = a3;
  return result;
}

uint64_t LiTextureStoreTokenImpl::LiTextureStoreTokenImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  unint64_t v8;

  *(_DWORD *)a1 = 0;
  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  v6 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v4 = *v6;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 40) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return a1;
}

void sub_1B2CE0910(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy(v3, *(_QWORD **)(v1 + 32));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v2);
  PCSpinLock::~PCSpinLock((PCSpinLock *)v1);
  _Unwind_Resume(a1);
}

void LiTextureStoreTokenImpl::redeem(os_unfair_lock_s *this@<X0>, ProGL::GL *a2@<X1>, PCWorkingColorVector *a3@<X8>)
{
  int VirtualScreen;
  char *v7;
  uint64_t *v8;
  int v9;
  BOOL v10;
  char **v11;
  uint64_t **v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  os_unfair_lock_t lock;

  ProGL::GL::getPGLContextHandle(a2, &v22);
  VirtualScreen = ProGL::ContextHandle::getVirtualScreen((ProGL::ContextHandle *)&v22);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)&v22);
  PCWorkingColorVector::PCWorkingColorVector(a3);
  lock = this;
  PCSpinLock::lock(this);
  v7 = *(char **)&this[8]._os_unfair_lock_opaque;
  if (!v7)
    goto LABEL_11;
  v8 = (uint64_t *)&this[8];
  do
  {
    v9 = *((_DWORD *)v7 + 8);
    v10 = v9 < VirtualScreen;
    if (v9 >= VirtualScreen)
      v11 = (char **)v7;
    else
      v11 = (char **)(v7 + 8);
    if (!v10)
      v8 = (uint64_t *)v7;
    v7 = *v11;
  }
  while (*v11);
  if (v8 != (uint64_t *)&this[8] && VirtualScreen >= *((_DWORD *)v8 + 8))
  {
    std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](a3, v8 + 5);
  }
  else
  {
LABEL_11:
    (*(void (**)(__int128 *__return_ptr, _QWORD, ProGL::GL *))(**(_QWORD **)&this[2]._os_unfair_lock_opaque
                                                                        + 24))(&v22, *(_QWORD *)&this[2]._os_unfair_lock_opaque, a2);
    v12 = (uint64_t **)&this[6];
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a3, &v22);
    v13 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1))
    {
      v14 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    LODWORD(v22) = VirtualScreen;
    v16 = (std::__shared_weak_count *)*((_QWORD *)a3 + 1);
    *((_QWORD *)&v22 + 1) = *(_QWORD *)a3;
    v23 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    std::__tree<std::__value_type<int,ProGL::TextureHandle>,std::__map_value_compare<int,std::__value_type<int,ProGL::TextureHandle>,std::less<int>,true>,std::allocator<std::__value_type<int,ProGL::TextureHandle>>>::__emplace_unique_key_args<int,std::pair<int const,ProGL::TextureHandle>>(v12, (int *)&v22, (uint64_t)&v22);
    v19 = v23;
    if (v23)
    {
      v20 = (unint64_t *)&v23->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
  }
  if (lock)
    PCSpinLock::unlock(lock);
}

void sub_1B2CE0ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v5);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

uint64_t *LiTextureStoreImpl::findTokenImpl@<X0>(LiTextureStoreImpl *this@<X0>, const PCHash128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;

  v5 = (uint64_t **)((char *)this + 16);
  result = std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)this + 16, a2);
  if ((uint64_t *)((char *)this + 24) == result)
    goto LABEL_6;
  v7 = result;
  *a3 = 0;
  a3[1] = 0;
  v8 = (std::__shared_weak_count *)result[7];
  if (!v8
    || (result = (uint64_t *)std::__shared_weak_count::lock(v8), (a3[1] = (uint64_t)result) == 0)
    || (v9 = v7[6], (*a3 = v9) == 0))
  {
    std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::erase(v5, v7);
    result = (uint64_t *)std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)a3);
LABEL_6:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void sub_1B2CE0BA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void LiTextureStoreImpl::addTokenImpl(uint64_t a1, __int128 *a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v7 = *a2;
  v8 = v4;
  v9 = v3;
  std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,std::weak_ptr<LiTextureStoreTokenImpl>>>((uint64_t **)(a1 + 16), (const PCHash128 *)&v7, (uint64_t)&v7);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

void sub_1B2CE0C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  _Unwind_Resume(exception_object);
}

void LiTextureStore::getToken(std::__shared_weak_count **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned __int8 v5;
  LiTextureStoreImpl *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  os_unfair_lock_t v33;

  {
    v27 = operator new();
    *(_QWORD *)(v27 + 32) = 0;
    *(_OWORD *)v27 = 0u;
    *(_OWORD *)(v27 + 16) = 0u;
    PCSingleton::PCSingleton((PCSingleton *)v27, 0);
    *(_QWORD *)v27 = &unk_1E6569278;
    *(_DWORD *)(v27 + 8) = 0;
    *(_QWORD *)(v27 + 32) = 0;
    *(_QWORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 16) = v27 + 24;
    getTextureStoreInstance(void)::instance = v27;
  }
  v6 = (LiTextureStoreImpl *)getTextureStoreInstance(void)::instance;
  v33 = (os_unfair_lock_t)(getTextureStoreInstance(void)::instance + 8);
  PCSpinLock::lock((os_unfair_lock_t)(getTextureStoreInstance(void)::instance + 8));
  v32 = *(_OWORD *)LiTextureFactory::getKey((LiTextureFactory *)this);
  LiTextureStoreImpl::findTokenImpl(v6, (const PCHash128 *)&v32, (uint64_t *)&v31);
  v7 = v31;
  if (!(_QWORD)v31)
  {
    v8 = this[1];
    v28 = *this;
    v29 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    std::allocate_shared[abi:ne180100]<LiTextureStoreTokenImpl,std::allocator<LiTextureStoreTokenImpl>,std::shared_ptr<LiTextureFactoryImpl>,void>((uint64_t *)&v28, &v30);
    v11 = v30;
    v30 = 0uLL;
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    v31 = v11;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
    if (*((_QWORD *)&v30 + 1))
    {
      v16 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v29;
    if (v29)
    {
      v19 = (unint64_t *)&v29->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    LiTextureStoreImpl::addTokenImpl((uint64_t)v6, &v32, (uint64_t *)&v31);
    v7 = v31;
  }
  v21 = *((_QWORD *)&v31 + 1);
  *a2 = v7;
  a2[1] = v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    if (*((_QWORD *)&v31 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  if (v33)
    PCSpinLock::unlock(v33);
}

void sub_1B2CE0E80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40C3D8C859);
  _Unwind_Resume(a1);
}

void *LiTextureFactory::getKey(LiTextureFactory *this)
{
  unsigned __int8 v2;

  if (*(_QWORD *)this)
    return (void *)(*(_QWORD *)this + 8);
  if ((v2 & 1) == 0)
  {
    {
      PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&LiTextureFactory::getKey(void)const::defaultKey);
    }
  }
  return &LiTextureFactory::getKey(void)const::defaultKey;
}

void sub_1B2CE0F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void LiTextureStoreToken::redeem(os_unfair_lock_s **this@<X0>, ProGL::GL *a2@<X1>, PCWorkingColorVector *a3@<X8>)
{
  os_unfair_lock_s *v3;

  v3 = *this;
  if (v3)
    LiTextureStoreTokenImpl::redeem(v3, a2, a3);
  else
    PCWorkingColorVector::PCWorkingColorVector(a3);
}

void getSimpleTextureHash(uint64_t a1)
{
  uint64_t v1;
  PCColorSpaceHandle *v2;
  PCColorSpaceHandle *v3;
  int v4;
  int v5;
  const __CFURL **v6;
  _OWORD *v7;
  _OWORD *v8;
  PCString v9;
  int8x8_t v10[521];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = (const __CFURL **)v1;
  v8 = v7;
  v10[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v10);
  PCHashWriteStream::writeValue(v10, CFSTR("simple"));
  PCURL::getAsFileSystemString(v6, &v9);
  PCHashWriteStream::writeValue(v10, &v9);
  PCString::~PCString(&v9);
  PCHashWriteStream::writeValue(v10, v5);
  if (v3)
  {
    PCColorSpaceHandle::getMD5(v3, (PCWorkingColorVector *)&v9);
    PCHashWriteStream::writeValue(v10, (const PCHash128 *)&v9);
  }
  *v8 = *(_OWORD *)PCHashWriteStream::getHash(v10)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v10);
}

void sub_1B2CE1084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, char a12)
{
  PCString::~PCString(&a10);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a12);
  _Unwind_Resume(a1);
}

LoadLockCache *LiAsyncBumpBitmapCreator::operator()@<X0>(const PCHash128 *a1@<X0>, _QWORD *a2@<X8>)
{
  LoadLockCache *result;
  PCMutex *v5;
  OZFactory *var1;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  const PCString *v12;
  __int128 v13;
  OZChannelBase var60;

  result = (LoadLockCache *)LiCachingDelegateGetBitmap(a1, a2);
  if (!*a2)
  {
    v5 = (PCMutex *)LoadLockCache::instance(result);
    LiLockCache<PCHash128,PCMutex>::getLock(v5, a1, (uint64_t)&var60.var4);
    LiCachingDelegateGetBitmap(a1, &var60);
    std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&var60);
    var1 = var60.var1;
    if (var60.var1)
    {
      v7 = (unint64_t *)((char *)var60.var1 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        (*(void (**)(OZFactory *))(*(_QWORD *)var1 + 16))(var1);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)var1);
      }
    }
    if (!*a2)
    {
      PCTimer::PCTimer((PCTimer *)&var60);
      PCTimer::start((PCTimer *)&var60);
      v13 = 0uLL;
      std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)a2, &v13);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
      if (*((_QWORD *)&v13 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      PCTimer::stop((PCTimer *)&var60);
      PCTimer::getSeconds((PCTimer *)&var60);
      LiCachingDelegateAddBitmap((uint64_t)a2, (uint64_t)a1);
      OZChannelBase::setRangeName(&var60, v12);
    }
    return (LoadLockCache *)LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry((uint64_t)&var60.var4);
  }
  return result;
}

void sub_1B2CE11E0(_Unwind_Exception *a1, uint64_t a2, OZChannelBase *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;

  LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry((uint64_t)&a15);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void LiLockCache<PCHash128,PCMutex>::getLock(PCMutex *a1@<X0>, const PCHash128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **v6;
  _opaque_pthread_mutex_t *v7;
  uint64_t *p_sig;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  PCMutex *v29;
  char v30;
  __int128 v31;

  v31 = 0uLL;
  v29 = a1;
  PCMutex::lock(a1);
  v30 = 1;
  v6 = (uint64_t **)&a1[1];
  v7 = (_opaque_pthread_mutex_t *)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::find<PCHash128>((uint64_t)&a1[1], a2);
  p_sig = &v7->__sig;
  if (&a1[1]._Mutex != v7)
  {
    v9 = *(std::__shared_weak_count **)&v7->__opaque[48];
    if (v9 && (v9 = std::__shared_weak_count::lock(v9)) != 0)
      v10 = p_sig[6];
    else
      v10 = 0;
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    *(_QWORD *)&v31 = v10;
    *((_QWORD *)&v31 + 1) = v9;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = v31;
    }
    if (!v10)
      std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::erase(v6, p_sig);
  }
  if (!(_QWORD)v31)
  {
    _ZNSt3__115allocate_sharedB8ne180100I7PCMutexNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v27);
    v14 = v27;
    v27 = 0uLL;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    v31 = v14;
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v31;
    if (*((_QWORD *)&v31 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v27 = *(_OWORD *)a2;
    v28 = v21;
    std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,std::weak_ptr<LiTextureStoreTokenImpl>>>(v6, (const PCHash128 *)&v27, (uint64_t)&v27);
    if (*((_QWORD *)&v28 + 1))
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v28 + 1));
  }
  if (v29 && v30)
    PCMutex::unlock(v29);
  LiLockCache<PCHash128,PCMutex>::LockSentry::LockSentry(a3, (PCMutex **)&v31);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1B2CE1420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, char a15)
{
  if (a12)
    std::__shared_weak_count::__release_weak(a12);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a13);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t LiCreateBumpBitmapAsync@<X0>(uint64_t *a1@<X0>, unint64_t **a2@<X1>, __int128 *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  v4 = *a1;
  v6 = *((_DWORD *)a1 + 2);
  v5 = *((_DWORD *)a1 + 3);
  v7 = *a2;
  if (*a2)
  {
    v8 = v7 + 1;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    *((_QWORD *)&v16 + 1) = __PAIR64__(v5, v6);
    v17 = (uint64_t)v7;
    do
      v10 = __ldxr(v8);
    while (__stxr(v10 + 1, v8));
  }
  else
  {
    DWORD2(v16) = *((_DWORD *)a1 + 2);
    HIDWORD(v16) = v5;
    v17 = 0;
  }
  *(_QWORD *)&v16 = v4;
  v18 = *a3;
  std::async[abi:ne180100]<LiAsyncBumpBitmapCreator>(3, &v16, a4);
  result = v17;
  if (v17)
  {
    v12 = (unint64_t *)(v17 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  if (v7)
  {
    v14 = v7 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      return (*(uint64_t (**)(unint64_t *))(*v7 + 16))(v7);
  }
  return result;
}

void sub_1B2CE153C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unint64_t *v12;
  unint64_t *v14;
  unint64_t v15;

  if (a12)
    LiCreateBumpBitmapAsync(a12);
  if (v12)
  {
    v14 = v12 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
      (*(void (**)(unint64_t *))(*v12 + 16))(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BumpTextureImpl::BumpTextureImpl(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const __CFURL **v4;
  const __CFURL **v5;
  uint64_t v6;
  __int128 v8;
  PCString v9;
  int8x8_t v10[521];

  v1 = MEMORY[0x1E0C80A78](a1);
  v3 = v2;
  v5 = v4;
  v6 = v1;
  v10[520] = *(int8x8_t *)MEMORY[0x1E0C80C00];
  PCHashWriteStream::PCHashWriteStream((PCHashWriteStream *)v10);
  PCHashWriteStream::writeValue(v10, CFSTR("bump"));
  PCURL::getAsFileSystemString(v5, &v9);
  PCHashWriteStream::writeValue(v10, &v9);
  PCString::~PCString(&v9);
  PCHashWriteStream::writeValue(v10, *(_DWORD *)v3);
  PCHashWriteStream::writeValue(v10, *(_BYTE *)(v3 + 4));
  PCHashWriteStream::writeValue(v10, *(_BYTE *)(v3 + 5));
  PCHashWriteStream::writeValue(v10, *(float *)(v3 + 8));
  v8 = *(_OWORD *)PCHashWriteStream::getHash(v10)->i8;
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)v10);
  *(_OWORD *)(v6 + 8) = v8;
  *(_QWORD *)v6 = &off_1E6569220;
  PCURL::PCURL((PCURL *)(v6 + 24), (const PCURL *)v5);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)v3;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  return v6;
}

void sub_1B2CE16A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11, char a12)
{
  PCString::~PCString(&a11);
  PCHashWriteStream::~PCHashWriteStream((PCHashWriteStream *)&a12);
  _Unwind_Resume(a1);
}

void BumpTextureImpl::~BumpTextureImpl(BumpTextureImpl *this)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;

  *(_QWORD *)this = &off_1E6569220;
  v2 = (unint64_t *)*((_QWORD *)this + 7);
  if (v2)
  {
    v3 = v2 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v2 + 16))(v2);
  }
  v5 = (unint64_t *)*((_QWORD *)this + 6);
  if (v5)
  {
    v6 = v5 + 1;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
      (*(void (**)(unint64_t *))(*v5 + 16))(v5);
  }
  PCURL::~PCURL((BumpTextureImpl *)((char *)this + 24));
}

{
  BumpTextureImpl::~BumpTextureImpl(this);
  JUMPOUT(0x1B5E29170);
}

unint64_t *BumpTextureImpl::start(BumpTextureImpl *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *result;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  CGColorSpace *v29;

  if (*((_BYTE *)this + 37))
  {
    PCColorSpaceCache::sRGB(&v29);
    PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v29);
    getSimpleTextureHash((uint64_t)this + 24);
    LiLoadBitmapAsync((BumpTextureImpl *)((char *)this + 24), &v28, 11, &v29, 1, &v27);
    v2 = v27;
    v27 = 0;
    v3 = (unint64_t *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v2;
    if (v3)
    {
      v4 = v3 + 1;
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
        (*(void (**)(unint64_t *))(*v3 + 16))(v3);
      v6 = v27;
      if (v27)
      {
        v7 = (unint64_t *)(v27 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        goto LABEL_19;
      }
    }
  }
  else
  {
    v29 = 0;
    PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)&v29);
    getSimpleTextureHash((uint64_t)this + 24);
    LiLoadBitmapAsync((BumpTextureImpl *)((char *)this + 24), &v28, 13, &v29, 1, &v27);
    v9 = v27;
    v27 = 0;
    v10 = (unint64_t *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v9;
    if (v10)
    {
      v11 = v10 + 1;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
        (*(void (**)(unint64_t *))(*v10 + 16))(v10);
      v6 = v27;
      if (v27)
      {
        v13 = (unint64_t *)(v27 + 8);
        do
          v8 = __ldaxr(v13);
        while (__stlxr(v8 - 1, v13));
LABEL_19:
        if (!v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v29);
  v26 = *(_OWORD *)((char *)this + 8);
  v14 = (unint64_t *)*((_QWORD *)this + 6);
  v25 = v14;
  if (v14)
  {
    v15 = v14 + 1;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  LiCreateBumpBitmapAsync((uint64_t *)&v26, &v25, (__int128 *)this + 2, (uint64_t *)&v28);
  if (v14)
  {
    v17 = v14 + 1;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
      (*(void (**)(unint64_t *))(*v14 + 16))(v14);
  }
  v19 = v28;
  *(_QWORD *)&v28 = 0;
  result = (unint64_t *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v19;
  if (result)
  {
    v21 = result + 1;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
      (*(void (**)(unint64_t *))(*result + 16))(result);
    result = (unint64_t *)v28;
    if ((_QWORD)v28)
    {
      v23 = (unint64_t *)(v28 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
        return (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 16))(result);
    }
  }
  return result;
}

void sub_1B2CE19CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 - 24));
  _Unwind_Resume(a1);
}

void BumpTextureImpl::makeTexture(PCWorkingColorVector *a1@<X8>)
{
  PCWorkingColorVector::PCWorkingColorVector(a1);
}

void LiMakeBumpTextureFactory(_QWORD *a1@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  std::allocate_shared[abi:ne180100]<BumpTextureImpl,std::allocator<BumpTextureImpl>,PCURL const&,LiBumpTextureInfo const&,void>(&v11);
  v2 = v11;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    *a1 = v2;
    a1[1] = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *a1 = v11;
    a1[1] = 0;
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void LiTextureStoreImpl::~LiTextureStoreImpl(LiTextureStoreImpl *this)
{
  *(_QWORD *)this = &unk_1E6569278;
  std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 2);
  PCSingleton::~PCSingleton(this);
}

{
  *(_QWORD *)this = &unk_1E6569278;
  std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::destroy((uint64_t)this + 16, *((_QWORD **)this + 3));
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 2);
  PCSingleton::~PCSingleton(this);
  JUMPOUT(0x1B5E29170);
}

void std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;

  if (a2)
  {
    std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::destroy(a1, a2[1]);
    v4 = (std::__shared_weak_count *)a2[7];
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    operator delete(a2);
  }
}

uint64_t LiLockCache<PCHash128,PCMutex>::LockSentry::~LockSentry(uint64_t a1)
{
  PCMutex *v2;

  v2 = *(PCMutex **)(a1 + 16);
  if (v2 && *(_BYTE *)(a1 + 24))
  {
    PCMutex::unlock(v2);
    *(_BYTE *)(a1 + 24) = 0;
  }
  return std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a1);
}

uint64_t **std::__tree<std::__value_type<int,ProGL::TextureHandle>,std::__map_value_compare<int,std::__value_type<int,ProGL::TextureHandle>,std::less<int>,true>,std::allocator<std::__value_type<int,ProGL::TextureHandle>>>::__emplace_unique_key_args<int,std::pair<int const,ProGL::TextureHandle>>(uint64_t **a1, int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  int v9;
  int v10;
  char *v11;
  _QWORD v13[2];
  char v14;

  v6 = a1 + 1;
  v5 = a1[1];
  v7 = a1 + 1;
  v8 = a1 + 1;
  if (v5)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v10 = *((_DWORD *)v5 + 8);
        if (v9 >= v10)
          break;
        v5 = *v8;
        v7 = v8;
        if (!*v8)
          goto LABEL_9;
      }
      if (v10 >= v9)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v7 = v8 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v11 = (char *)operator new(0x38uLL);
    v13[1] = v6;
    *((_DWORD *)v11 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v11 + 40) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v14 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v8, v7, (uint64_t *)v11);
    v13[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,void *>>>>::reset[abi:ne180100]((uint64_t)v13, 0);
    return (uint64_t **)v11;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::erase(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v3;
  std::__shared_weak_count *v4;

  v3 = std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(a1, a2);
  v4 = (std::__shared_weak_count *)a2[7];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  operator delete(a2);
  return v3;
}

uint64_t *std::__tree<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,std::weak_ptr<LiTextureStoreTokenImpl>>>>::__emplace_unique_key_args<PCHash128,std::pair<PCHash128 const,std::weak_ptr<LiTextureStoreTokenImpl>>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 v8;
  uint64_t v10;

  v5 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v10, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x40uLL);
    v8 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    *((_OWORD *)v6 + 3) = v8;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v6);
  }
  return v6;
}

_QWORD *std::allocate_shared[abi:ne180100]<LiTextureStoreTokenImpl,std::allocator<LiTextureStoreTokenImpl>,std::shared_ptr<LiTextureFactoryImpl>,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<LiTextureStoreTokenImpl>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<LiTextureFactoryImpl>,std::allocator<LiTextureStoreTokenImpl>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1B2CE1DEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<LiTextureStoreTokenImpl>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<LiTextureFactoryImpl>,std::allocator<LiTextureStoreTokenImpl>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E65692B0;
  a1[1] = 0;
  LiTextureStoreTokenImpl::LiTextureStoreTokenImpl((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1B2CE1E38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LiTextureStoreTokenImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65692B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LiTextureStoreTokenImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65692B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

void std::__shared_ptr_emplace<LiTextureStoreTokenImpl>::__on_zero_shared(uint64_t a1)
{
  LiTextureStoreTokenImpl::~LiTextureStoreTokenImpl((LiTextureStoreTokenImpl *)(a1 + 24));
}

void LiTextureStoreTokenImpl::~LiTextureStoreTokenImpl(LiTextureStoreTokenImpl *this)
{
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  PCSpinLock::~PCSpinLock((PCSpinLock *)this);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100I7PCMutexNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  uint64_t result;

  v2 = (char *)operator new(0x60uLL);
  result = _ZNSt3__120__shared_ptr_emplaceI7PCMutexNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1B2CE1F08(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceI7PCMutexNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E6569300;
  *(_QWORD *)(a1 + 8) = 0;
  PCMutex::PCMutex((PCMutex *)(a1 + 24));
  return a1;
}

void sub_1B2CE1F54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<PCMutex>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6569300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PCMutex>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E6569300;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<PCMutex>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t LiLockCache<PCHash128,PCMutex>::LockSentry::LockSentry(uint64_t a1, PCMutex **a2)
{
  PCMutex *v3;
  unint64_t *p_Mutex;
  unint64_t v5;
  PCMutex *v6;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    p_Mutex = (unint64_t *)&v3->_Mutex;
    do
      v5 = __ldxr(p_Mutex);
    while (__stxr(v5 + 1, p_Mutex));
  }
  v6 = *a2;
  *(_QWORD *)(a1 + 16) = *a2;
  *(_BYTE *)(a1 + 24) = 0;
  PCMutex::lock(v6);
  *(_BYTE *)(a1 + 24) = 1;
  return a1;
}

void sub_1B2CE2018(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::async[abi:ne180100]<LiAsyncBumpBitmapCreator>@<X0>(uint64_t result@<X0>, __int128 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;

  if ((result & 1) != 0)
  {
    v4 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = 0;
    v11 = *(__int128 *)((char *)a2 + 24);
    v9 = *a2;
    v10 = v4;
    std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>((uint64_t)&v9, a3);
    result = v10;
    if (!v10)
      return result;
    v5 = (unint64_t *)(v10 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    goto LABEL_11;
  }
  if ((result & 2) == 0)
  {
    *a3 = 0;
    return result;
  }
  v7 = *((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  v11 = *(__int128 *)((char *)a2 + 24);
  v9 = *a2;
  v10 = v7;
  std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>((uint64_t)&v9, a3);
  result = v10;
  if (v10)
  {
    v8 = (unint64_t *)(v10 + 8);
    do
      v6 = __ldaxr(v8);
    while (__stlxr(v6 - 1, v8));
LABEL_11:
    if (!v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1B2CE2140(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::__make_async_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::thread v9;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 124) = 0u;
  *(_QWORD *)v4 = &off_1E6569350;
  *(_OWORD *)(v4 + 160) = *(_OWORD *)a1;
  *(_QWORD *)(v4 + 176) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a1 + 24);
  v8 = xmmword_1B35586F0;
  v7 = v4;
  std::thread::thread<void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*,void>(&v9.__t_, &v8, &v7);
  std::thread::detach(&v9);
  std::thread::~thread(&v9);
  *a2 = v4;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v4);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void sub_1B2CE2270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::thread a14)
{
  uint64_t v14;
  unint64_t *v15;
  unint64_t v17;

  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (!v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  _Unwind_Resume(exception_object);
}

void std::__make_deferred_assoc_state[abi:ne180100]<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t *)(v4 + 8);
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 850045863;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 1018212795;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)v4 = &off_1E65693B0;
  *(_OWORD *)(v4 + 160) = *(_OWORD *)a1;
  *(_QWORD *)(v4 + 176) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(v4 + 184) = *(_OWORD *)(a1 + 24);
  *(_DWORD *)(v4 + 136) = 8;
  *a2 = v4;
  std::__assoc_sub_state::__attach_future[abi:ne180100](v4);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
}

void sub_1B2CE2394(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v4;

  do
    v4 = __ldaxr(v2);
  while (__stlxr(v4 - 1, v2));
  if (!v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::~__async_assoc_state(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a1 = &off_1E6569350;
  v2 = *(unint64_t **)(a1 + 176);
  if (v2)
  {
    v3 = v2 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v2 + 16))(v2);
  }
  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a1 = &off_1E6569350;
  v2 = *(unint64_t **)(a1 + 176);
  if (v2)
  {
    v3 = v2 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v2 + 16))(v2);
  }
  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::__on_zero_shared(uint64_t a1)
{
  std::__assoc_sub_state::wait((std::__assoc_sub_state *)a1);
  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a1 + 144);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::__execute(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  LiAsyncBumpBitmapCreator::operator()((const PCHash128 *)(a1 + 160), &v5);
  std::__assoc_state<std::shared_ptr<PCBitmap>>::set_value<std::shared_ptr<PCBitmap>>(a1, (uint64_t)&v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B2CE2594(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11)
{
  std::__assoc_sub_state *v11;
  std::exception_ptr v13;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_begin_catch(a1);
  std::current_exception();
  v13.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v11, v13);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1B2CE2584);
}

void sub_1B2CE25D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__assoc_state<std::shared_ptr<PCBitmap>>::__on_zero_shared(_BYTE *a1)
{
  if ((a1[136] & 1) != 0)
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 144));
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

void std::__assoc_state<std::shared_ptr<PCBitmap>>::set_value<std::shared_ptr<PCBitmap>>(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  std::exception_ptr v6;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v6.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v6), v5))
  {
    std::__throw_future_error[abi:ne180100](2u);
  }
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 136) |= 5u;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
  std::mutex::unlock(v4);
}

void sub_1B2CE26B8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__throw_future_error[abi:ne180100](unsigned int a1)
{
  void *exception;
  const std::error_category *v3;

  exception = __cxa_allocate_exception(0x20uLL);
  v3 = std::future_category();
  MEMORY[0x1B5E28DD4](exception, a1, v3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E30], MEMORY[0x1E0DE4540]);
}

void sub_1B2CE2714(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::thread::thread<void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*,void>(pthread_t *a1, _OWORD *a2, _QWORD *a3)
{
  std::__thread_struct *v6;
  uint64_t v7;
  int v8;
  uint64_t *v9[2];

  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v7 = operator new();
  v9[0] = (uint64_t *)v7;
  v9[1] = 0;
  *(_QWORD *)v7 = v6;
  *(_OWORD *)(v7 + 8) = *a2;
  *(_QWORD *)(v7 + 24) = *a3;
  v8 = pthread_create(a1, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>, (void *)v7);
  if (v8)
  {
    std::__throw_system_error(v8, "thread constructor failed");
    __break(1u);
  }
  else
  {
    v9[0] = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>::reset[abi:ne180100](v9, 0);
  }
}

void sub_1B2CE27F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  void (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  const void **v7;

  v7 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v7;
  *v7 = 0;
  pthread_setspecific(v1->__key_, v2);
  v3 = (void (*)(_QWORD *))v7[1];
  v4 = (uint64_t)v7[2];
  v5 = (char *)v7[3] + (v4 >> 1);
  if ((v4 & 1) != 0)
    v3 = *(void (**)(_QWORD *))(*v5 + v3);
  v3(v5);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>::reset[abi:ne180100]((uint64_t **)&v7, 0);
  return 0;
}

void sub_1B2CE28A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::*)(void),std::__async_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>*>>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1B5E28F18]();
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void std::__assoc_sub_state::__attach_future[abi:ne180100](uint64_t a1)
{
  std::mutex *v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
    std::__throw_future_error[abi:ne180100](1u);
  v4 = (unint64_t *)(a1 + 8);
  do
    v5 = __ldxr(v4);
  while (__stxr(v5 + 1, v4));
  *(_DWORD *)(a1 + 136) = v3 | 2;
  std::mutex::unlock(v2);
}

void sub_1B2CE29A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void std::__deferred_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::~__deferred_assoc_state(uint64_t a1)
{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a1 = &off_1E65693B0;
  v2 = *(unint64_t **)(a1 + 176);
  if (v2)
  {
    v3 = v2 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v2 + 16))(v2);
  }
  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  unint64_t *v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a1 = &off_1E65693B0;
  v2 = *(unint64_t **)(a1 + 176);
  if (v2)
  {
    v3 = v2 + 1;
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if (!v4)
      (*(void (**)(unint64_t *))(*v2 + 16))(v2);
  }
  *(_QWORD *)a1 = MEMORY[0x1E0DE4FC8] + 16;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr((std::exception_ptr *)(a1 + 16));
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x1B5E29170);
}

void std::__deferred_assoc_state<std::shared_ptr<PCBitmap>,std::__async_func<LiAsyncBumpBitmapCreator>>::__execute(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  LiAsyncBumpBitmapCreator::operator()((const PCHash128 *)(a1 + 160), &v5);
  std::__assoc_state<std::shared_ptr<PCBitmap>>::set_value<std::shared_ptr<PCBitmap>>(a1, (uint64_t)&v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1B2CE2B4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10, char a11)
{
  std::__assoc_sub_state *v11;
  std::exception_ptr v13;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  __cxa_begin_catch(a1);
  std::current_exception();
  v13.__ptr_ = &a10;
  std::__assoc_sub_state::set_exception(v11, v13);
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  JUMPOUT(0x1B2CE2B3CLL);
}

void sub_1B2CE2B8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception_ptr a10)
{
  std::exception_ptr::~exception_ptr(&a10);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<BumpTextureImpl,std::allocator<BumpTextureImpl>,PCURL const&,LiBumpTextureInfo const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<BumpTextureImpl>::__shared_ptr_emplace[abi:ne180100]<PCURL const&,LiBumpTextureInfo const&,std::allocator<BumpTextureImpl>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B2CE2BF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BumpTextureImpl>::__shared_ptr_emplace[abi:ne180100]<PCURL const&,LiBumpTextureInfo const&,std::allocator<BumpTextureImpl>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E65693F8;
  a1[1] = 0;
  BumpTextureImpl::BumpTextureImpl((uint64_t)(a1 + 3));
  return a1;
}

void sub_1B2CE2C40(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BumpTextureImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65693F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BumpTextureImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E65693F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_emplace<BumpTextureImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t OUTLINED_FUNCTION_0_5(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

void OUTLINED_FUNCTION_1_2(unint64_t *a1@<X8>)
{
  unint64_t v1;

  v1 = __ldaxr(a1);
  __stlxr(v1 - 1, a1);
}

void LiCreateBumpBitmapAsync(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;

  v1 = (unint64_t *)(a1 + 8);
  do
    OUTLINED_FUNCTION_1_2(v1);
  while (v4);
  if (!v3)
    OUTLINED_FUNCTION_0_5(v2);
}

float LiEquirectProject::computeDistanceToImagePlane(LiEquirectProject *this, float a2, float a3)
{
  float v3;

  v3 = a3 * 180.0 / 3.14159265;
  return computeDistanceToEquirectImagePlane(a2, v3, this);
}

uint64_t LiEquirectProject::LiEquirectProject(uint64_t a1, const PCSharedCount *a2, int a3, int a4, _DWORD *a5, char a6, float a7)
{
  PCSharedCount v15;

  *(_QWORD *)(a1 + 88) = &off_1E65EB048;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  LiImageFilter::LiImageFilter((LiImageFilter *)a1, &off_1E6569558);
  *(_QWORD *)a1 = &off_1E6569450;
  *(_QWORD *)(a1 + 88) = &unk_1E6569538;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = a4;
  *(float *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = *a5;
  *(_DWORD *)(a1 + 52) = a5[1];
  *(_DWORD *)(a1 + 56) = a5[2];
  *(_DWORD *)(a1 + 60) = a5[3];
  *(_DWORD *)(a1 + 64) = a5[4];
  *(_DWORD *)(a1 + 68) = a5[5];
  *(_DWORD *)(a1 + 72) = a5[6];
  *(_DWORD *)(a1 + 76) = a5[7];
  *(_DWORD *)(a1 + 80) = a5[8];
  *(_BYTE *)(a1 + 84) = a6;
  *(PCSharedCount *)(a1 + 16) = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount(&v15, a2 + 1);
  PCSharedCount::operator=((uint64_t *)(a1 + 24), (uint64_t *)&v15);
  PCSharedCount::~PCSharedCount(&v15);
  return a1;
}

void sub_1B2CE2E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  uint64_t v10;
  PC_Sp_counted_base **v11;
  uint64_t v12;

  PCSharedCount::~PCSharedCount(&a10);
  LiImageFilter::~LiImageFilter((PCSharedCount *)v10, (const PCString *)&off_1E6569558);
  *(_QWORD *)(v10 + 88) = v12 + 16;
  *(_BYTE *)(v10 + 104) = 0;
  PCWeakCount::~PCWeakCount(v11);
  _Unwind_Resume(a1);
}

void LiImageFilter::LiImageFilter(LiImageFilter *this, const LiImageFilter *a2, uint64_t a3)
{
  uint64_t v6;
  PCSharedCount *v7;

  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)a2 + 1);
  v6 = *(_QWORD *)a2;
  v7->var0 = *(PC_Sp_counted_base **)a2;
  *(PCSharedCount *)((char *)v7 + *(_QWORD *)(v6 - 24)) = *(PCSharedCount *)((char *)a2 + 40);
  v7[2].var0 = *(PC_Sp_counted_base **)(a3 + 16);
  PCSharedCount::PCSharedCount(v7 + 3, (const PCSharedCount *)(a3 + 24));
  *((_DWORD *)this + 8) = *(_DWORD *)(a3 + 32);
}

void sub_1B2CE2EE0(_Unwind_Exception *a1)
{
  OZChannelBase *v1;
  const PCString *v2;

  OZChannelBase::setRangeName(v1, v2);
  _Unwind_Resume(a1);
}

void LiEquirectProject::LiEquirectProject(LiEquirectProject *this, const LiEquirectProject *a2)
{
  *((_QWORD *)this + 11) = &off_1E65EB048;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  LiImageFilter::LiImageFilter(this, (const LiImageFilter *)&off_1E6569558, (uint64_t)a2);
  *(_QWORD *)this = &off_1E6569450;
  *((_QWORD *)this + 11) = &unk_1E6569538;
  *(_QWORD *)((char *)this + 36) = *(_QWORD *)((char *)a2 + 36);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_BYTE *)this + 84) = *((_BYTE *)a2 + 84);
}

void sub_1B2CE2FC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 88) = v3;
  *(_BYTE *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiEquirectProject::clone(LiEquirectProject *this@<X0>, PCSharedCount *a2@<X8>)
{
  PCSharedCount v3;
  PCSharedCount v4;

  PCMakePtr<LiEquirectProject,LiEquirectProject const&>(this, &v3);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v3);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B2CE3028(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

PCSharedCount *PCMakePtr<LiEquirectProject,LiEquirectProject const&>@<X0>(const LiEquirectProject *a1@<X0>, PCSharedCount *a2@<X8>)
{
  LiEquirectProject *v4;

  v4 = (LiEquirectProject *)operator new();
  LiEquirectProject::LiEquirectProject(v4, a1);
  a2->var0 = (PC_Sp_counted_base *)v4;
  return PCSharedCount::PCSharedCount(a2 + 1, (LiEquirectProject *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
}

void sub_1B2CE309C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C408093706CLL);
  _Unwind_Resume(a1);
}

uint64_t LiEquirectProject::filteredEdges(LiEquirectProject *this)
{
  return 0;
}

uint64_t LiEquirectProject::pixelTransformSupport()
{
  return 0;
}

HGNode *LiEquirectProject::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, LiHgcEquirectProject **a3@<X8>)
{
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  double *v17;
  float v18;
  uint64_t i;
  HGNode *result;
  double v21[11];
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  HGNode *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[8];

  v6 = (__int128 *)*((_QWORD *)a2 + 20);
  v7 = v6[3];
  v9 = *v6;
  v8 = v6[1];
  v36[2] = v6[2];
  v36[3] = v7;
  v36[0] = v9;
  v36[1] = v8;
  v10 = v6[7];
  v12 = v6[4];
  v11 = v6[5];
  v36[6] = v6[6];
  v36[7] = v10;
  v36[4] = v12;
  v36[5] = v11;
  v35 = 0x3FF0000000000000;
  v32 = 0x3FF0000000000000;
  v29 = 0x3FF0000000000000;
  v26 = 0x3FF0000000000000;
  v27 = 0u;
  v28 = 0u;
  v30 = 0u;
  v31 = 0u;
  v33 = 0u;
  v34 = 0u;
  if (PCMatrix44Tmpl<double>::determinant((double *)v36) >= 0.000001)
    PCMatrix44Tmpl<double>::invert((double *)&v26, (double *)v36, 0.0);
  else
    PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v26, (double *)v36, 0.0);
  LiAgent::getHelium(a2, this[2], &v25);
  v13 = 0;
  v14 = *((_DWORD *)this + 9);
  v15 = *((_DWORD *)this + 10);
  v16 = (char *)(this + 6);
  v17 = v21;
  v18 = *((float *)this + 11);
  do
  {
    for (i = 0; i != 3; ++i)
      v17[i] = *(float *)&v16[4 * i];
    ++v13;
    v17 += 4;
    v16 += 12;
  }
  while (v13 != 3);
  v21[3] = 0.0;
  v21[7] = 0.0;
  v22 = 0u;
  v23 = 0u;
  v24 = 0x3FF0000000000000;
  NewEquirectProjectNode(v21, (double *)v36, (double *)&v26, 0, a3, (float)v14, (float)v15, 0.0, 0.0, v18);
  (*(void (**)(LiHgcEquirectProject *, _QWORD, HGNode *))(*(_QWORD *)*a3 + 120))(*a3, 0, v25);
  (*(void (**)(LiHgcEquirectProject *, _QWORD, uint64_t))(*(_QWORD *)*a3 + 136))(*a3, 0, 2);
  result = v25;
  if (v25)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v25 + 24))(v25);
  return result;
}

void sub_1B2CE3268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a26)
    (*(void (**)(uint64_t))(*(_QWORD *)a26 + 24))(a26);
  _Unwind_Resume(exception_object);
}

void LiEquirectProject::~LiEquirectProject(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)off_1E65695A8;
  this[11].var0 = (PC_Sp_counted_base *)off_1E6569690;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E6569560);
  this[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
}

{
  LiEquirectProject::~LiEquirectProject(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiEquirectProject::~LiEquirectProject(LiEquirectProject *this)
{
  LiEquirectProject::~LiEquirectProject((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  LiEquirectProject::~LiEquirectProject((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Output::Output(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  *(_QWORD *)a1 = &unk_1E6569AC8;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24), (const PCSharedCount *)(a3 + 24));
  *(_QWORD *)a1 = &unk_1E6569828;
  v5 = *a2;
  *(_QWORD *)(a1 + 32) = *a2;
  if (v5)
  {
    v6 = (unsigned int *)(v5 - 12);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  return a1;
}

PCSharedCount *ProShade::VertexProgram::VertexProgram(PCSharedCount *this)
{
  PC_Sp_counted_base *var0;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  PC_Sp_counted_base *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  PC_Sp_counted_base *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  PC_Sp_counted_base *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  PC_Sp_counted_base *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  char *v36;
  PC_Sp_counted_base *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  char *v43;
  PC_Sp_counted_base *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  char *v50;
  uint64_t i;
  PCSharedCount *v52;
  PC_Sp_counted_base *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  char *v59;
  uint64_t j;
  PCSharedCount *v61;
  PCSharedCount *v62;
  PC_Sp_counted_base *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  char *v69;
  PCSharedCount v71[3];
  PCSharedCount v72;

  LiString::LiString((LiString *)v71, "gl_Position");
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[2].var0 = 0;
  PCSharedCount::PCSharedCount(this + 3);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  var0 = v71[0].var0;
  this[4].var0 = (PC_Sp_counted_base *)v71[0];
  if (var0)
  {
    v3 = (unsigned int *)((char *)var0 - 12);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    if (v71[0].var0)
    {
      v5 = (unsigned int *)((char *)v71[0].var0 - 12);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        *(_BYTE *)v71[0].var0 = 0;
        if (v71[0].var0)
          v8 = (char *)v71[0].var0 - 12;
        else
          v8 = 0;
        free(v8);
      }
    }
  }
  LiString::LiString((LiString *)v71, "gl_PointSize");
  this[5].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[7].var0 = 0;
  PCSharedCount::PCSharedCount(this + 8);
  this[5].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  v9 = v71[0].var0;
  this[9].var0 = (PC_Sp_counted_base *)v71[0];
  if (v9)
  {
    v10 = (unsigned int *)((char *)v9 - 12);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    if (v71[0].var0)
    {
      v12 = (unsigned int *)((char *)v71[0].var0 - 12);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        *(_BYTE *)v71[0].var0 = 0;
        if (v71[0].var0)
          v15 = (char *)v71[0].var0 - 12;
        else
          v15 = 0;
        free(v15);
      }
    }
  }
  LiString::LiString((LiString *)v71, "gl_ClipVertex");
  this[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[12].var0 = 0;
  PCSharedCount::PCSharedCount(this + 13);
  this[10].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  v16 = v71[0].var0;
  this[14].var0 = (PC_Sp_counted_base *)v71[0];
  if (v16)
  {
    v17 = (unsigned int *)((char *)v16 - 12);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    if (v71[0].var0)
    {
      v19 = (unsigned int *)((char *)v71[0].var0 - 12);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        *(_BYTE *)v71[0].var0 = 0;
        if (v71[0].var0)
          v22 = (char *)v71[0].var0 - 12;
        else
          v22 = 0;
        free(v22);
      }
    }
  }
  LiString::LiString((LiString *)v71, "gl_FrontColor");
  this[15].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[17].var0 = 0;
  PCSharedCount::PCSharedCount(this + 18);
  this[15].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  v23 = v71[0].var0;
  this[19].var0 = (PC_Sp_counted_base *)v71[0];
  if (v23)
  {
    v24 = (unsigned int *)((char *)v23 - 12);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
    if (v71[0].var0)
    {
      v26 = (unsigned int *)((char *)v71[0].var0 - 12);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        *(_BYTE *)v71[0].var0 = 0;
        if (v71[0].var0)
          v29 = (char *)v71[0].var0 - 12;
        else
          v29 = 0;
        free(v29);
      }
    }
  }
  LiString::LiString((LiString *)v71, "gl_BackColor");
  this[20].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[22].var0 = 0;
  PCSharedCount::PCSharedCount(this + 23);
  this[20].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  v30 = v71[0].var0;
  this[24].var0 = (PC_Sp_counted_base *)v71[0];
  if (v30)
  {
    v31 = (unsigned int *)((char *)v30 - 12);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
    if (v71[0].var0)
    {
      v33 = (unsigned int *)((char *)v71[0].var0 - 12);
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        *(_BYTE *)v71[0].var0 = 0;
        if (v71[0].var0)
          v36 = (char *)v71[0].var0 - 12;
        else
          v36 = 0;
        free(v36);
      }
    }
  }
  LiString::LiString((LiString *)v71, "gl_FrontSecondaryColor");
  this[25].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[27].var0 = 0;
  PCSharedCount::PCSharedCount(this + 28);
  this[25].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  v37 = v71[0].var0;
  this[29].var0 = (PC_Sp_counted_base *)v71[0];
  if (v37)
  {
    v38 = (unsigned int *)((char *)v37 - 12);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 + 1, v38));
    if (v71[0].var0)
    {
      v40 = (unsigned int *)((char *)v71[0].var0 - 12);
      do
      {
        v41 = __ldaxr(v40);
        v42 = v41 - 1;
      }
      while (__stlxr(v42, v40));
      if (!v42)
      {
        *(_BYTE *)v71[0].var0 = 0;
        if (v71[0].var0)
          v43 = (char *)v71[0].var0 - 12;
        else
          v43 = 0;
        free(v43);
      }
    }
  }
  LiString::LiString((LiString *)v71, "gl_BackSecondaryColor");
  this[30].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[32].var0 = 0;
  PCSharedCount::PCSharedCount(this + 33);
  this[30].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  v44 = v71[0].var0;
  this[34].var0 = (PC_Sp_counted_base *)v71[0];
  if (v44)
  {
    v45 = (unsigned int *)((char *)v44 - 12);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 + 1, v45));
    if (v71[0].var0)
    {
      v47 = (unsigned int *)((char *)v71[0].var0 - 12);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        *(_BYTE *)v71[0].var0 = 0;
        if (v71[0].var0)
          v50 = (char *)v71[0].var0 - 12;
        else
          v50 = 0;
        free(v50);
      }
    }
  }
  for (i = 0; i != 40; i += 5)
  {
    v52 = &this[i];
    v52[35].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v52[37].var0 = 0;
    PCSharedCount::PCSharedCount(&this[i + 38]);
    this[i + 35].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
    v52[39].var0 = 0;
  }
  LiString::LiString((LiString *)v71, "gl_FogFragCoord");
  this[75].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[77].var0 = 0;
  PCSharedCount::PCSharedCount(this + 78);
  this[75].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  v53 = v71[0].var0;
  this[79].var0 = (PC_Sp_counted_base *)v71[0];
  if (v53)
  {
    v54 = (unsigned int *)((char *)v53 - 12);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 + 1, v54));
    if (v71[0].var0)
    {
      v56 = (unsigned int *)((char *)v71[0].var0 - 12);
      do
      {
        v57 = __ldaxr(v56);
        v58 = v57 - 1;
      }
      while (__stlxr(v58, v56));
      if (!v58)
      {
        *(_BYTE *)v71[0].var0 = 0;
        if (v71[0].var0)
          v59 = (char *)v71[0].var0 - 12;
        else
          v59 = 0;
        free(v59);
      }
    }
  }
  for (j = 0; j != 8; ++j)
  {
    LiString::format((LiString *)"gl_TexCoord[%d]", (LiString *)v71, j);
    v61 = &this[5 * j];
    v62 = v61 + 39;
    if (v71 != &v61[39])
    {
      LiString::dec((LiString *)&v61[39]);
      v63 = v71[0].var0;
      v62->var0 = (PC_Sp_counted_base *)v71[0];
      if (!v63)
        continue;
      v64 = (unsigned int *)((char *)v63 - 12);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 + 1, v64));
    }
    if (v71[0].var0)
    {
      v66 = (unsigned int *)((char *)v71[0].var0 - 12);
      do
      {
        v67 = __ldaxr(v66);
        v68 = v67 - 1;
      }
      while (__stlxr(v68, v66));
      if (!v68)
      {
        *(_BYTE *)v71[0].var0 = 0;
        if (v71[0].var0)
          v69 = (char *)v71[0].var0 - 12;
        else
          v69 = 0;
        free(v69);
      }
    }
  }
  ProShade::Func<ProShade::Func_ftransform>::eval(v71);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)this, v71);
  v71[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v72);
  return this;
}

void sub_1B2CE3998(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  uint64_t i;

  PCSharedCount::~PCSharedCount(v4 + 3);
  ProShade::Output::~Output(v3);
  for (i = 70; i != 30; i -= 5)
    ProShade::Output::~Output(&v1[i]);
  ProShade::Output::~Output(v2);
  ProShade::Output::~Output(v1 + 25);
  ProShade::Output::~Output(v1 + 20);
  ProShade::Output::~Output(v1 + 15);
  ProShade::Output::~Output(v1 + 10);
  ProShade::Output::~Output(v1 + 5);
  ProShade::Output::~Output(v1);
  _Unwind_Resume(a1);
}

void ProShade::Output::~Output(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[4]);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 3);
}

{
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[4]);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 3);
  JUMPOUT(0x1B5E29170);
}

PCSharedCount *ProShade::VarT<ProShade::Node>::~VarT(PCSharedCount *a1)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a1 + 3);
  return a1;
}

void ProShade::VertexProgram::addOutputs(const PCSharedCount *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  PC_Sp_counted_base *var0;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  PC_Sp_counted_base *v17;
  unsigned int *v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  PC_Sp_counted_base *v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  PC_Sp_counted_base *v33;
  unsigned int *v34;
  unsigned int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  PC_Sp_counted_base *v41;
  unsigned int *v42;
  unsigned int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  PC_Sp_counted_base *v49;
  unsigned int *v50;
  unsigned int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  PC_Sp_counted_base *v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t i;
  const PCSharedCount *v61;
  const PCSharedCount *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  PC_Sp_counted_base *v68;
  unsigned int *v69;
  unsigned int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  PC_Sp_counted_base *v76;
  unsigned int *v77;
  unsigned int v78;

  if (a1[2].var0)
  {
    v4 = *(_DWORD *)(a2 + 12);
    v5 = *(_DWORD *)(a2 + 8) <= v4 ? (2 * (v4 + 1)) | 1 : *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v4 + 1, v5);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v6 + 40 * v7, a1);
    if ((const PCSharedCount *)(v6 + 40 * v7) != a1)
    {
      v8 = v6 + 40 * v7;
      LiString::dec((LiString *)(v8 + 32));
      var0 = a1[4].var0;
      *(_QWORD *)(v8 + 32) = var0;
      if (var0)
      {
        v10 = (unsigned int *)((char *)var0 - 12);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
    }
  }
  if (a1[7].var0)
  {
    v12 = *(_DWORD *)(a2 + 12);
    v13 = *(_DWORD *)(a2 + 8) <= v12 ? (2 * (v12 + 1)) | 1 : *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v12 + 1, v13);
    v14 = *(_QWORD *)(a2 + 16);
    v15 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v14 + 40 * v15, a1 + 5);
    if ((const PCSharedCount *)(v14 + 40 * v15) != &a1[5])
    {
      v16 = v14 + 40 * v15;
      LiString::dec((LiString *)(v16 + 32));
      v17 = a1[9].var0;
      *(_QWORD *)(v16 + 32) = v17;
      if (v17)
      {
        v18 = (unsigned int *)((char *)v17 - 12);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
    }
  }
  if (a1[12].var0)
  {
    v20 = *(_DWORD *)(a2 + 12);
    v21 = *(_DWORD *)(a2 + 8) <= v20 ? (2 * (v20 + 1)) | 1 : *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v20 + 1, v21);
    v22 = *(_QWORD *)(a2 + 16);
    v23 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v22 + 40 * v23, a1 + 10);
    if ((const PCSharedCount *)(v22 + 40 * v23) != &a1[10])
    {
      v24 = v22 + 40 * v23;
      LiString::dec((LiString *)(v24 + 32));
      v25 = a1[14].var0;
      *(_QWORD *)(v24 + 32) = v25;
      if (v25)
      {
        v26 = (unsigned int *)((char *)v25 - 12);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 + 1, v26));
      }
    }
  }
  if (a1[17].var0)
  {
    v28 = *(_DWORD *)(a2 + 12);
    v29 = *(_DWORD *)(a2 + 8) <= v28 ? (2 * (v28 + 1)) | 1 : *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v28 + 1, v29);
    v30 = *(_QWORD *)(a2 + 16);
    v31 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v30 + 40 * v31, a1 + 15);
    if ((const PCSharedCount *)(v30 + 40 * v31) != &a1[15])
    {
      v32 = v30 + 40 * v31;
      LiString::dec((LiString *)(v32 + 32));
      v33 = a1[19].var0;
      *(_QWORD *)(v32 + 32) = v33;
      if (v33)
      {
        v34 = (unsigned int *)((char *)v33 - 12);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 + 1, v34));
      }
    }
  }
  if (a1[22].var0)
  {
    v36 = *(_DWORD *)(a2 + 12);
    v37 = *(_DWORD *)(a2 + 8) <= v36 ? (2 * (v36 + 1)) | 1 : *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v36 + 1, v37);
    v38 = *(_QWORD *)(a2 + 16);
    v39 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v38 + 40 * v39, a1 + 20);
    if ((const PCSharedCount *)(v38 + 40 * v39) != &a1[20])
    {
      v40 = v38 + 40 * v39;
      LiString::dec((LiString *)(v40 + 32));
      v41 = a1[24].var0;
      *(_QWORD *)(v40 + 32) = v41;
      if (v41)
      {
        v42 = (unsigned int *)((char *)v41 - 12);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 + 1, v42));
      }
    }
  }
  if (a1[27].var0)
  {
    v44 = *(_DWORD *)(a2 + 12);
    v45 = *(_DWORD *)(a2 + 8) <= v44 ? (2 * (v44 + 1)) | 1 : *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v44 + 1, v45);
    v46 = *(_QWORD *)(a2 + 16);
    v47 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v46 + 40 * v47, a1 + 25);
    if ((const PCSharedCount *)(v46 + 40 * v47) != &a1[25])
    {
      v48 = v46 + 40 * v47;
      LiString::dec((LiString *)(v48 + 32));
      v49 = a1[29].var0;
      *(_QWORD *)(v48 + 32) = v49;
      if (v49)
      {
        v50 = (unsigned int *)((char *)v49 - 12);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 + 1, v50));
      }
    }
  }
  if (a1[32].var0)
  {
    v52 = *(_DWORD *)(a2 + 12);
    v53 = *(_DWORD *)(a2 + 8) <= v52 ? (2 * (v52 + 1)) | 1 : *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v52 + 1, v53);
    v54 = *(_QWORD *)(a2 + 16);
    v55 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v54 + 40 * v55, a1 + 30);
    if ((const PCSharedCount *)(v54 + 40 * v55) != &a1[30])
    {
      v56 = v54 + 40 * v55;
      LiString::dec((LiString *)(v56 + 32));
      v57 = a1[34].var0;
      *(_QWORD *)(v56 + 32) = v57;
      if (v57)
      {
        v58 = (unsigned int *)((char *)v57 - 12);
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 + 1, v58));
      }
    }
  }
  for (i = 0; i != 8; ++i)
  {
    v61 = &a1[5 * i];
    if (v61[37].var0)
    {
      v62 = v61 + 35;
      v63 = *(_DWORD *)(a2 + 12);
      v64 = *(_DWORD *)(a2 + 8) <= v63 ? (2 * (v63 + 1)) | 1 : *(_DWORD *)(a2 + 8);
      PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v63 + 1, v64);
      v65 = *(_QWORD *)(a2 + 16);
      v66 = *(int *)(a2 + 12) - 1;
      ProShade::VarT<ProShade::Node>::operator=(v65 + 40 * v66, v62);
      if ((const PCSharedCount *)(v65 + 40 * v66) != v62)
      {
        v67 = v65 + 40 * v66;
        LiString::dec((LiString *)(v67 + 32));
        v68 = a1[5 * i + 39].var0;
        *(_QWORD *)(v67 + 32) = v68;
        if (v68)
        {
          v69 = (unsigned int *)((char *)v68 - 12);
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 + 1, v69));
        }
      }
    }
  }
  if (a1[77].var0)
  {
    v71 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(a2 + 8) <= v71)
      v72 = (2 * (v71 + 1)) | 1;
    else
      v72 = *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v71 + 1, v72);
    v73 = *(_QWORD *)(a2 + 16);
    v74 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v73 + 40 * v74, a1 + 75);
    if ((const PCSharedCount *)(v73 + 40 * v74) != &a1[75])
    {
      v75 = v73 + 40 * v74;
      LiString::dec((LiString *)(v75 + 32));
      v76 = a1[79].var0;
      *(_QWORD *)(v75 + 32) = v76;
      if (v76)
      {
        v77 = (unsigned int *)((char *)v76 - 12);
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 + 1, v77));
      }
    }
  }
}

PCSharedCount *ProShade::FragmentProgram::FragmentProgram(PCSharedCount *this)
{
  PC_Sp_counted_base *var0;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char *v8;
  PC_Sp_counted_base *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  uint64_t i;
  PCSharedCount *v17;
  uint64_t j;
  PCSharedCount *v19;
  PCSharedCount *v20;
  PC_Sp_counted_base *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  ProShade::ConstVector *v28;
  ProShade::ConstVector *v29;
  ProShade::ConstVector *v30;
  ProShade::ConstVector *v31;
  _QWORD v33[3];
  PCSharedCount v34;
  _QWORD v35[3];
  PCSharedCount v36;
  _QWORD v37[3];
  PCSharedCount v38;
  _QWORD v39[3];
  PCSharedCount v40;
  PCSharedCount v41[3];
  PCSharedCount v42;

  LiString::LiString((LiString *)v41, "gl_FragColor");
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[2].var0 = 0;
  PCSharedCount::PCSharedCount(this + 3);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  var0 = v41[0].var0;
  this[4].var0 = (PC_Sp_counted_base *)v41[0];
  if (var0)
  {
    v3 = (unsigned int *)((char *)var0 - 12);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
    if (v41[0].var0)
    {
      v5 = (unsigned int *)((char *)v41[0].var0 - 12);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        *(_BYTE *)v41[0].var0 = 0;
        if (v41[0].var0)
          v8 = (char *)v41[0].var0 - 12;
        else
          v8 = 0;
        free(v8);
      }
    }
  }
  LiString::LiString((LiString *)v41, "gl_FragDepth");
  this[5].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[7].var0 = 0;
  PCSharedCount::PCSharedCount(this + 8);
  this[5].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  v9 = v41[0].var0;
  this[9].var0 = (PC_Sp_counted_base *)v41[0];
  if (v9)
  {
    v10 = (unsigned int *)((char *)v9 - 12);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
    if (v41[0].var0)
    {
      v12 = (unsigned int *)((char *)v41[0].var0 - 12);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        *(_BYTE *)v41[0].var0 = 0;
        if (v41[0].var0)
          v15 = (char *)v41[0].var0 - 12;
        else
          v15 = 0;
        free(v15);
      }
    }
  }
  for (i = 0; i != 40; i += 5)
  {
    v17 = &this[i];
    v17[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v17[12].var0 = 0;
    PCSharedCount::PCSharedCount(&this[i + 13]);
    v17[10].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
    v17[14].var0 = 0;
  }
  for (j = 0; j != 8; ++j)
  {
    LiString::format((LiString *)"gl_FragData[%d]", (LiString *)v41, j);
    v19 = &this[5 * j];
    v20 = v19 + 14;
    if (v41 != &v19[14])
    {
      LiString::dec((LiString *)&v19[14]);
      v21 = v41[0].var0;
      v20->var0 = (PC_Sp_counted_base *)v41[0];
      if (!v21)
        continue;
      v22 = (unsigned int *)((char *)v21 - 12);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    if (v41[0].var0)
    {
      v24 = (unsigned int *)((char *)v41[0].var0 - 12);
      do
      {
        v25 = __ldaxr(v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, v24));
      if (!v26)
      {
        *(_BYTE *)v41[0].var0 = 0;
        if (v41[0].var0)
          v27 = (char *)v41[0].var0 - 12;
        else
          v27 = 0;
        free(v27);
      }
    }
  }
  v39[0] = &unk_1E6569AC8;
  v28 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v28, 0);
  v39[2] = v28;
  PCSharedCount::PCSharedCount(&v40, (ProShade::ConstVector *)((char *)v28 + *(_QWORD *)(*(_QWORD *)v28 - 24)));
  v37[0] = &unk_1E6569AC8;
  v29 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v29, 0);
  v37[2] = v29;
  PCSharedCount::PCSharedCount(&v38, (ProShade::ConstVector *)((char *)v29 + *(_QWORD *)(*(_QWORD *)v29 - 24)));
  v35[0] = &unk_1E6569AC8;
  v30 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v30, 0);
  v35[2] = v30;
  PCSharedCount::PCSharedCount(&v36, (ProShade::ConstVector *)((char *)v30 + *(_QWORD *)(*(_QWORD *)v30 - 24)));
  v33[0] = &unk_1E6569AC8;
  v31 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v31, 0);
  v33[2] = v31;
  PCSharedCount::PCSharedCount(&v34, (ProShade::ConstVector *)((char *)v31 + *(_QWORD *)(*(_QWORD *)v31 - 24)));
  ProShade::Vec4::Vec4(v41, v39, v37, v35, v33);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)this, v41);
  v41[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v42);
  v33[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v34);
  v35[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v36);
  v37[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v38);
  v39[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v40);
  return this;
}

void sub_1B2CE45FC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  PCSharedCount *v5;
  PCSharedCount *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;

  *(_QWORD *)(v8 - 112) = v7 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v8 - 88));
  PCSharedCount::~PCSharedCount(v6);
  PCSharedCount::~PCSharedCount(v5);
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(v3);
  for (i = 45; i != 5; i -= 5)
    ProShade::Output::~Output(&v1[i]);
  ProShade::Output::~Output(v2);
  ProShade::Output::~Output(v1);
  _Unwind_Resume(a1);
}

void sub_1B2CE47D8()
{
  uint64_t v0;
  uint64_t v1;

  for (; v1; v1 -= 40)
    ProShade::Output::~Output((PCSharedCount *)(v0 + 40 + v1));
  JUMPOUT(0x1B2CE47C0);
}

void ProShade::FragmentProgram::addOutputs(const PCSharedCount *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  PC_Sp_counted_base *var0;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  PC_Sp_counted_base *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t i;
  const PCSharedCount *v21;
  const PCSharedCount *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  PC_Sp_counted_base *v28;
  unsigned int *v29;
  unsigned int v30;

  if (a1[2].var0)
  {
    v4 = *(_DWORD *)(a2 + 12);
    v5 = *(_DWORD *)(a2 + 8) <= v4 ? (2 * (v4 + 1)) | 1 : *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v4 + 1, v5);
    v6 = *(_QWORD *)(a2 + 16);
    v7 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v6 + 40 * v7, a1);
    if ((const PCSharedCount *)(v6 + 40 * v7) != a1)
    {
      v8 = v6 + 40 * v7;
      LiString::dec((LiString *)(v8 + 32));
      var0 = a1[4].var0;
      *(_QWORD *)(v8 + 32) = var0;
      if (var0)
      {
        v10 = (unsigned int *)((char *)var0 - 12);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
    }
  }
  if (a1[7].var0)
  {
    v12 = *(_DWORD *)(a2 + 12);
    v13 = *(_DWORD *)(a2 + 8) <= v12 ? (2 * (v12 + 1)) | 1 : *(_DWORD *)(a2 + 8);
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v12 + 1, v13);
    v14 = *(_QWORD *)(a2 + 16);
    v15 = *(int *)(a2 + 12) - 1;
    ProShade::VarT<ProShade::Node>::operator=(v14 + 40 * v15, a1 + 5);
    if ((const PCSharedCount *)(v14 + 40 * v15) != &a1[5])
    {
      v16 = v14 + 40 * v15;
      LiString::dec((LiString *)(v16 + 32));
      v17 = a1[9].var0;
      *(_QWORD *)(v16 + 32) = v17;
      if (v17)
      {
        v18 = (unsigned int *)((char *)v17 - 12);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 + 1, v18));
      }
    }
  }
  for (i = 0; i != 8; ++i)
  {
    v21 = &a1[5 * i];
    if (v21[12].var0)
    {
      v22 = v21 + 10;
      v23 = *(_DWORD *)(a2 + 12);
      if (*(_DWORD *)(a2 + 8) <= v23)
        v24 = (2 * (v23 + 1)) | 1;
      else
        v24 = *(_DWORD *)(a2 + 8);
      PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a2, v23 + 1, v24);
      v25 = *(_QWORD *)(a2 + 16);
      v26 = *(int *)(a2 + 12) - 1;
      ProShade::VarT<ProShade::Node>::operator=(v25 + 40 * v26, v22);
      if ((const PCSharedCount *)(v25 + 40 * v26) != v22)
      {
        v27 = v25 + 40 * v26;
        LiString::dec((LiString *)(v27 + 32));
        v28 = a1[5 * i + 14].var0;
        *(_QWORD *)(v27 + 32) = v28;
        if (v28)
        {
          v29 = (unsigned int *)((char *)v28 - 12);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
        }
      }
    }
  }
}

void ProShade::InsertUniform::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t *v14;
  int v15;
  uint64_t v16;
  PCShared_base **v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  const void *v25;
  int v26;
  size_t v27;
  size_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  void *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  _BYTE *v41;
  PCShared_base *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  PCShared_base **v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t **v53;
  _BYTE *v54;
  int32x4_t v55;

  v6 = ProShade::VarT<ProShade::Node>::frequency(a2);
  if (v6 >= 2)
  {
    ProShade::NodeOperator::apply(a1, a2, (_QWORD *)a3);
    return;
  }
  if (v6 != 1)
    goto LABEL_9;
  v7 = *(_QWORD *)(a2 + 16);
  if (!v7)
    throw_PCNullPointerException(1);
  {
    *(_QWORD *)a3 = &unk_1E6569AC8;
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a3 + 16) = v7;
LABEL_10:
    PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), (const PCSharedCount *)(a2 + 24));
    return;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7))
  {
LABEL_9:
    *(_QWORD *)a3 = &unk_1E6569AC8;
    *(_BYTE *)(a3 + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    goto LABEL_10;
  }
  v8 = ProShade::VarT<ProShade::Node>::hash(a2, (__n128 *)&v55);
  LODWORD(v9) = *(_DWORD *)(a1 + 44);
  if ((int)v9 < 1)
  {
LABEL_17:
    if (*(_DWORD *)(a1 + 40) <= (int)v9)
      v15 = (2 * (v9 + 1)) | 1;
    else
      v15 = *(_DWORD *)(a1 + 40);
    PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::resize(a1 + 32, v9 + 1, v15);
    v16 = *(_QWORD *)(a1 + 48) + 72 * *(int *)(a1 + 44) - 72;
    ProShade::VarT<ProShade::Node>::operator=(v16, (const PCSharedCount *)a2);
  }
  else
  {
    v10 = 0;
    v11 = 0;
    while (1)
    {
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(_QWORD *)(v12 + v10 + 16);
      if (!v13)
        throw_PCNullPointerException(1);
      v14 = (int32x4_t *)(*(uint64_t (**)(uint64_t, _QWORD, __n128))(*(_QWORD *)v13 + 48))(v13, 0, v8);
      v8 = (__n128)vmvnq_s8((int8x16_t)vceqq_s32(*v14, v55));
      v8.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v8);
      v8.n128_u16[0] = vmaxv_u16((uint16x4_t)v8.n128_u64[0]);
      if ((v8.n128_u8[0] & 1) == 0)
        break;
      ++v11;
      v9 = *(int *)(a1 + 44);
      v10 += 72;
      if (v11 >= v9)
        goto LABEL_17;
    }
    v16 = v12 + v10;
  }
  v51 = v16;
  v18 = *(_QWORD *)(v16 + 48);
  v17 = (PCShared_base **)(v16 + 48);
  if (!v18)
  {
    v50 = v17;
    v19 = *(_QWORD *)(a2 + 16);
    if (!v19)
      throw_PCNullPointerException(1);
    v20 = *(_BYTE **)(v19 + 32);
    if (v20)
    {
      v21 = (unsigned int *)(v20 - 12);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v55.i64[0] = (uint64_t)v20;
      do
        v23 = __ldaxr(v21);
      while (__stlxr(v23 + 1, v21));
      if (v55.i64[0] && *(_DWORD *)(v55.i64[0] - 8))
      {
        v24 = 0;
        v52 = (_QWORD *)(a1 + 64);
        v53 = (uint64_t **)(a1 + 56);
        while (v52 != std::__tree<LiString>::find<LiString>((uint64_t)v53, (const char **)&v55))
        {
          LiString::format((LiString *)"_%d", (LiString *)&v54, v24, v50);
          v25 = v54;
          if (v54)
            v26 = *((_DWORD *)v54 - 2);
          else
            v26 = 0;
          v27 = *((int *)v20 - 2);
          v28 = v27 + v26;
          v29 = (unsigned int *)malloc_type_malloc(v28 + 13, 0x8903763CuLL);
          v29[1] = v28;
          v29[2] = v28 + 1;
          atomic_store(1u, v29);
          atomic_store(0, v29);
          memcpy(v29 + 3, v20, v27);
          memcpy((char *)v29 + v27 + 12, v25, v26);
          *((_BYTE *)v29 + v28 + 12) = 0;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
          if (v55.i64[0])
          {
            v31 = (unsigned int *)(v55.i64[0] - 12);
            do
            {
              v32 = __ldaxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
            {
              *(_BYTE *)v55.i64[0] = 0;
              if (v55.i64[0])
                v34 = (void *)(v55.i64[0] - 12);
              else
                v34 = 0;
              free(v34);
            }
          }
          v55.i64[0] = (uint64_t)(v29 + 3);
          do
            v35 = __ldaxr(v29);
          while (__stlxr(v35 + 1, v29));
          do
          {
            v36 = __ldaxr(v29);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v29));
          if (!v37)
            free(v29);
          if (v54)
          {
            v38 = (unsigned int *)(v54 - 12);
            do
            {
              v39 = __ldaxr(v38);
              v40 = v39 - 1;
            }
            while (__stlxr(v40, v38));
            if (!v40)
            {
              *v54 = 0;
              if (v54)
                v41 = v54 - 12;
              else
                v41 = 0;
              free(v41);
            }
          }
          v24 = (v24 + 1);
        }
        std::__tree<LiString>::__emplace_unique_key_args<LiString,LiString const&>(v53, (const char **)&v55, v55.i64);
      }
    }
    else
    {
      v55.i64[0] = 0;
    }
    v42 = (PCShared_base *)operator new();
    ProShade::UniformNode::UniformNode((uint64_t)v42, v55.i64, a2);
    PCPtr<LiImageSource>::operator=<LiImageSource>(v50, v42);
    if (v55.i64[0])
    {
      v43 = (unsigned int *)(v55.i64[0] - 12);
      do
      {
        v44 = __ldaxr(v43);
        v45 = v44 - 1;
      }
      while (__stlxr(v45, v43));
      if (!v45)
      {
        *(_BYTE *)v55.i64[0] = 0;
        if (v55.i64[0])
          v46 = (void *)(v55.i64[0] - 12);
        else
          v46 = 0;
        free(v46);
      }
    }
    if (v20)
    {
      v47 = (unsigned int *)(v20 - 12);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        *v20 = 0;
        free(v47);
      }
    }
  }
  *(_QWORD *)a3 = &unk_1E6569AC8;
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(v51 + 40);
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v51 + 48);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), (const PCSharedCount *)(v51 + 56));
}

void sub_1B2CE4E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _BYTE *a15)
{
  _BYTE *v15;
  uint64_t v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  MEMORY[0x1B5E29170](v16, 0x10B1C402CAA7C2BLL);
  if (a15)
  {
    v18 = (unsigned int *)(a15 - 12);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      *a15 = 0;
      free(a15 - 12);
    }
  }
  if (v15)
  {
    v21 = (unsigned int *)(v15 - 12);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      *v15 = 0;
      free(v21);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t ProShade::VarT<ProShade::Node>::frequency(uint64_t a1)
{
  uint64_t v2;
  __n128 v4;

  ProShade::VarT<ProShade::Node>::hash(a1, &v4);
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    throw_PCNullPointerException(1);
  return *(unsigned int *)(v2 + 40);
}

uint64_t ProShade::Program::shader(uint64_t a1, uint64_t a2, LiString *a3, LiString *a4)
{
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  PCArray_base *v10;
  int i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t Var;
  uint64_t v17;
  OZChannelBase *v18;
  OZChannelBase *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const PCSharedCount *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  const char *locale;
  size_t v40;
  const std::locale::facet *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  char *v45;
  const char **v46;
  const char **v47;
  _QWORD *v48;
  uint64_t v49;
  const char **v50;
  const char *v51;
  unsigned int *v52;
  unsigned int v53;
  signed int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  char *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  PCShared_base **v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  _QWORD *v69;
  uint64_t *v70;
  int v71;
  char v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  PCArray_base *v77;
  PCArray_base *v78;
  const char *v79;
  size_t v80;
  _QWORD *v81;
  PCArray_base *v82;
  PCArray_base *v83;
  const char *v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  const char *v90;
  size_t v91;
  _QWORD *v92;
  const char *v93;
  size_t v94;
  _QWORD *v95;
  uint64_t v96;
  const char *v97;
  size_t v98;
  _QWORD *v99;
  const std::locale::facet *v100;
  unsigned int *v101;
  unsigned int v102;
  unsigned int v103;
  char *v104;
  unsigned int *v105;
  unsigned int v106;
  unsigned int v107;
  char *v108;
  uint64_t v109;
  std::locale::id *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  const char *v114;
  size_t v115;
  _QWORD *v116;
  const char *v117;
  size_t v118;
  _QWORD *v119;
  uint64_t v120;
  const char *v121;
  size_t v122;
  _QWORD *v123;
  const std::locale::facet *v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  char *v128;
  unsigned int *v129;
  unsigned int v130;
  unsigned int v131;
  char *v132;
  uint64_t v133;
  std::locale::id *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  const char *v138;
  size_t v139;
  _QWORD *v140;
  const char *v141;
  size_t v142;
  _QWORD *v143;
  const std::locale::facet *v144;
  unsigned int *v145;
  unsigned int v146;
  unsigned int v147;
  char *v148;
  std::locale::__imp *v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  char *v155;
  uint64_t *v156;
  const PCString *v157;
  PCString *v158;
  signed int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int v162;
  char *v163;
  uint64_t *v164;
  uint64_t *v165;
  BOOL v166;
  unsigned int v167;
  uint64_t v168;
  BOOL v169;
  void *v170;
  unsigned int v171;
  uint64_t v172;
  void *v173;
  int v174;
  int v175;
  int v177;
  const char *v182;
  std::locale v183[2];
  PCShared_base *v184;
  PCSharedCount v185;
  std::locale v186;
  PCSharedCount **v187;
  PCSharedCount *v188;
  PCSharedCount v189;
  char v190;
  void **v191;
  void *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t *v195;
  _QWORD *v196[2];
  uint64_t *v197;
  _QWORD *v198[2];
  void *v199;
  uint64_t v200;
  _QWORD *v201;
  void *v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD v208[11];
  char v209;
  uint64_t v210;
  std::locale v211;

  v4 = a2;
  if ((v5 & 1) == 0
  {
    if (liDebug("PSProgram::shader"))
      v177 = 2;
    else
      v177 = 0;
    ProShade::Program::shader(PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>> &,LiString &,LiString &)::dbg = v177;
    v4 = a2;
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v208);
  v206 = 0;
  v207 = 0;
  v204 = 0;
  v205 = &unk_1E656A208;
  v202 = &unk_1E656A208;
  v203 = 0;
  v200 = 0;
  v201 = 0;
  v198[1] = 0;
  v199 = &unk_1E656A1D0;
  v197 = (uint64_t *)v198;
  v198[0] = 0;
  if (*(int *)(v4 + 12) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v4 + 16);
      if ((int)v206 <= SHIDWORD(v206))
        v9 = (2 * (HIDWORD(v206) + 1)) | 1;
      else
        v9 = v206;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v205, HIDWORD(v206) + 1, v9);
      v10 = (PCArray_base *)ProShade::VarT<ProShade::Node>::operator=(v207 + 32 * SHIDWORD(v206) - 32, (const PCSharedCount *)(v8 + v6));
      ++v7;
      v6 += 40;
    }
    while (v7 < *(int *)(v4 + 12));
    for (i = HIDWORD(v206); HIDWORD(v206); v4 = a2)
    {
      if (i <= 0)
        PCArray_base::badIndex(v10);
      v186.__locale_ = (std::locale::__imp *)&unk_1E6569AC8;
      LOBYTE(v187) = *(_BYTE *)(v207 + 8);
      v188 = *(PCSharedCount **)(v207 + 16);
      PCSharedCount::PCSharedCount(&v189, (const PCSharedCount *)(v207 + 24));
      if (SHIDWORD(v206) < 2)
      {
        LODWORD(v14) = HIDWORD(v206) - 1;
      }
      else
      {
        v12 = 0;
        v13 = 0;
        do
        {
          ProShade::VarT<ProShade::Node>::operator=(v207 + v12, (const PCSharedCount *)(v207 + v12 + 32));
          ++v13;
          v14 = SHIDWORD(v206) - 1;
          v12 += 32;
        }
        while (v13 < v14);
      }
      if ((int)v206 >= (int)v14)
        v15 = v206;
      else
        v15 = (2 * v14) | 1;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v205, v14, v15);
      Var = ProShade::findVar((uint64_t)&v199, (uint64_t)&v186);
      v17 = Var;
      if (!*(_BYTE *)(Var + 56))
      {
        *(_BYTE *)(Var + 56) = 1;
        if (!v188)
          throw_PCNullPointerException(1);
        v18 = (OZChannelBase *)(*((uint64_t (**)(PCSharedCount *))v188->var0 + 9))(v188);
        v19 = v18;
        if (v18)
        {
          v183[0].__locale_ = (std::locale::__imp *)OZChannelBase::getSerializer(v18);
          *((_QWORD *)std::__tree<std::__value_type<PCHash128,ProShade::Snippet *>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,ProShade::Snippet *>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,ProShade::Snippet *>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(&v197, v183[0].__locale_, (uint64_t)&std::piecewise_construct, v183)+ 6) = v19;
        }
        v20 = *(_QWORD *)(v17 + 16);
        if (!v20)
          throw_PCNullPointerException(1);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 64))(v20, &v202);
        if (SHIDWORD(v203) >= 1)
        {
          v21 = 0;
          v22 = 0;
          do
          {
            v23 = (const PCSharedCount *)(v204 + v21);
            v24 = ProShade::findVar((uint64_t)&v199, v204 + v21);
            v25 = *(_DWORD *)(v24 + 44);
            if (*(_DWORD *)(v24 + 40) <= v25)
              v26 = (2 * (v25 + 1)) | 1;
            else
              v26 = *(_DWORD *)(v24 + 40);
            PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(v24 + 32, v25 + 1, v26);
            *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * *(int *)(v24 + 44) - 8) = v17;
            if ((int)v206 <= SHIDWORD(v206))
              v27 = (2 * (HIDWORD(v206) + 1)) | 1;
            else
              v27 = v206;
            PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v205, HIDWORD(v206) + 1, v27);
            ProShade::VarT<ProShade::Node>::operator=(v207 + 32 * SHIDWORD(v206) - 32, v23);
            ++v22;
            v21 += 32;
          }
          while (v22 < SHIDWORD(v203));
        }
      }
      v186.__locale_ = (std::locale::__imp *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v189);
      i = HIDWORD(v206);
    }
  }
  v196[0] = 0;
  v196[1] = 0;
  v194 = 0;
  v195 = (uint64_t *)v196;
  v192 = &unk_1E656A1D0;
  v193 = 0;
  if (SHIDWORD(v200) >= 1)
  {
    v28 = 0;
    while (1)
    {
      v29 = v201[v28];
      if (ProShade::Program::shader(PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>> &,LiString &,LiString &)::dbg >= 1)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"depend ", 7);
        v30 = (_QWORD *)std::ostream::operator<<();
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" atomic ", 8);
        v32 = *(_QWORD *)(v29 + 16);
        if (!v32)
          throw_PCNullPointerException(1);
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 88))(v32);
        if (v33)
          v34 = "true";
        else
          v34 = "false";
        if (v33)
          v35 = 4;
        else
          v35 = 5;
        v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v34, v35);
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)": ", 2);
        v38 = *(_QWORD *)(v29 + 16);
        if (!v38)
          throw_PCNullPointerException(1);
        (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)v38 + 16))(v183);
        if (v183[0].__locale_)
          locale = (const char *)v183[0].__locale_;
        else
          locale = "";
        v40 = strlen(locale);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)locale, v40);
        std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*v37 - 24)));
        v41 = std::locale::use_facet(&v186, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v41->__vftable[2].~facet_0)(v41, 10);
        std::locale::~locale(&v186);
        std::ostream::put();
        std::ostream::flush();
        if (v183[0].__locale_)
        {
          v42 = (unsigned int *)((char *)v183[0].__locale_ - 12);
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            *(_BYTE *)v183[0].__locale_ = 0;
            if (v183[0].__locale_)
              v45 = (char *)v183[0].__locale_ - 12;
            else
              v45 = 0;
            free(v45);
          }
        }
      }
      v46 = *(const char ***)(v29 + 16);
      v47 = v46 + 4;
      if (*(int *)(v29 + 44) > 1)
        break;
      if (*v47 && *((_DWORD *)*v47 - 2))
        goto LABEL_65;
LABEL_95:
      if (++v28 >= SHIDWORD(v200))
      {
        v60 = HIDWORD(v193);
        v4 = a2;
        goto LABEL_98;
      }
    }
    if (!v46)
      throw_PCNullPointerException(1);
LABEL_65:
    if (((*((uint64_t (**)(const char **))*v46 + 11))(v46) & 1) == 0)
    {
      v48 = std::__tree<LiString>::find<LiString>((uint64_t)&v195, v47);
      if (v196 == v48)
        v49 = !*v47 || !*((_DWORD *)*v47 - 2);
      else
        v49 = *((unsigned int *)v48 + 10);
      v50 = (const char **)(v29 + 64);
      while (1)
      {
        if (v47 != v50)
        {
          LiString::dec((LiString *)(v29 + 64));
          v51 = *v47;
          *v50 = *v47;
          if (v51)
          {
            v52 = (unsigned int *)(v51 - 12);
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 + 1, v52));
          }
        }
        if ((int)v49 >= 1)
        {
          LiString::format((LiString *)"_%d", (LiString *)&v186, v49);
          v54 = v186.__locale_ ? *((_DWORD *)v186.__locale_ - 2) : 0;
          LiString::append((LiString *)(v29 + 64), (const char *)v186.__locale_, v54);
          if (v186.__locale_)
          {
            v55 = (unsigned int *)((char *)v186.__locale_ - 12);
            do
            {
              v56 = __ldaxr(v55);
              v57 = v56 - 1;
            }
            while (__stlxr(v57, v55));
            if (!v57)
            {
              *(_BYTE *)v186.__locale_ = 0;
              if (v186.__locale_)
                v58 = (char *)v186.__locale_ - 12;
              else
                v58 = 0;
              free(v58);
            }
          }
        }
        if ((_QWORD *)(a1 + 1384) == std::__tree<LiString>::find<LiString>(a1 + 1376, (const char **)(v29 + 64)))
          break;
        v49 = (v49 + 1);
      }
      v186.__locale_ = (std::locale::__imp *)v47;
      *((_DWORD *)std::__tree<std::__value_type<LiString,int>,std::__map_value_compare<LiString,std::__value_type<LiString,int>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,int>>>::__emplace_unique_key_args<LiString,std::piecewise_construct_t const&,std::tuple<LiString const&>,std::tuple<>>(&v195, v47, (uint64_t)&std::piecewise_construct, (uint64_t **)&v186)+ 10) = v49 + 1;
      if ((int)v193 <= SHIDWORD(v193))
        v59 = (2 * (HIDWORD(v193) + 1)) | 1;
      else
        v59 = v193;
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)&v192, HIDWORD(v193) + 1, v59);
      v194[SHIDWORD(v193) - 1] = v29;
    }
    goto LABEL_95;
  }
  v60 = 0;
LABEL_98:
  v188 = 0;
  v189.var0 = 0;
  v186.__locale_ = (std::locale::__imp *)&unk_1E6569D68;
  v187 = &v188;
  v190 = 0;
  v191 = &v192;
  if (v60 >= 1)
  {
    v61 = 0;
    do
    {
      v62 = v194[v61];
      ProShade::VarT<ProShade::Node>::hash(v62, (__n128 *)v183);
      *(_OWORD *)(v62 + 72) = *(_OWORD *)&v183[0].__locale_;
      v65 = *(_QWORD *)(v62 + 16);
      v64 = (PCShared_base **)(v62 + 16);
      v63 = v65;
      if (!v65)
        throw_PCNullPointerException(1);
      (*(void (**)(std::locale *__return_ptr, uint64_t, std::locale *))(*(_QWORD *)v63 + 80))(v183, v63, &v186);
      PCPtr<ProShade::Node>::reset<ProShade::Node>(v64, v184);
      v183[0].__locale_ = (std::locale::__imp *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v185);
      ++v61;
      v67 = HIDWORD(v193);
    }
    while (v61 < SHIDWORD(v193));
    if (SHIDWORD(v193) >= 1)
    {
      v68 = 0;
      v69 = (_QWORD *)MEMORY[0x1E0DE4A50];
      v70 = &projectFileUTIs_projectFileUTIs;
      do
      {
        v71 = v68 + 1;
        if (v68 + 1 < v67)
        {
          v72 = 0;
          v73 = v68 + 1;
          do
          {
            if (v68 < 0 || v67 <= v68)
              PCArray_base::badIndex((PCArray_base *)v66);
            if (v73 < 0 || v73 >= v67)
              PCArray_base::badIndex((PCArray_base *)v66);
            v66 = ProShade::dependsOn(v194[v68], v194[v73]);
            v67 = HIDWORD(v193);
            if ((_DWORD)v66)
            {
              if (v68 < 0 || SHIDWORD(v193) <= v68)
                PCArray_base::badIndex((PCArray_base *)v66);
              v74 = v194;
              if (v73 < 0 || v73 >= SHIDWORD(v193))
                PCArray_base::badIndex((PCArray_base *)v66);
              v75 = v194[v68];
              v194[v68] = v194[v73];
              v74[v73] = v75;
              if (*((int *)v70 + 894) <= 1)
              {
                v72 = 1;
                v67 = HIDWORD(v193);
              }
              else
              {
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"swap #", 6);
                v76 = (_QWORD *)std::ostream::operator<<();
                v77 = (PCArray_base *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" ", 1);
                v78 = v77;
                if (v68 < 0 || SHIDWORD(v193) <= v68)
                  PCArray_base::badIndex(v77);
                if (*(_QWORD *)(v194[v68] + 64))
                  v79 = *(const char **)(v194[v68] + 64);
                else
                  v79 = "";
                v80 = strlen(v79);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)v79, v80);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" and #", 6);
                v81 = (_QWORD *)std::ostream::operator<<();
                v82 = (PCArray_base *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)" ", 1);
                v83 = v82;
                if (v73 < 0 || v73 >= SHIDWORD(v193))
                  PCArray_base::badIndex(v82);
                if (*(_QWORD *)(v194[v73] + 64))
                  v84 = *(const char **)(v194[v73] + 64);
                else
                  v84 = "";
                v85 = strlen(v84);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v84, v85);
                v66 = (uint64_t)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)":\n", 2);
                v67 = HIDWORD(v193);
                if (SHIDWORD(v193) < 1)
                {
                  v72 = 1;
                }
                else
                {
                  v86 = 0;
                  do
                  {
                    v87 = v194[v86];
                    v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)"    ", 4);
                    v89 = *(_QWORD *)(v87 + 16);
                    if (!v89)
                      throw_PCNullPointerException(1);
                    (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)v89 + 120))(&v211);
                    if (v211.__locale_)
                      v90 = (const char *)v211.__locale_;
                    else
                      v90 = "";
                    v91 = strlen(v90);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)v90, v91);
                    v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)" ", 1);
                    if (*(_QWORD *)(v87 + 64))
                      v93 = *(const char **)(v87 + 64);
                    else
                      v93 = "";
                    v94 = strlen(v93);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v93, v94);
                    v95 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)" = ", 3);
                    v96 = *(_QWORD *)(v87 + 16);
                    if (!v96)
                      throw_PCNullPointerException(1);
                    (*(void (**)(const char **__return_ptr))(*(_QWORD *)v96 + 16))(&v182);
                    if (v182)
                      v97 = v182;
                    else
                      v97 = "";
                    v98 = strlen(v97);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)v97, v98);
                    v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)";",
                            1);
                    std::ios_base::getloc((const std::ios_base *)((char *)v99 + *(_QWORD *)(*v99 - 24)));
                    v100 = std::locale::use_facet(v183, MEMORY[0x1E0DE4A90]);
                    ((void (*)(const std::locale::facet *, uint64_t))v100->__vftable[2].~facet_0)(v100, 10);
                    std::locale::~locale(v183);
                    std::ostream::put();
                    v66 = std::ostream::flush();
                    if (v182)
                    {
                      v101 = (unsigned int *)(v182 - 12);
                      do
                      {
                        v102 = __ldaxr(v101);
                        v103 = v102 - 1;
                      }
                      while (__stlxr(v103, v101));
                      if (!v103)
                      {
                        *v182 = 0;
                        if (v182)
                          v104 = (char *)(v182 - 12);
                        else
                          v104 = 0;
                        free(v104);
                      }
                    }
                    if (v211.__locale_)
                    {
                      v105 = (unsigned int *)((char *)v211.__locale_ - 12);
                      do
                      {
                        v106 = __ldaxr(v105);
                        v107 = v106 - 1;
                      }
                      while (__stlxr(v107, v105));
                      if (!v107)
                      {
                        *(_BYTE *)v211.__locale_ = 0;
                        if (v211.__locale_)
                          v108 = (char *)v211.__locale_ - 12;
                        else
                          v108 = 0;
                        free(v108);
                      }
                    }
                    ++v86;
                    v67 = HIDWORD(v193);
                  }
                  while (v86 < SHIDWORD(v193));
                  v72 = 1;
                  v70 = &projectFileUTIs_projectFileUTIs;
                }
              }
            }
            ++v73;
          }
          while (v73 < v67);
          if ((v72 & 1) != 0)
            v71 = v68;
          else
            v71 = v68 + 1;
        }
        v68 = v71;
      }
      while (v71 < v67);
      v4 = a2;
      if (v67 >= 1)
      {
        v109 = 0;
        v110 = (std::locale::id *)MEMORY[0x1E0DE4A90];
        do
        {
          v111 = v194[v109];
          v112 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)"    ", 4);
          v113 = *(_QWORD *)(v111 + 16);
          if (!v113)
            throw_PCNullPointerException(1);
          (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)v113 + 120))(&v211);
          if (v211.__locale_)
            v114 = (const char *)v211.__locale_;
          else
            v114 = "";
          v115 = strlen(v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)v114, v115);
          v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)" ", 1);
          if (*(_QWORD *)(v111 + 64))
            v117 = *(const char **)(v111 + 64);
          else
            v117 = "";
          v118 = strlen(v117);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v117, v118);
          v119 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)" = ", 3);
          v120 = *(_QWORD *)(v111 + 16);
          if (!v120)
            throw_PCNullPointerException(1);
          (*(void (**)(const char **__return_ptr))(*(_QWORD *)v120 + 16))(&v182);
          if (v182)
            v121 = v182;
          else
            v121 = "";
          v122 = strlen(v121);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)v121, v122);
          v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v119, (uint64_t)";", 1);
          std::ios_base::getloc((const std::ios_base *)((char *)v123 + *(_QWORD *)(*v123 - 24)));
          v124 = std::locale::use_facet(v183, v110);
          ((void (*)(const std::locale::facet *, uint64_t))v124->__vftable[2].~facet_0)(v124, 10);
          std::locale::~locale(v183);
          std::ostream::put();
          std::ostream::flush();
          v4 = a2;
          if (v182)
          {
            v125 = (unsigned int *)(v182 - 12);
            do
            {
              v126 = __ldaxr(v125);
              v127 = v126 - 1;
            }
            while (__stlxr(v127, v125));
            if (!v127)
            {
              *v182 = 0;
              if (v182)
                v128 = (char *)(v182 - 12);
              else
                v128 = 0;
              free(v128);
            }
          }
          if (v211.__locale_)
          {
            v129 = (unsigned int *)((char *)v211.__locale_ - 12);
            do
            {
              v130 = __ldaxr(v129);
              v131 = v130 - 1;
            }
            while (__stlxr(v131, v129));
            if (!v131)
            {
              *(_BYTE *)v211.__locale_ = 0;
              if (v211.__locale_)
                v132 = (char *)v211.__locale_ - 12;
              else
                v132 = 0;
              free(v132);
            }
          }
          ++v109;
        }
        while (v109 < SHIDWORD(v193));
      }
    }
  }
  if (*(int *)(v4 + 12) >= 1)
  {
    v133 = 0;
    v134 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v135 = *(_QWORD *)(v4 + 16);
      v136 = ProShade::findVar((uint64_t)&v199, v135 + 40 * v133);
      ProShade::NodeOperator::operator()(&v186, v136, (uint64_t)v183);
      v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)"    ", 4);
      if (*(_QWORD *)(v135 + 40 * v133 + 32))
        v138 = *(const char **)(v135 + 40 * v133 + 32);
      else
        v138 = "";
      v139 = strlen(v138);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v138, v139);
      v140 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)" = ", 3);
      if (!v184)
        throw_PCNullPointerException(1);
      (*(void (**)(const char **__return_ptr))(*(_QWORD *)v184 + 16))(&v182);
      if (v182)
        v141 = v182;
      else
        v141 = "";
      v142 = strlen(v141);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)v141, v142);
      v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)";", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v143 + *(_QWORD *)(*v143 - 24)));
      v144 = std::locale::use_facet(&v211, v134);
      ((void (*)(const std::locale::facet *, uint64_t))v144->__vftable[2].~facet_0)(v144, 10);
      std::locale::~locale(&v211);
      std::ostream::put();
      std::ostream::flush();
      v4 = a2;
      if (v182)
      {
        v145 = (unsigned int *)(v182 - 12);
        do
        {
          v146 = __ldaxr(v145);
          v147 = v146 - 1;
        }
        while (__stlxr(v147, v145));
        if (!v147)
        {
          *v182 = 0;
          if (v182)
            v148 = (char *)(v182 - 12);
          else
            v148 = 0;
          free(v148);
        }
      }
      v183[0].__locale_ = (std::locale::__imp *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v185);
      ++v133;
    }
    while (v133 < *(int *)(a2 + 12));
  }
  ProShade::deleteVars((unsigned int *)&v199);
  std::stringbuf::str();
  LiString::LiString(&v211, (const void **)&v183[0].__locale_);
  if (&v211 != (std::locale *)a3)
  {
    LiString::dec(a3);
    v149 = v211.__locale_;
    *(std::locale *)a3 = v211;
    if (!v149)
      goto LABEL_236;
    v150 = (unsigned int *)((char *)v149 - 12);
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 + 1, v150));
  }
  if (v211.__locale_)
  {
    v152 = (unsigned int *)((char *)v211.__locale_ - 12);
    do
    {
      v153 = __ldaxr(v152);
      v154 = v153 - 1;
    }
    while (__stlxr(v154, v152));
    if (!v154)
    {
      *(_BYTE *)v211.__locale_ = 0;
      if (v211.__locale_)
        v155 = (char *)v211.__locale_ - 12;
      else
        v155 = 0;
      free(v155);
      v211.__locale_ = 0;
    }
  }
LABEL_236:
  if (SHIBYTE(v184) < 0)
    operator delete(v183[0].__locale_);
  v156 = v197;
  if (v197 != (uint64_t *)v198)
  {
    do
    {
      v157 = (const PCString *)ProShade::Snippet::code((ProShade::Snippet *)v156[6]);
      PCString::PCString((PCString *)&v211, v157);
      PCString::append(v158, "\n");
      LiString::LiString((LiString *)v183, (PCString *)&v211);
      if (v183[0].__locale_)
        v159 = *((_DWORD *)v183[0].__locale_ - 2);
      else
        v159 = 0;
      LiString::append(a4, (const char *)v183[0].__locale_, v159);
      if (v183[0].__locale_)
      {
        v160 = (unsigned int *)((char *)v183[0].__locale_ - 12);
        do
        {
          v161 = __ldaxr(v160);
          v162 = v161 - 1;
        }
        while (__stlxr(v162, v160));
        if (!v162)
        {
          *(_BYTE *)v183[0].__locale_ = 0;
          if (v183[0].__locale_)
            v163 = (char *)v183[0].__locale_ - 12;
          else
            v163 = 0;
          free(v163);
          v183[0].__locale_ = 0;
        }
      }
      PCString::~PCString((PCString *)&v211);
      v164 = (uint64_t *)v156[1];
      if (v164)
      {
        do
        {
          v165 = v164;
          v164 = (uint64_t *)*v164;
        }
        while (v164);
      }
      else
      {
        do
        {
          v165 = (uint64_t *)v156[2];
          v166 = *v165 == (_QWORD)v156;
          v156 = v165;
        }
        while (!v166);
      }
      v156 = v165;
    }
    while (v165 != (uint64_t *)v198);
  }
  v186.__locale_ = (std::locale::__imp *)&unk_1E657E818;
  std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy((uint64_t)&v187, v188);
  v192 = &unk_1E656A1D0;
  if ((int)v193 < 0)
    v167 = 1;
  else
    v167 = v193 & ~((int)v193 >> 31);
  if (v167 == (_DWORD)v193)
  {
    v168 = SHIDWORD(v193);
    if (v193 < 0)
    {
      do
      {
        v194[v168] = 0;
        v169 = __CFADD__(v168++, 1);
      }
      while (!v169);
    }
  }
  else
  {
    if (v167)
    {
      v170 = (void *)operator new[]();
      bzero(v170, 8 * v167);
    }
    else
    {
      v170 = 0;
    }
    if (v194)
      MEMORY[0x1B5E2914C](v194, 0x1000C8077774924);
    v194 = v170;
  }
  v193 = v167;
  if (v194)
    MEMORY[0x1B5E2914C](v194, 0x1000C8077774924);
  std::__tree<std::__value_type<LiString,int>,std::__map_value_compare<LiString,std::__value_type<LiString,int>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,int>>>::destroy((uint64_t)&v195, v196[0]);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v197, v198[0]);
  v199 = &unk_1E656A1D0;
  if ((int)v200 < 0)
    v171 = 1;
  else
    v171 = v200 & ~((int)v200 >> 31);
  if (v171 == (_DWORD)v200)
  {
    v172 = SHIDWORD(v200);
    if (v200 < 0)
    {
      do
      {
        v201[v172] = 0;
        v169 = __CFADD__(v172++, 1);
      }
      while (!v169);
    }
  }
  else
  {
    if (v171)
    {
      v173 = (void *)operator new[]();
      bzero(v173, 8 * v171);
    }
    else
    {
      v173 = 0;
    }
    if (v201)
      MEMORY[0x1B5E2914C](v201, 0x1000C8077774924);
    v201 = v173;
  }
  v200 = v171;
  if (v201)
    MEMORY[0x1B5E2914C](v201, 0x1000C8077774924);
  v202 = &unk_1E656A208;
  if ((int)v203 < 0)
    v174 = 1;
  else
    v174 = v203;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v202, 0, v174);
  if (v204)
    MEMORY[0x1B5E2914C](v204, 0x1000C8077774924);
  v205 = &unk_1E656A208;
  if ((int)v206 < 0)
    v175 = 1;
  else
    v175 = v206;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v205, 0, v175);
  if (v207)
    MEMORY[0x1B5E2914C](v207, 0x1000C8077774924);
  v208[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v208 + *(_QWORD *)(v208[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v208[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v209 < 0)
    operator delete((void *)v208[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v210);
}

void sub_1B2CE633C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::locale a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,int a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,int a43,uint64_t a44,uint64_t a45,int a46,uint64_t a47,uint64_t a48,int a49,uint64_t a50,char a51)
{
  _Unwind_Resume(a1);
}

uint64_t ProShade::findVar(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int32x4_t v11;
  int32x4_t v12;

  ProShade::VarT<ProShade::Node>::hash(a2, (__n128 *)&v12);
  if (*(int *)(a1 + 12) < 1)
  {
LABEL_5:
    v6 = operator new();
    ProShade::ProgramVar::ProgramVar(v6, a2);
    v7 = *(_DWORD *)(a1 + 12);
    if (*(_DWORD *)(a1 + 8) <= v7)
      v8 = (2 * (v7 + 1)) | 1;
    else
      v8 = *(_DWORD *)(a1 + 8);
    PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(a1, v7 + 1, v8);
    v9 = 8 * *(int *)(a1 + 12) - 8;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + v9) = v6;
    return *(_QWORD *)(*(_QWORD *)(a1 + 16) + v9);
  }
  else
  {
    v4 = 0;
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4);
      ProShade::VarT<ProShade::Node>::hash(v5, (__n128 *)&v11);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v11, v12)))) & 1) == 0)
        break;
      if (++v4 >= *(int *)(a1 + 12))
        goto LABEL_5;
    }
  }
  return v5;
}

void sub_1B2CE69EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40D6048424);
  _Unwind_Resume(a1);
}

__n128 ProShade::VarT<ProShade::Node>::hash@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  __n128 *v4;
  __n128 result;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    throw_PCNullPointerException(1);
  v4 = (__n128 *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 48))(v3, 0);
  result = *v4;
  *a2 = *v4;
  return result;
}

BOOL ProShade::dependsOn(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const char **v5;
  BOOL v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v13 = 0;
    v14 = 0;
    v12 = &unk_1E656A208;
    goto LABEL_6;
  }
  if (!v5)
  {
    v13 = 0;
    v14 = 0;
    v12 = &unk_1E656A208;
    goto LABEL_9;
  }
  if (LiString::operator==(v5 + 4, (const char **)(a2 + 64)))
    return 1;
  v4 = *(_QWORD *)(a1 + 16);
  v13 = 0;
  v14 = 0;
  v12 = &unk_1E656A208;
  if (!v4)
LABEL_6:
    throw_PCNullPointerException(1);
LABEL_9:
  v7 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v4 + 64))(v4, &v12);
  v8 = HIDWORD(v13);
  if (SHIDWORD(v13) < 1)
  {
    v6 = 0;
  }
  else
  {
    v9 = 0;
    v6 = 1;
    do
    {
      if (v9 >= SHIDWORD(v13))
        PCArray_base::badIndex((PCArray_base *)v7);
      v7 = ProShade::dependsOn(v14 + 32 * v9, a2);
      if ((v7 & 1) != 0)
        break;
      v6 = ++v9 < v8;
    }
    while (v9 != v8);
  }
  v12 = &unk_1E656A208;
  if ((int)v13 < 0)
    v10 = 1;
  else
    v10 = v13;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v12, 0, v10);
  if (v14)
    MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
  return v6;
}

void sub_1B2CE6BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::deleteVars(unsigned int *a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v8;
  uint64_t v9;
  uint64_t result;

  v1 = a1;
  v2 = a1[3];
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if (i >= (int)v1[3])
        PCArray_base::badIndex((PCArray_base *)a1);
      a1 = *(unsigned int **)(*((_QWORD *)v1 + 2) + 8 * i);
      if (a1)
        a1 = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
    }
  }
  v4 = v1[2];
  if (v4 < 0)
    v5 = 1;
  else
    v5 = v4 & ~(v4 >> 31);
  if (v5 == v4)
  {
    v6 = (int)v1[3];
    if ((v6 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*((_QWORD *)v1 + 2) + 8 * v6) = 0;
      while (!__CFADD__(v6++, 1));
    }
  }
  else
  {
    if (v5)
    {
      v8 = (void *)operator new[]();
      bzero(v8, 8 * v5);
    }
    else
    {
      v8 = 0;
    }
    v9 = *((_QWORD *)v1 + 2);
    if (v9)
      MEMORY[0x1B5E2914C](v9, 0x1000C8077774924);
    *((_QWORD *)v1 + 2) = v8;
  }
  v1[2] = v5;
  v1[3] = 0;
  result = *((_QWORD *)v1 + 2);
  if (result)
    result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
  *((_QWORD *)v1 + 2) = 0;
  v1[2] = 0;
  return result;
}

uint64_t PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656A1D0;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A208;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void ProShade::Program::find_vars(PCArray_base *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t Var;
  PCSharedCount *v19;
  const void *v20;
  void *v21;
  void *v22;
  PC_Sp_counted_base *v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  PC_Sp_counted_base *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  char *v42;
  _DWORD *v43;
  _DWORD *v44;
  OZChannelBase *v45;
  const PCString *v46;
  int v47;
  int v48;
  void *v49;
  ProShade::SamplerNode *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  PC_Sp_counted_base *var0;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  PCSharedCount v68;
  uint64_t v69;
  uint64_t v70;
  PCSharedCount v71;
  PCSharedCount v72;
  PCSharedCount v73;
  PCSharedCount v74;
  PCSharedCount v75;
  void *v76;
  char v77;
  const void *v78;
  PCSharedCount v79;
  void *v80;
  char v81;
  uint64_t v82;
  PCSharedCount v83[2];

  v8 = *(_DWORD *)(a2 + 12);
  if (v8)
  {
    while (1)
    {
      if (v8 < 1)
        PCArray_base::badIndex(a1);
      v12 = *(_QWORD *)(a2 + 16);
      v80 = &unk_1E6569AC8;
      v81 = *(_BYTE *)(v12 + 8);
      v82 = *(_QWORD *)(v12 + 16);
      PCSharedCount::PCSharedCount(v83, (const PCSharedCount *)(v12 + 24));
      v13 = *(_DWORD *)(a2 + 12);
      LODWORD(v14) = v13 - 1;
      if (v13 > 1)
      {
        v15 = 0;
        v16 = 0;
        do
        {
          ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + v15, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v15 + 32));
          ++v16;
          v14 = *(int *)(a2 + 12) - 1;
          v15 += 32;
        }
        while (v16 < v14);
      }
      if (*(_DWORD *)(a2 + 8) >= (int)v14)
        v17 = *(_DWORD *)(a2 + 8);
      else
        v17 = (2 * v14) | 1;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v14, v17);
      Var = ProShade::findVar(a3, (uint64_t)&v80);
      v19 = (PCSharedCount *)Var;
      if (*(_BYTE *)(Var + 56))
        goto LABEL_78;
      *(_BYTE *)(Var + 56) = 1;
      v20 = *(const void **)(Var + 16);
      if (!a5)
      {
        if (v20)
        {
LABEL_46:
          if (v43)
          {
            v44 = v43;
            v45 = (OZChannelBase *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v43 + 136))(v43);
            if ((v45 & 1) == 0)
            {
              switch(v44[10])
              {
                case 0:
                case 3:
                  ProShade::Error<PCIllegalArgumentException>::raise(v45, v46);
                case 1:
                  v47 = *(_DWORD *)(a6 + 12);
                  if (*(_DWORD *)(a6 + 8) <= v47)
                    v48 = (2 * (v47 + 1)) | 1;
                  else
                    v48 = *(_DWORD *)(a6 + 8);
                  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(a6, v47 + 1, v48);
                  *(_QWORD *)(*(_QWORD *)(a6 + 16) + 8 * *(int *)(a6 + 12) - 8) = v19;
                  v76 = &unk_1E6569AC8;
                  v78 = v44;
                  PCSharedCount::PCSharedCount(&v79, (PCShared_base *)((char *)v44 + *(_QWORD *)(*(_QWORD *)v44 - 24)));
                  if (v49)
                  {
                    (*(void (**)(PCSharedCount *__return_ptr, void *))(*(_QWORD *)v49 + 160))(&v68, v49);
                    ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v76, &v68);
                    v68.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
                    PCSharedCount::~PCSharedCount(&v71);
                  }
                  if (v78)
                  {
                    if (v50)
                    {
                      ProShade::Sampler::Sampler((ProShade::Sampler *)&v68, v50);
                      v51 = *(_DWORD *)(a7 + 12);
                      if (*(_DWORD *)(a7 + 8) <= v51)
                        v52 = (2 * (v51 + 1)) | 1;
                      else
                        v52 = *(_DWORD *)(a7 + 8);
                      PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::resize(a7, v51 + 1, v52);
                      v53 = *(_QWORD *)(a7 + 16);
                      v54 = *(int *)(a7 + 12) - 1;
                      ProShade::VarT<ProShade::Node>::operator=(v53 + 96 * v54, &v68);
                      ProShade::VarT<ProShade::Node>::operator=(v53 + 96 * v54 + 32, &v72);
                      ProShade::VarT<ProShade::Node>::operator=(v53 + 96 * v54 + 64, &v74);
                      v68.var0 = (PC_Sp_counted_base *)&unk_1E656A018;
                      v74.var0 = (PC_Sp_counted_base *)&unk_1E656A080;
                      PCSharedCount::~PCSharedCount(&v75);
                      v72.var0 = (PC_Sp_counted_base *)&unk_1E656A080;
                      PCSharedCount::~PCSharedCount(&v73);
                      v68.var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
                      PCSharedCount::~PCSharedCount(&v71);
                    }
                  }
                  v76 = &unk_1E6569AC8;
                  PCSharedCount::~PCSharedCount(&v79);
                  break;
                case 2:
                  v55 = *(_DWORD *)(a8 + 12);
                  if (*(_DWORD *)(a8 + 8) <= v55)
                    v56 = (2 * (v55 + 1)) | 1;
                  else
                    v56 = *(_DWORD *)(a8 + 8);
                  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(a8, v55 + 1, v56);
                  *(_QWORD *)(*(_QWORD *)(a8 + 16) + 8 * *(int *)(a8 + 12) - 8) = v19;
                  break;
                default:
                  break;
              }
            }
          }
        }
LABEL_65:
        v68.var0 = (PC_Sp_counted_base *)&unk_1E656A208;
        v69 = 0;
        v70 = 0;
        var0 = v19[2].var0;
        if (!var0)
          throw_PCNullPointerException(1);
        (*(void (**)(PC_Sp_counted_base *, PCSharedCount *))(*(_QWORD *)var0 + 64))(var0, &v68);
        if (SHIDWORD(v69) >= 1)
        {
          v58 = 0;
          v59 = 0;
          do
          {
            v60 = v70;
            v61 = *(_DWORD *)(a2 + 12);
            if (*(_DWORD *)(a2 + 8) <= v61)
              v62 = (2 * (v61 + 1)) | 1;
            else
              v62 = *(_DWORD *)(a2 + 8);
            PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v61 + 1, v62);
            ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + 32 * *(int *)(a2 + 12) - 32, (const PCSharedCount *)(v60 + v58));
            ++v59;
            v58 += 32;
          }
          while (v59 < SHIDWORD(v69));
        }
        v68.var0 = (PC_Sp_counted_base *)&unk_1E656A208;
        if ((int)v69 < 0)
          v63 = 1;
        else
          v63 = v69;
        PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v68, 0, v63);
        if (v70)
          MEMORY[0x1B5E2914C](v70, 0x1000C8077774924);
        goto LABEL_78;
      }
      if (!v20)
        goto LABEL_65;
      if (!v21)
        goto LABEL_46;
      v22 = v21;
      LiString::format((LiString *)"_v%d", (LiString *)&v68, *(unsigned int *)(a5 + 12));
      if (&v68 == &v19[8])
        goto LABEL_18;
      LiString::dec((LiString *)&v19[8]);
      v23 = v68.var0;
      v19[8].var0 = v68.var0;
      if (v23)
        break;
LABEL_26:
      v30 = *(_DWORD *)(a5 + 12);
      if (*(_DWORD *)(a5 + 8) <= v30)
        v31 = (2 * (v30 + 1)) | 1;
      else
        v31 = *(_DWORD *)(a5 + 8);
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(a5, v30 + 1, v31);
      *(_QWORD *)(*(_QWORD *)(a5 + 16) + 8 * *(int *)(a5 + 12) - 8) = v19;
      v76 = &unk_1E6569AC8;
      v77 = *((_BYTE *)v22 + 56);
      v78 = (const void *)*((_QWORD *)v22 + 8);
      PCSharedCount::PCSharedCount(&v79, (const PCSharedCount *)v22 + 9);
      ProShade::Output::Output((uint64_t)&v68, (uint64_t *)&v19[8], (uint64_t)&v76);
      v32 = *(_DWORD *)(a4 + 12);
      if (*(_DWORD *)(a4 + 8) <= v32)
        v33 = (2 * (v32 + 1)) | 1;
      else
        v33 = *(_DWORD *)(a4 + 8);
      PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a4, v32 + 1, v33);
      v34 = *(_QWORD *)(a4 + 16);
      v35 = *(int *)(a4 + 12) - 1;
      ProShade::VarT<ProShade::Node>::operator=(v34 + 40 * v35, &v68);
      if ((PCSharedCount *)(v34 + 40 * v35) != &v68)
      {
        LiString::dec((LiString *)(v34 + 40 * v35 + 32));
        v36 = v72.var0;
        *(PCSharedCount *)(v34 + 40 * v35 + 32) = v72;
        if (v36)
        {
          v37 = (unsigned int *)((char *)v36 - 12);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 + 1, v37));
        }
      }
      v68.var0 = (PC_Sp_counted_base *)&unk_1E6569828;
      if (v72.var0)
      {
        v39 = (unsigned int *)((char *)v72.var0 - 12);
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          *(_BYTE *)v72.var0 = 0;
          if (v72.var0)
            v42 = (char *)v72.var0 - 12;
          else
            v42 = 0;
          free(v42);
          v72.var0 = 0;
        }
      }
      v68.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v71);
      v76 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v79);
LABEL_78:
      v80 = &unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(v83);
      v8 = *(_DWORD *)(a2 + 12);
      if (!v8)
        return;
    }
    v24 = (unsigned int *)((char *)v23 - 12);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 + 1, v24));
LABEL_18:
    if (v68.var0)
    {
      v26 = (unsigned int *)((char *)v68.var0 - 12);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        *(_BYTE *)v68.var0 = 0;
        if (v68.var0)
          v29 = (char *)v68.var0 - 12;
        else
          v29 = 0;
        free(v29);
      }
    }
    goto LABEL_26;
  }
}

void sub_1B2CE7504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,PCSharedCount *a21,uint64_t a22,PCSharedCount *a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  PCSharedCount *v26;
  uint64_t v27;
  uint64_t v28;

  *(_QWORD *)(v28 - 152) = v27 + 16;
  PCSharedCount::~PCSharedCount(a23);
  *(_QWORD *)(v28 - 120) = v27 + 16;
  PCSharedCount::~PCSharedCount(v26);
  _Unwind_Resume(a1);
}

uint64_t ProShade::VarT<ProShade::Node>::operator=(uint64_t a1, const PCSharedCount *a2)
{
  uint64_t *v3;
  PCSharedCount v5;

  *(PCSharedCount *)(a1 + 16) = a2[2];
  v3 = (uint64_t *)(a1 + 24);
  PCSharedCount::PCSharedCount(&v5, a2 + 3);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  return a1;
}

void sub_1B2CE7648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void ProShade::Sampler::~Sampler(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&unk_1E656A018;
  this[8].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(this + 11);
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(this + 7);
  this->var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(this + 3);
}

{
  this->var0 = (PC_Sp_counted_base *)&unk_1E656A018;
  this[8].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(this + 11);
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(this + 7);
  this->var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(this + 3);
  JUMPOUT(0x1B5E29170);
}

void ProShade::Error<PCIllegalArgumentException>::raise(OZChannelBase *a1, const PCString *a2)
{
  PCIllegalArgumentException *exception;

  OZChannelBase::setRangeName(a1, a2);
  exception = (PCIllegalArgumentException *)__cxa_allocate_exception(0x40uLL);
  PCIllegalArgumentException::PCIllegalArgumentException(exception);
}

void sub_1B2CE7700(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Program::varying_code@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE *v20;
  int v21;
  uint64_t result;
  _BYTE *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;

  LiString::LiString((LiString *)&v23, "varying");
  v24 = &unk_1E656A0E8;
  v25 = 0;
  v26 = 0;
  v27 = v23;
  if (v23)
  {
    v4 = (unsigned int *)(v23 - 12);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    if (v23)
    {
      v6 = (unsigned int *)(v23 - 12);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        *v23 = 0;
        if (v23)
          v9 = v23 - 12;
        else
          v9 = 0;
        free(v9);
      }
    }
  }
  if (*(int *)(a1 + 12) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10);
      (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v12 + 120))(&v23);
      ProShade::VariableList::add((ProShade::VariableList *)&v24, (const LiString *)&v23, (const LiString *)(v11 + 64));
      if (v23)
      {
        v13 = (unsigned int *)(v23 - 12);
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          *v23 = 0;
          if (v23)
            v16 = v23 - 12;
          else
            v16 = 0;
          free(v16);
        }
      }
      ++v10;
    }
    while (v10 < *(int *)(a1 + 12));
  }
  ProShade::VariableList::str(&v24, a2);
  if (v27)
  {
    v17 = (unsigned int *)(v27 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *v27 = 0;
      if (v27)
        v20 = v27 - 12;
      else
        v20 = 0;
      free(v20);
      v27 = 0;
    }
  }
  v24 = &unk_1E656A0E8;
  if ((int)v25 < 0)
    v21 = 1;
  else
    v21 = v25;
  PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::resize((uint64_t)&v24, 0, v21);
  result = v26;
  if (v26)
    return MEMORY[0x1B5E2914C](v26, 0x1000C8077774924);
  return result;
}

void sub_1B2CE7904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ProShade::VariableList::~VariableList((ProShade::VariableList *)va);
  _Unwind_Resume(a1);
}

void ProShade::VariableList::add(ProShade::VariableList *this, const LiString *a2, const LiString *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  v6 = *((_DWORD *)this + 3);
  if (*((_DWORD *)this + 2) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *((_DWORD *)this + 2);
  PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::resize((uint64_t)this, v6 + 1, v7);
  v8 = *((_QWORD *)this + 2) + 16 * (*((int *)this + 3) - 1);
  if ((const LiString *)v8 != a2)
  {
    LiString::dec((LiString *)v8);
    v9 = *(_QWORD *)a2;
    *(_QWORD *)v8 = *(_QWORD *)a2;
    if (v9)
    {
      v10 = (unsigned int *)(v9 - 12);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
  }
  if ((const LiString *)(v8 + 8) != a3)
  {
    LiString::dec((LiString *)(v8 + 8));
    v12 = *(_QWORD *)a3;
    *(_QWORD *)(v8 + 8) = *(_QWORD *)a3;
    if (v12)
    {
      v13 = (unsigned int *)(v12 - 12);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
    }
  }
}

uint64_t ProShade::VariableList::str@<X0>(void **this@<X0>, _QWORD *a2@<X8>)
{
  size_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  const char **v7;
  const char **v8;
  int v9;
  LiString *v10;
  const char *v11;
  const char *v12;
  int v13;
  size_t v14;
  unsigned int *v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  const char **v19;
  size_t v20;
  const char *v21;
  int v22;
  size_t v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  std::locale::id *v43;
  char *v44;
  const char *v45;
  size_t v46;
  _QWORD *v47;
  const char *v48;
  size_t v49;
  _QWORD *v50;
  const char *v51;
  size_t v52;
  _QWORD *v53;
  const std::locale::facet *v54;
  unsigned int v57;
  int v58;
  LiString *v59;
  std::locale v60;
  char v61;
  _QWORD v62[11];
  char v63;
  uint64_t v64;

  v3 = *((unsigned int *)this + 3);
  if ((_DWORD)v3)
    qsort(this[2], v3, 0x10uLL, (int (__cdecl *)(const void *, const void *))ProShade::VariableList::by_type);
  v4 = std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v62);
  v5 = *((_DWORD *)this + 3);
  if (v5 > 1)
  {
    v6 = 0;
    do
    {
      if ((v6 & 0x80000000) != 0)
        PCArray_base::badIndex((PCArray_base *)v4);
      v7 = (const char **)this[2];
      v8 = &v7[2 * v6];
      v9 = v6 + 1;
      if (v5 <= v9)
        PCArray_base::badIndex((PCArray_base *)v4);
      v4 = LiString::operator==(&v7[2 * v6], &v7[2 * v9]);
      if ((_DWORD)v4)
      {
        v12 = v8[1];
        v10 = (LiString *)(v8 + 1);
        v11 = v12;
        if (v12)
          v13 = *((_DWORD *)v11 - 2);
        else
          v13 = 0;
        v59 = v10;
        v14 = v13;
        v15 = (unsigned int *)malloc_type_malloc(v13 + 15, 0x8903763CuLL);
        v58 = v6 + 1;
        v16 = v9;
        atomic_store(1u, v15);
        v17 = v15 + 3;
        atomic_store(0, v15);
        v15[1] = v14 + 2;
        v15[2] = v14 + 3;
        memcpy(v15 + 3, v11, v14);
        *(_WORD *)&v17[v14] = 8236;
        v17[v14 + 2] = 0;
        do
          v18 = __ldaxr(v15);
        while (__stlxr(v18 + 1, v15));
        v57 = v6;
        v19 = &v7[2 * v9];
        v20 = (int)v15[1];
        v21 = v19[1];
        if (v21)
          v22 = *((_DWORD *)v21 - 2);
        else
          v22 = 0;
        v23 = v20 + v22;
        v24 = (unsigned int *)malloc_type_malloc(v23 + 13, 0x8903763CuLL);
        v24[1] = v23;
        v24[2] = v23 + 1;
        atomic_store(1u, v24);
        atomic_store(0, v24);
        memcpy(v24 + 3, v17, v20);
        memcpy((char *)v24 + v20 + 12, v21, v22);
        *((_BYTE *)v24 + v23 + 12) = 0;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
        LiString::dec(v59);
        *(_QWORD *)v59 = v24 + 3;
        do
          v26 = __ldaxr(v24);
        while (__stlxr(v26 + 1, v24));
        do
        {
          v27 = __ldaxr(v24);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v24));
        if (!v28)
          free(v24);
        do
        {
          v29 = __ldaxr(v15);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v15));
        if (!v30)
          free(v15);
        LODWORD(v31) = *((_DWORD *)this + 3) - 1;
        if ((int)v31 > v58)
        {
          do
          {
            v32 = this[2];
            LiString::dec((LiString *)&v32[2 * v16]);
            v33 = v16 + 1;
            v34 = v32[2 * v16 + 2];
            v32[2 * v16] = v34;
            if (v34)
            {
              v35 = (unsigned int *)(v34 - 12);
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 + 1, v35));
            }
            LiString::dec((LiString *)&v32[2 * v16 + 1]);
            v37 = v32[2 * v33 + 1];
            v32[2 * v16 + 1] = v37;
            if (v37)
            {
              v38 = (unsigned int *)(v37 - 12);
              do
                v39 = __ldaxr(v38);
              while (__stlxr(v39 + 1, v38));
            }
            v31 = *((int *)this + 3) - 1;
            ++v16;
          }
          while (v33 < v31);
        }
        if (*((_DWORD *)this + 2) >= (int)v31)
          v40 = *((_DWORD *)this + 2);
        else
          v40 = (2 * v31) | 1;
        PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::resize((uint64_t)this, v31, v40);
        v6 = v57;
      }
      else
      {
        ++v6;
      }
      v5 = *((_DWORD *)this + 3);
    }
    while ((int)v6 < v5 - 1);
  }
  if (v5 >= 1)
  {
    v41 = 0;
    v42 = 0;
    v43 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      v44 = (char *)this[2];
      if (this[3])
        v45 = (const char *)this[3];
      else
        v45 = "";
      v46 = strlen(v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v45, v46);
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" ", 1);
      if (*(_QWORD *)&v44[v41])
        v48 = *(const char **)&v44[v41];
      else
        v48 = "";
      v49 = strlen(v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
      v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" ", 1);
      if (*(_QWORD *)&v44[v41 + 8])
        v51 = *(const char **)&v44[v41 + 8];
      else
        v51 = "";
      v52 = strlen(v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v51, v52);
      v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)";", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v53 + *(_QWORD *)(*v53 - 24)));
      v54 = std::locale::use_facet(&v60, v43);
      ((void (*)(const std::locale::facet *, uint64_t))v54->__vftable[2].~facet_0)(v54, 10);
      std::locale::~locale(&v60);
      std::ostream::put();
      std::ostream::flush();
      ++v42;
      v41 += 16;
    }
    while (v42 < *((int *)this + 3));
  }
  std::stringbuf::str();
  LiString::LiString(a2, (const void **)&v60.__locale_);
  if (v61 < 0)
    operator delete(v60.__locale_);
  v62[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v62 + *(_QWORD *)(v62[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v62[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v63 < 0)
    operator delete((void *)v62[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v64);
}

void sub_1B2CE7ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void ProShade::VariableList::~VariableList(ProShade::VariableList *this)
{
  int v2;
  uint64_t v3;

  LiString::dec((ProShade::VariableList *)((char *)this + 24));
  *(_QWORD *)this = &unk_1E656A0E8;
  if (*((int *)this + 2) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)this + 2);
  PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::resize((uint64_t)this, 0, v2);
  v3 = *((_QWORD *)this + 2);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
}

uint64_t ProShade::Program::uniform_code@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, LiString *a3@<X8>)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  uint64_t v12;
  int v13;
  const void *v14;
  const char **v15;
  _QWORD *v16;
  const char *locale;
  size_t v18;
  _QWORD *v19;
  const char *v20;
  const char **v21;
  const char *v22;
  const char *v23;
  size_t v24;
  PCArray_base *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::locale::__imp *v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  PCArray_base *v38;
  const void *v39;
  int v40;
  char v41;
  unsigned int *v42;
  uint64_t v43;
  const char *v44;
  unsigned int v45;
  size_t v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  char *v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int v59;
  char *v60;
  char v61;
  const std::locale::facet *v62;
  const char *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  char *v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  _BYTE *v73;
  int v74;
  uint64_t result;
  uint64_t v76;
  uint64_t v77;
  LiString *v78;
  std::locale v79;
  char v80;
  _BYTE *v81;
  const char *v82;
  _QWORD v83[11];
  char v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;

  LiString::LiString((LiString *)v83, "uniform");
  v86 = &unk_1E656A0E8;
  v87 = 0;
  v88 = 0;
  v89 = (_BYTE *)v83[0];
  if (v83[0])
  {
    v6 = (unsigned int *)(v83[0] - 12);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    if (v83[0])
    {
      v8 = (unsigned int *)(v83[0] - 12);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        *(_BYTE *)v83[0] = 0;
        if (v83[0])
          v11 = (void *)(v83[0] - 12);
        else
          v11 = 0;
        free(v11);
      }
    }
  }
  *(_QWORD *)a3 = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v83);
  v78 = a3;
  if (*(int *)(a2 + 12) >= 1)
  {
    v12 = 0;
    v13 = *(_DWORD *)(a1 + 1364);
    v76 = a2;
    do
    {
      v14 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * v12) + 16);
      if (v14)
      else
        v15 = 0;
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"uniform ", 8);
      (*((void (**)(std::locale *__return_ptr, const char **))*v15 + 15))(&v79, v15);
      v77 = v12;
      if (v79.__locale_)
        locale = (const char *)v79.__locale_;
      else
        locale = "";
      v18 = strlen(locale);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)locale, v18);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" ", 1);
      v22 = v15[4];
      v21 = v15 + 4;
      v20 = v22;
      if (v22)
        v23 = v20;
      else
        v23 = "";
      v24 = strlen(v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v23, v24);
      v25 = (PCArray_base *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)";",
                              1);
      if (v79.__locale_)
      {
        v26 = (unsigned int *)((char *)v79.__locale_ - 12);
        do
        {
          v27 = __ldaxr(v26);
          v28 = v27 - 1;
        }
        while (__stlxr(v28, v26));
        if (!v28)
        {
          *(_BYTE *)v79.__locale_ = 0;
          if (v79.__locale_)
            v29 = (char *)v79.__locale_ - 12;
          else
            v29 = 0;
          free(v29);
        }
      }
      if (v13 >= 1)
      {
        v30 = 0;
        do
        {
          while (1)
          {
            if (*(_DWORD *)(a1 + 1364) <= (int)v30)
              PCArray_base::badIndex(v25);
            v31 = *(_QWORD *)(a1 + 1368);
            v32 = *(_QWORD *)(v31 + 72 * v30 + 48);
            if (v32)
              break;
            if ((int)++v30 >= v13)
              goto LABEL_85;
          }
          v33 = *(std::locale::__imp **)(v32 + 32);
          v79.__locale_ = v33;
          if (v33)
          {
            v34 = (unsigned int *)((char *)v33 - 12);
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 + 1, v34));
          }
          v25 = (PCArray_base *)LiString::operator==((const char **)&v79, v21);
          if ((_DWORD)v25
            && (v36 = v31 + 72 * v30, v38 = *(PCArray_base **)(v36 + 16), v37 = v36 + 16, (v25 = v38) != 0))
          {
            (*(void (**)(const char **__return_ptr))(*(_QWORD *)v25 + 16))(&v82);
            v25 = (PCArray_base *)LiString::operator==(&v82, (const char **)&v79);
            if ((v25 & 1) == 0)
            {
              if (!*(_QWORD *)v37)
                throw_PCNullPointerException(1);
              (*(void (**)(_BYTE **__return_ptr))(**(_QWORD **)v37 + 16))(&v81);
              v39 = v81;
              if (v81)
                v40 = *((_DWORD *)v81 - 2);
              else
                v40 = 0;
              v42 = (unsigned int *)malloc_type_malloc(v40 + 17, 0x8903763CuLL);
              v43 = v40 + 4;
              v42[2] = v40 + 5;
              atomic_store(1u, v42);
              atomic_store(0, v42);
              v42[3] = 539963168;
              v44 = (const char *)(v42 + 3);
              v42[1] = v43;
              memcpy(v42 + 4, v39, v40);
              *((_BYTE *)v42 + v43 + 12) = 0;
              do
                v45 = __ldaxr(v42);
              while (__stlxr(v45 + 1, v42));
              v46 = strlen(v44);
              v25 = (PCArray_base *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v44, v46);
              a3 = v78;
              do
              {
                v47 = __ldaxr(v42);
                v48 = v47 - 1;
              }
              while (__stlxr(v48, v42));
              if (!v48)
                free(v42);
              if (v81)
              {
                v49 = (unsigned int *)(v81 - 12);
                do
                {
                  v50 = __ldaxr(v49);
                  v51 = v50 - 1;
                }
                while (__stlxr(v51, v49));
                if (!v51)
                {
                  *v81 = 0;
                  if (v81)
                    v52 = v81 - 12;
                  else
                    v52 = 0;
                  free(v52);
                }
              }
            }
            if (v82)
            {
              v53 = (unsigned int *)(v82 - 12);
              do
              {
                v54 = __ldaxr(v53);
                v55 = v54 - 1;
              }
              while (__stlxr(v55, v53));
              if (!v55)
              {
                *v82 = 0;
                if (v82)
                  v56 = (char *)(v82 - 12);
                else
                  v56 = 0;
                free(v56);
              }
            }
            v41 = 0;
          }
          else
          {
            v41 = 1;
          }
          if (v79.__locale_)
          {
            v57 = (unsigned int *)((char *)v79.__locale_ - 12);
            do
            {
              v58 = __ldaxr(v57);
              v59 = v58 - 1;
            }
            while (__stlxr(v59, v57));
            if (!v59)
            {
              *(_BYTE *)v79.__locale_ = 0;
              if (v79.__locale_)
                v60 = (char *)v79.__locale_ - 12;
              else
                v60 = 0;
              free(v60);
            }
          }
          if ((int)++v30 < v13)
            v61 = v41;
          else
            v61 = 0;
        }
        while ((v61 & 1) != 0);
      }
LABEL_85:
      std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(_QWORD *)(v83[0] - 24)));
      a2 = v76;
      v62 = std::locale::use_facet(&v79, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
      std::locale::~locale(&v79);
      std::ostream::put();
      std::ostream::flush();
      v12 = v77 + 1;
    }
    while (v77 + 1 < *(int *)(v76 + 12));
  }
  std::stringbuf::str();
  LiString::LiString(&v82, (const void **)&v79.__locale_);
  if (&v82 != (const char **)a3)
  {
    LiString::dec(a3);
    v63 = v82;
    *(_QWORD *)a3 = v82;
    if (!v63)
      goto LABEL_98;
    v64 = (unsigned int *)(v63 - 12);
    do
      v65 = __ldaxr(v64);
    while (__stlxr(v65 + 1, v64));
  }
  if (v82)
  {
    v66 = (unsigned int *)(v82 - 12);
    do
    {
      v67 = __ldaxr(v66);
      v68 = v67 - 1;
    }
    while (__stlxr(v68, v66));
    if (!v68)
    {
      *v82 = 0;
      if (v82)
        v69 = (char *)(v82 - 12);
      else
        v69 = 0;
      free(v69);
      v82 = 0;
    }
  }
LABEL_98:
  if (v80 < 0)
    operator delete(v79.__locale_);
  v83[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v83 + *(_QWORD *)(v83[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v83[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v84 < 0)
    operator delete((void *)v83[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E290BC](&v85);
  if (v89)
  {
    v70 = (unsigned int *)(v89 - 12);
    do
    {
      v71 = __ldaxr(v70);
      v72 = v71 - 1;
    }
    while (__stlxr(v72, v70));
    if (!v72)
    {
      *v89 = 0;
      if (v89)
        v73 = v89 - 12;
      else
        v73 = 0;
      free(v73);
      v89 = 0;
    }
  }
  v86 = &unk_1E656A0E8;
  if ((int)v87 < 0)
    v74 = 1;
  else
    v74 = v87;
  PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::resize((uint64_t)&v86, 0, v74);
  result = v88;
  if (v88)
    return MEMORY[0x1B5E2914C](v88, 0x1000C8077774924);
  return result;
}

void sub_1B2CE862C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, LiString *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, _BYTE *a19, char a20)
{
  uint64_t v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (a19)
  {
    v22 = (unsigned int *)(a19 - 12);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      *a19 = 0;
      free(a19 - 12);
    }
  }
  if (a17 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a20);
  LiString::dec(a11);
  ProShade::VariableList::~VariableList((ProShade::VariableList *)(v20 - 120));
  _Unwind_Resume(a1);
}

BOOL LiString::operator==(const char **a1, const char **a2)
{
  const char *v2;
  const char *v3;
  BOOL v4;

  v2 = *a1;
  v3 = *a2;
  if (v2 == v3)
    return 1;
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  return !v4 && *((_DWORD *)v2 - 2) == *((_DWORD *)v3 - 2) && strcmp(v2, v3) == 0;
}

uint64_t ProShade::Program::attribute_code@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  const void *v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE *v20;
  int v21;
  uint64_t result;
  _BYTE *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;

  LiString::LiString((LiString *)&v23, "attribute");
  v24 = &unk_1E656A0E8;
  v25 = 0;
  v26 = 0;
  v27 = v23;
  if (v23)
  {
    v4 = (unsigned int *)(v23 - 12);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
    if (v23)
    {
      v6 = (unsigned int *)(v23 - 12);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        *v23 = 0;
        if (v23)
          v9 = v23 - 12;
        else
          v9 = 0;
        free(v9);
      }
    }
  }
  if (*(int *)(a1 + 12) >= 1)
  {
    v10 = 0;
    do
    {
      v11 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) + 16);
      if (v11)
      else
        v12 = 0;
      (*(void (**)(_BYTE **__return_ptr, char *))(*(_QWORD *)v12 + 120))(&v23, v12);
      ProShade::VariableList::add((ProShade::VariableList *)&v24, (const LiString *)&v23, (const LiString *)(v12 + 32));
      if (v23)
      {
        v13 = (unsigned int *)(v23 - 12);
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
        {
          *v23 = 0;
          if (v23)
            v16 = v23 - 12;
          else
            v16 = 0;
          free(v16);
        }
      }
      ++v10;
    }
    while (v10 < *(int *)(a1 + 12));
  }
  ProShade::VariableList::str(&v24, a2);
  if (v27)
  {
    v17 = (unsigned int *)(v27 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *v27 = 0;
      if (v27)
        v20 = v27 - 12;
      else
        v20 = 0;
      free(v20);
      v27 = 0;
    }
  }
  v24 = &unk_1E656A0E8;
  if ((int)v25 < 0)
    v21 = 1;
  else
    v21 = v25;
  PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::resize((uint64_t)&v24, 0, v21);
  result = v26;
  if (v26)
    return MEMORY[0x1B5E2914C](v26, 0x1000C8077774924);
  return result;
}

void sub_1B2CE8A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  ProShade::VariableList::~VariableList((ProShade::VariableList *)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Program::fragment_code(PCArray_base *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const PCSharedCount *v9;
  PC_Sp_counted_base *var0;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  PSShaderBase *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  char *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  void *v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  int v55;
  uint64_t result;
  const char *v59;
  PCString v60;
  const char *v61;
  char *v62;
  const char *v63;
  const char *v64;
  PCSharedCount v65;
  PCSharedCount **v66;
  PCSharedCount *v67;
  PCSharedCount v68;
  char v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  _QWORD *v79;
  PCSharedCount v80[2];
  uint64_t v81;
  PCSharedCount v82;
  void *v83;
  PCSharedCount **v84;
  PCSharedCount *v85[2];
  char v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;

  v6 = (uint64_t)a1;
  v89 = 0;
  v87 = &unk_1E656A208;
  v88 = 0;
  v85[0] = 0;
  v85[1] = 0;
  v83 = &unk_1E656A120;
  v84 = v85;
  v86 = a5;
  if (*(int *)(a2 + 12) >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v7);
      var0 = v9[2].var0;
      if (!var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PCSharedCount *__return_ptr, PC_Sp_counted_base *, uint64_t))(*(_QWORD *)var0 + 80))(v80, var0, v6 + 1320);
      if (!v81)
        throw_PCNullPointerException(1);
      (*(void (**)(PCSharedCount *__return_ptr, uint64_t, void **))(*(_QWORD *)v81 + 80))(&v65, v81, &v83);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v9, &v65);
      v65.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v68);
      v80[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v82);
      if ((int)v88 <= SHIDWORD(v88))
        v11 = (2 * (HIDWORD(v88) + 1)) | 1;
      else
        v11 = v88;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v87, HIDWORD(v88) + 1, v11);
      a1 = (PCArray_base *)ProShade::VarT<ProShade::Node>::operator=(v89 + 32 * SHIDWORD(v88) - 32, v9);
      ++v8;
      v7 += 40;
    }
    while (v8 < *(int *)(a2 + 12));
  }
  v78 = 0;
  v79 = 0;
  v76 = 0;
  v77 = &unk_1E656A1D0;
  v74 = &unk_1E656A1D0;
  v75 = 0;
  v72 = 0;
  v73 = 0;
  v71 = &unk_1E656A300;
  ProShade::Program::find_vars(a1, (uint64_t)&v87, v6 + 1424, a3, a4, (uint64_t)&v77, (uint64_t)&v71, 0);
  v67 = 0;
  v68.var0 = 0;
  v65.var0 = (PC_Sp_counted_base *)&unk_1E6569D68;
  v66 = &v67;
  v69 = 0;
  v70 = a4;
  if (*(int *)(a2 + 12) >= 1)
  {
    v12 = 0;
    v13 = 16;
    do
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_QWORD *)(v14 + v13);
      if (!v15)
        throw_PCNullPointerException(1);
      (*(void (**)(PCSharedCount *__return_ptr, uint64_t, PCSharedCount *))(*(_QWORD *)v15 + 80))(v80, v15, &v65);
      ProShade::VarT<ProShade::Node>::operator=(v14 + v13 - 16, v80);
      v80[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v82);
      ++v12;
      v13 += 40;
    }
    while (v12 < *(int *)(a2 + 12));
  }
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::append(v6 + 1448, (uint64_t)&v71);
  LiString::LiString((LiString *)v80, "#version 120\n#extension GL_EXT_gpu_shader4 : require\n");
  ProShade::Program::uniform_code(v6, (uint64_t)&v77, (LiString *)&v64);
  ProShade::Program::varying_code(a4, &v63);
  v61 = 0;
  v62 = 0;
  ProShade::Program::shader(v6, a2, (LiString *)&v62, (LiString *)&v61);
  *(_BYTE *)(v6 + 9) = 1;
  if (v80[0].var0)
    v16 = (const char *)v80[0].var0;
  else
    v16 = "";
  PCString::PCString(&v60, v16);
  v17 = (PSShaderBase *)(v6 + 80);
  PSShaderBase::setSource(v17, &v60, 0);
  PCString::~PCString(&v60);
  if (v64)
    v18 = v64;
  else
    v18 = "";
  PCString::PCString(&v60, v18);
  PSShaderBase::setSource(v17, &v60, 1);
  PCString::~PCString(&v60);
  if (v63)
    v19 = v63;
  else
    v19 = "";
  PCString::PCString(&v60, v19);
  PSShaderBase::setSource(v17, &v60, 4);
  PCString::~PCString(&v60);
  if (v61)
    v20 = v61;
  else
    v20 = "";
  PCString::PCString(&v60, v20);
  PSShaderBase::setSource(v17, &v60, 5);
  PCString::~PCString(&v60);
  ProShade::makeMain((const void **)&v62, &v59);
  v21 = v59;
  if (v59)
    v22 = v59;
  else
    v22 = "";
  PCString::PCString(&v60, v22);
  PSShaderBase::setSource(v17, &v60, 6);
  PCString::~PCString(&v60);
  if (v21)
  {
    v23 = (unsigned int *)(v21 - 12);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      v26 = v59;
      *v59 = 0;
      free((void *)(v26 - 12));
    }
  }
  if (v61)
  {
    v27 = (unsigned int *)(v61 - 12);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      *v61 = 0;
      if (v61)
        v30 = (char *)(v61 - 12);
      else
        v30 = 0;
      free(v30);
    }
  }
  if (v62)
  {
    v31 = (unsigned int *)(v62 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *v62 = 0;
      if (v62)
        v34 = v62 - 12;
      else
        v34 = 0;
      free(v34);
    }
  }
  if (v63)
  {
    v35 = (unsigned int *)(v63 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v63 = 0;
      if (v63)
        v38 = (char *)(v63 - 12);
      else
        v38 = 0;
      free(v38);
    }
  }
  if (v64)
  {
    v39 = (unsigned int *)(v64 - 12);
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      *v64 = 0;
      if (v64)
        v42 = (char *)(v64 - 12);
      else
        v42 = 0;
      free(v42);
    }
  }
  if (v80[0].var0)
  {
    v43 = (unsigned int *)((char *)v80[0].var0 - 12);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      *(_BYTE *)v80[0].var0 = 0;
      if (v80[0].var0)
        v46 = (char *)v80[0].var0 - 12;
      else
        v46 = 0;
      free(v46);
    }
  }
  v65.var0 = (PC_Sp_counted_base *)&unk_1E657E818;
  std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy((uint64_t)&v66, v67);
  v71 = &unk_1E656A300;
  if ((int)v72 < 0)
    v47 = 1;
  else
    v47 = v72;
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::resize((uint64_t)&v71, 0, v47);
  if (v73)
    MEMORY[0x1B5E2914C](v73, 0x1000C8077774924);
  v74 = &unk_1E656A1D0;
  if ((int)v75 < 0)
    v48 = 1;
  else
    v48 = v75 & ~((int)v75 >> 31);
  if (v48 != (_DWORD)v75)
  {
    if (v48)
    {
      v50 = (void *)operator new[]();
      bzero(v50, 8 * v48);
    }
    else
    {
      v50 = 0;
    }
    if (v76)
      MEMORY[0x1B5E2914C](v76, 0x1000C8077774924);
    v76 = v50;
LABEL_97:
    v75 = v48;
    if (!v50)
      goto LABEL_99;
    goto LABEL_98;
  }
  v49 = SHIDWORD(v75);
  if ((v75 & 0x8000000000000000) == 0)
  {
    v50 = v76;
    goto LABEL_97;
  }
  v50 = v76;
  do
  {
    *((_QWORD *)v50 + v49) = 0;
    v51 = __CFADD__(v49++, 1);
  }
  while (!v51);
  v75 = v48;
LABEL_98:
  MEMORY[0x1B5E2914C](v50, 0x1000C8077774924);
LABEL_99:
  v77 = &unk_1E656A1D0;
  if ((int)v78 < 0)
    v52 = 1;
  else
    v52 = v78 & ~((int)v78 >> 31);
  if (v52 == (_DWORD)v78)
  {
    v53 = SHIDWORD(v78);
    if (v78 < 0)
    {
      do
      {
        v79[v53] = 0;
        v51 = __CFADD__(v53++, 1);
      }
      while (!v51);
    }
  }
  else
  {
    if (v52)
    {
      v54 = (void *)operator new[]();
      bzero(v54, 8 * v52);
    }
    else
    {
      v54 = 0;
    }
    if (v79)
      MEMORY[0x1B5E2914C](v79, 0x1000C8077774924);
    v79 = v54;
  }
  v78 = v52;
  if (v79)
    MEMORY[0x1B5E2914C](v79, 0x1000C8077774924);
  v83 = &unk_1E657E818;
  std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy((uint64_t)&v84, v85[0]);
  v87 = &unk_1E656A208;
  if ((int)v88 < 0)
    v55 = 1;
  else
    v55 = v88;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v87, 0, v55);
  result = v89;
  if (v89)
    return MEMORY[0x1B5E2914C](v89, 0x1000C8077774924);
  return result;
}

void sub_1B2CE9238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _BYTE *a13, PCString a14, _BYTE *a15, _BYTE *a16, _BYTE *a17, _BYTE *a18, void *a19, uint64_t a20,PCSharedCount *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  void *v58;

  PCString::~PCString(&a14);
  if (v31)
  {
    v34 = (unsigned int *)(v31 - 12);
    do
    {
      v35 = __ldaxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
    {
      *a13 = 0;
      free(a13 - 12);
    }
  }
  if (a15)
  {
    v37 = (unsigned int *)(a15 - 12);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      *a15 = 0;
      if (a15)
        v40 = a15 - 12;
      else
        v40 = 0;
      free(v40);
    }
  }
  if (a16)
  {
    v41 = (unsigned int *)(a16 - 12);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      *a16 = 0;
      if (a16)
        v44 = a16 - 12;
      else
        v44 = 0;
      free(v44);
    }
  }
  if (a17)
  {
    v45 = (unsigned int *)(a17 - 12);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      *a17 = 0;
      if (a17)
        v48 = a17 - 12;
      else
        v48 = 0;
      free(v48);
    }
  }
  if (a18)
  {
    v49 = (unsigned int *)(a18 - 12);
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      *a18 = 0;
      if (a18)
        v52 = a18 - 12;
      else
        v52 = 0;
      free(v52);
    }
  }
  v53 = *(_QWORD *)(v32 - 184);
  if (v53)
  {
    v54 = (unsigned int *)(v53 - 12);
    do
    {
      v55 = __ldaxr(v54);
      v56 = v55 - 1;
    }
    while (__stlxr(v56, v54));
    if (!v56)
    {
      **(_BYTE **)(v32 - 184) = 0;
      v57 = *(_QWORD *)(v32 - 184);
      if (v57)
        v58 = (void *)(v57 - 12);
      else
        v58 = 0;
      free(v58);
    }
  }
  a19 = &unk_1E657E818;
  std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy(a10, a21);
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::~PCArray((uint64_t)&a25);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray((uint64_t)&a28);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray((uint64_t)&a31);
  *(_QWORD *)(v32 - 152) = &unk_1E657E818;
  std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy(a11, *(PCSharedCount **)(v32 - 136));
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v32 - 112);
  _Unwind_Resume(a1);
}

uint64_t PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::append(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const PCSharedCount *v11;
  uint64_t v12;

  v4 = *(int *)(a1 + 12);
  v5 = *(_DWORD *)(a2 + 12) + v4;
  if (*(_DWORD *)(a1 + 8) >= v5)
    v6 = *(_DWORD *)(a1 + 8);
  else
    v6 = (2 * v5) | 1;
  result = PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::resize(a1, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 96 * v4;
    do
    {
      v11 = (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8);
      v12 = *(_QWORD *)(a1 + 16) + v10 + v8;
      ProShade::VarT<ProShade::Node>::operator=(v12, v11);
      ProShade::VarT<ProShade::Node>::operator=(v12 + 32, v11 + 4);
      result = ProShade::VarT<ProShade::Node>::operator=(v12 + 64, v11 + 8);
      ++v9;
      v8 += 96;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return result;
}

void ProShade::makeMain(const void **this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  int v5;
  size_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  size_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  v4 = *this;
  if (*this)
    v5 = *(v4 - 2);
  else
    v5 = 0;
  v6 = v5;
  v7 = v5 + 14;
  v8 = v5 + 15;
  v9 = (unsigned int *)malloc_type_malloc(v5 + 27, 0x8903763CuLL);
  v9[2] = v8;
  atomic_store(1u, v9);
  atomic_store(0, v9);
  qmemcpy(v9 + 3, "void main() {\n", 14);
  v9[1] = v7;
  memcpy((char *)v9 + 26, v4, v6);
  *((_BYTE *)v9 + v7 + 12) = 0;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = (int)v9[1];
  v12 = (unsigned int *)malloc_type_malloc(v11 + 15, 0x8903763CuLL);
  v12[1] = v11 + 2;
  v12[2] = v11 + 3;
  atomic_store(1u, v12);
  v13 = v12 + 3;
  atomic_store(0, v12);
  memcpy(v12 + 3, v9 + 3, v11);
  *(_WORD *)((char *)v13 + v11) = 2685;
  *((_BYTE *)v13 + v11 + 2) = 0;
  *a2 = v12 + 3;
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 + 1, v12));
  do
  {
    v15 = __ldaxr(v9);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v9));
  if (!v16)
    free(v9);
}

void sub_1B2CE96E0(_Unwind_Exception *exception_object)
{
  unsigned int *v1;
  unsigned int v3;
  unsigned int v4;

  do
  {
    v3 = __ldaxr(v1);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v1));
  if (!v4)
    free(v1);
  _Unwind_Resume(exception_object);
}

uint64_t PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A300;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t ProShade::Program::vertex_code(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const PCSharedCount *v8;
  PC_Sp_counted_base *var0;
  int v10;
  const char *v11;
  PSShaderBase *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  const char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  char *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  char *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  BOOL v50;
  void *v51;
  unsigned int v52;
  uint64_t v53;
  void *v54;
  int v55;
  uint64_t result;
  const char *v57;
  PCString v58;
  const char *v59;
  char *v60;
  const char *v61;
  const char *v62;
  const char *v63;
  const char *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  PCSharedCount v71;
  uint64_t v72;
  _QWORD *v73;
  PCSharedCount v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;

  v5 = (uint64_t)a1;
  v76 = 0;
  v77 = 0;
  v75 = &unk_1E656A208;
  if (*(int *)(a2 + 12) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v6);
      var0 = v8[2].var0;
      if (!var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PCSharedCount *__return_ptr, PC_Sp_counted_base *, uint64_t))(*(_QWORD *)var0 + 80))(&v71, var0, v5 + 1320);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)v8, &v71);
      v71.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v74);
      if ((int)v76 <= SHIDWORD(v76))
        v10 = (2 * (HIDWORD(v76) + 1)) | 1;
      else
        v10 = v76;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v75, HIDWORD(v76) + 1, v10);
      a1 = (PCArray_base *)ProShade::VarT<ProShade::Node>::operator=(v77 + 32 * SHIDWORD(v76) - 32, v8);
      ++v7;
      v6 += 40;
    }
    while (v7 < *(int *)(a2 + 12));
  }
  v72 = 0;
  v73 = 0;
  v70 = 0;
  v71.var0 = (PC_Sp_counted_base *)&unk_1E656A1D0;
  v68 = &unk_1E656A1D0;
  v69 = 0;
  v66 = 0;
  v67 = 0;
  v65 = &unk_1E656A300;
  ProShade::Program::find_vars(a1, (uint64_t)&v75, v5 + 1400, 0, 0, (uint64_t)&v71, (uint64_t)&v65, (uint64_t)&v68);
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::append(v5 + 1448, (uint64_t)&v65);
  LiString::LiString((LiString *)&v64, "#version 120\n#extension GL_EXT_gpu_shader4 : require\n");
  ProShade::Program::uniform_code(v5, (uint64_t)&v71, (LiString *)&v63);
  ProShade::Program::attribute_code((uint64_t)&v68, &v62);
  ProShade::Program::varying_code(a3, &v61);
  v59 = 0;
  v60 = 0;
  ProShade::Program::shader(v5, a2, (LiString *)&v60, (LiString *)&v59);
  *(_BYTE *)(v5 + 8) = 1;
  if (v64)
    v11 = v64;
  else
    v11 = "";
  PCString::PCString(&v58, v11);
  v12 = (PSShaderBase *)(v5 + 16);
  PSShaderBase::setSource(v12, &v58, 0);
  PCString::~PCString(&v58);
  if (v63)
    v13 = v63;
  else
    v13 = "";
  PCString::PCString(&v58, v13);
  PSShaderBase::setSource(v12, &v58, 1);
  PCString::~PCString(&v58);
  if (v62)
    v14 = v62;
  else
    v14 = "";
  PCString::PCString(&v58, v14);
  PSShaderBase::setSource(v12, &v58, 3);
  PCString::~PCString(&v58);
  if (v61)
    v15 = v61;
  else
    v15 = "";
  PCString::PCString(&v58, v15);
  PSShaderBase::setSource(v12, &v58, 4);
  PCString::~PCString(&v58);
  if (v59)
    v16 = v59;
  else
    v16 = "";
  PCString::PCString(&v58, v16);
  PSShaderBase::setSource(v12, &v58, 5);
  PCString::~PCString(&v58);
  ProShade::makeMain((const void **)&v60, &v57);
  v17 = v57;
  if (v57)
    v18 = v57;
  else
    v18 = "";
  PCString::PCString(&v58, v18);
  PSShaderBase::setSource(v12, &v58, 6);
  PCString::~PCString(&v58);
  if (v17)
  {
    v19 = (unsigned int *)(v17 - 12);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      v22 = v57;
      *v57 = 0;
      free((void *)(v22 - 12));
    }
  }
  if (v59)
  {
    v23 = (unsigned int *)(v59 - 12);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      *v59 = 0;
      if (v59)
        v26 = (char *)(v59 - 12);
      else
        v26 = 0;
      free(v26);
    }
  }
  if (v60)
  {
    v27 = (unsigned int *)(v60 - 12);
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      *v60 = 0;
      if (v60)
        v30 = v60 - 12;
      else
        v30 = 0;
      free(v30);
    }
  }
  if (v61)
  {
    v31 = (unsigned int *)(v61 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *v61 = 0;
      if (v61)
        v34 = (char *)(v61 - 12);
      else
        v34 = 0;
      free(v34);
    }
  }
  if (v62)
  {
    v35 = (unsigned int *)(v62 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v62 = 0;
      if (v62)
        v38 = (char *)(v62 - 12);
      else
        v38 = 0;
      free(v38);
    }
  }
  if (v63)
  {
    v39 = (unsigned int *)(v63 - 12);
    do
    {
      v40 = __ldaxr(v39);
      v41 = v40 - 1;
    }
    while (__stlxr(v41, v39));
    if (!v41)
    {
      *v63 = 0;
      if (v63)
        v42 = (char *)(v63 - 12);
      else
        v42 = 0;
      free(v42);
    }
  }
  if (v64)
  {
    v43 = (unsigned int *)(v64 - 12);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while (__stlxr(v45, v43));
    if (!v45)
    {
      *v64 = 0;
      if (v64)
        v46 = (char *)(v64 - 12);
      else
        v46 = 0;
      free(v46);
    }
  }
  v65 = &unk_1E656A300;
  if ((int)v66 < 0)
    v47 = 1;
  else
    v47 = v66;
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::resize((uint64_t)&v65, 0, v47);
  if (v67)
    MEMORY[0x1B5E2914C](v67, 0x1000C8077774924);
  v68 = &unk_1E656A1D0;
  if ((int)v69 < 0)
    v48 = 1;
  else
    v48 = v69 & ~((int)v69 >> 31);
  if (v48 == (_DWORD)v69)
  {
    v49 = SHIDWORD(v69);
    if (v69 < 0)
    {
      do
      {
        v70[v49] = 0;
        v50 = __CFADD__(v49++, 1);
      }
      while (!v50);
    }
  }
  else
  {
    if (v48)
    {
      v51 = (void *)operator new[]();
      bzero(v51, 8 * v48);
    }
    else
    {
      v51 = 0;
    }
    if (v70)
      MEMORY[0x1B5E2914C](v70, 0x1000C8077774924);
    v70 = v51;
  }
  v69 = v48;
  if (v70)
    MEMORY[0x1B5E2914C](v70, 0x1000C8077774924);
  v71.var0 = (PC_Sp_counted_base *)&unk_1E656A1D0;
  if ((int)v72 < 0)
    v52 = 1;
  else
    v52 = v72 & ~((int)v72 >> 31);
  if (v52 == (_DWORD)v72)
  {
    v53 = SHIDWORD(v72);
    if (v72 < 0)
    {
      do
      {
        v73[v53] = 0;
        v50 = __CFADD__(v53++, 1);
      }
      while (!v50);
    }
  }
  else
  {
    if (v52)
    {
      v54 = (void *)operator new[]();
      bzero(v54, 8 * v52);
    }
    else
    {
      v54 = 0;
    }
    if (v73)
      MEMORY[0x1B5E2914C](v73, 0x1000C8077774924);
    v73 = v54;
  }
  v72 = v52;
  if (v73)
    MEMORY[0x1B5E2914C](v73, 0x1000C8077774924);
  v75 = &unk_1E656A208;
  if ((int)v76 < 0)
    v55 = 1;
  else
    v55 = v76;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v75, 0, v55);
  result = v77;
  if (v77)
    return MEMORY[0x1B5E2914C](v77, 0x1000C8077774924);
  return result;
}

void sub_1B2CE9DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, PCString a10, _BYTE *a11, _BYTE *a12, _BYTE *a13, _BYTE *a14, _BYTE *a15, _BYTE *a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  _BYTE *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  _BYTE *v52;

  PCString::~PCString(&a10);
  if (v23)
  {
    v26 = (unsigned int *)(v23 - 12);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a11)
  {
    v29 = (unsigned int *)(a11 - 12);
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      *a11 = 0;
      if (a11)
        v32 = a11 - 12;
      else
        v32 = 0;
      free(v32);
    }
  }
  if (a12)
  {
    v33 = (unsigned int *)(a12 - 12);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      *a12 = 0;
      if (a12)
        v36 = a12 - 12;
      else
        v36 = 0;
      free(v36);
    }
  }
  if (a13)
  {
    v37 = (unsigned int *)(a13 - 12);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      *a13 = 0;
      if (a13)
        v40 = a13 - 12;
      else
        v40 = 0;
      free(v40);
    }
  }
  if (a14)
  {
    v41 = (unsigned int *)(a14 - 12);
    do
    {
      v42 = __ldaxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
    {
      *a14 = 0;
      if (a14)
        v44 = a14 - 12;
      else
        v44 = 0;
      free(v44);
    }
  }
  if (a15)
  {
    v45 = (unsigned int *)(a15 - 12);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while (__stlxr(v47, v45));
    if (!v47)
    {
      *a15 = 0;
      if (a15)
        v48 = a15 - 12;
      else
        v48 = 0;
      free(v48);
    }
  }
  if (a16)
  {
    v49 = (unsigned int *)(a16 - 12);
    do
    {
      v50 = __ldaxr(v49);
      v51 = v50 - 1;
    }
    while (__stlxr(v51, v49));
    if (!v51)
    {
      *a16 = 0;
      if (a16)
        v52 = a16 - 12;
      else
        v52 = 0;
      free(v52);
    }
  }
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::~PCArray((uint64_t)&a17);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray((uint64_t)&a20);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray((uint64_t)&a23);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v24 - 112);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Program::code(uint64_t this)
{
  uint64_t v1;
  PCGLSLException *exception;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  const PCString *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  GLint v15;
  unsigned int v16;
  uint64_t v17;
  void *v19;
  int v20;
  int v21;
  PCGLSLException *v22;
  PCGLSLException *v23;
  PCString v24;
  GLint params;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  PCString v32;
  uint64_t v33;
  uint64_t v34;

  v1 = this;
  if (*(_BYTE *)(this + 8))
  {
    if (*(_BYTE *)(this + 1544))
    {
      exception = (PCGLSLException *)__cxa_allocate_exception(0x48uLL);
      PCString::PCString(&v32, "error already detected building this program");
      PCGLSLException::PCGLSLException(exception, &v32);
    }
  }
  else
  {
    v3 = this + 1352;
    if (*(int *)(v1 + 1360) < 0)
      v4 = 1;
    else
      v4 = *(_DWORD *)(v1 + 1360);
    PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::resize(v3, 0, v4);
    v5 = *(_QWORD *)(v1 + 1368);
    if (v5)
      MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
    *(_QWORD *)(v1 + 1368) = 0;
    *(_DWORD *)(v1 + 1360) = 0;
    if (*(int *)(v1 + 1456) < 0)
      v6 = 1;
    else
      v6 = *(_DWORD *)(v1 + 1456);
    PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::resize(v1 + 1448, 0, v6);
    v7 = *(_QWORD *)(v1 + 1464);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(v1 + 1464) = 0;
    *(_DWORD *)(v1 + 1456) = 0;
    v33 = 0;
    v34 = 0;
    v32.var0 = (__CFString *)&unk_1E656A338;
    ProShade::VertexProgram::addOutputs((const PCSharedCount *)(v1 + 272), (uint64_t)&v32);
    v30 = 0;
    v31 = 0;
    v29 = &unk_1E656A338;
    ProShade::FragmentProgram::addOutputs((const PCSharedCount *)(v1 + 912), (uint64_t)&v29);
    v8 = *(_DWORD *)(v1 + 1312);
    v27 = 0;
    v28 = 0;
    v26 = &unk_1E656A1D0;
    ProShade::Program::fragment_code((PCArray_base *)v1, (uint64_t)&v29, (uint64_t)&v32, (uint64_t)&v26, v8 == 1);
    v9 = ProShade::Program::vertex_code((PCArray_base *)v1, (uint64_t)&v32, (uint64_t)&v26);
    v11 = HIDWORD(v27);
    if (HIDWORD(v27))
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      do
      {
        if (v12 < 0 || SHIDWORD(v27) <= v12)
          PCArray_base::badIndex((PCArray_base *)v9);
        v9 = ProShade::VarT<ProShade::Node>::width(v28[v14], v10);
        v13 += v9;
        v12 = ++v14;
      }
      while (v11 != v14);
    }
    else
    {
      v13 = 0;
    }
    v15 = *(_DWORD *)(v1 + 1460);
    ProShade::deleteVars((unsigned int *)(v1 + 1400));
    ProShade::deleteVars((unsigned int *)(v1 + 1424));
    params = 0;
    glGetIntegerv(0x8872u, &params);
    if (v13 >= 1)
    {
      *(_BYTE *)(v1 + 1544) = 1;
      *(_DWORD *)(v1 + 264) = 3;
      v22 = (PCGLSLException *)__cxa_allocate_exception(0x48uLL);
      PCString::PCString(&v24, "shader has too many varying floats");
      PCGLSLException::PCGLSLException(v22, &v24);
    }
    if (v15 > params)
    {
      *(_BYTE *)(v1 + 1544) = 1;
      *(_DWORD *)(v1 + 264) = 4;
      v23 = (PCGLSLException *)__cxa_allocate_exception(0x48uLL);
      PCString::PCString(&v24, "shader has too many samplers");
      PCGLSLException::PCGLSLException(v23, &v24);
    }
    v26 = &unk_1E656A1D0;
    if ((int)v27 < 0)
      v16 = 1;
    else
      v16 = v27 & ~((int)v27 >> 31);
    if (v16 == (_DWORD)v27)
    {
      v17 = SHIDWORD(v27);
      if (v27 < 0)
      {
        do
          v28[v17] = 0;
        while (!__CFADD__(v17++, 1));
      }
    }
    else
    {
      if (v16)
      {
        v19 = (void *)operator new[]();
        bzero(v19, 8 * v16);
      }
      else
      {
        v19 = 0;
      }
      if (v28)
        MEMORY[0x1B5E2914C](v28, 0x1000C8077774924);
      v28 = v19;
    }
    v27 = v16;
    if (v28)
      MEMORY[0x1B5E2914C](v28, 0x1000C8077774924);
    v29 = &unk_1E656A338;
    if ((int)v30 < 0)
      v20 = 1;
    else
      v20 = v30;
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize((uint64_t)&v29, 0, v20);
    if (v31)
      MEMORY[0x1B5E2914C](v31, 0x1000C8077774924);
    v32.var0 = (__CFString *)&unk_1E656A338;
    if ((int)v33 < 0)
      v21 = 1;
    else
      v21 = v33;
    PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize((uint64_t)&v32, 0, v21);
    this = v34;
    if (v34)
      return MEMORY[0x1B5E2914C](v34, 0x1000C8077774924);
  }
  return this;
}

void sub_1B2CEA414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, PCString a18)
{
  PCString::~PCString(&a10);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray((uint64_t)&a12);
  PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::~PCArray((uint64_t)&a15);
  PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::~PCArray((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void PCGLSLException::~PCGLSLException(PCString *this)
{
  this->var0 = (__CFString *)&unk_1E656A158;
  PCString::~PCString(this + 8);
  PCException::~PCException(this);
}

{
  this->var0 = (__CFString *)&unk_1E656A158;
  PCString::~PCString(this + 8);
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::VarT<ProShade::Node>::width(uint64_t a1, const PCString *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    throw_PCNullPointerException(1);
  return ProShade::shapeGetWidth(*(_DWORD *)(v2 + 28), a2);
}

uint64_t PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A338;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t ProShade::Program::bindTextures(ProShade::Program *this)
{
  PCMutex *v2;
  _OWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  ProShade::SamplerNode *v6;
  int v7;
  GLenum v8;
  GLint v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  const PCString *v13;
  GLuint texture;
  char *v16;
  char v17;
  PCSharedCount _18[11];

  PCSharedCount::PCSharedCount(_18);
  v2 = (PCMutex *)((char *)this + 160);
  v16 = (char *)this + 160;
  PCMutex::lock((PCMutex *)((char *)this + 160));
  v17 = 1;
  LOBYTE(texture) = 0;
  v3 = LiPerContext<ProShade::ProgramBase::Exe *,LiPerContextObject_Traits<ProShade::ProgramBase::Exe>,LiOpenGLContextGetter>::get((uint64_t)this + 232, &texture);
  v4 = *(_QWORD **)(*(_QWORD *)v3 + 48);
  v5 = *(_QWORD *)v3 + 56;
  if (v4 != (_QWORD *)v5)
  {
    do
    {
      v6 = (ProShade::SamplerNode *)v4[4];
      v7 = *((_DWORD *)v4 + 10);
      texture = 0;
      ProShade::SamplerNode::getTextureID(v6, (int *)&texture);
      v8 = *((_DWORD *)v6 + 14);
      glActiveTexture(v7 + 33984);
      glBindTexture(v8, texture);
      switch(ProShade::SamplerNode::getWrapMode(v6))
      {
        case 0u:
        case 3u:
          v9 = 33071;
          glTexParameteri(v8, 0x2802u, 33071);
          goto LABEL_6;
        case 1u:
          v9 = 10497;
          glTexParameteri(v8, 0x2802u, 10497);
          goto LABEL_6;
        case 2u:
          v9 = 33648;
          glTexParameteri(v8, 0x2802u, 33648);
LABEL_6:
          glTexParameteri(v8, 0x2803u, v9);
          break;
        default:
          break;
      }
      v10 = (_QWORD *)v4[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v4[2];
          v12 = *v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v12);
      }
      v4 = v11;
    }
    while (v11 != (_QWORD *)v5);
  }
  PCMutex::unlock(v2);
  return OZChannelBase::setRangeName((OZChannelBase *)_18, v13);
}

void sub_1B2CEA728(_Unwind_Exception *a1, char a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  const PCString *v13;

  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a10);
  OZChannelBase::setRangeName((OZChannelBase *)&a12, v13);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Program::initializeExe(ProShade::Program *this, uint64_t **a2)
{
  GLuint v4;
  PCArray_base *v5;
  int v6;
  int v7;
  GLint v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  GLint UniformLocation;
  ProShade::UniformProgram *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  ProShade::UniformWorkspace *v25;
  const PCString *v26;
  uint64_t **v28;
  unint64_t v29;
  OZChannelBase var68;

  PCSharedCount::PCSharedCount((PCSharedCount *)&var68);
  v28 = a2;
  v4 = ProGL::ObjectHandle::name((ProGL::ObjectHandle *)a2);
  glUseProgram(v4);
  v5 = (PCArray_base *)LiGL::setCurrentProgram((uint64_t *)&var68, 0);
  v6 = *((_DWORD *)this + 365);
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    for (i = 0; i != v6; v7 = i)
    {
      if (v7 < 0 || *((_DWORD *)this + 365) <= v7)
        PCArray_base::badIndex(v5);
      v10 = *((_QWORD *)this + 183) + 96 * i;
      v13 = *(_QWORD *)(v10 + 16);
      v12 = (unint64_t *)(v10 + 16);
      v11 = v13;
      if (!v13)
        throw_PCNullPointerException(1);
      v14 = *(char **)(v11 + 32);
      if (v14)
        v15 = v14;
      else
        v15 = "";
      UniformLocation = ProShade::ProgramBase::getUniformLocation(this, v15);
      v29 = *v12;
      var68.var2 = (void **)&v29;
      *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(a2 + 6, &v29, (uint64_t)&std::piecewise_construct, &var68.var2)+ 10) = v8;
      glUniform1i(UniformLocation, v8++);
      ++i;
    }
  }
  v17 = (ProShade::Program *)((char *)this + 1472);
  if (*((_QWORD *)this + 185) == *((_QWORD *)this + 184))
  {
    v18 = *((unsigned int *)this + 341);
    if ((int)v18 >= 1)
    {
      v19 = 0;
      v20 = 48;
      do
      {
        if (v19 >= *((int *)this + 341))
          PCArray_base::badIndex(v5);
        v21 = *((_QWORD *)this + 171);
        v22 = *(_QWORD *)(v21 + v20);
        if (!v22)
          throw_PCNullPointerException(1);
        v23 = *(char **)(v22 + 32);
        if (v23)
          v24 = v23;
        else
          v24 = "";
        v5 = (PCArray_base *)ProShade::ProgramBase::getUniformLocation(this, v24);
        *(_DWORD *)(v21 + v20 + 16) = (_DWORD)v5;
        ++v19;
        v20 += 72;
      }
      while (v18 != v19);
    }
    ProShade::UniformProgram::initialize((ProShade::Program *)((char *)this + 1472), (uint64_t)this + 1352);
  }
  v25 = (ProShade::UniformWorkspace *)operator new();
  ProShade::UniformWorkspace::UniformWorkspace(v25, v17);
  v28[9] = (uint64_t *)v25;
  return OZChannelBase::setRangeName(&var68, v26);
}

void sub_1B2CEA948(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, OZChannelBase *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  OZChannelBase::setRangeName((OZChannelBase *)&a12, a2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Program::compileShaders(ProShade::Program *this)
{
  ProShade::Program::code((uint64_t)this);
  return ProShade::ProgramBase::compileShaders(this);
}

uint64_t ProShade::Program::getUniformWorkspace(ProShade::Program *this)
{
  PCMutex *v2;
  uint64_t v3;
  char v5;

  v2 = (PCMutex *)((char *)this + 160);
  PCMutex::lock((PCMutex *)((char *)this + 160));
  v5 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)LiPerContext<ProShade::ProgramBase::Exe *,LiPerContextObject_Traits<ProShade::ProgramBase::Exe>,LiOpenGLContextGetter>::get((uint64_t)this + 232, &v5)+ 72);
  PCMutex::unlock(v2);
  return v3;
}

void sub_1B2CEAA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::ProgramVar::~ProgramVar(PCSharedCount *this)
{
  int var0;
  unsigned int v3;
  uint64_t var0_high;
  PC_Sp_counted_base *v6;
  PC_Sp_counted_base *v7;
  PC_Sp_counted_base *v8;

  this->var0 = (PC_Sp_counted_base *)&off_1E6569868;
  LiString::dec((LiString *)&this[8]);
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E656A1D0;
  var0 = (int)this[5].var0;
  if (var0 < 0)
    v3 = 1;
  else
    v3 = var0 & ~(var0 >> 31);
  if (v3 == var0)
  {
    var0_high = SHIDWORD(this[5].var0);
    if ((var0_high & 0x80000000) != 0)
    {
      do
        *((_QWORD *)this[6].var0 + var0_high) = 0;
      while (!__CFADD__(var0_high++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (PC_Sp_counted_base *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = this[6].var0;
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    this[6].var0 = v6;
  }
  LODWORD(this[5].var0) = v3;
  HIDWORD(this[5].var0) = 0;
  v8 = this[6].var0;
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  this[6].var0 = 0;
  LODWORD(this[5].var0) = 0;
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 3);
}

{
  ProShade::ProgramVar::~ProgramVar(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::VarT<ProShade::Node>::printout(uint64_t a1)
{
  ProShade::Node *v1;

  v1 = *(ProShade::Node **)(a1 + 16);
  if (!v1)
    throw_PCNullPointerException(1);
  return ProShade::Node::po(v1);
}

void ProShade::Program::~Program(ProShade::Program *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1552) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1568) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1560));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 1552) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1568) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1560));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::Program::~Program(ProShade::Program *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 1552) = &off_1E65EB048;
  *(_BYTE *)(v1 + 1568) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 1560));
}

{
  PC_Sp_counted_base **v1;

  v1 = (PC_Sp_counted_base **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1[194] = (PC_Sp_counted_base *)&off_1E65EB048;
  *((_BYTE *)v1 + 1568) = 0;
  PCWeakCount::~PCWeakCount(v1 + 195);
  JUMPOUT(0x1B5E29170);
}

void ProShade::VarT<ProShade::Node>::~VarT(PCSharedCount *a1)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a1 + 3);
  JUMPOUT(0x1B5E29170);
}

PCSharedCount *ProShade::Func<ProShade::Func_ftransform>::eval@<X0>(PCSharedCount *a1@<X8>)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6569BD0);
  *(_QWORD *)v2 = &unk_1E6569AF8;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = &unk_1E6569BB0;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 24) = 0x400000003;
  *(_DWORD *)(v2 + 40) = 2;
  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a1[2].var0 = (PC_Sp_counted_base *)v2;
  return PCSharedCount::PCSharedCount(a1 + 3, (PCShared_base *)(v2 + 72));
}

void sub_1B2CEAE5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Node::~Node(ProShade::Node *this, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 24)) = a2[3];
  LiString::dec((ProShade::Node *)((char *)this + 32));
}

uint64_t ProShade::Func<ProShade::Func_ftransform>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6569AF8;
  *(_QWORD *)(a1 + 72) = &unk_1E6569BB0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6569C10;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6569CC8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::Func_ftransform>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E6569AF8;
  *(_QWORD *)(a1 + 72) = &unk_1E6569BB0;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E6569C10;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E6569CC8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::Func_ftransform>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "ftransform");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2CEB0E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_ftransform>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 23, 0x8903763CuLL);
  v5[1] = v4 + 10;
  v5[2] = v4 + 11;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *((_WORD *)v6 + 4) = 28018;
  *(_QWORD *)v6 = *(_QWORD *)"ftransform";
  *((_BYTE *)v5 + v4 + 22) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2CEB20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::Func_ftransform>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "ftransform");
}

int8x8_t *ProShade::Func<ProShade::Func_ftransform>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "ftransform");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

void ProShade::Func<ProShade::Func_ftransform>::inputs(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a2 + 8) >= v4)
    v5 = *(_DWORD *)(a2 + 8);
  else
    v5 = (2 * v4) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v4, v5);
  if (*(int *)(a1 + 60) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + v6, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v6));
      ++v7;
      v6 += 32;
    }
    while (v7 < *(int *)(a1 + 60));
  }
}

uint64_t ProShade::Func<ProShade::Func_ftransform>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::Func_ftransform>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2CEB52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_ftransform>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E6569BD0);
  *(_QWORD *)v2 = &unk_1E6569AF8;
  *(_QWORD *)(v2 + 72) = &unk_1E6569BB0;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2CEB694(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::Func_ftransform>::computeValue()
{
  ProShade::Func_ftransform::computeValue();
}

void `virtual thunk to'ProShade::Func<ProShade::Func_ftransform>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6569AF8;
  *((_QWORD *)v1 + 9) = &unk_1E6569BB0;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6569C10;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6569CC8;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E6569AF8;
  *((_QWORD *)v1 + 9) = &unk_1E6569BB0;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E6569C10;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E6569CC8;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

void ProShade::func_repr(PCArray_base *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  signed int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  _DWORD *v13;
  int v14;
  size_t v15;
  unsigned int *v16;
  _BYTE *v17;
  unsigned int v18;
  size_t v19;
  const void *v20;
  int v21;
  size_t v22;
  unsigned int *v23;
  unsigned int v24;
  size_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  _BYTE *v36;
  char *__src;
  _BYTE *v38;

  v4 = (_QWORD *)a3;
  v38 = 0;
  LODWORD(a3) = *(_DWORD *)(a2 + 12);
  if ((int)a3 >= 1)
  {
    v6 = 0;
    do
    {
      if (v6)
      {
        LiString::append((LiString *)&v38, ", ", 2);
        LODWORD(a3) = *(_DWORD *)(a2 + 12);
      }
      if (v6 >= (int)a3)
        PCArray_base::badIndex(a1);
      v7 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 32 * v6 + 16);
      if (!v7)
        throw_PCNullPointerException(1);
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v7 + 16))(&__src);
      if (__src)
        v8 = *((_DWORD *)__src - 2);
      else
        v8 = 0;
      LiString::append((LiString *)&v38, __src, v8);
      if (__src)
      {
        v9 = (unsigned int *)(__src - 12);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          *__src = 0;
          if (__src)
            v12 = __src - 12;
          else
            v12 = 0;
          free(v12);
        }
      }
      ++v6;
      a3 = *(int *)(a2 + 12);
    }
    while (v6 < a3);
  }
  v13 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    v14 = *(v13 - 2);
  else
    v14 = 0;
  v15 = v14;
  v16 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  v16[1] = v15 + 1;
  v16[2] = v15 + 2;
  atomic_store(1u, v16);
  v17 = v16 + 3;
  atomic_store(0, v16);
  memcpy(v16 + 3, v13, v15);
  v17[v15] = 40;
  v17[v15 + 1] = 0;
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 + 1, v16));
  v19 = (int)v16[1];
  v20 = v38;
  if (v38)
    v21 = *((_DWORD *)v38 - 2);
  else
    v21 = 0;
  v22 = v19 + v21;
  v23 = (unsigned int *)malloc_type_malloc(v22 + 13, 0x8903763CuLL);
  v23[1] = v22;
  v23[2] = v22 + 1;
  atomic_store(1u, v23);
  atomic_store(0, v23);
  memcpy(v23 + 3, v17, v19);
  memcpy((char *)v23 + v19 + 12, v20, v21);
  *((_BYTE *)v23 + v22 + 12) = 0;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  v25 = (int)v23[1];
  v26 = (unsigned int *)malloc_type_malloc(v25 + 14, 0x8903763CuLL);
  v26[1] = v25 + 1;
  v26[2] = v25 + 2;
  atomic_store(1u, v26);
  v27 = v26 + 3;
  atomic_store(0, v26);
  memcpy(v26 + 3, v23 + 3, v25);
  *((_BYTE *)v27 + v25) = 41;
  *((_BYTE *)v27 + v25 + 1) = 0;
  *v4 = v26 + 3;
  do
    v28 = __ldaxr(v26);
  while (__stlxr(v28 + 1, v26));
  do
  {
    v29 = __ldaxr(v23);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v23));
  if (!v30)
    free(v23);
  do
  {
    v31 = __ldaxr(v16);
    v32 = v31 - 1;
  }
  while (__stlxr(v32, v16));
  if (!v32)
    free(v16);
  if (v38)
  {
    v33 = (unsigned int *)(v38 - 12);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      *v38 = 0;
      if (v38)
        v36 = v38 - 12;
      else
        v36 = 0;
      free(v36);
    }
  }
}

void sub_1B2CEBB5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  do
  {
    v13 = __ldaxr(v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v11));
  if (!v14)
    free(v11);
  do
  {
    v15 = __ldaxr(v10);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v10));
  if (!v16)
    free(v10);
  if (a10)
  {
    v17 = (unsigned int *)(a10 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void LiString::append(LiString *this, const char *__src, signed int a3)
{
  int *v6;
  size_t v7;
  size_t v8;
  int *v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;

  if (__src && a3)
  {
    v6 = *(int **)this;
    if (!*(_QWORD *)this)
    {
      v12 = a3 + 1;
      v13 = (unsigned int *)malloc_type_malloc(a3 + 13, 0x8903763CuLL);
      v13[2] = v12;
      atomic_store(1u, v13);
      *(_QWORD *)this = v13 + 3;
      v13[1] = a3;
      memcpy(v13 + 3, __src, a3);
      v11 = (_BYTE *)(*(_QWORD *)this + a3);
LABEL_9:
      *v11 = 0;
      return;
    }
    v7 = *(v6 - 2);
    v8 = v7 + a3;
    if (*(v6 - 1) > (int)v8)
    {
      memcpy((char *)v6 + v7, __src, a3);
      v9 = *(int **)this;
      v10 = *(_QWORD *)this - 12;
      if (!*(_QWORD *)this)
        v10 = 0;
      *(_DWORD *)(v10 + 4) = v8;
      v11 = (char *)v9 + v8;
      goto LABEL_9;
    }
    v14 = (unsigned int *)malloc_type_malloc(v8 + 13, 0x8903763CuLL);
    v14[1] = v8;
    v14[2] = v8 + 1;
    atomic_store(1u, v14);
    atomic_store(0, v14);
    memcpy(v14 + 3, v6, v7);
    memcpy((char *)v14 + v7 + 12, __src, a3);
    *((_BYTE *)v14 + v8 + 12) = 0;
    if (v14 + 3 != *(unsigned int **)this)
    {
      LiString::dec(this);
      *(_QWORD *)this = v14 + 3;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
}

void PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  PCSharedCount *v12;
  int v13;
  int v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  PCSharedCount *v20;
  PCSharedCount *v21;
  uint64_t v22;
  PCException *exception;
  PCString v24;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v24, "PCArray::resize");
    PCException::PCException(exception, &v24);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if (a2 >= (int)v6)
    {
      if (a2 > (int)v6)
      {
        v10 = 32 * v6;
        v11 = a2 - v6;
        do
        {
          v12 = (PCSharedCount *)(*(_QWORD *)(a1 + 16) + v10);
          v12->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          v12[2].var0 = 0;
          PCSharedCount::PCSharedCount(v12 + 3);
          v10 += 32;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v7 = 32 * a2;
      v8 = a2;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + v7) + 8))(*(_QWORD *)(a1 + 16) + v7);
        ++v8;
        v7 += 32;
      }
      while (v8 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 32 * v3);
    }
    else
    {
      v9 = 0;
    }
    v13 = *(_DWORD *)(a1 + 12);
    if (a2 >= v13)
      v14 = *(_DWORD *)(a1 + 12);
    else
      v14 = a2;
    if (v14 < 1)
    {
      v14 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = &v9[v15];
        v17 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)v16 = &unk_1E6569AC8;
        v18 = v17 + v15;
        v16[8] = *(_BYTE *)(v18 + 8);
        *((_QWORD *)v16 + 2) = *(_QWORD *)(v18 + 16);
        PCSharedCount::PCSharedCount((PCSharedCount *)&v9[v15 + 24], (const PCSharedCount *)(v18 + 24));
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + v15) + 8))(*(_QWORD *)(a1 + 16) + v15);
        v15 += 32;
      }
      while (32 * v14 != v15);
      v13 = *(_DWORD *)(a1 + 12);
    }
    if (v14 < v13)
    {
      v19 = 32 * v14;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + v19) + 8))(*(_QWORD *)(a1 + 16) + v19);
        v19 += 32;
        ++v14;
      }
      while (*(_DWORD *)(a1 + 12) > v14);
    }
    if (v14 < a2)
    {
      v20 = (PCSharedCount *)&v9[32 * v14 + 24];
      do
      {
        v20[-3].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v20[-1].var0 = 0;
        PCSharedCount::PCSharedCount(v20);
        v20 = v21 + 4;
        ++v14;
      }
      while (v14 < a2);
    }
    v22 = *(_QWORD *)(a1 + 16);
    if (v22)
      MEMORY[0x1B5E2914C](v22, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2CEC008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::Func_ftransform>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6569BD0);
  *(_QWORD *)a1 = &unk_1E6569AF8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E6569BB0;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2CEC148(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func_ftransform::computeValue()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
  PCException::PCException(exception, &v2, &v1, 972);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2CEC210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::VertexProgram::~VertexProgram(PCSharedCount *this)
{
  uint64_t v2;

  this[75].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[79]);
  this[75].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 78);
  v2 = 40;
  do
  {
    this[v2 + 30].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
    LiString::dec((LiString *)&this[v2 + 34]);
    this[v2 + 30].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&this[v2 + 33]);
    v2 -= 5;
  }
  while (v2 * 8);
  this[30].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[34]);
  this[30].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 33);
  this[25].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[29]);
  this[25].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 28);
  this[20].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[24]);
  this[20].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 23);
  this[15].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[19]);
  this[15].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 18);
  this[10].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[14]);
  this[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 13);
  this[5].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[9]);
  this[5].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 8);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[4]);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 3);
}

void ProShade::FragmentProgram::~FragmentProgram(PCSharedCount *this)
{
  uint64_t v2;

  v2 = 40;
  do
  {
    this[v2 + 5].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
    LiString::dec((LiString *)&this[v2 + 9]);
    this[v2 + 5].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&this[v2 + 8]);
    v2 -= 5;
  }
  while (v2 * 8);
  this[5].var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[9]);
  this[5].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 8);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569828;
  LiString::dec((LiString *)&this[4]);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 3);
}

void PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  PCSharedCount *v9;
  size_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  PCSharedCount *v21;
  uint64_t v22;
  PCSharedCount *v23;
  char *v24;
  uint64_t v25;
  PCException *exception;
  int v27;
  PCString v28;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v28, "PCArray::resize");
    PCException::PCException(exception, &v28);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v27 = v3;
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if (a2 >= (int)v6)
    {
      if (a2 > (int)v6)
      {
        v12 = a2 - v6;
        v13 = 72 * v6;
        do
        {
          v14 = *(_QWORD *)(a1 + 16) + v13;
          *(_OWORD *)(v14 + 40) = 0u;
          *(_OWORD *)(v14 + 8) = 0u;
          *(_OWORD *)(v14 + 56) = 0u;
          *(_OWORD *)(v14 + 24) = 0u;
          *(_QWORD *)v14 = &unk_1E6569AC8;
          PCSharedCount::PCSharedCount((PCSharedCount *)(v14 + 24));
          *(_QWORD *)(v14 + 32) = &unk_1E6569AC8;
          *(_QWORD *)(v14 + 48) = 0;
          PCSharedCount::PCSharedCount((PCSharedCount *)(v14 + 56));
          *(_DWORD *)(v14 + 64) = -1;
          v13 += 72;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      v7 = a2;
      v8 = 72 * a2;
      do
      {
        v9 = (PCSharedCount *)(*(_QWORD *)(a1 + 16) + v8);
        v9[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(v9 + 7);
        v9->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(v9 + 3);
        ++v7;
        v8 += 72;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v10 = 72 * v3;
      v11 = (char *)operator new[]();
      bzero(v11, v10);
    }
    else
    {
      v11 = 0;
    }
    v15 = *(_DWORD *)(a1 + 12);
    if (a2 >= v15)
      v16 = *(_DWORD *)(a1 + 12);
    else
      v16 = a2;
    if (v16 < 1)
    {
      v16 = 0;
    }
    else
    {
      v17 = 0;
      do
      {
        v18 = &v11[v17];
        v19 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)v18 = &unk_1E6569AC8;
        v20 = v19 + v17;
        v18[8] = *(_BYTE *)(v19 + v17 + 8);
        *((_QWORD *)v18 + 2) = *(_QWORD *)(v19 + v17 + 16);
        PCSharedCount::PCSharedCount((PCSharedCount *)&v11[v17 + 24], (const PCSharedCount *)(v19 + v17 + 24));
        *((_QWORD *)v18 + 4) = &unk_1E6569AC8;
        v18[40] = *(_BYTE *)(v20 + 40);
        *((_QWORD *)v18 + 6) = *(_QWORD *)(v20 + 48);
        PCSharedCount::PCSharedCount((PCSharedCount *)&v11[v17 + 56], (const PCSharedCount *)(v20 + 56));
        *((_DWORD *)v18 + 16) = *(_DWORD *)(v20 + 64);
        v21 = (PCSharedCount *)(*(_QWORD *)(a1 + 16) + v17);
        v21[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(v21 + 7);
        v21->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(v21 + 3);
        v17 += 72;
      }
      while (72 * v16 != v17);
      v15 = *(_DWORD *)(a1 + 12);
    }
    if (v16 < v15)
    {
      v22 = 72 * v16;
      do
      {
        v23 = (PCSharedCount *)(*(_QWORD *)(a1 + 16) + v22);
        v23[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(v23 + 7);
        v23->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(v23 + 3);
        v22 += 72;
        ++v16;
      }
      while (*(_DWORD *)(a1 + 12) > v16);
    }
    if (v16 < a2)
    {
      v24 = &v11[72 * v16];
      do
      {
        *(_OWORD *)(v24 + 40) = 0u;
        *(_OWORD *)(v24 + 8) = 0u;
        *(_OWORD *)(v24 + 56) = 0u;
        *(_OWORD *)(v24 + 24) = 0u;
        *(_QWORD *)v24 = &unk_1E6569AC8;
        PCSharedCount::PCSharedCount((PCSharedCount *)v24 + 3);
        *((_QWORD *)v24 + 4) = &unk_1E6569AC8;
        *((_QWORD *)v24 + 6) = 0;
        PCSharedCount::PCSharedCount((PCSharedCount *)v24 + 7);
        *((_DWORD *)v24 + 16) = -1;
        ++v16;
        v24 += 72;
      }
      while (v16 < a2);
    }
    v25 = *(_QWORD *)(a1 + 16);
    if (v25)
      MEMORY[0x1B5E2914C](v25, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v11;
  }
  *(_DWORD *)(a1 + 8) = v27;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2CEC7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ProgramVar::ProgramVar(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1E6569AC8;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24), (const PCSharedCount *)(a2 + 24));
  *(_QWORD *)a1 = &off_1E6569868;
  *(_QWORD *)(a1 + 32) = &unk_1E656A1D0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(a1 + 72));
  return a1;
}

void sub_1B2CEC8D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;
  LiString *v4;
  uint64_t v5;
  LiString *v6;

  v6 = v4;
  LiString::dec(v6);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray(v3);
  *v1 = v5 + 16;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::SubstituteVar::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  PCArray_base *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  const std::locale::facet *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  const char *v24;
  size_t v25;
  const std::locale::facet *v26;
  PC_Sp_counted_base *v27;
  int32x4_t v28;
  const char *v29;
  int32x4_t v30;

  ProShade::VarT<ProShade::Node>::hash(a2, (__n128 *)&v30);
  if (*(_BYTE *)(a1 + 32))
  {
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"SubstituteVar: ", 15);
    v8 = operator<<(v7);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" --- ", 5);
    v10 = *(_QWORD *)(a2 + 16);
    if (!v10)
      throw_PCNullPointerException(1);
    (*(void (**)(const char **__return_ptr))(*(_QWORD *)v10 + 16))(&v29);
    if (v29)
      v11 = v29;
    else
      v11 = "";
    v12 = strlen(v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
    v13 = std::locale::use_facet((const std::locale *)&v28, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale((std::locale *)&v28);
    std::ostream::put();
    v6 = (PCArray_base *)std::ostream::flush();
    if (v29)
    {
      v14 = (unsigned int *)(v29 - 12);
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        *v29 = 0;
        if (v29)
          v17 = (char *)(v29 - 12);
        else
          v17 = 0;
        free(v17);
      }
    }
  }
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_DWORD *)(v18 + 12);
  if (v19)
  {
    v20 = 0;
    v21 = 0;
    while (1)
    {
      if (v20 < 0 || *(_DWORD *)(v18 + 12) <= v20)
        PCArray_base::badIndex(v6);
      v22 = *(_QWORD *)(*(_QWORD *)(v18 + 16) + 8 * v21);
      ProShade::VarT<ProShade::Node>::hash(v22, (__n128 *)&v28);
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v28, v30)))) & 1) == 0
        || (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(*(int32x4_t *)(v22 + 72), v30)))) & 1) == 0)
      {
        break;
      }
      v20 = ++v21;
      if (v19 == v21)
        goto LABEL_23;
    }
    if (*(_BYTE *)(a1 + 32))
    {
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"  --> ", 6);
      if (*(_QWORD *)(v22 + 64))
        v24 = *(const char **)(v22 + 64);
      else
        v24 = "";
      v25 = strlen(v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
      std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
      v26 = std::locale::use_facet((const std::locale *)&v28, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale((std::locale *)&v28);
      std::ostream::put();
      std::ostream::flush();
    }
    v27 = (PC_Sp_counted_base *)operator new();
    ProShade::NamedVar::NamedVar((uint64_t)v27, (uint64_t *)(v22 + 64), v22);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v27;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v27 + *(_QWORD *)(*(_QWORD *)v27 - 24)));
  }
  else
  {
LABEL_23:
    ProShade::NodeOperator::apply(a1, a2, a3);
  }
}

void sub_1B2CECC04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40B3959486);
  _Unwind_Resume(a1);
}

uint64_t ProShade::NamedVar::NamedVar(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 48) = &off_1E65EB048;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6569E80);
  *(_QWORD *)a1 = &unk_1E6569DA8;
  *(_QWORD *)(a1 + 48) = &unk_1E6569E60;
  if ((uint64_t *)(a1 + 32) != a2)
  {
    LiString::dec((LiString *)(a1 + 32));
    v6 = *a2;
    *(_QWORD *)(a1 + 32) = *a2;
    if (v6)
    {
      v7 = (unsigned int *)(v6 - 12);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
  }
  v9 = *(_QWORD *)(a3 + 16);
  if (!v9)
    throw_PCNullPointerException(1);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(v9 + 24);
  return a1;
}

void sub_1B2CECD64(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v4 + 8));
  *(_QWORD *)(v1 + 48) = v3 + 16;
  *(_BYTE *)(v1 + 64) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::NamedVar::~NamedVar(ProShade::NamedVar *this)
{
  *(_QWORD *)this = off_1E6569EC0;
  *((_QWORD *)this + 6) = off_1E6569F78;
  LiString::dec((ProShade::NamedVar *)((char *)this + 32));
  *((_QWORD *)this + 6) = &off_1E65EB048;
  *((_BYTE *)this + 64) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 7);
}

{
  *(_QWORD *)this = off_1E6569EC0;
  *((_QWORD *)this + 6) = off_1E6569F78;
  LiString::dec((ProShade::NamedVar *)((char *)this + 32));
  *((_QWORD *)this + 6) = &off_1E65EB048;
  *((_BYTE *)this + 64) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 7);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::NamedVar::repr@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 - 12);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

void ProShade::NamedVar::description(LiString *a1@<X8>)
{
  LiString::LiString(a1, "NamedVar");
}

int8x8_t *ProShade::NamedVar::computeHash(ProShade::NamedVar *this, int8x8_t *a2)
{
  char *v3;
  size_t v4;

  v3 = (char *)*((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *((unsigned int *)v3 - 2);
  }
  else
  {
    v4 = 0;
    v3 = "";
  }
  return PCHashWriteStream::writeData(a2, v3, v4);
}

void ProShade::NamedVar::inputs(uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(int *)(a2 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v2);
}

PCSharedCount *ProShade::NamedVar::apply@<X0>(PC_Sp_counted_base *a1@<X0>, PCSharedCount *a2@<X8>)
{
  PCShared_base *v2;

  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a2[2].var0 = a1;
  if (a1)
    v2 = (PCShared_base *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  else
    v2 = 0;
  return PCSharedCount::PCSharedCount(a2 + 3, v2);
}

ProShade::NamedVar *ProShade::NamedVar::clone(ProShade::NamedVar *this)
{
  ProShade::NamedVar *v2;

  v2 = (ProShade::NamedVar *)operator new();
  ProShade::NamedVar::NamedVar(v2);
  ProShade::Node::copyFrom(v2, this);
  return v2;
}

void sub_1B2CECF5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40B3959486);
  _Unwind_Resume(a1);
}

void ProShade::NamedVar::computeValue()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSProgram.cpp");
  PCException::PCException(exception, &v2, &v1, 257);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2CED008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void `virtual thunk to'ProShade::NamedVar::~NamedVar(ProShade::NamedVar *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E6569EC0;
  *((_QWORD *)v1 + 6) = off_1E6569F78;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 6) = &off_1E65EB048;
  v1[64] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 7);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E6569EC0;
  *((_QWORD *)v1 + 6) = off_1E6569F78;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 6) = &off_1E65EB048;
  v1[64] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 7);
  JUMPOUT(0x1B5E29170);
}

ProShade::NamedVar *ProShade::NamedVar::NamedVar(ProShade::NamedVar *this)
{
  *((_QWORD *)this + 6) = &off_1E65EB048;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1E6569E80);
  *(_QWORD *)this = &unk_1E6569DA8;
  *((_QWORD *)this + 6) = &unk_1E6569E60;
  return this;
}

void sub_1B2CED190(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 48) = v4;
  *(_BYTE *)(v1 + 64) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  PCException *exception;
  PCString v15;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v15, "PCArray::resize");
    PCException::PCException(exception, &v15);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    v6 = *(int *)(result + 12);
    if ((int)v6 < a2)
    {
      do
        *(_QWORD *)(*(_QWORD *)(result + 16) + 8 * v6++) = 0;
      while (a2 != v6);
    }
  }
  else
  {
    if (v3)
    {
      v7 = (char *)operator new[]();
      bzero(v7, 8 * v3);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(_DWORD *)(v5 + 12);
    if (a2 >= v8)
      v9 = v8;
    else
      v9 = a2;
    if ((int)v9 < 1)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v10 = *(uint64_t **)(v5 + 16);
      v11 = v9;
      v12 = v7;
      do
      {
        v13 = *v10++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    if ((int)v9 > v8)
      v8 = v9;
    if (v8 < a2)
      bzero(&v7[8 * v8], 8 * (~v8 + a2) + 8);
    result = *(_QWORD *)(v5 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v5 + 16) = v7;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = a2;
  return result;
}

void sub_1B2CED334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

_QWORD *LiString::LiString(_QWORD *a1, const void **a2)
{
  const void *v3;
  unsigned int *v5;
  const void *v6;

  if (*((char *)a2 + 23) >= 0)
    LODWORD(v3) = *((unsigned __int8 *)a2 + 23);
  else
    v3 = a2[1];
  if ((int)v3 < 1)
  {
    *a1 = 0;
  }
  else
  {
    v5 = (unsigned int *)malloc_type_malloc(v3 + 13, 0x8903763CuLL);
    v5[2] = (_DWORD)v3 + 1;
    atomic_store(1u, v5);
    *a1 = v5 + 3;
    v5[1] = v3;
    if (*((char *)a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *a2;
    memcpy(v5 + 3, v6, v3);
    *(_BYTE *)(*a1 + v3) = 0;
  }
  return a1;
}

void LiString::LiString(LiString *this, PCString *a2)
{
  char *CStr;
  char *v5;
  uint64_t v6;
  unsigned int *v8;

  if (PCString::size(a2))
  {
    CStr = PCString::createCStr(a2);
    v5 = CStr;
    if (CStr && *CStr)
    {
      v6 = 0;
      while (CStr[++v6])
        ;
    }
    else
    {
      LODWORD(v6) = 0;
    }
    v8 = (unsigned int *)malloc_type_malloc((int)v6 + 1 + 12, 0x8903763CuLL);
    v8[2] = v6 + 1;
    atomic_store(1u, v8);
    *(_QWORD *)this = v8 + 3;
    v8[1] = v6;
    memcpy(v8 + 3, v5, (int)v6 + 1);
    free(v5);
  }
  else
  {
    *(_QWORD *)this = 0;
  }
}

void std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy(uint64_t a1, PCSharedCount *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy(a1, a2[1].var0);
    a2[5].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(a2 + 8);
    operator delete(a2);
  }
}

void ProShade::Uniform44f::~Uniform44f(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(this + 3);
}

void ProShade::VarT<ProShade::UniformNode>::~VarT(PCSharedCount *a1)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(a1 + 3);
  JUMPOUT(0x1B5E29170);
}

PCSharedCount *ProShade::VarT<ProShade::SamplerNode>::~VarT(PCSharedCount *a1)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(a1 + 3);
  return a1;
}

void ProShade::VarT<ProShade::SamplerNode>::~VarT(PCSharedCount *a1)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(a1 + 3);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A0E8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A0E8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<ProShade::VariableList::VariableEntry,PCArray_Traits<ProShade::VariableList::VariableEntry>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  PCException *exception;
  PCString v29;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v29, "PCArray::resize");
    PCException::PCException(exception, &v29);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if ((int)v6 <= a2)
    {
      if ((int)v6 < a2)
      {
        v11 = 16 * v6;
        v12 = a2 - v6;
        do
        {
          v13 = (_QWORD *)(*(_QWORD *)(a1 + 16) + v11);
          *v13 = 0;
          v13[1] = 0;
          v11 += 16;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      v7 = 16 * a2;
      v8 = a2;
      do
      {
        v9 = *(_QWORD *)(a1 + 16) + v7;
        LiString::dec((LiString *)(v9 + 8));
        LiString::dec((LiString *)v9);
        ++v8;
        v7 += 16;
      }
      while (v8 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v10 = (char *)operator new[]();
      bzero(v10, 16 * v3);
    }
    else
    {
      v10 = 0;
    }
    v14 = *(_DWORD *)(a1 + 12);
    if (a2 >= v14)
      v15 = v14;
    else
      v15 = a2;
    if ((int)v15 < 1)
    {
      LODWORD(v15) = 0;
    }
    else
    {
      for (i = 0; i != v15; ++i)
      {
        v17 = *(_QWORD *)(a1 + 16);
        v18 = *(_QWORD *)(v17 + 16 * i);
        *(_QWORD *)&v10[16 * i] = v18;
        if (v18)
        {
          v19 = (unsigned int *)(v18 - 12);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 + 1, v19));
        }
        v21 = *(_QWORD *)(v17 + 16 * i + 8);
        *(_QWORD *)&v10[16 * i + 8] = v21;
        if (v21)
        {
          v22 = (unsigned int *)(v21 - 12);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
        }
        v24 = *(_QWORD *)(a1 + 16) + 16 * i;
        LiString::dec((LiString *)(v24 + 8));
        LiString::dec((LiString *)v24);
      }
      v14 = *(_DWORD *)(a1 + 12);
    }
    if ((int)v15 < v14)
    {
      v25 = 16 * v15;
      do
      {
        v26 = *(_QWORD *)(a1 + 16) + v25;
        LiString::dec((LiString *)(v26 + 8));
        LiString::dec((LiString *)v26);
        v25 += 16;
        LODWORD(v15) = v15 + 1;
      }
      while (*(_DWORD *)(a1 + 12) > (int)v15);
    }
    if ((int)v15 < a2)
      bzero(&v10[16 * v15], 16 * (~(_DWORD)v15 + a2) + 16);
    v27 = *(_QWORD *)(a1 + 16);
    if (v27)
      MEMORY[0x1B5E2914C](v27, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v10;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2CED9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::VariableList::by_type(const char **a1, const char **a2)
{
  const char *v2;
  const char *v3;
  int v4;

  v2 = *a2;
  v3 = *a1;
  if (v2)
  {
    if (!v3)
      return 0xFFFFFFFFLL;
    v4 = strcmp(v3, v2);
    if (v4 < 0)
      return 0xFFFFFFFFLL;
    if (!v4)
      return 0;
  }
  else if (!v3)
  {
    return 0;
  }
  return 1;
}

void ProShade::InsertVarying::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  ProShade::Varying *v10;
  PCSharedCount v11[3];
  PCSharedCount v12;

  *(_QWORD *)a3 = &unk_1E6569AC8;
  *(_QWORD *)(a3 + 16) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24));
  v6 = ProShade::VarT<ProShade::Node>::frequency(a2);
  if (!v6)
    goto LABEL_8;
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(a2 + 16);
    if (!v7)
      throw_PCNullPointerException(1);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 88))(v7) & 1) == 0)
      goto LABEL_20;
LABEL_8:
    ProShade::VarT<ProShade::Node>::operator=(a3, (const PCSharedCount *)a2);
    return;
  }
  if (v6 != 3)
  {
    v8 = *(_QWORD *)(a2 + 16);
    if (*(_BYTE *)(a1 + 32))
    {
      if (!v8)
        throw_PCNullPointerException(1);
      v9 = *(const char **)(v8 + 32);
      if (!v9 || strcmp(*(const char **)(v8 + 32), "gl_Normal") && strcmp(v9, "gl_Vertex"))
        goto LABEL_21;
    }
    else if (!v8)
    {
      throw_PCNullPointerException(1);
    }
    if (*(_DWORD *)(v8 + 24) == 3)
    {
LABEL_20:
      v10 = (ProShade::Varying *)operator new();
      ProShade::Varying::Varying(v10, *(ProShade::Node **)(a2 + 16));
      PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(a3 + 16), v10);
      return;
    }
  }
LABEL_21:
  ProShade::NodeOperator::apply(a1, a2, v11);
  ProShade::VarT<ProShade::Node>::operator=(a3, v11);
  v11[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2CEDC60(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1B5E29170](v3, 0x10B1C40515157B5);
  *v1 = v4 + 16;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void PCGLSLException::PCGLSLException(PCGLSLException *this, const PCString *a2)
{
  PCSharedCount *v2;

  PCException::PCException(this, a2);
  v2->var0 = (PC_Sp_counted_base *)&unk_1E656A158;
  PCSharedCount::PCSharedCount(v2 + 8);
}

void sub_1B2CEDD00(_Unwind_Exception *a1)
{
  PCString *v1;

  PCException::~PCException(v1);
  _Unwind_Resume(a1);
}

void PCGLSLException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCGLSLException"));
}

void PCGLSLException::report(PCString *this)
{
  char *CStr;
  char *v3;
  size_t v4;

  PCException::report(this);
  CStr = PCString::createCStr(this + 8);
  if (CStr)
  {
    v3 = CStr;
    v4 = strlen(CStr);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v3, v4);
    free(v3);
  }
}

_OWORD *LiPerContext<ProShade::ProgramBase::Exe *,LiPerContextObject_Traits<ProShade::ProgramBase::Exe>,LiOpenGLContextGetter>::get(uint64_t a1, _BYTE *a2)
{
  os_unfair_lock_s *v4;
  LiGLState *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v11[3];
  uint64_t *v12;

  v4 = (os_unfair_lock_s *)(a1 + 24);
  v11[2] = a1 + 24;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 24));
  v11[1] = 0;
  v11[0] = LiGLState::getCurrentContext(v5);
  v6 = std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::find<LiOpenGLContextGetter::C>(a1, v11);
  if (a1 + 8 == v6)
  {
    *a2 = 1;
    v12 = v11;
    v8 = std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::__emplace_unique_key_args<LiOpenGLContextGetter::C,std::piecewise_construct_t const&,std::tuple<LiOpenGLContextGetter::C const&>,std::tuple<>>((uint64_t **)a1, v11, (uint64_t)&std::piecewise_construct, (_OWORD **)&v12);
    v9 = operator new();
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_WORD *)(v9 + 16) = 256;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 24) = v9 + 32;
    *(_QWORD *)(v9 + 64) = 0;
    *(_QWORD *)(v9 + 72) = 0;
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 48) = v9 + 56;
    *((_QWORD *)v8 + 6) = v9;
    v7 = v8 + 3;
  }
  else
  {
    *a2 = 0;
    v7 = (_OWORD *)(v6 + 48);
  }
  PCSpinLock::unlock(v4);
  return v7;
}

void sub_1B2CEDEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::find<LiOpenGLContextGetter::C>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  BOOL v10;
  uint64_t *v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;

  v4 = *(_QWORD *)(a1 + 8);
  v2 = a1 + 8;
  v3 = v4;
  if (!v4)
    return v2;
  v5 = *((_DWORD *)a2 + 2);
  v6 = *a2;
  v7 = v2;
  do
  {
    v8 = *(_DWORD *)(v3 + 40);
    v10 = v8 == v5;
    v9 = v8 < v5;
    if (v10)
      v9 = *(_QWORD *)(v3 + 32) < v6;
    v10 = !v9;
    if (v9)
      v11 = (uint64_t *)(v3 + 8);
    else
      v11 = (uint64_t *)v3;
    if (v10)
      v7 = v3;
    v3 = *v11;
  }
  while (*v11);
  if (v7 == v2)
    return v2;
  v12 = *(_DWORD *)(v7 + 40);
  v13 = v6 < *(_QWORD *)(v7 + 32);
  v10 = v5 == v12;
  v14 = v5 < v12;
  if (v10)
    v14 = v13;
  if (v14)
    return v2;
  return v7;
}

_OWORD *std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::__emplace_unique_key_args<LiOpenGLContextGetter::C,std::piecewise_construct_t const&,std::tuple<LiOpenGLContextGetter::C const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::__find_equal<LiOpenGLContextGetter::C>((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::__find_equal<LiOpenGLContextGetter::C>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  int v9;
  unint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;

  v5 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *((_DWORD *)a3 + 2);
    v7 = *a3;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = *(_DWORD *)(v4 + 40);
        v10 = v8[4];
        v11 = v7 < v10;
        if (v6 != v9)
          v11 = v6 < v9;
        if (!v11)
          break;
        v4 = *v8;
        result = v8;
        if (!*v8)
          goto LABEL_15;
      }
      v12 = v10 < v7;
      if (v6 == v9)
        v13 = v12;
      else
        v13 = v9 < v6;
      if (!v13)
        break;
      result = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void ProShade::Program::~Program(ProShade::Program *this, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[5];
  ProShade::UniformProgram::~UniformProgram((ProShade::Program *)((char *)this + 1472));
  *((_QWORD *)this + 181) = &unk_1E656A300;
  if (*((int *)this + 364) < 0)
    v5 = 1;
  else
    v5 = *((_DWORD *)this + 364);
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::resize((uint64_t)this + 1448, 0, v5);
  v6 = *((_QWORD *)this + 183);
  if (v6)
    MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
  *((_QWORD *)this + 183) = 0;
  *((_DWORD *)this + 364) = 0;
  *((_QWORD *)this + 178) = &unk_1E656A1D0;
  v7 = *((_DWORD *)this + 358);
  if (v7 < 0)
    v8 = 1;
  else
    v8 = v7 & ~(v7 >> 31);
  if (v8 == v7)
  {
    v9 = *((int *)this + 359);
    if ((v9 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 180) + 8 * v9) = 0;
        v10 = __CFADD__(v9++, 1);
      }
      while (!v10);
    }
  }
  else
  {
    if (v8)
    {
      v11 = (void *)operator new[]();
      bzero(v11, 8 * v8);
    }
    else
    {
      v11 = 0;
    }
    v12 = *((_QWORD *)this + 180);
    if (v12)
      MEMORY[0x1B5E2914C](v12, 0x1000C8077774924);
    *((_QWORD *)this + 180) = v11;
  }
  *((_DWORD *)this + 358) = v8;
  *((_DWORD *)this + 359) = 0;
  v13 = *((_QWORD *)this + 180);
  if (v13)
    MEMORY[0x1B5E2914C](v13, 0x1000C8077774924);
  *((_QWORD *)this + 180) = 0;
  *((_DWORD *)this + 358) = 0;
  *((_QWORD *)this + 175) = &unk_1E656A1D0;
  v14 = *((_DWORD *)this + 352);
  if (v14 < 0)
    v15 = 1;
  else
    v15 = v14 & ~(v14 >> 31);
  if (v15 == v14)
  {
    v16 = *((int *)this + 353);
    if ((v16 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 177) + 8 * v16) = 0;
        v10 = __CFADD__(v16++, 1);
      }
      while (!v10);
    }
  }
  else
  {
    if (v15)
    {
      v17 = (void *)operator new[]();
      bzero(v17, 8 * v15);
    }
    else
    {
      v17 = 0;
    }
    v18 = *((_QWORD *)this + 177);
    if (v18)
      MEMORY[0x1B5E2914C](v18, 0x1000C8077774924);
    *((_QWORD *)this + 177) = v17;
  }
  *((_DWORD *)this + 352) = v15;
  *((_DWORD *)this + 353) = 0;
  v19 = *((_QWORD *)this + 177);
  if (v19)
    MEMORY[0x1B5E2914C](v19, 0x1000C8077774924);
  *((_QWORD *)this + 177) = 0;
  *((_DWORD *)this + 352) = 0;
  *((_QWORD *)this + 165) = off_1E65698D0;
  std::__tree<LiString>::destroy((uint64_t)this + 1376, *((_QWORD **)this + 173));
  *((_QWORD *)this + 169) = &unk_1E656A198;
  if (*((int *)this + 340) < 0)
    v20 = 1;
  else
    v20 = *((_DWORD *)this + 340);
  PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::resize((uint64_t)this + 1352, 0, v20);
  v21 = *((_QWORD *)this + 171);
  if (v21)
    MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  *((_QWORD *)this + 171) = 0;
  *((_DWORD *)this + 340) = 0;
  *((_QWORD *)this + 165) = &unk_1E657E818;
  std::__tree<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::__map_value_compare<ProShade::Node const*,std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>,std::less<ProShade::Node const*>,true>,std::allocator<std::__value_type<ProShade::Node const*,ProShade::VarT<ProShade::Node>>>>::destroy((uint64_t)this + 1328, *((PCSharedCount **)this + 167));
  ProShade::FragmentProgram::~FragmentProgram((PCSharedCount *)this + 114);
  ProShade::VertexProgram::~VertexProgram((PCSharedCount *)this + 34);
  ProShade::ProgramBase::~ProgramBase(this, a2 + 1);
}

void ProShade::UniformProgram::~UniformProgram(ProShade::UniformProgram *this)
{
  void *v2;
  void **v3;

  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  v3 = (void **)this;
  std::vector<ProShade::UniformProgram::Register>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<ProShade::UniformProgram::Register>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  PCSharedCount *v2;
  PCSharedCount *v4;
  void *v5;

  v1 = *a1;
  v2 = (PCSharedCount *)**a1;
  if (v2)
  {
    v4 = (PCSharedCount *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 15;
        std::allocator<ProShade::UniformProgram::Register>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<ProShade::UniformProgram::Register>::destroy[abi:ne180100](uint64_t a1, PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v4;

  var0 = a2[12].var0;
  if (var0)
  {
    a2[13].var0 = var0;
    operator delete(var0);
  }
  v4 = a2[9].var0;
  if (v4)
  {
    a2[10].var0 = v4;
    operator delete(v4);
  }
  a2[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a2 + 7);
  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a2 + 3);
}

uint64_t PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A198;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void std::__tree<LiString>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<LiString>::destroy(a1, *a2);
    std::__tree<LiString>::destroy(a1, a2[1]);
    LiString::dec((LiString *)(a2 + 4));
    operator delete(a2);
  }
}

void PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A198;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::UniformVariable,PCArray_Traits<ProShade::UniformVariable>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656A1D0;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

ProShade::ConstVector *ProShade::ConstVector::ConstVector(ProShade::ConstVector *this, int a2)
{
  *((_QWORD *)this + 10) = &off_1E65EB048;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1E657E068);
  *(_QWORD *)this = &unk_1E657E588;
  *((_QWORD *)this + 10) = &unk_1E657E690;
  *(_QWORD *)this = &off_1E657DF38;
  *((_QWORD *)this + 10) = &unk_1E657E040;
  *((double *)this + 6) = (double)a2;
  *((double *)this + 7) = (double)a2;
  *((double *)this + 8) = (double)a2;
  *((double *)this + 9) = (double)a2;
  *((_QWORD *)this + 3) = 0x100000002;
  return this;
}

void sub_1B2CEE730(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 80) = v3;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  PCSharedCount *v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  PCSharedCount *v16;
  uint64_t v17;
  PC_Sp_counted_base *v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  PCSharedCount *v22;
  uint64_t v23;
  PCException *exception;
  PCString v25;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v25, "PCArray::resize");
    PCException::PCException(exception, &v25);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if (a2 >= (int)v6)
    {
      if (a2 > (int)v6)
      {
        v10 = 40 * v6;
        v11 = a2 - v6;
        do
        {
          v12 = (PCSharedCount *)(*(_QWORD *)(a1 + 16) + v10);
          v12->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          v12[2].var0 = 0;
          PCSharedCount::PCSharedCount(v12 + 3);
          v12->var0 = (PC_Sp_counted_base *)&unk_1E6569828;
          v12[4].var0 = 0;
          v10 += 40;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v7 = a2;
      v8 = 40 * a2;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + v8) + 8))(*(_QWORD *)(a1 + 16) + v8);
        ++v7;
        v8 += 40;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 40 * v3);
    }
    else
    {
      v9 = 0;
    }
    v13 = *(_DWORD *)(a1 + 12);
    if (a2 >= v13)
      v14 = v13;
    else
      v14 = a2;
    if ((int)v14 < 1)
    {
      LODWORD(v14) = 0;
    }
    else
    {
      for (i = 0; i != v14; ++i)
      {
        v16 = (PCSharedCount *)&v9[40 * i];
        v17 = *(_QWORD *)(a1 + 16) + 40 * i;
        v16->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        LOBYTE(v16[1].var0) = *(_BYTE *)(v17 + 8);
        v16[2].var0 = *(PC_Sp_counted_base **)(v17 + 16);
        PCSharedCount::PCSharedCount(v16 + 3, (const PCSharedCount *)(v17 + 24));
        v16->var0 = (PC_Sp_counted_base *)&unk_1E6569828;
        v18 = *(PC_Sp_counted_base **)(v17 + 32);
        v16[4].var0 = v18;
        if (v18)
        {
          v19 = (unsigned int *)((char *)v18 - 12);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 + 1, v19));
        }
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40 * i) + 8))(*(_QWORD *)(a1 + 16) + 40 * i);
      }
      v13 = *(_DWORD *)(a1 + 12);
    }
    if ((int)v14 < v13)
    {
      v21 = 40 * v14;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) + v21) + 8))(*(_QWORD *)(a1 + 16) + v21);
        v21 += 40;
        LODWORD(v14) = v14 + 1;
      }
      while (*(_DWORD *)(a1 + 12) > (int)v14);
    }
    if ((int)v14 < a2)
    {
      v22 = (PCSharedCount *)&v9[40 * v14];
      do
      {
        v22->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v22[2].var0 = 0;
        PCSharedCount::PCSharedCount(v22 + 3);
        v22->var0 = (PC_Sp_counted_base *)&unk_1E6569828;
        v22[4].var0 = 0;
        v22 += 5;
        LODWORD(v14) = v14 + 1;
      }
      while ((int)v14 < a2);
    }
    v23 = *(_QWORD *)(a1 + 16);
    if (v23)
      MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2CEEA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<LiString>::find<LiString>(uint64_t a1, const char **a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  const char *v6;

  v3 = (_QWORD *)(a1 + 8);
  v4 = std::__tree<LiString>::__lower_bound<LiString>(a1, a2, *(_QWORD **)(a1 + 8), (_QWORD *)(a1 + 8));
  if (v3 == v4)
    return v3;
  v5 = v4;
  v6 = (const char *)v4[4];
  if (v6)
  {
    if (!*a2 || strcmp(*a2, v6) < 0)
      return v3;
  }
  return v5;
}

_QWORD *std::__tree<LiString>::__lower_bound<LiString>(uint64_t a1, const char **a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v5;
  const char *v6;
  const char *v7;

  if (a3)
  {
    v5 = a3;
    v6 = *a2;
    do
    {
      if (v6)
      {
        v7 = (const char *)v5[4];
        if (v7)
        {
          if (strcmp(v7, v6) < 0)
            ++v5;
          else
            a4 = v5;
        }
        else
        {
          ++v5;
        }
      }
      else
      {
        a4 = v5;
      }
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  return a4;
}

uint64_t *std::__tree<LiString>::__emplace_unique_key_args<LiString,LiString const&>(uint64_t **a1, const char **a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v5 = (uint64_t **)std::__tree<LiString>::__find_equal<LiString>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v8 = *a3;
    v6[4] = *a3;
    if (v8)
    {
      v9 = (unsigned int *)(v8 - 12);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v12, v7, v6);
  }
  return v6;
}

_QWORD *std::__tree<LiString>::__find_equal<LiString>(uint64_t a1, _QWORD *a2, const char **a3)
{
  uint64_t v4;
  _QWORD *v5;
  const char *v6;
  _QWORD *v7;
  const char *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *a3;
    while (1)
    {
      while (1)
      {
        v7 = (_QWORD *)v4;
        v8 = *(const char **)(v4 + 32);
        if (v8)
          break;
        if (!v6)
          goto LABEL_14;
LABEL_11:
        v5 = v7 + 1;
        v4 = v7[1];
        if (!v4)
          goto LABEL_14;
      }
      if (v6 && (strcmp(v6, *(const char **)(v4 + 32)) & 0x80000000) == 0)
      {
        if ((strcmp(v8, v6) & 0x80000000) == 0)
          goto LABEL_14;
        goto LABEL_11;
      }
      v4 = *v7;
      v5 = v7;
      if (!*v7)
        goto LABEL_14;
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_14:
  *a2 = v7;
  return v5;
}

void PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A208;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

_DWORD *std::__tree<std::__value_type<PCHash128,ProShade::Snippet *>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,ProShade::Snippet *>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,ProShade::Snippet *>>>::__emplace_unique_key_args<PCHash128,std::piecewise_construct_t const&,std::tuple<PCHash128 const&>,std::tuple<>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  uint64_t v11;

  v6 = (void **)std::__tree<std::__value_type<PCHash128,PCRect<double>>,std::__map_value_compare<PCHash128,std::__value_type<PCHash128,PCRect<double>>,std::less<PCHash128>,true>,std::allocator<std::__value_type<PCHash128,PCRect<double>>>>::__find_equal<PCHash128>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v9 = *a4;
    v7[8] = **a4;
    v7[9] = v9[1];
    v7[10] = v9[2];
    v7[11] = v9[3];
    *((_QWORD *)v7 + 6) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void std::__tree<std::__value_type<LiString,int>,std::__map_value_compare<LiString,std::__value_type<LiString,int>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<LiString,int>,std::__map_value_compare<LiString,std::__value_type<LiString,int>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<LiString,int>,std::__map_value_compare<LiString,std::__value_type<LiString,int>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,int>>>::destroy(a1, a2[1]);
    LiString::dec((LiString *)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<LiString,int>,std::__map_value_compare<LiString,std::__value_type<LiString,int>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,int>>>::__emplace_unique_key_args<LiString,std::piecewise_construct_t const&,std::tuple<LiString const&>,std::tuple<>>(uint64_t **a1, const char **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v14;

  v6 = (uint64_t **)std::__tree<LiString>::__find_equal<LiString>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = (uint64_t *)operator new(0x30uLL);
    v7 = v9;
    v10 = **a4;
    v9[4] = v10;
    if (v10)
    {
      v11 = (unsigned int *)(v10 - 12);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    *((_DWORD *)v9 + 10) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v14, v8, v9);
  }
  return v7;
}

void PCPtr<ProShade::Node>::reset<ProShade::Node>(PCShared_base **a1, PCShared_base *a2)
{
  uint64_t *v3;
  PCShared_base *v4;
  PCSharedCount v5;

  if (*a1 != a2)
  {
    v4 = a2;
    if (a2)
      a2 = (PCShared_base *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
    v3 = (uint64_t *)PCSharedCount::PCSharedCount(&v5, a2);
    *a1 = v4;
    PCSharedCount::operator=(v3, (uint64_t *)a1 + 1);
    PCSharedCount::~PCSharedCount(&v5);
  }
}

void sub_1B2CEEF04(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::resize(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  PCSharedCount *v15;
  uint64_t v16;
  PC_Sp_counted_base *v17;
  PCShared_base *v18;
  PCSharedCount *v19;
  PC_Sp_counted_base *v20;
  PCShared_base *v21;
  uint64_t v22;
  ProShade::Sampler *v23;
  PCException *exception;
  int v25;
  PCString v26;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v26, "PCArray::resize");
    PCException::PCException(exception, &v26);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    v6 = *(int *)(result + 12);
    if (a2 >= (int)v6)
    {
      if (a2 > (int)v6)
      {
        v10 = 96 * v6;
        v11 = a2 - v6;
        do
        {
          result = ProShade::Sampler::Sampler((ProShade::Sampler *)(*(_QWORD *)(v5 + 16) + v10));
          v10 += 96;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v7 = a2;
      v8 = 96 * a2;
      do
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 16) + v8) + 8))(*(_QWORD *)(v5 + 16) + v8);
        ++v7;
        v8 += 96;
      }
      while (v7 < *(int *)(v5 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 96 * v3);
    }
    else
    {
      v9 = 0;
    }
    v12 = *(_DWORD *)(v5 + 12);
    if (a2 >= v12)
      v13 = *(_DWORD *)(v5 + 12);
    else
      v13 = a2;
    if (v13 < 1)
    {
      v13 = 0;
    }
    else
    {
      v25 = v3;
      v14 = 0;
      do
      {
        v15 = (PCSharedCount *)&v9[v14];
        v16 = *(_QWORD *)(v5 + 16);
        v15->var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
        LOBYTE(v15[1].var0) = *(_BYTE *)(v16 + v14 + 8);
        v15[2].var0 = *(PC_Sp_counted_base **)(v16 + v14 + 16);
        PCSharedCount::PCSharedCount((PCSharedCount *)&v9[v14 + 24], (const PCSharedCount *)(v16 + v14 + 24));
        v15->var0 = (PC_Sp_counted_base *)&unk_1E656A018;
        v17 = *(PC_Sp_counted_base **)(v16 + v14 + 48);
        v15[4].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
        v15[6].var0 = v17;
        if (v17)
          v18 = (PCShared_base *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24));
        else
          v18 = 0;
        PCSharedCount::PCSharedCount(v15 + 7, v18);
        v15[4].var0 = (PC_Sp_counted_base *)&unk_1E656A240;
        v19 = (PCSharedCount *)&v9[v14];
        v20 = *(PC_Sp_counted_base **)(v16 + v14 + 80);
        v19[8].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
        v19[10].var0 = v20;
        if (v20)
          v21 = (PCShared_base *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24));
        else
          v21 = 0;
        PCSharedCount::PCSharedCount(v19 + 11, v21);
        v19[8].var0 = (PC_Sp_counted_base *)&unk_1E656A2C0;
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 16) + v14) + 8))(*(_QWORD *)(v5 + 16) + v14);
        v14 += 96;
      }
      while (96 * v13 != v14);
      v12 = *(_DWORD *)(v5 + 12);
      v3 = v25;
    }
    if (v13 < v12)
    {
      v22 = 96 * v13;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 16) + v22) + 8))(*(_QWORD *)(v5 + 16) + v22);
        v22 += 96;
        ++v13;
      }
      while (*(_DWORD *)(v5 + 12) > v13);
    }
    if (v13 < a2)
    {
      v23 = (ProShade::Sampler *)&v9[96 * v13];
      do
      {
        v23 = (ProShade::Sampler *)(ProShade::Sampler::Sampler(v23) + 96);
        ++v13;
      }
      while (v13 < a2);
    }
    result = *(_QWORD *)(v5 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v5 + 16) = v9;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = a2;
  return result;
}

void sub_1B2CEF24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, PCString a14)
{
  PCString::~PCString(&a14);
  _Unwind_Resume(a1);
}

void PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A300;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::Sampler,PCArray_Traits<ProShade::Sampler>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A338;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::Output,PCArray_Traits<ProShade::Output>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t **std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t OUTLINED_FUNCTION_0_6(uint64_t a1, _BYTE **a2)
{
  **a2 = 0;
  if (*a2)
    return (uint64_t)(*a2 - 12);
  else
    return 0;
}

void OUTLINED_FUNCTION_1_3(unsigned int *a1@<X8>)
{
  __ldaxr(a1);
}

void ProShade::VertexProgram::VertexProgram(uint64_t a1)
{
  unsigned int *v1;
  char v2;
  uint64_t v3;
  _BYTE **v4;
  unsigned int v5;
  void *v6;

  v1 = (unsigned int *)(a1 - 12);
  do
    OUTLINED_FUNCTION_1_3(v1);
  while (__stlxr(v5, v1));
  if (v2)
  {
    v6 = (void *)OUTLINED_FUNCTION_0_6(v3, v4);
    free(v6);
  }
}

uint64_t ProShade::Program::shader(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  v4 = MEMORY[0x1E0DE4F60];
  v5 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a2 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a2 + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(a2 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](a2 + 112);
}

PCSharedCount *ProShade::Snippet::Snippet(PCSharedCount *this)
{
  this[5].var0 = 0;
  LOBYTE(this[6].var0) = 1;
  this->var0 = (PC_Sp_counted_base *)&off_1E656A378;
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E656A3A8;
  PCSharedCount::PCSharedCount(this + 1);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&this[2]);
  return this;
}

void sub_1B2CEF5CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCString *v3;
  PCString *v4;

  v4 = v3;
  PCString::~PCString(v4);
  *(_QWORD *)(v1 + 32) = &off_1E65EB048;
  *(_BYTE *)(v1 + 48) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Snippet::~Snippet(ProShade::Snippet *this)
{
  *(_QWORD *)this = &off_1E656A378;
  *((_QWORD *)this + 4) = &unk_1E656A3A8;
  PCString::~PCString((PCString *)this + 1);
  *((_QWORD *)this + 4) = &off_1E65EB048;
  *((_BYTE *)this + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 5);
}

{
  *(_QWORD *)this = &off_1E656A378;
  *((_QWORD *)this + 4) = &unk_1E656A3A8;
  PCString::~PCString((PCString *)this + 1);
  *((_QWORD *)this + 4) = &off_1E65EB048;
  *((_BYTE *)this + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 5);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::Snippet::~Snippet(ProShade::Snippet *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &off_1E656A378;
  *((_QWORD *)v1 + 4) = &unk_1E656A3A8;
  PCString::~PCString((PCString *)v1 + 1);
  *((_QWORD *)v1 + 4) = &off_1E65EB048;
  v1[48] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 5);
}

{
  ProShade::Snippet::~Snippet((ProShade::Snippet *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t ProShade::Snippet::code(ProShade::Snippet *this)
{
  return (uint64_t)this + 8;
}

void ProShade::External::define(uint64_t a1, const PCSharedCount *a2, const PCString *a3, int a4, int a5)
{
  uint64_t *v9;
  PCSharedCount v10;

  *(PCSharedCount *)a1 = (PCSharedCount)a2->var0;
  v9 = (uint64_t *)(a1 + 8);
  PCSharedCount::PCSharedCount(&v10, a2 + 1);
  PCSharedCount::operator=(v9, (uint64_t *)&v10);
  PCSharedCount::~PCSharedCount(&v10);
  PCString::set((PCString *)(a1 + 16), a3);
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
}

void sub_1B2CEF7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void ProShade::External::addArgument(uint64_t a1, int a2, int a3, const PCString *a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;

  v8 = a1 + 32;
  v9 = *(_DWORD *)(a1 + 44);
  if (*(_DWORD *)(a1 + 40) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 40);
  PCArray<ProShade::External::Argument,PCArray_Traits<ProShade::External::Argument>>::resize(v8, v9 + 1, v10);
  v11 = *(_QWORD *)(a1 + 48) + 16 * *(int *)(a1 + 44);
  *(_DWORD *)(v11 - 16) = a2;
  *(_DWORD *)(v11 - 12) = a3;
  PCString::set((PCString *)(v11 - 8), a4);
}

void ProShade::Error<PCIllegalArgumentException>::raise<PCString>(OZChannelBase *a1, const PCString *a2)
{
  PCIllegalArgumentException *exception;

  OZChannelBase::setRangeName(a1, a2);
  exception = (PCIllegalArgumentException *)__cxa_allocate_exception(0x40uLL);
  PCIllegalArgumentException::PCIllegalArgumentException(exception, (const PCString *)a1);
}

void sub_1B2CEF86C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

ProShade::ExternalNode *ProShade::ExternalNode::ExternalNode(ProShade::ExternalNode *this)
{
  *((_QWORD *)this + 10) = &off_1E65EB048;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  ProShade::Node::Node(this, (uint64_t *)&off_1E656A4B8);
  *(_QWORD *)this = &off_1E656A3D8;
  *((_QWORD *)this + 10) = &unk_1E656A498;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = &unk_1E656A208;
  return this;
}

void sub_1B2CEF8FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 80) = v4;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::External::operator()(uint64_t a1@<X0>, const PCSharedCount *a2@<X1>, const PCSharedCount *a3@<X2>, const PCSharedCount *a4@<X3>, const PCSharedCount *a5@<X4>, PCSharedCount *a6@<X8>)
{
  uint64_t v12;
  int v13;
  int v14;
  int isa_high;
  int isa;
  int v17;
  int v18;
  int v19;
  int v20;
  __CFString *var0;
  const PCString *v22;
  PCString v23;
  PCSharedCount v24;

  if (*(_DWORD *)(a1 + 44) != 4)
  {
    PCString::ssprintf((PCString *)"expected %d arguments, got 4", &v23, *(unsigned int *)(a1 + 44));
    ProShade::Error<PCIllegalArgumentException>::raise<PCString>((OZChannelBase *)&v23, v22);
  }
  v12 = operator new();
  ProShade::ExternalNode::ExternalNode((ProShade::ExternalNode *)v12);
  v23.var0 = (__CFString *)v12;
  PCSharedCount::PCSharedCount(&v24, (PCShared_base *)(v12 + *(_QWORD *)(*(_QWORD *)v12 - 24)));
  if (!v12)
    throw_PCNullPointerException(1);
  v23.var0[1].data = (char *)a1;
  v13 = *(_DWORD *)(v12 + 68);
  if (*(_DWORD *)(v12 + 64) <= v13)
    v14 = (2 * (v13 + 1)) | 1;
  else
    v14 = *(_DWORD *)(v12 + 64);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v12 + 56, v13 + 1, v14);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v12 + 72) + 32 * *(int *)(v12 + 68) - 32, a2);
  if (!v23.var0)
    throw_PCNullPointerException(1);
  isa_high = HIDWORD(v23.var0[2].isa);
  if (SLODWORD(v23.var0[2].isa) <= isa_high)
    isa = (2 * (isa_high + 1)) | 1;
  else
    isa = (int)v23.var0[2].isa;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v23.var0[1].length, isa_high + 1, isa);
  ProShade::VarT<ProShade::Node>::operator=(v23.var0[2].info + 32 * SHIDWORD(v23.var0[2].isa) - 32, a3);
  v17 = HIDWORD(v23.var0[2].isa);
  if (SLODWORD(v23.var0[2].isa) <= v17)
    v18 = (2 * (v17 + 1)) | 1;
  else
    v18 = (int)v23.var0[2].isa;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v23.var0[1].length, v17 + 1, v18);
  ProShade::VarT<ProShade::Node>::operator=(v23.var0[2].info + 32 * SHIDWORD(v23.var0[2].isa) - 32, a4);
  v19 = HIDWORD(v23.var0[2].isa);
  if (SLODWORD(v23.var0[2].isa) <= v19)
    v20 = (2 * (v19 + 1)) | 1;
  else
    v20 = (int)v23.var0[2].isa;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v23.var0[1].length, v19 + 1, v20);
  ProShade::VarT<ProShade::Node>::operator=(v23.var0[2].info + 32 * SHIDWORD(v23.var0[2].isa) - 32, a5);
  var0 = v23.var0;
  HIDWORD(v23.var0->length) = *(_DWORD *)(a1 + 28);
  var0->length = *((_QWORD *)var0[1].data + 3);
  (*((void (**)(__CFString *))var0->isa + 19))(var0);
  a6->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a6 + 2, (const PCSharedCount *)&v23);
  PCSharedCount::~PCSharedCount(&v24);
}

void sub_1B2CEFB64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  uint64_t v11;

  MEMORY[0x1B5E29170](v11, 0x10B1C4041E1679CLL);
  _Unwind_Resume(a1);
}

void ProShade::External::operator()(uint64_t a1@<X0>, const PCSharedCount *a2@<X1>, const PCSharedCount *a3@<X2>, const PCSharedCount *a4@<X3>, const PCSharedCount *a5@<X4>, const PCSharedCount *a6@<X5>, PCSharedCount *a7@<X8>)
{
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  void **var0;
  const PCString *v26;
  OZChannelBase var60;

  if (*(_DWORD *)(a1 + 44) != 5)
  {
    PCString::ssprintf((PCString *)"expected %d arguments, got 5", (PCString *)&var60, *(unsigned int *)(a1 + 44));
    ProShade::Error<PCIllegalArgumentException>::raise<PCString>(&var60, v26);
  }
  v14 = operator new();
  ProShade::ExternalNode::ExternalNode((ProShade::ExternalNode *)v14);
  var60.var0 = (void **)v14;
  PCSharedCount::PCSharedCount((PCSharedCount *)&var60.var1, (PCShared_base *)(v14 + *(_QWORD *)(*(_QWORD *)v14 - 24)));
  if (!v14)
    throw_PCNullPointerException(1);
  *((_QWORD *)var60.var0 + 6) = a1;
  v15 = *(_DWORD *)(v14 + 68);
  if (*(_DWORD *)(v14 + 64) <= v15)
    v16 = (2 * (v15 + 1)) | 1;
  else
    v16 = *(_DWORD *)(v14 + 64);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v14 + 56, v15 + 1, v16);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v14 + 72) + 32 * *(int *)(v14 + 68) - 32, a2);
  if (!var60.var0)
    throw_PCNullPointerException(1);
  v17 = *((_DWORD *)var60.var0 + 17);
  if (*((_DWORD *)var60.var0 + 16) <= v17)
    v18 = (2 * (v17 + 1)) | 1;
  else
    v18 = *((_DWORD *)var60.var0 + 16);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(var60.var0 + 7), v17 + 1, v18);
  ProShade::VarT<ProShade::Node>::operator=(*((_QWORD *)var60.var0 + 9) + 32 * *((int *)var60.var0 + 17) - 32, a3);
  v19 = *((_DWORD *)var60.var0 + 17);
  if (*((_DWORD *)var60.var0 + 16) <= v19)
    v20 = (2 * (v19 + 1)) | 1;
  else
    v20 = *((_DWORD *)var60.var0 + 16);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(var60.var0 + 7), v19 + 1, v20);
  ProShade::VarT<ProShade::Node>::operator=(*((_QWORD *)var60.var0 + 9) + 32 * *((int *)var60.var0 + 17) - 32, a4);
  v21 = *((_DWORD *)var60.var0 + 17);
  if (*((_DWORD *)var60.var0 + 16) <= v21)
    v22 = (2 * (v21 + 1)) | 1;
  else
    v22 = *((_DWORD *)var60.var0 + 16);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(var60.var0 + 7), v21 + 1, v22);
  ProShade::VarT<ProShade::Node>::operator=(*((_QWORD *)var60.var0 + 9) + 32 * *((int *)var60.var0 + 17) - 32, a5);
  v23 = *((_DWORD *)var60.var0 + 17);
  if (*((_DWORD *)var60.var0 + 16) <= v23)
    v24 = (2 * (v23 + 1)) | 1;
  else
    v24 = *((_DWORD *)var60.var0 + 16);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(var60.var0 + 7), v23 + 1, v24);
  ProShade::VarT<ProShade::Node>::operator=(*((_QWORD *)var60.var0 + 9) + 32 * *((int *)var60.var0 + 17) - 32, a6);
  var0 = var60.var0;
  *((_DWORD *)var60.var0 + 7) = *(_DWORD *)(a1 + 28);
  var0[3] = (void *)*((_QWORD *)var0[6] + 3);
  (*((void (**)(void **))*var0 + 19))(var0);
  a7->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a7 + 2, (const PCSharedCount *)&var60);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&var60.var1);
}

void sub_1B2CEFE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  uint64_t v11;

  MEMORY[0x1B5E29170](v11, 0x10B1C4041E1679CLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ExternalNode::ExternalNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 80) = &off_1E65EB048;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656A4B8);
  *(_QWORD *)a1 = &off_1E656A3D8;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = &unk_1E656A498;
  *(_QWORD *)(a1 + 56) = &unk_1E656A208;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  v6 = *(_DWORD *)(a3 + 12);
  if (v6 <= 0)
    v7 = 0;
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 56, v6, v7);
  if (*(int *)(a3 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 72) + v8, (const PCSharedCount *)(*(_QWORD *)(a3 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a3 + 12));
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
  return a1;
}

void sub_1B2CEFF98(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 80) = v3 + 16;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::ExternalNode::~ExternalNode(ProShade::ExternalNode *this, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[5];
  *((_QWORD *)this + 7) = &unk_1E656A208;
  v5 = (char *)this + 56;
  if (*((int *)v5 + 2) < 0)
    v6 = 1;
  else
    v6 = *((_DWORD *)v5 + 2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)v5, 0, v6);
  v7 = *((_QWORD *)this + 9);
  if (v7)
    MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  v8 = a2[1];
  *(_QWORD *)this = v8;
  *(_QWORD *)((char *)this + *(_QWORD *)(v8 - 24)) = a2[4];
  LiString::dec((ProShade::ExternalNode *)((char *)this + 32));
}

void ProShade::ExternalNode::~ExternalNode(ProShade::ExternalNode *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 88));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 88));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::ExternalNode::~ExternalNode(ProShade::ExternalNode *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = &off_1E65EB048;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 88));
}

{
  ProShade::ExternalNode::~ExternalNode((ProShade::ExternalNode *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void ProShade::ExternalNode::repr(ProShade::ExternalNode *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  char *v11;
  int v12;
  size_t v13;
  unsigned int *v14;
  _BYTE *v15;
  unsigned int v16;
  size_t v17;
  const void *v18;
  int v19;
  size_t v20;
  unsigned int *v21;
  unsigned int v22;
  size_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  char *__src;
  _BYTE *v40;

  v3 = (_QWORD *)a2;
  v40 = 0;
  LODWORD(a2) = *((_DWORD *)this + 17);
  if ((int)a2 >= 1)
  {
    v4 = 0;
    do
    {
      if (v4)
      {
        LiString::append((LiString *)&v40, ", ", 2);
        LODWORD(a2) = *((_DWORD *)this + 17);
      }
      if (v4 >= (int)a2)
        PCArray_base::badIndex(this);
      v5 = *(_QWORD *)(*((_QWORD *)this + 9) + 32 * v4 + 16);
      if (!v5)
        throw_PCNullPointerException(1);
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v5 + 16))(&__src);
      if (__src)
        v6 = *((_DWORD *)__src - 2);
      else
        v6 = 0;
      LiString::append((LiString *)&v40, __src, v6);
      if (__src)
      {
        v7 = (unsigned int *)(__src - 12);
        do
        {
          v8 = __ldaxr(v7);
          v9 = v8 - 1;
        }
        while (__stlxr(v9, v7));
        if (!v9)
        {
          *__src = 0;
          if (__src)
            v10 = __src - 12;
          else
            v10 = 0;
          free(v10);
        }
      }
      ++v4;
      a2 = *((int *)this + 17);
    }
    while (v4 < a2);
  }
  (*(void (**)(char **__return_ptr, ProShade::ExternalNode *))(*(_QWORD *)this + 24))(&__src, this);
  v11 = __src;
  if (__src)
    v12 = *((_DWORD *)__src - 2);
  else
    v12 = 0;
  v13 = v12;
  v14 = (unsigned int *)malloc_type_malloc(v12 + 14, 0x8903763CuLL);
  v14[1] = v13 + 1;
  v14[2] = v13 + 2;
  atomic_store(1u, v14);
  v15 = v14 + 3;
  atomic_store(0, v14);
  memcpy(v14 + 3, v11, v13);
  v15[v13] = 40;
  v15[v13 + 1] = 0;
  do
    v16 = __ldaxr(v14);
  while (__stlxr(v16 + 1, v14));
  v17 = (int)v14[1];
  v18 = v40;
  if (v40)
    v19 = *((_DWORD *)v40 - 2);
  else
    v19 = 0;
  v20 = v17 + v19;
  v21 = (unsigned int *)malloc_type_malloc(v20 + 13, 0x8903763CuLL);
  v21[1] = v20;
  v21[2] = v20 + 1;
  atomic_store(1u, v21);
  atomic_store(0, v21);
  memcpy(v21 + 3, v15, v17);
  memcpy((char *)v21 + v17 + 12, v18, v19);
  *((_BYTE *)v21 + v20 + 12) = 0;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v23 = (int)v21[1];
  v24 = (unsigned int *)malloc_type_malloc(v23 + 14, 0x8903763CuLL);
  v24[1] = v23 + 1;
  v24[2] = v23 + 2;
  atomic_store(1u, v24);
  v25 = v24 + 3;
  atomic_store(0, v24);
  memcpy(v24 + 3, v21 + 3, v23);
  *((_BYTE *)v25 + v23) = 41;
  *((_BYTE *)v25 + v23 + 1) = 0;
  *v3 = v24 + 3;
  do
    v26 = __ldaxr(v24);
  while (__stlxr(v26 + 1, v24));
  do
  {
    v27 = __ldaxr(v21);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v21));
  if (!v28)
    free(v21);
  do
  {
    v29 = __ldaxr(v14);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v14));
  if (!v30)
    free(v14);
  if (__src)
  {
    v31 = (unsigned int *)(__src - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *__src = 0;
      if (__src)
        v34 = __src - 12;
      else
        v34 = 0;
      free(v34);
    }
  }
  if (v40)
  {
    v35 = (unsigned int *)(v40 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v40 = 0;
      if (v40)
        v38 = v40 - 12;
      else
        v38 = 0;
      free(v38);
    }
  }
}

void sub_1B2CF04A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  do
  {
    v13 = __ldaxr(v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v11));
  if (!v14)
    free(v11);
  do
  {
    v15 = __ldaxr(v10);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v10));
  if (!v16)
    free(v10);
  if (a9)
  {
    v17 = (unsigned int *)(a9 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a10)
  {
    v20 = (unsigned int *)(a10 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::ExternalNode::description(ProShade::ExternalNode *this@<X0>, LiString *a2@<X8>)
{
  char *v3;
  PCString v4;

  PCString::PCString(&v4, (const PCString *)(*((_QWORD *)this + 6) + 16));
  v3 = PCString::createCStr(&v4);
  PCString::~PCString(&v4);
  LiString::LiString(a2, v3);
  free(v3);
}

void sub_1B2CF0600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void ProShade::ExternalNode::computeHash(ProShade::ExternalNode *this, int8x8_t *a2)
{
  char *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  __n128 v12;
  char *v13;

  PCHashWriteStream::writeValue(a2, "ExternalNode");
  (*(void (**)(char **__return_ptr, ProShade::ExternalNode *))(*(_QWORD *)this + 24))(&v13, this);
  if (v13)
    v4 = v13;
  else
    v4 = "";
  if (v13)
    v5 = *((unsigned int *)v13 - 2);
  else
    v5 = 0;
  PCHashWriteStream::writeData(a2, v4, v5);
  if (*((int *)this + 17) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*((_QWORD *)this + 9) + v6, &v12);
      PCHashWriteStream::writeValue(a2, (const PCHash128 *)&v12);
      ++v7;
      v6 += 32;
    }
    while (v7 < *((int *)this + 17));
  }
  if (v13)
  {
    v8 = (unsigned int *)(v13 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v13 = 0;
      if (v13)
        v11 = v13 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2CF0714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _BYTE *a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a12)
  {
    v13 = (unsigned int *)(a12 - 12);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::ExternalNode::inputs(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a1 + 68);
  if (*(_DWORD *)(a2 + 8) >= v4)
    v5 = *(_DWORD *)(a2 + 8);
  else
    v5 = (2 * v4) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v4, v5);
  if (*(int *)(a1 + 68) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + v6, (const PCSharedCount *)(*(_QWORD *)(a1 + 72) + v6));
      ++v7;
      v6 += 32;
    }
    while (v7 < *(int *)(a1 + 68));
  }
}

uint64_t ProShade::ExternalNode::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[17];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 68))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 72);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::ExternalNode::ExternalNode(v13, *(_QWORD *)(v3 + 48), (uint64_t)&v19);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2CF09C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C4041E1679CLL);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::ExternalNode::atomic(ProShade::ExternalNode *this)
{
  return 0;
}

uint64_t ProShade::ExternalNode::setFrequency(ProShade::ExternalNode *this)
{
  uint64_t result;

  result = ProShade::Node::setFrequency(this);
  if (*((_DWORD *)this + 10) == 2 && *((int *)this + 11) >= 3)
    *((_DWORD *)this + 10) = 3;
  return result;
}

uint64_t ProShade::ExternalNode::clone(ProShade::ExternalNode *this)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  ProShade::ExternalNode::ExternalNode((ProShade::ExternalNode *)v2);
  *(_QWORD *)(v2 + 48) = *((_QWORD *)this + 6);
  v3 = *((_DWORD *)this + 17);
  if (*(_DWORD *)(v2 + 64) >= v3)
    v4 = *(_DWORD *)(v2 + 64);
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 56, v3, v4);
  if (*((int *)this + 17) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 72) + v5, (const PCSharedCount *)(*((_QWORD *)this + 9) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *((int *)this + 17));
  }
  return v2;
}

void sub_1B2CF0B14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C4041E1679CLL);
  _Unwind_Resume(a1);
}

void ProShade::ExternalNode::computeValue(int a1, int a2, PCSharedCount *this)
{
  PCSharedCount::PCSharedCount(this);
}

PC_Sp_counted_base *ProShade::ExternalNode::snippet(ProShade::ExternalNode *this)
{
  const PCSharedCount *v1;
  PCSharedCount *v2;
  PC_Sp_counted_base *var0;
  PCSharedCount v5;

  v1 = (const PCSharedCount *)*((_QWORD *)this + 6);
  var0 = v1->var0;
  PCSharedCount::PCSharedCount(&v5, v1 + 1);
  PCSharedCount::~PCSharedCount(v2);
  return var0;
}

void PCArray<ProShade::External::Argument,PCArray_Traits<ProShade::External::Argument>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  const PCString *v16;
  uint64_t v17;
  PCSharedCount *v18;
  PCSharedCount *v19;
  uint64_t v20;
  PCException *exception;
  PCString v22;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "PCArray::resize");
    PCException::PCException(exception, &v22);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if (a2 >= (int)v6)
    {
      if (a2 > (int)v6)
      {
        v10 = 16 * v6;
        v11 = a2 - v6;
        do
        {
          v12 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(v12 + v10) = 0;
          *(_QWORD *)(v12 + v10 + 8) = 0;
          PCSharedCount::PCSharedCount((PCSharedCount *)(v12 + v10 + 8));
          v10 += 16;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v7 = a2;
      v8 = (16 * a2) | 8;
      do
      {
        PCString::~PCString((PCString *)(*(_QWORD *)(a1 + 16) + v8));
        ++v7;
        v8 += 16;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 16 * v3);
    }
    else
    {
      v9 = 0;
    }
    v13 = *(_DWORD *)(a1 + 12);
    if (a2 >= v13)
      v14 = *(_DWORD *)(a1 + 12);
    else
      v14 = a2;
    if (v14 < 1)
    {
      v14 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = (const PCString *)(*(_QWORD *)(a1 + 16) + v15);
        *(PCString *)&v9[v15] = (PCString)v16->var0;
        PCString::PCString((PCString *)&v9[v15 + 8], v16 + 1);
        PCString::~PCString((PCString *)(*(_QWORD *)(a1 + 16) + v15 + 8));
        v15 += 16;
      }
      while (16 * v14 != v15);
      v13 = *(_DWORD *)(a1 + 12);
    }
    if (v14 < v13)
    {
      v17 = (16 * v14) | 8;
      do
      {
        PCString::~PCString((PCString *)(*(_QWORD *)(a1 + 16) + v17));
        v17 += 16;
        ++v14;
      }
      while (*(_DWORD *)(a1 + 12) > v14);
    }
    if (v14 < a2)
    {
      v18 = (PCSharedCount *)&v9[16 * v14 + 8];
      do
      {
        v18[-1].var0 = 0;
        v18->var0 = 0;
        PCSharedCount::PCSharedCount(v18);
        v18 = v19 + 2;
        ++v14;
      }
      while (v14 < a2);
    }
    v20 = *(_QWORD *)(a1 + 16);
    if (v20)
      MEMORY[0x1B5E2914C](v20, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2CF0DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PCIllegalArgumentException::PCIllegalArgumentException(PCIllegalArgumentException *this, const PCString *a2)
{
  _QWORD *v2;

  PCException::PCException(this, a2);
  *v2 = &unk_1E65EA798;
}

void LiClipSet::LiClipSet(LiClipSet *this)
{
  *(_QWORD *)this = &unk_1E64FC2C0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E64FC288;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
}

void LiClipSet::LiClipSet(LiClipSet *this, const LiClipSet *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_1E64FC2C0;
  v4 = *((_DWORD *)a2 + 3);
  if (v4 <= 0)
    v5 = 0;
  else
    v5 = (2 * v4) | 1;
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize((uint64_t)this, v4, v5);
  if (*((int *)a2 + 3) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_OWORD *)(*((_QWORD *)a2 + 2) + v6);
      v9 = (_OWORD *)(*((_QWORD *)this + 2) + v6);
      v10 = v8[1];
      *v9 = *v8;
      v9[1] = v10;
      ++v7;
      v6 += 32;
    }
    while (v7 < *((int *)a2 + 3));
  }
  *((_QWORD *)this + 3) = &unk_1E64FC288;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  v11 = *((_DWORD *)a2 + 9);
  if (v11 <= 0)
    v12 = 0;
  else
    v12 = (2 * v11) | 1;
  PCArray<int,PCArray_Traits<int>>::resize((uint64_t)this + 24, v11, v12);
  if (*((int *)a2 + 9) >= 1)
  {
    v13 = 0;
    v14 = *((_QWORD *)a2 + 5);
    v15 = *((_QWORD *)this + 5);
    do
    {
      *(_DWORD *)(v15 + 4 * v13) = *(_DWORD *)(v14 + 4 * v13);
      ++v13;
    }
    while (v13 < *((int *)a2 + 9));
  }
}

void sub_1B2CF0F24(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

uint64_t LiClipSet::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 8) >= v4)
    v5 = *(_DWORD *)(a1 + 8);
  else
    v5 = (2 * v4) | 1;
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize(a1, v4, v5);
  if (*(int *)(a2 + 12) >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_OWORD *)(*(_QWORD *)(a2 + 16) + v6);
      v9 = (_OWORD *)(*(_QWORD *)(a1 + 16) + v6);
      v10 = v8[1];
      *v9 = *v8;
      v9[1] = v10;
      ++v7;
      v6 += 32;
    }
    while (v7 < *(int *)(a2 + 12));
  }
  v11 = *(_DWORD *)(a2 + 36);
  if (*(_DWORD *)(a1 + 32) >= v11)
    v12 = *(_DWORD *)(a1 + 32);
  else
    v12 = (2 * v11) | 1;
  PCArray<int,PCArray_Traits<int>>::resize(a1 + 24, v11, v12);
  if (*(int *)(a2 + 36) >= 1)
  {
    v13 = 0;
    v14 = *(_QWORD *)(a2 + 40);
    v15 = *(_QWORD *)(a1 + 40);
    do
    {
      *(_DWORD *)(v15 + 4 * v13) = *(_DWORD *)(v14 + 4 * v13);
      ++v13;
    }
    while (v13 < *(int *)(a2 + 36));
  }
  return a1;
}

void LiClipSet::removeIndex(LiClipSet *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  LODWORD(v4) = *((_DWORD *)this + 3) - 1;
  if ((int)v4 > a2)
  {
    v5 = a2;
    v6 = 32 * a2;
    do
    {
      ++v5;
      v7 = (_OWORD *)(*((_QWORD *)this + 2) + v6);
      v8 = v7[3];
      *v7 = v7[2];
      v7[1] = v8;
      v4 = *((int *)this + 3) - 1;
      v6 += 32;
    }
    while (v5 < v4);
  }
  if (*((_DWORD *)this + 2) >= (int)v4)
    v9 = *((_DWORD *)this + 2);
  else
    v9 = (2 * v4) | 1;
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize((uint64_t)this, v4, v9);
  LODWORD(v10) = *((_DWORD *)this + 9) - 1;
  if ((int)v10 > a2)
  {
    v11 = *((_QWORD *)this + 5);
    v12 = a2;
    do
    {
      *(_DWORD *)(v11 + 4 * v12) = *(_DWORD *)(v11 + 4 * v12 + 4);
      v10 = *((int *)this + 9) - 1;
      ++v12;
    }
    while (v12 < v10);
  }
  if (*((_DWORD *)this + 8) >= (int)v10)
    v13 = *((_DWORD *)this + 8);
  else
    v13 = (2 * v10) | 1;
  PCArray<int,PCArray_Traits<int>>::resize((uint64_t)this + 24, v10, v13);
}

double LiClipSet::add(uint64_t a1, double *a2, int a3)
{
  double result;
  double v4;
  double v5;
  double v6;
  _QWORD v7[4];

  result = a2[3];
  v4 = a2[4];
  v5 = a2[5];
  if (result * result + v4 * v4 + v5 * v5 > 0.0)
  {
    v6 = -(result * *a2 + v4 * a2[1] + v5 * a2[2]);
    *(double *)v7 = a2[3];
    *(double *)&v7[1] = v4;
    *(double *)&v7[2] = v5;
    *(double *)&v7[3] = v6;
    LiClipSet::add(a1, (uint64_t)v7, a3);
  }
  return result;
}

void LiClipSet::add(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  int v19;

  v5 = a1;
  v6 = *(_DWORD *)(a1 + 12);
  if (v6 == 1)
  {
    a1 = PCPlaneType(*(double **)(a1 + 16));
    if ((_DWORD)a1 == 1)
      return;
    v6 = *(_DWORD *)(v5 + 12);
  }
  if (v6 >= 1)
  {
    v7 = 0;
    while (2)
    {
      if (v7 < 0)
        PCArray_base::badIndex((PCArray_base *)a1);
      a1 = PCComparePlanes((double *)a2, (double *)(*(_QWORD *)(v5 + 16) + 32 * v7));
      switch((int)a1)
      {
        case 0:
        case 3:
        case 5:
          return;
        case 1:
        case 7:
          LiClipSet::setEmpty((LiClipSet *)v5);
          return;
        case 2:
        case 4:
          LiClipSet::removeIndex((LiClipSet *)v5, v7);
          goto LABEL_12;
        case 6:
        case 8:
          ++v7;
LABEL_12:
          v6 = *(_DWORD *)(v5 + 12);
          if (v7 >= v6)
            break;
          continue;
        default:
          PCPrint("File %s, line %d should not have been reached:\n\t", v8, v9, v10, v11, v12, v13, v14, (char)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiClipSet.cpp");
          pcAbortImpl();
      }
      break;
    }
  }
  if (*(_DWORD *)(v5 + 8) <= v6)
    v15 = (2 * (v6 + 1)) | 1;
  else
    v15 = *(_DWORD *)(v5 + 8);
  PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize(v5, v6 + 1, v15);
  v16 = *(_QWORD *)(v5 + 16) + 32 * *(int *)(v5 + 12);
  v17 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v16 - 32) = *(_OWORD *)a2;
  *(_OWORD *)(v16 - 16) = v17;
  v18 = *(_DWORD *)(v5 + 36);
  if (*(_DWORD *)(v5 + 32) <= v18)
    v19 = (2 * (v18 + 1)) | 1;
  else
    v19 = *(_DWORD *)(v5 + 32);
  PCArray<int,PCArray_Traits<int>>::resize(v5 + 24, v18 + 1, v19);
  *(_DWORD *)(*(_QWORD *)(v5 + 40) + 4 * *(int *)(v5 + 36) - 4) = a3;
}

void LiClipSet::setEmpty(LiClipSet *this)
{
  int v2;
  PCArray_base *v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  int v10;
  _QWORD *v11;

  if (*((int *)this + 2) >= 1)
    v2 = *((_DWORD *)this + 2);
  else
    v2 = 3;
  v3 = (PCArray_base *)PCArray<PCVector4<double>,PCArray_Traits<PCVector4<double>>>::resize((uint64_t)this, 1, v2);
  v4 = *((_DWORD *)this + 8);
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = *((_DWORD *)this + 8);
  if (v4 >= 1)
    v6 = v5;
  else
    v6 = 3;
  if (v6 == v4)
  {
    v7 = *((int *)this + 9);
    if ((int)v7 <= 0)
      bzero((void *)(*((_QWORD *)this + 5) + 4 * v7), 4 * -(int)v7 + 4);
  }
  else
  {
    v8 = (_DWORD *)operator new[]();
    bzero(v8, 4 * v6);
    v9 = *((_DWORD *)this + 9);
    if (v9 < 1)
    {
      v10 = 0;
    }
    else
    {
      *v8 = **((_DWORD **)this + 5);
      v10 = 1;
    }
    if (v10 > v9)
      v9 = v10;
    if (!v9)
      *v8 = 0;
    v3 = (PCArray_base *)*((_QWORD *)this + 5);
    if (v3)
      v3 = (PCArray_base *)MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
    *((_QWORD *)this + 5) = v8;
  }
  *((_DWORD *)this + 8) = v6;
  *((_DWORD *)this + 9) = 1;
  if (*((int *)this + 3) < 1)
    PCArray_base::badIndex(v3);
  v11 = (_QWORD *)*((_QWORD *)this + 2);
  *v11 = 0;
  v11[1] = 0;
  v11[2] = 0;
  v11[3] = 0xBFF0000000000000;
  **((_DWORD **)this + 5) = 0;
}

void LiClipSet::add(LiClipSet *this, const LiClipSet *a2)
{
  uint64_t v2;
  uint64_t i;

  v2 = *((unsigned int *)a2 + 3);
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if (i >= *((int *)a2 + 3))
        PCArray_base::badIndex(this);
      if (i >= *((int *)a2 + 9))
        PCArray_base::badIndex(this);
      LiClipSet::add((uint64_t)this, *((_QWORD *)a2 + 2) + 32 * i, *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * i));
    }
  }
}

void LiClipSet::flatten(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v12 = 0x3FF0000000000000;
  v9 = 0x3FF0000000000000;
  v6 = 0x3FF0000000000000;
  v3 = 0x3FF0000000000000;
  v4 = 0u;
  v5 = 0u;
  v7 = 0u;
  v8 = 0u;
  v10 = 0u;
  v11 = 0u;
  v13 = *a2;
  v14 = *((_QWORD *)a2 + 2);
  PCMatrix44Tmpl<double>::flatten((uint64_t)&v3, (double *)a2, (double *)&v13);
  transform((PCArray_base *)&v3, a1);
}

void transform(PCArray_base *a1, uint64_t a2)
{
  double *v3;
  int v4;
  double *v5;

  if (*(int *)(a2 + 12) >= 1)
  {
    v3 = (double *)a1;
    v4 = 0;
    do
    {
      if (v4 < 0)
        PCArray_base::badIndex(a1);
      v5 = (double *)(*(_QWORD *)(a2 + 16) + 32 * v4);
      PCMatrix44Tmpl<double>::transform_row<double>(v3, v5, v5);
      a1 = (PCArray_base *)PCPlaneType(v5);
      if ((_DWORD)a1)
      {
        if ((_DWORD)a1 == 1)
        {
          LiClipSet::setEmpty((LiClipSet *)a2);
          return;
        }
        ++v4;
      }
      else
      {
        LiClipSet::removeIndex((LiClipSet *)a2, v4);
      }
    }
    while (v4 < *(_DWORD *)(a2 + 12));
  }
}

uint64_t LiClipSet::containsBox(uint64_t a1, uint64_t *a2, double *a3)
{
  int v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  float64x2_t *v14;
  float64x2_t v15;
  float64x2_t v16;
  char v17;
  float64x2_t v19;
  float64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[31];

  v23[30] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    if (v3 < 1)
    {
      v17 = 0;
      return v17 & 1;
    }
    v7 = 0;
LABEL_4:
    v19 = 0u;
    v20 = 0u;
    PCMatrix44Tmpl<double>::transform_row<double>(a3, (double *)(*(_QWORD *)(a1 + 16) + 32 * v7), v19.f64);
    v8 = 0;
    v9 = a2[1];
    v10 = a2[2];
    v11 = a2[3];
    v21 = *a2;
    v22 = v10;
    v23[2] = v9;
    v23[3] = v10;
    v23[6] = v9;
    v23[7] = v10;
    v23[10] = v21;
    v23[11] = v10;
    v12 = a2[5];
    v23[0] = a2[4];
    v23[1] = 0x3FF0000000000000;
    v23[4] = v23[0];
    v23[5] = 0x3FF0000000000000;
    v23[8] = v12;
    v23[9] = 0x3FF0000000000000;
    v23[12] = v12;
    v23[13] = 0x3FF0000000000000;
    v23[14] = v21;
    v23[15] = v11;
    v23[16] = v23[0];
    v23[17] = 0x3FF0000000000000;
    v23[18] = v9;
    v23[19] = v11;
    v23[20] = v23[0];
    v23[21] = 0x3FF0000000000000;
    v23[22] = v9;
    v23[23] = v11;
    v23[24] = v12;
    v23[25] = 0x3FF0000000000000;
    v23[26] = v21;
    v23[27] = v11;
    v23[28] = v12;
    v23[29] = 0x3FF0000000000000;
    v13 = 1;
    while (2)
    {
      v14 = (float64x2_t *)&v23[4 * v8++];
      while (1)
      {
        v15 = vmulq_f64(v19, v14[-1]);
        v16 = vmulq_f64(v20, *v14);
        if (vaddq_f64(vaddq_f64(vaddq_f64(v15, (float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1)), v16), (float64x2_t)vdupq_laneq_s64((int64x2_t)v16, 1)).f64[0] < 0.0)break;
        ++v8;
        v14 += 2;
        if (v8 == 9)
        {
          if ((v13 & 1) == 0 || (++v7, v7 >= *(int *)(a1 + 12)))
          {
            v17 = v13 ^ 1;
            return v17 & 1;
          }
          goto LABEL_4;
        }
      }
      v13 = 0;
      if (v8 != 8)
        continue;
      break;
    }
  }
  v17 = 1;
  return v17 & 1;
}

void PCArray<int,PCArray_Traits<int>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  PCException *exception;
  PCString v16;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "PCArray::resize");
    PCException::PCException(exception, &v16);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if ((int)v6 < a2)
      bzero((void *)(*(_QWORD *)(a1 + 16) + 4 * v6), 4 * (~(_DWORD)v6 + a2) + 4);
  }
  else
  {
    if (v3)
    {
      v7 = (char *)operator new[]();
      bzero(v7, 4 * v3);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(_DWORD *)(a1 + 12);
    if (a2 >= v8)
      v9 = v8;
    else
      v9 = a2;
    if ((int)v9 < 1)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v10 = *(int **)(a1 + 16);
      v11 = v9;
      v12 = v7;
      do
      {
        v13 = *v10++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    if ((int)v9 > v8)
      v8 = v9;
    if (v8 < a2)
      bzero(&v7[4 * v8], 4 * (~v8 + a2) + 4);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
      MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v7;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2CF18FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

BOOL PCMatrix44Tmpl<double>::flatten(uint64_t a1, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v3 = a2[1];
  v4 = a2[2];
  v5 = sqrt(*a2 * *a2 + v3 * v3 + v4 * v4);
  v6 = *a2 / v5;
  v7 = v3 / v5;
  v8 = v4 / v5;
  v9 = *a3 * v6;
  v10 = v8 * a3[2] + v9 + a3[1] * v7;
  v11 = v8 * (v8 * (-a2[3] / v5)) + v6 * (v6 * (-a2[3] / v5)) + v7 * (v7 * (-a2[3] / v5));
  *(double *)a1 = v10 - v9;
  *(double *)(a1 + 8) = -(v7 * *a3);
  *(double *)(a1 + 16) = -(v8 * *a3);
  *(double *)(a1 + 24) = v11 * *a3;
  *(double *)(a1 + 32) = -(v6 * a3[1]);
  *(double *)(a1 + 40) = v10 - v7 * a3[1];
  *(double *)(a1 + 48) = -(v8 * a3[1]);
  *(double *)(a1 + 56) = v11 * a3[1];
  *(double *)(a1 + 64) = -(v6 * a3[2]);
  *(double *)(a1 + 72) = -(v7 * a3[2]);
  *(double *)(a1 + 80) = v10 - v8 * a3[2];
  *(double *)(a1 + 88) = v11 * a3[2];
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(double *)(a1 + 120) = v10;
  return v10 >= 0.0000001 || v10 <= -0.0000001;
}

void LiCompositor::LiCompositor(LiCompositor *this)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 48) = 1;
}

void sub_1B2CF1AA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void LiCompositor::~LiCompositor(PCSharedCount *this)
{
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v3;

  var0 = this[5].var0;
  if (var0)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)var0 + 24))(var0);
  PCSharedCount::~PCSharedCount(this + 4);
  v3 = this->var0;
  if (this->var0)
  {
    this[1].var0 = v3;
    operator delete(v3);
  }
}

BOOL LiCompositor::isStencil(int a1)
{
  return (a1 - 25) < 2;
}

void cropToPolygon(LiImagePolygon *this@<X2>, const void *a2@<X0>, _QWORD *a3@<X1>, FxColorDescription *a4@<X3>, char a5@<W4>, uint64_t *a6@<X5>, int a7@<W6>, uint64_t *a8@<X8>, float a9@<S0>, double a10@<D1>, unsigned __int8 a11)
{
  double v11;
  int v13;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  HGCrop *v35;
  _BOOL4 v36;
  LiHeEdgeMixShader *v37;
  void (*v38)(LiHeEdgeMixShader *);
  HGRasterizer **v39;
  LiHeEdgeMixShader *v40;
  float v41;
  LiHeEdgeNodeWithXFormFragment *v42;
  float v43;
  LiHeEdgeMixShader *v44;
  CGColorSpace *v45;
  void *v46;
  void *v47;
  void *__p;
  void *v49;
  char v50;
  char v51;

  v11 = a10;
  v13 = a7;
  if (a7)
    goto LABEL_41;
  if (a10 != 1.0)
    goto LABEL_41;
  v21 = (double *)**((_QWORD **)this + 11);
  if (((*(_QWORD *)(*((_QWORD *)this + 11) + 8) - (_QWORD)v21) & 0x1FFFFFFFE0) != 0x80)
    goto LABEL_41;
  v22 = *v21;
  v23 = v21[4];
  v24 = v21[5];
  if (vabdd_f64(*v21, v23) >= 0.000001
    || (v25 = v21[9], vabdd_f64(v24, v25) >= 0.000001)
    || (v26 = v21[8], vabdd_f64(v26, v21[12]) >= 0.000001)
    || (v27 = v21[1], vabdd_f64(v21[13], v27) >= 0.000001))
  {
    v32 = v21[1];
    if (vabdd_f64(v32, v24) >= 0.000001)
      goto LABEL_41;
    v33 = v21[8];
    if (vabdd_f64(v23, v33) >= 0.000001)
      goto LABEL_41;
    v34 = v21[9];
    if (vabdd_f64(v34, v21[13]) >= 0.000001 || vabdd_f64(v21[12], v22) >= 0.000001)
      goto LABEL_41;
    if (v22 >= v33)
      v28 = v21[8];
    else
      v28 = *v21;
    if (v22 >= v33)
      v29 = v22 - v33;
    else
      v29 = v33 - v22;
    if (v32 >= v34)
      v30 = v21[9];
    else
      v30 = v21[1];
    if (v32 >= v34)
      v31 = v32 - v34;
    else
      v31 = v34 - v32;
  }
  else
  {
    if (v22 >= v26)
      v28 = v21[8];
    else
      v28 = *v21;
    if (v22 >= v26)
      v29 = v22 - v26;
    else
      v29 = v26 - v22;
    if (v27 >= v25)
      v30 = v21[9];
    else
      v30 = v21[1];
    if (v27 >= v25)
      v31 = v27 - v25;
    else
      v31 = v25 - v27;
  }
  LiImagePolygon::getDOD(this, 0.0, (int32x2_t *)&v46);
  if (vabdd_f64(v28, (double)(int)v46) < 0.000001
    && vabdd_f64(v30, (double)SHIDWORD(v46)) < 0.000001
    && vabdd_f64(v29, (double)(int)v47) < 0.000001
    && vabdd_f64(v31, (double)SHIDWORD(v47)) < 0.000001)
  {
    v35 = (HGCrop *)HGObject::operator new(0x1A0uLL);
    HGCrop::HGCrop(v35);
    (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v35 + 96))(v35, 0, (float)(int)v46, (float)SHIDWORD(v46), (float)((int)v47 + (int)v46), (float)(HIDWORD(v47) + HIDWORD(v46)));
    (*(void (**)(HGCrop *, _QWORD, _QWORD))(*(_QWORD *)v35 + 120))(v35, 0, *a3);
    *a8 = (uint64_t)v35;
    return;
  }
LABEL_41:
  if (!*a6)
    v13 = 0;
  if (((*a6 == 0) & a11) != 0)
    v11 = 0.0;
  if ((*(unsigned int (**)(const void *))(*(_QWORD *)a2 + 304))(a2))
  {
    LiFilteredPolygon::LiFilteredPolygon((LiFilteredPolygon *)&v46);
    v51 = 1;
    LiFilteredPolygon::setPolygon((LiFilteredPolygon *)&v46, this);
    v50 = a5;
    v36 = *a6 != 0;
    v45 = 0;
    if (v13 == 48)
    {
      OMSamplesElem::getBottom(&v44);
      v37 = (LiHeEdgeMixShader *)HGObject::operator new(0x1A0uLL);
      *((_OWORD *)v37 + 24) = 0u;
      *((_OWORD *)v37 + 25) = 0u;
      *((_OWORD *)v37 + 22) = 0u;
      *((_OWORD *)v37 + 23) = 0u;
      *((_OWORD *)v37 + 20) = 0u;
      *((_OWORD *)v37 + 21) = 0u;
      *((_OWORD *)v37 + 18) = 0u;
      *((_OWORD *)v37 + 19) = 0u;
      *((_OWORD *)v37 + 16) = 0u;
      *((_OWORD *)v37 + 17) = 0u;
      *((_OWORD *)v37 + 14) = 0u;
      *((_OWORD *)v37 + 15) = 0u;
      *((_OWORD *)v37 + 12) = 0u;
      *((_OWORD *)v37 + 13) = 0u;
      *((_OWORD *)v37 + 10) = 0u;
      *((_OWORD *)v37 + 11) = 0u;
      *((_OWORD *)v37 + 8) = 0u;
      *((_OWORD *)v37 + 9) = 0u;
      *((_OWORD *)v37 + 6) = 0u;
      *((_OWORD *)v37 + 7) = 0u;
      *((_OWORD *)v37 + 4) = 0u;
      *((_OWORD *)v37 + 5) = 0u;
      *((_OWORD *)v37 + 2) = 0u;
      *((_OWORD *)v37 + 3) = 0u;
      *(_OWORD *)v37 = 0u;
      *((_OWORD *)v37 + 1) = 0u;
      LiHeEdgeMixShader::LiHeEdgeMixShader(v37);
      *(_QWORD *)v37 = &unk_1E6579708;
      HGObject::Retain((uint64_t)v37);
      v38 = *(void (**)(LiHeEdgeMixShader *))(*(_QWORD *)v37 + 24);
      v45 = v37;
      v38(v37);
      (*(void (**)(LiHeEdgeMixShader *, _QWORD, _QWORD))(*(_QWORD *)v37 + 120))(v37, 0, *a3);
      (*(void (**)(LiHeEdgeMixShader *, uint64_t, uint64_t))(*(_QWORD *)v37 + 120))(v37, 1, *a6);
      (*(void (**)(LiHeEdgeMixShader *, uint64_t, LiHeEdgeMixShader *))(*(_QWORD *)v37 + 120))(v37, 2, v44);
      if (v44)
        (*(void (**)(LiHeEdgeMixShader *))(*(_QWORD *)v44 + 24))(v44);
      v36 = 0;
    }
    else
    {
      LiFilteredPolygon::makeEdge((LiFilteredPolygon *)&v46, (uint64_t *)&v44);
      v37 = v44;
      if (v44)
      {
        (*(void (**)(LiHeEdgeMixShader *))(*(_QWORD *)v44 + 16))(v44);
        v45 = v37;
        if (v44)
          (*(void (**)(LiHeEdgeMixShader *))(*(_QWORD *)v44 + 24))(v44);
      }
      (*(void (**)(LiHeEdgeMixShader *, _QWORD, _QWORD))(*(_QWORD *)v37 + 120))(v37, 0, *a3);
    }
    if (v11 >= 1.0 || v36)
    {
      (*(void (**)(LiHeEdgeMixShader *, _QWORD, float, float, float, float))(*(_QWORD *)v37 + 96))(v37, 0, 1.0, 0.0, 0.0, 0.0);
    }
    else
    {
      v41 = v11;
      v11 = 1.0;
      (*(void (**)(LiHeEdgeMixShader *, _QWORD, float, float, float, float))(*(_QWORD *)v37 + 96))(v37, 0, v41, 0.0, 0.0, 0.0);
    }
    if (v36)
    {
      blendNodes(a4, &v45, a6, v13, a11, a8, a9, v11);
      if (v45)
        (*(void (**)(CGColorSpace *))(*(_QWORD *)v45 + 24))(v45);
    }
    else
    {
      *a8 = (uint64_t)v45;
    }
  }
  else
  {
    LiFilteredPolygon::LiFilteredPolygon((LiFilteredPolygon *)&v46);
    v51 = 1;
    LiFilteredPolygon::setPolygon((LiFilteredPolygon *)&v46, this);
    v50 = a5;
    LiFilteredPolygon::makeRasterizer((LiFilteredPolygon *)&v46, 0, &v45);
    v39 = (HGRasterizer **)v45;
    LiEdgeTexture::getHeliumNode(a2, (LiEdgeTexture *)3, &v45);
    (*((void (**)(HGRasterizer **, uint64_t, CGColorSpace *))*v39 + 15))(v39, 1, v45);
    if (v45)
      (*(void (**)(CGColorSpace *))(*(_QWORD *)v45 + 24))(v45);
    (*((void (**)(HGRasterizer **, uint64_t, uint64_t))*v39 + 17))(v39, 1, 4);
    if (*a6)
    {
      v40 = (LiHeEdgeMixShader *)HGObject::operator new(0x1A0uLL);
      *((_OWORD *)v40 + 24) = 0u;
      *((_OWORD *)v40 + 25) = 0u;
      *((_OWORD *)v40 + 22) = 0u;
      *((_OWORD *)v40 + 23) = 0u;
      *((_OWORD *)v40 + 20) = 0u;
      *((_OWORD *)v40 + 21) = 0u;
      *((_OWORD *)v40 + 18) = 0u;
      *((_OWORD *)v40 + 19) = 0u;
      *((_OWORD *)v40 + 16) = 0u;
      *((_OWORD *)v40 + 17) = 0u;
      *((_OWORD *)v40 + 14) = 0u;
      *((_OWORD *)v40 + 15) = 0u;
      *((_OWORD *)v40 + 12) = 0u;
      *((_OWORD *)v40 + 13) = 0u;
      *((_OWORD *)v40 + 10) = 0u;
      *((_OWORD *)v40 + 11) = 0u;
      *((_OWORD *)v40 + 8) = 0u;
      *((_OWORD *)v40 + 9) = 0u;
      *((_OWORD *)v40 + 6) = 0u;
      *((_OWORD *)v40 + 7) = 0u;
      *((_OWORD *)v40 + 4) = 0u;
      *((_OWORD *)v40 + 5) = 0u;
      *((_OWORD *)v40 + 2) = 0u;
      *((_OWORD *)v40 + 3) = 0u;
      *(_OWORD *)v40 = 0u;
      *((_OWORD *)v40 + 1) = 0u;
      LiHeEdgeMixShader::LiHeEdgeMixShader(v40);
      *(_QWORD *)v40 = &unk_1E6579708;
    }
    else
    {
      v40 = (LiHeEdgeMixShader *)HGObject::operator new(0x1A0uLL);
      *((_OWORD *)v40 + 24) = 0u;
      *((_OWORD *)v40 + 25) = 0u;
      *((_OWORD *)v40 + 22) = 0u;
      *((_OWORD *)v40 + 23) = 0u;
      *((_OWORD *)v40 + 20) = 0u;
      *((_OWORD *)v40 + 21) = 0u;
      *((_OWORD *)v40 + 18) = 0u;
      *((_OWORD *)v40 + 19) = 0u;
      *((_OWORD *)v40 + 16) = 0u;
      *((_OWORD *)v40 + 17) = 0u;
      *((_OWORD *)v40 + 14) = 0u;
      *((_OWORD *)v40 + 15) = 0u;
      *((_OWORD *)v40 + 12) = 0u;
      *((_OWORD *)v40 + 13) = 0u;
      *((_OWORD *)v40 + 10) = 0u;
      *((_OWORD *)v40 + 11) = 0u;
      *((_OWORD *)v40 + 8) = 0u;
      *((_OWORD *)v40 + 9) = 0u;
      *((_OWORD *)v40 + 6) = 0u;
      *((_OWORD *)v40 + 7) = 0u;
      *((_OWORD *)v40 + 4) = 0u;
      *((_OWORD *)v40 + 5) = 0u;
      *((_OWORD *)v40 + 2) = 0u;
      *((_OWORD *)v40 + 3) = 0u;
      *(_OWORD *)v40 = 0u;
      *((_OWORD *)v40 + 1) = 0u;
      LiHeEdgeNodeFragment::LiHeEdgeNodeFragment(v40);
      *(_QWORD *)v40 = &unk_1E6572808;
    }
    HGObject::Retain((uint64_t)v40);
    (*(void (**)(LiHeEdgeMixShader *))(*(_QWORD *)v40 + 24))(v40);
    HGGLNode::addFragmentShader(v39, v40);
    v42 = (LiHeEdgeNodeWithXFormFragment *)HGObject::operator new(0x1B0uLL);
    LiHeEdgeNodeWithXFormFragment::LiHeEdgeNodeWithXFormFragment(v42);
    HGGLNode::enableXFormConcatenation((HGGLNode *)v39, v42);
    HGGLNode::enableInplaceBlending((HGGLNode *)v39);
    v43 = v11;
    if (v13)
      v43 = 1.0;
    HGGLNode::SetActiveShaderNodeParameter(v39, 0, v43, 0.0, 0.0, 0.0);
    (*((void (**)(HGRasterizer **, _QWORD, _QWORD))*v39 + 15))(v39, 0, *a3);
    *a8 = (uint64_t)v39;
    if (v42)
      (*(void (**)(LiHeEdgeNodeWithXFormFragment *))(*(_QWORD *)v42 + 24))(v42);
    (*(void (**)(LiHeEdgeMixShader *))(*(_QWORD *)v40 + 24))(v40);
  }
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
}

void sub_1B2CF2214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  HGObject::operator delete(v12);
  _Unwind_Resume(a1);
}

CGColorSpace **blendNodes@<X0>(FxColorDescription *a1@<X4>, CGColorSpace **result@<X0>, uint64_t *a3@<X1>, int a4@<W2>, int a5@<W3>, uint64_t *a6@<X8>, float a7@<S0>, double a8@<D1>)
{
  BOOL v9;
  uint64_t *v16;
  HGStencil *v17;
  uint64_t v18;
  float v19;
  PCSharedCount *v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  HGStencil *v24;
  uint64_t v25;
  unsigned int v26;
  HGHWBlendFlipped *v27;
  float v28;
  PCSharedCount v29;
  HGStencil *v30;
  uint64_t v31;
  HGStencil *v32;
  FxColorDescription v33;

  if (*a3)
    v9 = 1;
  else
    v9 = a5 == 0;
  if (!v9)
  {
    *a6 = 0;
    return result;
  }
  v16 = (uint64_t *)result;
  makeBlendingColorDescription(a1, (uint64_t)&v33);
  if ((a4 - 25) > 1)
  {
    PCSharedCount::PCSharedCount(&v29);
    PCSharedCount::~PCSharedCount(v20);
    v21 = *a3;
    if (a8 != 1.0 || v21)
    {
      if (a8 != 0.0)
      {
        v23 = *v16;
        if (*v16)
        {
          if (a5)
          {
            v24 = (HGStencil *)HGObject::operator new(0x1C0uLL);
            HGStencil::HGStencil(v24);
            (*(void (**)(HGStencil *, _QWORD, float, float, float, float))(*(_QWORD *)v24 + 96))(v24, 0, 0.0, 0.0, 0.0, 0.0);
            (*(void (**)(HGStencil *, uint64_t, float, float, float, float))(*(_QWORD *)v24 + 96))(v24, 1, 1.0, 0.0, 0.0, 0.0);
            conformWithToneMap(a1, v16, &v33, (uint64_t *)&v32);
            (*(void (**)(HGStencil *, _QWORD, HGStencil *))(*(_QWORD *)v24 + 120))(v24, 0, v32);
            if (v32)
              (*(void (**)(HGStencil *))(*(_QWORD *)v32 + 24))(v32);
            (*(void (**)(HGStencil *, uint64_t, uint64_t))(*(_QWORD *)v24 + 120))(v24, 1, *a3);
            (*(void (**)(HGStencil *))(*(_QWORD *)v24 + 16))(v24);
            conformWithToneMap(a1, v16, &v33, (uint64_t *)&v32);
            v25 = (uint64_t)v32;
            (*(void (**)(HGStencil *))(*(_QWORD *)v24 + 24))(v24);
          }
          else
          {
            if (a4 == 27)
            {
              v32 = (HGStencil *)*v16;
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
            }
            else
            {
              conformWithToneMap(a1, v16, &v33, (uint64_t *)&v32);
            }
            v24 = v32;
            if (v32)
            {
              (*(void (**)(HGStencil *))(*(_QWORD *)v32 + 16))(v32);
              if (v32)
                (*(void (**)(HGStencil *))(*(_QWORD *)v32 + 24))(v32);
            }
            conformWithToneMap(a1, a3, &v33, (uint64_t *)&v32);
            v25 = (uint64_t)v32;
          }
          v26 = LiHelium::convertMotionBlendMode(a4);
          v27 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
          HGHWBlendFlipped::HGHWBlendFlipped(v27);
          (*(void (**)(HGHWBlendFlipped *, _QWORD, float, float, float, float))(*(_QWORD *)v27 + 96))(v27, 0, (float)v26, 0.0, 0.0, 0.0);
          v28 = a8;
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v27 + 96))(v27, 1, v28, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v27 + 96))(v27, 2, 0.0, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v27 + 96))(v27, 5, a7, 0.0, 0.0, 0.0);
          (*(void (**)(HGHWBlendFlipped *, _QWORD, uint64_t))(*(_QWORD *)v27 + 120))(v27, 0, v25);
          (*(void (**)(HGHWBlendFlipped *, uint64_t, HGStencil *))(*(_QWORD *)v27 + 120))(v27, 1, v24);
          v32 = v27;
          (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v27 + 16))(v27);
          conformWithToneMap(&v33, (uint64_t *)&v32, a1, a6);
          if (v32)
            (*(void (**)(HGStencil *))(*(_QWORD *)v32 + 24))(v32);
          (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v27 + 24))(v27);
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 24))(v25);
          if (v24)
            (*(void (**)(HGStencil *))(*(_QWORD *)v24 + 24))(v24);
          return PCCFRef<CGColorSpace *>::~PCCFRef(&v33._pcColorDesc._colorSpaceRef._obj);
        }
      }
    }
    else
    {
      v21 = *v16;
    }
    *a6 = v21;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 16))(v21);
  }
  else
  {
    v17 = (HGStencil *)HGObject::operator new(0x1C0uLL);
    HGStencil::HGStencil(v17);
    conformWithToneMap(a1, a3, &v33, (uint64_t *)&v32);
    if (a4 == 25)
    {
      v18 = *v16;
      v31 = v18;
      v19 = 0.0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
    }
    else
    {
      v19 = 1.0;
      conformWithToneMap(a1, v16, &v33, &v31);
    }
    (*(void (**)(HGStencil *, _QWORD, float, float, float, float))(*(_QWORD *)v17 + 96))(v17, 0, v19, 0.0, 0.0, 0.0);
    (*(void (**)(HGStencil *, _QWORD, HGStencil *))(*(_QWORD *)v17 + 120))(v17, 0, v32);
    (*(void (**)(HGStencil *, uint64_t, uint64_t))(*(_QWORD *)v17 + 120))(v17, 1, v31);
    v22 = a8;
    (*(void (**)(HGStencil *, uint64_t, float, float, float, float))(*(_QWORD *)v17 + 96))(v17, 1, v22, 0.0, 0.0, 0.0);
    v30 = v17;
    (*(void (**)(HGStencil *))(*(_QWORD *)v17 + 16))(v17);
    conformWithToneMap(&v33, (uint64_t *)&v30, a1, a6);
    if (v30)
      (*(void (**)(HGStencil *))(*(_QWORD *)v30 + 24))(v30);
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 24))(v31);
    if (v32)
      (*(void (**)(HGStencil *))(*(_QWORD *)v32 + 24))(v32);
    (*(void (**)(HGStencil *))(*(_QWORD *)v17 + 24))(v17);
  }
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v33._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2CF2AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  if (a7)
    (*(void (**)(uint64_t))(*(_QWORD *)a7 + 24))(a7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t cropToPolygon@<X0>(const void *a1@<X0>, _QWORD *a2@<X1>, LiImagePolygon *a3@<X2>, FxColorDescription *a4@<X3>, char a5@<W4>, unsigned __int8 a6@<W6>, uint64_t *a7@<X8>)
{
  uint64_t result;
  uint64_t v8;

  v8 = 0;
  cropToPolygon(a3, a1, a2, a4, a5, &v8, 0, a7, 1.0, 1.0, a6);
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  return result;
}

void sub_1B2CF2DA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void LiBlender::LiBlender(LiBlender *this, float a2, const FxColorDescription *a3)
{
  CGColorSpace *obj;
  uint64_t v6;

  *(_QWORD *)this = off_1E656A668;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = -1;
  *((_BYTE *)this + 48) = 0;
  *((float *)this + 13) = a2;
  obj = a3->_pcColorDesc._colorSpaceRef._obj;
  *((_QWORD *)this + 7) = a3->_pcColorDesc._colorSpaceRef._obj;
  if (obj)
    PCCFRefTraits<CGColorSpace *>::retain(obj);
  v6 = *(_QWORD *)&a3->_pcColorDesc._dynamicRange;
  *((_DWORD *)this + 18) = LODWORD(a3->_pcColorDesc._toneMapMethod._gain);
  *((_QWORD *)this + 8) = v6;
  *((_BYTE *)this + 80) = a3->_isPremultiplied;
}

void LiBlender::~LiBlender(CGColorSpace **this)
{
  *this = (CGColorSpace *)off_1E656A668;
  PCCFRef<CGColorSpace *>::~PCCFRef(this + 7);
}

uint64_t LiBlender::crop(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)(result + 8) = a2;
  *(_BYTE *)(result + 16) = a3;
  return result;
}

void LiMultiBlender::LiMultiBlender(LiMultiBlender *this, float a2, FxColorDescription *a3)
{
  uint64_t v5;

  LiBlender::LiBlender(this, a2, a3);
  *(_QWORD *)v5 = &off_1E656A6A8;
  *(_QWORD *)(v5 + 88) = 0;
  *(_DWORD *)(v5 + 96) = 0;
  makeBlendingColorDescription(a3, v5 + 104);
  *((_QWORD *)this + 17) = &unk_1E656A720;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = &unk_1E656A720;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = &unk_1E656A720;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = &unk_1E656A758;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 0;
  *((_QWORD *)this + 32) = 0x3FF0000000000000;
  *((_BYTE *)this + 264) = 0;
  *(_WORD *)((char *)this + 273) = 256;
}

void sub_1B2CF2F1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 88);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_QWORD *)v1 = off_1E656A668;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v1 + 56));
  _Unwind_Resume(a1);
}

void makeBlendingColorDescription(FxColorDescription *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  unsigned __int8 v4;
  PCColorUtil *v5;
  int32x2_t v6;
  double WhiteGainForHLGLevel;

  if ((FxColorDescription::isDynamicRangeManaged(a1) & 1) != 0)
  {
    if ((v3 & 1) == 0
    {
      makeBlendingColorDescription(FxColorDescription const&)::blendingSpace = (uint64_t)PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
    }
    if ((v4 & 1) == 0)
    {
      if ((_DWORD)v5)
      {
        v6.i32[0] = 1.0;
        WhiteGainForHLGLevel = PCColorUtil::getWhiteGainForHLGLevel(v5, v6);
        makeBlendingColorDescription(FxColorDescription const&)::toneMapMethod = 5;
        dword_1EF075E1C = LODWORD(WhiteGainForHLGLevel);
      }
    }
    FxColorDescription::FxColorDescription(a2, (CGColorSpace *)makeBlendingColorDescription(FxColorDescription const&)::blendingSpace, 0, &makeBlendingColorDescription(FxColorDescription const&)::toneMapMethod, 1);
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    PCColorDescription::PCColorDescription((PCColorDescription *)a2);
    *(_BYTE *)(a2 + 24) = 1;
  }
}

void sub_1B2CF3044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A758;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void LiMultiBlender::~LiMultiBlender(LiMultiBlender *this)
{
  uint64_t v2;
  int v3;
  __n128 v4;
  uint64_t v5;
  int v6;
  __n128 v7;
  uint64_t v8;
  int v9;
  __n128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)this = &off_1E656A6A8;
  v2 = *((_QWORD *)this + 30);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  *((_QWORD *)this + 26) = &unk_1E656A758;
  if (*((int *)this + 54) < 0)
    v3 = 1;
  else
    v3 = *((_DWORD *)this + 54);
  PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::resize((uint64_t)this + 208, 0, v3);
  v5 = *((_QWORD *)this + 28);
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *((_QWORD *)this + 23) = &unk_1E656A720;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 54) = 0;
  if (*((int *)this + 48) < 0)
    v6 = 1;
  else
    v6 = *((_DWORD *)this + 48);
  PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::resize((uint64_t)this + 184, 0, v6, v4);
  v8 = *((_QWORD *)this + 25);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *((_QWORD *)this + 20) = &unk_1E656A720;
  *((_QWORD *)this + 25) = 0;
  *((_DWORD *)this + 48) = 0;
  if (*((int *)this + 42) < 0)
    v9 = 1;
  else
    v9 = *((_DWORD *)this + 42);
  PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::resize((uint64_t)this + 160, 0, v9, v7);
  v11 = *((_QWORD *)this + 22);
  if (v11)
    MEMORY[0x1B5E2914C](v11, 0x1000C8077774924);
  *((_QWORD *)this + 17) = &unk_1E656A720;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 42) = 0;
  if (*((int *)this + 36) < 0)
    v12 = 1;
  else
    v12 = *((_DWORD *)this + 36);
  PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::resize((uint64_t)this + 136, 0, v12, v10);
  v13 = *((_QWORD *)this + 19);
  if (v13)
    MEMORY[0x1B5E2914C](v13, 0x1000C8077774924);
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 36) = 0;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 13);
  v14 = *((_QWORD *)this + 11);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  *(_QWORD *)this = off_1E656A668;
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 7);
}

{
  LiMultiBlender::~LiMultiBlender(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t LiMultiBlender::clear(LiMultiBlender *this)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)this + 30);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    *((_QWORD *)this + 30) = 0;
  }
  *((_DWORD *)this + 24) = 0;
  result = *((_QWORD *)this + 11);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    *((_QWORD *)this + 11) = 0;
  }
  *((_BYTE *)this + 273) = 0;
  *((_DWORD *)this + 58) = 0;
  return result;
}

uint64_t LiMultiBlender::add(uint64_t a1, HGNode **a2, unsigned int a3, char a4, char a5, const PCSharedCount *a6, double a7)
{
  HGNode *v13;
  uint64_t v14;
  uint64_t v15;
  float64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  float64x2_t v22;
  const void *v23;
  float64_t v24;
  HGNode *v25;
  unint64_t DOD;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  PCSharedCount *v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  int v35;
  unint64_t v36;
  uint64_t result;
  PC_Sp_counted_base *var0;
  PCSharedCount v39;
  float64x2_t v40[2];
  HGNode *v41;
  float64_t v42;
  __int128 v43;
  char v44;

  v42 = 0.0;
  LODWORD(v43) = 0;
  *((_QWORD *)&v43 + 1) = 0x3FF0000000000000;
  v44 = 0;
  v13 = *a2;
  if (*a2)
  {
    v42 = *(double *)a2;
    (*(void (**)(HGNode *))(*(_QWORD *)v13 + 16))(v13);
  }
  LODWORD(v43) = a3;
  *((double *)&v43 + 1) = a7;
  v44 = a5;
  *(_BYTE *)(a1 + 272) = a4;
  if (*(_BYTE *)(a1 + 273))
  {
    v14 = *(_QWORD *)(a1 + 88);
    if (v14)
    {
      v41 = *(HGNode **)(a1 + 88);
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
      conformWithToneMap((FxColorDescription *)(a1 + 104), (uint64_t *)&v41, (FxColorDescription *)(a1 + 56), (uint64_t *)v40);
      v15 = *(_QWORD *)(a1 + 240);
      v16 = v40[0].f64[0];
      if (v15 == *(_QWORD *)&v40[0].f64[0])
      {
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
      }
      else
      {
        if (v15)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
          v16 = v40[0].f64[0];
        }
        *(float64_t *)(a1 + 240) = v16;
        v40[0].f64[0] = 0.0;
      }
      if (v41)
        (*(void (**)(HGNode *))(*(_QWORD *)v41 + 24))(v41);
      *(_QWORD *)(a1 + 256) = 0x3FF0000000000000;
      *(_DWORD *)(a1 + 248) = 0;
      v17 = *(_QWORD *)(a1 + 88);
      if (v17)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
        *(_QWORD *)(a1 + 88) = 0;
      }
      *(_DWORD *)(a1 + 96) = 1;
      *(_BYTE *)(a1 + 273) = 0;
    }
  }
  v18 = *(_QWORD ***)(a1 + 8);
  if (v18)
  {
    if (*(_BYTE *)(a1 + 48))
    {
      v19 = *(_QWORD *)(a1 + 32);
      v20 = *(_QWORD *)(a1 + 40);
      v21.i64[0] = (int)v19;
      v21.i64[1] = SHIDWORD(v19);
      v22 = vcvtq_f64_s64(v21);
      v21.i64[0] = (int)v20;
      v21.i64[1] = SHIDWORD(v20);
      v40[0] = v22;
      v40[1] = vcvtq_f64_s64(v21);
      if (LiPolygon::contains(v18, v40))
        goto LABEL_30;
    }
    v23 = *(const void **)(a1 + 24);
    v41 = v13;
    if (v13)
      (*(void (**)(HGNode *))(*(_QWORD *)v13 + 16))(v13);
    cropToPolygon(v23, &v41, *(LiImagePolygon **)(a1 + 8), (FxColorDescription *)(a1 + 56), *(_BYTE *)(a1 + 16), 0, (uint64_t *)v40);
    v24 = v40[0].f64[0];
    if (v13 == *(HGNode **)&v40[0].f64[0])
    {
      if (!v13)
      {
        v24 = 0.0;
        goto LABEL_29;
      }
      (*(void (**)(HGNode *))(*(_QWORD *)v13 + 24))(v13);
      v24 = *(double *)&v13;
    }
    else
    {
      if (!v13)
      {
        v42 = v40[0].f64[0];
        goto LABEL_29;
      }
      (*(void (**)(HGNode *))(*(_QWORD *)v13 + 24))(v13);
      v24 = v40[0].f64[0];
      v42 = v40[0].f64[0];
      v40[0].f64[0] = 0.0;
    }
    (*(void (**)(HGNode *))(*(_QWORD *)v13 + 24))(v13);
LABEL_29:
    v13 = *(HGNode **)&v24;
LABEL_30:
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (*(_DWORD *)(a1 + 96))
  {
    if (a3 - 25 > 1)
    {
      var0 = a6->var0;
      PCSharedCount::PCSharedCount(&v39, a6 + 1);
      if (var0
        && *((_DWORD *)var0 + 2) == 35
        && (v32 = *((_QWORD *)var0 + 2)) != 0
        && *(float *)(v32 + 12) > 0.0
        && *(float *)(v32 + 24) > 0.0)
      {
        PCSharedCount::~PCSharedCount(v31);
        if (!a6->var0)
          throw_PCNullPointerException(1);
        LiMultiBlender::addLightWrap(a1, (uint64_t)&v42, *((_QWORD *)a6->var0 + 2));
      }
      else
      {
        PCSharedCount::~PCSharedCount(v31);
        if (v44)
          LiMultiBlender::addPreserveOpacity(a1, (uint64_t)&v42);
        else
          (*(void (**)(uint64_t, float64_t *))(*(_QWORD *)a1 + 56))(a1, &v42);
      }
    }
    else
    {
      LiMultiBlender::addStencil(a1, (uint64_t)&v42);
    }
  }
  else if ((a5 & 1) == 0 && (PCBlend::isNothingOverNothing(a3) & 1) == 0)
  {
    v25 = *(HGNode **)(a1 + 240);
    if (v25 != v13)
    {
      if (v25)
        (*(void (**)(HGNode *))(*(_QWORD *)v25 + 24))(v25);
      *(_QWORD *)(a1 + 240) = v13;
      if (v13)
      {
        (*(void (**)(HGNode *))(*(_QWORD *)v13 + 16))(v13);
        v13 = *(HGNode **)&v42;
      }
    }
    *(_OWORD *)(a1 + 248) = v43;
    *(_BYTE *)(a1 + 264) = v44;
    ++*(_DWORD *)(a1 + 96);
    DOD = HGRenderer::GetDOD(*(HGRenderer **)(a1 + 24), v13);
    v28 = v27;
    v40[0].f64[0] = 0.0;
    if (HGRectIsNull(DOD, v27))
    {
      v29 = -1;
      v30 = -1;
    }
    else
    {
      if ((int)DOD <= -1073741823)
        v33 = -1073741823;
      else
        v33 = DOD;
      v34 = HIDWORD(DOD);
      if (SHIDWORD(DOD) <= -1073741823)
        LODWORD(v34) = -1073741823;
      if ((int)v28 >= 1073741822)
        v35 = 1073741822;
      else
        v35 = v28;
      v36 = HIDWORD(v28);
      if (SHIDWORD(v28) >= 1073741822)
        LODWORD(v36) = 1073741822;
      *(_QWORD *)&v40[0].f64[0] = __PAIR64__(v34, v33);
      v29 = v35 - v33;
      v30 = v36 - v34;
    }
    *(_QWORD *)&v40[0].f64[1] = __PAIR64__(v30, v29);
    LiDrawnRegion::add(a1 + 136, (int32x2_t *)v40, 1, 1, 0);
  }
  result = *(_QWORD *)&v42;
  if (v42 != 0.0)
    return (*(uint64_t (**)(float64_t))(**(_QWORD **)&v42 + 24))(COERCE_FLOAT64_T(*(_QWORD *)&v42));
  return result;
}

void sub_1B2CF3700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 24))(a17);
  _Unwind_Resume(exception_object);
}

uint64_t conformWithToneMap@<X0>(FxColorDescription *this@<X1>, uint64_t *a2@<X0>, FxColorDescription *a3@<X2>, uint64_t *a4@<X8>)
{
  CGColorSpaceRef v8;
  uint64_t CGColorSpace;
  _BOOL8 isPremultiplied;
  uint64_t v11;
  uint64_t result;
  CGColorSpaceRef v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;

  if (FxColorDescription::isColorManaged(this) && (FxColorDescription::isColorManaged(a3) & 1) != 0)
  {
    if (FxColorDescription::isHDR(this) && FxColorDescription::isSDR(a3))
    {
      v8 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
      CGColorSpace = FxColorDescription::getCGColorSpace(this);
      isPremultiplied = FxColorDescription::isPremultiplied(this);
      FxApplyColorConform(a2, CGColorSpace, isPremultiplied, v8, 0);
      FxApplyColorConform(&v28, (uint64_t)&kPCNCLC_Rec2020Linear, 0, (uint64_t)&kPCNCLC_Rec2020HLG, 0, &v27);
      v11 = v27;
      if (v28 == v27)
      {
        if (v28)
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
          v11 = v27;
        }
        v28 = v11;
      }
      FxApplyColorConform(&v28, (uint64_t)&kPCNCLC_Rec709, 0, (uint64_t)&kPCNCLC_Rec709Linear, 0, &v27);
      v21 = v27;
      if (v28 == v27)
      {
        if (v28)
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
          v21 = v27;
        }
        v28 = v21;
      }
      v22 = FxColorDescription::getCGColorSpace(a3);
      v23 = FxColorDescription::isPremultiplied(a3);
      FxApplyColorConform(&v28, v8, 0, v22, v23);
      result = v28;
      if (v28)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(result);
    }
    else
    {
      if (!FxColorDescription::isSDR(this) || !FxColorDescription::isHDR(a3))
      {
        v17 = FxColorDescription::getCGColorSpace(this);
        v18 = FxColorDescription::isPremultiplied(this);
        v19 = FxColorDescription::getCGColorSpace(a3);
        v20 = FxColorDescription::isPremultiplied(a3);
        return FxApplyColorConform(a2, v17, v18, v19, v20);
      }
      v13 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
      v14 = FxColorDescription::getCGColorSpace(this);
      v15 = FxColorDescription::isPremultiplied(this);
      FxApplyColorConform(a2, v14, v15, v13, 0);
      FxApplyColorConform(&v28, (uint64_t)&kPCNCLC_Rec709Linear, 0, (uint64_t)&kPCNCLC_Rec709, 0, &v27);
      v16 = v27;
      if (v28 == v27)
      {
        if (v28)
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
          v16 = v27;
        }
        v28 = v16;
      }
      FxApplyColorConform(&v28, (uint64_t)&kPCNCLC_Rec2020HLG, 0, (uint64_t)&kPCNCLC_Rec2020Linear, 0, &v27);
      v24 = v27;
      if (v28 == v27)
      {
        if (v28)
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
          v24 = v27;
        }
        v28 = v24;
      }
      v25 = FxColorDescription::getCGColorSpace(a3);
      v26 = FxColorDescription::isPremultiplied(a3);
      FxApplyColorConform(&v28, v13, 0, v25, v26);
      result = v28;
      if (v28)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(result);
    }
  }
  else
  {
    result = *a2;
    *a4 = *a2;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

{
  CGColorSpaceRef v8;
  uint64_t CGColorSpace;
  _BOOL8 isPremultiplied;
  uint64_t v11;
  uint64_t result;
  CGColorSpaceRef v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;

  if (FxColorDescription::isColorManaged(this) && (FxColorDescription::isColorManaged(a3) & 1) != 0)
  {
    if (FxColorDescription::isHDR(this) && FxColorDescription::isSDR(a3))
    {
      v8 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
      CGColorSpace = FxColorDescription::getCGColorSpace(this);
      isPremultiplied = FxColorDescription::isPremultiplied(this);
      FxApplyColorConform(a2, CGColorSpace, isPremultiplied, v8, 0);
      FxApplyColorConform(&v28, (uint64_t)&kPCNCLC_Rec2020Linear, 0, (uint64_t)&kPCNCLC_Rec2020HLG, 0, &v27);
      v11 = v27;
      if (v28 == v27)
      {
        if (v28)
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
          v11 = v27;
        }
        v28 = v11;
      }
      FxApplyColorConform(&v28, (uint64_t)&kPCNCLC_Rec709, 0, (uint64_t)&kPCNCLC_Rec709Linear, 0, &v27);
      v21 = v27;
      if (v28 == v27)
      {
        if (v28)
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
          v21 = v27;
        }
        v28 = v21;
      }
      v22 = FxColorDescription::getCGColorSpace(a3);
      v23 = FxColorDescription::isPremultiplied(a3);
      FxApplyColorConform(&v28, v8, 0, v22, v23);
      result = v28;
      if (v28)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(result);
    }
    else
    {
      if (!FxColorDescription::isSDR(this) || !FxColorDescription::isHDR(a3))
      {
        v17 = FxColorDescription::getCGColorSpace(this);
        v18 = FxColorDescription::isPremultiplied(this);
        v19 = FxColorDescription::getCGColorSpace(a3);
        v20 = FxColorDescription::isPremultiplied(a3);
        return FxApplyColorConform(a2, v17, v18, v19, v20);
      }
      v13 = PCGetNCLCColorSpace((unsigned int *)&kPCNCLC_Rec2020Linear);
      v14 = FxColorDescription::getCGColorSpace(this);
      v15 = FxColorDescription::isPremultiplied(this);
      FxApplyColorConform(a2, v14, v15, v13, 0);
      FxApplyColorConform(&v28, (uint64_t)&kPCNCLC_Rec709Linear, 0, (uint64_t)&kPCNCLC_Rec709, 0, &v27);
      v16 = v27;
      if (v28 == v27)
      {
        if (v28)
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
          v16 = v27;
        }
        v28 = v16;
      }
      FxApplyColorConform(&v28, (uint64_t)&kPCNCLC_Rec2020HLG, 0, (uint64_t)&kPCNCLC_Rec2020Linear, 0, &v27);
      v24 = v27;
      if (v28 == v27)
      {
        if (v28)
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
      }
      else
      {
        if (v28)
        {
          (*(void (**)(void))(*(_QWORD *)v28 + 24))();
          v24 = v27;
        }
        v28 = v24;
      }
      v25 = FxColorDescription::getCGColorSpace(a3);
      v26 = FxColorDescription::isPremultiplied(a3);
      FxApplyColorConform(&v28, v13, 0, v25, v26);
      result = v28;
      if (v28)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 24))(result);
    }
  }
  else
  {
    result = *a2;
    *a4 = *a2;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1B2CF3B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t LiMultiBlender::addStencil(uint64_t a1, uint64_t a2)
{
  HGStencil *v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  _QWORD *v9;
  int32x2_t v10;
  unint64_t DOD;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  int v24;
  HGStencil *v25;
  uint64_t v26;
  uint64_t v27;

  if (*(double *)(a2 + 16) <= 0.0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  v4 = (HGStencil *)HGObject::operator new(0x1C0uLL);
  HGStencil::HGStencil(v4);
  (*(void (**)(_QWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v22, a1);
  conformWithToneMap((FxColorDescription *)(a1 + 56), (uint64_t *)&v22, (FxColorDescription *)(a1 + 104), &v27);
  if (v22)
    (*(void (**)(_QWORD *))(*v22 + 24))(v22);
  if (*(_DWORD *)(a2 + 8) == 25)
  {
    v7 = *(_QWORD *)a2;
    v26 = v7;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  else
  {
    conformWithToneMap((FxColorDescription *)(a1 + 56), (uint64_t *)a2, (FxColorDescription *)(a1 + 104), &v26);
  }
  v5.n128_u32[0] = 1.0;
  v6.n128_u32[0] = 0;
  if (*(_DWORD *)(a2 + 8) == 25)
    v5.n128_f32[0] = 0.0;
  (*(void (**)(HGStencil *, _QWORD, __n128, __n128, float, float))(*(_QWORD *)v4 + 96))(v4, 0, v5, v6, 0.0, 0.0);
  (*(void (**)(HGStencil *, _QWORD, uint64_t))(*(_QWORD *)v4 + 120))(v4, 0, v27);
  (*(void (**)(HGStencil *, uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, 1, v26);
  (*(void (**)(HGStencil *, uint64_t, float, float, float, float))(*(_QWORD *)v4 + 96))(v4, 1, 1.0, 0.0, 0.0, 0.0);
  v25 = v4;
  (*(void (**)(HGStencil *))(*(_QWORD *)v4 + 16))(v4);
  conformWithToneMap((FxColorDescription *)(a1 + 104), (uint64_t *)&v25, (FxColorDescription *)(a1 + 56), (uint64_t *)&v22);
  v9 = *(_QWORD **)(a1 + 240);
  v10 = (int32x2_t)v22;
  if (v9 == v22)
  {
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 24))(v9);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(_QWORD *))(*v9 + 24))(v9);
      v10 = (int32x2_t)v22;
    }
    *(int32x2_t *)(a1 + 240) = v10;
    v22 = 0;
  }
  if (v25)
    (*(void (**)(HGStencil *))(*(_QWORD *)v25 + 24))(v25);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 96) = 1;
  DOD = HGRenderer::GetDOD(*(HGRenderer **)(a1 + 24), *(HGNode **)(a1 + 240));
  v13 = v12;
  v22 = 0;
  if (HGRectIsNull(DOD, v12))
  {
    v15 = -1;
    v16 = -1;
  }
  else
  {
    if ((int)DOD <= -1073741823)
      v17 = -1073741823;
    else
      v17 = DOD;
    v18 = HIDWORD(DOD);
    if (SHIDWORD(DOD) <= -1073741823)
      LODWORD(v18) = -1073741823;
    if ((int)v13 >= 1073741822)
      v19 = 1073741822;
    else
      v19 = v13;
    v20 = HIDWORD(v13);
    if (SHIDWORD(v13) >= 1073741822)
      LODWORD(v20) = 1073741822;
    v22 = (_QWORD *)__PAIR64__(v18, v17);
    v15 = v19 - v17;
    v16 = v20 - v18;
  }
  v23 = v15;
  v24 = v16;
  LiDrawnRegion::clear((LiDrawnRegion *)(a1 + 136), v14);
  LiDrawnRegion::add(a1 + 136, (int32x2_t *)&v22, 1, 1, 0);
  v21 = *(_QWORD *)(a1 + 88);
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
    *(_QWORD *)(a1 + 88) = 0;
  }
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  return (*(uint64_t (**)(HGStencil *))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1B2CF3F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 24))(a13);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  _Unwind_Resume(exception_object);
}

uint64_t LiMultiBlender::addLightWrap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  int v7;
  HGHWBlendFlipped *v8;
  unsigned int v9;
  float v10;
  float v11;
  float v12;
  int v13;
  _QWORD *v14;
  int32x2_t v15;
  unint64_t DOD;
  uint64_t v17;
  unint64_t v18;
  __n128 v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v28;
  int v29;
  int v30;
  HGHWBlendFlipped *v31;

  v6 = *(float *)(a3 + 12);
  if (*(_DWORD *)(a2 + 8) == 35)
    v7 = 0;
  else
    v7 = *(_DWORD *)(a2 + 8);
  v8 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
  HGHWBlendFlipped::HGHWBlendFlipped(v8);
  (*(void (**)(HGHWBlendFlipped **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v31, a1);
  conformWithToneMap((FxColorDescription *)(a1 + 56), (uint64_t *)&v31, (FxColorDescription *)(a1 + 104), (uint64_t *)&v28);
  (*(void (**)(HGHWBlendFlipped *, _QWORD, _QWORD *))(*(_QWORD *)v8 + 120))(v8, 0, v28);
  if (v28)
    (*(void (**)(_QWORD *))(*v28 + 24))(v28);
  if (v31)
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v31 + 24))(v31);
  conformWithToneMap((FxColorDescription *)(a1 + 56), (uint64_t *)a2, (FxColorDescription *)(a1 + 104), (uint64_t *)&v28);
  (*(void (**)(HGHWBlendFlipped *, uint64_t, _QWORD *))(*(_QWORD *)v8 + 120))(v8, 1, v28);
  if (v28)
    (*(void (**)(_QWORD *))(*v28 + 24))(v28);
  v9 = LiHelium::convertMotionBlendMode(v7);
  (*(void (**)(HGHWBlendFlipped *, _QWORD, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 0, (float)v9, 0.0, 0.0, 0.0);
  v10 = *(double *)(a2 + 16);
  (*(void (**)(HGHWBlendFlipped *, uint64_t, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 1, v10, 0.0, 0.0, 0.0);
  v11 = *(float *)(a3 + 16);
  v12 = *(float *)(a3 + 20);
  v13 = LiHelium::convertMotionBlendMode(*(_DWORD *)(a3 + 8));
  HGHWBlendFlipped::SetLightWrapParams((uint64_t)v8, v13, v6, v11, v12, *(float *)(a3 + 24));
  v31 = v8;
  (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v8 + 16))(v8);
  conformWithToneMap((FxColorDescription *)(a1 + 104), (uint64_t *)&v31, (FxColorDescription *)(a1 + 56), (uint64_t *)&v28);
  v14 = *(_QWORD **)(a1 + 240);
  v15 = (int32x2_t)v28;
  if (v14 == v28)
  {
    if (v14)
      (*(void (**)(_QWORD *))(*v14 + 24))(v14);
  }
  else
  {
    if (v14)
    {
      (*(void (**)(_QWORD *))(*v14 + 24))(v14);
      v15 = (int32x2_t)v28;
    }
    *(int32x2_t *)(a1 + 240) = v15;
    v28 = 0;
  }
  if (v31)
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v31 + 24))(v31);
  *(_QWORD *)(a1 + 256) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 96) = 1;
  DOD = HGRenderer::GetDOD(*(HGRenderer **)(a1 + 24), *(HGNode **)(a1 + 240));
  v18 = v17;
  v28 = 0;
  if (HGRectIsNull(DOD, v17))
  {
    v20 = -1;
    v21 = -1;
  }
  else
  {
    if ((int)DOD <= -1073741823)
      v22 = -1073741823;
    else
      v22 = DOD;
    v23 = HIDWORD(DOD);
    if (SHIDWORD(DOD) <= -1073741823)
      LODWORD(v23) = -1073741823;
    if ((int)v18 >= 1073741822)
      v24 = 1073741822;
    else
      v24 = v18;
    v25 = HIDWORD(v18);
    if (SHIDWORD(v18) >= 1073741822)
      LODWORD(v25) = 1073741822;
    v28 = (_QWORD *)__PAIR64__(v23, v22);
    v20 = v24 - v22;
    v21 = v25 - v23;
  }
  v29 = v20;
  v30 = v21;
  LiDrawnRegion::clear((LiDrawnRegion *)(a1 + 136), v19);
  LiDrawnRegion::add(a1 + 136, (int32x2_t *)&v28, 1, 1, 0);
  v26 = *(_QWORD *)(a1 + 88);
  if (v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
    *(_QWORD *)(a1 + 88) = 0;
  }
  return (*(uint64_t (**)(HGHWBlendFlipped *))(*(_QWORD *)v8 + 24))(v8);
}

void sub_1B2CF4334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(a1);
}

uint64_t LiMultiBlender::addPreserveOpacity(uint64_t a1, uint64_t a2)
{
  HGStencil *v4;
  HGHWMultiBlend *v5;
  HGHWMultiBlend *v6;
  uint64_t v7;
  float v8;
  __n128 v9;
  HGHWMultiBlend *v11;
  uint64_t v12;

  v4 = (HGStencil *)HGObject::operator new(0x1C0uLL);
  HGStencil::HGStencil(v4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v12, a1);
  conformWithToneMap((FxColorDescription *)(a1 + 56), (uint64_t *)a2, (FxColorDescription *)(a1 + 104), (uint64_t *)&v11);
  (*(void (**)(HGStencil *, _QWORD, HGHWMultiBlend *))(*(_QWORD *)v4 + 120))(v4, 0, v11);
  if (v11)
    (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v11 + 24))(v11);
  (*(void (**)(HGStencil *, uint64_t, uint64_t))(*(_QWORD *)v4 + 120))(v4, 1, v12);
  (*(void (**)(HGStencil *, _QWORD, float, float, float, float))(*(_QWORD *)v4 + 96))(v4, 0, 0.0, 0.0, 0.0, 0.0);
  (*(void (**)(HGStencil *, uint64_t, float, float, float, float))(*(_QWORD *)v4 + 96))(v4, 1, 1.0, 0.0, 0.0, 0.0);
  LiMultiBlender::makeMultiBlend((LiMultiBlender *)a1, &v11);
  v5 = *(HGHWMultiBlend **)(a1 + 88);
  v6 = v11;
  if (v5 == v11)
  {
    if (v5)
      (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v5 + 24))(v5);
  }
  else
  {
    if (v5)
      (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v5 + 24))(v5);
    *(_QWORD *)(a1 + 88) = v6;
  }
  LiMultiBlender::addToMultiBlender(a1, 0, v12, 9, 0, 1, 1.0);
  v7 = LiHelium::convertMotionBlendMode(*(_DWORD *)(a2 + 8));
  v8 = *(double *)(a2 + 16);
  LiMultiBlender::addToMultiBlender(a1, 1, (uint64_t)v4, v7, 1, 0, v8);
  *(_DWORD *)(a1 + 96) = 2;
  *(_DWORD *)(a1 + 236) = 2;
  LiDrawnRegion::clear((LiDrawnRegion *)(a1 + 160), v9);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  return (*(uint64_t (**)(HGStencil *))(*(_QWORD *)v4 + 24))(v4);
}

void sub_1B2CF45F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(exception_object);
}

HGNode *LiMultiBlender::add(uint64_t a1, uint64_t a2)
{
  HGNode *v4;
  unint64_t DOD;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  char v14;
  unsigned int *v15;
  uint64_t v16;
  HGNode *result;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  int v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  int v28;

  v4 = *(HGNode **)a2;
  DOD = HGRenderer::GetDOD(*(HGRenderer **)(a1 + 24), *(HGNode **)a2);
  v7 = v6;
  v26 = 0;
  if (HGRectIsNull(DOD, v6))
  {
    v8 = -1;
    v9 = -1;
  }
  else
  {
    if ((int)DOD <= -1073741823)
      v10 = -1073741823;
    else
      v10 = DOD;
    v11 = HIDWORD(DOD);
    if (SHIDWORD(DOD) <= -1073741823)
      LODWORD(v11) = -1073741823;
    if ((int)v7 >= 1073741822)
      v12 = 1073741822;
    else
      v12 = v7;
    v13 = HIDWORD(v7);
    if (SHIDWORD(v7) >= 1073741822)
      LODWORD(v13) = 1073741822;
    v26 = __PAIR64__(v11, v10);
    v8 = v12 - v10;
    v9 = v13 - v11;
  }
  v27 = v8;
  v28 = v9;
  v14 = LiDrawnRegion::add(a1 + 136, (int32x2_t *)&v26, 1, 1, 0);
  v15 = (unsigned int *)(a2 + 8);
  v16 = LiHelium::convertMotionBlendMode(*(_DWORD *)(a2 + 8));
  if ((v14 & 1) == 0)
  {
    result = (HGNode *)PCBlend::isNothingOverNothing(*v15);
    if ((result & 1) != 0)
      return result;
    if (PCBlend::isNormalOverNothing(*v15))
      v16 = 9;
    else
      v16 = v16;
  }
  if (!*(_QWORD *)(a1 + 88))
    LiMultiBlender::multify((LiMultiBlender *)a1);
  if (LiDrawnRegion::add(a1 + 184, (int32x2_t *)&v26, 1, 0, *v15))
    goto LABEL_24;
  if ((LiDrawnRegion::add(a1 + 160, (int32x2_t *)&v26, 0, 1, 0) & 1) != 0)
  {
    LiDrawnRegion::add(a1 + 184, (int32x2_t *)&v26, 0, 1, *(_DWORD *)(a2 + 8));
LABEL_24:
    v18 = *(_DWORD *)(a1 + 220);
    if (*(_DWORD *)(a1 + 216) <= v18)
      v19 = (2 * (v18 + 1)) | 1;
    else
      v19 = *(_DWORD *)(a1 + 216);
    PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::resize(a1 + 208, v18 + 1, v19);
    v20 = *(_QWORD *)(a1 + 224) + 32 * (*(int *)(a1 + 220) - 1);
    v21 = *(_QWORD *)v20;
    result = *(HGNode **)a2;
    if (*(_QWORD *)v20 != *(_QWORD *)a2)
    {
      if (v21)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v21 + 24))(*(_QWORD *)v20);
        result = *(HGNode **)a2;
      }
      *(_QWORD *)v20 = result;
      if (result)
        result = (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)result + 16))(result);
    }
    v22 = *(__n128 *)v15;
    *(_BYTE *)(v20 + 24) = *(_BYTE *)(a2 + 24);
    *(__n128 *)(v20 + 8) = v22;
    v23 = *(_DWORD *)(a1 + 232) + 1;
    *(_DWORD *)(a1 + 232) = v23;
    if (v23 >= 32)
      return (HGNode *)LiMultiBlender::flushDeferred((_DWORD *)a1, v22);
    return result;
  }
  v25 = *(unsigned int *)(a1 + 96);
  if (*(_BYTE *)(a1 + 274))
    v25 = *(unsigned int *)(a1 + 236);
  v24 = *(double *)(a2 + 16);
  result = (HGNode *)LiMultiBlender::addToMultiBlender(a1, *(unsigned int *)(a1 + 96), (uint64_t)v4, v16, v25, 1, v24);
  ++*(_DWORD *)(a1 + 96);
  *(_DWORD *)(a1 + 232) = 0;
  return result;
}

void LiMultiBlender::multify(LiMultiBlender *this)
{
  HGNode *v2;
  uint64_t v3;
  int32x2_t v4;
  HGNode *v5;
  uint64_t v6;
  __n128 v7;
  int v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  char *v12;
  __n128 v13;
  unint64_t DOD;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;

  v2 = (HGNode *)*((_QWORD *)this + 30);
  LiMultiBlender::makeMultiBlend(this, (HGHWMultiBlend **)&v23);
  v3 = *((_QWORD *)this + 11);
  v4 = (int32x2_t)v23;
  if (v3 == v23)
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  else
  {
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    *((int32x2_t *)this + 11) = v4;
  }
  *((_DWORD *)this + 59) = 0;
  if (*((double *)this + 32) == 1.0)
  {
    LiMultiBlender::addToMultiBlender((uint64_t)this, 0, *((_QWORD *)this + 30), 9, 0, 1, 1.0);
    ++*((_DWORD *)this + 59);
    LiDrawnRegion::clear((LiMultiBlender *)((char *)this + 160), v7);
  }
  else
  {
    v5 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v5);
    if (*((_BYTE *)this + 274))
      v6 = *((unsigned int *)this + 59);
    else
      v6 = 0;
    LiMultiBlender::addToMultiBlender((uint64_t)this, 0, (uint64_t)v5, 9, v6, 1, 1.0);
    v8 = *((_DWORD *)this + 59);
    *((_DWORD *)this + 59) = v8 + 1;
    v9 = *((unsigned int *)this + 24);
    if (*((_BYTE *)this + 274))
      v11 = (v8 + 1);
    else
      v11 = v9;
    v10 = *((double *)this + 32);
    LiMultiBlender::addToMultiBlender((uint64_t)this, v9, *((_QWORD *)this + 30), 9, v11, 1, v10);
    ++*((_DWORD *)this + 24);
    v12 = (char *)this + 160;
    LiDrawnRegion::clear((LiMultiBlender *)((char *)this + 160), v13);
    DOD = HGRenderer::GetDOD(*((HGRenderer **)this + 3), v2);
    v16 = v15;
    v23 = 0;
    if (HGRectIsNull(DOD, v15))
    {
      v17 = -1;
      v18 = -1;
    }
    else
    {
      if ((int)DOD <= -1073741823)
        v19 = -1073741823;
      else
        v19 = DOD;
      v20 = HIDWORD(DOD);
      if (SHIDWORD(DOD) <= -1073741823)
        LODWORD(v20) = -1073741823;
      if ((int)v16 >= 1073741822)
        v21 = 1073741822;
      else
        v21 = v16;
      v22 = HIDWORD(v16);
      if (SHIDWORD(v16) >= 1073741822)
        LODWORD(v22) = 1073741822;
      v23 = __PAIR64__(v20, v19);
      v17 = v21 - v19;
      v18 = v22 - v20;
    }
    v24 = v17;
    v25 = v18;
    LiDrawnRegion::add((uint64_t)v12, (int32x2_t *)&v23, 1, 1, 0);
    if (v5)
      (*(void (**)(HGNode *))(*(_QWORD *)v5 + 24))(v5);
  }
}

void sub_1B2CF4AD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t LiMultiBlender::addToMultiBlender(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, float a7)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v11 = a3;
  if (a3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
    if (a6 != 1)
      goto LABEL_14;
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  else if (a6 != 1)
  {
    v11 = 0;
    goto LABEL_14;
  }
  v15 = v11;
  conformWithToneMap((FxColorDescription *)(a1 + 56), &v15, (FxColorDescription *)(a1 + 104), &v16);
  if (v16 == v11)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  }
  else
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    v11 = v16;
    v16 = 0;
  }
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
LABEL_14:
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, float))(**(_QWORD **)(a1 + 88) + 632))(*(_QWORD *)(a1 + 88), a2, v11, a4, a5, a7);
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  return result;
}

void sub_1B2CF4C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 24))(a9);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(exception_object);
}

_DWORD *LiMultiBlender::flushDeferred(_DWORD *this, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  LiDrawnRegion *v4;
  LiDrawnRegion *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  if (this[55])
  {
    v2 = (uint64_t)this;
    v3 = (uint64_t)(this + 52);
    v4 = (LiDrawnRegion *)(this + 40);
    v5 = (LiDrawnRegion *)(this + 46);
    do
    {
      ++*(_DWORD *)(v2 + 236);
      LiDrawnRegion::clear(v4, a2);
      v21 = &unk_1E656A758;
      v22 = 0;
      v23 = 0;
      v6 = *(_DWORD *)(v2 + 220);
      if (v6 <= 0)
        v7 = 0;
      else
        v7 = (2 * v6) | 1;
      PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::resize((uint64_t)&v21, v6, v7);
      if (*(int *)(v2 + 220) >= 1)
      {
        v8 = 0;
        v9 = 0;
        do
        {
          v10 = *(_QWORD *)(v2 + 224);
          v11 = v23;
          v12 = *(_QWORD *)(v23 + v8);
          v13 = *(_QWORD *)(v10 + v8);
          if (v12 != v13)
          {
            if (v12)
            {
              (*(void (**)(_QWORD))(*(_QWORD *)v12 + 24))(*(_QWORD *)(v23 + v8));
              v13 = *(_QWORD *)(v10 + v8);
            }
            *(_QWORD *)(v11 + v8) = v13;
            if (v13)
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
          }
          v14 = v11 + v8;
          v15 = *(_OWORD *)(v10 + v8 + 8);
          *(_BYTE *)(v14 + 24) = *(_BYTE *)(v10 + v8 + 24);
          *(_OWORD *)(v14 + 8) = v15;
          ++v9;
          v8 += 32;
        }
        while (v9 < *(int *)(v2 + 220));
      }
      if (*(int *)(v2 + 216) < 0)
        v16 = 1;
      else
        v16 = *(_DWORD *)(v2 + 216);
      PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::resize(v3, 0, v16);
      LiDrawnRegion::clear(v5, v17);
      if (SHIDWORD(v22) >= 1)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 56))(v2, v23 + v18);
          ++v19;
          v18 += 32;
        }
        while (v19 < SHIDWORD(v22));
      }
      v21 = &unk_1E656A758;
      if ((int)v22 < 0)
        v20 = 1;
      else
        v20 = v22;
      PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::resize((uint64_t)&v21, 0, v20);
      this = (_DWORD *)v23;
      if (v23)
        this = (_DWORD *)MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
    }
    while (*(_DWORD *)(v2 + 220));
  }
  return this;
}

void sub_1B2CF4EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

HGHWMultiBlend *LiMultiBlender::getOutput@<X0>(LiMultiBlender *this@<X0>, uint64_t *a2@<X8>, __n128 a3@<Q0>)
{
  HGHWMultiBlend *v5;
  HGHWMultiBlend *v6;
  HGHWMultiBlend *v7;
  HGNode *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  HGHWMultiBlend *result;
  HGHWMultiBlend *v15;

  LiMultiBlender::flushDeferred(this, a3);
  v5 = (HGHWMultiBlend *)*((_QWORD *)this + 11);
  if (v5)
    goto LABEL_19;
  if (*((_QWORD *)this + 30) && *((double *)this + 32) < 1.0)
  {
    LiMultiBlender::makeMultiBlend(this, &v15);
    v6 = (HGHWMultiBlend *)*((_QWORD *)this + 11);
    v7 = v15;
    if (v6 == v15)
    {
      if (v6)
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v6 + 24))(v6);
    }
    else
    {
      if (v6)
        (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v6 + 24))(v6);
      *((_QWORD *)this + 11) = v7;
    }
    *((_DWORD *)this + 59) = 0;
    v8 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v8);
    if (*((_BYTE *)this + 274))
      v9 = *((unsigned int *)this + 59);
    else
      v9 = 0;
    LiMultiBlender::addToMultiBlender((uint64_t)this, 0, (uint64_t)v8, 9, v9, 1, 1.0);
    v10 = *((_DWORD *)this + 59);
    *((_DWORD *)this + 59) = v10 + 1;
    v11 = *((unsigned int *)this + 24);
    if (*((_BYTE *)this + 274))
      v13 = (v10 + 1);
    else
      v13 = v11;
    v12 = *((double *)this + 32);
    LiMultiBlender::addToMultiBlender((uint64_t)this, v11, *((_QWORD *)this + 30), 9, v13, 1, v12);
    ++*((_DWORD *)this + 24);
    if (v8)
      (*(void (**)(HGNode *))(*(_QWORD *)v8 + 24))(v8);
  }
  v5 = (HGHWMultiBlend *)*((_QWORD *)this + 11);
  if (v5)
  {
LABEL_19:
    *((_BYTE *)this + 273) = 1;
    v15 = v5;
    (*(void (**)(HGHWMultiBlend *))(*(_QWORD *)v5 + 16))(v5);
    conformWithToneMap((FxColorDescription *)((char *)this + 104), (uint64_t *)&v15, (FxColorDescription *)((char *)this + 56), a2);
    result = v15;
    if (v15)
      return (HGHWMultiBlend *)(*(uint64_t (**)(HGHWMultiBlend *))(*(_QWORD *)v15 + 24))(v15);
  }
  else
  {
    result = (HGHWMultiBlend *)*((_QWORD *)this + 30);
    *a2 = (uint64_t)result;
    if (result)
      return (HGHWMultiBlend *)(*(uint64_t (**)(HGHWMultiBlend *))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void sub_1B2CF5080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(exception_object);
}

uint64_t LiMultiBlender::makeMultiBlend@<X0>(LiMultiBlender *this@<X0>, HGHWMultiBlend **a2@<X8>)
{
  HGHWMultiBlend *v4;

  v4 = (HGHWMultiBlend *)HGObject::operator new(0x280uLL);
  HGHWMultiBlend::HGHWMultiBlend(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGHWMultiBlend *, uint64_t, float, float, float, float))(*(_QWORD *)v4 + 96))(v4, 5, *((float *)this + 13), 0.0, 0.0, 0.0);
}

void sub_1B2CF515C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t LiMultiBlender::addPatch(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  LiHeMixShader *v6;
  LiHeMixShader *v7;
  HGNode *v8;
  unint64_t DOD;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;

  v6 = (LiHeMixShader *)HGObject::operator new(0x1A0uLL);
  *(_OWORD *)v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 9) = 0u;
  *((_OWORD *)v6 + 10) = 0u;
  *((_OWORD *)v6 + 11) = 0u;
  *((_OWORD *)v6 + 12) = 0u;
  *((_OWORD *)v6 + 13) = 0u;
  *((_OWORD *)v6 + 14) = 0u;
  *((_OWORD *)v6 + 15) = 0u;
  *((_OWORD *)v6 + 16) = 0u;
  *((_OWORD *)v6 + 17) = 0u;
  *((_OWORD *)v6 + 18) = 0u;
  *((_OWORD *)v6 + 19) = 0u;
  *((_OWORD *)v6 + 20) = 0u;
  *((_OWORD *)v6 + 21) = 0u;
  *((_OWORD *)v6 + 22) = 0u;
  *((_OWORD *)v6 + 23) = 0u;
  *((_OWORD *)v6 + 24) = 0u;
  *((_OWORD *)v6 + 25) = 0u;
  LiHeMixShader::LiHeMixShader(v6);
  *(_QWORD *)v6 = &unk_1E657A8B8;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v24, a1);
  (*(void (**)(LiHeMixShader *, _QWORD, uint64_t))(*(_QWORD *)v6 + 120))(v6, 0, v24);
  (*(void (**)(LiHeMixShader *, uint64_t, _QWORD))(*(_QWORD *)v6 + 120))(v6, 1, *a2);
  (*(void (**)(LiHeMixShader *, uint64_t, _QWORD))(*(_QWORD *)v6 + 120))(v6, 2, *a3);
  v7 = *(LiHeMixShader **)(a1 + 240);
  v8 = (HGNode *)v6;
  if (v7 != v6)
  {
    if (v7)
      (*(void (**)(LiHeMixShader *, LiHeMixShader *))(*(_QWORD *)v7 + 24))(v7, v6);
    *(_QWORD *)(a1 + 240) = v6;
    (*(void (**)(LiHeMixShader *, HGNode *))(*(_QWORD *)v6 + 16))(v6, v8);
    v8 = *(HGNode **)(a1 + 240);
  }
  *(_QWORD *)(a1 + 256) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 96) = 1;
  DOD = HGRenderer::GetDOD(*(HGRenderer **)(a1 + 24), v8);
  v11 = v10;
  v21 = 0;
  if (HGRectIsNull(DOD, v10))
  {
    v13 = -1;
    v14 = -1;
  }
  else
  {
    if ((int)DOD <= -1073741823)
      v15 = -1073741823;
    else
      v15 = DOD;
    v16 = HIDWORD(DOD);
    if (SHIDWORD(DOD) <= -1073741823)
      LODWORD(v16) = -1073741823;
    if ((int)v11 >= 1073741822)
      v17 = 1073741822;
    else
      v17 = v11;
    v18 = HIDWORD(v11);
    if (SHIDWORD(v11) >= 1073741822)
      LODWORD(v18) = 1073741822;
    v21 = __PAIR64__(v16, v15);
    v13 = v17 - v15;
    v14 = v18 - v16;
  }
  v22 = v13;
  v23 = v14;
  LiDrawnRegion::clear((LiDrawnRegion *)(a1 + 136), v12);
  LiDrawnRegion::add(a1 + 136, (int32x2_t *)&v21, 1, 1, 0);
  v19 = *(_QWORD *)(a1 + 88);
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 24))(v19);
    *(_QWORD *)(a1 + 88) = 0;
  }
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  return (*(uint64_t (**)(LiHeMixShader *))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1B2CF538C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(a1);
}

LiMultiBlender *LiMultiBlender::newInstance(LiMultiBlender *this)
{
  LiMultiBlender *v2;

  v2 = (LiMultiBlender *)operator new();
  LiMultiBlender::LiMultiBlender(v2, *((float *)this + 13), (FxColorDescription *)((char *)this + 56));
  *((_QWORD *)v2 + 3) = *((_QWORD *)this + 3);
  return v2;
}

void sub_1B2CF543C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40EB60DC95);
  _Unwind_Resume(a1);
}

LiMultiBlender *LiBlender::makeBlender(LiBlender *this, FxColorDescription *a2, float a3, const FxColorDescription *a4)
{
  LiMultiBlender *v7;

  v7 = (LiMultiBlender *)operator new();
  LiMultiBlender::LiMultiBlender(v7, a3, a2);
  *((_QWORD *)v7 + 3) = this;
  return v7;
}

void sub_1B2CF54C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C40EB60DC95);
  _Unwind_Resume(a1);
}

CGColorSpace **LiCompositor::getHelium@<X0>(LiCompositor *this@<X0>, LiAgent *a2@<X1>, CGColorSpace **a3@<X8>)
{
  const FxColorDescription *RequestedColorDescription;
  CGColorSpace *CGColorSpace;
  uint64_t v8;
  HGNode *v9;
  CGColorSpace *v10;
  LiImageSource *v11;
  LiImageSource *v12;
  CGColorSpace *v13;
  HGNode *v14;
  HGNode *v16;
  uint64_t v17;
  PCSharedCount v18;
  HGNode *v19;
  uint64_t v20;
  PCSharedCount v21;
  __n128 v22[15];
  _QWORD v23[4];
  __n128 v24;
  char v25;
  FxColorDescription v26;

  RequestedColorDescription = (const FxColorDescription *)LiAgent::getRequestedColorDescription(a2);
  CGColorSpace = (CGColorSpace *)FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  FxColorDescription::FxColorDescription(&v26, RequestedColorDescription, CGColorSpace);
  LiAgent::setActualColorDescription((CGColorSpace **)a2, &v26);
  LiMultiBlender::LiMultiBlender((LiMultiBlender *)v23, *(float *)(*((_QWORD *)a2 + 6) + 192), &v26);
  v23[3] = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  if (LiAgent::haveROI(a2))
  {
    LiAgent::getROI((__n128 *)a2, v22);
    v24 = v22[0];
    v25 = 1;
  }
  LiAgent::LiAgent((LiAgent *)v22, a2);
  LiAgent::setRequestedColorDescription((CGColorSpace **)v22, &v26);
  if (*((_QWORD *)this + 5))
  {
    v20 = 0;
    PCSharedCount::PCSharedCount(&v21);
    (*(void (**)(_QWORD *, char *, _QWORD, _QWORD, _QWORD, uint64_t *, double))(v23[0] + 16))(v23, (char *)this + 40, 0, 0, 0, &v20, 1.0);
    PCSharedCount::~PCSharedCount(&v21);
  }
  else
  {
    v11 = (LiImageSource *)*((_QWORD *)this + 3);
    if (v11)
    {
      if (*((_BYTE *)this + 48))
      {
        LiAgent::getHelium((LiAgent *)v22, v11, &v19);
        v17 = 0;
        PCSharedCount::PCSharedCount(&v18);
        (*(void (**)(_QWORD *, HGNode **, _QWORD, _QWORD, _QWORD, uint64_t *, double))(v23[0] + 16))(v23, &v19, 0, 0, 0, &v17, 1.0);
        PCSharedCount::~PCSharedCount(&v18);
        if (v19)
          (*(void (**)(HGNode *))(*(_QWORD *)v19 + 24))(v19);
      }
    }
  }
  v8 = *((_QWORD *)this + 8);
  if (v8)
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v8 + 16))(v8, v23);
  (*(void (**)(_QWORD *))(v23[0] + 24))(v23);
  if (!*((_QWORD *)this + 5))
  {
    v12 = (LiImageSource *)*((_QWORD *)this + 3);
    if (v12)
    {
      if (!*((_BYTE *)this + 48))
      {
        LiAgent::getHelium((LiAgent *)v22, v12, &v16);
        blendNodes(&v26, a3, (uint64_t *)&v16, 0, 0, (uint64_t *)&v19, *(float *)(*((_QWORD *)a2 + 6) + 192), 1.0);
        v13 = *a3;
        v14 = v19;
        if (*a3 == (CGColorSpace *)v19)
        {
          if (v13)
            (*(void (**)(CGColorSpace *))(*(_QWORD *)v13 + 24))(v13);
        }
        else
        {
          if (v13)
          {
            (*(void (**)(CGColorSpace *))(*(_QWORD *)v13 + 24))(v13);
            v14 = v19;
          }
          *a3 = (CGColorSpace *)v14;
          v19 = 0;
        }
        if (v16)
          (*(void (**)(HGNode *))(*(_QWORD *)v16 + 24))(v16);
      }
    }
  }
  if (!*a3)
  {
    v9 = (HGNode *)HGObject::operator new(0x1A0uLL);
    HGNode::HGNode(v9);
    v10 = *a3;
    if (*a3 == (CGColorSpace *)v9)
    {
      if (v9)
        (*(void (**)(HGNode *))(*(_QWORD *)v9 + 24))(v9);
    }
    else
    {
      if (v10)
        (*(void (**)(CGColorSpace *))(*(_QWORD *)v10 + 24))(v10);
      *a3 = (CGColorSpace *)v9;
    }
  }
  LiAgent::~LiAgent((LiAgent *)v22);
  LiMultiBlender::~LiMultiBlender((LiMultiBlender *)v23);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v26._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2CF57C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  _QWORD *v8;
  uint64_t v9;
  va_list va;

  va_start(va, a8);
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 24))(a6);
  if (a3)
    (*(void (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  if (*v8)
    (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 24))(*v8);
  LiAgent::~LiAgent((LiAgent *)va);
  LiMultiBlender::~LiMultiBlender((LiMultiBlender *)&STACK[0x208]);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v9 - 80));
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::~PCArray(uint64_t a1, __n128 a2)
{
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E656A720;
  if (*(int *)(a1 + 8) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 8);
  PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::resize(a1, 0, v3, a2);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::~PCArray(uint64_t a1, __n128 a2)
{
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E656A720;
  if (*(int *)(a1 + 8) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 8);
  PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::resize(a1, 0, v3, a2);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::resize(uint64_t a1, int a2, int a3, __n128 a4)
{
  int v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  LiDrawnRegion::Rect *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  PCException *exception;
  PCString v19;

  if (a3 <= a2)
    v4 = a2;
  else
    v4 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v19, "PCArray::resize");
    PCException::PCException(exception, &v19);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v4 == *(_DWORD *)(a1 + 8))
  {
    v7 = *(int *)(a1 + 12);
    if (a2 > (int)v7)
    {
      v8 = 20 * v7;
      v9 = a2 - v7;
      do
      {
        LiDrawnRegion::Rect::Rect((LiDrawnRegion::Rect *)(*(_QWORD *)(a1 + 16) + v8));
        v8 += 20;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    if (v4)
    {
      v10 = (char *)operator new[]();
      bzero(v10, 20 * v4);
    }
    else
    {
      v10 = 0;
    }
    v11 = *(_DWORD *)(a1 + 12);
    if (a2 >= v11)
      v12 = *(_DWORD *)(a1 + 12);
    else
      v12 = a2;
    if (v12 < 1)
    {
      v12 = 0;
    }
    else
    {
      v13 = 0;
      do
      {
        a4 = LiDrawnRegion::Rect::Rect((LiDrawnRegion::Rect *)&v10[v13], (const LiDrawnRegion::Rect *)(*(_QWORD *)(a1 + 16) + v13));
        v13 += 20;
      }
      while (20 * v12 != v13);
      v11 = *(_DWORD *)(a1 + 12);
    }
    if (v12 > v11)
      v11 = v12;
    if (v11 < a2)
    {
      v14 = (LiDrawnRegion::Rect *)&v10[20 * v11];
      v15 = a2 - (unint64_t)v11;
      do
      {
        a4.n128_f64[0] = LiDrawnRegion::Rect::Rect(v14);
        v14 = (LiDrawnRegion::Rect *)(v16 + 20);
        --v15;
      }
      while (v15);
    }
    v17 = *(_QWORD *)(a1 + 16);
    if (v17)
      MEMORY[0x1B5E2914C](v17, 0x1000C8077774924, a4);
    *(_QWORD *)(a1 + 16) = v10;
  }
  *(_DWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2CF5B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PCPtr<LiImageSource>::reset(_QWORD *a1)
{
  uint64_t *v2;
  PCSharedCount v3;

  PCSharedCount::PCSharedCount(&v3);
  *a1 = 0;
  PCSharedCount::operator=(v2, a1 + 1);
  PCSharedCount::~PCSharedCount(&v3);
}

void sub_1B2CF5C0C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656A758;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<LiMultiBlenderLayer,PCArray_Traits<LiMultiBlenderLayer>>::resize(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  PCException *exception;
  PCString v27;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v27, "PCArray::resize");
    PCException::PCException(exception, &v27);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    v6 = *(_DWORD *)(result + 12);
    if (v6 <= a2)
    {
      if (v6 < a2)
      {
        v10 = v6;
        v11 = *(_QWORD *)(result + 16) + 32 * v6 + 16;
        v12 = a2 - v10;
        do
        {
          *(_QWORD *)(v11 - 16) = 0;
          *(_DWORD *)(v11 - 8) = 0;
          *(_QWORD *)v11 = 0x3FF0000000000000;
          *(_BYTE *)(v11 + 8) = 0;
          v11 += 32;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      v7 = 32 * a2;
      v8 = a2;
      do
      {
        result = *(_QWORD *)(*(_QWORD *)(v5 + 16) + v7);
        if (result)
        {
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
          v6 = *(_DWORD *)(v5 + 12);
        }
        ++v8;
        v7 += 32;
      }
      while (v8 < v6);
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 32 * v3);
    }
    else
    {
      v9 = 0;
    }
    v13 = *(_DWORD *)(v5 + 12);
    if (a2 >= v13)
      v14 = *(_DWORD *)(v5 + 12);
    else
      v14 = a2;
    if (v14 < 1)
    {
      v14 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(v5 + 16);
        v17 = *(_QWORD *)(v16 + v15);
        *(_QWORD *)&v9[v15] = v17;
        if (v17)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
          v18 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + v15);
          v19 = &v9[v15];
          v20 = *(_BYTE *)(v16 + v15 + 24);
          *(_OWORD *)(v19 + 8) = *(_OWORD *)(v16 + v15 + 8);
          v19[24] = v20;
          if (v18)
            (*(void (**)(uint64_t))(*(_QWORD *)v18 + 24))(v18);
        }
        else
        {
          v21 = &v9[v15];
          v22 = *(_OWORD *)(v16 + v15 + 8);
          v21[24] = *(_BYTE *)(v16 + v15 + 24);
          *(_OWORD *)(v21 + 8) = v22;
        }
        v15 += 32;
      }
      while (32 * v14 != v15);
      v13 = *(_DWORD *)(v5 + 12);
    }
    if (v14 < v13)
    {
      v23 = 32 * v14;
      do
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v5 + 16) + v23);
        if (v24)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
          v13 = *(_DWORD *)(v5 + 12);
        }
        v23 += 32;
        ++v14;
      }
      while (v13 > v14);
    }
    if (v14 < a2)
    {
      v25 = (uint64_t)&v9[32 * v14 + 16];
      do
      {
        *(_QWORD *)(v25 - 16) = 0;
        *(_DWORD *)(v25 - 8) = 0;
        *(_QWORD *)v25 = 0x3FF0000000000000;
        *(_BYTE *)(v25 + 8) = 0;
        v25 += 32;
        ++v14;
      }
      while (v14 < a2);
    }
    result = *(_QWORD *)(v5 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v5 + 16) = v9;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = a2;
  return result;
}

void sub_1B2CF5F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void LiDepthSorter::stackSort(uint64_t a1)
{
  size_t v1;

  v1 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v1)
    qsort(*(void **)(a1 + 16), v1, 8uLL, (int (__cdecl *)(const void *, const void *))stackOrder);
}

uint64_t stackOrder(LiDrawer **a1, LiDrawer **a2)
{
  uint64_t result;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  result = LiDrawer::hasCompositeOrder(*a1);
  if ((_DWORD)result)
  {
    result = LiDrawer::hasCompositeOrder(*a2);
    if ((_DWORD)result)
    {
      v5 = LiDrawer::compositeOrder(*a1);
      v6 = LiDrawer::compositeOrder(*a2);
      v7 = v5 >= v6 ? 0 : -1;
      result = v5 > v6 ? 1 : v7;
      if (!(_DWORD)result)
      {
        v8 = LiDrawer::compositeOrder2(*a1);
        v9 = LiDrawer::compositeOrder2(*a2);
        v10 = v8 >= v9 ? 0 : -1;
        result = v8 > v9 ? 1 : v10;
        if (!(_DWORD)result)
        {
          v11 = LiDrawer::compositeOrder3(*a1);
          v12 = LiDrawer::compositeOrder3(*a2);
          v13 = v11 >= v12 ? 0 : -1;
          result = v11 > v12 ? 1 : v13;
          if (!(_DWORD)result)
          {
            v14 = *((_DWORD *)*a1 + 3);
            v15 = *((_DWORD *)*a2 + 3);
            v16 = v14 <= v15;
            if (v14 >= v15)
              v17 = 0;
            else
              v17 = -1;
            if (v16)
              return v17;
            else
              return 1;
          }
        }
      }
    }
  }
  return result;
}

uint64_t PCPtrArray<LiDrawer>::~PCPtrArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656A7E0;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void LiDepthSorter::LiDepthSorter(LiDepthSorter *this)
{
  *(_QWORD *)this = &unk_1E656A790;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E656A790;
  *((_BYTE *)this + 48) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
}

void LiDepthSorter::~LiDepthSorter(LiDepthSorter *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  *((_QWORD *)this + 3) = &unk_1E656A7E0;
  v2 = *((_DWORD *)this + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *((int *)this + 9);
    if ((v4 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v4) = 0;
        v5 = __CFADD__(v4++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 5);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *((_QWORD *)this + 5) = v6;
  }
  *((_DWORD *)this + 8) = v3;
  *((_DWORD *)this + 9) = 0;
  v8 = *((_QWORD *)this + 5);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = 0;
  *(_QWORD *)this = &unk_1E656A7E0;
  v9 = *((_DWORD *)this + 2);
  if (v9 < 0)
    v10 = 1;
  else
    v10 = v9 & ~(v9 >> 31);
  if (v10 == v9)
  {
    v11 = *((int *)this + 3);
    if ((v11 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v11) = 0;
        v5 = __CFADD__(v11++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v10)
    {
      v12 = (void *)operator new[]();
      bzero(v12, 8 * v10);
    }
    else
    {
      v12 = 0;
    }
    v13 = *((_QWORD *)this + 2);
    if (v13)
      MEMORY[0x1B5E2914C](v13, 0x1000C8077774924);
    *((_QWORD *)this + 2) = v12;
  }
  *((_DWORD *)this + 2) = v10;
  *((_DWORD *)this + 3) = 0;
  v14 = *((_QWORD *)this + 2);
  if (v14)
    MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
}

void LiDepthSorter::sort(LiDepthSorter *this)
{
  uint64_t v1;
  unsigned int v3;
  int v4;
  uint64_t i;
  PCArray_base *v6;
  uint64_t v7;
  PCArray_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  BOOL v30;
  void *v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  size_t v45;
  int v46;
  void *v47;
  int v48;
  int v49;
  double v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  int v56;
  _QWORD v57[3];
  char v58;
  BOOL v59;
  int v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  _DWORD __nel[5];

  v1 = *((unsigned int *)this + 3);
  if ((_DWORD)v1)
  {
    LiPlaneSplit::LiPlaneSplit((LiPlaneSplit *)v57);
    v3 = 0;
    v58 = *((_BYTE *)this + 48);
    v57[0] = *((_QWORD *)this + 7);
    if ((int)v1 >= 0)
      v4 = v1;
    else
      v4 = v1 + 1;
    LODWORD(i) = v4 >> 1;
LABEL_6:
    v6 = (PCArray_base *)LiPlaneSplit::clear((uint64_t)v57);
    if ((i & 0x80000000) != 0 || *((_DWORD *)this + 3) <= (int)i)
      PCArray_base::badIndex(v6);
    v7 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * (int)i);
    v57[1] = v7;
    v8 = (PCArray_base *)(*(_QWORD *(**)(void **__return_ptr, uint64_t))(*(_QWORD *)v7 + 48))(&v47, v7);
    v59 = v50 > 0.0;
    if ((int)v1 >= 1)
    {
      v9 = i;
      for (i = 0; v1 != i; ++i)
      {
        if (v9 != i)
        {
          if (i >= *((int *)this + 3))
            PCArray_base::badIndex(v8);
          v57[2] = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * i);
          LiPlaneSplit::compute((LiPlaneSplit *)v57);
          if (v60 == 3 && !v61 && v3 < 0xA)
          {
            ++v3;
            goto LABEL_6;
          }
          v8 = (PCArray_base *)LiPlaneSplit::store((LiPlaneSplit *)v57, v10, v11, v12, v13, v14, v15, v16);
        }
      }
    }
    if (*((int *)this + 16) <= 299)
    {
      v17 = 1;
      do
      {
        v18 = v17;
        if ((v17 & 1) != 0)
          v19 = 364;
        else
          v19 = 340;
        v20 = *(_DWORD *)((char *)v57 + v19);
        if (v20 >= 2)
        {
          v47 = &unk_1E656A790;
          v52 = 0;
          v53 = 0;
          v55 = *((_QWORD *)this + 7);
          v21 = *((_DWORD *)this + 16);
          v56 = v21 + 1;
          if (*((_BYTE *)this + 48))
            v22 = v21 < 5;
          else
            v22 = 0;
          v23 = v22;
          v54 = v23;
          if ((v18 & 1) != 0)
            v24 = 45;
          else
            v24 = 42;
          v25 = &v65;
          if ((v18 & 1) == 0)
            v25 = &v62;
          v48 = v57[v24];
          v49 = v20;
          if ((v18 & 1) != 0)
            v26 = 46;
          else
            v26 = 43;
          v50 = *(double *)&v57[v26];
          v51 = &unk_1E656A790;
          *v25 = 0;
          v25[1] = 0;
          LiDepthSorter::sort((LiDepthSorter *)&v47);
          v27 = v57[v24];
          if (v27 < 0)
            v28 = 1;
          else
            v28 = v27 & ~(v27 >> 31);
          if (v28 == v27)
          {
            v29 = *(int *)((char *)v57 + v19);
            if ((v29 & 0x80000000) != 0)
            {
              do
              {
                *(_QWORD *)(v57[v26] + 8 * v29) = 0;
                v30 = __CFADD__(v29++, 1);
              }
              while (!v30);
            }
            v31 = (void *)v57[v26];
          }
          else
          {
            if (v28)
            {
              v31 = (void *)operator new[]();
              bzero(v31, 8 * v28);
            }
            else
            {
              v31 = 0;
            }
            v32 = v57[v26];
            if (v32)
              MEMORY[0x1B5E2914C](v32, 0x1000C8077774924);
            v57[v26] = v31;
          }
          LODWORD(v57[v24]) = v28;
          *(_DWORD *)((char *)v57 + v19) = 0;
          if (v31)
            MEMORY[0x1B5E2914C](v31, 0x1000C8077774924);
          v33 = HIDWORD(v52);
          LODWORD(v57[v24]) = v52;
          *(_DWORD *)((char *)v57 + v19) = v33;
          v57[v26] = v53;
          v52 = 0;
          v53 = 0;
          LiDepthSorter::~LiDepthSorter((LiDepthSorter *)&v47);
        }
        v17 = 0;
      }
      while ((v18 & 1) != 0);
    }
    v34 = *((_DWORD *)this + 8);
    if (v34 < 0)
      v35 = 1;
    else
      v35 = v34 & ~(v34 >> 31);
    if (v35 == v34)
    {
      v36 = *((int *)this + 9);
      v37 = v7;
      if ((v36 & 0x80000000) != 0)
      {
        do
        {
          *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v36) = 0;
          v30 = __CFADD__(v36++, 1);
        }
        while (!v30);
      }
    }
    else
    {
      v37 = v7;
      if (v35)
      {
        v38 = (void *)operator new[]();
        bzero(v38, 8 * v35);
      }
      else
      {
        v38 = 0;
      }
      v39 = *((_QWORD *)this + 5);
      if (v39)
        MEMORY[0x1B5E2914C](v39, 0x1000C8077774924);
      *((_QWORD *)this + 5) = v38;
    }
    v40 = (char *)this + 24;
    *((_DWORD *)this + 8) = v35;
    *((_DWORD *)this + 9) = 0;
    v41 = *((_QWORD *)this + 5);
    if (v41)
      MEMORY[0x1B5E2914C](v41, 0x1000C8077774924);
    v42 = v62;
    v43 = HIDWORD(v62);
    *((_DWORD *)this + 8) = v62;
    *((_DWORD *)this + 9) = v43;
    *((_QWORD *)this + 5) = v63;
    v62 = 0;
    v63 = 0;
    if (__nel[0])
    {
      if (v67 <= __nel[0])
        v44 = (2 * (__nel[0] + 1)) | 1;
      else
        v44 = v67;
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)&v66, __nel[0] + 1, v44);
      v45 = __nel[0];
      *(_QWORD *)(*(_QWORD *)&__nel[1] + 8 * (__nel[0] - 1)) = v37;
      if ((_DWORD)v45)
        qsort(*(void **)&__nel[1], v45, 8uLL, (int (__cdecl *)(const void *, const void *))stackOrder);
      PCArray<LiDrawer *,PCArray_Traits_Zero<LiDrawer *>>::append((uint64_t)v40, (uint64_t)&v66);
    }
    else
    {
      if (v42 <= v43)
        v46 = (2 * (v43 + 1)) | 1;
      else
        v46 = v42;
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)this + 24, v43 + 1, v46);
      *(_QWORD *)(*((_QWORD *)this + 5) + 8 * *((int *)this + 9) - 8) = v37;
    }
    PCArray<LiDrawer *,PCArray_Traits_Zero<LiDrawer *>>::append((uint64_t)v40, (uint64_t)&v64);
    LiPlaneSplit::~LiPlaneSplit((LiPlaneSplit *)v57);
  }
}

void sub_1B2CF6784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  LiPlaneSplit::~LiPlaneSplit((LiPlaneSplit *)va);
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiDrawer *,PCArray_Traits_Zero<LiDrawer *>>::append(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(int *)(a1 + 12);
  v5 = *(_DWORD *)(a2 + 12) + v4;
  if (*(_DWORD *)(a1 + 8) >= v5)
    v6 = *(_DWORD *)(a1 + 8);
  else
    v6 = (2 * v5) | 1;
  result = PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(a1, v5, v6);
  v8 = *(unsigned int *)(a2 + 12);
  if ((int)v8 >= 1)
  {
    v9 = 0;
    v10 = 8 * v8;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4 + v9) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v9);
      v9 += 8;
    }
    while (v10 != v9);
  }
  return result;
}

void PCPtrArray<LiDrawer>::~PCPtrArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656A7E0;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void LiPlaneSplit::~LiPlaneSplit(LiPlaneSplit *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  void *v22;
  void *v23;
  char *v24;
  void *v25;
  void *v26;

  *((_QWORD *)this + 47) = &unk_1E656A7E0;
  v2 = *((_DWORD *)this + 96);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *((int *)this + 97);
    if ((v4 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 49) + 8 * v4) = 0;
        v5 = __CFADD__(v4++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 49);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *((_QWORD *)this + 49) = v6;
  }
  *((_DWORD *)this + 96) = v3;
  *((_DWORD *)this + 97) = 0;
  v8 = *((_QWORD *)this + 49);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *((_QWORD *)this + 49) = 0;
  *((_DWORD *)this + 96) = 0;
  *((_QWORD *)this + 44) = &unk_1E656A7E0;
  v9 = *((_DWORD *)this + 90);
  if (v9 < 0)
    v10 = 1;
  else
    v10 = v9 & ~(v9 >> 31);
  if (v10 == v9)
  {
    v11 = *((int *)this + 91);
    if ((v11 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 46) + 8 * v11) = 0;
        v5 = __CFADD__(v11++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v10)
    {
      v12 = (void *)operator new[]();
      bzero(v12, 8 * v10);
    }
    else
    {
      v12 = 0;
    }
    v13 = *((_QWORD *)this + 46);
    if (v13)
      MEMORY[0x1B5E2914C](v13, 0x1000C8077774924);
    *((_QWORD *)this + 46) = v12;
  }
  *((_DWORD *)this + 90) = v10;
  *((_DWORD *)this + 91) = 0;
  v14 = *((_QWORD *)this + 46);
  if (v14)
    MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
  *((_QWORD *)this + 46) = 0;
  *((_DWORD *)this + 90) = 0;
  *((_QWORD *)this + 41) = &unk_1E656A7E0;
  v15 = *((_DWORD *)this + 84);
  if (v15 < 0)
    v16 = 1;
  else
    v16 = v15 & ~(v15 >> 31);
  if (v16 == v15)
  {
    v17 = *((int *)this + 85);
    if ((v17 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 43) + 8 * v17) = 0;
        v5 = __CFADD__(v17++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v16)
    {
      v18 = (void *)operator new[]();
      bzero(v18, 8 * v16);
    }
    else
    {
      v18 = 0;
    }
    v19 = *((_QWORD *)this + 43);
    if (v19)
      MEMORY[0x1B5E2914C](v19, 0x1000C8077774924);
    *((_QWORD *)this + 43) = v18;
  }
  *((_DWORD *)this + 84) = v16;
  *((_DWORD *)this + 85) = 0;
  v20 = *((_QWORD *)this + 43);
  if (v20)
    MEMORY[0x1B5E2914C](v20, 0x1000C8077774924);
  *((_QWORD *)this + 43) = 0;
  *((_DWORD *)this + 84) = 0;
  for (i = 312; i != 88; i -= 112)
  {
    v22 = *(void **)((char *)this + i - 8);
    if (v22)
    {
      *(_QWORD *)((char *)this + i) = v22;
      operator delete(v22);
    }
    v23 = *(void **)((char *)this + i - 32);
    if (v23)
    {
      *(_QWORD *)((char *)this + i - 24) = v23;
      operator delete(v23);
    }
    v24 = (char *)this + i;
    v25 = *(void **)((char *)this + i - 56);
    if (v25)
    {
      *((_QWORD *)v24 - 6) = v25;
      operator delete(v25);
    }
    v26 = (void *)*((_QWORD *)v24 - 10);
    if (v26)
    {
      *(_QWORD *)((char *)this + i - 72) = v26;
      operator delete(v26);
    }
  }
}

void LiDrawer::LiDrawer(LiDrawer *this)
{
  *(_QWORD *)this = off_1E656A800;
  *((_BYTE *)this + 8) = 1;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E656A9A8;
}

void LiDrawer::~LiDrawer(LiDrawer *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = off_1E656A800;
  *((_QWORD *)this + 3) = &unk_1E656A9F8;
  v2 = *((_DWORD *)this + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *((int *)this + 9);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*((_QWORD *)this + 5) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 5);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *((_QWORD *)this + 5) = v6;
  }
  *((_DWORD *)this + 8) = v3;
  *((_DWORD *)this + 9) = 0;
  v8 = *((_QWORD *)this + 5);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 8) = 0;
}

uint64_t PCPtrArray<LiSeam>::~PCPtrArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656A9F8;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LiDrawer::holdOut(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  LiMaskDrawer::LiMaskDrawer(v6, a1, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v6);
  return v6;
}

void sub_1B2CF6E98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C402E1910D9);
  _Unwind_Resume(a1);
}

void LiDrawer::dump(LiDrawer *this, const char **a2)
{
  const char *v3;
  size_t v4;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  const char *v12;

  if (*a2)
    v3 = *a2;
  else
    v3 = "";
  v4 = strlen(v3);
  v5 = (_QWORD *)MEMORY[0x1E0DE4A50];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v3, v4);
  (*(void (**)(const char **__return_ptr, LiDrawer *))(*(_QWORD *)this + 88))(&v12, this);
  if (v12)
    v6 = v12;
  else
    v6 = "";
  v7 = strlen(v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\n", 1);
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = (char *)(v12 - 12);
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2CF6FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    LiDrawer::dump(a10, (_BYTE **)&a10);
  _Unwind_Resume(exception_object);
}

BOOL LiDrawer::hasCompositeOrder(LiDrawer *this)
{
  return (*(uint64_t (**)(LiDrawer *))(*(_QWORD *)this + 72))(this) != 0;
}

uint64_t LiDrawer::compositeOrder(LiDrawer *this)
{
  uint64_t result;
  unsigned int v3;

  result = (*(uint64_t (**)(LiDrawer *))(*(_QWORD *)this + 72))(this);
  if (result)
  {
    v3 = *(_DWORD *)(result + 528);
    if (*((_BYTE *)this + 8))
      return v3;
    else
      return v3 ^ 0x7FFFFFFF;
  }
  return result;
}

uint64_t LiDrawer::compositeOrder2(LiDrawer *this)
{
  uint64_t result;
  uint64_t v3;

  result = (*(uint64_t (**)(LiDrawer *))(*(_QWORD *)this + 72))(this);
  if (result)
  {
    v3 = result;
    result = *(unsigned int *)(result + 532);
    if (*(_BYTE *)(v3 + 540))
    {
      if (*((_BYTE *)this + 8))
        return result;
      else
        return result ^ 0x7FFFFFFF;
    }
  }
  return result;
}

uint64_t LiDrawer::compositeOrder3(LiDrawer *this)
{
  uint64_t result;
  unsigned int v3;

  result = (*(uint64_t (**)(LiDrawer *))(*(_QWORD *)this + 72))(this);
  if (result)
  {
    v3 = *(_DWORD *)(result + 536);
    if (*((_BYTE *)this + 8))
      return v3;
    else
      return v3 ^ 0x7FFFFFFF;
  }
  return result;
}

double LiDrawer::getPlane@<D0>(LiDrawer *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  double result;

  if ((*(unsigned int (**)(LiDrawer *))(*(_QWORD *)this + 40))(this))
  {
    v4 = (*(uint64_t (**)(LiDrawer *))(*(_QWORD *)this + 32))(this);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

_QWORD *LiDrawer::getBox@<X0>(LiDrawer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  BOOL v27;
  double v28;
  double v29;
  double v30;

  v4 = (*(uint64_t (**)(LiDrawer *))(*(_QWORD *)this + 32))(this);
  result = (*(_QWORD *(**)(double *__return_ptr, LiDrawer *))(*(_QWORD *)this + 48))(&v28, this);
  v6 = *(uint64_t **)(v4 + 88);
  v7 = *v6;
  v8 = v6[1] - *v6;
  *(_OWORD *)(a2 + 16) = xmmword_1B304F270;
  *(_OWORD *)(a2 + 32) = xmmword_1B304F270;
  *(_OWORD *)a2 = xmmword_1B304F270;
  if ((int)(v8 >> 5) >= 1)
  {
    v9 = (v8 >> 5);
    v10 = (double *)(v7 + 8);
    v11 = -1.0;
    v12 = 1.0;
    v13 = 1.0;
    v14 = -1.0;
    v15 = 1.0;
    v16 = -1.0;
    do
    {
      v17 = *(v10 - 1);
      v18 = *v10;
      v19 = -(v30 + v17 * v28 + *v10 * v29);
      if (v12 >= v17)
        v20 = *(v10 - 1);
      else
        v20 = v12;
      if (v11 <= v17)
        v21 = *(v10 - 1);
      else
        v21 = v11;
      if (v13 >= v18)
        v22 = *v10;
      else
        v22 = v13;
      if (v14 <= v18)
        v23 = *v10;
      else
        v23 = v14;
      if (v15 >= v19)
        v24 = -(v30 + v17 * v28 + *v10 * v29);
      else
        v24 = v15;
      if (v16 <= v19)
        v25 = -(v30 + v17 * v28 + *v10 * v29);
      else
        v25 = v16;
      v27 = v12 <= v11 && v13 <= v14 && v15 <= v16;
      if (v27)
        v11 = v21;
      else
        v11 = *(v10 - 1);
      if (v27)
        v12 = v20;
      else
        v12 = *(v10 - 1);
      if (v27)
        v14 = v23;
      else
        v14 = *v10;
      if (v27)
        v13 = v22;
      else
        v13 = *v10;
      if (v27)
        v16 = v25;
      else
        v16 = -(v30 + v17 * v28 + *v10 * v29);
      if (v27)
        v15 = v24;
      else
        v15 = -(v30 + v17 * v28 + *v10 * v29);
      v10 += 4;
      --v9;
    }
    while (v9);
    *(double *)a2 = v12;
    *(double *)(a2 + 8) = v11;
    *(double *)(a2 + 16) = v13;
    *(double *)(a2 + 24) = v14;
    *(double *)(a2 + 32) = v15;
    *(double *)(a2 + 40) = v16;
  }
  return result;
}

uint64_t LiDrawer::farAway(LiDrawer *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(LiDrawer *))(*(_QWORD *)this + 72))(this);
  if (result)
    return *(_BYTE *)(result + 541) != 0;
  return result;
}

BOOL LiDrawer::filterIntersectionsWithDrawer(LiDrawer *this, LiDrawer *a2)
{
  int v3;

  v3 = (*(uint64_t (**)(LiDrawer *))(*(_QWORD *)this + 112))(this);
  return (int)((*(uint64_t (**)(LiDrawer *))(*(_QWORD *)a2 + 112))(a2) + v3) > 2;
}

uint64_t LiDrawer::parent(LiDrawer *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t LiDrawer::addIntersection(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 152))(v4, a2);
  v6 = *(_DWORD *)(a1 + 36);
  if (*(_DWORD *)(a1 + 32) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 32);
  result = PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(a1 + 24, v6 + 1, v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * *(int *)(a1 + 36) - 8) = a2;
  return result;
}

uint64_t LiDrawer::getIntersections(LiDrawer *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
  else
    return (uint64_t)this + 24;
}

void LiGroupDrawer::LiGroupDrawer(LiGroupDrawer *this)
{
  *((_BYTE *)this + 8) = 1;
  *((_DWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &unk_1E656A9A8;
  *(_QWORD *)this = &off_1E656A8B8;
  *((_QWORD *)this + 7) = &unk_1E656A790;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_BYTE *)this + 112) = 0;
  LiPolygon::LiPolygon((LiGroupDrawer *)((char *)this + 120));
  *((_DWORD *)this + 56) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 46) = 0x3FF0000000000000;
  *((_QWORD *)this + 41) = 0x3FF0000000000000;
  *((_QWORD *)this + 36) = 0x3FF0000000000000;
  *((_QWORD *)this + 31) = 0x3FF0000000000000;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
}

void sub_1B2CF73FC(_Unwind_Exception *a1)
{
  LiDrawer *v1;
  uint64_t v2;

  PCPtrArray<LiDrawer>::~PCPtrArray(v2);
  LiDrawer::~LiDrawer(v1);
  _Unwind_Resume(a1);
}

void LiGroupDrawer::~LiGroupDrawer(LiGroupDrawer *this)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E656A8B8;
  v2 = *((_QWORD *)this + 29);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  LiPolygon::~LiPolygon((LiGroupDrawer *)((char *)this + 120));
  *((_QWORD *)this + 7) = &unk_1E656A7E0;
  v3 = *((_DWORD *)this + 16);
  if (v3 < 0)
    v4 = 1;
  else
    v4 = v3 & ~(v3 >> 31);
  if (v4 == v3)
  {
    v5 = *((int *)this + 17);
    if ((v5 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v5) = 0;
      while (!__CFADD__(v5++, 1));
    }
  }
  else
  {
    if (v4)
    {
      v7 = (void *)operator new[]();
      bzero(v7, 8 * v4);
    }
    else
    {
      v7 = 0;
    }
    v8 = *((_QWORD *)this + 9);
    if (v8)
      MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
    *((_QWORD *)this + 9) = v7;
  }
  *((_DWORD *)this + 16) = v4;
  *((_DWORD *)this + 17) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    MEMORY[0x1B5E2914C](v9, 0x1000C8077774924);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  LiDrawer::~LiDrawer(this);
}

{
  LiGroupDrawer::~LiGroupDrawer(this);
  JUMPOUT(0x1B5E29170);
}

unsigned int *LiGroupDrawer::draw(unsigned int *this, LiBlender *a2)
{
  uint64_t v2;
  unsigned int *v4;
  signed int v5;
  uint64_t v6;

  v2 = this[17];
  if ((int)v2 >= 1)
  {
    v4 = this;
    do
    {
      v5 = v2 - 1;
      if ((_DWORD)v2 - 1 < 0 || (int)v4[17] <= v5)
        PCArray_base::badIndex((PCArray_base *)this);
      v6 = *(_QWORD *)(*((_QWORD *)v4 + 9) + 8 * v5);
      this = (unsigned int *)(*(uint64_t (**)(uint64_t, LiBlender *))(*(_QWORD *)v6 + 16))(v6, a2);
      --v2;
    }
    while (v2);
  }
  return this;
}

uint64_t LiGroupDrawer::add(LiGroupDrawer *this, LiDrawer *a2)
{
  char *v4;
  int v5;
  int v6;
  int v7;
  uint64_t result;

  v4 = (char *)this + 56;
  v5 = *((_DWORD *)this + 17);
  if (*((_DWORD *)this + 16) <= v5)
    v6 = (2 * (v5 + 1)) | 1;
  else
    v6 = *((_DWORD *)this + 16);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)v4, v5 + 1, v6);
  *(_QWORD *)(*((_QWORD *)this + 9) + 8 * *((int *)this + 17) - 8) = a2;
  *((_BYTE *)this + 112) = 0;
  v7 = *((_DWORD *)this + 56);
  if (v7 <= (*(int (**)(LiDrawer *))(*(_QWORD *)a2 + 112))(a2))
    result = (*(uint64_t (**)(LiDrawer *))(*(_QWORD *)a2 + 112))(a2);
  else
    result = *((unsigned int *)this + 56);
  *((_DWORD *)this + 56) = result;
  return result;
}

uint64_t LiGroupDrawer::add(PCArray_base *a1, uint64_t a2)
{
  PCArray_base *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  int v7;
  uint64_t result;

  v3 = a1;
  v4 = *(unsigned int *)(a2 + 12);
  if ((int)v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if (i >= *(int *)(a2 + 12))
        PCArray_base::badIndex(a1);
      v6 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8 * i);
      v7 = *((_DWORD *)v3 + 56);
      if (v7 <= (*(int (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6))
        a1 = (PCArray_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6);
      else
        a1 = (PCArray_base *)*((unsigned int *)v3 + 56);
      *((_DWORD *)v3 + 56) = (_DWORD)a1;
    }
  }
  result = PCArray<LiDrawer *,PCArray_Traits_Zero<LiDrawer *>>::append((uint64_t)v3 + 56, a2);
  *((_BYTE *)v3 + 112) = 0;
  return result;
}

uint64_t LiGroupDrawer::prepareToAdd(LiGroupDrawer *this, int a2)
{
  return PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)this + 56, *((_DWORD *)this + 17), *((_DWORD *)this + 17) + a2);
}

uint64_t LiGroupDrawer::getBounds(LiGroupDrawer *this)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  float64x2_t v12[2];
  float64x2_t v13[2];

  if (!*((_BYTE *)this + 112))
  {
    v13[0] = 0uLL;
    __asm { FMOV            V0.2D, #-1.0 }
    v13[1] = _Q0;
    v12[0] = 0uLL;
    v12[1] = _Q0;
    v7 = *((unsigned int *)this + 17);
    if ((int)v7 >= 1)
    {
      for (i = 0; i != v7; ++i)
      {
        if (i >= *((int *)this + 17))
          PCArray_base::badIndex(this);
        v9 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * i);
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
        bounds<LiPolygon::PosFacet,double>(v10 + 88, (uint64_t)v12);
        PCRect<double>::operator|=(v13, v12);
      }
    }
    LiPolygon::set((uint64_t)this + 120, v13[0].f64);
    *((_BYTE *)this + 112) = 1;
    LiGroupDrawer::projectBoundsToPlane((float64x2_t *)this);
  }
  return (uint64_t)this + 120;
}

void bounds<LiPolygon::PosFacet,double>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v10;
  uint64_t v11;
  float64x2_t v12;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 16) = _Q0;
  if ((int)(v2 >> 5) >= 1)
  {
    v10 = 0;
    v11 = v2 & 0x1FFFFFFFE0;
    do
    {
      v12 = *(float64x2_t *)(**(_QWORD **)a1 + v10);
      PCRect<double>::operator|=((float64x2_t *)a2, &v12);
      v10 += 32;
    }
    while (v11 != v10);
  }
}

void LiGroupDrawer::projectBoundsToPlane(float64x2_t *this)
{
  double v2[3];

  if ((*(unsigned int (**)(float64x2_t *))(*(_QWORD *)&this->f64[0] + 40))(this))
  {
    if (((*(_QWORD *)&this[12].f64[0] - *(_QWORD *)&this[11].f64[1]) & 0x1FFFFFFFE0) != 0)
    {
      v2[0] = 0.0;
      v2[1] = 0.0;
      v2[2] = 1.0;
      LiPolygon::projectToPlane((uint64_t)&this[7].f64[1], this + 5, v2);
    }
  }
}

BOOL LiGroupDrawer::isPlanar(LiGroupDrawer *this)
{
  return fabs(*((double *)this + 10)) >= 0.0000001
      || fabs(*((double *)this + 11)) >= 0.0000001
      || fabs(*((double *)this + 12)) >= 0.0000001
      || fabs(*((double *)this + 13)) >= 0.0000001;
}

__n128 LiGroupDrawer::getPlane@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;

  result = this[5];
  v3 = this[6];
  *a2 = result;
  a2[1] = v3;
  return result;
}

void LiGroupDrawer::stackSort(LiGroupDrawer *this)
{
  LiDepthSorter::stackSort((uint64_t)this + 56);
}

void LiGroupDrawer::setPlane(float64x2_t *this, float64x2_t *a2)
{
  float64x2_t v2;

  v2 = a2[1];
  this[5] = *a2;
  this[6] = v2;
  LiGroupDrawer::projectBoundsToPlane(this);
}

uint64_t LiGroupDrawer::setSceneObject(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t LiGroupDrawer::getSceneObject(LiGroupDrawer *this)
{
  return *((_QWORD *)this + 6);
}

void LiGroupDrawer::intersect(LiGroupDrawer *this, LiIntersection *a2)
{
  uint64_t v4;
  PCArray_base *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t *v44;
  _OWORD *v45;
  _QWORD v46[2];
  uint64_t v47;
  char v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = *((_QWORD *)this + 30);
  if (v4)
  {
    (*(void (**)(uint64_t, LiIntersection *))(*(_QWORD *)v4 + 80))(v4, a2);
  }
  else
  {
    LiPlaneSplit::LiPlaneSplit((LiPlaneSplit *)v46);
    v6 = *(_QWORD *)a2;
    v48 = 0;
    v46[0] = *((_QWORD *)a2 + 4);
    v46[1] = v6;
    v7 = *((unsigned int *)this + 17);
    if ((int)v7 >= 1)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        if (v8 >= *((int *)this + 17))
          PCArray_base::badIndex(v5);
        v47 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v8);
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v47 + 56))(v47, (char *)this + 80);
        LiPlaneSplit::compute((LiPlaneSplit *)v46);
        if (!((v49 != 3) | v9 & 1))
        {
          v17 = (*(uint64_t (**)(LiGroupDrawer *))(*(_QWORD *)this + 128))(this);
          if (PCBlend::isAssociative(v17))
          {
            LiGroupDrawer::makePrecomp(this, v17, *((_QWORD *)a2 + 4));
            (*(void (**)(_QWORD, LiIntersection *))(**((_QWORD **)this + 30) + 80))(*((_QWORD *)this + 30), a2);
            goto LABEL_50;
          }
          v9 = 1;
        }
        v5 = (PCArray_base *)LiPlaneSplit::store((LiPlaneSplit *)v46, v10, v11, v12, v13, v14, v15, v16);
        ++v8;
      }
      while (v7 != v8);
    }
    v18 = 0;
    v45 = (_OWORD *)((char *)this + 80);
    v19 = 1;
    do
    {
      v20 = v19;
      if (v18 >= *((int *)a2 + 5))
        PCArray_base::badIndex(v5);
      if ((v19 & 1) != 0)
        v21 = 340;
      else
        v21 = 364;
      v22 = *(_DWORD *)((char *)v46 + v21);
      if (v22)
      {
        v23 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * v18);
        if (v22 == 1)
        {
          v24 = 46;
          if ((v20 & 1) != 0)
            v24 = 43;
          v25 = *(_QWORD *)v46[v24];
          *(_QWORD *)(v23 + 8) = v25;
          v5 = (PCArray_base *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v25 + 56))(v25, v45);
        }
        else
        {
          v26 = operator new();
          LiGroupDrawer::LiGroupDrawer((LiGroupDrawer *)v26);
          *(_QWORD *)(v26 + 16) = this;
          *(_QWORD *)(v26 + 48) = *((_QWORD *)this + 6);
          v27 = *((_OWORD *)this + 6);
          *(_OWORD *)(v26 + 80) = *v45;
          *(_OWORD *)(v26 + 96) = v27;
          if ((LiGroupDrawer *)v26 != this)
          {
            v28 = *(_OWORD *)((char *)this + 312);
            v29 = *(_OWORD *)((char *)this + 344);
            v30 = *(_OWORD *)((char *)this + 360);
            *(_OWORD *)(v26 + 328) = *(_OWORD *)((char *)this + 328);
            *(_OWORD *)(v26 + 344) = v29;
            *(_OWORD *)(v26 + 360) = v30;
            v31 = *(_OWORD *)((char *)this + 264);
            *(_OWORD *)(v26 + 248) = *(_OWORD *)((char *)this + 248);
            v32 = *(_OWORD *)((char *)this + 280);
            v33 = *(_OWORD *)((char *)this + 296);
            *(_OWORD *)(v26 + 264) = v31;
            *(_OWORD *)(v26 + 280) = v32;
            *(_OWORD *)(v26 + 296) = v33;
            *(_OWORD *)(v26 + 312) = v28;
          }
          v34 = *(_DWORD *)(v26 + 64);
          if (v34 < 0)
            v35 = 1;
          else
            v35 = v34 & ~(v34 >> 31);
          if (v35 == v34)
          {
            v36 = *(int *)(v26 + 68);
            if ((v36 & 0x80000000) != 0)
            {
              do
                *(_QWORD *)(*(_QWORD *)(v26 + 72) + 8 * v36) = 0;
              while (!__CFADD__(v36++, 1));
            }
          }
          else
          {
            if (v35)
            {
              v38 = (void *)operator new[]();
              bzero(v38, 8 * v35);
            }
            else
            {
              v38 = 0;
            }
            v39 = *(_QWORD *)(v26 + 72);
            if (v39)
              MEMORY[0x1B5E2914C](v39, 0x1000C8077774924);
            *(_QWORD *)(v26 + 72) = v38;
          }
          *(_DWORD *)(v26 + 64) = v35;
          *(_DWORD *)(v26 + 68) = 0;
          v40 = *(_QWORD *)(v26 + 72);
          if (v40)
            MEMORY[0x1B5E2914C](v40, 0x1000C8077774924);
          v41 = 45;
          if ((v20 & 1) != 0)
            v41 = 42;
          v42 = &v50;
          if ((v20 & 1) == 0)
            v42 = &v52;
          v43 = *(_DWORD *)((char *)v46 + v21);
          *(_DWORD *)(v26 + 64) = v46[v41];
          *(_DWORD *)(v26 + 68) = v43;
          v44 = &v51;
          if ((v20 & 1) == 0)
            v44 = &v53;
          *(_QWORD *)(v26 + 72) = *v44;
          *v42 = 0;
          v42[1] = 0;
          *(_QWORD *)(v23 + 8) = v26;
          v5 = (PCArray_base *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 4) + 16))(*((_QWORD *)a2 + 4), v26);
        }
      }
      v19 = 0;
      v18 = 1;
    }
    while ((v20 & 1) != 0);
LABEL_50:
    LiPlaneSplit::~LiPlaneSplit((LiPlaneSplit *)v46);
  }
}

void sub_1B2CF7CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  LiPlaneSplit::~LiPlaneSplit((LiPlaneSplit *)va);
  _Unwind_Resume(a1);
}

uint64_t LiGroupDrawer::makePrecomp(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  LiBlender *v6;
  float v7;
  FxColorDescription *v8;
  const FxColorDescription *v9;
  LiMultiBlender *Blender;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = (LiBlender *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
  v7 = (*(float (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
  v8 = (FxColorDescription *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 40))(a3);
  Blender = LiBlender::makeBlender(v6, v8, v7, v9);
  (*(void (**)(_QWORD *, LiMultiBlender *))(*a1 + 16))(a1, Blender);
  (*(void (**)(uint64_t *__return_ptr, LiMultiBlender *))(*(_QWORD *)Blender + 24))(&v16, Blender);
  v11 = a1[29];
  v12 = v16;
  if (v11 == v16)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  }
  else
  {
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
      v12 = v16;
    }
    a1[29] = v12;
  }
  (*(void (**)(LiMultiBlender *))(*(_QWORD *)Blender + 8))(Blender);
  v13 = operator new();
  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  LiNodeDrawer::LiNodeDrawer(v13, a1 + 29, v14, a2, 0, a1, 1.0);
  a1[30] = v13;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 56))(v13, a1 + 10);
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 16))(a3, a1[30]);
}

void sub_1B2CF7E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

void LiGroupDrawer::name(LiGroupDrawer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  BOOL v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE *v10;
  _BYTE *v11;
  unsigned int *v12;
  unsigned int v13;
  const void *v14;
  size_t v15;
  unsigned int *v16;
  _BYTE *v17;
  unsigned int v18;
  size_t v19;
  const void *v20;
  int v21;
  size_t v22;
  unsigned int *v23;
  unsigned int v24;
  size_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;

  LiString::LiString((LiString *)&v42, "group");
  v4 = (*(uint64_t (**)(LiGroupDrawer *))(*(_QWORD *)this + 72))(this);
  v5 = (_QWORD *)(v4 + 512);
  if (v4)
    v6 = v5 == &v42;
  else
    v6 = 1;
  if (!v6)
  {
    if (v42)
    {
      v7 = (unsigned int *)(v42 - 12);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        *v42 = 0;
        if (v42)
          v10 = v42 - 12;
        else
          v10 = 0;
        free(v10);
      }
    }
    v11 = (_BYTE *)*v5;
    v42 = v11;
    if (!v11)
    {
      v14 = 0;
      goto LABEL_20;
    }
    v12 = (unsigned int *)(v11 - 12);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  v14 = v42;
  if (v42)
    LODWORD(v11) = *((_DWORD *)v42 - 2);
  else
    LODWORD(v11) = 0;
LABEL_20:
  v15 = (int)v11;
  v16 = (unsigned int *)malloc_type_malloc((int)v11 + 15, 0x8903763CuLL);
  v16[1] = v15 + 2;
  v16[2] = v15 + 3;
  atomic_store(1u, v16);
  v17 = v16 + 3;
  atomic_store(0, v16);
  memcpy(v16 + 3, v14, v15);
  *(_WORD *)&v17[v15] = 23328;
  v17[v15 + 2] = 0;
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 + 1, v16));
  LiString::format((LiString *)*((unsigned int *)this + 17), (LiString *)&v41);
  v19 = (int)v16[1];
  v20 = v41;
  if (v41)
    v21 = *((_DWORD *)v41 - 2);
  else
    v21 = 0;
  v22 = v19 + v21;
  v23 = (unsigned int *)malloc_type_malloc(v22 + 13, 0x8903763CuLL);
  v23[1] = v22;
  v23[2] = v22 + 1;
  atomic_store(1u, v23);
  atomic_store(0, v23);
  memcpy(v23 + 3, v17, v19);
  memcpy((char *)v23 + v19 + 12, v20, v21);
  *((_BYTE *)v23 + v22 + 12) = 0;
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  v25 = (int)v23[1];
  v26 = (unsigned int *)malloc_type_malloc(v25 + 14, 0x8903763CuLL);
  v26[1] = v25 + 1;
  v26[2] = v25 + 2;
  atomic_store(1u, v26);
  v27 = v26 + 3;
  atomic_store(0, v26);
  memcpy(v26 + 3, v23 + 3, v25);
  *((_BYTE *)v27 + v25) = 93;
  *((_BYTE *)v27 + v25 + 1) = 0;
  *a2 = v26 + 3;
  do
    v28 = __ldaxr(v26);
  while (__stlxr(v28 + 1, v26));
  do
  {
    v29 = __ldaxr(v23);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v23));
  if (!v30)
    free(v23);
  if (v41)
  {
    v31 = (unsigned int *)(v41 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *v41 = 0;
      if (v41)
        v34 = v41 - 12;
      else
        v34 = 0;
      free(v34);
    }
  }
  do
  {
    v35 = __ldaxr(v16);
    v36 = v35 - 1;
  }
  while (__stlxr(v36, v16));
  if (!v36)
    free(v16);
  if (v42)
  {
    v37 = (unsigned int *)(v42 - 12);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while (__stlxr(v39, v37));
    if (!v39)
    {
      *v42 = 0;
      if (v42)
        v40 = v42 - 12;
      else
        v40 = 0;
      free(v40);
    }
  }
}

void sub_1B2CF81A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  do
  {
    v13 = __ldaxr(v11);
    v14 = v13 - 1;
  }
  while (__stlxr(v14, v11));
  if (!v14)
    free(v11);
  if (a9)
  {
    v15 = (unsigned int *)(a9 - 12);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  do
  {
    v18 = __ldaxr(v10);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v10));
  if (!v19)
    free(v10);
  if (a10)
  {
    v20 = (unsigned int *)(a10 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void LiGroupDrawer::dump(LiGroupDrawer *this, const char **a2)
{
  const char *v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  PCArray_base *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _BYTE *v17;
  _BYTE *v18;

  LiDrawer::dump(this, a2);
  v4 = *a2;
  if (v4)
    v5 = *((_DWORD *)v4 - 2);
  else
    v5 = 0;
  v6 = v5 + 2;
  v7 = (unsigned int *)malloc_type_malloc(v5 + 15, 0x8903763CuLL);
  v7[1] = v6;
  v7[2] = v5 + 3;
  atomic_store(1u, v7);
  v8 = v7 + 3;
  atomic_store(0, v7);
  v9 = (PCArray_base *)memcpy(v7 + 3, v4, v5);
  *(_WORD *)((char *)v8 + v5) = 8224;
  *((_BYTE *)v8 + v6) = 0;
  v18 = v7 + 3;
  do
    v10 = __ldaxr(v7);
  while (__stlxr(v10 + 1, v7));
  v11 = *((unsigned int *)this + 17);
  if ((int)v11 >= 1)
  {
    for (i = 0; i != v11; ++i)
    {
      if (i >= *((int *)this + 17))
        PCArray_base::badIndex(v9);
      v13 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * i);
      v9 = (PCArray_base *)(*(uint64_t (**)(uint64_t, _BYTE **))(*(_QWORD *)v13 + 96))(v13, &v18);
    }
  }
  if (v18)
  {
    v14 = (unsigned int *)(v18 - 12);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      *v18 = 0;
      if (v18)
        v17 = v18 - 12;
      else
        v17 = 0;
      free(v17);
    }
  }
}

void sub_1B2CF83B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    LiDrawer::dump(a10, (_BYTE **)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t LiGroupDrawer::getBlendMode(LiGroupDrawer *this)
{
  uint64_t v1;
  LiGroupDrawer *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  LiGroupDrawer *v6;
  BOOL v7;

  v1 = *((unsigned int *)this + 17);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = 0;
    v4 = 48;
    while (1)
    {
      if (v3 >= *((int *)v2 + 17))
        PCArray_base::badIndex(this);
      v5 = *(_QWORD *)(*((_QWORD *)v2 + 9) + 8 * v3);
      this = (LiGroupDrawer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 128))(v5);
      if ((_DWORD)this == 48)
      {
        v6 = (LiGroupDrawer *)v4;
      }
      else
      {
        v6 = this;
        this = (LiGroupDrawer *)PCBlend::isAssociative((int)this);
        if (!(_DWORD)this)
          return 34;
        if ((_DWORD)v4 != 48)
        {
          v7 = (_DWORD)v6 == (_DWORD)v4;
          v6 = (LiGroupDrawer *)v4;
          if (!v7)
            return 34;
        }
      }
      ++v3;
      v4 = (uint64_t)v6;
      if (v1 == v3)
        return (uint64_t)v6;
    }
  }
  return 48;
}

uint64_t LiGroupDrawer::size(LiGroupDrawer *this)
{
  return *((unsigned int *)this + 17);
}

uint64_t LiGroupDrawer::defocus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 68);
  if (!v3)
    return 0;
  if (v3 <= 0)
    PCArray_base::badIndex((PCArray_base *)a1);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(***(_QWORD ***)(a1 + 72) + 136))(**(_QWORD **)(a1 + 72), a2, a3);
}

uint64_t LiGroupDrawer::getFilterIntersections(LiGroupDrawer *this)
{
  return *((unsigned int *)this + 56);
}

void PCPtrArray<LiSeam>::~PCPtrArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656A9F8;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void LiDrawer::dump(uint64_t a1, _BYTE **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;

  v2 = (unsigned int *)(a1 - 12);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    v5 = (void *)OUTLINED_FUNCTION_0_6(a1, a2);
    free(v5);
  }
}

void LiSolidRenderer::LiSolidRenderer(LiSolidRenderer *this)
{
  uint64_t v7;

  *((_QWORD *)this + 11) = 0x3FF0000000000000;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *(_QWORD *)this = &off_1E656AA18;
  *((_QWORD *)this + 1) = 0x3FF0000000000000;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_QWORD *)this + 22) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 8) = _Q1;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 48) = 0x3FF0000000000000;
  *((_QWORD *)this + 43) = 0x3FF0000000000000;
  *((_QWORD *)this + 38) = 0x3FF0000000000000;
  *((_OWORD *)this + 16) = _Q1;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_BYTE *)this + 392) = 1;
  *(_OWORD *)((char *)this + 396) = 0u;
  *(_OWORD *)((char *)this + 412) = 0u;
  *((_DWORD *)this + 107) = 0;
  *((_BYTE *)this + 432) = 1;
  *((_DWORD *)this + 109) = 0;
  *((_QWORD *)this + 55) = 5;
  *((_BYTE *)this + 448) = 0;
  *((_BYTE *)this + 460) = 0;
  *((_DWORD *)this + 114) = 0;
  LiClipSet::LiClipSet((LiSolidRenderer *)((char *)this + 464));
  *((_QWORD *)this + 64) = -1;
  *((_BYTE *)this + 520) = 0;
  *((_DWORD *)this + 131) = 0;
  *((_QWORD *)this + 66) = &unk_1E656AAC8;
  *((_QWORD *)this + 68) = 0;
  *((_QWORD *)this + 67) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 69);
  LiDofInfo::LiDofInfo((LiSolidRenderer *)((char *)this + 560));
  *((_BYTE *)this + 636) = 0;
  *((_QWORD *)this + 95) = 0x3FF0000000000000;
  *((_QWORD *)this + 90) = 0x3FF0000000000000;
  *((_QWORD *)this + 85) = 0x3FF0000000000000;
  *((_QWORD *)this + 80) = 0x3FF0000000000000;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *((_DWORD *)this + 192) = 0;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  if (LiSolidRenderer::LiSolidRenderer(void)::sGlobalsOnce != -1)
    dispatch_once(&LiSolidRenderer::LiSolidRenderer(void)::sGlobalsOnce, &__block_literal_global_66);
  *((_BYTE *)this + 458) = gSeamlessCubeMap;
}

void sub_1B2CF87BC(_Unwind_Exception *a1)
{
  LiClipSet *v1;
  uint64_t v2;

  PCArray<PCPtr<LiMaterialFilter>,PCArray_Traits<PCPtr<LiMaterialFilter>>>::~PCArray(v2);
  LiClipSet::~LiClipSet(v1);
  _Unwind_Resume(a1);
}

void LiSolidDofInfo::LiSolidDofInfo(LiSolidDofInfo *this)
{
  uint64_t v1;

  LiDofInfo::LiDofInfo(this);
  *(_BYTE *)(v1 + 76) = 0;
  *(_QWORD *)(v1 + 200) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(v1 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 168) = 0u;
  *(_OWORD *)(v1 + 184) = 0u;
}

void sub_1B2CF89C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v9;
  va_list va;

  va_start(va, a6);
  if (a6)
  {
    p_shared_owners = (unint64_t *)&a6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))a6->__on_zero_shared)(a6);
      std::__shared_weak_count::__release_weak(a6);
    }
  }
  ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)va);
  ProGL::GL::~GL((ProGL::GL *)(v6 - 72));
  _Unwind_Resume(a1);
}

uint64_t PCArray<PCPtr<LiMaterialFilter>,PCArray_Traits<PCPtr<LiMaterialFilter>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656AAC8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void LiSolidRenderer::~LiSolidRenderer(LiSolidRenderer *this)
{
  char *v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E656AA18;
  v2 = (char *)this + 528;
  *((_QWORD *)this + 66) = &unk_1E656AAC8;
  if (*((int *)this + 134) < 0)
    v3 = 1;
  else
    v3 = *((_DWORD *)this + 134);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v2, 0, v3);
  v4 = *((_QWORD *)this + 68);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *((_QWORD *)this + 68) = 0;
  *((_DWORD *)this + 134) = 0;
  LiClipSet::~LiClipSet((LiSolidRenderer *)((char *)this + 464));
}

{
  LiSolidRenderer::~LiSolidRenderer(this);
  JUMPOUT(0x1B5E29170);
}

void LiSolidRenderer::depthBlur(LiSolidRenderer *this, ProGL::GL *a2, const LiSolidDofInfo *a3, LiSolidDofInfo *a4, unsigned int a5, GLsizei width, GLsizei height)
{
  LiSolidUtils::depthBlur(a2, a3, a4, a5, width, height);
}

void LiSolidRenderer::setupTile(LiSolidRenderer *this, int a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  GLfloat v16;
  GLfloat v17;
  GLfloat v18;
  GLfloat v19;
  double v20;
  double v21;
  double v22;
  __int128 v23;
  __int128 v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  ProGL::GL *v28;
  double v29;
  double v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[40];

  ProGL::GL::GL((ProGL::GL *)v39);
  v16 = *((double *)this + 50);
  v17 = *((double *)this + 51);
  v18 = *((double *)this + 52);
  v19 = *((double *)this + 53);
  glClearColor(v16, v17, v18, v19);
  glDepthMask(1u);
  glClear(0x4100u);
  v20 = (double)a8 + (double)a8;
  v21 = v20 + (double)a4;
  v22 = v20 + (double)a5;
  glViewport(0, 0, (int)v21, (int)v22);
  v23 = *(_OWORD *)((char *)this + 88);
  v35 = *(_OWORD *)((char *)this + 72);
  v36 = v23;
  v24 = *(_OWORD *)((char *)this + 120);
  v37 = *(_OWORD *)((char *)this + 104);
  v38 = v24;
  v25 = *(float64x2_t *)((char *)this + 24);
  v31 = *(float64x2_t *)((char *)this + 8);
  v32 = v25;
  v27 = *(float64x2_t *)((char *)this + 56);
  v33 = *(float64x2_t *)((char *)this + 40);
  v26.f64[1] = v33.f64[1];
  v34 = v27;
  v26.f64[0] = 1.0 - 1.0 / ((double)a6 / (double)a4) - ((double)(a4 * a2) + (double)(a4 * a2)) / (double)a6;
  v29 = (double)a6 / v21;
  v30 = (double)a7 / v22;
  PCMatrix44Tmpl<double>::leftTranslate(&v31, v26, 1.0 - 1.0 / ((double)a7 / (double)a5) - ((double)(a5 * a3) + (double)(a5 * a3)) / (double)a7, 0.0);
  if (v29 != 1.0)
  {
    v31 = vmulq_n_f64(v31, v29);
    v32 = vmulq_n_f64(v32, v29);
  }
  if (v30 != 1.0)
  {
    v33 = vmulq_n_f64(v33, v30);
    v34 = vmulq_n_f64(v34, v30);
  }
  LiSolidUtils::getGLRenderer((LiSolidUtils *)v39, v28);
  ProGL::GL::~GL((ProGL::GL *)v39);
}

void sub_1B2CF8D50(_Unwind_Exception *a1)
{
  uint64_t v1;

  ProGL::GL::~GL((ProGL::GL *)(v1 - 152));
  _Unwind_Resume(a1);
}

void LiSolidRenderer::renderTile(LiSolidRenderer *this, LiSceneObject *a2, const LiTextureCoordinator *a3, unsigned int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, unsigned int a10, unsigned int a11)
{
  int v17;
  double *v18;
  uint64_t i;
  _OWORD *v20;
  __int128 v21;
  LiSolidRenderer *v22;
  LiSceneObject *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  double v29;
  _OWORD *v30;
  uint64_t j;
  uint64_t v32;
  _OWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  double *v36;
  float64x2_t v37;
  float64x2_t v38;
  GLenum v39;
  GLenum v40;
  int *v41;
  uint64_t *v42;
  char v43;
  ProGL::GL *v44;
  double v45[9];
  float64x2_t v46;
  double v47;
  double v48;
  int64x2_t v49;
  double v50;
  int64x2_t v51;
  _QWORD v52[9];
  _OWORD v53[6];
  __int128 v54;
  __int128 v55;
  _BYTE v56[472];
  int v57;
  char v58;
  char v59;
  char v60;
  _BYTE v61[256];
  __int128 v62;
  const LiTextureCoordinator *v63;
  _BYTE v64[40];
  GLint params[6];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  ProGL::GL::GL((ProGL::GL *)v64);
  if (*((_BYTE *)this + 432))
    (*(void (**)(LiSolidRenderer *, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, a6, a7, a8, a9, a10, a11, *((unsigned int *)this + 99));
  v17 = *((_DWORD *)this + 192);
  if (v17 == 49)
  {
    glEnable(0xBE2u);
    glBlendFunc(1u, 0x303u);
    glBlendEquation(0x8006u);
    goto LABEL_7;
  }
  if (v17 == 8)
  {
    glEnable(0xBE2u);
    glBlendFunc(1u, 1u);
LABEL_7:
    glDisable(0xB71u);
    goto LABEL_9;
  }
  glDisable(0xBE2u);
  glEnable(0xB71u);
  glDepthFunc(0x201u);
LABEL_9:
  LiSceneDrawer::LiSceneDrawer((LiSceneDrawer *)v56);
  v59 = *((_BYTE *)this + 459);
  v18 = (double *)((char *)this + 136);
  if (v61 != (char *)this + 136)
  {
    for (i = 0; i != 16; i += 4)
    {
      v20 = &v61[i * 8];
      v21 = *(_OWORD *)&v18[i + 2];
      *v20 = *(_OWORD *)&v18[i];
      v20[1] = v21;
    }
  }
  v60 = *((_BYTE *)this + 460);
  glGetIntegerv(0xBA2u, params);
  v62 = *(_OWORD *)params;
  v22 = (LiSolidRenderer *)LiSceneDrawer::setIsolatedGroupToRender((uint64_t)v56, *((_QWORD *)this + 64));
  LiSolidRenderer::setupClipPlanes(v22, v23, (LiSolidRenderer *)((char *)this + 464));
  LiSolidRenderer::setupFilters((uint64_t)this);
  v24 = 0;
  v25 = *(_OWORD *)((char *)this + 120);
  v54 = *(_OWORD *)((char *)this + 104);
  v55 = v25;
  v26 = *(_OWORD *)((char *)this + 88);
  v53[4] = *(_OWORD *)((char *)this + 72);
  v53[5] = v26;
  v27 = *(_OWORD *)((char *)this + 24);
  v53[0] = *(_OWORD *)((char *)this + 8);
  v53[1] = v27;
  v28 = *(_OWORD *)((char *)this + 56);
  v53[2] = *(_OWORD *)((char *)this + 40);
  v53[3] = v28;
  v29 = 1.0
      / sqrt(*(double *)&v54 * *(double *)&v54+ *((double *)&v54 + 1) * *((double *)&v54 + 1)+ *(double *)&v55 * *(double *)&v55+ *((double *)&v55 + 1) * *((double *)&v55 + 1));
  v30 = v53;
  do
  {
    for (j = 0; j != 2; ++j)
      v30[j] = vmulq_n_f64((float64x2_t)v30[j], v29);
    ++v24;
    v30 += 2;
  }
  while (v24 != 4);
  v32 = 0;
  v52[0] = 0x3FF0000000000000;
  memset(&v52[1], 0, 24);
  v52[4] = 0x3FF0000000000000;
  memset(&v52[5], 0, 24);
  v33 = v53;
  v52[8] = 0x3FF0000000000000;
  do
  {
    v34 = &v52[v32];
    *(_OWORD *)v34 = *v33;
    v34[2] = *((_QWORD *)v33 + 2);
    v32 += 3;
    v33 += 2;
  }
  while (v32 != 9);
  v35 = 0;
  v45[0] = 1.0;
  memset(&v45[1], 0, 24);
  v45[4] = 1.0;
  memset(&v45[5], 0, 24);
  v45[8] = 1.0;
  do
  {
    v36 = &v45[v35];
    *(_OWORD *)v36 = *(_OWORD *)v18;
    v36[2] = v18[2];
    v35 += 3;
    v18 += 4;
  }
  while (v35 != 9);
  PCMatrix33Tmpl<double>::operator*((uint64_t)v52, v45, (uint64_t)&v46);
  *(_QWORD *)&v37.f64[0] = vdupq_laneq_s64(v51, 1).u64[0];
  v37.f64[1] = v50;
  *(_QWORD *)&v38.f64[0] = vdupq_laneq_s64(v49, 1).u64[0];
  v38.f64[1] = v48;
  if ((*((_BYTE *)this + 456) != 0) != v47 * (v48 * *(double *)v51.i64 - v50 * *(double *)v49.i64)
                                      + vaddvq_f64(vmulq_f64(v46, vsubq_f64(vmulq_f64((float64x2_t)v49, v37), vmulq_f64((float64x2_t)v51, v38)))) > 0.0)v39 = 2304;
  else
    v39 = 2305;
  glFrontFace(v39);
  if (*((int *)this + 138) > 0)
  {
    if (!*((_BYTE *)this + 456))
    {
      if (!*((_BYTE *)this + 520))
        goto LABEL_42;
      goto LABEL_32;
    }
LABEL_28:
    glDisable(0x8037u);
    glEnable(0xB44u);
    if (*((_BYTE *)this + 457))
      v40 = 1028;
    else
      v40 = 1029;
    goto LABEL_34;
  }
  if (*((_BYTE *)this + 456))
    goto LABEL_28;
  if (!*((_BYTE *)this + 520))
  {
    if (*((_DWORD *)this + 192) == 8)
    {
LABEL_42:
      glDisable(0xB44u);
      goto LABEL_35;
    }
    glEnable(0xB44u);
    glDisable(0x8037u);
    goto LABEL_33;
  }
LABEL_32:
  glEnable(0xB44u);
LABEL_33:
  v40 = 1029;
LABEL_34:
  glCullFace(v40);
LABEL_35:
  v41 = (int *)((char *)this + 552);
  v63 = a3;
  v57 = *((_DWORD *)this + 111);
  v42 = (uint64_t *)((char *)this + 520);
  if (v57 != 1 || *v41 > 1 || *(_BYTE *)v42)
    v43 = *((_BYTE *)this + 456);
  else
    v43 = 1;
  v58 = v43;
  LiSceneDrawer::beginRender(v56, (uint64_t)a2, (uint64_t)this + 464, (__int128 *)((char *)this + 776), v41, v42, (uint64_t)this + 528);
  glDisable(0xB71u);
  glDisable(0xB44u);
  LiSolidUtils::getGLRenderer((LiSolidUtils *)v64, v44);
  LiSceneDrawer::~LiSceneDrawer((LiSceneDrawer *)v56);
  ProGL::GL::~GL((ProGL::GL *)v64);
}

void sub_1B2CF91CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  uint64_t v53;

  LiSceneDrawer::~LiSceneDrawer((LiSceneDrawer *)&a53);
  ProGL::GL::~GL((ProGL::GL *)(v53 - 136));
  _Unwind_Resume(a1);
}

__CFString **LiSolidRenderer::setupClipPlanes(LiSolidRenderer *this, LiSceneObject *a2, const LiClipSet *a3)
{
  __CFString **result;
  ProShade::UniformData *v5;
  uint64_t v6;
  LiClipPlaneInfo *v7;
  PCArray_base *v8;

  result = (__CFString **)ProShade::UniformData::getCurrentContextUniformData(this);
  if (*((int *)a3 + 3) >= 1)
  {
    v5 = (ProShade::UniformData *)result;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (PCArray_base *)LiClipPlaneInfo::get(v7);
      if ((uint64_t)v7 >= *((int *)a3 + 3))
        PCArray_base::badIndex(v8);
      result = ProShade::UniformData::set<PCVector4<double>>(v5, (uint64_t)v8, (const void *)(*((_QWORD *)a3 + 2) + v6));
      v7 = (LiClipPlaneInfo *)((char *)v7 + 1);
      v6 += 32;
    }
    while ((uint64_t)v7 < *((int *)a3 + 3));
  }
  return result;
}

uint64_t LiSolidRenderer::setupFilters(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(int *)(this + 540) >= 1)
  {
    v1 = this;
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(v1 + 544) + v2);
      if (!v4)
        throw_PCNullPointerException(1);
      this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v3++);
      v2 += 16;
    }
    while (v3 < *(int *)(v1 + 540));
  }
  return this;
}

void LiSolidRenderer::renderMultisampleTile(LiSolidRenderer *this, ProGL::GL *a2, LiSceneObject *a3, const LiTextureCoordinator *a4, ProGL::Framebuffer *a5, ProGL::Framebuffer *a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, GLuint a15, GLuint a16, BOOL a17)
{
  uint64_t RGBOperation;
  GLuint v23;
  GLuint v24;
  GLuint v25;

  ProGL::Framebuffer::bind(a5, a2, 0x8D40u);
  RGBOperation = HGGLBlendingInfo::GetRGBOperation(a5);
  (*(void (**)(LiSolidRenderer *, LiSceneObject *, const LiTextureCoordinator *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, unsigned int))(*(_QWORD *)this + 48))(this, a3, a4, RGBOperation, a16, a7, a8, a9, __PAIR64__(a13, a10), a14);
  ProGL::Framebuffer::bind(a6, a2, 0x8D40u);
  ProGL::Framebuffer::attach((uint64_t **)a6, a2, 0x8D40u, 0x8CE0u, 0xDE1u, a15, 0);
  if (*((_BYTE *)this + 636) || a17)
    ProGL::Framebuffer::attach((uint64_t **)a6, a2, 0x8D40u, 0x8D00u, 0xDE1u, a16, 0);
  v23 = HGGLBlendingInfo::GetRGBOperation(a5);
  glBindFramebuffer(0x8CA8u, v23);
  v24 = HGGLBlendingInfo::GetRGBOperation(a6);
  glBindFramebuffer(0x8CA9u, v24);
  v25 = HGGLBlendingInfo::GetRGBOperation(a5);
  glBindFramebuffer(0x8D40u, v25);
  ProGL::Framebuffer::detach(a6, a2, 0x8CE0u, 0xDE1u);
  ProGL::Framebuffer::detach(a6, a2, 0x8D00u, 0xDE1u);
}

uint64_t LiSolidRenderer::renderNonMultisampleTile(LiSolidRenderer *this, ProGL::GL *a2, LiSceneObject *a3, const LiTextureCoordinator *a4, ProGL::Framebuffer *a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, unsigned int a10, GLuint a11, GLuint a12, unsigned int a13, BOOL a14)
{
  uint64_t RGBOperation;

  ProGL::Framebuffer::bind(a5, a2, 0x8D40u);
  ProGL::Framebuffer::attach((uint64_t **)a5, a2, 0x8D40u, 0x8CE0u, 0xDE1u, a11, 0);
  ProGL::Framebuffer::attach((uint64_t **)a5, a2, 0x8D40u, 0x8D00u, 0xDE1u, a12, 0);
  RGBOperation = HGGLBlendingInfo::GetRGBOperation(a5);
  return (*(uint64_t (**)(LiSolidRenderer *, LiSceneObject *, const LiTextureCoordinator *, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)this + 48))(this, a3, a4, RGBOperation, a12, a6, a7, a8, a9);
}

void LiSolidRenderer::drawTile(LiSolidRenderer *this, unsigned int a2, unsigned int a3, int a4, int a5, unsigned int a6, unsigned int a7, GLuint a8)
{
  double v16;
  double v17;
  double v18;
  unsigned int v19;
  double v20;
  double v21;
  unsigned int v22;
  ProGL::GL *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE v29[40];

  ProGL::GL::GL((ProGL::GL *)v29);
  glDisable(0xBE2u);
  glDisable(0xB71u);
  glDisable(0xB44u);
  glUseProgram(0);
  glViewport(0, 0, a2, a3);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, a8);
  glEnable(0xDE1u);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glTexParameteri(0xDE1u, 0x2802u, 33071);
  glTexParameteri(0xDE1u, 0x2803u, 33071);
  v16 = (double)(a6 * a4) - (double)a2 * 0.5;
  v17 = (double)(a7 * a5) - (double)a3 * 0.5;
  v18 = v17 + (double)a7;
  *(float *)&v19 = v16;
  *(float *)&v17 = v17;
  v28 = __PAIR64__(LODWORD(v17), v19);
  v20 = v16 + (double)a6;
  *(float *)&v20 = v20;
  v27 = __PAIR64__(LODWORD(v17), LODWORD(v20));
  *(float *)&v17 = v18;
  v26 = __PAIR64__(LODWORD(v17), LODWORD(v20));
  v25 = __PAIR64__(LODWORD(v17), v19);
  LODWORD(v20) = *((_DWORD *)this + 99);
  v21 = (double)*(unint64_t *)&v20;
  *(float *)&v22 = v21 / (v21 + v21 + (double)a6);
  *(float *)&v21 = v21 / (v21 + v21 + (double)a7);
  v24 = __PAIR64__(LODWORD(v21), v22);
  LiSolidUtils::drawRect((uint64_t)v29, &v28, (uint64_t *)&v27, (uint64_t *)&v26, (uint64_t *)&v25, 33984, &v24);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, 0);
  glDisable(0xDE1u);
  LiSolidUtils::getGLRenderer((LiSolidUtils *)v29, v23);
  ProGL::GL::~GL((ProGL::GL *)v29);
}

void sub_1B2CF973C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void LiSolidRenderer::getFullSizePaddedTileSize(LiSolidRenderer *this, unsigned int *a2, unsigned int *a3, unsigned int a4, unsigned int a5)
{
  *a2 = a4;
  *a3 = a5;
}

void LiSolidRenderer::renderScene(LiSolidRenderer *this, ProGL::GL *a2, LiSceneObject *a3, const LiTextureCoordinator *a4, uint64_t a5, LiSceneObject *a6)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  LiSceneObject *v9;
  uint64_t v10;
  ProGL::GL *v13;
  LiSceneObject *v14;
  GLfloat v15;
  GLfloat v16;
  GLfloat v17;
  GLfloat v18;
  int v19;
  double v20;
  double v21;
  double v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  __int128 v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  GLuint Name;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  GLuint v53;
  HGGLBlendingInfo **v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int i;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  int v64;
  GLuint v65;
  uint64_t v66;
  GLuint v67;
  HGGLBlendingInfo *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  HGGLBlendingInfo **v87;
  unsigned int v88;
  int v89;
  HGGLBlendingInfo **v90;
  int v91;
  unsigned int v92;
  GLuint v93;
  char *v94;
  unsigned int v95;
  unsigned int v96;
  int v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char v105[8];
  std::__shared_weak_count *v106;
  _BYTE v107[48];
  GLint params[12];
  uint64_t v109;
  _OWORD v110[2];
  uint64_t v111;

  v9 = a6;
  v10 = a5;
  v111 = *MEMORY[0x1E0C80C00];
  if (!*((_BYTE *)this + 392))
  {
    params[0] = 0;
    ProGL::GL_Wrap::getIntegerv(a2, 0x8CA6u, params);
    *((_DWORD *)this + 138) = 0;
    v15 = *((double *)this + 50);
    v16 = *((double *)this + 51);
    v17 = *((double *)this + 52);
    v18 = *((double *)this + 53);
    glClearColor(v15, v16, v17, v18);
    glDepthMask(1u);
    glViewport(0, 0, v10, (GLsizei)v9);
    glClear(0x4100u);
    (*(void (**)(LiSolidRenderer *, LiSceneObject *, const LiTextureCoordinator *, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, unint64_t, _DWORD))(*(_QWORD *)this + 48))(this, a3, a4, params[0], 0, 0, 0, v10, __PAIR64__(v10, v9), (_DWORD)v9);
    return;
  }
  v109 = 0;
  (*(void (**)(LiSolidRenderer *, uint64_t, LiSceneObject *, char *, uint64_t *))(*(_QWORD *)this + 64))(this, a5, a6, (char *)&v109 + 4, &v109);
  LODWORD(v6) = HIDWORD(v109);
  LODWORD(v7) = v109;
  LODWORD(v8) = *((_DWORD *)this + 99);
  LiSolidRenderer::setupTransparency((uint64_t)this, v13, a3, a4);
  if (*((int *)this + 138) < 2)
    v14 = 0;
  else
    v14 = (LiSceneObject *)(*((_DWORD *)this + 111) != 1);
  v19 = *((_DWORD *)this + 109);
  ProGL::Framebuffer::Framebuffer((ProGL::Framebuffer *)params, a2);
  ProGL::Framebuffer::Framebuffer((ProGL::Framebuffer *)v107, a2);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v105);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v104);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v103);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v102);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v101);
  v20 = (double)v6;
  v21 = (double)v8 + (double)v8;
  v22 = (double)v7;
  v100 = 0;
  v95 = (v21 + v22);
  v96 = (v21 + v20);
  (*(void (**)(LiSolidRenderer *, char *, uint64_t *))(*(_QWORD *)this + 32))(this, (char *)&v100 + 4, &v100);
  if ((v14 & 1) == 0 && !*((_BYTE *)this + 636) && v19)
  {
    v93 = 0;
LABEL_36:
    LiSolidUtils::createMultisampleColorBuffer(a2, (ProGL::GL *)*((unsigned int *)this + 109), v96, v95, v110);
    v38 = v110[0];
    v110[0] = 0uLL;
    v39 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
    v102 = v38;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v42 = (std::__shared_weak_count *)*((_QWORD *)&v110[0] + 1);
    if (*((_QWORD *)&v110[0] + 1))
    {
      v43 = (unint64_t *)(*((_QWORD *)&v110[0] + 1) + 8);
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)&v102);
    LiSolidUtils::createMultisampleColorBuffer(a2, (ProGL::GL *)*((unsigned int *)this + 109), v96, v95, v110);
    v46 = v110[0];
    v110[0] = 0uLL;
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
    v101 = v46;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)*((_QWORD *)&v110[0] + 1);
    if (*((_QWORD *)&v110[0] + 1))
    {
      v51 = (unint64_t *)(*((_QWORD *)&v110[0] + 1) + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = ProGL::TextureHandle::getName((HGGLBlendingInfo **)&v101);
    ProGL::Framebuffer::bind((ProGL::Framebuffer *)params, a2, 0x8D40u);
    glFramebufferRenderbuffer(0x8D40u, 0x8CE0u, 0x8D41u, Name);
    glFramebufferRenderbuffer(0x8D40u, 0x8D00u, 0x8D41u, v53);
    goto LABEL_57;
  }
  LiSolidUtils::createRedTexture((PCWorkingColorVector *)v110);
  v23 = v110[0];
  v110[0] = 0uLL;
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  v104 = v23;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v110[0] + 1);
  if (*((_QWORD *)&v110[0] + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v110[0] + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v93 = ProGL::TextureHandle::getName((HGGLBlendingInfo **)&v104);
  if (v19)
    v30 = 0;
  else
    v30 = (int)v14;
  if (v30 == 1)
  {
    LiSolidUtils::createRedTexture((PCWorkingColorVector *)v110);
    v31 = v110[0];
    v110[0] = 0uLL;
    v32 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
    v103 = v31;
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    v35 = (std::__shared_weak_count *)*((_QWORD *)&v110[0] + 1);
    if (*((_QWORD *)&v110[0] + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v110[0] + 1) + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    v92 = ProGL::TextureHandle::getName((HGGLBlendingInfo **)&v103);
    goto LABEL_58;
  }
  if (v19)
    goto LABEL_36;
LABEL_57:
  v92 = 0;
LABEL_58:
  memset(v110, 0, sizeof(v110));
  v99 = v19;
  if (*((_BYTE *)this + 456) || !Multipass::multipassNeeded(a3, v14))
  {
    v54 = 0;
    v55 = 1;
  }
  else
  {
    v54 = (HGGLBlendingInfo **)operator new();
    Multipass::Multipass((Multipass *)v54, a2, (ProGL::GL *)HIDWORD(v109), v109, a3, (char)v14);
    Multipass::verifyShaders((Multipass *)v54);
    v55 = (2 * *((_DWORD *)v54 + 9)) | 1;
  }
  v86 = vcvtpd_u64_f64((double)v9 / v22);
  if (v86)
  {
    v56 = 0;
    v88 = vcvtpd_u64_f64((double)v10 / v20);
    v89 = v55;
    v94 = (char *)this + 560;
    v87 = v54 + 5;
    v91 = (int)v14;
    v90 = v54;
    do
    {
      if (v88)
      {
        v57 = 0;
        do
        {
          if (v55 >= 1)
          {
            for (i = 0; i != v55; ++i)
            {
              if (v54)
                Multipass::setupForPass((Multipass *)v54, i);
              if ((_DWORD)v14)
              {
                v59 = *((unsigned int *)this + 138);
                if ((int)v59 >= 1)
                {
                  v14 = v9;
                  v60 = v10;
                  v61 = 0;
                  v63 = v92;
                  v62 = v93;
                  v64 = v99;
                  do
                  {
                    *((_DWORD *)this + 139) = v61;
                    v65 = *((_DWORD *)v110 + v61);
                    if (v64)
                      LiSolidRenderer::renderMultisampleTile(this, a2, a3, a4, (ProGL::Framebuffer *)params, (ProGL::Framebuffer *)v107, v57, v56, HIDWORD(v109), v109, v84, HIDWORD(v84), v60, v14, v65, v62, 1);
                    else
                      LiSolidRenderer::renderNonMultisampleTile(this, a2, a3, a4, (ProGL::Framebuffer *)v107, v57, v56, HIDWORD(v109), __SPAIR64__(v60, v109), v14, v65, v62, v85, 0);
                    if (*((_BYTE *)this + 636))
                      (*(void (**)(LiSolidRenderer *, ProGL::GL *, char *, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, a2, v94, *((unsigned int *)v110 + v61), v62, v96, v95);
                    v64 = v99;
                    if (v99)
                      v66 = v62;
                    else
                      v66 = v63;
                    if (!v99)
                      v63 = v62;
                    ++v61;
                    v59 = *((int *)this + 138);
                    v62 = v66;
                  }
                  while (v61 < v59);
                  v10 = v60;
                  v9 = v14;
                  LODWORD(v14) = v91;
                  v54 = v90;
                  v55 = v89;
                }
                OZChannelBase::setRangeName((OZChannelBase *)a2, (const PCString *)v59);
              }
              else
              {
                if (v99 && !*((_BYTE *)this + 520))
                  LiSolidRenderer::renderMultisampleTile(this, a2, a3, a4, (ProGL::Framebuffer *)params, (ProGL::Framebuffer *)v107, v57, v56, HIDWORD(v109), v109, v84, HIDWORD(v84), v10, v9, 0, v93, 0);
                else
                  LiSolidRenderer::renderNonMultisampleTile(this, a2, a3, a4, (ProGL::Framebuffer *)v107, v57, v56, HIDWORD(v109), __SPAIR64__(v10, v109), v9, 0, v93, v85, 0);
                if (*((_BYTE *)this + 636))
                  (*(void (**)(LiSolidRenderer *, ProGL::GL *, char *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)this + 72))(this, a2, v94, 0, v93, v96, v95);
              }
              if (v54)
                Multipass::combine(v54);
            }
          }
          if (*((_BYTE *)this + 448))
            v67 = *((_DWORD *)this + 113);
          else
            v67 = 0;
          glBindFramebuffer(0x8D40u, v67);
          if (v54)
            v68 = ProGL::TextureHandle::getName(v87);
          else
            v68 = 0;
          (*(void (**)(LiSolidRenderer *, uint64_t, LiSceneObject *, uint64_t, uint64_t, _QWORD, _QWORD, HGGLBlendingInfo *))(*(_QWORD *)this + 56))(this, v10, v9, v57, v56, HIDWORD(v109), v109, v68);
          v57 = (v57 + 1);
        }
        while ((_DWORD)v57 != v88);
      }
      v56 = (v56 + 1);
    }
    while ((_DWORD)v56 != v86);
  }
  if (v54)
  {
    Multipass::~Multipass((Multipass *)v54);
    MEMORY[0x1B5E29170]();
  }
  v69 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v70 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v73 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  v75 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
  if (*((_QWORD *)&v103 + 1))
  {
    v76 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v104 + 1);
  if (*((_QWORD *)&v104 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v104 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  v81 = v106;
  if (v106)
  {
    v82 = (unint64_t *)&v106->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)v107);
  ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)params);
}

void sub_1B2CFA0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;

  v38 = v36;
  if (a2)
  {
    MEMORY[0x1B5E29170](v38, 0x10E0C4017AFA08ELL);
    if (a26)
    {
      p_shared_owners = (unint64_t *)&a26->__shared_owners_;
      do
        v41 = __ldaxr(p_shared_owners);
      while (__stlxr(v41 - 1, p_shared_owners));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))a26->__on_zero_shared)(a26);
        std::__shared_weak_count::__release_weak(a26);
      }
    }
    if (a28)
    {
      v42 = (unint64_t *)&a28->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))a28->__on_zero_shared)(a28);
        std::__shared_weak_count::__release_weak(a28);
      }
    }
    if (a30)
    {
      v44 = (unint64_t *)&a30->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))a30->__on_zero_shared)(a30);
        std::__shared_weak_count::__release_weak(a30);
      }
    }
    if (a32)
    {
      v46 = (unint64_t *)&a32->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))a32->__on_zero_shared)(a32);
        std::__shared_weak_count::__release_weak(a32);
      }
    }
    if (a35)
    {
      v48 = (unint64_t *)&a35->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))a35->__on_zero_shared)(a35);
        std::__shared_weak_count::__release_weak(a35);
      }
    }
    ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)&a36);
    ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)(v37 - 232));
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B2CFA0A8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LiSolidRenderer::setupTransparency(uint64_t this, ProGL::GL *a2, LiSceneObject *a3, const LiTextureCoordinator *a4)
{
  uint64_t v5;
  int v6;

  if (*(_DWORD *)(this + 440) >= 2u)
  {
    v5 = this;
    this = LiSolidUtils::anyTransparencyInScene((uint64_t)a3, a2);
    if ((_DWORD)this == 1 || *((_BYTE *)a4 + 8))
    {
      v6 = *(_DWORD *)(v5 + 440);
    }
    else
    {
      v6 = 0;
      if ((_DWORD)this == 2)
      {
        *(_BYTE *)(v5 + 520) = 1;
        *(_DWORD *)(v5 + 524) = *(_DWORD *)(v5 + 436);
      }
    }
    *(_DWORD *)(v5 + 552) = v6;
  }
  return this;
}

uint64_t Multipass::multipassNeeded(Multipass *this, LiSceneObject *a2)
{
  int v2;
  ProGL::GL *v4;
  double (*v5)(uint64_t);
  int v6;
  OZChannelBase *v7;
  double (*v8)(uint64_t);
  char v9;
  int v10;
  double (*v11)(uint64_t);
  int isObjectRef;
  uint64_t v13;
  double (*v14)(uint64_t);
  uint64_t v16;
  PCSharedCount v17;
  PCSharedCount v18;
  uint64_t v19;
  _BYTE v20[8];
  OZChannelBase *v21;
  uint64_t v22;
  char v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  GLint params;

  v2 = (int)a2;
  ProGL::GL::GL((ProGL::GL *)&v18);
  if (LiSolidUtils::getGLRenderer((LiSolidUtils *)&v18, v4) == 1)
  {
    LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v20, (uint64_t)this);
    while (1)
    {
      if (v21)
        v5 = LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::next;
      else
        v5 = 0;
      if (!v5)
      {
        LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v20);
        goto LABEL_10;
      }
      if (BYTE2(v21[6].var2))
        break;
      LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::operator++((uint64_t)v20);
    }
    LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v20);
    ProGL::GL::~GL((ProGL::GL *)&v18);
    v9 = 1;
  }
  else
  {
LABEL_10:
    ProGL::GL::~GL((ProGL::GL *)&v18);
    params = 0;
    glGetIntegerv(0x8872u, &params);
    v25 = 0;
    v26 = 0;
    v24 = &unk_1E64FC250;
    v27 = 0;
    LiSceneIterator<LiLight,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v20, (uint64_t)this);
    v6 = 0;
    v7 = v21;
    v8 = LiSceneIterator<LiLight,LiSceneIteratorAlways>::next;
    if (!v21)
      v8 = 0;
    if (v8 && v21)
    {
      v6 = 0;
LABEL_15:
      if (SHIDWORD(v25) <= 7)
        LiLightSet::add((uint64_t)&v24, (const LiLight *)v7);
      if ((LODWORD(v7[5].var12) - 1) <= 2)
        v6 += BYTE1(v7[6].var6);
      if (v21)
      {
        while (1)
        {
          LiSceneIterator<LiLight,LiSceneIteratorAlways>::next((uint64_t)v20);
          v7 = v21;
          if (!v21)
            break;
          if ((void (**)(LiLight *__hidden))v21->var0 == &off_1E657B040)
            goto LABEL_15;
        }
      }
    }
    LiSceneIterator<LiLight,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v20);
    LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v20, (uint64_t)this);
    v9 = 0;
    if (v6 <= 0)
      v10 = v6 + v2;
    else
      v10 = v6 + v2 + 1;
    while (1)
    {
      v11 = v21 ? LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::next : 0;
      if (!v11 || (v9 & 1) != 0)
        break;
      isObjectRef = OZChannelBase::isObjectRef(v21);
      v9 = v10 + isObjectRef > params;
      LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::operator++((uint64_t)v20);
    }
    LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v20);
    LiContext::LiContext((LiContext *)v20);
    v23 = 0;
    LiContext::setLights((uint64_t)v20, (uint64_t)&v24);
    if (v2)
    {
      PCSharedCount::PCSharedCount(&v18);
      v22 = 0x100000002;
    }
    LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)&v18, (uint64_t)this);
    while (1)
    {
      v13 = v19;
      v14 = v19 ? LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::next : 0;
      if (!v14 || (v9 & 1) != 0)
        break;
      v16 = 0;
      PCSharedCount::PCSharedCount(&v17);
      v9 = LiSceneDrawer::buildProgram(v13, (LiContext *)v20, (uint64_t)&v16) ^ 1;
      PCSharedCount::~PCSharedCount(&v17);
      LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::operator++((uint64_t)&v18);
    }
    LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)&v18);
    LiContext::~LiContext((LiContext *)v20);
    PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&v24);
  }
  return v9 & 1;
}

void sub_1B2CFA5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  LiSceneIterator<LiLight,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)&a33);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v33 - 104);
  _Unwind_Resume(a1);
}

uint64_t Multipass::verifyShaders(Multipass *this)
{
  int v2;
  LiLight *v3;
  BOOL v4;
  double (*v5)(uint64_t);
  double (*v6)(uint64_t);
  int v7;
  int v8;
  char v9;
  LiLayeredMaterial *v10;
  PCSharedCount v13;
  _BYTE v14[8];
  LiLight *v15;
  uint64_t v16;
  char v17;
  _BYTE v18[8];
  LiLayeredMaterial *v19;
  _QWORD v20[3];
  char v21;

  v2 = *((_DWORD *)this + 9);
  v20[1] = 0;
  v20[2] = 0;
  v20[0] = &unk_1E64FC250;
  v21 = 0;
  LiSceneIterator<LiLight,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v14, *((_QWORD *)this + 3));
  v3 = v15;
  v4 = v15 == 0;
  if (v15)
    v5 = LiSceneIterator<LiLight,LiSceneIteratorAlways>::next;
  else
    v5 = 0;
  if (v5)
  {
    do
    {
      if (!v4)
      {
        LiLightSet::add((uint64_t)v20, v3);
        v3 = v15;
      }
      if (v3)
      {
        do
        {
          LiSceneIterator<LiLight,LiSceneIteratorAlways>::next((uint64_t)v14);
          v3 = v15;
        }
        while (v15 && *(void (***)(LiLight *__hidden))v15 != &off_1E657B040);
      }
      v4 = v3 == 0;
      if (v3)
        v6 = LiSceneIterator<LiLight,LiSceneIteratorAlways>::next;
      else
        v6 = 0;
    }
    while (v6);
  }
  LiSceneIterator<LiLight,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v14);
  if (v2 < 0)
  {
    v9 = 1;
  }
  else
  {
    v7 = 0;
    if (((2 * v2) | 1) <= 1)
      v8 = 1;
    else
      v8 = (2 * v2) | 1;
    v9 = 1;
    do
    {
      Multipass::setupForPass(this, v7);
      LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v18, *((_QWORD *)this + 3));
      while (1)
      {
        v10 = v19;
        if (!(v19 ? LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::next : 0))
          break;
        if ((LiLayeredMaterial::getErrorState(v19) & 1) == 0)
        {
          LiContext::LiContext((LiContext *)v14);
          v17 = 0;
          LiContext::setLights((uint64_t)v14, (uint64_t)v20);
          if (*((_BYTE *)this + 16))
          {
            PCSharedCount::PCSharedCount(&v13);
            v16 = 0x100000002;
          }
          if ((LiSceneDrawer::buildProgram((uint64_t)v10, (LiContext *)v14, 0) & 1) == 0)
          {
            LiLayeredMaterial::setErrorState((uint64_t)v10);
            v9 = 0;
          }
          LiContext::~LiContext((LiContext *)v14);
        }
        LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::operator++((uint64_t)v18);
      }
      LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v18);
      ++v7;
    }
    while (v7 != v8);
  }
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)v20);
  return v9 & 1;
}

void sub_1B2CFA86C(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t Multipass::setupForPass(Multipass *this, int a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *i;
  uint64_t v17;

  *((_DWORD *)this + 8) = a2;
  result = (uint64_t)Multipass::setStateOfEverything(this, 0);
  v5 = *((_DWORD *)this + 9);
  v7 = *((_QWORD *)this + 10);
  v6 = *((_QWORD *)this + 11);
  v8 = (uint64_t *)*((_QWORD *)this + 16);
  v9 = (uint64_t *)*((_QWORD *)this + 17);
  v10 = a2 / v5;
  while (v8 != v9)
  {
    switch(v10)
    {
      case 2:
        LiLayeredMaterial::setUseDiffuseContributions(*v8, 1);
        result = LiLayeredMaterial::setDiffuseAlphaOnly(*v8, 1);
        break;
      case 1:
        result = LiLayeredMaterial::setUseSpecularContributions(*v8, 1);
        break;
      case 0:
        result = LiLayeredMaterial::setUseDiffuseContributions(*v8, 1);
        break;
    }
    ++v8;
  }
  if (v10 < 2)
  {
    v11 = a2 % v5;
    v12 = (unint64_t)(v6 - v7) >> 3;
    if (a2 % v5 >= (int)v12)
    {
      v13 = v11 - (uint64_t)(int)v12;
      v14 = *((_QWORD *)this + 13);
      if (v13 >= (*((_QWORD *)this + 14) - v14) >> 3)
      {
        v15 = (uint64_t *)*((_QWORD *)this + 7);
        for (i = (uint64_t *)*((_QWORD *)this + 8); v15 != i; *(_BYTE *)(v17 + 720) = 1)
          v17 = *v15++;
      }
      else
      {
        return LiLayeredMaterial::setUseEnvironmentMap(*(_QWORD *)(v14 + 8 * v13), 1);
      }
    }
    else
    {
      *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 10) + 8 * v11) + 720) = 1;
    }
  }
  return result;
}

__CFString **ProShade::UniformData::set<PCVector4<double>>(ProShade::UniformData *a1, uint64_t a2, const void *a3)
{
  PCString v7[19];

  v7[18] = *(PCString *)MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v7);
  ProShade::Value::set((uint64_t)v7, (const PCString *)3, 4, a3);
  return ProShade::UniformData::set(a1, *(ProShade::UniformNode **)(a2 + 16), v7);
}

uint64_t LiSolidRenderer::setRenderingParameter(uint64_t result, int a2, int *a3)
{
  int v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  std::locale v6;

  if (!a2)
  {
    if (a3)
    {
      v3 = *a3;
      if (*a3 >= gMaxSamples)
        v3 = gMaxSamples;
      *(_DWORD *)(result + 436) = v3;
    }
    else
    {
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Invalid object type sent to LiSolidRenderer::setRenderingParameter()", 68);
      std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
      v5 = std::locale::use_facet(&v6, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale(&v6);
      std::ostream::put();
      return std::ostream::flush();
    }
  }
  return result;
}

void sub_1B2CFAB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void LiSolidRenderer::getTileSize(LiSolidRenderer *this, unsigned int a2, unsigned int a3, unsigned int *a4, unsigned int *a5)
{
  unsigned int v5;

  v5 = gTileSize;
  *a4 = gTileSize;
  *a5 = v5;
}

uint64_t LiTextureCoordinator::textureForImage(LiTextureCoordinator *this, LiImageSource *a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = (_QWORD *)*((_QWORD *)this + 3);
  v2 = (char *)this + 24;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((_QWORD *)v5 + 4) <= (unint64_t)a2)
    return *((_QWORD *)v5 + 5);
  else
    return 0;
}

HGGLBlendingInfo *LiMaterialTextureInfo::getTextureID(HGGLBlendingInfo **this)
{
  return ProGL::TextureHandle::getName(this + 25);
}

_QWORD *LiMaterialTextureInfo::setTexture(LiMaterialTextureInfo *this, const ProGL::TextureHandle *a2)
{
  return std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)this + 25, (uint64_t *)a2);
}

uint64_t LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::operator++(uint64_t a1)
{
  const void *v2;

  if (*(_QWORD *)(a1 + 8))
  {
    do
    {
      LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::next(a1);
      v2 = *(const void **)(a1 + 8);
    }
    while (v2
  }
  return a1;
}

void LiContext::setLights(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + 440;
  v5 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 448) >= v5)
    v6 = *(_DWORD *)(a1 + 448);
  else
    v6 = (2 * v5) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(v4, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      LiLight::operator=(*(_QWORD *)(a1 + 456) + v7, *(_QWORD *)(a2 + 16) + v7);
      ++v8;
      v7 += 944;
    }
    while (v8 < *(int *)(a2 + 12));
  }
  *(_BYTE *)(a1 + 464) = *(_BYTE *)(a2 + 24);
}

void Multipass::Multipass(Multipass *this, ProGL::GL *a2, ProGL::GL *a3, int a4, LiSceneObject *a5, char a6)
{
  char *v9;
  char **v10;
  char **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  double (*v16)(uint64_t);
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  double (*v41)(uint64_t);
  OZChannelBase *v42;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  OZChannelBase **v52;
  char *v53;
  char *v54;
  OZChannelBase *v55;
  unint64_t v56;
  OZChannelBase **v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  OZChannelBase **v64;
  char *v65;
  char *v66;
  OZChannelBase *v67;
  int v68;
  char **v69;
  char **v70;
  __int128 v71[11];

  *(_QWORD *)this = a2;
  *((_DWORD *)this + 2) = (_DWORD)a3;
  *((_DWORD *)this + 3) = a4;
  *((_BYTE *)this + 16) = a6;
  *((_QWORD *)this + 3) = a5;
  *((_QWORD *)this + 4) = 0xFFFFFFFFLL;
  v9 = (char *)this + 40;
  PCWorkingColorVector::PCWorkingColorVector((Multipass *)((char *)this + 40));
  *(_OWORD *)((char *)this + 56) = 0u;
  v70 = (char **)((char *)this + 56);
  v69 = (char **)((char *)this + 80);
  *(_OWORD *)((char *)this + 104) = 0u;
  v10 = (char **)((char *)this + 104);
  v11 = (char **)((char *)this + 128);
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  LiSolidUtils::createColorTexture(*(LiSolidUtils **)this, a3, a4, 6408, (HGGLBlendingInfo **)v71, (int)v9, SHIDWORD(v9));
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v9, v71);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v71[0] + 1);
  if (*((_QWORD *)&v71[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v71[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  LiSceneIterator<LiLight,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v71, *((_QWORD *)this + 3));
  v15 = *((_QWORD *)&v71[0] + 1);
  if (*((_QWORD *)&v71[0] + 1))
    v16 = LiSceneIterator<LiLight,LiSceneIteratorAlways>::next;
  else
    v16 = 0;
  if (v16)
  {
    do
    {
      if (*(_BYTE *)(v15 + 720))
      {
        if ((*(_DWORD *)(v15 + 656) - 1) <= 2 && *(_BYTE *)(v15 + 721))
        {
          v18 = (_QWORD *)*((_QWORD *)this + 11);
          v17 = *((_QWORD *)this + 12);
          if ((unint64_t)v18 >= v17)
          {
            v28 = ((char *)v18 - *v69) >> 3;
            if ((unint64_t)(v28 + 1) >> 61)
LABEL_100:
              std::vector<double>::__throw_length_error[abi:ne180100]();
            v29 = v17 - (_QWORD)*v69;
            v30 = v29 >> 2;
            if (v29 >> 2 <= (unint64_t)(v28 + 1))
              v30 = v28 + 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
              v31 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v31 = v30;
            if (v31)
              v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 96, v31);
            else
              v32 = 0;
            v37 = &v32[8 * v28];
            *(_QWORD *)v37 = v15;
            v19 = v37 + 8;
            v39 = (char *)*((_QWORD *)this + 10);
            v38 = (char *)*((_QWORD *)this + 11);
            if (v38 != v39)
            {
              do
              {
                v40 = *((_QWORD *)v38 - 1);
                v38 -= 8;
                *((_QWORD *)v37 - 1) = v40;
                v37 -= 8;
              }
              while (v38 != v39);
              v38 = *v69;
            }
            *((_QWORD *)this + 10) = v37;
            *((_QWORD *)this + 11) = v19;
            *((_QWORD *)this + 12) = &v32[8 * v31];
            if (v38)
              operator delete(v38);
          }
          else
          {
            *v18 = v15;
            v19 = v18 + 1;
          }
          *((_QWORD *)this + 11) = v19;
        }
        else
        {
          v21 = (_QWORD *)*((_QWORD *)this + 8);
          v20 = *((_QWORD *)this + 9);
          if ((unint64_t)v21 >= v20)
          {
            v23 = ((char *)v21 - *v70) >> 3;
            if ((unint64_t)(v23 + 1) >> 61)
              goto LABEL_100;
            v24 = v20 - (_QWORD)*v70;
            v25 = v24 >> 2;
            if (v24 >> 2 <= (unint64_t)(v23 + 1))
              v25 = v23 + 1;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v25;
            if (v26)
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 72, v26);
            else
              v27 = 0;
            v33 = &v27[8 * v23];
            *(_QWORD *)v33 = v15;
            v22 = v33 + 8;
            v35 = (char *)*((_QWORD *)this + 7);
            v34 = (char *)*((_QWORD *)this + 8);
            if (v34 != v35)
            {
              do
              {
                v36 = *((_QWORD *)v34 - 1);
                v34 -= 8;
                *((_QWORD *)v33 - 1) = v36;
                v33 -= 8;
              }
              while (v34 != v35);
              v34 = *v70;
            }
            *((_QWORD *)this + 7) = v33;
            *((_QWORD *)this + 8) = v22;
            *((_QWORD *)this + 9) = &v27[8 * v26];
            if (v34)
              operator delete(v34);
          }
          else
          {
            *v21 = v15;
            v22 = v21 + 1;
          }
          *((_QWORD *)this + 8) = v22;
        }
      }
      if (*((_QWORD *)&v71[0] + 1))
      {
        do
        {
          LiSceneIterator<LiLight,LiSceneIteratorAlways>::next((uint64_t)v71);
          v15 = *((_QWORD *)&v71[0] + 1);
        }
        while (*((_QWORD *)&v71[0] + 1) && **((void (****)(LiLight *__hidden))&v71[0] + 1) != &off_1E657B040);
      }
      else
      {
        v15 = 0;
      }
      if (v15)
        v41 = LiSceneIterator<LiLight,LiSceneIteratorAlways>::next;
      else
        v41 = 0;
    }
    while (v41);
  }
  LiSceneIterator<LiLight,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v71);
  LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v71, *((_QWORD *)this + 3));
  while (1)
  {
    v42 = (OZChannelBase *)*((_QWORD *)&v71[0] + 1);
    if (!(*((_QWORD *)&v71[0] + 1) ? LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::next : 0))
      break;
    v45 = (_QWORD *)*((_QWORD *)this + 17);
    v44 = *((_QWORD *)this + 18);
    if ((unint64_t)v45 >= v44)
    {
      v47 = ((char *)v45 - *v11) >> 3;
      if ((unint64_t)(v47 + 1) >> 61)
        goto LABEL_99;
      v48 = v44 - (_QWORD)*v11;
      v49 = v48 >> 2;
      if (v48 >> 2 <= (unint64_t)(v47 + 1))
        v49 = v47 + 1;
      if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF8)
        v50 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v50 = v49;
      if (v50)
        v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 144, v50);
      else
        v51 = 0;
      v52 = (OZChannelBase **)&v51[8 * v47];
      *v52 = v42;
      v46 = v52 + 1;
      v54 = (char *)*((_QWORD *)this + 16);
      v53 = (char *)*((_QWORD *)this + 17);
      if (v53 != v54)
      {
        do
        {
          v55 = (OZChannelBase *)*((_QWORD *)v53 - 1);
          v53 -= 8;
          *--v52 = v55;
        }
        while (v53 != v54);
        v53 = *v11;
      }
      *((_QWORD *)this + 16) = v52;
      *((_QWORD *)this + 17) = v46;
      *((_QWORD *)this + 18) = &v51[8 * v50];
      if (v53)
        operator delete(v53);
    }
    else
    {
      *v45 = *((_QWORD *)&v71[0] + 1);
      v46 = v45 + 1;
    }
    *((_QWORD *)this + 17) = v46;
    if (OZChannelBase::isObjectRef(v42))
    {
      v57 = (OZChannelBase **)*((_QWORD *)this + 14);
      v56 = *((_QWORD *)this + 15);
      if ((unint64_t)v57 >= v56)
      {
        v59 = ((char *)v57 - *v10) >> 3;
        if ((unint64_t)(v59 + 1) >> 61)
LABEL_99:
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v60 = v56 - (_QWORD)*v10;
        v61 = v60 >> 2;
        if (v60 >> 2 <= (unint64_t)(v59 + 1))
          v61 = v59 + 1;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF8)
          v62 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v62 = v61;
        if (v62)
          v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)this + 120, v62);
        else
          v63 = 0;
        v64 = (OZChannelBase **)&v63[8 * v59];
        *v64 = v42;
        v58 = v64 + 1;
        v66 = (char *)*((_QWORD *)this + 13);
        v65 = (char *)*((_QWORD *)this + 14);
        if (v65 != v66)
        {
          do
          {
            v67 = (OZChannelBase *)*((_QWORD *)v65 - 1);
            v65 -= 8;
            *--v64 = v67;
          }
          while (v65 != v66);
          v65 = *v10;
        }
        *((_QWORD *)this + 13) = v64;
        *((_QWORD *)this + 14) = v58;
        *((_QWORD *)this + 15) = &v63[8 * v62];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *v57 = v42;
        v58 = v57 + 1;
      }
      *((_QWORD *)this + 14) = v58;
    }
    LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::operator++((uint64_t)v71);
  }
  LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v71);
  v68 = ((*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3)
      + ((*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 3);
  *((_DWORD *)this + 9) = v68;
  if (*((_QWORD *)this + 8) != *((_QWORD *)this + 7))
    *((_DWORD *)this + 9) = v68 + 1;
}

void sub_1B2CFB1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  _QWORD *v12;
  void **v13;
  void **v14;
  void *v16;
  void *v17;
  void *v18;
  void *v19;

  v16 = *v14;
  if (*v14)
  {
    v12[17] = v16;
    operator delete(v16);
  }
  v17 = *v13;
  if (*v13)
  {
    v12[14] = v17;
    operator delete(v17);
  }
  v18 = *a11;
  if (*a11)
  {
    v12[11] = v18;
    operator delete(v18);
  }
  v19 = *a12;
  if (*a12)
  {
    v12[8] = v19;
    operator delete(v19);
  }
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

void Multipass::~Multipass(Multipass *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  Multipass::setStateOfEverything(this, 1);
  v2 = (void *)*((_QWORD *)this + 16);
  if (v2)
  {
    *((_QWORD *)this + 17) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 8) = v5;
    operator delete(v5);
  }
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
}

_QWORD *Multipass::setStateOfEverything(_QWORD *this, char a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;

  v3 = this;
  v4 = (uint64_t *)this[10];
  v5 = (uint64_t *)this[11];
  while (v4 != v5)
  {
    v6 = *v4++;
    *(_BYTE *)(v6 + 720) = a2;
  }
  v7 = (uint64_t *)this[7];
  v8 = (uint64_t *)this[8];
  while (v7 != v8)
  {
    v9 = *v7++;
    *(_BYTE *)(v9 + 720) = a2;
  }
  v10 = (uint64_t *)this[13];
  v11 = (uint64_t *)this[14];
  while (v10 != v11)
  {
    v12 = *v10++;
    this = (_QWORD *)LiLayeredMaterial::setUseEnvironmentMap(v12, a2);
  }
  v14 = (uint64_t *)v3[16];
  v13 = (uint64_t *)v3[17];
  while (v14 != v13)
  {
    LiLayeredMaterial::setMultipass(*v14, 1);
    LiLayeredMaterial::setDiffuseAlphaOnly(*v14, 0);
    LiLayeredMaterial::setUnlimitedSamplers((LiLayeredMaterial *)*v14, 0);
    LiLayeredMaterial::setUseDiffuseContributions(*v14, a2);
    v15 = *v14++;
    this = (_QWORD *)LiLayeredMaterial::setUseSpecularContributions(v15, a2);
  }
  return this;
}

void Multipass::combine(ProGL::GL **a1)
{
  ProGL::GL *v2;
  uint64_t *v3[6];

  v2 = *a1;
  ProGL::Framebuffer::Framebuffer((ProGL::Framebuffer *)v3, *a1);
  ProGL::Framebuffer::bind((ProGL::Framebuffer *)v3, v2, 0x8D40u);
  ProGL::Framebuffer::attach(v3, v2, 0x8D40u, 0x8CE0u, a1 + 5, 0);
  ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)v3);
}

void sub_1B2CFB3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)&a9);
  _Unwind_Resume(a1);
}

void PCArray<PCPtr<LiMaterialFilter>,PCArray_Traits<PCPtr<LiMaterialFilter>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656AAC8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

__CFString **ProShade::UniformData::set(ProShade::UniformData *this, ProShade::UniformNode *a2, const PCString *a3)
{
  uint64_t *v4;
  ProShade::UniformNode *v6;
  ProShade::UniformNode **v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<ProShade::UniformNode *,ProShade::Value>,std::__map_value_compare<ProShade::UniformNode *,std::__value_type<ProShade::UniformNode *,ProShade::Value>,std::less<ProShade::UniformNode *>,true>,std::allocator<std::__value_type<ProShade::UniformNode *,ProShade::Value>>>::__emplace_unique_key_args<ProShade::UniformNode *,std::piecewise_construct_t const&,std::tuple<ProShade::UniformNode * const&>,std::tuple<>>((uint64_t)this, (unint64_t *)&v6, (uint64_t)&std::piecewise_construct, &v7);
  return ProShade::Value::operator=((__CFString **)v4 + 5, a3);
}

uint64_t *std::__tree<std::__value_type<ProShade::UniformNode *,ProShade::Value>,std::__map_value_compare<ProShade::UniformNode *,std::__value_type<ProShade::UniformNode *,ProShade::Value>,std::less<ProShade::UniformNode *>,true>,std::allocator<std::__value_type<ProShade::UniformNode *,ProShade::Value>>>::__emplace_unique_key_args<ProShade::UniformNode *,std::piecewise_construct_t const&,std::tuple<ProShade::UniformNode * const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<ProShade::UniformNode *,ProShade::Value>,std::__map_value_compare<ProShade::UniformNode *,std::__value_type<ProShade::UniformNode *,ProShade::Value>,std::less<ProShade::UniformNode *>,true>,std::allocator<std::__value_type<ProShade::UniformNode *,ProShade::Value>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ProShade::UniformNode * const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

_QWORD *std::__tree<std::__value_type<ProShade::UniformNode *,ProShade::Value>,std::__map_value_compare<ProShade::UniformNode *,std::__value_type<ProShade::UniformNode *,ProShade::Value>,std::less<ProShade::UniformNode *>,true>,std::allocator<std::__value_type<ProShade::UniformNode *,ProShade::Value>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<ProShade::UniformNode * const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _QWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0xB8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4] = **a2;
  result = ProShade::Value::Value(v6 + 5);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2CFB5D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::LiSceneIterator(uint64_t a1, uint64_t a2)
{
  const void *v3;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E656AB00;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  while (1)
  {
    v3 = *(const void **)(a1 + 8);
    if (!v3
    {
      break;
    }
    LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::next(a1);
  }
  return a1;
}

void sub_1B2CFB690(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

double LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::next(uint64_t a1)
{
  const void *v2;
  PCArray_base *v3;
  PCArray_base *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 v14;
  uint64_t j;
  _OWORD *v16;
  __int128 v17;
  int v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  signed int v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (v3
      && (v4 = v3,
          v3 = (PCArray_base *)(*(uint64_t (**)(PCArray_base *))(*(_QWORD *)v3 + 136))(v3),
          (_DWORD)v3))
    {
      v5 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 24) <= v5)
        v6 = (2 * (v5 + 1)) | 1;
      else
        v6 = *(_DWORD *)(a1 + 24);
      PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v5 + 1, v6);
      v7 = *(_QWORD *)(a1 + 32) + 144 * *(int *)(a1 + 28);
      *(_QWORD *)(v7 - 144) = v4;
      *(_DWORD *)(v7 - 136) = 0;
      v8 = v7 - 128;
      if (a1 + 40 != v7 - 128)
      {
        v9 = 0;
        v10 = a1 + 40;
        v11 = v8;
        do
        {
          for (i = 0; i != 32; i += 8)
            *(_QWORD *)(v11 + i) = *(_QWORD *)(v10 + i);
          ++v9;
          v11 += 32;
          v10 += 32;
        }
        while (v9 != 4);
      }
      v13 = (*(uint64_t (**)(PCArray_base *, _QWORD))(*(_QWORD *)v4 + 144))(v4, 0);
      *(_QWORD *)(a1 + 8) = v13;
      PCMatrix44Tmpl<double>::operator*(v8, (__int128 *)(v13 + 8), (uint64_t)v34);
      if (v34 != (_OWORD *)(a1 + 40))
      {
        for (j = 0; j != 8; j += 2)
        {
          v16 = (_OWORD *)(a1 + 40 + j * 16);
          v14 = v34[j];
          v17 = v34[j + 1];
          *v16 = v14;
          v16[1] = v17;
        }
      }
    }
    else
    {
      v18 = *(_DWORD *)(a1 + 28);
      if (v18)
      {
        v19 = (_OWORD *)(a1 + 40);
        while (1)
        {
          if (v18 <= 0)
            PCArray_base::badIndex(v3);
          v20 = v18 - 1;
          v21 = *(_QWORD *)(a1 + 32);
          v22 = (uint64_t *)(v21 + 144 * v20);
          v23 = *v22;
          v25 = *((_DWORD *)v22 + 2);
          v24 = v22 + 1;
          if (v25 < (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) - 1))
            break;
          v26 = *(_DWORD *)(a1 + 28) - 1;
          if (*(_DWORD *)(a1 + 24) >= v26)
            v27 = *(_DWORD *)(a1 + 24);
          else
            v27 = (2 * v26) | 1;
          v3 = (PCArray_base *)PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v26, v27);
          v18 = *(_DWORD *)(a1 + 28);
          if (!v18)
            goto LABEL_25;
        }
        ++*v24;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
        *(_QWORD *)(a1 + 8) = v28;
        PCMatrix44Tmpl<double>::operator*(v21 + 144 * v20 + 16, (__int128 *)(v28 + 8), (uint64_t)v34);
        if (v34 != v19)
        {
          v29 = v38;
          *(_OWORD *)(a1 + 104) = v37;
          *(_OWORD *)(a1 + 120) = v29;
          v30 = v40;
          *(_OWORD *)(a1 + 136) = v39;
          *(_OWORD *)(a1 + 152) = v30;
          v31 = v34[1];
          *v19 = v34[0];
          *(_OWORD *)(a1 + 56) = v31;
          *(_QWORD *)&v14 = v35;
          v32 = v36;
          *(_OWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 88) = v32;
        }
      }
      else
      {
LABEL_25:
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
        *(_QWORD *)&v14 = 0;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
      }
    }
  }
  return *(double *)&v14;
}

uint64_t PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656AB00;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656AB00;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  PCException *exception;
  PCString v25;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v25, "PCArray::resize");
    PCException::PCException(exception, &v25);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    v6 = *(int *)(result + 12);
    if ((int)v6 < a2)
    {
      v7 = 144 * v6;
      v8 = a2 - v6;
      do
      {
        v9 = *(_QWORD *)(result + 16) + v7;
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 136) = 0x3FF0000000000000;
        *(_QWORD *)(v9 + 96) = 0x3FF0000000000000;
        *(_QWORD *)(v9 + 56) = 0x3FF0000000000000;
        *(_QWORD *)(v9 + 16) = 0x3FF0000000000000;
        *(_OWORD *)(v9 + 24) = 0uLL;
        *(_OWORD *)(v9 + 40) = 0uLL;
        *(_OWORD *)(v9 + 64) = 0uLL;
        *(_OWORD *)(v9 + 80) = 0uLL;
        *(_OWORD *)(v9 + 104) = 0uLL;
        v7 += 144;
        *(_OWORD *)(v9 + 120) = 0uLL;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (v3)
    {
      v10 = (void *)operator new[]();
      bzero(v10, 144 * v3);
    }
    else
    {
      v10 = 0;
    }
    v11 = *(_DWORD *)(v5 + 12);
    if (a2 >= v11)
      v12 = v11;
    else
      v12 = a2;
    if ((int)v12 < 1)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      v13 = *(_OWORD **)(v5 + 16);
      v14 = v12;
      v15 = v10;
      do
      {
        *v15 = *v13;
        v16 = v13[1];
        v17 = v13[2];
        v18 = v13[4];
        v15[3] = v13[3];
        v15[4] = v18;
        v15[1] = v16;
        v15[2] = v17;
        v19 = v13[5];
        v20 = v13[6];
        v21 = v13[8];
        v15[7] = v13[7];
        v15[8] = v21;
        v15[5] = v19;
        v15[6] = v20;
        v13 += 9;
        v15 += 9;
        --v14;
      }
      while (v14);
    }
    if ((int)v12 <= v11)
      LODWORD(v12) = v11;
    if ((int)v12 < a2)
    {
      v22 = (uint64_t)v10 + 144 * v12 + 96;
      v23 = a2 - (unint64_t)v12;
      do
      {
        *(_QWORD *)(v22 - 96) = 0;
        *(_QWORD *)(v22 - 88) = 0;
        *(_QWORD *)(v22 + 40) = 0x3FF0000000000000;
        *(_QWORD *)v22 = 0x3FF0000000000000;
        *(_QWORD *)(v22 - 40) = 0x3FF0000000000000;
        *(_QWORD *)(v22 - 80) = 0x3FF0000000000000;
        *(_OWORD *)(v22 - 72) = 0uLL;
        *(_OWORD *)(v22 - 56) = 0uLL;
        *(_OWORD *)(v22 - 32) = 0uLL;
        *(_OWORD *)(v22 - 16) = 0uLL;
        *(_OWORD *)(v22 + 8) = 0uLL;
        *(_OWORD *)(v22 + 24) = 0uLL;
        v22 += 144;
        --v23;
      }
      while (v23);
    }
    result = *(_QWORD *)(v5 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v5 + 16) = v10;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = a2;
  return result;
}

void sub_1B2CFBC20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::~LiSceneIterator(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = &unk_1E656AB00;
  v2 = a1 + 16;
  if (*(int *)(v2 + 8) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(v2 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

uint64_t LiSceneIterator<LiLight,LiSceneIteratorAlways>::LiSceneIterator(uint64_t a1, uint64_t a2)
{
  void (***v3)(LiLight *__hidden);

  *(_QWORD *)(a1 + 16) = &unk_1E656AB38;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  while (1)
  {
    v3 = *(void (****)(LiLight *__hidden))(a1 + 8);
    if (!v3 || *v3 == &off_1E657B040)
      break;
    LiSceneIterator<LiLight,LiSceneIteratorAlways>::next(a1);
  }
  return a1;
}

void sub_1B2CFBD58(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiSceneIterator<LiLight,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLight,LiSceneIteratorAlways>::Obj>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

double LiSceneIterator<LiLight,LiSceneIteratorAlways>::next(uint64_t a1)
{
  const void *v2;
  PCArray_base *v3;
  PCArray_base *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 v14;
  uint64_t j;
  _OWORD *v16;
  __int128 v17;
  int v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  signed int v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (v3
      && (v4 = v3,
          v3 = (PCArray_base *)(*(uint64_t (**)(PCArray_base *))(*(_QWORD *)v3 + 136))(v3),
          (_DWORD)v3))
    {
      v5 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 24) <= v5)
        v6 = (2 * (v5 + 1)) | 1;
      else
        v6 = *(_DWORD *)(a1 + 24);
      PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v5 + 1, v6);
      v7 = *(_QWORD *)(a1 + 32) + 144 * *(int *)(a1 + 28);
      *(_QWORD *)(v7 - 144) = v4;
      *(_DWORD *)(v7 - 136) = 0;
      v8 = v7 - 128;
      if (a1 + 40 != v7 - 128)
      {
        v9 = 0;
        v10 = a1 + 40;
        v11 = v8;
        do
        {
          for (i = 0; i != 32; i += 8)
            *(_QWORD *)(v11 + i) = *(_QWORD *)(v10 + i);
          ++v9;
          v11 += 32;
          v10 += 32;
        }
        while (v9 != 4);
      }
      v13 = (*(uint64_t (**)(PCArray_base *, _QWORD))(*(_QWORD *)v4 + 144))(v4, 0);
      *(_QWORD *)(a1 + 8) = v13;
      PCMatrix44Tmpl<double>::operator*(v8, (__int128 *)(v13 + 8), (uint64_t)v34);
      if (v34 != (_OWORD *)(a1 + 40))
      {
        for (j = 0; j != 8; j += 2)
        {
          v16 = (_OWORD *)(a1 + 40 + j * 16);
          v14 = v34[j];
          v17 = v34[j + 1];
          *v16 = v14;
          v16[1] = v17;
        }
      }
    }
    else
    {
      v18 = *(_DWORD *)(a1 + 28);
      if (v18)
      {
        v19 = (_OWORD *)(a1 + 40);
        while (1)
        {
          if (v18 <= 0)
            PCArray_base::badIndex(v3);
          v20 = v18 - 1;
          v21 = *(_QWORD *)(a1 + 32);
          v22 = (uint64_t *)(v21 + 144 * v20);
          v23 = *v22;
          v25 = *((_DWORD *)v22 + 2);
          v24 = v22 + 1;
          if (v25 < (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) - 1))
            break;
          v26 = *(_DWORD *)(a1 + 28) - 1;
          if (*(_DWORD *)(a1 + 24) >= v26)
            v27 = *(_DWORD *)(a1 + 24);
          else
            v27 = (2 * v26) | 1;
          v3 = (PCArray_base *)PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v26, v27);
          v18 = *(_DWORD *)(a1 + 28);
          if (!v18)
            goto LABEL_25;
        }
        ++*v24;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
        *(_QWORD *)(a1 + 8) = v28;
        PCMatrix44Tmpl<double>::operator*(v21 + 144 * v20 + 16, (__int128 *)(v28 + 8), (uint64_t)v34);
        if (v34 != v19)
        {
          v29 = v38;
          *(_OWORD *)(a1 + 104) = v37;
          *(_OWORD *)(a1 + 120) = v29;
          v30 = v40;
          *(_OWORD *)(a1 + 136) = v39;
          *(_OWORD *)(a1 + 152) = v30;
          v31 = v34[1];
          *v19 = v34[0];
          *(_OWORD *)(a1 + 56) = v31;
          *(_QWORD *)&v14 = v35;
          v32 = v36;
          *(_OWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 88) = v32;
        }
      }
      else
      {
LABEL_25:
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
        *(_QWORD *)&v14 = 0;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
      }
    }
  }
  return *(double *)&v14;
}

uint64_t PCArray<LiSceneIterator<LiLight,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLight,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656AB38;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiSceneIterator<LiLight,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLight,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656AB38;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t LiSceneIterator<LiLight,LiSceneIteratorAlways>::~LiSceneIterator(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = &unk_1E656AB38;
  v2 = a1 + 16;
  if (*(int *)(v2 + 8) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(v2 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

double LiDrawnRegion::Rect::Rect(LiDrawnRegion::Rect *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)this = xmmword_1B30503B0;
  *((_DWORD *)this + 4) = 0;
  return result;
}

__n128 LiDrawnRegion::Rect::Rect(LiDrawnRegion::Rect *this, const LiDrawnRegion::Rect *a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)this = *(_OWORD *)a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  return result;
}

void LiDrawnRegion::clear(LiDrawnRegion *this, __n128 a2)
{
  int v2;

  if (*((int *)this + 2) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)this + 2);
  PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::resize((uint64_t)this, 0, v2, a2);
}

uint64_t LiDrawnRegion::add(uint64_t a1, int32x2_t *a2, int a3, int a4, unsigned int a5)
{
  uint64_t v9;
  uint64_t isAbelian;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int32 *v17;
  int v18;
  char v19;
  __int32 v20;
  __int32 v21;
  int v22;
  __int32 v23;
  __int32 v24;
  __int32 v25;
  __int32 v26;
  __int32 v27;
  int v28;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  int v34;
  _BOOL4 v36;
  __int32 v37;
  __int32 v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int32x2_t *v47;
  __n128 v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v54;
  int v55;
  int v56;
  char v57;
  int v58;
  uint64_t v60;
  __int128 v61;

  v9 = *(unsigned int *)(a1 + 12);
  isAbelian = PCBlend::isAbelian(a5);
  v60 = v9;
  v54 = a3;
  v55 = a4;
  if ((int)v9 < 1)
  {
    v13 = 0;
    v12 = 0;
    v58 = -1;
    v15 = -1;
    goto LABEL_44;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v56 = 0;
  v57 = isAbelian ^ 1;
  v58 = -1;
  v14 = 8;
  v15 = -1;
  while (1)
  {
    if (v11 >= *(int *)(a1 + 12))
      PCArray_base::badIndex((PCArray_base *)isAbelian);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = (__int32 *)(v16 + v14 - 8);
    v18 = *(_DWORD *)(v16 + v14 + 8);
    isAbelian = PCRect<int>::intersects(a2, v17);
    if (!(_DWORD)isAbelian)
    {
      if (v18 == a5)
      {
        isAbelian = (uint64_t)operator|<int>(a2, (int32x2_t *)(v16 + v14 - 8), (int32x2_t *)&v61);
        v32 = HIDWORD(v61) * DWORD2(v61);
        if ((DWORD2(v61) | HIDWORD(v61)) < 0)
          v32 = 0;
        v33 = v58;
        v34 = v56;
        v36 = v58 < 0 || v56 > v32;
        if (v36)
          v34 = v32;
        v56 = v34;
        if (v36)
          v33 = v11;
        v58 = v33;
      }
      goto LABEL_40;
    }
    v19 = v57;
    if (v18 == a5)
      break;
    v19 = 1;
LABEL_25:
    v13 |= v19;
LABEL_40:
    ++v11;
    v14 += 20;
    if (v60 == v11)
      goto LABEL_44;
  }
  v20 = a2->i32[1];
  if (a2->i32[0] <= *v17)
    v21 = *v17;
  else
    v21 = a2->i32[0];
  v22 = *(_DWORD *)(v16 + v14) + *v17;
  if (a2[1].i32[0] + a2->i32[0] < v22)
    v22 = a2[1].i32[0] + a2->i32[0];
  v23 = *(_DWORD *)(v16 + v14 - 4);
  if (v20 <= v23)
    v24 = *(_DWORD *)(v16 + v14 - 4);
  else
    v24 = a2->i32[1];
  v25 = a2[1].i32[1] + v20;
  v26 = *(_DWORD *)(v16 + v14 + 4) + v23;
  if (v25 < v26)
    v26 = v25;
  v27 = v22 - v21;
  v28 = v26 - v24;
  v29 = v27 | v28;
  v30 = v28 * v27;
  if (v29 < 0)
    v30 = 0;
  v31 = v12 < v30;
  if (v12 <= v30)
    v12 = v30;
  if (v31)
    v15 = v11;
  if ((((int)v60 < 10) & (v57 | v13)) == 0)
    goto LABEL_25;
  v13 = 1;
LABEL_44:
  v37 = a2[1].i32[0];
  v38 = a2[1].i32[1];
  v39 = v37 | v38;
  v40 = v38 * v37;
  if (v39 < 0)
    v40 = 0;
  if (v12 != v40)
  {
    if ((v13 & 1) != 0)
    {
      if (v54)
      {
        v41 = *(_DWORD *)(a1 + 12);
        if (v15 < 0)
          goto LABEL_68;
        if (v41 <= v15)
          PCArray_base::badIndex((PCArray_base *)isAbelian);
        v42 = *(_QWORD *)(a1 + 16);
        v43 = v42 + 20 * v15;
        v44 = *(_DWORD *)(v43 + 8);
        if (v44 < 0)
        {
          v46 = 0;
        }
        else
        {
          v45 = *(_DWORD *)(v43 + 12);
          v46 = v45 * v44;
          if (v45 < 0)
            v46 = 0;
        }
        v41 = *(_DWORD *)(a1 + 12);
        if (v12 != v46 && (int)v60 <= 9)
        {
LABEL_68:
          v48 = *(__n128 *)a2->i8;
          v61 = *(_OWORD *)a2->i8;
          v50 = v41 + 1;
          if (*(_DWORD *)(a1 + 8) <= v41)
            v51 = (2 * (v41 + 1)) | 1;
          else
            v51 = *(_DWORD *)(a1 + 8);
          goto LABEL_71;
        }
        if (v41 <= v15)
          PCArray_base::badIndex((PCArray_base *)isAbelian);
        v47 = (int32x2_t *)(v42 + 20 * v15);
LABEL_75:
        PCRect<int>::operator|=(v47, a2);
      }
    }
    else if (v55)
    {
      if ((int)v60 >= 10 && (v58 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(a1 + 12) <= v58)
          PCArray_base::badIndex((PCArray_base *)isAbelian);
        v47 = (int32x2_t *)(*(_QWORD *)(a1 + 16) + 20 * v58);
        goto LABEL_75;
      }
      v48 = *(__n128 *)a2->i8;
      v61 = *(_OWORD *)a2->i8;
      v49 = *(_DWORD *)(a1 + 12);
      v50 = v49 + 1;
      if (*(_DWORD *)(a1 + 8) <= v49)
        v51 = (2 * (v49 + 1)) | 1;
      else
        v51 = *(_DWORD *)(a1 + 8);
LABEL_71:
      PCArray<LiDrawnRegion::Rect,PCArray_Traits<LiDrawnRegion::Rect>>::resize(a1, v50, v51, v48);
      v52 = *(_QWORD *)(a1 + 16) + 20 * *(int *)(a1 + 12);
      *(_OWORD *)(v52 - 20) = v61;
      *(_DWORD *)(v52 - 4) = a5;
    }
  }
  return v13 & 1;
}

BOOL PCRect<int>::intersects(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v10;
  int v11;
  _BOOL4 v12;

  v2 = a1[2];
  if (v2 < 0)
    return 0;
  v3 = a1[3];
  if (v3 < 0)
    return 0;
  v4 = 0;
  v5 = a2[2];
  if ((v5 & 0x80000000) == 0)
  {
    v6 = a2[3];
    if ((v6 & 0x80000000) == 0)
    {
      v7 = *a1 + v2;
      if (*a1 <= *a2 + v5 && v7 >= *a2)
      {
        v10 = a1[1];
        v11 = a2[1];
        v12 = v3 + v10 >= v11;
        return v10 <= v6 + v11 && v12;
      }
      return 0;
    }
  }
  return v4;
}

int32x2_t *operator|<int>@<X0>(int32x2_t *result@<X0>, int32x2_t *a2@<X1>, int32x2_t *a3@<X8>)
{
  int32x2_t v3;
  int32x2_t v4;
  int32x2_t v5;
  int32x2_t v6;
  __int128 v7;

  v3 = result[1];
  if (v3.i32[0] < 0 || v3.i32[1] < 0)
  {
    v7 = *(_OWORD *)a2->i8;
  }
  else
  {
    v4 = a2[1];
    if ((v4.i32[0] & 0x80000000) == 0 && (v4.i32[1] & 0x80000000) == 0)
    {
      v5 = vmin_s32(*result, *a2);
      v6 = vsub_s32(vmax_s32(vadd_s32(v3, *result), vadd_s32(v4, *a2)), v5);
      *a3 = v5;
      a3[1] = v6;
      return result;
    }
    v7 = *(_OWORD *)result->i8;
  }
  *(_OWORD *)a3->i8 = v7;
  return result;
}

PCSharedCount *ProShade::Texture::Texture(PCSharedCount *this)
{
  PCShared_base **v2;
  uint64_t v3;
  int v4;

  this->var0 = (PC_Sp_counted_base *)&off_1E656AB70;
  this[1].var0 = 0;
  v2 = (PCShared_base **)&this[1];
  PCSharedCount::PCSharedCount(this + 2);
  v3 = operator new();
  *(_QWORD *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 56) = 1;
  *(_QWORD *)v3 = &unk_1E656B1B8;
  *(_QWORD *)(v3 + 40) = &unk_1E656B1E8;
  *(_QWORD *)(v3 + 8) = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v3 + 16));
  PCPtr<LiImageSource>::operator=<LiImageSource>(v2, (PCShared_base *)v3);
  v4 = ++ProShade::serial_number;
  if (!*v2)
    throw_PCNullPointerException(1);
  *((_DWORD *)*v2 + 8) = v4;
  return this;
}

void sub_1B2CFC65C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;
  PC_Sp_counted_base **v3;
  LiString *v4;

  LiString::dec(v4);
  *(_QWORD *)(v2 + 40) = &off_1E65EB048;
  *(_BYTE *)(v2 + 56) = 0;
  PCWeakCount::~PCWeakCount(v3);
  MEMORY[0x1B5E29170](v2, 0x10B1C40512DA185);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::Texture::~Texture(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E656AB70;
  PCSharedCount::~PCSharedCount(this + 2);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E656AB70;
  PCSharedCount::~PCSharedCount(this + 2);
  JUMPOUT(0x1B5E29170);
}

int8x8_t *ProShade::Texture::computeHash(ProShade::Texture *this, int8x8_t *a2)
{
  int8x8_t *result;
  uint64_t v5;

  result = PCHashWriteStream::writeValue(a2, "Texture");
  v5 = *((_QWORD *)this + 1);
  if (v5)
    return (int8x8_t *)(*(uint64_t (**)(int8x8_t *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(unsigned int *)(v5 + 32));
  return result;
}

uint64_t LiPerContextValue<ProShade::SamplerNode::Binding>::~LiPerContextValue(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v2 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      v3 = (_QWORD *)v2[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v2[2];
          v5 = *v4 == (_QWORD)v2;
          v2 = v4;
        }
        while (!v5);
      }
      v2 = v4;
    }
    while (v4 != (_QWORD *)(a1 + 8));
  }
  PCSpinLock::~PCSpinLock((PCSpinLock *)(a1 + 24));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void ProShade::InputNode::~InputNode(ProShade::InputNode *this, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)this = v2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 24)) = *(_QWORD *)(a2 + 32);
  LiString::dec((ProShade::InputNode *)((char *)this + 32));
}

ProShade::SamplerNode *ProShade::SamplerNode::SamplerNode(ProShade::SamplerNode *this, ProShade *a2, const PCString *a3, char a4, char a5)
{
  char v7;
  int v8;
  int v10;
  const void *v11;
  int v12;
  const void *v13;
  int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _BYTE *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _BYTE *v28;
  _BYTE *v30;
  _BYTE *v31;

  v7 = (char)a3;
  v8 = (int)a2;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = &off_1E65EB048;
  *((_BYTE *)this + 112) = 1;
  v10 = ProShade::shapeTexture(a2, a3);
  ProShade::InputNode::InputNode(this, (uint64_t *)off_1E656AC90, 2, v10, 4);
  *(_QWORD *)this = &off_1E656ABA0;
  *((_QWORD *)this + 12) = &unk_1E656AC70;
  *((_DWORD *)this + 14) = v8;
  *((_BYTE *)this + 60) = v7;
  *((_BYTE *)this + 61) = a4;
  *((_BYTE *)this + 62) = a5;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 10) = 1;
  LiString::LiString((LiString *)&v31, "_sampler");
  LiString::format((LiString *)*((unsigned int *)this + 12), (LiString *)&v30);
  v11 = v31;
  if (v31)
    v12 = *((_DWORD *)v31 - 2);
  else
    v12 = 0;
  v13 = v30;
  if (v30)
    v14 = *((_DWORD *)v30 - 2);
  else
    v14 = 0;
  v15 = v14 + (uint64_t)v12;
  v16 = (unsigned int *)malloc_type_malloc(v15 + 13, 0x8903763CuLL);
  v16[1] = v15;
  v16[2] = v15 + 1;
  atomic_store(1u, v16);
  atomic_store(0, v16);
  memcpy(v16 + 3, v11, v12);
  memcpy((char *)v16 + v12 + 12, v13, v14);
  *((_BYTE *)v16 + v15 + 12) = 0;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  LiString::dec((ProShade::SamplerNode *)((char *)this + 32));
  *((_QWORD *)this + 4) = v16 + 3;
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 + 1, v16));
  do
  {
    v19 = __ldaxr(v16);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v16));
  if (!v20)
    free(v16);
  if (v30)
  {
    v21 = (unsigned int *)(v30 - 12);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      *v30 = 0;
      if (v30)
        v24 = v30 - 12;
      else
        v24 = 0;
      free(v24);
    }
  }
  if (v31)
  {
    v25 = (unsigned int *)(v31 - 12);
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      *v31 = 0;
      if (v31)
        v28 = v31 - 12;
      else
        v28 = 0;
      free(v28);
    }
  }
  return this;
}

void sub_1B2CFCA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, _BYTE *a10)
{
  uint64_t v10;
  PC_Sp_counted_base **v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  do
  {
    v15 = __ldaxr(v13);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v13));
  if (!v16)
    free(v13);
  if (a9)
  {
    v17 = (unsigned int *)(a9 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a10)
  {
    v20 = (unsigned int *)(a10 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  LiPerContextValue<ProShade::SamplerNode::Binding>::~LiPerContextValue(v12);
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v10, (uint64_t)off_1E656AC90);
  *(_QWORD *)(v10 + 96) = &off_1E65EB048;
  *(_BYTE *)(v10 + 112) = 0;
  PCWeakCount::~PCWeakCount(v11);
  _Unwind_Resume(a1);
}

ProShade::SamplerNode *ProShade::SamplerNode::SamplerNode(ProShade::SamplerNode *this, ProShade *a2, const PCString *a3, char a4, char a5, const LiString *a6)
{
  char v9;
  int v10;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  v9 = (char)a3;
  v10 = (int)a2;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 12) = &off_1E65EB048;
  *((_BYTE *)this + 112) = 1;
  v12 = ProShade::shapeTexture(a2, a3);
  ProShade::InputNode::InputNode(this, (uint64_t *)off_1E656AC90, 2, v12, 4);
  *(_QWORD *)this = &off_1E656ABA0;
  *((_QWORD *)this + 12) = &unk_1E656AC70;
  *((_DWORD *)this + 14) = v10;
  *((_BYTE *)this + 60) = v9;
  *((_BYTE *)this + 61) = a4;
  *((_BYTE *)this + 62) = a5;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 10) = 1;
  if ((ProShade::SamplerNode *)((char *)this + 32) != a6)
  {
    LiString::dec((ProShade::SamplerNode *)((char *)this + 32));
    v13 = *(_QWORD *)a6;
    *((_QWORD *)this + 4) = *(_QWORD *)a6;
    if (v13)
    {
      v14 = (unsigned int *)(v13 - 12);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  return this;
}

void sub_1B2CFCC80(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  LiPerContextValue<ProShade::SamplerNode::Binding>::~LiPerContextValue(v3);
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)off_1E656AC90);
  *(_QWORD *)(v1 + 96) = v4 + 16;
  *(_BYTE *)(v1 + 112) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::SamplerNode::~SamplerNode(ProShade::SamplerNode *this, uint64_t *a2)
{
  uint64_t v4;
  ProShade::SamplerNode *v5;
  char *v6;
  ProShade::SamplerNode *v7;
  ProShade::SamplerNode *v8;
  BOOL v9;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[7];
  v6 = (char *)this + 64;
  v5 = (ProShade::SamplerNode *)*((_QWORD *)this + 8);
  if (v5 != (ProShade::SamplerNode *)((char *)this + 72))
  {
    do
    {
      v7 = (ProShade::SamplerNode *)*((_QWORD *)v5 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(ProShade::SamplerNode **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (ProShade::SamplerNode *)*((_QWORD *)v5 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != (ProShade::SamplerNode *)((char *)this + 72));
  }
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 22);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v6, *((_QWORD **)this + 9));
  ProShade::InputNode::~InputNode(this, (uint64_t)(a2 + 1));
}

void ProShade::SamplerNode::~SamplerNode(ProShade::SamplerNode *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = &off_1E65EB048;
  *(_BYTE *)(v1 + 112) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 104));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = &off_1E65EB048;
  *(_BYTE *)(v1 + 112) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 104));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::SamplerNode::~SamplerNode(ProShade::SamplerNode *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = &off_1E65EB048;
  *(_BYTE *)(v1 + 112) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 104));
}

{
  ProShade::SamplerNode::~SamplerNode((ProShade::SamplerNode *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t ProShade::SamplerNode::repr@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 - 12);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

void ProShade::SamplerNode::description(ProShade::SamplerNode *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  int v5;
  size_t v6;
  unsigned int *v7;
  _BYTE *v8;
  unsigned int v9;
  size_t v10;
  _DWORD *v11;
  int v12;
  size_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE *v22;

  ProShade::shapeString((OZChannelBase *)*((unsigned int *)this + 7), (const PCString *)*((unsigned int *)this + 6), (LiString *)&v22);
  v4 = v22;
  if (v22)
    v5 = *((_DWORD *)v22 - 2);
  else
    v5 = 0;
  v6 = v5;
  v7 = (unsigned int *)malloc_type_malloc(v5 + 14, 0x8903763CuLL);
  v7[1] = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  v8 = v7 + 3;
  atomic_store(0, v7);
  memcpy(v7 + 3, v4, v6);
  v8[v6] = 32;
  v8[v6 + 1] = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (_DWORD *)*((_QWORD *)this + 4);
  if (v11)
    v12 = *(v11 - 2);
  else
    v12 = 0;
  v13 = v10 + v12;
  v14 = (unsigned int *)malloc_type_malloc(v13 + 13, 0x8903763CuLL);
  v14[1] = v13;
  v14[2] = v13 + 1;
  atomic_store(1u, v14);
  atomic_store(0, v14);
  memcpy(v14 + 3, v8, v10);
  memcpy((char *)v14 + v10 + 12, v11, v12);
  *((_BYTE *)v14 + v13 + 12) = 0;
  *a2 = v14 + 3;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  do
  {
    v16 = __ldaxr(v7);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v7));
  if (!v17)
    free(v7);
  if (v22)
  {
    v18 = (unsigned int *)(v22 - 12);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      *v22 = 0;
      if (v22)
        v21 = v22 - 12;
      else
        v21 = 0;
      free(v21);
    }
  }
}

void sub_1B2CFD01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  do
  {
    v12 = __ldaxr(v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v10));
  if (!v13)
    free(v10);
  if (a10)
  {
    v14 = (unsigned int *)(a10 - 12);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

int8x8_t *ProShade::SamplerNode::computeHash(ProShade::SamplerNode *this, int8x8_t *a2)
{
  const char *v4;

  PCHashWriteStream::writeValue(a2, "SamplerNode");
  (*(void (**)(int8x8_t *, _QWORD))(*(_QWORD *)a2 + 56))(a2, *((unsigned int *)this + 14));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 60));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 61));
  PCHashWriteStream::writeValue(a2, *((_BYTE *)this + 62));
  if (*((_QWORD *)this + 4))
    v4 = (const char *)*((_QWORD *)this + 4);
  else
    v4 = "";
  return PCHashWriteStream::writeValue(a2, v4);
}

void ProShade::SamplerNode::inputs(uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(int *)(a2 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v2);
}

PCSharedCount *ProShade::SamplerNode::apply@<X0>(PC_Sp_counted_base *a1@<X0>, PCSharedCount *a2@<X8>)
{
  PCShared_base *v2;

  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a2[2].var0 = a1;
  if (a1)
    v2 = (PCShared_base *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  else
    v2 = 0;
  return PCSharedCount::PCSharedCount(a2 + 3, v2);
}

uint64_t ProShade::SamplerNode::atomic(ProShade::SamplerNode *this)
{
  return 1;
}

void ProShade::SamplerNode::clone(ProShade::SamplerNode *this)
{
  PCException *exception;
  PCString v2;
  PCString v3;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v3, "not implemented yet");
  PCString::PCString(&v2, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSTexture.cpp");
  PCException::PCException(exception, &v3, &v2, 124);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2CFD1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::SamplerNode::getValue(int a1, PCSharedCount *this)
{
  PCSharedCount::PCSharedCount(this);
}

uint64_t LiPerContext<ProShade::SamplerNode::Binding,LiPerContextValue_Traits<ProShade::SamplerNode::Binding>,LiOpenGLContextGetter>::get(uint64_t a1)
{
  os_unfair_lock_s *v2;
  LiGLState *v3;
  uint64_t v4;
  uint64_t v6[2];
  uint64_t *v7;

  v2 = (os_unfair_lock_s *)(a1 + 24);
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 24));
  v6[1] = 0;
  v6[0] = LiGLState::getCurrentContext(v3);
  v4 = std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::find<LiOpenGLContextGetter::C>(a1, v6);
  if (a1 + 8 == v4)
  {
    v7 = v6;
    v4 = (uint64_t)std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::SamplerNode::Binding>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::SamplerNode::Binding>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::SamplerNode::Binding>>>::__emplace_unique_key_args<LiOpenGLContextGetter::C,std::piecewise_construct_t const&,std::tuple<LiOpenGLContextGetter::C const&>,std::tuple<>>((uint64_t **)a1, v6, (uint64_t)&std::piecewise_construct, (_OWORD **)&v7);
  }
  PCSpinLock::unlock(v2);
  return v4 + 48;
}

void sub_1B2CFD2C0(_Unwind_Exception *a1)
{
  os_unfair_lock_s *v1;

  PCSpinLock::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::SamplerNode::setWrapMode(uint64_t a1, int a2)
{
  uint64_t result;

  result = LiPerContext<ProShade::SamplerNode::Binding,LiPerContextValue_Traits<ProShade::SamplerNode::Binding>,LiOpenGLContextGetter>::get(a1 + 64);
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t ProShade::SamplerNode::getWrapMode(ProShade::SamplerNode *this)
{
  return *(unsigned int *)(LiPerContext<ProShade::SamplerNode::Binding,LiPerContextValue_Traits<ProShade::SamplerNode::Binding>,LiOpenGLContextGetter>::get((uint64_t)this + 64)
                         + 8);
}

BOOL ProShade::SamplerNode::getTextureID(ProShade::SamplerNode *this, int *a2)
{
  int v3;

  v3 = *(_DWORD *)LiPerContext<ProShade::SamplerNode::Binding,LiPerContextValue_Traits<ProShade::SamplerNode::Binding>,LiOpenGLContextGetter>::get((uint64_t)this + 64);
  if ((v3 & 0x80000000) == 0)
    *a2 = v3;
  return v3 >= 0;
}

PCSharedCount *ProShade::Sampler::Sampler(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  this[2].var0 = 0;
  PCSharedCount::PCSharedCount(this + 3);
  this->var0 = (PC_Sp_counted_base *)&unk_1E656A018;
  ProShade::Uniform::Uniform(this + 4, 3, 4);
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E656A240;
  ProShade::Uniform::Uniform(this + 8, 3, 7);
  this[8].var0 = (PC_Sp_counted_base *)&unk_1E656A2C0;
  return this;
}

void sub_1B2CFD3F8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  v1[4].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 7);
  v1->var0 = (PC_Sp_counted_base *)(v3 + 16);
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::Sampler::Sampler(PCSharedCount *this, PC_Sp_counted_base *a2)
{
  this->var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  this[2].var0 = a2;
  if (a2)
    a2 = (PC_Sp_counted_base *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  PCSharedCount::PCSharedCount(this + 3, (PCShared_base *)a2);
  this->var0 = (PC_Sp_counted_base *)&unk_1E656A018;
  ProShade::Uniform::Uniform(this + 4, 3, 4);
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E656A240;
  ProShade::Uniform::Uniform(this + 8, 3, 7);
  this[8].var0 = (PC_Sp_counted_base *)&unk_1E656A2C0;
  return this;
}

void sub_1B2CFD4E0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  v1[4].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 7);
  v1->var0 = (PC_Sp_counted_base *)(v3 + 16);
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

_DWORD *ProShade::Sampler::setTexture(ProShade::Sampler *this, int a2)
{
  uint64_t v3;
  _DWORD *result;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
    throw_PCNullPointerException(1);
  result = (_DWORD *)LiPerContext<ProShade::SamplerNode::Binding,LiPerContextValue_Traits<ProShade::SamplerNode::Binding>,LiOpenGLContextGetter>::get(v3 + 64);
  *result = a2;
  result[1] = a2;
  return result;
}

uint64_t ProShade::Sampler::setWrapMode(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    throw_PCNullPointerException(1);
  result = LiPerContext<ProShade::SamplerNode::Binding,LiPerContextValue_Traits<ProShade::SamplerNode::Binding>,LiOpenGLContextGetter>::get(v3 + 64);
  *(_DWORD *)(result + 8) = a2;
  return result;
}

PCSharedCount *ProShade::Sampler::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  PC_Sp_counted_base *v6;

  v6 = (PC_Sp_counted_base *)operator new();
  ProShade::TextureFunc::TextureFunc((uint64_t)v6, a1, a2);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = v6;
  return PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
}

void sub_1B2CFD618(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C408AD29EEDLL);
  _Unwind_Resume(a1);
}

uint64_t ProShade::TextureFunc::TextureFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 168) = &off_1E65EB048;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656ADB8);
  *(_QWORD *)a1 = &off_1E656ACE0;
  *(_QWORD *)(a1 + 168) = &unk_1E656AD98;
  *(_QWORD *)(a1 + 48) = &unk_1E656A0C0;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), (const PCSharedCount *)(a2 + 24));
  ProShade::Texture::Texture((PCSharedCount *)(a1 + 80));
  *(_QWORD *)(a1 + 104) = &unk_1E6569AC8;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a3 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 128), (const PCSharedCount *)(a3 + 24));
  *(_QWORD *)(a1 + 136) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 152) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 160));
  ProShade::TextureFunc::setFrequency((ProShade::TextureFunc *)a1);
  return a1;
}

void sub_1B2CFD748(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  PCSharedCount *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  PCSharedCount *v9;

  v9 = v4;
  *(_QWORD *)(v1 + 136) = v8 + 16;
  PCSharedCount::~PCSharedCount(v9);
  *(_QWORD *)(v1 + 104) = v8 + 16;
  PCSharedCount::~PCSharedCount(v5);
  *(_QWORD *)(v1 + 80) = &off_1E656AB70;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 96));
  *(_QWORD *)(v1 + 48) = v7 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1E656ADB8);
  *(_QWORD *)(v1 + 168) = v6 + 16;
  *(_BYTE *)(v1 + 184) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B2CFD7E0()
{
  JUMPOUT(0x1B2CFD7C4);
}

void ProShade::Sampler::sample(const PCSharedCount *a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  PCSharedCount v6;
  PCSharedCount v7[2];
  PCSharedCount v8;
  _QWORD v9[3];
  PCSharedCount v10;
  void *v11;
  PCSharedCount v12;
  PCSharedCount v13;
  _QWORD v14[3];
  PCSharedCount v15;
  _QWORD v16[3];
  PCSharedCount v17;
  _QWORD v18[3];
  PCSharedCount v19;
  PCSharedCount v20;
  PCSharedCount v21;

  v11 = &unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v12, a1 + 10);
  ProShade::operator*(v14, &v11, a2);
  ProShade::Selector_base::_select((uint64_t)&a1[5], (const PCString *)4, &v6);
  v9[0] = &unk_1E6569AC8;
  v9[2] = v6.var0;
  PCSharedCount::PCSharedCount(&v10, v7);
  PCSharedCount::~PCSharedCount(v7);
  ProShade::operator-(v16, v14, v9);
  ProShade::Selector_base::_select((uint64_t)&a1[5], (const PCString *)6, &v20);
  v6.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v7[1] = v20;
  PCSharedCount::PCSharedCount(&v8, &v21);
  PCSharedCount::~PCSharedCount(&v21);
  ProShade::operator/(v18, v16, &v6);
  ProShade::Sampler::operator()((uint64_t)a1, (uint64_t)v18, a3);
  v18[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
  v6.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v8);
  v16[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v17);
  v9[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v10);
  v14[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v15);
  v11 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2CFD974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21,uint64_t a22,uint64_t a23,PCSharedCount a24,uint64_t a25,uint64_t a26,uint64_t a27,PCSharedCount a28)
{
  PCSharedCount *v28;
  PCSharedCount *v29;
  PCSharedCount *v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v32 - 112) = v31 + 16;
  PCSharedCount::~PCSharedCount(v30 + 3);
  PCSharedCount::~PCSharedCount(v29);
  a25 = v31 + 16;
  PCSharedCount::~PCSharedCount(&a28);
  PCSharedCount::~PCSharedCount(v28);
  a21 = v31 + 16;
  PCSharedCount::~PCSharedCount(&a24);
  PCSharedCount::~PCSharedCount(&a20);
  _Unwind_Resume(a1);
}

void sub_1B2CFDA10()
{
  JUMPOUT(0x1B2CFD9DCLL);
}

void sub_1B2CFDA1C()
{
  JUMPOUT(0x1B2CFD9E0);
}

void sub_1B2CFDA24()
{
  JUMPOUT(0x1B2CFD9F4);
}

double ProShade::TextureFunc::setFrequency(ProShade::TextureFunc *this)
{
  uint64_t v1;
  int v2;
  double result;

  v1 = *((_QWORD *)this + 15);
  if (!v1)
    throw_PCNullPointerException(1);
  v2 = *(_DWORD *)(v1 + 40);
  if (v2 == 2)
    v2 = 3;
  *((_DWORD *)this + 10) = v2;
  *(_QWORD *)&result = 0x400000003;
  *((_QWORD *)this + 3) = 0x400000003;
  return result;
}

PCSharedCount *ProShade::TextureFunc::TextureFunc(PCSharedCount *this, const ProShade::TextureFunc *a2)
{
  PC_Sp_counted_base *v4;

  this[21].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  this[22].var0 = 0;
  LOBYTE(this[23].var0) = 1;
  ProShade::Node::Node((ProShade::Node *)this, (uint64_t *)&off_1E656ADB8);
  this->var0 = (PC_Sp_counted_base *)&off_1E656ACE0;
  this[21].var0 = (PC_Sp_counted_base *)&unk_1E656AD98;
  this[6].var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  LOBYTE(this[7].var0) = *((_BYTE *)a2 + 56);
  this[8].var0 = *(PC_Sp_counted_base **)((char *)a2 + 64);
  PCSharedCount::PCSharedCount(this + 9, (const PCSharedCount *)a2 + 9);
  v4 = (PC_Sp_counted_base *)*((_QWORD *)a2 + 11);
  this[10].var0 = (PC_Sp_counted_base *)&off_1E656AB70;
  this[11].var0 = v4;
  PCSharedCount::PCSharedCount(this + 12, (const PCSharedCount *)a2 + 12);
  this[13].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  LOBYTE(this[14].var0) = *((_BYTE *)a2 + 112);
  this[15].var0 = *(PC_Sp_counted_base **)((char *)a2 + 120);
  PCSharedCount::PCSharedCount(this + 16, (const PCSharedCount *)a2 + 16);
  this[17].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[19].var0 = 0;
  PCSharedCount::PCSharedCount(this + 20);
  ProShade::TextureFunc::setFrequency((ProShade::TextureFunc *)this);
  return this;
}

void sub_1B2CFDB9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  PCSharedCount *v5;
  PCSharedCount *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  PCSharedCount *v10;

  v10 = v5;
  *(_QWORD *)(v1 + 136) = v9 + 16;
  PCSharedCount::~PCSharedCount(v10);
  *(_QWORD *)(v1 + 104) = v9 + 16;
  PCSharedCount::~PCSharedCount(v6);
  *(_QWORD *)(v1 + 80) = v8;
  PCSharedCount::~PCSharedCount(v4);
  *(_QWORD *)(v1 + 48) = v7 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1E656ADB8);
  *(_QWORD *)(v1 + 168) = &off_1E65EB048;
  *(_BYTE *)(v1 + 184) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B2CFDC34()
{
  JUMPOUT(0x1B2CFDC10);
}

uint64_t ProShade::TextureFunc::TextureFunc(uint64_t a1, uint64_t a2, const PCSharedCount *a3, uint64_t a4)
{
  const void *v8;
  _QWORD *v9;
  PCShared_base *v10;
  PC_Sp_counted_base *var0;

  *(_QWORD *)(a1 + 168) = &off_1E65EB048;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656ADB8);
  *(_QWORD *)a1 = &off_1E656ACE0;
  *(_QWORD *)(a1 + 168) = &unk_1E656AD98;
  v8 = *(const void **)(a2 + 16);
  if (v8)
  {
    *(_QWORD *)(a1 + 48) = &unk_1E656A0C0;
    *(_QWORD *)(a1 + 64) = v9;
    if (v9)
      v10 = (PCShared_base *)((char *)v9 + *(_QWORD *)(*v9 - 24));
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
    *(_QWORD *)(a1 + 48) = &unk_1E656A0C0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v10);
  var0 = a3[1].var0;
  *(_QWORD *)(a1 + 80) = &off_1E656AB70;
  *(_QWORD *)(a1 + 88) = var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 96), a3 + 2);
  *(_QWORD *)(a1 + 104) = &unk_1E6569AC8;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a4 + 8);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a4 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 128), (const PCSharedCount *)(a4 + 24));
  *(_QWORD *)(a1 + 136) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 152) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 160));
  ProShade::TextureFunc::setFrequency((ProShade::TextureFunc *)a1);
  return a1;
}

void sub_1B2CFDDA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  PCSharedCount *v5;
  PCSharedCount *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  PCSharedCount *v10;

  v10 = v4;
  *(_QWORD *)(v1 + 136) = v9 + 16;
  PCSharedCount::~PCSharedCount(v10);
  *(_QWORD *)(v1 + 104) = v9 + 16;
  PCSharedCount::~PCSharedCount(v6);
  *(_QWORD *)(v1 + 80) = v8;
  PCSharedCount::~PCSharedCount(v5);
  *(_QWORD *)(v1 + 48) = &unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)&off_1E656ADB8);
  *(_QWORD *)(v1 + 168) = v7 + 16;
  *(_BYTE *)(v1 + 184) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void sub_1B2CFDE40()
{
  JUMPOUT(0x1B2CFDE24);
}

uint64_t ProShade::TextureFunc::TextureFunc(uint64_t a1, uint64_t a2, const PCSharedCount *a3, uint64_t a4, uint64_t a5)
{
  const void *v10;
  _QWORD *v11;
  PCShared_base *v12;
  PC_Sp_counted_base *var0;

  *(_QWORD *)(a1 + 168) = &off_1E65EB048;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656ADB8);
  *(_QWORD *)a1 = &off_1E656ACE0;
  *(_QWORD *)(a1 + 168) = &unk_1E656AD98;
  v10 = *(const void **)(a2 + 16);
  if (v10)
  {
    *(_QWORD *)(a1 + 48) = &unk_1E656A0C0;
    *(_QWORD *)(a1 + 64) = v11;
    if (v11)
      v12 = (PCShared_base *)((char *)v11 + *(_QWORD *)(*v11 - 24));
    else
      v12 = 0;
  }
  else
  {
    v12 = 0;
    *(_QWORD *)(a1 + 48) = &unk_1E656A0C0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v12);
  var0 = a3[1].var0;
  *(_QWORD *)(a1 + 80) = &off_1E656AB70;
  *(_QWORD *)(a1 + 88) = var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 96), a3 + 2);
  *(_QWORD *)(a1 + 104) = &unk_1E6569AC8;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a4 + 8);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a4 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 128), (const PCSharedCount *)(a4 + 24));
  *(_QWORD *)(a1 + 136) = &unk_1E6569AC8;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a5 + 8);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a5 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 160), (const PCSharedCount *)(a5 + 24));
  ProShade::TextureFunc::setFrequency((ProShade::TextureFunc *)a1);
  return a1;
}

void sub_1B2CFDFC8(_Unwind_Exception *a1)
{
  PC_Sp_counted_base **v1;
  uint64_t v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  PCSharedCount *v5;
  PCSharedCount *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 136) = v8 + 16;
  PCSharedCount::~PCSharedCount(v4);
  *(_QWORD *)(v2 + 104) = v8 + 16;
  PCSharedCount::~PCSharedCount(v6);
  *(_QWORD *)(v2 + 80) = v7;
  PCSharedCount::~PCSharedCount(v5);
  *(_QWORD *)(v2 + 48) = &unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v2, (uint64_t *)&off_1E656ADB8);
  *(_QWORD *)(v2 + 168) = &off_1E65EB048;
  *(_BYTE *)(v2 + 184) = 0;
  PCWeakCount::~PCWeakCount(v1);
  _Unwind_Resume(a1);
}

void sub_1B2CFE064()
{
  JUMPOUT(0x1B2CFE040);
}

void ProShade::TextureFunc::~TextureFunc(PCSharedCount *this, PC_Sp_counted_base **a2)
{
  PC_Sp_counted_base *v4;
  PC_Sp_counted_base *v5;

  v4 = *a2;
  this->var0 = *a2;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((_QWORD *)v4 - 3)) = a2[5];
  this[17].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 20);
  this[13].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 16);
  this[10].var0 = (PC_Sp_counted_base *)&off_1E656AB70;
  PCSharedCount::~PCSharedCount(this + 12);
  this[6].var0 = (PC_Sp_counted_base *)&unk_1E656A0C0;
  PCSharedCount::~PCSharedCount(this + 9);
  v5 = a2[1];
  this->var0 = v5;
  *(PC_Sp_counted_base **)((char *)&this->var0 + *((_QWORD *)v5 - 3)) = a2[4];
  LiString::dec((LiString *)&this[4]);
}

void ProShade::TextureFunc::~TextureFunc(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = &off_1E65EB048;
  *(_BYTE *)(v1 + 184) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 176));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = &off_1E65EB048;
  *(_BYTE *)(v1 + 184) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 176));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::TextureFunc::~TextureFunc(ProShade::TextureFunc *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = &off_1E65EB048;
  *(_BYTE *)(v1 + 184) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 176));
}

{
  ProShade::TextureFunc::~TextureFunc((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void ProShade::TextureFunc::repr(ProShade::TextureFunc *this@<X0>, const PCString *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  __CFString *v7;
  int v8;
  uint64_t v9;
  char *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  __CFString *var0;
  int length;
  int v18;
  __CFString *v19;
  int v20;
  __CFString *v21;
  int v22;
  char *v23;
  uint64_t v24;
  unsigned int v25;
  size_t v26;
  unsigned int *v27;
  _BYTE *v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  __CFString *v33;
  int v34;
  size_t v35;
  unsigned int *v36;
  unsigned int v37;
  size_t v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int v41;
  _BYTE *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  char *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  char *v53;
  uint64_t v54;
  unsigned int v55;
  size_t v56;
  unsigned int *v57;
  _BYTE *v58;
  unsigned int v59;
  uint64_t v60;
  size_t v61;
  __CFString *v62;
  int v63;
  char *v64;
  uint64_t v65;
  unsigned int v66;
  size_t v67;
  unsigned int *v68;
  _BYTE *v69;
  unsigned int v70;
  uint64_t v71;
  size_t v72;
  __CFString *v73;
  int v74;
  size_t v75;
  unsigned int *v76;
  unsigned int v77;
  size_t v78;
  unsigned int *v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  char *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  BOOL v94;
  size_t v95;
  unsigned int *v96;
  unsigned int v97;
  size_t v98;
  unsigned int *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int v106;
  char *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int *v112;
  unsigned int v113;
  uint64_t v114;
  unsigned int v115;
  size_t v116;
  unsigned int *v117;
  _BYTE *v118;
  unsigned int v119;
  uint64_t v120;
  size_t v121;
  __CFString *v122;
  int v123;
  size_t v124;
  unsigned int *v125;
  unsigned int v126;
  size_t v127;
  _QWORD *v128;
  unsigned int *v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  char *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int *v141;
  unsigned int v142;
  unsigned int v143;
  __CFString *v144;
  int v145;
  __CFString *v146;
  int v147;
  unsigned int *v148;
  uint64_t v149;
  unsigned int v150;
  size_t v151;
  unsigned int *v152;
  _BYTE *v153;
  unsigned int v154;
  uint64_t v155;
  size_t v156;
  __CFString *v157;
  int v158;
  char *v159;
  uint64_t v160;
  unsigned int v161;
  size_t v162;
  unsigned int *v163;
  _BYTE *v164;
  unsigned int v165;
  uint64_t v166;
  size_t v167;
  __CFString *v168;
  int v169;
  size_t v170;
  unsigned int *v171;
  unsigned int v172;
  size_t v173;
  unsigned int *v174;
  unsigned int *v175;
  unsigned int v176;
  uint64_t v177;
  size_t v178;
  const void *v179;
  int v180;
  size_t v181;
  unsigned int *v182;
  unsigned int v183;
  size_t v184;
  unsigned int *v185;
  unsigned int *v186;
  unsigned int v187;
  uint64_t v188;
  size_t v189;
  const void *v190;
  int v191;
  size_t v192;
  unsigned int *v193;
  unsigned int v194;
  size_t v195;
  unsigned int *v196;
  unsigned int *v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int *v201;
  unsigned int v202;
  unsigned int v203;
  _BYTE *v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  char *v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  unsigned int v216;
  unsigned int *v217;
  unsigned int v218;
  size_t v219;
  unsigned int *v220;
  unsigned int v221;
  size_t v222;
  unsigned int *v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  _BYTE *v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  unsigned int v235;
  unsigned int *v236;
  unsigned int v237;
  unsigned int v238;
  char *v239;
  unsigned int v240;
  unsigned int v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int *v244;
  unsigned int v245;
  __CFString *v246;
  int v247;
  char *v248;
  uint64_t v249;
  unsigned int v250;
  size_t v251;
  unsigned int *v252;
  _BYTE *v253;
  unsigned int v254;
  uint64_t v255;
  size_t v256;
  __CFString *v257;
  int v258;
  size_t v259;
  unsigned int *v260;
  unsigned int v261;
  size_t v262;
  unsigned int *v263;
  unsigned int *v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int v270;
  char *v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  unsigned int v275;
  unsigned int *v276;
  unsigned int v277;
  char *v278;
  uint64_t v279;
  unsigned int v280;
  size_t v281;
  unsigned int *v282;
  _BYTE *v283;
  unsigned int v284;
  uint64_t v285;
  size_t v286;
  __CFString *v287;
  int v288;
  size_t v289;
  unsigned int *v290;
  unsigned int v291;
  size_t v292;
  unsigned int *v293;
  unsigned int *v294;
  unsigned int v295;
  uint64_t v296;
  size_t v297;
  const void *v298;
  int v299;
  size_t v300;
  unsigned int *v301;
  unsigned int v302;
  size_t v303;
  unsigned int *v304;
  unsigned int *v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int *v309;
  unsigned int v310;
  unsigned int v311;
  _BYTE *v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int *v317;
  unsigned int v318;
  unsigned int v319;
  char *v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int *v325;
  unsigned int v326;
  char *v327;
  uint64_t v328;
  unsigned int v329;
  size_t v330;
  unsigned int *v331;
  _BYTE *v332;
  unsigned int v333;
  uint64_t v334;
  size_t v335;
  __CFString *v336;
  int v337;
  size_t v338;
  unsigned int *v339;
  unsigned int v340;
  size_t v341;
  unsigned int *v342;
  unsigned int *v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int *v347;
  unsigned int v348;
  unsigned int v349;
  char *v350;
  unsigned int v351;
  unsigned int v352;
  unsigned int v353;
  unsigned int v354;
  unsigned int *v355;
  unsigned int v356;
  PCException *exception;
  PCException *v358;
  _QWORD *v359;
  _QWORD *v360;
  _QWORD *v361;
  _QWORD *v362;
  _BYTE *__src;
  _BYTE *v364;
  PCString v365;
  PCString v366;

  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 56);
    if (v6 == 34067)
    {
      if (*(_BYTE *)(v5 + 60))
      {
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v5 + 160))(&v366);
        var0 = v366.var0;
        if (v366.var0)
          length = v366.var0[-1].length;
        else
          length = 0;
        v53 = (char *)malloc_type_malloc(length + 24, 0x8903763CuLL);
        v54 = length + 11;
        *((_DWORD *)v53 + 2) = length + 12;
        atomic_store(1u, (unsigned int *)v53);
        atomic_store(0, (unsigned int *)v53);
        *(_QWORD *)(v53 + 12) = *(_QWORD *)"shadowCube(";
        *((_DWORD *)v53 + 1) = v54;
        *(_DWORD *)(v53 + 19) = 677732981;
        memcpy(v53 + 23, var0, length);
        v53[v54 + 12] = 0;
        do
          v55 = __ldaxr((unsigned int *)v53);
        while (__stlxr(v55 + 1, (unsigned int *)v53));
        v56 = *((int *)v53 + 1);
        v57 = (unsigned int *)malloc_type_malloc(v56 + 15, 0x8903763CuLL);
        v57[1] = v56 + 2;
        v57[2] = v56 + 3;
        atomic_store(1u, v57);
        v58 = v57 + 3;
        atomic_store(0, v57);
        memcpy(v57 + 3, v53 + 12, v56);
        *(_WORD *)&v58[v56] = 8236;
        v58[v56 + 2] = 0;
        do
          v59 = __ldaxr(v57);
        while (__stlxr(v59 + 1, v57));
        v60 = *((_QWORD *)this + 15);
        if (!v60)
          throw_PCNullPointerException(1);
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v60 + 16))(&v365);
        v61 = (int)v57[1];
        v62 = v365.var0;
        if (v365.var0)
          v63 = v365.var0[-1].length;
        else
          v63 = 0;
        v75 = v61 + v63;
        v76 = (unsigned int *)malloc_type_malloc(v75 + 13, 0x8903763CuLL);
        v76[1] = v75;
        v76[2] = v75 + 1;
        atomic_store(1u, v76);
        atomic_store(0, v76);
        memcpy(v76 + 3, v58, v61);
        memcpy((char *)v76 + v61 + 12, v62, v63);
        *((_BYTE *)v76 + v75 + 12) = 0;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 + 1, v76));
        v78 = (int)v76[1];
        v79 = (unsigned int *)malloc_type_malloc(v78 + 14, 0x8903763CuLL);
        v79[1] = v78 + 1;
        v79[2] = v78 + 2;
        atomic_store(1u, v79);
        v80 = v79 + 3;
        atomic_store(0, v79);
        memcpy(v79 + 3, v76 + 3, v78);
        *((_BYTE *)v80 + v78) = 41;
        *((_BYTE *)v80 + v78 + 1) = 0;
        *a3 = v79 + 3;
        do
          v81 = __ldaxr(v79);
        while (__stlxr(v81 + 1, v79));
        do
        {
          v82 = __ldaxr(v76);
          v83 = v82 - 1;
        }
        while (__stlxr(v83, v76));
        if (!v83)
          free(v76);
        if (v365.var0)
        {
          v84 = (unsigned int *)&v365.var0[-1].data + 1;
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, v84));
          if (!v86)
          {
            LOBYTE(v365.var0->isa) = 0;
            if (v365.var0)
              v87 = (char *)&v365.var0[-1].data + 4;
            else
              v87 = 0;
            free(v87);
          }
        }
        do
        {
          v88 = __ldaxr(v57);
          v89 = v88 - 1;
        }
        while (__stlxr(v89, v57));
        if (!v89)
          free(v57);
        do
        {
          v90 = __ldaxr((unsigned int *)v53);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, (unsigned int *)v53));
        if (!v91)
          free(v53);
        if (v366.var0)
        {
          v92 = (unsigned int *)&v366.var0[-1].data + 1;
          do
          {
            v93 = __ldaxr(v92);
            v94 = --v93 == 0;
          }
          while (__stlxr(v93, v92));
          goto LABEL_419;
        }
      }
      else if (*(_BYTE *)(v5 + 61))
      {
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v5 + 160))(&v366);
        v19 = v366.var0;
        if (v366.var0)
          v20 = v366.var0[-1].length;
        else
          v20 = 0;
        v148 = (unsigned int *)malloc_type_malloc(v20 + 28, 0x8903763CuLL);
        v149 = v20 + 15;
        v148[2] = v20 + 16;
        atomic_store(1u, v148);
        atomic_store(0, v148);
        qmemcpy(v148 + 3, "textureCubeLod(", 15);
        v148[1] = v149;
        memcpy((char *)v148 + 27, v19, v20);
        *((_BYTE *)v148 + v149 + 12) = 0;
        do
          v150 = __ldaxr(v148);
        while (__stlxr(v150 + 1, v148));
        v151 = (int)v148[1];
        v152 = (unsigned int *)malloc_type_malloc(v151 + 15, 0x8903763CuLL);
        v152[1] = v151 + 2;
        v152[2] = v151 + 3;
        atomic_store(1u, v152);
        v153 = v152 + 3;
        atomic_store(0, v152);
        memcpy(v152 + 3, v148 + 3, v151);
        *(_WORD *)&v153[v151] = 8236;
        v153[v151 + 2] = 0;
        do
          v154 = __ldaxr(v152);
        while (__stlxr(v154 + 1, v152));
        v155 = *((_QWORD *)this + 15);
        if (!v155)
          throw_PCNullPointerException(1);
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v155 + 16))(&v365);
        v360 = a3;
        v156 = (int)v152[1];
        v157 = v365.var0;
        if (v365.var0)
          v158 = v365.var0[-1].length;
        else
          v158 = 0;
        v170 = v156 + v158;
        v171 = (unsigned int *)malloc_type_malloc(v170 + 13, 0x8903763CuLL);
        v171[1] = v170;
        v171[2] = v170 + 1;
        atomic_store(1u, v171);
        atomic_store(0, v171);
        memcpy(v171 + 3, v153, v156);
        memcpy((char *)v171 + v156 + 12, v157, v158);
        *((_BYTE *)v171 + v170 + 12) = 0;
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 + 1, v171));
        v173 = (int)v171[1];
        v174 = (unsigned int *)malloc_type_malloc(v173 + 15, 0x8903763CuLL);
        v174[1] = v173 + 2;
        v174[2] = v173 + 3;
        atomic_store(1u, v174);
        v175 = v174 + 3;
        atomic_store(0, v174);
        memcpy(v174 + 3, v171 + 3, v173);
        *(_WORD *)((char *)v175 + v173) = 8236;
        *((_BYTE *)v175 + v173 + 2) = 0;
        do
          v176 = __ldaxr(v174);
        while (__stlxr(v176 + 1, v174));
        v177 = *((_QWORD *)this + 19);
        if (!v177)
          throw_PCNullPointerException(1);
        (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v177 + 16))(&v364);
        v178 = (int)v174[1];
        v179 = v364;
        if (v364)
          v180 = *((_DWORD *)v364 - 2);
        else
          v180 = 0;
        v192 = v178 + v180;
        v193 = (unsigned int *)malloc_type_malloc(v192 + 13, 0x8903763CuLL);
        v193[1] = v192;
        v193[2] = v192 + 1;
        atomic_store(1u, v193);
        atomic_store(0, v193);
        memcpy(v193 + 3, v174 + 3, v178);
        memcpy((char *)v193 + v178 + 12, v179, v180);
        *((_BYTE *)v193 + v192 + 12) = 0;
        do
          v194 = __ldaxr(v193);
        while (__stlxr(v194 + 1, v193));
        v195 = (int)v193[1];
        v196 = (unsigned int *)malloc_type_malloc(v195 + 14, 0x8903763CuLL);
        v196[1] = v195 + 1;
        v196[2] = v195 + 2;
        atomic_store(1u, v196);
        v197 = v196 + 3;
        atomic_store(0, v196);
        memcpy(v196 + 3, v193 + 3, v195);
        *((_BYTE *)v197 + v195) = 41;
        *((_BYTE *)v197 + v195 + 1) = 0;
        *v360 = v196 + 3;
        do
          v198 = __ldaxr(v196);
        while (__stlxr(v198 + 1, v196));
        do
        {
          v199 = __ldaxr(v193);
          v200 = v199 - 1;
        }
        while (__stlxr(v200, v193));
        if (!v200)
          free(v193);
        if (v364)
        {
          v201 = (unsigned int *)(v364 - 12);
          do
          {
            v202 = __ldaxr(v201);
            v203 = v202 - 1;
          }
          while (__stlxr(v203, v201));
          if (!v203)
          {
            *v364 = 0;
            if (v364)
              v204 = v364 - 12;
            else
              v204 = 0;
            free(v204);
          }
        }
        do
        {
          v205 = __ldaxr(v174);
          v206 = v205 - 1;
        }
        while (__stlxr(v206, v174));
        if (!v206)
          free(v174);
        do
        {
          v207 = __ldaxr(v171);
          v208 = v207 - 1;
        }
        while (__stlxr(v208, v171));
        if (!v208)
          free(v171);
        if (v365.var0)
        {
          v209 = (unsigned int *)&v365.var0[-1].data + 1;
          do
          {
            v210 = __ldaxr(v209);
            v211 = v210 - 1;
          }
          while (__stlxr(v211, v209));
          if (!v211)
          {
            LOBYTE(v365.var0->isa) = 0;
            if (v365.var0)
              v212 = (char *)&v365.var0[-1].data + 4;
            else
              v212 = 0;
            free(v212);
          }
        }
        do
        {
          v213 = __ldaxr(v152);
          v214 = v213 - 1;
        }
        while (__stlxr(v214, v152));
        if (!v214)
          free(v152);
        do
        {
          v215 = __ldaxr(v148);
          v216 = v215 - 1;
        }
        while (__stlxr(v216, v148));
        if (!v216)
          free(v148);
        if (v366.var0)
        {
          v217 = (unsigned int *)&v366.var0[-1].data + 1;
          do
          {
            v218 = __ldaxr(v217);
            v94 = --v218 == 0;
          }
          while (__stlxr(v218, v217));
          goto LABEL_419;
        }
      }
      else if (*(_BYTE *)(v5 + 62))
      {
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v5 + 160))(&v366);
        v144 = v366.var0;
        if (v366.var0)
          v145 = v366.var0[-1].length;
        else
          v145 = 0;
        v278 = (char *)malloc_type_malloc(v145 + 25, 0x8903763CuLL);
        v279 = v145 + 12;
        *((_DWORD *)v278 + 2) = v145 + 13;
        atomic_store(1u, (unsigned int *)v278);
        atomic_store(0, (unsigned int *)v278);
        *(_QWORD *)(v278 + 12) = *(_QWORD *)"textureCube(";
        *((_DWORD *)v278 + 1) = v279;
        *((_DWORD *)v278 + 5) = 677732981;
        memcpy(v278 + 24, v144, v145);
        v278[v279 + 12] = 0;
        do
          v280 = __ldaxr((unsigned int *)v278);
        while (__stlxr(v280 + 1, (unsigned int *)v278));
        v281 = *((int *)v278 + 1);
        v282 = (unsigned int *)malloc_type_malloc(v281 + 15, 0x8903763CuLL);
        v282[1] = v281 + 2;
        v282[2] = v281 + 3;
        atomic_store(1u, v282);
        v283 = v282 + 3;
        atomic_store(0, v282);
        memcpy(v282 + 3, v278 + 12, v281);
        *(_WORD *)&v283[v281] = 8236;
        v283[v281 + 2] = 0;
        do
          v284 = __ldaxr(v282);
        while (__stlxr(v284 + 1, v282));
        v285 = *((_QWORD *)this + 15);
        if (!v285)
          throw_PCNullPointerException(1);
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v285 + 16))(&v365);
        v362 = a3;
        v286 = (int)v282[1];
        v287 = v365.var0;
        if (v365.var0)
          v288 = v365.var0[-1].length;
        else
          v288 = 0;
        v289 = v286 + v288;
        v290 = (unsigned int *)malloc_type_malloc(v289 + 13, 0x8903763CuLL);
        v290[1] = v289;
        v290[2] = v289 + 1;
        atomic_store(1u, v290);
        atomic_store(0, v290);
        memcpy(v290 + 3, v283, v286);
        memcpy((char *)v290 + v286 + 12, v287, v288);
        *((_BYTE *)v290 + v289 + 12) = 0;
        do
          v291 = __ldaxr(v290);
        while (__stlxr(v291 + 1, v290));
        v292 = (int)v290[1];
        v293 = (unsigned int *)malloc_type_malloc(v292 + 15, 0x8903763CuLL);
        v293[1] = v292 + 2;
        v293[2] = v292 + 3;
        atomic_store(1u, v293);
        v294 = v293 + 3;
        atomic_store(0, v293);
        memcpy(v293 + 3, v290 + 3, v292);
        *(_WORD *)((char *)v294 + v292) = 8236;
        *((_BYTE *)v294 + v292 + 2) = 0;
        do
          v295 = __ldaxr(v293);
        while (__stlxr(v295 + 1, v293));
        v296 = *((_QWORD *)this + 19);
        if (!v296)
          throw_PCNullPointerException(1);
        (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v296 + 16))(&v364);
        v297 = (int)v293[1];
        v298 = v364;
        if (v364)
          v299 = *((_DWORD *)v364 - 2);
        else
          v299 = 0;
        v300 = v297 + v299;
        v301 = (unsigned int *)malloc_type_malloc(v300 + 13, 0x8903763CuLL);
        v301[1] = v300;
        v301[2] = v300 + 1;
        atomic_store(1u, v301);
        atomic_store(0, v301);
        memcpy(v301 + 3, v293 + 3, v297);
        memcpy((char *)v301 + v297 + 12, v298, v299);
        *((_BYTE *)v301 + v300 + 12) = 0;
        do
          v302 = __ldaxr(v301);
        while (__stlxr(v302 + 1, v301));
        v303 = (int)v301[1];
        v304 = (unsigned int *)malloc_type_malloc(v303 + 14, 0x8903763CuLL);
        v304[1] = v303 + 1;
        v304[2] = v303 + 2;
        atomic_store(1u, v304);
        v305 = v304 + 3;
        atomic_store(0, v304);
        memcpy(v304 + 3, v301 + 3, v303);
        *((_BYTE *)v305 + v303) = 41;
        *((_BYTE *)v305 + v303 + 1) = 0;
        *v362 = v304 + 3;
        do
          v306 = __ldaxr(v304);
        while (__stlxr(v306 + 1, v304));
        do
        {
          v307 = __ldaxr(v301);
          v308 = v307 - 1;
        }
        while (__stlxr(v308, v301));
        if (!v308)
          free(v301);
        if (v364)
        {
          v309 = (unsigned int *)(v364 - 12);
          do
          {
            v310 = __ldaxr(v309);
            v311 = v310 - 1;
          }
          while (__stlxr(v311, v309));
          if (!v311)
          {
            *v364 = 0;
            if (v364)
              v312 = v364 - 12;
            else
              v312 = 0;
            free(v312);
          }
        }
        do
        {
          v313 = __ldaxr(v293);
          v314 = v313 - 1;
        }
        while (__stlxr(v314, v293));
        if (!v314)
          free(v293);
        do
        {
          v315 = __ldaxr(v290);
          v316 = v315 - 1;
        }
        while (__stlxr(v316, v290));
        if (!v316)
          free(v290);
        if (v365.var0)
        {
          v317 = (unsigned int *)&v365.var0[-1].data + 1;
          do
          {
            v318 = __ldaxr(v317);
            v319 = v318 - 1;
          }
          while (__stlxr(v319, v317));
          if (!v319)
          {
            LOBYTE(v365.var0->isa) = 0;
            if (v365.var0)
              v320 = (char *)&v365.var0[-1].data + 4;
            else
              v320 = 0;
            free(v320);
          }
        }
        do
        {
          v321 = __ldaxr(v282);
          v322 = v321 - 1;
        }
        while (__stlxr(v322, v282));
        if (!v322)
          free(v282);
        do
        {
          v323 = __ldaxr((unsigned int *)v278);
          v324 = v323 - 1;
        }
        while (__stlxr(v324, (unsigned int *)v278));
        if (!v324)
          free(v278);
        if (v366.var0)
        {
          v325 = (unsigned int *)&v366.var0[-1].data + 1;
          do
          {
            v326 = __ldaxr(v325);
            v94 = --v326 == 0;
          }
          while (__stlxr(v326, v325));
          goto LABEL_419;
        }
      }
      else
      {
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v5 + 160))(&v366);
        v246 = v366.var0;
        if (v366.var0)
          v247 = v366.var0[-1].length;
        else
          v247 = 0;
        v327 = (char *)malloc_type_malloc(v247 + 25, 0x8903763CuLL);
        v328 = v247 + 12;
        *((_DWORD *)v327 + 2) = v247 + 13;
        atomic_store(1u, (unsigned int *)v327);
        atomic_store(0, (unsigned int *)v327);
        *(_QWORD *)(v327 + 12) = *(_QWORD *)"textureCube(";
        *((_DWORD *)v327 + 1) = v328;
        *((_DWORD *)v327 + 5) = 677732981;
        memcpy(v327 + 24, v246, v247);
        v327[v328 + 12] = 0;
        do
          v329 = __ldaxr((unsigned int *)v327);
        while (__stlxr(v329 + 1, (unsigned int *)v327));
        v330 = *((int *)v327 + 1);
        v331 = (unsigned int *)malloc_type_malloc(v330 + 15, 0x8903763CuLL);
        v331[1] = v330 + 2;
        v331[2] = v330 + 3;
        atomic_store(1u, v331);
        v332 = v331 + 3;
        atomic_store(0, v331);
        memcpy(v331 + 3, v327 + 12, v330);
        *(_WORD *)&v332[v330] = 8236;
        v332[v330 + 2] = 0;
        do
          v333 = __ldaxr(v331);
        while (__stlxr(v333 + 1, v331));
        v334 = *((_QWORD *)this + 15);
        if (!v334)
          throw_PCNullPointerException(1);
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v334 + 16))(&v365);
        v335 = (int)v331[1];
        v336 = v365.var0;
        if (v365.var0)
          v337 = v365.var0[-1].length;
        else
          v337 = 0;
        v338 = v335 + v337;
        v339 = (unsigned int *)malloc_type_malloc(v338 + 13, 0x8903763CuLL);
        v339[1] = v338;
        v339[2] = v338 + 1;
        atomic_store(1u, v339);
        atomic_store(0, v339);
        memcpy(v339 + 3, v332, v335);
        memcpy((char *)v339 + v335 + 12, v336, v337);
        *((_BYTE *)v339 + v338 + 12) = 0;
        do
          v340 = __ldaxr(v339);
        while (__stlxr(v340 + 1, v339));
        v341 = (int)v339[1];
        v342 = (unsigned int *)malloc_type_malloc(v341 + 14, 0x8903763CuLL);
        v342[1] = v341 + 1;
        v342[2] = v341 + 2;
        atomic_store(1u, v342);
        v343 = v342 + 3;
        atomic_store(0, v342);
        memcpy(v342 + 3, v339 + 3, v341);
        *((_BYTE *)v343 + v341) = 41;
        *((_BYTE *)v343 + v341 + 1) = 0;
        *a3 = v342 + 3;
        do
          v344 = __ldaxr(v342);
        while (__stlxr(v344 + 1, v342));
        do
        {
          v345 = __ldaxr(v339);
          v346 = v345 - 1;
        }
        while (__stlxr(v346, v339));
        if (!v346)
          free(v339);
        if (v365.var0)
        {
          v347 = (unsigned int *)&v365.var0[-1].data + 1;
          do
          {
            v348 = __ldaxr(v347);
            v349 = v348 - 1;
          }
          while (__stlxr(v349, v347));
          if (!v349)
          {
            LOBYTE(v365.var0->isa) = 0;
            if (v365.var0)
              v350 = (char *)&v365.var0[-1].data + 4;
            else
              v350 = 0;
            free(v350);
          }
        }
        do
        {
          v351 = __ldaxr(v331);
          v352 = v351 - 1;
        }
        while (__stlxr(v352, v331));
        if (!v352)
          free(v331);
        do
        {
          v353 = __ldaxr((unsigned int *)v327);
          v354 = v353 - 1;
        }
        while (__stlxr(v354, (unsigned int *)v327));
        if (!v354)
          free(v327);
        if (v366.var0)
        {
          v355 = (unsigned int *)&v366.var0[-1].data + 1;
          do
          {
            v356 = __ldaxr(v355);
            v94 = --v356 == 0;
          }
          while (__stlxr(v356, v355));
          goto LABEL_419;
        }
      }
    }
    else
    {
      if (v6 != 3553)
      {
        exception = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString(&v366, "not implemented yet");
        PCString::PCString(&v365, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSTexture.cpp");
        PCException::PCException(exception, &v366, &v365, 286);
        *(_QWORD *)exception = &unk_1E64FFFA0;
      }
      if (*(_BYTE *)(v5 + 60))
      {
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v5 + 160))(&v366);
        v7 = v366.var0;
        if (v366.var0)
          v8 = v366.var0[-1].length;
        else
          v8 = 0;
        v64 = (char *)malloc_type_malloc(v8 + 22, 0x8903763CuLL);
        v65 = v8 + 9;
        *((_DWORD *)v64 + 2) = v8 + 10;
        atomic_store(1u, (unsigned int *)v64);
        atomic_store(0, (unsigned int *)v64);
        *(_QWORD *)(v64 + 12) = *(_QWORD *)"shadow2D(";
        *((_DWORD *)v64 + 1) = v65;
        v64[20] = 40;
        memcpy(v64 + 21, v7, v8);
        v64[v65 + 12] = 0;
        do
          v66 = __ldaxr((unsigned int *)v64);
        while (__stlxr(v66 + 1, (unsigned int *)v64));
        v67 = *((int *)v64 + 1);
        v68 = (unsigned int *)malloc_type_malloc(v67 + 15, 0x8903763CuLL);
        v68[1] = v67 + 2;
        v68[2] = v67 + 3;
        atomic_store(1u, v68);
        v69 = v68 + 3;
        atomic_store(0, v68);
        memcpy(v68 + 3, v64 + 12, v67);
        *(_WORD *)&v69[v67] = 8236;
        v69[v67 + 2] = 0;
        do
          v70 = __ldaxr(v68);
        while (__stlxr(v70 + 1, v68));
        v71 = *((_QWORD *)this + 15);
        if (!v71)
          throw_PCNullPointerException(1);
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v71 + 16))(&v365);
        v72 = (int)v68[1];
        v73 = v365.var0;
        if (v365.var0)
          v74 = v365.var0[-1].length;
        else
          v74 = 0;
        v95 = v72 + v74;
        v96 = (unsigned int *)malloc_type_malloc(v95 + 13, 0x8903763CuLL);
        v96[1] = v95;
        v96[2] = v95 + 1;
        atomic_store(1u, v96);
        atomic_store(0, v96);
        memcpy(v96 + 3, v69, v72);
        memcpy((char *)v96 + v72 + 12, v73, v74);
        *((_BYTE *)v96 + v95 + 12) = 0;
        do
          v97 = __ldaxr(v96);
        while (__stlxr(v97 + 1, v96));
        v98 = (int)v96[1];
        v99 = (unsigned int *)malloc_type_malloc(v98 + 14, 0x8903763CuLL);
        v99[1] = v98 + 1;
        v99[2] = v98 + 2;
        atomic_store(1u, v99);
        v100 = v99 + 3;
        atomic_store(0, v99);
        memcpy(v99 + 3, v96 + 3, v98);
        *((_BYTE *)v100 + v98) = 41;
        *((_BYTE *)v100 + v98 + 1) = 0;
        *a3 = v99 + 3;
        do
          v101 = __ldaxr(v99);
        while (__stlxr(v101 + 1, v99));
        do
        {
          v102 = __ldaxr(v96);
          v103 = v102 - 1;
        }
        while (__stlxr(v103, v96));
        if (!v103)
          free(v96);
        if (v365.var0)
        {
          v104 = (unsigned int *)&v365.var0[-1].data + 1;
          do
          {
            v105 = __ldaxr(v104);
            v106 = v105 - 1;
          }
          while (__stlxr(v106, v104));
          if (!v106)
          {
            LOBYTE(v365.var0->isa) = 0;
            if (v365.var0)
              v107 = (char *)&v365.var0[-1].data + 4;
            else
              v107 = 0;
            free(v107);
          }
        }
        do
        {
          v108 = __ldaxr(v68);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v68));
        if (!v109)
          free(v68);
        do
        {
          v110 = __ldaxr((unsigned int *)v64);
          v111 = v110 - 1;
        }
        while (__stlxr(v111, (unsigned int *)v64));
        if (!v111)
          free(v64);
        if (v366.var0)
        {
          v112 = (unsigned int *)&v366.var0[-1].data + 1;
          do
          {
            v113 = __ldaxr(v112);
            v94 = --v113 == 0;
          }
          while (__stlxr(v113, v112));
LABEL_419:
          if (!v94)
            return;
          LOBYTE(v366.var0->isa) = 0;
          if (v366.var0)
            v141 = (unsigned int *)&v366.var0[-1].data + 1;
          else
            v141 = 0;
          goto LABEL_424;
        }
      }
      else
      {
        if (*(_BYTE *)(v5 + 61))
        {
          v358 = (PCException *)__cxa_allocate_exception(0x40uLL);
          PCString::PCString(&v366, "not implemented yet");
          PCString::PCString(&v365, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSTexture.cpp");
          PCException::PCException(v358, &v366, &v365, 269);
          *(_QWORD *)v358 = &unk_1E64FFFA0;
        }
        if (*(_BYTE *)(v5 + 62))
        {
          (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v5 + 160))(&v366);
          v21 = v366.var0;
          if (v366.var0)
            v22 = v366.var0[-1].length;
          else
            v22 = 0;
          v159 = (char *)malloc_type_malloc(v22 + 23, 0x8903763CuLL);
          v160 = v22 + 10;
          *((_DWORD *)v159 + 2) = v22 + 11;
          atomic_store(1u, (unsigned int *)v159);
          atomic_store(0, (unsigned int *)v159);
          *(_QWORD *)(v159 + 12) = *(_QWORD *)"texture2D(";
          *((_DWORD *)v159 + 1) = v160;
          *((_WORD *)v159 + 10) = 10308;
          memcpy(v159 + 22, v21, v22);
          v159[v160 + 12] = 0;
          do
            v161 = __ldaxr((unsigned int *)v159);
          while (__stlxr(v161 + 1, (unsigned int *)v159));
          v162 = *((int *)v159 + 1);
          v163 = (unsigned int *)malloc_type_malloc(v162 + 15, 0x8903763CuLL);
          v163[1] = v162 + 2;
          v163[2] = v162 + 3;
          atomic_store(1u, v163);
          v164 = v163 + 3;
          atomic_store(0, v163);
          memcpy(v163 + 3, v159 + 12, v162);
          *(_WORD *)&v164[v162] = 8236;
          v164[v162 + 2] = 0;
          do
            v165 = __ldaxr(v163);
          while (__stlxr(v165 + 1, v163));
          v166 = *((_QWORD *)this + 15);
          if (!v166)
            throw_PCNullPointerException(1);
          (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v166 + 16))(&v365);
          v167 = (int)v163[1];
          v168 = v365.var0;
          v361 = a3;
          if (v365.var0)
            v169 = v365.var0[-1].length;
          else
            v169 = 0;
          v181 = v167 + v169;
          v182 = (unsigned int *)malloc_type_malloc(v181 + 13, 0x8903763CuLL);
          v182[1] = v181;
          v182[2] = v181 + 1;
          atomic_store(1u, v182);
          atomic_store(0, v182);
          memcpy(v182 + 3, v164, v167);
          memcpy((char *)v182 + v167 + 12, v168, v169);
          *((_BYTE *)v182 + v181 + 12) = 0;
          do
            v183 = __ldaxr(v182);
          while (__stlxr(v183 + 1, v182));
          v184 = (int)v182[1];
          v185 = (unsigned int *)malloc_type_malloc(v184 + 15, 0x8903763CuLL);
          v185[1] = v184 + 2;
          v185[2] = v184 + 3;
          atomic_store(1u, v185);
          v186 = v185 + 3;
          atomic_store(0, v185);
          memcpy(v185 + 3, v182 + 3, v184);
          *(_WORD *)((char *)v186 + v184) = 8236;
          *((_BYTE *)v186 + v184 + 2) = 0;
          do
            v187 = __ldaxr(v185);
          while (__stlxr(v187 + 1, v185));
          v188 = *((_QWORD *)this + 19);
          if (!v188)
            throw_PCNullPointerException(1);
          (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v188 + 16))(&v364);
          v189 = (int)v185[1];
          v190 = v364;
          if (v364)
            v191 = *((_DWORD *)v364 - 2);
          else
            v191 = 0;
          v219 = v189 + v191;
          v220 = (unsigned int *)malloc_type_malloc(v219 + 13, 0x8903763CuLL);
          v220[1] = v219;
          v220[2] = v219 + 1;
          atomic_store(1u, v220);
          atomic_store(0, v220);
          memcpy(v220 + 3, v185 + 3, v189);
          memcpy((char *)v220 + v189 + 12, v190, v191);
          *((_BYTE *)v220 + v219 + 12) = 0;
          do
            v221 = __ldaxr(v220);
          while (__stlxr(v221 + 1, v220));
          v222 = (int)v220[1];
          v223 = (unsigned int *)malloc_type_malloc(v222 + 14, 0x8903763CuLL);
          v223[1] = v222 + 1;
          v223[2] = v222 + 2;
          atomic_store(1u, v223);
          v224 = v223 + 3;
          atomic_store(0, v223);
          memcpy(v223 + 3, v220 + 3, v222);
          *((_BYTE *)v224 + v222) = 41;
          *((_BYTE *)v224 + v222 + 1) = 0;
          *v361 = v223 + 3;
          do
            v225 = __ldaxr(v223);
          while (__stlxr(v225 + 1, v223));
          do
          {
            v226 = __ldaxr(v220);
            v227 = v226 - 1;
          }
          while (__stlxr(v227, v220));
          if (!v227)
            free(v220);
          if (v364)
          {
            v228 = (unsigned int *)(v364 - 12);
            do
            {
              v229 = __ldaxr(v228);
              v230 = v229 - 1;
            }
            while (__stlxr(v230, v228));
            if (!v230)
            {
              *v364 = 0;
              if (v364)
                v231 = v364 - 12;
              else
                v231 = 0;
              free(v231);
            }
          }
          do
          {
            v232 = __ldaxr(v185);
            v233 = v232 - 1;
          }
          while (__stlxr(v233, v185));
          if (!v233)
            free(v185);
          do
          {
            v234 = __ldaxr(v182);
            v235 = v234 - 1;
          }
          while (__stlxr(v235, v182));
          if (!v235)
            free(v182);
          if (v365.var0)
          {
            v236 = (unsigned int *)&v365.var0[-1].data + 1;
            do
            {
              v237 = __ldaxr(v236);
              v238 = v237 - 1;
            }
            while (__stlxr(v238, v236));
            if (!v238)
            {
              LOBYTE(v365.var0->isa) = 0;
              if (v365.var0)
                v239 = (char *)&v365.var0[-1].data + 4;
              else
                v239 = 0;
              free(v239);
            }
          }
          do
          {
            v240 = __ldaxr(v163);
            v241 = v240 - 1;
          }
          while (__stlxr(v241, v163));
          if (!v241)
            free(v163);
          do
          {
            v242 = __ldaxr((unsigned int *)v159);
            v243 = v242 - 1;
          }
          while (__stlxr(v243, (unsigned int *)v159));
          if (!v243)
            free(v159);
          if (v366.var0)
          {
            v244 = (unsigned int *)&v366.var0[-1].data + 1;
            do
            {
              v245 = __ldaxr(v244);
              v94 = --v245 == 0;
            }
            while (__stlxr(v245, v244));
            goto LABEL_419;
          }
        }
        else
        {
          (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v5 + 160))(&v366);
          v146 = v366.var0;
          if (v366.var0)
            v147 = v366.var0[-1].length;
          else
            v147 = 0;
          v248 = (char *)malloc_type_malloc(v147 + 23, 0x8903763CuLL);
          v249 = v147 + 10;
          *((_DWORD *)v248 + 2) = v147 + 11;
          atomic_store(1u, (unsigned int *)v248);
          atomic_store(0, (unsigned int *)v248);
          *(_QWORD *)(v248 + 12) = *(_QWORD *)"texture2D(";
          *((_DWORD *)v248 + 1) = v249;
          *((_WORD *)v248 + 10) = 10308;
          memcpy(v248 + 22, v146, v147);
          v248[v249 + 12] = 0;
          do
            v250 = __ldaxr((unsigned int *)v248);
          while (__stlxr(v250 + 1, (unsigned int *)v248));
          v251 = *((int *)v248 + 1);
          v252 = (unsigned int *)malloc_type_malloc(v251 + 15, 0x8903763CuLL);
          v252[1] = v251 + 2;
          v252[2] = v251 + 3;
          atomic_store(1u, v252);
          v253 = v252 + 3;
          atomic_store(0, v252);
          memcpy(v252 + 3, v248 + 12, v251);
          *(_WORD *)&v253[v251] = 8236;
          v253[v251 + 2] = 0;
          do
            v254 = __ldaxr(v252);
          while (__stlxr(v254 + 1, v252));
          v255 = *((_QWORD *)this + 15);
          if (!v255)
            throw_PCNullPointerException(1);
          (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v255 + 16))(&v365);
          v256 = (int)v252[1];
          v257 = v365.var0;
          if (v365.var0)
            v258 = v365.var0[-1].length;
          else
            v258 = 0;
          v259 = v256 + v258;
          v260 = (unsigned int *)malloc_type_malloc(v259 + 13, 0x8903763CuLL);
          v260[1] = v259;
          v260[2] = v259 + 1;
          atomic_store(1u, v260);
          atomic_store(0, v260);
          memcpy(v260 + 3, v253, v256);
          memcpy((char *)v260 + v256 + 12, v257, v258);
          *((_BYTE *)v260 + v259 + 12) = 0;
          do
            v261 = __ldaxr(v260);
          while (__stlxr(v261 + 1, v260));
          v262 = (int)v260[1];
          v263 = (unsigned int *)malloc_type_malloc(v262 + 14, 0x8903763CuLL);
          v263[1] = v262 + 1;
          v263[2] = v262 + 2;
          atomic_store(1u, v263);
          v264 = v263 + 3;
          atomic_store(0, v263);
          memcpy(v263 + 3, v260 + 3, v262);
          *((_BYTE *)v264 + v262) = 41;
          *((_BYTE *)v264 + v262 + 1) = 0;
          *a3 = v263 + 3;
          do
            v265 = __ldaxr(v263);
          while (__stlxr(v265 + 1, v263));
          do
          {
            v266 = __ldaxr(v260);
            v267 = v266 - 1;
          }
          while (__stlxr(v267, v260));
          if (!v267)
            free(v260);
          if (v365.var0)
          {
            v268 = (unsigned int *)&v365.var0[-1].data + 1;
            do
            {
              v269 = __ldaxr(v268);
              v270 = v269 - 1;
            }
            while (__stlxr(v270, v268));
            if (!v270)
            {
              LOBYTE(v365.var0->isa) = 0;
              if (v365.var0)
                v271 = (char *)&v365.var0[-1].data + 4;
              else
                v271 = 0;
              free(v271);
            }
          }
          do
          {
            v272 = __ldaxr(v252);
            v273 = v272 - 1;
          }
          while (__stlxr(v273, v252));
          if (!v273)
            free(v252);
          do
          {
            v274 = __ldaxr((unsigned int *)v248);
            v275 = v274 - 1;
          }
          while (__stlxr(v275, (unsigned int *)v248));
          if (!v275)
            free(v248);
          if (v366.var0)
          {
            v276 = (unsigned int *)&v366.var0[-1].data + 1;
            do
            {
              v277 = __ldaxr(v276);
              v94 = --v277 == 0;
            }
            while (__stlxr(v277, v276));
            goto LABEL_419;
          }
        }
      }
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 11);
    if (!v9)
      throw_PCNullPointerException(1);
    v10 = *(char **)(v9 + 8);
    if (v10)
    {
      v11 = (unsigned int *)(v10 - 12);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v13 = *((_QWORD *)this + 15);
    __src = v10;
    if (!v13)
      throw_PCNullPointerException(1);
    v14 = *(_DWORD *)(v13 + 28);
    if ((v14 - 3) >= 2)
    {
      if (v14 != 2)
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"illegal texture coordinate", a2);
      if (v10)
        v18 = *((_DWORD *)v10 - 2);
      else
        v18 = 0;
      v23 = (char *)malloc_type_malloc(v18 + 23, 0x8903763CuLL);
      v114 = v18 + 10;
      *((_DWORD *)v23 + 2) = v18 + 11;
      atomic_store(1u, (unsigned int *)v23);
      atomic_store(0, (unsigned int *)v23);
      *(_QWORD *)(v23 + 12) = *(_QWORD *)"texture2D(";
      *((_DWORD *)v23 + 1) = v114;
      *((_WORD *)v23 + 10) = 10308;
      memcpy(v23 + 22, v10, v18);
      v23[v114 + 12] = 0;
      do
        v115 = __ldaxr((unsigned int *)v23);
      while (__stlxr(v115 + 1, (unsigned int *)v23));
      v116 = *((int *)v23 + 1);
      v117 = (unsigned int *)malloc_type_malloc(v116 + 15, 0x8903763CuLL);
      v117[1] = v116 + 2;
      v117[2] = v116 + 3;
      atomic_store(1u, v117);
      v118 = v117 + 3;
      atomic_store(0, v117);
      memcpy(v117 + 3, v23 + 12, v116);
      *(_WORD *)&v118[v116] = 8236;
      v118[v116 + 2] = 0;
      do
        v119 = __ldaxr(v117);
      while (__stlxr(v119 + 1, v117));
      v120 = *((_QWORD *)this + 15);
      if (!v120)
        throw_PCNullPointerException(1);
      (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v120 + 16))(&v366);
      v359 = a3;
      v121 = (int)v117[1];
      v122 = v366.var0;
      if (v366.var0)
        v123 = v366.var0[-1].length;
      else
        v123 = 0;
      v124 = v121 + v123;
      v125 = (unsigned int *)malloc_type_malloc(v124 + 13, 0x8903763CuLL);
      v125[1] = v124;
      v125[2] = v124 + 1;
      atomic_store(1u, v125);
      atomic_store(0, v125);
      memcpy(v125 + 3, v118, v121);
      memcpy((char *)v125 + v121 + 12, v122, v123);
      *((_BYTE *)v125 + v124 + 12) = 0;
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 + 1, v125));
      v127 = (int)v125[1];
      v128 = v359;
      v129 = (unsigned int *)malloc_type_malloc(v127 + 14, 0x8903763CuLL);
      v129[1] = v127 + 1;
      v129[2] = v127 + 2;
      atomic_store(1u, v129);
      v130 = v129 + 3;
      atomic_store(0, v129);
      memcpy(v129 + 3, v125 + 3, v127);
      *((_BYTE *)v130 + v127) = 41;
      *((_BYTE *)v130 + v127 + 1) = 0;
      *v128 = v129 + 3;
      do
        v131 = __ldaxr(v129);
      while (__stlxr(v131 + 1, v129));
      v42 = __src;
      do
      {
        v132 = __ldaxr(v125);
        v133 = v132 - 1;
      }
      while (__stlxr(v133, v125));
      if (!v133)
        free(v125);
      if (v366.var0)
      {
        v134 = (unsigned int *)&v366.var0[-1].data + 1;
        do
        {
          v135 = __ldaxr(v134);
          v136 = v135 - 1;
        }
        while (__stlxr(v136, v134));
        if (!v136)
        {
          LOBYTE(v366.var0->isa) = 0;
          if (v366.var0)
            v137 = (char *)&v366.var0[-1].data + 4;
          else
            v137 = 0;
          free(v137);
        }
      }
      do
      {
        v138 = __ldaxr(v117);
        v139 = v138 - 1;
      }
      while (__stlxr(v139, v117));
      if (!v139)
        free(v117);
      do
      {
        v140 = __ldaxr((unsigned int *)v23);
        v52 = --v140 == 0;
      }
      while (__stlxr(v140, (unsigned int *)v23));
    }
    else
    {
      if (v10)
        v15 = *((_DWORD *)v10 - 2);
      else
        v15 = 0;
      v23 = (char *)malloc_type_malloc(v15 + 27, 0x8903763CuLL);
      v24 = v15 + 14;
      *((_DWORD *)v23 + 2) = v15 + 15;
      atomic_store(1u, (unsigned int *)v23);
      atomic_store(0, (unsigned int *)v23);
      qmemcpy(v23 + 12, "texture2DProj(", 14);
      *((_DWORD *)v23 + 1) = v24;
      memcpy(v23 + 26, v10, v15);
      v23[v24 + 12] = 0;
      do
        v25 = __ldaxr((unsigned int *)v23);
      while (__stlxr(v25 + 1, (unsigned int *)v23));
      v26 = *((int *)v23 + 1);
      v27 = (unsigned int *)malloc_type_malloc(v26 + 15, 0x8903763CuLL);
      v27[1] = v26 + 2;
      v27[2] = v26 + 3;
      atomic_store(1u, v27);
      v28 = v27 + 3;
      atomic_store(0, v27);
      memcpy(v27 + 3, v23 + 12, v26);
      *(_WORD *)&v28[v26] = 8236;
      v28[v26 + 2] = 0;
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 + 1, v27));
      v30 = *((_QWORD *)this + 15);
      if (!v30)
        throw_PCNullPointerException(1);
      (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v30 + 16))(&v366);
      v31 = a3;
      v32 = (int)v27[1];
      v33 = v366.var0;
      if (v366.var0)
        v34 = v366.var0[-1].length;
      else
        v34 = 0;
      v35 = v32 + v34;
      v36 = (unsigned int *)malloc_type_malloc(v35 + 13, 0x8903763CuLL);
      v36[1] = v35;
      v36[2] = v35 + 1;
      atomic_store(1u, v36);
      atomic_store(0, v36);
      memcpy(v36 + 3, v28, v32);
      memcpy((char *)v36 + v32 + 12, v33, v34);
      *((_BYTE *)v36 + v35 + 12) = 0;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
      v38 = (int)v36[1];
      v39 = (unsigned int *)malloc_type_malloc(v38 + 14, 0x8903763CuLL);
      v39[1] = v38 + 1;
      v39[2] = v38 + 2;
      atomic_store(1u, v39);
      v40 = v39 + 3;
      atomic_store(0, v39);
      memcpy(v39 + 3, v36 + 3, v38);
      *((_BYTE *)v40 + v38) = 41;
      *((_BYTE *)v40 + v38 + 1) = 0;
      *v31 = v39 + 3;
      do
        v41 = __ldaxr(v39);
      while (__stlxr(v41 + 1, v39));
      v42 = __src;
      do
      {
        v43 = __ldaxr(v36);
        v44 = v43 - 1;
      }
      while (__stlxr(v44, v36));
      if (!v44)
        free(v36);
      if (v366.var0)
      {
        v45 = (unsigned int *)&v366.var0[-1].data + 1;
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          LOBYTE(v366.var0->isa) = 0;
          if (v366.var0)
            v48 = (char *)&v366.var0[-1].data + 4;
          else
            v48 = 0;
          free(v48);
        }
      }
      do
      {
        v49 = __ldaxr(v27);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v27));
      if (!v50)
        free(v27);
      do
      {
        v51 = __ldaxr((unsigned int *)v23);
        v52 = --v51 == 0;
      }
      while (__stlxr(v51, (unsigned int *)v23));
    }
    if (v52)
      free(v23);
    if (v42)
    {
      v141 = (unsigned int *)(v42 - 12);
      do
      {
        v142 = __ldaxr(v141);
        v143 = v142 - 1;
      }
      while (__stlxr(v143, v141));
      if (!v143)
      {
        *v42 = 0;
LABEL_424:
        free(v141);
      }
    }
  }
}

void sub_1B2D00078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, PCString a14)
{
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  do
  {
    v18 = __ldaxr(v14);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v14));
  if (!v19)
    free(v14);
  if (a13.var0)
  {
    v20 = (unsigned int *)&a13.var0[-1].data + 1;
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      LOBYTE(a13.var0->isa) = 0;
      free((char *)&a13.var0[-1].data + 4);
    }
  }
  do
  {
    v23 = __ldaxr(v16);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v16));
  if (!v24)
    free(v16);
  do
  {
    v25 = __ldaxr(v15);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v15));
  if (!v26)
    free(v15);
  if (a14.var0)
  {
    v27 = (unsigned int *)&a14.var0[-1].data + 1;
    do
    {
      v28 = __ldaxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
    {
      LOBYTE(a14.var0->isa) = 0;
      free((char *)&a14.var0[-1].data + 4);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::Error<PCException>::raise<char [27]>(OZChannelBase *a1, const PCString *a2)
{
  PCException *exception;
  PCString v4;

  OZChannelBase::setRangeName(a1, a2);
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v4, (const char *)a1);
  PCException::PCException(exception, &v4);
}

void sub_1B2D00A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void ProShade::TextureFunc::description(ProShade::TextureFunc *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  uint64_t v7;
  const void *v8;
  int v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  size_t v13;
  unsigned int *v14;
  _BYTE *v15;
  unsigned int v16;
  uint64_t v17;
  size_t v18;
  const void *v19;
  int v20;
  size_t v21;
  unsigned int *v22;
  unsigned int v23;
  size_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  BOOL v40;
  char *v41;
  uint64_t v42;
  unsigned int v43;
  size_t v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  _BYTE *v52;
  _BYTE *v53;
  _BYTE *v54;

  if (*((_QWORD *)this + 19))
  {
    v4 = *((_QWORD *)this + 15);
    if (!v4)
      throw_PCNullPointerException(1);
    (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 24))(&v54);
    v5 = v54;
    if (v54)
      v6 = *((_DWORD *)v54 - 2);
    else
      v6 = 0;
    v10 = (char *)malloc_type_malloc(v6 + 25, 0x8903763CuLL);
    v11 = v6 + 12;
    *((_DWORD *)v10 + 2) = v6 + 13;
    atomic_store(1u, (unsigned int *)v10);
    atomic_store(0, (unsigned int *)v10);
    *(_QWORD *)(v10 + 12) = *(_QWORD *)"TextureFunc(";
    *((_DWORD *)v10 + 1) = v11;
    *((_DWORD *)v10 + 5) = 677604981;
    memcpy(v10 + 24, v5, v6);
    v10[v11 + 12] = 0;
    do
      v12 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v12 + 1, (unsigned int *)v10));
    v13 = *((int *)v10 + 1);
    v14 = (unsigned int *)malloc_type_malloc(v13 + 15, 0x8903763CuLL);
    v14[1] = v13 + 2;
    v14[2] = v13 + 3;
    atomic_store(1u, v14);
    v15 = v14 + 3;
    atomic_store(0, v14);
    memcpy(v14 + 3, v10 + 12, v13);
    *(_WORD *)&v15[v13] = 8236;
    v15[v13 + 2] = 0;
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 + 1, v14));
    v17 = *((_QWORD *)this + 19);
    if (!v17)
      throw_PCNullPointerException(1);
    (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v17 + 24))(&v53);
    v18 = (int)v14[1];
    v19 = v53;
    if (v53)
      v20 = *((_DWORD *)v53 - 2);
    else
      v20 = 0;
    v21 = v18 + v20;
    v22 = (unsigned int *)malloc_type_malloc(v21 + 13, 0x8903763CuLL);
    v22[1] = v21;
    v22[2] = v21 + 1;
    atomic_store(1u, v22);
    atomic_store(0, v22);
    memcpy(v22 + 3, v15, v18);
    memcpy((char *)v22 + v18 + 12, v19, v20);
    *((_BYTE *)v22 + v21 + 12) = 0;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
    v24 = (int)v22[1];
    v25 = (unsigned int *)malloc_type_malloc(v24 + 14, 0x8903763CuLL);
    v25[1] = v24 + 1;
    v25[2] = v24 + 2;
    atomic_store(1u, v25);
    v26 = v25 + 3;
    atomic_store(0, v25);
    memcpy(v25 + 3, v22 + 3, v24);
    *((_BYTE *)v26 + v24) = 41;
    *((_BYTE *)v26 + v24 + 1) = 0;
    *a2 = v25 + 3;
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 + 1, v25));
    do
    {
      v28 = __ldaxr(v22);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v22));
    if (!v29)
      free(v22);
    if (v53)
    {
      v30 = (unsigned int *)(v53 - 12);
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        *v53 = 0;
        if (v53)
          v33 = v53 - 12;
        else
          v33 = 0;
        free(v33);
      }
    }
    do
    {
      v34 = __ldaxr(v14);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v14));
    if (!v35)
      free(v14);
    do
    {
      v36 = __ldaxr((unsigned int *)v10);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, (unsigned int *)v10));
    if (!v37)
      free(v10);
    if (v54)
    {
      v38 = (unsigned int *)(v54 - 12);
      do
      {
        v39 = __ldaxr(v38);
        v40 = --v39 == 0;
      }
      while (__stlxr(v39, v38));
      goto LABEL_56;
    }
  }
  else
  {
    v7 = *((_QWORD *)this + 15);
    if (!v7)
      throw_PCNullPointerException(1);
    (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v7 + 24))(&v54);
    v8 = v54;
    if (v54)
      v9 = *((_DWORD *)v54 - 2);
    else
      v9 = 0;
    v41 = (char *)malloc_type_malloc(v9 + 25, 0x8903763CuLL);
    v42 = v9 + 12;
    *((_DWORD *)v41 + 2) = v9 + 13;
    atomic_store(1u, (unsigned int *)v41);
    atomic_store(0, (unsigned int *)v41);
    *(_QWORD *)(v41 + 12) = *(_QWORD *)"TextureFunc(";
    *((_DWORD *)v41 + 1) = v42;
    *((_DWORD *)v41 + 5) = 677604981;
    memcpy(v41 + 24, v8, v9);
    v41[v42 + 12] = 0;
    do
      v43 = __ldaxr((unsigned int *)v41);
    while (__stlxr(v43 + 1, (unsigned int *)v41));
    v44 = *((int *)v41 + 1);
    v45 = (unsigned int *)malloc_type_malloc(v44 + 14, 0x8903763CuLL);
    v45[1] = v44 + 1;
    v45[2] = v44 + 2;
    atomic_store(1u, v45);
    v46 = v45 + 3;
    atomic_store(0, v45);
    memcpy(v45 + 3, v41 + 12, v44);
    *((_BYTE *)v46 + v44) = 41;
    *((_BYTE *)v46 + v44 + 1) = 0;
    *a2 = v45 + 3;
    do
      v47 = __ldaxr(v45);
    while (__stlxr(v47 + 1, v45));
    do
    {
      v48 = __ldaxr((unsigned int *)v41);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, (unsigned int *)v41));
    if (!v49)
      free(v41);
    if (v54)
    {
      v50 = (unsigned int *)(v54 - 12);
      do
      {
        v51 = __ldaxr(v50);
        v40 = --v51 == 0;
      }
      while (__stlxr(v51, v50));
LABEL_56:
      if (v40)
      {
        *v54 = 0;
        if (v54)
          v52 = v54 - 12;
        else
          v52 = 0;
        free(v52);
      }
    }
  }
}

void sub_1B2D00EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  do
  {
    v12 = __ldaxr(v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v10));
  if (!v13)
    free(v10);
  if (a10)
  {
    v14 = (unsigned int *)(a10 - 12);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::TextureFunc::computeHash(ProShade::TextureFunc *this, int8x8_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  PCHashWriteStream::writeValue(a2, "TextureFunc");
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v4 + 56))(v4, a2);
  }
  else
  {
    PCHashWriteStream::writeValue(a2, "Texture");
    v5 = *((_QWORD *)this + 11);
    if (v5)
      (*(void (**)(int8x8_t *, _QWORD))(*(_QWORD *)a2 + 48))(a2, *(unsigned int *)(v5 + 32));
  }
  v6 = *((_QWORD *)this + 15);
  if (!v6)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t, int8x8_t *))(*(_QWORD *)v6 + 56))(v6, a2);
  result = *((_QWORD *)this + 19);
  if (result)
    return (*(uint64_t (**)(uint64_t, int8x8_t *))(*(_QWORD *)result + 56))(result, a2);
  return result;
}

uint64_t ProShade::TextureFunc::inputs(const PCSharedCount *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  const PCSharedCount *v10;
  int v11;
  int v12;
  PCSharedCount v13;
  PCSharedCount v14;
  PCSharedCount v15;

  if (*(int *)(a2 + 8) < 0)
    v4 = 1;
  else
    v4 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v4);
  if (a1[8].var0)
  {
    v13.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v14, a1 + 8);
    v5 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(a2 + 8) <= v5)
      v6 = (2 * (v5 + 1)) | 1;
    else
      v6 = *(_DWORD *)(a2 + 8);
    PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v5 + 1, v6);
    ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + 32 * *(int *)(a2 + 12) - 32, &v13);
    v13.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v15);
  }
  v7 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) <= v7)
    v8 = (2 * (v7 + 1)) | 1;
  else
    v8 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v7 + 1, v8);
  result = ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + 32 * *(int *)(a2 + 12) - 32, a1 + 13);
  if (a1[19].var0)
  {
    v10 = a1 + 17;
    v11 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(a2 + 8) <= v11)
      v12 = (2 * (v11 + 1)) | 1;
    else
      v12 = *(_DWORD *)(a2 + 8);
    PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v11 + 1, v12);
    return ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + 32 * *(int *)(a2 + 12) - 32, v10);
  }
  return result;
}

void sub_1B2D0122C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::TextureFunc::apply(const PCSharedCount *a1@<X0>, void (***a2)(_QWORD *__return_ptr, _QWORD, _QWORD)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v6;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v8;
  PCSharedCount v9[2];
  PCSharedCount v10;
  PCSharedCount v11;
  _QWORD v12[2];
  PCSharedCount v13;
  PCSharedCount v14;
  PCSharedCount v15[3];
  PCSharedCount v16;
  _QWORD v17[2];
  PC_Sp_counted_base *v18;
  PCSharedCount v19;

  v17[0] = &unk_1E6569AC8;
  v18 = 0;
  PCSharedCount::PCSharedCount(&v19);
  if (a1[8].var0)
  {
    v12[0] = &unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v13, a1 + 8);
    (**a2)(v15, a2, v12);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v17, v15);
    v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v16);
    v12[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v14);
  }
  (**a2)(v15, a2, &a1[13]);
  v12[0] = &unk_1E6569AC8;
  v13.var0 = 0;
  PCSharedCount::PCSharedCount(&v14);
  if (a1[19].var0)
  {
    (**a2)(v9, a2, &a1[17]);
    ProShade::VarT<ProShade::Node>::operator=((uint64_t)v12, v9);
    v9[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v11);
  }
  v9[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v10, a1 + 8);
  if (v18 == v10.var0 && v15[2].var0 == a1[15].var0)
  {
    var0 = v13.var0;
    v8 = a1[19].var0;
    v9[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v11);
    if (var0 == v8)
      goto LABEL_12;
  }
  else
  {
    v9[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v11);
  }
  if (a1[19].var0)
  {
    v6 = operator new();
    ProShade::TextureFunc::TextureFunc(v6, (uint64_t)v17, a1 + 10, (uint64_t)v15, (uint64_t)v12);
  }
  else
  {
    v6 = operator new();
    ProShade::TextureFunc::TextureFunc(v6, (uint64_t)v17, a1 + 10, (uint64_t)v15);
  }
  a1 = (const PCSharedCount *)v6;
LABEL_12:
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)a1;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)a1 + *((_QWORD *)a1->var0 - 3)));
  v12[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v14);
  v15[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v17[0] = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v19);
}

void sub_1B2D014B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, PCSharedCount a20,uint64_t a21)
{
  PCSharedCount *v21;
  PCSharedCount *v22;
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x1B5E29170](v23, 0x10B1C408AD29EEDLL);
  PCSharedCount::~PCSharedCount(v22);
  PCSharedCount::~PCSharedCount(&a20);
  a21 = v24 + 16;
  PCSharedCount::~PCSharedCount(v21);
  _Unwind_Resume(a1);
}

uint64_t ProShade::TextureFunc::atomic(ProShade::TextureFunc *this)
{
  return 0;
}

PCSharedCount *ProShade::TextureFunc::clone(ProShade::TextureFunc *this)
{
  PCSharedCount *v2;

  v2 = (PCSharedCount *)operator new();
  ProShade::TextureFunc::TextureFunc(v2, this);
  return v2;
}

void sub_1B2D015C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C408AD29EEDLL);
  _Unwind_Resume(a1);
}

void ProShade::TextureFunc::computeValue(int a1, int a2, PCSharedCount *this)
{
  PCSharedCount::PCSharedCount(this);
}

BOOL ProShade::InputNode::builtIn(ProShade::InputNode *this)
{
  return *((_DWORD *)this + 13) == 2;
}

void ProShade::TextureData::~TextureData(ProShade::TextureData *this)
{
  *(_QWORD *)this = &unk_1E656B1B8;
  *((_QWORD *)this + 5) = &unk_1E656B1E8;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  LiString::dec((ProShade::TextureData *)((char *)this + 8));
  *((_QWORD *)this + 5) = &off_1E65EB048;
  *((_BYTE *)this + 56) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 6);
}

{
  *(_QWORD *)this = &unk_1E656B1B8;
  *((_QWORD *)this + 5) = &unk_1E656B1E8;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  LiString::dec((ProShade::TextureData *)((char *)this + 8));
  *((_QWORD *)this + 5) = &off_1E65EB048;
  *((_BYTE *)this + 56) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 6);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'ProShade::TextureData::~TextureData(ProShade::TextureData *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_1E656B1B8;
  *((_QWORD *)v1 + 5) = &unk_1E656B1E8;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 16));
  LiString::dec((LiString *)(v1 + 8));
  *((_QWORD *)v1 + 5) = &off_1E65EB048;
  v1[56] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 6);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = &unk_1E656B1B8;
  *((_QWORD *)v1 + 5) = &unk_1E656B1E8;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 16));
  LiString::dec((LiString *)(v1 + 8));
  *((_QWORD *)v1 + 5) = &off_1E65EB048;
  v1[56] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 6);
  JUMPOUT(0x1B5E29170);
}

PCSharedCount *ProShade::Uniform::Uniform(PCSharedCount *a1, int a2, int a3)
{
  PC_Sp_counted_base *v6;

  v6 = (PC_Sp_counted_base *)operator new();
  ProShade::UniformNode::UniformNode((uint64_t)v6, a2, a3);
  a1->var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  a1[2].var0 = v6;
  PCSharedCount::PCSharedCount(a1 + 3, (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  a1->var0 = (PC_Sp_counted_base *)&unk_1E656A298;
  return a1;
}

void sub_1B2D01854(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C402CAA7C2BLL);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::SamplerNode::Binding>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::SamplerNode::Binding>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::SamplerNode::Binding>>>::__emplace_unique_key_args<LiOpenGLContextGetter::C,std::piecewise_construct_t const&,std::tuple<LiOpenGLContextGetter::C const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::__find_equal<LiOpenGLContextGetter::C>((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = 0xFFFFFFFFLL;
    *((_DWORD *)v7 + 14) = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

PCSharedCount *PCMakePtr<LiRenderer>@<X0>(PCSharedCount *a1@<X8>)
{
  LiRenderer *v2;

  v2 = (LiRenderer *)operator new();
  LiRenderer::LiRenderer(v2);
  a1->var0 = (PC_Sp_counted_base *)v2;
  return PCSharedCount::PCSharedCount(a1 + 1, (LiRenderer *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24)));
}

void sub_1B2D0195C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C40FF600A27);
  _Unwind_Resume(a1);
}

PCSharedCount *PCMakePtr<LiGeode,PCPtr<LiRenderer> &>@<X0>(LiImageSource **a1@<X0>, PCSharedCount *a2@<X8>)
{
  LiGeode *v4;

  v4 = (LiGeode *)operator new();
  LiGeode::LiGeode(v4, *a1);
  a2->var0 = (PC_Sp_counted_base *)v4;
  return PCSharedCount::PCSharedCount(a2 + 1, (LiGeode *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
}

void sub_1B2D019E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A6A93DF4);
  _Unwind_Resume(a1);
}

void Li3DGroupForEquirect::setUpGroup(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;
  PCSharedCount v14;

  PCMakePtr<LiGroup>(&v13);
  if (!v13.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v13.var0 + 192))(v13.var0, 0);
  v8 = *(_QWORD *)(a1 + 648);
  if (!v8)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t, PC_Sp_counted_base *))(*(_QWORD *)v8 + 168))(v8, v13.var0);
  PCMakePtr<LiSimpleCamera>(&v11);
  if (!v11.var0)
    throw_PCNullPointerException(1);
  if (!*a2)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v11.var0 + 168))(v11.var0);
  v9 = *(_QWORD *)(a1 + 648);
  if (!v9)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t, PC_Sp_counted_base *))(*(_QWORD *)v9 + 184))(v9, v11.var0);
  v10 = *(_QWORD *)(a1 + 648);
  if (!v10)
    throw_PCNullPointerException(1);
  LiRenderer::applyRenderToEquirect(v10, a3, a4);
  PCSharedCount::~PCSharedCount(&v12);
  PCSharedCount::~PCSharedCount(&v14);
}

void sub_1B2D01B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t Li3DGroupForEquirect::Li3DGroupForEquirect(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  *(_QWORD *)(a1 + 680) = &off_1E65EB048;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 696) = 1;
  LiGroup::LiGroup((LiGroup *)a1, (uint64_t *)&off_1E656B380);
  *(_QWORD *)a1 = &off_1E656B230;
  *(_QWORD *)(a1 + 680) = &unk_1E656B360;
  PCMakePtr<LiRenderer>((PCSharedCount *)(a1 + 648));
  PCMakePtr<LiGeode,PCPtr<LiRenderer> &>((LiImageSource **)(a1 + 648), (PCSharedCount *)(a1 + 664));
  Li3DGroupForEquirect::setUpGroup(a1, a2, a3, a4);
  return a1;
}

void sub_1B2D01C04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 672));
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 656));
  LiGroup::~LiGroup((PCSharedCount *)v1, (PCSharedCount *)&off_1E656B380);
  *(_QWORD *)(v1 + 680) = v2 + 16;
  *(_BYTE *)(v1 + 696) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 688));
  _Unwind_Resume(a1);
}

uint64_t Li3DGroupForEquirect::Li3DGroupForEquirect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  LiRenderer *v5;
  int EquirectWidth;
  LiRenderer *v7;
  int EquirectHeight;
  uint64_t v10;
  PCSharedCount v11;

  *(_QWORD *)(a1 + 680) = &off_1E65EB048;
  *(_QWORD *)(a1 + 688) = 0;
  *(_BYTE *)(a1 + 696) = 1;
  LiGroup::LiGroup(a1, (uint64_t *)&off_1E656B380, a2);
  *(_QWORD *)a1 = &off_1E656B230;
  *(_QWORD *)(a1 + 680) = &unk_1E656B360;
  PCMakePtr<LiRenderer>((PCSharedCount *)(a1 + 648));
  PCMakePtr<LiGeode,PCPtr<LiRenderer> &>((LiImageSource **)(a1 + 648), (PCSharedCount *)(a1 + 664));
  v4 = *(_QWORD *)(a2 + 648);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 192))(&v10);
  v5 = *(LiRenderer **)(a2 + 648);
  if (!v5)
    throw_PCNullPointerException(1);
  EquirectWidth = LiRenderer::getEquirectWidth(v5);
  v7 = *(LiRenderer **)(a2 + 648);
  if (!v7)
    throw_PCNullPointerException(1);
  EquirectHeight = LiRenderer::getEquirectHeight(v7);
  Li3DGroupForEquirect::setUpGroup(a1, &v10, EquirectWidth, EquirectHeight);
  PCSharedCount::~PCSharedCount(&v11);
  return a1;
}

void sub_1B2D01D60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v1 + 656));
  LiGroup::~LiGroup((PCSharedCount *)v1, (PCSharedCount *)&off_1E656B380);
  *(_QWORD *)(v1 + 680) = v2 + 16;
  *(_BYTE *)(v1 + 696) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 688));
  _Unwind_Resume(a1);
}

PCSharedCount *PCMakePtr<LiGroup>@<X0>(PCSharedCount *a1@<X8>)
{
  LiGroup *v2;

  v2 = (LiGroup *)operator new();
  LiGroup::LiGroup(v2);
  a1->var0 = (PC_Sp_counted_base *)v2;
  return PCSharedCount::PCSharedCount(a1 + 1, (LiGroup *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24)));
}

void sub_1B2D01E20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40089F272ELL);
  _Unwind_Resume(a1);
}

PCSharedCount *PCMakePtr<LiSimpleCamera>@<X0>(PCSharedCount *a1@<X8>)
{
  LiSimpleCamera *v2;

  v2 = (LiSimpleCamera *)operator new();
  LiSimpleCamera::LiSimpleCamera(v2);
  a1->var0 = (PC_Sp_counted_base *)v2;
  return PCSharedCount::PCSharedCount(a1 + 1, (LiSimpleCamera *)((char *)v2 + *(_QWORD *)(*(_QWORD *)v2 - 24)));
}

void sub_1B2D01E94(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40DA4F106CLL);
  _Unwind_Resume(a1);
}

uint64_t Li3DGroupForEquirect::getRenderer(Li3DGroupForEquirect *this)
{
  return *((_QWORD *)this + 81);
}

uint64_t Li3DGroupForEquirect::getGeode(Li3DGroupForEquirect *this)
{
  return *((_QWORD *)this + 83);
}

void Li3DGroupForEquirect::createCopyWithJustLights(Li3DGroupForEquirect *this@<X0>, int a2@<W1>, PCSharedCount *a3@<X8>)
{
  PCSharedCount v4;
  PCSharedCount v5;

  if (a2)
  {
    PCMakePtr<Li3DGroupForEquirect,Li3DGroupForEquirect const&,LiGroup::JustLightsTag>((uint64_t)this, &v4);
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3, &v4);
    PCSharedCount::~PCSharedCount(&v5);
  }
  else
  {
    LiGroup::createCopyWithJustLights(this, a3);
  }
}

void sub_1B2D01F28(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

PCSharedCount *PCMakePtr<Li3DGroupForEquirect,Li3DGroupForEquirect const&,LiGroup::JustLightsTag>@<X0>(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  PC_Sp_counted_base *v4;

  v4 = (PC_Sp_counted_base *)operator new();
  Li3DGroupForEquirect::Li3DGroupForEquirect((uint64_t)v4, a1);
  a2->var0 = v4;
  return PCSharedCount::PCSharedCount(a2 + 1, (PCShared_base *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
}

void sub_1B2D01F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40447CC23ELL);
  _Unwind_Resume(a1);
}

const char *Li3DGroupForEquirect::className(Li3DGroupForEquirect *this)
{
  return "Li3DGroupForEquirect";
}

void Li3DGroupForEquirect::~Li3DGroupForEquirect(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 680) = &off_1E65EB048;
  *(_BYTE *)(v1 + 696) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 688));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 680) = &off_1E65EB048;
  *(_BYTE *)(v1 + 696) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 688));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'Li3DGroupForEquirect::~Li3DGroupForEquirect(Li3DGroupForEquirect *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 680) = &off_1E65EB048;
  *(_BYTE *)(v1 + 696) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 688));
}

{
  Li3DGroupForEquirect::~Li3DGroupForEquirect((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void Li3DGroupForEquirect::~Li3DGroupForEquirect(PCSharedCount *this, PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;

  var0 = a2->var0;
  this->var0 = a2->var0;
  *(PCSharedCount *)((char *)this + *((_QWORD *)var0 - 3)) = a2[7];
  PCSharedCount::~PCSharedCount(this + 84);
  PCSharedCount::~PCSharedCount(this + 82);
  LiGroup::~LiGroup(this, a2 + 1);
}

void LiDropShadow::LiDropShadow(LiDropShadow *this)
{
  *((_QWORD *)this + 28) = &off_1E65EB048;
  *((_QWORD *)this + 29) = 0;
  *((_BYTE *)this + 240) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E656B788);
  *(_QWORD *)this = &off_1E656B680;
  *((_QWORD *)this + 28) = &unk_1E656B768;
  *((_QWORD *)this + 20) = 0x3FF0000000000000;
  *((_QWORD *)this + 15) = 0x3FF0000000000000;
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_BYTE *)this + 168) = 1;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  PCWorkingColorVector::PCWorkingColorVector((LiDropShadow *)((char *)this + 172));
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0x3FF0000000000000;
  *((_WORD *)this + 108) = 1;
}

void sub_1B2D021BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E656B788);
  *(_QWORD *)(v1 + 224) = v3 + 16;
  *(_BYTE *)(v1 + 240) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiDropShadow::~LiDropShadow(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;
  __CFString *v5;

  var0 = a2->var0;
  this->var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[7].var0;
  v5 = a2[1].var0;
  this->var0 = (PC_Sp_counted_base *)v5;
  *(__CFString **)((char *)this + v5[-1].info) = a2[6].var0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 2);
}

void LiDropShadow::~LiDropShadow(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 224) = &off_1E65EB048;
  *(_BYTE *)(v1 + 240) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 232));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 224) = &off_1E65EB048;
  *(_BYTE *)(v1 + 240) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 232));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiDropShadow::~LiDropShadow(LiDropShadow *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 224) = &off_1E65EB048;
  *(_BYTE *)(v1 + 240) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 232));
}

{
  LiDropShadow::~LiDropShadow((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t LiDropShadow::filteredEdges(LiDropShadow *this)
{
  return 1;
}

void LiDropShadow::clone(LiDropShadow *this@<X0>, PCSharedCount *a2@<X8>)
{
  LiDropShadow *v4;
  LiDropShadow *v5;
  PCSharedCount v6;

  v4 = (LiDropShadow *)operator new();
  LiDropShadow::LiDropShadow(v4);
  v5 = v4;
  PCSharedCount::PCSharedCount(&v6, (LiDropShadow *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  LiDropShadow::copyFrom(v4, this);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, (const PCSharedCount *)&v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2D023E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40A867C4B1);
  _Unwind_Resume(a1);
}

double LiDropShadow::copyFrom(LiDropShadow *this, const LiDropShadow *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t i;
  double result;

  LiImageFilter::copyFrom((PCSharedCount *)this, (const PCSharedCount *)a2);
  if (a2 != this)
  {
    v4 = 0;
    v5 = (char *)a2 + 40;
    v6 = (char *)this + 40;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)&v6[i] = *(_QWORD *)&v5[i];
      ++v4;
      v6 += 32;
      v5 += 32;
    }
    while (v4 != 4);
  }
  *((_BYTE *)this + 168) = *((_BYTE *)a2 + 168);
  *(_OWORD *)((char *)this + 172) = *(_OWORD *)((char *)a2 + 172);
  *((_OWORD *)this + 12) = *((_OWORD *)a2 + 12);
  result = *((double *)a2 + 26);
  *((double *)this + 26) = result;
  *((_WORD *)this + 108) = *((_WORD *)a2 + 108);
  return result;
}

void LiImageFilter::copyFrom(PCSharedCount *this, const PCSharedCount *a2)
{
  uint64_t *v4;
  PCSharedCount v5;

  this[2].var0 = a2[2].var0;
  v4 = (uint64_t *)&this[3];
  PCSharedCount::PCSharedCount(&v5, a2 + 3);
  PCSharedCount::operator=(v4, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  LODWORD(this[4].var0) = a2[4].var0;
}

void sub_1B2D02508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiDropShadow::pixelTransformSupport(uint64_t a1)
{
  double v1;
  double v2;
  _BOOL4 v3;
  _BOOL4 v4;

  v1 = *(double *)(a1 + 192);
  v2 = *(double *)(a1 + 200);
  v3 = v1 > -0.0000001;
  if (v1 >= 0.0000001)
    v3 = 0;
  v4 = v2 > -0.0000001;
  if (v2 >= 0.0000001)
    v4 = 0;
  if (v3 && v4)
    return 6;
  else
    return 4;
}

uint64_t LiDropShadow::getBoundary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, a2, a3);
}

HGNode *LiDropShadow::getHelium@<X0>(LiDropShadow *this@<X0>, LiAgent *a2@<X1>, HGBlur **a3@<X8>)
{
  HGNode *result;
  uint64_t *v7;
  __int128 v8;
  __int128 v9;
  float64x2_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  uint64_t i;
  _OWORD *v17;
  __int128 v18;
  uint64_t j;
  _OWORD *v20;
  __int128 v21;
  float64x2_t v22;
  float64x2_t v23;
  int8x16_t v24;
  float64x2_t v25;
  int8x16_t v26;
  float64x2_t v27;
  double v28;
  double v29;
  float v30;
  float v31;
  HGBlur *v32;
  HGBlur *v33;
  LiHeAlphaFill *v34;
  float v35;
  float v36;
  HGBlur *v37;
  HGHWBlendFlipped *v38;
  HGBlur *v39;
  __int128 v40[8];
  __int128 v41[8];
  _BYTE v42[128];
  HGBlur *v43[16];
  float64x2_t v44;
  float64x2_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  HGNode *v52;

  *((_DWORD *)a2 + 8) = 0;
  result = LiAgent::getHelium(a2, *((LiImageSource **)this + 2), &v52);
  if (!v52 || (v7 = (uint64_t *)*((_QWORD *)a2 + 6), *((_BYTE *)v7 + 144)))
  {
    *a3 = (HGBlur *)v52;
    return result;
  }
  v8 = *(_OWORD *)((char *)this + 120);
  v48 = *(_OWORD *)((char *)this + 104);
  v49 = v8;
  v9 = *(_OWORD *)((char *)this + 152);
  v50 = *(_OWORD *)((char *)this + 136);
  v51 = v9;
  v10 = *(float64x2_t *)((char *)this + 56);
  v44 = *(float64x2_t *)((char *)this + 40);
  v45 = v10;
  v11 = *(_OWORD *)((char *)this + 88);
  v46 = *(_OWORD *)((char *)this + 72);
  v47 = v11;
  v12 = *((_QWORD *)a2 + 20);
  if (*((_BYTE *)this + 168))
  {
    v13 = *v7;
    if (*v7 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v13 + 160))(v13))
    {
      v14 = (*(double (**)(uint64_t))(*(_QWORD *)v13 + 688))(v13);
      v15 = 1.0 / v14;
      if (1.0 / v14 != 1.0)
      {
        v44 = vmulq_n_f64(v44, v15);
        v45 = vmulq_n_f64(v45, v15);
      }
      if (v14 != 1.0)
      {
        v44.f64[0] = v14 * v44.f64[0];
        *(double *)&v46 = v14 * *(double *)&v46;
        *(double *)&v48 = v14 * *(double *)&v48;
        *(double *)&v50 = v14 * *(double *)&v50;
      }
    }
  }
  else
  {
    LiAgent::getObjectToImageTransform(a2, (uint64_t)v41);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v41, (__int128 *)&v44, (uint64_t)v42);
    LiAgent::getImageToObjectTransform((double **)a2, (uint64_t)v40);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v42, v40, (uint64_t)v43);
    for (i = 0; i != 16; i += 4)
    {
      v17 = (_OWORD *)&v44.f64[i];
      v18 = *(_OWORD *)&v43[i + 2];
      *v17 = *(_OWORD *)&v43[i];
      v17[1] = v18;
    }
  }
  PCMatrix44Tmpl<double>::operator*(v12, (__int128 *)&v44, (uint64_t)v42);
  LiAgent::getInversePixelTransform(a2, 0.0, (uint64_t)v41);
  PCMatrix44Tmpl<double>::operator*((uint64_t)v42, v41, (uint64_t)v43);
  for (j = 0; j != 16; j += 4)
  {
    v20 = (_OWORD *)&v44.f64[j];
    v21 = *(_OWORD *)&v43[j + 2];
    *v20 = *(_OWORD *)&v43[j];
    v20[1] = v21;
  }
  LiAgent::haveROI(a2);
  LiAgent::makeHeliumXForm((uint64_t)a2, (uint64_t)&v44, (uint64_t *)&v52, a3);
  v22 = *((float64x2_t *)this + 12);
  v23 = *(float64x2_t *)(v12 + 32);
  v24 = (int8x16_t)vmulq_f64(v23, (float64x2_t)0);
  v25 = vaddq_f64((float64x2_t)vextq_s8(v24, v24, 8uLL), vmulq_f64(v22, v23));
  v26 = (int8x16_t)vmulq_f64(*(float64x2_t *)v12, (float64x2_t)0);
  v27 = vaddq_f64((float64x2_t)vextq_s8(v26, v26, 8uLL), vmulq_f64(v22, *(float64x2_t *)v12));
  v28 = sqrt(vaddvq_f64(vmulq_f64(v27, v27)));
  v29 = sqrt(vaddvq_f64(vmulq_f64(v25, v25)));
  if (v28 > 0.0 || v29 > 0.0)
  {
    v30 = v28;
    v31 = v29;
    LiHelium::createBlurNode(v30, v31, v43);
    (*(void (**)(HGBlur *, _QWORD, HGBlur *))(*(_QWORD *)v43[0] + 120))(v43[0], 0, *a3);
    if (!*(_BYTE *)(*((_QWORD *)a2 + 6) + 132))
      (*(void (**)(HGBlur *, uint64_t, float, float, float, float))(*(_QWORD *)v43[0] + 96))(v43[0], 2, 1.0, 0.0, 0.0, 0.0);
    v32 = *a3;
    v33 = v43[0];
    if (*a3 != v43[0])
    {
      if (v32)
      {
        (*(void (**)(HGBlur *))(*(_QWORD *)v32 + 24))(v32);
        v33 = v43[0];
      }
      *a3 = v33;
      if (!v33)
        goto LABEL_27;
      (*(void (**)(HGBlur *))(*(_QWORD *)v33 + 16))(v33);
      v32 = v43[0];
    }
    if (v32)
      (*(void (**)(HGBlur *))(*(_QWORD *)v32 + 24))(v32);
  }
LABEL_27:
  v34 = (LiHeAlphaFill *)HGObject::operator new(0x1A0uLL);
  LiHeAlphaFill::LiHeAlphaFill(v34);
  (*(void (**)(LiHeAlphaFill *, _QWORD, HGBlur *))(*(_QWORD *)v34 + 120))(v34, 0, *a3);
  v35 = operator*((float *)this + 43, *((float *)this + 46));
  (*(void (**)(LiHeAlphaFill *, _QWORD, float))(*(_QWORD *)v34 + 96))(v34, 0, v35);
  v36 = *((double *)this + 26);
  (*(void (**)(LiHeAlphaFill *, uint64_t, float, float, float, float))(*(_QWORD *)v34 + 96))(v34, 1, v36, 0.0, 0.0, 0.0);
  v37 = *a3;
  if (*a3 != v34)
  {
    if (v37)
      (*(void (**)(HGBlur *))(*(_QWORD *)v37 + 24))(v37);
    *a3 = v34;
    (*(void (**)(LiHeAlphaFill *))(*(_QWORD *)v34 + 16))(v34);
  }
  (*(void (**)(LiHeAlphaFill *))(*(_QWORD *)v34 + 24))(v34);
  if (*((_BYTE *)this + 216))
  {
    v38 = (HGHWBlendFlipped *)HGObject::operator new(0x220uLL);
    HGHWBlendFlipped::HGHWBlendFlipped(v38);
    (*(void (**)(HGHWBlendFlipped *, _QWORD, HGNode *))(*(_QWORD *)v38 + 120))(v38, *((unsigned __int8 *)this + 217), v52);
    (*(void (**)(HGHWBlendFlipped *, BOOL, HGBlur *))(*(_QWORD *)v38 + 120))(v38, *((_BYTE *)this + 217) == 0, *a3);
    v39 = *a3;
    if (*a3 != v38)
    {
      if (v39)
        (*(void (**)(HGBlur *))(*(_QWORD *)v39 + 24))(v39);
      *a3 = v38;
      (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v38 + 16))(v38);
    }
    (*(void (**)(HGHWBlendFlipped *))(*(_QWORD *)v38 + 24))(v38);
  }
  result = v52;
  if (v52)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v52 + 24))(v52);
  return result;
}

void sub_1B2D02A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;

  if (a57)
    (*(void (**)(uint64_t))(*(_QWORD *)a57 + 24))(a57);
  if (*v57)
    (*(void (**)(_QWORD))(*(_QWORD *)*v57 + 24))(*v57);
  v60 = *(_QWORD *)(v58 - 56);
  if (v60)
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 24))(v60);
  _Unwind_Resume(exception_object);
}

uint64_t LiGL::useProgram(LiGL *this, ProShade::Program *a2)
{
  GLuint v4;

  if (a2)
  {
    (*(void (**)(ProShade::Program *))(*(_QWORD *)a2 + 16))(a2);
    v4 = ProShade::ProgramBase::id(a2);
    glUseProgram(v4);
  }
  return LiGL::setCurrentProgram((uint64_t *)this, (uint64_t)a2);
}

uint64_t LiGL::setCurrentProgram(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *a1;
  if (!v4)
  {
    v4 = LiGLState::get(0);
    *a1 = v4;
  }
  return LiGLState::setCurrentProgram(v4, a2);
}

void Li3DEngineImageSource::Li3DEngineImageSource(Li3DEngineImageSource *this)
{
  *((_QWORD *)this + 38) = &off_1E65EB048;
  *((_QWORD *)this + 39) = 0;
  *((_BYTE *)this + 320) = 1;
  LiRendererBase::LiRendererBase(this, &off_1E656BB68);
  *(_QWORD *)this = &off_1E656BA60;
  *((_QWORD *)this + 38) = &unk_1E656BB48;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 24) = 0x3FF0000000000000;
  *((_QWORD *)this + 19) = 0x3FF0000000000000;
  *((_QWORD *)this + 14) = 0x3FF0000000000000;
  *((_QWORD *)this + 9) = 0x3FF0000000000000;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *(_OWORD *)((char *)this + 200) = xmmword_1B30503B0;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0x3FF0000000000000;
  *((_DWORD *)this + 2) = 2;
  *((_DWORD *)this + 64) = 2;
  *((_DWORD *)this + 55) = -1082130432;
  *((_BYTE *)this + 216) = 0;
}

void sub_1B2D02C40(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 304) = v4;
  *(_BYTE *)(v1 + 320) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void Li3DEngineImageSource::~Li3DEngineImageSource(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;
  PC_Sp_counted_base *v5;
  PC_Sp_counted_base *v6;

  var0 = a2->var0;
  this->var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[7].var0;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&this[30]);
  v5 = this[29].var0;
  if (v5)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v5 + 24))(v5);
  v6 = this[28].var0;
  if (v6)
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v6 + 24))(v6);
  LiRendererBase::~LiRendererBase(this, a2 + 1);
}

void Li3DEngineImageSource::~Li3DEngineImageSource(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 304) = &off_1E65EB048;
  *(_BYTE *)(v1 + 320) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 312));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 304) = &off_1E65EB048;
  *(_BYTE *)(v1 + 320) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 312));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'Li3DEngineImageSource::~Li3DEngineImageSource(Li3DEngineImageSource *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 304) = &off_1E65EB048;
  *(_BYTE *)(v1 + 320) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 312));
}

{
  Li3DEngineImageSource::~Li3DEngineImageSource((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t Li3DEngineImageSource::setVideoOrientation(uint64_t result, int a2)
{
  *(_DWORD *)(result + 256) = a2;
  return result;
}

uint64_t Li3DEngineImageSource::pixelTransformSupport()
{
  return 3;
}

uint64_t Li3DEngineImageSource::estimateRenderMemory()
{
  return 0;
}

uint64_t Li3DEngineImageSource::handlesDepthOfField(Li3DEngineImageSource *this)
{
  return 0;
}

uint64_t Li3DEngineImageSource::setRenderInSingleScene(uint64_t this, char a2)
{
  *(_BYTE *)(this + 216) = a2;
  return this;
}

uint64_t Li3DEngineImageSource::supportsHeliumCPURendering(Li3DEngineImageSource *this)
{
  return 0;
}

CGColorSpace **Li3DEngineImageSource::getHelium@<X0>(PC_Sp_counted_base **this@<X0>, LiAgent *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t RequestedColorDescription;
  _QWORD *v7;
  const std::locale::facet *v8;
  _QWORD *v9;
  PC_Sp_counted_base *v10;
  PC_Sp_counted_base *v11;
  PC_Sp_counted_base **v12;
  PC_Sp_counted_base *v13;
  PC_Sp_counted_base *v14;
  PC_Sp_counted_base **v15;
  PC_Sp_counted_base *v16;
  CGColorSpace *obj;
  CGColorSpace *v18;
  CGColorSpace **v19;
  PC_Sp_counted_base *v20;
  LiSimpleCamera *v21;
  double v22;
  int v23;
  PCColorSpaceCache *v24;
  CGColorSpace *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t i;
  __int128 *v32;
  __int128 v33;
  int v34;
  int v35;
  int v36;
  int v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  int v53;
  HGXForm *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int DynamicRange;
  _QWORD *ToneMapMethod;
  __int128 v61[8];
  _QWORD v62[16];
  FxColorDescription v63[4];
  _OWORD v64[8];
  __n128 v65;
  __n128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75[8];
  PCSharedCount v76;
  PCSharedCount v77;
  PCSharedCount v78;
  PCSharedCount v79;
  PCSharedCount v80;
  PCSharedCount v81;
  _BYTE v82[40];
  FxColorDescription v83;

  RequestedColorDescription = LiAgent::getRequestedColorDescription(a2);
  FxColorDescription::FxColorDescription((uint64_t)&v83, RequestedColorDescription, 0);
  LiAgentRequestedColorSpaceSentry::LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)v82, a2, &v83);
  if (LiRenderingTechnology::getLogLithium((LiRenderingTechnology *)(*((_QWORD *)a2 + 6) + 80)))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DE4A50];
    (*((void (**)(PC_Sp_counted_base **, _QWORD, _QWORD))*this + 16))(this, MEMORY[0x1E0DE4A50], 0);
    std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
    v8 = std::locale::use_facet((const std::locale *)v63, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale((std::locale *)v63);
    std::ostream::put();
    std::ostream::flush();
  }
  v9 = HGObject::operator new(0x2C0uLL);
  LiHe3DEngineNode::LiHe3DEngineNode((LiHe3DEngineNode *)v9);
  v80.var0 = this[2];
  PCSharedCount::PCSharedCount(&v81, (const PCSharedCount *)this + 3);
  LiHe3DEngineNode::setScene((uint64_t)v9, &v80);
  PCSharedCount::~PCSharedCount(&v81);
  v10 = this[29];
  if (!v10)
  {
    v11 = (PC_Sp_counted_base *)v9[52];
    if (!v11)
      goto LABEL_12;
    v12 = (PC_Sp_counted_base **)(v9 + 52);
    goto LABEL_9;
  }
  (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v10 + 16))(this[29]);
  v11 = (PC_Sp_counted_base *)v9[52];
  if (v11 != v10)
  {
    v12 = (PC_Sp_counted_base **)(v9 + 52);
    if (!v11)
    {
      *v12 = v10;
LABEL_10:
      (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v10 + 16))(v10);
      goto LABEL_11;
    }
LABEL_9:
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v11 + 24))(v11);
    *v12 = v10;
    if (!v10)
      goto LABEL_12;
    goto LABEL_10;
  }
LABEL_11:
  (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v10 + 24))(v10);
LABEL_12:
  v13 = this[28];
  if (!v13)
  {
    v14 = (PC_Sp_counted_base *)v9[53];
    if (!v14)
      goto LABEL_21;
    v15 = (PC_Sp_counted_base **)(v9 + 53);
    goto LABEL_18;
  }
  (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v13 + 16))(this[28]);
  v14 = (PC_Sp_counted_base *)v9[53];
  if (v14 != v13)
  {
    v15 = (PC_Sp_counted_base **)(v9 + 53);
    if (!v14)
    {
      *v15 = v13;
LABEL_19:
      (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v13 + 16))(v13);
      goto LABEL_20;
    }
LABEL_18:
    (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v14 + 24))(v14);
    *v15 = v13;
    if (!v13)
      goto LABEL_21;
    goto LABEL_19;
  }
LABEL_20:
  (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v13 + 24))(v13);
LABEL_21:
  *((_DWORD *)v9 + 103) = *((_DWORD *)this + 55);
  LiHe3DEngineNode::setVideoOrientation((uint64_t)v9, *((_DWORD *)this + 64));
  v16 = this[30];
  if (!v16)
    goto LABEL_33;
  (*(void (**)(FxColorDescription *__return_ptr, PC_Sp_counted_base *, LiAgent *))(*(_QWORD *)v16 + 24))(v63, v16, a2);
  obj = v63[0]._pcColorDesc._colorSpaceRef._obj;
  if (!v63[0]._pcColorDesc._colorSpaceRef._obj)
  {
    v18 = (CGColorSpace *)v9[54];
    if (!v18)
      goto LABEL_31;
    v19 = (CGColorSpace **)(v9 + 54);
    goto LABEL_28;
  }
  (*(void (**)(CGColorSpace *))(*(_QWORD *)v63[0]._pcColorDesc._colorSpaceRef._obj + 16))(v63[0]._pcColorDesc._colorSpaceRef._obj);
  v18 = (CGColorSpace *)v9[54];
  if (v18 != obj)
  {
    v19 = (CGColorSpace **)(v9 + 54);
    if (!v18)
    {
      *v19 = obj;
LABEL_29:
      (*(void (**)(CGColorSpace *))(*(_QWORD *)obj + 16))(obj);
      goto LABEL_30;
    }
LABEL_28:
    (*(void (**)(CGColorSpace *))(*(_QWORD *)v18 + 24))(v18);
    *v19 = obj;
    if (!obj)
      goto LABEL_31;
    goto LABEL_29;
  }
LABEL_30:
  (*(void (**)(CGColorSpace *))(*(_QWORD *)obj + 24))(obj);
LABEL_31:
  if (v63[0]._pcColorDesc._colorSpaceRef._obj)
    (*(void (**)(CGColorSpace *))(*(_QWORD *)v63[0]._pcColorDesc._colorSpaceRef._obj + 24))(v63[0]._pcColorDesc._colorSpaceRef._obj);
LABEL_33:
  if (*((_BYTE *)this + 216))
    *((_BYTE *)v9 + 640) = 1;
  v20 = this[4];
  if (!v20)
    v20 = (PC_Sp_counted_base *)**((_QWORD **)a2 + 6);
  v21 = (LiSimpleCamera *)operator new();
  LiSimpleCamera::LiSimpleCamera(v21);
  v78.var0 = (PC_Sp_counted_base *)v21;
  PCSharedCount::PCSharedCount(&v79, (LiSimpleCamera *)((char *)v21 + *(_QWORD *)(*(_QWORD *)v21 - 24)));
  if (!v78.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)v78.var0 + 168))(v78.var0, v20);
  if (!v78.var0)
    throw_PCNullPointerException(1);
  if ((*(unsigned int (**)(PC_Sp_counted_base *))(*(_QWORD *)v78.var0 + 632))(v78.var0))
  {
    if (!v78.var0)
      throw_PCNullPointerException(1);
    v22 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v78.var0 + 504))(v78.var0);
    if (v22 < 0.1 || fabs(v22 + -0.1) < 0.0000001)
    {
      if (!v78.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(PC_Sp_counted_base *, double))(*(_QWORD *)v78.var0 + 512))(v78.var0, 0.0);
    }
    if (!v78.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v78.var0 + 528))(v78.var0, 0);
    if (!v78.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v78.var0 + 384))(v78.var0, 0);
  }
  v23 = (*(uint64_t (**)(PC_Sp_counted_base *))(*(_QWORD *)v20 + 632))(v20);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v76, &v78);
  LiHe3DEngineNode::setCamera((uint64_t)v9, &v76, v23 != 0);
  PCSharedCount::~PCSharedCount(&v77);
  v25 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(v24);
  v9[86] = FxColorDescription::getCGColorSpace((FxColorDescription *)(*((_QWORD *)a2 + 6) + 160));
  v9[87] = v25;
  LiHe3DEngineNode::setTimeInSeconds((uint64_t)v9, *((double *)this + 35));
  LiHe3DEngineNode::setEnvironmentMap((uint64_t)v9, (CGImage *)this[36]);
  LiHe3DEngineNode::setEnvironmentMapIntensity((uint64_t)v9, *((double *)this + 37));
  v26 = *(_OWORD *)(this + 19);
  v75[4] = *(_OWORD *)(this + 17);
  v75[5] = v26;
  v27 = *(_OWORD *)(this + 23);
  v75[6] = *(_OWORD *)(this + 21);
  v75[7] = v27;
  v28 = *(_OWORD *)(this + 11);
  v75[0] = *(_OWORD *)(this + 9);
  v75[1] = v28;
  v29 = *(_OWORD *)(this + 15);
  v75[2] = *(_OWORD *)(this + 13);
  v75[3] = v29;
  if (this[4])
  {
    v30 = **((_QWORD **)a2 + 6);
    if (v30)
    {
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v30 + 48))(&v67);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v67, v75, (uint64_t)v63);
      for (i = 0; i != 128; i += 32)
      {
        v32 = &v75[i / 0x10];
        v33 = *(_OWORD *)&v63[i / 0x20]._pcColorDesc._toneMapMethod._gain;
        *v32 = *(_OWORD *)&v63[i / 0x20]._pcColorDesc._colorSpaceRef._obj;
        v32[1] = v33;
      }
    }
  }
  v66 = *(__n128 *)(this + 25);
  LiHe3DEngineNode::setROI((__n128 *)v9, &v66);
  v34 = *((_DWORD *)this + 52);
  v35 = *((_DWORD *)this + 53);
  if (v34 >= 0)
    v36 = *((_DWORD *)this + 52);
  else
    v36 = v34 + 1;
  if (v35 >= 0)
    v37 = *((_DWORD *)this + 53);
  else
    v37 = v35 + 1;
  v38 = (__int128 *)*((_QWORD *)a2 + 20);
  v39 = v38[3];
  v41 = *v38;
  v40 = v38[1];
  v69 = v38[2];
  v70 = v39;
  v67 = v41;
  v68 = v40;
  v42 = v38[7];
  v44 = v38[4];
  v43 = v38[5];
  v73 = v38[6];
  v74 = v42;
  v71 = v44;
  v72 = v43;
  if (!v78.var0)
    throw_PCNullPointerException(1);
  v45 = (*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v78.var0 + 688))(v78.var0);
  if (!v78.var0)
    throw_PCNullPointerException(1);
  v46 = (float)(v36 >> 1);
  v47 = (float)(v37 >> 1);
  if ((*(double (**)(PC_Sp_counted_base *))(*(_QWORD *)v78.var0 + 504))(v78.var0) == 0.0)
  {
    v50 = *((double *)&v68 + 1);
    v51 = *((double *)&v70 + 1);
    v49 = v46 - v50;
    v48 = v47 - v51;
    v65.n128_f64[0] = (float)(v46 - v50);
    v65.n128_f64[1] = (float)(v47 - v51);
    LiHe3DEngineNode::setOrthoCameraShift((__n128 *)v9, &v65);
  }
  else
  {
    v48 = 0.0;
    if (v45 + -1.0 <= -0.0000001 || v45 + -1.0 >= 0.0000001)
    {
      v52 = v46 / v45;
      v49 = v46 - v52;
    }
    else
    {
      v49 = 0.0;
    }
  }
  *((double *)&v68 + 1) = v46;
  *((double *)&v70 + 1) = v47;
  *(_QWORD *)&v67 = 0x3FF0000000000000;
  *((_QWORD *)&v69 + 1) = 0x3FF0000000000000;
  LiAgent::setPixelTransform((uint64_t)a2, (uint64_t)&v67);
  v64[4] = v71;
  v64[5] = v72;
  v64[6] = v73;
  v64[7] = v74;
  v64[0] = v67;
  v64[1] = v68;
  v64[2] = v69;
  v64[3] = v70;
  LiHe3DEngineNode::setPixelTransform((uint64_t)v9, (uint64_t)v64);
  LiHe3DEngineNode::getHelium3DEngine((LiHe3DEngineNode *)v9, (LiSceneObject *)this[2], a2);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 16))(v9);
  FxSupport::newHGRefWithInput<HGColorClamp>((uint64_t)v9, &v63[0]._pcColorDesc._colorSpaceRef._obj);
  HGColorClamp::SetClampMaxValues((float *)v63[0]._pcColorDesc._colorSpaceRef._obj, 3.4028e38, 3.4028e38, 3.4028e38, 1.0);
  HGColorClamp::SetClampMinValues((float *)v63[0]._pcColorDesc._colorSpaceRef._obj, -3.4028e38, -3.4028e38, -3.4028e38, 0.0);
  *a3 = (uint64_t)v63[0]._pcColorDesc._colorSpaceRef._obj;
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 24))(v9);
  if (*((double *)&v69 + 1) > 0.0)
  {
    v53 = *((_DWORD *)this + 53);
    HGTransform::HGTransform((HGTransform *)v63);
    HGTransform::LoadIdentity((HGTransform *)v63);
    HGTransform::Scale((HGTransform *)v63, 1.0 / v45, -1.0, 1.0);
    HGTransform::Translate((HGTransform *)v63, v49, (float)(v48 + (float)v53), 0.0);
    v54 = (HGXForm *)HGObject::operator new(0x210uLL);
    HGXForm::HGXForm(v54);
    (*(void (**)(HGXForm *, FxColorDescription *))(*(_QWORD *)v54 + 576))(v54, v63);
    (*(void (**)(HGXForm *, _QWORD, uint64_t))(*(_QWORD *)v54 + 120))(v54, 0, *a3);
    v55 = *a3;
    if ((HGXForm *)*a3 != v54)
    {
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
      *a3 = (uint64_t)v54;
      (*(void (**)(HGXForm *))(*(_QWORD *)v54 + 16))(v54);
    }
    (*(void (**)(HGXForm *))(*(_QWORD *)v54 + 24))(v54);
    HGTransform::~HGTransform((HGTransform *)v63);
  }
  if (!PCMatrix44Tmpl<double>::is2Didentity((double *)v75))
  {
    PCMatrix44Tmpl<double>::operator*(*((_QWORD *)a2 + 20), v75, (uint64_t)v62);
    LiAgent::getInversePixelTransform(a2, 0.0, (uint64_t)v61);
    PCMatrix44Tmpl<double>::operator*((uint64_t)v62, v61, (uint64_t)v63);
    LiAgent::makeHeliumXForm((uint64_t)a2, (uint64_t)v63, a3, v62);
    v56 = *a3;
    v57 = v62[0];
    if (*a3 == v62[0])
    {
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
    }
    else
    {
      if (v56)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 24))(v56);
        v57 = v62[0];
      }
      *a3 = v57;
    }
  }
  DynamicRange = FxColorDescription::getDynamicRange(&v83);
  ToneMapMethod = (_QWORD *)FxColorDescription::getToneMapMethod(&v83);
  FxColorDescription::FxColorDescription((uint64_t)v63, v25, DynamicRange, ToneMapMethod, 1);
  LiAgent::setActualColorDescription((CGColorSpace **)a2, v63);
  PCCFRef<CGColorSpace *>::~PCCFRef(&v63[0]._pcColorDesc._colorSpaceRef._obj);
  PCSharedCount::~PCSharedCount(&v79);
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 24))(v9);
  LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)v82);
  return PCCFRef<CGColorSpace *>::~PCCFRef(&v83._pcColorDesc._colorSpaceRef._obj);
}

void sub_1B2D03734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::locale a41)
{
  uint64_t v41;
  _QWORD *v42;
  PCSharedCount *v43;
  uint64_t v44;

  if (a25)
    (*(void (**)(uint64_t))(*(_QWORD *)a25 + 24))(a25);
  if (*v42)
    (*(void (**)(_QWORD))(*(_QWORD *)*v42 + 24))(*v42);
  PCSharedCount::~PCSharedCount(v43);
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
  LiAgentRequestedColorSpaceSentry::~LiAgentRequestedColorSpaceSentry((LiAgentRequestedColorSpaceSentry *)(v44 - 200));
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)(v44 - 160));
  _Unwind_Resume(a1);
}

uint64_t FxSupport::newHGRefWithInput<HGColorClamp>@<X0>(uint64_t a1@<X0>, HGColorClamp **a2@<X8>)
{
  HGColorClamp *v4;

  v4 = (HGColorClamp *)HGObject::operator new(0x1C0uLL);
  HGColorClamp::HGColorClamp(v4);
  *a2 = v4;
  return (*(uint64_t (**)(HGColorClamp *, _QWORD, uint64_t))(*(_QWORD *)v4 + 120))(v4, 0, a1);
}

void sub_1B2D03A00(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void LiRendererBase::LiRendererBase(LiRendererBase *this, _QWORD *a2)
{
  PC_Sp_counted_base *v4;
  PCSharedCount *v5;

  LiImageSource::LiImageSource((LiImageSource *)this, a2 + 1);
  v4 = (PC_Sp_counted_base *)*a2;
  v5->var0 = *(PC_Sp_counted_base **)a2;
  *(PCSharedCount *)((char *)v5 + *((_QWORD *)v4 - 3)) = (PCSharedCount)a2[5];
  v5[2].var0 = 0;
  PCSharedCount::PCSharedCount(v5 + 3);
  *((_QWORD *)this + 4) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 5);
}

void sub_1B2D03A98(_Unwind_Exception *a1)
{
  OZChannelBase *v1;
  const PCString *v2;
  PCSharedCount *v3;

  PCSharedCount::~PCSharedCount(v3);
  OZChannelBase::setRangeName(v1, v2);
  _Unwind_Resume(a1);
}

void LiRendererBase::~LiRendererBase(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;

  var0 = a2->var0;
  this->var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[5].var0;
  PCSharedCount::~PCSharedCount(this + 5);
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 1);
}

PCShared_base **LiRendererBase::setScene(PCShared_base **this, LiSceneObject *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 2, a2);
}

uint64_t LiRendererBase::getWorld(LiRendererBase *this)
{
  return *((_QWORD *)this + 2);
}

PCShared_base **LiRendererBase::setCamera(PCShared_base **this, LiCamera *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 4, a2);
}

void LiRendererBase::getCamera(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->var0 = this[4].var0;
  PCSharedCount::PCSharedCount(a2 + 1, this + 5);
}

uint64_t LiRendererBase::print(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v6 + 752))(v6, a2, a3);
  else
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Active camera\n", 14);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v7 + 112))(v7, a2, a3);
}

uint64_t LiRendererBase::adjustCasterLocalToWorld(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v13;
  PCSharedCount v14;
  _BYTE v15[8];
  uint64_t v16;

  v7 = *(_QWORD *)(result + 16);
  if (v7)
  {
    LiSceneIterator<LiGeode,LiSceneIteratorAlways>::LiSceneIterator((uint64_t)v15, v7);
    while (v16 ? LiSceneIterator<LiGeode,LiSceneIteratorAlways>::next : 0)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v16 + 160))(&v13);
      if (v13)
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 144))(v13, a2, a3, a4, a5, a6);
      PCSharedCount::~PCSharedCount(&v14);
      LiSceneIterator<LiGeode,LiSceneIteratorAlways>::operator++((uint64_t)v15);
    }
    return LiSceneIterator<LiGeode,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)v15);
  }
  return result;
}

void sub_1B2D03C9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(v12);
  LiSceneIterator<LiGeode,LiSceneIteratorAlways>::~LiSceneIterator((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t LiSceneIterator<LiGeode,LiSceneIteratorAlways>::operator++(uint64_t a1)
{
  const void *v2;

  if (*(_QWORD *)(a1 + 8))
  {
    do
    {
      LiSceneIterator<LiGeode,LiSceneIteratorAlways>::next(a1);
      v2 = *(const void **)(a1 + 8);
    }
    while (v2
  }
  return a1;
}

uint64_t LiSceneIterator<LiGeode,LiSceneIteratorAlways>::LiSceneIterator(uint64_t a1, uint64_t a2)
{
  const void *v3;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E656BE50;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  while (1)
  {
    v3 = *(const void **)(a1 + 8);
    if (!v3
    {
      break;
    }
    LiSceneIterator<LiGeode,LiSceneIteratorAlways>::next(a1);
  }
  return a1;
}

void sub_1B2D03DCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCArray<LiSceneIterator<LiGeode,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiGeode,LiSceneIteratorAlways>::Obj>>::~PCArray(v1);
  _Unwind_Resume(a1);
}

double LiSceneIterator<LiGeode,LiSceneIteratorAlways>::next(uint64_t a1)
{
  const void *v2;
  PCArray_base *v3;
  PCArray_base *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  __int128 v14;
  uint64_t j;
  _OWORD *v16;
  __int128 v17;
  int v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _DWORD *v24;
  signed int v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (v3
      && (v4 = v3,
          v3 = (PCArray_base *)(*(uint64_t (**)(PCArray_base *))(*(_QWORD *)v3 + 136))(v3),
          (_DWORD)v3))
    {
      v5 = *(_DWORD *)(a1 + 28);
      if (*(_DWORD *)(a1 + 24) <= v5)
        v6 = (2 * (v5 + 1)) | 1;
      else
        v6 = *(_DWORD *)(a1 + 24);
      PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v5 + 1, v6);
      v7 = *(_QWORD *)(a1 + 32) + 144 * *(int *)(a1 + 28);
      *(_QWORD *)(v7 - 144) = v4;
      *(_DWORD *)(v7 - 136) = 0;
      v8 = v7 - 128;
      if (a1 + 40 != v7 - 128)
      {
        v9 = 0;
        v10 = a1 + 40;
        v11 = v8;
        do
        {
          for (i = 0; i != 32; i += 8)
            *(_QWORD *)(v11 + i) = *(_QWORD *)(v10 + i);
          ++v9;
          v11 += 32;
          v10 += 32;
        }
        while (v9 != 4);
      }
      v13 = (*(uint64_t (**)(PCArray_base *, _QWORD))(*(_QWORD *)v4 + 144))(v4, 0);
      *(_QWORD *)(a1 + 8) = v13;
      PCMatrix44Tmpl<double>::operator*(v8, (__int128 *)(v13 + 8), (uint64_t)v34);
      if (v34 != (_OWORD *)(a1 + 40))
      {
        for (j = 0; j != 8; j += 2)
        {
          v16 = (_OWORD *)(a1 + 40 + j * 16);
          v14 = v34[j];
          v17 = v34[j + 1];
          *v16 = v14;
          v16[1] = v17;
        }
      }
    }
    else
    {
      v18 = *(_DWORD *)(a1 + 28);
      if (v18)
      {
        v19 = (_OWORD *)(a1 + 40);
        while (1)
        {
          if (v18 <= 0)
            PCArray_base::badIndex(v3);
          v20 = v18 - 1;
          v21 = *(_QWORD *)(a1 + 32);
          v22 = (uint64_t *)(v21 + 144 * v20);
          v23 = *v22;
          v25 = *((_DWORD *)v22 + 2);
          v24 = v22 + 1;
          if (v25 < (int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23) - 1))
            break;
          v26 = *(_DWORD *)(a1 + 28) - 1;
          if (*(_DWORD *)(a1 + 24) >= v26)
            v27 = *(_DWORD *)(a1 + 24);
          else
            v27 = (2 * v26) | 1;
          v3 = (PCArray_base *)PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1 + 16, v26, v27);
          v18 = *(_DWORD *)(a1 + 28);
          if (!v18)
            goto LABEL_25;
        }
        ++*v24;
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 144))(v23);
        *(_QWORD *)(a1 + 8) = v28;
        PCMatrix44Tmpl<double>::operator*(v21 + 144 * v20 + 16, (__int128 *)(v28 + 8), (uint64_t)v34);
        if (v34 != v19)
        {
          v29 = v38;
          *(_OWORD *)(a1 + 104) = v37;
          *(_OWORD *)(a1 + 120) = v29;
          v30 = v40;
          *(_OWORD *)(a1 + 136) = v39;
          *(_OWORD *)(a1 + 152) = v30;
          v31 = v34[1];
          *v19 = v34[0];
          *(_OWORD *)(a1 + 56) = v31;
          *(_QWORD *)&v14 = v35;
          v32 = v36;
          *(_OWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 88) = v32;
        }
      }
      else
      {
LABEL_25:
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 160) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
        *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
        *(_QWORD *)&v14 = 0;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 88) = 0u;
        *(_OWORD *)(a1 + 104) = 0u;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
      }
    }
  }
  return *(double *)&v14;
}

uint64_t PCArray<LiSceneIterator<LiGeode,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiGeode,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656BE50;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<LiSceneIterator<LiGeode,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiGeode,LiSceneIteratorAlways>::Obj>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656BE50;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t LiSceneIterator<LiGeode,LiSceneIteratorAlways>::~LiSceneIterator(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = &unk_1E656BE50;
  v2 = a1 + 16;
  if (*(int *)(v2 + 8) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(v2 + 8);
  PCArray<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj,PCArray_Traits<LiSceneIterator<LiLayeredMaterial,LiSceneIteratorAlways>::Obj>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void LiFixedSize::LiFixedSize(LiFixedSize *this)
{
  *((_QWORD *)this + 7) = &off_1E65EB048;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E656BF98);
  *(_QWORD *)this = &off_1E656BE90;
  *((_QWORD *)this + 7) = &unk_1E656BF78;
  *(_OWORD *)((char *)this + 36) = xmmword_1B30503B0;
}

void sub_1B2D04218(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 56) = v4;
  *(_BYTE *)(v1 + 72) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiFixedSize::~LiFixedSize(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = &off_1E65EB048;
  *(_BYTE *)(v1 + 72) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 64));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = &off_1E65EB048;
  *(_BYTE *)(v1 + 72) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 64));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiFixedSize::~LiFixedSize(LiFixedSize *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = &off_1E65EB048;
  *(_BYTE *)(v1 + 72) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 64));
}

{
  LiFixedSize::~LiFixedSize((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

PCSharedCount *LiFixedSize::clone@<X0>(LiFixedSize *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;

  v4 = operator new();
  LiFixedSize::LiFixedSize((LiFixedSize *)v4);
  v5 = *(_OWORD *)((char *)this + 36);
  a2->var0 = (PC_Sp_counted_base *)v4;
  *(_OWORD *)(v4 + 36) = v5;
  return PCSharedCount::PCSharedCount(a2 + 1, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
}

void sub_1B2D0438C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40063EAE96);
  _Unwind_Resume(a1);
}

uint64_t LiFixedSize::filteredEdges(LiFixedSize *this)
{
  return 1;
}

uint64_t LiFixedSize::pixelTransformSupport()
{
  return 0;
}

double LiFixedSize::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return LiFixedSize::fixMyPixelTransform(a1, a3);
}

double LiFixedSize::fixMyPixelTransform(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0000001;
  if (fabs(*(double *)a2 + -1.0) >= 0.0000001
    || fabs(*(double *)(a2 + 8)) >= 0.0000001
    || vabdd_f64(*(double *)(a2 + 24), round(*(double *)(a2 + 24))) >= 0.0000001
    || fabs(*(double *)(a2 + 32)) >= 0.0000001
    || fabs(*(double *)(a2 + 40) + -1.0) >= 0.0000001
    || vabdd_f64(*(double *)(a2 + 56), round(*(double *)(a2 + 56))) >= 0.0000001
    || fabs(*(double *)(a2 + 96)) >= 0.0000001
    || fabs(*(double *)(a2 + 104)) >= 0.0000001
    || fabs(*(double *)(a2 + 120) + -1.0) >= 0.0000001)
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
  }
  return result;
}

HGNode *LiFixedSize::getHelium@<X0>(LiFixedSize *this@<X0>, LiAgent *a2@<X1>, HGCrop **a3@<X8>)
{
  uint64_t v6;
  const double *v7;
  float64x2_t v8;
  float64x2_t v9;
  HGCrop *v10;
  uint64_t v11;
  int v12;
  int v13;
  HGNode *result;
  HGNode *v15;
  __n128 v16;

  v6 = *((_QWORD *)a2 + 20);
  v7 = (const double *)(v6 + 120);
  v8.f64[0] = *(float64_t *)(v6 + 24);
  v8.f64[1] = *(float64_t *)(v6 + 56);
  v9 = vld1q_dup_f64(v7);
  *(int32x2_t *)&v8.f64[0] = vadd_s32(*(int32x2_t *)((char *)this + 36), vmovn_s64(vcvtq_s64_f64(vdivq_f64(v8, v9))));
  v9.f64[0] = *(float64_t *)((char *)this + 44);
  v16.n128_u64[0] = *(_QWORD *)&v8.f64[0];
  v16.n128_u64[1] = *(_QWORD *)&v9.f64[0];
  LiAgent::setInputROI((uint64_t)a2, &v16);
  LiAgent::getHelium(a2, *((LiImageSource **)this + 2), &v15);
  v10 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v10);
  v11 = HGRectMake4i(v16.n128_u32[0], v16.n128_u32[1], v16.n128_u32[2] + v16.n128_u32[0], v16.n128_u32[3] + v16.n128_u32[1]);
  (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v10 + 96))(v10, 0, (float)(int)v11, (float)SHIDWORD(v11), (float)v12, (float)v13);
  (*(void (**)(HGCrop *, _QWORD, HGNode *))(*(_QWORD *)v10 + 120))(v10, 0, v15);
  *a3 = v10;
  result = v15;
  if (v15)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v15 + 24))(v15);
  return result;
}

void sub_1B2D045B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void LiGaussianBlur::clone(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4;
  PCSharedCount v5;
  PCSharedCount v6;
  PCSharedCount v7;

  v4 = operator new();
  LiGaussianBlur::LiGaussianBlur((LiGaussianBlur *)v4);
  v5.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v6, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  *((PCSharedCount *)v5.var0 + 5) = this[5];
  *(PCSharedCount *)(v4 + 48) = this[6];
  *(_BYTE *)(v4 + 56) = this[7].var0;
  *(PCSharedCount *)(v4 + 16) = this[2];
  PCSharedCount::PCSharedCount(&v7, this + 3);
  PCSharedCount::operator=((uint64_t *)(v4 + 24), (uint64_t *)&v7);
  PCSharedCount::~PCSharedCount(&v7);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2D046FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

void LiGaussianBlur::LiGaussianBlur(LiGaussianBlur *this)
{
  *((_QWORD *)this + 8) = &off_1E65EB048;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E656C378);
  *(_QWORD *)this = &off_1E656C270;
  *((_QWORD *)this + 8) = &unk_1E656C358;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 1;
}

void sub_1B2D047B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 64) = v3;
  *(_BYTE *)(v1 + 80) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

float64x2_t LiGaussianBlur::getBoundary(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  uint64_t v5;
  float64x2_t result;
  float64x2_t v7;
  float64x2_t v8;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    throw_PCNullPointerException(1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, float64x2_t *))(*(_QWORD *)v5 + 24))(v5, a2, a3))
  {
    v7 = vaddq_f64(*(float64x2_t *)(a1 + 40), *(float64x2_t *)(a1 + 40));
    v8 = vsubq_f64(*a3, v7);
    result = vsubq_f64(a3[1], vsubq_f64(vnegq_f64(v7), v7));
    *a3 = v8;
    a3[1] = result;
  }
  return result;
}

HGNode *LiGaussianBlur::getHelium@<X0>(LiGaussianBlur *this@<X0>, __n128 *a2@<X1>, _QWORD *a3@<X8>)
{
  float v6;
  LiHelium *v7;
  LiHelium *BlurExtent;
  unsigned int v9;
  float v10;
  unsigned int v11;
  HGNode *result;
  float v13;
  float v14;
  HGBlur *v15;
  __n128 v16;

  if (LiAgent::haveROI((LiAgent *)a2))
  {
    LiAgent::getROI(a2, &v16);
    v6 = *((double *)this + 5);
    BlurExtent = (LiHelium *)LiHelium::getBlurExtent(v7, v6);
    v9 = BlurExtent;
    v10 = *((double *)this + 6);
    v11 = LiHelium::getBlurExtent(BlurExtent, v10);
    v16.n128_u32[0] -= v9;
    v16.n128_u32[1] -= v11;
    *(int32x2_t *)&v16.n128_i8[8] = vadd_s32(*(int32x2_t *)&v16.n128_i8[8], vadd_s32((int32x2_t)__PAIR64__(v11, v9), (int32x2_t)__PAIR64__(v11, v9)));
    LiAgent::setInputROI((uint64_t)a2, &v16);
  }
  result = LiAgent::getHelium((LiAgent *)a2, *((LiImageSource **)this + 2), (HGNode **)&v16);
  if (v16.n128_u64[0])
  {
    v13 = *((double *)this + 5);
    v14 = *((double *)this + 6);
    LiHelium::createBlurNode(v13, v14, &v15);
    (*(void (**)(HGBlur *, _QWORD, unint64_t))(*(_QWORD *)v15 + 120))(v15, 0, v16.n128_u64[0]);
    result = (HGNode *)v16.n128_u64[0];
    *a3 = v15;
    if (result)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)result + 24))(result);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_1B2D04944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  _Unwind_Resume(exception_object);
}

void LiLightInfo::loadShadowSnippet(PCSharedCount *a1@<X8>)
{
  unsigned __int8 v3;
  PCString v4;

  {
    PCString::PCString(&v4, "shadow");
    ProShade::Snippet::loadFromBundle((PCSharedCount *)&LiLightInfo::loadShadowSnippet(void)::snippet);
    PCString::~PCString(&v4);
    __cxa_atexit((void (*)(void *))PCPtr<ProShade::Snippet>::~PCPtr, &LiLightInfo::loadShadowSnippet(void)::snippet, &dword_1B2737000);
  }
  a1->var0 = (PC_Sp_counted_base *)LiLightInfo::loadShadowSnippet(void)::snippet;
  PCSharedCount::PCSharedCount(a1 + 1, (const PCSharedCount *)algn_1EF075E48);
}

void sub_1B2D04A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

PCSharedCount *PCPtr<ProShade::Snippet>::~PCPtr(PCSharedCount *a1)
{
  PCSharedCount::~PCSharedCount(a1 + 1);
  return a1;
}

void LiLightInfo::LiLightInfo(LiLightInfo *this)
{
  PCSharedCount *v2;
  LiGLState *v3;
  uint64_t v4[3];
  uint64_t *v5;

  v2 = ProShade::Uniform::Uniform((PCSharedCount *)this, 3, 4);
  ProShade::Uniform::Uniform(v2 + 4, 3, 4);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 8, 3, 4);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 12, 3, 4);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 16, 3, 1);
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 20);
  *((_QWORD *)this + 20) = &unk_1E656C648;
  ProShade::SamplerT<34067,true,false,false>::SamplerT((PCSharedCount *)this + 32);
  *((_QWORD *)this + 32) = &unk_1E656C6E8;
  *((_QWORD *)this + 44) = 0;
  ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)this + 45);
  *((_QWORD *)this + 45) = &unk_1E656C648;
  ProShade::Uniform::Uniform((PCSharedCount *)this + 57, 3, 7);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 61, 3, 7);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 65, 3, 1);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 69, 3, 4);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 73, 3, 1);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 77, 3, 1);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 81, 3, 3);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 85, 3, 1);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 89, 3, 1);
  ProShade::Uniform::Uniform((PCSharedCount *)this + 93, 3, 3);
  *((_QWORD *)this + 99) = 0;
  *((_QWORD *)this + 98) = 0;
  *((_QWORD *)this + 97) = (char *)this + 784;
  *((_DWORD *)this + 200) = 0;
  v4[2] = (uint64_t)this + 800;
  PCSpinLock::lock((os_unfair_lock_t)this + 200);
  v4[1] = 0;
  v4[0] = LiGLState::getCurrentContext(v3);
  v5 = v4;
  *((_BYTE *)std::__tree<std::__value_type<LiOpenGLContextGetter::C,BOOL>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,BOOL>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,BOOL>>>::__emplace_unique_key_args<LiOpenGLContextGetter::C,std::piecewise_construct_t const&,std::tuple<LiOpenGLContextGetter::C const&>,std::tuple<>>((uint64_t **)this + 97, v4, (uint64_t)&std::piecewise_construct, (_OWORD **)&v5)+ 48) = 0;
  PCSpinLock::unlock((os_unfair_lock_t)this + 200);
}

void sub_1B2D04C68(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  uint64_t v5;

  LiPerContextValue<ProShade::SamplerNode::Binding>::~LiPerContextValue(v5);
  v1[93].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 96);
  v1[89].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 92);
  v1[85].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 88);
  v1[81].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 84);
  v1[77].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 80);
  v1[73].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 76);
  v1[69].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 72);
  v1[65].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 68);
  v1[61].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 64);
  v1[57].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 60);
  ProShade::Sampler::~Sampler(v4);
  ProShade::Sampler::~Sampler(v3);
  ProShade::Sampler::~Sampler(v2);
  v1[16].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 19);
  v1[12].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 15);
  v1[8].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 11);
  v1[4].var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 7);
  v1->var0 = (PC_Sp_counted_base *)&unk_1E656A080;
  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

uint64_t LiLightInfo::get(LiLightInfo *this)
{
  int v1;
  unsigned __int8 v2;
  PCArray_base *v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  uint64_t v8;
  LiLightInfo *v9;
  PCArray_base *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _BYTE *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  PCShared_base *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  PCShared_base *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  _BYTE *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  _BYTE *v43;
  PCShared_base *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  _BYTE *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE *v54;
  PCShared_base *v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  _BYTE *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int v64;
  _BYTE *v65;
  PCShared_base *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  _BYTE *v70;
  unsigned int *v71;
  unsigned int v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  _BYTE *v76;
  PCShared_base *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  _BYTE *v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  _BYTE *v87;
  PCShared_base *v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  _BYTE *v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int v97;
  _BYTE *v98;
  PCShared_base *v99;
  unsigned int *v100;
  unsigned int v101;
  unsigned int v102;
  _BYTE *v103;
  unsigned int *v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int v108;
  _BYTE *v109;
  PCShared_base *v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  _BYTE *v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  _BYTE *v120;
  PCShared_base *v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int v124;
  _BYTE *v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int *v128;
  unsigned int v129;
  unsigned int v130;
  _BYTE *v131;
  PCShared_base *v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  _BYTE *v136;
  uint64_t v137;
  _BYTE *v139;
  _BYTE *v140;
  PCMutex *v141;
  char v142;

  v1 = (int)this;
  {
    PCMutex::PCMutex(&LiLightInfo::get(int,BOOL)::g_lightListLock);
    __cxa_atexit((void (*)(void *))PCMutex::~PCMutex, &LiLightInfo::get(int,BOOL)::g_lightListLock, &dword_1B2737000);
  }
  v141 = &LiLightInfo::get(int,BOOL)::g_lightListLock;
  v3 = (PCArray_base *)PCMutex::lock(&LiLightInfo::get(int,BOOL)::g_lightListLock);
  v142 = 1;
  if ((v4 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      ProShade::SamplerT<3553,false,false,false>::SamplerT((PCSharedCount *)&LiLightInfo::get(int,BOOL)::jitterSampler);
      LiLightInfo::get(int,BOOL)::jitterSampler = (uint64_t)&unk_1E656C648;
      __cxa_atexit((void (*)(void *))ProShade::Sampler::~Sampler, &LiLightInfo::get(int,BOOL)::jitterSampler, &dword_1B2737000);
    }
  }
  if ((v5 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      qword_1EF075F18 = 0;
      qword_1EF075F20 = 0;
      LiLightInfo::get(int,BOOL)::lightInfo = (uint64_t)&unk_1E656C7C0;
      __cxa_atexit((void (*)(void *))PCArray<LiLightInfo *,PCArray_Traits<LiLightInfo *>>::~PCArray, &LiLightInfo::get(int,BOOL)::lightInfo, &dword_1B2737000);
    }
  }
  v6 = HIDWORD(qword_1EF075F18);
  if (SHIDWORD(qword_1EF075F18) <= v1)
  {
    if ((int)qword_1EF075F18 <= v1)
      v7 = (2 * (v1 + 1)) | 1;
    else
      v7 = qword_1EF075F18;
    PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)&LiLightInfo::get(int,BOOL)::lightInfo, v1 + 1, v7);
    v8 = v6;
    v140 = 0;
    do
    {
      v9 = (LiLightInfo *)operator new();
      LiLightInfo::LiLightInfo(v9);
      if (v8 < 0 || v8 >= SHIDWORD(qword_1EF075F18))
        PCArray_base::badIndex(v10);
      *(_QWORD *)(qword_1EF075F20 + 8 * v8) = v9;
      if (v8 >= SHIDWORD(qword_1EF075F18))
        PCArray_base::badIndex(v10);
      v11 = *(_QWORD *)(qword_1EF075F20 + 8 * v8);
      *(_QWORD *)(v11 + 352) = &LiLightInfo::get(int,BOOL)::jitterSampler;
      LiString::format((LiString *)"position_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v12 = (unsigned int *)(v140 - 12);
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          *v140 = 0;
          if (v140)
            v15 = v140 - 12;
          else
            v15 = 0;
          free(v15);
        }
      }
      v140 = v139;
      if (v139)
      {
        v16 = (unsigned int *)(v139 - 12);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        if (v139)
        {
          v18 = (unsigned int *)(v139 - 12);
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            *v139 = 0;
            if (v139)
              v21 = v139 - 12;
            else
              v21 = 0;
            free(v21);
          }
        }
      }
      v22 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v22, (uint64_t *)&v140, 3, 4, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 16), v22);
      LiString::format((LiString *)"ambient_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v23 = (unsigned int *)(v140 - 12);
        do
        {
          v24 = __ldaxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
        {
          *v140 = 0;
          if (v140)
            v26 = v140 - 12;
          else
            v26 = 0;
          free(v26);
        }
      }
      v140 = v139;
      if (v139)
      {
        v27 = (unsigned int *)(v139 - 12);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
        if (v139)
        {
          v29 = (unsigned int *)(v139 - 12);
          do
          {
            v30 = __ldaxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
          {
            *v139 = 0;
            if (v139)
              v32 = v139 - 12;
            else
              v32 = 0;
            free(v32);
          }
        }
      }
      v33 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v33, (uint64_t *)&v140, 3, 4, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 48), v33);
      LiString::format((LiString *)"diffuse_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v34 = (unsigned int *)(v140 - 12);
        do
        {
          v35 = __ldaxr(v34);
          v36 = v35 - 1;
        }
        while (__stlxr(v36, v34));
        if (!v36)
        {
          *v140 = 0;
          if (v140)
            v37 = v140 - 12;
          else
            v37 = 0;
          free(v37);
        }
      }
      v140 = v139;
      if (v139)
      {
        v38 = (unsigned int *)(v139 - 12);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 + 1, v38));
        if (v139)
        {
          v40 = (unsigned int *)(v139 - 12);
          do
          {
            v41 = __ldaxr(v40);
            v42 = v41 - 1;
          }
          while (__stlxr(v42, v40));
          if (!v42)
          {
            *v139 = 0;
            if (v139)
              v43 = v139 - 12;
            else
              v43 = 0;
            free(v43);
          }
        }
      }
      v44 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v44, (uint64_t *)&v140, 3, 4, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 80), v44);
      LiString::format((LiString *)"specular_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v45 = (unsigned int *)(v140 - 12);
        do
        {
          v46 = __ldaxr(v45);
          v47 = v46 - 1;
        }
        while (__stlxr(v47, v45));
        if (!v47)
        {
          *v140 = 0;
          if (v140)
            v48 = v140 - 12;
          else
            v48 = 0;
          free(v48);
        }
      }
      v140 = v139;
      if (v139)
      {
        v49 = (unsigned int *)(v139 - 12);
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 + 1, v49));
        if (v139)
        {
          v51 = (unsigned int *)(v139 - 12);
          do
          {
            v52 = __ldaxr(v51);
            v53 = v52 - 1;
          }
          while (__stlxr(v53, v51));
          if (!v53)
          {
            *v139 = 0;
            if (v139)
              v54 = v139 - 12;
            else
              v54 = 0;
            free(v54);
          }
        }
      }
      v55 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v55, (uint64_t *)&v140, 3, 4, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 112), v55);
      LiString::format((LiString *)"eyeToShadow_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v56 = (unsigned int *)(v140 - 12);
        do
        {
          v57 = __ldaxr(v56);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, v56));
        if (!v58)
        {
          *v140 = 0;
          if (v140)
            v59 = v140 - 12;
          else
            v59 = 0;
          free(v59);
        }
      }
      v140 = v139;
      if (v139)
      {
        v60 = (unsigned int *)(v139 - 12);
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 + 1, v60));
        if (v139)
        {
          v62 = (unsigned int *)(v139 - 12);
          do
          {
            v63 = __ldaxr(v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, v62));
          if (!v64)
          {
            *v139 = 0;
            if (v139)
              v65 = v139 - 12;
            else
              v65 = 0;
            free(v65);
          }
        }
      }
      v66 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v66, (uint64_t *)&v140, 3, 7, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 472), v66);
      LiString::format((LiString *)"spotCosUmbraCutoff_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v67 = (unsigned int *)(v140 - 12);
        do
        {
          v68 = __ldaxr(v67);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v67));
        if (!v69)
        {
          *v140 = 0;
          if (v140)
            v70 = v140 - 12;
          else
            v70 = 0;
          free(v70);
        }
      }
      v140 = v139;
      if (v139)
      {
        v71 = (unsigned int *)(v139 - 12);
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 + 1, v71));
        if (v139)
        {
          v73 = (unsigned int *)(v139 - 12);
          do
          {
            v74 = __ldaxr(v73);
            v75 = v74 - 1;
          }
          while (__stlxr(v75, v73));
          if (!v75)
          {
            *v139 = 0;
            if (v139)
              v76 = v139 - 12;
            else
              v76 = 0;
            free(v76);
          }
        }
      }
      v77 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v77, (uint64_t *)&v140, 3, 1, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 600), v77);
      LiString::format((LiString *)"spotCosPenumbraCutoff_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v78 = (unsigned int *)(v140 - 12);
        do
        {
          v79 = __ldaxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (!v80)
        {
          *v140 = 0;
          if (v140)
            v81 = v140 - 12;
          else
            v81 = 0;
          free(v81);
        }
      }
      v140 = v139;
      if (v139)
      {
        v82 = (unsigned int *)(v139 - 12);
        do
          v83 = __ldaxr(v82);
        while (__stlxr(v83 + 1, v82));
        if (v139)
        {
          v84 = (unsigned int *)(v139 - 12);
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, v84));
          if (!v86)
          {
            *v139 = 0;
            if (v139)
              v87 = v139 - 12;
            else
              v87 = 0;
            free(v87);
          }
        }
      }
      v88 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v88, (uint64_t *)&v140, 3, 1, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 632), v88);
      LiString::format((LiString *)"spotDirection_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v89 = (unsigned int *)(v140 - 12);
        do
        {
          v90 = __ldaxr(v89);
          v91 = v90 - 1;
        }
        while (__stlxr(v91, v89));
        if (!v91)
        {
          *v140 = 0;
          if (v140)
            v92 = v140 - 12;
          else
            v92 = 0;
          free(v92);
        }
      }
      v140 = v139;
      if (v139)
      {
        v93 = (unsigned int *)(v139 - 12);
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 + 1, v93));
        if (v139)
        {
          v95 = (unsigned int *)(v139 - 12);
          do
          {
            v96 = __ldaxr(v95);
            v97 = v96 - 1;
          }
          while (__stlxr(v97, v95));
          if (!v97)
          {
            *v139 = 0;
            if (v139)
              v98 = v139 - 12;
            else
              v98 = 0;
            free(v98);
          }
        }
      }
      v99 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v99, (uint64_t *)&v140, 3, 3, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 664), v99);
      LiString::format((LiString *)"spotExponent_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v100 = (unsigned int *)(v140 - 12);
        do
        {
          v101 = __ldaxr(v100);
          v102 = v101 - 1;
        }
        while (__stlxr(v102, v100));
        if (!v102)
        {
          *v140 = 0;
          if (v140)
            v103 = v140 - 12;
          else
            v103 = 0;
          free(v103);
        }
      }
      v140 = v139;
      if (v139)
      {
        v104 = (unsigned int *)(v139 - 12);
        do
          v105 = __ldaxr(v104);
        while (__stlxr(v105 + 1, v104));
        if (v139)
        {
          v106 = (unsigned int *)(v139 - 12);
          do
          {
            v107 = __ldaxr(v106);
            v108 = v107 - 1;
          }
          while (__stlxr(v108, v106));
          if (!v108)
          {
            *v139 = 0;
            if (v139)
              v109 = v139 - 12;
            else
              v109 = 0;
            free(v109);
          }
        }
      }
      v110 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v110, (uint64_t *)&v140, 3, 1, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 696), v110);
      LiString::format((LiString *)"attenuationStartDist_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v111 = (unsigned int *)(v140 - 12);
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          *v140 = 0;
          if (v140)
            v114 = v140 - 12;
          else
            v114 = 0;
          free(v114);
        }
      }
      v140 = v139;
      if (v139)
      {
        v115 = (unsigned int *)(v139 - 12);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 + 1, v115));
        if (v139)
        {
          v117 = (unsigned int *)(v139 - 12);
          do
          {
            v118 = __ldaxr(v117);
            v119 = v118 - 1;
          }
          while (__stlxr(v119, v117));
          if (!v119)
          {
            *v139 = 0;
            if (v139)
              v120 = v139 - 12;
            else
              v120 = 0;
            free(v120);
          }
        }
      }
      v121 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v121, (uint64_t *)&v140, 3, 1, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 728), v121);
      LiString::format((LiString *)"attenuation_%d", (LiString *)&v139, v8);
      if (v140)
      {
        v122 = (unsigned int *)(v140 - 12);
        do
        {
          v123 = __ldaxr(v122);
          v124 = v123 - 1;
        }
        while (__stlxr(v124, v122));
        if (!v124)
        {
          *v140 = 0;
          if (v140)
            v125 = v140 - 12;
          else
            v125 = 0;
          free(v125);
        }
      }
      v140 = v139;
      if (v139)
      {
        v126 = (unsigned int *)(v139 - 12);
        do
          v127 = __ldaxr(v126);
        while (__stlxr(v127 + 1, v126));
        if (v139)
        {
          v128 = (unsigned int *)(v139 - 12);
          do
          {
            v129 = __ldaxr(v128);
            v130 = v129 - 1;
          }
          while (__stlxr(v130, v128));
          if (!v130)
          {
            *v139 = 0;
            if (v139)
              v131 = v139 - 12;
            else
              v131 = 0;
            free(v131);
          }
        }
      }
      v132 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v132, (uint64_t *)&v140, 3, 3, 1);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v11 + 760), v132);
      ++v8;
    }
    while (v1 + 1 != (_DWORD)v8);
    if (v140)
    {
      v133 = (unsigned int *)(v140 - 12);
      do
      {
        v134 = __ldaxr(v133);
        v135 = v134 - 1;
      }
      while (__stlxr(v135, v133));
      if (!v135)
      {
        *v140 = 0;
        if (v140)
          v136 = v140 - 12;
        else
          v136 = 0;
        free(v136);
      }
    }
    v6 = HIDWORD(qword_1EF075F18);
  }
  if (v1 < 0 || v6 <= v1)
    PCArray_base::badIndex(v3);
  v137 = *(_QWORD *)(qword_1EF075F20 + 8 * v1);
  if (v141 && v142)
    PCMutex::unlock(v141);
  return v137;
}

void sub_1B2D05B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t LiLightInfo::get(LiLightInfo *this, const LiLight *a2)
{
  LiLightInfo *SolidSceneID;

  SolidSceneID = (LiLightInfo *)LiLight::getSolidSceneID(this);
  return LiLightInfo::get(SolidSceneID);
}

uint64_t PCArray<LiLightInfo *,PCArray_Traits<LiLightInfo *>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656C7C0;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LiClipPlaneInfo::get(LiClipPlaneInfo *this)
{
  int v1;
  unsigned __int8 v2;
  int v3;
  uint64_t v4;
  int v5;
  PCArray_base *v6;
  uint64_t v7;
  PCShared_base *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v14;

  v1 = (int)this;
  if ((v2 & 1) == 0)
  {
    if ((_DWORD)this)
    {
      qword_1EF075F38 = 0;
      qword_1EF075F40 = 0;
      LiClipPlaneInfo::get(int)::planes = (uint64_t)&unk_1E656C7F8;
      __cxa_atexit((void (*)(void *))PCArray<LiClipPlaneInfo,PCArray_Traits<LiClipPlaneInfo>>::~PCArray, &LiClipPlaneInfo::get(int)::planes, &dword_1B2737000);
    }
  }
  v3 = HIDWORD(qword_1EF075F38);
  if (SHIDWORD(qword_1EF075F38) <= v1)
  {
    v4 = SHIDWORD(qword_1EF075F38);
    if ((int)qword_1EF075F38 <= v1)
      v5 = (2 * (v1 + 1)) | 1;
    else
      v5 = qword_1EF075F38;
    PCArray<LiClipPlaneInfo,PCArray_Traits<LiClipPlaneInfo>>::resize((uint64_t)&LiClipPlaneInfo::get(int)::planes, v1 + 1, v5);
    do
    {
      LiString::format((LiString *)"clipPlane_%d", (LiString *)&v14, v4);
      if (v4 < 0 || v4 >= SHIDWORD(qword_1EF075F38))
        PCArray_base::badIndex(v6);
      v7 = qword_1EF075F40;
      v8 = (PCShared_base *)operator new();
      ProShade::UniformNode::UniformNode((uint64_t)v8, (uint64_t *)&v14, 3, 4, 0);
      PCPtr<ProShade::Node>::reset<ProShade::Node>((PCShared_base **)(v7 + 32 * v4 + 16), v8);
      if (v14)
      {
        v9 = (unsigned int *)(v14 - 12);
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          *v14 = 0;
          if (v14)
            v12 = v14 - 12;
          else
            v12 = 0;
          free(v12);
        }
      }
      ++v4;
    }
    while (v1 + 1 != (_DWORD)v4);
    v3 = HIDWORD(qword_1EF075F38);
  }
  if (v1 < 0 || v3 <= v1)
    PCArray_base::badIndex(this);
  return qword_1EF075F40 + 32 * v1;
}

void sub_1B2D05F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;

  MEMORY[0x1B5E29170](v10, 0x10B1C402CAA7C2BLL);
  if (a10)
  {
    v12 = (unsigned int *)(a10 - 12);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiClipPlaneInfo,PCArray_Traits<LiClipPlaneInfo>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656C7F8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiClipPlaneInfo,PCArray_Traits<LiClipPlaneInfo>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

PCSharedCount *ProShade::External::External(PCSharedCount *this)
{
  PCSharedCount *v2;

  this->var0 = 0;
  v2 = this + 2;
  PCSharedCount::PCSharedCount(this + 1);
  PCSharedCount::PCSharedCount(v2);
  this[5].var0 = 0;
  this[6].var0 = 0;
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E656C788;
  return this;
}

void sub_1B2D0607C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::External::~External(ProShade::External *this)
{
  char *v2;
  int v3;
  uint64_t v4;

  *((_QWORD *)this + 4) = &unk_1E656C788;
  v2 = (char *)this + 32;
  if (*((int *)v2 + 2) < 0)
    v3 = 1;
  else
    v3 = *((_DWORD *)v2 + 2);
  PCArray<ProShade::External::Argument,PCArray_Traits<ProShade::External::Argument>>::resize((uint64_t)v2, 0, v3);
  v4 = *((_QWORD *)this + 6);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 10) = 0;
  PCString::~PCString((PCString *)this + 2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 1);
}

PCSharedCount *ProShade::SamplerT<3553,false,false,false>::SamplerT(PCSharedCount *a1)
{
  ProShade::SamplerNode *v2;
  PCSharedCount *result;

  v2 = (ProShade::SamplerNode *)operator new();
  ProShade::SamplerNode::SamplerNode(v2, (ProShade *)0xDE1, 0, 0, 0);
  result = ProShade::Sampler::Sampler(a1, (PC_Sp_counted_base *)v2);
  a1->var0 = (PC_Sp_counted_base *)&unk_1E656C6B0;
  return result;
}

void sub_1B2D06174(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C402A26BE84);
  _Unwind_Resume(a1);
}

uint64_t ProShade::SamplerT<3553,false,false,false>::target()
{
  return 3553;
}

PCSharedCount *ProShade::SamplerT<34067,true,false,false>::SamplerT(PCSharedCount *a1)
{
  ProShade::SamplerNode *v2;
  PCSharedCount *result;

  v2 = (ProShade::SamplerNode *)operator new();
  ProShade::SamplerNode::SamplerNode(v2, (ProShade *)0x8513, (const PCString *)1, 0, 0);
  result = ProShade::Sampler::Sampler(a1, (PC_Sp_counted_base *)v2);
  a1->var0 = (PC_Sp_counted_base *)&unk_1E656C750;
  return result;
}

void sub_1B2D06208(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C402A26BE84);
  _Unwind_Resume(a1);
}

uint64_t ProShade::SamplerT<34067,true,false,false>::target()
{
  return 34067;
}

uint64_t PCArray<ProShade::External::Argument,PCArray_Traits<ProShade::External::Argument>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656C788;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::External::Argument,PCArray_Traits<ProShade::External::Argument>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCArray<ProShade::External::Argument,PCArray_Traits<ProShade::External::Argument>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656C788;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::External::Argument,PCArray_Traits<ProShade::External::Argument>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

_OWORD *std::__tree<std::__value_type<LiOpenGLContextGetter::C,BOOL>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,BOOL>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,BOOL>>>::__emplace_unique_key_args<LiOpenGLContextGetter::C,std::piecewise_construct_t const&,std::tuple<LiOpenGLContextGetter::C const&>,std::tuple<>>(uint64_t **a1, uint64_t *a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;

  v6 = (void **)std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::__find_equal<LiOpenGLContextGetter::C>((uint64_t)a1, &v10, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = **a4;
    *((_BYTE *)v7 + 48) = 0;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

void PCArray<LiLightInfo *,PCArray_Traits<LiLightInfo *>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656C7C0;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<LiClipPlaneInfo,PCArray_Traits<LiClipPlaneInfo>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656C7F8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiClipPlaneInfo,PCArray_Traits<LiClipPlaneInfo>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<LiClipPlaneInfo,PCArray_Traits<LiClipPlaneInfo>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  PCSharedCount *v16;
  PC_Sp_counted_base *v17;
  PCShared_base *v18;
  PCSharedCount *v19;
  uint64_t v20;
  uint64_t v21;
  PCSharedCount *v22;
  uint64_t v23;
  PCException *exception;
  PCString v25;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v25, "PCArray::resize");
    PCException::PCException(exception, &v25);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if (a2 >= (int)v6)
    {
      if (a2 > (int)v6)
      {
        v11 = 32 * v6;
        v12 = a2 - v6;
        do
        {
          ProShade::Uniform::Uniform((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v11), 3, 4);
          v11 += 32;
          --v12;
        }
        while (v12);
      }
    }
    else
    {
      v7 = a2;
      v8 = 32 * a2;
      do
      {
        v9 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(v9 + v8) = &unk_1E656A080;
        PCSharedCount::~PCSharedCount((PCSharedCount *)(v9 + v8 + 24));
        ++v7;
        v8 += 32;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v10 = (char *)operator new[]();
      bzero(v10, 32 * v3);
    }
    else
    {
      v10 = 0;
    }
    v13 = *(_DWORD *)(a1 + 12);
    if (a2 >= v13)
      v14 = *(_DWORD *)(a1 + 12);
    else
      v14 = a2;
    if (v14 < 1)
    {
      v14 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = (PCSharedCount *)&v10[v15];
        v17 = *(PC_Sp_counted_base **)(*(_QWORD *)(a1 + 16) + v15 + 16);
        v16->var0 = (PC_Sp_counted_base *)&unk_1E656A080;
        v16[2].var0 = v17;
        if (v17)
          v18 = (PCShared_base *)((char *)v17 + *(_QWORD *)(*(_QWORD *)v17 - 24));
        else
          v18 = 0;
        PCSharedCount::PCSharedCount(v16 + 3, v18);
        v16->var0 = (PC_Sp_counted_base *)&unk_1E656A298;
        v19 = (PCSharedCount *)(*(_QWORD *)(a1 + 16) + v15);
        v19->var0 = (PC_Sp_counted_base *)&unk_1E656A080;
        PCSharedCount::~PCSharedCount(v19 + 3);
        v15 += 32;
      }
      while (32 * v14 != v15);
      v13 = *(_DWORD *)(a1 + 12);
    }
    if (v14 < v13)
    {
      v20 = 32 * v14;
      do
      {
        v21 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(v21 + v20) = &unk_1E656A080;
        PCSharedCount::~PCSharedCount((PCSharedCount *)(v21 + v20 + 24));
        v20 += 32;
        ++v14;
      }
      while (*(_DWORD *)(a1 + 12) > v14);
    }
    if (v14 < a2)
    {
      v22 = (PCSharedCount *)&v10[32 * v14];
      do
      {
        v22 = ProShade::Uniform::Uniform(v22, 3, 4) + 4;
        ++v14;
      }
      while (v14 < a2);
    }
    v23 = *(_QWORD *)(a1 + 16);
    if (v23)
      MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v10;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2D067AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

ProShade::Node *ProShade::InputNode::InputNode(ProShade::Node *a1, uint64_t *a2, int a3, int a4, int a5)
{
  ProShade::Node *result;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  result = ProShade::Node::Node(a1, a2 + 1);
  v10 = *a2;
  *(_QWORD *)result = *a2;
  *(_QWORD *)((char *)result + *(_QWORD *)(v10 - 24)) = a2[5];
  *((_DWORD *)result + 13) = a5;
  *((_DWORD *)result + 6) = a3;
  *((_DWORD *)result + 7) = a4;
  *((_DWORD *)result + 10) = 0;
  do
  {
    v11 = __ldaxr((unsigned int *)&ProShade::s_serial);
    v12 = v11 + 1;
  }
  while (__stlxr(v12, (unsigned int *)&ProShade::s_serial));
  *((_DWORD *)result + 12) = v12;
  return result;
}

ProShade::Node *ProShade::InputNode::InputNode(ProShade::Node *a1, uint64_t *a2, uint64_t *a3, int a4, int a5, int a6)
{
  ProShade::Node *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  v12 = ProShade::Node::Node(a1, a2 + 1);
  v13 = *a2;
  *(_QWORD *)v12 = *a2;
  *(_QWORD *)((char *)v12 + *(_QWORD *)(v13 - 24)) = a2[5];
  *((_DWORD *)v12 + 13) = a6;
  v14 = (uint64_t *)((char *)v12 + 32);
  if ((uint64_t *)((char *)v12 + 32) != a3)
  {
    LiString::dec((ProShade::Node *)((char *)v12 + 32));
    v15 = *a3;
    *v14 = *a3;
    if (v15)
    {
      v16 = (unsigned int *)(v15 - 12);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
    }
  }
  *((_DWORD *)a1 + 6) = a4;
  *((_DWORD *)a1 + 7) = a5;
  *((_DWORD *)a1 + 10) = 0;
  do
  {
    v18 = __ldaxr((unsigned int *)&ProShade::s_serial);
    v19 = v18 + 1;
  }
  while (__stlxr(v19, (unsigned int *)&ProShade::s_serial));
  *((_DWORD *)a1 + 12) = v19;
  return a1;
}

void sub_1B2D0691C(_Unwind_Exception *a1)
{
  ProShade::Node *v1;
  uint64_t *v2;

  ProShade::Node::~Node(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::InputNode::repr@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 - 12);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

void ProShade::InputNode::inputs(uint64_t a1, uint64_t a2)
{
  int v2;

  if (*(int *)(a2 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v2);
}

PCSharedCount *ProShade::InputNode::apply@<X0>(PC_Sp_counted_base *a1@<X0>, PCSharedCount *a2@<X8>)
{
  PCShared_base *v2;

  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a2[2].var0 = a1;
  if (a1)
    v2 = (PCShared_base *)((char *)a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  else
    v2 = 0;
  return PCSharedCount::PCSharedCount(a2 + 3, v2);
}

uint64_t ProShade::InputNode::atomic(ProShade::InputNode *this)
{
  return 1;
}

void ProShade::InputNode::computeValue(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  PCException *exception;
  PCString v6;

  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A60], (uint64_t)"InputNodes (uniforms etc) shouldn't be asked for their value:", 61);
  if (*(_QWORD *)(a1 + 32))
    v3 = *(const char **)(a1 + 32);
  else
    v3 = "";
  v4 = strlen(v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"\n", 1);
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v6, "InputNodes (uniforms etc) shouldn't be asked for their value");
  PCException::PCException(exception, &v6);
}

void sub_1B2D06A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::UniformNode::UniformNode(PCSharedCount *this)
{
  this[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  this[12].var0 = 0;
  LOBYTE(this[13].var0) = 1;
  ProShade::Node::Node((ProShade::Node *)this, (uint64_t *)&off_1E656C930);
  this[6].var0 = (PC_Sp_counted_base *)0x400000000;
  this->var0 = (PC_Sp_counted_base *)&off_1E656C838;
  this[11].var0 = (PC_Sp_counted_base *)&unk_1E656C900;
  this[7].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  this[9].var0 = 0;
  PCSharedCount::PCSharedCount(this + 10);
  return this;
}

void sub_1B2D06B24(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)off_1E656C928);
  *(_QWORD *)(v1 + 88) = v3 + 16;
  *(_BYTE *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::UniformNode::UniformNode(uint64_t a1, int a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  const void *v8;
  int v9;
  const void *v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _BYTE *v25;
  _BYTE *v27;
  _BYTE *v28;

  *(_QWORD *)(a1 + 88) = &off_1E65EB048;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656C930);
  *(_QWORD *)a1 = off_1E656CAA0;
  *(_QWORD *)(a1 + 88) = off_1E656CB60;
  *(_DWORD *)(a1 + 52) = 4;
  *(_DWORD *)(a1 + 24) = a2;
  *(_DWORD *)(a1 + 28) = a3;
  *(_DWORD *)(a1 + 40) = 0;
  do
  {
    v6 = __ldaxr((unsigned int *)&ProShade::s_serial);
    v7 = v6 + 1;
  }
  while (__stlxr(v7, (unsigned int *)&ProShade::s_serial));
  *(_DWORD *)(a1 + 48) = v7;
  *(_QWORD *)a1 = &off_1E656C838;
  *(_QWORD *)(a1 + 88) = &unk_1E656C900;
  *(_QWORD *)(a1 + 56) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 72) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 80));
  *(_DWORD *)(a1 + 40) = 1;
  LiString::LiString((LiString *)&v28, "_u");
  LiString::format((LiString *)*(unsigned int *)(a1 + 48), (LiString *)&v27);
  v8 = v28;
  if (v28)
    v9 = *((_DWORD *)v28 - 2);
  else
    v9 = 0;
  v10 = v27;
  if (v27)
    v11 = *((_DWORD *)v27 - 2);
  else
    v11 = 0;
  v12 = v11 + (uint64_t)v9;
  v13 = (unsigned int *)malloc_type_malloc(v12 + 13, 0x8903763CuLL);
  v13[1] = v12;
  v13[2] = v12 + 1;
  atomic_store(1u, v13);
  atomic_store(0, v13);
  memcpy(v13 + 3, v8, v9);
  memcpy((char *)v13 + v9 + 12, v10, v11);
  *((_BYTE *)v13 + v12 + 12) = 0;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 32) = v13 + 3;
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 + 1, v13));
  do
  {
    v16 = __ldaxr(v13);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v13));
  if (!v17)
    free(v13);
  if (v27)
  {
    v18 = (unsigned int *)(v27 - 12);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      *v27 = 0;
      if (v27)
        v21 = v27 - 12;
      else
        v21 = 0;
      free(v21);
    }
  }
  if (v28)
  {
    v22 = (unsigned int *)(v28 - 12);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      *v28 = 0;
      if (v28)
        v25 = v28 - 12;
      else
        v25 = 0;
      free(v25);
    }
  }
  return a1;
}

void sub_1B2D06DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, _BYTE *a10)
{
  uint64_t v10;
  PC_Sp_counted_base **v11;
  PCSharedCount *v12;
  unsigned int *v13;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  do
  {
    v15 = __ldaxr(v13);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v13));
  if (!v16)
    free(v13);
  if (a9)
  {
    v17 = (unsigned int *)(a9 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a10)
  {
    v20 = (unsigned int *)(a10 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  *(_QWORD *)(v10 + 56) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v12);
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v10, (uint64_t)off_1E656C928);
  *(_QWORD *)(v10 + 88) = &off_1E65EB048;
  *(_BYTE *)(v10 + 104) = 0;
  PCWeakCount::~PCWeakCount(v11);
  _Unwind_Resume(a1);
}

void sub_1B2D06EBC()
{
  JUMPOUT(0x1B2D06E98);
}

uint64_t ProShade::UniformNode::UniformNode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  int v8;
  const void *v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _BYTE *v24;
  _BYTE *v26;
  _BYTE *v27;

  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 88) = &off_1E65EB048;
  *(_BYTE *)(a1 + 104) = 1;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    throw_PCNullPointerException(1);
  ProShade::InputNode::InputNode((ProShade::Node *)a1, (uint64_t *)off_1E656C928, a2, *(_DWORD *)(v5 + 24), *(_DWORD *)(v5 + 28), 4);
  *(_QWORD *)a1 = &off_1E656C838;
  *(_QWORD *)(a1 + 88) = &unk_1E656C900;
  *(_QWORD *)(a1 + 56) = &unk_1E6569AC8;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 80), (const PCSharedCount *)(a3 + 24));
  v6 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 1;
  if (!v6 || !*(_DWORD *)(v6 - 8))
  {
    LiString::LiString((LiString *)&v27, "_u");
    LiString::format((LiString *)*(unsigned int *)(a1 + 48), (LiString *)&v26);
    v7 = v27;
    if (v27)
      v8 = *((_DWORD *)v27 - 2);
    else
      v8 = 0;
    v9 = v26;
    if (v26)
      v10 = *((_DWORD *)v26 - 2);
    else
      v10 = 0;
    v11 = v10 + (uint64_t)v8;
    v12 = (unsigned int *)malloc_type_malloc(v11 + 13, 0x8903763CuLL);
    v12[1] = v11;
    v12[2] = v11 + 1;
    atomic_store(1u, v12);
    atomic_store(0, v12);
    memcpy(v12 + 3, v7, v8);
    memcpy((char *)v12 + v8 + 12, v9, v10);
    *((_BYTE *)v12 + v11 + 12) = 0;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    LiString::dec((LiString *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = v12 + 3;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 + 1, v12));
    do
    {
      v15 = __ldaxr(v12);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v12));
    if (!v16)
      free(v12);
    if (v26)
    {
      v17 = (unsigned int *)(v26 - 12);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        *v26 = 0;
        if (v26)
          v20 = v26 - 12;
        else
          v20 = 0;
        free(v20);
      }
    }
    if (v27)
    {
      v21 = (unsigned int *)(v27 - 12);
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        *v27 = 0;
        if (v27)
          v24 = v27 - 12;
        else
          v24 = 0;
        free(v24);
      }
    }
  }
  return a1;
}

void sub_1B2D07128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, _BYTE *a11, _BYTE *a12)
{
  uint64_t v12;
  PC_Sp_counted_base **v13;
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  do
  {
    v16 = __ldaxr(v14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v14));
  if (!v17)
    free(v14);
  if (a11)
  {
    v18 = (unsigned int *)(a11 - 12);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  if (a12)
  {
    v21 = (unsigned int *)(a12 - 12);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  *(_QWORD *)(v12 + 56) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a10);
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v12, (uint64_t)off_1E656C928);
  *(_QWORD *)(v12 + 88) = &off_1E65EB048;
  *(_BYTE *)(v12 + 104) = 0;
  PCWeakCount::~PCWeakCount(v13);
  _Unwind_Resume(a1);
}

uint64_t ProShade::UniformNode::UniformNode(uint64_t a1, uint64_t *a2, int a3, int a4, int a5)
{
  uint64_t v6;
  const void *v7;
  int v8;
  const void *v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _BYTE *v24;
  _BYTE *v26;
  _BYTE *v27;

  *(_QWORD *)(a1 + 88) = &off_1E65EB048;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  ProShade::InputNode::InputNode((ProShade::Node *)a1, (uint64_t *)off_1E656C928, a2, a3, a4, a5);
  *(_QWORD *)a1 = &off_1E656C838;
  *(_QWORD *)(a1 + 88) = &unk_1E656C900;
  *(_QWORD *)(a1 + 56) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 72) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 80));
  v6 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 40) = 1;
  if (!v6 || !*(_DWORD *)(v6 - 8))
  {
    LiString::LiString((LiString *)&v27, "_u");
    LiString::format((LiString *)*(unsigned int *)(a1 + 48), (LiString *)&v26);
    v7 = v27;
    if (v27)
      v8 = *((_DWORD *)v27 - 2);
    else
      v8 = 0;
    v9 = v26;
    if (v26)
      v10 = *((_DWORD *)v26 - 2);
    else
      v10 = 0;
    v11 = v10 + (uint64_t)v8;
    v12 = (unsigned int *)malloc_type_malloc(v11 + 13, 0x8903763CuLL);
    v12[1] = v11;
    v12[2] = v11 + 1;
    atomic_store(1u, v12);
    atomic_store(0, v12);
    memcpy(v12 + 3, v7, v8);
    memcpy((char *)v12 + v8 + 12, v9, v10);
    *((_BYTE *)v12 + v11 + 12) = 0;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    LiString::dec((LiString *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = v12 + 3;
    do
      v14 = __ldaxr(v12);
    while (__stlxr(v14 + 1, v12));
    do
    {
      v15 = __ldaxr(v12);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v12));
    if (!v16)
      free(v12);
    if (v26)
    {
      v17 = (unsigned int *)(v26 - 12);
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
      {
        *v26 = 0;
        if (v26)
          v20 = v26 - 12;
        else
          v20 = 0;
        free(v20);
      }
    }
    if (v27)
    {
      v21 = (unsigned int *)(v27 - 12);
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        *v27 = 0;
        if (v27)
          v24 = v27 - 12;
        else
          v24 = 0;
        free(v24);
      }
    }
  }
  return a1;
}

void sub_1B2D0746C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, _BYTE *a11, _BYTE *a12)
{
  uint64_t v12;
  PC_Sp_counted_base **v13;
  unsigned int *v14;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;

  do
  {
    v16 = __ldaxr(v14);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v14));
  if (!v17)
    free(v14);
  if (a11)
  {
    v18 = (unsigned int *)(a11 - 12);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  if (a12)
  {
    v21 = (unsigned int *)(a12 - 12);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  *(_QWORD *)(v12 + 56) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a10);
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v12, (uint64_t)off_1E656C928);
  *(_QWORD *)(v12 + 88) = &off_1E65EB048;
  *(_BYTE *)(v12 + 104) = 0;
  PCWeakCount::~PCWeakCount(v13);
  _Unwind_Resume(a1);
}

void *ProShade::UniformNode::description@<X0>(ProShade::UniformNode *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  int v4;
  size_t v5;
  uint64_t v6;
  int v7;
  char *v8;
  void *result;
  unsigned int v10;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  if (v3)
    v4 = *(v3 - 2);
  else
    v4 = 0;
  v5 = v4;
  v6 = v4 + 8;
  v7 = v4 + 9;
  v8 = (char *)malloc_type_malloc(v4 + 21, 0x8903763CuLL);
  *((_DWORD *)v8 + 1) = v6;
  *((_DWORD *)v8 + 2) = v7;
  atomic_store(1u, (unsigned int *)v8);
  atomic_store(0, (unsigned int *)v8);
  *(_QWORD *)(v8 + 12) = 0x206D726F66696E75;
  result = memcpy(v8 + 20, v3, v5);
  v8[v6 + 12] = 0;
  *a2 = v8 + 12;
  do
    v10 = __ldaxr((unsigned int *)v8);
  while (__stlxr(v10 + 1, (unsigned int *)v8));
  return result;
}

void ProShade::UniformNode::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "uniform");
}

int8x8_t *ProShade::UniformNode::computeHash(ProShade::UniformNode *this, int8x8_t *a2)
{
  char *v4;
  size_t v5;

  PCHashWriteStream::writeValue(a2, "UniformNode");
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4)
  {
    v5 = *((unsigned int *)v4 - 2);
  }
  else
  {
    v5 = 0;
    v4 = "";
  }
  return PCHashWriteStream::writeData(a2, v4, v5);
}

void ProShade::UniformNode::clone(ProShade::UniformNode *this)
{
  PCSharedCount *v1;
  const PCString *v2;

  v1 = (PCSharedCount *)operator new();
  ProShade::UniformNode::UniformNode(v1);
  ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"warning: are you sure you want to copy a uniform?!?", v2);
}

void sub_1B2D076C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C402CAA7C2BLL);
  _Unwind_Resume(a1);
}

void ProShade::UniformNode::~UniformNode(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E656C838;
  this[11].var0 = (PC_Sp_counted_base *)&unk_1E656C900;
  this[7].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 10);
  ProShade::InputNode::~InputNode((ProShade::InputNode *)this, (uint64_t)off_1E656C928);
  this[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E656C838;
  this[11].var0 = (PC_Sp_counted_base *)&unk_1E656C900;
  this[7].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 10);
  ProShade::InputNode::~InputNode((ProShade::InputNode *)this, (uint64_t)off_1E656C928);
  this[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
  JUMPOUT(0x1B5E29170);
}

BOOL ProShade::UniformNode::hasSource(ProShade::UniformNode *this)
{
  return ((*(uint64_t (**)(ProShade::UniformNode *))(*(_QWORD *)this + 136))(this) & 1) != 0
      || *((_QWORD *)this + 9) != 0;
}

void ProShade::UniformNode::sourceNode(ProShade::UniformNode *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = &unk_1E6569AC8;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)this + 64);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 9);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 24), (const PCSharedCount *)this + 10);
}

void `virtual thunk to'ProShade::UniformNode::~UniformNode(ProShade::UniformNode *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E656C838;
  v1[11].var0 = (PC_Sp_counted_base *)&unk_1E656C900;
  v1[7].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 10);
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)off_1E656C928);
  v1[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[12].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E656C838;
  v1[11].var0 = (PC_Sp_counted_base *)&unk_1E656C900;
  v1[7].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 10);
  ProShade::InputNode::~InputNode((ProShade::InputNode *)v1, (uint64_t)off_1E656C928);
  v1[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[12].var0);
  JUMPOUT(0x1B5E29170);
}

void LiImageFilterChain::~LiImageFilterChain(PCSharedCount *this)
{
  PCSharedCount *v2;
  int var0;
  PC_Sp_counted_base *v4;

  this[2].var0 = (PC_Sp_counted_base *)&unk_1E64FC2F8;
  v2 = this + 2;
  if (SLODWORD(v2[1].var0) < 0)
    var0 = 1;
  else
    var0 = (int)v2[1].var0;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v2, 0, var0);
  v4 = this[4].var0;
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  this[4].var0 = 0;
  LODWORD(this[3].var0) = 0;
  PCSharedCount::~PCSharedCount(this + 1);
}

void LiGeode::LiGeode(LiGeode *this, LiImageSource *a2)
{
  PCShared_base *v4;

  *((_QWORD *)this + 92) = &off_1E65EB048;
  *((_QWORD *)this + 93) = 0;
  *((_BYTE *)this + 752) = 1;
  LiSceneObject::LiSceneObject(this, (uint64_t *)&off_1E656CE50);
  *(_QWORD *)this = &off_1E656CCF0;
  *((_QWORD *)this + 92) = &unk_1E656CE30;
  *((_QWORD *)this + 71) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 72);
  *((_BYTE *)this + 584) = 0;
  *((_QWORD *)this + 74) = a2;
  if (a2)
    v4 = (PCShared_base *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v4 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 75, v4);
  LiImageFilterChain::LiImageFilterChain((LiGeode *)((char *)this + 608));
  __asm { FMOV            V1.2D, #-1.0 }
  *((_OWORD *)this + 44) = 0u;
  *((_OWORD *)this + 45) = _Q1;
  if (!(*(unsigned int (**)(LiImageSource *))(*(_QWORD *)a2 + 80))(a2))
    (*(void (**)(LiImageSource *, uint64_t))(*(_QWORD *)a2 + 88))(a2, 1);
  *((_QWORD *)this + 86) = 0;
  *((_QWORD *)this + 81) = 0;
  *((_QWORD *)this + 83) = 0;
  *((_QWORD *)this + 82) = 0;
  *((_QWORD *)this + 84) = 0x3FFCCCCCCCCCCCCDLL;
  *((_DWORD *)this + 174) = 16843009;
  *((_DWORD *)this + 175) = 2;
}

void sub_1B2D07AEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  uint64_t v4;

  PCSharedCount::~PCSharedCount(v3);
  PCSharedCount::~PCSharedCount(v2);
  LiSceneObject::~LiSceneObject((PCSharedCount *)v1, (PC_Sp_counted_base **)&off_1E656CE50);
  *(_QWORD *)(v1 + 736) = v4 + 16;
  *(_BYTE *)(v1 + 752) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 744));
  _Unwind_Resume(a1);
}

void LiGeode::~LiGeode(PCSharedCount *this, PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;
  PCSharedCount *v5;
  int v6;
  PC_Sp_counted_base *v7;

  var0 = a2->var0;
  this->var0 = a2->var0;
  *(PCSharedCount *)((char *)this + *((_QWORD *)var0 - 3)) = a2[5];
  v5 = this + 78;
  this[78].var0 = (PC_Sp_counted_base *)&unk_1E64FC2F8;
  if (SLODWORD(this[79].var0) < 0)
    v6 = 1;
  else
    v6 = (int)this[79].var0;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v5, 0, v6);
  v7 = this[80].var0;
  if (v7)
    MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
  this[80].var0 = 0;
  LODWORD(this[79].var0) = 0;
  PCSharedCount::~PCSharedCount(this + 77);
  PCSharedCount::~PCSharedCount(this + 75);
  PCSharedCount::~PCSharedCount(this + 72);
  LiSceneObject::~LiSceneObject(this, &a2[1].var0);
}

void LiGeode::~LiGeode(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 736) = &off_1E65EB048;
  *(_BYTE *)(v1 + 752) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 744));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 736) = &off_1E65EB048;
  *(_BYTE *)(v1 + 752) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 744));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiGeode::~LiGeode(LiGeode *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 736) = &off_1E65EB048;
  *(_BYTE *)(v1 + 752) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 744));
}

{
  LiGeode::~LiGeode((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void LiGeode::position()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "subclass must implement");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiGeode.cpp");
  PCException::PCException(exception, &v2, &v1, 52);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2D07D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

int8x16_t LiGeode::plane@<Q0>(LiGeode *this@<X0>, int8x16_t *a2@<X8>)
{
  unsigned int v2;
  int32x2_t v3;
  int64x2_t v4;
  int8x16_t result;

  v2 = *((_BYTE *)this + 541) == 0;
  a2->i64[0] = 0;
  a2->i64[1] = 0;
  v3 = vdup_n_s32(v2);
  v4.i64[0] = v3.u32[0];
  v4.i64[1] = v3.u32[1];
  result = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v4, 0x3FuLL)), (int8x16_t)xmmword_1B304EED0, (int8x16_t)xmmword_1B304EEE0);
  a2[1] = result;
  return result;
}

void LiGeode::normal(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0x3FF0000000000000;
}

void LiGeode::cast()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "not implemented yet");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiGeode.cpp");
  PCException::PCException(exception, &v2, &v1, 70);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2D07E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void LiGeode::texture(const PCSharedCount *this@<X0>, const void **a2@<X1>, PCSharedCount *a3@<X8>)
{
  PCException *exception;
  const char *v7;
  const char *v8;
  PCString v9;

  if (!*a2 || strcmp((const char *)*a2, "color"))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    operator+("no such texture: ", a2, &v8);
    if (v8)
      v7 = v8;
    else
      v7 = "";
    PCString::PCString(&v9, v7);
    PCException::PCException(exception, &v9);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  a3->var0 = this[74].var0;
  PCSharedCount::PCSharedCount(a3 + 1, this + 75);
}

void sub_1B2D07F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, PCString a10)
{
  void *v10;
  int v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  PCString::~PCString(&a10);
  if (!a9)
    goto LABEL_7;
  v13 = (unsigned int *)(a9 - 12);
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (v15)
  {
LABEL_7:
    if (!v11)
      goto LABEL_9;
  }
  else
  {
    *a9 = 0;
    free(a9 - 12);
    if ((v11 & 1) == 0)
LABEL_9:
      _Unwind_Resume(a1);
  }
  __cxa_free_exception(v10);
  goto LABEL_9;
}

void *operator+@<X0>(_BYTE *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _DWORD *v7;
  int v8;
  size_t v9;
  uint64_t v10;
  unsigned int *v11;
  void *result;
  unsigned int v13;

  if (*a1)
  {
    v5 = 0;
    while (a1[++v5])
      ;
  }
  else
  {
    LODWORD(v5) = 0;
  }
  v7 = *a2;
  if (*a2)
    v8 = *(v7 - 2);
  else
    v8 = 0;
  v9 = v8;
  v10 = v8 + (uint64_t)(int)v5;
  v11 = (unsigned int *)malloc_type_malloc(v10 + 13, 0x8903763CuLL);
  v11[1] = v10;
  v11[2] = v10 + 1;
  atomic_store(1u, v11);
  atomic_store(0, v11);
  memcpy(v11 + 3, a1, (int)v5);
  result = memcpy((char *)v11 + (int)v5 + 12, v7, v9);
  *((_BYTE *)v11 + v10 + 12) = 0;
  *a3 = v11 + 3;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  return result;
}

void LiGeode::texture(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->var0 = this[74].var0;
  PCSharedCount::PCSharedCount(a2 + 1, this + 75);
}

uint64_t LiGeode::setTexture(LiGeode *this, const void **a2, LiImageSource *a3)
{
  PCException *exception;
  const char *v8;
  const char *v9;
  PCString v10;

  if (!(*(unsigned int (**)(LiImageSource *))(*(_QWORD *)a3 + 80))(a3))
    (*(void (**)(LiImageSource *, uint64_t))(*(_QWORD *)a3 + 88))(a3, 1);
  if (!*a2 || strcmp((const char *)*a2, "color"))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    operator+("no such texture: ", a2, &v9);
    if (v9)
      v8 = v9;
    else
      v8 = "";
    PCString::PCString(&v10, v8);
    PCException::PCException(exception, &v10);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  return (*(uint64_t (**)(LiGeode *, LiImageSource *))(*(_QWORD *)this + 176))(this, a3);
}

void sub_1B2D08210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, PCString a10)
{
  void *v10;
  int v11;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  PCString::~PCString(&a10);
  if (!a9)
    goto LABEL_7;
  v13 = (unsigned int *)(a9 - 12);
  do
  {
    v14 = __ldaxr(v13);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v13));
  if (v15)
  {
LABEL_7:
    if (!v11)
      goto LABEL_9;
  }
  else
  {
    *a9 = 0;
    free(a9 - 12);
    if ((v11 & 1) == 0)
LABEL_9:
      _Unwind_Resume(a1);
  }
  __cxa_free_exception(v10);
  goto LABEL_9;
}

PCShared_base **LiGeode::setTexture(PCShared_base **this, LiImageSource *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 74, (PCShared_base *)a2);
}

double LiGeode::reflectivity(LiGeode *this)
{
  return *((double *)this + 81);
}

uint64_t LiGeode::setReflectivity(uint64_t this, double a2)
{
  *(double *)(this + 648) = a2;
  return this;
}

double LiGeode::reflectionBlur(LiGeode *this)
{
  return *((double *)this + 86);
}

uint64_t LiGeode::setReflectionBlur(uint64_t this, double a2)
{
  *(double *)(this + 688) = a2;
  return this;
}

double LiGeode::getReflectionBeginLimit(LiGeode *this)
{
  return *((double *)this + 82);
}

uint64_t LiGeode::setReflectionBeginLimit(uint64_t this, double a2)
{
  *(double *)(this + 656) = a2;
  return this;
}

double LiGeode::getReflectionEndLimit(LiGeode *this)
{
  return *((double *)this + 83);
}

uint64_t LiGeode::setReflectionEndLimit(uint64_t this, double a2)
{
  *(double *)(this + 664) = a2;
  return this;
}

double LiGeode::getReflectionFalloffExponent(LiGeode *this)
{
  return *((double *)this + 84);
}

uint64_t LiGeode::setReflectionFalloffExponent(uint64_t this, double a2)
{
  *(double *)(this + 672) = a2;
  return this;
}

uint64_t LiGeode::localBoundingBox(uint64_t a1, uint64_t a2)
{
  PCArray_base *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  char *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  double v17;
  double *v18;
  double v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v25;
  uint64_t result;
  void *v27;
  uint64_t v28;
  char *v29;

  v28 = 0;
  v29 = 0;
  v27 = &unk_1E656CFD8;
  v3 = (PCArray_base *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, &v27);
  *(_OWORD *)(a2 + 16) = xmmword_1B304F270;
  *(_OWORD *)(a2 + 32) = xmmword_1B304F270;
  *(_OWORD *)a2 = xmmword_1B304F270;
  v4 = HIDWORD(v28);
  if (SHIDWORD(v28) >= 1)
  {
    v5 = 0;
    v6 = 1.0;
    v7 = -1.0;
    v8 = 8;
    do
    {
      if (v5 >= SHIDWORD(v28))
        PCArray_base::badIndex(v3);
      v9 = v29;
      v10 = (double *)&v29[v8];
      if (v6 <= v7
        && (v12 = *(double *)(a2 + 16), v11 = *(double *)(a2 + 24), v12 <= v11)
        && (v14 = *(double *)(a2 + 32), v13 = *(double *)(a2 + 40), v14 <= v13))
      {
        v17 = *(v10 - 1);
        if (v6 >= v17)
          v6 = *(v10 - 1);
        if (v7 <= v17)
          v7 = *(v10 - 1);
        *(double *)a2 = v6;
        *(double *)(a2 + 8) = v7;
        v18 = (double *)&v9[v8];
        if (v12 >= *v18)
          v12 = *v18;
        if (v11 <= *v18)
          v11 = *v18;
        *(double *)(a2 + 16) = v12;
        *(double *)(a2 + 24) = v11;
        v19 = v18[1];
        if (v14 >= v19)
          v14 = v18[1];
        if (v13 <= v19)
          v13 = v18[1];
        *(double *)(a2 + 32) = v14;
        *(double *)(a2 + 40) = v13;
      }
      else
      {
        v7 = *(v10 - 1);
        *(double *)a2 = v7;
        *(double *)(a2 + 8) = v7;
        v15 = *v10;
        *(double *)(a2 + 16) = *v10;
        *(double *)(a2 + 24) = v15;
        v16 = *((_QWORD *)v10 + 1);
        *(_QWORD *)(a2 + 32) = v16;
        *(_QWORD *)(a2 + 40) = v16;
        v6 = v7;
      }
      ++v5;
      v8 += 24;
    }
    while (v4 != v5);
  }
  v27 = &unk_1E656CFD8;
  if ((int)v28 < 0)
    v20 = 1;
  else
    v20 = v28 & ~((int)v28 >> 31);
  if (v20 == (_DWORD)v28)
  {
    v21 = SHIDWORD(v28);
    if (v28 < 0)
    {
      v22 = 24 * SHIDWORD(v28);
      do
      {
        v23 = &v29[v22];
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = 0;
        v22 += 24;
      }
      while (!__CFADD__(v21++, 1));
    }
  }
  else
  {
    if (v20)
    {
      v25 = (char *)operator new[]();
      bzero(v25, 24 * v20);
    }
    else
    {
      v25 = 0;
    }
    if (v29)
      MEMORY[0x1B5E2914C](v29, 0x1000C8077774924);
    v29 = v25;
  }
  v28 = v20;
  result = (uint64_t)v29;
  if (v29)
    return MEMORY[0x1B5E2914C](v29, 0x1000C8077774924);
  return result;
}

void sub_1B2D084EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCArray<PCVector3<double>,PCArray_Traits<PCVector3<double>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PCArray<PCVector3<double>,PCArray_Traits<PCVector3<double>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656CFD8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCVector3<double>,PCArray_Traits<PCVector3<double>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t LiGeode::boundingBox(uint64_t a1, double *a2, double *a3)
{
  double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __int128 v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v27;
  uint64_t result;
  __int128 v29;
  double v30;
  void *v31;
  uint64_t v32;
  char *v33;

  v32 = 0;
  v33 = 0;
  v31 = &unk_1E656CFD8;
  v5 = (double *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, &v31);
  *((_OWORD *)a2 + 1) = xmmword_1B304F270;
  *((_OWORD *)a2 + 2) = xmmword_1B304F270;
  *(_OWORD *)a2 = xmmword_1B304F270;
  v6 = HIDWORD(v32);
  if (SHIDWORD(v32) >= 1)
  {
    v7 = 0;
    v8 = 16;
    do
    {
      if (v7 >= SHIDWORD(v32))
        PCArray_base::badIndex((PCArray_base *)v5);
      v29 = *(_OWORD *)&v33[v8 - 16];
      v30 = *(double *)&v33[v8];
      v5 = PCMatrix44Tmpl<double>::transform<double>(a3, (double *)&v29, (double *)&v29);
      v9 = *a2;
      v10 = a2[1];
      if (*a2 <= v10 && (v12 = a2[2], v11 = a2[3], v12 <= v11) && (v14 = a2[4], v13 = a2[5], v14 <= v13))
      {
        v17 = *((double *)&v29 + 1);
        if (v9 >= *(double *)&v29)
          v9 = *(double *)&v29;
        if (v10 <= *(double *)&v29)
          v10 = *(double *)&v29;
        *a2 = v9;
        a2[1] = v10;
        if (v12 >= v17)
          v18 = v17;
        else
          v18 = v12;
        if (v11 <= v17)
          v19 = v17;
        else
          v19 = v11;
        a2[2] = v18;
        a2[3] = v19;
        v20 = v30;
        if (v14 >= v30)
          v21 = v30;
        else
          v21 = v14;
        if (v13 > v30)
          v20 = v13;
        a2[4] = v21;
        a2[5] = v20;
      }
      else
      {
        v15 = v29;
        *(_QWORD *)a2 = v29;
        *(_OWORD *)(a2 + 1) = v15;
        a2[3] = *((double *)&v15 + 1);
        v16 = v30;
        a2[4] = v30;
        a2[5] = v16;
      }
      ++v7;
      v8 += 24;
    }
    while (v6 != v7);
  }
  v31 = &unk_1E656CFD8;
  if ((int)v32 < 0)
    v22 = 1;
  else
    v22 = v32 & ~((int)v32 >> 31);
  if (v22 == (_DWORD)v32)
  {
    v23 = SHIDWORD(v32);
    if (v32 < 0)
    {
      v24 = 24 * SHIDWORD(v32);
      do
      {
        v25 = &v33[v24];
        *(_QWORD *)v25 = 0;
        *((_QWORD *)v25 + 1) = 0;
        *((_QWORD *)v25 + 2) = 0;
        v24 += 24;
      }
      while (!__CFADD__(v23++, 1));
    }
  }
  else
  {
    if (v22)
    {
      v27 = (char *)operator new[]();
      bzero(v27, 24 * v22);
    }
    else
    {
      v27 = 0;
    }
    if (v33)
      MEMORY[0x1B5E2914C](v33, 0x1000C8077774924);
    v33 = v27;
  }
  v32 = v22;
  result = (uint64_t)v33;
  if (v33)
    return MEMORY[0x1B5E2914C](v33, 0x1000C8077774924);
  return result;
}

void sub_1B2D08788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCArray<PCVector3<double>,PCArray_Traits<PCVector3<double>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *LiGeode::print(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  uint64_t v10;
  const char *locale;
  size_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  char *v16;
  _QWORD *v17;
  int v18;
  PCShared_base *LightFilter;
  _QWORD *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *result;
  uint64_t v26;
  PCArray_base *v27;
  uint64_t i;
  uint64_t v29;
  std::locale v30;

  LiImageSource::printIndent(a2, a3);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LiGeode(\"", 9);
  if (*(_QWORD *)(a1 + 512))
    v7 = *(const char **)(a1 + 512);
  else
    v7 = "";
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\"", 1);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
  v10 = *(_QWORD *)(a1 + 592);
  if (!v10)
    throw_PCNullPointerException(1);
  (*(void (**)(std::locale *__return_ptr))(*(_QWORD *)v10 + 120))(&v30);
  if (v30.__locale_)
    locale = (const char *)v30.__locale_;
  else
    locale = "";
  v12 = strlen(locale);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)locale, v12);
  if (v30.__locale_)
  {
    v13 = (unsigned int *)((char *)v30.__locale_ - 12);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      *(_BYTE *)v30.__locale_ = 0;
      if (v30.__locale_)
        v16 = (char *)v30.__locale_ - 12;
      else
        v16 = 0;
      free(v16);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", compositeOrder=", 17);
  std::ostream::operator<<();
  if (*(_DWORD *)(a1 + 532) || *(_DWORD *)(a1 + 536))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
    if (*(_BYTE *)(a1 + 540))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(r)", 3);
  }
  if (*(_DWORD *)(a1 + 536))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
  }
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", blendMode=", 12);
  v18 = LiSceneObject::blendMode((LiSceneObject *)a1);
  operator<<(v17, v18);
  if (*(_BYTE *)(a1 + 541))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", farAway=true", 14);
  if (*(double *)(a1 + 648) > 0.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", reflectivity=", 15);
    std::ostream::operator<<();
  }
  if (!*(_BYTE *)(a1 + 552))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", doesReflect=false", 19);
  if (!*(_BYTE *)(a1 + 553))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", visibleOutsideReflection=false", 32);
  if (*(double *)(a1 + 544) != 1.0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", opacity=", 10);
    std::ostream::operator<<();
  }
  if (*(int *)(a1 + 700) <= 1)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", filterIntersections=", 22);
    std::ostream::operator<<();
  }
  if (*(_QWORD *)(a1 + 568))
  {
    LightFilter = LiGeode::getLightFilter((LiGeode *)a1);
    if (*((_BYTE *)LightFilter + 172))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ignoreAlpha", 13);
    if (*((_BYTE *)LightFilter + 173))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", castsShadows", 14);
    if (*((_BYTE *)LightFilter + 174))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", receivesShadows", 17);
    if (*((_BYTE *)LightFilter + 176))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", filterCastShadows", 19);
  }
  if (*(_DWORD *)(a1 + 636))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
    v20 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" filters", 8);
  }
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v22 = std::locale::use_facet(&v30, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
  std::locale::~locale(&v30);
  std::ostream::put();
  std::ostream::flush();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, a3);
  v23 = *(_QWORD *)(a1 + 592);
  if (!v23)
    throw_PCNullPointerException(1);
  v24 = (a3 + 1);
  result = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v23 + 128))(v23, a2, v24);
  v26 = *(unsigned int *)(a1 + 636);
  if ((int)v26 >= 1)
  {
    v27 = (PCArray_base *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(Filters: ", 10);
    for (i = 0; i != v26; ++i)
    {
      if (i >= *(int *)(a1 + 636))
        PCArray_base::badIndex(v27);
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 640) + 16 * i);
      v27 = (PCArray_base *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v29 + 128))(v29, a2, v24);
    }
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")\n", 2);
  }
  return result;
}

void sub_1B2D08C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  if (a10.__locale_)
    LiGeode::print((uint64_t)a10.__locale_, &a10);
  _Unwind_Resume(exception_object);
}

PCShared_base *LiGeode::getLightFilter(LiGeode *this)
{
  PCShared_base *result;
  LiLightFilter *v3;
  PCShared_base **v4;

  result = (PCShared_base *)*((_QWORD *)this + 71);
  if (!result)
  {
    v3 = (LiLightFilter *)operator new();
    LiLightFilter::LiLightFilter(v3);
    v4 = (PCShared_base **)((char *)this + 568);
    PCPtr<LiImageSource>::operator=<LiImageSource>(v4, v3);
    result = *v4;
    if (!*v4)
      throw_PCNullPointerException(1);
  }
  return result;
}

{
  PCShared_base *result;
  LiLightFilter *v3;
  PCShared_base **v4;

  result = (PCShared_base *)*((_QWORD *)this + 71);
  if (!result)
  {
    v3 = (LiLightFilter *)operator new();
    LiLightFilter::LiLightFilter(v3);
    v4 = (PCShared_base **)((char *)this + 568);
    PCPtr<LiImageSource>::operator=<LiImageSource>(v4, v3);
    result = *v4;
    if (!*v4)
      throw_PCNullPointerException(1);
  }
  return result;
}

void sub_1B2D08CD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B0369FADLL);
  _Unwind_Resume(a1);
}

void LiGeode::setLighting(uint64_t a1, char a2, uint64_t a3, uint64_t a4, PCShared_base *a5, char a6, PCShared_base *a7)
{
  PCShared_base *LightFilter;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t i;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t j;
  uint64_t k;
  _OWORD v38[6];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;

  *(_BYTE *)(a1 + 584) = a2;
  LightFilter = LiGeode::getLightFilter((LiGeode *)a1);
  v15 = *(_OWORD *)(a4 + 112);
  v39 = *(_OWORD *)(a4 + 96);
  v40 = v15;
  v16 = *(_OWORD *)(a4 + 144);
  v41 = *(_OWORD *)(a4 + 128);
  v42 = v16;
  v17 = *(_OWORD *)(a4 + 48);
  v38[2] = *(_OWORD *)(a4 + 32);
  v38[3] = v17;
  v18 = *(_OWORD *)(a4 + 80);
  v38[4] = *(_OWORD *)(a4 + 64);
  v38[5] = v18;
  v19 = *(_OWORD *)(a4 + 16);
  v38[0] = *(_OWORD *)a4;
  v38[1] = v19;
  LiPolygon::LiPolygon((LiPolygon *)&v43, (const LiPolygon *)(a4 + 160));
  v20 = *(_OWORD *)(a4 + 376);
  v50 = *(_OWORD *)(a4 + 360);
  v51 = v20;
  v21 = *(_OWORD *)(a4 + 312);
  v46 = *(_OWORD *)(a4 + 296);
  v47 = v21;
  v22 = *(_OWORD *)(a4 + 344);
  v48 = *(_OWORD *)(a4 + 328);
  v49 = v22;
  v23 = *(_OWORD *)(a4 + 280);
  v44 = *(_OWORD *)(a4 + 264);
  v45 = v23;
  v24 = *(_QWORD *)(a4 + 392);
  BYTE2(v39) = a2;
  v25 = *(_QWORD *)(a1 + 520);
  v26 = *(_DWORD *)(a3 + 12);
  if (*((_DWORD *)LightFilter + 12) >= v26)
    v27 = *((_DWORD *)LightFilter + 12);
  else
    v27 = (2 * v26) | 1;
  v52 = v24;
  *(_QWORD *)&v44 = v25;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize((uint64_t)LightFilter + 40, v26, v27);
  if (*(int *)(a3 + 12) >= 1)
  {
    v28 = 0;
    v29 = 0;
    do
    {
      LiLight::operator=(*((_QWORD *)LightFilter + 7) + v28, *(_QWORD *)(a3 + 16) + v28);
      ++v29;
      v28 += 944;
    }
    while (v29 < *(int *)(a3 + 12));
  }
  *((_BYTE *)LightFilter + 64) = *(_BYTE *)(a3 + 24);
  LiMaterialProperties::operator=((uint64_t)LightFilter + 72, (uint64_t)v38);
  if ((PCShared_base *)((char *)LightFilter + 472) != a5)
  {
    v30 = 0;
    v31 = (char *)LightFilter + 472;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)&v31[i] = *(_QWORD *)((char *)a5 + i);
      ++v30;
      v31 += 32;
      a5 = (PCShared_base *)((char *)a5 + 32);
    }
    while (v30 != 4);
  }
  if (fabs(PCMatrix44Tmpl<double>::determinant((double *)LightFilter + 59)) < 0.0000001)
  {
    v53 = 0;
    v54 = 0;
    v55 = xmmword_1B304EED0;
    liFindMatrixPlane((double *)LightFilter + 59, (double *)&v53);
    v33 = v54;
    *((_QWORD *)LightFilter + 61) = v53;
    *((_QWORD *)LightFilter + 65) = v33;
    v34 = *((_QWORD *)&v55 + 1);
    *((_QWORD *)LightFilter + 69) = v55;
    *((_QWORD *)LightFilter + 73) = v34;
  }
  *((_BYTE *)LightFilter + 856) = a6;
  v35 = (char *)LightFilter + 728;
  if ((PCShared_base *)((char *)LightFilter + 728) != a7)
  {
    for (j = 0; j != 4; ++j)
    {
      for (k = 0; k != 32; k += 8)
        *(_QWORD *)&v35[k] = *(_QWORD *)((char *)a7 + k);
      v35 += 32;
      a7 = (PCShared_base *)((char *)a7 + 32);
    }
  }
  LiMaterialProperties::~LiMaterialProperties((LiMaterialProperties *)v38);
}

void sub_1B2D08F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  LiMaterialProperties::~LiMaterialProperties((LiMaterialProperties *)&a9);
  _Unwind_Resume(a1);
}

uint64_t LiGeode::setLit(uint64_t this, char a2)
{
  *(_BYTE *)(this + 584) = a2;
  return this;
}

void sub_1B2D08FA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40B0369FADLL);
  _Unwind_Resume(a1);
}

BOOL LiGeode::needsLights(LiGeode *this)
{
  if (*((_BYTE *)this + 584))
    return 1;
  if (*((_QWORD *)this + 71))
    return *((_BYTE *)LiGeode::getLightFilter(this) + 174) != 0;
  return 0;
}

uint64_t LiGeode::getSmoothEdges(LiGeode *this)
{
  return *((unsigned __int8 *)this + 697);
}

uint64_t LiGeode::setSmoothEdges(uint64_t this, char a2)
{
  *(_BYTE *)(this + 697) = a2;
  return this;
}

uint64_t LiMaterialProperties::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  v8 = *(_OWORD *)(a2 + 96);
  v9 = *(_OWORD *)(a2 + 112);
  v10 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v10;
  *(_OWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 112) = v9;
  LiPolygon::operator=(a1 + 160, a2 + 160);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  if (a2 != a1)
  {
    v11 = 0;
    v12 = a1 + 272;
    v13 = a2 + 272;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v12 + i) = *(_QWORD *)(v13 + i);
      ++v11;
      v12 += 32;
      v13 += 32;
    }
    while (v11 != 4);
  }
  return a1;
}

void PCArray<PCVector3<double>,PCArray_Traits<PCVector3<double>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656CFD8;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCVector3<double>,PCArray_Traits<PCVector3<double>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<PCVector3<double>,PCArray_Traits<PCVector3<double>>>::resize(uint64_t result, int a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  PCException *exception;
  PCString v18;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v18, "PCArray::resize");
    PCException::PCException(exception, &v18);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v5 = result;
  if (v3 == *(_DWORD *)(result + 8))
  {
    v6 = *(int *)(result + 12);
    if ((int)v6 < a2)
    {
      v7 = 24 * v6;
      v8 = a2 - v6;
      do
      {
        v9 = (_QWORD *)(*(_QWORD *)(result + 16) + v7);
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        v7 += 24;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (v3)
    {
      v10 = (_QWORD *)operator new[]();
      bzero(v10, 24 * v3);
    }
    else
    {
      v10 = 0;
    }
    v11 = *(_DWORD *)(v5 + 12);
    if (a2 >= v11)
      v12 = v11;
    else
      v12 = a2;
    if ((int)v12 < 1)
    {
      LODWORD(v12) = 0;
    }
    else
    {
      v13 = (_QWORD *)(*(_QWORD *)(v5 + 16) + 16);
      v14 = v10 + 2;
      v15 = v12;
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v13 - 1);
        v16 = *v13;
        v13 += 3;
        *v14 = v16;
        v14 += 3;
        --v15;
      }
      while (v15);
    }
    if ((int)v12 > v11)
      v11 = v12;
    if (v11 < a2)
      bzero(&v10[3 * v11], 24 * (~v11 + a2) + 24);
    result = *(_QWORD *)(v5 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v5 + 16) = v10;
  }
  *(_DWORD *)(v5 + 8) = v3;
  *(_DWORD *)(v5 + 12) = a2;
  return result;
}

void sub_1B2D092DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void LiGeode::print(uint64_t a1, _BYTE **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _BYTE *v5;

  v2 = (unsigned int *)(a1 - 12);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v2));
  if (!v4)
  {
    **a2 = 0;
    if (*a2)
      v5 = *a2 - 12;
    else
      v5 = 0;
    free(v5);
  }
}

BOOL liIsConvex(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  float64x2_t v10;
  float64x2_t v11;
  int8x16_t v12;
  double v13;
  float64x2_t v14;
  uint64_t v15;
  int v17;
  PCException *exception;
  PCString v19;
  PCString v20;

  v1 = *a1;
  v2 = a1[1] - *a1;
  v3 = v2 >> 4;
  if ((int)(v2 >> 4) < 1)
  {
    v8 = 0.0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = (v2 >> 4);
    v8 = 0.0;
    do
    {
      if (v7 - 1 == v4)
        v9 = 0;
      else
        v9 = v4 + 1;
      v10 = *(float64x2_t *)(v1 + 16 * v9);
      v11 = vsubq_f64(v10, *(float64x2_t *)(v1 + 16 * v4));
      v12 = (int8x16_t)vsubq_f64(*(float64x2_t *)(v1 + 16 * (((int)v4 + 2) % (int)v3)), v10);
      v13 = sqrt((vmulq_f64(v11, v11).f64[0] + vmuld_lane_f64(v11.f64[1], v11, 1))* (vmuld_n_f64(*(double *)v12.i64, *(double *)v12.i64)+ COERCE_DOUBLE(*(_QWORD *)&vmulq_f64(*(float64x2_t *)&v12, *(float64x2_t *)&v12).f64[1])));
      v14 = vmulq_f64(v11, (float64x2_t)vextq_s8(v12, v12, 8uLL));
      v14.f64[0] = vsubq_f64(v14, (float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1)).f64[0] / v13;
      v15 = v4 + 1;
      v5 |= v14.f64[0] > 0.0;
      v6 |= v14.f64[0] < 0.0;
      v8 = v8
         + atan2(v14.f64[0], (vmuld_n_f64(v11.f64[0], *(double *)v12.i64) + vmuld_lane_f64(v11.f64[1], (float64x2_t)v12, 1)) / v13);
      v4 = v15;
    }
    while (v7 != v15);
    if ((v5 & v6 & 1) != 0)
      return 0;
  }
  v17 = llround(v8 / 6.28318531);
  if (vabdd_f64(v8, (double)v17 * 6.28318531) >= 0.01)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v20, "fabs(omega - wind*M_2PI) < 0.01");
    PCString::PCString(&v19, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiGeometryUtil.cpp");
    PCException::PCException(exception, &v20, &v19, 78);
    *(_QWORD *)exception = &unk_1E656D028;
  }
  if (v17 < 0)
    v17 = -v17;
  return v17 == 1;
}

void sub_1B2D09524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

double elim<LiPolygon::PosFacet,LiChannelT<PCVector2<double>>>(double ***a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  double result;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  uint64_t v12;

  v6 = (char *)(*a1)[1] - (char *)**a1;
  std::vector<PCVector2<double>>::resize((uint64_t)a2, (int)(v6 >> 5));
  if ((int)((unint64_t)v6 >> 5) >= 1)
  {
    v8 = **a1;
    v9 = ((unint64_t)v6 >> 5);
    v10 = (double *)(*a2 + 8);
    do
    {
      v11 = v8 + 1;
      if (a3 > 0)
        v11 = v8;
      if (a3 <= 1)
        v12 = 2;
      else
        v12 = 1;
      result = v8[v12];
      *(v10 - 1) = *v11;
      *v10 = result;
      v10 += 2;
      v8 += 4;
      --v9;
    }
    while (v9);
  }
  return result;
}

BOOL PCRect<double>::intersects(double *a1, double *a2)
{
  double v2;
  double v3;
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  BOOL v9;
  BOOL v10;
  double v11;
  double v12;

  v2 = a1[2];
  if (v2 < 0.0)
    return 0;
  v3 = a1[3];
  if (v3 < 0.0)
    return 0;
  v4 = 0;
  v5 = a2[2];
  if (v5 >= 0.0)
  {
    v6 = a2[3];
    if (v6 >= 0.0)
    {
      v7 = *a1;
      v8 = v5 + *a2;
      if (v2 + *a1 >= *a2)
      {
        v10 = v7 == v8;
        v9 = v7 >= v8;
      }
      else
      {
        v9 = 1;
        v10 = 0;
      }
      if (v10 || !v9)
      {
        v11 = a1[1];
        v12 = a2[1];
        if (v11 <= v12 + v6)
          return v11 + v3 >= v12;
      }
      return 0;
    }
  }
  return v4;
}

uint64_t polygonPlaneSplit<double>(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, std::vector<int> *a5, std::vector<int> *a6, int a7, int *a8, double a9)
{
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  double v21;
  float64x2_t v22;
  double v23;
  std::vector<int>::pointer begin;
  float64x2_t *v25;
  int v26;
  float64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  int v31;
  int v32;
  char v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  double *v47;
  double *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  PCException *exception;
  int *v71;
  void *__p;
  void *v75;
  uint64_t v76;
  int v77;
  PCString v78;
  std::vector<int> v79;

  v16 = (*a1)[1] - **a1;
  memset(&v79, 0, sizeof(v79));
  std::vector<unsigned int>::resize(&v79, (int)((uint64_t)v16 >> 5));
  v17 = v16 >> 5;
  if ((int)(v16 >> 5) < 1)
  {
    v26 = -1;
LABEL_24:
    v33 = 1;
    v34 = 2;
    goto LABEL_26;
  }
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = *(double *)a2;
  v22 = *(float64x2_t *)(a2 + 8);
  v23 = *(double *)(a2 + 24);
  begin = v79.__begin_;
  v25 = (float64x2_t *)(**a1 + 8);
  v26 = -1;
  do
  {
    v27 = v25[-1].f64[1] * v21;
    v28 = *v25;
    v25 += 2;
    v29 = vmulq_f64(v28, v22);
    v30 = v23 + v27 + v29.f64[0] + v29.f64[1];
    if (v30 >= -1.0e-11)
      v31 = 0;
    else
      v31 = -1;
    if (v30 > 1.0e-11)
      v31 = 1;
    begin[v18] = v31;
    if (v31 == 1)
      v32 = 1;
    else
      v32 = v19;
    if (v31 == -1)
      v20 = 1;
    else
      v19 = v32;
    if (v31)
      v26 = v18;
    ++v18;
  }
  while ((v16 >> 5) != v18);
  if ((v20 & 1) == 0)
  {
    if ((v19 & 1) != 0)
    {
      v33 = 0;
      v34 = -1;
      goto LABEL_26;
    }
    goto LABEL_24;
  }
  if ((v19 & 1) == 0)
  {
    v33 = 0;
    v34 = 1;
LABEL_26:
    *a8 = v34;
    if (a7)
    {
      if ((v26 & 0x80000000) == 0)
        goto LABEL_28;
      if ((v33 & 1) == 0)
        goto LABEL_79;
      std::vector<unsigned int>::resize(a5, 0);
      std::vector<unsigned int>::resize(a6, 0);
    }
LABEL_69:
    v68 = 0;
    goto LABEL_70;
  }
  *a8 = 3;
  if (v26 < 0)
  {
LABEL_79:
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString((PCString *)&__p, "sideof == kLiCoplanar");
    PCString::PCString(&v78, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiGeometryUtil.cpp");
    PCException::PCException(exception, (const PCString *)&__p, &v78, 580);
    *(_QWORD *)exception = &unk_1E656D028;
  }
LABEL_28:
  v71 = a8;
  v35 = v17 - 1;
  if ((int)v17 >= 1)
  {
    v36 = v79.__begin_[v26];
    v37 = (v26 + (int)v17) % (int)v17;
    if (v79.__begin_[v37] == v36)
    {
      v38 = v17 - 1;
      do
      {
        v39 = v37;
        if (!v38)
          break;
        v37 = (v26 + v38--) % (int)v17;
      }
      while (v79.__begin_[v37] == v36);
    }
    else
    {
      v39 = 0;
    }
    v40 = 0;
    v41 = v16 >> 5;
    while (1)
    {
      LODWORD(__p) = v39 % (int)v17;
      LODWORD(v78.var0) = (v35 + v39 % (int)v17) % (int)v17;
      v42 = v79.__begin_[v39 % (int)v17];
      if (v40 && v42 == v40)
        goto LABEL_60;
      if (v42)
        break;
      v40 = 0;
LABEL_64:
      ++v39;
      LODWORD(v41) = v41 - 1;
      if (!(_DWORD)v41)
        goto LABEL_65;
    }
    v43 = v79.__begin_[(v35 + v39 % (int)v17) % (int)v17];
    if (v43)
    {
      if (v43 != v42)
      {
        if (v42 >= 0)
          v44 = (uint64_t)a6;
        else
          v44 = (uint64_t)a5;
        if (v42 >= 0)
          v45 = -2;
        else
          v45 = -1;
        v77 = v45;
        LiChannelT<int>::append(v44, &v77);
        v46 = **a1;
        v47 = (double *)(v46 + 32 * (int)__p);
        v48 = (double *)(v46 + 32 * SLODWORD(v78.var0));
        v49 = v47[1];
        v50 = v47[2];
        v51 = *(double *)(a2 + 8);
        v52 = *(double *)(a2 + 16);
        v53 = *(double *)(a2 + 24);
        v54 = v53 + *v47 * *(double *)a2 + v49 * v51 + v50 * v52;
        v55 = v48[1];
        v56 = v48[2];
        v57 = v54 / (v54 - (v53 + *(double *)a2 * *v48 + v51 * v55 + v52 * v56));
        v58 = *v47 + (*v48 - *v47) * v57;
        v59 = v49 + (v55 - v49) * v57;
        v60 = v50 + (v56 - v50) * v57;
        v61 = (double *)a4;
        if (v42 < 0)
          v61 = (double *)a3;
        *v61 = v58;
        v61[1] = v59;
        v61[2] = v60;
      }
    }
    else
    {
      if (v42 >= 0)
        v62 = (uint64_t)a6;
      else
        v62 = (uint64_t)a5;
      LiChannelT<int>::append(v62, &v78);
      v63 = **a1 + 32 * SLODWORD(v78.var0);
      v64 = a4;
      if (v42 < 0)
        v64 = a3;
      v65 = *(_QWORD *)(v63 + 16);
      *(_OWORD *)v64 = *(_OWORD *)v63;
      *(_QWORD *)(v64 + 16) = v65;
    }
    v40 = v42;
LABEL_60:
    if (v40 >= 0)
      v66 = (uint64_t)a6;
    else
      v66 = (uint64_t)a5;
    LiChannelT<int>::append(v66, &__p);
    goto LABEL_64;
  }
LABEL_65:
  if ((((char *)a6->__end_ - (char *)a6->__begin_) & 0x3FFFFFFFCLL) == 0
    || (((char *)a5->__end_ - (char *)a5->__begin_) & 0x3FFFFFFFCLL) == 0)
  {
    goto LABEL_69;
  }
  LiChannelT<int>::append((uint64_t)a5, a6->__begin_);
  LiChannelT<int>::append((uint64_t)a6, a5->__begin_);
  __p = 0;
  v75 = 0;
  v76 = 0;
  LiChannelT<PCVector3<double>>::append((uint64_t *)&__p, a3);
  LiChannelT<PCVector3<double>>::append((uint64_t *)&__p, a4);
  removeDuplicatePoints<PCVector3<double>>((uint64_t *)a5, a1, &__p, a9);
  removeDuplicatePoints<PCVector3<double>>((uint64_t *)a6, a1, &__p, a9);
  if ((int)((unint64_t)((char *)a5->__end_ - (char *)a5->__begin_) >> 2) <= 2)
  {
    std::vector<unsigned int>::resize(a5, 0);
    v67 = -1;
LABEL_75:
    v68 = 0;
    *v71 = v67;
    goto LABEL_77;
  }
  if ((int)((unint64_t)((char *)a6->__end_ - (char *)a6->__begin_) >> 2) <= 2)
  {
    std::vector<unsigned int>::resize(a6, 0);
    v67 = 1;
    goto LABEL_75;
  }
  v68 = 1;
LABEL_77:
  if (__p)
  {
    v75 = __p;
    operator delete(__p);
  }
LABEL_70:
  if (v79.__begin_)
  {
    v79.__end_ = v79.__begin_;
    operator delete(v79.__begin_);
  }
  return v68;
}

void sub_1B2D09B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, uint64_t a16, PCString a17, void *__p, uint64_t a19)
{
  void *v19;
  int v20;

  PCString::~PCString(&a17);
  PCString::~PCString(&a13);
  if (v20)
    __cxa_free_exception(v19);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL liPolygonPlaneClip(uint64_t **a1, uint64_t **a2, uint64_t a3, int a4)
{
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  char *v18;
  __int128 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  PCException *exception;
  std::vector<int> v27;
  void *__p;
  void *v29;
  uint64_t v30;
  int v31;
  std::vector<int> v32;
  std::vector<int> v33;
  _QWORD v34[3];
  _QWORD v35[3];

  memset(v35, 0, sizeof(v35));
  memset(v34, 0, sizeof(v34));
  memset(&v33, 0, sizeof(v33));
  memset(&v32, 0, sizeof(v32));
  polygonPlaneSplit<double>(a1, a3, (uint64_t)v35, (uint64_t)v34, &v32, &v33, 1, &v31, 0.1);
  v7 = ((char *)v32.__end_ - (char *)v32.__begin_) & 0x3FFFFFFFCLL;
  if (v7)
  {
    v8 = (char *)v33.__end_ - (char *)v33.__begin_;
    v9 = (unint64_t)((char *)v33.__end_ - (char *)v33.__begin_) >> 2;
    if ((_DWORD)v9)
    {
      __p = 0;
      v29 = 0;
      v30 = 0;
      memset(&v27, 0, sizeof(v27));
      std::vector<PCVector3<double>>::resize((uint64_t *)&__p, (int)(v8 >> 2));
      std::vector<unsigned int>::resize(&v27, (int)(v8 >> 2));
      if ((int)v9 >= 1)
      {
        v10 = 0;
        v11 = (unint64_t)((*a2)[1] - **a2) >> 5;
        v12 = ((unint64_t)v8 >> 2);
        while (1)
        {
          v13 = v33.__begin_[v10];
          v14 = v10 + 1;
          v15 = v10 + 1 == v12 ? 0 : v10 + 1;
          v16 = v33.__begin_[v15];
          if (v13 == -2)
            break;
          if (v13 == -1)
          {
            v17 = v35;
LABEL_12:
            v18 = (char *)__p + 24 * v10;
            v19 = *(_OWORD *)v17;
            *((_QWORD *)v18 + 2) = v17[2];
            *(_OWORD *)v18 = v19;
            goto LABEL_13;
          }
          v22 = **a1 + 32 * v13;
          v23 = (char *)__p + 24 * v10;
          v24 = *(_OWORD *)v22;
          *((_QWORD *)v23 + 2) = *(_QWORD *)(v22 + 16);
          *(_OWORD *)v23 = v24;
          if ((v13 & 0x80000000) == 0)
          {
            v21 = v13;
            goto LABEL_17;
          }
LABEL_13:
          v20 = a4;
          if ((v16 & 0x80000000) == 0)
          {
            v21 = ((int)v11 - 1 + v16) % (int)v11;
LABEL_17:
            v20 = *(_DWORD *)(**a2 + 32 * v21 + 24);
          }
          v27.__begin_[v10++] = v20;
          if (v14 == v12)
            goto LABEL_19;
        }
        v17 = v34;
        goto LABEL_12;
      }
LABEL_19:
      copy<LiChannelT<PCVector3<double>>,LiPolygon::PosFacet>(&__p, a1);
      copy<LiChannelT<int>,LiImagePolygon::EdgeFacet>(&v27.__begin_, a2);
      if (v27.__begin_)
      {
        v27.__end_ = v27.__begin_;
        operator delete(v27.__begin_);
      }
      if (__p)
      {
        v29 = __p;
        operator delete(__p);
      }
    }
    else
    {
      std::vector<LiPolygon::PosEdge>::resize(*a1, 0);
      if ((((*a2)[1] - **a2) & 0x1FFFFFFFE0) != 0)
      {
        exception = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCString::PCString((PCString *)&__p, "edge.size() == 0");
        PCString::PCString((PCString *)&v27, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiGeometryUtil.cpp");
        PCException::PCException(exception, (const PCString *)&__p, (const PCString *)&v27, 738);
        *(_QWORD *)exception = &unk_1E656D028;
      }
    }
  }
  if (v32.__begin_)
  {
    v32.__end_ = v32.__begin_;
    operator delete(v32.__begin_);
  }
  if (v33.__begin_)
  {
    v33.__end_ = v33.__begin_;
    operator delete(v33.__begin_);
  }
  return v7 != 0;
}

void sub_1B2D09EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10, uint64_t a11, uint64_t a12, PCString a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v21;
  int v22;

  PCString::~PCString(&a10);
  PCString::~PCString(&a13);
  if (v22)
    __cxa_free_exception(v21);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void liPolygonDimensions(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double *v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  uint64_t v21;
  float64x2_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double *v38;
  double *v39;
  uint64_t v40;

  v38 = 0;
  v39 = 0;
  v40 = 0;
  elim<LiPolygon::PosFacet,LiChannelT<PCVector2<double>>>((double ***)(a1 + 88), &v38, 2);
  v9 = v38;
  v10 = (unint64_t)((char *)v39 - (char *)v38) >> 4;
  if ((int)v10 < 1)
    goto LABEL_28;
  v11 = 0;
  v12 = 0;
  v13 = ((unint64_t)((char *)v39 - (char *)v38) >> 4);
  v14 = v13 - 1;
  v15 = 0.0;
  v16 = 0.0;
  v17 = 0.0;
  v18 = 0.0;
  v19 = 0.0;
  do
  {
    v20 = *(float64x2_t *)&v38[2 * v11++];
    v21 = v11;
    if (v11 == v13)
      v21 = 0;
    v22 = vsubq_f64(*(float64x2_t *)&v38[2 * v21], v20);
    v23 = vaddvq_f64(vmulq_f64(v22, v22));
    if (v23 <= -0.0000001 || v23 >= 0.0000001)
    {
      v24 = sqrt(v23);
      v25 = v22.f64[1] / v24;
      v22.f64[0] = -v22.f64[0] / v24;
      v26 = v22.f64[1] / v24 * *v38 + v22.f64[0] * v38[1];
      if ((_DWORD)v10 == 1)
      {
        v27 = v26;
      }
      else
      {
        v28 = v13 - 1;
        v29 = v38 + 3;
        v27 = v26;
        do
        {
          v30 = v22.f64[0] * *v29;
          v31 = v25 * *(v29 - 1) + v30;
          if (v27 > v31)
            v27 = v25 * *(v29 - 1) + v30;
          if (v26 < v31)
            v26 = v25 * *(v29 - 1) + v30;
          v29 += 2;
          --v28;
        }
        while (v28);
      }
      if ((v12 & (v26 - v27 >= v15)) != 0)
      {
        v12 = 1;
      }
      else
      {
        v12 = 1;
        v19 = v22.f64[0];
        v18 = v25;
        v17 = v27;
        v16 = v26;
        v15 = v26 - v27;
      }
    }
  }
  while (v11 != v13);
  if ((v12 & 1) != 0)
  {
    v32 = v18 * v38[1] - v19 * *v38;
    if ((int)v10 < 2)
    {
      v34 = v18 * v38[1] - v19 * *v38;
    }
    else
    {
      v33 = v38 + 3;
      v34 = v18 * v38[1] - v19 * *v38;
      do
      {
        v35 = v18 * *v33;
        v36 = v35 - v19 * *(v33 - 1);
        if (v34 > v36)
          v34 = v35 - v19 * *(v33 - 1);
        if (v32 < v36)
          v32 = v35 - v19 * *(v33 - 1);
        v33 += 2;
        --v14;
      }
      while (v14);
    }
    *a5 = v15;
    *a4 = v32 - v34;
    *a3 = -v19;
    a3[1] = v18;
    v37 = v17 + v16;
    *a2 = (v18 * v37 - v19 * (v34 + v32)) * 0.5;
    a2[1] = (v19 * v37 + v18 * (v34 + v32)) * 0.5;
  }
  else
  {
LABEL_28:
    *a4 = 0.0;
    *a5 = 0.0;
    *a3 = 0.0;
    a3[1] = 0.0;
    *(_OWORD *)a2 = *(_OWORD *)v9;
  }
  v39 = v9;
  operator delete(v9);
}

void sub_1B2D0A17C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t liClipLineToPolygon(double *a1, uint64_t **a2, double *a3, double *a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v38;

  *a3 = 0.0;
  *a4 = 1.0;
  v4 = **a2;
  v5 = (*a2)[1] - v4;
  if ((int)(v5 >> 5) < 2)
    return 0;
  v7 = 0;
  v6 = 0;
  v8 = 0.0;
  v9 = (v5 >> 5);
  v10 = v9 - 1;
  v11 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  v14 = 0.0;
  v15 = 0.0;
LABEL_4:
  v16 = (double *)(v4 + 16 + 32 * v7);
  do
  {
    v17 = v7 + 1;
    v18 = (v7 + 1);
    if (v10 == v7)
      v18 = 0;
    v19 = (double *)(v4 + 32 * v18);
    v21 = *(v16 - 2);
    v20 = *(v16 - 1);
    v22 = *v19 - v21;
    v23 = v19[1] - v20;
    v24 = *v16;
    v25 = v19[2] - *v16;
    v27 = a1[3];
    v26 = a1[4];
    v28 = a1[5];
    v29 = v26 * v25 - v23 * v28;
    v30 = v22 * v28 - v25 * v27;
    v31 = v23 * v27 - v22 * v26;
    v32 = v31 * v31 + v29 * v29 + v30 * v30;
    if (v32 != 0.0)
    {
      v33 = v24 - a1[2];
      v34 = v20 - a1[1];
      v35 = v21 - *a1;
      v36 = ((v27 * v30 - v26 * v29) * v33 + (v28 * v29 - v27 * v31) * v34 + (v26 * v31 - v28 * v30) * v35) / v32;
      if (v36 >= 0.0 && v36 <= 1.0)
      {
        v38 = ((v22 * v30 - v23 * v29) * v33 + (v25 * v29 - v22 * v31) * v34 + (v23 * v31 - v25 * v30) * v35) / v32;
        if (!(_DWORD)v6)
        {
          v6 = 1;
          *a3 = v38;
          v8 = v21;
          v11 = v20;
          v12 = v24;
          v13 = v22;
          v14 = v23;
          v15 = v25;
          if (v10 != v7++)
            goto LABEL_4;
          goto LABEL_20;
        }
        v6 = (v6 + 1);
        *a4 = v38;
      }
    }
    v16 += 4;
    ++v7;
  }
  while (v9 != v17);
  v25 = v15;
  v23 = v14;
  v22 = v13;
  v24 = v12;
  v20 = v11;
  v21 = v8;
  if ((_DWORD)v6 != 1)
    return v6;
LABEL_20:
  *a1 = v21;
  a1[1] = v20;
  a1[2] = v24;
  a1[3] = v22;
  a1[4] = v23;
  a1[5] = v25;
  *a3 = 0.0;
  v6 = 1;
  *a4 = 1.0;
  return v6;
}

double LiPlaneEquation@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double v3;
  double v4;
  double result;
  double v6;
  double v7;

  v4 = *a1;
  v3 = a1[1];
  result = a1[2];
  v6 = sqrt(v4 * v4 + v3 * v3 + result * result);
  if (v6 <= -0.000000100000001 || v6 >= 0.000000100000001)
  {
    v4 = v4 / v6;
    v3 = v3 / v6;
    result = result / v6;
  }
  v7 = -(v4 * *a2 + v3 * a2[1] + result * a2[2]);
  *a3 = v4;
  a3[1] = v3;
  a3[2] = result;
  a3[3] = v7;
  return result;
}

BOOL liFindMatrixPlane(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  _BOOL8 v19;
  BOOL v20;
  double v21;
  double v22;
  double v23;
  double v25[3];
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  __int128 v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;

  v37 = 0.0;
  v38 = 0.0;
  v39 = 0.0;
  v35 = 0.0;
  v36 = 0.0;
  v34 = 1.0;
  v32 = xmmword_1B304EEE0;
  v33 = 0.0;
  v29 = 0.0;
  v30 = 0.0;
  v31 = 1.0;
  PCMatrix44Tmpl<double>::transform<double>(a1, &v37, &v37);
  PCMatrix44Tmpl<double>::transform<double>(a1, &v34, &v34);
  PCMatrix44Tmpl<double>::transform<double>(a1, (double *)&v32, (double *)&v32);
  PCMatrix44Tmpl<double>::transform<double>(a1, &v29, &v29);
  v4 = (v35 - v38) * (v33 - v39) - (v36 - v39) * (*((double *)&v32 + 1) - v38);
  v5 = (v36 - v39) * (*(double *)&v32 - v37) - (v34 - v37) * (v33 - v39);
  v6 = (v34 - v37) * (*((double *)&v32 + 1) - v38) - (v35 - v38) * (*(double *)&v32 - v37);
  v7 = (*((double *)&v32 + 1) - v38) * (v31 - v39) - (v33 - v39) * (v30 - v38);
  v8 = (v33 - v39) * (v29 - v37) - (*(double *)&v32 - v37) * (v31 - v39);
  v9 = (*(double *)&v32 - v37) * (v30 - v38) - (*((double *)&v32 + 1) - v38) * (v29 - v37);
  v10 = (v36 - v39) * (v30 - v38) - (v35 - v38) * (v31 - v39);
  v11 = (v34 - v37) * (v31 - v39) - (v36 - v39) * (v29 - v37);
  v12 = (v35 - v38) * (v29 - v37) - (v34 - v37) * (v30 - v38);
  v26 = v9 * v9 + v7 * v7 + v8 * v8;
  v27 = v10 * v10 + v11 * v11 + v12 * v12;
  v28 = v6 * v6 + v4 * v4 + v5 * v5;
  v13 = fabs(v27);
  v14 = fabs(v26);
  v15 = v13 > v14;
  v16 = fabs(v28);
  v17 = fabs(*(&v26 + (v13 > v14)));
  if (v16 > v17)
    v15 = 2;
  v18 = *(&v26 + v15);
  v19 = v18 >= 1.0e-32 || v18 <= -1.0e-32;
  if (v19)
  {
    v20 = v13 > v14;
    v21 = sqrt(v18);
    if (v16 <= v17 && v20)
    {
      v4 = (v36 - v39) * (v30 - v38) - (v35 - v38) * (v31 - v39);
      v5 = (v34 - v37) * (v31 - v39) - (v36 - v39) * (v29 - v37);
      v6 = (v35 - v38) * (v29 - v37) - (v34 - v37) * (v30 - v38);
    }
    if (!v15)
      v4 = (*((double *)&v32 + 1) - v38) * (v31 - v39) - (v33 - v39) * (v30 - v38);
    v22 = v4 / v21;
    if (!v15)
      v5 = (v33 - v39) * (v29 - v37) - (*(double *)&v32 - v37) * (v31 - v39);
    v23 = v5 / v21;
    if (!v15)
      v6 = (*(double *)&v32 - v37) * (v30 - v38) - (*((double *)&v32 + 1) - v38) * (v29 - v37);
    v25[0] = v22;
    v25[1] = v23;
    v25[2] = v6 / v21;
    LiPlaneEquation(v25, &v37, a2);
  }
  return v19;
}

BOOL liSafeGetTransformation(__int128 *a1, uint64_t a2)
{
  fixNullSpace((uint64_t)a1);
  return PCMatrix44Tmpl<double>::getTransformation(a1, a2);
}

void fixNullSpace(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float64x2_t *v5;
  double v6;
  double v7;
  float64x2_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v2 = 0;
  v3 = 0xFFFFFFFF00000000;
  v4 = 1;
  do
  {
    v5 = (float64x2_t *)(a1 + v2);
    v6 = *(double *)(a1 + v2);
    v7 = *(double *)(a1 + v2 + 8);
    v8 = *(float64x2_t *)(a1 + v2 + 16);
    if (v2 == 64)
      v9 = 0;
    else
      v9 = v4;
    v10 = (double *)(a1 + 32 * v9);
    v11 = *v10;
    v12 = v10[1];
    v13 = v10[2];
    v14 = v3 >> 32;
    if (!v2)
      v14 = 2;
    v15 = (double *)(a1 + 32 * v14);
    v16 = v15[1];
    v17 = v15[2];
    v18 = v12 * v17 - v13 * v16;
    v19 = v13 * *v15 - v11 * v17;
    v20 = v11 * v16 - v12 * *v15;
    v21 = v20 * v8.f64[0] + v6 * v18 + v7 * v19;
    if (v21 > -0.0000001 && v21 < 0.0000001)
    {
      v22 = sqrt(v20 * v20 + v18 * v18 + v19 * v19);
      if (v22 <= -0.0000001 || v22 >= 0.0000001)
      {
        *(double *)(a1 + v2) = v6 + v18 / v22;
        v5->f64[1] = v7 + v19 / v22;
        v5[1] = vaddq_f64(v8, (float64x2_t)COERCE_UNSIGNED_INT64(v20 / v22));
      }
    }
    v3 += 0x100000000;
    v2 += 32;
    ++v4;
  }
  while (v2 != 96);
  v23 = PCMatrix44Tmpl<double>::determinant((double *)a1);
  if (v23 > -0.0000001 && v23 < 0.0000001)
  {
    *(_QWORD *)(a1 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a1 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a1 = 0x3FF0000000000000;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
  }
}

BOOL liSafeGetTransformation(__int128 *a1, uint64_t a2, double *a3)
{
  fixNullSpace((uint64_t)a1);
  return PCMatrix44Tmpl<double>::getTransformation(a1, a2, a3);
}

BOOL PCMatrix44Tmpl<double>::getTransformation(__int128 *a1, uint64_t a2, double *a3)
{
  _BOOL8 PartialTransformation;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  __double2 v17;
  double v18;
  double v21;
  __int128 v22;
  __int128 v23;
  double v24;
  __int128 v25;
  __int128 v26;
  double v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  v30 = 0x3FF0000000000000;
  v27 = 1.0;
  v24 = 1.0;
  v21 = 1.0;
  v22 = 0u;
  v23 = 0u;
  v25 = 0u;
  v26 = 0u;
  v28 = 0u;
  v29 = 0u;
  PartialTransformation = PCMatrix44Tmpl<double>::getPartialTransformation(a1, a2, (uint64_t)&v21);
  if (PartialTransformation)
  {
    v5 = v21;
    v6 = v24;
    v7 = v27;
    v8 = v21 + v24 + v27;
    v9 = acos((v8 + -1.0) * 0.5);
    v10 = *((double *)&v26 + 1) - *(double *)&v25;
    v11 = *((double *)&v22 + 1) - *(double *)&v26;
    v12 = *((double *)&v23 + 1) - *(double *)&v22;
    v13 = v10 * v10 + v11 * v11 + v12 * v12;
    if (v13 > -0.0000001 && v13 < 0.0000001)
    {
      if (v8 > 0.0)
      {
        *a3 = 1.0;
        a3[1] = 0.0;
        a3[2] = 0.0;
        a3[3] = 0.0;
        return PartialTransformation;
      }
      v14 = (v5 + 1.0) * 0.5;
      if (v14 < 0.0)
        v14 = 0.0;
      v10 = sqrt(v14);
      v15 = (v6 + 1.0) * 0.5;
      if (v15 < 0.0)
        v15 = 0.0;
      v11 = sqrt(v15);
      v16 = (v7 + 1.0) * 0.5;
      if (v16 < 0.0)
        v16 = 0.0;
      v12 = sqrt(v16);
      v13 = v12 * v12 + v11 * v11 + v10 * v10;
    }
    v17 = __sincos_stret(v9 * 0.5);
    v18 = sqrt(v13);
    if (v18 < 0.000000100000001 && v18 > -0.000000100000001)
      v18 = 1.0;
    *a3 = v17.__cosval;
    a3[1] = v17.__sinval * (v10 / v18);
    a3[2] = v17.__sinval * (v11 / v18);
    a3[3] = v17.__sinval * (v12 / v18);
  }
  return PartialTransformation;
}

uint64_t liTransformAndClip(double *a1, double *a2, uint64_t **a3)
{
  double v6;
  int v7;
  double v8;
  int v9;
  double v10;
  int v11;
  double v12;
  float64x2_t v14[2];
  __int128 v15;
  uint64_t v16;
  double v17;

  memset(v14, 0, sizeof(v14));
  v6 = -*a1;
  v16 = 0;
  v15 = 0x3FF0000000000000uLL;
  v17 = v6;
  PCMatrix44Tmpl<double>::transform_row<double>(a2, (double *)&v15, v14[0].f64);
  v7 = LiImagePolygon::clip(a3, v14, 0);
  v8 = *a1 + a1[2];
  v16 = 0;
  v15 = 0xBFF0000000000000;
  v17 = v8;
  PCMatrix44Tmpl<double>::transform_row<double>(a2, (double *)&v15, v14[0].f64);
  v9 = v7 | LiImagePolygon::clip(a3, v14, 0);
  v10 = -a1[1];
  v15 = xmmword_1B304EEE0;
  v16 = 0;
  v17 = v10;
  PCMatrix44Tmpl<double>::transform_row<double>(a2, (double *)&v15, v14[0].f64);
  v11 = LiImagePolygon::clip(a3, v14, 0);
  v12 = a1[1] + a1[3];
  v15 = xmmword_1B305A270;
  v16 = 0;
  v17 = v12;
  PCMatrix44Tmpl<double>::transform_row<double>(a2, (double *)&v15, v14[0].f64);
  return v9 | v11 | LiImagePolygon::clip(a3, v14, 0);
}

void PCAssertionException::~PCAssertionException(PCString *this)
{
  PCException::~PCException(this);
  JUMPOUT(0x1B5E29170);
}

void PCAssertionException::className(PCURL *a1@<X8>)
{
  PCURL::PCURL(a1, CFSTR("PCAssertionException"));
}

void std::vector<PCVector2<double>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<PCVector2<double>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<PCVector2<double>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *i;
  __int128 v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<HGGPUComputeDevice const>>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v17 = (char *)*a1;
    for (i = (char *)a1[1]; i != v17; i -= 16)
    {
      v19 = *((_OWORD *)i - 1);
      *((_OWORD *)v14 - 1) = v19;
      v14 -= 16;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_DWORD *LiChannelT<int>::append(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
  return v7 - 1;
}

uint64_t LiChannelT<PCVector3<double>>::append(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;

  v3 = a1[1];
  if (v3 >= a1[2])
  {
    v4 = std::vector<PCVector3<double>>::__push_back_slow_path<PCVector3<double> const&>(a1, a2);
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)a2;
    *(_QWORD *)(v3 + 16) = *(_QWORD *)(a2 + 16);
    v4 = v3 + 24;
  }
  a1[1] = v4;
  return v4 - 24;
}

uint64_t *removeDuplicatePoints<PCVector3<double>>(uint64_t *result, _QWORD **a2, _QWORD *a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v9;
  int v10;
  double v11;
  uint64_t v12;
  float64x2_t *v13;
  int v14;
  uint64_t v15;
  float64x2_t *v16;
  float64_t v17;
  float64x2_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *result;
  v5 = result[1];
  v6 = (unint64_t)(v5 - *result) >> 2;
  if ((int)v6 >= 1)
  {
    v9 = result;
    v10 = 0;
    v11 = a4 * a4;
    do
    {
      v12 = *(unsigned int *)(v4 + 4 * (v10 % (int)v6));
      if ((v12 & 0x80000000) != 0)
        v13 = (float64x2_t *)(*a3 + 24 * ~(_DWORD)v12);
      else
        v13 = (float64x2_t *)(**a2 + 32 * v12);
      v14 = (v10 + 1) % (int)v6;
      v15 = *(unsigned int *)(v4 + 4 * v14);
      if ((v15 & 0x80000000) != 0)
        v16 = (float64x2_t *)(*a3 + 24 * ~(_DWORD)v15);
      else
        v16 = (float64x2_t *)(**a2 + 32 * v15);
      v17 = v13[1].f64[0] - v16[1].f64[0];
      v18 = vsubq_f64(*v13, *v16);
      if (vaddvq_f64(vmulq_f64(v18, v18)) + v17 * v17 <= v11)
      {
        if ((int)v15 < 0)
          v14 = v10;
        v19 = v4 + 4 * v14;
        v20 = v5 - (v19 + 4);
        if (v5 != v19 + 4)
        {
          result = (uint64_t *)memmove((void *)(v4 + 4 * v14), (const void *)(v19 + 4), v5 - (v19 + 4));
          v4 = *v9;
        }
        v5 = v19 + v20;
        v9[1] = v19 + v20;
      }
      else
      {
        ++v10;
      }
      v6 = (unint64_t)(v5 - v4) >> 2;
    }
    while (v10 < (int)v6);
  }
  return result;
}

__n128 copy<LiChannelT<PCVector3<double>>,LiPolygon::PosFacet>(_QWORD *a1, uint64_t **a2)
{
  int v4;
  __n128 result;
  uint64_t i;
  __n128 *v7;
  __n128 *v8;

  v4 = -1431655765 * ((uint64_t)(a1[1] - *a1) >> 3);
  std::vector<LiPolygon::PosEdge>::resize(*a2, v4);
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      v7 = (__n128 *)(*a1 + 24 * i);
      v8 = (__n128 *)(**a2 + 32 * i);
      result = *v7;
      v8[1].n128_u64[0] = v7[1].n128_u64[0];
      *v8 = result;
    }
  }
  return result;
}

void copy<LiChannelT<int>,LiImagePolygon::EdgeFacet>(int **a1, uint64_t **a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;

  v4 = (char *)a1[1] - (char *)*a1;
  std::vector<LiPolygon::PosEdge>::resize(*a2, (int)(v4 >> 2));
  if ((int)((unint64_t)v4 >> 2) >= 1)
  {
    v5 = *a1;
    v6 = ((unint64_t)v4 >> 2);
    v7 = (_DWORD *)(**a2 + 24);
    do
    {
      v8 = *v5++;
      *v7 = v8;
      v7 += 8;
      --v6;
    }
    while (v6);
  }
}

void std::vector<PCVector3<double>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<PCVector3<double>>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 24 * a2;
  }
}

void std::vector<PCVector3<double>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<cc::point_t<double,false,false>>>(v4, v11);
    else
      v12 = 0;
    __p = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<PCVector3<double>>::__swap_out_circular_buffer(a1, &__p);
    if (v17 != v16)
      v17 = &v16[(v17 - v16 - 24) % 0x18uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1B2D0B1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LiPhysicsUtils::ApplyForce(uint64_t result, void *a2, uint64_t a3, float a4)
{
  double *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v12;
  double v13;
  double v14;
  uint64_t *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v29;
  unint64_t *v30;
  unint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  void *v36;
  double v37;
  double v38;
  double v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;

  v6 = (double *)result;
  if (*(_BYTE *)(result + 1))
  {
    v7 = *(double *)(result + 8);
    v8 = *(double *)(result + 16);
    v9 = *(double *)(result + 24);
    v10 = sqrt(v7 * v7 + v8 * v8 + v9 * v9);
    if (v10 < 0.000000100000001 && v10 > -0.000000100000001)
      v10 = 1.0;
    v12 = v7 / v10;
    v13 = v8 / v10;
    v14 = v9 / v10;
  }
  else
  {
    if (!*(_DWORD *)(result + 32))
      return result;
    *(_QWORD *)&v40 = *(unsigned int *)(result + 32);
    v15 = std::map<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>::at(a3, (unint64_t *)&v40);
    v16 = *v15;
    v17 = (std::__shared_weak_count *)v15[1];
    v44 = *v15;
    v45 = v17;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(p_shared_owners);
      while (__stxr(v19 + 1, p_shared_owners));
    }
    v20 = (void *)objc_msgSend(*(id *)(v16 + 440), "childNodesPassingTest:", &__block_literal_global_26);
    if (objc_msgSend(v20, "count"))
      v21 = (void *)objc_msgSend(v20, "firstObject");
    else
      v21 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v22 = (void *)objc_msgSend(a2, "presentationNode");
    if (v22)
    {
      objc_msgSend(v22, "worldTransform");
    }
    else
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
    }
    v23 = (void *)objc_msgSend(v21, "presentationNode", 0, 0, 0, 0, 0, 0);
    if (v23)
      objc_msgSend(v23, "worldTransform");
    v24 = (float)(0.0 - *(float *)&v43);
    v25 = (float)(0.0 - *((float *)&v43 + 1));
    v26 = (float)(0.0 - *((float *)&v43 + 2));
    v27 = sqrt(v24 * v24 + v25 * v25 + v26 * v26);
    if (v27 >= 0.000000100000001 || v27 <= -0.000000100000001)
      v29 = v27;
    else
      v29 = 1.0;
    if (v17)
    {
      v30 = (unint64_t *)&v17->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v12 = v24 / v29;
    v13 = v25 / v29;
    v14 = v26 / v29;
  }
  v32 = v6[5] * a4;
  v33 = v12 * v32;
  v34 = v13 * v32;
  v35 = v14 * v32;
  v36 = (void *)objc_msgSend(a2, "physicsBody");
  *(float *)&v37 = v33;
  *(float *)&v38 = v34;
  *(float *)&v39 = v35;
  return objc_msgSend(v36, "applyForce:impulse:", *(unsigned __int8 *)v6, v37, v38, v39);
}

void sub_1B2D0B59C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t LiPhysicsUtils::ConfigureScene(LiPhysicsUtils *this, Li3DEngineWorldData *a2, Li3DEngineScene *a3, SCNScene *a4, float a5)
{
  Li3DEngineScene *v5;
  float v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  SCNNode *v18;
  __int128 v19;
  __int128 v20;
  BOOL v21;
  Li3DEngineObjectData *v22;
  void *v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  float m12;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  float32x2_t v43;
  float v44;
  void *v45;
  double v46;
  double v47;
  double v48;
  float v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  void *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  double v70;
  int v71;
  double v72;
  double v73;
  int v74;
  __int128 v75;
  __int128 v76;
  double v77;
  double v78;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  double v85;
  float v86;
  float v87;
  float v88;
  void *v89;
  double v90;
  double v91;
  double v92;
  void *v93;
  double v94;
  double v95;
  double v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  char *v100;
  char *v101;
  BOOL v102;
  uint64_t v104;
  float *p_m23;
  float *p_m12;
  char *v107;
  Li3DEngineScene *v108;
  int v109;
  __int128 v110;
  __int128 v111;
  Li3DEngineScene *v112;
  char *v113;
  double v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[4];
  BOOL v121;
  _OWORD v122[4];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127[4];
  Li3DEngineObjectData *v128;
  std::__shared_weak_count *v129;
  _QWORD v130[5];
  id v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  id v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  double v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  Li3DEngineObjectData **v146;
  float v147;
  SCNMatrix4 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  double v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  double v159;
  float v160;
  float32x2_t v161;
  float v162;
  SCNMatrix4 a;
  uint64_t v164;
  uint64_t v165;
  SCNMatrix4 v166;
  SCNMatrix4 b;
  uint64_t v168;
  __int128 v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  SCNMatrix4 v174;
  uint64_t v175;

  v5 = a3;
  v175 = *MEMORY[0x1E0C80C00];
  v109 = (int)a4;
  if ((_DWORD)a4)
  {
    objc_msgSend((id)-[Li3DEngineScene physicsWorld](a3, "physicsWorld"), "performSelector:", NSSelectorFromString(CFSTR("_reset")));
    objc_msgSend((id)-[Li3DEngineScene physicsWorld](v5, "physicsWorld"), "setTimeStep:", 0.0166666667);
    objc_msgSend((id)Li3DEngineScene::sceneManager(a2), "resetSim");
    Li3DEngineScene::reset_NoLock((id *)a2);
  }
  v114 = a5;
  v8 = -(*((double *)this + 29) * a5);
  v9 = (void *)-[Li3DEngineScene physicsWorld](v5, "physicsWorld");
  LODWORD(v10) = 0;
  LODWORD(v11) = 0;
  *(float *)&v12 = v8;
  objc_msgSend(v9, "setGravity:", v10, v12, v11);
  v13 = (char *)*((_QWORD *)this + 26);
  v113 = (char *)this + 216;
  if (v13 != (char *)this + 216)
  {
    v107 = (char *)this + 208;
    v119 = *MEMORY[0x1E0CD5B48];
    p_m12 = &a.m12;
    p_m23 = &a.m23;
    v118 = *MEMORY[0x1E0CD5B60];
    v117 = *MEMORY[0x1E0CD5B50];
    v116 = *MEMORY[0x1E0CD5B40];
    v104 = 1065353216;
    v108 = a2;
    while (1)
    {
      v14 = *((_QWORD *)v13 + 5);
      v15 = (std::__shared_weak_count *)*((_QWORD *)v13 + 6);
      v128 = (Li3DEngineObjectData *)v14;
      v129 = v15;
      if (v15)
      {
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(p_shared_owners);
        while (__stxr(v17 + 1, p_shared_owners));
      }
      v18 = *(SCNNode **)(v14 + 440);
      v19 = *(_OWORD *)(v14 + 40);
      v127[0] = *(_OWORD *)(v14 + 24);
      v127[1] = v19;
      v20 = *(_OWORD *)(v14 + 72);
      v127[2] = *(_OWORD *)(v14 + 56);
      v127[3] = v20;
      v125 = 0u;
      v126 = 0u;
      v123 = 0u;
      v124 = 0u;
      trans((const Mat4f *)v127, (uint64_t)&v123);
      v122[0] = v123;
      v122[1] = v124;
      v122[2] = v125;
      v122[3] = v126;
      -[SCNNode setTransform:](v18, "setTransform:", v122);
      Li3DEngineScene::setNodeActiveState_NoLock(a2, v18, *((_BYTE *)v128 + 424) == 0, *((double *)v128 + 52));
      v21 = *((_DWORD *)v128 + 50) == 8;
      v120[0] = MEMORY[0x1E0C809B0];
      v120[1] = 3221225472;
      v120[2] = ___ZN14LiPhysicsUtils14ConfigureSceneEP19Li3DEngineWorldDataP15Li3DEngineSceneP8SCNScenefb_block_invoke;
      v120[3] = &__block_descriptor_33_e21_v24__0__SCNNode_8_B16l;
      v121 = v21;
      -[SCNNode enumerateChildNodesUsingBlock:](v18, "enumerateChildNodesUsingBlock:", v120);
      v22 = v128;
      v23 = (void *)*((_QWORD *)v128 + 55);
      if (!v23)
        goto LABEL_84;
      if (v109)
      {
        objc_msgSend(*((id *)v128 + 55), "setPhysicsBody:", 0);
        objc_msgSend(v23, "setPhysicsField:", 0);
        v24 = (void *)objc_msgSend(v23, "presentationNode");
        memset(&v148, 0, sizeof(v148));
        if (v24)
          objc_msgSend(v24, "transform");
        v174 = v148;
        objc_msgSend(v23, "setTransform:", &v174, v104, p_m23, p_m12);
        v25 = *(_OWORD *)((char *)v128 + 24);
        v26 = *(_OWORD *)((char *)v128 + 40);
        v27 = *(_OWORD *)((char *)v128 + 72);
        *(_OWORD *)&a.m31 = *(_OWORD *)((char *)v128 + 56);
        *(_OWORD *)&a.m41 = v27;
        *(_OWORD *)&a.m11 = v25;
        *(_OWORD *)&a.m21 = v26;
        memset(&b, 0, sizeof(b));
        trans((const Mat4f *)&a, (uint64_t)&b);
        v166 = b;
        objc_msgSend(v23, "setTransform:", &v166);
        v22 = v128;
      }
      *(_QWORD *)&v28 = Li3DEngineObjectData::physicsParams(v22, (uint64_t)&v148).n128_u64[0];
      m12 = v148.m12;
      v30 = *((_BYTE *)v128 + 424) ? 0 : LODWORD(v148.m11);
      v31 = v30 == 3 ? 2 : v30 == 2;
      if ((v32 = objc_msgSend(v23, "physicsBody", v28, v104, p_m23, p_m12), v30) && !v32
        || objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "type") != v31)
      {
        if (LODWORD(m12) != 3)
          break;
      }
LABEL_34:
      if (m12 == 0.0 || !v30)
      {
        if (m12 == 0.0 && objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "physicsShape"))
          objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "setPhysicsShape:", 0);
      }
      else if (!objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "physicsShape"))
      {
        switch(LODWORD(m12))
        {
          case 1:
            v169 = 0uLL;
            v168 = 0;
            v170 = 4;
            v171 = 0;
            v172 = 0;
            v173 = 0;
            PCMatrix44Tmpl<float>::getTransformation(v127, (uint64_t)&v168);
            objc_msgSend(v23, "getBoundingBoxMin:max:", &v161, &v159);
            objc_msgSend(v23, "scale");
            v161.f32[0] = v49 * v161.f32[0];
            v161.f32[1] = v50 * v161.f32[1];
            v162 = v51 * v162;
            *(float *)&v159 = v49 * *(float *)&v159;
            *((float *)&v159 + 1) = v50 * *((float *)&v159 + 1);
            v160 = v51 * v160;
            v52 = objc_msgSend(MEMORY[0x1E0CD5958], "boxWithWidth:height:length:chamferRadius:", vabds_f32(*(float *)&v159, v161.f32[0]), vabds_f32(*((float *)&v159 + 1), v161.f32[1]), vabds_f32(v160, v162), 0.0);
            v53 = objc_msgSend(MEMORY[0x1E0CD59F0], "shapeWithGeometry:options:", v52, 0);
            v54 = (float)(v160 + v162) * 0.5;
            *(_QWORD *)p_m12 = 0;
            *((_QWORD *)p_m12 + 1) = 0;
            a.m11 = 1.0;
            a.m22 = 1.0;
            *(_QWORD *)p_m23 = 0;
            *((_QWORD *)p_m23 + 1) = 0;
            *(_QWORD *)&a.m33 = v104;
            *(float32x2_t *)&a.m41 = vmul_f32(vadd_f32(*(float32x2_t *)&v159, v161), (float32x2_t)0x3F0000003F000000);
            a.m43 = v54;
            a.m44 = 1.0;
            v55 = *MEMORY[0x1E0CD5B28];
            v56 = *(_OWORD *)(MEMORY[0x1E0CD5B28] + 16);
            v57 = *(_OWORD *)(MEMORY[0x1E0CD5B28] + 48);
            *(_OWORD *)&b.m31 = *(_OWORD *)(MEMORY[0x1E0CD5B28] + 32);
            *(_OWORD *)&b.m41 = v57;
            *(_OWORD *)&b.m11 = v55;
            *(_OWORD *)&b.m21 = v56;
            SCNMatrix4Mult(&v174, &a, &b);
            v166 = v174;
            v58 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", &v166);
            v59 = (void *)MEMORY[0x1E0CD59F0];
            v165 = v53;
            v60 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v165, 1);
            v164 = v58;
            objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "setPhysicsShape:", objc_msgSend(v59, "shapeWithShapes:transforms:", v60, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v164, 1)));
            break;
          case 3:
            v61 = (void *)objc_msgSend(v23, "childNodesPassingTest:", &__block_literal_global_67);
            memset(&a, 0, sizeof(a));
            v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &a, &v174, 16);
            v112 = v5;
            if (v62)
            {
              v63 = **(_QWORD **)&a.m21;
              do
              {
                for (i = 0; i != v62; ++i)
                {
                  if (**(_QWORD **)&a.m21 != v63)
                    objc_enumerationMutation(v61);
                  v65 = *(void **)(*(_QWORD *)&a.m13 + 8 * i);
                  if (!objc_msgSend(v65, "physicsBody"))
                  {
                    objc_msgSend((id)objc_msgSend(v65, "parentNode"), "scale");
                    v66 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNVector3:");
                    v67 = (void *)MEMORY[0x1E0CD59F0];
                    v68 = objc_msgSend(v65, "geometry");
                    *(_QWORD *)&v166.m11 = v119;
                    *(_QWORD *)&v166.m13 = v118;
                    *(_QWORD *)&b.m11 = v66;
                    *(_QWORD *)&b.m13 = v117;
                    *(_QWORD *)&v166.m21 = v116;
                    *(_QWORD *)&b.m21 = &unk_1E6649388;
                    v168 = objc_msgSend(v67, "shapeWithGeometry:options:", v68, objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:count:", &b, &v166, 3));
                    objc_msgSend(v65, "setPhysicsBody:", objc_msgSend(MEMORY[0x1E0CD59D8], "bodyWithType:shape:", 0, objc_msgSend(MEMORY[0x1E0CD59F0], "shapeWithShapes:transforms:", objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v168, 1), 0)));
                  }
                }
                v62 = objc_msgSend(v61, "countByEnumeratingWithState:objects:count:", &a, &v174, 16);
              }
              while (v62);
            }
            v5 = v112;
            break;
          case 2:
            v169 = 0uLL;
            v168 = 0;
            v170 = 4;
            v171 = 0;
            v172 = 0;
            v173 = 0;
            PCMatrix44Tmpl<float>::getTransformation(v127, (uint64_t)&v168);
            v159 = 1.0;
            objc_msgSend(v23, "getBoundingSphereCenter:radius:", &v161, &v159);
            v161 = vmul_f32(v161, *(float32x2_t *)((char *)&v169 + 4));
            v162 = v162 * *((float *)&v169 + 3);
            v159 = v159 * *((float *)&v169 + 3);
            v35 = objc_msgSend(MEMORY[0x1E0CD5A28], "sphereWithRadius:");
            v36 = objc_msgSend(MEMORY[0x1E0CD59F0], "shapeWithGeometry:options:", v35, 0);
            v37 = v162;
            *(_QWORD *)p_m12 = 0;
            *((_QWORD *)p_m12 + 1) = 0;
            a.m11 = 1.0;
            a.m22 = 1.0;
            *(_QWORD *)p_m23 = 0;
            *((_QWORD *)p_m23 + 1) = 0;
            *(_QWORD *)&a.m33 = v104;
            *(float32x2_t *)&a.m41 = v161;
            a.m43 = v37;
            a.m44 = 1.0;
            v38 = *(_OWORD *)(MEMORY[0x1E0CD5B28] + 48);
            *(_OWORD *)&b.m31 = *(_OWORD *)(MEMORY[0x1E0CD5B28] + 32);
            *(_OWORD *)&b.m41 = v38;
            v39 = *(_OWORD *)(MEMORY[0x1E0CD5B28] + 16);
            *(_OWORD *)&b.m11 = *MEMORY[0x1E0CD5B28];
            *(_OWORD *)&b.m21 = v39;
            SCNMatrix4Mult(&v174, &a, &b);
            v166 = v174;
            v40 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNMatrix4:", &v166);
            v41 = (void *)MEMORY[0x1E0CD59F0];
            v165 = v36;
            v42 = objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v165, 1);
            v164 = v40;
            objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "setPhysicsShape:", objc_msgSend(v41, "shapeWithShapes:transforms:", v42, objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v164, 1)));
            v43 = v161;
            v44 = v162;
            v45 = (void *)objc_msgSend(v23, "physicsBody");
            LODWORD(v47) = v43.i32[1];
            LODWORD(v46) = v43.i32[0];
            *(float *)&v48 = v44;
            objc_msgSend(v45, "setCenterOfMassOffset:", v46, v47, v48);
            objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "setContinuousCollisionDetectionThreshold:", v159 + v159);
            break;
        }
      }
      objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "setMass:", *(double *)&v156);
      objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "setFriction:", *(double *)&v157);
      objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "setRestitution:", *((double *)&v156 + 1));
      objc_msgSend((id)objc_msgSend(v23, "physicsBody"), "setCharge:", *((double *)&v157 + 1) * v114);
      v130[0] = MEMORY[0x1E0C809B0];
      v130[1] = 3321888768;
      v130[2] = ___ZL16ConfigurePhysicsRKNSt3__110shared_ptrI20Li3DEngineObjectDataEEPNS_3mapIyS2_NS_4lessIyEENS_9allocatorINS_4pairIKyS2_EEEEEERK14PCMatrix44TmplIfEP15Li3DEngineScenefb_block_invoke;
      v130[3] = &__block_descriptor_252_e8_32c36_ZTSK29Li3DEngineObjectPhysicsParams_e21_v24__0__SCNNode_8_B16l;
      v130[4] = *(_QWORD *)&v148.m11;
      LOWORD(v131) = LOWORD(v148.m13);
      v132 = *(_OWORD *)&v148.m21;
      v133 = *(_QWORD *)&v148.m31;
      v134 = *(_OWORD *)&v148.m33;
      v135 = *(id *)&v148.m43;
      ProCore_Impl::PCNSRefImpl::retain(&v135);
      v136 = v149;
      v137 = v150;
      v138 = v151;
      v139 = v152;
      v140 = v153;
      v141 = v154;
      v142 = v155;
      v145 = v158;
      v143 = v156;
      v144 = v157;
      v147 = a5;
      v146 = &v128;
      objc_msgSend(v23, "enumerateChildNodesUsingBlock:", v130);
      a2 = v108;
      v69 = (void *)Li3DEngineScene::sceneManager(v108);
      *(float *)&v70 = a5;
      objc_msgSend(v69, "applyForce:node:arScale:objects:", &v148.m13, v23, v107, v70);
      v71 = v149;
      v72 = *((double *)&v149 + 1);
      v73 = *(double *)&v150;
      v74 = BYTE8(v150);
      v75 = v151;
      v110 = v152;
      v76 = v154;
      v77 = v155;
      v111 = v153;
      v78 = sqrt(*((double *)&v153 + 1) * *((double *)&v153 + 1)+ *(double *)&v154 * *(double *)&v154+ *((double *)&v154 + 1) * *((double *)&v154 + 1));
      if (v78 >= 0.000000100000001 || v78 <= -0.000000100000001)
        v80 = v78;
      else
        v80 = 1.0;
      v81 = objc_msgSend(v23, "physicsField");
      if (v71 == -1)
      {
        if (v81)
        {
LABEL_66:
          v83 = 0;
LABEL_75:
          objc_msgSend(v23, "setPhysicsField:", v83);
        }
      }
      else if (!v81)
      {
        switch(v71)
        {
          case 0:
            v82 = objc_msgSend(MEMORY[0x1E0CD59E8], "dragField");
            break;
          case 1:
            v82 = objc_msgSend(MEMORY[0x1E0CD59E8], "vortexField");
            break;
          case 2:
            v82 = objc_msgSend(MEMORY[0x1E0CD59E8], "radialGravityField");
            break;
          case 3:
            v82 = objc_msgSend(MEMORY[0x1E0CD59E8], "linearGravityField");
            break;
          case 4:
            v82 = objc_msgSend(MEMORY[0x1E0CD59E8], "noiseFieldWithSmoothness:animationSpeed:", v75);
            break;
          case 5:
            v82 = objc_msgSend(MEMORY[0x1E0CD59E8], "turbulenceFieldWithSmoothness:animationSpeed:", v75);
            break;
          case 6:
            v82 = objc_msgSend(MEMORY[0x1E0CD59E8], "electricField");
            break;
          case 7:
            v82 = objc_msgSend(MEMORY[0x1E0CD59E8], "magneticField");
            break;
          default:
            goto LABEL_66;
        }
        v83 = v82;
        goto LABEL_75;
      }
      if (objc_msgSend(v23, "physicsField"))
      {
        objc_msgSend((id)objc_msgSend(v23, "physicsField"), "setFalloffExponent:", v73);
        v84 = (void *)objc_msgSend(v23, "physicsField");
        v85 = a5;
        if ((v71 & 0xFFFFFFFA) != 2)
          v85 = 1.0;
        objc_msgSend(v84, "setStrength:", v72 * v85);
        objc_msgSend((id)objc_msgSend(v23, "physicsField"), "setMinimumDistance:", v77);
        if (v74)
        {
          v86 = 3.4028e38;
          v87 = 3.4028e38;
          v88 = 3.4028e38;
        }
        else
        {
          v86 = *(double *)&v110 * v114;
          v87 = *((double *)&v110 + 1) * v114;
          v88 = *(double *)&v111 * v114;
        }
        v89 = (void *)objc_msgSend(v23, "physicsField");
        *(float *)&v90 = v86;
        *(float *)&v91 = v87;
        *(float *)&v92 = v88;
        objc_msgSend(v89, "setHalfExtent:", v90, v91, v92);
        v93 = (void *)objc_msgSend(v23, "physicsField");
        v94 = *((double *)&v76 + 1) / v80;
        *(float *)&v95 = *((double *)&v76 + 1) / v80;
        *(float *)&v94 = *(double *)&v76 / v80;
        v96 = *((double *)&v111 + 1) / v80;
        *(float *)&v96 = *((double *)&v111 + 1) / v80;
        objc_msgSend(v93, "setDirection:", v96, v94, v95);
      }
      Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams(&v131);
      Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams((id *)&v148.m13);
LABEL_84:
      v97 = v129;
      if (v129)
      {
        v98 = (unint64_t *)&v129->__shared_owners_;
        do
          v99 = __ldaxr(v98);
        while (__stlxr(v99 - 1, v98));
        if (!v99)
        {
          ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
          std::__shared_weak_count::__release_weak(v97);
        }
      }
      v100 = (char *)*((_QWORD *)v13 + 1);
      if (v100)
      {
        do
        {
          v101 = v100;
          v100 = *(char **)v100;
        }
        while (v100);
      }
      else
      {
        do
        {
          v101 = (char *)*((_QWORD *)v13 + 2);
          v102 = *(_QWORD *)v101 == (_QWORD)v13;
          v13 = v101;
        }
        while (!v102);
      }
      v13 = v101;
      if (v101 == v113)
        return objc_msgSend((id)-[Li3DEngineScene physicsWorld](v5, "physicsWorld", v104, p_m23, p_m12), "updateCollisionPairs");
    }
    switch(v30)
    {
      case 1:
        v33 = objc_msgSend(MEMORY[0x1E0CD59D8], "staticBody");
        break;
      case 3:
        v33 = objc_msgSend(MEMORY[0x1E0CD59D8], "kinematicBody");
        break;
      case 2:
        v33 = objc_msgSend(MEMORY[0x1E0CD59D8], "dynamicBody");
        break;
      default:
        if ((v109 & 1) != 0 || objc_msgSend(v23, "physicsBody"))
        {
          objc_msgSend(v23, "setPhysicsBody:", 0);
          v34 = 0;
        }
        else
        {
          v34 = 0;
        }
        goto LABEL_33;
    }
    v34 = v33;
LABEL_33:
    objc_msgSend(v23, "setPhysicsBody:", v34);
    goto LABEL_34;
  }
  return objc_msgSend((id)-[Li3DEngineScene physicsWorld](v5, "physicsWorld", v104, p_m23, p_m12), "updateCollisionPairs");
}

void sub_1B2D0C3DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___ZN14LiPhysicsUtils14ConfigureSceneEP19Li3DEngineWorldDataP15Li3DEngineSceneP8SCNScenefb_block_invoke(uint64_t a1, void *a2)
{
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend(a2, "geometry");
  if (result)
  {
    v11 = 0u;
    v12 = 0u;
    v9 = 0u;
    v10 = 0u;
    v5 = (void *)objc_msgSend((id)objc_msgSend(a2, "geometry", 0), "materials");
    result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    if (result)
    {
      v6 = result;
      v7 = *(_QWORD *)v10;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v10 != v7)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v8++), "setBlendMode:", *(unsigned __int8 *)(a1 + 32));
        }
        while (v6 != v8);
        result = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
        v6 = result;
      }
      while (result);
    }
  }
  return result;
}

_QWORD *std::map<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>::at(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = v2[4];
      if (v3 >= v4)
        break;
      v2 = (_QWORD *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (_QWORD *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

__n128 Li3DEngineObjectData::physicsParams@<Q0>(Li3DEngineObjectData *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v3 = (char *)this + 208;
  *(_QWORD *)a2 = *((_QWORD *)this + 26);
  *(_WORD *)(a2 + 8) = *((_WORD *)this + 108);
  *(_OWORD *)(a2 + 16) = *((_OWORD *)this + 14);
  *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 30);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)this + 248);
  *(_QWORD *)(a2 + 56) = *((_QWORD *)this + 33);
  ProCore_Impl::PCNSRefImpl::retain((id *)(a2 + 56));
  v4 = *((_OWORD *)v3 + 5);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)v3 + 4);
  *(_OWORD *)(a2 + 80) = v4;
  v5 = *((_OWORD *)v3 + 7);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)v3 + 6);
  *(_OWORD *)(a2 + 112) = v5;
  v6 = *((_OWORD *)v3 + 9);
  *(_OWORD *)(a2 + 128) = *((_OWORD *)v3 + 8);
  *(_OWORD *)(a2 + 144) = v6;
  *(_QWORD *)(a2 + 160) = *((_QWORD *)v3 + 20);
  *(_QWORD *)(a2 + 200) = *((_QWORD *)v3 + 25);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(v3 + 184);
  result = *(__n128 *)(v3 + 168);
  *(__n128 *)(a2 + 168) = result;
  return result;
}

uint64_t ___ZL16ConfigurePhysicsRKNSt3__110shared_ptrI20Li3DEngineObjectDataEEPNS_3mapIyS2_NS_4lessIyEENS_9allocatorINS_4pairIKyS2_EEEEEERK14PCMatrix44TmplIfEP15Li3DEngineScenefb_block_invoke(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  SCNParticleSystem *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = (void *)objc_msgSend(a2, "particleSystems", 0);
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v12;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v12 != v6)
          objc_enumerationMutation(v3);
        v8 = *(SCNParticleSystem **)(*((_QWORD *)&v11 + 1) + 8 * v7);
        -[SCNParticleSystem setParticleCharge:](v8, "setParticleCharge:", *(double *)(a1 + 224) * *(float *)(a1 + 248));
        -[SCNParticleSystem setParticleChargeVariation:](v8, "setParticleChargeVariation:", *(double *)(a1 + 232) * *(float *)(a1 + 248));
        v9 = Li3DEngineScene::particleParameters(*(Li3DEngineScene **)(**(_QWORD **)(a1 + 240) + 8), v8);
        if (v9)
        {
          v10 = v9;
          -[SCNParticleSystem setParticleVelocity:](v8, "setParticleVelocity:", *(double *)(v9 + 8) * *(float *)(a1 + 248));
          -[SCNParticleSystem setParticleVelocityVariation:](v8, "setParticleVelocityVariation:", *(double *)(v10 + 16) * *(float *)(a1 + 248));
        }
        ++v7;
      }
      while (v5 != v7);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

__n128 __copy_helper_block_e8_32c36_ZTSK29Li3DEngineObjectPhysicsParams(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v3 = a1 + 88;
  ProCore_Impl::PCNSRefImpl::retain((id *)(a1 + 88));
  v4 = *(_OWORD *)(a2 + 96);
  v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v3 + 24) = v5;
  *(_OWORD *)(v3 + 8) = v4;
  *(_OWORD *)(v3 + 56) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v3 + 72) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(a2 + 176);
  *(_QWORD *)(v3 + 104) = *(_QWORD *)(a2 + 192);
  result = *(__n128 *)(a2 + 200);
  v7 = *(_OWORD *)(a2 + 216);
  *(_QWORD *)(v3 + 144) = *(_QWORD *)(a2 + 232);
  *(__n128 *)(v3 + 112) = result;
  *(_OWORD *)(v3 + 128) = v7;
  return result;
}

void __destroy_helper_block_e8_32c36_ZTSK29Li3DEngineObjectPhysicsParams(uint64_t a1)
{
  Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams((id *)(a1 + 40));
}

BOOL PCMatrix44Tmpl<float>::getTransformation(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 PartialTransformation;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  int v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  int v55;

  v55 = 1065353216;
  v52 = 1.0;
  v49 = 1.0;
  v46 = 1065353216;
  v48 = 0;
  v47 = 0;
  v50 = 0;
  v51 = 0;
  v54 = 0;
  v53 = 0;
  PartialTransformation = PCMatrix44Tmpl<float>::getPartialTransformation(a1, a2, (float32x4_t *)&v46);
  if (PartialTransformation)
  {
    switch(*(_DWORD *)(a2 + 24))
    {
      case 0:
        v11 = asin((float)-*(float *)&v51);
        *(float *)(a2 + 32) = v11;
        v12 = cos(v11);
        if (v12 > -0.00001 && v12 < 0.00001)
        {
          v13 = v49;
          v14 = -*(float *)&v50;
          goto LABEL_24;
        }
        v32 = atan2(*((float *)&v51 + 1), v52);
        *(float *)(a2 + 28) = v32;
        v33 = *((float *)&v48 + 1);
        v34 = *(float *)&v46;
        goto LABEL_34;
      case 1:
        v15 = asin(*((float *)&v48 + 1));
        *(float *)(a2 + 36) = v15;
        v16 = cos(v15);
        if (v16 > -0.00001 && v16 < 0.00001)
        {
          v17 = *((float *)&v51 + 1);
          v18 = v52;
          goto LABEL_16;
        }
        v35 = atan2((float)-*(float *)&v50, v49);
        *(float *)(a2 + 28) = v35;
        v36 = *(float *)&v46;
        v37 = -*(float *)&v51;
        goto LABEL_30;
      case 2:
        v19 = asin(*((float *)&v51 + 1));
        *(float *)(a2 + 28) = v19;
        v20 = cos(v19);
        if (v20 > -0.00001 && v20 < 0.00001)
        {
          v21 = *((float *)&v47 + 1);
          v22 = *(float *)&v46;
          goto LABEL_20;
        }
        v38 = atan2((float)-*(float *)&v51, v52);
        *(float *)(a2 + 32) = v38;
        v39 = *(float *)&v47;
        v34 = v49;
        goto LABEL_33;
      case 3:
        v23 = asin((float)-*(float *)&v47);
        *(float *)(a2 + 36) = v23;
        v24 = cos(v23);
        if (v24 <= -0.00001 || v24 >= 0.00001)
        {
          v40 = atan2(*((float *)&v51 + 1), v49);
          *(float *)(a2 + 28) = v40;
          v37 = *((float *)&v47 + 1);
          v36 = *(float *)&v46;
LABEL_30:
          v41 = atan2(v37, v36);
          *(float *)(a2 + 32) = v41;
        }
        else
        {
          v18 = v52;
          v17 = -*(float *)&v50;
LABEL_16:
          v25 = atan2(v17, v18);
          *(float *)(a2 + 28) = v25;
          *(_DWORD *)(a2 + 32) = 0;
        }
        return PartialTransformation;
      case 4:
        v26 = asin((float)-*(float *)&v50);
        *(float *)(a2 + 28) = v26;
        v27 = cos(v26);
        if (v27 <= -0.00001 || v27 >= 0.00001)
        {
          v42 = atan2(*((float *)&v47 + 1), v52);
          *(float *)(a2 + 32) = v42;
          v33 = *((float *)&v48 + 1);
          v34 = v49;
          goto LABEL_34;
        }
        v22 = *(float *)&v46;
        v21 = -*(float *)&v51;
LABEL_20:
        v28 = atan2(v21, v22);
        *(float *)(a2 + 32) = v28;
        goto LABEL_25;
      case 5:
        v29 = asin(*((float *)&v47 + 1));
        *(float *)(a2 + 32) = v29;
        v30 = cos(v29);
        if (v30 <= -0.00001 || v30 >= 0.00001)
        {
          v43 = atan2((float)-*(float *)&v50, v52);
          *(float *)(a2 + 28) = v43;
          v34 = *(float *)&v46;
          v39 = *(float *)&v47;
LABEL_33:
          v33 = -v39;
LABEL_34:
          v44 = atan2(v33, v34);
          *(float *)(a2 + 36) = v44;
        }
        else
        {
          v14 = *((float *)&v51 + 1);
          v13 = v49;
LABEL_24:
          v31 = atan2(v14, v13);
          *(float *)(a2 + 28) = v31;
LABEL_25:
          *(_DWORD *)(a2 + 36) = 0;
        }
        break;
      default:
        PCPrint("File %s, line %d should not have been reached:\n\t", v3, v4, v5, v6, v7, v8, v9, (char)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMatrix44.h");
        pcAbortImpl();
    }
  }
  return PartialTransformation;
}

BOOL PCMatrix44Tmpl<float>::getPartialTransformation(__int128 *a1, uint64_t a2, float32x4_t *a3)
{
  __int128 v3;
  __int128 v4;
  _BOOL8 v5;
  uint64_t v9;
  __int128 *v10;
  uint64_t i;
  uint64_t v12;
  float32x4_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  float v25;
  float32x4_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float32_t v34;
  float32_t v35;
  float32_t v36;
  float32x4_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float32_t v54;
  float32_t v55;
  float32_t v56;
  float32x4_t v57;
  int32x2_t v58;
  float32x2_t v59;
  int32x2_t v60;
  float32x2_t v61;
  uint64_t v62;
  float *v63;
  uint64_t v64;
  unint64_t v65;
  float v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

  v3 = a1[1];
  v85 = *a1;
  v86 = v3;
  v4 = a1[3];
  v87 = a1[2];
  v88 = v4;
  if (*((float *)&v4 + 3) == 0.0)
    return 0;
  v9 = 0;
  v10 = &v85;
  do
  {
    for (i = 0; i != 16; i += 4)
      *(float *)((char *)v10 + i) = *(float *)((char *)v10 + i) / *((float *)&v88 + 3);
    ++v9;
    ++v10;
  }
  while (v9 != 4);
  v12 = 0;
  HIDWORD(v84) = 1065353216;
  v81 = 0;
  v82 = 1065353216;
  v79 = 1065353216;
  v75 = 1065353216;
  v76 = 1.0;
  v78 = 0;
  v77 = 0;
  v80 = 0;
  v72 = 1065353216;
  v69 = 1065353216;
  v66 = 1.0;
  v68 = 0;
  v67 = 0;
  v70 = 0;
  v71 = 0;
  v74 = 0;
  v73 = 0;
  v64 = 0;
  v65 = 0;
  do
  {
    *(_OWORD *)((char *)&v76 + v12) = *(__int128 *)((char *)&v85 + v12);
    v12 += 16;
  }
  while (v12 != 64);
  v83 = 0;
  v84 = 0x3F80000000000000;
  v13.f32[0] = PCMatrix44Tmpl<float>::determinant(&v76);
  v5 = v13.f32[0] != 0.0;
  if (v13.f32[0] != 0.0)
  {
    v14 = v88;
    v15 = DWORD2(v88);
    if (*(float *)&v88 != 0.0 || *((float *)&v88 + 1) != 0.0 || *((float *)&v88 + 2) != 0.0)
    {
      v16 = 0;
      v17 = HIDWORD(v88);
      do
      {
        *(_OWORD *)((char *)&v66 + v16) = *(_OWORD *)((char *)&v76 + v16);
        v16 += 16;
      }
      while (v16 != 64);
      PCMatrix44Tmpl<float>::invert(&v66, &v66, 0.0);
      v19 = HIDWORD(v67);
      v18 = v67;
      v20 = v68;
      v21 = HIDWORD(v71);
      v67 = __PAIR64__(v71, HIDWORD(v68));
      v68 = __PAIR64__(v18, HIDWORD(v73));
      v22 = v73;
      v23 = HIDWORD(v70);
      v71 = __PAIR64__(v70, v19);
      v70 = __PAIR64__(v74, v21);
      v73 = __PAIR64__(v20, HIDWORD(v74));
      v74 = __PAIR64__(v22, v23);
      v64 = v14;
      v65 = __PAIR64__(v17, v15);
      PCMatrix44Tmpl<float>::transform<float>(&v66, (float *)&v64, (float *)&v64);
    }
    v24 = HIDWORD(v86);
    *(_DWORD *)a2 = HIDWORD(v85);
    *(_DWORD *)(a2 + 4) = v24;
    *(_DWORD *)(a2 + 8) = HIDWORD(v87);
    a3->i64[0] = v85;
    a3->i32[2] = DWORD2(v85);
    v25 = a3->f32[3];
    v13.f32[0] = (float)((float)(a3->f32[0] * a3->f32[0]) + (float)(a3->f32[1] * a3->f32[1]))
               + (float)(a3->f32[2] * a3->f32[2]);
    a3[1].i32[2] = DWORD2(v86);
    a3[1].i64[0] = v86;
    a3[2].i32[2] = DWORD2(v87);
    a3[2].i64[0] = v87;
    *(float *)(a2 + 12) = sqrtf(v13.f32[0] + (float)(v25 * v25));
    v13.i32[0] = 1.0;
    v26 = PCVector4<float>::scale(a3, v13);
    v27 = a3->f32[1];
    v28 = a3[1].f32[1];
    v29 = a3[1].f32[2];
    v30 = a3->f32[2];
    v31 = a3->f32[3];
    v32 = a3[1].f32[3];
    v33 = (float)((float)((float)(a3->f32[0] * a3[1].f32[0]) + (float)(v27 * v28)) + (float)(v30 * v29))
        + (float)(v31 * v32);
    v26.f32[0] = a3[1].f32[0] - (float)(a3->f32[0] * v33);
    v34 = v28 - (float)(v27 * v33);
    v35 = v29 - (float)(v30 * v33);
    v36 = v32 - (float)(v31 * v33);
    a3[1].i32[0] = v26.i32[0];
    a3[1].f32[1] = v34;
    a3[1].f32[2] = v35;
    a3[1].f32[3] = v36;
    *(float *)(a2 + 16) = sqrtf((float)(v36 * v36)+ (float)((float)(v35 * v35) + (float)((float)(v26.f32[0] * v26.f32[0]) + (float)(v34 * v34))));
    v26.i32[0] = 1.0;
    v37 = PCVector4<float>::scale(a3 + 1, v26);
    v37.i32[0] = a3[2].i32[0];
    v38 = a3->f32[0];
    v39 = a3->f32[1];
    v40 = a3[2].f32[1];
    v41 = a3[2].f32[2];
    v42 = a3->f32[2];
    v43 = a3->f32[3];
    v44 = a3[2].f32[3];
    v45 = (float)((float)((float)(a3->f32[0] * v37.f32[0]) + (float)(v39 * v40)) + (float)(v42 * v41))
        + (float)(v43 * v44);
    *(float *)(a2 + 40) = v45;
    v37.f32[0] = v37.f32[0] - (float)(v38 * v45);
    v46 = v40 - (float)(v39 * v45);
    v47 = v41 - (float)(v42 * v45);
    v48 = v44 - (float)(v43 * v45);
    v49 = a3[1].f32[0];
    v50 = a3[1].f32[1];
    v51 = a3[1].f32[2];
    v52 = a3[1].f32[3];
    v53 = (float)((float)((float)(v37.f32[0] * v49) + (float)(v50 * v46)) + (float)(v51 * v47)) + (float)(v52 * v48);
    *(float *)(a2 + 44) = v53;
    v37.f32[0] = v37.f32[0] - (float)(v49 * v53);
    v54 = v46 - (float)(v50 * v53);
    v55 = v47 - (float)(v51 * v53);
    v56 = v48 - (float)(v52 * v53);
    a3[2].i32[0] = v37.i32[0];
    a3[2].f32[1] = v54;
    a3[2].f32[2] = v55;
    a3[2].f32[3] = v56;
    *(float *)(a2 + 20) = sqrtf((float)(v56 * v56)+ (float)((float)(v55 * v55) + (float)((float)(v37.f32[0] * v37.f32[0]) + (float)(v54 * v54))));
    v37.i32[0] = 1.0;
    v57 = PCVector4<float>::scale(a3 + 2, v37);
    v57.i32[0] = *(_DWORD *)(a2 + 20);
    *(float32x2_t *)(a2 + 40) = vdiv_f32(*(float32x2_t *)(a2 + 40), (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.f32, 0));
    v58 = *(int32x2_t *)&a3[2].i32[1];
    v59.i32[0] = vdup_lane_s32(v58, 1).u32[0];
    v60 = *(int32x2_t *)&a3[1].i32[1];
    v59.i32[1] = a3[2].i32[0];
    v61.i32[0] = vdup_lane_s32(v60, 1).u32[0];
    v61.i32[1] = a3[1].i32[0];
    if ((float)((float)(vaddv_f32(vmul_f32(vsub_f32(vmul_f32((float32x2_t)v60, v59), vmul_f32((float32x2_t)v58, v61)), *(float32x2_t *)a3->f32))+ (float)((float)((float)(v61.f32[1] * *(float *)v58.i32)- (float)(v59.f32[1] * *(float *)v60.i32))* a3->f32[2]))+ (float)(a3->f32[3] * 0.0)) < 0.0)
    {
      v62 = 0;
      *(float32x2_t *)(a2 + 12) = vneg_f32(*(float32x2_t *)(a2 + 12));
      *(float *)(a2 + 20) = -v57.f32[0];
      do
      {
        v63 = &a3->f32[v62];
        *v63 = -a3->f32[v62];
        v63[4] = -a3[1].f32[v62];
        v63[8] = -a3[2].f32[v62++];
      }
      while (v62 != 3);
    }
  }
  return v5;
}

float PCMatrix44Tmpl<float>::determinant(float *a1)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v2 = a1[14];
  v1 = a1[15];
  v3 = a1[10];
  v4 = a1[11];
  v5 = (float)(v3 * v1) - (float)(v2 * v4);
  v7 = a1[8];
  v6 = a1[9];
  v9 = a1[12];
  v8 = a1[13];
  v10 = (float)(v1 * v6) - (float)(v4 * v8);
  v11 = (float)(v2 * v6) - (float)(v3 * v8);
  v12 = (float)(v1 * v7) - (float)(v4 * v9);
  v13 = (float)(v2 * v7) - (float)(v3 * v9);
  v14 = (float)(v8 * v7) - (float)(v6 * v9);
  v16 = a1[4];
  v15 = a1[5];
  v17 = a1[6];
  return (float)((float)((float)((float)(v14 * a1[7]) + (float)((float)(v10 * v16) - (float)(v15 * v12))) * a1[2])
               + (float)((float)((float)((float)((float)(v5 * v15) - (float)(v10 * v17)) + (float)(v11 * a1[7])) * *a1)
                       - (float)(a1[1] * (float)((float)(v13 * a1[7]) + (float)((float)(v5 * v16) - (float)(v17 * v12))))))
       - (float)((float)((float)(v17 * v14) + (float)((float)(v11 * v16) - (float)(v15 * v13))) * a1[3]);
}

float32x4_t PCVector4<float>::scale(float32x4_t *a1, float32x4_t result)
{
  float32x4_t v2;
  int32x4_t v3;
  float v4;

  v2 = *a1;
  v3 = (int32x4_t)vmulq_f32(v2, v2);
  v4 = sqrtf(vadd_f32(vadd_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1)), (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL)), (float32x2_t)vdup_laneq_s32(v3, 3)).f32[0]);
  if (v4 != 0.0)
  {
    result = vmulq_n_f32(v2, result.f32[0] / v4);
    *a1 = result;
  }
  return result;
}

BOOL PCMatrix44Tmpl<float>::invert(float *a1, float *a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  _BOOL8 v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;

  v3 = a2[14];
  v4 = a2[15];
  v6 = a2[10];
  v5 = a2[11];
  v7 = (float)(v6 * v4) - (float)(v3 * v5);
  v8 = a2[8];
  v9 = a2[9];
  v11 = a2[12];
  v10 = a2[13];
  v12 = (float)(v4 * v9) - (float)(v5 * v10);
  v13 = (float)(v3 * v9) - (float)(v6 * v10);
  v14 = (float)(v4 * v8) - (float)(v5 * v11);
  v15 = (float)(v3 * v8) - (float)(v6 * v11);
  v16 = (float)(v10 * v8) - (float)(v9 * v11);
  v18 = a2[4];
  v17 = a2[5];
  v19 = a2[6];
  v20 = a2[7];
  v21 = (float)((float)(v7 * v17) - (float)(v12 * v19)) + (float)(v13 * v20);
  v22 = (float)(v15 * v20) + (float)((float)(v7 * v18) - (float)(v19 * v14));
  v23 = (float)(v16 * v20) + (float)((float)(v12 * v18) - (float)(v17 * v14));
  v24 = (float)(v19 * v16) + (float)((float)(v13 * v18) - (float)(v17 * v15));
  v25 = *a2;
  v26 = a2[1];
  v27 = a2[2];
  v28 = a2[3];
  v29 = (float)(v23 * v27) + (float)((float)(v21 * *a2) - (float)(v26 * v22));
  v30 = v29 - (float)(v24 * v28);
  v31 = vabds_f32(v29, v24 * v28) >= a3 && v30 != 0.0;
  if (v31)
  {
    v32 = (float)(v4 * v19) - (float)(v3 * v20);
    v33 = (float)(v4 * v17) - (float)(v10 * v20);
    v34 = (float)(v3 * v17) - (float)(v10 * v19);
    v35 = (float)(v4 * v18) - (float)(v11 * v20);
    v36 = (float)(v3 * v18) - (float)(v11 * v19);
    v37 = (float)(v10 * v18) - (float)(v11 * v17);
    v38 = (float)(v5 * v19) - (float)(v6 * v20);
    v39 = (float)(v5 * v17) - (float)(v9 * v20);
    v40 = (float)(v6 * v17) - (float)(v9 * v19);
    v41 = (float)(v5 * v18) - (float)(v8 * v20);
    v42 = (float)(v6 * v18) - (float)(v8 * v19);
    v43 = 1.0 / v30;
    *a1 = v21 * v43;
    a1[1] = -(float)((float)((float)((float)(v7 * v26) - (float)(v12 * v27)) + (float)(v13 * v28)) * v43);
    a1[2] = (float)((float)((float)(v32 * v26) - (float)(v33 * v27)) + (float)(v34 * v28)) * v43;
    a1[3] = -(float)((float)((float)((float)(v38 * v26) - (float)(v39 * v27)) + (float)(v40 * v28)) * v43);
    a1[4] = -(float)(v22 * v43);
    a1[5] = (float)((float)((float)(v7 * v25) - (float)(v14 * v27)) + (float)(v15 * v28)) * v43;
    a1[6] = -(float)((float)((float)((float)(v25 * v32) - (float)(v35 * v27)) + (float)(v36 * v28)) * v43);
    a1[7] = (float)((float)((float)(v25 * v38) - (float)(v41 * v27)) + (float)(v42 * v28)) * v43;
    a1[8] = v23 * v43;
    a1[9] = -(float)((float)((float)((float)(v12 * v25) - (float)(v14 * v26)) + (float)(v16 * v28)) * v43);
    v44 = (float)(v9 * v18) - (float)(v8 * v17);
    a1[10] = (float)((float)((float)(v25 * v33) - (float)(v26 * v35)) + (float)(v37 * v28)) * v43;
    a1[11] = -(float)((float)((float)((float)(v25 * v39) - (float)(v26 * v41)) + (float)(v44 * v28)) * v43);
    a1[12] = -(float)((float)((float)(v19 * v16) + (float)((float)(v13 * v18) - (float)(v17 * v15))) * v43);
    a1[13] = (float)((float)((float)(v13 * v25) - (float)(v15 * v26)) + (float)(v16 * v27)) * v43;
    a1[14] = -(float)((float)((float)((float)(v34 * v25) - (float)(v26 * v36)) + (float)(v37 * v27)) * v43);
    a1[15] = (float)((float)((float)(v40 * v25) - (float)(v26 * v42)) + (float)(v44 * v27)) * v43;
  }
  return v31;
}

BOOL ___ZL37EnableStaticPhysicsForCustomSceneNodeP7SCNNode_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "geometry") != 0;
}

BOOL ___ZL21FirstNodeWithGeometryP7SCNNode_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "geometry") != 0;
}

uint64_t LiGraphBuilder::LiGraphBuilder(uint64_t a1, const PCSharedCount *a2, _OWORD *a3)
{
  uint64_t v5;
  int v6;

  *(PCSharedCount *)a1 = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 8), a2 + 1);
  *(_QWORD *)(a1 + 16) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 24));
  *(_QWORD *)(a1 + 32) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 40));
  *(_QWORD *)(a1 + 48) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 56));
  *(_QWORD *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = &unk_1E656D1A0;
  *(_QWORD *)(a1 + 112) = &unk_1E64FC250;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 101) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 144) = *a3;
  *(_QWORD *)(a1 + 160) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 168));
  *(_QWORD *)(a1 + 176) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 184));
  *(_QWORD *)(a1 + 192) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 200));
  v5 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    throw_PCNullPointerException(1);
  v6 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 104) = v6 + 1;
  *(_DWORD *)(v5 + 528) = v6;
  LiGraphBuilder::startInsertingIntoGroup((LiGraphBuilder *)a1, a1);
  return a1;
}

void sub_1B2D0D624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10)
{
  PCSharedCount *v10;
  PCSharedCount *v11;
  PCSharedCount *v12;
  PCSharedCount *v13;
  uint64_t v14;
  uint64_t v15;
  PCSharedCount *v16;
  PCSharedCount *v17;

  PCSharedCount::~PCSharedCount(v17);
  PCSharedCount::~PCSharedCount(v16);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v15);
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::~PCArray(v14);
  PCSharedCount::~PCSharedCount(v13);
  PCSharedCount::~PCSharedCount(v12);
  PCSharedCount::~PCSharedCount(v11);
  PCSharedCount::~PCSharedCount(v10);
  PCSharedCount::~PCSharedCount(a10);
  _Unwind_Resume(a1);
}

PCMutex *LiGraphBuilder::startInsertingIntoGroup(LiGraphBuilder *a1, uint64_t a2)
{
  uint64_t v3;
  PCMutex *result;
  _QWORD *v5;
  const char *v6;
  size_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  BOOL v12;
  const char *v13;
  PCMutex *v14;
  PCSharedCount v15;
  char v16;

  v3 = (uint64_t)a1 + 80;
  v14 = *(PCMutex **)a2;
  PCSharedCount::PCSharedCount(&v15, (const PCSharedCount *)(a2 + 8));
  v16 = 0;
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::push(v3, (uint64_t)&v14);
  PCSharedCount::~PCSharedCount(&v15);
  result = (PCMutex *)dbg();
  if ((_DWORD)result)
  {
    PCConsoleLock::PCConsoleLock((PCConsoleLock *)&v14, 1);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"startInsertingIntoGroup: ", 25);
    LiGraphBuilder::stackRepr(a1, (LiString *)&v13);
    if (v13)
      v6 = v13;
    else
      v6 = "";
    v7 = strlen(v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n", 1);
    if (v13)
    {
      v8 = (unsigned int *)(v13 - 12);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        *v13 = 0;
        if (v13)
          v11 = (char *)(v13 - 12);
        else
          v11 = 0;
        free(v11);
      }
    }
    result = v14;
    if (v14)
      v12 = LOBYTE(v15.var0) == 0;
    else
      v12 = 1;
    if (!v12)
      return (PCMutex *)PCMutex::unlock(v14);
  }
  return result;
}

void sub_1B2D0D7EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656D1A0;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void LiGraphBuilder::LiGraphBuilder(LiGraphBuilder *this, const LiGraphBuilder *a2)
{
  uint64_t *v4;
  uint64_t v5;
  PCArray_base *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  int v10;
  PCSharedCount v11;
  PCSharedCount v12;
  char v13;
  uint64_t v14;
  PCSharedCount v15;
  uint64_t v16;
  PCSharedCount v17;

  *(_QWORD *)this = 0;
  v4 = (uint64_t *)((char *)this + 8);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 1);
  *((_QWORD *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *((_QWORD *)this + 4) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 5);
  *((_QWORD *)this + 6) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((_QWORD *)this + 8) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 9);
  *((_QWORD *)this + 10) = &unk_1E656D1A0;
  *((_QWORD *)this + 14) = &unk_1E64FC250;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *(_QWORD *)((char *)this + 101) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_BYTE *)this + 136) = 0;
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_QWORD *)this + 20) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 21);
  *((_QWORD *)this + 22) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 23);
  *((_QWORD *)this + 24) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 25);
  if (*((_QWORD *)a2 + 2))
    LiGraphBuilder::createPartition((PCSharedCount *)this);
  v5 = *((unsigned int *)a2 + 23);
  v16 = *((_QWORD *)this + 2);
  PCSharedCount::PCSharedCount(&v17, (const PCSharedCount *)this + 3);
  if ((int)v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if (i >= *((int *)a2 + 23))
        PCArray_base::badIndex(v6);
      v8 = *(_QWORD *)(*((_QWORD *)a2 + 12) + 24 * i);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v8 + 232))(&v14, v8, 0);
      v9 = v14;
      if (!v14)
        throw_PCNullPointerException(1);
      v10 = *((_DWORD *)this + 26);
      *((_DWORD *)this + 26) = v10 + 1;
      *(_DWORD *)(v9 + 528) = v10;
      v11.var0 = (PC_Sp_counted_base *)v9;
      PCSharedCount::PCSharedCount(&v12, &v15);
      v13 = 0;
      PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::push((uint64_t)this + 80, (uint64_t)&v11);
      PCSharedCount::~PCSharedCount(&v12);
      if (!*(_QWORD *)this)
      {
        *(_QWORD *)this = v14;
        PCSharedCount::PCSharedCount(&v11, &v15);
        PCSharedCount::operator=(v4, (uint64_t *)&v11);
        PCSharedCount::~PCSharedCount(&v11);
      }
      if (v16)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 152))(v16, v14);
      v16 = v14;
      PCSharedCount::PCSharedCount(&v11, &v15);
      PCSharedCount::operator=((uint64_t *)&v17, (uint64_t *)&v11);
      PCSharedCount::~PCSharedCount(&v11);
      PCSharedCount::~PCSharedCount(&v15);
    }
  }
  PCSharedCount::~PCSharedCount(&v17);
}

void sub_1B2D0DB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, PCSharedCount *a15, PCSharedCount *a16, PCSharedCount *a17, char a18)
{
  PCSharedCount *v18;
  PCSharedCount *v19;
  PCSharedCount *v20;
  uint64_t v21;
  PCSharedCount *v22;
  PCSharedCount *v23;
  uint64_t v24;

  PCSharedCount::~PCSharedCount(a16);
  PCSharedCount::~PCSharedCount(a17);
  PCSharedCount::~PCSharedCount(a15);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v24);
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::~PCArray(v21);
  PCSharedCount::~PCSharedCount(v23);
  PCSharedCount::~PCSharedCount(v22);
  PCSharedCount::~PCSharedCount(v19);
  PCSharedCount::~PCSharedCount(v20);
  PCSharedCount::~PCSharedCount(v18);
  _Unwind_Resume(a1);
}

PC_Sp_counted_base *LiGraphBuilder::createPartition(PCSharedCount *this)
{
  PC_Sp_counted_base *result;
  PCShared_base **v3;
  LiGroup *v4;
  PC_Sp_counted_base *var0;
  PCSharedCount v6;
  PCSharedCount v7;

  v3 = (PCShared_base **)&this[2];
  result = this[2].var0;
  if (!result)
  {
    var0 = this->var0;
    PCSharedCount::PCSharedCount(&v6, this + 1);
    v4 = (LiGroup *)operator new();
    LiGroup::LiGroup(v4);
    PCPtr<LiImageSource>::operator=<LiImageSource>(v3, v4);
    if (!*v3)
      throw_PCNullPointerException(1);
    (*(void (**)(PCShared_base *, uint64_t))(*(_QWORD *)*v3 + 192))(*v3, 1);
    this->var0 = this[2].var0;
    PCSharedCount::PCSharedCount(&v7, this + 3);
    PCSharedCount::operator=((uint64_t *)&this[1], (uint64_t *)&v7);
    PCSharedCount::~PCSharedCount(&v7);
    if (var0)
    {
      if (!*v3)
        throw_PCNullPointerException(1);
      (*(void (**)(PCShared_base *))(*(_QWORD *)*v3 + 152))(*v3);
    }
    PCSharedCount::~PCSharedCount(&v6);
    return (PC_Sp_counted_base *)*v3;
  }
  return result;
}

void sub_1B2D0DD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::push(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  v4 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) <= v4)
    v5 = (2 * (v4 + 1)) | 1;
  else
    v5 = *(_DWORD *)(a1 + 8);
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize(a1, v4 + 1, v5);
  LiGraphBuilderGroup::operator=(*(_QWORD *)(a1 + 16) + 24 * *(int *)(a1 + 12) - 24, a2);
  return *(_QWORD *)(a1 + 16) + 24 * *(int *)(a1 + 12) - 24;
}

void LiGraphBuilder::~LiGraphBuilder(PCSharedCount *this)
{
  int var0;
  PC_Sp_counted_base *v3;

  PCSharedCount::~PCSharedCount(this + 25);
  PCSharedCount::~PCSharedCount(this + 23);
  PCSharedCount::~PCSharedCount(this + 21);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&this[14]);
  this[10].var0 = (PC_Sp_counted_base *)&unk_1E656D1A0;
  if (SLODWORD(this[11].var0) < 0)
    var0 = 1;
  else
    var0 = (int)this[11].var0;
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize((uint64_t)&this[10], 0, var0);
  v3 = this[12].var0;
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  this[12].var0 = 0;
  LODWORD(this[11].var0) = 0;
  PCSharedCount::~PCSharedCount(this + 9);
  PCSharedCount::~PCSharedCount(this + 7);
  PCSharedCount::~PCSharedCount(this + 5);
  PCSharedCount::~PCSharedCount(this + 3);
  PCSharedCount::~PCSharedCount(this + 1);
}

void LiGraphBuilder::setLights(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + 112;
  v5 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 120) >= v5)
    v6 = *(_DWORD *)(a1 + 120);
  else
    v6 = (2 * v5) | 1;
  PCArray<LiLight,PCArray_Traits<LiLight>>::resize(v4, v5, v6);
  if (*(int *)(a2 + 12) >= 1)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      LiLight::operator=(*(_QWORD *)(a1 + 128) + v7, *(_QWORD *)(a2 + 16) + v7);
      ++v8;
      v7 += 944;
    }
    while (v8 < *(int *)(a2 + 12));
  }
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 24);
}

PCMutex *LiGraphBuilder::add2d(PCSharedCount *a1, _QWORD *a2)
{
  PCMutex *result;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  unsigned int v13;
  size_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  PCMutex *v18;
  char v19;

  LiGraphBuilder::prepare2d(a1);
  LiGraphBuilder::addChild((LiGraphBuilder *)a1, a2);
  result = (PCMutex *)dbg();
  if ((_DWORD)result)
  {
    PCConsoleLock::PCConsoleLock((PCConsoleLock *)&v18, 1);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"add2d: ", 7);
    v6 = strlen((const char *)(0x80000001B3558D40 & 0x7FFFFFFFFFFFFFFFLL));
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, 0x80000001B3558D40 & 0x7FFFFFFFFFFFFFFFLL, v6);
    if (!*a2)
      throw_PCNullPointerException(1);
    v8 = *(_DWORD **)(*a2 + 512);
    if (v8)
      v9 = *(v8 - 2);
    else
      v9 = 0;
    v10 = (char *)malloc_type_malloc(v9 + 15, 0x8903763CuLL);
    v11 = v9 + 2;
    *((_DWORD *)v10 + 2) = v9 + 3;
    atomic_store(1u, (unsigned int *)v10);
    atomic_store(0, (unsigned int *)v10);
    *((_WORD *)v10 + 6) = 8736;
    v12 = v10 + 12;
    *((_DWORD *)v10 + 1) = v11;
    memcpy(v10 + 14, v8, v9);
    v10[v11 + 12] = 0;
    do
      v13 = __ldaxr((unsigned int *)v10);
    while (__stlxr(v13 + 1, (unsigned int *)v10));
    v14 = strlen(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"\"\n", 2);
    do
    {
      v15 = __ldaxr((unsigned int *)v10);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v10));
    if (!v16)
      free(v10);
    result = v18;
    if (v18)
      v17 = v19 == 0;
    else
      v17 = 1;
    if (!v17)
      return (PCMutex *)PCMutex::unlock(v18);
  }
  return result;
}

void sub_1B2D0E0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
  PCConsoleLock::~PCConsoleLock(&a9);
  _Unwind_Resume(a1);
}

PCSharedCount *LiGraphBuilder::prepare2d(PCSharedCount *this)
{
  PCSharedCount *v2;
  PC_Sp_counted_base *var0;
  PCSharedCount *result;

  var0 = this[4].var0;
  v2 = this + 4;
  if (var0)
  {
    PCPtr<LiImageSource>::reset(v2);
    PCPtr<LiImageSource>::reset(&this[8].var0);
    BYTE4(this[13].var0) = 1;
  }
  result = this + 20;
  if (this[20].var0)
  {
    PCPtr<LiImageSource>::reset(result);
    PCPtr<LiImageSource>::reset(&this[24].var0);
    BYTE4(this[13].var0) = 1;
  }
  else if (!BYTE4(this[13].var0))
  {
    return result;
  }
  return (PCSharedCount *)LiGraphBuilder::makeNewPartition(this, 1);
}

void LiGraphBuilder::addChild(LiGraphBuilder *this, _QWORD *a2)
{
  int v3;
  PCSharedCount v4;
  PCSharedCount v5;

  if (!*a2)
    throw_PCNullPointerException(1);
  v3 = *((_DWORD *)this + 26);
  *(_DWORD *)(*a2 + 528) = v3;
  *((_DWORD *)this + 26) = v3 + 1;
  LiGraphBuilder::getCurrentInsertionGroup(this, &v4);
  if (!v4.var0)
    throw_PCNullPointerException(1);
  (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v4.var0 + 152))(v4.var0, *a2);
  PCSharedCount::~PCSharedCount(&v5);
}

void sub_1B2D0E230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t dbg(void)
{
  unsigned __int8 v0;

  {
    dbg(void)::result = liDebug("LiGraphBuilder");
  }
  return dbg(void)::result;
}

void sub_1B2D0E2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PCConsoleLock::~PCConsoleLock(PCMutex **this)
{
  PCMutex *v2;

  v2 = *this;
  if (v2)
  {
    if (*((_BYTE *)this + 8))
    {
      PCMutex::unlock(v2);
      *((_BYTE *)this + 8) = 0;
    }
  }
}

PCMutex *LiGraphBuilder::add3d(PCMutex *a1, _QWORD *a2, int a3)
{
  PCMutex *result;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _DWORD *v10;
  int v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  unsigned int v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  PCMutex *v20;
  PCSharedCount v21;

  v20 = 0;
  PCSharedCount::PCSharedCount(&v21);
  LiGraphBuilder::prepare3d(a1, a3, (const PCSharedCount *)&v20, 0, 0, 0);
  PCSharedCount::~PCSharedCount(&v21);
  LiGraphBuilder::addChild((LiGraphBuilder *)a1, a2);
  result = (PCMutex *)dbg();
  if ((_DWORD)result)
  {
    PCConsoleLock::PCConsoleLock((PCConsoleLock *)&v20, 1);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"add3d: ", 7);
    v8 = strlen((const char *)(0x80000001B3558D40 & 0x7FFFFFFFFFFFFFFFLL));
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001B3558D40 & 0x7FFFFFFFFFFFFFFFLL, v8);
    if (!*a2)
      throw_PCNullPointerException(1);
    v10 = *(_DWORD **)(*a2 + 512);
    if (v10)
      v11 = *(v10 - 2);
    else
      v11 = 0;
    v12 = (char *)malloc_type_malloc(v11 + 15, 0x8903763CuLL);
    v13 = v11 + 2;
    *((_DWORD *)v12 + 2) = v11 + 3;
    atomic_store(1u, (unsigned int *)v12);
    atomic_store(0, (unsigned int *)v12);
    *((_WORD *)v12 + 6) = 8736;
    v14 = v12 + 12;
    *((_DWORD *)v12 + 1) = v13;
    memcpy(v12 + 14, v10, v11);
    v12[v13 + 12] = 0;
    do
      v15 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v15 + 1, (unsigned int *)v12));
    v16 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"\n", 2);
    do
    {
      v17 = __ldaxr((unsigned int *)v12);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v12));
    if (!v18)
      free(v12);
    result = v20;
    if (v20)
      v19 = LOBYTE(v21.var0) == 0;
    else
      v19 = 1;
    if (!v19)
      return (PCMutex *)PCMutex::unlock(v20);
  }
  return result;
}

void sub_1B2D0E4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
  PCConsoleLock::~PCConsoleLock(&a9);
  _Unwind_Resume(a1);
}

PCMutex *LiGraphBuilder::prepare3d(PCMutex *result, int a2, const PCSharedCount *a3, int a4, int a5, int a6)
{
  uint64_t v7;
  PCShared_base **v8;
  int v9;
  PCArray_base *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  LiGroup *v14;
  PCShared_base *v15;
  int v16;
  PCArray_base *Projection;
  int v18;
  int v19;
  LiGroup *v20;
  PCArray_base *v21;
  const PCSharedCount *v22;
  const PCSharedCount *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  const PCSharedCount *v31;
  LiSolidRendererImageSource *v32;
  PCArray_base *v33;
  LiImageSource *v34;
  const PCSharedCount *v35;
  uint64_t v36;
  uint64_t i;
  uint64_t j;
  int v39;
  LiGeode *v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  PC_Sp_counted_base *v44;
  PC_Sp_counted_base *Partition;
  PC_Sp_counted_base *v46;
  _QWORD *v47;
  const char *v48;
  size_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  char *v53;
  const PCSharedCount *v57;
  PCSharedCount v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  double v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  PCSharedCount v70;
  PC_Sp_counted_base *var0;
  PCSharedCount v72;
  PCSharedCount v73;
  PCSharedCount v74;
  LiImageSource *v75;
  PCSharedCount v76;
  uint64_t v77;
  PCSharedCount v78;
  uint64_t v79;
  PCSharedCount v80;
  PCMutex *v81;
  char v82;

  v7 = (uint64_t)result;
  v8 = (PCShared_base **)&result->_Mutex.__opaque[16];
  if (!*(_QWORD *)&result->_Mutex.__opaque[16] || result[1]._Mutex.__opaque[20])
  {
    v9 = dbg();
    PCConsoleLock::PCConsoleLock((PCConsoleLock *)&v81, v9);
    v79 = 0;
    PCSharedCount::PCSharedCount(&v80);
    v57 = a3;
    if (a3->var0)
    {
      v11 = *(unsigned int *)(v7 + 92);
      if ((_DWORD)v11)
      {
        v12 = 0;
        while (1)
        {
          if (v12 >= *(int *)(v7 + 92))
            PCArray_base::badIndex(v10);
          v13 = *(_QWORD *)(v7 + 96);
          v10 = *(PCArray_base **)(v13 + 24 * v12);
          if (v10)
          {
            if (v10)
              break;
          }
          if (++v12 == v11)
            goto LABEL_15;
        }
        if (*(_DWORD *)(v7 + 92) <= (int)v12)
          PCArray_base::badIndex(v10);
        PCPtr<Li3DGroupForEquirect>::operator=<LiGroup>(&v79, (const void **)(v13 + 24 * v12));
      }
    }
LABEL_15:
    LiGraphBuilder::makeNewPartition((PCSharedCount *)v7, 0);
    v14 = (LiGroup *)operator new();
    LiGroup::LiGroup(v14);
    PCPtr<LiImageSource>::operator=<LiImageSource>(v8, v14);
    v15 = *v8;
    if (!*v8)
      throw_PCNullPointerException(1);
    v16 = *(_DWORD *)(v7 + 104);
    *(_DWORD *)(v7 + 104) = v16 + 1;
    *((_DWORD *)v15 + 132) = v16;
    LiGraphBuilder::addLightsToGraph(v7, v8);
    v77 = *(_QWORD *)(v7 + 32);
    PCSharedCount::PCSharedCount(&v78, (const PCSharedCount *)(v7 + 40));
    Projection = (PCArray_base *)LiGraphBuilder::firstProjection((LiGraphBuilder *)v7);
    v18 = (int)Projection;
    if ((Projection & 0x80000000) != 0
      || (v19 = (_DWORD)Projection + 1, (int)Projection + 1 >= *(_DWORD *)(v7 + 92))
      || !*(_BYTE *)(*(_QWORD *)(v7 + 96) + 24 * v19 + 16))
    {
      v20 = (LiGroup *)operator new();
      LiGroup::LiGroup(v20);
      v75 = (LiImageSource *)v20;
      PCSharedCount::PCSharedCount(&v76, (LiGroup *)((char *)v20 + *(_QWORD *)(*(_QWORD *)v20 - 24)));
      v73.var0 = 0;
      PCSharedCount::PCSharedCount(&v74);
      var0 = 0;
      PCSharedCount::PCSharedCount(&v72);
      if ((v18 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v7 + 92) <= v18)
          PCArray_base::badIndex(v21);
        v22 = (const PCSharedCount *)(*(_QWORD *)(v7 + 96) + 24 * v18);
        v73.var0 = v22->var0;
        PCSharedCount::PCSharedCount(&v59, v22 + 1);
        PCSharedCount::operator=((uint64_t *)&v74, (uint64_t *)&v59);
        PCSharedCount::~PCSharedCount(&v59);
        if (!v73.var0)
          throw_PCNullPointerException(1);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v73.var0 + 224))(&v69);
        if (v69)
        {
          v68 = 0x3FF0000000000000;
          v65 = 1.0;
          v62 = 0x3FF0000000000000;
          v59.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
          v60 = 0u;
          v61 = 0u;
          v63 = 0u;
          v64 = 0u;
          v66 = 0u;
          v67 = 0u;
          v59.var0 = COERCE_PC_SP_COUNTED_BASE_((*(double (**)(uint64_t))(*(_QWORD *)v69 + 688))(v69));
          v60 = 0u;
          v61 = 0u;
          v63 = 0u;
          v64 = 0u;
          v62 = 0x3FF0000000000000;
          v65 = 1.0;
          v66 = 0u;
          v67 = 0u;
          v68 = 0x3FF0000000000000;
          if (!v75)
            throw_PCNullPointerException(1);
          (*(void (**)(LiImageSource *, PCSharedCount *))(*(_QWORD *)v75 + 16))(v75, &v59);
        }
        if (!v73.var0)
          throw_PCNullPointerException(1);
        (*(void (**)(PC_Sp_counted_base *, LiImageSource *))(*(_QWORD *)v73.var0 + 152))(v73.var0, v75);
        PCSharedCount::~PCSharedCount(&v70);
      }
      v19 = v18 + 1;
      if (v18 + 1 < *(_DWORD *)(v7 + 92))
      {
        if (v18 <= -2)
          PCArray_base::badIndex(v21);
        v23 = (const PCSharedCount *)(*(_QWORD *)(v7 + 96) + 24 * v19);
        var0 = v23->var0;
        PCSharedCount::PCSharedCount(&v59, v23 + 1);
        PCSharedCount::operator=((uint64_t *)&v72, (uint64_t *)&v59);
        PCSharedCount::~PCSharedCount(&v59);
        if (!v75)
          throw_PCNullPointerException(1);
        (*(void (**)(LiImageSource *, PC_Sp_counted_base *))(*(_QWORD *)v75 + 152))(v75, var0);
      }
      if (v73.var0 && var0)
        (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v73.var0 + 176))(v73.var0);
      v59.var0 = (PC_Sp_counted_base *)v75;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v60, &v76);
      BYTE8(v60) = 1;
      v24 = *(_DWORD *)(v7 + 92);
      v25 = *(_DWORD *)(v7 + 88) <= v24 ? (2 * (v24 + 1)) | 1 : *(_DWORD *)(v7 + 88);
      PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize(v7 + 80, v24 + 1, v25);
      v26 = *(int *)(v7 + 92);
      if ((int)v26 <= v19 || (int)v26 - 1 <= v19)
      {
        v28 = v18 + 1;
      }
      else
      {
        v27 = v26 - 1;
        v28 = v18 + 1;
        v29 = v26 - 2;
        v30 = 24 * (int)v26 - 24;
        do
        {
          LiGraphBuilderGroup::operator=(*(_QWORD *)(v7 + 96) + v30, *(_QWORD *)(v7 + 96) + 24 * v29);
          --v27;
          --v29;
          v30 -= 24;
        }
        while (v27 > v19);
      }
      LiGraphBuilderGroup::operator=(*(_QWORD *)(v7 + 96) + 24 * v28, (uint64_t)&v59);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v60);
      PCSharedCount::~PCSharedCount(&v72);
      PCSharedCount::~PCSharedCount(&v74);
      PCSharedCount::~PCSharedCount(&v76);
      if (v18 < -1)
        goto LABEL_52;
    }
    if (*(_DWORD *)(v7 + 92) <= v19)
LABEL_52:
      PCArray_base::badIndex(Projection);
    v31 = (const PCSharedCount *)(*(_QWORD *)(v7 + 96) + 24 * v19);
    *(PCSharedCount *)(v7 + 48) = (PCSharedCount)v31->var0;
    PCSharedCount::PCSharedCount(&v59, v31 + 1);
    PCSharedCount::operator=((uint64_t *)(v7 + 56), (uint64_t *)&v59);
    PCSharedCount::~PCSharedCount(&v59);
    if (!v77)
      throw_PCNullPointerException(1);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v77 + 152))(v77, *(_QWORD *)(v7 + 48));
    v32 = (LiSolidRendererImageSource *)operator new();
    LiSolidRendererImageSource::LiSolidRendererImageSource(v32);
    v75 = (LiImageSource *)v32;
    PCSharedCount::PCSharedCount(&v76, (LiSolidRendererImageSource *)((char *)v32 + *(_QWORD *)(*(_QWORD *)v32 - 24)));
    if (!v75)
      throw_PCNullPointerException(1);
    v33 = (PCArray_base *)(*(uint64_t (**)(LiImageSource *, uint64_t))(*(_QWORD *)v75 + 168))(v75, v77);
    v34 = v75;
    if (!v75)
      throw_PCNullPointerException(1);
    *((_DWORD *)v75 + 25) = a2;
    if (v18 < 0)
    {
      v35 = v57;
    }
    else
    {
      if (*(_DWORD *)(v7 + 92) <= v18)
        PCArray_base::badIndex(v33);
      (*(void (**)(PCSharedCount *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v7 + 96) + 24
                                                                                               * v18)
                                                          + 224))(&v59);
      (*(void (**)(LiImageSource *, PC_Sp_counted_base *))(*(_QWORD *)v34 + 184))(v34, v59.var0);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v60);
      LiGraphBuilder::combinedTransform((LiGraphBuilder *)v7, 0, v18, (uint64_t)&v59);
      *((double *)&v60 + 1) = *((double *)&v60 + 1) * 0.0;
      *(double *)&v63 = *(double *)&v63 * 0.0;
      v65 = v65 * 0.0;
      *((double *)&v67 + 1) = *((double *)&v67 + 1) * 0.0;
      v34 = v75;
      v35 = v57;
      if (!v75)
        throw_PCNullPointerException(1);
      if ((PCSharedCount *)((char *)v75 + 104) != &v59)
      {
        v36 = 0;
        for (i = 0; i != 4; ++i)
        {
          for (j = 0; j != 32; j += 8)
            *(PCSharedCount *)((char *)v34 + v36 + j + 104) = *(PCSharedCount *)((char *)&v59 + v36 + j);
          v36 += 32;
        }
      }
    }
    v39 = *(_DWORD *)(v7 + 144);
    *((_DWORD *)v34 + 16) = v39;
    if (v39 == 1)
    {
      *((_DWORD *)v34 + 17) = *(_DWORD *)(v7 + 148);
    }
    else if (v39 == 4)
    {
      *((float *)v34 + 18) = (float)*(int *)(v7 + 152);
      *((_DWORD *)v34 + 19) = *(_DWORD *)(v7 + 156);
    }
    *((_QWORD *)v34 + 10) = 0x40000000003;
    v40 = (LiGeode *)operator new();
    LiGeode::LiGeode(v40, v75);
    v41 = (_QWORD *)(v7 + 64);
    PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(v7 + 64), v40);
    v42 = *(_QWORD *)(v7 + 64);
    if (!v42)
      throw_PCNullPointerException(1);
    v43 = *(_DWORD *)(v7 + 104);
    *(_DWORD *)(v7 + 104) = v43 + 1;
    *(_DWORD *)(v42 + 528) = v43;
    if (v35->var0 && v79)
    {
      if (a6)
      {
        v44 = (PC_Sp_counted_base *)operator new();
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v73, v35);
        Li3DGroupForEquirect::Li3DGroupForEquirect((uint64_t)v44, &v73, a4, a5);
        v59.var0 = v44;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v60, (PCShared_base *)((char *)v44 + *(_QWORD *)(*(_QWORD *)v44 - 24)));
        PCSharedCount::~PCSharedCount(&v74);
        if (!v59.var0)
          throw_PCNullPointerException(1);
        (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v59.var0 + 152))(v59.var0, *v41);
        Partition = LiGraphBuilder::createPartition((PCSharedCount *)v7);
        (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)Partition + 152))(Partition, v59.var0);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v60);
      }
      else
      {
        (*(void (**)(void))(*(_QWORD *)v79 + 152))();
      }
    }
    else
    {
      v46 = LiGraphBuilder::createPartition((PCSharedCount *)v7);
      (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v46 + 152))(v46, *v41);
    }
    if (dbg())
    {
      v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"prepare3d: ", 11);
      LiGraphBuilder::stackRepr((LiGraphBuilder *)v7, (LiString *)&v59);
      v48 = v59.var0 ? (const char *)v59.var0 : "";
      v49 = strlen(v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"\n", 1);
      if (v59.var0)
      {
        v50 = (unsigned int *)((char *)v59.var0 - 12);
        do
        {
          v51 = __ldaxr(v50);
          v52 = v51 - 1;
        }
        while (__stlxr(v52, v50));
        if (!v52)
        {
          *(_BYTE *)v59.var0 = 0;
          if (v59.var0)
            v53 = (char *)v59.var0 - 12;
          else
            v53 = 0;
          free(v53);
        }
      }
    }
    PCSharedCount::~PCSharedCount(&v76);
    PCSharedCount::~PCSharedCount(&v78);
    PCSharedCount::~PCSharedCount(&v80);
    result = v81;
    if (v81)
    {
      if (v82)
        return (PCMutex *)PCMutex::unlock(v81);
    }
  }
  return result;
}

void sub_1B2D0EE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, PCSharedCount *a11, PCSharedCount *a12, PCSharedCount *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  PCSharedCount *v34;
  PCSharedCount *v35;
  PCSharedCount *v36;
  uint64_t v37;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v37 - 160));
  PCSharedCount::~PCSharedCount(v36);
  PCSharedCount::~PCSharedCount(v34);
  PCSharedCount::~PCSharedCount(v35);
  PCConsoleLock::~PCConsoleLock((PCMutex **)(v37 - 104));
  _Unwind_Resume(a1);
}

PCMutex *LiGraphBuilder::add3DEngine(PCMutex *a1, _QWORD *a2, int a3)
{
  PCMutex *result;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _DWORD *v10;
  int v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  unsigned int v15;
  size_t v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  PCMutex *v20;
  PCSharedCount v21;

  v20 = 0;
  PCSharedCount::PCSharedCount(&v21);
  LiGraphBuilder::prepare3DEngine(a1, a3, (const PCSharedCount *)&v20, 0, 0, 0);
  PCSharedCount::~PCSharedCount(&v21);
  LiGraphBuilder::addChild((LiGraphBuilder *)a1, a2);
  result = (PCMutex *)dbg();
  if ((_DWORD)result)
  {
    PCConsoleLock::PCConsoleLock((PCConsoleLock *)&v20, 1);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"add3DEngine: ", 13);
    v8 = strlen((const char *)(0x80000001B3558D40 & 0x7FFFFFFFFFFFFFFFLL));
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001B3558D40 & 0x7FFFFFFFFFFFFFFFLL, v8);
    if (!*a2)
      throw_PCNullPointerException(1);
    v10 = *(_DWORD **)(*a2 + 512);
    if (v10)
      v11 = *(v10 - 2);
    else
      v11 = 0;
    v12 = (char *)malloc_type_malloc(v11 + 15, 0x8903763CuLL);
    v13 = v11 + 2;
    *((_DWORD *)v12 + 2) = v11 + 3;
    atomic_store(1u, (unsigned int *)v12);
    atomic_store(0, (unsigned int *)v12);
    *((_WORD *)v12 + 6) = 8736;
    v14 = v12 + 12;
    *((_DWORD *)v12 + 1) = v13;
    memcpy(v12 + 14, v10, v11);
    v12[v13 + 12] = 0;
    do
      v15 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v15 + 1, (unsigned int *)v12));
    v16 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"\"\n", 2);
    do
    {
      v17 = __ldaxr((unsigned int *)v12);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, (unsigned int *)v12));
    if (!v18)
      free(v12);
    result = v20;
    if (v20)
      v19 = LOBYTE(v21.var0) == 0;
    else
      v19 = 1;
    if (!v19)
      return (PCMutex *)PCMutex::unlock(v20);
  }
  return result;
}

void sub_1B2D0F27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCMutex *a9)
{
  PCConsoleLock::~PCConsoleLock(&a9);
  _Unwind_Resume(a1);
}

PCMutex *LiGraphBuilder::prepare3DEngine(PCMutex *result, int a2, const PCSharedCount *a3, int a4, int a5, int a6)
{
  uint64_t v6;
  PCShared_base **opaque;
  int v8;
  PCArray_base *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  LiGroup *v13;
  PCShared_base *v14;
  int v15;
  PCArray_base *Projection;
  int v17;
  int v18;
  LiGroup *v19;
  PCArray_base *v20;
  const PCSharedCount *v21;
  const PCSharedCount *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  const PCSharedCount *v30;
  Li3DEngineImageSource *v31;
  PCArray_base *v32;
  LiImageSource *v33;
  char *v34;
  uint64_t v35;
  PCSharedCount *v36;
  uint64_t i;
  LiGeode *v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  PC_Sp_counted_base *v42;
  PC_Sp_counted_base *Partition;
  PC_Sp_counted_base *v44;
  _QWORD *v45;
  const char *v46;
  size_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  char *v51;
  PCSharedCount v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  double v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  PCSharedCount v68;
  PC_Sp_counted_base *var0;
  PCSharedCount v70;
  PCSharedCount v71;
  PCSharedCount v72;
  LiImageSource *v73;
  PCSharedCount v74;
  uint64_t v75;
  PCSharedCount v76;
  uint64_t v77;
  PCSharedCount v78;
  PCMutex *v79;
  char v80;

  v6 = (uint64_t)result;
  opaque = (PCShared_base **)result[2]._Mutex.__opaque;
  if (!*(_QWORD *)result[2]._Mutex.__opaque || result[1]._Mutex.__opaque[20])
  {
    v8 = dbg();
    PCConsoleLock::PCConsoleLock((PCConsoleLock *)&v79, v8);
    v77 = 0;
    PCSharedCount::PCSharedCount(&v78);
    if (a3->var0)
    {
      v10 = *(unsigned int *)(v6 + 92);
      if ((_DWORD)v10)
      {
        v11 = 0;
        while (1)
        {
          if (v11 >= *(int *)(v6 + 92))
            PCArray_base::badIndex(v9);
          v12 = *(_QWORD *)(v6 + 96);
          v9 = *(PCArray_base **)(v12 + 24 * v11);
          if (v9)
          {
            if (v9)
              break;
          }
          if (++v11 == v10)
            goto LABEL_15;
        }
        if (*(_DWORD *)(v6 + 92) <= (int)v11)
          PCArray_base::badIndex(v9);
        PCPtr<Li3DGroupForEquirect>::operator=<LiGroup>(&v77, (const void **)(v12 + 24 * v11));
      }
    }
LABEL_15:
    LiGraphBuilder::makeNewPartition((PCSharedCount *)v6, 0);
    v13 = (LiGroup *)operator new();
    LiGroup::LiGroup(v13);
    PCPtr<LiImageSource>::operator=<LiImageSource>(opaque, v13);
    v14 = *opaque;
    if (!*opaque)
      throw_PCNullPointerException(1);
    v15 = *(_DWORD *)(v6 + 104);
    *(_DWORD *)(v6 + 104) = v15 + 1;
    *((_DWORD *)v14 + 132) = v15;
    LiGraphBuilder::addLightsToGraph(v6, opaque);
    v75 = *(_QWORD *)(v6 + 160);
    PCSharedCount::PCSharedCount(&v76, (const PCSharedCount *)(v6 + 168));
    Projection = (PCArray_base *)LiGraphBuilder::firstProjection((LiGraphBuilder *)v6);
    v17 = (int)Projection;
    if ((Projection & 0x80000000) != 0
      || (v18 = (_DWORD)Projection + 1, (int)Projection + 1 >= *(_DWORD *)(v6 + 92))
      || !*(_BYTE *)(*(_QWORD *)(v6 + 96) + 24 * v18 + 16))
    {
      v19 = (LiGroup *)operator new();
      LiGroup::LiGroup(v19);
      v73 = (LiImageSource *)v19;
      PCSharedCount::PCSharedCount(&v74, (LiGroup *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24)));
      v71.var0 = 0;
      PCSharedCount::PCSharedCount(&v72);
      var0 = 0;
      PCSharedCount::PCSharedCount(&v70);
      if ((v17 & 0x80000000) == 0)
      {
        if (*(_DWORD *)(v6 + 92) <= v17)
          PCArray_base::badIndex(v20);
        v21 = (const PCSharedCount *)(*(_QWORD *)(v6 + 96) + 24 * v17);
        v71.var0 = v21->var0;
        PCSharedCount::PCSharedCount(&v57, v21 + 1);
        PCSharedCount::operator=((uint64_t *)&v72, (uint64_t *)&v57);
        PCSharedCount::~PCSharedCount(&v57);
        if (!v71.var0)
          throw_PCNullPointerException(1);
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v71.var0 + 224))(&v67);
        if (v67)
        {
          v66 = 0x3FF0000000000000;
          v63 = 1.0;
          v60 = 0x3FF0000000000000;
          v57.var0 = (PC_Sp_counted_base *)0x3FF0000000000000;
          v58 = 0u;
          v59 = 0u;
          v61 = 0u;
          v62 = 0u;
          v64 = 0u;
          v65 = 0u;
          v57.var0 = COERCE_PC_SP_COUNTED_BASE_((*(double (**)(uint64_t))(*(_QWORD *)v67 + 688))(v67));
          v58 = 0u;
          v59 = 0u;
          v61 = 0u;
          v62 = 0u;
          v60 = 0x3FF0000000000000;
          v63 = 1.0;
          v64 = 0u;
          v65 = 0u;
          v66 = 0x3FF0000000000000;
          if (!v73)
            throw_PCNullPointerException(1);
          (*(void (**)(LiImageSource *, PCSharedCount *))(*(_QWORD *)v73 + 16))(v73, &v57);
        }
        if (!v71.var0)
          throw_PCNullPointerException(1);
        (*(void (**)(PC_Sp_counted_base *, LiImageSource *))(*(_QWORD *)v71.var0 + 152))(v71.var0, v73);
        PCSharedCount::~PCSharedCount(&v68);
      }
      v18 = v17 + 1;
      if (v17 + 1 < *(_DWORD *)(v6 + 92))
      {
        if (v17 <= -2)
          PCArray_base::badIndex(v20);
        v22 = (const PCSharedCount *)(*(_QWORD *)(v6 + 96) + 24 * v18);
        var0 = v22->var0;
        PCSharedCount::PCSharedCount(&v57, v22 + 1);
        PCSharedCount::operator=((uint64_t *)&v70, (uint64_t *)&v57);
        PCSharedCount::~PCSharedCount(&v57);
        if (!v73)
          throw_PCNullPointerException(1);
        (*(void (**)(LiImageSource *, PC_Sp_counted_base *))(*(_QWORD *)v73 + 152))(v73, var0);
      }
      if (v71.var0 && var0)
        (*(void (**)(PC_Sp_counted_base *))(*(_QWORD *)v71.var0 + 176))(v71.var0);
      v57.var0 = (PC_Sp_counted_base *)v73;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v58, &v74);
      BYTE8(v58) = 1;
      v23 = *(_DWORD *)(v6 + 92);
      v24 = *(_DWORD *)(v6 + 88) <= v23 ? (2 * (v23 + 1)) | 1 : *(_DWORD *)(v6 + 88);
      PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize(v6 + 80, v23 + 1, v24);
      v25 = *(int *)(v6 + 92);
      if ((int)v25 <= v18 || (int)v25 - 1 <= v18)
      {
        v27 = v17 + 1;
      }
      else
      {
        v26 = v25 - 1;
        v27 = v17 + 1;
        v28 = v25 - 2;
        v29 = 24 * (int)v25 - 24;
        do
        {
          LiGraphBuilderGroup::operator=(*(_QWORD *)(v6 + 96) + v29, *(_QWORD *)(v6 + 96) + 24 * v28);
          --v26;
          --v28;
          v29 -= 24;
        }
        while (v26 > v18);
      }
      LiGraphBuilderGroup::operator=(*(_QWORD *)(v6 + 96) + 24 * v27, (uint64_t)&v57);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
      PCSharedCount::~PCSharedCount(&v70);
      PCSharedCount::~PCSharedCount(&v72);
      PCSharedCount::~PCSharedCount(&v74);
      if (v17 < -1)
        goto LABEL_52;
    }
    if (*(_DWORD *)(v6 + 92) <= v18)
LABEL_52:
      PCArray_base::badIndex(Projection);
    v30 = (const PCSharedCount *)(*(_QWORD *)(v6 + 96) + 24 * v18);
    *(PCSharedCount *)(v6 + 176) = (PCSharedCount)v30->var0;
    PCSharedCount::PCSharedCount(&v57, v30 + 1);
    PCSharedCount::operator=((uint64_t *)(v6 + 184), (uint64_t *)&v57);
    PCSharedCount::~PCSharedCount(&v57);
    if (!v75)
      throw_PCNullPointerException(1);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v75 + 152))(v75, *(_QWORD *)(v6 + 176));
    v31 = (Li3DEngineImageSource *)operator new();
    Li3DEngineImageSource::Li3DEngineImageSource(v31);
    v73 = (LiImageSource *)v31;
    PCSharedCount::PCSharedCount(&v74, (Li3DEngineImageSource *)((char *)v31 + *(_QWORD *)(*(_QWORD *)v31 - 24)));
    if (!v73)
      throw_PCNullPointerException(1);
    v32 = (PCArray_base *)(*(uint64_t (**)(LiImageSource *, uint64_t))(*(_QWORD *)v73 + 168))(v73, v75);
    v33 = v73;
    if (!v73)
      throw_PCNullPointerException(1);
    *((_DWORD *)v73 + 16) = a2;
    if ((v17 & 0x80000000) == 0)
    {
      if (*(_DWORD *)(v6 + 92) <= v17)
        PCArray_base::badIndex(v32);
      (*(void (**)(PCSharedCount *__return_ptr))(**(_QWORD **)(*(_QWORD *)(v6 + 96) + 24
                                                                                               * v17)
                                                          + 224))(&v57);
      (*(void (**)(LiImageSource *, PC_Sp_counted_base *))(*(_QWORD *)v33 + 184))(v33, v57.var0);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
      LiGraphBuilder::combinedTransform((LiGraphBuilder *)v6, 0, v17, (uint64_t)&v57);
      *((double *)&v58 + 1) = *((double *)&v58 + 1) * 0.0;
      *(double *)&v61 = *(double *)&v61 * 0.0;
      v63 = v63 * 0.0;
      *((double *)&v65 + 1) = *((double *)&v65 + 1) * 0.0;
      if (!v73)
        throw_PCNullPointerException(1);
      v34 = (char *)v73 + 72;
      if ((PCSharedCount *)((char *)v73 + 72) != &v57)
      {
        v35 = 0;
        v36 = &v57;
        do
        {
          for (i = 0; i != 4; ++i)
            *(PCSharedCount *)&v34[i * 8] = v36[i];
          ++v35;
          v34 += 32;
          v36 += 4;
        }
        while (v35 != 4);
      }
    }
    v38 = (LiGeode *)operator new();
    LiGeode::LiGeode(v38, v73);
    v39 = (_QWORD *)(v6 + 192);
    PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)(v6 + 192), v38);
    v40 = *(_QWORD *)(v6 + 192);
    if (!v40)
      throw_PCNullPointerException(1);
    v41 = *(_DWORD *)(v6 + 104);
    *(_DWORD *)(v6 + 104) = v41 + 1;
    *(_DWORD *)(v40 + 528) = v41;
    if (a3->var0 && v77)
    {
      if (a6)
      {
        v42 = (PC_Sp_counted_base *)operator new();
        PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v71, a3);
        Li3DGroupForEquirect::Li3DGroupForEquirect((uint64_t)v42, &v71, a4, a5);
        v57.var0 = v42;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v58, (PCShared_base *)((char *)v42 + *(_QWORD *)(*(_QWORD *)v42 - 24)));
        PCSharedCount::~PCSharedCount(&v72);
        if (!v57.var0)
          throw_PCNullPointerException(1);
        (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v57.var0 + 152))(v57.var0, *v39);
        Partition = LiGraphBuilder::createPartition((PCSharedCount *)v6);
        (*(void (**)(PC_Sp_counted_base *, PC_Sp_counted_base *))(*(_QWORD *)Partition + 152))(Partition, v57.var0);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v58);
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 152))(v77);
      }
    }
    else
    {
      v44 = LiGraphBuilder::createPartition((PCSharedCount *)v6);
      (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v44 + 152))(v44, *v39);
    }
    if (dbg())
    {
      v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"prepare3dEngine: ", 17);
      LiGraphBuilder::stackRepr((LiGraphBuilder *)v6, (LiString *)&v57);
      v46 = v57.var0 ? (const char *)v57.var0 : "";
      v47 = strlen(v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v46, v47);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\n", 1);
      if (v57.var0)
      {
        v48 = (unsigned int *)((char *)v57.var0 - 12);
        do
        {
          v49 = __ldaxr(v48);
          v50 = v49 - 1;
        }
        while (__stlxr(v50, v48));
        if (!v50)
        {
          *(_BYTE *)v57.var0 = 0;
          if (v57.var0)
            v51 = (char *)v57.var0 - 12;
          else
            v51 = 0;
          free(v51);
        }
      }
    }
    PCSharedCount::~PCSharedCount(&v74);
    PCSharedCount::~PCSharedCount(&v76);
    PCSharedCount::~PCSharedCount(&v78);
    result = v79;
    if (v79)
    {
      if (v80)
        return (PCMutex *)PCMutex::unlock(v79);
    }
  }
  return result;
}

void sub_1B2D0FB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PCSharedCount *a9, PCSharedCount *a10, PCSharedCount *a11, PCSharedCount *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  PCSharedCount *v32;
  PCSharedCount *v33;
  PCSharedCount *v34;
  uint64_t v35;

  PCSharedCount::~PCSharedCount((PCSharedCount *)(v35 - 160));
  PCSharedCount::~PCSharedCount(v34);
  PCSharedCount::~PCSharedCount(v32);
  PCSharedCount::~PCSharedCount(v33);
  PCConsoleLock::~PCConsoleLock((PCMutex **)(v35 - 104));
  _Unwind_Resume(a1);
}

void LiGraphBuilder::addGroup(PCSharedCount *this, const PCSharedCount *a2)
{
  PCSharedCount v4;
  PCSharedCount v5;

  if (BYTE4(this[13].var0))
    LiGraphBuilder::makeNewPartition(this, 1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(&v4, a2);
  LiGraphBuilder::addChild((LiGraphBuilder *)this, &v4);
  PCSharedCount::~PCSharedCount(&v5);
}

void sub_1B2D0FE54(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

uint64_t LiGraphBuilder::makeNewPartition(PCSharedCount *this, int a2)
{
  PCSharedCount *v4;
  PC_Sp_counted_base *var0;
  uint64_t var0_high;
  PCShared_base **v7;
  PC_Sp_counted_base *Partition;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  PCShared_base *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  const char *v24;
  size_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char *v29;
  BOOL v30;
  int v31;
  uint64_t result;
  int v33;
  PCSharedCount v34;
  PCSharedCount v35;
  char v36;
  void *lpsrc;
  PCSharedCount v38;
  PCShared_base *v39;
  PCSharedCount v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;

  var0 = this[4].var0;
  v4 = this + 4;
  BYTE4(v4[9].var0) = 0;
  if (var0)
  {
    PCPtr<LiImageSource>::reset(v4);
    PCPtr<LiImageSource>::reset(&this[8].var0);
  }
  if (this[20].var0)
  {
    PCPtr<LiImageSource>::reset(&this[20].var0);
    PCPtr<LiImageSource>::reset(&this[24].var0);
  }
  v42 = 0;
  v43 = 0;
  v41 = &unk_1E656D1A0;
  var0_high = HIDWORD(this[11].var0);
  v39 = 0;
  PCSharedCount::PCSharedCount(&v40);
  v33 = a2;
  if (a2)
  {
    Partition = LiGraphBuilder::createPartition(this);
    v7 = PCPtr<LiImageSource>::operator=<LiImageSource>(&v39, (PCShared_base *)Partition);
  }
  if ((int)var0_high >= 1)
  {
    v9 = 0;
    v10 = 1;
    v11 = 16;
    do
    {
      if (v9 >= SHIDWORD(this[11].var0))
        PCArray_base::badIndex((PCArray_base *)v7);
      v12 = (char *)this[12].var0 + v11;
      if (!*v12)
      {
        v13 = *((_QWORD *)v12 - 2);
        if (!v13)
          throw_PCNullPointerException(1);
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 232))(&lpsrc, v13, v10 & 1);
        v14 = (PCShared_base *)lpsrc;
        if (!lpsrc)
          throw_PCNullPointerException(1);
        v15 = (int)this[13].var0;
        LODWORD(this[13].var0) = v15 + 1;
        *((_DWORD *)v14 + 132) = v15;
        if (v39)
        {
          (*(void (**)(PCShared_base *, PCShared_base *))(*(_QWORD *)v39 + 152))(v39, v14);
          v14 = (PCShared_base *)lpsrc;
        }
        v39 = v14;
        PCSharedCount::PCSharedCount(&v34, &v38);
        PCSharedCount::operator=((uint64_t *)&v40, (uint64_t *)&v34);
        PCSharedCount::~PCSharedCount(&v34);
        v34.var0 = (PC_Sp_counted_base *)lpsrc;
        PCSharedCount::PCSharedCount(&v35, &v38);
        v36 = 0;
        PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::push((uint64_t)&v41, (uint64_t)&v34);
        PCSharedCount::~PCSharedCount(&v35);
        PCSharedCount::~PCSharedCount(&v38);
      }
      ++v9;
      v11 += 24;
    }
    while (var0_high != v9);
  }
  if (SLODWORD(this[11].var0) >= SHIDWORD(v42))
    v16 = (int)this[11].var0;
  else
    v16 = (2 * HIDWORD(v42)) | 1;
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize((uint64_t)&this[10], SHIDWORD(v42), v16);
  if (SHIDWORD(v42) >= 1)
  {
    v17 = 0;
    v18 = 0;
    do
    {
      LiGraphBuilderGroup::operator=((uint64_t)this[12].var0 + v17, v43 + v17);
      ++v18;
      v17 += 24;
    }
    while (v18 < SHIDWORD(v42));
  }
  if (dbg())
  {
    PCConsoleLock::PCConsoleLock((PCConsoleLock *)&v34, 1);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"makeNewPartition(", 17);
    if (v33)
      v20 = "true";
    else
      v20 = "false";
    if (v33)
      v21 = 4;
    else
      v21 = 5;
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"): ", 3);
    LiGraphBuilder::stackRepr((LiGraphBuilder *)this, (LiString *)&lpsrc);
    if (lpsrc)
      v24 = (const char *)lpsrc;
    else
      v24 = "";
    v25 = strlen(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\n", 1);
    if (lpsrc)
    {
      v26 = (unsigned int *)((char *)lpsrc - 12);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        *(_BYTE *)lpsrc = 0;
        if (lpsrc)
          v29 = (char *)lpsrc - 12;
        else
          v29 = 0;
        free(v29);
      }
    }
    if (v34.var0)
      v30 = LOBYTE(v35.var0) == 0;
    else
      v30 = 1;
    if (!v30)
      PCMutex::unlock((PCMutex *)v34.var0);
  }
  PCSharedCount::~PCSharedCount(&v40);
  v41 = &unk_1E656D1A0;
  if ((int)v42 < 0)
    v31 = 1;
  else
    v31 = v42;
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize((uint64_t)&v41, 0, v31);
  result = v43;
  if (v43)
    return MEMORY[0x1B5E2914C](v43, 0x1000C8077774924);
  return result;
}

void sub_1B2D10220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  PCSharedCount *v3;
  PCMutex *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, PCMutex *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  PCSharedCount::~PCSharedCount(v3);
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::~PCArray((uint64_t)va1);
  _Unwind_Resume(a1);
}

void LiGraphBuilder::getCurrentInsertionGroup(LiGraphBuilder *this@<X0>, PCSharedCount *a2@<X8>)
{
  int v2;
  const PCSharedCount *v3;

  v2 = *((_DWORD *)this + 23);
  if (v2 <= 0)
    PCArray_base::badIndex(this);
  v3 = (const PCSharedCount *)(*((_QWORD *)this + 12) + 24 * (v2 - 1));
  a2->var0 = v3->var0;
  PCSharedCount::PCSharedCount(a2 + 1, v3 + 1);
}

void LiGraphBuilder::stackRepr(LiGraphBuilder *this@<X0>, LiString *a2@<X8>)
{
  LiString *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  signed int v10;
  uint64_t v11;
  LiString *v12;
  const void *v13;
  int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int v17;
  size_t v18;
  _DWORD *v19;
  const char *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  char *v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  int v37;
  int j;
  uint64_t v39;
  const PCSharedCount *v40;
  uint64_t v41;
  uint64_t k;
  uint64_t v43;
  const char *v44;
  signed int v45;
  LiString *v46;
  const void *v47;
  int v48;
  unsigned int *v49;
  uint64_t v50;
  unsigned int v51;
  size_t v52;
  _DWORD *v53;
  const char *v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  void *v63;
  char *v64;
  size_t v65;
  unsigned int *v66;
  char *v67;
  unsigned int v68;
  size_t v69;
  char *v70;
  int v71;
  size_t v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int *v80;
  unsigned int v81;
  unsigned int v82;
  char *v83;
  int v84;
  char v85[8];
  char __src[8];
  PCSharedCount v87;
  char v88;
  char *v89;

  *(_QWORD *)a2 = 0;
  LiString::LiString((LiString *)&v89, "None");
  v5 = *((_QWORD *)this + 2);
  if (v5)
  {
    for (i = 7; i != -1; --i)
    {
      if (v5 >> i <= 0)
        v7 = -(-(v5 >> i) & 0xF);
      else
        v7 = (v5 >> i) & 0xF;
      __src[0] = a0123456789abcd[v7];
      LiString::append(a2, __src, 1);
    }
    LiString::append(a2, " \"", 2);
    v8 = *((_QWORD *)this + 2);
    if (!v8)
      throw_PCNullPointerException(1);
    v9 = *(const char **)(v8 + 512);
    if (v9)
      v10 = *((_DWORD *)v9 - 2);
    else
      v10 = 0;
    LiString::append(a2, v9, v10);
    LiString::append(a2, "\"", 1);
    v11 = *((_QWORD *)this + 2);
    if (!v11)
      throw_PCNullPointerException(1);
    v12 = (LiString *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 136))(v11);
    LiString::format(v12, (LiString *)__src);
    v13 = *(const void **)__src;
    if (*(_QWORD *)__src)
      v14 = *(_DWORD *)(*(_QWORD *)__src - 8);
    else
      v14 = 0;
    v15 = (unsigned int *)malloc_type_malloc(v14 + 15, 0x8903763CuLL);
    v16 = v14 + 2;
    v15[2] = v14 + 3;
    atomic_store(1u, v15);
    atomic_store(0, v15);
    *((_WORD *)v15 + 6) = 10272;
    v15[1] = v16;
    memcpy((char *)v15 + 14, v13, v14);
    *((_BYTE *)v15 + v16 + 12) = 0;
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 + 1, v15));
    v18 = (int)v15[1];
    v19 = malloc_type_malloc(v18 + 14, 0x8903763CuLL);
    v19[1] = v18 + 1;
    v19[2] = v18 + 2;
    atomic_store(1u, v19);
    v20 = (const char *)(v19 + 3);
    atomic_store(0, v19);
    memcpy(v19 + 3, v15 + 3, v18);
    v20[v18] = 41;
    v20[v18 + 1] = 0;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 + 1, v19));
    LiString::append(a2, v20, v19[1]);
    do
    {
      v22 = __ldaxr(v19);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v19));
    if (!v23)
      free(v19);
    do
    {
      v24 = __ldaxr(v15);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v15));
    if (!v25)
      free(v15);
    if (*(_QWORD *)__src)
    {
      v26 = (unsigned int *)(*(_QWORD *)__src - 12);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        **(_BYTE **)__src = 0;
        if (*(_QWORD *)__src)
          v29 = (void *)(*(_QWORD *)__src - 12);
        else
          v29 = 0;
        free(v29);
      }
    }
    if (&v89 != (char **)a2)
    {
      if (v89)
      {
        v30 = (unsigned int *)(v89 - 12);
        do
        {
          v31 = __ldaxr(v30);
          v32 = v31 - 1;
        }
        while (__stlxr(v32, v30));
        if (!v32)
        {
          *v89 = 0;
          if (v89)
            v33 = v89 - 12;
          else
            v33 = 0;
          free(v33);
        }
      }
      v34 = *(char **)a2;
      v89 = v34;
      if (v34)
      {
        v35 = (unsigned int *)(v34 - 12);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
      }
    }
    v4 = LiString::operator=((unsigned int **)a2, (unsigned int *)"");
  }
  v84 = *((_DWORD *)this + 23);
  if (v84)
  {
    v37 = 0;
    for (j = 0; j != v84; v37 = j)
    {
      if (v37 < 0 || *((_DWORD *)this + 23) <= v37)
        PCArray_base::badIndex(v4);
      v39 = *((_QWORD *)this + 12);
      v40 = (const PCSharedCount *)(v39 + 24 * j);
      *(PCSharedCount *)__src = (PCSharedCount)v40->var0;
      PCSharedCount::PCSharedCount(&v87, v40 + 1);
      v88 = *(_BYTE *)(v39 + 24 * j + 16);
      if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 - 8))
        LiString::append(a2, ", ", 2);
      v41 = *(_QWORD *)__src;
      for (k = 7; k != -1; --k)
      {
        if (v41 >> k <= 0)
          v43 = -(-(v41 >> k) & 0xF);
        else
          v43 = (v41 >> k) & 0xF;
        v85[0] = a0123456789abcd[v43];
        LiString::append(a2, v85, 1);
      }
      LiString::append(a2, " \"", 2);
      v44 = *(const char **)(*(_QWORD *)__src + 512);
      if (v44)
        v45 = *((_DWORD *)v44 - 2);
      else
        v45 = 0;
      LiString::append(a2, v44, v45);
      LiString::append(a2, "\"", 1);
      if (v88)
        LiString::append(a2, " synth", 6);
      v46 = (LiString *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)__src + 136))(*(_QWORD *)__src);
      LiString::format(v46, (LiString *)v85);
      v47 = *(const void **)v85;
      if (*(_QWORD *)v85)
        v48 = *(_DWORD *)(*(_QWORD *)v85 - 8);
      else
        v48 = 0;
      v49 = (unsigned int *)malloc_type_malloc(v48 + 15, 0x8903763CuLL);
      v50 = v48 + 2;
      v49[2] = v48 + 3;
      atomic_store(1u, v49);
      atomic_store(0, v49);
      *((_WORD *)v49 + 6) = 10272;
      v49[1] = v50;
      memcpy((char *)v49 + 14, v47, v48);
      *((_BYTE *)v49 + v50 + 12) = 0;
      do
        v51 = __ldaxr(v49);
      while (__stlxr(v51 + 1, v49));
      v52 = (int)v49[1];
      v53 = malloc_type_malloc(v52 + 14, 0x8903763CuLL);
      atomic_store(1u, v53);
      v54 = (const char *)(v53 + 3);
      atomic_store(0, v53);
      v53[1] = v52 + 1;
      v53[2] = v52 + 2;
      memcpy(v53 + 3, v49 + 3, v52);
      v54[v52] = 41;
      v54[v52 + 1] = 0;
      do
        v55 = __ldaxr(v53);
      while (__stlxr(v55 + 1, v53));
      LiString::append(a2, v54, v53[1]);
      do
      {
        v56 = __ldaxr(v53);
        v57 = v56 - 1;
      }
      while (__stlxr(v57, v53));
      if (!v57)
        free(v53);
      do
      {
        v58 = __ldaxr(v49);
        v59 = v58 - 1;
      }
      while (__stlxr(v59, v49));
      if (!v59)
        free(v49);
      if (*(_QWORD *)v85)
      {
        v60 = (unsigned int *)(*(_QWORD *)v85 - 12);
        do
        {
          v61 = __ldaxr(v60);
          v62 = v61 - 1;
        }
        while (__stlxr(v62, v60));
        if (!v62)
        {
          **(_BYTE **)v85 = 0;
          if (*(_QWORD *)v85)
            v63 = (void *)(*(_QWORD *)v85 - 12);
          else
            v63 = 0;
          free(v63);
        }
      }
      PCSharedCount::~PCSharedCount(&v87);
      ++j;
    }
  }
  v64 = v89;
  if (v89)
  {
    v65 = *((int *)v89 - 2);
    if (!(_DWORD)v65)
      goto LABEL_108;
    v66 = (unsigned int *)malloc_type_malloc(v65 + 16, 0x8903763CuLL);
    v66[1] = v65 + 3;
    v66[2] = v65 + 4;
    atomic_store(1u, v66);
    atomic_store(0, v66);
    memcpy(v66 + 3, v64, v65);
    v67 = (char *)v66 + v65 + 12;
    *(_WORD *)v67 = 12064;
    v67[2] = 32;
    *((_BYTE *)v66 + v65 + 15) = 0;
    do
      v68 = __ldaxr(v66);
    while (__stlxr(v68 + 1, v66));
    v69 = (int)v66[1];
    v70 = *(char **)a2;
    if (*(_QWORD *)a2)
      v71 = *((_DWORD *)v70 - 2);
    else
      v71 = 0;
    v72 = v69 + v71;
    v73 = (unsigned int *)malloc_type_malloc(v72 + 13, 0x8903763CuLL);
    v73[1] = v72;
    v73[2] = v72 + 1;
    atomic_store(1u, v73);
    atomic_store(0, v73);
    memcpy(v73 + 3, v66 + 3, v69);
    memcpy((char *)v73 + v69 + 12, v70, v71);
    *((_BYTE *)v73 + v72 + 12) = 0;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 + 1, v73));
    LiString::dec(a2);
    *(_QWORD *)a2 = v73 + 3;
    do
      v75 = __ldaxr(v73);
    while (__stlxr(v75 + 1, v73));
    do
    {
      v76 = __ldaxr(v73);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v73));
    if (!v77)
      free(v73);
    do
    {
      v78 = __ldaxr(v66);
      v79 = v78 - 1;
    }
    while (__stlxr(v79, v66));
    if (!v79)
      free(v66);
    v64 = v89;
    if (v89)
    {
LABEL_108:
      v80 = (unsigned int *)(v64 - 12);
      do
      {
        v81 = __ldaxr(v80);
        v82 = v81 - 1;
      }
      while (__stlxr(v82, v80));
      if (!v82)
      {
        *v89 = 0;
        if (v89)
          v83 = v89 - 12;
        else
          v83 = 0;
        free(v83);
      }
    }
  }
}

void sub_1B2D10A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _BYTE *a16)
{
  LiString *v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  do
  {
    v20 = __ldaxr(v18);
    v21 = v20 - 1;
  }
  while (__stlxr(v21, v18));
  if (!v21)
    free(v18);
  do
  {
    v22 = __ldaxr(v17);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v17));
  if (!v23)
    free(v17);
  if (a16)
  {
    v24 = (unsigned int *)(a16 - 12);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, v24));
    if (!v26)
    {
      *a16 = 0;
      free(a16 - 12);
    }
  }
  LiString::dec(v16);
  _Unwind_Resume(a1);
}

LiString *LiString::operator=(unsigned int **this, unsigned int *__src)
{
  unsigned int *v3;
  BOOL v4;
  uint64_t v6;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;

  v3 = *this;
  if (*this)
    v4 = v3 == __src;
  else
    v4 = 0;
  if (!v4)
  {
    if (__src && *(_BYTE *)__src)
    {
      v6 = 0;
      while (*((unsigned __int8 *)__src + ++v6))
        ;
      if (!v3)
        goto LABEL_19;
      v8 = atomic_load(v3 - 3);
      if (v8 != 1)
        goto LABEL_19;
      v9 = *this;
      v10 = (uint64_t)(*this - 3);
      if (!*this)
        v10 = 0;
      if ((int)v6 < *(_DWORD *)(v10 + 8))
      {
        memcpy(v9, __src, v6 + 1);
        *((_BYTE *)*this + v6) = 0;
        if (*this)
          v11 = (uint64_t)(*this - 3);
        else
          v11 = 0;
        *(_DWORD *)(v11 + 4) = v6;
      }
      else
      {
LABEL_19:
        LiString::dec((LiString *)this);
        v12 = (unsigned int *)malloc_type_malloc(v6 + 13, 0x8903763CuLL);
        v12[2] = v6 + 1;
        atomic_store(1u, v12);
        *this = v12 + 3;
        v12[1] = v6;
        memcpy(v12 + 3, __src, v6 + 1);
      }
    }
    else
    {
      LiString::dec((LiString *)this);
      *this = 0;
    }
  }
  return (LiString *)this;
}

PCMutex *LiGraphBuilder::endInsertingIntoGroup(LiGraphBuilder *this)
{
  int v2;
  const char **v3;
  const char *v4;
  const char *v5;
  const char *v6;
  _QWORD *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  size_t v18;
  int v19;
  _QWORD *v20;
  const char *v21;
  size_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  char *v26;
  PCMutex *result;
  const char *v28;
  PCSharedCount v29;
  unsigned __int8 v30;
  PCMutex *v31;
  char v32;

  v2 = dbg();
  PCConsoleLock::PCConsoleLock((PCConsoleLock *)&v31, v2);
  v3 = (const char **)((char *)this + 176);
  while (*((_DWORD *)this + 23))
  {
    PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::pop((uint64_t)this + 80, (uint64_t)&v28);
    v4 = v28;
    v5 = (const char *)*((_QWORD *)this + 6);
    if (v28)
    {
      if (!v5 || v28 != v5)
      {
        v6 = *v3;
        goto LABEL_15;
      }
    }
    else if (v5)
    {
      v6 = *v3;
LABEL_18:
      if (!v6)
        goto LABEL_19;
      goto LABEL_25;
    }
    if (dbg())
    {
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"  leaving _3dgroup ", 19);
      v8 = strlen((const char *)(0x80000001B3558D51 & 0x7FFFFFFFFFFFFFFFLL));
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, 0x80000001B3558D51 & 0x7FFFFFFFFFFFFFFFLL, v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" \"", 2);
      if (*((_QWORD *)v28 + 64))
        v11 = (const char *)*((_QWORD *)v28 + 64);
      else
        v11 = "";
      v12 = strlen(v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"\n", 2);
    }
    PCPtr<LiImageSource>::reset((_QWORD *)this + 4);
    PCPtr<LiImageSource>::reset((_QWORD *)this + 6);
    *((_BYTE *)this + 108) = 1;
    v4 = v28;
    v6 = (const char *)*((_QWORD *)this + 22);
    if (!v28)
      goto LABEL_18;
LABEL_15:
    if (v6 && v4 == v6)
    {
LABEL_19:
      if (dbg())
      {
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"  leaving _3DEngineGroup ", 25);
        v14 = strlen((const char *)(0x80000001B3558D51 & 0x7FFFFFFFFFFFFFFFLL));
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, 0x80000001B3558D51 & 0x7FFFFFFFFFFFFFFFLL, v14);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" \"", 2);
        if (*((_QWORD *)v28 + 64))
          v17 = (const char *)*((_QWORD *)v28 + 64);
        else
          v17 = "";
        v18 = strlen(v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"\n", 2);
      }
      PCPtr<LiImageSource>::reset((_QWORD *)this + 20);
      PCPtr<LiImageSource>::reset((_QWORD *)this + 22);
      *((_BYTE *)this + 108) = 1;
    }
LABEL_25:
    v19 = v30;
    PCSharedCount::~PCSharedCount(&v29);
    if (!v19)
      break;
  }
  if (dbg())
  {
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"endInsertingIntoGroup: ", 23);
    LiGraphBuilder::stackRepr(this, (LiString *)&v28);
    v21 = v28 ? v28 : "";
    v22 = strlen(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"\n", 1);
    if (v28)
    {
      v23 = (unsigned int *)(v28 - 12);
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        *v28 = 0;
        if (v28)
          v26 = (char *)(v28 - 12);
        else
          v26 = 0;
        free(v26);
      }
    }
  }
  result = v31;
  if (v31)
  {
    if (v32)
      return (PCMutex *)PCMutex::unlock(v31);
  }
  return result;
}

void sub_1B2D11094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  PCConsoleLock::~PCConsoleLock((PCMutex **)va);
  _Unwind_Resume(a1);
}

void PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::pop(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = *(_QWORD *)(a1 + 16) + 24 * *(int *)(a1 + 12);
  *(_QWORD *)a2 = *(_QWORD *)(v4 - 24);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 8), (const PCSharedCount *)(v4 - 16));
  *(_BYTE *)(a2 + 16) = *(_BYTE *)(v4 - 8);
  v5 = *(_DWORD *)(a1 + 12) - 1;
  if (*(_DWORD *)(a1 + 8) >= v5)
    v6 = *(_DWORD *)(a1 + 8);
  else
    v6 = (2 * v5) | 1;
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize(a1, v5, v6);
}

void sub_1B2D1117C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t LiGraphBuilder::partitionWorld(uint64_t this)
{
  *(_BYTE *)(this + 108) = 1;
  return this;
}

PCMutex *LiGraphBuilder::addGroupAndMakeCurrent(PCSharedCount *a1, const PCSharedCount *a2)
{
  LiGraphBuilder::addGroup(a1, a2);
  return LiGraphBuilder::startInsertingIntoGroup((LiGraphBuilder *)a1, (uint64_t)a2);
}

void LiGraphBuilder::worldRoot(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->var0 = this->var0;
  PCSharedCount::PCSharedCount(a2 + 1, this + 1);
}

void LiGraphBuilder::get3DEngineGeode(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->var0 = this[24].var0;
  PCSharedCount::PCSharedCount(a2 + 1, this + 25);
}

uint64_t LiGraphBuilder::getAndIncrementCompositeOrder(LiGraphBuilder *this)
{
  uint64_t v1;

  v1 = *((unsigned int *)this + 26);
  *((_DWORD *)this + 26) = v1 + 1;
  return v1;
}

void LiGraphBuilder::getLastChildInCurrentGroup(LiGraphBuilder *this@<X0>, PCSharedCount *a2@<X8>)
{
  PC_Sp_counted_base *var0;
  int v4;
  PC_Sp_counted_base *v5;
  PCShared_base *v6;
  PCSharedCount v7;
  PCSharedCount v8;

  LiGraphBuilder::getCurrentInsertionGroup(this, &v7);
  var0 = v7.var0;
  PCSharedCount::~PCSharedCount(&v8);
  v4 = (*(uint64_t (**)(PC_Sp_counted_base *))(*(_QWORD *)var0 + 136))(var0);
  if (v4)
  {
    v5 = (PC_Sp_counted_base *)(*(uint64_t (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)var0 + 144))(var0, (v4 - 1));
    a2->var0 = v5;
    if (v5)
      v6 = (PCShared_base *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24));
    else
      v6 = 0;
    PCSharedCount::PCSharedCount(a2 + 1, v6);
  }
  else
  {
    a2->var0 = 0;
    PCSharedCount::PCSharedCount(a2 + 1);
  }
}

void LiGraphBuilder::getCurrentLocalToWorld(LiGraphBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t i;

  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  v3 = *((unsigned int *)this + 23);
  if ((int)v3 >= 1)
  {
    for (i = 0; i != v3; ++i)
    {
      if (i >= *((int *)this + 23))
        PCArray_base::badIndex(this);
      PCMatrix44Tmpl<double>::rightMult(a2, (double *)(*(_QWORD *)(*((_QWORD *)this + 12) + 24 * i) + 8));
    }
  }
}

uint64_t LiGraphBuilder::addLightsToGraph(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t i;
  PCArray_base *v6;
  PCArray_base *v7;

  v2 = *(unsigned int *)(result + 124);
  if ((int)v2 >= 1)
  {
    v4 = result;
    for (i = 0; i != v2; ++i)
    {
      v6 = (PCArray_base *)operator new();
      v7 = v6;
      if (i >= *(int *)(v4 + 124))
        PCArray_base::badIndex(v6);
      LiLight::LiLight(v6, (const LiLight *)(*(_QWORD *)(v4 + 128) + 944 * i));
      if (!*a2)
        throw_PCNullPointerException(1);
      result = (*(uint64_t (**)(_QWORD, PCArray_base *))(*(_QWORD *)*a2 + 152))(*a2, v7);
    }
  }
  return result;
}

void sub_1B2D113F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C4099F9488BLL);
  _Unwind_Resume(a1);
}

uint64_t LiGraphBuilder::firstProjection(LiGraphBuilder *this)
{
  LiGraphBuilder *v1;
  int v2;
  unsigned int i;
  uint64_t v4;
  uint64_t v5;

  v1 = this;
  v2 = *((_DWORD *)this + 23);
  for (i = v2 - 1; ; --i)
  {
    v4 = (v2 - 1);
    if (v2 < 1)
      break;
    if (*((_DWORD *)v1 + 23) < v2)
      PCArray_base::badIndex(this);
    v5 = *(_QWORD *)(*((_QWORD *)v1 + 12) + 24 * i);
    this = (LiGraphBuilder *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
    v2 = v4;
    if ((_DWORD)this)
      return v4;
  }
  return 0xFFFFFFFFLL;
}

void LiGraphBuilder::combinedTransform(LiGraphBuilder *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double v12[16];

  *(_QWORD *)(a4 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a4 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a4 = 0x3FF0000000000000;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  *(_OWORD *)(a4 + 104) = 0u;
  v5 = *((_DWORD *)this + 23);
  v6 = v5 - a2;
  if (v5 > a2)
  {
    v8 = a2;
    v9 = a3;
    v10 = 24 * a2;
    do
    {
      if (v8 < 0 || v8 >= *((int *)this + 23))
        PCArray_base::badIndex(this);
      v11 = *(double **)(*((_QWORD *)this + 12) + v10);
      PCMatrix44Tmpl<double>::rightMult(a4, v11 + 1);
      if (v9 == v8)
        break;
      LiGroup::viewProjectionTransform((LiGroup *)v11, (uint64_t)v12);
      PCMatrix44Tmpl<double>::rightMult(a4, v12);
      ++v8;
      v10 += 24;
      --v6;
    }
    while (v6);
  }
}

_QWORD *PCPtr<Li3DGroupForEquirect>::operator=<LiGroup>(_QWORD *a1, const void **a2)
{
  void *v4;
  const PCSharedCount *v5;
  PCSharedCount *v6;
  PCSharedCount v8;
  PCSharedCount v9;

  if (!*a2)
  {
    *a1 = 0;
    goto LABEL_5;
  }
  *a1 = v4;
  if (!v4)
  {
LABEL_5:
    v6 = &v9;
    PCSharedCount::PCSharedCount(&v9);
    PCSharedCount::operator=(a1 + 1, (uint64_t *)&v9);
    goto LABEL_6;
  }
  v5 = (const PCSharedCount *)(a2 + 1);
  v6 = &v8;
  PCSharedCount::PCSharedCount(&v8, v5);
  PCSharedCount::operator=(a1 + 1, (uint64_t *)&v8);
LABEL_6:
  PCSharedCount::~PCSharedCount(v6);
  return a1;
}

void sub_1B2D11614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a9);
  _Unwind_Resume(a1);
}

void LiGraphBuilder::render2d(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  LiRenderer *v4;
  PC_Sp_counted_base *var0;
  PCSharedCount v6;
  PCSharedCount v7;

  v4 = (LiRenderer *)operator new();
  LiRenderer::LiRenderer(v4);
  a2->var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a2 + 1, (LiRenderer *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  var0 = a2->var0;
  if (!a2->var0)
    throw_PCNullPointerException(1);
  v6.var0 = this->var0;
  PCSharedCount::PCSharedCount(&v7, this + 1);
  (*(void (**)(PC_Sp_counted_base *, PCSharedCount))(*(_QWORD *)var0 + 168))(var0, v6);
  PCSharedCount::~PCSharedCount(&v7);
}

void sub_1B2D116EC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void LiGraphBuilder::render(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  PCSharedCount v3;
  PCSharedCount v4;

  LiGraphBuilder::render2d(this, &v3);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v3);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B2D11778(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

void PCConsoleLock::PCConsoleLock(PCConsoleLock *this, int a2)
{
  PCMutex *v4;

  if (PCSingletonObject<PCMutex,PCConsoleLock::SingletonTag,1000000000>::object(void)::once != -1)
    dispatch_once(&PCSingletonObject<PCMutex,PCConsoleLock::SingletonTag,1000000000>::object(void)::once, &__block_literal_global_68);
  v4 = (PCMutex *)(PCSingletonObject<PCMutex,PCConsoleLock::SingletonTag,1000000000>::_instance + 8);
  *(_QWORD *)this = PCSingletonObject<PCMutex,PCConsoleLock::SingletonTag,1000000000>::_instance + 8;
  *((_BYTE *)this + 8) = 0;
  if (a2)
  {
    PCMutex::lock(v4);
    *((_BYTE *)this + 8) = 1;
  }
}

void sub_1B2D11860(_Unwind_Exception *a1)
{
  PCSingleton *v1;

  PCSingleton::~PCSingleton(v1);
  MEMORY[0x1B5E29170](v1, 0x1081C40EAC9FDC4);
  _Unwind_Resume(a1);
}

void PCSingletonObject<PCMutex,PCConsoleLock::SingletonTag,1000000000>::~PCSingletonObject(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E656D158;
  PCSingletonObject<PCMutex,PCConsoleLock::SingletonTag,1000000000>::_dead = 1;
  PCSingletonObject<PCMutex,PCConsoleLock::SingletonTag,1000000000>::_instance = 0;
  PCMutex::~PCMutex((PCMutex *)(a1 + 8));
  PCSingleton::~PCSingleton((PCSingleton *)a1);
}

{
  *(_QWORD *)a1 = &unk_1E656D158;
  PCSingletonObject<PCMutex,PCConsoleLock::SingletonTag,1000000000>::_dead = 1;
  PCSingletonObject<PCMutex,PCConsoleLock::SingletonTag,1000000000>::_instance = 0;
  PCMutex::~PCMutex((PCMutex *)(a1 + 8));
  PCSingleton::~PCSingleton((PCSingleton *)a1);
  JUMPOUT(0x1B5E29170);
}

void PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656D1A0;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<LiGraphBuilderGroup,PCArray_Traits<LiGraphBuilderGroup>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  PCSharedCount *v18;
  PCSharedCount *v19;
  uint64_t v20;
  PCException *exception;
  PCString v22;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v22, "PCArray::resize");
    PCException::PCException(exception, &v22);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if (a2 >= (int)v6)
    {
      if (a2 > (int)v6)
      {
        v10 = 24 * v6;
        v11 = a2 - v6;
        do
        {
          v12 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(v12 + v10) = 0;
          PCSharedCount::PCSharedCount((PCSharedCount *)(v12 + v10 + 8));
          v10 += 24;
          --v11;
        }
        while (v11);
      }
    }
    else
    {
      v7 = a2;
      v8 = 24 * a2 + 8;
      do
      {
        PCSharedCount::~PCSharedCount((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v8));
        ++v7;
        v8 += 24;
      }
      while (v7 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 24 * v3);
    }
    else
    {
      v9 = 0;
    }
    v13 = *(_DWORD *)(a1 + 12);
    if (a2 >= v13)
      v14 = *(_DWORD *)(a1 + 12);
    else
      v14 = a2;
    if (v14 < 1)
    {
      v14 = 0;
    }
    else
    {
      v15 = 0;
      do
      {
        v16 = *(_QWORD *)(a1 + 16) + v15;
        *(_QWORD *)&v9[v15] = *(_QWORD *)v16;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v9[v15 + 8], (const PCSharedCount *)(v16 + 8));
        v9[v15 + 16] = *(_BYTE *)(v16 + 16);
        PCSharedCount::~PCSharedCount((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v15 + 8));
        v15 += 24;
      }
      while (24 * v14 != v15);
      v13 = *(_DWORD *)(a1 + 12);
    }
    if (v14 < v13)
    {
      v17 = 24 * v14 + 8;
      do
      {
        PCSharedCount::~PCSharedCount((PCSharedCount *)(*(_QWORD *)(a1 + 16) + v17));
        v17 += 24;
        ++v14;
      }
      while (*(_DWORD *)(a1 + 12) > v14);
    }
    if (v14 < a2)
    {
      v18 = (PCSharedCount *)&v9[24 * v14 + 8];
      do
      {
        v18[-1].var0 = 0;
        PCSharedCount::PCSharedCount(v18);
        v18 = v19 + 3;
        ++v14;
      }
      while (v14 < a2);
    }
    v20 = *(_QWORD *)(a1 + 16);
    if (v20)
      MEMORY[0x1B5E2914C](v20, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2D11C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiGraphBuilderGroup::operator=(uint64_t a1, uint64_t a2)
{
  PCSharedCount v5;

  if (a1 != a2)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    PCSharedCount::PCSharedCount(&v5, (const PCSharedCount *)(a2 + 8));
    PCSharedCount::operator=((uint64_t *)(a1 + 8), (uint64_t *)&v5);
    PCSharedCount::~PCSharedCount(&v5);
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  }
  return a1;
}

void sub_1B2D11CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void LiImageProjection::LiImageProjection(LiImageProjection *this)
{
  *((_QWORD *)this + 5) = &off_1E65EB048;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E656D2E8);
  *(_QWORD *)this = &off_1E656D1E0;
  *((_QWORD *)this + 5) = &unk_1E656D2C8;
}

void sub_1B2D11D24(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 40) = v4;
  *(_BYTE *)(v1 + 56) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiImageProjection::LiImageProjection(LiImageProjection *this, LiImageSource *a2)
{
  *((_QWORD *)this + 5) = &off_1E65EB048;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 56) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E656D2E8);
  *(_QWORD *)this = &off_1E656D1E0;
  *((_QWORD *)this + 5) = &unk_1E656D2C8;
  PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)this + 2, (PCShared_base *)a2);
}

void sub_1B2D11DBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E656D2E8);
  *(_QWORD *)(v1 + 40) = v3 + 16;
  *(_BYTE *)(v1 + 56) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiImageProjection::clone(LiImageSource **this@<X0>, PCSharedCount *a2@<X8>)
{
  LiImageProjection *v4;
  PCSharedCount v5;
  PCSharedCount v6;

  v4 = (LiImageProjection *)operator new();
  LiImageProjection::LiImageProjection(v4, this[2]);
  v5.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v6, (LiImageProjection *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2D11E7C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

PCShared_base **LiImageProjection::setInput(PCShared_base **this, LiImageSource *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 2, (PCShared_base *)a2);
}

uint64_t LiImageProjection::getDelegate(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t LiImageProjection::pixelTransformSupport()
{
  return 6;
}

HGNode *LiImageProjection::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  *((_DWORD *)a2 + 8) = 2;
  return LiAgent::getHelium(a2, this[2], a3);
}

void LiImageTransform::clone(LiImageSource **this@<X0>, PCSharedCount *a2@<X8>)
{
  LiImageTransform *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t i;
  PCSharedCount v9;
  PCSharedCount v10;

  v4 = (LiImageTransform *)operator new();
  LiImageTransform::LiImageTransform(v4, this[2]);
  v9.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v10, (LiImageTransform *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  if ((LiImageSource **)v9.var0 != this)
  {
    v5 = 0;
    v6 = (char *)(this + 5);
    v7 = (char *)v9.var0 + 40;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)&v7[i] = *(_QWORD *)&v6[i];
      ++v5;
      v7 += 32;
      v6 += 32;
    }
    while (v5 != 4);
  }
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v9);
  PCSharedCount::~PCSharedCount(&v10);
}

void sub_1B2D11FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40DE3F20C5);
  _Unwind_Resume(a1);
}

uint64_t LiImageTransform::getBoundary(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v5;
  unsigned int v6;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    throw_PCNullPointerException(1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, double *))(*(_QWORD *)v5 + 24))(v5, a2, a3);
  return PCMatrix44Tmpl<double>::transformRect<double>((double *)(a1 + 40), a3, (uint64_t)a3) & v6;
}

HGNode *LiImageTransform::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  char v6;

  *((_DWORD *)a2 + 8) = 2;
  LiAgent::loadTransform((uint64_t)a2, (uint64_t)(this + 5));
  if (*(_QWORD *)a2)
    v6 = *(_BYTE *)(*(_QWORD *)a2 + 44) != 0;
  else
    v6 = 0;
  LiRenderingTechnology::setEnableMetalRendering((uint64_t)a2, v6);
  return LiAgent::getHelium(a2, this[2], a3);
}

uint64_t LiImageTransform::print(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;

  LiImageSource::printIndent(a2, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LiImageTransform:\n", 18);
  PCMatrix44Tmpl<double>::print(a1 + 40, a2, a3 + 2);
  if (*(_BYTE *)(a1 + 296))
  {
    LiImageSource::printIndent(a2, a3 + 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"World transform:\n", 17);
    PCMatrix44Tmpl<double>::print(a1 + 168, a2, a3 + 2);
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v6 + 128))(v6, a2, (a3 + 1));
}

uint64_t LiEmptyImage::estimateRenderMemory()
{
  return 0;
}

void LiSolidSource::LiSolidSource(LiSolidSource *this)
{
  *((_QWORD *)this + 4) = &off_1E65EB048;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E656D420);
  *(_QWORD *)this = &off_1E656D338;
  *((_QWORD *)this + 4) = &unk_1E656D400;
  PCWorkingColorVector::PCWorkingColorVector((LiSolidSource *)((char *)this + 16));
}

void sub_1B2D12208(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E656D420);
  *(_QWORD *)(v1 + 32) = v3 + 16;
  *(_BYTE *)(v1 + 48) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiSolidSource::clone(LiSolidSource *this@<X0>, PCSharedCount *a2@<X8>)
{
  LiSolidSource *v4;
  PCSharedCount v5;
  PCSharedCount v6;

  v4 = (LiSolidSource *)operator new();
  LiSolidSource::LiSolidSource(v4);
  v5.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v6, (LiSolidSource *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  *((_OWORD *)v5.var0 + 1) = *((_OWORD *)this + 1);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2D122E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40516CBDFCLL);
  _Unwind_Resume(a1);
}

uint64_t LiSolidSource::getHelium@<X0>(float32x2_t *this@<X0>, LiHeBackgroundGenerator **a2@<X8>)
{
  uint64_t v4;
  float64x2_t v5;
  LiHeBackgroundGenerator *v6;
  float v7;
  float v8;
  float v9;
  float v10;
  uint64_t result;
  float64x2_t v12;
  float64x2_t v13;

  v4 = 0;
  v5 = vcvtq_f64_f32(this[3]);
  v12 = vcvtq_f64_f32(this[2]);
  v13 = v5;
  do
  {
    v12.f64[v4] = v13.f64[1] * v12.f64[v4];
    ++v4;
  }
  while (v4 != 3);
  v6 = (LiHeBackgroundGenerator *)HGObject::operator new(0x1A0uLL);
  LiHeBackgroundGenerator::LiHeBackgroundGenerator(v6);
  v7 = v12.f64[0];
  v8 = v12.f64[1];
  v9 = v13.f64[0];
  v10 = v13.f64[1];
  result = (*(uint64_t (**)(LiHeBackgroundGenerator *, _QWORD, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 0, v7, v8, v9, v10);
  *a2 = v6;
  return result;
}

void sub_1B2D123AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

uint64_t LiSolidSource::estimateRenderMemory()
{
  return 0;
}

void LiImageAlphaFill::LiImageAlphaFill(LiImageAlphaFill *this)
{
  *((_QWORD *)this + 7) = &off_1E65EB048;
  *((_QWORD *)this + 8) = 0;
  *((_BYTE *)this + 72) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E656D568);
  *(_QWORD *)this = &off_1E656D460;
  *((_QWORD *)this + 7) = &unk_1E656D548;
  PCWorkingColorVector::PCWorkingColorVector((LiImageAlphaFill *)((char *)this + 36));
}

void sub_1B2D12454(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E656D568);
  *(_QWORD *)(v1 + 56) = v3 + 16;
  *(_BYTE *)(v1 + 72) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiImageAlphaFill::~LiImageAlphaFill(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)off_1E656E028;
  this[7].var0 = (PC_Sp_counted_base *)off_1E656E110;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E656D570);
  this[7].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[9].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[8].var0);
}

{
  LiImageAlphaFill::~LiImageAlphaFill(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiImageAlphaFill::~LiImageAlphaFill(LiImageAlphaFill *this)
{
  LiImageAlphaFill::~LiImageAlphaFill((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  LiImageAlphaFill::~LiImageAlphaFill((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

__n128 LiImageAlphaFill::setColor(LiImageAlphaFill *this, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *(__n128 *)((char *)this + 36) = *a2;
  return result;
}

void LiImageAlphaFill::clone(LiImageAlphaFill *this@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t *v4;
  PCSharedCount v5;
  PCSharedCount v6;
  PCSharedCount v7;

  v4 = (uint64_t *)operator new();
  LiImageAlphaFill::LiImageAlphaFill((LiImageAlphaFill *)v4);
  v5.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v6, (PCShared_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  if (!v4)
    throw_PCNullPointerException(1);
  *((_QWORD *)v5.var0 + 2) = *((_QWORD *)this + 2);
  PCSharedCount::PCSharedCount(&v7, (const PCSharedCount *)this + 3);
  PCSharedCount::operator=(v4 + 3, (uint64_t *)&v7);
  PCSharedCount::~PCSharedCount(&v7);
  if (!v5.var0)
    throw_PCNullPointerException(1);
  *(_OWORD *)((char *)v5.var0 + 36) = *(_OWORD *)((char *)this + 36);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2D12640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

HGNode *LiImageAlphaFill::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, LiHeAlphaFill **a3@<X8>)
{
  HGNode *result;
  LiHeAlphaFill *v6;
  HGNode *v7;

  *((_DWORD *)a2 + 8) = 2;
  result = LiAgent::getHelium(a2, this[2], &v7);
  if (v7)
  {
    v6 = (LiHeAlphaFill *)HGObject::operator new(0x1A0uLL);
    LiHeAlphaFill::LiHeAlphaFill(v6);
    (*(void (**)(LiHeAlphaFill *, _QWORD, HGNode *))(*(_QWORD *)v6 + 120))(v6, 0, v7);
    (*(void (**)(LiHeAlphaFill *, _QWORD, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 0, *((float *)this + 9), *((float *)this + 10), *((float *)this + 11), *((float *)this + 12));
    (*(void (**)(LiHeAlphaFill *, uint64_t, float, float, float, float))(*(_QWORD *)v6 + 96))(v6, 1, 1.0, 0.0, 0.0, 0.0);
    *a3 = v6;
    result = v7;
    if (v7)
      return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v7 + 24))(v7);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_1B2D12764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  HGObject::operator delete(v10);
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(a1);
}

void LiImageTransform::~LiImageTransform(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E656D5B8;
  this[44].var0 = (PC_Sp_counted_base *)&unk_1E656D6A0;
  LiClipSet::~LiClipSet((LiClipSet *)&this[38]);
  this->var0 = (PC_Sp_counted_base *)off_1E656D710;
  this[44].var0 = (PC_Sp_counted_base *)off_1E656D7F8;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E656D6C8);
  this[44].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[46].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[45].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)&off_1E656D5B8;
  this[44].var0 = (PC_Sp_counted_base *)&unk_1E656D6A0;
  LiClipSet::~LiClipSet((LiClipSet *)&this[38]);
  this->var0 = (PC_Sp_counted_base *)off_1E656D710;
  this[44].var0 = (PC_Sp_counted_base *)off_1E656D7F8;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E656D6C8);
  this[44].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[46].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[45].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiImageTransform::~LiImageTransform(LiImageTransform *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E656D5B8;
  v1[44].var0 = (PC_Sp_counted_base *)&unk_1E656D6A0;
  LiClipSet::~LiClipSet((LiClipSet *)&v1[38]);
  v1->var0 = (PC_Sp_counted_base *)off_1E656D710;
  v1[44].var0 = (PC_Sp_counted_base *)off_1E656D7F8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E656D6C8);
  v1[44].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[46].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[45].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)&off_1E656D5B8;
  v1[44].var0 = (PC_Sp_counted_base *)&unk_1E656D6A0;
  LiClipSet::~LiClipSet((LiClipSet *)&v1[38]);
  v1->var0 = (PC_Sp_counted_base *)off_1E656D710;
  v1[44].var0 = (PC_Sp_counted_base *)off_1E656D7F8;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E656D6C8);
  v1[44].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[46].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[45].var0);
  JUMPOUT(0x1B5E29170);
}

void LiEmptyImage::~LiEmptyImage(OZChannelBase *this)
{
  uint64_t v1;

  v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1E656DA80);
  *(_QWORD *)(v1 + 16) = &off_1E65EB048;
  *(_BYTE *)(v1 + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 24));
}

{
  uint64_t v1;

  v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1E656DA80);
  *(_QWORD *)(v1 + 16) = &off_1E65EB048;
  *(_BYTE *)(v1 + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 24));
  JUMPOUT(0x1B5E29170);
}

PCSharedCount *LiEmptyImage::clone@<X0>(PCSharedCount *a1@<X8>)
{
  LiEmptyImage *v3;

  v3 = (LiEmptyImage *)operator new();
  LiEmptyImage::LiEmptyImage(v3);
  a1->var0 = (PC_Sp_counted_base *)v3;
  return PCSharedCount::PCSharedCount(a1 + 1, (LiEmptyImage *)((char *)v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
}

void sub_1B2D12AE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40EE17FB6ALL);
  _Unwind_Resume(a1);
}

HGNode *LiEmptyImage::getHelium@<X0>(HGNode **a1@<X8>)
{
  HGNode *v4;
  HGNode *result;

  v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
  result = HGNode::HGNode(v4);
  *a1 = v4;
  return result;
}

void sub_1B2D12B34(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

void `virtual thunk to'LiEmptyImage::~LiEmptyImage(LiEmptyImage *this)
{
  uint64_t v1;

  v1 = OZChannelBase::setRangeName((OZChannelBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (const PCString *)&off_1E656DA80);
  *(_QWORD *)(v1 + 16) = &off_1E65EB048;
  *(_BYTE *)(v1 + 32) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 24));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E656DA80);
  *((_QWORD *)v1 + 2) = &off_1E65EB048;
  v1[32] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 3);
  JUMPOUT(0x1B5E29170);
}

void LiImageProjection::~LiImageProjection(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)off_1E656DC30;
  this[5].var0 = (PC_Sp_counted_base *)off_1E656DD18;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E656D2F0);
  this[5].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[7].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[6].var0);
}

{
  this->var0 = (PC_Sp_counted_base *)off_1E656DC30;
  this[5].var0 = (PC_Sp_counted_base *)off_1E656DD18;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E656D2F0);
  this[5].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[7].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[6].var0);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiImageProjection::~LiImageProjection(LiImageProjection *this)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)off_1E656DC30;
  v1[5].var0 = (PC_Sp_counted_base *)off_1E656DD18;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E656D2F0);
  v1[5].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[7].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[6].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (PC_Sp_counted_base *)off_1E656DC30;
  v1[5].var0 = (PC_Sp_counted_base *)off_1E656DD18;
  PCSharedCount::~PCSharedCount(v1 + 3);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E656D2F0);
  v1[5].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[7].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[6].var0);
  JUMPOUT(0x1B5E29170);
}

void LiSolidSource::~LiSolidSource(OZChannelBase *this)
{
  uint64_t v1;

  v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1E656D420);
  *(_QWORD *)(v1 + 32) = &off_1E65EB048;
  *(_BYTE *)(v1 + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 40));
}

{
  uint64_t v1;

  v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1E656D420);
  *(_QWORD *)(v1 + 32) = &off_1E65EB048;
  *(_BYTE *)(v1 + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 40));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiSolidSource::~LiSolidSource(LiSolidSource *this)
{
  uint64_t v1;

  v1 = OZChannelBase::setRangeName((OZChannelBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)), (const PCString *)&off_1E656D420);
  *(_QWORD *)(v1 + 32) = &off_1E65EB048;
  *(_BYTE *)(v1 + 48) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 40));
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  OZChannelBase::setRangeName((OZChannelBase *)v1, (const PCString *)&off_1E656D420);
  *((_QWORD *)v1 + 4) = &off_1E65EB048;
  v1[48] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 5);
  JUMPOUT(0x1B5E29170);
}

void LiEmptyImage::LiEmptyImage(LiEmptyImage *this)
{
  *((_QWORD *)this + 2) = &off_1E65EB048;
  *((_QWORD *)this + 3) = 0;
  *((_BYTE *)this + 32) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E656DA80);
  *(_QWORD *)this = &off_1E656D998;
  *((_QWORD *)this + 2) = &unk_1E656DA60;
}

void sub_1B2D12F60(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 32) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiMaterial::LiMaterial(LiMaterial *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  LiSceneObject::LiSceneObject(this, a2 + 1);
  v3 = *a2;
  *(_QWORD *)v4 = *a2;
  *(_QWORD *)(v4 + *(_QWORD *)(v3 - 24)) = a2[5];
  *(_DWORD *)(v4 + 568) = 1;
  *(_QWORD *)(v4 + 576) = &unk_1E656E300;
  *(_QWORD *)(v4 + 592) = 0;
  *(_QWORD *)(v4 + 584) = 0;
  *(_QWORD *)(v4 + 616) = 0;
  *(_QWORD *)(v4 + 608) = 0;
  *(_QWORD *)(v4 + 600) = v4 + 608;
  *(_DWORD *)(v4 + 624) = 0;
  *(_QWORD *)(v4 + 632) = 0x3FF0000000000000;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v4 + 640) = _Q0;
  *(_DWORD *)(v4 + 656) = 0;
}

uint64_t PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656E300;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize((_QWORD *)a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void LiMaterial::~LiMaterial(LiMaterial *this, PC_Sp_counted_base **a2)
{
  PC_Sp_counted_base *v4;
  char *v5;
  char *v6;
  char *v7;
  LiMaterialSamplerInfo *v8;
  char *v9;
  char *v10;
  BOOL v11;
  int v12;
  uint64_t v13;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *((_QWORD *)v4 - 3)) = a2[5];
  v5 = (char *)this + 600;
  v6 = (char *)*((_QWORD *)this + 75);
  v7 = (char *)this + 608;
  if (v6 != (char *)this + 608)
  {
    do
    {
      v8 = (LiMaterialSamplerInfo *)*((_QWORD *)v6 + 5);
      if (v8)
      {
        LiMaterialSamplerInfo::~LiMaterialSamplerInfo(v8);
        MEMORY[0x1B5E29170]();
      }
      v9 = (char *)*((_QWORD *)v6 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (char *)*((_QWORD *)v6 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v6;
          v6 = v10;
        }
        while (!v11);
      }
      v6 = v10;
    }
    while (v10 != v7);
  }
  PCSpinLock::~PCSpinLock((PCSpinLock *)this + 156);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)v5, *((_QWORD **)this + 76));
  *((_QWORD *)this + 72) = &unk_1E656E300;
  if (*((int *)this + 146) < 0)
    v12 = 1;
  else
    v12 = *((_DWORD *)this + 146);
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize((_QWORD *)this + 72, 0, v12);
  v13 = *((_QWORD *)this + 74);
  if (v13)
    MEMORY[0x1B5E2914C](v13, 0x1000C8077774924);
  *((_QWORD *)this + 74) = 0;
  *((_DWORD *)this + 146) = 0;
  LiSceneObject::~LiSceneObject((PCSharedCount *)this, a2 + 1);
}

double LiMaterial::localBoundingBox(uint64_t a1, _OWORD *a2)
{
  double result;

  result = 1.0;
  a2[1] = xmmword_1B304F270;
  a2[2] = xmmword_1B304F270;
  *a2 = xmmword_1B304F270;
  return result;
}

void LiMaterial::plane(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0xBFF0000000000000;
}

void LiMaterial::cast(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
}

uint64_t LiMaterial::print(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, a3, 1);
}

uint64_t LiMaterial::printMaterial(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  std::locale v16;

  LiImageSource::printIndent(a2, a3);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LiMaterial(\"", 12);
  if (*(_QWORD *)(a1 + 512))
    v9 = *(const char **)(a1 + 512);
  else
    v9 = "";
  v10 = strlen(v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\"", 1);
  if (a4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"parts ", 6);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 588))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" uniforms", 9);
  }
  if (*(_QWORD *)(a1 + 616))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" samplers", 9);
  }
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v16, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v16);
  std::ostream::put();
  std::ostream::flush();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2, a3);
}

void sub_1B2D133B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void *LiMaterial::printMaterialDetails(__CFString **a1, _QWORD *a2, int a3)
{
  __CFString **v4;
  int v5;
  int v6;
  int i;
  uint64_t v8;
  const char *v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  char *v13;
  char *v14;
  const char *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  PCArray_base *v23;
  int v24;
  int v25;
  int v26;
  std::locale::id *v27;
  std::locale::__imp *v28;
  uint64_t *v29;
  const char *v30;
  size_t v31;
  _QWORD *v32;
  const char *locale;
  size_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  const std::locale::facet *v39;
  os_unfair_lock_s *v40;
  __CFString **v41;
  std::locale::id *v42;
  __CFString *v43;
  __CFString *v44;
  const char *isa;
  size_t v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  __CFString *var0;
  uint64_t *p_info;
  unint64_t v51;
  __CFString *v52;
  __CFString **v53;
  BOOL v54;
  int v55;
  void *result;
  char *v58;
  uint64_t *v59;
  _QWORD *v60[2];
  void *v61;
  size_t __nel;
  void *__base;
  std::locale v64;
  std::locale v65;
  PCString v66[20];

  v4 = a1;
  v66[18] = *(PCString *)MEMORY[0x1E0C80C00];
  __nel = 0;
  __base = 0;
  v60[1] = 0;
  v61 = &unk_1E656E338;
  v59 = (uint64_t *)v60;
  v60[0] = 0;
  v5 = *((_DWORD *)a1 + 147);
  if (v5)
  {
    v6 = 0;
    for (i = 0; i != v5; v6 = i)
    {
      if (v6 < 0 || *((_DWORD *)v4 + 147) <= v6)
        PCArray_base::badIndex((PCArray_base *)a1);
      v8 = (uint64_t)v4[74] + 152 * i;
      v65.__locale_ = *(std::locale::__imp **)v8;
      ProShade::Value::Value(v66, (const PCString *)(v8 + 8));
      v9 = (const char *)*((_QWORD *)v65.__locale_ + 4);
      v58 = (char *)v9;
      if (v9)
      {
        v10 = (unsigned int *)(v9 - 12);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      if ((int)__nel <= SHIDWORD(__nel))
        v12 = (2 * (HIDWORD(__nel) + 1)) | 1;
      else
        v12 = __nel;
      PCArray<LiString,PCArray_Traits<LiString>>::resize((uint64_t)&v61, HIDWORD(__nel) + 1, v12);
      v13 = (char *)__base + 8 * SHIDWORD(__nel);
      v14 = v13 - 8;
      if (v13 - 8 != (char *)&v58)
      {
        LiString::dec((LiString *)(v13 - 8));
        v15 = v58;
        *(_QWORD *)v14 = v58;
        if (v15)
        {
          v16 = (unsigned int *)(v15 - 12);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
        }
      }
      v64.__locale_ = (std::locale::__imp *)&v58;
      v18 = std::__tree<std::__value_type<LiString,ProShade::Value>,std::__map_value_compare<LiString,std::__value_type<LiString,ProShade::Value>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,ProShade::Value>>>::__emplace_unique_key_args<LiString,std::piecewise_construct_t const&,std::tuple<LiString const&>,std::tuple<>>(&v59, (const char **)&v58, (uint64_t)&std::piecewise_construct, (uint64_t **)&v64);
      a1 = ProShade::Value::operator=((__CFString **)v18 + 5, v66);
      if (v58)
      {
        v19 = (unsigned int *)(v58 - 12);
        do
        {
          v20 = __ldaxr(v19);
          v21 = v20 - 1;
        }
        while (__stlxr(v21, v19));
        if (!v21)
        {
          *v58 = 0;
          if (v58)
            v22 = v58 - 12;
          else
            v22 = 0;
          free(v22);
        }
      }
      ++i;
    }
    if (HIDWORD(__nel))
      qsort(__base, HIDWORD(__nel), 8uLL, (int (__cdecl *)(const void *, const void *))uniform_order);
  }
  LiImageSource::printIndent(a2, a3 + 1);
  v23 = (PCArray_base *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Uniforms:\n", 10);
  v24 = HIDWORD(__nel);
  if (HIDWORD(__nel))
  {
    v25 = 0;
    v26 = 0;
    v27 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      if (v25 < 0 || SHIDWORD(__nel) <= v25)
        PCArray_base::badIndex(v23);
      v28 = (std::locale::__imp *)((char *)__base + 8 * v26);
      v65.__locale_ = v28;
      v29 = std::__tree<std::__value_type<LiString,ProShade::Value>,std::__map_value_compare<LiString,std::__value_type<LiString,ProShade::Value>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,ProShade::Value>>>::__emplace_unique_key_args<LiString,std::piecewise_construct_t const&,std::tuple<LiString const&>,std::tuple<>>(&v59, (const char **)v28, (uint64_t)&std::piecewise_construct, (uint64_t **)&v65);
      LiImageSource::printIndent(a2, a3 + 2);
      if (*(_QWORD *)v28)
        v30 = *(const char **)v28;
      else
        v30 = "";
      v31 = strlen(v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v30, v31);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" = ", 3);
      ProShade::Value::repr((ProShade::Value *)(v29 + 5), (LiString *)&v65);
      if (v65.__locale_)
        locale = (const char *)v65.__locale_;
      else
        locale = "";
      v34 = strlen(locale);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)locale, v34);
      if (v65.__locale_)
      {
        v35 = (unsigned int *)((char *)v65.__locale_ - 12);
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          *(_BYTE *)v65.__locale_ = 0;
          if (v65.__locale_)
            v38 = (char *)v65.__locale_ - 12;
          else
            v38 = 0;
          free(v38);
        }
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(_QWORD *)(*v32 - 24)));
      v39 = std::locale::use_facet(&v65, v27);
      ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
      std::locale::~locale(&v65);
      std::ostream::put();
      v23 = (PCArray_base *)std::ostream::flush();
      v25 = ++v26;
    }
    while (v24 != v26);
  }
  LiImageSource::printIndent(a2, a3 + 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Textures:\n", 10);
  v40 = (os_unfair_lock_s *)(v4 + 78);
  v58 = (char *)(v4 + 78);
  PCSpinLock::lock((os_unfair_lock_t)v4 + 156);
  v41 = (__CFString **)v4[75];
  if (v41 == v4 + 76)
    goto LABEL_84;
  v42 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  do
  {
    v43 = v41[4];
    v44 = v41[5];
    if (!LOBYTE(v44[9].length) || BYTE4(v44[9].length))
    {
      LiImageSource::printIndent(a2, a3 + 2);
      if (v43[1].isa)
        isa = (const char *)v43[1].isa;
      else
        isa = "";
      v46 = strlen(isa);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)isa, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)": ", 2);
      LiMaterialSamplerInfo::getTexture((LiMaterialSamplerInfo *)v44, (PCWorkingColorVector *)&v65);
      ProGL::TextureHandle::getWidth(&v65.__locale_);
      v47 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" x ", 3);
      ProGL::TextureHandle::getHeight(&v65.__locale_);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
      if (LOBYTE(v44[9].length))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"[", 1);
        if (BYTE5(v44[9].length))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" triplanar", 10);
        if (BYTE6(v44[9].length))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" rotateSideTexture", 18);
        if (HIBYTE(v44[9].length))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" invert", 7);
        if (HIDWORD(v44[10].isa) && LOBYTE(v44[10].info))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" bumpIsHeight", 13);
        if (BYTE1(v44[10].info))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" mipmap", 7);
        if (LOBYTE(v44[10].data))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" gradient", 9);
        if (BYTE1(v44[10].data))
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" checkTransparency", 18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ]", 2);
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"no attributes", 13);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
      v48 = std::locale::use_facet(&v64, v42);
      ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
      std::locale::~locale(&v64);
      std::ostream::put();
      std::ostream::flush();
      var0 = v66[0].var0;
      if (v66[0].var0)
      {
        p_info = &v66[0].var0->info;
        do
          v51 = __ldaxr((unint64_t *)p_info);
        while (__stlxr(v51 - 1, (unint64_t *)p_info));
        if (!v51)
        {
          (*((void (**)(__CFString *))var0->isa + 2))(var0);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)var0);
        }
      }
    }
    v52 = v41[1];
    if (v52)
    {
      do
      {
        v53 = (__CFString **)v52;
        v52 = (__CFString *)v52->isa;
      }
      while (v52);
    }
    else
    {
      do
      {
        v53 = (__CFString **)v41[2];
        v54 = *v53 == (__CFString *)v41;
        v41 = v53;
      }
      while (!v54);
    }
    v41 = v53;
  }
  while (v53 != v4 + 76);
  v40 = (os_unfair_lock_s *)v58;
  if (v58)
LABEL_84:
    PCSpinLock::unlock(v40);
  std::__tree<std::__value_type<LiString,ProShade::Value>,std::__map_value_compare<LiString,std::__value_type<LiString,ProShade::Value>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,ProShade::Value>>>::destroy((uint64_t)&v59, v60[0]);
  v61 = &unk_1E656E338;
  if ((__nel & 0x80000000) != 0)
    v55 = 1;
  else
    v55 = __nel;
  PCArray<LiString,PCArray_Traits<LiString>>::resize((uint64_t)&v61, 0, v55);
  result = __base;
  if (__base)
    return (void *)MEMORY[0x1B5E2914C](__base, 0x1000C8077774924);
  return result;
}

void sub_1B2D13AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::locale a19, std::locale a20)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t uniform_order(const LiString *a1, const LiString *a2)
{
  int v4;
  int v5;
  const char *v7;
  const char *v8;

  v4 = parseName(a1);
  v5 = parseName(a2);
  if (v4 < v5)
    return 0xFFFFFFFFLL;
  if (v4 > v5)
    return 1;
  v7 = *(const char **)a1;
  v8 = *(const char **)a2;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    return 0;
  if (!v7)
    return 1;
  if (!v8)
    return 0xFFFFFFFFLL;
  return strcmp(v7, v8);
}

void LiMaterialSamplerInfo::getTexture(LiMaterialSamplerInfo *this@<X0>, PCWorkingColorVector *a2@<X8>)
{
  void (*v4)(_anonymous_namespace_ **);
  uint64_t v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _BYTE v11[40];

  v4 = ProGL::TextureHandle::operator void (ProGL::TextureHandle::*)(void)((void (**)(_anonymous_namespace_ **))this + 18);
  if (v5)
    v6 = (v5 & 1 | (unint64_t)v4) == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (v4 || v7)
  {
    v8 = *((_QWORD *)this + 19);
    *(_QWORD *)a2 = *((_QWORD *)this + 18);
    *((_QWORD *)a2 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    ProGL::GL::GL((ProGL::GL *)v11);
    LiTextureStoreToken::redeem((os_unfair_lock_s **)this + 20, (ProGL::GL *)v11, a2);
    ProGL::GL::~GL((ProGL::GL *)v11);
  }
}

void sub_1B2D13C98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

uint64_t PCArray<LiString,PCArray_Traits<LiString>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656E338;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiString,PCArray_Traits<LiString>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

LiMaterialSamplerInfo *LiMaterial::obtainSamplerInfo(LiMaterial *this, const ProShade::SamplerNode *a2)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  LiMaterialSamplerInfo *v10;
  const ProShade::SamplerNode *v12;
  const ProShade::SamplerNode **v13;

  v4 = (os_unfair_lock_s *)((char *)this + 624);
  v12 = a2;
  PCSpinLock::lock((os_unfair_lock_t)this + 156);
  v5 = (_QWORD *)*((_QWORD *)this + 76);
  if (!v5)
    goto LABEL_12;
  v6 = (_QWORD *)((char *)this + 608);
  do
  {
    v7 = v5[4];
    v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != (_QWORD *)((char *)this + 608) && v6[4] <= (unint64_t)a2)
  {
    v10 = (LiMaterialSamplerInfo *)v6[5];
  }
  else
  {
LABEL_12:
    v10 = (LiMaterialSamplerInfo *)operator new();
    LiMaterialSamplerInfo::LiMaterialSamplerInfo(v10);
    v13 = &v12;
    std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>((uint64_t **)this + 75, (unint64_t *)&v12, (uint64_t)&std::piecewise_construct, (uint64_t **)&v13)[5] = (uint64_t)v10;
  }
  PCSpinLock::unlock(v4);
  return v10;
}

void sub_1B2D13DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_unfair_lock_s *a9)
{
  uint64_t v9;

  MEMORY[0x1B5E29170](v9, 0x10A0C40905BE205);
  PCLockSentry<PCSpinLock>::~PCLockSentry(&a9);
  _Unwind_Resume(a1);
}

uint64_t LiMaterial::getSamplerInfo(os_unfair_lock_s *this, const ProShade::SamplerNode *a2)
{
  os_unfair_lock_s *v4;
  _QWORD *v5;
  os_unfair_lock_s *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = this + 156;
  PCSpinLock::lock(this + 156);
  v5 = *(_QWORD **)&this[152]._os_unfair_lock_opaque;
  if (!v5)
    goto LABEL_12;
  v6 = this + 152;
  do
  {
    v7 = v5[4];
    v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2)
      v9 = v5;
    else
      v9 = v5 + 1;
    if (v8)
      v6 = (os_unfair_lock_s *)v5;
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v6 != &this[152] && *(_QWORD *)&v6[8]._os_unfair_lock_opaque <= (unint64_t)a2)
    v10 = *(_QWORD *)&v6[10]._os_unfair_lock_opaque;
  else
LABEL_12:
    v10 = 0;
  PCSpinLock::unlock(v4);
  return v10;
}

void LiMaterial::setTexture(LiMaterial *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  LiMaterialSamplerInfo *v7;

  v7 = LiMaterial::obtainSamplerInfo(a1, *(const ProShade::SamplerNode **)(a2 + 16));
  LiMaterialSamplerInfo::set((uint64_t)v7, (const PCSharedCount *)a2, a3, a4);
}

void LiMaterialSamplerInfo::set(uint64_t a1, const PCSharedCount *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t i;
  uint64_t j;

  ProShade::VarT<ProShade::Node>::operator=(a1, a2);
  ProShade::VarT<ProShade::Node>::operator=(a1 + 32, a2 + 4);
  ProShade::VarT<ProShade::Node>::operator=(a1 + 64, a2 + 8);
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(a1 + 144), a3);
  PCPtr<LiImageSource>::reset((_QWORD *)(a1 + 96));
  v8 = a1 + 184;
  if (a1 + 184 != a4)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v8 + j) = *(_QWORD *)(a4 + j);
      v8 += 32;
      a4 += 32;
    }
  }
}

void LiMaterial::setTexture(LiMaterial *a1, uint64_t a2, uint64_t *a3, char a4, uint64_t a5)
{
  LiMaterialSamplerInfo *v9;

  v9 = LiMaterial::obtainSamplerInfo(a1, *(const ProShade::SamplerNode **)(a2 + 16));
  LiMaterialSamplerInfo::set((uint64_t)v9, (const PCSharedCount *)a2, a3, a4, a5);
}

void LiMaterialSamplerInfo::set(uint64_t a1, const PCSharedCount *a2, uint64_t *a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t i;
  uint64_t j;

  ProShade::VarT<ProShade::Node>::operator=(a1, a2);
  ProShade::VarT<ProShade::Node>::operator=(a1 + 32, a2 + 4);
  ProShade::VarT<ProShade::Node>::operator=(a1 + 64, a2 + 8);
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(a1 + 160), a3);
  *(_BYTE *)(a1 + 176) = a4;
  PCPtr<LiImageSource>::reset((_QWORD *)(a1 + 96));
  v10 = a1 + 184;
  if (a1 + 184 != a5)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v10 + j) = *(_QWORD *)(a5 + j);
      v10 += 32;
      a5 += 32;
    }
  }
}

void LiMaterial::setTexture(LiMaterial *a1, uint64_t a2, const PCSharedCount *a3, CGColorSpace *a4, _OWORD *a5, double a6)
{
  LiMaterialSamplerInfo *v11;

  v11 = LiMaterial::obtainSamplerInfo(a1, *(const ProShade::SamplerNode **)(a2 + 16));
  LiMaterialSamplerInfo::set((uint64_t)v11, (const PCSharedCount *)a2, a3, a4, a5, a6);
}

void LiMaterialSamplerInfo::set(uint64_t a1, const PCSharedCount *a2, const PCSharedCount *a3, CGColorSpace *a4, _OWORD *a5, double a6)
{
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;

  ProShade::VarT<ProShade::Node>::operator=(a1, a2);
  ProShade::VarT<ProShade::Node>::operator=(a1 + 32, a2 + 4);
  ProShade::VarT<ProShade::Node>::operator=(a1 + 64, a2 + 8);
  *(PCSharedCount *)(a1 + 96) = (PCSharedCount)a3->var0;
  PCSharedCount::PCSharedCount((PCSharedCount *)&v15, a3 + 1);
  PCSharedCount::operator=((uint64_t *)(a1 + 104), (uint64_t *)&v15);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v15);
  PCColorSpaceHandle::setColorSpace((CGColorSpace **)(a1 + 112), a4);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v15);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100](a1 + 144, &v15);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(double *)(a1 + 136) = a6;
  if (a5)
    *(_OWORD *)(a1 + 120) = *a5;
}

void sub_1B2D141E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCSharedCount a9)
{
  PCSharedCount::~PCSharedCount(&a9);
  _Unwind_Resume(a1);
}

uint64_t *LiMaterial::getProgramCache(LiMaterial *this)
{
  unsigned __int8 v1;
  uint64_t v3;

  {
    v3 = operator new();
    *(_QWORD *)v3 = 0;
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    *(_QWORD *)(v3 + 24) = v3 + 32;
    *(_OWORD *)(v3 + 48) = 0u;
    *(_OWORD *)(v3 + 64) = 0u;
    *(_QWORD *)(v3 + 80) = 0;
    *(_QWORD *)(v3 + 88) = -1;
    *(_QWORD *)(v3 + 96) = -1;
    *(_QWORD *)(v3 + 104) = 0;
    LiMaterial::getProgramCache(void)::cache = v3;
    __cxa_atexit((void (*)(void *))PCCache<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::~PCCache, &LiMaterial::getProgramCache(void)::cache, &dword_1B2737000);
  }
  if (LiMaterial::getProgramCache(void)::once != -1)
    dispatch_once(&LiMaterial::getProgramCache(void)::once, &__block_literal_global_69);
  return &LiMaterial::getProgramCache(void)::cache;
}

void sub_1B2D142D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN10LiMaterial15getProgramCacheEv_block_invoke()
{
  PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::setMaxSize((_QWORD *)LiMaterial::getProgramCache(void)::cache, 1000);
}

void LiMaterial::getProgram(uint64_t a1@<X0>, LiContext *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  OZChannelBase *v8;
  int isObjectRef;
  LiMaterial *v10;
  uint64_t v11;
  PCSharedCount v12;
  int v13[6];
  __int128 v14;
  PCSharedCount v15;
  unsigned __int8 v16[4];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v8 = (OZChannelBase *)(*(_QWORD *(**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 168))(&v14);
  isObjectRef = OZChannelBase::isObjectRef(v8);
  *(_DWORD *)v16 = a3;
  v17 = isObjectRef;
  PCHash128::addData((int8x8_t *)&v14, v16, 8uLL);
  LiContext::getHash(a2);
  PCHash128::operator+=((int *)&v14, v13);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)v13);
  *(_OWORD *)v13 = v14;
  LiMaterial::getProgramCache(v10);
  LOBYTE(v11) = 0;
  PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::findValue(LiMaterial::getProgramCache(void)::cache, (const PCHash128 *)v13, &v11, (PCSharedCount *)a4);
  if (!*(_QWORD *)a4)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, LiContext *))(*(_QWORD *)a1 + 176))(&v11, a1, a2);
    *(_QWORD *)a4 = v11;
    PCSharedCount::PCSharedCount(&v15, &v12);
    PCSharedCount::operator=((uint64_t *)(a4 + 8), (uint64_t *)&v15);
    PCSharedCount::~PCSharedCount(&v15);
    PCSharedCount::~PCSharedCount(&v12);
    PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::addValue(LiMaterial::getProgramCache(void)::cache, (const PCHash128 *)v13, (const PCSharedCount *)a4, 0);
  }
}

void sub_1B2D14444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16)
{
  PCSharedCount *v16;

  PCSharedCount::~PCSharedCount(v16 + 1);
  _Unwind_Resume(a1);
}

void LiMaterial::setUniforms(LiMaterial **this, const LiTextureCoordinator *a2)
{
  __CFString **CurrentContextUniformData;
  ProShade::UniformData *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  LiMaterial *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int TextureID;
  const void *v15;
  unsigned int v16;
  LiMaterial *v17;
  LiMaterial *v18;
  BOOL v19;
  float32x4_t v20;
  LiImageSource *v21;
  PCSharedCount v22;

  CurrentContextUniformData = (__CFString **)ProShade::UniformData::getCurrentContextUniformData((ProShade::UniformData *)this);
  v5 = (ProShade::UniformData *)CurrentContextUniformData;
  v6 = *((unsigned int *)this + 147);
  if ((int)v6 >= 1)
  {
    v7 = 0;
    v8 = 8;
    do
    {
      if (v7 >= *((int *)this + 147))
        PCArray_base::badIndex((PCArray_base *)CurrentContextUniformData);
      CurrentContextUniformData = ProShade::UniformData::set(v5, *(ProShade::UniformNode **)((char *)this[74] + v8 - 8), (const PCString *)((char *)this[74] + v8));
      ++v7;
      v8 += 152;
    }
    while (v6 != v7);
  }
  v9 = this[75];
  if (v9 != (LiMaterial *)(this + 76))
  {
    do
    {
      v10 = *((_QWORD *)v9 + 5);
      v21 = *(LiImageSource **)(v10 + 96);
      PCSharedCount::PCSharedCount(&v22, (const PCSharedCount *)(v10 + 104));
      v11 = LiTextureCoordinator::textureForImage(a2, v21);
      v12 = v11;
      if (v11)
        ProShade::Sampler::setWrapMode(v10, *(_DWORD *)(v11 + 24));
      v13 = LiMaterialSamplerInfo::textureID((LiMaterialSamplerInfo *)v10);
      TextureID = v13;
      if (v12 && !v13)
        TextureID = LiMaterialTextureInfo::getTextureID((HGGLBlendingInfo **)v12);
      if (TextureID)
      {
        ProShade::Sampler::setTexture((ProShade::Sampler *)v10, TextureID);
        ProShade::Sampler::setWrapMode(v10, *(_DWORD *)(v10 + 320));
        v15 = (const void *)(v12 ? v12 + 32 : v10 + 184);
        ProShade::UniformData::set<PCMatrix44Tmpl<double>>(v5, v10 + 64, v15);
        v16 = LiMaterialSamplerInfo::textureID((LiMaterialSamplerInfo *)v10);
        if (v12)
        {
          if (!v16)
          {
            v20 = vcvtq_f32_s32(*(int32x4_t *)(v12 + 160));
            ProShade::UniformData::set<PCVector4<float>>(v5, v10 + 32, (float32x2_t *)&v20);
          }
        }
      }
      PCSharedCount::~PCSharedCount(&v22);
      v17 = (LiMaterial *)*((_QWORD *)v9 + 1);
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = *(LiMaterial **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (LiMaterial *)*((_QWORD *)v9 + 2);
          v19 = *(_QWORD *)v18 == (_QWORD)v9;
          v9 = v18;
        }
        while (!v19);
      }
      v9 = v18;
    }
    while (v18 != (LiMaterial *)(this + 76));
  }
}

void sub_1B2D14624(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

HGGLBlendingInfo *LiMaterialSamplerInfo::textureID(LiMaterialSamplerInfo *this)
{
  HGGLBlendingInfo *Name;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  HGGLBlendingInfo *v6;
  std::__shared_weak_count *v7;

  LiMaterialSamplerInfo::getTexture(this, (PCWorkingColorVector *)&v6);
  Name = ProGL::TextureHandle::getName(&v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return Name;
}

void sub_1B2D146B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__CFString **ProShade::UniformData::set<PCMatrix44Tmpl<double>>(ProShade::UniformData *a1, uint64_t a2, const void *a3)
{
  PCString v7[19];

  v7[18] = *(PCString *)MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v7);
  ProShade::Value::set((uint64_t)v7, (const PCString *)3, 7, a3);
  return ProShade::UniformData::set(a1, *(ProShade::UniformNode **)(a2 + 16), v7);
}

__CFString **ProShade::UniformData::set<PCVector4<float>>(ProShade::UniformData *a1, uint64_t a2, float32x2_t *a3)
{
  float64x2_t v6;
  _OWORD v8[2];
  PCString v9[19];

  v9[18] = *(PCString *)MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v9);
  v6 = vcvtq_f64_f32(a3[1]);
  v8[0] = vcvtq_f64_f32(*a3);
  v8[1] = v6;
  ProShade::Value::set((uint64_t)v9, (const PCString *)3, 4, v8);
  return ProShade::UniformData::set(a1, *(ProShade::UniformNode **)(a2 + 16), v9);
}

void LiMaterial::getSamplerInfos(uint64_t a1, char **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;

  v2 = *(_QWORD **)(a1 + 600);
  v3 = (_QWORD *)(a1 + 608);
  if (v2 != (_QWORD *)(a1 + 608))
  {
    v5 = a2 + 2;
    v6 = a2[1];
    do
    {
      v7 = v2[5];
      if ((unint64_t)v6 >= *v5)
      {
        v8 = (v6 - *a2) >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v9 = *v5 - (_QWORD)*a2;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v5, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = v7;
        v6 = v13 + 8;
        v15 = *a2;
        v14 = a2[1];
        if (v14 != *a2)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = *a2;
        }
        *a2 = v13;
        a2[1] = v6;
        a2[2] = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v6 = v7;
        v6 += 8;
      }
      a2[1] = v6;
      v17 = (_QWORD *)v2[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v2[2];
          v19 = *v18 == (_QWORD)v2;
          v2 = v18;
        }
        while (!v19);
      }
      v2 = v18;
    }
    while (v18 != v3);
  }
}

double *LiMaterial::setAlpha(double *result, double a2, double a3, double a4)
{
  result[79] = a2;
  result[80] = a3;
  result[81] = a4;
  return result;
}

double LiMaterial::getAlpha(LiMaterial *this)
{
  return *((double *)this + 79);
}

uint64_t LiMaterial::parts(LiMaterial *this)
{
  return *((unsigned int *)this + 142);
}

uint64_t LiMaterial::setParts(uint64_t this, int a2)
{
  *(_DWORD *)(this + 568) = a2;
  return this;
}

void LiMaterial::setSamplerProperties()
{
  PCException *exception;
  PCString v1;
  PCString v2;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v2, "subclass must implement");
  PCString::PCString(&v1, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiMaterial.h");
  PCException::PCException(exception, &v2, &v1, 328);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2D149DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void LiMaterialSamplerInfo::~LiMaterialSamplerInfo(LiMaterialSamplerInfo *this)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 14);
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 13);
  *(_QWORD *)this = &unk_1E656A018;
  *((_QWORD *)this + 8) = &unk_1E656A080;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 11);
  *((_QWORD *)this + 4) = &unk_1E656A080;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 7);
  *(_QWORD *)this = &unk_1E656A0C0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 3);
}

uint64_t parseName(const LiString *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  const char *v14;

  v1 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v2 = *(unsigned int *)(v1 - 8);
    v3 = v2 - 1;
    while (1)
    {
      v4 = __OFSUB__((_DWORD)v2, 1);
      LODWORD(v2) = v2 - 1;
      if ((int)v2 < 0 != v4)
        break;
      v5 = *(unsigned __int8 *)(v1 + v3--);
      if (v5 == 95)
      {
        if ((v2 & 0x80000000) != 0)
          return 0xFFFFFFFFLL;
        LiString::from(a1, v2 + 1, (LiString *)&v14);
        v6 = v14;
        if (v14)
          v7 = v14;
        else
          v7 = "";
        v8 = atoi(v7);
        if (v6)
        {
          v9 = (unsigned int *)(v6 - 12);
          do
          {
            v10 = __ldaxr(v9);
            v11 = v10 - 1;
          }
          while (__stlxr(v11, v9));
          if (!v11)
          {
            *v14 = 0;
            if (v14)
              v12 = (char *)(v14 - 12);
            else
              v12 = 0;
            free(v12);
          }
        }
        return v8;
      }
    }
  }
  return 0xFFFFFFFFLL;
}

void LiString::from(LiString *this@<X0>, int a2@<W1>, LiString *a3@<X8>)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this && (v4 = *(_DWORD *)(v3 - 8), v4 > a2))
    LiString::LiString(a3, (const char *)(v3 + a2), v4 - a2);
  else
    *(_QWORD *)a3 = 0;
}

void LiString::LiString(LiString *this, const char *a2, unsigned int a3)
{
  unsigned int v6;
  size_t v7;
  unsigned int *v8;

  if ((int)a3 < 1)
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    v6 = a3 + 1;
    v7 = a3;
    v8 = (unsigned int *)malloc_type_malloc(a3 + 13, 0x8903763CuLL);
    v8[2] = v6;
    atomic_store(1u, v8);
    *(_QWORD *)this = v8 + 3;
    v8[1] = a3;
    memcpy(v8 + 3, a2, v7);
    *(_BYTE *)(*(_QWORD *)this + a3) = 0;
  }
}

void LiMaterialSamplerInfo::LiMaterialSamplerInfo(LiMaterialSamplerInfo *this)
{
  PCSharedCount *v2;

  v2 = (PCSharedCount *)ProShade::Sampler::Sampler(this);
  v2[12].var0 = 0;
  PCSharedCount::PCSharedCount(v2 + 13);
  *((_QWORD *)this + 14) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiMaterialSamplerInfo *)((char *)this + 120));
  *((_QWORD *)this + 17) = 0x3FF0000000000000;
  PCWorkingColorVector::PCWorkingColorVector((LiMaterialSamplerInfo *)((char *)this + 144));
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_QWORD *)this + 38) = 0x3FF0000000000000;
  *((_QWORD *)this + 33) = 0x3FF0000000000000;
  *((_QWORD *)this + 28) = 0x3FF0000000000000;
  *((_QWORD *)this + 23) = 0x3FF0000000000000;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_BYTE *)this + 312) = 0;
  *((_DWORD *)this + 81) = 0;
  *(_QWORD *)((char *)this + 316) = 0;
  *((_WORD *)this + 164) = 257;
  *((_DWORD *)this + 83) = 0;
  *((_WORD *)this + 168) = 256;
  *((_BYTE *)this + 338) = 0;
}

void sub_1B2D14CC8(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  ProShade::Sampler::~Sampler(v1);
  _Unwind_Resume(a1);
}

void PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656E300;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize((_QWORD *)a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

_QWORD *PCArray<LiMaterial::UniformValue,PCArray_Traits<LiMaterial::UniformValue>>::resize(_QWORD *result, int a2, int a3)
{
  int v3;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char *v10;
  int v11;
  int v12;
  uint64_t v13;
  const PCString *v14;
  char *v15;
  unint64_t v16;
  PCException *exception;
  PCString v18;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v18, "PCArray::resize");
    PCException::PCException(exception, &v18);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v5 = result;
  if (v3 == *((_DWORD *)result + 2))
  {
    v6 = *((_DWORD *)result + 3);
    if (a2 > v6)
    {
      v7 = 152 * v6;
      v8 = a2 - v6;
      do
      {
        v9 = v5[2] + v7;
        *(_QWORD *)(v9 + 144) = 0;
        *(_OWORD *)(v9 + 112) = 0u;
        *(_OWORD *)(v9 + 128) = 0u;
        *(_OWORD *)(v9 + 80) = 0u;
        *(_OWORD *)(v9 + 96) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)v9 = 0u;
        result = ProShade::Value::Value((_QWORD *)(v9 + 8));
        v7 += 152;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (v3)
    {
      v10 = (char *)operator new[]();
      bzero(v10, 152 * v3);
    }
    else
    {
      v10 = 0;
    }
    v11 = *((_DWORD *)v5 + 3);
    if (a2 >= v11)
      v12 = *((_DWORD *)v5 + 3);
    else
      v12 = a2;
    if (v12 < 1)
    {
      v12 = 0;
    }
    else
    {
      v13 = 0;
      do
      {
        v14 = (const PCString *)(v5[2] + v13);
        *(PCString *)&v10[v13] = (PCString)v14->var0;
        ProShade::Value::Value((PCString *)&v10[v13 + 8], v14 + 1);
        v13 += 152;
      }
      while (152 * v12 != v13);
      v11 = *((_DWORD *)v5 + 3);
    }
    if (v12 > v11)
      v11 = v12;
    if (v11 < a2)
    {
      v15 = &v10[152 * v11 + 8];
      v16 = a2 - (unint64_t)v11;
      do
      {
        *((_QWORD *)v15 + 17) = 0;
        *(_OWORD *)(v15 + 120) = 0u;
        *(_OWORD *)(v15 + 104) = 0u;
        *(_OWORD *)(v15 + 88) = 0u;
        *(_OWORD *)(v15 + 72) = 0u;
        *(_OWORD *)(v15 + 56) = 0u;
        *(_OWORD *)(v15 + 40) = 0u;
        *(_OWORD *)(v15 + 24) = 0u;
        *(_OWORD *)(v15 + 8) = 0u;
        *(_OWORD *)(v15 - 8) = 0u;
        v15 = (char *)(ProShade::Value::Value(v15) + 19);
        --v16;
      }
      while (v16);
    }
    result = (_QWORD *)v5[2];
    if (result)
      result = (_QWORD *)MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    v5[2] = v10;
  }
  *((_DWORD *)v5 + 2) = v3;
  *((_DWORD *)v5 + 3) = a2;
  return result;
}

void sub_1B2D14F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PCArray<LiString,PCArray_Traits<LiString>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656E338;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<LiString,PCArray_Traits<LiString>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<LiString,PCArray_Traits<LiString>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  PCException *exception;
  PCString v20;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v20, "PCArray::resize");
    PCException::PCException(exception, &v20);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if ((int)v6 <= a2)
    {
      if ((int)v6 < a2)
        bzero((void *)(*(_QWORD *)(a1 + 16) + 8 * v6), 8 * (~(_DWORD)v6 + a2) + 8);
    }
    else
    {
      v7 = 8 * a2;
      v8 = a2;
      do
      {
        LiString::dec((LiString *)(*(_QWORD *)(a1 + 16) + v7));
        ++v8;
        v7 += 8;
      }
      while (v8 < *(int *)(a1 + 12));
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 8 * v3);
    }
    else
    {
      v9 = 0;
    }
    v10 = *(_DWORD *)(a1 + 12);
    if (a2 >= v10)
      v11 = v10;
    else
      v11 = a2;
    if ((int)v11 < 1)
    {
      LODWORD(v11) = 0;
    }
    else
    {
      for (i = 0; i != v11; ++i)
      {
        v13 = *(_QWORD *)(a1 + 16);
        v14 = *(_QWORD *)(v13 + 8 * i);
        *(_QWORD *)&v9[8 * i] = v14;
        if (v14)
        {
          v15 = (unsigned int *)(v14 - 12);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 + 1, v15));
          v13 = *(_QWORD *)(a1 + 16);
        }
        LiString::dec((LiString *)(v13 + 8 * i));
      }
      v10 = *(_DWORD *)(a1 + 12);
    }
    if ((int)v11 < v10)
    {
      v17 = 8 * v11;
      do
      {
        LiString::dec((LiString *)(*(_QWORD *)(a1 + 16) + v17));
        v17 += 8;
        LODWORD(v11) = v11 + 1;
      }
      while (*(_DWORD *)(a1 + 12) > (int)v11);
    }
    if ((int)v11 < a2)
      bzero(&v9[8 * v11], 8 * (~(_DWORD)v11 + a2) + 8);
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
      MEMORY[0x1B5E2914C](v18, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v9;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2D15238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<LiString,ProShade::Value>,std::__map_value_compare<LiString,std::__value_type<LiString,ProShade::Value>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,ProShade::Value>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<LiString,ProShade::Value>,std::__map_value_compare<LiString,std::__value_type<LiString,ProShade::Value>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,ProShade::Value>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<LiString,ProShade::Value>,std::__map_value_compare<LiString,std::__value_type<LiString,ProShade::Value>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,ProShade::Value>>>::destroy(a1, a2[1]);
    LiString::dec((LiString *)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<LiString,ProShade::Value>,std::__map_value_compare<LiString,std::__value_type<LiString,ProShade::Value>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,ProShade::Value>>>::__emplace_unique_key_args<LiString,std::piecewise_construct_t const&,std::tuple<LiString const&>,std::tuple<>>(uint64_t **a1, const char **a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)std::__tree<LiString>::__find_equal<LiString>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<LiString,ProShade::Value>,std::__map_value_compare<LiString,std::__value_type<LiString,ProShade::Value>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,ProShade::Value>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<LiString const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<LiString,ProShade::Value>,std::__map_value_compare<LiString,std::__value_type<LiString,ProShade::Value>,std::less<LiString>,true>,std::allocator<std::__value_type<LiString,ProShade::Value>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<LiString const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = (uint64_t *)operator new(0xB8uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<LiString const,ProShade::Value>::pair[abi:ne180100]<LiString const&>(v6 + 4, *a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2D153C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  char *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiString,ProShade::Value>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::pair<LiString const,ProShade::Value>::pair[abi:ne180100]<LiString const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if (v3)
  {
    v4 = (unsigned int *)(v3 - 12);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  ProShade::Value::Value(a1 + 1);
  return a1;
}

void sub_1B2D15428(_Unwind_Exception *a1)
{
  LiString *v1;

  LiString::dec(v1);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiString,ProShade::Value>,void *>>>::operator()[abi:ne180100](uint64_t a1, char *__p)
{
  if (*(_BYTE *)(a1 + 8))
    LiString::dec((LiString *)(__p + 32));
  if (__p)
    operator delete(__p);
}

void PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::setMaxSize(_QWORD *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  a1[12] = a2;
  if (!a1[13])
  {
    v3 = a1 + 6;
    v4 = (uint64_t **)(a1 + 3);
    while (a1[10] > a1[11] || a1[5] > a1[12])
    {
      v5 = (uint64_t *)a1[6];
      if (v5 == (uint64_t *)a1[7])
        break;
      v7 = *v5;
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::remove(v3, (uint64_t)&v7);
      v6 = v7;
      a1[10] -= *(_QWORD *)(v7 + 64);
      std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer(v4, (uint64_t *)v6);
      PCSharedCount::~PCSharedCount((PCSharedCount *)(v6 + 56));
      operator delete((void *)v6);
    }
  }
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::remove(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v4 = ((a1[1] - *a1) >> 3) - 1;
  if (v3 == v4)
  {
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v3);
  }
  else
  {
    *(_QWORD *)(*a1 + 8 * v3) = *(_QWORD *)(*a1 + 8 * v4);
    *(_QWORD *)(*(_QWORD *)(*a1 + 8 * v3) + 80) = v3;
    std::vector<std::__map_iterator<std::__tree_iterator<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,std::__tree_node<std::__value_type<ColorConversionKey,PCCacheImpl<ColorConversionKey,std::shared_ptr<PCWorkingColor>,PCNoLock,std::less<ColorConversionKey>>::Data>,void *> *,long>>>::resize((uint64_t)a1, v4);
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::bubble(a1, *a1 + 8 * v3);
  }
}

uint64_t *PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::bubble(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  _BOOL4 v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = *result;
  v3 = result[1] - *result;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v5 = (2 * v4) | 1;
  if (v5 >= v3 >> 3)
  {
LABEL_24:
    if (v4)
    {
      v17 = *(_QWORD *)(v2 + 8 * v4);
      do
      {
        v18 = v4 - 1;
        v19 = (v4 - 1) >> 1;
        v20 = *(_QWORD *)(v2 + 8 * v19);
        if (*(_QWORD *)(v20 + 72) <= *(_QWORD *)(v17 + 72))
          break;
        *(_QWORD *)(v2 + 8 * v4) = v20;
        *(_QWORD *)(v2 + 8 * v19) = v17;
        v2 = *result;
        *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 80) = v4;
        v17 = *(_QWORD *)(v2 + 8 * v19);
        *(_QWORD *)(v17 + 80) = v19;
        v4 = (v4 - 1) >> 1;
      }
      while (v18 > 1);
    }
    return result;
  }
  v6 = 0;
  v7 = v3 >> 3;
  v8 = 2 * v4;
  v9 = *(_QWORD *)(v2 + 8 * v4);
  while (1)
  {
    v10 = v8 + 2;
    v11 = *(_QWORD *)(v9 + 72);
    v12 = v10 < v7 && v11 > *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 72);
    v13 = *(_QWORD *)(*(_QWORD *)(v2 + 8 * v5) + 72);
    if (v11 <= v13 && !v12)
      break;
    v15 = v11 > v13 && v12;
    if (v12)
      v16 = v10;
    else
      v16 = v5;
    if (v15)
    {
      if (v13 <= *(_QWORD *)(*(_QWORD *)(v2 + 8 * v10) + 72))
        v16 = v5;
      else
        v16 = v10;
    }
    *(_QWORD *)(v2 + 8 * v4) = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v2 + 8 * v16) = v9;
    v2 = *result;
    *(_QWORD *)(*(_QWORD *)(*result + 8 * v4) + 80) = v4;
    v9 = *(_QWORD *)(v2 + 8 * v16);
    *(_QWORD *)(v9 + 80) = v16;
    v8 = 2 * v16;
    v6 = 1;
    v5 = (2 * v16) | 1;
    v4 = v16;
    if (v5 >= v7)
      return result;
  }
  if ((v6 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
    goto LABEL_24;
  }
  return result;
}

uint64_t *PCCache<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::~PCCache(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1 + 32;
  std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::destroy(*a1 + 24, *(PCSharedCount **)v2);
  *(_QWORD *)(v2 - 8) = v2;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 48) = 0;
  std::unique_ptr<PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>>::reset[abi:ne180100](a1, 0);
  return a1;
}

void std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::destroy(uint64_t a1, PCSharedCount *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::destroy(a1, a2->var0);
    std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::destroy(a1, a2[1].var0);
    PCSharedCount::~PCSharedCount(a2 + 7);
    operator delete(a2);
  }
}

uint64_t std::unique_ptr<PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::~PCCacheImpl(result);
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::~PCCacheImpl(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::destroy(a1 + 24, *(PCSharedCount **)(a1 + 32));
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

void PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::findValue(uint64_t a1@<X0>, const PCHash128 *a2@<X1>, _BYTE *a3@<X2>, PCSharedCount *a4@<X8>)
{
  const PCSharedCount *v7;
  const PCSharedCount *v8;
  uint64_t v9;
  const PCSharedCount *v10;

  v7 = (const PCSharedCount *)std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::find<LiMaterial::ShaderKey>(a1 + 24, a2);
  v10 = v7;
  if ((const PCSharedCount *)(a1 + 32) == v7)
  {
    *a3 = 0;
    a4->var0 = 0;
    PCSharedCount::PCSharedCount(a4 + 1);
  }
  else
  {
    v8 = v7;
    a4->var0 = v7[6].var0;
    PCSharedCount::PCSharedCount(a4 + 1, v7 + 7);
    v9 = *(_QWORD *)(a1 + 72) + 1;
    *(_QWORD *)(a1 + 72) = v9;
    v8[9].var0 = (PC_Sp_counted_base *)v9;
    PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), (uint64_t)&v10);
    *a3 = 1;
  }
}

void sub_1B2D158A0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::find<LiMaterial::ShaderKey>(uint64_t a1, const PCHash128 *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = LiMaterial::ShaderKey::compare((const PCHash128 *)(v3 + 4), a2);
    v7 = v3 + 1;
    if (v6 != -1)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || LiMaterial::ShaderKey::compare(a2, (const PCHash128 *)(v5 + 4)) == -1)
    return v2;
  return v5;
}

uint64_t LiMaterial::ShaderKey::compare(const PCHash128 *a1, const PCHash128 *a2)
{
  if (operator<(a1, a2))
    return 0xFFFFFFFFLL;
  else
    return operator>(a1, a2);
}

void PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::addValue(uint64_t a1, const PCHash128 *a2, const PCSharedCount *a3, unint64_t a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  PC_Sp_counted_base *v16;
  PCSharedCount v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20[2];
  PC_Sp_counted_base *var0;
  PCSharedCount v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;

  if (*(_QWORD *)(a1 + 88) >= a4 || *(_QWORD *)(a1 + 104))
  {
    v8 = std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::find<LiMaterial::ShaderKey>(a1 + 24, a2);
    v25 = v8;
    if ((_QWORD *)(a1 + 32) == v8)
    {
      v10 = *(_QWORD *)(a1 + 72) + 1;
      *(_QWORD *)(a1 + 72) = v10;
      var0 = a3->var0;
      PCSharedCount::PCSharedCount(&v22, a3 + 1);
      *(_QWORD *)&v23 = a4;
      *((_QWORD *)&v23 + 1) = v10;
      v24 = 0;
      v15 = *(_OWORD *)a2;
      v16 = var0;
      PCSharedCount::PCSharedCount(&v17, &v22);
      v18 = v23;
      v19 = v24;
      v20[0] = (uint64_t)std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::__emplace_unique_key_args<LiMaterial::ShaderKey,std::pair<LiMaterial::ShaderKey const,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>((uint64_t **)(a1 + 24), (const PCHash128 *)&v15, (uint64_t)&v15);
      v20[1] = v11;
      PCSharedCount::~PCSharedCount(&v17);
      PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::add((void **)(a1 + 48), v20);
      v12 = *(_QWORD *)(a1 + 80) + a4;
      *(_QWORD *)(a1 + 80) = v12;
      if (!*(_QWORD *)(a1 + 104))
      {
        while (v12 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
        {
          v14 = *(_QWORD **)(a1 + 48);
          if (v14 == *(_QWORD **)(a1 + 56))
            break;
          *(_QWORD *)&v15 = *v14;
          PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::remove((uint64_t *)(a1 + 48), (uint64_t)&v15);
          v13 = v15;
          *(_QWORD *)(a1 + 80) -= *(_QWORD *)(v15 + 64);
          std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), (uint64_t *)v13);
          PCSharedCount::~PCSharedCount((PCSharedCount *)(v13 + 56));
          operator delete((void *)v13);
          v12 = *(_QWORD *)(a1 + 80);
        }
      }
      PCSharedCount::~PCSharedCount(&v22);
    }
    else
    {
      v8[6] = a3->var0;
      v9 = v8 + 7;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v15, a3 + 1);
      PCSharedCount::operator=(v9, (uint64_t *)&v15);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v15);
      PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::update(a1, (uint64_t)&v25, a4);
    }
  }
}

void sub_1B2D15B50(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::add(void **a1, uint64_t *a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v4 = (char *)*a1;
  v5 = a1[1];
  v6 = ((char *)v5 - (_BYTE *)*a1) >> 3;
  v7 = *a2;
  *(_QWORD *)(*a2 + 80) = v6;
  v10 = (unint64_t)a1[2];
  v8 = (uint64_t)(a1 + 2);
  v9 = v10;
  if ((unint64_t)v5 >= v10)
  {
    if ((unint64_t)(v6 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v12 = v9 - (_QWORD)v4;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v6 + 1))
      v13 = v6 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v8, v14);
      v7 = *a2;
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v6];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = v7;
    v11 = v16 + 8;
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v11;
    a1[2] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v5 = v7;
    v11 = v5 + 1;
  }
  a1[1] = v11;
  v21 = *(_QWORD *)(*a2 + 80);
  if (v21)
  {
    v22 = (char *)*a1;
    v23 = *((_QWORD *)*a1 + v21);
    do
    {
      v24 = v21 - 1;
      v25 = (v21 - 1) >> 1;
      v26 = *(_QWORD *)&v22[8 * v25];
      if (*(_QWORD *)(v26 + 72) <= *(_QWORD *)(v23 + 72))
        break;
      *(_QWORD *)&v22[8 * v21] = v26;
      *(_QWORD *)&v22[8 * v25] = v23;
      v22 = (char *)*a1;
      *(_QWORD *)(*((_QWORD *)*a1 + v21) + 80) = v21;
      v23 = *(_QWORD *)&v22[8 * v25];
      *(_QWORD *)(v23 + 80) = v25;
      v21 = (v21 - 1) >> 1;
    }
    while (v24 > 1);
  }
}

void PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::update(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a1 + 72) + 1;
  *(_QWORD *)(a1 + 72) = v6;
  *(_QWORD *)(*(_QWORD *)a2 + 72) = v6;
  v7 = (uint64_t *)(a1 + 48);
  PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::bubble((uint64_t *)(a1 + 48), a2);
  v8 = *(_QWORD *)a2;
  v9 = a3 - *(_QWORD *)(*(_QWORD *)a2 + 64);
  if (v9)
  {
    v10 = v9 + *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v10;
    *(_QWORD *)(v8 + 64) = a3;
    if (!*(_QWORD *)(a1 + 104))
    {
      while (v10 > *(_QWORD *)(a1 + 88) || *(_QWORD *)(a1 + 40) > *(_QWORD *)(a1 + 96))
      {
        v11 = *(uint64_t **)(a1 + 48);
        if (v11 == *(uint64_t **)(a1 + 56))
          break;
        v13 = *v11;
        PCEvictionHeap<std::__map_iterator<std::__tree_iterator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *> *,long>>>::remove(v7, (uint64_t)&v13);
        v12 = v13;
        *(_QWORD *)(a1 + 80) -= *(_QWORD *)(v13 + 64);
        std::__tree<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,PVInstructionGraphNode * {__strong}>>>::__remove_node_pointer((uint64_t **)(a1 + 24), (uint64_t *)v12);
        PCSharedCount::~PCSharedCount((PCSharedCount *)(v12 + 56));
        operator delete((void *)v12);
        v10 = *(_QWORD *)(a1 + 80);
      }
    }
  }
}

uint64_t *std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::__emplace_unique_key_args<LiMaterial::ShaderKey,std::pair<LiMaterial::ShaderKey const,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>(uint64_t **a1, const PCHash128 *a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::__find_equal<LiMaterial::ShaderKey>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::__construct_node<std::pair<LiMaterial::ShaderKey const,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::__find_equal<LiMaterial::ShaderKey>(uint64_t a1, _QWORD *a2, const PCHash128 *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  const PCHash128 *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (const PCHash128 *)(v4 + 4);
        if (LiMaterial::ShaderKey::compare(a3, (const PCHash128 *)(v4 + 4)) != -1)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (LiMaterial::ShaderKey::compare(v8, a3) != -1)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

__n128 std::__tree<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::__map_value_compare<LiMaterial::ShaderKey,std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,std::less<LiMaterial::ShaderKey>,true>,std::allocator<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>>::__construct_node<std::pair<LiMaterial::ShaderKey const,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  __n128 result;

  v5 = a1 + 8;
  v6 = operator new(0x58uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_OWORD *)v6 + 2) = *(_OWORD *)a2;
  *((_QWORD *)v6 + 6) = *(_QWORD *)(a2 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)v6 + 7, (const PCSharedCount *)(a2 + 24));
  result = *(__n128 *)(a2 + 32);
  *((__n128 *)v6 + 4) = result;
  *((_QWORD *)v6 + 10) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B2D15F54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<LiMaterial::ShaderKey,PCCacheImpl<LiMaterial::ShaderKey,PCPtr<ProShade::Program>,PCNoLock,std::less<LiMaterial::ShaderKey>>::Data>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  PCSharedCount *v2;

  v2 = *(PCSharedCount **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      PCSharedCount::~PCSharedCount(v2 + 7);
    operator delete(v2);
  }
}

void LiImageSource::LiImageSource(LiImageSource *this, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  *(_QWORD *)this = v2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v2 - 24)) = a2[2];
  v3 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24)) = a2[3];
  *((_BYTE *)this + 12) = 0;
  *((_DWORD *)this + 2) = 0;
}

void LiImageSource::clone(LiImageSource *this)
{
  PCException *exception;
  PCString v2;
  PCString v3;

  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v3, "subclass must implement");
  PCString::PCString(&v2, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiImageSource.cpp");
  PCException::PCException(exception, &v3, &v2, 34);
  *(_QWORD *)exception = &unk_1E64FFFA0;
}

void sub_1B2D1607C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t LiImageSource::getBoundary()
{
  return 0;
}

uint64_t LiImageSource::filteredEdges(LiImageSource *this)
{
  return 0;
}

{
  return (*(uint64_t (**)(LiImageSource *))(*(_QWORD *)this + 32))(this);
}

void LiImageSource::repr(LiImageSource *this@<X0>, LiString *a2@<X8>)
{
  if (!this)
    __cxa_bad_typeid();
  LiString::LiString(a2, (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
}

_QWORD *LiImageSource::printIndent(_QWORD *result, int a2)
{
  int v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      --v2;
      result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"  ", 2);
    }
    while (v2);
  }
  return result;
}

uint64_t LiImageSource::print(_QWORD *a1, _QWORD *a2, int a3)
{
  int v5;
  const char *v6;
  size_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  std::locale v11;

  if (a3)
  {
    v5 = a3;
    do
    {
      --v5;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"  ", 2);
    }
    while (v5);
  }
  if (!a1)
    __cxa_bad_typeid();
  v6 = (const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v7 = strlen(v6);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v6, v7);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v11, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v11);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_1B2D16230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiImageSource::fixSourcePixelTransform(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

double LiImageSource::fixPixelTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  float64x2_t v6;
  double v7;
  float64x2_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;

  switch((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a4))
  {
    case 0u:
      *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
      *(_QWORD *)a3 = 0x3FF0000000000000;
      result = 0.0;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      break;
    case 1u:
      v10 = 0.0;
      v11 = 0.0;
      v12 = 0;
      v8 = 0uLL;
      v9 = 0.0;
      getScaleTranslate((float64x2_t *)a3, (uint64_t)&v10, &v8);
      v12 = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
      *(_QWORD *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      *(_QWORD *)&result = *(_OWORD *)&PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v10, v11, 1.0);
      break;
    case 2u:
    case 3u:
      v10 = 0.0;
      v11 = 0.0;
      v12 = 0;
      v8 = 0uLL;
      v9 = 0.0;
      getScaleTranslateFlip((float64x2_t *)a3, (uint64_t)&v10, &v8);
      v12 = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
      *(_QWORD *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      v6 = PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v10, v11, 1.0);
      goto LABEL_7;
    case 4u:
      v10 = 0.0;
      v11 = 0.0;
      v12 = 0;
      v8 = 0uLL;
      v9 = 0.0;
      v7 = 0.0;
      getScaleTranslateRotate((float64x2_t *)a3, (uint64_t)&v10, &v8, &v7);
      v12 = 0x3FF0000000000000;
      v9 = 0.0;
      *(_QWORD *)(a3 + 120) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(a3 + 40) = 0x3FF0000000000000;
      *(_QWORD *)a3 = 0x3FF0000000000000;
      *(_OWORD *)(a3 + 8) = 0u;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 88) = 0u;
      *(_OWORD *)(a3 + 104) = 0u;
      PCMatrix44Tmpl<double>::leftScale((float64x2_t *)a3, v10, v11, 1.0);
      PCMatrix44Tmpl<double>::leftRotate((double *)a3, 4, 0.0, 0.0, v7);
LABEL_7:
      v6.f64[0] = v8.f64[0];
      *(_QWORD *)&result = *(_OWORD *)&PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)a3, v6, v8.f64[1], v9);
      break;
    case 5u:
      v10 = 0.0;
      v11 = 0.0;
      v12 = 0;
      *(_QWORD *)&result = *(_OWORD *)&perspectiveToAffine((float64x2_t *)a3, &v10, (double *)a3);
      break;
    default:
      return result;
  }
  return result;
}

void PCMatrix44Tmpl<double>::leftRotate(double *a1, int a2, double a3, double a4, double a5)
{
  double *v9;
  double v10;
  int v11;
  double *v12;
  double v13;
  int v14;
  double *v15;
  double v16;
  int v17;

  switch(a2)
  {
    case 0:
      PCMatrix44Tmpl<double>::leftRotate(a1, 0, a3);
      v9 = a1;
      v10 = a4;
      v11 = 1;
      goto LABEL_5;
    case 1:
      PCMatrix44Tmpl<double>::leftRotate(a1, 0, a3);
      v12 = a1;
      v13 = a5;
      v14 = 2;
      goto LABEL_8;
    case 2:
      PCMatrix44Tmpl<double>::leftRotate(a1, 1, a4);
      v9 = a1;
      v10 = a3;
      v11 = 0;
LABEL_5:
      PCMatrix44Tmpl<double>::leftRotate(v9, v11, v10);
      PCMatrix44Tmpl<double>::leftRotate(a1, 2, a5);
      return;
    case 3:
      PCMatrix44Tmpl<double>::leftRotate(a1, 1, a4);
      v15 = a1;
      v16 = a5;
      v17 = 2;
      goto LABEL_10;
    case 4:
      PCMatrix44Tmpl<double>::leftRotate(a1, 2, a5);
      v12 = a1;
      v13 = a3;
      v14 = 0;
LABEL_8:
      PCMatrix44Tmpl<double>::leftRotate(v12, v14, v13);
      PCMatrix44Tmpl<double>::leftRotate(a1, 1, a4);
      break;
    case 5:
      PCMatrix44Tmpl<double>::leftRotate(a1, 2, a5);
      v15 = a1;
      v16 = a4;
      v17 = 1;
LABEL_10:
      PCMatrix44Tmpl<double>::leftRotate(v15, v17, v16);
      PCMatrix44Tmpl<double>::leftRotate(a1, 0, a3);
      break;
    default:
      return;
  }
}

uint64_t LiImageSource::inheritUseSourcePixelSpace(LiImageSource *this)
{
  return 0;
}

uint64_t LiImageSource::supportsHeliumCPURendering(LiImageSource *this)
{
  return 1;
}

uint64_t LiImageSource::getHeliumPublic(LiImageSource *this, LiAgent *a2)
{
  return (*(uint64_t (**)(LiImageSource *, LiAgent *))(*(_QWORD *)this + 160))(this, a2);
}

uint64_t LiImageSource::handlesDepthOfField(LiImageSource *this)
{
  return 0;
}

uint64_t LiImageFilter::inheritUseSourcePixelSpace(LiImageFilter *this)
{
  return 1;
}

uint64_t LiImageFilter::applyInFilmSpace(LiImageFilter *this)
{
  return 1;
}

uint64_t LiImageFilter::estimateRenderMemory(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 112))(result);
  return result;
}

_QWORD *LiImageFilter::print(uint64_t a1, _QWORD *a2, int a3)
{
  int v6;
  uint64_t v7;

  if (a3)
  {
    v6 = a3;
    do
    {
      --v6;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"  ", 2);
    }
    while (v6);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LiImageFilter Image source:", 27);
  if (!*(_QWORD *)(a1 + 16))
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" NULL\n", 6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    throw_PCNullPointerException(1);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v7 + 128))(v7, a2, (a3 + 1));
}

void LiImageFilter::materialFilter(PCSharedCount *a1@<X8>)
{
  a1->var0 = 0;
  PCSharedCount::PCSharedCount(a1 + 1);
}

void LiImageFilterChain::LiImageFilterChain(LiImageFilterChain *this)
{
  *(_QWORD *)this = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 1);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = &unk_1E64FC2F8;
}

void LiImageFilterChain::LiImageFilterChain(LiImageFilterChain *this, const LiImageFilterChain *a2)
{
  *(_QWORD *)this = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 1);
  *((_QWORD *)this + 2) = &unk_1E64FC2F8;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  LiImageFilterChain::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_1B2D1677C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;

  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::~PCArray(v2);
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t LiImageFilterChain::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int (*v9)(const void *, const void *);
  PCArray_base *v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  PCException *exception;
  PCString v16;
  PCSharedCount v17;
  LiImageFilter *var0;
  PCSharedCount v19;

  if (a1 != a2)
  {
    v4 = a1 + 16;
    if (*(int *)(a1 + 24) < 0)
      v5 = 1;
    else
      v5 = *(_DWORD *)(a1 + 24);
    PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(v4, 0, v5);
    v10 = *(PCArray_base **)(a1 + 32);
    if (v10)
      v10 = (PCArray_base *)MEMORY[0x1B5E2914C](v10, 0x1000C8077774924);
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    v11 = *(unsigned int *)(a2 + 28);
    if ((int)v11 >= 1)
    {
      for (i = 0; i != v11; ++i)
      {
        if (i >= *(int *)(a2 + 28))
          PCArray_base::badIndex(v10);
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16 * i);
        if (!v13)
          throw_PCNullPointerException(1);
        (*(void (**)(PCString *__return_ptr))(*(_QWORD *)v13 + 16))(&v16);
        var0 = (LiImageFilter *)v16.var0;
        PCSharedCount::PCSharedCount(&v19, &v17);
        PCSharedCount::~PCSharedCount(&v17);
        if (!var0)
        {
          exception = (PCException *)__cxa_allocate_exception(0x40uLL);
          PCString::PCString(&v16, "clone failed (sorry, Dolly)");
          PCException::PCException(exception, &v16);
        }
        LiImageFilterChain::append((LiImageFilterChain *)a1, var0);
        PCSharedCount::~PCSharedCount(&v19);
      }
    }
    LiImageFilterChain::connect(a1, v6, v7, v8, v9);
  }
  return a1;
}

void sub_1B2D16908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, PCString a9)
{
  PCSharedCount *v9;

  PCString::~PCString(&a9);
  PCSharedCount::~PCSharedCount(v9);
  _Unwind_Resume(a1);
}

uint64_t LiImageFilterChain::connect(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, int (*a5)(const void *, const void *))
{
  void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  _QWORD *v10;

  v5 = (void *)*(unsigned int *)(this + 28);
  if ((_DWORD)v5)
  {
    v6 = this;
    if (*(int *)(v6 + 28) <= 0)
      PCArray_base::badIndex((PCArray_base *)v7);
    v8 = **(_QWORD **)(v6 + 32);
    if (!v8)
      throw_PCNullPointerException(1);
    this = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 168))(v8, *(_QWORD *)v6);
    if ((int)v5 >= 2)
    {
      for (i = 1; (void *)i != v5; ++i)
      {
        if (i >= *(int *)(v6 + 28))
          PCArray_base::badIndex((PCArray_base *)this);
        v10 = (_QWORD *)(*(_QWORD *)(v6 + 32) + 16 * i);
        if (!*v10)
          throw_PCNullPointerException(1);
        if (i > *(int *)(v6 + 28))
          PCArray_base::badIndex((PCArray_base *)this);
        this = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v10 + 168))(*v10, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 16 * (i - 1)));
      }
    }
  }
  return this;
}

PCShared_base **LiImageFilterChain::setInput(PCShared_base **this, LiImageSource *a2)
{
  PCShared_base **result;
  int v4;
  uint64_t v5;

  result = PCPtr<LiImageSource>::operator=<LiImageSource>(this, (PCShared_base *)a2);
  v4 = *((_DWORD *)this + 7);
  if (v4)
  {
    if (v4 <= 0)
      PCArray_base::badIndex((PCArray_base *)result);
    v5 = *(_QWORD *)this[4];
    if (!v5)
      throw_PCNullPointerException(1);
    return (PCShared_base **)(*(uint64_t (**)(uint64_t, PCShared_base *))(*(_QWORD *)v5 + 168))(v5, *this);
  }
  return result;
}

uint64_t LiImageFilterChain::getTail(LiImageFilterChain *this)
{
  int v1;

  v1 = *((_DWORD *)this + 7);
  if (v1 <= 0)
    PCArray_base::badIndex(this);
  return *(_QWORD *)(*((_QWORD *)this + 4) + 16 * (v1 - 1));
}

uint64_t `anonymous namespace'::by_priority(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _BOOL4 v5;

  if (!*(_QWORD *)a1)
    throw_PCNullPointerException(1);
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v3 = *(_DWORD *)(*(_QWORD *)a2 + 32);
  v4 = v2 < v3;
  v5 = v2 > v3;
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return v5;
}

void LiImageFilterChain::append(LiImageFilterChain *this, const LiImageFilterChain *a2)
{
  uint64_t v2;
  uint64_t i;
  LiImageFilter *v6;
  PCSharedCount v7;
  LiImageFilter *v8;
  PCSharedCount v9;

  v2 = *((unsigned int *)a2 + 7);
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if (i >= *((int *)a2 + 7))
        PCArray_base::badIndex(this);
      (*(void (**)(LiImageFilter **__return_ptr))(**(_QWORD **)(*((_QWORD *)a2 + 4) + 16 * i) + 16))(&v6);
      v8 = v6;
      PCSharedCount::PCSharedCount(&v9, &v7);
      PCSharedCount::~PCSharedCount(&v7);
      LiImageFilterChain::append(this, v8);
      PCSharedCount::~PCSharedCount(&v9);
    }
  }
}

void sub_1B2D16C10(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t LiImageFilter::adjustCasterLocalToWorld(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  return result;
}

void LiMaskBlender::~LiMaskBlender(CGColorSpace **this)
{
  LiBlender::~LiBlender(this);
  JUMPOUT(0x1B5E29170);
}

uint64_t LiMaskBlender::add(uint64_t a1, HGNode **a2, uint64_t a3, uint64_t a4, uint64_t a5, const PCSharedCount *a6, double a7)
{
  LiImagePolygon *v14;
  uint64_t DOD;
  uint64_t v16;
  HGNode *v17;
  uint64_t v18;
  int32x2_t v19;
  uint64_t v20;
  uint64_t result;
  PC_Sp_counted_base *var0;
  PCSharedCount v23;
  uint64_t v24;
  PCSharedCount v25;
  int32x2_t v26;
  uint64_t v27;
  PCSharedCount v28;
  int32x2_t v29[2];

  v14 = *(LiImagePolygon **)(a1 + 8);
  if (v14)
  {
    LiImagePolygon::getDOD(v14, 1.7, v29);
    LiBlender::crop(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    DOD = HGRenderer::GetDOD(*(HGRenderer **)(a1 + 24), *a2);
    HGRectIsNull(DOD, v16);
  }
  v17 = *a2;
  v29[0] = (int32x2_t)v17;
  if (v17)
    (*(void (**)(HGNode *))(*(_QWORD *)v17 + 16))(v17);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 88) + 68))
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v27 = 0;
    PCSharedCount::PCSharedCount(&v28);
    (*(void (**)(uint64_t, int32x2_t *, _QWORD, _QWORD, _QWORD, uint64_t *, double))(*(_QWORD *)v18 + 16))(v18, v29, 0, 0, 0, &v27, 1.0);
    PCSharedCount::~PCSharedCount(&v28);
    (*(void (**)(int32x2_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 168))(&v26, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 24));
    v24 = 0;
    PCSharedCount::PCSharedCount(&v25);
    (*(void (**)(uint64_t, int32x2_t *, uint64_t, _QWORD, _QWORD, uint64_t *, double))(*(_QWORD *)v18 + 16))(v18, &v26, 27, 0, 0, &v24, 1.0);
    PCSharedCount::~PCSharedCount(&v25);
    if (v26)
      (*(void (**)(int32x2_t))(**(_QWORD **)&v26 + 24))(v26);
    (*(void (**)(int32x2_t *__return_ptr, uint64_t))(*(_QWORD *)v18 + 24))(&v26, v18);
    v19 = v26;
    if (*(_QWORD *)v29 == *(_QWORD *)&v26)
    {
      if (v29[0])
        (*(void (**)(void))(**(_QWORD **)v29 + 24))();
    }
    else
    {
      if (v29[0])
      {
        (*(void (**)(void))(**(_QWORD **)v29 + 24))();
        v19 = v26;
      }
      v29[0] = v19;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  v20 = *(_QWORD *)(a1 + 96);
  var0 = a6->var0;
  PCSharedCount::PCSharedCount(&v23, a6 + 1);
  (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, uint64_t, PC_Sp_counted_base **, double))(*(_QWORD *)v20 + 16))(v20, v29, a3, a4, a5, &var0, a7);
  PCSharedCount::~PCSharedCount(&v23);
  result = (uint64_t)v29[0];
  if (v29[0])
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v29 + 24))(*(_QWORD *)v29);
  return result;
}

void sub_1B2D16EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  if (a17)
    (*(void (**)(uint64_t))(*(_QWORD *)a17 + 24))(a17);
  _Unwind_Resume(exception_object);
}

uint64_t LiMaskBlender::getOutput(LiMaskBlender *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 24))(*((_QWORD *)this + 12));
}

uint64_t LiMaskBlender::addPatch(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  PCSharedCount v10;
  uint64_t v11;
  uint64_t v12;
  PCSharedCount v13;
  uint64_t v14;

  v5 = *a3;
  v14 = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 88) + 68))
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    v12 = 0;
    PCSharedCount::PCSharedCount(&v13);
    (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD, _QWORD, uint64_t *, double))(*(_QWORD *)v6 + 16))(v6, &v14, 0, 0, 0, &v12, 1.0);
    PCSharedCount::~PCSharedCount(&v13);
    (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 88) + 168))(&v11, *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 24));
    v9 = 0;
    PCSharedCount::PCSharedCount(&v10);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, uint64_t *, double))(*(_QWORD *)v6 + 16))(v6, &v11, 27, 0, 0, &v9, 1.0);
    PCSharedCount::~PCSharedCount(&v10);
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v6 + 24))(&v11, v6);
    v7 = v11;
    if (v14 == v11)
    {
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
    }
    else
    {
      if (v14)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
        v7 = v11;
      }
      v14 = v7;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 96) + 40))(*(_QWORD *)(a1 + 96), a2, &v14);
  result = v14;
  if (v14)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
  return result;
}

void sub_1B2D17120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 24))(a11);
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 24))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t LiMaskBlender::newInstance(LiMaskBlender *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 12) + 32))(*((_QWORD *)this + 12));
}

uint64_t LiMaskDrawer::LiMaskDrawer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  LiDrawer::LiDrawer((LiDrawer *)a1);
  *v6 = &off_1E656E3E0;
  v6[6] = a2;
  v6[7] = &unk_1E656A9A8;
  v6[9] = 0;
  v6[10] = 0;
  v6[8] = 0;
  v6[2] = a2;
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)(v6 + 7), 1, 3);
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8 * *(int *)(a1 + 68) - 8) = a3;
  return a1;
}

void sub_1B2D1724C(_Unwind_Exception *a1)
{
  LiDrawer *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *((_QWORD *)v1 + 10);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  PCPtrArray<LiSeam>::~PCPtrArray(v2);
  LiDrawer::~LiDrawer(v1);
  _Unwind_Resume(a1);
}

void LiMaskDrawer::~LiMaskDrawer(LiMaskDrawer *this)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = &off_1E656E3E0;
  v2 = *((_QWORD *)this + 10);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  *((_QWORD *)this + 7) = &unk_1E656A9F8;
  v3 = *((_DWORD *)this + 16);
  if (v3 < 0)
    v4 = 1;
  else
    v4 = v3 & ~(v3 >> 31);
  if (v4 == v3)
  {
    v5 = *((int *)this + 17);
    if ((v5 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v5) = 0;
      while (!__CFADD__(v5++, 1));
    }
  }
  else
  {
    if (v4)
    {
      v7 = (void *)operator new[]();
      bzero(v7, 8 * v4);
    }
    else
    {
      v7 = 0;
    }
    v8 = *((_QWORD *)this + 9);
    if (v8)
      MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
    *((_QWORD *)this + 9) = v7;
  }
  *((_DWORD *)this + 16) = v4;
  *((_DWORD *)this + 17) = 0;
  v9 = *((_QWORD *)this + 9);
  if (v9)
    MEMORY[0x1B5E2914C](v9, 0x1000C8077774924);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  LiDrawer::~LiDrawer(this);
}

{
  LiMaskDrawer::~LiMaskDrawer(this);
  JUMPOUT(0x1B5E29170);
}

void LiMaskDrawer::draw(LiMaskDrawer *this, LiBlender *a2)
{
  CGColorSpace *v4;
  CGColorSpace *v5[13];

  LiBlender::LiBlender((LiBlender *)v5, *((float *)a2 + 13), (const FxColorDescription *)((char *)a2 + 56));
  v5[11] = this;
  v5[12] = a2;
  v4 = (CGColorSpace *)*((_QWORD *)a2 + 3);
  v5[0] = (CGColorSpace *)&off_1E656E3A0;
  v5[3] = v4;
  (*(void (**)(_QWORD, CGColorSpace **))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), v5);
  LiBlender::~LiBlender(v5);
}

void sub_1B2D17428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LiBlender::~LiBlender((CGColorSpace **)va);
  _Unwind_Resume(a1);
}

uint64_t LiMaskDrawer::holdOut(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  PCArray_base *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 48);
  LiDrawer::LiDrawer((LiDrawer *)v6);
  *(_QWORD *)v6 = &off_1E656E3E0;
  *(_QWORD *)(v6 + 48) = v7;
  *(_QWORD *)(v6 + 56) = &unk_1E656A9A8;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 16) = v7;
  v8 = (PCArray_base *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 16))(a3, v6);
  v9 = *(unsigned int *)(a1 + 68);
  if ((int)v9 <= 0)
  {
    v14 = *(_DWORD *)(v6 + 68);
  }
  else
  {
    for (i = 0; i != v9; ++i)
    {
      if (i >= *(int *)(a1 + 68))
        PCArray_base::badIndex(v8);
      v11 = *(_QWORD *)(a1 + 72);
      v12 = *(_DWORD *)(v6 + 68);
      if (*(_DWORD *)(v6 + 64) <= v12)
        v13 = (2 * (v12 + 1)) | 1;
      else
        v13 = *(_DWORD *)(v6 + 64);
      v8 = (PCArray_base *)PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(v6 + 56, v12 + 1, v13);
      v14 = *(_DWORD *)(v6 + 68);
      *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8 * (v14 - 1)) = *(_QWORD *)(v11 + 8 * i);
    }
  }
  if (*(_DWORD *)(v6 + 64) <= v14)
    v15 = (2 * (v14 + 1)) | 1;
  else
    v15 = *(_DWORD *)(v6 + 64);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(v6 + 56, v14 + 1, v15);
  *(_QWORD *)(*(_QWORD *)(v6 + 72) + 8 * *(int *)(v6 + 68) - 8) = a2;
  return v6;
}

void sub_1B2D17580(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C402E1910D9);
  _Unwind_Resume(a1);
}

uint64_t LiMaskDrawer::getBounds(LiMaskDrawer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
}

uint64_t LiMaskDrawer::isPlanar(LiMaskDrawer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6));
}

uint64_t LiMaskDrawer::getPlane(LiMaskDrawer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 48))(*((_QWORD *)this + 6));
}

uint64_t LiMaskDrawer::setPlane(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 56))(*(_QWORD *)(a1 + 48));
}

uint64_t LiMaskDrawer::getSceneObject(LiMaskDrawer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 72))(*((_QWORD *)this + 6));
}

void LiMaskDrawer::intersect(LiMaskDrawer *this, LiIntersection *a2)
{
  PCArray_base *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  PCArray_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;

  v4 = (PCArray_base *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 80))(*((_QWORD *)this + 6));
  v5 = *((unsigned int *)a2 + 5);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v16 = *((unsigned int *)a2 + 5);
    do
    {
      if (v6 >= *((int *)a2 + 5))
        PCArray_base::badIndex(v4);
      v7 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * v6);
      if (*(_QWORD *)(v7 + 8))
      {
        __p = 0;
        v18 = 0;
        v19 = 0;
        elim<double>((double **)(v7 + 16), &__p, 2);
        v9 = *((unsigned int *)this + 17);
        if ((int)v9 >= 1)
        {
          v10 = 0;
          v11 = 0;
          do
          {
            if (v10 >= *((int *)this + 17))
              PCArray_base::badIndex(v8);
            v12 = *(_QWORD *)(*((_QWORD *)this + 9) + 8 * v10);
            if (!v11)
            {
              v11 = operator new();
              v13 = *(_QWORD *)(v7 + 8);
              LiDrawer::LiDrawer((LiDrawer *)v11);
              *(_QWORD *)v11 = &off_1E656E3E0;
              *(_QWORD *)(v11 + 72) = 0;
              *(_QWORD *)(v11 + 80) = 0;
              *(_QWORD *)(v11 + 48) = v13;
              *(_QWORD *)(v11 + 56) = &unk_1E656A9A8;
              *(_QWORD *)(v11 + 64) = 0;
              *(_QWORD *)(v11 + 16) = this;
              (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 4) + 16))(*((_QWORD *)a2 + 4), v11);
            }
            v14 = *(_DWORD *)(v11 + 68);
            if (*(_DWORD *)(v11 + 64) <= v14)
              v15 = (2 * (v14 + 1)) | 1;
            else
              v15 = *(_DWORD *)(v11 + 64);
            v8 = (PCArray_base *)PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(v11 + 56, v14 + 1, v15);
            *(_QWORD *)(*(_QWORD *)(v11 + 72) + 8 * *(int *)(v11 + 68) - 8) = v12;
            ++v10;
          }
          while (v9 != v10);
          *(_QWORD *)(v7 + 8) = v11;
          v5 = v16;
        }
        v4 = (PCArray_base *)__p;
        if (__p)
        {
          v18 = __p;
          operator delete(__p);
        }
      }
      ++v6;
    }
    while (v6 != v5);
  }
}

void sub_1B2D1778C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double elim<double>(double **a1, _QWORD *a2, int a3)
{
  int v6;
  double result;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  uint64_t v12;

  v6 = -1431655765 * (a1[1] - *a1);
  std::vector<PCVector2<double>>::resize((uint64_t)a2, v6);
  if (v6 >= 1)
  {
    v8 = *a1;
    v9 = v6;
    v10 = (double *)(*a2 + 8);
    do
    {
      v11 = v8 + 1;
      if (a3 > 0)
        v11 = v8;
      if (a3 <= 1)
        v12 = 2;
      else
        v12 = 1;
      result = v8[v12];
      *(v10 - 1) = *v11;
      *v10 = result;
      v10 += 2;
      v8 += 3;
      --v9;
    }
    while (v9);
  }
  return result;
}

void LiMaskDrawer::name(LiMaskDrawer *this@<X0>, _QWORD *a2@<X8>)
{
  const void *v4;
  int v5;
  const void *v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  size_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  _BYTE *v24;
  _BYTE *v25;
  _BYTE *v26;

  LiString::LiString((LiString *)&v26, "mask(");
  (*(void (**)(_BYTE **__return_ptr))(**((_QWORD **)this + 6) + 88))(&v25);
  v4 = v26;
  if (v26)
    v5 = *((_DWORD *)v26 - 2);
  else
    v5 = 0;
  v6 = v25;
  if (v25)
    v7 = *((_DWORD *)v25 - 2);
  else
    v7 = 0;
  v8 = v7 + (uint64_t)v5;
  v9 = (unsigned int *)malloc_type_malloc(v8 + 13, 0x8903763CuLL);
  v9[1] = v8;
  v9[2] = v8 + 1;
  atomic_store(1u, v9);
  atomic_store(0, v9);
  memcpy(v9 + 3, v4, v5);
  memcpy((char *)v9 + v5 + 12, v6, v7);
  *((_BYTE *)v9 + v8 + 12) = 0;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 + 1, v9));
  v11 = (int)v9[1];
  v12 = (unsigned int *)malloc_type_malloc(v11 + 14, 0x8903763CuLL);
  v12[1] = v11 + 1;
  v12[2] = v11 + 2;
  atomic_store(1u, v12);
  v13 = v12 + 3;
  atomic_store(0, v12);
  memcpy(v12 + 3, v9 + 3, v11);
  *((_BYTE *)v13 + v11) = 41;
  *((_BYTE *)v13 + v11 + 1) = 0;
  *a2 = v12 + 3;
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 + 1, v12));
  do
  {
    v15 = __ldaxr(v9);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, v9));
  if (!v16)
    free(v9);
  if (v25)
  {
    v17 = (unsigned int *)(v25 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *v25 = 0;
      if (v25)
        v20 = v25 - 12;
      else
        v20 = 0;
      free(v20);
    }
  }
  if (v26)
  {
    v21 = (unsigned int *)(v26 - 12);
    do
    {
      v22 = __ldaxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
    {
      *v26 = 0;
      if (v26)
        v24 = v26 - 12;
      else
        v24 = 0;
      free(v24);
    }
  }
}

void sub_1B2D17A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, _BYTE *a10)
{
  unsigned int *v10;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;

  do
  {
    v12 = __ldaxr(v10);
    v13 = v12 - 1;
  }
  while (__stlxr(v13, v10));
  if (!v13)
    free(v10);
  if (a9)
  {
    v14 = (unsigned int *)(a9 - 12);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a10)
  {
    v17 = (unsigned int *)(a10 - 12);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void LiMaskDrawer::dump(LiMaskDrawer *this, const char **a2)
{
  const char *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _BYTE *v17;
  _BYTE *v18;

  if (*a2)
    v4 = *a2;
  else
    v4 = "";
  v5 = strlen(v4);
  v6 = (_QWORD *)MEMORY[0x1E0DE4A50];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"mask[", 5);
  v7 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"]\n", 2);
  v8 = *a2;
  if (v8)
    v9 = *((_DWORD *)v8 - 2);
  else
    v9 = 0;
  v10 = v9 + 4;
  v11 = (unsigned int *)malloc_type_malloc(v9 + 17, 0x8903763CuLL);
  v11[1] = v10;
  v11[2] = v9 + 5;
  atomic_store(1u, v11);
  v12 = v11 + 3;
  atomic_store(0, v11);
  memcpy(v11 + 3, v8, v9);
  *(unsigned int *)((char *)v12 + v9) = 544022560;
  *((_BYTE *)v12 + v10) = 0;
  v18 = v11 + 3;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  (*(void (**)(_QWORD, _BYTE **))(**((_QWORD **)this + 6) + 96))(*((_QWORD *)this + 6), &v18);
  if (v18)
  {
    v14 = (unsigned int *)(v18 - 12);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      *v18 = 0;
      if (v18)
        v17 = v18 - 12;
      else
        v17 = 0;
      free(v17);
    }
  }
}

void sub_1B2D17C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    LiGeode::print(a10, (_BYTE **)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t LiMaskDrawer::getFilterIntersections(LiMaskDrawer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 112))(*((_QWORD *)this + 6));
}

uint64_t LiMaskDrawer::getBlendMode(LiMaskDrawer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 128))(*((_QWORD *)this + 6));
}

uint64_t LiMaskDrawer::defocus(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 136))(*(_QWORD *)(a1 + 48));
}

CGColorSpace **LiMaskDrawer::getMask@<X0>(LiMaskDrawer *this@<X0>, HGRenderer *a2@<X1>, HGNode **a3@<X8>)
{
  HGNode *v4;
  uint64_t v6;
  PCArray_base *v8;
  __n128 v9;
  uint64_t i;
  HGNode *v11;
  HGNode *v12;
  CGColorSpace **result;
  PCSharedCount v14;
  PCSharedCount v15;
  HGNode *v16;
  _BYTE v17[24];
  HGRenderer *v18;
  FxColorDescription v19;

  v4 = (HGNode *)*((_QWORD *)this + 10);
  if (!v4)
  {
    v6 = *((unsigned int *)this + 17);
    if ((_DWORD)v6)
    {
      PCColorDescription::PCColorDescription(&v19._pcColorDesc);
      v19._isPremultiplied = 1;
      v8 = LiMultiBlender::LiMultiBlender((LiMultiBlender *)v17, 1.0, &v19);
      v18 = a2;
      if ((int)v6 >= 1)
      {
        for (i = 0; i != v6; ++i)
        {
          if (i >= *((int *)this + 17))
            PCArray_base::badIndex(v8);
          (*(void (**)(HGNode **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 9) + 8 * i) + 168))(&v16);
          v14.var0 = 0;
          PCSharedCount::PCSharedCount(&v15);
          LiMultiBlender::add((uint64_t)v17, &v16, 0, 0, 0, &v14, 1.0);
          PCSharedCount::~PCSharedCount(&v15);
          v8 = (PCArray_base *)v16;
          if (v16)
            v8 = (PCArray_base *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v16 + 24))(v16);
        }
      }
      LiMultiBlender::getOutput((LiMultiBlender *)v17, (uint64_t *)&v16, v9);
      v11 = (HGNode *)*((_QWORD *)this + 10);
      v12 = v16;
      if (v11 == v16)
      {
        if (v11)
          (*(void (**)(HGNode *))(*(_QWORD *)v11 + 24))(v11);
      }
      else
      {
        if (v11)
        {
          (*(void (**)(HGNode *))(*(_QWORD *)v11 + 24))(v11);
          v12 = v16;
        }
        *((_QWORD *)this + 10) = v12;
      }
      LiMultiBlender::~LiMultiBlender((LiMultiBlender *)v17);
      result = PCCFRef<CGColorSpace *>::~PCCFRef(&v19._pcColorDesc._colorSpaceRef._obj);
    }
    else
    {
      v4 = (HGNode *)HGObject::operator new(0x1A0uLL);
      HGNode::HGNode(v4);
      result = (CGColorSpace **)*((_QWORD *)this + 10);
      if (result != (CGColorSpace **)v4)
      {
        if (result)
          result = (CGColorSpace **)(*((uint64_t (**)(CGColorSpace **))*result + 3))(result);
        *((_QWORD *)this + 10) = v4;
LABEL_23:
        *a3 = v4;
        if (!v4)
          return result;
        return (CGColorSpace **)(*(uint64_t (**)(HGNode *, HGRenderer *))(*(_QWORD *)v4 + 16))(v4, a2);
      }
      if (!v4)
      {
        *a3 = 0;
        return result;
      }
      result = (CGColorSpace **)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v4 + 24))(v4);
    }
    v4 = (HGNode *)*((_QWORD *)this + 10);
    goto LABEL_23;
  }
  *a3 = v4;
  return (CGColorSpace **)(*(uint64_t (**)(HGNode *, HGRenderer *))(*(_QWORD *)v4 + 16))(v4, a2);
}

void sub_1B2D17E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;

  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::UniformProgram::addVariable(uint64_t a1, const PCSharedCount *a2, uint64_t *a3, uint64_t a4)
{
  unint64_t var0;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  PC_Sp_counted_base *v13;
  PCArray_base *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  char *v25;
  char **v26;
  char *v27;
  void **v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  int v36;
  int v37;
  uint64_t v39;
  int v40;
  unint64_t *v43;
  char v44;
  uint64_t v45;
  PCSharedCount v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;

  var0 = (unint64_t)a2[2].var0;
  v50 = var0;
  v7 = *(_QWORD **)(a4 + 8);
  if (!v7)
    goto LABEL_12;
  v8 = (_QWORD *)(a4 + 8);
  do
  {
    v9 = v7[4];
    v10 = v9 >= var0;
    if (v9 >= var0)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10)
      v8 = v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v8 != (_QWORD *)(a4 + 8) && var0 >= v8[4])
    return *((unsigned int *)v8 + 10);
LABEL_12:
  v12 = 0x4EC4EC4EC4EC4EC5 * ((a3[1] - *a3) >> 3);
  v43 = &v50;
  *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)a4, &v50, (uint64_t)&std::piecewise_construct, &v43)+ 10) = v12;
  std::vector<ProShade::UniformProgram::CompileNode>::resize(a3, (int)v12 + 1);
  v39 = v12;
  ProShade::VarT<ProShade::Node>::operator=(*a3 + 104 * (int)v12, a2);
  v48 = 0;
  v49 = 0;
  v47 = &unk_1E656A208;
  v13 = a2[2].var0;
  if (!v13)
    throw_PCNullPointerException(1);
  v14 = (PCArray_base *)(*(uint64_t (**)(PC_Sp_counted_base *, void **))(*(_QWORD *)v13 + 64))(v13, &v47);
  v15 = HIDWORD(v48);
  if (HIDWORD(v48))
  {
    v16 = 0;
    v17 = 0;
    v40 = v12;
    do
    {
      if (v16 < 0 || SHIDWORD(v48) <= v16)
        PCArray_base::badIndex(v14);
      v43 = (unint64_t *)&unk_1E6569AC8;
      v18 = v49 + 32 * v17;
      v44 = *(_BYTE *)(v18 + 8);
      v45 = *(_QWORD *)(v18 + 16);
      PCSharedCount::PCSharedCount(&v46, (const PCSharedCount *)(v18 + 24));
      v19 = ProShade::UniformProgram::addVariable(a1, &v43, a3, a4);
      v20 = v19;
      v21 = *a3 + 104 * v40;
      v24 = *(_QWORD *)(v21 + 88);
      v23 = (_QWORD *)(v21 + 88);
      v22 = v24;
      v26 = (char **)(v23 - 1);
      v25 = (char *)*(v23 - 1);
      if ((unint64_t)v25 >= v24)
      {
        v28 = (void **)(v23 - 2);
        v29 = (char *)*(v23 - 2);
        v30 = (v25 - v29) >> 2;
        v31 = v30 + 1;
        if ((unint64_t)(v30 + 1) >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v32 = v22 - (_QWORD)v29;
        if (v32 >> 1 > v31)
          v31 = v32 >> 1;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
          v33 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v33 = v31;
        if (v33)
        {
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v23, v33);
          v25 = *v26;
          v29 = (char *)*v28;
        }
        else
        {
          v34 = 0;
        }
        v35 = &v34[4 * v30];
        *(_DWORD *)v35 = v20;
        v27 = v35 + 4;
        while (v25 != v29)
        {
          v36 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v35 - 1) = v36;
          v35 -= 4;
        }
        *v28 = v35;
        *v26 = v27;
        *v23 = &v34[4 * v33];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_DWORD *)v25 = v19;
        v27 = v25 + 4;
      }
      *v26 = v27;
      v43 = (unint64_t *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v46);
      v16 = ++v17;
    }
    while (v15 != v17);
  }
  v47 = &unk_1E656A208;
  if ((int)v48 < 0)
    v37 = 1;
  else
    v37 = v48;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v47, 0, v37);
  if (v49)
    MEMORY[0x1B5E2914C](v49, 0x1000C8077774924);
  return v39;
}

void sub_1B2D18260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<ProShade::UniformProgram::CompileNode>::resize(uint64_t *a1, unint64_t a2)
{
  PCSharedCount *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (PCSharedCount *)a1[1];
  v4 = 0x4EC4EC4EC4EC4EC5 * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<ProShade::UniformProgram::CompileNode>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 104 * a2;
    while (v3 != (PCSharedCount *)v7)
    {
      v3 -= 13;
      std::allocator<ProShade::UniformProgram::CompileNode>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void ProShade::UniformProgram::addRegister(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int *v6;
  int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  int *v16;
  int *v17;
  int v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  char *v34;
  char **v35;
  char *v36;
  void **v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  int v45;
  unint64_t v46;
  char *v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  int v57;
  void **v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *v64[2];
  __int128 v65;
  void *__p[2];
  uint64_t v67;

  if ((*(_DWORD *)(a2 + 96) & 0x80000000) != 0)
  {
    v6 = *(int **)(a2 + 72);
    v7 = *(int **)(a2 + 80);
    while (v6 != v7)
    {
      v8 = *v6++;
      ProShade::UniformProgram::addRegister(a1, *a3 + 104 * v8, a3);
    }
    v10 = *(_QWORD *)a1;
    v9 = *(_QWORD *)(a1 + 8);
    v67 = 0;
    v65 = 0u;
    *(_OWORD *)__p = 0u;
    v63 = 0u;
    *(_OWORD *)v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    ProShade::UniformProgram::Register::Register((ProShade::UniformProgram::Register *)&v60);
    v11 = *(_QWORD *)(a1 + 8);
    if (v11 >= *(_QWORD *)(a1 + 16))
    {
      v12 = std::vector<ProShade::UniformProgram::Register>::__push_back_slow_path<ProShade::UniformProgram::Register>((uint64_t *)a1, (uint64_t)&v60);
    }
    else
    {
      std::allocator<ProShade::UniformProgram::Register>::construct[abi:ne180100]<ProShade::UniformProgram::Register,ProShade::UniformProgram::Register>(a1 + 16, *(_QWORD *)(a1 + 8), (uint64_t)&v60);
      v12 = v11 + 120;
      *(_QWORD *)(a1 + 8) = v11 + 120;
    }
    *(_QWORD *)(a1 + 8) = v12;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v13 = -286331153 * ((unint64_t)(v9 - v10) >> 3);
    if (v64[1])
    {
      *(void **)&v65 = v64[1];
      operator delete(v64[1]);
    }
    *(_QWORD *)&v62 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v63 + 1);
    *(_QWORD *)&v60 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v61 + 1);
    v14 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a2 + 96) = v13;
    v59 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)&v60 = &v59;
    *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)(a1 + 24), &v59, (uint64_t)&std::piecewise_construct, (_QWORD **)&v60)+ 10) = v13;
    ProShade::VarT<ProShade::Node>::operator=(v14 - 120, (const PCSharedCount *)a2);
    ProShade::VarT<ProShade::Node>::operator=(v14 - 88, (const PCSharedCount *)(a2 + 32));
    v15 = *(_DWORD *)(a2 + 64);
    *(_DWORD *)(v14 - 56) = v13;
    *(_DWORD *)(v14 - 52) = v15;
    v16 = *(int **)(a2 + 72);
    v17 = *(int **)(a2 + 80);
    if (v16 != v17)
    {
      v58 = (void **)(v14 - 48);
      do
      {
        v18 = *(_DWORD *)(*a3 + 104 * *v16 + 96);
        v20 = *(char **)(v14 - 40);
        v19 = *(_QWORD *)(v14 - 32);
        if ((unint64_t)v20 >= v19)
        {
          v22 = (char *)*v58;
          v23 = (v20 - (_BYTE *)*v58) >> 2;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v25 = v19 - (_QWORD)v22;
          if (v25 >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14 - 32, v26);
            v22 = *(char **)(v14 - 48);
            v20 = *(char **)(v14 - 40);
          }
          else
          {
            v27 = 0;
          }
          v28 = &v27[4 * v23];
          *(_DWORD *)v28 = v18;
          v21 = v28 + 4;
          while (v20 != v22)
          {
            v29 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *((_DWORD *)v28 - 1) = v29;
            v28 -= 4;
          }
          *(_QWORD *)(v14 - 48) = v28;
          *(_QWORD *)(v14 - 40) = v21;
          *(_QWORD *)(v14 - 32) = &v27[4 * v26];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *(_DWORD *)v20 = v18;
          v21 = v20 + 4;
        }
        *(_QWORD *)(v14 - 40) = v21;
        v30 = *(_QWORD *)a1 + 120 * v18;
        v33 = *(_QWORD *)(v30 + 112);
        v32 = (_QWORD *)(v30 + 112);
        v31 = v33;
        v35 = (char **)(v32 - 1);
        v34 = (char *)*(v32 - 1);
        if ((unint64_t)v34 >= v33)
        {
          v37 = (void **)(v32 - 2);
          v38 = (char *)*(v32 - 2);
          v39 = (v34 - v38) >> 2;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 62)
            std::vector<double>::__throw_length_error[abi:ne180100]();
          v41 = v31 - (_QWORD)v38;
          if (v41 >> 1 > v40)
            v40 = v41 >> 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
            v42 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)v32, v42);
            v34 = *v35;
            v38 = (char *)*v37;
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[4 * v39];
          *(_DWORD *)v44 = v13;
          v36 = v44 + 4;
          while (v34 != v38)
          {
            v45 = *((_DWORD *)v34 - 1);
            v34 -= 4;
            *((_DWORD *)v44 - 1) = v45;
            v44 -= 4;
          }
          *v37 = v44;
          *v35 = v36;
          *v32 = &v43[4 * v42];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *(_DWORD *)v34 = v13;
          v36 = v34 + 4;
        }
        *v35 = v36;
        ++v16;
      }
      while (v16 != v17);
      v15 = *(_DWORD *)(v14 - 52);
    }
    if ((v15 & 0x80000000) == 0)
    {
      v46 = *(_QWORD *)(a1 + 64);
      v47 = *(char **)(a1 + 56);
      if ((unint64_t)v47 >= v46)
      {
        v49 = *(char **)(a1 + 48);
        v50 = (v47 - v49) >> 2;
        if ((unint64_t)(v50 + 1) >> 62)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v51 = v46 - (_QWORD)v49;
        v52 = (uint64_t)(v46 - (_QWORD)v49) >> 1;
        if (v52 <= v50 + 1)
          v52 = v50 + 1;
        if (v51 >= 0x7FFFFFFFFFFFFFFCLL)
          v53 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
        {
          v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a1 + 64, v53);
          v49 = *(char **)(a1 + 48);
          v47 = *(char **)(a1 + 56);
        }
        else
        {
          v54 = 0;
        }
        v55 = &v54[4 * v50];
        v56 = &v54[4 * v53];
        *(_DWORD *)v55 = v13;
        v48 = v55 + 4;
        while (v47 != v49)
        {
          v57 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *((_DWORD *)v55 - 1) = v57;
          v55 -= 4;
        }
        *(_QWORD *)(a1 + 48) = v55;
        *(_QWORD *)(a1 + 56) = v48;
        *(_QWORD *)(a1 + 64) = v56;
        if (v49)
          operator delete(v49);
      }
      else
      {
        *(_DWORD *)v47 = v13;
        v48 = v47 + 4;
      }
      *(_QWORD *)(a1 + 56) = v48;
    }
  }
}

void sub_1B2D18748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  ProShade::UniformProgram::Register::~Register((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void ProShade::UniformProgram::Register::~Register(PCSharedCount *this)
{
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v3;

  var0 = this[12].var0;
  if (var0)
  {
    this[13].var0 = var0;
    operator delete(var0);
  }
  v3 = this[9].var0;
  if (v3)
  {
    this[10].var0 = v3;
    operator delete(v3);
  }
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 7);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 3);
}

_QWORD *ProShade::UniformProgram::UniformProgram(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  this[2] = 0;
  this[3] = this + 4;
  this[7] = 0;
  this[8] = 0;
  return this;
}

void ProShade::UniformProgram::initialize(PCArray_base *a1, uint64_t a2)
{
  int v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  PC_Sp_counted_base *v9;
  uint64_t v10;
  const PCString *v11;
  const PCString *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  PCSharedCount v19[3];
  PCSharedCount v20;
  PCSharedCount v21;
  char v22;
  uint64_t v23;
  PCSharedCount v24;
  void **v25;
  char v26;
  uint64_t v27;
  PCSharedCount v28;
  PCSharedCount v29;
  char v30;
  uint64_t v31;
  PCSharedCount v32;
  int v33;
  _QWORD **v34;
  _QWORD *v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v35[0] = 0;
  v35[1] = 0;
  v34 = v35;
  v17 = *(_DWORD *)(a2 + 12);
  if (v17)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if (v3 < 0 || *(_DWORD *)(a2 + 12) <= v3)
        PCArray_base::badIndex(a1);
      v6 = *(_QWORD *)(a2 + 16);
      v7 = v6 + 72 * v4;
      v25 = (void **)&unk_1E6569AC8;
      v26 = *(_BYTE *)(v7 + 8);
      v27 = *(_QWORD *)(v7 + 16);
      PCSharedCount::PCSharedCount(&v28, (const PCSharedCount *)(v7 + 24));
      v8 = v5;
      v9 = (PC_Sp_counted_base *)(v5 + 16);
      v29.var0 = v9;
      v10 = v6 + 72 * v4;
      v30 = *(_BYTE *)(v10 + 40);
      v31 = *(_QWORD *)(v10 + 48);
      PCSharedCount::PCSharedCount(&v32, (const PCSharedCount *)(v10 + 56));
      v33 = *(_DWORD *)(v6 + 72 * v4 + 64);
      v21.var0 = v9;
      v22 = v26;
      v23 = v27;
      PCSharedCount::PCSharedCount(&v24, &v28);
      v5 = v8;
      if (!v23)
        throw_PCNullPointerException(1);
      if (!v31)
        throw_PCNullPointerException(1);
      if (*(_DWORD *)(v23 + 24) != *(_DWORD *)(v31 + 24))
      {
        v12 = (const PCString *)ProShade::VarT<ProShade::Node>::width((uint64_t)&v29, v11);
        if (!v31)
          throw_PCNullPointerException(1);
        ProShade::cast((uint64_t)&v25, v12, *(_DWORD *)(v31 + 24), (uint64_t)v19);
        ProShade::VarT<ProShade::Node>::operator=((uint64_t)&v21, v19);
        v19[0].var0 = (PC_Sp_counted_base *)(v8 + 16);
        PCSharedCount::~PCSharedCount(&v20);
      }
      v13 = ProShade::UniformProgram::addVariable((uint64_t)a1, &v21, &v36, (uint64_t)&v34);
      if (0x4EC4EC4EC4EC4EC5 * ((v37 - v36) >> 3) <= (unint64_t)v13)
        std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
      v14 = v36 + 104 * v13;
      ProShade::VarT<ProShade::Node>::operator=(v14 + 32, &v29);
      *(_DWORD *)(v14 + 64) = v33;
      v21.var0 = (PC_Sp_counted_base *)(v8 + 16);
      PCSharedCount::~PCSharedCount(&v24);
      v29.var0 = (PC_Sp_counted_base *)(v8 + 16);
      PCSharedCount::~PCSharedCount(&v32);
      v25 = (void **)(v8 + 16);
      PCSharedCount::~PCSharedCount(&v28);
      v3 = ++v4;
    }
    while (v17 != v4);
    v15 = v36;
    v16 = v37;
    while (v15 != v16)
    {
      ProShade::UniformProgram::addRegister((uint64_t)a1, v15, &v36);
      v15 += 104;
    }
  }
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy((uint64_t)&v34, v35[0]);
  v25 = (void **)&v36;
  std::vector<ProShade::UniformProgram::CompileNode>::__destroy_vector::operator()[abi:ne180100](&v25);
}

void sub_1B2D18AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  PCSharedCount *v23;
  uint64_t v24;

  PCSharedCount::~PCSharedCount(a10);
  PCSharedCount::~PCSharedCount(v23);
  ProShade::UniformVariable::~UniformVariable((PCSharedCount *)&a23);
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(v24 - 136, *(_QWORD **)(v24 - 128));
  a23 = v24 - 112;
  std::vector<ProShade::UniformProgram::CompileNode>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

void ProShade::UniformVariable::~UniformVariable(PCSharedCount *this)
{
  this[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 7);
  this->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(this + 3);
}

ProShade::UniformWorkspace *ProShade::UniformWorkspace::UniformWorkspace(ProShade::UniformWorkspace *this, uint64_t a2)
{
  char **v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _WORD *v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  ProShade::UniformProgram *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v23;

  *(_OWORD *)((char *)this + 8) = 0u;
  v3 = (char **)((char *)this + 8);
  *(_QWORD *)this = a2;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 != v5)
  {
    do
    {
      v7 = (_WORD *)*((_QWORD *)this + 2);
      v6 = *((_QWORD *)this + 3);
      if ((unint64_t)v7 >= v6)
      {
        v9 = (char *)v7 - *v3;
        if (v9 <= -3)
          std::vector<double>::__throw_length_error[abi:ne180100]();
        v10 = v9 >> 1;
        v11 = v6 - (_QWORD)*v3;
        if (v11 <= (v9 >> 1) + 1)
          v12 = (ProShade::UniformProgram *)(v10 + 1);
        else
          v12 = (ProShade::UniformProgram *)v11;
        if (v11 >= 0x7FFFFFFFFFFFFFFELL)
          a2 = 0x7FFFFFFFFFFFFFFFLL;
        else
          a2 = (uint64_t)v12;
        if (a2)
          v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformWorkspace::RegisterState>>((uint64_t)this + 24, a2);
        else
          v13 = 0;
        v14 = &v13[2 * v10];
        *(_WORD *)v14 = 0;
        v8 = v14 + 2;
        v16 = (char *)*((_QWORD *)this + 1);
        v15 = (char *)*((_QWORD *)this + 2);
        if (v15 != v16)
        {
          do
          {
            v17 = *((_WORD *)v15 - 1);
            v15 -= 2;
            *((_WORD *)v14 - 1) = v17;
            v14 -= 2;
          }
          while (v15 != v16);
          v15 = *v3;
        }
        *((_QWORD *)this + 1) = v14;
        *((_QWORD *)this + 2) = v8;
        *((_QWORD *)this + 3) = &v13[2 * a2];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v7 = 0;
        v8 = v7 + 1;
      }
      *((_QWORD *)this + 2) = v8;
      ProShade::VarT<ProShade::Node>::bytes(v4, (const PCString *)a2);
      v18 = operator new[]();
      std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,void>(&v23, v18);
      std::vector<std::shared_ptr<std::vector<unsigned char>>>::push_back[abi:ne180100]((char **)this + 4, &v23);
      v19 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1))
      {
        v20 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v4 += 120;
    }
    while (v4 != v5);
  }
  return this;
}

void sub_1B2D18D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&a9);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 16) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

ProShade::UniformWorkspace *ProShade::UniformWorkspace::dirty(ProShade::UniformWorkspace *this, const ProShade::UniformProgram::Register *a2)
{
  _BYTE *v2;
  int *v3;
  int *v4;
  ProShade::UniformWorkspace *v5;
  unint64_t v6;
  uint64_t v7;

  v2 = (_BYTE *)(*((_QWORD *)this + 1) + 2 * *((int *)a2 + 16));
  if (*v2)
  {
    *v2 = 0;
    v3 = (int *)*((_QWORD *)a2 + 12);
    v4 = (int *)*((_QWORD *)a2 + 13);
    if (v3 != v4)
    {
      v5 = this;
      do
      {
        v6 = *v3;
        v7 = **(_QWORD **)v5;
        if (0xEEEEEEEEEEEEEEEFLL * ((*(_QWORD *)(*(_QWORD *)v5 + 8) - v7) >> 3) <= v6)
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        this = (ProShade::UniformWorkspace *)ProShade::UniformWorkspace::dirty(v5, (const ProShade::UniformProgram::Register *)(v7 + 120 * (int)v6));
        ++v3;
      }
      while (v3 != v4);
    }
  }
  return this;
}

uint64_t **ProShade::UniformWorkspace::setUniform(uint64_t **this, int a2)
{
  uint64_t v2;
  GLint v3;
  uint64_t **v5;
  const PCString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unsigned __int8 *v11;
  GLfloat v12;
  uint64_t i;
  float v14;
  GLfloat v15;
  GLfloat v16;
  uint64_t j;
  float64x2_t v18;
  float64x2_t v19;
  GLfloat v20;
  GLfloat v21;
  GLfloat v22;
  GLfloat v23;
  GLfloat v24;
  GLfloat v25;
  GLfloat v26;
  PCException *exception;
  PCException *v28;
  PCException *v29;
  PCException *v30;
  OZChannelBase v31;

  v31.var9 = (void *)*MEMORY[0x1E0C80C00];
  v2 = **this;
  v3 = *(_DWORD *)(v2 + 120 * a2 + 68);
  if ((v3 & 0x80000000) == 0)
  {
    v5 = this;
    PCSharedCount::PCSharedCount((PCSharedCount *)&v31);
    v7 = v2 + 120 * a2;
    v8 = *(_QWORD *)(v7 + 16);
    v9 = *(int *)(v7 + 64);
    v10 = v5[1];
    v11 = (unsigned __int8 *)v5[4][2 * v9];
    *((_BYTE *)v10 + 2 * v9 + 1) = 0;
    if (!v8)
      throw_PCNullPointerException(1);
    switch(*(_DWORD *)(v8 + 24))
    {
      case 0:
        exception = (PCException *)__cxa_allocate_exception(0x40uLL);
        PCException::PCException(exception);
        *(_QWORD *)exception = &unk_1E65EA798;
      case 1:
        switch(*(_DWORD *)(v8 + 28))
        {
          case 1:
            glUniform1i(v3, *v11);
            break;
          case 2:
            glUniform2i(v3, *v11, v11[1]);
            break;
          case 3:
            glUniform3i(v3, *v11, v11[1], v11[2]);
            break;
          case 4:
            glUniform4i(v3, *v11, v11[1], v11[2], v11[3]);
            break;
          default:
            v29 = (PCException *)__cxa_allocate_exception(0x40uLL);
            PCException::PCException(v29);
            *(_QWORD *)v29 = &unk_1E65EA798;
        }
        return this;
      case 2:
        switch(*(_DWORD *)(v8 + 28))
        {
          case 1:
            glUniform1i(v3, *(_DWORD *)v11);
            break;
          case 2:
            glUniform2i(v3, *(_DWORD *)v11, *((_DWORD *)v11 + 1));
            break;
          case 3:
            glUniform3i(v3, *(_DWORD *)v11, *((_DWORD *)v11 + 1), *((_DWORD *)v11 + 2));
            break;
          case 4:
            glUniform4i(v3, *(_DWORD *)v11, *((_DWORD *)v11 + 1), *((_DWORD *)v11 + 2), *((_DWORD *)v11 + 3));
            break;
          default:
            v28 = (PCException *)__cxa_allocate_exception(0x40uLL);
            PCException::PCException(v28);
            *(_QWORD *)v28 = &unk_1E65EA798;
        }
        return this;
      case 3:
        switch(*(_DWORD *)(v8 + 28))
        {
          case 1:
            v12 = *(double *)v11;
            glUniform1f(v3, v12);
            break;
          case 2:
            v15 = *(double *)v11;
            v16 = *((double *)v11 + 1);
            glUniform2f(v3, v15, v16);
            break;
          case 3:
            v20 = *(double *)v11;
            v21 = *((double *)v11 + 1);
            v22 = *((double *)v11 + 2);
            glUniform3f(v3, v20, v21, v22);
            break;
          case 4:
            v23 = *(double *)v11;
            v24 = *((double *)v11 + 1);
            v25 = *((double *)v11 + 2);
            v26 = *((double *)v11 + 3);
            glUniform4f(v3, v23, v24, v25, v26);
            break;
          case 6:
            for (i = 0; i != 9; ++i)
            {
              v14 = *(double *)&v11[8 * i];
              *((float *)&v31.var1 + i) = v14;
            }
            glUniformMatrix3fv(v3, 1, 1u, (const GLfloat *)&v31.var1);
            break;
          case 7:
            for (j = 0; j != 64; j += 16)
            {
              v19 = *(float64x2_t *)v11;
              v18 = *((float64x2_t *)v11 + 1);
              v11 += 32;
              *(float32x4_t *)((char *)&v31.var1 + j) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v19), v18);
            }
            glUniformMatrix4fv(v3, 1, 1u, (const GLfloat *)&v31.var1);
            break;
          default:
            v30 = (PCException *)__cxa_allocate_exception(0x40uLL);
            PCException::PCException(v30);
            *(_QWORD *)v30 = &unk_1E65EA798;
        }
        return this;
      default:
        return (uint64_t **)OZChannelBase::setRangeName(&v31, v6);
    }
    return (uint64_t **)OZChannelBase::setRangeName(&v31, v6);
  }
  return this;
}

void sub_1B2D191C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  const PCString *v11;

  __cxa_free_exception(v9);
  OZChannelBase::setRangeName((OZChannelBase *)&a9, v11);
  _Unwind_Resume(a1);
}

void *ProShade::UniformWorkspace::getValue(ProShade::UniformWorkspace *this, const ProShade::UniformProgram::Register *a2, ProShade::Value *a3)
{
  uint64_t v3;

  v3 = *((_QWORD *)a2 + 2);
  if (!v3)
    throw_PCNullPointerException(1);
  return ProShade::Value::set((uint64_t)a3, (const PCString *)*(unsigned int *)(v3 + 24), *(_DWORD *)(v3 + 28), *(const void **)(*((_QWORD *)this + 4) + 16 * *((int *)a2 + 16)));
}

uint64_t ProShade::UniformWorkspace::computeRegister(uint64_t **this, const ProShade::UniformProgram::Register *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  const PCString *v12;
  int Size;
  uint64_t v14;
  int v15;
  uint64_t result;
  uint64_t *v17;
  BOOL *__dst;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  int v22[4];
  PCString v23[18];

  v23[16] = *(PCString *)MEMORY[0x1E0C80C00];
  v3 = *((int *)a2 + 16);
  v17 = this[1];
  __dst = (BOOL *)this[4][2 * v3];
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656E548;
  v4 = *((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9);
  if ((int)(v4 >> 2) >= 1)
  {
    v6 = 0;
    v7 = v4 & 0x3FFFFFFFCLL;
    do
    {
      v8 = *(_DWORD *)(*((_QWORD *)a2 + 9) + v6);
      if ((v8 & 0x80000000) == 0)
      {
        v9 = **this;
        if ((int)v20 <= SHIDWORD(v20))
          v10 = (2 * (HIDWORD(v20) + 1)) | 1;
        else
          v10 = v20;
        PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::resize(&v19, HIDWORD(v20) + 1, v10);
        ProShade::UniformWorkspace::getValue((ProShade::UniformWorkspace *)this, (const ProShade::UniformProgram::Register *)(v9 + 120 * v8), (ProShade::Value *)(v21 + 144 * SHIDWORD(v20) - 144));
      }
      v6 += 4;
    }
    while (v7 != v6);
  }
  ProShade::Value::Value(v22);
  v11 = *((_QWORD *)a2 + 2);
  if (!v11)
    throw_PCNullPointerException(1);
  (*(void (**)(uint64_t, void **, int *))(*(_QWORD *)v11 + 112))(v11, &v19, v22);
  Size = ProShade::shapeGetSize(v22[1], v12);
  v14 = *((_QWORD *)a2 + 2);
  if (!v14)
    throw_PCNullPointerException(1);
  ProShade::copyData((void *)v22[0], v23, *(_DWORD *)(v14 + 24), __dst, Size);
  *((_BYTE *)v17 + 2 * v3) = 1;
  *((_BYTE *)v17 + 2 * v3 + 1) = 1;
  v19 = &unk_1E656E548;
  if ((int)v20 < 0)
    v15 = 1;
  else
    v15 = v20;
  PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::resize(&v19, 0, v15);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D19458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656E548;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::resize((_QWORD *)a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t ProShade::UniformWorkspace::computeAllOutputs(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;

  v1 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 3);
  if ((int)v1 >= 1)
  {
    v2 = this;
    v3 = 0;
    v4 = 120 * v1;
    do
    {
      v5 = (int *)(**(_QWORD **)v2 + v3);
      if (!*(_BYTE *)(*(_QWORD *)(v2 + 8) + 2 * v5[16]))
        this = ProShade::UniformWorkspace::computeRegister((uint64_t **)v2, (const ProShade::UniformProgram::Register *)v5);
      v3 += 120;
    }
    while (v4 != v3);
  }
  return this;
}

uint64_t **ProShade::UniformWorkspace::sendChangedUniforms(uint64_t **this)
{
  int *v1;
  int *v2;
  uint64_t v3;

  v1 = (int *)(*this)[6];
  v2 = (int *)(*this)[7];
  if (v1 != v2)
  {
    v3 = (uint64_t)this;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v3 + 8) + 2 * *(int *)(**(_QWORD **)v3 + 120 * *v1 + 64) + 1))
        this = ProShade::UniformWorkspace::setUniform((uint64_t **)v3, *v1);
      ++v1;
    }
    while (v1 != v2);
  }
  return this;
}

uint64_t *ProShade::UniformWorkspace::set(uint64_t **this, const ProShade::UniformNode *a2, int a3, const char *__s2)
{
  uint64_t *result;
  _QWORD *v6;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  unint64_t v20;
  uint64_t v21;

  result = *this;
  v6 = (_QWORD *)result[4];
  if (v6)
  {
    v8 = result + 4;
    do
    {
      v9 = v6[4];
      v10 = v9 >= (unint64_t)a2;
      if (v9 >= (unint64_t)a2)
        v11 = v6;
      else
        v11 = v6 + 1;
      if (v10)
        v8 = v6;
      v6 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != result + 4 && v8[4] <= (unint64_t)a2)
    {
      v12 = *((int *)v8 + 10);
      v13 = *result;
      if (0xEEEEEEEEEEEEEEEFLL * ((result[1] - *result) >> 3) <= v12)
        goto LABEL_18;
      v14 = *(int *)(v13 + 120 * (int)v12 + 64);
      *((_WORD *)this[1] + v14) = 257;
      v15 = (void *)this[4][2 * v14];
      v16 = a3;
      result = (uint64_t *)memcmp(v15, __s2, a3);
      if ((_DWORD)result)
      {
        result = (uint64_t *)memcpy(v15, __s2, v16);
        v17 = v13 + 120 * (int)v12;
        v18 = *(int **)(v17 + 96);
        v19 = *(int **)(v17 + 104);
        if (v18 != v19)
        {
          while (1)
          {
            v20 = *v18;
            v21 = **this;
            if (0xEEEEEEEEEEEEEEEFLL * (((*this)[1] - v21) >> 3) <= v20)
              break;
            result = (uint64_t *)ProShade::UniformWorkspace::dirty((ProShade::UniformWorkspace *)this, (const ProShade::UniformProgram::Register *)(v21 + 120 * (int)v20));
            if (++v18 == v19)
              return result;
          }
LABEL_18:
          std::vector<unsigned int>::__throw_out_of_range[abi:ne180100]();
        }
      }
    }
  }
  return result;
}

uint64_t ProShade::UniformData::getCurrentContextUniformData(ProShade::UniformData *this)
{
  unsigned __int8 v1;
  char v3;

  if ((v1 & 1) == 0
  {
    qword_1EF075F88 = 0;
    qword_1EF075F80 = 0;
    ProShade::UniformData::getCurrentContextUniformData(void)::uniformData = (uint64_t)&qword_1EF075F80;
    dword_1EF075F90 = 0;
    __cxa_atexit((void (*)(void *))LiPerContextObject<ProShade::UniformData>::~LiPerContextObject, &ProShade::UniformData::getCurrentContextUniformData(void)::uniformData, &dword_1B2737000);
  }
  v3 = 0;
  return *(_QWORD *)LiPerContext<ProShade::UniformData *,LiPerContextObject_Traits<ProShade::UniformData>,LiOpenGLContextGetter>::get((uint64_t)&ProShade::UniformData::getCurrentContextUniformData(void)::uniformData, &v3);
}

uint64_t LiPerContextObject<ProShade::UniformData>::~LiPerContextObject(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 != a1 + 8)
  {
    do
    {
      LiPerContextObject_Traits<ProShade::UniformData>::destroy(v3[6]);
      v4 = (_QWORD *)v3[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v3[2];
          v6 = *v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != v2);
  }
  PCSpinLock::~PCSpinLock((PCSpinLock *)(a1 + 24));
  std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

uint64_t *ProShade::UniformData::setWorkspaceGlobals(uint64_t *this, PCString *a2)
{
  uint64_t *v2;
  const char *v3;
  const ProShade::UniformNode *v5;
  int AllocSize;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;

  v2 = this + 1;
  v3 = (const char *)*this;
  if ((uint64_t *)*this != this + 1)
  {
    do
    {
      v5 = (const ProShade::UniformNode *)*((_QWORD *)v3 + 4);
      AllocSize = ProShade::Value::getAllocSize((ProShade::Value *)(v3 + 40), a2);
      this = ProShade::UniformWorkspace::set((uint64_t **)a2, v5, AllocSize, v3 + 56);
      v7 = (uint64_t *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (uint64_t *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)*((_QWORD *)v3 + 2);
          v9 = *v8 == (_QWORD)v3;
          v3 = (const char *)v8;
        }
        while (!v9);
      }
      v3 = (const char *)v8;
    }
    while (v8 != v2);
  }
  return this;
}

ProShade::UniformProgram::Register *ProShade::UniformProgram::Register::Register(ProShade::UniformProgram::Register *this)
{
  *(_QWORD *)this = &unk_1E6569AC8;
  *((_QWORD *)this + 2) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3);
  *((_QWORD *)this + 4) = &unk_1E6569AC8;
  *((_QWORD *)this + 6) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7);
  *((_QWORD *)this + 8) = -1;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return this;
}

void sub_1B2D1993C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *v1 = v4;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::VarT<ProShade::Node>::bytes(uint64_t a1, const PCString *a2)
{
  uint64_t v2;
  int Size;
  const PCString *v4;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    throw_PCNullPointerException(1);
  Size = ProShade::shapeGetSize(*(_DWORD *)(v2 + 28), a2);
  return ProShade::typeGetSize(*(_DWORD *)(v2 + 24), v4) * Size;
}

uint64_t LiPerContextObject_Traits<ProShade::UniformData>::destroy(uint64_t result)
{
  if (result)
  {
    std::__tree<std::__value_type<int,__CVBuffer *>,std::__map_value_compare<int,std::__value_type<int,__CVBuffer *>,std::less<int>,true>,std::allocator<std::__value_type<int,__CVBuffer *>>>::destroy(result, *(_QWORD **)(result + 8));
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

void std::vector<ProShade::UniformProgram::CompileNode>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void *v16[2];
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0x4EC4EC4EC4EC4EC5 * ((v6 - v7) >> 3) >= a2)
  {
    std::vector<ProShade::UniformProgram::CompileNode>::__construct_at_end((uint64_t)a1, a2);
  }
  else
  {
    v8 = 0x4EC4EC4EC4EC4EC5 * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x276276276276276)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = 0x4EC4EC4EC4EC4EC5 * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x13B13B13B13B13BLL)
      v11 = 0x276276276276276;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformProgram::CompileNode>>(v4, v11);
    else
      v12 = 0;
    v13 = &v12[104 * v8];
    v16[0] = v12;
    v16[1] = v13;
    v17 = v13;
    v18 = &v12[104 * v11];
    v14 = 104 * a2;
    v15 = &v13[104 * a2];
    do
    {
      std::allocator<ProShade::UniformProgram::CompileNode>::construct[abi:ne180100]<ProShade::UniformProgram::CompileNode>(v19, (uint64_t)v13);
      v13 += 104;
      v14 -= 104;
    }
    while (v14);
    v17 = v15;
    std::vector<ProShade::UniformProgram::CompileNode>::__swap_out_circular_buffer(a1, v16);
    std::__split_buffer<ProShade::UniformProgram::CompileNode>::~__split_buffer(v16);
  }
}

void sub_1B2D19B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ProShade::UniformProgram::CompileNode>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<ProShade::UniformProgram::CompileNode>::__construct_at_end(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    v4 = v3 + 104 * a2;
    v5 = 104 * a2;
    do
    {
      std::allocator<ProShade::UniformProgram::CompileNode>::construct[abi:ne180100]<ProShade::UniformProgram::CompileNode>(a1 + 16, v3);
      v3 += 104;
      v5 -= 104;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3;
}

void sub_1B2D19BA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<ProShade::UniformProgram::CompileNode>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ProShade::UniformProgram::CompileNode>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::allocator<ProShade::UniformProgram::CompileNode>::construct[abi:ne180100]<ProShade::UniformProgram::CompileNode>(uint64_t a1, uint64_t a2)
{
  PCSharedCount *v3;

  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  v3 = (PCSharedCount *)(a2 + 56);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_QWORD *)a2 = &unk_1E6569AC8;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 24));
  *(_QWORD *)(a2 + 32) = &unk_1E6569AC8;
  *(_QWORD *)(a2 + 48) = 0;
  PCSharedCount::PCSharedCount(v3);
  *(_DWORD *)(a2 + 64) = -1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 96) = -1;
}

void sub_1B2D19CA4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = v3;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformProgram::CompileNode>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x276276276276277)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(104 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ProShade::UniformProgram::CompileNode>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 104;
      std::allocator<ProShade::UniformProgram::CompileNode>::construct[abi:ne180100]<ProShade::UniformProgram::CompileNode,ProShade::UniformProgram::CompileNode const&>(a1, v7 - 104, v9);
      v7 = *((_QWORD *)&v16 + 1) - 104;
      *((_QWORD *)&v16 + 1) -= 104;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::CompileNode>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1B2D19DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::CompileNode>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<ProShade::UniformProgram::CompileNode>::construct[abi:ne180100]<ProShade::UniformProgram::CompileNode,ProShade::UniformProgram::CompileNode const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  _QWORD *result;

  *(_QWORD *)a2 = &unk_1E6569AC8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 24), (const PCSharedCount *)(a3 + 24));
  *(_QWORD *)(a2 + 32) = &unk_1E6569AC8;
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 56), (const PCSharedCount *)(a3 + 56));
  v5 = *(_DWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 72) = 0;
  *(_DWORD *)(a2 + 64) = v5;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a2 + 72), *(const void **)(a3 + 72), *(_QWORD *)(a3 + 80), (uint64_t)(*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 2);
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
  return result;
}

void sub_1B2D19E7C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  uint64_t v4;

  v1[4] = v4 + 16;
  PCSharedCount::~PCSharedCount(v3);
  *v1 = v4 + 16;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::CompileNode>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::CompileNode>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::CompileNode>,std::reverse_iterator<ProShade::UniformProgram::CompileNode*>>::operator()[abi:ne180100](uint64_t *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  v1 = *(PCSharedCount **)(a1[2] + 8);
  v2 = *(PCSharedCount **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<ProShade::UniformProgram::CompileNode>::destroy[abi:ne180100](v3, v1);
      v1 += 13;
    }
    while (v1 != v2);
  }
}

void std::allocator<ProShade::UniformProgram::CompileNode>::destroy[abi:ne180100](uint64_t a1, PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;

  var0 = a2[9].var0;
  if (var0)
  {
    a2[10].var0 = var0;
    operator delete(var0);
  }
  a2[4].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a2 + 7);
  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(a2 + 3);
}

void **std::__split_buffer<ProShade::UniformProgram::CompileNode>::~__split_buffer(void **a1)
{
  std::__split_buffer<ProShade::UniformProgram::CompileNode>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<ProShade::UniformProgram::CompileNode>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 104;
    std::allocator<ProShade::UniformProgram::CompileNode>::destroy[abi:ne180100](v4, (PCSharedCount *)(i - 104));
  }
}

uint64_t std::vector<ProShade::UniformProgram::Register>::__push_back_slow_path<ProShade::UniformProgram::Register>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x222222222222222)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 3) >= 0x111111111111111)
    v6 = 0x222222222222222;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformProgram::Register>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[120 * v3];
  v13 = &v7[120 * v6];
  std::allocator<ProShade::UniformProgram::Register>::construct[abi:ne180100]<ProShade::UniformProgram::Register,ProShade::UniformProgram::Register>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 120;
  std::vector<ProShade::UniformProgram::Register>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<ProShade::UniformProgram::Register>::~__split_buffer(&v10);
  return v8;
}

void sub_1B2D1A0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<ProShade::UniformProgram::Register>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<ProShade::UniformProgram::Register>::construct[abi:ne180100]<ProShade::UniformProgram::Register,ProShade::UniformProgram::Register>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E6569AC8;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a3 + 8);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 24), (const PCSharedCount *)(a3 + 24));
  *(_QWORD *)(a2 + 32) = &unk_1E6569AC8;
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 56), (const PCSharedCount *)(a3 + 56));
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a3 + 72);
  *(_QWORD *)(a2 + 88) = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  result = *(__n128 *)(a3 + 96);
  *(__n128 *)(a2 + 96) = result;
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  return result;
}

void sub_1B2D1A1BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  uint64_t v3;

  *v1 = v3;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<ProShade::UniformProgram::Register>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ProShade::UniformProgram::Register>,std::reverse_iterator<ProShade::UniformProgram::Register*>,std::reverse_iterator<ProShade::UniformProgram::Register*>,std::reverse_iterator<ProShade::UniformProgram::Register*>>((uint64_t)(a1 + 2), a1[1], (const ProShade::UniformProgram::Register *)a1[1], *a1, (const ProShade::UniformProgram::Register *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformProgram::Register>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(120 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<ProShade::UniformProgram::Register>,std::reverse_iterator<ProShade::UniformProgram::Register*>,std::reverse_iterator<ProShade::UniformProgram::Register*>,std::reverse_iterator<ProShade::UniformProgram::Register*>>(uint64_t a1, uint64_t a2, const ProShade::UniformProgram::Register *a3, uint64_t a4, const ProShade::UniformProgram::Register *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const ProShade::UniformProgram::Register *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (const ProShade::UniformProgram::Register *)((char *)v9 - 120);
      ProShade::UniformProgram::Register::Register((ProShade::UniformProgram::Register *)(v7 - 120), v9);
      v7 = *((_QWORD *)&v15 + 1) - 120;
      *((_QWORD *)&v15 + 1) -= 120;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::Register>,std::reverse_iterator<ProShade::UniformProgram::Register*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1B2D1A330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::Register>,std::reverse_iterator<ProShade::UniformProgram::Register*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

ProShade::UniformProgram::Register *ProShade::UniformProgram::Register::Register(ProShade::UniformProgram::Register *this, const ProShade::UniformProgram::Register *a2)
{
  uint64_t v4;

  *(_QWORD *)this = &unk_1E6569AC8;
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 3, (const PCSharedCount *)a2 + 3);
  *((_QWORD *)this + 4) = &unk_1E6569AC8;
  *((_BYTE *)this + 40) = *((_BYTE *)a2 + 40);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 7, (const PCSharedCount *)a2 + 7);
  v4 = *((_QWORD *)a2 + 8);
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 8) = v4;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 9, *((const void **)a2 + 9), *((_QWORD *)a2 + 10), (uint64_t)(*((_QWORD *)a2 + 10) - *((_QWORD *)a2 + 9)) >> 2);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 12, *((const void **)a2 + 12), *((_QWORD *)a2 + 13), (uint64_t)(*((_QWORD *)a2 + 13) - *((_QWORD *)a2 + 12)) >> 2);
  return this;
}

void sub_1B2D1A410(_Unwind_Exception *a1)
{
  _QWORD *v1;
  PCSharedCount *v2;
  PCSharedCount *v3;
  void **v4;
  uint64_t v5;
  void *v7;

  v7 = *v4;
  if (*v4)
  {
    v1[10] = v7;
    operator delete(v7);
  }
  v1[4] = v5 + 16;
  PCSharedCount::~PCSharedCount(v3);
  *v1 = v5 + 16;
  PCSharedCount::~PCSharedCount(v2);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::Register>,std::reverse_iterator<ProShade::UniformProgram::Register*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::Register>,std::reverse_iterator<ProShade::UniformProgram::Register*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<ProShade::UniformProgram::Register>,std::reverse_iterator<ProShade::UniformProgram::Register*>>::operator()[abi:ne180100](uint64_t *a1)
{
  PCSharedCount *v1;
  PCSharedCount *v2;
  uint64_t v3;

  v1 = *(PCSharedCount **)(a1[2] + 8);
  v2 = *(PCSharedCount **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<ProShade::UniformProgram::Register>::destroy[abi:ne180100](v3, v1);
      v1 += 15;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<ProShade::UniformProgram::Register>::~__split_buffer(void **a1)
{
  std::__split_buffer<ProShade::UniformProgram::Register>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<ProShade::UniformProgram::Register>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 120;
    std::allocator<ProShade::UniformProgram::Register>::destroy[abi:ne180100](v4, (PCSharedCount *)(i - 120));
  }
}

void std::vector<ProShade::UniformProgram::CompileNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  PCSharedCount *v2;
  PCSharedCount *v4;
  void *v5;

  v1 = *a1;
  v2 = (PCSharedCount *)**a1;
  if (v2)
  {
    v4 = (PCSharedCount *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 13;
        std::allocator<ProShade::UniformProgram::CompileNode>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<ProShade::UniformWorkspace::RegisterState>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

_QWORD *std::shared_ptr<char>::shared_ptr[abi:ne180100]<char,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E656E4D0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2D1A660(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x1B5E29170](v1, 0x1000C4077774924);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<char *,std::shared_ptr<char>::__shared_ptr_default_delete<char,char>,std::allocator<char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t std::__shared_ptr_pointer<char *,std::shared_ptr<char>::__shared_ptr_default_delete<char,char>,std::allocator<char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1B5E29170);
  return result;
}

uint64_t std::__shared_ptr_pointer<char *,std::shared_ptr<char>::__shared_ptr_default_delete<char,char>,std::allocator<char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656E548;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::resize((_QWORD *)a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

_QWORD *PCArray<ProShade::Value,PCArray_Traits<ProShade::Value>>::resize(_QWORD *result, int a2, int a3)
{
  int v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  PCException *exception;
  PCString v16;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "PCArray::resize");
    PCException::PCException(exception, &v16);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  v5 = result;
  if (v3 == *((_DWORD *)result + 2))
  {
    v6 = *((int *)result + 3);
    if (a2 > (int)v6)
    {
      v7 = 144 * v6;
      v8 = a2 - v6;
      do
      {
        result = ProShade::Value::Value((_QWORD *)(v5[2] + v7));
        v7 += 144;
        --v8;
      }
      while (v8);
    }
  }
  else
  {
    if (v3)
    {
      v9 = (char *)operator new[]();
      bzero(v9, 144 * v3);
    }
    else
    {
      v9 = 0;
    }
    v10 = *((_DWORD *)v5 + 3);
    if (a2 >= v10)
      v11 = *((_DWORD *)v5 + 3);
    else
      v11 = a2;
    if (v11 < 1)
    {
      v11 = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        ProShade::Value::Value((PCString *)&v9[v12], (const PCString *)(v5[2] + v12));
        v12 += 144;
      }
      while (144 * v11 != v12);
      v10 = *((_DWORD *)v5 + 3);
    }
    if (v11 > v10)
      v10 = v11;
    if (v10 < a2)
    {
      v13 = &v9[144 * v10];
      v14 = a2 - (unint64_t)v10;
      do
      {
        v13 = (char *)(ProShade::Value::Value(v13) + 18);
        --v14;
      }
      while (v14);
    }
    result = (_QWORD *)v5[2];
    if (result)
      result = (_QWORD *)MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    v5[2] = v9;
  }
  *((_DWORD *)v5 + 2) = v3;
  *((_DWORD *)v5 + 3) = a2;
  return result;
}

void sub_1B2D1A93C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

_OWORD *LiPerContext<ProShade::UniformData *,LiPerContextObject_Traits<ProShade::UniformData>,LiOpenGLContextGetter>::get(uint64_t a1, _BYTE *a2)
{
  os_unfair_lock_s *v4;
  LiGLState *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  _QWORD *v9;
  uint64_t v11[3];
  uint64_t *v12;

  v4 = (os_unfair_lock_s *)(a1 + 24);
  v11[2] = a1 + 24;
  PCSpinLock::lock((os_unfair_lock_t)(a1 + 24));
  v11[1] = 0;
  v11[0] = LiGLState::getCurrentContext(v5);
  v6 = std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::find<LiOpenGLContextGetter::C>(a1, v11);
  if (a1 + 8 == v6)
  {
    *a2 = 1;
    v12 = v11;
    v8 = std::__tree<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,std::__map_value_compare<LiOpenGLContextGetter::C,std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>,LiOpenGLContextGetter::Compare,true>,std::allocator<std::__value_type<LiOpenGLContextGetter::C,ProShade::ProgramBase::Exe *>>>::__emplace_unique_key_args<LiOpenGLContextGetter::C,std::piecewise_construct_t const&,std::tuple<LiOpenGLContextGetter::C const&>,std::tuple<>>((uint64_t **)a1, v11, (uint64_t)&std::piecewise_construct, (_OWORD **)&v12);
    v9 = (_QWORD *)operator new();
    v9[2] = 0;
    v9[1] = 0;
    *v9 = v9 + 1;
    *((_QWORD *)v8 + 6) = v9;
    v7 = v8 + 3;
  }
  else
  {
    *a2 = 0;
    v7 = (_OWORD *)(v6 + 48);
  }
  PCSpinLock::unlock(v4);
  return v7;
}

void sub_1B2D1AA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  PCLockSentry<PCSpinLock>::~PCLockSentry((os_unfair_lock_s **)va);
  _Unwind_Resume(a1);
}

void LiMaterialProperties::LiMaterialProperties(LiMaterialProperties *this)
{
  uint64_t v2;

  PCWorkingColorVector::PCWorkingColorVector(this);
  *(_QWORD *)(v2 + 16) = 0;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)(v2 + 24));
  *((_QWORD *)this + 5) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiMaterialProperties *)((char *)this + 48));
  PCWorkingColorVector::PCWorkingColorVector((LiMaterialProperties *)((char *)this + 64));
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_BYTE *)this + 96) = 1;
  *(_QWORD *)((char *)this + 97) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)this + 7) = _Q0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 9) = _Q0;
  LiPolygon::LiPolygon((LiMaterialProperties *)((char *)this + 160));
  *((_QWORD *)this + 49) = 0x3FF0000000000000;
  *((_QWORD *)this + 44) = 0x3FF0000000000000;
  *((_QWORD *)this + 39) = 0x3FF0000000000000;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
}

void LiMaterialProperties::~LiMaterialProperties(LiMaterialProperties *this)
{
  LiPolygon::~LiPolygon((LiMaterialProperties *)((char *)this + 160));
}

double *LiMaterialProperties::getZExtent@<X0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double *v11;
  double *result;
  double v13;
  double v14[13];

  v5 = 0;
  v14[12] = *(double *)MEMORY[0x1E0C80C00];
  v6 = a2[1];
  v7 = a2[2];
  v8 = v6 + a2[3];
  v14[0] = *a2;
  v14[1] = v8;
  v14[2] = 0.0;
  v14[3] = v14[0] + v7;
  v14[4] = v8;
  v14[5] = 0.0;
  v14[6] = v14[0];
  v14[7] = v6;
  v14[8] = 0.0;
  v14[9] = v14[0] + v7;
  v14[10] = v6;
  v14[11] = 0.0;
  v9 = 1.79769313e308;
  v10 = 2.22507386e-308;
  do
  {
    result = PCMatrix44Tmpl<double>::transform<double>(a1, &v14[v5], &v14[v5]);
    v11 = &v14[v5];
    v13 = -v14[v5 + 2];
    if (v9 > v13)
      v9 = -v11[2];
    if (v10 < v13)
      v10 = -v11[2];
    v5 += 3;
  }
  while (v5 != 12);
  *a3 = v9;
  a3[1] = v10;
  return result;
}

double *LiMaterialProperties::getZExtent@<X0>(uint64_t a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  return LiMaterialProperties::getZExtent(a2, (double *)(a1 + 128), a3);
}

uint64_t LiEdgeTexture::getDefaultResolution(LiEdgeTexture *this)
{
  return 64;
}

double LiEdgeTexture::erfc_filter(LiEdgeTexture *this, double a2, double a3)
{
  double v5;
  double v6;
  double v7;
  double v8;

  v5 = a3 * 0.5;
  v6 = erfc(a3 * 0.5 * 1.5);
  v7 = a2 - v5;
  v8 = 1.0;
  if (a2 - v5 > -(a3 * 0.5))
  {
    v8 = 0.0;
    if (v7 < v5)
      return (erfc(v7 * 1.5) * 0.5 - v6 * 0.5) / (1.0 - (v6 * 0.5 + v6 * 0.5));
  }
  return v8;
}

long double LiEdgeTexture::smoothStep(LiEdgeTexture *this, double a2, double a3)
{
  long double result;
  long double v5;
  long double v6;

  result = 1.0;
  if (a2 >= 0.0)
  {
    result = 0.0;
    if (a2 <= 2.0)
    {
      v5 = (2.0 - a2) * 0.5;
      v6 = (pow(v5, 1.5) - v5) * ((1.0 - v5) * 0.5 + -0.5 + 1.0);
      return (v5 * 0.5 + -0.5 + 1.0) * (1.0 - pow(1.0 - v5, 1.5) - v5) + v5 + v6;
    }
  }
  return result;
}

double LiEdgeTexture::eval(LiEdgeTexture *a1, double a2, double a3)
{
  double result;
  double v5;
  float v6;
  PCIllegalArgumentException *exception;

  result = 1.0;
  if (a2 > 0.0)
  {
    if (a2 >= a3)
    {
      return 0.0;
    }
    else
    {
      switch((int)a1)
      {
        case 0:
          if (a2 >= 0.5)
          {
            result = 0.0;
            if (a2 <= 1.5)
              result = 1.5 - a2;
          }
          break;
        case 1:
          v5 = exp(a3 * a3 * -1.5);
          result = (exp(fabs(a2 * a2) * -1.5) - v5) / (1.0 - v5);
          break;
        case 2:
          result = 0.0;
          if (a2 < 2.0)
            result = (cos(a2 * 3.14159265 * 0.5) + 1.0) * 0.5;
          break;
        case 3:
          result = LiEdgeTexture::erfc_filter(a1, a2, a3);
          break;
        case 4:
          result = 0.0;
          if (a2 < 2.0)
            result = sin(a2 * -0.96875 * 3.14159265 * 0.25) + 1.0;
          break;
        case 5:
          result = 0.0;
          if (a2 < 2.0)
          {
            v6 = 2.0 - a2;
            result = sin(v6 * 0.96875 * 3.14159265 * 0.25);
          }
          break;
        case 6:
          result = LiEdgeTexture::smoothStep(a1, a2, a3);
          break;
        default:
          exception = (PCIllegalArgumentException *)__cxa_allocate_exception(0x40uLL);
          PCIllegalArgumentException::PCIllegalArgumentException(exception);
      }
    }
  }
  return result;
}

void sub_1B2D1AF4C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void LiEdgeTexture::createHeliumBitmap(int a1@<W0>, LiEdgeTexture *a2@<X1>, int a3@<W2>, int32x4_t ***a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int32x4_t **v14;
  int v15;
  double v16;
  int32x4_t *v17;
  double v18;
  int v19;
  double v20;
  BOOL v21;

  if (a1)
    v10 = 28;
  else
    v10 = 24;
  v11 = HGRectMake4i(0, 0, a3, a3);
  v13 = v12;
  v14 = (int32x4_t **)HGObject::operator new(0x80uLL);
  HGBitmap::HGBitmap(v14, v11, v13, v10);
  *a4 = v14;
  if (a1)
  {
    v15 = a3 - 1;
    if (a3 >= 1)
    {
      v16 = a5 / (double)(a3 - 3);
      v17 = v14[10];
      do
      {
        v18 = LiEdgeTexture::eval(a2, v16 * (double)(v15 - 1), a5);
        v19 = a3;
        do
        {
          v20 = v18 * LiEdgeTexture::eval(a2, v16 * (double)(v19 - 2), a5);
          *(float *)&v20 = v20;
          *(float *)&v20 = fminf(fmaxf(*(float *)&v20, 0.0), 1.0);
          *v17++ = vdupq_lane_s32(*(int32x2_t *)&v20, 0);
          v21 = __OFSUB__(v19--, 1);
        }
        while (!((v19 < 0) ^ v21 | (v19 == 0)));
      }
      while (v15-- >= 1);
    }
  }
  else
  {
  }
}

void sub_1B2D1B0A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::evalBitmap<unsigned char>(char *a1, int a2, int a3, LiEdgeTexture *a4, double a5)
{
  int v5;
  double v11;
  size_t v12;
  uint64_t v13;
  int v14;
  double v15;
  int i;
  double v17;
  int v18;
  int v19;
  int v20;

  v5 = a3 - 1;
  if (a3 >= 1)
  {
    v11 = a5 / (double)(a3 - 3);
    v12 = a2;
    v13 = (a2 - 1) + 1;
    do
    {
      v14 = v5--;
      v15 = LiEdgeTexture::eval(a4, v11 * (double)v5, a5);
      for (i = a3; i >= 1; --i)
      {
        v17 = LiEdgeTexture::eval(a4, v11 * (double)(i - 2), a5);
        if (a2 >= 1)
        {
          v18 = vcvtmd_s64_f64(v15 * v17 * 255.0 + 0.5 + 0.0000001);
          v19 = v18 & ~(v18 >> 31);
          if (v19 >= 255)
            v20 = 255;
          else
            v20 = v19;
          memset(a1, v20, v12);
          a1 += v13;
        }
      }
    }
    while (v14 >= 1);
  }
}

void LiEdgeTexture::createHeliumNode(const void *a1@<X0>, LiEdgeTexture *a2@<X1>, HGBitmapLoader **a3@<X8>)
{
  HGGPURenderer *v5;
  HGGPURenderer *v6;
  int v7;
  int v8;
  HGBitmap *v9;
  HGBitmapLoader *v10;
  int32x4_t **v11;
  HGTexture *v12;
  HGBitmapLoader *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  uint64_t v17;
  PCSharedCount v18;
  int32x4_t **v19;
  std::__shared_weak_count *v20;
  PCSharedCount v21;

  if (!a1
  {
LABEL_7:
    LiEdgeTexture::createHeliumBitmap(1, a2, 64, &v19, 2.0);
    v11 = v19;
    v12 = (HGTexture *)HGObject::operator new(0x80uLL);
    HGTexture::HGTexture(v12, *(HGRect *)((char *)v11 + 20), (HGBitmap *)v11);
    v13 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
    HGBitmapLoader::HGBitmapLoader(v13, (HGBitmap *)v12);
    *a3 = v13;
    if (v12)
      (*(void (**)(HGTexture *))(*(_QWORD *)v12 + 24))(v12);
    ((void (*)(int32x4_t **))(*v11)[1].i64[1])(v11);
    return;
  }
  v6 = v5;
  v7 = (*(uint64_t (**)(HGGPURenderer *, uint64_t))(*(_QWORD *)v5 + 128))(v5, 43);
  v8 = (*(uint64_t (**)(HGGPURenderer *, uint64_t))(*(_QWORD *)v6 + 128))(v6, 43);
  if (v7)
  {
    if (v8 == 1)
    {
      LiEdgeTexture::createMetalTexture(v6, a2, 64, (HGMetalTexture **)&v19, 2.0);
      v9 = (HGBitmap *)v19;
      v10 = (HGBitmapLoader *)HGObject::operator new(0x1F0uLL);
      HGBitmapLoader::HGBitmapLoader(v10, v9);
      *a3 = v10;
      if (v19)
        ((void (*)(int32x4_t **))(*v19)[1].i64[1])(v19);
      return;
    }
    goto LABEL_7;
  }
  HGGPURenderer::GetCurrentContext(v6, (uint64_t *)&v21);
  v18.var0 = v21.var0;
  LiEdgeTexture::createProGLTexture(&v18.var0, a2, 64, (HGGLBlendingInfo **)&v19, 2.0);
  PCSharedCount::PCSharedCount(&v18);
  v17 = 0;
  LiHelium::createTextureHandleNode((uint64_t)&v19, 1, (uint64_t)v6, (unsigned int *)&v17, a3);
  v14 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  PCSharedCount::PCSharedCount(&v21);
}

void sub_1B2D1B3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount a11, uint64_t a12, uint64_t a13, PCSharedCount a14)
{
  void *v14;

  HGObject::operator delete(v14);
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 24))(a12);
  _Unwind_Resume(a1);
}

PCMutex *LiEdgeTexture::createProGLTexture@<X0>(PC_Sp_counted_base **a1@<X0>, LiEdgeTexture *a2@<X1>, uint64_t a3@<X2>, HGGLBlendingInfo **a4@<X8>, double a5@<D0>)
{
  _anonymous_namespace_::EdgeTextureCache *v10;
  uint64_t v11;
  PCColorSpaceCache *VirtualScreen;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v23;
  char *v24;
  int NumChannels;
  _anonymous_namespace_ *CGColorSpace;
  unsigned int v27;
  GLint GLInternalFormat;
  unsigned int v29;
  GLenum GLDataFormat;
  unsigned int v31;
  GLuint Name;
  GLsizei Width;
  GLsizei Height;
  GLvoid *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  PCMutex *result;
  BOOL v52;
  std::__shared_weak_count *v53;
  _BYTE v54[40];
  PCSharedCount v55[2];
  PCSharedCount v56;
  _BYTE v57[16];
  CGColorSpace *v58[8];
  uint64_t v59;
  PCSharedCount v60;
  HGGLContext *v61;
  PCMutex *v62;
  char v63;
  uint64_t v64;
  HGGLBlendingInfo *v65;
  std::__shared_weak_count *v66;

  getLiEdgeTextureLock();
  v62 = &getLiEdgeTextureLock(void)::sLiEdgeTextureLock;
  v10 = (_anonymous_namespace_::EdgeTextureCache *)PCMutex::lock(&getLiEdgeTextureLock(void)::sLiEdgeTextureLock);
  v63 = 1;
  v60.var0 = *a1;
  HGGLContext::Share((uint64_t *)&v60, (HGObject **)&v61);
  PCSharedCount::PCSharedCount(&v60);
  VirtualScreen = (PCColorSpaceCache *)HGGLContext::getVirtualScreen(v61);
  v13 = (int)VirtualScreen;
  v14 = 0;
  v15 = *(_DWORD *)(v11 + 204);
  while (1)
  {
    v16 = v15 + v14 <= 0 ? -(-(v15 + v14) & 3) : (v15 + v14) & 3;
    v17 = v11 + 48 * v16;
    v18 = *(_DWORD *)(v17 + 8);
    v19 = *(_DWORD *)(v17 + 32);
    v20 = *(_QWORD *)(v17 + 48);
    v21 = v18 == (_DWORD)a2 && v19 == (_DWORD)VirtualScreen;
    if (v21 && v20 == -1)
      break;
    if (++v14 == 4)
    {
      v23 = PCColorSpaceCache::cgRec709Linear(VirtualScreen);
      PCBitmap::PCBitmap((uint64_t)v58, a3, a3, 5, v23, 1);
      v24 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
      NumChannels = PCPixelFormat::getNumChannels(5u);
      v56.var0 = *a1;
      HGGLSetCurrentContextGuard::HGGLSetCurrentContextGuard((HGGLContextPtr *)v57, &v56.var0);
      PCSharedCount::PCSharedCount(&v56);
      CGColorSpace = (_anonymous_namespace_ *)PCColorSpaceHandle::getCGColorSpace((PCColorSpaceHandle *)a1);
      ProGL::findContext(CGColorSpace, v55);
      ProGL::GL::GL((ProGL::GL *)v54, (const ProGL::ContextHandle *)v55);
      ProGL::createTexture((ProGL *)v54, a4);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59);
      GLInternalFormat = PCPixelFormat::getGLInternalFormat(v27);
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59);
      GLDataFormat = PCPixelFormat::getGLDataFormat(v29);
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 48))(v59);
      LODWORD(v24) = PCPixelFormat::getGLDataType(v31);
      Name = ProGL::TextureHandle::getName(a4);
      glBindTexture(0xDE1u, Name);
      Width = PCBitmap::getWidth((PCBitmap *)v58);
      Height = PCBitmap::getHeight((PCBitmap *)v58);
      v35 = (GLvoid *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v59 + 16))(v59);
      ProGL::TextureHandle::texImage2D((OZChannelBase **)a4, (ProGL::GL *)v54, 0xDE1u, 0, GLInternalFormat, Width, Height, 0, GLDataFormat, (GLenum)v24, v35);
      glTexParameteri(0xDE1u, 0x2801u, 9729);
      glTexParameteri(0xDE1u, 0x2800u, 9729);
      glTexParameteri(0xDE1u, 0x2802u, 33071);
      glTexParameteri(0xDE1u, 0x2803u, 33071);
      v36 = (uint64_t)*a4;
      v37 = (std::__shared_weak_count *)a4[1];
      v53 = v37;
      if (v37)
      {
        p_shared_owners = (unint64_t *)&v37->__shared_owners_;
        do
          v39 = __ldxr(p_shared_owners);
        while (__stxr(v39 + 1, p_shared_owners));
        v65 = (HGGLBlendingInfo *)v36;
        v66 = v37;
        do
          v40 = __ldxr(p_shared_owners);
        while (__stxr(v40 + 1, p_shared_owners));
      }
      else
      {
        v65 = *a4;
        v66 = 0;
      }
      v64 = 0;
      v45 = v66;
      if (v66)
      {
        v46 = (unint64_t *)&v66->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (v53)
      {
        v48 = (unint64_t *)&v53->__shared_owners_;
        do
          v49 = __ldaxr(v48);
        while (__stlxr(v49 - 1, v48));
        if (!v49)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
      }
      ProGL::GL::~GL((ProGL::GL *)v54);
      ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v55);
      HGGLSetCurrentContextGuard::~HGGLSetCurrentContextGuard((HGGLSetCurrentContextGuard *)v57);
      v50 = v59;
      v58[0] = (CGColorSpace *)&off_1E6511638;
      v59 = 0;
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      PCImage::~PCImage(v58);
      goto LABEL_37;
    }
  }
  *(_DWORD *)(v11 + 204) = v16;
  v41 = v11 + 48 * v16;
  *a4 = *(HGGLBlendingInfo **)(v41 + 16);
  v42 = *(unint64_t **)(v41 + 24);
  a4[1] = (HGGLBlendingInfo *)v42;
  if (v42)
  {
    v43 = v42 + 1;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
  }
LABEL_37:
  if (v61)
    (*(void (**)(HGGLContext *))(*(_QWORD *)v61 + 24))(v61);
  result = v62;
  if (v62)
    v52 = v63 == 0;
  else
    v52 = 1;
  if (!v52)
    return (PCMutex *)PCMutex::unlock(v62);
  return result;
}

void sub_1B2D1B8AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, PCSharedCount a20,char a21,uint64_t a22,char a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v24 - 112);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v23);
  ProGL::GL::~GL((ProGL::GL *)&a13);
  ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)&a18);
  HGGLSetCurrentContextGuard::~HGGLSetCurrentContextGuard((HGGLSetCurrentContextGuard *)&a21);
  PCBitmap::~PCBitmap((PCBitmap *)&a23);
  v26 = *(_QWORD *)(v24 - 144);
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
  PCLockSentry<PCMutex>::~PCLockSentry(v24 - 136);
  _Unwind_Resume(a1);
}

PCMutex *LiEdgeTexture::createMetalTexture@<X0>(HGGPURenderer *a1@<X0>, LiEdgeTexture *a2@<X1>, int a3@<W2>, HGMetalTexture **a4@<X8>, double a5@<D0>)
{
  _anonymous_namespace_::EdgeTextureCache *v10;
  uint64_t v11;
  PCICCTransferFunctionLUT *MetalContext;
  uint64_t LUTEnd;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  HGMetalContext *v24;
  char *v25;
  uint64_t v26;
  HGMetalTexture *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  PCMutex *result;
  BOOL v32;
  HGMetalTexture *v33;
  int32x4_t **v34;
  PCMutex *v35;
  char v36;
  HGMetalTexture *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  getLiEdgeTextureLock();
  v35 = &getLiEdgeTextureLock(void)::sLiEdgeTextureLock;
  v10 = (_anonymous_namespace_::EdgeTextureCache *)PCMutex::lock(&getLiEdgeTextureLock(void)::sLiEdgeTextureLock);
  v36 = 1;
  MetalContext = (PCICCTransferFunctionLUT *)HGGPURenderer::GetMetalContext(a1);
  LUTEnd = PCICCTransferFunctionLUT::getLUTEnd(MetalContext);
  v14 = 0;
  v15 = *(_QWORD *)(LUTEnd + 24);
  v16 = *(_DWORD *)(v11 + 204);
  do
  {
    if (v16 + v14 <= 0)
      v17 = -(-(v16 + v14) & 3);
    else
      v17 = (v16 + v14) & 3;
    v18 = v11 + 48 * v17;
    v19 = *(_DWORD *)(v18 + 8);
    v20 = *(_DWORD *)(v18 + 32);
    v21 = *(_QWORD *)(v18 + 48);
    if (v19 == (_DWORD)a2 && v20 == -1 && v21 == v15)
    {
      *(_DWORD *)(v11 + 204) = v17;
      v33 = *(HGMetalTexture **)(v11 + 48 * v17 + 40);
      *a4 = v33;
      if (v33)
        (*(void (**)(HGMetalTexture *))(*(_QWORD *)v33 + 16))(v33);
      v32 = 0;
      result = &getLiEdgeTextureLock(void)::sLiEdgeTextureLock;
      if (!&getLiEdgeTextureLock(void)::sLiEdgeTextureLock)
        return result;
LABEL_32:
      if (!v32)
        return (PCMutex *)PCMutex::unlock(result);
      return result;
    }
    ++v14;
  }
  while (v14 != 4);
  LiEdgeTexture::createHeliumBitmap(1, a2, a3, &v34, a5);
  v24 = (HGMetalContext *)HGGPURenderer::GetMetalContext(a1);
  v25 = (char *)HGMetalContext::texturePool(v24);
  v26 = HGGPURenderer::GetMetalContext(a1);
  HGMetalTexture::createWithCopy(*(void **)(*(_QWORD *)(v26 + 16) + 16), v25, (uint64_t)v34, *(uint64_t *)((char *)v34 + 20), *(uint64_t *)((char *)v34 + 28), 0, 0, a4);
  v27 = *a4;
  if (*a4)
    (*(void (**)(HGMetalTexture *))(*(_QWORD *)v27 + 16))(*a4);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v38);
  v37 = v27;
  if (v27)
    (*(void (**)(HGMetalTexture *))(*(_QWORD *)v27 + 16))(v27);
  if (v27)
    (*(void (**)(HGMetalTexture *))(*(_QWORD *)v27 + 24))(v27);
  v28 = v39;
  if (!v39)
    goto LABEL_23;
  p_shared_owners = (unint64_t *)&v39->__shared_owners_;
  do
    v30 = __ldaxr(p_shared_owners);
  while (__stlxr(v30 - 1, p_shared_owners));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
    if (v27)
LABEL_24:
      (*(void (**)(HGMetalTexture *))(*(_QWORD *)v27 + 24))(v27);
  }
  else
  {
LABEL_23:
    if (v27)
      goto LABEL_24;
  }
  if (v34)
    ((void (*)(int32x4_t **))(*v34)[1].i64[1])(v34);
  result = v35;
  v32 = v36 == 0;
  if (v35)
    goto LABEL_32;
  return result;
}

void sub_1B2D1BBD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)va);
  _Unwind_Resume(a1);
}

void LiEdgeTexture::createArray(int a1@<W0>, LiEdgeTexture *a2@<X1>, int *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  int v7;
  double v8;
  int v9;
  double v10;
  uint64_t v11;

  if (a1)
    v5 = a1;
  else
    v5 = 64;
  v6 = (uint64_t *)HGArray<float,(HGFormat)7>::HGArray((uint64_t)a3);
  HGArray<float,(HGFormat)7>::resize(v6, v5);
  if (v5 >= 1)
  {
    v7 = 0;
    v8 = 2.0 / (double)(v5 - 3);
    v9 = v5 - 2;
    do
    {
      v10 = LiEdgeTexture::eval(a2, v8 * (double)v9, 2.0);
      v11 = *(_QWORD *)(*(_QWORD *)a3 + 16) + *(int *)(*(_QWORD *)a3 + 4) * (uint64_t)v7++;
      *(float *)&v10 = v10;
      *(_DWORD *)(v11 + a3[2]) = LODWORD(v10);
      --v9;
    }
    while (v9 != -2);
  }
}

void sub_1B2D1BD34(_Unwind_Exception *exception_object)
{
  uint64_t *v1;

  if (*v1)
    HGArrayData::Release(*v1);
  _Unwind_Resume(exception_object);
}

_BYTE *setUseLiEdgeTextureNodeCache(char a1)
{
  _BYTE *result;

  getEdgeTextureUseFlag();
  result = PCThreadLocalValue<BOOL>::getValuePtr((uint64_t)&getEdgeTextureUseFlag(void)::result);
  *result = a1;
  return result;
}

void getEdgeTextureUseFlag(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      byte_1EF075FC8 = 1;
      pthread_key_create(&getEdgeTextureUseFlag(void)::result, (void (__cdecl *)(void *))PCThreadLocalValue<BOOL>::destroy);
    }
  }
}

void sub_1B2D1BDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t getUseLiEdgeTextureNodeCache(void)
{
  getEdgeTextureUseFlag();
  return *PCThreadLocalValue<BOOL>::getValuePtr((uint64_t)&getEdgeTextureUseFlag(void)::result);
}

void getLiEdgeTextureLock(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
      PCMutex::PCMutex(&getLiEdgeTextureLock(void)::sLiEdgeTextureLock, 1);
      getLiEdgeTextureLock(void)::sLiEdgeTextureLock._vptr$PCMutex = (void **)&unk_1E64E2000;
      __cxa_atexit((void (*)(void *))PCRecursiveMutex::~PCRecursiveMutex, &getLiEdgeTextureLock(void)::sLiEdgeTextureLock, &dword_1B2737000);
    }
  }
}

void sub_1B2D1BEAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::EdgeTextureCache::instance(_anonymous_namespace_::EdgeTextureCache *this)
{
  unsigned __int8 v1;
  _anonymous_namespace_::EdgeTextureCache *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_anonymous_namespace_::EdgeTextureCache *)operator new();
    *((_OWORD *)v3 + 11) = 0u;
    *((_OWORD *)v3 + 12) = 0u;
    *((_OWORD *)v3 + 9) = 0u;
    *((_OWORD *)v3 + 10) = 0u;
    *((_OWORD *)v3 + 7) = 0u;
    *((_OWORD *)v3 + 8) = 0u;
    *((_OWORD *)v3 + 5) = 0u;
    *((_OWORD *)v3 + 6) = 0u;
    *((_OWORD *)v3 + 3) = 0u;
    *((_OWORD *)v3 + 4) = 0u;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    *(_OWORD *)v3 = 0u;
  }
}

void sub_1B2D1BF58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C401995F540);
  _Unwind_Resume(a1);
}

PCMutex *LiEdgeTexture::getHeliumNode@<X0>(const void *a1@<X0>, LiEdgeTexture *a2@<X1>, HGBitmapLoader **a3@<X8>)
{
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int i;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  const void *v20;
  int v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  _QWORD *v29;
  const void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  HGBitmapLoader *v34;
  PCMutex *result;
  HGBitmapLoader *v36;

  getLiEdgeTextureLock();
  PCMutex::lock(&getLiEdgeTextureLock(void)::sLiEdgeTextureLock);
  getEdgeTextureUseFlag();
  if (*PCThreadLocalValue<BOOL>::getValuePtr((uint64_t)&getEdgeTextureUseFlag(void)::result))
  {
    if ((v6 & 1) == 0
    {
    }
    if ((v7 & 1) == 0
    {
    }
    if ((v8 & 1) == 0
    {
      getCache();
      LiEdgeTexture::getHeliumNode(HGRenderer *,LiEdgeTexture::Kernel)::cache = (uint64_t)&getCache(void)::cache;
    }
    for (i = 0; i != 4; ++i)
    {
      if (i + getLast(void)::last <= 0)
        v10 = -(-(i + getLast(void)::last) & 3);
      else
        v10 = (i + getLast(void)::last) & 3;
      v11 = LiEdgeTexture::getHeliumNode(HGRenderer *,LiEdgeTexture::Kernel)::cache;
      v12 = LiEdgeTexture::getHeliumNode(HGRenderer *,LiEdgeTexture::Kernel)::cache + 32 * v10;
      if (*(const void **)(v12 + 8) == a1 && *(_DWORD *)(v12 + 20) == (_DWORD)a2)
      {
        v13 = *(_DWORD *)(LiEdgeTexture::getHeliumNode(HGRenderer *,LiEdgeTexture::Kernel)::cache + 32 * v10 + 16);
        if (v13 == (*(unsigned int (**)(const void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, 43))
        {
          getLast(void)::last = v10;
          v36 = *(HGBitmapLoader **)(v11 + 32 * v10);
          *a3 = v36;
          if (v36)
            (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v36 + 16))(v36);
          goto LABEL_46;
        }
      }
    }
    LiEdgeTexture::createHeliumNode(a1, a2, a3);
    v14 = 0;
    v15 = LiEdgeTexture::getHeliumNode(HGRenderer *,LiEdgeTexture::Kernel)::cache;
    v16 = -1;
    v17 = -1;
    do
    {
      if (getLast(void)::last + v14 <= 0)
        v18 = -(-(getLast(void)::last + v14) & 3);
      else
        v18 = (getLast(void)::last + v14) & 3;
      v19 = LiEdgeTexture::getHeliumNode(HGRenderer *,LiEdgeTexture::Kernel)::cache + 32 * v18;
      v20 = *(const void **)(v19 + 8);
      if (v20 == a1 || v20 == 0)
      {
        v22 = *(_DWORD *)(v19 + 24);
        if (v16 == -1 || v16 > v22)
        {
          v17 = v18;
          v16 = v22;
        }
      }
      ++v14;
    }
    while (v14 != 4);
    if (v17 != -1)
    {
      v25 = v17;
      v26 = LiEdgeTexture::getHeliumNode(HGRenderer *,LiEdgeTexture::Kernel)::cache + 32 * v17;
      getLast(void)::last = v17;
      *(_DWORD *)(v26 + 24) = ++getSerial(void)::serial;
      if (a1)
      {
        (*(void (**)(const void *))(*(_QWORD *)a1 + 16))(a1);
        v27 = v15 + 32 * v25;
        v30 = *(const void **)(v27 + 8);
        v29 = (_QWORD *)(v27 + 8);
        v28 = v30;
        if (v30 == a1)
        {
          (*(void (**)(const void *))(*(_QWORD *)a1 + 24))(a1);
LABEL_40:
          v31 = (*(uint64_t (**)(const void *, uint64_t))(*(_QWORD *)a1 + 128))(a1, 43);
          v32 = v15 + 32 * v25;
          *(_DWORD *)(v32 + 16) = v31;
          v33 = *(_QWORD *)v26;
          v34 = *a3;
          if (*(HGBitmapLoader **)v26 != *a3)
          {
            if (v33)
            {
              (*(void (**)(_QWORD))(*(_QWORD *)v33 + 24))(*(_QWORD *)v26);
              v34 = *a3;
            }
            *(_QWORD *)v26 = v34;
            if (v34)
              (*(void (**)(HGBitmapLoader *))(*(_QWORD *)v34 + 16))(v34);
          }
          *(_DWORD *)(v32 + 20) = (_DWORD)a2;
          goto LABEL_46;
        }
      }
      else
      {
        v29 = (_QWORD *)(v26 + 8);
        v28 = *(const void **)(v26 + 8);
        if (!v28)
          goto LABEL_40;
      }
      if (v28)
        (*(void (**)(const void *))(*(_QWORD *)v28 + 24))(v28);
      *v29 = a1;
      goto LABEL_40;
    }
  }
  else
  {
    LiEdgeTexture::createHeliumNode(a1, a2, a3);
  }
LABEL_46:
  result = &getLiEdgeTextureLock(void)::sLiEdgeTextureLock;
  if (&getLiEdgeTextureLock(void)::sLiEdgeTextureLock)
    return (PCMutex *)PCMutex::unlock(&getLiEdgeTextureLock(void)::sLiEdgeTextureLock);
  return result;
}

void sub_1B2D1C2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  PCLockSentry<PCMutex>::~PCLockSentry((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void getCache(void)
{
  unsigned __int8 v0;
  uint64_t i;
  char *v2;

  {
    for (i = 0; i != 128; i += 32)
    {
      v2 = (char *)&getCache(void)::cache + i;
      *((_DWORD *)v2 + 6) = 0;
      *(_QWORD *)v2 = 0;
      *((_QWORD *)v2 + 1) = 0;
    }
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_0, 0, &dword_1B2737000);
  }
}

uint64_t PCThreadLocalValue<BOOL>::destroy(uint64_t result)
{
  if (result)
    JUMPOUT(0x1B5E29170);
  return result;
}

_anonymous_namespace_::EdgeTextureCache *`anonymous namespace'::EdgeTextureCache::EdgeTextureCache(_anonymous_namespace_::EdgeTextureCache *this)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;

  PCSingleton::PCSingleton(this, 0);
  v2 = 0;
  *v3 = &off_1E656E580;
  do
  {
    v4 = (char *)this + v2;
    *(_QWORD *)((char *)this + v2 + 8) = 7;
    PCWorkingColorVector::PCWorkingColorVector((_anonymous_namespace_::EdgeTextureCache *)((char *)this + v2 + 16));
    *((_DWORD *)v4 + 8) = -1;
    *((_QWORD *)v4 + 5) = 0;
    *((_QWORD *)v4 + 6) = -1;
    v2 += 48;
  }
  while (v2 != 192);
  *((_QWORD *)this + 25) = 1;
  return this;
}

void sub_1B2D1C460(_Unwind_Exception *a1)
{
  PCSingleton *v1;
  uint64_t v2;
  uint64_t v4;

  for (; v2; v2 -= 48)
  {
    v4 = *(_QWORD *)((char *)v1 + v2 - 8);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)v1 + v2 - 32);
  }
  PCSingleton::~PCSingleton(v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::EdgeTextureCache::~EdgeTextureCache(_anonymous_namespace_::EdgeTextureCache *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  *(_QWORD *)this = &off_1E656E580;
  do
  {
    v3 = *(_QWORD *)((char *)this + v2 + 184);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + v2 + 160);
    v2 -= 48;
  }
  while (v2 != -192);
  PCSingleton::~PCSingleton(this);
}

{
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  *(_QWORD *)this = &off_1E656E580;
  while (1)
  {
    v3 = *(_QWORD *)((char *)this + v2 + 184);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + v2 + 160);
    v2 -= 48;
    if (v2 == -192)
    {
      PCSingleton::~PCSingleton(this);
      JUMPOUT(0x1B5E29170);
    }
  }
}

uint64_t `anonymous namespace'::EdgeTextureCache::setCacheEntry(uint64_t a1, int a2, uint64_t *a3, int a4, uint64_t *a5, uint64_t a6)
{
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;

  v12 = 0;
  v13 = *(_DWORD *)(a1 + 204);
  v14 = -1;
  v15 = -1;
  do
  {
    if (v13 + v12 <= 0)
      v16 = -(-(v13 + v12) & 3);
    else
      v16 = (v13 + v12) & 3;
    if (v12)
      v17 = v15 <= *(_DWORD *)(a1 + 48 * v16 + 12);
    else
      v17 = 0;
    if (!v17)
    {
      v15 = *(_DWORD *)(a1 + 48 * v16 + 12);
      v14 = v16;
    }
    ++v12;
  }
  while (v12 != 4);
  v19 = v14;
  v20 = a1 + 48 * v14;
  *(_DWORD *)(a1 + 204) = v14;
  LiEdgeTextureCacheEntry::reset((LiEdgeTextureCacheEntry *)(v20 + 8));
  v21 = *(_DWORD *)(a1 + 200) + 1;
  *(_DWORD *)(a1 + 200) = v21;
  *(_DWORD *)(v20 + 8) = a2;
  *(_DWORD *)(v20 + 12) = v21;
  std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(v20 + 16), a3);
  v24 = *(_QWORD *)(v20 + 40);
  v23 = (uint64_t *)(v20 + 40);
  v22 = v24;
  *((_DWORD *)v23 - 2) = a4;
  result = *a5;
  if (v24 != *a5)
  {
    if (v22)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      result = *a5;
    }
    *v23 = result;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  *(_QWORD *)(a1 + 48 * v19 + 48) = a6;
  return result;
}

uint64_t LiEdgeTextureCacheEntry::reset(LiEdgeTextureCacheEntry *this)
{
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t result;
  __int128 v7;

  *(_QWORD *)this = 7;
  v2 = (char *)this + 8;
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v7);
  std::shared_ptr<TXTextObject>::operator=[abi:ne180100]((uint64_t)v2, &v7);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *((_DWORD *)this + 6) = -1;
  result = *((_QWORD *)this + 4);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = -1;
  return result;
}

uint64_t HGArrayData::Release(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;

  do
    v1 = __ldaxr((unsigned int *)this);
  while (__stlxr(v1 - 1, (unsigned int *)this));
  if (this && v1 == 1)
  {
    v2 = *(_QWORD *)(this + 16);
    if (v2)
      MEMORY[0x1B5E2914C](v2, 0x1000C8077774924);
    JUMPOUT(0x1B5E29170);
  }
  return this;
}

uint64_t HGArrayData::allocate(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  void *v7;
  void *v8;
  const void *v9;
  int v10;

  v2 = *(_DWORD *)(this + 12);
  if (v2 != a2)
  {
    v3 = this;
    v4 = *(_DWORD *)(this + 4);
    v5 = v4 * a2;
    *(_DWORD *)(this + 12) = a2;
    if (v4 * a2)
    {
      v6 = v4 * v2;
      v7 = (void *)operator new[]();
      v8 = v7;
      if (v6)
      {
        v9 = *(const void **)(v3 + 16);
        if (v9)
        {
          if (v6 >= v5)
            v10 = v5;
          else
            v10 = v6;
          memcpy(v7, v9, v10);
        }
      }
    }
    else
    {
      v8 = 0;
    }
    this = *(_QWORD *)(v3 + 16);
    if (this)
      this = MEMORY[0x1B5E2914C](this, 0x1000C8077774924);
    *(_QWORD *)(v3 + 16) = v8;
  }
  return this;
}

_BYTE *PCThreadLocalValue<BOOL>::getValuePtr(uint64_t a1)
{
  _BYTE *v2;

  v2 = pthread_getspecific(*(_QWORD *)a1);
  if (!v2)
  {
    v2 = (_BYTE *)operator new();
    *v2 = *(_BYTE *)(a1 + 8);
    pthread_setspecific(*(_QWORD *)a1, v2);
  }
  return v2;
}

uint64_t __cxx_global_array_dtor_0()
{
  uint64_t i;
  uint64_t v1;
  uint64_t result;

  for (i = 0; i != -128; i -= 32)
  {
    v1 = *(_QWORD *)((char *)&getCache(void)::cache + i + 104);
    if (v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
    result = *(_QWORD *)((char *)&getCache(void)::cache + i + 96);
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  }
  return result;
}

void LiGroup::LiGroup(LiGroup *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  LiSceneObject::LiSceneObject(this, a2 + 1);
  v4 = *a2;
  *(_QWORD *)v5 = *a2;
  *(_QWORD *)(v5 + *(_QWORD *)(v4 - 24)) = a2[5];
  *(_QWORD *)(v5 + 568) = &unk_1E656E898;
  *(_QWORD *)(v5 + 600) = 0;
  *(_QWORD *)(v5 + 584) = 0;
  *(_QWORD *)(v5 + 576) = 0;
  *(_DWORD *)(v5 + 591) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(v5 + 608));
  *((_BYTE *)this + 616) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiGroup *)((char *)this + 620));
  *((_DWORD *)this + 159) = 1065353216;
  *((_WORD *)this + 320) = 257;
  *((_BYTE *)this + 642) = 0;
  *((_WORD *)this + 322) = 257;
  *((_DWORD *)this + 121) = 34;
}

void sub_1B2D1C9E0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  PCSharedCount *v4;

  PCSharedCount::~PCSharedCount(v4);
  PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::~PCArray(v3);
  LiSceneObject::~LiSceneObject(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656E898;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void LiGroup::LiGroup(LiGroup *this)
{
  *((_QWORD *)this + 81) = &off_1E65EB048;
  *((_QWORD *)this + 82) = 0;
  *((_BYTE *)this + 664) = 1;
  LiSceneObject::LiSceneObject(this, (uint64_t *)&off_1E656E710);
  *(_QWORD *)this = &off_1E656E5C0;
  *((_QWORD *)this + 81) = &unk_1E656E6F0;
  *((_QWORD *)this + 71) = &unk_1E656E898;
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 73) = 0;
  *((_QWORD *)this + 72) = 0;
  *(_DWORD *)((char *)this + 591) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 76);
  *((_BYTE *)this + 616) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiGroup *)((char *)this + 620));
  *((_DWORD *)this + 159) = 1065353216;
  *((_WORD *)this + 320) = 257;
  *((_BYTE *)this + 642) = 0;
  *((_WORD *)this + 322) = 257;
  *((_DWORD *)this + 121) = 34;
}

void sub_1B2D1CB3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  PCSharedCount *v3;
  uint64_t v4;
  PCSharedCount *v5;

  v5 = v3;
  PCSharedCount::~PCSharedCount(v5);
  PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::~PCArray(v2);
  LiSceneObject::~LiSceneObject((PCSharedCount *)v1, (PC_Sp_counted_base **)&off_1E656E710);
  *(_QWORD *)(v1 + 648) = v4 + 16;
  *(_BYTE *)(v1 + 664) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 656));
  _Unwind_Resume(a1);
}

void LiGroup::~LiGroup(PCSharedCount *this, PCSharedCount *a2)
{
  PC_Sp_counted_base *var0;
  int v5;
  PC_Sp_counted_base *v6;

  var0 = a2->var0;
  this->var0 = a2->var0;
  *(PCSharedCount *)((char *)this + *((_QWORD *)var0 - 3)) = a2[5];
  PCSharedCount::~PCSharedCount(this + 76);
  this[71].var0 = (PC_Sp_counted_base *)&unk_1E656E898;
  if (SLODWORD(this[72].var0) < 0)
    v5 = 1;
  else
    v5 = (int)this[72].var0;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&this[71], 0, v5);
  v6 = this[73].var0;
  if (v6)
    MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
  this[73].var0 = 0;
  LODWORD(this[72].var0) = 0;
  LiSceneObject::~LiSceneObject(this, &a2[1].var0);
}

void LiGroup::~LiGroup(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 648) = &off_1E65EB048;
  *(_BYTE *)(v1 + 664) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 656));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 648) = &off_1E65EB048;
  *(_BYTE *)(v1 + 664) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 656));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiGroup::~LiGroup(LiGroup *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 648) = &off_1E65EB048;
  *(_BYTE *)(v1 + 664) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 656));
}

{
  LiGroup::~LiGroup((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

unsigned int *LiGroup::localBoundingBox(unsigned int *result, double *a2)
{
  uint64_t v2;
  unsigned int *v4;
  uint64_t i;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double v16;
  double v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *((_OWORD *)a2 + 1) = xmmword_1B304F270;
  *((_OWORD *)a2 + 2) = xmmword_1B304F270;
  *(_OWORD *)a2 = xmmword_1B304F270;
  v19 = xmmword_1B304F270;
  v20 = xmmword_1B304F270;
  v18 = xmmword_1B304F270;
  v2 = result[145];
  if ((int)v2 >= 1)
  {
    v4 = result;
    for (i = 0; i != v2; ++i)
    {
      if (i >= (int)v4[145])
        PCArray_base::badIndex((PCArray_base *)result);
      v6 = *(_QWORD *)(*((_QWORD *)v4 + 73) + 16 * i);
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v6 + 80))(v6, &v18, v6 + 8);
      v7 = *a2;
      v8 = a2[1];
      if (*a2 <= v8 && (v10 = a2[2], v9 = a2[3], v10 <= v9) && (v12 = a2[4], v11 = a2[5], v12 <= v11))
      {
        if (*(double *)&v18 <= *((double *)&v18 + 1))
        {
          v14 = v19;
          if (*(double *)&v19 <= *((double *)&v19 + 1))
          {
            v15 = v20;
            if (*(double *)&v20 <= *((double *)&v20 + 1))
            {
              if (v7 >= *(double *)&v18)
                v7 = *(double *)&v18;
              if (v8 <= *((double *)&v18 + 1))
                v8 = *((double *)&v18 + 1);
              *a2 = v7;
              a2[1] = v8;
              if (v10 >= *(double *)&v14)
                v16 = *(double *)&v14;
              else
                v16 = v10;
              if (v9 <= *((double *)&v14 + 1))
                v9 = *((double *)&v14 + 1);
              a2[2] = v16;
              a2[3] = v9;
              if (v12 >= *(double *)&v15)
                v17 = *(double *)&v15;
              else
                v17 = v12;
              if (v11 <= *((double *)&v15 + 1))
                v11 = *((double *)&v15 + 1);
              a2[4] = v17;
              a2[5] = v11;
            }
          }
        }
      }
      else
      {
        v13 = v19;
        *(_OWORD *)a2 = v18;
        *((_OWORD *)a2 + 1) = v13;
        *((_OWORD *)a2 + 2) = v20;
      }
    }
  }
  return result;
}

unsigned int *LiGroup::boundingBox(unsigned int *result, double *a2, double *a3)
{
  uint64_t v3;
  unsigned int *v6;
  uint64_t i;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  double v25;
  double v26;
  _OWORD v27[8];
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *((_OWORD *)a2 + 1) = xmmword_1B304F270;
  *((_OWORD *)a2 + 2) = xmmword_1B304F270;
  *(_OWORD *)a2 = xmmword_1B304F270;
  v29 = xmmword_1B304F270;
  v30 = xmmword_1B304F270;
  v28 = xmmword_1B304F270;
  v3 = result[145];
  if ((int)v3 >= 1)
  {
    v6 = result;
    for (i = 0; i != v3; ++i)
    {
      if (i >= (int)v6[145])
        PCArray_base::badIndex((PCArray_base *)result);
      v8 = *(_QWORD *)(*((_QWORD *)v6 + 73) + 16 * i);
      v9 = *(_OWORD *)(v8 + 8);
      v10 = *(_OWORD *)(v8 + 24);
      v11 = *(_OWORD *)(v8 + 56);
      v27[2] = *(_OWORD *)(v8 + 40);
      v27[3] = v11;
      v27[0] = v9;
      v27[1] = v10;
      v12 = *(_OWORD *)(v8 + 72);
      v13 = *(_OWORD *)(v8 + 88);
      v14 = *(_OWORD *)(v8 + 120);
      v27[6] = *(_OWORD *)(v8 + 104);
      v27[7] = v14;
      v27[4] = v12;
      v27[5] = v13;
      v15 = PCMatrix44Tmpl<double>::leftMult((uint64_t)v27, a3);
      result = (unsigned int *)(*(uint64_t (**)(uint64_t, __int128 *, _OWORD *, double))(*(_QWORD *)v8 + 80))(v8, &v28, v27, v15);
      v16 = *a2;
      v17 = a2[1];
      if (*a2 <= v17 && (v19 = a2[2], v18 = a2[3], v19 <= v18) && (v21 = a2[4], v20 = a2[5], v21 <= v20))
      {
        if (*(double *)&v28 <= *((double *)&v28 + 1))
        {
          v23 = v29;
          if (*(double *)&v29 <= *((double *)&v29 + 1))
          {
            v24 = v30;
            if (*(double *)&v30 <= *((double *)&v30 + 1))
            {
              if (v16 >= *(double *)&v28)
                v16 = *(double *)&v28;
              if (v17 <= *((double *)&v28 + 1))
                v17 = *((double *)&v28 + 1);
              *a2 = v16;
              a2[1] = v17;
              if (v19 >= *(double *)&v23)
                v25 = *(double *)&v23;
              else
                v25 = v19;
              if (v18 <= *((double *)&v23 + 1))
                v18 = *((double *)&v23 + 1);
              a2[2] = v25;
              a2[3] = v18;
              if (v21 >= *(double *)&v24)
                v26 = *(double *)&v24;
              else
                v26 = v21;
              if (v20 <= *((double *)&v24 + 1))
                v20 = *((double *)&v24 + 1);
              a2[4] = v26;
              a2[5] = v20;
            }
          }
        }
      }
      else
      {
        v22 = v29;
        *(_OWORD *)a2 = v28;
        *((_OWORD *)a2 + 1) = v22;
        *((_OWORD *)a2 + 2) = v30;
      }
    }
  }
  return result;
}

uint64_t LiGroup::plane@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;
  double v3;

  v2 = *(unsigned __int8 *)(this + 594);
  v3 = 1.0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (!v2)
    v3 = 0.0;
  *(double *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  return this;
}

uint64_t LiGroup::numChildren(LiGroup *this)
{
  return *((unsigned int *)this + 145);
}

uint64_t LiGroup::child(LiGroup *this, int a2)
{
  if (a2 < 0 || *((_DWORD *)this + 145) <= a2)
    PCArray_base::badIndex(this);
  return *(_QWORD *)(*((_QWORD *)this + 73) + 16 * a2);
}

void LiGroup::addChild(LiGroup *this, LiSceneObject *a2)
{
  char *v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  LiSceneObject *v8;
  PCSharedCount v9;
  PCSharedCount v10;

  v3 = (char *)this + 568;
  v8 = a2;
  if (a2)
    a2 = (LiSceneObject *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  PCSharedCount::PCSharedCount(&v9, a2);
  v4 = *((_DWORD *)this + 145);
  if (*((_DWORD *)this + 144) <= v4)
    v5 = (2 * (v4 + 1)) | 1;
  else
    v5 = *((_DWORD *)this + 144);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v3, v4 + 1, v5);
  v6 = *((_QWORD *)this + 73);
  v7 = *((int *)this + 145) - 1;
  *(_QWORD *)(v6 + 16 * v7) = v8;
  PCSharedCount::PCSharedCount(&v10, &v9);
  PCSharedCount::operator=((uint64_t *)(v6 + 16 * v7 + 8), (uint64_t *)&v10);
  PCSharedCount::~PCSharedCount(&v10);
  PCSharedCount::~PCSharedCount(&v9);
}

void sub_1B2D1D0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12)
{
  PCSharedCount *v12;

  PCSharedCount::~PCSharedCount(&a12);
  PCSharedCount::~PCSharedCount(v12);
  _Unwind_Resume(a1);
}

void LiGroup::insertChild(LiGroup *this, int a2, PC_Sp_counted_base *a3)
{
  char *v4;
  PCShared_base *v5;
  PCSharedCount v6;
  PCSharedCount v7;

  v4 = (char *)this + 568;
  v6.var0 = a3;
  if (a3)
    v5 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v5 = 0;
  PCSharedCount::PCSharedCount(&v7, v5);
  PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::insert((uint64_t)v4, &v6, a2);
  PCSharedCount::~PCSharedCount(&v7);
}

void sub_1B2D1D180(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::insert(uint64_t a1, const PCSharedCount *a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const PCSharedCount *v14;
  uint64_t v15;
  PC_Sp_counted_base **v16;
  PCSharedCount v18;

  v6 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 8);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, v6 + 1, v7);
  v8 = *(int *)(a1 + 12);
  if ((int)v8 > a3 && (int)v8 - 1 > a3)
  {
    v10 = v8 - 1;
    v11 = v8 - 2;
    v12 = 16 * v8 - 16;
    do
    {
      v13 = *(_QWORD *)(a1 + 16);
      v14 = (const PCSharedCount *)(v13 + 16 * v11);
      v15 = v13 + v12;
      *(PCSharedCount *)(v13 + v12) = (PCSharedCount)v14->var0;
      PCSharedCount::PCSharedCount(&v18, v14 + 1);
      PCSharedCount::operator=((uint64_t *)(v15 + 8), (uint64_t *)&v18);
      PCSharedCount::~PCSharedCount(&v18);
      --v10;
      --v11;
      v12 -= 16;
    }
    while (v10 > a3);
  }
  v16 = (PC_Sp_counted_base **)(*(_QWORD *)(a1 + 16) + 16 * a3);
  *v16 = a2->var0;
  PCSharedCount::PCSharedCount(&v18, a2 + 1);
  PCSharedCount::operator=((uint64_t *)v16 + 1, (uint64_t *)&v18);
  PCSharedCount::~PCSharedCount(&v18);
  return *(_QWORD *)(a1 + 16) + 16 * a3;
}

void sub_1B2D1D29C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void LiGroup::removeChild(LiGroup *this@<X0>, int a2@<W1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  const PCSharedCount *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  PCSharedCount v10;

  LODWORD(v3) = a2;
  if (a2 < 0 || *((_DWORD *)this + 145) <= a2)
    PCArray_base::badIndex(this);
  v5 = (const PCSharedCount *)(*((_QWORD *)this + 73) + 16 * a2);
  a3->var0 = v5->var0;
  PCSharedCount::PCSharedCount(a3 + 1, v5 + 1);
  LODWORD(v6) = *((_DWORD *)this + 145) - 1;
  if ((int)v6 > (int)v3)
  {
    v3 = (int)v3;
    v7 = 16 * (int)v3;
    do
    {
      v8 = *((_QWORD *)this + 73) + v7;
      *(_QWORD *)v8 = *(_QWORD *)(v8 + 16);
      PCSharedCount::PCSharedCount(&v10, (const PCSharedCount *)(v8 + 24));
      PCSharedCount::operator=((uint64_t *)(v8 + 8), (uint64_t *)&v10);
      ++v3;
      PCSharedCount::~PCSharedCount(&v10);
      v6 = *((int *)this + 145) - 1;
      v7 += 16;
    }
    while (v3 < v6);
  }
  if (*((_DWORD *)this + 144) >= (int)v6)
    v9 = *((_DWORD *)this + 144);
  else
    v9 = (2 * v6) | 1;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 568, v6, v9);
}

void sub_1B2D1D398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount *v10;

  PCSharedCount::~PCSharedCount(v10);
  _Unwind_Resume(a1);
}

void LiGroup::removeChild(LiGroup *this, LiSceneObject *a2)
{
  char *v2;
  LiSceneObject *v3;
  PCSharedCount v4;

  v2 = (char *)this + 568;
  v3 = a2;
  if (a2)
    a2 = (LiSceneObject *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  PCSharedCount::PCSharedCount(&v4, a2);
  PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::remove((uint64_t)v2, &v3);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B2D1D41C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::remove(uint64_t a1, _QWORD *a2)
{
  int v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  PCSharedCount *v12;
  uint64_t *v13;
  int v14;
  PCSharedCount v16;

  v2 = *(_DWORD *)(a1 + 12);
  if (v2 >= 1)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * v5);
      if (*a2)
      {
        if (v7)
          v8 = *a2 == v7;
        else
          v8 = 0;
        if (v8)
        {
LABEL_9:
          LODWORD(v9) = v2 - 1;
          if (v2 - 1 > v5)
          {
            v10 = v5;
            v11 = 16 * v5;
            do
            {
              v12 = (PCSharedCount *)(*(_QWORD *)(a1 + 16) + v11);
              v12->var0 = v12[2].var0;
              v13 = (uint64_t *)&v12[1];
              PCSharedCount::PCSharedCount(&v16, v12 + 3);
              PCSharedCount::operator=(v13, (uint64_t *)&v16);
              ++v10;
              PCSharedCount::~PCSharedCount(&v16);
              v9 = *(int *)(a1 + 12) - 1;
              v11 += 16;
            }
            while (v10 < v9);
          }
          if (*(_DWORD *)(a1 + 8) >= (int)v9)
            v14 = *(_DWORD *)(a1 + 8);
          else
            v14 = (2 * v9) | 1;
          PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, v9, v14);
          v6 = (v6 + 1);
          v2 = *(_DWORD *)(a1 + 12);
          goto LABEL_18;
        }
      }
      else if (!v7)
      {
        goto LABEL_9;
      }
      ++v5;
LABEL_18:
      if (v5 >= v2)
        return v6;
    }
  }
  return 0;
}

void sub_1B2D1D548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

uint64_t LiGroup::layerOrder(LiGroup *this)
{
  return *((unsigned __int8 *)this + 592);
}

uint64_t LiGroup::setLayerOrder(uint64_t this, char a2)
{
  *(_BYTE *)(this + 592) = a2;
  return this;
}

uint64_t LiGroup::setIs360(uint64_t this, char a2)
{
  *(_BYTE *)(this + 593) = a2;
  return this;
}

uint64_t LiGroup::project(LiGroup *this)
{
  return *((unsigned __int8 *)this + 594);
}

uint64_t LiGroup::setProject(uint64_t this, char a2)
{
  *(_BYTE *)(this + 594) = a2;
  return this;
}

double LiGroup::viewProjectionTransform@<D0>(LiGroup *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
  *(_QWORD *)a2 = 0x3FF0000000000000;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  return LiGroup::viewProjectionTransform((uint64_t)this, a2);
}

double LiGroup::viewProjectionTransform(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  __int128 v8;
  uint64_t i;
  _OWORD *v10;
  __int128 v11;
  _BYTE v13[128];
  _QWORD v14[16];
  __int128 v15[2];
  double v16;
  double v17;
  double v18;

  v4 = *(_QWORD *)(a1 + 600);
  if (v4)
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v4 + 240))(v15);
    v5 = *(_QWORD *)(a1 + 600);
    if (!v5)
      throw_PCNullPointerException(1);
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v5 + 192))(v14);
    v6 = *(_QWORD *)(a1 + 600);
    if (!v6)
      throw_PCNullPointerException(1);
    v7 = (*(double (**)(uint64_t))(*(_QWORD *)v6 + 688))(v6);
    if (v7 != 1.0)
    {
      *(double *)v15 = v7 * *(double *)v15;
      v16 = v7 * v16;
      v17 = v7 * v17;
      v18 = v7 * v18;
    }
    PCMatrix44Tmpl<double>::operator*((uint64_t)v14, v15, (uint64_t)v13);
    if (v13 != (_BYTE *)a2)
    {
      for (i = 0; i != 128; i += 32)
      {
        v10 = (_OWORD *)(a2 + i);
        v8 = *(_OWORD *)&v13[i];
        v11 = *(_OWORD *)&v13[i + 16];
        *v10 = v8;
        v10[1] = v11;
      }
    }
  }
  else
  {
    *(_QWORD *)(a2 + 120) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 80) = 0x3FF0000000000000;
    *(_QWORD *)(a2 + 40) = 0x3FF0000000000000;
    *(_QWORD *)a2 = 0x3FF0000000000000;
    *(_QWORD *)&v8 = 0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
  }
  return *(double *)&v8;
}

void LiGroup::camera(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->var0 = this[75].var0;
  PCSharedCount::PCSharedCount(a2 + 1, this + 76);
}

uint64_t LiGroup::setCamera(uint64_t *a1, const PCSharedCount *a2)
{
  uint64_t *v3;
  PCSharedCount v5;

  a1[75] = (uint64_t)a2->var0;
  v3 = a1 + 76;
  PCSharedCount::PCSharedCount(&v5, a2 + 1);
  PCSharedCount::operator=(v3, (uint64_t *)&v5);
  PCSharedCount::~PCSharedCount(&v5);
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 208))(a1, 1);
}

void sub_1B2D1D760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

const char *LiGroup::className(LiGroup *this)
{
  return "LiGroup";
}

PCArray_base *LiGroup::print(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  _QWORD *v27;
  PCArray_base *result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  LiImageSource::printIndent(a2, a3);
  v6 = *(unsigned int *)(a1 + 580);
  v7 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1);
  v8 = strlen(v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v7, v8);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(\"", 2);
  if (*(_QWORD *)(a1 + 512))
    v11 = *(const char **)(a1 + 512);
  else
    v11 = "";
  v12 = strlen(v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\", compositeOrder=", 18);
  std::ostream::operator<<();
  if (*(_DWORD *)(a1 + 532) || *(_DWORD *)(a1 + 536))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
    if (*(_BYTE *)(a1 + 540))
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"(r)", 3);
  }
  if (*(_DWORD *)(a1 + 536))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"/", 1);
    std::ostream::operator<<();
  }
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", blendMode=", 12);
  v14 = LiSceneObject::blendMode((LiSceneObject *)a1);
  operator<<(v13, v14);
  if (!*(_BYTE *)(a1 + 552))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", doesReflect=false", 19);
  if (!*(_BYTE *)(a1 + 553))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", visibleOutsideReflection=false", 32);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"layerOrder=", 11);
  if (*(_BYTE *)(a1 + 592))
    v17 = "true";
  else
    v17 = "false";
  if (*(_BYTE *)(a1 + 592))
    v18 = 4;
  else
    v18 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"is360=", 6);
  if (*(_BYTE *)(a1 + 593))
    v21 = "true";
  else
    v21 = "false";
  if (*(_BYTE *)(a1 + 593))
    v22 = 4;
  else
    v22 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
  if (*(_BYTE *)(a1 + 594))
  {
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"project=", 8);
    if (*(_BYTE *)(a1 + 594))
      v25 = "true";
    else
      v25 = "false";
    if (*(_BYTE *)(a1 + 594))
      v26 = 4;
    else
      v26 = 5;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
  }
  if (!*(_BYTE *)(a1 + 644))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", no lights in", 14);
  if (!*(_BYTE *)(a1 + 645))
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", no lights out", 15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)", ", 2);
  v27 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" child", 6);
  if ((_DWORD)v6 != 1)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"ren", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)")\n", 2);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, a3);
  result = *(PCArray_base **)(a1 + 600);
  if (result)
    result = (PCArray_base *)(*(uint64_t (**)(PCArray_base *, _QWORD *, _QWORD))(*(_QWORD *)result + 752))(result, a2, (a3 + 2));
  if ((int)v6 >= 1)
  {
    v29 = 0;
    v30 = (a3 + 1);
    do
    {
      if (v29 >= *(int *)(a1 + 580))
        PCArray_base::badIndex(result);
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 16 * v29);
      result = (PCArray_base *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v31 + 112))(v31, a2, v30);
      ++v29;
    }
    while (v29 != v6);
  }
  return result;
}

uint64_t LiGroup::LiGroup(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  PCArray_base *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t i;
  void (***v12)(LiLight *__hidden);

  v6 = LiSceneObject::LiSceneObject(a1, a2 + 1, a3);
  v7 = *a2;
  *(_QWORD *)v6 = *a2;
  *(_QWORD *)(v6 + *(_QWORD *)(v7 - 24)) = a2[5];
  *(_QWORD *)(v6 + 568) = &unk_1E656E898;
  *(_QWORD *)(v6 + 584) = 0;
  *(_QWORD *)(v6 + 576) = 0;
  *(_BYTE *)(v6 + 592) = *(_BYTE *)(a3 + 592);
  *(_BYTE *)(v6 + 593) = *(_BYTE *)(a3 + 593);
  *(_BYTE *)(v6 + 594) = *(_BYTE *)(a3 + 594);
  *(_QWORD *)(v6 + 600) = *(_QWORD *)(a3 + 600);
  PCSharedCount::PCSharedCount((PCSharedCount *)(v6 + 608), (const PCSharedCount *)(a3 + 608));
  v9 = *(_OWORD *)(a3 + 616);
  *(_OWORD *)(a1 + 628) = *(_OWORD *)(a3 + 628);
  *(_OWORD *)(a1 + 616) = v9;
  *(_WORD *)(a1 + 644) = 257;
  v10 = *(unsigned int *)(a3 + 580);
  if ((int)v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(int *)(a3 + 580))
        PCArray_base::badIndex(v8);
      v12 = *(void (****)(LiLight *__hidden))(*(_QWORD *)(a3 + 584) + 16 * i);
      if (v12 && *v12 == &off_1E657B040)
        v8 = (PCArray_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    }
  }
  *(_WORD *)(a1 + 644) = *(_WORD *)(a3 + 644);
  return a1;
}

void sub_1B2D1DC34(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  PC_Sp_counted_base **v2;

  PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::~PCArray((uint64_t)&v1[71]);
  LiSceneObject::~LiSceneObject(v1, v2);
  _Unwind_Resume(a1);
}

uint64_t LiSceneObject::LiSceneObject(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;

  v5 = a2[1];
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = a2[2];
  v6 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = a2[3];
  memcpy((void *)(a1 + 8), (const void *)(a3 + 8), 0x189uLL);
  v7 = *(_QWORD *)(a3 + 416);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a3 + 408);
  *(_QWORD *)(a1 + 416) = v7;
  *(_BYTE *)(a1 + 424) = *(_BYTE *)(a3 + 424);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a3 + 432);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a3 + 448);
  v8 = *(_QWORD *)(a3 + 464);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a3 + 456);
  *(_QWORD *)(a1 + 464) = v8;
  *(_OWORD *)(a1 + 472) = *(_OWORD *)(a3 + 472);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a3 + 488);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 496), (const PCSharedCount *)(a3 + 496));
  *(_BYTE *)(a1 + 504) = *(_BYTE *)(a3 + 504);
  v9 = *(_QWORD *)(a3 + 512);
  *(_QWORD *)(a1 + 512) = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 - 12);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  v12 = *(_OWORD *)(a3 + 520);
  v13 = *(_OWORD *)(a3 + 536);
  *(_OWORD *)(a1 + 549) = *(_OWORD *)(a3 + 549);
  *(_OWORD *)(a1 + 520) = v12;
  *(_OWORD *)(a1 + 536) = v13;
  return a1;
}

uint64_t LiGroup::LiGroup(uint64_t a1, uint64_t a2)
{
  PCArray_base *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t i;
  void (***v8)(LiLight *__hidden);

  *(_QWORD *)(a1 + 648) = &off_1E65EB048;
  *(_QWORD *)(a1 + 656) = 0;
  *(_BYTE *)(a1 + 664) = 1;
  LiSceneObject::LiSceneObject(a1, (uint64_t *)&off_1E656E710, a2);
  *(_QWORD *)a1 = &off_1E656E5C0;
  *(_QWORD *)(a1 + 648) = &unk_1E656E6F0;
  *(_QWORD *)(a1 + 568) = &unk_1E656E898;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_WORD *)(a1 + 592) = *(_WORD *)(a2 + 592);
  *(_BYTE *)(a1 + 594) = *(_BYTE *)(a2 + 594);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 608), (const PCSharedCount *)(a2 + 608));
  v5 = *(_OWORD *)(a2 + 616);
  *(_OWORD *)(a1 + 628) = *(_OWORD *)(a2 + 628);
  *(_OWORD *)(a1 + 616) = v5;
  *(_WORD *)(a1 + 644) = 257;
  v6 = *(unsigned int *)(a2 + 580);
  if ((int)v6 >= 1)
  {
    for (i = 0; i != v6; ++i)
    {
      if (i >= *(int *)(a2 + 580))
        PCArray_base::badIndex(v4);
      v8 = *(void (****)(LiLight *__hidden))(*(_QWORD *)(a2 + 584) + 16 * i);
      if (v8 && *v8 == &off_1E657B040)
        v4 = (PCArray_base *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
    }
  }
  *(_WORD *)(a1 + 644) = *(_WORD *)(a2 + 644);
  return a1;
}

void sub_1B2D1DE94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::~PCArray(v1 + 568);
  LiSceneObject::~LiSceneObject((PCSharedCount *)v1, (PC_Sp_counted_base **)&off_1E656E710);
  *(_QWORD *)(v1 + 648) = v2 + 16;
  *(_BYTE *)(v1 + 664) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 656));
  _Unwind_Resume(a1);
}

PCSharedCount *LiGroup::createCopyWithJustLights@<X0>(LiGroup *this@<X0>, PCSharedCount *a2@<X8>)
{
  return PCMakePtr<LiGroup,LiGroup const&,LiGroup::JustLightsTag>((uint64_t)this, a2);
}

PCSharedCount *PCMakePtr<LiGroup,LiGroup const&,LiGroup::JustLightsTag>@<X0>(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  PC_Sp_counted_base *v4;

  v4 = (PC_Sp_counted_base *)operator new();
  LiGroup::LiGroup((uint64_t)v4, a1);
  a2->var0 = v4;
  return PCSharedCount::PCSharedCount(a2 + 1, (PCShared_base *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
}

void sub_1B2D1DF64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40089F272ELL);
  _Unwind_Resume(a1);
}

PCArray_base *LiGroup::widenBounds(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  PCArray_base *result;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  _BYTE v13[128];

  result = (PCArray_base *)PCMatrix44Tmpl<double>::operator*(a3, (__int128 *)(a1 + 8), (uint64_t)v13);
  v10 = *(unsigned int *)(a1 + 580);
  if ((int)v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if (i >= *(int *)(a1 + 580))
        PCArray_base::badIndex(result);
      v12 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 16 * i);
      if (!v12)
        throw_PCNullPointerException(1);
      result = (PCArray_base *)(*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v12 + 128))(v12, a2, v13, a4, a5);
    }
  }
  return result;
}

double LiGroup::cast@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  float64x2_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  PCShared_base *v18;
  __int128 v19;
  __int128 v20;
  double v21;
  float64x2_t v22;
  float64x2_t *v23;
  double *v24;
  uint64_t *v25;
  PCSharedCount v26;
  PCSharedCount v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  PCSharedCount v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _OWORD v44[8];
  _OWORD v45[3];
  PCSharedCount v46;

  *(_OWORD *)(a4 + 8) = 0u;
  *(_BYTE *)a4 = 0;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  v24 = (double *)(a4 + 8);
  v25 = (uint64_t *)(a4 + 72);
  PCSharedCount::PCSharedCount((PCSharedCount *)(a4 + 72));
  v8 = a2[1];
  v45[0] = *a2;
  v45[1] = v8;
  v45[2] = a2[2];
  v9 = *(_OWORD *)(a1 + 88);
  v44[4] = *(_OWORD *)(a1 + 72);
  v44[5] = v9;
  v10 = *(_OWORD *)(a1 + 120);
  v44[6] = *(_OWORD *)(a1 + 104);
  v44[7] = v10;
  v11 = *(_OWORD *)(a1 + 24);
  v44[0] = *(_OWORD *)(a1 + 8);
  v44[1] = v11;
  v12 = *(_OWORD *)(a1 + 56);
  v44[2] = *(_OWORD *)(a1 + 40);
  v44[3] = v12;
  v43 = 0x3FF0000000000000;
  v40 = 0x3FF0000000000000;
  v37 = 0x3FF0000000000000;
  v34 = 0x3FF0000000000000;
  v35 = 0u;
  v36 = 0u;
  v38 = 0u;
  v39 = 0u;
  v41 = 0u;
  v42 = 0u;
  if (PCMatrix44Tmpl<double>::invert((double *)&v34, (double *)v44, 0.0))
  {
    v14 = PCRay3<double>::transform((uint64_t)v45, (double *)&v34);
    v23 = a2;
    v15 = *(unsigned int *)(a1 + 580);
    if ((int)v15 >= 1)
    {
      for (i = 0; i != v15; ++i)
      {
        if (i >= *(int *)(a1 + 580))
          PCArray_base::badIndex((PCArray_base *)v14);
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 584) + 16 * i);
        *(_QWORD *)&v28 = v17;
        if (v17)
          v18 = (PCShared_base *)(v17 + *(_QWORD *)(*(_QWORD *)v17 - 24));
        else
          v18 = 0;
        PCSharedCount::PCSharedCount((PCSharedCount *)&v28 + 1, v18);
        PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::push(a3 + 8, (const PCSharedCount *)&v28);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v28 + 1);
        (*(void (**)(__int128 *__return_ptr, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v17 + 96))(&v28, v17, v45, a3);
        PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::pop(a3 + 8, &v26);
        PCSharedCount::~PCSharedCount(&v27);
        if ((_BYTE)v28 && (!*(_BYTE *)a4 || *((double *)&v28 + 1) < *v24))
        {
          v19 = v29;
          *(_OWORD *)a4 = v28;
          *(_OWORD *)(a4 + 16) = v19;
          v20 = v31;
          *(_OWORD *)(a4 + 32) = v30;
          *(_OWORD *)(a4 + 48) = v20;
          *(_QWORD *)(a4 + 64) = v32;
          PCSharedCount::PCSharedCount(&v46, &v33);
          PCSharedCount::operator=(v25, (uint64_t *)&v46);
          PCSharedCount::~PCSharedCount(&v46);
        }
        PCSharedCount::~PCSharedCount(&v33);
      }
    }
    if (*(_BYTE *)a4)
    {
      v28 = 0uLL;
      *(_QWORD *)&v29 = 0;
      PCMatrix44Tmpl<double>::transform<double>((double *)v44, (double *)(a4 + 40), (double *)&v28);
      *(_OWORD *)(a4 + 16) = v28;
      *(_QWORD *)(a4 + 32) = v29;
      v21 = *(double *)(a4 + 32) - v23[1].f64[0];
      v22 = vsubq_f64(*(float64x2_t *)(a4 + 16), *v23);
      result = sqrt(vaddvq_f64(vmulq_f64(v22, v22)) + v21 * v21);
      *(double *)(a4 + 8) = result;
    }
  }
  return result;
}

void sub_1B2D1E2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount *a12)
{
  PCSharedCount::~PCSharedCount(a12);
  _Unwind_Resume(a1);
}

uint64_t PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::push(uint64_t a1, const PCSharedCount *a2)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  PCSharedCount v9;

  v4 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) <= v4)
    v5 = (2 * (v4 + 1)) | 1;
  else
    v5 = *(_DWORD *)(a1 + 8);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, v4 + 1, v5);
  v6 = *(_QWORD *)(a1 + 16) + 16 * *(int *)(a1 + 12);
  *(PCSharedCount *)(v6 - 16) = (PCSharedCount)a2->var0;
  v7 = (uint64_t *)(v6 - 8);
  PCSharedCount::PCSharedCount(&v9, a2 + 1);
  PCSharedCount::operator=(v7, (uint64_t *)&v9);
  PCSharedCount::~PCSharedCount(&v9);
  return *(_QWORD *)(a1 + 16) + 16 * *(int *)(a1 + 12) - 16;
}

void sub_1B2D1E3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  PCSharedCount::~PCSharedCount(&a10);
  _Unwind_Resume(a1);
}

void PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::pop(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v6;

  v4 = *(_QWORD *)(a1 + 16) + 16 * *(int *)(a1 + 12);
  a2->var0 = *(PC_Sp_counted_base **)(v4 - 16);
  PCSharedCount::PCSharedCount(a2 + 1, (const PCSharedCount *)(v4 - 8));
  v5 = *(_DWORD *)(a1 + 12) - 1;
  if (*(_DWORD *)(a1 + 8) >= v5)
    v6 = *(_DWORD *)(a1 + 8);
  else
    v6 = (2 * v5) | 1;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, v5, v6);
}

void sub_1B2D1E424(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t LiGroup::getAttributesPerRenderInstance(LiGroup *this)
{
  return (uint64_t)this + 616;
}

{
  return (uint64_t)this + 616;
}

__n128 LiGroup::setAttributesPerRenderInstance(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 627) = *(_OWORD *)(a2 + 11);
  *(__n128 *)(a1 + 616) = result;
  return result;
}

void PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::~PCArray(uint64_t a1)
{
  int v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E656E898;
  if (*(int *)(a1 + 8) < 0)
    v2 = 1;
  else
    v2 = *(_DWORD *)(a1 + 8);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize(a1, 0, v2);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void LiLightFilter::LiLightFilter(LiLightFilter *this)
{
  *((_QWORD *)this + 108) = &off_1E65EB048;
  *((_QWORD *)this + 109) = 0;
  *((_BYTE *)this + 880) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E656E9E8);
  *(_QWORD *)this = &off_1E656E8D8;
  *((_QWORD *)this + 108) = &unk_1E656E9C8;
  *((_QWORD *)this + 5) = &unk_1E64FC250;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  LiMaterialProperties::LiMaterialProperties((LiLightFilter *)((char *)this + 72));
  *((_QWORD *)this + 69) = 0x3FF0000000000000;
  *((_QWORD *)this + 64) = 0x3FF0000000000000;
  *((_QWORD *)this + 59) = 0x3FF0000000000000;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_QWORD *)this + 85) = 0x3FF0000000000000;
  *((_QWORD *)this + 80) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 37) = _Q1;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_QWORD *)this + 106) = 0x3FF0000000000000;
  *((_QWORD *)this + 101) = 0x3FF0000000000000;
  *((_QWORD *)this + 96) = 0x3FF0000000000000;
  *((_OWORD *)this + 45) = _Q1;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_BYTE *)this + 856) = 0;
}

void sub_1B2D1E5CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v2;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v4);
  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E656E9E8);
  *(_QWORD *)(v1 + 864) = v3 + 16;
  *(_BYTE *)(v1 + 880) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 872));
  _Unwind_Resume(a1);
}

uint64_t LiLightFilter::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t k;

  if (a2 != a1)
  {
    v4 = a1 + 40;
    v5 = *(_DWORD *)(a2 + 52);
    if (*(_DWORD *)(a1 + 48) >= v5)
      v6 = *(_DWORD *)(a1 + 48);
    else
      v6 = (2 * v5) | 1;
    PCArray<LiLight,PCArray_Traits<LiLight>>::resize(v4, v5, v6);
    if (*(int *)(a2 + 52) >= 1)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        LiLight::operator=(*(_QWORD *)(a1 + 56) + v7, *(_QWORD *)(a2 + 56) + v7);
        ++v8;
        v7 += 944;
      }
      while (v8 < *(int *)(a2 + 52));
    }
    *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
    LiMaterialProperties::operator=(a1 + 72, a2 + 72);
    v9 = 0;
    v10 = a2 + 472;
    v11 = a1 + 472;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v11 + i) = *(_QWORD *)(v10 + i);
      ++v9;
      v11 += 32;
      v10 += 32;
    }
    while (v9 != 4);
    v13 = 0;
    v14 = a2 + 600;
    v15 = a1 + 600;
    do
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v15 + j) = *(_QWORD *)(v14 + j);
      ++v13;
      v15 += 32;
      v14 += 32;
    }
    while (v13 != 4);
    v17 = 0;
    v18 = a2 + 728;
    v19 = a1 + 728;
    do
    {
      for (k = 0; k != 32; k += 8)
        *(_QWORD *)(v19 + k) = *(_QWORD *)(v18 + k);
      ++v17;
      v19 += 32;
      v18 += 32;
    }
    while (v17 != 4);
    *(_BYTE *)(a1 + 856) = *(_BYTE *)(a2 + 856);
  }
  return a1;
}

void LiLightFilter::LiLightFilter(LiLightFilter *this, const LiLightFilter *a2)
{
  *((_QWORD *)this + 108) = &off_1E65EB048;
  *((_QWORD *)this + 109) = 0;
  *((_BYTE *)this + 880) = 1;
  LiImageFilter::LiImageFilter(this, (const LiImageFilter *)&off_1E656E9E8, (uint64_t)a2);
  *(_QWORD *)this = &off_1E656E8D8;
  *((_QWORD *)this + 108) = &unk_1E656E9C8;
  *((_QWORD *)this + 5) = &unk_1E64FC250;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 64) = 0;
  LiMaterialProperties::LiMaterialProperties((LiLightFilter *)((char *)this + 72));
  *((_QWORD *)this + 69) = 0x3FF0000000000000;
  *((_QWORD *)this + 64) = 0x3FF0000000000000;
  *((_QWORD *)this + 59) = 0x3FF0000000000000;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 536) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_QWORD *)this + 85) = 0x3FF0000000000000;
  *((_QWORD *)this + 80) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 37) = _Q1;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_QWORD *)this + 106) = 0x3FF0000000000000;
  *((_QWORD *)this + 101) = 0x3FF0000000000000;
  *((_QWORD *)this + 96) = 0x3FF0000000000000;
  *((_OWORD *)this + 46) = 0u;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 45) = _Q1;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  LiLightFilter::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_1B2D1E870(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  LiMaterialProperties *v3;
  uint64_t v4;

  LiMaterialProperties::~LiMaterialProperties(v3);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray(v2);
  LiImageFilter::~LiImageFilter((PCSharedCount *)v1, (const PCString *)&off_1E656E9E8);
  *(_QWORD *)(v1 + 864) = v4 + 16;
  *(_BYTE *)(v1 + 880) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 872));
  _Unwind_Resume(a1);
}

void LiLightFilter::~LiLightFilter(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;
  __CFString *v5;

  var0 = a2->var0;
  this->var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[7].var0;
  LiMaterialProperties::~LiMaterialProperties((LiMaterialProperties *)&this[9]);
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)&this[5]);
  v5 = a2[1].var0;
  this->var0 = (PC_Sp_counted_base *)v5;
  *(__CFString **)((char *)this + v5[-1].info) = a2[6].var0;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, a2 + 2);
}

void LiLightFilter::~LiLightFilter(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 864) = &off_1E65EB048;
  *(_BYTE *)(v1 + 880) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 872));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 864) = &off_1E65EB048;
  *(_BYTE *)(v1 + 880) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 872));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiLightFilter::~LiLightFilter(LiLightFilter *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 864) = &off_1E65EB048;
  *(_BYTE *)(v1 + 880) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 872));
}

{
  LiLightFilter::~LiLightFilter((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

void LiLightFilter::clone(LiLightFilter *this@<X0>, PCSharedCount *a2@<X8>)
{
  LiLightFilter *v4;
  PCSharedCount v5;
  PCSharedCount v6;

  v4 = (LiLightFilter *)operator new();
  LiLightFilter::LiLightFilter(v4, this);
  v5.var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(&v6, (LiLightFilter *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v5);
  PCSharedCount::~PCSharedCount(&v6);
}

void sub_1B2D1EAA0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

double *LiLightFilter::surfaceNormal@<X0>(double *result@<X0>, __int128 *a2@<X1>, double *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double v8;
  double v9;
  double v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  double v20[2];
  __int128 v21;

  *a3 = 0.0;
  a3[1] = 0.0;
  a3[2] = 1.0;
  if (!*((_BYTE *)result + 856))
  {
    v20[0] = 0.0;
    v20[1] = 0.0;
    v21 = xmmword_1B304EED0;
    v4 = a2[5];
    v16 = a2[4];
    v17 = v4;
    v5 = a2[7];
    v18 = a2[6];
    v19 = v5;
    v6 = a2[1];
    v12 = *a2;
    v13 = v6;
    v7 = a2[3];
    v14 = a2[2];
    v15 = v7;
    if (fabs(PCMatrix44Tmpl<double>::determinant((double *)&v12)) < 1.0e-16)
    {
      v9 = 0.0;
      v10 = 0.0;
      v11 = xmmword_1B304EED0;
      liFindMatrixPlane((double *)&v12, &v9);
      *(double *)&v13 = -v9;
      *(double *)&v15 = -v10;
      *(double *)&v17 = -*(double *)&v11;
      *(double *)&v19 = -*((double *)&v11 + 1);
    }
    PCMatrix44Tmpl<double>::invert((double *)&v12, (double *)&v12, 0.0);
    result = PCMatrix44Tmpl<double>::transform_row<double>((double *)&v12, v20, v20);
    v8 = 1.0;
    if (*(double *)&v21 > 0.0)
      v8 = -1.0;
    a3[2] = v8;
  }
  return result;
}

uint64_t LiLightFilter::pixelTransformSupport()
{
  return 6;
}

uint64_t LiLightFilter::filteredEdges(LiLightFilter *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  if (!v1)
    throw_PCNullPointerException(1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
}

HGNode *LiLightFilter::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  __n128 v7;

  if (!*((_DWORD *)this + 13))
    return LiAgent::getHelium(a2, this[2], a3);
  if (LiAgent::haveROI(a2)
    && ((LiAgent::getROI((__n128 *)a2, &v7), (v7.n128_u32[2] & 0x80000000) != 0)
     || (v7.n128_u32[3] & 0x80000000) != 0
     || !(v7.n128_u32[3] * v7.n128_u32[2])))
  {
    return LiAgent::getHelium(a2, this[2], a3);
  }
  else
  {
    return (HGNode *)(*((uint64_t (**)(LiImageSource **, LiAgent *))*this + 25))(this, a2);
  }
}

void LiLightFilter::heRender(LiLightFilter *this@<X0>, LiAgent *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t i;
  _OWORD *v13;
  __int128 v14;
  unint64_t j;
  _OWORD *v16;
  __int128 v17;
  uint64_t k;
  _OWORD *v19;
  __int128 v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v24;
  __int128 v25;
  __int128 v26;
  float64x2_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t m;
  _OWORD *v33;
  __int128 v34;
  double v35;
  double v36;
  uint64_t v37;
  __int128 v38;
  float64x2_t *v39;
  __int128 *v40;
  _BYTE *v41;
  __int128 *v42;
  __int128 *v43;
  __int128 *v44;
  _BYTE *v45;
  __int128 *v46;
  __int128 *v47;
  _BYTE *v48;
  uint64_t *v49;
  double v50;
  double v51;
  uint64_t v52;
  _BYTE v53[128];
  __int128 v54[8];
  _BYTE v55[128];
  _BYTE v56[128];
  __int128 v57;
  float64x2_t v58;
  float64x2_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[128];
  __int128 v67[8];
  __int128 v68[8];
  __int128 v69[8];
  float64x2_t v70;
  double v71;
  _BYTE v72[128];
  __int128 v73[8];
  double v74[2];
  double v75;
  __int128 v76[8];
  _QWORD v77[6];
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  float64x2_t v89;
  _BYTE v90[48];
  __int128 v91;
  __int128 v92;
  HGNode *v93;

  *((_DWORD *)a2 + 8) = 2;
  LiAgent::passROI(a2);
  LiAgent::getHelium(a2, *((LiImageSource **)this + 2), &v93);
  if (v93)
  {
    v6 = **((_QWORD **)a2 + 6);
    v91 = 0u;
    v92 = 0u;
    *(_QWORD *)&v90[40] = 0x3FF0000000000000;
    *(_QWORD *)v90 = 0x3FF0000000000000;
    v87 = 0x3FF0000000000000;
    v84 = 0x3FF0000000000000;
    v85 = 0u;
    v86 = 0u;
    v88 = 0u;
    v89 = 0u;
    memset(&v90[8], 0, 32);
    v83 = 0x3FF0000000000000;
    v80 = 0x3FF0000000000000;
    v77[5] = 0x3FF0000000000000;
    v77[0] = 0x3FF0000000000000;
    memset(&v77[1], 0, 32);
    v78 = 0u;
    v79 = 0u;
    v81 = 0u;
    v82 = 0u;
    if (*((_BYTE *)this + 856))
    {
      v7 = (*(double (**)(uint64_t))(*(_QWORD *)v6 + 320))(v6);
      v8 = 0;
      v91 = 0uLL;
      *(double *)&v92 = v7;
      *((_QWORD *)&v92 + 1) = 0x3FF0000000000000;
      v9 = (char *)this + 728;
      do
      {
        v10 = &v77[v8];
        v11 = *(_OWORD *)&v9[v8 * 8 + 16];
        *v10 = *(_OWORD *)&v9[v8 * 8];
        v10[1] = v11;
        v8 += 4;
      }
      while (v8 != 16);
      for (i = 0; i != 16; i += 4)
      {
        v13 = (_OWORD *)((char *)&v84 + i * 8);
        v14 = *(_OWORD *)&v77[i + 2];
        *v13 = *(_OWORD *)&v77[i];
        v13[1] = v14;
      }
    }
    else
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v6 + 344))(v76, v6);
      v91 = v76[0];
      v92 = v76[1];
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v6 + 24))(v76, v6);
      for (j = 0; j != 128; j += 32)
      {
        v16 = &v77[j / 8];
        v17 = v76[j / 0x10 + 1];
        *v16 = v76[j / 0x10];
        v16[1] = v17;
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v6 + 240))(v76, v6);
      for (k = 0; k != 8; k += 2)
      {
        v19 = (_OWORD *)((char *)&v84 + k * 16);
        v20 = v76[k + 1];
        *v19 = v76[k];
        v19[1] = v20;
      }
      if ((*(double (**)(uint64_t))(*(_QWORD *)v6 + 504))(v6) <= 0.0)
      {
        v21 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
        v89 = vsubq_f64(v89, vmulq_f64(*(float64x2_t *)&v90[16], v21));
        *(float64x2_t *)v90 = vsubq_f64(*(float64x2_t *)v90, vmulq_f64(*(float64x2_t *)&v90[32], v21));
      }
    }
    LiAgent::getObjectToFilmTransform(a2, (uint64_t)v76);
    LiLightFilter::surfaceNormal((double *)this, v76, v74);
    v22 = PCMatrix44Tmpl<double>::determinant((double *)this + 75);
    PCMatrix44Tmpl<double>::operator*((uint64_t)this + 600, (__int128 *)((char *)this + 472), (uint64_t)v73);
    PCMatrix44Tmpl<double>::operator*((uint64_t)&v84, v73, (uint64_t)v72);
    PCMatrix44Tmpl<double>::transform_normal<double>((uint64_t)v72, v74, &v70);
    v23 = sqrt(v70.f64[0] * v70.f64[0] + v70.f64[1] * v70.f64[1] + v71 * v71);
    if (v23 <= -0.000000100000001 || v23 >= 0.000000100000001)
    {
      v70.f64[0] = v70.f64[0] / v23;
      v70.f64[1] = v70.f64[1] / v23;
      v71 = v71 / v23;
      LiAgent::getPixelToObjectTransform((double **)a2, (uint64_t)v68);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v73, v68, (uint64_t)v69);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v84, v69, (uint64_t)v68);
      if (v22 >= 0.0)
        v24 = v75;
      else
        v24 = -v75;
      v67[4] = v73[4];
      v67[5] = v73[5];
      v67[6] = v73[6];
      v67[7] = v73[7];
      v67[0] = v73[0];
      v67[1] = v73[1];
      v67[2] = v73[2];
      v67[3] = v73[3];
      PCMatrix44Tmpl<double>::invert((double *)v67, (double *)v67, 0.0);
      LiAgent::getObjectToPixelTransform(a2, (uint64_t)&v58);
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v58, v67, (uint64_t)v66);
      if (LiAgent::haveROI(a2))
        LiAgent::getROI((__n128 *)a2, (__n128 *)&v57);
      else
        v57 = xmmword_1B3559040;
      v25 = *(_OWORD *)((char *)this + 552);
      v62 = *(_OWORD *)((char *)this + 536);
      v63 = v25;
      v26 = *(_OWORD *)((char *)this + 584);
      v64 = *(_OWORD *)((char *)this + 568);
      v65 = v26;
      v27 = *(float64x2_t *)((char *)this + 488);
      v58 = *(float64x2_t *)((char *)this + 472);
      v59 = v27;
      v28 = *(_OWORD *)((char *)this + 520);
      v60 = *(_OWORD *)((char *)this + 504);
      v61 = v28;
      PCMatrix44Tmpl<double>::operator*((uint64_t)&v84, (__int128 *)((char *)this + 600), (uint64_t)v56);
      v29 = *((_QWORD *)a2 + 20);
      LiAgent::getFilmToImageTransform(a2, (uint64_t)v54);
      PCMatrix44Tmpl<double>::operator*(v29, v54, (uint64_t)v55);
      if (*((int *)this + 13) >= 1)
      {
        v30 = 0;
        v31 = 0;
        do
        {
          LiLight::mapShadows(*((_QWORD *)this + 7) + v30, (uint64_t)this + 600);
          ++v31;
          v30 += 944;
        }
        while (v31 < *((int *)this + 13));
      }
      PCMatrix44Tmpl<double>::operator*((uint64_t)this + 600, (__int128 *)((char *)this + 344), (uint64_t)v54);
      if ((__int128 *)((char *)this + 344) != v54)
      {
        for (m = 0; m != 8; m += 2)
        {
          v33 = (_OWORD *)((char *)this + m * 16 + 344);
          v34 = v54[m + 1];
          *v33 = v54[m];
          v33[1] = v34;
        }
      }
      v35 = *((double *)this + 24);
      if (v35 != 1.0)
      {
        v58 = vmulq_n_f64(v58, v35);
        v59 = vmulq_n_f64(v59, v35);
      }
      PCMatrix44Tmpl<double>::operator*((uint64_t)this + 600, (__int128 *)&v58, (uint64_t)v53);
      LiAgent::getPixelToObjectTransform((double **)a2, (uint64_t)&v38);
      PCMatrix44Tmpl<double>::operator*((uint64_t)v53, &v38, (uint64_t)v54);
      LiLightFilter::genObjectToScreenBlurMap(**((_QWORD **)a2 + 6), (__int128 *)((char *)this + 344), (uint64_t)v56, (uint64_t)v55, (uint64_t)v53);
      v36 = (*(double (**)(uint64_t))(*(_QWORD *)v6 + 576))(v6);
      *(_QWORD *)&v38 = v93;
      if (v93)
        (*(void (**)(HGNode *))(*(_QWORD *)v93 + 16))(v93);
      *((_QWORD *)&v38 + 1) = (char *)this + 72;
      v39 = &v70;
      v40 = &v91;
      v41 = v56;
      v42 = v68;
      v43 = v69;
      v44 = v54;
      v45 = v66;
      v46 = v67;
      v47 = v73;
      v48 = v53;
      v49 = &v37;
      v50 = v24;
      v51 = v36;
      v52 = 0x3FF0000000000000;
      LiLightSet::getHeliumGraph((char *)this + 40, &v38);
      if ((_QWORD)v38)
        (*(void (**)(_QWORD))(*(_QWORD *)v38 + 24))(v38);
      if (v93)
        (*(void (**)(HGNode *))(*(_QWORD *)v93 + 24))(v93);
    }
    else
    {
      *a3 = v93;
    }
  }
  else
  {
    *a3 = 0;
  }
}

void sub_1B2D1F258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v15;

  v15 = *(_QWORD *)(v13 - 88);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15);
  _Unwind_Resume(exception_object);
}

double PCMatrix44Tmpl<double>::transform_normal<double>@<D0>(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[9];

  v3 = 0;
  v6[0] = 0x3FF0000000000000;
  memset(&v6[1], 0, 24);
  v6[4] = 0x3FF0000000000000;
  memset(&v6[5], 0, 24);
  v6[8] = 0x3FF0000000000000;
  do
  {
    v4 = &v6[v3];
    *(_OWORD *)v4 = *(_OWORD *)a1;
    v4[2] = *(_QWORD *)(a1 + 16);
    v3 += 3;
    a1 += 32;
  }
  while (v3 != 9);
  return PCMatrix33Tmpl<double>::transformNormal<double>((uint64_t)v6, a2, a3);
}

void LiLightFilter::genObjectToScreenBlurMap(uint64_t a1@<X1>, __int128 *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  double v10;
  double AngleOfView;
  const PCString *v12;
  __int128 v13[8];
  __n128 v14;
  double v15;
  __int128 v16[5];
  double v17;
  __n128 v18[30];

  LiSimpleCamera::LiSimpleCamera((LiSimpleCamera *)v18);
  PCMatrix44Tmpl<double>::operator*(a3, a2, (uint64_t)v16);
  v10 = v17;
  LiCamera::copy((uint64_t)v18, a1);
  LiCamera::convertToModel((uint64_t)v18, 1);
  AngleOfView = LiSimpleCamera::getAngleOfView((LiSimpleCamera *)v18);
  LiSimpleCamera::setAngleOfView((uint64_t)v18, fmax(AngleOfView, 1.0));
  if (v10 > -20.0)
  {
    v14 = 0uLL;
    v15 = -fabs(v10 + -20.0);
    LiSimpleCamera::setTranslation(v18, &v14);
    v17 = fmin(v17, -20.0);
  }
  LiCamera::localToFilmMatrix((LiCamera *)v18, (uint64_t)v13);
  PCMatrix44Tmpl<double>::operator*(a4, v13, (uint64_t)&v14);
  PCMatrix44Tmpl<double>::operator*((uint64_t)&v14, v16, a5);
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)v18, v12);
}

void sub_1B2D1F46C(_Unwind_Exception *a1, const PCString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  LiSimpleCamera::~LiSimpleCamera((LiSimpleCamera *)&a58, a2);
  _Unwind_Resume(a1);
}

double PCMatrix33Tmpl<double>::transformNormal<double>@<D0>(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X8>)
{
  __int128 v4;
  float64x2_t v5;
  double v6;
  double v7;
  double result;
  double v9;
  double v10;
  double v11;
  float64x2_t v12;
  _BYTE v13[32];
  float64x2_t v14;
  double v15;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v4 = *(_OWORD *)(a1 + 16);
  v12 = *(float64x2_t *)a1;
  *(_OWORD *)v13 = v4;
  v5 = *(float64x2_t *)(a1 + 48);
  *(_OWORD *)&v13[16] = *(_OWORD *)(a1 + 32);
  v14 = v5;
  v15 = *(double *)(a1 + 64);
  PCMatrix33Tmpl<double>::invert(v12.f64, v12.f64, 0.0);
  v6 = *(double *)v13;
  v7 = *(double *)&v13[24];
  *a3 = vaddq_f64(vmulq_n_f64(v14, v11), vaddq_f64(vmulq_n_f64(v12, v9), vmulq_n_f64(*(float64x2_t *)&v13[8], v10)));
  result = v9 * v6 + v10 * v7 + v11 * v15;
  a3[1].f64[0] = result;
  return result;
}

uint64_t LiNodeDrawer::LiNodeDrawer(uint64_t a1, uint64_t *a2, const LiPolygon *a3, int a4, char a5, uint64_t a6, double a7)
{
  _QWORD *v14;
  uint64_t v15;

  LiDrawer::LiDrawer((LiDrawer *)a1);
  *v14 = &off_1E656ECB8;
  v15 = *a2;
  *(_QWORD *)(a1 + 48) = *a2;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
  LiPolygon::LiPolygon((LiPolygon *)(a1 + 56), a3);
  *(_BYTE *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(double *)(a1 + 200) = a7;
  *(_DWORD *)(a1 + 208) = a4;
  *(_BYTE *)(a1 + 212) = a5;
  *(_QWORD *)(a1 + 216) = a6;
  *(_QWORD *)(a1 + 16) = a6;
  return a1;
}

void sub_1B2D1F5F4(_Unwind_Exception *a1)
{
  LiDrawer *v1;

  LiDrawer::~LiDrawer(v1);
  _Unwind_Resume(a1);
}

void LiNodeDrawer::LiNodeDrawer(LiNodeDrawer *this, const LiNodeDrawer *a2)
{
  _QWORD *v4;
  uint64_t v5;

  LiDrawer::LiDrawer(this);
  *v4 = &off_1E656ECB8;
  v5 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 6) = v5;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  LiPolygon::LiPolygon((LiNodeDrawer *)((char *)this + 56), (const LiNodeDrawer *)((char *)a2 + 56));
  *((_OWORD *)this + 10) = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 11) = *((_OWORD *)a2 + 11);
  *((_BYTE *)this + 192) = *((_BYTE *)a2 + 192);
  *((_QWORD *)this + 25) = *((_QWORD *)a2 + 25);
  *((_DWORD *)this + 52) = *((_DWORD *)a2 + 52);
  *((_BYTE *)this + 212) = *((_BYTE *)a2 + 212);
  *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
}

void sub_1B2D1F6BC(_Unwind_Exception *a1)
{
  LiDrawer *v1;

  LiDrawer::~LiDrawer(v1);
  _Unwind_Resume(a1);
}

void LiNodeDrawer::~LiNodeDrawer(LiNodeDrawer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E656ECB8;
  LiPolygon::~LiPolygon((LiNodeDrawer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 6);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  LiDrawer::~LiDrawer(this);
}

{
  LiNodeDrawer::~LiNodeDrawer(this);
  JUMPOUT(0x1B5E29170);
}

void LiNodeDrawer::draw(LiNodeDrawer *this, LiBlender *a2)
{
  uint64_t v4;
  double v5;
  int v6;
  uint64_t v7;
  PCSharedCount v8;
  _BYTE v9[112];

  LiImagePolygon::LiImagePolygon((LiImagePolygon *)v9);
  if (*((_BYTE *)this + 192))
  {
    LiImagePolygon::set((uint64_t)v9, (uint64_t)this + 56, 1);
    LiBlender::crop((uint64_t)a2, (uint64_t)v9, 0);
  }
  v4 = *((unsigned int *)this + 52);
  v5 = *((double *)this + 25);
  v6 = *((unsigned __int8 *)this + 212);
  v7 = 0;
  PCSharedCount::PCSharedCount(&v8);
  (*(void (**)(LiBlender *, char *, uint64_t, _QWORD, BOOL, uint64_t *, double))(*(_QWORD *)a2 + 16))(a2, (char *)this + 48, v4, 0, v6 != 0, &v7, v5);
  PCSharedCount::~PCSharedCount(&v8);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)v9);
}

void sub_1B2D1F82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  PCSharedCount *v11;

  PCSharedCount::~PCSharedCount(v11);
  LiImagePolygon::~LiImagePolygon((LiImagePolygon *)&a11);
  _Unwind_Resume(a1);
}

uint64_t LiNodeDrawer::getBounds(LiNodeDrawer *this)
{
  return (uint64_t)this + 56;
}

uint64_t LiNodeDrawer::isPlanar(LiNodeDrawer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 27);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  else
    return 1;
}

void LiNodeDrawer::setPlane(float64x2_t *this, float64x2_t *a2)
{
  float64x2_t v2;

  v2 = a2[1];
  this[10] = *a2;
  this[11] = v2;
  LiNodeDrawer::projectBoundsToPlane(this);
}

void LiNodeDrawer::projectBoundsToPlane(float64x2_t *this)
{
  double v2[3];

  if ((*(unsigned int (**)(float64x2_t *))(*(_QWORD *)&this->f64[0] + 40))(this))
  {
    if (((*(_QWORD *)&this[8].f64[0] - *(_QWORD *)&this[7].f64[1]) & 0x1FFFFFFFE0) != 0)
    {
      v2[0] = 0.0;
      v2[1] = 0.0;
      v2[2] = 1.0;
      LiPolygon::projectToPlane((uint64_t)&this[3].f64[1], this + 10, v2);
    }
  }
}

__n128 LiNodeDrawer::getPlane@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;
  __n128 v3;

  result = this[10];
  v3 = this[11];
  *a2 = result;
  a2[1] = v3;
  return result;
}

uint64_t LiNodeDrawer::getSceneObject(LiNodeDrawer *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 27);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  return result;
}

void LiNodeDrawer::intersect(LiNodeDrawer *this, LiIntersection *a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  PCArray_base *v7;
  uint64_t v8;

  v2 = *((unsigned int *)a2 + 5);
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v6 = operator new();
      LiNodeDrawer::LiNodeDrawer((LiNodeDrawer *)v6, this);
      v7 = (PCArray_base *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a2 + 4) + 16))(*((_QWORD *)a2 + 4), v6);
      if (i >= *((int *)a2 + 5))
        PCArray_base::badIndex(v7);
      v8 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * i);
      copy<LiChannelT<PCVector3<double>>,LiPolygon::PosFacet>((_QWORD *)(v8 + 16), (uint64_t **)(v6 + 144));
      *(_BYTE *)(v6 + 192) = 1;
      *(_QWORD *)(v8 + 8) = v6;
    }
  }
}

void sub_1B2D1F9C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40123E26DALL);
  _Unwind_Resume(a1);
}

void LiNodeDrawer::name(LiNodeDrawer *this@<X0>, LiString *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  _DWORD *v11;
  const char *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  _BYTE *v21;
  _BYTE *v22;

  LiString::LiString(a2, "Node");
  v4 = *((_QWORD *)this + 27);
  if (v4)
  {
    (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 88))(&v22);
    v5 = v22;
    if (v22)
      v6 = *((_DWORD *)v22 - 2);
    else
      v6 = 0;
    v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
    v8 = v6 + 1;
    v7[2] = v6 + 2;
    atomic_store(1u, v7);
    atomic_store(0, v7);
    *((_BYTE *)v7 + 12) = 40;
    v7[1] = v8;
    memcpy((char *)v7 + 13, v5, v6);
    *((_BYTE *)v7 + v8 + 12) = 0;
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 + 1, v7));
    v10 = (int)v7[1];
    v11 = malloc_type_malloc(v10 + 14, 0x8903763CuLL);
    v11[1] = v10 + 1;
    v11[2] = v10 + 2;
    atomic_store(1u, v11);
    v12 = (const char *)(v11 + 3);
    atomic_store(0, v11);
    memcpy(v11 + 3, v7 + 3, v10);
    v12[v10] = 41;
    v12[v10 + 1] = 0;
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 + 1, v11));
    LiString::append(a2, v12, v11[1]);
    do
    {
      v14 = __ldaxr(v11);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v11));
    if (!v15)
      free(v11);
    do
    {
      v16 = __ldaxr(v7);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v7));
    if (!v17)
      free(v7);
    if (v22)
    {
      v18 = (unsigned int *)(v22 - 12);
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        *v22 = 0;
        if (v22)
          v21 = v22 - 12;
        else
          v21 = 0;
        free(v21);
      }
    }
  }
}

void sub_1B2D1FBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _BYTE *a10)
{
  LiString *v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  do
  {
    v14 = __ldaxr(v12);
    v15 = v14 - 1;
  }
  while (__stlxr(v15, v12));
  if (!v15)
    free(v12);
  do
  {
    v16 = __ldaxr(v11);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v11));
  if (!v17)
    free(v11);
  if (a10)
  {
    v18 = (unsigned int *)(a10 - 12);
    do
    {
      v19 = __ldaxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  LiString::dec(v10);
  _Unwind_Resume(a1);
}

void LiNodeDrawer::dump(LiNodeDrawer *this, const char **a2)
{
  const char *v4;
  size_t v5;
  _QWORD *v6;
  const char *v7;
  size_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  char *v23;
  const char *v24;

  if (*a2)
    v4 = *a2;
  else
    v4 = "";
  v5 = strlen(v4);
  v6 = (_QWORD *)MEMORY[0x1E0DE4A50];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)v4, v5);
  (*(void (**)(const char **__return_ptr, LiNodeDrawer *))(*(_QWORD *)this + 88))(&v24, this);
  if (v24)
    v7 = v24;
  else
    v7 = "";
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"\n", 1);
  if (v24)
  {
    v9 = (unsigned int *)(v24 - 12);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      *v24 = 0;
      if (v24)
        v12 = (char *)(v24 - 12);
      else
        v12 = 0;
      free(v12);
    }
  }
  v13 = *((_QWORD *)this + 27);
  if (v13)
  {
    v14 = *a2;
    v15 = v14 ? *((_DWORD *)v14 - 2) : 0;
    v16 = v15 + 6;
    v17 = (unsigned int *)malloc_type_malloc(v15 + 19, 0x8903763CuLL);
    v17[1] = v16;
    v17[2] = v15 + 7;
    atomic_store(1u, v17);
    atomic_store(0, v17);
    memcpy(v17 + 3, v14, v15);
    v18 = (uint64_t)v17 + v15 + 12;
    *(_DWORD *)v18 = 1919950880;
    *(_WORD *)(v18 + 4) = 8293;
    *((_BYTE *)v17 + v16 + 12) = 0;
    v24 = (const char *)(v17 + 3);
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 + 1, v17));
    (*(void (**)(uint64_t, const char **))(*(_QWORD *)v13 + 96))(v13, &v24);
    if (v24)
    {
      v20 = (unsigned int *)(v24 - 12);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        *v24 = 0;
        if (v24)
          v23 = (char *)(v24 - 12);
        else
          v23 = 0;
        free(v23);
      }
    }
  }
}

void sub_1B2D1FE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    LiDrawer::dump(a10, (_BYTE **)&a10);
  _Unwind_Resume(exception_object);
}

uint64_t LiNodeDrawer::getFilterIntersections(LiNodeDrawer *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 27);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1);
  else
    return 1;
}

uint64_t LiNodeDrawer::getBlendMode(LiNodeDrawer *this)
{
  return *((unsigned int *)this + 52);
}

uint64_t LiNodeDrawer::defocus(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 216) + 136))(*(_QWORD *)(a1 + 216));
}

uint64_t LiPlanarGroup::LiPlanarGroup(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = &unk_1E656A790;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(a1 + 32, 1, 3);
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * *(int *)(a1 + 44) - 8) = a3;
  v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v6;
  LiPlanarGroup::normalize((float64x2_t *)a1);
  return a1;
}

void sub_1B2D1FF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  PCPtrArray<LiDrawer>::~PCPtrArray(v1);
  _Unwind_Resume(a1);
}

double LiPlanarGroup::normalize(float64x2_t *this)
{
  double result;
  double v3;
  double v4;
  double v5;

  PCVector4<double>::normalize(this->f64, 0.000000100000001);
  result = this[1].f64[1];
  if (result < 0.0)
  {
    *this = vnegq_f64(*this);
    v3 = this[1].f64[0];
LABEL_12:
    result = -result;
    this[1].f64[0] = -v3;
    this[1].f64[1] = result;
    return result;
  }
  if (result > 0.0)
    return result;
  v3 = this[1].f64[0];
  if (v3 < 0.0)
  {
    *this = vnegq_f64(*this);
    goto LABEL_12;
  }
  if (v3 > 0.0)
    return result;
  v4 = this->f64[1];
  if (v4 < 0.0)
  {
    v5 = this->f64[0];
LABEL_11:
    this->f64[0] = -v5;
    this->f64[1] = -v4;
    goto LABEL_12;
  }
  if (v4 <= 0.0)
  {
    v5 = this->f64[0];
    if (this->f64[0] < 0.0)
      goto LABEL_11;
  }
  return result;
}

uint64_t lexical_compare(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;

  v2 = a1[3];
  v3 = a2[3];
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v2 > v3)
    return 1;
  v4 = a1[2];
  v5 = a2[2];
  if (v4 < v5)
    return 0xFFFFFFFFLL;
  if (v4 > v5)
    return 1;
  v6 = a1[1];
  v7 = a2[1];
  if (v6 < v7)
    return 0xFFFFFFFFLL;
  if (v6 > v7)
    return 1;
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  return *a1 > *a2;
}

BOOL PCVector4<double>::normalize(double *a1, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  _BOOL8 v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = sqrt(v2 * v2 + v3 * v3 + v4 * v4 + v5 * v5);
  v7 = v6 >= a2 || v6 <= -a2;
  if (v7)
  {
    *a1 = v2 / v6;
    a1[1] = v3 / v6;
    a1[2] = v4 / v6;
    a1[3] = v5 / v6;
  }
  return v7;
}

uint64_t LiPlanarGroupSet::LiPlanarGroupSet(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E656ED88;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = operator new();
  LiPlanarGroup::LiPlanarGroup(v6, a2, a3);
  v7 = *(_DWORD *)(a1 + 12);
  if (*(_DWORD *)(a1 + 8) <= v7)
    v8 = (2 * (v7 + 1)) | 1;
  else
    v8 = *(_DWORD *)(a1 + 8);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(a1, v7 + 1, v8);
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * *(int *)(a1 + 12) - 8) = v6;
  return a1;
}

void sub_1B2D20134(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  MEMORY[0x1B5E29170](v2, 0x1080C402A14C379);
  PCPtrArray<LiPlanarGroup>::~PCPtrArray(v1);
  _Unwind_Resume(a1);
}

uint64_t PCPtrArray<LiPlanarGroup>::~PCPtrArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656EDD8;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void LiPlanarGroupSet::~LiPlanarGroupSet(LiPlanarGroupSet *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  PCPtrArray<LiPlanarGroup>::deleteAll((unsigned int *)this);
  *(_QWORD *)this = &unk_1E656EDD8;
  v2 = *((_DWORD *)this + 2);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *((int *)this + 3);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 2);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *((_QWORD *)this + 2) = v6;
  }
  *((_DWORD *)this + 2) = v3;
  *((_DWORD *)this + 3) = 0;
  v8 = *((_QWORD *)this + 2);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 2) = 0;
}

unsigned int *PCPtrArray<LiPlanarGroup>::deleteAll(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;

  v1 = result;
  v2 = result[3];
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if (i >= (int)v1[3])
        PCArray_base::badIndex((PCArray_base *)result);
      v4 = *(_QWORD *)(*((_QWORD *)v1 + 2) + 8 * i);
      if (v4)
      {
        *(_QWORD *)(v4 + 32) = &unk_1E656A7E0;
        v5 = *(_DWORD *)(v4 + 40);
        if (v5 < 0)
          v6 = 1;
        else
          v6 = v5 & ~(v5 >> 31);
        if (v6 == v5)
        {
          v7 = *(int *)(v4 + 44);
          if ((v7 & 0x80000000) != 0)
          {
            do
            {
              *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v7) = 0;
              v8 = __CFADD__(v7++, 1);
            }
            while (!v8);
          }
        }
        else
        {
          if (v6)
          {
            v9 = (void *)operator new[]();
            bzero(v9, 8 * v6);
          }
          else
          {
            v9 = 0;
          }
          v10 = *(_QWORD *)(v4 + 48);
          if (v10)
            MEMORY[0x1B5E2914C](v10, 0x1000C8077774924);
          *(_QWORD *)(v4 + 48) = v9;
        }
        *(_DWORD *)(v4 + 40) = v6;
        *(_DWORD *)(v4 + 44) = 0;
        v11 = *(_QWORD *)(v4 + 48);
        if (v11)
          MEMORY[0x1B5E2914C](v11, 0x1000C8077774924);
        *(_QWORD *)(v4 + 48) = 0;
        *(_DWORD *)(v4 + 40) = 0;
        result = (unsigned int *)MEMORY[0x1B5E29170](v4, 0x1080C402A14C379);
      }
      if (i >= (int)v1[3])
        PCArray_base::badIndex((PCArray_base *)result);
      *(_QWORD *)(*((_QWORD *)v1 + 2) + 8 * i) = 0;
    }
  }
  v12 = v1[2];
  if (v12 < 0)
    v13 = 1;
  else
    v13 = v12 & ~(v12 >> 31);
  if (v13 == v12)
  {
    v14 = (int)v1[3];
    if ((v14 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)v1 + 2) + 8 * v14) = 0;
        v8 = __CFADD__(v14++, 1);
      }
      while (!v8);
    }
  }
  else
  {
    if (v13)
    {
      v15 = (void *)operator new[]();
      bzero(v15, 8 * v13);
    }
    else
    {
      v15 = 0;
    }
    result = (unsigned int *)*((_QWORD *)v1 + 2);
    if (result)
      result = (unsigned int *)MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *((_QWORD *)v1 + 2) = v15;
  }
  v1[2] = v13;
  v1[3] = 0;
  return result;
}

void LiPlanarGroupSet::transform(void **this, const LiPlaneTransform *a2)
{
  uint64_t v3;
  float64x2_t *v5;

  v3 = *((unsigned int *)this + 3);
  if ((int)v3 >= 1)
  {
    do
    {
      if (v3 > *((int *)this + 3))
        PCArray_base::badIndex((PCArray_base *)this);
      v5 = (float64x2_t *)*((_QWORD *)this[2] + --v3);
      LiPlaneTransform::operator()((uint64_t)a2, v5->f64, (uint64_t)v5);
      LiPlanarGroup::normalize(v5);
    }
    while ((unint64_t)(v3 + 1) > 1);
    LODWORD(v3) = *((_DWORD *)this + 3);
  }
  if ((_DWORD)v3)
    qsort(this[2], v3, 8uLL, (int (__cdecl *)(const void *, const void *))lexical_compare);
}

uint64_t lexical_compare(double **a1, double **a2)
{
  return lexical_compare(*a1, *a2);
}

uint64_t LiPlanarGroupSet::mergeFrom(uint64_t result, uint64_t a2)
{
  int v2;
  double *v3;
  double *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  double *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  int v38;
  int v39;
  double *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;

  v42 = 0;
  v43 = 0;
  v41 = &unk_1E656ED88;
  v2 = *(_DWORD *)(result + 12);
  v38 = *(_DWORD *)(a2 + 12);
  if (v2)
  {
    if (v2 <= 0)
      PCArray_base::badIndex((PCArray_base *)result);
    v3 = **(double ***)(result + 16);
  }
  else
  {
    v3 = 0;
  }
  v36 = result;
  if (v38)
  {
    if (*(int *)(a2 + 12) <= 0)
      PCArray_base::badIndex((PCArray_base *)result);
    v4 = **(double ***)(a2 + 16);
  }
  else
  {
    v4 = 0;
  }
  v5 = 0;
  v39 = 0;
  v6 = 0;
  if (!v3)
    goto LABEL_31;
  do
  {
    if (!v4)
    {
      v8 = (int)v5 + 1;
      if ((int)v8 < v2)
      {
        if ((int)v5 < -1 || *(_DWORD *)(v36 + 12) <= (int)v8)
          PCArray_base::badIndex((PCArray_base *)result);
        v4 = 0;
        v9 = *(double **)(*(_QWORD *)(v36 + 16) + 8 * v8);
        goto LABEL_28;
      }
      v4 = 0;
LABEL_30:
      v40 = 0;
      goto LABEL_40;
    }
    result = lexical_compare(v3, v4);
    if ((int)result <= 0)
    {
      v8 = (int)v5 + 1;
      if ((int)v8 < v2)
      {
        if ((int)v5 < -1 || *(_DWORD *)(v36 + 12) <= (int)v8)
          PCArray_base::badIndex((PCArray_base *)result);
        v9 = *(double **)(*(_QWORD *)(v36 + 16) + 8 * v8);
LABEL_28:
        v40 = v9;
        goto LABEL_40;
      }
      goto LABEL_30;
    }
    v7 = v39 + 1;
    v40 = v3;
    if ((int)v7 >= v38)
      goto LABEL_39;
    if (v39 < -1 || *(_DWORD *)(a2 + 12) <= (int)v7)
      PCArray_base::badIndex((PCArray_base *)result);
LABEL_37:
    v3 = v4;
    v4 = *(double **)(*(_QWORD *)(a2 + 16) + 8 * v7);
    v8 = v5;
    v39 = v7;
LABEL_40:
    v10 = HIDWORD(v42);
    v11 = v6;
    if (v6 <= SHIDWORD(v42))
      v12 = HIDWORD(v42);
    else
      v12 = v6;
    v13 = ((uint64_t)v6-- << 32) - 0x100000000;
    do
    {
      if (v12 == v11)
      {
        v6 = v12;
LABEL_60:
        if ((int)v42 <= SHIDWORD(v42))
          v16 = (2 * (HIDWORD(v42) + 1)) | 1;
        else
          v16 = v42;
        result = PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)&v41, HIDWORD(v42) + 1, v16);
        v43[SHIDWORD(v42) - 1] = v3;
        goto LABEL_64;
      }
      if (v11 < 0 || v11 >= SHIDWORD(v42))
        PCArray_base::badIndex((PCArray_base *)result);
      v14 = *(double *)(v43[v11++] + 24);
      v13 += 0x100000000;
      ++v6;
    }
    while (v14 < v3[3] + -1.0e-10);
    if (SHIDWORD(v42) <= v6)
      goto LABEL_60;
    while (1)
    {
      if (v6 < 0 || SHIDWORD(v42) <= v6)
        PCArray_base::badIndex((PCArray_base *)result);
      v15 = (double *)v43[v13 >> 32];
      if (vabdd_f64(*v3, *v15) < 1.0e-10
        && vabdd_f64(v3[1], v15[1]) < 1.0e-10
        && vabdd_f64(v3[2], v15[2]) < 1.0e-10
        && vabdd_f64(v3[3], v15[3]) < 1.0e-10)
      {
        break;
      }
      if (v6 == --v10)
        goto LABEL_60;
    }
    if (v6 < 0 || SHIDWORD(v42) <= v6)
      PCArray_base::badIndex((PCArray_base *)result);
    PCArray<LiDrawer *,PCArray_Traits_Zero<LiDrawer *>>::append((uint64_t)(v15 + 4), (uint64_t)(v3 + 4));
    *((_QWORD *)v3 + 4) = &unk_1E656A7E0;
    v17 = *((_DWORD *)v3 + 10);
    if (v17 < 0)
      v18 = 1;
    else
      v18 = v17 & ~(v17 >> 31);
    if (v18 == v17)
    {
      v19 = *((int *)v3 + 11);
      if ((v19 & 0x80000000) != 0)
      {
        do
        {
          *(_QWORD *)(*((_QWORD *)v3 + 6) + 8 * v19) = 0;
          v20 = __CFADD__(v19++, 1);
        }
        while (!v20);
      }
    }
    else
    {
      if (v18)
      {
        v21 = (void *)operator new[]();
        bzero(v21, 8 * v18);
      }
      else
      {
        v21 = 0;
      }
      v22 = *((_QWORD *)v3 + 6);
      if (v22)
        MEMORY[0x1B5E2914C](v22, 0x1000C8077774924);
      *((_QWORD *)v3 + 6) = v21;
    }
    *((_DWORD *)v3 + 10) = v18;
    *((_DWORD *)v3 + 11) = 0;
    v23 = *((_QWORD *)v3 + 6);
    if (v23)
      MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
    v3[6] = 0.0;
    *((_DWORD *)v3 + 10) = 0;
    result = MEMORY[0x1B5E29170](v3, 0x1080C402A14C379);
LABEL_64:
    v5 = v8;
    v3 = v40;
  }
  while (v40);
LABEL_31:
  if (v4)
  {
    v7 = v39 + 1;
    if ((int)v7 < v38)
    {
      if (v39 < -1 || *(_DWORD *)(a2 + 12) <= (int)v7)
        PCArray_base::badIndex((PCArray_base *)result);
      v40 = 0;
      goto LABEL_37;
    }
    v40 = 0;
LABEL_39:
    v3 = v4;
    v8 = v5;
    v39 = v7;
    v4 = 0;
    goto LABEL_40;
  }
  v24 = *(_DWORD *)(v36 + 8);
  if (v24 < 0)
    v25 = 1;
  else
    v25 = v24 & ~(v24 >> 31);
  if (v25 == v24)
  {
    v26 = *(int *)(v36 + 12);
    v27 = a2;
    if ((v26 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*(_QWORD *)(v36 + 16) + 8 * v26) = 0;
        v20 = __CFADD__(v26++, 1);
      }
      while (!v20);
    }
    v28 = *(void **)(v36 + 16);
  }
  else
  {
    v27 = a2;
    if (v25)
    {
      v28 = (void *)operator new[]();
      bzero(v28, 8 * v25);
    }
    else
    {
      v28 = 0;
    }
    result = *(_QWORD *)(v36 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v36 + 16) = v28;
  }
  *(_DWORD *)(v36 + 8) = v25;
  *(_DWORD *)(v36 + 12) = 0;
  if (v28)
    result = MEMORY[0x1B5E2914C](v28, 0x1000C8077774924);
  *(_QWORD *)(v36 + 8) = v42;
  *(_QWORD *)(v36 + 16) = v43;
  v42 = 0;
  v43 = 0;
  v29 = *(_DWORD *)(v27 + 8);
  if (v29 < 0)
    v30 = 1;
  else
    v30 = v29 & ~(v29 >> 31);
  if (v30 == v29)
  {
    v31 = *(int *)(v27 + 12);
    if ((v31 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8 * v31) = 0;
        v20 = __CFADD__(v31++, 1);
      }
      while (!v20);
    }
    v32 = *(void **)(v27 + 16);
  }
  else
  {
    if (v30)
    {
      v32 = (void *)operator new[]();
      bzero(v32, 8 * v30);
    }
    else
    {
      v32 = 0;
    }
    result = *(_QWORD *)(v27 + 16);
    if (result)
      result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *(_QWORD *)(v27 + 16) = v32;
  }
  *(_DWORD *)(v27 + 8) = v30;
  *(_DWORD *)(v27 + 12) = 0;
  if (v32)
    result = MEMORY[0x1B5E2914C](v32, 0x1000C8077774924);
  *(_QWORD *)(v27 + 16) = 0;
  *(_DWORD *)(v27 + 8) = 0;
  v41 = &unk_1E656EDD8;
  if ((int)v42 < 0)
    v33 = 1;
  else
    v33 = v42 & ~((int)v42 >> 31);
  if (v33 == (_DWORD)v42)
  {
    v34 = SHIDWORD(v42);
    if (v42 < 0)
    {
      do
      {
        v43[v34] = 0;
        v20 = __CFADD__(v34++, 1);
      }
      while (!v20);
    }
    v35 = v43;
  }
  else
  {
    if (v33)
    {
      v35 = (void *)operator new[]();
      bzero(v35, 8 * v33);
    }
    else
    {
      v35 = 0;
    }
    result = (uint64_t)v43;
    if (v43)
      result = MEMORY[0x1B5E2914C](v43, 0x1000C8077774924);
    v43 = v35;
  }
  v42 = v33;
  if (v35)
    return MEMORY[0x1B5E2914C](v35, 0x1000C8077774924);
  return result;
}

void sub_1B2D20CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  PCPtrArray<LiPlanarGroup>::~PCPtrArray((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned int *LiPlanarGroupSet::gatherDrawers(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  LiGroupDrawer *v14;
  PCArray_base *v15;
  int v16;
  int v17;
  _QWORD v18[4];
  _OWORD v19[2];

  v4 = result[3];
  if ((int)v4 >= 1)
  {
    v8 = result;
    v9 = 0;
    while (1)
    {
      if (v9 >= (int)v8[3])
        PCArray_base::badIndex((PCArray_base *)result);
      v10 = *(_QWORD *)(*((_QWORD *)v8 + 2) + 8 * v9);
      v11 = *(_DWORD *)(v10 + 44);
      v12 = *(_OWORD *)(v10 + 16);
      v19[0] = *(_OWORD *)v10;
      v19[1] = v12;
      result = (unsigned int *)PCPlaneType((double *)v19);
      v13 = a3;
      if (!(_DWORD)result)
        goto LABEL_8;
      if ((_DWORD)result != 1)
        break;
LABEL_20:
      if (v4 == ++v9)
        return result;
    }
    v13 = a2;
LABEL_8:
    if (v11)
    {
      if (v11 == 1)
      {
        if (*(int *)(v10 + 44) <= 0)
          PCArray_base::badIndex((PCArray_base *)result);
        v14 = **(LiGroupDrawer ***)(v10 + 48);
      }
      else
      {
        v14 = (LiGroupDrawer *)operator new();
        LiGroupDrawer::LiGroupDrawer(v14);
        (*(void (**)(uint64_t, LiGroupDrawer *))(*(_QWORD *)a4 + 16))(a4, v14);
        v15 = (PCArray_base *)LiGroupDrawer::add(v14, v10 + 32);
        if (*(int *)(v10 + 44) <= 0)
          PCArray_base::badIndex(v15);
        (*(void (**)(_QWORD *__return_ptr))(***(_QWORD ***)(v10 + 48) + 48))(v18);
        (*(void (**)(LiGroupDrawer *, _QWORD *))(*(_QWORD *)v14 + 56))(v14, v18);
        LiGroupDrawer::stackSort(v14);
      }
      v16 = *(_DWORD *)(v13 + 12);
      if (*(_DWORD *)(v13 + 8) <= v16)
        v17 = (2 * (v16 + 1)) | 1;
      else
        v17 = *(_DWORD *)(v13 + 8);
      result = (unsigned int *)PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(v13, v16 + 1, v17);
      *(_QWORD *)(*(_QWORD *)(v13 + 16) + 8 * *(int *)(v13 + 12) - 8) = v14;
    }
    goto LABEL_20;
  }
  return result;
}

void sub_1B2D20E7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C4096833E04);
  _Unwind_Resume(a1);
}

void LiPlanarGroupHerd::~LiPlanarGroupHerd(LiPlanarGroupHerd *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  LiPlanarGroupSet *v8;

  if ((int)*((_QWORD *)this + 5) >= 1)
  {
    v2 = *((_QWORD *)this + 4);
    v3 = *((_QWORD *)this + 5) + 1;
    do
    {
      v4 = (v3 - 2);
      v5 = *((_QWORD *)this + 1);
      v6 = (unint64_t)(v2 + v4) >> 9;
      v7 = (v2 + v4) & 0x1FF;
      v8 = *(LiPlanarGroupSet **)(*(_QWORD *)(v5 + 8 * v6) + 8 * v7);
      if (v8)
      {
        LiPlanarGroupSet::~LiPlanarGroupSet(v8);
        MEMORY[0x1B5E29170]();
        v2 = *((_QWORD *)this + 4);
        v5 = *((_QWORD *)this + 1);
        v6 = (unint64_t)(v2 + v4) >> 9;
        v7 = (v2 + v4) & 0x1FF;
      }
      *(_QWORD *)(*(_QWORD *)(v5 + 8 * v6) + 8 * v7) = 0;
      --v3;
    }
    while (v3 > 1);
  }
  std::deque<unsigned long>::~deque[abi:ne180100](this);
}

void LiPlanarGroupHerd::add(LiPlanarGroupHerd *this, LiPlanarGroupSet *a2)
{
  LiPlanarGroupSet *v2;

  v2 = a2;
  std::deque<LiPlanarGroupSet *>::push_back(this, &v2);
}

void std::deque<LiPlanarGroupSet *>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<LiPlanarGroupSet *>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

uint64_t LiPlanarGroupHerd::condense(int64x2_t *this)
{
  unint64_t v1;
  unint64_t v3;
  LiPlanarGroupSet *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = this[2].u64[1];
  if (!v1)
    return 0;
  if (v1 != 1)
  {
    do
    {
      v12 = 0;
      v3 = this[2].u64[0];
      v12 = *(_QWORD *)(*(_QWORD *)(this->i64[1] + ((v3 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v3 & 0x1FF));
      this[2].i64[0] = v3 + 1;
      this[2].i64[1] = v1 - 1;
      std::deque<std::__map_iterator<std::__tree_iterator<std::__value_type<ProGL::TextureDescription,ProGL::Private::TextureImpl *>,std::__tree_node<std::__value_type<ProGL::TextureDescription,ProGL::Private::TextureImpl *>,void *> *,long>>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this, 1);
      v4 = *(LiPlanarGroupSet **)(*(_QWORD *)(this->i64[1]
                                            + (((unint64_t)this[2].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                                + 8 * (this[2].i64[0] & 0x1FF));
      this[2] = vaddq_s64(this[2], (int64x2_t)xmmword_1B304F0B0);
      std::deque<std::__map_iterator<std::__tree_iterator<std::__value_type<ProGL::TextureDescription,ProGL::Private::TextureImpl *>,std::__tree_node<std::__value_type<ProGL::TextureDescription,ProGL::Private::TextureImpl *>,void *> *,long>>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)this, 1);
      LiPlanarGroupSet::mergeFrom(v12, (uint64_t)v4);
      std::deque<LiPlanarGroupSet *>::push_front((uint64_t)this, &v12);
      LiPlanarGroupSet::~LiPlanarGroupSet(v4);
      MEMORY[0x1B5E29170]();
      v1 = this[2].u64[1];
    }
    while (v1 > 1);
  }
  v5 = (void **)this->i64[1];
  v6 = this[1].i64[0];
  v7 = (*(_QWORD **)((char *)v5 + (((unint64_t)this[2].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8)))[this[2].i64[0] & 0x1FF];
  this[2].i64[1] = 0;
  v8 = v6 - (_QWORD)v5;
  if ((unint64_t)(v6 - (_QWORD)v5) >= 0x11)
  {
    do
    {
      operator delete(*v5);
      v9 = this[1].i64[0];
      v5 = (void **)(this->i64[1] + 8);
      this->i64[1] = (uint64_t)v5;
      v8 = v9 - (_QWORD)v5;
    }
    while (v8 > 0x10);
  }
  if (v8 >> 3 == 1)
  {
    v10 = 256;
    goto LABEL_11;
  }
  if (v8 >> 3 == 2)
  {
    v10 = 512;
LABEL_11:
    this[2].i64[0] = v10;
  }
  return v7;
}

void std::deque<LiPlanarGroupSet *>::push_front(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    std::deque<LiPlanarGroupSet *>::__add_front_capacity((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  else
    v7 = *v6 + 8 * (v4 & 0x1FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_QWORD *)(v7 - 8) = *a2;
  v8 = *(_QWORD *)(a1 + 40) + 1;
  *(_QWORD *)(a1 + 32) = v4 - 1;
  *(_QWORD *)(a1 + 40) = v8;
}

void PCPtrArray<LiPlanarGroup>::~PCPtrArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656EDD8;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void std::deque<LiPlanarGroupSet *>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned long *>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B2D2159C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<LiPlanarGroupSet *>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = ((v3 - v2) << 6) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x200)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      std::__split_buffer<unsigned long *>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 256;
      else
        v40 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        std::__split_buffer<unsigned long *>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 256;
      else
        v35 = (uint64_t)a1[4] + 512;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<unsigned long *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1B2D218AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void LiShard::build(uint64_t a1, _QWORD **a2, float64x2_t *a3, float64x2_t *a4, _QWORD *a5, uint64_t a6, uint64_t a7, double *a8, double a9, double a10, double a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  double v36;
  double *v37;
  double v38;
  double v39;
  double v40;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  double v48;
  BOOL v49;
  double v50;
  double v51;
  BOOL v52;
  double v53;
  double v54;
  unint64_t v55;
  uint64_t v58;
  unint64_t v60;
  float64x2_t v61;
  double v62;
  double v63;
  double v64;

  v58 = a12;
  v20 = a5[1] - *a5;
  v60 = (unint64_t)v20 >> 2;
  v21 = (uint64_t *)(a1 + 16);
  v55 = v20;
  v22 = (int)(v20 >> 2);
  std::vector<PCVector3<double>>::resize((uint64_t *)(a1 + 16), v22);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 40), v22);
  v23 = (uint64_t *)(a1 + 64);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 64), v22);
  v24 = (uint64_t *)(a1 + 88);
  std::vector<TXParagraphStyle *>::resize(a1 + 88, v22);
  v25 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88);
  if ((int)(v25 >> 3) >= 1)
  {
    v26 = 0;
    v27 = v25 & 0x7FFFFFFF8;
    do
    {
      *(_QWORD *)(*v24 + v26) = 0;
      v26 += 8;
    }
    while (v27 != v26);
  }
  if ((int)v60 < 1)
  {
    v34 = -1;
  }
  else
  {
    v28 = 0;
    do
    {
      v29 = v28;
      v30 = *(_DWORD *)(*a5 + 4 * v28);
      if (v30 == -1)
      {
        v31 = a6;
      }
      else if (v30 == -2)
      {
        v30 = -1;
        v31 = a7;
      }
      else
      {
        v31 = **a2 + 32 * v30;
      }
      v32 = *v21 + 24 * v29;
      v33 = *(_OWORD *)v31;
      *(_QWORD *)(v32 + 16) = *(_QWORD *)(v31 + 16);
      *(_OWORD *)v32 = v33;
      *(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v29) = v30;
      *(_DWORD *)(*v23 + 4 * v29) = 0;
      v28 = v29 + 1;
    }
    while (v29 + 1 != (v55 >> 2));
    v34 = (int)v29;
  }
  v35 = *(_DWORD *)(*a5 + 4 * v34);
  if (v35 == -2)
  {
    v64 = a10;
    v36 = a10;
  }
  else if (v35 == -1)
  {
    v64 = a9;
    v36 = a9;
  }
  else
  {
    v37 = (double *)(**a2 + 32 * v35);
    v38 = ((*v37 - a3->f64[0]) * a4->f64[0] + (v37[1] - a3->f64[1]) * a4->f64[1] + (v37[2] - a3[1].f64[0])
                                                                                 * a4[1].f64[0])
        / (a4->f64[0] * a4->f64[0] + a4->f64[1] * a4->f64[1] + a4[1].f64[0] * a4[1].f64[0]);
    if (vabdd_f64(v38, a9) >= vabdd_f64(v38, a10))
      v36 = a10;
    else
      v36 = a9;
    v64 = v36;
  }
  if (v36 != a9)
    a10 = a9;
  v63 = a10;
  v40 = *a8;
  v39 = a8[1];
  if (v39 < *a8)
  {
    *(_DWORD *)(*v23 + 4 * v34) = 2;
    *(_QWORD *)(*v24 + 8 * v34) = v58;
    return;
  }
  if (v36 >= v40 - a11 && v36 <= v40 + a11)
  {
    v45 = *v23;
    v46 = *v24;
LABEL_37:
    *(_DWORD *)(v45 + 4 * v34) = 1;
    *(_QWORD *)(v46 + 8 * v34) = v58;
    goto LABEL_38;
  }
  v45 = *v23;
  v46 = *v24;
  if (v36 >= v39 - a11 && v36 <= v39 + a11)
    goto LABEL_37;
  *(_DWORD *)(v45 + 4 * v34) = 2;
  *(_QWORD *)(v46 + 8 * v34) = v58;
  v43 = LiInterval<double>::closest(a8, &v64);
  v44 = v43 * a4[1].f64[0] + a3[1].f64[0];
  v61 = vaddq_f64(vmulq_n_f64(*a4, v43), *a3);
  v62 = v44;
  LiChannelT<PCVector3<double>>::append(v21, (uint64_t)&v61);
  LODWORD(v61.f64[0]) = -1;
  LiChannelT<int>::append(a1 + 40, &v61);
  LODWORD(v61.f64[0]) = 1;
  LiChannelT<int>::append(a1 + 64, &v61);
  LiChannelT<LiDrawer *>::append((void **)(a1 + 88), &a12);
  v40 = *a8;
  v39 = a8[1];
LABEL_38:
  if (v39 < v40
    || ((v47 = v40 - a11, v48 = v40 + a11, a10 >= v47) ? (v49 = a10 > v48) : (v49 = 1),
        v49 && ((v50 = v39 - a11, v51 = v39 + a11, a10 >= v50) ? (v52 = a10 > v51) : (v52 = 1), v52)))
  {
    v53 = LiInterval<double>::closest(a8, &v63);
    v54 = v53 * a4[1].f64[0] + a3[1].f64[0];
    v61 = vaddq_f64(vmulq_n_f64(*a4, v53), *a3);
    v62 = v54;
    LiChannelT<PCVector3<double>>::append(v21, (uint64_t)&v61);
    LODWORD(v61.f64[0]) = -1;
    LiChannelT<int>::append(a1 + 40, &v61);
    LODWORD(v61.f64[0]) = 2;
    LiChannelT<int>::append(a1 + 64, &v61);
    LiChannelT<LiDrawer *>::append((void **)(a1 + 88), &a12);
  }
}

double LiInterval<double>::closest(double *a1, double *a2)
{
  double result;
  double v3;
  PCException *exception;
  PCString v5;

  result = *a1;
  v3 = a1[1];
  if (v3 < *a1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v5, "empty interval");
    PCException::PCException(exception, &v5);
  }
  if (*a2 <= v3)
    v3 = *a2;
  if (*a2 >= result)
    return v3;
  return result;
}

void sub_1B2D21D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

_QWORD *LiChannelT<LiDrawer *>::append(void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<double>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
  return v8 - 1;
}

void LiPlaneSplit::LiPlaneSplit(LiPlaneSplit *this)
{
  *((_DWORD *)this + 7) = 0;
  *((_BYTE *)this + 32) = 0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_BYTE *)this + 24) = 0;
  *((_QWORD *)this + 11) = 0x3FF0000000000000;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = &unk_1E656A790;
  *((_QWORD *)this + 44) = &unk_1E656A790;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 47) = &unk_1E656A790;
}

void LiPlaneSplit::compute(LiPlaneSplit *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t **v7;
  int v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  char v36;
  char v37;
  void **v38;
  char *v39;
  uint64_t v40;
  PCException *exception;
  PCException *v42;
  PCException *v43;
  int v44;
  void *__p;
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  _OWORD v59[3];
  _OWORD v60[3];
  float64x2_t v61;
  double v62;
  double v63;
  float64x2_t v64;
  double v65;
  double v66;
  void *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString((PCString *)v60, "_pivot");
    PCException::PCException(exception, (const PCString *)v60);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (!*((_QWORD *)this + 2))
  {
    v42 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString((PCString *)v60, "_target");
    PCException::PCException(v42, (const PCString *)v60);
    *(_QWORD *)v42 = &unk_1E65EA798;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) & 1) == 0)
  {
    v43 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString((PCString *)v60, "no pivot plane");
    PCException::PCException(v43, (const PCString *)v60);
    *(_QWORD *)v43 = &unk_1E65EA798;
  }
  v77 = 0.0;
  v78 = 0.0;
  v73 = 0.0;
  v74 = 0.0;
  v75 = 0.0;
  v76 = 0.0;
  v71 = 0;
  v72 = 0;
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v70 = 0;
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
  (*(void (**)(float64x2_t *__return_ptr))(**((_QWORD **)this + 1) + 48))(&v64);
  (*(void (**)(float64x2_t *__return_ptr))(**((_QWORD **)this + 2) + 48))(&v61);
  memset(v60, 0, sizeof(v60));
  memset(v59, 0, sizeof(v59));
  v5 = vaddvq_f64(vmulq_f64(v64, v64)) + v65 * v65;
  if (v5 <= -1.0e-24 || v5 >= 1.0e-24)
  {
    *(float64x2_t *)((char *)&v60[1] + 8) = v64;
    *((double *)&v60[2] + 1) = v65;
    v60[0] = vdivq_f64(vmulq_n_f64(v64, -v66), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0));
    *(double *)&v60[1] = -(v66 * v65) / v5;
  }
  v6 = vaddvq_f64(vmulq_f64(v61, v61)) + v62 * v62;
  if (v6 <= -1.0e-24 || v6 >= 1.0e-24)
  {
    *(float64x2_t *)((char *)&v59[1] + 8) = v61;
    *((double *)&v59[2] + 1) = v62;
    v59[0] = vdivq_f64(vmulq_n_f64(v61, -v63), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v6, 0));
    *(double *)&v59[1] = -(v63 * v62) / v6;
  }
  *((_BYTE *)this + 32) = 0;
  if (PCPlane<double>::operator==((double *)v59, (double *)v60))
    goto LABEL_11;
  v7 = (uint64_t **)(v4 + 88);
  *((_BYTE *)this + 32) = liPolygonPlaneSplit(v7, &v64, &v76, &v73, &v70, &v67, 0, (char *)this + 28, 0.1);
  v8 = *((_DWORD *)this + 7);
  if (*((_BYTE *)this + 25))
  {
    v9 = v8 + 1;
    if ((v8 + 1) <= 6 && ((0x65u >> v9) & 1) != 0)
      v8 = dword_1B355916C[v9];
    *((_DWORD *)this + 7) = v8;
  }
  if (v8 == 3)
  {
    if (!planeIntersection<double>((double *)v59, (double *)&v59[1] + 1, (double *)v60, (double *)&v60[1] + 1, (double *)this + 5, (double *)this + 8))
    {
      *((_BYTE *)this + 32) = 0;
LABEL_11:
      *((_DWORD *)this + 7) = 2;
      goto LABEL_60;
    }
    v57 = 0.0;
    v58 = 0.0;
    v11 = *(_QWORD **)(v3 + 88);
    v10 = v3 + 88;
    if ((int)((v11[1] - *v11) >> 5) < 1)
    {
      *((_BYTE *)this + 32) = liClipLineToPolygon((double *)this + 5, v7, &v58, &v57) - 1 < 3;
      if (v58 <= v57)
        v22 = v58;
      else
        v22 = v57;
      if (v58 >= v57)
        v23 = v58;
      else
        v23 = v57;
    }
    else
    {
      v54 = 0.0;
      v55 = 0.0;
      v56 = 0.0;
      v51 = 0.0;
      v52 = 0.0;
      v53 = 0.0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      __p = 0;
      v46 = 0;
      v47 = 0;
      v44 = 0;
      v12 = liPolygonPlaneSplit(v10, &v61, &v54, &v51, &v48, &__p, 0, &v44, 0.1);
      *((_BYTE *)this + 32) = v12;
      if (v12)
      {
        v13 = *((double *)this + 5);
        v14 = *((double *)this + 6);
        v15 = *((double *)this + 7);
        v16 = *((double *)this + 8);
        v17 = *((double *)this + 9);
        v18 = *((double *)this + 10);
        v19 = v16 * v16 + v17 * v17 + v18 * v18;
        v20 = ((v54 - v13) * v16 + (v55 - v14) * v17 + (v56 - v15) * v18) / v19;
        v21 = (v16 * (v51 - v13) + v17 * (v52 - v14) + v18 * (v53 - v15)) / v19;
        v57 = v21;
        v58 = v20;
        if (v20 <= v21)
          v22 = v20;
        else
          v22 = v21;
        if (v20 >= v21)
          v23 = v20;
        else
          v23 = v21;
      }
      else
      {
        v23 = 0.0;
        v22 = 1.0;
      }
      if (__p)
      {
        v46 = __p;
        operator delete(__p);
      }
      if (v48)
      {
        v49 = v48;
        operator delete(v48);
      }
    }
    v24 = *((double *)this + 5);
    v25 = *((double *)this + 6);
    v26 = *((double *)this + 7);
    v27 = *((double *)this + 8);
    v28 = *((double *)this + 9);
    v29 = *((double *)this + 10);
    v30 = v27 * v27 + v28 * v28 + v29 * v29;
    v31 = ((v76 - v24) * v27 + (v77 - v25) * v28 + (v78 - v26) * v29) / v30;
    v32 = (v27 * (v73 - v24) + v28 * (v74 - v25) + v29 * (v75 - v26)) / v30;
    v57 = v32;
    v58 = v31;
    if (v31 <= v32)
      v33 = v31;
    else
      v33 = v32;
    if (v31 >= v32)
      v32 = v31;
    if (v23 >= v22)
    {
      if (v32 >= v33)
      {
        if (v22 < v33)
          v22 = v33;
        if (v23 > v32)
          v23 = v32;
      }
      else
      {
        v23 = v32;
        v22 = v33;
      }
    }
    *((double *)this + 11) = v22;
    *((double *)this + 12) = v23;
    v34 = v23 - v22;
    if (v23 < v22)
      v34 = -1.0;
    if (v34 < 0.100000001)
    {
      *((_BYTE *)this + 32) = 0;
      *(_OWORD *)((char *)this + 88) = xmmword_1B304EED0;
    }
    v35 = 0;
    v36 = 1;
    do
    {
      v37 = v36;
      if ((v36 & 1) != 0)
        v38 = &v67;
      else
        v38 = &v70;
      v39 = (char *)this + 112 * v35;
      v40 = *((_QWORD *)this + 1);
      *((_QWORD *)v39 + 13) = *((_QWORD *)this + 2);
      *((_QWORD *)v39 + 14) = 0;
      LiShard::build((uint64_t)(v39 + 104), v7, (float64x2_t *)((char *)this + 40), (float64x2_t *)this + 4, v38, (uint64_t)&v76, (uint64_t)&v73, (double *)this + 11, v58, v57, 0.100000001, v40);
      v36 = 0;
      v35 = 1;
    }
    while ((v37 & 1) != 0);
  }
LABEL_60:
  if (v67)
  {
    v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    v71 = v70;
    operator delete(v70);
  }
}

void sub_1B2D22530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,PCString a31)
{
  _QWORD *v31;
  void *v33;
  void *v34;

  v33 = (void *)v31[20];
  if (v33)
  {
    v31[21] = v33;
    operator delete(v33);
  }
  v34 = (void *)v31[23];
  if (v34)
  {
    v31[24] = v34;
    operator delete(v34);
  }
  _Unwind_Resume(exception_object);
}

BOOL PCPlane<double>::operator==(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v6;
  double v7;
  BOOL v8;

  v2 = a1[3];
  if (v2 == a2[3]
    && (v3 = a1[4], v3 == a2[4])
    && (v4 = a1[5], v4 == a2[5])
    && ((v6 = a1[1], v7 = a2[1], *a1 == *a2) ? (v8 = v6 == v7) : (v8 = 0), !v8 || a1[2] != a2[2]))
  {
    return v2 * *a1 + v3 * v6 + v4 * a1[2] == v2 * *a2 + v3 * v7 + v4 * a2[2];
  }
  else
  {
    return 0;
  }
}

uint64_t LiPlaneSplit::store(LiPlaneSplit *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char *v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  void *v33;
  uint64_t result;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = 0;
  v38 = 0;
  v8 = *(_QWORD *)this;
  v35 = *((_QWORD *)this + 1);
  v36 = &unk_1E656EDF8;
  v39 = v8;
  switch(*((_DWORD *)this + 7))
  {
    case 0xFFFFFFFF:
      v10 = (char *)this + 328;
      v11 = *((_DWORD *)this + 85);
      if (*((_DWORD *)this + 84) <= v11)
        v12 = (2 * (v11 + 1)) | 1;
      else
        v12 = *((_DWORD *)this + 84);
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)v10, v11 + 1, v12);
      v13 = (char *)this + 340;
      v14 = *((_QWORD *)this + 2);
      v15 = (char *)this + 344;
      goto LABEL_28;
    case 1:
      v16 = (char *)this + 352;
      v17 = *((_DWORD *)this + 91);
      if (*((_DWORD *)this + 90) <= v17)
        v18 = (2 * (v17 + 1)) | 1;
      else
        v18 = *((_DWORD *)this + 90);
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)v16, v17 + 1, v18);
      v13 = (char *)this + 364;
      v14 = *((_QWORD *)this + 2);
      goto LABEL_27;
    case 2:
      v19 = (char *)this + 376;
      v20 = *((_DWORD *)this + 97);
      if (*((_DWORD *)this + 96) <= v20)
        v21 = (2 * (v20 + 1)) | 1;
      else
        v21 = *((_DWORD *)this + 96);
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)v19, v20 + 1, v21);
      v13 = (char *)this + 388;
      v14 = *((_QWORD *)this + 2);
      v15 = (char *)this + 392;
      goto LABEL_28;
    case 3:
      HIDWORD(v37) = 0;
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)&v36, 1, 3);
      v22 = HIDWORD(v37);
      *(_QWORD *)(v38 + 8 * (HIDWORD(v37) - 1)) = (char *)this + 104;
      if ((int)v37 <= v22)
        v23 = (2 * (v22 + 1)) | 1;
      else
        v23 = v37;
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)&v36, v22 + 1, v23);
      *(_QWORD *)(v38 + 8 * SHIDWORD(v37) - 8) = (char *)this + 216;
      (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)this + 2) + 80))(*((_QWORD *)this + 2), &v35);
      v24 = *((unsigned __int8 *)this + 25);
      v25 = *((_QWORD *)this + 14 * *((unsigned __int8 *)this + 25) + 14);
      if (v25)
      {
        v26 = *((_DWORD *)this + 85);
        if (*((_DWORD *)this + 84) <= v26)
          v27 = (2 * (v26 + 1)) | 1;
        else
          v27 = *((_DWORD *)this + 84);
        PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)this + 328, v26 + 1, v27);
        *(_QWORD *)(*((_QWORD *)this + 43) + 8 * *((int *)this + 85) - 8) = v25;
        v24 = *((unsigned __int8 *)this + 25);
      }
      v14 = *((_QWORD *)this + 14 * (v24 == 0) + 14);
      if (!v14)
        goto LABEL_30;
      v28 = *((_DWORD *)this + 91);
      if (*((_DWORD *)this + 90) <= v28)
        v29 = (2 * (v28 + 1)) | 1;
      else
        v29 = *((_DWORD *)this + 90);
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)this + 352, v28 + 1, v29);
      v13 = (char *)this + 364;
LABEL_27:
      v15 = (char *)this + 368;
LABEL_28:
      *(_QWORD *)(*(_QWORD *)v15 + 8 * *(int *)v13 - 8) = v14;
LABEL_30:
      v36 = &unk_1E656EE48;
      if ((int)v37 < 0)
        v30 = 1;
      else
        v30 = v37 & ~((int)v37 >> 31);
      if (v30 == (_DWORD)v37)
      {
        v31 = SHIDWORD(v37);
        if (v37 < 0)
        {
          do
            *(_QWORD *)(v38 + 8 * v31) = 0;
          while (!__CFADD__(v31++, 1));
        }
      }
      else
      {
        if (v30)
        {
          v33 = (void *)operator new[]();
          bzero(v33, 8 * v30);
        }
        else
        {
          v33 = 0;
        }
        if (v38)
          MEMORY[0x1B5E2914C](v38, 0x1000C8077774924);
        v38 = (uint64_t)v33;
      }
      v37 = v30;
      result = v38;
      if (v38)
        return MEMORY[0x1B5E2914C](v38, 0x1000C8077774924);
      return result;
    default:
      PCPrint("File %s, line %d should not have been reached:\n\t", a2, a3, a4, a5, a6, a7, a8, (char)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiPlaneSplit.cpp");
      pcAbortImpl();
  }
}

void sub_1B2D22984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  LiIntersection::~LiIntersection((LiIntersection *)va);
  _Unwind_Resume(a1);
}

void LiIntersection::~LiIntersection(LiIntersection *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *((_QWORD *)this + 1) = &unk_1E656EE48;
  v2 = *((_DWORD *)this + 4);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *((int *)this + 5);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*((_QWORD *)this + 3) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 3);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *((_QWORD *)this + 3) = v6;
  }
  *((_DWORD *)this + 4) = v3;
  *((_DWORD *)this + 5) = 0;
  v8 = *((_QWORD *)this + 3);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *((_QWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
}

uint64_t LiPlaneSplit::clear(uint64_t this)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  void *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;

  v1 = this;
  v2 = *(_DWORD *)(this + 336);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(this + 340);
    if ((v4 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*(_QWORD *)(this + 344) + 8 * v4) = 0;
        v5 = __CFADD__(v4++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    this = *(_QWORD *)(v1 + 344);
    if (this)
      this = MEMORY[0x1B5E2914C](this, 0x1000C8077774924);
    *(_QWORD *)(v1 + 344) = v6;
  }
  *(_DWORD *)(v1 + 336) = v3;
  *(_DWORD *)(v1 + 340) = 0;
  v7 = *(_DWORD *)(v1 + 384);
  if (v7 < 0)
    v8 = 1;
  else
    v8 = v7 & ~(v7 >> 31);
  if (v8 == v7)
  {
    v9 = *(int *)(v1 + 388);
    if ((v9 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*(_QWORD *)(v1 + 392) + 8 * v9) = 0;
        v5 = __CFADD__(v9++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v8)
    {
      v10 = (void *)operator new[]();
      bzero(v10, 8 * v8);
    }
    else
    {
      v10 = 0;
    }
    this = *(_QWORD *)(v1 + 392);
    if (this)
      this = MEMORY[0x1B5E2914C](this, 0x1000C8077774924);
    *(_QWORD *)(v1 + 392) = v10;
  }
  *(_DWORD *)(v1 + 384) = v8;
  *(_DWORD *)(v1 + 388) = 0;
  v11 = *(_DWORD *)(v1 + 360);
  if (v11 < 0)
    v12 = 1;
  else
    v12 = v11 & ~(v11 >> 31);
  if (v12 == v11)
  {
    v13 = *(int *)(v1 + 364);
    if ((v13 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*(_QWORD *)(v1 + 368) + 8 * v13) = 0;
        v5 = __CFADD__(v13++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v12)
    {
      v14 = (void *)operator new[]();
      bzero(v14, 8 * v12);
    }
    else
    {
      v14 = 0;
    }
    this = *(_QWORD *)(v1 + 368);
    if (this)
      this = MEMORY[0x1B5E2914C](this, 0x1000C8077774924);
    *(_QWORD *)(v1 + 368) = v14;
  }
  *(_DWORD *)(v1 + 360) = v12;
  *(_DWORD *)(v1 + 364) = 0;
  return this;
}

uint64_t PCPtrArray<LiShard>::~PCPtrArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656EE48;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void PCPtrArray<LiShard>::~PCPtrArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E656EE48;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    if ((v4 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v4) = 0;
      while (!__CFADD__(v4++, 1));
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v6;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

uint64_t LiGrid::setGeom(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 64) = a2;
  *(_DWORD *)(this + 68) = a3;
  return this;
}

void LiGrid::LiGrid(LiGrid *this)
{
  *((_QWORD *)this + 11) = &off_1E65EB048;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  LiImageSource::LiImageSource((LiImageSource *)this, (uint64_t *)&off_1E656EF58);
  *(_QWORD *)this = &off_1E656EE70;
  *((_QWORD *)this + 11) = &unk_1E656EF38;
  PCWorkingColorVector::PCWorkingColorVector((LiGrid *)((char *)this + 16), 0.4, 0.4, 0.4, 0.5);
  PCWorkingColorVector::PCWorkingColorVector((LiGrid *)((char *)this + 32), 0.6, 0.6, 0.6, 0.5);
  *((_OWORD *)this + 3) = xmmword_1B30503B0;
  *((_QWORD *)this + 8) = 0x64000001F4;
  *((_BYTE *)this + 72) = 0;
  *((_DWORD *)this + 19) = 1;
}

void sub_1B2D22F1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 88) = v3 + 16;
  *(_BYTE *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiGrid::~LiGrid(OZChannelBase *this)
{
  uint64_t v1;

  this->var0 = (void **)&off_1E656EE70;
  this->var11 = (__CFString *)&unk_1E656EF38;
  v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1E656EF58);
  *(_QWORD *)(v1 + 88) = &off_1E65EB048;
  *(_BYTE *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 96));
}

{
  uint64_t v1;

  this->var0 = (void **)&off_1E656EE70;
  this->var11 = (__CFString *)&unk_1E656EF38;
  v1 = OZChannelBase::setRangeName(this, (const PCString *)&off_1E656EF58);
  *(_QWORD *)(v1 + 88) = &off_1E65EB048;
  *(_BYTE *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 96));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiGrid::~LiGrid(LiGrid *this)
{
  OZChannelBase *v1;
  uint64_t v2;

  v1 = (OZChannelBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  v1->var0 = (void **)&off_1E656EE70;
  v1->var11 = (__CFString *)&unk_1E656EF38;
  v2 = OZChannelBase::setRangeName(v1, (const PCString *)&off_1E656EF58);
  *(_QWORD *)(v2 + 88) = &off_1E65EB048;
  *(_BYTE *)(v2 + 104) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v2 + 96));
}

{
  LiGrid::~LiGrid((OZChannelBase *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t LiGrid::setPlane(uint64_t this, int a2)
{
  *(_DWORD *)(this + 76) = a2;
  return this;
}

uint64_t LiGrid::setGroundPlane(uint64_t this, char a2)
{
  *(_BYTE *)(this + 72) = a2;
  return this;
}

uint64_t LiGrid::filteredEdges(LiGrid *this)
{
  return 1;
}

uint64_t LiGrid::getHelium@<X0>(LiGrid *this@<X0>, LiAgent *a2@<X1>, LiHeGridShader **a3@<X8>)
{
  uint64_t i;
  _OWORD *v6;
  __int128 v7;
  LiHeGridShader *v8;
  __n128 v9;
  char *v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  int v14;
  float v15;
  __n128 v16;
  uint64_t result;
  uint64_t v18;
  float v19[30];
  double v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = 0x3FF0000000000000;
  v26 = 0x3FF0000000000000;
  v23 = 0x3FF0000000000000;
  v20 = 1.0;
  v21 = 0u;
  v22 = 0u;
  v24 = 0u;
  v25 = 0u;
  v27 = 0u;
  v28 = 0u;
  LiAgent::getInversePixelTransform(a2, 0.00001, (uint64_t)&v18);
  for (i = 0; i != 32; i += 8)
  {
    v6 = (_OWORD *)((char *)&v20 + i * 4);
    v7 = *(_OWORD *)&v19[i + 2];
    *v6 = *(_OWORD *)&v19[i - 2];
    v6[1] = v7;
  }
  v8 = (LiHeGridShader *)HGObject::operator new(0x1A0uLL);
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *((_OWORD *)v8 + 3) = 0u;
  *((_OWORD *)v8 + 4) = 0u;
  *((_OWORD *)v8 + 5) = 0u;
  *((_OWORD *)v8 + 6) = 0u;
  *((_OWORD *)v8 + 7) = 0u;
  *((_OWORD *)v8 + 8) = 0u;
  *((_OWORD *)v8 + 9) = 0u;
  *((_OWORD *)v8 + 10) = 0u;
  *((_OWORD *)v8 + 11) = 0u;
  *((_OWORD *)v8 + 12) = 0u;
  *((_OWORD *)v8 + 13) = 0u;
  *((_OWORD *)v8 + 14) = 0u;
  *((_OWORD *)v8 + 15) = 0u;
  *((_OWORD *)v8 + 16) = 0u;
  *((_OWORD *)v8 + 17) = 0u;
  *((_OWORD *)v8 + 18) = 0u;
  *((_OWORD *)v8 + 19) = 0u;
  *((_OWORD *)v8 + 20) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  *((_OWORD *)v8 + 22) = 0u;
  *((_OWORD *)v8 + 23) = 0u;
  *((_OWORD *)v8 + 24) = 0u;
  *((_OWORD *)v8 + 25) = 0u;
  LiHeGridShader::LiHeGridShader(v8);
  *(_QWORD *)v8 = &unk_1E656F100;
  v9.n128_f32[0] = (float)*((int *)this + 16);
  LiHeGridShader::SetParameter(v8, 0, v9, 0.0, 0.0, 0.0, v10);
  (*(void (**)(LiHeGridShader *, uint64_t, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 1, (float)*((int *)this + 17), 0.0, 0.0, 0.0);
  (*(void (**)(LiHeGridShader *, uint64_t, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 9, 1.0, 0.0, 0.0, 0.0);
  v18 = 0;
  *(_QWORD *)v19 = 0;
  PCWorkingColor::getRGBA((LiGrid *)((char *)this + 32), (float *)&v18, (float *)&v18 + 1, v19, &v19[1]);
  *(float *)&v18 = v19[1] * *(float *)&v18;
  *((float *)&v18 + 1) = v19[1] * *((float *)&v18 + 1);
  v19[0] = v19[1] * v19[0];
  (*(void (**)(LiHeGridShader *, uint64_t))(*(_QWORD *)v8 + 96))(v8, 2);
  PCWorkingColor::getRGBA((LiGrid *)((char *)this + 16), (float *)&v18, (float *)&v18 + 1, v19, &v19[1]);
  *(float *)&v18 = v19[1] * *(float *)&v18;
  *((float *)&v18 + 1) = v19[1] * *((float *)&v18 + 1);
  v19[0] = v19[1] * v19[0];
  (*(void (**)(LiHeGridShader *, uint64_t))(*(_QWORD *)v8 + 96))(v8, 3);
  v14 = *((_DWORD *)this + 19);
  v15 = 0.49;
  switch(v14)
  {
    case 0:
      v13.n128_u32[0] = 1015840296;
      v12.n128_u32[0] = 1022416964;
      v11.n128_u32[0] = 1056629064;
      goto LABEL_8;
    case 1:
      (*(void (**)(LiHeGridShader *, uint64_t, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 4, 0.49, 0.0294, 0.01715, 0.245);
      v16.n128_u32[0] = 1058852045;
      v15 = 0.06125;
      goto LABEL_10;
    case 2:
      v13.n128_u32[0] = 1058852045;
      v12.n128_u32[0] = 1031463240;
      v11.n128_u32[0] = 1019786298;
LABEL_8:
      (*(void (**)(LiHeGridShader *, uint64_t, __n128, __n128, __n128, float))(*(_QWORD *)v8 + 96))(v8, 4, v11, v12, v13, 0.245);
      v16.n128_u32[0] = 1038536514;
LABEL_10:
      (*(void (**)(LiHeGridShader *, uint64_t, float, float, __n128, float))(*(_QWORD *)v8 + 96))(v8, 5, 0.0245, v15, v16, 0.245);
      break;
  }
  LiHeGrid::setInversePixelTransform((uint64_t)v8, &v20);
  result = (*(uint64_t (**)(LiHeGridShader *, uint64_t, float, float, float, float))(*(_QWORD *)v8 + 96))(v8, 10, 1.0, 0.0, 0.0, 0.0);
  *a3 = v8;
  return result;
}

void sub_1B2D233BC(_Unwind_Exception *a1)
{
  void *v1;

  HGObject::operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t LiHeGrid::setInversePixelTransform(uint64_t a1, double *a2)
{
  float v4;
  float v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  float v10;
  unsigned int v11;
  float v12;
  float v13;
  float v14;
  uint64_t result;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[3];
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 6, v4, v5, 0.0, v6);
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[7];
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 7, v8, v9, 0.0, v10);
  if (v11)
    v7 = v11;
  v12 = a2[12];
  v13 = a2[13];
  v14 = a2[15];
  LODWORD(result) = (*(uint64_t (**)(uint64_t, uint64_t, float, float, float, float))(*(_QWORD *)a1 + 96))(a1, 8, v12, v13, 0.0, v14);
  if ((_DWORD)result)
    return result;
  else
    return v7;
}

uint64_t LiGrid::estimateRenderMemory()
{
  return 0;
}

void LiHeGrid::~LiHeGrid(HGNode *this)
{
  void *v1;

  LiHeGridShader::~LiHeGridShader(this);
  HGObject::operator delete(v1);
}

BOOL ProShade::isZero(uint64_t a1)
{
  const void *v1;
  OZChannelBase *v2;
  const PCString *v3;
  PCArray_base *v4;
  uint64_t v5;
  BOOL v6;
  PCArray_base *v7;
  uint64_t v8;
  PCArray_base *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unsigned int v13;
  _BYTE *v14;
  char *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  void *v19;
  void *v21;
  uint64_t v22;
  _BYTE *v23;

  v1 = *(const void **)(a1 + 16);
  if (v1
  {
    switch(v2->var3)
    {
      case 0u:
        ProShade::Error<PCIllegalArgumentException>::raise(v2, v3);
      case 1u:
        v22 = 0;
        v23 = 0;
        v21 = &unk_1E656FB60;
        v4 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, void **))v2->var0 + 25))(v2, &v21);
        if (SHIDWORD(v22) < 1)
        {
          v6 = 1;
        }
        else
        {
          v5 = 0;
          v6 = 0;
          do
          {
            if (v5 >= SHIDWORD(v22))
              PCArray_base::badIndex(v4);
            if (v23[v5])
              break;
            v6 = ++v5 >= (unint64_t)HIDWORD(v22);
          }
          while (HIDWORD(v22) != v5);
        }
        v21 = &unk_1E656FB60;
        if ((int)v22 < 0)
          v11 = 1;
        else
          v11 = v22 & ~((int)v22 >> 31);
        if ((_DWORD)v11 == (_DWORD)v22)
        {
          v12 = v23;
          if (v22 < 0)
            bzero(&v23[SHIDWORD(v22)], ~HIDWORD(v22) + 1);
        }
        else
        {
          if ((_DWORD)v11)
          {
            v12 = (void *)operator new[]();
            bzero(v12, v11);
          }
          else
          {
            v12 = 0;
          }
          if (v23)
            MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
          v23 = v12;
        }
        v22 = v11;
        if (!v12)
          return v6;
        v19 = v12;
        goto LABEL_67;
      case 2u:
        v22 = 0;
        v23 = 0;
        v21 = &unk_1E64FC288;
        v7 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, void **))v2->var0 + 26))(v2, &v21);
        if (SHIDWORD(v22) < 1)
        {
          v6 = 1;
        }
        else
        {
          v8 = 0;
          v6 = 0;
          do
          {
            if (v8 >= SHIDWORD(v22))
              PCArray_base::badIndex(v7);
            if (*(_DWORD *)&v23[4 * v8])
              break;
            v6 = ++v8 >= (unint64_t)HIDWORD(v22);
          }
          while (HIDWORD(v22) != v8);
        }
        v21 = &unk_1E64FC288;
        if ((int)v22 < 0)
          v13 = 1;
        else
          v13 = v22 & ~((int)v22 >> 31);
        if (v13 == (_DWORD)v22)
        {
          v14 = v23;
          if ((v22 & 0x8000000000000000) == 0)
            goto LABEL_59;
          v15 = &v23[4 * SHIDWORD(v22)];
          v16 = 4 * ~HIDWORD(v22) + 4;
          goto LABEL_51;
        }
        if (!v13)
          goto LABEL_55;
        v17 = 4 * v13;
        v18 = (_BYTE *)operator new[]();
        goto LABEL_54;
      case 3u:
        v22 = 0;
        v23 = 0;
        v21 = &unk_1E656FB28;
        v9 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, void **))v2->var0 + 27))(v2, &v21);
        if (SHIDWORD(v22) < 1)
        {
          v6 = 1;
        }
        else
        {
          v10 = 0;
          v6 = 0;
          do
          {
            if (v10 >= SHIDWORD(v22))
              PCArray_base::badIndex(v9);
            if (*(double *)&v23[8 * v10] != 0.0)
              break;
            v6 = ++v10 >= (unint64_t)HIDWORD(v22);
          }
          while (HIDWORD(v22) != v10);
        }
        v21 = &unk_1E656FB28;
        if ((int)v22 < 0)
          v13 = 1;
        else
          v13 = v22 & ~((int)v22 >> 31);
        if (v13 == (_DWORD)v22)
        {
          v14 = v23;
          if (v22 < 0)
          {
            v15 = &v23[8 * SHIDWORD(v22)];
            v16 = 8 * ~HIDWORD(v22) + 8;
LABEL_51:
            bzero(v15, v16);
          }
        }
        else
        {
          if (v13)
          {
            v17 = 8 * v13;
            v18 = (_BYTE *)operator new[]();
LABEL_54:
            v14 = v18;
            bzero(v18, v17);
          }
          else
          {
LABEL_55:
            v14 = 0;
          }
          if (v23)
            MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
          v23 = v14;
        }
LABEL_59:
        v22 = v13;
        if (v14)
        {
          v19 = v14;
LABEL_67:
          MEMORY[0x1B5E2914C](v19, 0x1000C8077774924);
        }
        break;
      default:
        return 0;
    }
  }
  else
  {
    return 0;
  }
  return v6;
}

void sub_1B2D2388C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t PCArray<BOOL,PCArray_Traits<BOOL>>::~PCArray(uint64_t a1)
{
  int v2;
  size_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E656FB60;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if ((_DWORD)v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    v5 = *(char **)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
      bzero(&v5[v4], ~(_DWORD)v4 + 1);
  }
  else
  {
    if ((_DWORD)v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, v3);
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

uint64_t PCArray<double,PCArray_Traits<double>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E656FB28;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    v5 = *(char **)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
      bzero(&v5[8 * v4], 8 * ~(_DWORD)v4 + 8);
  }
  else
  {
    if (v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, 8 * v3);
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

BOOL ProShade::isOne(uint64_t a1)
{
  const void *v1;
  OZChannelBase *v2;
  const PCString *v3;
  PCArray_base *v4;
  uint64_t v5;
  BOOL v6;
  PCArray_base *v7;
  uint64_t v8;
  PCArray_base *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unsigned int v13;
  _BYTE *v14;
  char *v15;
  size_t v16;
  size_t v17;
  _BYTE *v18;
  void *v19;
  void *v21;
  uint64_t v22;
  _BYTE *v23;

  v1 = *(const void **)(a1 + 16);
  if (v1
  {
    switch(v2->var3)
    {
      case 0u:
        ProShade::Error<PCIllegalArgumentException>::raise(v2, v3);
      case 1u:
        v22 = 0;
        v23 = 0;
        v21 = &unk_1E656FB60;
        v4 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, void **))v2->var0 + 25))(v2, &v21);
        if (SHIDWORD(v22) < 1)
        {
          v6 = 1;
        }
        else
        {
          v5 = 0;
          v6 = 0;
          do
          {
            if (v5 >= SHIDWORD(v22))
              PCArray_base::badIndex(v4);
            if (!v23[v5])
              break;
            v6 = ++v5 >= (unint64_t)HIDWORD(v22);
          }
          while (HIDWORD(v22) != v5);
        }
        v21 = &unk_1E656FB60;
        if ((int)v22 < 0)
          v11 = 1;
        else
          v11 = v22 & ~((int)v22 >> 31);
        if ((_DWORD)v11 == (_DWORD)v22)
        {
          v12 = v23;
          if (v22 < 0)
            bzero(&v23[SHIDWORD(v22)], ~HIDWORD(v22) + 1);
        }
        else
        {
          if ((_DWORD)v11)
          {
            v12 = (void *)operator new[]();
            bzero(v12, v11);
          }
          else
          {
            v12 = 0;
          }
          if (v23)
            MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
          v23 = v12;
        }
        v22 = v11;
        if (!v12)
          return v6;
        v19 = v12;
        goto LABEL_67;
      case 2u:
        v22 = 0;
        v23 = 0;
        v21 = &unk_1E64FC288;
        v7 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, void **))v2->var0 + 26))(v2, &v21);
        if (SHIDWORD(v22) < 1)
        {
          v6 = 1;
        }
        else
        {
          v8 = 0;
          v6 = 0;
          do
          {
            if (v8 >= SHIDWORD(v22))
              PCArray_base::badIndex(v7);
            if (*(_DWORD *)&v23[4 * v8] != 1)
              break;
            v6 = ++v8 >= (unint64_t)HIDWORD(v22);
          }
          while (HIDWORD(v22) != v8);
        }
        v21 = &unk_1E64FC288;
        if ((int)v22 < 0)
          v13 = 1;
        else
          v13 = v22 & ~((int)v22 >> 31);
        if (v13 == (_DWORD)v22)
        {
          v14 = v23;
          if ((v22 & 0x8000000000000000) == 0)
            goto LABEL_59;
          v15 = &v23[4 * SHIDWORD(v22)];
          v16 = 4 * ~HIDWORD(v22) + 4;
          goto LABEL_51;
        }
        if (!v13)
          goto LABEL_55;
        v17 = 4 * v13;
        v18 = (_BYTE *)operator new[]();
        goto LABEL_54;
      case 3u:
        v22 = 0;
        v23 = 0;
        v21 = &unk_1E656FB28;
        v9 = (PCArray_base *)(*((uint64_t (**)(OZChannelBase *, void **))v2->var0 + 27))(v2, &v21);
        if (SHIDWORD(v22) < 1)
        {
          v6 = 1;
        }
        else
        {
          v10 = 0;
          v6 = 0;
          do
          {
            if (v10 >= SHIDWORD(v22))
              PCArray_base::badIndex(v9);
            if (*(double *)&v23[8 * v10] != 1.0)
              break;
            v6 = ++v10 >= (unint64_t)HIDWORD(v22);
          }
          while (HIDWORD(v22) != v10);
        }
        v21 = &unk_1E656FB28;
        if ((int)v22 < 0)
          v13 = 1;
        else
          v13 = v22 & ~((int)v22 >> 31);
        if (v13 == (_DWORD)v22)
        {
          v14 = v23;
          if (v22 < 0)
          {
            v15 = &v23[8 * SHIDWORD(v22)];
            v16 = 8 * ~HIDWORD(v22) + 8;
LABEL_51:
            bzero(v15, v16);
          }
        }
        else
        {
          if (v13)
          {
            v17 = 8 * v13;
            v18 = (_BYTE *)operator new[]();
LABEL_54:
            v14 = v18;
            bzero(v18, v17);
          }
          else
          {
LABEL_55:
            v14 = 0;
          }
          if (v23)
            MEMORY[0x1B5E2914C](v23, 0x1000C8077774924);
          v23 = v14;
        }
LABEL_59:
        v22 = v13;
        if (v14)
        {
          v19 = v14;
LABEL_67:
          MEMORY[0x1B5E2914C](v19, 0x1000C8077774924);
        }
        break;
      default:
        return 0;
    }
  }
  else
  {
    return 0;
  }
  return v6;
}

void sub_1B2D23E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProShade::UnaryOp<ProShade::Negate>::unary(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  const void *v4;
  _DWORD *v5;
  PC_Sp_counted_base *v6;
  PCSharedCount v7;
  PCSharedCount v8;
  PCSharedCount v9;

  v4 = *(const void **)(a1 + 16);
  if (v4
  {
    ProShade::UnaryOp<ProShade::Negate>::computeUnary(v5, &v7);
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2 + 2, &v8);
    v7.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
    PCSharedCount::~PCSharedCount(&v9);
  }
  else
  {
    v6 = (PC_Sp_counted_base *)operator new();
    ProShade::UnaryOp<ProShade::Negate>::UnaryOp((uint64_t)v6, *(_QWORD **)(a1 + 16));
    a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a2[2].var0 = v6;
    PCSharedCount::PCSharedCount(a2 + 3, (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  }
}

void sub_1B2D23F8C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

void ProShade::BinaryOp<ProShade::Add>::binary(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  void *v10;
  const ProShade::Value *v11;
  ProShade::ConstVector *v12;
  PCShared_base *v13;
  __CFString *v14;
  uint64_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  _QWORD v18[3];
  PCSharedCount v19[15];
  PCString v20[3];
  PCSharedCount v21[15];
  PCString v22;
  char v23;
  uint64_t v24;
  PCSharedCount v25[16];

  v25[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::Value::Value(&v22);
    ProShade::Value::Value(v20);
    ProShade::Value::Value(v18);
    (*(void (**)(void *, PCString *))(*(_QWORD *)v7 + 224))(v7, &v22);
    (*(void (**)(void *, PCString *))(*(_QWORD *)v10 + 224))(v10, v20);
    ProShade::BinaryOp<ProShade::Add>::computeBinary(&v22, v20, (uint64_t)v18);
    v12 = ProShade::Const::create((ProShade::Const *)v18, v11);
    *(_QWORD *)a3 = &unk_1E6569AC8;
    *(_QWORD *)(a3 + 16) = v12;
    if (v12)
      v13 = (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24));
    else
      v13 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), v13);
  }
  else
  {
    v22.var0 = (__CFString *)&unk_1E6569AC8;
    v24 = 0;
    PCSharedCount::PCSharedCount(v25);
    v14 = *(__CFString **)(a1 + 16);
    v20[0].var0 = (__CFString *)&unk_1E6569AC8;
    v20[2].var0 = v14;
    PCSharedCount::PCSharedCount(v21, (const PCSharedCount *)(a1 + 24));
    v15 = *(_QWORD *)(a2 + 16);
    v18[0] = &unk_1E6569AC8;
    v18[2] = v15;
    PCSharedCount::PCSharedCount(v19, (const PCSharedCount *)(a2 + 24));
    v16 = ProShade::Add::simplify((uint64_t)v20, (uint64_t)v18, (uint64_t)&v22);
    v18[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v19);
    v20[0].var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v21);
    if (v16)
    {
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_BYTE *)(a3 + 8) = v23;
      *(_QWORD *)(a3 + 16) = v24;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), v25);
    }
    else
    {
      v17 = (_QWORD *)operator new();
      ProShade::BinaryOp<ProShade::Add>::BinaryOp((uint64_t)v17, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_QWORD *)(a3 + 16) = v17;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), (PCShared_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    }
    v22.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v25);
  }
}

void sub_1B2D2424C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1B5E29170](v2, 0x10B1C403815D87CLL);
  *(_QWORD *)(v4 - 232) = v3 + 16;
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::BinaryOp<ProShade::Subtract>::binary(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  void *v10;
  const ProShade::Value *v11;
  ProShade::ConstVector *v12;
  PCShared_base *v13;
  __CFString *v14;
  uint64_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  _QWORD v18[3];
  PCSharedCount v19[15];
  PCString v20[3];
  PCSharedCount v21[15];
  PCString v22;
  char v23;
  uint64_t v24;
  PCSharedCount v25[16];

  v25[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::Value::Value(&v22);
    ProShade::Value::Value(v20);
    ProShade::Value::Value(v18);
    (*(void (**)(void *, PCString *))(*(_QWORD *)v7 + 224))(v7, &v22);
    (*(void (**)(void *, PCString *))(*(_QWORD *)v10 + 224))(v10, v20);
    ProShade::BinaryOp<ProShade::Subtract>::computeBinary(&v22, v20, (uint64_t)v18);
    v12 = ProShade::Const::create((ProShade::Const *)v18, v11);
    *(_QWORD *)a3 = &unk_1E6569AC8;
    *(_QWORD *)(a3 + 16) = v12;
    if (v12)
      v13 = (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24));
    else
      v13 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), v13);
  }
  else
  {
    v22.var0 = (__CFString *)&unk_1E6569AC8;
    v24 = 0;
    PCSharedCount::PCSharedCount(v25);
    v14 = *(__CFString **)(a1 + 16);
    v20[0].var0 = (__CFString *)&unk_1E6569AC8;
    v20[2].var0 = v14;
    PCSharedCount::PCSharedCount(v21, (const PCSharedCount *)(a1 + 24));
    v15 = *(_QWORD *)(a2 + 16);
    v18[0] = &unk_1E6569AC8;
    v18[2] = v15;
    PCSharedCount::PCSharedCount(v19, (const PCSharedCount *)(a2 + 24));
    v16 = ProShade::Subtract::simplify((const PCSharedCount *)v20, (uint64_t)v18, (uint64_t)&v22);
    v18[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v19);
    v20[0].var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v21);
    if (v16)
    {
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_BYTE *)(a3 + 8) = v23;
      *(_QWORD *)(a3 + 16) = v24;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), v25);
    }
    else
    {
      v17 = (_QWORD *)operator new();
      ProShade::BinaryOp<ProShade::Subtract>::BinaryOp((uint64_t)v17, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_QWORD *)(a3 + 16) = v17;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), (PCShared_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    }
    v22.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v25);
  }
}

void sub_1B2D24540(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1B5E29170](v2, 0x10B1C403815D87CLL);
  *(_QWORD *)(v4 - 232) = v3 + 16;
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::BinaryOp<ProShade::Multiply>::binary(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  void *v10;
  const ProShade::Value *v11;
  ProShade::ConstVector *v12;
  PCShared_base *v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  _QWORD v18[3];
  PCSharedCount v19[15];
  _QWORD v20[3];
  PCSharedCount v21[15];
  void *v22;
  char v23;
  uint64_t v24;
  PCSharedCount v25[16];

  v25[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::Value::Value(&v22);
    ProShade::Value::Value(v20);
    ProShade::Value::Value(v18);
    (*(void (**)(void *, void **))(*(_QWORD *)v7 + 224))(v7, &v22);
    (*(void (**)(void *, _QWORD *))(*(_QWORD *)v10 + 224))(v10, v20);
    ProShade::BinaryOp<ProShade::Multiply>::computeBinary((unsigned int *)&v22, (unsigned int *)v20, (uint64_t)v18);
    v12 = ProShade::Const::create((ProShade::Const *)v18, v11);
    *(_QWORD *)a3 = &unk_1E6569AC8;
    *(_QWORD *)(a3 + 16) = v12;
    if (v12)
      v13 = (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24));
    else
      v13 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), v13);
  }
  else
  {
    v22 = &unk_1E6569AC8;
    v24 = 0;
    PCSharedCount::PCSharedCount(v25);
    v14 = *(_QWORD *)(a1 + 16);
    v20[0] = &unk_1E6569AC8;
    v20[2] = v14;
    PCSharedCount::PCSharedCount(v21, (const PCSharedCount *)(a1 + 24));
    v15 = *(_QWORD *)(a2 + 16);
    v18[0] = &unk_1E6569AC8;
    v18[2] = v15;
    PCSharedCount::PCSharedCount(v19, (const PCSharedCount *)(a2 + 24));
    v16 = ProShade::Multiply::simplify((uint64_t)v20, (uint64_t)v18, (uint64_t)&v22);
    v18[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v19);
    v20[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v21);
    if (v16)
    {
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_BYTE *)(a3 + 8) = v23;
      *(_QWORD *)(a3 + 16) = v24;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), v25);
    }
    else
    {
      v17 = (_QWORD *)operator new();
      ProShade::BinaryOp<ProShade::Multiply>::BinaryOp((uint64_t)v17, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_QWORD *)(a3 + 16) = v17;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), (PCShared_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    }
    v22 = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v25);
  }
}

void sub_1B2D24834(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1B5E29170](v2, 0x10B1C403815D87CLL);
  *(_QWORD *)(v4 - 232) = v3 + 16;
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::BinaryOp<ProShade::Divide>::binary(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  void *v10;
  const ProShade::Value *v11;
  ProShade::ConstVector *v12;
  PCShared_base *v13;
  __CFString *v14;
  uint64_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  _QWORD v18[3];
  PCSharedCount v19[15];
  PCString v20[3];
  PCSharedCount v21[15];
  PCString v22;
  char v23;
  uint64_t v24;
  PCSharedCount v25[16];

  v25[15] = *(PCSharedCount *)MEMORY[0x1E0C80C00];
  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::Value::Value(&v22);
    ProShade::Value::Value(v20);
    ProShade::Value::Value(v18);
    (*(void (**)(void *, PCString *))(*(_QWORD *)v7 + 224))(v7, &v22);
    (*(void (**)(void *, PCString *))(*(_QWORD *)v10 + 224))(v10, v20);
    ProShade::BinaryOp<ProShade::Divide>::computeBinary(&v22, v20, (uint64_t)v18);
    v12 = ProShade::Const::create((ProShade::Const *)v18, v11);
    *(_QWORD *)a3 = &unk_1E6569AC8;
    *(_QWORD *)(a3 + 16) = v12;
    if (v12)
      v13 = (ProShade::ConstVector *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24));
    else
      v13 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), v13);
  }
  else
  {
    v22.var0 = (__CFString *)&unk_1E6569AC8;
    v24 = 0;
    PCSharedCount::PCSharedCount(v25);
    v14 = *(__CFString **)(a1 + 16);
    v20[0].var0 = (__CFString *)&unk_1E6569AC8;
    v20[2].var0 = v14;
    PCSharedCount::PCSharedCount(v21, (const PCSharedCount *)(a1 + 24));
    v15 = *(_QWORD *)(a2 + 16);
    v18[0] = &unk_1E6569AC8;
    v18[2] = v15;
    PCSharedCount::PCSharedCount(v19, (const PCSharedCount *)(a2 + 24));
    v16 = ProShade::Divide::simplify((const PCSharedCount *)v20, (uint64_t)v18, (uint64_t)&v22);
    v18[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v19);
    v20[0].var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v21);
    if (v16)
    {
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_BYTE *)(a3 + 8) = v23;
      *(_QWORD *)(a3 + 16) = v24;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), v25);
    }
    else
    {
      v17 = (_QWORD *)operator new();
      ProShade::BinaryOp<ProShade::Divide>::BinaryOp((uint64_t)v17, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
      *(_QWORD *)a3 = &unk_1E6569AC8;
      *(_QWORD *)(a3 + 16) = v17;
      PCSharedCount::PCSharedCount((PCSharedCount *)(a3 + 24), (PCShared_base *)((char *)v17 + *(_QWORD *)(*v17 - 24)));
    }
    v22.var0 = (__CFString *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(v25);
  }
}

void sub_1B2D24B28(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1B5E29170](v2, 0x10B1C403815D87CLL);
  *(_QWORD *)(v4 - 232) = v3 + 16;
  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::operator==(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  PC_Sp_counted_base *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  PCSharedCount v10;
  _QWORD v11[3];
  PCSharedCount v12;

  if (ProShade::VarT<ProShade::Node>::width(a1, (const PCString *)a2) == 1)
  {
    v6 = (PC_Sp_counted_base *)operator new();
    ProShade::BinaryOp<ProShade::Equals>::BinaryOp((uint64_t)v6, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v6;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v11[0] = &unk_1E6569AC8;
    v11[2] = v7;
    PCSharedCount::PCSharedCount(&v12, (const PCSharedCount *)(a1 + 24));
    v8 = *(_QWORD *)(a2 + 16);
    v9[0] = &unk_1E6569AC8;
    v9[2] = v8;
    PCSharedCount::PCSharedCount(&v10, (const PCSharedCount *)(a2 + 24));
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::eval((uint64_t)v11, (uint64_t)v9, a3);
    v9[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v10);
    v11[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v12);
  }
}

void sub_1B2D24CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  PCSharedCount *v13;
  PCSharedCount *v14;

  PCSharedCount::~PCSharedCount(v14);
  PCSharedCount::~PCSharedCount(v13);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Equals>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCShared_base *v6;
  PCShared_base *v7;
  const PCString *v8;
  int v9;
  int v10;
  BOOL v11;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65708D0);
  *(_QWORD *)a1 = &unk_1E65707F8;
  *(_QWORD *)(a1 + 112) = &unk_1E65708B0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v6 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v6);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v7 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v7 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v7);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a3 + 28);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      v10 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v11 = v9 == v10;
      v10 = *(_DWORD *)(a2 + 28);
      if (!v11)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
    }
  }
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v10;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D24E58(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::operator>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  PC_Sp_counted_base *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  PCSharedCount v10;
  _QWORD v11[3];
  PCSharedCount v12;

  if (ProShade::VarT<ProShade::Node>::width(a1, (const PCString *)a2) == 1)
  {
    v6 = (PC_Sp_counted_base *)operator new();
    ProShade::BinaryOp<ProShade::GreaterThan>::BinaryOp((uint64_t)v6, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v6;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v11[0] = &unk_1E6569AC8;
    v11[2] = v7;
    PCSharedCount::PCSharedCount(&v12, (const PCSharedCount *)(a1 + 24));
    v8 = *(_QWORD *)(a2 + 16);
    v9[0] = &unk_1E6569AC8;
    v9[2] = v8;
    PCSharedCount::PCSharedCount(&v10, (const PCSharedCount *)(a2 + 24));
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::eval((uint64_t)v11, (uint64_t)v9, a3);
    v9[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v10);
    v11[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v12);
  }
}

void sub_1B2D24FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  PCSharedCount *v13;
  PCSharedCount *v14;

  PCSharedCount::~PCSharedCount(v14);
  PCSharedCount::~PCSharedCount(v13);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::GreaterThan>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCShared_base *v6;
  PCShared_base *v7;
  const PCString *v8;
  int v9;
  int v10;
  BOOL v11;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570B48);
  *(_QWORD *)a1 = &unk_1E6570A70;
  *(_QWORD *)(a1 + 112) = &unk_1E6570B28;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v6 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v6);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v7 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v7 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v7);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a3 + 28);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      v10 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v11 = v9 == v10;
      v10 = *(_DWORD *)(a2 + 28);
      if (!v11)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
    }
  }
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v10;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D25174(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::operator<=(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  PC_Sp_counted_base *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  PCSharedCount v10;
  _QWORD v11[3];
  PCSharedCount v12;

  if (ProShade::VarT<ProShade::Node>::width(a1, (const PCString *)a2) == 1)
  {
    v6 = (PC_Sp_counted_base *)operator new();
    ProShade::BinaryOp<ProShade::LessThanEquals>::BinaryOp((uint64_t)v6, *(_QWORD *)(a1 + 16), *(_QWORD *)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v6;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v6 + *(_QWORD *)(*(_QWORD *)v6 - 24)));
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    v11[0] = &unk_1E6569AC8;
    v11[2] = v7;
    PCSharedCount::PCSharedCount(&v12, (const PCSharedCount *)(a1 + 24));
    v8 = *(_QWORD *)(a2 + 16);
    v9[0] = &unk_1E6569AC8;
    v9[2] = v8;
    PCSharedCount::PCSharedCount(&v10, (const PCSharedCount *)(a2 + 24));
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::eval((uint64_t)v11, (uint64_t)v9, a3);
    v9[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v10);
    v11[0] = &unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v12);
  }
}

void sub_1B2D252FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  PCSharedCount *v13;
  PCSharedCount *v14;

  PCSharedCount::~PCSharedCount(v14);
  PCSharedCount::~PCSharedCount(v13);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::LessThanEquals>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCShared_base *v6;
  PCShared_base *v7;
  const PCString *v8;
  int v9;
  int v10;
  BOOL v11;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570DC0);
  *(_QWORD *)a1 = &unk_1E6570CE8;
  *(_QWORD *)(a1 + 112) = &unk_1E6570DA0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v6 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v6);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v7 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v7 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v7);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a3 + 28);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      v10 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v11 = v9 == v10;
      v10 = *(_DWORD *)(a2 + 28);
      if (!v11)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
    }
  }
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v10;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D25490(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;

  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::compute((uint64_t)v7, (uint64_t)v9, &v11);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3 + 2, &v12);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(&v13);
    v10 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::Func((uint64_t)v10, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v10;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2D25644(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  int v6;
  const ProShade::Value *v7;
  ProShade::ConstVector *v8;
  PCShared_base *v9;
  OZChannelBase v11;
  _QWORD v12[18];
  _QWORD v13[19];

  v13[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v13);
  ProShade::Value::Value(v12);
  ProShade::Value::Value(&v11);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v13);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v12);
  if (SLODWORD(v13[0]) > 1)
  {
    if (LODWORD(v13[0]) != 2)
      goto LABEL_8;
    v6 = v12[0];
  }
  else
  {
    v6 = v12[0];
    if (SLODWORD(v12[0]) < 2)
    {
      ProShade::eval_type<ProShade::equal_traits,BOOL>((uint64_t)v13, (uint64_t)v12, &v11);
      goto LABEL_9;
    }
  }
  if (v6 <= 2)
  {
    ProShade::eval_type<ProShade::equal_traits,int>((uint64_t)v13, (uint64_t)v12, &v11);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::equal_traits,double>((uint64_t)v13, (uint64_t)v12, &v11);
LABEL_9:
  v8 = ProShade::Const::create((ProShade::Const *)&v11, v7);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = (PC_Sp_counted_base *)v8;
  if (v8)
    v9 = (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
  else
    v9 = 0;
  return PCSharedCount::PCSharedCount(a3 + 3, v9);
}

PCSharedCount *ProShade::VarT<ProShade::Const>::~VarT(PCSharedCount *a1)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  PCSharedCount::~PCSharedCount(a1 + 3);
  return a1;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  PCSharedCount v14[2];
  _QWORD *v15;
  PCSharedCount v16;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656F4A0);
  *(_QWORD *)a1 = &unk_1E656F3C8;
  *(_QWORD *)(a1 + 72) = &unk_1E656F480;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a2;
  PCSharedCount::PCSharedCount(&v16, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v16, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D25A1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::equal_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  BOOL v12;
  int v13;
  PCException *exception;
  PCString v15;
  PCString v16;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "not implemented yet");
    PCString::PCString(&v15, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v16, &v15, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (unsigned __int8 *)(a2 + 16);
    v10 = (unsigned __int8 *)(a1 + 16);
    do
    {
      v11 = *v10++;
      v12 = v11 == 0;
      v13 = *v9++;
      *(_BYTE *)Serializer = v12 ^ (v13 != 0);
      Serializer = (void ***)((char *)Serializer + 1);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D25B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::equal_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  PCException *exception;
  PCString v15;
  PCString v16;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "not implemented yet");
    PCString::PCString(&v15, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v16, &v15, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (int *)(a2 + 16);
    v10 = (int *)(a1 + 16);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = *v9++;
      *(_BYTE *)Serializer = v11 == v13;
      Serializer = (void ***)((char *)Serializer + 1);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D25CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::equal_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  PCException *exception;
  PCString v15;
  PCString v16;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "not implemented yet");
    PCString::PCString(&v15, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v16, &v15, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (double *)(a2 + 16);
    v10 = (double *)(a1 + 16);
    do
    {
      v11 = *v10++;
      v12 = v11;
      v13 = *v9++;
      *(_BYTE *)Serializer = v12 == v13;
      Serializer = (void ***)((char *)Serializer + 1);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D25E20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ProShade::VarT<ProShade::Const>::~VarT(PCSharedCount *a1)
{
  a1->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  PCSharedCount::~PCSharedCount(a1 + 3);
  JUMPOUT(0x1B5E29170);
}

void ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(uint64_t a1, const PCString *a2, const PCSharedCount *a3)
{
  __CFString *var0;
  int length_high;
  _DWORD *v8;
  unsigned int v9;
  const PCString *Width;
  const PCString *v11;
  int v12;
  const PCString *v13;
  __CFString *v14;
  int v15;
  PC_Sp_counted_base *v16;
  int v17;
  __CFString *v18;
  int length;
  PC_Sp_counted_base *v20;
  int v21;
  PCSharedCount v22[3];
  PCSharedCount v23;

  var0 = a2[2].var0;
  if (!var0)
    throw_PCNullPointerException(1);
  length_high = HIDWORD(var0->length);
  v8 = a3[2].var0;
  if (!v8)
    throw_PCNullPointerException(1);
  if (length_high > v8[7])
  {
    v8 = a2[2].var0;
    if (!v8)
      throw_PCNullPointerException(1);
  }
  v9 = v8[7];
  *(_DWORD *)(a1 + 28) = v9;
  Width = (const PCString *)ProShade::shapeGetWidth(v9, a2);
  v12 = *(_DWORD *)(a1 + 28);
  if (v12 >= 2)
  {
    v13 = Width;
    v14 = a2[2].var0;
    if (!v14)
      throw_PCNullPointerException(1);
    v15 = HIDWORD(v14->length);
    if (v15 < v12)
    {
      if (v15 != 1)
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"width mismatch (first argument)", v11);
      ProShade::Ctor::makeWidth(v14->length, Width, (const PCSharedCount *)a2, v22);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a2, v22);
      v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v23);
    }
    v16 = a3[2].var0;
    if (!v16)
      throw_PCNullPointerException(1);
    v17 = *((_DWORD *)v16 + 7);
    if (v17 < *(_DWORD *)(a1 + 28))
    {
      if (v17 != 1)
        ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"width mismatch (second argument)", v11);
      ProShade::Ctor::makeWidth(*((_DWORD *)v16 + 6), v13, a3, v22);
      ProShade::VarT<ProShade::Node>::operator=((uint64_t)a3, v22);
      v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v23);
    }
  }
  v18 = a2[2].var0;
  if (!v18)
    throw_PCNullPointerException(1);
  length = v18->length;
  v20 = a3[2].var0;
  if (!v20)
    throw_PCNullPointerException(1);
  v21 = *((_DWORD *)v20 + 6);
  if (length > v21)
    v21 = length;
  *(_DWORD *)(a1 + 24) = v21;
}

void sub_1B2D2606C(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E656F3C8;
  *(_QWORD *)(a1 + 72) = &unk_1E656F480;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E656F4E0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E656F598;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E656F3C8;
  *(_QWORD *)(a1 + 72) = &unk_1E656F480;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E656F4E0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E656F598;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "equal");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D262A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 18, 0x8903763CuLL);
  v5[1] = v4 + 5;
  v5[2] = v4 + 6;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_DWORD *)v6 = 1635086693;
  v6[4] = 108;
  *((_BYTE *)v5 + v4 + 17) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D263CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "equal");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "equal");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D26668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E656F4A0);
  *(_QWORD *)v2 = &unk_1E656F3C8;
  *(_QWORD *)(v2 + 72) = &unk_1E656F480;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D267D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4;
  int *v5;
  int v6;
  int v7;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1)
    PCArray_base::badIndex(a1);
  if (v4 <= 1)
    PCArray_base::badIndex(a1);
  v5 = (int *)(*(_QWORD *)(a2 + 16) + 144);
  v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2)
      return ProShade::eval_type<ProShade::equal_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
    v7 = *v5;
  }
  else
  {
    v7 = *v5;
    if (*v5 < 2)
      return ProShade::eval_type<ProShade::equal_traits,BOOL>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  }
  if (v7 <= 2)
    return ProShade::eval_type<ProShade::equal_traits,int>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  return ProShade::eval_type<ProShade::equal_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E656F3C8;
  *((_QWORD *)v1 + 9) = &unk_1E656F480;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E656F4E0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E656F598;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E656F3C8;
  *((_QWORD *)v1 + 9) = &unk_1E656F480;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E656F4E0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E656F598;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

void *operator+@<X0>(const void **a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  size_t v9;
  uint64_t v10;
  unsigned int *v11;
  void *result;
  unsigned int v13;

  v5 = *a1;
  if (*a1)
    v6 = *(v5 - 2);
  else
    v6 = 0;
  LODWORD(v7) = *a2;
  if (*a2)
  {
    v7 = 0;
    while (a2[++v7])
      ;
  }
  v9 = (int)v7;
  v10 = (int)v7 + (uint64_t)v6;
  v11 = (unsigned int *)malloc_type_malloc(v10 + 13, 0x8903763CuLL);
  v11[1] = v10;
  v11[2] = v10 + 1;
  atomic_store(1u, v11);
  atomic_store(0, v11);
  memcpy(v11 + 3, v5, v6);
  result = memcpy((char *)v11 + v6 + 12, a2, v9);
  *((_BYTE *)v11 + v10 + 12) = 0;
  *a3 = v11 + 3;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  return result;
}

void *operator+@<X0>(const void **a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  int v7;
  size_t v8;
  uint64_t v9;
  unsigned int *v10;
  void *result;
  unsigned int v12;

  v4 = *a1;
  if (*a1)
    v5 = *(v4 - 2);
  else
    v5 = 0;
  v6 = *a2;
  if (*a2)
    v7 = *(v6 - 2);
  else
    v7 = 0;
  v8 = v7;
  v9 = v7 + (uint64_t)v5;
  v10 = (unsigned int *)malloc_type_malloc(v9 + 13, 0x8903763CuLL);
  v10[1] = v9;
  v10[2] = v9 + 1;
  atomic_store(1u, v10);
  atomic_store(0, v10);
  memcpy(v10 + 3, v4, v5);
  result = memcpy((char *)v10 + v5 + 12, v6, v8);
  *((_BYTE *)v10 + v9 + 12) = 0;
  *a3 = v10 + 3;
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 + 1, v10));
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656F4A0);
  *(_QWORD *)a1 = &unk_1E656F3C8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E656F480;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D26D20(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;

  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>::compute((uint64_t)v7, (uint64_t)v9, &v11);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3 + 2, &v12);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(&v13);
    v10 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::Func((uint64_t)v10, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v10;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2D26EB0(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  int v6;
  const ProShade::Value *v7;
  ProShade::ConstVector *v8;
  PCShared_base *v9;
  OZChannelBase v11;
  _QWORD v12[18];
  _QWORD v13[19];

  v13[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v13);
  ProShade::Value::Value(v12);
  ProShade::Value::Value(&v11);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v13);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v12);
  if (SLODWORD(v13[0]) > 1)
  {
    if (LODWORD(v13[0]) != 2)
      goto LABEL_8;
    v6 = v12[0];
  }
  else
  {
    v6 = v12[0];
    if (SLODWORD(v12[0]) < 2)
    {
      ProShade::eval_type<ProShade::greaterThan_traits,BOOL>((uint64_t)v13, (uint64_t)v12, &v11);
      goto LABEL_9;
    }
  }
  if (v6 <= 2)
  {
    ProShade::eval_type<ProShade::greaterThan_traits,int>((uint64_t)v13, (uint64_t)v12, &v11);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::greaterThan_traits,double>((uint64_t)v13, (uint64_t)v12, &v11);
LABEL_9:
  v8 = ProShade::Const::create((ProShade::Const *)&v11, v7);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = (PC_Sp_counted_base *)v8;
  if (v8)
    v9 = (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
  else
    v9 = 0;
  return PCSharedCount::PCSharedCount(a3 + 3, v9);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  PCSharedCount v14[2];
  _QWORD *v15;
  PCSharedCount v16;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656F718);
  *(_QWORD *)a1 = &unk_1E656F640;
  *(_QWORD *)(a1 + 72) = &unk_1E656F6F8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a2;
  PCSharedCount::PCSharedCount(&v16, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v16, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D27254(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::greaterThan_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  char v16;
  PCException *exception;
  PCString v18;
  PCString v19;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v19, "not implemented yet");
    PCString::PCString(&v18, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v19, &v18, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (unsigned __int8 *)(a2 + 16);
    v10 = (unsigned __int8 *)(a1 + 16);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v14 = *v9++;
      v13 = v14;
      if (v11)
        v15 = v13 == 0;
      else
        v15 = 0;
      v16 = v15;
      *(_BYTE *)Serializer = v16;
      Serializer = (void ***)((char *)Serializer + 1);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D273C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::greaterThan_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  PCException *exception;
  PCString v15;
  PCString v16;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "not implemented yet");
    PCString::PCString(&v15, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v16, &v15, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (int *)(a2 + 16);
    v10 = (int *)(a1 + 16);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = *v9++;
      *(_BYTE *)Serializer = v11 > v13;
      Serializer = (void ***)((char *)Serializer + 1);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D27508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::greaterThan_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  PCException *exception;
  PCString v15;
  PCString v16;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "not implemented yet");
    PCString::PCString(&v15, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v16, &v15, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (double *)(a2 + 16);
    v10 = (double *)(a1 + 16);
    do
    {
      v11 = *v10++;
      v12 = v11;
      v13 = *v9++;
      *(_BYTE *)Serializer = v12 > v13;
      Serializer = (void ***)((char *)Serializer + 1);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D27650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E656F640;
  *(_QWORD *)(a1 + 72) = &unk_1E656F6F8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E656F758;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E656F810;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E656F640;
  *(_QWORD *)(a1 + 72) = &unk_1E656F6F8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E656F758;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E656F810;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "greaterThan");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D278A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  char *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "Func ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 24, 0x8903763CuLL);
  v5[1] = v4 + 11;
  v5[2] = v4 + 12;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  v6 = (char *)v5 + v4 + 12;
  *(_DWORD *)(v6 + 7) = 1851877460;
  *(_QWORD *)v6 = *(_QWORD *)"greaterThan";
  *((_BYTE *)v5 + v4 + 23) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D279D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "greaterThan");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "greaterThan");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D27C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E656F718);
  *(_QWORD *)v2 = &unk_1E656F640;
  *(_QWORD *)(v2 + 72) = &unk_1E656F6F8;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D27DD4(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4;
  int *v5;
  int v6;
  int v7;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1)
    PCArray_base::badIndex(a1);
  if (v4 <= 1)
    PCArray_base::badIndex(a1);
  v5 = (int *)(*(_QWORD *)(a2 + 16) + 144);
  v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2)
      return ProShade::eval_type<ProShade::greaterThan_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
    v7 = *v5;
  }
  else
  {
    v7 = *v5;
    if (*v5 < 2)
      return ProShade::eval_type<ProShade::greaterThan_traits,BOOL>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  }
  if (v7 <= 2)
    return ProShade::eval_type<ProShade::greaterThan_traits,int>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  return ProShade::eval_type<ProShade::greaterThan_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E656F640;
  *((_QWORD *)v1 + 9) = &unk_1E656F6F8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E656F758;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E656F810;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E656F640;
  *((_QWORD *)v1 + 9) = &unk_1E656F6F8;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E656F758;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E656F810;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::greaterThan_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656F718);
  *(_QWORD *)a1 = &unk_1E656F640;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E656F6F8;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D28170(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::eval(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  const void *v6;
  void *v7;
  const void *v8;
  void *v9;
  PC_Sp_counted_base *v10;
  PCSharedCount v11;
  PCSharedCount v12;
  PCSharedCount v13;

  v6 = *(const void **)(a1 + 16);
  if (v6)
  else
    v7 = 0;
  v8 = *(const void **)(a2 + 16);
  if (v8
  {
    ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>::compute((uint64_t)v7, (uint64_t)v9, &v11);
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a3 + 2, &v12);
    v11.var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  }
  else
  {
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    v12.var0 = 0;
    PCSharedCount::PCSharedCount(&v13);
    v10 = (PC_Sp_counted_base *)operator new();
    ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::Func((uint64_t)v10, *(_QWORD **)(a1 + 16), *(_QWORD **)(a2 + 16));
    a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    a3[2].var0 = v10;
    PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
    v11.var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  }
  PCSharedCount::~PCSharedCount(&v13);
}

void sub_1B2D28300(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>::compute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, PCSharedCount *a3@<X8>)
{
  int v6;
  const ProShade::Value *v7;
  ProShade::ConstVector *v8;
  PCShared_base *v9;
  OZChannelBase v11;
  _QWORD v12[18];
  _QWORD v13[19];

  v13[18] = *MEMORY[0x1E0C80C00];
  ProShade::Value::Value(v13);
  ProShade::Value::Value(v12);
  ProShade::Value::Value(&v11);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 224))(a1, v13);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 224))(a2, v12);
  if (SLODWORD(v13[0]) > 1)
  {
    if (LODWORD(v13[0]) != 2)
      goto LABEL_8;
    v6 = v12[0];
  }
  else
  {
    v6 = v12[0];
    if (SLODWORD(v12[0]) < 2)
    {
      ProShade::eval_type<ProShade::lessThanEqual_traits,BOOL>((uint64_t)v13, (uint64_t)v12, &v11);
      goto LABEL_9;
    }
  }
  if (v6 <= 2)
  {
    ProShade::eval_type<ProShade::lessThanEqual_traits,int>((uint64_t)v13, (uint64_t)v12, &v11);
    goto LABEL_9;
  }
LABEL_8:
  ProShade::eval_type<ProShade::lessThanEqual_traits,double>((uint64_t)v13, (uint64_t)v12, &v11);
LABEL_9:
  v8 = ProShade::Const::create((ProShade::Const *)&v11, v7);
  a3->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a3[2].var0 = (PC_Sp_counted_base *)v8;
  if (v8)
    v9 = (ProShade::ConstVector *)((char *)v8 + *(_QWORD *)(*(_QWORD *)v8 - 24));
  else
    v9 = 0;
  return PCSharedCount::PCSharedCount(a3 + 3, v9);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::Func(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v6;
  int v7;
  PCShared_base *v8;
  int v9;
  int v10;
  PCArray_base *v11;
  int v12;
  PCSharedCount v14[2];
  _QWORD *v15;
  PCSharedCount v16;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656F990);
  *(_QWORD *)a1 = &unk_1E656F8B8;
  *(_QWORD *)(a1 + 72) = &unk_1E656F970;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 24) = a2[3];
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a2;
  PCSharedCount::PCSharedCount(&v16, (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
  v6 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6 + 1, v7);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v15 = a3;
  if (a3)
    v8 = (PCShared_base *)((char *)a3 + *(_QWORD *)(*a3 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount(&v16, v8);
  v9 = *(_DWORD *)(a1 + 60);
  if (*(_DWORD *)(a1 + 56) <= v9)
    v10 = (2 * (v9 + 1)) | 1;
  else
    v10 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v9 + 1, v10);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + 32 * *(int *)(a1 + 60) - 32, v14);
  v14[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v16);
  v12 = *(_DWORD *)(a1 + 60);
  if (v12 < 1)
    PCArray_base::badIndex(v11);
  if (v12 <= 1)
    PCArray_base::badIndex(v11);
  ProShade::ScalarFunctionTraits_2<ProShade::equal_traits>::initType(a1, *(const PCString **)(a1 + 64), (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + 32));
  ProShade::Node::setFrequency((ProShade::Node *)a1);
  if (*(_DWORD *)(a1 + 40) == 2 && *(int *)(a1 + 44) >= 3)
    *(_DWORD *)(a1 + 40) = 3;
  return a1;
}

void sub_1B2D286A4(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 72) = v4 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::lessThanEqual_traits,BOOL>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  char v16;
  PCException *exception;
  PCString v18;
  PCString v19;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v19, "not implemented yet");
    PCString::PCString(&v18, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v19, &v18, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (unsigned __int8 *)(a2 + 16);
    v10 = (unsigned __int8 *)(a1 + 16);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v14 = *v9++;
      v13 = v14;
      if (v11)
        v15 = v13 == 0;
      else
        v15 = 0;
      v16 = !v15;
      *(_BYTE *)Serializer = v16;
      Serializer = (void ***)((char *)Serializer + 1);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D28810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::lessThanEqual_traits,int>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  PCException *exception;
  PCString v15;
  PCString v16;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "not implemented yet");
    PCString::PCString(&v15, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v16, &v15, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (int *)(a2 + 16);
    v10 = (int *)(a1 + 16);
    do
    {
      v12 = *v10++;
      v11 = v12;
      v13 = *v9++;
      *(_BYTE *)Serializer = v11 <= v13;
      Serializer = (void ***)((char *)Serializer + 1);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D28958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::eval_type<ProShade::lessThanEqual_traits,double>(uint64_t a1, uint64_t a2, OZChannelBase *a3)
{
  void ***Serializer;
  const PCString *v7;
  uint64_t result;
  double *v9;
  double *v10;
  double v11;
  double v12;
  double v13;
  PCException *exception;
  PCString v15;
  PCString v16;

  ProShade::Value::set((uint64_t)a3, (const PCString *)1, *(_DWORD *)(a1 + 4));
  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4))
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "not implemented yet");
    PCString::PCString(&v15, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSFunc.h");
    PCException::PCException(exception, &v16, &v15, 441);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  Serializer = OZChannelBase::getSerializer(a3);
  result = ProShade::shapeGetSize(*(_DWORD *)(a1 + 4), v7);
  if ((int)result >= 1)
  {
    v9 = (double *)(a2 + 16);
    v10 = (double *)(a1 + 16);
    do
    {
      v11 = *v10++;
      v12 = v11;
      v13 = *v9++;
      *(_BYTE *)Serializer = v12 <= v13;
      Serializer = (void ***)((char *)Serializer + 1);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

void sub_1B2D28AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  void *v10;
  int v11;

  PCString::~PCString((PCString *)&a9);
  PCString::~PCString(&a10);
  if (v11)
    __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E656F8B8;
  *(_QWORD *)(a1 + 72) = &unk_1E656F970;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E656F9D0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E656FA88;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  return a1;
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::~Func(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  *(_QWORD *)a1 = &unk_1E656F8B8;
  *(_QWORD *)(a1 + 72) = &unk_1E656F970;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  v2 = a1 + 48;
  if (*(int *)(a1 + 56) < 0)
    v3 = 1;
  else
    v3 = *(_DWORD *)(a1 + 56);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2, 0, v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)a1 = off_1E656F9D0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_1E656FA88;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_BYTE *)(a1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 80));
  JUMPOUT(0x1B5E29170);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::repr(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = a1 + 48;
  LiString::LiString((LiString *)&v8, "lessThanEqual");
  ProShade::func_repr((PCArray_base *)&v8, v3, a2);
  if (v8)
  {
    v4 = (unsigned int *)(v8 - 12);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      *v8 = 0;
      if (v8)
        v7 = v8 - 12;
      else
        v7 = 0;
      free(v7);
    }
  }
}

void sub_1B2D28CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _BYTE *v10;
  _BYTE *v11;

  LiString::LiString((LiString *)&v11, "Func ");
  v2 = v11;
  if (v11)
    v3 = *((_DWORD *)v11 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 26, 0x8903763CuLL);
  v5[1] = v4 + 13;
  v5[2] = v4 + 14;
  atomic_store(1u, v5);
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  qmemcpy((char *)v5 + v4 + 12, "lessThanEqual", 13);
  *((_BYTE *)v5 + v4 + 25) = 0;
  *a1 = v5 + 3;
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  if (v11)
  {
    v7 = (unsigned int *)(v11 - 12);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      *v11 = 0;
      if (v11)
        v10 = v11 - 12;
      else
        v10 = 0;
      free(v10);
    }
  }
}

void sub_1B2D28E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "lessThanEqual");
}

int8x8_t *ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::computeHash(uint64_t a1, int8x8_t *this)
{
  int8x8_t *result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;

  PCHashWriteStream::writeValue(this, "Func");
  result = PCHashWriteStream::writeValue(this, "lessThanEqual");
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::hash(*(_QWORD *)(a1 + 64) + v5, &v7);
      result = PCHashWriteStream::writeValue(this, (const PCHash128 *)&v7);
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  return result;
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::apply@<X0>(unsigned int *a1@<X0>, void (***a2)(PCSharedCount *__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  PC_Sp_counted_base *var0;
  PC_Sp_counted_base *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  PCSharedCount *v16;
  PCSharedCount v17[3];
  PCSharedCount v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v3 = (uint64_t)a1;
  v20 = 0;
  v21 = 0;
  v19 = &unk_1E656A208;
  v4 = a1[15];
  if ((int)v4 >= 1)
  {
    v16 = a3;
    v6 = 0;
    v7 = 0;
    v8 = 16;
    do
    {
      if (v6 >= *(int *)(v3 + 60))
        PCArray_base::badIndex((PCArray_base *)a1);
      v9 = *(_QWORD *)(v3 + 64);
      (**a2)(v17, a2, v9 + v8 - 16);
      var0 = v17[2].var0;
      v11 = *(PC_Sp_counted_base **)(v9 + v8);
      if ((int)v20 <= SHIDWORD(v20))
        v12 = (2 * (HIDWORD(v20) + 1)) | 1;
      else
        v12 = v20;
      PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, HIDWORD(v20) + 1, v12);
      ProShade::VarT<ProShade::Node>::operator=(v21 + 32 * SHIDWORD(v20) - 32, v17);
      v7 |= var0 != v11;
      v17[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
      PCSharedCount::~PCSharedCount(&v18);
      ++v6;
      v8 += 32;
    }
    while (v4 != v6);
    if ((v7 & 1) != 0)
    {
      v13 = operator new();
      ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::Func(v13, (uint64_t)&v19, (const ProShade::Node *)v3);
      a3 = v16;
      v3 = v13;
    }
    else
    {
      a3 = v16;
    }
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v19 = &unk_1E656A208;
  if ((int)v20 < 0)
    v14 = 1;
  else
    v14 = v20;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)&v19, 0, v14);
  result = v21;
  if (v21)
    return MEMORY[0x1B5E2914C](v21, 0x1000C8077774924);
  return result;
}

void sub_1B2D290B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  MEMORY[0x1B5E29170](v6, 0x10B1C40241F72B2);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::~PCArray((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::clone(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = operator new();
  *(_QWORD *)(v2 + 72) = &off_1E65EB048;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)v2, (uint64_t *)&off_1E656F990);
  *(_QWORD *)v2 = &unk_1E656F8B8;
  *(_QWORD *)(v2 + 72) = &unk_1E656F970;
  *(_QWORD *)(v2 + 48) = &unk_1E656A208;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(_DWORD *)(a1 + 60);
  if (v3 <= 0)
    v4 = 0;
  else
    v4 = (2 * v3) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(v2 + 48, v3, v4);
  if (*(int *)(a1 + 60) >= 1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(v2 + 64) + v5, (const PCSharedCount *)(*(_QWORD *)(a1 + 64) + v5));
      ++v6;
      v5 += 32;
    }
    while (v6 < *(int *)(a1 + 60));
  }
  ProShade::Node::copyFrom((ProShade::Node *)v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D29220(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  MEMORY[0x1B5E29170](v1, 0x10B1C40241F72B2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::computeValue(PCArray_base *a1, uint64_t a2, OZChannelBase *a3)
{
  int v4;
  int *v5;
  int v6;
  int v7;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4 < 1)
    PCArray_base::badIndex(a1);
  if (v4 <= 1)
    PCArray_base::badIndex(a1);
  v5 = (int *)(*(_QWORD *)(a2 + 16) + 144);
  v6 = **(_DWORD **)(a2 + 16);
  if (v6 > 1)
  {
    if (v6 != 2)
      return ProShade::eval_type<ProShade::lessThanEqual_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
    v7 = *v5;
  }
  else
  {
    v7 = *v5;
    if (*v5 < 2)
      return ProShade::eval_type<ProShade::lessThanEqual_traits,BOOL>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  }
  if (v7 <= 2)
    return ProShade::eval_type<ProShade::lessThanEqual_traits,int>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
  return ProShade::eval_type<ProShade::lessThanEqual_traits,double>(*(_QWORD *)(a2 + 16), (uint64_t)v5, a3);
}

void `virtual thunk to'ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::~Func(_QWORD *a1)
{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E656F8B8;
  *((_QWORD *)v1 + 9) = &unk_1E656F970;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E656F9D0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E656FA88;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
}

{
  char *v1;
  int v2;
  uint64_t v3;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  *(_QWORD *)v1 = &unk_1E656F8B8;
  *((_QWORD *)v1 + 9) = &unk_1E656F970;
  *((_QWORD *)v1 + 6) = &unk_1E656A208;
  if (*((int *)v1 + 14) < 0)
    v2 = 1;
  else
    v2 = *((_DWORD *)v1 + 14);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize((uint64_t)(v1 + 48), 0, v2);
  v3 = *((_QWORD *)v1 + 8);
  if (v3)
    MEMORY[0x1B5E2914C](v3, 0x1000C8077774924);
  *((_DWORD *)v1 + 14) = 0;
  *(_QWORD *)v1 = off_1E656F9D0;
  *((_QWORD *)v1 + 8) = 0;
  *((_QWORD *)v1 + 9) = off_1E656FA88;
  LiString::dec((LiString *)(v1 + 32));
  *((_QWORD *)v1 + 9) = &off_1E65EB048;
  v1[88] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 10);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::Func<ProShade::ScalarFunctionTraits_2<ProShade::lessThanEqual_traits>>::Func(uint64_t a1, uint64_t a2, const ProShade::Node *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(a1 + 72) = &off_1E65EB048;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656F990);
  *(_QWORD *)a1 = &unk_1E656F8B8;
  *(_QWORD *)(a1 + 48) = &unk_1E656A208;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = &unk_1E656F970;
  ProShade::Node::copyFrom((ProShade::Node *)a1, a3);
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a1 + 56) >= v6)
    v7 = *(_DWORD *)(a1 + 56);
  else
    v7 = (2 * v6) | 1;
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a1 + 48, v6, v7);
  if (*(int *)(a2 + 12) >= 1)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a1 + 64) + v8, (const PCSharedCount *)(*(_QWORD *)(a2 + 16) + v8));
      ++v9;
      v8 += 32;
    }
    while (v9 < *(int *)(a2 + 12));
  }
  return a1;
}

void sub_1B2D295BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 72) = v3 + 16;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void PCArray<double,PCArray_Traits<double>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E656FB28;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    v5 = *(char **)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
      bzero(&v5[8 * v4], 8 * ~(_DWORD)v4 + 8);
  }
  else
  {
    if (v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, 8 * v3);
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<double,PCArray_Traits<double>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  PCException *exception;
  PCString v16;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "PCArray::resize");
    PCException::PCException(exception, &v16);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if ((int)v6 < a2)
      bzero((void *)(*(_QWORD *)(a1 + 16) + 8 * v6), 8 * (~(_DWORD)v6 + a2) + 8);
  }
  else
  {
    if (v3)
    {
      v7 = (char *)operator new[]();
      bzero(v7, 8 * v3);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(_DWORD *)(a1 + 12);
    if (a2 >= v8)
      v9 = v8;
    else
      v9 = a2;
    if ((int)v9 < 1)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v10 = *(uint64_t **)(a1 + 16);
      v11 = v9;
      v12 = v7;
      do
      {
        v13 = *v10++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    if ((int)v9 > v8)
      v8 = v9;
    if (v8 < a2)
      bzero(&v7[8 * v8], 8 * (~v8 + a2) + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
      MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v7;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2D29888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void PCArray<BOOL,PCArray_Traits<BOOL>>::~PCArray(uint64_t a1)
{
  int v2;
  size_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  *(_QWORD *)a1 = &unk_1E656FB60;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if ((_DWORD)v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    v5 = *(char **)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
      bzero(&v5[v4], ~(_DWORD)v4 + 1);
  }
  else
  {
    if ((_DWORD)v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, v3);
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
      MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5)
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  JUMPOUT(0x1B5E29170);
}

void PCArray<BOOL,PCArray_Traits<BOOL>>::resize(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  uint64_t v14;
  PCException *exception;
  PCString v16;

  if (a3 <= a2)
    v3 = a2;
  else
    v3 = a3;
  if (a2 < 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v16, "PCArray::resize");
    PCException::PCException(exception, &v16);
    *(_QWORD *)exception = &unk_1E65EA798;
  }
  if (v3 == *(_DWORD *)(a1 + 8))
  {
    v6 = *(int *)(a1 + 12);
    if ((int)v6 < a2)
      bzero((void *)(*(_QWORD *)(a1 + 16) + v6), (~(_DWORD)v6 + a2) + 1);
  }
  else
  {
    if (v3)
    {
      v7 = (char *)operator new[]();
      bzero(v7, v3);
    }
    else
    {
      v7 = 0;
    }
    v8 = *(_DWORD *)(a1 + 12);
    if (a2 >= v8)
      v9 = v8;
    else
      v9 = a2;
    if ((int)v9 < 1)
    {
      LODWORD(v9) = 0;
    }
    else
    {
      v10 = *(char **)(a1 + 16);
      v11 = v9;
      v12 = v7;
      do
      {
        v13 = *v10++;
        *v12++ = v13;
        --v11;
      }
      while (v11);
    }
    if ((int)v9 > v8)
      v8 = v9;
    if (v8 < a2)
      bzero(&v7[v8], (~v8 + a2) + 1);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
      MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v7;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = a2;
}

void sub_1B2D29B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

void ProShade::UnaryOp<ProShade::Negate>::computeUnary(_DWORD *a1@<X0>, PCSharedCount *a2@<X8>)
{
  int v3;
  const PCString *v4;
  PC_Sp_counted_base *v5;
  PCShared_base *v6;
  PCArray_base *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  PC_Sp_counted_base *v12;
  PCShared_base *v13;
  PCArray_base *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  int v18;
  PC_Sp_counted_base *v19;
  PCShared_base *v20;
  size_t v21;
  void *v22;
  size_t v23;
  void *v24;
  void *v25;
  unsigned int v26;
  void *v27;
  unsigned int v28;
  void *v29;
  unsigned int v30;
  _DWORD *v31;
  char *v32;
  size_t v33;
  size_t v34;
  _DWORD *v35;
  void *v36;
  uint64_t v37;
  _DWORD *v38;
  void *v39;
  uint64_t v40;
  _DWORD *v41;

  v3 = a1[6];
  if (v3 > 1)
  {
    if (v3 == 2)
    {
      v40 = 0;
      v41 = 0;
      v38 = 0;
      v39 = &unk_1E64FC288;
      v36 = &unk_1E64FC288;
      v37 = 0;
      v7 = (PCArray_base *)(*(uint64_t (**)(_DWORD *, void **))(*(_QWORD *)a1 + 208))(a1, &v39);
      v8 = HIDWORD(v40);
      if (SHIDWORD(v40) >= 1)
      {
        v9 = 0;
        do
        {
          if (v9 >= SHIDWORD(v40))
            PCArray_base::badIndex(v7);
          v10 = v41[v9];
          if ((int)v37 <= SHIDWORD(v37))
            v11 = (2 * (HIDWORD(v37) + 1)) | 1;
          else
            v11 = v37;
          PCArray<int,PCArray_Traits<int>>::resize((uint64_t)&v36, HIDWORD(v37) + 1, v11);
          v38[SHIDWORD(v37) - 1] = -v10;
          ++v9;
        }
        while (v8 != v9);
      }
      v12 = (PC_Sp_counted_base *)ProShade::Const::create((uint64_t)&v36);
      a2->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
      a2[2].var0 = v12;
      if (v12)
        v13 = (PCShared_base *)((char *)v12 + *(_QWORD *)(*(_QWORD *)v12 - 24));
      else
        v13 = 0;
      PCSharedCount::PCSharedCount(a2 + 3, v13);
      v36 = &unk_1E64FC288;
      if ((int)v37 < 0)
        v26 = 1;
      else
        v26 = v37 & ~((int)v37 >> 31);
      if (v26 == (_DWORD)v37)
      {
        v27 = v38;
        if (v37 < 0)
          bzero(&v38[SHIDWORD(v37)], 4 * ~HIDWORD(v37) + 4);
      }
      else
      {
        if (v26)
        {
          v27 = (void *)operator new[]();
          bzero(v27, 4 * v26);
        }
        else
        {
          v27 = 0;
        }
        if (v38)
          MEMORY[0x1B5E2914C](v38, 0x1000C8077774924);
        v38 = v27;
      }
      v37 = v26;
      if (v27)
        MEMORY[0x1B5E2914C](v27, 0x1000C8077774924);
      v39 = &unk_1E64FC288;
      if ((int)v40 < 0)
        v30 = 1;
      else
        v30 = v40 & ~((int)v40 >> 31);
      if (v30 == (_DWORD)v40)
      {
        v31 = v41;
        if (v40 < 0)
        {
          v32 = (char *)&v41[SHIDWORD(v40)];
          v33 = 4 * ~HIDWORD(v40) + 4;
LABEL_99:
          bzero(v32, v33);
          goto LABEL_107;
        }
        goto LABEL_107;
      }
      if (v30)
      {
        v34 = 4 * v30;
        v35 = (_DWORD *)operator new[]();
LABEL_102:
        v31 = v35;
        bzero(v35, v34);
LABEL_104:
        if (v41)
          MEMORY[0x1B5E2914C](v41, 0x1000C8077774924);
        v41 = v31;
        goto LABEL_107;
      }
    }
    else
    {
      v40 = 0;
      v41 = 0;
      v38 = 0;
      v39 = &unk_1E656FB28;
      v36 = &unk_1E656FB28;
      v37 = 0;
      v14 = (PCArray_base *)(*(uint64_t (**)(_DWORD *, void **))(*(_QWORD *)a1 + 216))(a1, &v39);
      v15 = HIDWORD(v40);
      if (SHIDWORD(v40) >= 1)
      {
        v16 = 0;
        do
        {
          if (v16 >= SHIDWORD(v40))
            PCArray_base::badIndex(v14);
          v17 = *(double *)&v41[2 * v16];
          if ((int)v37 <= SHIDWORD(v37))
            v18 = (2 * (HIDWORD(v37) + 1)) | 1;
          else
            v18 = v37;
          PCArray<double,PCArray_Traits<double>>::resize((uint64_t)&v36, HIDWORD(v37) + 1, v18);
          *(double *)&v38[2 * SHIDWORD(v37) - 2] = -v17;
          ++v16;
        }
        while (v15 != v16);
      }
      v19 = (PC_Sp_counted_base *)ProShade::Const::create((uint64_t)&v36);
      a2->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
      a2[2].var0 = v19;
      if (v19)
        v20 = (PCShared_base *)((char *)v19 + *(_QWORD *)(*(_QWORD *)v19 - 24));
      else
        v20 = 0;
      PCSharedCount::PCSharedCount(a2 + 3, v20);
      v36 = &unk_1E656FB28;
      if ((int)v37 < 0)
        v28 = 1;
      else
        v28 = v37 & ~((int)v37 >> 31);
      if (v28 == (_DWORD)v37)
      {
        v29 = v38;
        if (v37 < 0)
          bzero(&v38[2 * SHIDWORD(v37)], 8 * ~HIDWORD(v37) + 8);
      }
      else
      {
        if (v28)
        {
          v29 = (void *)operator new[]();
          bzero(v29, 8 * v28);
        }
        else
        {
          v29 = 0;
        }
        if (v38)
          MEMORY[0x1B5E2914C](v38, 0x1000C8077774924);
        v38 = v29;
      }
      v37 = v28;
      if (v29)
        MEMORY[0x1B5E2914C](v29, 0x1000C8077774924);
      v39 = &unk_1E656FB28;
      if ((int)v40 < 0)
        v30 = 1;
      else
        v30 = v40 & ~((int)v40 >> 31);
      if (v30 == (_DWORD)v40)
      {
        v31 = v41;
        if (v40 < 0)
        {
          v32 = (char *)&v41[2 * SHIDWORD(v40)];
          v33 = 8 * ~HIDWORD(v40) + 8;
          goto LABEL_99;
        }
LABEL_107:
        v40 = v30;
        if (!v31)
          return;
        v25 = v31;
        goto LABEL_109;
      }
      if (v30)
      {
        v34 = 8 * v30;
        v35 = (_DWORD *)operator new[]();
        goto LABEL_102;
      }
    }
    v31 = 0;
    goto LABEL_104;
  }
  v40 = 0;
  v41 = 0;
  v38 = 0;
  v39 = &unk_1E656FB60;
  v36 = &unk_1E656FB60;
  v37 = 0;
  (*(void (**)(_DWORD *, void **))(*(_QWORD *)a1 + 200))(a1, &v39);
  if (SHIDWORD(v40) >= 1)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"- operator doesn't apply to BOOL", v4);
  v5 = (PC_Sp_counted_base *)ProShade::Const::create((uint64_t)&v36);
  a2->var0 = (PC_Sp_counted_base *)&unk_1E656F380;
  a2[2].var0 = v5;
  if (v5)
    v6 = (PCShared_base *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount(a2 + 3, v6);
  v36 = &unk_1E656FB60;
  if ((int)v37 < 0)
    v21 = 1;
  else
    v21 = v37 & ~((int)v37 >> 31);
  if ((_DWORD)v21 == (_DWORD)v37)
  {
    v22 = v38;
    if (v37 < 0)
      bzero((char *)v38 + SHIDWORD(v37), ~HIDWORD(v37) + 1);
  }
  else
  {
    if ((_DWORD)v21)
    {
      v22 = (void *)operator new[]();
      bzero(v22, v21);
    }
    else
    {
      v22 = 0;
    }
    if (v38)
      MEMORY[0x1B5E2914C](v38, 0x1000C8077774924);
    v38 = v22;
  }
  v37 = v21;
  if (v22)
    MEMORY[0x1B5E2914C](v22, 0x1000C8077774924);
  v39 = &unk_1E656FB60;
  if ((int)v40 < 0)
    v23 = 1;
  else
    v23 = v40 & ~((int)v40 >> 31);
  if ((_DWORD)v23 == (_DWORD)v40)
  {
    v24 = v41;
    if (v40 < 0)
      bzero((char *)v41 + SHIDWORD(v40), ~HIDWORD(v40) + 1);
  }
  else
  {
    if ((_DWORD)v23)
    {
      v24 = (void *)operator new[]();
      bzero(v24, v23);
    }
    else
    {
      v24 = 0;
    }
    if (v41)
      MEMORY[0x1B5E2914C](v41, 0x1000C8077774924);
    v41 = v24;
  }
  v40 = v23;
  if (v24)
  {
    v25 = v24;
LABEL_109:
    MEMORY[0x1B5E2914C](v25, 0x1000C8077774924);
  }
}

void sub_1B2D2A1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)&a9);
  PCArray<double,PCArray_Traits<double>>::~PCArray((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t ProShade::UnaryOp<ProShade::Negate>::UnaryOp(uint64_t a1, _QWORD *a2)
{
  PCShared_base *v4;
  uint64_t v5;
  int v6;

  *(_QWORD *)(a1 + 80) = &off_1E65EB048;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656FC78);
  *(_QWORD *)a1 = &unk_1E656FBA0;
  *(_QWORD *)(a1 + 80) = &unk_1E656FC58;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v4 = (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  else
    v4 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v4);
  *(_QWORD *)(a1 + 24) = a2[3];
  v5 = *(_QWORD *)(a1 + 64);
  if (!v5)
    throw_PCNullPointerException(1);
  v6 = *(_DWORD *)(v5 + 40);
  if (*(_DWORD *)(a1 + 44) < v6)
    v6 = *(_DWORD *)(a1 + 44);
  *(_DWORD *)(a1 + 40) = v6;
  return a1;
}

void sub_1B2D2A320(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 80) = v4 + 16;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ProShade::Error<PCIllegalArgumentException>::raise<char [33]>(OZChannelBase *a1, const PCString *a2)
{
  PCException *exception;
  PCString v4;

  OZChannelBase::setRangeName(a1, a2);
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  PCString::PCString(&v4, (const char *)a1);
  PCException::PCException(exception, &v4);
  *(_QWORD *)exception = &unk_1E65EA798;
}

void sub_1B2D2A3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::UnaryOp<ProShade::Negate>::~UnaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E656FBA0;
  *(_QWORD *)(a1 + 80) = &unk_1E656FC58;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E656FCB8;
  *(_QWORD *)(a1 + 80) = off_1E656FD70;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 80) = &off_1E65EB048;
  *(_BYTE *)(a1 + 96) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 88));
  return a1;
}

void ProShade::UnaryOp<ProShade::Negate>::~UnaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E656FBA0;
  *(_QWORD *)(a1 + 80) = &unk_1E656FC58;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E656FCB8;
  *(_QWORD *)(a1 + 80) = off_1E656FD70;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 80) = &off_1E65EB048;
  *(_BYTE *)(a1 + 96) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 88));
  JUMPOUT(0x1B5E29170);
}

void ProShade::UnaryOp<ProShade::Negate>::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  const void *v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE *v12;
  _BYTE *v13;

  v3 = *(_QWORD *)(a1 + 64);
  if (!v3)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v3 + 16))(&v13);
  v4 = v13;
  if (v13)
    v5 = *((_DWORD *)v13 - 2);
  else
    v5 = 0;
  v6 = (unsigned int *)malloc_type_malloc(v5 + 14, 0x8903763CuLL);
  v7 = v5 + 1;
  v6[2] = v5 + 2;
  atomic_store(1u, v6);
  atomic_store(0, v6);
  *((_BYTE *)v6 + 12) = 45;
  v6[1] = v7;
  memcpy((char *)v6 + 13, v4, v5);
  *((_BYTE *)v6 + v7 + 12) = 0;
  *a2 = v6 + 3;
  do
    v8 = __ldaxr(v6);
  while (__stlxr(v8 + 1, v6));
  if (v13)
  {
    v9 = (unsigned int *)(v13 - 12);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      *v13 = 0;
      if (v13)
        v12 = v13 - 12;
      else
        v12 = 0;
      free(v12);
    }
  }
}

void sub_1B2D2A64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::UnaryOp<ProShade::Negate>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "UnaryOp ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 14, 0x8903763CuLL);
  v5[1] = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *((_BYTE *)v6 + v4) = 45;
  *((_BYTE *)v6 + v4 + 1) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D2A760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::UnaryOp<ProShade::Negate>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "-");
}

int8x8_t *ProShade::UnaryOp<ProShade::Negate>::computeHash(uint64_t a1, int8x8_t *this)
{
  __n128 v5;

  PCHashWriteStream::writeValue(this, "-");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

uint64_t ProShade::UnaryOp<ProShade::Negate>::inputs(const PCSharedCount *a1, uint64_t a2)
{
  int v4;
  const PCSharedCount *v5;
  int v6;
  int v7;

  if (*(int *)(a2 + 8) < 0)
    v4 = 1;
  else
    v4 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v4);
  v5 = a1 + 6;
  v6 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) <= v6)
    v7 = (2 * (v6 + 1)) | 1;
  else
    v7 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v6 + 1, v7);
  return ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + 32 * *(int *)(a2 + 12) - 32, v5);
}

void ProShade::UnaryOp<ProShade::Negate>::apply(uint64_t a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  PCSharedCount v8;

  v3 = a1;
  (**a2)(&v6, a2, a1 + 48);
  if (v7 != *(_QWORD **)(v3 + 64))
  {
    v5 = operator new();
    ProShade::UnaryOp<ProShade::Negate>::UnaryOp(v5, v7, *(_DWORD *)(v3 + 44));
    v3 = v5;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v3;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v3 + *(_QWORD *)(*(_QWORD *)v3 - 24)));
  v6 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v8);
}

void sub_1B2D2A90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  MEMORY[0x1B5E29170](v4, 0x10B1C40515157B5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

ProShade::Node *ProShade::UnaryOp<ProShade::Negate>::clone(const PCSharedCount *a1)
{
  ProShade::Node *v2;

  v2 = (ProShade::Node *)operator new();
  ProShade::UnaryOp<ProShade::Negate>::UnaryOp((uint64_t)v2);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)v2 + 48, a1 + 6);
  ProShade::Node::copyFrom(v2, (const ProShade::Node *)a1);
  return v2;
}

void sub_1B2D2A9A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40515157B5);
  _Unwind_Resume(a1);
}

void ***ProShade::UnaryOp<ProShade::Negate>::computeValue(PCArray_base *a1, uint64_t a2, PCString *a3)
{
  if (*(int *)(a2 + 12) <= 0)
    PCArray_base::badIndex(a1);
  return ProShade::UnaryOp<ProShade::Negate>::computeUnary(*(const PCString **)(a2 + 16), a3);
}

void `virtual thunk to'ProShade::UnaryOp<ProShade::Negate>::~UnaryOp(_QWORD *a1)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E656FBA0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E656FC58;
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E656FCB8;
  v1[10].var0 = (PC_Sp_counted_base *)off_1E656FD70;
  LiString::dec((LiString *)&v1[4]);
  v1[10].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[12].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[11].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E656FBA0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E656FC58;
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E656FCB8;
  v1[10].var0 = (PC_Sp_counted_base *)off_1E656FD70;
  LiString::dec((LiString *)&v1[4]);
  v1[10].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[12].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[11].var0);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::UnaryOp<ProShade::Negate>::UnaryOp(uint64_t a1, _QWORD *a2, int a3)
{
  PCShared_base *v6;
  uint64_t v7;
  int v8;

  *(_QWORD *)(a1 + 80) = &off_1E65EB048;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656FC78);
  *(_QWORD *)a1 = &unk_1E656FBA0;
  *(_QWORD *)(a1 + 80) = &unk_1E656FC58;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v6 = (PCShared_base *)((char *)a2 + *(_QWORD *)(*a2 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v6);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_DWORD *)(a1 + 44) = a3;
  v7 = *(_QWORD *)(a1 + 64);
  if (!v7)
    throw_PCNullPointerException(1);
  v8 = *(_DWORD *)(v7 + 40);
  if (a3 < v8)
    v8 = a3;
  *(_DWORD *)(a1 + 40) = v8;
  return a1;
}

void sub_1B2D2AC28(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 80) = v4 + 16;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::UnaryOp<ProShade::Negate>::UnaryOp(uint64_t a1)
{
  *(_QWORD *)(a1 + 80) = &off_1E65EB048;
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656FC78);
  *(_QWORD *)a1 = &unk_1E656FBA0;
  *(_QWORD *)(a1 + 80) = &unk_1E656FC58;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  return a1;
}

void sub_1B2D2AD00(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = v3;
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 80) = v4 + 16;
  *(_BYTE *)(v1 + 96) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void ***ProShade::UnaryOp<ProShade::Negate>::computeUnary(const PCString *a1, PCString *a2)
{
  if (LODWORD(a1->var0) == 2)
    return ProShade::computeUnaryType<ProShade::Negate,int>(a1, a2);
  if (LODWORD(a1->var0) == 1)
    return ProShade::computeUnaryType<ProShade::Negate,BOOL>(a1, a2);
  return ProShade::computeUnaryType<ProShade::Negate,double>(a1, a2);
}

void ***ProShade::computeUnaryType<ProShade::Negate,BOOL>(const PCString *a1, PCString *a2)
{
  uint64_t Size;
  int v5;
  void *var0_low;
  uint64_t v7;
  BOOL *v8;
  size_t v9;
  void ***result;
  const PCString *v11;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(HIDWORD(a1->var0), a2);
  v5 = Size;
  var0_low = (void *)LODWORD(a1->var0);
  if ((_DWORD)var0_low != 1)
  {
    MEMORY[0x1E0C80A78](Size);
    v8 = (BOOL *)v12 - v7;
    bzero((char *)v12 - v7, v9);
    ProShade::copyData(var0_low, a1 + 2, 1, v8, v5);
  }
  ProShade::Value::set((uint64_t)a2, (const PCString *)1, HIDWORD(a1->var0));
  result = OZChannelBase::getSerializer((OZChannelBase *)a2);
  if (v5 > 0)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"- operator doesn't apply to BOOL", v11);
  return result;
}

void ***ProShade::computeUnaryType<ProShade::Negate,int>(const PCString *a1, PCString *a2)
{
  uint64_t Size;
  int v5;
  void *var0_low;
  uint64_t v7;
  BOOL *v8;
  size_t v9;
  void ***result;
  const PCString *v11;
  uint64_t v12;
  int var0;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(HIDWORD(a1->var0), a2);
  v5 = Size;
  var0_low = (void *)LODWORD(a1->var0);
  if ((_DWORD)var0_low != 2)
  {
    MEMORY[0x1E0C80A78](Size);
    v8 = (BOOL *)v14 - v7;
    bzero((char *)v14 - v7, v9);
    ProShade::copyData(var0_low, a1 + 2, 2, v8, v5);
  }
  ProShade::Value::set((uint64_t)a2, (const PCString *)2, HIDWORD(a1->var0));
  result = OZChannelBase::getSerializer((OZChannelBase *)a2);
  if (v5 >= 1)
  {
    v11 = a1 + 2;
    v12 = v5;
    do
    {
      var0 = (int)v11->var0;
      v11 = (const PCString *)((char *)v11 + 4);
      *(_DWORD *)result = -var0;
      result = (void ***)((char *)result + 4);
      --v12;
    }
    while (v12);
  }
  return result;
}

void ***ProShade::computeUnaryType<ProShade::Negate,double>(const PCString *a1, PCString *a2)
{
  uint64_t Size;
  int v5;
  void *var0_low;
  uint64_t v7;
  BOOL *v8;
  size_t v9;
  void ***result;
  double *v11;
  uint64_t v12;
  double v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(HIDWORD(a1->var0), a2);
  v5 = Size;
  var0_low = (void *)LODWORD(a1->var0);
  if ((_DWORD)var0_low != 3)
  {
    MEMORY[0x1E0C80A78](Size);
    v8 = (BOOL *)v14 - v7;
    bzero((char *)v14 - v7, v9);
    ProShade::copyData(var0_low, a1 + 2, 3, v8, v5);
  }
  ProShade::Value::set((uint64_t)a2, (const PCString *)3, HIDWORD(a1->var0));
  result = OZChannelBase::getSerializer((OZChannelBase *)a2);
  if (v5 >= 1)
  {
    v11 = (double *)&a1[2];
    v12 = v5;
    do
    {
      v13 = *v11++;
      *(double *)result++ = -v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

double ProShade::BinaryOp<ProShade::Add>::computeBinary(const PCString *a1, const PCString *a2, uint64_t a3)
{
  int var0;
  double result;

  if (SLODWORD(a1->var0) > 1)
  {
    if (LODWORD(a1->var0) != 2)
      return ProShade::computeBinaryType<ProShade::Add,double>((unsigned int *)a1, (unsigned int *)a2, a3);
    var0 = (int)a2->var0;
  }
  else
  {
    var0 = (int)a2->var0;
    if (SLODWORD(a2->var0) < 2)
    {
      ProShade::computeBinaryType<ProShade::Add,BOOL>(a1, a2, a3);
      return result;
    }
  }
  if (var0 <= 2)
  {
    ProShade::computeBinaryType<ProShade::Add,int>((unsigned int *)a1, (unsigned int *)a2, a3);
    return result;
  }
  return ProShade::computeBinaryType<ProShade::Add,double>((unsigned int *)a1, (unsigned int *)a2, a3);
}

BOOL ProShade::Add::simplify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const PCSharedCount *v5;
  _BOOL8 result;

  v5 = (const PCSharedCount *)a1;
  if (ProShade::isZero(a1))
  {
    v5 = (const PCSharedCount *)a2;
  }
  else
  {
    result = ProShade::isZero(a2);
    if (!result)
      return result;
  }
  ProShade::VarT<ProShade::Node>::operator=(a3, v5);
  return 1;
}

uint64_t ProShade::BinaryOp<ProShade::Add>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCShared_base *v6;
  PCShared_base *v7;
  const PCString *v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656FEF0);
  *(_QWORD *)a1 = &unk_1E656FE18;
  *(_QWORD *)(a1 + 112) = &unk_1E656FED0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v6 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v6);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v7 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v7 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v7);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a3 + 28);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      v10 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v11 = v9 == v10;
      v10 = *(_DWORD *)(a2 + 28);
      if (!v11)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
    }
  }
  v12 = *(_DWORD *)(a2 + 24);
  if (v12 <= *(_DWORD *)(a3 + 24))
    v12 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 28) = v10;
  ProShade::BinaryOp<ProShade::Add>::setFrequency(a1);
  return a1;
}

void sub_1B2D2B224(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Add,BOOL>(const PCString *a1, const PCString *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *var0_low;
  uint64_t v12;
  BOOL *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  BOOL *v17;
  size_t v18;
  int var0_high;
  _BOOL8 result;
  const PCString *v21;
  int v22;
  PCException *exception;
  uint64_t v24;
  PCString v25;
  PCString v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(HIDWORD(a1->var0), a2);
  v8 = ProShade::shapeGetSize(HIDWORD(a2->var0), v7);
  v10 = v8;
  var0_low = (void *)LODWORD(a1->var0);
  if ((_DWORD)var0_low != 1)
  {
    MEMORY[0x1E0C80A78](v8);
    v13 = (BOOL *)&v24 - v12;
    bzero((char *)&v24 - v12, v14);
    v8 = (uint64_t)ProShade::copyData(var0_low, a1 + 2, 1, v13, Size);
  }
  v15 = (void *)LODWORD(a2->var0);
  if ((_DWORD)v15 != 1)
  {
    MEMORY[0x1E0C80A78](v8);
    v17 = (BOOL *)&v24 - v16;
    bzero((char *)&v24 - v16, v18);
    ProShade::copyData(v15, a2 + 2, 1, v17, v10);
  }
  var0_high = HIDWORD(a1->var0);
  if (var0_high != HIDWORD(a2->var0))
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)1, var0_high);
  result = ProShade::shapeIsVector(HIDWORD(a1->var0));
  v22 = HIDWORD(a1->var0) == 1 || result;
  if (v22 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v26, "not implemented yet");
    PCString::PCString(&v25, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v26, &v25, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"+ operator doesn't apply to BOOL", v21);
  return result;
}

void sub_1B2D2B48C(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Add,int>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *v11;
  BOOL *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  BOOL *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _BOOL8 result;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  PCException *exception;
  uint64_t v28;
  PCString v29;
  PCString v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v10 = v8;
  v11 = (void *)*a1;
  if ((_DWORD)v11 == 2)
  {
    v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v12 = (BOOL *)&v28 - v13;
    bzero((char *)&v28 - v13, v14);
    v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 2, v12, Size);
  }
  v15 = (void *)*a2;
  if ((_DWORD)v15 == 2)
  {
    v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v16 = (BOOL *)&v28 - v17;
    bzero((char *)&v28 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 2, v16, v10);
  }
  v19 = a1[1];
  if (v19 != a2[1])
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)2, v19);
  result = ProShade::shapeIsVector(a1[1]);
  v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v30, "not implemented yet");
    PCString::PCString(&v29, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v30, &v29, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
  {
    v22 = (_DWORD *)(a3 + 16);
    v23 = Size;
    do
    {
      v25 = *(_DWORD *)v12;
      v12 += 4;
      v24 = v25;
      v26 = *(_DWORD *)v16;
      v16 += 4;
      *v22++ = v26 + v24;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B2D2B6F8(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ProShade::computeBinaryType<ProShade::Add,double>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *v11;
  BOOL *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  BOOL *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _BOOL4 IsVector;
  double result;
  int v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  PCException *exception;
  uint64_t v29;
  PCString v30;
  PCString v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v10 = v8;
  v11 = (void *)*a1;
  if ((_DWORD)v11 == 3)
  {
    v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v12 = (BOOL *)&v29 - v13;
    bzero((char *)&v29 - v13, v14);
    v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 3, v12, Size);
  }
  v15 = (void *)*a2;
  if ((_DWORD)v15 == 3)
  {
    v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v16 = (BOOL *)&v29 - v17;
    bzero((char *)&v29 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 3, v16, v10);
  }
  v19 = a1[1];
  if (v19 != a2[1])
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)3, v19);
  IsVector = ProShade::shapeIsVector(a1[1]);
  v22 = a1[1] == 1 || IsVector;
  if (v22 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v31, "not implemented yet");
    PCString::PCString(&v30, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v31, &v30, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
  {
    v23 = (double *)(a3 + 16);
    v24 = Size;
    do
    {
      v25 = *(double *)v12;
      v12 += 8;
      v26 = v25;
      v27 = *(double *)v16;
      v16 += 8;
      result = v26 + v27;
      *v23++ = result;
      --v24;
    }
    while (v24);
  }
  return result;
}

void sub_1B2D2B964(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Add>::setFrequency(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(result + 64);
  if (!v1)
    throw_PCNullPointerException(1);
  v2 = *(_DWORD *)(v1 + 40);
  v3 = *(_QWORD *)(result + 96);
  if (!v3)
    throw_PCNullPointerException(1);
  v4 = *(_DWORD *)(v3 + 40);
  if (v2 > v4)
    v4 = v2;
  if (*(_DWORD *)(result + 44) < v4)
    v4 = *(_DWORD *)(result + 44);
  *(_DWORD *)(result + 40) = v4;
  return result;
}

uint64_t ProShade::BinaryOp<ProShade::Add>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E656FE18;
  *(_QWORD *)(a1 + 112) = &unk_1E656FED0;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E656FF30;
  *(_QWORD *)(a1 + 112) = off_1E656FFE8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::Add>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E656FE18;
  *(_QWORD *)(a1 + 112) = &unk_1E656FED0;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E656FF30;
  *(_QWORD *)(a1 + 112) = off_1E656FFE8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  JUMPOUT(0x1B5E29170);
}

void ProShade::BinaryOp<ProShade::Add>::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int *v11;
  _BYTE *v12;
  unsigned int v13;
  size_t v14;
  unsigned int *v15;
  _BYTE *v16;
  unsigned int v17;
  size_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  int v25;
  size_t v26;
  unsigned int *v27;
  unsigned int v28;
  size_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE *v50;
  _QWORD *v51;
  _BYTE *v52;
  _BYTE *v53;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 16))(&v53);
  v5 = v53;
  if (v53)
    v6 = *((_DWORD *)v53 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  v8 = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((_BYTE *)v7 + 12) = 40;
  v7[1] = v8;
  memcpy((char *)v7 + 13, v5, v6);
  *((_BYTE *)v7 + v8 + 12) = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (unsigned int *)malloc_type_malloc(v10 + 14, 0x8903763CuLL);
  v11[1] = v10 + 1;
  v11[2] = v10 + 2;
  atomic_store(1u, v11);
  v12 = v11 + 3;
  atomic_store(0, v11);
  memcpy(v11 + 3, v7 + 3, v10);
  v12[v10] = 32;
  v12[v10 + 1] = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = (int)v11[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  atomic_store(1u, v15);
  v16 = v15 + 3;
  atomic_store(0, v15);
  memcpy(v15 + 3, v12, v14);
  v16[v14] = 43;
  v16[v14 + 1] = 0;
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 + 1, v15));
  v18 = (int)v15[1];
  v19 = (unsigned int *)malloc_type_malloc(v18 + 14, 0x8903763CuLL);
  v19[1] = v18 + 1;
  v19[2] = v18 + 2;
  atomic_store(1u, v19);
  v20 = v19 + 3;
  atomic_store(0, v19);
  memcpy(v19 + 3, v16, v18);
  *((_BYTE *)v20 + v18) = 32;
  *((_BYTE *)v20 + v18 + 1) = 0;
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v22 = *(_QWORD *)(a1 + 96);
  if (!v22)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v22 + 16))(&v52);
  v51 = a2;
  v23 = (int)v19[1];
  v24 = v52;
  if (v52)
    v25 = *((_DWORD *)v52 - 2);
  else
    v25 = 0;
  v26 = v23 + v25;
  v27 = (unsigned int *)malloc_type_malloc(v26 + 13, 0x8903763CuLL);
  v27[1] = v26;
  v27[2] = v26 + 1;
  atomic_store(1u, v27);
  atomic_store(0, v27);
  memcpy(v27 + 3, v19 + 3, v23);
  memcpy((char *)v27 + v23 + 12, v24, v25);
  *((_BYTE *)v27 + v26 + 12) = 0;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = (int)v27[1];
  v30 = (unsigned int *)malloc_type_malloc(v29 + 14, 0x8903763CuLL);
  v30[1] = v29 + 1;
  v30[2] = v29 + 2;
  atomic_store(1u, v30);
  v31 = v30 + 3;
  atomic_store(0, v30);
  memcpy(v30 + 3, v27 + 3, v29);
  *((_BYTE *)v31 + v29) = 41;
  *((_BYTE *)v31 + v29 + 1) = 0;
  *v51 = v30 + 3;
  do
    v32 = __ldaxr(v30);
  while (__stlxr(v32 + 1, v30));
  do
  {
    v33 = __ldaxr(v27);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v27));
  if (!v34)
    free(v27);
  if (v52)
  {
    v35 = (unsigned int *)(v52 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v52 = 0;
      if (v52)
        v38 = v52 - 12;
      else
        v38 = 0;
      free(v38);
    }
  }
  do
  {
    v39 = __ldaxr(v19);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v19));
  if (!v40)
    free(v19);
  do
  {
    v41 = __ldaxr(v15);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v15));
  if (!v42)
    free(v15);
  do
  {
    v43 = __ldaxr(v11);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v11));
  if (!v44)
    free(v11);
  do
  {
    v45 = __ldaxr(v7);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v7));
  if (!v46)
    free(v7);
  if (v53)
  {
    v47 = (unsigned int *)(v53 - 12);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      *v53 = 0;
      if (v53)
        v50 = v53 - 12;
      else
        v50 = 0;
      free(v50);
    }
  }
}

void sub_1B2D2BF74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11, _BYTE *a12)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  do
  {
    v18 = __ldaxr(v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v16));
  if (!v19)
    free(v16);
  if (a11)
  {
    v20 = (unsigned int *)(a11 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  do
  {
    v23 = __ldaxr(v15);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v15));
  if (!v24)
    free(v15);
  do
  {
    v25 = __ldaxr(v14);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v14));
  if (!v26)
    free(v14);
  do
  {
    v27 = __ldaxr(v13);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v13));
  if (!v28)
    free(v13);
  do
  {
    v29 = __ldaxr(v12);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v12));
  if (!v30)
    free(v12);
  if (a12)
  {
    v31 = (unsigned int *)(a12 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Add>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "BinaryOp ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 14, 0x8903763CuLL);
  v5[1] = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *((_BYTE *)v6 + v4) = 43;
  *((_BYTE *)v6 + v4 + 1) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D2C1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Add>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "+");
}

int8x8_t *ProShade::BinaryOp<ProShade::Add>::computeHash(uint64_t a1, int8x8_t *this)
{
  __n128 v5;

  PCHashWriteStream::writeValue(this, "+");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

uint64_t ProShade::BinaryOp<ProShade::Add>::inputs(const PCSharedCount *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  const PCSharedCount *v7;
  int v8;
  int v9;

  if (*(int *)(a2 + 8) < 0)
    v4 = 1;
  else
    v4 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, 0, v4);
  v5 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) <= v5)
    v6 = (2 * (v5 + 1)) | 1;
  else
    v6 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v5 + 1, v6);
  ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + 32 * *(int *)(a2 + 12) - 32, a1 + 6);
  v7 = a1 + 10;
  v8 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8) <= v8)
    v9 = (2 * (v8 + 1)) | 1;
  else
    v9 = *(_DWORD *)(a2 + 8);
  PCArray<ProShade::VarT<ProShade::Node>,PCArray_Traits<ProShade::VarT<ProShade::Node>>>::resize(a2, v8 + 1, v9);
  return ProShade::VarT<ProShade::Node>::operator=(*(_QWORD *)(a2 + 16) + 32 * *(int *)(a2 + 12) - 32, v7);
}

void ProShade::BinaryOp<ProShade::Add>::apply(uint64_t a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  PCSharedCount v9;
  void *v10;
  uint64_t v11;
  PCSharedCount v12;

  v4 = a1;
  (**a2)(&v10, a2, a1 + 48);
  (**a2)(&v7, a2, v4 + 80);
  if (v11 != *(_QWORD *)(v4 + 64) || v8 != *(_QWORD *)(v4 + 96))
  {
    v6 = operator new();
    ProShade::BinaryOp<ProShade::Add>::BinaryOp(v6, v11, v8, *(_DWORD *)(v4 + 44));
    v4 = v6;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v7 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v9);
  v10 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2D2C3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  PCSharedCount v6;
  va_list va;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6.var0 = va_arg(va1, PC_Sp_counted_base *);
  v8 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  v8 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

ProShade::Node *ProShade::BinaryOp<ProShade::Add>::clone(const PCSharedCount *a1)
{
  ProShade::Node *v2;

  v2 = (ProShade::Node *)operator new();
  ProShade::BinaryOp<ProShade::Add>::BinaryOp((uint64_t)v2);
  ProShade::BinaryOp<ProShade::Add>::copyFrom(v2, a1);
  return v2;
}

void sub_1B2D2C4A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Add>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3 < 1)
    PCArray_base::badIndex(a1);
  if (v3 <= 1)
    PCArray_base::badIndex(a1);
  return ProShade::BinaryOp<ProShade::Add>::computeBinary(*(const PCString **)(a2 + 16), (const PCString *)(*(_QWORD *)(a2 + 16) + 144), a3);
}

void `virtual thunk to'ProShade::BinaryOp<ProShade::Add>::~BinaryOp(_QWORD *a1)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E656FE18;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E656FED0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E656FF30;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E656FFE8;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E656FE18;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E656FED0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E656FF30;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E656FFE8;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::BinaryOp<ProShade::Add>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  PCShared_base *v8;
  PCShared_base *v9;
  const PCString *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656FEF0);
  *(_QWORD *)a1 = &unk_1E656FE18;
  *(_QWORD *)(a1 + 112) = &unk_1E656FED0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v8 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v8);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v9 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v9 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v9);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a3 + 28);
  if (v11 != 1)
  {
    if (v12 == 1)
    {
      v12 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v13 = v11 == v12;
      v12 = *(_DWORD *)(a2 + 28);
      if (!v13)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v10);
    }
  }
  v14 = *(_DWORD *)(a2 + 24);
  if (v14 <= *(_DWORD *)(a3 + 24))
    v14 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 28) = v12;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Add>::setFrequency(a1);
  return a1;
}

void sub_1B2D2C7CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Add>::BinaryOp(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E656FEF0);
  *(_QWORD *)a1 = &unk_1E656FE18;
  *(_QWORD *)(a1 + 112) = &unk_1E656FED0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B2D2C8E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;

  v7 = v3;
  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v7);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Add>::copyFrom(ProShade::Node *a1, const PCSharedCount *a2)
{
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a1 + 48, a2 + 6);
  ProShade::VarT<ProShade::Node>::operator=((uint64_t)a1 + 80, a2 + 10);
  return ProShade::Node::copyFrom(a1, (const ProShade::Node *)a2);
}

double ProShade::BinaryOp<ProShade::Subtract>::computeBinary(const PCString *a1, const PCString *a2, uint64_t a3)
{
  int var0;
  double result;

  if (SLODWORD(a1->var0) > 1)
  {
    if (LODWORD(a1->var0) != 2)
      return ProShade::computeBinaryType<ProShade::Subtract,double>((unsigned int *)a1, (unsigned int *)a2, a3);
    var0 = (int)a2->var0;
  }
  else
  {
    var0 = (int)a2->var0;
    if (SLODWORD(a2->var0) < 2)
    {
      ProShade::computeBinaryType<ProShade::Subtract,BOOL>(a1, a2, a3);
      return result;
    }
  }
  if (var0 <= 2)
  {
    ProShade::computeBinaryType<ProShade::Subtract,int>((unsigned int *)a1, (unsigned int *)a2, a3);
    return result;
  }
  return ProShade::computeBinaryType<ProShade::Subtract,double>((unsigned int *)a1, (unsigned int *)a2, a3);
}

BOOL ProShade::Subtract::simplify(const PCSharedCount *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  PCSharedCount v7[3];
  PCSharedCount v8;

  if (ProShade::isZero((uint64_t)a1))
  {
    ProShade::UnaryOp<ProShade::Negate>::unary(a2, v7);
    ProShade::VarT<ProShade::Node>::operator=(a3, v7);
    v7[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
    PCSharedCount::~PCSharedCount(&v8);
  }
  else
  {
    result = ProShade::isZero(a2);
    if (!result)
      return result;
    ProShade::VarT<ProShade::Node>::operator=(a3, a1);
  }
  return 1;
}

void sub_1B2D2CA38(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 3);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Subtract>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCShared_base *v6;
  PCShared_base *v7;
  const PCString *v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570168);
  *(_QWORD *)a1 = &unk_1E6570090;
  *(_QWORD *)(a1 + 112) = &unk_1E6570148;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v6 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v6);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v7 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v7 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v7);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a3 + 28);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      v10 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v11 = v9 == v10;
      v10 = *(_DWORD *)(a2 + 28);
      if (!v11)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
    }
  }
  v12 = *(_DWORD *)(a2 + 24);
  if (v12 <= *(_DWORD *)(a3 + 24))
    v12 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 28) = v10;
  ProShade::BinaryOp<ProShade::Add>::setFrequency(a1);
  return a1;
}

void sub_1B2D2CBA8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Subtract,BOOL>(const PCString *a1, const PCString *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *var0_low;
  uint64_t v12;
  BOOL *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  BOOL *v17;
  size_t v18;
  int var0_high;
  _BOOL8 result;
  const PCString *v21;
  int v22;
  PCException *exception;
  uint64_t v24;
  PCString v25;
  PCString v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(HIDWORD(a1->var0), a2);
  v8 = ProShade::shapeGetSize(HIDWORD(a2->var0), v7);
  v10 = v8;
  var0_low = (void *)LODWORD(a1->var0);
  if ((_DWORD)var0_low != 1)
  {
    MEMORY[0x1E0C80A78](v8);
    v13 = (BOOL *)&v24 - v12;
    bzero((char *)&v24 - v12, v14);
    v8 = (uint64_t)ProShade::copyData(var0_low, a1 + 2, 1, v13, Size);
  }
  v15 = (void *)LODWORD(a2->var0);
  if ((_DWORD)v15 != 1)
  {
    MEMORY[0x1E0C80A78](v8);
    v17 = (BOOL *)&v24 - v16;
    bzero((char *)&v24 - v16, v18);
    ProShade::copyData(v15, a2 + 2, 1, v17, v10);
  }
  var0_high = HIDWORD(a1->var0);
  if (var0_high != HIDWORD(a2->var0))
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)1, var0_high);
  result = ProShade::shapeIsVector(HIDWORD(a1->var0));
  v22 = HIDWORD(a1->var0) == 1 || result;
  if (v22 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v26, "not implemented yet");
    PCString::PCString(&v25, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v26, &v25, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"- operator doesn't apply to BOOL", v21);
  return result;
}

void sub_1B2D2CE10(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Subtract,int>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *v11;
  BOOL *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  BOOL *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _BOOL8 result;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  PCException *exception;
  uint64_t v28;
  PCString v29;
  PCString v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v10 = v8;
  v11 = (void *)*a1;
  if ((_DWORD)v11 == 2)
  {
    v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v12 = (BOOL *)&v28 - v13;
    bzero((char *)&v28 - v13, v14);
    v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 2, v12, Size);
  }
  v15 = (void *)*a2;
  if ((_DWORD)v15 == 2)
  {
    v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v16 = (BOOL *)&v28 - v17;
    bzero((char *)&v28 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 2, v16, v10);
  }
  v19 = a1[1];
  if (v19 != a2[1])
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)2, v19);
  result = ProShade::shapeIsVector(a1[1]);
  v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v30, "not implemented yet");
    PCString::PCString(&v29, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v30, &v29, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
  {
    v22 = (_DWORD *)(a3 + 16);
    v23 = Size;
    do
    {
      v25 = *(_DWORD *)v12;
      v12 += 4;
      v24 = v25;
      v26 = *(_DWORD *)v16;
      v16 += 4;
      *v22++ = v24 - v26;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B2D2D07C(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ProShade::computeBinaryType<ProShade::Subtract,double>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *v11;
  BOOL *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  BOOL *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _BOOL4 IsVector;
  double result;
  int v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  PCException *exception;
  uint64_t v29;
  PCString v30;
  PCString v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v10 = v8;
  v11 = (void *)*a1;
  if ((_DWORD)v11 == 3)
  {
    v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v12 = (BOOL *)&v29 - v13;
    bzero((char *)&v29 - v13, v14);
    v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 3, v12, Size);
  }
  v15 = (void *)*a2;
  if ((_DWORD)v15 == 3)
  {
    v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v16 = (BOOL *)&v29 - v17;
    bzero((char *)&v29 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 3, v16, v10);
  }
  v19 = a1[1];
  if (v19 != a2[1])
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)3, v19);
  IsVector = ProShade::shapeIsVector(a1[1]);
  v22 = a1[1] == 1 || IsVector;
  if (v22 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v31, "not implemented yet");
    PCString::PCString(&v30, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v31, &v30, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
  {
    v23 = (double *)(a3 + 16);
    v24 = Size;
    do
    {
      v25 = *(double *)v12;
      v12 += 8;
      v26 = v25;
      v27 = *(double *)v16;
      v16 += 8;
      result = v26 - v27;
      *v23++ = result;
      --v24;
    }
    while (v24);
  }
  return result;
}

void sub_1B2D2D2E8(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Subtract>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570090;
  *(_QWORD *)(a1 + 112) = &unk_1E6570148;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E65701A8;
  *(_QWORD *)(a1 + 112) = off_1E6570260;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::Subtract>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570090;
  *(_QWORD *)(a1 + 112) = &unk_1E6570148;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E65701A8;
  *(_QWORD *)(a1 + 112) = off_1E6570260;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  JUMPOUT(0x1B5E29170);
}

void ProShade::BinaryOp<ProShade::Subtract>::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int *v11;
  _BYTE *v12;
  unsigned int v13;
  size_t v14;
  unsigned int *v15;
  _BYTE *v16;
  unsigned int v17;
  size_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  int v25;
  size_t v26;
  unsigned int *v27;
  unsigned int v28;
  size_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE *v50;
  _QWORD *v51;
  _BYTE *v52;
  _BYTE *v53;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 16))(&v53);
  v5 = v53;
  if (v53)
    v6 = *((_DWORD *)v53 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  v8 = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((_BYTE *)v7 + 12) = 40;
  v7[1] = v8;
  memcpy((char *)v7 + 13, v5, v6);
  *((_BYTE *)v7 + v8 + 12) = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (unsigned int *)malloc_type_malloc(v10 + 14, 0x8903763CuLL);
  v11[1] = v10 + 1;
  v11[2] = v10 + 2;
  atomic_store(1u, v11);
  v12 = v11 + 3;
  atomic_store(0, v11);
  memcpy(v11 + 3, v7 + 3, v10);
  v12[v10] = 32;
  v12[v10 + 1] = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = (int)v11[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  atomic_store(1u, v15);
  v16 = v15 + 3;
  atomic_store(0, v15);
  memcpy(v15 + 3, v12, v14);
  v16[v14] = 45;
  v16[v14 + 1] = 0;
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 + 1, v15));
  v18 = (int)v15[1];
  v19 = (unsigned int *)malloc_type_malloc(v18 + 14, 0x8903763CuLL);
  v19[1] = v18 + 1;
  v19[2] = v18 + 2;
  atomic_store(1u, v19);
  v20 = v19 + 3;
  atomic_store(0, v19);
  memcpy(v19 + 3, v16, v18);
  *((_BYTE *)v20 + v18) = 32;
  *((_BYTE *)v20 + v18 + 1) = 0;
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v22 = *(_QWORD *)(a1 + 96);
  if (!v22)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v22 + 16))(&v52);
  v51 = a2;
  v23 = (int)v19[1];
  v24 = v52;
  if (v52)
    v25 = *((_DWORD *)v52 - 2);
  else
    v25 = 0;
  v26 = v23 + v25;
  v27 = (unsigned int *)malloc_type_malloc(v26 + 13, 0x8903763CuLL);
  v27[1] = v26;
  v27[2] = v26 + 1;
  atomic_store(1u, v27);
  atomic_store(0, v27);
  memcpy(v27 + 3, v19 + 3, v23);
  memcpy((char *)v27 + v23 + 12, v24, v25);
  *((_BYTE *)v27 + v26 + 12) = 0;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = (int)v27[1];
  v30 = (unsigned int *)malloc_type_malloc(v29 + 14, 0x8903763CuLL);
  v30[1] = v29 + 1;
  v30[2] = v29 + 2;
  atomic_store(1u, v30);
  v31 = v30 + 3;
  atomic_store(0, v30);
  memcpy(v30 + 3, v27 + 3, v29);
  *((_BYTE *)v31 + v29) = 41;
  *((_BYTE *)v31 + v29 + 1) = 0;
  *v51 = v30 + 3;
  do
    v32 = __ldaxr(v30);
  while (__stlxr(v32 + 1, v30));
  do
  {
    v33 = __ldaxr(v27);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v27));
  if (!v34)
    free(v27);
  if (v52)
  {
    v35 = (unsigned int *)(v52 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v52 = 0;
      if (v52)
        v38 = v52 - 12;
      else
        v38 = 0;
      free(v38);
    }
  }
  do
  {
    v39 = __ldaxr(v19);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v19));
  if (!v40)
    free(v19);
  do
  {
    v41 = __ldaxr(v15);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v15));
  if (!v42)
    free(v15);
  do
  {
    v43 = __ldaxr(v11);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v11));
  if (!v44)
    free(v11);
  do
  {
    v45 = __ldaxr(v7);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v7));
  if (!v46)
    free(v7);
  if (v53)
  {
    v47 = (unsigned int *)(v53 - 12);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      *v53 = 0;
      if (v53)
        v50 = v53 - 12;
      else
        v50 = 0;
      free(v50);
    }
  }
}

void sub_1B2D2D88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11, _BYTE *a12)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  do
  {
    v18 = __ldaxr(v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v16));
  if (!v19)
    free(v16);
  if (a11)
  {
    v20 = (unsigned int *)(a11 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  do
  {
    v23 = __ldaxr(v15);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v15));
  if (!v24)
    free(v15);
  do
  {
    v25 = __ldaxr(v14);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v14));
  if (!v26)
    free(v14);
  do
  {
    v27 = __ldaxr(v13);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v13));
  if (!v28)
    free(v13);
  do
  {
    v29 = __ldaxr(v12);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v12));
  if (!v30)
    free(v12);
  if (a12)
  {
    v31 = (unsigned int *)(a12 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Subtract>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "BinaryOp ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 14, 0x8903763CuLL);
  v5[1] = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *((_BYTE *)v6 + v4) = 45;
  *((_BYTE *)v6 + v4 + 1) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D2DAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

int8x8_t *ProShade::BinaryOp<ProShade::Subtract>::computeHash(uint64_t a1, int8x8_t *this)
{
  __n128 v5;

  PCHashWriteStream::writeValue(this, "-");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::Subtract>::apply(uint64_t a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  PCSharedCount v9;
  void *v10;
  uint64_t v11;
  PCSharedCount v12;

  v4 = a1;
  (**a2)(&v10, a2, a1 + 48);
  (**a2)(&v7, a2, v4 + 80);
  if (v11 != *(_QWORD *)(v4 + 64) || v8 != *(_QWORD *)(v4 + 96))
  {
    v6 = operator new();
    ProShade::BinaryOp<ProShade::Subtract>::BinaryOp(v6, v11, v8, *(_DWORD *)(v4 + 44));
    v4 = v6;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v7 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v9);
  v10 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2D2DC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  PCSharedCount v6;
  va_list va;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6.var0 = va_arg(va1, PC_Sp_counted_base *);
  v8 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  v8 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

ProShade::Node *ProShade::BinaryOp<ProShade::Subtract>::clone(const PCSharedCount *a1)
{
  ProShade::Node *v2;

  v2 = (ProShade::Node *)operator new();
  ProShade::BinaryOp<ProShade::Subtract>::BinaryOp((uint64_t)v2);
  ProShade::BinaryOp<ProShade::Add>::copyFrom(v2, a1);
  return v2;
}

void sub_1B2D2DCFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Subtract>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3 < 1)
    PCArray_base::badIndex(a1);
  if (v3 <= 1)
    PCArray_base::badIndex(a1);
  return ProShade::BinaryOp<ProShade::Subtract>::computeBinary(*(const PCString **)(a2 + 16), (const PCString *)(*(_QWORD *)(a2 + 16) + 144), a3);
}

void `virtual thunk to'ProShade::BinaryOp<ProShade::Subtract>::~BinaryOp(_QWORD *a1)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570090;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E6570148;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E65701A8;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E6570260;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570090;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E6570148;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E65701A8;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E6570260;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::BinaryOp<ProShade::Subtract>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  PCShared_base *v8;
  PCShared_base *v9;
  const PCString *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570168);
  *(_QWORD *)a1 = &unk_1E6570090;
  *(_QWORD *)(a1 + 112) = &unk_1E6570148;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v8 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v8);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v9 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v9 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v9);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a3 + 28);
  if (v11 != 1)
  {
    if (v12 == 1)
    {
      v12 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v13 = v11 == v12;
      v12 = *(_DWORD *)(a2 + 28);
      if (!v13)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v10);
    }
  }
  v14 = *(_DWORD *)(a2 + 24);
  if (v14 <= *(_DWORD *)(a3 + 24))
    v14 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 28) = v12;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Add>::setFrequency(a1);
  return a1;
}

void sub_1B2D2E024(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Subtract>::BinaryOp(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570168);
  *(_QWORD *)a1 = &unk_1E6570090;
  *(_QWORD *)(a1 + 112) = &unk_1E6570148;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B2D2E138(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;

  v7 = v3;
  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v7);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Multiply>::computeBinary(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  signed int v3;
  double result;

  if ((int)*a1 > 1)
  {
    if (*a1 != 2)
      return ProShade::computeBinaryType<ProShade::Multiply,double>(a1, a2, a3);
    v3 = *a2;
  }
  else
  {
    v3 = *a2;
    if ((int)*a2 < 2)
    {
      ProShade::computeBinaryType<ProShade::Multiply,BOOL>(a1, a2, a3);
      return result;
    }
  }
  if (v3 <= 2)
  {
    ProShade::computeBinaryType<ProShade::Multiply,int>(a1, a2, a3);
    return result;
  }
  return ProShade::computeBinaryType<ProShade::Multiply,double>(a1, a2, a3);
}

BOOL ProShade::Multiply::simplify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const PCSharedCount *v7;
  _BOOL8 result;
  uint64_t v9;
  const PCString *v10;
  int v11;
  const PCString *v12;
  const PCString *v13;
  int v14;
  const PCString *v15;
  int v16;
  PCSharedCount *v17;
  PCSharedCount v18[3];
  PCSharedCount v19;
  PCSharedCount v20[3];
  PCSharedCount v21;
  PCSharedCount v22[3];
  PCSharedCount v23;
  void *v24;
  _BYTE v25[16];
  PCSharedCount v26;

  if (ProShade::isZero(a1))
    goto LABEL_2;
  if (ProShade::isZero(a2) || ProShade::isOne(a1))
  {
    v6 = a3;
    v7 = (const PCSharedCount *)a2;
    goto LABEL_6;
  }
  if (ProShade::isOne(a2))
  {
LABEL_2:
    v6 = a3;
    v7 = (const PCSharedCount *)a1;
LABEL_6:
    ProShade::VarT<ProShade::Node>::operator=(v6, v7);
    return 1;
  }
  v9 = *(_QWORD *)(a2 + 16);
  if (!v9)
    throw_PCNullPointerException(1);
  result = ProShade::shapeIsVector(*(_DWORD *)(v9 + 28));
  if (result)
  {
    v11 = ProShade::VarT<ProShade::Node>::width(a1, v10);
    if (v11 > (int)ProShade::VarT<ProShade::Node>::width(a2, v12))
    {
      v14 = ProShade::VarT<ProShade::Node>::width(a1, v13);
      if (v14 != 3)
      {
        if (v14 != 4)
          return 0;
        v16 = ProShade::VarT<ProShade::Node>::width(a2, v15);
        if (v16 == 3)
        {
          ProShade::VarT<ProShade::Node>::VarT(v20, 1);
          ProShade::Vec4::Vec4(v22, a2, v20);
          ProShade::BinaryOp<ProShade::Multiply>::binary(&v24, a1, v22);
          v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          PCSharedCount::~PCSharedCount(&v23);
          v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          PCSharedCount::~PCSharedCount(&v21);
          ProShade::Selector_member<(ProShade::Selector_base::Selection)7>::operator ProShade::VarT<ProShade::Node>((uint64_t)v25, v20);
          ProShade::Selector_member<(ProShade::Selector_base::Selection)3>::operator ProShade::VarT<ProShade::Node>((uint64_t)v25, v18);
          ProShade::BinaryOp<ProShade::Divide>::binary((uint64_t)v20, (uint64_t)v18, (uint64_t)v22);
          ProShade::VarT<ProShade::Node>::operator=(a3, v22);
          goto LABEL_23;
        }
        if (v16 == 2)
        {
          ProShade::VarT<ProShade::Node>::VarT(v20, 0);
          ProShade::VarT<ProShade::Node>::VarT(v18, 1);
          ProShade::Vec4::Vec4(v22, a2, v20, v18);
          ProShade::BinaryOp<ProShade::Multiply>::binary(&v24, a1, v22);
          v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          PCSharedCount::~PCSharedCount(&v23);
          v18[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          PCSharedCount::~PCSharedCount(&v19);
          v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          PCSharedCount::~PCSharedCount(&v21);
          ProShade::Selector_member<(ProShade::Selector_base::Selection)4>::operator ProShade::VarT<ProShade::Node>((uint64_t)v25, v20);
          ProShade::Selector_member<(ProShade::Selector_base::Selection)3>::operator ProShade::VarT<ProShade::Node>((uint64_t)v25, v18);
          ProShade::BinaryOp<ProShade::Divide>::binary((uint64_t)v20, (uint64_t)v18, (uint64_t)v22);
          ProShade::VarT<ProShade::Node>::operator=(a3, v22);
LABEL_23:
          v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          PCSharedCount::~PCSharedCount(&v23);
          v18[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          PCSharedCount::~PCSharedCount(&v19);
          v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
          v17 = &v21;
          goto LABEL_24;
        }
      }
      if (ProShade::VarT<ProShade::Node>::width(a2, v15) == 2)
      {
        ProShade::VarT<ProShade::Node>::VarT(v20, 0);
        ProShade::Vec3::Vec3(v22, a2, v20);
        ProShade::BinaryOp<ProShade::Multiply>::binary(&v24, a1, v22);
        v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v23);
        v20[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v21);
        ProShade::Selector_member<(ProShade::Selector_base::Selection)4>::operator ProShade::VarT<ProShade::Node>((uint64_t)v25, v22);
        ProShade::VarT<ProShade::Node>::operator=(a3, v22);
        v22[0].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
        v17 = &v23;
LABEL_24:
        PCSharedCount::~PCSharedCount(v17);
        v24 = &unk_1E6569AC8;
        PCSharedCount::~PCSharedCount(&v26);
        return 1;
      }
    }
    return 0;
  }
  return result;
}

void sub_1B2D2E4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, PCSharedCount a12, uint64_t a13, uint64_t a14, uint64_t a15, PCSharedCount a16, uint64_t a17)
{
  PCSharedCount *v17;
  uint64_t v18;
  uint64_t v19;

  a17 = v18 + 16;
  PCSharedCount::~PCSharedCount(v17 + 3);
  PCSharedCount::~PCSharedCount(&a12);
  a13 = v18 + 16;
  PCSharedCount::~PCSharedCount(&a16);
  *(_QWORD *)(v19 - 80) = v18 + 16;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v19 - 56));
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Multiply>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCShared_base *v6;
  PCShared_base *v7;
  int v8;
  int v9;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65703E0);
  *(_QWORD *)a1 = &unk_1E6570308;
  *(_QWORD *)(a1 + 112) = &unk_1E65703C0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v6 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v6);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v7 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v7 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v7);
  v8 = ProShade::Multiply::resultShape(*(unsigned int *)(a2 + 28), *(unsigned int *)(a3 + 28));
  v9 = *(_DWORD *)(a2 + 24);
  if (v9 <= *(_DWORD *)(a3 + 24))
    v9 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 24) = v9;
  *(_DWORD *)(a1 + 28) = v8;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D2E74C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Multiply,BOOL>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  int v9;
  void *v10;
  BOOL *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  BOOL *v15;
  uint64_t v16;
  size_t v17;
  _BOOL8 result;
  const PCString *v19;
  int v20;
  const PCString *v21;
  int v22;
  PCException *exception;
  uint64_t v24;
  PCString v25;
  PCString v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v9 = v8;
  v10 = (void *)*a1;
  if ((_DWORD)v10 == 1)
  {
    v11 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v11 = (BOOL *)&v24 - v12;
    bzero((char *)&v24 - v12, v13);
    v8 = (uint64_t)ProShade::copyData(v10, (const PCString *)a1 + 2, 1, v11, Size);
  }
  v14 = (void *)*a2;
  if ((_DWORD)v14 == 1)
  {
    v15 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v15 = (BOOL *)&v24 - v16;
    bzero((char *)&v24 - v16, v17);
    ProShade::copyData(v14, (const PCString *)a2 + 2, 1, v15, v9);
  }
  result = ProShade::Multiply::computeBinaryType<BOOL>((char *)v11, (char *)v15, (uint64_t)a1, (uint64_t)a2, a3);
  if (!result)
  {
    v20 = a1[1];
    if (v20 != a2[1])
      ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v19);
    ProShade::Value::set(a3, (const PCString *)1, v20);
    result = ProShade::shapeIsVector(a1[1]);
    v22 = a1[1] == 1 || result;
    if (v22 != 1)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v26, "not implemented yet");
      PCString::PCString(&v25, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
      PCException::PCException(exception, &v26, &v25, 426);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    }
    if (Size >= 1)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"* operator doesn't apply to BOOL", v21);
  }
  return result;
}

void sub_1B2D2E9E0(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Multiply,int>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  int v9;
  void *v10;
  BOOL *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  BOOL *v15;
  uint64_t v16;
  size_t v17;
  _BOOL8 result;
  const PCString *v19;
  int v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  PCException *exception;
  uint64_t v28;
  PCString v29;
  PCString v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v9 = v8;
  v10 = (void *)*a1;
  if ((_DWORD)v10 == 2)
  {
    v11 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v11 = (BOOL *)&v28 - v12;
    bzero((char *)&v28 - v12, v13);
    v8 = (uint64_t)ProShade::copyData(v10, (const PCString *)a1 + 2, 2, v11, Size);
  }
  v14 = (void *)*a2;
  if ((_DWORD)v14 == 2)
  {
    v15 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v15 = (BOOL *)&v28 - v16;
    bzero((char *)&v28 - v16, v17);
    ProShade::copyData(v14, (const PCString *)a2 + 2, 2, v15, v9);
  }
  result = ProShade::Multiply::computeBinaryType<int>((int *)v11, (int *)v15, (uint64_t)a1, (uint64_t)a2, a3);
  if (!result)
  {
    v20 = a1[1];
    if (v20 != a2[1])
      ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v19);
    ProShade::Value::set(a3, (const PCString *)2, v20);
    result = ProShade::shapeIsVector(a1[1]);
    v21 = a1[1] == 1 || result;
    if (v21 != 1)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v30, "not implemented yet");
      PCString::PCString(&v29, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
      PCException::PCException(exception, &v30, &v29, 426);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    }
    if (Size >= 1)
    {
      v22 = (_DWORD *)(a3 + 16);
      v23 = Size;
      do
      {
        v25 = *(_DWORD *)v11;
        v11 += 4;
        v24 = v25;
        v26 = *(_DWORD *)v15;
        v15 += 4;
        *v22++ = v26 * v24;
        --v23;
      }
      while (v23);
    }
  }
  return result;
}

void sub_1B2D2EC68(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ProShade::computeBinaryType<ProShade::Multiply,double>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  int v9;
  void *v10;
  BOOL *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  BOOL *v15;
  uint64_t v16;
  size_t v17;
  const PCString *v18;
  double result;
  int v20;
  _BOOL4 IsVector;
  int v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  PCException *exception;
  uint64_t v29;
  PCString v30;
  PCString v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v9 = v8;
  v10 = (void *)*a1;
  if ((_DWORD)v10 == 3)
  {
    v11 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v11 = (BOOL *)&v29 - v12;
    bzero((char *)&v29 - v12, v13);
    v8 = (uint64_t)ProShade::copyData(v10, (const PCString *)a1 + 2, 3, v11, Size);
  }
  v14 = (void *)*a2;
  if ((_DWORD)v14 == 3)
  {
    v15 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v15 = (BOOL *)&v29 - v16;
    bzero((char *)&v29 - v16, v17);
    ProShade::copyData(v14, (const PCString *)a2 + 2, 3, v15, v9);
  }
  if (!ProShade::Multiply::computeBinaryType<double>((double *)v11, (double *)v15, (uint64_t)a1, (uint64_t)a2, a3))
  {
    v20 = a1[1];
    if (v20 != a2[1])
      ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v18);
    ProShade::Value::set(a3, (const PCString *)3, v20);
    IsVector = ProShade::shapeIsVector(a1[1]);
    v22 = a1[1] == 1 || IsVector;
    if (v22 != 1)
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::PCString(&v31, "not implemented yet");
      PCString::PCString(&v30, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
      PCException::PCException(exception, &v31, &v30, 426);
      *(_QWORD *)exception = &unk_1E64FFFA0;
    }
    if (Size >= 1)
    {
      v23 = (double *)(a3 + 16);
      v24 = Size;
      do
      {
        v25 = *(double *)v11;
        v11 += 8;
        v26 = v25;
        v27 = *(double *)v15;
        v15 += 8;
        result = v26 * v27;
        *v23++ = result;
        --v24;
      }
      while (v24);
    }
  }
  return result;
}

void sub_1B2D2EEF0(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ProShade::Multiply::computeBinaryType<BOOL>(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const PCString *v10;
  int v11;
  const PCString *v12;
  const PCString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  const PCString *v26;
  _BOOL4 IsVector;
  int v28;
  const PCString *v30;
  _BOOL4 v31;
  int v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  uint64_t Width;
  unsigned __int8 v39;
  uint64_t v40;
  _BYTE *v41;
  char v42;
  const PCString *v43;
  int v44;
  const PCString *v45;
  const PCString *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  char *v52;
  char *v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  const void *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  int v66;
  BOOL v67;
  char v68;
  _BOOL8 result;
  const PCString *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  BOOL v78;
  uint64_t v79;
  char *v80;
  unsigned __int8 *v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  const void *v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  int v94;
  BOOL v95;
  char v96;
  char *v97;
  BOOL v98;
  char v99;
  int v100;
  _BYTE *v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  char v115;
  uint64_t v116;
  char *v117;
  unsigned __int8 *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  BOOL v122;
  char v123;
  uint64_t v124;
  int v125;
  _DWORD *v126;
  int v127;
  char *v128;
  int v129;
  _DWORD *v130;
  int v131;
  unsigned int v132;
  const void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  char *v145;
  _BYTE *v146;
  uint64_t v147;
  char *v148;
  char v149;
  char *v150;
  unsigned __int8 *v151;
  uint64_t v152;
  _DWORD *v153;
  int v154;
  _DWORD *v155;
  int v156;
  _QWORD v158[4];
  _DWORD *v159;
  unsigned int v160;
  int v161;
  _DWORD *v162;
  char *v163;
  unsigned int v164;
  int v165;
  char *v166;
  _DWORD *v167;
  int v168;
  unsigned int v169;
  _BYTE *v170;
  _BYTE *v171;
  uint64_t v172;

  v172 = *MEMORY[0x1E0C80C00];
  if (!ProShade::shapeIsMatrix(*(_DWORD *)(a3 + 4))
    || !ProShade::shapeIsVector(*(_DWORD *)(a4 + 4))
    || (v11 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v10),
        v11 != ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v12)))
  {
    IsVector = ProShade::shapeIsVector(*(_DWORD *)(a3 + 4));
    v28 = *(_DWORD *)(a4 + 4);
    if (IsVector && v28 == 1)
    {
      Width = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v26);
      if ((int)Width > 4)
      {
        PCGenVector<BOOL>::PCGenVector((uint64_t)&v167, (uint64_t)a1, Width, 0);
        v58 = *a2;
        v59 = v168;
        PCGenBlockRef<BOOL>::PCGenBlockRef(&v163, v168);
        v164 = v59;
        v165 = 1;
        v60 = v163;
        v166 = v163;
        v61 = v170;
        v62 = v168;
        v63 = (int)v169;
        if (v169 == 1)
        {
          if (v168 >= 1)
          {
            v64 = v163;
            do
            {
              v66 = *v61++;
              v65 = v66;
              if (v58)
                v67 = v65 == 0;
              else
                v67 = 1;
              v68 = !v67;
              *v64++ = v68;
              --v62;
            }
            while (v62);
          }
        }
        else if (v168 >= 1)
        {
          v97 = v163;
          do
          {
            if (v58)
              v98 = *v61 == 0;
            else
              v98 = 1;
            v99 = !v98;
            *v97++ = v99;
            v61 += v63;
            --v62;
          }
          while (v62);
        }
        ProShade::Value::set(a5, (const PCString *)1, *(_DWORD *)(a3 + 4), v60);
LABEL_119:
        v128 = v163;
        if (v163)
        {
          v129 = *((_DWORD *)v163 - 1) - 1;
          *((_DWORD *)v163 - 1) = v129;
          if (!v129)
            MEMORY[0x1B5E2914C](v128 - 8, 0x1000C8077774924);
        }
        v130 = v167;
        if (!v167)
          return 1;
        goto LABEL_123;
      }
      if ((int)Width >= 1)
      {
        v39 = *a2;
        v40 = Width;
        v41 = &v167;
        do
        {
          v42 = *a1++;
          *v41++ = v42 * v39;
          --v40;
        }
        while (v40);
      }
LABEL_26:
      ProShade::Value::set(a5, (const PCString *)1, *(_DWORD *)(a3 + 4), &v167);
      return 1;
    }
    v31 = ProShade::shapeIsVector(v28);
    v32 = *(_DWORD *)(a3 + 4);
    if (v31 && v32 == 1)
    {
      v33 = ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v30);
      if ((int)v33 <= 4)
      {
        if ((int)v33 >= 1)
        {
          v34 = *a1;
          v35 = v33;
          v36 = &v167;
          do
          {
            v37 = *a2++;
            *v36++ = v37 * v34;
            --v35;
          }
          while (v35);
        }
        goto LABEL_10;
      }
      PCGenVector<BOOL>::PCGenVector((uint64_t)&v167, (uint64_t)a2, v33, 0);
      v86 = *a1;
      v87 = v168;
      PCGenBlockRef<BOOL>::PCGenBlockRef(&v163, v168);
      v164 = v87;
      v165 = 1;
      v88 = v163;
      v166 = v163;
      v89 = v170;
      v90 = v168;
      v91 = (int)v169;
      if (v169 == 1)
      {
        if (v168 >= 1)
        {
          v92 = v163;
          do
          {
            v94 = *v89++;
            v93 = v94;
            if (v86)
              v95 = v93 == 0;
            else
              v95 = 1;
            v96 = !v95;
            *v92++ = v96;
            --v90;
          }
          while (v90);
        }
      }
      else if (v168 >= 1)
      {
        v121 = v163;
        do
        {
          if (v86)
            v122 = *v89 == 0;
          else
            v122 = 1;
          v123 = !v122;
          *v121++ = v123;
          v89 += v91;
          --v90;
        }
        while (v90);
      }
      ProShade::Value::set(a5, (const PCString *)1, *(_DWORD *)(a4 + 4), v88);
      goto LABEL_119;
    }
    if (!ProShade::shapeIsVector(v32)
      || !ProShade::shapeIsMatrix(*(_DWORD *)(a4 + 4))
      || (v44 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v43),
          v44 != ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v45)))
    {
      result = ProShade::shapeIsMatrix(*(_DWORD *)(a3 + 4));
      if (!result)
        return result;
      v71 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v70);
      v72 = v71;
      if ((int)v71 <= 4)
      {
        MEMORY[0x1E0C80A78](v71);
        v74 = (char *)&v158[-1] - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
        if ((int)v72 >= 1)
        {
          v75 = 0;
          do
          {
            v76 = 0;
            v77 = (unsigned __int8 *)a2;
            do
            {
              v78 = 0;
              v79 = v72;
              v80 = a1;
              v81 = v77;
              do
              {
                v83 = *v80++;
                v82 = v83;
                v84 = *v81;
                v85 = v78;
                v78 = v85 + v84 * v83 != 0;
                v81 += v72;
                --v79;
              }
              while (v79);
              v74[v75 * v72 + v76++] = v85 != -(v84 * v82);
              ++v77;
            }
            while (v76 != v72);
            ++v75;
            a1 += v72;
          }
          while (v75 != v72);
        }
        ProShade::Value::set(a5, (const PCString *)1, *(_DWORD *)(a3 + 4), v74);
        return 1;
      }
      PCGenMatrix<BOOL>::PCGenMatrix((uint64_t)&v167, (uint64_t)a1, v71, v71, 1, 0);
      PCGenMatrix<BOOL>::PCGenMatrix((uint64_t)&v163, (uint64_t)a2, v72, v72, 1, 0);
      PCGenMatrix<BOOL>::PCGenMatrix((uint64_t)&v159, a5 + 16, v72, v72, 1, 0);
      operator%<BOOL>((uint64_t)&v167, (uint64_t)&v163, v158);
      PCGenMatrix<BOOL>::set<BOOL>((uint64_t)&v159, (uint64_t)v158);
      v124 = v158[0];
      if (v158[0])
      {
        v125 = *(_DWORD *)(v158[0] - 4) - 1;
        *(_DWORD *)(v158[0] - 4) = v125;
        if (!v125)
          MEMORY[0x1B5E2914C](v124 - 8, 0x1000C8077774924);
      }
LABEL_116:
      v126 = v159;
      if (v159)
      {
        v127 = *(v159 - 1) - 1;
        *(v159 - 1) = v127;
        if (!v127)
          MEMORY[0x1B5E2914C](v126 - 2, 0x1000C8077774924);
      }
      goto LABEL_119;
    }
    v47 = ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v46);
    v48 = v47;
    if ((int)v47 <= 4)
    {
      if ((int)v47 >= 1)
      {
        v49 = 0;
        do
        {
          v50 = 0;
          v51 = v47;
          v52 = a1;
          v53 = a2;
          do
          {
            v55 = *v52++;
            v54 = v55;
            v56 = *v53;
            v57 = v50;
            v50 = v57 + v56 * v55 != 0;
            v53 += v47;
            --v51;
          }
          while (v51);
          *((_BYTE *)&v167 + v49++) = v57 != -(v56 * v54);
          ++a2;
        }
        while (v49 != v47);
      }
      goto LABEL_26;
    }
    PCGenVector<BOOL>::PCGenVector((uint64_t)&v163, (uint64_t)a1, v47, 0);
    PCGenMatrix<BOOL>::PCGenMatrix((uint64_t)&v167, (uint64_t)a2, v48, v48, 1, 0);
    v132 = v169;
    PCGenBlockRef<BOOL>::PCGenBlockRef(&v159, v169);
    v160 = v132;
    v161 = 1;
    v133 = v159;
    v162 = v159;
    v134 = v169;
    if ((int)v169 < 1)
    {
LABEL_150:
      ProShade::Value::set(a5, (const PCString *)1, *(_DWORD *)(a3 + 4), v133);
      v153 = v159;
      if (v159)
      {
        v154 = *(v159 - 1) - 1;
        *(v159 - 1) = v154;
        if (!v154)
          MEMORY[0x1B5E2914C](v153 - 2, 0x1000C8077774924);
      }
      v155 = v167;
      if (v167)
      {
        v156 = *(v167 - 1) - 1;
        *(v167 - 1) = v156;
        if (!v156)
          MEMORY[0x1B5E2914C](v155 - 2, 0x1000C8077774924);
      }
      v130 = v163;
      if (!v163)
        return 1;
LABEL_123:
      v131 = *(v130 - 1) - 1;
      *(v130 - 1) = v131;
      if (!v131)
        MEMORY[0x1B5E2914C](v130 - 2, 0x1000C8077774924);
      return 1;
    }
    v135 = 0;
    v136 = v164;
    v137 = v165;
    v138 = v171;
    v139 = (int)v170;
    v140 = SHIDWORD(v170);
    v141 = v166;
    while (1)
    {
      if ((_DWORD)v137 == 1)
      {
        if ((_DWORD)v139 == 1)
        {
          if ((_DWORD)v136)
          {
            v142 = 0;
            v143 = 0;
            do
            {
              v143 = v143 != -(char)(v141[v142] * v138[v142]);
              ++v142;
            }
            while ((_DWORD)v136 != (_DWORD)v142);
            goto LABEL_149;
          }
        }
        else if ((int)v136 >= 1)
        {
          v143 = 0;
          v146 = v138;
          v147 = v136;
          v148 = v141;
          do
          {
            v149 = *v148++;
            v143 = v143 != -(char)(v149 * *v146);
            v146 += v139;
            --v147;
          }
          while (v147);
          goto LABEL_149;
        }
      }
      else if ((_DWORD)v139 == 1)
      {
        if ((int)v136 >= 1)
        {
          v144 = 0;
          v143 = 0;
          v145 = v141;
          do
          {
            v143 = v143 != -(char)(*v145 * v138[v144++]);
            v145 += v137;
          }
          while (v136 != v144);
          goto LABEL_149;
        }
      }
      else if ((int)v136 >= 1)
      {
        v143 = 0;
        v150 = v141;
        v151 = v138;
        v152 = v136;
        do
        {
          v143 = v143 + *v151 * *v150 != 0;
          v151 += v139;
          v150 += v137;
          --v152;
        }
        while (v152);
        goto LABEL_149;
      }
      v143 = 0;
LABEL_149:
      *((_BYTE *)v133 + v135++) = v143;
      v138 += v140;
      if (v135 == v134)
        goto LABEL_150;
    }
  }
  v14 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v13);
  v15 = v14;
  if ((int)v14 > 4)
  {
    PCGenMatrix<BOOL>::PCGenMatrix((uint64_t)&v167, (uint64_t)a1, v14, v14, 1, 0);
    PCGenVector<BOOL>::PCGenVector((uint64_t)&v163, (uint64_t)a2, v15, 0);
    v100 = v168;
    PCGenBlockRef<BOOL>::PCGenBlockRef(&v159, v168);
    v160 = v100;
    v161 = 1;
    v101 = v159;
    v162 = v159;
    v102 = v168;
    if (v168 >= 1)
    {
      v103 = 0;
      v104 = v171;
      v105 = v166;
      v106 = v165;
      v108 = (int)v170;
      v107 = SHIDWORD(v170);
      v109 = v169;
      do
      {
        if ((_DWORD)v107 == 1)
        {
          if ((_DWORD)v106 == 1)
          {
            if ((_DWORD)v109)
            {
              v110 = 0;
              v111 = 0;
              do
              {
                v111 = v111 != -(char)(v104[v110] * v105[v110]);
                ++v110;
              }
              while ((_DWORD)v109 != (_DWORD)v110);
              goto LABEL_101;
            }
          }
          else if ((int)v109 >= 1)
          {
            v116 = 0;
            v111 = 0;
            v117 = v105;
            do
            {
              v111 = v111 != -(char)(v104[v116++] * *v117);
              v117 += v106;
            }
            while (v109 != v116);
            goto LABEL_101;
          }
        }
        else if ((_DWORD)v106 == 1)
        {
          if ((int)v109 >= 1)
          {
            v111 = 0;
            v112 = v104;
            v113 = v109;
            v114 = v105;
            do
            {
              v115 = *v114++;
              v111 = v111 != -(char)(*v112 * v115);
              v112 += v107;
              --v113;
            }
            while (v113);
            goto LABEL_101;
          }
        }
        else if ((int)v109 >= 1)
        {
          v111 = 0;
          v118 = v104;
          v119 = v105;
          v120 = v109;
          do
          {
            v111 = v111 + *v119 * *v118 != 0;
            v119 += v106;
            v118 += v107;
            --v120;
          }
          while (v120);
          goto LABEL_101;
        }
        v111 = 0;
LABEL_101:
        v101[v103++] = v111;
        v104 += v108;
      }
      while (v103 != v102);
    }
    ProShade::Value::set(a5, (const PCString *)1, *(_DWORD *)(a4 + 4), v101);
    goto LABEL_116;
  }
  if ((int)v14 >= 1)
  {
    v16 = 0;
    do
    {
      v17 = 0;
      v18 = v14;
      v19 = a2;
      v20 = a1;
      do
      {
        v22 = *v20++;
        v21 = v22;
        v24 = *v19++;
        v23 = v24;
        v25 = v17;
        v17 = v25 + v24 * v21 != 0;
        --v18;
      }
      while (v18);
      *((_BYTE *)&v167 + v16++) = v25 != -(v23 * v21);
      a1 += v14;
    }
    while (v16 != v14);
  }
LABEL_10:
  ProShade::Value::set(a5, (const PCString *)1, *(_DWORD *)(a4 + 4), &v167);
  return 1;
}

void sub_1B2D2F954(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(v1 - 152);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 4) - 1;
    *(_DWORD *)(v3 - 4) = v4;
    if (!v4)
      MEMORY[0x1B5E2914C](v3 - 8, 0x1000C8077774924);
  }
  v5 = *(_QWORD *)(v1 - 88);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 4) - 1;
    *(_DWORD *)(v5 - 4) = v6;
    if (!v6)
      MEMORY[0x1B5E2914C](v5 - 8, 0x1000C8077774924);
  }
  v7 = *(_QWORD *)(v1 - 120);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 4) - 1;
    *(_DWORD *)(v7 - 4) = v8;
    if (!v8)
      MEMORY[0x1B5E2914C](v7 - 8, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PCGenMatrix<BOOL>::set<BOOL>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  __CFString *var0;
  int v28;
  PCException *exception;
  PCException *v30;
  PCString v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;

  if (a2 != result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result + 8);
    if (v4 != *(_DWORD *)(a2 + 8))
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"PCGenMatrix row mismatch %d != %d", &v31, *(unsigned int *)(v3 + 8), *(unsigned int *)(a2 + 8));
      PCException::PCException(exception, &v31);
      *(_QWORD *)exception = &unk_1E6511548;
    }
    v5 = *(_DWORD *)(result + 12);
    if (v5 != *(_DWORD *)(a2 + 12))
    {
      v30 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"PCGenMatrix col mismatch %d != %d", &v31, *(unsigned int *)(v3 + 12), *(unsigned int *)(a2 + 12));
      PCException::PCException(v30, &v31);
      *(_QWORD *)v30 = &unk_1E6511548;
    }
    v6 = *(_QWORD *)result;
    if (!*(_QWORD *)result)
    {
      result = (uint64_t)PCGenMatrix<BOOL>::resize((_DWORD *)result, v4, v5, *(_DWORD *)(result + 20) == 1);
      v6 = *(_QWORD *)v3;
    }
    if (*(_QWORD *)a2 == v6)
    {
      v31.var0 = 0;
      v32 = 0;
      v33 = 0x100000001;
      v34 = 0;
      result = PCGenMatrix<BOOL>::set<BOOL>(&v31, a2);
      v17 = *(unsigned int *)(v3 + 8);
      if ((int)v17 >= 1)
      {
        v18 = 0;
        v19 = *(unsigned int *)(v3 + 12);
        v20 = v34;
        v22 = (int)v33;
        v21 = SHIDWORD(v33);
        do
        {
          if ((int)v19 >= 1)
          {
            v23 = *(int *)(v3 + 20);
            v24 = (_BYTE *)(*(_QWORD *)(v3 + 24) + v18 * *(int *)(v3 + 16));
            v25 = v19;
            v26 = v20;
            do
            {
              result = *v26;
              *v24 = result;
              v24 += v23;
              v26 += v21;
              --v25;
            }
            while (v25);
          }
          ++v18;
          v20 += v22;
        }
        while (v18 != v17);
      }
      var0 = v31.var0;
      if (v31.var0)
      {
        v28 = HIDWORD(v31.var0[-1].length) - 1;
        HIDWORD(v31.var0[-1].length) = v28;
        if (!v28)
          return MEMORY[0x1B5E2914C](&var0[-1].length, 0x1000C8077774924);
      }
    }
    else
    {
      v7 = *(unsigned int *)(v3 + 8);
      if ((int)v7 >= 1)
      {
        v8 = 0;
        v9 = *(unsigned int *)(v3 + 12);
        v10 = *(unsigned __int8 **)(a2 + 24);
        v12 = *(int *)(a2 + 16);
        v11 = *(int *)(a2 + 20);
        do
        {
          if ((int)v9 >= 1)
          {
            v13 = *(int *)(v3 + 20);
            v14 = (_BYTE *)(*(_QWORD *)(v3 + 24) + v8 * *(int *)(v3 + 16));
            v15 = v9;
            v16 = v10;
            do
            {
              result = *v16;
              *v14 = result;
              v14 += v13;
              v16 += v11;
              --v15;
            }
            while (v15);
          }
          ++v8;
          v10 += v12;
        }
        while (v8 != v7);
      }
    }
  }
  return result;
}

void sub_1B2D2FD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

_QWORD *operator%<BOOL>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  int v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;

  v5 = *(int *)(a1 + 8);
  v6 = *(_DWORD *)(a2 + 12);
  result = PCGenBlockRef<BOOL>::PCGenBlockRef(a3, v6 * (int)v5);
  *((_DWORD *)result + 2) = v5;
  *((_DWORD *)result + 3) = v6;
  *((_DWORD *)result + 4) = 1;
  *((_DWORD *)result + 5) = v5;
  v8 = *result;
  result[3] = *result;
  v9 = *(unsigned int *)(a1 + 8);
  if ((int)v9 >= 1)
  {
    v10 = 0;
    v11 = *(_BYTE **)(a1 + 24);
    v12 = *(_BYTE **)(a2 + 24);
    v14 = *(int *)(a2 + 16);
    v13 = *(int *)(a2 + 20);
    v16 = *(int *)(a1 + 16);
    v15 = *(int *)(a1 + 20);
    v17 = *(unsigned int *)(a1 + 12);
    result = (_QWORD *)*(unsigned int *)(a2 + 12);
    while ((int)result < 1)
    {
LABEL_26:
      ++v10;
      v11 += v16;
      if (v10 == v9)
        return result;
    }
    v18 = 0;
    v19 = v12;
    while (1)
    {
      if ((_DWORD)v15 == 1)
      {
        if ((_DWORD)v14 == 1)
        {
          if ((_DWORD)v17)
          {
            v20 = 0;
            v21 = 0;
            do
            {
              v21 = v21 != -(char)(v11[v20] * v19[v20]);
              ++v20;
            }
            while ((_DWORD)v17 != (_DWORD)v20);
            goto LABEL_25;
          }
        }
        else if ((int)v17 >= 1)
        {
          v24 = 0;
          v21 = 0;
          v25 = v19;
          do
          {
            v21 = v21 != -(char)(v11[v24++] * *v25);
            v25 += v14;
          }
          while (v17 != v24);
          goto LABEL_25;
        }
      }
      else if ((_DWORD)v14 == 1)
      {
        if ((int)v17 >= 1)
        {
          v22 = 0;
          v21 = 0;
          v23 = v11;
          do
          {
            v21 = v21 != -(char)(*v23 * v19[v22++]);
            v23 += v15;
          }
          while (v17 != v22);
          goto LABEL_25;
        }
      }
      else if ((int)v17 >= 1)
      {
        v21 = 0;
        v26 = v11;
        v27 = v19;
        v28 = v17;
        do
        {
          v21 = v21 + *v27 * *v26 != 0;
          v27 += v14;
          v26 += v15;
          --v28;
        }
        while (v28);
        goto LABEL_25;
      }
      v21 = 0;
LABEL_25:
      *(_BYTE *)(v8 + v10 + (_QWORD)v18 * v5) = v21;
      v18 = (_QWORD *)((char *)v18 + 1);
      v19 += v13;
      if (v18 == result)
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t PCGenMatrix<BOOL>::PCGenMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7;
  int v8;
  __CFString *var0;
  int v11;
  PCException *exception;
  PCException *v15;
  PCString v16;
  __int128 v17;
  uint64_t v18;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  if (a5)
    v7 = a4;
  else
    v7 = 1;
  if (a5)
    v8 = 1;
  else
    v8 = a3;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v8;
  if ((a3 & 0x80000000) != 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix number of rows %d must be nonnegative", &v16, a3);
    PCException::PCException(exception, &v16);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v15 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix number of cols %d must be nonnegative", &v16, a4);
    PCException::PCException(v15, &v16);
    *(_QWORD *)v15 = &unk_1E6511548;
  }
  *(_QWORD *)(a1 + 24) = a2;
  if (a6)
  {
    PCGenMatrix<BOOL>::copy(a1, 0, (uint64_t)&v16);
    var0 = v16.var0;
    if (&v16 != (PCString *)a1)
    {
      *(_OWORD *)(a1 + 8) = v17;
      if (*(__CFString **)a1 != var0)
      {
        PCGenBlockRef<double>::deref((_QWORD *)a1);
        *(_QWORD *)a1 = var0;
        if (var0)
          ++HIDWORD(var0[-1].length);
      }
      var0 = v16.var0;
      *(_QWORD *)(a1 + 24) = v18;
    }
    if (var0)
    {
      v11 = HIDWORD(var0[-1].length) - 1;
      HIDWORD(var0[-1].length) = v11;
      if (!v11)
        MEMORY[0x1B5E2914C](&var0[-1].length, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1B2D300E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  _QWORD *v11;
  int v13;

  if (a11.var0)
  {
    v13 = HIDWORD(a11.var0[-1].length) - 1;
    HIDWORD(a11.var0[-1].length) = v13;
    if (!v13)
      MEMORY[0x1B5E2914C](&a11.var0[-1].length, 0x1000C8077774924);
  }
  PCGenBlockRef<double>::deref(v11);
  _Unwind_Resume(a1);
}

uint64_t PCGenMatrix<BOOL>::copy@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  PCGenBlockRef<BOOL>::PCGenBlockRef((_QWORD *)a3, v7 * v6);
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = v7;
  if (a2)
    v8 = v7;
  else
    v8 = 1;
  if (a2)
    v9 = 1;
  else
    v9 = v6;
  *(_DWORD *)(a3 + 16) = v8;
  *(_DWORD *)(a3 + 20) = v9;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)a3;
  return PCGenMatrix<BOOL>::set<BOOL>(a3, a1);
}

void sub_1B2D301D8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  PCGenBlockRef<double>::deref(v1);
  _Unwind_Resume(a1);
}

_QWORD *PCGenBlockRef<BOOL>::PCGenBlockRef(_QWORD *a1, int a2)
{
  size_t v4;
  _DWORD *v5;
  _DWORD *v6;

  if (a2)
  {
    v4 = a2;
    v5 = (_DWORD *)operator new[]();
    v6 = v5 + 2;
    *v5 = a2;
    v5[1] = 1;
    bzero(v5 + 2, v4);
  }
  else
  {
    v6 = 0;
  }
  *a1 = v6;
  return a1;
}

uint64_t PCGenVector<BOOL>::PCGenVector(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __CFString *v6;
  int v7;
  PCException *exception;
  PCString v10;
  uint64_t v11;
  __CFString *var0;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = 1;
  if ((a3 & 0x80000000) != 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenVector length %d must be nonnegative", &v10, a3);
    PCException::PCException(exception, &v10);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  *(_QWORD *)(a1 + 16) = a2;
  if (a4)
  {
    PCGenBlockRef<BOOL>::PCGenBlockRef(&v10, a3);
    v11 = a3 | 0x100000000;
    var0 = v10.var0;
    PCGenVector<BOOL>::set<BOOL>((uint64_t)&v10, a1);
    v6 = v10.var0;
    if (&v10 != (PCString *)a1)
    {
      *(_QWORD *)(a1 + 8) = v11;
      if (*(__CFString **)a1 != v6)
      {
        PCGenBlockRef<double>::deref((_QWORD *)a1);
        *(_QWORD *)a1 = v6;
        if (v6)
          ++HIDWORD(v6[-1].length);
      }
      v6 = v10.var0;
      *(_QWORD *)(a1 + 16) = var0;
    }
    if (v6)
    {
      v7 = HIDWORD(v6[-1].length) - 1;
      HIDWORD(v6[-1].length) = v7;
      if (!v7)
        MEMORY[0x1B5E2914C](&v6[-1].length, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1B2D303A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  _QWORD *v10;
  int v12;

  if (a10.var0)
  {
    v12 = HIDWORD(a10.var0[-1].length) - 1;
    HIDWORD(a10.var0[-1].length) = v12;
    if (!v12)
      MEMORY[0x1B5E2914C](&a10.var0[-1].length, 0x1000C8077774924);
  }
  PCGenBlockRef<double>::deref(v10);
  _Unwind_Resume(a1);
}

uint64_t PCGenVector<BOOL>::set<BOOL>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  __CFString *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  __CFString *v15;
  int v16;
  PCException *exception;
  PCString v19;
  int v20;
  int v21;
  __CFString *var0;

  if (a2 != a1)
  {
    v4 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v4 != *(_DWORD *)(a2 + 8))
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"PCGenVector length mismatch %d != %d", &v19, *(unsigned int *)(a1 + 8), *(unsigned int *)(a2 + 8));
      PCException::PCException(exception, &v19);
      *(_QWORD *)exception = &unk_1E6511548;
    }
    if (*(_QWORD *)a1)
      v5 = *(_QWORD *)a2 == *(_QWORD *)a1;
    else
      v5 = 0;
    if (v5)
    {
      PCGenBlockRef<BOOL>::PCGenBlockRef(&v19, *(_DWORD *)(a1 + 8));
      v20 = v4;
      v21 = 1;
      var0 = v19.var0;
      PCGenVector<BOOL>::set<BOOL>(&v19, a2);
      v10 = *(unsigned int *)(a1 + 8);
      if ((int)v10 >= 1)
      {
        v11 = var0;
        v12 = v21;
        v13 = *(_BYTE **)(a1 + 16);
        v14 = *(int *)(a1 + 12);
        do
        {
          *v13 = v11->isa;
          v13 += v14;
          v11 = (__CFString *)((char *)v11 + v12);
          --v10;
        }
        while (v10);
      }
      v15 = v19.var0;
      if (v19.var0)
      {
        v16 = HIDWORD(v19.var0[-1].length) - 1;
        HIDWORD(v19.var0[-1].length) = v16;
        if (!v16)
          MEMORY[0x1B5E2914C](&v15[-1].length, 0x1000C8077774924);
      }
    }
    else if ((int)v4 >= 1)
    {
      v6 = *(_BYTE **)(a2 + 16);
      v7 = *(int *)(a2 + 12);
      v8 = *(_BYTE **)(a1 + 16);
      v9 = *(int *)(a1 + 12);
      do
      {
        *v8 = *v6;
        v8 += v9;
        v6 += v7;
        --v4;
      }
      while (v4);
    }
  }
  return a1;
}

void sub_1B2D305AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

_DWORD *PCGenMatrix<BOOL>::resize(_DWORD *result, int a2, int a3, int a4)
{
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26[2];
  unsigned int v27[2];
  _QWORD v28[4];
  unsigned int v29[2];
  unsigned int v30[2];
  _QWORD v31[4];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v6 = (uint64_t)result;
  v8 = result[2];
  v7 = result[3];
  v10 = v8 != a2 || v7 != a3;
  if (a4)
  {
    if (a4 == 1)
    {
      if (result[5] == 1)
      {
        if (result[4] != v7)
          LOBYTE(v10) = 1;
        if (!v10)
          return result;
      }
    }
    else if (!v10)
    {
      return result;
    }
    v11 = 0;
LABEL_21:
    result = PCGenBlockRef<BOOL>::PCGenBlockRef(&v32, a3 * a2);
    *(_QWORD *)&v33 = __PAIR64__(a3, a2);
    if (v11)
      v12 = 1;
    else
      v12 = a3;
    if (v11)
      v13 = a2;
    else
      v13 = 1;
    *((_QWORD *)&v33 + 1) = __PAIR64__(v13, v12);
    v14 = *(_DWORD *)(v6 + 12);
    if (a2 >= *(_DWORD *)(v6 + 8))
      v15 = *(_DWORD *)(v6 + 8);
    else
      v15 = a2;
    v16 = v32;
    v34 = v32;
    if (a3 >= v14)
      v17 = v14;
    else
      v17 = a3;
    v18 = v15 - 1;
    if (v15 >= 1 && v17 >= 1)
    {
      v30[0] = 0;
      v30[1] = v15 - 1;
      v20 = v17 - 1;
      v29[0] = 0;
      v29[1] = v17 - 1;
      PCGenMatrix<BOOL>::operator()((uint64_t)result, v30, v29, (uint64_t)v31);
      v27[0] = 0;
      v27[1] = v18;
      v26[0] = 0;
      v26[1] = v20;
      PCGenMatrix<BOOL>::operator()(v6, v27, v26, (uint64_t)v28);
      result = (_DWORD *)PCGenMatrix<BOOL>::set<BOOL>(v31, v28);
      v21 = v28[0];
      if (v28[0])
      {
        v22 = *(_DWORD *)(v28[0] - 4) - 1;
        *(_DWORD *)(v28[0] - 4) = v22;
        if (!v22)
          result = (_DWORD *)MEMORY[0x1B5E2914C](v21 - 8, 0x1000C8077774924);
      }
      v23 = v31[0];
      if (v31[0])
      {
        v24 = *(_DWORD *)(v31[0] - 4) - 1;
        *(_DWORD *)(v31[0] - 4) = v24;
        if (!v24)
          result = (_DWORD *)MEMORY[0x1B5E2914C](v23 - 8, 0x1000C8077774924);
      }
      v16 = v32;
    }
    if (&v32 != (uint64_t *)v6)
    {
      *(_OWORD *)(v6 + 8) = v33;
      if (*(_QWORD *)v6 != v16)
      {
        result = PCGenBlockRef<double>::deref((_QWORD *)v6);
        *(_QWORD *)v6 = v16;
        if (v16)
          ++*(_DWORD *)(v16 - 4);
      }
      v16 = v32;
      *(_QWORD *)(v6 + 24) = v34;
    }
    if (v16)
    {
      v25 = *(_DWORD *)(v16 - 4) - 1;
      *(_DWORD *)(v16 - 4) = v25;
      if (!v25)
        return (_DWORD *)MEMORY[0x1B5E2914C](v16 - 8, 0x1000C8077774924);
    }
    return result;
  }
  if (result[4] != 1)
    goto LABEL_18;
  if (result[5] != v8)
    LOBYTE(v10) = 1;
  if (v10)
  {
LABEL_18:
    v11 = 1;
    goto LABEL_21;
  }
  return result;
}

void sub_1B2D30820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;
  int v20;

  v19 = *(_QWORD *)(v17 - 80);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 4) - 1;
    *(_DWORD *)(v19 - 4) = v20;
    if (!v20)
      MEMORY[0x1B5E2914C](v19 - 8, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PCGenMatrix<BOOL>::operator()@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  PCGenMatrix<BOOL>::checkRowIndex(a1, *a2);
  PCGenMatrix<BOOL>::checkRowIndex(a1, a2[1]);
  PCGenMatrix<BOOL>::checkColIndex(a1, *a3);
  result = PCGenMatrix<BOOL>::checkColIndex(a1, a3[1]);
  v10 = *a2;
  v9 = a2[1];
  v12 = *a3;
  v11 = a3[1];
  v14 = *(_DWORD *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 20);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)a1;
  *(_QWORD *)a4 = *(_QWORD *)a1;
  if (v16)
    ++*(_DWORD *)(v16 - 4);
  *(_DWORD *)(a4 + 8) = v9 - v10 + 1;
  *(_DWORD *)(a4 + 12) = v11 - v12 + 1;
  *(_DWORD *)(a4 + 16) = v14;
  *(_DWORD *)(a4 + 20) = v13;
  *(_QWORD *)(a4 + 24) = v15 + v14 * v10 + v13 * v12;
  return result;
}

uint64_t PCGenMatrix<BOOL>::checkRowIndex(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  PCException *exception;
  PCString v5;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(result + 8) <= (int)a2)
  {
    v3 = result;
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix row %d out of range 0..%d", &v5, a2, (*(_DWORD *)(v3 + 8) - 1));
    PCException::PCException(exception, &v5);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  return result;
}

void sub_1B2D30A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

uint64_t PCGenMatrix<BOOL>::checkColIndex(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  PCException *exception;
  PCString v5;

  if ((a2 & 0x80000000) != 0 || *(_DWORD *)(result + 12) <= (int)a2)
  {
    v3 = result;
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix col %d out of range 0..%d", &v5, a2, (*(_DWORD *)(v3 + 12) - 1));
    PCException::PCException(exception, &v5);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  return result;
}

void sub_1B2D30AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

BOOL ProShade::Multiply::computeBinaryType<int>(int *a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const PCString *v10;
  int v11;
  const PCString *v12;
  const PCString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int *v20;
  int v21;
  int v22;
  int v23;
  const PCString *v24;
  _BOOL4 IsVector;
  int v26;
  const PCString *v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  uint64_t Width;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  int v40;
  const PCString *v41;
  int v42;
  const PCString *v43;
  const PCString *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int *v50;
  int *v51;
  int v52;
  int v53;
  int v54;
  const void *v55;
  int *v56;
  uint64_t v57;
  _DWORD *v58;
  int v59;
  _BOOL8 result;
  const PCString *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  int v70;
  uint64_t v71;
  int *v72;
  int *v73;
  int v74;
  int v75;
  int v76;
  const void *v77;
  int *v78;
  uint64_t v79;
  _DWORD *v80;
  int v81;
  uint64_t v82;
  _DWORD *v83;
  int v84;
  _DWORD *v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  int *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  _DWORD *v99;
  uint64_t v100;
  int *v101;
  int v102;
  unint64_t v103;
  int *v104;
  _DWORD *v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  _DWORD *v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _DWORD *v116;
  _DWORD *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _DWORD *v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  _DWORD *v132;
  unint64_t v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char *v140;
  int v141;
  char *v142;
  int v143;
  _DWORD *v144;
  int v145;
  unsigned int v146;
  const void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  _DWORD *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  unint64_t v161;
  int *v162;
  _DWORD *v163;
  uint64_t v164;
  int *v165;
  int v166;
  int *v167;
  _DWORD *v168;
  uint64_t v169;
  char *v170;
  int v171;
  _DWORD *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  char *v181;
  unsigned int v182;
  int v183;
  const void *v184;
  char *v185;
  unsigned int v186;
  int v187;
  int *v188;
  _DWORD *v189;
  _DWORD *v190;
  int v191;
  unsigned int v192;
  int *v193;
  _DWORD *v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  if (!ProShade::shapeIsMatrix(*(_DWORD *)(a3 + 4))
    || !ProShade::shapeIsVector(*(_DWORD *)(a4 + 4))
    || (v11 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v10),
        v11 != ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v12)))
  {
    IsVector = ProShade::shapeIsVector(*(_DWORD *)(a3 + 4));
    v26 = *(_DWORD *)(a4 + 4);
    if (IsVector && v26 == 1)
    {
      Width = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v24);
      if ((int)Width > 4)
      {
        PCGenVector<int>::PCGenVector((uint64_t)&v190, (uint64_t)a1, Width, 0);
        v53 = *a2;
        v54 = v191;
        PCGenBlockRef<int>::PCGenBlockRef(&v185, v191);
        v186 = v54;
        v187 = 1;
        v55 = v185;
        v188 = (int *)v185;
        v56 = v193;
        v57 = v191;
        if (v192 == 1)
        {
          if (v191 >= 1)
          {
            v58 = v185;
            do
            {
              v59 = *v56++;
              *v58++ = v59 * v53;
              --v57;
            }
            while (v57);
          }
        }
        else if (v191 >= 1)
        {
          v82 = 4 * (int)v192;
          v83 = v185;
          do
          {
            *v83++ = *v56 * v53;
            v56 = (int *)((char *)v56 + v82);
            --v57;
          }
          while (v57);
        }
        ProShade::Value::set(a5, (const PCString *)2, *(_DWORD *)(a3 + 4), v55);
LABEL_121:
        v142 = v185;
        if (v185)
        {
          v143 = *((_DWORD *)v185 - 1) - 1;
          *((_DWORD *)v185 - 1) = v143;
          if (!v143)
            MEMORY[0x1B5E2914C](v142 - 8, 0x1000C8077774924);
        }
        v144 = v190;
        if (!v190)
          return 1;
        goto LABEL_125;
      }
      if ((int)Width >= 1)
      {
        v37 = *a2;
        v38 = Width;
        v39 = &v190;
        do
        {
          v40 = *a1++;
          *v39++ = v40 * v37;
          --v38;
        }
        while (v38);
      }
LABEL_26:
      ProShade::Value::set(a5, (const PCString *)2, *(_DWORD *)(a3 + 4), &v190);
      return 1;
    }
    v29 = ProShade::shapeIsVector(v26);
    v30 = *(_DWORD *)(a3 + 4);
    if (v29 && v30 == 1)
    {
      v31 = ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v28);
      if ((int)v31 <= 4)
      {
        if ((int)v31 >= 1)
        {
          v32 = *a1;
          v33 = v31;
          v34 = &v190;
          do
          {
            v35 = *a2++;
            *v34++ = v35 * v32;
            --v33;
          }
          while (v33);
        }
        goto LABEL_10;
      }
      PCGenVector<int>::PCGenVector((uint64_t)&v190, (uint64_t)a2, v31, 0);
      v75 = *a1;
      v76 = v191;
      PCGenBlockRef<int>::PCGenBlockRef(&v185, v191);
      v186 = v76;
      v187 = 1;
      v77 = v185;
      v188 = (int *)v185;
      v78 = v193;
      v79 = v191;
      if (v192 == 1)
      {
        if (v191 >= 1)
        {
          v80 = v185;
          do
          {
            v81 = *v78++;
            *v80++ = v81 * v75;
            --v79;
          }
          while (v79);
        }
      }
      else if (v191 >= 1)
      {
        v108 = 4 * (int)v192;
        v109 = v185;
        do
        {
          *v109++ = *v78 * v75;
          v78 = (int *)((char *)v78 + v108);
          --v79;
        }
        while (v79);
      }
      ProShade::Value::set(a5, (const PCString *)2, *(_DWORD *)(a4 + 4), v77);
      goto LABEL_121;
    }
    if (ProShade::shapeIsVector(v30) && ProShade::shapeIsMatrix(*(_DWORD *)(a4 + 4)))
    {
      v42 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v41);
      if (v42 == ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v43))
      {
        v45 = ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v44);
        v46 = v45;
        if ((int)v45 <= 4)
        {
          if ((int)v45 >= 1)
          {
            v47 = 0;
            do
            {
              v48 = 0;
              v49 = v45;
              v50 = a1;
              v51 = a2;
              do
              {
                v52 = *v50++;
                v48 += *v51 * v52;
                v51 += v45;
                --v49;
              }
              while (v49);
              *((_DWORD *)&v190 + v47++) = v48;
              ++a2;
            }
            while (v47 != v45);
          }
          goto LABEL_26;
        }
        PCGenVector<int>::PCGenVector((uint64_t)&v185, (uint64_t)a1, v45, 0);
        PCGenMatrix<int>::PCGenMatrix((uint64_t)&v190, (uint64_t)a2, v46, v46, 1, 0);
        v146 = v192;
        PCGenBlockRef<int>::PCGenBlockRef(&v181, v192);
        v182 = v146;
        v183 = 1;
        v147 = v181;
        v184 = v181;
        v148 = v192;
        if ((int)v192 < 1)
        {
LABEL_152:
          ProShade::Value::set(a5, (const PCString *)2, *(_DWORD *)(a3 + 4), v147);
          v170 = v181;
          if (v181)
          {
            v171 = *((_DWORD *)v181 - 1) - 1;
            *((_DWORD *)v181 - 1) = v171;
            if (!v171)
              MEMORY[0x1B5E2914C](v170 - 8, 0x1000C8077774924);
          }
          v172 = v190;
          if (v190)
          {
            v173 = *(v190 - 1) - 1;
            *(v190 - 1) = v173;
            if (!v173)
              MEMORY[0x1B5E2914C](v172 - 2, 0x1000C8077774924);
          }
          v144 = v185;
          if (!v185)
            return 1;
LABEL_125:
          v145 = *(v144 - 1) - 1;
          *(v144 - 1) = v145;
          if (!v145)
            MEMORY[0x1B5E2914C](v144 - 2, 0x1000C8077774924);
          return 1;
        }
        v149 = 0;
        v150 = v186;
        v151 = v187;
        v152 = v194;
        v153 = (int)v193;
        v154 = 4 * SHIDWORD(v193);
        v155 = 4 * (int)v193;
        v156 = v188;
        v157 = 4 * v187;
        v158 = 4 * v186;
        while (1)
        {
          if (v151 == 1)
          {
            if (v153 == 1)
            {
              if ((_DWORD)v150)
              {
                v159 = 0;
                v160 = 0;
                do
                {
                  v160 += v152[v159] * v156[v159];
                  ++v159;
                }
                while ((_DWORD)v150 != (_DWORD)v159);
                goto LABEL_151;
              }
            }
            else if ((int)v150 >= 1)
            {
              v160 = 0;
              v163 = v152;
              v164 = v150;
              v165 = v156;
              do
              {
                v166 = *v165++;
                v160 += *v163 * v166;
                v163 = (_DWORD *)((char *)v163 + v155);
                --v164;
              }
              while (v164);
              goto LABEL_151;
            }
          }
          else if (v153 == 1)
          {
            if ((int)v150 >= 1)
            {
              v161 = 0;
              v160 = 0;
              v162 = v156;
              do
              {
                v160 += v152[v161 / 4] * *v162;
                v161 += 4;
                v162 = (int *)((char *)v162 + v157);
              }
              while (v158 != v161);
              goto LABEL_151;
            }
          }
          else if ((int)v150 >= 1)
          {
            v160 = 0;
            v167 = v156;
            v168 = v152;
            v169 = v150;
            do
            {
              v160 += *v168 * *v167;
              v168 = (_DWORD *)((char *)v168 + v155);
              v167 = (int *)((char *)v167 + v157);
              --v169;
            }
            while (v169);
            goto LABEL_151;
          }
          v160 = 0;
LABEL_151:
          *((_DWORD *)v147 + v149++) = v160;
          v152 = (_DWORD *)((char *)v152 + v154);
          if (v149 == v148)
            goto LABEL_152;
        }
      }
    }
    result = ProShade::shapeIsMatrix(*(_DWORD *)(a3 + 4));
    if (!result)
      return result;
    v62 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v61);
    v63 = v62;
    if ((int)v62 <= 4)
    {
      MEMORY[0x1E0C80A78](v62);
      v65 = (char *)&v174 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
      if ((int)v63 >= 1)
      {
        v66 = 0;
        v67 = 4 * v63;
        do
        {
          v68 = 0;
          v69 = a2;
          do
          {
            v70 = 0;
            v71 = v63;
            v72 = a1;
            v73 = v69;
            do
            {
              v74 = *v72++;
              v70 += *v73 * v74;
              v73 = (int *)((char *)v73 + v67);
              --v71;
            }
            while (v71);
            *(_DWORD *)&v65[4 * v66 * v63 + 4 * v68++] = v70;
            ++v69;
          }
          while (v68 != v63);
          ++v66;
          a1 = (int *)((char *)a1 + v67);
        }
        while (v66 != v63);
      }
      ProShade::Value::set(a5, (const PCString *)2, *(_DWORD *)(a3 + 4), v65);
      return 1;
    }
    PCGenMatrix<int>::PCGenMatrix((uint64_t)&v190, (uint64_t)a1, v62, v62, 1, 0);
    PCGenMatrix<int>::PCGenMatrix((uint64_t)&v185, (uint64_t)a2, v63, v63, 1, 0);
    PCGenMatrix<int>::PCGenMatrix((uint64_t)&v181, a5 + 16, v63, v63, 1, 0);
    v110 = v191;
    v111 = v187;
    PCGenBlockRef<int>::PCGenBlockRef(&v175, v187 * v191);
    v176 = v110;
    v177 = v111;
    v178 = 1;
    v179 = v110;
    v112 = v175;
    v180 = v175;
    v113 = v191;
    if (v191 < 1)
    {
LABEL_115:
      PCGenMatrix<int>::set<int>(&v181, (uint64_t)&v175);
      v138 = v175;
      if (v175)
      {
        v139 = *(_DWORD *)(v175 - 4) - 1;
        *(_DWORD *)(v175 - 4) = v139;
        if (!v139)
          MEMORY[0x1B5E2914C](v138 - 8, 0x1000C8077774924);
      }
LABEL_118:
      v140 = v181;
      if (v181)
      {
        v141 = *((_DWORD *)v181 - 1) - 1;
        *((_DWORD *)v181 - 1) = v141;
        if (!v141)
          MEMORY[0x1B5E2914C](v140 - 8, 0x1000C8077774924);
      }
      goto LABEL_121;
    }
    v114 = 0;
    v115 = v110;
    v116 = v194;
    v117 = v189;
    v118 = (int)v188;
    v119 = v192;
    v120 = v187;
    v121 = 4 * SHIDWORD(v188);
    v122 = 4 * (int)v188;
    v123 = 4 * (int)v193;
    v124 = HIDWORD(v193);
    v125 = 4 * SHIDWORD(v193);
    v126 = 4 * v192;
    while ((int)v120 < 1)
    {
LABEL_114:
      ++v114;
      v116 = (_DWORD *)((char *)v116 + v123);
      if (v114 == v113)
        goto LABEL_115;
    }
    v127 = 0;
    v128 = v117;
    while (1)
    {
      if (v124 == 1)
      {
        if (v118 == 1)
        {
          if ((_DWORD)v119)
          {
            v129 = 0;
            v130 = 0;
            do
            {
              v130 += v128[v129] * v116[v129];
              ++v129;
            }
            while ((_DWORD)v119 != (_DWORD)v129);
            goto LABEL_113;
          }
        }
        else if ((int)v119 >= 1)
        {
          v133 = 0;
          v130 = 0;
          v134 = v128;
          do
          {
            v130 += *v134 * v116[v133 / 4];
            v133 += 4;
            v134 = (_DWORD *)((char *)v134 + v122);
          }
          while (v126 != v133);
          goto LABEL_113;
        }
      }
      else if (v118 == 1)
      {
        if ((int)v119 >= 1)
        {
          v131 = 0;
          v130 = 0;
          v132 = v116;
          do
          {
            v130 += v128[v131 / 4] * *v132;
            v131 += 4;
            v132 = (_DWORD *)((char *)v132 + v125);
          }
          while (v126 != v131);
          goto LABEL_113;
        }
      }
      else if ((int)v119 >= 1)
      {
        v130 = 0;
        v135 = v116;
        v136 = v128;
        v137 = v119;
        do
        {
          v130 += *v136 * *v135;
          v136 = (_DWORD *)((char *)v136 + v122);
          v135 = (_DWORD *)((char *)v135 + v125);
          --v137;
        }
        while (v137);
        goto LABEL_113;
      }
      v130 = 0;
LABEL_113:
      *(_DWORD *)(v112 + 4 * (v114 + v127 * v115)) = v130;
      ++v127;
      v128 = (_DWORD *)((char *)v128 + v121);
      if (v127 == v120)
        goto LABEL_114;
    }
  }
  v14 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v13);
  v15 = v14;
  if ((int)v14 > 4)
  {
    PCGenMatrix<int>::PCGenMatrix((uint64_t)&v190, (uint64_t)a1, v14, v14, 1, 0);
    PCGenVector<int>::PCGenVector((uint64_t)&v185, (uint64_t)a2, v15, 0);
    v84 = v191;
    PCGenBlockRef<int>::PCGenBlockRef(&v181, v191);
    v182 = v84;
    v183 = 1;
    v85 = v181;
    v184 = v181;
    v86 = v191;
    if (v191 >= 1)
    {
      v87 = 0;
      v88 = v194;
      v89 = v188;
      v90 = v187;
      v91 = v192;
      v92 = 4 * v187;
      v93 = 4 * (int)v193;
      v94 = HIDWORD(v193);
      v95 = 4 * SHIDWORD(v193);
      v96 = 4 * v192;
      do
      {
        if (v94 == 1)
        {
          if (v90 == 1)
          {
            if ((_DWORD)v91)
            {
              v97 = 0;
              v98 = 0;
              do
              {
                v98 += v89[v97] * v88[v97];
                ++v97;
              }
              while ((_DWORD)v91 != (_DWORD)v97);
              goto LABEL_83;
            }
          }
          else if ((int)v91 >= 1)
          {
            v103 = 0;
            v98 = 0;
            v104 = v89;
            do
            {
              v98 += *v104 * v88[v103 / 4];
              v103 += 4;
              v104 = (int *)((char *)v104 + v92);
            }
            while (v96 != v103);
            goto LABEL_83;
          }
        }
        else if (v90 == 1)
        {
          if ((int)v91 >= 1)
          {
            v98 = 0;
            v99 = v88;
            v100 = v91;
            v101 = v89;
            do
            {
              v102 = *v101++;
              v98 += v102 * *v99;
              v99 = (_DWORD *)((char *)v99 + v95);
              --v100;
            }
            while (v100);
            goto LABEL_83;
          }
        }
        else if ((int)v91 >= 1)
        {
          v98 = 0;
          v105 = v88;
          v106 = v89;
          v107 = v91;
          do
          {
            v98 += *v106 * *v105;
            v106 = (int *)((char *)v106 + v92);
            v105 = (_DWORD *)((char *)v105 + v95);
            --v107;
          }
          while (v107);
          goto LABEL_83;
        }
        v98 = 0;
LABEL_83:
        v85[v87++] = v98;
        v88 = (_DWORD *)((char *)v88 + v93);
      }
      while (v87 != v86);
    }
    ProShade::Value::set(a5, (const PCString *)2, *(_DWORD *)(a4 + 4), v85);
    goto LABEL_118;
  }
  if ((int)v14 >= 1)
  {
    v16 = 0;
    do
    {
      v17 = 0;
      v18 = v14;
      v19 = a2;
      v20 = a1;
      do
      {
        v22 = *v20++;
        v21 = v22;
        v23 = *v19++;
        v17 += v23 * v21;
        --v18;
      }
      while (v18);
      *((_DWORD *)&v190 + v16++) = v17;
      a1 += v14;
    }
    while (v16 != v14);
  }
LABEL_10:
  ProShade::Value::set(a5, (const PCString *)2, *(_DWORD *)(a4 + 4), &v190);
  return 1;
}

void sub_1B2D31634(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(v1 - 152);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 4) - 1;
    *(_DWORD *)(v3 - 4) = v4;
    if (!v4)
      MEMORY[0x1B5E2914C](v3 - 8, 0x1000C8077774924);
  }
  v5 = *(_QWORD *)(v1 - 88);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 4) - 1;
    *(_DWORD *)(v5 - 4) = v6;
    if (!v6)
      MEMORY[0x1B5E2914C](v5 - 8, 0x1000C8077774924);
  }
  v7 = *(_QWORD *)(v1 - 120);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 4) - 1;
    *(_DWORD *)(v7 - 4) = v8;
    if (!v8)
      MEMORY[0x1B5E2914C](v7 - 8, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *PCGenMatrix<int>::set<int>(_DWORD *result, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __CFString *var0;
  int v20;
  PCException *exception;
  PCException *v22;
  PCString v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((_DWORD *)a2 != result)
  {
    v3 = result;
    v4 = result[2];
    if (v4 != *(_DWORD *)(a2 + 8))
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"PCGenMatrix row mismatch %d != %d", &v23, v3[2], *(unsigned int *)(a2 + 8));
      PCException::PCException(exception, &v23);
      *(_QWORD *)exception = &unk_1E6511548;
    }
    v5 = result[3];
    if (v5 != *(_DWORD *)(a2 + 12))
    {
      v22 = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"PCGenMatrix col mismatch %d != %d", &v23, v3[3], *(unsigned int *)(a2 + 12));
      PCException::PCException(v22, &v23);
      *(_QWORD *)v22 = &unk_1E6511548;
    }
    v6 = *(_QWORD *)result;
    if (!*(_QWORD *)result)
    {
      result = PCGenMatrix<int>::resize(result, v4, v5, result[5] == 1);
      v6 = *(_QWORD *)v3;
    }
    if (*(_QWORD *)a2 == v6)
    {
      v23.var0 = 0;
      v24 = 0;
      v25 = 0x100000001;
      v26 = 0;
      result = (_DWORD *)PCGenMatrix<int>::set<int>(&v23, a2);
      v13 = v3[2];
      if (v13 >= 1)
      {
        v14 = 0;
        v15 = v26;
        v16 = v3[3];
        do
        {
          if (v16 >= 1)
          {
            v17 = 0;
            v18 = *((_QWORD *)v3 + 3);
            do
            {
              *(_DWORD *)(v18 + 4 * (v3[5] * v17 + v3[4] * v14)) = *(_DWORD *)(v15
                                                                               + 4
                                                                               * (HIDWORD(v25) * v17 + (int)v25 * v14));
              ++v17;
              v16 = v3[3];
            }
            while (v17 < v16);
            v13 = v3[2];
          }
          ++v14;
        }
        while (v14 < v13);
      }
      var0 = v23.var0;
      if (v23.var0)
      {
        v20 = HIDWORD(v23.var0[-1].length) - 1;
        HIDWORD(v23.var0[-1].length) = v20;
        if (!v20)
          return (_DWORD *)MEMORY[0x1B5E2914C](&var0[-1].length, 0x1000C8077774924);
      }
    }
    else
    {
      v7 = v3[2];
      if (v7 >= 1)
      {
        v8 = 0;
        v9 = *(_QWORD *)(a2 + 24);
        v10 = v3[3];
        do
        {
          if (v10 >= 1)
          {
            v11 = 0;
            v12 = *((_QWORD *)v3 + 3);
            do
            {
              *(_DWORD *)(v12 + 4 * (v3[5] * v11 + v3[4] * v8)) = *(_DWORD *)(v9
                                                                              + 4
                                                                              * (*(_DWORD *)(a2 + 20) * v11
                                                                               + *(_DWORD *)(a2 + 16) * v8));
              ++v11;
              v10 = v3[3];
            }
            while (v11 < v10);
            v7 = v3[2];
          }
          ++v8;
        }
        while (v8 < v7);
      }
    }
  }
  return result;
}

void sub_1B2D31A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  PCString::~PCString(&a11);
  _Unwind_Resume(a1);
}

uint64_t PCGenMatrix<int>::PCGenMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7;
  int v8;
  __CFString *var0;
  int v11;
  PCException *exception;
  PCException *v15;
  PCString v16;
  __int128 v17;
  uint64_t v18;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  if (a5)
    v7 = a4;
  else
    v7 = 1;
  if (a5)
    v8 = 1;
  else
    v8 = a3;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v8;
  if ((a3 & 0x80000000) != 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix number of rows %d must be nonnegative", &v16, a3);
    PCException::PCException(exception, &v16);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v15 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix number of cols %d must be nonnegative", &v16, a4);
    PCException::PCException(v15, &v16);
    *(_QWORD *)v15 = &unk_1E6511548;
  }
  *(_QWORD *)(a1 + 24) = a2;
  if (a6)
  {
    PCGenMatrix<int>::copy(a1, 0, (uint64_t)&v16);
    var0 = v16.var0;
    if (&v16 != (PCString *)a1)
    {
      *(_OWORD *)(a1 + 8) = v17;
      if (*(__CFString **)a1 != var0)
      {
        PCGenBlockRef<double>::deref((_QWORD *)a1);
        *(_QWORD *)a1 = var0;
        if (var0)
          ++HIDWORD(var0[-1].length);
      }
      var0 = v16.var0;
      *(_QWORD *)(a1 + 24) = v18;
    }
    if (var0)
    {
      v11 = HIDWORD(var0[-1].length) - 1;
      HIDWORD(var0[-1].length) = v11;
      if (!v11)
        MEMORY[0x1B5E2914C](&var0[-1].length, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1B2D31C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  _QWORD *v11;
  int v13;

  if (a11.var0)
  {
    v13 = HIDWORD(a11.var0[-1].length) - 1;
    HIDWORD(a11.var0[-1].length) = v13;
    if (!v13)
      MEMORY[0x1B5E2914C](&a11.var0[-1].length, 0x1000C8077774924);
  }
  PCGenBlockRef<double>::deref(v11);
  _Unwind_Resume(a1);
}

_DWORD *PCGenMatrix<int>::copy@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 12);
  PCGenBlockRef<int>::PCGenBlockRef((_QWORD *)a3, v7 * v6);
  *(_DWORD *)(a3 + 8) = v6;
  *(_DWORD *)(a3 + 12) = v7;
  if (a2)
    v8 = v7;
  else
    v8 = 1;
  if (a2)
    v9 = 1;
  else
    v9 = v6;
  *(_DWORD *)(a3 + 16) = v8;
  *(_DWORD *)(a3 + 20) = v9;
  *(_QWORD *)(a3 + 24) = *(_QWORD *)a3;
  return PCGenMatrix<int>::set<int>((_DWORD *)a3, a1);
}

void sub_1B2D31D04(_Unwind_Exception *a1)
{
  _QWORD *v1;

  PCGenBlockRef<double>::deref(v1);
  _Unwind_Resume(a1);
}

_QWORD *PCGenBlockRef<int>::PCGenBlockRef(_QWORD *a1, int a2)
{
  int v3;
  _DWORD *v4;
  _DWORD *v5;

  if (a2)
  {
    v3 = 4 * a2;
    v4 = (_DWORD *)operator new[]();
    v5 = v4 + 2;
    *v4 = v3;
    v4[1] = 1;
    bzero(v4 + 2, v3);
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
  return a1;
}

uint64_t PCGenVector<int>::PCGenVector(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __CFString *v6;
  int v7;
  PCException *exception;
  PCString v10;
  uint64_t v11;
  __CFString *var0;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = 1;
  if ((a3 & 0x80000000) != 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenVector length %d must be nonnegative", &v10, a3);
    PCException::PCException(exception, &v10);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  *(_QWORD *)(a1 + 16) = a2;
  if (a4)
  {
    PCGenBlockRef<int>::PCGenBlockRef(&v10, a3);
    v11 = a3 | 0x100000000;
    var0 = v10.var0;
    PCGenVector<int>::set<int>((uint64_t)&v10, a1);
    v6 = v10.var0;
    if (&v10 != (PCString *)a1)
    {
      *(_QWORD *)(a1 + 8) = v11;
      if (*(__CFString **)a1 != v6)
      {
        PCGenBlockRef<double>::deref((_QWORD *)a1);
        *(_QWORD *)a1 = v6;
        if (v6)
          ++HIDWORD(v6[-1].length);
      }
      v6 = v10.var0;
      *(_QWORD *)(a1 + 16) = var0;
    }
    if (v6)
    {
      v7 = HIDWORD(v6[-1].length) - 1;
      HIDWORD(v6[-1].length) = v7;
      if (!v7)
        MEMORY[0x1B5E2914C](&v6[-1].length, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1B2D31ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  _QWORD *v10;
  int v12;

  if (a10.var0)
  {
    v12 = HIDWORD(a10.var0[-1].length) - 1;
    HIDWORD(a10.var0[-1].length) = v12;
    if (!v12)
      MEMORY[0x1B5E2914C](&a10.var0[-1].length, 0x1000C8077774924);
  }
  PCGenBlockRef<double>::deref(v10);
  _Unwind_Resume(a1);
}

uint64_t PCGenVector<int>::set<int>(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __CFString *v10;
  uint64_t v11;
  __CFString *v12;
  int v13;
  PCException *exception;
  PCString v16;
  int v17;
  int v18;
  __CFString *var0;

  if (a2 != a1)
  {
    v4 = *(_DWORD *)(a1 + 8);
    if (v4 != *(_DWORD *)(a2 + 8))
    {
      exception = (PCException *)__cxa_allocate_exception(0x40uLL);
      PCString::ssprintf((PCString *)"PCGenVector length mismatch %d != %d", &v16, *(unsigned int *)(a1 + 8), *(unsigned int *)(a2 + 8));
      PCException::PCException(exception, &v16);
      *(_QWORD *)exception = &unk_1E6511548;
    }
    if (*(_QWORD *)a1)
      v5 = *(_QWORD *)a2 == *(_QWORD *)a1;
    else
      v5 = 0;
    if (v5)
    {
      PCGenBlockRef<int>::PCGenBlockRef(&v16, *(_DWORD *)(a1 + 8));
      v17 = v4;
      v18 = 1;
      var0 = v16.var0;
      PCGenVector<int>::set<int>(&v16, a2);
      if (*(int *)(a1 + 8) >= 1)
      {
        v9 = 0;
        v10 = var0;
        v11 = *(_QWORD *)(a1 + 16);
        do
        {
          *(_DWORD *)(v11 + 4 * *(_DWORD *)(a1 + 12) * v9) = *((_DWORD *)&v10->isa + v18 * v9);
          ++v9;
        }
        while (v9 < *(_DWORD *)(a1 + 8));
      }
      v12 = v16.var0;
      if (v16.var0)
      {
        v13 = HIDWORD(v16.var0[-1].length) - 1;
        HIDWORD(v16.var0[-1].length) = v13;
        if (!v13)
          MEMORY[0x1B5E2914C](&v12[-1].length, 0x1000C8077774924);
      }
    }
    else if (v4 >= 1)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 16);
      v8 = *(_QWORD *)(a1 + 16);
      do
      {
        *(_DWORD *)(v8 + 4 * *(_DWORD *)(a1 + 12) * v6) = *(_DWORD *)(v7 + 4 * *(_DWORD *)(a2 + 12) * v6);
        ++v6;
      }
      while (v6 < *(_DWORD *)(a1 + 8));
    }
  }
  return a1;
}

void sub_1B2D320EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, PCString a12)
{
  PCString::~PCString(&a12);
  _Unwind_Resume(a1);
}

_DWORD *PCGenMatrix<int>::resize(_DWORD *result, int a2, int a3, int a4)
{
  uint64_t v6;
  int v7;
  int v8;
  _BOOL4 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26[2];
  unsigned int v27[2];
  _QWORD v28[4];
  unsigned int v29[2];
  unsigned int v30[2];
  _QWORD v31[4];
  uint64_t v32;
  __int128 v33;
  uint64_t v34;

  v6 = (uint64_t)result;
  v8 = result[2];
  v7 = result[3];
  v10 = v8 != a2 || v7 != a3;
  if (a4)
  {
    if (a4 == 1)
    {
      if (result[5] == 1)
      {
        if (result[4] != v7)
          LOBYTE(v10) = 1;
        if (!v10)
          return result;
      }
    }
    else if (!v10)
    {
      return result;
    }
    v11 = 0;
LABEL_21:
    result = PCGenBlockRef<int>::PCGenBlockRef(&v32, a3 * a2);
    *(_QWORD *)&v33 = __PAIR64__(a3, a2);
    if (v11)
      v12 = 1;
    else
      v12 = a3;
    if (v11)
      v13 = a2;
    else
      v13 = 1;
    *((_QWORD *)&v33 + 1) = __PAIR64__(v13, v12);
    v14 = *(_DWORD *)(v6 + 12);
    if (a2 >= *(_DWORD *)(v6 + 8))
      v15 = *(_DWORD *)(v6 + 8);
    else
      v15 = a2;
    v16 = v32;
    v34 = v32;
    if (a3 >= v14)
      v17 = v14;
    else
      v17 = a3;
    v18 = v15 - 1;
    if (v15 >= 1 && v17 >= 1)
    {
      v30[0] = 0;
      v30[1] = v15 - 1;
      v20 = v17 - 1;
      v29[0] = 0;
      v29[1] = v17 - 1;
      PCGenMatrix<int>::operator()((uint64_t)result, v30, v29, (uint64_t)v31);
      v27[0] = 0;
      v27[1] = v18;
      v26[0] = 0;
      v26[1] = v20;
      PCGenMatrix<int>::operator()(v6, v27, v26, (uint64_t)v28);
      result = (_DWORD *)PCGenMatrix<int>::set<int>(v31, v28);
      v21 = v28[0];
      if (v28[0])
      {
        v22 = *(_DWORD *)(v28[0] - 4) - 1;
        *(_DWORD *)(v28[0] - 4) = v22;
        if (!v22)
          result = (_DWORD *)MEMORY[0x1B5E2914C](v21 - 8, 0x1000C8077774924);
      }
      v23 = v31[0];
      if (v31[0])
      {
        v24 = *(_DWORD *)(v31[0] - 4) - 1;
        *(_DWORD *)(v31[0] - 4) = v24;
        if (!v24)
          result = (_DWORD *)MEMORY[0x1B5E2914C](v23 - 8, 0x1000C8077774924);
      }
      v16 = v32;
    }
    if (&v32 != (uint64_t *)v6)
    {
      *(_OWORD *)(v6 + 8) = v33;
      if (*(_QWORD *)v6 != v16)
      {
        result = PCGenBlockRef<double>::deref((_QWORD *)v6);
        *(_QWORD *)v6 = v16;
        if (v16)
          ++*(_DWORD *)(v16 - 4);
      }
      v16 = v32;
      *(_QWORD *)(v6 + 24) = v34;
    }
    if (v16)
    {
      v25 = *(_DWORD *)(v16 - 4) - 1;
      *(_DWORD *)(v16 - 4) = v25;
      if (!v25)
        return (_DWORD *)MEMORY[0x1B5E2914C](v16 - 8, 0x1000C8077774924);
    }
    return result;
  }
  if (result[4] != 1)
    goto LABEL_18;
  if (result[5] != v8)
    LOBYTE(v10) = 1;
  if (v10)
  {
LABEL_18:
    v11 = 1;
    goto LABEL_21;
  }
  return result;
}

void sub_1B2D32360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;
  int v20;

  v19 = *(_QWORD *)(v17 - 80);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 - 4) - 1;
    *(_DWORD *)(v19 - 4) = v20;
    if (!v20)
      MEMORY[0x1B5E2914C](v19 - 8, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PCGenMatrix<int>::operator()@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  PCGenMatrix<BOOL>::checkRowIndex(a1, *a2);
  PCGenMatrix<BOOL>::checkRowIndex(a1, a2[1]);
  PCGenMatrix<BOOL>::checkColIndex(a1, *a3);
  result = PCGenMatrix<BOOL>::checkColIndex(a1, a3[1]);
  v10 = *a2;
  v9 = a2[1];
  v12 = *a3;
  v11 = a3[1];
  v14 = *(_DWORD *)(a1 + 16);
  v13 = *(_DWORD *)(a1 + 20);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = *(_QWORD *)a1;
  *(_QWORD *)a4 = *(_QWORD *)a1;
  if (v16)
    ++*(_DWORD *)(v16 - 4);
  *(_DWORD *)(a4 + 8) = v9 - v10 + 1;
  *(_DWORD *)(a4 + 12) = v11 - v12 + 1;
  *(_DWORD *)(a4 + 16) = v14;
  *(_DWORD *)(a4 + 20) = v13;
  *(_QWORD *)(a4 + 24) = v15 + 4 * v14 * v10 + 4 * v13 * v12;
  return result;
}

BOOL ProShade::Multiply::computeBinaryType<double>(double *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const PCString *v10;
  int v11;
  const PCString *v12;
  const PCString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  const PCString *v24;
  _BOOL4 IsVector;
  int v26;
  const PCString *v28;
  _BOOL4 v29;
  int v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  double *v34;
  double v35;
  uint64_t Width;
  double v37;
  uint64_t v38;
  double *v39;
  double v40;
  const PCString *v41;
  int v42;
  const PCString *v43;
  const PCString *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  double *v50;
  double *v51;
  double v52;
  double v53;
  int v54;
  const void *v55;
  double *v56;
  uint64_t v57;
  double *v58;
  double v59;
  _BOOL8 result;
  const PCString *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double *v69;
  double v70;
  uint64_t v71;
  double *v72;
  double *v73;
  double v74;
  double v75;
  int v76;
  const void *v77;
  double *v78;
  uint64_t v79;
  double *v80;
  double v81;
  uint64_t v82;
  double *v83;
  int v84;
  double *v85;
  uint64_t v86;
  uint64_t v87;
  double *v88;
  double *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double *v99;
  uint64_t v100;
  double *v101;
  double v102;
  unint64_t v103;
  double *v104;
  double *v105;
  double *v106;
  uint64_t v107;
  uint64_t v108;
  double *v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  double *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  double *v128;
  uint64_t v129;
  double v130;
  unint64_t v131;
  double *v132;
  unint64_t v133;
  double *v134;
  double *v135;
  double *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  char *v140;
  int v141;
  char *v142;
  int v143;
  _DWORD *v144;
  int v145;
  unsigned int v146;
  const void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  double *v152;
  int v153;
  uint64_t v154;
  uint64_t v155;
  double *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  double v160;
  unint64_t v161;
  double *v162;
  double *v163;
  uint64_t v164;
  double *v165;
  double v166;
  double *v167;
  double *v168;
  uint64_t v169;
  char *v170;
  int v171;
  _DWORD *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  int v177;
  int v178;
  int v179;
  uint64_t v180;
  char *v181;
  unsigned int v182;
  int v183;
  void *v184;
  char *v185;
  unsigned int v186;
  int v187;
  double *v188;
  double *v189;
  _DWORD *v190;
  int v191;
  unsigned int v192;
  double *v193;
  double *v194;
  uint64_t v195;

  v195 = *MEMORY[0x1E0C80C00];
  if (!ProShade::shapeIsMatrix(*(_DWORD *)(a3 + 4))
    || !ProShade::shapeIsVector(*(_DWORD *)(a4 + 4))
    || (v11 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v10),
        v11 != ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v12)))
  {
    IsVector = ProShade::shapeIsVector(*(_DWORD *)(a3 + 4));
    v26 = *(_DWORD *)(a4 + 4);
    if (IsVector && v26 == 1)
    {
      Width = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v24);
      if ((int)Width > 4)
      {
        PCGenVector<double>::PCGenVector((uint64_t)&v190, (uint64_t)a1, Width, 0);
        v53 = *a2;
        v54 = v191;
        PCGenBlockRef<double>::PCGenBlockRef(&v185, v191);
        v186 = v54;
        v187 = 1;
        v55 = v185;
        v188 = (double *)v185;
        v56 = v193;
        v57 = v191;
        if (v192 == 1)
        {
          if (v191 >= 1)
          {
            v58 = (double *)v185;
            do
            {
              v59 = *v56++;
              *v58++ = v53 * v59;
              --v57;
            }
            while (v57);
          }
        }
        else if (v191 >= 1)
        {
          v82 = 8 * (int)v192;
          v83 = (double *)v185;
          do
          {
            *v83++ = v53 * *v56;
            v56 = (double *)((char *)v56 + v82);
            --v57;
          }
          while (v57);
        }
        ProShade::Value::set(a5, (const PCString *)3, *(_DWORD *)(a3 + 4), v55);
LABEL_121:
        v142 = v185;
        if (v185)
        {
          v143 = *((_DWORD *)v185 - 1) - 1;
          *((_DWORD *)v185 - 1) = v143;
          if (!v143)
            MEMORY[0x1B5E2914C](v142 - 8, 0x1000C8077774924);
        }
        v144 = v190;
        if (!v190)
          return 1;
        goto LABEL_125;
      }
      if ((int)Width >= 1)
      {
        v37 = *a2;
        v38 = Width;
        v39 = (double *)&v190;
        do
        {
          v40 = *a1++;
          *v39++ = v37 * v40;
          --v38;
        }
        while (v38);
      }
LABEL_26:
      ProShade::Value::set(a5, (const PCString *)3, *(_DWORD *)(a3 + 4), &v190);
      return 1;
    }
    v29 = ProShade::shapeIsVector(v26);
    v30 = *(_DWORD *)(a3 + 4);
    if (v29 && v30 == 1)
    {
      v31 = ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v28);
      if ((int)v31 <= 4)
      {
        if ((int)v31 >= 1)
        {
          v32 = *a1;
          v33 = v31;
          v34 = (double *)&v190;
          do
          {
            v35 = *a2++;
            *v34++ = v32 * v35;
            --v33;
          }
          while (v33);
        }
        goto LABEL_10;
      }
      PCGenVector<double>::PCGenVector((uint64_t)&v190, (uint64_t)a2, v31, 0);
      v75 = *a1;
      v76 = v191;
      PCGenBlockRef<double>::PCGenBlockRef(&v185, v191);
      v186 = v76;
      v187 = 1;
      v77 = v185;
      v188 = (double *)v185;
      v78 = v193;
      v79 = v191;
      if (v192 == 1)
      {
        if (v191 >= 1)
        {
          v80 = (double *)v185;
          do
          {
            v81 = *v78++;
            *v80++ = v75 * v81;
            --v79;
          }
          while (v79);
        }
      }
      else if (v191 >= 1)
      {
        v108 = 8 * (int)v192;
        v109 = (double *)v185;
        do
        {
          *v109++ = v75 * *v78;
          v78 = (double *)((char *)v78 + v108);
          --v79;
        }
        while (v79);
      }
      ProShade::Value::set(a5, (const PCString *)3, *(_DWORD *)(a4 + 4), v77);
      goto LABEL_121;
    }
    if (ProShade::shapeIsVector(v30) && ProShade::shapeIsMatrix(*(_DWORD *)(a4 + 4)))
    {
      v42 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v41);
      if (v42 == ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v43))
      {
        v45 = ProShade::shapeGetWidth(*(_DWORD *)(a4 + 4), v44);
        v46 = v45;
        if ((int)v45 <= 4)
        {
          if ((int)v45 >= 1)
          {
            v47 = 0;
            do
            {
              v48 = 0.0;
              v49 = v45;
              v50 = a1;
              v51 = a2;
              do
              {
                v52 = *v50++;
                v48 = v48 + v52 * *v51;
                v51 += v45;
                --v49;
              }
              while (v49);
              *(double *)&(&v190)[v47++] = v48;
              ++a2;
            }
            while (v47 != v45);
          }
          goto LABEL_26;
        }
        PCGenVector<double>::PCGenVector((uint64_t)&v185, (uint64_t)a1, v45, 0);
        PCGenMatrix<double>::PCGenMatrix((uint64_t)&v190, (uint64_t)a2, v46, v46, 1, 0);
        v146 = v192;
        PCGenBlockRef<double>::PCGenBlockRef(&v181, v192);
        v182 = v146;
        v183 = 1;
        v147 = v181;
        v184 = v181;
        v148 = v192;
        if ((int)v192 < 1)
        {
LABEL_152:
          ProShade::Value::set(a5, (const PCString *)3, *(_DWORD *)(a3 + 4), v147);
          v170 = v181;
          if (v181)
          {
            v171 = *((_DWORD *)v181 - 1) - 1;
            *((_DWORD *)v181 - 1) = v171;
            if (!v171)
              MEMORY[0x1B5E2914C](v170 - 8, 0x1000C8077774924);
          }
          v172 = v190;
          if (v190)
          {
            v173 = *(v190 - 1) - 1;
            *(v190 - 1) = v173;
            if (!v173)
              MEMORY[0x1B5E2914C](v172 - 2, 0x1000C8077774924);
          }
          v144 = v185;
          if (!v185)
            return 1;
LABEL_125:
          v145 = *(v144 - 1) - 1;
          *(v144 - 1) = v145;
          if (!v145)
            MEMORY[0x1B5E2914C](v144 - 2, 0x1000C8077774924);
          return 1;
        }
        v149 = 0;
        v150 = v186;
        v151 = v187;
        v152 = v194;
        v153 = (int)v193;
        v154 = 8 * SHIDWORD(v193);
        v155 = 8 * (int)v193;
        v156 = v188;
        v157 = 8 * v187;
        v158 = 8 * v186;
        while (1)
        {
          if (v151 == 1)
          {
            if (v153 == 1)
            {
              if ((_DWORD)v150)
              {
                v159 = 0;
                v160 = 0.0;
                do
                {
                  v160 = v160 + v156[v159] * v152[v159];
                  ++v159;
                }
                while ((_DWORD)v150 != (_DWORD)v159);
                goto LABEL_151;
              }
            }
            else if ((int)v150 >= 1)
            {
              v160 = 0.0;
              v163 = v152;
              v164 = v150;
              v165 = v156;
              do
              {
                v166 = *v165++;
                v160 = v160 + v166 * *v163;
                v163 = (double *)((char *)v163 + v155);
                --v164;
              }
              while (v164);
              goto LABEL_151;
            }
          }
          else if (v153 == 1)
          {
            if ((int)v150 >= 1)
            {
              v161 = 0;
              v160 = 0.0;
              v162 = v156;
              do
              {
                v160 = v160 + *v162 * v152[v161 / 8];
                v161 += 8;
                v162 = (double *)((char *)v162 + v157);
              }
              while (v158 != v161);
              goto LABEL_151;
            }
          }
          else if ((int)v150 >= 1)
          {
            v160 = 0.0;
            v167 = v156;
            v168 = v152;
            v169 = v150;
            do
            {
              v160 = v160 + *v167 * *v168;
              v168 = (double *)((char *)v168 + v155);
              v167 = (double *)((char *)v167 + v157);
              --v169;
            }
            while (v169);
            goto LABEL_151;
          }
          v160 = 0.0;
LABEL_151:
          *((double *)v147 + v149++) = v160;
          v152 = (double *)((char *)v152 + v154);
          if (v149 == v148)
            goto LABEL_152;
        }
      }
    }
    result = ProShade::shapeIsMatrix(*(_DWORD *)(a3 + 4));
    if (!result)
      return result;
    v62 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v61);
    v63 = v62;
    if ((int)v62 <= 4)
    {
      MEMORY[0x1E0C80A78](v62);
      v65 = (char *)&v174 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
      if ((int)v63 >= 1)
      {
        v66 = 0;
        v67 = 8 * v63;
        do
        {
          v68 = 0;
          v69 = a2;
          do
          {
            v70 = 0.0;
            v71 = v63;
            v72 = a1;
            v73 = v69;
            do
            {
              v74 = *v72++;
              v70 = v70 + v74 * *v73;
              v73 = (double *)((char *)v73 + v67);
              --v71;
            }
            while (v71);
            *(double *)&v65[8 * v66 * v63 + 8 * v68++] = v70;
            ++v69;
          }
          while (v68 != v63);
          ++v66;
          a1 = (double *)((char *)a1 + v67);
        }
        while (v66 != v63);
      }
      ProShade::Value::set(a5, (const PCString *)3, *(_DWORD *)(a3 + 4), v65);
      return 1;
    }
    PCGenMatrix<double>::PCGenMatrix((uint64_t)&v190, (uint64_t)a1, v62, v62, 1, 0);
    PCGenMatrix<double>::PCGenMatrix((uint64_t)&v185, (uint64_t)a2, v63, v63, 1, 0);
    PCGenMatrix<double>::PCGenMatrix((uint64_t)&v181, a5 + 16, v63, v63, 1, 0);
    v110 = v191;
    v111 = v187;
    PCGenBlockRef<double>::PCGenBlockRef(&v175, v187 * v191);
    v176 = v110;
    v177 = v111;
    v178 = 1;
    v179 = v110;
    v112 = v175;
    v180 = v175;
    v113 = v191;
    if (v191 < 1)
    {
LABEL_115:
      PCGenMatrix<double>::set<double>(&v181, (uint64_t)&v175);
      v138 = v175;
      if (v175)
      {
        v139 = *(_DWORD *)(v175 - 4) - 1;
        *(_DWORD *)(v175 - 4) = v139;
        if (!v139)
          MEMORY[0x1B5E2914C](v138 - 8, 0x1000C8077774924);
      }
LABEL_118:
      v140 = v181;
      if (v181)
      {
        v141 = *((_DWORD *)v181 - 1) - 1;
        *((_DWORD *)v181 - 1) = v141;
        if (!v141)
          MEMORY[0x1B5E2914C](v140 - 8, 0x1000C8077774924);
      }
      goto LABEL_121;
    }
    v114 = 0;
    v115 = v110;
    v116 = v194;
    v117 = v189;
    v118 = (int)v188;
    v119 = v192;
    v120 = v187;
    v121 = 8 * SHIDWORD(v188);
    v122 = 8 * (int)v188;
    v123 = 8 * (int)v193;
    v124 = HIDWORD(v193);
    v125 = 8 * SHIDWORD(v193);
    v126 = 8 * v192;
    while ((int)v120 < 1)
    {
LABEL_114:
      ++v114;
      v116 = (double *)((char *)v116 + v123);
      if (v114 == v113)
        goto LABEL_115;
    }
    v127 = 0;
    v128 = v117;
    while (1)
    {
      if (v124 == 1)
      {
        if (v118 == 1)
        {
          if ((_DWORD)v119)
          {
            v129 = 0;
            v130 = 0.0;
            do
            {
              v130 = v130 + v116[v129] * v128[v129];
              ++v129;
            }
            while ((_DWORD)v119 != (_DWORD)v129);
            goto LABEL_113;
          }
        }
        else if ((int)v119 >= 1)
        {
          v133 = 0;
          v130 = 0.0;
          v134 = v128;
          do
          {
            v130 = v130 + v116[v133 / 8] * *v134;
            v133 += 8;
            v134 = (double *)((char *)v134 + v122);
          }
          while (v126 != v133);
          goto LABEL_113;
        }
      }
      else if (v118 == 1)
      {
        if ((int)v119 >= 1)
        {
          v131 = 0;
          v130 = 0.0;
          v132 = v116;
          do
          {
            v130 = v130 + *v132 * v128[v131 / 8];
            v131 += 8;
            v132 = (double *)((char *)v132 + v125);
          }
          while (v126 != v131);
          goto LABEL_113;
        }
      }
      else if ((int)v119 >= 1)
      {
        v130 = 0.0;
        v135 = v116;
        v136 = v128;
        v137 = v119;
        do
        {
          v130 = v130 + *v135 * *v136;
          v136 = (double *)((char *)v136 + v122);
          v135 = (double *)((char *)v135 + v125);
          --v137;
        }
        while (v137);
        goto LABEL_113;
      }
      v130 = 0.0;
LABEL_113:
      *(double *)(v112 + 8 * (v114 + v127 * v115)) = v130;
      ++v127;
      v128 = (double *)((char *)v128 + v121);
      if (v127 == v120)
        goto LABEL_114;
    }
  }
  v14 = ProShade::shapeGetWidth(*(_DWORD *)(a3 + 4), v13);
  v15 = v14;
  if ((int)v14 > 4)
  {
    PCGenMatrix<double>::PCGenMatrix((uint64_t)&v190, (uint64_t)a1, v14, v14, 1, 0);
    PCGenVector<double>::PCGenVector((uint64_t)&v185, (uint64_t)a2, v15, 0);
    v84 = v191;
    PCGenBlockRef<double>::PCGenBlockRef(&v181, v191);
    v182 = v84;
    v183 = 1;
    v85 = (double *)v181;
    v184 = v181;
    v86 = v191;
    if (v191 >= 1)
    {
      v87 = 0;
      v88 = v194;
      v89 = v188;
      v90 = v187;
      v91 = v192;
      v92 = 8 * v187;
      v93 = 8 * (int)v193;
      v94 = HIDWORD(v193);
      v95 = 8 * SHIDWORD(v193);
      v96 = 8 * v192;
      do
      {
        if (v94 == 1)
        {
          if (v90 == 1)
          {
            if ((_DWORD)v91)
            {
              v97 = 0;
              v98 = 0.0;
              do
              {
                v98 = v98 + v88[v97] * v89[v97];
                ++v97;
              }
              while ((_DWORD)v91 != (_DWORD)v97);
              goto LABEL_83;
            }
          }
          else if ((int)v91 >= 1)
          {
            v103 = 0;
            v98 = 0.0;
            v104 = v89;
            do
            {
              v98 = v98 + v88[v103 / 8] * *v104;
              v103 += 8;
              v104 = (double *)((char *)v104 + v92);
            }
            while (v96 != v103);
            goto LABEL_83;
          }
        }
        else if (v90 == 1)
        {
          if ((int)v91 >= 1)
          {
            v98 = 0.0;
            v99 = v88;
            v100 = v91;
            v101 = v89;
            do
            {
              v102 = *v101++;
              v98 = v98 + *v99 * v102;
              v99 = (double *)((char *)v99 + v95);
              --v100;
            }
            while (v100);
            goto LABEL_83;
          }
        }
        else if ((int)v91 >= 1)
        {
          v98 = 0.0;
          v105 = v88;
          v106 = v89;
          v107 = v91;
          do
          {
            v98 = v98 + *v105 * *v106;
            v106 = (double *)((char *)v106 + v92);
            v105 = (double *)((char *)v105 + v95);
            --v107;
          }
          while (v107);
          goto LABEL_83;
        }
        v98 = 0.0;
LABEL_83:
        v85[v87++] = v98;
        v88 = (double *)((char *)v88 + v93);
      }
      while (v87 != v86);
    }
    ProShade::Value::set(a5, (const PCString *)3, *(_DWORD *)(a4 + 4), v85);
    goto LABEL_118;
  }
  if ((int)v14 >= 1)
  {
    v16 = 0;
    do
    {
      v17 = 0.0;
      v18 = v14;
      v19 = a2;
      v20 = a1;
      do
      {
        v21 = *v20++;
        v22 = v21;
        v23 = *v19++;
        v17 = v17 + v22 * v23;
        --v18;
      }
      while (v18);
      *(double *)&(&v190)[v16++] = v17;
      a1 += v14;
    }
    while (v16 != v14);
  }
LABEL_10:
  ProShade::Value::set(a5, (const PCString *)3, *(_DWORD *)(a4 + 4), &v190);
  return 1;
}

void sub_1B2D33010(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(v1 - 168);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 4) - 1;
    *(_DWORD *)(v3 - 4) = v4;
    if (!v4)
      MEMORY[0x1B5E2914C](v3 - 8, 0x1000C8077774924);
  }
  v5 = *(_QWORD *)(v1 - 104);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 4) - 1;
    *(_DWORD *)(v5 - 4) = v6;
    if (!v6)
      MEMORY[0x1B5E2914C](v5 - 8, 0x1000C8077774924);
  }
  v7 = *(_QWORD *)(v1 - 136);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 - 4) - 1;
    *(_DWORD *)(v7 - 4) = v8;
    if (!v8)
      MEMORY[0x1B5E2914C](v7 - 8, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PCGenMatrix<double>::PCGenMatrix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  int v7;
  int v8;
  __CFString *var0;
  int v11;
  PCException *exception;
  PCException *v15;
  PCString v16;
  __int128 v17;
  uint64_t v18;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = a4;
  if (a5)
    v7 = a4;
  else
    v7 = 1;
  if (a5)
    v8 = 1;
  else
    v8 = a3;
  *(_DWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 20) = v8;
  if ((a3 & 0x80000000) != 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix number of rows %d must be nonnegative", &v16, a3);
    PCException::PCException(exception, &v16);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  if ((a4 & 0x80000000) != 0)
  {
    v15 = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenMatrix number of cols %d must be nonnegative", &v16, a4);
    PCException::PCException(v15, &v16);
    *(_QWORD *)v15 = &unk_1E6511548;
  }
  *(_QWORD *)(a1 + 24) = a2;
  if (a6)
  {
    PCGenMatrix<double>::copy(a1, 0, (uint64_t)&v16);
    var0 = v16.var0;
    if (&v16 != (PCString *)a1)
    {
      *(_OWORD *)(a1 + 8) = v17;
      if (*(__CFString **)a1 != var0)
      {
        PCGenBlockRef<double>::deref((_QWORD *)a1);
        *(_QWORD *)a1 = var0;
        if (var0)
          ++HIDWORD(var0[-1].length);
      }
      var0 = v16.var0;
      *(_QWORD *)(a1 + 24) = v18;
    }
    if (var0)
    {
      v11 = HIDWORD(var0[-1].length) - 1;
      HIDWORD(var0[-1].length) = v11;
      if (!v11)
        MEMORY[0x1B5E2914C](&var0[-1].length, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1B2D33330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCString a11)
{
  _QWORD *v11;
  int v13;

  if (a11.var0)
  {
    v13 = HIDWORD(a11.var0[-1].length) - 1;
    HIDWORD(a11.var0[-1].length) = v13;
    if (!v13)
      MEMORY[0x1B5E2914C](&a11.var0[-1].length, 0x1000C8077774924);
  }
  PCGenBlockRef<double>::deref(v11);
  _Unwind_Resume(a1);
}

uint64_t PCGenVector<double>::PCGenVector(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  __CFString *v6;
  int v7;
  PCException *exception;
  PCString v10;
  uint64_t v11;
  __CFString *var0;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = 1;
  if ((a3 & 0x80000000) != 0)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::ssprintf((PCString *)"PCGenVector length %d must be nonnegative", &v10, a3);
    PCException::PCException(exception, &v10);
    *(_QWORD *)exception = &unk_1E6511548;
  }
  *(_QWORD *)(a1 + 16) = a2;
  if (a4)
  {
    PCGenBlockRef<double>::PCGenBlockRef(&v10, a3);
    v11 = a3 | 0x100000000;
    var0 = v10.var0;
    PCGenVector<double>::set<double>((uint64_t)&v10, a1);
    v6 = v10.var0;
    if (&v10 != (PCString *)a1)
    {
      *(_QWORD *)(a1 + 8) = v11;
      if (*(__CFString **)a1 != v6)
      {
        PCGenBlockRef<double>::deref((_QWORD *)a1);
        *(_QWORD *)a1 = v6;
        if (v6)
          ++HIDWORD(v6[-1].length);
      }
      v6 = v10.var0;
      *(_QWORD *)(a1 + 16) = var0;
    }
    if (v6)
    {
      v7 = HIDWORD(v6[-1].length) - 1;
      HIDWORD(v6[-1].length) = v7;
      if (!v7)
        MEMORY[0x1B5E2914C](&v6[-1].length, 0x1000C8077774924);
    }
  }
  return a1;
}

void sub_1B2D33500(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  _QWORD *v10;
  int v12;

  if (a10.var0)
  {
    v12 = HIDWORD(a10.var0[-1].length) - 1;
    HIDWORD(a10.var0[-1].length) = v12;
    if (!v12)
      MEMORY[0x1B5E2914C](&a10.var0[-1].length, 0x1000C8077774924);
  }
  PCGenBlockRef<double>::deref(v10);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::VarT<ProShade::Node>::VarT(PCSharedCount *a1, int a2)
{
  ProShade::ConstVector *v4;

  a1->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  v4 = (ProShade::ConstVector *)operator new();
  ProShade::ConstVector::ConstVector(v4, a2);
  a1[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a1 + 3, (ProShade::ConstVector *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  return a1;
}

void sub_1B2D335FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C40A585CD1CLL);
  _Unwind_Resume(a1);
}

void ProShade::Selector_member<(ProShade::Selector_base::Selection)4>::operator ProShade::VarT<ProShade::Node>(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  PCSharedCount v3;
  PCSharedCount v4;

  ProShade::Selector_base::_select(a1, (const PCString *)4, &v3);
  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a2[2].var0 = v3.var0;
  PCSharedCount::PCSharedCount(a2 + 3, &v4);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B2D33684(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::Selector_member<(ProShade::Selector_base::Selection)3>::operator ProShade::VarT<ProShade::Node>(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  PCSharedCount v3;
  PCSharedCount v4;

  ProShade::Selector_base::_select(a1, (const PCString *)3, &v3);
  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a2[2].var0 = v3.var0;
  PCSharedCount::PCSharedCount(a2 + 3, &v4);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B2D336FC(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

void ProShade::Selector_member<(ProShade::Selector_base::Selection)7>::operator ProShade::VarT<ProShade::Node>(uint64_t a1@<X0>, PCSharedCount *a2@<X8>)
{
  PCSharedCount v3;
  PCSharedCount v4;

  ProShade::Selector_base::_select(a1, (const PCString *)7, &v3);
  a2->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a2[2].var0 = v3.var0;
  PCSharedCount::PCSharedCount(a2 + 3, &v4);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B2D33774(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::Multiply::resultShape(uint64_t a1, uint64_t a2)
{
  const PCString *v4;
  int Width;
  const PCString *v6;
  const PCString *v7;
  int v8;
  const PCString *v9;
  const PCString *v10;
  int v11;
  const PCString *v12;
  int v13;
  const PCString *v14;
  BOOL v15;

  if (ProShade::shapeIsMatrix(a1))
  {
    Width = ProShade::shapeGetWidth(a1, v4);
    if (Width != ProShade::shapeGetWidth(a2, v6))
    {
      if (!ProShade::shapeIsVector(a2)
        || (v8 = ProShade::shapeGetWidth(a1, v7), v8 <= (int)ProShade::shapeGetWidth(a2, v9)))
      {
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"matrix/vector width mismatch", v7);
      }
    }
  }
  else if (ProShade::shapeIsMatrix(a2))
  {
    v11 = ProShade::shapeGetWidth(a1, v10);
    v13 = ProShade::shapeGetWidth(a2, v12);
    a2 = a1;
    if (v11 != v13)
      ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector/matrix width mismatch", v14);
  }
  else if ((_DWORD)a1 != 1)
  {
    if ((_DWORD)a2 == 1)
    {
      return a1;
    }
    else
    {
      v15 = (_DWORD)a1 == (_DWORD)a2;
      a2 = a1;
      if (!v15)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v10);
    }
  }
  return a2;
}

uint64_t ProShade::BinaryOp<ProShade::Multiply>::setFrequency(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  int v8;
  int v10;

  v1 = *(_QWORD *)(result + 64);
  if (!v1)
    throw_PCNullPointerException(1);
  v2 = *(_DWORD *)(v1 + 40);
  v3 = *(_QWORD *)(result + 96);
  if (!v3)
    throw_PCNullPointerException(1);
  v4 = *(_DWORD *)(v3 + 40);
  if (v2 < 1 && v4 < 1)
  {
    v10 = 0;
  }
  else if (v2 <= 1 && v4 < 2)
  {
    v10 = 1;
  }
  else
  {
    if (v4 < 2 && v2 < 3)
      v8 = 2;
    else
      v8 = 3;
    if (v2 <= 1 && v4 < 3)
      v10 = 2;
    else
      v10 = v8;
  }
  if (*(_DWORD *)(result + 44) < v10)
    v10 = *(_DWORD *)(result + 44);
  *(_DWORD *)(result + 40) = v10;
  return result;
}

uint64_t ProShade::BinaryOp<ProShade::Multiply>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570308;
  *(_QWORD *)(a1 + 112) = &unk_1E65703C0;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570420;
  *(_QWORD *)(a1 + 112) = off_1E65704D8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::Multiply>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570308;
  *(_QWORD *)(a1 + 112) = &unk_1E65703C0;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570420;
  *(_QWORD *)(a1 + 112) = off_1E65704D8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  JUMPOUT(0x1B5E29170);
}

void ProShade::BinaryOp<ProShade::Multiply>::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int *v11;
  _BYTE *v12;
  unsigned int v13;
  size_t v14;
  unsigned int *v15;
  _BYTE *v16;
  unsigned int v17;
  size_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  int v25;
  size_t v26;
  unsigned int *v27;
  unsigned int v28;
  size_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE *v50;
  _QWORD *v51;
  _BYTE *v52;
  _BYTE *v53;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 16))(&v53);
  v5 = v53;
  if (v53)
    v6 = *((_DWORD *)v53 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  v8 = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((_BYTE *)v7 + 12) = 40;
  v7[1] = v8;
  memcpy((char *)v7 + 13, v5, v6);
  *((_BYTE *)v7 + v8 + 12) = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (unsigned int *)malloc_type_malloc(v10 + 14, 0x8903763CuLL);
  v11[1] = v10 + 1;
  v11[2] = v10 + 2;
  atomic_store(1u, v11);
  v12 = v11 + 3;
  atomic_store(0, v11);
  memcpy(v11 + 3, v7 + 3, v10);
  v12[v10] = 32;
  v12[v10 + 1] = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = (int)v11[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  atomic_store(1u, v15);
  v16 = v15 + 3;
  atomic_store(0, v15);
  memcpy(v15 + 3, v12, v14);
  v16[v14] = 42;
  v16[v14 + 1] = 0;
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 + 1, v15));
  v18 = (int)v15[1];
  v19 = (unsigned int *)malloc_type_malloc(v18 + 14, 0x8903763CuLL);
  v19[1] = v18 + 1;
  v19[2] = v18 + 2;
  atomic_store(1u, v19);
  v20 = v19 + 3;
  atomic_store(0, v19);
  memcpy(v19 + 3, v16, v18);
  *((_BYTE *)v20 + v18) = 32;
  *((_BYTE *)v20 + v18 + 1) = 0;
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v22 = *(_QWORD *)(a1 + 96);
  if (!v22)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v22 + 16))(&v52);
  v51 = a2;
  v23 = (int)v19[1];
  v24 = v52;
  if (v52)
    v25 = *((_DWORD *)v52 - 2);
  else
    v25 = 0;
  v26 = v23 + v25;
  v27 = (unsigned int *)malloc_type_malloc(v26 + 13, 0x8903763CuLL);
  v27[1] = v26;
  v27[2] = v26 + 1;
  atomic_store(1u, v27);
  atomic_store(0, v27);
  memcpy(v27 + 3, v19 + 3, v23);
  memcpy((char *)v27 + v23 + 12, v24, v25);
  *((_BYTE *)v27 + v26 + 12) = 0;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = (int)v27[1];
  v30 = (unsigned int *)malloc_type_malloc(v29 + 14, 0x8903763CuLL);
  v30[1] = v29 + 1;
  v30[2] = v29 + 2;
  atomic_store(1u, v30);
  v31 = v30 + 3;
  atomic_store(0, v30);
  memcpy(v30 + 3, v27 + 3, v29);
  *((_BYTE *)v31 + v29) = 41;
  *((_BYTE *)v31 + v29 + 1) = 0;
  *v51 = v30 + 3;
  do
    v32 = __ldaxr(v30);
  while (__stlxr(v32 + 1, v30));
  do
  {
    v33 = __ldaxr(v27);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v27));
  if (!v34)
    free(v27);
  if (v52)
  {
    v35 = (unsigned int *)(v52 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v52 = 0;
      if (v52)
        v38 = v52 - 12;
      else
        v38 = 0;
      free(v38);
    }
  }
  do
  {
    v39 = __ldaxr(v19);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v19));
  if (!v40)
    free(v19);
  do
  {
    v41 = __ldaxr(v15);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v15));
  if (!v42)
    free(v15);
  do
  {
    v43 = __ldaxr(v11);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v11));
  if (!v44)
    free(v11);
  do
  {
    v45 = __ldaxr(v7);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v7));
  if (!v46)
    free(v7);
  if (v53)
  {
    v47 = (unsigned int *)(v53 - 12);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      *v53 = 0;
      if (v53)
        v50 = v53 - 12;
      else
        v50 = 0;
      free(v50);
    }
  }
}

void sub_1B2D33E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11, _BYTE *a12)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  do
  {
    v18 = __ldaxr(v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v16));
  if (!v19)
    free(v16);
  if (a11)
  {
    v20 = (unsigned int *)(a11 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  do
  {
    v23 = __ldaxr(v15);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v15));
  if (!v24)
    free(v15);
  do
  {
    v25 = __ldaxr(v14);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v14));
  if (!v26)
    free(v14);
  do
  {
    v27 = __ldaxr(v13);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v13));
  if (!v28)
    free(v13);
  do
  {
    v29 = __ldaxr(v12);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v12));
  if (!v30)
    free(v12);
  if (a12)
  {
    v31 = (unsigned int *)(a12 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Multiply>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "BinaryOp ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 14, 0x8903763CuLL);
  v5[1] = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *((_BYTE *)v6 + v4) = 42;
  *((_BYTE *)v6 + v4 + 1) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D340AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Multiply>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "*");
}

int8x8_t *ProShade::BinaryOp<ProShade::Multiply>::computeHash(uint64_t a1, int8x8_t *this)
{
  __n128 v5;

  PCHashWriteStream::writeValue(this, "*");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::Multiply>::apply(uint64_t a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  PCSharedCount v9;
  void *v10;
  uint64_t v11;
  PCSharedCount v12;

  v4 = a1;
  (**a2)(&v10, a2, a1 + 48);
  (**a2)(&v7, a2, v4 + 80);
  if (v11 != *(_QWORD *)(v4 + 64) || v8 != *(_QWORD *)(v4 + 96))
  {
    v6 = operator new();
    ProShade::BinaryOp<ProShade::Multiply>::BinaryOp(v6, v11, v8, *(_DWORD *)(v4 + 44));
    v4 = v6;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v7 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v9);
  v10 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2D3423C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  PCSharedCount v6;
  va_list va;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6.var0 = va_arg(va1, PC_Sp_counted_base *);
  v8 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  v8 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

ProShade::Node *ProShade::BinaryOp<ProShade::Multiply>::clone(const PCSharedCount *a1)
{
  ProShade::Node *v2;

  v2 = (ProShade::Node *)operator new();
  ProShade::BinaryOp<ProShade::Multiply>::BinaryOp((uint64_t)v2);
  ProShade::BinaryOp<ProShade::Add>::copyFrom(v2, a1);
  return v2;
}

void sub_1B2D342F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Multiply>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3 < 1)
    PCArray_base::badIndex(a1);
  if (v3 <= 1)
    PCArray_base::badIndex(a1);
  return ProShade::BinaryOp<ProShade::Multiply>::computeBinary(*(unsigned int **)(a2 + 16), (unsigned int *)(*(_QWORD *)(a2 + 16) + 144), a3);
}

void `virtual thunk to'ProShade::BinaryOp<ProShade::Multiply>::~BinaryOp(_QWORD *a1)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570308;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E65703C0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570420;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E65704D8;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570308;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E65703C0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570420;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E65704D8;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::BinaryOp<ProShade::Multiply>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  PCShared_base *v8;
  PCShared_base *v9;
  int v10;
  int v11;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65703E0);
  *(_QWORD *)a1 = &unk_1E6570308;
  *(_QWORD *)(a1 + 112) = &unk_1E65703C0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v8 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v8);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v9 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v9 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v9);
  v10 = ProShade::Multiply::resultShape(*(unsigned int *)(a2 + 28), *(unsigned int *)(a3 + 28));
  v11 = *(_DWORD *)(a2 + 24);
  if (v11 <= *(_DWORD *)(a3 + 24))
    v11 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 24) = v11;
  *(_DWORD *)(a1 + 28) = v10;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D345F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Multiply>::BinaryOp(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65703E0);
  *(_QWORD *)a1 = &unk_1E6570308;
  *(_QWORD *)(a1 + 112) = &unk_1E65703C0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B2D34704(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;

  v7 = v3;
  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v7);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Divide>::computeBinary(const PCString *a1, const PCString *a2, uint64_t a3)
{
  int var0;
  double result;

  if (SLODWORD(a1->var0) > 1)
  {
    if (LODWORD(a1->var0) != 2)
      return ProShade::computeBinaryType<ProShade::Divide,double>((unsigned int *)a1, (unsigned int *)a2, a3);
    var0 = (int)a2->var0;
  }
  else
  {
    var0 = (int)a2->var0;
    if (SLODWORD(a2->var0) < 2)
    {
      ProShade::computeBinaryType<ProShade::Divide,BOOL>(a1, a2, a3);
      return result;
    }
  }
  if (var0 <= 2)
  {
    ProShade::computeBinaryType<ProShade::Divide,int>((unsigned int *)a1, (unsigned int *)a2, a3);
    return result;
  }
  return ProShade::computeBinaryType<ProShade::Divide,double>((unsigned int *)a1, (unsigned int *)a2, a3);
}

BOOL ProShade::Divide::simplify(const PCSharedCount *a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 isZero;
  PC_Sp_counted_base *var0;
  uint64_t v9;
  const PCString *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t v14;

  isZero = ProShade::isZero((uint64_t)a1);
  if (isZero)
  {
    ProShade::VarT<ProShade::Node>::operator=(a3, a1);
  }
  else if (ProShade::isZero(a2))
  {
    var0 = a1[2].var0;
    if (!var0)
      throw_PCNullPointerException(1);
    (*(void (**)(const void **__return_ptr))(*(_QWORD *)var0 + 16))(&v12);
    operator+(&v12, "/", &v13);
    v9 = *(_QWORD *)(a2 + 16);
    if (!v9)
      throw_PCNullPointerException(1);
    (*(void (**)(const void **__return_ptr))(*(_QWORD *)v9 + 16))(&v11);
    operator+(&v13, &v11, &v14);
    ProShade::Error<PCDivideByZeroException>::raise<LiString>((OZChannelBase *)&v14, v10);
  }
  return isZero;
}

void sub_1B2D34864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9, _BYTE *a10, _BYTE *a11, _BYTE *a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (a12)
  {
    v13 = (unsigned int *)(a12 - 12);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  if (a9)
  {
    v16 = (unsigned int *)(a9 - 12);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      *a9 = 0;
      free(a9 - 12);
    }
  }
  if (a11)
  {
    v19 = (unsigned int *)(a11 - 12);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  if (a10)
  {
    v22 = (unsigned int *)(a10 - 12);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      *a10 = 0;
      free(a10 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t ProShade::BinaryOp<ProShade::Divide>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  PCShared_base *v6;
  PCShared_base *v7;
  const PCString *v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570658);
  *(_QWORD *)a1 = &unk_1E6570580;
  *(_QWORD *)(a1 + 112) = &unk_1E6570638;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v6 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v6 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v6);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v7 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v7 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v7);
  v9 = *(_DWORD *)(a2 + 28);
  v10 = *(_DWORD *)(a3 + 28);
  if (v9 != 1)
  {
    if (v10 == 1)
    {
      v10 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v11 = v9 == v10;
      v10 = *(_DWORD *)(a2 + 28);
      if (!v11)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v8);
    }
  }
  v12 = *(_DWORD *)(a2 + 24);
  if (v12 <= *(_DWORD *)(a3 + 24))
    v12 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 28) = v10;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D34ACC(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Divide,BOOL>(const PCString *a1, const PCString *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *var0_low;
  uint64_t v12;
  BOOL *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  BOOL *v17;
  size_t v18;
  int var0_high;
  _BOOL8 result;
  const PCString *v21;
  int v22;
  PCException *exception;
  uint64_t v24;
  PCString v25;
  PCString v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(HIDWORD(a1->var0), a2);
  v8 = ProShade::shapeGetSize(HIDWORD(a2->var0), v7);
  v10 = v8;
  var0_low = (void *)LODWORD(a1->var0);
  if ((_DWORD)var0_low != 1)
  {
    MEMORY[0x1E0C80A78](v8);
    v13 = (BOOL *)&v24 - v12;
    bzero((char *)&v24 - v12, v14);
    v8 = (uint64_t)ProShade::copyData(var0_low, a1 + 2, 1, v13, Size);
  }
  v15 = (void *)LODWORD(a2->var0);
  if ((_DWORD)v15 != 1)
  {
    MEMORY[0x1E0C80A78](v8);
    v17 = (BOOL *)&v24 - v16;
    bzero((char *)&v24 - v16, v18);
    ProShade::copyData(v15, a2 + 2, 1, v17, v10);
  }
  var0_high = HIDWORD(a1->var0);
  if (var0_high != HIDWORD(a2->var0))
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)1, var0_high);
  result = ProShade::shapeIsVector(HIDWORD(a1->var0));
  v22 = HIDWORD(a1->var0) == 1 || result;
  if (v22 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v26, "not implemented yet");
    PCString::PCString(&v25, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v26, &v25, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
    ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"/ operator doesn't apply to BOOL", v21);
  return result;
}

void sub_1B2D34D34(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Divide,int>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *v11;
  BOOL *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  BOOL *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _BOOL8 result;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  PCException *exception;
  uint64_t v28;
  PCString v29;
  PCString v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v10 = v8;
  v11 = (void *)*a1;
  if ((_DWORD)v11 == 2)
  {
    v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v12 = (BOOL *)&v28 - v13;
    bzero((char *)&v28 - v13, v14);
    v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 2, v12, Size);
  }
  v15 = (void *)*a2;
  if ((_DWORD)v15 == 2)
  {
    v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v16 = (BOOL *)&v28 - v17;
    bzero((char *)&v28 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 2, v16, v10);
  }
  v19 = a1[1];
  if (v19 != a2[1])
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)2, v19);
  result = ProShade::shapeIsVector(a1[1]);
  v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v30, "not implemented yet");
    PCString::PCString(&v29, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v30, &v29, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
  {
    v22 = (int *)(a3 + 16);
    v23 = Size;
    do
    {
      v25 = *(_DWORD *)v12;
      v12 += 4;
      v24 = v25;
      v26 = *(_DWORD *)v16;
      v16 += 4;
      *v22++ = v24 / v26;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B2D34FA0(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double ProShade::computeBinaryType<ProShade::Divide,double>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *v11;
  BOOL *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  BOOL *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _BOOL4 IsVector;
  double result;
  int v22;
  double *v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  PCException *exception;
  uint64_t v29;
  PCString v30;
  PCString v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v10 = v8;
  v11 = (void *)*a1;
  if ((_DWORD)v11 == 3)
  {
    v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v12 = (BOOL *)&v29 - v13;
    bzero((char *)&v29 - v13, v14);
    v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 3, v12, Size);
  }
  v15 = (void *)*a2;
  if ((_DWORD)v15 == 3)
  {
    v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v16 = (BOOL *)&v29 - v17;
    bzero((char *)&v29 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 3, v16, v10);
  }
  v19 = a1[1];
  if (v19 != a2[1])
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)3, v19);
  IsVector = ProShade::shapeIsVector(a1[1]);
  v22 = a1[1] == 1 || IsVector;
  if (v22 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v31, "not implemented yet");
    PCString::PCString(&v30, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v31, &v30, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
  {
    v23 = (double *)(a3 + 16);
    v24 = Size;
    do
    {
      v25 = *(double *)v12;
      v12 += 8;
      v26 = v25;
      v27 = *(double *)v16;
      v16 += 8;
      result = v26 / v27;
      *v23++ = result;
      --v24;
    }
    while (v24);
  }
  return result;
}

void sub_1B2D3520C(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ProShade::Error<PCDivideByZeroException>::raise<LiString>(OZChannelBase *a1, const PCString *a2)
{
  PCException *exception;
  const char *var0;
  PCString v5;

  OZChannelBase::setRangeName(a1, a2);
  exception = (PCException *)__cxa_allocate_exception(0x40uLL);
  if (a1->var0)
    var0 = (const char *)a1->var0;
  else
    var0 = "";
  PCString::PCString(&v5, var0);
  PCException::PCException(exception, &v5);
  *(_QWORD *)exception = &unk_1E6512988;
}

void sub_1B2D352CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCString a10)
{
  PCString::~PCString(&a10);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Divide>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570580;
  *(_QWORD *)(a1 + 112) = &unk_1E6570638;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570698;
  *(_QWORD *)(a1 + 112) = off_1E6570750;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::Divide>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570580;
  *(_QWORD *)(a1 + 112) = &unk_1E6570638;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570698;
  *(_QWORD *)(a1 + 112) = off_1E6570750;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  JUMPOUT(0x1B5E29170);
}

void ProShade::BinaryOp<ProShade::Divide>::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int *v11;
  _BYTE *v12;
  unsigned int v13;
  size_t v14;
  unsigned int *v15;
  _BYTE *v16;
  unsigned int v17;
  size_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  int v25;
  size_t v26;
  unsigned int *v27;
  unsigned int v28;
  size_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE *v50;
  _QWORD *v51;
  _BYTE *v52;
  _BYTE *v53;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 16))(&v53);
  v5 = v53;
  if (v53)
    v6 = *((_DWORD *)v53 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  v8 = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((_BYTE *)v7 + 12) = 40;
  v7[1] = v8;
  memcpy((char *)v7 + 13, v5, v6);
  *((_BYTE *)v7 + v8 + 12) = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (unsigned int *)malloc_type_malloc(v10 + 14, 0x8903763CuLL);
  v11[1] = v10 + 1;
  v11[2] = v10 + 2;
  atomic_store(1u, v11);
  v12 = v11 + 3;
  atomic_store(0, v11);
  memcpy(v11 + 3, v7 + 3, v10);
  v12[v10] = 32;
  v12[v10 + 1] = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = (int)v11[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  atomic_store(1u, v15);
  v16 = v15 + 3;
  atomic_store(0, v15);
  memcpy(v15 + 3, v12, v14);
  v16[v14] = 47;
  v16[v14 + 1] = 0;
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 + 1, v15));
  v18 = (int)v15[1];
  v19 = (unsigned int *)malloc_type_malloc(v18 + 14, 0x8903763CuLL);
  v19[1] = v18 + 1;
  v19[2] = v18 + 2;
  atomic_store(1u, v19);
  v20 = v19 + 3;
  atomic_store(0, v19);
  memcpy(v19 + 3, v16, v18);
  *((_BYTE *)v20 + v18) = 32;
  *((_BYTE *)v20 + v18 + 1) = 0;
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v22 = *(_QWORD *)(a1 + 96);
  if (!v22)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v22 + 16))(&v52);
  v51 = a2;
  v23 = (int)v19[1];
  v24 = v52;
  if (v52)
    v25 = *((_DWORD *)v52 - 2);
  else
    v25 = 0;
  v26 = v23 + v25;
  v27 = (unsigned int *)malloc_type_malloc(v26 + 13, 0x8903763CuLL);
  v27[1] = v26;
  v27[2] = v26 + 1;
  atomic_store(1u, v27);
  atomic_store(0, v27);
  memcpy(v27 + 3, v19 + 3, v23);
  memcpy((char *)v27 + v23 + 12, v24, v25);
  *((_BYTE *)v27 + v26 + 12) = 0;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = (int)v27[1];
  v30 = (unsigned int *)malloc_type_malloc(v29 + 14, 0x8903763CuLL);
  v30[1] = v29 + 1;
  v30[2] = v29 + 2;
  atomic_store(1u, v30);
  v31 = v30 + 3;
  atomic_store(0, v30);
  memcpy(v30 + 3, v27 + 3, v29);
  *((_BYTE *)v31 + v29) = 41;
  *((_BYTE *)v31 + v29 + 1) = 0;
  *v51 = v30 + 3;
  do
    v32 = __ldaxr(v30);
  while (__stlxr(v32 + 1, v30));
  do
  {
    v33 = __ldaxr(v27);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v27));
  if (!v34)
    free(v27);
  if (v52)
  {
    v35 = (unsigned int *)(v52 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v52 = 0;
      if (v52)
        v38 = v52 - 12;
      else
        v38 = 0;
      free(v38);
    }
  }
  do
  {
    v39 = __ldaxr(v19);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v19));
  if (!v40)
    free(v19);
  do
  {
    v41 = __ldaxr(v15);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v15));
  if (!v42)
    free(v15);
  do
  {
    v43 = __ldaxr(v11);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v11));
  if (!v44)
    free(v11);
  do
  {
    v45 = __ldaxr(v7);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v7));
  if (!v46)
    free(v7);
  if (v53)
  {
    v47 = (unsigned int *)(v53 - 12);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      *v53 = 0;
      if (v53)
        v50 = v53 - 12;
      else
        v50 = 0;
      free(v50);
    }
  }
}

void sub_1B2D3585C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11, _BYTE *a12)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  do
  {
    v18 = __ldaxr(v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v16));
  if (!v19)
    free(v16);
  if (a11)
  {
    v20 = (unsigned int *)(a11 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  do
  {
    v23 = __ldaxr(v15);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v15));
  if (!v24)
    free(v15);
  do
  {
    v25 = __ldaxr(v14);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v14));
  if (!v26)
    free(v14);
  do
  {
    v27 = __ldaxr(v13);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v13));
  if (!v28)
    free(v13);
  do
  {
    v29 = __ldaxr(v12);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v12));
  if (!v30)
    free(v12);
  if (a12)
  {
    v31 = (unsigned int *)(a12 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Divide>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "BinaryOp ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 14, 0x8903763CuLL);
  v5[1] = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *((_BYTE *)v6 + v4) = 47;
  *((_BYTE *)v6 + v4 + 1) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D35A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Divide>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "/");
}

int8x8_t *ProShade::BinaryOp<ProShade::Divide>::computeHash(uint64_t a1, int8x8_t *this)
{
  __n128 v5;

  PCHashWriteStream::writeValue(this, "/");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::Divide>::apply(uint64_t a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  PCSharedCount v9;
  void *v10;
  uint64_t v11;
  PCSharedCount v12;

  v4 = a1;
  (**a2)(&v10, a2, a1 + 48);
  (**a2)(&v7, a2, v4 + 80);
  if (v11 != *(_QWORD *)(v4 + 64) || v8 != *(_QWORD *)(v4 + 96))
  {
    v6 = operator new();
    ProShade::BinaryOp<ProShade::Divide>::BinaryOp(v6, v11, v8, *(_DWORD *)(v4 + 44));
    v4 = v6;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v7 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v9);
  v10 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2D35C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  PCSharedCount v6;
  va_list va;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6.var0 = va_arg(va1, PC_Sp_counted_base *);
  v8 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  v8 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

ProShade::Node *ProShade::BinaryOp<ProShade::Divide>::clone(const PCSharedCount *a1)
{
  ProShade::Node *v2;

  v2 = (ProShade::Node *)operator new();
  ProShade::BinaryOp<ProShade::Divide>::BinaryOp((uint64_t)v2);
  ProShade::BinaryOp<ProShade::Add>::copyFrom(v2, a1);
  return v2;
}

void sub_1B2D35CDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

double ProShade::BinaryOp<ProShade::Divide>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3 < 1)
    PCArray_base::badIndex(a1);
  if (v3 <= 1)
    PCArray_base::badIndex(a1);
  return ProShade::BinaryOp<ProShade::Divide>::computeBinary(*(const PCString **)(a2 + 16), (const PCString *)(*(_QWORD *)(a2 + 16) + 144), a3);
}

void `virtual thunk to'ProShade::BinaryOp<ProShade::Divide>::~BinaryOp(_QWORD *a1)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570580;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E6570638;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570698;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E6570750;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570580;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E6570638;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570698;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E6570750;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::BinaryOp<ProShade::Divide>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  PCShared_base *v8;
  PCShared_base *v9;
  const PCString *v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570658);
  *(_QWORD *)a1 = &unk_1E6570580;
  *(_QWORD *)(a1 + 112) = &unk_1E6570638;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v8 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v8);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v9 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v9 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v9);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a3 + 28);
  if (v11 != 1)
  {
    if (v12 == 1)
    {
      v12 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v13 = v11 == v12;
      v12 = *(_DWORD *)(a2 + 28);
      if (!v13)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v10);
    }
  }
  v14 = *(_DWORD *)(a2 + 24);
  if (v14 <= *(_DWORD *)(a3 + 24))
    v14 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a1 + 24) = v14;
  *(_DWORD *)(a1 + 28) = v12;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D36004(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Divide>::BinaryOp(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570658);
  *(_QWORD *)a1 = &unk_1E6570580;
  *(_QWORD *)(a1 + 112) = &unk_1E6570638;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B2D36118(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;

  v7 = v3;
  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v7);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Equals>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E65707F8;
  *(_QWORD *)(a1 + 112) = &unk_1E65708B0;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570910;
  *(_QWORD *)(a1 + 112) = off_1E65709C8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::Equals>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E65707F8;
  *(_QWORD *)(a1 + 112) = &unk_1E65708B0;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570910;
  *(_QWORD *)(a1 + 112) = off_1E65709C8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  JUMPOUT(0x1B5E29170);
}

void ProShade::BinaryOp<ProShade::Equals>::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int *v11;
  _BYTE *v12;
  unsigned int v13;
  size_t v14;
  unsigned int *v15;
  _BYTE *v16;
  unsigned int v17;
  size_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  int v25;
  size_t v26;
  unsigned int *v27;
  unsigned int v28;
  size_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE *v50;
  _QWORD *v51;
  _BYTE *v52;
  _BYTE *v53;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 16))(&v53);
  v5 = v53;
  if (v53)
    v6 = *((_DWORD *)v53 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  v8 = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((_BYTE *)v7 + 12) = 40;
  v7[1] = v8;
  memcpy((char *)v7 + 13, v5, v6);
  *((_BYTE *)v7 + v8 + 12) = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (unsigned int *)malloc_type_malloc(v10 + 14, 0x8903763CuLL);
  v11[1] = v10 + 1;
  v11[2] = v10 + 2;
  atomic_store(1u, v11);
  v12 = v11 + 3;
  atomic_store(0, v11);
  memcpy(v11 + 3, v7 + 3, v10);
  v12[v10] = 32;
  v12[v10 + 1] = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = (int)v11[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 15, 0x8903763CuLL);
  v15[1] = v14 + 2;
  v15[2] = v14 + 3;
  atomic_store(1u, v15);
  v16 = v15 + 3;
  atomic_store(0, v15);
  memcpy(v15 + 3, v12, v14);
  *(_WORD *)&v16[v14] = 15677;
  v16[v14 + 2] = 0;
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 + 1, v15));
  v18 = (int)v15[1];
  v19 = (unsigned int *)malloc_type_malloc(v18 + 14, 0x8903763CuLL);
  v19[1] = v18 + 1;
  v19[2] = v18 + 2;
  atomic_store(1u, v19);
  v20 = v19 + 3;
  atomic_store(0, v19);
  memcpy(v19 + 3, v16, v18);
  *((_BYTE *)v20 + v18) = 32;
  *((_BYTE *)v20 + v18 + 1) = 0;
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v22 = *(_QWORD *)(a1 + 96);
  if (!v22)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v22 + 16))(&v52);
  v51 = a2;
  v23 = (int)v19[1];
  v24 = v52;
  if (v52)
    v25 = *((_DWORD *)v52 - 2);
  else
    v25 = 0;
  v26 = v23 + v25;
  v27 = (unsigned int *)malloc_type_malloc(v26 + 13, 0x8903763CuLL);
  v27[1] = v26;
  v27[2] = v26 + 1;
  atomic_store(1u, v27);
  atomic_store(0, v27);
  memcpy(v27 + 3, v19 + 3, v23);
  memcpy((char *)v27 + v23 + 12, v24, v25);
  *((_BYTE *)v27 + v26 + 12) = 0;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = (int)v27[1];
  v30 = (unsigned int *)malloc_type_malloc(v29 + 14, 0x8903763CuLL);
  v30[1] = v29 + 1;
  v30[2] = v29 + 2;
  atomic_store(1u, v30);
  v31 = v30 + 3;
  atomic_store(0, v30);
  memcpy(v30 + 3, v27 + 3, v29);
  *((_BYTE *)v31 + v29) = 41;
  *((_BYTE *)v31 + v29 + 1) = 0;
  *v51 = v30 + 3;
  do
    v32 = __ldaxr(v30);
  while (__stlxr(v32 + 1, v30));
  do
  {
    v33 = __ldaxr(v27);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v27));
  if (!v34)
    free(v27);
  if (v52)
  {
    v35 = (unsigned int *)(v52 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v52 = 0;
      if (v52)
        v38 = v52 - 12;
      else
        v38 = 0;
      free(v38);
    }
  }
  do
  {
    v39 = __ldaxr(v19);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v19));
  if (!v40)
    free(v19);
  do
  {
    v41 = __ldaxr(v15);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v15));
  if (!v42)
    free(v15);
  do
  {
    v43 = __ldaxr(v11);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v11));
  if (!v44)
    free(v11);
  do
  {
    v45 = __ldaxr(v7);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v7));
  if (!v46)
    free(v7);
  if (v53)
  {
    v47 = (unsigned int *)(v53 - 12);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      *v53 = 0;
      if (v53)
        v50 = v53 - 12;
      else
        v50 = 0;
      free(v50);
    }
  }
}

void sub_1B2D366C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11, _BYTE *a12)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  do
  {
    v18 = __ldaxr(v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v16));
  if (!v19)
    free(v16);
  if (a11)
  {
    v20 = (unsigned int *)(a11 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  do
  {
    v23 = __ldaxr(v15);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v15));
  if (!v24)
    free(v15);
  do
  {
    v25 = __ldaxr(v14);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v14));
  if (!v26)
    free(v14);
  do
  {
    v27 = __ldaxr(v13);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v13));
  if (!v28)
    free(v13);
  do
  {
    v29 = __ldaxr(v12);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v12));
  if (!v30)
    free(v12);
  if (a12)
  {
    v31 = (unsigned int *)(a12 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Equals>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "BinaryOp ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 15, 0x8903763CuLL);
  v5[1] = v4 + 2;
  v5[2] = v4 + 3;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(_WORD *)((char *)v6 + v4) = 15677;
  *((_BYTE *)v6 + v4 + 2) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D368FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::Equals>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "==");
}

int8x8_t *ProShade::BinaryOp<ProShade::Equals>::computeHash(uint64_t a1, int8x8_t *this)
{
  __n128 v5;

  PCHashWriteStream::writeValue(this, "==");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::Equals>::apply(uint64_t a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  PCSharedCount v9;
  void *v10;
  uint64_t v11;
  PCSharedCount v12;

  v4 = a1;
  (**a2)(&v10, a2, a1 + 48);
  (**a2)(&v7, a2, v4 + 80);
  if (v11 != *(_QWORD *)(v4 + 64) || v8 != *(_QWORD *)(v4 + 96))
  {
    v6 = operator new();
    ProShade::BinaryOp<ProShade::Equals>::BinaryOp(v6, v11, v8, *(_DWORD *)(v4 + 44));
    v4 = v6;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v7 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v9);
  v10 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2D36A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  PCSharedCount v6;
  va_list va;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6.var0 = va_arg(va1, PC_Sp_counted_base *);
  v8 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  v8 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

ProShade::Node *ProShade::BinaryOp<ProShade::Equals>::clone(const PCSharedCount *a1)
{
  ProShade::Node *v2;

  v2 = (ProShade::Node *)operator new();
  ProShade::BinaryOp<ProShade::Equals>::BinaryOp((uint64_t)v2);
  ProShade::BinaryOp<ProShade::Add>::copyFrom(v2, a1);
  return v2;
}

void sub_1B2D36B44(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

BOOL ProShade::BinaryOp<ProShade::Equals>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3 < 1)
    PCArray_base::badIndex(a1);
  if (v3 <= 1)
    PCArray_base::badIndex(a1);
  return ProShade::computeBinaryType<ProShade::Equals,BOOL>(*(unsigned int **)(a2 + 16), (unsigned int *)(*(_QWORD *)(a2 + 16) + 144), a3);
}

void `virtual thunk to'ProShade::BinaryOp<ProShade::Equals>::~BinaryOp(_QWORD *a1)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E65707F8;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E65708B0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570910;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E65709C8;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E65707F8;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E65708B0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570910;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E65709C8;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::BinaryOp<ProShade::Equals>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  PCShared_base *v8;
  PCShared_base *v9;
  const PCString *v10;
  int v11;
  int v12;
  BOOL v13;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65708D0);
  *(_QWORD *)a1 = &unk_1E65707F8;
  *(_QWORD *)(a1 + 112) = &unk_1E65708B0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v8 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v8);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v9 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v9 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v9);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a3 + 28);
  if (v11 != 1)
  {
    if (v12 == 1)
    {
      v12 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v13 = v11 == v12;
      v12 = *(_DWORD *)(a2 + 28);
      if (!v13)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v10);
    }
  }
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v12;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D36E60(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::Equals>::BinaryOp(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E65708D0);
  *(_QWORD *)a1 = &unk_1E65707F8;
  *(_QWORD *)(a1 + 112) = &unk_1E65708B0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B2D36F74(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;

  v7 = v3;
  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v7);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::Equals,BOOL>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *v11;
  BOOL *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  BOOL *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _BOOL8 result;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  _BOOL4 v24;
  BOOL v25;
  _BOOL4 v26;
  PCException *exception;
  uint64_t v28;
  PCString v29;
  PCString v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v10 = v8;
  v11 = (void *)*a1;
  if ((_DWORD)v11 == 1)
  {
    v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v12 = (BOOL *)&v28 - v13;
    bzero((char *)&v28 - v13, v14);
    v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 1, v12, Size);
  }
  v15 = (void *)*a2;
  if ((_DWORD)v15 == 1)
  {
    v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v16 = (BOOL *)&v28 - v17;
    bzero((char *)&v28 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 1, v16, v10);
  }
  v19 = a1[1];
  if (v19 != a2[1])
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)1, v19);
  result = ProShade::shapeIsVector(a1[1]);
  v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v30, "not implemented yet");
    PCString::PCString(&v29, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v30, &v29, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
  {
    v22 = (_BYTE *)(a3 + 16);
    v23 = Size;
    do
    {
      v24 = *v12++;
      v25 = !v24;
      v26 = *v16++;
      *v22++ = v25 ^ v26;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B2D371F8(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::GreaterThan>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570A70;
  *(_QWORD *)(a1 + 112) = &unk_1E6570B28;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570B88;
  *(_QWORD *)(a1 + 112) = off_1E6570C40;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::GreaterThan>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570A70;
  *(_QWORD *)(a1 + 112) = &unk_1E6570B28;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570B88;
  *(_QWORD *)(a1 + 112) = off_1E6570C40;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  JUMPOUT(0x1B5E29170);
}

void ProShade::BinaryOp<ProShade::GreaterThan>::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int *v11;
  _BYTE *v12;
  unsigned int v13;
  size_t v14;
  unsigned int *v15;
  _BYTE *v16;
  unsigned int v17;
  size_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  int v25;
  size_t v26;
  unsigned int *v27;
  unsigned int v28;
  size_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE *v50;
  _QWORD *v51;
  _BYTE *v52;
  _BYTE *v53;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 16))(&v53);
  v5 = v53;
  if (v53)
    v6 = *((_DWORD *)v53 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  v8 = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((_BYTE *)v7 + 12) = 40;
  v7[1] = v8;
  memcpy((char *)v7 + 13, v5, v6);
  *((_BYTE *)v7 + v8 + 12) = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (unsigned int *)malloc_type_malloc(v10 + 14, 0x8903763CuLL);
  v11[1] = v10 + 1;
  v11[2] = v10 + 2;
  atomic_store(1u, v11);
  v12 = v11 + 3;
  atomic_store(0, v11);
  memcpy(v11 + 3, v7 + 3, v10);
  v12[v10] = 32;
  v12[v10 + 1] = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = (int)v11[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 14, 0x8903763CuLL);
  v15[1] = v14 + 1;
  v15[2] = v14 + 2;
  atomic_store(1u, v15);
  v16 = v15 + 3;
  atomic_store(0, v15);
  memcpy(v15 + 3, v12, v14);
  v16[v14] = 62;
  v16[v14 + 1] = 0;
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 + 1, v15));
  v18 = (int)v15[1];
  v19 = (unsigned int *)malloc_type_malloc(v18 + 14, 0x8903763CuLL);
  v19[1] = v18 + 1;
  v19[2] = v18 + 2;
  atomic_store(1u, v19);
  v20 = v19 + 3;
  atomic_store(0, v19);
  memcpy(v19 + 3, v16, v18);
  *((_BYTE *)v20 + v18) = 32;
  *((_BYTE *)v20 + v18 + 1) = 0;
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v22 = *(_QWORD *)(a1 + 96);
  if (!v22)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v22 + 16))(&v52);
  v51 = a2;
  v23 = (int)v19[1];
  v24 = v52;
  if (v52)
    v25 = *((_DWORD *)v52 - 2);
  else
    v25 = 0;
  v26 = v23 + v25;
  v27 = (unsigned int *)malloc_type_malloc(v26 + 13, 0x8903763CuLL);
  v27[1] = v26;
  v27[2] = v26 + 1;
  atomic_store(1u, v27);
  atomic_store(0, v27);
  memcpy(v27 + 3, v19 + 3, v23);
  memcpy((char *)v27 + v23 + 12, v24, v25);
  *((_BYTE *)v27 + v26 + 12) = 0;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = (int)v27[1];
  v30 = (unsigned int *)malloc_type_malloc(v29 + 14, 0x8903763CuLL);
  v30[1] = v29 + 1;
  v30[2] = v29 + 2;
  atomic_store(1u, v30);
  v31 = v30 + 3;
  atomic_store(0, v30);
  memcpy(v30 + 3, v27 + 3, v29);
  *((_BYTE *)v31 + v29) = 41;
  *((_BYTE *)v31 + v29 + 1) = 0;
  *v51 = v30 + 3;
  do
    v32 = __ldaxr(v30);
  while (__stlxr(v32 + 1, v30));
  do
  {
    v33 = __ldaxr(v27);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v27));
  if (!v34)
    free(v27);
  if (v52)
  {
    v35 = (unsigned int *)(v52 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v52 = 0;
      if (v52)
        v38 = v52 - 12;
      else
        v38 = 0;
      free(v38);
    }
  }
  do
  {
    v39 = __ldaxr(v19);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v19));
  if (!v40)
    free(v19);
  do
  {
    v41 = __ldaxr(v15);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v15));
  if (!v42)
    free(v15);
  do
  {
    v43 = __ldaxr(v11);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v11));
  if (!v44)
    free(v11);
  do
  {
    v45 = __ldaxr(v7);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v7));
  if (!v46)
    free(v7);
  if (v53)
  {
    v47 = (unsigned int *)(v53 - 12);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      *v53 = 0;
      if (v53)
        v50 = v53 - 12;
      else
        v50 = 0;
      free(v50);
    }
  }
}

void sub_1B2D3779C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11, _BYTE *a12)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  do
  {
    v18 = __ldaxr(v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v16));
  if (!v19)
    free(v16);
  if (a11)
  {
    v20 = (unsigned int *)(a11 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  do
  {
    v23 = __ldaxr(v15);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v15));
  if (!v24)
    free(v15);
  do
  {
    v25 = __ldaxr(v14);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v14));
  if (!v26)
    free(v14);
  do
  {
    v27 = __ldaxr(v13);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v13));
  if (!v28)
    free(v13);
  do
  {
    v29 = __ldaxr(v12);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v12));
  if (!v30)
    free(v12);
  if (a12)
  {
    v31 = (unsigned int *)(a12 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::GreaterThan>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "BinaryOp ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 14, 0x8903763CuLL);
  v5[1] = v4 + 1;
  v5[2] = v4 + 2;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *((_BYTE *)v6 + v4) = 62;
  *((_BYTE *)v6 + v4 + 1) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D379D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::GreaterThan>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, ">");
}

int8x8_t *ProShade::BinaryOp<ProShade::GreaterThan>::computeHash(uint64_t a1, int8x8_t *this)
{
  __n128 v5;

  PCHashWriteStream::writeValue(this, ">");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::GreaterThan>::apply(uint64_t a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  PCSharedCount v9;
  void *v10;
  uint64_t v11;
  PCSharedCount v12;

  v4 = a1;
  (**a2)(&v10, a2, a1 + 48);
  (**a2)(&v7, a2, v4 + 80);
  if (v11 != *(_QWORD *)(v4 + 64) || v8 != *(_QWORD *)(v4 + 96))
  {
    v6 = operator new();
    ProShade::BinaryOp<ProShade::GreaterThan>::BinaryOp(v6, v11, v8, *(_DWORD *)(v4 + 44));
    v4 = v6;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v7 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v9);
  v10 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2D37B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  PCSharedCount v6;
  va_list va;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6.var0 = va_arg(va1, PC_Sp_counted_base *);
  v8 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  v8 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

ProShade::Node *ProShade::BinaryOp<ProShade::GreaterThan>::clone(const PCSharedCount *a1)
{
  ProShade::Node *v2;

  v2 = (ProShade::Node *)operator new();
  ProShade::BinaryOp<ProShade::GreaterThan>::BinaryOp((uint64_t)v2);
  ProShade::BinaryOp<ProShade::Add>::copyFrom(v2, a1);
  return v2;
}

void sub_1B2D37C1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

BOOL ProShade::BinaryOp<ProShade::GreaterThan>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3 < 1)
    PCArray_base::badIndex(a1);
  if (v3 <= 1)
    PCArray_base::badIndex(a1);
  return ProShade::computeBinaryType<ProShade::GreaterThan,BOOL>(*(unsigned int **)(a2 + 16), (unsigned int *)(*(_QWORD *)(a2 + 16) + 144), a3);
}

void `virtual thunk to'ProShade::BinaryOp<ProShade::GreaterThan>::~BinaryOp(_QWORD *a1)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570A70;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E6570B28;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570B88;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E6570C40;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570A70;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E6570B28;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570B88;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E6570C40;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::BinaryOp<ProShade::GreaterThan>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  PCShared_base *v8;
  PCShared_base *v9;
  const PCString *v10;
  int v11;
  int v12;
  BOOL v13;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570B48);
  *(_QWORD *)a1 = &unk_1E6570A70;
  *(_QWORD *)(a1 + 112) = &unk_1E6570B28;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v8 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v8);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v9 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v9 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v9);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a3 + 28);
  if (v11 != 1)
  {
    if (v12 == 1)
    {
      v12 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v13 = v11 == v12;
      v12 = *(_DWORD *)(a2 + 28);
      if (!v13)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v10);
    }
  }
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v12;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D37F38(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::GreaterThan>::BinaryOp(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570B48);
  *(_QWORD *)a1 = &unk_1E6570A70;
  *(_QWORD *)(a1 + 112) = &unk_1E6570B28;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B2D3804C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;

  v7 = v3;
  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v7);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::GreaterThan,BOOL>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *v11;
  BOOL *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  BOOL *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _BOOL8 result;
  int v21;
  char *v22;
  uint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  char v29;
  PCException *exception;
  uint64_t v31;
  PCString v32;
  PCString v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v10 = v8;
  v11 = (void *)*a1;
  if ((_DWORD)v11 == 1)
  {
    v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v12 = (BOOL *)&v31 - v13;
    bzero((char *)&v31 - v13, v14);
    v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 1, v12, Size);
  }
  v15 = (void *)*a2;
  if ((_DWORD)v15 == 1)
  {
    v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v16 = (BOOL *)&v31 - v17;
    bzero((char *)&v31 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 1, v16, v10);
  }
  v19 = a1[1];
  if (v19 != a2[1])
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)1, v19);
  result = ProShade::shapeIsVector(a1[1]);
  v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v33, "not implemented yet");
    PCString::PCString(&v32, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v33, &v32, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
  {
    v22 = (char *)(a3 + 16);
    v23 = Size;
    do
    {
      v25 = *v12++;
      v24 = v25;
      v27 = *v16++;
      v26 = v27;
      v29 = v24 && !v26;
      *v22++ = v29;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B2D382C8(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::LessThanEquals>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570CE8;
  *(_QWORD *)(a1 + 112) = &unk_1E6570DA0;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570E00;
  *(_QWORD *)(a1 + 112) = off_1E6570EB8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  return a1;
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::~BinaryOp(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E6570CE8;
  *(_QWORD *)(a1 + 112) = &unk_1E6570DA0;
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 104));
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)a1 = off_1E6570E00;
  *(_QWORD *)(a1 + 112) = off_1E6570EB8;
  LiString::dec((LiString *)(a1 + 32));
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_BYTE *)(a1 + 128) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(a1 + 120));
  JUMPOUT(0x1B5E29170);
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::repr(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  int v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int v9;
  size_t v10;
  unsigned int *v11;
  _BYTE *v12;
  unsigned int v13;
  size_t v14;
  unsigned int *v15;
  _BYTE *v16;
  unsigned int v17;
  size_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  int v25;
  size_t v26;
  unsigned int *v27;
  unsigned int v28;
  size_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  _BYTE *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  _BYTE *v50;
  _QWORD *v51;
  _BYTE *v52;
  _BYTE *v53;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v4 + 16))(&v53);
  v5 = v53;
  if (v53)
    v6 = *((_DWORD *)v53 - 2);
  else
    v6 = 0;
  v7 = (unsigned int *)malloc_type_malloc(v6 + 14, 0x8903763CuLL);
  v8 = v6 + 1;
  v7[2] = v6 + 2;
  atomic_store(1u, v7);
  atomic_store(0, v7);
  *((_BYTE *)v7 + 12) = 40;
  v7[1] = v8;
  memcpy((char *)v7 + 13, v5, v6);
  *((_BYTE *)v7 + v8 + 12) = 0;
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 + 1, v7));
  v10 = (int)v7[1];
  v11 = (unsigned int *)malloc_type_malloc(v10 + 14, 0x8903763CuLL);
  v11[1] = v10 + 1;
  v11[2] = v10 + 2;
  atomic_store(1u, v11);
  v12 = v11 + 3;
  atomic_store(0, v11);
  memcpy(v11 + 3, v7 + 3, v10);
  v12[v10] = 32;
  v12[v10 + 1] = 0;
  do
    v13 = __ldaxr(v11);
  while (__stlxr(v13 + 1, v11));
  v14 = (int)v11[1];
  v15 = (unsigned int *)malloc_type_malloc(v14 + 15, 0x8903763CuLL);
  v15[1] = v14 + 2;
  v15[2] = v14 + 3;
  atomic_store(1u, v15);
  v16 = v15 + 3;
  atomic_store(0, v15);
  memcpy(v15 + 3, v12, v14);
  *(_WORD *)&v16[v14] = 15676;
  v16[v14 + 2] = 0;
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 + 1, v15));
  v18 = (int)v15[1];
  v19 = (unsigned int *)malloc_type_malloc(v18 + 14, 0x8903763CuLL);
  v19[1] = v18 + 1;
  v19[2] = v18 + 2;
  atomic_store(1u, v19);
  v20 = v19 + 3;
  atomic_store(0, v19);
  memcpy(v19 + 3, v16, v18);
  *((_BYTE *)v20 + v18) = 32;
  *((_BYTE *)v20 + v18 + 1) = 0;
  do
    v21 = __ldaxr(v19);
  while (__stlxr(v21 + 1, v19));
  v22 = *(_QWORD *)(a1 + 96);
  if (!v22)
    throw_PCNullPointerException(1);
  (*(void (**)(_BYTE **__return_ptr))(*(_QWORD *)v22 + 16))(&v52);
  v51 = a2;
  v23 = (int)v19[1];
  v24 = v52;
  if (v52)
    v25 = *((_DWORD *)v52 - 2);
  else
    v25 = 0;
  v26 = v23 + v25;
  v27 = (unsigned int *)malloc_type_malloc(v26 + 13, 0x8903763CuLL);
  v27[1] = v26;
  v27[2] = v26 + 1;
  atomic_store(1u, v27);
  atomic_store(0, v27);
  memcpy(v27 + 3, v19 + 3, v23);
  memcpy((char *)v27 + v23 + 12, v24, v25);
  *((_BYTE *)v27 + v26 + 12) = 0;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 + 1, v27));
  v29 = (int)v27[1];
  v30 = (unsigned int *)malloc_type_malloc(v29 + 14, 0x8903763CuLL);
  v30[1] = v29 + 1;
  v30[2] = v29 + 2;
  atomic_store(1u, v30);
  v31 = v30 + 3;
  atomic_store(0, v30);
  memcpy(v30 + 3, v27 + 3, v29);
  *((_BYTE *)v31 + v29) = 41;
  *((_BYTE *)v31 + v29 + 1) = 0;
  *v51 = v30 + 3;
  do
    v32 = __ldaxr(v30);
  while (__stlxr(v32 + 1, v30));
  do
  {
    v33 = __ldaxr(v27);
    v34 = v33 - 1;
  }
  while (__stlxr(v34, v27));
  if (!v34)
    free(v27);
  if (v52)
  {
    v35 = (unsigned int *)(v52 - 12);
    do
    {
      v36 = __ldaxr(v35);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v35));
    if (!v37)
    {
      *v52 = 0;
      if (v52)
        v38 = v52 - 12;
      else
        v38 = 0;
      free(v38);
    }
  }
  do
  {
    v39 = __ldaxr(v19);
    v40 = v39 - 1;
  }
  while (__stlxr(v40, v19));
  if (!v40)
    free(v19);
  do
  {
    v41 = __ldaxr(v15);
    v42 = v41 - 1;
  }
  while (__stlxr(v42, v15));
  if (!v42)
    free(v15);
  do
  {
    v43 = __ldaxr(v11);
    v44 = v43 - 1;
  }
  while (__stlxr(v44, v11));
  if (!v44)
    free(v11);
  do
  {
    v45 = __ldaxr(v7);
    v46 = v45 - 1;
  }
  while (__stlxr(v46, v7));
  if (!v46)
    free(v7);
  if (v53)
  {
    v47 = (unsigned int *)(v53 - 12);
    do
    {
      v48 = __ldaxr(v47);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v47));
    if (!v49)
    {
      *v53 = 0;
      if (v53)
        v50 = v53 - 12;
      else
        v50 = 0;
      free(v50);
    }
  }
}

void sub_1B2D3886C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11, _BYTE *a12)
{
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;

  do
  {
    v18 = __ldaxr(v16);
    v19 = v18 - 1;
  }
  while (__stlxr(v19, v16));
  if (!v19)
    free(v16);
  if (a11)
  {
    v20 = (unsigned int *)(a11 - 12);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      *a11 = 0;
      free(a11 - 12);
    }
  }
  do
  {
    v23 = __ldaxr(v15);
    v24 = v23 - 1;
  }
  while (__stlxr(v24, v15));
  if (!v24)
    free(v15);
  do
  {
    v25 = __ldaxr(v14);
    v26 = v25 - 1;
  }
  while (__stlxr(v26, v14));
  if (!v26)
    free(v14);
  do
  {
    v27 = __ldaxr(v13);
    v28 = v27 - 1;
  }
  while (__stlxr(v28, v13));
  if (!v28)
    free(v13);
  do
  {
    v29 = __ldaxr(v12);
    v30 = v29 - 1;
  }
  while (__stlxr(v30, v12));
  if (!v30)
    free(v12);
  if (a12)
  {
    v31 = (unsigned int *)(a12 - 12);
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      *a12 = 0;
      free(a12 - 12);
    }
  }
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::description(_QWORD *a1@<X8>)
{
  const void *v2;
  int v3;
  size_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _BYTE *v11;
  _BYTE *v12;

  LiString::LiString((LiString *)&v12, "BinaryOp ");
  v2 = v12;
  if (v12)
    v3 = *((_DWORD *)v12 - 2);
  else
    v3 = 0;
  v4 = v3;
  v5 = (unsigned int *)malloc_type_malloc(v3 + 15, 0x8903763CuLL);
  v5[1] = v4 + 2;
  v5[2] = v4 + 3;
  atomic_store(1u, v5);
  v6 = v5 + 3;
  atomic_store(0, v5);
  memcpy(v5 + 3, v2, v4);
  *(_WORD *)((char *)v6 + v4) = 15676;
  *((_BYTE *)v6 + v4 + 2) = 0;
  *a1 = v5 + 3;
  do
    v7 = __ldaxr(v5);
  while (__stlxr(v7 + 1, v5));
  if (v12)
  {
    v8 = (unsigned int *)(v12 - 12);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      *v12 = 0;
      if (v12)
        v11 = v12 - 12;
      else
        v11 = 0;
      free(v11);
    }
  }
}

void sub_1B2D38AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    ProShade::VertexProgram::VertexProgram(a10);
  _Unwind_Resume(exception_object);
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::shortDescription(LiString *a1@<X8>)
{
  LiString::LiString(a1, "<=");
}

int8x8_t *ProShade::BinaryOp<ProShade::LessThanEquals>::computeHash(uint64_t a1, int8x8_t *this)
{
  __n128 v5;

  PCHashWriteStream::writeValue(this, "<=");
  ProShade::VarT<ProShade::Node>::hash(a1 + 48, &v5);
  PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
  ProShade::VarT<ProShade::Node>::hash(a1 + 80, &v5);
  return PCHashWriteStream::writeValue(this, (const PCHash128 *)&v5);
}

void ProShade::BinaryOp<ProShade::LessThanEquals>::apply(uint64_t a1@<X0>, void (***a2)(void **__return_ptr, _QWORD, uint64_t)@<X1>, PCSharedCount *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  PCSharedCount v9;
  void *v10;
  uint64_t v11;
  PCSharedCount v12;

  v4 = a1;
  (**a2)(&v10, a2, a1 + 48);
  (**a2)(&v7, a2, v4 + 80);
  if (v11 != *(_QWORD *)(v4 + 64) || v8 != *(_QWORD *)(v4 + 96))
  {
    v6 = operator new();
    ProShade::BinaryOp<ProShade::LessThanEquals>::BinaryOp(v6, v11, v8, *(_DWORD *)(v4 + 44));
    v4 = v6;
  }
  a3->var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  a3[2].var0 = (PC_Sp_counted_base *)v4;
  PCSharedCount::PCSharedCount(a3 + 3, (PCShared_base *)(v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
  v7 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v9);
  v10 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(&v12);
}

void sub_1B2D38C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  PCSharedCount v6;
  va_list va;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6.var0 = va_arg(va1, PC_Sp_counted_base *);
  v8 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  MEMORY[0x1B5E29170](v4, 0x10B1C403815D87CLL);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  v8 = &unk_1E6569AC8;
  PCSharedCount::~PCSharedCount((PCSharedCount *)va1);
  _Unwind_Resume(a1);
}

ProShade::Node *ProShade::BinaryOp<ProShade::LessThanEquals>::clone(const PCSharedCount *a1)
{
  ProShade::Node *v2;

  v2 = (ProShade::Node *)operator new();
  ProShade::BinaryOp<ProShade::LessThanEquals>::BinaryOp((uint64_t)v2);
  ProShade::BinaryOp<ProShade::Add>::copyFrom(v2, a1);
  return v2;
}

void sub_1B2D38CEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B1C403815D87CLL);
  _Unwind_Resume(a1);
}

BOOL ProShade::BinaryOp<ProShade::LessThanEquals>::computeValue(PCArray_base *a1, uint64_t a2, uint64_t a3)
{
  int v3;

  v3 = *(_DWORD *)(a2 + 12);
  if (v3 < 1)
    PCArray_base::badIndex(a1);
  if (v3 <= 1)
    PCArray_base::badIndex(a1);
  return ProShade::computeBinaryType<ProShade::LessThanEquals,BOOL>(*(unsigned int **)(a2 + 16), (unsigned int *)(*(_QWORD *)(a2 + 16) + 144), a3);
}

void `virtual thunk to'ProShade::BinaryOp<ProShade::LessThanEquals>::~BinaryOp(_QWORD *a1)
{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570CE8;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E6570DA0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570E00;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E6570EB8;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
}

{
  PCSharedCount *v1;

  v1 = (PCSharedCount *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v1->var0 = (PC_Sp_counted_base *)&unk_1E6570CE8;
  v1[14].var0 = (PC_Sp_counted_base *)&unk_1E6570DA0;
  v1[10].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 13);
  v1[6].var0 = (PC_Sp_counted_base *)&unk_1E6569AC8;
  PCSharedCount::~PCSharedCount(v1 + 9);
  v1->var0 = (PC_Sp_counted_base *)off_1E6570E00;
  v1[14].var0 = (PC_Sp_counted_base *)off_1E6570EB8;
  LiString::dec((LiString *)&v1[4]);
  v1[14].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(v1[16].var0) = 0;
  PCWeakCount::~PCWeakCount(&v1[15].var0);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProShade::BinaryOp<ProShade::LessThanEquals>::BinaryOp(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  PCShared_base *v8;
  PCShared_base *v9;
  const PCString *v10;
  int v11;
  int v12;
  BOOL v13;

  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570DC0);
  *(_QWORD *)a1 = &unk_1E6570CE8;
  *(_QWORD *)(a1 + 112) = &unk_1E6570DA0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = a2;
  if (a2)
    v8 = (PCShared_base *)(a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
  else
    v8 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72), v8);
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = a3;
  if (a3)
    v9 = (PCShared_base *)(a3 + *(_QWORD *)(*(_QWORD *)a3 - 24));
  else
    v9 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104), v9);
  v11 = *(_DWORD *)(a2 + 28);
  v12 = *(_DWORD *)(a3 + 28);
  if (v11 != 1)
  {
    if (v12 == 1)
    {
      v12 = *(_DWORD *)(a2 + 28);
    }
    else
    {
      v13 = v11 == v12;
      v12 = *(_DWORD *)(a2 + 28);
      if (!v13)
        ProShade::Error<PCIllegalArgumentException>::raise<char [33]>((OZChannelBase *)"vector size mismatch", v10);
    }
  }
  *(_DWORD *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = v12;
  *(_DWORD *)(a1 + 44) = a4;
  ProShade::BinaryOp<ProShade::Multiply>::setFrequency(a1);
  return a1;
}

void sub_1B2D39008(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v3);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

uint64_t ProShade::BinaryOp<ProShade::LessThanEquals>::BinaryOp(uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &off_1E65EB048;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 1;
  ProShade::Node::Node((ProShade::Node *)a1, (uint64_t *)&off_1E6570DC0);
  *(_QWORD *)a1 = &unk_1E6570CE8;
  *(_QWORD *)(a1 + 112) = &unk_1E6570DA0;
  *(_QWORD *)(a1 + 48) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 64) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
  *(_QWORD *)(a1 + 80) = &unk_1E6569AC8;
  *(_QWORD *)(a1 + 96) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 104));
  return a1;
}

void sub_1B2D3911C(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  PCSharedCount *v7;

  v7 = v3;
  *(_QWORD *)(v1 + 48) = v6 + 16;
  PCSharedCount::~PCSharedCount(v7);
  ProShade::Node::~Node((ProShade::Node *)v1, (uint64_t *)(v5 + 8));
  *(_QWORD *)(v1 + 112) = v4 + 16;
  *(_BYTE *)(v1 + 128) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

BOOL ProShade::computeBinaryType<ProShade::LessThanEquals,BOOL>(unsigned int *a1, unsigned int *a2, uint64_t a3)
{
  int Size;
  const PCString *v7;
  uint64_t v8;
  const PCString *v9;
  int v10;
  void *v11;
  BOOL *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  BOOL *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  _BOOL8 result;
  int v21;
  char *v22;
  uint64_t v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _BOOL4 v27;
  char v29;
  PCException *exception;
  uint64_t v31;
  PCString v32;
  PCString v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  Size = ProShade::shapeGetSize(a1[1], (const PCString *)a2);
  v8 = ProShade::shapeGetSize(a2[1], v7);
  v10 = v8;
  v11 = (void *)*a1;
  if ((_DWORD)v11 == 1)
  {
    v12 = (BOOL *)(a1 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v12 = (BOOL *)&v31 - v13;
    bzero((char *)&v31 - v13, v14);
    v8 = (uint64_t)ProShade::copyData(v11, (const PCString *)a1 + 2, 1, v12, Size);
  }
  v15 = (void *)*a2;
  if ((_DWORD)v15 == 1)
  {
    v16 = (BOOL *)(a2 + 4);
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    v16 = (BOOL *)&v31 - v17;
    bzero((char *)&v31 - v17, v18);
    ProShade::copyData(v15, (const PCString *)a2 + 2, 1, v16, v10);
  }
  v19 = a1[1];
  if (v19 != a2[1])
    ProShade::Error<PCException>::raise<char [27]>((OZChannelBase *)"mismatched operator inputs", v9);
  ProShade::Value::set(a3, (const PCString *)1, v19);
  result = ProShade::shapeIsVector(a1[1]);
  v21 = a1[1] == 1 || result;
  if (v21 != 1)
  {
    exception = (PCException *)__cxa_allocate_exception(0x40uLL);
    PCString::PCString(&v33, "not implemented yet");
    PCString::PCString(&v32, "/Library/Caches/com.apple.xbs/Sources/LithiumiOS/Shading/PSOp.cpp");
    PCException::PCException(exception, &v33, &v32, 426);
    *(_QWORD *)exception = &unk_1E64FFFA0;
  }
  if (Size >= 1)
  {
    v22 = (char *)(a3 + 16);
    v23 = Size;
    do
    {
      v25 = *v12++;
      v24 = v25;
      v27 = *v16++;
      v26 = v27;
      v29 = !v24 || v26;
      *v22++ = v29;
      --v23;
    }
    while (v23);
  }
  return result;
}

void sub_1B2D39398(_Unwind_Exception *a1)
{
  void *v1;
  int v2;
  uint64_t v3;

  PCString::~PCString((PCString *)(v3 - 88));
  PCString::~PCString((PCString *)(v3 - 80));
  if (v2)
    __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

LiPlaneTransform *LiPlaneTransform::LiPlaneTransform(LiPlaneTransform *this, LiPlaneTransform *a2, char a3)
{
  *((_QWORD *)this + 10) = 0x3FF0000000000000;
  *((_QWORD *)this + 5) = 0x3FF0000000000000;
  *(_QWORD *)this = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_QWORD *)this + 31) = 0x3FF0000000000000;
  *((_QWORD *)this + 26) = 0x3FF0000000000000;
  *((_QWORD *)this + 21) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)((char *)this + 120) = _Q1;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *((_BYTE *)this + 297) = a3;
  return LiPlaneTransform::operator=(this, a2);
}

LiPlaneTransform *LiPlaneTransform::operator=(LiPlaneTransform *this, LiPlaneTransform *a2)
{
  uint64_t v3;
  LiPlaneTransform *v4;
  uint64_t i;

  if (a2 != this)
  {
    v3 = 0;
    v4 = this;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)((char *)v4 + i) = *(_QWORD *)((char *)a2 + i);
      ++v3;
      v4 = (LiPlaneTransform *)((char *)v4 + 32);
      a2 = (LiPlaneTransform *)((char *)a2 + 32);
    }
    while (v3 != 4);
  }
  LiPlaneTransform::compute(this);
  return this;
}

float64x2_t LiPlaneTransform::compute(LiPlaneTransform *this)
{
  uint64_t v2;
  float64x2_t *v3;
  double *v4;
  LiPlaneTransform *v5;
  uint64_t i;
  _BOOL4 v7;
  float64x2_t result;
  _BOOL4 MatrixPlane;
  float64x2_t v10;

  v2 = 0;
  v3 = (float64x2_t *)((char *)this + 264);
  v4 = (double *)((char *)this + 128);
  v5 = this;
  do
  {
    for (i = 0; i != 32; i += 16)
      *(_OWORD *)((char *)v5 + i + 128) = *(_OWORD *)((char *)v5 + i);
    ++v2;
    v5 = (LiPlaneTransform *)((char *)v5 + 32);
  }
  while (v2 != 4);
  v7 = PCMatrix44Tmpl<double>::invertTranspose(v4);
  *((_BYTE *)this + 256) = v7;
  if (v7)
  {
    *((_BYTE *)this + 296) = 0;
  }
  else
  {
    MatrixPlane = liFindMatrixPlane((double *)this, v3->f64);
    *((_BYTE *)this + 296) = MatrixPlane;
    if (MatrixPlane && !*((_BYTE *)this + 297))
    {
      result = vnegq_f64(*v3);
      v10 = vnegq_f64(v3[1]);
      *v3 = result;
      v3[1] = v10;
    }
  }
  return result;
}

BOOL PCMatrix44Tmpl<double>::invertTranspose(double *a1)
{
  _BOOL8 v2;

  v2 = PCMatrix44Tmpl<double>::invert(a1, a1, 0.0);
  if (v2)
    PCMatrix44Tmpl<double>::transpose((uint64_t)a1);
  return v2;
}

uint64_t LiPlaneTransform::operator()(uint64_t a1, double *a2, uint64_t a3)
{
  __int128 v3;

  if (*(_BYTE *)(a1 + 256))
  {
    PCMatrix44Tmpl<double>::transform<double>((double *)(a1 + 128), a2, (double *)a3);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 296))
      return 0;
    v3 = *(_OWORD *)(a1 + 280);
    *(_OWORD *)a3 = *(_OWORD *)(a1 + 264);
    *(_OWORD *)(a3 + 16) = v3;
  }
  return 1;
}

BOOL LiPlaneTransform::isValid(LiPlaneTransform *this)
{
  return *((_BYTE *)this + 256) || *((_BYTE *)this + 296) != 0;
}

void LiPolygon::LiPolygon(LiPolygon *this)
{
  *(_QWORD *)this = &off_1E6570F58;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = (char *)this + 64;
  *((_DWORD *)this + 2) = -1;
  *((_BYTE *)this + 96) = 0;
}

void LiPolygon::LiPolygon(LiPolygon *this, const LiPolygon *a2)
{
  *(_QWORD *)this = &off_1E6570F58;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = (char *)this + 64;
  *((_BYTE *)this + 96) = *((_BYTE *)a2 + 96);
  LiPolygon::ArrayFacet::copyFrom((__int128 ***)this + 11, (__int128 ***)a2 + 11);
}

void sub_1B2D39680(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

__int128 **LiPolygon::ArrayFacet::copyFrom(__int128 ***a1, __int128 ***a2)
{
  __int128 **result;

  result = *a1;
  if (result != *a2)
    return (__int128 **)std::vector<LiPolygon::PosEdge>::__assign_with_size[abi:ne180100]<LiPolygon::PosEdge*,LiPolygon::PosEdge*>(result, **a2, (*a2)[1], ((char *)(*a2)[1] - (char *)**a2) >> 5);
  return result;
}

void LiPolygon::~LiPolygon(LiPolygon *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E6570F58;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E6570F58;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E29170);
}

uint64_t LiPolygon::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  LiPolygon::ArrayFacet::copyFrom((__int128 ***)(a1 + 88), (__int128 ***)(a2 + 88));
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t LiPolygon::computePlane(LiPolygon *this)
{
  double *v2;
  _OWORD *v3;
  __int128 **v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  double *v19;
  double *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  if (!*((_BYTE *)this + 96))
  {
    *((_QWORD *)this + 5) = 0;
    v2 = (double *)((char *)this + 40);
    v3 = (_OWORD *)((char *)this + 16);
    *((_QWORD *)this + 6) = 0;
    *((_QWORD *)this + 7) = 0;
    v4 = (__int128 **)*((_QWORD *)this + 11);
    v5 = *v4;
    v6 = (char *)v4[1] - (char *)*v4;
    v7 = v6 >> 5;
    if ((v6 >> 5))
    {
      v8 = *v5;
      *((_QWORD *)this + 4) = *((_QWORD *)v5 + 2);
      *v3 = v8;
      if ((int)v7 >= 1)
      {
        v9 = 0;
        v10 = *v4;
        v11 = (v6 >> 5);
        v12 = (double *)(v10 + 1);
        v13 = 0.0;
        v14 = 0.0;
        v15 = 0.0;
        do
        {
          if (v11 - 1 == v9)
            v16 = 0;
          else
            v16 = v9 + 1;
          v17 = v9 + 2;
          v18 = v9 + 1;
          v19 = (double *)&v10[2 * v16];
          v20 = (double *)&v10[2 * (v17 % (int)v7)];
          v21 = v19[1];
          v22 = *v20 - *v19;
          v23 = v20[1] - v21;
          v24 = v19[2];
          v25 = v20[2] - v24;
          v26 = *v19 - *(v12 - 2);
          v27 = v21 - *(v12 - 1);
          v28 = *v12;
          v12 += 4;
          v29 = v24 - v28;
          v15 = v15 + v23 * v29 - v25 * v27;
          v14 = v25 * v26 - v22 * v29 + v14;
          *((double *)this + 5) = v15;
          *((double *)this + 6) = v14;
          v13 = v22 * v27 - v23 * v26 + v13;
          *((double *)this + 7) = v13;
          v9 = v18;
        }
        while (v11 != v18);
      }
      PCVector3<double>::normalize(v2, 0.000000100000001);
    }
    else
    {
      *(_QWORD *)v3 = 0;
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
    }
  }
  return (uint64_t)this + 16;
}

double LiPolygon::getPlaneEq@<D0>(LiPolygon *this@<X0>, double *a2@<X8>)
{
  double v2;
  double v3;
  double v4;
  double result;

  v2 = *((double *)this + 5);
  v3 = *((double *)this + 6);
  v4 = *((double *)this + 7);
  result = -(v2 * *((double *)this + 2) + v3 * *((double *)this + 3) + v4 * *((double *)this + 4));
  *a2 = v2;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = result;
  return result;
}

uint64_t LiPolygon::isCoplanar(LiPolygon *this, const LiPolygon *a2)
{
  int v2;
  int v3;

  v2 = *((_DWORD *)this + 2);
  if (v2 < 0)
    return (*(uint64_t (**)(LiPolygon *, const LiPolygon *))(*(_QWORD *)this + 40))(this, a2);
  v3 = *((_DWORD *)a2 + 2);
  if (v3 < 0 || v2 != v3)
    return (*(uint64_t (**)(LiPolygon *, const LiPolygon *))(*(_QWORD *)this + 40))(this, a2);
  else
    return 1;
}

BOOL LiPolygon::seemsCoplanar(LiPolygon *this, const LiPolygon *a2)
{
  return PCMath::equal((double *)this + 2, (double *)a2 + 2, 1.0e-10);
}

BOOL LiPolygon::isConvex(LiPolygon *this)
{
  char *v1;
  double v2;
  double v3;
  _BOOL4 v4;
  int v5;
  _BOOL8 IsConvex;
  void *__p;
  void *v9;
  uint64_t v10;

  v2 = *((double *)this + 5);
  v3 = *((double *)this + 6);
  v1 = (char *)this + 40;
  v4 = fabs(v3) > fabs(v2);
  if (fabs(*((double *)v1 + 2)) <= fabs(*(double *)&v1[8 * v4]))
    v5 = v4;
  else
    v5 = 2;
  __p = 0;
  v9 = 0;
  v10 = 0;
  elim<LiPolygon::PosFacet,LiChannelT<PCVector2<double>>>((double ***)v1 + 6, &__p, v5);
  IsConvex = liIsConvex((uint64_t *)&__p);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  return IsConvex;
}

void sub_1B2D399D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LiPolygon::set(uint64_t a1, double *a2)
{
  uint64_t *v3;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v3 = *(uint64_t **)(a1 + 88);
  if (a2[2] < 0.0 || a2[3] < 0.0)
  {
    std::vector<LiPolygon::PosEdge>::resize(v3, 0);
  }
  else
  {
    std::vector<LiPolygon::PosEdge>::resize(v3, 4uLL);
    v5 = **(_QWORD **)(a1 + 88);
    v6 = *a2;
    v7 = a2[1];
    *(double *)v5 = *a2;
    *(double *)(v5 + 8) = v7;
    *(_QWORD *)(v5 + 16) = 0;
    v8 = a2[2];
    v9 = v7 + a2[3];
    *(double *)(v5 + 32) = v6;
    *(double *)(v5 + 40) = v9;
    *(_QWORD *)(v5 + 48) = 0;
    v10 = v6 + v8;
    *(double *)(v5 + 64) = v10;
    *(double *)(v5 + 72) = v9;
    *(_QWORD *)(v5 + 80) = 0;
    *(double *)(v5 + 96) = v10;
    *(double *)(v5 + 104) = v7;
    *(_QWORD *)(v5 + 112) = 0;
  }
}

double PCPlane<double>::intersect(double *a1, double *a2, double *a3, double *a4)
{
  double result;
  _OWORD v7[3];

  memset(v7, 0, sizeof(v7));
  if (planeIntersection<double>(a1, a1 + 3, a2, a2 + 3, (double *)v7, (double *)&v7[1] + 1))
    return PCPlane<double>::intersect(a3, (double *)v7, a4);
  return result;
}

void LiPolygon::dilate(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::vector<int>::pointer begin;
  uint64_t *v7;
  char *v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  unint64_t v21;
  float64x2_t *v22;
  float64x2_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  char *v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  double v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  double *v43;
  uint64_t v44;
  char v45;
  int v46;
  double v47;
  double v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD *v57;
  int *v58;
  char *v59;
  double *v60;
  char *v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v68;
  double v69;
  double v70;
  double *v71;
  char *v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double *v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  __int128 v90;
  char v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  char v95;
  std::vector<int>::const_iterator v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  int v100;
  char *v101;
  int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  float64x2_t v107;
  int v108;
  int v109;
  uint64_t *v110;
  uint64_t v111;
  _OWORD *v112;
  _OWORD *v113;
  _OWORD *v114;
  _OWORD *v115;
  uint64_t *v116;
  int v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  int v122;
  int v123;
  int v124;
  PCException *exception;
  PCException *v126;
  _QWORD *v127;
  _QWORD *v128;
  double v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  double v133;
  _OWORD v134[3];
  _OWORD v135[3];
  __int128 v136;
  double v137;
  int v138;
  int v139;
  void *__p;
  char *v141;
  unint64_t v142;
  float64x2_t v143;
  float64x2_t v144;
  float64x2_t v145;
  std::vector<int> v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  std::vector<int>::value_type __x[4];
  __int128 v151;

  v3 = a1;
  memset(&v146, 0, sizeof(v146));
  v4 = *(_QWORD *)(a1[11] + 8) - *(_QWORD *)a1[11];
  std::vector<unsigned int>::resize(&v146, (int)(v4 >> 5));
  if ((int)((unint64_t)v4 >> 5) >= 1)
  {
    v5 = 0;
    begin = v146.__begin_;
    do
    {
      begin[v5] = v5;
      ++v5;
    }
    while (((unint64_t)v4 >> 5) != v5);
  }
  v7 = (uint64_t *)v3[11];
  v8 = (char *)((unint64_t)(v7[1] - *v7) >> 5);
  if ((int)v8 < 1)
    goto LABEL_24;
  v128 = a2;
  v9 = 0;
  do
  {
    if ((int)v8 <= 0)
      _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
    v10 = v9;
    if (v9 < 0)
      v10 = v9 % (int)v8 + (_DWORD)v8;
    v11 = v10 % (int)v8 + 1;
    if (v10 % (int)v8 <= -2)
      v11 = v11 % (int)v8 + (_DWORD)v8;
    v7 = (uint64_t *)v3[11];
    v12 = *v7;
    v13 = (double *)(*v7 + 32 * (v10 % (int)v8));
    v14 = v11 % (int)v8;
    v15 = *v7 + 32 * v14;
    if (vabdd_f64(*v13, *(double *)v15) >= 0.0000001
      || vabdd_f64(v13[1], *(double *)(v15 + 8)) >= 0.0000001
      || vabdd_f64(v13[2], *(double *)(v15 + 16)) >= 0.0000001)
    {
      ++v9;
    }
    else
    {
      v16 = v7[1];
      if (v15 + 32 != v16)
      {
        do
        {
          v17 = v15 + 32;
          *(_OWORD *)v15 = *(_OWORD *)(v15 + 32);
          *(_OWORD *)(v15 + 12) = *(_OWORD *)(v15 + 44);
          v18 = v15 + 64;
          v15 += 32;
        }
        while (v18 != v16);
        v15 = v17;
      }
      v7[1] = v15;
      v19 = &v146.__begin_[v14];
      v20 = (char *)((char *)v146.__end_ - (char *)(v19 + 1));
      if (v146.__end_ != v19 + 1)
        memmove(&v146.__begin_[v14], v19 + 1, (char *)v146.__end_ - (char *)(v19 + 1));
      v146.__end_ = (std::vector<int>::pointer)&v20[(_QWORD)v19];
      v7 = (uint64_t *)v3[11];
      v12 = *v7;
    }
    v21 = v7[1] - v12;
    v8 = (char *)(v21 >> 5);
  }
  while (v9 < (int)(v21 >> 5));
  if ((int)v8 > 2)
  {
    v22 = (float64x2_t *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    v23 = v22[1];
    v143 = *v22;
    v144 = v23;
    v145 = v22[2];
    __p = 0;
    v141 = 0;
    v142 = 0;
    std::vector<PCPlane<double>>::reserve((uint64_t *)&__p, (v21 >> 4));
    v24 = 0;
    v138 = 0;
    v139 = (int)v8;
    do
    {
      if ((int)v8 <= 0)
        _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
      v25 = v24 + 1;
      if (v24 <= -2)
        v25 = v25 % (int)v8 + (_DWORD)v8;
      v26 = *(_QWORD *)v3[11] + 32 * v24;
      v27 = *(_QWORD *)v3[11] + 32 * (v25 % (int)v8);
      v28 = *(double *)v27;
      v29 = *(double *)v26;
      v133 = v144.f64[1];
      v130 = *(float64x2_t *)(v26 + 8);
      v131 = *(float64x2_t *)(v27 + 8);
      v132 = v145;
      v129 = *(double *)(*a2 + 8 * v146.__begin_[v138]);
      v148 = 0u;
      v149 = 0u;
      v147 = 0u;
      v30 = v141;
      if ((unint64_t)v141 >= v142)
      {
        v8 = (char *)std::vector<PCPlane<double>>::__push_back_slow_path<PCPlane<double>>((uint64_t *)&__p, &v147);
      }
      else
      {
        v8 = v141 + 48;
        *((_OWORD *)v141 + 1) = 0uLL;
        *((_OWORD *)v30 + 2) = 0uLL;
        *(_OWORD *)v30 = 0uLL;
      }
      *(_QWORD *)&v31.f64[0] = vdupq_laneq_s64((int64x2_t)v132, 1).u64[0];
      v32 = vsubq_f64(v131, v130);
      v31.f64[1] = v133;
      *(_QWORD *)&v33.f64[0] = vdupq_laneq_s64((int64x2_t)v32, 1).u64[0];
      v33.f64[1] = v28 - v29;
      v141 = v8;
      *(float64x2_t *)(v8 - 24) = vsubq_f64(vmulq_f64(v32, v31), vmulq_f64(v33, v132));
      *((double *)v8 - 1) = (v28 - v29) * v132.f64[0] - v133 * v32.f64[0];
      PCVector3<double>::normalize((double *)v8 - 3, 0.000000100000001);
      v34 = *(double *)(v26 + 16) - v129 * *((double *)v8 - 1);
      *((float64x2_t *)v8 - 3) = vsubq_f64(*(float64x2_t *)v26, vmulq_n_f64(*(float64x2_t *)(v8 - 24), v129));
      *((double *)v8 - 4) = v34;
      LODWORD(v8) = v139;
      v24 = (v138 + 1) % v139;
      v138 = v24;
    }
    while (v24);
    v138 = 0;
    v35 = (*(_QWORD *)(v3[11] + 8) - *(_QWORD *)v3[11]) >> 5;
    v139 = v35;
    if ((int)v35 >= 1)
    {
      v36 = 0;
      v127 = v3;
      do
      {
        if ((int)v35 <= 0)
          _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
        v37 = v36 - 1;
        if (v36 <= 0)
          v37 = v37 % (int)v35 + v35;
        v38 = v37 % (int)v35;
        v39 = (char *)__p;
        v40 = (double *)((char *)__p + 48 * v38);
        v41 = v138;
        v42 = *(_QWORD *)v3[11];
        v43 = (double *)((char *)__p + 48 * v138);
        v136 = 0uLL;
        v137 = 0.0;
        PCPlane<double>::intersect(v143.f64, v40, v43, (double *)&v136);
        v44 = v138;
        if ((v45 & 1) != 0)
        {
          if (v139 <= 0)
            _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
          v46 = v138 - 1;
          if (v138 <= 0)
            v46 = v46 % v139 + v139;
          v47 = *(double *)(*v128 + 8 * v146.__begin_[v46 % v139]);
          v48 = *(double *)(*v128 + 8 * v146.__begin_[v138]);
          if (v47 == 0.0 && v48 == 0.0)
          {
            ++v36;
            v3 = v127;
          }
          else
          {
            if (v47 < v48)
              v47 = *(double *)(*v128 + 8 * v146.__begin_[v138]);
            v3 = v127;
            if (v47 <= 0.0)
              goto LABEL_74;
            v148 = 0u;
            v149 = 0u;
            v147 = 0u;
            v60 = (double *)&v39[48 * v38];
            v62 = v60[4];
            v61 = (char *)(v60 + 4);
            v63 = v62;
            v64 = *((double *)v61 - 1);
            v65 = *((double *)v61 + 1);
            v66 = sqrt(v64 * v64 + v63 * v63 + v65 * v65);
            if (v66 < 0.000000100000001 && v66 > -0.000000100000001)
              v66 = 1.0;
            v68 = v64 / v66;
            v69 = v63 / v66;
            v70 = v65 / v66;
            v71 = (double *)&v39[48 * (int)v41];
            v73 = v71[4];
            v72 = (char *)(v71 + 4);
            v74 = v73;
            v75 = *((double *)v72 - 1);
            v76 = *((double *)v72 + 1);
            v77 = sqrt(v75 * v75 + v74 * v74 + v76 * v76);
            if (v77 < 0.000000100000001 && v77 > -0.000000100000001)
              v77 = 1.0;
            v79 = v74 / v77;
            v80 = v68 + v75 / v77;
            v81 = v69 + v79;
            v82 = v70 + v76 / v77;
            *((double *)&v148 + 1) = v80;
            *(double *)&v149 = v81;
            *((double *)&v149 + 1) = v82;
            v83 = sqrt(v82 * v82 + v80 * v80 + v81 * v81);
            if (v83 <= -0.000000100000001 || v83 >= 0.000000100000001)
            {
              v80 = v80 / v83;
              v81 = v81 / v83;
              *((double *)&v148 + 1) = v80;
              *(double *)&v149 = v81;
              v82 = v82 / v83;
              *((double *)&v149 + 1) = v82;
            }
            v84 = (double *)(v42 + 32 * v41);
            v85 = v47 + v47;
            v86 = *v84 - v85 * v80;
            v87 = v84[1] - v85 * v81;
            v88 = v84[2] - v85 * v82;
            *(double *)&v147 = v86;
            *((double *)&v147 + 1) = v87;
            *(double *)&v148 = v88;
            if (v80 * (*(double *)&v136 - v86) + v81 * (*((double *)&v136 + 1) - v87) + v82 * (v137 - v88) < 0.0)
            {
              v135[0] = *(_OWORD *)v40;
              v135[1] = *((_OWORD *)v40 + 1);
              v135[2] = *(_OWORD *)v61;
              v134[0] = *(_OWORD *)v43;
              v134[1] = *((_OWORD *)v43 + 1);
              v134[2] = *(_OWORD *)v72;
              PCPlane<double>::intersect(v143.f64, (double *)&v147, (double *)v135, (double *)(*(_QWORD *)v127[11] + 32 * v138));
              if ((v91 & 1) == 0)
              {
                exception = (PCException *)__cxa_allocate_exception(0x40uLL);
                PCString::PCString((PCString *)__x, "edges must not be parallel (1)");
                PCException::PCException(exception, (const PCString *)__x);
              }
              std::vector<PCPlane<double>>::insert((uint64_t *)&__p, (_OWORD *)__p + 3 * v36, (unint64_t)&v147);
              v92 = v36 + 1;
              v93 = (uint64_t *)v127[11];
              v94 = *v93 + 32 * v92;
              *(_OWORD *)__x = 0u;
              v151 = 0u;
              std::vector<LiPolygon::PosEdge>::insert(v93, v94, (uint64_t)__x);
              PCPlane<double>::intersect(v143.f64, (double *)&v147, (double *)v134, (double *)(*(_QWORD *)v127[11] + 32 * v92));
              if ((v95 & 1) == 0)
              {
                v126 = (PCException *)__cxa_allocate_exception(0x40uLL);
                PCString::PCString((PCString *)__x, "edges must not be parallel (2)");
                PCException::PCException(v126, (const PCString *)__x);
              }
              __x[0] = -1;
              v96.__i_ = &v146.__begin_[v138];
              std::vector<int>::insert(&v146, v96, __x);
              v36 += 2;
            }
            else
            {
LABEL_74:
              v89 = *(_QWORD *)v127[11] + 32 * v138;
              v90 = v136;
              *(double *)(v89 + 16) = v137;
              *(_OWORD *)v89 = v90;
              ++v36;
            }
          }
        }
        else
        {
          v49 = v141;
          v50 = (char *)__p + 48 * v138;
          if (v50 + 48 != v141)
          {
            do
            {
              v51 = v50 + 48;
              *(_OWORD *)v50 = *((_OWORD *)v50 + 3);
              *((_QWORD *)v50 + 2) = *((_QWORD *)v50 + 8);
              *(_OWORD *)(v50 + 24) = *(_OWORD *)(v50 + 72);
              *((_QWORD *)v50 + 5) = *((_QWORD *)v50 + 11);
              v52 = v50 + 96;
              v50 += 48;
            }
            while (v52 != v49);
            v50 = v51;
          }
          v141 = v50;
          v53 = (_QWORD *)v3[11];
          v54 = (_OWORD *)v53[1];
          v55 = (_OWORD *)(*v53 + 32 * v44);
          if (v55 + 2 != v54)
          {
            do
            {
              v56 = v55 + 2;
              *v55 = v55[2];
              *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)((char *)v55 + 44);
              v57 = v55 + 4;
              v55 += 2;
            }
            while (v57 != v54);
            v55 = v56;
          }
          v53[1] = v55;
          v58 = &v146.__begin_[v44];
          v59 = (char *)((char *)v146.__end_ - (char *)(v58 + 1));
          if (v146.__end_ != v58 + 1)
            memmove(&v146.__begin_[v44], v58 + 1, (char *)v146.__end_ - (char *)(v58 + 1));
          v146.__end_ = (std::vector<int>::pointer)&v59[(_QWORD)v58];
        }
        v138 = v36;
        v97 = *(_QWORD *)(v3[11] + 8) - *(_QWORD *)v3[11];
        v35 = v97 >> 5;
        v139 = v97 >> 5;
      }
      while (v36 < v139);
      v138 = 0;
      if ((int)v35 >= 1)
      {
        v98 = 0;
        v99 = v97 >> 5;
        do
        {
          if ((int)v99 <= 0)
            _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
          v100 = v98 + 2;
          if (v98 <= -3)
            v100 = v100 % (int)v99 + v99;
          v101 = (char *)__p + 48 * v98;
          v102 = v100 % (int)v99;
          v103 = (uint64_t *)v3[11];
          v104 = v102;
          v105 = *v103;
          v106 = *v103 + 32 * v104;
          v107 = vmulq_f64(vsubq_f64(*(float64x2_t *)(v106 + 8), *(float64x2_t *)(v101 + 8)), *((float64x2_t *)v101 + 2));
          if ((*(double *)v106 - *(double *)v101) * *((double *)v101 + 3) + v107.f64[0] + v107.f64[1] >= 0.0)
          {
            ++v98;
          }
          else
          {
            if (v139 <= 0)
              _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
            v108 = v138 + 1;
            if (v138 <= -2)
              v108 = v108 % v139 + v139;
            v109 = v108 % v139;
            v110 = (uint64_t *)v3[11];
            v111 = *v110;
            v112 = (_OWORD *)v110[1];
            v113 = (_OWORD *)(*v110 + 32 * v109);
            if (v113 + 2 == v112)
            {
              v116 = (uint64_t *)v3[11];
            }
            else
            {
              do
              {
                v114 = v113 + 2;
                *v113 = v113[2];
                *(_OWORD *)((char *)v113 + 12) = *(_OWORD *)((char *)v113 + 44);
                v115 = v113 + 4;
                v113 += 2;
              }
              while (v115 != v112);
              v116 = (uint64_t *)v3[11];
              v111 = *v116;
              v113 = v114;
            }
            v110[1] = (uint64_t)v113;
            if (((v116[1] - v111) & 0x1FFFFFFFE0) == 0)
              break;
            if (v139 <= 0)
              _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
            v117 = v138 + 1;
            if (v138 <= -2)
              v117 = v117 % v139 + v139;
            v118 = v141;
            v119 = (char *)__p + 48 * (v117 % v139);
            if (v119 + 48 != v141)
            {
              do
              {
                v120 = v119 + 48;
                *(_OWORD *)v119 = *((_OWORD *)v119 + 3);
                *((_QWORD *)v119 + 2) = *((_QWORD *)v119 + 8);
                *(_OWORD *)(v119 + 24) = *(_OWORD *)(v119 + 72);
                *((_QWORD *)v119 + 5) = *((_QWORD *)v119 + 11);
                v121 = v119 + 96;
                v119 += 48;
              }
              while (v121 != v118);
              v119 = v120;
            }
            v141 = v119;
            if (v139 <= 0)
              _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
            v122 = v138 + 1;
            if (v138 <= -2)
              v122 = v122 % v139 + v139;
            PCMod::remove(&v138, v122 % v139, 1);
            if (v139 <= 0)
              _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
            v123 = v138 + 1;
            if (v138 <= -2)
              v123 = v123 % v139 + v139;
            v124 = v138 + 1;
            if (v138 <= -2)
              v124 = v124 % v139 + v139;
            PCPlane<double>::intersect(v143.f64, (double *)v101, (double *)__p + 6 * (v123 % v139), (double *)(*(_QWORD *)v3[11] + 32 * (v124 % v139)));
            v103 = (uint64_t *)v3[11];
            v105 = *v103;
          }
          v99 = (unint64_t)(v103[1] - v105) >> 5;
          v138 = v98;
          v139 = v99;
        }
        while (v98 < (int)v99);
      }
    }
    if (__p)
    {
      v141 = (char *)__p;
      operator delete(__p);
    }
  }
  else
  {
LABEL_24:
    std::vector<LiPolygon::PosEdge>::resize(v7, 0);
  }
  if (v146.__begin_)
  {
    v146.__end_ = v146.__begin_;
    operator delete(v146.__begin_);
  }
}

void sub_1B2D3A6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39)
{
  uint64_t v39;
  void *v41;

  PCString::~PCString((PCString *)(v39 - 160));
  if (__p)
    operator delete(__p);
  v41 = *(void **)(v39 - 232);
  if (v41)
  {
    *(_QWORD *)(v39 - 224) = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

int *PCMod::remove(int *this, int a2, int a3)
{
  int v3;
  int v4;
  int v5;

  if (a3 < 0)
    _PCMod_error("howmany must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 134);
  v3 = this[1];
  if (v3 <= a3)
    _PCMod_error("can't remove all values", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 136);
  v4 = v3 - a3;
  this[1] = v3 - a3;
  v5 = *this;
  if (*this > a2)
  {
    if (v5 >= a3 + a2)
      v5 -= a3;
    else
      v5 = a2;
    *this = v5;
  }
  if (v4 <= 0)
    _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
  if (v5 < 0)
    v5 = v5 % v4 + v4;
  *this = v5 % v4;
  return this;
}

void LiPolygon::projectToPlane(uint64_t a1, float64x2_t *a2, double *a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  if (PCPlane<double>::setImplicit(a1 + 16, a2))
  {
    v15 = 0x3FF0000000000000;
    v12 = 0x3FF0000000000000;
    v9 = 0x3FF0000000000000;
    v6 = 0x3FF0000000000000;
    v7 = 0u;
    v8 = 0u;
    v10 = 0u;
    v11 = 0u;
    v13 = 0u;
    v14 = 0u;
    if (PCMatrix44Tmpl<double>::flatten((uint64_t)&v6, a2->f64, a3))
      transform<LiPolygon::PosFacet,LiPolygon::PosFacet,double>((double *)&v6, a1 + 88, (uint64_t **)(a1 + 88));
    else
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  }
  else
  {
    std::vector<LiPolygon::PosEdge>::resize(*(uint64_t **)(a1 + 88), 0);
  }
}

void transform<LiPolygon::PosFacet,LiPolygon::PosFacet,double>(double *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2;
  std::vector<LiPolygon::PosEdge>::resize(*a3, (int)(v6 >> 5));
  if ((int)((unint64_t)v6 >> 5) >= 1)
  {
    v7 = 0;
    v8 = v6 & 0x1FFFFFFFE0;
    do
    {
      PCMatrix44Tmpl<double>::transform<double>(a1, (double *)(**(_QWORD **)a2 + v7), (double *)(**a3 + v7));
      v7 += 32;
    }
    while (v8 != v7);
  }
}

void LiPolygon::getBoundary(uint64_t a1, uint64_t a2)
{
  bounds<LiPolygon::PosFacet,double>(a1 + 88, a2);
  *(_BYTE *)(a2 + 32) = 0;
}

BOOL LiPolygon::isEmpty(LiPolygon *this)
{
  return ((*(_QWORD *)(*((_QWORD *)this + 11) + 8) - **((_QWORD **)this + 11)) & 0x1FFFFFFFE0) == 0
      && *((_BYTE *)this + 96) == 0;
}

BOOL LiPolygon::isBounded(LiPolygon *this)
{
  return *((_BYTE *)this + 96) == 0;
}

BOOL LiPolygon::isFinite(LiPolygon *this)
{
  return ((*(_QWORD *)(*((_QWORD *)this + 11) + 8) - **((_QWORD **)this + 11)) & 0x1FFFFFFFE0) != 0
      && *((_BYTE *)this + 96) == 0;
}

uint64_t LiPolygon::isInfinite(LiPolygon *this)
{
  return *((unsigned __int8 *)this + 96);
}

void LiPolygon::setEmpty(uint64_t **this)
{
  std::vector<LiPolygon::PosEdge>::resize(this[11], 0);
  *((_BYTE *)this + 96) = 0;
}

void LiPolygon::setAll(uint64_t **this)
{
  std::vector<LiPolygon::PosEdge>::resize(this[11], 0);
  *((_BYTE *)this + 96) = 1;
}

BOOL LiPolygon::isClockwise(double ***this)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  int8x16_t v8;
  float64x2_t v9;
  char *v11;
  char *v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  elim<LiPolygon::PosFacet,LiChannelT<PCVector2<double>>>(this + 11, &v11, 2);
  v1 = (unint64_t)(v12 - v11) >> 4;
  if ((int)v1 >= 1)
  {
    v2 = 0;
    v3 = ((unint64_t)(v12 - v11) >> 4);
    v4 = 0.0;
    do
    {
      if (v3 - 1 == v2)
        v5 = 0;
      else
        v5 = v2 + 1;
      v6 = *(float64x2_t *)&v11[16 * v2];
      v7 = vsubq_f64(*(float64x2_t *)&v11[16 * v5], v6);
      v8 = (int8x16_t)vsubq_f64(*(float64x2_t *)&v11[16 * (((int)v1 - 1 + (int)v2) % (int)v1)], v6);
      v9 = vmulq_f64(v7, (float64x2_t)vextq_s8(v8, v8, 8uLL));
      v4 = v4 + vsubq_f64(v9, (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1)).f64[0];
      ++v2;
    }
    while (v3 != v2);
    goto LABEL_9;
  }
  v4 = 0.0;
  if (v11)
  {
LABEL_9:
    v12 = v11;
    operator delete(v11);
  }
  return v4 <= 0.0;
}

void sub_1B2D3AB88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL LiPolygon::contains(_QWORD **a1, double *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  int v11;
  char v12;
  unsigned __int8 v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  double *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v28;
  BOOL v29;
  BOOL v30;
  double v31;

  v2 = *a1[11];
  v3 = a1[11][1] - v2;
  v4 = v3 >> 5;
  v5 = (v3 >> 5) - 1;
  if ((int)(v3 >> 5) < 1)
  {
    v11 = 0;
    return v11 == 1;
  }
  else
  {
    v8 = (v3 >> 5);
    v9 = (double *)(v2 + 8);
    v10 = v8;
    while (*a2 != *(v9 - 1) || a2[1] != *v9)
    {
      v9 += 4;
      if (!--v10)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        while (1)
        {
          v14 = *a1[11];
          v15 = (double *)(v14 + 32 * v10);
          v16 = v10 + 1;
          v17 = (v10 + 1);
          if (v10 + 1 == v8)
            v17 = 0;
          v18 = (double *)(v14 + 32 * v17);
          v19 = v15[1];
          v20 = v18[1];
          v21 = a2[1];
          if (v19 == v20)
          {
            if (v19 == v21)
            {
              v22 = *a2;
              v23 = *v18;
              if (*a2 > *v15 && v22 <= v23)
                return 1;
              if (v22 < *v15 && v22 >= v23)
                return 1;
            }
          }
          else if ((v21 >= v19 || v21 >= v20) && (v21 <= v19 || v21 <= v20))
          {
            if (v21 != v20
              || ((v28 = *(double *)(v14 + 32 * ((v5 + (int)v10) % (int)v4) + 8), v19 < v20)
                ? (v29 = v28 < v19)
                : (v29 = 0),
                  !v29 && (v19 > v20 ? (v30 = v28 <= v19) : (v30 = 1), v30)))
            {
              v31 = *v15 + (v21 - v19) * (*v18 - *v15) / (v20 - v19);
              if (v31 >= *a2)
              {
                if (v31 == *a2)
                {
                  if ((v12 & 1) == 0)
                  {
                    v13 = ((uint64_t (*)(_QWORD **))(*a1)[7])(a1);
                    v20 = v18[1];
                    v19 = v15[1];
                  }
                  v11 += (v13 ^ (v20 < v19)) & 1;
                  v12 = 1;
                }
              }
              else
              {
                ++v11;
              }
            }
          }
          v10 = v16;
          if (v16 == v8)
            return v11 == 1;
        }
      }
    }
    return 1;
  }
}

BOOL LiPolygon::contains(_QWORD **a1, float64x2_t *a2)
{
  _BOOL8 result;
  double v5;
  float64_t v6;
  float64x2_t v7;
  double v8[2];
  double v9[2];
  float64x2_t v10;

  v10 = *a2;
  result = LiPolygon::contains(a1, v10.f64);
  if (result)
  {
    v5 = a2->f64[1];
    v9[0] = a2->f64[0] + a2[1].f64[0];
    v9[1] = v5;
    result = LiPolygon::contains(a1, v9);
    if (result)
    {
      v6 = a2->f64[1] + a2[1].f64[1];
      v8[0] = a2->f64[0];
      v8[1] = v6;
      result = LiPolygon::contains(a1, v8);
      if (result)
      {
        v7 = vaddq_f64(*a2, a2[1]);
        return LiPolygon::contains(a1, v7.f64);
      }
    }
  }
  return result;
}

BOOL transform(double *a1, uint64_t **a2)
{
  uint64_t **v3;
  _BOOL4 v4;
  double v5;
  double v6;
  double v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  void *__p;
  void *v14;
  uint64_t v15;

  __p = 0;
  v14 = 0;
  v15 = 0;
  v3 = a2 + 11;
  transform<LiPolygon::PosFacet,LiChannelT<PCVector4<double>>,double>(a1, (uint64_t)(a2 + 11), (uint64_t *)&__p);
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = minmax<double>(&__p, (double *)&v11, (double *)&v9);
  v5 = *((double *)&v12 + 1);
  v6 = *((double *)&v10 + 1);
  v7 = perspectiveDivide<LiChannelT<PCVector4<double>>,LiPolygon::PosFacet,double>(&__p, v3);
  ((void (*)(uint64_t **, double))(*a2)[2])(a2, v7);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  return v5 * v6 > 0.0 && v4;
}

void sub_1B2D3AEC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void transform<LiPolygon::PosFacet,LiChannelT<PCVector4<double>>,double>(double *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2;
  std::vector<PCVector4<double>>::resize(a3, (int)(v6 >> 5));
  if ((int)((unint64_t)v6 >> 5) >= 1)
  {
    v7 = 0;
    v8 = v6 & 0x1FFFFFFFE0;
    do
    {
      PCMatrix44Tmpl<double>::transform<double>(a1, (double *)(**(_QWORD **)a2 + v7), (double *)(*a3 + v7));
      v7 += 32;
    }
    while (v8 != v7);
  }
}

BOOL minmax<double>(_QWORD *a1, double *a2, double *a3)
{
  _OWORD *v3;
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v3 = (_OWORD *)*a1;
  v4 = a1[1] - *a1;
  v5 = v4 >> 5;
  if ((int)(v4 >> 5) >= 1)
  {
    v6 = v3[1];
    *(_OWORD *)a3 = *v3;
    *((_OWORD *)a3 + 1) = v6;
    v7 = v3[1];
    *(_OWORD *)a2 = *v3;
    *((_OWORD *)a2 + 1) = v7;
    if ((_DWORD)v5 != 1)
    {
      v8 = (v4 >> 5);
      v9 = (double *)(*a1 + 56);
      v10 = v8 - 1;
      do
      {
        v11 = *(v9 - 3);
        v12 = a2[1];
        if (v11 >= *a2)
          v11 = *a2;
        *a2 = v11;
        v13 = *(v9 - 2);
        if (v13 >= v12)
          v13 = v12;
        a2[1] = v13;
        v14 = *(v9 - 1);
        v15 = a2[3];
        if (v14 >= a2[2])
          v14 = a2[2];
        a2[2] = v14;
        v16 = *v9;
        if (*v9 >= v15)
          v16 = v15;
        a2[3] = v16;
        v17 = *(v9 - 3);
        v18 = a3[1];
        if (*a3 >= v17)
          v17 = *a3;
        *a3 = v17;
        v19 = *(v9 - 2);
        if (v18 >= v19)
          v19 = v18;
        a3[1] = v19;
        v20 = *(v9 - 1);
        v21 = a3[3];
        if (a3[2] >= v20)
          v20 = a3[2];
        a3[2] = v20;
        v22 = *v9;
        v9 += 4;
        v23 = v22;
        if (v21 >= v22)
          v23 = v21;
        a3[3] = v23;
        --v10;
      }
      while (v10);
    }
  }
  return (int)v5 > 0;
}

double perspectiveDivide<LiChannelT<PCVector4<double>>,LiPolygon::PosFacet,double>(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  double result;
  uint64_t v6;
  double *v7;
  uint64_t *v8;
  double v9;

  v4 = a1[1] - *a1;
  std::vector<LiPolygon::PosEdge>::resize(*a2, (int)(v4 >> 5));
  if ((int)((unint64_t)v4 >> 5) >= 1)
  {
    v6 = ((unint64_t)v4 >> 5);
    v7 = (double *)(**a2 + 16);
    v8 = (uint64_t *)(*a1 + 24);
    do
    {
      v9 = *(double *)v8;
      *((float64x2_t *)v7 - 1) = vdivq_f64(*(float64x2_t *)(v8 - 3), (float64x2_t)vdupq_lane_s64(*v8, 0));
      result = *((double *)v8 - 1) / v9;
      *v7 = result;
      v7 += 4;
      v8 += 4;
      --v6;
    }
    while (v6);
  }
  return result;
}

void LiImagePolygon::LiImagePolygon(LiImagePolygon *this)
{
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = (char *)this + 64;
  *((_DWORD *)this + 2) = -1;
  *((_BYTE *)this + 96) = 0;
  *(_QWORD *)this = &off_1E6570FA8;
  *((_QWORD *)this + 13) = (char *)this + 64;
}

void LiImagePolygon::LiImagePolygon(LiImagePolygon *this, const LiImagePolygon *a2)
{
  char *v4;
  __int128 v5;
  __int128 v6;

  *((_OWORD *)this + 1) = 0u;
  v4 = (char *)this + 16;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 11) = (char *)this + 64;
  *((_DWORD *)this + 2) = -1;
  *(_QWORD *)this = &off_1E6570FA8;
  *((_QWORD *)this + 13) = (char *)this + 64;
  *((_BYTE *)this + 96) = 0;
  LiPolygon::ArrayFacet::copyFrom((__int128 ***)this + 11, (__int128 ***)a2 + 11);
  LiPolygon::ArrayFacet::copyFrom((__int128 ***)this + 13, (__int128 ***)a2 + 13);
  v5 = *((_OWORD *)a2 + 1);
  *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 4);
  *(_OWORD *)v4 = v5;
  v6 = *(_OWORD *)((char *)a2 + 40);
  *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
  *(_OWORD *)((char *)this + 40) = v6;
}

void sub_1B2D3B1AC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void *v3;

  *v1 = &off_1E6570F58;
  v3 = (void *)v1[8];
  if (v3)
  {
    v1[9] = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void LiImagePolygon::~LiImagePolygon(LiImagePolygon *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E6570F58;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E6570F58;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_1E6570F58;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1B5E29170);
}

uint64_t LiImagePolygon::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  LiPolygon::ArrayFacet::copyFrom((__int128 ***)(a1 + 88), (__int128 ***)(a2 + 88));
  LiPolygon::ArrayFacet::copyFrom((__int128 ***)(a1 + 104), (__int128 ***)(a2 + 104));
  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  return a1;
}

void LiImagePolygon::dilateType(uint64_t a1, int a2, double a3)
{
  uint64_t v6;
  double *v7;
  uint64_t v8;
  int *v9;
  int v10;
  double v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  void *__p;
  void *v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - **(_QWORD **)(a1 + 88);
  __p = 0;
  v18 = 0;
  v19 = 0;
  std::vector<double>::resize((uint64_t)&__p, (int)(v6 >> 5));
  if ((int)((unint64_t)v6 >> 5) >= 1)
  {
    v7 = (double *)__p;
    v8 = ((unint64_t)v6 >> 5);
    v9 = (int *)(**(_QWORD **)(a1 + 104) + 24);
    do
    {
      v10 = *v9;
      v9 += 8;
      if (v10 == a2)
        v11 = a3;
      else
        v11 = 0.0;
      *v7++ = v11;
      --v8;
    }
    while (v8);
  }
  LiPolygon::dilate((_QWORD *)a1, &__p);
  v12 = *(uint64_t **)(a1 + 104);
  v13 = *v12;
  v14 = v12[1] - *v12;
  if (v14)
  {
    v15 = v14 >> 5;
    if (v15 <= 1)
      v15 = 1;
    v16 = (_DWORD *)(v13 + 24);
    do
    {
      *v16 = 1;
      v16 += 8;
      --v15;
    }
    while (v15);
  }
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
}

void sub_1B2D3B3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x2_t LiImagePolygon::getDOD@<D0>(LiImagePolygon *this@<X0>, double a2@<D0>, int32x2_t *a3@<X8>)
{
  int32x2_t result;
  int32x2_t v11;
  _QWORD v12[8];
  void *__p;
  void *v14;
  uint64_t v15;
  float64x2_t v16;
  float64x2_t v17;

  v16 = 0uLL;
  __asm { FMOV            V0.2D, #-1.0 }
  v17 = _Q0;
  if (a2 <= 0.0)
  {
    bounds<LiPolygon::PosFacet,double>((uint64_t)this + 88, (uint64_t)&v16);
  }
  else
  {
    LiImagePolygon::LiImagePolygon((LiImagePolygon *)v12, this);
    LiImagePolygon::dilateType((uint64_t)v12, 0, a2);
    bounds<LiPolygon::PosFacet,double>((uint64_t)&v15, (uint64_t)&v16);
    v12[0] = &off_1E6570F58;
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  result = vmovn_s64(vcvtq_s64_f64(vrndmq_f64(vaddq_f64(v16, (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL)))));
  v11 = vsub_s32(vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vaddq_f64(v16, v17)))), result);
  *a3 = result;
  a3[1] = v11;
  return result;
}

void sub_1B2D3B4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LiImagePolygon::set(uint64_t a1, double *a2, int a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;

  LiPolygon::set(a1, a2);
  std::vector<LiPolygon::PosEdge>::resize(*(uint64_t **)(a1 + 104), (int)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - **(_QWORD **)(a1 + 88)) >> 5));
  v5 = *(uint64_t **)(a1 + 104);
  v6 = *v5;
  v7 = v5[1] - *v5;
  if (v7)
  {
    v8 = v7 >> 5;
    if (v8 <= 1)
      v8 = 1;
    v9 = (_DWORD *)(v6 + 24);
    do
    {
      *v9 = a3;
      v9 += 8;
      --v8;
    }
    while (v8);
  }
}

void LiImagePolygon::set(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  LiPolygon::ArrayFacet::copyFrom((__int128 ***)(a1 + 88), (__int128 ***)(a2 + 88));
  v6 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  v7 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  std::vector<LiPolygon::PosEdge>::resize(*(uint64_t **)(a1 + 104), (int)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - **(_QWORD **)(a1 + 88)) >> 5));
  v8 = *(uint64_t **)(a1 + 104);
  v9 = *v8;
  v10 = v8[1] - *v8;
  if (v10)
  {
    v11 = v10 >> 5;
    if (v11 <= 1)
      v11 = 1;
    v12 = (_DWORD *)(v9 + 24);
    do
    {
      *v12 = a3;
      v12 += 8;
      --v11;
    }
    while (v11);
  }
}

uint64_t **LiImagePolygon::operator&=(uint64_t **a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v22[6];

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) - **(_QWORD **)(a2 + 88);
  if ((int)(v3 >> 5) >= 1)
  {
    v5 = 0;
    v6 = v3 & 0x1FFFFFFFE0;
    v7 = (v3 & 0x1FFFFFFFE0) - 32;
    v8 = 1;
    do
    {
      v9 = **(_QWORD **)(a2 + 88);
      v10 = (double *)(v9 + v5);
      if (v7 == v5)
        v11 = 0;
      else
        v11 = v8;
      v12 = (double *)(v9 + 32 * v11);
      v13 = v10[1];
      v14 = v12[1] - v13;
      v15 = v10[2];
      v16 = v12[2] - v15;
      v18 = *(double *)(a2 + 48);
      v17 = *(double *)(a2 + 56);
      v19 = *(double *)(a2 + 40);
      v20 = *v12 - *v10;
      v22[0] = *v10;
      v22[1] = v13;
      v22[2] = v15;
      v22[3] = v14 * v17 - v16 * v18;
      v22[4] = v16 * v19 - v20 * v17;
      v22[5] = v20 * v18 - v14 * v19;
      LiImagePolygon::clip(a1, v22, *(_DWORD *)(**(_QWORD **)(a2 + 104) + v5 + 24));
      v5 += 32;
      ++v8;
    }
    while (v6 != v5);
  }
  return a1;
}

uint64_t LiImagePolygon::clip(uint64_t **a1, double *a2, int a3)
{
  double v3;
  double v4;
  double v5;
  _QWORD v7[4];

  v3 = a2[4];
  v4 = a2[5];
  v5 = -(a2[3] * *a2 + v3 * a2[1] + v4 * a2[2]);
  *(double *)v7 = a2[3];
  *(double *)&v7[1] = v3;
  *(double *)&v7[2] = v4;
  *(double *)&v7[3] = v5;
  return LiImagePolygon::do_clip(a1, a2, (uint64_t)v7, a3);
}

{
  double v6;
  int v7;
  double v8;
  int v9;
  double v10;
  int v11;
  double v12;
  __int128 v14;
  uint64_t v15;
  double v16;

  v6 = -*a2;
  v15 = 0;
  v14 = 0x3FF0000000000000uLL;
  v16 = v6;
  v7 = LiImagePolygon::clip(a1, (float64x2_t *)&v14, a3);
  v8 = *a2 + a2[2];
  v15 = 0;
  v14 = 0xBFF0000000000000;
  v16 = v8;
  v9 = v7 | LiImagePolygon::clip(a1, (float64x2_t *)&v14, a3);
  v10 = -a2[1];
  v14 = xmmword_1B304EEE0;
  v15 = 0;
  v16 = v10;
  v11 = LiImagePolygon::clip(a1, (float64x2_t *)&v14, a3);
  v12 = a2[1] + a2[3];
  v14 = xmmword_1B305A270;
  v15 = 0;
  v16 = v12;
  return v9 | v11 | LiImagePolygon::clip(a1, (float64x2_t *)&v14, a3);
}

uint64_t LiImagePolygon::clip(uint64_t **a1, uint64_t a2, double *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double *v28;
  double v29;
  BOOL v30;
  double v31;
  int v32;
  double v33;
  float64x2_t v35;
  double v36;
  double v37;
  float64x2_t v38;
  double v39;
  float64x2_t v40;
  double v41;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 88) + 8) - **(_QWORD **)(a2 + 88);
  v4 = v3 >> 5;
  if ((int)(v3 >> 5) < 1)
  {
    LOBYTE(v9) = 0;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = (v3 >> 5);
    v11 = 16;
    do
    {
      v12 = **(_QWORD **)(a2 + 88);
      v13 = (double *)(v12 + v11);
      if (v10 - 1 == v8)
        v14 = 0;
      else
        v14 = v8 + 1;
      v15 = (double *)(v12 + 32 * v14);
      v16 = *(v13 - 2);
      v17 = *(v13 - 1);
      v18 = v15[1] - v17;
      v19 = *v13;
      v20 = v15[2] - *v13;
      v22 = *(double *)(a2 + 48);
      v21 = *(double *)(a2 + 56);
      v23 = *(double *)(a2 + 40);
      v24 = v18 * v21 - v20 * v22;
      v25 = *v15 - v16;
      v26 = v20 * v23 - v25 * v21;
      v27 = v25 * v22 - v18 * v23;
      v28 = (double *)(v12 + 32 * (((int)v8 + 2) % (int)v4));
      v29 = v24 * *v28 + v26 * v28[1] + v27 * v28[2];
      v30 = v29 < 0.0;
      if (v29 >= 0.0)
        v31 = v24;
      else
        v31 = -v24;
      if (v30)
      {
        v26 = -v26;
        v27 = -v27;
      }
      v38.f64[0] = *(v13 - 2);
      v38.f64[1] = v17;
      v39 = v19;
      v40.f64[0] = v31;
      v40.f64[1] = v26;
      v41 = v27;
      v32 = *(_DWORD *)(**(_QWORD **)(a2 + 104) + v11 + 8);
      v35.f64[0] = v31;
      v35.f64[1] = v26;
      v36 = v27;
      v37 = -(v16 * v31 + v26 * v17 + v27 * v19);
      PCMatrix44Tmpl<double>::transform_row<double>(a3, v35.f64, v35.f64);
      v33 = vaddvq_f64(vmulq_f64(v35, v35)) + v36 * v36;
      if (v33 <= -1.0e-24 || v33 >= 1.0e-24)
      {
        v40 = v35;
        v41 = v36;
        v38 = vdivq_f64(vmulq_n_f64(v35, -v37), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v33, 0));
        v39 = -(v37 * v36) / v33;
        v9 |= LiImagePolygon::do_clip(a1, v38.f64, (uint64_t)&v35, v32);
      }
      ++v8;
      v11 += 32;
    }
    while (v10 != v8);
  }
  return v9 & 1;
}

uint64_t LiImagePolygon::do_clip(uint64_t **a1, double *a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  uint64_t result;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  float64x2_t *i;
  float64x2_t v22;
  double v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  float64x2_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  float64x2_t v32;
  double *v33;
  double v34;
  double v35;
  double v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  int v47;
  int v48;
  uint64_t v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  double *v54;
  double v55;
  double v56;
  double v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  int v62;
  int v63;
  int j;
  int v65;
  uint64_t *v66;
  _OWORD *v67;
  _OWORD *v68;
  _OWORD *v69;
  _OWORD *v70;
  double v71[2];
  double v72;
  double v73;
  double v74;
  double v75;
  double v76[6];
  __int128 v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  _OWORD v82[2];

  v4 = a1[11];
  if ((int)((unint64_t)(v4[1] - *v4) >> 5) > 2)
  {
    v10 = ((uint64_t (*)(uint64_t **))(*a1)[2])(a1);
    v77 = *(_OWORD *)v10;
    v11 = *(double *)(v10 + 24);
    v78 = *(_QWORD *)(v10 + 16);
    v79 = v11;
    v12 = *(double *)(v10 + 32);
    v13 = *(double *)(v10 + 40);
    v80 = v12;
    v81 = v13;
    v14 = a1[11];
    v15 = *v14;
    v16 = v14[1] - *v14;
    v17 = v16 >> 5;
    v18 = (v16 >> 5) - 1;
    if ((int)(v16 >> 5) < 1)
    {
      LODWORD(v19) = 0;
    }
    else
    {
      v19 = 0;
      v20 = (v16 >> 5);
      for (i = (float64x2_t *)(v15 + 8); ; i += 2)
      {
        v22 = vmulq_f64(*i, *(float64x2_t *)(a3 + 8));
        v23 = *(double *)(a3 + 24) + i[-1].f64[1] * *(double *)a3 + v22.f64[0] + v22.f64[1];
        if (v23 < 0.0 && (v23 <= -0.0000001 || v23 >= 0.0000001))
          break;
        if (v20 == ++v19)
          return 0;
      }
    }
    if ((_DWORD)v19 == (_DWORD)v17)
    {
      return 0;
    }
    else
    {
      if ((int)v17 <= 0)
        _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
      v24 = 0;
      v25 = (int)v19 % (int)v17;
      v26 = (int)v19 % (int)v17;
      while (1)
      {
        v27 = *a1[11] + 32 * v26;
        v28 = vmulq_f64(*(float64x2_t *)(v27 + 8), *(float64x2_t *)(a3 + 8));
        if (*(double *)(a3 + 24) + *(double *)v27 * *(double *)a3 + v28.f64[0] + v28.f64[1] >= 0.0)
          break;
        v26 = (v18 + v26) % (int)v17;
        if (++v24 >= (int)v17)
        {
          a1[11][1] = *a1[11];
          return 1;
        }
      }
      v29 = 0;
      v30 = *a1[11];
      do
      {
        v31 = v30 + 32 * v25;
        v32 = vmulq_f64(*(float64x2_t *)(v31 + 8), *(float64x2_t *)(a3 + 8));
        if (*(double *)(a3 + 24) + *(double *)v31 * *(double *)a3 + v32.f64[0] + v32.f64[1] > 0.0)
          break;
        v25 = (v25 + 1) % (int)v17;
        ++v29;
      }
      while (v29 < (int)v17);
      v72 = 0.0;
      v33 = (double *)(v30 + 32 * v26);
      v34 = *v33;
      v35 = v33[1];
      v36 = v33[2];
      v37 = v26 + 1;
      v38 = v26 + 1;
      v39 = (v26 + 1) / (int)v17;
      if (v26 <= -2)
        v38 = v37 - v39 * v17 + v17;
      v40 = *a1[11] + 32 * (v38 % (int)v17);
      v41 = *(double *)v40;
      v42 = *(double *)(v40 + 8);
      v43 = *(double *)(v40 + 16);
      v44 = *(double *)v40 - v34;
      v45 = v42 - v35;
      v46 = v43 - v36;
      v76[4] = v46 * v11 - v44 * v13;
      v76[5] = v44 * v12 - v45 * v11;
      v76[0] = v41;
      v76[1] = v42;
      v76[2] = v43;
      v76[3] = v45 * v13 - v46 * v12;
      v47 = v25 - 1;
      v48 = v25 - 1;
      if (v25 <= 0)
        v48 = v47 % (int)v17 + v17;
      v49 = *a1[11];
      v50 = (double *)(v49 + 32 * (v48 % (int)v17));
      v51 = *v50;
      v52 = v50[1];
      v53 = v50[2];
      v54 = (double *)(v49 + 32 * v25);
      v55 = *v54 - v51;
      v56 = v54[1] - v52;
      v57 = v54[2] - v53;
      v74 = v57 * v11 - v55 * v13;
      v75 = v55 * v12 - v56 * v11;
      v71[0] = v51;
      v71[1] = v52;
      v72 = v53;
      v73 = v56 * v13 - v57 * v12;
      v58 = v37 - v39 * v17;
      PCPlane<double>::intersect((double *)&v77, a2, v76, (double *)(v49 + 32 * v58));
      *(_DWORD *)(*a1[13] + 32 * v58 + 24) = a4;
      v59 = a1[11];
      v60 = *v59 + 32 * v25;
      memset(v82, 0, sizeof(v82));
      std::vector<LiPolygon::PosEdge>::insert(v59, v60, (uint64_t)v82);
      PCPlane<double>::intersect((double *)&v77, a2, v71, (double *)(*a1[11] + 32 * v25));
      v61 = (unint64_t)(a1[11][1] - *a1[11]) >> 5;
      if (v58 < v25)
        v62 = v58;
      else
        v62 = v58 + 1;
      if ((int)v61 <= 0)
        _PCMod_error("base must be positive", "/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ProCore/PCMod.h", 158);
      v63 = v25 - 1;
      if (v25 <= 0)
        v63 = v47 % (int)v61 + v61;
      *(_DWORD *)(*a1[13] + 32 * v25 + 24) = *(_DWORD *)(*a1[13] + 32 * (v63 % (int)v61) + 24);
      for (j = v47 + v61; ; j = v65 + v61 - 1)
      {
        v65 = j % (int)v61;
        if (v65 == v62)
          break;
        v66 = a1[11];
        v67 = (_OWORD *)v66[1];
        v68 = (_OWORD *)(*v66 + 32 * v65);
        if (v68 + 2 != v67)
        {
          do
          {
            v69 = v68 + 2;
            *v68 = v68[2];
            *(_OWORD *)((char *)v68 + 12) = *(_OWORD *)((char *)v68 + 44);
            v70 = v68 + 4;
            v68 += 2;
          }
          while (v70 != v67);
          v68 = v69;
        }
        v66[1] = (uint64_t)v68;
        LODWORD(v61) = v61 - 1;
        if (v65 < v62)
          v62 = (v62 + (int)v61 - 1) % (int)v61;
      }
      return 1;
    }
  }
  else
  {
    result = 0;
    v4[1] = *v4;
  }
  return result;
}

uint64_t LiImagePolygon::clip(uint64_t **a1, float64x2_t *a2, int a3)
{
  uint64_t result;
  _OWORD v7[3];

  result = PCPlaneType(a2->f64);
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 1)
    {
      std::vector<LiPolygon::PosEdge>::resize(a1[11], 0);
      return 1;
    }
    else
    {
      memset(v7, 0, sizeof(v7));
      result = PCPlane<double>::setImplicit((uint64_t)v7, a2);
      if ((_DWORD)result)
        return LiImagePolygon::do_clip(a1, (double *)v7, (uint64_t)a2, a3);
    }
  }
  return result;
}

uint64_t LiImagePolygon::clip(uint64_t **this, const LiClipSet *a2)
{
  uint64_t v2;
  uint64_t **v4;
  uint64_t v5;
  char v6;

  v2 = *((unsigned int *)a2 + 3);
  if ((int)v2 < 1)
  {
    v6 = 0;
  }
  else
  {
    v4 = this;
    v5 = 0;
    v6 = 0;
    do
    {
      if (v5 >= *((int *)a2 + 3))
        PCArray_base::badIndex((PCArray_base *)this);
      if (v5 >= *((int *)a2 + 9))
        PCArray_base::badIndex((PCArray_base *)this);
      this = (uint64_t **)LiImagePolygon::clip(v4, (float64x2_t *)(*((_QWORD *)a2 + 2) + 32 * v5), *(_DWORD *)(*((_QWORD *)a2 + 5) + 4 * v5));
      v6 |= this;
      ++v5;
    }
    while (v5 != v2);
  }
  return v6 & 1;
}

_OWORD *std::vector<LiPolygon::PosEdge>::__assign_with_size[abi:ne180100]<LiPolygon::PosEdge*,LiPolygon::PosEdge*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _OWORD *result;
  uint64_t v10;
  unint64_t v11;
  _OWORD **v12;
  _OWORD *v13;
  __int128 *v14;
  _OWORD *v15;
  _OWORD *v16;
  unint64_t v17;
  __int128 *v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  __int128 *v22;
  int64_t v23;
  _OWORD *v24;
  __int128 v25;

  v6 = a2;
  v8 = a1[2];
  result = (_OWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 5)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 59)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<LiPolygon::PosEdge>::__vallocate[abi:ne180100](a1, v11);
    v13 = (_OWORD *)a1[1];
    v12 = (_OWORD **)(a1 + 1);
    result = v13;
    v14 = v13;
    if (v6 != a3)
    {
      v14 = result;
      do
      {
        *v14 = *v6;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v6 + 2);
        *((_DWORD *)v14 + 6) = *((_DWORD *)v6 + 6);
        v14 += 2;
        v6 += 2;
      }
      while (v6 != a3);
    }
LABEL_26:
    v23 = (char *)v14 - (char *)result;
    goto LABEL_27;
  }
  v16 = (_OWORD *)a1[1];
  v12 = (_OWORD **)(a1 + 1);
  v15 = v16;
  v17 = ((char *)v16 - (char *)result) >> 5;
  if (v17 >= a4)
  {
    v14 = result;
    if (a2 != a3)
    {
      v24 = result;
      do
      {
        v25 = *v6;
        *(_OWORD *)((char *)v24 + 12) = *(__int128 *)((char *)v6 + 12);
        *v24 = v25;
        v24 += 2;
        v6 += 2;
        v14 += 2;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v18 = &a2[2 * v17];
  if (v15 != result)
  {
    v19 = 32 * v17;
    do
    {
      v20 = *v6;
      *(_OWORD *)((char *)result + 12) = *(__int128 *)((char *)v6 + 12);
      *result = v20;
      result += 2;
      v6 += 2;
      v19 -= 32;
    }
    while (v19);
    result = *v12;
  }
  v21 = (char *)result;
  if (v18 != a3)
  {
    v21 = (char *)result;
    v22 = result;
    do
    {
      *v22 = *v18;
      *((_QWORD *)v22 + 2) = *((_QWORD *)v18 + 2);
      *((_DWORD *)v22 + 6) = *((_DWORD *)v18 + 6);
      v21 += 32;
      v18 += 2;
      v22 += 2;
    }
    while (v18 != a3);
  }
  v23 = v21 - (char *)result;
LABEL_27:
  *v12 = (_OWORD *)((char *)result + v23);
  return result;
}

char *std::vector<LiPolygon::PosEdge>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

_OWORD *std::vector<LiPolygon::PosEdge>::insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  void *__p;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v4 = (_OWORD *)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = (a2 - *a1) >> 5;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v13 = ((uint64_t)(v6 - v7) >> 5) + 1;
    if (v13 >> 59)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v14 = v10 - v7;
    v15 = v14 >> 4;
    if (v14 >> 4 <= v13)
      v15 = v13;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v16 = 0x7FFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v23 = v9;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v9, v16);
    else
      v17 = 0;
    __p = v17;
    v20 = &v17[32 * v8];
    v21 = v20;
    v22 = &v17[32 * v16];
    std::__split_buffer<LiPolygon::PosEdge>::push_back(&__p, a3);
    v4 = (_OWORD *)std::vector<LiPolygon::PosEdge>::__swap_out_circular_buffer(a1, &__p, (uint64_t)v4);
    if (v21 != v20)
      v21 += (v20 - v21 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
  }
  else if (a2 == v6)
  {
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a3 + 16);
    *(_DWORD *)(v7 + 32 * v8 + 24) = *(_DWORD *)(a3 + 24);
    a1[1] = a2 + 32;
  }
  else
  {
    std::vector<LiPolygon::PosEdge>::__move_range((uint64_t)a1, a2, v6, a2 + 32);
    v12 = *(_OWORD *)a3;
    *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a3 + 12);
    *v4 = v12;
  }
  return v4;
}

void sub_1B2D3C354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::vector<LiPolygon::PosEdge>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - a4;
  v6 = a2 + v4 - a4;
  v7 = v4;
  while (v6 < a3)
  {
    *(_OWORD *)v7 = *(_OWORD *)v6;
    result.n128_u64[0] = *(_QWORD *)(v6 + 16);
    *(_QWORD *)(v7 + 16) = result.n128_u64[0];
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(v6 + 24);
    v7 += 32;
    v6 += 32;
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v9 = v4 - 32;
    v10 = 32 * (v5 >> 5);
    v11 = a2 - 32;
    do
    {
      result = *(__n128 *)(v11 + v10);
      *(_OWORD *)(v9 + 12) = *(_OWORD *)(v11 + v10 + 12);
      *(__n128 *)v9 = result;
      v9 -= 32;
      v10 -= 32;
    }
    while (v10);
  }
  return result;
}

double std::__split_buffer<LiPolygon::PosEdge>::push_back(void **a1, uint64_t a2)
{
  char *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  char *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;
  double result;

  v4 = (char *)a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    v6 = (char *)v5 - (_BYTE *)*a1;
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v13 = 1;
      else
        v13 = (v4 - (_BYTE *)*a1) >> 4;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>((uint64_t)a1[4], v13);
      v16 = &v14[32 * (v13 >> 2)];
      v17 = (char *)a1[1];
      v4 = v16;
      v18 = (char *)((_BYTE *)a1[2] - v17);
      if (v18)
      {
        v4 = &v18[(_QWORD)v16];
        v19 = &v14[32 * (v13 >> 2)];
        do
        {
          *(_OWORD *)v19 = *(_OWORD *)v17;
          *((_QWORD *)v19 + 2) = *((_QWORD *)v17 + 2);
          *((_DWORD *)v19 + 6) = *((_DWORD *)v17 + 6);
          v19 += 32;
          v17 += 32;
        }
        while (v19 != v4);
      }
      v20 = *a1;
      *a1 = v14;
      a1[1] = v16;
      a1[2] = v4;
      a1[3] = &v14[32 * v15];
      if (v20)
      {
        operator delete(v20);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 5;
      v8 = v6 >> 5 < -1;
      v9 = (v6 >> 5) + 2;
      if (!v8)
        v9 = v7 + 1;
      if (v5 == (_OWORD *)v4)
      {
        v12 = (char *)&v5[-2 * (v9 >> 1)];
      }
      else
      {
        do
        {
          v10 = &v5[-2 * (v9 >> 1)];
          v11 = *v5;
          *(_OWORD *)((char *)v10 + 12) = *(_OWORD *)((char *)v5 + 12);
          *v10 = v11;
          v5 += 2;
        }
        while (v5 != (_OWORD *)v4);
        v4 = (char *)a1[1];
        v12 = (char *)&v5[-2 * (v9 >> 1)];
      }
      a1[1] = &v4[-32 * (v9 >> 1)];
      v4 = v12;
    }
  }
  *(_OWORD *)v4 = *(_OWORD *)a2;
  result = *(double *)(a2 + 16);
  *((double *)v4 + 2) = result;
  *((_DWORD *)v4 + 6) = *(_DWORD *)(a2 + 24);
  a1[2] = v4 + 32;
  return result;
}

uint64_t std::vector<LiPolygon::PosEdge>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = *a1;
  v6 = result;
  if (*a1 != a3)
  {
    v7 = 0;
    do
    {
      v8 = result + v7;
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 32;
    }
    while (a3 + v7 != v5);
    v6 = result + v7;
  }
  a2[1] = v6;
  v9 = a1[1];
  for (i = a2[2]; a3 != v9; a3 += 32)
  {
    *(_OWORD *)i = *(_OWORD *)a3;
    *(_QWORD *)(i + 16) = *(_QWORD *)(a3 + 16);
    *(_DWORD *)(i + 24) = *(_DWORD *)(a3 + 24);
    i += 32;
  }
  a2[2] = i;
  v11 = *a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void std::vector<PCPlane<double>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *__p;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v11 = v3;
    __p = std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v3, a2);
    v8 = (char *)__p + v5;
    v9 = (char *)__p + v5;
    v10 = (char *)__p + 48 * v6;
    std::vector<PCPlane<double>>::__swap_out_circular_buffer(a1, &__p);
    if (v9 != v8)
      v9 = &v8[(v9 - v8 - 48) % 0x30uLL];
    if (__p)
      operator delete(__p);
  }
}

void sub_1B2D3C6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<PCPlane<double>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 48);
    v2 -= 48;
    *(_OWORD *)(v4 - 48) = v5;
    v4 -= 48;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v2 + 32);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::vector<PCPlane<double>>::__push_back_slow_path<PCPlane<double>>(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<double>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v7, v9);
  v11 = &v10[48 * v4];
  __p = v10;
  v16 = v11;
  v18 = &v10[48 * v12];
  *(_OWORD *)v11 = *a2;
  *((_OWORD *)v11 + 1) = a2[1];
  *((_OWORD *)v11 + 2) = a2[2];
  v17 = v11 + 48;
  std::vector<PCPlane<double>>::__swap_out_circular_buffer(a1, &__p);
  v13 = a1[1];
  if (v17 != v16)
    v17 = &v16[(v17 - v16 - 48) % 0x30uLL];
  if (__p)
    operator delete(__p);
  return v13;
}

void sub_1B2D3C8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::vector<PCPlane<double>>::insert(uint64_t *a1, _OWORD *a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  void *__p;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = (unint64_t)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = ((uint64_t)a2 - *a1) >> 4;
  v9 = 0xAAAAAAAAAAAAAAABLL * v8;
  v12 = a1[2];
  v10 = (uint64_t)(a1 + 2);
  v11 = v12;
  if (v6 >= v12)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v16 > 0x555555555555555)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v7) >> 4);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x2AAAAAAAAAAAAAALL)
      v18 = 0x555555555555555;
    else
      v18 = v16;
    v25 = v10;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>(v10, v18);
    else
      v19 = 0;
    __p = v19;
    v22 = &v19[48 * v9];
    v23 = v22;
    v24 = &v19[48 * v18];
    std::__split_buffer<PCPlane<double>>::push_back[abi:ne180100](&__p, a3);
    v4 = std::vector<PCPlane<double>>::__swap_out_circular_buffer(a1, &__p, (_OWORD *)v4);
    if (v23 != v22)
      v23 = &v22[(v23 - v22 - 48) % 0x30uLL];
    if (__p)
      operator delete(__p);
  }
  else if (a2 == (_OWORD *)v6)
  {
    *a2 = *(_OWORD *)a3;
    a2[1] = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v7 + 16 * v8 + 32) = *(_OWORD *)(a3 + 32);
    a1[1] = (uint64_t)(a2 + 3);
  }
  else
  {
    std::vector<PCPlane<double>>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 3));
    if (v4 <= a3)
      a3 += 48 * (a1[1] > a3);
    v13 = *(_OWORD *)a3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)v4 = v13;
    v14 = v7 + 48 * v9;
    v15 = *(_OWORD *)(a3 + 24);
    *(_QWORD *)(v14 + 40) = *(_QWORD *)(a3 + 40);
    *(_OWORD *)(v14 + 24) = v15;
  }
  return v4;
}

void sub_1B2D3CAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::vector<PCPlane<double>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 result;
  __n128 *v9;
  uint64_t v10;
  __n128 v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - a4;
  v6 = a2 + v4 - a4;
  v7 = v4;
  while (v6 < a3)
  {
    *(_OWORD *)v7 = *(_OWORD *)v6;
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v6 + 16);
    result = *(__n128 *)(v6 + 32);
    *(__n128 *)(v7 + 32) = result;
    v7 += 48;
    v6 += 48;
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v9 = (__n128 *)(v4 - 24);
    v10 = 16 * (v5 >> 4);
    do
    {
      v11 = *(__n128 *)(a2 + v10 - 48);
      v9[-1].n128_u64[1] = *(_QWORD *)(a2 + v10 - 32);
      *(__n128 *)((char *)v9 - 24) = v11;
      result = *(__n128 *)(a2 + v10 - 24);
      v9[1].n128_u64[0] = *(_QWORD *)(a2 + v10 - 8);
      *v9 = result;
      v9 -= 3;
      v10 -= 48;
    }
    while (v10);
  }
  return result;
}

__n128 std::__split_buffer<PCPlane<double>>::push_back[abi:ne180100](void **a1, uint64_t a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  _OWORD *v17;
  int64_t v18;
  char *v19;
  void *v20;
  __n128 result;

  v4 = (char *)a1[2];
  if (v4 == a1[3])
  {
    v5 = (char *)a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v12 = 1;
      else
        v12 = 0x5555555555555556 * ((v4 - (_BYTE *)*a1) >> 4);
      v13 = v12 >> 2;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<HGBinding>>((uint64_t)a1[4], v12);
      v16 = &v14[48 * v13];
      v17 = a1[1];
      v4 = v16;
      v18 = (_BYTE *)a1[2] - (_BYTE *)v17;
      if (v18)
      {
        v4 = &v16[v18];
        v19 = &v14[48 * v13];
        do
        {
          *(_OWORD *)v19 = *v17;
          *((_OWORD *)v19 + 1) = v17[1];
          *((_OWORD *)v19 + 2) = v17[2];
          v19 += 48;
          v17 += 3;
        }
        while (v19 != v4);
      }
      v20 = *a1;
      *a1 = v14;
      a1[1] = v16;
      a1[2] = v4;
      a1[3] = &v14[48 * v15];
      if (v20)
      {
        operator delete(v20);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
      v7 = v6 + 2;
      if (v6 >= -1)
        v7 = v6 + 1;
      if (v5 == v4)
      {
        v11 = &v5[-48 * (v7 >> 1)];
      }
      else
      {
        do
        {
          v8 = &v5[-48 * (v7 >> 1)];
          v9 = *(_OWORD *)v5;
          *((_QWORD *)v8 + 2) = *((_QWORD *)v5 + 2);
          *(_OWORD *)v8 = v9;
          v10 = *(_OWORD *)(v5 + 24);
          *((_QWORD *)v8 + 5) = *((_QWORD *)v5 + 5);
          *(_OWORD *)(v8 + 24) = v10;
          v5 += 48;
        }
        while (v5 != v4);
        v4 = (char *)a1[1];
        v11 = &v5[-48 * (v7 >> 1)];
      }
      a1[1] = &v4[-48 * (v7 >> 1)];
      v4 = v11;
    }
  }
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
  result = *(__n128 *)(a2 + 32);
  *((__n128 *)v4 + 2) = result;
  a1[2] = v4 + 48;
  return result;
}

uint64_t std::vector<PCPlane<double>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _OWORD *a3)
{
  uint64_t result;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  _OWORD *i;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_OWORD *)*a1;
  v6 = result;
  if ((_OWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *(v7 - 3);
      v7 -= 3;
      *(_OWORD *)(v6 - 48) = v8;
      v6 -= 48;
      *(_OWORD *)(v6 + 16) = v7[1];
      *(_OWORD *)(v6 + 32) = v7[2];
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_OWORD *)a1[1];
  for (i = (_OWORD *)a2[2]; a3 != v9; a3 += 3)
  {
    *i = *a3;
    i[1] = a3[1];
    i[2] = a3[2];
    i += 3;
  }
  a2[2] = i;
  v11 = (_OWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::const_reference __x)
{
  std::vector<int>::const_reference v3;
  int *i;
  const int *end;
  int *value;
  std::__compressed_pair<int *> *p_end_cap;
  std::__wrap_iter<const int *>::iterator_type v9;
  const int *v10;
  std::vector<int>::pointer v11;
  int v12;
  std::vector<int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int *v19;
  int *v20;
  unint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  std::__split_buffer<int> __v;

  v3 = __x;
  i = (int *)__position.__i_;
  end = this->__end_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  if (end >= value)
  {
    begin = this->__begin_;
    v14 = end - this->__begin_ + 1;
    if (v14 >> 62)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v15 = (char *)__position.__i_ - (char *)begin;
    v16 = __position.__i_ - begin;
    v17 = (char *)value - (char *)begin;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    __v.__end_cap_.__value_ = (std::allocator<int> *)&this->__end_cap_;
    if (v18)
      v19 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)&this->__end_cap_, v18);
    else
      v19 = 0;
    v20 = &v19[v16];
    __v.__first_ = v19;
    __v.__begin_ = v20;
    __v.__end_ = v20;
    __v.__end_cap_.__value_ = &v19[v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (begin == i)
          v22 = 1;
        else
          v22 = v15 >> 1;
        v23 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v22);
        v20 = (int *)((char *)v23 + (v22 & 0xFFFFFFFFFFFFFFFCLL));
        __v.__first_ = v23;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v23[v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= v21 >> 1;
        __v.__begin_ = v20;
      }
    }
    *v20 = *v3;
    __v.__end_ = v20 + 1;
    i = std::vector<int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<int>::pointer)((char *)__v.__end_
                                                     + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v9 = __position.__i_ + 1;
    v10 = end - 1;
    v11 = this->__end_;
    while (v10 < end)
    {
      v12 = *v10++;
      *v11++ = v12;
    }
    this->__end_ = v11;
    if (end != v9)
      memmove((void *)&end[-(end - v9)], __position.__i_, (char *)end - (char *)v9);
    if (i <= v3)
      v3 += this->__end_ > v3;
    *i = *v3;
  }
  return (std::vector<int>::iterator)i;
}

void sub_1B2D3CFF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::vector<int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<int> *this, std::__split_buffer<int> *__v, std::vector<int>::pointer __p)
{
  int *begin;
  std::vector<int>::pointer v6;
  int *v7;
  std::vector<int>::pointer v8;
  int v9;
  int *end;
  std::__split_buffer<int>::pointer v11;
  int64_t v12;
  int *v13;
  int *v14;
  int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void std::vector<PCVector4<double>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2)
      a1[1] = *a1 + 32 * a2;
  }
  else
  {
    std::vector<PCVector4<double>>::__append(a1, a2 - v2);
  }
}

void std::vector<PCVector4<double>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *__p;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<LiPolygon::PosEdge>>(v4, v12);
    else
      v13 = 0;
    __p = v13;
    v15 = &v13[32 * v10];
    v17 = &v13[32 * v12];
    bzero(v15, 32 * a2);
    v16 = &v15[32 * a2];
    std::vector<PCVector4<double>>::__swap_out_circular_buffer(a1, &__p);
    if (v16 != v15)
      v16 += (v15 - v16 + 31) & 0xFFFFFFFFFFFFFFE0;
    if (__p)
      operator delete(__p);
  }
}

void sub_1B2D3D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<PCVector4<double>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 32);
    v2 -= 32;
    *(_OWORD *)(v4 - 32) = v5;
    v4 -= 32;
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(v2 + 16);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t LiEquirectReorient::LiEquirectReorient(uint64_t a1, const PCSharedCount *a2, int a3, int a4, _DWORD *a5, char a6)
{
  PCSharedCount v13;

  *(_QWORD *)(a1 + 88) = &off_1E65EB048;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 104) = 1;
  LiImageFilter::LiImageFilter((LiImageFilter *)a1, &off_1E6571130);
  *(_QWORD *)a1 = &off_1E6571028;
  *(_QWORD *)(a1 + 88) = &unk_1E6571110;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = *a5;
  *(_DWORD *)(a1 + 48) = a5[1];
  *(_DWORD *)(a1 + 52) = a5[2];
  *(_DWORD *)(a1 + 56) = a5[3];
  *(_DWORD *)(a1 + 60) = a5[4];
  *(_DWORD *)(a1 + 64) = a5[5];
  *(_DWORD *)(a1 + 68) = a5[6];
  *(_DWORD *)(a1 + 72) = a5[7];
  *(_DWORD *)(a1 + 76) = a5[8];
  *(_BYTE *)(a1 + 80) = a6;
  *(PCSharedCount *)(a1 + 16) = (PCSharedCount)a2->var0;
  PCSharedCount::PCSharedCount(&v13, a2 + 1);
  PCSharedCount::operator=((uint64_t *)(a1 + 24), (uint64_t *)&v13);
  PCSharedCount::~PCSharedCount(&v13);
  return a1;
}

void sub_1B2D3D3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, PCSharedCount a10)
{
  uint64_t v10;
  PC_Sp_counted_base **v11;
  uint64_t v12;

  PCSharedCount::~PCSharedCount(&a10);
  LiImageFilter::~LiImageFilter((PCSharedCount *)v10, (const PCString *)&off_1E6571130);
  *(_QWORD *)(v10 + 88) = v12 + 16;
  *(_BYTE *)(v10 + 104) = 0;
  PCWeakCount::~PCWeakCount(v11);
  _Unwind_Resume(a1);
}

void LiEquirectReorient::LiEquirectReorient(LiEquirectReorient *this, const LiEquirectReorient *a2)
{
  *((_QWORD *)this + 11) = &off_1E65EB048;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  LiImageFilter::LiImageFilter(this, (const LiImageFilter *)&off_1E6571130, (uint64_t)a2);
  *(_QWORD *)this = &off_1E6571028;
  *((_QWORD *)this + 11) = &unk_1E6571110;
  *(_QWORD *)((char *)this + 36) = *(_QWORD *)((char *)a2 + 36);
  *((_DWORD *)this + 11) = *((_DWORD *)a2 + 11);
  *((_DWORD *)this + 12) = *((_DWORD *)a2 + 12);
  *((_DWORD *)this + 13) = *((_DWORD *)a2 + 13);
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)this + 19) = *((_DWORD *)a2 + 19);
  *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
}

void sub_1B2D3D4E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 88) = v3;
  *(_BYTE *)(v1 + 104) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiEquirectReorient::clone(LiEquirectReorient *this@<X0>, PCSharedCount *a2@<X8>)
{
  PCSharedCount v3;
  PCSharedCount v4;

  PCMakePtr<LiEquirectReorient,LiEquirectReorient const&>(this, &v3);
  PCPtr<LiImageSource>::PCPtr<OZGradientSource>(a2, &v3);
  PCSharedCount::~PCSharedCount(&v4);
}

void sub_1B2D3D548(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1 + 1);
  _Unwind_Resume(a1);
}

PCSharedCount *PCMakePtr<LiEquirectReorient,LiEquirectReorient const&>@<X0>(const LiEquirectReorient *a1@<X0>, PCSharedCount *a2@<X8>)
{
  LiEquirectReorient *v4;

  v4 = (LiEquirectReorient *)operator new();
  LiEquirectReorient::LiEquirectReorient(v4, a1);
  a2->var0 = (PC_Sp_counted_base *)v4;
  return PCSharedCount::PCSharedCount(a2 + 1, (LiEquirectReorient *)((char *)v4 + *(_QWORD *)(*(_QWORD *)v4 - 24)));
}

void sub_1B2D3D5BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40C56E03D1);
  _Unwind_Resume(a1);
}

uint64_t LiEquirectReorient::filteredEdges(LiEquirectReorient *this)
{
  return 0;
}

uint64_t LiEquirectReorient::pixelTransformSupport()
{
  return 3;
}

HGNode *LiEquirectReorient::getHelium@<X0>(LiImageSource **this@<X0>, LiAgent *a2@<X1>, HGNode **a3@<X8>)
{
  return LiAgent::getHelium(a2, this[2], a3);
}

void LiEquirectReorient::~LiEquirectReorient(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)off_1E6571180;
  this[11].var0 = (PC_Sp_counted_base *)off_1E6571268;
  PCSharedCount::~PCSharedCount(this + 3);
  OZChannelBase::setRangeName((OZChannelBase *)this, (const PCString *)&off_1E6571138);
  this[11].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[13].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[12].var0);
}

{
  LiEquirectReorient::~LiEquirectReorient(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiEquirectReorient::~LiEquirectReorient(LiEquirectReorient *this)
{
  LiEquirectReorient::~LiEquirectReorient((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  LiEquirectReorient::~LiEquirectReorient((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

void LiDofInfo::LiDofInfo(LiDofInfo *this)
{
  *(_OWORD *)this = xmmword_1B3559410;
  *((_QWORD *)this + 2) = 0x447A0000461C4000;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 6) = 0;
  *(_OWORD *)((char *)this + 28) = HGRectInfinite;
  *(_OWORD *)((char *)this + 56) = xmmword_1B3559420;
  *((_DWORD *)this + 18) = 1124073472;
}

double LiDofInfo::getCircleOfConfusionRadius(LiDofInfo *this, double a2)
{
  double v2;
  double v3;

  v2 = fmax(a2, 1.0);
  v3 = fmax(*((float *)this + 1) - v2, 0.0);
  if (v3 < v2 - *((float *)this + 2))
    v3 = v2 - *((float *)this + 2);
  return *(float *)this / v2 * v3;
}

void LiPolygonDrawer::LiPolygonDrawer(LiPolygonDrawer *this)
{
  uint64_t v2;

  LiImagePolygon::LiImagePolygon(this);
  LiDrawer::LiDrawer((LiDrawer *)(v2 + 112));
  *(_QWORD *)this = off_1E6571400;
  *((_QWORD *)this + 14) = &unk_1E6571450;
  *((_QWORD *)this + 20) = 0;
}

void sub_1B2D3D79C(_Unwind_Exception *a1)
{
  LiImagePolygon *v1;

  LiImagePolygon::~LiImagePolygon(v1);
  _Unwind_Resume(a1);
}

void LiPolygonDrawer::~LiPolygonDrawer(LiPolygonDrawer *this)
{
  LiDrawer *v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E6571400;
  *((_QWORD *)this + 14) = &unk_1E6571450;
  v2 = (LiPolygonDrawer *)((char *)this + 112);
  v3 = *((_QWORD *)this + 20);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  LiDrawer::~LiDrawer(v2);
  LiImagePolygon::~LiImagePolygon(this);
}

void LiPolygonInstance::LiPolygonInstance(LiPolygonInstance *this, LiRenderInstance *a2)
{
  const LiRenderParameters *Description;

  LiPolygonDrawer::LiPolygonDrawer(this);
  Description = (const LiRenderParameters *)ProGL::Private::TextureImpl::getDescription(a2);
  LiAgent::LiAgent((LiPolygonInstance *)((char *)this + 168), Description, 1);
  *(_QWORD *)this = &off_1E6571508;
  *((_QWORD *)this + 14) = &unk_1E65715B8;
  *((_QWORD *)this + 89) = 0x3FF0000000000000;
  *((_QWORD *)this + 84) = 0x3FF0000000000000;
  *((_QWORD *)this + 79) = 0x3FF0000000000000;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *((_OWORD *)this + 45) = 0u;
  *((_OWORD *)this + 46) = 0u;
  *((_QWORD *)this + 105) = 0x3FF0000000000000;
  *((_QWORD *)this + 100) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)this + 47) = _Q1;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_QWORD *)this + 121) = 0x3FF0000000000000;
  *((_QWORD *)this + 116) = 0x3FF0000000000000;
  *((_OWORD *)this + 55) = _Q1;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_QWORD *)this + 142) = 0x3FF0000000000000;
  *((_QWORD *)this + 137) = 0x3FF0000000000000;
  *((_QWORD *)this + 132) = 0x3FF0000000000000;
  *((_OWORD *)this + 63) = _Q1;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((_QWORD *)this + 157) = 0x3FF0000000000000;
  *((_QWORD *)this + 152) = 0x3FF0000000000000;
  *((_QWORD *)this + 147) = 0x3FF0000000000000;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_QWORD *)this + 178) = 0x3FF0000000000000;
  *((_QWORD *)this + 173) = 0x3FF0000000000000;
  *((_QWORD *)this + 168) = 0x3FF0000000000000;
  *((_OWORD *)this + 81) = _Q1;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *((_OWORD *)this + 87) = 0u;
  *((_QWORD *)this + 179) = 0;
  *((_BYTE *)this + 1440) = 0;
  *((_QWORD *)this + 181) = a2;
  *((_QWORD *)this + 182) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 183);
  *((_QWORD *)this + 184) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 185);
  *((_QWORD *)this + 186) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 187);
  *((_QWORD *)this + 188) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 189);
  *((_QWORD *)this + 190) = 0x3FF0000000000000;
  *((_BYTE *)this + 1528) = 0;
  *((_QWORD *)this + 192) = 0;
  LiImageFilterChain::LiImageFilterChain((LiPolygonInstance *)((char *)this + 1544));
  *((_QWORD *)this + 200) = 0;
  *((_OWORD *)this + 99) = 0u;
  *((_DWORD *)this + 402) = 1;
  *((_BYTE *)this + 1612) = 0;
  *((_BYTE *)this + 416) = *((_BYTE *)a2 + 16);
}

void sub_1B2D3D9E4(_Unwind_Exception *a1)
{
  LiPolygonDrawer *v1;
  LiAgent *v2;
  PCSharedCount *v3;
  PCSharedCount *v4;
  PCSharedCount *v5;
  PCSharedCount *v6;

  PCSharedCount::~PCSharedCount(v6);
  PCSharedCount::~PCSharedCount(v5);
  PCSharedCount::~PCSharedCount(v4);
  PCSharedCount::~PCSharedCount(v3);
  LiAgent::~LiAgent(v2);
  LiPolygonDrawer::~LiPolygonDrawer(v1);
  _Unwind_Resume(a1);
}

uint64_t LiPolygonInstance::makePiece(LiPolygonInstance *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = operator new();
  LiPolygonInstance::LiPolygonInstance((LiPolygonInstance *)v2, *((LiRenderInstance **)this + 181));
  v3 = *((_QWORD *)this + 181);
  v4 = *(_DWORD *)(v3 + 1172);
  if (*(_DWORD *)(v3 + 1168) <= v4)
    v5 = (2 * (v4 + 1)) | 1;
  else
    v5 = *(_DWORD *)(v3 + 1168);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize(v3 + 1160, v4 + 1, v5);
  *(_QWORD *)(*(_QWORD *)(v3 + 1176) + 8 * *(int *)(v3 + 1172) - 8) = v2 + 112;
  *(_DWORD *)(v2 + 8) = *((_DWORD *)this + 2);
  *(_OWORD *)(v2 + 16) = *((_OWORD *)this + 1);
  *(_QWORD *)(v2 + 32) = *((_QWORD *)this + 4);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)((char *)this + 40);
  *(_QWORD *)(v2 + 56) = *((_QWORD *)this + 7);
  v6 = (char *)this + 112;
  if (*((_QWORD *)this + 16))
    v6 = (char *)*((_QWORD *)this + 16);
  *(_QWORD *)(v2 + 128) = v6;
  if ((LiPolygonInstance *)v2 != this)
  {
    v7 = 0;
    v8 = (char *)this + 632;
    do
    {
      v9 = (_OWORD *)(v2 + 632 + v7);
      v10 = *(_OWORD *)&v8[v7 + 16];
      *v9 = *(_OWORD *)&v8[v7];
      v9[1] = v10;
      v7 += 32;
    }
    while (v7 != 128);
    if ((LiPolygonInstance *)v2 != this)
    {
      v11 = 0;
      v12 = (char *)this + 760;
      do
      {
        v13 = (_OWORD *)(v2 + 760 + v11);
        v14 = *(_OWORD *)&v12[v11 + 16];
        *v13 = *(_OWORD *)&v12[v11];
        v13[1] = v14;
        v11 += 32;
      }
      while (v11 != 128);
    }
  }
  v15 = *(_OWORD *)((char *)this + 1160);
  *(_OWORD *)(v2 + 1144) = *(_OWORD *)((char *)this + 1144);
  *(_OWORD *)(v2 + 1160) = v15;
  *(_BYTE *)(v2 + 120) = *((_BYTE *)this + 120);
  *(_QWORD *)(v2 + 1536) = *((_QWORD *)this + 192);
  *(_DWORD *)(v2 + 124) = *((_DWORD *)this + 31);
  *(_QWORD *)(v2 + 1520) = *((_QWORD *)this + 190);
  *(_BYTE *)(v2 + 1528) = *((_BYTE *)this + 1528);
  *(_QWORD *)(v2 + 1600) = *((_QWORD *)this + 200);
  *(_OWORD *)(v2 + 1584) = *((_OWORD *)this + 99);
  *(_DWORD *)(v2 + 1608) = *((_DWORD *)this + 402);
  v16 = *(_QWORD *)(v2 + 424);
  v17 = *((_QWORD *)this + 53);
  if (v16 != v17)
  {
    if (v16)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v16 + 24))(*(_QWORD *)(v2 + 424));
      v17 = *((_QWORD *)this + 53);
    }
    *(_QWORD *)(v2 + 424) = v17;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  }
  v18 = *(_QWORD *)(v2 + 160);
  v19 = *((_QWORD *)this + 20);
  if (v18 != v19)
  {
    if (v18)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v18 + 24))(*(_QWORD *)(v2 + 160));
      v19 = *((_QWORD *)this + 20);
    }
    *(_QWORD *)(v2 + 160) = v19;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  }
  *(_BYTE *)(v2 + 1440) = 1;
  *(_BYTE *)(v2 + 1612) = *((_BYTE *)this + 1612);
  *(_QWORD *)(v2 + 1432) = *((_QWORD *)this + 179);
  return v2;
}

void sub_1B2D3DC50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10F1C4041B119E4);
  _Unwind_Resume(a1);
}

void LiPolygonInstance::~LiPolygonInstance(PCSharedCount *this)
{
  PCSharedCount *v2;
  int var0;
  PC_Sp_counted_base *v4;

  this->var0 = (PC_Sp_counted_base *)&off_1E6571508;
  this[14].var0 = (PC_Sp_counted_base *)&unk_1E65715B8;
  v2 = this + 195;
  this[195].var0 = (PC_Sp_counted_base *)&unk_1E64FC2F8;
  if (SLODWORD(this[196].var0) < 0)
    var0 = 1;
  else
    var0 = (int)this[196].var0;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v2, 0, var0);
  v4 = this[197].var0;
  if (v4)
    MEMORY[0x1B5E2914C](v4, 0x1000C8077774924);
  this[197].var0 = 0;
  LODWORD(this[196].var0) = 0;
  PCSharedCount::~PCSharedCount(this + 194);
  PCSharedCount::~PCSharedCount(this + 189);
  PCSharedCount::~PCSharedCount(this + 187);
  PCSharedCount::~PCSharedCount(this + 185);
  PCSharedCount::~PCSharedCount(this + 183);
  LiAgent::~LiAgent((LiAgent *)&this[21]);
  LiPolygonDrawer::~LiPolygonDrawer((LiPolygonDrawer *)this);
}

{
  LiPolygonInstance::~LiPolygonInstance(this);
  JUMPOUT(0x1B5E29170);
}

void `non-virtual thunk to'LiPolygonInstance::~LiPolygonInstance(PCSharedCount *this)
{
  LiPolygonInstance::~LiPolygonInstance(this - 14);
}

{
  LiPolygonInstance::~LiPolygonInstance(this - 14);
  JUMPOUT(0x1B5E29170);
}

double LiPolygonInstance::addReflectionFilter(LiPolygonInstance *this)
{
  double result;
  LiImageFilter *v3;
  PCSharedCount v4;

  result = (*(double (**)(_QWORD))(**((_QWORD **)this + 179) + 184))(*((_QWORD *)this + 179));
  if (result > 0.0 && *(_BYTE *)(*((_QWORD *)this + 27) + 79))
  {
    if (*(int *)(*((_QWORD *)this + 181) + 96) < 1)
    {
      result = *((double *)this + 190)
             * fmax(1.0 - (*(double (**)(_QWORD))(**((_QWORD **)this + 179) + 184))(*((_QWORD *)this + 179)), 0.0);
      *((double *)this + 190) = result;
    }
    else
    {
      LiPolygonInstance::makeReflectionFilter(this, (uint64_t)&v3);
      if (v3)
      {
        LiImageReflection::setBlendMode((uint64_t)v3, *(_DWORD *)(*((_QWORD *)this + 179) + 680));
        LiImageFilterChain::append((LiPolygonInstance *)((char *)this + 1544), v3);
      }
      PCSharedCount::~PCSharedCount(&v4);
    }
  }
  return result;
}

void sub_1B2D3DE40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void LiPolygonInstance::makeReflectionFilter(LiPolygonInstance *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  LiRenderer *v22;
  PC_Sp_counted_base *var0;
  uint64_t v24;
  PC_Sp_counted_base *v25;
  _QWORD *v26;
  PCShared_base *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  PC_Sp_counted_base *v32;
  uint64_t Camera;
  PC_Sp_counted_base *v34;
  uint64_t v35;
  PC_Sp_counted_base *v36;
  __n128 v37;
  double v38;
  LiGaussianBlur *v39;
  double *v40;
  LiImageReflection *v41;
  PCShared_base *v42;
  double v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  PCSharedCount v49[2];
  float64x2_t v50[2];
  LiImageSource *v51;
  PCSharedCount v52;
  PCSharedCount v53;
  PCSharedCount v54;
  _OWORD v55[8];
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  _OWORD v66[8];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  *(_QWORD *)a2 = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a2 + 8));
  v4 = *(_OWORD *)((char *)this + 712);
  v5 = *(_OWORD *)((char *)this + 680);
  v71 = *(_OWORD *)((char *)this + 696);
  v72 = v4;
  v6 = *(_OWORD *)((char *)this + 712);
  v7 = *(_OWORD *)((char *)this + 744);
  v73 = *(_OWORD *)((char *)this + 728);
  v74 = v7;
  v8 = *(_OWORD *)((char *)this + 648);
  v67 = *(_OWORD *)((char *)this + 632);
  v68 = v8;
  v9 = *(_OWORD *)((char *)this + 680);
  v11 = *(_OWORD *)((char *)this + 632);
  v10 = *(_OWORD *)((char *)this + 648);
  v69 = *(_OWORD *)((char *)this + 664);
  v70 = v9;
  v66[4] = v71;
  v66[5] = v6;
  v12 = *(_OWORD *)((char *)this + 744);
  v66[6] = v73;
  v66[7] = v12;
  v66[0] = v11;
  v66[1] = v10;
  v66[2] = v69;
  v66[3] = v5;
  if (PCMatrix44Tmpl<double>::invert((double *)v66, (double *)v66, 0.0))
    goto LABEL_8;
  v13 = *(double *)&v69 * *((double *)&v71 + 1) - *(double *)&v71 * *((double *)&v69 + 1);
  v14 = *(double *)&v71 * *((double *)&v67 + 1) - *(double *)&v67 * *((double *)&v71 + 1);
  v15 = *(double *)&v67 * *((double *)&v69 + 1) - *(double *)&v69 * *((double *)&v67 + 1);
  v16 = sqrt(v15 * v15 + v13 * v13 + v14 * v14);
  if (v16 <= -0.000000100000001 || v16 >= 0.000000100000001)
  {
    v13 = v13 / v16;
    v14 = v14 / v16;
    v15 = v15 / v16;
  }
  v17 = 0;
  *(double *)&v68 = v13;
  *(double *)&v70 = v14;
  *(double *)&v72 = v15;
  *(_QWORD *)&v74 = 0;
  do
  {
    v18 = &v66[v17];
    v19 = *(__int128 *)((char *)&v67 + v17 * 16 + 16);
    *v18 = *(__int128 *)((char *)&v67 + v17 * 16);
    v18[1] = v19;
    v17 += 2;
  }
  while (v17 != 8);
  if (PCMatrix44Tmpl<double>::invert((double *)v66, (double *)v66, 0.0))
  {
LABEL_8:
    v65 = 0x3FF0000000000000;
    v62 = 0x3FF0000000000000;
    v59 = 0x3FF0000000000000;
    v56 = 0x3FF0000000000000;
    v57 = 0u;
    v58 = 0u;
    v60 = 0u;
    v61 = 0u;
    v63 = 0u;
    v64 = 0u;
    (*(void (**)(PCSharedCount *__return_ptr))(**((_QWORD **)this + 179) + 144))(v49);
    memset(v55, 0, 24);
    *(_OWORD *)((char *)&v55[1] + 8) = *(_OWORD *)&v49[0].var0;
    *((_QWORD *)&v55[2] + 1) = *(_QWORD *)&v50[0].f64[0];
    transformPlane<double>(&v67, (double *)v55, (uint64_t)v55);
    PCMatrix44Tmpl<double>::setReflect((uint64_t)&v56, (double *)&v55[1] + 1, (double *)v55);
    LiRenderInstance::getRootTransform(*((LiRenderInstance **)this + 181), v55);
    PCMatrix44Tmpl<double>::rightMult((uint64_t)&v56, (double *)v55);
    v20 = *((_QWORD *)this + 181);
    v21 = *(_QWORD *)(v20 + 80);
    if (!v21)
      v21 = *(_QWORD *)(v20 + 8);
    v22 = (LiRenderer *)operator new();
    LiRenderer::LiRenderer(v22);
    v53.var0 = (PC_Sp_counted_base *)v22;
    PCSharedCount::PCSharedCount(&v54, (LiRenderer *)((char *)v22 + *(_QWORD *)(*(_QWORD *)v22 - 24)));
    PCPtr<LiImageSource>::PCPtr<OZGradientSource>((PCSharedCount *)&v51, &v53);
    if (!v53.var0)
      throw_PCNullPointerException(1);
    (*(void (**)(PC_Sp_counted_base *, uint64_t *))(*(_QWORD *)v53.var0 + 200))(v53.var0, &v56);
    var0 = v53.var0;
    if (!v53.var0)
      throw_PCNullPointerException(1);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 176))(v21);
    (*(void (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)var0 + 168))(var0, v24);
    v25 = v53.var0;
    if (!v53.var0)
      throw_PCNullPointerException(1);
    v26 = (_QWORD *)*((_QWORD *)this + 179);
    *(_QWORD *)&v55[0] = v26;
    if (v26)
      v27 = (PCShared_base *)((char *)v26 + *(_QWORD *)(*v26 - 24));
    else
      v27 = 0;
    PCSharedCount::PCSharedCount((PCSharedCount *)v55 + 1, v27);
    v28 = *((_DWORD *)v25 + 33);
    if (*((_DWORD *)v25 + 32) <= v28)
      v29 = (2 * (v28 + 1)) | 1;
    else
      v29 = *((_DWORD *)v25 + 32);
    PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v25 + 120, v28 + 1, v29);
    v30 = *((_QWORD *)v25 + 17);
    v31 = *((int *)v25 + 33) - 1;
    *(_QWORD *)(v30 + 16 * v31) = *(_QWORD *)&v55[0];
    PCSharedCount::PCSharedCount(v49, (const PCSharedCount *)v55 + 1);
    PCSharedCount::operator=((uint64_t *)(v30 + 16 * v31 + 8), (uint64_t *)v49);
    PCSharedCount::~PCSharedCount(v49);
    PCSharedCount::~PCSharedCount((PCSharedCount *)v55 + 1);
    v32 = v53.var0;
    if (!v53.var0)
      throw_PCNullPointerException(1);
    Camera = LiRenderInstance::getCamera(*((LiRenderInstance **)this + 181));
    (*(void (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)v32 + 184))(v32, Camera);
    v34 = v53.var0;
    if (!v53.var0)
      throw_PCNullPointerException(1);
    *((_BYTE *)v53.var0 + 48) = 1;
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 232))(v21);
    (*(void (**)(PC_Sp_counted_base *, uint64_t))(*(_QWORD *)v34 + 224))(v34, v35);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 232))(v21))
    {
      v36 = v53.var0;
      if (!v53.var0)
        throw_PCNullPointerException(1);
      (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v21 + 216))(v55, v21);
      (*(void (**)(PC_Sp_counted_base *, _QWORD))(*(_QWORD *)v36 + 208))(v36, *(_QWORD *)&v55[0]);
      PCSharedCount::~PCSharedCount((PCSharedCount *)v55 + 1);
    }
    memset(v50, 0, sizeof(v50));
    v48 = 0u;
    *(_OWORD *)&v49[0].var0 = 0u;
    v46 = 0u;
    v47 = 0u;
    memset(v55, 0, 48);
    (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 179) + 144))(&v44);
    *(_OWORD *)((char *)&v55[1] + 8) = v44;
    *((_QWORD *)&v55[2] + 1) = v45;
    if (transformPlane<double>((LiPolygonInstance *)((char *)this + 632), (double *)v55, (uint64_t)v49))
    {
      if (transformPlane<double>((_OWORD *)(*((_QWORD *)this + 181) + 480), (double *)v49, (uint64_t)&v46)
        && *((double *)&v47 + 1) * 0.0
         + *(double *)&v48 * 0.0
         + *((double *)&v48 + 1)
         - (*((double *)&v47 + 1) * *(double *)&v46
          + *(double *)&v48 * *((double *)&v46 + 1)
          + *((double *)&v48 + 1) * *(double *)&v47)
         * 0.0 < 0.0)
      {
        *(float64x2_t *)((char *)v50 + 8) = vnegq_f64(*(float64x2_t *)((char *)v50 + 8));
        v50[1].f64[1] = -v50[1].f64[1];
      }
      if (!v53.var0)
        throw_PCNullPointerException(1);
      v37.n128_f64[0] = LiClipSet::add((uint64_t)v53.var0 + 72, (double *)v49, *(unsigned __int8 *)(*((_QWORD *)this + 181) + 102) == 0);
    }
    v38 = (*(double (**)(_QWORD, __n128))(**((_QWORD **)this + 179) + 248))(*((_QWORD *)this + 179), v37);
    if (v38 > 0.0)
    {
      v39 = (LiGaussianBlur *)operator new();
      LiGaussianBlur::LiGaussianBlur(v39);
      *(_QWORD *)&v44 = v39;
      PCSharedCount::PCSharedCount((PCSharedCount *)&v44 + 1, (LiGaussianBlur *)((char *)v39 + *(_QWORD *)(*(_QWORD *)v39 - 24)));
      v40 = (double *)v44;
      if (!(_QWORD)v44)
        throw_PCNullPointerException(1);
      *(double *)(v44 + 40) = v38;
      v40[6] = v38;
      (*(void (**)(double *, LiImageSource *))(*(_QWORD *)v40 + 168))(v40, v51);
      PCPtr<LiImageSource>::operator=<TXTextureDecal>((PC_Sp_counted_base **)&v51, (const PCSharedCount *)&v44);
      PCSharedCount::~PCSharedCount((PCSharedCount *)&v44 + 1);
    }
    v41 = (LiImageReflection *)operator new();
    LiImageReflection::LiImageReflection(v41);
    PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)a2, v41);
    v42 = *(PCShared_base **)a2;
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    v43 = (*(double (**)(_QWORD))(**((_QWORD **)this + 179) + 184))(*((_QWORD *)this + 179));
    LiImageReflection::setReflectivity((uint64_t)v42, v43);
    if (!*(_QWORD *)a2)
      throw_PCNullPointerException(1);
    LiImageReflection::setReflectionInput(*(PCShared_base ***)a2, v51);
    PCSharedCount::~PCSharedCount(&v52);
    PCSharedCount::~PCSharedCount(&v54);
  }
}

void sub_1B2D3E4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, PCSharedCount a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  PCSharedCount *v29;
  PCSharedCount *v30;
  PCSharedCount *v31;

  PCSharedCount::~PCSharedCount(v31);
  PCSharedCount::~PCSharedCount((PCSharedCount *)&a26);
  PCSharedCount::~PCSharedCount(v30);
  PCSharedCount::~PCSharedCount(v29);
  _Unwind_Resume(a1);
}

void LiPolygonInstance::crop(uint64_t a1, double *a2, int a3)
{
  double v6;
  double v7;
  double v8;
  double v9;
  int v10;
  _QWORD v11[4];

  if (PCMath::equal(a2, (double *)(a1 + 16), 0.0000001))
  {
    std::vector<LiPolygon::PosEdge>::resize(*(uint64_t **)(a1 + 88), 0);
  }
  else
  {
    v6 = a2[2];
    v7 = a2[4];
    v8 = a2[5];
    v9 = a2[3] * *a2 + v7 * a2[1];
    if (a3)
      v10 = 0;
    else
      v10 = 2;
    *(double *)v11 = a2[3];
    *(double *)&v11[1] = v7;
    *(double *)&v11[2] = v8;
    *(double *)&v11[3] = -(v9 + v8 * v6);
    if (liPolygonPlaneClip((uint64_t **)(a1 + 88), (uint64_t **)(a1 + 104), (uint64_t)v11, v10))
      *(_BYTE *)(a1 + 1440) = 1;
  }
}

__n128 LiPolygonInstance::crop(uint64_t a1, float64x2_t *a2, int a3, __n128 result)
{
  double *v4;
  uint64_t v5;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  BOOL v24;
  float64_t v25;
  BOOL v26;
  double v27;
  double v28;
  uint64_t v29;
  double *v30;
  double v31;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  float64_t v42;
  double v43;
  float64_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  __int128 v48;
  __int128 v49;
  float64x2_t v50;
  double v51;
  double v52;

  v4 = **(double ***)(a1 + 88);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - (_QWORD)v4;
  if ((int)((unint64_t)v5 >> 5) >= 1)
  {
    v9 = a2[1].f64[0];
    v10 = a2[1].f64[1];
    v11 = v9 < 0.0;
    result.n128_u64[0] = *(_QWORD *)&a2->f64[0];
    v12 = a2->f64[1];
    if (v10 < 0.0)
      v11 = 1;
    if (v4[2] == 0.0)
    {
      v26 = 0;
      v27 = v9 + result.n128_f64[0];
      v28 = v10 + v12;
      v29 = 1;
      v30 = **(double ***)(a1 + 88);
      while (!v11)
      {
        v31 = v30[1];
        if (result.n128_f64[0] <= *v30 && v27 >= *v30 && v12 <= v31 && v28 >= v31)
        {
          v26 = v29 >= (int)(v5 >> 5);
          if (((unint64_t)v5 >> 5) != v29)
          {
            v35 = v30[6];
            v30 += 4;
            ++v29;
            if (v35 == 0.0)
              continue;
          }
        }
        if (!v26)
          break;
        return result;
      }
    }
    v50.f64[0] = 0.0;
    v13 = v5 & 0x1FFFFFFFE0;
    if (v13)
    {
      if (v13 == 128)
      {
        v14 = *v4;
        v15 = v4[4];
        v16 = v4[5];
        if (*v4 == v15)
        {
          v17 = v4[9];
          if (v16 == v17)
          {
            v18 = v4[8];
            if (v18 == v4[12])
            {
              v19 = v4[1];
              if (v4[13] == v19)
              {
                v20 = v18 - v14;
                v21 = v14 - v18;
                if (v14 >= v18)
                {
                  v14 = v4[8];
                  v20 = v21;
                }
                v50.f64[0] = v14;
                v51 = v20;
                v22 = v17 - v19;
                v23 = v19 - v17;
                v24 = v19 < v17;
                if (v19 >= v17)
                  v25 = v17;
                else
                  v25 = v19;
LABEL_41:
                if (!v24)
                  v22 = v23;
                v50.f64[1] = v25;
                v52 = v22;
                PCRect<double>::operator&=(&v50, a2);
                std::vector<LiPolygon::PosEdge>::resize(*(uint64_t **)(a1 + 88), 4uLL);
                v41 = **(_QWORD **)(a1 + 88);
                *(float64x2_t *)v41 = v50;
                *(_QWORD *)(v41 + 16) = 0;
                v42 = v50.f64[1];
                result.n128_u64[0] = *(_QWORD *)&v50.f64[0];
                v43 = v51;
                v44 = v50.f64[1] + v52;
                *(float64_t *)(v41 + 32) = v50.f64[0];
                *(float64_t *)(v41 + 40) = v44;
                *(_QWORD *)(v41 + 48) = 0;
                result.n128_f64[0] = result.n128_f64[0] + v43;
                *(_QWORD *)(v41 + 64) = result.n128_u64[0];
                *(float64_t *)(v41 + 72) = v44;
                *(_QWORD *)(v41 + 80) = 0;
                *(_QWORD *)(v41 + 96) = result.n128_u64[0];
                *(float64_t *)(v41 + 104) = v42;
                *(_QWORD *)(v41 + 112) = 0;
                *(_BYTE *)(a1 + 1440) = 1;
                return result;
              }
            }
          }
        }
        v36 = v4[1];
        if (v36 == v16)
        {
          v37 = v4[8];
          if (v15 == v37)
          {
            v38 = v4[9];
            if (v38 == v4[13] && v4[12] == v14)
            {
              v39 = v37 - v14;
              v40 = v14 - v37;
              if (v14 >= v37)
              {
                v14 = v4[8];
                v39 = v40;
              }
              v50.f64[0] = v14;
              v51 = v39;
              v22 = v38 - v36;
              v23 = v36 - v38;
              v24 = v36 < v38;
              if (v36 >= v38)
                v25 = v38;
              else
                v25 = v36;
              goto LABEL_41;
            }
          }
        }
      }
      *(_QWORD *)&v47.f64[0] = result.n128_u64[0];
      v47.f64[1] = v12;
      v48 = xmmword_1B304EEE0;
      v49 = 0uLL;
      LiPolygonInstance::crop(a1, v47.f64, a3);
      if (((*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - **(_QWORD **)(a1 + 88)) & 0x1FFFFFFFE0) != 0)
      {
        v45 = *a2;
        v48 = 0uLL;
        v47 = v45;
        v49 = xmmword_1B304EED0;
        LiPolygonInstance::crop(a1, v47.f64, a3);
        if (((*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - **(_QWORD **)(a1 + 88)) & 0x1FFFFFFFE0) != 0)
        {
          v47 = vaddq_f64(*a2, a2[1]);
          v48 = xmmword_1B305A270;
          v49 = 0uLL;
          LiPolygonInstance::crop(a1, v47.f64, a3);
          if (((*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) - **(_QWORD **)(a1 + 88)) & 0x1FFFFFFFE0) != 0)
          {
            v46 = vaddq_f64(*a2, a2[1]);
            v48 = 0uLL;
            v47 = v46;
            v49 = xmmword_1B3058A90;
            LiPolygonInstance::crop(a1, v47.f64, a3);
          }
        }
      }
    }
  }
  return result;
}

float64x2_t PCRect<double>::operator&=(float64x2_t *a1, float64x2_t *a2)
{
  float64x2_t result;
  float64x2_t v3;
  float64x2_t v4;
  float64x2_t v5;

  result.f64[0] = a1[1].f64[0];
  if (result.f64[0] >= 0.0 && a1[1].f64[1] >= 0.0)
  {
    v3 = (float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(*a2, *a1), *(int8x16_t *)a2, *(int8x16_t *)a1);
    result.f64[1] = a1[1].f64[1];
    v4 = vaddq_f64(*a1, result);
    v5 = vaddq_f64(*a2, a2[1]);
    result = vsubq_f64((float64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v4, v5), (int8x16_t)v5, (int8x16_t)v4), v3);
    *a1 = v3;
    a1[1] = result;
  }
  return result;
}

BOOL LiPolygonInstance::makeNode(LiPolygonInstance *this, const LiClipSet *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  char *v7;
  uint64_t v8;
  float64x2_t *v9;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  float64x2_t *v25;
  uint64_t v26;
  float64x2_t *v27;
  uint64_t j;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t k;
  uint64_t m;
  _OWORD *f64;
  float64x2_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  double *v49;
  uint64_t nn;
  LiPolygonInstance *v51;
  uint64_t v52;
  char *v53;
  uint64_t i1;
  uint64_t v55;
  LiPolygonInstance *v56;
  uint64_t kk;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t mm;
  LiPolygonInstance *v62;
  uint64_t v63;
  char *v64;
  uint64_t n;
  uint64_t v66;
  LiPolygonInstance *v67;
  uint64_t ii;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t jj;
  uint64_t v73;
  uint64_t v74;
  double *v75;
  uint64_t i2;
  PCShared_base *Tail;
  BOOL v78;
  LiClipSet *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  LiImageSource *v83;
  HGNode *v84;
  HGNode *v85;
  uint64_t Crop;
  uint64_t v87;
  int64x2_t v88;
  float64x2_t v89;
  uint64_t v90;
  unint64_t i3;
  _OWORD *v92;
  __int128 v93;
  double v94;
  float64x2_t v95;
  int v97;
  int32x2_t *v98;
  __int32 v99;
  __int32 v100;
  char v101;
  int32x2_t v102;
  int64x2_t v103;
  __n128 v104;
  double *v106;
  LiClipSet *v107;
  double *v108;
  _OWORD v109[2];
  _OWORD v110[2];
  _BYTE v111[32];
  __int128 v112;
  HGNode *v113;
  PCSharedCount v114[2];
  float64x2_t v115;
  double v116;
  double v117;

  v107 = (LiPolygonInstance *)((char *)this + 264);
  LiClipSet::operator=((uint64_t)this + 264, (uint64_t)a2);
  v4 = *((_QWORD *)this + 181);
  *((_QWORD *)this + 39) = a2;
  *((_QWORD *)this + 40) = v4 + 256;
  v5 = *((_DWORD *)this + 402);
  v108 = (double *)((char *)this + 632);
  *((_QWORD *)this + 45) = (char *)this + 632;
  *((_QWORD *)this + 47) = v4 + 480;
  *((_QWORD *)this + 48) = (char *)this + 760;
  *((_QWORD *)this + 49) = v4 + 352;
  if (*((_DWORD *)this + 393))
    v6 = 2;
  else
    v6 = v5;
  v7 = (char *)this + 1176;
  *((_QWORD *)this + 42) = (char *)this + 1304;
  *((_QWORD *)this + 43) = (char *)this + 1176;
  v8 = operator new();
  v9 = (float64x2_t *)v8;
  *(_QWORD *)(v8 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 40) = 0x3FF0000000000000;
  *(_QWORD *)v8 = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_QWORD *)(v8 + 208) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 168) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v8 + 120) = _Q1;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 176) = 0u;
  *(_OWORD *)(v8 + 192) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  v15 = (double *)(v8 + 256);
  *(_QWORD *)(v8 + 336) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 296) = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 248) = _Q1;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 304) = 0u;
  *(_OWORD *)(v8 + 320) = 0u;
  *(_OWORD *)(v8 + 360) = 0u;
  *(_OWORD *)(v8 + 344) = 0u;
  v16 = (double *)(v8 + 384);
  *(_QWORD *)(v8 + 464) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 424) = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 376) = _Q1;
  *(_OWORD *)(v8 + 408) = 0u;
  *(_OWORD *)(v8 + 392) = 0u;
  *(_OWORD *)(v8 + 432) = 0u;
  *(_OWORD *)(v8 + 448) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(_OWORD *)(v8 + 472) = 0u;
  v17 = (double *)(v8 + 512);
  *(_QWORD *)(v8 + 592) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 552) = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 504) = _Q1;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 560) = 0u;
  *(_OWORD *)(v8 + 576) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 600) = 0u;
  v18 = (double *)(v8 + 640);
  *(_QWORD *)(v8 + 720) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 680) = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 632) = _Q1;
  *(_OWORD *)(v8 + 664) = 0u;
  *(_OWORD *)(v8 + 648) = 0u;
  *(_OWORD *)(v8 + 688) = 0u;
  *(_OWORD *)(v8 + 704) = 0u;
  *(_OWORD *)(v8 + 744) = 0u;
  *(_OWORD *)(v8 + 728) = 0u;
  v19 = (double *)(v8 + 768);
  *(_QWORD *)(v8 + 848) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 808) = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 760) = _Q1;
  *(_OWORD *)(v8 + 792) = 0u;
  *(_OWORD *)(v8 + 776) = 0u;
  *(_OWORD *)(v8 + 816) = 0u;
  *(_OWORD *)(v8 + 832) = 0u;
  *(_OWORD *)(v8 + 872) = 0u;
  *(_OWORD *)(v8 + 856) = 0u;
  *(_QWORD *)(v8 + 976) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 936) = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 888) = _Q1;
  *(_OWORD *)(v8 + 920) = 0u;
  *(_OWORD *)(v8 + 904) = 0u;
  *(_OWORD *)(v8 + 944) = 0u;
  *(_OWORD *)(v8 + 960) = 0u;
  *(_OWORD *)(v8 + 1000) = 0u;
  v106 = (double *)(v8 + 896);
  *(_OWORD *)(v8 + 984) = 0u;
  v20 = v8 + 1024;
  *(_QWORD *)(v8 + 1144) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 1104) = 0x3FF0000000000000;
  *(_QWORD *)(v8 + 1064) = 0x3FF0000000000000;
  *(_OWORD *)(v8 + 1016) = _Q1;
  *(_OWORD *)(v8 + 1048) = 0u;
  *(_OWORD *)(v8 + 1032) = 0u;
  *(_OWORD *)(v8 + 1088) = 0u;
  *(_OWORD *)(v8 + 1072) = 0u;
  *(_OWORD *)(v8 + 1128) = 0u;
  v21 = *((_QWORD *)this + 181) + 480;
  *(_OWORD *)(v8 + 1112) = 0u;
  if (v21 != v8)
  {
    v22 = 0;
    v23 = v8;
    do
    {
      for (i = 0; i != 32; i += 8)
        *(_QWORD *)(v23 + i) = *(_QWORD *)(v21 + i);
      ++v22;
      v23 += 32;
      v21 += 32;
    }
    while (v22 != 4);
  }
  PCMatrix44Tmpl<double>::rightMult(v8, v108);
  if (v6 == 3)
  {
    *((_QWORD *)this + 47) = v9 + 8;
    v25 = (float64x2_t *)*((_QWORD *)this + 49);
    if (v25 != &v9[8])
    {
      v26 = 0;
      v27 = v9 + 8;
      do
      {
        for (j = 0; j != 4; ++j)
          v27->f64[j] = v25->f64[j];
        ++v26;
        v27 += 2;
        v25 += 2;
      }
      while (v26 != 4);
    }
    PCMatrix44Tmpl<double>::rightMult((uint64_t)&v9[8], (double *)(*((_QWORD *)this + 181) + 480));
    v29 = *((_QWORD *)this + 49);
    if (v29 != v20)
    {
      v30 = 0;
      v31 = v20;
      do
      {
        for (k = 0; k != 32; k += 8)
          *(_QWORD *)(v31 + k) = *(_QWORD *)(v29 + k);
        ++v30;
        v31 += 32;
        v29 += 32;
      }
      while (v30 != 4);
    }
    PCMatrix44Tmpl<double>::rightMult(v20, v9->f64);
    for (m = 0; m != 8; m += 2)
    {
      f64 = (_OWORD *)v9[m].f64;
      v35 = v9[m + 65];
      *f64 = v9[m + 64];
      f64[1] = v35;
    }
  }
  v36 = PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v15, v9->f64, 0.00000001);
  if (v6 == 1 && !v36)
  {
    if (!*(_BYTE *)(*((_QWORD *)this + 179) + 699))
      goto LABEL_30;
    v114[0].var0 = 0;
    v114[1].var0 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v115 = _Q0;
    v45 = *((_QWORD *)this + 182);
    if (!v45)
      throw_PCNullPointerException(1);
    if (((*(uint64_t (**)(uint64_t, char *, PCSharedCount *))(*(_QWORD *)v45 + 24))(v45, (char *)this + 168, v114) & 1) == 0)
    {
LABEL_30:
      v46 = 0;
      goto LABEL_128;
    }
    LiImagePolygon::set((uint64_t)this, (double *)v114, 1);
    LiImagePolygon::clip((uint64_t **)this, v107);
    transform(v9->f64, (uint64_t **)this);
    if (LiPolygon::isFinite(this))
    {
      LiPolygonInstance::sliverify(this);
      v6 = 2;
    }
    else
    {
      v6 = 1;
    }
  }
  if (v6 == 3)
  {
    PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v17, *((double **)this + 49), 0.0);
    v62 = (LiPolygonInstance *)(*((_QWORD *)this + 181) + 736);
    if (v62 != (LiPolygonInstance *)((char *)this + 888))
    {
      v63 = 0;
      v64 = (char *)this + 888;
      do
      {
        for (n = 0; n != 32; n += 8)
          *(_QWORD *)&v64[n] = *(_QWORD *)((char *)v62 + n);
        ++v63;
        v64 += 32;
        v62 = (LiPolygonInstance *)((char *)v62 + 32);
      }
      while (v63 != 4);
    }
    PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 888, v17);
    v66 = 0;
    *((_QWORD *)this + 41) = (char *)this + 888;
    v67 = this;
    do
    {
      for (ii = 0; ii != 32; ii += 16)
        *(_OWORD *)((char *)v67 + ii + 1016) = *(_OWORD *)((char *)v67 + ii + 632);
      ++v66;
      v67 = (LiPolygonInstance *)((char *)v67 + 32);
    }
    while (v66 != 4);
    PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 1016, v15);
    PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 1016, v17);
    *((_QWORD *)this + 44) = (char *)this + 1016;
    v69 = (char *)*((_QWORD *)this + 49);
    if (v69 != v7)
    {
      v70 = 0;
      v71 = (char *)this + 1176;
      do
      {
        for (jj = 0; jj != 32; jj += 8)
          *(_QWORD *)&v71[jj] = *(_QWORD *)&v69[jj];
        ++v70;
        v71 += 32;
        v69 += 32;
      }
      while (v70 != 4);
    }
    PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 1176, (double *)(*((_QWORD *)this + 181) + 480));
    goto LABEL_71;
  }
  if (v6 == 2)
  {
    v55 = 0;
    *((_QWORD *)this + 41) = *((_QWORD *)this + 181) + 736;
    v56 = this;
    do
    {
      for (kk = 0; kk != 32; kk += 16)
        *(_OWORD *)((char *)v56 + kk + 1016) = *(_OWORD *)((char *)v56 + kk + 632);
      ++v55;
      v56 = (LiPolygonInstance *)((char *)v56 + 32);
    }
    while (v55 != 4);
    PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 1016, v15);
    *((_QWORD *)this + 44) = (char *)this + 1016;
    v58 = *((_QWORD *)this + 181) + 480;
    if ((char *)v58 != v7)
    {
      v59 = 0;
      v60 = (char *)this + 1176;
      do
      {
        for (mm = 0; mm != 32; mm += 8)
          *(_QWORD *)&v60[mm] = *(_QWORD *)(v58 + mm);
        ++v59;
        v60 += 32;
        v58 += 32;
      }
      while (v59 != 4);
    }
LABEL_71:
    PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 1176, *((double **)this + 45));
    LiClipSet::operator=((uint64_t)v107, *((_QWORD *)this + 181) + 304);
    goto LABEL_73;
  }
  if (v6 != 1)
  {
    PCPrint("File %s, line %d should not have been reached:\n\t", v37, v38, v39, v40, v41, v42, v43, (char)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiPolygonInstance.cpp");
    pcAbortImpl();
  }
  v47 = *((_QWORD *)this + 181) + 608;
  if ((double *)v47 != v16)
  {
    v48 = 0;
    v49 = v16;
    do
    {
      for (nn = 0; nn != 4; ++nn)
        v49[nn] = *(double *)(v47 + nn * 8);
      ++v48;
      v49 += 4;
      v47 += 32;
    }
    while (v48 != 4);
  }
  PCMatrix44Tmpl<double>::rightMult((uint64_t)v16, v108);
  v51 = (LiPolygonInstance *)(*((_QWORD *)this + 181) + 880);
  if (v51 != (LiPolygonInstance *)((char *)this + 888))
  {
    v52 = 0;
    v53 = (char *)this + 888;
    do
    {
      for (i1 = 0; i1 != 32; i1 += 8)
        *(_QWORD *)&v53[i1] = *(_QWORD *)((char *)v51 + i1);
      ++v52;
      v53 += 32;
      v51 = (LiPolygonInstance *)((char *)v51 + 32);
    }
    while (v52 != 4);
  }
  PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 888, v16);
  *((_QWORD *)this + 41) = (char *)this + 888;
  *((_QWORD *)this + 44) = *((_QWORD *)this + 45);
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)this + 1304, v9->f64, 0.0);
LABEL_73:
  if (*((_DWORD *)this + 402) == 2)
    LiClipSet::add(v107, (const LiClipSet *)(*((_QWORD *)this + 181) + 304));
  v73 = *((_QWORD *)this + 181) + 736;
  if ((double *)v73 != v18)
  {
    v74 = 0;
    v75 = v18;
    do
    {
      for (i2 = 0; i2 != 4; ++i2)
        v75[i2] = *(double *)(v73 + i2 * 8);
      ++v74;
      v75 += 4;
      v73 += 32;
    }
    while (v74 != 4);
  }
  PCMatrix44Tmpl<double>::rightMult((uint64_t)v18, v9->f64);
  *((_QWORD *)this + 200) = 0;
  *((_OWORD *)this + 99) = 0u;
  PCMatrix44Tmpl<double>::transform<double>(v18, (double *)this + 198, (double *)this + 198);
  if (*((_DWORD *)this + 393))
  {
    LiImageFilterChain::setInput((PCShared_base **)this + 193, *((LiImageSource **)this + 182));
    Tail = (PCShared_base *)LiImageFilterChain::getTail((LiPolygonInstance *)((char *)this + 1544));
    PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)this + 182, Tail);
  }
  *((_QWORD *)this + 188) = *((_QWORD *)this + 182);
  PCSharedCount::PCSharedCount(v114, (const PCSharedCount *)this + 183);
  PCSharedCount::operator=((uint64_t *)this + 189, (uint64_t *)v114);
  PCSharedCount::~PCSharedCount(v114);
  v78 = *((_DWORD *)this + 402) == 1 && *((_DWORD *)this + 393) == 0;
  v79 = 0;
  v80 = *((_QWORD *)this + 181);
  if (*(_DWORD *)(v80 + 268) && !v78)
  {
    v79 = (LiClipSet *)operator new();
    LiClipSet::LiClipSet(v79, *((const LiClipSet **)this + 39));
    *((_QWORD *)this + 39) = v79;
    LiClipSet::LiClipSet((LiClipSet *)v114, (const LiClipSet *)(*((_QWORD *)this + 181) + 256));
    transform((PCArray_base *)v108, (uint64_t)v114);
    LiClipSet::add(v79, (const LiClipSet *)v114);
    LiClipSet::~LiClipSet((LiClipSet *)v114);
    v80 = *((_QWORD *)this + 181);
  }
  *(_OWORD *)((char *)this + 228) = *(_OWORD *)(v80 + 864);
  if ((*((_DWORD *)this + 59) & 0x80000000) != 0)
    LOBYTE(v81) = 1;
  else
    v81 = *((_DWORD *)this + 60) >> 31;
  *((_BYTE *)this + 224) = v81 ^ 1;
  v82 = *((_QWORD *)this + 188);
  if (!v82)
    throw_PCNullPointerException(1);
  v83 = (LiImageSource *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v82 + 48))(v82, v80 + 24);
  LiAgent::getHelium((LiPolygonInstance *)((char *)this + 168), v83, &v113);
  v84 = (HGNode *)*((_QWORD *)this + 20);
  v85 = v113;
  if (v84 != v113)
  {
    if (v84)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v84 + 24))(*((_QWORD *)this + 20));
      v85 = v113;
    }
    *((_QWORD *)this + 20) = v85;
    if (!v85)
      goto LABEL_105;
    (*(void (**)(HGNode *))(*(_QWORD *)v85 + 16))(v85);
    v84 = (HGNode *)*((_QWORD *)this + 20);
  }
  if (!v84)
  {
LABEL_105:
    *((_QWORD *)this + 42) = 0;
    *((_QWORD *)this + 39) = 0;
    if (v79)
    {
      LiClipSet::~LiClipSet(v79);
      MEMORY[0x1B5E29170]();
    }
    v46 = 0;
    goto LABEL_126;
  }
  Crop = LiAgent::getCrop((LiPolygonInstance *)((char *)this + 168));
  if (((*(_QWORD *)(Crop + 72) - *(_QWORD *)(Crop + 64)) & 0x1FFFFFFFE0) == 0)
  {
    *((_BYTE *)this + 1440) = 0;
    LiAgent::getExtent((LiPolygonInstance *)((char *)this + 168), (LiPolygon *)v114);
    LiImagePolygon::set((uint64_t)this, (uint64_t)v114, 1);
    LiPolygon::~LiPolygon((LiPolygon *)v114);
    if (LiPolygon::isInfinite(this) && *((_BYTE *)this + 224))
    {
      v87 = *(_QWORD *)((char *)this + 228);
      v88.i64[0] = (int)v87;
      v88.i64[1] = SHIDWORD(v87);
      v89 = vcvtq_f64_s64(v88);
      v90 = *(_QWORD *)((char *)this + 236);
      v88.i64[0] = (int)v90;
      v88.i64[1] = SHIDWORD(v90);
      *(float64x2_t *)&v114[0].var0 = v89;
      v115 = vcvtq_f64_s64(v88);
      LiImagePolygon::set((uint64_t)this, (double *)v114, 1);
    }
    if (!LiPolygon::isEmpty(this))
      goto LABEL_108;
    goto LABEL_105;
  }
  LiImagePolygon::operator=((uint64_t)this, Crop);
LABEL_108:
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 39) = 0;
  if (v79)
  {
    LiClipSet::~LiClipSet(v79);
    MEMORY[0x1B5E29170]();
  }
  if (*(_DWORD *)(*((_QWORD *)this + 181) + 268) && *((_DWORD *)this + 402) == 1)
  {
    LiAgent::getInversePixelTransform((LiPolygonInstance *)((char *)this + 168), 0.0, (uint64_t)v114);
    for (i3 = 0; i3 != 16; i3 += 4)
    {
      v92 = (_OWORD *)v9[i3 / 2 + 48].f64;
      v93 = *(_OWORD *)&v114[i3 + 2].var0;
      *v92 = *(_OWORD *)&v114[i3].var0;
      v92[1] = v93;
    }
    LiAgent::getImageToObjectTransform((double **)this + 21, (uint64_t)v114);
    PCMatrix44Tmpl<double>::leftMult((uint64_t)v19, (double *)v114);
    PCMatrix44Tmpl<double>::leftMult((uint64_t)v19, v18);
    transform<LiPolygon::PosFacet,LiPolygon::PosFacet,double>(v19, (uint64_t)this + 88, (uint64_t **)this + 11);
    LiPolygonInstance::clipToRendererPlanes(this);
  }
  if (((*(_QWORD *)(*((_QWORD *)this + 11) + 8) - **((_QWORD **)this + 11)) & 0x1FFFFFFFE0) != 0)
    LiPolygonInstance::sliverify(this);
  v94 = *((double *)this + 7);
  if (v9[45].f64[0] * v9[47].f64[1] >= 0.0 == v94 < 0.0)
  {
    *(float64x2_t *)((char *)this + 40) = vnegq_f64(*(float64x2_t *)((char *)this + 40));
    *((double *)this + 7) = -v94;
  }
  *(_OWORD *)&v111[16] = xmmword_1B304F270;
  v112 = xmmword_1B304F270;
  *(_OWORD *)v111 = xmmword_1B304F270;
  bounds<LiPolygon::PosFacet,double>((uint64_t **)this + 11, (uint64_t)v111);
  v95.f64[0] = *(float64_t *)v111;
  v95.f64[1] = *(float64_t *)&v111[24];
  __asm { FMOV            V1.2D, #0.5 }
  v110[0] = vmulq_f64(vaddq_f64(*(float64x2_t *)&v111[8], v95), _Q1);
  v110[1] = xmmword_1B304EEE0;
  PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)v106, (double *)(*((_QWORD *)this + 181) + 736), 0.0);
  memset(v109, 0, sizeof(v109));
  PCMatrix44Tmpl<double>::transform<double>(v106, (double *)v110, (double *)v109);
  PCMatrix44Tmpl<double>::jacobianPost(v9, (double *)v109, (uint64_t)v114);
  *((_BYTE *)this + 120) = (*(double *)&v114[0].var0 * v117 - v116 * *(double *)&v114[1].var0 > 0.0) ^ (*(unsigned __int8 *)(*((_QWORD *)this + 181) + 248) != *((unsigned __int8 *)this + 1528));
  v97 = LiSceneObject::blendMode(*((LiSceneObject **)this + 179));
  if (!LiCompositor::isStencil(v97))
  {
    v98 = (int32x2_t *)*((_QWORD *)this + 181);
    v99 = v98[109].i32[0];
    if ((v99 & 0x80000000) == 0)
    {
      v100 = v98[109].i32[1];
      if ((v100 & 0x80000000) == 0)
      {
        v101 = *((_BYTE *)this + 1440);
        v102 = vadd_s32(v98[108], (int32x2_t)0x100000001);
        v103.i64[0] = v102.i32[0];
        v103.i64[1] = v102.i32[1];
        v104 = (__n128)vcvtq_f64_s64(v103);
        *(__n128 *)&v114[0].var0 = v104;
        v104.n128_f64[0] = (double)(v99 + 4);
        v115.f64[0] = v104.n128_f64[0];
        v115.f64[1] = (double)(v100 + 4);
        LiPolygonInstance::crop((uint64_t)this, (float64x2_t *)v114, 0, v104);
        *((_BYTE *)this + 1440) = v101;
      }
    }
  }
  LODWORD(v114[0].var0) = 0;
  *((_BYTE *)this + 1440) |= contains<LiImagePolygon::EdgeFacet,int>((uint64_t **)this + 13, v114);
  v46 = (int)((*(_QWORD *)(*((_QWORD *)this + 11) + 8) - **((_QWORD **)this + 11)) >> 5) > 2
     || *((_BYTE *)this + 96) != 0;
LABEL_126:
  if (v113)
    (*(void (**)(HGNode *))(*(_QWORD *)v113 + 24))(v113);
LABEL_128:
  MEMORY[0x1B5E29170](v9, 0x1000C40F99D3063);
  return v46;
}

void sub_1B2D3F618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,PCSharedCount a33)
{
  uint64_t v33;

  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 24))(a32);
  MEMORY[0x1B5E29170](v33, 0x1000C40F99D3063);
  _Unwind_Resume(a1);
}

void LiPolygonInstance::sliverify(LiPolygonInstance *this)
{
  LiEmptyImage *v2;
  double v3;
  uint64_t v4;
  double v5[2];
  double v6[2];

  v6[0] = 0.0;
  v6[1] = 0.0;
  v5[0] = 0.0;
  v5[1] = 0.0;
  v3 = 0.0;
  v4 = 0;
  liPolygonDimensions((uint64_t)this, v6, v5, (double *)&v4, &v3);
  if (v3 < 0.1)
  {
    std::vector<LiPolygon::PosEdge>::resize(*((uint64_t **)this + 11), 0);
    v2 = (LiEmptyImage *)operator new();
    LiEmptyImage::LiEmptyImage(v2);
    PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)this + 182, v2);
  }
}

void sub_1B2D3F7A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10A1C40EE17FB6ALL);
  _Unwind_Resume(a1);
}

void LiPolygonInstance::clipToRendererPlanes(LiPolygonInstance *this)
{
  uint64_t v1;
  uint64_t v2;
  PCArray_base *v4;
  uint64_t v5;
  uint64_t v6;
  float64x2_t *v7;
  double v8;
  float64x2_t v9;
  float64x2_t v10;
  _OWORD v11[3];
  double v12[16];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v1 = *((_QWORD *)this + 181);
  v2 = *(unsigned int *)(v1 + 268);
  if ((_DWORD)v2)
  {
    v22 = 0x3FF0000000000000;
    v19 = 0x3FF0000000000000;
    v16 = 0x3FF0000000000000;
    v13 = 0x3FF0000000000000;
    v14 = 0u;
    v15 = 0u;
    v20 = 0u;
    v21 = 0u;
    v17 = 0u;
    v18 = 0u;
    PCMatrix44Tmpl<double>::operator*(v1 + 1008, (__int128 *)((char *)this + 632), (uint64_t)v12);
    if (PCMatrix44Tmpl<double>::planarInverseZ((uint64_t)&v13, v12, 0.0))
    {
      v4 = (PCArray_base *)PCMatrix44Tmpl<double>::operator*((uint64_t)this + 632, (__int128 *)&v13, (uint64_t)v12);
      memset(v11, 0, sizeof(v11));
      if ((int)v2 >= 1)
      {
        v5 = 0;
        v6 = 16;
        do
        {
          if (v5 >= *(int *)(v1 + 268))
            PCArray_base::badIndex(v4);
          v7 = (float64x2_t *)(*(_QWORD *)(v1 + 272) + v6);
          v9 = v7[-1];
          v10 = *v7;
          PCMatrix44Tmpl<double>::transform_row<double>(v12, v9.f64, v9.f64);
          v4 = (PCArray_base *)PCPlaneType(v9.f64);
          if ((_DWORD)v4)
          {
            if ((_DWORD)v4 == 1)
            {
              LiPolygon::setEmpty((uint64_t **)this);
              return;
            }
            v8 = vaddvq_f64(vmulq_f64(v9, v9)) + v10.f64[0] * v10.f64[0];
            if (v8 <= -1.0e-24 || v8 >= 1.0e-24)
            {
              *(float64x2_t *)((char *)&v11[1] + 8) = v9;
              *((_QWORD *)&v11[2] + 1) = *(_QWORD *)&v10.f64[0];
              v11[0] = vdivq_f64(vmulq_n_f64(v9, -v10.f64[1]), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8, 0));
              *(double *)&v11[1] = -(v10.f64[1] * v10.f64[0]) / v8;
            }
            if (v5 >= *(int *)(v1 + 292))
              PCArray_base::badIndex(v4);
            LiPolygonInstance::crop((uint64_t)this, (double *)v11, *(_DWORD *)(*(_QWORD *)(v1 + 296) + 4 * v5) == 0);
          }
          ++v5;
          v6 += 32;
        }
        while (v2 != v5);
      }
    }
  }
}

uint64_t **bounds<LiPolygon::PosFacet,double>(uint64_t **result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v15;

  v2 = **result;
  v3 = (*result)[1] - v2;
  *(_OWORD *)(a2 + 16) = xmmword_1B304F270;
  *(_OWORD *)(a2 + 32) = xmmword_1B304F270;
  *(_OWORD *)a2 = xmmword_1B304F270;
  if ((int)(v3 >> 5) >= 1)
  {
    v4 = (v3 >> 5);
    v5 = (double *)(v2 + 16);
    v6 = -1.0;
    v7 = 1.0;
    v8 = 1.0;
    v9 = -1.0;
    v10 = 1.0;
    v11 = -1.0;
    do
    {
      v12 = *(v5 - 2);
      if (v7 <= v6 && v8 <= v9 && v10 <= v11)
      {
        if (v7 >= v12)
          v7 = *(v5 - 2);
        if (v6 > v12)
          v12 = v6;
        v15 = *(v5 - 1);
        if (v8 >= v15)
          v8 = *(v5 - 1);
        if (v9 <= v15)
          v9 = *(v5 - 1);
        if (v10 >= *v5)
          v10 = *v5;
        if (v11 <= *v5)
          v11 = *v5;
      }
      else
      {
        v9 = *(v5 - 1);
        v11 = *v5;
        v7 = *(v5 - 2);
        v8 = v9;
        v10 = *v5;
      }
      *(double *)a2 = v7;
      *(double *)(a2 + 8) = v12;
      *(double *)(a2 + 16) = v8;
      *(double *)(a2 + 24) = v9;
      v5 += 4;
      v6 = v12;
      *(double *)(a2 + 32) = v10;
      *(double *)(a2 + 40) = v11;
      --v4;
    }
    while (v4);
  }
  return result;
}

BOOL contains<LiImagePolygon::EdgeFacet,int>(uint64_t **a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v2 = **a1;
  v3 = (*a1)[1] - v2;
  if ((int)((unint64_t)v3 >> 5) < 1)
    return 0;
  if (*(_DWORD *)(v2 + 24) == *a2)
    return 1;
  v5 = (int)(v3 >> 5);
  v6 = ((unint64_t)v3 >> 5);
  v7 = (int *)(v2 + 56);
  v8 = 1;
  do
  {
    v9 = v8;
    if (v6 == v8)
      break;
    v10 = *v7;
    v7 += 8;
    ++v8;
  }
  while (v10 != *a2);
  return v9 < v5;
}

PCShared_base **LiPolygonInstance::setColor(PCShared_base **this, LiImageSource *a2)
{
  PCShared_base **result;
  PCShared_base *v5;

  result = PCPtr<LiImageSource>::operator=<LiImageSource>(this + 182, (PCShared_base *)a2);
  v5 = this[184];
  if (v5)
    return PCPtr<LiImageSource>::operator=<LiImageSource>((PCShared_base **)v5 + 2, (PCShared_base *)a2);
  return result;
}

uint64_t LiPolygonInstance::getHeliumNode@<X0>(LiPolygonInstance *this@<X0>, _QWORD *a2@<X8>)
{
  LiPolygonInstance *v3;
  const void *v4;
  uint64_t result;

  do
  {
    v3 = this;
    v4 = (const void *)*((_QWORD *)this + 16);
    if (!v4)
      break;
  }
  while (this);
  result = *((_QWORD *)v3 + 20);
  *a2 = result;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

void LiPolygonInstance::draw(LiPolygonInstance *this, LiBlender *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  LiPolygonInstance *v7;
  LiPolygonInstance *v8;
  const void *v9;
  uint64_t v10;
  int v11;
  _BOOL4 isBounded;
  _BYTE *v13;
  char v14;
  PC_Sp_counted_base *var0;
  PCSharedCount v16;
  uint64_t v17;
  PCSharedCount v18;
  PCSharedCount v19;

  v4 = *((double *)this + 190);
  v5 = LiSceneObject::blendMode(*((LiSceneObject **)this + 179));
  LiSceneObject::blendOptions(*((const PCSharedCount **)this + 179), &v18);
  if (v4 > 0.0 || LiCompositor::isStencil(v5))
  {
    v6 = LiSceneObject::preserveOpacity(*((LiSceneObject **)this + 179));
    LiPolygonInstance::getHeliumNode(this, &v17);
    if (v17)
    {
      if (!LiAgent::rasterizeEdges((LiPolygonInstance *)((char *)this + 168)))
        goto LABEL_10;
      v7 = this;
      do
      {
        v8 = v7;
        v9 = (const void *)*((_QWORD *)v7 + 16);
        if (!v9)
          break;
      }
      while (v7);
      v10 = *((_QWORD *)v8 + 188);
      if (v10)
        v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 40))(v10, 1) ^ 1;
      else
LABEL_10:
        v11 = 0;
      isBounded = LiPolygon::isBounded(this);
      if (((!isBounded | v11) & 1) == 0)
        isBounded = *((_BYTE *)this + 1440) != 0;
      if (isBounded)
      {
        v13 = (_BYTE *)*((_QWORD *)this + 179);
        if (v13[698])
        {
          v14 = ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v13 + 272))(v13) & 1) != 0
             || *((_BYTE *)this + 1440) != 0;
          LiBlender::crop((uint64_t)a2, (uint64_t)this, v14);
        }
      }
      var0 = v18.var0;
      PCSharedCount::PCSharedCount(&v16, &v19);
      (*(void (**)(LiBlender *, uint64_t *, uint64_t, _QWORD, uint64_t, PC_Sp_counted_base **, double))(*(_QWORD *)a2 + 16))(a2, &v17, v5, 0, v6, &var0, v4);
      PCSharedCount::~PCSharedCount(&v16);
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    }
  }
  PCSharedCount::~PCSharedCount(&v19);
}

void sub_1B2D3FD4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  PCSharedCount::~PCSharedCount((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'LiPolygonInstance::draw(LiPolygonInstance *this, LiBlender *a2)
{
  LiPolygonInstance::draw((LiPolygonInstance *)((char *)this - 112), a2);
}

uint64_t `non-virtual thunk to'LiPolygonInstance::getBounds(LiPolygonInstance *this)
{
  return (uint64_t)this - 112;
}

uint64_t LiPolygonInstance::isPlanar(LiPolygonInstance *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'LiPolygonInstance::isPlanar(LiPolygonInstance *this)
{
  return 1;
}

uint64_t LiPolygonInstance::getSceneObject(LiPolygonInstance *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 192);
  if (!result)
    return *((_QWORD *)this + 179);
  return result;
}

uint64_t `non-virtual thunk to'LiPolygonInstance::getSceneObject(LiPolygonInstance *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 178);
  if (!result)
    return *((_QWORD *)this + 165);
  return result;
}

void LiPolygonInstance::setPlane(uint64_t a1, float64x2_t *a2)
{
  double v4[3];

  PCPlane<double>::setImplicit(a1 + 16, a2);
  v4[0] = 0.0;
  v4[1] = 0.0;
  v4[2] = 1.0;
  LiPolygon::projectToPlane(a1, a2, v4);
}

void `non-virtual thunk to'LiPolygonInstance::setPlane(uint64_t a1, float64x2_t *a2)
{
  uint64_t v3;
  double v4[3];

  v3 = a1 - 112;
  PCPlane<double>::setImplicit(a1 - 96, a2);
  v4[0] = 0.0;
  v4[1] = 0.0;
  v4[2] = 1.0;
  LiPolygon::projectToPlane(v3, a2, v4);
}

PCArray_base *LiPolygonInstance::intersect(PCArray_base *this, LiIntersection *a2)
{
  uint64_t v2;
  PCArray_base *v4;
  uint64_t i;

  v2 = *((unsigned int *)a2 + 5);
  if ((int)v2 >= 1)
  {
    v4 = this;
    for (i = 0; i != v2; ++i)
    {
      if (i >= *((int *)a2 + 5))
        PCArray_base::badIndex(this);
      this = (PCArray_base *)(*(uint64_t (**)(PCArray_base *, LiIntersection *, _QWORD))(*(_QWORD *)v4 + 104))(v4, a2, *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * i));
    }
  }
  return this;
}

PCArray_base *`non-virtual thunk to'LiPolygonInstance::intersect(LiPolygonInstance *this, LiIntersection *a2)
{
  return LiPolygonInstance::intersect((LiPolygonInstance *)((char *)this - 112), a2);
}

uint64_t LiPolygonInstance::intersect(LiPolygonInstance *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t Piece;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  LiSceneObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  LiSceneObject *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;

  Piece = LiPolygonInstance::makePiece(a1);
  v7 = Piece + 112;
  if (!Piece)
    v7 = 0;
  a3[1] = v7;
  copy<LiChannelT<PCVector3<double>>,LiPolygon::PosFacet>(a3 + 2, (uint64_t **)(Piece + 88));
  v8 = a3[9] - a3[8];
  std::vector<LiPolygon::PosEdge>::resize(*(uint64_t **)(Piece + 104), (int)(v8 >> 2));
  v9 = (uint64_t *)*((_QWORD *)a1 + 13);
  v11 = *v9;
  v10 = v9[1];
  result = (*(uint64_t (**)(LiPolygonInstance *))(*(_QWORD *)a1 + 144))(a1);
  if ((int)((unint64_t)v8 >> 2) >= 1)
  {
    v13 = (LiSceneObject *)result;
    v14 = 0;
    v24 = (unint64_t)(v10 - v11) >> 5;
    v15 = ((unint64_t)v8 >> 2);
    v16 = 24;
    do
    {
      v17 = *(_DWORD *)(a3[8] + 4 * v14);
      if (v17 == 1)
      {
        result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
        v17 = 1;
        if (v13)
        {
          v20 = (LiSceneObject *)result;
          if (result)
          {
            v21 = LiSceneObject::blendMode(v13);
            result = LiSceneObject::blendMode(v20);
            if (v21 == (_DWORD)result)
            {
              result = PCBlend::isAbelian(v21);
              if ((_DWORD)result)
                v17 = 2;
              else
                v17 = 1;
            }
            else
            {
              v17 = 1;
            }
          }
        }
      }
      else if (!v17)
      {
        v18 = a3[5];
        v19 = *(_DWORD *)(v18 + 4 * v14);
        if ((v19 & 0x80000000) != 0
          && (v15 - 1 != v14 ? (v22 = v14 + 1) : (v22 = 0),
              (v23 = *(_DWORD *)(v18 + 4 * v22), v23 < 0)
           || (v19 = ((int)v24 - 1 + v23) % (int)v24, (v19 & 0x80000000) != 0)))
        {
          v17 = 0;
        }
        else
        {
          v17 = *(_DWORD *)(**((_QWORD **)a1 + 13) + 32 * v19 + 24);
        }
      }
      *(_DWORD *)(**(_QWORD **)(Piece + 104) + v16) = v17;
      ++v14;
      v16 += 32;
    }
    while (v15 != v14);
  }
  return result;
}

uint64_t LiPolygonInstance::getFilterIntersections(LiPolygonInstance *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 179) + 700);
}

uint64_t `non-virtual thunk to'LiPolygonInstance::getFilterIntersections(LiPolygonInstance *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 165) + 700);
}

uint64_t LiPolygonInstance::getBlendMode(LiSceneObject **this)
{
  if (*((double *)this + 190) <= 0.0)
    return 48;
  else
    return LiSceneObject::blendMode(this[179]);
}

uint64_t `non-virtual thunk to'LiPolygonInstance::getBlendMode(LiSceneObject **this)
{
  if (*((double *)this + 176) <= 0.0)
    return 48;
  else
    return LiSceneObject::blendMode(this[165]);
}

uint64_t LiPolygonInstance::defocus()
{
  return 1;
}

uint64_t `non-virtual thunk to'LiPolygonInstance::defocus()
{
  return 1;
}

uint64_t LiPolygonInstance::name@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 1432) + 512);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 - 12);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

double LiPolygonInstance::getPosition@<D0>(LiPolygonInstance *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_OWORD *)a2 = *((_OWORD *)this + 99);
  result = *((double *)this + 200);
  *(double *)(a2 + 16) = result;
  return result;
}

uint64_t `non-virtual thunk to'LiPolygonInstance::name@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 1320) + 512);
  *a2 = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 - 12);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  return this;
}

void DepthFilterProgram::DepthFilterProgram(DepthFilterProgram *this)
{
  _QWORD *v2;
  unsigned __int8 v3;

  ProGL::Program::Program(this);
  *v2 = &unk_1E65716F0;
  ProGL::UniformSampler<35678u>::UniformSampler((ProGL::Private::VariableBase *)(v2 + 28), this, "inputTex");
  ProGL::Uniform<int>::Uniform((DepthFilterProgram *)((char *)this + 280), this, "numSamples");
  ProGL::UniformArray<PCVector2<float>,16ul>::UniformArray((uint64_t)this + 336, this, "offsets");
  if ((v3 & 1) == 0)
  {
    {
      std::string::basic_string[abi:ne180100]<0>(downsampleDepthFilter(void)::result, "void main() { float z = 1.0; float depth; for (int i=0; i < numSamples; i++) { depth = texture2D(inputTex, gl_Te"
        "xCoord[0].st + offsets[i]).r; if (depth < z) z = depth; depth = texture2D(inputTex, gl_TexCoord[0].st - offsets["
        "i]).r; if (depth < z) z = depth; } gl_FragColor = vec4( z); }");
      __cxa_atexit(MEMORY[0x1E0DE44D0], downsampleDepthFilter(void)::result, &dword_1B2737000);
    }
  }
  ProGL::Program::setFragmentSource();
}

void sub_1B2D40294(_Unwind_Exception *a1)
{
  ProGL::Program *v1;
  void **v2;
  void **v3;
  void **v4;

  ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(v4);
  ProGL::Uniform<int>::~Uniform(v3);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program(v1);
  _Unwind_Resume(a1);
}

void LiSSAASolidRenderer::LiSSAASolidRenderer(LiSSAASolidRenderer *this)
{
  uint64_t v1;

  LiSolidRenderer::LiSolidRenderer(this);
  *(_QWORD *)v1 = off_1E6571720;
  *(_DWORD *)(v1 + 872) = 0x40000000;
  *(_QWORD *)(v1 + 884) = 0;
  *(_QWORD *)(v1 + 892) = 0;
  *(_QWORD *)(v1 + 876) = 0;
  *(_DWORD *)(v1 + 900) = 0;
}

void LiSSAASolidRenderer::~LiSSAASolidRenderer(LiSSAASolidRenderer *this)
{
  void **v2;

  *(_QWORD *)this = off_1E6571720;
  v2 = (void **)((char *)this + 880);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  LiSolidRenderer::~LiSolidRenderer(this);
}

{
  void **v2;

  *(_QWORD *)this = off_1E6571720;
  v2 = (void **)((char *)this + 880);
  std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__destroy_vector::operator()[abi:ne180100](&v2);
  LiSolidRenderer::~LiSolidRenderer(this);
  MEMORY[0x1B5E29170]();
}

void LiSSAASolidRenderer::filterDepthTexture(LiSSAASolidRenderer *this@<X0>, GLuint a2@<W1>, GLuint a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, unsigned int a6@<W5>, unsigned int a7@<W6>, PCWorkingColorVector *a8@<X8>)
{
  GLuint Name;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unint64_t *v19;
  unint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  std::__shared_weak_count *v28;
  unint64_t *p_shared_owners;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  float v34;
  uint64_t v35;
  _BYTE v36[56];
  os_unfair_lock_s *v37;
  std::__shared_weak_count *v38;
  int v39;
  _BYTE v40[40];

  ProGL::GL::GL((ProGL::GL *)v40);
  glBindFramebuffer(0x8D40u, a2);
  LiSolidUtils::createRedTexture(a8);
  Name = ProGL::TextureHandle::getName((HGGLBlendingInfo **)a8);
  glFramebufferTexture2D(0x8D40u, 0x8CE0u, 0xDE1u, Name, 0);
  glViewport(0, 0, a6, a7);
  glClear(0x4100u);
  glActiveTexture(0x84C0u);
  glBindTexture(0xDE1u, a3);
  glEnable(0xDE1u);
  glTexParameterf(0xDE1u, 0x2800u, 9729.0);
  glTexParameterf(0xDE1u, 0x2801u, 9729.0);
  glTexParameteri(0xDE1u, 0x2802u, 33071);
  glTexParameteri(0xDE1u, 0x2803u, 33071);
  v39 = (int)*((float *)this + 218);
  {
    ProGL::Init::Init((ProGL::Init *)&getDepthFilterProgramHandle(void)::init);
    __cxa_atexit((void (*)(void *))ProGL::Init::~Init, &getDepthFilterProgramHandle(void)::init, &dword_1B2737000);
  }
  {
    ProGL::makeProgramHandle<DepthFilterProgram>(&getDepthFilterProgramHandle(void)::result);
    __cxa_atexit((void (*)(void *))ProGL::ContextHandle::~ContextHandle, &getDepthFilterProgramHandle(void)::result, &dword_1B2737000);
  }
  v37 = (os_unfair_lock_s *)getDepthFilterProgramHandle(void)::result;
  v38 = (std::__shared_weak_count *)unk_1EF076100;
  if (unk_1EF076100)
  {
    v19 = (unint64_t *)(unk_1EF076100 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  ProGL::UseProgramSentry::UseProgramSentry((ProGL::UseProgramSentry *)v36, (ProGL::GL *)v40, (const ProGL::ProgramHandle *)&v37);
  v21 = ProGL::ProgramHandle::getProgram<DepthFilterProgram>(&v37, (ProGL::GL *)v40);
  ProGL::UniformSampler<35678u>::set(v21 + 56, 0);
  ProGL::Uniform<int>::set<int>(v21 + 70, &v39);
  v24 = v39;
  if (v39 >= 1)
  {
    v25 = 0;
    v26 = (uint64_t)(v21 + 84);
    do
    {
      v27 = (float)(int)v25 + (float)(v24 - 1) * -0.5;
      if (a5 == a7)
      {
        *(float *)&v35 = v27 / (float)a4;
        HIDWORD(v35) = 0;
      }
      else
      {
        LODWORD(v35) = 0;
        *((float *)&v35 + 1) = v27 / (float)a5;
      }
      ProGL::UniformArray<PCVector2<float>,16ul>::setAtIndex<PCVector2<float>>(v26, v25++, &v35);
      v24 = v39;
    }
    while (v25 < v39);
  }
  v31 = 0;
  v32 = 0;
  v33 = (float)a6;
  v34 = (float)a7;
  LiSolidUtils::drawRect((uint64_t)v40, (uint64_t)&v32, 33984, &v31, v22, v23);
  ProGL::UseProgramSentry::~UseProgramSentry((ProGL::UseProgramSentry *)v36);
  v28 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  ProGL::GL::~GL((ProGL::GL *)v40);
}

void sub_1B2D40724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](v16);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void *ProGL::ProgramHandle::getProgram<DepthFilterProgram>(os_unfair_lock_s **a1, ProGL::GL *a2)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *lpsrc;
  std::__shared_weak_count *v8;

  ProGL::Private::ProgramHandleImpl::getProgram(*a1, a2, &lpsrc);
  if (lpsrc)
  else
    v2 = 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return v2;
}

void LiSSAASolidRenderer::depthBlur(LiSSAASolidRenderer *this, ProGL::GL *a2, const LiSolidDofInfo *a3, LiSolidDofInfo *a4, GLuint a5, unsigned int a6, unsigned int a7)
{
  float v14;
  GLuint RGBOperation;
  unsigned int v16;
  GLuint v17;
  GLuint Name;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned int v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  HGGLBlendingInfo *v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  _BYTE v37[52];
  GLint params;

  params = 0;
  ProGL::GL_Wrap::getIntegerv(a2, 0x8CA6u, &params);
  ProGL::Framebuffer::Framebuffer((ProGL::Framebuffer *)v37, a2);
  v14 = *((float *)this + 218);
  PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&v36);
  if (a5 && *((_BYTE *)this + 636))
  {
    RGBOperation = HGGLBlendingInfo::GetRGBOperation((HGGLBlendingInfo *)v37);
    v16 = (float)(v14 * (float)a7);
    LiSSAASolidRenderer::filterDepthTexture(this, RGBOperation, a5, (float)(v14 * (float)a6), v16, a6, v16, (PCWorkingColorVector *)&v34);
    v17 = HGGLBlendingInfo::GetRGBOperation((HGGLBlendingInfo *)v37);
    Name = ProGL::TextureHandle::getName(&v34);
    LiSSAASolidRenderer::filterDepthTexture(this, v17, Name, a6, v16, a6, a7, (PCWorkingColorVector *)&v33);
    v19 = v33;
    v33 = 0uLL;
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
    v36 = v19;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
    if (*((_QWORD *)&v33 + 1))
    {
      v24 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    v26 = v35;
    if (v35)
    {
      v27 = (unint64_t *)&v35->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
  }
  ProGL::Framebuffer::detach((ProGL::Framebuffer *)v37, 0x8D40u, 0x8CE0u);
  v29 = ProGL::TextureHandle::getName((HGGLBlendingInfo **)&v36);
  LiSolidRenderer::depthBlur(this, a2, a3, a4, v29, a6, a7);
  glBindFramebuffer(0x8D40u, params);
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)v37);
}

void sub_1B2D40A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ProGL::Framebuffer::~Framebuffer((ProGL::Framebuffer *)va1);
  _Unwind_Resume(a1);
}

float LiSSAASolidRenderer::getFullSizePaddedTileSize(LiSSAASolidRenderer *this, unsigned int *a2, unsigned int *a3, unsigned int a4, unsigned int a5)
{
  float v5;
  float result;

  v5 = *((float *)this + 218);
  *a2 = (float)(v5 * (float)a4);
  result = v5 * (float)a5;
  *a3 = result;
  return result;
}

void LiSSAASolidRenderer::setupTile(LiSSAASolidRenderer *this, int a2, int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8)
{
  LiSolidRenderer::setupTile(this, a2, a3, a4, a5, (float)(*((float *)this + 218) * (float)a6), (float)(*((float *)this + 218) * (float)a7), (float)(*((float *)this + 218) * (float)a8));
}

uint64_t LiSSAASolidRenderer::getTileSize(uint64_t this, unsigned int a2, unsigned int a3, unsigned int *a4, unsigned int *a5, double a6, double a7)
{
  float v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v7 = *(float *)(this + 872);
  v8 = (float)(v7 * (float)a2);
  v9 = (float)(v7 * (float)a3);
  if (v8 < 0x801)
  {
    v10 = vcvtps_u32_f32((float)v8 / v7);
  }
  else
  {
    LODWORD(a7) = *(_DWORD *)(this + 396);
    a7 = (2048.0 - ((double)*(unint64_t *)&a7 + (double)*(unint64_t *)&a7)) / v7;
    v10 = vcvtpd_u64_f64(a7);
  }
  *a4 = v10;
  if (v9 < 0x801)
  {
    v11 = vcvtps_u32_f32((float)v9 / v7);
  }
  else
  {
    LODWORD(a7) = *(_DWORD *)(this + 396);
    v11 = vcvtpd_u64_f64((2048.0 - ((double)*(unint64_t *)&a7 + (double)*(unint64_t *)&a7)) / v7);
  }
  *a5 = v11;
  return this;
}

uint64_t LiSSAASolidRenderer::getSuperSampledTilePadding(LiSSAASolidRenderer *this)
{
  return (float)(*((float *)this + 218) * (float)*((unsigned int *)this + 99));
}

_QWORD *LiSSAASolidRenderer::setRenderingParameter(_QWORD *result, int a2, int *a3)
{
  float v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  switch(a2)
  {
    case 0:
      *((_DWORD *)result + 109) = 0;
      return result;
    case 2:
      if (a3)
      {
        if (*a3 <= 2)
        {
          *((_DWORD *)result + 219) = *a3;
          return result;
        }
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Invalid filter sent to ", 23);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"setRenderingParameter", 21);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" in ", 4);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSSAASolidRenderer.cpp", 72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)":", 1);
        goto LABEL_19;
      }
      break;
    case 1:
      if (a3)
      {
        v3 = *(float *)a3;
        if (*(float *)a3 >= 1.0 && v3 <= 8.0)
        {
          *((float *)result + 218) = v3;
          return result;
        }
        v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Invalid scale sent to ", 22);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"setRenderingParameter", 21);
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" in ", 4);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSSAASolidRenderer.cpp", 72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)":", 1);
        goto LABEL_19;
      }
      break;
    default:
      return (_QWORD *)LiSolidRenderer::setRenderingParameter((uint64_t)result, a2, a3);
  }
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"Invalid object sent to ", 23);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"setRenderingParameter", 21);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" in ", 4);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/LithiumiOS/LiSSAASolidRenderer.cpp", 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)":", 1);
LABEL_19:
  v17 = (_QWORD *)std::ostream::operator<<();
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n", 1);
}

void DepthFilterProgram::~DepthFilterProgram(void **this)
{
  void **v2;

  *this = &unk_1E65716F0;
  v2 = this + 28;
  ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(this + 42);
  ProGL::Uniform<int>::~Uniform(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);
}

{
  void **v2;

  *this = &unk_1E65716F0;
  v2 = this + 28;
  ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(this + 42);
  ProGL::Uniform<int>::~Uniform(this + 35);
  ProGL::UniformSampler<35678u>::~UniformSampler(v2);
  ProGL::Program::~Program((ProGL::Program *)this);
  JUMPOUT(0x1B5E29170);
}

void ProGL::makeProgramHandle<DepthFilterProgram>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E65717B8;
  std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<DepthFilterProgram>,void>(&v12, (uint64_t)v2);
  v3 = operator new();
  ProGL::Private::ProgramHandleImpl::ProgramHandleImpl(v3, &v12, 1000);
  std::shared_ptr<ProGL::Private::ProgramHandleImpl>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramHandleImpl,void>(&v10, v3);
  ProGL::GL::getPGLContextHandle(&v10, a1);
  v4 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v13;
  if (v13)
  {
    v8 = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B2D40F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ProGL::Private::ProgramFactory0<DepthFilterProgram>::operator()()
{
  DepthFilterProgram *v0;

  v0 = (DepthFilterProgram *)operator new();
  DepthFilterProgram::DepthFilterProgram(v0);
}

void sub_1B2D40FF4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10B3C40135A5F83);
  _Unwind_Resume(a1);
}

void ProGL::Private::ProgramFactory0<DepthFilterProgram>::~ProgramFactory0()
{
  JUMPOUT(0x1B5E29170);
}

_QWORD *std::shared_ptr<ProGL::Program>::shared_ptr[abi:ne180100]<DepthFilterProgram,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6571808;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2D41084(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<DepthFilterProgram *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,DepthFilterProgram>,std::allocator<DepthFilterProgram>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<DepthFilterProgram *,std::shared_ptr<ProGL::Program>::__shared_ptr_default_delete<ProGL::Program,DepthFilterProgram>,std::allocator<DepthFilterProgram>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramFactory0<DepthFilterProgram>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E6571880;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2D41154(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<DepthFilterProgram> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<DepthFilterProgram>>,std::allocator<ProGL::Private::ProgramFactory0<DepthFilterProgram>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramFactory0<DepthFilterProgram> *,std::shared_ptr<ProGL::Private::ProgramHandleImpl::Factory>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl::Factory,ProGL::Private::ProgramFactory0<DepthFilterProgram>>,std::allocator<ProGL::Private::ProgramFactory0<DepthFilterProgram>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::shared_ptr<ProGL::Private::ProgramHandleImpl>::shared_ptr[abi:ne180100]<ProGL::Private::ProgramHandleImpl,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E65718F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1B2D4122C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<ProGL::Private::ProgramHandleImpl>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<ProGL::Private::ProgramHandleImpl *,std::shared_ptr<ProGL::Private::ProgramHandleImpl>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl,ProGL::Private::ProgramHandleImpl>,std::allocator<ProGL::Private::ProgramHandleImpl>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<ProGL::Private::ProgramHandleImpl>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<ProGL::Private::ProgramHandleImpl *,std::shared_ptr<ProGL::Private::ProgramHandleImpl>::__shared_ptr_default_delete<ProGL::Private::ProgramHandleImpl,ProGL::Private::ProgramHandleImpl>,std::allocator<ProGL::Private::ProgramHandleImpl>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<ProGL::Private::ProgramHandleImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100](a2 + 48);
    std::__tree<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,std::__map_value_compare<ProGL::Private::ProgramHandleImpl::ContextKey,std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,ProGL::Private::ProgramHandleImpl::LessContextKey,true>,std::allocator<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>>>::destroy(a2 + 16, *(_QWORD **)(a2 + 24));
    PCSpinLock::~PCSpinLock((PCSpinLock *)a2);
    JUMPOUT(0x1B5E29170);
  }
}

void std::__tree<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,std::__map_value_compare<ProGL::Private::ProgramHandleImpl::ContextKey,std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,ProGL::Private::ProgramHandleImpl::LessContextKey,true>,std::allocator<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,std::__map_value_compare<ProGL::Private::ProgramHandleImpl::ContextKey,std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,ProGL::Private::ProgramHandleImpl::LessContextKey,true>,std::allocator<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,std::__map_value_compare<ProGL::Private::ProgramHandleImpl::ContextKey,std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>,ProGL::Private::ProgramHandleImpl::LessContextKey,true>,std::allocator<std::__value_type<ProGL::Private::ProgramHandleImpl::ContextKey,ProGL::Private::SimpleCache<ProGL::Private::ProgramHandleImpl::ContextKey,std::shared_ptr<ProGL::Program>,ProGL::Private::ProgramHandleImpl::LessContextKey>::Rec>>>::destroy(a1, a2[1]);
    std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(a2 + 6));
    ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)(a2 + 4));
    operator delete(a2);
  }
}

ProGL::Private::VariableBase *ProGL::UniformSampler<35678u>::UniformSampler(ProGL::Private::VariableBase *a1, ProGL::Program *a2, char *a3)
{
  ProGL::Private::VariableBase *v5;

  v5 = ProGL::Private::VariableBase::VariableBase(a1, a2);
  *(_QWORD *)v5 = &unk_1E6571970;
  *((_DWORD *)v5 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v5 + 3, a3);
  *((_DWORD *)a1 + 12) = -1;
  return a1;
}

void sub_1B2D41388(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase *v1;

  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::UniformSampler<35678u>::~UniformSampler(void **a1)
{
  ProGL::UniformSampler<35678u>::~UniformSampler(a1);
  JUMPOUT(0x1B5E29170);
}

BOOL ProGL::UniformSampler<35678u>::prepare(uint64_t a1)
{
  LiImageSource *FactoryForSerialization;
  GLuint v3;
  const GLchar *v4;
  int UniformLocation;

  FactoryForSerialization = (LiImageSource *)OZFactoryBase::getFactoryForSerialization(a1);
  v3 = LiImageSource::imageSpace(FactoryForSerialization);
  v4 = (const GLchar *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v4 = *(const GLchar **)v4;
  UniformLocation = glGetUniformLocation(v3, v4);
  *(_DWORD *)(a1 + 48) = UniformLocation;
  return UniformLocation != -1;
}

void ProGL::UniformSampler<35678u>::upload(uint64_t a1, ProGL::Private *this)
{
  ProGL::Private::uploadUniform(this, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 16));
}

uint64_t ProGL::UniformSampler<35678u>::getString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v22[11];
  char v23;
  uint64_t v24;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"uniform ", 8);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"sampler2D", 9);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  v5 = *(char *)(a1 + 47);
  if (v5 >= 0)
    v6 = a1 + 24;
  else
    v6 = *(_QWORD *)(a1 + 24);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 47);
  else
    v7 = *(_QWORD *)(a1 + 32);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)";\n", 2);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"#define _", 9);
  v10 = *(char *)(a1 + 47);
  if (v10 >= 0)
    v11 = a1 + 24;
  else
    v11 = *(_QWORD *)(a1 + 24);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 47);
  else
    v12 = *(_QWORD *)(a1 + 32);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(coord) (", 9);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"texture2D", 9);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"(", 1);
  v17 = *(char *)(a1 + 47);
  if (v17 >= 0)
    v18 = a1 + 24;
  else
    v18 = *(_QWORD *)(a1 + 24);
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 47);
  else
    v19 = *(_QWORD *)(a1 + 32);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", (coord)))\n", 12);
  std::stringbuf::str();
  v22[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v22 + *(_QWORD *)(v22[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v22[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v23 < 0)
    operator delete((void *)v22[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v24);
}

void sub_1B2D415B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::UniformSampler<35678u>::~UniformSampler(void **this)
{
  *this = &unk_1E6571970;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

ProGL::Private::VariableBase *ProGL::Uniform<int>::Uniform(ProGL::Private::VariableBase *a1, ProGL::Program *a2, char *a3)
{
  ProGL::Private::VariableBase *v5;

  v5 = ProGL::Private::VariableBase::VariableBase(a1, a2);
  *(_QWORD *)v5 = &unk_1E65719D8;
  *((_DWORD *)v5 + 4) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v5 + 3, a3);
  *((_DWORD *)a1 + 12) = -1;
  return a1;
}

void sub_1B2D41658(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase *v1;

  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<int>::~Uniform(void **a1)
{
  ProGL::Uniform<int>::~Uniform(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t ProGL::Uniform<int>::getString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"uniform ", 8);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"int", 3);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  v7 = *(_QWORD *)(a1 + 24);
  v6 = a1 + 24;
  v5 = v7;
  v8 = *(char *)(v6 + 23);
  if (v8 >= 0)
    v9 = v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)";\n", 2);
  std::stringbuf::str();
  v13[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v13[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v15);
}

void sub_1B2D4179C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<int>::~Uniform(void **this)
{
  *this = &unk_1E65719D8;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

uint64_t ProGL::UniformArray<PCVector2<float>,16ul>::UniformArray(uint64_t a1, ProGL::Program *a2, char *a3)
{
  ProGL::Private::VariableBase *v5;

  v5 = ProGL::Private::VariableBase::VariableBase((ProGL::Private::VariableBase *)a1, a2);
  *(_QWORD *)v5 = &unk_1E6571A40;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v5 + 20, a3);
  *(_DWORD *)(a1 + 184) = -1;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  return a1;
}

void sub_1B2D41854(_Unwind_Exception *a1)
{
  ProGL::Private::VariableBase *v1;

  ProGL::Private::VariableBase::~VariableBase(v1);
  _Unwind_Resume(a1);
}

void ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(void **a1)
{
  ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(a1);
  JUMPOUT(0x1B5E29170);
}

BOOL ProGL::UniformArray<PCVector2<float>,16ul>::prepare(uint64_t a1)
{
  LiImageSource *FactoryForSerialization;
  GLuint v3;
  const GLchar *v4;
  int UniformLocation;

  FactoryForSerialization = (LiImageSource *)OZFactoryBase::getFactoryForSerialization(a1);
  v3 = LiImageSource::imageSpace(FactoryForSerialization);
  v4 = (const GLchar *)(a1 + 160);
  if (*(char *)(a1 + 183) < 0)
    v4 = *(const GLchar **)v4;
  UniformLocation = glGetUniformLocation(v3, v4);
  *(_DWORD *)(a1 + 184) = UniformLocation;
  return UniformLocation != -1;
}

void ProGL::UniformArray<PCVector2<float>,16ul>::upload(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = 0;
  v5 = a1 + 144;
  v6 = -128;
  do
  {
    if (*(_BYTE *)(v5 + v4))
    {
      ProGL::Private::uploadUniform(a2, v4 + *(_DWORD *)(a1 + 184), (GLfloat *)(v5 + v6));
      *(_BYTE *)(v5 + v4) = 0;
    }
    ++v4;
    v6 += 8;
  }
  while (v6);
}

uint64_t ProGL::UniformArray<PCVector2<float>,16ul>::getString(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"uniform ", 8);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"vec2", 4);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  v7 = *(_QWORD *)(a1 + 160);
  v6 = a1 + 160;
  v5 = v7;
  v8 = *(char *)(v6 + 23);
  if (v8 >= 0)
    v9 = v6;
  else
    v9 = v5;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"[", 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"];\n", 3);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E290BC](&v16);
}

void sub_1B2D41A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void ProGL::UniformArray<PCVector2<float>,16ul>::~UniformArray(void **this)
{
  *this = &unk_1E6571A40;
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  ProGL::Private::VariableBase::~VariableBase((ProGL::Private::VariableBase *)this);
}

void ProGL::UniformSampler<35678u>::set(_DWORD *a1, int a2)
{
  uint64_t FactoryForSerialization;
  _QWORD v5[2];
  _BYTE v6[40];

  if (OZFactoryBase::getFactoryForSerialization((uint64_t)a1))
  {
    a1[4] = a2;
    if (a1[12] != -1)
    {
      FactoryForSerialization = OZFactoryBase::getFactoryForSerialization((uint64_t)a1);
      ProGL::Private::ProgramHelper::getProgramContext(FactoryForSerialization, v5);
      ProGL::GL::GL((ProGL::GL *)v6, (const ProGL::ContextHandle *)v5);
      ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v5);
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v6);
      ProGL::GL::~GL((ProGL::GL *)v6);
    }
  }
}

void sub_1B2D41B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void ProGL::Uniform<int>::set<int>(_DWORD *a1, _DWORD *a2)
{
  uint64_t FactoryForSerialization;
  _QWORD v5[2];
  _BYTE v6[40];

  if (OZFactoryBase::getFactoryForSerialization((uint64_t)a1))
  {
    a1[4] = *a2;
    if (a1[12] != -1)
    {
      FactoryForSerialization = OZFactoryBase::getFactoryForSerialization((uint64_t)a1);
      ProGL::Private::ProgramHelper::getProgramContext(FactoryForSerialization, v5);
      ProGL::GL::GL((ProGL::GL *)v6, (const ProGL::ContextHandle *)v5);
      ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v5);
      (*(void (**)(_DWORD *, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v6);
      ProGL::GL::~GL((ProGL::GL *)v6);
    }
  }
}

void sub_1B2D41BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

void ProGL::UniformArray<PCVector2<float>,16ul>::setAtIndex<PCVector2<float>>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  GLfloat *v7;
  uint64_t FactoryForSerialization;
  _QWORD v9[2];
  _BYTE v10[40];

  if (OZFactoryBase::getFactoryForSerialization(a1))
  {
    *(_BYTE *)(a1 + a2 + 144) = 1;
    v6 = a1 + 8 * a2;
    *(_QWORD *)(v6 + 16) = *a3;
    v7 = (GLfloat *)(v6 + 16);
    if (*(_DWORD *)(a1 + 184) != -1)
    {
      FactoryForSerialization = OZFactoryBase::getFactoryForSerialization(a1);
      ProGL::Private::ProgramHelper::getProgramContext(FactoryForSerialization, v9);
      ProGL::GL::GL((ProGL::GL *)v10, (const ProGL::ContextHandle *)v9);
      ProGL::ContextHandle::~ContextHandle((ProGL::ContextHandle *)v9);
      ProGL::Private::uploadUniform((int)v10, *(_DWORD *)(a1 + 184) + a2, v7);
      *(_BYTE *)(a1 + a2 + 144) = 0;
      ProGL::GL::~GL((ProGL::GL *)v10);
    }
  }
}

void sub_1B2D41CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  ProGL::GL::~GL((ProGL::GL *)va);
  _Unwind_Resume(a1);
}

uint64_t LiScriptParameterDescriptor::LiScriptParameterDescriptor(uint64_t a1, CFTypeRef cf, int a3)
{
  *(_QWORD *)a1 = CFRetain(cf);
  *(_DWORD *)(a1 + 8) = a3;
  return a1;
}

void Li3DEngineScene::Li3DEngineScene(Li3DEngineScene *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1B5E28F6C]();
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 80) = v2 + 88;
  *(_QWORD *)(v2 + 96) = 0;
  *(_BYTE *)(v2 + 104) = 0;
  v3 = objc_opt_new();
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 14) = v3;
  *((_QWORD *)this + 15) = (char *)this + 128;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = (char *)this + 152;
}

void sub_1B2D41D74(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  id *v2;
  uint64_t v3;
  id **v4;
  id **v5;

  v5 = v4;
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(v3, *v5);
  ProCore_Impl::PCNSRefImpl::release(v2);
  std::recursive_mutex::~recursive_mutex(v1);
  _Unwind_Resume(a1);
}

void Li3DEngineScene::set(Li3DEngineScene *this, SCNScene *a2)
{
  uint64_t v4;
  id v5;

  std::recursive_mutex::lock((std::recursive_mutex *)this);
  v5 = a2;
  ProCore_Impl::PCNSRefImpl::operator=((id *)this + 8, &v5);
  ProCore_Impl::PCNSRefImpl::release(&v5);
  v4 = Li3DEngineScene::sceneID++;
  *((_QWORD *)this + 9) = v4;
  std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy((uint64_t)this + 80, *((id **)this + 11));
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = 0;
  std::recursive_mutex::unlock((std::recursive_mutex *)this);
}

void sub_1B2D41E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

uint64_t Li3DEngineScene::setUseOriginalScene(uint64_t this, char a2)
{
  *(_BYTE *)(this + 104) = a2;
  return this;
}

uint64_t Li3DEngineScene::sceneManager(Li3DEngineScene *this)
{
  return *((_QWORD *)this + 14);
}

id Li3DEngineScene::getSceneAndRenderer(Li3DEngineScene *this, void *a2)
{
  unint64_t v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  id v23;
  unint64_t v24;
  unint64_t *v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = objc_msgSend(a2, "registryID");
  v24 = v4;
  v5 = (_QWORD *)*((_QWORD *)this + 11);
  v6 = (void *)*((_QWORD *)this + 8);
  if (!v5)
    goto LABEL_28;
  v7 = (_QWORD *)((char *)this + 88);
  do
  {
    v8 = v5[4];
    v9 = v8 >= v4;
    if (v8 >= v4)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != (_QWORD *)((char *)this + 88) && v4 >= v7[4])
  {
    v12 = (id)v7[5];
  }
  else
  {
LABEL_28:
    if (!*((_BYTE *)this + 104))
    {
      v11 = (void *)objc_msgSend(MEMORY[0x1E0CD5A10], "scene");
      objc_msgSend((id)objc_msgSend(v11, "rootNode"), "addChildNode:", objc_msgSend((id)objc_msgSend(v6, "rootNode"), "clone"));
      v6 = v11;
    }
    PCMakeNSRefAndRetain<EAGLContext *>((void *)objc_msgSend(MEMORY[0x1E0CD5A08], "rendererWithDevice:options:", a2, 0), &v23);
    v12 = v23;
    objc_msgSend(v23, "setScene:", v6);
    v25 = &v24;
    v13 = std::__tree<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::__map_value_compare<HGGPURenderContext const*,std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>,std::less<HGGPURenderContext const*>,true>,std::allocator<std::__value_type<HGGPURenderContext const*,HGRef<HGCVGLTextureFactory>>>>::__emplace_unique_key_args<HGGPURenderContext const*,std::piecewise_construct_t const&,std::tuple<HGGPURenderContext const* const&>,std::tuple<>>((uint64_t **)this + 10, &v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25);
    ProCore_Impl::PCNSRefImpl::operator=((id *)v13 + 5, &v23);
    ProCore_Impl::PCNSRefImpl::release(&v23);
  }
  if (!*((_BYTE *)this + 104))
  {
    v14 = (void *)objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithArray:", objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "scene"), "rootNode"), "childNodes"));
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v19, v26, 16);
    if (v15)
    {
      v16 = *(_QWORD *)v20;
      do
      {
        for (i = 0; i != v15; ++i)
        {
          if (*(_QWORD *)v20 != v16)
            objc_enumerationMutation(v14);
          objc_msgSend(*(id *)(*((_QWORD *)&v19 + 1) + 8 * i), "removeFromParentNode");
        }
        v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v19, v26, 16);
      }
      while (v15);
    }
    objc_msgSend((id)objc_msgSend((id)objc_msgSend(v12, "scene"), "rootNode"), "addChildNode:", objc_msgSend((id)objc_msgSend(*((id *)this + 8), "rootNode"), "clone"));
  }
  return v12;
}

void sub_1B2D42094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t Li3DEngineScene::particleParameters(Li3DEngineScene *this, SCNParticleSystem *a2)
{
  char *v2;
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;

  v4 = (_QWORD *)*((_QWORD *)this + 19);
  v2 = (char *)this + 152;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = v3[4];
    v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (char *)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v2 && *((_QWORD *)v5 + 4) <= (unint64_t)a2)
    return *((_QWORD *)v5 + 5);
  else
    return 0;
}

uint64_t Li3DEngineScene::reset_NoLock(id *this)
{
  return objc_msgSend((id)objc_msgSend(this[8], "rootNode"), "enumerateChildNodesUsingBlock:", &__block_literal_global_70);
}

uint64_t ___ZN15Li3DEngineScene12reset_NoLockEv_block_invoke(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_msgSend(a2, "particleSystems", 0);
  result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * v6++), "reset");
      }
      while (v4 != v6);
      result = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t Li3DEngineScene::didLoad_NoLock(id *this)
{
  void *v2;
  _QWORD v4[5];

  v2 = (void *)objc_msgSend(this[8], "rootNode");
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN15Li3DEngineScene14didLoad_NoLockEv_block_invoke;
  v4[3] = &__block_descriptor_40_e21_v24__0__SCNNode_8_B16l;
  v4[4] = this;
  return objc_msgSend(v2, "enumerateChildNodesUsingBlock:", v4);
}

uint64_t ___ZN15Li3DEngineScene14didLoad_NoLockEv_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  id obj;
  uint64_t v14;
  PCSharedCount v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  id v20;
  PCSharedCount v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  obj = (id)objc_msgSend(a2, "particleSystems");
  result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
  v4 = result;
  if (result)
  {
    v5 = *(_QWORD *)v17;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(obj);
        v20 = 0;
        v7 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * v6);
        v20 = v7;
        objc_msgSend(v7, "particleSize");
        objc_msgSend(v7, "setParticleSize:", v8 * 512.0);
        v9 = operator new();
        *(_QWORD *)(v9 + 32) = 0;
        *(_BYTE *)(v9 + 40) = 1;
        *(_QWORD *)(v9 + 24) = &unk_1E6571E90;
        *(_QWORD *)(v9 + 8) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)v9 = &unk_1E6571E60;
        v14 = v9;
        PCSharedCount::PCSharedCount(&v15, (PCShared_base *)(v9 + 24));
        objc_msgSend(v20, "particleVelocity");
        if (!v14)
          throw_PCNullPointerException(1);
        *(_QWORD *)(v14 + 8) = v10;
        objc_msgSend(v20, "particleVelocityVariation");
        *(_QWORD *)(v14 + 16) = v11;
        v21.var0 = (PC_Sp_counted_base *)&v20;
        v12 = std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::__emplace_unique_key_args<SCNParticleSystem *,std::piecewise_construct_t const&,std::tuple<SCNParticleSystem * const&>,std::tuple<>>(v2 + 144, (unint64_t *)&v20, (uint64_t)&std::piecewise_construct, (PC_Sp_counted_base ***)&v21);
        v12[5] = v14;
        PCSharedCount::PCSharedCount(&v21, &v15);
        PCSharedCount::operator=(v12 + 6, (uint64_t *)&v21);
        PCSharedCount::~PCSharedCount(&v21);
        PCSharedCount::~PCSharedCount(&v15);
        ++v6;
      }
      while (v4 != v6);
      result = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v16, v22, 16);
      v4 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B2D42498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,PCSharedCount a24)
{
  PCSharedCount *v24;

  PCSharedCount::~PCSharedCount(&a24);
  PCSharedCount::~PCSharedCount(v24);
  _Unwind_Resume(a1);
}

uint64_t Li3DEngineScene::didAddNode_NoLock(Li3DEngineScene *this, SCNNode *a2)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = ___ZN15Li3DEngineScene17didAddNode_NoLockEP7SCNNode_block_invoke;
  v3[3] = &__block_descriptor_40_e21_v24__0__SCNNode_8_B16l;
  v3[4] = this;
  return -[SCNNode enumerateChildNodesUsingBlock:](a2, "enumerateChildNodesUsingBlock:", v3);
}

uint64_t ___ZN15Li3DEngineScene17didAddNode_NoLockEP7SCNNode_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2;
  void *v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  unint64_t *v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = a2;
  v2 = *(_QWORD *)(a1 + 32);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v3 = (void *)objc_msgSend(a2, "particleSystems", 0);
  result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)v11;
    v7 = (uint64_t **)(v2 + 120);
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * v8), "birthRate");
        v15 = (unint64_t *)&v14;
        *((_DWORD *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>(v7, (unint64_t *)&v14, (uint64_t)&std::piecewise_construct, &v15)+ 10) = (int)v9;
        ++v8;
      }
      while (v5 != v8);
      result = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v16, 16);
      v5 = result;
    }
    while (result);
  }
  return result;
}

void Li3DEngineScene::setNodeActiveState_NoLock(Li3DEngineScene *this, SCNNode *a2, int a3, double a4)
{
  double v7;
  _QWORD v8[6];
  char v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  char v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2020000000;
  v13 = 0;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZN15Li3DEngineScene25setNodeActiveState_NoLockEP7SCNNodebd_block_invoke;
  v8[3] = &unk_1E6571B00;
  v9 = a3;
  v8[4] = &v10;
  v8[5] = this;
  -[SCNNode enumerateChildNodesUsingBlock:](a2, "enumerateChildNodesUsingBlock:", v8);
  if (!*((_BYTE *)v11 + 24))
  {
    v7 = 0.0;
    if (a3)
      v7 = a4;
    -[SCNNode setOpacity:](a2, "setOpacity:", v7);
  }
  _Block_object_dispose(&v10, 8);
}

void sub_1B2D42700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15Li3DEngineScene25setNodeActiveState_NoLockEP7SCNNodebd_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _QWORD *i;
  unint64_t v11;
  double v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  void *v17;
  unint64_t *v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = a2;
  v3 = *(_QWORD *)(a1 + 40);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = (void *)objc_msgSend(a2, "particleSystems", 0);
  result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v14;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * v8);
        if (!*(_BYTE *)(a1 + 48))
        {
          v12 = 0.0;
          goto LABEL_15;
        }
        for (i = *(_QWORD **)(v3 + 128); i; i = (_QWORD *)*i)
        {
          v11 = i[4];
          if ((unint64_t)v17 >= v11)
          {
            if (v11 >= (unint64_t)v17)
            {
              v18 = (unint64_t *)&v17;
              v12 = (double)*((int *)std::__tree<std::__value_type<ProShade::SamplerNode const*,int>,std::__map_value_compare<ProShade::SamplerNode const*,std::__value_type<ProShade::SamplerNode const*,int>,std::less<ProShade::SamplerNode const*>,true>,std::allocator<std::__value_type<ProShade::SamplerNode const*,int>>>::__emplace_unique_key_args<ProShade::SamplerNode const*,std::piecewise_construct_t const&,std::tuple<ProShade::SamplerNode const*&&>,std::tuple<>>((uint64_t **)(v3 + 120), (unint64_t *)&v17, (uint64_t)&std::piecewise_construct, &v18)+ 10);
LABEL_15:
              objc_msgSend(v9, "setBirthRate:", v12);
              break;
            }
            ++i;
          }
        }
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        ++v8;
      }
      while (v8 != v6);
      result = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v19, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void *Li3DEngineObjectDataBase::defaultPerInstanceColor(Li3DEngineObjectDataBase *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    PCWorkingColorVector::PCWorkingColorVector((PCWorkingColorVector *)&Li3DEngineObjectDataBase::defaultPerInstanceColor(void)::defaultValue, 1.0, 1.0, 1.0, 1.0);
  }
  return &Li3DEngineObjectDataBase::defaultPerInstanceColor(void)::defaultValue;
}

void sub_1B2D4290C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t Li3DEngineObject::Li3DEngineObject(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)(a1 + 584) = &off_1E65EB048;
  *(_QWORD *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 600) = 1;
  LiSceneObject::LiSceneObject((LiSceneObject *)a1, (uint64_t *)&off_1E6571C00);
  *(_QWORD *)a1 = &off_1E6571B38;
  *(_QWORD *)(a1 + 584) = &unk_1E6571BE0;
  v4 = a2[1];
  *(_QWORD *)(a1 + 568) = *a2;
  *(_QWORD *)(a1 + 576) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return a1;
}

void sub_1B2D429B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;

  *(_QWORD *)(v1 + 584) = v3;
  *(_BYTE *)(v1 + 600) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void Li3DEngineObject::~Li3DEngineObject(PCSharedCount *this)
{
  this->var0 = (PC_Sp_counted_base *)&off_1E6571B38;
  this[73].var0 = (PC_Sp_counted_base *)&unk_1E6571BE0;
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&this[71]);
  LiSceneObject::~LiSceneObject(this, (PC_Sp_counted_base **)&off_1E6571C00);
  this[73].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  LOBYTE(this[75].var0) = 0;
  PCWeakCount::~PCWeakCount(&this[74].var0);
}

{
  Li3DEngineObject::~Li3DEngineObject(this);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'Li3DEngineObject::~Li3DEngineObject(Li3DEngineObject *this)
{
  Li3DEngineObject::~Li3DEngineObject((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

{
  Li3DEngineObject::~Li3DEngineObject((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
  JUMPOUT(0x1B5E29170);
}

uint64_t Li3DEngineObject::getSceneData@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 576);
  *a2 = *(_QWORD *)(this + 568);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void Li3DEngineObject::plane(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0xBFF0000000000000;
}

double Li3DEngineObject::localBoundingBox(uint64_t a1, double *a2)
{
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double result;
  float v10[3];
  float v11[3];

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 568) + 8);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  objc_msgSend((id)objc_msgSend(*(id *)(v3 + 64), "rootNode"), "getBoundingBoxMin:max:", v11, v10);
  v4 = v10[0];
  v5 = v11[1];
  v6 = v10[1];
  v7 = v11[2];
  v8 = v10[2];
  *a2 = v11[0];
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  a2[4] = v7;
  a2[5] = v8;
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
  return result;
}

void sub_1B2D42B58(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void Li3DEngineObject::cast(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  PCSharedCount::PCSharedCount((PCSharedCount *)(a1 + 72));
}

uint64_t Li3DEngineObject::print(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  const char *v7;
  size_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::locale v13;

  LiImageSource::printIndent(a2, a3);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Li3DEngineObject(\"", 18);
  if (a1[64])
    v7 = (const char *)a1[64];
  else
    v7 = "";
  v8 = strlen(v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\" ", 2);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)")", 1);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
  v11 = std::locale::use_facet(&v13, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(&v13);
  std::ostream::put();
  std::ostream::flush();
  return (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*a1 + 120))(a1, a2, a3);
}

void sub_1B2D42CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void Li3DEngineObjectData::~Li3DEngineObjectData(id *this)
{
  id v2;
  id v3;
  id v4;
  id v5;

  *this = &off_1E6571C38;

  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)(this + 69));
  v2 = this[68];
  if (v2)
    (*(void (**)(id))(*(_QWORD *)v2 + 24))(v2);
  v3 = this[65];
  if (v3)
  {
    this[66] = v3;
    operator delete(v3);
  }
  v4 = this[61];
  if (v4)
  {
    this[62] = v4;
    operator delete(v4);
  }
  v5 = this[58];
  if (v5)
  {
    this[59] = v5;
    operator delete(v5);
  }
  ProCore_Impl::PCNSRefImpl::release(this + 33);
  *this = &unk_1E6571ED0;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)(this + 21));
}

{
  Li3DEngineObjectData::~Li3DEngineObjectData(this);
  JUMPOUT(0x1B5E29170);
}

NSString *Li3DEngineObjectData::setDebugName(id *this, NSString *a2)
{
  NSString *result;

  result = a2;
  this[56] = result;
  return result;
}

uint64_t Li3DEngineObjectData::updateScriptingEngine(uint64_t this, float a2)
{
  void *v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  _DWORD *v13;
  void *v14;

  v2 = *(void **)(this + 456);
  if (v2)
  {
    v3 = this;
    objc_msgSend(v2, "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:"), CFSTR("arScale"));
    v7 = *(uint64_t **)(v3 + 488);
    v8 = *(uint64_t **)(v3 + 496);
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        v10 = *v7;
        switch(*((_DWORD *)v7 + 2))
        {
          case 0:
          case 1:
          case 4:
            LODWORD(v4) = *(_DWORD *)(*(_QWORD *)(v3 + 464) + 4 * v9);
            objc_msgSend(*(id *)(v3 + 456), "setObject:forKeyedSubscript:", objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithFloat:", v4), v10);
            ++v9;
            break;
          case 2:
            v11 = (float *)(*(_QWORD *)(v3 + 464) + 4 * v9);
            v9 += 4;
            v12 = objc_msgSend(MEMORY[0x1E0CEA478], "colorWithRed:green:blue:alpha:", *v11, v11[1], v11[2], v11[3]);
            goto LABEL_8;
          case 3:
            v13 = (_DWORD *)(*(_QWORD *)(v3 + 464) + 4 * v9);
            LODWORD(v4) = *v13;
            LODWORD(v5) = v13[1];
            v9 += 3;
            LODWORD(v6) = v13[2];
            v12 = objc_msgSend(MEMORY[0x1E0CB3B18], "valueWithSCNVector3:", v4, v5, v6);
LABEL_8:
            objc_msgSend(*(id *)(v3 + 456), "setObject:forKeyedSubscript:", v12, v10);
            break;
          default:
            break;
        }
        v7 += 2;
      }
      while (v7 != v8);
    }
    v14 = (void *)objc_msgSend(*(id *)(v3 + 456), "objectForKeyedSubscript:", CFSTR("WillRenderScene"));
    this = objc_msgSend(v14, "isUndefined");
    if ((this & 1) == 0)
      return objc_msgSend(v14, "callWithArguments:", 0);
  }
  return this;
}

uint64_t Li3DEngineObjectData::updateShadingEngine(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(this + 512))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 544);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 144);
      v4 = (void *)objc_msgSend(*(id *)(this + 440), "childNodesPassingTest:", &__block_literal_global_14);
      v9 = 0u;
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
      this = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
      if (this)
      {
        v5 = this;
        v6 = *(_QWORD *)v10;
        do
        {
          v7 = 0;
          do
          {
            if (*(_QWORD *)v10 != v6)
              objc_enumerationMutation(v4);
            v8 = (void *)objc_msgSend((id)objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * v7), "geometry"), "firstMaterial");
            objc_msgSend(v8, "setValue:forKey:", objc_msgSend(MEMORY[0x1E0CD59C8], "materialPropertyWithContents:", v3), CFSTR("texture"));
            if (*(_BYTE *)(v1 + 568))
              objc_msgSend(v8, "setProgram:", *(_QWORD *)(v1 + 512));
            ++v7;
          }
          while (v5 != v7);
          this = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
          v5 = this;
        }
        while (this);
      }
    }
  }
  return this;
}

BOOL ___ZN20Li3DEngineObjectData19updateShadingEngineEv_block_invoke(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "geometry") != 0;
}

uint64_t Li3DEngineObjectData::applyChanges(uint64_t a1, float a2)
{
  Li3DEngineObjectData::updateScriptingEngine(a1, a2);
  return Li3DEngineObjectData::updateShadingEngine(a1);
}

uint64_t Li3DEngineObjectData::getHelium3DEngine(Li3DEngineObjectData *this, LiAgent *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = *((_QWORD *)this + 69);
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)result + 24))(&v5);
    result = *((_QWORD *)this + 68);
    v4 = v5;
    if (result == v5)
    {
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
    }
    else
    {
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
        v4 = v5;
      }
      *((_QWORD *)this + 68) = v4;
    }
  }
  return result;
}

void sub_1B2D4316C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 24))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *Li3DEngineObjectData::setTextureSource(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<TXTextStyle>::operator=[abi:ne180100]((_QWORD *)(a1 + 552), a2);
}

_QWORD *Li3DEngineWorldData::add3DEngineObjectData(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  unint64_t *v7;

  v6 = a2;
  v7 = &v6;
  v4 = std::__tree<std::__value_type<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(a1 + 208), &v6, (uint64_t)&std::piecewise_construct, (uint64_t **)&v7);
  return std::shared_ptr<TXTextStyle>::operator=[abi:ne180100](v4 + 5, a3);
}

void Li3DEngineWorldData::getHelium3DEngine(Li3DEngineWorldData *this, LiAgent *a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  BOOL v13;

  v2 = (char *)*((_QWORD *)this + 26);
  v3 = (char *)this + 216;
  if (v2 != (char *)this + 216)
  {
    do
    {
      v5 = *((_QWORD *)v2 + 5);
      v6 = (std::__shared_weak_count *)*((_QWORD *)v2 + 6);
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, LiAgent *))(*(_QWORD *)v5 + 16))(v5, a2);
      if (v6)
      {
        v9 = (unint64_t *)&v6->__shared_owners_;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v11 = (char *)*((_QWORD *)v2 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v2 + 2);
          v13 = *(_QWORD *)v12 == (_QWORD)v2;
          v2 = v12;
        }
        while (!v13);
      }
      v2 = v12;
    }
    while (v12 != v3);
  }
}

void sub_1B2D432C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Li3DEngineWorldData::applyChanges(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;

  v4 = *(_QWORD **)(a1 + 208);
  v5 = (_QWORD *)(a1 + 216);
  if (v4 != (_QWORD *)(a1 + 216))
  {
    do
    {
      v9 = v4[5];
      v10 = (std::__shared_weak_count *)v4[6];
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)v9 + 24))(v9, a2, a3, a4);
      if (v10)
      {
        v13 = (unint64_t *)&v10->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v15 = (_QWORD *)v4[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)v4[2];
          v17 = *v16 == (_QWORD)v4;
          v4 = v16;
        }
        while (!v17);
      }
      v4 = v16;
    }
    while (v16 != v5);
  }
}

void sub_1B2D433D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void Li3DEngineWorldData::unapplyChanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;

  v3 = *(_QWORD **)(a1 + 208);
  v4 = (_QWORD *)(a1 + 216);
  if (v3 != (_QWORD *)(a1 + 216))
  {
    do
    {
      v7 = v3[5];
      v8 = (std::__shared_weak_count *)v3[6];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a2, a3);
      if (v8)
      {
        v11 = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v13 = (_QWORD *)v3[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v3[2];
          v15 = *v14 == (_QWORD)v3;
          v3 = v14;
        }
        while (!v15);
      }
      v3 = v14;
    }
    while (v14 != v4);
  }
}

void sub_1B2D434D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

SCNNode *Li3DEngineObjectData::setSCNNode(id *this, SCNNode *a2)
{
  SCNNode *result;

  result = a2;
  this[55] = result;
  return result;
}

_QWORD *Li3DEngineObjectData::setScriptParameters(uint64_t a1, uint64_t a2, __int128 **a3)
{
  char *v5;
  _QWORD *result;

  v5 = (char *)(a1 + 464);
  if (v5 != (char *)a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v5, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = (_QWORD *)(a1 + 488);
  if ((__int128 **)(a1 + 488) != a3)
    return std::vector<LiScriptParameterDescriptor>::__assign_with_size[abi:ne180100]<LiScriptParameterDescriptor*,LiScriptParameterDescriptor*>(result, *a3, a3[1], a3[1] - *a3);
  return result;
}

void Li3DEngineObjectForceParams::Li3DEngineObjectForceParams(Li3DEngineObjectForceParams *this)
{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 8) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
}

void Li3DEngineObjectForceParams::~Li3DEngineObjectForceParams(id *this)
{
  ProCore_Impl::PCNSRefImpl::release(this + 6);
}

void Li3DEngineObjectForceParams::setUUID(id *this, NSUUID *a2)
{
  id v3;

  PCMakeNSRefAndRetain<EAGLContext *>(a2, &v3);
  ProCore_Impl::PCNSRefImpl::operator=(this + 6, &v3);
  ProCore_Impl::PCNSRefImpl::release(&v3);
}

void sub_1B2D43600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ProCore_Impl::PCNSRefImpl::release((id *)va);
  _Unwind_Resume(a1);
}

void Li3DEngineWorldData::~Li3DEngineWorldData(Li3DEngineWorldData *this)
{
  *(_QWORD *)this = &off_1E6571CB8;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 208, *((_QWORD **)this + 27));
  *(_QWORD *)this = &unk_1E6571ED0;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 168);
}

{
  *(_QWORD *)this = &off_1E6571CB8;
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>>>::destroy((uint64_t)this + 208, *((_QWORD **)this + 27));
  *(_QWORD *)this = &unk_1E6571ED0;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 168);
  JUMPOUT(0x1B5E29170);
}

void LiParticleParameters::~LiParticleParameters(LiParticleParameters *this)
{
  *((_QWORD *)this + 3) = &off_1E65EB048;
  *((_BYTE *)this + 40) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 4);
}

{
  *((_QWORD *)this + 3) = &off_1E65EB048;
  *((_BYTE *)this + 40) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)this + 4);
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiParticleParameters::~LiParticleParameters(LiParticleParameters *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 3) = &off_1E65EB048;
  v1[40] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 4);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *((_QWORD *)v1 + 3) = &off_1E65EB048;
  v1[40] = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)v1 + 4);
  JUMPOUT(0x1B5E29170);
}

void Li3DEngineObjectDataBase::~Li3DEngineObjectDataBase(Li3DEngineObjectDataBase *this)
{
  *(_QWORD *)this = &unk_1E6571ED0;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 168);
}

{
  *(_QWORD *)this = &unk_1E6571ED0;
  PCArray<LiLight,PCArray_Traits<LiLight>>::~PCArray((uint64_t)this + 168);
  JUMPOUT(0x1B5E29170);
}

void std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(uint64_t a1, id *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,PCNSRef<SCNRenderer *>>>>::destroy(a1, a2[1]);
    ProCore_Impl::PCNSRefImpl::release(a2 + 5);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::__emplace_unique_key_args<SCNParticleSystem *,std::piecewise_construct_t const&,std::tuple<SCNParticleSystem * const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, PC_Sp_counted_base ***a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t *v11[3];

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = (uint64_t *)*v8;
        v6 = (uint64_t **)v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = (uint64_t *)v8[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v8 + 1);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t *)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<SCNParticleSystem * const&>,std::tuple<>>(a1, a4, (uint64_t)v11);
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__tree<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::__map_value_compare<SCNParticleSystem *,std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,std::less<SCNParticleSystem *>,true>,std::allocator<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<SCNParticleSystem * const&>,std::tuple<>>(uint64_t a1@<X0>, PC_Sp_counted_base ***a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  PCSharedCount *v6;

  v5 = a1 + 8;
  v6 = (PCSharedCount *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v6[4].var0 = **a2;
  v6[5].var0 = 0;
  PCSharedCount::PCSharedCount(v6 + 6);
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_1B2D439B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<SCNParticleSystem *,PCPtr<LiParticleParameters>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  PCSharedCount *v2;

  v2 = *(PCSharedCount **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      PCSharedCount::~PCSharedCount(v2 + 6);
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::shared_ptr<Li3DEngineObjectData>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = v6[4];
        if (v10 >= v11)
          break;
        v6 = *v9;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[5] = 0;
    v12[6] = 0;
    v15 = 1;
    std::__tree<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::__map_value_compare<PVIGHGNodeCacheKey,std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>,std::less<PVIGHGNodeCacheKey>,true>,std::allocator<std::__value_type<PVIGHGNodeCacheKey,HGRef<HGNode>>>>::__insert_node_at(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<OZFontFace>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

_DWORD *std::vector<LiScriptParameterDescriptor>::__assign_with_size[abi:ne180100]<LiScriptParameterDescriptor*,LiScriptParameterDescriptor*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  _DWORD *result;
  uint64_t v10;
  unint64_t v11;
  _DWORD **v12;
  _DWORD *v13;
  char *v14;
  __int128 v15;
  _DWORD *v16;
  _DWORD *v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _OWORD *v23;
  __int128 v24;
  int64_t v25;
  _DWORD *v26;
  uint64_t v27;

  v6 = a2;
  v8 = a1[2];
  result = (_DWORD *)*a1;
  if (a4 > (v8 - (uint64_t)result) >> 4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<double>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    std::vector<std::shared_ptr<HGGPUComputeDevice const>>::__vallocate[abi:ne180100](a1, v11);
    v13 = (_DWORD *)a1[1];
    v12 = (_DWORD **)(a1 + 1);
    result = v13;
    v14 = (char *)v13;
    if (v6 != a3)
    {
      v14 = (char *)result;
      do
      {
        v15 = *v6++;
        *(_OWORD *)v14 = v15;
        v14 += 16;
      }
      while (v6 != a3);
    }
LABEL_26:
    v25 = v14 - (char *)result;
    goto LABEL_27;
  }
  v17 = (_DWORD *)a1[1];
  v12 = (_DWORD **)(a1 + 1);
  v16 = v17;
  v18 = ((char *)v17 - (char *)result) >> 4;
  if (v18 >= a4)
  {
    v14 = (char *)result;
    if (a2 != a3)
    {
      v26 = result;
      do
      {
        v27 = *(_QWORD *)v6;
        v26[2] = *((_DWORD *)v6 + 2);
        *(_QWORD *)v26 = v27;
        v26 += 4;
        ++v6;
        v14 += 16;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  v19 = &a2[v18];
  if (v16 != result)
  {
    v20 = 16 * v18;
    do
    {
      v21 = *(_QWORD *)v6;
      result[2] = *((_DWORD *)v6 + 2);
      *(_QWORD *)result = v21;
      result += 4;
      ++v6;
      v20 -= 16;
    }
    while (v20);
    result = *v12;
  }
  v22 = (char *)result;
  if (v19 != a3)
  {
    v22 = (char *)result;
    v23 = result;
    do
    {
      v24 = *v19++;
      *v23++ = v24;
      v22 += 16;
    }
    while (v19 != a3);
  }
  v25 = v22 - (char *)result;
LABEL_27:
  *v12 = (_DWORD *)((char *)result + v25);
  return result;
}

void LiRenderer::LiRenderer(LiRenderer *this)
{
  *((_QWORD *)this + 52) = &off_1E65EB048;
  *((_QWORD *)this + 53) = 0;
  *((_BYTE *)this + 432) = 1;
  LiRendererBase::LiRendererBase(this, &off_1E6572048);
  *(_QWORD *)this = &off_1E6571F10;
  *((_QWORD *)this + 52) = &unk_1E6572028;
  *((_BYTE *)this + 51) = 0;
  PCWorkingColorVector::PCWorkingColorVector((LiRenderer *)((char *)this + 52), 1.0, 1.0, 1.0, 1.0);
  LiClipSet::LiClipSet((LiRenderer *)((char *)this + 72));
  *((_QWORD *)this + 15) = &unk_1E656E898;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  LiImageFilterChain::LiImageFilterChain((LiRenderer *)((char *)this + 144));
  *((_QWORD *)this + 28) = 0x3FF0000000000000;
  *((_QWORD *)this + 44) = &unk_1E6572318;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *((_OWORD *)this + 13) = _Q0;
  *((_QWORD *)this + 43) = 0x3FF0000000000000;
  *((_QWORD *)this + 38) = 0x3FF0000000000000;
  *((_QWORD *)this + 33) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_QWORD *)this + 48) = 0;
  PCSharedCount::PCSharedCount((PCSharedCount *)this + 49);
  *(_QWORD *)((char *)this + 404) = 0;
  *((_WORD *)this + 24) = 256;
  *((_BYTE *)this + 50) = 1;
  *((_WORD *)this + 200) = 1;
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 376) = 1;
}

void sub_1B2D43D98(_Unwind_Exception *a1)
{
  uint64_t v1;
  LiClipSet *v2;
  uint64_t v3;
  uint64_t v4;
  PCSharedCount *v5;
  uint64_t v6;

  PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray(v4);
  LiImageFilterChain::~LiImageFilterChain(v5);
  PCArray<PCPtr<LiSceneObject>,PCArray_Traits<PCPtr<LiSceneObject>>>::~PCArray(v3);
  LiClipSet::~LiClipSet(v2);
  LiRendererBase::~LiRendererBase((PCSharedCount *)v1, (const PCString *)&off_1E6572048);
  *(_QWORD *)(v1 + 416) = v6 + 16;
  *(_BYTE *)(v1 + 432) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 424));
  _Unwind_Resume(a1);
}

void LiRenderer::~LiRenderer(PCSharedCount *this, const PCString *a2)
{
  __CFString *var0;
  int v5;
  PC_Sp_counted_base *v6;
  int v7;
  PC_Sp_counted_base *v8;

  var0 = a2->var0;
  this->var0 = (PC_Sp_counted_base *)a2->var0;
  *(__CFString **)((char *)this + var0[-1].info) = a2[7].var0;
  PCSharedCount::~PCSharedCount(this + 49);
  PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray((uint64_t)&this[44]);
  this[20].var0 = (PC_Sp_counted_base *)&unk_1E64FC2F8;
  if (SLODWORD(this[21].var0) < 0)
    v5 = 1;
  else
    v5 = (int)this[21].var0;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&this[20], 0, v5);
  v6 = this[22].var0;
  if (v6)
    MEMORY[0x1B5E2914C](v6, 0x1000C8077774924);
  this[22].var0 = 0;
  LODWORD(this[21].var0) = 0;
  PCSharedCount::~PCSharedCount(this + 19);
  this[15].var0 = (PC_Sp_counted_base *)&unk_1E656E898;
  if (SLODWORD(this[16].var0) < 0)
    v7 = 1;
  else
    v7 = (int)this[16].var0;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&this[15], 0, v7);
  v8 = this[17].var0;
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  this[17].var0 = 0;
  LODWORD(this[16].var0) = 0;
  LiClipSet::~LiClipSet((LiClipSet *)&this[9]);
  LiRendererBase::~LiRendererBase(this, a2 + 1);
}

void LiRenderer::~LiRenderer(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 416) = &off_1E65EB048;
  *(_BYTE *)(v1 + 432) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 424));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 416) = &off_1E65EB048;
  *(_BYTE *)(v1 + 432) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 424));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiRenderer::~LiRenderer(LiRenderer *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 416) = &off_1E65EB048;
  *(_BYTE *)(v1 + 432) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 424));
}

{
  LiRenderer::~LiRenderer((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

uint64_t LiRenderer::setRootTransform(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t j;

  v2 = result + 224;
  if (result + 224 != a2)
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)(v2 + j) = *(_QWORD *)(a2 + j);
      v2 += 32;
      a2 += 32;
    }
  }
  return result;
}

__n128 LiRenderer::getRootTransform@<Q0>(LiRenderer *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *((_OWORD *)this + 19);
  *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 18);
  *(_OWORD *)(a2 + 80) = v2;
  v3 = *((_OWORD *)this + 21);
  *(_OWORD *)(a2 + 96) = *((_OWORD *)this + 20);
  *(_OWORD *)(a2 + 112) = v3;
  v4 = *((_OWORD *)this + 15);
  *(_OWORD *)a2 = *((_OWORD *)this + 14);
  *(_OWORD *)(a2 + 16) = v4;
  result = *((__n128 *)this + 16);
  v6 = *((_OWORD *)this + 17);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

PCShared_base **LiRenderer::setBackground(PCShared_base **this, LiImageSource *a2)
{
  return PCPtr<LiImageSource>::operator=<LiImageSource>(this + 48, (PCShared_base *)a2);
}

uint64_t LiRenderer::addFilter(LiRenderer *this, LiImageFilter *a2)
{
  return LiImageFilterChain::append((LiRenderer *)((char *)this + 144), a2);
}

uint64_t LiRenderer::getBoundary(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v7;
  _OWORD v9[2];

  if (*(_BYTE *)(a1 + 184))
  {
    v4 = *(_OWORD *)(a1 + 192);
    v5 = *(_OWORD *)(a1 + 208);
  }
  else
  {
    (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)a1 + 192))(v9);
    v7 = *(_QWORD *)&v9[0];
    PCSharedCount::~PCSharedCount((PCSharedCount *)v9 + 1);
    if (!v7)
      v7 = **(_QWORD **)(a2 + 48);
    (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)v7 + 280))(v9, v7);
    v4 = v9[0];
    v5 = v9[1];
  }
  *a3 = v4;
  a3[1] = v5;
  return 1;
}

__n128 LiRenderer::setBoundary(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 208) = v3;
  *(_BYTE *)(a1 + 184) = 1;
  return result;
}

void LiRenderer::doOneFaceRender(_DWORD *a1@<X0>, LiRenderParameters **a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, CGColorSpace **a5@<X8>)
{
  LiSimpleCamera *v10;
  int v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  LiSceneObject *v21;
  LiRenderParameters *v22;
  float v23;
  uint64_t RenderDevice;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v28;
  int32x4_t v29;
  __n128 v30[29];
  _BYTE v31[1184];
  PCSharedCount v32[53];
  PC_Sp_counted_base *v33;
  char v34;
  double v35;
  double v36;
  double v37;
  double v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  float64x2_t v49;
  float64x2_t v50;
  _QWORD v51[3];
  PCSharedCount v52;
  void *v53;
  int v54;
  uint64_t v55;
  CGColorSpace *v56;
  std::__shared_weak_count *v57;
  double v58[2];
  LiCamera *v59;
  PCSharedCount v60;

  v10 = (LiSimpleCamera *)operator new();
  LiSimpleCamera::LiSimpleCamera(v10);
  v59 = v10;
  PCSharedCount::PCSharedCount(&v60, (LiSimpleCamera *)((char *)v10 + *(_QWORD *)(*(_QWORD *)v10 - 24)));
  if (!v10)
    throw_PCNullPointerException(1);
  (*(void (**)(LiSimpleCamera *, uint64_t))(*(_QWORD *)v10 + 168))(v10, a3);
  (*(void (**)(LiCamera *, _QWORD))(*(_QWORD *)v59 + 384))(v59, 0);
  (*(void (**)(LiCamera *, double))(*(_QWORD *)v59 + 696))(v59, 1.0);
  (*(void (**)(LiCamera *, double))(*(_QWORD *)v59 + 512))(v59, 90.0);
  v11 = a1[102];
  v12 = (double)(v11 / 2);
  v58[0] = v12;
  v58[1] = v12;
  LiRenderParameters::LiRenderParameters((LiRenderParameters *)v51, a2[6]);
  v49 = 0uLL;
  v50.f64[0] = v12;
  v50.f64[1] = v12;
  v48 = 0x3FF0000000000000;
  v45 = 0x3FF0000000000000;
  v42 = 0x3FF0000000000000;
  v39 = 0x3FF0000000000000;
  v40 = 0u;
  v41 = 0u;
  v43 = 0u;
  v44 = 0u;
  v46 = 0u;
  v47 = 0u;
  v35 = 1.0;
  v36 = 0.0;
  v38 = 0.0;
  v37 = 0.0;
  if (!v59)
    throw_PCNullPointerException(1);
  (*(void (**)(LiCamera *, double *))(*(_QWORD *)v59 + 472))(v59, &v35);
  if (&v35 != a4)
  {
    v13 = a4[1];
    v14 = a4[2];
    v15 = a4[3];
    v16 = v35 * *a4 - (v36 * v13 + v37 * v14 + v38 * v15);
    v17 = *a4 * v36 + v35 * v13;
    v18 = *a4 * v38 + v35 * v15;
    v19 = v37 * v15 - v14 * v38;
    v20 = v36 * v14 - v13 * v37;
    v37 = *a4 * v37 + v35 * v14 + v13 * v38 - v36 * v15;
    v38 = v20 + v18;
    v36 = v17 + v19;
    v35 = v16;
  }
  if (!v59)
    throw_PCNullPointerException(1);
  (*(void (**)(LiCamera *, double *))(*(_QWORD *)v59 + 480))(v59, &v35);
  if (!v59)
    throw_PCNullPointerException(1);
  (*(void (**)(LiCamera *, double *))(*(_QWORD *)v59 + 288))(v59, v58);
  if (!v59)
    throw_PCNullPointerException(1);
  (*(void (**)(LiCamera *, float64x2_t *, uint64_t *))(*(_QWORD *)v59 + 296))(v59, &v49, &v39);
  v51[0] = v59;
  LiRenderer::LiRenderer((LiRenderer *)v32);
  v21 = (LiSceneObject *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 176))(a1);
  LiRendererBase::setScene((PCShared_base **)v32, v21);
  LiRendererBase::setCamera((PCShared_base **)v32, v59);
  v22 = a2[6];
  v23 = *((float *)v22 + 48);
  RenderDevice = LiAgent::getRenderDevice(a2);
  LiRenderInstance::LiRenderInstance(v31, v32, (char *)v22 + 160, RenderDevice, v23);
  LiAgent::LiAgent(v30, v51, &v39, 1);
  v29 = vuzp1q_s32((int32x4_t)vcvtq_s64_f64(v49), (int32x4_t)vcvtq_s64_f64(v50));
  LiAgent::setClientROI(v30, (__n128 *)&v29);
  LiRenderInstance::getHelium((LiRenderInstance *)v31, (const LiRenderParameters **)v30, a5);
  LiAgent::~LiAgent((LiAgent *)v30);
  LiRenderInstance::~LiRenderInstance((LiRenderInstance *)v31);
  v32[52].var0 = (PC_Sp_counted_base *)&off_1E65EB048;
  v34 = 0;
  PCWeakCount::~PCWeakCount(&v33);
  v25 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(&v56);
  v53 = &unk_1E64FC2F8;
  if (v54 < 0)
    v28 = 1;
  else
    v28 = v54;
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v53, 0, v28);
  if (v55)
    MEMORY[0x1B5E2914C](v55, 0x1000C8077774924);
  v55 = 0;
  v54 = 0;
  PCSharedCount::~PCSharedCount(&v52);
  PCSharedCount::~PCSharedCount(&v60);
}

void sub_1B2D44560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;
  PCSharedCount *v69;

  LiAgent::~LiAgent((LiAgent *)&a11);
  LiRenderInstance::~LiRenderInstance((LiRenderInstance *)&a69);
  LiRenderer::~LiRenderer((PCSharedCount *)&STACK[0x680]);
  LiRenderParameters::~LiRenderParameters((LiRenderParameters *)&STACK[0x8F8]);
  PCSharedCount::~PCSharedCount(v69);
  _Unwind_Resume(a1);
}

void LiRenderer::doSixFaceRender(LiRenderer *this@<X0>, LiRenderParameters **a2@<X1>, HRenderToEquirect **a3@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  float v10;
  __float2 v11;
  uint64_t v12;
  uint64_t v13;
  CGColorSpace *v14;
  CGColorSpace *v15;
  HGXForm *v16;
  LiRenderParameters *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  float64x2_t v24;
  int v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[8];
  CGColorSpace *v39;
  double v40;
  double sinval;
  double v42;
  _OWORD v43[2];
  int64x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  PCSharedCount v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)this + 102);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 192))(&v47);
  v7 = 0;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  if (v6 >= 0)
    v8 = v6;
  else
    v8 = v6 + 1;
  v9 = v8 >> 1;
  do
  {
    v10 = (double)(int)v7 * 0.785398163;
    v11 = __sincosf_stret(v10);
    *(double *)&v39 = v11.__cosval;
    v40 = v11.__sinval * 0.0;
    sinval = v11.__sinval;
    v42 = v40;
    LiRenderer::doOneFaceRender(this, a2, v47, (double *)&v39, (CGColorSpace **)v38);
    v12 = *((_QWORD *)&v49 + v7);
    v13 = *(_QWORD *)&v38[0];
    if (v12 == *(_QWORD *)&v38[0])
    {
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    }
    else
    {
      if (v12)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        v13 = *(_QWORD *)&v38[0];
      }
      *((_QWORD *)&v49 + v7) = v13;
    }
    ++v7;
  }
  while (v7 != 4);
  v45 = 0;
  v46 = 0;
  v43[0] = xmmword_1B35599B0;
  v43[1] = vdupq_n_s64(0x8000000000000000);
  v44 = vdupq_n_s64(0x3FE6A09E60000000uLL);
  LiRenderer::doOneFaceRender(this, a2, v47, (double *)v44.i64, &v39);
  v14 = v39;
  if ((CGColorSpace *)v51 == v39)
  {
    if ((_QWORD)v51)
      (*(void (**)(_QWORD))(*(_QWORD *)v51 + 24))(v51);
  }
  else
  {
    if ((_QWORD)v51)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v51 + 24))(v51);
      v14 = v39;
    }
    *(_QWORD *)&v51 = v14;
  }
  LiRenderer::doOneFaceRender(this, a2, v47, (double *)v43, &v39);
  v15 = v39;
  if (*((CGColorSpace **)&v51 + 1) == v39)
  {
    if (*((_QWORD *)&v51 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 24))(*((_QWORD *)&v51 + 1));
  }
  else
  {
    if (*((_QWORD *)&v51 + 1))
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v51 + 1) + 24))(*((_QWORD *)&v51 + 1));
      v15 = v39;
    }
    *((_QWORD *)&v51 + 1) = v15;
  }
  v16 = (HGXForm *)HGObject::operator new(0x210uLL);
  HGXForm::HGXForm(v16);
  (*(void (**)(HGXForm *, _QWORD, _QWORD))(*(_QWORD *)v16 + 120))(v16, 0, v51);
  (*(void (**)(HGXForm *, _QWORD, uint64_t))(*(_QWORD *)v16 + 136))(v16, 0, 32);
  HGTransform::HGTransform((HGTransform *)&v39);
  HGTransform::LoadIdentity((HGTransform *)&v39);
  HGTransform::Translate((HGTransform *)&v39, 0.0, (double)-v9, 0.0);
  HGTransform::Scale((HGTransform *)&v39, 1.0, -1.0, 1.0);
  (*(void (**)(HGXForm *, CGColorSpace **))(*(_QWORD *)v16 + 576))(v16, &v39);
  if ((HGXForm *)v51 != v16)
  {
    if ((_QWORD)v51)
      (*(void (**)(_QWORD))(*(_QWORD *)v51 + 24))(v51);
    *(_QWORD *)&v51 = v16;
    (*(void (**)(HGXForm *))(*(_QWORD *)v16 + 16))(v16);
  }
  v17 = a2[20];
  v18 = *((_OWORD *)v17 + 3);
  v20 = *(_OWORD *)v17;
  v19 = *((_OWORD *)v17 + 1);
  v38[2] = *((_OWORD *)v17 + 2);
  v38[3] = v18;
  v38[0] = v20;
  v38[1] = v19;
  v21 = *((_OWORD *)v17 + 7);
  v23 = *((_OWORD *)v17 + 4);
  v22 = *((_OWORD *)v17 + 5);
  v38[6] = *((_OWORD *)v17 + 6);
  v38[7] = v21;
  v38[4] = v23;
  v38[5] = v22;
  if (PCMatrix44Tmpl<double>::invert((double *)v38, (double *)v38, 0.0))
  {
    v37 = 0x3FF0000000000000;
    v34 = 0x3FF0000000000000;
    v31 = 0x3FF0000000000000;
    v28 = 0x3FF0000000000000;
    v24.f64[1] = 0.0;
    v29 = 0u;
    v30 = 0u;
    v32 = 0u;
    v33 = 0u;
    v35 = 0u;
    v25 = v6 + 3;
    v36 = 0u;
    if (v6 >= 0)
      v25 = v6;
    v24.f64[0] = (double)(v25 >> 2);
    PCMatrix44Tmpl<double>::leftTranslate((float64x2_t *)&v28, v24, v24.f64[0], 0.0);
    fx_RenderToEquirect(*((uint64_t *)&v50 + 1), *((uint64_t *)&v49 + 1), *((uint64_t *)&v51 + 1), v51, v49, v50, v9, *((_DWORD *)this + 101), a3, *((_DWORD *)this + 102), (double *)v38, (double *)&v28, (double *)&v28, (double *)&v28, (double *)&v28, (double *)&v28, (double *)&v28);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"LiRenderer::doSixFaceRender: can't invert pixel transform, so no render will be produced.\n", 90);
    *a3 = 0;
  }
  HGTransform::~HGTransform((HGTransform *)&v39);
  (*(void (**)(HGXForm *))(*(_QWORD *)v16 + 24))(v16);
  for (i = 40; i != -8; i -= 8)
  {
    v27 = *(_QWORD *)((char *)&v49 + i);
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  }
  PCSharedCount::~PCSharedCount(&v48);
}

void sub_1B2D449E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

void LiRenderer::getHelium(LiRenderer *this@<X0>, LiRenderParameters **a2@<X1>, HRenderToEquirect **a3@<X8>)
{
  LiRenderParameters *v6;
  char *v7;
  float v8;
  uint64_t RenderDevice;
  LiRenderInstance *v10;

  if (*((_BYTE *)this + 401))
  {
    LiRenderer::doSixFaceRender(this, a2, a3);
  }
  else
  {
    v6 = a2[6];
    v7 = (char *)v6 + 160;
    v8 = *((float *)v6 + 48);
    RenderDevice = LiAgent::getRenderDevice(a2);
    v10 = (LiRenderInstance *)operator new();
    LiRenderInstance::LiRenderInstance(v10, this, v7, RenderDevice, v8);
    LiRenderInstance::getHelium(v10, a2, a3);
    (*(void (**)(LiRenderInstance *))(*(_QWORD *)v10 + 8))(v10);
  }
}

void sub_1B2D44BD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t LiRenderer::applyRenderToEquirect(uint64_t this, int a2, int a3)
{
  *(_BYTE *)(this + 401) = 1;
  *(_DWORD *)(this + 404) = a2;
  *(_DWORD *)(this + 408) = a3;
  return this;
}

uint64_t LiRenderer::getEquirectWidth(LiRenderer *this)
{
  return *((unsigned int *)this + 101);
}

uint64_t LiRenderer::getEquirectHeight(LiRenderer *this)
{
  return *((unsigned int *)this + 102);
}

uint64_t LiRenderer::pixelTransformSupport(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 401))
    return 3;
  else
    return 6;
}

uint64_t LiRenderer::estimateRenderMemory(PCColorSpaceCache *a1, uint64_t a2)
{
  CGColorSpace *v4;
  HGComputeDeviceManager *LegacyColorDescription;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  CGColorSpace *v16[4];
  _BYTE v17[1184];

  v4 = (CGColorSpace *)PCColorSpaceCache::cgRec709Linear(a1);
  LegacyColorDescription = (HGComputeDeviceManager *)FxMakeLegacyColorDescription(v4, 1, (uint64_t)v16);
  HGComputeDeviceManager::GetCPUComputeDevice(LegacyColorDescription, &v14);
  v15 = v14;
  v14 = 0uLL;
  LiRenderInstance::LiRenderInstance(v17, a1, v16, &v15);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  PCCFRef<CGColorSpace *>::~PCCFRef(v16);
  v12 = LiRenderInstance::estimateRenderMemory((uint64_t)v17, a2);
  LiRenderInstance::~LiRenderInstance((LiRenderInstance *)v17);
  return v12;
}

void sub_1B2D44D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  LiRenderInstance::~LiRenderInstance((LiRenderInstance *)va);
  _Unwind_Resume(a1);
}

void LiRenderer::getBackground(const PCSharedCount *this@<X0>, PCSharedCount *a2@<X8>)
{
  a2->var0 = this[48].var0;
  PCSharedCount::PCSharedCount(a2 + 1, this + 49);
}

uint64_t LiRenderer::setBlendBackground(uint64_t this, char a2)
{
  *(_BYTE *)(this + 400) = a2;
  return this;
}

uint64_t LiRenderer::getBlendBackground(LiRenderer *this)
{
  return *((unsigned __int8 *)this + 400);
}

void PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray(uint64_t a1)
{
  PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray(a1);
  JUMPOUT(0x1B5E29170);
}

uint64_t PCArray<LiLightScaledElementID,PCArray_Traits<LiLightScaledElementID>>::~PCArray(uint64_t a1)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E6572318;
  v2 = *(_DWORD *)(a1 + 8);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *(int *)(a1 + 12);
    v5 = *(char **)(a1 + 16);
    if ((v4 & 0x80000000) != 0)
    {
      v6 = &v5[16 * v4 + 8];
      do
      {
        *((_QWORD *)v6 - 1) = 0;
        *(_QWORD *)v6 = 0x3FF0000000000000;
        v6 += 16;
      }
      while (!__CFADD__(v4++, 1));
      *(_DWORD *)(a1 + 8) = v2;
      *(_DWORD *)(a1 + 12) = 0;
      goto LABEL_17;
    }
  }
  else
  {
    if (v3)
    {
      v5 = (char *)operator new[]();
      bzero(v5, 16 * v3);
    }
    else
    {
      v5 = 0;
    }
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
    *(_QWORD *)(a1 + 16) = v5;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = 0;
  if (v5)
LABEL_17:
    MEMORY[0x1B5E2914C](v5, 0x1000C8077774924);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

void LiPadImage::LiPadImage(LiPadImage *this)
{
  *((_QWORD *)this + 9) = &off_1E65EB048;
  *((_QWORD *)this + 10) = 0;
  *((_BYTE *)this + 88) = 1;
  LiImageFilter::LiImageFilter(this, &off_1E6572460);
  *(_QWORD *)this = &off_1E6572358;
  *((_QWORD *)this + 9) = &unk_1E6572440;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)((char *)this + 56) = _Q0;
}

void sub_1B2D44F40(_Unwind_Exception *a1)
{
  uint64_t v1;
  PC_Sp_counted_base **v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v1 + 72) = v4;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount(v2);
  _Unwind_Resume(a1);
}

void LiPadImage::~LiPadImage(PCSharedCount *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = &off_1E65EB048;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));
}

{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = &off_1E65EB048;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));
  JUMPOUT(0x1B5E29170);
}

void `virtual thunk to'LiPadImage::~LiPadImage(LiPadImage *this)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = &off_1E65EB048;
  *(_BYTE *)(v1 + 88) = 0;
  PCWeakCount::~PCWeakCount((PC_Sp_counted_base **)(v1 + 80));
}

{
  LiPadImage::~LiPadImage((PCSharedCount *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24)));
}

__n128 LiPadImage::SetDOD(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 16);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

HGNode *LiPadImage::getHelium@<X0>(LiPadImage *this@<X0>, __int128 **a2@<X1>, HGCrop **a3@<X8>)
{
  HGTextureWrap *v6;
  char *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  HGCrop *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  HGNode *result;
  __int128 v26;
  __int128 v27;
  _OWORD v28[8];
  HGNode *v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  LiAgent::getHelium((LiAgent *)a2, *((LiImageSource **)this + 2), &v29);
  *a3 = 0;
  v6 = (HGTextureWrap *)HGObject::operator new(0x1D0uLL);
  HGTextureWrap::HGTextureWrap(v6);
  (*(void (**)(HGTextureWrap *, _QWORD, HGNode *))(*(_QWORD *)v6 + 120))(v6, 0, v29);
  HGTextureWrap::SetTextureWrapMode((uint64_t)v6, 0, v7);
  v30[0] = 0;
  v30[1] = 0;
  HGTextureWrap::SetTextureBorderColor(v6, (float *)v30);
  v8 = a2[20];
  v9 = v8[3];
  v11 = *v8;
  v10 = v8[1];
  v28[2] = v8[2];
  v28[3] = v9;
  v28[0] = v11;
  v28[1] = v10;
  v12 = v8[7];
  v14 = v8[4];
  v13 = v8[5];
  v28[6] = v8[6];
  v28[7] = v12;
  v28[4] = v14;
  v28[5] = v13;
  v15 = *(_OWORD *)((char *)this + 56);
  v26 = *(_OWORD *)((char *)this + 40);
  v27 = v15;
  PCMatrix44Tmpl<double>::transformRect<double>((double *)v28, (double *)&v26, (uint64_t)&v26);
  v16 = (HGCrop *)HGObject::operator new(0x1A0uLL);
  HGCrop::HGCrop(v16);
  (*(void (**)(HGCrop *, _QWORD, HGTextureWrap *))(*(_QWORD *)v16 + 120))(v16, 0, v6);
  v17 = *(double *)&v26;
  v18 = *((double *)&v26 + 1);
  v19 = *(double *)&v26 + *(double *)&v27;
  v20 = *((double *)&v26 + 1) + *((double *)&v27 + 1);
  v22 = HGRectMake4f(v21, v17, v18, v19, v20);
  (*(void (**)(HGCrop *, _QWORD, float, float, float, float))(*(_QWORD *)v16 + 96))(v16, 0, (float)(int)v22, (float)SHIDWORD(v22), (float)v23, (float)v24);
  *a3 = v16;
  (*(void (**)(HGCrop *))(*(_QWORD *)v16 + 16))(v16);
  (*(void (**)(HGCrop *))(*(_QWORD *)v16 + 24))(v16);
  (*(void (**)(HGTextureWrap *))(*(_QWORD *)v6 + 24))(v6);
  result = v29;
  if (v29)
    return (HGNode *)(*(uint64_t (**)(HGNode *))(*(_QWORD *)v29 + 24))(v29);
  return result;
}

void sub_1B2D45224(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

uint64_t LiPadImage::pixelTransformSupport()
{
  return 6;
}

uint64_t LiPadImage::getBoundary(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 56);
  *a3 = *(_OWORD *)(a1 + 40);
  a3[1] = v3;
  return 1;
}

void LiCollectState::LiCollectState(LiCollectState *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 12) = 0x3FF0000000000000;
  *((_QWORD *)this + 7) = 0x3FF0000000000000;
  *((_QWORD *)this + 2) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_QWORD *)this + 28) = 0x3FF0000000000000;
  *((_QWORD *)this + 23) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)((char *)this + 136) = _Q1;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 44) = 0x3FF0000000000000;
  *((_QWORD *)this + 39) = 0x3FF0000000000000;
  *((_QWORD *)this + 33) = 0x3FF0000000000000;
  *((_QWORD *)this + 34) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *((_QWORD *)this + 49) = 0x3FF0000000000000;
  *((_QWORD *)this + 50) = 0x3FF0000000000000;
  *((_BYTE *)this + 408) = 0;
  LiClipSet::LiClipSet((LiCollectState *)((char *)this + 416));
  *((_QWORD *)this + 58) = 0;
}

uint64_t LiRenderInstance::LiRenderInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &off_1E6572730;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 48);
  LiRenderParameters::LiRenderParameters(a1 + 24, a3, a4);
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  LiClipSet::LiClipSet((LiClipSet *)(a1 + 256));
  LiClipSet::LiClipSet((LiClipSet *)(a1 + 304));
  *(_QWORD *)(a1 + 432) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 392) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 352) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 600) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 560) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 520) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 472) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 480) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 728) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 688) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 648) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 608) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 856) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 816) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 776) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 736) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 864) = xmmword_1B30503B0;
  *(_QWORD *)(a1 + 1000) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 960) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 920) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 880) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_QWORD *)(a1 + 1128) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1088) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1048) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1008) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1136) = &unk_1E656A790;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1160) = &unk_1E656A790;
  return a1;
}

void sub_1B2D45550(_Unwind_Exception *a1)
{
  LiRenderParameters *v1;
  LiClipSet *v2;

  LiClipSet::~LiClipSet(v2);
  LiRenderParameters::~LiRenderParameters(v1);
  _Unwind_Resume(a1);
}

uint64_t LiRenderInstance::LiRenderInstance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  *(_QWORD *)a1 = &off_1E6572730;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 48);
  LiRenderParameters::LiRenderParameters(a1 + 24, a3, a4, a5);
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  LiClipSet::LiClipSet((LiClipSet *)(a1 + 256));
  LiClipSet::LiClipSet((LiClipSet *)(a1 + 304));
  *(_QWORD *)(a1 + 432) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 392) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 352) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_QWORD *)(a1 + 600) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 560) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 520) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 472) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 480) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_QWORD *)(a1 + 728) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 688) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 648) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 608) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_QWORD *)(a1 + 856) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 816) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 776) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 736) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 864) = xmmword_1B30503B0;
  *(_QWORD *)(a1 + 1000) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 960) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 920) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 880) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 984) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_QWORD *)(a1 + 1128) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1088) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1048) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1008) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_QWORD *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1144) = 0;
  *(_QWORD *)(a1 + 1136) = &unk_1E656A790;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1168) = 0;
  *(_QWORD *)(a1 + 1160) = &unk_1E656A790;
  return a1;
}

void sub_1B2D4570C(_Unwind_Exception *a1)
{
  LiRenderParameters *v1;
  LiClipSet *v2;

  LiClipSet::~LiClipSet(v2);
  LiRenderParameters::~LiRenderParameters(v1);
  _Unwind_Resume(a1);
}

void LiRenderInstance::~LiRenderInstance(LiRenderInstance *this)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  *(_QWORD *)this = &off_1E6572730;
  PCPtrArray<LiDrawer>::deleteAll((unsigned int *)this + 290);
  *((_QWORD *)this + 145) = &unk_1E656A7E0;
  v2 = *((_DWORD *)this + 292);
  if (v2 < 0)
    v3 = 1;
  else
    v3 = v2 & ~(v2 >> 31);
  if (v3 == v2)
  {
    v4 = *((int *)this + 293);
    if ((v4 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 147) + 8 * v4) = 0;
        v5 = __CFADD__(v4++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v3)
    {
      v6 = (void *)operator new[]();
      bzero(v6, 8 * v3);
    }
    else
    {
      v6 = 0;
    }
    v7 = *((_QWORD *)this + 147);
    if (v7)
      MEMORY[0x1B5E2914C](v7, 0x1000C8077774924);
    *((_QWORD *)this + 147) = v6;
  }
  *((_DWORD *)this + 292) = v3;
  *((_DWORD *)this + 293) = 0;
  v8 = *((_QWORD *)this + 147);
  if (v8)
    MEMORY[0x1B5E2914C](v8, 0x1000C8077774924);
  *((_QWORD *)this + 147) = 0;
  *((_DWORD *)this + 292) = 0;
  *((_QWORD *)this + 142) = &unk_1E656A7E0;
  v9 = *((_DWORD *)this + 286);
  if (v9 < 0)
    v10 = 1;
  else
    v10 = v9 & ~(v9 >> 31);
  if (v10 == v9)
  {
    v11 = *((int *)this + 287);
    if ((v11 & 0x80000000) != 0)
    {
      do
      {
        *(_QWORD *)(*((_QWORD *)this + 144) + 8 * v11) = 0;
        v5 = __CFADD__(v11++, 1);
      }
      while (!v5);
    }
  }
  else
  {
    if (v10)
    {
      v12 = (void *)operator new[]();
      bzero(v12, 8 * v10);
    }
    else
    {
      v12 = 0;
    }
    v13 = *((_QWORD *)this + 144);
    if (v13)
      MEMORY[0x1B5E2914C](v13, 0x1000C8077774924);
    *((_QWORD *)this + 144) = v12;
  }
  *((_DWORD *)this + 286) = v10;
  *((_DWORD *)this + 287) = 0;
  v14 = *((_QWORD *)this + 144);
  if (v14)
    MEMORY[0x1B5E2914C](v14, 0x1000C8077774924);
  *((_QWORD *)this + 144) = 0;
  *((_DWORD *)this + 286) = 0;
  LiClipSet::~LiClipSet((LiRenderInstance *)((char *)this + 304));
  LiClipSet::~LiClipSet((LiRenderInstance *)((char *)this + 256));
  std::shared_ptr<HGCPUComputeDevice const>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  PCCFRef<CGColorSpace *>::~PCCFRef((CGColorSpace **)this + 23);
  *((_QWORD *)this + 7) = &unk_1E64FC2F8;
  if (*((int *)this + 16) < 0)
    v15 = 1;
  else
    v15 = *((_DWORD *)this + 16);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)this + 56, 0, v15);
  v16 = *((_QWORD *)this + 9);
  if (v16)
    MEMORY[0x1B5E2914C](v16, 0x1000C8077774924);
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 16) = 0;
  PCSharedCount::~PCSharedCount((PCSharedCount *)this + 6);
}

{
  LiRenderInstance::~LiRenderInstance(this);
  JUMPOUT(0x1B5E29170);
}

unsigned int *PCPtrArray<LiDrawer>::deleteAll(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v8;

  v1 = result;
  v2 = result[3];
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      if (i >= (int)v1[3])
        PCArray_base::badIndex((PCArray_base *)result);
      result = *(unsigned int **)(*((_QWORD *)v1 + 2) + 8 * i);
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      if (i >= (int)v1[3])
        PCArray_base::badIndex((PCArray_base *)result);
      *(_QWORD *)(*((_QWORD *)v1 + 2) + 8 * i) = 0;
    }
  }
  v4 = v1[2];
  if (v4 < 0)
    v5 = 1;
  else
    v5 = v4 & ~(v4 >> 31);
  if (v5 == v4)
  {
    v6 = (int)v1[3];
    if ((v6 & 0x80000000) != 0)
    {
      do
        *(_QWORD *)(*((_QWORD *)v1 + 2) + 8 * v6) = 0;
      while (!__CFADD__(v6++, 1));
    }
  }
  else
  {
    if (v5)
    {
      v8 = (void *)operator new[]();
      bzero(v8, 8 * v5);
    }
    else
    {
      v8 = 0;
    }
    result = (unsigned int *)*((_QWORD *)v1 + 2);
    if (result)
      result = (unsigned int *)MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
    *((_QWORD *)v1 + 2) = v8;
  }
  v1[2] = v5;
  v1[3] = 0;
  return result;
}

void LiRenderInstance::getHelium(LiRenderInstance *this@<X0>, const LiRenderParameters **a2@<X1>, CGColorSpace **a3@<X8>)
{
  uint64_t i;
  _OWORD *v7;
  __int128 v8;
  double *v9;
  double v10;
  double v11;
  _BYTE v12[128];

  *((_BYTE *)this + 16) = (*(unsigned __int8 *)(*((_QWORD *)this + 1) + 48) | *((unsigned __int8 *)a2 + 248)) != 0;
  LiAgent::getImageToDocumentTransform((LiAgent *)a2, (uint64_t)v12);
  if (v12 != (char *)this + 352)
  {
    for (i = 0; i != 128; i += 32)
    {
      v7 = (_OWORD *)((char *)this + i + 352);
      v8 = *(_OWORD *)&v12[i + 16];
      *v7 = *(_OWORD *)&v12[i];
      v7[1] = v8;
    }
  }
  v9 = (double *)a2[20];
  v10 = *v9 * *v9 + v9[1] * v9[1] + v9[2] * v9[2] + v9[3] * v9[3];
  if ((v10 <= -0.0000001 || v10 >= 0.0000001)
    && ((v11 = v9[4] * v9[4] + v9[5] * v9[5] + v9[6] * v9[6] + v9[7] * v9[7], v11 <= -0.0000001) || v11 >= 0.0000001))
  {
    LiClipSet::operator=((uint64_t)this + 256, *((_QWORD *)this + 1) + 72);
    LiRenderInstance::setRenderParameters(this, a2[6]);
    *((_DWORD *)a2 + 8) = 1;
    LiRenderInstance::buildHeliumGraph(this, (__n128 *)a2, a3);
  }
  else
  {
    *a3 = 0;
  }
}

void LiRenderInstance::setRenderParameters(LiRenderInstance *this, const LiRenderParameters *a2)
{
  LiImageFilterChain *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  PCSharedCount v14;

  *(_OWORD *)((char *)this + 24) = *(_OWORD *)a2;
  v4 = (LiRenderInstance *)((char *)this + 40);
  LiImageFilterChain::operator=((uint64_t)this + 40, (uint64_t)a2 + 16);
  v5 = *(_OWORD *)((char *)a2 + 88);
  v6 = *(_OWORD *)((char *)a2 + 72);
  *((_OWORD *)this + 5) = *(_OWORD *)((char *)a2 + 56);
  *((_OWORD *)this + 6) = v6;
  *((_OWORD *)this + 7) = v5;
  v7 = *(_OWORD *)((char *)a2 + 120);
  v8 = *(_OWORD *)((char *)a2 + 136);
  v9 = *(_OWORD *)((char *)a2 + 104);
  *((_QWORD *)this + 22) = *((_QWORD *)a2 + 19);
  *((_OWORD *)this + 9) = v7;
  *((_OWORD *)this + 10) = v8;
  *((_OWORD *)this + 8) = v9;
  PCCFRef<CGColorSpace *>::operator=((CGColorSpace **)this + 23, (CGColorSpace **)a2 + 20);
  v10 = *((_QWORD *)a2 + 21);
  *((_DWORD *)this + 50) = *((_DWORD *)a2 + 44);
  *((_QWORD *)this + 24) = v10;
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 184);
  *((_DWORD *)this + 54) = *((_DWORD *)a2 + 48);
  std::shared_ptr<HGComputeDevice const>::operator=[abi:ne180100]<HGGPUComputeDevice const,void>((_QWORD *)this + 28, (uint64_t *)a2 + 25);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 192))(&v13);
  v11 = v13;
  PCSharedCount::~PCSharedCount(&v14);
  if (v11)
  {
    *((_QWORD *)this + 10) = *((_QWORD *)this + 1);
    *((_QWORD *)this + 3) = v11;
    *((_QWORD *)this + 4) = 0;
    LiImageFilterChain::clear(v4);
  }
  v12 = *((_QWORD *)this + 1);
  if (*(_BYTE *)(v12 + 48))
  {
    --*((_DWORD *)this + 24);
    *((_QWORD *)this + 11) = v12 + 120;
    *((_QWORD *)this + 4) = v12 + 224;
  }
  LiImageFilterChain::append(v4, (const LiImageFilterChain *)(v12 + 144));
}

void LiRenderInstance::buildHeliumGraph(LiRenderInstance *this@<X0>, __n128 *a2@<X1>, CGColorSpace **a3@<X8>)
{
  LiRenderInstance *v6;
  __int128 v7;
  char *v8;
  uint64_t i;
  uint64_t j;
  unint64_t v11;
  const LiClipSet *WorldClipPlanes;
  void ***v13;
  __int128 v14;
  uint64_t v15;
  PCSharedCount v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char *v21;
  void ***v22;
  PCSharedCount v23;

  v6 = (LiRenderInstance *)a2[10].n128_u64[0];
  if (LiAgent::haveROI((LiAgent *)a2))
  {
    LiAgent::getROI(a2, (__n128 *)&v17);
    v7 = v17;
  }
  else
  {
    v7 = xmmword_1B30503B0;
  }
  v14 = v7;
  *((_QWORD *)this + 30) = LiAgent::getHeliumRenderer((LiRenderParameters **)a2);
  v8 = (char *)this + 736;
  if (v6 != (LiRenderInstance *)((char *)this + 736))
  {
    for (i = 0; i != 4; ++i)
    {
      for (j = 0; j != 32; j += 8)
        *(_QWORD *)&v8[j] = *(_QWORD *)((char *)v6 + j);
      v8 += 32;
      v6 = (LiRenderInstance *)((char *)v6 + 32);
    }
  }
  *((_OWORD *)this + 54) = v14;
  LiAgent::get2DClipPlanes((LiAgent *)a2, (LiClipSet *)&v17);
  LiClipSet::operator=((uint64_t)this + 304, (uint64_t)&v17);
  LiClipSet::~LiClipSet((LiClipSet *)&v17);
  (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 1) + 192))(&v17);
  v11 = v17;
  PCSharedCount::~PCSharedCount((PCSharedCount *)&v17 + 1);
  if (!v11)
  {
    WorldClipPlanes = (const LiClipSet *)LiAgent::getWorldClipPlanes((LiAgent *)a2);
    LiClipSet::add((LiRenderInstance *)((char *)this + 256), WorldClipPlanes);
  }
  LiCompositor::LiCompositor((LiCompositor *)&v17);
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 216))(&v15);
  v18 = v15;
  PCSharedCount::PCSharedCount(&v23, &v16);
  PCSharedCount::operator=(&v19, (uint64_t *)&v23);
  PCSharedCount::~PCSharedCount(&v23);
  PCSharedCount::~PCSharedCount(&v16);
  v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 232))(*((_QWORD *)this + 1));
  v13 = LiRenderInstance::collect(this);
  v21 = (char *)this + 24;
  v22 = v13;
  LiCompositor::getHelium((LiCompositor *)&v17, (LiAgent *)a2, a3);
  LiCompositor::~LiCompositor((LiCompositor *)&v17);
}

void sub_1B2D45EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  PCSharedCount *v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  PCSharedCount::~PCSharedCount((PCSharedCount *)(v6 - 56));
  PCSharedCount::~PCSharedCount(v5);
  LiCompositor::~LiCompositor((LiCompositor *)va);
  _Unwind_Resume(a1);
}

uint64_t LiRenderInstance::estimateRenderMemory(uint64_t a1, uint64_t a2)
{
  return LiRenderInstance::estimateRenderMemory(a1, a2, *(char **)(*(_QWORD *)(a1 + 8) + 16));
}

uint64_t LiRenderInstance::estimateRenderMemory(uint64_t a1, uint64_t a2, char *a3)
{
  char *v3;
  _DWORD *v6;
  _DWORD *v7;
  LiImageSource *v8;
  uint64_t Tail;
  int v10;
  void *v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  LiImageSource *v18;
  PCSharedCount v19;
  void *v20;
  int v21;
  uint64_t v22;

  v3 = a3;
  if (a3)
  {
    if (v6)
    {
      v7 = v6;
      (*(void (**)(LiImageSource **__return_ptr))(*(_QWORD *)v6 + 160))(&v18);
      v8 = v18;
      PCSharedCount::~PCSharedCount(&v19);
      if (v7[159])
      {
        LiImageFilterChain::LiImageFilterChain((LiImageFilterChain *)&v18, (const LiImageFilterChain *)(v7 + 152));
        LiImageFilterChain::setInput((PCShared_base **)&v18, v8);
        Tail = LiImageFilterChain::getTail((LiImageFilterChain *)&v18);
        v3 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Tail + 112))(Tail, a2);
        v20 = &unk_1E64FC2F8;
        if (v21 < 0)
          v10 = 1;
        else
          v10 = v21;
        PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)&v20, 0, v10);
        if (v22)
          MEMORY[0x1B5E2914C](v22, 0x1000C8077774924);
        v22 = 0;
        v21 = 0;
        PCSharedCount::~PCSharedCount(&v19);
      }
      else
      {
        return (*(uint64_t (**)(LiImageSource *, uint64_t))(*(_QWORD *)v8 + 112))(v8, a2);
      }
    }
    else
    {
      if (v11 && (v12 = v11, v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 136))(v11), v13 >= 1))
      {
        v14 = v13;
        v15 = 0;
        v3 = 0;
        do
        {
          v16 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v12 + 144))(v12, v15);
          v3 += LiRenderInstance::estimateRenderMemory(a1, a2, v16);
          v15 = (v15 + 1);
        }
        while (v14 != (_DWORD)v15);
      }
      else
      {
        return 0;
      }
    }
  }
  return (uint64_t)v3;
}

void sub_1B2D460E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  LiImageFilterChain::~LiImageFilterChain((PCSharedCount *)va);
  _Unwind_Resume(a1);
}

uint64_t LiRenderInstance::add(LiRenderInstance *this, LiDrawer *a2)
{
  char *v4;
  int v5;
  int v6;
  uint64_t result;

  v4 = (char *)this + 1160;
  v5 = *((_DWORD *)this + 293);
  if (*((_DWORD *)this + 292) <= v5)
    v6 = (2 * (v5 + 1)) | 1;
  else
    v6 = *((_DWORD *)this + 292);
  result = PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)v4, v5 + 1, v6);
  *(_QWORD *)(*((_QWORD *)this + 147) + 8 * *((int *)this + 293) - 8) = a2;
  return result;
}

uint64_t LiRenderInstance::getRenderer(LiRenderInstance *this)
{
  return *((_QWORD *)this + 30);
}

uint64_t LiRenderInstance::getWorkingColorSpace(LiRenderInstance *this)
{
  return FxColorDescription::getCGColorSpace((FxColorDescription *)((char *)this + 184));
}

uint64_t LiRenderInstance::getWorkingColorDescription(LiRenderInstance *this)
{
  return (uint64_t)this + 184;
}

float LiRenderInstance::getBlendingGamma(LiRenderInstance *this)
{
  return *((float *)this + 54);
}

uint64_t LiRenderInstance::getCamera(LiRenderInstance *this)
{
  uint64_t v2;
  uint64_t v4;
  PCSharedCount v5;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 192))(&v4);
  v2 = v4;
  PCSharedCount::~PCSharedCount(&v5);
  if (!v2)
    return *((_QWORD *)this + 3);
  return v2;
}

double LiRenderInstance::getRootTransform@<D0>(LiRenderInstance *this@<X0>, _OWORD *a2@<X8>)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = (__int128 *)*((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *v2;
    v4 = v2[1];
    v5 = v2[3];
    a2[2] = v2[2];
    a2[3] = v5;
    *a2 = v3;
    a2[1] = v4;
    v6 = v2[4];
    v7 = v2[5];
    v8 = v2[7];
    a2[6] = v2[6];
    a2[7] = v8;
    a2[4] = v6;
    a2[5] = v7;
  }
  else
  {
    *(_QWORD *)&v6 = LiRenderer::getRootTransform((LiRenderer *)*((_QWORD *)this + 1), (uint64_t)a2).n128_u64[0];
  }
  return *(double *)&v6;
}

uint64_t LiImageFilterChain::clear(LiImageFilterChain *this)
{
  char *v2;
  int v3;
  uint64_t result;

  v2 = (char *)this + 16;
  if (*((int *)this + 6) < 0)
    v3 = 1;
  else
    v3 = *((_DWORD *)this + 6);
  PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)v2, 0, v3);
  result = *((_QWORD *)this + 4);
  if (result)
    result = MEMORY[0x1B5E2914C](result, 0x1000C8077774924);
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

void ***LiRenderInstance::collect(LiRenderInstance *this)
{
  LiGroupDrawer *v2;
  int v3;
  int v4;
  uint64_t Camera;
  uint64_t i;
  _OWORD *v7;
  __int128 v8;
  uint64_t j;
  _OWORD *v10;
  __int128 v11;
  uint64_t k;
  char *v13;
  __int128 v14;
  uint64_t v15;
  LiRenderInstance *v16;
  uint64_t m;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;
  float64x2_t v27;
  float64x2_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unint64_t n;
  void ****v37;
  __int128 v38;
  uint64_t ii;
  void ****v40;
  __int128 v41;
  uint64_t jj;
  void ****v43;
  __int128 v44;
  int v45;
  PCArray_base *v46;
  int v47;
  uint64_t v48;
  uint64_t kk;
  double *v50;
  void ***v51;
  _OWORD v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  unsigned __int128 v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  _OWORD v68[8];
  unsigned __int128 v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  void ***v77[2];
  __int128 v78[25];
  _BYTE v79[56];

  *((double *)this + 94) = *((double *)this + 94) * 0.0;
  *((double *)this + 98) = *((double *)this + 98) * 0.0;
  *((double *)this + 102) = *((double *)this + 102) * 0.0;
  *((double *)this + 106) = *((double *)this + 106) * 0.0;
  LiCollectState::LiCollectState((LiCollectState *)v77);
  v2 = (LiGroupDrawer *)operator new();
  LiGroupDrawer::LiGroupDrawer(v2);
  v77[0] = (void ***)v2;
  v3 = *((_DWORD *)this + 293);
  if (*((_DWORD *)this + 292) <= v3)
    v4 = (2 * (v3 + 1)) | 1;
  else
    v4 = *((_DWORD *)this + 292);
  PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)this + 1160, v3 + 1, v4);
  *(_QWORD *)(*((_QWORD *)this + 147) + 8 * *((int *)this + 293) - 8) = v2;
  Camera = LiRenderInstance::getCamera(this);
  (*(void (**)(unsigned __int128 *__return_ptr))(*(_QWORD *)Camera + 24))(&v69);
  if (&v69 != (unsigned __int128 *)((char *)this + 608))
  {
    for (i = 0; i != 128; i += 32)
    {
      v7 = (_OWORD *)((char *)this + i + 608);
      v8 = *(unsigned __int128 *)((char *)&v69 + i + 16);
      *v7 = *(unsigned __int128 *)((char *)&v69 + i);
      v7[1] = v8;
    }
  }
  (*(void (**)(unsigned __int128 *__return_ptr, uint64_t))(*(_QWORD *)Camera + 32))(&v69, Camera);
  if (&v69 != (unsigned __int128 *)((char *)this + 880))
  {
    for (j = 0; j != 128; j += 32)
    {
      v10 = (_OWORD *)((char *)this + j + 880);
      v11 = *(unsigned __int128 *)((char *)&v69 + j + 16);
      *v10 = *(unsigned __int128 *)((char *)&v69 + j);
      v10[1] = v11;
    }
  }
  for (k = 0; k != 128; k += 32)
  {
    v13 = (char *)this + k;
    v14 = *(_OWORD *)((char *)this + k + 896);
    *((_OWORD *)v13 + 30) = *(_OWORD *)((char *)this + k + 880);
    *((_OWORD *)v13 + 31) = v14;
  }
  PCMatrix44Tmpl<double>::rightMult((uint64_t)this + 480, (double *)this + 76);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)this + 880, (double *)this + 92);
  v15 = 0;
  v16 = this;
  do
  {
    for (m = 0; m != 32; m += 16)
      *(_OWORD *)((char *)v16 + m + 1008) = *(_OWORD *)((char *)v16 + m + 480);
    ++v15;
    v16 = (LiRenderInstance *)((char *)v16 + 32);
  }
  while (v15 != 4);
  PCMatrix44Tmpl<double>::leftMult((uint64_t)this + 1008, (double *)this + 92);
  v18 = (float64x2_t *)*((_QWORD *)this + 4);
  if (v18)
  {
    v19 = *v18;
    v20 = v18[1];
    v21 = v18[3];
    v71 = v18[2];
    v72 = v21;
    v69 = (unsigned __int128)v19;
    v70 = v20;
    v22 = v18[4];
    v23 = v18[5];
    v24 = v18[7];
    v75 = v18[6];
    v76 = v24;
    v73 = v22;
    v74 = v23;
  }
  else
  {
    LiRenderer::getRootTransform(*((LiRenderer **)this + 1), (uint64_t)&v69);
  }
  *((_BYTE *)this + 248) = PCMatrix44Tmpl<double>::determinant((double *)&v69) < 0.0;
  v25 = *((float64x2_t *)this + 35);
  v73 = *((float64x2_t *)this + 34);
  v74 = v25;
  v26 = *((float64x2_t *)this + 37);
  v75 = *((float64x2_t *)this + 36);
  v76 = v26;
  v27 = *((float64x2_t *)this + 31);
  v69 = *((_OWORD *)this + 30);
  v70 = v27;
  v28 = *((float64x2_t *)this + 33);
  v71 = *((float64x2_t *)this + 32);
  v72 = v28;
  v29 = (__int128 *)*((_QWORD *)this + 4);
  if (v29)
  {
    v30 = *v29;
    v31 = v29[1];
    v32 = v29[3];
    v68[2] = v29[2];
    v68[3] = v32;
    v68[0] = v30;
    v68[1] = v31;
    v33 = v29[4];
    v34 = v29[5];
    v35 = v29[7];
    v68[6] = v29[6];
    v68[7] = v35;
    v68[4] = v33;
    v68[5] = v34;
  }
  else
  {
    LiRenderer::getRootTransform(*((LiRenderer **)this + 1), (uint64_t)v68);
  }
  PCMatrix44Tmpl<double>::rightMult((uint64_t)&v69, (double *)v68);
  for (n = 0; n != 128; n += 32)
  {
    v37 = &v77[n / 8];
    v38 = v68[n / 0x10 + 1];
    *((_OWORD *)v37 + 1) = v68[n / 0x10];
    *((_OWORD *)v37 + 2) = v38;
  }
  for (ii = 0; ii != 16; ii += 4)
  {
    v40 = &v77[ii];
    v41 = *(unsigned __int128 *)((char *)&v69 + ii * 8 + 16);
    *((_OWORD *)v40 + 17) = *(unsigned __int128 *)((char *)&v69 + ii * 8);
    *((_OWORD *)v40 + 18) = v41;
  }
  PCMatrix44Tmpl<double>::operator*((uint64_t)this + 608, v78, (uint64_t)&v60);
  for (jj = 0; jj != 16; jj += 4)
  {
    v43 = &v77[jj];
    v44 = *(unsigned __int128 *)((char *)&v60 + jj * 8 + 16);
    *((_OWORD *)v43 + 9) = *(unsigned __int128 *)((char *)&v60 + jj * 8);
    *((_OWORD *)v43 + 10) = v44;
  }
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v45 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)Camera + 96))(Camera, &v57);
  v46 = (PCArray_base *)(*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)Camera + 104))(Camera, &v54);
  v47 = (int)v46;
  if (v45)
  {
    v60 = __PAIR128__(v59, *((unint64_t *)&v58 + 1));
    v61.f64[0] = *((float64_t *)&v59 + 1);
    v61.f64[1] = -(*((double *)&v58 + 1) * *(double *)&v57
                 + *(double *)&v59 * *((double *)&v57 + 1)
                 + *((double *)&v59 + 1) * *(double *)&v58);
    LiClipSet::add((uint64_t)v79, (uint64_t)&v60, 0);
  }
  if (v47 && *(_BYTE *)(*((_QWORD *)this + 1) + 49))
  {
    v60 = __PAIR128__(v56, *((unint64_t *)&v55 + 1));
    v61.f64[0] = *((float64_t *)&v56 + 1);
    v61.f64[1] = -(*((double *)&v55 + 1) * *(double *)&v54
                 + *(double *)&v56 * *((double *)&v54 + 1)
                 + *((double *)&v56 + 1) * *(double *)&v55);
    LiClipSet::add((uint64_t)v79, (uint64_t)&v60, 0);
  }
  v48 = *((unsigned int *)this + 79);
  if ((_DWORD)v48)
  {
    v66 = v75;
    v67 = v76;
    v60 = v69;
    v61 = v70;
    v62 = v71;
    v63 = v72;
    v64 = vmulq_f64(v73, (float64x2_t)0);
    v65 = vmulq_f64(v74, (float64x2_t)0);
    if ((int)v48 >= 1)
    {
      for (kk = 0; kk != v48; ++kk)
      {
        if (kk >= *((int *)this + 79))
          PCArray_base::badIndex(v46);
        v50 = (double *)(*((_QWORD *)this + 40) + 32 * kk);
        memset(v53, 0, sizeof(v53));
        PCMatrix44Tmpl<double>::transform_row<double>((double *)&v60, v50, (double *)v53);
        LiClipSet::add((uint64_t)v79, (uint64_t)v53, 0);
      }
    }
  }
  transform((PCArray_base *)v68, (uint64_t)v79);
  LiRenderInstance::collect3D(this, *(LiSceneObject **)(*((_QWORD *)this + 1) + 16), v77);
  v51 = v77[0];
  LiClipSet::~LiClipSet((LiClipSet *)v79);
  return v51;
}

void sub_1B2D46714(_Unwind_Exception *a1)
{
  LiClipSet::~LiClipSet((LiClipSet *)&STACK[0x3A8]);
  _Unwind_Resume(a1);
}

uint64_t LiRenderInstance::collect3D(LiRenderInstance *this, LiSceneObject *a2, void ****a3)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v19;
  double *v20;
  LiCollectState *v21;
  uint64_t v22;
  char *v23;
  _OWORD *v24;
  __int128 v25;
  float64x2_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  LiClipSet *v51;
  const LiPlaneTransform *v52;
  LiGeode *v53;
  LiGroup *v54;
  Li3DGroupForEquirect *v55;
  LiCollectState *v56;
  void ***v57;
  float64x2_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;

  result = LiRenderParameters::shouldOmit((LiRenderInstance *)((char *)this + 24), a2);
  if ((result & 1) == 0)
  {
    if (*(_BYTE *)(*((_QWORD *)this + 1) + 48))
    {
      if (!*((_BYTE *)a2 + 552))
        return result;
    }
    else if (!*((_BYTE *)a2 + 553))
    {
      return result;
    }
    v7 = *(_OWORD *)((char *)a2 + 88);
    v62 = *(_OWORD *)((char *)a2 + 72);
    v63 = v7;
    v8 = *(_OWORD *)((char *)a2 + 120);
    v64 = *(_OWORD *)((char *)a2 + 104);
    v65 = v8;
    v9 = *(_OWORD *)((char *)a2 + 24);
    v58 = *(float64x2_t *)((char *)a2 + 8);
    v59 = v9;
    v10 = *(_OWORD *)((char *)a2 + 56);
    v60 = *(_OWORD *)((char *)a2 + 40);
    v61 = v10;
    v11 = *((_DWORD *)a2 + 140);
    if (v11)
    {
      v12 = operator new();
      v13 = v12;
      *(_QWORD *)(v12 + 80) = 0x3FF0000000000000;
      *(_QWORD *)(v12 + 40) = 0x3FF0000000000000;
      *(_QWORD *)v12 = 0x3FF0000000000000;
      *(_OWORD *)(v12 + 8) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      *(_OWORD *)(v12 + 48) = 0u;
      *(_OWORD *)(v12 + 64) = 0u;
      *(_OWORD *)(v12 + 88) = 0u;
      *(_OWORD *)(v12 + 104) = 0u;
      *(_QWORD *)(v12 + 208) = 0x3FF0000000000000;
      *(_QWORD *)(v12 + 168) = 0x3FF0000000000000;
      __asm { FMOV            V1.2D, #1.0 }
      *(_OWORD *)(v12 + 120) = _Q1;
      *(_OWORD *)(v12 + 136) = 0u;
      *(_OWORD *)(v12 + 152) = 0u;
      *(_OWORD *)(v12 + 176) = 0u;
      *(_OWORD *)(v12 + 192) = 0u;
      *(_OWORD *)(v12 + 232) = 0u;
      *(_OWORD *)(v12 + 216) = 0u;
      v19 = v12 + 256;
      *(_QWORD *)(v12 + 336) = 0x3FF0000000000000;
      *(_QWORD *)(v12 + 296) = 0x3FF0000000000000;
      *(_OWORD *)(v12 + 248) = _Q1;
      *(_OWORD *)(v12 + 280) = 0u;
      *(_OWORD *)(v12 + 264) = 0u;
      *(_OWORD *)(v12 + 304) = 0u;
      *(_OWORD *)(v12 + 320) = 0u;
      *(_OWORD *)(v12 + 360) = 0u;
      *(_OWORD *)(v12 + 344) = 0u;
      v20 = (double *)(v12 + 384);
      *(_QWORD *)(v12 + 504) = 0x3FF0000000000000;
      *(_QWORD *)(v12 + 464) = 0x3FF0000000000000;
      *(_QWORD *)(v12 + 424) = 0x3FF0000000000000;
      *(_OWORD *)(v12 + 376) = _Q1;
      *(_OWORD *)(v12 + 408) = 0u;
      *(_OWORD *)(v12 + 392) = 0u;
      *(_OWORD *)(v12 + 432) = 0u;
      *(_OWORD *)(v12 + 448) = 0u;
      *(_OWORD *)(v12 + 488) = 0u;
      *(_OWORD *)(v12 + 472) = 0u;
      if (v11 <= 2)
        v21 = (LiCollectState *)a3;
      else
        v21 = 0;
      if (v11 <= 2 && (LiCollectState *)((char *)v21 + 144) != (LiCollectState *)v12)
      {
        v22 = 0;
        v23 = (char *)v21 + 144;
        do
        {
          v24 = (_OWORD *)(v12 + v22);
          v25 = *(_OWORD *)&v23[v22 + 16];
          *v24 = *(_OWORD *)&v23[v22];
          v24[1] = v25;
          v22 += 32;
        }
        while (v22 != 128);
      }
      PCMatrix44Tmpl<double>::orthoNormalize(v12);
      if (PCMatrix44Tmpl<double>::planarInverseW(v13 + 128, (double *)v13, 0.0))
      {
        if (v11 == 1)
        {
          v27 = v63;
          *(_OWORD *)(v19 + 64) = v62;
          *(_OWORD *)(v19 + 80) = v27;
          v28 = v65;
          *(_OWORD *)(v19 + 96) = v64;
          *(_OWORD *)(v19 + 112) = v28;
          v29 = v59;
          *(float64x2_t *)v19 = v58;
          *(_OWORD *)(v19 + 16) = v29;
          v30 = v61;
          *(_OWORD *)(v19 + 32) = v60;
          *(_OWORD *)(v19 + 48) = v30;
          PCMatrix44Tmpl<double>::orthoNormalize(v19);
          if (PCMatrix44Tmpl<double>::planarInverseW((uint64_t)v20, (double *)v19, 0.0))
            PCMatrix44Tmpl<double>::rightMult(v13 + 128, v20);
        }
        *(_QWORD *)(v13 + 216) = 0;
        *(_QWORD *)(v13 + 184) = 0;
        *(_QWORD *)(v13 + 152) = 0;
        v31 = *((double *)&v59 + 1);
        v32 = *((double *)&v61 + 1);
        v33 = *((double *)&v63 + 1);
        v34 = *((double *)&v65 + 1);
        *((_QWORD *)&v59 + 1) = 0;
        *((_QWORD *)&v61 + 1) = 0;
        *((_QWORD *)&v63 + 1) = 0;
        PCMatrix44Tmpl<double>::leftMult((uint64_t)&v58, (double *)(v13 + 128));
        if (v34 <= -0.0000001 || (v26.f64[0] = 0.0000001, v34 >= 0.0000001))
        {
          v26.f64[0] = v31 * (1.0 / v34);
          v26 = PCMatrix44Tmpl<double>::leftTranslate(&v58, v26, v32 * (1.0 / v34), v33 * (1.0 / v34));
        }
      }
      MEMORY[0x1B5E29170](v13, 0x1000C407EBBDD04, (__n128)v26);
    }
    v35 = operator new();
    v36 = *((_OWORD *)a3 + 7);
    *(_OWORD *)(v35 + 96) = *((_OWORD *)a3 + 6);
    *(_OWORD *)(v35 + 112) = v36;
    v37 = *((_OWORD *)a3 + 1);
    *(_OWORD *)v35 = *(_OWORD *)a3;
    *(_OWORD *)(v35 + 16) = v37;
    v38 = *((_OWORD *)a3 + 3);
    *(_OWORD *)(v35 + 32) = *((_OWORD *)a3 + 2);
    *(_OWORD *)(v35 + 48) = v38;
    v39 = *((_OWORD *)a3 + 5);
    *(_OWORD *)(v35 + 64) = *((_OWORD *)a3 + 4);
    *(_OWORD *)(v35 + 80) = v39;
    v40 = *((_OWORD *)a3 + 15);
    *(_OWORD *)(v35 + 224) = *((_OWORD *)a3 + 14);
    *(_OWORD *)(v35 + 240) = v40;
    v41 = *((_OWORD *)a3 + 9);
    *(_OWORD *)(v35 + 128) = *((_OWORD *)a3 + 8);
    *(_OWORD *)(v35 + 144) = v41;
    v42 = *((_OWORD *)a3 + 11);
    *(_OWORD *)(v35 + 160) = *((_OWORD *)a3 + 10);
    *(_OWORD *)(v35 + 176) = v42;
    v43 = *((_OWORD *)a3 + 13);
    *(_OWORD *)(v35 + 192) = *((_OWORD *)a3 + 12);
    *(_OWORD *)(v35 + 208) = v43;
    v44 = *((_OWORD *)a3 + 16);
    v45 = *((_OWORD *)a3 + 17);
    v46 = *((_OWORD *)a3 + 19);
    *(_OWORD *)(v35 + 288) = *((_OWORD *)a3 + 18);
    *(_OWORD *)(v35 + 304) = v46;
    *(_OWORD *)(v35 + 256) = v44;
    *(_OWORD *)(v35 + 272) = v45;
    v47 = *((_OWORD *)a3 + 20);
    v48 = *((_OWORD *)a3 + 21);
    v49 = *((_OWORD *)a3 + 24);
    *(_OWORD *)(v35 + 368) = *((_OWORD *)a3 + 23);
    *(_OWORD *)(v35 + 384) = v49;
    v50 = *((_OWORD *)a3 + 22);
    *(_OWORD *)(v35 + 336) = v48;
    *(_OWORD *)(v35 + 352) = v50;
    *(_OWORD *)(v35 + 320) = v47;
    *(_QWORD *)&v47 = a3[50];
    *(_BYTE *)(v35 + 408) = *((_BYTE *)a3 + 408);
    v51 = (LiClipSet *)(v35 + 416);
    *(_QWORD *)(v35 + 400) = v47;
    LiClipSet::LiClipSet((LiClipSet *)(v35 + 416), (const LiClipSet *)(a3 + 52));
    *(_QWORD *)(v35 + 464) = a3;
    PCMatrix44Tmpl<double>::rightMult(v35 + 16, v58.f64);
    PCMatrix44Tmpl<double>::rightMult(v35 + 272, v58.f64);
    PCMatrix44Tmpl<double>::rightMult(v35 + 144, v58.f64);
    v52 = (const LiPlaneTransform *)operator new();
    LiPlaneTransform::LiPlaneTransform(v52, &v58, 1);
    if (LiPlaneTransform::isValid(v52))
    {
      *(double *)(v35 + 400) = *((double *)a2 + 68) * *(double *)(v35 + 400);
      *(_BYTE *)(v35 + 408) = *((unsigned __int8 *)a3 + 408) != *((unsigned __int8 *)a2 + 564);
      transform((PCArray_base *)&v58, (uint64_t)v51);
      if (v53)
      {
        LiRenderInstance::collectGeode(this, v53, (LiCollectState *)v35);
      }
      else if (v55)
      {
        LiRenderInstance::collectEquirectGroup(this, v55, (LiCollectState *)a3, v56);
      }
      else if (v54)
      {
        LiRenderInstance::collectGroup(this, v54, (LiGroupDrawer **)a3, (LiCollectState *)v35);
      }
      v57 = a3[1];
      if (v57)
      {
        if (*v57)
          LiPlanarGroupSet::transform(*v57, v52);
      }
    }
    MEMORY[0x1B5E29170](v52, 0x1000C405D8959EDLL);
    LiClipSet::~LiClipSet(v51);
    return MEMORY[0x1B5E29170](v35, 0x10F0C40AD4F3889);
  }
  return result;
}

void sub_1B2D46C54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x1000C407EBBDD04);
  _Unwind_Resume(a1);
}

uint64_t LiRenderInstance::collectGeode(LiRenderInstance *this, LiGeode *a2, LiCollectState *a3)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t i;
  _OWORD *v11;
  __int128 v12;
  char *v13;
  uint64_t j;
  _OWORD *v15;
  __int128 v16;
  BOOL v17;
  char v18;
  LiImageSource *v19;
  unsigned int v20;
  int v21;
  PCArray_base *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t k;
  uint64_t v26;
  __int128 v27;
  LiDrawer *v28;
  int v29;
  int v30;
  uint64_t v31;
  float64x2_t v32;
  unint64_t v33;
  uint64_t v34;
  LiImageSource *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  float64x2_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v6 = LiSceneObject::blendMode(a2);
  if (*((double *)a3 + 50) != 0.0 || (result = LiCompositor::isStencil(v6), (_DWORD)result))
  {
    v8 = operator new();
    LiPolygonInstance::LiPolygonInstance((LiPolygonInstance *)v8, this);
    *(_QWORD *)(v8 + 1432) = a2;
    v9 = (char *)a3 + 16;
    if ((LiCollectState *)((char *)a3 + 16) != (LiCollectState *)(v8 + 632))
    {
      for (i = 0; i != 128; i += 32)
      {
        v11 = (_OWORD *)(v8 + 632 + i);
        v12 = *(_OWORD *)&v9[i + 16];
        *v11 = *(_OWORD *)&v9[i];
        v11[1] = v12;
      }
    }
    v13 = (char *)a3 + 144;
    if ((LiCollectState *)((char *)a3 + 144) != (LiCollectState *)(v8 + 760))
    {
      for (j = 0; j != 128; j += 32)
      {
        v15 = (_OWORD *)(v8 + 760 + j);
        v16 = *(_OWORD *)&v13[j + 16];
        *v15 = *(_OWORD *)&v13[j];
        v15[1] = v16;
      }
    }
    *(_QWORD *)(v8 + 1520) = *((_QWORD *)a3 + 50);
    if (*((_BYTE *)a3 + 408))
      v17 = *((_BYTE *)a2 + 564) == 0;
    else
      v17 = 1;
    v18 = !v17;
    *(_BYTE *)(v8 + 1528) = v18;
    (*(void (**)(LiImageSource **__return_ptr, LiGeode *))(*(_QWORD *)a2 + 160))(&v35, a2);
    v19 = v35;
    PCSharedCount::~PCSharedCount((PCSharedCount *)&v36);
    v20 = (*(uint64_t (**)(LiImageSource *))(*(_QWORD *)v19 + 80))(v19);
    if (v20 <= 1)
      v21 = 1;
    else
      v21 = v20;
    *(_DWORD *)(v8 + 1608) = v21;
    LiImageFilterChain::operator=(v8 + 1544, (uint64_t)a2 + 608);
    LiPolygonInstance::setColor((PCShared_base **)v8, v19);
    LiRenderInstance::addLightsAndDOF(this, (LiPolygonInstance *)v8);
    v23.n128_f64[0] = LiPolygonInstance::addReflectionFilter((LiPolygonInstance *)v8);
    v24 = *((unsigned int *)this + 17);
    if ((int)v24 >= 1)
    {
      for (k = 0; k != v24; ++k)
      {
        if (k >= *((int *)this + 17))
          PCArray_base::badIndex(v22);
        v26 = *(_QWORD *)(*((_QWORD *)this + 9) + 16 * k);
        if (v21 == 2)
        {
          v22 = (PCArray_base *)(*(uint64_t (**)(_QWORD, __n128))(*(_QWORD *)v26 + 184))(*(_QWORD *)(*((_QWORD *)this + 9) + 16 * k), v23);
          if (!(_DWORD)v22)
            continue;
        }
        (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)v26 + 16))(&v32, v26);
        v35 = *(LiImageSource **)&v32.f64[0];
        PCSharedCount::PCSharedCount((PCSharedCount *)&v36, (const PCSharedCount *)&v32.f64[1]);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v32.f64[1]);
        if (!v35)
          throw_PCNullPointerException(1);
        (*(void (**)(LiImageSource *, _QWORD))(*(_QWORD *)v35 + 168))(v35, *(_QWORD *)(v8 + 1456));
        LiPolygonInstance::setColor((PCShared_base **)v8, v35);
        PCSharedCount::~PCSharedCount((PCSharedCount *)&v36);
      }
    }
    if (LiPolygonInstance::makeNode((LiPolygonInstance *)v8, (LiCollectState *)((char *)a3 + 416)))
    {
      v38 = 0x3FF0000000000000;
      v39 = 0;
      v35 = (LiImageSource *)0x3FF0000000000000;
      v36 = 0u;
      v37 = 0u;
      v40 = 0;
      v45 = 0;
      v46 = 0x3FF0000000000000;
      v43 = 0;
      v44 = 0;
      v27 = *((_OWORD *)a3 + 22);
      v41 = *((float64x2_t *)a3 + 21);
      v42 = v27;
      LiAgent::getPixelToObjectTransform((double **)(v8 + 168), (uint64_t)&v32);
      PCMatrix44Tmpl<double>::rightMult((uint64_t)&v35, v32.f64);
      v36 = 0u;
      v37 = 0u;
      v35 = (LiImageSource *)0x3FF0000000000000;
      v38 = 0x3FF0000000000000;
      v39 = 0;
      v40 = 0;
      v44 = 0;
      v45 = 0;
      v43 = 0;
      v46 = 0x3FF0000000000000;
      transform<LiPolygon::PosFacet,LiPolygon::PosFacet,double>((double *)&v35, v8 + 88, (uint64_t **)(v8 + 88));
      v32 = v41;
      v34 = *((_QWORD *)&v42 + 1);
      v33 = 0xBFF0000000000000;
      PCPlane<double>::setImplicit(v8 + 16, &v32);
      v28 = (LiDrawer *)(v8 + 112);
      v29 = *((_DWORD *)this + 293);
      if (*((_DWORD *)this + 292) <= v29)
        v30 = (2 * (v29 + 1)) | 1;
      else
        v30 = *((_DWORD *)this + 292);
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)this + 1160, v29 + 1, v30);
      *(_QWORD *)(*((_QWORD *)this + 147) + 8 * *((int *)this + 293) - 8) = v28;
      result = *(_QWORD *)a3;
      if (*(_QWORD *)a3)
        result = LiGroupDrawer::add((LiGroupDrawer *)result, v28);
      if (*((_QWORD *)a3 + 1))
      {
        v31 = operator new();
        (*(void (**)(LiImageSource **__return_ptr, LiGeode *))(*(_QWORD *)a2 + 88))(&v35, a2);
        result = LiPlanarGroupSet::LiPlanarGroupSet(v31, &v35, v28);
        **((_QWORD **)a3 + 1) = v31;
      }
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
  }
  return result;
}

void sub_1B2D47088(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B2D46FBCLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LiRenderInstance::collectEquirectGroup(LiRenderInstance *this, Li3DGroupForEquirect *a2, LiCollectState *a3, LiCollectState *a4)
{
  uint64_t result;
  uint64_t Renderer;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  LiGeode *Geode;

  result = (*(uint64_t (**)(Li3DGroupForEquirect *))(*(_QWORD *)a2 + 136))(a2);
  if ((_DWORD)result)
  {
    Renderer = Li3DGroupForEquirect::getRenderer(a2);
    v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)Renderer + 176))(Renderer);
    if (v9)
    else
      v10 = 0;
    if ((*(unsigned int (**)(Li3DGroupForEquirect *))(*(_QWORD *)a2 + 136))(a2))
    {
      v11 = 0;
      do
      {
        v12 = (*(uint64_t (**)(Li3DGroupForEquirect *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v11);
        (*(void (**)(void *, uint64_t))(*(_QWORD *)v10 + 152))(v10, v12);
        v11 = (v11 + 1);
      }
      while ((_DWORD)v11 != (*(unsigned int (**)(Li3DGroupForEquirect *))(*(_QWORD *)a2 + 136))(a2));
    }
    Geode = (LiGeode *)Li3DGroupForEquirect::getGeode(a2);
    return LiRenderInstance::collectGeode(this, Geode, a3);
  }
  return result;
}

uint64_t LiRenderInstance::collectGroup(LiRenderInstance *this, LiGroup *a2, LiGroupDrawer **a3, LiCollectState *a4)
{
  int v8;
  char v9;
  char v10;
  uint64_t v11;
  _OWORD *v12;
  LiRenderInstance *v18;
  char *v19;
  uint64_t i;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  _OWORD *v25;
  __int128 v26;
  LiGroupDrawer *v27;
  char *v28;
  uint64_t j;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  LiPlanarGroupSet *v37;
  PCShared_base *v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  PCArray_base *v42;
  uint64_t v43;
  uint64_t k;
  uint64_t v45;
  int v46;
  uint64_t v47;
  LiSceneObject *v48;
  uint64_t v49;
  unsigned int *v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t var0_high;
  void *v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  void *v60;
  LiGroupDrawer *v62;
  LiCollectState *v63;
  PCSharedCount v64;
  void *v65;
  uint64_t v66;
  _QWORD *v67;
  LiPlanarGroupSet *v68;
  PCSharedCount v69;
  __int128 v70;
  int v71;
  char v72;
  LiRenderInstance *v73;
  size_t __nel[2];
  void *__base[2];
  __int128 v76;
  __int128 v77;
  __int128 v78;

  v8 = (*(uint64_t (**)(LiGroup *))(*(_QWORD *)a2 + 136))(a2);
  v9 = (*(uint64_t (**)(LiGroup *))(*(_QWORD *)a2 + 184))(a2);
  if (*a3)
    v10 = 0;
  else
    v10 = v9;
  v11 = operator new();
  v12 = (_OWORD *)v11;
  *(_QWORD *)(v11 + 80) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 40) = 0x3FF0000000000000;
  *(_QWORD *)v11 = 0x3FF0000000000000;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_QWORD *)(v11 + 208) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 168) = 0x3FF0000000000000;
  __asm { FMOV            V1.2D, #1.0 }
  *(_OWORD *)(v11 + 120) = _Q1;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 192) = 0u;
  *(_OWORD *)(v11 + 232) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_QWORD *)(v11 + 336) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 296) = 0x3FF0000000000000;
  *(_OWORD *)(v11 + 248) = _Q1;
  *(_OWORD *)(v11 + 264) = 0u;
  *(_OWORD *)(v11 + 280) = 0u;
  *(_OWORD *)(v11 + 304) = 0u;
  *(_OWORD *)(v11 + 320) = 0u;
  *(_OWORD *)(v11 + 344) = 0u;
  *(_OWORD *)(v11 + 360) = 0u;
  v18 = (LiRenderInstance *)(v11 + 384);
  *(_QWORD *)(v11 + 504) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 464) = 0x3FF0000000000000;
  *(_QWORD *)(v11 + 424) = 0x3FF0000000000000;
  *(_OWORD *)(v11 + 376) = _Q1;
  *(_OWORD *)(v11 + 392) = 0u;
  *(_OWORD *)(v11 + 408) = 0u;
  *(_OWORD *)(v11 + 432) = 0u;
  *(_OWORD *)(v11 + 448) = 0u;
  *(_OWORD *)(v11 + 488) = 0u;
  v19 = (char *)a4 + 272;
  *(_OWORD *)(v11 + 472) = 0u;
  if ((LiCollectState *)((char *)a4 + 272) != (LiCollectState *)v11)
  {
    for (i = 0; i != 128; i += 32)
    {
      v21 = (_OWORD *)(v11 + i);
      v22 = *(_OWORD *)&v19[i + 16];
      *v21 = *(_OWORD *)&v19[i];
      v21[1] = v22;
    }
  }
  if (v19 != (char *)(v11 + 128))
  {
    v23 = 0;
    v24 = (char *)a4 + 272;
    do
    {
      v25 = (_OWORD *)(v11 + 128 + v23);
      v26 = *(_OWORD *)&v24[v23 + 16];
      *v25 = *(_OWORD *)&v24[v23];
      v25[1] = v26;
      v23 += 32;
    }
    while (v23 != 128);
  }
  v77 = 0u;
  v78 = 0u;
  v27 = *a3;
  if ((v10 & 1) != 0 || !a3[1] && ((*(uint64_t (**)(LiGroup *))(*(_QWORD *)a2 + 184))(a2) & 1) == 0)
  {
    v28 = (char *)this + 1008;
    if ((LiRenderInstance *)((char *)this + 1008) != v18)
    {
      for (j = 0; j != 8; j += 2)
      {
        v30 = &v12[j + 24];
        v31 = *(_OWORD *)&v28[j * 16 + 16];
        *v30 = *(_OWORD *)&v28[j * 16];
        v30[1] = v31;
      }
    }
    PCMatrix44Tmpl<double>::rightMult((uint64_t)v18, (double *)a4 + 2);
    v32 = v12[5];
    v12[28] = v12[4];
    v12[29] = v32;
    v77 = 0uLL;
    v78 = xmmword_1B304EED0;
    v33 = operator new();
    LiPlaneTransform::LiPlaneTransform(v33, v18, 1);
    if ((LiPlaneTransform::operator()(v33, (double *)&v77, (uint64_t)&v77) & 1) == 0)
    {
      v77 = 0uLL;
      *(_QWORD *)&v78 = 0;
      *((_QWORD *)&v78 + 1) = 0xBFF0000000000000;
    }
    MEMORY[0x1B5E29170](v33, 0x1000C405D8959EDLL);
  }
  if ((*(unsigned int (**)(LiGroup *))(*(_QWORD *)a2 + 184))(a2))
  {
    *((_QWORD *)a4 + 1) = 0;
    if (!*(_QWORD *)a4)
    {
      if (PCPlaneType((double *)&v77) == 1)
        return MEMORY[0x1B5E29170](v12, 0x1000C407EBBDD04);
      v27 = (LiGroupDrawer *)operator new();
      LiGroupDrawer::LiGroupDrawer(v27);
      *(_QWORD *)a4 = v27;
      v34 = *((_DWORD *)this + 293);
      if (*((_DWORD *)this + 292) <= v34)
        v35 = (2 * (v34 + 1)) | 1;
      else
        v35 = *((_DWORD *)this + 292);
      PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)this + 1160, v34 + 1, v35);
      *(_QWORD *)(*((_QWORD *)this + 147) + 8 * *((int *)this + 293) - 8) = v27;
      (*(void (**)(LiGroupDrawer *, __int128 *))(*(_QWORD *)v27 + 56))(v27, &v77);
      (*(void (**)(LiGroupDrawer *, LiGroup *))(*(_QWORD *)v27 + 168))(v27, a2);
    }
    __nel[1] = 0;
    __base[0] = 0;
    __nel[0] = (size_t)&unk_1E656E898;
    if (v8 >= 1)
    {
      v62 = v27;
      v63 = (LiCollectState *)a3;
      v36 = 0;
      do
      {
        v37 = (LiPlanarGroupSet *)(*(uint64_t (**)(LiGroup *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v36);
        v68 = v37;
        if (v37)
          v38 = (LiPlanarGroupSet *)((char *)v37 + *(_QWORD *)(*(_QWORD *)v37 - 24));
        else
          v38 = 0;
        PCSharedCount::PCSharedCount(&v69, v38);
        if (SLODWORD(__nel[1]) <= SHIDWORD(__nel[1]))
          v39 = (2 * (HIDWORD(__nel[1]) + 1)) | 1;
        else
          v39 = __nel[1];
        PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)__nel, HIDWORD(__nel[1]) + 1, v39);
        v40 = (uint64_t *)__base[0];
        v41 = SHIDWORD(__nel[1]) - 1;
        *((_QWORD *)__base[0] + 2 * v41) = v68;
        PCSharedCount::PCSharedCount(&v64, &v69);
        PCSharedCount::operator=(&v40[2 * v41 + 1], (uint64_t *)&v64);
        PCSharedCount::~PCSharedCount(&v64);
        PCSharedCount::~PCSharedCount(&v69);
        v36 = (v36 + 1);
      }
      while (v8 != (_DWORD)v36);
      v27 = v62;
      a3 = (LiGroupDrawer **)v63;
      if (HIDWORD(__nel[1]))
        qsort(__base[0], HIDWORD(__nel[1]), 0x10uLL, (int (__cdecl *)(const void *, const void *))LiSceneObject_layerOrder);
      v43 = 0;
      for (k = 0; k != v8; ++k)
      {
        if (k >= SHIDWORD(__nel[1]))
          PCArray_base::badIndex(v42);
        v42 = (PCArray_base *)LiRenderInstance::collect3D(this, *(LiSceneObject **)((char *)__base[0] + v43), a4);
        v43 += 16;
      }
    }
    if (a3[1] && v27 && (*(unsigned int (**)(LiGroupDrawer *))(*(_QWORD *)v27 + 176))(v27))
    {
      v45 = operator new();
      v68 = 0;
      v69.var0 = 0;
      v70 = xmmword_1B304EED0;
      LiPlanarGroupSet::LiPlanarGroupSet(v45, &v68, v27);
      *(_QWORD *)a3[1] = v45;
    }
    __nel[0] = (size_t)&unk_1E656E898;
    if (SLODWORD(__nel[1]) < 0)
      v46 = 1;
    else
      v46 = __nel[1];
    PCArray<PCPtr<LiImageFilter>,PCArray_Traits<PCPtr<LiImageFilter>>>::resize((uint64_t)__nel, 0, v46);
    if (__base[0])
      MEMORY[0x1B5E2914C](__base[0], 0x1000C8077774924);
  }
  else
  {
    *(_OWORD *)__base = 0u;
    v76 = 0u;
    *(_OWORD *)__nel = 0u;
    if (v8 >= 1)
    {
      v47 = 0;
      do
      {
        v48 = (LiSceneObject *)(*(uint64_t (**)(LiGroup *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v47);
        v68 = 0;
        *(_QWORD *)a4 = 0;
        *((_QWORD *)a4 + 1) = &v68;
        LiRenderInstance::collect3D(this, v48, a4);
        if (v68)
          LiPlanarGroupHerd::add((LiPlanarGroupHerd *)__nel, v68);
        *((_QWORD *)a4 + 1) = 0;
        v47 = (v47 + 1);
      }
      while (v8 != (_DWORD)v47);
    }
    v49 = LiPlanarGroupHerd::condense((int64x2_t *)__nel);
    v50 = (unsigned int *)v49;
    if (v49)
    {
      v51 = (uint64_t *)a3[1];
      if (v51)
      {
        *v51 = v49;
      }
      else
      {
        LiDepthSorter::LiDepthSorter((LiDepthSorter *)&v68);
        v72 = *((_BYTE *)this + 102);
        v73 = this;
        v67 = 0;
        v65 = &unk_1E656A790;
        v66 = 0;
        if (SLODWORD(v69.var0) < 0)
          v52 = 1;
        else
          v52 = (uint64_t)v69.var0 & ~(SLODWORD(v69.var0) >> 31);
        if (v52 == LODWORD(v69.var0))
        {
          var0_high = SHIDWORD(v69.var0);
          if ((HIDWORD(v69.var0) & 0x80000000) != 0)
          {
            do
            {
              *(_QWORD *)(v70 + 8 * var0_high) = 0;
              _CF = __CFADD__(var0_high++, 1);
            }
            while (!_CF);
          }
        }
        else
        {
          if (v52)
          {
            v54 = (void *)operator new[]();
            bzero(v54, 8 * v52);
          }
          else
          {
            v54 = 0;
          }
          if ((_QWORD)v70)
            MEMORY[0x1B5E2914C](v70, 0x1000C8077774924);
          *(_QWORD *)&v70 = v54;
        }
        v69.var0 = (PC_Sp_counted_base *)v52;
        LiPlanarGroupSet::gatherDrawers(v50, (uint64_t)&v68, (uint64_t)&v65, (uint64_t)this);
        LiPlanarGroupSet::~LiPlanarGroupSet((LiPlanarGroupSet *)v50);
        MEMORY[0x1B5E29170]();
        LiDepthSorter::sort((LiDepthSorter *)&v68);
        if (!v27)
        {
          v27 = (LiGroupDrawer *)operator new();
          LiGroupDrawer::LiGroupDrawer(v27);
          (*(void (**)(LiGroupDrawer *, LiGroup *))(*(_QWORD *)v27 + 168))(v27, a2);
          v55 = *((_DWORD *)this + 293);
          if (*((_DWORD *)this + 292) <= v55)
            v56 = (2 * (v55 + 1)) | 1;
          else
            v56 = *((_DWORD *)this + 292);
          PCArray<ProShade::ProgramVar *,PCArray_Traits<ProShade::ProgramVar *>>::resize((uint64_t)this + 1160, v55 + 1, v56);
          *(_QWORD *)(*((_QWORD *)this + 147) + 8 * *((int *)this + 293) - 8) = v27;
        }
        LiGroupDrawer::prepareToAdd(v27, HIDWORD(v66) + v71);
        LiGroupDrawer::add(v27, (uint64_t)&v70 + 8);
        LiGroupDrawer::add(v27, (uint64_t)&v65);
        if (!*a3)
        {
          (*(void (**)(LiGroupDrawer *, __int128 *))(*(_QWORD *)v27 + 56))(v27, &v77);
          v57 = operator new();
          (*(void (**)(PCSharedCount *__return_ptr, LiGroup *))(*(_QWORD *)a2 + 88))(&v64, a2);
          LiPlanarGroupSet::LiPlanarGroupSet(v57, &v64, v27);
          *(_QWORD *)a3[1] = v57;
        }
        v65 = &unk_1E656A7E0;
        if ((int)v66 < 0)
          v58 = 1;
        else
          v58 = v66 & ~((int)v66 >> 31);
        if (v58 == (_DWORD)v66)
        {
          v59 = SHIDWORD(v66);
          if (v66 < 0)
          {
            do
            {
              v67[v59] = 0;
              _CF = __CFADD__(v59++, 1);
            }
            while (!_CF);
          }
        }
        else
        {
          if (v58)
          {
            v60 = (void *)operator new[]();
            bzero(v60, 8 * v58);
          }
          else
          {
            v60 = 0;
          }
          if (v67)
            MEMORY[0x1B5E2914C](v67, 0x1000C8077774924);
          v67 = v60;
        }
        v66 = v58;
        if (v67)
          MEMORY[0x1B5E2914C](v67, 0x1000C8077774924);
        LiDepthSorter::~LiDepthSorter((LiDepthSorter *)&v68);
      }
    }
    LiPlanarGroupHerd::~LiPlanarGroupHerd((LiPlanarGroupHerd *)__nel);
  }
  return MEMORY[0x1B5E29170](v12, 0x1000C407EBBDD04);
}

void sub_1B2D47A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, PCSharedCount a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  PCPtrArray<LiDrawer>::~PCPtrArray((uint64_t)&a15);
  LiDepthSorter::~LiDepthSorter((LiDepthSorter *)&a18);
  LiPlanarGroupHerd::~LiPlanarGroupHerd((LiPlanarGroupHerd *)&a27);
  MEMORY[0x1B5E29170](v27, 0x1000C407EBBDD04);
  _Unwind_Resume(a1);
}

uint64_t LiSceneObject_layerOrder(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  unsigned int v5;

  if (!*(_QWORD *)a1)
    throw_PCNullPointerException(1);
  v2 = *(_DWORD *)(*(_QWORD *)a1 + 528);
  if (!*(_QWORD *)a2)
    throw_PCNullPointerException(1);
  v3 = *(_DWORD *)(*(_QWORD *)a2 + 528);
  v4 = v2 <= v3;
  if (v2 >= v3)
    v5 = 0;
  else
    v5 = -1;
  if (v4)
    return v5;
  else
    return 1;
}

void LiRenderInstance::addLightsAndDOF(LiRenderInstance *this, LiPolygonInstance *a2)
{
  LiGeode *v3;
  LiLightFilter *v5;
  PCShared_base *LightFilter;
  LiImageFilter *v7;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  uint64_t v16;
  _OWORD *v17;
  uint64_t i;
  _OWORD v19[8];
  LiImageFilter *v20;
  PCSharedCount v21;

  if (a2)
  {
    v3 = (LiGeode *)*((_QWORD *)a2 + 179);
    if (v3)
    {
      (*(void (**)(_OWORD *__return_ptr, _QWORD))(*(_QWORD *)v3 + 160))(v19, *((_QWORD *)a2 + 179));
      if (!*(_QWORD *)&v19[0])
        throw_PCNullPointerException(1);
      (*(void (**)(_QWORD))(**(_QWORD **)&v19[0] + 152))(*(_QWORD *)&v19[0]);
      PCSharedCount::~PCSharedCount((PCSharedCount *)v19 + 1);
      if (LiGeode::needsLights(v3) && *((_DWORD *)LiGeode::getLightFilter(v3) + 13))
      {
        v5 = (LiLightFilter *)operator new();
        LightFilter = LiGeode::getLightFilter(v3);
        LiLightFilter::LiLightFilter(v5, LightFilter);
        v20 = v5;
        PCSharedCount::PCSharedCount(&v21, (LiLightFilter *)((char *)v5 + *(_QWORD *)(*(_QWORD *)v5 - 24)));
        v7 = v20;
        if (!v20)
          throw_PCNullPointerException(1);
        v8 = (__int128 *)*((_QWORD *)this + 4);
        if (v8)
        {
          v9 = *v8;
          v10 = v8[1];
          v11 = v8[3];
          v19[2] = v8[2];
          v19[3] = v11;
          v19[0] = v9;
          v19[1] = v10;
          v12 = v8[4];
          v13 = v8[5];
          v14 = v8[7];
          v19[6] = v8[6];
          v19[7] = v14;
          v19[4] = v12;
          v19[5] = v13;
        }
        else
        {
          LiRenderer::getRootTransform(*((LiRenderer **)this + 1), (uint64_t)v19);
        }
        v15 = (char *)v7 + 600;
        if ((_OWORD *)((char *)v7 + 600) != v19)
        {
          v16 = 0;
          v17 = v19;
          do
          {
            for (i = 0; i != 32; i += 8)
              *(_QWORD *)&v15[i] = *(_QWORD *)((char *)v17 + i);
            ++v16;
            v15 += 32;
            v17 += 2;
          }
          while (v16 != 4);
        }
        LiImageFilterChain::append((LiPolygonInstance *)((char *)a2 + 1544), v20);
        PCSharedCount::~PCSharedCount(&v21);
      }
    }
  }
}

void sub_1B2D47D90(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  PCSharedCount::~PCSharedCount(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<LiCollectState>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    LiClipSet::~LiClipSet((LiClipSet *)(v2 + 416));
    JUMPOUT(0x1B5E29170);
  }
  return result;
}

uint64_t LiRenderParameters::LiRenderParameters(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  CGColorSpace *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  LiImageFilterChain::LiImageFilterChain((LiImageFilterChain *)(a1 + 16));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 2;
  *(_DWORD *)(a1 + 76) = 0x1000000;
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)(a1 + 80));
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 138) = 0;
  v6 = *(CGColorSpace **)a2;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 128) = 5;
  *(_QWORD *)(a1 + 152) = 0x3FF0000000000000;
  if (v6)
    v6 = PCCFRefTraits<CGColorSpace *>::retain(v6);
  v7 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 168) = v7;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 24);
  *(float *)(a1 + 192) = PCRenderModel::getDefaultBlendingGamma(v6);
  v8 = a3[1];
  *(_QWORD *)(a1 + 200) = *a3;
  *(_QWORD *)(a1 + 208) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return a1;
}

void sub_1B2D47EF4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;
  CGColorSpace **v2;

  PCCFRef<CGColorSpace *>::~PCCFRef(v2);
  LiImageFilterChain::~LiImageFilterChain(v1);
  _Unwind_Resume(a1);
}

uint64_t LiRenderParameters::LiRenderParameters(uint64_t a1, uint64_t a2, _QWORD *a3, float a4)
{
  CGColorSpace *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  LiImageFilterChain::LiImageFilterChain((LiImageFilterChain *)(a1 + 16));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 2;
  *(_DWORD *)(a1 + 76) = 0x1000000;
  LiRenderingTechnology::LiRenderingTechnology((LiRenderingTechnology *)(a1 + 80));
  *(_DWORD *)(a1 + 128) = 5;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 138) = 0;
  v8 = *(CGColorSpace **)a2;
  *(_QWORD *)(a1 + 152) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 160) = v8;
  if (v8)
    PCCFRefTraits<CGColorSpace *>::retain(v8);
  v9 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 168) = v9;
  *(_BYTE *)(a1 + 184) = *(_BYTE *)(a2 + 24);
  *(float *)(a1 + 192) = a4;
  v10 = a3[1];
  *(_QWORD *)(a1 + 200) = *a3;
  *(_QWORD *)(a1 + 208) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return a1;
}

void sub_1B2D47FE4(_Unwind_Exception *a1)
{
  PCSharedCount *v1;

  LiImageFilterChain::~LiImageFilterChain(v1);
  _Unwind_Resume(a1);
}

uint64_t LiRenderParameters::getHeliumRenderer(LiRenderParameters *this)
{
  return *((_QWORD *)this + 17);
}

uint64_t LiRenderParameters::setHeliumRenderer(uint64_t this, HGRenderer *a2)
{
  *(_QWORD *)(this + 136) = a2;
  return this;
}

uint64_t LiRenderParameters::getRenderDevice(LiRenderParameters *this)
{
  return (uint64_t)this + 200;
}

uint64_t LiRenderParameters::shouldOmit(LiRenderParameters *this, LiSceneObject *a2)
{
  uint64_t v2;
  PCSharedCount *v3;
  uint64_t v4;
  uint64_t v5;
  LiSceneObject **v6;
  LiSceneObject *v7;
  BOOL v8;
  LiSceneObject *v10;
  PCSharedCount v11;

  v2 = *((_QWORD *)this + 8);
  if (v2)
  {
    v10 = a2;
    if (a2)
      a2 = (LiSceneObject *)((char *)a2 + *(_QWORD *)(*(_QWORD *)a2 - 24));
    v3 = PCSharedCount::PCSharedCount(&v11, a2);
    v4 = *(unsigned int *)(v2 + 12);
    if ((int)v4 < 1)
    {
      v2 = 0;
    }
    else
    {
      v5 = 0;
      v6 = *(LiSceneObject ***)(v2 + 16);
      do
      {
        v7 = *v6;
        if (v10)
        {
          if (v7)
            v8 = v10 == v7;
          else
            v8 = 0;
          if (v8)
            goto LABEL_16;
        }
        else if (!v7)
        {
          goto LABEL_16;
        }
        ++v5;
        v6 += 2;
      }
      while (v4 != v5);
      LODWORD(v5) = -1;
LABEL_16:
      v2 = (int)v5 >= 0;
    }
    PCSharedCount::~PCSharedCount(v3);
  }
  return v2;
}

uint64_t LiRenderParameters::isDynamicRangeTrackingRender(FxColorDescription *this)
{
  FxColorDescription *v1;

  v1 = this + 5;
  if ((FxColorDescription::isSDR(this + 5) & 1) != 0)
    return 1;
  else
    return FxColorDescription::isHDR(v1);
}

PCSharedCount *ProShade::Snippet::loadFromClassBundle@<X0>(PCSharedCount *a1@<X8>)
{
  PCSharedCount *v5;

  v5 = (PCSharedCount *)operator new();
  ProShade::Snippet::Snippet(v5);
  a1->var0 = (PC_Sp_counted_base *)v5;
  return PCSharedCount::PCSharedCount(a1 + 1, (PCShared_base *)((char *)v5 + *((_QWORD *)v5->var0 - 3)));
}

void sub_1B2D48148(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E29170](v1, 0x10E1C402E17CF6ALL);
  _Unwind_Resume(a1);
}

PCSharedCount *ProShade::Snippet::loadFromBundle@<X0>(PCSharedCount *a1@<X8>)
{
  objc_opt_class();
  return ProShade::Snippet::loadFromClassBundle(a1);
}

void LiFilteredPolygon::LiFilteredPolygon(LiFilteredPolygon *this)
{
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *((_OWORD *)this + 5) = _Q1;
  *((_QWORD *)this + 27) = 0x3FF0000000000000;
  *((_QWORD *)this + 22) = 0x3FF0000000000000;
  *((_QWORD *)this + 17) = 0x3FF0000000000000;
  *((_QWORD *)this + 12) = 0x3FF0000000000000;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_QWORD *)this + 6) = 0x3FFB333333333333;
  *((_WORD *)this + 28) = 1;
  *((_WORD *)this + 112) = 256;
}

void LiFilteredPolygon::setPolygon(LiFilteredPolygon *this, const LiImagePolygon *a2)
{
  copy<LiPolygon::PosFacet,LiChannelT<PCVector3<double>>>((uint64_t)a2 + 88, (uint64_t *)this);
  copy<LiImagePolygon::EdgeFacet,LiChannelT<int>>((uint64_t)a2 + 104, (std::vector<int> *)this + 1);
}

__n128 copy<LiPolygon::PosFacet,LiChannelT<PCVector3<double>>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  __n128 *v7;
  __n128 *v8;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1;
  std::vector<PCVector3<double>>::resize(a2, (int)(v4 >> 5));
  if ((int)((unint64_t)v4 >> 5) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (__n128 *)(**(_QWORD **)a1 + 32 * v6);
      v8 = (__n128 *)(*a2 + 24 * v6);
      result = *v7;
      v8[1].n128_u64[0] = v7[1].n128_u64[0];
      *v8 = result;
      ++v6;
    }
    while (v6 != ((unint64_t)v4 >> 5));
  }
  return result;
}

void copy<LiImagePolygon::EdgeFacet,LiChannelT<int>>(uint64_t a1, std::vector<int> *this)
{
  uint64_t v4;
  std::vector<int>::pointer begin;
  uint64_t v6;
  int *v7;
  int v8;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 8) - **(_QWORD **)a1;
  std::vector<unsigned int>::resize(this, (int)(v4 >> 5));
  if ((int)((unint64_t)v4 >> 5) >= 1)
  {
    begin = this->__begin_;
    v6 = ((unint64_t)v4 >> 5);
    v7 = (int *)(**(_QWORD **)a1 + 24);
    do
    {
      v8 = *v7;
      v7 += 8;
      *begin++ = v8;
      --v6;
    }
    while (v6);
  }
}

