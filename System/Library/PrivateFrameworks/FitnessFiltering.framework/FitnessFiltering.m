uint64_t BodyFocus.artworks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t BodyFocus.iconName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyFocus.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyFocus.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t BodyFocus.init(artworks:iconName:identifier:name:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

BOOL sub_23C064EF0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23C064F04()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C064F48()
{
  return sub_23C0E4AA4();
}

uint64_t sub_23C064F70()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C064FB0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C064FE0 + 4 * byte_23C0E4E50[*v0]))(0x736B726F77747261, 0xE800000000000000);
}

uint64_t sub_23C064FE0()
{
  return 0x656D614E6E6F6369;
}

uint64_t sub_23C064FF4()
{
  return 0x696669746E656469;
}

uint64_t sub_23C065010()
{
  return 1701667182;
}

uint64_t sub_23C065020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0679FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C065044()
{
  return 0;
}

void sub_23C065050(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_23C06505C()
{
  sub_23C0652F8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C065084()
{
  sub_23C0652F8();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0650AC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *a1 = *(_QWORD *)(v1 + 24);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t BodyFocus.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF38);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v13[5] = v1[2];
  v13[6] = v8;
  v10 = v1[3];
  v13[3] = v1[4];
  v13[4] = v10;
  v11 = v1[5];
  v13[1] = v1[6];
  v13[2] = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0652F8();
  sub_23C0E4AE0();
  v18 = v9;
  v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  sub_23C0656C0(&qword_256B0EF50, &qword_256B0EF58, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    v16 = 1;
    sub_23C0E49F0();
    v15 = 2;
    sub_23C0E4A08();
    v14 = 3;
    sub_23C0E4A08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242616E84]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_23C0652F8()
{
  unint64_t result;

  result = qword_256B0EF40;
  if (!qword_256B0EF40)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5164, &type metadata for BodyFocus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0EF40);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242616E90](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t BodyFocus.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF60);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0652F8();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  v32 = 0;
  sub_23C0656C0(&qword_256B0EF68, &qword_256B0EF70, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v9 = v33;
  v31 = 1;
  swift_bridgeObjectRetain();
  v10 = sub_23C0E496C();
  v28 = v11;
  v26 = v10;
  v27 = v9;
  v30 = 2;
  swift_bridgeObjectRetain();
  v24 = sub_23C0E4984();
  v25 = v12;
  v29 = 3;
  swift_bridgeObjectRetain();
  v13 = sub_23C0E4984();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18 = v13;
  v17(v8, v5);
  v19 = v27;
  swift_bridgeObjectRetain();
  v20 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v25;
  v21 = v26;
  *a2 = v19;
  a2[1] = v21;
  v23 = v24;
  a2[2] = v20;
  a2[3] = v23;
  a2[4] = v22;
  a2[5] = v18;
  a2[6] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23C0656C0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0EF48);
    v10 = sub_23C0683A4(a2, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, a3);
    result = MEMORY[0x242616E9C](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C065744@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return BodyFocus.init(from:)(a1, a2);
}

uint64_t sub_23C065758(_QWORD *a1)
{
  return BodyFocus.encode(to:)(a1);
}

uint64_t sub_23C065770(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48))
    return 0;
  else
    return sub_23C0E4A74();
}

uint64_t sub_23C0657A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  if (v4 == v2 && v5 == v3)
    v7 = 1;
  else
    v7 = sub_23C0E4A74() ^ 1;
  return v7 & 1;
}

uint64_t sub_23C0657DC(uint64_t a1, uint64_t a2)
{
  char v3;

  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40) && *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48))
    v3 = 1;
  else
    v3 = sub_23C0E4A74() ^ 1;
  return v3 & 1;
}

uint64_t sub_23C065824(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  if (v4 == v2 && v5 == v3)
    return 0;
  else
    return sub_23C0E4A74();
}

uint64_t BodyFocus.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain();
  sub_23C065C58(a1, v3);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t BodyFocus.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[2];
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  sub_23C065C58(v4, v1);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t sub_23C065A2C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[2];
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  sub_23C065C58(v4, v1);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t sub_23C065B1C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C065B24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23C065B50()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23C065B7C()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C065BC0()
{
  return sub_23C0E4AA4();
}

uint64_t sub_23C065BE8()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

BOOL sub_23C065C28(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_23C065C3C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_23C065C4C(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_23C065C58(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  _QWORD v31[2];
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v39 = *(_QWORD *)(sub_23C0E3EBC() - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v34 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v5 = sub_23C0E3F04();
  v6 = *(_QWORD *)(v5 - 8);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v33 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for Artwork();
  v38 = *(_QWORD *)(v35 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v44 = (uint64_t)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v37 = (uint64_t)v31 - v12;
  v13 = *((_QWORD *)a1 + 8);
  v14 = a1[1];
  v45 = *a1;
  v46 = v14;
  v15 = a1[2];
  v16 = a1[3];
  v31[1] = a1;
  v47 = v15;
  v48 = v16;
  v49 = v13;
  v36 = sub_23C0E4AC8();
  v17 = *(_QWORD *)(a2 + 56);
  v32 = a2 + 56;
  v18 = 1 << *(_BYTE *)(a2 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & v17;
  v41 = (unint64_t)(v18 + 63) >> 6;
  v40 = a2;
  swift_bridgeObjectRetain();
  if (v20)
  {
    v21 = __clz(__rbit64(v20));
    v43 = (v20 - 1) & v20;
    goto LABEL_14;
  }
  v22 = 1;
  if (v41 > 1)
  {
    v23 = *(_QWORD *)(v32 + 8);
    if (v23)
    {
LABEL_13:
      v43 = (v23 - 1) & v23;
      v21 = __clz(__rbit64(v23)) + (v22 << 6);
LABEL_14:
      v25 = v37;
      sub_23C0682D8(*(_QWORD *)(v40 + 48) + *(_QWORD *)(v38 + 72) * v21, v37);
      v26 = v25;
      v27 = v44;
      sub_23C06831C(v26, v44);
      sub_23C0E4A98();
      sub_23C068360(v27, (uint64_t)v9, &qword_256B0EFB0);
      v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v9, 1, v5);
      v42 = 0;
      if (v28 == 1)
      {
        sub_23C0E4AB0();
      }
      else
      {
        v29 = v33;
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v33, v9, v5);
        sub_23C0E4AB0();
        sub_23C0683A4(&qword_256B0EFB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
        sub_23C0E4714();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v29, v5);
      }
      __asm { BR              X9 }
    }
    v24 = 2;
    if (v41 > 2)
    {
      v23 = *(_QWORD *)(v32 + 16);
      if (v23)
      {
        v22 = 2;
        goto LABEL_13;
      }
      while (1)
      {
        v22 = v24 + 1;
        if (__OFADD__(v24, 1))
        {
          __break(1u);
          __break(1u);
          JUMPOUT(0x23C066260);
        }
        if (v22 >= v41)
          break;
        v23 = *(_QWORD *)(v32 + 8 * v22);
        ++v24;
        if (v23)
          goto LABEL_13;
      }
    }
  }
  swift_release();
  return sub_23C0E4AA4();
}

uint64_t sub_23C066288(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v12;
  int64_t v13;

  result = sub_23C0E4AC8();
  v4 = 0;
  v5 = 0;
  v6 = a2 + 56;
  v7 = 1 << *(_BYTE *)(a2 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a2 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v9 &= v9 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v5++, 1))
      goto LABEL_19;
    if (v5 >= v10)
      return sub_23C0E4AA4();
    v12 = *(_QWORD *)(v6 + 8 * v5);
    if (!v12)
      break;
LABEL_16:
    v9 = (v12 - 1) & v12;
LABEL_5:
    sub_23C0E4A98();
    sub_23C0E4AA4();
    result = sub_23C0E4AC8();
    v4 ^= result;
  }
  v13 = v5 + 1;
  if (v5 + 1 >= v10)
    return sub_23C0E4AA4();
  v12 = *(_QWORD *)(v6 + 8 * v13);
  if (v12)
  {
    ++v5;
    goto LABEL_16;
  }
  while (1)
  {
    v5 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v5 >= v10)
      return sub_23C0E4AA4();
    v12 = *(_QWORD *)(v6 + 8 * v5);
    ++v13;
    if (v12)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23C0663F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v12;

  sub_23C0E4AC8();
  v3 = 1 << *(_BYTE *)(a2 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a2 + 56);
  v12 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_14;
  }
  v7 = 1;
  if (v12 > 1)
  {
    v8 = *(_QWORD *)(a2 + 64);
    if (v8)
    {
LABEL_13:
      v6 = __clz(__rbit64(v8)) + (v7 << 6);
LABEL_14:
      v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + 48 * v6 + 40);
      sub_23C0E4A98();
      __asm { BR              X8 }
    }
    v9 = 2;
    if (v12 > 2)
    {
      v8 = *(_QWORD *)(a2 + 72);
      if (v8)
      {
        v7 = 2;
        goto LABEL_13;
      }
      while (1)
      {
        v7 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
          __break(1u);
          __break(1u);
          JUMPOUT(0x23C066868);
        }
        if (v7 >= v12)
          break;
        v8 = *(_QWORD *)(a2 + 56 + 8 * v7);
        ++v9;
        if (v8)
          goto LABEL_13;
      }
    }
  }
  swift_release();
  return sub_23C0E4AA4();
}

uint64_t sub_23C0668B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _QWORD v26[19];

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v26[9] = *(_OWORD *)a1;
  *(_OWORD *)&v26[11] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v26[13] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v26[15] = v5;
  v26[17] = v3;
  sub_23C0E4AC8();
  v22 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v23 = a2;
  v24 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v25 = v10;
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v11++, 1))
      goto LABEL_23;
    if (v11 >= v24)
    {
LABEL_21:
      swift_release();
      return sub_23C0E4AA4();
    }
    v16 = *(_QWORD *)(v22 + 8 * v11);
    if (!v16)
      break;
LABEL_16:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_17:
    v18 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 72 * v14);
    v19 = *v18;
    v20 = v18[2];
    v21 = v18[6];
    sub_23C0E4A98();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C065C58((__int128 *)v26, v19);
    swift_bridgeObjectRelease();
    sub_23C0E4AB0();
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    sub_23C0E4AB0();
    if (v21)
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    v12 = sub_23C0E4AC8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v10 = v12 ^ v25;
  }
  v17 = v11 + 1;
  if (v11 + 1 >= v24)
    goto LABEL_21;
  v16 = *(_QWORD *)(v22 + 8 * v17);
  if (v16)
  {
    ++v11;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v24)
      goto LABEL_21;
    v16 = *(_QWORD *)(v22 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_16;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_23C066B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[19];

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v29[9] = *(_OWORD *)a1;
  *(_OWORD *)&v29[11] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v29[13] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v29[15] = v5;
  v29[17] = v3;
  v24 = a2 + 56;
  sub_23C0E4AC8();
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v25 = a2;
  v26 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v28 = v10;
    if (v8)
    {
      v27 = (v8 - 1) & v8;
      v13 = __clz(__rbit64(v8)) | (v11 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v11++, 1))
      goto LABEL_24;
    if (v11 >= v26)
    {
LABEL_22:
      swift_release();
      return sub_23C0E4AA4();
    }
    v15 = *(_QWORD *)(v24 + 8 * v11);
    if (!v15)
      break;
LABEL_16:
    v27 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_17:
    v17 = (uint64_t *)(*(_QWORD *)(v25 + 48) + 72 * v13);
    v18 = *v17;
    v19 = v17[1];
    v20 = v17[3];
    v21 = v17[8];
    sub_23C0E4A98();
    sub_23C0E4AA4();
    v22 = *(_QWORD *)(v18 + 16);
    if (v22)
    {
      v23 = v18 + 32;
      do
      {
        v23 += 8;
        sub_23C0E4AA4();
        --v22;
      }
      while (v22);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    sub_23C065C58((__int128 *)v29, v19);
    swift_bridgeObjectRelease();
    sub_23C0E4AB0();
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C066288((uint64_t)v29, v21);
    swift_bridgeObjectRelease();
    v12 = sub_23C0E4AC8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v10 = v12 ^ v28;
    v8 = v27;
  }
  v16 = v11 + 1;
  if (v11 + 1 >= v26)
    goto LABEL_22;
  v15 = *(_QWORD *)(v24 + 8 * v16);
  if (v15)
  {
    ++v11;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v11 >= v26)
      goto LABEL_22;
    v15 = *(_QWORD *)(v24 + 8 * v11);
    ++v16;
    if (v15)
      goto LABEL_16;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_23C066E70(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28[72];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v3 = *((_QWORD *)a1 + 8);
  v4 = a1[1];
  v29 = *a1;
  v30 = v4;
  v5 = a1[3];
  v31 = a1[2];
  v32 = v5;
  v33 = v3;
  sub_23C0E4AC8();
  v25 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v26 = (unint64_t)(v6 + 63) >> 6;
  v27 = a2;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v11++, 1))
      goto LABEL_28;
    if (v11 >= v26)
    {
LABEL_26:
      swift_release();
      return sub_23C0E4AA4();
    }
    v16 = *(_QWORD *)(v25 + 8 * v11);
    if (!v16)
      break;
LABEL_16:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_17:
    v18 = (_QWORD *)(*(_QWORD *)(v27 + 48) + 56 * v14);
    v19 = v18[1];
    v20 = v18[3];
    v21 = v18[4];
    v22 = v18[6];
    sub_23C0E4A98();
    sub_23C0E4AA4();
    sub_23C0E4AA4();
    v23 = *(_QWORD *)(v19 + 16);
    if (v23)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v24 = v19 + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        swift_bridgeObjectRelease();
        v24 += 16;
        --v23;
      }
      while (v23);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_23C0E4AB0();
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_23C0B4468((uint64_t)v28, v21);
    swift_bridgeObjectRelease();
    sub_23C0E4AB0();
    if (v22)
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
    }
    v12 = sub_23C0E4AC8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v10 ^= v12;
  }
  v17 = v11 + 1;
  if (v11 + 1 >= v26)
    goto LABEL_26;
  v16 = *(_QWORD *)(v25 + 8 * v17);
  if (v16)
  {
    ++v11;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v26)
      goto LABEL_26;
    v16 = *(_QWORD *)(v25 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_16;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_23C067178(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;

  sub_23C0E4AC8();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_23C0E4AA4();
    }
    v13 = *(_QWORD *)(v3 + 8 * v10);
    if (!v13)
      break;
LABEL_16:
    v6 = (v13 - 1) & v13;
LABEL_5:
    sub_23C0E4A98();
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    sub_23C0E4ABC();
    sub_23C0E4ABC();
    sub_23C0E4ABC();
    v11 = sub_23C0E4AC8();
    result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  v14 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v13 = *(_QWORD *)(v3 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23C067348(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  _QWORD v26[19];

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v26[9] = *(_OWORD *)a1;
  *(_OWORD *)&v26[11] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v26[13] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v26[15] = v5;
  v26[17] = v3;
  sub_23C0E4AC8();
  v22 = a2 + 56;
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v23 = a2;
  v24 = (unint64_t)(v6 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v25 = v10;
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v11++, 1))
      goto LABEL_21;
    if (v11 >= v24)
    {
LABEL_19:
      swift_release();
      return sub_23C0E4AA4();
    }
    v16 = *(_QWORD *)(v22 + 8 * v11);
    if (!v16)
      break;
LABEL_16:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_17:
    v18 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 72 * v14);
    v19 = *v18;
    v20 = v18[2];
    v21 = v18[8];
    sub_23C0E4A98();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23C065C58((__int128 *)v26, v19);
    swift_bridgeObjectRelease();
    sub_23C0E4AB0();
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    sub_23C0E4AA4();
    swift_bridgeObjectRetain();
    sub_23C09C16C((__int128 *)v26, v21);
    swift_bridgeObjectRelease();
    v12 = sub_23C0E4AC8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v10 = v12 ^ v25;
  }
  v17 = v11 + 1;
  if (v11 + 1 >= v24)
    goto LABEL_19;
  v16 = *(_QWORD *)(v22 + 8 * v17);
  if (v16)
  {
    ++v11;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v24)
      goto LABEL_19;
    v16 = *(_QWORD *)(v22 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_16;
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_23C0675FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[19];

  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)&v25[9] = *(_OWORD *)a1;
  *(_OWORD *)&v25[11] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v25[13] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v25[15] = v5;
  v25[17] = v3;
  v22 = a2 + 56;
  sub_23C0E4AC8();
  v6 = 1 << *(_BYTE *)(a2 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a2 + 56);
  v21 = (unint64_t)(v6 + 63) >> 6;
  v23 = a2;
  result = swift_bridgeObjectRetain();
  v10 = 0;
  v11 = 0;
  while (1)
  {
    v24 = v10;
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v11++, 1))
      goto LABEL_21;
    if (v11 >= v21)
    {
LABEL_19:
      swift_release();
      return sub_23C0E4AA4();
    }
    v16 = *(_QWORD *)(v22 + 8 * v11);
    if (!v16)
      break;
LABEL_16:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_17:
    v18 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 56 * v14);
    v19 = *v18;
    v20 = v18[2];
    sub_23C0E4A98();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23C065C58((__int128 *)v25, v19);
    swift_bridgeObjectRelease();
    sub_23C0E4AB0();
    if (v20)
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    v12 = sub_23C0E4AC8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v10 = v12 ^ v24;
  }
  v17 = v11 + 1;
  if (v11 + 1 >= v21)
    goto LABEL_19;
  v16 = *(_QWORD *)(v22 + 8 * v17);
  if (v16)
  {
    ++v11;
    goto LABEL_16;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v21)
      goto LABEL_19;
    v16 = *(_QWORD *)(v22 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_16;
  }
  __break(1u);
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_23C067868(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v13;
  int64_t v14;

  sub_23C0E4AC8();
  v3 = a2 + 56;
  v4 = 1 << *(_BYTE *)(a2 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a2 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v9 = 0;
  v10 = 0;
  while (1)
  {
    if (v6)
    {
      v6 &= v6 - 1;
      goto LABEL_5;
    }
    if (__OFADD__(v10++, 1))
      goto LABEL_19;
    if (v10 >= v7)
    {
LABEL_17:
      swift_release();
      return sub_23C0E4AA4();
    }
    v13 = *(_QWORD *)(v3 + 8 * v10);
    if (!v13)
      break;
LABEL_16:
    v6 = (v13 - 1) & v13;
LABEL_5:
    sub_23C0E4A98();
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    v11 = sub_23C0E4AC8();
    result = swift_bridgeObjectRelease();
    v9 ^= v11;
  }
  v14 = v10 + 1;
  if (v10 + 1 >= v7)
    goto LABEL_17;
  v13 = *(_QWORD *)(v3 + 8 * v14);
  if (v13)
  {
    ++v10;
    goto LABEL_16;
  }
  while (1)
  {
    v10 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v10 >= v7)
      goto LABEL_17;
    v13 = *(_QWORD *)(v3 + 8 * v10);
    ++v14;
    if (v13)
      goto LABEL_16;
  }
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_23C0679FC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736B726F77747261 && a2 == 0xE800000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E6E6F6369 && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t _s16FitnessFiltering9BodyFocusV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v5 = a1[4];
  v15 = a1[5];
  v16 = a1[6];
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  if ((sub_23C072E20(*a1, *a2) & 1) == 0)
    return 0;
  if (v4)
  {
    if (v7)
    {
      if (v2 != v6 || v4 != v7)
      {
        v12 = sub_23C0E4A74();
        result = 0;
        if ((v12 & 1) == 0)
          return result;
      }
      goto LABEL_11;
    }
    return 0;
  }
  if (v7)
    return 0;
LABEL_11:
  if (v3 == v8 && v5 == v10 || (v14 = sub_23C0E4A74(), result = 0, (v14 & 1) != 0))
  {
    if (v15 == v9 && v16 == v11)
      return 1;
    else
      return sub_23C0E4A74();
  }
  return result;
}

uint64_t sub_23C067CE8()
{
  return MEMORY[0x24BEE0D10];
}

unint64_t sub_23C067CF8()
{
  unint64_t result;

  result = qword_256B0EF78;
  if (!qword_256B0EF78)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for BodyFocus, &type metadata for BodyFocus);
    atomic_store(result, (unint64_t *)&qword_256B0EF78);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for BodyFocus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for BodyFocus()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for BodyFocus(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for BodyFocus(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for BodyFocus(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for BodyFocus(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BodyFocus(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BodyFocus()
{
  return &type metadata for BodyFocus;
}

void type metadata accessor for HKWorkoutActivityType()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_256B0EF80)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_256B0EF80);
  }
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for BodyFocus.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BodyFocus.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C068110 + 4 * byte_23C0E4E59[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C068144 + 4 * byte_23C0E4E54[v4]))();
}

uint64_t sub_23C068144(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C06814C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C068154);
  return result;
}

uint64_t sub_23C068160(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C068168);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C06816C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C068174(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C068180(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23C06818C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for BodyFocus.CodingKeys()
{
  return &type metadata for BodyFocus.CodingKeys;
}

unint64_t sub_23C0681A8()
{
  unint64_t result;

  result = qword_256B0EF88;
  if (!qword_256B0EF88)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5084, &type metadata for BodyFocus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0EF88);
  }
  return result;
}

uint64_t sub_23C0681EC()
{
  return sub_23C0683A4(&qword_256B0EF90, (uint64_t (*)(uint64_t))type metadata accessor for HKWorkoutActivityType, (uint64_t)&unk_23C0E50FC);
}

unint64_t sub_23C06821C()
{
  unint64_t result;

  result = qword_256B0EF98;
  if (!qword_256B0EF98)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E4FF4, &type metadata for BodyFocus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0EF98);
  }
  return result;
}

unint64_t sub_23C068264()
{
  unint64_t result;

  result = qword_256B0EFA0;
  if (!qword_256B0EFA0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E501C, &type metadata for BodyFocus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0EFA0);
  }
  return result;
}

uint64_t sub_23C0682A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t result;

  if (a6 <= 7u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23C0682C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  uint64_t result;

  if (a6 <= 7u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_23C0682D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C06831C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C068360(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23C0683A4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242616E9C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C0683E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Artwork();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Filter.exclusions.getter()
{
  return swift_bridgeObjectRetain();
}

void Filter.filterContentType.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

uint64_t Filter.inclusions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Filter.sortMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t Filter.init(exclusions:filterContentType:inclusions:sortMode:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v5;

  v5 = *a2;
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v5;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4;
  return result;
}

uint64_t sub_23C068460()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C068498 + 4 * byte_23C0E51C0[*v0]))(0x6F6973756C637865, 0xEA0000000000736ELL);
}

unint64_t sub_23C068498()
{
  return 0xD000000000000011;
}

uint64_t sub_23C0684B4()
{
  return 0x6F6973756C636E69;
}

uint64_t sub_23C0684C8()
{
  return 0x65646F4D74726F73;
}

uint64_t sub_23C0684E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C069384(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C068504()
{
  sub_23C068754();
  return sub_23C0E4AEC();
}

uint64_t sub_23C06852C()
{
  sub_23C068754();
  return sub_23C0E4AF8();
}

uint64_t Filter.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFC8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  v15 = *((unsigned __int8 *)v1 + 8);
  v14 = v1[2];
  v13 = *((unsigned __int8 *)v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C068754();
  sub_23C0E4AE0();
  v17 = v8;
  v16 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFD8);
  sub_23C068B1C(&qword_256B0EFE0, (uint64_t (*)(void))sub_23C068798, MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    v9 = v14;
    v10 = v13;
    LOBYTE(v17) = v15;
    v16 = 1;
    sub_23C0687DC();
    sub_23C0E4A44();
    v17 = v9;
    v16 = 2;
    sub_23C0E4A44();
    LOBYTE(v17) = v10;
    v16 = 3;
    sub_23C068820();
    sub_23C0E4A44();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23C068754()
{
  unint64_t result;

  result = qword_256B0EFD0;
  if (!qword_256B0EFD0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E537C, &type metadata for Filter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0EFD0);
  }
  return result;
}

unint64_t sub_23C068798()
{
  unint64_t result;

  result = qword_256B0EFE8;
  if (!qword_256B0EFE8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterItem, &type metadata for FilterItem);
    atomic_store(result, (unint64_t *)&qword_256B0EFE8);
  }
  return result;
}

unint64_t sub_23C0687DC()
{
  unint64_t result;

  result = qword_256B0EFF0;
  if (!qword_256B0EFF0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterContentType, &type metadata for FilterContentType);
    atomic_store(result, (unint64_t *)&qword_256B0EFF0);
  }
  return result;
}

unint64_t sub_23C068820()
{
  unint64_t result;

  result = qword_256B0EFF8;
  if (!qword_256B0EFF8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSortMode, &type metadata for FilterSortMode);
    atomic_store(result, (unint64_t *)&qword_256B0EFF8);
  }
  return result;
}

uint64_t Filter.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F000);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C068754();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFD8);
  v18 = 0;
  sub_23C068B1C(&qword_256B0F008, (uint64_t (*)(void))sub_23C068B84, MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v9 = v19;
  v18 = 1;
  sub_23C068BC8();
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v16 = v19;
  v18 = 2;
  sub_23C0E49C0();
  v11 = v16;
  v12 = v19;
  v18 = 3;
  sub_23C068C0C();
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v19;
  v14 = v17;
  *v17 = v9;
  *((_BYTE *)v14 + 8) = v11;
  v14[2] = v12;
  *((_BYTE *)v14 + 24) = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C068B1C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0EFD8);
    v8 = a2();
    result = MEMORY[0x242616E9C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23C068B84()
{
  unint64_t result;

  result = qword_256B0F010;
  if (!qword_256B0F010)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterItem, &type metadata for FilterItem);
    atomic_store(result, (unint64_t *)&qword_256B0F010);
  }
  return result;
}

unint64_t sub_23C068BC8()
{
  unint64_t result;

  result = qword_256B0F018;
  if (!qword_256B0F018)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterContentType, &type metadata for FilterContentType);
    atomic_store(result, (unint64_t *)&qword_256B0F018);
  }
  return result;
}

unint64_t sub_23C068C0C()
{
  unint64_t result;

  result = qword_256B0F020;
  if (!qword_256B0F020)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSortMode, &type metadata for FilterSortMode);
    atomic_store(result, (unint64_t *)&qword_256B0F020);
  }
  return result;
}

uint64_t sub_23C068C50@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Filter.init(from:)(a1, a2);
}

uint64_t sub_23C068C64(_QWORD *a1)
{
  return Filter.encode(to:)(a1);
}

void Filter.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(unsigned __int8 *)(v1 + 24);
  swift_bridgeObjectRetain();
  sub_23C0663F0(a1, v3);
  swift_bridgeObjectRelease();
  sub_23C0E4AA4();
  swift_bridgeObjectRetain();
  sub_23C0663F0(a1, v4);
  swift_bridgeObjectRelease();
  __asm { BR              X9 }
}

uint64_t sub_23C068D14()
{
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t Filter.hashValue.getter()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;
  char v3;
  _BYTE v5[72];
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v1 = *((_BYTE *)v0 + 8);
  v2 = v0[2];
  v3 = *((_BYTE *)v0 + 24);
  v6 = *v0;
  v7 = v1;
  v8 = v2;
  v9 = v3;
  sub_23C0E4A98();
  Filter.hash(into:)((uint64_t)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C068E60()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;
  char v3;
  _BYTE v5[72];
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v1 = *((_BYTE *)v0 + 8);
  v2 = v0[2];
  v3 = *((_BYTE *)v0 + 24);
  v6 = *v0;
  v7 = v1;
  v8 = v2;
  v9 = v3;
  sub_23C0E4A98();
  Filter.hash(into:)((uint64_t)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C068EC4()
{
  uint64_t *v0;
  char v1;
  uint64_t v2;
  char v3;
  _BYTE v5[72];
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  v1 = *((_BYTE *)v0 + 8);
  v2 = v0[2];
  v3 = *((_BYTE *)v0 + 24);
  v6 = *v0;
  v7 = v1;
  v8 = v2;
  v9 = v3;
  sub_23C0E4A98();
  Filter.hash(into:)((uint64_t)v5);
  return sub_23C0E4AC8();
}

void _s16FitnessFiltering6FilterV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  char v4;
  int v5;
  uint64_t v6;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if ((sub_23C075FE0(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0
    && ((v2 ^ v5) & 1) == 0
    && (sub_23C075FE0(v3, v6) & 1) != 0)
  {
    sub_23C07740C(v4);
  }
}

unint64_t sub_23C068FB8()
{
  unint64_t result;

  result = qword_256B0F028;
  if (!qword_256B0F028)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Filter, &type metadata for Filter);
    atomic_store(result, (unint64_t *)&qword_256B0F028);
  }
  return result;
}

uint64_t destroy for Filter()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Filter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Filter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for Filter(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for Filter(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Filter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Filter()
{
  return &type metadata for Filter;
}

uint64_t storeEnumTagSinglePayload for Filter.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C06922C + 4 * byte_23C0E51D1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C069260 + 4 * byte_23C0E51CC[v4]))();
}

uint64_t sub_23C069260(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C069268(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C069270);
  return result;
}

uint64_t sub_23C06927C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C069284);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C069288(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C069290(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Filter.CodingKeys()
{
  return &type metadata for Filter.CodingKeys;
}

unint64_t sub_23C0692B0()
{
  unint64_t result;

  result = qword_256B0F030;
  if (!qword_256B0F030)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5354, &type metadata for Filter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F030);
  }
  return result;
}

unint64_t sub_23C0692F8()
{
  unint64_t result;

  result = qword_256B0F038;
  if (!qword_256B0F038)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E52C4, &type metadata for Filter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F038);
  }
  return result;
}

unint64_t sub_23C069340()
{
  unint64_t result;

  result = qword_256B0F040;
  if (!qword_256B0F040)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E52EC, &type metadata for Filter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F040);
  }
  return result;
}

uint64_t sub_23C069384(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x6F6973756C637865 && a2 == 0xEA0000000000736ELL;
  if (v3 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000023C0EDF30 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F6973756C636E69 && a2 == 0xEA0000000000736ELL || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65646F4D74726F73 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void FilterThemeSectionView.init(attributedTitle:categories:clearActionTitle:sizeClass:headerViewBuilder:options:onOptionSelected:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C06E7B4(a1, a2, &qword_256B0F048);
  type metadata accessor for FilterThemeSectionView();
}

int *sub_23C0695D0(int *result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *(_QWORD *)(v7 + result[23]) = v6;
  v10 = (_QWORD *)(v7 + result[24]);
  *v10 = v5;
  v10[1] = v4;
  *(_BYTE *)(v7 + result[25]) = v3;
  v11 = (_QWORD *)(v7 + result[26]);
  *v11 = v2;
  v11[1] = v1;
  *(_QWORD *)(v7 + result[28]) = v13;
  v12 = (_QWORD *)(v7 + result[27]);
  *v12 = v9;
  v12[1] = v8;
  return result;
}

void type metadata accessor for FilterThemeSectionView()
{
  JUMPOUT(0x242616E18);
}

void FilterThemeSectionView.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F050);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F058);
  type metadata accessor for Option();
}

uint64_t sub_23C069700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_BYTE *, _BYTE *, uint64_t);
  void (*v46)(_BYTE *, uint64_t);
  _BYTE v48[96];

  swift_getTupleTypeMetadata2();
  v4 = sub_23C0E481C();
  v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F060);
  v6 = MEMORY[0x24BEE12D8];
  v7 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v4);
  v8 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v3 - 136) = v4;
  *(_QWORD *)(v3 - 128) = v8;
  *(_QWORD *)(v3 - 120) = v5;
  *(_QWORD *)(v3 - 112) = v7;
  v9 = MEMORY[0x24BEE0D10];
  *(_QWORD *)(v3 - 104) = MEMORY[0x24BEE0D10];
  sub_23C0E4654();
  swift_getTupleTypeMetadata2();
  v10 = sub_23C0E46B4();
  v11 = MEMORY[0x24BDF5428];
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v10);
  v12 = sub_23C0E4618();
  v13 = sub_23C06E774(&qword_256B0F068, v2, v6);
  *(_QWORD *)(v3 - 136) = v1;
  *(_QWORD *)(v3 - 128) = v8;
  *(_QWORD *)(v3 - 120) = v12;
  *(_QWORD *)(v3 - 112) = v13;
  *(_QWORD *)(v3 - 104) = v9;
  v14 = sub_23C0E4654();
  *(_QWORD *)(v3 - 144) = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v12);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v14, v3 - 144);
  v15 = sub_23C0E3F94();
  v16 = MEMORY[0x242616E9C](MEMORY[0x24BDEB168], v15);
  *(_QWORD *)(v3 - 136) = v15;
  *(_QWORD *)(v3 - 128) = v16;
  MEMORY[0x242616E48](255, v3 - 136, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v3 - 136) = v15;
  *(_QWORD *)(v3 - 128) = v16;
  swift_getOpaqueTypeConformance2();
  v17 = sub_23C0E3FA0();
  v18 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v17);
  *(_QWORD *)(v3 - 136) = v17;
  *(_QWORD *)(v3 - 128) = v18;
  v19 = MEMORY[0x242616E48](255, v3 - 136, MEMORY[0x24BDF29F8], 0);
  v20 = sub_23C0E42A0();
  *(_QWORD *)(v3 - 136) = v17;
  *(_QWORD *)(v3 - 128) = v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v3 - 136) = v19;
  *(_QWORD *)(v3 - 128) = v20;
  v22 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v3 - 120) = OpaqueTypeConformance2;
  *(_QWORD *)(v3 - 112) = v22;
  v23 = MEMORY[0x242616E48](255, v3 - 136, MEMORY[0x24BDF3000], 0);
  *(_QWORD *)(v3 - 136) = v19;
  *(_QWORD *)(v3 - 128) = v20;
  *(_QWORD *)(v3 - 120) = OpaqueTypeConformance2;
  *(_QWORD *)(v3 - 112) = v22;
  v24 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v3 - 136) = v23;
  *(_QWORD *)(v3 - 128) = v24;
  MEMORY[0x242616E48](255, v3 - 136, MEMORY[0x24BDF2FE0], 0);
  swift_getTupleTypeMetadata2();
  v25 = sub_23C0E46B4();
  MEMORY[0x242616E9C](v11, v25);
  v26 = sub_23C0E4618();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = &v48[-v28];
  sub_23C0E4234();
  v30 = sub_23C0E4024();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = MEMORY[0x24BDAC7A8](v30);
  v34 = &v48[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v32);
  v36 = &v48[-v35];
  sub_23C0E415C();
  v37 = *(_QWORD *)(v3 - 328);
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v3 - 320);
  *(_QWORD *)(v3 - 232) = v37;
  v38 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v3 - 224) = *(_QWORD *)(v3 - 312);
  *(_QWORD *)(v3 - 216) = v38;
  v39 = *(_QWORD *)(v3 - 288);
  *(_QWORD *)(v3 - 208) = *(_QWORD *)(v3 - 280);
  *(_QWORD *)(v3 - 200) = v39;
  v40 = *(_QWORD *)(v3 - 304);
  *(_QWORD *)(v3 - 192) = *(_QWORD *)(v3 - 296);
  *(_QWORD *)(v3 - 184) = v40;
  v41 = *(_QWORD *)(v3 - 272);
  *(_QWORD *)(v3 - 176) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v3 - 168) = v41;
  sub_23C0E460C();
  v42 = sub_23C0E42DC();
  v43 = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v26);
  sub_23C06B9FC(v42, 0x4034000000000000, 0, v26, v43);
  (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v29, v26);
  v44 = sub_23C0683A4(qword_256B0F070, (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8], MEMORY[0x24BDF02F0]);
  *(_QWORD *)(v3 - 160) = v43;
  *(_QWORD *)(v3 - 152) = v44;
  MEMORY[0x242616E9C](MEMORY[0x24BDED308], v30, v3 - 160);
  v45 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 16);
  v45(v36, v34, v30);
  v46 = *(void (**)(_BYTE *, uint64_t))(v31 + 8);
  v46(v34, v30);
  v45(*(_BYTE **)(v3 - 264), v36, v30);
  return ((uint64_t (*)(_BYTE *, uint64_t))v46)(v36, v30);
}

void sub_23C069B98(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[31];
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v31 = a8;
  v22[10] = a7;
  v22[9] = a6;
  v22[29] = a5;
  v34 = a3;
  v22[7] = a2;
  v32 = a1;
  v30 = a9;
  v33 = a11;
  v22[8] = a10;
  v29 = sub_23C0E41A4();
  v28 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v27 = (char *)v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23C0E4288();
  MEMORY[0x24BDAC7A8](v17);
  v25 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23C0E42A0();
  v26 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)v22 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23C0E4270();
  v22[30] = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v22[28] = (char *)v22 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F050);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F058);
  v35 = a2;
  v36 = a4;
  v22[0] = a4;
  v37 = a6;
  v38 = a7;
  v39 = a8;
  v40 = a10;
  type metadata accessor for Option();
}

void sub_23C069D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  swift_getTupleTypeMetadata2();
  v14 = sub_23C0E481C();
  v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F060);
  v16 = MEMORY[0x24BEE12D8];
  v17 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v14);
  v18 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v13 - 168) = v14;
  *(_QWORD *)(v13 - 160) = v18;
  *(_QWORD *)(v13 - 152) = v15;
  *(_QWORD *)(v13 - 144) = v17;
  v19 = MEMORY[0x24BEE0D10];
  *(_QWORD *)(v13 - 136) = MEMORY[0x24BEE0D10];
  sub_23C0E4654();
  swift_getTupleTypeMetadata2();
  v20 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v20);
  v21 = sub_23C0E4618();
  v22 = sub_23C06E774(&qword_256B0F068, v10, v16);
  *(_QWORD *)(v13 - 168) = v9;
  *(_QWORD *)(v13 - 160) = v18;
  *(_QWORD *)(v13 - 152) = v21;
  *(_QWORD *)(v13 - 144) = v22;
  *(_QWORD *)(v13 - 136) = v19;
  v23 = sub_23C0E4654();
  *(_QWORD *)(v13 - 96) = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v21);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v23, v13 - 96);
  v24 = sub_23C0E3F94();
  v25 = MEMORY[0x242616E9C](MEMORY[0x24BDEB168], v24);
  *(_QWORD *)(v13 - 168) = v24;
  *(_QWORD *)(v13 - 160) = v25;
  *(_QWORD *)(v13 - 632) = MEMORY[0x242616E48](255, v13 - 168, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v13 - 168) = v24;
  *(_QWORD *)(v13 - 160) = v25;
  *(_QWORD *)(v13 - 640) = swift_getOpaqueTypeConformance2();
  v26 = sub_23C0E3FA0();
  *(_QWORD *)(v13 - 552) = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)(v13 - 648) = (char *)&a9 - v27;
  v28 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v26);
  *(_QWORD *)(v13 - 168) = v26;
  *(_QWORD *)(v13 - 160) = v28;
  v29 = MEMORY[0x242616E48](0, v13 - 168, MEMORY[0x24BDF29F8], 0);
  *(_QWORD *)(v13 - 544) = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  *(_QWORD *)(v13 - 560) = (char *)&a9 - v30;
  *(_QWORD *)(v13 - 536) = v26;
  *(_QWORD *)(v13 - 168) = v26;
  *(_QWORD *)(v13 - 160) = v28;
  *(_QWORD *)(v13 - 608) = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v13 - 168) = v29;
  *(_QWORD *)(v13 - 160) = v12;
  v32 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v13 - 152) = OpaqueTypeConformance2;
  *(_QWORD *)(v13 - 144) = v32;
  v33 = MEMORY[0x242616E48](0, v13 - 168, MEMORY[0x24BDF3000], 0);
  *(_QWORD *)(v13 - 464) = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  *(_QWORD *)(v13 - 488) = (char *)&a9 - v34;
  *(_QWORD *)(v13 - 528) = v29;
  *(_QWORD *)(v13 - 168) = v29;
  *(_QWORD *)(v13 - 160) = v12;
  *(_QWORD *)(v13 - 376) = v12;
  *(_QWORD *)(v13 - 616) = OpaqueTypeConformance2;
  *(_QWORD *)(v13 - 152) = OpaqueTypeConformance2;
  *(_QWORD *)(v13 - 144) = v32;
  v35 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v13 - 448) = v33;
  *(_QWORD *)(v13 - 168) = v33;
  *(_QWORD *)(v13 - 160) = v35;
  *(_QWORD *)(v13 - 512) = v35;
  v36 = MEMORY[0x242616E48](0, v13 - 168, MEMORY[0x24BDF2FE0], 0);
  *(_QWORD *)(v13 - 472) = v36;
  *(_QWORD *)(v13 - 504) = *(_QWORD *)(v36 - 8);
  v37 = MEMORY[0x24BDAC7A8](v36);
  *(_QWORD *)(v13 - 440) = (char *)&a9 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  *(_QWORD *)(v13 - 520) = (char *)&a9 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  *(_QWORD *)(v13 - 456) = (char *)&a9 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  MEMORY[0x24BDAC7A8](v43);
  *(_QWORD *)(v13 - 168) = *(_QWORD *)(v13 - 600);
  *(_QWORD *)(v13 - 160) = v44;
  *(_QWORD *)(v13 - 152) = v11;
  v45 = *(_QWORD *)(v13 - 584);
  *(_QWORD *)(v13 - 144) = *(_QWORD *)(v13 - 424);
  *(_QWORD *)(v13 - 136) = v45;
  v46 = *(_QWORD *)(v13 - 336);
  *(_QWORD *)(v13 - 128) = *(_QWORD *)(v13 - 576);
  *(_QWORD *)(v13 - 120) = v46;
  v47 = *(_QWORD *)(v13 - 320);
  *(_QWORD *)(v13 - 112) = *(_QWORD *)(v13 - 592);
  *(_QWORD *)(v13 - 104) = v47;
  type metadata accessor for FilterThemeSectionView();
}

uint64_t sub_23C06A1F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v10 - 328) + *(int *)(a1 + 104)))(*(_QWORD *)(v10 - 328), *(_QWORD *)(*(_QWORD *)(v10 - 328) + *(int *)(a1 + 96)), *(_QWORD *)(*(_QWORD *)(v10 - 328) + *(int *)(a1 + 96) + 8));
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  *(_QWORD *)(v10 - 496) = v1;
  v12 = *(_QWORD *)(v10 - 312);
  *(_QWORD *)(v10 - 624) = v11;
  v11(v1, v6, v12);
  v13 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  *(_QWORD *)(v10 - 480) = v6;
  *(_QWORD *)(v10 - 568) = v13;
  v13(v6, v12);
  sub_23C0E42B8();
  *(_QWORD *)(v10 - 288) = v5;
  *(_QWORD *)(v10 - 280) = v12;
  *(_QWORD *)(v10 - 272) = *(_QWORD *)(v10 - 656);
  *(_QWORD *)(v10 - 264) = v8;
  *(_QWORD *)(v10 - 256) = v2;
  *(_QWORD *)(v10 - 248) = v3;
  v14 = *(_QWORD *)(v10 - 648);
  *(_QWORD *)(v10 - 240) = *(_QWORD *)(v10 - 336);
  *(_QWORD *)(v10 - 232) = v4;
  v15 = *(_QWORD *)(v10 - 328);
  *(_QWORD *)(v10 - 224) = v7;
  *(_QWORD *)(v10 - 216) = v15;
  sub_23C0D4060();
  v16 = *(_QWORD *)(v10 - 432);
  sub_23C0E4258();
  v17 = sub_23C0E42D0();
  v18 = sub_23C0E42B8();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v17)
    sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v18)
    sub_23C0E42C4();
  v19 = *(_QWORD *)(v10 - 488);
  v20 = *(_QWORD *)(v10 - 560);
  v21 = v16;
  v22 = *(_QWORD *)(v10 - 536);
  sub_23C0E4474();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 416) + 8))(v21, *(_QWORD *)(v10 - 408));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 552) + 8))(v14, v22);
  sub_23C0E427C();
  v23 = *(_QWORD *)(v10 - 400);
  sub_23C0E4294();
  v24 = *(_QWORD *)(v10 - 528);
  v25 = *(_QWORD *)(v10 - 376);
  sub_23C0E4498();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 384) + 8))(v23, v25);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 544) + 8))(v20, v24);
  v26 = *(_QWORD *)(v10 - 368);
  sub_23C0E4198();
  v27 = sub_23C0E42B8();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v27)
    sub_23C0E42C4();
  v28 = *(_QWORD *)(v10 - 520);
  v29 = *(_QWORD *)(v10 - 448);
  v30 = *(_QWORD *)(v10 - 512);
  sub_23C0E448C();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 360) + 8))(v26, *(_QWORD *)(v10 - 352));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 464) + 8))(v19, v29);
  *(_QWORD *)(v10 - 168) = v29;
  *(_QWORD *)(v10 - 160) = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v32 = *(_QWORD *)(v10 - 504);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  v34 = *(_QWORD *)(v10 - 456);
  v35 = *(_QWORD *)(v10 - 472);
  v33(v34, v28, v35);
  v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  v36(v28, v35);
  v37 = *(_QWORD *)(v10 - 480);
  v38 = *(_QWORD *)(v10 - 496);
  v39 = *(_QWORD *)(v10 - 312);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 - 624))(v37, v38, v39);
  *(_QWORD *)(v10 - 168) = v37;
  v40 = *(_QWORD *)(v10 - 440);
  v33(v40, v34, v35);
  *(_QWORD *)(v10 - 160) = v40;
  *(_QWORD *)(v10 - 184) = v39;
  *(_QWORD *)(v10 - 176) = v35;
  *(_QWORD *)(v10 - 200) = *(_QWORD *)(v10 - 320);
  *(_QWORD *)(v10 - 192) = OpaqueTypeConformance2;
  sub_23C0DE900((uint64_t *)(v10 - 168), 2uLL, v10 - 184);
  v36(v34, v35);
  v41 = *(void (**)(uint64_t, uint64_t))(v10 - 568);
  v41(v38, v39);
  v36(v40, v35);
  return ((uint64_t (*)(uint64_t, uint64_t))v41)(v37, v39);
}

void sub_23C06A630()
{
  sub_23C06D9FC((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C069B98);
}

void sub_23C06A63C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[34];

  v18[7] = a8;
  v18[6] = a7;
  v18[5] = a6;
  v18[11] = a5;
  v18[3] = a4;
  v18[9] = a3;
  v18[2] = a2;
  v18[12] = a1;
  v18[13] = a9;
  v18[10] = a11;
  v18[4] = a10;
  v16 = sub_23C0E41E0();
  MEMORY[0x24BDAC7A8](v16);
  v18[8] = (char *)v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F050);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F058);
  v18[27] = a2;
  v18[28] = a4;
  v18[29] = a6;
  v18[30] = a7;
  v18[31] = a8;
  v18[32] = a10;
  type metadata accessor for Option();
}

uint64_t sub_23C06A73C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _BYTE *, uint64_t);
  void (*v30)(_BYTE *, uint64_t);
  _BYTE v32[96];

  swift_getTupleTypeMetadata2();
  v3 = sub_23C0E481C();
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F060);
  v5 = MEMORY[0x24BEE12D8];
  v6 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v3);
  v7 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v2 - 136) = v3;
  *(_QWORD *)(v2 - 128) = v7;
  *(_QWORD *)(v2 - 120) = v4;
  *(_QWORD *)(v2 - 112) = v6;
  v8 = MEMORY[0x24BEE0D10];
  *(_QWORD *)(v2 - 104) = MEMORY[0x24BEE0D10];
  sub_23C0E4654();
  swift_getTupleTypeMetadata2();
  v9 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v9);
  v10 = sub_23C0E4618();
  v11 = sub_23C06E774(&qword_256B0F068, v1, v5);
  *(_QWORD *)(v2 - 136) = v0;
  *(_QWORD *)(v2 - 128) = v7;
  *(_QWORD *)(v2 - 120) = v10;
  *(_QWORD *)(v2 - 112) = v11;
  *(_QWORD *)(v2 - 104) = v8;
  v12 = sub_23C0E4654();
  *(_QWORD *)(v2 - 144) = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v10);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v12, v2 - 144);
  v13 = sub_23C0E3F94();
  *(_QWORD *)(v2 - 344) = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v15 = &v32[-v14];
  v16 = MEMORY[0x242616E9C](MEMORY[0x24BDEB168], v13);
  *(_QWORD *)(v2 - 352) = v16;
  *(_QWORD *)(v2 - 136) = v13;
  *(_QWORD *)(v2 - 128) = v16;
  v17 = MEMORY[0x242616E48](0, v2 - 136, MEMORY[0x24BDF2D58], 0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = &v32[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v19);
  v23 = &v32[-v22];
  sub_23C0E4108();
  v24 = *(_QWORD *)(v2 - 280);
  *(_QWORD *)(v2 - 224) = *(_QWORD *)(v2 - 336);
  *(_QWORD *)(v2 - 216) = v24;
  v25 = *(_QWORD *)(v2 - 264);
  *(_QWORD *)(v2 - 208) = *(_QWORD *)(v2 - 328);
  *(_QWORD *)(v2 - 200) = v25;
  v26 = *(_QWORD *)(v2 - 304);
  *(_QWORD *)(v2 - 192) = *(_QWORD *)(v2 - 312);
  *(_QWORD *)(v2 - 184) = v26;
  v27 = *(_QWORD *)(v2 - 320);
  *(_QWORD *)(v2 - 176) = *(_QWORD *)(v2 - 296);
  *(_QWORD *)(v2 - 168) = v27;
  v28 = *(_QWORD *)(v2 - 256);
  *(_QWORD *)(v2 - 160) = *(_QWORD *)(v2 - 272);
  *(_QWORD *)(v2 - 152) = v28;
  sub_23C06B998();
  sub_23C0E3F88();
  sub_23C0E4480();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v2 - 344) + 8))(v15, v13);
  v29 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v18 + 16);
  v29(v23, v21, v17);
  v30 = *(void (**)(_BYTE *, uint64_t))(v18 + 8);
  v30(v21, v17);
  v29(*(_BYTE **)(v2 - 248), v23, v17);
  return ((uint64_t (*)(_BYTE *, uint64_t))v30)(v23, v17);
}

void sub_23C06AA60()
{
  type metadata accessor for FilterThemeSectionView();
}

void sub_23C06AAD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 - 264) = a1;
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 272) = (char *)&a9 - v16;
  *(_QWORD *)(v15 - 288) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F050);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F058);
  *(_QWORD *)(v15 - 160) = v9;
  *(_QWORD *)(v15 - 152) = v13;
  *(_QWORD *)(v15 - 144) = v12;
  *(_QWORD *)(v15 - 136) = v11;
  *(_QWORD *)(v15 - 128) = v10;
  *(_QWORD *)(v15 - 120) = v14;
  type metadata accessor for Option();
}

uint64_t sub_23C06AB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(_BYTE *, _BYTE *, uint64_t);
  void (*v33)(_BYTE *, uint64_t);
  _BYTE v35[80];

  swift_getTupleTypeMetadata2();
  v3 = sub_23C0E481C();
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F060);
  v5 = MEMORY[0x24BEE12D8];
  v6 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v3);
  v7 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v2 - 160) = v3;
  *(_QWORD *)(v2 - 152) = v7;
  v8 = v7;
  *(_QWORD *)(v2 - 144) = v4;
  *(_QWORD *)(v2 - 136) = v6;
  v9 = MEMORY[0x24BEE0D10];
  *(_QWORD *)(v2 - 128) = MEMORY[0x24BEE0D10];
  sub_23C0E4654();
  swift_getTupleTypeMetadata2();
  v10 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v10);
  v11 = sub_23C0E4618();
  v12 = sub_23C06E774(&qword_256B0F068, &qword_256B0F050, v5);
  *(_QWORD *)(v2 - 296) = v12;
  *(_QWORD *)(v2 - 160) = v0;
  *(_QWORD *)(v2 - 152) = v8;
  *(_QWORD *)(v2 - 144) = v11;
  *(_QWORD *)(v2 - 136) = v12;
  *(_QWORD *)(v2 - 128) = v9;
  v13 = sub_23C0E4654();
  *(_QWORD *)(v2 - 280) = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = &v35[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v18 = &v35[-v17];
  v19 = *(_QWORD *)(v2 - 264);
  *(_QWORD *)(v2 - 160) = *(_QWORD *)(*(_QWORD *)(v2 - 208) + *(int *)(v19 + 92));
  v20 = v1;
  v21 = *(void (**)(uint64_t))(v1 + 16);
  v22 = *(_QWORD *)(v2 - 272);
  v23 = v19;
  v21(v22);
  v24 = (*(unsigned __int8 *)(v20 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v25 = (char *)swift_allocObject();
  v26 = *(_QWORD *)(v2 - 200);
  *((_QWORD *)v25 + 2) = *(_QWORD *)(v2 - 256);
  *((_QWORD *)v25 + 3) = v26;
  v27 = *(_QWORD *)(v2 - 184);
  *((_QWORD *)v25 + 4) = *(_QWORD *)(v2 - 248);
  *((_QWORD *)v25 + 5) = v27;
  v28 = *(_QWORD *)(v2 - 224);
  *((_QWORD *)v25 + 6) = *(_QWORD *)(v2 - 232);
  *((_QWORD *)v25 + 7) = v28;
  v29 = *(_QWORD *)(v2 - 240);
  *((_QWORD *)v25 + 8) = *(_QWORD *)(v2 - 216);
  *((_QWORD *)v25 + 9) = v29;
  *((_QWORD *)v25 + 10) = *(_QWORD *)(v2 - 192);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(&v25[v24], v22, v23);
  swift_bridgeObjectRetain();
  v30 = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v11);
  sub_23C06DAEC();
  sub_23C0E4648();
  *(_QWORD *)(v2 - 168) = v30;
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v13, v2 - 168);
  v31 = *(_QWORD *)(v2 - 280);
  v32 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v31 + 16);
  v32(v18, v16, v13);
  v33 = *(void (**)(_BYTE *, uint64_t))(v31 + 8);
  v33(v16, v13);
  v32(*(_BYTE **)(v2 - 176), v18, v13);
  return ((uint64_t (*)(_BYTE *, uint64_t))v33)(v18, v13);
}

void sub_23C06AE30()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F058);
  type metadata accessor for Option();
}

uint64_t sub_23C06AED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_BYTE *, _BYTE *, uint64_t);
  void (*v23)(_BYTE *, uint64_t);
  _BYTE v25[96];

  swift_getTupleTypeMetadata2();
  v5 = sub_23C0E481C();
  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F060);
  v7 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v5);
  v8 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v4 - 160) = v5;
  *(_QWORD *)(v4 - 152) = v8;
  *(_QWORD *)(v4 - 144) = v6;
  *(_QWORD *)(v4 - 136) = v7;
  *(_QWORD *)(v4 - 128) = MEMORY[0x24BEE0D10];
  sub_23C0E4654();
  swift_getTupleTypeMetadata2();
  v9 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v9);
  v10 = sub_23C0E4618();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = &v25[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v25[-v15];
  v17 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v4 - 128) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v4 - 112) = v17;
  *(_QWORD *)(v4 - 96) = *(_QWORD *)(v3 + 64);
  v18 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v4 - 160) = *(_OWORD *)v3;
  *(_OWORD *)(v4 - 144) = v18;
  sub_23C0E415C();
  v19 = *(_QWORD *)(v4 - 312);
  *(_QWORD *)(v4 - 256) = v2;
  *(_QWORD *)(v4 - 248) = v19;
  v20 = *(_QWORD *)(v4 - 296);
  *(_QWORD *)(v4 - 240) = *(_QWORD *)(v4 - 336);
  *(_QWORD *)(v4 - 232) = v20;
  v21 = *(_QWORD *)(v4 - 320);
  *(_QWORD *)(v4 - 224) = *(_QWORD *)(v4 - 328);
  *(_QWORD *)(v4 - 216) = v21;
  *(_QWORD *)(v4 - 208) = v1;
  *(_QWORD *)(v4 - 200) = v0;
  *(_QWORD *)(v4 - 192) = *(_QWORD *)(v4 - 304);
  *(_QWORD *)(v4 - 184) = v4 - 160;
  *(_QWORD *)(v4 - 176) = *(_QWORD *)(v4 - 288);
  sub_23C0E460C();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v10);
  v22 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16);
  v22(v16, v14, v10);
  v23 = *(void (**)(_BYTE *, uint64_t))(v11 + 8);
  v23(v14, v10);
  v22(*(_BYTE **)(v4 - 280), v16, v10);
  return ((uint64_t (*)(_BYTE *, uint64_t))v23)(v16, v10);
}

void sub_23C06B0EC()
{
  type metadata accessor for Option();
}

void sub_23C06B18C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  swift_getTupleTypeMetadata2();
  v11 = sub_23C0E481C();
  v12 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F060);
  v13 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v11);
  v14 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v10 - 176) = v11;
  *(_QWORD *)(v10 - 168) = v14;
  *(_QWORD *)(v10 - 160) = v12;
  *(_QWORD *)(v10 - 152) = v13;
  *(_QWORD *)(v10 - 144) = MEMORY[0x24BEE0D10];
  v15 = sub_23C0E4654();
  v16 = MEMORY[0x24BDAC7A8](v15);
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v10 - 384) = (char *)&a9 - v17;
  v18 = *(_QWORD *)(v9 + 48);
  *(_QWORD *)(v10 - 176) = *(_QWORD *)(v9 + 40);
  *(_QWORD *)(v10 - 168) = v18;
  sub_23C06DB6C();
  swift_bridgeObjectRetain();
  v19 = sub_23C0E43CC();
  v21 = v20;
  LOBYTE(v14) = v22 & 1;
  *(_DWORD *)(v10 - 176) = sub_23C0E421C();
  sub_23C0E4390();
  *(_QWORD *)(v10 - 400) = v23;
  *(_QWORD *)(v10 - 392) = v24;
  sub_23C06DBB0(v19, v21, v14);
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  v25 = *(_OWORD *)(v9 + 48);
  *(_OWORD *)(v10 - 144) = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v10 - 128) = v25;
  *(_QWORD *)(v10 - 112) = *(_QWORD *)(v9 + 64);
  v26 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(v10 - 176) = *(_OWORD *)v9;
  *(_OWORD *)(v10 - 160) = v26;
  v27 = *(_QWORD *)(v10 - 328);
  *(_QWORD *)(v10 - 248) = *(_QWORD *)(v10 - 376);
  *(_QWORD *)(v10 - 240) = v27;
  v28 = *(_QWORD *)(v10 - 312);
  *(_QWORD *)(v10 - 232) = *(_QWORD *)(v10 - 368);
  *(_QWORD *)(v10 - 224) = v28;
  v29 = *(_QWORD *)(v10 - 336);
  *(_QWORD *)(v10 - 216) = *(_QWORD *)(v10 - 344);
  *(_QWORD *)(v10 - 208) = v29;
  v30 = *(_QWORD *)(v10 - 352);
  *(_QWORD *)(v10 - 200) = *(_QWORD *)(v10 - 360);
  *(_QWORD *)(v10 - 192) = v30;
  *(_QWORD *)(v10 - 184) = *(_QWORD *)(v10 - 320);
  type metadata accessor for FilterThemeSectionView();
}

void sub_23C06B380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_23C06B520(v2 - 176, a1, v1);
}

uint64_t sub_23C06B398()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v6 - 256) = sub_23C06DBC8();
  *(_QWORD *)(v6 - 304) = MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v0, v6 - 256);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v8 = *(_QWORD *)(v6 - 384);
  v7(v8, v1, v0);
  v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v1, v0);
  v10 = v3;
  *(_QWORD *)(v6 - 176) = v3;
  v11 = *(_QWORD *)(v6 - 400);
  *(_QWORD *)(v6 - 168) = v11;
  *(_BYTE *)(v6 - 160) = v2;
  *(_QWORD *)(v6 - 152) = *(_QWORD *)(v6 - 392);
  *(_QWORD *)(v6 - 144) = v4;
  *(_QWORD *)(v6 - 136) = 1;
  *(_BYTE *)(v6 - 128) = 0;
  *(_QWORD *)(v6 - 248) = v6 - 176;
  v7(v1, v8, v0);
  *(_QWORD *)(v6 - 240) = v1;
  sub_23C06DE1C(v10, v11, v2);
  swift_bridgeObjectRetain();
  swift_retain();
  *(_QWORD *)(v6 - 272) = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F058);
  *(_QWORD *)(v6 - 264) = v0;
  *(_QWORD *)(v6 - 288) = sub_23C06DE2C();
  *(_QWORD *)(v6 - 280) = *(_QWORD *)(v6 - 304);
  sub_23C0DE900((uint64_t *)(v6 - 248), 2uLL, v6 - 272);
  v9(v8, v0);
  sub_23C06DBB0(v10, v11, v2);
  swift_release();
  swift_bridgeObjectRelease();
  v9(v1, v0);
  sub_23C06DBB0(*(_QWORD *)(v6 - 176), *(_QWORD *)(v6 - 168), *(_BYTE *)(v6 - 160));
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_23C06B520(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[18];
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10[16] = a3;
  v14 = *(_QWORD *)(a2 - 8);
  v10[10] = *(_QWORD *)(v14 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = v4[2];
  v7 = v4[6];
  v6 = v4[7];
  v8 = v4[8];
  v9 = v4[9];
  v11 = v4[4];
  v12 = v8;
  v15 = v5;
  v16 = v11;
  v17 = v7;
  v18 = v6;
  v10[4] = v9;
  v10[5] = v7;
  v19 = v8;
  v20 = v9;
  type metadata accessor for Option();
}

uint64_t sub_23C06B5C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  unint64_t v47;
  _BYTE v48[80];

  v0[7] = swift_getTupleTypeMetadata2();
  v8 = sub_23C0E481C();
  v0[15] = v8;
  v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F060);
  v0[12] = v9;
  v10 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v8);
  v0[11] = v10;
  v11 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v7 - 160) = v8;
  *(_QWORD *)(v7 - 152) = v11;
  *(_QWORD *)(v7 - 144) = v9;
  *(_QWORD *)(v7 - 136) = v10;
  *(_QWORD *)(v7 - 128) = MEMORY[0x24BEE0D10];
  v12 = sub_23C0E4654();
  v13 = *(_QWORD *)(v12 - 8);
  v0[13] = v12;
  v0[14] = v13;
  v14 = MEMORY[0x24BDAC7A8](v12);
  v0[8] = &v48[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v0[9] = &v48[-v16];
  v17 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v7 - 128) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v7 - 112) = v17;
  *(_QWORD *)(v7 - 96) = *(_QWORD *)(v1 + 64);
  v18 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v7 - 160) = *(_OWORD *)v1;
  *(_OWORD *)(v7 - 144) = v18;
  v0[20] = v2;
  *(_QWORD *)(v7 - 168) = *(_QWORD *)(v0[21] + *(int *)(v2 + 112));
  v19 = *(_QWORD *)(v2 + 24);
  v0[6] = v19;
  v0[36] = v3;
  v0[37] = v19;
  v20 = v3;
  v21 = *(_QWORD *)(v2 + 40);
  v0[3] = v21;
  v22 = v0[18];
  v0[38] = v22;
  v0[39] = v21;
  v0[40] = v6;
  v0[41] = v4;
  v0[42] = v0[19];
  v0[43] = v5;
  v23 = *(_QWORD *)(v2 + 80);
  v0[17] = v23;
  v0[44] = v23;
  v0[45] = v7 - 160;
  v24 = sub_23C0E481C();
  swift_bridgeObjectRetain();
  MEMORY[0x242616E9C](MEMORY[0x24BEE12F0], v24);
  *(_QWORD *)(v7 - 184) = sub_23C0E490C();
  MEMORY[0x242616E9C](MEMORY[0x24BEE12C8], v24);
  sub_23C0E47E0();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v7 - 184) = *(_QWORD *)(v7 - 168);
  v25 = sub_23C0E4918();
  MEMORY[0x242616E9C](MEMORY[0x24BEE2FC0], v25);
  *(_QWORD *)(v7 - 168) = sub_23C0E4828();
  v0[24] = v20;
  v26 = v20;
  v0[1] = v20;
  v0[2] = v4;
  v27 = v0[5];
  v28 = v0[6];
  v0[25] = v28;
  v0[26] = v22;
  v29 = v0[3];
  v30 = v0[4];
  v0[27] = v29;
  v0[28] = v27;
  v31 = v4;
  v0[29] = v4;
  v32 = v0[19];
  v0[30] = v32;
  v0[31] = v30;
  v0[32] = v0[17];
  v0[7] = swift_getKeyPath();
  v33 = v0[23];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v33 + 16))(v0[22], v0[21], v0[20]);
  v34 = (*(unsigned __int8 *)(v33 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v35 = (char *)swift_allocObject();
  *((_QWORD *)v35 + 2) = v26;
  *((_QWORD *)v35 + 3) = v28;
  v36 = v0[18];
  *((_QWORD *)v35 + 4) = v36;
  *((_QWORD *)v35 + 5) = v29;
  *((_QWORD *)v35 + 6) = v27;
  *((_QWORD *)v35 + 7) = v31;
  *((_QWORD *)v35 + 8) = v32;
  *((_QWORD *)v35 + 9) = v30;
  v37 = v0[17];
  *((_QWORD *)v35 + 10) = v37;
  (*(void (**)(char *, _QWORD, _QWORD))(v0[23] + 32))(&v35[v34], v0[22], v0[20]);
  v38 = (_QWORD *)swift_allocObject();
  v38[2] = v0[1];
  v38[3] = v28;
  v38[4] = v36;
  v38[5] = v29;
  v39 = v0[2];
  v38[6] = v27;
  v38[7] = v39;
  v38[8] = v32;
  v38[9] = v30;
  v38[10] = v37;
  v38[11] = sub_23C06E034;
  v38[12] = v35;
  v47 = sub_23C06DBC8();
  v40 = v0[8];
  sub_23C0E463C();
  *(_QWORD *)(v7 - 192) = v47;
  v41 = v0[13];
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v41, v7 - 192);
  v42 = v0[14];
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  v44 = v0[9];
  v43(v44, v40, v41);
  v45 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
  v45(v40, v41);
  v43(v0[16], v44, v41);
  return ((uint64_t (*)(uint64_t, uint64_t))v45)(v44, v41);
}

uint64_t sub_23C06B980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_23C06B998()
{
  sub_23C0E41E0();
  sub_23C0683A4(&qword_256B0F100, (uint64_t (*)(uint64_t))MEMORY[0x24BDEF998], MEMORY[0x24BDEF9B8]);
  return sub_23C0E4B04();
}

uint64_t sub_23C06B9FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];
  char v18;

  v8 = sub_23C0E4234();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  if ((a3 & 1) == 0)
    sub_23C0E3F7C();
  v17[1] = v12;
  v17[2] = v13;
  v17[3] = v14;
  v17[4] = v15;
  v18 = a3 & 1;
  sub_23C0E4228();
  MEMORY[0x242616680](v11, a4, v8, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_23C06BAF0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23C06BB34(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(*(_QWORD *)(a2 + 64) + 16))
  {
    swift_bridgeObjectRetain();
    sub_23C06BC24();
  }
  return 0;
}

void sub_23C06BC24()
{
  type metadata accessor for Option();
}

uint64_t sub_23C06BC60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v4;

  if (v1 == Option.identifier.getter() && v0 == v2)
    v4 = 1;
  else
    v4 = sub_23C0E4A74();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_23C06BCC0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[28];
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v26 = a6;
  v28 = a3;
  v29 = a2;
  v19[23] = a1;
  v24 = a8;
  v19[11] = a12;
  v27 = a9;
  v23 = sub_23C0E4144();
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v22 = (char *)v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23C0E4630();
  MEMORY[0x24BDAC7A8](v16);
  v19[26] = (char *)v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F198);
  MEMORY[0x24BDAC7A8](v20);
  v19[27] = (char *)v19 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = a4;
  v30 = a4;
  v31 = a5;
  v32 = a7;
  v33 = a9;
  v34 = a10;
  v35 = a11;
  type metadata accessor for Option();
}

void sub_23C06BE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 - 280) = a1;
  *(_QWORD *)(v18 - 336) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v18 - 304) = (char *)&a9 - v19;
  *(_QWORD *)(v18 - 160) = v16;
  *(_QWORD *)(v18 - 152) = v12;
  *(_QWORD *)(v18 - 144) = v14;
  *(_QWORD *)(v18 - 136) = v17;
  *(_QWORD *)(v18 - 128) = v13;
  *(_QWORD *)(v18 - 120) = v9;
  *(_QWORD *)(v18 - 112) = v15;
  *(_QWORD *)(v18 - 104) = v11;
  *(_QWORD *)(v18 - 96) = v10;
  type metadata accessor for FilterThemeSectionView();
}

void sub_23C06BEA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;

  v17 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 576) = a1;
  v18 = *(_QWORD *)(v17 + 64);
  v19 = v17;
  MEMORY[0x24BDAC7A8](a1);
  v21 = (char *)&a9 - v20;
  *(_QWORD *)(v15 - 568) = (char *)&a9 - v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F140);
  *(_QWORD *)(v15 - 488) = v22;
  *(_QWORD *)(v15 - 480) = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  *(_QWORD *)(v15 - 512) = (char *)&a9 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F1A0);
  *(_QWORD *)(v15 - 448) = v24;
  *(_QWORD *)(v15 - 464) = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  *(_QWORD *)(v15 - 504) = (char *)&a9 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F130);
  *(_QWORD *)(v15 - 472) = v26;
  MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)(v15 - 496) = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F1A8);
  *(_QWORD *)(v15 - 408) = v28;
  *(_QWORD *)(v15 - 416) = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  *(_QWORD *)(v15 - 456) = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F128);
  *(_QWORD *)(v15 - 432) = v30;
  MEMORY[0x24BDAC7A8](v30);
  *(_QWORD *)(v15 - 440) = (char *)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F060);
  MEMORY[0x24BDAC7A8](v32);
  *(_QWORD *)(v15 - 376) = (char *)&a9 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v15 - 592) = v19;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 16))(v21, *(_QWORD *)(v15 - 296), a1);
  v34 = *(_QWORD *)(v15 - 336);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v34 + 16))(*(_QWORD *)(v15 - 304), *(_QWORD *)(v15 - 288), *(_QWORD *)(v15 - 280));
  v35 = (*(unsigned __int8 *)(v19 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  *(_QWORD *)(v15 - 608) = v35;
  v36 = (v18 + *(unsigned __int8 *)(v34 + 80) + v35) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  *(_QWORD *)(v15 - 600) = v36;
  *(_QWORD *)(v15 - 584) = (v14 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = (char *)swift_allocObject();
  v38 = *(_QWORD *)(v15 - 328);
  *((_QWORD *)v37 + 2) = v38;
  *((_QWORD *)v37 + 3) = v13;
  v39 = v13;
  *(_QWORD *)(v15 - 544) = v13;
  v40 = v9;
  *(_QWORD *)(v15 - 536) = v9;
  *((_QWORD *)v37 + 4) = v9;
  v41 = *(_QWORD *)(v15 - 320);
  *((_QWORD *)v37 + 5) = v41;
  *((_QWORD *)v37 + 6) = v11;
  *(_QWORD *)(v15 - 528) = v11;
  v42 = *(_QWORD *)(v15 - 312);
  *((_QWORD *)v37 + 7) = v42;
  *((_QWORD *)v37 + 8) = v10;
  *(_QWORD *)(v15 - 552) = v10;
  v43 = v12;
  *(_QWORD *)(v15 - 560) = v12;
  *((_QWORD *)v37 + 9) = v12;
  v44 = *(_QWORD *)(v15 - 520);
  *((_QWORD *)v37 + 10) = v44;
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v15 - 592) + 32))(&v37[*(_QWORD *)(v15 - 608)], *(_QWORD *)(v15 - 568), *(_QWORD *)(v15 - 576));
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v15 - 336) + 32))(&v37[*(_QWORD *)(v15 - 600)], *(_QWORD *)(v15 - 304), *(_QWORD *)(v15 - 280));
  *(_QWORD *)&v37[*(_QWORD *)(v15 - 584)] = *(_QWORD *)(v15 - 424);
  *(_QWORD *)(v15 - 256) = v38;
  *(_QWORD *)(v15 - 248) = v39;
  *(_QWORD *)(v15 - 240) = v40;
  *(_QWORD *)(v15 - 232) = v41;
  *(_QWORD *)(v15 - 224) = v11;
  *(_QWORD *)(v15 - 216) = v42;
  *(_QWORD *)(v15 - 208) = v10;
  *(_QWORD *)(v15 - 200) = v43;
  v45 = *(_QWORD *)(v15 - 288);
  *(_QWORD *)(v15 - 192) = v44;
  *(_QWORD *)(v15 - 184) = v45;
  *(_QWORD *)(v15 - 176) = *(_QWORD *)(v15 - 296);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F1B0);
  sub_23C06E494();
  v46 = *(_QWORD *)(v15 - 512);
  sub_23C0E45D0();
  sub_23C06E774(&qword_256B0F148, &qword_256B0F140, MEMORY[0x24BDF43B0]);
  sub_23C06DDD8();
  v47 = *(_QWORD *)(v15 - 504);
  v48 = *(_QWORD *)(v15 - 488);
  sub_23C0E4420();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 480) + 8))(v46, v48);
  v49 = *(int *)(*(_QWORD *)(v15 - 280) + 68);
  *(_QWORD *)(v15 - 280) = v49;
  LOBYTE(v48) = *(_BYTE *)(v45 + v49) == 0;
  KeyPath = swift_getKeyPath();
  v51 = swift_allocObject();
  *(_BYTE *)(v51 + 16) = v48;
  v52 = *(_QWORD *)(v15 - 464);
  v53 = *(_QWORD *)(v15 - 496);
  v54 = *(_QWORD *)(v15 - 448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v53, v47, v54);
  v55 = (uint64_t *)(v53 + *(int *)(*(_QWORD *)(v15 - 472) + 36));
  *v55 = KeyPath;
  v55[1] = (uint64_t)sub_23C06E620;
  v55[2] = v51;
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v47, v54);
  sub_23C0E42B8();
  sub_23C0E4684();
  sub_23C06DCF8();
  sub_23C0E44B0();
  sub_23C06E834(v53, &qword_256B0F130);
  v56 = *MEMORY[0x24BDEEB68];
  v57 = sub_23C0E4120();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 104))(*(_QWORD *)(v15 - 400), v56, v57);
  sub_23C06E628();
}

uint64_t sub_23C06C490(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_QWORD *)(v6 - 392);
  sub_23C06E6F4(v1, v8);
  *(_QWORD *)(v8 + *(int *)(*(_QWORD *)(v6 - 384) + 36)) = a1;
  sub_23C06E738(v1);
  v9 = sub_23C0E4684();
  v11 = v10;
  v12 = v3 + *(int *)(v4 + 36);
  sub_23C068360(v8, v12, &qword_256B0F198);
  v13 = (uint64_t *)(v12 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F170) + 36));
  *v13 = v9;
  v13[1] = v11;
  v14 = *(_QWORD *)(v6 - 416);
  v15 = *(_QWORD *)(v6 - 408);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v3, v5, v15);
  sub_23C06E834(v8, &qword_256B0F198);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v5, v15);
  if (*(_BYTE *)(v2 + *(_QWORD *)(v6 - 280)) == 2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F218);
    v16 = *(_QWORD *)(v6 - 368);
    v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_23C0E53D0;
    sub_23C0E412C();
    *(_QWORD *)(v6 - 160) = v17;
    sub_23C0683A4(&qword_256B0F200, (uint64_t (*)(uint64_t))MEMORY[0x24BDEED88], MEMORY[0x24BDEEDA8]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F208);
    sub_23C06E774(&qword_256B0F210, &qword_256B0F208, MEMORY[0x24BEE12C8]);
    v18 = *(_QWORD *)(v6 - 360);
    v19 = *(_QWORD *)(v6 - 352);
    sub_23C0E48A0();
    v20 = v16;
  }
  else
  {
    *(_QWORD *)(v6 - 160) = MEMORY[0x24BEE4AF8];
    sub_23C0683A4(&qword_256B0F200, (uint64_t (*)(uint64_t))MEMORY[0x24BDEED88], MEMORY[0x24BDEEDA8]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F208);
    sub_23C06E774(&qword_256B0F210, &qword_256B0F208, MEMORY[0x24BEE12C8]);
    v18 = *(_QWORD *)(v6 - 360);
    v19 = *(_QWORD *)(v6 - 352);
    sub_23C0E48A0();
    v20 = *(_QWORD *)(v6 - 368);
  }
  sub_23C06DC4C();
  v21 = *(_QWORD *)(v6 - 376);
  sub_23C0E44A4();
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  sub_23C06E834(v3, &qword_256B0F128);
  return sub_23C06E7B4(v21, *(_QWORD *)(v6 - 344), &qword_256B0F060);
}

void sub_23C06C738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[14];
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v20 = a7;
  v19 = a9;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F1F8);
  MEMORY[0x24BDAC7A8](v23);
  v22 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23C0E4630();
  MEMORY[0x24BDAC7A8](v16);
  v21 = (char *)v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[12] = sub_23C0E4114();
  sub_23C06CAF0(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_23C06C844()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v3 = v0[20];
  v4 = v0[21];
  v5 = *((unsigned __int8 *)v0 + 176);
  v6 = v0[23];
  v0[11] = v0[24];
  *((_DWORD *)v0 + 21) = *((unsigned __int8 *)v0 + 200);
  *((_DWORD *)v0 + 20) = sub_23C0E42E8();
  sub_23C0E4684();
  sub_23C0E4060();
  v7 = *(_QWORD *)(v2 - 200);
  v8 = *(_BYTE *)(v2 - 192);
  v0[8] = *(_QWORD *)(v2 - 184);
  v0[9] = v7;
  v9 = *(_BYTE *)(v2 - 176);
  v10 = *(_QWORD *)(v2 - 168);
  v11 = *(_BYTE *)(v2 - 160);
  v0[7] = *(_QWORD *)(v2 - 152);
  *((_DWORD *)v0 + 13) = *(unsigned __int8 *)(v2 - 144);
  v0[5] = *(_QWORD *)(v2 - 136);
  *((_DWORD *)v0 + 9) = *(unsigned __int8 *)(v2 - 128);
  v0[3] = *(_QWORD *)(v2 - 120);
  *((_DWORD *)v0 + 5) = *(unsigned __int8 *)(v2 - 112);
  v12 = *(_QWORD *)(v2 - 104);
  *v0 = *(_QWORD *)(v2 - 96);
  v0[1] = v12;
  sub_23C06DE1C(v3, v4, v5);
  swift_bridgeObjectRetain();
  v0[13] = v3;
  v0[16] = v4;
  *((_DWORD *)v0 + 28) = v5;
  sub_23C06DBB0(v3, v4, v5);
  swift_bridgeObjectRelease();
  v0[20] = v0[12];
  v0[21] = 0;
  *((_BYTE *)v0 + 176) = 1;
  v0[23] = v3;
  v0[24] = v4;
  *((_BYTE *)v0 + 200) = v5;
  v13 = v0[11];
  v0[26] = v6;
  v0[27] = v13;
  *((_BYTE *)v0 + 224) = *((_DWORD *)v0 + 21);
  *((_BYTE *)v0 + 232) = *((_DWORD *)v0 + 20);
  *((_OWORD *)v0 + 15) = xmmword_23C0E53E0;
  *((_OWORD *)v0 + 16) = xmmword_23C0E53E0;
  *((_BYTE *)v0 + 272) = 0;
  v0[35] = v0[9];
  *((_BYTE *)v0 + 288) = v8;
  v0[37] = v0[8];
  *((_BYTE *)v0 + 304) = v9;
  v0[39] = v10;
  *((_BYTE *)v0 + 320) = v11;
  v0[41] = v0[7];
  *((_BYTE *)v0 + 336) = *((_DWORD *)v0 + 13);
  v0[43] = v0[5];
  *((_BYTE *)v0 + 352) = *((_DWORD *)v0 + 9);
  v0[45] = v0[3];
  *((_BYTE *)v0 + 368) = *((_DWORD *)v0 + 5);
  v14 = *v0;
  v0[47] = v0[1];
  v0[48] = v14;
  v15 = *MEMORY[0x24BDEEB68];
  v16 = sub_23C0E4120();
  v17 = v0[17];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v17, v15, v16);
  v18 = v0[18];
  sub_23C06E6F4(v17, v18);
  *(_BYTE *)(v18 + *(int *)(v0[19] + 36)) = 0;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F1B0);
  sub_23C068360(v18, v1 + *(int *)(v19 + 36), &qword_256B0F1F8);
  v20 = *((_OWORD *)v0 + 23);
  *(_OWORD *)(v1 + 192) = *((_OWORD *)v0 + 22);
  *(_OWORD *)(v1 + 208) = v20;
  *(_QWORD *)(v1 + 224) = v0[48];
  v21 = *((_OWORD *)v0 + 19);
  *(_OWORD *)(v1 + 128) = *((_OWORD *)v0 + 18);
  *(_OWORD *)(v1 + 144) = v21;
  v22 = *((_OWORD *)v0 + 21);
  *(_OWORD *)(v1 + 160) = *((_OWORD *)v0 + 20);
  *(_OWORD *)(v1 + 176) = v22;
  v23 = *((_OWORD *)v0 + 15);
  *(_OWORD *)(v1 + 64) = *((_OWORD *)v0 + 14);
  *(_OWORD *)(v1 + 80) = v23;
  v24 = *((_OWORD *)v0 + 17);
  *(_OWORD *)(v1 + 96) = *((_OWORD *)v0 + 16);
  *(_OWORD *)(v1 + 112) = v24;
  v25 = *((_OWORD *)v0 + 11);
  *(_OWORD *)v1 = *((_OWORD *)v0 + 10);
  *(_OWORD *)(v1 + 16) = v25;
  v26 = *((_OWORD *)v0 + 13);
  *(_OWORD *)(v1 + 32) = *((_OWORD *)v0 + 12);
  *(_OWORD *)(v1 + 48) = v26;
  sub_23C06E7F8((uint64_t)(v0 + 20));
  sub_23C06E834(v18, &qword_256B0F1F8);
  sub_23C06E738(v17);
  sub_23C06DBB0(v0[13], v0[16], *((_DWORD *)v0 + 28));
  return swift_bridgeObjectRelease();
}

void sub_23C06CAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  (*(void (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  sub_23C06DB6C();
  v6 = sub_23C0E43CC();
  v8 = v7;
  v10 = v9 & 1;
  sub_23C0E4378();
  v11 = sub_23C0E43B4();
  v13 = v12;
  v15 = v14;
  swift_release();
  sub_23C06DBB0(v6, v8, v10);
  swift_bridgeObjectRelease();
  sub_23C0E43A8();
  sub_23C06DBB0(v11, v13, v15 & 1);
  swift_bridgeObjectRelease();
  sub_23C06E870();
}

uint64_t sub_23C06CC2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  *(_QWORD *)(v5 - 104) = a1;
  v6 = sub_23C0E4390();
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  sub_23C06DBB0(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  *(_QWORD *)v1 = v6;
  *(_QWORD *)(v1 + 8) = v8;
  *(_BYTE *)(v1 + 16) = v12;
  *(_QWORD *)(v1 + 24) = v10;
  *(_QWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 40) = 0;
  sub_23C06DE1C(v6, v8, v12);
  swift_bridgeObjectRetain();
  sub_23C06DBB0(v6, v8, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C06CCF4()
{
  return sub_23C0E4444();
}

uint64_t sub_23C06CD10()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23C06CD18()
{
  unint64_t v0;

  sub_23C06D600();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_23C06CDB4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23C0E3EB0();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[24];
    *(uint64_t *)((char *)a1 + a3[23]) = *(uint64_t *)((char *)a2 + a3[23]);
    v12 = (uint64_t *)((char *)a1 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = a3[26];
    *((_BYTE *)a1 + a3[25]) = *((_BYTE *)a2 + a3[25]);
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[27];
    v20 = a3[28];
    v21 = (uint64_t *)((char *)a1 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    *(uint64_t *)((char *)a1 + v20) = *(uint64_t *)((char *)a2 + v20);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23C06CF08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_23C0E3EB0();
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

char *sub_23C06CFAC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[24];
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = *((_QWORD *)v11 + 1);
  *(_QWORD *)v10 = *(_QWORD *)v11;
  *((_QWORD *)v10 + 1) = v12;
  v13 = a3[26];
  a1[a3[25]] = a2[a3[25]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = a3[27];
  v18 = a3[28];
  v19 = &a1[v17];
  v20 = &a2[v17];
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = v21;
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_23C06D0D4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v12 = a3[24];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[25]] = a2[a3[25]];
  v15 = a3[26];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = v18;
  swift_retain();
  swift_release();
  v19 = a3[27];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[28]] = *(_QWORD *)&a2[a3[28]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_23C06D288(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[24];
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[26];
  a1[a3[25]] = a2[a3[25]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[28];
  *(_OWORD *)&a1[a3[27]] = *(_OWORD *)&a2[a3[27]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  return a1;
}

char *sub_23C06D374(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  swift_bridgeObjectRelease();
  v12 = a3[24];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[26];
  a1[a3[25]] = a2[a3[25]];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  swift_release();
  *(_OWORD *)&a1[a3[27]] = *(_OWORD *)&a2[a3[27]];
  swift_release();
  *(_QWORD *)&a1[a3[28]] = *(_QWORD *)&a2[a3[28]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C06D4EC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C06D4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 92));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23C06D578()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C06D584(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 92)) = (a2 - 1);
  return result;
}

void sub_23C06D600()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256B0F0F8)
  {
    sub_23C0E3EB0();
    v0 = sub_23C0E487C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256B0F0F8);
  }
}

void sub_23C06D654()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F050);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F058);
  type metadata accessor for Option();
}

uint64_t sub_23C06D6BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  swift_getTupleTypeMetadata2();
  v2 = sub_23C0E481C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F060);
  v3 = MEMORY[0x24BEE12D8];
  MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v2);
  v4 = MEMORY[0x24BEE0D00];
  v5 = MEMORY[0x24BEE0D10];
  sub_23C0E4654();
  swift_getTupleTypeMetadata2();
  v6 = sub_23C0E46B4();
  v7 = MEMORY[0x24BDF5428];
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v6);
  v27 = v0;
  v28 = v4;
  v29 = sub_23C0E4618();
  v30 = sub_23C06E774(&qword_256B0F068, v1, v3);
  v31 = v5;
  v8 = sub_23C0E4654();
  v9 = MEMORY[0x24BDF4700];
  v26 = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v29);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v8, &v26);
  v10 = sub_23C0E3F94();
  v11 = MEMORY[0x242616E9C](MEMORY[0x24BDEB168], v10);
  v27 = v10;
  v28 = v11;
  MEMORY[0x242616E48](255, &v27, MEMORY[0x24BDF2D58], 0);
  v27 = v10;
  v28 = v11;
  swift_getOpaqueTypeConformance2();
  v12 = sub_23C0E3FA0();
  v13 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v12);
  v27 = v12;
  v28 = v13;
  v14 = MEMORY[0x242616E48](255, &v27, MEMORY[0x24BDF29F8], 0);
  v15 = sub_23C0E42A0();
  v27 = v12;
  v28 = v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v27 = v14;
  v28 = v15;
  v17 = MEMORY[0x24BDF10F0];
  v29 = OpaqueTypeConformance2;
  v30 = MEMORY[0x24BDF10F0];
  v18 = MEMORY[0x242616E48](255, &v27, MEMORY[0x24BDF3000], 0);
  v27 = v14;
  v28 = v15;
  v29 = OpaqueTypeConformance2;
  v30 = v17;
  v19 = swift_getOpaqueTypeConformance2();
  v27 = v18;
  v28 = v19;
  MEMORY[0x242616E48](255, &v27, MEMORY[0x24BDF2FE0], 0);
  swift_getTupleTypeMetadata2();
  v20 = sub_23C0E46B4();
  MEMORY[0x242616E9C](v7, v20);
  v21 = sub_23C0E4618();
  sub_23C0E4234();
  v22 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8];
  v23 = sub_23C0E4024();
  v25[0] = MEMORY[0x242616E9C](v9, v21);
  v25[1] = sub_23C0683A4(qword_256B0F070, v22, MEMORY[0x24BDF02F0]);
  return MEMORY[0x242616E9C](MEMORY[0x24BDED308], v23, v25);
}

void sub_23C06D9E4()
{
  sub_23C06D9FC((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C06A63C);
}

void sub_23C06D9F0()
{
  sub_23C06D9FC((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C06AA60);
}

void sub_23C06D9FC(void (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  a1(v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10]);
  JUMPOUT(0x23C06DA28);
}

void sub_23C06DA38()
{
  type metadata accessor for FilterThemeSectionView();
}

void sub_23C06DA90()
{
  sub_23C06AE30();
}

unint64_t sub_23C06DAEC()
{
  unint64_t result;

  result = qword_256B0F108;
  if (!qword_256B0F108)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ThemeCategory, &type metadata for ThemeCategory);
    atomic_store(result, (unint64_t *)&qword_256B0F108);
  }
  return result;
}

void sub_23C06DB30()
{
  sub_23C06B0EC();
}

unint64_t sub_23C06DB6C()
{
  unint64_t result;

  result = qword_256B0F110;
  if (!qword_256B0F110)
  {
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256B0F110);
  }
  return result;
}

uint64_t sub_23C06DBB0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

unint64_t sub_23C06DBC8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B0F118;
  if (!qword_256B0F118)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F060);
    v2[0] = sub_23C06DC4C();
    v2[1] = sub_23C0683A4(&qword_256B0F178, MEMORY[0x24BDF1088], MEMORY[0x24BDF1078]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F118);
  }
  return result;
}

unint64_t sub_23C06DC4C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_256B0F120;
  if (!qword_256B0F120)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F128);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F130);
    v2[3] = sub_23C06DCF8();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23C06E774(&qword_256B0F168, &qword_256B0F170, MEMORY[0x24BDEF370]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F120);
  }
  return result;
}

unint64_t sub_23C06DCF8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_256B0F138;
  if (!qword_256B0F138)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F130);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F140);
    v2[3] = &type metadata for FilterButtonStyle;
    v2[4] = sub_23C06E774(&qword_256B0F148, &qword_256B0F140, MEMORY[0x24BDF43B0]);
    v2[5] = sub_23C06DDD8();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F138);
  }
  return result;
}

unint64_t sub_23C06DDD8()
{
  unint64_t result;

  result = qword_256B0F150;
  if (!qword_256B0F150)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E95B4, &type metadata for FilterButtonStyle);
    atomic_store(result, (unint64_t *)&qword_256B0F150);
  }
  return result;
}

uint64_t sub_23C06DE1C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

unint64_t sub_23C06DE2C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_256B0F180;
  if (!qword_256B0F180)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F058);
    v2 = sub_23C06E774(&qword_256B0F188, &qword_256B0F190, MEMORY[0x24BDF1028]);
    v3[0] = MEMORY[0x24BDF1F80];
    v3[1] = v2;
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256B0F180);
  }
  return result;
}

uint64_t sub_23C06DEB0(uint64_t a1)
{
  uint64_t v1;

  return sub_23C06BB34(a1, *(_QWORD *)(v1 + 88)) & 1;
}

uint64_t sub_23C06DEF0()
{
  return 72;
}

__n128 sub_23C06DEFC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void objectdestroyTm()
{
  type metadata accessor for FilterThemeSectionView();
}

uint64_t sub_23C06DF64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v3 = (v2 + 88) & ~v2;
  v4 = sub_23C0E3EB0();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1 + v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1 + v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23C06E034()
{
  type metadata accessor for FilterThemeSectionView();
}

#error "23C06E0C8: call analysis failed (funcsize=15)"

uint64_t sub_23C06E0EC()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C06E110()
{
  type metadata accessor for Option();
}

uint64_t sub_23C06E158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v2(v1, v0 + *(int *)(TupleTypeMetadata2 + 48));
}

void sub_23C06E1A8()
{
  type metadata accessor for FilterThemeSectionView();
}

void sub_23C06E1FC()
{
  type metadata accessor for Option();
}

uint64_t sub_23C06E244(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = sub_23C0E3EB0();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1 + v2, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1 + v2, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v1 + ((v2 + v3 + v4) & ~v4));
  return swift_deallocObject();
}

void sub_23C06E33C()
{
  type metadata accessor for FilterThemeSectionView();
}

void sub_23C06E398()
{
  type metadata accessor for Option();
}

void sub_23C06E3C4()
{
  type metadata accessor for FilterThemeSectionView();
}

uint64_t sub_23C06E41C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + *(int *)(a1 + 108) + v4))(v3, v1);
}

void sub_23C06E458()
{
  uint64_t v0;

  sub_23C06C738(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_OWORD *)(v0 + 64));
}

unint64_t sub_23C06E494()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B0F1B8;
  if (!qword_256B0F1B8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1B0);
    v2[0] = sub_23C06E518();
    v2[1] = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F1B8);
  }
  return result;
}

unint64_t sub_23C06E518()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B0F1C0;
  if (!qword_256B0F1C0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1C8);
    v2[0] = sub_23C06E584();
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F1C0);
  }
  return result;
}

unint64_t sub_23C06E584()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B0F1D0;
  if (!qword_256B0F1D0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1D8);
    v2[0] = sub_23C06E774(&qword_256B0F1E0, &qword_256B0F1E8, MEMORY[0x24BDF4498]);
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F1D0);
  }
  return result;
}

uint64_t sub_23C06E610()
{
  return swift_deallocObject();
}

_BYTE *sub_23C06E620(_BYTE *a1)
{
  uint64_t v1;

  return sub_23C0D85FC(a1, *(_BYTE *)(v1 + 16));
}

void sub_23C06E628()
{
  type metadata accessor for Option();
}

uint64_t sub_23C06E658(uint64_t a1)
{
  uint64_t v1;
  id v2;

  if (*(_BYTE *)(v1 + *(int *)(a1 + 68)) && *(_BYTE *)(v1 + *(int *)(a1 + 68)) != 1)
    return MEMORY[0x2426166B0](objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithRed_green_blue_alpha_, 0.650980392, 1.0, 0.0, 1.0));
  v2 = objc_msgSend((id)objc_opt_self(), sel_systemGray5Color);
  return MEMORY[0x2426166E0](v2);
}

uint64_t sub_23C06E6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_23C0E4630();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C06E738(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C0E4630();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23C06E774(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242616E9C](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C06E7B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23C06E7F8(uint64_t a1)
{
  sub_23C06DE1C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C06E834(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_23C06E870()
{
  type metadata accessor for Option();
}

uint64_t sub_23C06E8A0(uint64_t a1)
{
  uint64_t v1;
  id v3;

  if (*(_BYTE *)(v1 + *(int *)(a1 + 68)))
  {
    if (*(_BYTE *)(v1 + *(int *)(a1 + 68)) == 1)
      return sub_23C0E4564();
    else
      return sub_23C0E454C();
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_darkGrayColor);
    return MEMORY[0x2426166E0](v3);
  }
}

uint64_t sub_23C06E8F8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

BOOL static TimedFilterContent<>.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double (*v6)(uint64_t, uint64_t);
  double v7;

  v6 = *(double (**)(uint64_t, uint64_t))(a4 + 8);
  v7 = v6(a3, a4);
  return v7 < v6(a3, a4);
}

void FilterModalitySectionView.init(attributedTitle:clearActionTitle:containerWidth:artworkViewBuilder:headerViewBuilder:options:onOptionSelected:)()
{
  type metadata accessor for FilterModalitySectionView();
}

uint64_t sub_23C06EA08(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_23C06EA8C(v8, (uint64_t)v9 + a1[27]);
  v13 = (_QWORD *)((char *)v9 + a1[28]);
  *v13 = v7;
  v13[1] = v6;
  *(_QWORD *)((char *)v9 + a1[29]) = v10;
  *v9 = v5;
  v9[1] = v4;
  v14 = (_QWORD *)((char *)v9 + a1[30]);
  *v14 = v3;
  v14[1] = v16;
  *(_QWORD *)((char *)v9 + a1[32]) = v17;
  v15 = (_QWORD *)((char *)v9 + a1[31]);
  *v15 = v2;
  v15[1] = v1;
  return result;
}

void type metadata accessor for FilterModalitySectionView()
{
  JUMPOUT(0x242616E18);
}

uint64_t sub_23C06EA8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void FilterModalitySectionView.body.getter()
{
  type metadata accessor for Option();
}

uint64_t sub_23C06EB70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(unint64_t, _BYTE *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v44[96];

  swift_getTupleTypeMetadata2();
  v2 = sub_23C0E481C();
  v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F220);
  v4 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v2);
  v5 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v1 - 136) = v2;
  *(_QWORD *)(v1 - 128) = v5;
  *(_QWORD *)(v1 - 120) = v3;
  *(_QWORD *)(v1 - 112) = v4;
  *(_QWORD *)(v1 - 104) = MEMORY[0x24BEE0D10];
  v6 = sub_23C0E4654();
  *(_QWORD *)(v1 - 144) = sub_23C06F100();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v6, v1 - 144);
  v7 = sub_23C0E46A8();
  v8 = MEMORY[0x242616E9C](MEMORY[0x24BDF5198], v7);
  *(_QWORD *)(v1 - 136) = v7;
  *(_QWORD *)(v1 - 128) = v8;
  MEMORY[0x242616E48](255, v1 - 136, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v1 - 136) = v7;
  *(_QWORD *)(v1 - 128) = v8;
  swift_getOpaqueTypeConformance2();
  v9 = sub_23C0E3FA0();
  v10 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v9);
  *(_QWORD *)(v1 - 136) = v9;
  *(_QWORD *)(v1 - 128) = v10;
  v11 = MEMORY[0x242616E48](255, v1 - 136, MEMORY[0x24BDF29F8], 0);
  v12 = sub_23C0E42A0();
  *(_QWORD *)(v1 - 136) = v9;
  *(_QWORD *)(v1 - 128) = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 - 136) = v11;
  *(_QWORD *)(v1 - 128) = v12;
  v14 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v1 - 120) = OpaqueTypeConformance2;
  *(_QWORD *)(v1 - 112) = v14;
  v15 = MEMORY[0x242616E48](255, v1 - 136, MEMORY[0x24BDF3000], 0);
  *(_QWORD *)(v1 - 136) = v11;
  *(_QWORD *)(v1 - 128) = v12;
  *(_QWORD *)(v1 - 120) = OpaqueTypeConformance2;
  *(_QWORD *)(v1 - 112) = v14;
  v16 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v1 - 136) = v15;
  *(_QWORD *)(v1 - 128) = v16;
  MEMORY[0x242616E48](255, v1 - 136, MEMORY[0x24BDF2FE0], 0);
  swift_getTupleTypeMetadata2();
  v17 = sub_23C0E46B4();
  *(_QWORD *)(v1 - 384) = v17;
  *(_QWORD *)(v1 - 392) = MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v17);
  v18 = sub_23C0E4618();
  *(_QWORD *)(v1 - 376) = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v1 - 408) = &v44[-v19];
  v20 = sub_23C0E4024();
  *(_QWORD *)(v1 - 368) = v20;
  *(_QWORD *)(v1 - 360) = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v1 - 416) = &v44[-v21];
  v22 = sub_23C0E4660();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v25 = &v44[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = sub_23C0E466C();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v29 = &v44[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *v25 = xmmword_23C0E5560;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x24BDF4D40], v22);
  sub_23C0E4678();
  v30 = sub_23C0E4804();
  *(_QWORD *)(v30 + 16) = 5;
  v31 = v30 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  v32 = *(void (**)(unint64_t, _BYTE *, uint64_t))(v27 + 16);
  v32(v31, v29, v26);
  v33 = *(_QWORD *)(v27 + 72);
  v32(v31 + v33, v29, v26);
  v32(v31 + 2 * v33, v29, v26);
  v32(v31 + 3 * v33, v29, v26);
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v27 + 32))(v31 + 4 * v33, v29, v26);
  sub_23C0E415C();
  *(_QWORD *)(v1 - 272) = v0[2];
  *(_QWORD *)(v1 - 264) = *(_QWORD *)(v1 - 352);
  v34 = v0[5];
  *(_QWORD *)(v1 - 256) = *(_QWORD *)(v1 - 400);
  *(_QWORD *)(v1 - 248) = v34;
  v35 = v0[7];
  *(_QWORD *)(v1 - 240) = *(_QWORD *)(v1 - 344);
  *(_QWORD *)(v1 - 232) = v35;
  *(_QWORD *)(v1 - 224) = *(_QWORD *)(v1 - 312);
  *(_QWORD *)(v1 - 216) = *(_QWORD *)(v1 - 320);
  *(_QWORD *)(v1 - 208) = *(_QWORD *)(v1 - 328);
  *(_QWORD *)(v1 - 200) = *(_QWORD *)(v1 - 336);
  *(_QWORD *)(v1 - 192) = v0[12];
  *(_QWORD *)(v1 - 184) = *(_QWORD *)(v1 - 304);
  *(_QWORD *)(v1 - 176) = v30;
  v36 = *(_QWORD *)(v1 - 408);
  sub_23C0E460C();
  swift_bridgeObjectRelease();
  v37 = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v18);
  v38 = *(_QWORD *)(v1 - 416);
  sub_23C0E4534();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 376) + 8))(v36, v18);
  v39 = sub_23C0E42DC();
  v40 = MEMORY[0x24BDEDB80];
  *(_QWORD *)(v1 - 160) = v37;
  *(_QWORD *)(v1 - 152) = v40;
  v41 = *(_QWORD *)(v1 - 368);
  v42 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v41, v1 - 160);
  sub_23C06B9FC(v39, 0x4034000000000000, 0, v41, v42);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 360) + 8))(v38, v41);
}

unint64_t sub_23C06F100()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_256B0F228;
  if (!qword_256B0F228)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F220);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F230);
    v2[3] = &type metadata for FilterButtonStyle;
    v2[4] = sub_23C06F1C8();
    v2[5] = sub_23C06DDD8();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F228);
  }
  return result;
}

unint64_t sub_23C06F1C8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_256B0F238;
  if (!qword_256B0F238)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F230);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F240);
    v2[3] = sub_23C06F274();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23C06E774(&qword_256B0F168, &qword_256B0F170, MEMORY[0x24BDEF370]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F238);
  }
  return result;
}

unint64_t sub_23C06F274()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B0F248;
  if (!qword_256B0F248)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F240);
    v2[0] = sub_23C06E774(&qword_256B0F250, qword_256B0F258, MEMORY[0x24BDF43B0]);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F248);
  }
  return result;
}

uint64_t sub_23C06F2F8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = result;
    if (a2)
    {
      v4 = sub_23C0E466C();
      v5 = sub_23C0E4804();
      *(_QWORD *)(v5 + 16) = a2;
      v6 = *(_QWORD *)(v4 - 8);
      v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16);
      v8(v5 + v7, v3, v4);
      v9 = a2 - 1;
      if (a2 != 1)
      {
        v10 = *(_QWORD *)(v6 + 72);
        v11 = v5 + v10 + v7;
        do
        {
          v8(v11, v3, v4);
          v11 += v10;
          --v9;
        }
        while (v9);
      }
    }
    else
    {
      v5 = MEMORY[0x24BEE4AF8];
    }
    v12 = sub_23C0E466C();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v3, v12);
    return v5;
  }
  return result;
}

void sub_23C06F3DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[78];

  v23[15] = a7;
  v23[39] = a4;
  v23[40] = a6;
  v23[11] = a5;
  v23[7] = a3;
  v23[27] = a2;
  v23[44] = a1;
  v23[38] = a8;
  v23[45] = a13;
  v23[43] = a11;
  v23[42] = a10;
  v23[41] = a9;
  v15 = sub_23C0E41A4();
  v23[36] = *(_QWORD *)(v15 - 8);
  v23[37] = v15;
  MEMORY[0x24BDAC7A8](v15);
  v23[35] = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23C0E4288();
  MEMORY[0x24BDAC7A8](v17);
  v23[32] = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23C0E42A0();
  v23[33] = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v23[31] = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_23C0E4270();
  v23[29] = *(_QWORD *)(v21 - 8);
  v23[30] = v21;
  MEMORY[0x24BDAC7A8](v21);
  v23[10] = (char *)v23 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[65] = a4;
  v23[66] = a6;
  v23[67] = a9;
  v23[68] = a10;
  v23[69] = a11;
  v23[70] = a12;
  v23[1] = a12;
  type metadata accessor for Option();
}

void sub_23C06F558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  swift_getTupleTypeMetadata2();
  v14 = sub_23C0E481C();
  v15 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F220);
  v16 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v14);
  v17 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v13 - 184) = v14;
  *(_QWORD *)(v13 - 176) = v17;
  *(_QWORD *)(v13 - 168) = v15;
  *(_QWORD *)(v13 - 160) = v16;
  *(_QWORD *)(v13 - 152) = MEMORY[0x24BEE0D10];
  v18 = sub_23C0E4654();
  *(_QWORD *)(v13 - 96) = sub_23C06F100();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v18, v13 - 96);
  v19 = sub_23C0E46A8();
  v20 = MEMORY[0x242616E9C](MEMORY[0x24BDF5198], v19);
  *(_QWORD *)(v13 - 184) = v19;
  *(_QWORD *)(v13 - 176) = v20;
  v9[4] = MEMORY[0x242616E48](255, v13 - 184, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v13 - 184) = v19;
  *(_QWORD *)(v13 - 176) = v20;
  v9[3] = swift_getOpaqueTypeConformance2();
  v21 = sub_23C0E3FA0();
  v9[12] = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v9[2] = (char *)&a9 - v22;
  v23 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v21);
  *(_QWORD *)(v13 - 184) = v21;
  *(_QWORD *)(v13 - 176) = v23;
  v24 = MEMORY[0x242616E48](0, v13 - 184, MEMORY[0x24BDF29F8], 0);
  v9[14] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v9[9] = (char *)&a9 - v25;
  v9[16] = v21;
  *(_QWORD *)(v13 - 184) = v21;
  *(_QWORD *)(v13 - 176) = v23;
  v9[6] = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v13 - 184) = v24;
  *(_QWORD *)(v13 - 176) = v11;
  v27 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v13 - 168) = OpaqueTypeConformance2;
  *(_QWORD *)(v13 - 160) = v27;
  v28 = MEMORY[0x242616E48](0, v13 - 184, MEMORY[0x24BDF3000], 0);
  v9[23] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v9[20] = (char *)&a9 - v29;
  v9[17] = v24;
  *(_QWORD *)(v13 - 184) = v24;
  *(_QWORD *)(v13 - 176) = v11;
  v9[34] = v11;
  v9[5] = OpaqueTypeConformance2;
  *(_QWORD *)(v13 - 168) = OpaqueTypeConformance2;
  *(_QWORD *)(v13 - 160) = v27;
  v30 = swift_getOpaqueTypeConformance2();
  v9[25] = v28;
  *(_QWORD *)(v13 - 184) = v28;
  *(_QWORD *)(v13 - 176) = v30;
  v9[19] = v30;
  v31 = MEMORY[0x242616E48](0, v13 - 184, MEMORY[0x24BDF2FE0], 0);
  v9[22] = v31;
  v9[24] = *(_QWORD *)(v31 - 8);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v9[28] = (char *)&a9 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v9[18] = (char *)&a9 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v9[26] = (char *)&a9 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  MEMORY[0x24BDAC7A8](v38);
  v39 = v9[39];
  *(_QWORD *)(v13 - 184) = v9[7];
  *(_QWORD *)(v13 - 176) = v39;
  *(_QWORD *)(v13 - 168) = v12;
  v40 = v9[40];
  *(_QWORD *)(v13 - 160) = v9[11];
  *(_QWORD *)(v13 - 152) = v40;
  v41 = v9[41];
  *(_QWORD *)(v13 - 144) = v9[15];
  *(_QWORD *)(v13 - 136) = v41;
  v42 = v9[43];
  *(_QWORD *)(v13 - 128) = v9[42];
  *(_QWORD *)(v13 - 120) = v42;
  *(_QWORD *)(v13 - 112) = v10;
  *(_QWORD *)(v13 - 104) = v9[45];
  type metadata accessor for FilterModalitySectionView();
}

uint64_t sub_23C06F8DC(int *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v1[44] + a1[30]))(v1[44] + a1[27], *(_QWORD *)(v1[44] + a1[28]), *(_QWORD *)(v1[44] + a1[28] + 8));
  v1[21] = v7;
  v11 = v7;
  v12 = v1[2];
  sub_23C06E920(v6, v3, v11);
  v1[13] = v5;
  v13 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v1[8] = v13;
  v13(v6, v3);
  sub_23C0E42B8();
  v14 = v1[39];
  v1[48] = v9;
  v1[49] = v14;
  v1[39] = v3;
  v1[50] = v3;
  v1[51] = v8;
  v1[52] = v1[40];
  v1[53] = v2;
  v15 = v1[42];
  v1[54] = v1[41];
  v1[55] = v15;
  v16 = v1[1];
  v1[56] = v1[43];
  v1[57] = v16;
  v17 = v1[27];
  v1[58] = v4;
  v1[59] = v17;
  v1[60] = v1[44];
  sub_23C0D4060();
  v18 = v1[10];
  sub_23C0E4258();
  v19 = sub_23C0E42D0();
  v20 = sub_23C0E42B8();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v19)
    sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v20)
    sub_23C0E42C4();
  v21 = v1[35];
  v22 = v1[20];
  v23 = v1[9];
  v24 = v1[16];
  sub_23C0E4474();
  (*(void (**)(uint64_t, _QWORD))(v1[29] + 8))(v18, v1[30]);
  (*(void (**)(uint64_t, uint64_t))(v1[12] + 8))(v12, v24);
  sub_23C0E427C();
  v25 = v1[31];
  sub_23C0E4294();
  v26 = v1[17];
  v27 = v1[34];
  sub_23C0E4498();
  (*(void (**)(uint64_t, uint64_t))(v1[33] + 8))(v25, v27);
  (*(void (**)(uint64_t, uint64_t))(v1[14] + 8))(v23, v26);
  sub_23C0E4198();
  LOBYTE(v27) = sub_23C0E42B8();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v27)
    sub_23C0E42C4();
  v29 = v1[18];
  v28 = v1[19];
  v30 = v1[25];
  sub_23C0E448C();
  (*(void (**)(uint64_t, _QWORD))(v1[36] + 8))(v21, v1[37]);
  (*(void (**)(uint64_t, uint64_t))(v1[23] + 8))(v22, v30);
  *(_QWORD *)(v10 - 184) = v30;
  *(_QWORD *)(v10 - 176) = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v32 = v1[26];
  v33 = v1[22];
  sub_23C06E920(v29, v33, v32);
  v34 = v1[24];
  v35 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
  v35(v29, v33);
  v36 = v1[21];
  v37 = v1[39];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1[13] + 16))(v6, v36, v37);
  *(_QWORD *)(v10 - 184) = v6;
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
  v39 = v1[28];
  v38(v39, v32, v33);
  *(_QWORD *)(v10 - 176) = v39;
  *(_QWORD *)(v10 - 200) = v37;
  *(_QWORD *)(v10 - 192) = v33;
  *(_QWORD *)(v10 - 216) = v1[45];
  *(_QWORD *)(v10 - 208) = OpaqueTypeConformance2;
  sub_23C0DE900((uint64_t *)(v10 - 184), 2uLL, v10 - 200);
  v35(v32, v33);
  v40 = (uint64_t (*)(uint64_t, uint64_t))v1[8];
  v40(v36, v37);
  v35(v39, v33);
  return v40(v6, v37);
}

void sub_23C06FC54(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23C06F3DC(v1[13], v1[14], v1[2], v1[3], v1[5], v1[6], v1[7], a1, v1[8], v1[9], v1[10], v1[11], v1[12]);
}

void sub_23C06FC90(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[37];

  v17[14] = a7;
  v17[3] = a6;
  v17[12] = a5;
  v17[10] = a4;
  v17[9] = a2;
  v17[13] = a1;
  v17[15] = a8;
  v17[11] = a13;
  v17[7] = a12;
  v17[6] = a11;
  v17[5] = a10;
  v17[4] = a9;
  v15 = sub_23C0E41E0();
  MEMORY[0x24BDAC7A8](v15);
  v17[8] = (char *)v17 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[31] = a3;
  v17[32] = a6;
  v17[33] = a9;
  v17[34] = a10;
  v17[35] = a11;
  v17[36] = a12;
  type metadata accessor for Option();
}

uint64_t sub_23C06FD84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_BYTE *, uint64_t);
  _BYTE v24[80];

  swift_getTupleTypeMetadata2();
  v2 = sub_23C0E481C();
  v3 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F220);
  v4 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v2);
  v5 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v1 - 136) = v2;
  *(_QWORD *)(v1 - 128) = v5;
  *(_QWORD *)(v1 - 120) = v3;
  *(_QWORD *)(v1 - 112) = v4;
  *(_QWORD *)(v1 - 104) = MEMORY[0x24BEE0D10];
  v6 = sub_23C0E4654();
  *(_QWORD *)(v1 - 144) = sub_23C06F100();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v6, v1 - 144);
  v7 = sub_23C0E46A8();
  *(_QWORD *)(v1 - 368) = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = &v24[-v8];
  v10 = MEMORY[0x242616E9C](MEMORY[0x24BDF5198], v7);
  *(_QWORD *)(v1 - 136) = v7;
  *(_QWORD *)(v1 - 128) = v10;
  v11 = MEMORY[0x242616E48](0, v1 - 136, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v1 - 376) = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v16 = &v24[-v15];
  swift_bridgeObjectRetain();
  *(_QWORD *)(v1 - 384) = sub_23C0E4114();
  *(_QWORD *)(v1 - 240) = *(_QWORD *)(v1 - 312);
  *(_QWORD *)(v1 - 232) = v0;
  v17 = *(_QWORD *)(v1 - 288);
  *(_QWORD *)(v1 - 224) = *(_QWORD *)(v1 - 304);
  *(_QWORD *)(v1 - 216) = v17;
  v18 = *(_QWORD *)(v1 - 272);
  *(_QWORD *)(v1 - 208) = *(_QWORD *)(v1 - 360);
  *(_QWORD *)(v1 - 200) = v18;
  v19 = *(_QWORD *)(v1 - 344);
  *(_QWORD *)(v1 - 192) = *(_QWORD *)(v1 - 352);
  *(_QWORD *)(v1 - 184) = v19;
  v20 = *(_QWORD *)(v1 - 328);
  *(_QWORD *)(v1 - 176) = *(_QWORD *)(v1 - 336);
  *(_QWORD *)(v1 - 168) = v20;
  v21 = *(_QWORD *)(v1 - 280);
  *(_QWORD *)(v1 - 160) = *(_QWORD *)(v1 - 296);
  *(_QWORD *)(v1 - 152) = v21;
  sub_23C06B998();
  sub_23C0E469C();
  sub_23C0E4480();
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v1 - 368) + 8))(v9, v7);
  *(_QWORD *)(v1 - 136) = v7;
  *(_QWORD *)(v1 - 128) = v10;
  swift_getOpaqueTypeConformance2();
  sub_23C06E920((uint64_t)v14, v11, (uint64_t)v16);
  v22 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v1 - 376) + 8);
  v22(v14, v11);
  sub_23C06B980((uint64_t)v16, v11, *(_QWORD *)(v1 - 264));
  return ((uint64_t (*)(_BYTE *, uint64_t))v22)(v16, v11);
}

void sub_23C070074()
{
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C07012C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 336) = v16;
  *(_QWORD *)(v15 - 344) = a1;
  *(_QWORD *)(v15 - 416) = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 296) = (char *)&a9 - v17;
  *(_QWORD *)(v15 - 176) = v13;
  *(_QWORD *)(v15 - 168) = v14;
  *(_QWORD *)(v15 - 352) = v13;
  *(_QWORD *)(v15 - 480) = v14;
  *(_QWORD *)(v15 - 160) = v10;
  *(_QWORD *)(v15 - 152) = v9;
  *(_QWORD *)(v15 - 144) = v12;
  *(_QWORD *)(v15 - 136) = v11;
  type metadata accessor for Option();
}

uint64_t sub_23C0701A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  unint64_t v39;
  _BYTE v40[80];

  swift_getTupleTypeMetadata2();
  v6 = sub_23C0E481C();
  *(_QWORD *)(v5 - 376) = v6;
  v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F220);
  *(_QWORD *)(v5 - 392) = v7;
  v8 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v6);
  *(_QWORD *)(v5 - 400) = v8;
  v9 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v5 - 176) = v6;
  *(_QWORD *)(v5 - 168) = v9;
  *(_QWORD *)(v5 - 160) = v7;
  *(_QWORD *)(v5 - 152) = v8;
  *(_QWORD *)(v5 - 144) = MEMORY[0x24BEE0D10];
  v10 = sub_23C0E4654();
  *(_QWORD *)(v5 - 384) = v10;
  *(_QWORD *)(v5 - 368) = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  *(_QWORD *)(v5 - 440) = &v40[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v5 - 408) = &v40[-v13];
  *(_QWORD *)(v5 - 184) = *(_QWORD *)(v3 + *(int *)(v1 + 128));
  v14 = sub_23C0E481C();
  MEMORY[0x242616E9C](MEMORY[0x24BEE12C8], v14);
  sub_23C0E47E0();
  *(_QWORD *)(v5 - 184) = *(_QWORD *)(v5 - 176);
  v15 = sub_23C0E4918();
  MEMORY[0x242616E9C](MEMORY[0x24BEE2FC0], v15);
  *(_QWORD *)(v5 - 176) = sub_23C0E4828();
  v16 = *(_QWORD *)(v5 - 328);
  *(_QWORD *)(v5 - 288) = v16;
  *(_QWORD *)(v5 - 280) = v2;
  v17 = *(_QWORD *)(v5 - 432);
  *(_QWORD *)(v5 - 272) = v17;
  v18 = *(_QWORD *)(v5 - 320);
  *(_QWORD *)(v5 - 264) = v18;
  v19 = *(_QWORD *)(v5 - 312);
  *(_QWORD *)(v5 - 256) = v4;
  *(_QWORD *)(v5 - 248) = v19;
  v20 = *(_QWORD *)(v5 - 448);
  v21 = *(_QWORD *)(v5 - 304);
  *(_QWORD *)(v5 - 240) = v20;
  *(_QWORD *)(v5 - 232) = v21;
  v22 = *(_QWORD *)(v5 - 456);
  *(_QWORD *)(v5 - 224) = v22;
  *(_QWORD *)(v5 - 216) = v0;
  v23 = *(_QWORD *)(v5 - 424);
  *(_QWORD *)(v5 - 208) = v23;
  *(_QWORD *)(v5 - 464) = swift_getKeyPath();
  v24 = *(_QWORD *)(v5 - 336);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v24 + 16))(*(_QWORD *)(v5 - 296), *(_QWORD *)(v5 - 472), *(_QWORD *)(v5 - 344));
  v25 = (*(unsigned __int8 *)(v24 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v26 = (char *)swift_allocObject();
  v27 = *(_QWORD *)(v5 - 352);
  *((_QWORD *)v26 + 2) = v16;
  *((_QWORD *)v26 + 3) = v27;
  *((_QWORD *)v26 + 4) = v17;
  *((_QWORD *)v26 + 5) = v18;
  v28 = *(_QWORD *)(v5 - 480);
  *((_QWORD *)v26 + 6) = v28;
  *((_QWORD *)v26 + 7) = v19;
  v29 = *(_QWORD *)(v5 - 304);
  *((_QWORD *)v26 + 8) = v20;
  *((_QWORD *)v26 + 9) = v29;
  *((_QWORD *)v26 + 10) = v22;
  *((_QWORD *)v26 + 11) = v0;
  *((_QWORD *)v26 + 12) = v23;
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v5 - 336) + 32))(&v26[v25], *(_QWORD *)(v5 - 296), *(_QWORD *)(v5 - 344));
  v30 = (_QWORD *)swift_allocObject();
  v31 = *(_QWORD *)(v5 - 352);
  v30[2] = *(_QWORD *)(v5 - 328);
  v30[3] = v31;
  v32 = *(_QWORD *)(v5 - 320);
  v30[4] = v17;
  v30[5] = v32;
  v33 = *(_QWORD *)(v5 - 312);
  v30[6] = v28;
  v30[7] = v33;
  v30[8] = v20;
  v30[9] = v29;
  v30[10] = v22;
  v30[11] = v0;
  v30[12] = v23;
  v30[13] = sub_23C072570;
  v30[14] = v26;
  v39 = sub_23C06F100();
  v34 = *(_QWORD *)(v5 - 440);
  sub_23C0E463C();
  *(_QWORD *)(v5 - 192) = v39;
  v35 = *(_QWORD *)(v5 - 384);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v35, v5 - 192);
  v36 = *(_QWORD *)(v5 - 408);
  sub_23C06E920(v34, v35, v36);
  v37 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 368) + 8);
  v37(v34, v35);
  sub_23C06B980(v36, v35, *(_QWORD *)(v5 - 360));
  return ((uint64_t (*)(uint64_t, uint64_t))v37)(v36, v35);
}

void sub_23C0705A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[25];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v30 = a6;
  v31 = a4;
  v28 = a3;
  v29 = a2;
  v19[16] = a1;
  v21 = a8;
  v26 = a14;
  v16 = sub_23C0E4630();
  MEMORY[0x24BDAC7A8](v16);
  v19[23] = (char *)v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F198);
  MEMORY[0x24BDAC7A8](v20);
  v19[24] = (char *)v19 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a5;
  v33 = a7;
  v22 = a5;
  v23 = a7;
  v34 = a10;
  v35 = a11;
  v25 = a10;
  v24 = a11;
  v19[8] = a12;
  v36 = a12;
  v37 = a13;
  v27 = a13;
  type metadata accessor for Option();
}

void sub_23C0706E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v18 - 312) = a1;
  *(_QWORD *)(v18 - 408) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v18 - 368) = (char *)&a9 - v19;
  *(_QWORD *)(v18 - 184) = *(_QWORD *)(v18 - 320);
  *(_QWORD *)(v18 - 176) = v17;
  v20 = *(_QWORD *)(v18 - 328);
  *(_QWORD *)(v18 - 168) = v14;
  *(_QWORD *)(v18 - 160) = v20;
  *(_QWORD *)(v18 - 152) = v16;
  *(_QWORD *)(v18 - 144) = v10;
  *(_QWORD *)(v18 - 136) = v15;
  *(_QWORD *)(v18 - 128) = v13;
  *(_QWORD *)(v18 - 120) = v9;
  *(_QWORD *)(v18 - 112) = v12;
  *(_QWORD *)(v18 - 104) = v11;
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C070760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v14 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v12 - 592) = a1;
  v15 = *(_QWORD *)(v14 + 64);
  v16 = v14;
  MEMORY[0x24BDAC7A8](a1);
  v18 = (char *)&a9 - v17;
  *(_QWORD *)(v12 - 584) = (char *)&a9 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(qword_256B0F258);
  *(_QWORD *)(v12 - 512) = v19;
  *(_QWORD *)(v12 - 528) = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v12 - 552) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F240);
  *(_QWORD *)(v12 - 536) = v21;
  MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v12 - 544) = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F2E0);
  *(_QWORD *)(v12 - 464) = v23;
  *(_QWORD *)(v12 - 472) = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)(v12 - 520) = (char *)&a9 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F230);
  *(_QWORD *)(v12 - 488) = v25;
  MEMORY[0x24BDAC7A8](v25);
  *(_QWORD *)(v12 - 504) = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F2E8);
  *(_QWORD *)(v12 - 448) = v27;
  *(_QWORD *)(v12 - 456) = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  *(_QWORD *)(v12 - 480) = (char *)&a9 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v12 - 608) = v16;
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 16))(v18, *(_QWORD *)(v12 - 344), a1);
  v29 = *(_QWORD *)(v12 - 408);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v29 + 16))(*(_QWORD *)(v12 - 368), *(_QWORD *)(v12 - 336), *(_QWORD *)(v12 - 312));
  v30 = (*(unsigned __int8 *)(v16 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  *(_QWORD *)(v12 - 624) = v30;
  v31 = (v15 + *(unsigned __int8 *)(v29 + 80) + v30) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  *(_QWORD *)(v12 - 616) = v31;
  *(_QWORD *)(v12 - 600) = (v10 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v32 = (char *)swift_allocObject();
  v33 = *(_QWORD *)(v12 - 320);
  v34 = *(_QWORD *)(v12 - 400);
  *((_QWORD *)v32 + 2) = v33;
  *((_QWORD *)v32 + 3) = v34;
  v35 = v11;
  *(_QWORD *)(v12 - 568) = v11;
  *((_QWORD *)v32 + 4) = v11;
  v36 = *(_QWORD *)(v12 - 328);
  v37 = *(_QWORD *)(v12 - 392);
  *((_QWORD *)v32 + 5) = v36;
  *((_QWORD *)v32 + 6) = v37;
  v38 = v9;
  *(_QWORD *)(v12 - 576) = v9;
  v39 = *(_QWORD *)(v12 - 376);
  *((_QWORD *)v32 + 7) = v9;
  *((_QWORD *)v32 + 8) = v39;
  v40 = *(_QWORD *)(v12 - 384);
  v41 = *(_QWORD *)(v12 - 560);
  *((_QWORD *)v32 + 9) = v40;
  *((_QWORD *)v32 + 10) = v41;
  v42 = *(_QWORD *)(v12 - 360);
  *((_QWORD *)v32 + 11) = *(_QWORD *)(v12 - 352);
  *((_QWORD *)v32 + 12) = v42;
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v12 - 608) + 32))(&v32[*(_QWORD *)(v12 - 624)], *(_QWORD *)(v12 - 584), *(_QWORD *)(v12 - 592));
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v12 - 408) + 32))(&v32[*(_QWORD *)(v12 - 616)], *(_QWORD *)(v12 - 368), *(_QWORD *)(v12 - 312));
  *(_QWORD *)&v32[*(_QWORD *)(v12 - 600)] = *(_QWORD *)(v12 - 496);
  *(_QWORD *)(v12 - 288) = v33;
  *(_QWORD *)(v12 - 280) = v34;
  *(_QWORD *)(v12 - 272) = v35;
  *(_QWORD *)(v12 - 264) = v36;
  *(_QWORD *)(v12 - 256) = v37;
  *(_QWORD *)(v12 - 248) = v38;
  *(_QWORD *)(v12 - 240) = v39;
  *(_QWORD *)(v12 - 232) = v40;
  v43 = *(_QWORD *)(v12 - 352);
  *(_QWORD *)(v12 - 224) = v41;
  *(_QWORD *)(v12 - 216) = v43;
  v44 = *(_QWORD *)(v12 - 336);
  *(_QWORD *)(v12 - 208) = *(_QWORD *)(v12 - 360);
  *(_QWORD *)(v12 - 200) = v44;
  *(_QWORD *)(v12 - 192) = *(_QWORD *)(v12 - 344);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F2F0);
  sub_23C072A1C();
  v45 = *(_QWORD *)(v12 - 552);
  sub_23C0E45D0();
  sub_23C0E4684();
  sub_23C0E3FD0();
  v46 = *(_QWORD *)(v12 - 528);
  v47 = *(_QWORD *)(v12 - 544);
  v48 = *(_QWORD *)(v12 - 512);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v47, v45, v48);
  v49 = (_OWORD *)(v47 + *(int *)(*(_QWORD *)(v12 - 536) + 36));
  v50 = *(_OWORD *)(v12 - 168);
  v51 = *(_OWORD *)(v12 - 152);
  *v49 = *(_OWORD *)(v12 - 184);
  v49[1] = v50;
  v49[2] = v51;
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v48);
  sub_23C0E42B8();
  sub_23C0E4690();
  sub_23C06F274();
  sub_23C0E44B0();
  sub_23C06E834(v47, &qword_256B0F240);
  v52 = *MEMORY[0x24BDEEB68];
  v53 = sub_23C0E4120();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 104))(*(_QWORD *)(v12 - 440), v52, v53);
  sub_23C072AB8();
}

uint64_t sub_23C070CBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v6 = *(_QWORD *)(v4 - 432);
  sub_23C06E6F4(v1, v6);
  *(_QWORD *)(v6 + *(int *)(*(_QWORD *)(v4 - 424) + 36)) = a1;
  sub_23C06E738(v1);
  v7 = sub_23C0E4684();
  v9 = v8;
  v10 = *(_QWORD *)(v4 - 504);
  v11 = v10 + *(int *)(*(_QWORD *)(v4 - 488) + 36);
  sub_23C068360(v6, v11, &qword_256B0F198);
  v12 = (uint64_t *)(v11 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F170) + 36));
  *v12 = v7;
  v12[1] = v9;
  v13 = *(_QWORD *)(v4 - 472);
  v14 = *(_QWORD *)(v4 - 464);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v10, v3, v14);
  sub_23C06E834(v6, &qword_256B0F198);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v3, v14);
  sub_23C06F1C8();
  sub_23C06DDD8();
  v15 = *(_QWORD *)(v4 - 480);
  sub_23C0E4420();
  sub_23C06E834(v10, &qword_256B0F230);
  LOBYTE(v11) = *(_BYTE *)(v2 + *(int *)(*(_QWORD *)(v4 - 312) + 68)) == 0;
  KeyPath = swift_getKeyPath();
  v17 = swift_allocObject();
  *(_BYTE *)(v17 + 16) = v11;
  v18 = *(_QWORD *)(v4 - 456);
  v19 = *(_QWORD *)(v4 - 416);
  v20 = *(_QWORD *)(v4 - 448);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v19, v15, v20);
  v21 = (uint64_t *)(v19 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F220) + 36));
  *v21 = KeyPath;
  v21[1] = (uint64_t)sub_23C06E620;
  v21[2] = v17;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v15, v20);
}

void sub_23C070E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v21;
  uint64_t v22;

  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F1F8);
  MEMORY[0x24BDAC7A8](v21);
  v16 = sub_23C0E4630();
  MEMORY[0x24BDAC7A8](v16);
  sub_23C0E4114();
  sub_23C0710E8(a1, a3, a4, a5, a6, a7, a8, (uint64_t)&v22, a9, a10, a11, a12, a13);
}

uint64_t sub_23C070F94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v5 = *(_OWORD *)(v0 + 288);
  *(_OWORD *)(v4 + 199) = *(_OWORD *)(v0 + 272);
  *(_OWORD *)(v4 + 215) = v5;
  v6 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v4 + 231) = *(_OWORD *)(v0 + 304);
  *(_OWORD *)(v4 + 247) = v6;
  v7 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v4 + 135) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v4 + 151) = v7;
  v8 = *(_OWORD *)(v0 + 256);
  *(_OWORD *)(v4 + 167) = *(_OWORD *)(v0 + 240);
  *(_OWORD *)(v4 + 183) = v8;
  v9 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v4 + 71) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v4 + 87) = v9;
  v10 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v4 + 103) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v4 + 119) = v10;
  v11 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v4 + 7) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v4 + 23) = v11;
  v12 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v4 + 39) = *(_OWORD *)(v0 + 112);
  *(_BYTE *)(v0 + 600) = 0;
  *(_OWORD *)(v4 + 55) = v12;
  *(_QWORD *)(v0 + 608) = v3;
  *(_QWORD *)(v0 + 616) = 0x4018000000000000;
  *(_BYTE *)(v0 + 624) = 0;
  memcpy((void *)(v0 + 625), (const void *)(v0 + 336), 0x107uLL);
  v13 = *MEMORY[0x24BDEEB68];
  v14 = sub_23C0E4120();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v2, v13, v14);
  sub_23C06E6F4(v2, v1);
  *(_BYTE *)(v1 + *(int *)(*(_QWORD *)(v0 + 64) + 36)) = 0;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F2F0);
  v16 = *(void **)(v0 + 72);
  sub_23C068360(v1, (uint64_t)v16 + *(int *)(v15 + 36), &qword_256B0F1F8);
  memcpy(v16, (const void *)(v0 + 608), 0x118uLL);
  sub_23C072BA4(v0 + 608);
  sub_23C06E834(v1, &qword_256B0F1F8);
  sub_23C06E738(v2);
  return sub_23C072C60(v0 + 80);
}

void sub_23C0710E8(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  _QWORD v34[25];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34[14] = a8;
  v34[15] = a6;
  v34[21] = a2;
  v34[19] = a13;
  v34[18] = a12;
  v34[17] = a11;
  v34[16] = a10;
  v34[20] = a9;
  v18 = sub_23C0E4588();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a7 + 16))(a3, a7);
  v34[3] = a4;
  v34[4] = a5;
  if (v22)
  {
    sub_23C0E4594();
    (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x24BDF3FD0], v18);
    v35 = sub_23C0E45AC();
    swift_release();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    sub_23C072D18();
  }
  v35 = 0;
  memset(&v34[22], 0, 24);
  memset(&v34[5], 0, 72);
  v34[1] = a3;
  v34[2] = a1;
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a3, a7);
  v37 = v23;
  sub_23C06DB6C();
  v24 = sub_23C0E43CC();
  v26 = v25;
  v28 = v27 & 1;
  sub_23C0E4378();
  v29 = sub_23C0E43B4();
  v31 = v30;
  v34[0] = a7;
  v33 = v32;
  swift_release();
  sub_23C06DBB0(v24, v26, v28);
  swift_bridgeObjectRelease();
  sub_23C0E43A8();
  sub_23C06DBB0(v29, v31, v33 & 1);
  swift_bridgeObjectRelease();
  sub_23C072D18();
}

uint64_t sub_23C0713F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)(v1 + 536) = a1;
  v5 = sub_23C0E4390();
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  sub_23C06DBB0(v2, v3, v4);
  swift_release();
  swift_bridgeObjectRelease();
  v12 = sub_23C0E4690();
  sub_23C0C4554(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v1 + 536, 0.0, 1, INFINITY, 0, v12, v13, v5, v7, v11, v9);
  sub_23C06DBB0(v5, v7, v11);
  swift_bridgeObjectRelease();
  v14 = *(_OWORD *)(v1 + 632);
  v15 = *(_OWORD *)(v1 + 648);
  *(_OWORD *)(v1 + 304) = v14;
  *(_OWORD *)(v1 + 320) = v15;
  v16 = *(_OWORD *)(v1 + 664);
  *(_OWORD *)(v1 + 336) = v16;
  v17 = *(_OWORD *)(v1 + 568);
  v18 = *(_OWORD *)(v1 + 584);
  *(_OWORD *)(v1 + 240) = v17;
  *(_OWORD *)(v1 + 256) = v18;
  v20 = *(_OWORD *)(v1 + 600);
  v19 = *(_OWORD *)(v1 + 616);
  *(_OWORD *)(v1 + 272) = v20;
  *(_OWORD *)(v1 + 288) = v19;
  v22 = *(_OWORD *)(v1 + 536);
  v21 = *(_OWORD *)(v1 + 552);
  *(_OWORD *)(v1 + 208) = v22;
  *(_OWORD *)(v1 + 224) = v21;
  *(_OWORD *)(v1 + 480) = v14;
  *(_OWORD *)(v1 + 496) = v15;
  *(_OWORD *)(v1 + 512) = v16;
  *(_OWORD *)(v1 + 416) = v17;
  *(_OWORD *)(v1 + 432) = v18;
  *(_OWORD *)(v1 + 448) = v20;
  *(_OWORD *)(v1 + 464) = v19;
  *(_OWORD *)(v1 + 384) = v22;
  *(_OWORD *)(v1 + 400) = v21;
  v23 = *(_OWORD *)(v1 + 224);
  *(_OWORD *)(v1 + 543) = *(_OWORD *)(v1 + 208);
  v24 = *(_OWORD *)(v1 + 256);
  *(_OWORD *)(v1 + 607) = *(_OWORD *)(v1 + 272);
  v25 = *(_OWORD *)(v1 + 272);
  *(_OWORD *)(v1 + 591) = *(_OWORD *)(v1 + 256);
  v26 = *(_OWORD *)(v1 + 240);
  *(_OWORD *)(v1 + 575) = v26;
  v27 = *(_OWORD *)(v1 + 208);
  *(_OWORD *)(v1 + 559) = *(_OWORD *)(v1 + 224);
  v28 = *(_OWORD *)(v1 + 320);
  *(_OWORD *)(v1 + 671) = *(_OWORD *)(v1 + 336);
  v29 = *(_OWORD *)(v1 + 336);
  *(_OWORD *)(v1 + 655) = *(_OWORD *)(v1 + 320);
  v30 = *(_OWORD *)(v1 + 288);
  *(_OWORD *)(v1 + 639) = *(_OWORD *)(v1 + 304);
  v31 = *(_OWORD *)(v1 + 304);
  *(_OWORD *)(v1 + 623) = *(_OWORD *)(v1 + 288);
  v32 = *(_OWORD *)(v1 + 648);
  v33 = *(_QWORD *)(v1 + 112);
  *(_OWORD *)(v33 + 201) = *(_OWORD *)(v1 + 632);
  *(_OWORD *)(v33 + 217) = v32;
  *(_OWORD *)(v33 + 233) = *(_OWORD *)(v1 + 664);
  v34 = *(_OWORD *)(v1 + 584);
  *(_OWORD *)(v33 + 137) = *(_OWORD *)(v1 + 568);
  *(_OWORD *)(v33 + 153) = v34;
  v35 = *(_OWORD *)(v1 + 616);
  *(_OWORD *)(v33 + 169) = *(_OWORD *)(v1 + 600);
  *(_OWORD *)(v33 + 185) = v35;
  v36 = *(_OWORD *)(v1 + 552);
  *(_OWORD *)(v33 + 105) = *(_OWORD *)(v1 + 536);
  *(_OWORD *)(v33 + 121) = v36;
  v37 = *(_QWORD *)(v1 + 200);
  *(_QWORD *)v33 = v37;
  v38 = v37;
  *(_QWORD *)(v1 + 200) = v37;
  v39 = *(_QWORD *)(v1 + 192);
  *(_QWORD *)(v33 + 8) = v39;
  *(_QWORD *)(v1 + 192) = v39;
  v40 = *(_QWORD *)(v1 + 184);
  *(_QWORD *)(v33 + 16) = v40;
  *(_QWORD *)(v1 + 184) = v40;
  v41 = *(_QWORD *)(v1 + 176);
  *(_QWORD *)(v1 + 176) = v41;
  v43 = *(_QWORD *)(v1 + 96);
  v42 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v33 + 24) = v41;
  *(_QWORD *)(v33 + 32) = v42;
  v45 = *(_QWORD *)(v1 + 80);
  v44 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v33 + 40) = v43;
  *(_QWORD *)(v33 + 48) = v44;
  v47 = *(_QWORD *)(v1 + 48);
  v46 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v33 + 56) = v45;
  *(_QWORD *)(v33 + 64) = v47;
  v48 = *(_QWORD *)(v1 + 64);
  *(_QWORD *)(v33 + 72) = *(_QWORD *)(v1 + 72);
  *(_QWORD *)(v33 + 80) = v48;
  v49 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v33 + 88) = v46;
  *(_QWORD *)(v33 + 96) = v49;
  *(_BYTE *)(v33 + 104) = 0;
  *(_QWORD *)(v33 + 248) = *(_QWORD *)(v1 + 679);
  *(_OWORD *)(v1 + 784) = v31;
  *(_OWORD *)(v1 + 800) = v28;
  *(_OWORD *)(v1 + 816) = v29;
  *(_OWORD *)(v1 + 720) = v26;
  *(_OWORD *)(v1 + 736) = v24;
  *(_OWORD *)(v1 + 752) = v25;
  *(_OWORD *)(v1 + 768) = v30;
  *(_OWORD *)(v1 + 688) = v27;
  *(_OWORD *)(v1 + 704) = v23;
  sub_23C072C34(v38);
  sub_23C072DA8(v1 + 384);
  sub_23C072DE4(v1 + 688);
  return sub_23C072CEC(*(_QWORD *)(v1 + 200));
}

uint64_t sub_23C0716A8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23C0716F8()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23C071700()
{
  unint64_t v0;

  sub_23C06D600();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

_QWORD *sub_23C0717A0(_QWORD *a1, uint64_t *a2, int *a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v4 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (_QWORD *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    *a1 = v5;
    a1[1] = v8;
    v9 = a3[27];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23C0E3EB0();
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    if (v14(v11, 1, v12))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = a3[28];
    v17 = a3[29];
    v18 = (_QWORD *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    *(_QWORD *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    v21 = a3[30];
    v22 = a3[31];
    v23 = (_QWORD *)((char *)a1 + v21);
    v24 = (uint64_t *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (_QWORD *)((char *)a1 + v22);
    v27 = (uint64_t *)((char *)a2 + v22);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    *(_QWORD *)((char *)a1 + a3[32]) = *(uint64_t *)((char *)a2 + a3[32]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23C071910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release();
  v4 = a1 + *(int *)(a2 + 108);
  v5 = sub_23C0E3EB0();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *sub_23C0719C0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[27];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23C0E3EB0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = a3[28];
  v15 = a3[29];
  v16 = (_QWORD *)((char *)a1 + v14);
  v17 = (_QWORD *)((char *)a2 + v14);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  v19 = a3[30];
  v20 = a3[31];
  v21 = (_QWORD *)((char *)a1 + v19);
  v22 = (_QWORD *)((char *)a2 + v19);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = (_QWORD *)((char *)a1 + v20);
  v25 = (_QWORD *)((char *)a2 + v20);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  *(_QWORD *)((char *)a1 + a3[32]) = *(_QWORD *)((char *)a2 + a3[32]);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_23C071B04(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  v7 = a3[27];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23C0E3EB0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = a3[28];
  v17 = (_QWORD *)((char *)a1 + v16);
  v18 = (_QWORD *)((char *)a2 + v16);
  *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)((char *)a1 + a3[29]) = *(_QWORD *)((char *)a2 + a3[29]);
  v19 = a3[30];
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (_QWORD *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_retain();
  swift_release();
  v23 = a3[31];
  v24 = (_QWORD *)((char *)a1 + v23);
  v25 = (_QWORD *)((char *)a2 + v23);
  v26 = v25[1];
  *v24 = *v25;
  v24[1] = v26;
  swift_retain();
  swift_release();
  *(_QWORD *)((char *)a1 + a3[32]) = *(_QWORD *)((char *)a2 + a3[32]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_23C071CC8(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a3[27];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23C0E3EB0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[29];
  *(_OWORD *)((char *)a1 + a3[28]) = *(_OWORD *)((char *)a2 + a3[28]);
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  v13 = a3[31];
  *(_OWORD *)((char *)a1 + a3[30]) = *(_OWORD *)((char *)a2 + a3[30]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + a3[32]) = *(_QWORD *)((char *)a2 + a3[32]);
  return a1;
}

_OWORD *sub_23C071DC8(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  swift_release();
  v6 = a3[27];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23C0E3EB0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = a3[28];
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  v20 = a3[30];
  *(_QWORD *)((char *)a1 + a3[29]) = *(_QWORD *)((char *)a2 + a3[29]);
  *(_OWORD *)((char *)a1 + v20) = *(_OWORD *)((char *)a2 + v20);
  swift_release();
  *(_OWORD *)((char *)a1 + a3[31]) = *(_OWORD *)((char *)a2 + a3[31]);
  swift_release();
  *(_QWORD *)((char *)a1 + a3[32]) = *(_QWORD *)((char *)a2 + a3[32]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C071F50()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C071F5C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 108)], a2, v8);
  }
}

uint64_t sub_23C071FDC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23C071FE8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 108)], a2, a2, v7);
  }
  return result;
}

void sub_23C072060()
{
  type metadata accessor for Option();
}

uint64_t sub_23C07209C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t OpaqueTypeConformance2;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  _QWORD v21[2];
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  swift_getTupleTypeMetadata2();
  v0 = sub_23C0E481C();
  v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F220);
  v2 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v0);
  v23 = v0;
  v24 = MEMORY[0x24BEE0D00];
  v25 = v1;
  v26 = v2;
  v27 = MEMORY[0x24BEE0D10];
  v3 = sub_23C0E4654();
  v22 = sub_23C06F100();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v3, &v22);
  v4 = sub_23C0E46A8();
  v5 = MEMORY[0x242616E9C](MEMORY[0x24BDF5198], v4);
  v23 = v4;
  v24 = v5;
  MEMORY[0x242616E48](255, &v23, MEMORY[0x24BDF2D58], 0);
  v23 = v4;
  v24 = v5;
  swift_getOpaqueTypeConformance2();
  v6 = sub_23C0E3FA0();
  v7 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v6);
  v23 = v6;
  v24 = v7;
  v8 = MEMORY[0x242616E48](255, &v23, MEMORY[0x24BDF29F8], 0);
  v9 = sub_23C0E42A0();
  v23 = v6;
  v24 = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v23 = v8;
  v24 = v9;
  v11 = MEMORY[0x24BDF10F0];
  v25 = OpaqueTypeConformance2;
  v26 = MEMORY[0x24BDF10F0];
  v12 = MEMORY[0x242616E48](255, &v23, MEMORY[0x24BDF3000], 0);
  v23 = v8;
  v24 = v9;
  v25 = OpaqueTypeConformance2;
  v26 = v11;
  v13 = swift_getOpaqueTypeConformance2();
  v23 = v12;
  v24 = v13;
  MEMORY[0x242616E48](255, &v23, MEMORY[0x24BDF2FE0], 0);
  swift_getTupleTypeMetadata2();
  v14 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v14);
  v15 = sub_23C0E4618();
  v16 = sub_23C0E4024();
  sub_23C0E4234();
  v17 = sub_23C0E4024();
  v21[0] = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v15);
  v21[1] = MEMORY[0x24BDEDB80];
  v18 = MEMORY[0x24BDED308];
  v20[0] = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v16, v21);
  v20[1] = sub_23C072354();
  return MEMORY[0x242616E9C](v18, v17, v20);
}

unint64_t sub_23C072354()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256B0F070[0];
  if (!qword_256B0F070[0])
  {
    v1 = sub_23C0E4234();
    result = MEMORY[0x242616E9C](MEMORY[0x24BDF02F0], v1);
    atomic_store(result, qword_256B0F070);
  }
  return result;
}

void sub_23C07239C(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23C06FC90(v1[14], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1, v1[8], v1[9], v1[10], v1[11], v1[12]);
}

void sub_23C0723D8()
{
  sub_23C070074();
}

uint64_t sub_23C07241C()
{
  return 88;
}

__n128 sub_23C072428(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_23C07244C()
{
  type metadata accessor for FilterModalitySectionView();
}

uint64_t sub_23C072498(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  swift_release();
  v4 = v1 + ((v3 + 104) & ~v3) + *(int *)(a1 + 108);
  v5 = sub_23C0E3EB0();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23C072570()
{
  type metadata accessor for FilterModalitySectionView();
}

#error "23C072610: call analysis failed (funcsize=15)"

uint64_t sub_23C072634()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C072658()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0726A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t TupleTypeMetadata2;

  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v2(v1, v0 + *(int *)(TupleTypeMetadata2 + 48));
}

void sub_23C0726F0()
{
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C072760()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0727AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  swift_release();
  v5 = v1 + v3 + *(int *)(v2 + 108);
  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v1 + ((v3 + v9 + v4) & ~v4));
  return swift_deallocObject();
}

void sub_23C0728AC()
{
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C072914()
{
  type metadata accessor for Option();
}

void sub_23C072940()
{
  type metadata accessor for FilterModalitySectionView();
}

uint64_t sub_23C0729A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + *(int *)(a1 + 124) + v4))(v3, v1);
}

void sub_23C0729E0()
{
  uint64_t *v0;

  sub_23C070E8C(v0[13], v0[14], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12]);
}

unint64_t sub_23C072A1C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B0F2F8;
  if (!qword_256B0F2F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F2F0);
    v2[0] = sub_23C06E774(&qword_256B0F300, &qword_256B0F308, MEMORY[0x24BDF4498]);
    v2[1] = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0F2F8);
  }
  return result;
}

void sub_23C072AB8()
{
  type metadata accessor for Option();
}

uint64_t sub_23C072AF0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  if (*(_BYTE *)(v1 + *(int *)(a1 + 68)) && *(_BYTE *)(v1 + *(int *)(a1 + 68)) != 1)
    return MEMORY[0x2426166B0](objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithRed_green_blue_alpha_, 0.650980392, 1.0, 0.0, 1.0));
  v2 = objc_msgSend((id)objc_opt_self(), sel_systemGray5Color);
  return MEMORY[0x2426166E0](v2);
}

uint64_t sub_23C072B94()
{
  return swift_deallocObject();
}

uint64_t sub_23C072BA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 136);
  v3 = *(_QWORD *)(a1 + 144);
  v4 = *(_BYTE *)(a1 + 152);
  sub_23C072C34(*(_QWORD *)(a1 + 24));
  sub_23C06DE1C(v2, v3, v4);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C072C34(uint64_t result)
{
  if (result)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_23C072C60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = *(_QWORD *)(a1 + 120);
  v4 = *(_BYTE *)(a1 + 128);
  sub_23C072CEC(*(_QWORD *)a1);
  sub_23C06DBB0(v2, v3, v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C072CEC(uint64_t result)
{
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_23C072D18()
{
  type metadata accessor for Option();
}

uint64_t sub_23C072D50(uint64_t a1)
{
  uint64_t v1;
  id v3;

  if (*(_BYTE *)(v1 + *(int *)(a1 + 68)))
  {
    if (*(_BYTE *)(v1 + *(int *)(a1 + 68)) == 1)
      return sub_23C0E4564();
    else
      return sub_23C0E454C();
  }
  else
  {
    v3 = objc_msgSend((id)objc_opt_self(), sel_darkGrayColor);
    return MEMORY[0x2426166E0](v3);
  }
}

uint64_t sub_23C072DA8(uint64_t a1)
{
  sub_23C06DE1C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C072DE4(uint64_t a1)
{
  sub_23C06DBB0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C072E20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unsigned int (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v68[5];
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;

  v81 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F408);
  MEMORY[0x24BDAC7A8](v81);
  v85 = (char *)v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F410);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_23C0E3EBC();
  v8 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v73 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v75 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v68 - v13;
  v93 = sub_23C0E3F04();
  v15 = *(_QWORD *)(v93 - 8);
  MEMORY[0x24BDAC7A8](v93);
  v80 = (char *)v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v72 = (uint64_t)v68 - v21;
  v87 = type metadata accessor for Artwork();
  v22 = MEMORY[0x24BDAC7A8](v87);
  v24 = (char *)v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v92 = (uint64_t)v68 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)v68 - v27;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v30 = 1 << *(_BYTE *)(a1 + 32);
    if (v30 < 64)
      v31 = ~(-1 << v30);
    else
      v31 = -1;
    v32 = v31 & *(_QWORD *)(a1 + 56);
    v33 = (unint64_t)(v30 + 63) >> 6;
    v79 = a2 + 56;
    v74 = v8;
    v91 = v20;
    v68[4] = a1;
    v71 = v14;
    v84 = v15;
    v68[3] = v28;
    v68[2] = (char *)v68 - v27;
    v90 = a2;
    v68[1] = a1 + 56;
    v68[0] = v33;
    v76 = v5;
    if (v32)
    {
      v34 = __clz(__rbit64(v32));
      v69 = (v32 - 1) & v32;
      v70 = 0;
LABEL_21:
      v38 = *(_QWORD *)(a1 + 48);
      v89 = *(_QWORD *)(v28 + 72);
      sub_23C08FC18(v38 + v89 * v34, (uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for Artwork);
      v39 = v92;
      sub_23C08FC9C((uint64_t)v29, v92, (uint64_t (*)(_QWORD))type metadata accessor for Artwork);
      sub_23C0E4A98();
      v40 = v39;
      v41 = v72;
      sub_23C068360(v40, v72, &qword_256B0EFB0);
      v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      if (v86(v41, 1, v93) == 1)
      {
        sub_23C0E4AB0();
      }
      else
      {
        v42 = v80;
        v43 = v93;
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v80, v41, v93);
        sub_23C0E4AB0();
        sub_23C0683A4(&qword_256B0EFB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
        sub_23C0E4714();
        v44 = v42;
        v20 = v91;
        (*(void (**)(char *, uint64_t))(v15 + 8))(v44, v43);
      }
      v45 = v87;
      v46 = v92;
      v82 = *(int *)(v87 + 20);
      ArtworkVariant.rawValue.getter(*(_BYTE *)(v92 + v82));
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      v78 = v46 + *(int *)(v45 + 24);
      v47 = (uint64_t)v71;
      sub_23C068360(v78, (uint64_t)v71, &qword_256B0EFA8);
      v48 = v74;
      v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
      v49 = v83;
      if (v77(v47, 1, v83) == 1)
      {
        sub_23C0E4AB0();
      }
      else
      {
        v50 = v73;
        (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v73, v47, v49);
        sub_23C0E4AB0();
        sub_23C0683A4(&qword_256B0EFC0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
        sub_23C0E4714();
        (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v49);
      }
      v51 = v90;
      v52 = (unsigned int (*)(char *, uint64_t, uint64_t))v86;
      v53 = sub_23C0E4AC8();
      v54 = -1 << *(_BYTE *)(v51 + 32);
      v55 = v53 & ~v54;
      v56 = v79;
      if (((*(_QWORD *)(v79 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) != 0)
      {
        v88 = ~v54;
        while (1)
        {
          sub_23C08FC18(*(_QWORD *)(v90 + 48) + v55 * v89, (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Artwork);
          v57 = (uint64_t)&v7[*(int *)(v5 + 48)];
          sub_23C068360((uint64_t)v24, (uint64_t)v7, &qword_256B0EFB0);
          sub_23C068360(v92, v57, &qword_256B0EFB0);
          if (v52(v7, 1, v93) == 1)
            break;
          sub_23C068360((uint64_t)v7, (uint64_t)v20, &qword_256B0EFB0);
          if (v52((char *)v57, 1, v93) == 1)
          {
            (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v93);
LABEL_30:
            sub_23C06E834((uint64_t)v7, &qword_256B0F410);
            goto LABEL_31;
          }
          v58 = v80;
          v59 = v7;
          v60 = v56;
          v61 = v93;
          (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v80, v57, v93);
          sub_23C0683A4(&qword_256B0F420, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FC0]);
          v62 = sub_23C0E4720();
          v63 = *(void (**)(char *, uint64_t))(v15 + 8);
          v63(v91, v61);
          v64 = v58;
          v20 = v91;
          v65 = v61;
          v56 = v60;
          v7 = v59;
          v63(v64, v65);
          v66 = (uint64_t)v59;
          v52 = (unsigned int (*)(char *, uint64_t, uint64_t))v86;
          sub_23C06E834(v66, &qword_256B0EFB0);
          if ((v62 & 1) != 0)
            goto LABEL_37;
LABEL_31:
          sub_23C08FC60((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for Artwork);
          v55 = (v55 + 1) & v88;
          if (((*(_QWORD *)(v56 + ((v55 >> 3) & 0xFFFFFFFFFFFFF8)) >> v55) & 1) == 0)
            goto LABEL_39;
        }
        if (v52((char *)v57, 1, v93) == 1)
        {
          sub_23C06E834((uint64_t)v7, &qword_256B0EFB0);
LABEL_37:
          __asm { BR              X10 }
        }
        goto LABEL_30;
      }
LABEL_39:
      sub_23C08FC60(v92, (uint64_t (*)(_QWORD))type metadata accessor for Artwork);
      return 0;
    }
    if ((unint64_t)(v30 + 63) >> 6 > 1)
    {
      v35 = *(_QWORD *)(a1 + 64);
      v36 = 1;
      if (v35)
        goto LABEL_20;
      v36 = 2;
      if ((unint64_t)(v30 + 63) >> 6 <= 2)
        return 1;
      v35 = *(_QWORD *)(a1 + 72);
      if (v35)
        goto LABEL_20;
      v36 = 3;
      if ((unint64_t)(v30 + 63) >> 6 <= 3)
        return 1;
      v35 = *(_QWORD *)(a1 + 80);
      if (v35)
      {
LABEL_20:
        v69 = (v35 - 1) & v35;
        v70 = v36;
        v34 = __clz(__rbit64(v35)) + (v36 << 6);
        goto LABEL_21;
      }
      v37 = 4;
      if (v33 > 4)
      {
        v35 = *(_QWORD *)(a1 + 88);
        if (v35)
        {
          v36 = 4;
          goto LABEL_20;
        }
        while (1)
        {
          v36 = v37 + 1;
          if (__OFADD__(v37, 1))
          {
            __break(1u);
            JUMPOUT(0x23C073AB8);
          }
          if (v36 >= v33)
            break;
          v35 = *(_QWORD *)(a1 + 56 + 8 * v36);
          ++v37;
          if (v35)
            goto LABEL_20;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_23C073B08(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_22;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v15 = v13 + 3;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_33;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
    }
    v4 = v15;
LABEL_22:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v12);
    sub_23C0E4A98();
    sub_23C0E4AA4();
    result = sub_23C0E4AC8();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(unsigned __int8 *)(v19 + v18) == v16)
      goto LABEL_7;
  }
}

uint64_t sub_23C073CEC(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  __int128 v85[4];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v80 = a2 + 56;
  v59 = result + 56;
  v60 = result;
  v58 = v8;
  if (!v7)
    goto LABEL_8;
LABEL_7:
  v61 = (v7 - 1) & v7;
  v62 = v3;
  for (i = __clz(__rbit64(v7)) | (v3 << 6); ; i = __clz(__rbit64(v11)) + (v12 << 6))
  {
    v14 = (uint64_t *)(*(_QWORD *)(result + 48) + 72 * i);
    v15 = v14[1];
    v18 = v14[2];
    v17 = v14[3];
    v20 = v14[4];
    v19 = v14[5];
    v22 = v14[6];
    v21 = v14[7];
    v23 = v14[8];
    v86 = *v14;
    v16 = v86;
    v87 = v15;
    v68 = v15;
    v88 = v18;
    v89 = v17;
    v70 = v17;
    v90 = v20;
    v91 = v19;
    v66 = v19;
    v92 = v22;
    v93 = v21;
    v64 = v21;
    v94 = v23;
    sub_23C0E4A98();
    v78 = v18;
    swift_bridgeObjectRetain();
    v71 = v20;
    swift_bridgeObjectRetain();
    v67 = v22;
    swift_bridgeObjectRetain();
    v69 = v23;
    swift_bridgeObjectRetain();
    v81 = v16;
    swift_bridgeObjectRetain();
    ThemeCategory.hash(into:)(v85);
    v24 = sub_23C0E4AC8();
    v25 = -1 << *(_BYTE *)(v2 + 32);
    v26 = v24 & ~v25;
    if (((*(_QWORD *)(v80 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
    {
LABEL_79:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v79 = ~v25;
    while (1)
    {
      v27 = v2;
      v84 = v26;
      v28 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 72 * v26);
      v29 = v28[1];
      v31 = v28[2];
      v30 = v28[3];
      v33 = v28[4];
      v32 = v28[5];
      v35 = v28[6];
      v34 = v28[7];
      v36 = v28[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37 = swift_bridgeObjectRetain();
      result = sub_23C072E20(v37, v81);
      if ((result & 1) != 0)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = v27;
LABEL_25:
      swift_bridgeObjectRelease();
      v26 = (v84 + 1) & v79;
      if (((*(_QWORD *)(v80 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
        goto LABEL_79;
    }
    v82 = v36;
    v83 = v33;
    if (v31)
    {
      v2 = v27;
      if (!v78
        || (v29 == v68 ? (v38 = v31 == v78) : (v38 = 0),
            (v39 = v36, !v38) && (result = sub_23C0E4A74(), (result & 1) == 0)))
      {
LABEL_70:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    else
    {
      v2 = v27;
      v39 = v36;
      if (v78)
        goto LABEL_70;
    }
    if (v30 != v70 || v83 != v71)
    {
      result = sub_23C0E4A74();
      if ((result & 1) == 0)
        goto LABEL_70;
    }
    if (v32 != v66 || v35 != v67)
    {
      result = sub_23C0E4A74();
      if ((result & 1) == 0)
        goto LABEL_70;
    }
    if (v34 != v64)
      goto LABEL_70;
    v42 = *(_QWORD *)(v39 + 16);
    v43 = v69;
    if (v42 != *(_QWORD *)(v69 + 16))
      goto LABEL_70;
    if (v42 && v39 != v69)
      break;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_74:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v59;
    result = v60;
    v8 = v58;
    v7 = v61;
    v3 = v62;
    if (v61)
      goto LABEL_7;
LABEL_8:
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_82;
    if (v10 >= v8)
      return 1;
    v11 = *(_QWORD *)(v4 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v10 + 1;
      if (v10 + 1 >= v8)
        return 1;
      v11 = *(_QWORD *)(v4 + 8 * v12);
      if (!v11)
      {
        v12 = v10 + 2;
        if (v10 + 2 >= v8)
          return 1;
        v11 = *(_QWORD *)(v4 + 8 * v12);
        if (!v11)
        {
          v13 = v10 + 3;
          if (v13 >= v8)
            return 1;
          v11 = *(_QWORD *)(v4 + 8 * v13);
          if (!v11)
          {
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
                goto LABEL_83;
              if (v12 >= v8)
                return 1;
              v11 = *(_QWORD *)(v4 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_21;
            }
          }
          v12 = v13;
        }
      }
    }
LABEL_21:
    v61 = (v11 - 1) & v11;
    v62 = v12;
  }
  v63 = v2;
  v44 = 0;
  v45 = 0;
  v65 = *(_QWORD *)(v39 + 16);
  while (v45 < *(_QWORD *)(v43 + 16))
  {
    v72 = v45;
    v73 = v44;
    v47 = (_QWORD *)(v39 + v44);
    v48 = *(_QWORD *)(v39 + v44 + 32);
    v49 = *(_QWORD *)(v39 + v44 + 40);
    v77 = v47[6];
    v50 = v47[8];
    v76 = v47[7];
    v51 = v47[10];
    v75 = v47[9];
    v53 = *(_QWORD *)(v43 + v44 + 32);
    v52 = *(_QWORD *)(v43 + v44 + 40);
    v54 = *(_QWORD *)(v43 + v44 + 56);
    v55 = *(_QWORD *)(v43 + v44 + 64);
    v74 = *(_QWORD *)(v43 + v44 + 72);
    v56 = *(_QWORD *)(v43 + v44 + 80);
    v57 = *(_QWORD *)(v43 + v44 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_23C072E20(v48, v53) & 1) == 0)
      goto LABEL_71;
    if (v77)
    {
      if (!v57 || (v49 != v52 || v77 != v57) && (sub_23C0E4A74() & 1) == 0)
      {
LABEL_71:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v2 = v63;
        goto LABEL_25;
      }
    }
    else if (v57)
    {
      goto LABEL_71;
    }
    if ((v76 != v54 || v50 != v55) && (sub_23C0E4A74() & 1) == 0)
      goto LABEL_71;
    if (v75 == v74 && v51 == v56)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v39 = v82;
    }
    else
    {
      v46 = sub_23C0E4A74();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v39 = v82;
      if ((v46 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v2 = v63;
        goto LABEL_25;
      }
    }
    v45 = v72 + 1;
    v44 = v73 + 56;
    v43 = v69;
    if (v65 == v72 + 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v2 = v63;
      goto LABEL_74;
    }
  }
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
  return result;
}

uint64_t sub_23C074564(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  BOOL v31;
  BOOL v32;
  uint64_t v34;
  int64_t v35;
  int64_t v36;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = *(_QWORD *)(result + 56);
  v34 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v35 = (unint64_t)(v6 + 63) >> 6;
  v9 = a2 + 56;
  if ((v7 & v5) == 0)
    goto LABEL_9;
LABEL_7:
  v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v36 = v4;
  for (i = v10 | (v4 << 6); ; i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    v16 = *(_QWORD *)(v3 + 48) + 40 * i;
    v18 = *(_QWORD *)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v19 = *(double *)(v16 + 16);
    v20 = *(double *)(v16 + 24);
    v21 = *(double *)(v16 + 32);
    sub_23C0E4A98();
    swift_bridgeObjectRetain();
    Duration.hash(into:)();
    v22 = sub_23C0E4AC8();
    v23 = -1 << *(_BYTE *)(a2 + 32);
    v24 = v22 & ~v23;
    if (((*(_QWORD *)(v9 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
    {
LABEL_38:
      swift_bridgeObjectRelease();
      return 0;
    }
    v25 = ~v23;
    v26 = *(_QWORD *)(a2 + 48);
    while (1)
    {
      v27 = v26 + 40 * v24;
      v29 = *(double *)(v27 + 16);
      v28 = *(double *)(v27 + 24);
      v30 = *(double *)(v27 + 32);
      v31 = *(_QWORD *)v27 == v18 && *(_QWORD *)(v27 + 8) == v17;
      if (v31 || (sub_23C0E4A74() & 1) != 0)
      {
        v32 = v29 == v19 && v28 == v20;
        if (v32 && v30 == v21)
          break;
      }
      v24 = (v24 + 1) & v25;
      if (((*(_QWORD *)(v9 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
        goto LABEL_38;
    }
    result = swift_bridgeObjectRelease();
    v4 = v36;
    if (v8)
      goto LABEL_7;
LABEL_9:
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v12 >= v35)
      return 1;
    v13 = *(_QWORD *)(v34 + 8 * v12);
    v14 = v4 + 1;
    if (!v13)
    {
      v14 = v12 + 1;
      if (v12 + 1 >= v35)
        return 1;
      v13 = *(_QWORD *)(v34 + 8 * v14);
      if (!v13)
      {
        v14 = v12 + 2;
        if (v12 + 2 >= v35)
          return 1;
        v13 = *(_QWORD *)(v34 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_22:
    v8 = (v13 - 1) & v13;
    v36 = v14;
  }
  v15 = v12 + 3;
  if (v15 >= v35)
    return 1;
  v13 = *(_QWORD *)(v34 + 8 * v15);
  if (v13)
  {
    v14 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v35)
      return 1;
    v13 = *(_QWORD *)(v34 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_22;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_23C0747F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  char v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50[5];

  if (result == a2)
    return 1;
  v2 = a2;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v48 = a2 + 56;
  v38 = result + 56;
  v39 = result;
  v37 = v9;
  if (!v8)
    goto LABEL_8;
  while (2)
  {
    v40 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v4 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 56 * v10);
    v16 = *v14;
    v15 = v14[1];
    v17 = v14[2];
    v44 = v14[3];
    v18 = v14[4];
    v42 = v14[5];
    v19 = v14[6];
    sub_23C0E4A98();
    swift_bridgeObjectRetain();
    v45 = v18;
    swift_bridgeObjectRetain();
    v43 = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    sub_23C065C58(v50, v16);
    v49 = v16;
    swift_bridgeObjectRelease();
    v46 = v15;
    v47 = v17;
    v41 = v4;
    sub_23C0E4AB0();
    if (v17)
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    v20 = sub_23C0E4AC8();
    v21 = -1 << *(_BYTE *)(v2 + 32);
    v22 = v20 & ~v21;
    if (((*(_QWORD *)(v48 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
    {
LABEL_52:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v23 = ~v21;
    while (1)
    {
      v24 = v2;
      v25 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 56 * v22);
      v26 = v25[1];
      v28 = v25[2];
      v27 = v25[3];
      v29 = v25[4];
      v30 = v25[5];
      v31 = v25[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v32 = swift_bridgeObjectRetain();
      if ((sub_23C072E20(v32, v49) & 1) == 0)
      {
LABEL_27:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v2 = v24;
        swift_bridgeObjectRelease();
        goto LABEL_28;
      }
      if (v28)
      {
        if (!v47)
          goto LABEL_27;
        v33 = v26 == v46 && v28 == v47;
        if (!v33 && (sub_23C0E4A74() & 1) == 0)
          goto LABEL_27;
      }
      else if (v47)
      {
        goto LABEL_27;
      }
      v34 = v27 == v44 && v29 == v45;
      if (!v34 && (sub_23C0E4A74() & 1) == 0)
        goto LABEL_27;
      v35 = v30 == v42 && v31 == v43;
      v2 = v24;
      if (v35)
        break;
      v36 = sub_23C0E4A74();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v36 & 1) != 0)
        goto LABEL_49;
LABEL_28:
      v22 = (v22 + 1) & v23;
      if (((*(_QWORD *)(v48 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
        goto LABEL_52;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_49:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v5 = v38;
    v3 = v39;
    v9 = v37;
    v8 = v40;
    v4 = v41;
    if (v40)
      continue;
    break;
  }
LABEL_8:
  v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_55;
  }
  if (v11 >= v9)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v11);
  ++v4;
  if (v12)
    goto LABEL_21;
  v4 = v11 + 1;
  if (v11 + 1 >= v9)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
    goto LABEL_21;
  v4 = v11 + 2;
  if (v11 + 2 >= v9)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v4);
  if (v12)
    goto LABEL_21;
  v13 = v11 + 3;
  if (v13 >= v9)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
LABEL_21:
    v40 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v9)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_55:
  __break(1u);
  return result;
}

uint64_t sub_23C074C68(uint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  char v33;
  char v35;
  char v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char v42;
  uint64_t v43;
  char v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v59[72];
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v57 = a2 + 56;
  v46 = result + 56;
  v47 = result;
  v45 = v7;
  if (!v6)
    goto LABEL_8;
  while (2)
  {
    v48 = (v6 - 1) & v6;
    v49 = v2;
    v8 = __clz(__rbit64(v6)) | (v2 << 6);
LABEL_22:
    v13 = (uint64_t *)(*(_QWORD *)(result + 48) + 56 * v8);
    v15 = *v13;
    v14 = (_QWORD *)v13[1];
    v16 = v13[2];
    v17 = v13[3];
    v19 = v13[4];
    v18 = v13[5];
    v20 = v13[6];
    v60 = *v13;
    v61 = v14;
    v52 = v16;
    v62 = v16;
    v63 = v17;
    v64 = v19;
    v65 = v18;
    v50 = v18;
    v66 = v20;
    sub_23C0E4A98();
    v51 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v56 = v17;
    swift_bridgeObjectRetain();
    v53 = v19;
    swift_bridgeObjectRetain();
    FilterConfiguration.hash(into:)((uint64_t)v59);
    v21 = sub_23C0E4AC8();
    v23 = v57;
    v22 = a2;
    v24 = -1 << *(_BYTE *)(a2 + 32);
    v25 = v21 & ~v24;
    if (((*(_QWORD *)(v57 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
    {
LABEL_72:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v26 = ~v24;
    while (1)
    {
      v27 = (_QWORD *)(*(_QWORD *)(v22 + 48) + 56 * v25);
      if (*v27 != v15)
        goto LABEL_26;
      v28 = (_QWORD *)v27[1];
      v29 = v28[2];
      if (v29 != v14[2])
        goto LABEL_26;
      v30 = v27[2];
      v31 = v27[3];
      v54 = v27[5];
      v55 = v27[6];
      if (v29)
        v32 = v28 == v14;
      else
        v32 = 1;
      if (!v32)
      {
        if (v28[4] != v14[4] || v28[5] != v14[5])
        {
          v35 = sub_23C0E4A74();
          v23 = v57;
          v22 = a2;
          if ((v35 & 1) == 0)
            goto LABEL_26;
        }
        if (v29 != 1)
        {
          if (v28[6] != v14[6] || v28[7] != v14[7])
          {
            v37 = sub_23C0E4A74();
            v23 = v57;
            v22 = a2;
            if ((v37 & 1) == 0)
              goto LABEL_26;
          }
          v38 = v29 - 2;
          if (v38)
          {
            v39 = v28 + 9;
            v40 = v14 + 9;
            do
            {
              if (*(v39 - 1) != *(v40 - 1) || *v39 != *v40)
              {
                v42 = sub_23C0E4A74();
                v23 = v57;
                v22 = a2;
                if ((v42 & 1) == 0)
                  goto LABEL_26;
              }
              v40 += 2;
              v39 += 2;
            }
            while (--v38);
          }
        }
      }
      if (v31)
      {
        if (!v56)
          goto LABEL_26;
        if (v30 != v52 || v31 != v56)
        {
          v33 = sub_23C0E4A74();
          v23 = v57;
          v22 = a2;
          if ((v33 & 1) == 0)
            goto LABEL_26;
        }
      }
      else if (v56)
      {
        goto LABEL_26;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = swift_bridgeObjectRetain();
      if ((sub_23C0B4128(v43, v53) & 1) == 0)
        goto LABEL_25;
      if (!v55)
      {
        if (!v51)
          break;
LABEL_25:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v23 = v57;
        v22 = a2;
        goto LABEL_26;
      }
      if (!v51)
        goto LABEL_25;
      if (v54 == v50 && v55 == v51)
        break;
      v44 = sub_23C0E4A74();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v23 = v57;
      v22 = a2;
      if ((v44 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        goto LABEL_69;
      }
LABEL_26:
      v25 = (v25 + 1) & v26;
      if (((*(_QWORD *)(v23 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
        goto LABEL_72;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_69:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v46;
    result = v47;
    v7 = v45;
    v6 = v48;
    v2 = v49;
    if (v48)
      continue;
    break;
  }
LABEL_8:
  v9 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_75;
  }
  if (v9 >= v7)
    return 1;
  v10 = *(_QWORD *)(v3 + 8 * v9);
  v11 = v2 + 1;
  if (v10)
    goto LABEL_21;
  v11 = v9 + 1;
  if (v9 + 1 >= v7)
    return 1;
  v10 = *(_QWORD *)(v3 + 8 * v11);
  if (v10)
    goto LABEL_21;
  v11 = v9 + 2;
  if (v9 + 2 >= v7)
    return 1;
  v10 = *(_QWORD *)(v3 + 8 * v11);
  if (v10)
    goto LABEL_21;
  v12 = v9 + 3;
  if (v12 >= v7)
    return 1;
  v10 = *(_QWORD *)(v3 + 8 * v12);
  if (v10)
  {
    v11 = v12;
LABEL_21:
    v48 = (v10 - 1) & v10;
    v49 = v11;
    v8 = __clz(__rbit64(v10)) + (v11 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v11 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v11 >= v7)
      return 1;
    v10 = *(_QWORD *)(v3 + 8 * v11);
    ++v12;
    if (v10)
      goto LABEL_21;
  }
LABEL_75:
  __break(1u);
  return result;
}

uint64_t sub_23C075150(uint64_t result, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  BOOL v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v66;
  __int128 v67[4];
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v2 = 0;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  v63 = a2 + 56;
  v50 = result + 56;
  v51 = result;
  v49 = v7;
  if (v6)
    goto LABEL_7;
LABEL_8:
  v9 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (v9 >= v7)
    return 1;
  v10 = *(_QWORD *)(v3 + 8 * v9);
  v11 = v2 + 1;
  if (!v10)
  {
    v11 = v9 + 1;
    if (v9 + 1 >= v7)
      return 1;
    v10 = *(_QWORD *)(v3 + 8 * v11);
    if (!v10)
    {
      v11 = v9 + 2;
      if (v9 + 2 >= v7)
        return 1;
      v10 = *(_QWORD *)(v3 + 8 * v11);
      if (!v10)
      {
        v12 = v9 + 3;
        if (v12 < v7)
        {
          v10 = *(_QWORD *)(v3 + 8 * v12);
          if (v10)
          {
            v11 = v12;
            goto LABEL_21;
          }
          while (1)
          {
            v11 = v12 + 1;
            if (__OFADD__(v12, 1))
              break;
            if (v11 >= v7)
              return 1;
            v10 = *(_QWORD *)(v3 + 8 * v11);
            ++v12;
            if (v10)
              goto LABEL_21;
          }
LABEL_64:
          __break(1u);
          return result;
        }
        return 1;
      }
    }
  }
LABEL_21:
  v52 = (v10 - 1) & v10;
  v53 = v11;
  for (i = __clz(__rbit64(v10)) + (v11 << 6); ; i = __clz(__rbit64(v6)) | (v2 << 6))
  {
    v13 = (_QWORD *)(*(_QWORD *)(result + 48) + 72 * i);
    v15 = v13[1];
    v16 = v13[2];
    v17 = v13[3];
    v18 = v13[4];
    v19 = v13[5];
    v20 = v13[6];
    v21 = v13[7];
    v22 = v13[8];
    v68 = (_QWORD *)*v13;
    v14 = v68;
    v69 = v15;
    v56 = v20;
    v57 = v16;
    v70 = v16;
    v71 = v17;
    v59 = v18;
    v72 = v18;
    v73 = v19;
    v74 = v20;
    v75 = v21;
    v76 = v22;
    sub_23C0E4A98();
    v61 = v17;
    swift_bridgeObjectRetain();
    v60 = v19;
    swift_bridgeObjectRetain();
    v58 = v21;
    swift_bridgeObjectRetain();
    v55 = v22;
    swift_bridgeObjectRetain();
    v66 = v14;
    swift_bridgeObjectRetain();
    v64 = v15;
    swift_bridgeObjectRetain();
    Modality.hash(into:)(v67);
    result = sub_23C0E4AC8();
    v23 = a2;
    v24 = -1 << *(_BYTE *)(a2 + 32);
    v25 = result & ~v24;
    v26 = v63;
    if (((*(_QWORD *)(v63 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
      break;
    v27 = ~v24;
    v28 = v14[2];
    v54 = v14 + 6;
    v62 = ~v24;
    while (1)
    {
      v29 = (_QWORD *)(*(_QWORD *)(v23 + 48) + 72 * v25);
      v30 = (_QWORD *)*v29;
      if (*(_QWORD *)(*v29 + 16) != v28)
        goto LABEL_26;
      v31 = v29[2];
      v32 = v29[3];
      v33 = v29[4];
      v35 = v29[5];
      v34 = v29[6];
      v37 = v29[7];
      v36 = v29[8];
      if (!v28 || v30 == v66)
        break;
      v38 = v66[2];
      if (!v38)
      {
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
        goto LABEL_63;
      }
      if (v30[4] == v66[4])
      {
        if (v28 == 1)
          break;
        v41 = v38 >= 2;
        v42 = v38 - 2;
        if (!v41)
          goto LABEL_62;
        if (v30[5] == v66[5])
        {
          v43 = v30 + 6;
          v44 = v28 - 2;
          v45 = v54;
          while (v44)
          {
            if (!v42)
            {
              __break(1u);
              goto LABEL_61;
            }
            v47 = *v43++;
            v46 = v47;
            v48 = *v45++;
            --v42;
            --v44;
            if (v46 != v48)
              goto LABEL_26;
          }
          break;
        }
      }
LABEL_26:
      v25 = (v25 + 1) & v27;
      if (((*(_QWORD *)(v26 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
        goto LABEL_58;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v39 = swift_bridgeObjectRetain();
    if ((sub_23C072E20(v39, v64) & 1) == 0)
      goto LABEL_25;
    if (v32)
    {
      if (!v61 || (v31 != v57 || v32 != v61) && (sub_23C0E4A74() & 1) == 0)
        goto LABEL_25;
    }
    else if (v61)
    {
      goto LABEL_25;
    }
    if ((v33 != v59 || v35 != v60) && (sub_23C0E4A74() & 1) == 0
      || (v34 != v56 || v37 != v58) && (sub_23C0E4A74() & 1) == 0)
    {
LABEL_25:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v23 = a2;
      v27 = v62;
      v26 = v63;
      goto LABEL_26;
    }
    v40 = sub_23C073B08(v36, v55);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v23 = a2;
    v27 = v62;
    v26 = v63;
    if ((v40 & 1) == 0)
      goto LABEL_26;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v50;
    result = v51;
    v7 = v49;
    v6 = v52;
    v2 = v53;
    if (!v52)
      goto LABEL_8;
LABEL_7:
    v52 = (v6 - 1) & v6;
    v53 = v2;
  }
LABEL_58:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_23C075670(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  char v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59[4];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v56 = a2 + 56;
  v43 = result + 56;
  v44 = result;
  v42 = v8;
  if (!v7)
    goto LABEL_8;
  while (2)
  {
    v45 = (v7 - 1) & v7;
    v46 = v3;
    v9 = __clz(__rbit64(v7)) | (v3 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(result + 48) + 72 * v9);
    v15 = v14[1];
    v18 = v14[2];
    v17 = v14[3];
    v20 = v14[4];
    v19 = v14[5];
    v22 = v14[6];
    v21 = v14[7];
    v23 = v14[8];
    v60 = *v14;
    v16 = v60;
    v61 = v15;
    v51 = v15;
    v52 = v17;
    v62 = v18;
    v63 = v17;
    v64 = v20;
    v65 = v19;
    v47 = v21;
    v48 = v19;
    v66 = v22;
    v67 = v21;
    v68 = v23;
    sub_23C0E4A98();
    v50 = v22;
    swift_bridgeObjectRetain();
    v49 = v23;
    swift_bridgeObjectRetain();
    v58 = v16;
    swift_bridgeObjectRetain();
    v54 = v18;
    swift_bridgeObjectRetain();
    v53 = v20;
    swift_bridgeObjectRetain();
    SkillLevel.hash(into:)(v59);
    v24 = sub_23C0E4AC8();
    v25 = -1 << *(_BYTE *)(v2 + 32);
    v26 = v24 & ~v25;
    if (((*(_QWORD *)(v56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
    {
LABEL_62:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v55 = ~v25;
    while (1)
    {
      v27 = v2;
      v28 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 72 * v26);
      v29 = *v28;
      v30 = v28[1];
      v32 = v28[2];
      v31 = v28[3];
      v34 = v28[4];
      v33 = v28[5];
      v35 = v28[6];
      v57 = v28[7];
      v36 = v28[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((sub_23C072E20(v29, v58) & 1) == 0)
      {
LABEL_52:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v2 = v27;
LABEL_53:
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
      if (v32)
      {
        if (!v54)
          goto LABEL_52;
        v37 = v30 == v51 && v32 == v54;
        if (!v37 && (sub_23C0E4A74() & 1) == 0)
          goto LABEL_52;
      }
      else if (v54)
      {
        goto LABEL_52;
      }
      v38 = v31 == v52 && v34 == v53;
      if (!v38 && (sub_23C0E4A74() & 1) == 0)
        goto LABEL_52;
      v2 = v27;
      if (v35)
      {
        if (!v50 || (v33 == v48 ? (v39 = v35 == v50) : (v39 = 0), !v39 && (sub_23C0E4A74() & 1) == 0))
        {
LABEL_57:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_53;
        }
      }
      else if (v50)
      {
        goto LABEL_57;
      }
      if (v57 == v47 && v36 == v49)
        break;
      v41 = sub_23C0E4A74();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 & 1) != 0)
        goto LABEL_59;
LABEL_54:
      v26 = (v26 + 1) & v55;
      if (((*(_QWORD *)(v56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
        goto LABEL_62;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v43;
    result = v44;
    v8 = v42;
    v7 = v45;
    v3 = v46;
    if (v45)
      continue;
    break;
  }
LABEL_8:
  v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_65;
  }
  if (v10 >= v8)
    return 1;
  v11 = *(_QWORD *)(v4 + 8 * v10);
  v12 = v3 + 1;
  if (v11)
    goto LABEL_21;
  v12 = v10 + 1;
  if (v10 + 1 >= v8)
    return 1;
  v11 = *(_QWORD *)(v4 + 8 * v12);
  if (v11)
    goto LABEL_21;
  v12 = v10 + 2;
  if (v10 + 2 >= v8)
    return 1;
  v11 = *(_QWORD *)(v4 + 8 * v12);
  if (v11)
    goto LABEL_21;
  v13 = v10 + 3;
  if (v13 >= v8)
    return 1;
  v11 = *(_QWORD *)(v4 + 8 * v13);
  if (v11)
  {
    v12 = v13;
LABEL_21:
    v45 = (v11 - 1) & v11;
    v46 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v8)
      return 1;
    v11 = *(_QWORD *)(v4 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_21;
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t sub_23C075B28(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  char v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59[4];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  if (result == a2)
    return 1;
  v2 = a2;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  if (v5 < 64)
    v6 = ~(-1 << v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  v56 = a2 + 56;
  v43 = result + 56;
  v44 = result;
  v42 = v8;
  if (!v7)
    goto LABEL_8;
  while (2)
  {
    v45 = (v7 - 1) & v7;
    v46 = v3;
    v9 = __clz(__rbit64(v7)) | (v3 << 6);
LABEL_22:
    v14 = (uint64_t *)(*(_QWORD *)(result + 48) + 72 * v9);
    v15 = v14[1];
    v18 = v14[2];
    v17 = v14[3];
    v20 = v14[4];
    v19 = v14[5];
    v22 = v14[6];
    v21 = v14[7];
    v23 = v14[8];
    v60 = *v14;
    v16 = v60;
    v61 = v15;
    v51 = v15;
    v52 = v17;
    v62 = v18;
    v63 = v17;
    v64 = v20;
    v65 = v19;
    v47 = v21;
    v48 = v19;
    v66 = v22;
    v67 = v21;
    v68 = v23;
    sub_23C0E4A98();
    v50 = v22;
    swift_bridgeObjectRetain();
    v49 = v23;
    swift_bridgeObjectRetain();
    v58 = v16;
    swift_bridgeObjectRetain();
    v54 = v18;
    swift_bridgeObjectRetain();
    v53 = v20;
    swift_bridgeObjectRetain();
    Trainer.hash(into:)(v59);
    v24 = sub_23C0E4AC8();
    v25 = -1 << *(_BYTE *)(v2 + 32);
    v26 = v24 & ~v25;
    if (((*(_QWORD *)(v56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
    {
LABEL_62:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return 0;
    }
    v55 = ~v25;
    while (1)
    {
      v27 = v2;
      v28 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 72 * v26);
      v29 = *v28;
      v30 = v28[1];
      v32 = v28[2];
      v31 = v28[3];
      v34 = v28[4];
      v33 = v28[5];
      v35 = v28[6];
      v57 = v28[7];
      v36 = v28[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((sub_23C072E20(v29, v58) & 1) == 0)
      {
LABEL_52:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v2 = v27;
LABEL_53:
        swift_bridgeObjectRelease();
        goto LABEL_54;
      }
      if (v32)
      {
        if (!v54)
          goto LABEL_52;
        v37 = v30 == v51 && v32 == v54;
        if (!v37 && (sub_23C0E4A74() & 1) == 0)
          goto LABEL_52;
      }
      else if (v54)
      {
        goto LABEL_52;
      }
      v38 = v31 == v52 && v34 == v53;
      if (!v38 && (sub_23C0E4A74() & 1) == 0)
        goto LABEL_52;
      v2 = v27;
      if (v35)
      {
        if (!v50 || (v33 == v48 ? (v39 = v35 == v50) : (v39 = 0), !v39 && (sub_23C0E4A74() & 1) == 0))
        {
LABEL_57:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_53;
        }
      }
      else if (v50)
      {
        goto LABEL_57;
      }
      if (v57 == v47 && v36 == v49)
        break;
      v41 = sub_23C0E4A74();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v41 & 1) != 0)
        goto LABEL_59;
LABEL_54:
      v26 = (v26 + 1) & v55;
      if (((*(_QWORD *)(v56 + ((v26 >> 3) & 0xFFFFFFFFFFFFF8)) >> v26) & 1) == 0)
        goto LABEL_62;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_59:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v43;
    result = v44;
    v8 = v42;
    v7 = v45;
    v3 = v46;
    if (v45)
      continue;
    break;
  }
LABEL_8:
  v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
    goto LABEL_65;
  }
  if (v10 >= v8)
    return 1;
  v11 = *(_QWORD *)(v4 + 8 * v10);
  v12 = v3 + 1;
  if (v11)
    goto LABEL_21;
  v12 = v10 + 1;
  if (v10 + 1 >= v8)
    return 1;
  v11 = *(_QWORD *)(v4 + 8 * v12);
  if (v11)
    goto LABEL_21;
  v12 = v10 + 2;
  if (v10 + 2 >= v8)
    return 1;
  v11 = *(_QWORD *)(v4 + 8 * v12);
  if (v11)
    goto LABEL_21;
  v13 = v10 + 3;
  if (v13 >= v8)
    return 1;
  v11 = *(_QWORD *)(v4 + 8 * v13);
  if (v11)
  {
    v12 = v13;
LABEL_21:
    v45 = (v11 - 1) & v11;
    v46 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v8)
      return 1;
    v11 = *(_QWORD *)(v4 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_21;
  }
LABEL_65:
  __break(1u);
  return result;
}

uint64_t sub_23C075FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  int64_t v19;
  uint64_t v20;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v3 = 1 << *(_BYTE *)(a1 + 32);
    if (v3 < 64)
      v4 = ~(-1 << v3);
    else
      v4 = -1;
    v5 = v4 & *(_QWORD *)(a1 + 56);
    v19 = (unint64_t)(v3 + 63) >> 6;
    v20 = a2 + 56;
    if (v5)
    {
      v6 = __clz(__rbit64(v5));
LABEL_21:
      v10 = *(_QWORD *)(a1 + 48) + 48 * v6;
      v11 = *(_QWORD *)v10;
      v12 = *(_QWORD *)(v10 + 8);
      v13 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      v15 = *(_QWORD *)(v10 + 32);
      v16 = *(_BYTE *)(v10 + 40);
      sub_23C0E4A98();
      sub_23C0682C0(v11, v12, v13, v14, v15, v16);
      FilterItem.hash(into:)();
      v17 = sub_23C0E4AC8() & ~(-1 << *(_BYTE *)(a2 + 32));
      if (((*(_QWORD *)(v20 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0)
        __asm { BR              X8 }
      sub_23C0682A8(v11, v12, v13, v14, v15, v16);
      return 0;
    }
    if ((unint64_t)(v3 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      v8 = 1;
      if (v7)
        goto LABEL_20;
      v8 = 2;
      if ((unint64_t)(v3 + 63) >> 6 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 72);
      if (v7)
        goto LABEL_20;
      v8 = 3;
      if ((unint64_t)(v3 + 63) >> 6 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
      {
LABEL_20:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_21;
      }
      v9 = 4;
      if (v19 > 4)
      {
        v7 = *(_QWORD *)(a1 + 88);
        if (v7)
        {
          v8 = 4;
          goto LABEL_20;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x23C077124);
          }
          if (v8 >= v19)
            break;
          v7 = *(_QWORD *)(a1 + 56 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_20;
        }
      }
    }
    return 1;
  }
  return 0;
}

uint64_t sub_23C077188(uint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  _QWORD *v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;

  if (result == a2)
    return 1;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v29 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(result + 56);
  v30 = (unint64_t)(v4 + 63) >> 6;
  v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v31 = v3;
      v9 = v8 | (v3 << 6);
      goto LABEL_24;
    }
    v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v10);
    v12 = v3 + 1;
    if (!v11)
    {
      v12 = v3 + 2;
      if (v3 + 2 >= v30)
        return 1;
      v11 = *(_QWORD *)(v29 + 8 * v12);
      if (!v11)
      {
        v12 = v3 + 3;
        if (v3 + 3 >= v30)
          return 1;
        v11 = *(_QWORD *)(v29 + 8 * v12);
        if (!v11)
          break;
      }
    }
LABEL_23:
    v6 = (v11 - 1) & v11;
    v31 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    v14 = result;
    v15 = (uint64_t *)(*(_QWORD *)(result + 48) + 16 * v9);
    v17 = *v15;
    v16 = v15[1];
    sub_23C0E4A98();
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    v18 = sub_23C0E4AC8();
    v19 = -1 << *(_BYTE *)(a2 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
      goto LABEL_39;
    v21 = *(_QWORD *)(a2 + 48);
    v22 = (_QWORD *)(v21 + 16 * v20);
    v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_23C0E4A74() & 1) == 0)
    {
      v24 = ~v19;
      for (i = v20 + 1; ; i = v26 + 1)
      {
        v26 = i & v24;
        if (((*(_QWORD *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0)
          break;
        v27 = (_QWORD *)(v21 + 16 * v26);
        v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_23C0E4A74() & 1) != 0)
          goto LABEL_7;
      }
LABEL_39:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    result = v14;
    v3 = v31;
  }
  v13 = v3 + 4;
  if (v3 + 4 >= v30)
    return 1;
  v11 = *(_QWORD *)(v29 + 8 * v13);
  if (v11)
  {
    v12 = v3 + 4;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v30)
      return 1;
    v11 = *(_QWORD *)(v29 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_23;
  }
LABEL_43:
  __break(1u);
  return result;
}

void sub_23C07740C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23C077458(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23C07753C + 4 * byte_23C0E5698[a2]))(0x656C655265746164);
}

uint64_t sub_23C07753C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656C655265746164 && v1 == 0xEC00000064657361)
    v2 = 1;
  else
    v2 = sub_23C0E4A74();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_23C077674(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_23C0776E0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23C0777B8 + 4 * byte_23C0E56A8[a2]))(0x6565776F6C6C6168);
}

uint64_t sub_23C0777B8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6565776F6C6C6168 && v1 == 0xE90000000000006ELL)
    v2 = 1;
  else
    v2 = sub_23C0E4A74();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t FilterFeature.environment.getter@<X0>(_OWORD *a1@<X8>)
{
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v2 = v1[5];
  v3 = v1[7];
  v19 = v1[6];
  v20 = v3;
  v4 = v1[7];
  v21 = v1[8];
  v5 = v1[1];
  v6 = v1[3];
  v15 = v1[2];
  v7 = v15;
  v16 = v6;
  v8 = v1[3];
  v9 = v1[5];
  v17 = v1[4];
  v10 = v17;
  v18 = v9;
  v11 = v1[1];
  v14[0] = *v1;
  v12 = v14[0];
  v14[1] = v11;
  a1[6] = v19;
  a1[7] = v4;
  a1[8] = v1[8];
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = v10;
  a1[5] = v2;
  *a1 = v12;
  a1[1] = v5;
  return sub_23C077960((uint64_t)v14);
}

uint64_t sub_23C077960(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  swift_retain();
  swift_retain();
  sub_23C077A18(v2);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_23C077A18(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

__n128 FilterFeature.init(environment:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v2;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  v3 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v3;
  v4 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v4;
  result = *(__n128 *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(__n128 *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 144) = &unk_250CF9258;
  return result;
}

void FilterFeature.reduce(localState:sharedState:sideEffects:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (*v28)(_QWORD);
  char *v29;
  _QWORD v30[256];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v30[40] = a3;
  v30[41] = a2;
  v30[34] = 0;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F310);
  v30[38] = *(_QWORD *)(v6 - 8);
  v30[39] = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v30[28] = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v30[32] = (char *)v30 - v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v30[30] = (char *)v30 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v30[25] = (char *)v30 - v17;
  v18 = MEMORY[0x24BDAC7A8](v16);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v30[26] = (char *)v30 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v30[36] = (char *)v30 - v21;
  v22 = type metadata accessor for FilterAction();
  MEMORY[0x24BDAC7A8](v22);
  v24 = v4[7];
  v37 = v4[6];
  v38 = v24;
  v39 = v4[8];
  v25 = v4[3];
  v33 = v4[2];
  v34 = v25;
  v26 = v4[5];
  v35 = v4[4];
  v36 = v26;
  v27 = v4[1];
  v31 = *v4;
  v40 = *((_QWORD *)v4 + 18);
  v32 = v27;
  sub_23C08FC18(a4, (uint64_t)v30 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
  v29 = (char *)sub_23C077CB4 + 4 * word_23C0E56B0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23C077CB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  int *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD **v43;
  _QWORD *v44;
  unint64_t v45;
  unint64_t v46;

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  sub_23C07C14C(*(const void **)(v0 + 328), (void *)(v0 + 1768));
  sub_23C07C14C((const void *)(v0 + 1768), (void *)(v0 + 1208));
  if (sub_23C07C1BC(v0 + 1208) != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v6 = ((uint64_t (*)(uint64_t))nullsub_1)(v0 + 1208);
  v8 = *(_QWORD *)v6;
  v7 = *(_QWORD *)(v6 + 8);
  v9 = *(_QWORD *)(v6 + 16);
  v10 = *(_BYTE *)(v6 + 24);
  *(_QWORD *)(v0 + 272) = *(_QWORD *)(v6 + 32);
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v0 + 240) = *(_QWORD *)(v6 + 48);
  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v6 + 56);
  v11 = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v6 + 72);
  *(_QWORD *)(v0 + 208) = v11;
  v12 = *(_QWORD *)(v6 + 80);
  *(_QWORD *)(v0 + 184) = *(_QWORD *)(v6 + 88);
  *(_QWORD *)(v0 + 192) = v12;
  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v6 + 96);
  v13 = *(_QWORD *)(v6 + 104);
  v14 = *(_QWORD *)(v6 + 112);
  v15 = *(_QWORD *)(v6 + 120);
  *(_QWORD *)(v0 + 96) = *(_QWORD *)(v6 + 128);
  *(_QWORD *)(v0 + 112) = *(_QWORD *)(v6 + 136);
  *(_QWORD *)(v0 + 128) = *(_QWORD *)(v6 + 144);
  *(_QWORD *)(v0 + 144) = *(_QWORD *)(v6 + 152);
  v16 = *(_QWORD *)(v6 + 168);
  *(_QWORD *)(v0 + 160) = *(_QWORD *)(v6 + 160);
  v17 = *(_QWORD *)(v6 + 176);
  *(_QWORD *)(v0 + 48) = v13;
  *(_QWORD *)(v0 + 56) = v17;
  v18 = *(_QWORD *)(v6 + 184);
  *(_QWORD *)(v0 + 64) = v14;
  *(_QWORD *)(v0 + 72) = v18;
  v19 = *(_QWORD *)(v6 + 192);
  *(_QWORD *)(v0 + 80) = v15;
  *(_QWORD *)(v0 + 88) = v19;
  *(_QWORD *)(v0 + 104) = *(_QWORD *)(v6 + 200);
  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v6 + 208);
  *(_QWORD *)(v0 + 136) = *(_QWORD *)(v6 + 216);
  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v6 + 224);
  *(_QWORD *)(v0 + 168) = *(_QWORD *)(v6 + 232);
  v20 = *(_QWORD *)(v6 + 240);
  v21 = *(_QWORD *)(v6 + 256);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v6 + 248);
  *(_QWORD *)(v0 + 24) = v21;
  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v6 + 264);
  *(_QWORD *)(v0 + 40) = v20;
  v22 = v0 + 1768;
  if (v8)
  {
    sub_23C08F06C(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23C07C1D4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C077A18(v8);
    if ((sub_23C075FE0(v8, v2) & 1) != 0 && ((v3 ^ v7) & 1) == 0 && (sub_23C075FE0(v9, v4) & 1) != 0)
    {
      sub_23C07740C(v10);
      *(_DWORD *)(v0 + 12) = v23;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C07CA24(v8);
      if ((*(_DWORD *)(v0 + 12) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_23C07C9B8(*(_QWORD *)(v0 + 56));
        sub_23C07C920(*(_QWORD *)(v0 + 48));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      goto LABEL_12;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v25 = v8;
  }
  else
  {
    sub_23C08F06C(v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23C07C1D4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C07CA24(0);
    v25 = v2;
  }
  sub_23C07CA24(v25);
LABEL_12:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C08F06C(v0 + 1768, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23C07C6D0);
  *(_QWORD *)(v0 + 928) = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 936) = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v0 + 944) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 952) = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 960) = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 968) = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 976) = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 984) = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 992) = v16;
  *(_QWORD *)(v0 + 1000) = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 1008) = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v0 + 1016) = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 1024) = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 1032) = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 1040) = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 1048) = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 1056) = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 1064) = *(_QWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 1072) = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 1112) = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 1120) = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 1128) = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 1136) = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 1144) = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 1152) = *(_QWORD *)(v0 + 136);
  *(_QWORD *)(v0 + 1160) = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 1168) = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 1176) = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 1184) = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 1192) = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 1080) = v2;
  *(_BYTE *)(v0 + 1088) = v3;
  *(_QWORD *)(v0 + 1096) = v4;
  *(_BYTE *)(v0 + 1104) = v5;
  sub_23C08F334(v0 + 928);
  sub_23C07C14C((const void *)(v0 + 928), *(void **)(v0 + 328));
  v26 = (int *)__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F318);
  v27 = v5;
  v28 = *(_QWORD *)(v0 + 288);
  v29 = v28 + v26[16];
  *(_QWORD *)(v0 + 328) = v28 + v26[20];
  v30 = (_QWORD *)(v28 + v26[24]);
  *(_BYTE *)(v0 + 648) = 0;
  sub_23C07CAE8();
  sub_23C0E48B8();
  sub_23C0E4858();
  v31 = *MEMORY[0x24BE2B580];
  v32 = sub_23C0E46F0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v29, v31, v32);
  v33 = swift_allocObject();
  v34 = *(_OWORD *)(v0 + 2160);
  *(_OWORD *)(v33 + 112) = *(_OWORD *)(v0 + 2144);
  *(_OWORD *)(v33 + 128) = v34;
  *(_OWORD *)(v33 + 144) = *(_OWORD *)(v0 + 2176);
  v35 = *(_QWORD *)(v0 + 2192);
  v36 = *(_OWORD *)(v0 + 2096);
  *(_OWORD *)(v33 + 48) = *(_OWORD *)(v0 + 2080);
  *(_OWORD *)(v33 + 64) = v36;
  v37 = *(_OWORD *)(v0 + 2128);
  *(_OWORD *)(v33 + 80) = *(_OWORD *)(v0 + 2112);
  *(_OWORD *)(v33 + 96) = v37;
  v38 = *(_OWORD *)(v0 + 2064);
  *(_OWORD *)(v33 + 16) = *(_OWORD *)(v0 + 2048);
  *(_OWORD *)(v33 + 32) = v38;
  *(_QWORD *)(v33 + 160) = v35;
  *(_QWORD *)(v33 + 168) = v2;
  *(_BYTE *)(v33 + 176) = v3;
  *(_QWORD *)(v33 + 184) = v4;
  *(_BYTE *)(v33 + 192) = v27;
  *v30 = &unk_256B0F3D8;
  v30[1] = v33;
  v39 = *MEMORY[0x24BE2B558];
  v40 = sub_23C0E46E4();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(*(_QWORD *)(v0 + 328), v39, v40);
  v42 = *(_QWORD *)(v0 + 304);
  v41 = *(_QWORD *)(v0 + 312);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v42 + 104))(v28, *MEMORY[0x24BE2B438], v41);
  v43 = *(_QWORD ***)(v0 + 320);
  v44 = *v43;
  sub_23C07F54C(v0 + 2048);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v44 = (_QWORD *)sub_23C081A5C(0, v44[2] + 1, 1, v44);
  v46 = v44[2];
  v45 = v44[3];
  if (v46 >= v45 >> 1)
    v44 = (_QWORD *)sub_23C081A5C(v45 > 1, v46 + 1, 1, v44);
  v44[2] = v46 + 1;
  result = (*(uint64_t (**)(unint64_t, _QWORD, uint64_t))(v42 + 32))((unint64_t)v44+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v42 + 72) * v46, *(_QWORD *)(v0 + 288), v41);
  *v43 = v44;
  return result;
}

uint64_t sub_23C07A368(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  uint64_t v6;
  char v11;
  int *v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t);

  *(_BYTE *)(v6 + 114) = a6;
  *(_QWORD *)(v6 + 128) = a3;
  *(_QWORD *)(v6 + 136) = a5;
  *(_BYTE *)(v6 + 113) = a4;
  v11 = a4 & 1;
  *(_QWORD *)(v6 + 120) = a1;
  *(_QWORD *)(v6 + 144) = type metadata accessor for FilterAction();
  *(_QWORD *)(v6 + 152) = swift_task_alloc();
  *(_QWORD *)(v6 + 160) = sub_23C0E484C();
  *(_QWORD *)(v6 + 168) = sub_23C0E4840();
  v12 = *(int **)(a2 + 64);
  *(_QWORD *)(v6 + 88) = a3;
  *(_BYTE *)(v6 + 96) = v11;
  *(_QWORD *)(v6 + 104) = a5;
  *(_BYTE *)(v6 + 112) = a6;
  v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)v12 + *v12);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 176) = v13;
  *v13 = v6;
  v13[1] = sub_23C07A458;
  return v15(v6 + 16, v6 + 88);
}

uint64_t sub_23C07A458()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_23C0E4834();
  }
  else
  {
    *(_QWORD *)(v2 + 192) = sub_23C0E4834();
    *(_QWORD *)(v2 + 200) = v3;
  }
  return swift_task_switch();
}

uint64_t sub_23C07A4F4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_BYTE *)(v0 + 114);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_BYTE *)(v0 + 113) & 1;
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_OWORD *)(v0 + 16);
  v7 = *(_OWORD *)(v0 + 32);
  v8 = *(_OWORD *)(v0 + 48);
  v9 = *(_OWORD *)(v0 + 64);
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 128);
  *(_BYTE *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 24) = v2;
  *(_OWORD *)(v1 + 32) = v6;
  *(_OWORD *)(v1 + 48) = v7;
  *(_OWORD *)(v1 + 64) = v8;
  *(_OWORD *)(v1 + 80) = v9;
  *(_QWORD *)(v1 + 96) = v5;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F430);
  *v10 = v0;
  v10[1] = sub_23C07A5B8;
  return sub_23C0E46D8();
}

uint64_t sub_23C07A5B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc();
  sub_23C08FC60(v1, (uint64_t (*)(_QWORD))type metadata accessor for FilterAction);
  return swift_task_switch();
}

uint64_t sub_23C07A618()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23C07A658()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23C07A698(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  char v11;
  _OWORD v13[2];
  uint64_t v14;
  char v15;
  _BYTE v16[48];

  sub_23C07CAAC(a1, (uint64_t)v16);
  if (*(_QWORD *)(a2 + 16)
    && (sub_23C0E4A98(),
        FilterItem.hash(into:)(),
        v3 = sub_23C0E4AC8(),
        v4 = -1 << *(_BYTE *)(a2 + 32),
        v5 = v3 & ~v4,
        ((*(_QWORD *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0))
  {
    v6 = ~v4;
    do
    {
      v7 = *(_QWORD *)(a2 + 48) + 48 * v5;
      v8 = *(_QWORD *)(v7 + 32);
      v9 = *(_BYTE *)(v7 + 40);
      v10 = *(_OWORD *)(v7 + 16);
      v13[0] = *(_OWORD *)v7;
      v13[1] = v10;
      v14 = v8;
      v15 = v9;
      _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v13);
      if ((v11 & 1) != 0)
        break;
      v5 = (v5 + 1) & v6;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  else
  {
    v11 = 0;
  }
  return v11 & 1;
}

BOOL sub_23C07A784(unsigned __int8 a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  sub_23C0E4A98();
  sub_23C0E4AA4();
  v4 = sub_23C0E4AC8();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == v3;
    if (v12 == v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_23C07A870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_23C0E4A98();
    sub_23C0E47A4();
    v6 = sub_23C0E4AC8();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_23C0E4A74() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_23C0E4A74() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_23C07A9A4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v5 + 89) = a5;
  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = a4;
  *(_BYTE *)(v5 + 88) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 40) = type metadata accessor for FilterAction();
  *(_QWORD *)(v5 + 48) = swift_task_alloc();
  sub_23C0E484C();
  *(_QWORD *)(v5 + 56) = sub_23C0E4840();
  *(_QWORD *)(v5 + 64) = sub_23C0E4834();
  *(_QWORD *)(v5 + 72) = v6;
  return swift_task_switch();
}

uint64_t sub_23C07AA40()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_BYTE *)(v0 + 89);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 88) & 1;
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 24) = v2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F430);
  *v5 = v0;
  v5[1] = sub_23C07AAEC;
  return sub_23C0E46D8();
}

uint64_t sub_23C07AAEC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc();
  sub_23C08FC60(v1, (uint64_t (*)(_QWORD))type metadata accessor for FilterAction);
  return swift_task_switch();
}

uint64_t sub_23C07AB4C()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23C07AB88(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 + 96) = a2;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a3;
  *(_QWORD *)(v3 + 32) = type metadata accessor for FilterAction();
  *(_QWORD *)(v3 + 40) = swift_task_alloc();
  sub_23C0E484C();
  *(_QWORD *)(v3 + 48) = sub_23C0E4840();
  *(_QWORD *)(v3 + 56) = sub_23C0E4834();
  *(_QWORD *)(v3 + 64) = v4;
  return swift_task_switch();
}

uint64_t sub_23C07AC1C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v3;
  uint64_t (*v4)(void);

  if (*(_BYTE *)(v0 + 96) == 1)
  {
    swift_storeEnumTagMultiPayload();
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 72) = v1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F430);
    *v1 = v0;
    v1[1] = sub_23C07ACE4;
    return sub_23C0E46D8();
  }
  else
  {
    v4 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)(v0 + 24) + 16) + *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16));
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v3;
    *v3 = v0;
    v3[1] = sub_23C07AD70;
    return v4();
  }
}

uint64_t sub_23C07ACE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);
  uint64_t v6;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 40);
  v6 = *v0;
  swift_task_dealloc();
  sub_23C08FC60(v2, (uint64_t (*)(_QWORD))type metadata accessor for FilterAction);
  v5 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)(v1 + 24) + 16) + *(_QWORD *)(*(_QWORD *)(v1 + 24) + 16));
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 80) = v3;
  *v3 = v6;
  v3[1] = sub_23C07AD70;
  return v5();
}

uint64_t sub_23C07AD70()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23C07ADD0()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23C07AE0C()
{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_23C07AE48(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, __int128 *a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char *v33;
  _QWORD v34[10];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _QWORD v48[7];
  _BYTE v49[88];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v38 = a5;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v34[5] = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v34[4] = (char *)v34 - v14;
  v15 = MEMORY[0x24BDAC7A8](v13);
  v34[3] = (char *)v34 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v34[2] = (char *)v34 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v34[1] = (char *)v34 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v34[0] = (char *)v34 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  MEMORY[0x24BDAC7A8](v23);
  v24 = *(_QWORD *)(a2 + 8);
  v34[6] = *(_QWORD *)a2;
  v34[7] = v24;
  v34[8] = *(_QWORD *)(a2 + 16);
  v35 = *(unsigned __int8 *)(a2 + 24);
  sub_23C06E7B4(a3, (uint64_t)v49, &qword_256B0F440);
  v25 = *a4;
  v41 = a4[1];
  v42 = v25;
  v26 = a4[2];
  v39 = a4[3];
  v40 = v26;
  v27 = *((_QWORD *)a4 + 8);
  v28 = *(_OWORD *)(v5 + 112);
  v55 = *(_OWORD *)(v5 + 96);
  v56 = v28;
  v57 = *(_OWORD *)(v5 + 128);
  v58 = *(_QWORD *)(v5 + 144);
  v29 = *(_OWORD *)(v5 + 48);
  v51 = *(_OWORD *)(v5 + 32);
  v52 = v29;
  v30 = *(_OWORD *)(v5 + 80);
  v53 = *(_OWORD *)(v5 + 64);
  v54 = v30;
  v31 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)&v49[72] = *(_OWORD *)v5;
  v50 = v31;
  v32 = *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for FilterSectionDescriptor() + 24) + 16);
  v43 = v42;
  v44 = v41;
  v45 = v40;
  v46 = v39;
  v47 = v27;
  *(_QWORD *)&v42 = v32;
  ((void (*)(_QWORD *__return_ptr))v54)(v48);
  *(_QWORD *)&v41 = v48[0];
  *(_QWORD *)&v39 = v48[1];
  v34[9] = v48[4];
  v36 = v48[5];
  v37 = v48[6];
  v33 = (char *)sub_23C07B0C0 + 4 * word_23C0E56CC[(_QWORD)v42];
  *(_QWORD *)&v40 = v48[3];
  __asm { BR              X9 }
}

uint64_t sub_23C07B0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t result;
  char *v26;

  *(_QWORD *)(v1 + 40) = v0;
  sub_23C08FCE0(v4, v2, 0);
  sub_23C08FD30((_QWORD *)(v1 + 376), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C07C42C);
  v8 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(unsigned int *)(v1 + 80);
  sub_23C077A18(v8);
  sub_23C07F54C(v6 - 240);
  v11 = v2;
  v12 = sub_23C088F6C(v4, v8, v7, v9, v10, v1 + 376);
  sub_23C08FD30((_QWORD *)(v1 + 376), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C07C920);
  sub_23C07CA24(v8);
  sub_23C08EC74(v6 - 240);
  sub_23C08FD78(v4, v11, 0);
  if (*(_QWORD *)(v12 + 16))
  {
    v13 = *(void (**)(_QWORD, uint64_t))(v6 - 240);
    v14 = *(_QWORD *)(v1 + 72);
    v15 = *(_QWORD *)(v1 + 144);
    *(_QWORD *)(v1 + 80) = v3;
    v16 = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 248) = v15;
    *(_QWORD *)(v1 + 256) = v16;
    *(_QWORD *)(v1 + 64) = v12;
    v18 = *(_QWORD *)(v1 + 88);
    v17 = *(_QWORD *)(v1 + 96);
    v19 = v15;
    v20 = *(_QWORD *)(v1 + 128);
    *(_QWORD *)(v1 + 264) = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 272) = v20;
    *(_QWORD *)(v1 + 280) = v14;
    *(_QWORD *)(v1 + 288) = v18;
    *(_QWORD *)(v1 + 296) = v17;
    v13(0, v1 + 248);
    v21 = v19;
    v22 = v16;
    v3 = *(_QWORD *)(v1 + 80);
    v12 = *(_QWORD *)(v1 + 64);
  }
  else
  {
    v23 = sub_23C0E3EB0();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v5, 1, 1, v23);
    v21 = *(_QWORD *)(v1 + 144);
    v22 = *(_QWORD *)(v1 + 112);
  }
  sub_23C08FDC8(v21, v22);
  v24 = *(_QWORD **)(v1 + 104);
  *v24 = 0x75636F4679646F62;
  v24[1] = 0xE900000000000073;
  result = sub_23C06E7B4(v5, (uint64_t)v24 + *(int *)(v3 + 20), &qword_256B0F048);
  v26 = (char *)v24 + *(int *)(v3 + 24);
  *(_QWORD *)v26 = v12;
  *((_QWORD *)v26 + 1) = 0;
  v26[16] = *(_QWORD *)(v1 + 160);
  return result;
}

uint64_t sub_23C07BDF4(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  _QWORD v30[2];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v44 = MEMORY[0x24BEE4AF8];
    sub_23C0808D0(0, v4, 0);
    v5 = v44;
    v7 = (__int128 *)(a3 + 48);
    while (1)
    {
      v8 = *((_QWORD *)v7 - 1);
      v10 = *((_QWORD *)v7 + 2);
      v9 = *((_QWORD *)v7 + 3);
      v11 = *((_QWORD *)v7 + 6);
      v30[0] = *((_QWORD *)v7 - 2);
      v30[1] = v8;
      v31 = *v7;
      v32 = v10;
      v33 = v9;
      v34 = v7[2];
      v35 = v11;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      a1(&v36, v30);
      if (v3)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = v36;
      v13 = v37;
      v14 = v38;
      v15 = v39;
      v16 = v40;
      v18 = v41;
      v17 = v42;
      v19 = v43;
      v21 = *(_QWORD *)(v5 + 16);
      v20 = *(_QWORD *)(v5 + 24);
      v44 = v5;
      if (v21 >= v20 >> 1)
      {
        v27 = v40;
        v28 = v37;
        v23 = v36;
        v26 = v42;
        v25 = v43;
        sub_23C0808D0((_QWORD *)(v20 > 1), v21 + 1, 1);
        v19 = v25;
        v17 = v26;
        v12 = v23;
        v16 = v27;
        v13 = v28;
        v5 = v44;
      }
      *(_QWORD *)(v5 + 16) = v21 + 1;
      v22 = v5 + 80 * v21;
      *(_QWORD *)(v22 + 32) = v12;
      *(_OWORD *)(v22 + 40) = v13;
      *(_QWORD *)(v22 + 56) = v14;
      *(_QWORD *)(v22 + 64) = v15;
      *(_OWORD *)(v22 + 72) = v16;
      *(_QWORD *)(v22 + 88) = v18;
      *(_QWORD *)(v22 + 96) = v17;
      *(_BYTE *)(v22 + 104) = v19;
      v7 = (__int128 *)((char *)v7 + 72);
      --v4;
      v3 = 0;
      if (!v4)
        return v5;
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v5;
}

uint64_t sub_23C07BFE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2[2] = sub_23C0E484C();
  v2[3] = sub_23C0E4840();
  v6 = (uint64_t (*)(void))(**(int **)(a2 + 128) + *(_QWORD *)(a2 + 128));
  v4 = (_QWORD *)swift_task_alloc();
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_23C07C05C;
  return v6();
}

uint64_t sub_23C07C05C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc();
  sub_23C0E4834();
  return swift_task_switch();
}

uint64_t sub_23C07C0E4()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23C07C118()
{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_23C07C14C(const void *a1, void *a2)
{
  __swift_memcpy273_8(a2, a1);
  return a2;
}

double sub_23C07C188(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 272) = 2;
  return result;
}

uint64_t sub_23C07C1BC(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 272) <= 1u)
    return *(unsigned __int8 *)(a1 + 272);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_23C07C1D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a35 == 1)
  {
    sub_23C077A18(result);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C07C42C(a14);
    sub_23C07C4C4(a23);
    swift_bridgeObjectRetain();
  }
  else
  {
    if (a35)
      return result;
    sub_23C07C42C(result);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C07C4C4(a24);
  }
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C07C42C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C07C4C4(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C07C534(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 296);
  v26 = *(_QWORD *)(a1 + 288);
  v27 = *(_QWORD *)(a1 + 280);
  v3 = *(_QWORD *)(a1 + 304);
  v4 = *(_QWORD *)(a1 + 312);
  v5 = *(_QWORD *)(a1 + 320);
  v6 = *(_QWORD *)(a1 + 328);
  v7 = *(_QWORD *)(a1 + 336);
  v24 = *(_OWORD *)(a1 + 360);
  v25 = *(_OWORD *)(a1 + 344);
  v22 = *(_OWORD *)(a1 + 392);
  v23 = *(_OWORD *)(a1 + 376);
  v20 = *(_OWORD *)(a1 + 424);
  v21 = *(_OWORD *)(a1 + 408);
  v18 = *(_OWORD *)(a1 + 456);
  v19 = *(_OWORD *)(a1 + 440);
  v17 = *(_OWORD *)(a1 + 472);
  v15 = *(_OWORD *)(a1 + 504);
  v16 = *(_OWORD *)(a1 + 488);
  v14 = *(_OWORD *)(a1 + 520);
  v8 = *(_QWORD *)(a1 + 536);
  v9 = *(_QWORD *)(a1 + 544);
  v10 = *(_BYTE *)(a1 + 552);
  v12 = *(_OWORD *)(a1 + 224);
  v13 = *(_OWORD *)(a1 + 240);
  sub_23C07C6D0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v12,
    *((uint64_t *)&v12 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_BYTE *)(a1 + 272));
  sub_23C07C6D0(v27, v26, v2, v3, v4, v5, v6, v7, v25, *((uint64_t *)&v25 + 1), v24, *((uint64_t *)&v24 + 1), v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20,
    *((uint64_t *)&v20 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v8,
    v9,
    v10);
  return a1;
}

uint64_t sub_23C07C6D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a35 == 1)
  {
    sub_23C07CA24(result);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C07C920(a14);
    sub_23C07C9B8(a23);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (a35)
      return result;
    sub_23C07C920(result);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C07C9B8(a24);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C07C920(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C07C9B8(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C07CA24(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double sub_23C07CA50(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 2;
  return result;
}

uint64_t sub_23C07CAAC(uint64_t a1, uint64_t a2)
{
  __swift_memcpy41_8(a2, a1);
  return a2;
}

unint64_t sub_23C07CAE8()
{
  unint64_t result;

  result = qword_256B0F320;
  if (!qword_256B0F320)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E57B8, &type metadata for FilterFeature.TaskIdentifier);
    atomic_store(result, &qword_256B0F320);
  }
  return result;
}

uint64_t sub_23C07CB2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_21;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v25)
      goto LABEL_29;
    v12 = *(_QWORD *)(v24 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v25)
        goto LABEL_29;
      v12 = *(_QWORD *)(v24 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v25)
          goto LABEL_29;
        v12 = *(_QWORD *)(v24 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v25)
            goto LABEL_29;
          v12 = *(_QWORD *)(v24 + 8 * v8);
          if (!v12)
          {
            v13 = v11 + 4;
            if (v13 >= v25)
            {
LABEL_29:
              swift_bridgeObjectRelease();
              result = swift_release();
              *(_QWORD *)(a4 + 64) = 0;
              *(_OWORD *)(a4 + 32) = 0u;
              *(_OWORD *)(a4 + 48) = 0u;
              *(_OWORD *)a4 = 0u;
              *(_OWORD *)(a4 + 16) = 0u;
              return result;
            }
            v12 = *(_QWORD *)(v24 + 8 * v13);
            v8 = v13;
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_20:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_21:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 72 * v10);
    v15 = *v14;
    v16 = v14[1];
    v17 = v14[3];
    v19 = v14[4];
    v18 = v14[5];
    v20 = v14[7];
    v26 = v14[6];
    v27 = v14[2];
    v21 = v14[8];
    if (v19 == a2 && v18 == a3)
    {
      v19 = a2;
      v18 = a3;
LABEL_28:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      result = swift_release();
      *(_QWORD *)a4 = v15;
      *(_QWORD *)(a4 + 8) = v16;
      *(_QWORD *)(a4 + 16) = v27;
      *(_QWORD *)(a4 + 24) = v17;
      *(_QWORD *)(a4 + 32) = v19;
      *(_QWORD *)(a4 + 40) = v18;
      *(_QWORD *)(a4 + 48) = v26;
      *(_QWORD *)(a4 + 56) = v20;
      *(_QWORD *)(a4 + 64) = v21;
      return result;
    }
    result = sub_23C0E4A74();
    if ((result & 1) != 0)
      goto LABEL_28;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v25)
      goto LABEL_29;
    v12 = *(_QWORD *)(v24 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
  return result;
}

double sub_23C07CD90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_23C07CAAC(a2, (uint64_t)&v16);
  v14 = (_QWORD *)(a1 + 56);
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 56);
  v15 = (unint64_t)(v5 + 63) >> 6;
  v17 = a1;
  swift_bridgeObjectRetain();
  if (v7)
  {
    v8 = __clz(__rbit64(v7));
    goto LABEL_20;
  }
  if (v15 > 1)
  {
    v9 = *(_QWORD *)(a1 + 64);
    v10 = 1;
    if (v9)
      goto LABEL_19;
    v10 = 2;
    if (v15 <= 2)
      goto LABEL_21;
    v9 = v14[2];
    if (v9)
      goto LABEL_19;
    v10 = 3;
    if (v15 <= 3)
      goto LABEL_21;
    v9 = v14[3];
    if (v9)
      goto LABEL_19;
    v10 = 4;
    if (v15 <= 4)
      goto LABEL_21;
    v9 = v14[4];
    if (v9)
    {
LABEL_19:
      v8 = __clz(__rbit64(v9)) + (v10 << 6);
LABEL_20:
      __asm { BR              X8 }
    }
    v11 = 5;
    if (v15 > 5)
    {
      v9 = v14[5];
      if (v9)
      {
        v10 = 5;
        goto LABEL_19;
      }
      while (1)
      {
        v10 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          JUMPOUT(0x23C07D1CCLL);
        }
        if (v10 >= v15)
          break;
        v9 = v14[v10];
        ++v11;
        if (v9)
          goto LABEL_19;
      }
    }
  }
LABEL_21:
  swift_release();
  sub_23C081C58(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682A8);
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = -1;
  return result;
}

uint64_t sub_23C07D1F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  int64_t v25;

  v24 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_21;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v25)
      goto LABEL_29;
    v12 = *(_QWORD *)(v24 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v25)
        goto LABEL_29;
      v12 = *(_QWORD *)(v24 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v25)
          goto LABEL_29;
        v12 = *(_QWORD *)(v24 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v25)
            goto LABEL_29;
          v12 = *(_QWORD *)(v24 + 8 * v8);
          if (!v12)
          {
            v13 = v11 + 4;
            if (v13 >= v25)
            {
LABEL_29:
              swift_bridgeObjectRelease();
              result = swift_release();
              *(_QWORD *)(a4 + 48) = 0;
              *(_OWORD *)(a4 + 16) = 0u;
              *(_OWORD *)(a4 + 32) = 0u;
              *(_OWORD *)a4 = 0u;
              return result;
            }
            v12 = *(_QWORD *)(v24 + 8 * v13);
            v8 = v13;
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_20:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_21:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 56 * v10);
    v16 = *v14;
    v15 = v14[1];
    v17 = v14[2];
    v18 = v14[3];
    v19 = v14[4];
    v20 = v14[5];
    v21 = v14[6];
    if (v18 == a2 && v19 == a3)
    {
      v18 = a2;
      v19 = a3;
LABEL_28:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      result = swift_release();
      *(_QWORD *)a4 = v16;
      *(_QWORD *)(a4 + 8) = v15;
      *(_QWORD *)(a4 + 16) = v17;
      *(_QWORD *)(a4 + 24) = v18;
      *(_QWORD *)(a4 + 32) = v19;
      *(_QWORD *)(a4 + 40) = v20;
      *(_QWORD *)(a4 + 48) = v21;
      return result;
    }
    result = sub_23C0E4A74();
    if ((result & 1) != 0)
      goto LABEL_28;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v25)
      goto LABEL_29;
    v12 = *(_QWORD *)(v24 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_23C07D42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v25 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_21;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v11 >= v25)
      goto LABEL_29;
    v12 = *(_QWORD *)(v24 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v25)
        goto LABEL_29;
      v12 = *(_QWORD *)(v24 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v25)
          goto LABEL_29;
        v12 = *(_QWORD *)(v24 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v25)
            goto LABEL_29;
          v12 = *(_QWORD *)(v24 + 8 * v8);
          if (!v12)
          {
            v13 = v11 + 4;
            if (v13 >= v25)
            {
LABEL_29:
              swift_bridgeObjectRelease();
              result = swift_release();
              *(_QWORD *)(a4 + 64) = 0;
              *(_OWORD *)(a4 + 32) = 0u;
              *(_OWORD *)(a4 + 48) = 0u;
              *(_OWORD *)a4 = 0u;
              *(_OWORD *)(a4 + 16) = 0u;
              return result;
            }
            v12 = *(_QWORD *)(v24 + 8 * v13);
            v8 = v13;
            if (!v12)
              break;
          }
        }
      }
    }
LABEL_20:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_21:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 72 * v10);
    v15 = *v14;
    v17 = v14[2];
    v16 = v14[3];
    v19 = v14[4];
    v18 = v14[5];
    v20 = v14[6];
    v26 = v14[7];
    v27 = v14[1];
    v21 = v14[8];
    if (v16 == a2 && v19 == a3)
    {
      v16 = a2;
      v19 = a3;
LABEL_28:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      result = swift_release();
      *(_QWORD *)a4 = v15;
      *(_QWORD *)(a4 + 8) = v27;
      *(_QWORD *)(a4 + 16) = v17;
      *(_QWORD *)(a4 + 24) = v16;
      *(_QWORD *)(a4 + 32) = v19;
      *(_QWORD *)(a4 + 40) = v18;
      *(_QWORD *)(a4 + 48) = v20;
      *(_QWORD *)(a4 + 56) = v26;
      *(_QWORD *)(a4 + 64) = v21;
      return result;
    }
    result = sub_23C0E4A74();
    if ((result & 1) != 0)
      goto LABEL_28;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v25)
      goto LABEL_29;
    v12 = *(_QWORD *)(v24 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_23C07D688(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  __int128 *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[38];
  _OWORD v41[4];
  uint64_t v42;
  _QWORD v43[7];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v40[22] = a6;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v40[12] = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v40[2] = (char *)v40 - v16;
  v17 = MEMORY[0x24BDAC7A8](v15);
  v40[5] = (char *)v40 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v40[11] = (char *)v40 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v40[10] = (char *)v40 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v40[9] = (char *)v40 - v24;
  v25 = MEMORY[0x24BDAC7A8](v23);
  v40[8] = (char *)v40 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v40[7] = (char *)v40 - v27;
  v28 = *a2;
  v40[15] = a2[1];
  v40[16] = v28;
  v30 = a2[3];
  v29 = a2[4];
  v31 = a2[7];
  v40[20] = *a3;
  v40[21] = a3[2];
  v40[19] = *a4;
  v40[6] = a4[1];
  v40[1] = a4[2];
  v32 = a4[3];
  v40[13] = v30;
  v40[14] = v32;
  v40[3] = a4[7];
  v40[4] = v31;
  v33 = *(_QWORD *)(a5 + 64);
  v34 = v6[7];
  v50 = v6[6];
  v51 = v34;
  v52 = v6[8];
  v53 = *((_QWORD *)v6 + 18);
  v35 = v6[3];
  v46 = v6[2];
  v47 = v35;
  v36 = v6[5];
  v48 = v6[4];
  v49 = v36;
  v37 = v6[1];
  v44 = *v6;
  v45 = v37;
  v40[17] = *((_QWORD *)&v44 + 1);
  v38 = *(_OWORD *)(a5 + 16);
  v41[0] = *(_OWORD *)a5;
  v41[1] = v38;
  v39 = *(_OWORD *)(a5 + 48);
  v41[2] = *(_OWORD *)(a5 + 32);
  v41[3] = v39;
  v42 = v33;
  ((void (*)(_QWORD *__return_ptr, uint64_t, uint64_t, _OWORD *))v49)(v43, a1, v29, v41);
  v40[23] = v43[1];
  v40[24] = v43[2];
  v40[25] = v43[0];
  v40[26] = v43[5];
  v40[27] = v43[3];
  __asm { BR              X10 }
}

uint64_t sub_23C07D8D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;

  v0[15] = v2;
  v0[18] = v1;
  v5 = v0[16];
  swift_bridgeObjectRetain_n();
  v6 = sub_23C0806B4(v5, &qword_256B0F4F0);
  swift_bridgeObjectRelease();
  v0[38] = v6;
  sub_23C081F24(v0 + 38, (uint64_t (*)(uint64_t))sub_23C0874A8, (uint64_t)&type metadata for BodyFocus, (uint64_t (*)(_QWORD *, uint64_t))sub_23C083DC4);
  swift_bridgeObjectRelease();
  v7 = v0[38];
  v8 = v0[21];
  v9 = v0[19];
  if (v0[20])
    swift_bridgeObjectRetain();
  else
    v8 = 0;
  v10 = v0[27];
  v11 = v0[24];
  if (v9)
    swift_bridgeObjectRetain();
  sub_23C07F54C(v4 - 240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = sub_23C08AFD8(v7, v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C08EC74(v4 - 240);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(_QWORD *)(v12 + 16))
  {
    v13 = v0[25];
    v14 = v0[23];
    v0[38] = v13;
    v0[39] = v14;
    v0[40] = v11;
    v0[41] = v10;
    v0[42] = v3;
    v0[21] = v12;
    v15 = v0[18];
    v0[43] = v0[26];
    v0[44] = v15;
    v16 = v0[7];
    ((void (*)(_QWORD, _QWORD *))v0[15])(0, v0 + 38);
    v17 = v13;
    v18 = v14;
    v12 = v0[21];
  }
  else
  {
    v19 = sub_23C0E3EB0();
    v16 = v0[7];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v16, 1, 1, v19);
    v17 = v0[25];
    v18 = v0[23];
  }
  sub_23C08FDC8(v17, v18);
  v20 = (_QWORD *)v0[22];
  *v20 = 0x75636F4679646F62;
  v20[1] = 0xE900000000000073;
  v21 = type metadata accessor for FilterSectionDescriptor();
  sub_23C06E7B4(v16, (uint64_t)v20 + *(int *)(v21 + 20), &qword_256B0F048);
  v22 = (char *)v20 + *(int *)(v21 + 24);
  *(_QWORD *)v22 = v12;
  *((_QWORD *)v22 + 1) = 0;
  v22[16] = 0;
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 0, 1, v21);
}

uint64_t sub_23C07EE98(void (*a1)(_OWORD *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v23;
  __int128 v24;
  char *v25;
  _OWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  unsigned __int8 v32;
  uint64_t v33;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3)
    return MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRetain();
  v5 = (unsigned __int8 *)(a3 + 72);
  v25 = (char *)MEMORY[0x24BEE4AF8];
  do
  {
    v7 = *((_QWORD *)v5 - 5);
    v8 = *((_QWORD *)v5 - 4);
    v9 = *((_QWORD *)v5 - 3);
    v10 = *((_QWORD *)v5 - 2);
    v11 = *((_QWORD *)v5 - 1);
    v12 = *v5;
    v31[0] = v7;
    v31[1] = v8;
    v31[2] = v9;
    v31[3] = v10;
    v31[4] = v11;
    v32 = v12;
    sub_23C0682C0(v7, v8, v9, v10, v11, v12);
    v13 = v33;
    a1(v26, v31);
    if (v13)
    {
      sub_23C0682A8(v7, v8, v9, v10, v11, v12);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v33 = 0;
    sub_23C0682A8(v7, v8, v9, v10, v11, v12);
    v14 = v30;
    if (v30)
    {
      v23 = v26[1];
      v24 = v26[0];
      v16 = v27;
      v15 = v28;
      v17 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
        v18 = v25;
      else
        v18 = sub_23C0816D4(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
      v20 = *((_QWORD *)v18 + 2);
      v19 = *((_QWORD *)v18 + 3);
      if (v20 >= v19 >> 1)
        v18 = sub_23C0816D4((char *)(v19 > 1), v20 + 1, 1, v18);
      *((_QWORD *)v18 + 2) = v20 + 1;
      v25 = v18;
      v6 = &v18[64 * v20];
      *((_OWORD *)v6 + 2) = v24;
      *((_OWORD *)v6 + 3) = v23;
      *((_QWORD *)v6 + 8) = v16;
      v6[72] = v15;
      *((_QWORD *)v6 + 10) = v17;
      *((_QWORD *)v6 + 11) = v14;
    }
    v5 += 48;
    --v3;
  }
  while (v3);
  swift_bridgeObjectRelease();
  return (uint64_t)v25;
}

uint64_t sub_23C07F080(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v5 + 89) = a5;
  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = a4;
  *(_BYTE *)(v5 + 88) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 40) = type metadata accessor for FilterAction();
  *(_QWORD *)(v5 + 48) = swift_task_alloc();
  sub_23C0E484C();
  *(_QWORD *)(v5 + 56) = sub_23C0E4840();
  *(_QWORD *)(v5 + 64) = sub_23C0E4834();
  *(_QWORD *)(v5 + 72) = v6;
  return swift_task_switch();
}

uint64_t sub_23C07F11C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_BYTE *)(v0 + 89);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_BYTE *)(v0 + 88) & 1;
  *(_QWORD *)v1 = *(_QWORD *)(v0 + 24);
  *(_BYTE *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v3;
  *(_BYTE *)(v1 + 24) = v2;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F430);
  *v5 = v0;
  v5[1] = sub_23C07F1C8;
  return sub_23C0E46D8();
}

uint64_t sub_23C07F1C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc();
  sub_23C08FC60(v1, (uint64_t (*)(_QWORD))type metadata accessor for FilterAction);
  return swift_task_switch();
}

uint64_t sub_23C07F228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  int *v6;
  _QWORD *v7;
  int *v9;

  v3[17] = a1;
  v3[18] = type metadata accessor for FilterAction();
  v3[19] = swift_task_alloc();
  v3[20] = sub_23C0E484C();
  v3[21] = sub_23C0E4840();
  v6 = *(int **)(a2 + 112);
  sub_23C07CAAC(a3, (uint64_t)(v3 + 11));
  v9 = (int *)((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  v3[22] = v7;
  *v7 = v3;
  v7[1] = sub_23C07F2F8;
  return ((uint64_t (*)(_QWORD *, _QWORD *))v9)(v3 + 2, v3 + 11);
}

uint64_t sub_23C07F2F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_23C0E4834();
  }
  else
  {
    *(_QWORD *)(v2 + 192) = sub_23C0E4834();
    *(_QWORD *)(v2 + 200) = v3;
  }
  return swift_task_switch();
}

uint64_t sub_23C07F394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  v5 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)v1 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  *(_OWORD *)(v1 + 48) = v5;
  *(_QWORD *)(v1 + 64) = v2;
  swift_storeEnumTagMultiPayload();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 208) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F430);
  *v6 = v0;
  v6[1] = sub_23C07A5B8;
  return sub_23C0E46D8();
}

uint64_t sub_23C07F41C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_23C0682A8(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_BYTE *)(v0 + 208));
  return swift_deallocObject();
}

uint64_t sub_23C07F4A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23C07F504;
  return sub_23C07F228(a1, v1 + 16, v1 + 168);
}

uint64_t sub_23C07F504()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23C07F54C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  swift_retain();
  swift_retain();
  sub_23C077A18(v2);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

int *FilterFeature.dispose(localState:sharedState:)(void *a1)
{
  int *result;
  _BYTE v3[280];
  _BYTE v4[280];

  result = (int *)type metadata accessor for FilterState();
  if (*((_BYTE *)a1 + result[9]) == 1)
  {
    sub_23C07C188((uint64_t)v3);
    sub_23C07C14C(a1, v4);
    sub_23C08F06C((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23C07C6D0);
    return (int *)sub_23C07C14C(v3, a1);
  }
  return result;
}

uint64_t sub_23C07F67C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  char v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[6];
  uint64_t v15[6];

  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0E48E8();
  if (!a3)
  {
    result = swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  v8 = sub_23C07A870(v15[0], v15[1], a3);
  result = swift_bridgeObjectRelease();
  if ((v8 & 1) == 0)
  {
LABEL_8:
    v10 = 0;
    goto LABEL_9;
  }
  v10 = 1;
  if (a2)
  {
    v11 = a1[3];
    v12 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 8))(v14, v11, v12);
    sub_23C07CAAC((uint64_t)v14, (uint64_t)v15);
    v13 = sub_23C07A698((uint64_t)v15, a2);
    result = sub_23C081C58((uint64_t)v15, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682A8);
    if ((v13 & 1) != 0)
      v10 = 2;
    else
      v10 = 1;
  }
LABEL_9:
  *a4 = v10;
  return result;
}

char *sub_23C07F788(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  char *result;
  int64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;

  v22 = a1 + 56;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 56);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = (char *)swift_bridgeObjectRetain();
  v7 = 0;
  v8 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v4)
    {
      v9 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v10 = v9 | (v7 << 6);
    }
    else
    {
      v11 = v7 + 1;
      if (__OFADD__(v7, 1))
        goto LABEL_42;
      if (v11 >= v5)
      {
LABEL_37:
        swift_release();
        return v8;
      }
      v12 = *(_QWORD *)(v22 + 8 * v11);
      ++v7;
      if (!v12)
      {
        v7 = v11 + 1;
        if (v11 + 1 >= v5)
          goto LABEL_37;
        v12 = *(_QWORD *)(v22 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 2;
          if (v11 + 2 >= v5)
            goto LABEL_37;
          v12 = *(_QWORD *)(v22 + 8 * v7);
          if (!v12)
          {
            v7 = v11 + 3;
            if (v11 + 3 >= v5)
              goto LABEL_37;
            v12 = *(_QWORD *)(v22 + 8 * v7);
            if (!v12)
            {
              v13 = v11 + 4;
              if (v13 >= v5)
                goto LABEL_37;
              v12 = *(_QWORD *)(v22 + 8 * v13);
              if (!v12)
              {
                while (1)
                {
                  v7 = v13 + 1;
                  if (__OFADD__(v13, 1))
                    goto LABEL_43;
                  if (v7 >= v5)
                    goto LABEL_37;
                  v12 = *(_QWORD *)(v22 + 8 * v7);
                  ++v13;
                  if (v12)
                    goto LABEL_23;
                }
              }
              v7 = v13;
            }
          }
        }
      }
LABEL_23:
      v4 = (v12 - 1) & v12;
      v10 = __clz(__rbit64(v12)) + (v7 << 6);
    }
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72 * v10 + 64);
    v15 = *(_QWORD *)(v14 + 16);
    v16 = *((_QWORD *)v8 + 2);
    v17 = v16 + v15;
    if (__OFADD__(v16, v15))
      break;
    swift_bridgeObjectRetain();
    result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if ((_DWORD)result && v17 <= *((_QWORD *)v8 + 3) >> 1)
    {
      if (!*(_QWORD *)(v14 + 16))
        goto LABEL_4;
    }
    else
    {
      if (v16 <= v17)
        v18 = v16 + v15;
      else
        v18 = v16;
      result = sub_23C081C90(result, v18, 1, v8);
      v8 = result;
      if (!*(_QWORD *)(v14 + 16))
      {
LABEL_4:
        if (v15)
          goto LABEL_39;
        goto LABEL_5;
      }
    }
    if ((*((_QWORD *)v8 + 3) >> 1) - *((_QWORD *)v8 + 2) < v15)
      goto LABEL_40;
    result = (char *)swift_arrayInitWithCopy();
    if (v15)
    {
      v19 = *((_QWORD *)v8 + 2);
      v20 = __OFADD__(v19, v15);
      v21 = v19 + v15;
      if (v20)
        goto LABEL_41;
      *((_QWORD *)v8 + 2) = v21;
    }
LABEL_5:
    result = (char *)swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
  return result;
}

void sub_23C07F9D4(uint64_t a1, uint64_t a2)
{
  _BYTE v2[64];

  sub_23C07CAAC(a2, (uint64_t)v2);
  __asm { BR              X10 }
}

void sub_23C07FA4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[72];
  _OWORD v21[4];
  uint64_t v22;
  _QWORD v23[5];
  char v24;
  uint64_t v25;

  if (!(_DWORD)v8)
    goto LABEL_4;
  v9 = *(_OWORD *)(v1 + 112);
  v3[6] = *(_OWORD *)(v1 + 96);
  v3[7] = v9;
  v3[8] = *(_OWORD *)(v1 + 128);
  v25 = *(_QWORD *)(v1 + 144);
  v10 = *(_OWORD *)(v1 + 48);
  v3[2] = *(_OWORD *)(v1 + 32);
  v3[3] = v10;
  v11 = *(_OWORD *)(v1 + 80);
  v3[4] = *(_OWORD *)(v1 + 64);
  v3[5] = v11;
  v12 = *(_OWORD *)(v1 + 16);
  *v3 = *(_OWORD *)v1;
  v3[1] = v12;
  v23[0] = v19;
  v23[1] = v4;
  v23[2] = v5;
  v23[3] = v6;
  v23[4] = v7;
  v24 = v8;
  v13 = *(_OWORD *)(v0 + 48);
  v21[2] = *(_OWORD *)(v0 + 32);
  v21[3] = v13;
  v22 = *(_QWORD *)(v0 + 64);
  v14 = *(_OWORD *)(v0 + 16);
  v21[0] = *(_OWORD *)v0;
  v21[1] = v14;
  sub_23C06E7B4(v17, (uint64_t)v20, &qword_256B0F438);
  sub_23C07FBA0((uint64_t)v23, (uint64_t)v21, (uint64_t)v20, v18);
  if (v16)
  {
    *v2 = v19;
    v2[1] = v4;
    v2[2] = v5;
    v2[3] = v6;
    v2[4] = v7;
    v2[5] = v8;
    v2[6] = v15;
    v2[7] = v16;
    sub_23C0682C0(v19, v4, v5, v6, v7, v8);
  }
  else
  {
LABEL_4:
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
}

void sub_23C07FBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[7];
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;

  v12 = a4;
  v10 = sub_23C0E3ED4();
  v9[6] = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v11 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v6);
  v13 = (char *)v9 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C0E4768();
  MEMORY[0x24BDAC7A8](v8);
  __asm { BR              X10 }
}

uint64_t sub_23C07FCE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_23C0682C0(v6, v5, v7, v8, a5, 0);
  v10 = swift_bridgeObjectRetain();
  sub_23C07D1F0(v10, v6, v5, v9 - 176);
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v9 - 176);
  if (!v11)
    return 0;
  v12 = *(_QWORD *)(v9 - 136);
  swift_bridgeObjectRetain();
  sub_23C08FE70(v11);
  return v12;
}

int *sub_23C080364(uint64_t a1, void *a2)
{
  int *result;
  _BYTE v4[280];
  _BYTE v5[280];

  result = (int *)type metadata accessor for FilterState();
  if (*((_BYTE *)a2 + result[9]) == 1)
  {
    sub_23C07C188((uint64_t)v4);
    sub_23C07C14C(a2, v5);
    sub_23C08F06C((uint64_t)v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23C07C6D0);
    return (int *)sub_23C07C14C(v4, a2);
  }
  return result;
}

_QWORD *sub_23C0803D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F358);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 48);
  v5 = sub_23C0864D4((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_23C08FEBC();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

_QWORD *sub_23C0804C8(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, _QWORD *, uint64_t, uint64_t))
{
  uint64_t v3;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v6 = (_QWORD *)swift_allocObject();
  v7 = _swift_stdlib_malloc_size(v6);
  v6[2] = v3;
  v6[3] = 2 * ((uint64_t)(v7 - 32) / 72);
  v8 = a3(&v10, v6 + 4, v3, a1);
  swift_bridgeObjectRetain();
  sub_23C08FEBC();
  if (v8 != v3)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v6;
}

_QWORD *sub_23C0805C0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = v2;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 72);
  v6 = sub_23C086998(&v8, (uint64_t)(v4 + 4), v2, a1);
  swift_bridgeObjectRetain();
  sub_23C08FEBC();
  if (v6 != (_QWORD *)v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v4;
}

_QWORD *sub_23C0806B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = v2;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 56);
  v6 = sub_23C087118(&v8, (uint64_t)(v4 + 4), v2, a1);
  swift_bridgeObjectRetain();
  sub_23C08FEBC();
  if (v6 != (_QWORD *)v2)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v4;
}

_QWORD *sub_23C0807A8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F4F8);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  v5 = sub_23C086F04((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_23C08FEBC();
  if (v5 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

char *sub_23C080898(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_23C080B60(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_23C0808B4(size_t a1, int64_t a2, char a3)
{
  size_t *v3;
  size_t result;

  result = sub_23C080C48(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

_QWORD *sub_23C0808D0(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_23C080DBC(a1, a2, a3, *v3, &qword_256B0F4B8, &qword_256B0F4C0);
  *v3 = result;
  return result;
}

_QWORD *sub_23C0808FC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_23C081024(a1, a2, a3, *v3, &qword_256B0F4A8, &qword_256B0F4B0);
  *v3 = result;
  return result;
}

_QWORD *sub_23C080928(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_23C080DBC(a1, a2, a3, *v3, &qword_256B0F498, &qword_256B0F4A0);
  *v3 = result;
  return result;
}

_QWORD *sub_23C080954(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_23C081024(a1, a2, a3, *v3, &qword_256B0F488, &qword_256B0F490);
  *v3 = result;
  return result;
}

_QWORD *sub_23C080980(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_23C080DBC(a1, a2, a3, *v3, &qword_256B0F478, &qword_256B0F480);
  *v3 = result;
  return result;
}

_QWORD *sub_23C0809AC(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_23C081024(a1, a2, a3, *v3, &qword_256B0F468, &qword_256B0F470);
  *v3 = result;
  return result;
}

_QWORD *sub_23C0809D8(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_23C080EF0(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

_QWORD *sub_23C0809F4(_QWORD *a1, int64_t a2, char a3)
{
  _QWORD **v3;
  _QWORD *result;

  result = sub_23C081024(a1, a2, a3, *v3, &qword_256B0F448, &qword_256B0F450);
  *v3 = result;
  return result;
}

char *sub_23C080A20(char *a1, int64_t a2, char a3)
{
  char **v3;
  char *result;

  result = sub_23C081264(a1, a2, a3, *v3, &qword_256B0F520);
  *v3 = result;
  return result;
}

char *sub_23C080A4C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F358);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_23C080B60(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F558);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

size_t sub_23C080C48(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F4C8);
  v10 = *(_QWORD *)(type metadata accessor for FilterSectionDescriptor() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for FilterSectionDescriptor() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v13;
}

_QWORD *sub_23C080DBC(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  size_t v14;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v13[2] = v11;
    v13[3] = 2 * ((uint64_t)(v14 - 32) / 80);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[10 * v11 + 4])
      memmove(v13 + 4, a4 + 4, 80 * v11);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v13;
}

_QWORD *sub_23C080EF0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F458);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4])
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F460);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

_QWORD *sub_23C081024(_QWORD *result, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;

  v8 = (char)result;
  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 + 31;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 6);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  if ((v8 & 1) != 0)
  {
    if (v13 != a4 || v13 + 4 >= &a4[8 * v11 + 4])
      memmove(v13 + 4, a4 + 4, v11 << 6);
    a4[2] = 0;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v13;
}

char *sub_23C081148(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F528);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_23C081264(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 72);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[72 * v9])
      memmove(v13, v14, 72 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v11;
}

char *sub_23C081384(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F508);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8])
      memmove(v12, v13, 72 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_23C0814A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F4F8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

char *sub_23C0815B4(char *result, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  char v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v6 = (char)result;
  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v11 = (char *)swift_allocObject();
    v12 = _swift_stdlib_malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    v11 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v6 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9])
      memmove(v13, v14, 56 * v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v11;
}

char *sub_23C0816D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F4D0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 + 31;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8])
      memmove(v13, v14, v8 << 6);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23C0817D4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F358);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8])
      memmove(v12, v13, 48 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

size_t sub_23C0818E8(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F4C8);
  v10 = *(_QWORD *)(type metadata accessor for FilterSectionDescriptor() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(type metadata accessor for FilterSectionDescriptor() - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

size_t sub_23C081A5C(size_t result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F578);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F310) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_29;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F310) - 8);
  if ((v5 & 1) != 0)
  {
    if (v13 < a4
      || (v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80),
          (char *)v13 + v16 >= (char *)a4 + v16 + *(_QWORD *)(v15 + 72) * v8))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (size_t)v13;
}

uint64_t sub_23C081BDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23C0900DC;
  return sub_23C07F080(a1, v4, v5, v6, v7);
}

uint64_t sub_23C081C58(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  return a1;
}

char *sub_23C081C90(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F4D8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8])
      memmove(v12, v13, 56 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23C081DAC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F428);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_23C081EAC(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(_QWORD *))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v6 = a2(v6);
  v7 = *(_QWORD *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t sub_23C081F24(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t (*a4)(_QWORD *, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v8 = a2(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v11[0] = v8 + 32;
  v11[1] = v9;
  result = a4(v11, a3);
  *a1 = v8;
  return result;
}

uint64_t sub_23C081FA4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;

  v3 = a1[1];
  result = sub_23C0E4A5C();
  if (result < v3)
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_101;
    v75 = a1;
    if (v3 <= 1)
    {
      v8 = MEMORY[0x24BEE4AF8];
      v80 = (char *)(MEMORY[0x24BEE4AF8] + 32);
      if (v3 != 1)
      {
        v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
        v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_68:
        v67 = v12;
        v76 = v8;
        if (v13 >= 2)
        {
          v68 = *v75;
          do
          {
            v69 = v13 - 2;
            if (v13 < 2)
              goto LABEL_97;
            if (!v68)
            {
              __break(1u);
              JUMPOUT(0x23C082750);
            }
            v70 = v67;
            v71 = *(_QWORD *)&v67[16 * v69 + 32];
            v72 = *(_QWORD *)&v67[16 * v13 + 24];
            sub_23C084FF4((char *)(v68 + 48 * v71), (char *)(v68 + 48 * *(_QWORD *)&v67[16 * v13 + 16]), v68 + 48 * v72, v80);
            if (v1)
              break;
            if (v72 < v71)
              goto LABEL_98;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v70 = sub_23C086044((uint64_t)v70);
            if (v69 >= *((_QWORD *)v70 + 2))
              goto LABEL_99;
            v73 = &v70[16 * v69 + 32];
            *(_QWORD *)v73 = v71;
            *((_QWORD *)v73 + 1) = v72;
            v74 = *((_QWORD *)v70 + 2);
            if (v13 > v74)
              goto LABEL_100;
            memmove(&v70[16 * v13 + 16], &v70[16 * v13 + 32], 16 * (v74 - v13));
            v67 = v70;
            *((_QWORD *)v70 + 2) = v74 - 1;
            v13 = v74 - 1;
          }
          while (v74 > 2);
        }
LABEL_65:
        swift_bridgeObjectRelease();
        *(_QWORD *)(v76 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      v76 = MEMORY[0x24BEE4AF8];
    }
    else
    {
      v6 = v5 >> 1;
      v7 = sub_23C0E4804();
      *(_QWORD *)(v7 + 16) = v6;
      v76 = v7;
      v80 = (char *)(v7 + 32);
    }
    v9 = 0;
    v10 = *a1;
    v11 = *a1 + 40;
    v12 = (char *)MEMORY[0x24BEE4AF8];
    v78 = v3;
    v79 = v10;
    v77 = v11;
    do
    {
      v14 = v9++;
      if (v9 < v3)
        __asm { BR              X10 }
      if (v9 < v14)
        goto LABEL_96;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v12 = sub_23C085F4C(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
      v16 = *((_QWORD *)v12 + 2);
      v15 = *((_QWORD *)v12 + 3);
      v13 = v16 + 1;
      v17 = v79;
      if (v16 >= v15 >> 1)
      {
        v66 = sub_23C085F4C((char *)(v15 > 1), v16 + 1, 1, v12);
        v17 = v79;
        v12 = v66;
      }
      *((_QWORD *)v12 + 2) = v13;
      v18 = v12 + 32;
      v19 = &v12[16 * v16 + 32];
      *(_QWORD *)v19 = v14;
      *((_QWORD *)v19 + 1) = v9;
      if (v16)
      {
        while (1)
        {
          v20 = v13 - 1;
          if (v13 >= 4)
          {
            v25 = &v18[16 * v13];
            v26 = *((_QWORD *)v25 - 8);
            v27 = *((_QWORD *)v25 - 7);
            v31 = __OFSUB__(v27, v26);
            v28 = v27 - v26;
            if (v31)
              goto LABEL_85;
            v30 = *((_QWORD *)v25 - 6);
            v29 = *((_QWORD *)v25 - 5);
            v31 = __OFSUB__(v29, v30);
            v23 = v29 - v30;
            v24 = v31;
            if (v31)
              goto LABEL_86;
            v32 = v13 - 2;
            v33 = &v18[16 * v13 - 32];
            v35 = *(_QWORD *)v33;
            v34 = *((_QWORD *)v33 + 1);
            v31 = __OFSUB__(v34, v35);
            v36 = v34 - v35;
            if (v31)
              goto LABEL_87;
            v31 = __OFADD__(v23, v36);
            v37 = v23 + v36;
            if (v31)
              goto LABEL_89;
            if (v37 >= v28)
            {
              v55 = &v18[16 * v20];
              v57 = *(_QWORD *)v55;
              v56 = *((_QWORD *)v55 + 1);
              v31 = __OFSUB__(v56, v57);
              v58 = v56 - v57;
              if (v31)
                goto LABEL_95;
              v48 = v23 < v58;
              goto LABEL_55;
            }
          }
          else
          {
            if (v13 != 3)
            {
              v49 = *((_QWORD *)v12 + 4);
              v50 = *((_QWORD *)v12 + 5);
              v31 = __OFSUB__(v50, v49);
              v42 = v50 - v49;
              v43 = v31;
              goto LABEL_49;
            }
            v22 = *((_QWORD *)v12 + 4);
            v21 = *((_QWORD *)v12 + 5);
            v31 = __OFSUB__(v21, v22);
            v23 = v21 - v22;
            v24 = v31;
          }
          if ((v24 & 1) != 0)
            goto LABEL_88;
          v32 = v13 - 2;
          v38 = &v18[16 * v13 - 32];
          v40 = *(_QWORD *)v38;
          v39 = *((_QWORD *)v38 + 1);
          v41 = __OFSUB__(v39, v40);
          v42 = v39 - v40;
          v43 = v41;
          if (v41)
            goto LABEL_90;
          v44 = &v18[16 * v20];
          v46 = *(_QWORD *)v44;
          v45 = *((_QWORD *)v44 + 1);
          v31 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          if (v31)
            goto LABEL_92;
          if (__OFADD__(v42, v47))
            goto LABEL_94;
          if (v42 + v47 >= v23)
          {
            v48 = v23 < v47;
LABEL_55:
            if (v48)
              v20 = v32;
            goto LABEL_57;
          }
LABEL_49:
          if ((v43 & 1) != 0)
            goto LABEL_91;
          v51 = &v18[16 * v20];
          v53 = *(_QWORD *)v51;
          v52 = *((_QWORD *)v51 + 1);
          v31 = __OFSUB__(v52, v53);
          v54 = v52 - v53;
          if (v31)
            goto LABEL_93;
          if (v54 < v42)
            goto LABEL_15;
LABEL_57:
          v59 = v20 - 1;
          if (v20 - 1 >= v13)
          {
            __break(1u);
LABEL_82:
            __break(1u);
LABEL_83:
            __break(1u);
LABEL_84:
            __break(1u);
LABEL_85:
            __break(1u);
LABEL_86:
            __break(1u);
LABEL_87:
            __break(1u);
LABEL_88:
            __break(1u);
LABEL_89:
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
            JUMPOUT(0x23C082734);
          }
          if (!v17)
          {
            __break(1u);
            JUMPOUT(0x23C082748);
          }
          v60 = v12;
          v61 = &v18[16 * v59];
          v62 = *(_QWORD *)v61;
          v63 = &v18[16 * v20];
          v64 = *((_QWORD *)v63 + 1);
          sub_23C084FF4((char *)(v17 + 48 * *(_QWORD *)v61), (char *)(v17 + 48 * *(_QWORD *)v63), v17 + 48 * v64, v80);
          if (v1)
            goto LABEL_65;
          if (v64 < v62)
            goto LABEL_82;
          if (v20 > *((_QWORD *)v60 + 2))
            goto LABEL_83;
          *(_QWORD *)v61 = v62;
          *(_QWORD *)&v18[16 * v59 + 8] = v64;
          v65 = *((_QWORD *)v60 + 2);
          if (v20 >= v65)
            goto LABEL_84;
          v12 = v60;
          v13 = v65 - 1;
          memmove(&v18[16 * v20], v63 + 16, 16 * (v65 - 1 - v20));
          *((_QWORD *)v60 + 2) = v65 - 1;
          v17 = v79;
          if (v65 <= 2)
            goto LABEL_15;
        }
      }
      v13 = 1;
LABEL_15:
      v3 = v78;
      v11 = v77;
    }
    while (v9 < v78);
    v8 = v76;
    goto LABEL_68;
  }
  if (v3 < 0)
    goto LABEL_102;
  if (v3)
    return sub_23C084BC8(0, v3, 1, a1);
  return result;
}

uint64_t sub_23C0827BC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t i;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;

  v3 = a1[1];
  result = sub_23C0E4A5C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v90 = 0;
      v91 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v93 = *(_QWORD *)(v91 + 72 * i + 56);
        v94 = v90;
        do
        {
          v95 = v91 + v94;
          if (v93 >= *(_QWORD *)(v91 + v94 + 56))
            break;
          if (!v91)
            goto LABEL_142;
          v96 = *(_QWORD *)(v95 + 72);
          v97 = v91 + v94;
          v98 = *(_QWORD *)(v91 + v94 + 112);
          result = *(_QWORD *)(v91 + v94 + 120);
          v99 = *(_QWORD *)(v91 + v94 + 136);
          v101 = *(_OWORD *)(v91 + v94 + 80);
          v100 = *(_OWORD *)(v91 + v94 + 96);
          v102 = *(_OWORD *)(v95 + 48);
          *(_OWORD *)(v95 + 104) = *(_OWORD *)(v95 + 32);
          *(_OWORD *)(v95 + 120) = v102;
          *(_QWORD *)(v95 + 136) = *(_QWORD *)(v95 + 64);
          v103 = *(_OWORD *)(v95 + 16);
          *(_OWORD *)(v95 + 72) = *(_OWORD *)v95;
          *(_OWORD *)(v95 + 88) = v103;
          *(_QWORD *)v97 = v96;
          *(_OWORD *)(v97 + 8) = v101;
          *(_OWORD *)(v97 + 24) = v100;
          *(_QWORD *)(v97 + 40) = v98;
          *(_QWORD *)(v97 + 48) = result;
          *(_QWORD *)(v95 + 56) = v93;
          v94 -= 72;
          *(_QWORD *)(v97 + 64) = v99;
        }
        while (v94 != -72);
        v90 += 72;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v116 = result;
    v124 = v1;
    v113 = a1;
    if (v3 > 1)
    {
      v6 = v5 >> 1;
      result = sub_23C0E4804();
      *(_QWORD *)(result + 16) = v6;
      v115 = result;
      v122 = (char *)(result + 32);
LABEL_13:
      v8 = 0;
      v9 = *a1;
      v114 = *a1 + 200;
      v112 = *a1 + 64;
      v10 = MEMORY[0x24BEE4AF8];
      v117 = v3;
      v123 = v9;
      while (1)
      {
        v12 = v8++;
        if (v8 < v3)
        {
          v13 = *(_QWORD *)(v9 + 72 * v8 + 56);
          v14 = *(_QWORD *)(v9 + 72 * v12 + 56);
          v8 = v12 + 2;
          if (v12 + 2 < v3)
          {
            v15 = (uint64_t *)(v114 + 72 * v12);
            v16 = v13;
            while (1)
            {
              v18 = *v15;
              v15 += 9;
              v17 = v18;
              if (v13 < v14 == v18 >= v16)
                break;
              ++v8;
              v16 = v17;
              if (v3 == v8)
              {
                v8 = v3;
                break;
              }
            }
          }
          if (v13 < v14)
          {
            if (v8 < v12)
              goto LABEL_139;
            if (v12 < v8)
            {
              v19 = 72 * v8;
              v20 = 72 * v12;
              v21 = v8;
              v111 = v12;
              do
              {
                if (v12 != --v21)
                {
                  if (!v9)
                    goto LABEL_145;
                  v22 = v10;
                  v23 = v9 + v19;
                  v24 = *(_QWORD *)(v9 + v20);
                  v120 = *(_OWORD *)(v9 + v20 + 40);
                  v121 = *(_OWORD *)(v9 + v20 + 24);
                  v25 = *(_QWORD *)(v9 + v20 + 56);
                  v119 = *(_QWORD *)(v9 + v20 + 64);
                  v118 = *(_OWORD *)(v9 + v20 + 8);
                  result = (uint64_t)memmove((void *)(v9 + v20), (const void *)(v9 + v19 - 72), 0x48uLL);
                  v9 = v123;
                  *(_QWORD *)(v23 - 72) = v24;
                  *(_OWORD *)(v23 - 64) = v118;
                  *(_OWORD *)(v23 - 48) = v121;
                  *(_OWORD *)(v23 - 32) = v120;
                  *(_QWORD *)(v23 - 16) = v25;
                  *(_QWORD *)(v23 - 8) = v119;
                  v10 = v22;
                }
                ++v12;
                v19 -= 72;
                v20 += 72;
              }
              while (v12 < v21);
              v3 = v117;
              v12 = v111;
            }
          }
        }
        if (v8 < v3)
        {
          if (__OFSUB__(v8, v12))
            goto LABEL_136;
          if (v8 - v12 < v116)
          {
            v26 = v12 + v116;
            if (__OFADD__(v12, v116))
              goto LABEL_140;
            if (v26 >= v3)
              v26 = v3;
            if (v26 < v12)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v8 != v26)
            {
              v27 = (uint64_t *)(v112 + 72 * v8);
              do
              {
                v28 = *(_QWORD *)(v9 + 72 * v8 + 56);
                v29 = v27;
                v30 = v12;
                do
                {
                  if (v28 >= *(v29 - 10))
                    break;
                  if (!v9)
                    goto LABEL_143;
                  v31 = v29 - 8;
                  v32 = *(v29 - 8);
                  v33 = *(v29 - 5);
                  v34 = *(v29 - 4);
                  v35 = *(v29 - 3);
                  result = *(v29 - 2);
                  v36 = *v29;
                  v37 = *(_OWORD *)(v29 - 7);
                  v38 = *(_OWORD *)(v29 - 11);
                  *((_OWORD *)v31 + 2) = *(_OWORD *)(v29 - 13);
                  *((_OWORD *)v31 + 3) = v38;
                  *v29 = *(v29 - 9);
                  v39 = *(_OWORD *)(v29 - 15);
                  *(_OWORD *)v31 = *(_OWORD *)(v29 - 17);
                  *((_OWORD *)v31 + 1) = v39;
                  *(v29 - 9) = v36;
                  v29 -= 9;
                  *(v29 - 8) = v32;
                  *(_OWORD *)(v29 - 7) = v37;
                  *(v29 - 5) = v33;
                  *(v29 - 4) = v34;
                  *(v29 - 3) = v35;
                  *(v29 - 2) = result;
                  ++v30;
                  *(v29 - 1) = v28;
                }
                while (v8 != v30);
                ++v8;
                v27 += 9;
              }
              while (v8 != v26);
              v8 = v26;
            }
          }
        }
        if (v8 < v12)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_23C085F4C(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
          v10 = result;
        }
        v41 = *(_QWORD *)(v10 + 16);
        v40 = *(_QWORD *)(v10 + 24);
        v11 = v41 + 1;
        v9 = v123;
        if (v41 >= v40 >> 1)
        {
          result = (uint64_t)sub_23C085F4C((char *)(v40 > 1), v41 + 1, 1, (char *)v10);
          v9 = v123;
          v10 = result;
        }
        *(_QWORD *)(v10 + 16) = v11;
        v42 = v10 + 32;
        v43 = (uint64_t *)(v10 + 32 + 16 * v41);
        *v43 = v12;
        v43[1] = v8;
        if (v41)
        {
          while (1)
          {
            v44 = v11 - 1;
            if (v11 >= 4)
            {
              v49 = v42 + 16 * v11;
              v50 = *(_QWORD *)(v49 - 64);
              v51 = *(_QWORD *)(v49 - 56);
              v55 = __OFSUB__(v51, v50);
              v52 = v51 - v50;
              if (v55)
                goto LABEL_120;
              v54 = *(_QWORD *)(v49 - 48);
              v53 = *(_QWORD *)(v49 - 40);
              v55 = __OFSUB__(v53, v54);
              v47 = v53 - v54;
              v48 = v55;
              if (v55)
                goto LABEL_121;
              v56 = v11 - 2;
              v57 = (uint64_t *)(v42 + 16 * (v11 - 2));
              v59 = *v57;
              v58 = v57[1];
              v55 = __OFSUB__(v58, v59);
              v60 = v58 - v59;
              if (v55)
                goto LABEL_122;
              v55 = __OFADD__(v47, v60);
              v61 = v47 + v60;
              if (v55)
                goto LABEL_124;
              if (v61 >= v52)
              {
                v79 = (uint64_t *)(v42 + 16 * v44);
                v81 = *v79;
                v80 = v79[1];
                v55 = __OFSUB__(v80, v81);
                v82 = v80 - v81;
                if (v55)
                  goto LABEL_130;
                v72 = v47 < v82;
                goto LABEL_84;
              }
            }
            else
            {
              if (v11 != 3)
              {
                v73 = *(_QWORD *)(v10 + 32);
                v74 = *(_QWORD *)(v10 + 40);
                v55 = __OFSUB__(v74, v73);
                v66 = v74 - v73;
                v67 = v55;
                goto LABEL_78;
              }
              v46 = *(_QWORD *)(v10 + 32);
              v45 = *(_QWORD *)(v10 + 40);
              v55 = __OFSUB__(v45, v46);
              v47 = v45 - v46;
              v48 = v55;
            }
            if ((v48 & 1) != 0)
              goto LABEL_123;
            v56 = v11 - 2;
            v62 = (uint64_t *)(v42 + 16 * (v11 - 2));
            v64 = *v62;
            v63 = v62[1];
            v65 = __OFSUB__(v63, v64);
            v66 = v63 - v64;
            v67 = v65;
            if (v65)
              goto LABEL_125;
            v68 = (uint64_t *)(v42 + 16 * v44);
            v70 = *v68;
            v69 = v68[1];
            v55 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v55)
              goto LABEL_127;
            if (__OFADD__(v66, v71))
              goto LABEL_129;
            if (v66 + v71 >= v47)
            {
              v72 = v47 < v71;
LABEL_84:
              if (v72)
                v44 = v56;
              goto LABEL_86;
            }
LABEL_78:
            if ((v67 & 1) != 0)
              goto LABEL_126;
            v75 = (uint64_t *)(v42 + 16 * v44);
            v77 = *v75;
            v76 = v75[1];
            v55 = __OFSUB__(v76, v77);
            v78 = v76 - v77;
            if (v55)
              goto LABEL_128;
            if (v78 < v66)
              goto LABEL_15;
LABEL_86:
            v83 = v44 - 1;
            if (v44 - 1 >= v11)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v9)
              goto LABEL_144;
            v84 = v10;
            v85 = (uint64_t *)(v42 + 16 * v83);
            v86 = *v85;
            v87 = (_QWORD *)(v42 + 16 * v44);
            v88 = v87[1];
            result = sub_23C085310((char *)(v9 + 72 * *v85), (char *)(v9 + 72 * *v87), v9 + 72 * v88, v122);
            if (v124)
              goto LABEL_94;
            if (v88 < v86)
              goto LABEL_117;
            if (v44 > *(_QWORD *)(v84 + 16))
              goto LABEL_118;
            *v85 = v86;
            *(_QWORD *)(v42 + 16 * v83 + 8) = v88;
            v89 = *(_QWORD *)(v84 + 16);
            if (v44 >= v89)
              goto LABEL_119;
            v10 = v84;
            v11 = v89 - 1;
            result = (uint64_t)memmove((void *)(v42 + 16 * v44), v87 + 2, 16 * (v89 - 1 - v44));
            *(_QWORD *)(v84 + 16) = v89 - 1;
            v9 = v123;
            if (v89 <= 2)
              goto LABEL_15;
          }
        }
        v11 = 1;
LABEL_15:
        v3 = v117;
        if (v8 >= v117)
        {
          v7 = v115;
          goto LABEL_103;
        }
      }
    }
    v7 = MEMORY[0x24BEE4AF8];
    v122 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v115 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v10 = MEMORY[0x24BEE4AF8];
LABEL_103:
    result = v10;
    v115 = v7;
    if (v11 >= 2)
    {
      v104 = *v113;
      do
      {
        v105 = v11 - 2;
        if (v11 < 2)
          goto LABEL_132;
        if (!v104)
          goto LABEL_146;
        v106 = result;
        v107 = *(_QWORD *)(result + 32 + 16 * v105);
        v108 = *(_QWORD *)(result + 32 + 16 * (v11 - 1) + 8);
        result = sub_23C085310((char *)(v104 + 72 * v107), (char *)(v104 + 72 * *(_QWORD *)(result + 32 + 16 * (v11 - 1))), v104 + 72 * v108, v122);
        if (v124)
          break;
        if (v108 < v107)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_23C086044(v106);
          v106 = result;
        }
        if (v105 >= *(_QWORD *)(v106 + 16))
          goto LABEL_134;
        v109 = (_QWORD *)(v106 + 32 + 16 * v105);
        *v109 = v107;
        v109[1] = v108;
        v110 = *(_QWORD *)(v106 + 16);
        if (v11 > v110)
          goto LABEL_135;
        memmove((void *)(v106 + 32 + 16 * (v11 - 1)), (const void *)(v106 + 32 + 16 * v11), 16 * (v110 - v11));
        result = v106;
        *(_QWORD *)(v106 + 16) = v110 - 1;
        v11 = v110 - 1;
      }
      while (v110 > 2);
    }
LABEL_94:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v115 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C082F20(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;

  v3 = a1[1];
  result = sub_23C0E4A5C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_153;
    if (v3)
      return sub_23C084CE4(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_152;
  v106 = result;
  v103 = a1;
  if (v3 > 1)
  {
    v6 = v5 >> 1;
    result = sub_23C0E4804();
    *(_QWORD *)(result + 16) = v6;
    v105 = result;
    v114 = (char *)(result + 32);
LABEL_13:
    v8 = 0;
    v9 = *a1;
    v104 = *a1 + 64;
    v10 = MEMORY[0x24BEE4AF8];
    v107 = v3;
    v115 = *a1;
    while (1)
    {
      v12 = v8++;
      if (v8 >= v3)
        goto LABEL_46;
      v13 = v9 + 72 * v8;
      result = *(_QWORD *)(v13 + 56);
      v14 = *(_QWORD *)(v13 + 64);
      v15 = v9 + 72 * v12;
      if (result == *(_QWORD *)(v15 + 56) && v14 == *(_QWORD *)(v15 + 64))
      {
        v18 = v12 + 2;
        if (v12 + 2 >= v3)
        {
          v8 = v12 + 2;
          goto LABEL_68;
        }
        v17 = 0;
      }
      else
      {
        result = sub_23C0E4A74();
        v17 = result;
        v18 = v12 + 2;
        if (v12 + 2 >= v3)
          goto LABEL_37;
      }
      v19 = (_QWORD *)(v104 + 72 * v18);
      do
      {
        result = *(v19 - 1);
        v21 = v9 + 72 * v8;
        if (result == *(_QWORD *)(v21 + 56) && *v19 == *(_QWORD *)(v21 + 64))
        {
          if ((v17 & 1) != 0)
            goto LABEL_38;
        }
        else
        {
          result = sub_23C0E4A74();
          if (((v17 ^ result) & 1) != 0)
            goto LABEL_37;
        }
        v20 = v18 + 1;
        v19 += 9;
        v8 = v18;
        v18 = v20;
      }
      while (v20 < v3);
      v18 = v20;
LABEL_37:
      v8 = v18;
      if ((v17 & 1) == 0)
        goto LABEL_46;
LABEL_38:
      if (v18 < v12)
        goto LABEL_156;
      if (v12 >= v18)
      {
        v8 = v18;
LABEL_46:
        if (v8 >= v3)
          goto LABEL_68;
        goto LABEL_47;
      }
      v23 = 72 * v18;
      v24 = 72 * v12;
      v25 = v18;
      v26 = v12;
      do
      {
        if (v26 != --v25)
        {
          if (!v9)
            goto LABEL_159;
          v27 = v9 + v24;
          v28 = v9 + v23;
          v29 = (const void *)(v9 + v23 - 72);
          v30 = *(_QWORD *)(v9 + v24);
          v110 = *(_QWORD *)(v27 + 32);
          v111 = *(_QWORD *)(v27 + 24);
          v112 = *(_QWORD *)(v27 + 64);
          v113 = *(_QWORD *)(v27 + 56);
          v108 = *(_OWORD *)(v27 + 8);
          v109 = *(_OWORD *)(v27 + 40);
          result = (uint64_t)memmove((void *)v27, v29, 0x48uLL);
          *(_QWORD *)(v28 - 72) = v30;
          *(_OWORD *)(v28 - 64) = v108;
          v9 = v115;
          *(_QWORD *)(v28 - 48) = v111;
          *(_QWORD *)(v28 - 40) = v110;
          *(_OWORD *)(v28 - 32) = v109;
          *(_QWORD *)(v28 - 16) = v113;
          *(_QWORD *)(v28 - 8) = v112;
        }
        ++v26;
        v23 -= 72;
        v24 += 72;
      }
      while (v26 < v25);
      v8 = v18;
      v3 = v107;
      if (v18 >= v107)
        goto LABEL_68;
LABEL_47:
      if (__OFSUB__(v8, v12))
        goto LABEL_151;
      if (v8 - v12 < v106)
      {
        if (__OFADD__(v12, v106))
          goto LABEL_154;
        if (v12 + v106 >= v3)
          v31 = v3;
        else
          v31 = v12 + v106;
        if (v31 < v12)
        {
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
          return result;
        }
        if (v8 != v31)
        {
          v32 = (uint64_t *)(v104 + 72 * v8);
          do
          {
            v33 = v9 + 72 * v8;
            result = *(_QWORD *)(v33 + 56);
            v34 = *(_QWORD *)(v33 + 64);
            v35 = v12;
            v36 = v32;
            do
            {
              if (result == *(v36 - 10) && v34 == *(v36 - 9))
                break;
              result = sub_23C0E4A74();
              if ((result & 1) == 0)
                break;
              if (!v9)
                goto LABEL_157;
              v38 = v36 - 8;
              v39 = *(v36 - 8);
              v40 = *(v36 - 5);
              v41 = *(v36 - 4);
              result = *(v36 - 1);
              v34 = *v36;
              v42 = *(_OWORD *)(v36 - 7);
              v43 = *(_OWORD *)(v36 - 3);
              v44 = *(_OWORD *)(v36 - 11);
              *((_OWORD *)v38 + 2) = *(_OWORD *)(v36 - 13);
              *((_OWORD *)v38 + 3) = v44;
              *v36 = *(v36 - 9);
              v45 = *(_OWORD *)(v36 - 15);
              *(_OWORD *)v38 = *(_OWORD *)(v36 - 17);
              *((_OWORD *)v38 + 1) = v45;
              *(v36 - 9) = v34;
              v36 -= 9;
              *(v36 - 8) = v39;
              *(_OWORD *)(v36 - 7) = v42;
              *(v36 - 5) = v40;
              *(v36 - 4) = v41;
              *(_OWORD *)(v36 - 3) = v43;
              ++v35;
              *(v36 - 1) = result;
            }
            while (v8 != v35);
            ++v8;
            v32 += 9;
          }
          while (v8 != v31);
          v8 = v31;
        }
      }
LABEL_68:
      if (v8 < v12)
        goto LABEL_146;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C085F4C(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
        v10 = result;
      }
      v47 = *(_QWORD *)(v10 + 16);
      v46 = *(_QWORD *)(v10 + 24);
      v11 = v47 + 1;
      if (v47 >= v46 >> 1)
      {
        result = (uint64_t)sub_23C085F4C((char *)(v46 > 1), v47 + 1, 1, (char *)v10);
        v10 = result;
      }
      *(_QWORD *)(v10 + 16) = v11;
      v48 = v10 + 32;
      v49 = (uint64_t *)(v10 + 32 + 16 * v47);
      *v49 = v12;
      v49[1] = v8;
      if (v47)
      {
        while (1)
        {
          v50 = v11 - 1;
          if (v11 >= 4)
          {
            v55 = v48 + 16 * v11;
            v56 = *(_QWORD *)(v55 - 64);
            v57 = *(_QWORD *)(v55 - 56);
            v61 = __OFSUB__(v57, v56);
            v58 = v57 - v56;
            if (v61)
              goto LABEL_135;
            v60 = *(_QWORD *)(v55 - 48);
            v59 = *(_QWORD *)(v55 - 40);
            v61 = __OFSUB__(v59, v60);
            v53 = v59 - v60;
            v54 = v61;
            if (v61)
              goto LABEL_136;
            v62 = v11 - 2;
            v63 = (uint64_t *)(v48 + 16 * (v11 - 2));
            v65 = *v63;
            v64 = v63[1];
            v61 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            if (v61)
              goto LABEL_137;
            v61 = __OFADD__(v53, v66);
            v67 = v53 + v66;
            if (v61)
              goto LABEL_139;
            if (v67 >= v58)
            {
              v85 = (uint64_t *)(v48 + 16 * v50);
              v87 = *v85;
              v86 = v85[1];
              v61 = __OFSUB__(v86, v87);
              v88 = v86 - v87;
              if (v61)
                goto LABEL_145;
              v78 = v53 < v88;
              goto LABEL_105;
            }
          }
          else
          {
            if (v11 != 3)
            {
              v79 = *(_QWORD *)(v10 + 32);
              v80 = *(_QWORD *)(v10 + 40);
              v61 = __OFSUB__(v80, v79);
              v72 = v80 - v79;
              v73 = v61;
              goto LABEL_99;
            }
            v52 = *(_QWORD *)(v10 + 32);
            v51 = *(_QWORD *)(v10 + 40);
            v61 = __OFSUB__(v51, v52);
            v53 = v51 - v52;
            v54 = v61;
          }
          if ((v54 & 1) != 0)
            goto LABEL_138;
          v62 = v11 - 2;
          v68 = (uint64_t *)(v48 + 16 * (v11 - 2));
          v70 = *v68;
          v69 = v68[1];
          v71 = __OFSUB__(v69, v70);
          v72 = v69 - v70;
          v73 = v71;
          if (v71)
            goto LABEL_140;
          v74 = (uint64_t *)(v48 + 16 * v50);
          v76 = *v74;
          v75 = v74[1];
          v61 = __OFSUB__(v75, v76);
          v77 = v75 - v76;
          if (v61)
            goto LABEL_142;
          if (__OFADD__(v72, v77))
            goto LABEL_144;
          if (v72 + v77 >= v53)
          {
            v78 = v53 < v77;
LABEL_105:
            if (v78)
              v50 = v62;
            goto LABEL_107;
          }
LABEL_99:
          if ((v73 & 1) != 0)
            goto LABEL_141;
          v81 = (uint64_t *)(v48 + 16 * v50);
          v83 = *v81;
          v82 = v81[1];
          v61 = __OFSUB__(v82, v83);
          v84 = v82 - v83;
          if (v61)
            goto LABEL_143;
          if (v84 < v72)
            goto LABEL_15;
LABEL_107:
          v89 = v50 - 1;
          if (v50 - 1 >= v11)
          {
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            __break(1u);
LABEL_146:
            __break(1u);
LABEL_147:
            __break(1u);
LABEL_148:
            __break(1u);
LABEL_149:
            __break(1u);
LABEL_150:
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
            goto LABEL_155;
          }
          if (!v9)
            goto LABEL_158;
          v90 = v9;
          v91 = (uint64_t *)(v48 + 16 * v89);
          v92 = *v91;
          v93 = (_QWORD *)(v48 + 16 * v50);
          v94 = v93[1];
          result = sub_23C08556C((char *)(v90 + 72 * *v91), (char *)(v90 + 72 * *v93), v90 + 72 * v94, v114);
          if (v1)
            goto LABEL_115;
          if (v94 < v92)
            goto LABEL_132;
          if (v50 > *(_QWORD *)(v10 + 16))
            goto LABEL_133;
          *v91 = v92;
          *(_QWORD *)(v48 + 16 * v89 + 8) = v94;
          v95 = *(_QWORD *)(v10 + 16);
          if (v50 >= v95)
            goto LABEL_134;
          v11 = v95 - 1;
          result = (uint64_t)memmove((void *)(v48 + 16 * v50), v93 + 2, 16 * (v95 - 1 - v50));
          *(_QWORD *)(v10 + 16) = v95 - 1;
          v9 = v115;
          if (v95 <= 2)
            goto LABEL_15;
        }
      }
      v11 = 1;
LABEL_15:
      v3 = v107;
      if (v8 >= v107)
      {
        v7 = v105;
        goto LABEL_118;
      }
    }
  }
  v7 = MEMORY[0x24BEE4AF8];
  v114 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  if (v3 == 1)
  {
    v105 = MEMORY[0x24BEE4AF8];
    goto LABEL_13;
  }
  v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v10 = MEMORY[0x24BEE4AF8];
LABEL_118:
  result = v10;
  v105 = v7;
  if (v11 >= 2)
  {
    v96 = *v103;
    do
    {
      v97 = v11 - 2;
      if (v11 < 2)
        goto LABEL_147;
      if (!v96)
        goto LABEL_160;
      v98 = result;
      v99 = *(_QWORD *)(result + 32 + 16 * v97);
      v100 = *(_QWORD *)(result + 32 + 16 * (v11 - 1) + 8);
      result = sub_23C08556C((char *)(v96 + 72 * v99), (char *)(v96 + 72 * *(_QWORD *)(result + 32 + 16 * (v11 - 1))), v96 + 72 * v100, v114);
      if (v1)
        break;
      if (v100 < v99)
        goto LABEL_148;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23C086044(v98);
        v98 = result;
      }
      if (v97 >= *(_QWORD *)(v98 + 16))
        goto LABEL_149;
      v101 = (_QWORD *)(v98 + 32 + 16 * v97);
      *v101 = v99;
      v101[1] = v100;
      v102 = *(_QWORD *)(v98 + 16);
      if (v11 > v102)
        goto LABEL_150;
      memmove((void *)(v98 + 32 + 16 * (v11 - 1)), (const void *)(v98 + 32 + 16 * v11), 16 * (v102 - v11));
      result = v98;
      *(_QWORD *)(v98 + 16) = v102 - 1;
      v11 = v102 - 1;
    }
    while (v102 > 2);
  }
LABEL_115:
  swift_bridgeObjectRelease();
  *(_QWORD *)(v105 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C083678(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  __int128 v38;
  _OWORD *v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  char *v114;
  uint64_t v115;

  v3 = a1[1];
  result = sub_23C0E4A5C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_154;
    if (v3)
      return sub_23C084DEC(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_153;
  v108 = result;
  v105 = a1;
  if (v3 <= 1)
  {
    v7 = MEMORY[0x24BEE4AF8];
    v114 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v10 = MEMORY[0x24BEE4AF8];
LABEL_119:
      result = v10;
      v107 = v7;
      if (v11 >= 2)
      {
        v98 = *v105;
        do
        {
          v99 = v11 - 2;
          if (v11 < 2)
            goto LABEL_148;
          if (!v98)
            goto LABEL_161;
          v100 = result;
          v101 = *(_QWORD *)(result + 32 + 16 * v99);
          v102 = *(_QWORD *)(result + 32 + 16 * (v11 - 1) + 8);
          result = sub_23C0857E8((char *)(v98 + 72 * v101), (char *)(v98 + 72 * *(_QWORD *)(result + 32 + 16 * (v11 - 1))), v98 + 72 * v102, v114);
          if (v1)
            break;
          if (v102 < v101)
            goto LABEL_149;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23C086044(v100);
            v100 = result;
          }
          if (v99 >= *(_QWORD *)(v100 + 16))
            goto LABEL_150;
          v103 = (_QWORD *)(v100 + 32 + 16 * v99);
          *v103 = v101;
          v103[1] = v102;
          v104 = *(_QWORD *)(v100 + 16);
          if (v11 > v104)
            goto LABEL_151;
          memmove((void *)(v100 + 32 + 16 * (v11 - 1)), (const void *)(v100 + 32 + 16 * v11), 16 * (v104 - v11));
          result = v100;
          *(_QWORD *)(v100 + 16) = v104 - 1;
          v11 = v104 - 1;
        }
        while (v104 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v107 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v107 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    result = sub_23C0E4804();
    *(_QWORD *)(result + 16) = v6;
    v107 = result;
    v114 = (char *)(result + 32);
  }
  v8 = 0;
  v9 = *a1;
  v106 = *a1 + 56;
  v10 = MEMORY[0x24BEE4AF8];
  v109 = v3;
  v115 = v9;
  while (1)
  {
    v12 = v8++;
    if (v8 >= v3)
      goto LABEL_46;
    v13 = v9 + 72 * v8;
    result = *(_QWORD *)(v13 + 48);
    v14 = *(_QWORD *)(v13 + 56);
    v15 = v9 + 72 * v12;
    if (result == *(_QWORD *)(v15 + 48) && v14 == *(_QWORD *)(v15 + 56))
    {
      v18 = v12 + 2;
      if (v12 + 2 >= v3)
      {
        v8 = v12 + 2;
        goto LABEL_68;
      }
      v17 = 0;
    }
    else
    {
      result = sub_23C0E4A74();
      v17 = result;
      v18 = v12 + 2;
      if (v12 + 2 >= v3)
        goto LABEL_37;
    }
    v19 = (_QWORD *)(v106 + 72 * v18);
    do
    {
      result = *(v19 - 1);
      v21 = v9 + 72 * v8;
      if (result == *(_QWORD *)(v21 + 48) && *v19 == *(_QWORD *)(v21 + 56))
      {
        if ((v17 & 1) != 0)
          goto LABEL_38;
      }
      else
      {
        result = sub_23C0E4A74();
        if (((v17 ^ result) & 1) != 0)
          goto LABEL_37;
      }
      v20 = v18 + 1;
      v19 += 9;
      v8 = v18;
      v18 = v20;
    }
    while (v20 < v3);
    v18 = v20;
LABEL_37:
    v8 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_46;
LABEL_38:
    if (v18 < v12)
      goto LABEL_157;
    if (v12 < v18)
      break;
    v8 = v18;
LABEL_46:
    if (v8 < v3)
      goto LABEL_47;
LABEL_68:
    if (v8 < v12)
      goto LABEL_147;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23C085F4C(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = result;
    }
    v49 = *(_QWORD *)(v10 + 16);
    v48 = *(_QWORD *)(v10 + 24);
    v11 = v49 + 1;
    if (v49 >= v48 >> 1)
    {
      result = (uint64_t)sub_23C085F4C((char *)(v48 > 1), v49 + 1, 1, (char *)v10);
      v10 = result;
    }
    *(_QWORD *)(v10 + 16) = v11;
    v50 = v10 + 32;
    v51 = (uint64_t *)(v10 + 32 + 16 * v49);
    *v51 = v12;
    v51[1] = v8;
    if (v49)
    {
      v9 = v115;
      while (1)
      {
        v52 = v11 - 1;
        if (v11 >= 4)
        {
          v57 = v50 + 16 * v11;
          v58 = *(_QWORD *)(v57 - 64);
          v59 = *(_QWORD *)(v57 - 56);
          v63 = __OFSUB__(v59, v58);
          v60 = v59 - v58;
          if (v63)
            goto LABEL_136;
          v62 = *(_QWORD *)(v57 - 48);
          v61 = *(_QWORD *)(v57 - 40);
          v63 = __OFSUB__(v61, v62);
          v55 = v61 - v62;
          v56 = v63;
          if (v63)
            goto LABEL_137;
          v64 = v11 - 2;
          v65 = (uint64_t *)(v50 + 16 * (v11 - 2));
          v67 = *v65;
          v66 = v65[1];
          v63 = __OFSUB__(v66, v67);
          v68 = v66 - v67;
          if (v63)
            goto LABEL_138;
          v63 = __OFADD__(v55, v68);
          v69 = v55 + v68;
          if (v63)
            goto LABEL_140;
          if (v69 >= v60)
          {
            v87 = (uint64_t *)(v50 + 16 * v52);
            v89 = *v87;
            v88 = v87[1];
            v63 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v63)
              goto LABEL_146;
            v80 = v55 < v90;
            goto LABEL_106;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v81 = *(_QWORD *)(v10 + 32);
            v82 = *(_QWORD *)(v10 + 40);
            v63 = __OFSUB__(v82, v81);
            v74 = v82 - v81;
            v75 = v63;
            goto LABEL_100;
          }
          v54 = *(_QWORD *)(v10 + 32);
          v53 = *(_QWORD *)(v10 + 40);
          v63 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          v56 = v63;
        }
        if ((v56 & 1) != 0)
          goto LABEL_139;
        v64 = v11 - 2;
        v70 = (uint64_t *)(v50 + 16 * (v11 - 2));
        v72 = *v70;
        v71 = v70[1];
        v73 = __OFSUB__(v71, v72);
        v74 = v71 - v72;
        v75 = v73;
        if (v73)
          goto LABEL_141;
        v76 = (uint64_t *)(v50 + 16 * v52);
        v78 = *v76;
        v77 = v76[1];
        v63 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v63)
          goto LABEL_143;
        if (__OFADD__(v74, v79))
          goto LABEL_145;
        if (v74 + v79 >= v55)
        {
          v80 = v55 < v79;
LABEL_106:
          if (v80)
            v52 = v64;
          goto LABEL_108;
        }
LABEL_100:
        if ((v75 & 1) != 0)
          goto LABEL_142;
        v83 = (uint64_t *)(v50 + 16 * v52);
        v85 = *v83;
        v84 = v83[1];
        v63 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v63)
          goto LABEL_144;
        if (v86 < v74)
          goto LABEL_15;
LABEL_108:
        v91 = v52 - 1;
        if (v52 - 1 >= v11)
        {
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
          goto LABEL_156;
        }
        if (!v9)
          goto LABEL_159;
        v92 = v9;
        v93 = (uint64_t *)(v50 + 16 * v91);
        v94 = *v93;
        v95 = (_QWORD *)(v50 + 16 * v52);
        v96 = v95[1];
        result = sub_23C0857E8((char *)(v92 + 72 * *v93), (char *)(v92 + 72 * *v95), v92 + 72 * v96, v114);
        if (v1)
          goto LABEL_116;
        if (v96 < v94)
          goto LABEL_133;
        if (v52 > *(_QWORD *)(v10 + 16))
          goto LABEL_134;
        *v93 = v94;
        *(_QWORD *)(v50 + 16 * v91 + 8) = v96;
        v97 = *(_QWORD *)(v10 + 16);
        if (v52 >= v97)
          goto LABEL_135;
        v11 = v97 - 1;
        result = (uint64_t)memmove((void *)(v50 + 16 * v52), v95 + 2, 16 * (v97 - 1 - v52));
        *(_QWORD *)(v10 + 16) = v97 - 1;
        v80 = v97 > 2;
        v9 = v115;
        if (!v80)
          goto LABEL_15;
      }
    }
    v11 = 1;
    v9 = v115;
LABEL_15:
    v3 = v109;
    if (v8 >= v109)
    {
      v7 = v107;
      goto LABEL_119;
    }
  }
  v23 = 72 * v18;
  v24 = 72 * v12;
  v25 = v18;
  v26 = v12;
  do
  {
    if (v26 != --v25)
    {
      if (!v9)
        goto LABEL_160;
      v27 = (char *)(v9 + v24);
      v28 = v115 + v23;
      v29 = *((_QWORD *)v27 + 6);
      v110 = *(_OWORD *)v27;
      v111 = *((_OWORD *)v27 + 1);
      v112 = *(_OWORD *)(v27 + 56);
      v113 = *((_OWORD *)v27 + 2);
      result = (uint64_t)memmove(v27, (const void *)(v115 + v23 - 72), 0x48uLL);
      *(_OWORD *)(v28 - 72) = v110;
      *(_OWORD *)(v28 - 56) = v111;
      *(_OWORD *)(v28 - 40) = v113;
      *(_QWORD *)(v28 - 24) = v29;
      *(_OWORD *)(v28 - 16) = v112;
      v9 = v115;
    }
    ++v26;
    v23 -= 72;
    v24 += 72;
  }
  while (v26 < v25);
  v8 = v18;
  v3 = v109;
  if (v18 >= v109)
    goto LABEL_68;
LABEL_47:
  if (__OFSUB__(v8, v12))
    goto LABEL_152;
  if (v8 - v12 >= v108)
    goto LABEL_68;
  if (__OFADD__(v12, v108))
    goto LABEL_155;
  if (v12 + v108 >= v3)
    v30 = v3;
  else
    v30 = v12 + v108;
  if (v30 >= v12)
  {
    if (v8 != v30)
    {
      v31 = v106 + 72 * v8;
      do
      {
        v32 = v9 + 72 * v8;
        result = *(_QWORD *)(v32 + 48);
        v33 = *(_QWORD *)(v32 + 56);
        v34 = v12;
        v35 = v31;
        do
        {
          if (result == *(_QWORD *)(v35 - 80) && v33 == *(_QWORD *)(v35 - 72))
            break;
          result = sub_23C0E4A74();
          if ((result & 1) == 0)
            break;
          if (!v9)
            goto LABEL_158;
          v37 = v35 - 56;
          v38 = *(_OWORD *)v35;
          v39 = (_OWORD *)(v35 - 128);
          v40 = *(_QWORD *)(v35 - 64);
          v42 = *(_OWORD *)(v35 - 96);
          v41 = *(_OWORD *)(v35 - 80);
          *(_OWORD *)(v35 - 72) = *(_OWORD *)v35;
          v35 -= 72;
          v43 = *(_QWORD *)(v35 + 48);
          v44 = *(_QWORD *)(v35 + 56);
          result = *(_QWORD *)(v35 + 64);
          v46 = *(_OWORD *)(v35 + 16);
          v45 = *(_OWORD *)(v35 + 32);
          *(_OWORD *)(v37 + 32) = v42;
          *(_OWORD *)(v37 + 48) = v41;
          *(_QWORD *)(v37 + 64) = v40;
          v47 = v39[1];
          *(_OWORD *)v37 = *v39;
          *(_OWORD *)(v37 + 16) = v47;
          *(_OWORD *)(v35 - 56) = v46;
          *(_OWORD *)(v35 - 40) = v45;
          *(_QWORD *)(v35 - 24) = v43;
          *(_QWORD *)(v35 - 16) = v44;
          v33 = v38;
          ++v34;
          *(_QWORD *)(v35 - 8) = result;
        }
        while (v8 != v34);
        ++v8;
        v31 += 72;
      }
      while (v8 != v30);
      v8 = v30;
    }
    goto LABEL_68;
  }
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
  return result;
}

uint64_t sub_23C083DC4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  unint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  char v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  unint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;

  v3 = a1[1];
  result = sub_23C0E4A5C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_23C084EF0(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_151;
  v112 = result;
  v109 = a1;
  if (v3 <= 1)
  {
    v7 = MEMORY[0x24BEE4AF8];
    v115 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v11 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v10 = MEMORY[0x24BEE4AF8];
LABEL_117:
      result = v10;
      v111 = v7;
      if (v11 >= 2)
      {
        v102 = *v109;
        do
        {
          v103 = v11 - 2;
          if (v11 < 2)
            goto LABEL_146;
          if (!v102)
            goto LABEL_159;
          v104 = result;
          v105 = *(_QWORD *)(result + 32 + 16 * v103);
          v106 = *(_QWORD *)(result + 32 + 16 * (v11 - 1) + 8);
          result = sub_23C085CB8((char *)(v102 + 56 * v105), (char *)(v102 + 56 * *(_QWORD *)(result + 32 + 16 * (v11 - 1))), v102 + 56 * v106, v115);
          if (v1)
            break;
          if (v106 < v105)
            goto LABEL_147;
          result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            result = (uint64_t)sub_23C086044(v104);
            v104 = result;
          }
          if (v103 >= *(_QWORD *)(v104 + 16))
            goto LABEL_148;
          v107 = (_QWORD *)(v104 + 32 + 16 * v103);
          *v107 = v105;
          v107[1] = v106;
          v108 = *(_QWORD *)(v104 + 16);
          if (v11 > v108)
            goto LABEL_149;
          memmove((void *)(v104 + 32 + 16 * (v11 - 1)), (const void *)(v104 + 32 + 16 * v11), 16 * (v108 - v11));
          result = v104;
          *(_QWORD *)(v104 + 16) = v108 - 1;
          v11 = v108 - 1;
        }
        while (v108 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v111 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v111 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    result = sub_23C0E4804();
    *(_QWORD *)(result + 16) = v6;
    v111 = result;
    v115 = (char *)(result + 32);
  }
  v8 = 0;
  v9 = *a1;
  v110 = *a1 + 48;
  v10 = MEMORY[0x24BEE4AF8];
  v113 = v3;
  v114 = *a1;
  while (1)
  {
    v12 = v8++;
    if (v8 >= v3)
      goto LABEL_45;
    v13 = v9 + 56 * v8;
    result = *(_QWORD *)(v13 + 40);
    v14 = *(_QWORD *)(v13 + 48);
    v15 = v9 + 56 * v12;
    if (result == *(_QWORD *)(v15 + 40) && v14 == *(_QWORD *)(v15 + 48))
    {
      v18 = v12 + 2;
      if (v12 + 2 >= v3)
        goto LABEL_44;
      v17 = 0;
    }
    else
    {
      result = sub_23C0E4A74();
      v17 = result;
      v18 = v12 + 2;
      if (v12 + 2 >= v3)
        goto LABEL_36;
    }
    v19 = (_QWORD *)(v110 + 56 * v18);
    do
    {
      result = *(v19 - 1);
      v21 = v9 + 56 * v8;
      if (result == *(_QWORD *)(v21 + 40) && *v19 == *(_QWORD *)(v21 + 48))
      {
        if ((v17 & 1) != 0)
          goto LABEL_37;
      }
      else
      {
        result = sub_23C0E4A74();
        if (((v17 ^ result) & 1) != 0)
          goto LABEL_36;
      }
      v20 = v18 + 1;
      v19 += 7;
      v8 = v18;
      v18 = v20;
    }
    while (v20 < v3);
    v18 = v20;
LABEL_36:
    v8 = v18;
    if ((v17 & 1) != 0)
    {
LABEL_37:
      if (v18 < v12)
        goto LABEL_155;
      if (v12 < v18)
      {
        v23 = 56 * v18;
        v24 = v18;
        v25 = v12;
        v26 = 56 * v12;
        do
        {
          if (v25 != --v24)
          {
            if (!v9)
              goto LABEL_158;
            v27 = v9 + v26;
            v28 = *(_QWORD *)(v9 + v26);
            v29 = v9 + v23;
            v30 = *(_OWORD *)(v9 + v26 + 24);
            v31 = *(_QWORD *)(v9 + v26 + 40);
            v32 = *(_QWORD *)(v9 + v26 + 48);
            v33 = *(_OWORD *)(v9 + v26 + 8);
            v34 = *(_OWORD *)(v9 + v23 - 40);
            v35 = *(_OWORD *)(v9 + v23 - 24);
            v36 = *(_OWORD *)(v9 + v23 - 56);
            *(_QWORD *)(v27 + 48) = *(_QWORD *)(v9 + v23 - 8);
            *(_OWORD *)(v27 + 16) = v34;
            *(_OWORD *)(v27 + 32) = v35;
            *(_OWORD *)v27 = v36;
            *(_QWORD *)(v29 - 56) = v28;
            *(_OWORD *)(v29 - 48) = v33;
            *(_OWORD *)(v29 - 32) = v30;
            *(_QWORD *)(v29 - 16) = v31;
            *(_QWORD *)(v29 - 8) = v32;
          }
          ++v25;
          v23 -= 56;
          v26 += 56;
        }
        while (v25 < v24);
      }
LABEL_44:
      v8 = v18;
    }
LABEL_45:
    if (v8 < v3)
    {
      if (__OFSUB__(v8, v12))
        goto LABEL_150;
      if (v8 - v12 < v112)
        break;
    }
LABEL_66:
    if (v8 < v12)
      goto LABEL_145;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_23C085F4C(0, *(_QWORD *)(v10 + 16) + 1, 1, (char *)v10);
      v10 = result;
    }
    v53 = *(_QWORD *)(v10 + 16);
    v52 = *(_QWORD *)(v10 + 24);
    v11 = v53 + 1;
    if (v53 >= v52 >> 1)
    {
      result = (uint64_t)sub_23C085F4C((char *)(v52 > 1), v53 + 1, 1, (char *)v10);
      v10 = result;
    }
    *(_QWORD *)(v10 + 16) = v11;
    v54 = v10 + 32;
    v55 = (uint64_t *)(v10 + 32 + 16 * v53);
    *v55 = v12;
    v55[1] = v8;
    if (v53)
    {
      v9 = v114;
      while (1)
      {
        v56 = v11 - 1;
        if (v11 >= 4)
        {
          v61 = v54 + 16 * v11;
          v62 = *(_QWORD *)(v61 - 64);
          v63 = *(_QWORD *)(v61 - 56);
          v67 = __OFSUB__(v63, v62);
          v64 = v63 - v62;
          if (v67)
            goto LABEL_134;
          v66 = *(_QWORD *)(v61 - 48);
          v65 = *(_QWORD *)(v61 - 40);
          v67 = __OFSUB__(v65, v66);
          v59 = v65 - v66;
          v60 = v67;
          if (v67)
            goto LABEL_135;
          v68 = v11 - 2;
          v69 = (uint64_t *)(v54 + 16 * (v11 - 2));
          v71 = *v69;
          v70 = v69[1];
          v67 = __OFSUB__(v70, v71);
          v72 = v70 - v71;
          if (v67)
            goto LABEL_136;
          v67 = __OFADD__(v59, v72);
          v73 = v59 + v72;
          if (v67)
            goto LABEL_138;
          if (v73 >= v64)
          {
            v91 = (uint64_t *)(v54 + 16 * v56);
            v93 = *v91;
            v92 = v91[1];
            v67 = __OFSUB__(v92, v93);
            v94 = v92 - v93;
            if (v67)
              goto LABEL_144;
            v84 = v59 < v94;
            goto LABEL_104;
          }
        }
        else
        {
          if (v11 != 3)
          {
            v85 = *(_QWORD *)(v10 + 32);
            v86 = *(_QWORD *)(v10 + 40);
            v67 = __OFSUB__(v86, v85);
            v78 = v86 - v85;
            v79 = v67;
            goto LABEL_98;
          }
          v58 = *(_QWORD *)(v10 + 32);
          v57 = *(_QWORD *)(v10 + 40);
          v67 = __OFSUB__(v57, v58);
          v59 = v57 - v58;
          v60 = v67;
        }
        if ((v60 & 1) != 0)
          goto LABEL_137;
        v68 = v11 - 2;
        v74 = (uint64_t *)(v54 + 16 * (v11 - 2));
        v76 = *v74;
        v75 = v74[1];
        v77 = __OFSUB__(v75, v76);
        v78 = v75 - v76;
        v79 = v77;
        if (v77)
          goto LABEL_139;
        v80 = (uint64_t *)(v54 + 16 * v56);
        v82 = *v80;
        v81 = v80[1];
        v67 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v67)
          goto LABEL_141;
        if (__OFADD__(v78, v83))
          goto LABEL_143;
        if (v78 + v83 >= v59)
        {
          v84 = v59 < v83;
LABEL_104:
          if (v84)
            v56 = v68;
          goto LABEL_106;
        }
LABEL_98:
        if ((v79 & 1) != 0)
          goto LABEL_140;
        v87 = (uint64_t *)(v54 + 16 * v56);
        v89 = *v87;
        v88 = v87[1];
        v67 = __OFSUB__(v88, v89);
        v90 = v88 - v89;
        if (v67)
          goto LABEL_142;
        if (v90 < v78)
          goto LABEL_15;
LABEL_106:
        v95 = v56 - 1;
        if (v56 - 1 >= v11)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!v9)
          goto LABEL_157;
        v96 = v9;
        v97 = (uint64_t *)(v54 + 16 * v95);
        v98 = *v97;
        v99 = (_QWORD *)(v54 + 16 * v56);
        v100 = v99[1];
        result = sub_23C085CB8((char *)(v96 + 56 * *v97), (char *)(v96 + 56 * *v99), v96 + 56 * v100, v115);
        if (v1)
          goto LABEL_114;
        if (v100 < v98)
          goto LABEL_131;
        if (v56 > *(_QWORD *)(v10 + 16))
          goto LABEL_132;
        *v97 = v98;
        *(_QWORD *)(v54 + 16 * v95 + 8) = v100;
        v101 = *(_QWORD *)(v10 + 16);
        if (v56 >= v101)
          goto LABEL_133;
        v11 = v101 - 1;
        result = (uint64_t)memmove((void *)(v54 + 16 * v56), v99 + 2, 16 * (v101 - 1 - v56));
        *(_QWORD *)(v10 + 16) = v101 - 1;
        v84 = v101 > 2;
        v9 = v114;
        if (!v84)
          goto LABEL_15;
      }
    }
    v11 = 1;
    v9 = v114;
LABEL_15:
    v3 = v113;
    if (v8 >= v113)
    {
      v7 = v111;
      goto LABEL_117;
    }
  }
  if (__OFADD__(v12, v112))
    goto LABEL_153;
  if (v12 + v112 >= v3)
    v37 = v3;
  else
    v37 = v12 + v112;
  if (v37 >= v12)
  {
    if (v8 != v37)
    {
      v38 = v110 + 56 * v8;
      do
      {
        v39 = v9 + 56 * v8;
        result = *(_QWORD *)(v39 + 40);
        v40 = *(_QWORD *)(v39 + 48);
        v41 = v12;
        v42 = v38;
        do
        {
          if (result == *(_QWORD *)(v42 - 64) && v40 == *(_QWORD *)(v42 - 56))
            break;
          result = sub_23C0E4A74();
          if ((result & 1) == 0)
            break;
          if (!v9)
            goto LABEL_156;
          v44 = v42 - 48;
          v40 = *(_QWORD *)v42;
          v45 = (_OWORD *)(v42 - 104);
          v46 = *(_QWORD *)(v42 - 56);
          *(_QWORD *)(v42 - 56) = *(_QWORD *)v42;
          v42 -= 56;
          v47 = *(_QWORD *)(v42 + 8);
          v48 = *(_QWORD *)(v42 + 32);
          v49 = *(_QWORD *)(v42 + 40);
          result = *(_QWORD *)(v42 + 48);
          v50 = *(_OWORD *)(v42 + 16);
          v51 = v45[1];
          *(_OWORD *)v44 = *v45;
          *(_OWORD *)(v44 + 16) = v51;
          *(_OWORD *)(v44 + 32) = v45[2];
          *(_QWORD *)(v44 + 48) = v46;
          *(_QWORD *)(v42 - 48) = v47;
          *(_OWORD *)(v42 - 40) = v50;
          *(_QWORD *)(v42 - 24) = v48;
          *(_QWORD *)(v42 - 16) = v49;
          *(_QWORD *)(v42 - 8) = result;
          ++v41;
        }
        while (v8 != v41);
        ++v8;
        v38 += 56;
      }
      while (v8 != v37);
      v8 = v37;
    }
    goto LABEL_66;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
  return result;
}

uint64_t sub_23C0844CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  double *v32;
  double v33;
  uint64_t v34;
  double *v35;
  double *v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t i;
  double v97;
  uint64_t v98;
  double *v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  double *v120;

  v3 = a1[1];
  result = sub_23C0E4A5C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_138;
    if ((unint64_t)v3 >= 2)
    {
      v93 = *a1;
      v94 = *a1 + 40;
      v95 = -1;
      for (i = 1; i != v3; ++i)
      {
        v97 = *(double *)(v93 + 40 * i + 24);
        v98 = v95;
        v99 = (double *)v94;
        do
        {
          if (v97 >= *(v99 - 2))
            break;
          if (!v93)
            goto LABEL_142;
          v100 = *v99;
          v101 = *((_QWORD *)v99 + 1);
          v102 = *((_QWORD *)v99 + 2);
          v103 = *((_QWORD *)v99 + 4);
          v104 = *(_OWORD *)(v99 - 3);
          *(_OWORD *)v99 = *(_OWORD *)(v99 - 5);
          *((_OWORD *)v99 + 1) = v104;
          v99[4] = *(v99 - 1);
          *((_QWORD *)v99 - 4) = v101;
          *((_QWORD *)v99 - 3) = v102;
          *(v99 - 2) = v97;
          *((_QWORD *)v99 - 1) = v103;
          *(v99 - 5) = v100;
          v99 -= 5;
        }
        while (!__CFADD__(v98++, 1));
        v94 += 40;
        --v95;
      }
    }
  }
  else
  {
    if (v3 >= 0)
      v5 = v3;
    else
      v5 = v3 + 1;
    if (v3 < -1)
      goto LABEL_137;
    v6 = result;
    v114 = a1;
    if (v3 > 1)
    {
      v7 = v5 >> 1;
      result = sub_23C0E4804();
      *(_QWORD *)(result + 16) = v7;
      v116 = result;
      v120 = (double *)(result + 32);
LABEL_13:
      v9 = 0;
      v10 = *a1;
      v115 = *a1 + 104;
      v113 = *a1 + 32;
      v11 = MEMORY[0x24BEE4AF8];
      v117 = v6;
      v118 = v3;
      v119 = v10;
      while (1)
      {
        v13 = v9++;
        if (v9 < v3)
        {
          v14 = *(double *)(v10 + 40 * v9 + 24);
          v15 = *(double *)(v10 + 40 * v13 + 24);
          v9 = v13 + 2;
          if (v13 + 2 < v3)
          {
            v16 = (double *)(v115 + 40 * v13);
            v17 = v14;
            while (1)
            {
              v18 = v17;
              v17 = *v16;
              if (v14 < v15 == *v16 >= v18)
                break;
              ++v9;
              v16 += 5;
              if (v3 == v9)
              {
                v9 = v3;
                break;
              }
            }
          }
          if (v14 < v15)
          {
            if (v9 < v13)
              goto LABEL_139;
            if (v13 < v9)
            {
              v19 = 40 * v9;
              v20 = 40 * v13;
              v21 = v9;
              v22 = v13;
              do
              {
                if (v22 != --v21)
                {
                  if (!v10)
                    goto LABEL_145;
                  v23 = v10 + v20;
                  v24 = v10 + v19;
                  v25 = *(_QWORD *)(v10 + v20);
                  v26 = *(_QWORD *)(v10 + v20 + 8);
                  v27 = *(_QWORD *)(v10 + v20 + 32);
                  v28 = *(_OWORD *)(v10 + v20 + 16);
                  v29 = *(_QWORD *)(v10 + v19 - 8);
                  v30 = *(_OWORD *)(v10 + v19 - 24);
                  *(_OWORD *)v23 = *(_OWORD *)(v10 + v19 - 40);
                  *(_OWORD *)(v23 + 16) = v30;
                  *(_QWORD *)(v23 + 32) = v29;
                  *(_QWORD *)(v24 - 40) = v25;
                  *(_QWORD *)(v24 - 32) = v26;
                  *(_OWORD *)(v24 - 24) = v28;
                  *(_QWORD *)(v24 - 8) = v27;
                }
                ++v22;
                v19 -= 40;
                v20 += 40;
              }
              while (v22 < v21);
            }
          }
        }
        if (v9 < v3)
        {
          if (__OFSUB__(v9, v13))
            goto LABEL_136;
          if (v9 - v13 < v6)
          {
            v31 = v13 + v6;
            if (__OFADD__(v13, v6))
              goto LABEL_140;
            if (v31 >= v3)
              v31 = v3;
            if (v31 < v13)
            {
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
              return result;
            }
            if (v9 != v31)
            {
              v32 = (double *)(v113 + 40 * v9);
              do
              {
                v33 = *(double *)(v10 + 40 * v9 + 24);
                v34 = v13;
                v35 = v32;
                do
                {
                  if (v33 >= *(v35 - 6))
                    break;
                  if (!v10)
                    goto LABEL_143;
                  v36 = v35 - 4;
                  v37 = v35 - 9;
                  v38 = *((_QWORD *)v35 - 5);
                  *(v35 - 5) = *v35;
                  v35 -= 5;
                  v39 = *((_QWORD *)v35 + 1);
                  v40 = *((_QWORD *)v35 + 2);
                  v41 = *((_QWORD *)v35 + 3);
                  v42 = *((_OWORD *)v37 + 1);
                  *(_OWORD *)v36 = *(_OWORD *)v37;
                  *((_OWORD *)v36 + 1) = v42;
                  *((_QWORD *)v36 + 4) = v38;
                  *((_QWORD *)v35 - 4) = v39;
                  *((_QWORD *)v35 - 3) = v40;
                  *((_QWORD *)v35 - 2) = v41;
                  *(v35 - 1) = v33;
                  ++v34;
                }
                while (v9 != v34);
                ++v9;
                v32 += 5;
              }
              while (v9 != v31);
              v9 = v31;
            }
          }
        }
        if (v9 < v13)
          goto LABEL_131;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_23C085F4C(0, *(_QWORD *)(v11 + 16) + 1, 1, (char *)v11);
          v11 = result;
        }
        v44 = *(_QWORD *)(v11 + 16);
        v43 = *(_QWORD *)(v11 + 24);
        v12 = v44 + 1;
        v10 = v119;
        if (v44 >= v43 >> 1)
        {
          result = (uint64_t)sub_23C085F4C((char *)(v43 > 1), v44 + 1, 1, (char *)v11);
          v10 = v119;
          v11 = result;
        }
        *(_QWORD *)(v11 + 16) = v12;
        v45 = v11 + 32;
        v46 = (uint64_t *)(v11 + 32 + 16 * v44);
        *v46 = v13;
        v46[1] = v9;
        if (v44)
        {
          while (1)
          {
            v47 = v12 - 1;
            if (v12 >= 4)
            {
              v52 = v45 + 16 * v12;
              v53 = *(_QWORD *)(v52 - 64);
              v54 = *(_QWORD *)(v52 - 56);
              v58 = __OFSUB__(v54, v53);
              v55 = v54 - v53;
              if (v58)
                goto LABEL_120;
              v57 = *(_QWORD *)(v52 - 48);
              v56 = *(_QWORD *)(v52 - 40);
              v58 = __OFSUB__(v56, v57);
              v50 = v56 - v57;
              v51 = v58;
              if (v58)
                goto LABEL_121;
              v59 = v12 - 2;
              v60 = (uint64_t *)(v45 + 16 * (v12 - 2));
              v62 = *v60;
              v61 = v60[1];
              v58 = __OFSUB__(v61, v62);
              v63 = v61 - v62;
              if (v58)
                goto LABEL_122;
              v58 = __OFADD__(v50, v63);
              v64 = v50 + v63;
              if (v58)
                goto LABEL_124;
              if (v64 >= v55)
              {
                v82 = (uint64_t *)(v45 + 16 * v47);
                v84 = *v82;
                v83 = v82[1];
                v58 = __OFSUB__(v83, v84);
                v85 = v83 - v84;
                if (v58)
                  goto LABEL_130;
                v75 = v50 < v85;
                goto LABEL_83;
              }
            }
            else
            {
              if (v12 != 3)
              {
                v76 = *(_QWORD *)(v11 + 32);
                v77 = *(_QWORD *)(v11 + 40);
                v58 = __OFSUB__(v77, v76);
                v69 = v77 - v76;
                v70 = v58;
                goto LABEL_77;
              }
              v49 = *(_QWORD *)(v11 + 32);
              v48 = *(_QWORD *)(v11 + 40);
              v58 = __OFSUB__(v48, v49);
              v50 = v48 - v49;
              v51 = v58;
            }
            if ((v51 & 1) != 0)
              goto LABEL_123;
            v59 = v12 - 2;
            v65 = (uint64_t *)(v45 + 16 * (v12 - 2));
            v67 = *v65;
            v66 = v65[1];
            v68 = __OFSUB__(v66, v67);
            v69 = v66 - v67;
            v70 = v68;
            if (v68)
              goto LABEL_125;
            v71 = (uint64_t *)(v45 + 16 * v47);
            v73 = *v71;
            v72 = v71[1];
            v58 = __OFSUB__(v72, v73);
            v74 = v72 - v73;
            if (v58)
              goto LABEL_127;
            if (__OFADD__(v69, v74))
              goto LABEL_129;
            if (v69 + v74 >= v50)
            {
              v75 = v50 < v74;
LABEL_83:
              if (v75)
                v47 = v59;
              goto LABEL_85;
            }
LABEL_77:
            if ((v70 & 1) != 0)
              goto LABEL_126;
            v78 = (uint64_t *)(v45 + 16 * v47);
            v80 = *v78;
            v79 = v78[1];
            v58 = __OFSUB__(v79, v80);
            v81 = v79 - v80;
            if (v58)
              goto LABEL_128;
            if (v81 < v69)
              goto LABEL_15;
LABEL_85:
            v86 = v47 - 1;
            if (v47 - 1 >= v12)
            {
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              goto LABEL_141;
            }
            if (!v10)
              goto LABEL_144;
            v87 = v11;
            v88 = (uint64_t *)(v45 + 16 * v86);
            v89 = *v88;
            v90 = (_QWORD *)(v45 + 16 * v47);
            v91 = v90[1];
            result = sub_23C085A64((double *)(v10 + 40 * *v88), (double *)(v10 + 40 * *v90), v10 + 40 * v91, v120);
            if (v1)
              goto LABEL_93;
            if (v91 < v89)
              goto LABEL_117;
            if (v47 > *(_QWORD *)(v87 + 16))
              goto LABEL_118;
            *v88 = v89;
            *(_QWORD *)(v45 + 16 * v86 + 8) = v91;
            v92 = *(_QWORD *)(v87 + 16);
            if (v47 >= v92)
              goto LABEL_119;
            v11 = v87;
            v12 = v92 - 1;
            result = (uint64_t)memmove((void *)(v45 + 16 * v47), v90 + 2, 16 * (v92 - 1 - v47));
            *(_QWORD *)(v87 + 16) = v92 - 1;
            v10 = v119;
            if (v92 <= 2)
              goto LABEL_15;
          }
        }
        v12 = 1;
LABEL_15:
        v6 = v117;
        v3 = v118;
        if (v9 >= v118)
        {
          v8 = v116;
          goto LABEL_103;
        }
      }
    }
    v8 = MEMORY[0x24BEE4AF8];
    v120 = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 == 1)
    {
      v116 = MEMORY[0x24BEE4AF8];
      goto LABEL_13;
    }
    v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    v11 = MEMORY[0x24BEE4AF8];
LABEL_103:
    result = v11;
    v116 = v8;
    if (v12 >= 2)
    {
      v106 = *v114;
      do
      {
        v107 = v12 - 2;
        if (v12 < 2)
          goto LABEL_132;
        if (!v106)
          goto LABEL_146;
        v108 = result;
        v109 = *(_QWORD *)(result + 32 + 16 * v107);
        v110 = *(_QWORD *)(result + 32 + 16 * (v12 - 1) + 8);
        result = sub_23C085A64((double *)(v106 + 40 * v109), (double *)(v106 + 40 * *(_QWORD *)(result + 32 + 16 * (v12 - 1))), v106 + 40 * v110, v120);
        if (v1)
          break;
        if (v110 < v109)
          goto LABEL_133;
        result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_23C086044(v108);
          v108 = result;
        }
        if (v107 >= *(_QWORD *)(v108 + 16))
          goto LABEL_134;
        v111 = (_QWORD *)(v108 + 32 + 16 * v107);
        *v111 = v109;
        v111[1] = v110;
        v112 = *(_QWORD *)(v108 + 16);
        if (v12 > v112)
          goto LABEL_135;
        memmove((void *)(v108 + 32 + 16 * (v12 - 1)), (const void *)(v108 + 32 + 16 * v12), 16 * (v112 - v12));
        result = v108;
        *(_QWORD *)(v108 + 16) = v112 - 1;
        v12 = v112 - 1;
      }
      while (v112 > 2);
    }
LABEL_93:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v116 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C084BC8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (a3 != a2)
    return ((uint64_t (*)(void))((char *)&loc_23C084C14
                              + *((int *)qword_23C084CC0 + *(unsigned __int8 *)(*a4 + 48 * a3 - 8))))();
  return result;
}

uint64_t sub_23C084CE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 72 * a3 + 64;
LABEL_5:
    v9 = v7 + 72 * v4;
    result = *(_QWORD *)(v9 + 56);
    v10 = *(_QWORD *)(v9 + 64);
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 10) && v10 == *(v12 - 9);
      if (v13 || (result = sub_23C0E4A74(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 72;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v14 = v12 - 8;
      v15 = *(v12 - 8);
      v16 = *(v12 - 5);
      v17 = *(v12 - 4);
      result = *(v12 - 1);
      v10 = *v12;
      v18 = *(_OWORD *)(v12 - 7);
      v19 = *(_OWORD *)(v12 - 3);
      v20 = *(_OWORD *)(v12 - 11);
      *((_OWORD *)v14 + 2) = *(_OWORD *)(v12 - 13);
      *((_OWORD *)v14 + 3) = v20;
      *v12 = *(v12 - 9);
      v21 = *(_OWORD *)(v12 - 15);
      *(_OWORD *)v14 = *(_OWORD *)(v12 - 17);
      *((_OWORD *)v14 + 1) = v21;
      *(v12 - 9) = v10;
      v12 -= 9;
      *(v12 - 8) = v15;
      *(_OWORD *)(v12 - 7) = v18;
      *(v12 - 5) = v16;
      *(v12 - 4) = v17;
      *(_OWORD *)(v12 - 3) = v19;
      ++v11;
      *(v12 - 1) = result;
      if (v4 == v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23C084DEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  __int128 v15;
  _OWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 72 * a3 + 56;
LABEL_5:
    v9 = v7 + 72 * v4;
    result = *(_QWORD *)(v9 + 48);
    v10 = *(_QWORD *)(v9 + 56);
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = result == *(_QWORD *)(v12 - 80) && v10 == *(_QWORD *)(v12 - 72);
      if (v13 || (result = sub_23C0E4A74(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 72;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v14 = v12 - 56;
      v15 = *(_OWORD *)v12;
      v16 = (_OWORD *)(v12 - 128);
      v17 = *(_QWORD *)(v12 - 64);
      v19 = *(_OWORD *)(v12 - 96);
      v18 = *(_OWORD *)(v12 - 80);
      *(_OWORD *)(v12 - 72) = *(_OWORD *)v12;
      v12 -= 72;
      v20 = *(_QWORD *)(v12 + 48);
      v21 = *(_QWORD *)(v12 + 56);
      result = *(_QWORD *)(v12 + 64);
      v23 = *(_OWORD *)(v12 + 16);
      v22 = *(_OWORD *)(v12 + 32);
      *(_OWORD *)(v14 + 32) = v19;
      *(_OWORD *)(v14 + 48) = v18;
      *(_QWORD *)(v14 + 64) = v17;
      v24 = v16[1];
      *(_OWORD *)v14 = *v16;
      *(_OWORD *)(v14 + 16) = v24;
      *(_OWORD *)(v12 - 56) = v23;
      *(_OWORD *)(v12 - 40) = v22;
      *(_QWORD *)(v12 - 24) = v20;
      *(_QWORD *)(v12 - 16) = v21;
      v10 = v15;
      ++v11;
      *(_QWORD *)(v12 - 8) = result;
      if (v4 == v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23C084EF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 56 * a3 + 48;
LABEL_5:
    v9 = v7 + 56 * v4;
    result = *(_QWORD *)(v9 + 40);
    v10 = *(_QWORD *)(v9 + 48);
    v11 = v6;
    v12 = v8;
    while (1)
    {
      v13 = result == *(_QWORD *)(v12 - 64) && v10 == *(_QWORD *)(v12 - 56);
      if (v13 || (result = sub_23C0E4A74(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 56;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      v14 = v12 - 48;
      v10 = *(_QWORD *)v12;
      v15 = (_OWORD *)(v12 - 104);
      v16 = *(_QWORD *)(v12 - 56);
      *(_QWORD *)(v12 - 56) = *(_QWORD *)v12;
      v12 -= 56;
      v17 = *(_QWORD *)(v12 + 8);
      v18 = *(_QWORD *)(v12 + 32);
      v19 = *(_QWORD *)(v12 + 40);
      result = *(_QWORD *)(v12 + 48);
      v20 = *(_OWORD *)(v12 + 16);
      v21 = v15[1];
      *(_OWORD *)v14 = *v15;
      *(_OWORD *)(v14 + 16) = v21;
      *(_OWORD *)(v14 + 32) = v15[2];
      *(_QWORD *)(v14 + 48) = v16;
      *(_QWORD *)(v12 - 48) = v17;
      *(_OWORD *)(v12 - 40) = v20;
      *(_QWORD *)(v12 - 24) = v18;
      *(_QWORD *)(v12 - 16) = v19;
      *(_QWORD *)(v12 - 8) = result;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23C084FF4(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;

  v6 = __src;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 48;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 48;
  if (v9 >= v11)
  {
    v14 = 48 * v11;
    if (a4 != __src || &__src[v14] <= a4)
      memmove(a4, __src, 48 * v11);
    v13 = &a4[v14];
    if (__dst < v6 && v10 >= 48)
      __asm { BR              X16 }
  }
  else
  {
    v12 = 48 * v9;
    if (a4 != __dst || &__dst[v12] <= a4)
      memmove(a4, __dst, v12);
    v13 = &a4[v12];
    if ((unint64_t)v6 < a3 && v8 >= 48)
      __asm { BR              X12 }
    v6 = __dst;
  }
  v15 = (unsigned __int128)((v13 - a4) * (__int128)0x2AAAAAAAAAAAAAABLL) >> 64;
  v16 = 48 * ((v15 >> 3) + ((unint64_t)v15 >> 63));
  if (v6 != a4 || v6 >= &a4[v16])
    memmove(v6, a4, v16);
  return 1;
}

uint64_t sub_23C085310(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  uint64_t v20;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 72;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 72;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[72 * v11] <= a4)
      memmove(a4, __src, 72 * v11);
    v12 = &v4[72 * v11];
    if (v7 >= v6 || v10 < 72)
      goto LABEL_39;
    v16 = (char *)(a3 - 72);
    while (1)
    {
      v17 = v16 + 72;
      if (*((_QWORD *)v12 - 2) >= *((_QWORD *)v6 - 2))
      {
        v18 = v12 - 72;
        if (v17 != v12)
        {
          v12 -= 72;
          goto LABEL_36;
        }
        v19 = v16 >= v12;
        v12 -= 72;
        if (v19)
          goto LABEL_36;
      }
      else
      {
        v18 = v6 - 72;
        if (v17 != v6)
        {
          v6 -= 72;
LABEL_36:
          memmove(v16, v18, 0x48uLL);
          goto LABEL_37;
        }
        v19 = v16 >= v6;
        v6 -= 72;
        if (v19)
          goto LABEL_36;
      }
LABEL_37:
      if (v6 > v7)
      {
        v16 -= 72;
        if (v12 > v4)
          continue;
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[72 * v9] <= a4)
    memmove(a4, __dst, 72 * v9);
  v12 = &v4[72 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 72)
  {
    while (1)
    {
      if (*((_QWORD *)v6 + 7) >= *((_QWORD *)v4 + 7))
      {
        v15 = v4 + 72;
        v14 = v4;
        v13 = v6;
        if (v7 == v4)
        {
          v4 += 72;
          if (v7 < v15)
            goto LABEL_16;
        }
        else
        {
          v4 += 72;
        }
      }
      else
      {
        v13 = v6 + 72;
        v14 = v6;
        if (v7 == v6 && v7 < v13)
          goto LABEL_16;
      }
      memmove(v7, v14, 0x48uLL);
LABEL_16:
      v7 += 72;
      if (v4 < v12)
      {
        v6 = v13;
        if ((unint64_t)v13 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v20 = (v12 - v4) / 72;
  if (v6 != v4 || v6 >= &v4[72 * v20])
    memmove(v6, v4, 72 * v20);
  return 1;
}

uint64_t sub_23C08556C(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  char *v20;
  BOOL v21;
  uint64_t v22;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 72;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 72;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[72 * v11] <= a4)
      memmove(a4, __src, 72 * v11);
    v12 = &v4[72 * v11];
    if (v7 >= v6 || v10 < 72)
      goto LABEL_47;
    v17 = (char *)(a3 - 72);
    while (1)
    {
      v18 = v17 + 72;
      v19 = *((_QWORD *)v12 - 2) == *((_QWORD *)v6 - 2) && *((_QWORD *)v12 - 1) == *((_QWORD *)v6 - 1);
      if (v19 || (sub_23C0E4A74() & 1) == 0)
      {
        v20 = v12 - 72;
        if (v18 != v12)
        {
          v12 -= 72;
LABEL_44:
          memmove(v17, v20, 0x48uLL);
          goto LABEL_45;
        }
        v21 = v17 >= v12;
        v12 -= 72;
        if (v21)
          goto LABEL_44;
      }
      else
      {
        v20 = v6 - 72;
        if (v18 != v6)
        {
          v6 -= 72;
          goto LABEL_44;
        }
        v21 = v17 >= v6;
        v6 -= 72;
        if (v21)
          goto LABEL_44;
      }
LABEL_45:
      if (v6 > v7)
      {
        v17 -= 72;
        if (v12 > v4)
          continue;
      }
      goto LABEL_47;
    }
  }
  if (a4 != __dst || &__dst[72 * v9] <= a4)
    memmove(a4, __dst, 72 * v9);
  v12 = &v4[72 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 72)
  {
    while (1)
    {
      v13 = *((_QWORD *)v6 + 7) == *((_QWORD *)v4 + 7) && *((_QWORD *)v6 + 8) == *((_QWORD *)v4 + 8);
      if (v13 || (sub_23C0E4A74() & 1) == 0)
      {
        v16 = v4 + 72;
        v15 = v4;
        v14 = v6;
        if (v7 == v4)
        {
          v4 += 72;
          if (v7 < v16)
            goto LABEL_20;
        }
        else
        {
          v4 += 72;
        }
      }
      else
      {
        v14 = v6 + 72;
        v15 = v6;
        if (v7 == v6 && v7 < v14)
          goto LABEL_20;
      }
      memmove(v7, v15, 0x48uLL);
LABEL_20:
      v7 += 72;
      if (v4 < v12)
      {
        v6 = v14;
        if ((unint64_t)v14 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_47:
  v22 = (v12 - v4) / 72;
  if (v6 != v4 || v6 >= &v4[72 * v22])
    memmove(v6, v4, 72 * v22);
  return 1;
}

uint64_t sub_23C0857E8(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  BOOL v19;
  char *v20;
  BOOL v21;
  uint64_t v22;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 72;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 72;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[72 * v11] <= a4)
      memmove(a4, __src, 72 * v11);
    v12 = &v4[72 * v11];
    if (v7 >= v6 || v10 < 72)
      goto LABEL_47;
    v17 = (char *)(a3 - 72);
    while (1)
    {
      v18 = v17 + 72;
      v19 = *((_QWORD *)v12 - 3) == *((_QWORD *)v6 - 3) && *((_QWORD *)v12 - 2) == *((_QWORD *)v6 - 2);
      if (v19 || (sub_23C0E4A74() & 1) == 0)
      {
        v20 = v12 - 72;
        if (v18 != v12)
        {
          v12 -= 72;
LABEL_44:
          memmove(v17, v20, 0x48uLL);
          goto LABEL_45;
        }
        v21 = v17 >= v12;
        v12 -= 72;
        if (v21)
          goto LABEL_44;
      }
      else
      {
        v20 = v6 - 72;
        if (v18 != v6)
        {
          v6 -= 72;
          goto LABEL_44;
        }
        v21 = v17 >= v6;
        v6 -= 72;
        if (v21)
          goto LABEL_44;
      }
LABEL_45:
      if (v6 > v7)
      {
        v17 -= 72;
        if (v12 > v4)
          continue;
      }
      goto LABEL_47;
    }
  }
  if (a4 != __dst || &__dst[72 * v9] <= a4)
    memmove(a4, __dst, 72 * v9);
  v12 = &v4[72 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 72)
  {
    while (1)
    {
      v13 = *((_QWORD *)v6 + 6) == *((_QWORD *)v4 + 6) && *((_QWORD *)v6 + 7) == *((_QWORD *)v4 + 7);
      if (v13 || (sub_23C0E4A74() & 1) == 0)
      {
        v16 = v4 + 72;
        v15 = v4;
        v14 = v6;
        if (v7 == v4)
        {
          v4 += 72;
          if (v7 < v16)
            goto LABEL_20;
        }
        else
        {
          v4 += 72;
        }
      }
      else
      {
        v14 = v6 + 72;
        v15 = v6;
        if (v7 == v6 && v7 < v14)
          goto LABEL_20;
      }
      memmove(v7, v15, 0x48uLL);
LABEL_20:
      v7 += 72;
      if (v4 < v12)
      {
        v6 = v14;
        if ((unint64_t)v14 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_47:
  v22 = (v12 - v4) / 72;
  if (v6 != v4 || v6 >= &v4[72 * v22])
    memmove(v6, v4, 72 * v22);
  return 1;
}

uint64_t sub_23C085A64(double *__dst, double *__src, unint64_t a3, double *a4)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  double *v19;
  double *v20;
  BOOL v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = (char *)__src - (char *)__dst;
  v9 = ((char *)__src - (char *)__dst) / 40;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 40;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[5 * v11] <= a4)
      memmove(a4, __src, 40 * v11);
    v12 = &v4[5 * v11];
    if (v7 >= v6 || v10 < 40)
      goto LABEL_39;
    v18 = a3 - 40;
    while (1)
    {
      v19 = (double *)(v18 + 40);
      if (*(v12 - 2) >= *(v6 - 2))
      {
        v20 = v12 - 5;
        if (v19 != v12)
        {
          v12 -= 5;
          goto LABEL_36;
        }
        v21 = v18 >= (unint64_t)v12;
        v12 -= 5;
        if (v21)
          goto LABEL_36;
      }
      else
      {
        v20 = v6 - 5;
        if (v19 != v6)
        {
          v6 -= 5;
LABEL_36:
          v22 = *(_OWORD *)v20;
          v23 = *((_OWORD *)v20 + 1);
          *(double *)(v18 + 32) = v20[4];
          *(_OWORD *)v18 = v22;
          *(_OWORD *)(v18 + 16) = v23;
          goto LABEL_37;
        }
        v21 = v18 >= (unint64_t)v6;
        v6 -= 5;
        if (v21)
          goto LABEL_36;
      }
LABEL_37:
      if (v6 > v7)
      {
        v18 -= 40;
        if (v12 > v4)
          continue;
      }
      goto LABEL_39;
    }
  }
  if (a4 != __dst || &__dst[5 * v9] <= a4)
    memmove(a4, __dst, 40 * v9);
  v12 = &v4[5 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 40)
  {
    while (1)
    {
      if (v6[3] >= v4[3])
      {
        v15 = v4 + 5;
        v14 = v4;
        v13 = v6;
        if (v7 == v4)
        {
          v4 += 5;
          if (v7 < v15)
            goto LABEL_16;
        }
        else
        {
          v4 += 5;
        }
      }
      else
      {
        v13 = v6 + 5;
        v14 = v6;
        if (v7 == v6 && v7 < v13)
          goto LABEL_16;
      }
      v16 = *(_OWORD *)v14;
      v17 = *((_OWORD *)v14 + 1);
      v7[4] = v14[4];
      *(_OWORD *)v7 = v16;
      *((_OWORD *)v7 + 1) = v17;
LABEL_16:
      v7 += 5;
      if (v4 < v12)
      {
        v6 = v13;
        if ((unint64_t)v13 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_39:
  v24 = (unsigned __int128)(((char *)v12 - (char *)v4) * (__int128)0x6666666666666667) >> 64;
  v25 = (v24 >> 4) + ((unint64_t)v24 >> 63);
  if (v6 != v4 || v6 >= &v4[5 * v25])
    memmove(v6, v4, 40 * v25);
  return 1;
}

uint64_t sub_23C085CB8(char *__dst, char *__src, unint64_t a3, char *a4)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  BOOL v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  BOOL v22;
  char *v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v4 = a4;
  v6 = __src;
  v7 = __dst;
  v8 = __src - __dst;
  v9 = (__src - __dst) / 56;
  v10 = a3 - (_QWORD)__src;
  v11 = (uint64_t)(a3 - (_QWORD)__src) / 56;
  if (v9 >= v11)
  {
    if (a4 != __src || &__src[56 * v11] <= a4)
      memmove(a4, __src, 56 * v11);
    v12 = &v4[56 * v11];
    if (v7 >= v6 || v10 < 56)
      goto LABEL_47;
    v20 = a3 - 56;
    while (1)
    {
      v21 = (char *)(v20 + 56);
      v22 = *((_QWORD *)v12 - 2) == *((_QWORD *)v6 - 2) && *((_QWORD *)v12 - 1) == *((_QWORD *)v6 - 1);
      if (v22 || (sub_23C0E4A74() & 1) == 0)
      {
        v23 = v12 - 56;
        if (v21 != v12)
        {
          v12 -= 56;
LABEL_44:
          v25 = *(_OWORD *)v23;
          v26 = *((_OWORD *)v23 + 1);
          v27 = *((_OWORD *)v23 + 2);
          *(_QWORD *)(v20 + 48) = *((_QWORD *)v23 + 6);
          *(_OWORD *)(v20 + 16) = v26;
          *(_OWORD *)(v20 + 32) = v27;
          *(_OWORD *)v20 = v25;
          goto LABEL_45;
        }
        v24 = v20 >= (unint64_t)v12;
        v12 -= 56;
        if (v24)
          goto LABEL_44;
      }
      else
      {
        v23 = v6 - 56;
        if (v21 != v6)
        {
          v6 -= 56;
          goto LABEL_44;
        }
        v24 = v20 >= (unint64_t)v6;
        v6 -= 56;
        if (v24)
          goto LABEL_44;
      }
LABEL_45:
      if (v6 > v7)
      {
        v20 -= 56;
        if (v12 > v4)
          continue;
      }
      goto LABEL_47;
    }
  }
  if (a4 != __dst || &__dst[56 * v9] <= a4)
    memmove(a4, __dst, 56 * v9);
  v12 = &v4[56 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 56)
  {
    while (1)
    {
      v13 = *((_QWORD *)v6 + 5) == *((_QWORD *)v4 + 5) && *((_QWORD *)v6 + 6) == *((_QWORD *)v4 + 6);
      if (v13 || (sub_23C0E4A74() & 1) == 0)
      {
        v16 = v4 + 56;
        v15 = v4;
        v14 = v6;
        if (v7 == v4)
        {
          v4 += 56;
          if (v7 < v16)
            goto LABEL_20;
        }
        else
        {
          v4 += 56;
        }
      }
      else
      {
        v14 = v6 + 56;
        v15 = v6;
        if (v7 == v6 && v7 < v14)
          goto LABEL_20;
      }
      v17 = *(_OWORD *)v15;
      v18 = *((_OWORD *)v15 + 1);
      v19 = *((_OWORD *)v15 + 2);
      *((_QWORD *)v7 + 6) = *((_QWORD *)v15 + 6);
      *((_OWORD *)v7 + 1) = v18;
      *((_OWORD *)v7 + 2) = v19;
      *(_OWORD *)v7 = v17;
LABEL_20:
      v7 += 56;
      if (v4 < v12)
      {
        v6 = v14;
        if ((unint64_t)v14 < a3)
          continue;
      }
      break;
    }
  }
  v6 = v7;
LABEL_47:
  v28 = (v12 - v4) / 56;
  if (v6 != v4 || v6 >= &v4[56 * v28])
    memmove(v6, v4, 56 * v28);
  return 1;
}

char *sub_23C085F4C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F4E0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23C086044(uint64_t a1)
{
  return sub_23C085F4C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23C086058(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F518);
  v37 = a2;
  v6 = sub_23C0E4930();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_38;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v2;
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v14++, 1))
      goto LABEL_40;
    if (v14 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v14);
    if (!v24)
    {
      v25 = v14 + 1;
      if (v14 + 1 >= v11)
      {
LABEL_31:
        swift_release();
        v3 = v35;
        if ((v37 & 1) == 0)
          goto LABEL_38;
        goto LABEL_34;
      }
      v24 = *(_QWORD *)(v36 + 8 * v25);
      if (!v24)
      {
        while (1)
        {
          v14 = v25 + 1;
          if (__OFADD__(v25, 1))
            break;
          if (v14 >= v11)
            goto LABEL_31;
          v24 = *(_QWORD *)(v36 + 8 * v14);
          ++v25;
          if (v24)
            goto LABEL_20;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        return result;
      }
      ++v14;
    }
LABEL_20:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_21:
    v26 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v28 = *v26;
    v27 = v26[1];
    v29 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    sub_23C0E4A98();
    sub_23C0E47A4();
    result = sub_23C0E4AC8();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v17 == v31;
        if (v17 == v31)
          v17 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v33 == -1);
      v18 = __clz(__rbit64(~v33)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v18);
    *v19 = v28;
    v19[1] = v27;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v18) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_38;
LABEL_34:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_38:
  result = swift_release();
  *v3 = v7;
  return result;
}

void *sub_23C086340()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F518);
  v2 = *v0;
  v3 = sub_23C0E4924();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_24:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    if (__OFADD__(v9++, 1))
      goto LABEL_26;
    if (v9 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    if (!v24)
      break;
LABEL_23:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v9 + 1;
  if (v9 + 1 >= v13)
    goto LABEL_24;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    ++v9;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_24;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_23;
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_23C0864D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  uint64_t v27;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v27 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(a4 + 48) + 48 * v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 24);
    v25 = *(_QWORD *)(v20 + 32);
    v26 = *(_BYTE *)(v20 + 40);
    *(_QWORD *)v11 = *(_QWORD *)v20;
    *(_QWORD *)(v11 + 8) = v22;
    *(_QWORD *)(v11 + 16) = v23;
    *(_QWORD *)(v11 + 24) = v24;
    *(_QWORD *)(v11 + 32) = v25;
    *(_BYTE *)(v11 + 40) = v26;
    if (v13 == v10)
    {
      sub_23C0682C0(v21, v22, v23, v24, v25, v26);
      goto LABEL_38;
    }
    v11 += 48;
    result = sub_23C0682C0(v21, v22, v23, v24, v25, v26);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v27;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_23C0866F0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  uint64_t v28;

  v28 = a4 + 56;
  v5 = -1 << *(_BYTE *)(a4 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v10 = 0;
    v8 = 0;
LABEL_39:
    *result = a4;
    result[1] = v28;
    result[2] = ~v5;
    result[3] = v10;
    result[4] = v7;
    return (_QWORD *)v8;
  }
  v8 = a3;
  if (!a3)
  {
    v10 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v9 = a2;
  v25 = -1 << *(_BYTE *)(a4 + 32);
  v26 = result;
  v10 = 0;
  v11 = 0;
  v27 = (unint64_t)(63 - v5) >> 6;
  if (!v7)
    goto LABEL_9;
LABEL_8:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v13 = v12 | (v10 << 6);
  while (1)
  {
    ++v11;
    v17 = *(_QWORD *)(a4 + 48) + 72 * v13;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 40);
    v22 = *(_QWORD *)(v17 + 48);
    v21 = *(_QWORD *)(v17 + 56);
    v23 = *(_QWORD *)(v17 + 64);
    v24 = *(_OWORD *)(v17 + 16);
    *(_QWORD *)v9 = *(_QWORD *)v17;
    *(_QWORD *)(v9 + 8) = v18;
    *(_OWORD *)(v9 + 16) = v24;
    *(_QWORD *)(v9 + 32) = v20;
    *(_QWORD *)(v9 + 40) = v19;
    *(_QWORD *)(v9 + 48) = v22;
    *(_QWORD *)(v9 + 56) = v21;
    *(_QWORD *)(v9 + 64) = v23;
    if (v11 == v8)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v9 += 72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_8;
LABEL_9:
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v14 >= v27)
      goto LABEL_33;
    v15 = *(_QWORD *)(v28 + 8 * v14);
    if (!v15)
    {
      v10 += 2;
      if (v14 + 1 >= v27)
      {
        v7 = 0;
        v10 = v14;
      }
      else
      {
        v15 = *(_QWORD *)(v28 + 8 * v10);
        if (v15)
          goto LABEL_14;
        v16 = v14 + 2;
        if (v14 + 2 >= v27)
          goto LABEL_33;
        v15 = *(_QWORD *)(v28 + 8 * v16);
        if (v15)
        {
LABEL_17:
          v14 = v16;
          goto LABEL_18;
        }
        v10 = v14 + 3;
        if (v14 + 3 < v27)
        {
          v15 = *(_QWORD *)(v28 + 8 * v10);
          if (v15)
          {
LABEL_14:
            v14 = v10;
            goto LABEL_18;
          }
          v16 = v14 + 4;
          if (v14 + 4 >= v27)
          {
LABEL_33:
            v7 = 0;
            goto LABEL_37;
          }
          v15 = *(_QWORD *)(v28 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              v14 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_42;
              if (v14 >= v27)
              {
                v7 = 0;
                v10 = v27 - 1;
                goto LABEL_37;
              }
              v15 = *(_QWORD *)(v28 + 8 * v14);
              ++v16;
              if (v15)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v7 = 0;
        v10 = v14 + 2;
      }
LABEL_37:
      v8 = v11;
LABEL_38:
      v5 = v25;
      result = v26;
      goto LABEL_39;
    }
LABEL_18:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v10 = v14;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_23C086998(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;
  uint64_t v27;

  v27 = a4 + 56;
  v5 = -1 << *(_BYTE *)(a4 + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v10 = 0;
    v8 = 0;
LABEL_39:
    *result = a4;
    result[1] = v27;
    result[2] = ~v5;
    result[3] = v10;
    result[4] = v7;
    return (_QWORD *)v8;
  }
  v8 = a3;
  if (!a3)
  {
    v10 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v9 = a2;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v25 = result;
  v10 = 0;
  v11 = 0;
  v26 = (unint64_t)(63 - v5) >> 6;
  if (!v7)
    goto LABEL_9;
LABEL_8:
  v12 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  v13 = v12 | (v10 << 6);
  while (1)
  {
    ++v11;
    v17 = *(_QWORD *)(a4 + 48) + 72 * v13;
    v18 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 32);
    v19 = *(_QWORD *)(v17 + 40);
    v21 = *(_QWORD *)(v17 + 64);
    v22 = *(_OWORD *)(v17 + 16);
    v23 = *(_OWORD *)(v17 + 48);
    *(_QWORD *)v9 = *(_QWORD *)v17;
    *(_QWORD *)(v9 + 8) = v18;
    *(_OWORD *)(v9 + 16) = v22;
    *(_QWORD *)(v9 + 32) = v20;
    *(_QWORD *)(v9 + 40) = v19;
    *(_OWORD *)(v9 + 48) = v23;
    *(_QWORD *)(v9 + 64) = v21;
    if (v11 == v8)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v9 += 72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v7)
      goto LABEL_8;
LABEL_9:
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    if (v14 >= v26)
      goto LABEL_33;
    v15 = *(_QWORD *)(v27 + 8 * v14);
    if (!v15)
    {
      v10 += 2;
      if (v14 + 1 >= v26)
      {
        v7 = 0;
        v10 = v14;
      }
      else
      {
        v15 = *(_QWORD *)(v27 + 8 * v10);
        if (v15)
          goto LABEL_14;
        v16 = v14 + 2;
        if (v14 + 2 >= v26)
          goto LABEL_33;
        v15 = *(_QWORD *)(v27 + 8 * v16);
        if (v15)
        {
LABEL_17:
          v14 = v16;
          goto LABEL_18;
        }
        v10 = v14 + 3;
        if (v14 + 3 < v26)
        {
          v15 = *(_QWORD *)(v27 + 8 * v10);
          if (v15)
          {
LABEL_14:
            v14 = v10;
            goto LABEL_18;
          }
          v16 = v14 + 4;
          if (v14 + 4 >= v26)
          {
LABEL_33:
            v7 = 0;
            goto LABEL_37;
          }
          v15 = *(_QWORD *)(v27 + 8 * v16);
          if (!v15)
          {
            while (1)
            {
              v14 = v16 + 1;
              if (__OFADD__(v16, 1))
                goto LABEL_42;
              if (v14 >= v26)
              {
                v7 = 0;
                v10 = v26 - 1;
                goto LABEL_37;
              }
              v15 = *(_QWORD *)(v27 + 8 * v14);
              ++v16;
              if (v15)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v7 = 0;
        v10 = v14 + 2;
      }
LABEL_37:
      v8 = v11;
LABEL_38:
      v5 = v24;
      result = v25;
      goto LABEL_39;
    }
LABEL_18:
    v7 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v10 = v14;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_23C086C48(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;

  v6 = *(_QWORD *)(a4 + 56);
  v4 = a4 + 56;
  v5 = v6;
  v30 = v4;
  v7 = -1 << *(_BYTE *)(v4 - 24);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & v5;
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *result = a4;
    result[1] = v30;
    result[2] = ~v7;
    result[3] = v12;
    result[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v27 = -1 << *(_BYTE *)(v4 - 24);
  v28 = result;
  v12 = 0;
  v13 = 0;
  v29 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v15 = v14 | (v12 << 6);
  while (1)
  {
    ++v13;
    v19 = *(_QWORD *)(a4 + 48) + 72 * v15;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 40);
    v22 = *(_QWORD *)(v19 + 48);
    v25 = *(_QWORD *)(v19 + 56);
    v24 = *(_QWORD *)(v19 + 64);
    v26 = *(_OWORD *)(v19 + 24);
    *(_QWORD *)v11 = *(_QWORD *)v19;
    *(_QWORD *)(v11 + 8) = v20;
    *(_QWORD *)(v11 + 16) = v21;
    *(_OWORD *)(v11 + 24) = v26;
    *(_QWORD *)(v11 + 40) = v23;
    *(_QWORD *)(v11 + 48) = v22;
    *(_QWORD *)(v11 + 56) = v25;
    *(_QWORD *)(v11 + 64) = v24;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 72;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v30 + 8 * v16);
    if (!v17)
    {
      v12 += 2;
      if (v16 + 1 >= v29)
      {
        v9 = 0;
        v12 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v30 + 8 * v12);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v30 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v12 = v16 + 3;
        if (v16 + 3 < v29)
        {
          v17 = *(_QWORD *)(v30 + 8 * v12);
          if (v17)
          {
LABEL_14:
            v16 = v12;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v29)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v30 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v29)
              {
                v9 = 0;
                v12 = v29 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v30 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v16 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v27;
      result = v28;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v12 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_23C086F04(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_39:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(a4 + 48) + 40 * v16;
    v21 = *(_QWORD *)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 32);
    v23 = *(_OWORD *)(v20 + 16);
    *(_QWORD *)v11 = *(_QWORD *)v20;
    *(_QWORD *)(v11 + 8) = v21;
    *(_OWORD *)(v11 + 16) = v23;
    *(_QWORD *)(v11 + 32) = v22;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 40;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
      break;
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        v9 = 0;
        v12 = v17;
      }
      else
      {
        v18 = *(_QWORD *)(v6 + 8 * v12);
        if (v18)
          goto LABEL_14;
        v19 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_33;
        v18 = *(_QWORD *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          v17 = v19;
          goto LABEL_18;
        }
        v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          v18 = *(_QWORD *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            v17 = v12;
            goto LABEL_18;
          }
          v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            v9 = 0;
            goto LABEL_37;
          }
          v18 = *(_QWORD *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              v17 = v19 + 1;
              if (__OFADD__(v19, 1))
                goto LABEL_42;
              if (v17 >= v14)
              {
                v9 = 0;
                v12 = v14 - 1;
                goto LABEL_37;
              }
              v18 = *(_QWORD *)(v6 + 8 * v17);
              ++v19;
              if (v18)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v9 = 0;
        v12 = v17 + 2;
      }
LABEL_37:
      v10 = v13;
LABEL_38:
      v7 = v24;
      goto LABEL_39;
    }
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_23C087118(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  int64_t v26;

  v5 = a4 + 56;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v24 = -1 << *(_BYTE *)(a4 + 32);
  v25 = result;
  v11 = 0;
  v12 = 0;
  v26 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = *(_QWORD *)(a4 + 48) + 56 * v14;
    v19 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 32);
    v20 = *(_QWORD *)(v18 + 40);
    v22 = *(_QWORD *)(v18 + 48);
    v23 = *(_OWORD *)(v18 + 16);
    *(_QWORD *)v10 = *(_QWORD *)v18;
    *(_QWORD *)(v10 + 8) = v19;
    *(_OWORD *)(v10 + 16) = v23;
    *(_QWORD *)(v10 + 32) = v21;
    *(_QWORD *)(v10 + 40) = v20;
    *(_QWORD *)(v10 + 48) = v22;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v26)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v26)
      {
        v8 = 0;
        v11 = v15;
      }
      else
      {
        v16 = *(_QWORD *)(v5 + 8 * v11);
        if (v16)
          goto LABEL_14;
        v17 = v15 + 2;
        if (v15 + 2 >= v26)
          goto LABEL_33;
        v16 = *(_QWORD *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          v15 = v17;
          goto LABEL_18;
        }
        v11 = v15 + 3;
        if (v15 + 3 < v26)
        {
          v16 = *(_QWORD *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            v15 = v11;
            goto LABEL_18;
          }
          v17 = v15 + 4;
          if (v15 + 4 >= v26)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v16 = *(_QWORD *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v15 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v15 >= v26)
              {
                v8 = 0;
                v11 = v26 - 1;
                goto LABEL_37;
              }
              v16 = *(_QWORD *)(v5 + 8 * v15);
              ++v17;
              if (v16)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v15 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v24;
      result = v25;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

char *sub_23C087388(uint64_t a1)
{
  return sub_23C080A4C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_23C08739C(uint64_t a1)
{
  return sub_23C081264(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_256B0F550);
}

char *sub_23C0873D0(uint64_t a1)
{
  return sub_23C081148(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_23C0873E4(uint64_t a1)
{
  return sub_23C081264(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_256B0F520);
}

char *sub_23C087418(uint64_t a1)
{
  return sub_23C0815B4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_256B0F510);
}

char *sub_23C08744C(uint64_t a1)
{
  return sub_23C081384(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_23C087460(uint64_t a1)
{
  return sub_23C0815B4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_256B0F500);
}

char *sub_23C087494(uint64_t a1)
{
  return sub_23C0814A0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

char *sub_23C0874A8(uint64_t a1)
{
  return sub_23C0815B4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_256B0F4F0);
}

char *sub_23C0874DC(uint64_t a1)
{
  return sub_23C0815B4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1, &qword_256B0F4D8);
}

uint64_t sub_23C087510(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_23C0875B0(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_23C087694@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  uint64_t result;
  char v20;
  uint64_t v21;
  _QWORD v24[9];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35[17];

  v6 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v8 = a1[3];
  v11 = a1[4];
  v10 = a1[5];
  v12 = a1[6];
  v21 = a1[7];
  v13 = a1[8];
  v14 = a2[7];
  v31 = a2[6];
  v32 = v14;
  v33 = a2[8];
  v34 = *((_QWORD *)a2 + 18);
  v15 = a2[3];
  v27 = a2[2];
  v28 = v15;
  v16 = a2[5];
  v29 = a2[4];
  v30 = v16;
  v17 = a2[1];
  v25 = *a2;
  v26 = v17;
  v24[3] = &type metadata for Trainer;
  v24[4] = &protocol witness table for Trainer;
  v24[5] = sub_23C08FF40();
  v24[6] = sub_23C08FF84();
  v24[7] = sub_23C08FFC8();
  v24[8] = sub_23C09000C();
  v18 = (_QWORD *)swift_allocObject();
  v24[0] = v18;
  v18[2] = v6;
  v18[3] = v7;
  v18[4] = v9;
  v18[5] = v8;
  v18[6] = v11;
  v18[7] = v10;
  v18[8] = v12;
  v18[9] = v21;
  v18[10] = v13;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  sub_23C07F67C(v24, a3, a4, v35);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  v20 = v35[0];
  *(_QWORD *)a5 = v6;
  *(_QWORD *)(a5 + 8) = v7;
  *(_QWORD *)(a5 + 16) = v9;
  *(_QWORD *)(a5 + 24) = v8;
  *(_QWORD *)(a5 + 32) = v11;
  *(_QWORD *)(a5 + 40) = v10;
  *(_QWORD *)(a5 + 48) = v12;
  *(_QWORD *)(a5 + 56) = v21;
  *(_QWORD *)(a5 + 64) = v13;
  *(_BYTE *)(a5 + 72) = v20;
  return result;
}

uint64_t sub_23C087818(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F560);
    v3 = sub_23C0E48DC();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      sub_23C0E4A98();
      sub_23C0E4AA4();
      result = sub_23C0E4AC8();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_23C087958(uint64_t a1, uint64_t a2)
{
  char *v2;

  if (*(_QWORD *)(a1 + 16))
  {
    v2 = (char *)&loc_23C0879DC
       + dword_23C087C6C[*(unsigned __int8 *)(a2 + 40 + *(int *)(type metadata accessor for FilterState() + 28))];
    __asm { BR              X9 }
  }
  return MEMORY[0x24BEE4AF8];
}

uint64_t sub_23C087C90(uint64_t a1)
{
  uint64_t v3;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F568);
    sub_23C0E48DC();
    v3 = *(unsigned __int8 *)(a1 + 72);
    sub_23C0E4A98();
    __asm { BR              X8 }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_23C087DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;

  sub_23C0E4AA4();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  v23 = sub_23C0E4AC8();
  v31 = v23 & ~(-1 << *(_BYTE *)(v19 + 32));
  v32 = *(_QWORD *)(a16 + 8 * (v31 >> 6));
  if (((1 << v31) & v32) == 0)
  {
    *(_QWORD *)(a16 + 8 * (v31 >> 6)) = (1 << v31) | v32;
    v34 = *(_QWORD *)(v19 + 48) + 48 * v31;
    *(_QWORD *)v34 = v21;
    *(_QWORD *)(v34 + 8) = v22;
    *(_QWORD *)(v34 + 16) = a17;
    *(_QWORD *)(v34 + 24) = a18;
    *(_QWORD *)(v34 + 32) = a19;
    *(_BYTE *)(v34 + 40) = v20;
    v35 = *(_QWORD *)(v19 + 16);
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (!v36)
    {
      *(_QWORD *)(v19 + 16) = v37;
      JUMPOUT(0x23C087D7CLL);
    }
    __break(1u);
    JUMPOUT(0x23C088EC4);
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23C087FFC + *((int *)qword_23C088F08 + *(unsigned __int8 *)(*(_QWORD *)(v19 + 48) + 48 * v31 + 40))))(v23, v24, v25, v26, v27, v28, v29, v30, a9, a10, a11, v21, a13, a14);
}

uint64_t sub_23C088F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51[10];
  uint64_t v52;

  v7 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v52 = MEMORY[0x24BEE4AF8];
    sub_23C0809F4(0, v7, 0);
    v10 = 0;
    result = v52;
    v34 = a1 + 32;
    v35 = v7;
    v38 = a4 + 56;
    v36 = a4;
    do
    {
      v11 = (uint64_t *)(v34 + (v10 << 6));
      v13 = *v11;
      v12 = v11[1];
      v15 = v11[2];
      v14 = v11[3];
      v16 = v11[4];
      v39 = result;
      v40 = v11[5];
      v17 = v11[6];
      sub_23C06E7B4(a6, (uint64_t)v51, &qword_256B0F440);
      v18 = v51[0];
      v41 = v12;
      if (v51[0])
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        v19 = sub_23C07A870(v14, v16, v18);
        swift_bridgeObjectRelease();
        if ((v19 & 1) != 0)
        {
          if (a2)
          {
            v45 = v14;
            v46 = v16;
            v48 = 0;
            v49 = 0;
            v47 = 0;
            v50 = 0;
            if (*(_QWORD *)(a4 + 16))
            {
              sub_23C0E4A98();
              sub_23C0E4AA4();
              swift_bridgeObjectRetain();
              sub_23C0E47A4();
              v20 = sub_23C0E4AC8();
              v21 = -1 << *(_BYTE *)(a4 + 32);
              v22 = v20 & ~v21;
              if (((*(_QWORD *)(v38 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
              {
                v23 = ~v21;
                while (1)
                {
                  v24 = *(_QWORD *)(a4 + 48) + 48 * v22;
                  v25 = *(_QWORD *)(v24 + 32);
                  v26 = *(_BYTE *)(v24 + 40);
                  v27 = *(_OWORD *)(v24 + 16);
                  v42[0] = *(_OWORD *)v24;
                  v42[1] = v27;
                  v43 = v25;
                  v44 = v26;
                  _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v42);
                  if ((v28 & 1) != 0)
                    break;
                  v22 = (v22 + 1) & v23;
                  if (((*(_QWORD *)(v38 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
                    goto LABEL_11;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v29 = 2;
                swift_bridgeObjectRelease_n();
                goto LABEL_15;
              }
LABEL_11:
              swift_bridgeObjectRelease();
            }
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v29 = 1;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v29 = 0;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v29 = 0;
      }
LABEL_15:
      result = v39;
      v52 = v39;
      v31 = *(_QWORD *)(v39 + 16);
      v30 = *(_QWORD *)(v39 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_23C0809F4((_QWORD *)(v30 > 1), v31 + 1, 1);
        result = v52;
      }
      ++v10;
      *(_QWORD *)(result + 16) = v31 + 1;
      v32 = result + (v31 << 6);
      *(_QWORD *)(v32 + 32) = v13;
      *(_QWORD *)(v32 + 40) = v41;
      *(_QWORD *)(v32 + 48) = v15;
      *(_QWORD *)(v32 + 56) = v14;
      *(_QWORD *)(v32 + 64) = v16;
      *(_QWORD *)(v32 + 72) = v40;
      *(_QWORD *)(v32 + 80) = v17;
      *(_BYTE *)(v32 + 88) = v29;
      a4 = v36;
    }
    while (v10 != v35);
  }
  return result;
}

uint64_t sub_23C0892EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD v49[10];

  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v48 = MEMORY[0x24BEE4AF8];
    v34 = v6;
    sub_23C0809D8(0, v6, 0);
    v10 = v34;
    v11 = 0;
    v7 = v48;
    v35 = a1 + 32;
    v37 = a4;
    v38 = a4 + 56;
    while (1)
    {
      v12 = (uint64_t *)(v35 + 48 * v11);
      v14 = *v12;
      v13 = v12[1];
      v15 = v12[2];
      v16 = v12[3];
      v17 = v12[4];
      sub_23C06E7B4(a6, (uint64_t)v49, &qword_256B0F440);
      if (v49[0])
        break;
      swift_bridgeObjectRetain();
      v28 = 0;
LABEL_16:
      v48 = v7;
      v30 = *(_QWORD *)(v7 + 16);
      v29 = *(_QWORD *)(v7 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_23C0809D8((_QWORD *)(v29 > 1), v30 + 1, 1);
        v10 = v34;
        v7 = v48;
      }
      ++v11;
      *(_QWORD *)(v7 + 16) = v30 + 1;
      v31 = v7 + 48 * v30;
      *(_QWORD *)(v31 + 32) = v14;
      *(_QWORD *)(v31 + 40) = v13;
      *(_QWORD *)(v31 + 48) = v15;
      *(_QWORD *)(v31 + 56) = v16;
      *(_QWORD *)(v31 + 64) = v17;
      *(_BYTE *)(v31 + 72) = v28;
      a4 = v37;
      if (v11 == v10)
        return v7;
    }
    v18 = v49[1];
    swift_bridgeObjectRetain_n();
    LOBYTE(v18) = sub_23C07A870(v14, v13, v18);
    swift_bridgeObjectRelease();
    if ((v18 & 1) != 0)
    {
      if (a2)
      {
        v42 = v14;
        v43 = v13;
        v44 = v15;
        v45 = v16;
        v46 = v17;
        v47 = 1;
        if (*(_QWORD *)(a4 + 16))
        {
          sub_23C0E4A98();
          sub_23C0E4AA4();
          swift_bridgeObjectRetain();
          sub_23C0E47A4();
          sub_23C0E4ABC();
          sub_23C0E4ABC();
          sub_23C0E4ABC();
          v19 = sub_23C0E4AC8();
          v20 = -1 << *(_BYTE *)(v37 + 32);
          v21 = v19 & ~v20;
          if (((*(_QWORD *)(v38 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
          {
            v22 = ~v20;
            while (1)
            {
              v23 = *(_QWORD *)(v37 + 48) + 48 * v21;
              v24 = *(_QWORD *)(v23 + 32);
              v25 = *(_BYTE *)(v23 + 40);
              v26 = *(_OWORD *)(v23 + 16);
              v39[0] = *(_OWORD *)v23;
              v39[1] = v26;
              v40 = v24;
              v41 = v25;
              _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v39);
              if ((v27 & 1) != 0)
                break;
              v21 = (v21 + 1) & v22;
              if (((*(_QWORD *)(v38 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
                goto LABEL_11;
            }
            v28 = 2;
            swift_bridgeObjectRelease_n();
            goto LABEL_15;
          }
LABEL_11:
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
      v28 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      v28 = 0;
    }
LABEL_15:
    v10 = v34;
    goto LABEL_16;
  }
  return v7;
}

uint64_t sub_23C0895CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD v53[10];
  uint64_t v54;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v54 = MEMORY[0x24BEE4AF8];
    v35 = v6;
    sub_23C0809AC(0, v6, 0);
    v10 = v35;
    v11 = 0;
    v36 = a1 + 32;
    v37 = a4;
    v7 = v54;
    v39 = a4 + 56;
    while (1)
    {
      v40 = v7;
      v12 = (uint64_t *)(v36 + (v11 << 6));
      v14 = *v12;
      v13 = v12[1];
      v16 = v12[2];
      v15 = v12[3];
      v17 = v12[4];
      v41 = v12[5];
      v18 = v12[6];
      sub_23C06E7B4(a6, (uint64_t)v53, &qword_256B0F440);
      v42 = v13;
      v43 = v16;
      if (!v53[0])
        break;
      v19 = v53[2];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      LOBYTE(v19) = sub_23C07A870(v15, v17, v19);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = 0;
        goto LABEL_17;
      }
      if (!a2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = 1;
        goto LABEL_17;
      }
      v47 = v15;
      v48 = v17;
      v50 = 0;
      v51 = 0;
      v49 = 0;
      v52 = 2;
      if (*(_QWORD *)(a4 + 16))
      {
        sub_23C0E4A98();
        sub_23C0E4AA4();
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        v20 = sub_23C0E4AC8();
        v21 = -1 << *(_BYTE *)(a4 + 32);
        v22 = v20 & ~v21;
        if (((*(_QWORD *)(v39 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
        {
          v23 = ~v21;
          while (1)
          {
            v24 = *(_QWORD *)(a4 + 48) + 48 * v22;
            v25 = *(_QWORD *)(v24 + 32);
            v26 = *(_BYTE *)(v24 + 40);
            v27 = *(_OWORD *)(v24 + 16);
            v44[0] = *(_OWORD *)v24;
            v44[1] = v27;
            v45 = v25;
            v46 = v26;
            _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v44);
            if ((v28 & 1) != 0)
              break;
            v22 = (v22 + 1) & v23;
            if (((*(_QWORD *)(v39 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
              goto LABEL_11;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v29 = 2;
          swift_bridgeObjectRelease_n();
LABEL_17:
          v10 = v35;
LABEL_18:
          v7 = v40;
          goto LABEL_19;
        }
LABEL_11:
        swift_bridgeObjectRelease();
      }
      v7 = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = 1;
      v10 = v35;
LABEL_19:
      v54 = v7;
      v31 = *(_QWORD *)(v7 + 16);
      v30 = *(_QWORD *)(v7 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_23C0809AC((_QWORD *)(v30 > 1), v31 + 1, 1);
        v10 = v35;
        v7 = v54;
      }
      ++v11;
      *(_QWORD *)(v7 + 16) = v31 + 1;
      v32 = v7 + (v31 << 6);
      *(_QWORD *)(v32 + 32) = v14;
      *(_QWORD *)(v32 + 40) = v42;
      *(_QWORD *)(v32 + 48) = v43;
      *(_QWORD *)(v32 + 56) = v15;
      *(_QWORD *)(v32 + 64) = v17;
      *(_QWORD *)(v32 + 72) = v41;
      *(_QWORD *)(v32 + 80) = v18;
      *(_BYTE *)(v32 + 88) = v29;
      a4 = v37;
      if (v11 == v10)
        return v7;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = 0;
    goto LABEL_18;
  }
  return v7;
}

uint64_t sub_23C089970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v39;
  uint64_t v40;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD v51[2];
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD v60[10];
  uint64_t v61;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v61 = MEMORY[0x24BEE4AF8];
    v42 = v6;
    sub_23C080980(0, v6, 0);
    v10 = 0;
    v39 = a1 + 32;
    v40 = a4;
    v7 = v61;
    v43 = a4 + 56;
    do
    {
      v44 = v10;
      v45 = v7;
      v11 = (uint64_t *)(v39 + 80 * v10);
      v12 = *v11;
      v13 = v11[1];
      v14 = v11[2];
      v15 = v11[3];
      v17 = v11[4];
      v16 = v11[5];
      v18 = v11[7];
      v46 = v11[6];
      v19 = v11[8];
      sub_23C06E7B4(a6, (uint64_t)v60, &qword_256B0F440);
      v47 = v14;
      v48 = v12;
      v49 = v18;
      v50 = v15;
      if (v60[0])
      {
        v20 = v60[3];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        LOBYTE(v20) = sub_23C07A870(v17, v16, v20);
        swift_bridgeObjectRelease();
        if ((v20 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v30 = v13;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v31 = 0;
LABEL_18:
          v33 = v42;
          v32 = v44;
          v7 = v45;
          goto LABEL_19;
        }
        if (!a2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v30 = v13;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v31 = 1;
          goto LABEL_18;
        }
        v54 = v17;
        v55 = v16;
        v57 = 0;
        v58 = 0;
        v56 = 0;
        v59 = 3;
        if (*(_QWORD *)(a4 + 16))
        {
          sub_23C0E4A98();
          sub_23C0E4AA4();
          swift_bridgeObjectRetain();
          sub_23C0E47A4();
          v21 = sub_23C0E4AC8();
          v22 = -1 << *(_BYTE *)(a4 + 32);
          v23 = v21 & ~v22;
          if (((*(_QWORD *)(v43 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
          {
            v24 = ~v22;
            while (1)
            {
              v25 = *(_QWORD *)(a4 + 48) + 48 * v23;
              v26 = *(_QWORD *)(v25 + 32);
              v27 = *(_BYTE *)(v25 + 40);
              v28 = *(_OWORD *)(v25 + 16);
              v51[0] = *(_OWORD *)v25;
              v51[1] = v28;
              v52 = v26;
              v53 = v27;
              _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v51);
              if ((v29 & 1) != 0)
                break;
              v23 = (v23 + 1) & v24;
              if (((*(_QWORD *)(v43 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
                goto LABEL_11;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v30 = v13;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v31 = 2;
            swift_bridgeObjectRelease_n();
            goto LABEL_18;
          }
LABEL_11:
          swift_bridgeObjectRelease();
          v30 = v13;
        }
        else
        {
          v30 = v13;
        }
        v32 = v44;
        v7 = v45;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v31 = 1;
        v33 = v42;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v30 = v13;
        swift_bridgeObjectRetain();
        v31 = 0;
        v32 = v44;
        v7 = v45;
        v33 = v42;
      }
LABEL_19:
      v61 = v7;
      v35 = *(_QWORD *)(v7 + 16);
      v34 = *(_QWORD *)(v7 + 24);
      if (v35 >= v34 >> 1)
      {
        sub_23C080980((_QWORD *)(v34 > 1), v35 + 1, 1);
        v33 = v42;
        v7 = v61;
      }
      v10 = v32 + 1;
      *(_QWORD *)(v7 + 16) = v35 + 1;
      v36 = v7 + 80 * v35;
      *(_QWORD *)(v36 + 32) = v48;
      *(_QWORD *)(v36 + 40) = v30;
      *(_QWORD *)(v36 + 48) = v47;
      *(_QWORD *)(v36 + 56) = v50;
      *(_QWORD *)(v36 + 64) = v17;
      *(_QWORD *)(v36 + 72) = v16;
      *(_QWORD *)(v36 + 80) = v46;
      *(_QWORD *)(v36 + 88) = v49;
      *(_QWORD *)(v36 + 96) = v19;
      *(_BYTE *)(v36 + 104) = v31;
      a4 = v40;
    }
    while (v10 != v33);
  }
  return v7;
}

uint64_t sub_23C089DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD v53[10];
  uint64_t v54;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v54 = MEMORY[0x24BEE4AF8];
    v35 = v6;
    sub_23C080954(0, v6, 0);
    v10 = v35;
    v11 = 0;
    v36 = a1 + 32;
    v37 = a4;
    v7 = v54;
    v39 = a4 + 56;
    while (1)
    {
      v40 = v7;
      v12 = (uint64_t *)(v36 + (v11 << 6));
      v14 = *v12;
      v13 = v12[1];
      v16 = v12[2];
      v15 = v12[3];
      v17 = v12[4];
      v41 = v12[5];
      v18 = v12[6];
      sub_23C06E7B4(a6, (uint64_t)v53, &qword_256B0F440);
      v42 = v13;
      v43 = v16;
      if (!v53[0])
        break;
      v19 = v53[4];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      LOBYTE(v19) = sub_23C07A870(v15, v17, v19);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = 0;
        goto LABEL_17;
      }
      if (!a2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = 1;
        goto LABEL_17;
      }
      v47 = v15;
      v48 = v17;
      v50 = 0;
      v51 = 0;
      v49 = 0;
      v52 = 4;
      if (*(_QWORD *)(a4 + 16))
      {
        sub_23C0E4A98();
        sub_23C0E4AA4();
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        v20 = sub_23C0E4AC8();
        v21 = -1 << *(_BYTE *)(a4 + 32);
        v22 = v20 & ~v21;
        if (((*(_QWORD *)(v39 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
        {
          v23 = ~v21;
          while (1)
          {
            v24 = *(_QWORD *)(a4 + 48) + 48 * v22;
            v25 = *(_QWORD *)(v24 + 32);
            v26 = *(_BYTE *)(v24 + 40);
            v27 = *(_OWORD *)(v24 + 16);
            v44[0] = *(_OWORD *)v24;
            v44[1] = v27;
            v45 = v25;
            v46 = v26;
            _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v44);
            if ((v28 & 1) != 0)
              break;
            v22 = (v22 + 1) & v23;
            if (((*(_QWORD *)(v39 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
              goto LABEL_11;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v29 = 2;
          swift_bridgeObjectRelease_n();
LABEL_17:
          v10 = v35;
LABEL_18:
          v7 = v40;
          goto LABEL_19;
        }
LABEL_11:
        swift_bridgeObjectRelease();
      }
      v7 = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = 1;
      v10 = v35;
LABEL_19:
      v54 = v7;
      v31 = *(_QWORD *)(v7 + 16);
      v30 = *(_QWORD *)(v7 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_23C080954((_QWORD *)(v30 > 1), v31 + 1, 1);
        v10 = v35;
        v7 = v54;
      }
      ++v11;
      *(_QWORD *)(v7 + 16) = v31 + 1;
      v32 = v7 + (v31 << 6);
      *(_QWORD *)(v32 + 32) = v14;
      *(_QWORD *)(v32 + 40) = v42;
      *(_QWORD *)(v32 + 48) = v43;
      *(_QWORD *)(v32 + 56) = v15;
      *(_QWORD *)(v32 + 64) = v17;
      *(_QWORD *)(v32 + 72) = v41;
      *(_QWORD *)(v32 + 80) = v18;
      *(_BYTE *)(v32 + 88) = v29;
      a4 = v37;
      if (v11 == v10)
        return v7;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = 0;
    goto LABEL_18;
  }
  return v7;
}

uint64_t sub_23C08A188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  char v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD v59[10];
  uint64_t v60;

  v7 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v60 = MEMORY[0x24BEE4AF8];
    v41 = v7;
    sub_23C080928(0, v7, 0);
    v10 = 0;
    v38 = a1 + 32;
    v39 = a4;
    result = v60;
    v42 = a4 + 56;
    do
    {
      v11 = (uint64_t *)(v38 + 80 * v10);
      v13 = *v11;
      v12 = v11[1];
      v14 = v11[2];
      v15 = v11[3];
      v16 = v11[4];
      v43 = v11[5];
      v44 = result;
      v17 = v11[6];
      v45 = v11[7];
      v18 = v11[8];
      sub_23C06E7B4(a6, (uint64_t)v59, &qword_256B0F440);
      v46 = v12;
      v47 = v13;
      v48 = v15;
      v49 = v18;
      if (v59[0])
      {
        v19 = v59[6];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        LOBYTE(v19) = sub_23C07A870(v15, v16, v19);
        swift_bridgeObjectRelease();
        if ((v19 & 1) != 0)
        {
          if (a2)
          {
            v53 = v15;
            v54 = v16;
            v56 = 0;
            v57 = 0;
            v55 = 0;
            v58 = 5;
            if (*(_QWORD *)(a4 + 16))
            {
              sub_23C0E4A98();
              sub_23C0E4AA4();
              swift_bridgeObjectRetain();
              sub_23C0E47A4();
              v20 = sub_23C0E4AC8();
              v21 = -1 << *(_BYTE *)(a4 + 32);
              v22 = v20 & ~v21;
              v23 = v17;
              v24 = v43;
              if (((*(_QWORD *)(v42 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
              {
                v25 = ~v21;
                while (1)
                {
                  v26 = *(_QWORD *)(a4 + 48) + 48 * v22;
                  v27 = *(_QWORD *)(v26 + 32);
                  v28 = *(_BYTE *)(v26 + 40);
                  v29 = *(_OWORD *)(v26 + 16);
                  v50[0] = *(_OWORD *)v26;
                  v50[1] = v29;
                  v51 = v27;
                  v52 = v28;
                  _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v50);
                  if ((v30 & 1) != 0)
                    break;
                  v22 = (v22 + 1) & v25;
                  if (((*(_QWORD *)(v42 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
                    goto LABEL_11;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v31 = v14;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v32 = 2;
                swift_bridgeObjectRelease_n();
                goto LABEL_18;
              }
LABEL_11:
              swift_bridgeObjectRelease();
              v31 = v14;
            }
            else
            {
              v23 = v17;
              v31 = v14;
              v24 = v43;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v32 = 1;
LABEL_18:
            v33 = v41;
            result = v44;
            goto LABEL_19;
          }
          swift_bridgeObjectRelease();
          v23 = v17;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v31 = v14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 = 1;
          v33 = v41;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v31 = v14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 = 0;
          v33 = v41;
          v23 = v17;
        }
        v24 = v43;
        result = v44;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v31 = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v32 = 0;
        v23 = v17;
        v24 = v43;
        result = v44;
        v33 = v41;
      }
LABEL_19:
      v60 = result;
      v35 = *(_QWORD *)(result + 16);
      v34 = *(_QWORD *)(result + 24);
      if (v35 >= v34 >> 1)
      {
        sub_23C080928((_QWORD *)(v34 > 1), v35 + 1, 1);
        v33 = v41;
        result = v60;
      }
      ++v10;
      *(_QWORD *)(result + 16) = v35 + 1;
      v36 = result + 80 * v35;
      *(_QWORD *)(v36 + 32) = v47;
      *(_QWORD *)(v36 + 40) = v46;
      *(_QWORD *)(v36 + 48) = v31;
      *(_QWORD *)(v36 + 56) = v48;
      *(_QWORD *)(v36 + 64) = v16;
      *(_QWORD *)(v36 + 72) = v24;
      *(_QWORD *)(v36 + 80) = v23;
      *(_QWORD *)(v36 + 88) = v45;
      *(_QWORD *)(v36 + 96) = v49;
      *(_BYTE *)(v36 + 104) = v32;
      a4 = v39;
    }
    while (v10 != v33);
  }
  return result;
}

uint64_t sub_23C08A5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v6;
  uint64_t v7;
  int64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  char v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD v53[10];
  uint64_t v54;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v54 = MEMORY[0x24BEE4AF8];
    v35 = v6;
    sub_23C0808FC(0, v6, 0);
    v10 = v35;
    v11 = 0;
    v36 = a1 + 32;
    v37 = a4;
    v7 = v54;
    v39 = a4 + 56;
    while (1)
    {
      v40 = v7;
      v12 = (uint64_t *)(v36 + (v11 << 6));
      v14 = *v12;
      v13 = v12[1];
      v16 = v12[2];
      v15 = v12[3];
      v17 = v12[4];
      v41 = v12[5];
      v18 = v12[6];
      sub_23C06E7B4(a6, (uint64_t)v53, &qword_256B0F440);
      v42 = v13;
      v43 = v16;
      if (!v53[0])
        break;
      v19 = v53[7];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      LOBYTE(v19) = sub_23C07A870(v15, v17, v19);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = 0;
        goto LABEL_17;
      }
      if (!a2)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = 1;
        goto LABEL_17;
      }
      v47 = v15;
      v48 = v17;
      v50 = 0;
      v51 = 0;
      v49 = 0;
      v52 = 6;
      if (*(_QWORD *)(a4 + 16))
      {
        sub_23C0E4A98();
        sub_23C0E4AA4();
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        v20 = sub_23C0E4AC8();
        v21 = -1 << *(_BYTE *)(a4 + 32);
        v22 = v20 & ~v21;
        if (((*(_QWORD *)(v39 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
        {
          v23 = ~v21;
          while (1)
          {
            v24 = *(_QWORD *)(a4 + 48) + 48 * v22;
            v25 = *(_QWORD *)(v24 + 32);
            v26 = *(_BYTE *)(v24 + 40);
            v27 = *(_OWORD *)(v24 + 16);
            v44[0] = *(_OWORD *)v24;
            v44[1] = v27;
            v45 = v25;
            v46 = v26;
            _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v44);
            if ((v28 & 1) != 0)
              break;
            v22 = (v22 + 1) & v23;
            if (((*(_QWORD *)(v39 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
              goto LABEL_11;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v29 = 2;
          swift_bridgeObjectRelease_n();
LABEL_17:
          v10 = v35;
LABEL_18:
          v7 = v40;
          goto LABEL_19;
        }
LABEL_11:
        swift_bridgeObjectRelease();
      }
      v7 = v40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v29 = 1;
      v10 = v35;
LABEL_19:
      v54 = v7;
      v31 = *(_QWORD *)(v7 + 16);
      v30 = *(_QWORD *)(v7 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_23C0808FC((_QWORD *)(v30 > 1), v31 + 1, 1);
        v10 = v35;
        v7 = v54;
      }
      ++v11;
      *(_QWORD *)(v7 + 16) = v31 + 1;
      v32 = v7 + (v31 << 6);
      *(_QWORD *)(v32 + 32) = v14;
      *(_QWORD *)(v32 + 40) = v42;
      *(_QWORD *)(v32 + 48) = v43;
      *(_QWORD *)(v32 + 56) = v15;
      *(_QWORD *)(v32 + 64) = v17;
      *(_QWORD *)(v32 + 72) = v41;
      *(_QWORD *)(v32 + 80) = v18;
      *(_BYTE *)(v32 + 88) = v29;
      a4 = v37;
      if (v11 == v10)
        return v7;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = 0;
    goto LABEL_18;
  }
  return v7;
}

uint64_t sub_23C08A960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int64_t v7;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  char v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  _QWORD v59[10];
  uint64_t v60;

  v7 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v7)
  {
    v60 = MEMORY[0x24BEE4AF8];
    v41 = v7;
    sub_23C0808D0(0, v7, 0);
    v10 = 0;
    v38 = a1 + 32;
    v39 = a4;
    result = v60;
    v42 = a4 + 56;
    do
    {
      v11 = (uint64_t *)(v38 + 80 * v10);
      v13 = *v11;
      v12 = v11[1];
      v14 = v11[2];
      v15 = v11[3];
      v16 = v11[4];
      v43 = v11[5];
      v44 = result;
      v17 = v11[6];
      v45 = v11[7];
      v18 = v11[8];
      sub_23C06E7B4(a6, (uint64_t)v59, &qword_256B0F440);
      v46 = v12;
      v47 = v13;
      v48 = v15;
      v49 = v18;
      if (v59[0])
      {
        v19 = v59[8];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        LOBYTE(v19) = sub_23C07A870(v15, v16, v19);
        swift_bridgeObjectRelease();
        if ((v19 & 1) != 0)
        {
          if (a2)
          {
            v53 = v15;
            v54 = v16;
            v56 = 0;
            v57 = 0;
            v55 = 0;
            v58 = 7;
            if (*(_QWORD *)(a4 + 16))
            {
              sub_23C0E4A98();
              sub_23C0E4AA4();
              swift_bridgeObjectRetain();
              sub_23C0E47A4();
              v20 = sub_23C0E4AC8();
              v21 = -1 << *(_BYTE *)(a4 + 32);
              v22 = v20 & ~v21;
              v23 = v17;
              v24 = v43;
              if (((*(_QWORD *)(v42 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
              {
                v25 = ~v21;
                while (1)
                {
                  v26 = *(_QWORD *)(a4 + 48) + 48 * v22;
                  v27 = *(_QWORD *)(v26 + 32);
                  v28 = *(_BYTE *)(v26 + 40);
                  v29 = *(_OWORD *)(v26 + 16);
                  v50[0] = *(_OWORD *)v26;
                  v50[1] = v29;
                  v51 = v27;
                  v52 = v28;
                  _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v50);
                  if ((v30 & 1) != 0)
                    break;
                  v22 = (v22 + 1) & v25;
                  if (((*(_QWORD *)(v42 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
                    goto LABEL_11;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v31 = v14;
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v32 = 2;
                swift_bridgeObjectRelease_n();
                goto LABEL_18;
              }
LABEL_11:
              swift_bridgeObjectRelease();
              v31 = v14;
            }
            else
            {
              v23 = v17;
              v31 = v14;
              v24 = v43;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v32 = 1;
LABEL_18:
            v33 = v41;
            result = v44;
            goto LABEL_19;
          }
          swift_bridgeObjectRelease();
          v23 = v17;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v31 = v14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 = 1;
          v33 = v41;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v31 = v14;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 = 0;
          v33 = v41;
          v23 = v17;
        }
        v24 = v43;
        result = v44;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v31 = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v32 = 0;
        v23 = v17;
        v24 = v43;
        result = v44;
        v33 = v41;
      }
LABEL_19:
      v60 = result;
      v35 = *(_QWORD *)(result + 16);
      v34 = *(_QWORD *)(result + 24);
      if (v35 >= v34 >> 1)
      {
        sub_23C0808D0((_QWORD *)(v34 > 1), v35 + 1, 1);
        v33 = v41;
        result = v60;
      }
      ++v10;
      *(_QWORD *)(result + 16) = v35 + 1;
      v36 = result + 80 * v35;
      *(_QWORD *)(v36 + 32) = v47;
      *(_QWORD *)(v36 + 40) = v46;
      *(_QWORD *)(v36 + 48) = v31;
      *(_QWORD *)(v36 + 56) = v48;
      *(_QWORD *)(v36 + 64) = v16;
      *(_QWORD *)(v36 + 72) = v24;
      *(_QWORD *)(v36 + 80) = v23;
      *(_QWORD *)(v36 + 88) = v45;
      *(_QWORD *)(v36 + 96) = v49;
      *(_BYTE *)(v36 + 104) = v32;
      a4 = v39;
    }
    while (v10 != v33);
  }
  return result;
}

uint64_t sub_23C08AD94(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, char a5, uint64_t a6, int a7, __int128 *a8, uint64_t a9)
{
  uint64_t v9;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  uint64_t result;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 *v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47[4];
  _OWORD v48[4];
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;

  v68 = a7;
  v45 = a4;
  v46 = a6;
  v44 = a3;
  v13 = *a8;
  v42 = a8[1];
  v43 = v13;
  v14 = a8[2];
  v40 = a8[3];
  v41 = v14;
  v39 = *((_QWORD *)a8 + 8);
  v15 = type metadata accessor for FilterSectionDescriptor();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v19)
  {
    v34 = v9;
    v38 = a9;
    v67 = MEMORY[0x24BEE4AF8];
    v21 = v19;
    sub_23C0808B4(0, v19, 0);
    v22 = v67;
    v37 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    v23 = a1 + v37;
    v35 = *(_QWORD *)(v16 + 72);
    v36 = a5 & 1;
    do
    {
      v24 = a2[7];
      v63 = a2[6];
      v64 = v24;
      v65 = a2[8];
      v66 = *((_QWORD *)a2 + 18);
      v25 = a2[3];
      v59 = a2[2];
      v60 = v25;
      v26 = a2[5];
      v61 = a2[4];
      v62 = v26;
      v27 = a2[1];
      v57 = *a2;
      v58 = v27;
      v28 = v44[3];
      v54 = v44[2];
      v55 = v28;
      v56 = *((_QWORD *)v44 + 8);
      v29 = v44[1];
      v52 = *v44;
      v53 = v29;
      v50[0] = v45;
      v50[1] = v36;
      v50[2] = v46;
      v51 = v68;
      v48[0] = v43;
      v48[1] = v42;
      v48[2] = v41;
      v48[3] = v40;
      v49 = v39;
      sub_23C06E7B4(v38, (uint64_t)v47, &qword_256B0F438);
      sub_23C07AE48(v23, (uint64_t)v50, (uint64_t)v48, v47, (uint64_t)v18);
      v67 = v22;
      v30 = (uint64_t)v18;
      v32 = *(_QWORD *)(v22 + 16);
      v31 = *(_QWORD *)(v22 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_23C0808B4(v31 > 1, v32 + 1, 1);
        v22 = v67;
      }
      *(_QWORD *)(v22 + 16) = v32 + 1;
      v33 = v35;
      sub_23C08FC9C(v30, v22 + v37 + v32 * v35, (uint64_t (*)(_QWORD))type metadata accessor for FilterSectionDescriptor);
      v23 += v33;
      --v21;
      v18 = (char *)v30;
    }
    while (v21);
    return v22;
  }
  return result;
}

uint64_t sub_23C08AFD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v51 = MEMORY[0x24BEE4AF8];
    sub_23C0809F4(0, v4, 0);
    v7 = a3;
    v8 = 0;
    result = v51;
    v35 = a1 + 32;
    v36 = a2;
    v33 = v4;
    v37 = a2 + 56;
    v9 = v4;
    while (1)
    {
      v10 = (uint64_t *)(v35 + 56 * v8);
      v12 = *v10;
      v11 = v10[1];
      v14 = v10[2];
      v13 = v10[3];
      v15 = v10[4];
      v38 = result;
      v39 = v10[5];
      v16 = v10[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = v13;
      v41 = v16;
      if (v7)
        break;
      v27 = v14;
      v28 = v12;
      v29 = 0;
LABEL_19:
      result = v38;
      v51 = v38;
      v31 = *(_QWORD *)(v38 + 16);
      v30 = *(_QWORD *)(v38 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_23C0809F4((_QWORD *)(v30 > 1), v31 + 1, 1);
        v9 = v33;
        v7 = a3;
        result = v51;
      }
      ++v8;
      *(_QWORD *)(result + 16) = v31 + 1;
      v32 = result + (v31 << 6);
      *(_QWORD *)(v32 + 32) = v28;
      *(_QWORD *)(v32 + 40) = v11;
      *(_QWORD *)(v32 + 48) = v27;
      *(_QWORD *)(v32 + 56) = v40;
      *(_QWORD *)(v32 + 64) = v15;
      *(_QWORD *)(v32 + 72) = v39;
      *(_QWORD *)(v32 + 80) = v41;
      *(_BYTE *)(v32 + 88) = v29;
      a2 = v36;
      if (v8 == v9)
        return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = sub_23C07A870(v13, v15, v7);
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      if (a2)
      {
        v45 = v13;
        v46 = v15;
        v48 = 0;
        v49 = 0;
        v47 = 0;
        v50 = 0;
        if (*(_QWORD *)(a2 + 16))
        {
          sub_23C0E4A98();
          sub_23C0E4AA4();
          swift_bridgeObjectRetain();
          sub_23C0E47A4();
          v18 = sub_23C0E4AC8();
          v19 = -1 << *(_BYTE *)(a2 + 32);
          v20 = v18 & ~v19;
          if (((*(_QWORD *)(v37 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
          {
            v21 = ~v19;
            while (1)
            {
              v22 = *(_QWORD *)(a2 + 48) + 48 * v20;
              v23 = *(_QWORD *)(v22 + 32);
              v24 = *(_BYTE *)(v22 + 40);
              v25 = *(_OWORD *)(v22 + 16);
              v42[0] = *(_OWORD *)v22;
              v42[1] = v25;
              v43 = v23;
              v44 = v24;
              _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v42);
              if ((v26 & 1) != 0)
                break;
              v20 = (v20 + 1) & v21;
              if (((*(_QWORD *)(v37 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
                goto LABEL_11;
            }
            swift_bridgeObjectRelease();
            v27 = v14;
            swift_bridgeObjectRelease();
            v28 = v12;
            swift_bridgeObjectRelease();
            v29 = 2;
            swift_bridgeObjectRelease_n();
            goto LABEL_18;
          }
LABEL_11:
          swift_bridgeObjectRelease();
          v27 = v14;
          v28 = v12;
        }
        else
        {
          v27 = v14;
          v28 = v12;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = v14;
        swift_bridgeObjectRelease();
        v28 = v12;
      }
      swift_bridgeObjectRelease();
      v29 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = v14;
      swift_bridgeObjectRelease();
      v28 = v12;
      swift_bridgeObjectRelease();
      v29 = 0;
    }
LABEL_18:
    v9 = v33;
    v7 = a3;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_23C08B358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  int64_t v32;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x24BEE4AF8];
  if (v3)
  {
    v44 = MEMORY[0x24BEE4AF8];
    sub_23C0809D8(0, v3, 0);
    v7 = a3;
    v8 = 0;
    v34 = a1 + 32;
    v4 = v44;
    v31 = a2 + 56;
    v32 = v3;
    v9 = v3;
    while (1)
    {
      v10 = (uint64_t *)(v34 + 40 * v8);
      v12 = *v10;
      v11 = v10[1];
      v13 = v10[2];
      v14 = v10[3];
      v15 = v10[4];
      swift_bridgeObjectRetain();
      if (v7)
        break;
      v26 = 0;
LABEL_16:
      v44 = v4;
      v28 = *(_QWORD *)(v4 + 16);
      v27 = *(_QWORD *)(v4 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_23C0809D8((_QWORD *)(v27 > 1), v28 + 1, 1);
        v9 = v32;
        v7 = a3;
        v4 = v44;
      }
      ++v8;
      *(_QWORD *)(v4 + 16) = v28 + 1;
      v29 = v4 + 48 * v28;
      *(_QWORD *)(v29 + 32) = v12;
      *(_QWORD *)(v29 + 40) = v11;
      *(_QWORD *)(v29 + 48) = v13;
      *(_QWORD *)(v29 + 56) = v14;
      *(_QWORD *)(v29 + 64) = v15;
      *(_BYTE *)(v29 + 72) = v26;
      if (v8 == v9)
        return v4;
    }
    swift_bridgeObjectRetain_n();
    v16 = sub_23C07A870(v12, v11, v7);
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
    {
      if (a2)
      {
        v38 = v12;
        v39 = v11;
        v40 = v13;
        v41 = v14;
        v42 = v15;
        v43 = 1;
        if (*(_QWORD *)(a2 + 16))
        {
          sub_23C0E4A98();
          sub_23C0E4AA4();
          swift_bridgeObjectRetain();
          sub_23C0E47A4();
          sub_23C0E4ABC();
          sub_23C0E4ABC();
          sub_23C0E4ABC();
          v17 = sub_23C0E4AC8();
          v18 = -1 << *(_BYTE *)(a2 + 32);
          v19 = v17 & ~v18;
          if (((*(_QWORD *)(v31 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
          {
            v20 = ~v18;
            while (1)
            {
              v21 = *(_QWORD *)(a2 + 48) + 48 * v19;
              v22 = *(_QWORD *)(v21 + 32);
              v23 = *(_BYTE *)(v21 + 40);
              v24 = *(_OWORD *)(v21 + 16);
              v35[0] = *(_OWORD *)v21;
              v35[1] = v24;
              v36 = v22;
              v37 = v23;
              _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v35);
              if ((v25 & 1) != 0)
                break;
              v19 = (v19 + 1) & v20;
              if (((*(_QWORD *)(v31 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
                goto LABEL_11;
            }
            swift_bridgeObjectRelease_n();
            v26 = 2;
            goto LABEL_15;
          }
LABEL_11:
          swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease_n();
      v26 = 1;
    }
    else
    {
      swift_bridgeObjectRelease_n();
      v26 = 0;
    }
LABEL_15:
    v9 = v32;
    v7 = a3;
    goto LABEL_16;
  }
  return v4;
}

uint64_t sub_23C08B618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v51 = MEMORY[0x24BEE4AF8];
    sub_23C0809AC(0, v4, 0);
    v7 = a3;
    v8 = 0;
    result = v51;
    v35 = a1 + 32;
    v36 = a2;
    v33 = v4;
    v37 = a2 + 56;
    v9 = v4;
    while (1)
    {
      v10 = (uint64_t *)(v35 + 56 * v8);
      v12 = *v10;
      v11 = v10[1];
      v14 = v10[2];
      v13 = v10[3];
      v15 = v10[4];
      v38 = result;
      v39 = v10[5];
      v16 = v10[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = v13;
      v41 = v16;
      if (v7)
        break;
      v27 = v14;
      v28 = v12;
      v29 = 0;
LABEL_19:
      result = v38;
      v51 = v38;
      v31 = *(_QWORD *)(v38 + 16);
      v30 = *(_QWORD *)(v38 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_23C0809AC((_QWORD *)(v30 > 1), v31 + 1, 1);
        v9 = v33;
        v7 = a3;
        result = v51;
      }
      ++v8;
      *(_QWORD *)(result + 16) = v31 + 1;
      v32 = result + (v31 << 6);
      *(_QWORD *)(v32 + 32) = v28;
      *(_QWORD *)(v32 + 40) = v11;
      *(_QWORD *)(v32 + 48) = v27;
      *(_QWORD *)(v32 + 56) = v40;
      *(_QWORD *)(v32 + 64) = v15;
      *(_QWORD *)(v32 + 72) = v39;
      *(_QWORD *)(v32 + 80) = v41;
      *(_BYTE *)(v32 + 88) = v29;
      a2 = v36;
      if (v8 == v9)
        return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = sub_23C07A870(v13, v15, v7);
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      if (a2)
      {
        v45 = v13;
        v46 = v15;
        v48 = 0;
        v49 = 0;
        v47 = 0;
        v50 = 2;
        if (*(_QWORD *)(a2 + 16))
        {
          sub_23C0E4A98();
          sub_23C0E4AA4();
          swift_bridgeObjectRetain();
          sub_23C0E47A4();
          v18 = sub_23C0E4AC8();
          v19 = -1 << *(_BYTE *)(a2 + 32);
          v20 = v18 & ~v19;
          if (((*(_QWORD *)(v37 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
          {
            v21 = ~v19;
            while (1)
            {
              v22 = *(_QWORD *)(a2 + 48) + 48 * v20;
              v23 = *(_QWORD *)(v22 + 32);
              v24 = *(_BYTE *)(v22 + 40);
              v25 = *(_OWORD *)(v22 + 16);
              v42[0] = *(_OWORD *)v22;
              v42[1] = v25;
              v43 = v23;
              v44 = v24;
              _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v42);
              if ((v26 & 1) != 0)
                break;
              v20 = (v20 + 1) & v21;
              if (((*(_QWORD *)(v37 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
                goto LABEL_11;
            }
            swift_bridgeObjectRelease();
            v27 = v14;
            swift_bridgeObjectRelease();
            v28 = v12;
            swift_bridgeObjectRelease();
            v29 = 2;
            swift_bridgeObjectRelease_n();
            goto LABEL_18;
          }
LABEL_11:
          swift_bridgeObjectRelease();
          v27 = v14;
          v28 = v12;
        }
        else
        {
          v27 = v14;
          v28 = v12;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = v14;
        swift_bridgeObjectRelease();
        v28 = v12;
      }
      swift_bridgeObjectRelease();
      v29 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = v14;
      swift_bridgeObjectRelease();
      v28 = v12;
      swift_bridgeObjectRelease();
      v29 = 0;
    }
LABEL_18:
    v9 = v33;
    v7 = a3;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_23C08B99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD v49[2];
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v58 = MEMORY[0x24BEE4AF8];
    sub_23C080980(0, v4, 0);
    v7 = a3;
    v8 = 0;
    v37 = a1 + 32;
    v38 = a2;
    result = v58;
    v39 = v4;
    v40 = a2 + 56;
    do
    {
      v41 = v8;
      v42 = result;
      v9 = (uint64_t *)(v37 + 72 * v8);
      v10 = *v9;
      v11 = v9[1];
      v12 = v9[2];
      v13 = v9[3];
      v15 = v9[4];
      v14 = v9[5];
      v16 = v9[7];
      v43 = v9[6];
      v17 = v9[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v46 = v16;
      v47 = v14;
      v44 = v15;
      v45 = v12;
      v48 = v17;
      if (v7)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18 = sub_23C07A870(v15, v14, v7);
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v28 = v11;
          swift_bridgeObjectRelease();
          v29 = v10;
          swift_bridgeObjectRelease();
          v30 = 0;
LABEL_18:
          v7 = a3;
          v32 = v39;
          v31 = v41;
          result = v42;
          goto LABEL_19;
        }
        if (!a2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v28 = v11;
          swift_bridgeObjectRelease();
          v29 = v10;
          swift_bridgeObjectRelease();
          v30 = 1;
          goto LABEL_18;
        }
        v52 = v15;
        v53 = v14;
        v55 = 0;
        v56 = 0;
        v54 = 0;
        v57 = 3;
        if (*(_QWORD *)(a2 + 16))
        {
          sub_23C0E4A98();
          sub_23C0E4AA4();
          swift_bridgeObjectRetain();
          sub_23C0E47A4();
          v19 = sub_23C0E4AC8();
          v20 = -1 << *(_BYTE *)(a2 + 32);
          v21 = v19 & ~v20;
          if (((*(_QWORD *)(v40 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
          {
            v22 = ~v20;
            while (1)
            {
              v23 = *(_QWORD *)(a2 + 48) + 48 * v21;
              v24 = *(_QWORD *)(v23 + 32);
              v25 = *(_BYTE *)(v23 + 40);
              v26 = *(_OWORD *)(v23 + 16);
              v49[0] = *(_OWORD *)v23;
              v49[1] = v26;
              v50 = v24;
              v51 = v25;
              _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v49);
              if ((v27 & 1) != 0)
                break;
              v21 = (v21 + 1) & v22;
              if (((*(_QWORD *)(v40 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
                goto LABEL_11;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v28 = v11;
            swift_bridgeObjectRelease();
            v29 = v10;
            swift_bridgeObjectRelease();
            v30 = 2;
            swift_bridgeObjectRelease_n();
            goto LABEL_18;
          }
LABEL_11:
          swift_bridgeObjectRelease();
          v28 = v11;
          v29 = v10;
        }
        else
        {
          v28 = v11;
          v29 = v10;
        }
        v31 = v41;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v30 = 1;
        v7 = a3;
        v32 = v39;
        result = v42;
      }
      else
      {
        v28 = v11;
        v29 = v10;
        v30 = 0;
        v31 = v41;
        result = v42;
        v32 = v39;
      }
LABEL_19:
      v58 = result;
      v34 = *(_QWORD *)(result + 16);
      v33 = *(_QWORD *)(result + 24);
      if (v34 >= v33 >> 1)
      {
        sub_23C080980((_QWORD *)(v33 > 1), v34 + 1, 1);
        v32 = v39;
        v7 = a3;
        result = v58;
      }
      v8 = v31 + 1;
      *(_QWORD *)(result + 16) = v34 + 1;
      v35 = result + 80 * v34;
      *(_QWORD *)(v35 + 32) = v29;
      *(_QWORD *)(v35 + 40) = v28;
      *(_QWORD *)(v35 + 48) = v45;
      *(_QWORD *)(v35 + 56) = v13;
      *(_QWORD *)(v35 + 64) = v44;
      *(_QWORD *)(v35 + 72) = v47;
      *(_QWORD *)(v35 + 80) = v43;
      *(_QWORD *)(v35 + 88) = v46;
      *(_QWORD *)(v35 + 96) = v48;
      *(_BYTE *)(v35 + 104) = v30;
      a2 = v38;
    }
    while (v8 != v32);
  }
  return result;
}

uint64_t sub_23C08BDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v51 = MEMORY[0x24BEE4AF8];
    sub_23C080954(0, v4, 0);
    v7 = a3;
    v8 = 0;
    result = v51;
    v35 = a1 + 32;
    v36 = a2;
    v33 = v4;
    v37 = a2 + 56;
    v9 = v4;
    while (1)
    {
      v10 = (uint64_t *)(v35 + 56 * v8);
      v12 = *v10;
      v11 = v10[1];
      v14 = v10[2];
      v13 = v10[3];
      v15 = v10[4];
      v38 = result;
      v39 = v10[5];
      v16 = v10[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = v13;
      v41 = v16;
      if (v7)
        break;
      v27 = v14;
      v28 = v12;
      v29 = 0;
LABEL_19:
      result = v38;
      v51 = v38;
      v31 = *(_QWORD *)(v38 + 16);
      v30 = *(_QWORD *)(v38 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_23C080954((_QWORD *)(v30 > 1), v31 + 1, 1);
        v9 = v33;
        v7 = a3;
        result = v51;
      }
      ++v8;
      *(_QWORD *)(result + 16) = v31 + 1;
      v32 = result + (v31 << 6);
      *(_QWORD *)(v32 + 32) = v28;
      *(_QWORD *)(v32 + 40) = v11;
      *(_QWORD *)(v32 + 48) = v27;
      *(_QWORD *)(v32 + 56) = v40;
      *(_QWORD *)(v32 + 64) = v15;
      *(_QWORD *)(v32 + 72) = v39;
      *(_QWORD *)(v32 + 80) = v41;
      *(_BYTE *)(v32 + 88) = v29;
      a2 = v36;
      if (v8 == v9)
        return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = sub_23C07A870(v13, v15, v7);
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      if (a2)
      {
        v45 = v13;
        v46 = v15;
        v48 = 0;
        v49 = 0;
        v47 = 0;
        v50 = 4;
        if (*(_QWORD *)(a2 + 16))
        {
          sub_23C0E4A98();
          sub_23C0E4AA4();
          swift_bridgeObjectRetain();
          sub_23C0E47A4();
          v18 = sub_23C0E4AC8();
          v19 = -1 << *(_BYTE *)(a2 + 32);
          v20 = v18 & ~v19;
          if (((*(_QWORD *)(v37 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
          {
            v21 = ~v19;
            while (1)
            {
              v22 = *(_QWORD *)(a2 + 48) + 48 * v20;
              v23 = *(_QWORD *)(v22 + 32);
              v24 = *(_BYTE *)(v22 + 40);
              v25 = *(_OWORD *)(v22 + 16);
              v42[0] = *(_OWORD *)v22;
              v42[1] = v25;
              v43 = v23;
              v44 = v24;
              _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v42);
              if ((v26 & 1) != 0)
                break;
              v20 = (v20 + 1) & v21;
              if (((*(_QWORD *)(v37 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
                goto LABEL_11;
            }
            swift_bridgeObjectRelease();
            v27 = v14;
            swift_bridgeObjectRelease();
            v28 = v12;
            swift_bridgeObjectRelease();
            v29 = 2;
            swift_bridgeObjectRelease_n();
            goto LABEL_18;
          }
LABEL_11:
          swift_bridgeObjectRelease();
          v27 = v14;
          v28 = v12;
        }
        else
        {
          v27 = v14;
          v28 = v12;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = v14;
        swift_bridgeObjectRelease();
        v28 = v12;
      }
      swift_bridgeObjectRelease();
      v29 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = v14;
      swift_bridgeObjectRelease();
      v28 = v12;
      swift_bridgeObjectRelease();
      v29 = 0;
    }
LABEL_18:
    v9 = v33;
    v7 = a3;
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_23C08C170(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  char v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  char v25;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (!v2)
    return v3;
  v38 = MEMORY[0x24BEE4AF8];
  sub_23C080A20(0, v2, 0);
  v4 = a1;
  v3 = v38;
  result = sub_23C087510(a1);
  v7 = result;
  v9 = v8 & 1;
  while ((v7 & 0x8000000000000000) == 0 && v7 < 1 << *(_BYTE *)(v4 + 32))
  {
    if (((*(_QWORD *)(a1 + 56 + (((unint64_t)v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
      goto LABEL_22;
    if (*(_DWORD *)(v4 + 36) != (_DWORD)v6)
      goto LABEL_23;
    v31 = v6;
    v10 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 72 * v7);
    v11 = *v10;
    v29 = v10[1];
    v37 = v10[5];
    v12 = v10[6];
    v33 = v10[3];
    v34 = v10[7];
    v32 = v10[4];
    v35 = v10[8];
    v36 = v10[2];
    if (!v12)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v13 = v11;
      swift_bridgeObjectRetain();
LABEL_15:
      v21 = v31;
      v20 = v29;
      goto LABEL_16;
    }
    v13 = *v10;
    v28 = v9;
    v14 = *(_QWORD *)(a2 + 32);
    v15 = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v15)
    {
      swift_bridgeObjectRetain();
LABEL_14:
      v4 = a1;
      v9 = v28;
      goto LABEL_15;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = sub_23C0D2E00(v37, v12);
    if ((v17 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    v18 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 16 * v16);
    v19 = v18[1];
    v34 = *v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = 0;
    v36 = 0;
    v13 = MEMORY[0x24BEE4B08];
    v35 = v19;
    v4 = a1;
    v9 = v28;
    v21 = v31;
LABEL_16:
    v23 = *(_QWORD *)(v38 + 16);
    v22 = *(_QWORD *)(v38 + 24);
    if (v23 >= v22 >> 1)
    {
      v30 = v20;
      sub_23C080A20((char *)(v22 > 1), v23 + 1, 1);
      v20 = v30;
      v4 = a1;
    }
    *(_QWORD *)(v38 + 16) = v23 + 1;
    v24 = (_QWORD *)(v38 + 72 * v23);
    v24[4] = v13;
    v24[5] = v20;
    v24[6] = v36;
    v24[7] = v33;
    v24[8] = v32;
    v24[9] = v37;
    v24[10] = v12;
    v24[11] = v34;
    v24[12] = v35;
    result = sub_23C0875B0(v7, v21, v9 & 1, v4);
    v7 = result;
    v9 = v25 & 1;
    if (!--v2)
    {
      sub_23C08FF34(result, v6, v25 & 1);
      return v3;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_23C08C444(char *__dst, char *__src, unint64_t a3, char *a4, uint64_t a5)
{
  char *v5;
  unint64_t v6;
  char *v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  char *v24;
  BOOL v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;

  v5 = a4;
  v6 = a3;
  v8 = __dst;
  v9 = __src - __dst;
  v10 = (__src - __dst) / 72;
  v11 = a3 - (_QWORD)__src;
  v12 = (uint64_t)(a3 - (_QWORD)__src) / 72;
  if (v10 >= v12)
  {
    if (a4 != __src || &__src[72 * v12] <= a4)
      memmove(a4, __src, 72 * v12);
    v13 = &v5[72 * v12];
    if (v8 >= __src || v11 < 72)
    {
      v26 = __src;
      goto LABEL_58;
    }
    v27 = (char *)(v6 - 72);
    v26 = __src;
    v41 = v5;
    while (1)
    {
      v28 = v27 + 72;
      v29 = *((_QWORD *)v13 - 3);
      if (v29)
      {
        v30 = v26 - 72;
        v31 = *((_QWORD *)v26 - 3);
        if (v31)
        {
          if (*(_QWORD *)(a5 + 16))
          {
            v49 = v26;
            v46 = *((_QWORD *)v13 - 4);
            v43 = *((_QWORD *)v26 - 4);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v32 = sub_23C0D2E00(v46, v29);
            if ((v33 & 1) == 0)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
LABEL_46:
              v5 = v41;
              swift_bridgeObjectRelease_n();
              v28 = v27 + 72;
              goto LABEL_47;
            }
            v34 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v32);
            swift_bridgeObjectRelease();
            if (!*(_QWORD *)(a5 + 16) || (v35 = sub_23C0D2E00(v43, v31), (v36 & 1) == 0))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_46;
            }
            v37 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v35);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v23 = v34 < v37;
            v26 = v49;
            v28 = v27 + 72;
            v5 = v41;
            if (v23)
            {
              if (v27 + 72 == v49)
              {
                v26 = v30;
                if (v27 < v49)
                  goto LABEL_53;
              }
              else
              {
                v26 = v30;
              }
              goto LABEL_52;
            }
          }
        }
      }
LABEL_47:
      v30 = v13 - 72;
      if (v28 != v13)
      {
        v13 -= 72;
LABEL_52:
        memmove(v27, v30, 0x48uLL);
        goto LABEL_53;
      }
      v38 = v27 >= v13;
      v13 -= 72;
      if (v38)
        goto LABEL_52;
LABEL_53:
      if (v26 > v8)
      {
        v27 -= 72;
        if (v13 > v5)
          continue;
      }
      goto LABEL_58;
    }
  }
  if (a4 != __dst || &__dst[72 * v10] <= a4)
    memmove(a4, __dst, 72 * v10);
  v13 = &v5[72 * v10];
  if ((unint64_t)__src < v6 && v9 >= 72)
  {
    v14 = __src;
    v15 = a5;
    v44 = v6;
    while (1)
    {
      v16 = *((_QWORD *)v14 + 6);
      if (!v16)
        goto LABEL_21;
      v17 = *((_QWORD *)v5 + 6);
      if (!v17 || !*(_QWORD *)(v15 + 16))
        goto LABEL_21;
      v47 = *((_QWORD *)v14 + 5);
      v48 = v14;
      v45 = *((_QWORD *)v5 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = a5;
      v18 = sub_23C0D2E00(v47, v16);
      if ((v19 & 1) == 0)
        break;
      v42 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v18);
      swift_bridgeObjectRelease();
      if (!*(_QWORD *)(a5 + 16) || (v20 = sub_23C0D2E00(v45, v17), (v21 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      v22 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v20);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v6 = v44;
      v23 = v42 < v22;
      v14 = v48;
      if (!v23)
        goto LABEL_21;
      v24 = v48;
      v14 = v48 + 72;
      if (v8 != v48)
        goto LABEL_22;
LABEL_23:
      v8 += 72;
      if (v5 >= v13 || (unint64_t)v14 >= v6)
        goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
LABEL_20:
    v6 = v44;
    swift_bridgeObjectRelease_n();
LABEL_21:
    v24 = v5;
    v25 = v8 == v5;
    v5 += 72;
    if (v25)
      goto LABEL_23;
LABEL_22:
    memmove(v8, v24, 0x48uLL);
    goto LABEL_23;
  }
LABEL_25:
  v26 = v8;
LABEL_58:
  v39 = (v13 - v5) / 72;
  if (v26 != v5 || v26 >= &v5[72 * v39])
    memmove(v26, v5, 72 * v39);
  return 1;
}

uint64_t sub_23C08CBB8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v28 = result;
  if (a3 != a2)
  {
    v30 = *a4;
    v6 = (_QWORD *)(*a4 + 72 * a3 + 64);
    while (2)
    {
      v7 = v30 + 72 * a3;
      v8 = *(_QWORD *)(v7 + 40);
      v9 = *(_QWORD *)(v7 + 48);
      v29 = v6;
      v10 = v28;
      v31 = a3;
      while (1)
      {
        if (!v9)
          goto LABEL_6;
        v11 = *(v6 - 11);
        if (!v11 || !*(_QWORD *)(a5 + 16))
          goto LABEL_6;
        v32 = v10;
        v12 = *(v6 - 12);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v13 = sub_23C0D2E00(v8, v9);
        if ((v14 & 1) == 0)
          break;
        v15 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v13);
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(a5 + 16) || (v16 = sub_23C0D2E00(v12, v11), (v17 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        v18 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 8 * v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease_n();
        a3 = v31;
        if (v15 >= v18)
          goto LABEL_6;
        if (!v30)
        {
          __break(1u);
          return result;
        }
        v20 = *(v6 - 8);
        v19 = *(v6 - 7);
        v21 = *(v6 - 4);
        v8 = *(v6 - 3);
        v22 = *v6;
        v23 = *((_OWORD *)v6 - 3);
        v24 = *((_OWORD *)v6 - 1);
        v25 = *(_OWORD *)(v6 - 11);
        *((_OWORD *)v6 - 2) = *(_OWORD *)(v6 - 13);
        *((_OWORD *)v6 - 1) = v25;
        *v6 = *(v6 - 9);
        v26 = *(_OWORD *)(v6 - 15);
        *((_OWORD *)v6 - 4) = *(_OWORD *)(v6 - 17);
        *((_OWORD *)v6 - 3) = v26;
        *(v6 - 9) = v22;
        v6 -= 9;
        *(v6 - 8) = v20;
        *(v6 - 7) = v19;
        *((_OWORD *)v6 - 3) = v23;
        *((_OWORD *)v6 - 1) = v24;
        v9 = v24;
        v10 = v32 + 1;
        *(v6 - 4) = v21;
        *(v6 - 3) = v8;
        if (v31 == v32 + 1)
          goto LABEL_6;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
LABEL_5:
      result = swift_bridgeObjectRelease_n();
      a3 = v31;
LABEL_6:
      ++a3;
      v6 = v29 + 9;
      if (a3 == a2)
        return result;
      continue;
    }
  }
  return result;
}

uint64_t sub_23C08CF20(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char *v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  char *v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t result;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _BOOL4 v141;
  _QWORD *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;

  v5 = a1[1];
  swift_bridgeObjectRetain_n();
  v6 = sub_23C0E4A5C();
  if (v6 >= v5)
  {
    if (v5 < 0)
      goto LABEL_189;
    if (!v5)
      return swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    sub_23C08CBB8(0, v5, 1, a1, a2);
    if (!v2)
      return swift_bridgeObjectRelease_n();
LABEL_165:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  if (v5 >= 0)
    v7 = v5;
  else
    v7 = v5 + 1;
  if (v5 < -1)
    goto LABEL_188;
  v149 = a2;
  v139 = v6;
  v145 = v2;
  v133 = a1;
  if (v5 > 1)
  {
    v8 = v7 >> 1;
    v9 = sub_23C0E4804();
    *(_QWORD *)(v9 + 16) = v8;
    v135 = v9;
    v143 = (char *)(v9 + 32);
LABEL_13:
    v10 = 0;
    v11 = *a1;
    v134 = *a1 + 32;
    v132 = *a1 + 64;
    v144 = MEMORY[0x24BEE4AF8];
    v138 = v5;
    v150 = *a1;
    while (1)
    {
      v13 = v10 + 1;
      v140 = v10;
      if (v10 + 1 >= v5)
        goto LABEL_98;
      v14 = v11 + 72 * v13;
      v15 = *(_QWORD *)(v14 + 48);
      if (!v15)
      {
        v24 = 0;
LABEL_27:
        v25 = v10 + 2;
        v27 = v138;
        v26 = v139;
        if (v10 + 2 >= v138)
          goto LABEL_57;
        goto LABEL_36;
      }
      v16 = v11 + 72 * v10;
      v17 = *(_QWORD *)(v16 + 48);
      if (!v17 || !*(_QWORD *)(a2 + 16))
      {
        v24 = 0;
        v13 = v10 + 1;
        goto LABEL_27;
      }
      v155 = *(_QWORD *)(v14 + 40);
      v152 = *(_QWORD *)(v16 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = sub_23C0D2E00(v155, v15);
      if ((v19 & 1) != 0)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v18);
        swift_bridgeObjectRelease();
        if (!*(_QWORD *)(a2 + 16))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v25 = v10 + 2;
          v27 = v138;
          if (v10 + 2 >= v138)
          {
            v13 = v10 + 2;
LABEL_148:
            v26 = v139;
            v11 = v150;
            if (v13 >= v27)
              goto LABEL_98;
            goto LABEL_70;
          }
          v24 = 0;
          goto LABEL_35;
        }
        v21 = sub_23C0D2E00(v152, v17);
        if ((v22 & 1) != 0)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v21);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v24 = v20 < v23;
          v11 = v150;
          v13 = v10 + 1;
          goto LABEL_27;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
      }
      swift_bridgeObjectRelease_n();
      v25 = v10 + 2;
      v27 = v138;
      if (v10 + 2 >= v138)
      {
        v13 = v10 + 2;
        a2 = v149;
        goto LABEL_148;
      }
      v24 = 0;
      a2 = v149;
LABEL_35:
      v26 = v139;
      v11 = v150;
      v13 = v10 + 1;
LABEL_36:
      v28 = v134 + 72 * v25;
      v29 = v25;
      v141 = v24;
      do
      {
        v25 = v29;
        v30 = *(_QWORD *)(v28 + 16);
        if (v30)
        {
          v31 = v11 + 72 * v13;
          v32 = *(_QWORD *)(v31 + 48);
          if (v32 && *(_QWORD *)(a2 + 16))
          {
            v153 = *(_QWORD *)(v28 + 8);
            v146 = *(_QWORD *)(v31 + 40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v33 = sub_23C0D2E00(v153, v30);
            if ((v34 & 1) != 0)
            {
              v136 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v33);
              swift_bridgeObjectRelease();
              v27 = v138;
              if (*(_QWORD *)(a2 + 16) && (v35 = sub_23C0D2E00(v146, v32), (v36 & 1) != 0))
              {
                v37 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v35);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                v102 = v136 < v37;
                v27 = v138;
                v26 = v139;
                v38 = !v102;
                v24 = v141;
                v11 = v150;
                v10 = v140;
                if (((v141 ^ v38) & 1) == 0)
                  goto LABEL_57;
              }
              else
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                v26 = v139;
                v10 = v140;
                v11 = v150;
                v24 = v141;
                if (v141)
                  goto LABEL_58;
              }
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              v26 = v139;
              v10 = v140;
              v11 = v150;
              v24 = v141;
              v27 = v138;
              if (v141)
                goto LABEL_58;
            }
          }
          else
          {
            v26 = v139;
            if (v24)
              goto LABEL_58;
          }
        }
        else if (v24)
        {
          goto LABEL_58;
        }
        v28 += 72;
        v29 = v25 + 1;
        v13 = v25;
      }
      while (v25 + 1 < v27);
      ++v25;
LABEL_57:
      v13 = v25;
      if (v24)
      {
LABEL_58:
        if (v25 < v10)
          goto LABEL_190;
        if (v10 >= v25)
        {
          v13 = v25;
          if (v25 >= v27)
            goto LABEL_98;
          goto LABEL_70;
        }
        v39 = 72 * v25;
        v40 = 72 * v10;
        v41 = v10;
        v42 = v25;
        do
        {
          if (v41 != --v42)
          {
            if (!v11)
              goto LABEL_195;
            v43 = v11 + v39;
            v44 = *(_QWORD *)(v11 + v40);
            v45 = *(_QWORD *)(v11 + v40 + 24);
            v46 = *(_QWORD *)(v11 + v40 + 32);
            v158 = *(_QWORD *)(v11 + v40 + 56);
            v157 = *(_QWORD *)(v11 + v40 + 64);
            v154 = *(_OWORD *)(v11 + v40 + 8);
            v156 = *(_OWORD *)(v11 + v40 + 40);
            memmove((void *)(v11 + v40), (const void *)(v11 + v39 - 72), 0x48uLL);
            *(_QWORD *)(v43 - 72) = v44;
            *(_OWORD *)(v43 - 64) = v154;
            *(_QWORD *)(v43 - 48) = v45;
            *(_QWORD *)(v43 - 40) = v46;
            *(_OWORD *)(v43 - 32) = v156;
            *(_QWORD *)(v43 - 16) = v158;
            *(_QWORD *)(v43 - 8) = v157;
            a2 = v149;
            v11 = v150;
            v27 = v138;
            v26 = v139;
          }
          ++v41;
          v39 -= 72;
          v40 += 72;
        }
        while (v41 < v42);
        v13 = v25;
        v10 = v140;
      }
      if (v13 >= v27)
        goto LABEL_98;
LABEL_70:
      if (__OFSUB__(v13, v10))
        goto LABEL_187;
      if (v13 - v10 < v26)
      {
        if (__OFADD__(v10, v26))
          goto LABEL_191;
        if (v10 + v26 >= v27)
          v47 = v27;
        else
          v47 = v10 + v26;
        if (v47 < v10)
        {
LABEL_192:
          __break(1u);
LABEL_193:
          swift_bridgeObjectRelease_n();
          __break(1u);
LABEL_194:
          swift_bridgeObjectRelease_n();
          __break(1u);
LABEL_195:
          swift_bridgeObjectRelease_n();
          __break(1u);
LABEL_196:
          result = swift_bridgeObjectRelease_n();
          __break(1u);
          return result;
        }
        if (v13 != v47)
        {
          v48 = (_QWORD *)(v132 + 72 * v13);
          v137 = v47;
          do
          {
            v147 = v13;
            v49 = v11 + 72 * v13;
            v50 = *(_QWORD *)(v49 + 40);
            v51 = *(_QWORD *)(v49 + 48);
            v142 = v48;
            v52 = v140;
            do
            {
              if (!v51)
                break;
              v53 = *(v48 - 11);
              if (!v53 || !*(_QWORD *)(a2 + 16))
                break;
              v151 = v52;
              v54 = *(v48 - 12);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v55 = sub_23C0D2E00(v50, v51);
              if ((v56 & 1) == 0)
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease_n();
                goto LABEL_80;
              }
              v57 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v55);
              swift_bridgeObjectRelease();
              if (!*(_QWORD *)(a2 + 16) || (v58 = sub_23C0D2E00(v54, v53), (v59 & 1) == 0))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
LABEL_80:
                swift_bridgeObjectRelease_n();
LABEL_81:
                v11 = v150;
                break;
              }
              v60 = *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v58);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
              if (v57 >= v60)
              {
                a2 = v149;
                goto LABEL_81;
              }
              v11 = v150;
              if (!v150)
                goto LABEL_193;
              v62 = *(v48 - 8);
              v61 = *(v48 - 7);
              v63 = *(v48 - 4);
              v50 = *(v48 - 3);
              v64 = *v48;
              v65 = *((_OWORD *)v48 - 3);
              v66 = *((_OWORD *)v48 - 1);
              v67 = *(_OWORD *)(v48 - 11);
              *((_OWORD *)v48 - 2) = *(_OWORD *)(v48 - 13);
              *((_OWORD *)v48 - 1) = v67;
              *v48 = *(v48 - 9);
              v68 = *(_OWORD *)(v48 - 15);
              *((_OWORD *)v48 - 4) = *(_OWORD *)(v48 - 17);
              *((_OWORD *)v48 - 3) = v68;
              *(v48 - 9) = v64;
              v48 -= 9;
              *(v48 - 8) = v62;
              *(v48 - 7) = v61;
              *((_OWORD *)v48 - 3) = v65;
              *((_OWORD *)v48 - 1) = v66;
              v51 = v66;
              v52 = v151 + 1;
              *(v48 - 4) = v63;
              *(v48 - 3) = v50;
              a2 = v149;
            }
            while (v13 != v151 + 1);
            ++v13;
            v48 = v142 + 9;
          }
          while (v147 + 1 != v137);
          v13 = v137;
          v10 = v140;
        }
      }
LABEL_98:
      v69 = (char *)v144;
      if (v13 < v10)
        goto LABEL_182;
      v148 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v69 = sub_23C085F4C(0, *(_QWORD *)(v144 + 16) + 1, 1, (char *)v144);
      v71 = *((_QWORD *)v69 + 2);
      v70 = *((_QWORD *)v69 + 3);
      v12 = v71 + 1;
      v11 = v150;
      if (v71 >= v70 >> 1)
      {
        v122 = sub_23C085F4C((char *)(v70 > 1), v71 + 1, 1, v69);
        v11 = v150;
        v69 = v122;
      }
      *((_QWORD *)v69 + 2) = v12;
      v159 = v69 + 32;
      v72 = &v69[16 * v71 + 32];
      *(_QWORD *)v72 = v10;
      *((_QWORD *)v72 + 1) = v148;
      v144 = (uint64_t)v69;
      if (v71)
      {
        v73 = v69 + 32;
        while (1)
        {
          v74 = v12 - 1;
          if (v12 >= 4)
          {
            v79 = &v73[16 * v12];
            v80 = *((_QWORD *)v79 - 8);
            v81 = *((_QWORD *)v79 - 7);
            v85 = __OFSUB__(v81, v80);
            v82 = v81 - v80;
            if (v85)
              goto LABEL_171;
            v84 = *((_QWORD *)v79 - 6);
            v83 = *((_QWORD *)v79 - 5);
            v85 = __OFSUB__(v83, v84);
            v77 = v83 - v84;
            v78 = v85;
            if (v85)
              goto LABEL_172;
            v86 = v12 - 2;
            v87 = &v73[16 * v12 - 32];
            v89 = *(_QWORD *)v87;
            v88 = *((_QWORD *)v87 + 1);
            v85 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v85)
              goto LABEL_173;
            v85 = __OFADD__(v77, v90);
            v91 = v77 + v90;
            if (v85)
              goto LABEL_175;
            if (v91 >= v82)
            {
              v109 = &v73[16 * v74];
              v111 = *(_QWORD *)v109;
              v110 = *((_QWORD *)v109 + 1);
              v85 = __OFSUB__(v110, v111);
              v112 = v110 - v111;
              if (v85)
                goto LABEL_181;
              v102 = v77 < v112;
              goto LABEL_136;
            }
          }
          else
          {
            if (v12 != 3)
            {
              v103 = *((_QWORD *)v69 + 4);
              v104 = *((_QWORD *)v69 + 5);
              v85 = __OFSUB__(v104, v103);
              v96 = v104 - v103;
              v97 = v85;
              goto LABEL_130;
            }
            v76 = *((_QWORD *)v69 + 4);
            v75 = *((_QWORD *)v69 + 5);
            v85 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            v78 = v85;
          }
          if ((v78 & 1) != 0)
            goto LABEL_174;
          v86 = v12 - 2;
          v92 = &v73[16 * v12 - 32];
          v94 = *(_QWORD *)v92;
          v93 = *((_QWORD *)v92 + 1);
          v95 = __OFSUB__(v93, v94);
          v96 = v93 - v94;
          v97 = v95;
          if (v95)
            goto LABEL_176;
          v98 = &v73[16 * v74];
          v100 = *(_QWORD *)v98;
          v99 = *((_QWORD *)v98 + 1);
          v85 = __OFSUB__(v99, v100);
          v101 = v99 - v100;
          if (v85)
            goto LABEL_178;
          if (__OFADD__(v96, v101))
            goto LABEL_180;
          if (v96 + v101 >= v77)
          {
            v102 = v77 < v101;
LABEL_136:
            if (v102)
              v74 = v86;
            goto LABEL_138;
          }
LABEL_130:
          if ((v97 & 1) != 0)
            goto LABEL_177;
          v105 = &v73[16 * v74];
          v107 = *(_QWORD *)v105;
          v106 = *((_QWORD *)v105 + 1);
          v85 = __OFSUB__(v106, v107);
          v108 = v106 - v107;
          if (v85)
            goto LABEL_179;
          if (v108 < v96)
            goto LABEL_15;
LABEL_138:
          v113 = v74 - 1;
          if (v74 - 1 >= v12)
          {
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
LABEL_186:
            __break(1u);
LABEL_187:
            __break(1u);
LABEL_188:
            __break(1u);
LABEL_189:
            __break(1u);
LABEL_190:
            __break(1u);
LABEL_191:
            __break(1u);
            goto LABEL_192;
          }
          if (!v11)
            goto LABEL_194;
          v114 = &v73[16 * v113];
          v115 = *(_QWORD *)v114;
          v116 = &v73[16 * v74];
          v117 = *((_QWORD *)v116 + 1);
          v118 = (char *)(v11 + 72 * *(_QWORD *)v114);
          v119 = (char *)(v11 + 72 * *(_QWORD *)v116);
          v120 = v11 + 72 * v117;
          swift_bridgeObjectRetain();
          sub_23C08C444(v118, v119, v120, v143, v149);
          if (v145)
          {
LABEL_164:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v135 + 16) = 0;
            goto LABEL_165;
          }
          swift_bridgeObjectRelease();
          if (v117 < v115)
            goto LABEL_168;
          v69 = (char *)v144;
          if (v74 > *(_QWORD *)(v144 + 16))
            goto LABEL_169;
          *(_QWORD *)v114 = v115;
          v73 = v159;
          *(_QWORD *)&v159[16 * v113 + 8] = v117;
          v121 = *(_QWORD *)(v144 + 16);
          if (v74 >= v121)
            goto LABEL_170;
          v12 = v121 - 1;
          memmove(v116, v116 + 16, 16 * (v121 - 1 - v74));
          *(_QWORD *)(v144 + 16) = v121 - 1;
          v11 = v150;
          if (v121 <= 2)
            goto LABEL_15;
        }
      }
      v12 = 1;
LABEL_15:
      v5 = v138;
      v10 = v148;
      a2 = v149;
      if (v148 >= v138)
        goto LABEL_152;
    }
  }
  v143 = (char *)(MEMORY[0x24BEE4AF8] + 32);
  v135 = MEMORY[0x24BEE4AF8];
  if (v5 == 1)
    goto LABEL_13;
  v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  v144 = MEMORY[0x24BEE4AF8];
LABEL_152:
  if (v12 >= 2)
  {
    v124 = *v133;
    do
    {
      v125 = v12 - 2;
      if (v12 < 2)
        goto LABEL_183;
      if (!v124)
        goto LABEL_196;
      v126 = *(_QWORD *)(v144 + 32 + 16 * v125);
      v127 = *(_QWORD *)(v144 + 32 + 16 * (v12 - 1) + 8);
      v128 = (char *)(v124 + 72 * *(_QWORD *)(v144 + 32 + 16 * (v12 - 1)));
      swift_bridgeObjectRetain();
      sub_23C08C444((char *)(v124 + 72 * v126), v128, v124 + 72 * v127, v143, a2);
      if (v145)
        goto LABEL_164;
      swift_bridgeObjectRelease();
      if (v127 < v126)
        goto LABEL_184;
      v129 = (char *)v144;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v129 = sub_23C086044(v144);
      if (v125 >= *((_QWORD *)v129 + 2))
        goto LABEL_185;
      v130 = &v129[16 * v125 + 32];
      *(_QWORD *)v130 = v126;
      *((_QWORD *)v130 + 1) = v127;
      v131 = *((_QWORD *)v129 + 2);
      if (v12 > v131)
        goto LABEL_186;
      memmove(&v129[16 * v12 + 16], &v129[16 * v12 + 32], 16 * (v131 - v12));
      v144 = (uint64_t)v129;
      *((_QWORD *)v129 + 2) = v131 - 1;
      v12 = v131 - 1;
      a2 = v149;
    }
    while (v131 > 2);
  }
  swift_bridgeObjectRelease();
  *(_QWORD *)(v135 + 16) = 0;
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C08DF20(char **a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_23C0873E4((uint64_t)v4);
  v5 = *((_QWORD *)v4 + 2);
  v7[0] = (uint64_t)(v4 + 32);
  v7[1] = v5;
  swift_bridgeObjectRetain();
  sub_23C08CF20(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_23C08DFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v56 = MEMORY[0x24BEE4AF8];
    sub_23C080928(0, v4, 0);
    v7 = a3;
    v8 = 0;
    v36 = a1 + 32;
    v37 = a2;
    result = v56;
    v38 = v4;
    v39 = a2 + 56;
    do
    {
      v9 = (uint64_t *)(v36 + 72 * v8);
      v11 = *v9;
      v10 = v9[1];
      v13 = v9[2];
      v12 = v9[3];
      v14 = v9[4];
      v41 = result;
      v42 = v9[5];
      v15 = v9[6];
      v40 = v9[7];
      v16 = v9[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = v12;
      v44 = v10;
      v45 = v15;
      v46 = v16;
      if (v7)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17 = sub_23C07A870(v12, v14, v7);
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v27 = v13;
          swift_bridgeObjectRelease();
          v28 = v11;
          swift_bridgeObjectRelease();
          v29 = 0;
LABEL_18:
          v7 = a3;
          v31 = v38;
          v30 = v40;
          result = v41;
          goto LABEL_19;
        }
        if (!a2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v27 = v13;
          swift_bridgeObjectRelease();
          v28 = v11;
          swift_bridgeObjectRelease();
          v29 = 1;
          goto LABEL_18;
        }
        v50 = v12;
        v51 = v14;
        v53 = 0;
        v54 = 0;
        v52 = 0;
        v55 = 5;
        if (*(_QWORD *)(a2 + 16))
        {
          sub_23C0E4A98();
          sub_23C0E4AA4();
          swift_bridgeObjectRetain();
          sub_23C0E47A4();
          v18 = sub_23C0E4AC8();
          v19 = -1 << *(_BYTE *)(a2 + 32);
          v20 = v18 & ~v19;
          if (((*(_QWORD *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
          {
            v21 = ~v19;
            while (1)
            {
              v22 = *(_QWORD *)(a2 + 48) + 48 * v20;
              v23 = *(_QWORD *)(v22 + 32);
              v24 = *(_BYTE *)(v22 + 40);
              v25 = *(_OWORD *)(v22 + 16);
              v47[0] = *(_OWORD *)v22;
              v47[1] = v25;
              v48 = v23;
              v49 = v24;
              _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v47);
              if ((v26 & 1) != 0)
                break;
              v20 = (v20 + 1) & v21;
              if (((*(_QWORD *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
                goto LABEL_11;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v27 = v13;
            swift_bridgeObjectRelease();
            v28 = v11;
            swift_bridgeObjectRelease();
            v29 = 2;
            swift_bridgeObjectRelease_n();
            goto LABEL_18;
          }
LABEL_11:
          swift_bridgeObjectRelease();
          v27 = v13;
          v28 = v11;
        }
        else
        {
          v27 = v13;
          v28 = v11;
        }
        v30 = v40;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v29 = 1;
        v7 = a3;
        v31 = v38;
        result = v41;
      }
      else
      {
        v27 = v13;
        v28 = v11;
        v29 = 0;
        v30 = v40;
        result = v41;
        v31 = v38;
      }
LABEL_19:
      v56 = result;
      v33 = *(_QWORD *)(result + 16);
      v32 = *(_QWORD *)(result + 24);
      if (v33 >= v32 >> 1)
      {
        sub_23C080928((_QWORD *)(v32 > 1), v33 + 1, 1);
        v31 = v38;
        v7 = a3;
        result = v56;
      }
      ++v8;
      *(_QWORD *)(result + 16) = v33 + 1;
      v34 = result + 80 * v33;
      *(_QWORD *)(v34 + 32) = v28;
      *(_QWORD *)(v34 + 40) = v44;
      *(_QWORD *)(v34 + 48) = v27;
      *(_QWORD *)(v34 + 56) = v43;
      *(_QWORD *)(v34 + 64) = v14;
      *(_QWORD *)(v34 + 72) = v42;
      *(_QWORD *)(v34 + 80) = v45;
      *(_QWORD *)(v34 + 88) = v30;
      *(_QWORD *)(v34 + 96) = v46;
      *(_BYTE *)(v34 + 104) = v29;
      a2 = v37;
    }
    while (v8 != v31);
  }
  return result;
}

uint64_t sub_23C08E3C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;

  v4 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x24BEE4AF8];
  if (v4)
  {
    v51 = MEMORY[0x24BEE4AF8];
    sub_23C0808FC(0, v4, 0);
    v7 = a3;
    v8 = 0;
    result = v51;
    v35 = a1 + 32;
    v36 = a2;
    v33 = v4;
    v37 = a2 + 56;
    v9 = v4;
    while (1)
    {
      v10 = (uint64_t *)(v35 + 56 * v8);
      v12 = *v10;
      v11 = v10[1];
      v14 = v10[2];
      v13 = v10[3];
      v15 = v10[4];
      v38 = result;
      v39 = v10[5];
      v16 = v10[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = v13;
      v41 = v16;
      if (v7)
        break;
      v27 = v14;
      v28 = v12;
      v29 = 0;
LABEL_19:
      result = v38;
      v51 = v38;
      v31 = *(_QWORD *)(v38 + 16);
      v30 = *(_QWORD *)(v38 + 24);
      if (v31 >= v30 >> 1)
      {
        sub_23C0808FC((_QWORD *)(v30 > 1), v31 + 1, 1);
        v9 = v33;
        v7 = a3;
        result = v51;
      }
      ++v8;
      *(_QWORD *)(result + 16) = v31 + 1;
      v32 = result + (v31 << 6);
      *(_QWORD *)(v32 + 32) = v28;
      *(_QWORD *)(v32 + 40) = v11;
      *(_QWORD *)(v32 + 48) = v27;
      *(_QWORD *)(v32 + 56) = v40;
      *(_QWORD *)(v32 + 64) = v15;
      *(_QWORD *)(v32 + 72) = v39;
      *(_QWORD *)(v32 + 80) = v41;
      *(_BYTE *)(v32 + 88) = v29;
      a2 = v36;
      if (v8 == v9)
        return result;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v17 = sub_23C07A870(v13, v15, v7);
    swift_bridgeObjectRelease();
    if ((v17 & 1) != 0)
    {
      if (a2)
      {
        v45 = v13;
        v46 = v15;
        v48 = 0;
        v49 = 0;
        v47 = 0;
        v50 = 6;
        if (*(_QWORD *)(a2 + 16))
        {
          sub_23C0E4A98();
          sub_23C0E4AA4();
          swift_bridgeObjectRetain();
          sub_23C0E47A4();
          v18 = sub_23C0E4AC8();
          v19 = -1 << *(_BYTE *)(a2 + 32);
          v20 = v18 & ~v19;
          if (((*(_QWORD *)(v37 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
          {
            v21 = ~v19;
            while (1)
            {
              v22 = *(_QWORD *)(a2 + 48) + 48 * v20;
              v23 = *(_QWORD *)(v22 + 32);
              v24 = *(_BYTE *)(v22 + 40);
              v25 = *(_OWORD *)(v22 + 16);
              v42[0] = *(_OWORD *)v22;
              v42[1] = v25;
              v43 = v23;
              v44 = v24;
              _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v42);
              if ((v26 & 1) != 0)
                break;
              v20 = (v20 + 1) & v21;
              if (((*(_QWORD *)(v37 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
                goto LABEL_11;
            }
            swift_bridgeObjectRelease();
            v27 = v14;
            swift_bridgeObjectRelease();
            v28 = v12;
            swift_bridgeObjectRelease();
            v29 = 2;
            swift_bridgeObjectRelease_n();
            goto LABEL_18;
          }
LABEL_11:
          swift_bridgeObjectRelease();
          v27 = v14;
          v28 = v12;
        }
        else
        {
          v27 = v14;
          v28 = v12;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v27 = v14;
        swift_bridgeObjectRelease();
        v28 = v12;
      }
      swift_bridgeObjectRelease();
      v29 = 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v27 = v14;
      swift_bridgeObjectRelease();
      v28 = v12;
      swift_bridgeObjectRelease();
      v29 = 0;
    }
LABEL_18:
    v9 = v33;
    v7 = a3;
    goto LABEL_19;
  }
  return result;
}

_QWORD *sub_23C08E748(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _BYTE v45[72];
  _QWORD v46[10];
  _QWORD v47[3];
  char v48;
  _OWORD v49[4];
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;

  v9 = v8;
  v44 = a8;
  v43 = a7;
  v41 = a4;
  v42 = a6;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F4E8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1;
  v40 = type metadata accessor for FilterSectionDescriptor();
  v61 = *(_QWORD *)(v40 - 8);
  v18 = MEMORY[0x24BDAC7A8](v40);
  v39 = (uint64_t)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v35 = (uint64_t)&v34 - v20;
  v38 = *(_QWORD *)(a1 + 16);
  if (!v38)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  v34 = v9;
  v36 = a5 & 1;
  swift_bridgeObjectRetain();
  v21 = 0;
  v22 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v37 = v17;
  do
  {
    v23 = *(unsigned __int8 *)(v17 + v21 + 32);
    v24 = a2[7];
    v57 = a2[6];
    v58 = v24;
    v59 = a2[8];
    v60 = *((_QWORD *)a2 + 18);
    v25 = a2[3];
    v53 = a2[2];
    v54 = v25;
    v26 = a2[5];
    v55 = a2[4];
    v56 = v26;
    v27 = a2[1];
    v51 = *a2;
    v52 = v27;
    v28 = *(_OWORD *)(a3 + 48);
    v49[2] = *(_OWORD *)(a3 + 32);
    v49[3] = v28;
    v50 = *(_QWORD *)(a3 + 64);
    v29 = *(_OWORD *)(a3 + 16);
    v49[0] = *(_OWORD *)a3;
    v49[1] = v29;
    v47[0] = v41;
    v47[1] = v36;
    v47[2] = v42;
    v48 = v43;
    memset(v46, 0, 72);
    sub_23C06E7B4(v44, (uint64_t)v45, &qword_256B0F438);
    sub_23C07D688(v23, (uint64_t *)v49, v47, v46, (uint64_t)v45, (uint64_t)v16);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v16, 1, v40) == 1)
    {
      sub_23C06E834((uint64_t)v16, &qword_256B0F4E8);
    }
    else
    {
      v30 = v35;
      sub_23C08FC9C((uint64_t)v16, v35, (uint64_t (*)(_QWORD))type metadata accessor for FilterSectionDescriptor);
      sub_23C08FC9C(v30, v39, (uint64_t (*)(_QWORD))type metadata accessor for FilterSectionDescriptor);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v22 = (_QWORD *)sub_23C0818E8(0, v22[2] + 1, 1, v22);
      v32 = v22[2];
      v31 = v22[3];
      if (v32 >= v31 >> 1)
        v22 = (_QWORD *)sub_23C0818E8(v31 > 1, v32 + 1, 1, v22);
      v22[2] = v32 + 1;
      sub_23C08FC9C(v39, (uint64_t)v22+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(_QWORD *)(v61 + 72) * v32, (uint64_t (*)(_QWORD))type metadata accessor for FilterSectionDescriptor);
    }
    ++v21;
    v17 = v37;
  }
  while (v38 != v21);
  swift_bridgeObjectRelease();
  return v22;
}

uint64_t sub_23C08EA4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5[5];
  unsigned __int8 v6;
  uint64_t v7;
  _BYTE v8[48];

  v2 = *(_QWORD *)(a1 + 16);
  sub_23C090094();
  result = sub_23C0E4864();
  v7 = result;
  if (v2)
  {
    v4 = a1 + 32;
    do
    {
      sub_23C07CAAC(v4, (uint64_t)v8);
      sub_23C081C58((uint64_t)v8, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682C0);
      sub_23C0D8DD4((uint64_t)v5, (uint64_t)v8);
      sub_23C0682A8(v5[0], v5[1], v5[2], v5[3], v5[4], v6);
      v4 += 48;
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_23C08EAF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23C0900DC;
  return sub_23C07F080(a1, v4, v5, v6, v7);
}

uint64_t sub_23C08EB78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23C0900DC;
  return sub_23C07F080(a1, v4, v5, v6, v7);
}

uint64_t sub_23C08EBF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23C0900DC;
  return sub_23C07F080(a1, v4, v5, v6, v7);
}

uint64_t sub_23C08EC74(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  swift_release();
  swift_release();
  sub_23C07CA24(v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t sub_23C08ED38(uint64_t result)
{
  *(_BYTE *)(result + 272) = 1;
  return result;
}

uint64_t sub_23C08ED48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23C0900DC;
  return sub_23C07F080(a1, v4, v5, v6, v7);
}

uint64_t sub_23C08EDC4(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *sub_23C08EE5C(uint64_t *a1)
{
  uint64_t v3;

  v3 = a1[23];
  sub_23C07C42C(*a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_23C07C4C4(v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void sub_23C08EFB4(uint64_t a1)
{
  uint64_t v1;

  sub_23C07F9D4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23C08EFD4(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C08F06C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  char v6;

  v6 = *(_BYTE *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    v6);
  return a1;
}

uint64_t sub_23C08F0F0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C08F160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_23C0900DC;
  return sub_23C07BFE8(a1, v1 + 16);
}

uint64_t sub_23C08F1B4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 56))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C08F224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  _QWORD *v5;

  v4 = *(_BYTE *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23C0900DC;
  return sub_23C07AB88(a1, v4, v1 + 24);
}

uint64_t objectdestroy_3Tm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C08F2B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_23C0900DC;
  return sub_23C07A9A4(a1, v4, v5, v6, v7);
}

uint64_t sub_23C08F334(uint64_t result)
{
  *(_BYTE *)(result + 272) = 0;
  return result;
}

uint64_t sub_23C08F33C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  if (*(_QWORD *)(v0 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C08F3BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v4 = v1 + 16;
  v5 = *(_QWORD *)(v1 + 168);
  v6 = *(_BYTE *)(v1 + 176);
  v7 = *(_QWORD *)(v1 + 184);
  v8 = *(_BYTE *)(v1 + 192);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_23C0900DC;
  return sub_23C07A368(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_23C08F440()
{
  return sub_23C0683A4(&qword_256B0F3E0, (uint64_t (*)(uint64_t))type metadata accessor for FilterAction, (uint64_t)&protocol conformance descriptor for FilterAction);
}

uint64_t sub_23C08F46C()
{
  return sub_23C0683A4(&qword_256B0F3E8, (uint64_t (*)(uint64_t))type metadata accessor for FilterAction, (uint64_t)&protocol conformance descriptor for FilterAction);
}

unint64_t sub_23C08F49C()
{
  unint64_t result;

  result = qword_256B0F3F0;
  if (!qword_256B0F3F0)
  {
    result = MEMORY[0x242616E9C](MEMORY[0x24BE2B430], MEMORY[0x24BE2B428]);
    atomic_store(result, (unint64_t *)&qword_256B0F3F0);
  }
  return result;
}

uint64_t sub_23C08F4E0()
{
  return sub_23C0683A4(&qword_256B0F3F8, (uint64_t (*)(uint64_t))type metadata accessor for FilterState, (uint64_t)&protocol conformance descriptor for FilterState);
}

uint64_t destroy for FilterFeature(uint64_t a1)
{
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FilterFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = (_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_retain();
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v6;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)v6 + 9);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v8 = *(_QWORD *)(a2 + 136);
  v7 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 144) = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FilterFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  v6 = (_OWORD *)(a1 + 32);
  v8 = (_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    }
    else
    {
      sub_23C08F848(a1 + 32);
      v9 = *(_OWORD *)(a2 + 41);
      *v6 = *v8;
      *(_OWORD *)(a1 + 41) = v9;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    *v6 = v10;
  }
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_retain();
  swift_release();
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_retain();
  swift_release();
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v13;
  swift_retain();
  swift_release();
  v14 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_retain();
  swift_release();
  v15 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v15;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C08F848(uint64_t a1)
{
  destroy for Filter();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for FilterFeature(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_5;
  if (!v4)
  {
    sub_23C08F848(a1 + 32);
LABEL_5:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_6:
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterFeature(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterFeature(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterFeature()
{
  return &type metadata for FilterFeature;
}

uint64_t getEnumTagSinglePayload for EditorialTrait(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterFeature.TaskIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23C08FB50 + 4 * byte_23C0E56FC[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23C08FB84 + 4 * byte_23C0E56F7[v4]))();
}

uint64_t sub_23C08FB84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C08FB8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C08FB94);
  return result;
}

uint64_t sub_23C08FBA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C08FBA8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23C08FBAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C08FBB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterFeature.TaskIdentifier()
{
  return &type metadata for FilterFeature.TaskIdentifier;
}

unint64_t sub_23C08FBD4()
{
  unint64_t result;

  result = qword_256B0F400;
  if (!qword_256B0F400)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5790, &type metadata for FilterFeature.TaskIdentifier);
    atomic_store(result, (unint64_t *)&qword_256B0F400);
  }
  return result;
}

uint64_t sub_23C08FC18(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23C08FC60(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23C08FC9C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23C08FCE0(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 < 6u || a3 == 7)
    return swift_bridgeObjectRetain();
  if (a3 == 6)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *sub_23C08FD30(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  return a1;
}

uint64_t sub_23C08FD78(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 < 6u || a3 == 7)
    return swift_bridgeObjectRelease();
  if (a3 == 6)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C08FDC8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C08FE18(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C08FE70(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23C08FEBC()
{
  return swift_release();
}

uint64_t sub_23C08FEC4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C087694(a1, *(__int128 **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), a2);
}

uint64_t sub_23C08FEE4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C08FF34(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_23C08FF40()
{
  unint64_t result;

  result = qword_256B0F530;
  if (!qword_256B0F530)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Trainer, &type metadata for Trainer);
    atomic_store(result, (unint64_t *)&qword_256B0F530);
  }
  return result;
}

unint64_t sub_23C08FF84()
{
  unint64_t result;

  result = qword_256B0F538;
  if (!qword_256B0F538)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Trainer, &type metadata for Trainer);
    atomic_store(result, (unint64_t *)&qword_256B0F538);
  }
  return result;
}

unint64_t sub_23C08FFC8()
{
  unint64_t result;

  result = qword_256B0F540;
  if (!qword_256B0F540)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Trainer, &type metadata for Trainer);
    atomic_store(result, (unint64_t *)&qword_256B0F540);
  }
  return result;
}

unint64_t sub_23C09000C()
{
  unint64_t result;

  result = qword_256B0F548;
  if (!qword_256B0F548)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Trainer, &type metadata for Trainer);
    atomic_store(result, (unint64_t *)&qword_256B0F548);
  }
  return result;
}

uint64_t sub_23C090050()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

unint64_t sub_23C090094()
{
  unint64_t result;

  result = qword_256B0F570;
  if (!qword_256B0F570)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterItem, &type metadata for FilterItem);
    atomic_store(result, (unint64_t *)&qword_256B0F570);
  }
  return result;
}

__n128 SelectedFilterItem.init(filterItem:name:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  __n128 result;
  __int128 v7;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  result = *(__n128 *)a1;
  v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a1;
  *(_OWORD *)(a4 + 16) = v7;
  *(_QWORD *)(a4 + 32) = v4;
  *(_BYTE *)(a4 + 40) = v5;
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = a3;
  return result;
}

uint64_t SelectedFilterItem.filterItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_BYTE *)(v1 + 40);
  *(_BYTE *)(a1 + 40) = v7;
  return sub_23C0682C0(v2, v3, v4, v5, v6, v7);
}

uint64_t SelectedFilterItem.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

BOOL sub_23C090150(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23C090168()
{
  _BYTE *v0;

  if (*v0)
    return 1701667182;
  else
    return 0x74497265746C6966;
}

uint64_t sub_23C0901A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C090EDC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23C0901C4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23C0901D0()
{
  sub_23C09037C();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0901F8()
{
  sub_23C09037C();
  return sub_23C0E4AF8();
}

uint64_t SelectedFilterItem.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  char v20;
  char v21;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F580);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v14 = v1[1];
  v15 = v7;
  v8 = *((_QWORD *)v1 + 4);
  v9 = *((_BYTE *)v1 + 40);
  v10 = *((_QWORD *)v1 + 6);
  v13[0] = *((_QWORD *)v1 + 7);
  v13[1] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C09037C();
  sub_23C0E4AE0();
  v17 = v15;
  v18 = v14;
  v19 = v8;
  v20 = v9;
  v21 = 0;
  sub_23C068798();
  v11 = v16;
  sub_23C0E4A44();
  if (!v11)
  {
    LOBYTE(v17) = 1;
    sub_23C0E4A08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_23C09037C()
{
  unint64_t result;

  result = qword_256B0F588;
  if (!qword_256B0F588)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E59A8, &type metadata for SelectedFilterItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F588);
  }
  return result;
}

uint64_t SelectedFilterItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  int v32;
  char v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F590);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C09037C();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v33 = 0;
  sub_23C068B84();
  sub_23C0E49C0();
  v9 = v26;
  v10 = v27;
  LOBYTE(v26) = 1;
  v24 = v29;
  v25 = v28;
  v23 = v30;
  v32 = v31;
  sub_23C0682C0(v9, v27, v28, v29, v30, v31);
  v11 = sub_23C0E4984();
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21 = v11;
  v22 = v13;
  v12(v8, v5);
  v15 = v24;
  v14 = v25;
  v16 = v23;
  v17 = v32;
  sub_23C0682C0(v9, v10, v25, v24, v23, v32);
  swift_bridgeObjectRetain();
  sub_23C0682A8(v9, v10, v14, v15, v16, v17);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v10;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 40) = v17;
  v18 = v22;
  *(_QWORD *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 56) = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_23C0682A8(v9, v10, v14, v15, v16, v17);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C09063C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SelectedFilterItem.init(from:)(a1, a2);
}

uint64_t sub_23C090650(_QWORD *a1)
{
  return SelectedFilterItem.encode(to:)(a1);
}

uint64_t SelectedFilterItem.hash(into:)()
{
  FilterItem.hash(into:)();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t SelectedFilterItem.hashValue.getter()
{
  sub_23C0E4A98();
  FilterItem.hash(into:)();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t sub_23C090774()
{
  sub_23C0E4A98();
  FilterItem.hash(into:)();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t sub_23C090814()
{
  FilterItem.hash(into:)();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C090880()
{
  sub_23C0E4A98();
  FilterItem.hash(into:)();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t _s16FitnessFiltering18SelectedFilterItemV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  _OWORD v11[2];
  uint64_t v12;
  char v13;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_BYTE *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v8;
  v12 = v2;
  v13 = v3;
  _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v11);
  if ((v9 & 1) == 0)
    return 0;
  if (v4 == v6 && v5 == v7)
    return 1;
  return sub_23C0E4A74();
}

unint64_t sub_23C0909D8()
{
  unint64_t result;

  result = qword_256B0F598;
  if (!qword_256B0F598)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for SelectedFilterItem, &type metadata for SelectedFilterItem);
    atomic_store(result, (unint64_t *)&qword_256B0F598);
  }
  return result;
}

uint64_t destroy for SelectedFilterItem(uint64_t a1)
{
  sub_23C0682A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SelectedFilterItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  sub_23C0682C0(*(_QWORD *)a2, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SelectedFilterItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_BYTE *)(a2 + 40);
  sub_23C0682C0(*(_QWORD *)a2, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  v15 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v9;
  sub_23C0682A8(v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SelectedFilterItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unsigned __int8 v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_BYTE *)(a2 + 40);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v4;
  v12 = *(_BYTE *)(a1 + 40);
  *(_BYTE *)(a1 + 40) = v5;
  sub_23C0682A8(v6, v7, v8, v9, v10, v12);
  v13 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v13;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SelectedFilterItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SelectedFilterItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SelectedFilterItem()
{
  return &type metadata for SelectedFilterItem;
}

uint64_t getEnumTagSinglePayload for SelectedFilterItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SelectedFilterItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C090D78 + 4 * byte_23C0E5805[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C090DAC + 4 * byte_23C0E5800[v4]))();
}

uint64_t sub_23C090DAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C090DB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C090DBCLL);
  return result;
}

uint64_t sub_23C090DC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C090DD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C090DD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C090DDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23C090DE8(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SelectedFilterItem.CodingKeys()
{
  return &type metadata for SelectedFilterItem.CodingKeys;
}

unint64_t sub_23C090E08()
{
  unint64_t result;

  result = qword_256B0F5A0;
  if (!qword_256B0F5A0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5980, &type metadata for SelectedFilterItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F5A0);
  }
  return result;
}

unint64_t sub_23C090E50()
{
  unint64_t result;

  result = qword_256B0F5A8;
  if (!qword_256B0F5A8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E58F0, &type metadata for SelectedFilterItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F5A8);
  }
  return result;
}

unint64_t sub_23C090E98()
{
  unint64_t result;

  result = qword_256B0F5B0;
  if (!qword_256B0F5B0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5918, &type metadata for SelectedFilterItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F5B0);
  }
  return result;
}

uint64_t sub_23C090EDC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74497265746C6966 && a2 == 0xEA00000000006D65;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23C090FC8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C090FF8 + 4 * byte_23C0E5A00[a1]))(0x796C707061, 0xE500000000000000);
}

unint64_t sub_23C090FF8()
{
  return 0xD000000000000014;
}

uint64_t sub_23C0910CC()
{
  return 0x6570704177656976;
}

uint64_t sub_23C0910EC()
{
  return 1;
}

uint64_t sub_23C0910FC()
{
  return 0x7265746C6966;
}

uint64_t sub_23C091110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x7265746C6966 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23C0E4A74();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_23C09119C(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23C0911A8()
{
  sub_23C092A98();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0911D0()
{
  sub_23C092A98();
  return sub_23C0E4AF8();
}

uint64_t sub_23C091200()
{
  unsigned __int8 *v0;

  return sub_23C090FC8(*v0);
}

uint64_t sub_23C091208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C096BBC(a1, a2);
  *a3 = result;
  return result;
}

void sub_23C09122C(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_23C091238()
{
  sub_23C09269C();
  return sub_23C0E4AEC();
}

uint64_t sub_23C091260()
{
  sub_23C09269C();
  return sub_23C0E4AF8();
}

uint64_t sub_23C091288()
{
  return sub_23C0E4AA4();
}

uint64_t sub_23C0912AC()
{
  return 12383;
}

uint64_t sub_23C0912BC()
{
  sub_23C092A54();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0912E4()
{
  sub_23C092A54();
  return sub_23C0E4AF8();
}

unint64_t sub_23C09130C()
{
  return 0xD000000000000011;
}

uint64_t sub_23C091328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C096FD8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_23C091350()
{
  sub_23C092A10();
  return sub_23C0E4AEC();
}

uint64_t sub_23C091378()
{
  sub_23C092A10();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0913A0()
{
  _BYTE *v0;

  if (*v0)
    return 0x65527265746C6966;
  else
    return 0x7265746C6966;
}

uint64_t sub_23C0913E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C09705C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C091404()
{
  sub_23C092944();
  return sub_23C0E4AEC();
}

uint64_t sub_23C09142C()
{
  sub_23C092944();
  return sub_23C0E4AF8();
}

uint64_t sub_23C091454()
{
  return 0x704F7265746C6966;
}

uint64_t sub_23C091478@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x704F7265746C6966 && a2 == 0xED0000736E6F6974)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23C0E4A74();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23C091530()
{
  sub_23C0928BC();
  return sub_23C0E4AEC();
}

uint64_t sub_23C091558()
{
  sub_23C0928BC();
  return sub_23C0E4AF8();
}

uint64_t sub_23C091580()
{
  return 0;
}

uint64_t sub_23C09158C()
{
  sub_23C092878();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0915B4()
{
  sub_23C092878();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0915DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_23C091608()
{
  sub_23C092834();
  return sub_23C0E4AEC();
}

uint64_t sub_23C091630()
{
  sub_23C092834();
  return sub_23C0E4AF8();
}

unint64_t sub_23C091658()
{
  unsigned __int8 *v0;

  return ((unint64_t)*v0 << 8) + 12383;
}

uint64_t sub_23C09166C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C09715C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23C091690(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_23C09169C()
{
  sub_23C0927AC();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0916C4()
{
  sub_23C0927AC();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0916EC()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C09172C()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C091768@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23C0E4A74();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23C0917E4()
{
  sub_23C092768();
  return sub_23C0E4AEC();
}

uint64_t sub_23C09180C()
{
  sub_23C092768();
  return sub_23C0E4AF8();
}

uint64_t sub_23C091834()
{
  sub_23C092724();
  return sub_23C0E4AEC();
}

uint64_t sub_23C09185C()
{
  sub_23C092724();
  return sub_23C0E4AF8();
}

void FilterAction.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  _QWORD v18[9];
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;

  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F5B8);
  v32 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v30 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F5C0);
  v18[3] = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v33 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F5C8);
  v18[4] = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v36 = (char *)v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_23C0E3EF8();
  v40 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v39 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F5D0);
  v25 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v24 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F5D8);
  v22 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v21 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F5E0);
  v18[1] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v27 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F5E8);
  v18[2] = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v29 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F5F0);
  v18[8] = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v18[6] = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F5F8);
  v18[7] = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F600);
  v18[5] = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for FilterAction();
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F608);
  v41 = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v16 = (char *)v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C09269C();
  v43 = v16;
  sub_23C0E4AE0();
  sub_23C0926E0(v42, (uint64_t)v14);
  v17 = (char *)sub_23C091CD0 + 4 * word_23C0E5A0A[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23C091CD0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *v0;
  v5 = *((_BYTE *)v0 + 8);
  v6 = v0[2];
  v7 = *((_BYTE *)v0 + 24);
  *(_BYTE *)(v3 - 160) = 0;
  sub_23C092A98();
  v8 = *(_QWORD *)(v3 - 176);
  v9 = *(_QWORD *)(v3 - 168);
  sub_23C0E49E4();
  *(_QWORD *)(v3 - 160) = v4;
  *(_BYTE *)(v3 - 152) = v5;
  *(_QWORD *)(v3 - 144) = v6;
  *(_BYTE *)(v3 - 136) = v7;
  sub_23C092988();
  sub_23C0E4A44();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 408) + 8))(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 200) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for FilterAction()
{
  uint64_t result;

  result = qword_256B0F798;
  if (!qword_256B0F798)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23C09269C()
{
  unint64_t result;

  result = qword_256B0F610;
  if (!qword_256B0F610)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6748, &type metadata for FilterAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F610);
  }
  return result;
}

uint64_t sub_23C0926E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilterAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23C092724()
{
  unint64_t result;

  result = qword_256B0F618;
  if (!qword_256B0F618)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E66F8, &type metadata for FilterAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F618);
  }
  return result;
}

unint64_t sub_23C092768()
{
  unint64_t result;

  result = qword_256B0F620;
  if (!qword_256B0F620)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E66A8, &type metadata for FilterAction.SelectedSortModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F620);
  }
  return result;
}

unint64_t sub_23C0927AC()
{
  unint64_t result;

  result = qword_256B0F628;
  if (!qword_256B0F628)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6658, &type metadata for FilterAction.SelectedFilterItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F628);
  }
  return result;
}

unint64_t sub_23C0927F0()
{
  unint64_t result;

  result = qword_256B0F630;
  if (!qword_256B0F630)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for OptionState, &type metadata for OptionState);
    atomic_store(result, (unint64_t *)&qword_256B0F630);
  }
  return result;
}

unint64_t sub_23C092834()
{
  unint64_t result;

  result = qword_256B0F640;
  if (!qword_256B0F640)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6608, &type metadata for FilterAction.RestoreInitialFilterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F640);
  }
  return result;
}

unint64_t sub_23C092878()
{
  unint64_t result;

  result = qword_256B0F648;
  if (!qword_256B0F648)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E65B8, &type metadata for FilterAction.ResetFilterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F648);
  }
  return result;
}

unint64_t sub_23C0928BC()
{
  unint64_t result;

  result = qword_256B0F650;
  if (!qword_256B0F650)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6568, &type metadata for FilterAction.LoadedOptionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F650);
  }
  return result;
}

unint64_t sub_23C092900()
{
  unint64_t result;

  result = qword_256B0F658;
  if (!qword_256B0F658)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterOptions, &type metadata for FilterOptions);
    atomic_store(result, (unint64_t *)&qword_256B0F658);
  }
  return result;
}

unint64_t sub_23C092944()
{
  unint64_t result;

  result = qword_256B0F660;
  if (!qword_256B0F660)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6518, &type metadata for FilterAction.LoadedFilterResultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F660);
  }
  return result;
}

unint64_t sub_23C092988()
{
  unint64_t result;

  result = qword_256B0F668;
  if (!qword_256B0F668)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Filter, &type metadata for Filter);
    atomic_store(result, (unint64_t *)&qword_256B0F668);
  }
  return result;
}

unint64_t sub_23C0929CC()
{
  unint64_t result;

  result = qword_256B0F670;
  if (!qword_256B0F670)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterResult, &type metadata for FilterResult);
    atomic_store(result, (unint64_t *)&qword_256B0F670);
  }
  return result;
}

unint64_t sub_23C092A10()
{
  unint64_t result;

  result = qword_256B0F678;
  if (!qword_256B0F678)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E64C8, &type metadata for FilterAction.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F678);
  }
  return result;
}

unint64_t sub_23C092A54()
{
  unint64_t result;

  result = qword_256B0F680;
  if (!qword_256B0F680)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6478, &type metadata for FilterAction.DeselectedFilterItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F680);
  }
  return result;
}

unint64_t sub_23C092A98()
{
  unint64_t result;

  result = qword_256B0F688;
  if (!qword_256B0F688)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6428, &type metadata for FilterAction.ApplyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F688);
  }
  return result;
}

uint64_t FilterAction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD v42[12];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  uint64_t v74;

  v66 = a2;
  v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F690);
  v53 = *(_QWORD *)(v54 - 8);
  MEMORY[0x24BDAC7A8](v54);
  v63 = (char *)v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F698);
  v70 = *(_QWORD *)(v55 - 8);
  MEMORY[0x24BDAC7A8](v55);
  v64 = (char *)v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6A0);
  v42[10] = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v65 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6A8);
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v62 = (char *)v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6B0);
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v60 = (char *)v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6B8);
  v42[8] = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v61 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6C0);
  v42[9] = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v69 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6C8);
  v42[7] = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v59 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6D0);
  v42[6] = *(_QWORD *)(v44 - 8);
  MEMORY[0x24BDAC7A8](v44);
  v58 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6D8);
  v42[11] = *(_QWORD *)(v43 - 8);
  MEMORY[0x24BDAC7A8](v43);
  v57 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6E0);
  v67 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v14 = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for FilterAction();
  v15 = MEMORY[0x24BDAC7A8](v68);
  v42[5] = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v15);
  v51 = (char *)v42 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v42[4] = (char *)v42 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)v42 - v22;
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = (char *)v42 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v28 = MEMORY[0x24BDAC7A8](v27);
  MEMORY[0x24BDAC7A8](v28);
  v30 = (char *)v42 - v29;
  v31 = a1[3];
  v73 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v31);
  sub_23C09269C();
  v72 = v14;
  v32 = v74;
  sub_23C0E4AD4();
  v74 = v32;
  if (!v32)
  {
    v42[2] = v26;
    v42[1] = v23;
    v33 = v68;
    v42[3] = v30;
    v35 = v71;
    v34 = v72;
    v36 = sub_23C0E49CC();
    if (*(_QWORD *)(v36 + 16) == 1)
    {
      v42[0] = v36;
      __asm { BR              X10 }
    }
    v37 = sub_23C0E4900();
    v38 = swift_allocError();
    v40 = v39;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6E8);
    *v40 = v33;
    sub_23C0E4960();
    sub_23C0E48F4();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v40, *MEMORY[0x24BEE26D0], v37);
    v74 = v38;
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v34, v35);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
}

uint64_t sub_23C093B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilterAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23C093BB0()
{
  unint64_t result;

  result = qword_256B0F6F0;
  if (!qword_256B0F6F0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for OptionState, &type metadata for OptionState);
    atomic_store(result, (unint64_t *)&qword_256B0F6F0);
  }
  return result;
}

unint64_t sub_23C093BF4()
{
  unint64_t result;

  result = qword_256B0F700;
  if (!qword_256B0F700)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterOptions, &type metadata for FilterOptions);
    atomic_store(result, (unint64_t *)&qword_256B0F700);
  }
  return result;
}

unint64_t sub_23C093C38()
{
  unint64_t result;

  result = qword_256B0F708;
  if (!qword_256B0F708)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Filter, &type metadata for Filter);
    atomic_store(result, (unint64_t *)&qword_256B0F708);
  }
  return result;
}

unint64_t sub_23C093C7C()
{
  unint64_t result;

  result = qword_256B0F710;
  if (!qword_256B0F710)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterResult, &type metadata for FilterResult);
    atomic_store(result, (unint64_t *)&qword_256B0F710);
  }
  return result;
}

uint64_t sub_23C093CC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FilterAction.init(from:)(a1, a2);
}

void sub_23C093CD4(_QWORD *a1)
{
  FilterAction.encode(to:)(a1);
}

void FilterAction.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v1 = sub_23C0E3EF8();
  MEMORY[0x24BDAC7A8](v1);
  v2 = type metadata accessor for FilterAction();
  MEMORY[0x24BDAC7A8](v2);
  sub_23C0926E0(v0, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = (char *)sub_23C093DB4 + 4 * byte_23C0E5A32[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23C093DB4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 8);
  v5 = v1[2];
  v6 = *((_BYTE *)v1 + 24);
  sub_23C0E4AA4();
  *(_QWORD *)(v2 - 152) = v3;
  *(_BYTE *)(v2 - 144) = v4;
  *(_QWORD *)(v2 - 136) = v5;
  *(_BYTE *)(v2 - 128) = v6;
  Filter.hash(into:)(v0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t FilterAction.hashValue.getter()
{
  sub_23C0E4A98();
  FilterAction.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C094258()
{
  sub_23C0E4A98();
  FilterAction.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C094298()
{
  sub_23C0E4A98();
  FilterAction.hash(into:)();
  return sub_23C0E4AC8();
}

void _s16FitnessFiltering12FilterActionO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD v20[22];
  uint64_t v21;

  v21 = a2;
  v3 = sub_23C0E3EF8();
  v4 = *(_QWORD *)(v3 - 8);
  v20[20] = v3;
  v20[21] = v4;
  v5 = MEMORY[0x24BDAC7A8](v3);
  v20[18] = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v20[19] = (char *)v20 - v7;
  v8 = type metadata accessor for FilterAction();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v14 = MEMORY[0x24BDAC7A8](v13);
  MEMORY[0x24BDAC7A8](v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F8C0);
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v20 + *(int *)(v16 + 48) - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C0926E0(a1, (uint64_t)v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_23C0926E0(v21, (uint64_t)v18);
  v19 = (char *)sub_23C0944C4 + 4 * word_23C0E5A44[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_23C0944C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;

  sub_23C0926E0(v1, v0);
  v3 = *(_QWORD *)v0;
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(_BYTE *)(v0 + 24);
  if (swift_getEnumCaseMultiPayload())
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C097268(v1);
  }
  else
  {
    v8 = v1;
    v9 = *(unsigned __int8 *)(v0 + 8);
    v10 = *(unsigned __int8 *)(v2 + 8);
    v11 = *(_QWORD *)(v2 + 16);
    if ((sub_23C075FE0(v3, *(_QWORD *)v2) & 1) != 0 && ((v9 ^ v10) & 1) == 0 && (sub_23C075FE0(v4, v11) & 1) != 0)
    {
      sub_23C07740C(v5);
      v13 = v12;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
      {
        sub_23C095BAC(v8);
        v6 = 1;
        return v6 & 1;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_23C095BAC(v8);
  }
  v6 = 0;
  return v6 & 1;
}

uint64_t sub_23C095108()
{
  return sub_23C0683A4(&qword_256B0F720, (uint64_t (*)(uint64_t))type metadata accessor for FilterAction, (uint64_t)&protocol conformance descriptor for FilterAction);
}

char *initializeBufferWithCopyOfBuffer for FilterAction(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v7 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v7 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = *(_BYTE *)(a2 + 8);
        *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
        a1[24] = *(_BYTE *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 1u:
        v9 = *(_QWORD *)a2;
        v10 = *(_QWORD *)(a2 + 8);
        v11 = *(_QWORD *)(a2 + 16);
        v12 = *(_QWORD *)(a2 + 24);
        v13 = *(_QWORD *)(a2 + 32);
        v14 = *(_BYTE *)(a2 + 40);
        sub_23C0682C0(v9, v10, v11, v12, v13, v14);
        *(_QWORD *)a1 = v9;
        *((_QWORD *)a1 + 1) = v10;
        *((_QWORD *)a1 + 2) = v11;
        *((_QWORD *)a1 + 3) = v12;
        *((_QWORD *)a1 + 4) = v13;
        a1[40] = v14;
        swift_storeEnumTagMultiPayload();
        break;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = *(_BYTE *)(a2 + 8);
        *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
        a1[24] = *(_BYTE *)(a2 + 24);
        v15 = *(_QWORD *)(a2 + 40);
        *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
        *((_QWORD *)a1 + 5) = v15;
        v16 = *(_QWORD *)(a2 + 56);
        *((_QWORD *)a1 + 6) = *(_QWORD *)(a2 + 48);
        *((_QWORD *)a1 + 7) = v16;
        v17 = *(_QWORD *)(a2 + 72);
        *((_QWORD *)a1 + 8) = *(_QWORD *)(a2 + 64);
        *((_QWORD *)a1 + 9) = v17;
        v32 = *(_QWORD *)(a2 + 88);
        *((_QWORD *)a1 + 10) = *(_QWORD *)(a2 + 80);
        *((_QWORD *)a1 + 11) = v32;
        *((_QWORD *)a1 + 12) = *(_QWORD *)(a2 + 96);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 4u:
        v18 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v18;
        v19 = *(_QWORD *)(a2 + 24);
        *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
        *((_QWORD *)a1 + 3) = v19;
        v20 = *(_QWORD *)(a2 + 40);
        *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
        *((_QWORD *)a1 + 5) = v20;
        v21 = *(_QWORD *)(a2 + 56);
        *((_QWORD *)a1 + 6) = *(_QWORD *)(a2 + 48);
        *((_QWORD *)a1 + 7) = v21;
        *((_QWORD *)a1 + 8) = *(_QWORD *)(a2 + 64);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
        break;
      case 5u:
        v22 = *(_QWORD *)a2;
        v23 = *(_QWORD *)(a2 + 8);
        v24 = *(_QWORD *)(a2 + 16);
        v25 = *(_QWORD *)(a2 + 24);
        v26 = *(_QWORD *)(a2 + 32);
        v27 = *(_BYTE *)(a2 + 40);
        sub_23C0682C0(*(_QWORD *)a2, v23, v24, v25, v26, v27);
        *(_QWORD *)a1 = v22;
        *((_QWORD *)a1 + 1) = v23;
        *((_QWORD *)a1 + 2) = v24;
        *((_QWORD *)a1 + 3) = v25;
        *((_QWORD *)a1 + 4) = v26;
        a1[40] = v27;
        a1[41] = *(_BYTE *)(a2 + 41);
        v28 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F348) + 64);
        v29 = &a1[v28];
        v30 = a2 + v28;
        v31 = sub_23C0E3EF8();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, (const void *)a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for FilterAction(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 1:
      return sub_23C0682A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_6:
      result = swift_bridgeObjectRelease();
      break;
    case 5:
      sub_23C0682A8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
      v3 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F348) + 64);
      v4 = sub_23C0E3EF8();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
      break;
    default:
      return result;
  }
  return result;
}

char *initializeWithCopy for FilterAction(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = *(_BYTE *)(a2 + 8);
      *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
      a1[24] = *(_BYTE *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 1u:
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)(a2 + 8);
      v8 = *(_QWORD *)(a2 + 16);
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      v11 = *(_BYTE *)(a2 + 40);
      sub_23C0682C0(v6, v7, v8, v9, v10, v11);
      *(_QWORD *)a1 = v6;
      *((_QWORD *)a1 + 1) = v7;
      *((_QWORD *)a1 + 2) = v8;
      *((_QWORD *)a1 + 3) = v9;
      *((_QWORD *)a1 + 4) = v10;
      a1[40] = v11;
      goto LABEL_8;
    case 3u:
      *(_QWORD *)a1 = *(_QWORD *)a2;
      a1[8] = *(_BYTE *)(a2 + 8);
      *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
      a1[24] = *(_BYTE *)(a2 + 24);
      v12 = *(_QWORD *)(a2 + 40);
      *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
      *((_QWORD *)a1 + 5) = v12;
      v13 = *(_QWORD *)(a2 + 56);
      *((_QWORD *)a1 + 6) = *(_QWORD *)(a2 + 48);
      *((_QWORD *)a1 + 7) = v13;
      v14 = *(_QWORD *)(a2 + 72);
      *((_QWORD *)a1 + 8) = *(_QWORD *)(a2 + 64);
      *((_QWORD *)a1 + 9) = v14;
      v30 = *(_QWORD *)(a2 + 88);
      *((_QWORD *)a1 + 10) = *(_QWORD *)(a2 + 80);
      *((_QWORD *)a1 + 11) = v30;
      *((_QWORD *)a1 + 12) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 4u:
      v15 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v15;
      v16 = *(_QWORD *)(a2 + 24);
      *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
      *((_QWORD *)a1 + 3) = v16;
      v17 = *(_QWORD *)(a2 + 40);
      *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
      *((_QWORD *)a1 + 5) = v17;
      v18 = *(_QWORD *)(a2 + 56);
      *((_QWORD *)a1 + 6) = *(_QWORD *)(a2 + 48);
      *((_QWORD *)a1 + 7) = v18;
      *((_QWORD *)a1 + 8) = *(_QWORD *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 5u:
      v19 = *(_QWORD *)a2;
      v20 = *(_QWORD *)(a2 + 8);
      v21 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(a2 + 24);
      v23 = *(_QWORD *)(a2 + 32);
      v24 = *(_BYTE *)(a2 + 40);
      sub_23C0682C0(*(_QWORD *)a2, v20, v21, v22, v23, v24);
      *(_QWORD *)a1 = v19;
      *((_QWORD *)a1 + 1) = v20;
      *((_QWORD *)a1 + 2) = v21;
      *((_QWORD *)a1 + 3) = v22;
      *((_QWORD *)a1 + 4) = v23;
      a1[40] = v24;
      a1[41] = *(_BYTE *)(a2 + 41);
      v25 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F348) + 64);
      v26 = &a1[v25];
      v27 = a2 + v25;
      v28 = sub_23C0E3EF8();
      (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v26, v27, v28);
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for FilterAction(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != (char *)a2)
  {
    sub_23C095BAC((uint64_t)a1);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = *(_BYTE *)(a2 + 8);
        *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
        a1[24] = *(_BYTE *)(a2 + 24);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 1u:
        v6 = *(_QWORD *)a2;
        v7 = *(_QWORD *)(a2 + 8);
        v8 = *(_QWORD *)(a2 + 16);
        v9 = *(_QWORD *)(a2 + 24);
        v10 = *(_QWORD *)(a2 + 32);
        v11 = *(_BYTE *)(a2 + 40);
        sub_23C0682C0(v6, v7, v8, v9, v10, v11);
        *(_QWORD *)a1 = v6;
        *((_QWORD *)a1 + 1) = v7;
        *((_QWORD *)a1 + 2) = v8;
        *((_QWORD *)a1 + 3) = v9;
        *((_QWORD *)a1 + 4) = v10;
        a1[40] = v11;
        goto LABEL_9;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        a1[8] = *(_BYTE *)(a2 + 8);
        *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
        a1[24] = *(_BYTE *)(a2 + 24);
        *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
        *((_QWORD *)a1 + 5) = *(_QWORD *)(a2 + 40);
        *((_QWORD *)a1 + 6) = *(_QWORD *)(a2 + 48);
        *((_QWORD *)a1 + 7) = *(_QWORD *)(a2 + 56);
        *((_QWORD *)a1 + 8) = *(_QWORD *)(a2 + 64);
        *((_QWORD *)a1 + 9) = *(_QWORD *)(a2 + 72);
        *((_QWORD *)a1 + 10) = *(_QWORD *)(a2 + 80);
        *((_QWORD *)a1 + 11) = *(_QWORD *)(a2 + 88);
        *((_QWORD *)a1 + 12) = *(_QWORD *)(a2 + 96);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 4u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *(_QWORD *)(a2 + 8);
        *((_QWORD *)a1 + 2) = *(_QWORD *)(a2 + 16);
        *((_QWORD *)a1 + 3) = *(_QWORD *)(a2 + 24);
        *((_QWORD *)a1 + 4) = *(_QWORD *)(a2 + 32);
        *((_QWORD *)a1 + 5) = *(_QWORD *)(a2 + 40);
        *((_QWORD *)a1 + 6) = *(_QWORD *)(a2 + 48);
        *((_QWORD *)a1 + 7) = *(_QWORD *)(a2 + 56);
        *((_QWORD *)a1 + 8) = *(_QWORD *)(a2 + 64);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 5u:
        v12 = *(_QWORD *)a2;
        v13 = *(_QWORD *)(a2 + 8);
        v14 = *(_QWORD *)(a2 + 16);
        v15 = *(_QWORD *)(a2 + 24);
        v16 = *(_QWORD *)(a2 + 32);
        v17 = *(_BYTE *)(a2 + 40);
        sub_23C0682C0(*(_QWORD *)a2, v13, v14, v15, v16, v17);
        *(_QWORD *)a1 = v12;
        *((_QWORD *)a1 + 1) = v13;
        *((_QWORD *)a1 + 2) = v14;
        *((_QWORD *)a1 + 3) = v15;
        *((_QWORD *)a1 + 4) = v16;
        a1[40] = v17;
        a1[41] = *(_BYTE *)(a2 + 41);
        v18 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F348) + 64);
        v19 = &a1[v18];
        v20 = a2 + v18;
        v21 = sub_23C0E3EF8();
        (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_23C095BAC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FilterAction();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for FilterAction(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (swift_getEnumCaseMultiPayload() == 5)
  {
    v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F348) + 64);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_23C0E3EF8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_OWORD *assignWithTake for FilterAction(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    sub_23C095BAC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
      *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F348) + 64);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = sub_23C0E3EF8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for FilterAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_23C095D8C()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_23C095D9C()
{
  uint64_t result;
  unint64_t v1;
  char v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  char *v8;
  void *v9;

  v3 = &unk_23C0E5B70;
  v4 = &unk_23C0E5B88;
  v5 = &unk_23C0E5BA0;
  v6 = &unk_23C0E5BB8;
  v7 = &unk_23C0E5BD0;
  result = sub_23C0E3EF8();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v8 = &v2;
    v9 = &unk_23C0E5C00;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ArtworkVariant(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterAction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_23C095F34 + 4 * byte_23C0E5A75[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_23C095F68 + 4 * byte_23C0E5A70[v4]))();
}

uint64_t sub_23C095F68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C095F70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C095F78);
  return result;
}

uint64_t sub_23C095F84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C095F8CLL);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_23C095F90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C095F98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterAction.CodingKeys()
{
  return &type metadata for FilterAction.CodingKeys;
}

uint64_t sub_23C095FC0()
{
  return 0;
}

ValueMetadata *type metadata accessor for FilterAction.ApplyCodingKeys()
{
  return &type metadata for FilterAction.ApplyCodingKeys;
}

ValueMetadata *type metadata accessor for FilterAction.DeselectedFilterItemCodingKeys()
{
  return &type metadata for FilterAction.DeselectedFilterItemCodingKeys;
}

ValueMetadata *type metadata accessor for FilterAction.DismissCodingKeys()
{
  return &type metadata for FilterAction.DismissCodingKeys;
}

uint64_t storeEnumTagSinglePayload for FilterAction.LoadedFilterResultCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C096044 + 4 * byte_23C0E5A7F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C096078 + 4 * byte_23C0E5A7A[v4]))();
}

uint64_t sub_23C096078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C096080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C096088);
  return result;
}

uint64_t sub_23C096094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C09609CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C0960A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0960A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterAction.LoadedFilterResultCodingKeys()
{
  return &type metadata for FilterAction.LoadedFilterResultCodingKeys;
}

ValueMetadata *type metadata accessor for FilterAction.LoadedOptionsCodingKeys()
{
  return &type metadata for FilterAction.LoadedOptionsCodingKeys;
}

ValueMetadata *type metadata accessor for FilterAction.ResetFilterCodingKeys()
{
  return &type metadata for FilterAction.ResetFilterCodingKeys;
}

ValueMetadata *type metadata accessor for FilterAction.RestoreInitialFilterCodingKeys()
{
  return &type metadata for FilterAction.RestoreInitialFilterCodingKeys;
}

uint64_t getEnumTagSinglePayload for FilterAction.SelectedFilterItemCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterAction.SelectedFilterItemCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C0961D0 + 4 * byte_23C0E5A89[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C096204 + 4 * byte_23C0E5A84[v4]))();
}

uint64_t sub_23C096204(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C09620C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C096214);
  return result;
}

uint64_t sub_23C096220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C096228);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C09622C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C096234(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterAction.SelectedFilterItemCodingKeys()
{
  return &type metadata for FilterAction.SelectedFilterItemCodingKeys;
}

uint64_t _s16FitnessFiltering12FilterActionO15ApplyCodingKeysOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s16FitnessFiltering12FilterActionO15ApplyCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23C0962E0 + 4 * byte_23C0E5A8E[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23C096300 + 4 * byte_23C0E5A93[v4]))();
}

_BYTE *sub_23C0962E0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23C096300(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23C096308(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23C096310(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23C096318(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23C096320(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FilterAction.SelectedSortModeCodingKeys()
{
  return &type metadata for FilterAction.SelectedSortModeCodingKeys;
}

ValueMetadata *type metadata accessor for FilterAction.ViewAppearedCodingKeys()
{
  return &type metadata for FilterAction.ViewAppearedCodingKeys;
}

unint64_t sub_23C096350()
{
  unint64_t result;

  result = qword_256B0F7D0;
  if (!qword_256B0F7D0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5E58, &type metadata for FilterAction.SelectedSortModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F7D0);
  }
  return result;
}

unint64_t sub_23C096398()
{
  unint64_t result;

  result = qword_256B0F7D8;
  if (!qword_256B0F7D8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5F10, &type metadata for FilterAction.SelectedFilterItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F7D8);
  }
  return result;
}

unint64_t sub_23C0963E0()
{
  unint64_t result;

  result = qword_256B0F7E0;
  if (!qword_256B0F7E0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6068, &type metadata for FilterAction.LoadedOptionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F7E0);
  }
  return result;
}

unint64_t sub_23C096428()
{
  unint64_t result;

  result = qword_256B0F7E8;
  if (!qword_256B0F7E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6120, &type metadata for FilterAction.LoadedFilterResultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F7E8);
  }
  return result;
}

unint64_t sub_23C096470()
{
  unint64_t result;

  result = qword_256B0F7F0;
  if (!qword_256B0F7F0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E61D8, &type metadata for FilterAction.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F7F0);
  }
  return result;
}

unint64_t sub_23C0964B8()
{
  unint64_t result;

  result = qword_256B0F7F8;
  if (!qword_256B0F7F8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6290, &type metadata for FilterAction.DeselectedFilterItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F7F8);
  }
  return result;
}

unint64_t sub_23C096500()
{
  unint64_t result;

  result = qword_256B0F800;
  if (!qword_256B0F800)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6348, &type metadata for FilterAction.ApplyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F800);
  }
  return result;
}

unint64_t sub_23C096548()
{
  unint64_t result;

  result = qword_256B0F808;
  if (!qword_256B0F808)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6400, &type metadata for FilterAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F808);
  }
  return result;
}

unint64_t sub_23C096590()
{
  unint64_t result;

  result = qword_256B0F810;
  if (!qword_256B0F810)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E62B8, &type metadata for FilterAction.ApplyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F810);
  }
  return result;
}

unint64_t sub_23C0965D8()
{
  unint64_t result;

  result = qword_256B0F818;
  if (!qword_256B0F818)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E62E0, &type metadata for FilterAction.ApplyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F818);
  }
  return result;
}

unint64_t sub_23C096620()
{
  unint64_t result;

  result = qword_256B0F820;
  if (!qword_256B0F820)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6200, &type metadata for FilterAction.DeselectedFilterItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F820);
  }
  return result;
}

unint64_t sub_23C096668()
{
  unint64_t result;

  result = qword_256B0F828;
  if (!qword_256B0F828)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6228, &type metadata for FilterAction.DeselectedFilterItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F828);
  }
  return result;
}

unint64_t sub_23C0966B0()
{
  unint64_t result;

  result = qword_256B0F830;
  if (!qword_256B0F830)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6148, &type metadata for FilterAction.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F830);
  }
  return result;
}

unint64_t sub_23C0966F8()
{
  unint64_t result;

  result = qword_256B0F838;
  if (!qword_256B0F838)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6170, &type metadata for FilterAction.DismissCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F838);
  }
  return result;
}

unint64_t sub_23C096740()
{
  unint64_t result;

  result = qword_256B0F840;
  if (!qword_256B0F840)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6090, &type metadata for FilterAction.LoadedFilterResultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F840);
  }
  return result;
}

unint64_t sub_23C096788()
{
  unint64_t result;

  result = qword_256B0F848;
  if (!qword_256B0F848)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E60B8, &type metadata for FilterAction.LoadedFilterResultCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F848);
  }
  return result;
}

unint64_t sub_23C0967D0()
{
  unint64_t result;

  result = qword_256B0F850;
  if (!qword_256B0F850)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5FD8, &type metadata for FilterAction.LoadedOptionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F850);
  }
  return result;
}

unint64_t sub_23C096818()
{
  unint64_t result;

  result = qword_256B0F858;
  if (!qword_256B0F858)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6000, &type metadata for FilterAction.LoadedOptionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F858);
  }
  return result;
}

unint64_t sub_23C096860()
{
  unint64_t result;

  result = qword_256B0F860;
  if (!qword_256B0F860)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5F88, &type metadata for FilterAction.ResetFilterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F860);
  }
  return result;
}

unint64_t sub_23C0968A8()
{
  unint64_t result;

  result = qword_256B0F868;
  if (!qword_256B0F868)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5FB0, &type metadata for FilterAction.ResetFilterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F868);
  }
  return result;
}

unint64_t sub_23C0968F0()
{
  unint64_t result;

  result = qword_256B0F870;
  if (!qword_256B0F870)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5F38, &type metadata for FilterAction.RestoreInitialFilterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F870);
  }
  return result;
}

unint64_t sub_23C096938()
{
  unint64_t result;

  result = qword_256B0F878;
  if (!qword_256B0F878)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5F60, &type metadata for FilterAction.RestoreInitialFilterCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F878);
  }
  return result;
}

unint64_t sub_23C096980()
{
  unint64_t result;

  result = qword_256B0F880;
  if (!qword_256B0F880)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5E80, &type metadata for FilterAction.SelectedFilterItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F880);
  }
  return result;
}

unint64_t sub_23C0969C8()
{
  unint64_t result;

  result = qword_256B0F888;
  if (!qword_256B0F888)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5EA8, &type metadata for FilterAction.SelectedFilterItemCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F888);
  }
  return result;
}

unint64_t sub_23C096A10()
{
  unint64_t result;

  result = qword_256B0F890;
  if (!qword_256B0F890)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5DC8, &type metadata for FilterAction.SelectedSortModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F890);
  }
  return result;
}

unint64_t sub_23C096A58()
{
  unint64_t result;

  result = qword_256B0F898;
  if (!qword_256B0F898)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5DF0, &type metadata for FilterAction.SelectedSortModeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F898);
  }
  return result;
}

unint64_t sub_23C096AA0()
{
  unint64_t result;

  result = qword_256B0F8A0;
  if (!qword_256B0F8A0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5D78, &type metadata for FilterAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F8A0);
  }
  return result;
}

unint64_t sub_23C096AE8()
{
  unint64_t result;

  result = qword_256B0F8A8;
  if (!qword_256B0F8A8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E5DA0, &type metadata for FilterAction.ViewAppearedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F8A8);
  }
  return result;
}

unint64_t sub_23C096B30()
{
  unint64_t result;

  result = qword_256B0F8B0;
  if (!qword_256B0F8B0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6370, &type metadata for FilterAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F8B0);
  }
  return result;
}

unint64_t sub_23C096B78()
{
  unint64_t result;

  result = qword_256B0F8B8;
  if (!qword_256B0F8B8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6398, &type metadata for FilterAction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F8B8);
  }
  return result;
}

uint64_t sub_23C096BBC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x796C707061 && a2 == 0xE500000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023C0EDFD0 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7373696D736964 && a2 == 0xE700000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C0EDFF0 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x704F646564616F6CLL && a2 == 0xED0000736E6F6974 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6C69467465736572 && a2 == 0xEB00000000726574 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023C0EE010 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C0EE030 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C0EE050 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6570704177656976 && a2 == 0xEC00000064657261)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_23C096FD8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000011 && a2 == 0x800000023C0EE070)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_23C09705C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265746C6966 && a2 == 0xE600000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65527265746C6966 && a2 == 0xEC000000746C7573)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23C09715C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 12895 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23C097268(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F8C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t BodyFocus.filterItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C0972D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t Duration.filterItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C097314@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 40) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t Equipment.filterItem.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973A8(2, a1);
}

uint64_t sub_23C097340@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973CC(2, a1);
}

uint64_t Modality.filterItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C097364@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 3;
  return swift_bridgeObjectRetain();
}

uint64_t MusicGenre.filterItem.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973A8(4, a1);
}

uint64_t sub_23C097388@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973CC(4, a1);
}

uint64_t SkillLevel.filterItem.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973A8(5, a1);
}

uint64_t sub_23C097398@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973CC(5, a1);
}

uint64_t Theme.filterItem.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973A8(6, a1);
}

uint64_t sub_23C0973A8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)a2 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 40) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C0973C4@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973CC(6, a1);
}

uint64_t sub_23C0973CC@<X0>(char a1@<W2>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v2 + 32);
  *(_QWORD *)a2 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 40) = a1;
  return swift_bridgeObjectRetain();
}

uint64_t Trainer.filterItem.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973A8(7, a1);
}

uint64_t sub_23C0973EC@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0973CC(7, a1);
}

uint64_t dispatch thunk of FilterItemProviding.filterItem.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t FilterItem.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 40);
  if ((v2 - 2) < 6 || v2 == 0)
  {
    sub_23C0682C0(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), v2);
  }
  else
  {
    if (v2 != 1)
      __asm { BR              X10 }
    swift_bridgeObjectRetain();
  }
  return v1;
}

void sub_23C0974A4()
{
  JUMPOUT(0x23C097440);
}

void sub_23C0974C0()
{
  JUMPOUT(0x23C097440);
}

void sub_23C0974D8()
{
  JUMPOUT(0x23C097440);
}

void sub_23C0974F8()
{
  JUMPOUT(0x23C097440);
}

void sub_23C097510()
{
  JUMPOUT(0x23C097440);
}

void sub_23C097524()
{
  JUMPOUT(0x23C097440);
}

void sub_23C097548()
{
  JUMPOUT(0x23C097440);
}

uint64_t sub_23C097568(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0975A0 + 4 * byte_23C0E6858[a1]))(0x75636F4679646F62, 0xE900000000000073);
}

uint64_t sub_23C0975A0()
{
  return 0x6E6F697461727564;
}

uint64_t sub_23C0975B8()
{
  return 0x6E656D7069757165;
}

uint64_t sub_23C0975D0()
{
  return 0x7974696C61646F6DLL;
}

uint64_t sub_23C0975E8()
{
  return 0x6E6547636973756DLL;
}

uint64_t sub_23C097604()
{
  return 0x76654C6C6C696B73;
}

uint64_t sub_23C097624()
{
  return 0x656D656874;
}

uint64_t sub_23C097638()
{
  return 0x72656E69617274;
}

uint64_t sub_23C097650()
{
  return 0x7469617274;
}

uint64_t sub_23C097664()
{
  return 0x696669746E656469;
}

uint64_t sub_23C097684()
{
  sub_23C099C80();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0976AC()
{
  sub_23C099C80();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0976D4()
{
  unsigned __int8 *v0;

  return sub_23C097568(*v0);
}

uint64_t sub_23C0976DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C09AD18(a1, a2);
  *a3 = result;
  return result;
}

void sub_23C097700(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_23C09770C()
{
  sub_23C099994();
  return sub_23C0E4AEC();
}

uint64_t sub_23C097734()
{
  sub_23C099994();
  return sub_23C0E4AF8();
}

uint64_t sub_23C09775C()
{
  sub_23C099BF8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C097784()
{
  sub_23C099BF8();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0977AC()
{
  sub_23C099BB4();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0977D4()
{
  sub_23C099BB4();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0977FC()
{
  sub_23C099B70();
  return sub_23C0E4AEC();
}

uint64_t sub_23C097824()
{
  sub_23C099B70();
  return sub_23C0E4AF8();
}

uint64_t sub_23C09784C()
{
  sub_23C099B2C();
  return sub_23C0E4AEC();
}

uint64_t sub_23C097874()
{
  sub_23C099B2C();
  return sub_23C0E4AF8();
}

uint64_t sub_23C09789C()
{
  sub_23C099AE8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0978C4()
{
  sub_23C099AE8();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0978EC()
{
  sub_23C099AA4();
  return sub_23C0E4AEC();
}

uint64_t sub_23C097914()
{
  sub_23C099AA4();
  return sub_23C0E4AF8();
}

uint64_t sub_23C09793C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23C0E4A74();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23C0979DC()
{
  sub_23C099A60();
  return sub_23C0E4AEC();
}

uint64_t sub_23C097A04()
{
  sub_23C099A60();
  return sub_23C0E4AF8();
}

uint64_t sub_23C097A2C()
{
  sub_23C0999D8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C097A54()
{
  sub_23C0999D8();
  return sub_23C0E4AF8();
}

void FilterItem.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F8C8);
  v36 = *(_QWORD *)(v3 - 8);
  v37 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v35 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F8D0);
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v32 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F8D8);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v29 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F8E0);
  v27 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v26 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F8E8);
  v24 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v23 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F8F0);
  v21 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v20 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F8F8);
  v18 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v16[1] = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F900);
  v16[0] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F908);
  MEMORY[0x24BDAC7A8](v13);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F910);
  v40 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v14 = *v1;
  v38 = v1[1];
  v39 = v14;
  v15 = *((unsigned __int8 *)v1 + 40);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C099994();
  sub_23C0E4AE0();
  __asm { BR              X9 }
}

uint64_t sub_23C097DDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 144) = 0;
  sub_23C099C80();
  v5 = *(_QWORD *)(v4 - 152);
  sub_23C0E49E4();
  sub_23C0E4A08();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 168) + 8))(v1, v5);
}

uint64_t FilterItem.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v28[12];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;

  v40 = a2;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F978);
  v28[11] = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v45 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F980);
  v28[10] = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v44 = (char *)v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F988);
  v28[9] = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v43 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F990);
  v28[8] = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v42 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F998);
  v28[7] = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v39 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F9A0);
  v28[6] = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v41 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F9A8);
  v28[5] = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v38 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F9B0);
  v28[4] = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v37 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F9B8);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F9C0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v46 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v19);
  sub_23C099994();
  v20 = v47;
  sub_23C0E4AD4();
  if (!v20)
  {
    v28[2] = v14;
    v28[1] = v12;
    v28[0] = v11;
    v28[3] = 0;
    v47 = v16;
    v21 = v15;
    v22 = sub_23C0E49CC();
    if (*(_QWORD *)(v22 + 16) == 1)
      __asm { BR              X9 }
    v23 = sub_23C0E4900();
    swift_allocError();
    v24 = v18;
    v26 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6E8);
    *v26 = &type metadata for FilterItem;
    sub_23C0E4960();
    sub_23C0E48F4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v26, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v24, v21);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

void sub_23C0986F0()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)(v3 - 128) = 1;
  sub_23C099BF8();
  v4 = *(_QWORD *)(v3 - 208);
  v5 = *(_QWORD *)(v3 - 344);
  sub_23C0E4954();
  if (v5)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x23C0986C0);
  }
  v6 = v0;
  sub_23C099D08();
  v7 = *(_QWORD *)(v3 - 272);
  sub_23C0E49C0();
  v8 = *(_QWORD *)(v3 - 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 336) + 8))(v4, v7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v2);
  v9 = *(_QWORD *)(v3 - 120);
  *(_QWORD *)(v3 - 144) = *(_QWORD *)(v3 - 128);
  v10 = *(_OWORD *)(v3 - 112);
  v11 = *(_QWORD *)(v3 - 96);
  v12 = *(_QWORD *)(v3 - 184);
  *(_QWORD *)v12 = *(_QWORD *)(v3 - 144);
  *(_QWORD *)(v12 + 8) = v9;
  *(_OWORD *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 32) = v11;
  *(_BYTE *)(v12 + 40) = v6;
  JUMPOUT(0x23C0986C4);
}

void sub_23C098758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v2 - 128) = 2;
  sub_23C099BB4();
  v3 = *(_QWORD *)(v2 - 200);
  v4 = v1;
  v5 = *(_QWORD *)(v2 - 344);
  sub_23C0E4954();
  if (!v5)
  {
    v6 = *(_QWORD *)(v2 - 264);
    *(_QWORD *)(v2 - 144) = sub_23C0E4984();
    v7 = *(_QWORD *)(v2 - 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 328) + 8))(v3, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0, v4);
    JUMPOUT(0x23C098CBCLL);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x23C0986C0);
}

void sub_23C09892C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v4 - 128) = 6;
  sub_23C099AA4();
  v5 = v3;
  v6 = *(_QWORD *)(v4 - 344);
  sub_23C0E4954();
  if (!v6)
  {
    *(_QWORD *)(v4 - 168) = v0;
    v7 = *(_QWORD *)(v4 - 256);
    *(_QWORD *)(v4 - 144) = sub_23C0E4984();
    v8 = *(_QWORD *)(v4 - 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 296) + 8))(v2, v7);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v1, v5);
    JUMPOUT(0x23C098D68);
  }
  JUMPOUT(0x23C09891CLL);
}

void sub_23C09897C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v3 - 160) = a1;
  *(_BYTE *)(v3 - 128) = 7;
  sub_23C099A60();
  v4 = *(_QWORD *)(v3 - 344);
  sub_23C0E4954();
  if (!v4)
  {
    *(_QWORD *)(v3 - 168) = v1;
    v5 = *(_QWORD *)(v3 - 224);
    *(_QWORD *)(v3 - 144) = sub_23C0E4984();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 288) + 8))(v2, v5);
    JUMPOUT(0x23C098D08);
  }
  JUMPOUT(0x23C09891CLL);
}

void sub_23C0989CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v5 - 160) = a1;
  *(_BYTE *)(v5 - 128) = 8;
  sub_23C0999D8();
  v6 = *(_QWORD *)(v5 - 344);
  sub_23C0E4954();
  if (v6)
    JUMPOUT(0x23C098A14);
  *(_QWORD *)(v5 - 168) = v1;
  sub_23C099CC4();
  v7 = *(_QWORD *)(v5 - 216);
  sub_23C0E49C0();
  v8 = *(_QWORD *)(v5 - 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 280) + 8))(v3, v7);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, v4);
  *(_QWORD *)(v5 - 144) = *(unsigned __int8 *)(v5 - 128);
  JUMPOUT(0x23C098D60);
}

uint64_t sub_23C098D84@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FilterItem.init(from:)(a1, a2);
}

void sub_23C098D98(_QWORD *a1)
{
  FilterItem.encode(to:)(a1);
}

void FilterItem.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_23C098DE8()
{
  sub_23C0E4AA4();
  return sub_23C0E47A4();
}

uint64_t sub_23C098E94()
{
  unsigned __int8 v0;
  uint64_t v1;

  v1 = sub_23C0E4AA4();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_23C098EDC + 4 * byte_23C0E6885[v0]))(v1, 0x7053747369747261);
}

uint64_t sub_23C098EDC()
{
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t FilterItem.hashValue.getter()
{
  sub_23C0E4A98();
  FilterItem.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C09901C()
{
  sub_23C0E4A98();
  FilterItem.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C099078()
{
  sub_23C0E4A98();
  FilterItem.hash(into:)();
  return sub_23C0E4AC8();
}

void _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_23C099118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v23;
  char v24;
  uint64_t v25;

  if (v8)
  {
    v19 = v1;
    v23 = v2;
    v25 = v10;
    v20 = v0;
    swift_bridgeObjectRetain();
    sub_23C0682C0(v9, v11, v6, v5, v4, v8);
    sub_23C0682A8(v19, v20, v3, v23, v25, v7);
    sub_23C0682A8(v9, v11, v6, v5, v4, v8);
    v21 = 0;
  }
  else
  {
    v12 = v3;
    v13 = v2;
    v14 = v10;
    v15 = v9;
    v16 = v11;
    if (v1 == v9 && v0 == v11)
    {
      v24 = 1;
      v17 = v0;
      v18 = v1;
    }
    else
    {
      v17 = v0;
      v18 = v1;
      v24 = sub_23C0E4A74();
    }
    sub_23C0682C0(v15, v16, v6, v5, v4, 0);
    sub_23C0682C0(v18, v17, v12, v13, v14, 0);
    sub_23C0682A8(v18, v17, v12, v13, v14, 0);
    sub_23C0682A8(v15, v16, v6, v5, v4, 0);
    v21 = v24;
  }
  return v21 & 1;
}

unint64_t sub_23C099994()
{
  unint64_t result;

  result = qword_256B0F918;
  if (!qword_256B0F918)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E74A4, &type metadata for FilterItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F918);
  }
  return result;
}

unint64_t sub_23C0999D8()
{
  unint64_t result;

  result = qword_256B0F920;
  if (!qword_256B0F920)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7454, &type metadata for FilterItem.TraitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F920);
  }
  return result;
}

unint64_t sub_23C099A1C()
{
  unint64_t result;

  result = qword_256B0F928;
  if (!qword_256B0F928)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for EditorialTrait, &type metadata for EditorialTrait);
    atomic_store(result, (unint64_t *)&qword_256B0F928);
  }
  return result;
}

unint64_t sub_23C099A60()
{
  unint64_t result;

  result = qword_256B0F930;
  if (!qword_256B0F930)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7404, &type metadata for FilterItem.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F930);
  }
  return result;
}

unint64_t sub_23C099AA4()
{
  unint64_t result;

  result = qword_256B0F938;
  if (!qword_256B0F938)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E73B4, &type metadata for FilterItem.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F938);
  }
  return result;
}

unint64_t sub_23C099AE8()
{
  unint64_t result;

  result = qword_256B0F940;
  if (!qword_256B0F940)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7364, &type metadata for FilterItem.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F940);
  }
  return result;
}

unint64_t sub_23C099B2C()
{
  unint64_t result;

  result = qword_256B0F948;
  if (!qword_256B0F948)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7314, &type metadata for FilterItem.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F948);
  }
  return result;
}

unint64_t sub_23C099B70()
{
  unint64_t result;

  result = qword_256B0F950;
  if (!qword_256B0F950)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E72C4, &type metadata for FilterItem.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F950);
  }
  return result;
}

unint64_t sub_23C099BB4()
{
  unint64_t result;

  result = qword_256B0F958;
  if (!qword_256B0F958)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7274, &type metadata for FilterItem.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F958);
  }
  return result;
}

unint64_t sub_23C099BF8()
{
  unint64_t result;

  result = qword_256B0F960;
  if (!qword_256B0F960)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7224, &type metadata for FilterItem.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F960);
  }
  return result;
}

unint64_t sub_23C099C3C()
{
  unint64_t result;

  result = qword_256B0F968;
  if (!qword_256B0F968)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Duration, &type metadata for Duration);
    atomic_store(result, (unint64_t *)&qword_256B0F968);
  }
  return result;
}

unint64_t sub_23C099C80()
{
  unint64_t result;

  result = qword_256B0F970;
  if (!qword_256B0F970)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E71D4, &type metadata for FilterItem.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F970);
  }
  return result;
}

unint64_t sub_23C099CC4()
{
  unint64_t result;

  result = qword_256B0F9C8;
  if (!qword_256B0F9C8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for EditorialTrait, &type metadata for EditorialTrait);
    atomic_store(result, (unint64_t *)&qword_256B0F9C8);
  }
  return result;
}

unint64_t sub_23C099D08()
{
  unint64_t result;

  result = qword_256B0F9D0;
  if (!qword_256B0F9D0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Duration, &type metadata for Duration);
    atomic_store(result, (unint64_t *)&qword_256B0F9D0);
  }
  return result;
}

unint64_t sub_23C099D50()
{
  unint64_t result;

  result = qword_256B0F9D8;
  if (!qword_256B0F9D8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterItem, &type metadata for FilterItem);
    atomic_store(result, (unint64_t *)&qword_256B0F9D8);
  }
  return result;
}

uint64_t destroy for FilterItem(uint64_t result)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(result + 40);
  if (v1 >= 9)
    v1 = *(_DWORD *)result + 9;
  if (v1 <= 7)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeWithCopy for FilterItem(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned __int8 *)(a2 + 40);
  while (2)
  {
    switch(v3)
    {
      case 0:
        v4 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v4;
        *(_BYTE *)(a1 + 40) = 0;
        goto LABEL_13;
      case 1:
        v5 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v5;
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        v6 = 1;
        goto LABEL_12;
      case 2:
        v7 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v7;
        v6 = 2;
        goto LABEL_12;
      case 3:
        v8 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v8;
        v6 = 3;
        goto LABEL_12;
      case 4:
        v9 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v9;
        v6 = 4;
        goto LABEL_12;
      case 5:
        v10 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v10;
        v6 = 5;
        goto LABEL_12;
      case 6:
        v11 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v11;
        v6 = 6;
        goto LABEL_12;
      case 7:
        v12 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)(a1 + 8) = v12;
        v6 = 7;
LABEL_12:
        *(_BYTE *)(a1 + 40) = v6;
LABEL_13:
        swift_bridgeObjectRetain();
        break;
      case 8:
        *(_BYTE *)a1 = *(_BYTE *)a2;
        *(_BYTE *)(a1 + 40) = 8;
        break;
      default:
        v3 = *(_DWORD *)a2 + 9;
        continue;
    }
    return a1;
  }
}

uint64_t assignWithCopy for FilterItem(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  char v6;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 9)
      v4 = *(_DWORD *)a1 + 9;
    if (v4 <= 7)
      swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a2 + 40);
    while (2)
    {
      switch(v5)
      {
        case 0:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_BYTE *)(a1 + 40) = 0;
          goto LABEL_18;
        case 1:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 1;
          goto LABEL_17;
        case 2:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 2;
          goto LABEL_17;
        case 3:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 3;
          goto LABEL_17;
        case 4:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 4;
          goto LABEL_17;
        case 5:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 5;
          goto LABEL_17;
        case 6:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 6;
          goto LABEL_17;
        case 7:
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
          v6 = 7;
LABEL_17:
          *(_BYTE *)(a1 + 40) = v6;
LABEL_18:
          swift_bridgeObjectRetain();
          break;
        case 8:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          *(_BYTE *)(a1 + 40) = 8;
          break;
        default:
          v5 = *(_DWORD *)a2 + 9;
          continue;
      }
      break;
    }
  }
  return a1;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FilterItem(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  char v6;
  __int128 v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 9)
      v4 = *(_DWORD *)a1 + 9;
    if (v4 <= 7)
      swift_bridgeObjectRelease();
    v5 = *(unsigned __int8 *)(a2 + 40);
    while (2)
    {
      switch(v5)
      {
        case 0:
          v6 = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          break;
        case 1:
          v7 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v7;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          v6 = 1;
          break;
        case 2:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 2;
          break;
        case 3:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 3;
          break;
        case 4:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 4;
          break;
        case 5:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 5;
          break;
        case 6:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 6;
          break;
        case 7:
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v6 = 7;
          break;
        case 8:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v6 = 8;
          break;
        default:
          v5 = *(_DWORD *)a2 + 9;
          continue;
      }
      break;
    }
    *(_BYTE *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterItem(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF8 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 248);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 9)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FilterItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF7)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 248;
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xF8)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C09A1D8(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 9)
    return (*(_DWORD *)a1 + 9);
  return result;
}

uint64_t sub_23C09A1F4(uint64_t result, unsigned int a2)
{
  if (a2 > 8)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 9;
    LOBYTE(a2) = 9;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FilterItem()
{
  return &type metadata for FilterItem;
}

uint64_t getEnumTagSinglePayload for FilterItem.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23C09A308 + 4 * byte_23C0E68B6[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23C09A33C + 4 * byte_23C0E68B1[v4]))();
}

uint64_t sub_23C09A33C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C09A344(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C09A34CLL);
  return result;
}

uint64_t sub_23C09A358(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C09A360);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23C09A364(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C09A36C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterItem.CodingKeys()
{
  return &type metadata for FilterItem.CodingKeys;
}

ValueMetadata *type metadata accessor for FilterItem.BodyFocusCodingKeys()
{
  return &type metadata for FilterItem.BodyFocusCodingKeys;
}

ValueMetadata *type metadata accessor for FilterItem.DurationCodingKeys()
{
  return &type metadata for FilterItem.DurationCodingKeys;
}

ValueMetadata *type metadata accessor for FilterItem.EquipmentCodingKeys()
{
  return &type metadata for FilterItem.EquipmentCodingKeys;
}

ValueMetadata *type metadata accessor for FilterItem.ModalityCodingKeys()
{
  return &type metadata for FilterItem.ModalityCodingKeys;
}

ValueMetadata *type metadata accessor for FilterItem.MusicGenreCodingKeys()
{
  return &type metadata for FilterItem.MusicGenreCodingKeys;
}

ValueMetadata *type metadata accessor for FilterItem.SkillLevelCodingKeys()
{
  return &type metadata for FilterItem.SkillLevelCodingKeys;
}

ValueMetadata *type metadata accessor for FilterItem.ThemeCodingKeys()
{
  return &type metadata for FilterItem.ThemeCodingKeys;
}

ValueMetadata *type metadata accessor for FilterItem.TrainerCodingKeys()
{
  return &type metadata for FilterItem.TrainerCodingKeys;
}

uint64_t _s16FitnessFiltering10FilterItemO19BodyFocusCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23C09A44C + 4 * byte_23C0E68BB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23C09A46C + 4 * byte_23C0E68C0[v4]))();
}

_BYTE *sub_23C09A44C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23C09A46C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23C09A474(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23C09A47C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23C09A484(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23C09A48C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FilterItem.TraitCodingKeys()
{
  return &type metadata for FilterItem.TraitCodingKeys;
}

unint64_t sub_23C09A4AC()
{
  unint64_t result;

  result = qword_256B0F9E0;
  if (!qword_256B0F9E0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6B34, &type metadata for FilterItem.TraitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F9E0);
  }
  return result;
}

unint64_t sub_23C09A4F4()
{
  unint64_t result;

  result = qword_256B0F9E8;
  if (!qword_256B0F9E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6BEC, &type metadata for FilterItem.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F9E8);
  }
  return result;
}

unint64_t sub_23C09A53C()
{
  unint64_t result;

  result = qword_256B0F9F0;
  if (!qword_256B0F9F0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6CA4, &type metadata for FilterItem.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F9F0);
  }
  return result;
}

unint64_t sub_23C09A584()
{
  unint64_t result;

  result = qword_256B0F9F8;
  if (!qword_256B0F9F8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6D5C, &type metadata for FilterItem.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0F9F8);
  }
  return result;
}

unint64_t sub_23C09A5CC()
{
  unint64_t result;

  result = qword_256B0FA00;
  if (!qword_256B0FA00)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6E14, &type metadata for FilterItem.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA00);
  }
  return result;
}

unint64_t sub_23C09A614()
{
  unint64_t result;

  result = qword_256B0FA08;
  if (!qword_256B0FA08)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6ECC, &type metadata for FilterItem.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA08);
  }
  return result;
}

unint64_t sub_23C09A65C()
{
  unint64_t result;

  result = qword_256B0FA10;
  if (!qword_256B0FA10)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6F84, &type metadata for FilterItem.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA10);
  }
  return result;
}

unint64_t sub_23C09A6A4()
{
  unint64_t result;

  result = qword_256B0FA18;
  if (!qword_256B0FA18)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E703C, &type metadata for FilterItem.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA18);
  }
  return result;
}

unint64_t sub_23C09A6EC()
{
  unint64_t result;

  result = qword_256B0FA20;
  if (!qword_256B0FA20)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E70F4, &type metadata for FilterItem.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA20);
  }
  return result;
}

unint64_t sub_23C09A734()
{
  unint64_t result;

  result = qword_256B0FA28;
  if (!qword_256B0FA28)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E71AC, &type metadata for FilterItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA28);
  }
  return result;
}

unint64_t sub_23C09A77C()
{
  unint64_t result;

  result = qword_256B0FA30;
  if (!qword_256B0FA30)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7064, &type metadata for FilterItem.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA30);
  }
  return result;
}

unint64_t sub_23C09A7C4()
{
  unint64_t result;

  result = qword_256B0FA38;
  if (!qword_256B0FA38)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E708C, &type metadata for FilterItem.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA38);
  }
  return result;
}

unint64_t sub_23C09A80C()
{
  unint64_t result;

  result = qword_256B0FA40;
  if (!qword_256B0FA40)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6FAC, &type metadata for FilterItem.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA40);
  }
  return result;
}

unint64_t sub_23C09A854()
{
  unint64_t result;

  result = qword_256B0FA48;
  if (!qword_256B0FA48)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6FD4, &type metadata for FilterItem.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA48);
  }
  return result;
}

unint64_t sub_23C09A89C()
{
  unint64_t result;

  result = qword_256B0FA50;
  if (!qword_256B0FA50)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6EF4, &type metadata for FilterItem.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA50);
  }
  return result;
}

unint64_t sub_23C09A8E4()
{
  unint64_t result;

  result = qword_256B0FA58;
  if (!qword_256B0FA58)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6F1C, &type metadata for FilterItem.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA58);
  }
  return result;
}

unint64_t sub_23C09A92C()
{
  unint64_t result;

  result = qword_256B0FA60;
  if (!qword_256B0FA60)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6E3C, &type metadata for FilterItem.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA60);
  }
  return result;
}

unint64_t sub_23C09A974()
{
  unint64_t result;

  result = qword_256B0FA68;
  if (!qword_256B0FA68)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6E64, &type metadata for FilterItem.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA68);
  }
  return result;
}

unint64_t sub_23C09A9BC()
{
  unint64_t result;

  result = qword_256B0FA70;
  if (!qword_256B0FA70)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6D84, &type metadata for FilterItem.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA70);
  }
  return result;
}

unint64_t sub_23C09AA04()
{
  unint64_t result;

  result = qword_256B0FA78;
  if (!qword_256B0FA78)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6DAC, &type metadata for FilterItem.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA78);
  }
  return result;
}

unint64_t sub_23C09AA4C()
{
  unint64_t result;

  result = qword_256B0FA80;
  if (!qword_256B0FA80)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6CCC, &type metadata for FilterItem.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA80);
  }
  return result;
}

unint64_t sub_23C09AA94()
{
  unint64_t result;

  result = qword_256B0FA88;
  if (!qword_256B0FA88)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6CF4, &type metadata for FilterItem.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA88);
  }
  return result;
}

unint64_t sub_23C09AADC()
{
  unint64_t result;

  result = qword_256B0FA90;
  if (!qword_256B0FA90)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6C14, &type metadata for FilterItem.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA90);
  }
  return result;
}

unint64_t sub_23C09AB24()
{
  unint64_t result;

  result = qword_256B0FA98;
  if (!qword_256B0FA98)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6C3C, &type metadata for FilterItem.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FA98);
  }
  return result;
}

unint64_t sub_23C09AB6C()
{
  unint64_t result;

  result = qword_256B0FAA0;
  if (!qword_256B0FAA0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6B5C, &type metadata for FilterItem.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FAA0);
  }
  return result;
}

unint64_t sub_23C09ABB4()
{
  unint64_t result;

  result = qword_256B0FAA8;
  if (!qword_256B0FAA8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6B84, &type metadata for FilterItem.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FAA8);
  }
  return result;
}

unint64_t sub_23C09ABFC()
{
  unint64_t result;

  result = qword_256B0FAB0;
  if (!qword_256B0FAB0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6AA4, &type metadata for FilterItem.TraitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FAB0);
  }
  return result;
}

unint64_t sub_23C09AC44()
{
  unint64_t result;

  result = qword_256B0FAB8;
  if (!qword_256B0FAB8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E6ACC, &type metadata for FilterItem.TraitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FAB8);
  }
  return result;
}

unint64_t sub_23C09AC8C()
{
  unint64_t result;

  result = qword_256B0FAC0;
  if (!qword_256B0FAC0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E711C, &type metadata for FilterItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FAC0);
  }
  return result;
}

unint64_t sub_23C09ACD4()
{
  unint64_t result;

  result = qword_256B0FAC8;
  if (!qword_256B0FAC8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7144, &type metadata for FilterItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FAC8);
  }
  return result;
}

uint64_t sub_23C09AD18(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x75636F4679646F62 && a2 == 0xE900000000000073;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E656D7069757165 && a2 == 0xE900000000000074 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7974696C61646F6DLL && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6547636973756DLL && a2 == 0xEA00000000006572 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x76654C6C6C696B73 && a2 == 0xEA00000000006C65 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656D656874 && a2 == 0xE500000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x72656E69617274 && a2 == 0xE700000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7469617274 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t FilterResult.bodyFocusIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterResult.durationIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterResult.equipmentIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterResult.modalityIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterResult.musicGenreIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterResult.results.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterResult.skillLevelIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterResult.themeIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterResult.trainerIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterResult.init(bodyFocusIdentifiers:durationIdentifiers:equipmentIdentifiers:modalityIdentifiers:musicGenreIdentifiers:results:skillLevelIdentifiers:themeIdentifiers:trainerIdentifiers:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t sub_23C09B134(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23C09B170 + 4 * byte_23C0E7500[a1]))(0xD000000000000014, 0x800000023C0EE090);
}

unint64_t sub_23C09B170()
{
  return 0xD000000000000013;
}

uint64_t sub_23C09B1A8()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_23C09B1B8()
{
  return 0x73746C75736572;
}

uint64_t sub_23C09B1D0()
{
  uint64_t v0;

  return v0 + 2;
}

uint64_t sub_23C09B1E0()
{
  uint64_t v0;

  return v0 - 3;
}

void sub_23C09B1F0()
{
  JUMPOUT(0x23C09B1FCLL);
}

uint64_t sub_23C09B208()
{
  unsigned __int8 *v0;

  return sub_23C09B134(*v0);
}

uint64_t sub_23C09B210@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C09E4E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C09B234()
{
  sub_23C09DDF8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C09B25C()
{
  sub_23C09DDF8();
  return sub_23C0E4AF8();
}

uint64_t FilterResult.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FAD0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v23 = v1[2];
  v24 = v8;
  v10 = v1[3];
  v21 = v1[4];
  v22 = v10;
  v11 = v1[5];
  v19 = v1[6];
  v20 = v11;
  v12 = v1[7];
  v17 = v1[8];
  v18 = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C09DDF8();
  sub_23C0E4AE0();
  v26 = v9;
  v25 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FAE0);
  sub_23C09DE80(&qword_256B0FAE8, MEMORY[0x24BEE0D08], MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    v13 = v22;
    v14 = v23;
    v26 = v24;
    v25 = 1;
    sub_23C0E4A44();
    v26 = v14;
    v25 = 2;
    sub_23C0E4A44();
    v26 = v13;
    v25 = 3;
    sub_23C0E4A44();
    v26 = v21;
    v25 = 4;
    sub_23C0E4A44();
    v26 = v20;
    v25 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FAF0);
    sub_23C09DEE0(&qword_256B0FAF8, (uint64_t (*)(void))sub_23C09DE3C, MEMORY[0x24BEE12A0]);
    sub_23C0E4A44();
    v26 = v19;
    v25 = 6;
    sub_23C0E4A44();
    v26 = v18;
    v25 = 7;
    sub_23C0E4A44();
    v26 = v17;
    v25 = 8;
    sub_23C0E4A44();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t FilterResult.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FB08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C09DDF8();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v31 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FAE0);
  v32 = 0;
  sub_23C09DE80(&qword_256B0FB10, MEMORY[0x24BEE0D38], MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v10 = v33;
  v32 = 1;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v32 = 2;
  v30 = v33;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v32 = 3;
  v29 = v33;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v32 = 4;
  v28 = v33;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v11 = v33;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FAF0);
  v32 = 5;
  sub_23C09DEE0(&qword_256B0FB18, (uint64_t (*)(void))sub_23C09DF48, MEMORY[0x24BEE12D0]);
  v25 = v11;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v27 = v10;
  v32 = 6;
  v24 = v33;
  swift_bridgeObjectRetain();
  v22 = 0;
  sub_23C0E49C0();
  v32 = 7;
  v26 = v33;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v32 = 8;
  v23 = v33;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = v29;
  swift_bridgeObjectRetain();
  v13 = v28;
  swift_bridgeObjectRetain();
  v14 = v25;
  swift_bridgeObjectRetain();
  v15 = v24;
  swift_bridgeObjectRetain();
  v16 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = v30;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v31;
  *v31 = v10;
  v18[1] = v17;
  v18[2] = v12;
  v18[3] = v13;
  v18[4] = v14;
  v18[5] = v15;
  v20 = v22;
  v19 = v23;
  v18[6] = v16;
  v18[7] = v19;
  v18[8] = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C09BD68@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FilterResult.init(from:)(a1, a2);
}

uint64_t sub_23C09BD7C(_QWORD *a1)
{
  return FilterResult.encode(to:)(a1);
}

uint64_t FilterResult.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v8 = v1[4];
  v7 = v1[5];
  v10 = v1[6];
  v9 = v1[7];
  v11 = v1[8];
  swift_bridgeObjectRetain();
  sub_23C067868(a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C067868(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C067868(a1, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C067868(a1, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C067868(a1, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C09DC1C(a1, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C067868(a1, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C067868(a1, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C067868(a1, v11);
  return swift_bridgeObjectRelease();
}

uint64_t FilterResult.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 8);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  v10 = v1;
  sub_23C0E4A98();
  FilterResult.hash(into:)((uint64_t)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C09BF30()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 8);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  v10 = v1;
  sub_23C0E4A98();
  FilterResult.hash(into:)((uint64_t)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C09BF8C()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _BYTE v5[72];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v1 = *((_QWORD *)v0 + 8);
  v2 = v0[1];
  v6 = *v0;
  v7 = v2;
  v3 = v0[3];
  v8 = v0[2];
  v9 = v3;
  v10 = v1;
  sub_23C0E4A98();
  FilterResult.hash(into:)((uint64_t)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C09BFE8(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  if (v4)
  {
    v6 = (uint64_t *)(a2 + 48);
    do
    {
      v7 = *(v6 - 2);
      v8 = *v6;
      v9 = v6[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      sub_23C065C58(a1, v7);
      swift_bridgeObjectRelease();
      sub_23C0E4AB0();
      if (v8)
      {
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      sub_23C0E4AA4();
      swift_bridgeObjectRetain();
      sub_23C09C16C(a1, v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      v6 += 9;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_23C09C16C(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  if (v4)
  {
    v6 = a2 + 40;
    do
    {
      v7 = *(_QWORD *)(v6 - 8);
      v8 = *(_QWORD *)(v6 + 8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      sub_23C065C58(a1, v7);
      swift_bridgeObjectRelease();
      sub_23C0E4AB0();
      if (v8)
      {
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        swift_bridgeObjectRelease();
      }
      v6 += 56;
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_23C09C2B0(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  if (v4)
  {
    v6 = a2 + 56;
    do
    {
      v7 = *(_QWORD *)(v6 - 24);
      v8 = *(_QWORD *)(v6 - 8);
      v9 = *(_QWORD *)(v6 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C065C58(a1, v7);
      swift_bridgeObjectRelease();
      sub_23C0E4AB0();
      if (v8)
      {
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      sub_23C0E4AB0();
      if (v9)
      {
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      sub_23C0E4AA4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v6 += 80;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_23C09C460(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  v15 = v4;
  if (v4)
  {
    v6 = 0;
    v14 = a2 + 32;
    do
    {
      v7 = (uint64_t *)(v14 + 80 * v6);
      v8 = *v7;
      v9 = v7[1];
      v10 = v7[3];
      v11 = v7[8];
      sub_23C0E4AA4();
      v12 = *(_QWORD *)(v8 + 16);
      if (v12)
      {
        v13 = v8 + 32;
        do
        {
          v13 += 8;
          sub_23C0E4AA4();
          --v12;
        }
        while (v12);
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_23C065C58(a1, v9);
      swift_bridgeObjectRelease();
      sub_23C0E4AB0();
      if (v10)
      {
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        swift_bridgeObjectRelease();
      }
      ++v6;
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C066288((uint64_t)a1, v11);
      swift_bridgeObjectRelease();
      sub_23C0E4AA4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    while (v6 != v15);
  }
  return result;
}

uint64_t sub_23C09C644(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  if (v3)
  {
    v5 = a2 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      sub_23C0E4ABC();
      sub_23C0E4ABC();
      sub_23C0E4ABC();
      sub_23C0E4AA4();
      result = swift_bridgeObjectRelease();
      v5 += 48;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_23C09C700(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  if (v4)
  {
    v6 = (uint64_t *)(a2 + 48);
    do
    {
      v7 = *(v6 - 2);
      v8 = *v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      sub_23C065C58(a1, v7);
      swift_bridgeObjectRelease();
      sub_23C0E4AB0();
      if (v8)
      {
        swift_bridgeObjectRetain();
        sub_23C0E47A4();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      sub_23C0E4AA4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v6 += 8;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_23C09C85C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = sub_23C0E3EB0();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v18 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for FilterSectionDescriptor();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  v26 = v13;
  if (v13)
  {
    v20 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v21 = v12;
    v19 = *(_QWORD *)(v10 + 72);
    v24 = v4;
    v25 = v3;
    v22 = v9;
    v23 = v8;
    sub_23C09E828(v20, (uint64_t)v12);
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    sub_23C09E86C((uint64_t)&v12[*(int *)(v9 + 20)], (uint64_t)v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
    {
      sub_23C0E4AB0();
    }
    else
    {
      v15 = v18;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v18, v8, v3);
      sub_23C0E4AB0();
      sub_23C09E8B4();
      sub_23C0E4714();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
    }
    v16 = (char *)&loc_23C09CA80 + 4 * word_23C0E750A[v12[*(int *)(v9 + 24) + 16]];
    v27 = 1;
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23C09D6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  if (v3)
    __asm { BR              X9 }
  return result;
}

uint64_t sub_23C09D83C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  if (v3)
    __asm { BR              X8 }
  return result;
}

uint64_t sub_23C09DC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_23C0E4AA4();
  if (v3)
  {
    v5 = a2 + 56;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease_n();
      v5 += 32;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t _s16FitnessFiltering12FilterResultV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v6 = a1[4];
  v5 = a1[5];
  v16 = a1[7];
  v14 = a1[8];
  v7 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  v17 = a2[6];
  v18 = a1[6];
  v15 = a2[7];
  v13 = a2[8];
  if ((sub_23C077188(*a1, *a2) & 1) != 0
    && (sub_23C077188(v2, v7) & 1) != 0
    && (sub_23C077188(v4, v9) & 1) != 0
    && (sub_23C077188(v3, v8) & 1) != 0
    && (sub_23C077188(v6, v11) & 1) != 0
    && (sub_23C0BFEF4(v5, v10) & 1) != 0
    && (sub_23C077188(v18, v17) & 1) != 0
    && (sub_23C077188(v16, v15) & 1) != 0)
  {
    return sub_23C077188(v14, v13);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_23C09DDF8()
{
  unint64_t result;

  result = qword_256B0FAD8;
  if (!qword_256B0FAD8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E76F4, &type metadata for FilterResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FAD8);
  }
  return result;
}

unint64_t sub_23C09DE3C()
{
  unint64_t result;

  result = qword_256B0FB00;
  if (!qword_256B0FB00)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ResultPlaceholder, &type metadata for ResultPlaceholder);
    atomic_store(result, (unint64_t *)&qword_256B0FB00);
  }
  return result;
}

uint64_t sub_23C09DE80(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FAE0);
    v8 = a2;
    result = MEMORY[0x242616E9C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C09DEE0(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FAF0);
    v8 = a2();
    result = MEMORY[0x242616E9C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23C09DF48()
{
  unint64_t result;

  result = qword_256B0FB20;
  if (!qword_256B0FB20)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ResultPlaceholder, &type metadata for ResultPlaceholder);
    atomic_store(result, (unint64_t *)&qword_256B0FB20);
  }
  return result;
}

unint64_t sub_23C09DF90()
{
  unint64_t result;

  result = qword_256B0FB28;
  if (!qword_256B0FB28)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterResult, &type metadata for FilterResult);
    atomic_store(result, (unint64_t *)&qword_256B0FB28);
  }
  return result;
}

uint64_t destroy for FilterResult()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FilterResult(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FilterResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for FilterResult(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ThemeCategory(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ThemeCategory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterResult()
{
  return &type metadata for FilterResult;
}

uint64_t storeEnumTagSinglePayload for FilterResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23C09E390 + 4 * byte_23C0E7538[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23C09E3C4 + 4 * byte_23C0E7533[v4]))();
}

uint64_t sub_23C09E3C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C09E3CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C09E3D4);
  return result;
}

uint64_t sub_23C09E3E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C09E3E8);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23C09E3EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C09E3F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterResult.CodingKeys()
{
  return &type metadata for FilterResult.CodingKeys;
}

unint64_t sub_23C09E414()
{
  unint64_t result;

  result = qword_256B0FB30;
  if (!qword_256B0FB30)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E76CC, &type metadata for FilterResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FB30);
  }
  return result;
}

unint64_t sub_23C09E45C()
{
  unint64_t result;

  result = qword_256B0FB38;
  if (!qword_256B0FB38)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E763C, &type metadata for FilterResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FB38);
  }
  return result;
}

unint64_t sub_23C09E4A4()
{
  unint64_t result;

  result = qword_256B0FB40;
  if (!qword_256B0FB40)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7664, &type metadata for FilterResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FB40);
  }
  return result;
}

uint64_t sub_23C09E4E8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x800000023C0EE090 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023C0EE0B0 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023C0EE0D0 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023C0EE0F0 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C0EE110 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x73746C75736572 && a2 == 0xE700000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C0EE130 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x800000023C0EE150 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C0EE170)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v5 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

uint64_t sub_23C09E828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilterSectionDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C09E86C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23C09E8B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256B0FB48;
  if (!qword_256B0FB48)
  {
    v1 = sub_23C0E3EB0();
    result = MEMORY[0x242616E9C](MEMORY[0x24BDCC5C0], v1);
    atomic_store(result, (unint64_t *)&qword_256B0FB48);
  }
  return result;
}

uint64_t sub_23C09E8FC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FilterSectionDescriptor();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_23C09E938()
{
  type metadata accessor for Option();
}

uint64_t sub_23C09E978()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;

  result = Option.id.getter();
  *v0 = result;
  v0[1] = v2;
  return result;
}

void FilterTrainerSectionView.init(attributedTitle:clearActionTitle:containerWidth:artworkViewBuilder:headerViewBuilder:options:onOptionSelected:)()
{
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C09EA08(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  result = sub_23C06E7B4(v8, (uint64_t)v9 + a1[27], &qword_256B0F048);
  v13 = (_QWORD *)((char *)v9 + a1[28]);
  *v13 = v7;
  v13[1] = v6;
  *(_QWORD *)((char *)v9 + a1[29]) = v10;
  *v9 = v5;
  v9[1] = v4;
  v14 = (_QWORD *)((char *)v9 + a1[30]);
  *v14 = v3;
  v14[1] = v16;
  *(_QWORD *)((char *)v9 + a1[32]) = v17;
  v15 = (_QWORD *)((char *)v9 + a1[31]);
  *v15 = v2;
  v15[1] = v1;
  return result;
}

void type metadata accessor for FilterTrainerSectionView()
{
  JUMPOUT(0x242616E18);
}

void FilterTrainerSectionView.body.getter()
{
  type metadata accessor for Option();
}

uint64_t sub_23C09EAFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  unint64_t v54;
  void (*v55)(unint64_t, _BYTE *, uint64_t);
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v68[96];

  swift_getTupleTypeMetadata2();
  v3 = sub_23C0E481C();
  v0[7] = *(_QWORD *)(v1 + 16);
  sub_23C0E4024();
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB50);
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB58);
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B0FB60);
  swift_getTupleTypeMetadata2();
  v4 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v4);
  v5 = sub_23C0E45F4();
  v6 = sub_23C0E4024();
  v7 = sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1F8);
  v8 = sub_23C0E4024();
  v9 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v5);
  v10 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v2 - 152) = v9;
  *(_QWORD *)(v2 - 144) = v10;
  v11 = MEMORY[0x24BDED308];
  v12 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v6, v2 - 152);
  v13 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v2 - 168) = v12;
  *(_QWORD *)(v2 - 160) = v13;
  v14 = MEMORY[0x242616E9C](v11, v7, v2 - 168);
  v15 = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
  *(_QWORD *)(v2 - 184) = v14;
  *(_QWORD *)(v2 - 176) = v15;
  MEMORY[0x242616E9C](v11, v8, v2 - 184);
  v16 = sub_23C0E45DC();
  v17 = MEMORY[0x242616E9C](MEMORY[0x24BDF43B0], v16);
  *(_QWORD *)(v2 - 136) = v16;
  *(_QWORD *)(v2 - 128) = v17;
  MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F170);
  v18 = sub_23C0E4024();
  *(_QWORD *)(v2 - 136) = v16;
  *(_QWORD *)(v2 - 128) = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v20 = sub_23C06E774(&qword_256B0F168, &qword_256B0F170, MEMORY[0x24BDEF370]);
  *(_QWORD *)(v2 - 200) = OpaqueTypeConformance2;
  *(_QWORD *)(v2 - 192) = v20;
  v21 = MEMORY[0x242616E9C](v11, v18, v2 - 200);
  v22 = sub_23C06DDD8();
  *(_QWORD *)(v2 - 136) = v18;
  *(_QWORD *)(v2 - 128) = &type metadata for FilterButtonStyle;
  *(_QWORD *)(v2 - 120) = v21;
  *(_QWORD *)(v2 - 112) = v22;
  MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF22E0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F160);
  v23 = sub_23C0E4024();
  v24 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v3);
  v25 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v2 - 136) = v3;
  *(_QWORD *)(v2 - 128) = v25;
  *(_QWORD *)(v2 - 120) = v23;
  *(_QWORD *)(v2 - 112) = v24;
  *(_QWORD *)(v2 - 104) = MEMORY[0x24BEE0D10];
  v26 = sub_23C0E4654();
  *(_QWORD *)(v2 - 136) = v18;
  *(_QWORD *)(v2 - 128) = &type metadata for FilterButtonStyle;
  *(_QWORD *)(v2 - 120) = v21;
  *(_QWORD *)(v2 - 112) = v22;
  v27 = swift_getOpaqueTypeConformance2();
  v28 = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
  *(_QWORD *)(v2 - 216) = v27;
  *(_QWORD *)(v2 - 208) = v28;
  *(_QWORD *)(v2 - 224) = MEMORY[0x242616E9C](v11, v23, v2 - 216);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v26, v2 - 224);
  v29 = sub_23C0E46A8();
  v30 = MEMORY[0x242616E9C](MEMORY[0x24BDF5198], v29);
  *(_QWORD *)(v2 - 136) = v29;
  *(_QWORD *)(v2 - 128) = v30;
  MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v2 - 136) = v29;
  *(_QWORD *)(v2 - 128) = v30;
  swift_getOpaqueTypeConformance2();
  v31 = sub_23C0E3FA0();
  v32 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v31);
  *(_QWORD *)(v2 - 136) = v31;
  *(_QWORD *)(v2 - 128) = v32;
  v33 = MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF29F8], 0);
  v34 = sub_23C0E42A0();
  *(_QWORD *)(v2 - 136) = v31;
  *(_QWORD *)(v2 - 128) = v32;
  v35 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v2 - 136) = v33;
  *(_QWORD *)(v2 - 128) = v34;
  v36 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v2 - 120) = v35;
  *(_QWORD *)(v2 - 112) = v36;
  v37 = MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF3000], 0);
  *(_QWORD *)(v2 - 136) = v33;
  *(_QWORD *)(v2 - 128) = v34;
  *(_QWORD *)(v2 - 120) = v35;
  *(_QWORD *)(v2 - 112) = v36;
  v38 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v2 - 136) = v37;
  *(_QWORD *)(v2 - 128) = v38;
  MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF2FE0], 0);
  swift_getTupleTypeMetadata2();
  v39 = sub_23C0E46B4();
  v0[3] = v39;
  v0[2] = MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v39);
  v40 = sub_23C0E4618();
  v0[4] = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v0[1] = (uint64_t)&v68[-v41];
  v42 = sub_23C0E4024();
  v43 = *(_QWORD *)(v42 - 8);
  v0[5] = v42;
  v0[6] = v43;
  MEMORY[0x24BDAC7A8](v42);
  *v0 = (uint64_t)&v68[-v44];
  v45 = sub_23C0E4660();
  v46 = *(_QWORD *)(v45 - 8);
  MEMORY[0x24BDAC7A8](v45);
  v48 = &v68[-((v47 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v49 = sub_23C0E466C();
  v50 = *(_QWORD *)(v49 - 8);
  MEMORY[0x24BDAC7A8](v49);
  v52 = &v68[-((v51 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *v48 = xmmword_23C0E5560;
  (*(void (**)(_OWORD *, _QWORD, uint64_t))(v46 + 104))(v48, *MEMORY[0x24BDF4D40], v45);
  sub_23C0E4678();
  v53 = sub_23C0E4804();
  *(_QWORD *)(v53 + 16) = 5;
  v54 = v53 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
  v55 = *(void (**)(unint64_t, _BYTE *, uint64_t))(v50 + 16);
  v55(v54, v52, v49);
  v56 = *(_QWORD *)(v50 + 72);
  v55(v54 + v56, v52, v49);
  v55(v54 + 2 * v56, v52, v49);
  v55(v54 + 3 * v56, v52, v49);
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v50 + 32))(v54 + 4 * v56, v52, v49);
  sub_23C0E415C();
  v57 = (_QWORD *)v0[8];
  v0[20] = v0[7];
  v0[21] = v0[9];
  v58 = v57[5];
  v0[22] = v0[17];
  v0[23] = v58;
  v59 = v57[7];
  v0[24] = v0[10];
  v0[25] = v59;
  v0[26] = v0[14];
  v0[27] = v0[13];
  v0[28] = v0[12];
  v0[29] = v0[11];
  v0[30] = v57[12];
  v0[31] = v0[15];
  v0[32] = v53;
  v60 = v0[1];
  sub_23C0E460C();
  swift_bridgeObjectRelease();
  v61 = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v40);
  v62 = *v0;
  sub_23C0E4534();
  (*(void (**)(uint64_t, uint64_t))(v0[4] + 8))(v60, v40);
  v63 = sub_23C0E42DC();
  v64 = MEMORY[0x24BDEDB80];
  *(_QWORD *)(v2 - 240) = v61;
  *(_QWORD *)(v2 - 232) = v64;
  v65 = v0[5];
  v66 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v65, v2 - 240);
  sub_23C06B9FC(v63, 0x4034000000000000, 0, v65, v66);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0[6] + 8))(v62, v65);
}

void sub_23C09F308(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[43];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v23[40] = a6;
  v23[41] = a8;
  v23[22] = a7;
  v26 = a5;
  v23[37] = a3;
  v23[38] = a4;
  v23[26] = a2;
  v23[42] = a1;
  v23[35] = a9;
  v25 = a14;
  v23[24] = a13;
  v23[23] = a12;
  v23[36] = a11;
  v23[39] = a10;
  v16 = sub_23C0E41A4();
  v23[33] = *(_QWORD *)(v16 - 8);
  v23[34] = v16;
  MEMORY[0x24BDAC7A8](v16);
  v23[32] = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23C0E4288();
  MEMORY[0x24BDAC7A8](v18);
  v23[30] = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_23C0E42A0();
  v23[31] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v23[29] = (char *)v23 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_23C0E4270();
  v23[27] = *(_QWORD *)(v21 - 8);
  v23[28] = v21;
  MEMORY[0x24BDAC7A8](v21);
  v23[25] = (char *)v23 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a4;
  v28 = a7;
  v29 = a10;
  v30 = a11;
  v31 = a12;
  v32 = a13;
  type metadata accessor for Option();
}

void sub_23C09F490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  swift_getTupleTypeMetadata2();
  v11 = sub_23C0E481C();
  sub_23C0E4024();
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB50);
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB58);
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B0FB60);
  swift_getTupleTypeMetadata2();
  v12 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v12);
  v13 = sub_23C0E45F4();
  v14 = sub_23C0E4024();
  v15 = sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1F8);
  v16 = sub_23C0E4024();
  v17 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v13);
  v18 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v10 - 104) = v17;
  *(_QWORD *)(v10 - 96) = v18;
  v19 = MEMORY[0x24BDED308];
  v20 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v14, v10 - 104);
  v21 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v10 - 120) = v20;
  *(_QWORD *)(v10 - 112) = v21;
  v22 = MEMORY[0x242616E9C](v19, v15, v10 - 120);
  v23 = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
  *(_QWORD *)(v10 - 136) = v22;
  *(_QWORD *)(v10 - 128) = v23;
  MEMORY[0x242616E9C](v19, v16, v10 - 136);
  v24 = sub_23C0E45DC();
  v25 = MEMORY[0x242616E9C](MEMORY[0x24BDF43B0], v24);
  v9[65] = v24;
  v9[66] = v25;
  MEMORY[0x242616E48](255, v9 + 65, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F170);
  v26 = sub_23C0E4024();
  v9[65] = v24;
  v9[66] = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v28 = sub_23C06E774(&qword_256B0F168, &qword_256B0F170, MEMORY[0x24BDEF370]);
  *(_QWORD *)(v10 - 152) = OpaqueTypeConformance2;
  *(_QWORD *)(v10 - 144) = v28;
  v29 = MEMORY[0x242616E9C](v19, v26, v10 - 152);
  v30 = sub_23C06DDD8();
  v9[65] = v26;
  v9[66] = &type metadata for FilterButtonStyle;
  v9[67] = v29;
  v9[68] = v30;
  MEMORY[0x242616E48](255, v9 + 65, MEMORY[0x24BDF22E0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F160);
  v31 = sub_23C0E4024();
  v32 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v11);
  v33 = MEMORY[0x24BEE0D00];
  v9[65] = v11;
  v9[66] = v33;
  v9[67] = v31;
  v9[68] = v32;
  v9[69] = MEMORY[0x24BEE0D10];
  v34 = sub_23C0E4654();
  v9[65] = v26;
  v9[66] = &type metadata for FilterButtonStyle;
  v9[67] = v29;
  v9[68] = v30;
  v35 = swift_getOpaqueTypeConformance2();
  v36 = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
  *(_QWORD *)(v10 - 168) = v35;
  *(_QWORD *)(v10 - 160) = v36;
  *(_QWORD *)(v10 - 176) = MEMORY[0x242616E9C](v19, v31, v10 - 168);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v34, v10 - 176);
  v37 = sub_23C0E46A8();
  v38 = MEMORY[0x242616E9C](MEMORY[0x24BDF5198], v37);
  v9[65] = v37;
  v9[66] = v38;
  v9[2] = MEMORY[0x242616E48](255, v9 + 65, MEMORY[0x24BDF2D58], 0);
  v9[65] = v37;
  v9[66] = v38;
  v9[1] = swift_getOpaqueTypeConformance2();
  v39 = sub_23C0E3FA0();
  v9[7] = *(_QWORD *)(v39 - 8);
  MEMORY[0x24BDAC7A8](v39);
  *v9 = (char *)&a9 - v40;
  v41 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v39);
  v9[65] = v39;
  v9[66] = v41;
  v42 = MEMORY[0x242616E48](0, v9 + 65, MEMORY[0x24BDF29F8], 0);
  v9[9] = *(_QWORD *)(v42 - 8);
  MEMORY[0x24BDAC7A8](v42);
  v9[6] = (char *)&a9 - v43;
  v9[10] = v39;
  v9[65] = v39;
  v9[4] = v41;
  v9[66] = v41;
  v44 = swift_getOpaqueTypeConformance2();
  v9[65] = v42;
  v45 = v9[43];
  v9[66] = v45;
  v46 = MEMORY[0x24BDF10F0];
  v9[67] = v44;
  v9[68] = v46;
  v47 = MEMORY[0x242616E48](0, v9 + 65, MEMORY[0x24BDF3000], 0);
  v9[16] = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  v9[14] = (char *)&a9 - v48;
  v9[11] = v42;
  v9[65] = v42;
  v9[66] = v45;
  v9[3] = v44;
  v9[67] = v44;
  v9[68] = v46;
  v49 = swift_getOpaqueTypeConformance2();
  v9[18] = v47;
  v9[65] = v47;
  v9[13] = v49;
  v9[66] = v49;
  v50 = MEMORY[0x242616E48](0, v9 + 65, MEMORY[0x24BDF2FE0], 0);
  v9[21] = v50;
  v9[17] = *(_QWORD *)(v50 - 8);
  v51 = MEMORY[0x24BDAC7A8](v50);
  v9[20] = (char *)&a9 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = MEMORY[0x24BDAC7A8](v51);
  v9[12] = (char *)&a9 - v54;
  v55 = MEMORY[0x24BDAC7A8](v53);
  v9[19] = (char *)&a9 - v56;
  v57 = v9[45];
  v58 = MEMORY[0x24BDAC7A8](v55);
  MEMORY[0x24BDAC7A8](v58);
  v9[65] = v9[37];
  v9[66] = v9[38];
  v9[67] = v57;
  v9[68] = v9[40];
  v59 = v9[23];
  v9[69] = v9[22];
  v9[70] = v9[41];
  v9[71] = v9[39];
  v9[72] = v9[36];
  v9[73] = v59;
  v9[74] = v9[24];
  v9[75] = v9[44];
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C09FB48(int *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);

  (*(void (**)(uint64_t, _QWORD, _QWORD))(v1[42] + a1[30]))(v1[42] + a1[27], *(_QWORD *)(v1[42] + a1[28]), *(_QWORD *)(v1[42] + a1[28] + 8));
  v1[15] = v3;
  sub_23C06E920(v8, v4, v3);
  v1[8] = v5;
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v1[5] = (uint64_t)v10;
  v10(v8, v4);
  sub_23C0E42B8();
  v11 = v1[38];
  v1[48] = v1[37];
  v1[49] = v11;
  v12 = v1[40];
  v1[50] = v4;
  v1[51] = v12;
  v13 = v1[41];
  v1[52] = v7;
  v1[53] = v13;
  v14 = v1[36];
  v1[54] = v1[39];
  v1[55] = v14;
  v1[56] = v6;
  v1[57] = v9;
  v15 = *v1;
  v16 = v1[26];
  v1[58] = v2;
  v1[59] = v16;
  v1[60] = v1[42];
  sub_23C0D4060();
  v17 = v1[25];
  sub_23C0E4258();
  v18 = sub_23C0E42D0();
  v19 = sub_23C0E42B8();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v18)
    sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v19)
    sub_23C0E42C4();
  v20 = v1[32];
  v21 = v1[14];
  v22 = v1[6];
  v23 = v1[10];
  sub_23C0E4474();
  (*(void (**)(uint64_t, uint64_t))(v1[27] + 8))(v17, v1[28]);
  (*(void (**)(uint64_t, uint64_t))(v1[7] + 8))(v15, v23);
  sub_23C0E427C();
  v24 = v1[29];
  sub_23C0E4294();
  v25 = v1[11];
  v26 = v1[43];
  sub_23C0E4498();
  (*(void (**)(uint64_t, uint64_t))(v1[31] + 8))(v24, v26);
  (*(void (**)(uint64_t, uint64_t))(v1[9] + 8))(v22, v25);
  sub_23C0E4198();
  LOBYTE(v26) = sub_23C0E42B8();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v26)
    sub_23C0E42C4();
  v28 = v1[12];
  v27 = v1[13];
  v29 = v1[18];
  sub_23C0E448C();
  (*(void (**)(uint64_t, uint64_t))(v1[33] + 8))(v20, v1[34]);
  (*(void (**)(uint64_t, uint64_t))(v1[16] + 8))(v21, v29);
  v1[65] = v29;
  v1[66] = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v31 = v1[19];
  v32 = v1[21];
  sub_23C06E920(v28, v32, v31);
  v33 = v1[17];
  v34 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
  v34(v28, v32);
  v35 = v1[15];
  v36 = v1[45];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1[8] + 16))(v8, v35, v36);
  v1[65] = v8;
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v38 = v1[20];
  v37(v38, v31, v32);
  v1[66] = v38;
  v1[63] = v36;
  v1[64] = v32;
  v1[61] = v1[44];
  v1[62] = OpaqueTypeConformance2;
  sub_23C0DE900(v1 + 65, 2uLL, (uint64_t)(v1 + 63));
  v34(v31, v32);
  v39 = (uint64_t (*)(uint64_t, uint64_t))v1[5];
  v39(v35, v36);
  v34(v38, v32);
  return v39(v8, v36);
}

void sub_23C09FEC0(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23C09F308(v1[13], v1[14], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1, v1[8], v1[9], v1[10], v1[11], v1[12]);
}

uint64_t sub_23C09FEFC()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23C09FF48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[52];

  v18[16] = a6;
  v18[17] = a8;
  v18[6] = a4;
  v18[7] = a7;
  v18[13] = a1;
  v18[14] = a5;
  v18[5] = a3;
  v18[18] = a2;
  v18[19] = a9;
  v18[15] = a14;
  v18[11] = a13;
  v18[10] = a12;
  v18[9] = a11;
  v18[8] = a10;
  v16 = sub_23C0E41E0();
  MEMORY[0x24BDAC7A8](v16);
  v18[12] = (char *)v18 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[45] = a4;
  v18[46] = a7;
  v18[47] = a10;
  v18[48] = a11;
  v18[49] = a12;
  v18[50] = a13;
  type metadata accessor for Option();
}

uint64_t sub_23C0A0004()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t);
  _BYTE v47[80];

  swift_getTupleTypeMetadata2();
  v2 = sub_23C0E481C();
  sub_23C0E4024();
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB50);
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB58);
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B0FB60);
  swift_getTupleTypeMetadata2();
  v3 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v3);
  v4 = sub_23C0E45F4();
  v5 = sub_23C0E4024();
  v6 = sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1F8);
  v7 = sub_23C0E4024();
  v8 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v4);
  v9 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v1 - 152) = v8;
  *(_QWORD *)(v1 - 144) = v9;
  v10 = MEMORY[0x24BDED308];
  v11 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v5, v1 - 152);
  v12 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v1 - 168) = v11;
  *(_QWORD *)(v1 - 160) = v12;
  v13 = MEMORY[0x242616E9C](v10, v6, v1 - 168);
  v14 = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
  *(_QWORD *)(v1 - 184) = v13;
  *(_QWORD *)(v1 - 176) = v14;
  MEMORY[0x242616E9C](v10, v7, v1 - 184);
  v15 = sub_23C0E45DC();
  v16 = MEMORY[0x242616E9C](MEMORY[0x24BDF43B0], v15);
  *(_QWORD *)(v1 - 136) = v15;
  *(_QWORD *)(v1 - 128) = v16;
  MEMORY[0x242616E48](255, v1 - 136, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F170);
  v17 = sub_23C0E4024();
  *(_QWORD *)(v1 - 136) = v15;
  *(_QWORD *)(v1 - 128) = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v19 = sub_23C06E774(&qword_256B0F168, &qword_256B0F170, MEMORY[0x24BDEF370]);
  *(_QWORD *)(v1 - 200) = OpaqueTypeConformance2;
  *(_QWORD *)(v1 - 192) = v19;
  v20 = MEMORY[0x242616E9C](v10, v17, v1 - 200);
  v21 = sub_23C06DDD8();
  *(_QWORD *)(v1 - 136) = v17;
  *(_QWORD *)(v1 - 128) = &type metadata for FilterButtonStyle;
  *(_QWORD *)(v1 - 120) = v20;
  *(_QWORD *)(v1 - 112) = v21;
  MEMORY[0x242616E48](255, v1 - 136, MEMORY[0x24BDF22E0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F160);
  v22 = sub_23C0E4024();
  v23 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v2);
  v24 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v1 - 136) = v2;
  *(_QWORD *)(v1 - 128) = v24;
  *(_QWORD *)(v1 - 120) = v22;
  *(_QWORD *)(v1 - 112) = v23;
  *(_QWORD *)(v1 - 104) = MEMORY[0x24BEE0D10];
  v25 = sub_23C0E4654();
  *(_QWORD *)(v1 - 136) = v17;
  *(_QWORD *)(v1 - 128) = &type metadata for FilterButtonStyle;
  *(_QWORD *)(v1 - 120) = v20;
  *(_QWORD *)(v1 - 112) = v21;
  v26 = swift_getOpaqueTypeConformance2();
  v27 = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
  *(_QWORD *)(v1 - 216) = v26;
  *(_QWORD *)(v1 - 208) = v27;
  *(_QWORD *)(v1 - 224) = MEMORY[0x242616E9C](v10, v22, v1 - 216);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v25, v1 - 224);
  v28 = sub_23C0E46A8();
  v0[4] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v30 = &v47[-v29];
  v31 = MEMORY[0x242616E9C](MEMORY[0x24BDF5198], v28);
  v0[2] = v31;
  *(_QWORD *)(v1 - 136) = v28;
  *(_QWORD *)(v1 - 128) = v31;
  v32 = MEMORY[0x242616E48](0, v1 - 136, MEMORY[0x24BDF2D58], 0);
  v0[3] = *(_QWORD *)(v32 - 8);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v35 = &v47[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v33);
  v37 = &v47[-v36];
  swift_bridgeObjectRetain();
  v0[1] = sub_23C0E4114();
  v38 = v0[6];
  v0[22] = v0[5];
  v0[23] = v38;
  v39 = v0[16];
  v0[24] = v0[14];
  v0[25] = v39;
  v40 = v0[17];
  v0[26] = v0[7];
  v0[27] = v40;
  v41 = v0[9];
  v0[28] = v0[8];
  v0[29] = v41;
  v42 = v0[11];
  v0[30] = v0[10];
  v0[31] = v42;
  v43 = v0[18];
  v0[32] = v0[15];
  v0[33] = v43;
  sub_23C06B998();
  sub_23C0E469C();
  v44 = v0[2];
  sub_23C0E4480();
  (*(void (**)(_BYTE *, uint64_t))(v0[4] + 8))(v30, v28);
  *(_QWORD *)(v1 - 136) = v28;
  *(_QWORD *)(v1 - 128) = v44;
  swift_getOpaqueTypeConformance2();
  sub_23C06E920((uint64_t)v35, v32, (uint64_t)v37);
  v45 = *(void (**)(_BYTE *, uint64_t))(v0[3] + 8);
  v45(v35, v32);
  sub_23C06B980((uint64_t)v37, v32, v0[19]);
  return ((uint64_t (*)(_BYTE *, uint64_t))v45)(v37, v32);
}

void sub_23C0A0594()
{
  type metadata accessor for FilterTrainerSectionView();
}

void sub_23C0A0630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(a1 - 8);
  v9[20] = v17;
  v9[17] = a1;
  v9[15] = *(_QWORD *)(v17 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[26] = (char *)&a9 - v18;
  *(_QWORD *)(v16 - 176) = v14;
  *(_QWORD *)(v16 - 168) = v11;
  *(_QWORD *)(v16 - 160) = v10;
  *(_QWORD *)(v16 - 152) = v15;
  *(_QWORD *)(v16 - 144) = v13;
  *(_QWORD *)(v16 - 136) = v12;
  type metadata accessor for Option();
}

uint64_t sub_23C0A0684()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v63;
  _BYTE v64[80];

  v0[10] = swift_getTupleTypeMetadata2();
  v0[18] = sub_23C0E481C();
  sub_23C0E4024();
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB50);
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB58);
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B0FB60);
  swift_getTupleTypeMetadata2();
  v4 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v4);
  v5 = sub_23C0E45F4();
  v6 = sub_23C0E4024();
  v7 = sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1F8);
  v8 = sub_23C0E4024();
  v9 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v5);
  v10 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v3 - 192) = v9;
  *(_QWORD *)(v3 - 184) = v10;
  v11 = MEMORY[0x24BDED308];
  v12 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v6, v3 - 192);
  v13 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v3 - 208) = v12;
  *(_QWORD *)(v3 - 200) = v13;
  v14 = MEMORY[0x242616E9C](v11, v7, v3 - 208);
  v15 = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
  *(_QWORD *)(v3 - 224) = v14;
  *(_QWORD *)(v3 - 216) = v15;
  MEMORY[0x242616E9C](v11, v8, v3 - 224);
  v16 = sub_23C0E45DC();
  v17 = MEMORY[0x242616E9C](MEMORY[0x24BDF43B0], v16);
  *(_QWORD *)(v3 - 176) = v16;
  *(_QWORD *)(v3 - 168) = v17;
  MEMORY[0x242616E48](255, v3 - 176, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F170);
  v18 = sub_23C0E4024();
  *(_QWORD *)(v3 - 176) = v16;
  *(_QWORD *)(v3 - 168) = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v20 = sub_23C06E774(&qword_256B0F168, &qword_256B0F170, MEMORY[0x24BDEF370]);
  *(_QWORD *)(v3 - 240) = OpaqueTypeConformance2;
  *(_QWORD *)(v3 - 232) = v20;
  v0[6] = v18;
  v21 = MEMORY[0x242616E9C](v11, v18, v3 - 240);
  v0[5] = v21;
  v22 = sub_23C06DDD8();
  v0[4] = v22;
  *(_QWORD *)(v3 - 176) = v18;
  *(_QWORD *)(v3 - 168) = &type metadata for FilterButtonStyle;
  *(_QWORD *)(v3 - 160) = v21;
  *(_QWORD *)(v3 - 152) = v22;
  MEMORY[0x242616E48](255, v3 - 176, MEMORY[0x24BDF22E0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F160);
  v23 = sub_23C0E4024();
  v0[2] = v23;
  v24 = v0[18];
  v25 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v24);
  v0[7] = v25;
  v26 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v3 - 176) = v24;
  *(_QWORD *)(v3 - 168) = v26;
  *(_QWORD *)(v3 - 160) = v23;
  *(_QWORD *)(v3 - 152) = v25;
  *(_QWORD *)(v3 - 144) = MEMORY[0x24BEE0D10];
  v27 = sub_23C0E4654();
  v28 = *(_QWORD *)(v27 - 8);
  v0[8] = v27;
  v0[9] = v28;
  v29 = MEMORY[0x24BDAC7A8](v27);
  v0[1] = &v64[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v29);
  v0[3] = &v64[-v31];
  *(_QWORD *)(v3 - 248) = *(_QWORD *)(v2 + *(int *)(v1 + 128));
  v32 = sub_23C0E481C();
  MEMORY[0x242616E9C](MEMORY[0x24BEE12C8], v32);
  sub_23C0E47E0();
  *(_QWORD *)(v3 - 248) = *(_QWORD *)(v3 - 176);
  v33 = sub_23C0E4918();
  MEMORY[0x242616E9C](MEMORY[0x24BEE2FC0], v33);
  *(_QWORD *)(v3 - 248) = sub_23C0E4828();
  v34 = v0[19];
  v35 = v0[27];
  v0[28] = v34;
  v0[29] = v35;
  v36 = v0[12];
  v37 = v0[13];
  v38 = v0[21];
  v39 = v0[22];
  v0[30] = v37;
  v0[31] = v38;
  v0[32] = v0[23];
  v0[33] = v39;
  v40 = v0[25];
  v0[34] = v36;
  v0[35] = v40;
  v41 = v0[11];
  v0[36] = v0[24];
  v0[37] = v41;
  v42 = v0[14];
  v0[38] = v42;
  v0[10] = swift_getKeyPath();
  v43 = v0[20];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v43 + 16))(v0[26], *v0, v0[17]);
  v44 = (*(unsigned __int8 *)(v43 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v45 = (char *)swift_allocObject();
  v46 = v0[26];
  v47 = v0[27];
  *((_QWORD *)v45 + 2) = v34;
  *((_QWORD *)v45 + 3) = v47;
  *((_QWORD *)v45 + 4) = v37;
  *((_QWORD *)v45 + 5) = v38;
  v48 = v0[23];
  *((_QWORD *)v45 + 6) = v48;
  *((_QWORD *)v45 + 7) = v39;
  v50 = v0[24];
  v49 = v0[25];
  *((_QWORD *)v45 + 8) = v36;
  *((_QWORD *)v45 + 9) = v49;
  *((_QWORD *)v45 + 10) = v50;
  *((_QWORD *)v45 + 11) = v41;
  *((_QWORD *)v45 + 12) = v42;
  (*(void (**)(char *, uint64_t, _QWORD))(v0[20] + 32))(&v45[v44], v46, v0[17]);
  v51 = (_QWORD *)swift_allocObject();
  v52 = v0[27];
  v51[2] = v0[19];
  v51[3] = v52;
  v53 = v0[21];
  v51[4] = v37;
  v51[5] = v53;
  v54 = v0[22];
  v51[6] = v48;
  v51[7] = v54;
  v51[8] = v36;
  v51[9] = v49;
  v51[10] = v50;
  v51[11] = v41;
  v51[12] = v42;
  v51[13] = sub_23C0A38A0;
  v51[14] = v45;
  *(_QWORD *)(v3 - 176) = v0[6];
  v55 = v0[5];
  *(_QWORD *)(v3 - 168) = &type metadata for FilterButtonStyle;
  *(_QWORD *)(v3 - 160) = v55;
  *(_QWORD *)(v3 - 152) = v0[4];
  v56 = swift_getOpaqueTypeConformance2();
  v57 = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
  v0[41] = v56;
  v0[42] = v57;
  v63 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v0[2], v0 + 41);
  v58 = v0[1];
  sub_23C0E463C();
  v0[40] = v63;
  v59 = v0[8];
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v59, v0 + 40);
  v60 = v0[3];
  sub_23C06E920(v58, v59, v60);
  v61 = *(void (**)(uint64_t, uint64_t))(v0[9] + 8);
  v61(v58, v59);
  sub_23C06B980(v60, v59, v0[16]);
  return ((uint64_t (*)(uint64_t, uint64_t))v61)(v60, v59);
}

void sub_23C0A0CD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[33];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v30 = a6;
  v31 = a5;
  v27 = a3;
  v28 = a2;
  v19[30] = a1;
  v21 = a8;
  v29 = a14;
  v22 = a9;
  v16 = sub_23C0E4630();
  MEMORY[0x24BDAC7A8](v16);
  v19[31] = (char *)v19 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F198);
  MEMORY[0x24BDAC7A8](v20);
  v19[32] = (char *)v19 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a10;
  v25 = a4;
  v32 = a4;
  v33 = a7;
  v23 = a7;
  v34 = a10;
  v35 = a11;
  v19[28] = a12;
  v19[29] = a11;
  v36 = a12;
  v37 = a13;
  v26 = a13;
  type metadata accessor for Option();
}

void sub_23C0A0DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9[46] = a1;
  v19 = *(_QWORD *)(a1 - 8);
  v9[37] = v19;
  v9[27] = *(_QWORD *)(v19 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v9[42] = (char *)&a9 - v20;
  *(_QWORD *)(v18 - 176) = v10;
  *(_QWORD *)(v18 - 168) = v14;
  v21 = v9[48];
  *(_QWORD *)(v18 - 160) = v9[49];
  *(_QWORD *)(v18 - 152) = v21;
  *(_QWORD *)(v18 - 144) = v16;
  *(_QWORD *)(v18 - 136) = v12;
  *(_QWORD *)(v18 - 128) = v17;
  *(_QWORD *)(v18 - 120) = v15;
  *(_QWORD *)(v18 - 112) = v11;
  *(_QWORD *)(v18 - 104) = v13;
  *(_QWORD *)(v18 - 96) = v9[47];
  type metadata accessor for FilterTrainerSectionView();
}

void sub_23C0A0E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t OpaqueTypeConformance2;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v13 = *(_QWORD *)(a1 - 8);
  v9[36] = v13;
  v9[2] = a1;
  v9[26] = *(_QWORD *)(v13 + 64);
  MEMORY[0x24BDAC7A8](a1);
  v15 = (char *)&a9 - v14;
  v9[3] = (char *)&a9 - v14;
  v16 = v10;
  v9[35] = v10;
  sub_23C0E4024();
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB50);
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB58);
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B0FB60);
  swift_getTupleTypeMetadata2();
  v17 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v17);
  v18 = sub_23C0E45F4();
  v19 = sub_23C0E4024();
  v20 = sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1F8);
  v21 = sub_23C0E4024();
  v22 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v18);
  v23 = MEMORY[0x24BDECC60];
  *(_QWORD *)(v11 - 192) = v22;
  *(_QWORD *)(v11 - 184) = v23;
  v24 = MEMORY[0x24BDED308];
  v25 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v19, v11 - 192);
  v26 = MEMORY[0x24BDEBEE0];
  *(_QWORD *)(v11 - 208) = v25;
  *(_QWORD *)(v11 - 200) = v26;
  v27 = v24;
  v28 = MEMORY[0x242616E9C](v24, v20, v11 - 208);
  v29 = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
  *(_QWORD *)(v11 - 224) = v28;
  *(_QWORD *)(v11 - 216) = v29;
  v30 = v27;
  v9[10] = v21;
  v9[11] = MEMORY[0x242616E9C](v27, v21, v11 - 224);
  v31 = sub_23C0E45DC();
  v9[19] = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v9[8] = (char *)&a9 - v32;
  v33 = MEMORY[0x242616E9C](MEMORY[0x24BDF43B0], v31);
  *(_QWORD *)(v11 - 176) = v31;
  *(_QWORD *)(v11 - 168) = v33;
  v9[4] = v33;
  v9[5] = v31;
  v34 = MEMORY[0x242616E48](0, v11 - 176, MEMORY[0x24BDF30F0], 0);
  v9[25] = *(_QWORD *)(v34 - 8);
  v9[23] = v34;
  MEMORY[0x24BDAC7A8](v34);
  v9[6] = (char *)&a9 - v35;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F170);
  v36 = sub_23C0E4024();
  v9[24] = *(_QWORD *)(v36 - 8);
  v9[16] = v36;
  MEMORY[0x24BDAC7A8](v36);
  v9[18] = (char *)&a9 - v37;
  *(_QWORD *)(v11 - 176) = v31;
  *(_QWORD *)(v11 - 168) = v33;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v9[12] = OpaqueTypeConformance2;
  v39 = sub_23C06E774(&qword_256B0F168, &qword_256B0F170, MEMORY[0x24BDEF370]);
  *(_QWORD *)(v11 - 240) = OpaqueTypeConformance2;
  *(_QWORD *)(v11 - 232) = v39;
  v40 = MEMORY[0x242616E9C](v30, v36, v11 - 240);
  v9[15] = v40;
  v41 = sub_23C06DDD8();
  v9[14] = v41;
  *(_QWORD *)(v11 - 176) = v36;
  *(_QWORD *)(v11 - 168) = &type metadata for FilterButtonStyle;
  *(_QWORD *)(v11 - 160) = v40;
  *(_QWORD *)(v11 - 152) = v41;
  v42 = MEMORY[0x242616E48](0, v11 - 176, MEMORY[0x24BDF22E0], 0);
  v9[21] = *(_QWORD *)(v42 - 8);
  v9[13] = v42;
  MEMORY[0x24BDAC7A8](v42);
  v9[7] = (char *)&a9 - v43;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F160);
  v44 = sub_23C0E4024();
  v9[20] = v44;
  v9[22] = *(_QWORD *)(v44 - 8);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v9[9] = (char *)&a9 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v9[17] = (char *)&a9 - v47;
  v48 = v9[36];
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 16))(v15, v9[44], a1);
  v49 = v9[37];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v49 + 16))(v9[42], v9[45], v9[46]);
  v50 = (*(unsigned __int8 *)(v48 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  v9[1] = v50;
  v51 = (v9[26] + *(unsigned __int8 *)(v49 + 80) + v50) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  v52 = (v9[27] + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9[26] = v51;
  v9[27] = v52;
  v53 = (char *)swift_allocObject();
  v55 = v9[40];
  v54 = v9[41];
  *((_QWORD *)v53 + 2) = v16;
  *((_QWORD *)v53 + 3) = v54;
  v57 = v9[48];
  v56 = v9[49];
  *((_QWORD *)v53 + 4) = v56;
  *((_QWORD *)v53 + 5) = v57;
  v59 = v9[38];
  v58 = v9[39];
  *((_QWORD *)v53 + 6) = v58;
  *((_QWORD *)v53 + 7) = v59;
  v61 = v9[28];
  v60 = v9[29];
  *((_QWORD *)v53 + 8) = v55;
  *((_QWORD *)v53 + 9) = v60;
  v62 = v9[43];
  *((_QWORD *)v53 + 10) = v61;
  *((_QWORD *)v53 + 11) = v62;
  *((_QWORD *)v53 + 12) = v9[47];
  (*(void (**)(char *, _QWORD, _QWORD))(v9[36] + 32))(&v53[v9[1]], v9[3], v9[2]);
  (*(void (**)(char *, _QWORD, _QWORD))(v9[37] + 32))(&v53[v9[26]], v9[42], v9[46]);
  *(_QWORD *)&v53[v9[27]] = v9[30];
  v9[52] = v9[35];
  v9[53] = v54;
  v9[54] = v56;
  v9[55] = v57;
  v9[56] = v58;
  v9[57] = v59;
  v9[58] = v55;
  v9[59] = v60;
  v64 = v9[43];
  v63 = v9[44];
  v9[60] = v61;
  v9[61] = v64;
  v65 = v9[45];
  v9[62] = v9[47];
  v9[63] = v65;
  v9[64] = v63;
  v66 = v9[8];
  sub_23C0E45D0();
  sub_23C0E42B8();
  sub_23C0E4690();
  v67 = v9[5];
  sub_23C0E44B0();
  (*(void (**)(uint64_t, uint64_t))(v9[19] + 8))(v66, v67);
  v68 = *MEMORY[0x24BDEEB68];
  v69 = sub_23C0E4120();
  (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 104))(v9[31], v68, v69);
  sub_23C072AB8();
}

uint64_t sub_23C0A1454(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);

  v6 = v1[32];
  v7 = MEMORY[0x24BDF48E8];
  sub_23C08FC18(v2, v6, (uint64_t (*)(_QWORD))MEMORY[0x24BDF48E8]);
  *(_QWORD *)(v6 + *(int *)(v1[33] + 36)) = a1;
  sub_23C08FC60(v2, (uint64_t (*)(_QWORD))v7);
  sub_23C0E4684();
  sub_23C0A41A8();
  v8 = v1[18];
  v9 = v1[23];
  sub_23C0E43FC();
  sub_23C06E834(v6, &qword_256B0F198);
  (*(void (**)(uint64_t, uint64_t))(v1[25] + 8))(v3, v9);
  v10 = v1[7];
  v12 = v1[15];
  v11 = v1[16];
  v13 = v1[14];
  sub_23C0E4420();
  (*(void (**)(uint64_t, uint64_t))(v1[24] + 8))(v8, v11);
  *(_QWORD *)(v4 - 176) = v11;
  *(_QWORD *)(v4 - 168) = &type metadata for FilterButtonStyle;
  *(_QWORD *)(v4 - 160) = v12;
  *(_QWORD *)(v4 - 152) = v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v15 = v1[9];
  v16 = v1[13];
  sub_23C0E4504();
  (*(void (**)(uint64_t, uint64_t))(v1[21] + 8))(v10, v16);
  v17 = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
  *(_QWORD *)(v4 - 256) = OpaqueTypeConformance2;
  *(_QWORD *)(v4 - 248) = v17;
  v18 = v1[20];
  MEMORY[0x242616E9C](MEMORY[0x24BDED308], v18, v4 - 256);
  v19 = v1[17];
  v20 = v15;
  sub_23C06E920(v15, v18, v19);
  v21 = *(void (**)(uint64_t, uint64_t))(v1[22] + 8);
  v21(v20, v18);
  sub_23C06B980(v19, v18, v1[34]);
  return ((uint64_t (*)(uint64_t, uint64_t))v21)(v19, v18);
}

uint64_t sub_23C0A164C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  _QWORD v70[2];
  _QWORD v71[2];

  v54 = a8;
  v52 = a7;
  v50 = a6;
  v48 = a5;
  v46 = a4;
  v42 = a3;
  v53 = a2;
  v51 = a1;
  v57 = a9;
  v47 = a12;
  v45 = a11;
  v44 = a10;
  v56 = sub_23C0E4630();
  MEMORY[0x24BDAC7A8](v56);
  v55 = (char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C0E4024();
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB50);
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB58);
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B0FB60);
  swift_getTupleTypeMetadata2();
  v13 = sub_23C0E46B4();
  v39[1] = MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v13);
  v14 = sub_23C0E45F4();
  v40 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v39 - v15;
  v17 = sub_23C0E4024();
  v41 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)v39 - v18;
  v20 = sub_23C0E4024();
  v43 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)v39 - v21;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1F8);
  v23 = sub_23C0E4024();
  v49 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v24);
  v28 = (char *)v39 - v27;
  sub_23C0E4114();
  v58 = v42;
  v59 = v46;
  v60 = v48;
  v61 = v50;
  v62 = v52;
  v63 = v54;
  v64 = v44;
  v65 = v45;
  v66 = v47;
  v67 = v51;
  v68 = v53;
  sub_23C0E45E8();
  v29 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v14);
  sub_23C0E44EC();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v14);
  sub_23C0E4684();
  v71[0] = v29;
  v71[1] = MEMORY[0x24BDECC60];
  v30 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v17, v71);
  sub_23C0E44D4();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v19, v17);
  v31 = *MEMORY[0x24BDEEB68];
  v32 = sub_23C0E4120();
  v33 = (uint64_t)v55;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 104))(v55, v31, v32);
  v70[0] = v30;
  v70[1] = MEMORY[0x24BDEBEE0];
  v34 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v20, v70);
  v35 = MEMORY[0x24BDF48E8];
  sub_23C0683A4(&qword_256B0FC08, (uint64_t (*)(uint64_t))MEMORY[0x24BDF48E8], MEMORY[0x24BDF48D8]);
  sub_23C0E4438();
  sub_23C08FC60(v33, (uint64_t (*)(_QWORD))v35);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v22, v20);
  v36 = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
  v69[0] = v34;
  v69[1] = v36;
  MEMORY[0x242616E9C](MEMORY[0x24BDED308], v23, v69);
  sub_23C06E920((uint64_t)v26, v23, (uint64_t)v28);
  v37 = *(void (**)(char *, uint64_t))(v49 + 8);
  v37(v26, v23);
  sub_23C06B980((uint64_t)v28, v23, v57);
  return ((uint64_t (*)(char *, uint64_t))v37)(v28, v23);
}

void sub_23C0A1BE8(uint64_t a1@<X0>, void (**a2)(uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, __int128 a12, uint64_t a13)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  __int128 v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  void (**v116)(uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  int64_t v138;
  uint64_t v139;
  _QWORD v140[2];
  _QWORD v141[2];
  _QWORD v142[75];
  _QWORD v143[2];
  _QWORD v144[2];
  _QWORD v145[3];

  v135 = a6;
  v136 = a7;
  v126 = a5;
  v127 = a1;
  v128 = a3;
  v116 = a2;
  v121 = a9;
  v124 = a13;
  v123 = a12;
  v122 = a11;
  v125 = a10;
  v103 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC10);
  v16 = MEMORY[0x24BDAC7A8](v103);
  v104 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = *(_QWORD *)(a3 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v106 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23C0E4024();
  v109 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v107 = (char *)&v101 - v20;
  v134 = v21;
  v22 = sub_23C0E4024();
  v111 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v110 = (char *)&v101 - v23;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB50);
  v133 = v22;
  v24 = sub_23C0E4024();
  v112 = *(_QWORD *)(v24 - 8);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v114 = (char *)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v113 = (uint64_t)&v101 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FB58);
  MEMORY[0x24BDAC7A8](v28);
  v102 = (uint64_t *)((char *)&v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC18);
  MEMORY[0x24BDAC7A8](v30);
  v115 = (char *)&v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for Artwork();
  v32 = *(_QWORD *)(v139 - 8);
  v33 = MEMORY[0x24BDAC7A8](v139);
  v35 = (char *)&v101 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x24BDAC7A8](v33);
  v38 = (char *)&v101 - v37;
  MEMORY[0x24BDAC7A8](v36);
  v105 = (uint64_t)&v101 - v39;
  v132 = v24;
  v117 = v28;
  v120 = sub_23C0E418C();
  v118 = *(_QWORD *)(v120 - 8);
  v40 = MEMORY[0x24BDAC7A8](v120);
  v119 = (char *)&v101 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v129 = a4;
  v130 = (char *)&v101 - v42;
  v43 = *(uint64_t (**)(uint64_t, uint64_t))(a8 + 8);
  v131 = a8;
  v44 = v43(a4, a8);
  v45 = *(_QWORD *)(v44 + 56);
  v137 = (_QWORD *)(v44 + 56);
  v46 = 1 << *(_BYTE *)(v44 + 32);
  v47 = -1;
  if (v46 < 64)
    v47 = ~(-1 << v46);
  v48 = v47 & v45;
  v138 = (unint64_t)(v46 + 63) >> 6;
  swift_bridgeObjectRetain();
  if (v48)
  {
    v49 = __clz(__rbit64(v48));
    goto LABEL_22;
  }
  if (v138 > 1)
  {
    v50 = v137[1];
    v51 = 1;
    if (v50)
      goto LABEL_21;
    v51 = 2;
    if (v138 <= 2)
      goto LABEL_23;
    v50 = v137[2];
    if (v50)
      goto LABEL_21;
    v51 = 3;
    if (v138 <= 3)
      goto LABEL_23;
    v50 = v137[3];
    if (v50)
      goto LABEL_21;
    v51 = 4;
    if (v138 <= 4)
      goto LABEL_23;
    v50 = v137[4];
    if (v50)
      goto LABEL_21;
    v51 = 5;
    if (v138 <= 5)
      goto LABEL_23;
    v50 = v137[5];
    if (v50)
    {
LABEL_21:
      v49 = __clz(__rbit64(v50)) + (v51 << 6);
LABEL_22:
      sub_23C08FC18(*(_QWORD *)(v44 + 48) + *(_QWORD *)(v32 + 72) * v49, (uint64_t)v38, (uint64_t (*)(_QWORD))type metadata accessor for Artwork);
      sub_23C06831C((uint64_t)v38, (uint64_t)v35);
      __asm { BR              X9 }
    }
    v52 = 6;
    if (v138 > 6)
    {
      v50 = v137[6];
      if (v50)
      {
        v51 = 6;
        goto LABEL_21;
      }
      while (1)
      {
        v51 = v52 + 1;
        if (__OFADD__(v52, 1))
        {
          __break(1u);
          JUMPOUT(0x23C0A2A34);
        }
        if (v51 >= v138)
          break;
        v50 = v137[v51];
        ++v52;
        if (v50)
          goto LABEL_21;
      }
    }
  }
LABEL_23:
  swift_release();
  v54 = v134;
  v53 = v135;
  v55 = v139;
  v56 = (uint64_t)v115;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v115, 1, 1, v139);
  swift_bridgeObjectRelease();
  v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v56, 1, v55);
  v58 = MEMORY[0x24BDEDBB8];
  v59 = MEMORY[0x24BDEEC40];
  if (v57 == 1)
  {
    sub_23C06E834(v56, &qword_256B0FC18);
    v60 = sub_23C0E4684();
    v61 = (uint64_t)v102;
    *v102 = v60;
    *(_QWORD *)(v61 + 8) = v62;
    v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC20);
    *((_QWORD *)&v100 + 1) = v122;
    *(_QWORD *)&v100 = v125;
    v64 = v129;
    v65 = v131;
    sub_23C0A2A5C(v129, v131, v61 + *(int *)(v63 + 44), v100, v123);
    v145[0] = v53;
    v145[1] = v58;
    v66 = MEMORY[0x24BDED308];
    v144[0] = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v54, v145);
    v144[1] = v59;
    v67 = MEMORY[0x242616E9C](v66, v133, v144);
    v68 = sub_23C06E774(&qword_256B0FC28, &qword_256B0FB50, MEMORY[0x24BDEB950]);
    v143[0] = v67;
    v143[1] = v68;
    v69 = v132;
    MEMORY[0x242616E9C](v66, v132, v143);
    sub_23C06E774(&qword_256B0FC30, &qword_256B0FB58, MEMORY[0x24BDF4750]);
    sub_23C0DEB78(v61, v69, v117);
    sub_23C06E834(v61, &qword_256B0FB58);
  }
  else
  {
    v70 = v105;
    sub_23C06831C(v56, v105);
    v71 = *v116;
    v72 = *MEMORY[0x24BE35118];
    v73 = sub_23C0E3F10();
    v74 = v55;
    v75 = (uint64_t)v104;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 104))(v104, v72, v73);
    swift_storeEnumTagMultiPayload();
    v76 = v106;
    v71(v70, v75, v70 + *(int *)(v74 + 24));
    sub_23C06E834(v75, &qword_256B0FC10);
    sub_23C0E4684();
    v77 = v128;
    v78 = v107;
    sub_23C0E44E0();
    (*(void (**)(char *, uint64_t))(v108 + 8))(v76, v77);
    v142[0] = v53;
    v142[1] = MEMORY[0x24BDEDBB8];
    v79 = MEMORY[0x24BDED308];
    v80 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v54, v142);
    v81 = v110;
    sub_23C0E442C();
    (*(void (**)(char *, uint64_t))(v109 + 8))(v78, v54);
    v141[0] = v80;
    v141[1] = MEMORY[0x24BDEEC40];
    v82 = v133;
    v83 = MEMORY[0x242616E9C](v79, v133, v141);
    sub_23C0A4484();
    v84 = (uint64_t)v114;
    sub_23C0E4528();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v81, v82);
    v85 = sub_23C06E774(&qword_256B0FC28, &qword_256B0FB50, MEMORY[0x24BDEB950]);
    v140[0] = v83;
    v140[1] = v85;
    v86 = v132;
    MEMORY[0x242616E9C](v79, v132, v140);
    v87 = v113;
    sub_23C06E920(v84, v86, v113);
    v88 = *(void (**)(uint64_t, uint64_t))(v112 + 8);
    v88(v84, v86);
    sub_23C06B980(v87, v86, v84);
    sub_23C06E774(&qword_256B0FC30, &qword_256B0FB58, MEMORY[0x24BDF4750]);
    sub_23C0DEAB4(v84, v86);
    v88(v84, v86);
    v88(v87, v86);
    sub_23C08FC60(v70, (uint64_t (*)(_QWORD))type metadata accessor for Artwork);
    v65 = v131;
    v64 = v129;
  }
  v142[56] = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 24))(v64, v65);
  v142[57] = v89;
  sub_23C06DB6C();
  v90 = sub_23C0E43CC();
  v92 = v91;
  v94 = v93 & 1;
  sub_23C0E4378();
  v95 = sub_23C0E43B4();
  v97 = v96;
  v99 = v98;
  swift_release();
  sub_23C06DBB0(v90, v92, v94);
  swift_bridgeObjectRelease();
  sub_23C0E43A8();
  sub_23C06DBB0(v95, v97, v99 & 1);
  swift_bridgeObjectRelease();
  sub_23C072D18();
}

uint64_t sub_23C0A2A5C@<X0>(uint64_t a1@<X3>, uint64_t a2@<X7>, uint64_t a3@<X8>, __int128 a4, __int128 a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD v57[2];
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v71 = a3;
  v57[1] = a4;
  v57[0] = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC48);
  MEMORY[0x24BDAC7A8](v7);
  v70 = (char *)v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23C0E4018();
  v59 = *(_QWORD *)(v9 - 8);
  v60 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC50);
  v63 = *(_QWORD *)(v12 - 8);
  v64 = v12;
  MEMORY[0x24BDAC7A8](v12);
  v58 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC58);
  MEMORY[0x24BDAC7A8](v62);
  v61 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC60);
  v68 = *(_QWORD *)(v15 - 8);
  v69 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v65 = (char *)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC68);
  v17 = MEMORY[0x24BDAC7A8](v67);
  v19 = (char *)v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v66 = (uint64_t)v57 - v20;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 24))(a1, a2);
  v23 = sub_23C0A4290(v21, v22);
  v25 = v24;
  swift_bridgeObjectRelease();
  v72 = v23;
  v73 = v25;
  sub_23C06DB6C();
  v26 = sub_23C0E43CC();
  v28 = v27;
  v30 = v29 & 1;
  v31 = sub_23C0E43A8();
  v33 = v32;
  v35 = v34;
  v37 = v36;
  sub_23C06DBB0(v26, v28, v30);
  swift_bridgeObjectRelease();
  v72 = v31;
  v73 = v33;
  v74 = v35 & 1;
  v75 = v37;
  v39 = v59;
  v38 = v60;
  (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v11, *MEMORY[0x24BDECF00], v60);
  v40 = v58;
  sub_23C0E4468();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v11, v38);
  sub_23C06DBB0(v72, v73, v74);
  swift_bridgeObjectRelease();
  v41 = sub_23C0E4378();
  KeyPath = swift_getKeyPath();
  v44 = v63;
  v43 = v64;
  v45 = (uint64_t)v61;
  (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v61, v40, v64);
  v46 = (uint64_t *)(v45 + *(int *)(v62 + 36));
  *v46 = KeyPath;
  v46[1] = v41;
  (*(void (**)(char *, uint64_t))(v44 + 8))(v40, v43);
  v47 = *MEMORY[0x24BDF1668];
  v48 = sub_23C0E4348();
  v49 = *(_QWORD *)(v48 - 8);
  v50 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v49 + 104))(v70, v47, v48);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v50, 0, 1, v48);
  sub_23C0A44D0();
  v51 = v65;
  sub_23C0E4408();
  sub_23C06E834(v50, &qword_256B0FC48);
  sub_23C06E834(v45, &qword_256B0FC58);
  LODWORD(v47) = sub_23C0E4204();
  v53 = v68;
  v52 = v69;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v19, v51, v69);
  *(_DWORD *)&v19[*(int *)(v67 + 36)] = v47;
  (*(void (**)(char *, uint64_t))(v53 + 8))(v51, v52);
  v54 = v66;
  sub_23C06E7B4((uint64_t)v19, v66, &qword_256B0FC68);
  LODWORD(v47) = sub_23C0E4210();
  sub_23C0A4578(v54, (uint64_t)v19);
  v55 = v71;
  sub_23C0A4578((uint64_t)v19, v71);
  *(_DWORD *)(v55 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC88) + 48)) = v47;
  sub_23C06E834(v54, &qword_256B0FC68);
  return sub_23C06E834((uint64_t)v19, &qword_256B0FC68);
}

void sub_23C0A2F24()
{
  unint64_t v0;

  sub_23C06D600();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_23C0A2FC4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0A2FD0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 108)], a2, v8);
  }
}

uint64_t sub_23C0A3050()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23C0A305C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 108)], a2, a2, v7);
  }
  return result;
}

void sub_23C0A30D4()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0A311C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  _QWORD v31[2];
  _QWORD v32[2];
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  _QWORD v38[2];
  uint64_t v39;
  ValueMetadata *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;

  swift_getTupleTypeMetadata2();
  v0 = sub_23C0E481C();
  sub_23C0E4024();
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB50);
  sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FB58);
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B0FB60);
  swift_getTupleTypeMetadata2();
  v1 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v1);
  v2 = sub_23C0E45F4();
  v3 = sub_23C0E4024();
  v4 = sub_23C0E4024();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F1F8);
  v5 = sub_23C0E4024();
  v38[0] = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v2);
  v38[1] = MEMORY[0x24BDECC60];
  v6 = MEMORY[0x24BDED308];
  v37[0] = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v3, v38);
  v37[1] = MEMORY[0x24BDEBEE0];
  v36[0] = MEMORY[0x242616E9C](v6, v4, v37);
  v36[1] = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
  MEMORY[0x242616E9C](v6, v5, v36);
  v7 = sub_23C0E45DC();
  v8 = MEMORY[0x242616E9C](MEMORY[0x24BDF43B0], v7);
  v39 = v7;
  v40 = (ValueMetadata *)v8;
  MEMORY[0x242616E48](255, &v39, MEMORY[0x24BDF30F0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F170);
  v9 = sub_23C0E4024();
  v39 = v7;
  v40 = (ValueMetadata *)v8;
  v35[0] = swift_getOpaqueTypeConformance2();
  v35[1] = sub_23C06E774(&qword_256B0F168, &qword_256B0F170, MEMORY[0x24BDEF370]);
  v10 = MEMORY[0x242616E9C](v6, v9, v35);
  v11 = sub_23C06DDD8();
  v39 = v9;
  v40 = &type metadata for FilterButtonStyle;
  v41 = v10;
  v42 = v11;
  MEMORY[0x242616E48](255, &v39, MEMORY[0x24BDF22E0], 0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F160);
  v12 = sub_23C0E4024();
  v13 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v0);
  v39 = v0;
  v40 = (ValueMetadata *)MEMORY[0x24BEE0D00];
  v41 = v12;
  v42 = v13;
  v43 = MEMORY[0x24BEE0D10];
  v14 = sub_23C0E4654();
  v39 = v9;
  v40 = &type metadata for FilterButtonStyle;
  v41 = v10;
  v42 = v11;
  v34[0] = swift_getOpaqueTypeConformance2();
  v34[1] = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
  v33 = MEMORY[0x242616E9C](v6, v12, v34);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v14, &v33);
  v15 = sub_23C0E46A8();
  v16 = MEMORY[0x242616E9C](MEMORY[0x24BDF5198], v15);
  v39 = v15;
  v40 = (ValueMetadata *)v16;
  MEMORY[0x242616E48](255, &v39, MEMORY[0x24BDF2D58], 0);
  v39 = v15;
  v40 = (ValueMetadata *)v16;
  swift_getOpaqueTypeConformance2();
  v17 = sub_23C0E3FA0();
  v18 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v17);
  v39 = v17;
  v40 = (ValueMetadata *)v18;
  v19 = MEMORY[0x242616E48](255, &v39, MEMORY[0x24BDF29F8], 0);
  v20 = sub_23C0E42A0();
  v39 = v17;
  v40 = (ValueMetadata *)v18;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v39 = v19;
  v40 = (ValueMetadata *)v20;
  v22 = MEMORY[0x24BDF10F0];
  v41 = OpaqueTypeConformance2;
  v42 = MEMORY[0x24BDF10F0];
  v23 = MEMORY[0x242616E48](255, &v39, MEMORY[0x24BDF3000], 0);
  v39 = v19;
  v40 = (ValueMetadata *)v20;
  v41 = OpaqueTypeConformance2;
  v42 = v22;
  v24 = swift_getOpaqueTypeConformance2();
  v39 = v23;
  v40 = (ValueMetadata *)v24;
  MEMORY[0x242616E48](255, &v39, MEMORY[0x24BDF2FE0], 0);
  swift_getTupleTypeMetadata2();
  v25 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v25);
  v26 = sub_23C0E4618();
  v27 = sub_23C0E4024();
  sub_23C0E4234();
  v28 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8];
  v29 = sub_23C0E4024();
  v32[0] = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v26);
  v32[1] = MEMORY[0x24BDEDB80];
  v31[0] = MEMORY[0x242616E9C](v6, v27, v32);
  v31[1] = sub_23C0683A4(qword_256B0F070, v28, MEMORY[0x24BDF02F0]);
  return MEMORY[0x242616E9C](v6, v29, v31);
}

void sub_23C0A36CC(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23C09FF48(v1[13], v1[14], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1, v1[8], v1[9], v1[10], v1[11], v1[12]);
}

void sub_23C0A3708()
{
  sub_23C0A0594();
}

uint64_t sub_23C0A374C()
{
  return 88;
}

__n128 sub_23C0A3758(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 64) = v5;
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_23C0A377C()
{
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C0A37C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  swift_release();
  v4 = v1 + ((v3 + 104) & ~v3) + *(int *)(a1 + 108);
  v5 = sub_23C0E3EB0();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23C0A38A0()
{
  type metadata accessor for FilterTrainerSectionView();
}

#error "23C0A3940: call analysis failed (funcsize=15)"

uint64_t sub_23C0A3964()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C0A3988()
{
  type metadata accessor for FilterTrainerSectionView();
}

void sub_23C0A39F8()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0A3A44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  swift_release();
  v5 = v1 + v3 + *(int *)(v2 + 108);
  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v1 + ((v3 + v9 + v4) & ~v4));
  return swift_deallocObject();
}

void sub_23C0A3B44()
{
  type metadata accessor for FilterTrainerSectionView();
}

void sub_23C0A3BAC()
{
  type metadata accessor for Option();
}

void sub_23C0A3BD8()
{
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C0A3C3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + *(int *)(a1 + 124) + v4))(v3, v1);
}

uint64_t sub_23C0A3C78()
{
  return sub_23C0A4250((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0A164C);
}

char *sub_23C0A3C84(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  _QWORD v46[4];

  v46[3] = a4;
  if (a1 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v11 = a5;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = MEMORY[0x24BEE4AF8];
  v43 = swift_allocObject();
  *(_QWORD *)(v43 + 16) = 15;
  v15 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v16 = HIBYTE(a6) & 0xF) : (v16 = v11 & 0xFFFFFFFFFFFFLL), !v16))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v15 = v11 & 0xFFFFFFFFFFFFLL;
    v30 = 7;
    if (((a6 >> 60) & ((v11 & 0x800000000000000) == 0)) != 0)
      v30 = 11;
    sub_23C0A409C(v30 | (v15 << 16), v43, a2 & 1, v14);
    swift_bridgeObjectRelease();
    v10 = *(char **)(v14 + 16);
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_38;
  }
  v38 = a1;
  v39 = v14;
  v44 = 4 * v16;
  v10 = (char *)MEMORY[0x24BEE4AF8];
  v9 = 15;
  v8 = 15;
  v17 = 15;
  while (1)
  {
    v46[0] = sub_23C0E47C8();
    v46[1] = v18;
    v19 = a3(v46);
    if (v7)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10;
    }
    v6 = v19;
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      break;
    v9 = sub_23C0E47B0();
LABEL_9:
    if (v44 == v9 >> 14)
      goto LABEL_29;
  }
  if (v8 >> 14 == v9 >> 14 && (a2 & 1) != 0)
  {
    v9 = sub_23C0E47B0();
    *(_QWORD *)(v43 + 16) = v9;
    v8 = v9;
    v17 = v9;
    goto LABEL_9;
  }
  if (v9 >> 14 < v8 >> 14)
  {
    __break(1u);
    goto LABEL_41;
  }
  v20 = sub_23C0E47D4();
  v40 = v21;
  v41 = v20;
  v23 = v22;
  v25 = v24;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = sub_23C081DAC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
  v27 = *((_QWORD *)v10 + 2);
  v26 = *((_QWORD *)v10 + 3);
  v6 = v27 + 1;
  if (v27 >= v26 >> 1)
    v10 = sub_23C081DAC((char *)(v26 > 1), v27 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v6;
  v28 = &v10[32 * v27];
  *((_QWORD *)v28 + 4) = v41;
  *((_QWORD *)v28 + 5) = v23;
  *((_QWORD *)v28 + 6) = v25;
  *((_QWORD *)v28 + 7) = v40;
  *(_QWORD *)(v39 + 16) = v10;
  v29 = sub_23C0E47B0();
  v9 = v29;
  *(_QWORD *)(v43 + 16) = v29;
  if (*((_QWORD *)v10 + 2) != v38)
  {
    v8 = v29;
    v17 = v29;
    goto LABEL_9;
  }
  v17 = v29;
  v8 = v29;
LABEL_29:
  if (v44 == v8 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  if (v44 >= v17 >> 14)
  {
    v6 = sub_23C0E47D4();
    v8 = v31;
    v9 = v32;
    v11 = v33;
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      goto LABEL_43;
    goto LABEL_34;
  }
LABEL_42:
  __break(1u);
LABEL_43:
  v10 = sub_23C081DAC(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
LABEL_34:
  v35 = *((_QWORD *)v10 + 2);
  v34 = *((_QWORD *)v10 + 3);
  if (v35 >= v34 >> 1)
    v10 = sub_23C081DAC((char *)(v34 > 1), v35 + 1, 1, v10);
  *((_QWORD *)v10 + 2) = v35 + 1;
  v36 = &v10[32 * v35];
  *((_QWORD *)v36 + 4) = v6;
  *((_QWORD *)v36 + 5) = v8;
  *((_QWORD *)v36 + 6) = v9;
  *((_QWORD *)v36 + 7) = v11;
  *(_QWORD *)(v39 + 16) = v10;
LABEL_37:
  swift_bridgeObjectRetain();
  swift_release();
LABEL_38:
  swift_release();
  return v10;
}

uint64_t sub_23C0A409C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  char *v18;

  v10 = *(_QWORD *)(a2 + 16) >> 14;
  v11 = (v10 == a1 >> 14) & a3;
  if (v11 == 1)
    return v11 ^ 1u;
  if (a1 >> 14 < v10)
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = a4;
  v5 = sub_23C0E47D4();
  v6 = v12;
  v7 = v13;
  v8 = v14;
  v9 = *(char **)(v4 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_9:
    v9 = sub_23C081DAC(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
    *(_QWORD *)(v4 + 16) = v9;
  }
  v17 = *((_QWORD *)v9 + 2);
  v16 = *((_QWORD *)v9 + 3);
  if (v17 >= v16 >> 1)
  {
    v9 = sub_23C081DAC((char *)(v16 > 1), v17 + 1, 1, v9);
    *(_QWORD *)(v4 + 16) = v9;
  }
  *((_QWORD *)v9 + 2) = v17 + 1;
  v18 = &v9[32 * v17];
  *((_QWORD *)v18 + 4) = v5;
  *((_QWORD *)v18 + 5) = v6;
  *((_QWORD *)v18 + 6) = v7;
  *((_QWORD *)v18 + 7) = v8;
  return v11 ^ 1u;
}

unint64_t sub_23C0A41A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B0FBE8;
  if (!qword_256B0FBE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F198);
    v2[0] = sub_23C0683A4(&qword_256B0FBF0, (uint64_t (*)(uint64_t))MEMORY[0x24BDF48E8], MEMORY[0x24BDF48D0]);
    v2[1] = sub_23C06E774(&qword_256B0FBF8, &qword_256B0FC00, MEMORY[0x24BDF0710]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0FBE8);
  }
  return result;
}

uint64_t sub_23C0A4244()
{
  return sub_23C0A4250((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0A1BE8);
}

uint64_t sub_23C0A4250(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[13], v1[14], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12]);
}

uint64_t sub_23C0A4290(uint64_t a1, unint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v19 = 32;
  v20 = 0xE100000000000000;
  v18[2] = &v19;
  swift_bridgeObjectRetain();
  v4 = sub_23C0A3C84(1, 1, sub_23C0A45C0, (uint64_t)v18, a1, a2);
  v5 = *((_QWORD *)v4 + 2);
  if (v5)
  {
    swift_bridgeObjectRetain();
    v6 = 0;
    v7 = v4 + 56;
    v8 = 0xE000000000000000;
    while (1)
    {
      v9 = *((_QWORD *)v7 - 3);
      v10 = *((_QWORD *)v7 - 2);
      swift_bridgeObjectRetain();
      result = sub_23C0E4888();
      v13 = (v12 & 1) != 0 ? v10 : result;
      if (v13 >> 14 < v9 >> 14)
        break;
      v14 = sub_23C0E4894();
      v23 = v6;
      v24 = v8;
      v19 = v14;
      v20 = v15;
      v21 = v16;
      v22 = v17;
      sub_23C0A4614();
      swift_bridgeObjectRetain();
      sub_23C0E47BC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v6 = v23;
      v8 = v24;
      v7 += 32;
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
    v6 = 0;
LABEL_10:
    swift_bridgeObjectRelease();
    return v6;
  }
  return result;
}

unint64_t sub_23C0A4420()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B0FC38;
  if (!qword_256B0FC38)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B0FB60);
    v2[0] = MEMORY[0x24BDF1F80];
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0FC38);
  }
  return result;
}

unint64_t sub_23C0A4484()
{
  unint64_t result;

  result = qword_256B0FC40;
  if (!qword_256B0FC40)
  {
    result = MEMORY[0x242616E9C](MEMORY[0x24BDF4440], MEMORY[0x24BDF4458]);
    atomic_store(result, (unint64_t *)&qword_256B0FC40);
  }
  return result;
}

unint64_t sub_23C0A44D0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_256B0FC70;
  if (!qword_256B0FC70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FC58);
    v2[2] = MEMORY[0x24BDF1FA8];
    v2[3] = MEMORY[0x24BDF1F80];
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23C06E774(&qword_256B0FC78, &qword_256B0FC80, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B0FC70);
  }
  return result;
}

uint64_t sub_23C0A4578(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C0A45C0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = *(_QWORD **)(v1 + 16);
  if (*a1 == *v2 && a1[1] == v2[1])
    return 1;
  else
    return sub_23C0E4A74() & 1;
}

unint64_t sub_23C0A4614()
{
  unint64_t result;

  result = qword_256B0FC90;
  if (!qword_256B0FC90)
  {
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_256B0FC90);
  }
  return result;
}

uint64_t sub_23C0A4658()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C0A467C()
{
  return swift_deallocObject();
}

uint64_t sub_23C0A468C()
{
  return 0x736E6F6974706FLL;
}

uint64_t sub_23C0A46A8()
{
  sub_23C0A5990();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A46D0()
{
  sub_23C0A5990();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A46F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0A472C + 4 * byte_23C0E7870[*v0]))(0x75636F4679646F62, 0xE900000000000073);
}

uint64_t sub_23C0A472C()
{
  return 0x6E6F697461727564;
}

uint64_t sub_23C0A4744()
{
  return 0x6E656D7069757165;
}

uint64_t sub_23C0A475C()
{
  return 0x7974696C61646F6DLL;
}

uint64_t sub_23C0A4774()
{
  return 0x6E6547636973756DLL;
}

uint64_t sub_23C0A4790()
{
  return 0x76654C6C6C696B73;
}

uint64_t sub_23C0A47B0()
{
  return 0x656D656874;
}

uint64_t sub_23C0A47C4()
{
  return 0x72656E69617274;
}

uint64_t sub_23C0A47DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0A7B04(a1, a2);
  *a3 = result;
  return result;
}

void sub_23C0A4800(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_23C0A480C()
{
  sub_23C0A5360();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A4834()
{
  sub_23C0A5360();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A485C()
{
  sub_23C0A58D0();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A4884()
{
  sub_23C0A58D0();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A48AC()
{
  sub_23C0A5810();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A48D4()
{
  sub_23C0A5810();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A48FC()
{
  sub_23C0A5750();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A4924()
{
  sub_23C0A5750();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A494C()
{
  sub_23C0A5690();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A4974()
{
  sub_23C0A5690();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A499C()
{
  sub_23C0A55D0();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A49C4()
{
  sub_23C0A55D0();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A49EC()
{
  _BYTE *v0;

  if (*v0)
    return 0x69726F6765746163;
  else
    return 0x736E6F6974706FLL;
}

uint64_t sub_23C0A4A2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0A7E5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0A4A50()
{
  sub_23C0A5464();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A4A78()
{
  sub_23C0A5464();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A4AA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23C0E4A74();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23C0A4B34()
{
  sub_23C0A53A4();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A4B5C()
{
  sub_23C0A53A4();
  return sub_23C0E4AF8();
}

void FilterSectionContent.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC98);
  v31 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v24 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FCA0);
  v32 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v26 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FCA8);
  v30 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v22 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FCB0);
  v29 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v20 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FCB8);
  v28 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v18 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FCC0);
  v16 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v15 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FCC8);
  v13[2] = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FCD0);
  v13[1] = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FCD8);
  v11 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  v35 = v11;
  MEMORY[0x24BDAC7A8](v10);
  v33 = *v1;
  v13[0] = v1[1];
  v12 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0A5360();
  sub_23C0E4AE0();
  __asm { BR              X9 }
}

uint64_t sub_23C0A4E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v3 - 72) = 0;
  sub_23C0A5990();
  v4 = *(_QWORD *)(v3 - 112);
  sub_23C0E49E4();
  *(_QWORD *)(v3 - 72) = *(_QWORD *)(v3 - 128);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FDE0);
  sub_23C0A59D4();
  sub_23C0E4A44();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 296) + 8))(v2, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 104) + 8))(v0, v4);
}

unint64_t sub_23C0A5360()
{
  unint64_t result;

  result = qword_256B0FCE0;
  if (!qword_256B0FCE0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E83BC, &type metadata for FilterSectionContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FCE0);
  }
  return result;
}

unint64_t sub_23C0A53A4()
{
  unint64_t result;

  result = qword_256B0FCE8;
  if (!qword_256B0FCE8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E836C, &type metadata for FilterSectionContent.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FCE8);
  }
  return result;
}

unint64_t sub_23C0A53E8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FCF8;
  if (!qword_256B0FCF8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FCF0);
    v2 = sub_23C06E774(&qword_256B0FD00, &qword_256B0F4C0, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FCF8);
  }
  return result;
}

unint64_t sub_23C0A5464()
{
  unint64_t result;

  result = qword_256B0FD08;
  if (!qword_256B0FD08)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E831C, &type metadata for FilterSectionContent.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FD08);
  }
  return result;
}

unint64_t sub_23C0A54A8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FD18;
  if (!qword_256B0FD18)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FD10);
    v2 = sub_23C06E774(&qword_256B0FD20, &qword_256B0F4B0, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FD18);
  }
  return result;
}

uint64_t sub_23C0A5524(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0F050);
    v8 = a2();
    result = MEMORY[0x242616E9C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23C0A558C()
{
  unint64_t result;

  result = qword_256B0FD30;
  if (!qword_256B0FD30)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ThemeCategory, &type metadata for ThemeCategory);
    atomic_store(result, (unint64_t *)&qword_256B0FD30);
  }
  return result;
}

unint64_t sub_23C0A55D0()
{
  unint64_t result;

  result = qword_256B0FD38;
  if (!qword_256B0FD38)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E82CC, &type metadata for FilterSectionContent.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FD38);
  }
  return result;
}

unint64_t sub_23C0A5614()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FD48;
  if (!qword_256B0FD48)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FD40);
    v2 = sub_23C06E774(&qword_256B0FD50, &qword_256B0F4A0, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FD48);
  }
  return result;
}

unint64_t sub_23C0A5690()
{
  unint64_t result;

  result = qword_256B0FD58;
  if (!qword_256B0FD58)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E827C, &type metadata for FilterSectionContent.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FD58);
  }
  return result;
}

unint64_t sub_23C0A56D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FD68;
  if (!qword_256B0FD68)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FD60);
    v2 = sub_23C06E774(&qword_256B0FD70, &qword_256B0F490, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FD68);
  }
  return result;
}

unint64_t sub_23C0A5750()
{
  unint64_t result;

  result = qword_256B0FD78;
  if (!qword_256B0FD78)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E822C, &type metadata for FilterSectionContent.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FD78);
  }
  return result;
}

unint64_t sub_23C0A5794()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FD88;
  if (!qword_256B0FD88)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FD80);
    v2 = sub_23C06E774(&qword_256B0FD90, &qword_256B0F480, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FD88);
  }
  return result;
}

unint64_t sub_23C0A5810()
{
  unint64_t result;

  result = qword_256B0FD98;
  if (!qword_256B0FD98)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E81DC, &type metadata for FilterSectionContent.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FD98);
  }
  return result;
}

unint64_t sub_23C0A5854()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FDA8;
  if (!qword_256B0FDA8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FDA0);
    v2 = sub_23C06E774(&qword_256B0FDB0, &qword_256B0F470, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FDA8);
  }
  return result;
}

unint64_t sub_23C0A58D0()
{
  unint64_t result;

  result = qword_256B0FDB8;
  if (!qword_256B0FDB8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E818C, &type metadata for FilterSectionContent.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FDB8);
  }
  return result;
}

unint64_t sub_23C0A5914()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FDC8;
  if (!qword_256B0FDC8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FDC0);
    v2 = sub_23C06E774(&qword_256B0FDD0, &qword_256B0F460, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FDC8);
  }
  return result;
}

unint64_t sub_23C0A5990()
{
  unint64_t result;

  result = qword_256B0FDD8;
  if (!qword_256B0FDD8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E813C, &type metadata for FilterSectionContent.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FDD8);
  }
  return result;
}

unint64_t sub_23C0A59D4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FDE8;
  if (!qword_256B0FDE8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FDE0);
    v2 = sub_23C06E774(&qword_256B0FDF0, &qword_256B0F450, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12A0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FDE8);
  }
  return result;
}

uint64_t FilterSectionContent.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  char *v51;

  v44 = a2;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FDF8);
  v41 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v49 = (char *)v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FE00);
  v40 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v48 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FE08);
  v39 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v47 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FE10);
  v38 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v46 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FE18);
  v37 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v43 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FE20);
  v36 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v45 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FE28);
  v35 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v42 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FE30);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FE38);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v50 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_23C0A5360();
  v19 = v51;
  sub_23C0E4AD4();
  if (!v19)
  {
    v26[2] = v13;
    v26[0] = v11;
    v26[1] = v10;
    v26[3] = 0;
    v27 = v15;
    v51 = v17;
    v20 = sub_23C0E49CC();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X9 }
    v21 = sub_23C0E4900();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6E8);
    *v23 = &type metadata for FilterSectionContent;
    v24 = v51;
    sub_23C0E4960();
    sub_23C0E48F4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v14);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
}

void sub_23C0A5F60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v2 - 72) = 1;
  sub_23C0A58D0();
  v3 = *(_QWORD *)(v2 - 184);
  v4 = *(_QWORD *)(v2 - 112);
  v5 = *(_QWORD *)(v2 - 312);
  sub_23C0E4954();
  if (!v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FDC0);
    sub_23C0A689C();
    v6 = *(_QWORD *)(v2 - 296);
    sub_23C0E49C0();
    *(_QWORD *)(v2 - 312) = v0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 240) + 8))(v3, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 304) + 8))(v4, v1);
    JUMPOUT(0x23C0A651CLL);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x23C0A5F2CLL);
}

void sub_23C0A5FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 - 72) = 2;
  sub_23C0A5810();
  v2 = *(_QWORD *)(v1 - 312);
  sub_23C0E4954();
  if (!v2)
  {
    *(_QWORD *)(v1 - 312) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FDA0);
    sub_23C0A6820();
    sub_23C0E49C0();
    JUMPOUT(0x23C0A64F4);
  }
  JUMPOUT(0x23C0A63D0);
}

void sub_23C0A6094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v2 - 72) = 3;
  sub_23C0A5750();
  v3 = *(_QWORD *)(v2 - 176);
  v4 = *(_QWORD *)(v2 - 112);
  v5 = *(_QWORD *)(v2 - 312);
  sub_23C0E4954();
  if (!v5)
  {
    *(_QWORD *)(v2 - 312) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FD80);
    sub_23C0A67A4();
    v6 = *(_QWORD *)(v2 - 272);
    sub_23C0E49C0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 224) + 8))(v3, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 304) + 8))(v4, v1);
    JUMPOUT(0x23C0A651CLL);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x23C0A5F2CLL);
}

void sub_23C0A6130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 - 72) = 4;
  sub_23C0A5690();
  v4 = *(_QWORD *)(v3 - 112);
  v5 = *(_QWORD *)(v3 - 312);
  sub_23C0E4954();
  if (!v5)
  {
    *(_QWORD *)(v3 - 312) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FD60);
    sub_23C0A6728();
    v6 = *(_QWORD *)(v3 - 264);
    sub_23C0E49C0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 216) + 8))(v1, v6);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 304) + 8))(v4, v2);
    JUMPOUT(0x23C0A651CLL);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x23C0A5F2CLL);
}

void sub_23C0A61CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v2 - 72) = 5;
  sub_23C0A55D0();
  v3 = v1;
  v4 = *(_QWORD *)(v2 - 312);
  sub_23C0E4954();
  if (!v4)
  {
    *(_QWORD *)(v2 - 312) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FD40);
    sub_23C0A66AC();
    v5 = *(_QWORD *)(v2 - 288);
    sub_23C0E49C0();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 208) + 8))(v3, v5);
    swift_bridgeObjectRelease();
    JUMPOUT(0x23C0A6514);
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x23C0A5F2CLL);
}

void sub_23C0A632C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v1 - 72) = 7;
  sub_23C0A53A4();
  v2 = *(_QWORD *)(v1 - 312);
  sub_23C0E4954();
  if (!v2)
  {
    *(_QWORD *)(v1 - 312) = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FCF0);
    sub_23C0A6570();
    sub_23C0E49C0();
    JUMPOUT(0x23C0A64ECLL);
  }
  JUMPOUT(0x23C0A63D0);
}

unint64_t sub_23C0A6570()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FE40;
  if (!qword_256B0FE40)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FCF0);
    v2 = sub_23C06E774(&qword_256B0FE48, &qword_256B0F4C0, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FE40);
  }
  return result;
}

unint64_t sub_23C0A65EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FE50;
  if (!qword_256B0FE50)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FD10);
    v2 = sub_23C06E774(&qword_256B0FE58, &qword_256B0F4B0, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FE50);
  }
  return result;
}

unint64_t sub_23C0A6668()
{
  unint64_t result;

  result = qword_256B0FE68;
  if (!qword_256B0FE68)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ThemeCategory, &type metadata for ThemeCategory);
    atomic_store(result, (unint64_t *)&qword_256B0FE68);
  }
  return result;
}

unint64_t sub_23C0A66AC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FE70;
  if (!qword_256B0FE70)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FD40);
    v2 = sub_23C06E774(&qword_256B0FE78, &qword_256B0F4A0, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FE70);
  }
  return result;
}

unint64_t sub_23C0A6728()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FE80;
  if (!qword_256B0FE80)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FD60);
    v2 = sub_23C06E774(&qword_256B0FE88, &qword_256B0F490, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FE80);
  }
  return result;
}

unint64_t sub_23C0A67A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FE90;
  if (!qword_256B0FE90)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FD80);
    v2 = sub_23C06E774(&qword_256B0FE98, &qword_256B0F480, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FE90);
  }
  return result;
}

unint64_t sub_23C0A6820()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FEA0;
  if (!qword_256B0FEA0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FDA0);
    v2 = sub_23C06E774(&qword_256B0FEA8, &qword_256B0F470, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FEA0);
  }
  return result;
}

unint64_t sub_23C0A689C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FEB0;
  if (!qword_256B0FEB0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FDC0);
    v2 = sub_23C06E774(&qword_256B0FEB8, &qword_256B0F460, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FEB0);
  }
  return result;
}

unint64_t sub_23C0A6918()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B0FEC0;
  if (!qword_256B0FEC0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0FDE0);
    v2 = sub_23C06E774(&qword_256B0FEC8, &qword_256B0F450, (uint64_t)&protocol conformance descriptor for Option<A>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12D0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B0FEC0);
  }
  return result;
}

uint64_t sub_23C0A6994@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FilterSectionContent.init(from:)(a1, a2);
}

void sub_23C0A69A8(_QWORD *a1)
{
  FilterSectionContent.encode(to:)(a1);
}

void FilterSectionContent.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_23C0A69F0()
{
  uint64_t v0;
  __int128 *v1;

  sub_23C0E4AA4();
  return sub_23C09C2AC(v1, v0);
}

uint64_t sub_23C0A6A14()
{
  uint64_t v0;
  uint64_t v1;

  sub_23C0E4AA4();
  return sub_23C09C644(v1, v0);
}

uint64_t sub_23C0A6A38()
{
  uint64_t v0;
  __int128 *v1;

  sub_23C0E4AA4();
  return sub_23C09C2AC(v1, v0);
}

uint64_t sub_23C0A6A5C()
{
  uint64_t v0;
  __int128 *v1;

  sub_23C0E4AA4();
  return sub_23C09C460(v1, v0);
}

uint64_t sub_23C0A6A80()
{
  uint64_t v0;
  __int128 *v1;

  sub_23C0E4AA4();
  return sub_23C09C2AC(v1, v0);
}

uint64_t sub_23C0A6AA4()
{
  uint64_t v0;
  __int128 *v1;

  sub_23C0E4AA4();
  return sub_23C09BFE4(v1, v0);
}

uint64_t sub_23C0A6AC8()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  sub_23C0E4AA4();
  sub_23C09C2AC(v2, v0);
  return sub_23C09BFE8(v2, v3);
}

uint64_t sub_23C0A6AFC()
{
  uint64_t v0;
  __int128 *v1;

  sub_23C0E4AA4();
  return sub_23C09BFE4(v1, v0);
}

uint64_t FilterSectionContent.hashValue.getter()
{
  sub_23C0E4A98();
  FilterSectionContent.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0A6B74()
{
  sub_23C0E4A98();
  FilterSectionContent.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0A6BC8()
{
  sub_23C0E4A98();
  FilterSectionContent.hash(into:)();
  return sub_23C0E4AC8();
}

void _s16FitnessFiltering20FilterSectionContentO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X9 }
}

uint64_t sub_23C0A6C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  int v5;
  char v6;

  if (v5)
  {
    sub_23C08FCE0(v2, v3, v5);
    sub_23C08FCE0(v0, v1, v4);
    v6 = 0;
  }
  else
  {
    sub_23C08FCE0(v2, v3, 0);
    sub_23C08FCE0(v0, v1, 0);
    v6 = ((uint64_t (*)(uint64_t, uint64_t))sub_23C0BE94C)(v0, v2);
    v4 = 0;
  }
  sub_23C08FD78(v0, v1, v4);
  sub_23C08FD78(v2, v3, v5);
  return v6 & 1;
}

unint64_t sub_23C0A6EDC()
{
  unint64_t result;

  result = qword_256B0FED0;
  if (!qword_256B0FED0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSectionContent, &type metadata for FilterSectionContent);
    atomic_store(result, (unint64_t *)&qword_256B0FED0);
  }
  return result;
}

uint64_t destroy for FilterSectionContent(uint64_t a1)
{
  return sub_23C08FD78(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s16FitnessFiltering20FilterSectionContentOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C08FCE0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for FilterSectionContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_23C08FCE0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_23C08FD78(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for FilterSectionContent(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_23C08FD78(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterSectionContent(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterSectionContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C0A70B4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_23C0A70BC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FilterSectionContent()
{
  return &type metadata for FilterSectionContent;
}

uint64_t storeEnumTagSinglePayload for FilterSectionContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23C0A7120 + 4 * byte_23C0E78AD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23C0A7154 + 4 * byte_23C0E78A8[v4]))();
}

uint64_t sub_23C0A7154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0A715C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0A7164);
  return result;
}

uint64_t sub_23C0A7170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0A7178);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23C0A717C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0A7184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterSectionContent.CodingKeys()
{
  return &type metadata for FilterSectionContent.CodingKeys;
}

ValueMetadata *type metadata accessor for FilterSectionContent.BodyFocusCodingKeys()
{
  return &type metadata for FilterSectionContent.BodyFocusCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSectionContent.DurationCodingKeys()
{
  return &type metadata for FilterSectionContent.DurationCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSectionContent.EquipmentCodingKeys()
{
  return &type metadata for FilterSectionContent.EquipmentCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSectionContent.ModalityCodingKeys()
{
  return &type metadata for FilterSectionContent.ModalityCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSectionContent.MusicGenreCodingKeys()
{
  return &type metadata for FilterSectionContent.MusicGenreCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSectionContent.SkillLevelCodingKeys()
{
  return &type metadata for FilterSectionContent.SkillLevelCodingKeys;
}

uint64_t storeEnumTagSinglePayload for FilterSectionContent.ThemeCodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C0A7250 + 4 * byte_23C0E78B7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C0A7284 + 4 * byte_23C0E78B2[v4]))();
}

uint64_t sub_23C0A7284(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0A728C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0A7294);
  return result;
}

uint64_t sub_23C0A72A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0A72A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C0A72AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0A72B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterSectionContent.ThemeCodingKeys()
{
  return &type metadata for FilterSectionContent.ThemeCodingKeys;
}

uint64_t _s16FitnessFiltering20FilterSectionContentO19BodyFocusCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23C0A7310 + 4 * byte_23C0E78BC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23C0A7330 + 4 * byte_23C0E78C1[v4]))();
}

_BYTE *sub_23C0A7310(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23C0A7330(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23C0A7338(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23C0A7340(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23C0A7348(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23C0A7350(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FilterSectionContent.TrainerCodingKeys()
{
  return &type metadata for FilterSectionContent.TrainerCodingKeys;
}

unint64_t sub_23C0A7370()
{
  unint64_t result;

  result = qword_256B0FED8;
  if (!qword_256B0FED8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7B54, &type metadata for FilterSectionContent.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FED8);
  }
  return result;
}

unint64_t sub_23C0A73B8()
{
  unint64_t result;

  result = qword_256B0FEE0;
  if (!qword_256B0FEE0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7C0C, &type metadata for FilterSectionContent.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FEE0);
  }
  return result;
}

unint64_t sub_23C0A7400()
{
  unint64_t result;

  result = qword_256B0FEE8;
  if (!qword_256B0FEE8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7CC4, &type metadata for FilterSectionContent.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FEE8);
  }
  return result;
}

unint64_t sub_23C0A7448()
{
  unint64_t result;

  result = qword_256B0FEF0;
  if (!qword_256B0FEF0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7D7C, &type metadata for FilterSectionContent.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FEF0);
  }
  return result;
}

unint64_t sub_23C0A7490()
{
  unint64_t result;

  result = qword_256B0FEF8;
  if (!qword_256B0FEF8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7E34, &type metadata for FilterSectionContent.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FEF8);
  }
  return result;
}

unint64_t sub_23C0A74D8()
{
  unint64_t result;

  result = qword_256B0FF00;
  if (!qword_256B0FF00)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7EEC, &type metadata for FilterSectionContent.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF00);
  }
  return result;
}

unint64_t sub_23C0A7520()
{
  unint64_t result;

  result = qword_256B0FF08;
  if (!qword_256B0FF08)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7FA4, &type metadata for FilterSectionContent.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF08);
  }
  return result;
}

unint64_t sub_23C0A7568()
{
  unint64_t result;

  result = qword_256B0FF10;
  if (!qword_256B0FF10)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E805C, &type metadata for FilterSectionContent.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF10);
  }
  return result;
}

unint64_t sub_23C0A75B0()
{
  unint64_t result;

  result = qword_256B0FF18;
  if (!qword_256B0FF18)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8114, &type metadata for FilterSectionContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF18);
  }
  return result;
}

unint64_t sub_23C0A75F8()
{
  unint64_t result;

  result = qword_256B0FF20;
  if (!qword_256B0FF20)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7FCC, &type metadata for FilterSectionContent.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF20);
  }
  return result;
}

unint64_t sub_23C0A7640()
{
  unint64_t result;

  result = qword_256B0FF28;
  if (!qword_256B0FF28)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7FF4, &type metadata for FilterSectionContent.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF28);
  }
  return result;
}

unint64_t sub_23C0A7688()
{
  unint64_t result;

  result = qword_256B0FF30;
  if (!qword_256B0FF30)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7F14, &type metadata for FilterSectionContent.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF30);
  }
  return result;
}

unint64_t sub_23C0A76D0()
{
  unint64_t result;

  result = qword_256B0FF38;
  if (!qword_256B0FF38)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7F3C, &type metadata for FilterSectionContent.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF38);
  }
  return result;
}

unint64_t sub_23C0A7718()
{
  unint64_t result;

  result = qword_256B0FF40;
  if (!qword_256B0FF40)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7E5C, &type metadata for FilterSectionContent.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF40);
  }
  return result;
}

unint64_t sub_23C0A7760()
{
  unint64_t result;

  result = qword_256B0FF48;
  if (!qword_256B0FF48)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7E84, &type metadata for FilterSectionContent.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF48);
  }
  return result;
}

unint64_t sub_23C0A77A8()
{
  unint64_t result;

  result = qword_256B0FF50;
  if (!qword_256B0FF50)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7DA4, &type metadata for FilterSectionContent.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF50);
  }
  return result;
}

unint64_t sub_23C0A77F0()
{
  unint64_t result;

  result = qword_256B0FF58;
  if (!qword_256B0FF58)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7DCC, &type metadata for FilterSectionContent.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF58);
  }
  return result;
}

unint64_t sub_23C0A7838()
{
  unint64_t result;

  result = qword_256B0FF60;
  if (!qword_256B0FF60)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7CEC, &type metadata for FilterSectionContent.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF60);
  }
  return result;
}

unint64_t sub_23C0A7880()
{
  unint64_t result;

  result = qword_256B0FF68;
  if (!qword_256B0FF68)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7D14, &type metadata for FilterSectionContent.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF68);
  }
  return result;
}

unint64_t sub_23C0A78C8()
{
  unint64_t result;

  result = qword_256B0FF70;
  if (!qword_256B0FF70)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7C34, &type metadata for FilterSectionContent.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF70);
  }
  return result;
}

unint64_t sub_23C0A7910()
{
  unint64_t result;

  result = qword_256B0FF78;
  if (!qword_256B0FF78)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7C5C, &type metadata for FilterSectionContent.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF78);
  }
  return result;
}

unint64_t sub_23C0A7958()
{
  unint64_t result;

  result = qword_256B0FF80;
  if (!qword_256B0FF80)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7B7C, &type metadata for FilterSectionContent.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF80);
  }
  return result;
}

unint64_t sub_23C0A79A0()
{
  unint64_t result;

  result = qword_256B0FF88;
  if (!qword_256B0FF88)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7BA4, &type metadata for FilterSectionContent.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF88);
  }
  return result;
}

unint64_t sub_23C0A79E8()
{
  unint64_t result;

  result = qword_256B0FF90;
  if (!qword_256B0FF90)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7AC4, &type metadata for FilterSectionContent.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF90);
  }
  return result;
}

unint64_t sub_23C0A7A30()
{
  unint64_t result;

  result = qword_256B0FF98;
  if (!qword_256B0FF98)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E7AEC, &type metadata for FilterSectionContent.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FF98);
  }
  return result;
}

unint64_t sub_23C0A7A78()
{
  unint64_t result;

  result = qword_256B0FFA0;
  if (!qword_256B0FFA0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8084, &type metadata for FilterSectionContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FFA0);
  }
  return result;
}

unint64_t sub_23C0A7AC0()
{
  unint64_t result;

  result = qword_256B0FFA8;
  if (!qword_256B0FFA8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E80AC, &type metadata for FilterSectionContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B0FFA8);
  }
  return result;
}

uint64_t sub_23C0A7B04(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x75636F4679646F62 && a2 == 0xE900000000000073;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E656D7069757165 && a2 == 0xE900000000000074 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7974696C61646F6DLL && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6547636973756DLL && a2 == 0xEA00000000006572 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x76654C6C6C696B73 && a2 == 0xEA00000000006C65 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656D656874 && a2 == 0xE500000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x72656E69617274 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

uint64_t sub_23C0A7E5C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

BOOL static FilterKind.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

BOOL static FilterKind.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23C0A7F78(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0A7FB0 + 4 * byte_23C0E8410[a1]))(0x75636F4679646F62, 0xE900000000000073);
}

uint64_t sub_23C0A7FB0()
{
  return 0x6E6F697461727564;
}

uint64_t sub_23C0A7FC8()
{
  return 0x6E656D7069757165;
}

uint64_t sub_23C0A7FE0()
{
  return 0x7974696C61646F6DLL;
}

uint64_t sub_23C0A7FF8()
{
  return 0x6E6547636973756DLL;
}

uint64_t sub_23C0A8014()
{
  return 0x76654C6C6C696B73;
}

uint64_t sub_23C0A8034()
{
  return 0x656D656874;
}

uint64_t sub_23C0A8048()
{
  return 0x72656E69617274;
}

uint64_t sub_23C0A8060()
{
  return 0x7469617274;
}

uint64_t sub_23C0A8074()
{
  sub_23C0A8C48();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A809C()
{
  sub_23C0A8C48();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A80C4()
{
  unsigned __int8 *v0;

  return sub_23C0A7F78(*v0);
}

uint64_t sub_23C0A80CC()
{
  sub_23C0A89E4();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A80F4()
{
  sub_23C0A89E4();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A811C()
{
  sub_23C0A8C04();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A8144()
{
  sub_23C0A8C04();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A816C()
{
  sub_23C0A8BC0();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A8194()
{
  sub_23C0A8BC0();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A81BC()
{
  sub_23C0A8B7C();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A81E4()
{
  sub_23C0A8B7C();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A820C()
{
  sub_23C0A8B38();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A8234()
{
  sub_23C0A8B38();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A825C()
{
  sub_23C0A8AF4();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A8284()
{
  sub_23C0A8AF4();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A82AC()
{
  sub_23C0A8AB0();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A82D4()
{
  sub_23C0A8AB0();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A82FC()
{
  sub_23C0A8A6C();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A8324()
{
  sub_23C0A8A6C();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0A834C()
{
  sub_23C0A8A28();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0A8374()
{
  sub_23C0A8A28();
  return sub_23C0E4AF8();
}

void *static FilterKind.allCases.getter()
{
  return &unk_250CF92F8;
}

void sub_23C0A83A8(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CF92F8;
}

BOOL sub_23C0A83B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_23C0A83CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_23C0A83E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_23C0A83F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void FilterKind.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v37 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFB0);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v34 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFB8);
  v32 = *(_QWORD *)(v5 - 8);
  v33 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v31 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFC0);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v28 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFC8);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v25 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFD0);
  v23 = *(_QWORD *)(v11 - 8);
  v24 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v22 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFD8);
  v20 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  v19 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFE0);
  v17[2] = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v17[1] = (char *)v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFE8);
  MEMORY[0x24BDAC7A8](v17[0]);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFF0);
  MEMORY[0x24BDAC7A8](v15);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FFF8);
  v38 = *(_QWORD *)(v16 - 8);
  v39 = v16;
  MEMORY[0x24BDAC7A8](v16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0A89E4();
  sub_23C0E4AE0();
  __asm { BR              X10 }
}

uint64_t sub_23C0A871C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 89) = 0;
  sub_23C0A8C48();
  v5 = *(_QWORD *)(v4 - 104);
  sub_23C0E49E4();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8))(v2, v5);
}

unint64_t sub_23C0A89E4()
{
  unint64_t result;

  result = qword_256B10000;
  if (!qword_256B10000)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8CEC, &type metadata for FilterKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10000);
  }
  return result;
}

unint64_t sub_23C0A8A28()
{
  unint64_t result;

  result = qword_256B10008;
  if (!qword_256B10008)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8C9C, &type metadata for FilterKind.TraitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10008);
  }
  return result;
}

unint64_t sub_23C0A8A6C()
{
  unint64_t result;

  result = qword_256B10010;
  if (!qword_256B10010)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8C4C, &type metadata for FilterKind.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10010);
  }
  return result;
}

unint64_t sub_23C0A8AB0()
{
  unint64_t result;

  result = qword_256B10018;
  if (!qword_256B10018)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8BFC, &type metadata for FilterKind.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10018);
  }
  return result;
}

unint64_t sub_23C0A8AF4()
{
  unint64_t result;

  result = qword_256B10020;
  if (!qword_256B10020)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8BAC, &type metadata for FilterKind.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10020);
  }
  return result;
}

unint64_t sub_23C0A8B38()
{
  unint64_t result;

  result = qword_256B10028;
  if (!qword_256B10028)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8B5C, &type metadata for FilterKind.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10028);
  }
  return result;
}

unint64_t sub_23C0A8B7C()
{
  unint64_t result;

  result = qword_256B10030;
  if (!qword_256B10030)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8B0C, &type metadata for FilterKind.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10030);
  }
  return result;
}

unint64_t sub_23C0A8BC0()
{
  unint64_t result;

  result = qword_256B10038;
  if (!qword_256B10038)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8ABC, &type metadata for FilterKind.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10038);
  }
  return result;
}

unint64_t sub_23C0A8C04()
{
  unint64_t result;

  result = qword_256B10040;
  if (!qword_256B10040)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8A6C, &type metadata for FilterKind.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10040);
  }
  return result;
}

unint64_t sub_23C0A8C48()
{
  unint64_t result;

  result = qword_256B10048;
  if (!qword_256B10048)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8A1C, &type metadata for FilterKind.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10048);
  }
  return result;
}

uint64_t FilterKind.init(from:)(_QWORD *a1)
{
  return sub_23C0A8D48(a1);
}

uint64_t sub_23C0A8CA0@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23C0A8D48(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_23C0A8CC8(_QWORD *a1)
{
  unsigned __int8 *v1;

  FilterKind.encode(to:)(a1, *v1);
}

uint64_t FilterKind.hash(into:)()
{
  return sub_23C0E4AA4();
}

uint64_t FilterKind.hashValue.getter()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0A8D48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD v31[7];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10110);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v54 = (char *)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10118);
  v43 = *(_QWORD *)(v4 - 8);
  v44 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v53 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10120);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10128);
  v37 = *(_QWORD *)(v40 - 8);
  MEMORY[0x24BDAC7A8](v40);
  v50 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10130);
  v38 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v51 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10138);
  v35 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v49 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10140);
  v33 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v48 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10148);
  v31[6] = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v47 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10150);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10158);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v55 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v22);
  sub_23C0A89E4();
  v23 = v56;
  sub_23C0E4AD4();
  if (!v23)
  {
    v31[4] = v17;
    v31[2] = v15;
    v31[3] = v14;
    v56 = v19;
    v31[5] = 0;
    v24 = v21;
    v25 = sub_23C0E49CC();
    if (*(_QWORD *)(v25 + 16) == 1)
    {
      v26 = (char *)&loc_23C0A90D4 + 4 * byte_23C0E8422[*(unsigned __int8 *)(v25 + 32)];
      v31[1] = *(unsigned __int8 *)(v25 + 32);
      __asm { BR              X9 }
    }
    v27 = sub_23C0E4900();
    swift_allocError();
    v29 = v28;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6E8);
    *v29 = &type metadata for FilterKind;
    sub_23C0E4960();
    sub_23C0E48F4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x24BEE26D0], v27);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v24, v18);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
}

unint64_t sub_23C0A94E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256B10050;
  if (!qword_256B10050)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10058);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256B10050);
  }
  return result;
}

unint64_t sub_23C0A9538()
{
  unint64_t result;

  result = qword_256B10060;
  if (!qword_256B10060)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterKind, &type metadata for FilterKind);
    atomic_store(result, (unint64_t *)&qword_256B10060);
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterKind()
{
  return &type metadata for FilterKind;
}

uint64_t _s16FitnessFiltering10FilterKindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23C0A95E0 + 4 * byte_23C0E8430[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23C0A9614 + 4 * byte_23C0E842B[v4]))();
}

uint64_t sub_23C0A9614(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0A961C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0A9624);
  return result;
}

uint64_t sub_23C0A9630(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0A9638);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23C0A963C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0A9644(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterKind.CodingKeys()
{
  return &type metadata for FilterKind.CodingKeys;
}

ValueMetadata *type metadata accessor for FilterKind.BodyFocusCodingKeys()
{
  return &type metadata for FilterKind.BodyFocusCodingKeys;
}

ValueMetadata *type metadata accessor for FilterKind.DurationCodingKeys()
{
  return &type metadata for FilterKind.DurationCodingKeys;
}

ValueMetadata *type metadata accessor for FilterKind.EquipmentCodingKeys()
{
  return &type metadata for FilterKind.EquipmentCodingKeys;
}

ValueMetadata *type metadata accessor for FilterKind.ModalityCodingKeys()
{
  return &type metadata for FilterKind.ModalityCodingKeys;
}

ValueMetadata *type metadata accessor for FilterKind.MusicGenreCodingKeys()
{
  return &type metadata for FilterKind.MusicGenreCodingKeys;
}

ValueMetadata *type metadata accessor for FilterKind.SkillLevelCodingKeys()
{
  return &type metadata for FilterKind.SkillLevelCodingKeys;
}

ValueMetadata *type metadata accessor for FilterKind.ThemeCodingKeys()
{
  return &type metadata for FilterKind.ThemeCodingKeys;
}

ValueMetadata *type metadata accessor for FilterKind.TrainerCodingKeys()
{
  return &type metadata for FilterKind.TrainerCodingKeys;
}

ValueMetadata *type metadata accessor for FilterKind.TraitCodingKeys()
{
  return &type metadata for FilterKind.TraitCodingKeys;
}

unint64_t sub_23C0A96F4()
{
  unint64_t result;

  result = qword_256B10068;
  if (!qword_256B10068)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E89F4, &type metadata for FilterKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10068);
  }
  return result;
}

unint64_t sub_23C0A973C()
{
  unint64_t result;

  result = qword_256B10070;
  if (!qword_256B10070)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8914, &type metadata for FilterKind.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10070);
  }
  return result;
}

unint64_t sub_23C0A9784()
{
  unint64_t result;

  result = qword_256B10078;
  if (!qword_256B10078)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E893C, &type metadata for FilterKind.BodyFocusCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10078);
  }
  return result;
}

unint64_t sub_23C0A97CC()
{
  unint64_t result;

  result = qword_256B10080;
  if (!qword_256B10080)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E88C4, &type metadata for FilterKind.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10080);
  }
  return result;
}

unint64_t sub_23C0A9814()
{
  unint64_t result;

  result = qword_256B10088;
  if (!qword_256B10088)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E88EC, &type metadata for FilterKind.DurationCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10088);
  }
  return result;
}

unint64_t sub_23C0A985C()
{
  unint64_t result;

  result = qword_256B10090;
  if (!qword_256B10090)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8874, &type metadata for FilterKind.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10090);
  }
  return result;
}

unint64_t sub_23C0A98A4()
{
  unint64_t result;

  result = qword_256B10098;
  if (!qword_256B10098)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E889C, &type metadata for FilterKind.EquipmentCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10098);
  }
  return result;
}

unint64_t sub_23C0A98EC()
{
  unint64_t result;

  result = qword_256B100A0;
  if (!qword_256B100A0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8824, &type metadata for FilterKind.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100A0);
  }
  return result;
}

unint64_t sub_23C0A9934()
{
  unint64_t result;

  result = qword_256B100A8;
  if (!qword_256B100A8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E884C, &type metadata for FilterKind.ModalityCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100A8);
  }
  return result;
}

unint64_t sub_23C0A997C()
{
  unint64_t result;

  result = qword_256B100B0;
  if (!qword_256B100B0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E87D4, &type metadata for FilterKind.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100B0);
  }
  return result;
}

unint64_t sub_23C0A99C4()
{
  unint64_t result;

  result = qword_256B100B8;
  if (!qword_256B100B8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E87FC, &type metadata for FilterKind.MusicGenreCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100B8);
  }
  return result;
}

unint64_t sub_23C0A9A0C()
{
  unint64_t result;

  result = qword_256B100C0;
  if (!qword_256B100C0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8784, &type metadata for FilterKind.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100C0);
  }
  return result;
}

unint64_t sub_23C0A9A54()
{
  unint64_t result;

  result = qword_256B100C8;
  if (!qword_256B100C8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E87AC, &type metadata for FilterKind.SkillLevelCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100C8);
  }
  return result;
}

unint64_t sub_23C0A9A9C()
{
  unint64_t result;

  result = qword_256B100D0;
  if (!qword_256B100D0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8734, &type metadata for FilterKind.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100D0);
  }
  return result;
}

unint64_t sub_23C0A9AE4()
{
  unint64_t result;

  result = qword_256B100D8;
  if (!qword_256B100D8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E875C, &type metadata for FilterKind.ThemeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100D8);
  }
  return result;
}

unint64_t sub_23C0A9B2C()
{
  unint64_t result;

  result = qword_256B100E0;
  if (!qword_256B100E0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E86E4, &type metadata for FilterKind.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100E0);
  }
  return result;
}

unint64_t sub_23C0A9B74()
{
  unint64_t result;

  result = qword_256B100E8;
  if (!qword_256B100E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E870C, &type metadata for FilterKind.TrainerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100E8);
  }
  return result;
}

unint64_t sub_23C0A9BBC()
{
  unint64_t result;

  result = qword_256B100F0;
  if (!qword_256B100F0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8694, &type metadata for FilterKind.TraitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100F0);
  }
  return result;
}

unint64_t sub_23C0A9C04()
{
  unint64_t result;

  result = qword_256B100F8;
  if (!qword_256B100F8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E86BC, &type metadata for FilterKind.TraitCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B100F8);
  }
  return result;
}

unint64_t sub_23C0A9C4C()
{
  unint64_t result;

  result = qword_256B10100;
  if (!qword_256B10100)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8964, &type metadata for FilterKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10100);
  }
  return result;
}

unint64_t sub_23C0A9C94()
{
  unint64_t result;

  result = qword_256B10108;
  if (!qword_256B10108)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E898C, &type metadata for FilterKind.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10108);
  }
  return result;
}

uint64_t FilterState.loadState.getter@<X0>(void *a1@<X8>)
{
  const void *v1;
  _BYTE v4[288];

  sub_23C07C14C(v1, v4);
  sub_23C07C14C(v4, a1);
  return sub_23C08F06C((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23C07C1D4);
}

void *FilterState.loadState.setter(const void *a1)
{
  void *v1;
  _BYTE v3[280];
  _BYTE v4[280];

  sub_23C07C14C(a1, v3);
  sub_23C07C14C(v1, v4);
  sub_23C08F06C((uint64_t)v4, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_23C07C6D0);
  return sub_23C07C14C(v3, v1);
}

uint64_t (*FilterState.loadState.modify())()
{
  return nullsub_1;
}

__n128 FilterState.init(layout:loadState:locale:rootFilterItem:rootFilterName:shouldResetFilterOnDisposal:)@<Q0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char *a8@<X8>)
{
  unint64_t v15;
  char v16;
  int *v17;
  char *v18;
  uint64_t v19;
  __n128 *v20;
  __n128 result;
  char *v22;
  __n128 v23;
  __n128 v24;
  _BYTE v25[280];

  sub_23C07C14C(a2, v25);
  v23 = a4[1];
  v24 = *a4;
  v15 = a4[2].n128_u64[0];
  v16 = a4[2].n128_i8[8];
  v17 = (int *)type metadata accessor for FilterState();
  sub_23C0A9EC0(a1, (uint64_t)&a8[v17[5]]);
  sub_23C07C14C(v25, a8);
  v18 = &a8[v17[6]];
  v19 = sub_23C0E3ED4();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a3, v19);
  v20 = (__n128 *)&a8[v17[7]];
  result = v23;
  *v20 = v24;
  v20[1] = v23;
  v20[2].n128_u64[0] = v15;
  v20[2].n128_u8[8] = v16;
  v22 = &a8[v17[8]];
  *(_QWORD *)v22 = a5;
  *((_QWORD *)v22 + 1) = a6;
  a8[v17[9]] = a7;
  return result;
}

uint64_t type metadata accessor for FilterState()
{
  uint64_t result;

  result = qword_256B10210;
  if (!qword_256B10210)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23C0A9EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilterLayout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C0A9F04()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0A9F38 + 4 * byte_23C0E8D40[*v0]))(0x7461745364616F6CLL, 0xE900000000000065);
}

uint64_t sub_23C0A9F38()
{
  return 0x74756F79616CLL;
}

uint64_t sub_23C0A9F4C()
{
  return 0x656C61636F6CLL;
}

uint64_t sub_23C0A9F60()
{
  return 0x746C6946746F6F72;
}

unint64_t sub_23C0A9F94()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_23C0A9FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0ABEB4(a1, a2);
  *a3 = result;
  return result;
}

void sub_23C0A9FD4(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_23C0A9FE0()
{
  sub_23C0AA2D0();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0AA008()
{
  sub_23C0AA2D0();
  return sub_23C0E4AF8();
}

uint64_t FilterState.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  _OWORD v15[2];
  uint64_t v16;
  char v17;
  _BYTE v18[288];
  char v19;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10160);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0AA2D0();
  sub_23C0E4AE0();
  sub_23C07C14C(v3, v18);
  sub_23C07C14C(v18, v15);
  v19 = 0;
  sub_23C0AA314();
  sub_23C0E4A44();
  if (!v2)
  {
    v9 = type metadata accessor for FilterState();
    LOBYTE(v15[0]) = 1;
    type metadata accessor for FilterLayout();
    sub_23C0683A4(&qword_256B10178, (uint64_t (*)(uint64_t))type metadata accessor for FilterLayout, (uint64_t)&protocol conformance descriptor for FilterLayout);
    sub_23C0E4A44();
    LOBYTE(v15[0]) = 2;
    sub_23C0E3ED4();
    sub_23C0683A4(&qword_256B10180, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEC8]);
    sub_23C0E4A44();
    v10 = &v3[*(int *)(v9 + 28)];
    v11 = *((_QWORD *)v10 + 4);
    v12 = v10[40];
    v13 = *((_OWORD *)v10 + 1);
    v15[0] = *(_OWORD *)v10;
    v15[1] = v13;
    v16 = v11;
    v17 = v12;
    v19 = 3;
    sub_23C068798();
    sub_23C0E4A44();
    LOBYTE(v15[0]) = 4;
    sub_23C0E4A08();
    LOBYTE(v15[0]) = 5;
    sub_23C0E4A14();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23C0AA2D0()
{
  unint64_t result;

  result = qword_256B10168;
  if (!qword_256B10168)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8F44, &type metadata for FilterState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10168);
  }
  return result;
}

unint64_t sub_23C0AA314()
{
  unint64_t result;

  result = qword_256B10170;
  if (!qword_256B10170)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterLoadState, &type metadata for FilterLoadState);
    atomic_store(result, (unint64_t *)&qword_256B10170);
  }
  return result;
}

uint64_t FilterState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  _BYTE v40[280];
  _BYTE v41[304];

  v27 = a2;
  v32 = sub_23C0E3ED4();
  v29 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8](v32);
  v28 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for FilterLayout();
  MEMORY[0x24BDAC7A8](v30);
  v31 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10188);
  v5 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for FilterState();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0AA2D0();
  v34 = v7;
  v11 = v35;
  sub_23C0E4AD4();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v35 = v5;
  v12 = (uint64_t)v31;
  v13 = v32;
  v41[303] = 0;
  sub_23C0AA88C();
  sub_23C0E49C0();
  sub_23C07C14C(v41, v40);
  v26 = v10;
  sub_23C07C14C(v40, v10);
  LOBYTE(v36) = 1;
  sub_23C0683A4(&qword_256B10198, (uint64_t (*)(uint64_t))type metadata accessor for FilterLayout, (uint64_t)&protocol conformance descriptor for FilterLayout);
  sub_23C0E49C0();
  sub_23C0A9EC0(v12, (uint64_t)&v26[v8[5]]);
  LOBYTE(v36) = 2;
  sub_23C0683A4(&qword_256B101A0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEEE8]);
  v14 = v28;
  v15 = v13;
  sub_23C0E49C0();
  v16 = (uint64_t)v26;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(&v26[v8[6]], v14, v15);
  v41[302] = 3;
  sub_23C068B84();
  sub_23C0E49C0();
  v17 = v38;
  v18 = v39;
  v19 = v16 + v8[7];
  v20 = v37;
  *(_OWORD *)v19 = v36;
  *(_OWORD *)(v19 + 16) = v20;
  *(_QWORD *)(v19 + 32) = v17;
  *(_BYTE *)(v19 + 40) = v18;
  LOBYTE(v36) = 4;
  v21 = sub_23C0E4984();
  v22 = (uint64_t *)(v16 + v8[8]);
  *v22 = v21;
  v22[1] = v23;
  LOBYTE(v36) = 5;
  v24 = sub_23C0E4990();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v33);
  *(_BYTE *)(v16 + v8[9]) = v24 & 1;
  sub_23C0AA8D0(v16, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23C08FC60(v16, (uint64_t (*)(_QWORD))type metadata accessor for FilterState);
}

unint64_t sub_23C0AA88C()
{
  unint64_t result;

  result = qword_256B10190;
  if (!qword_256B10190)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterLoadState, &type metadata for FilterLoadState);
    atomic_store(result, (unint64_t *)&qword_256B10190);
  }
  return result;
}

uint64_t sub_23C0AA8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilterState();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C0AA914@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FilterState.init(from:)(a1, a2);
}

uint64_t sub_23C0AA928(_QWORD *a1)
{
  return FilterState.encode(to:)(a1);
}

uint64_t FilterState.hash(into:)()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;
  char v9;
  _BYTE v10[280];

  sub_23C07C14C(v0, v10);
  sub_23C07C14C(v10, v7);
  FilterLoadState.hash(into:)();
  v1 = type metadata accessor for FilterState();
  sub_23C0E3F4C();
  sub_23C0683A4(&qword_256B101A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB0]);
  sub_23C0E4714();
  type metadata accessor for FilterLayout();
  sub_23C0E4AA4();
  sub_23C0E3ED4();
  sub_23C0683A4(&qword_256B101B0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEEA8], MEMORY[0x24BDCEED0]);
  sub_23C0E4714();
  v2 = &v0[*(int *)(v1 + 28)];
  v3 = *((_QWORD *)v2 + 4);
  v4 = v2[40];
  v5 = *((_OWORD *)v2 + 1);
  v7[0] = *(_OWORD *)v2;
  v7[1] = v5;
  v8 = v3;
  v9 = v4;
  FilterItem.hash(into:)();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AB0();
}

uint64_t FilterState.hashValue.getter()
{
  sub_23C0E4A98();
  FilterState.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0AAAE4()
{
  sub_23C0E4A98();
  FilterState.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0AAB24()
{
  sub_23C0E4A98();
  FilterState.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t _s16FitnessFiltering11FilterStateV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char *v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char v23;
  char v24;
  _OWORD v26[2];
  uint64_t v27;
  char v28;
  _OWORD v29[2];
  uint64_t v30;
  char v31;
  _BYTE v32[280];
  _BYTE v33[280];

  sub_23C07C14C(a1, v32);
  sub_23C07C14C(v32, v29);
  sub_23C07C14C(a2, v33);
  sub_23C07C14C(v33, v26);
  _s16FitnessFiltering15FilterLoadStateO2eeoiySbAC_ACtFZ_0(v29, v26);
  if ((v4 & 1) == 0)
    goto LABEL_10;
  v5 = (int *)type metadata accessor for FilterState();
  v6 = v5[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  if ((MEMORY[0x242616098](&a1[v6], &a2[v6]) & 1) == 0)
    goto LABEL_10;
  v9 = type metadata accessor for FilterLayout();
  if (v7[*(int *)(v9 + 20)] != v8[*(int *)(v9 + 20)])
    goto LABEL_10;
  if ((MEMORY[0x242616038](&a1[v5[6]], &a2[v5[6]]) & 1) == 0)
    goto LABEL_10;
  v10 = &a1[v5[7]];
  v11 = *((_QWORD *)v10 + 4);
  v12 = v10[40];
  v13 = *((_OWORD *)v10 + 1);
  v29[0] = *(_OWORD *)v10;
  v29[1] = v13;
  v30 = v11;
  v31 = v12;
  v14 = &a2[v5[7]];
  v15 = *((_QWORD *)v14 + 4);
  v16 = v14[40];
  v17 = *((_OWORD *)v14 + 1);
  v26[0] = *(_OWORD *)v14;
  v26[1] = v17;
  v27 = v15;
  v28 = v16;
  _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v29);
  if ((v18 & 1) != 0)
  {
    v19 = v5[8];
    v20 = *(_QWORD *)&a1[v19];
    v21 = *(_QWORD *)&a1[v19 + 8];
    v22 = &a2[v19];
    if (v20 == *(_QWORD *)v22 && v21 == *((_QWORD *)v22 + 1) || (v23 = sub_23C0E4A74(), v24 = 0, (v23 & 1) != 0))
      v24 = a1[v5[9]] ^ a2[v5[9]] ^ 1;
  }
  else
  {
LABEL_10:
    v24 = 0;
  }
  return v24 & 1;
}

uint64_t sub_23C0AACD8()
{
  return sub_23C0683A4(&qword_256B0F3F8, (uint64_t (*)(uint64_t))type metadata accessor for FilterState, (uint64_t)&protocol conformance descriptor for FilterState);
}

unint64_t initializeBufferWithCopyOfBuffer for FilterState(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v36 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v65 = *(_QWORD *)(a2 + 64);
    v38 = *(_QWORD *)(a2 + 72);
    v39 = *(_QWORD *)(a2 + 80);
    v40 = *(_QWORD *)(a2 + 88);
    v41 = *(_QWORD *)(a2 + 96);
    v42 = *(_QWORD *)(a2 + 104);
    v43 = *(_QWORD *)(a2 + 112);
    v44 = *(_QWORD *)(a2 + 120);
    v45 = *(_QWORD *)(a2 + 128);
    v46 = *(_QWORD *)(a2 + 136);
    v47 = *(_QWORD *)(a2 + 144);
    v48 = *(_QWORD *)(a2 + 152);
    v49 = *(_QWORD *)(a2 + 160);
    v51 = *(_QWORD *)(a2 + 168);
    v52 = *(_QWORD *)(a2 + 176);
    v53 = *(_QWORD *)(a2 + 184);
    v54 = *(_QWORD *)(a2 + 192);
    v55 = *(_QWORD *)(a2 + 200);
    v56 = *(_QWORD *)(a2 + 208);
    v57 = *(_QWORD *)(a2 + 216);
    v58 = *(_QWORD *)(a2 + 224);
    v59 = *(_QWORD *)(a2 + 232);
    v60 = *(_QWORD *)(a2 + 240);
    v61 = *(_QWORD *)(a2 + 248);
    v62 = *(_QWORD *)(a2 + 256);
    v63 = *(_QWORD *)(a2 + 264);
    v64 = *(_BYTE *)(a2 + 272);
    v7 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 40);
    v13 = *(_QWORD *)(a2 + 56);
    sub_23C07C1D4(*(_QWORD *)a2, v7, v8, v9, v10, v12, v11, v13, v65, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47,
      v48,
      v49,
      v51,
      v52,
      v53,
      v54,
      v55,
      v56,
      v57,
      v58,
      v59,
      v60,
      v61,
      v62,
      v63,
      v64);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v13;
    *(_QWORD *)(a1 + 64) = v65;
    *(_QWORD *)(a1 + 72) = v38;
    *(_QWORD *)(a1 + 80) = v39;
    *(_QWORD *)(a1 + 88) = v40;
    *(_QWORD *)(a1 + 96) = v41;
    *(_QWORD *)(a1 + 104) = v42;
    *(_QWORD *)(a1 + 112) = v43;
    *(_QWORD *)(a1 + 120) = v44;
    *(_QWORD *)(a1 + 128) = v45;
    *(_QWORD *)(a1 + 136) = v46;
    *(_QWORD *)(a1 + 144) = v47;
    *(_QWORD *)(a1 + 152) = v48;
    *(_QWORD *)(a1 + 160) = v49;
    *(_QWORD *)(a1 + 168) = v51;
    *(_QWORD *)(a1 + 176) = v52;
    *(_QWORD *)(a1 + 184) = v53;
    *(_QWORD *)(a1 + 192) = v54;
    *(_QWORD *)(a1 + 200) = v55;
    *(_QWORD *)(a1 + 208) = v56;
    *(_QWORD *)(a1 + 216) = v57;
    *(_QWORD *)(a1 + 224) = v58;
    *(_QWORD *)(a1 + 232) = v59;
    *(_QWORD *)(a1 + 240) = v60;
    *(_QWORD *)(a1 + 248) = v61;
    *(_QWORD *)(a1 + 256) = v62;
    *(_QWORD *)(a1 + 264) = v63;
    v14 = a3[5];
    v15 = a1 + v14;
    v16 = a2 + v14;
    *(_BYTE *)(a1 + 272) = v64;
    v17 = sub_23C0E3F4C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    v18 = type metadata accessor for FilterLayout();
    *(_BYTE *)(v15 + *(int *)(v18 + 20)) = *(_BYTE *)(v16 + *(int *)(v18 + 20));
    v19 = a3[6];
    v20 = a1 + v19;
    v21 = a2 + v19;
    v22 = sub_23C0E3ED4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v20, v21, v22);
    v23 = a3[7];
    v24 = a1 + v23;
    v25 = a2 + v23;
    v26 = *(_QWORD *)v25;
    v27 = *(_QWORD *)(v25 + 8);
    v28 = *(_QWORD *)(v25 + 16);
    v29 = *(_QWORD *)(v25 + 24);
    v30 = *(_QWORD *)(v25 + 32);
    LOBYTE(v10) = *(_BYTE *)(v25 + 40);
    sub_23C0682C0(*(_QWORD *)v25, v27, v28, v29, v30, v10);
    *(_QWORD *)v24 = v26;
    *(_QWORD *)(v24 + 8) = v27;
    *(_QWORD *)(v24 + 16) = v28;
    *(_QWORD *)(v24 + 24) = v29;
    *(_QWORD *)(v24 + 32) = v30;
    *(_BYTE *)(v24 + 40) = v10;
    v31 = a3[8];
    v32 = a3[9];
    v33 = (_QWORD *)(a1 + v31);
    v34 = (_QWORD *)(a2 + v31);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    *(_BYTE *)(a1 + v32) = *(_BYTE *)(a2 + v32);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FilterState(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;

  v10 = *(_OWORD *)(a1 + 224);
  v11 = *(_OWORD *)(a1 + 240);
  sub_23C07C6D0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v10,
    *((uint64_t *)&v10 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_BYTE *)(a1 + 272));
  v4 = a1 + a2[5];
  v5 = sub_23C0E3F4C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = sub_23C0E3ED4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = a1 + a2[7];
  sub_23C0682A8(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), *(_QWORD *)(v8 + 32), *(_BYTE *)(v8 + 40));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FilterState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;

  v36 = *(_QWORD *)(a2 + 64);
  v37 = *(_QWORD *)(a2 + 72);
  v38 = *(_QWORD *)(a2 + 80);
  v39 = *(_QWORD *)(a2 + 88);
  v40 = *(_QWORD *)(a2 + 96);
  v41 = *(_QWORD *)(a2 + 104);
  v42 = *(_QWORD *)(a2 + 112);
  v43 = *(_QWORD *)(a2 + 120);
  v44 = *(_QWORD *)(a2 + 128);
  v45 = *(_QWORD *)(a2 + 136);
  v46 = *(_QWORD *)(a2 + 144);
  v47 = *(_QWORD *)(a2 + 152);
  v48 = *(_QWORD *)(a2 + 160);
  v49 = *(_QWORD *)(a2 + 168);
  v50 = *(_QWORD *)(a2 + 176);
  v51 = *(_QWORD *)(a2 + 184);
  v52 = *(_QWORD *)(a2 + 192);
  v53 = *(_QWORD *)(a2 + 200);
  v54 = *(_QWORD *)(a2 + 208);
  v55 = *(_QWORD *)(a2 + 216);
  v56 = *(_QWORD *)(a2 + 224);
  v57 = *(_QWORD *)(a2 + 232);
  v58 = *(_QWORD *)(a2 + 240);
  v59 = *(_QWORD *)(a2 + 248);
  v60 = *(_QWORD *)(a2 + 256);
  v61 = *(_QWORD *)(a2 + 264);
  v62 = *(_BYTE *)(a2 + 272);
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 8);
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a2 + 40);
  sub_23C07C1D4(*(_QWORD *)a2, v7, v8, v9, v10, v12, v11, v5, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54,
    v55,
    v56,
    v57,
    v58,
    v59,
    v60,
    v61,
    v62);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v36;
  *(_QWORD *)(a1 + 72) = v37;
  *(_QWORD *)(a1 + 80) = v38;
  *(_QWORD *)(a1 + 88) = v39;
  *(_QWORD *)(a1 + 96) = v40;
  *(_QWORD *)(a1 + 104) = v41;
  *(_QWORD *)(a1 + 112) = v42;
  *(_QWORD *)(a1 + 120) = v43;
  *(_QWORD *)(a1 + 128) = v44;
  *(_QWORD *)(a1 + 136) = v45;
  *(_QWORD *)(a1 + 144) = v46;
  *(_QWORD *)(a1 + 152) = v47;
  *(_QWORD *)(a1 + 160) = v48;
  *(_QWORD *)(a1 + 168) = v49;
  *(_QWORD *)(a1 + 176) = v50;
  *(_QWORD *)(a1 + 184) = v51;
  *(_QWORD *)(a1 + 192) = v52;
  *(_QWORD *)(a1 + 200) = v53;
  *(_QWORD *)(a1 + 208) = v54;
  *(_QWORD *)(a1 + 216) = v55;
  *(_QWORD *)(a1 + 224) = v56;
  *(_QWORD *)(a1 + 232) = v57;
  *(_QWORD *)(a1 + 240) = v58;
  *(_QWORD *)(a1 + 248) = v59;
  *(_QWORD *)(a1 + 256) = v60;
  *(_QWORD *)(a1 + 264) = v61;
  v13 = a3[5];
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)(a1 + 272) = v62;
  v16 = sub_23C0E3F4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = type metadata accessor for FilterLayout();
  *(_BYTE *)(v14 + *(int *)(v17 + 20)) = *(_BYTE *)(v15 + *(int *)(v17 + 20));
  v18 = a3[6];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_23C0E3ED4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
  v22 = a3[7];
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = *(_QWORD *)v24;
  v26 = *(_QWORD *)(v24 + 8);
  v27 = *(_QWORD *)(v24 + 16);
  v28 = *(_QWORD *)(v24 + 24);
  v29 = *(_QWORD *)(v24 + 32);
  LOBYTE(v9) = *(_BYTE *)(v24 + 40);
  sub_23C0682C0(*(_QWORD *)v24, v26, v27, v28, v29, v9);
  *(_QWORD *)v23 = v25;
  *(_QWORD *)(v23 + 8) = v26;
  *(_QWORD *)(v23 + 16) = v27;
  *(_QWORD *)(v23 + 24) = v28;
  *(_QWORD *)(v23 + 32) = v29;
  *(_BYTE *)(v23 + 40) = v9;
  v30 = a3[8];
  v31 = a3[9];
  v32 = (_QWORD *)(a1 + v30);
  v33 = (_QWORD *)(a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  *(_BYTE *)(a1 + v31) = *(_BYTE *)(a2 + v31);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FilterState(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v89 = *(_QWORD *)(a2 + 8);
  v90 = *(_QWORD *)a2;
  v87 = *(_QWORD *)(a2 + 24);
  v88 = *(_QWORD *)(a2 + 16);
  v85 = *(_QWORD *)(a2 + 40);
  v86 = *(_QWORD *)(a2 + 32);
  v84 = *(_QWORD *)(a2 + 48);
  v83 = *(_QWORD *)(a2 + 56);
  v63 = *(_QWORD *)(a2 + 64);
  v64 = *(_QWORD *)(a2 + 72);
  v65 = *(_QWORD *)(a2 + 80);
  v66 = *(_QWORD *)(a2 + 88);
  v67 = *(_QWORD *)(a2 + 96);
  v68 = *(_QWORD *)(a2 + 104);
  v69 = *(_QWORD *)(a2 + 112);
  v70 = *(_QWORD *)(a2 + 120);
  v71 = *(_QWORD *)(a2 + 128);
  v5 = *(_QWORD *)(a2 + 144);
  v6 = *(_QWORD *)(a2 + 152);
  v7 = *(_QWORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 168);
  v9 = *(_QWORD *)(a2 + 176);
  v10 = *(_QWORD *)(a2 + 184);
  v11 = *(_QWORD *)(a2 + 192);
  v12 = *(_QWORD *)(a2 + 200);
  v72 = *(_QWORD *)(a2 + 136);
  v73 = *(_QWORD *)(a2 + 208);
  v74 = *(_QWORD *)(a2 + 216);
  v75 = *(_QWORD *)(a2 + 224);
  v76 = *(_QWORD *)(a2 + 232);
  v77 = *(_QWORD *)(a2 + 240);
  v78 = *(_QWORD *)(a2 + 248);
  v79 = *(_QWORD *)(a2 + 256);
  v80 = *(_QWORD *)(a2 + 264);
  v81 = *(_BYTE *)(a2 + 272);
  sub_23C07C1D4(*(_QWORD *)a2, v89, v88, v87, v86, v85, v84, v83, v63, v64, v65, v66, v67, v68, v69, v70, *(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136), *(_QWORD *)(a2 + 144),
    *(_QWORD *)(a2 + 152),
    *(_QWORD *)(a2 + 160),
    *(_QWORD *)(a2 + 168),
    *(_QWORD *)(a2 + 176),
    *(_QWORD *)(a2 + 184),
    *(_QWORD *)(a2 + 192),
    *(_QWORD *)(a2 + 200),
    *(_QWORD *)(a2 + 208),
    *(_QWORD *)(a2 + 216),
    *(_QWORD *)(a2 + 224),
    *(_QWORD *)(a2 + 232),
    *(_QWORD *)(a2 + 240),
    *(_QWORD *)(a2 + 248),
    *(_QWORD *)(a2 + 256),
    *(_QWORD *)(a2 + 264),
    *(_BYTE *)(a2 + 272));
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v90;
  *(_QWORD *)(a1 + 8) = v89;
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v88;
  *(_QWORD *)(a1 + 24) = v87;
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v86;
  *(_QWORD *)(a1 + 40) = v85;
  v19 = *(_QWORD *)(a1 + 48);
  v20 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v84;
  *(_QWORD *)(a1 + 56) = v83;
  v21 = *(_OWORD *)(a1 + 64);
  v22 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v63;
  *(_QWORD *)(a1 + 72) = v64;
  *(_QWORD *)(a1 + 80) = v65;
  *(_QWORD *)(a1 + 88) = v66;
  v23 = *(_OWORD *)(a1 + 96);
  v24 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v67;
  *(_QWORD *)(a1 + 104) = v68;
  *(_QWORD *)(a1 + 112) = v69;
  *(_QWORD *)(a1 + 120) = v70;
  v25 = *(_OWORD *)(a1 + 128);
  v26 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v71;
  *(_QWORD *)(a1 + 136) = v72;
  *(_QWORD *)(a1 + 144) = v5;
  v27 = *(_OWORD *)(a1 + 160);
  v28 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 168) = v8;
  *(_QWORD *)(a1 + 176) = v9;
  v29 = *(_OWORD *)(a1 + 192);
  v30 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = v10;
  *(_QWORD *)(a1 + 192) = v11;
  *(_QWORD *)(a1 + 200) = v12;
  *(_QWORD *)(a1 + 208) = v73;
  *(_QWORD *)(a1 + 216) = v74;
  v31 = *(_OWORD *)(a1 + 224);
  v32 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v75;
  *(_QWORD *)(a1 + 232) = v76;
  *(_QWORD *)(a1 + 240) = v77;
  *(_QWORD *)(a1 + 248) = v78;
  v33 = *(_QWORD *)(a1 + 256);
  v34 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v79;
  *(_QWORD *)(a1 + 264) = v80;
  v35 = *(_BYTE *)(a1 + 272);
  *(_BYTE *)(a1 + 272) = v81;
  sub_23C07C6D0(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25, *((uint64_t *)&v25 + 1), v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    *((uint64_t *)&v32 + 1),
    v33,
    v34,
    v35);
  v36 = a3[5];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = sub_23C0E3F4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
  v40 = type metadata accessor for FilterLayout();
  *(_BYTE *)(v37 + *(int *)(v40 + 20)) = *(_BYTE *)(v38 + *(int *)(v40 + 20));
  v41 = a3[6];
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = sub_23C0E3ED4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 24))(v42, v43, v44);
  v45 = a3[7];
  v46 = a1 + v45;
  v47 = a2 + v45;
  v48 = *(_QWORD *)v47;
  v49 = *(_QWORD *)(v47 + 8);
  v50 = *(_QWORD *)(v47 + 16);
  v51 = *(_QWORD *)(v47 + 24);
  v52 = *(_QWORD *)(v47 + 32);
  LOBYTE(v10) = *(_BYTE *)(v47 + 40);
  sub_23C0682C0(*(_QWORD *)v47, v49, v50, v51, v52, v10);
  v53 = *(_QWORD *)v46;
  v54 = *(_QWORD *)(v46 + 8);
  v55 = *(_QWORD *)(v46 + 16);
  v56 = *(_QWORD *)(v46 + 24);
  v57 = *(_QWORD *)(v46 + 32);
  *(_QWORD *)v46 = v48;
  *(_QWORD *)(v46 + 8) = v49;
  *(_QWORD *)(v46 + 16) = v50;
  *(_QWORD *)(v46 + 24) = v51;
  *(_QWORD *)(v46 + 32) = v52;
  v58 = *(_BYTE *)(v46 + 40);
  *(_BYTE *)(v46 + 40) = v10;
  sub_23C0682A8(v53, v54, v55, v56, v57, v58);
  v59 = a3[8];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (_QWORD *)(a2 + v59);
  *v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

char *initializeWithTake for FilterState(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;

  memcpy(a1, a2, 0x111uLL);
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23C0E3F4C();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for FilterLayout();
  v7[*(int *)(v10 + 20)] = v8[*(int *)(v10 + 20)];
  v11 = a3[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v14 = sub_23C0E3ED4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
  v15 = a3[7];
  v16 = a3[8];
  v17 = &a1[v15];
  v18 = &a2[v15];
  v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  *(_OWORD *)(v17 + 25) = *(_OWORD *)(v18 + 25);
  *(_OWORD *)&a1[v16] = *(_OWORD *)&a2[v16];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t assignWithTake for FilterState(uint64_t a1, uint64_t a2, int *a3)
{
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  unsigned __int8 v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;

  v6 = *(_BYTE *)(a2 + 272);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 96);
  v18 = *(_OWORD *)(a1 + 112);
  v19 = *(_OWORD *)(a1 + 128);
  v20 = *(_OWORD *)(a1 + 144);
  v21 = *(_OWORD *)(a1 + 160);
  v22 = *(_OWORD *)(a1 + 176);
  v23 = *(_OWORD *)(a1 + 192);
  v24 = *(_OWORD *)(a1 + 208);
  v25 = *(_OWORD *)(a1 + 224);
  v26 = *(_OWORD *)(a1 + 240);
  v27 = *(_QWORD *)(a1 + 256);
  v28 = *(_QWORD *)(a1 + 264);
  v29 = *(_BYTE *)(a1 + 272);
  v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v30;
  v31 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v31;
  v32 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v32;
  v33 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v33;
  v34 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v34;
  v35 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v35;
  v36 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v36;
  v37 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v37;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = v6;
  sub_23C07C6D0(v7, v8, v9, v10, v11, v12, v13, v14, v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18, *((uint64_t *)&v18 + 1), v19, *((uint64_t *)&v19 + 1), v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    v28,
    v29);
  v38 = a3[5];
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = sub_23C0E3F4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 40))(v39, v40, v41);
  v42 = type metadata accessor for FilterLayout();
  *(_BYTE *)(v39 + *(int *)(v42 + 20)) = *(_BYTE *)(v40 + *(int *)(v42 + 20));
  v43 = a3[6];
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_23C0E3ED4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  v47 = a3[7];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = *(_QWORD *)(v49 + 32);
  v51 = *(_BYTE *)(v49 + 40);
  v52 = *(_QWORD *)v48;
  v53 = *(_QWORD *)(v48 + 8);
  v54 = *(_QWORD *)(v48 + 16);
  v55 = *(_QWORD *)(v48 + 24);
  v56 = *(_QWORD *)(v48 + 32);
  v57 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v57;
  *(_QWORD *)(v48 + 32) = v50;
  v58 = *(_BYTE *)(v48 + 40);
  *(_BYTE *)(v48 + 40) = v51;
  sub_23C0682A8(v52, v53, v54, v55, v56, v58);
  v59 = a3[8];
  v60 = (_QWORD *)(a1 + v59);
  v61 = (uint64_t *)(a2 + v59);
  v63 = *v61;
  v62 = v61[1];
  *v60 = v63;
  v60[1] = v62;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0ABA7C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for FilterLayout();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_23C0E3ED4();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0ABB30(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for FilterLayout();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_23C0E3ED4();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
  return result;
}

uint64_t sub_23C0ABBD4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for FilterLayout();
  if (v1 <= 0x3F)
  {
    result = sub_23C0E3ED4();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FilterState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23C0ABD5C + 4 * byte_23C0E8D4B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23C0ABD90 + 4 * byte_23C0E8D46[v4]))();
}

uint64_t sub_23C0ABD90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0ABD98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0ABDA0);
  return result;
}

uint64_t sub_23C0ABDAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0ABDB4);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23C0ABDB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0ABDC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterState.CodingKeys()
{
  return &type metadata for FilterState.CodingKeys;
}

unint64_t sub_23C0ABDE0()
{
  unint64_t result;

  result = qword_256B10258;
  if (!qword_256B10258)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8F1C, &type metadata for FilterState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10258);
  }
  return result;
}

unint64_t sub_23C0ABE28()
{
  unint64_t result;

  result = qword_256B10260;
  if (!qword_256B10260)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8E8C, &type metadata for FilterState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10260);
  }
  return result;
}

unint64_t sub_23C0ABE70()
{
  unint64_t result;

  result = qword_256B10268;
  if (!qword_256B10268)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E8EB4, &type metadata for FilterState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10268);
  }
  return result;
}

uint64_t sub_23C0ABEB4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7461745364616F6CLL && a2 == 0xE900000000000065;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F79616CLL && a2 == 0xE600000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746C6946746F6F72 && a2 == 0xEE006D6574497265 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x746C6946746F6F72 && a2 == 0xEE00656D614E7265 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000023C0EE190)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23C0AC170(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23C0AC1AC + 4 * byte_23C0E8FA0[a1]))(0xD000000000000014, 0x800000023C0EE210);
}

uint64_t sub_23C0AC1AC()
{
  uint64_t v0;

  return v0 + 9;
}

uint64_t sub_23C0AC1C4()
{
  return 0x704F7265746C6966;
}

uint64_t sub_23C0AC1E8()
{
  return 0x6F547265746C6966;
}

uint64_t sub_23C0AC20C()
{
  return 0x61646F4D746F6F72;
}

uint64_t sub_23C0AC22C()
{
  return 0x65646F4D74726F73;
}

unint64_t sub_23C0AC248()
{
  return 0xD000000000000012;
}

uint64_t sub_23C0AC264(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0AC294 + 4 * byte_23C0E8FA7[a1]))(0x7265746C6966, 0xE600000000000000);
}

uint64_t sub_23C0AC294()
{
  return 0x704F7265746C6966;
}

uint64_t sub_23C0AC2B8()
{
  return 0x65527265746C6966;
}

uint64_t sub_23C0AC2D8()
{
  return 0x61646F4D746F6F72;
}

unint64_t sub_23C0AC2F8()
{
  return 0xD000000000000013;
}

uint64_t sub_23C0AC318()
{
  return 0x65646F4D74726F73;
}

unint64_t sub_23C0AC334()
{
  return 0xD000000000000012;
}

uint64_t sub_23C0AC350()
{
  unsigned __int8 *v0;

  return sub_23C0AC170(*v0);
}

uint64_t sub_23C0AC358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0B04C0(a1, a2);
  *a3 = result;
  return result;
}

void sub_23C0AC37C(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_23C0AC388()
{
  sub_23C0AF64C();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0AC3B0()
{
  sub_23C0AF64C();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0AC3D8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0AC408 + 4 * byte_23C0E8FAE[*v0]))(0x676E69796C707061, 0xE800000000000000);
}

uint64_t sub_23C0AC408()
{
  return 1701602409;
}

uint64_t sub_23C0AC418()
{
  return 0x646564616F6CLL;
}

unint64_t sub_23C0AC42C()
{
  return 0xD000000000000015;
}

uint64_t sub_23C0AC448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0B0800(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0AC46C()
{
  sub_23C0AF3D4();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0AC494()
{
  sub_23C0AF3D4();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0AC4BC()
{
  sub_23C0AF608();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0AC4E4()
{
  sub_23C0AF608();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0AC50C()
{
  unsigned __int8 *v0;

  return sub_23C0AC264(*v0);
}

uint64_t sub_23C0AC514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0B099C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0AC538()
{
  sub_23C0AF45C();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0AC560()
{
  sub_23C0AF45C();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0AC588()
{
  sub_23C0AF418();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0AC5B0()
{
  sub_23C0AF418();
  return sub_23C0E4AF8();
}

void FilterLoadState.encode(to:)(_QWORD *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  _QWORD v10[4];
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _BYTE v19[280];
  _BYTE v20[288];

  v2 = v1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10270);
  v10[2] = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10278);
  v10[1] = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v14 = (char *)v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10280);
  MEMORY[0x24BDAC7A8](v5);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10288);
  v10[0] = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v12 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10290);
  v16 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C07C14C(v2, v19);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0AF3D4();
  v17 = v8;
  sub_23C0E4AE0();
  sub_23C07C14C(v19, v20);
  v9 = (char *)sub_23C0AC7C4 + 4 * word_23C0E8FB2[sub_23C07C1BC((uint64_t)v20)];
  __asm { BR              X10 }
}

uint64_t sub_23C0AC7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  v2 = ((uint64_t (*)(uint64_t))nullsub_1)(v0 + 496);
  v3 = *(_OWORD *)v2;
  *(_OWORD *)(v0 + 80) = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v0 + 96) = v3;
  v4 = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v0 + 32) = v4;
  v5 = *(_QWORD *)(v2 + 64);
  *(_BYTE *)(v0 + 144) = 0;
  sub_23C0AF64C();
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);
  sub_23C0E49E4();
  v9 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 160) = v9;
  v10 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 192) = v10;
  *(_QWORD *)(v0 + 208) = v5;
  *(_BYTE *)(v1 - 65) = 0;
  sub_23C0929CC();
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 136);
  sub_23C0E49FC();
  if (!v12)
  {
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v2 + 72);
    *(_BYTE *)(v1 - 65) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B102B8);
    sub_23C0AF528(&qword_256B102C0, &qword_256B102B8, (uint64_t (*)(void))sub_23C0AF4E4, MEMORY[0x24BEE12A0]);
    sub_23C0E4A44();
    v13 = *(_QWORD *)(v2 + 144);
    v14 = *(_OWORD *)(v2 + 96);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(v0 + 160) = v14;
    v15 = *(_OWORD *)(v2 + 128);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v2 + 112);
    *(_OWORD *)(v0 + 192) = v15;
    *(_QWORD *)(v0 + 208) = v13;
    *(_BYTE *)(v1 - 65) = 2;
    sub_23C092900();
    sub_23C0E4A44();
    v16 = *(_BYTE *)(v2 + 160);
    v17 = *(_QWORD *)(v2 + 168);
    v18 = *(_BYTE *)(v2 + 176);
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v2 + 152);
    *(_BYTE *)(v0 + 152) = v16;
    *(_QWORD *)(v0 + 160) = v17;
    *(_BYTE *)(v0 + 168) = v18;
    *(_BYTE *)(v1 - 65) = 3;
    sub_23C092988();
    sub_23C0E4A44();
    v19 = *(_QWORD *)(v2 + 248);
    v20 = *(_OWORD *)(v2 + 200);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v2 + 184);
    *(_OWORD *)(v0 + 160) = v20;
    v21 = *(_OWORD *)(v2 + 232);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v2 + 216);
    *(_OWORD *)(v0 + 192) = v21;
    *(_QWORD *)(v0 + 208) = v19;
    *(_BYTE *)(v1 - 65) = 4;
    sub_23C0AF4A0();
    sub_23C0E49FC();
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v2 + 256);
    *(_BYTE *)(v1 - 65) = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B102D0);
    sub_23C0AF528(&qword_256B102D8, &qword_256B102D0, (uint64_t (*)(void))sub_23C068820, MEMORY[0x24BEE12A0]);
    sub_23C0E4A44();
    *(_QWORD *)(v0 + 144) = *(_QWORD *)(v2 + 264);
    *(_BYTE *)(v1 - 65) = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B102E0);
    sub_23C0AF58C(&qword_256B102E8, &qword_256B102F0, (uint64_t)&protocol conformance descriptor for FilterSectionDescriptor, MEMORY[0x24BEE12A0]);
    sub_23C0E4A44();
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v0 + 8))(v6, v11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 112) + 8))(v8, v7);
}

uint64_t FilterLoadState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v22[30];
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;

  v28 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10308);
  v22[29] = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v26 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10310);
  v22[26] = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10318);
  v22[27] = *(_QWORD *)(v5 - 8);
  v22[28] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v25 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10320);
  v7 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10328);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v30 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_23C0AF3D4();
  v15 = v31;
  sub_23C0E4AD4();
  if (!v15)
  {
    v22[24] = v7;
    v31 = v9;
    v16 = v13;
    v17 = sub_23C0E49CC();
    if (*(_QWORD *)(v17 + 16) == 1)
    {
      v22[25] = v13;
      __asm { BR              X10 }
    }
    v18 = sub_23C0E4900();
    swift_allocError();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6E8);
    *v20 = &type metadata for FilterLoadState;
    sub_23C0E4960();
    sub_23C0E48F4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x24BEE26D0], v18);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
}

uint64_t sub_23C0AE248@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FilterLoadState.init(from:)(a1, a2);
}

void sub_23C0AE25C(_QWORD *a1)
{
  FilterLoadState.encode(to:)(a1);
}

void FilterLoadState.hash(into:)()
{
  const void *v0;
  char *v1;
  _BYTE v2[280];
  _BYTE v3[288];

  sub_23C07C14C(v0, v2);
  sub_23C07C14C(v2, v3);
  v1 = (char *)sub_23C0AE2D0 + 4 * byte_23C0E8FBE[sub_23C07C1BC((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_23C0AE2D0()
{
  __int128 *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = (uint64_t *)((uint64_t (*)(uint64_t *))nullsub_1)(&v6);
  v2 = *v1;
  sub_23C0E4AA4();
  sub_23C0E4AB0();
  if (v2)
    FilterResult.hash(into:)((uint64_t)v0);
  v3 = v1[23];
  sub_23C09D83C((uint64_t)v0, v1[9]);
  FilterOptions.hash(into:)(v0);
  Filter.hash(into:)((uint64_t)v0);
  sub_23C0E4AB0();
  if (v3)
    Modality.hash(into:)(v0);
  v4 = v1[33];
  sub_23C09D6E0((uint64_t)v0, v1[32]);
  return sub_23C09C85C((uint64_t)v0, v4);
}

uint64_t FilterLoadState.hashValue.getter()
{
  const void *v0;
  _BYTE v2[280];
  _BYTE v3[280];

  sub_23C07C14C(v0, v3);
  sub_23C07C14C(v3, v2);
  sub_23C0E4A98();
  FilterLoadState.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0AE650()
{
  const void *v0;
  _BYTE v2[280];
  _BYTE v3[280];

  sub_23C07C14C(v0, v3);
  sub_23C07C14C(v3, v2);
  sub_23C0E4A98();
  FilterLoadState.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0AE6AC()
{
  const void *v0;
  _BYTE v2[280];
  _BYTE v3[280];

  sub_23C07C14C(v0, v3);
  sub_23C07C14C(v3, v2);
  sub_23C0E4A98();
  FilterLoadState.hash(into:)();
  return sub_23C0E4AC8();
}

void _s16FitnessFiltering15FilterLoadStateO2eeoiySbAC_ACtFZ_0(const void *a1, const void *a2)
{
  char *v3;
  _BYTE v4[280];
  _BYTE v5[280];
  _BYTE v6[280];
  uint64_t v7;
  _BYTE v8[288];

  sub_23C07C14C(a1, v4);
  sub_23C07C14C(a2, v5);
  sub_23C07C14C(v4, v6);
  sub_23C07C14C(v5, &v7);
  sub_23C07C14C(v4, v8);
  v3 = (char *)sub_23C0AE798 + 4 * byte_23C0E8FC2[sub_23C07C1BC((uint64_t)v8)];
  __asm { BR              X10 }
}

uint64_t sub_23C0AE798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  char v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _BYTE v98[280];
  _BYTE v99[280];
  _BYTE v100[280];
  _BYTE v101[560];
  uint64_t v102;

  v0 = ((uint64_t (*)(uint64_t *))nullsub_1)(&v102);
  sub_23C07C14C(v100, v98);
  if (sub_23C07C1BC((uint64_t)v98))
  {
    sub_23C0B0CCC((uint64_t)v100);
    sub_23C0B0CCC((uint64_t)v99);
    goto LABEL_7;
  }
  v1 = ((uint64_t (*)(_BYTE *))nullsub_1)(v98);
  v2 = *(_QWORD *)v0;
  v3 = *(_QWORD *)(v0 + 8);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v0 + 64);
  v11 = *(_QWORD *)v1;
  v10 = *(_QWORD *)(v1 + 8);
  v13 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v1 + 24);
  v15 = *(_QWORD *)(v1 + 32);
  v14 = *(_QWORD *)(v1 + 40);
  v17 = *(_QWORD *)(v1 + 48);
  v16 = *(_QWORD *)(v1 + 56);
  v18 = *(_QWORD *)(v1 + 64);
  v77 = *(_QWORD *)(v0 + 56);
  if (!*(_QWORD *)v0)
  {
    v58 = *(_QWORD *)(v1 + 64);
    v59 = *(_QWORD *)(v1 + 8);
    v60 = *(_QWORD *)(v1 + 16);
    v61 = *(_QWORD *)(v1 + 24);
    v63 = *(_QWORD *)(v1 + 32);
    v65 = *(_QWORD *)(v1 + 40);
    v67 = *(_QWORD *)(v1 + 48);
    v70 = *(_QWORD *)(v1 + 56);
    v21 = *(_QWORD *)(v0 + 24);
    v22 = *(_QWORD *)(v0 + 32);
    v72 = *(_QWORD *)(v0 + 40);
    sub_23C0B0CCC((uint64_t)v100);
    sub_23C0B0CCC((uint64_t)v99);
    if (!v11)
      goto LABEL_10;
LABEL_21:
    *(_QWORD *)&v79 = v2;
    *((_QWORD *)&v79 + 1) = v3;
    *(_QWORD *)&v80 = v5;
    *((_QWORD *)&v80 + 1) = v21;
    *(_QWORD *)&v81 = v22;
    *((_QWORD *)&v81 + 1) = v72;
    *(_QWORD *)&v82 = v8;
    *((_QWORD *)&v82 + 1) = v77;
    v83 = v9;
    v84 = v11;
    v85 = v59;
    v86 = v60;
    v87 = v61;
    v88 = v63;
    v89 = v65;
    v90 = v67;
    v91 = v70;
    v92 = v58;
    sub_23C07C42C(v11);
    v55 = sub_23C07C920;
LABEL_22:
    sub_23C0B0D4C((uint64_t *)&v79, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v55);
    goto LABEL_7;
  }
  *(_QWORD *)&v79 = *(_QWORD *)v0;
  *((_QWORD *)&v79 + 1) = v3;
  *(_QWORD *)&v80 = v5;
  *((_QWORD *)&v80 + 1) = v4;
  *(_QWORD *)&v81 = v7;
  *((_QWORD *)&v81 + 1) = v6;
  *(_QWORD *)&v82 = v8;
  *((_QWORD *)&v82 + 1) = v77;
  v83 = v9;
  v73 = v4;
  if (!v11)
  {
    v58 = v18;
    v59 = v10;
    v60 = v13;
    v61 = v12;
    v63 = v15;
    v65 = v14;
    v67 = v17;
    v70 = v16;
    v53 = v7;
    v54 = v6;
    sub_23C07C42C(v2);
    sub_23C07C42C(v2);
    sub_23C0B0CCC((uint64_t)v100);
    sub_23C0B0CCC((uint64_t)v99);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v72 = v54;
    swift_bridgeObjectRelease();
    v22 = v53;
    swift_bridgeObjectRelease();
    v21 = v73;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  *(_QWORD *)&v93 = v11;
  *((_QWORD *)&v93 + 1) = v10;
  *(_QWORD *)&v94 = v13;
  *((_QWORD *)&v94 + 1) = v12;
  *(_QWORD *)&v95 = v15;
  *((_QWORD *)&v95 + 1) = v14;
  *(_QWORD *)&v96 = v17;
  *((_QWORD *)&v96 + 1) = v16;
  v97 = v18;
  sub_23C07C42C(v2);
  sub_23C07C42C(v2);
  sub_23C0B0CCC((uint64_t)v100);
  sub_23C0B0CCC((uint64_t)v99);
  v71 = _s16FitnessFiltering12FilterResultV2eeoiySbAC_ACtFZ_0((uint64_t *)&v79, (uint64_t *)&v93);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23C07C920(v2);
  if ((v71 & 1) == 0)
    goto LABEL_7;
LABEL_10:
  if ((sub_23C0BFFB8(*(_QWORD *)(v0 + 72), *(_QWORD *)(v1 + 72)) & 1) == 0)
    goto LABEL_7;
  v23 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v1 + 144);
  v25 = *(_OWORD *)(v0 + 96);
  v79 = *(_OWORD *)(v0 + 80);
  v80 = v25;
  v26 = *(_OWORD *)(v0 + 128);
  v81 = *(_OWORD *)(v0 + 112);
  v82 = v26;
  v83 = v23;
  v27 = *(_OWORD *)(v1 + 96);
  v93 = *(_OWORD *)(v1 + 80);
  v94 = v27;
  v28 = *(_OWORD *)(v1 + 128);
  v95 = *(_OWORD *)(v1 + 112);
  v96 = v28;
  v97 = v24;
  if ((_s16FitnessFiltering13FilterOptionsV2eeoiySbAC_ACtFZ_0((uint64_t *)&v79, (uint64_t *)&v93) & 1) == 0)
    goto LABEL_7;
  v29 = *(unsigned __int8 *)(v0 + 160);
  v30 = *(_QWORD *)(v0 + 168);
  v31 = *(_BYTE *)(v0 + 176);
  v32 = *(unsigned __int8 *)(v1 + 160);
  v33 = *(_QWORD *)(v1 + 168);
  if ((sub_23C075FE0(*(_QWORD *)(v0 + 152), *(_QWORD *)(v1 + 152)) & 1) == 0)
    goto LABEL_7;
  if (((v29 ^ v32) & 1) != 0)
    goto LABEL_7;
  if ((sub_23C075FE0(v30, v33) & 1) == 0)
    goto LABEL_7;
  sub_23C07740C(v31);
  if ((v34 & 1) == 0)
    goto LABEL_7;
  v36 = *(_QWORD *)(v0 + 184);
  v35 = *(_QWORD *)(v0 + 192);
  v38 = *(_QWORD *)(v0 + 200);
  v37 = *(_QWORD *)(v0 + 208);
  v40 = *(_QWORD *)(v0 + 216);
  v39 = *(_QWORD *)(v0 + 224);
  v42 = *(_QWORD *)(v0 + 232);
  v41 = *(_QWORD *)(v0 + 240);
  v43 = *(_QWORD *)(v0 + 248);
  v45 = *(_QWORD *)(v1 + 184);
  v44 = *(_QWORD *)(v1 + 192);
  v47 = *(_QWORD *)(v1 + 200);
  v46 = *(_QWORD *)(v1 + 208);
  v49 = *(_QWORD *)(v1 + 216);
  v48 = *(_QWORD *)(v1 + 224);
  v50 = *(_QWORD *)(v1 + 232);
  v51 = *(_QWORD *)(v1 + 240);
  v52 = *(_QWORD *)(v1 + 248);
  if (v36)
  {
    *(_QWORD *)&v79 = *(_QWORD *)(v0 + 184);
    *((_QWORD *)&v79 + 1) = v35;
    *(_QWORD *)&v80 = v38;
    *((_QWORD *)&v80 + 1) = v37;
    *(_QWORD *)&v81 = v40;
    *((_QWORD *)&v81 + 1) = v39;
    *(_QWORD *)&v82 = v42;
    *((_QWORD *)&v82 + 1) = v41;
    v83 = v43;
    v75 = v40;
    v76 = v42;
    v74 = v38;
    v78 = v43;
    if (v45)
    {
      *(_QWORD *)&v93 = v45;
      *((_QWORD *)&v93 + 1) = v44;
      *(_QWORD *)&v94 = v47;
      *((_QWORD *)&v94 + 1) = v46;
      *(_QWORD *)&v95 = v49;
      *((_QWORD *)&v95 + 1) = v48;
      *(_QWORD *)&v96 = v50;
      *((_QWORD *)&v96 + 1) = v51;
      v97 = v52;
      sub_23C07C4C4(v36);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v68 = _s16FitnessFiltering8ModalityV2eeoiySbAC_ACtFZ_0((uint64_t)&v79, (uint64_t)&v93);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23C07C9B8(v36);
      if ((v68 & 1) == 0)
        goto LABEL_7;
      goto LABEL_23;
    }
    v66 = v39;
    v69 = v41;
    v56 = v37;
    v57 = v35;
    v62 = v50;
    v64 = v51;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v50 = v62;
    v51 = v64;
    v42 = v76;
    v43 = v78;
    v35 = v57;
    v38 = v74;
    v40 = v75;
    v37 = v56;
    v39 = v66;
    v41 = v69;
    goto LABEL_26;
  }
  if (v45)
  {
LABEL_26:
    *(_QWORD *)&v79 = v36;
    *((_QWORD *)&v79 + 1) = v35;
    *(_QWORD *)&v80 = v38;
    *((_QWORD *)&v80 + 1) = v37;
    *(_QWORD *)&v81 = v40;
    *((_QWORD *)&v81 + 1) = v39;
    *(_QWORD *)&v82 = v42;
    *((_QWORD *)&v82 + 1) = v41;
    v83 = v43;
    v84 = v45;
    v85 = v44;
    v86 = v47;
    v87 = v46;
    v88 = v49;
    v89 = v48;
    v90 = v50;
    v91 = v51;
    v92 = v52;
    sub_23C07C4C4(v45);
    v55 = sub_23C07C9B8;
    goto LABEL_22;
  }
LABEL_23:
  if ((sub_23C0C01CC(*(_QWORD *)(v0 + 256), *(_QWORD *)(v1 + 256)) & 1) != 0)
  {
    v19 = sub_23C0C0498(*(_QWORD *)(v0 + 264), *(_QWORD *)(v1 + 264));
    sub_23C07C534((uint64_t)v101);
    return v19 & 1;
  }
LABEL_7:
  sub_23C07C534((uint64_t)v101);
  v19 = 0;
  return v19 & 1;
}

unint64_t sub_23C0AF3D4()
{
  unint64_t result;

  result = qword_256B10298;
  if (!qword_256B10298)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9548, &type metadata for FilterLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10298);
  }
  return result;
}

unint64_t sub_23C0AF418()
{
  unint64_t result;

  result = qword_256B102A0;
  if (!qword_256B102A0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E94F8, &type metadata for FilterLoadState.QueryingFilterOptionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B102A0);
  }
  return result;
}

unint64_t sub_23C0AF45C()
{
  unint64_t result;

  result = qword_256B102A8;
  if (!qword_256B102A8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E94A8, &type metadata for FilterLoadState.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B102A8);
  }
  return result;
}

unint64_t sub_23C0AF4A0()
{
  unint64_t result;

  result = qword_256B102B0;
  if (!qword_256B102B0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Modality, &type metadata for Modality);
    atomic_store(result, (unint64_t *)&qword_256B102B0);
  }
  return result;
}

unint64_t sub_23C0AF4E4()
{
  unint64_t result;

  result = qword_256B102C8;
  if (!qword_256B102C8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for SelectedFilterItem, &type metadata for SelectedFilterItem);
    atomic_store(result, (unint64_t *)&qword_256B102C8);
  }
  return result;
}

uint64_t sub_23C0AF528(unint64_t *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    v9 = a3();
    result = MEMORY[0x242616E9C](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C0AF58C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B102E0);
    v10 = sub_23C0AF718(a2, a3);
    result = MEMORY[0x242616E9C](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23C0AF608()
{
  unint64_t result;

  result = qword_256B102F8;
  if (!qword_256B102F8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9458, &type metadata for FilterLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B102F8);
  }
  return result;
}

unint64_t sub_23C0AF64C()
{
  unint64_t result;

  result = qword_256B10300;
  if (!qword_256B10300)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9408, &type metadata for FilterLoadState.ApplyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10300);
  }
  return result;
}

unint64_t sub_23C0AF690()
{
  unint64_t result;

  result = qword_256B10330;
  if (!qword_256B10330)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Modality, &type metadata for Modality);
    atomic_store(result, (unint64_t *)&qword_256B10330);
  }
  return result;
}

unint64_t sub_23C0AF6D4()
{
  unint64_t result;

  result = qword_256B10340;
  if (!qword_256B10340)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for SelectedFilterItem, &type metadata for SelectedFilterItem);
    atomic_store(result, (unint64_t *)&qword_256B10340);
  }
  return result;
}

uint64_t sub_23C0AF718(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for FilterSectionDescriptor();
    result = MEMORY[0x242616E9C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23C0AF75C()
{
  unint64_t result;

  result = qword_256B10360;
  if (!qword_256B10360)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterLoadState, &type metadata for FilterLoadState);
    atomic_store(result, (unint64_t *)&qword_256B10360);
  }
  return result;
}

uint64_t destroy for FilterLoadState(uint64_t a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)(a1 + 224);
  v3 = *(_OWORD *)(a1 + 240);
  return sub_23C07C6D0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           *(_QWORD *)(a1 + 200),
           *(_QWORD *)(a1 + 208),
           *(_QWORD *)(a1 + 216),
           v2,
           *((uint64_t *)&v2 + 1),
           v3,
           *((uint64_t *)&v3 + 1),
           *(_QWORD *)(a1 + 256),
           *(_QWORD *)(a1 + 264),
           *(_BYTE *)(a1 + 272));
}

uint64_t initializeWithCopy for FilterLoadState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v3 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a2 + 104);
  v18 = *(_QWORD *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(_QWORD *)(a2 + 128);
  v21 = *(_QWORD *)(a2 + 136);
  v22 = *(_QWORD *)(a2 + 144);
  v23 = *(_QWORD *)(a2 + 152);
  v24 = *(_QWORD *)(a2 + 160);
  v25 = *(_QWORD *)(a2 + 168);
  v26 = *(_QWORD *)(a2 + 176);
  v27 = *(_QWORD *)(a2 + 184);
  v28 = *(_QWORD *)(a2 + 192);
  v29 = *(_QWORD *)(a2 + 200);
  v30 = *(_QWORD *)(a2 + 208);
  v31 = *(_QWORD *)(a2 + 216);
  v32 = *(_QWORD *)(a2 + 224);
  v33 = *(_QWORD *)(a2 + 232);
  v34 = *(_QWORD *)(a2 + 240);
  v35 = *(_QWORD *)(a2 + 248);
  v36 = *(_QWORD *)(a2 + 256);
  v37 = *(_QWORD *)(a2 + 264);
  v38 = *(_BYTE *)(a2 + 272);
  v4 = *(_QWORD *)(a2 + 64);
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  sub_23C07C1D4(*(_QWORD *)a2, v6, v7, v8, v9, v10, v11, v3, v4, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    v37,
    v38);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v17;
  *(_QWORD *)(a1 + 112) = v18;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v20;
  *(_QWORD *)(a1 + 136) = v21;
  *(_QWORD *)(a1 + 144) = v22;
  *(_QWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 160) = v24;
  *(_QWORD *)(a1 + 168) = v25;
  *(_QWORD *)(a1 + 176) = v26;
  *(_QWORD *)(a1 + 184) = v27;
  *(_QWORD *)(a1 + 192) = v28;
  *(_QWORD *)(a1 + 200) = v29;
  *(_QWORD *)(a1 + 208) = v30;
  *(_QWORD *)(a1 + 216) = v31;
  *(_QWORD *)(a1 + 224) = v32;
  *(_QWORD *)(a1 + 232) = v33;
  *(_QWORD *)(a1 + 240) = v34;
  *(_QWORD *)(a1 + 248) = v35;
  *(_QWORD *)(a1 + 256) = v36;
  *(_QWORD *)(a1 + 264) = v37;
  *(_BYTE *)(a1 + 272) = v38;
  return a1;
}

uint64_t assignWithCopy for FilterLoadState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v60 = *(_QWORD *)a2;
  v61 = *(_QWORD *)(a2 + 8);
  v58 = *(_QWORD *)(a2 + 24);
  v59 = *(_QWORD *)(a2 + 16);
  v56 = *(_QWORD *)(a2 + 40);
  v57 = *(_QWORD *)(a2 + 32);
  v55 = *(_QWORD *)(a2 + 48);
  v36 = *(_QWORD *)(a2 + 72);
  v37 = *(_QWORD *)(a2 + 80);
  v38 = *(_QWORD *)(a2 + 88);
  v39 = *(_QWORD *)(a2 + 96);
  v40 = *(_QWORD *)(a2 + 104);
  v41 = *(_QWORD *)(a2 + 112);
  v42 = *(_QWORD *)(a2 + 120);
  v43 = *(_QWORD *)(a2 + 128);
  v3 = *(_QWORD *)(a2 + 144);
  v4 = *(_QWORD *)(a2 + 152);
  v5 = *(_QWORD *)(a2 + 160);
  v6 = *(_QWORD *)(a2 + 168);
  v7 = *(_QWORD *)(a2 + 176);
  v8 = *(_QWORD *)(a2 + 184);
  v9 = *(_QWORD *)(a2 + 192);
  v44 = *(_QWORD *)(a2 + 136);
  v45 = *(_QWORD *)(a2 + 200);
  v46 = *(_QWORD *)(a2 + 208);
  v47 = *(_QWORD *)(a2 + 216);
  v48 = *(_QWORD *)(a2 + 224);
  v49 = *(_QWORD *)(a2 + 232);
  v50 = *(_QWORD *)(a2 + 240);
  v51 = *(_QWORD *)(a2 + 248);
  v52 = *(_QWORD *)(a2 + 256);
  v53 = *(_QWORD *)(a2 + 264);
  v54 = *(_BYTE *)(a2 + 272);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 56);
  sub_23C07C1D4(*(_QWORD *)a2, v61, v59, v58, v57, v56, v55, v11, v10, v36, v37, v38, v39, v40, v41, v42, v43, v44, v3,
    v4,
    v5,
    v6,
    v7,
    v8,
    v9,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    v52,
    v53,
    v54);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v60;
  *(_QWORD *)(a1 + 8) = v61;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v59;
  *(_QWORD *)(a1 + 24) = v58;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v57;
  *(_QWORD *)(a1 + 40) = v56;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v55;
  *(_QWORD *)(a1 + 56) = v11;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = v10;
  *(_QWORD *)(a1 + 72) = v36;
  *(_QWORD *)(a1 + 80) = v37;
  *(_QWORD *)(a1 + 88) = v38;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v39;
  *(_QWORD *)(a1 + 104) = v40;
  *(_QWORD *)(a1 + 112) = v41;
  *(_QWORD *)(a1 + 120) = v42;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v43;
  *(_QWORD *)(a1 + 136) = v44;
  *(_QWORD *)(a1 + 144) = v3;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 152) = v4;
  *(_QWORD *)(a1 + 160) = v5;
  *(_QWORD *)(a1 + 168) = v6;
  *(_QWORD *)(a1 + 176) = v7;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 184) = v8;
  *(_QWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 200) = v45;
  *(_QWORD *)(a1 + 208) = v46;
  *(_QWORD *)(a1 + 216) = v47;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v48;
  *(_QWORD *)(a1 + 232) = v49;
  *(_QWORD *)(a1 + 240) = v50;
  *(_QWORD *)(a1 + 248) = v51;
  v32 = *(_QWORD *)(a1 + 256);
  v33 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v52;
  *(_QWORD *)(a1 + 264) = v53;
  v34 = *(_BYTE *)(a1 + 272);
  *(_BYTE *)(a1 + 272) = v54;
  sub_23C07C6D0(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    v33,
    v34);
  return a1;
}

void *__swift_memcpy273_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x111uLL);
}

uint64_t assignWithTake for FilterLoadState(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v4 = *(_BYTE *)(a2 + 272);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 192);
  v22 = *(_OWORD *)(a1 + 208);
  v23 = *(_OWORD *)(a1 + 224);
  v24 = *(_OWORD *)(a1 + 240);
  v25 = *(_QWORD *)(a1 + 256);
  v26 = *(_QWORD *)(a1 + 264);
  v27 = *(_BYTE *)(a1 + 272);
  v28 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v28;
  v29 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v29;
  v30 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v30;
  v31 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v31;
  v32 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v32;
  v33 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v33;
  v34 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v34;
  v35 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v35;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_BYTE *)(a1 + 272) = v4;
  sub_23C07C6D0(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    v26,
    v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterLoadState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 273))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 272);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterLoadState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 272) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 273) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 273) = 0;
    if (a2)
      *(_BYTE *)(result + 272) = -(char)a2;
  }
  return result;
}

uint64_t sub_23C0AFE48(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    LOBYTE(a2) = 2;
    *(_QWORD *)(result + 264) = 0;
  }
  *(_BYTE *)(result + 272) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FilterLoadState()
{
  return &type metadata for FilterLoadState;
}

uint64_t storeEnumTagSinglePayload for FilterLoadState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C0AFF04 + 4 * byte_23C0E8FCB[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C0AFF38 + 4 * byte_23C0E8FC6[v4]))();
}

uint64_t sub_23C0AFF38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0AFF40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0AFF48);
  return result;
}

uint64_t sub_23C0AFF54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0AFF5CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C0AFF60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0AFF68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterLoadState.CodingKeys()
{
  return &type metadata for FilterLoadState.CodingKeys;
}

ValueMetadata *type metadata accessor for FilterLoadState.ApplyingCodingKeys()
{
  return &type metadata for FilterLoadState.ApplyingCodingKeys;
}

ValueMetadata *type metadata accessor for FilterLoadState.IdleCodingKeys()
{
  return &type metadata for FilterLoadState.IdleCodingKeys;
}

uint64_t _s16FitnessFiltering15FilterLoadStateO18ApplyingCodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s16FitnessFiltering15FilterLoadStateO18ApplyingCodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_23C0B0088 + 4 * byte_23C0E8FD5[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_23C0B00BC + 4 * byte_23C0E8FD0[v4]))();
}

uint64_t sub_23C0B00BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B00C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0B00CCLL);
  return result;
}

uint64_t sub_23C0B00D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0B00E0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_23C0B00E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B00EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterLoadState.LoadedCodingKeys()
{
  return &type metadata for FilterLoadState.LoadedCodingKeys;
}

ValueMetadata *type metadata accessor for FilterLoadState.QueryingFilterOptionsCodingKeys()
{
  return &type metadata for FilterLoadState.QueryingFilterOptionsCodingKeys;
}

unint64_t sub_23C0B011C()
{
  unint64_t result;

  result = qword_256B10368;
  if (!qword_256B10368)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9220, &type metadata for FilterLoadState.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10368);
  }
  return result;
}

unint64_t sub_23C0B0164()
{
  unint64_t result;

  result = qword_256B10370;
  if (!qword_256B10370)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9328, &type metadata for FilterLoadState.ApplyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10370);
  }
  return result;
}

unint64_t sub_23C0B01AC()
{
  unint64_t result;

  result = qword_256B10378;
  if (!qword_256B10378)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E93E0, &type metadata for FilterLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10378);
  }
  return result;
}

unint64_t sub_23C0B01F4()
{
  unint64_t result;

  result = qword_256B10380;
  if (!qword_256B10380)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9298, &type metadata for FilterLoadState.ApplyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10380);
  }
  return result;
}

unint64_t sub_23C0B023C()
{
  unint64_t result;

  result = qword_256B10388;
  if (!qword_256B10388)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E92C0, &type metadata for FilterLoadState.ApplyingCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10388);
  }
  return result;
}

unint64_t sub_23C0B0284()
{
  unint64_t result;

  result = qword_256B10390;
  if (!qword_256B10390)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9248, &type metadata for FilterLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10390);
  }
  return result;
}

unint64_t sub_23C0B02CC()
{
  unint64_t result;

  result = qword_256B10398;
  if (!qword_256B10398)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9270, &type metadata for FilterLoadState.IdleCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10398);
  }
  return result;
}

unint64_t sub_23C0B0314()
{
  unint64_t result;

  result = qword_256B103A0;
  if (!qword_256B103A0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9190, &type metadata for FilterLoadState.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B103A0);
  }
  return result;
}

unint64_t sub_23C0B035C()
{
  unint64_t result;

  result = qword_256B103A8;
  if (!qword_256B103A8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E91B8, &type metadata for FilterLoadState.LoadedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B103A8);
  }
  return result;
}

unint64_t sub_23C0B03A4()
{
  unint64_t result;

  result = qword_256B103B0;
  if (!qword_256B103B0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9140, &type metadata for FilterLoadState.QueryingFilterOptionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B103B0);
  }
  return result;
}

unint64_t sub_23C0B03EC()
{
  unint64_t result;

  result = qword_256B103B8;
  if (!qword_256B103B8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9168, &type metadata for FilterLoadState.QueryingFilterOptionsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B103B8);
  }
  return result;
}

unint64_t sub_23C0B0434()
{
  unint64_t result;

  result = qword_256B103C0;
  if (!qword_256B103C0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9350, &type metadata for FilterLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B103C0);
  }
  return result;
}

unint64_t sub_23C0B047C()
{
  unint64_t result;

  result = qword_256B103C8;
  if (!qword_256B103C8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9378, &type metadata for FilterLoadState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B103C8);
  }
  return result;
}

uint64_t sub_23C0B04C0(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x800000023C0EE210 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x800000023C0EE230 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x704F7265746C6966 && a2 == 0xED0000736E6F6974 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F547265746C6966 && a2 == 0xED0000796C707041 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x61646F4D746F6F72 && a2 == 0xEC0000007974696CLL || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65646F4D74726F73 && a2 == 0xE900000000000073 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C0EE1F0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v5 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_23C0B0800(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E69796C707061 && a2 == 0xE800000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701602409 && a2 == 0xE400000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646564616F6CLL && a2 == 0xE600000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x800000023C0EE1B0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_23C0B099C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7265746C6966 && a2 == 0xE600000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x704F7265746C6966 && a2 == 0xED0000736E6F6974 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x65527265746C6966 && a2 == 0xEC000000746C7573 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61646F4D746F6F72 && a2 == 0xEC0000007974696CLL || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x800000023C0EE1D0 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65646F4D74726F73 && a2 == 0xE900000000000073 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C0EE1F0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_23C0B0CCC(uint64_t a1)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  sub_23C07C1D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_BYTE *)(a1 + 272));
  return a1;
}

uint64_t *sub_23C0B0D4C(uint64_t *a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = a1[10];
  v5 = a1[11];
  v6 = a1[12];
  v7 = a1[13];
  v8 = a1[14];
  v9 = a1[15];
  v10 = a1[16];
  v11 = a1[17];
  v13 = a1[9];
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  a2(v13, v4, v5, v6, v7, v8, v9, v10, v11);
  return a1;
}

ValueMetadata *type metadata accessor for FilterButtonStyle()
{
  return &type metadata for FilterButtonStyle;
}

uint64_t sub_23C0B0E00()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23C0B0E10()
{
  return sub_23C0E424C();
}

unint64_t sub_23C0B0E34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256B103D0;
  if (!qword_256B103D0)
  {
    v1 = sub_23C0E4240();
    result = MEMORY[0x242616E9C](MEMORY[0x24BDF0438], v1);
    atomic_store(result, (unint64_t *)&qword_256B103D0);
  }
  return result;
}

BOOL static OptionState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23C0B0E90()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x62617463656C6573;
  if (*v0 != 1)
    v1 = 0x64657463656C6573;
  if (*v0)
    return v1;
  else
    return 0x64656C6261736964;
}

uint64_t sub_23C0B0EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0B1C84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0B0F14()
{
  sub_23C0B12B8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0B0F3C()
{
  sub_23C0B12B8();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0B0F64()
{
  sub_23C0B1384();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0B0F8C()
{
  sub_23C0B1384();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0B0FB4()
{
  sub_23C0B1340();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0B0FDC()
{
  sub_23C0B1340();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0B1004()
{
  sub_23C0B12FC();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0B102C()
{
  sub_23C0B12FC();
  return sub_23C0E4AF8();
}

uint64_t OptionState.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B103D8);
  v22 = *(_QWORD *)(v4 - 8);
  v23 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v21 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B103E0);
  v19 = *(_QWORD *)(v6 - 8);
  v20 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B103E8);
  v9 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B103F0);
  v24 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *v2;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B12B8();
  sub_23C0E4AE0();
  if (v15)
  {
    if (v15 == 1)
    {
      v26 = 1;
      sub_23C0B1340();
      sub_23C0E49E4();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v20);
    }
    else
    {
      v27 = 2;
      sub_23C0B12FC();
      v16 = v21;
      sub_23C0E49E4();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v23);
    }
  }
  else
  {
    v25 = 0;
    sub_23C0B1384();
    sub_23C0E49E4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v14, v12);
}

unint64_t sub_23C0B12B8()
{
  unint64_t result;

  result = qword_256B103F8;
  if (!qword_256B103F8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E99DC, &type metadata for OptionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B103F8);
  }
  return result;
}

unint64_t sub_23C0B12FC()
{
  unint64_t result;

  result = qword_256B10400;
  if (!qword_256B10400)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E998C, &type metadata for OptionState.SelectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10400);
  }
  return result;
}

unint64_t sub_23C0B1340()
{
  unint64_t result;

  result = qword_256B10408;
  if (!qword_256B10408)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E993C, &type metadata for OptionState.SelectableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10408);
  }
  return result;
}

unint64_t sub_23C0B1384()
{
  unint64_t result;

  result = qword_256B10410;
  if (!qword_256B10410)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E98EC, &type metadata for OptionState.DisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10410);
  }
  return result;
}

uint64_t OptionState.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;

  v38 = a2;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10418);
  v34 = *(_QWORD *)(v37 - 8);
  MEMORY[0x24BDAC7A8](v37);
  v40 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10420);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10428);
  v6 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10430);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B12B8();
  v13 = v41;
  sub_23C0E4AD4();
  if (v13)
    goto LABEL_7;
  v31 = v6;
  v32 = v10;
  v14 = v39;
  v15 = v40;
  v41 = a1;
  v16 = v12;
  v17 = sub_23C0E49CC();
  v18 = v9;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = sub_23C0E4900();
    swift_allocError();
    v25 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6E8);
    *v25 = &type metadata for OptionState;
    sub_23C0E4960();
    sub_23C0E48F4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 104))(v25, *MEMORY[0x24BEE26D0], v23);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    a1 = v41;
LABEL_7:
    v26 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v26);
  }
  v19 = *(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if (v19 == 1)
    {
      v43 = 1;
      sub_23C0B1340();
      v20 = v9;
      sub_23C0E4954();
      v21 = v38;
      v22 = v32;
      (*(void (**)(char *, uint64_t))(v35 + 8))(v14, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v20);
    }
    else
    {
      v44 = 2;
      sub_23C0B12FC();
      v28 = v15;
      sub_23C0E4954();
      v21 = v38;
      v29 = v32;
      (*(void (**)(char *, uint64_t))(v34 + 8))(v28, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v18);
    }
  }
  else
  {
    v42 = 0;
    sub_23C0B1384();
    sub_23C0E4954();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v33);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v9);
    v21 = v38;
  }
  *v21 = v19;
  v26 = (uint64_t)v41;
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t sub_23C0B180C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return OptionState.init(from:)(a1, a2);
}

uint64_t sub_23C0B1820(_QWORD *a1)
{
  return OptionState.encode(to:)(a1);
}

uint64_t OptionState.hash(into:)()
{
  return sub_23C0E4AA4();
}

uint64_t OptionState.hashValue.getter()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

unint64_t sub_23C0B18A4()
{
  unint64_t result;

  result = qword_256B10438;
  if (!qword_256B10438)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for OptionState, &type metadata for OptionState);
    atomic_store(result, (unint64_t *)&qword_256B10438);
  }
  return result;
}

ValueMetadata *type metadata accessor for OptionState()
{
  return &type metadata for OptionState;
}

uint64_t _s16FitnessFiltering11OptionStateOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C0B194C + 4 * byte_23C0E95F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C0B1980 + 4 * byte_23C0E95F0[v4]))();
}

uint64_t sub_23C0B1980(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B1988(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0B1990);
  return result;
}

uint64_t sub_23C0B199C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0B19A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C0B19A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B19B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OptionState.CodingKeys()
{
  return &type metadata for OptionState.CodingKeys;
}

ValueMetadata *type metadata accessor for OptionState.DisabledCodingKeys()
{
  return &type metadata for OptionState.DisabledCodingKeys;
}

ValueMetadata *type metadata accessor for OptionState.SelectableCodingKeys()
{
  return &type metadata for OptionState.SelectableCodingKeys;
}

ValueMetadata *type metadata accessor for OptionState.SelectedCodingKeys()
{
  return &type metadata for OptionState.SelectedCodingKeys;
}

unint64_t sub_23C0B1A00()
{
  unint64_t result;

  result = qword_256B10440;
  if (!qword_256B10440)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E98C4, &type metadata for OptionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10440);
  }
  return result;
}

unint64_t sub_23C0B1A48()
{
  unint64_t result;

  result = qword_256B10448;
  if (!qword_256B10448)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E97E4, &type metadata for OptionState.DisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10448);
  }
  return result;
}

unint64_t sub_23C0B1A90()
{
  unint64_t result;

  result = qword_256B10450;
  if (!qword_256B10450)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E980C, &type metadata for OptionState.DisabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10450);
  }
  return result;
}

unint64_t sub_23C0B1AD8()
{
  unint64_t result;

  result = qword_256B10458;
  if (!qword_256B10458)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9794, &type metadata for OptionState.SelectableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10458);
  }
  return result;
}

unint64_t sub_23C0B1B20()
{
  unint64_t result;

  result = qword_256B10460;
  if (!qword_256B10460)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E97BC, &type metadata for OptionState.SelectableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10460);
  }
  return result;
}

unint64_t sub_23C0B1B68()
{
  unint64_t result;

  result = qword_256B10468;
  if (!qword_256B10468)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9744, &type metadata for OptionState.SelectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10468);
  }
  return result;
}

unint64_t sub_23C0B1BB0()
{
  unint64_t result;

  result = qword_256B10470;
  if (!qword_256B10470)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E976C, &type metadata for OptionState.SelectedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10470);
  }
  return result;
}

unint64_t sub_23C0B1BF8()
{
  unint64_t result;

  result = qword_256B10478;
  if (!qword_256B10478)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9834, &type metadata for OptionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10478);
  }
  return result;
}

unint64_t sub_23C0B1C40()
{
  unint64_t result;

  result = qword_256B10480;
  if (!qword_256B10480)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E985C, &type metadata for OptionState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10480);
  }
  return result;
}

uint64_t sub_23C0B1C84(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x64656C6261736964 && a2 == 0xE800000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x62617463656C6573 && a2 == 0xEA0000000000656CLL || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64657463656C6573 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t Duration.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double Duration.lowerBuffer.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

double Duration.seconds.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double Duration.upperBuffer.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

void __swiftcall Duration.init(identifier:seconds:lowerBuffer:upperBuffer:)(FitnessFiltering::Duration *__return_ptr retstr, Swift::String identifier, Swift::Double seconds, Swift::Double lowerBuffer, Swift::Double upperBuffer)
{
  retstr->identifier = identifier;
  retstr->lowerBuffer = lowerBuffer;
  retstr->seconds = seconds;
  retstr->upperBuffer = upperBuffer;
}

uint64_t sub_23C0B1E3C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0B1E70 + 4 * byte_23C0E9A30[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_23C0B1E70()
{
  return 0x6675427265776F6CLL;
}

uint64_t sub_23C0B1EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0B2928(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0B1ED8()
{
  sub_23C0B2558();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0B1F00()
{
  sub_23C0B2558();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0B1F28@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Duration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10488);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = a1[3];
  v8 = a1;
  v10 = v9;
  __swift_project_boxed_opaque_existential_1(v8, v7);
  sub_23C0B2558();
  sub_23C0E4AE0();
  v12[15] = 0;
  sub_23C0E4A08();
  if (!v1)
  {
    v12[14] = 1;
    sub_23C0E4A20();
    v12[13] = 2;
    sub_23C0E4A20();
    v12[12] = 3;
    sub_23C0E4A20();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v10);
}

uint64_t Duration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10498);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B2558();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v19[15] = 0;
  v9 = sub_23C0E4984();
  v11 = v10;
  v19[14] = 1;
  swift_bridgeObjectRetain();
  sub_23C0E499C();
  v13 = v12;
  v19[13] = 2;
  sub_23C0E499C();
  v15 = v14;
  v19[12] = 3;
  sub_23C0E499C();
  v18 = v17;
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v13;
  a2[3] = v15;
  a2[4] = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0B22AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return Duration.init(from:)(a1, a2);
}

uint64_t sub_23C0B22C0(_QWORD *a1)
{
  return Duration.encode(to:)(a1);
}

BOOL sub_23C0B22D4(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 24) < *(double *)(a2 + 24);
}

BOOL sub_23C0B22E8(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 24) >= *(double *)(a1 + 24);
}

BOOL sub_23C0B22FC(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 24) >= *(double *)(a2 + 24);
}

BOOL sub_23C0B2310(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 24) < *(double *)(a1 + 24);
}

uint64_t Duration.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  sub_23C0E4ABC();
  sub_23C0E4ABC();
  return sub_23C0E4ABC();
}

uint64_t Duration.hashValue.getter()
{
  sub_23C0E4A98();
  Duration.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0B2408()
{
  sub_23C0E4A98();
  Duration.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0B2464()
{
  sub_23C0E4A98();
  Duration.hash(into:)();
  return sub_23C0E4AC8();
}

double sub_23C0B24B8()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

BOOL _s16FitnessFiltering8DurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  char v9;
  _BOOL8 result;

  v3 = *(double *)(a1 + 16);
  v2 = *(double *)(a1 + 24);
  v4 = *(double *)(a1 + 32);
  v6 = *(double *)(a2 + 16);
  v5 = *(double *)(a2 + 24);
  v7 = *(double *)(a2 + 32);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v3 != v6 || v2 != v5)
      return 0;
    return v4 == v7;
  }
  v9 = sub_23C0E4A74();
  result = 0;
  if ((v9 & 1) != 0 && v3 == v6 && v2 == v5)
    return v4 == v7;
  return result;
}

unint64_t sub_23C0B2558()
{
  unint64_t result;

  result = qword_256B10490;
  if (!qword_256B10490)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9C60, &type metadata for Duration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10490);
  }
  return result;
}

unint64_t sub_23C0B25A0()
{
  unint64_t result;

  result = qword_256B104A0;
  if (!qword_256B104A0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Duration, &type metadata for Duration);
    atomic_store(result, (unint64_t *)&qword_256B104A0);
  }
  return result;
}

uint64_t destroy for Duration()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for Duration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Duration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Duration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for Duration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Duration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Duration()
{
  return &type metadata for Duration;
}

uint64_t storeEnumTagSinglePayload for Duration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C0B27D0 + 4 * byte_23C0E9A39[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C0B2804 + 4 * byte_23C0E9A34[v4]))();
}

uint64_t sub_23C0B2804(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B280C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0B2814);
  return result;
}

uint64_t sub_23C0B2820(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0B2828);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C0B282C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B2834(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Duration.CodingKeys()
{
  return &type metadata for Duration.CodingKeys;
}

unint64_t sub_23C0B2854()
{
  unint64_t result;

  result = qword_256B104A8;
  if (!qword_256B104A8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9C38, &type metadata for Duration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B104A8);
  }
  return result;
}

unint64_t sub_23C0B289C()
{
  unint64_t result;

  result = qword_256B104B0;
  if (!qword_256B104B0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9BA8, &type metadata for Duration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B104B0);
  }
  return result;
}

unint64_t sub_23C0B28E4()
{
  unint64_t result;

  result = qword_256B104B8;
  if (!qword_256B104B8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9BD0, &type metadata for Duration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B104B8);
  }
  return result;
}

uint64_t sub_23C0B2928(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6675427265776F6CLL && a2 == 0xEB00000000726566 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x73646E6F636573 && a2 == 0xE700000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6675427265707075 && a2 == 0xEB00000000726566)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t Theme.artworks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Theme.iconName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Theme.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Theme.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Theme.init(artworks:iconName:identifier:name:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t sub_23C0B2BBC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0B2BEC + 4 * byte_23C0E9CC0[*v0]))(0x736B726F77747261, 0xE800000000000000);
}

uint64_t sub_23C0B2BEC()
{
  return 0x656D614E6E6F6369;
}

uint64_t sub_23C0B2C00()
{
  return 0x696669746E656469;
}

uint64_t sub_23C0B2C1C()
{
  return 1701667182;
}

uint64_t sub_23C0B2C2C()
{
  sub_23C0B2E58();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0B2C54()
{
  sub_23C0B2E58();
  return sub_23C0E4AF8();
}

uint64_t Theme.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B104C0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v13[5] = v1[2];
  v13[6] = v8;
  v10 = v1[3];
  v13[3] = v1[4];
  v13[4] = v10;
  v11 = v1[5];
  v13[1] = v1[6];
  v13[2] = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B2E58();
  sub_23C0E4AE0();
  v18 = v9;
  v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  sub_23C0B31BC(&qword_256B0EF50, &qword_256B0EF58, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    v16 = 1;
    sub_23C0E49F0();
    v15 = 2;
    sub_23C0E4A08();
    v14 = 3;
    sub_23C0E4A08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23C0B2E58()
{
  unint64_t result;

  result = qword_256B104C8;
  if (!qword_256B104C8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9EEC, &type metadata for Theme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B104C8);
  }
  return result;
}

uint64_t Theme.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B104D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B2E58();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  v32 = 0;
  sub_23C0B31BC(&qword_256B0EF68, &qword_256B0EF70, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v9 = v33;
  v31 = 1;
  swift_bridgeObjectRetain();
  v10 = sub_23C0E496C();
  v28 = v11;
  v26 = v10;
  v27 = v9;
  v30 = 2;
  swift_bridgeObjectRetain();
  v24 = sub_23C0E4984();
  v25 = v12;
  v29 = 3;
  swift_bridgeObjectRetain();
  v13 = sub_23C0E4984();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18 = v13;
  v17(v8, v5);
  v19 = v27;
  swift_bridgeObjectRetain();
  v20 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v25;
  v21 = v26;
  *a2 = v19;
  a2[1] = v21;
  v23 = v24;
  a2[2] = v20;
  a2[3] = v23;
  a2[4] = v22;
  a2[5] = v18;
  a2[6] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0B31BC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B0EF48);
    v10 = sub_23C0B3238(a2, a3);
    result = MEMORY[0x242616E9C](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C0B3238(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Artwork();
    result = MEMORY[0x242616E9C](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C0B3278@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Theme.init(from:)(a1, a2);
}

uint64_t sub_23C0B328C(_QWORD *a1)
{
  return Theme.encode(to:)(a1);
}

uint64_t Theme.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain();
  sub_23C065C58(a1, v3);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t Theme.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[2];
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  sub_23C065C58(v4, v1);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

unint64_t sub_23C0B348C()
{
  unint64_t result;

  result = qword_256B104D8;
  if (!qword_256B104D8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Theme, &type metadata for Theme);
    atomic_store(result, (unint64_t *)&qword_256B104D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Theme()
{
  return &type metadata for Theme;
}

uint64_t storeEnumTagSinglePayload for Theme.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C0B352C + 4 * byte_23C0E9CC9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C0B3560 + 4 * byte_23C0E9CC4[v4]))();
}

uint64_t sub_23C0B3560(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B3568(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0B3570);
  return result;
}

uint64_t sub_23C0B357C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0B3584);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C0B3588(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B3590(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Theme.CodingKeys()
{
  return &type metadata for Theme.CodingKeys;
}

unint64_t sub_23C0B35B0()
{
  unint64_t result;

  result = qword_256B104E0;
  if (!qword_256B104E0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9EC4, &type metadata for Theme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B104E0);
  }
  return result;
}

unint64_t sub_23C0B35F8()
{
  unint64_t result;

  result = qword_256B104E8;
  if (!qword_256B104E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9E34, &type metadata for Theme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B104E8);
  }
  return result;
}

unint64_t sub_23C0B3640()
{
  unint64_t result;

  result = qword_256B104F0;
  if (!qword_256B104F0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0E9E5C, &type metadata for Theme.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B104F0);
  }
  return result;
}

uint64_t dispatch thunk of SortOrdering.sortOrder.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of SortOrdering.fallbackSortValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_23C0B3698()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LocalizationBundle()
{
  return objc_opt_self();
}

id sub_23C0B36C8()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for LocalizationBundle();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_256B21860 = (uint64_t)result;
  return result;
}

uint64_t FilterConfiguration.activityType.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t FilterConfiguration.orderedSkillLevels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterConfiguration.skillLevelTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FilterConfiguration.skillLevelTranslations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterConfiguration.skillLevelWildcardTitle.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall FilterConfiguration.init(activityType:orderedSkillLevels:skillLevelTitle:skillLevelTranslations:skillLevelWildcardTitle:)(FitnessFiltering::FilterConfiguration *__return_ptr retstr, Swift::UInt activityType, Swift::OpaquePointer orderedSkillLevels, Swift::String_optional skillLevelTitle, Swift::OpaquePointer skillLevelTranslations, Swift::String_optional skillLevelWildcardTitle)
{
  retstr->activityType = activityType;
  retstr->orderedSkillLevels = orderedSkillLevels;
  retstr->skillLevelTitle = skillLevelTitle;
  retstr->skillLevelTranslations = skillLevelTranslations;
  retstr->skillLevelWildcardTitle = skillLevelWildcardTitle;
}

uint64_t sub_23C0B37A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0B37DC + 4 * byte_23C0E9F90[a1]))(0x7974697669746361, 0xEC00000065707954);
}

unint64_t sub_23C0B37DC()
{
  return 0xD000000000000012;
}

uint64_t sub_23C0B37F8()
{
  return 0x76654C6C6C696B73;
}

unint64_t sub_23C0B381C()
{
  return 0xD000000000000016;
}

uint64_t sub_23C0B3858()
{
  unsigned __int8 *v0;

  return sub_23C0B37A0(*v0);
}

uint64_t sub_23C0B3860@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0B4BF0(a1, a2);
  *a3 = result;
  return result;
}

void sub_23C0B3884(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_23C0B3890()
{
  sub_23C0B3B1C();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0B38B8()
{
  sub_23C0B3B1C();
  return sub_23C0E4AF8();
}

uint64_t FilterConfiguration.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10590);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = v1[1];
  v16 = v1[2];
  v17 = v8;
  v9 = v1[3];
  v14 = v1[4];
  v15 = v9;
  v10 = v1[5];
  v13[1] = v1[6];
  v13[2] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B3B1C();
  sub_23C0E4AE0();
  LOBYTE(v19) = 0;
  sub_23C0E4A38();
  if (!v2)
  {
    v11 = v14;
    v19 = v17;
    v18 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B105A0);
    sub_23C0B3EC8(&qword_256B105A8, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
    sub_23C0E4A44();
    LOBYTE(v19) = 2;
    sub_23C0E49F0();
    v19 = v11;
    v18 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B105B0);
    sub_23C0B3F28(&qword_256B105B8, MEMORY[0x24BEE0D08], MEMORY[0x24BEE04C0]);
    sub_23C0E4A44();
    LOBYTE(v19) = 4;
    sub_23C0E49F0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23C0B3B1C()
{
  unint64_t result;

  result = qword_256B10598;
  if (!qword_256B10598)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA148, &type metadata for FilterConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10598);
  }
  return result;
}

uint64_t FilterConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B105C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B3B1C();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v28) = 0;
  v9 = sub_23C0E49B4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B105A0);
  v27 = 1;
  sub_23C0B3EC8(&qword_256B105C8, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  sub_23C0E49C0();
  v10 = v28;
  LOBYTE(v28) = 2;
  swift_bridgeObjectRetain();
  v11 = sub_23C0E496C();
  v13 = v12;
  v23 = v11;
  v25 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B105B0);
  v27 = 3;
  sub_23C0B3F28(&qword_256B105D0, MEMORY[0x24BEE0D38], MEMORY[0x24BEE04E0]);
  v26 = v13;
  swift_bridgeObjectRetain();
  v24 = 0;
  sub_23C0E49C0();
  v14 = v28;
  LOBYTE(v28) = 4;
  v24 = v14;
  swift_bridgeObjectRetain();
  v16 = sub_23C0E496C();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  v19 = v25;
  v20 = v26;
  *a2 = v9;
  a2[1] = v19;
  v21 = v24;
  a2[2] = v23;
  a2[3] = v20;
  a2[4] = v21;
  a2[5] = v16;
  a2[6] = v18;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0B3EC8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B105A0);
    v8 = a2;
    result = MEMORY[0x242616E9C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C0B3F28(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _QWORD v8[2];

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B105B0);
    v8[0] = a2;
    v8[1] = a2;
    result = MEMORY[0x242616E9C](a3, v7, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23C0B3F88@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return FilterConfiguration.init(from:)(a1, a2);
}

uint64_t sub_23C0B3F9C(_QWORD *a1)
{
  return FilterConfiguration.encode(to:)(a1);
}

uint64_t FilterConfiguration.hash(into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = v1[1];
  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[6];
  sub_23C0E4AA4();
  sub_23C0E4AA4();
  v7 = *(_QWORD *)(v3 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = v3 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_23C0E47A4();
      swift_bridgeObjectRelease();
      v8 += 16;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  sub_23C0E4AB0();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0B4468(a1, v5);
  swift_bridgeObjectRelease();
  if (!v6)
    return sub_23C0E4AB0();
  sub_23C0E4AB0();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0B4128(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  char v26;
  int64_t v27;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v27 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v9 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v10 = v9 | (v4 << 6);
      goto LABEL_25;
    }
    v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v11 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v11);
    ++v4;
    if (!v12)
    {
      v4 = v11 + 1;
      if (v11 + 1 >= v27)
        return 1;
      v12 = *(_QWORD *)(v5 + 8 * v4);
      if (!v12)
      {
        v4 = v11 + 2;
        if (v11 + 2 >= v27)
          return 1;
        v12 = *(_QWORD *)(v5 + 8 * v4);
        if (!v12)
        {
          v4 = v11 + 3;
          if (v11 + 3 >= v27)
            return 1;
          v12 = *(_QWORD *)(v5 + 8 * v4);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v8 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_25:
    v14 = 16 * v10;
    v15 = (uint64_t *)(*(_QWORD *)(v3 + 48) + v14);
    v16 = *v15;
    v17 = v15[1];
    v18 = (uint64_t *)(*(_QWORD *)(v3 + 56) + v14);
    v20 = *v18;
    v19 = v18[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = sub_23C0D2E00(v16, v17);
    v23 = v22;
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    v24 = (_QWORD *)(*(_QWORD *)(a2 + 56) + 16 * v21);
    if (*v24 == v20 && v24[1] == v19)
    {
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v26 = sub_23C0E4A74();
      result = swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        return 0;
    }
  }
  v13 = v11 + 4;
  if (v13 >= v27)
    return 1;
  v12 = *(_QWORD *)(v5 + 8 * v13);
  if (v12)
  {
    v4 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v27)
      return 1;
    v12 = *(_QWORD *)(v5 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t FilterConfiguration.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[11];
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 32);
  v4[9] = *(_QWORD *)v0;
  v4[10] = v1;
  v5 = *(_OWORD *)(v0 + 16);
  v6 = v2;
  v7 = *(_OWORD *)(v0 + 40);
  sub_23C0E4A98();
  FilterConfiguration.hash(into:)((uint64_t)v4);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0B43A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[11];
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 32);
  v4[9] = *(_QWORD *)v0;
  v4[10] = v1;
  v5 = *(_OWORD *)(v0 + 16);
  v6 = v2;
  v7 = *(_OWORD *)(v0 + 40);
  sub_23C0E4A98();
  FilterConfiguration.hash(into:)((uint64_t)v4);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0B4408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[11];
  __int128 v5;
  uint64_t v6;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 32);
  v4[9] = *(_QWORD *)v0;
  v4[10] = v1;
  v5 = *(_OWORD *)(v0 + 16);
  v6 = v2;
  v7 = *(_OWORD *)(v0 + 40);
  sub_23C0E4A98();
  FilterConfiguration.hash(into:)((uint64_t)v4);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0B4468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;

  v12 = a2 + 64;
  v2 = 1 << *(_BYTE *)(a2 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a2 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v8 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    v9 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v9 >= v5)
      goto LABEL_19;
    v10 = *(_QWORD *)(v12 + 8 * v9);
    ++v8;
    if (!v10)
    {
      v8 = v9 + 1;
      if (v9 + 1 >= v5)
        goto LABEL_19;
      v10 = *(_QWORD *)(v12 + 8 * v8);
      if (!v10)
        break;
    }
LABEL_18:
    v4 = (v10 - 1) & v10;
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
    result = sub_23C0E4AC8();
    v7 ^= result;
  }
  v11 = v9 + 2;
  if (v11 >= v5)
  {
LABEL_19:
    swift_release();
    return sub_23C0E4AA4();
  }
  v10 = *(_QWORD *)(v12 + 8 * v11);
  if (v10)
  {
    v8 = v11;
    goto LABEL_18;
  }
  while (1)
  {
    v8 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v8 >= v5)
      goto LABEL_19;
    v10 = *(_QWORD *)(v12 + 8 * v8);
    ++v11;
    if (v10)
      goto LABEL_18;
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t _s16FitnessFiltering19FilterConfigurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a1 + 16);
  if ((sub_23C0BFB3C(*(_QWORD **)(a1 + 8), *(_QWORD **)(a2 + 8)) & 1) == 0)
    return 0;
  if (!v3)
  {
    if (v7)
      return 0;
    goto LABEL_10;
  }
  if (!v7)
    return 0;
  if (v11 == v10 && v3 == v7 || (v12 = sub_23C0E4A74(), result = 0, (v12 & 1) != 0))
  {
LABEL_10:
    if ((sub_23C0B4128(v2, v6) & 1) != 0)
    {
      if (v5)
      {
        if (v8 && (v4 == v9 && v5 == v8 || (sub_23C0E4A74() & 1) != 0))
          return 1;
      }
      else if (!v8)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_23C0B4730()
{
  unint64_t result;

  result = qword_256B105D8;
  if (!qword_256B105D8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterConfiguration, &type metadata for FilterConfiguration);
    atomic_store(result, (unint64_t *)&qword_256B105D8);
  }
  return result;
}

uint64_t destroy for FilterConfiguration()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for FilterConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for FilterConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FilterConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterConfiguration()
{
  return &type metadata for FilterConfiguration;
}

uint64_t getEnumTagSinglePayload for FilterConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23C0B4A98 + 4 * byte_23C0E9F9A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23C0B4ACC + 4 * byte_23C0E9F95[v4]))();
}

uint64_t sub_23C0B4ACC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B4AD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0B4ADCLL);
  return result;
}

uint64_t sub_23C0B4AE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0B4AF0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23C0B4AF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B4AFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterConfiguration.CodingKeys()
{
  return &type metadata for FilterConfiguration.CodingKeys;
}

unint64_t sub_23C0B4B1C()
{
  unint64_t result;

  result = qword_256B105E0;
  if (!qword_256B105E0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA120, &type metadata for FilterConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B105E0);
  }
  return result;
}

unint64_t sub_23C0B4B64()
{
  unint64_t result;

  result = qword_256B105E8;
  if (!qword_256B105E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA090, &type metadata for FilterConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B105E8);
  }
  return result;
}

unint64_t sub_23C0B4BAC()
{
  unint64_t result;

  result = qword_256B105F0;
  if (!qword_256B105F0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA0B8, &type metadata for FilterConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B105F0);
  }
  return result;
}

uint64_t sub_23C0B4BF0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7974697669746361 && a2 == 0xEC00000065707954;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x800000023C0EE2A0 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x76654C6C6C696B73 && a2 == 0xEF656C7469546C65 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x800000023C0EE2C0 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023C0EE2E0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void *static ArtworkVariant.allCases.getter()
{
  return &unk_250CF9438;
}

uint64_t ArtworkVariant.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0B4E70 + 4 * byte_23C0EA1A0[a1]))(0x72656E6E6162, 0xE600000000000000);
}

uint64_t sub_23C0B4E70()
{
  return 0x7265746E6563;
}

uint64_t sub_23C0B4E80()
{
  return 2019912806;
}

uint64_t sub_23C0B4E90()
{
  return 0x657263536C6C7566;
}

uint64_t sub_23C0B4EAC()
{
  return 0x72616C75676572;
}

uint64_t sub_23C0B4EC4()
{
  return 0x74726F6873;
}

uint64_t sub_23C0B4ED8()
{
  return 1819042164;
}

uint64_t sub_23C0B4EE8()
{
  return 1954047348;
}

uint64_t sub_23C0B4EF8()
{
  return 0x6469576172746C75;
}

uint64_t sub_23C0B4F14()
{
  return 1701079415;
}

uint64_t sub_23C0B4F24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = ArtworkVariant.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == ArtworkVariant.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23C0E4A74();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23C0B4FAC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s16FitnessFiltering14ArtworkVariantO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23C0B4FD8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = ArtworkVariant.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_23C0B5000(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CF9438;
}

uint64_t sub_23C0B5010()
{
  sub_23C0B5360();
  return sub_23C0E47F8();
}

uint64_t sub_23C0B506C()
{
  sub_23C0B5360();
  return sub_23C0E47EC();
}

uint64_t sub_23C0B50B8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23C0E4A98();
  ArtworkVariant.rawValue.getter(v1);
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0B5118()
{
  unsigned __int8 *v0;

  ArtworkVariant.rawValue.getter(*v0);
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0B5158()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23C0E4A98();
  ArtworkVariant.rawValue.getter(v1);
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t _s16FitnessFiltering14ArtworkVariantO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23C0E4948();
  swift_bridgeObjectRelease();
  if (v0 >= 0xA)
    return 10;
  else
    return v0;
}

unint64_t sub_23C0B5200()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256B105F8;
  if (!qword_256B105F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10600);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256B105F8);
  }
  return result;
}

unint64_t sub_23C0B5250()
{
  unint64_t result;

  result = qword_256B10608;
  if (!qword_256B10608)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ArtworkVariant, &type metadata for ArtworkVariant);
    atomic_store(result, (unint64_t *)&qword_256B10608);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ArtworkVariant(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_23C0B52E0 + 4 * byte_23C0EA1AF[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_23C0B5314 + 4 * byte_23C0EA1AA[v4]))();
}

uint64_t sub_23C0B5314(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B531C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0B5324);
  return result;
}

uint64_t sub_23C0B5330(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0B5338);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_23C0B533C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B5344(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ArtworkVariant()
{
  return &type metadata for ArtworkVariant;
}

unint64_t sub_23C0B5360()
{
  unint64_t result;

  result = qword_256B10610;
  if (!qword_256B10610)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ArtworkVariant, &type metadata for ArtworkVariant);
    atomic_store(result, (unint64_t *)&qword_256B10610);
  }
  return result;
}

uint64_t MusicGenre.artworks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t MusicGenre.iconName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MusicGenre.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MusicGenre.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MusicGenre.init(artworks:iconName:identifier:name:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t sub_23C0B5444()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0B5474 + 4 * byte_23C0EA2F0[*v0]))(0x736B726F77747261, 0xE800000000000000);
}

uint64_t sub_23C0B5474()
{
  return 0x656D614E6E6F6369;
}

uint64_t sub_23C0B5488()
{
  return 0x696669746E656469;
}

uint64_t sub_23C0B54A4()
{
  return 1701667182;
}

uint64_t sub_23C0B54B4()
{
  sub_23C0B56E0();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0B54DC()
{
  sub_23C0B56E0();
  return sub_23C0E4AF8();
}

uint64_t MusicGenre.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10618);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v13[5] = v1[2];
  v13[6] = v8;
  v10 = v1[3];
  v13[3] = v1[4];
  v13[4] = v10;
  v11 = v1[5];
  v13[1] = v1[6];
  v13[2] = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B56E0();
  sub_23C0E4AE0();
  v18 = v9;
  v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  sub_23C0B31BC(&qword_256B0EF50, &qword_256B0EF58, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    v16 = 1;
    sub_23C0E49F0();
    v15 = 2;
    sub_23C0E4A08();
    v14 = 3;
    sub_23C0E4A08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23C0B56E0()
{
  unint64_t result;

  result = qword_256B10620;
  if (!qword_256B10620)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA520, &type metadata for MusicGenre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10620);
  }
  return result;
}

uint64_t MusicGenre.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10628);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B56E0();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  v32 = 0;
  sub_23C0B31BC(&qword_256B0EF68, &qword_256B0EF70, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v9 = v33;
  v31 = 1;
  swift_bridgeObjectRetain();
  v10 = sub_23C0E496C();
  v28 = v11;
  v26 = v10;
  v27 = v9;
  v30 = 2;
  swift_bridgeObjectRetain();
  v24 = sub_23C0E4984();
  v25 = v12;
  v29 = 3;
  swift_bridgeObjectRetain();
  v13 = sub_23C0E4984();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18 = v13;
  v17(v8, v5);
  v19 = v27;
  swift_bridgeObjectRetain();
  v20 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v25;
  v21 = v26;
  *a2 = v19;
  a2[1] = v21;
  v23 = v24;
  a2[2] = v20;
  a2[3] = v23;
  a2[4] = v22;
  a2[5] = v18;
  a2[6] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0B5A44@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return MusicGenre.init(from:)(a1, a2);
}

uint64_t sub_23C0B5A58(_QWORD *a1)
{
  return MusicGenre.encode(to:)(a1);
}

uint64_t MusicGenre.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain();
  sub_23C065C58(a1, v3);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t MusicGenre.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[2];
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  sub_23C065C58(v4, v1);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

unint64_t sub_23C0B5C54()
{
  unint64_t result;

  result = qword_256B10630;
  if (!qword_256B10630)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for MusicGenre, &type metadata for MusicGenre);
    atomic_store(result, (unint64_t *)&qword_256B10630);
  }
  return result;
}

ValueMetadata *type metadata accessor for MusicGenre()
{
  return &type metadata for MusicGenre;
}

uint64_t storeEnumTagSinglePayload for MusicGenre.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C0B5CF4 + 4 * byte_23C0EA2F9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C0B5D28 + 4 * byte_23C0EA2F4[v4]))();
}

uint64_t sub_23C0B5D28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B5D30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0B5D38);
  return result;
}

uint64_t sub_23C0B5D44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0B5D4CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C0B5D50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0B5D58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MusicGenre.CodingKeys()
{
  return &type metadata for MusicGenre.CodingKeys;
}

unint64_t sub_23C0B5D78()
{
  unint64_t result;

  result = qword_256B10638;
  if (!qword_256B10638)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA4F8, &type metadata for MusicGenre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10638);
  }
  return result;
}

unint64_t sub_23C0B5DC0()
{
  unint64_t result;

  result = qword_256B10640;
  if (!qword_256B10640)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA468, &type metadata for MusicGenre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10640);
  }
  return result;
}

unint64_t sub_23C0B5E08()
{
  unint64_t result;

  result = qword_256B10648;
  if (!qword_256B10648)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA490, &type metadata for MusicGenre.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10648);
  }
  return result;
}

void sub_23C0B5E50()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0B5E90()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;

  result = Option.id.getter();
  *v0 = result;
  v0[1] = v2;
  return result;
}

void FilterStandardSectionView.init(attributedTitle:clearActionTitle:containerWidth:headerViewBuilder:options:onOptionSelected:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C06EA8C(a1, a2);
  type metadata accessor for FilterStandardSectionView();
}

int *sub_23C0B5F4C(int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v10 = (_QWORD *)(v8 + result[23]);
  *v10 = v7;
  v10[1] = v6;
  *(_QWORD *)(v8 + result[24]) = v9;
  v11 = (_QWORD *)(v8 + result[25]);
  *v11 = v5;
  v11[1] = v4;
  *(_QWORD *)(v8 + result[27]) = v3;
  v12 = (_QWORD *)(v8 + result[26]);
  *v12 = v2;
  v12[1] = v1;
  return result;
}

void type metadata accessor for FilterStandardSectionView()
{
  JUMPOUT(0x242616E18);
}

void FilterStandardSectionView.body.getter()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0B6010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t result;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[96];

  swift_getTupleTypeMetadata2();
  v5 = sub_23C0E481C();
  v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10650);
  v7 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v5);
  v8 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v3 - 136) = v5;
  *(_QWORD *)(v3 - 128) = v8;
  *(_QWORD *)(v3 - 120) = v6;
  *(_QWORD *)(v3 - 112) = v7;
  *(_QWORD *)(v3 - 104) = MEMORY[0x24BEE0D10];
  v9 = sub_23C0E4654();
  *(_QWORD *)(v3 - 144) = sub_23C0B641C();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v9, v3 - 144);
  sub_23C0E46A8();
  sub_23C0E4024();
  *(_QWORD *)(v3 - 224) = v2;
  swift_getTupleTypeMetadata2();
  v10 = sub_23C0E46B4();
  v11 = MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v10);
  *(_QWORD *)(v3 - 256) = v10;
  *(_QWORD *)(v3 - 264) = v11;
  v12 = sub_23C0E4618();
  *(_QWORD *)(v3 - 248) = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v14 = &v39[-v13];
  v15 = sub_23C0E4024();
  *(_QWORD *)(v3 - 240) = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v17 = &v39[-v16];
  v18 = sub_23C0E4660();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = &v39[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = sub_23C0E466C();
  MEMORY[0x24BDAC7A8](v22);
  v24 = &v39[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = MEMORY[0x242616980](*(_QWORD *)(*(_QWORD *)(v3 - 168) + *(int *)(v1 + 108)), a1);
  v26 = ceil((double)result * 0.5);
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v26 < 9.22337204e18)
  {
    v27 = (uint64_t)v26;
    *v21 = xmmword_23C0EA570;
    (*(void (**)(_OWORD *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x24BDF4D40], v18);
    sub_23C0E4678();
    v28 = sub_23C06F2F8((uint64_t)v24, v27);
    v29 = sub_23C0E415C();
    MEMORY[0x24BDAC7A8](v29);
    v30 = *(_QWORD *)(v3 - 224);
    *(_QWORD *)&v39[-96] = *(_QWORD *)(v3 - 232);
    *(_QWORD *)&v39[-88] = v30;
    v31 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)&v39[-80] = *(_QWORD *)(v3 - 216);
    *(_QWORD *)&v39[-72] = v31;
    v32 = *(_QWORD *)(v3 - 192);
    *(_QWORD *)&v39[-64] = *(_QWORD *)(v3 - 184);
    *(_QWORD *)&v39[-56] = v32;
    v33 = *(_QWORD *)(v3 - 208);
    *(_QWORD *)&v39[-48] = *(_QWORD *)(v3 - 200);
    *(_QWORD *)&v39[-40] = v33;
    v34 = *(_QWORD *)(v3 - 168);
    *(_QWORD *)&v39[-32] = *(_QWORD *)(v1 + 80);
    *(_QWORD *)&v39[-24] = v34;
    *(_QWORD *)&v39[-16] = v28;
    sub_23C0E460C();
    swift_bridgeObjectRelease();
    v35 = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v12);
    sub_23C0E4534();
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 248) + 8))(v14, v12);
    v36 = sub_23C0E42DC();
    v37 = MEMORY[0x24BDEDB80];
    *(_QWORD *)(v3 - 160) = v35;
    *(_QWORD *)(v3 - 152) = v37;
    v38 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v15, v3 - 160);
    sub_23C06B9FC(v36, 0x4034000000000000, 0, v15, v38);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 240) + 8))(v17, v15);
  }
LABEL_7:
  __break(1u);
  return result;
}

unint64_t sub_23C0B641C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_256B10658;
  if (!qword_256B10658)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10650);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10660);
    v2[3] = &type metadata for FilterButtonStyle;
    v2[4] = sub_23C06E774(qword_256B10668, &qword_256B10660, MEMORY[0x24BDF43B0]);
    v2[5] = sub_23C06DDD8();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10658);
  }
  return result;
}

void sub_23C0B64FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[48];

  v17[12] = a6;
  v17[21] = a5;
  v17[17] = a2;
  v17[20] = a1;
  v17[18] = a8;
  v17[19] = a11;
  v15 = sub_23C0E41E0();
  MEMORY[0x24BDAC7A8](v15);
  v17[16] = (char *)v17 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[41] = a3;
  v17[42] = a4;
  v17[1] = a3;
  v17[43] = a6;
  v17[44] = a7;
  v17[2] = a7;
  v17[45] = a9;
  v17[46] = a10;
  v17[3] = a10;
  type metadata accessor for Option();
}

void sub_23C0B65D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  swift_getTupleTypeMetadata2();
  v16 = sub_23C0E481C();
  v17 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10650);
  v18 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v16);
  v19 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v15 - 168) = v16;
  *(_QWORD *)(v15 - 160) = v19;
  *(_QWORD *)(v15 - 152) = v17;
  *(_QWORD *)(v15 - 144) = v18;
  *(_QWORD *)(v15 - 136) = MEMORY[0x24BEE0D10];
  v20 = sub_23C0E4654();
  *(_QWORD *)(v15 - 432) = v20;
  *(_QWORD *)(v15 - 96) = sub_23C0B641C();
  *(_QWORD *)(v15 - 440) = MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v20, v15 - 96);
  v21 = sub_23C0E46A8();
  *(_QWORD *)(v15 - 384) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v15 - 416) = v21;
  MEMORY[0x24BDAC7A8](v21);
  *(_QWORD *)(v15 - 424) = (char *)&a9 - v22;
  v23 = sub_23C0E4024();
  *(_QWORD *)(v15 - 376) = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)(v15 - 448) = (char *)&a9 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  *(_QWORD *)(v15 - 392) = (char *)&a9 - v27;
  *(_QWORD *)(v15 - 464) = *(_QWORD *)(v9 - 8);
  v28 = MEMORY[0x24BDAC7A8](v26);
  MEMORY[0x24BDAC7A8](v28);
  *(_QWORD *)(v15 - 456) = (char *)&a9 - v29;
  *(_QWORD *)(v15 - 168) = v13;
  *(_QWORD *)(v15 - 160) = v9;
  v30 = *(_QWORD *)(v15 - 328);
  *(_QWORD *)(v15 - 152) = v10;
  *(_QWORD *)(v15 - 144) = v30;
  *(_QWORD *)(v15 - 136) = *(_QWORD *)(v15 - 400);
  *(_QWORD *)(v15 - 128) = v11;
  *(_QWORD *)(v15 - 120) = v14;
  *(_QWORD *)(v15 - 112) = v12;
  *(_QWORD *)(v15 - 104) = *(_QWORD *)(v15 - 344);
  type metadata accessor for FilterStandardSectionView();
}

uint64_t sub_23C0B67D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v9 - 336) + *(int *)(a1 + 100)))(*(_QWORD *)(v9 - 336), *(_QWORD *)(*(_QWORD *)(v9 - 336) + *(int *)(a1 + 92)), *(_QWORD *)(*(_QWORD *)(v9 - 336) + *(int *)(a1 + 92) + 8));
  v10 = v3;
  v11 = v6;
  sub_23C06E920(v5, v7, v10);
  v12 = *(_QWORD *)(v9 - 464);
  v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(_QWORD *)(v9 - 408) = v13;
  v13(v5, v7);
  swift_bridgeObjectRetain();
  sub_23C0E4114();
  *(_QWORD *)(v9 - 304) = *(_QWORD *)(v9 - 488);
  *(_QWORD *)(v9 - 296) = v7;
  *(_QWORD *)(v9 - 288) = v4;
  *(_QWORD *)(v9 - 280) = *(_QWORD *)(v9 - 328);
  *(_QWORD *)(v9 - 272) = v1;
  *(_QWORD *)(v9 - 264) = *(_QWORD *)(v9 - 480);
  v14 = *(_QWORD *)(v9 - 472);
  *(_QWORD *)(v9 - 256) = v8;
  *(_QWORD *)(v9 - 248) = v14;
  v15 = *(_QWORD *)(v9 - 336);
  *(_QWORD *)(v9 - 240) = v11;
  *(_QWORD *)(v9 - 232) = v15;
  sub_23C06B998();
  v16 = *(_QWORD *)(v9 - 424);
  sub_23C0E469C();
  v17 = *(_QWORD *)(v9 - 416);
  v18 = MEMORY[0x242616E9C](MEMORY[0x24BDF5198], v17);
  v19 = *(_QWORD *)(v9 - 448);
  sub_23C0E4534();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 384) + 8))(v16, v17);
  v20 = MEMORY[0x24BDEDB80];
  *(_QWORD *)(v9 - 184) = v18;
  *(_QWORD *)(v9 - 176) = v20;
  v21 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v2, v9 - 184);
  v22 = *(_QWORD *)(v9 - 392);
  sub_23C06E920(v19, v2, v22);
  v23 = *(_QWORD *)(v9 - 376);
  v24 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v24(v19, v2);
  v25 = *(_QWORD *)(v9 - 456);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v5, v25, v7);
  *(_QWORD *)(v9 - 168) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v19, v22, v2);
  *(_QWORD *)(v9 - 160) = v19;
  *(_QWORD *)(v9 - 200) = v7;
  *(_QWORD *)(v9 - 192) = v2;
  *(_QWORD *)(v9 - 216) = *(_QWORD *)(v9 - 344);
  *(_QWORD *)(v9 - 208) = v21;
  sub_23C0DE900((uint64_t *)(v9 - 168), 2uLL, v9 - 200);
  v24(v22, v2);
  v26 = *(void (**)(uint64_t, uint64_t))(v9 - 408);
  v26(v25, v7);
  v24(v19, v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v26)(v5, v7);
}

void sub_23C0B6A84(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23C0B64FC(v1[11], v1[12], v1[2], v1[4], v1[5], v1[6], v1[7], a1, v1[8], v1[9], v1[10]);
}

uint64_t sub_23C0B6AC0()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23C0B6B04()
{
  type metadata accessor for FilterStandardSectionView();
}

void sub_23C0B6B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 272) = v16;
  *(_QWORD *)(v15 - 280) = a1;
  *(_QWORD *)(v15 - 352) = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 264) = (char *)&a9 - v17;
  *(_QWORD *)(v15 - 160) = v9;
  *(_QWORD *)(v15 - 152) = v13;
  *(_QWORD *)(v15 - 288) = v13;
  *(_QWORD *)(v15 - 144) = v12;
  *(_QWORD *)(v15 - 136) = v11;
  *(_QWORD *)(v15 - 128) = v10;
  *(_QWORD *)(v15 - 120) = v14;
  type metadata accessor for Option();
}

uint64_t sub_23C0B6C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  unint64_t v33;
  _BYTE v34[80];

  swift_getTupleTypeMetadata2();
  v7 = sub_23C0E481C();
  *(_QWORD *)(v6 - 312) = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10650);
  *(_QWORD *)(v6 - 328) = v8;
  v9 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v7);
  *(_QWORD *)(v6 - 336) = v9;
  v10 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v6 - 160) = v7;
  *(_QWORD *)(v6 - 152) = v10;
  *(_QWORD *)(v6 - 144) = v8;
  *(_QWORD *)(v6 - 136) = v9;
  *(_QWORD *)(v6 - 128) = MEMORY[0x24BEE0D10];
  v11 = sub_23C0E4654();
  *(_QWORD *)(v6 - 320) = v11;
  *(_QWORD *)(v6 - 304) = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v6 - 384) = &v34[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v6 - 344) = &v34[-v14];
  *(_QWORD *)(v6 - 168) = *(_QWORD *)(v5 + *(int *)(v4 + 108));
  v15 = sub_23C0E481C();
  MEMORY[0x242616E9C](MEMORY[0x24BEE12C8], v15);
  sub_23C0E47E0();
  *(_QWORD *)(v6 - 168) = *(_QWORD *)(v6 - 160);
  v16 = sub_23C0E4918();
  MEMORY[0x242616E9C](MEMORY[0x24BEE2FC0], v16);
  *(_QWORD *)(v6 - 160) = sub_23C0E4828();
  v17 = v2;
  *(_QWORD *)(v6 - 424) = v2;
  *(_QWORD *)(v6 - 256) = v2;
  v18 = *(_QWORD *)(v6 - 376);
  *(_QWORD *)(v6 - 248) = v18;
  *(_QWORD *)(v6 - 240) = v1;
  v19 = *(_QWORD *)(v6 - 368);
  v20 = *(_QWORD *)(v6 - 400);
  *(_QWORD *)(v6 - 232) = v19;
  *(_QWORD *)(v6 - 224) = v20;
  v21 = v0;
  *(_QWORD *)(v6 - 216) = v0;
  v22 = *(_QWORD *)(v6 - 392);
  *(_QWORD *)(v6 - 208) = v22;
  *(_QWORD *)(v6 - 200) = v3;
  v23 = *(_QWORD *)(v6 - 360);
  *(_QWORD *)(v6 - 192) = v23;
  *(_QWORD *)(v6 - 408) = swift_getKeyPath();
  v24 = *(_QWORD *)(v6 - 272);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v24 + 16))(*(_QWORD *)(v6 - 264), *(_QWORD *)(v6 - 416), *(_QWORD *)(v6 - 280));
  v25 = (*(unsigned __int8 *)(v24 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v26 = (char *)swift_allocObject();
  *((_QWORD *)v26 + 2) = v17;
  *((_QWORD *)v26 + 3) = v18;
  *((_QWORD *)v26 + 4) = *(_QWORD *)(v6 - 288);
  *((_QWORD *)v26 + 5) = v19;
  *((_QWORD *)v26 + 6) = v20;
  *((_QWORD *)v26 + 7) = v21;
  *((_QWORD *)v26 + 8) = v22;
  *((_QWORD *)v26 + 9) = v3;
  *((_QWORD *)v26 + 10) = v23;
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v6 - 272) + 32))(&v26[v25], *(_QWORD *)(v6 - 264), *(_QWORD *)(v6 - 280));
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = *(_QWORD *)(v6 - 424);
  v27[3] = v18;
  v27[4] = *(_QWORD *)(v6 - 288);
  v27[5] = v19;
  v27[6] = v20;
  v27[7] = v21;
  v27[8] = v22;
  v27[9] = v3;
  v27[10] = v23;
  v27[11] = sub_23C0B8694;
  v27[12] = v26;
  v33 = sub_23C0B641C();
  v28 = *(_QWORD *)(v6 - 384);
  sub_23C0E463C();
  *(_QWORD *)(v6 - 176) = v33;
  v29 = *(_QWORD *)(v6 - 320);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v29, v6 - 176);
  v30 = *(_QWORD *)(v6 - 344);
  sub_23C06E920(v28, v29, v30);
  v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 304) + 8);
  v31(v28, v29);
  sub_23C06B980(v30, v29, *(_QWORD *)(v6 - 296));
  return ((uint64_t (*)(uint64_t, uint64_t))v31)(v30, v29);
}

void sub_23C0B6FDC()
{
  type metadata accessor for Option();
}

void sub_23C0B7078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 - 296) = a1;
  *(_QWORD *)(v18 - 320) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v18 - 304) = (char *)&a9 - v19;
  *(_QWORD *)(v18 - 160) = v17;
  *(_QWORD *)(v18 - 152) = v12;
  *(_QWORD *)(v18 - 144) = v9;
  *(_QWORD *)(v18 - 136) = v14;
  *(_QWORD *)(v18 - 128) = v15;
  *(_QWORD *)(v18 - 120) = v10;
  *(_QWORD *)(v18 - 112) = v13;
  *(_QWORD *)(v18 - 104) = v16;
  *(_QWORD *)(v18 - 448) = v16;
  *(_QWORD *)(v18 - 96) = v11;
  type metadata accessor for FilterStandardSectionView();
}

uint64_t sub_23C0B70E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  _BYTE v39[96];

  v9 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 424) = a1;
  v10 = *(_QWORD *)(v9 + 64);
  v11 = v9;
  MEMORY[0x24BDAC7A8](a1);
  v13 = &v39[-v12];
  *(_QWORD *)(v7 - 416) = &v39[-v12];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10660);
  *(_QWORD *)(v7 - 368) = v14;
  *(_QWORD *)(v7 - 360) = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v7 - 384) = &v39[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B106F0);
  *(_QWORD *)(v7 - 336) = v16;
  *(_QWORD *)(v7 - 344) = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v7 - 376) = &v39[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v7 - 440) = v11;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v11 + 16))(v13, *(_QWORD *)(v7 - 288), a1);
  v18 = *(_QWORD *)(v7 - 320);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v18 + 16))(*(_QWORD *)(v7 - 304), *(_QWORD *)(v7 - 280), *(_QWORD *)(v7 - 296));
  v19 = (*(unsigned __int8 *)(v11 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v20 = (v10 + *(unsigned __int8 *)(v18 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  *(_QWORD *)(v7 - 432) = (v6 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (char *)swift_allocObject();
  v22 = *(_QWORD *)(v7 - 408);
  *((_QWORD *)v21 + 2) = v22;
  *((_QWORD *)v21 + 3) = v2;
  *((_QWORD *)v21 + 4) = *(_QWORD *)(v7 - 312);
  *((_QWORD *)v21 + 5) = v3;
  v23 = v4;
  *((_QWORD *)v21 + 6) = v4;
  *((_QWORD *)v21 + 7) = v1;
  v24 = *(_QWORD *)(v7 - 400);
  *((_QWORD *)v21 + 8) = v24;
  *((_QWORD *)v21 + 9) = v5;
  v25 = *(_QWORD *)(v7 - 392);
  *((_QWORD *)v21 + 10) = v25;
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v7 - 440) + 32))(&v21[v19], *(_QWORD *)(v7 - 416), *(_QWORD *)(v7 - 424));
  v26 = *(_QWORD *)(v7 - 296);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 320) + 32))(&v21[v20], *(_QWORD *)(v7 - 304), v26);
  *(_QWORD *)&v21[*(_QWORD *)(v7 - 432)] = *(_QWORD *)(v7 - 352);
  *(_QWORD *)(v7 - 256) = v22;
  *(_QWORD *)(v7 - 248) = v2;
  *(_QWORD *)(v7 - 240) = *(_QWORD *)(v7 - 312);
  *(_QWORD *)(v7 - 232) = v3;
  *(_QWORD *)(v7 - 224) = v23;
  *(_QWORD *)(v7 - 216) = v1;
  v27 = *(_QWORD *)(v7 - 448);
  *(_QWORD *)(v7 - 208) = v24;
  *(_QWORD *)(v7 - 200) = v27;
  v28 = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 192) = v25;
  *(_QWORD *)(v7 - 184) = v28;
  *(_QWORD *)(v7 - 176) = *(_QWORD *)(v7 - 288);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B106F8);
  sub_23C0B8A50();
  v29 = *(_QWORD *)(v7 - 384);
  sub_23C0E45D0();
  sub_23C06E774(qword_256B10668, &qword_256B10660, MEMORY[0x24BDF43B0]);
  sub_23C06DDD8();
  v30 = *(_QWORD *)(v7 - 376);
  v31 = *(_QWORD *)(v7 - 368);
  sub_23C0E4420();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 360) + 8))(v29, v31);
  LOBYTE(v31) = *(_BYTE *)(v28 + *(int *)(v26 + 68)) == 0;
  KeyPath = swift_getKeyPath();
  v33 = swift_allocObject();
  *(_BYTE *)(v33 + 16) = v31;
  v34 = *(_QWORD *)(v7 - 344);
  v35 = *(_QWORD *)(v7 - 328);
  v36 = *(_QWORD *)(v7 - 336);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v35, v30, v36);
  v37 = (uint64_t *)(v35 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B10650) + 36));
  *v37 = KeyPath;
  v37[1] = (uint64_t)sub_23C06E620;
  v37[2] = v33;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v30, v36);
}

void sub_23C0B7494(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  _QWORD v31[5];
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v44 = a7;
  v45 = a8;
  v42 = a4;
  v43 = a5;
  v46 = a3;
  v31[3] = a2;
  v37 = a9;
  v38 = a1;
  v41 = a10;
  v40 = a11;
  v39 = a12;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F198);
  MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F1F8);
  MEMORY[0x24BDAC7A8](v34);
  v33 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23C0E4630();
  MEMORY[0x24BDAC7A8](v16);
  v31[4] = (char *)v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10710);
  MEMORY[0x24BDAC7A8](v32);
  v31[2] = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = a6;
  v48 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 24))(a3, a6);
  v49 = v19;
  sub_23C06DB6C();
  v20 = sub_23C0E43CC();
  v22 = v21;
  v24 = v23 & 1;
  sub_23C0E4378();
  v25 = sub_23C0E43B4();
  v27 = v26;
  v29 = v28;
  v31[1] = v30;
  swift_release();
  sub_23C06DBB0(v20, v22, v24);
  swift_bridgeObjectRelease();
  sub_23C0E43A8();
  sub_23C06DBB0(v25, v27, v29 & 1);
  swift_bridgeObjectRelease();
  sub_23C06E870();
}

void sub_23C0B76EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v1 + 416) = a1;
  v6 = sub_23C0E4390();
  *(_QWORD *)(v1 + 8) = v7;
  v9 = v8;
  v11 = v10 & 1;
  sub_23C06DBB0(v2, v3, v5);
  swift_release();
  swift_bridgeObjectRelease();
  v12 = sub_23C0E4684();
  v13 = *(_QWORD *)(v1 + 8);
  sub_23C0C4554(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, v1 + 416, 0.0, 1, INFINITY, 0, v12, v14, v6, v13, v11, v9);
  sub_23C06DBB0(v6, v13, v11);
  swift_bridgeObjectRelease();
  v15 = v4[16];
  v4[6] = v4[15];
  v4[7] = v15;
  v4[8] = v4[17];
  v16 = v4[12];
  v4[2] = v4[11];
  v4[3] = v16;
  v17 = v4[14];
  v4[4] = v4[13];
  v4[5] = v17;
  v18 = v4[10];
  *(_OWORD *)(v1 + 272) = v4[9];
  *(_OWORD *)(v1 + 288) = v18;
  v19 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 168) = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v1 + 176) = v19;
  v20 = *(_QWORD *)(v1 + 160);
  *(_QWORD *)(v1 + 184) = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 192) = v20;
  v21 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v1 + 200) = *(_QWORD *)(v1 + 136);
  *(_QWORD *)(v1 + 208) = v21;
  v22 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 216) = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v1 + 224) = v22;
  *(_QWORD *)(v1 + 232) = *(_QWORD *)(v1 + 96);
  type metadata accessor for FilterStandardSectionView();
}

void sub_23C0B7834()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  sub_23C0E4684();
  sub_23C0E3FD0();
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_BYTE *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_BYTE *)(v0 + 192);
  v6 = v1[7];
  v1[15] = v1[6];
  v1[16] = v6;
  v1[17] = v1[8];
  v7 = v1[3];
  v1[11] = v1[2];
  v1[12] = v7;
  v8 = v1[5];
  v1[13] = v1[4];
  v1[14] = v8;
  v9 = *(_OWORD *)(v0 + 288);
  v1[9] = *(_OWORD *)(v0 + 272);
  v1[10] = v9;
  *(_QWORD *)(v0 + 560) = v2;
  *(_BYTE *)(v0 + 568) = v3;
  *(_QWORD *)(v0 + 576) = v4;
  *(_BYTE *)(v0 + 584) = v5;
  v1[20] = *(_OWORD *)(v0 + 200);
  v10 = *MEMORY[0x24BDEEB68];
  v11 = sub_23C0E4120();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 104);
  v13 = *(_QWORD *)(v0 + 32);
  v12(v13, v10, v11);
  v14 = *(_QWORD *)(v0 + 48);
  sub_23C06E6F4(v13, v14);
  *(_BYTE *)(v14 + *(int *)(*(_QWORD *)(v0 + 56) + 36)) = 0;
  v15 = *(_OWORD **)(v0 + 16);
  sub_23C068360(v14, (uint64_t)v15 + *(int *)(*(_QWORD *)(v0 + 40) + 36), &qword_256B0F1F8);
  v16 = v1[18];
  v15[8] = v1[17];
  v15[9] = v16;
  v17 = v1[20];
  v15[10] = v1[19];
  v15[11] = v17;
  v18 = v1[14];
  v15[4] = v1[13];
  v15[5] = v18;
  v19 = v1[16];
  v15[6] = v1[15];
  v15[7] = v19;
  v20 = v1[10];
  *v15 = v1[9];
  v15[1] = v20;
  v21 = v1[12];
  v15[2] = v1[11];
  v15[3] = v21;
  sub_23C072DA8(v0 + 416);
  sub_23C06E834(v14, &qword_256B0F1F8);
  sub_23C06E738(v13);
  sub_23C072DE4(v0 + 272);
  v12(v13, v10, v11);
  sub_23C06E628();
}

uint64_t sub_23C0B79D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = v1[8];
  sub_23C06E6F4(v3, v5);
  *(_QWORD *)(v5 + *(int *)(v1[9] + 36)) = a1;
  sub_23C06E738(v3);
  v6 = sub_23C0E4684();
  v8 = v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B106F8);
  v10 = v1[10];
  v11 = v10 + *(int *)(v9 + 36);
  sub_23C068360(v5, v11, &qword_256B0F198);
  v12 = (uint64_t *)(v11 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B0F170) + 36));
  *v12 = v6;
  v12[1] = v8;
  sub_23C068360(v2, v10, &qword_256B10710);
  sub_23C06E834(v5, &qword_256B0F198);
  return sub_23C06E834(v2, &qword_256B10710);
}

uint64_t sub_23C0B7AAC()
{
  return swift_allocateGenericValueMetadata();
}

void sub_23C0B7AB4()
{
  unint64_t v0;

  sub_23C06D600();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t *sub_23C0B7B50(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23C0E3EB0();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[23];
    v12 = a3[24];
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
    v16 = a3[25];
    v17 = a3[26];
    v18 = (uint64_t *)((char *)a1 + v16);
    v19 = (uint64_t *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (uint64_t *)((char *)a1 + v17);
    v22 = (uint64_t *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    *(uint64_t *)((char *)a1 + a3[27]) = *(uint64_t *)((char *)a2 + a3[27]);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23C0B7C94(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_23C0E3EB0();
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

char *sub_23C0B7D2C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[23];
  v10 = a3[24];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v14 = a3[25];
  v15 = a3[26];
  v16 = &a1[v14];
  v17 = &a2[v14];
  v18 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = v18;
  v19 = &a1[v15];
  v20 = &a2[v15];
  v21 = *((_QWORD *)v20 + 1);
  *(_QWORD *)v19 = *(_QWORD *)v20;
  *((_QWORD *)v19 + 1) = v21;
  *(_QWORD *)&a1[a3[27]] = *(_QWORD *)&a2[a3[27]];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_23C0B7E44(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[23];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&a1[a3[24]] = *(_QWORD *)&a2[a3[24]];
  v15 = a3[25];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = v18;
  swift_retain();
  swift_release();
  v19 = a3[26];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[27]] = *(_QWORD *)&a2[a3[27]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_23C0B7FDC(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[24];
  *(_OWORD *)&a1[a3[23]] = *(_OWORD *)&a2[a3[23]];
  *(_QWORD *)&a1[v9] = *(_QWORD *)&a2[v9];
  v10 = a3[26];
  *(_OWORD *)&a1[a3[25]] = *(_OWORD *)&a2[a3[25]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  *(_QWORD *)&a1[a3[27]] = *(_QWORD *)&a2[a3[27]];
  return a1;
}

char *sub_23C0B80C0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[23];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[25];
  *(_QWORD *)&a1[a3[24]] = *(_QWORD *)&a2[a3[24]];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  swift_release();
  *(_OWORD *)&a1[a3[26]] = *(_OWORD *)&a2[a3[26]];
  swift_release();
  *(_QWORD *)&a1[a3[27]] = *(_QWORD *)&a2[a3[27]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C0B8224()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0B8230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 100));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_23C0B82B0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0B82BC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 100)) = (a2 - 1);
  return result;
}

void sub_23C0B8338()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0B836C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[13];

  swift_getTupleTypeMetadata2();
  v0 = sub_23C0E481C();
  v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10650);
  v2 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v0);
  v13[1] = v0;
  v13[2] = MEMORY[0x24BEE0D00];
  v13[3] = v1;
  v13[4] = v2;
  v13[5] = MEMORY[0x24BEE0D10];
  v3 = sub_23C0E4654();
  v13[0] = sub_23C0B641C();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v3, v13);
  sub_23C0E46A8();
  sub_23C0E4024();
  swift_getTupleTypeMetadata2();
  v4 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v4);
  v5 = sub_23C0E4618();
  v6 = sub_23C0E4024();
  sub_23C0E4234();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDF02F8];
  v8 = sub_23C0E4024();
  v12[0] = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v5);
  v12[1] = MEMORY[0x24BDEDB80];
  v9 = MEMORY[0x24BDED308];
  v11[0] = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v6, v12);
  v11[1] = sub_23C0683A4(qword_256B0F070, v7, MEMORY[0x24BDF02F0]);
  return MEMORY[0x242616E9C](v9, v8, v11);
}

void sub_23C0B8528()
{
  sub_23C0B6B04();
}

uint64_t sub_23C0B8560()
{
  return 72;
}

__n128 sub_23C0B856C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_23C0B8590()
{
  type metadata accessor for FilterStandardSectionView();
}

uint64_t sub_23C0B85D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v3 = (v2 + 88) & ~v2;
  v4 = sub_23C0E3EB0();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1 + v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1 + v3, v4);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23C0B8694()
{
  type metadata accessor for FilterStandardSectionView();
}

void sub_23C0B86F0()
{
  sub_23C0B6FDC();
}

uint64_t sub_23C0B874C()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C0B8770()
{
  type metadata accessor for FilterStandardSectionView();
}

void sub_23C0B87C4()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0B880C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v5 = sub_23C0E3EB0();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v1 + v2, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1 + v2, v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v1 + ((v2 + v3 + v4) & ~v4));
  return swift_deallocObject();
}

void sub_23C0B88F8()
{
  type metadata accessor for FilterStandardSectionView();
}

void sub_23C0B8954()
{
  type metadata accessor for Option();
}

void sub_23C0B8980()
{
  type metadata accessor for FilterStandardSectionView();
}

uint64_t sub_23C0B89D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + *(int *)(a1 + 104) + v4))(v3, v1);
}

void sub_23C0B8A14(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23C0B7494(v1[11], v1[12], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1, v1[8], v1[9], v1[10]);
}

unint64_t sub_23C0B8A50()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10700;
  if (!qword_256B10700)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B106F8);
    v2[0] = sub_23C0B8AD4();
    v2[1] = sub_23C06E774(&qword_256B0F168, &qword_256B0F170, MEMORY[0x24BDEF370]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10700);
  }
  return result;
}

unint64_t sub_23C0B8AD4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10708;
  if (!qword_256B10708)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10710);
    v2[0] = sub_23C0B8B58();
    v2[1] = sub_23C06E774(&qword_256B0F1F0, &qword_256B0F1F8, MEMORY[0x24BDEFAD8]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10708);
  }
  return result;
}

unint64_t sub_23C0B8B58()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10718;
  if (!qword_256B10718)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10720);
    v2[0] = sub_23C0A4420();
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10718);
  }
  return result;
}

uint64_t sub_23C0B8BCC()
{
  return swift_deallocObject();
}

uint64_t Artwork.backgroundColor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C068360(v1, a1, &qword_256B0EFB0);
}

uint64_t Artwork.variant.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for Artwork() + 20));
}

uint64_t type metadata accessor for Artwork()
{
  uint64_t result;

  result = qword_256B107D8;
  if (!qword_256B107D8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t Artwork.templateURL.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Artwork();
  return sub_23C068360(v1 + *(int *)(v3 + 24), a1, &qword_256B0EFA8);
}

uint64_t Artwork.init(backgroundColor:templateURL:variant:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t result;

  sub_23C06E7B4(a1, a4, &qword_256B0EFB0);
  v7 = type metadata accessor for Artwork();
  result = sub_23C06E7B4(a2, a4 + *(int *)(v7 + 24), &qword_256B0EFA8);
  *(_BYTE *)(a4 + *(int *)(v7 + 20)) = a3;
  return result;
}

uint64_t sub_23C0B8D00()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E6169726176;
  if (*v0 != 1)
    v1 = 0x6574616C706D6574;
  if (*v0)
    return v1;
  else
    return 0x756F72676B636162;
}

uint64_t sub_23C0B8D70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0BB220(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0B8D94()
{
  sub_23C0B8FFC();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0B8DBC()
{
  sub_23C0B8FFC();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0B8DE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C068360(v1, a1, &qword_256B0EFB0);
}

uint64_t sub_23C0B8E08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C068360(v2 + *(int *)(a1 + 24), a2, &qword_256B0EFA8);
}

uint64_t Artwork.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10728);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B8FFC();
  sub_23C0E4AE0();
  v10[15] = 0;
  sub_23C0E3F04();
  sub_23C0683A4(&qword_256B10738, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB0]);
  sub_23C0E49FC();
  if (!v2)
  {
    v10[14] = *(_BYTE *)(v3 + *(int *)(type metadata accessor for Artwork() + 20));
    v10[13] = 1;
    sub_23C0B9040();
    sub_23C0E4A44();
    v10[12] = 2;
    sub_23C0E3EBC();
    sub_23C0683A4(&qword_256B10748, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_23C0E49FC();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23C0B8FFC()
{
  unint64_t result;

  result = qword_256B10730;
  if (!qword_256B10730)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA8BC, &type metadata for Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10730);
  }
  return result;
}

unint64_t sub_23C0B9040()
{
  unint64_t result;

  result = qword_256B10740;
  if (!qword_256B10740)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ArtworkVariant, &type metadata for ArtworkVariant);
    atomic_store(result, (unint64_t *)&qword_256B10740);
  }
  return result;
}

uint64_t Artwork.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v24 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  MEMORY[0x24BDAC7A8](v6);
  v25 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10750);
  v8 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Artwork();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0B8FFC();
  v26 = v10;
  v14 = v28;
  sub_23C0E4AD4();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v8;
  v16 = (uint64_t)v13;
  v28 = v5;
  sub_23C0E3F04();
  v32 = 0;
  sub_23C0683A4(&qword_256B10758, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FC8]);
  v17 = (uint64_t)v25;
  v18 = v27;
  v19 = v26;
  sub_23C0E4978();
  v20 = v16;
  sub_23C06E7B4(v17, v16, &qword_256B0EFB0);
  v30 = 1;
  sub_23C0B93B8();
  sub_23C0E49C0();
  *(_BYTE *)(v16 + *(int *)(v11 + 20)) = v31;
  sub_23C0E3EBC();
  v29 = 2;
  sub_23C0683A4(&qword_256B10768, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
  v21 = (uint64_t)v28;
  sub_23C0E4978();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v18);
  sub_23C06E7B4(v21, v20 + *(int *)(v11 + 24), &qword_256B0EFA8);
  sub_23C0682D8(v20, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_23C0683E4(v20);
}

unint64_t sub_23C0B93B8()
{
  unint64_t result;

  result = qword_256B10760;
  if (!qword_256B10760)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ArtworkVariant, &type metadata for ArtworkVariant);
    atomic_store(result, (unint64_t *)&qword_256B10760);
  }
  return result;
}

uint64_t sub_23C0B93FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return Artwork.init(from:)(a1, a2);
}

uint64_t sub_23C0B9410(_QWORD *a1)
{
  return Artwork.encode(to:)(a1);
}

uint64_t Artwork.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v17;
  uint64_t v18;
  char *v19;

  v1 = v0;
  v2 = sub_23C0E3EBC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v19 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23C0E3F04();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C068360(v1, (uint64_t)v14, &qword_256B0EFB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    sub_23C0E4AB0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    sub_23C0E4AB0();
    sub_23C0683A4(&qword_256B0EFB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23C0E4714();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  v15 = type metadata accessor for Artwork();
  ArtworkVariant.rawValue.getter(*(_BYTE *)(v1 + *(int *)(v15 + 20)));
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  sub_23C068360(v1 + *(int *)(v15 + 24), (uint64_t)v7, &qword_256B0EFA8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
    return sub_23C0E4AB0();
  v17 = v19;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v19, v7, v2);
  sub_23C0E4AB0();
  sub_23C0683A4(&qword_256B0EFC0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23C0E4714();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v17, v2);
}

uint64_t Artwork.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = sub_23C0E3EBC();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23C0E3F04();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C0E4A98();
  sub_23C068360(v1, (uint64_t)v15, &qword_256B0EFB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_23C0E4AB0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_23C0E4AB0();
    sub_23C0683A4(&qword_256B0EFB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23C0E4714();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v16 = type metadata accessor for Artwork();
  ArtworkVariant.rawValue.getter(*(_BYTE *)(v1 + *(int *)(v16 + 20)));
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  sub_23C068360(v1 + *(int *)(v16 + 24), (uint64_t)v8, &qword_256B0EFA8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_23C0E4AB0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_23C0E4AB0();
    sub_23C0683A4(&qword_256B0EFC0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23C0E4714();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return sub_23C0E4AC8();
}

uint64_t sub_23C0B998C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v19;
  char *v20;
  uint64_t v21;

  v21 = a2;
  v3 = v2;
  v4 = sub_23C0E3EBC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v20 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23C0E3F04();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C068360(v3, (uint64_t)v16, &qword_256B0EFB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1)
  {
    sub_23C0E4AB0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v16, v10);
    sub_23C0E4AB0();
    sub_23C0683A4(&qword_256B0EFB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23C0E4714();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  v17 = v21;
  ArtworkVariant.rawValue.getter(*(_BYTE *)(v3 + *(int *)(v21 + 20)));
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  sub_23C068360(v3 + *(int *)(v17 + 24), (uint64_t)v9, &qword_256B0EFA8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4) == 1)
    return sub_23C0E4AB0();
  v19 = v20;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v20, v9, v4);
  sub_23C0E4AB0();
  sub_23C0683A4(&qword_256B0EFC0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_23C0E4714();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v19, v4);
}

uint64_t sub_23C0B9C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v21 = a2;
  v3 = sub_23C0E3EBC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v20 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23C0E3F04();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C0E4A98();
  sub_23C068360(v2, (uint64_t)v15, &qword_256B0EFB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_23C0E4AB0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_23C0E4AB0();
    sub_23C0683A4(&qword_256B0EFB8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FB8]);
    sub_23C0E4714();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v16 = v21;
  ArtworkVariant.rawValue.getter(*(_BYTE *)(v2 + *(int *)(v21 + 20)));
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  sub_23C068360(v2 + *(int *)(v16 + 24), (uint64_t)v8, &qword_256B0EFA8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
  {
    sub_23C0E4AB0();
  }
  else
  {
    v17 = v20;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v20, v8, v3);
    sub_23C0E4AB0();
    sub_23C0683A4(&qword_256B0EFC0, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
    sub_23C0E4714();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v3);
  }
  return sub_23C0E4AC8();
}

BOOL _s16FitnessFiltering7ArtworkV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t *v29;
  uint64_t v30;
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _BOOL8 result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = a2;
  v62 = sub_23C0E3EBC();
  v60 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v55 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F408);
  MEMORY[0x24BDAC7A8](v57);
  v61 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v56 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v58 = (uint64_t)&v55 - v9;
  MEMORY[0x24BDAC7A8](v8);
  v59 = (uint64_t)&v55 - v10;
  v11 = sub_23C0E3F04();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F410);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x24BDAC7A8](v19);
  v24 = (char *)&v55 - v23;
  MEMORY[0x24BDAC7A8](v22);
  v26 = (char *)&v55 - v25;
  v63 = a1;
  sub_23C068360(a1, (uint64_t)&v55 - v25, &qword_256B0EFB0);
  sub_23C068360(v64, (uint64_t)v24, &qword_256B0EFB0);
  v27 = (uint64_t)&v17[*(int *)(v15 + 48)];
  sub_23C068360((uint64_t)v26, (uint64_t)v17, &qword_256B0EFB0);
  sub_23C068360((uint64_t)v24, v27, &qword_256B0EFB0);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v28((uint64_t)v17, 1, v11) == 1)
  {
    sub_23C06E834((uint64_t)v24, &qword_256B0EFB0);
    sub_23C06E834((uint64_t)v26, &qword_256B0EFB0);
    if (v28(v27, 1, v11) == 1)
    {
      sub_23C06E834((uint64_t)v17, &qword_256B0EFB0);
      goto LABEL_8;
    }
LABEL_6:
    v29 = &qword_256B0F410;
    v30 = (uint64_t)v17;
LABEL_18:
    sub_23C06E834(v30, v29);
    return 0;
  }
  sub_23C068360((uint64_t)v17, (uint64_t)v21, &qword_256B0EFB0);
  if (v28(v27, 1, v11) == 1)
  {
    sub_23C06E834((uint64_t)v24, &qword_256B0EFB0);
    sub_23C06E834((uint64_t)v26, &qword_256B0EFB0);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, v27, v11);
  sub_23C0683A4(&qword_256B0F420, (uint64_t (*)(uint64_t))MEMORY[0x24BE34FA0], MEMORY[0x24BE34FC0]);
  v31 = sub_23C0E4720();
  v32 = *(void (**)(char *, uint64_t))(v12 + 8);
  v32(v14, v11);
  sub_23C06E834((uint64_t)v24, &qword_256B0EFB0);
  sub_23C06E834((uint64_t)v26, &qword_256B0EFB0);
  v32(v21, v11);
  sub_23C06E834((uint64_t)v17, &qword_256B0EFB0);
  if ((v31 & 1) != 0)
  {
LABEL_8:
    v33 = type metadata accessor for Artwork();
    v34 = *(int *)(v33 + 20);
    v36 = v63;
    v35 = v64;
    v37 = *(_BYTE *)(v64 + v34);
    v38 = ArtworkVariant.rawValue.getter(*(_BYTE *)(v63 + v34));
    v40 = v39;
    if (v38 == ArtworkVariant.rawValue.getter(v37) && v40 == v41)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v42 = sub_23C0E4A74();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v42 & 1) == 0)
        return result;
    }
    v44 = v59;
    sub_23C068360(v36 + *(int *)(v33 + 24), v59, &qword_256B0EFA8);
    v45 = v58;
    sub_23C068360(v35 + *(int *)(v33 + 24), v58, &qword_256B0EFA8);
    v46 = v61;
    v47 = v61 + *(int *)(v57 + 48);
    sub_23C068360(v44, v61, &qword_256B0EFA8);
    sub_23C068360(v45, v47, &qword_256B0EFA8);
    v48 = v60;
    v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
    v50 = v62;
    if (v49(v46, 1, v62) == 1)
    {
      sub_23C06E834(v45, &qword_256B0EFA8);
      sub_23C06E834(v44, &qword_256B0EFA8);
      if (v49(v47, 1, v50) == 1)
      {
        sub_23C06E834(v46, &qword_256B0EFA8);
        return 1;
      }
    }
    else
    {
      v51 = v56;
      sub_23C068360(v46, v56, &qword_256B0EFA8);
      if (v49(v47, 1, v50) != 1)
      {
        v52 = v55;
        (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v55, v47, v50);
        sub_23C0683A4(&qword_256B0F418, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB00]);
        v53 = sub_23C0E4720();
        v54 = *(void (**)(char *, uint64_t))(v48 + 8);
        v54(v52, v50);
        sub_23C06E834(v45, &qword_256B0EFA8);
        sub_23C06E834(v44, &qword_256B0EFA8);
        v54((char *)v51, v50);
        sub_23C06E834(v46, &qword_256B0EFA8);
        return (v53 & 1) != 0;
      }
      sub_23C06E834(v45, &qword_256B0EFA8);
      sub_23C06E834(v44, &qword_256B0EFA8);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v51, v50);
    }
    v29 = &qword_256B0F408;
    v30 = v46;
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_23C0BA544()
{
  return sub_23C0683A4(&qword_256B0EF70, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t sub_23C0BA570()
{
  return sub_23C0683A4(&qword_256B0EF58, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t sub_23C0BA59C()
{
  return sub_23C0683A4(&qword_256B10770, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t sub_23C0BA5C8()
{
  return sub_23C0683A4(&qword_256B10778, (uint64_t (*)(uint64_t))type metadata accessor for Artwork, (uint64_t)&protocol conformance descriptor for Artwork);
}

uint64_t *initializeBufferWithCopyOfBuffer for Artwork(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23C0E3F04();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_23C0E3EBC();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for Artwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_23C0E3F04();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = sub_23C0E3EBC();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

char *initializeWithCopy for Artwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23C0E3F04();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_23C0E3EBC();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithCopy for Artwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = sub_23C0E3F04();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v12 = *(int *)(a3 + 24);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_23C0E3EBC();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for Artwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23C0E3F04();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_23C0E3EBC();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for Artwork(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;

  v6 = sub_23C0E3F04();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = sub_23C0E3EBC();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for Artwork()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0BAE28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 246)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xA)
      return v9 - 9;
    else
      return 0;
  }
  else
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for Artwork()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0BAEDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFB0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 246)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 9;
      return result;
    }
    v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EFA8);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23C0BAF84()
{
  unint64_t v0;
  unint64_t v1;

  sub_23C0BB030(319, &qword_256B107E8, (void (*)(uint64_t))MEMORY[0x24BE34FA0]);
  if (v0 <= 0x3F)
  {
    sub_23C0BB030(319, qword_256B107F0, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

void sub_23C0BB030(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23C0E487C();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t storeEnumTagSinglePayload for Artwork.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C0BB0C8 + 4 * byte_23C0EA6A5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C0BB0FC + 4 * byte_23C0EA6A0[v4]))();
}

uint64_t sub_23C0BB0FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0BB104(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0BB10CLL);
  return result;
}

uint64_t sub_23C0BB118(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0BB120);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C0BB124(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0BB12C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Artwork.CodingKeys()
{
  return &type metadata for Artwork.CodingKeys;
}

unint64_t sub_23C0BB14C()
{
  unint64_t result;

  result = qword_256B10828;
  if (!qword_256B10828)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA894, &type metadata for Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10828);
  }
  return result;
}

unint64_t sub_23C0BB194()
{
  unint64_t result;

  result = qword_256B10830;
  if (!qword_256B10830)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA804, &type metadata for Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10830);
  }
  return result;
}

unint64_t sub_23C0BB1DC()
{
  unint64_t result;

  result = qword_256B10838;
  if (!qword_256B10838)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EA82C, &type metadata for Artwork.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10838);
  }
  return result;
}

uint64_t sub_23C0BB220(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x756F72676B636162 && a2 == 0xEF726F6C6F43646ELL;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E6169726176 && a2 == 0xE700000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574616C706D6574 && a2 == 0xEB000000004C5255)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t FilterEnvironment.attributedTitleProvider.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t FilterEnvironment.dismiss.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return v1;
}

uint64_t FilterEnvironment.existingFilter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(v1 + 56);
  return sub_23C077A18(v2);
}

uint64_t FilterEnvironment.filterCatalog.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_retain();
  return v1;
}

uint64_t FilterEnvironment.filterConfigurationProvider.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_retain();
  return v1;
}

uint64_t FilterEnvironment.queryInitialFilter.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_retain();
  return v1;
}

uint64_t FilterEnvironment.queryFilterOptions.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_retain();
  return v1;
}

uint64_t FilterEnvironment.refreshCanvas.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  swift_retain();
  return v1;
}

__n128 FilterEnvironment.init(attributedTitleProvider:existingFilter:dismiss:filterCatalog:filterConfigurationProvider:queryInitialFilter:queryFilterOptions:refreshCanvas:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __int128 a11, __n128 a12, uint64_t a13)
{
  __n128 result;
  uint64_t v14;
  char v15;

  result = a12;
  v14 = *(_QWORD *)(a3 + 16);
  v15 = *(_BYTE *)(a3 + 24);
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_OWORD *)(a9 + 32) = *(_OWORD *)a3;
  *(_QWORD *)(a9 + 48) = v14;
  *(_BYTE *)(a9 + 56) = v15;
  *(_QWORD *)(a9 + 64) = a6;
  *(_QWORD *)(a9 + 72) = a7;
  *(_QWORD *)(a9 + 80) = a8;
  *(_OWORD *)(a9 + 88) = a10;
  *(_OWORD *)(a9 + 104) = a11;
  *(__n128 *)(a9 + 120) = a12;
  *(_QWORD *)(a9 + 136) = a13;
  return result;
}

uint64_t destroy for FilterEnvironment(uint64_t a1)
{
  swift_release();
  swift_release();
  if (*(_QWORD *)(a1 + 32))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for FilterEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  v6 = (_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 32);
  swift_retain();
  swift_retain();
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *v6;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)v6 + 9);
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v7 = *(_QWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = v7;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FilterEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  v6 = (_OWORD *)(a1 + 32);
  v8 = (_OWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v7)
    {
      *(_QWORD *)(a1 + 32) = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    }
    else
    {
      sub_23C08F848(a1 + 32);
      v9 = *(_OWORD *)(a2 + 41);
      *v6 = *v8;
      *(_OWORD *)(a1 + 41) = v9;
    }
  }
  else if (v7)
  {
    *(_QWORD *)(a1 + 32) = v7;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v10 = *v8;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    *v6 = v10;
  }
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  swift_retain();
  swift_release();
  v12 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v12;
  swift_retain();
  swift_release();
  v13 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v13;
  swift_retain();
  swift_release();
  v14 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v14;
  swift_retain();
  swift_release();
  v15 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v15;
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t assignWithTake for FilterEnvironment(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  if (!*(_QWORD *)(a1 + 32))
    goto LABEL_5;
  if (!v4)
  {
    sub_23C08F848(a1 + 32);
LABEL_5:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
LABEL_6:
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_release();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterEnvironment(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FilterEnvironment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterEnvironment()
{
  return &type metadata for FilterEnvironment;
}

BOOL static FilterSizeClass.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23C0BBA4C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0BBA84
                                                            + 4 * asc_23C0EA940[*v0]))(0x616D536172747865, 0xEA00000000006C6CLL);
}

uint64_t sub_23C0BBA84()
{
  return 0x6C6C616D73;
}

uint64_t sub_23C0BBA98()
{
  return 0x72616C75676572;
}

uint64_t sub_23C0BBAB0()
{
  return 0x6D756964656DLL;
}

uint64_t sub_23C0BBAC4()
{
  return 0x656772616CLL;
}

uint64_t sub_23C0BBAD8()
{
  return 0x72614C6172747865;
}

uint64_t sub_23C0BBAF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0BC3FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0BBB18()
{
  sub_23C0BC154();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0BBB40()
{
  sub_23C0BC154();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0BBB68()
{
  sub_23C0BC198();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0BBB90()
{
  sub_23C0BC198();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0BBBB8()
{
  sub_23C0BC2EC();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0BBBE0()
{
  sub_23C0BC2EC();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0BBC08()
{
  sub_23C0BC1DC();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0BBC30()
{
  sub_23C0BC1DC();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0BBC58()
{
  sub_23C0BC220();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0BBC80()
{
  sub_23C0BC220();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0BBCA8()
{
  sub_23C0BC264();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0BBCD0()
{
  sub_23C0BC264();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0BBCF8()
{
  sub_23C0BC2A8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0BBD20()
{
  sub_23C0BC2A8();
  return sub_23C0E4AF8();
}

void FilterSizeClass.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10840);
  v25 = *(_QWORD *)(v3 - 8);
  v26 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v24 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10848);
  v22 = *(_QWORD *)(v5 - 8);
  v23 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v21 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10850);
  v19 = *(_QWORD *)(v7 - 8);
  v20 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v18 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10858);
  v16 = *(_QWORD *)(v9 - 8);
  v17 = v9;
  MEMORY[0x24BDAC7A8](v9);
  v15 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10860);
  MEMORY[0x24BDAC7A8](v14);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10868);
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10870);
  v27 = *(_QWORD *)(v12 - 8);
  v28 = v12;
  MEMORY[0x24BDAC7A8](v12);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0BC154();
  sub_23C0E4AE0();
  __asm { BR              X10 }
}

uint64_t sub_23C0BBF7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 70) = 0;
  sub_23C0BC2EC();
  v5 = *(_QWORD *)(v4 - 104);
  sub_23C0E49E4();
  (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v2, v3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8))(v1, v5);
}

unint64_t sub_23C0BC154()
{
  unint64_t result;

  result = qword_256B10878;
  if (!qword_256B10878)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAF90, &type metadata for FilterSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10878);
  }
  return result;
}

unint64_t sub_23C0BC198()
{
  unint64_t result;

  result = qword_256B10880;
  if (!qword_256B10880)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAF40, &type metadata for FilterSizeClass.ExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10880);
  }
  return result;
}

unint64_t sub_23C0BC1DC()
{
  unint64_t result;

  result = qword_256B10888;
  if (!qword_256B10888)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAEF0, &type metadata for FilterSizeClass.LargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10888);
  }
  return result;
}

unint64_t sub_23C0BC220()
{
  unint64_t result;

  result = qword_256B10890;
  if (!qword_256B10890)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAEA0, &type metadata for FilterSizeClass.MediumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10890);
  }
  return result;
}

unint64_t sub_23C0BC264()
{
  unint64_t result;

  result = qword_256B10898;
  if (!qword_256B10898)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAE50, &type metadata for FilterSizeClass.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10898);
  }
  return result;
}

unint64_t sub_23C0BC2A8()
{
  unint64_t result;

  result = qword_256B108A0;
  if (!qword_256B108A0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAE00, &type metadata for FilterSizeClass.SmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108A0);
  }
  return result;
}

unint64_t sub_23C0BC2EC()
{
  unint64_t result;

  result = qword_256B108A8;
  if (!qword_256B108A8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EADB0, &type metadata for FilterSizeClass.ExtraSmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108A8);
  }
  return result;
}

uint64_t FilterSizeClass.init(from:)(_QWORD *a1)
{
  return sub_23C0BC678(a1);
}

uint64_t sub_23C0BC344@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_23C0BC678(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_23C0BC36C(_QWORD *a1)
{
  unsigned __int8 *v1;

  FilterSizeClass.encode(to:)(a1, *v1);
}

BOOL static FilterSizeClass.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

uint64_t FilterSizeClass.hash(into:)()
{
  return sub_23C0E4AA4();
}

uint64_t FilterSizeClass.hashValue.getter()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0BC3FC(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x616D536172747865 && a2 == 0xEA00000000006C6CLL || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6C616D73 && a2 == 0xE500000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72616C75676572 && a2 == 0xE700000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D756964656DLL && a2 == 0xE600000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656772616CLL && a2 == 0xE500000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x72614C6172747865 && a2 == 0xEA00000000006567)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v5 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_23C0BC678(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v42;
  char *v43;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10930);
  v27 = *(_QWORD *)(v2 - 8);
  v28 = v2;
  MEMORY[0x24BDAC7A8](v2);
  v41 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10938);
  v34 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10940);
  v31 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v39 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10948);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10950);
  v29 = *(_QWORD *)(v8 - 8);
  v30 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v37 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10958);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10960);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v42 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_23C0BC154();
  v19 = v43;
  sub_23C0E4AD4();
  if (!v19)
  {
    v43 = v13;
    v25[1] = v11;
    v25[2] = v10;
    v26 = v15;
    v20 = sub_23C0E49CC();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X9 }
    v21 = sub_23C0E4900();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6E8);
    *v23 = &type metadata for FilterSizeClass;
    sub_23C0E4960();
    sub_23C0E48F4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v14);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  return v14;
}

void sub_23C0BCB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 65) = 5;
  sub_23C0BC198();
  sub_23C0E4954();
  if (v0)
  {
    swift_bridgeObjectRelease();
    JUMPOUT(0x23C0BCB34);
  }
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 224) + 8))(v1, *(_QWORD *)(v2 - 216));
  swift_bridgeObjectRelease();
  JUMPOUT(0x23C0BCBDCLL);
}

unint64_t sub_23C0BCC1C()
{
  unint64_t result;

  result = qword_256B108B0;
  if (!qword_256B108B0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSizeClass, &type metadata for FilterSizeClass);
    atomic_store(result, (unint64_t *)&qword_256B108B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterSizeClass()
{
  return &type metadata for FilterSizeClass;
}

uint64_t _s16FitnessFiltering15FilterSizeClassOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23C0BCCC4 + 4 * byte_23C0EA957[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23C0BCCF8 + 4 * byte_23C0EA952[v4]))();
}

uint64_t sub_23C0BCCF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0BCD00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0BCD08);
  return result;
}

uint64_t sub_23C0BCD14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0BCD1CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23C0BCD20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0BCD28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterSizeClass.CodingKeys()
{
  return &type metadata for FilterSizeClass.CodingKeys;
}

ValueMetadata *type metadata accessor for FilterSizeClass.ExtraSmallCodingKeys()
{
  return &type metadata for FilterSizeClass.ExtraSmallCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSizeClass.SmallCodingKeys()
{
  return &type metadata for FilterSizeClass.SmallCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSizeClass.RegularCodingKeys()
{
  return &type metadata for FilterSizeClass.RegularCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSizeClass.MediumCodingKeys()
{
  return &type metadata for FilterSizeClass.MediumCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSizeClass.LargeCodingKeys()
{
  return &type metadata for FilterSizeClass.LargeCodingKeys;
}

ValueMetadata *type metadata accessor for FilterSizeClass.ExtraLargeCodingKeys()
{
  return &type metadata for FilterSizeClass.ExtraLargeCodingKeys;
}

unint64_t sub_23C0BCDA8()
{
  unint64_t result;

  result = qword_256B108B8;
  if (!qword_256B108B8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAD88, &type metadata for FilterSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108B8);
  }
  return result;
}

unint64_t sub_23C0BCDF0()
{
  unint64_t result;

  result = qword_256B108C0;
  if (!qword_256B108C0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EACA8, &type metadata for FilterSizeClass.ExtraSmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108C0);
  }
  return result;
}

unint64_t sub_23C0BCE38()
{
  unint64_t result;

  result = qword_256B108C8;
  if (!qword_256B108C8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EACD0, &type metadata for FilterSizeClass.ExtraSmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108C8);
  }
  return result;
}

unint64_t sub_23C0BCE80()
{
  unint64_t result;

  result = qword_256B108D0;
  if (!qword_256B108D0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAC58, &type metadata for FilterSizeClass.SmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108D0);
  }
  return result;
}

unint64_t sub_23C0BCEC8()
{
  unint64_t result;

  result = qword_256B108D8;
  if (!qword_256B108D8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAC80, &type metadata for FilterSizeClass.SmallCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108D8);
  }
  return result;
}

unint64_t sub_23C0BCF10()
{
  unint64_t result;

  result = qword_256B108E0;
  if (!qword_256B108E0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAC08, &type metadata for FilterSizeClass.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108E0);
  }
  return result;
}

unint64_t sub_23C0BCF58()
{
  unint64_t result;

  result = qword_256B108E8;
  if (!qword_256B108E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAC30, &type metadata for FilterSizeClass.RegularCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108E8);
  }
  return result;
}

unint64_t sub_23C0BCFA0()
{
  unint64_t result;

  result = qword_256B108F0;
  if (!qword_256B108F0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EABB8, &type metadata for FilterSizeClass.MediumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108F0);
  }
  return result;
}

unint64_t sub_23C0BCFE8()
{
  unint64_t result;

  result = qword_256B108F8;
  if (!qword_256B108F8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EABE0, &type metadata for FilterSizeClass.MediumCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B108F8);
  }
  return result;
}

unint64_t sub_23C0BD030()
{
  unint64_t result;

  result = qword_256B10900;
  if (!qword_256B10900)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAB68, &type metadata for FilterSizeClass.LargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10900);
  }
  return result;
}

unint64_t sub_23C0BD078()
{
  unint64_t result;

  result = qword_256B10908;
  if (!qword_256B10908)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAB90, &type metadata for FilterSizeClass.LargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10908);
  }
  return result;
}

unint64_t sub_23C0BD0C0()
{
  unint64_t result;

  result = qword_256B10910;
  if (!qword_256B10910)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAB18, &type metadata for FilterSizeClass.ExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10910);
  }
  return result;
}

unint64_t sub_23C0BD108()
{
  unint64_t result;

  result = qword_256B10918;
  if (!qword_256B10918)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAB40, &type metadata for FilterSizeClass.ExtraLargeCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10918);
  }
  return result;
}

unint64_t sub_23C0BD150()
{
  unint64_t result;

  result = qword_256B10920;
  if (!qword_256B10920)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EACF8, &type metadata for FilterSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10920);
  }
  return result;
}

unint64_t sub_23C0BD198()
{
  unint64_t result;

  result = qword_256B10928;
  if (!qword_256B10928)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EAD20, &type metadata for FilterSizeClass.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10928);
  }
  return result;
}

uint64_t Modality.activityTypes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Modality.artworks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Modality.iconName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Modality.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Modality.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Modality.supportedFilterKinds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Modality.init(activityTypes:artworks:iconName:identifier:name:supportedFilterKinds:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t sub_23C0BD294()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0BD2D0 + 4 * byte_23C0EAFE0[*v0]))(0x7974697669746361, 0xED00007365707954);
}

uint64_t sub_23C0BD2D0()
{
  return 0x736B726F77747261;
}

uint64_t sub_23C0BD2E8()
{
  return 0x656D614E6E6F6369;
}

uint64_t sub_23C0BD300()
{
  return 0x696669746E656469;
}

uint64_t sub_23C0BD31C()
{
  return 1701667182;
}

unint64_t sub_23C0BD32C()
{
  return 0xD000000000000014;
}

uint64_t sub_23C0BD348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0BE640(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0BD36C()
{
  sub_23C0BD678();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0BD394()
{
  sub_23C0BD678();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0BD3BC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = *(_QWORD *)(v1 + 32);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t Modality.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10968);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v21 = v1[2];
  v22 = v8;
  v10 = v1[3];
  v19 = v1[4];
  v20 = v10;
  v11 = v1[5];
  v12 = v1[6];
  v17 = v1[7];
  v18 = v11;
  v15 = v1[8];
  v16 = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0BD678();
  sub_23C0E4AE0();
  v24 = v9;
  v23 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10978);
  sub_23C0BDC6C(&qword_256B10980, MEMORY[0x24BEE1E90], MEMORY[0x24BEE12A0]);
  sub_23C0E4A44();
  if (!v2)
  {
    v24 = v22;
    v23 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
    sub_23C0B31BC(&qword_256B0EF50, &qword_256B0EF58, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
    LOBYTE(v24) = 2;
    sub_23C0E49F0();
    LOBYTE(v24) = 3;
    sub_23C0E4A08();
    LOBYTE(v24) = 4;
    sub_23C0E4A08();
    v24 = v15;
    v23 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B10988);
    sub_23C0BD6BC(&qword_256B10990, (uint64_t (*)(void))sub_23C0BD724, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23C0BD678()
{
  unint64_t result;

  result = qword_256B10970;
  if (!qword_256B10970)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB220, &type metadata for Modality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10970);
  }
  return result;
}

uint64_t sub_23C0BD6BC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10988);
    v8 = a2();
    result = MEMORY[0x242616E9C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23C0BD724()
{
  unint64_t result;

  result = qword_256B10998;
  if (!qword_256B10998)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterKind, &type metadata for FilterKind);
    atomic_store(result, (unint64_t *)&qword_256B10998);
  }
  return result;
}

uint64_t Modality.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B109A0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0BD678();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10978);
  v30 = 0;
  sub_23C0BDC6C(&qword_256B109A8, MEMORY[0x24BEE1EB8], MEMORY[0x24BEE12D0]);
  sub_23C0E49C0();
  v9 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  v30 = 1;
  sub_23C0B31BC(&qword_256B0EF68, &qword_256B0EF70, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1720]);
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v10 = v31;
  LOBYTE(v31) = 2;
  swift_bridgeObjectRetain();
  v11 = sub_23C0E496C();
  v29 = v12;
  v25 = v11;
  v28 = v10;
  LOBYTE(v31) = 3;
  swift_bridgeObjectRetain();
  v27 = 0;
  v24 = sub_23C0E4984();
  LOBYTE(v31) = 4;
  v14 = v13;
  swift_bridgeObjectRetain();
  v15 = sub_23C0E4984();
  v26 = v14;
  v23 = v15;
  v18 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10988);
  v30 = 5;
  sub_23C0BD6BC(&qword_256B109B0, (uint64_t (*)(void))sub_23C0BDCCC, MEMORY[0x24BEE1720]);
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v31;
  swift_bridgeObjectRetain();
  v20 = v28;
  swift_bridgeObjectRetain();
  v21 = v29;
  swift_bridgeObjectRetain();
  v22 = v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v20;
  a2[2] = v25;
  a2[3] = v21;
  a2[4] = v24;
  a2[5] = v22;
  a2[6] = v23;
  a2[7] = v18;
  a2[8] = v19;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0BDC6C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10978);
    v8 = a2;
    result = MEMORY[0x242616E9C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23C0BDCCC()
{
  unint64_t result;

  result = qword_256B109B8;
  if (!qword_256B109B8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterKind, &type metadata for FilterKind);
    atomic_store(result, (unint64_t *)&qword_256B109B8);
  }
  return result;
}

uint64_t sub_23C0BDD10@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Modality.init(from:)(a1, a2);
}

uint64_t sub_23C0BDD24(_QWORD *a1)
{
  return Modality.encode(to:)(a1);
}

uint64_t sub_23C0BDD3C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48) && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56))
    return 0;
  else
    return sub_23C0E4A74();
}

uint64_t sub_23C0BDD6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  if (v4 == v2 && v5 == v3)
    v7 = 1;
  else
    v7 = sub_23C0E4A74() ^ 1;
  return v7 & 1;
}

uint64_t sub_23C0BDDA8(uint64_t a1, uint64_t a2)
{
  char v3;

  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48) && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56))
    v3 = 1;
  else
    v3 = sub_23C0E4A74() ^ 1;
  return v3 & 1;
}

uint64_t sub_23C0BDDF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  if (v4 == v2 && v5 == v3)
    return 0;
  else
    return sub_23C0E4A74();
}

uint64_t Modality.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = *v2;
  v5 = v2[1];
  v6 = v2[3];
  v7 = v2[8];
  sub_23C0E4AA4();
  v8 = *(_QWORD *)(v4 + 16);
  if (v8)
  {
    v9 = v4 + 32;
    do
    {
      v9 += 8;
      sub_23C0E4AA4();
      --v8;
    }
    while (v8);
  }
  swift_bridgeObjectRetain();
  sub_23C065C58(a1, v5);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v6)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C066288((uint64_t)a1, v7);
  return swift_bridgeObjectRelease();
}

uint64_t Modality.hashValue.getter()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  _QWORD v5[16];
  __int128 v6;

  v2 = *(_OWORD *)(v0 + 16);
  v1 = *(_OWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  *(_OWORD *)&v5[9] = *(_OWORD *)v0;
  *(_OWORD *)&v5[11] = v2;
  *(_OWORD *)&v5[13] = v1;
  v5[15] = v3;
  v6 = *(_OWORD *)(v0 + 56);
  sub_23C0E4A98();
  Modality.hash(into:)((__int128 *)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0BDFA8()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  _QWORD v5[16];
  __int128 v6;

  v2 = *(_OWORD *)(v0 + 16);
  v1 = *(_OWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  *(_OWORD *)&v5[9] = *(_OWORD *)v0;
  *(_OWORD *)&v5[11] = v2;
  *(_OWORD *)&v5[13] = v1;
  v5[15] = v3;
  v6 = *(_OWORD *)(v0 + 56);
  sub_23C0E4A98();
  Modality.hash(into:)((__int128 *)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0BE00C()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  _QWORD v5[16];
  __int128 v6;

  v2 = *(_OWORD *)(v0 + 16);
  v1 = *(_OWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 48);
  *(_OWORD *)&v5[9] = *(_OWORD *)v0;
  *(_OWORD *)&v5[11] = v2;
  *(_OWORD *)&v5[13] = v1;
  v5[15] = v3;
  v6 = *(_OWORD *)(v0 + 56);
  sub_23C0E4A98();
  Modality.hash(into:)((__int128 *)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0BE068()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C0BE070()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_23C0BE09C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _s16FitnessFiltering8ModalityV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v16 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  v18 = *(_QWORD *)(a1 + 48);
  v15 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  if (!sub_23C0BE8E0(*(_QWORD **)a1, *(_QWORD **)a2) || (sub_23C072E20(v2, v7) & 1) == 0)
    return 0;
  if (v3)
  {
    if (!v9 || (v4 != v8 || v3 != v9) && (sub_23C0E4A74() & 1) == 0)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
  if ((v5 == v10 && v6 == v11 || (sub_23C0E4A74() & 1) != 0)
    && (v18 == v17 && v16 == v15 || (sub_23C0E4A74() & 1) != 0))
  {
    return sub_23C073B08(v14, v13);
  }
  return 0;
}

unint64_t sub_23C0BE22C()
{
  unint64_t result;

  result = qword_256B109C0;
  if (!qword_256B109C0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Modality, &type metadata for Modality);
    atomic_store(result, (unint64_t *)&qword_256B109C0);
  }
  return result;
}

uint64_t destroy for Modality()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for Modality(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for Modality(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Modality(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Modality()
{
  return &type metadata for Modality;
}

uint64_t storeEnumTagSinglePayload for Modality.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23C0BE4E8 + 4 * byte_23C0EAFEB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23C0BE51C + 4 * byte_23C0EAFE6[v4]))();
}

uint64_t sub_23C0BE51C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0BE524(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0BE52CLL);
  return result;
}

uint64_t sub_23C0BE538(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0BE540);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23C0BE544(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0BE54C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Modality.CodingKeys()
{
  return &type metadata for Modality.CodingKeys;
}

unint64_t sub_23C0BE56C()
{
  unint64_t result;

  result = qword_256B109C8;
  if (!qword_256B109C8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB1F8, &type metadata for Modality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B109C8);
  }
  return result;
}

unint64_t sub_23C0BE5B4()
{
  unint64_t result;

  result = qword_256B109D0;
  if (!qword_256B109D0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB168, &type metadata for Modality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B109D0);
  }
  return result;
}

unint64_t sub_23C0BE5FC()
{
  unint64_t result;

  result = qword_256B109D8;
  if (!qword_256B109D8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB190, &type metadata for Modality.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B109D8);
  }
  return result;
}

uint64_t sub_23C0BE640(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7974697669746361 && a2 == 0xED00007365707954;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736B726F77747261 && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D614E6E6F6369 && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023C0EE300)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

BOOL sub_23C0BE8E0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_23C0BE950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  double v9;
  double v10;
  double v11;
  int v12;
  double v13;
  double v14;
  double v15;
  int v16;
  char v18;
  uint64_t result;
  BOOL v20;
  BOOL v21;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v5 = 0;
    do
    {
      v10 = *(double *)(a1 + v5 + 48);
      v9 = *(double *)(a1 + v5 + 56);
      v11 = *(double *)(a1 + v5 + 64);
      v12 = *(unsigned __int8 *)(a1 + v5 + 72);
      v14 = *(double *)(a2 + v5 + 48);
      v13 = *(double *)(a2 + v5 + 56);
      v15 = *(double *)(a2 + v5 + 64);
      v16 = *(unsigned __int8 *)(a2 + v5 + 72);
      if (*(_QWORD *)(a1 + v5 + 32) == *(_QWORD *)(a2 + v5 + 32)
        && *(_QWORD *)(a1 + v5 + 40) == *(_QWORD *)(a2 + v5 + 40))
      {
        if (v10 != v14 || v9 != v13 || v11 != v15 || v12 != v16)
          return 0;
      }
      else
      {
        v18 = sub_23C0E4A74();
        result = 0;
        if ((v18 & 1) == 0)
          return result;
        v20 = v10 == v14 && v9 == v13;
        v21 = v20 && v11 == v15;
        if (!v21 || v12 != v16)
          return result;
      }
      v5 += 48;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_23C0BEA48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t result;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t i;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = 0;
    v28 = a2 + 32;
    v29 = a1 + 32;
    while (1)
    {
      v4 = v29 + 80 * v3;
      v5 = v28 + 80 * v3;
      v41 = *(_QWORD **)v4;
      v42 = *(_QWORD **)v5;
      v6 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (v6 != *(_QWORD *)(*(_QWORD *)v5 + 16))
        break;
      v7 = *(_QWORD *)(v4 + 16);
      v35 = *(_QWORD *)(v4 + 8);
      v8 = *(_QWORD *)(v4 + 32);
      v40 = *(_QWORD *)(v4 + 24);
      v9 = *(_QWORD *)(v4 + 48);
      v38 = *(_QWORD *)(v4 + 40);
      v10 = *(_QWORD *)(v4 + 56);
      v34 = *(_QWORD *)(v4 + 64);
      v11 = *(unsigned __int8 *)(v4 + 72);
      v12 = *(_QWORD *)(v5 + 16);
      v13 = *(_QWORD *)(v5 + 24);
      v14 = *(_QWORD *)(v5 + 32);
      v15 = *(_QWORD *)(v5 + 48);
      v39 = *(_QWORD *)(v5 + 40);
      v16 = *(_QWORD *)(v5 + 56);
      v36 = *(_QWORD *)(v5 + 64);
      v37 = *(_QWORD *)(v5 + 8);
      if (v6)
        v17 = v41 == v42;
      else
        v17 = 1;
      v18 = *(unsigned __int8 *)(v5 + 72);
      if (!v17)
      {
        if (v41[4] != v42[4])
          return 0;
        if (v6 != 1)
        {
          if (v41[5] != v42[5])
            return 0;
          v22 = v41 + 6;
          v23 = v42 + 6;
          for (i = v6 - 2; i; --i)
          {
            v26 = *v22++;
            v25 = v26;
            v27 = *v23++;
            if (v25 != v27)
              return 0;
          }
        }
      }
      v32 = v15;
      v33 = v9;
      v30 = v18;
      v31 = v11;
      v19 = v13;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((sub_23C072E20(v35, v37) & 1) == 0)
        goto LABEL_36;
      if (v40)
      {
        if (!v19 || (v7 != v12 || v40 != v19) && (sub_23C0E4A74() & 1) == 0)
          goto LABEL_36;
      }
      else if (v19)
      {
        goto LABEL_36;
      }
      if ((v8 != v14 || v38 != v39) && (sub_23C0E4A74() & 1) == 0
        || (v33 != v32 || v10 != v16) && (sub_23C0E4A74() & 1) == 0)
      {
LABEL_36:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_37:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
      v20 = sub_23C073B08(v34, v36);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
        goto LABEL_37;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v31 != v30)
        return 0;
      ++v3;
      result = 1;
      if (v3 == v2)
        return result;
    }
  }
  return 0;
}

BOOL sub_23C0BEE00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL8 result;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = 0;
    v4 = v2 - 1;
    while (1)
    {
      v21 = v4;
      v5 = *(_QWORD *)(a1 + v3 + 40);
      v25 = *(_QWORD *)(a1 + v3 + 32);
      v6 = *(_QWORD *)(a1 + v3 + 48);
      v7 = *(_QWORD *)(a1 + v3 + 64);
      v23 = *(_QWORD *)(a1 + v3 + 72);
      v24 = *(_QWORD *)(a1 + v3 + 56);
      v8 = *(_QWORD *)(a1 + v3 + 80);
      v18 = v3;
      v10 = *(_QWORD *)(a2 + v3 + 32);
      v9 = *(_QWORD *)(a2 + v3 + 40);
      v11 = *(_QWORD *)(a2 + v3 + 56);
      v12 = *(_QWORD *)(a2 + v3 + 64);
      v22 = *(_QWORD *)(a2 + v3 + 72);
      v13 = *(_QWORD *)(a2 + v3 + 80);
      v19 = *(unsigned __int8 *)(a2 + v3 + 88);
      v20 = *(unsigned __int8 *)(a1 + v3 + 88);
      v14 = *(_QWORD *)(a2 + v3 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((sub_23C072E20(v25, v10) & 1) == 0)
        break;
      if (v6)
      {
        if (!v14 || (v5 != v9 || v6 != v14) && (sub_23C0E4A74() & 1) == 0)
          break;
      }
      else if (v14)
      {
        break;
      }
      if ((v24 != v11 || v7 != v12) && (sub_23C0E4A74() & 1) == 0
        || (v23 != v22 || v8 != v13) && (sub_23C0E4A74() & 1) == 0)
      {
        break;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v4 = v21 - 1;
      result = v20 == v19;
      if (v20 == v19)
      {
        v3 = v18 + 64;
        if (v21)
          continue;
      }
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0;
}

BOOL sub_23C0BF098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2)
      return 1;
    v3 = a1;
    if (a1 == a2)
      return 1;
    v4 = 0;
    v5 = v2 - 1;
    v19 = a2;
    while (1)
    {
      v25 = v5;
      v7 = *(_QWORD *)(v3 + v4 + 32);
      v6 = *(_QWORD *)(v3 + v4 + 40);
      v8 = *(_QWORD *)(v3 + v4 + 48);
      v28 = *(_QWORD *)(v3 + v4 + 56);
      v9 = *(_QWORD *)(v3 + v4 + 64);
      v21 = *(_QWORD *)(v3 + v4 + 72);
      v31 = *(_QWORD *)(v3 + v4 + 80);
      v10 = *(_QWORD *)(v3 + v4 + 96);
      v27 = *(_QWORD *)(v3 + v4 + 88);
      v24 = *(unsigned __int8 *)(v3 + v4 + 104);
      v22 = v4;
      v11 = *(_QWORD *)(a2 + v4 + 32);
      v12 = *(_QWORD *)(a2 + v4 + 40);
      v13 = *(_QWORD *)(a2 + v4 + 48);
      v14 = *(_QWORD *)(a2 + v4 + 56);
      v30 = *(_QWORD *)(a2 + v4 + 64);
      v20 = *(_QWORD *)(a2 + v4 + 72);
      v15 = *(_QWORD *)(a2 + v4 + 96);
      v26 = *(_QWORD *)(a2 + v4 + 88);
      v23 = *(unsigned __int8 *)(a2 + v4 + 104);
      v29 = *(_QWORD *)(a2 + v4 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((sub_23C072E20(v7, v11) & 1) == 0)
        break;
      if (v8)
      {
        if (!v13 || (v6 != v12 || v8 != v13) && (sub_23C0E4A74() & 1) == 0)
          break;
      }
      else if (v13)
      {
        break;
      }
      if ((v28 != v14 || v9 != v30) && (sub_23C0E4A74() & 1) == 0)
        break;
      if (v31)
      {
        v16 = v15;
        if (!v29 || (v21 != v20 || v31 != v29) && (sub_23C0E4A74() & 1) == 0)
          break;
      }
      else
      {
        v16 = v15;
        if (v29)
          break;
      }
      if ((v27 != v26 || v10 != v16) && (sub_23C0E4A74() & 1) == 0)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v25 - 1;
      result = v24 == v23;
      if (v24 == v23)
      {
        v4 = v22 + 80;
        v3 = a1;
        a2 = v19;
        if (v25)
          continue;
      }
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_23C0BF3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = 0;
  v4 = a1 + 32;
  v5 = a2 + 32;
  v35 = a1 + 32;
  v36 = *(_QWORD *)(a1 + 16);
  v34 = a2 + 32;
  while (1)
  {
    v37 = v3;
    v6 = 72 * v3;
    v7 = (uint64_t *)(v4 + 72 * v3);
    v38 = *v7;
    v8 = v7[2];
    v44 = v7[1];
    v9 = v7[4];
    v54 = v7[3];
    v10 = v7[6];
    v52 = v7[5];
    v11 = v7[8];
    v12 = (uint64_t *)(v5 + v6);
    v14 = *v12;
    v13 = v12[1];
    v53 = v12[3];
    v15 = v12[4];
    v48 = v7[7];
    v50 = v12[5];
    v16 = v12[6];
    v46 = v12[7];
    v17 = v12[8];
    v42 = v12[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_23C072E20(v38, v14) & 1) == 0)
      goto LABEL_49;
    if (v8)
    {
      if (!v42 || (v44 != v13 || v8 != v42) && (sub_23C0E4A74() & 1) == 0)
        goto LABEL_49;
    }
    else if (v42)
    {
      goto LABEL_49;
    }
    if ((v54 != v53 || v9 != v15) && (sub_23C0E4A74() & 1) == 0
      || ((result = v52, v52 != v50) || v10 != v16) && (result = sub_23C0E4A74(), (result & 1) == 0)
      || v48 != v46
      || (v19 = *(_QWORD *)(v11 + 16), v19 != *(_QWORD *)(v17 + 16)))
    {
LABEL_49:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_50:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_51:
      swift_bridgeObjectRelease();
      return 0;
    }
    if (v19 && v11 != v17)
      break;
LABEL_41:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v3 = v37 + 1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 1;
    v4 = v35;
    v5 = v34;
    if (v37 + 1 == v36)
      return result;
  }
  v20 = 0;
  v21 = 0;
  v40 = v11;
  v41 = v17;
  v39 = *(_QWORD *)(v11 + 16);
  while (v21 < *(_QWORD *)(v17 + 16))
  {
    v43 = v21;
    v23 = *(_QWORD *)(v11 + v20 + 32);
    v24 = *(_QWORD *)(v11 + v20 + 40);
    v25 = *(_QWORD *)(v11 + v20 + 48);
    v26 = *(_QWORD *)(v11 + v20 + 64);
    v49 = *(_QWORD *)(v11 + v20 + 72);
    v51 = *(_QWORD *)(v11 + v20 + 56);
    v27 = *(_QWORD *)(v11 + v20 + 80);
    v28 = (_QWORD *)(v17 + v20);
    v30 = *(_QWORD *)(v17 + v20 + 32);
    v29 = *(_QWORD *)(v17 + v20 + 40);
    v31 = v28[7];
    v32 = v28[8];
    v45 = v20;
    v47 = v28[9];
    v33 = v28[10];
    v55 = v28[6];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((sub_23C072E20(v23, v30) & 1) == 0)
      goto LABEL_48;
    if (v25)
    {
      if (!v55 || (v24 != v29 || v25 != v55) && (sub_23C0E4A74() & 1) == 0)
      {
LABEL_44:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
    }
    else if (v55)
    {
      goto LABEL_44;
    }
    if ((v51 != v31 || v26 != v32) && (sub_23C0E4A74() & 1) == 0)
    {
LABEL_48:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    if (v49 == v47 && v27 == v33)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
    }
    else
    {
      v22 = sub_23C0E4A74();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      if ((v22 & 1) == 0)
        goto LABEL_49;
    }
    v21 = v43 + 1;
    v20 = v45 + 56;
    v11 = v40;
    v17 = v41;
    if (v39 == v43 + 1)
      goto LABEL_41;
  }
  __break(1u);
  return result;
}

uint64_t sub_23C0BFB3C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_23C0E4A74(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_23C0E4A74() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_23C0BFC00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = (uint64_t *)(a1 + 40);
    for (i = (uint64_t *)(a2 + 80); ; i += 7)
    {
      v6 = *(v3 - 1);
      v15 = *v3;
      v16 = v2;
      v7 = v3[3];
      v8 = v3[5];
      v18 = v3[4];
      v19 = v3[2];
      v10 = *(i - 6);
      v9 = *(i - 5);
      v11 = *(i - 3);
      v12 = *(i - 2);
      v17 = *(i - 1);
      v13 = *i;
      v20 = v3[1];
      v21 = *(i - 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((sub_23C072E20(v6, v10) & 1) == 0)
        break;
      if (v20)
      {
        if (!v21 || (v15 != v9 || v20 != v21) && (sub_23C0E4A74() & 1) == 0)
          break;
      }
      else if (v21)
      {
        break;
      }
      if ((v19 != v11 || v7 != v12) && (sub_23C0E4A74() & 1) == 0)
        break;
      if (v18 == v17 && v8 == v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        v5 = sub_23C0E4A74();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
          return 0;
      }
      v3 += 7;
      v2 = v16 - 1;
      if (v16 == 1)
        return 1;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_23C0BFEF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 56);
    for (i = (uint64_t *)(a1 + 56); ; i += 4)
    {
      v5 = *(i - 1);
      v6 = *i;
      v7 = *(v3 - 1);
      v8 = *v3;
      v9 = *(i - 3) == *(v3 - 3) && *(i - 2) == *(v3 - 2);
      if (!v9 && (sub_23C0E4A74() & 1) == 0)
        break;
      v10 = v5 == v7 && v6 == v8;
      if (!v10 && (sub_23C0E4A74() & 1) == 0)
        break;
      v3 += 4;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_23C0BFFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31[5];
  unsigned __int8 v32;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a2 + 48;
    for (i = a1 + 48; ; i += 64)
    {
      v6 = *(_QWORD *)(i - 8);
      v7 = *(_QWORD *)i;
      v8 = *(_QWORD *)(i + 8);
      v9 = *(_QWORD *)(i + 16);
      v10 = *(_BYTE *)(i + 24);
      v11 = *(_QWORD *)(i + 40);
      v21 = v2;
      v22 = *(_QWORD *)(i + 32);
      v13 = *(_QWORD *)(v3 - 16);
      v12 = *(_QWORD *)(v3 - 8);
      v15 = *(_QWORD *)v3;
      v14 = *(_QWORD *)(v3 + 8);
      v16 = *(_QWORD *)(v3 + 16);
      v17 = *(_BYTE *)(v3 + 24);
      v18 = *(_QWORD *)(v3 + 32);
      v30 = *(_QWORD *)(v3 + 40);
      v31[0] = *(_QWORD *)(i - 16);
      v31[1] = v6;
      v31[2] = v7;
      v31[3] = v8;
      v31[4] = v9;
      v32 = v10;
      v24 = v31[0];
      v25 = v6;
      v26 = v7;
      v27 = v8;
      v28 = v9;
      v29 = v10;
      sub_23C0682C0(v31[0], v6, v7, v8, v9, v10);
      swift_bridgeObjectRetain();
      v23 = v14;
      sub_23C0682C0(v13, v12, v15, v14, v16, v17);
      swift_bridgeObjectRetain();
      _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v31);
      if ((v19 & 1) == 0)
        break;
      if (v22 == v18 && v11 == v30)
      {
        sub_23C0682A8(v13, v12, v15, v14, v16, v17);
        swift_bridgeObjectRelease();
        sub_23C0682A8(v24, v25, v26, v27, v28, v29);
        swift_bridgeObjectRelease();
      }
      else
      {
        v5 = sub_23C0E4A74();
        sub_23C0682A8(v13, v12, v15, v23, v16, v17);
        swift_bridgeObjectRelease();
        sub_23C0682A8(v24, v25, v26, v27, v28, v29);
        swift_bridgeObjectRelease();
        if ((v5 & 1) == 0)
          return 0;
      }
      v3 += 64;
      v2 = v21 - 1;
      if (v21 == 1)
        return 1;
    }
    sub_23C0682A8(v13, v12, v15, v14, v16, v17);
    swift_bridgeObjectRelease();
    sub_23C0682A8(v24, v25, v26, v27, v28, v29);
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_23C0C01CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_23C0C0498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  char v38;
  char *v39;
  char v40;
  char v41;
  char v42;
  BOOL v44;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  char v55;
  __int128 v56;
  char v57;

  v4 = sub_23C0E3EB0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10A40);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for FilterSectionDescriptor();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (uint64_t *)((char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = MEMORY[0x24BDAC7A8](v15);
  v21 = (uint64_t *)((char *)&v46 - v20);
  v22 = *(_QWORD *)(a1 + 16);
  if (v22 != *(_QWORD *)(a2 + 16))
  {
LABEL_25:
    v42 = 0;
    return v42 & 1;
  }
  v53 = v18;
  if (v22 && a1 != a2)
  {
    v47 = v7;
    v48 = v10;
    v51 = a2;
    v52 = v5;
    v23 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    v49 = *(_QWORD *)(v19 + 72);
    v50 = a1;
    v24 = v22 - 1;
    v46 = v11;
    while (1)
    {
      sub_23C09E828(a1 + v23, (uint64_t)v21);
      sub_23C09E828(a2 + v23, (uint64_t)v17);
      v25 = *v21 == *v17 && v21[1] == v17[1];
      v26 = v53;
      if (!v25 && (sub_23C0E4A74() & 1) == 0)
        break;
      v27 = *(int *)(v26 + 20);
      v28 = (uint64_t)v17 + v27;
      v29 = (uint64_t)&v13[*(int *)(v11 + 48)];
      sub_23C09E86C((uint64_t)v21 + v27, (uint64_t)v13);
      sub_23C09E86C(v28, v29);
      v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
      if (v30((uint64_t)v13, 1, v4) == 1)
      {
        if (v30(v29, 1, v4) != 1)
          goto LABEL_23;
        sub_23C06E834((uint64_t)v13, &qword_256B0F048);
      }
      else
      {
        v31 = (uint64_t)v48;
        sub_23C09E86C((uint64_t)v13, (uint64_t)v48);
        if (v30(v29, 1, v4) == 1)
        {
          (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v31, v4);
LABEL_23:
          sub_23C06E834((uint64_t)v13, &qword_256B10A40);
          break;
        }
        v32 = v52;
        v33 = v47;
        (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v47, v29, v4);
        sub_23C0683A4(&qword_256B10A48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
        v34 = sub_23C0E4720();
        v35 = *(void (**)(char *, uint64_t))(v32 + 8);
        v36 = v33;
        v26 = v53;
        v35(v36, v4);
        v35((char *)v31, v4);
        sub_23C06E834((uint64_t)v13, &qword_256B0F048);
        v11 = v46;
        if ((v34 & 1) == 0)
          break;
      }
      v37 = *(int *)(v26 + 24);
      v38 = *((_BYTE *)v21 + v37 + 16);
      v56 = *(_OWORD *)((char *)v21 + v37);
      v57 = v38;
      v39 = (char *)v17 + v37;
      v40 = v39[16];
      v54 = *(_OWORD *)v39;
      v55 = v40;
      _s16FitnessFiltering20FilterSectionContentO2eeoiySbAC_ACtFZ_0((uint64_t)&v56);
      v42 = v41;
      sub_23C09E8FC((uint64_t)v17);
      sub_23C09E8FC((uint64_t)v21);
      v44 = v24-- != 0;
      a2 = v51;
      if ((v42 & 1) != 0)
      {
        a1 = v50;
        v23 += v49;
        if (v44)
          continue;
      }
      return v42 & 1;
    }
    sub_23C09E8FC((uint64_t)v17);
    sub_23C09E8FC((uint64_t)v21);
    goto LABEL_25;
  }
  v42 = 1;
  return v42 & 1;
}

uint64_t ThemeCategory.artworks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ThemeCategory.iconName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ThemeCategory.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ThemeCategory.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ThemeCategory.sortOrder.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t ThemeCategory.themes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t ThemeCategory.init(artworks:iconName:identifier:name:sortOrder:themes:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t sub_23C0C08E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0C0918 + 4 * byte_23C0EB280[*v0]))(0x736B726F77747261, 0xE800000000000000);
}

uint64_t sub_23C0C0918()
{
  return 0x656D614E6E6F6369;
}

uint64_t sub_23C0C092C()
{
  return 0x696669746E656469;
}

uint64_t sub_23C0C0948()
{
  return 1701667182;
}

uint64_t sub_23C0C0958()
{
  return 0x6564724F74726F73;
}

uint64_t sub_23C0C0974()
{
  return 0x73656D656874;
}

uint64_t sub_23C0C0988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0C19CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0C09AC()
{
  sub_23C0C0C70();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0C09D4()
{
  sub_23C0C0C70();
  return sub_23C0E4AF8();
}

uint64_t ThemeCategory.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B109E0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v21 = v1[2];
  v22 = v8;
  v10 = v1[3];
  v19 = v1[4];
  v20 = v10;
  v11 = v1[5];
  v17 = v1[6];
  v18 = v11;
  v12 = v1[7];
  v15 = v1[8];
  v16 = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0C0C70();
  sub_23C0E4AE0();
  v24 = v9;
  v23 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  sub_23C0656C0(&qword_256B0EF50, &qword_256B0EF58, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    LOBYTE(v24) = 1;
    sub_23C0E49F0();
    LOBYTE(v24) = 2;
    sub_23C0E4A08();
    LOBYTE(v24) = 3;
    sub_23C0E4A08();
    LOBYTE(v24) = 4;
    sub_23C0E4A2C();
    v24 = v15;
    v23 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B109F0);
    sub_23C0C0CB4(&qword_256B109F8, (uint64_t (*)(void))sub_23C0C0D1C, MEMORY[0x24BEE12A0]);
    sub_23C0E4A44();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23C0C0C70()
{
  unint64_t result;

  result = qword_256B109E8;
  if (!qword_256B109E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB4C4, &type metadata for ThemeCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B109E8);
  }
  return result;
}

uint64_t sub_23C0C0CB4(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B109F0);
    v8 = a2();
    result = MEMORY[0x242616E9C](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23C0C0D1C()
{
  unint64_t result;

  result = qword_256B10A00;
  if (!qword_256B10A00)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Theme, &type metadata for Theme);
    atomic_store(result, (unint64_t *)&qword_256B10A00);
  }
  return result;
}

uint64_t ThemeCategory.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10A08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0C0C70();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  v37 = 0;
  sub_23C0656C0(&qword_256B0EF68, &qword_256B0EF70, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v9 = v38;
  LOBYTE(v38) = 1;
  swift_bridgeObjectRetain();
  v10 = sub_23C0E496C();
  v12 = v11;
  v35 = v10;
  LOBYTE(v38) = 2;
  swift_bridgeObjectRetain();
  v13 = sub_23C0E4984();
  v36 = v14;
  v31 = v13;
  v34 = v12;
  LOBYTE(v38) = 3;
  swift_bridgeObjectRetain();
  v33 = 0;
  v30 = sub_23C0E4984();
  LOBYTE(v38) = 4;
  v16 = v15;
  swift_bridgeObjectRetain();
  v17 = sub_23C0E49A8();
  v32 = v16;
  v29 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B109F0);
  v37 = 5;
  sub_23C0C0CB4(&qword_256B10A10, (uint64_t (*)(void))sub_23C0C11D0, MEMORY[0x24BEE12D0]);
  sub_23C0E49C0();
  v18 = v34;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v20 = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21 = v18;
  v22 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v35;
  *a2 = v9;
  a2[1] = v23;
  v24 = v31;
  v25 = v32;
  a2[2] = v21;
  a2[3] = v24;
  v26 = v30;
  a2[4] = v22;
  a2[5] = v26;
  v27 = v29;
  a2[6] = v25;
  a2[7] = v27;
  a2[8] = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_23C0C11D0()
{
  unint64_t result;

  result = qword_256B10A18;
  if (!qword_256B10A18)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Theme, &type metadata for Theme);
    atomic_store(result, (unint64_t *)&qword_256B10A18);
  }
  return result;
}

uint64_t sub_23C0C1214@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return ThemeCategory.init(from:)(a1, a2);
}

uint64_t sub_23C0C1228(_QWORD *a1)
{
  return ThemeCategory.encode(to:)(a1);
}

uint64_t ThemeCategory.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = v1[2];
  v5 = v1[8];
  swift_bridgeObjectRetain();
  sub_23C065C58(a1, v3);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  sub_23C0E4AA4();
  swift_bridgeObjectRetain();
  sub_23C09C16C(a1, v5);
  return swift_bridgeObjectRelease();
}

uint64_t ThemeCategory.hashValue.getter()
{
  uint64_t *v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[4];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_OWORD *)(v0 + 3);
  v2 = *(_OWORD *)(v0 + 5);
  v3 = v0[7];
  v4 = v0[8];
  v7 = *v0;
  v8 = *(_OWORD *)(v0 + 1);
  v9 = v1;
  v10 = v2;
  v11 = v3;
  v12 = v4;
  sub_23C0E4A98();
  ThemeCategory.hash(into:)(v6);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0C13C4()
{
  uint64_t *v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[4];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_OWORD *)(v0 + 3);
  v2 = *(_OWORD *)(v0 + 5);
  v3 = v0[7];
  v4 = v0[8];
  v7 = *v0;
  v8 = *(_OWORD *)(v0 + 1);
  v9 = v1;
  v10 = v2;
  v11 = v3;
  v12 = v4;
  sub_23C0E4A98();
  ThemeCategory.hash(into:)(v6);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0C142C()
{
  uint64_t *v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[4];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_OWORD *)(v0 + 3);
  v2 = *(_OWORD *)(v0 + 5);
  v3 = v0[7];
  v4 = v0[8];
  v7 = *v0;
  v8 = *(_OWORD *)(v0 + 1);
  v9 = v1;
  v10 = v2;
  v11 = v3;
  v12 = v4;
  sub_23C0E4A98();
  ThemeCategory.hash(into:)(v6);
  return sub_23C0E4AC8();
}

uint64_t _s16FitnessFiltering13ThemeCategoryV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v14 = a1[8];
  v6 = a2[1];
  v7 = a2[2];
  v8 = a2[3];
  v10 = a2[4];
  v9 = a2[5];
  v11 = a2[6];
  v15 = a2[7];
  v16 = a1[7];
  v13 = a2[8];
  if ((sub_23C072E20(*a1, *a2) & 1) == 0)
    return 0;
  if (v3)
  {
    if (!v7 || (v2 != v6 || v3 != v7) && (sub_23C0E4A74() & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if ((v4 == v8 && v5 == v10 || (sub_23C0E4A74() & 1) != 0)
    && (v17 == v9 && v18 == v11 || (sub_23C0E4A74() & 1) != 0)
    && v16 == v15)
  {
    return sub_23C0BFC00(v14, v13);
  }
  return 0;
}

unint64_t sub_23C0C15E0()
{
  unint64_t result;

  result = qword_256B10A20;
  if (!qword_256B10A20)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ThemeCategory, &type metadata for ThemeCategory);
    atomic_store(result, (unint64_t *)&qword_256B10A20);
  }
  return result;
}

uint64_t destroy for ThemeCategory()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ThemeCategory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ThemeCategory(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ThemeCategory(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ThemeCategory()
{
  return &type metadata for ThemeCategory;
}

uint64_t storeEnumTagSinglePayload for ThemeCategory.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23C0C1874 + 4 * byte_23C0EB28B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23C0C18A8 + 4 * byte_23C0EB286[v4]))();
}

uint64_t sub_23C0C18A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0C18B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0C18B8);
  return result;
}

uint64_t sub_23C0C18C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0C18CCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23C0C18D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0C18D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ThemeCategory.CodingKeys()
{
  return &type metadata for ThemeCategory.CodingKeys;
}

unint64_t sub_23C0C18F8()
{
  unint64_t result;

  result = qword_256B10A28;
  if (!qword_256B10A28)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB49C, &type metadata for ThemeCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10A28);
  }
  return result;
}

unint64_t sub_23C0C1940()
{
  unint64_t result;

  result = qword_256B10A30;
  if (!qword_256B10A30)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB40C, &type metadata for ThemeCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10A30);
  }
  return result;
}

unint64_t sub_23C0C1988()
{
  unint64_t result;

  result = qword_256B10A38;
  if (!qword_256B10A38)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB434, &type metadata for ThemeCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10A38);
  }
  return result;
}

uint64_t sub_23C0C19CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736B726F77747261 && a2 == 0xE800000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E6E6F6369 && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6564724F74726F73 && a2 == 0xE900000000000072 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x73656D656874 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t ResultPlaceholder.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t ResultPlaceholder.referenceType.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

FitnessFiltering::ResultPlaceholder __swiftcall ResultPlaceholder.init(identifier:referenceType:)(Swift::String identifier, Swift::String referenceType)
{
  Swift::String *v2;
  FitnessFiltering::ResultPlaceholder result;

  *v2 = identifier;
  v2[1] = referenceType;
  result.referenceType = referenceType;
  result.identifier = identifier;
  return result;
}

uint64_t sub_23C0C1CB4()
{
  _BYTE *v0;

  if (*v0)
    return 0x636E657265666572;
  else
    return 0x696669746E656469;
}

uint64_t sub_23C0C1D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0C2758(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0C1D24()
{
  sub_23C0C1EA8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0C1D4C()
{
  sub_23C0C1EA8();
  return sub_23C0E4AF8();
}

uint64_t ResultPlaceholder.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  char v11;
  char v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10A50);
  v10 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  v9[1] = *(_QWORD *)(v1 + 24);
  v9[2] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0C1EA8();
  sub_23C0E4AE0();
  v12 = 0;
  sub_23C0E4A08();
  if (!v2)
  {
    v11 = 1;
    sub_23C0E4A08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v6, v4);
}

unint64_t sub_23C0C1EA8()
{
  unint64_t result;

  result = qword_256B10A58;
  if (!qword_256B10A58)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB708, &type metadata for ResultPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10A58);
  }
  return result;
}

uint64_t ResultPlaceholder.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10A60);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0C1EA8();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v20 = 0;
  v9 = sub_23C0E4984();
  v11 = v10;
  v19 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_23C0E4984();
  v14 = v13;
  v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16 = v12;
  v15(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v16;
  a2[3] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0C208C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return ResultPlaceholder.init(from:)(a1, a2);
}

uint64_t sub_23C0C20A0(_QWORD *a1)
{
  return ResultPlaceholder.encode(to:)(a1);
}

uint64_t ResultPlaceholder.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t ResultPlaceholder.hashValue.getter()
{
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0C21AC()
{
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0C2230()
{
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0C22A0()
{
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t _s16FitnessFiltering17ResultPlaceholderV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t result;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a2[2];
  v5 = a2[3];
  v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_23C0E4A74(), result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
      return 1;
    else
      return sub_23C0E4A74();
  }
  return result;
}

unint64_t sub_23C0C23B8()
{
  unint64_t result;

  result = qword_256B10A68;
  if (!qword_256B10A68)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for ResultPlaceholder, &type metadata for ResultPlaceholder);
    atomic_store(result, (unint64_t *)&qword_256B10A68);
  }
  return result;
}

uint64_t destroy for ResultPlaceholder()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ResultPlaceholder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ResultPlaceholder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

_QWORD *assignWithTake for ResultPlaceholder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResultPlaceholder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResultPlaceholder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ResultPlaceholder()
{
  return &type metadata for ResultPlaceholder;
}

uint64_t storeEnumTagSinglePayload for ResultPlaceholder.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C0C2600 + 4 * byte_23C0EB525[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C0C2634 + 4 * byte_23C0EB520[v4]))();
}

uint64_t sub_23C0C2634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0C263C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0C2644);
  return result;
}

uint64_t sub_23C0C2650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0C2658);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C0C265C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0C2664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResultPlaceholder.CodingKeys()
{
  return &type metadata for ResultPlaceholder.CodingKeys;
}

unint64_t sub_23C0C2684()
{
  unint64_t result;

  result = qword_256B10A70;
  if (!qword_256B10A70)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB6E0, &type metadata for ResultPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10A70);
  }
  return result;
}

unint64_t sub_23C0C26CC()
{
  unint64_t result;

  result = qword_256B10A78;
  if (!qword_256B10A78)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB650, &type metadata for ResultPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10A78);
  }
  return result;
}

unint64_t sub_23C0C2714()
{
  unint64_t result;

  result = qword_256B10A80;
  if (!qword_256B10A80)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EB678, &type metadata for ResultPlaceholder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10A80);
  }
  return result;
}

uint64_t sub_23C0C2758(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657265666572 && a2 == 0xED00006570795465)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t EditorialTrait.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0C28BC + 4 * byte_23C0EB760[a1]))(0x7053747369747261, 0xEF746867696C746FLL);
}

uint64_t sub_23C0C28BC()
{
  return 0x6565776F6C6C6168;
}

uint64_t sub_23C0C28D8()
{
  return 0x796164696C6F68;
}

uint64_t sub_23C0C28F0()
{
  return 0x77654E72616E756CLL;
}

uint64_t sub_23C0C2910()
{
  return 0x7261655977656ELL;
}

uint64_t sub_23C0C2928()
{
  return 0x6564697270;
}

uint64_t sub_23C0C293C()
{
  return 0x576D6172676F7270;
}

uint64_t sub_23C0C2960()
{
  return 0x6967736B6E616874;
}

void *static EditorialTrait.allCases.getter()
{
  return &unk_250CF9548;
}

void sub_23C0C2990(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_23C0C2A00@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_23C0C2AD4 + 4 * byte_23C0EB770[a1]))(0x6565776F6C6C6168);
}

uint64_t sub_23C0C2AD4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6565776F6C6C6168 && v1 == 0xE90000000000006ELL)
    v2 = 1;
  else
    v2 = sub_23C0E4A74();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_23C0C2C0C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s16FitnessFiltering14EditorialTraitO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23C0C2C38()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_23C0C2C74 + 4 * byte_23C0EB778[*v0]))();
}

void sub_23C0C2C74(_QWORD *a1@<X8>)
{
  *a1 = 0x6565776F6C6C6168;
  a1[1] = 0xE90000000000006ELL;
}

void sub_23C0C2C94(_QWORD *a1@<X8>)
{
  *a1 = 0x796164696C6F68;
  a1[1] = 0xE700000000000000;
}

void sub_23C0C2CB0(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "lunarNewYear");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_23C0C2CD4(_QWORD *a1@<X8>)
{
  *a1 = 0x7261655977656ELL;
  a1[1] = 0xE700000000000000;
}

void sub_23C0C2CF0(_QWORD *a1@<X8>)
{
  *a1 = 0x6564697270;
  a1[1] = 0xE500000000000000;
}

void sub_23C0C2D08(char *a1@<X8>)
{
  strcpy(a1, "programWorkout");
  a1[15] = -18;
}

void sub_23C0C2D30(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "thanksgiving");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_23C0C2D54(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CF9548;
}

uint64_t sub_23C0C2D64()
{
  sub_23C0C335C();
  return sub_23C0E47F8();
}

uint64_t sub_23C0C2DC0()
{
  sub_23C0C335C();
  return sub_23C0E47EC();
}

void sub_23C0C2E0C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23C0E4A98();
  __asm { BR              X9 }
}

uint64_t sub_23C0C2E64()
{
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

void sub_23C0C2F50()
{
  __asm { BR              X10 }
}

uint64_t sub_23C0C2F98()
{
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

void sub_23C0C3070()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_23C0E4A98();
  __asm { BR              X9 }
}

uint64_t sub_23C0C30C4()
{
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t _s16FitnessFiltering14EditorialTraitO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23C0E4948();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

unint64_t sub_23C0C31FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256B10A88;
  if (!qword_256B10A88)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10A90);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256B10A88);
  }
  return result;
}

unint64_t sub_23C0C324C()
{
  unint64_t result;

  result = qword_256B10A98;
  if (!qword_256B10A98)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for EditorialTrait, &type metadata for EditorialTrait);
    atomic_store(result, (unint64_t *)&qword_256B10A98);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EditorialTrait(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23C0C32DC + 4 * byte_23C0EB79D[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23C0C3310 + 4 * byte_23C0EB798[v4]))();
}

uint64_t sub_23C0C3310(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0C3318(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0C3320);
  return result;
}

uint64_t sub_23C0C332C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0C3334);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23C0C3338(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0C3340(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EditorialTrait()
{
  return &type metadata for EditorialTrait;
}

unint64_t sub_23C0C335C()
{
  unint64_t result;

  result = qword_256B10AA0;
  if (!qword_256B10AA0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for EditorialTrait, &type metadata for EditorialTrait);
    atomic_store(result, (unint64_t *)&qword_256B10AA0);
  }
  return result;
}

uint64_t Trainer.artworks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Trainer.iconName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Trainer.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Trainer.informalName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Trainer.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Trainer.init(artworks:iconName:identifier:informalName:name:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t sub_23C0C3474()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0C34A4 + 4 * byte_23C0EB8E0[*v0]))(0x736B726F77747261, 0xE800000000000000);
}

uint64_t sub_23C0C34A4()
{
  return 0x656D614E6E6F6369;
}

uint64_t sub_23C0C34B8()
{
  return 0x696669746E656469;
}

uint64_t sub_23C0C34D4()
{
  return 0x6C616D726F666E69;
}

uint64_t sub_23C0C34F4()
{
  return 1701667182;
}

uint64_t sub_23C0C3504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0C4318(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0C3528()
{
  sub_23C0C3788();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0C3550()
{
  sub_23C0C3788();
  return sub_23C0E4AF8();
}

uint64_t Trainer.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10AA8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v14[7] = v1[2];
  v14[8] = v8;
  v10 = v1[3];
  v14[5] = v1[4];
  v14[6] = v10;
  v11 = v1[5];
  v14[3] = v1[6];
  v14[4] = v11;
  v12 = v1[8];
  v14[1] = v1[7];
  v14[2] = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0C3788();
  sub_23C0E4AE0();
  v20 = v9;
  v19 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  sub_23C0B31BC(&qword_256B0EF50, &qword_256B0EF58, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    v18 = 1;
    sub_23C0E49F0();
    v17 = 2;
    sub_23C0E4A08();
    v16 = 3;
    sub_23C0E49F0();
    v15 = 4;
    sub_23C0E4A08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23C0C3788()
{
  unint64_t result;

  result = qword_256B10AB0;
  if (!qword_256B10AB0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EBB0C, &type metadata for Trainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10AB0);
  }
  return result;
}

uint64_t Trainer.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10AB8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0C3788();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  v43 = 0;
  sub_23C0B31BC(&qword_256B0EF68, &qword_256B0EF70, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v9 = v44;
  v42 = 1;
  swift_bridgeObjectRetain();
  v10 = sub_23C0E496C();
  v38 = v11;
  v35 = v10;
  v37 = v9;
  v41 = 2;
  swift_bridgeObjectRetain();
  v34 = sub_23C0E4984();
  v40 = 3;
  v13 = v12;
  swift_bridgeObjectRetain();
  v14 = sub_23C0E496C();
  v36 = v13;
  v32 = v14;
  v33 = v15;
  v39 = 4;
  swift_bridgeObjectRetain();
  v16 = sub_23C0E4984();
  v17 = v37;
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v31 = v16;
  v21(v8, v5);
  swift_bridgeObjectRetain();
  v22 = v17;
  v23 = v38;
  swift_bridgeObjectRetain();
  v24 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v35;
  *a2 = v22;
  a2[1] = v25;
  v27 = v33;
  v26 = v34;
  a2[2] = v23;
  a2[3] = v26;
  v28 = v32;
  a2[4] = v24;
  a2[5] = v28;
  v29 = v31;
  a2[6] = v27;
  a2[7] = v29;
  a2[8] = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0C3BB8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Trainer.init(from:)(a1, a2);
}

uint64_t sub_23C0C3BCC(_QWORD *a1)
{
  return Trainer.encode(to:)(a1);
}

uint64_t sub_23C0C3BE4(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56) && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64))
    return 0;
  else
    return sub_23C0E4A74();
}

uint64_t sub_23C0C3C14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  if (v4 == v2 && v5 == v3)
    v7 = 1;
  else
    v7 = sub_23C0E4A74() ^ 1;
  return v7 & 1;
}

uint64_t sub_23C0C3C50(uint64_t a1, uint64_t a2)
{
  char v3;

  if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56) && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64))
    v3 = 1;
  else
    v3 = sub_23C0E4A74() ^ 1;
  return v3 & 1;
}

uint64_t sub_23C0C3C98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(a2 + 64);
  if (v4 == v2 && v5 == v3)
    return 0;
  else
    return sub_23C0E4A74();
}

uint64_t Trainer.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = v1[2];
  v5 = v1[6];
  swift_bridgeObjectRetain();
  sub_23C065C58(a1, v3);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t Trainer.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[4];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[7];
  v4 = v0[8];
  v7 = *v0;
  v8 = *(_OWORD *)(v0 + 1);
  v9 = v1;
  v10 = v2;
  v11 = *(_OWORD *)(v0 + 5);
  v12 = v3;
  v13 = v4;
  sub_23C0E4A98();
  Trainer.hash(into:)(v6);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0C3E5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[4];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[7];
  v4 = v0[8];
  v7 = *v0;
  v8 = *(_OWORD *)(v0 + 1);
  v9 = v1;
  v10 = v2;
  v11 = *(_OWORD *)(v0 + 5);
  v12 = v3;
  v13 = v4;
  sub_23C0E4A98();
  Trainer.hash(into:)(v6);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0C3EC8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[4];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[7];
  v4 = v0[8];
  v7 = *v0;
  v8 = *(_OWORD *)(v0 + 1);
  v9 = v1;
  v10 = v2;
  v11 = *(_OWORD *)(v0 + 5);
  v12 = v3;
  v13 = v4;
  sub_23C0E4A98();
  Trainer.hash(into:)(v6);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0C3F2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _s16FitnessFiltering7TrainerV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v22 = a1[3];
  v23 = a1[1];
  v24 = a1[5];
  v25 = a1[2];
  v2 = a1[7];
  v20 = a1[6];
  v21 = a1[4];
  v3 = a1[8];
  v4 = a2[1];
  v6 = a2[2];
  v5 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  if ((sub_23C072E20(*a1, *a2) & 1) == 0)
    return 0;
  v18 = v2;
  v19 = v9;
  if (!v25)
  {
    v12 = v24;
    v13 = v21;
    if (v6)
      return 0;
    goto LABEL_9;
  }
  if (!v6)
    return 0;
  v12 = v24;
  v13 = v21;
  if (v23 == v4 && v25 == v6 || (v14 = sub_23C0E4A74(), result = 0, (v14 & 1) != 0))
  {
LABEL_9:
    if (v22 != v5 || v13 != v7)
    {
      v16 = sub_23C0E4A74();
      result = 0;
      if ((v16 & 1) == 0)
        return result;
    }
    if (v20)
    {
      if (v19)
      {
        if (v12 != v8 || v20 != v19)
        {
          v17 = sub_23C0E4A74();
          result = 0;
          if ((v17 & 1) == 0)
            return result;
        }
LABEL_21:
        if (v18 == v10 && v3 == v11)
          return 1;
        else
          return sub_23C0E4A74();
      }
    }
    else if (!v19)
    {
      goto LABEL_21;
    }
    return 0;
  }
  return result;
}

unint64_t sub_23C0C4120()
{
  unint64_t result;

  result = qword_256B10AC0;
  if (!qword_256B10AC0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Trainer, &type metadata for Trainer);
    atomic_store(result, (unint64_t *)&qword_256B10AC0);
  }
  return result;
}

ValueMetadata *type metadata accessor for Trainer()
{
  return &type metadata for Trainer;
}

uint64_t storeEnumTagSinglePayload for Trainer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23C0C41C0 + 4 * byte_23C0EB8EA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23C0C41F4 + 4 * byte_23C0EB8E5[v4]))();
}

uint64_t sub_23C0C41F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0C41FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0C4204);
  return result;
}

uint64_t sub_23C0C4210(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0C4218);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23C0C421C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0C4224(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Trainer.CodingKeys()
{
  return &type metadata for Trainer.CodingKeys;
}

unint64_t sub_23C0C4244()
{
  unint64_t result;

  result = qword_256B10AC8;
  if (!qword_256B10AC8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EBAE4, &type metadata for Trainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10AC8);
  }
  return result;
}

unint64_t sub_23C0C428C()
{
  unint64_t result;

  result = qword_256B10AD0;
  if (!qword_256B10AD0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EBA54, &type metadata for Trainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10AD0);
  }
  return result;
}

unint64_t sub_23C0C42D4()
{
  unint64_t result;

  result = qword_256B10AD8;
  if (!qword_256B10AD8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EBA7C, &type metadata for Trainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10AD8);
  }
  return result;
}

uint64_t sub_23C0C4318(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736B726F77747261 && a2 == 0xE800000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E6E6F6369 && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6C616D726F666E69 && a2 == 0xEC000000656D614ELL || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t SortOrdering<>.fallbackSortValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_23C0C4554@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  uint64_t v20;
  char v21;
  uint64_t v22;
  void *v31;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v20 = a19;
  v21 = a18;
  v22 = a17;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23C0E4870();
    v31 = (void *)sub_23C0E42AC();
    sub_23C0E3F58();

    v21 = a18;
    v20 = a19;
    v22 = a17;
  }
  sub_23C0E4060();
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v22;
  *(_BYTE *)(a9 + 16) = v21 & 1;
  *(_QWORD *)(a9 + 24) = v20;
  *(_OWORD *)(a9 + 96) = v37;
  *(_OWORD *)(a9 + 112) = v38;
  *(_OWORD *)(a9 + 128) = v39;
  *(_OWORD *)(a9 + 32) = v33;
  *(_OWORD *)(a9 + 48) = v34;
  *(_OWORD *)(a9 + 64) = v35;
  *(_OWORD *)(a9 + 80) = v36;
  sub_23C06DE1C(a16, v22, v21 & 1);
  return swift_bridgeObjectRetain();
}

__n128 sub_23C0C4734@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13)
{
  uint64_t v13;
  void *v23;
  _OWORD *v24;
  __n128 result;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_23C0E4870();
    v23 = (void *)sub_23C0E42AC();
    sub_23C0E3F58();

  }
  sub_23C0E4060();
  sub_23C068360(v13, a9, &qword_256B10B30);
  v24 = (_OWORD *)(a9 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B10B20) + 36));
  v24[4] = v30;
  v24[5] = v31;
  v24[6] = v32;
  *v24 = v26;
  v24[1] = v27;
  result = v29;
  v24[2] = v28;
  v24[3] = v29;
  return result;
}

uint64_t sub_23C0C48F0()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10C90);
  sub_23C06E774(&qword_256B10C98, &qword_256B10C90, MEMORY[0x24BE2B5E8]);
  return sub_23C0E3FB8();
}

uint64_t FilterView.init(store:artworkViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a5 = sub_23C0C49EC;
  *(_QWORD *)(a5 + 8) = result;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = a4;
  return result;
}

uint64_t sub_23C0C49C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C0C49EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

void FilterView.body.getter()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
  sub_23C0AF690();
  sub_23C0AF4A0();
  sub_23C0C5798();
  sub_23C0C57DC();
  sub_23C0C5820();
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C0C4AFC()
{
  sub_23C0E418C();
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  sub_23C08FF40();
  sub_23C08FF84();
  sub_23C08FFC8();
  sub_23C09000C();
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C0C4BA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = sub_23C0E418C();
  v5 = sub_23C0E418C();
  v6 = sub_23C0E418C();
  v7 = sub_23C06E774(&qword_256B10B48, &qword_256B10AE0, MEMORY[0x24BEE12D8]);
  v37 = v28;
  v38 = MEMORY[0x24BEE0D00];
  v39 = v6;
  v40 = v7;
  v41 = MEMORY[0x24BEE0D10];
  v8 = sub_23C0E4654();
  v9 = sub_23C0C5910();
  v36[0] = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v36[1] = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, v2);
  v10 = MEMORY[0x24BDEF3E0];
  v35[0] = v9;
  v35[1] = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v27, v36);
  v11 = MEMORY[0x242616E9C](v10, v1, v35);
  v12 = sub_23C0C59AC();
  v34[0] = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v34[1] = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, a1);
  v33[0] = v12;
  v33[1] = MEMORY[0x242616E9C](v10, v4, v34);
  v32[0] = v11;
  v32[1] = MEMORY[0x242616E9C](v10, v5, v33);
  v31 = MEMORY[0x242616E9C](v10, v6, v32);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v8, &v31);
  v13 = sub_23C0E4618();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v13);
  v14 = sub_23C0E3FA0();
  v15 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v14);
  v37 = v14;
  v38 = v15;
  v16 = MEMORY[0x242616E48](255, &v37, MEMORY[0x24BDF26D8], 0);
  v37 = v14;
  v38 = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v37 = v16;
  v38 = OpaqueTypeConformance2;
  MEMORY[0x242616E48](255, &v37, MEMORY[0x24BDF2FE0], 0);
  v37 = v16;
  v38 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v18 = sub_23C0E4000();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB0);
  v19 = sub_23C0E418C();
  v20 = sub_23C0E4024();
  v21 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB8);
  v30[0] = MEMORY[0x242616E9C](MEMORY[0x24BDEC6F8], v18);
  v30[1] = sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
  v29[0] = MEMORY[0x242616E9C](v10, v19, v30);
  v29[1] = MEMORY[0x24BDF0910];
  v22 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v20, v29);
  v23 = sub_23C06E774(qword_256B10BC8, &qword_256B10BB8, MEMORY[0x24BDEF170]);
  v37 = v20;
  v38 = v21;
  v39 = v22;
  v40 = v23;
  v24 = MEMORY[0x242616E48](255, &v37, MEMORY[0x24BDF3858], 0);
  v37 = v20;
  v38 = v21;
  v39 = v22;
  v40 = v23;
  v25 = swift_getOpaqueTypeConformance2();
  v37 = v24;
  v38 = v25;
  MEMORY[0x242616E48](0, &v37, MEMORY[0x24BDF33A8], 0);
  v37 = v24;
  v38 = v25;
  swift_getOpaqueTypeConformance2();
  return sub_23C0E4030();
}

void sub_23C0C4F84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v14[64];

  v14[13] = a1;
  v14[17] = a4;
  v6 = sub_23C0E40FC();
  v14[15] = *(_QWORD *)(v6 - 8);
  v14[16] = v6;
  MEMORY[0x24BDAC7A8](v6);
  v14[14] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[10] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE0);
  v14[7] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
  v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
  v14[6] = v8;
  v9 = sub_23C0AF690();
  v10 = sub_23C0AF4A0();
  v11 = sub_23C0C5798();
  v12 = sub_23C0C57DC();
  v13 = sub_23C0C5820();
  v14[11] = a3;
  v14[12] = a2;
  v14[50] = a2;
  v14[51] = &type metadata for Modality;
  v14[52] = v8;
  v14[53] = a3;
  v14[54] = &protocol witness table for Modality;
  v14[55] = &protocol witness table for Modality;
  v14[56] = v9;
  v14[57] = v10;
  v14[58] = v11;
  v14[59] = v12;
  v14[60] = v13;
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C0C50A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1[8] = a1;
  v1[9] = sub_23C0E418C();
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  v6 = sub_23C08FF40();
  v7 = sub_23C08FF84();
  v8 = sub_23C08FFC8();
  v9 = sub_23C09000C();
  *(_QWORD *)(v5 - 192) = v4;
  *(_QWORD *)(v5 - 184) = &type metadata for Trainer;
  *(_QWORD *)(v5 - 176) = v1[6];
  *(_QWORD *)(v5 - 168) = v2;
  *(_QWORD *)(v5 - 160) = &protocol witness table for Trainer;
  *(_QWORD *)(v5 - 152) = &protocol witness table for Trainer;
  *(_QWORD *)(v5 - 144) = v6;
  *(_QWORD *)(v5 - 136) = v7;
  *(_QWORD *)(v5 - 128) = v8;
  *(_QWORD *)(v5 - 120) = v9;
  *(_QWORD *)(v5 - 112) = v3;
  type metadata accessor for FilterTrainerSectionView();
}

void sub_23C0C514C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;

  v13 = sub_23C0E418C();
  v14 = sub_23C0E418C();
  v15 = sub_23C0E418C();
  v16 = sub_23C06E774(&qword_256B10B48, &qword_256B10AE0, MEMORY[0x24BEE12D8]);
  v17 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v11 - 192) = v9[10];
  *(_QWORD *)(v11 - 184) = v17;
  *(_QWORD *)(v11 - 176) = v15;
  *(_QWORD *)(v11 - 168) = v16;
  *(_QWORD *)(v11 - 160) = MEMORY[0x24BEE0D10];
  v18 = sub_23C0E4654();
  v19 = sub_23C0C5910();
  v20 = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v21 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, v9[8]);
  *(_QWORD *)(v11 - 208) = v20;
  *(_QWORD *)(v11 - 200) = v21;
  v22 = MEMORY[0x24BDEF3E0];
  v23 = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v9[9], v11 - 208);
  *(_QWORD *)(v11 - 224) = v19;
  *(_QWORD *)(v11 - 216) = v23;
  v24 = MEMORY[0x242616E9C](v22, v10, v11 - 224);
  v25 = sub_23C0C59AC();
  v26 = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v27 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, a1);
  *(_QWORD *)(v11 - 240) = v26;
  *(_QWORD *)(v11 - 232) = v27;
  v28 = MEMORY[0x242616E9C](v22, v13, v11 - 240);
  *(_QWORD *)(v11 - 256) = v25;
  *(_QWORD *)(v11 - 248) = v28;
  v29 = MEMORY[0x242616E9C](v22, v14, v11 - 256);
  v9[40] = v24;
  v9[41] = v29;
  v9[39] = MEMORY[0x242616E9C](v22, v15, v9 + 40);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v18, v9 + 39);
  v30 = sub_23C0E4618();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v30);
  v31 = sub_23C0E3FA0();
  v32 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v31);
  *(_QWORD *)(v11 - 192) = v31;
  *(_QWORD *)(v11 - 184) = v32;
  v33 = MEMORY[0x242616E48](255, v11 - 192, MEMORY[0x24BDF26D8], 0);
  *(_QWORD *)(v11 - 192) = v31;
  *(_QWORD *)(v11 - 184) = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v11 - 192) = v33;
  *(_QWORD *)(v11 - 184) = OpaqueTypeConformance2;
  MEMORY[0x242616E48](255, v11 - 192, MEMORY[0x24BDF2FE0], 0);
  *(_QWORD *)(v11 - 192) = v33;
  *(_QWORD *)(v11 - 184) = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v35 = sub_23C0E4000();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB0);
  v36 = sub_23C0E418C();
  v9[1] = v36;
  v37 = sub_23C0E4024();
  v38 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB8);
  v39 = MEMORY[0x242616E9C](MEMORY[0x24BDEC6F8], v35);
  v40 = sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
  v9[37] = v39;
  v9[38] = v40;
  v41 = MEMORY[0x242616E9C](v22, v36, v9 + 37);
  v9[6] = v41;
  v42 = MEMORY[0x24BDF0910];
  v9[35] = v41;
  v9[36] = v42;
  v43 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v37, v9 + 35);
  v44 = sub_23C06E774(qword_256B10BC8, &qword_256B10BB8, MEMORY[0x24BDEF170]);
  *(_QWORD *)(v11 - 192) = v37;
  *(_QWORD *)(v11 - 184) = v38;
  *v9 = v37;
  v9[3] = v38;
  v9[4] = v43;
  *(_QWORD *)(v11 - 176) = v43;
  *(_QWORD *)(v11 - 168) = v44;
  v45 = v44;
  v9[2] = v44;
  v46 = MEMORY[0x242616E48](0, v11 - 192, MEMORY[0x24BDF3858], 0);
  v9[10] = *(_QWORD *)(v46 - 8);
  MEMORY[0x24BDAC7A8](v46);
  v9[5] = (uint64_t)&a9 - v47;
  *(_QWORD *)(v11 - 192) = v37;
  *(_QWORD *)(v11 - 184) = v38;
  *(_QWORD *)(v11 - 176) = v43;
  *(_QWORD *)(v11 - 168) = v45;
  v48 = swift_getOpaqueTypeConformance2();
  v9[7] = v48;
  *(_QWORD *)(v11 - 192) = v46;
  *(_QWORD *)(v11 - 184) = v48;
  v49 = MEMORY[0x242616E48](0, v11 - 192, MEMORY[0x24BDF33A8], 0);
  v9[9] = *(_QWORD *)(v49 - 8);
  v50 = MEMORY[0x24BDAC7A8](v49);
  MEMORY[0x24BDAC7A8](v50);
  v9[8] = (uint64_t)&a9 - v51;
  v52 = v9[12];
  v53 = v9[13];
  v54 = *(_OWORD *)(v53 + 16);
  *(_OWORD *)(v11 - 192) = *(_OWORD *)v53;
  *(_OWORD *)(v11 - 176) = v54;
  *(_QWORD *)(v11 - 160) = *(_QWORD *)(v53 + 32);
  v56 = type metadata accessor for FilterView(0, v52, v9[11], v55);
  sub_23C0C6200(v56);
}

uint64_t sub_23C0C55A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);

  v8 = *(_BYTE *)(v0 + 208);
  *(_OWORD *)(v0 + 256) = *(_OWORD *)(v0 + 192);
  *(_BYTE *)(v0 + 272) = v8;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v1;
  *(_QWORD *)(v9 + 24) = v3;
  v10 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)v5;
  *(_OWORD *)(v9 + 48) = v10;
  *(_QWORD *)(v9 + 64) = *(_QWORD *)(v5 + 32);
  sub_23C0C72D0(v5);
  swift_checkMetadataState();
  sub_23C0E451C();
  swift_release();
  sub_23C0C730C();
  v11 = *(_BYTE *)(v7 - 176);
  *(_OWORD *)(v0 + 192) = *(_OWORD *)(v7 - 192);
  *(_BYTE *)(v0 + 208) = v11;
  *(_OWORD *)(v0 + 216) = *(_OWORD *)(v7 - 168);
  *(_OWORD *)(v0 + 232) = *(_OWORD *)(v7 - 152);
  *(_QWORD *)(v0 + 160) = v1;
  *(_QWORD *)(v0 + 168) = v3;
  *(_QWORD *)(v0 + 176) = v5;
  swift_checkMetadataState();
  v12 = *(_QWORD *)(v0 + 40);
  sub_23C0E44F8();
  sub_23C0C730C();
  sub_23C0C7638(*(_QWORD *)(v0 + 216));
  sub_23C0C7638(*(_QWORD *)(v0 + 232));
  v14 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 128);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v14, *MEMORY[0x24BDEE5F0], v15);
  v16 = *(_QWORD *)(v0 + 56);
  sub_23C0E3EAC();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 80) + 8))(v12, v6);
  *(_QWORD *)(v7 - 192) = v6;
  *(_QWORD *)(v7 - 184) = v16;
  swift_getOpaqueTypeConformance2();
  v17 = *(_QWORD *)(v0 + 64);
  sub_23C06E920(v4, v2, v17);
  v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 72) + 8);
  v18(v4, v2);
  sub_23C06B980(v17, v2, *(_QWORD *)(v0 + 136));
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v17, v2);
}

void sub_23C0C578C(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_23C0C4F84(v1[4], v1[2], v1[3], a1);
}

unint64_t sub_23C0C5798()
{
  unint64_t result;

  result = qword_256B10B00;
  if (!qword_256B10B00)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Modality, &type metadata for Modality);
    atomic_store(result, (unint64_t *)&qword_256B10B00);
  }
  return result;
}

unint64_t sub_23C0C57DC()
{
  unint64_t result;

  result = qword_256B10B08;
  if (!qword_256B10B08)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Modality, &type metadata for Modality);
    atomic_store(result, (unint64_t *)&qword_256B10B08);
  }
  return result;
}

unint64_t sub_23C0C5820()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10B10;
  if (!qword_256B10B10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
    v2[0] = sub_23C0C588C();
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10B10);
  }
  return result;
}

unint64_t sub_23C0C588C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10B18;
  if (!qword_256B10B18)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B20);
    v2[0] = sub_23C06E774(&qword_256B10B28, &qword_256B10B30, MEMORY[0x24BDF4498]);
    v2[1] = MEMORY[0x24BDEDBB8];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10B18);
  }
  return result;
}

unint64_t sub_23C0C5910()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10B50;
  if (!qword_256B10B50)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
    v2[0] = sub_23C06E774(&qword_256B10B58, &qword_256B10B60, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
    v2[1] = sub_23C06E774(&qword_256B10B68, &qword_256B10B70, (uint64_t)&protocol conformance descriptor for FilterDurationSectionView<A, B>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10B50);
  }
  return result;
}

unint64_t sub_23C0C59AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10B80;
  if (!qword_256B10B80)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
    v2[0] = sub_23C06E774(&qword_256B10B88, &qword_256B10B90, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
    v2[1] = sub_23C06E774(&qword_256B10B98, &qword_256B10BA0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10B80);
  }
  return result;
}

uint64_t sub_23C0C5A50()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23C0C5A84()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23C0C5A8C()
{
  return swift_retain();
}

uint64_t sub_23C0C5A94()
{
  sub_23C0C5AC4();
  return swift_release();
}

uint64_t sub_23C0C5AC4()
{
  return swift_release();
}

uint64_t sub_23C0C5ACC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23C0C5A8C();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain();
  return a1;
}

uint64_t sub_23C0C5B2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  v6 = *((_BYTE *)a2 + 16);
  sub_23C0C5A8C();
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_23C0C5AC4();
  v7 = a2[4];
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_23C0C5BA4(uint64_t a1, uint64_t a2)
{
  char v4;

  v4 = *(_BYTE *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_23C0C5AC4();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t sub_23C0C5BF8(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23C0C5C40(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for FilterView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterView);
}

void sub_23C0C5C94()
{
  sub_23C0E400C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
  sub_23C0AF690();
  sub_23C0AF4A0();
  sub_23C0C5798();
  sub_23C0C57DC();
  sub_23C0C5820();
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C0C5D6C()
{
  sub_23C0E418C();
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  sub_23C08FF40();
  sub_23C08FF84();
  sub_23C08FFC8();
  sub_23C09000C();
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C0C5E18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  _QWORD v30[2];
  _QWORD v31[2];
  uint64_t v32;
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v5 = sub_23C0E418C();
  v6 = sub_23C0E418C();
  v7 = sub_23C0E418C();
  v8 = sub_23C06E774(&qword_256B10B48, &qword_256B10AE0, MEMORY[0x24BEE12D8]);
  v38 = v29;
  v39 = MEMORY[0x24BEE0D00];
  v40 = v7;
  v41 = v8;
  v42 = MEMORY[0x24BEE0D10];
  v9 = sub_23C0E4654();
  v10 = sub_23C0C5910();
  v37[0] = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v37[1] = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, v3);
  v11 = MEMORY[0x24BDEF3E0];
  v36[0] = v10;
  v36[1] = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v2, v37);
  v12 = MEMORY[0x242616E9C](v11, v1, v36);
  v13 = sub_23C0C59AC();
  v35[0] = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v35[1] = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, a1);
  v34[0] = v13;
  v34[1] = MEMORY[0x242616E9C](v11, v5, v35);
  v33[0] = v12;
  v33[1] = MEMORY[0x242616E9C](v11, v6, v34);
  v32 = MEMORY[0x242616E9C](v11, v7, v33);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v9, &v32);
  v14 = sub_23C0E4618();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v14);
  v15 = sub_23C0E3FA0();
  v16 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v15);
  v38 = v15;
  v39 = v16;
  v17 = MEMORY[0x242616E48](255, &v38, MEMORY[0x24BDF26D8], 0);
  v38 = v15;
  v39 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v38 = v17;
  v39 = OpaqueTypeConformance2;
  MEMORY[0x242616E48](255, &v38, MEMORY[0x24BDF2FE0], 0);
  v38 = v17;
  v39 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v19 = sub_23C0E4000();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB0);
  v20 = sub_23C0E418C();
  v21 = sub_23C0E4024();
  v22 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB8);
  v31[0] = MEMORY[0x242616E9C](MEMORY[0x24BDEC6F8], v19);
  v31[1] = sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
  v30[0] = MEMORY[0x242616E9C](v11, v20, v31);
  v30[1] = MEMORY[0x24BDF0910];
  v23 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v21, v30);
  v24 = sub_23C06E774(qword_256B10BC8, &qword_256B10BB8, MEMORY[0x24BDEF170]);
  v38 = v21;
  v39 = v22;
  v40 = v23;
  v41 = v24;
  v25 = MEMORY[0x242616E48](255, &v38, MEMORY[0x24BDF3858], 0);
  v38 = v21;
  v39 = v22;
  v40 = v23;
  v41 = v24;
  v26 = swift_getOpaqueTypeConformance2();
  v38 = v25;
  v39 = v26;
  MEMORY[0x242616E48](255, &v38, MEMORY[0x24BDF33A8], 0);
  v38 = v25;
  v39 = v26;
  swift_getOpaqueTypeConformance2();
  v27 = sub_23C0E403C();
  return MEMORY[0x242616E9C](MEMORY[0x24BDED358], v27);
}

void sub_23C0C6200(uint64_t a1)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  ValueMetadata *v31;
  uint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;
  _UNKNOWN **v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  _BYTE v44[280];
  _OWORD v45[2];
  uint64_t v46;

  v3 = v1[1];
  v41 = *v1;
  v42 = v3;
  v43 = *((_QWORD *)v1 + 4);
  v4 = v1[1];
  v45[0] = *v1;
  v45[1] = v4;
  v46 = *((_QWORD *)v1 + 4);
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C07C14C(&v30, v44);
  sub_23C07C14C(v44, v45);
  v5 = sub_23C07C1BC((uint64_t)v45);
  if ((v5 - 2) < 2)
  {
    sub_23C0E4558();
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE0);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
    v6 = *(_QWORD *)(a1 + 16);
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
    v8 = *(_QWORD *)(a1 + 24);
    v9 = sub_23C0AF690();
    v10 = sub_23C0AF4A0();
    v11 = sub_23C0C5798();
    v12 = sub_23C0C57DC();
    v13 = sub_23C0C5820();
    v30 = v6;
    v31 = &type metadata for Modality;
    v32 = v7;
    v33 = v8;
    v34 = &protocol witness table for Modality;
    v35 = &protocol witness table for Modality;
    v36 = v9;
    v37 = v10;
    v38 = v11;
    v39 = v12;
    v40 = v13;
    type metadata accessor for FilterModalitySectionView();
  }
  if (v5)
  {
    v14 = (uint64_t *)nullsub_1(v45);
    v28 = *v14;
    v15 = v14[13];
    sub_23C07C9B8(v14[22]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C07C920(v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C07CA24(v28);
  }
  else
  {
    v14 = (uint64_t *)nullsub_1(v45);
    v27 = *v14;
    sub_23C07C9B8(v14[23]);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C07C920(v27);
  }
  v16 = v14[33];
  v29 = swift_allocObject();
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v29 + 16) = v18;
  *(_QWORD *)(v29 + 24) = v17;
  v19 = v17;
  *(_QWORD *)(v29 + 32) = v16;
  v20 = v42;
  *(_OWORD *)(v29 + 40) = v41;
  *(_OWORD *)(v29 + 56) = v20;
  *(_QWORD *)(v29 + 72) = v43;
  sub_23C0C72D0((uint64_t)&v41);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
  v21 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
  v22 = sub_23C0AF690();
  v23 = sub_23C0AF4A0();
  v24 = sub_23C0C5798();
  v25 = sub_23C0C57DC();
  v26 = sub_23C0C5820();
  v30 = v18;
  v31 = &type metadata for Modality;
  v32 = v21;
  v33 = v19;
  v34 = &protocol witness table for Modality;
  v35 = &protocol witness table for Modality;
  v36 = v22;
  v37 = v23;
  v38 = v24;
  v39 = v25;
  v40 = v26;
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C0C6A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22)
{
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  sub_23C0E418C();
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  v23 = sub_23C08FF40();
  v24 = sub_23C08FF84();
  v25 = sub_23C08FFC8();
  v26 = sub_23C09000C();
  STACK[0x200] = a22;
  STACK[0x208] = (unint64_t)&protocol witness table for Trainer;
  STACK[0x210] = (unint64_t)&protocol witness table for Trainer;
  STACK[0x218] = v23;
  STACK[0x220] = v24;
  STACK[0x228] = v25;
  STACK[0x230] = v26;
  STACK[0x238] = v22;
  type metadata accessor for FilterTrainerSectionView();
}

void sub_23C0C6AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,unint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a70;
  uint64_t a71;
  uint64_t a72;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t OpaqueTypeConformance2;
  uint64_t v96;
  uint64_t v97;

  v75 = sub_23C0E418C();
  v76 = sub_23C0E418C();
  v77 = sub_23C0E418C();
  v78 = sub_23C06E774(&qword_256B10B48, &qword_256B10AE0, MEMORY[0x24BEE12D8]);
  a70 = a24;
  a71 = MEMORY[0x24BEE0D00];
  a72 = v77;
  STACK[0x200] = v78;
  STACK[0x208] = MEMORY[0x24BEE0D10];
  v79 = sub_23C0E4654();
  v80 = sub_23C0C5910();
  v81 = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v82 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, v72);
  a41 = v81;
  a42 = v82;
  v83 = MEMORY[0x24BDEF3E0];
  v84 = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], a23, &a41);
  a39 = v80;
  a40 = v84;
  v85 = MEMORY[0x242616E9C](v83, v73, &a39);
  v86 = sub_23C0C59AC();
  v87 = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v88 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, a1);
  a37 = v87;
  a38 = v88;
  v89 = MEMORY[0x242616E9C](v83, v75, &a37);
  a35 = v86;
  a36 = v89;
  v90 = MEMORY[0x242616E9C](v83, v76, &a35);
  a33 = v85;
  a34 = v90;
  a32 = MEMORY[0x242616E9C](v83, v77, &a33);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v79, &a32);
  v91 = sub_23C0E4618();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v91);
  v92 = sub_23C0E3FA0();
  v93 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v92);
  a70 = v92;
  a71 = v93;
  v94 = MEMORY[0x242616E48](255, &a70, MEMORY[0x24BDF26D8], 0);
  a70 = v92;
  a71 = v93;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  a70 = v94;
  a71 = OpaqueTypeConformance2;
  MEMORY[0x242616E48](0, &a70, MEMORY[0x24BDF2FE0], 0);
  a70 = v94;
  a71 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  a70 = sub_23C0E3FF4();
  a71 = v96;
  v97 = sub_23C0E4000();
  MEMORY[0x242616E9C](MEMORY[0x24BDEC6F8], v97);
  sub_23C06E920((uint64_t)&a70, v97, (uint64_t)&a56);
  swift_release();
  a70 = a56;
  a71 = a57;
  sub_23C06B980((uint64_t)&a70, v97, (uint64_t)&a30);
  a28 = a30;
  a29 = a31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10BB0);
  sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
  sub_23C0DEAB4((uint64_t)&a28, v97);
  swift_release();
  JUMPOUT(0x23C0C6E10);
}

void sub_23C0C6EF0()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  sub_23C0E418C();
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  v2 = sub_23C08FF40();
  v3 = sub_23C08FF84();
  v4 = sub_23C08FFC8();
  v5 = sub_23C09000C();
  STACK[0x200] = v0;
  STACK[0x208] = (unint64_t)&protocol witness table for Trainer;
  STACK[0x210] = (unint64_t)&protocol witness table for Trainer;
  STACK[0x218] = v2;
  STACK[0x220] = v3;
  STACK[0x228] = v4;
  STACK[0x230] = v5;
  STACK[0x238] = v1;
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C0C6FA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = sub_23C0E418C();
  v5 = sub_23C0E418C();
  v6 = sub_23C0E418C();
  v7 = sub_23C06E774(&qword_256B10B48, &qword_256B10AE0, MEMORY[0x24BEE12D8]);
  v32 = v21;
  v33 = MEMORY[0x24BEE0D00];
  v34 = v6;
  v35 = v7;
  v36 = MEMORY[0x24BEE0D10];
  v8 = sub_23C0E4654();
  v9 = sub_23C0C5910();
  v30[0] = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v30[1] = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, v1);
  v10 = MEMORY[0x24BDEF3E0];
  v29[0] = v9;
  v29[1] = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v23, v30);
  v11 = MEMORY[0x242616E9C](v10, v2, v29);
  v12 = sub_23C0C59AC();
  v28[0] = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v28[1] = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, a1);
  v27[0] = v12;
  v27[1] = MEMORY[0x242616E9C](v10, v4, v28);
  v26[0] = v11;
  v26[1] = MEMORY[0x242616E9C](v10, v5, v27);
  v25 = MEMORY[0x242616E9C](v10, v6, v26);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v8, &v25);
  v13 = sub_23C0E4618();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v13);
  v14 = sub_23C0E3FA0();
  v15 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v14);
  v32 = v14;
  v33 = v15;
  v16 = MEMORY[0x242616E48](255, &v32, MEMORY[0x24BDF26D8], 0);
  v32 = v14;
  v33 = v15;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v32 = v16;
  v33 = OpaqueTypeConformance2;
  MEMORY[0x242616E48](255, &v32, MEMORY[0x24BDF2FE0], 0);
  v32 = v16;
  v33 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v18 = sub_23C0E4000();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB0);
  v19 = sub_23C0E418C();
  v24[0] = MEMORY[0x242616E9C](MEMORY[0x24BDEC6F8], v18);
  v24[1] = sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
  MEMORY[0x242616E9C](v10, v19, v24);
  sub_23C06B980((uint64_t)&v31, v19, v22);
  return sub_23C0C730C();
}

uint64_t sub_23C0C72A8()
{
  return objectdestroy_3Tm_0();
}

uint64_t sub_23C0C72B0()
{
  uint64_t v0;

  return sub_23C0CCFEC(v0 + 32, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C0C72D0(uint64_t a1)
{
  sub_23C0C5A8C();
  swift_retain();
  return a1;
}

uint64_t sub_23C0C730C()
{
  return swift_release();
}

uint64_t sub_23C0C7318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void (*v27)(char *, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v36 = a4;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10C50);
  MEMORY[0x24BDAC7A8](v35);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10C58);
  v10 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  v34 = v10;
  v11 = MEMORY[0x24BDAC7A8](v9);
  v32 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - v13;
  v15 = sub_23C0E41D4();
  MEMORY[0x24BDAC7A8](v15);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10C60);
  v30 = *(_QWORD *)(v31 - 8);
  v16 = v30;
  MEMORY[0x24BDAC7A8](v31);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C0E41C8();
  v43 = a2;
  v44 = a3;
  v45 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10C68);
  sub_23C06E774(&qword_256B10C70, &qword_256B10C68, MEMORY[0x24BDF4700]);
  v29 = v18;
  sub_23C0E3FC4();
  sub_23C0E41B0();
  v40 = a2;
  v41 = a3;
  v42 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10C78);
  sub_23C06E774(&qword_256B10C80, &qword_256B10C78, MEMORY[0x24BDF43B0]);
  sub_23C0E3FC4();
  sub_23C0E41BC();
  v37 = a2;
  v38 = a3;
  v39 = a1;
  v19 = v32;
  sub_23C0E3FC4();
  v20 = &v8[*(int *)(v35 + 48)];
  v21 = &v8[*(int *)(v35 + 64)];
  v22 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v23 = v31;
  v22(v8, v18, v31);
  v25 = v33;
  v24 = v34;
  v26 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
  v26(v20, v14, v33);
  v26(v21, v19, v25);
  sub_23C0E4168();
  v27 = *(void (**)(char *, uint64_t))(v24 + 8);
  v27(v19, v25);
  v27(v14, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v29, v23);
}

uint64_t sub_23C0C762C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23C0C7318(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_23C0C7638(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

__n128 sub_23C0C7648@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  __n128 result;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  char v26;
  uint64_t v27;
  __int128 v28;
  char v29;
  uint64_t v30;
  _BYTE v31[280];
  _OWORD v32[2];
  uint64_t v33;

  v8 = *(_OWORD *)(a1 + 16);
  v32[0] = *(_OWORD *)a1;
  v32[1] = v8;
  v33 = *(_QWORD *)(a1 + 32);
  type metadata accessor for FilterView(0, a2, a3, a4);
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C07C14C(&v25, v31);
  sub_23C07C14C(v31, v32);
  v9 = sub_23C07C1BC((uint64_t)v32);
  if ((v9 - 2) >= 2)
  {
    if (!v9)
    {
      v10 = (uint64_t *)nullsub_1(v32);
      v23 = *v10;
      v11 = v10[23];
      swift_bridgeObjectRelease();
      v12 = v23;
      swift_bridgeObjectRelease();
      sub_23C07C9B8(v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v23)
        goto LABEL_7;
      goto LABEL_6;
    }
    v13 = (uint64_t *)nullsub_1(v32);
    v22 = *v13;
    v24 = v13[13];
    v21 = v13[22];
    swift_bridgeObjectRelease();
    v12 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C07C9B8(v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23C07CA24(v22);
    if (v24)
    {
LABEL_6:
      swift_bridgeObjectRetain();
      sub_23C07C920(v12);
      swift_bridgeObjectRelease();
    }
  }
LABEL_7:
  v14 = sub_23C0E4150();
  sub_23C0C7A64(a2, a3, (uint64_t)&v25);
  v15 = v26;
  v16 = v27;
  v17 = v29;
  v18 = v30;
  result = v25;
  v20 = v28;
  *(_QWORD *)a5 = v14;
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 1;
  *(__n128 *)(a5 + 24) = result;
  *(_BYTE *)(a5 + 40) = v15;
  *(_QWORD *)(a5 + 48) = v16;
  *(_OWORD *)(a5 + 56) = v20;
  *(_BYTE *)(a5 + 72) = v17;
  *(_QWORD *)(a5 + 80) = v18;
  return result;
}

uint64_t sub_23C0C7A64@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v5 = sub_23C0E3ED4();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_23C0E4768();
  MEMORY[0x24BDAC7A8](v7);
  sub_23C0E475C();
  sub_23C0E4750();
  type metadata accessor for FilterView(0, a1, a2, v8);
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E4744();
  swift_bridgeObjectRelease();
  sub_23C0E4750();
  sub_23C0E4774();
  if (qword_256B0EF30 != -1)
    swift_once();
  v9 = (id)qword_256B21860;
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E4798();
  sub_23C06DB6C();
  v10 = sub_23C0E43CC();
  v12 = v11;
  v14 = v13 & 1;
  sub_23C0E4330();
  sub_23C0E433C();
  swift_release();
  v15 = sub_23C0E43B4();
  v35 = v16;
  v36 = v15;
  v34 = v17;
  v19 = v18;
  swift_release();
  sub_23C06DBB0(v10, v12, v14);
  swift_bridgeObjectRelease();
  sub_23C0E475C();
  sub_23C0E4750();
  sub_23C0E4738();
  sub_23C0E4750();
  sub_23C0E4774();
  v20 = (id)qword_256B21860;
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E4798();
  v21 = sub_23C0E43CC();
  v23 = v22;
  v25 = v24 & 1;
  sub_23C0E4378();
  v26 = sub_23C0E43B4();
  v28 = v27;
  v30 = v29;
  v32 = v31;
  swift_release();
  sub_23C06DBB0(v21, v23, v25);
  swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v36;
  *(_QWORD *)(a3 + 8) = v34;
  *(_BYTE *)(a3 + 16) = v19 & 1;
  *(_QWORD *)(a3 + 24) = v35;
  *(_QWORD *)(a3 + 32) = v26;
  *(_QWORD *)(a3 + 40) = v28;
  *(_BYTE *)(a3 + 48) = v30 & 1;
  *(_QWORD *)(a3 + 56) = v32;
  sub_23C06DE1C(v36, v34, v19 & 1);
  swift_bridgeObjectRetain();
  sub_23C06DE1C(v26, v28, v30 & 1);
  swift_bridgeObjectRetain();
  sub_23C06DBB0(v26, v28, v30 & 1);
  swift_bridgeObjectRelease();
  sub_23C06DBB0(v36, v34, v19 & 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0C7F30@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v6 = sub_23C0E3ED4();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v7);
  sub_23C0E472C();
  if (qword_256B0EF30 != -1)
    swift_once();
  v9 = (void *)qword_256B21860;
  type metadata accessor for FilterView(0, a1, a2, v8);
  v10 = v9;
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E4798();
  sub_23C06DB6C();
  result = sub_23C0E43CC();
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v12;
  *(_BYTE *)(a3 + 16) = v13 & 1;
  *(_QWORD *)(a3 + 24) = v14;
  return result;
}

uint64_t sub_23C0C80DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10C88);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_23C0E3F64();
  v9 = sub_23C0E3F70();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 0, 1, v9);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 48) = v11;
  *(_QWORD *)(v10 + 64) = *(_QWORD *)(a1 + 32);
  v14 = a2;
  v15 = a3;
  v16 = a1;
  sub_23C0C72D0(a1);
  return sub_23C0E45C4();
}

uint64_t sub_23C0C81F8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v14[2];
  uint64_t v15;

  v8 = type metadata accessor for FilterAction();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v11;
  v15 = *(_QWORD *)(a1 + 32);
  type metadata accessor for FilterView(0, a2, a3, v12);
  sub_23C0C48F0();
  *v10 = a4;
  swift_storeEnumTagMultiPayload();
  sub_23C0E4708();
  swift_release();
  return sub_23C08FC60((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for FilterAction);
}

uint64_t sub_23C0C82DC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  v6 = sub_23C0E3ED4();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v7);
  sub_23C0E472C();
  if (qword_256B0EF30 != -1)
    swift_once();
  v9 = (void *)qword_256B21860;
  type metadata accessor for FilterView(0, a1, a2, v8);
  v10 = v9;
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E4798();
  sub_23C06DB6C();
  v11 = sub_23C0E43CC();
  v13 = v12;
  v15 = v14 & 1;
  v16 = sub_23C0E43A8();
  v18 = v17;
  v20 = v19;
  v22 = v21;
  sub_23C06DBB0(v11, v13, v15);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v16;
  *(_QWORD *)(a3 + 8) = v18;
  *(_BYTE *)(a3 + 16) = v20 & 1;
  *(_QWORD *)(a3 + 24) = v22;
  return result;
}

double sub_23C0C84CC@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  double result;

  *(_QWORD *)&result = sub_23C0C7648(v2[4], v2[2], v2[3], a1, a2).n128_u64[0];
  return result;
}

uint64_t sub_23C0C84D8()
{
  uint64_t *v0;

  return sub_23C0C80DC(v0[4], v0[2], v0[3]);
}

uint64_t sub_23C0C850C()
{
  uint64_t *v0;

  return sub_23C0C80DC(v0[4], v0[2], v0[3]);
}

uint64_t sub_23C0C8540()
{
  return objectdestroy_3Tm_0();
}

uint64_t sub_23C0C8548()
{
  uint64_t v0;

  return sub_23C0C81F8(v0 + 32, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0);
}

uint64_t sub_23C0C8568@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C0C82DC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23C0C8574()
{
  return objectdestroy_3Tm_0();
}

uint64_t sub_23C0C857C()
{
  uint64_t v0;

  return sub_23C0C81F8(v0 + 32, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 1);
}

uint64_t sub_23C0C859C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C0C7F30(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_23C0C85A8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[11];
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  ValueMetadata *v23;
  uint64_t v24;
  uint64_t v25;
  _UNKNOWN **v26;
  _UNKNOWN **v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v16[9] = a3;
  v16[7] = a2;
  v16[8] = a1;
  v21 = a6;
  v20 = sub_23C0E41A4();
  v19 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v18 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23C0E41F8();
  v16[10] = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v16[6] = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[3] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE0);
  v16[1] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
  v10 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
  v16[0] = v10;
  v11 = sub_23C0AF690();
  v12 = sub_23C0AF4A0();
  v13 = sub_23C0C5798();
  v14 = sub_23C0C57DC();
  v15 = sub_23C0C5820();
  v22 = a4;
  v23 = &type metadata for Modality;
  v16[5] = a4;
  v24 = v10;
  v25 = a5;
  v16[4] = a5;
  v26 = &protocol witness table for Modality;
  v27 = &protocol witness table for Modality;
  v28 = v11;
  v29 = v12;
  v30 = v13;
  v31 = v14;
  v32 = v15;
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C0C8750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v3 - 432) = sub_23C0E418C();
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  v4 = sub_23C08FF40();
  v5 = sub_23C08FF84();
  v6 = sub_23C08FFC8();
  v7 = sub_23C09000C();
  *(_QWORD *)(v3 - 176) = v1;
  *(_QWORD *)(v3 - 168) = &type metadata for Trainer;
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v3 - 448);
  *(_QWORD *)(v3 - 152) = v0;
  *(_QWORD *)(v3 - 144) = &protocol witness table for Trainer;
  *(_QWORD *)(v3 - 136) = &protocol witness table for Trainer;
  *(_QWORD *)(v3 - 128) = v4;
  *(_QWORD *)(v3 - 120) = v5;
  *(_QWORD *)(v3 - 112) = v6;
  *(_QWORD *)(v3 - 104) = v7;
  *(_QWORD *)(v3 - 96) = v2;
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C0C8804(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t);
  _BYTE v44[96];

  v5 = sub_23C0E418C();
  v6 = sub_23C0E418C();
  v7 = sub_23C0E418C();
  v8 = sub_23C06E774(&qword_256B10B48, &qword_256B10AE0, MEMORY[0x24BEE12D8]);
  v9 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v3 - 176) = *(_QWORD *)(v3 - 424);
  *(_QWORD *)(v3 - 168) = v9;
  *(_QWORD *)(v3 - 160) = v7;
  *(_QWORD *)(v3 - 152) = v8;
  *(_QWORD *)(v3 - 144) = MEMORY[0x24BEE0D10];
  v10 = sub_23C0E4654();
  v11 = sub_23C0C5910();
  v12 = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v13 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, v2);
  *(_QWORD *)(v3 - 192) = v12;
  *(_QWORD *)(v3 - 184) = v13;
  v14 = MEMORY[0x24BDEF3E0];
  v15 = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], *(_QWORD *)(v3 - 432), v3 - 192);
  *(_QWORD *)(v3 - 208) = v11;
  *(_QWORD *)(v3 - 200) = v15;
  v16 = MEMORY[0x242616E9C](v14, v1, v3 - 208);
  v17 = sub_23C0C59AC();
  v18 = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v19 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, a1);
  *(_QWORD *)(v3 - 224) = v18;
  *(_QWORD *)(v3 - 216) = v19;
  v20 = MEMORY[0x242616E9C](v14, v5, v3 - 224);
  *(_QWORD *)(v3 - 240) = v17;
  *(_QWORD *)(v3 - 232) = v20;
  v21 = MEMORY[0x242616E9C](v14, v6, v3 - 240);
  *(_QWORD *)(v3 - 256) = v16;
  *(_QWORD *)(v3 - 248) = v21;
  *(_QWORD *)(v3 - 264) = MEMORY[0x242616E9C](v14, v7, v3 - 256);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v10, v3 - 264);
  v22 = sub_23C0E4618();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v22);
  v23 = sub_23C0E3FA0();
  *(_QWORD *)(v3 - 448) = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v25 = &v44[-v24];
  v26 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v23);
  *(_QWORD *)(v3 - 176) = v23;
  *(_QWORD *)(v3 - 168) = v26;
  v27 = MEMORY[0x242616E48](0, v3 - 176, MEMORY[0x24BDF26D8], 0);
  *(_QWORD *)(v3 - 424) = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v29 = &v44[-v28];
  *(_QWORD *)(v3 - 176) = v23;
  *(_QWORD *)(v3 - 168) = v26;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v3 - 176) = v27;
  *(_QWORD *)(v3 - 168) = OpaqueTypeConformance2;
  *(_QWORD *)(v3 - 440) = OpaqueTypeConformance2;
  v31 = MEMORY[0x242616E48](0, v3 - 176, MEMORY[0x24BDF2FE0], 0);
  *(_QWORD *)(v3 - 432) = *(_QWORD *)(v31 - 8);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = &v44[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v32);
  v36 = &v44[-v35];
  *(_QWORD *)(v3 - 304) = *(_QWORD *)(v3 - 408);
  *(_QWORD *)(v3 - 296) = *(_QWORD *)(v3 - 416);
  *(_QWORD *)(v3 - 288) = *(_QWORD *)(v3 - 392);
  *(_QWORD *)(v3 - 280) = *(_QWORD *)(v3 - 376);
  *(_QWORD *)(v3 - 272) = *(_QWORD *)(v3 - 384);
  sub_23C0E42D0();
  sub_23C0D4060();
  v37 = sub_23C0E4300();
  v38 = *(_QWORD *)(v3 - 400);
  sub_23C0E41EC();
  v39 = v26;
  v40 = *(_QWORD *)(v3 - 352);
  MEMORY[0x2426165C0](v37, 0x4034000000000000, 0, v38, v23, v39);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 368) + 8))(v38, *(_QWORD *)(v3 - 360));
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 448) + 8))(v25, v23);
  sub_23C0E4198();
  LOBYTE(v37) = sub_23C0E42D0();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v37)
    sub_23C0E42C4();
  v41 = *(_QWORD *)(v3 - 440);
  sub_23C0E448C();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 344) + 8))(v40, *(_QWORD *)(v3 - 336));
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 424) + 8))(v29, v27);
  *(_QWORD *)(v3 - 176) = v27;
  *(_QWORD *)(v3 - 168) = v41;
  swift_getOpaqueTypeConformance2();
  sub_23C06E920((uint64_t)v34, v31, (uint64_t)v36);
  v42 = *(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v3 - 432) + 8);
  v42(v34, v31);
  sub_23C06B980((uint64_t)v36, v31, *(_QWORD *)(v3 - 328));
  return ((uint64_t (*)(_BYTE *, uint64_t))v42)(v36, v31);
}

uint64_t sub_23C0C8CFC()
{
  swift_bridgeObjectRelease();
  sub_23C0C5AC4();
  swift_release();
  return swift_deallocObject();
}

void sub_23C0C8D34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  sub_23C0C85A8(a1, v2[4], (uint64_t)(v2 + 5), v2[2], v2[3], a2);
}

void sub_23C0C8D44()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
  sub_23C0AF690();
  sub_23C0AF4A0();
  sub_23C0C5798();
  sub_23C0C57DC();
  sub_23C0C5820();
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C0C8E4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v5 - 392) = a1;
  *(_QWORD *)(v5 - 384) = sub_23C0E418C();
  sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  v6 = sub_23C08FF40();
  v7 = sub_23C08FF84();
  v8 = sub_23C08FFC8();
  v9 = sub_23C09000C();
  *(_QWORD *)(v5 - 176) = v1;
  *(_QWORD *)(v5 - 168) = &type metadata for Trainer;
  *(_QWORD *)(v5 - 160) = v3;
  *(_QWORD *)(v5 - 152) = v2;
  *(_QWORD *)(v5 - 144) = &protocol witness table for Trainer;
  *(_QWORD *)(v5 - 136) = &protocol witness table for Trainer;
  *(_QWORD *)(v5 - 128) = v6;
  *(_QWORD *)(v5 - 120) = v7;
  *(_QWORD *)(v5 - 112) = v8;
  *(_QWORD *)(v5 - 104) = v9;
  *(_QWORD *)(v5 - 96) = v4;
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C0C8F00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  void (*v29)(_BYTE *, uint64_t);
  _BYTE v31[96];

  v4 = sub_23C0E418C();
  v5 = sub_23C0E418C();
  v6 = v1;
  v7 = sub_23C0E418C();
  v8 = sub_23C06E774(&qword_256B10B48, &qword_256B10AE0, MEMORY[0x24BEE12D8]);
  v9 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v2 - 176) = *(_QWORD *)(v2 - 376);
  *(_QWORD *)(v2 - 168) = v9;
  *(_QWORD *)(v2 - 160) = v7;
  *(_QWORD *)(v2 - 152) = v8;
  *(_QWORD *)(v2 - 144) = MEMORY[0x24BEE0D10];
  v10 = sub_23C0E4654();
  v11 = sub_23C0C5910();
  v12 = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v13 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, *(_QWORD *)(v2 - 392));
  *(_QWORD *)(v2 - 192) = v12;
  *(_QWORD *)(v2 - 184) = v13;
  v14 = MEMORY[0x24BDEF3E0];
  v15 = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], *(_QWORD *)(v2 - 384), v2 - 192);
  *(_QWORD *)(v2 - 208) = v11;
  *(_QWORD *)(v2 - 200) = v15;
  v16 = MEMORY[0x242616E9C](v14, v6, v2 - 208);
  v17 = sub_23C0C59AC();
  v18 = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v19 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, a1);
  *(_QWORD *)(v2 - 224) = v18;
  *(_QWORD *)(v2 - 216) = v19;
  v20 = MEMORY[0x242616E9C](v14, v4, v2 - 224);
  *(_QWORD *)(v2 - 240) = v17;
  *(_QWORD *)(v2 - 232) = v20;
  v21 = MEMORY[0x242616E9C](v14, v5, v2 - 240);
  *(_QWORD *)(v2 - 256) = v16;
  *(_QWORD *)(v2 - 248) = v21;
  *(_QWORD *)(v2 - 264) = MEMORY[0x242616E9C](v14, v7, v2 - 256);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v10, v2 - 264);
  v22 = sub_23C0E4618();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v26 = &v31[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v24);
  v28 = &v31[-v27];
  sub_23C0E415C();
  *(_QWORD *)(v2 - 304) = *(_QWORD *)(v2 - 360);
  *(_QWORD *)(v2 - 296) = *(_QWORD *)(v2 - 368);
  *(_QWORD *)(v2 - 288) = *(_QWORD *)(v2 - 352);
  *(_QWORD *)(v2 - 280) = *(_QWORD *)(v2 - 344);
  *(_QWORD *)(v2 - 272) = *(_QWORD *)(v2 - 336);
  sub_23C0E460C();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v22);
  sub_23C06E920((uint64_t)v26, v22, (uint64_t)v28);
  v29 = *(void (**)(_BYTE *, uint64_t))(v23 + 8);
  v29(v26, v22);
  sub_23C06B980((uint64_t)v28, v22, *(_QWORD *)(v2 - 328));
  return ((uint64_t (*)(_BYTE *, uint64_t))v29)(v28, v22);
}

void sub_23C0C91EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[14];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  ValueMetadata *v24;
  uint64_t v25;
  uint64_t v26;
  _UNKNOWN **v27;
  _UNKNOWN **v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v19 = a3;
  v20 = a2;
  v15[9] = a1;
  v21 = a6;
  v17 = sub_23C0E3FE8();
  v16 = *(_QWORD *)(v17 - 8);
  v18 = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](v17);
  v15[10] = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
  v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
  v10 = sub_23C0AF690();
  v11 = sub_23C0AF4A0();
  v12 = sub_23C0C5798();
  v13 = sub_23C0C57DC();
  v14 = sub_23C0C5820();
  v15[1] = a4;
  v23 = a4;
  v24 = &type metadata for Modality;
  v25 = v9;
  v26 = a5;
  v15[0] = a5;
  v27 = &protocol witness table for Modality;
  v28 = &protocol witness table for Modality;
  v29 = v10;
  v30 = v11;
  v31 = v12;
  v32 = v13;
  v33 = v14;
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C0C9340(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v5 - 344) = a1;
  *(_QWORD *)(v5 - 328) = sub_23C0E418C();
  *(_QWORD *)(v5 - 416) = sub_23C0E418C();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  v6 = sub_23C08FF40();
  v7 = sub_23C08FF84();
  v8 = sub_23C08FFC8();
  v9 = sub_23C09000C();
  *(_QWORD *)(v5 - 176) = v2;
  *(_QWORD *)(v5 - 168) = &type metadata for Trainer;
  *(_QWORD *)(v5 - 160) = v1;
  *(_QWORD *)(v5 - 152) = v3;
  *(_QWORD *)(v5 - 144) = &protocol witness table for Trainer;
  *(_QWORD *)(v5 - 136) = &protocol witness table for Trainer;
  *(_QWORD *)(v5 - 128) = v6;
  *(_QWORD *)(v5 - 120) = v7;
  *(_QWORD *)(v5 - 112) = v8;
  *(_QWORD *)(v5 - 104) = v9;
  *(_QWORD *)(v5 - 96) = v4;
  type metadata accessor for FilterTrainerSectionView();
}

uint64_t sub_23C0C93F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  uint64_t v37;
  _BYTE v38[80];

  *(_QWORD *)(v1 - 408) = a1;
  *(_QWORD *)(v1 - 392) = sub_23C0E418C();
  *(_QWORD *)(v1 - 376) = sub_23C0E418C();
  v2 = sub_23C0E418C();
  *(_QWORD *)(v1 - 400) = v2;
  v3 = sub_23C06E774(&qword_256B10B48, &qword_256B10AE0, MEMORY[0x24BEE12D8]);
  *(_QWORD *)(v1 - 368) = v3;
  v4 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v1 - 176) = *(_QWORD *)(v1 - 272);
  *(_QWORD *)(v1 - 168) = v4;
  *(_QWORD *)(v1 - 160) = v2;
  *(_QWORD *)(v1 - 152) = v3;
  *(_QWORD *)(v1 - 144) = MEMORY[0x24BEE0D10];
  v5 = sub_23C0E4654();
  *(_QWORD *)(v1 - 336) = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  v8 = &v38[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v1 - 384) = &v38[-v9];
  v10 = swift_bridgeObjectRetain();
  v11 = sub_23C0CD184(v10);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 - 176) = v11;
  *(_QWORD *)(v1 - 360) = swift_getKeyPath();
  v12 = *(_QWORD *)(v1 - 320);
  v13 = *(_QWORD *)(v1 - 352);
  v14 = *(_QWORD *)(v1 - 312);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 16))(v13, *(_QWORD *)(v1 - 296), v14);
  v15 = v12;
  v16 = (*(unsigned __int8 *)(v12 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v17 = swift_allocObject();
  v18 = *(_QWORD *)(v1 - 424);
  v19 = *(_QWORD *)(v1 - 432);
  *(_QWORD *)(v17 + 16) = v18;
  *(_QWORD *)(v17 + 24) = v19;
  v20 = *(_QWORD *)(v1 - 288);
  v21 = *(_OWORD *)(v20 + 16);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)v20;
  *(_OWORD *)(v17 + 48) = v21;
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v20 + 32);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v15 + 32))(v17 + v16, v13, v14);
  v22 = (_QWORD *)swift_allocObject();
  v22[2] = v18;
  v22[3] = v19;
  v22[4] = sub_23C0CD508;
  v22[5] = v17;
  sub_23C0C72D0(v20);
  v23 = sub_23C0C5910();
  v24 = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v25 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, *(_QWORD *)(v1 - 344));
  *(_QWORD *)(v1 - 192) = v24;
  *(_QWORD *)(v1 - 184) = v25;
  v26 = MEMORY[0x24BDEF3E0];
  v27 = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], *(_QWORD *)(v1 - 328), v1 - 192);
  *(_QWORD *)(v1 - 208) = v23;
  *(_QWORD *)(v1 - 200) = v27;
  v28 = MEMORY[0x242616E9C](v26, *(_QWORD *)(v1 - 416), v1 - 208);
  v29 = sub_23C0C59AC();
  v30 = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v31 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, *(_QWORD *)(v1 - 408));
  *(_QWORD *)(v1 - 224) = v30;
  *(_QWORD *)(v1 - 216) = v31;
  v32 = MEMORY[0x242616E9C](v26, *(_QWORD *)(v1 - 392), v1 - 224);
  *(_QWORD *)(v1 - 240) = v29;
  *(_QWORD *)(v1 - 232) = v32;
  v33 = MEMORY[0x242616E9C](v26, *(_QWORD *)(v1 - 376), v1 - 240);
  *(_QWORD *)(v1 - 256) = v28;
  *(_QWORD *)(v1 - 248) = v33;
  v37 = MEMORY[0x242616E9C](v26, *(_QWORD *)(v1 - 400), v1 - 256);
  sub_23C0E463C();
  *(_QWORD *)(v1 - 264) = v37;
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v5, v1 - 264);
  v34 = *(_QWORD *)(v1 - 384);
  sub_23C06E920((uint64_t)v8, v5, v34);
  v35 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 336) + 8);
  v35((uint64_t)v8, v5);
  sub_23C06B980(v34, v5, *(_QWORD *)(v1 - 280));
  return v35(v34, v5);
}

void sub_23C0C97E0()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AE8);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
  sub_23C0AF690();
  sub_23C0AF4A0();
  sub_23C0C5798();
  sub_23C0C57DC();
  sub_23C0C5820();
  type metadata accessor for FilterModalitySectionView();
}

void sub_23C0C98C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v5 - 320) = a1;
  *(_QWORD *)(v5 - 312) = sub_23C0E418C();
  sub_23C0E418C();
  *(_QWORD *)(v5 - 304) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B38);
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  v6 = sub_23C08FF40();
  v7 = sub_23C08FF84();
  v8 = sub_23C08FFC8();
  v9 = sub_23C09000C();
  *(_QWORD *)(v5 - 400) = v3;
  *(_QWORD *)(v5 - 192) = v3;
  *(_QWORD *)(v5 - 184) = &type metadata for Trainer;
  *(_QWORD *)(v5 - 176) = v1;
  *(_QWORD *)(v5 - 168) = v4;
  *(_QWORD *)(v5 - 392) = v4;
  *(_QWORD *)(v5 - 160) = &protocol witness table for Trainer;
  *(_QWORD *)(v5 - 152) = &protocol witness table for Trainer;
  *(_QWORD *)(v5 - 144) = v6;
  *(_QWORD *)(v5 - 136) = v7;
  *(_QWORD *)(v5 - 128) = v8;
  *(_QWORD *)(v5 - 120) = v9;
  *(_QWORD *)(v5 - 112) = v2;
  type metadata accessor for FilterTrainerSectionView();
}

void sub_23C0C998C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  _BYTE v21[112];

  *(_QWORD *)(v3 - 376) = a1;
  *(_QWORD *)(v3 - 368) = sub_23C0E418C();
  v4 = sub_23C0E418C();
  *(_QWORD *)(v3 - 304) = v2;
  *(_QWORD *)(v3 - 360) = v4;
  v5 = sub_23C0E418C();
  *(_QWORD *)(v3 - 336) = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x24BDAC7A8](v5);
  *(_QWORD *)(v3 - 352) = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  *(_QWORD *)(v3 - 344) = &v21[-v8];
  v9 = sub_23C0E3ED4();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v10);
  sub_23C0E472C();
  if (qword_256B0EF30 != -1)
    swift_once();
  v12 = (void *)qword_256B21860;
  v13 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 - 192) = *(_OWORD *)v1;
  *(_OWORD *)(v3 - 176) = v13;
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v1 + 32);
  v14 = *(_QWORD *)(v3 - 400);
  v15 = *(_QWORD *)(v3 - 392);
  type metadata accessor for FilterView(0, v14, v15, v11);
  v16 = v12;
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E4798();
  v17 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 - 192) = *(_OWORD *)v1;
  *(_OWORD *)(v3 - 176) = v17;
  *(_QWORD *)(v3 - 160) = *(_QWORD *)(v1 + 32);
  v18 = *(_QWORD *)(v3 - 384);
  if (v18)
    swift_bridgeObjectRelease();
  sub_23C0E3FDC();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v14;
  *(_QWORD *)(v19 + 24) = v15;
  v20 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v19 + 32) = *(_OWORD *)v1;
  *(_OWORD *)(v19 + 48) = v20;
  *(_QWORD *)(v19 + 64) = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v19 + 72) = v18;
  sub_23C0C72D0(v1);
  sub_23C0C9F3C();
}

uint64_t sub_23C0C9DE4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v23 = a7;
  v25 = a3;
  v26 = a5;
  v24 = type metadata accessor for FilterAction();
  MEMORY[0x24BDAC7A8](v24);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = *(_QWORD *)(a1 + 24);
  v17 = *(_QWORD *)(a1 + 32);
  v22 = *a2;
  LOBYTE(a2) = *(_BYTE *)(a1 + 40);
  v18 = a4[1];
  v27 = *a4;
  v28 = v18;
  v29 = *((_QWORD *)a4 + 4);
  type metadata accessor for FilterView(0, a6, v23, v19);
  sub_23C0C48F0();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F348);
  *(_QWORD *)v12 = v13;
  *((_QWORD *)v12 + 1) = v14;
  *((_QWORD *)v12 + 2) = v15;
  *((_QWORD *)v12 + 3) = v16;
  *((_QWORD *)v12 + 4) = v17;
  v12[40] = (char)a2;
  v12[41] = v22;
  sub_23C0682C0(v13, v14, v15, v16, v17, a2);
  MEMORY[0x24261605C](v25, v26);
  swift_storeEnumTagMultiPayload();
  sub_23C0E4708();
  swift_release();
  return sub_23C08FC60((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for FilterAction);
}

void sub_23C0C9F3C()
{
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF8);
  sub_23C08FF40();
  sub_23C08FF84();
  sub_23C08FFC8();
  sub_23C09000C();
  sub_23C0C5820();
  type metadata accessor for FilterTrainerSectionView();
}

void sub_23C0CA004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;

  v9[15] = *(_QWORD *)(a1 - 8);
  v16 = MEMORY[0x24BDAC7A8](a1);
  v9[16] = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v9[36] = (char *)&a9 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10B40);
  v9[63] = a1;
  v20 = sub_23C0E418C();
  v9[40] = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v9[39] = (char *)&a9 - v21;
  v22 = type metadata accessor for FilterLayout();
  v9[10] = v22;
  v23 = MEMORY[0x24BDAC7A8](v22);
  v9[9] = (char *)&a9 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[38] = v19;
  MEMORY[0x24BDAC7A8](v23);
  v9[17] = (char *)&a9 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10BA0);
  v9[34] = v26;
  MEMORY[0x24BDAC7A8](v26);
  v9[32] = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10CA8);
  v9[27] = v28;
  MEMORY[0x24BDAC7A8](v28);
  v9[33] = (char *)&a9 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10B38);
  MEMORY[0x24BDAC7A8](v30);
  v9[37] = (char *)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[42] = v32;
  v9[60] = v20;
  v33 = sub_23C0E418C();
  v9[46] = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  v9[45] = (char *)&a9 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10B90);
  v9[29] = v35;
  MEMORY[0x24BDAC7A8](v35);
  v9[26] = (char *)&a9 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_23C0AF690();
  v38 = sub_23C0AF4A0();
  v39 = sub_23C0C5798();
  v40 = sub_23C0C57DC();
  v9[48] = v11;
  v9[49] = v10;
  *(_QWORD *)(v14 - 240) = v10;
  *(_QWORD *)(v14 - 232) = &type metadata for Modality;
  v9[35] = v12;
  *(_QWORD *)(v14 - 224) = v12;
  *(_QWORD *)(v14 - 216) = v11;
  *(_QWORD *)(v14 - 208) = &protocol witness table for Modality;
  *(_QWORD *)(v14 - 200) = &protocol witness table for Modality;
  v9[6] = v38;
  v9[7] = v37;
  *(_QWORD *)(v14 - 192) = v37;
  *(_QWORD *)(v14 - 184) = v38;
  v9[4] = v40;
  v9[5] = v39;
  *(_QWORD *)(v14 - 176) = v39;
  *(_QWORD *)(v14 - 168) = v40;
  v9[30] = v13;
  *(_QWORD *)(v14 - 160) = v13;
  type metadata accessor for FilterModalitySectionView();
}

uint64_t sub_23C0CA2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  uint64_t v36;

  v9[8] = *(_QWORD *)(a1 - 8);
  v14 = MEMORY[0x24BDAC7A8](a1);
  MEMORY[0x24BDAC7A8](v14);
  v9[22] = (char *)&a9 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10AF0);
  v9[62] = a1;
  v17 = sub_23C0E418C();
  v9[28] = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v9[25] = (char *)&a9 - v19;
  v9[23] = v16;
  MEMORY[0x24BDAC7A8](v18);
  v20 = sub_23C0E3ED4();
  v9[2] = *(_QWORD *)(v20 - 8);
  v9[3] = v20;
  MEMORY[0x24BDAC7A8](v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10B70);
  v9[21] = v21;
  MEMORY[0x24BDAC7A8](v21);
  v9[19] = (char *)&a9 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10CB0);
  v9[18] = v23;
  MEMORY[0x24BDAC7A8](v23);
  v9[20] = (char *)&a9 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10AE8);
  MEMORY[0x24BDAC7A8](v25);
  v9[24] = (char *)&a9 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[41] = v27;
  v9[58] = v17;
  v28 = sub_23C0E418C();
  v9[44] = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v9[43] = (char *)&a9 - v29;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  MEMORY[0x24BDAC7A8](v30);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10B60);
  MEMORY[0x24BDAC7A8](v31);
  v9[55] = v28;
  v9[59] = v11;
  v32 = sub_23C0E418C();
  v9[56] = *(_QWORD *)(v32 - 8);
  v9[57] = v32;
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&a9 - v33;
  v35 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)(v12 - 144) = *(_OWORD *)v10;
  *(_OWORD *)(v12 - 128) = v35;
  *(_QWORD *)(v12 - 112) = *(_QWORD *)(v10 + 32);
  v36 = *(unsigned __int8 *)(v9[47] + *(int *)(type metadata accessor for FilterSectionDescriptor() + 24) + 16);
  v9[52] = v34;
  return ((uint64_t (*)(void))((char *)sub_23C0CA5F8 + 4 * word_23C0EBB60[v36]))();
}

uint64_t sub_23C0CA5F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (**v23)(uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v10 = v1 + *(int *)(a1 + 20);
  v2[47] = v3;
  sub_23C068360(v10, v7, &qword_256B0F048);
  v11 = *(_OWORD *)(v8 - 128);
  *(_OWORD *)(v8 - 240) = *(_OWORD *)(v8 - 144);
  *(_OWORD *)(v8 - 224) = v11;
  *(_QWORD *)(v8 - 208) = *(_QWORD *)(v8 - 112);
  v12 = swift_allocObject();
  v13 = v2[49];
  v14 = v5;
  v15 = v2[48];
  *(_QWORD *)(v12 + 16) = v13;
  *(_QWORD *)(v12 + 24) = v15;
  v16 = *(_OWORD *)(v8 - 128);
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v8 - 144);
  *(_OWORD *)(v12 + 48) = v16;
  *(_QWORD *)(v12 + 64) = *(_QWORD *)(v8 - 112);
  sub_23C0C72D0(v8 - 240);
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v13;
  *(_QWORD *)(v17 + 24) = v15;
  v18 = *(_OWORD *)(v8 - 128);
  *(_OWORD *)(v17 + 32) = *(_OWORD *)(v8 - 144);
  *(_OWORD *)(v17 + 48) = v18;
  v19 = v2[50];
  *(_QWORD *)(v17 + 64) = *(_QWORD *)(v8 - 112);
  *(_QWORD *)(v17 + 72) = v19;
  *(_QWORD *)(v17 + 80) = v2[54];
  sub_23C06E7B4(v7, v6, &qword_256B0F048);
  v20 = (_QWORD *)(v6 + v4[23]);
  v21 = v2[53];
  *v20 = v2[51];
  v20[1] = v21;
  *(_QWORD *)(v6 + v4[24]) = v9;
  v22 = (_QWORD *)(v6 + v4[25]);
  *v22 = sub_23C0CD95C;
  v22[1] = v12;
  *(_QWORD *)(v6 + v4[27]) = v14;
  v23 = (uint64_t (**)(uint64_t, uint64_t))(v6 + v4[26]);
  *v23 = sub_23C0CD6CC;
  v23[1] = (uint64_t (*)(uint64_t, uint64_t))v17;
  sub_23C068360(v6, v2[20], &qword_256B10B60);
  swift_storeEnumTagMultiPayload();
  sub_23C08FCE0(v14, v2[47], 0);
  swift_bridgeObjectRetain();
  sub_23C0C72D0(v8 - 144);
  sub_23C06E774(&qword_256B10B58, &qword_256B10B60, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  sub_23C06E774(&qword_256B10B68, &qword_256B10B70, (uint64_t)&protocol conformance descriptor for FilterDurationSectionView<A, B>);
  swift_retain();
  v24 = v2[24];
  sub_23C0E4180();
  v25 = sub_23C0C5910();
  v26 = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v27 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, v2[62]);
  v2[70] = v26;
  v2[71] = v27;
  v28 = MEMORY[0x24BDEF3E0];
  v29 = v2[58];
  v30 = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v29, v2 + 70);
  v31 = v2[43];
  sub_23C0DEAB4(v24, v2[41]);
  sub_23C06E834(v24, &qword_256B10AE8);
  v2[68] = v25;
  v2[69] = v30;
  v32 = v2[55];
  MEMORY[0x242616E9C](v28, v32, v2 + 68);
  v33 = sub_23C0C59AC();
  v34 = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v35 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, v2[63]);
  v2[66] = v34;
  v36 = v29;
  v2[67] = v35;
  v37 = v2[60];
  v38 = MEMORY[0x242616E9C](v28, v37, v2 + 66);
  v2[64] = v33;
  v2[65] = v38;
  v39 = v2[59];
  MEMORY[0x242616E9C](v28, v39, v2 + 64);
  v40 = v2[52];
  sub_23C0DEAB4(v31, v32);
  (*(void (**)(uint64_t, uint64_t))(v2[44] + 8))(v31, v32);
  v41 = v6;
  v42 = v2[62];
  sub_23C06E834(v41, &qword_256B10B60);
  v43 = sub_23C0C5910();
  v44 = sub_23C06E774(&qword_256B10B78, &qword_256B10AF0, (uint64_t)&protocol conformance descriptor for FilterStandardSectionView<A, B>);
  v45 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterModalitySectionView<A, B, C>, v42);
  v2[128] = v44;
  v2[129] = v45;
  v46 = MEMORY[0x24BDEF3E0];
  v47 = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v36, v2 + 128);
  v2[126] = v43;
  v2[127] = v47;
  v48 = MEMORY[0x242616E9C](v46, v32, v2 + 126);
  v49 = sub_23C0C59AC();
  v50 = sub_23C06E774(&qword_256B10BA8, &qword_256B10B40, (uint64_t)&protocol conformance descriptor for FilterThemeSectionView<A, B>);
  v51 = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterTrainerSectionView<A, B, C>, v2[63]);
  v2[124] = v50;
  v2[125] = v51;
  v52 = MEMORY[0x242616E9C](v46, v37, v2 + 124);
  v2[122] = v49;
  v2[123] = v52;
  v53 = MEMORY[0x242616E9C](v46, v39, v2 + 122);
  v2[120] = v48;
  v2[121] = v53;
  v54 = v46;
  v55 = v2[57];
  MEMORY[0x242616E9C](v54, v55, v2 + 120);
  sub_23C06B980(v40, v55, v2[61]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2[56] + 8))(v40, v55);
}

uint64_t sub_23C0CC0F0()
{
  return sub_23C0CC108((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0C8D44);
}

uint64_t sub_23C0CC0FC()
{
  return sub_23C0CC108((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0C91EC);
}

uint64_t sub_23C0CC108(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[4], v1[5], v1[6], v1[2], v1[3]);
}

uint64_t sub_23C0CC11C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;

  v6 = v5;
  v34 = a5;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10B30);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10B20);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10AF8);
  MEMORY[0x24BDAC7A8](v17);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_OWORD *)(v6 + 16);
  v35[0] = *(_OWORD *)v6;
  v35[1] = v20;
  v36 = *(_QWORD *)(v6 + 32);
  *(_QWORD *)v13 = sub_23C0E4114();
  *((_QWORD *)v13 + 1) = 0;
  v13[16] = 1;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10CD8);
  sub_23C0CC99C(a1, a2, a3, (uint64_t)v35, *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), (uint64_t)&v13[*(int *)(v21 + 44)]);
  sub_23C0E4684();
  sub_23C0C4734(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1);
  sub_23C06E834((uint64_t)v13, &qword_256B10B30);
  LOBYTE(v13) = sub_23C0E4300();
  v22 = sub_23C0E4318();
  sub_23C0E4318();
  if (sub_23C0E4318() != v13)
    v22 = sub_23C0E4318();
  sub_23C0E3F7C();
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;
  sub_23C068360((uint64_t)v16, (uint64_t)v19, &qword_256B10B20);
  v31 = &v19[*(int *)(v17 + 36)];
  *v31 = v22;
  *((_QWORD *)v31 + 1) = v24;
  *((_QWORD *)v31 + 2) = v26;
  *((_QWORD *)v31 + 3) = v28;
  *((_QWORD *)v31 + 4) = v30;
  v31[40] = 0;
  sub_23C06E834((uint64_t)v16, &qword_256B10B20);
  return sub_23C06E7B4((uint64_t)v19, v34, &qword_256B10AF8);
}

void sub_23C0CC374()
{
  sub_23C0CD844();
  sub_23C0CD888();
  sub_23C0CD8CC();
  sub_23C0CD910();
  sub_23C0CD6D8();
}

void sub_23C0CC438()
{
  sub_23C099D08();
  sub_23C099C3C();
  sub_23C0CDA6C();
  sub_23C0CDAB0();
  sub_23C0CD6D8();
}

void sub_23C0CC4F4()
{
  sub_23C0CDAFC();
  sub_23C0CDB40();
  sub_23C0CDB84();
  sub_23C0CDBC8();
  sub_23C0CD6D8();
}

void sub_23C0CC5B8()
{
  sub_23C0AF690();
  sub_23C0AF4A0();
  sub_23C0C5798();
  sub_23C0C57DC();
  sub_23C0CD6D8();
}

void sub_23C0CC67C()
{
  sub_23C0CDC1C();
  sub_23C0CDC60();
  sub_23C0CDCA4();
  sub_23C0CDCE8();
  sub_23C0CD6D8();
}

void sub_23C0CC740()
{
  sub_23C0CDD34();
  sub_23C0CDD78();
  sub_23C0CDDBC();
  sub_23C0CDE00();
  sub_23C0CD6D8();
}

void sub_23C0CC80C()
{
  sub_23C0C11D0();
  sub_23C0C0D1C();
  sub_23C0CDE4C();
  sub_23C0CDE90();
  sub_23C0CD6D8();
}

void sub_23C0CC8D0()
{
  sub_23C08FF40();
  sub_23C08FF84();
  sub_23C08FFC8();
  sub_23C09000C();
  sub_23C0CD6D8();
}

uint64_t sub_23C0CC99C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t v99;

  v81 = a5;
  v82 = a6;
  v88 = a3;
  v89 = a1;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10CE0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v90 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v67 - v13;
  v15 = sub_23C0E4144();
  v79 = *(_QWORD *)(v15 - 8);
  v80 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v78 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10CE8);
  v76 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  v74 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10CF0);
  v85 = *(_QWORD *)(v18 - 8);
  v86 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v75 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  MEMORY[0x24BDAC7A8](v20);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_23C0E3EB0();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v67 - v28;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10CF8);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v87 = (char *)&v67 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v31);
  v84 = (uint64_t)&v67 - v33;
  sub_23C068360(v89, (uint64_t)v22, &qword_256B0F048);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23);
  v83 = a2;
  if (v34 == 1)
  {
    sub_23C06E834((uint64_t)v22, &qword_256B0F048);
    v35 = 1;
    v37 = (uint64_t)v87;
    v36 = v88;
    v38 = v84;
  }
  else
  {
    v39 = *(void (**)(char *, char *, uint64_t))(v24 + 32);
    v71 = v29;
    v39(v29, v22, v23);
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v27, v29, v23);
    v40 = sub_23C0E43C0();
    v42 = v41;
    v68 = v41;
    v44 = v43;
    v70 = v43;
    v89 = a7;
    v46 = v45 & 1;
    KeyPath = swift_getKeyPath();
    v69 = KeyPath;
    v48 = sub_23C0E436C();
    v72 = a4;
    v49 = v48;
    v50 = swift_getKeyPath();
    v73 = v14;
    v91 = v40;
    v92 = v42;
    v93 = v46;
    v94 = v44;
    v95 = KeyPath;
    v96 = 1;
    v97 = 0;
    v98 = v50;
    v99 = v49;
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10D08);
    v52 = sub_23C0CD9E8();
    v53 = v74;
    sub_23C0E44C8();
    v54 = v46;
    a7 = v89;
    sub_23C06DBB0(v40, v68, v54);
    a4 = v72;
    swift_release();
    v14 = v73;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    v55 = v78;
    sub_23C0E4138();
    v91 = v51;
    v92 = v52;
    swift_getOpaqueTypeConformance2();
    v56 = (uint64_t)v75;
    v57 = v77;
    sub_23C0E44A4();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v55, v80);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v53, v57);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v71, v23);
    v38 = v84;
    sub_23C06E7B4(v56, v84, &qword_256B10CF0);
    v35 = 0;
    v37 = (uint64_t)v87;
    v36 = v88;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v85 + 56))(v38, v35, 1, v86);
  if (v36)
  {
    v58 = swift_allocObject();
    v59 = v82;
    *(_QWORD *)(v58 + 16) = v81;
    *(_QWORD *)(v58 + 24) = v59;
    v60 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)(v58 + 32) = *(_OWORD *)a4;
    *(_OWORD *)(v58 + 48) = v60;
    *(_QWORD *)(v58 + 64) = *(_QWORD *)(a4 + 32);
    MEMORY[0x24BDAC7A8](v58);
    *(&v67 - 2) = v83;
    *(&v67 - 1) = v36;
    sub_23C0C72D0(a4);
    sub_23C0E45D0();
    v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10C78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v14, 0, 1, v61);
  }
  else
  {
    v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10C78);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v14, 1, 1, v62);
  }
  sub_23C068360(v38, v37, &qword_256B10CF8);
  v63 = v90;
  sub_23C068360((uint64_t)v14, v90, &qword_256B10CE0);
  sub_23C068360(v37, a7, &qword_256B10CF8);
  v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10D00);
  v65 = a7 + *(int *)(v64 + 48);
  *(_QWORD *)v65 = 0x4014000000000000;
  *(_BYTE *)(v65 + 8) = 0;
  sub_23C068360(v63, a7 + *(int *)(v64 + 64), &qword_256B10CE0);
  sub_23C06E834((uint64_t)v14, &qword_256B10CE0);
  sub_23C06E834(v38, &qword_256B10CF8);
  sub_23C06E834(v63, &qword_256B10CE0);
  return sub_23C06E834(v37, &qword_256B10CF8);
}

uint64_t sub_23C0CCFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;

  v6 = type metadata accessor for FilterAction();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v9;
  v13 = *(_QWORD *)(a1 + 32);
  type metadata accessor for FilterView(0, a2, a3, v10);
  sub_23C0C48F0();
  swift_storeEnumTagMultiPayload();
  sub_23C0E4708();
  swift_release();
  return sub_23C08FC60((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for FilterAction);
}

uint64_t sub_23C0CD0CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  sub_23C06DB6C();
  swift_bridgeObjectRetain();
  result = sub_23C0E43CC();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_QWORD *)(a1 + 24) = v5;
  return result;
}

uint64_t sub_23C0CD134@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23C0E40B4();
  *a1 = result;
  return result;
}

uint64_t sub_23C0CD15C()
{
  swift_retain();
  return sub_23C0E40C0();
}

size_t sub_23C0CD184(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t result;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;

  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10CA0);
  v2 = *(_QWORD *)(v49 - 8);
  v3 = MEMORY[0x24BDAC7A8](v49);
  v48 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v47 = (_QWORD *)((char *)v41 - v6);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v41 - v7;
  v9 = *(unsigned __int8 *)(v2 + 80);
  v10 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v46 = v10;
  v41[1] = a1;
  if (v10)
  {
    v44 = (v9 + 32) & ~v9;
    v12 = MEMORY[0x24BEE4AF8] + v44;
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(type metadata accessor for FilterSectionDescriptor() - 8);
    v16 = a1 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v45 = *(_QWORD *)(v15 + 72);
    v42 = v2;
    v43 = v9 | 7;
    v17 = v11;
    while (1)
    {
      v19 = v2;
      v20 = v49;
      v21 = (uint64_t)&v48[*(int *)(v49 + 48)];
      sub_23C09E828(v16, v21);
      v22 = (uint64_t)v47;
      v23 = (uint64_t)v47 + *(int *)(v20 + 48);
      *v47 = v13;
      sub_23C0CDF98(v21, v23);
      result = sub_23C06E7B4(v22, (uint64_t)v8, &qword_256B10CA0);
      if (v14)
      {
        v11 = v17;
        v2 = v19;
        v18 = __OFSUB__(v14--, 1);
        if (v18)
          goto LABEL_27;
      }
      else
      {
        v25 = v17[3];
        if ((uint64_t)((v25 >> 1) + 0x4000000000000000) < 0)
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
LABEL_36:
          __break(1u);
          return result;
        }
        v26 = v25 & 0xFFFFFFFFFFFFFFFELL;
        if (v26 <= 1)
          v27 = 1;
        else
          v27 = v26;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256B10D98);
        v28 = *(_QWORD *)(v19 + 72);
        v29 = v44;
        v11 = (_QWORD *)swift_allocObject();
        result = _swift_stdlib_malloc_size(v11);
        if (!v28)
          goto LABEL_34;
        v30 = result - v29;
        if (result - v29 == 0x8000000000000000 && v28 == -1)
          goto LABEL_35;
        v32 = v30 / v28;
        v11[2] = v27;
        v11[3] = 2 * (v30 / v28);
        v33 = (char *)v11 + v29;
        v34 = v17[3] >> 1;
        v35 = v34 * v28;
        if (v17[2])
        {
          if (v11 < v17 || v33 >= (char *)v17 + v44 + v35)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v11 != v17)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          v17[2] = 0;
        }
        v12 = (uint64_t)&v33[v35];
        v37 = (v32 & 0x7FFFFFFFFFFFFFFFLL) - v34;
        swift_release();
        v2 = v42;
        v18 = __OFSUB__(v37, 1);
        v14 = v37 - 1;
        if (v18)
        {
LABEL_27:
          __break(1u);
          break;
        }
      }
      ++v13;
      sub_23C06E7B4((uint64_t)v8, v12, &qword_256B10CA0);
      v12 += *(_QWORD *)(v2 + 72);
      v16 += v45;
      v17 = v11;
      if (v46 == v13)
        goto LABEL_29;
    }
  }
  v14 = 0;
LABEL_29:
  result = swift_bridgeObjectRelease();
  v38 = v11[3];
  if (v38 >= 2)
  {
    v39 = v38 >> 1;
    v18 = __OFSUB__(v39, v14);
    v40 = v39 - v14;
    if (v18)
      goto LABEL_36;
    v11[2] = v40;
  }
  return (size_t)v11;
}

uint64_t sub_23C0CD47C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23C0CD488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_23C0E3FE8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  sub_23C0C5AC4();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_23C0CD508()
{
  sub_23C0E3FE8();
  sub_23C0C97E0();
}

uint64_t sub_23C0CD574()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C0CD598(char *a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t, char *);
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t (**)(uint64_t, char *))(v1 + 32);
  v4 = *(_QWORD *)a1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10CA0);
  return v3(v4, &a1[*(int *)(v5 + 48)]);
}

uint64_t sub_23C0CD5F0()
{
  return objectdestroy_3Tm_0();
}

uint64_t sub_23C0CD5F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_23C0C9DE4(a1, a2, a3, (__int128 *)(v3 + 32), *(_QWORD *)(v3 + 72), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_23C0CD60C(uint64_t a1, uint64_t a2)
{
  return sub_23C0CD658(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0CC8D0);
}

uint64_t sub_23C0CD61C(uint64_t a1, uint64_t a2)
{
  return sub_23C0CD658(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0CC80C);
}

uint64_t sub_23C0CD62C(uint64_t a1, uint64_t a2)
{
  return sub_23C0CD658(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0CC740);
}

uint64_t sub_23C0CD63C(uint64_t a1, uint64_t a2)
{
  return sub_23C0CD658(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0CC67C);
}

uint64_t sub_23C0CD64C(uint64_t a1, uint64_t a2)
{
  return sub_23C0CD658(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0CC5B8);
}

uint64_t sub_23C0CD658(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2, v3 + 4, v3[9], v3[10], v3[2], v3[3]);
}

uint64_t sub_23C0CD670(uint64_t a1, uint64_t a2)
{
  return sub_23C0CD658(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0CC4F4);
}

void sub_23C0CD680()
{
  sub_23C0CC438();
}

uint64_t objectdestroy_30Tm()
{
  sub_23C0C5AC4();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C0CD6CC(uint64_t a1, uint64_t a2)
{
  return sub_23C0CD658(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0CC374);
}

void sub_23C0CD6D8()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0CD730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  _BYTE v21[96];

  v7 = *(_QWORD *)(a1 - 8);
  v8 = MEMORY[0x24BDAC7A8](a1);
  v10 = &v21[-v9];
  v11 = *(int *)(v8 + 68);
  v12 = *(unsigned __int8 *)(v1 + v11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(&v21[-v9], v1, a1);
  if (v12 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, a1);
  }
  else
  {
    v13 = v10[*(int *)(a1 + 68)];
    result = (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, a1);
    if (v13 != 2)
      return result;
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v3);
  v15 = *(_QWORD *)(v5 - 128);
  v16 = *(_QWORD *)(v5 - 120);
  v17 = *(_QWORD *)(v5 - 112);
  v18 = *(_QWORD *)(v5 - 104);
  v19 = *(_QWORD *)(v5 - 96);
  v20 = *(_BYTE *)(v5 - 88);
  *(_QWORD *)(v5 - 176) = v15;
  *(_QWORD *)(v5 - 168) = v16;
  *(_QWORD *)(v5 - 160) = v17;
  *(_QWORD *)(v5 - 152) = v18;
  *(_QWORD *)(v5 - 144) = v19;
  *(_BYTE *)(v5 - 136) = v20;
  *(_BYTE *)(v5 - 177) = *(_BYTE *)(v1 + v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 - 192))(v5 - 176, v5 - 177, v2);
  return sub_23C0682A8(v15, v16, v17, v18, v19, v20);
}

unint64_t sub_23C0CD844()
{
  unint64_t result;

  result = qword_256B10CB8;
  if (!qword_256B10CB8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for BodyFocus, &type metadata for BodyFocus);
    atomic_store(result, (unint64_t *)&qword_256B10CB8);
  }
  return result;
}

unint64_t sub_23C0CD888()
{
  unint64_t result;

  result = qword_256B10CC0;
  if (!qword_256B10CC0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for BodyFocus, &type metadata for BodyFocus);
    atomic_store(result, (unint64_t *)&qword_256B10CC0);
  }
  return result;
}

unint64_t sub_23C0CD8CC()
{
  unint64_t result;

  result = qword_256B10CC8;
  if (!qword_256B10CC8)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for BodyFocus, &type metadata for BodyFocus);
    atomic_store(result, (unint64_t *)&qword_256B10CC8);
  }
  return result;
}

unint64_t sub_23C0CD910()
{
  unint64_t result;

  result = qword_256B10CD0;
  if (!qword_256B10CD0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for BodyFocus, &type metadata for BodyFocus);
    atomic_store(result, (unint64_t *)&qword_256B10CD0);
  }
  return result;
}

uint64_t sub_23C0CD954()
{
  return objectdestroy_3Tm_0();
}

uint64_t sub_23C0CD960()
{
  return objectdestroy_3Tm_0();
}

uint64_t sub_23C0CD968()
{
  uint64_t v0;

  return sub_23C0CCFEC(v0 + 32, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C0CD988@<X0>(uint64_t a1@<X8>)
{
  return sub_23C0CD0CC(a1);
}

uint64_t sub_23C0CD998@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23C0E40B4();
  *a1 = result;
  return result;
}

uint64_t sub_23C0CD9C0()
{
  swift_retain();
  return sub_23C0E40C0();
}

unint64_t sub_23C0CD9E8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10D10;
  if (!qword_256B10D10)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10D08);
    v2[0] = sub_23C06DE2C();
    v2[1] = sub_23C06E774(&qword_256B0FC78, &qword_256B0FC80, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10D10);
  }
  return result;
}

unint64_t sub_23C0CDA6C()
{
  unint64_t result;

  result = qword_256B10D18;
  if (!qword_256B10D18)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Duration, &type metadata for Duration);
    atomic_store(result, (unint64_t *)&qword_256B10D18);
  }
  return result;
}

unint64_t sub_23C0CDAB0()
{
  unint64_t result;

  result = qword_256B10D20;
  if (!qword_256B10D20)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Duration, &type metadata for Duration);
    atomic_store(result, (unint64_t *)&qword_256B10D20);
  }
  return result;
}

uint64_t sub_23C0CDAF4()
{
  return objectdestroy_3Tm_0();
}

unint64_t sub_23C0CDAFC()
{
  unint64_t result;

  result = qword_256B10D28;
  if (!qword_256B10D28)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Equipment, &type metadata for Equipment);
    atomic_store(result, (unint64_t *)&qword_256B10D28);
  }
  return result;
}

unint64_t sub_23C0CDB40()
{
  unint64_t result;

  result = qword_256B10D30;
  if (!qword_256B10D30)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Equipment, &type metadata for Equipment);
    atomic_store(result, (unint64_t *)&qword_256B10D30);
  }
  return result;
}

unint64_t sub_23C0CDB84()
{
  unint64_t result;

  result = qword_256B10D38;
  if (!qword_256B10D38)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Equipment, &type metadata for Equipment);
    atomic_store(result, (unint64_t *)&qword_256B10D38);
  }
  return result;
}

unint64_t sub_23C0CDBC8()
{
  unint64_t result;

  result = qword_256B10D40;
  if (!qword_256B10D40)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Equipment, &type metadata for Equipment);
    atomic_store(result, (unint64_t *)&qword_256B10D40);
  }
  return result;
}

uint64_t sub_23C0CDC0C()
{
  return objectdestroy_3Tm_0();
}

uint64_t sub_23C0CDC14()
{
  return objectdestroy_3Tm_0();
}

unint64_t sub_23C0CDC1C()
{
  unint64_t result;

  result = qword_256B10D48;
  if (!qword_256B10D48)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for MusicGenre, &type metadata for MusicGenre);
    atomic_store(result, (unint64_t *)&qword_256B10D48);
  }
  return result;
}

unint64_t sub_23C0CDC60()
{
  unint64_t result;

  result = qword_256B10D50;
  if (!qword_256B10D50)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for MusicGenre, &type metadata for MusicGenre);
    atomic_store(result, (unint64_t *)&qword_256B10D50);
  }
  return result;
}

unint64_t sub_23C0CDCA4()
{
  unint64_t result;

  result = qword_256B10D58;
  if (!qword_256B10D58)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for MusicGenre, &type metadata for MusicGenre);
    atomic_store(result, (unint64_t *)&qword_256B10D58);
  }
  return result;
}

unint64_t sub_23C0CDCE8()
{
  unint64_t result;

  result = qword_256B10D60;
  if (!qword_256B10D60)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for MusicGenre, &type metadata for MusicGenre);
    atomic_store(result, (unint64_t *)&qword_256B10D60);
  }
  return result;
}

uint64_t sub_23C0CDD2C()
{
  return objectdestroy_3Tm_0();
}

unint64_t sub_23C0CDD34()
{
  unint64_t result;

  result = qword_256B10D68;
  if (!qword_256B10D68)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for SkillLevel, &type metadata for SkillLevel);
    atomic_store(result, (unint64_t *)&qword_256B10D68);
  }
  return result;
}

unint64_t sub_23C0CDD78()
{
  unint64_t result;

  result = qword_256B10D70;
  if (!qword_256B10D70)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for SkillLevel, &type metadata for SkillLevel);
    atomic_store(result, (unint64_t *)&qword_256B10D70);
  }
  return result;
}

unint64_t sub_23C0CDDBC()
{
  unint64_t result;

  result = qword_256B10D78;
  if (!qword_256B10D78)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for SkillLevel, &type metadata for SkillLevel);
    atomic_store(result, (unint64_t *)&qword_256B10D78);
  }
  return result;
}

unint64_t sub_23C0CDE00()
{
  unint64_t result;

  result = qword_256B10D80;
  if (!qword_256B10D80)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for SkillLevel, &type metadata for SkillLevel);
    atomic_store(result, (unint64_t *)&qword_256B10D80);
  }
  return result;
}

uint64_t sub_23C0CDE44()
{
  return objectdestroy_3Tm_0();
}

unint64_t sub_23C0CDE4C()
{
  unint64_t result;

  result = qword_256B10D88;
  if (!qword_256B10D88)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Theme, &type metadata for Theme);
    atomic_store(result, (unint64_t *)&qword_256B10D88);
  }
  return result;
}

unint64_t sub_23C0CDE90()
{
  unint64_t result;

  result = qword_256B10D90;
  if (!qword_256B10D90)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Theme, &type metadata for Theme);
    atomic_store(result, (unint64_t *)&qword_256B10D90);
  }
  return result;
}

uint64_t sub_23C0CDED4()
{
  return objectdestroy_3Tm_0();
}

uint64_t sub_23C0CDEDC()
{
  return objectdestroy_3Tm_0();
}

uint64_t objectdestroy_3Tm_0()
{
  sub_23C0C5AC4();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C0CDF20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;

  v10 = type metadata accessor for FilterView(0, *(_QWORD *)(v5 + 16), *(_QWORD *)(v5 + 24), a4);
  return sub_23C0CC11C(a1, a2, a3, v10, a5);
}

uint64_t sub_23C0CDF98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilterSectionDescriptor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x242616E18](a1, v6, a5);
}

uint64_t destroy for SelectedFilterItemButton()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for SelectedFilterItemButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

_QWORD *assignWithCopy for SelectedFilterItemButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SelectedFilterItemButton(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SelectedFilterItemButton()
{
  return &type metadata for SelectedFilterItemButton;
}

uint64_t sub_23C0CE138()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_23C0CE148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v62 = a2;
  v73 = a3;
  v4 = sub_23C0E4630();
  MEMORY[0x24BDAC7A8](v4);
  v71 = (char *)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E18);
  MEMORY[0x24BDAC7A8](v72);
  v70 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10DE8);
  MEMORY[0x24BDAC7A8](v67);
  v66 = (uint64_t *)((char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = sub_23C0E45A0();
  v74 = *(_QWORD *)(v64 - 8);
  MEMORY[0x24BDAC7A8](v64);
  v63 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10DD8);
  MEMORY[0x24BDAC7A8](v65);
  v10 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10DC8);
  MEMORY[0x24BDAC7A8](v69);
  v68 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23C0E457C();
  v12 = sub_23C0E43D8();
  v14 = v13;
  v16 = v15 & 1;
  v17 = sub_23C0E439C();
  v19 = v18;
  v21 = v20 & 1;
  sub_23C06DBB0(v12, v14, v16);
  swift_bridgeObjectRelease();
  v75 = a1;
  v76 = v62;
  sub_23C06DB6C();
  swift_bridgeObjectRetain();
  v22 = sub_23C0E43CC();
  v24 = v23;
  LOBYTE(a1) = v25 & 1;
  v60 = sub_23C0E439C();
  v59 = v26;
  v61 = v27;
  LOBYTE(v12) = v28 & 1;
  sub_23C06DBB0(v22, v24, a1);
  swift_bridgeObjectRelease();
  sub_23C06DBB0(v17, v19, v21);
  swift_bridgeObjectRelease();
  sub_23C0E4378();
  sub_23C0E433C();
  swift_release();
  v29 = v60;
  v30 = v59;
  v31 = sub_23C0E43B4();
  v33 = v32;
  v35 = v34;
  v62 = v36;
  swift_release();
  v37 = v35 & 1;
  sub_23C06DBB0(v29, v30, v12);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v39 = v74;
  v41 = v63;
  v40 = v64;
  (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v63, *MEMORY[0x24BDF40A8], v64);
  v42 = swift_getKeyPath();
  v43 = v66;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))((char *)v66 + *(int *)(v67 + 28), v41, v40);
  *v43 = v42;
  sub_23C068360((uint64_t)v43, (uint64_t)&v10[*(int *)(v65 + 36)], &qword_256B10DE8);
  *(_QWORD *)v10 = v31;
  *((_QWORD *)v10 + 1) = v33;
  v10[16] = v37;
  *((_QWORD *)v10 + 3) = v62;
  *((_QWORD *)v10 + 4) = KeyPath;
  *((_QWORD *)v10 + 5) = 1;
  v10[48] = 0;
  sub_23C06DE1C(v31, v33, v37);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23C06E834((uint64_t)v43, &qword_256B10DE8);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v41, v40);
  sub_23C06DBB0(v31, v33, v37);
  swift_release();
  swift_bridgeObjectRelease();
  LOBYTE(v42) = sub_23C0E42E8();
  v44 = v68;
  sub_23C068360((uint64_t)v10, v68, &qword_256B10DD8);
  v45 = v44 + *(int *)(v69 + 36);
  *(_BYTE *)v45 = v42;
  *(_OWORD *)(v45 + 8) = xmmword_23C0EBD10;
  *(_OWORD *)(v45 + 24) = xmmword_23C0EBD20;
  *(_BYTE *)(v45 + 40) = 0;
  sub_23C06E834((uint64_t)v10, &qword_256B10DD8);
  v46 = sub_23C0E4684();
  v48 = v47;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10DB0);
  v50 = v73;
  v51 = v73 + *(int *)(v49 + 36);
  v52 = *MEMORY[0x24BDEEB68];
  v53 = sub_23C0E4120();
  v54 = (uint64_t)v71;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 104))(v71, v52, v53);
  v55 = v70;
  sub_23C06E6F4(v54, v70);
  v56 = v72;
  *(_QWORD *)(v55 + *(int *)(v72 + 52)) = 2;
  *(_WORD *)(v55 + *(int *)(v56 + 56)) = 256;
  sub_23C06E738(v54);
  sub_23C06E7B4(v55, v51, &qword_256B10E18);
  v57 = (uint64_t *)(v51 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B10DF8) + 36));
  *v57 = v46;
  v57[1] = v48;
  return sub_23C06E7B4(v44, v50, &qword_256B10DC8);
}

uint64_t sub_23C0CE6CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21 = a1;
  v2 = sub_23C0E4054();
  v20 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10DA0);
  v19 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10DA8);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  v13 = v1[1];
  v15 = v1[2];
  v14 = v1[3];
  v22 = v12;
  v23 = v13;
  v24 = v15;
  v25 = v14;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10DB0);
  sub_23C0CE8DC();
  sub_23C0E45D0();
  sub_23C0E4048();
  sub_23C06E774(&qword_256B10E00, &qword_256B10DA0, MEMORY[0x24BDF43B0]);
  sub_23C0CEA50();
  sub_23C0E4414();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v5);
  LODWORD(v14) = sub_23C0E4204();
  v16 = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v21, v11, v8);
  *(_DWORD *)(v16 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B10E10) + 36)) = v14;
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_23C0CE8D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C0CE148(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_23C0CE8DC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10DB8;
  if (!qword_256B10DB8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10DB0);
    v2[0] = sub_23C0CE960();
    v2[1] = sub_23C06E774(&qword_256B10DF0, &qword_256B10DF8, MEMORY[0x24BDEF370]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10DB8);
  }
  return result;
}

unint64_t sub_23C0CE960()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10DC0;
  if (!qword_256B10DC0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10DC8);
    v2[0] = sub_23C0CE9CC();
    v2[1] = MEMORY[0x24BDECC60];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10DC0);
  }
  return result;
}

unint64_t sub_23C0CE9CC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B10DD0;
  if (!qword_256B10DD0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10DD8);
    v2[0] = sub_23C06DE2C();
    v2[1] = sub_23C06E774(&qword_256B10DE0, &qword_256B10DE8, MEMORY[0x24BDF1028]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10DD0);
  }
  return result;
}

unint64_t sub_23C0CEA50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256B10E08;
  if (!qword_256B10E08)
  {
    v1 = sub_23C0E4054();
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED858], v1);
    atomic_store(result, (unint64_t *)&qword_256B10E08);
  }
  return result;
}

uint64_t sub_23C0CEA98@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_23C0E40E4();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23C0CEAC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_23C0E40E4();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_23C0CEAF8()
{
  return sub_23C0E40F0();
}

uint64_t sub_23C0CEB24()
{
  return sub_23C0E40F0();
}

uint64_t sub_23C0CEB50()
{
  return sub_23C0E406C();
}

uint64_t sub_23C0CEB70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = sub_23C0E45A0();
  MEMORY[0x24BDAC7A8](v2);
  (*(void (**)(char *, uint64_t))(v4 + 16))((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  return sub_23C0E4078();
}

unint64_t sub_23C0CEBF4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_256B10E20;
  if (!qword_256B10E20)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10E10);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10DA0);
    v2[3] = sub_23C0E4054();
    v2[4] = sub_23C06E774(&qword_256B10E00, &qword_256B10DA0, MEMORY[0x24BDF43B0]);
    v2[5] = sub_23C0CEA50();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23C06E774(&qword_256B10E28, &qword_256B10E30, MEMORY[0x24BDF0710]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B10E20);
  }
  return result;
}

FitnessFiltering::FilterKind __swiftcall FilterItem.filterKind()()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 40);
}

uint64_t FilterOptions.bodyFocuses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterOptions.categories.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterOptions.durations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterOptions.equipment.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterOptions.filterConfigurations.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterOptions.modalities.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterOptions.musicGenres.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterOptions.skillLevels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterOptions.trainers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t FilterOptions.init(bodyFocuses:categories:durations:equipment:filterConfigurations:modalities:musicGenres:skillLevels:trainers:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t sub_23C0CED48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0CED88 + 4 * byte_23C0EBE00[a1]))(0x75636F4679646F62, 0xEB00000000736573);
}

uint64_t sub_23C0CED88()
{
  return 0x69726F6765746163;
}

uint64_t sub_23C0CEE10()
{
  return 0x6E6547636973756DLL;
}

uint64_t sub_23C0CEE30()
{
  return 0x76654C6C6C696B73;
}

uint64_t sub_23C0CEE48()
{
  return 0x7372656E69617274;
}

uint64_t sub_23C0CEE60()
{
  unsigned __int8 *v0;

  return sub_23C0CED48(*v0);
}

uint64_t sub_23C0CEE68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0D0328(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0CEE8C()
{
  sub_23C0D0060();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0CEEB4()
{
  sub_23C0D0060();
  return sub_23C0E4AF8();
}

uint64_t FilterOptions.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E38);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v25 = v1[2];
  v26 = v8;
  v10 = v1[3];
  v23 = v1[4];
  v24 = v10;
  v11 = v1[5];
  v21 = v1[6];
  v22 = v11;
  v12 = v1[7];
  v19 = v1[8];
  v20 = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0D0060();
  v13 = v4;
  sub_23C0E4AE0();
  v28 = v9;
  v27 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E48);
  sub_23C0AF528(&qword_256B10E50, &qword_256B10E48, (uint64_t (*)(void))sub_23C0CD888, MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    v14 = v24;
    v15 = v25;
    v16 = v23;
    v28 = v26;
    v27 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E58);
    sub_23C0AF528(&qword_256B10E60, &qword_256B10E58, (uint64_t (*)(void))sub_23C0A558C, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
    v28 = v15;
    v27 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E68);
    sub_23C0AF528(&qword_256B10E70, &qword_256B10E68, (uint64_t (*)(void))sub_23C099C3C, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
    v28 = v14;
    v27 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E78);
    sub_23C0AF528(&qword_256B10E80, &qword_256B10E78, (uint64_t (*)(void))sub_23C0CDB40, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
    v28 = v16;
    v27 = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E88);
    sub_23C0AF528(&qword_256B10E90, &qword_256B10E88, (uint64_t (*)(void))sub_23C0D00A4, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
    v28 = v22;
    v27 = 5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B10EA0);
    sub_23C0AF528(&qword_256B10EA8, &qword_256B10EA0, (uint64_t (*)(void))sub_23C0AF4A0, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
    v28 = v21;
    v27 = 6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B10EB0);
    sub_23C0AF528(&qword_256B10EB8, &qword_256B10EB0, (uint64_t (*)(void))sub_23C0CDC60, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
    v28 = v20;
    v27 = 7;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B10EC0);
    sub_23C0AF528(&qword_256B10EC8, &qword_256B10EC0, (uint64_t (*)(void))sub_23C0CDD78, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
    v28 = v19;
    v27 = 8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B10ED0);
    sub_23C0AF528(&qword_256B10ED8, &qword_256B10ED0, (uint64_t (*)(void))sub_23C08FF84, MEMORY[0x24BEE1700]);
    sub_23C0E4A44();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v13);
}

uint64_t FilterOptions.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10EE0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0D0060();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E48);
  v30 = 0;
  sub_23C0AF528(&qword_256B10EE8, &qword_256B10E48, (uint64_t (*)(void))sub_23C0CD844, MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v10 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E58);
  v30 = 1;
  sub_23C0AF528(&qword_256B10EF0, &qword_256B10E58, (uint64_t (*)(void))sub_23C0A6668, MEMORY[0x24BEE1720]);
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v29 = a2;
  v11 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E68);
  v30 = 2;
  sub_23C0AF528(&qword_256B10EF8, &qword_256B10E68, (uint64_t (*)(void))sub_23C099D08, MEMORY[0x24BEE1720]);
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v12 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E78);
  v30 = 3;
  sub_23C0AF528(&qword_256B10F00, &qword_256B10E78, (uint64_t (*)(void))sub_23C0CDAFC, MEMORY[0x24BEE1720]);
  v28 = v12;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v13 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10E88);
  v30 = 4;
  sub_23C0AF528(&qword_256B10F08, &qword_256B10E88, (uint64_t (*)(void))sub_23C0D00E8, MEMORY[0x24BEE1720]);
  v27 = v13;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v14 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10EA0);
  v30 = 5;
  sub_23C0AF528(&qword_256B10F18, &qword_256B10EA0, (uint64_t (*)(void))sub_23C0AF690, MEMORY[0x24BEE1720]);
  v26 = v14;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v15 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10EB0);
  v30 = 6;
  sub_23C0AF528(&qword_256B10F20, &qword_256B10EB0, (uint64_t (*)(void))sub_23C0CDC1C, MEMORY[0x24BEE1720]);
  swift_bridgeObjectRetain();
  v23 = 0;
  sub_23C0E49C0();
  v24 = v15;
  v16 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10EC0);
  v30 = 7;
  sub_23C0AF528(&qword_256B10F28, &qword_256B10EC0, (uint64_t (*)(void))sub_23C0CDD34, MEMORY[0x24BEE1720]);
  v25 = v16;
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  v17 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B10ED0);
  v30 = 8;
  sub_23C0AF528(&qword_256B10F30, &qword_256B10ED0, (uint64_t (*)(void))sub_23C08FF40, MEMORY[0x24BEE1720]);
  swift_bridgeObjectRetain();
  sub_23C0E49C0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v23 = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = v28;
  swift_bridgeObjectRetain();
  v19 = v27;
  swift_bridgeObjectRetain();
  v20 = v26;
  swift_bridgeObjectRetain();
  v21 = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v29;
  *v29 = v10;
  v22[1] = v11;
  v22[2] = v18;
  v22[3] = v19;
  v22[4] = v20;
  v22[5] = v21;
  v22[6] = v25;
  v22[7] = v17;
  v22[8] = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0CFCC0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return FilterOptions.init(from:)(a1, a2);
}

uint64_t sub_23C0CFCD4(_QWORD *a1)
{
  return FilterOptions.encode(to:)(a1);
}

uint64_t FilterOptions.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  v8 = v1[4];
  v7 = v1[5];
  v10 = v1[6];
  v9 = v1[7];
  v11 = v1[8];
  swift_bridgeObjectRetain();
  sub_23C066B78((uint64_t)a1, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C067348((uint64_t)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C067178((uint64_t)a1, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C066B78((uint64_t)a1, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C066E70(a1, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C066B7C((uint64_t)a1, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C066B78((uint64_t)a1, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0668AC(a1, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0668AC(a1, v11);
  return swift_bridgeObjectRelease();
}

uint64_t FilterOptions.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _QWORD v5[19];

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&v5[9] = *(_OWORD *)v0;
  *(_OWORD *)&v5[11] = v2;
  v3 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)&v5[13] = *(_OWORD *)(v0 + 32);
  *(_OWORD *)&v5[15] = v3;
  v5[17] = v1;
  sub_23C0E4A98();
  FilterOptions.hash(into:)((__int128 *)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0CFE88()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _QWORD v5[19];

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&v5[9] = *(_OWORD *)v0;
  *(_OWORD *)&v5[11] = v2;
  v3 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)&v5[13] = *(_OWORD *)(v0 + 32);
  *(_OWORD *)&v5[15] = v3;
  v5[17] = v1;
  sub_23C0E4A98();
  FilterOptions.hash(into:)((__int128 *)v5);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0CFEE4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  _QWORD v5[19];

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)&v5[9] = *(_OWORD *)v0;
  *(_OWORD *)&v5[11] = v2;
  v3 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)&v5[13] = *(_OWORD *)(v0 + 32);
  *(_OWORD *)&v5[15] = v3;
  v5[17] = v1;
  sub_23C0E4A98();
  FilterOptions.hash(into:)((__int128 *)v5);
  return sub_23C0E4AC8();
}

uint64_t _s16FitnessFiltering13FilterOptionsV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = a1[1];
  v4 = a1[2];
  v3 = a1[3];
  v6 = a1[4];
  v5 = a1[5];
  v16 = a1[7];
  v14 = a1[8];
  v7 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  v17 = a2[6];
  v18 = a1[6];
  v15 = a2[7];
  v13 = a2[8];
  if ((sub_23C073CE8(*a1, *a2) & 1) != 0
    && (sub_23C073CEC(v2, v7) & 1) != 0
    && (sub_23C074564(v4, v9) & 1) != 0
    && (sub_23C0747F8(v3, v8) & 1) != 0
    && (sub_23C074C68(v6, v11) & 1) != 0
    && (sub_23C075150(v5, v10) & 1) != 0
    && (sub_23C073CE8(v18, v17) & 1) != 0
    && (sub_23C075670(v16, v15) & 1) != 0)
  {
    return sub_23C075B28(v14, v13);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_23C0D0060()
{
  unint64_t result;

  result = qword_256B10E40;
  if (!qword_256B10E40)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EBFD4, &type metadata for FilterOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10E40);
  }
  return result;
}

unint64_t sub_23C0D00A4()
{
  unint64_t result;

  result = qword_256B10E98;
  if (!qword_256B10E98)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterConfiguration, &type metadata for FilterConfiguration);
    atomic_store(result, (unint64_t *)&qword_256B10E98);
  }
  return result;
}

unint64_t sub_23C0D00E8()
{
  unint64_t result;

  result = qword_256B10F10;
  if (!qword_256B10F10)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterConfiguration, &type metadata for FilterConfiguration);
    atomic_store(result, (unint64_t *)&qword_256B10F10);
  }
  return result;
}

unint64_t sub_23C0D0130()
{
  unint64_t result;

  result = qword_256B10F38;
  if (!qword_256B10F38)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterOptions, &type metadata for FilterOptions);
    atomic_store(result, (unint64_t *)&qword_256B10F38);
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterOptions()
{
  return &type metadata for FilterOptions;
}

uint64_t storeEnumTagSinglePayload for FilterOptions.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_23C0D01D0 + 4 * byte_23C0EBE0E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_23C0D0204 + 4 * byte_23C0EBE09[v4]))();
}

uint64_t sub_23C0D0204(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D020C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0D0214);
  return result;
}

uint64_t sub_23C0D0220(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0D0228);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_23C0D022C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D0234(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterOptions.CodingKeys()
{
  return &type metadata for FilterOptions.CodingKeys;
}

unint64_t sub_23C0D0254()
{
  unint64_t result;

  result = qword_256B10F40;
  if (!qword_256B10F40)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EBFAC, &type metadata for FilterOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10F40);
  }
  return result;
}

unint64_t sub_23C0D029C()
{
  unint64_t result;

  result = qword_256B10F48;
  if (!qword_256B10F48)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EBF1C, &type metadata for FilterOptions.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B10F48);
  }
  return result;
}

unint64_t sub_23C0D02E4()
{
  unint64_t result;

  result = qword_256B10F50[0];
  if (!qword_256B10F50[0])
  {
    result = MEMORY[0x242616E9C](&unk_23C0EBF44, &type metadata for FilterOptions.CodingKeys);
    atomic_store(result, qword_256B10F50);
  }
  return result;
}

uint64_t sub_23C0D0328(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x75636F4679646F62 && a2 == 0xEB00000000736573 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69726F6765746163 && a2 == 0xEA00000000007365 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6E6F697461727564 && a2 == 0xE900000000000073 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E656D7069757165 && a2 == 0xE900000000000074 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000023C0EE410 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6974696C61646F6DLL && a2 == 0xEA00000000007365 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6E6547636973756DLL && a2 == 0xEB00000000736572 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x76654C6C6C696B73 && a2 == 0xEB00000000736C65 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7372656E69617274 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v5 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

void sub_23C0D070C(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_23C0E3ED4();
  MEMORY[0x24BDAC7A8](v3);
  v4 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v4);
  __asm { BR              X10 }
}

uint64_t sub_23C0D07B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  sub_23C0E472C();
  if (qword_256B0EF30 != -1)
    swift_once();
  v4 = (void *)qword_256B21860;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v0, v2, v1);
  v5 = v4;
  return sub_23C0E478C();
}

uint64_t Option.identifier.getter()
{
  uint64_t v1;

  sub_23C0E48E8();
  return v1;
}

uint64_t Option.id.getter()
{
  uint64_t v1;

  sub_23C0E48E8();
  return v1;
}

uint64_t Option.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Option.state.getter@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  *a2 = *(_BYTE *)(v2 + *(int *)(result + 68));
  return result;
}

BOOL sub_23C0D0C80(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_23C0D0C90()
{
  return sub_23C0E4AA4();
}

uint64_t sub_23C0D0CB4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23C0D0D9C()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0D0DE0(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6574617473;
  else
    return 0x746E65746E6F63;
}

BOOL sub_23C0D0E14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_23C0D0C80(*a1, *a2);
}

uint64_t sub_23C0D0E30()
{
  return sub_23C0D0D9C();
}

uint64_t sub_23C0D0E48()
{
  return sub_23C0D0C90();
}

uint64_t sub_23C0D0E60()
{
  sub_23C0E4A98();
  sub_23C0D0C90();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0D0EAC()
{
  char *v0;

  return sub_23C0D0DE0(*v0);
}

uint64_t sub_23C0D0EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0D0CB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0D0EF8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23C0D1C0C();
  *a1 = result;
  return result;
}

uint64_t sub_23C0D0F2C(uint64_t a1)
{
  MEMORY[0x242616E9C](&unk_23C0EC258, a1);
  return sub_23C0E4AEC();
}

uint64_t sub_23C0D0F60(uint64_t a1)
{
  MEMORY[0x242616E9C](&unk_23C0EC258, a1);
  return sub_23C0E4AF8();
}

uint64_t sub_23C0D0F94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = Option.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void Option.encode(to:)()
{
  type metadata accessor for Option.CodingKeys();
}

uint64_t sub_23C0D101C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  MEMORY[0x242616E9C](&unk_23C0EC258, a1);
  v4 = sub_23C0E4A50();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v11 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v8 = *(_QWORD *)(v3 - 168);
  sub_23C0E4AE0();
  *(_BYTE *)(v3 - 128) = 0;
  v9 = *(_QWORD *)(v3 - 136);
  sub_23C0E4A44();
  if (!v9)
  {
    *(_BYTE *)(v3 - 128) = *(_BYTE *)(v8 + *(int *)(v2 + 68));
    *(_BYTE *)(v3 - 65) = 1;
    sub_23C0927F0();
    sub_23C0E4A44();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void type metadata accessor for Option.CodingKeys()
{
  JUMPOUT(0x242616E18);
}

void Option.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[16];

  v10[0] = a3;
  v10[2] = *(_QWORD *)(a2 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v10[6] = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10[10] = v4;
  v10[11] = v5;
  v10[12] = v6;
  v10[13] = v7;
  v10[14] = v8;
  v10[15] = v9;
  type metadata accessor for Option.CodingKeys();
}

void sub_23C0D11E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v7 - 144) = MEMORY[0x242616E9C](&unk_23C0EC258, a1);
  v8 = sub_23C0E49D8();
  *(_QWORD *)(v7 - 168) = v8;
  *(_QWORD *)(v7 - 200) = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  *(_QWORD *)(v7 - 184) = v1;
  *(_QWORD *)(v7 - 176) = v5;
  *(_QWORD *)(v7 - 128) = v5;
  *(_QWORD *)(v7 - 120) = v3;
  *(_QWORD *)(v7 - 112) = v1;
  *(_QWORD *)(v7 - 104) = v6;
  *(_QWORD *)(v7 - 96) = v4;
  *(_QWORD *)(v7 - 88) = v2;
  type metadata accessor for Option();
}

uint64_t sub_23C0D125C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v7 = (char *)&v16 - v6;
  __swift_project_boxed_opaque_existential_1(v2, v2[3]);
  *(_QWORD *)(v3 - 152) = v1;
  v8 = *(_QWORD *)(v3 - 136);
  sub_23C0E4AD4();
  if (v8)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  *(_QWORD *)(v3 - 144) = v5;
  *(_QWORD *)(v3 - 136) = a1;
  v10 = *(_QWORD *)(v3 - 200);
  v9 = *(_QWORD *)(v3 - 192);
  *(_BYTE *)(v3 - 128) = 0;
  v11 = *(_QWORD *)(v3 - 168);
  v12 = *(_QWORD *)(v3 - 176);
  sub_23C0E49C0();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 32))(v7, *(_QWORD *)(v3 - 160), v12);
  *(_BYTE *)(v3 - 65) = 1;
  sub_23C093BB0();
  sub_23C0E49C0();
  (*(void (**)(_QWORD, uint64_t))(v10 + 8))(*(_QWORD *)(v3 - 152), v11);
  v14 = *(_QWORD *)(v3 - 144);
  v13 = *(_QWORD *)(v3 - 136);
  v7[*(int *)(v13 + 68)] = *(_BYTE *)(v3 - 128);
  (*(void (**)(_QWORD, char *, uint64_t))(v14 + 16))(*(_QWORD *)(v3 - 208), v7, v13);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v7, v13);
}

void type metadata accessor for Option()
{
  JUMPOUT(0x242616E18);
}

void sub_23C0D140C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  Option.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void sub_23C0D1430()
{
  Option.encode(to:)();
}

uint64_t Option.hash(into:)()
{
  sub_23C0E4714();
  return sub_23C0E4AA4();
}

uint64_t static Option.== infix(_:_:)()
{
  if ((sub_23C0E4720() & 1) != 0)
    type metadata accessor for Option();
  return 0;
}

uint64_t Option.hashValue.getter()
{
  sub_23C0E4A98();
  sub_23C0E4714();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0D1580()
{
  sub_23C0E4A98();
  Option.hash(into:)();
  return sub_23C0E4AC8();
}

void sub_23C0D15C0()
{
  JUMPOUT(0x242616E9CLL);
}

uint64_t sub_23C0D15D0()
{
  return static Option.== infix(_:_:)();
}

uint64_t sub_23C0D15E4()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23C0D15EC()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_23C0D1660(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 16))(a1, a2);
    *((_BYTE *)v4 + v6) = *((_BYTE *)a2 + v6);
  }
  else
  {
    v10 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t sub_23C0D16EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_23C0D16FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_23C0D1744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_23C0D178C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_23C0D17D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_BYTE *)(*(_QWORD *)(v5 + 64) + a1) = *(_BYTE *)(*(_QWORD *)(v5 + 64) + a2);
  return a1;
}

uint64_t sub_23C0D181C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xFD)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = v7 + 1;
  v10 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if (v5 >= 0xFD)
        return (*(uint64_t (**)(void))(v4 + 48))();
      v15 = *(unsigned __int8 *)(v7 + a1);
      if (v15 >= 3)
        return v15 - 2;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v7 == -1)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23C0D18E4 + 4 * byte_23C0EC030[(v9 - 1)]))();
}

void sub_23C0D1944(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xFDu)
    v6 = 253;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = v7 + 1;
  if (a3 > v6)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v6 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = 4u;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = 1u;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v6 < a2)
  {
    v10 = ~v6 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v7 != -1)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v7 + 1);
        if (v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if (v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X12 }
}

uint64_t sub_23C0D1B18()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23C0D1B20(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C0D1B6C + 4 * byte_23C0EC043[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C0D1BA0 + 4 * byte_23C0EC03E[v4]))();
}

uint64_t sub_23C0D1BA0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D1BA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0D1BB0);
  return result;
}

uint64_t sub_23C0D1BBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0D1BC4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C0D1BC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D1BD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void sub_23C0D1BDC()
{
  JUMPOUT(0x242616E9CLL);
}

void sub_23C0D1BEC()
{
  JUMPOUT(0x242616E9CLL);
}

void sub_23C0D1BFC()
{
  JUMPOUT(0x242616E9CLL);
}

uint64_t sub_23C0D1C0C()
{
  return 2;
}

void *static FilterSortMode.allCases.getter()
{
  return &unk_250CF9650;
}

uint64_t FilterSortMode.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_23C0D1C5C + 4 * byte_23C0EC2B0[a1]))(0xD000000000000013, 0x800000023C0ED550);
}

uint64_t sub_23C0D1C5C()
{
  return 0x656C655265746164;
}

uint64_t sub_23C0D1C7C()
{
  return 0x6E6F697461727564;
}

uint64_t sub_23C0D1C94()
{
  return 0x7974696C61646F6DLL;
}

uint64_t sub_23C0D1CB4()
{
  return 0x6E6547636973756DLL;
}

uint64_t sub_23C0D1CD8()
{
  return 1701736302;
}

uint64_t sub_23C0D1CE8()
{
  return 0x4E72656E69617274;
}

uint64_t sub_23C0D1D08()
{
  return 0x6D614E656D656874;
}

uint64_t sub_23C0D1D24(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = FilterSortMode.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == FilterSortMode.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_23C0E4A74();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23C0D1DAC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s16FitnessFiltering14FilterSortModeO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_23C0D1DD8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = FilterSortMode.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_23C0D1E00(_QWORD *a1@<X8>)
{
  *a1 = &unk_250CF9650;
}

uint64_t sub_23C0D1E10()
{
  sub_23C0D2160();
  return sub_23C0E47F8();
}

uint64_t sub_23C0D1E6C()
{
  sub_23C0D2160();
  return sub_23C0E47EC();
}

uint64_t sub_23C0D1EB8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23C0E4A98();
  FilterSortMode.rawValue.getter(v1);
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0D1F18()
{
  unsigned __int8 *v0;

  FilterSortMode.rawValue.getter(*v0);
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0D1F58()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_23C0E4A98();
  FilterSortMode.rawValue.getter(v1);
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

uint64_t _s16FitnessFiltering14FilterSortModeO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_23C0E4948();
  swift_bridgeObjectRelease();
  if (v0 >= 8)
    return 8;
  else
    return v0;
}

unint64_t sub_23C0D2000()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256B11058;
  if (!qword_256B11058)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B102D0);
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_256B11058);
  }
  return result;
}

unint64_t sub_23C0D2050()
{
  unint64_t result;

  result = qword_256B11060;
  if (!qword_256B11060)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSortMode, &type metadata for FilterSortMode);
    atomic_store(result, (unint64_t *)&qword_256B11060);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FilterSortMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_23C0D20E0 + 4 * byte_23C0EC2BD[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_23C0D2114 + 4 * byte_23C0EC2B8[v4]))();
}

uint64_t sub_23C0D2114(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D211C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0D2124);
  return result;
}

uint64_t sub_23C0D2130(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0D2138);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_23C0D213C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D2144(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterSortMode()
{
  return &type metadata for FilterSortMode;
}

unint64_t sub_23C0D2160()
{
  unint64_t result;

  result = qword_256B11068;
  if (!qword_256B11068)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSortMode, &type metadata for FilterSortMode);
    atomic_store(result, (unint64_t *)&qword_256B11068);
  }
  return result;
}

uint64_t Equipment.artworks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Equipment.iconName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Equipment.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Equipment.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Equipment.init(artworks:iconName:identifier:name:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t sub_23C0D2244()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0D2274 + 4 * byte_23C0EC400[*v0]))(0x736B726F77747261, 0xE800000000000000);
}

uint64_t sub_23C0D2274()
{
  return 0x656D614E6E6F6369;
}

uint64_t sub_23C0D2288()
{
  return 0x696669746E656469;
}

uint64_t sub_23C0D22A4()
{
  return 1701667182;
}

uint64_t sub_23C0D22B4()
{
  sub_23C0D24E0();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0D22DC()
{
  sub_23C0D24E0();
  return sub_23C0E4AF8();
}

uint64_t Equipment.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11070);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v13[5] = v1[2];
  v13[6] = v8;
  v10 = v1[3];
  v13[3] = v1[4];
  v13[4] = v10;
  v11 = v1[5];
  v13[1] = v1[6];
  v13[2] = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0D24E0();
  sub_23C0E4AE0();
  v18 = v9;
  v17 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  sub_23C0B31BC(&qword_256B0EF50, &qword_256B0EF58, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    v16 = 1;
    sub_23C0E49F0();
    v15 = 2;
    sub_23C0E4A08();
    v14 = 3;
    sub_23C0E4A08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23C0D24E0()
{
  unint64_t result;

  result = qword_256B11078;
  if (!qword_256B11078)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EC630, &type metadata for Equipment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11078);
  }
  return result;
}

uint64_t Equipment.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  uint64_t v33;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11080);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0D24E0();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  v32 = 0;
  sub_23C0B31BC(&qword_256B0EF68, &qword_256B0EF70, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v9 = v33;
  v31 = 1;
  swift_bridgeObjectRetain();
  v10 = sub_23C0E496C();
  v28 = v11;
  v26 = v10;
  v27 = v9;
  v30 = 2;
  swift_bridgeObjectRetain();
  v24 = sub_23C0E4984();
  v25 = v12;
  v29 = 3;
  swift_bridgeObjectRetain();
  v13 = sub_23C0E4984();
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18 = v13;
  v17(v8, v5);
  v19 = v27;
  swift_bridgeObjectRetain();
  v20 = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22 = v25;
  v21 = v26;
  *a2 = v19;
  a2[1] = v21;
  v23 = v24;
  a2[2] = v20;
  a2[3] = v23;
  a2[4] = v22;
  a2[5] = v18;
  a2[6] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0D2844@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return Equipment.init(from:)(a1, a2);
}

uint64_t sub_23C0D2858(_QWORD *a1)
{
  return Equipment.encode(to:)(a1);
}

uint64_t Equipment.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = v1[2];
  swift_bridgeObjectRetain();
  sub_23C065C58(a1, v3);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t Equipment.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v4[4];

  v1 = *v0;
  v2 = v0[2];
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  sub_23C065C58(v4, v1);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v2)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  return sub_23C0E4AC8();
}

unint64_t sub_23C0D2A54()
{
  unint64_t result;

  result = qword_256B11088;
  if (!qword_256B11088)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for Equipment, &type metadata for Equipment);
    atomic_store(result, (unint64_t *)&qword_256B11088);
  }
  return result;
}

ValueMetadata *type metadata accessor for Equipment()
{
  return &type metadata for Equipment;
}

uint64_t storeEnumTagSinglePayload for Equipment.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_23C0D2AF4 + 4 * byte_23C0EC409[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_23C0D2B28 + 4 * byte_23C0EC404[v4]))();
}

uint64_t sub_23C0D2B28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D2B30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0D2B38);
  return result;
}

uint64_t sub_23C0D2B44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0D2B4CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_23C0D2B50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D2B58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Equipment.CodingKeys()
{
  return &type metadata for Equipment.CodingKeys;
}

unint64_t sub_23C0D2B78()
{
  unint64_t result;

  result = qword_256B11090;
  if (!qword_256B11090)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EC608, &type metadata for Equipment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11090);
  }
  return result;
}

unint64_t sub_23C0D2BC0()
{
  unint64_t result;

  result = qword_256B11098;
  if (!qword_256B11098)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EC578, &type metadata for Equipment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11098);
  }
  return result;
}

unint64_t sub_23C0D2C08()
{
  unint64_t result;

  result = qword_256B110A0;
  if (!qword_256B110A0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EC5A0, &type metadata for Equipment.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B110A0);
  }
  return result;
}

unint64_t sub_23C0D2C50(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F518);
  v2 = (_QWORD *)sub_23C0E493C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_23C0D2E00(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t HKWorkoutActivityType.activityTypeSystemName.getter(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;

  v2 = 0x726568746FLL;
  v3 = sub_23C0D3038(qword_250CF9678);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B110A8);
  swift_arrayDestroy();
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = sub_23C0D2E64(a1);
    if ((v5 & 1) != 0)
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4);
      swift_bridgeObjectRetain();
    }
  }
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_23C0D2E00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23C0E4A98();
  sub_23C0E47A4();
  v4 = sub_23C0E4AC8();
  return sub_23C0D2EBC(a1, a2, v4);
}

unint64_t sub_23C0D2E64(uint64_t a1)
{
  uint64_t v2;

  sub_23C0E4A98();
  sub_23C0E4AA4();
  v2 = sub_23C0E4AC8();
  return sub_23C0D2F9C(a1, v2);
}

unint64_t sub_23C0D2EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23C0E4A74() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23C0E4A74() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_23C0D2F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_23C0D3038(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B110B0);
  v3 = (_QWORD *)sub_23C0E493C();
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  result = sub_23C0D2E64(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v9 = a1 + 9;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v4;
    v10 = (_QWORD *)(v3[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 3;
    v4 = *(v9 - 2);
    v5 = *(v9 - 1);
    v15 = *v9;
    swift_bridgeObjectRetain();
    result = sub_23C0D2E64(v4);
    v9 = v14;
    v6 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

void sub_23C0D3144(uint64_t a1, uint64_t a2)
{
  double v2;

  v2 = round((*(double (**)(void))(a2 + 8))() / 60.0);
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v2 >= 9.22337204e18)
LABEL_7:
    __break(1u);
}

uint64_t dispatch thunk of TimedFilterContent.seconds.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t SkillLevel.artworks.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t SkillLevel.iconName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SkillLevel.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SkillLevel.kind.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SkillLevel.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SkillLevel.init(artworks:iconName:identifier:kind:name:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10)
{
  *a9 = result;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  return result;
}

uint64_t sub_23C0D328C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23C0D32BC + 4 * byte_23C0EC6C0[*v0]))(0x736B726F77747261, 0xE800000000000000);
}

uint64_t sub_23C0D32BC()
{
  return 0x656D614E6E6F6369;
}

uint64_t sub_23C0D32D0()
{
  return 0x696669746E656469;
}

uint64_t sub_23C0D32EC()
{
  return 1684957547;
}

uint64_t sub_23C0D32FC()
{
  return 1701667182;
}

uint64_t sub_23C0D330C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0D3E54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0D3330()
{
  sub_23C0D3590();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0D3358()
{
  sub_23C0D3590();
  return sub_23C0E4AF8();
}

uint64_t SkillLevel.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B110B8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v8 = v1[1];
  v14[7] = v1[2];
  v14[8] = v8;
  v10 = v1[3];
  v14[5] = v1[4];
  v14[6] = v10;
  v11 = v1[5];
  v14[3] = v1[6];
  v14[4] = v11;
  v12 = v1[8];
  v14[1] = v1[7];
  v14[2] = v12;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0D3590();
  sub_23C0E4AE0();
  v20 = v9;
  v19 = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  sub_23C0B31BC(&qword_256B0EF50, &qword_256B0EF58, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1700]);
  sub_23C0E4A44();
  if (!v2)
  {
    v18 = 1;
    sub_23C0E49F0();
    v17 = 2;
    sub_23C0E4A08();
    v16 = 3;
    sub_23C0E49F0();
    v15 = 4;
    sub_23C0E4A08();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_23C0D3590()
{
  unint64_t result;

  result = qword_256B110C0;
  if (!qword_256B110C0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EC8F0, &type metadata for SkillLevel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B110C0);
  }
  return result;
}

uint64_t SkillLevel.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B110C8);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0D3590();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0EF48);
  v43 = 0;
  sub_23C0B31BC(&qword_256B0EF68, &qword_256B0EF70, (uint64_t)&protocol conformance descriptor for Artwork, MEMORY[0x24BEE1720]);
  sub_23C0E49C0();
  v9 = v44;
  v42 = 1;
  swift_bridgeObjectRetain();
  v10 = sub_23C0E496C();
  v38 = v11;
  v35 = v10;
  v37 = v9;
  v41 = 2;
  swift_bridgeObjectRetain();
  v34 = sub_23C0E4984();
  v40 = 3;
  v13 = v12;
  swift_bridgeObjectRetain();
  v14 = sub_23C0E496C();
  v36 = v13;
  v32 = v14;
  v33 = v15;
  v39 = 4;
  swift_bridgeObjectRetain();
  v16 = sub_23C0E4984();
  v17 = v37;
  v20 = v19;
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v31 = v16;
  v21(v8, v5);
  swift_bridgeObjectRetain();
  v22 = v17;
  v23 = v38;
  swift_bridgeObjectRetain();
  v24 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v35;
  *a2 = v22;
  a2[1] = v25;
  v27 = v33;
  v26 = v34;
  a2[2] = v23;
  a2[3] = v26;
  v28 = v32;
  a2[4] = v24;
  a2[5] = v28;
  v29 = v31;
  a2[6] = v27;
  a2[7] = v29;
  a2[8] = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0D39C0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SkillLevel.init(from:)(a1, a2);
}

uint64_t sub_23C0D39D4(_QWORD *a1)
{
  return SkillLevel.encode(to:)(a1);
}

uint64_t SkillLevel.hash(into:)(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = v1[2];
  v5 = v1[6];
  swift_bridgeObjectRetain();
  sub_23C065C58(a1, v3);
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v4)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  sub_23C0E4AB0();
  if (v5)
  {
    swift_bridgeObjectRetain();
    sub_23C0E47A4();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  return swift_bridgeObjectRelease();
}

uint64_t SkillLevel.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[4];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[7];
  v4 = v0[8];
  v7 = *v0;
  v8 = *(_OWORD *)(v0 + 1);
  v9 = v1;
  v10 = v2;
  v11 = *(_OWORD *)(v0 + 5);
  v12 = v3;
  v13 = v4;
  sub_23C0E4A98();
  SkillLevel.hash(into:)(v6);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0D3B88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[4];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[7];
  v4 = v0[8];
  v7 = *v0;
  v8 = *(_OWORD *)(v0 + 1);
  v9 = v1;
  v10 = v2;
  v11 = *(_OWORD *)(v0 + 5);
  v12 = v3;
  v13 = v4;
  sub_23C0E4A98();
  SkillLevel.hash(into:)(v6);
  return sub_23C0E4AC8();
}

uint64_t sub_23C0D3BF4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[4];
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = v0[3];
  v2 = v0[4];
  v3 = v0[7];
  v4 = v0[8];
  v7 = *v0;
  v8 = *(_OWORD *)(v0 + 1);
  v9 = v1;
  v10 = v2;
  v11 = *(_OWORD *)(v0 + 5);
  v12 = v3;
  v13 = v4;
  sub_23C0E4A98();
  SkillLevel.hash(into:)(v6);
  return sub_23C0E4AC8();
}

unint64_t sub_23C0D3C5C()
{
  unint64_t result;

  result = qword_256B110D0;
  if (!qword_256B110D0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for SkillLevel, &type metadata for SkillLevel);
    atomic_store(result, (unint64_t *)&qword_256B110D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for SkillLevel()
{
  return &type metadata for SkillLevel;
}

uint64_t storeEnumTagSinglePayload for SkillLevel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23C0D3CFC + 4 * byte_23C0EC6CA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23C0D3D30 + 4 * byte_23C0EC6C5[v4]))();
}

uint64_t sub_23C0D3D30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D3D38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0D3D40);
  return result;
}

uint64_t sub_23C0D3D4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0D3D54);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23C0D3D58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0D3D60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SkillLevel.CodingKeys()
{
  return &type metadata for SkillLevel.CodingKeys;
}

unint64_t sub_23C0D3D80()
{
  unint64_t result;

  result = qword_256B110D8;
  if (!qword_256B110D8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EC8C8, &type metadata for SkillLevel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B110D8);
  }
  return result;
}

unint64_t sub_23C0D3DC8()
{
  unint64_t result;

  result = qword_256B110E0;
  if (!qword_256B110E0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EC838, &type metadata for SkillLevel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B110E0);
  }
  return result;
}

unint64_t sub_23C0D3E10()
{
  unint64_t result;

  result = qword_256B110E8;
  if (!qword_256B110E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EC860, &type metadata for SkillLevel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B110E8);
  }
  return result;
}

uint64_t sub_23C0D3E54(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x736B726F77747261 && a2 == 0xE800000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D614E6E6F6369 && a2 == 0xE800000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1684957547 && a2 == 0xE400000000000000 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23C0D4060()
{
  return sub_23C0E3FAC();
}

void FilterDurationSectionView.init(attributedTitle:clearActionTitle:headerViewBuilder:locale:options:onOptionSelected:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_23C06E7B4(a1, a2, &qword_256B0F048);
  type metadata accessor for FilterDurationSectionView();
}

uint64_t sub_23C0D4118(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;

  v11 = (_QWORD *)(v8 + a1[23]);
  *v11 = v7;
  v11[1] = v6;
  v12 = (_QWORD *)(v8 + a1[24]);
  *v12 = v5;
  v12[1] = v4;
  v13 = v8 + a1[25];
  v14 = sub_23C0E3ED4();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v13, v3, v14);
  *(_QWORD *)(v8 + a1[27]) = v2;
  v16 = (_QWORD *)(v8 + a1[26]);
  *v16 = v1;
  v16[1] = v9;
  return result;
}

void type metadata accessor for FilterDurationSectionView()
{
  JUMPOUT(0x242616E18);
}

void FilterDurationSectionView.body.getter()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0D4230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[96];

  swift_getTupleTypeMetadata2();
  v3 = sub_23C0E481C();
  v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B110F0);
  v5 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v3);
  v6 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v2 - 136) = v3;
  *(_QWORD *)(v2 - 128) = v6;
  *(_QWORD *)(v2 - 120) = v4;
  *(_QWORD *)(v2 - 112) = v5;
  *(_QWORD *)(v2 - 104) = MEMORY[0x24BEE0D10];
  v7 = sub_23C0E4654();
  *(_QWORD *)(v2 - 144) = sub_23C0D461C();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v7, v2 - 144);
  v8 = sub_23C0E45F4();
  v9 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v8);
  *(_QWORD *)(v2 - 136) = v8;
  *(_QWORD *)(v2 - 128) = v9;
  MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v2 - 136) = v8;
  *(_QWORD *)(v2 - 128) = v9;
  swift_getOpaqueTypeConformance2();
  v10 = sub_23C0E3FA0();
  v11 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v10);
  *(_QWORD *)(v2 - 136) = v10;
  *(_QWORD *)(v2 - 128) = v11;
  v12 = MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF2FE0], 0);
  *(_QWORD *)(v2 - 136) = v10;
  *(_QWORD *)(v2 - 128) = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v2 - 136) = v12;
  *(_QWORD *)(v2 - 128) = OpaqueTypeConformance2;
  v14 = MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF29F8], 0);
  v15 = sub_23C0E42A0();
  *(_QWORD *)(v2 - 136) = v12;
  *(_QWORD *)(v2 - 128) = OpaqueTypeConformance2;
  v16 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v2 - 136) = v14;
  *(_QWORD *)(v2 - 128) = v15;
  v17 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v2 - 120) = v16;
  *(_QWORD *)(v2 - 112) = v17;
  MEMORY[0x242616E48](255, v2 - 136, MEMORY[0x24BDF3000], 0);
  sub_23C0E4024();
  sub_23C0E4024();
  swift_getTupleTypeMetadata2();
  v18 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v18);
  v19 = sub_23C0E4618();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v22 = &v33[-v21];
  v23 = sub_23C0E4024();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v26 = &v33[-v25];
  sub_23C0E415C();
  *(_QWORD *)(v2 - 240) = *(_QWORD *)(v2 - 320);
  *(_QWORD *)(v2 - 232) = v0;
  v27 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v2 - 224) = *(_QWORD *)(v2 - 312);
  *(_QWORD *)(v2 - 216) = v27;
  *(_QWORD *)(v2 - 208) = *(_QWORD *)(v2 - 280);
  *(_QWORD *)(v2 - 200) = *(_QWORD *)(v2 - 288);
  *(_QWORD *)(v2 - 192) = *(_QWORD *)(v2 - 296);
  *(_QWORD *)(v2 - 184) = *(_QWORD *)(v2 - 304);
  *(_QWORD *)(v2 - 176) = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v2 - 168) = *(_QWORD *)(v2 - 272);
  sub_23C0E460C();
  v28 = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v19);
  sub_23C0E4534();
  (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v22, v19);
  v29 = sub_23C0E42DC();
  v30 = MEMORY[0x24BDEDB80];
  *(_QWORD *)(v2 - 160) = v28;
  *(_QWORD *)(v2 - 152) = v30;
  v31 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v23, v2 - 160);
  sub_23C06B9FC(v29, 0x4034000000000000, 0, v23, v31);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v24 + 8))(v26, v23);
}

unint64_t sub_23C0D461C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[6];

  result = qword_256B110F8;
  if (!qword_256B110F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B110F0);
    v2[2] = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B11100);
    v2[3] = &type metadata for FilterButtonStyle;
    v2[4] = sub_23C06E774(qword_256B11108, &qword_256B11100, MEMORY[0x24BDF43B0]);
    v2[5] = sub_23C06DDD8();
    v2[0] = swift_getOpaqueTypeConformance2();
    v2[1] = sub_23C06E774(&qword_256B0F158, &qword_256B0F160, MEMORY[0x24BDF1248]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B110F8);
  }
  return result;
}

void sub_23C0D46FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[35];
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v21[8] = a7;
  v21[7] = a6;
  v21[6] = a5;
  v21[12] = a4;
  v30 = a2;
  v32 = a1;
  v29 = a8;
  v33 = a10;
  v31 = a9;
  v15 = sub_23C0E4288();
  MEMORY[0x24BDAC7A8](v15);
  v27 = (char *)v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23C0E42A0();
  v28 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v26 = (char *)v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_23C0E4270();
  v24 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v23 = (char *)v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_23C0E41A4();
  v21[33] = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v21[11] = (char *)v21 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = a2;
  v35 = a3;
  v21[1] = a3;
  v36 = a5;
  v37 = a6;
  v38 = a7;
  v39 = a9;
  type metadata accessor for Option();
}

void sub_23C0D48C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t OpaqueTypeConformance2;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  swift_getTupleTypeMetadata2();
  v13 = sub_23C0E481C();
  v14 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B110F0);
  v15 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v13);
  v16 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v12 - 168) = v13;
  *(_QWORD *)(v12 - 160) = v16;
  *(_QWORD *)(v12 - 152) = v14;
  *(_QWORD *)(v12 - 144) = v15;
  *(_QWORD *)(v12 - 136) = MEMORY[0x24BEE0D10];
  v17 = sub_23C0E4654();
  *(_QWORD *)(v12 - 96) = sub_23C0D461C();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v17, v12 - 96);
  v18 = sub_23C0E45F4();
  v19 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v18);
  *(_QWORD *)(v12 - 168) = v18;
  *(_QWORD *)(v12 - 160) = v19;
  *(_QWORD *)(v12 - 704) = MEMORY[0x242616E48](255, v12 - 168, MEMORY[0x24BDF2D58], 0);
  *(_QWORD *)(v12 - 168) = v18;
  *(_QWORD *)(v12 - 160) = v19;
  *(_QWORD *)(v12 - 712) = swift_getOpaqueTypeConformance2();
  v20 = sub_23C0E3FA0();
  *(_QWORD *)(v12 - 664) = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  *(_QWORD *)(v12 - 720) = (char *)&a9 - v21;
  v22 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v20);
  *(_QWORD *)(v12 - 168) = v20;
  *(_QWORD *)(v12 - 160) = v22;
  v23 = MEMORY[0x242616E48](0, v12 - 168, MEMORY[0x24BDF2FE0], 0);
  *(_QWORD *)(v12 - 544) = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  *(_QWORD *)(v12 - 568) = (char *)&a9 - v24;
  *(_QWORD *)(v12 - 656) = v20;
  *(_QWORD *)(v12 - 168) = v20;
  *(_QWORD *)(v12 - 160) = v22;
  *(_QWORD *)(v12 - 696) = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v12 - 168) = v23;
  *(_QWORD *)(v12 - 160) = OpaqueTypeConformance2;
  v26 = MEMORY[0x242616E48](0, v12 - 168, MEMORY[0x24BDF29F8], 0);
  *(_QWORD *)(v12 - 552) = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)(v12 - 584) = (char *)&a9 - v27;
  *(_QWORD *)(v12 - 528) = v23;
  *(_QWORD *)(v12 - 168) = v23;
  *(_QWORD *)(v12 - 160) = OpaqueTypeConformance2;
  *(_QWORD *)(v12 - 616) = OpaqueTypeConformance2;
  v28 = swift_getOpaqueTypeConformance2();
  *(_QWORD *)(v12 - 536) = v26;
  *(_QWORD *)(v12 - 168) = v26;
  *(_QWORD *)(v12 - 160) = v10;
  *(_QWORD *)(v12 - 384) = v10;
  v29 = MEMORY[0x24BDF10F0];
  *(_QWORD *)(v12 - 608) = v28;
  *(_QWORD *)(v12 - 152) = v28;
  *(_QWORD *)(v12 - 144) = v29;
  v30 = MEMORY[0x242616E48](0, v12 - 168, MEMORY[0x24BDF3000], 0);
  *(_QWORD *)(v12 - 576) = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  *(_QWORD *)(v12 - 592) = (char *)&a9 - v31;
  *(_QWORD *)(v12 - 560) = v32;
  v33 = sub_23C0E4024();
  *(_QWORD *)(v12 - 496) = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8](v33);
  *(_QWORD *)(v12 - 504) = (char *)&a9 - v34;
  *(_QWORD *)(v12 - 488) = v35;
  v36 = sub_23C0E4024();
  *(_QWORD *)(v12 - 632) = v36;
  *(_QWORD *)(v12 - 464) = *(_QWORD *)(v36 - 8);
  v37 = MEMORY[0x24BDAC7A8](v36);
  *(_QWORD *)(v12 - 440) = (char *)&a9 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = MEMORY[0x24BDAC7A8](v37);
  *(_QWORD *)(v12 - 512) = (char *)&a9 - v40;
  v41 = MEMORY[0x24BDAC7A8](v39);
  *(_QWORD *)(v12 - 448) = (char *)&a9 - v42;
  v43 = MEMORY[0x24BDAC7A8](v41);
  MEMORY[0x24BDAC7A8](v43);
  *(_QWORD *)(v12 - 168) = *(_QWORD *)(v12 - 368);
  *(_QWORD *)(v12 - 160) = v9;
  *(_QWORD *)(v12 - 152) = v11;
  v44 = *(_QWORD *)(v12 - 688);
  *(_QWORD *)(v12 - 144) = *(_QWORD *)(v12 - 640);
  *(_QWORD *)(v12 - 136) = v44;
  v45 = *(_QWORD *)(v12 - 672);
  *(_QWORD *)(v12 - 128) = *(_QWORD *)(v12 - 680);
  *(_QWORD *)(v12 - 120) = v45;
  v46 = *(_QWORD *)(v12 - 344);
  *(_QWORD *)(v12 - 112) = *(_QWORD *)(v12 - 360);
  *(_QWORD *)(v12 - 104) = v46;
  type metadata accessor for FilterDurationSectionView();
}

uint64_t sub_23C0D4D48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;

  (*(void (**)(void))(*(_QWORD *)(v10 - 352) + *(int *)(a1 + 96)))();
  *(_QWORD *)(v10 - 480) = v4;
  v11 = v4;
  v12 = *(_QWORD *)(v10 - 648);
  sub_23C06E920(v9, v7, v11);
  *(_QWORD *)(v10 - 520) = v8;
  v13 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  *(_QWORD *)(v10 - 624) = v9;
  *(_QWORD *)(v10 - 600) = v13;
  v13(v9, v7);
  sub_23C0E42B8();
  *(_QWORD *)(v10 - 320) = *(_QWORD *)(v10 - 368);
  *(_QWORD *)(v10 - 368) = v7;
  *(_QWORD *)(v10 - 312) = v7;
  *(_QWORD *)(v10 - 304) = *(_QWORD *)(v10 - 728);
  *(_QWORD *)(v10 - 296) = v5;
  *(_QWORD *)(v10 - 288) = v6;
  *(_QWORD *)(v10 - 280) = v2;
  v14 = *(_QWORD *)(v10 - 720);
  *(_QWORD *)(v10 - 272) = v3;
  *(_QWORD *)(v10 - 264) = *(_QWORD *)(v10 - 360);
  v15 = *(_QWORD *)(v10 - 352);
  *(_QWORD *)(v10 - 256) = v1;
  *(_QWORD *)(v10 - 248) = v15;
  sub_23C0E3FAC();
  sub_23C0E4198();
  v16 = sub_23C0E42B8();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v16)
    sub_23C0E42C4();
  v17 = *(_QWORD *)(v10 - 568);
  v18 = *(_QWORD *)(v10 - 656);
  sub_23C0E448C();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 472) + 8))(v12, *(_QWORD *)(v10 - 456));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 664) + 8))(v14, v18);
  v19 = *(_QWORD *)(v10 - 432);
  sub_23C0E4258();
  v20 = sub_23C0E42D0();
  v21 = sub_23C0E42B8();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v20)
    sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v21)
    sub_23C0E42C4();
  v22 = *(_QWORD *)(v10 - 584);
  v23 = *(_QWORD *)(v10 - 528);
  sub_23C0E4474();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 424) + 8))(v19, *(_QWORD *)(v10 - 416));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 544) + 8))(v17, v23);
  sub_23C0E427C();
  v24 = *(_QWORD *)(v10 - 408);
  sub_23C0E4294();
  v25 = *(_QWORD *)(v10 - 592);
  v26 = *(_QWORD *)(v10 - 536);
  v27 = *(_QWORD *)(v10 - 384);
  v28 = *(_QWORD *)(v10 - 608);
  v29 = MEMORY[0x24BDF10F0];
  sub_23C0E4498();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 392) + 8))(v24, v27);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 552) + 8))(v22, v26);
  *(_QWORD *)(v10 - 168) = v26;
  *(_QWORD *)(v10 - 160) = v27;
  *(_QWORD *)(v10 - 152) = v28;
  *(_QWORD *)(v10 - 144) = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v31 = *(_QWORD *)(v10 - 504);
  v32 = *(_QWORD *)(v10 - 560);
  sub_23C0E4534();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 576) + 8))(v25, v32);
  sub_23C0E4684();
  v33 = MEMORY[0x24BDEDB80];
  *(_QWORD *)(v10 - 184) = OpaqueTypeConformance2;
  *(_QWORD *)(v10 - 176) = v33;
  v34 = MEMORY[0x24BDED308];
  v49 = *(_QWORD *)(v10 - 488);
  v50 = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v49, v10 - 184);
  v35 = *(_QWORD *)(v10 - 512);
  sub_23C0E44E0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 496) + 8))(v31, v49);
  v36 = MEMORY[0x24BDEDBB8];
  *(_QWORD *)(v10 - 200) = v50;
  *(_QWORD *)(v10 - 192) = v36;
  v37 = *(_QWORD *)(v10 - 632);
  v38 = MEMORY[0x242616E9C](v34, v37, v10 - 200);
  v39 = *(_QWORD *)(v10 - 448);
  sub_23C06E920(v35, v37, v39);
  v40 = *(_QWORD *)(v10 - 464);
  v41 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v41(v35, v37);
  v42 = *(_QWORD *)(v10 - 624);
  v43 = *(_QWORD *)(v10 - 480);
  v44 = *(_QWORD *)(v10 - 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 520) + 16))(v42, v43, v44);
  *(_QWORD *)(v10 - 168) = v42;
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16);
  v46 = *(_QWORD *)(v10 - 440);
  v45(v46, v39, v37);
  *(_QWORD *)(v10 - 160) = v46;
  *(_QWORD *)(v10 - 216) = v44;
  *(_QWORD *)(v10 - 208) = v37;
  *(_QWORD *)(v10 - 232) = *(_QWORD *)(v10 - 344);
  *(_QWORD *)(v10 - 224) = v38;
  sub_23C0DE900((uint64_t *)(v10 - 168), 2uLL, v10 - 216);
  v41(v39, v37);
  v47 = *(void (**)(uint64_t, uint64_t))(v10 - 600);
  v47(v43, v44);
  v41(v46, v37);
  return ((uint64_t (*)(uint64_t, uint64_t))v47)(v42, v44);
}

void sub_23C0D52BC()
{
  sub_23C06D9FC((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0D46FC);
}

uint64_t sub_23C0D52C8()
{
  return swift_getOpaqueTypeConformance2();
}

void sub_23C0D530C()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0D5398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *, uint64_t);
  _BYTE v25[96];

  swift_getTupleTypeMetadata2();
  v1 = sub_23C0E481C();
  v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B110F0);
  v3 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v1);
  v4 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v0 - 136) = v1;
  *(_QWORD *)(v0 - 128) = v4;
  *(_QWORD *)(v0 - 120) = v2;
  *(_QWORD *)(v0 - 112) = v3;
  *(_QWORD *)(v0 - 104) = MEMORY[0x24BEE0D10];
  v5 = sub_23C0E4654();
  *(_QWORD *)(v0 - 144) = sub_23C0D461C();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v5, v0 - 144);
  v6 = sub_23C0E45F4();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = &v25[-v8];
  v10 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v6);
  *(_QWORD *)(v0 - 136) = v6;
  *(_QWORD *)(v0 - 128) = v10;
  v11 = MEMORY[0x242616E48](0, v0 - 136, MEMORY[0x24BDF2D58], 0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v17 = &v25[-v16];
  v18 = *(_QWORD *)(v0 - 280);
  *(_QWORD *)(v0 - 224) = *(_QWORD *)(v0 - 328);
  *(_QWORD *)(v0 - 216) = v18;
  v19 = *(_QWORD *)(v0 - 264);
  *(_QWORD *)(v0 - 208) = *(_QWORD *)(v0 - 320);
  *(_QWORD *)(v0 - 200) = v19;
  v20 = *(_QWORD *)(v0 - 296);
  *(_QWORD *)(v0 - 192) = *(_QWORD *)(v0 - 304);
  *(_QWORD *)(v0 - 184) = v20;
  v21 = *(_QWORD *)(v0 - 312);
  *(_QWORD *)(v0 - 176) = *(_QWORD *)(v0 - 288);
  *(_QWORD *)(v0 - 168) = v21;
  v22 = *(_QWORD *)(v0 - 256);
  *(_QWORD *)(v0 - 160) = *(_QWORD *)(v0 - 272);
  *(_QWORD *)(v0 - 152) = v22;
  sub_23C0E4114();
  sub_23C0E45E8();
  sub_23C0E4480();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  *(_QWORD *)(v0 - 136) = v6;
  *(_QWORD *)(v0 - 128) = v10;
  swift_getOpaqueTypeConformance2();
  sub_23C06E920((uint64_t)v15, v11, (uint64_t)v17);
  v23 = *(void (**)(_BYTE *, uint64_t))(v12 + 8);
  v23(v15, v11);
  sub_23C06B980((uint64_t)v17, v11, *(_QWORD *)(v0 - 248));
  return ((uint64_t (*)(_BYTE *, uint64_t))v23)(v17, v11);
}

void sub_23C0D5618()
{
  type metadata accessor for FilterDurationSectionView();
}

void sub_23C0D56B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 272) = v16;
  *(_QWORD *)(v15 - 280) = a1;
  *(_QWORD *)(v15 - 352) = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 264) = (char *)&a9 - v17;
  *(_QWORD *)(v15 - 160) = v9;
  *(_QWORD *)(v15 - 152) = v13;
  *(_QWORD *)(v15 - 288) = v13;
  *(_QWORD *)(v15 - 144) = v12;
  *(_QWORD *)(v15 - 136) = v11;
  *(_QWORD *)(v15 - 128) = v10;
  *(_QWORD *)(v15 - 120) = v14;
  type metadata accessor for Option();
}

uint64_t sub_23C0D5724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  unint64_t v33;
  _BYTE v34[80];

  swift_getTupleTypeMetadata2();
  v7 = sub_23C0E481C();
  *(_QWORD *)(v6 - 312) = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B110F0);
  *(_QWORD *)(v6 - 328) = v8;
  v9 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v7);
  *(_QWORD *)(v6 - 336) = v9;
  v10 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v6 - 160) = v7;
  *(_QWORD *)(v6 - 152) = v10;
  *(_QWORD *)(v6 - 144) = v8;
  *(_QWORD *)(v6 - 136) = v9;
  *(_QWORD *)(v6 - 128) = MEMORY[0x24BEE0D10];
  v11 = sub_23C0E4654();
  *(_QWORD *)(v6 - 320) = v11;
  *(_QWORD *)(v6 - 304) = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x24BDAC7A8](v11);
  *(_QWORD *)(v6 - 384) = &v34[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  *(_QWORD *)(v6 - 344) = &v34[-v14];
  *(_QWORD *)(v6 - 168) = *(_QWORD *)(v5 + *(int *)(v4 + 108));
  v15 = sub_23C0E481C();
  MEMORY[0x242616E9C](MEMORY[0x24BEE12C8], v15);
  sub_23C0E47E0();
  *(_QWORD *)(v6 - 168) = *(_QWORD *)(v6 - 160);
  v16 = sub_23C0E4918();
  MEMORY[0x242616E9C](MEMORY[0x24BEE2FC0], v16);
  *(_QWORD *)(v6 - 160) = sub_23C0E4828();
  v17 = v2;
  *(_QWORD *)(v6 - 424) = v2;
  *(_QWORD *)(v6 - 256) = v2;
  v18 = *(_QWORD *)(v6 - 376);
  *(_QWORD *)(v6 - 248) = v18;
  *(_QWORD *)(v6 - 240) = v1;
  v19 = *(_QWORD *)(v6 - 368);
  v20 = *(_QWORD *)(v6 - 400);
  *(_QWORD *)(v6 - 232) = v19;
  *(_QWORD *)(v6 - 224) = v20;
  v21 = v0;
  *(_QWORD *)(v6 - 216) = v0;
  v22 = *(_QWORD *)(v6 - 392);
  *(_QWORD *)(v6 - 208) = v22;
  *(_QWORD *)(v6 - 200) = v3;
  v23 = *(_QWORD *)(v6 - 360);
  *(_QWORD *)(v6 - 192) = v23;
  *(_QWORD *)(v6 - 408) = swift_getKeyPath();
  v24 = *(_QWORD *)(v6 - 272);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v24 + 16))(*(_QWORD *)(v6 - 264), *(_QWORD *)(v6 - 416), *(_QWORD *)(v6 - 280));
  v25 = (*(unsigned __int8 *)(v24 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v26 = (char *)swift_allocObject();
  *((_QWORD *)v26 + 2) = v17;
  *((_QWORD *)v26 + 3) = v18;
  *((_QWORD *)v26 + 4) = *(_QWORD *)(v6 - 288);
  *((_QWORD *)v26 + 5) = v19;
  *((_QWORD *)v26 + 6) = v20;
  *((_QWORD *)v26 + 7) = v21;
  *((_QWORD *)v26 + 8) = v22;
  *((_QWORD *)v26 + 9) = v3;
  *((_QWORD *)v26 + 10) = v23;
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v6 - 272) + 32))(&v26[v25], *(_QWORD *)(v6 - 264), *(_QWORD *)(v6 - 280));
  v27 = (_QWORD *)swift_allocObject();
  v27[2] = *(_QWORD *)(v6 - 424);
  v27[3] = v18;
  v27[4] = *(_QWORD *)(v6 - 288);
  v27[5] = v19;
  v27[6] = v20;
  v27[7] = v21;
  v27[8] = v22;
  v27[9] = v3;
  v27[10] = v23;
  v27[11] = sub_23C0D80F8;
  v27[12] = v26;
  v33 = sub_23C0D461C();
  v28 = *(_QWORD *)(v6 - 384);
  sub_23C0E463C();
  *(_QWORD *)(v6 - 176) = v33;
  v29 = *(_QWORD *)(v6 - 320);
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v29, v6 - 176);
  v30 = *(_QWORD *)(v6 - 344);
  sub_23C06E920(v28, v29, v30);
  v31 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 304) + 8);
  v31(v28, v29);
  sub_23C06B980(v30, v29, *(_QWORD *)(v6 - 296));
  return ((uint64_t (*)(uint64_t, uint64_t))v31)(v30, v29);
}

void sub_23C0D5AF0()
{
  type metadata accessor for Option();
}

void sub_23C0D5B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v18 - 296) = a1;
  *(_QWORD *)(v18 - 320) = *(_QWORD *)(a1 - 8);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v18 - 304) = (char *)&a9 - v19;
  *(_QWORD *)(v18 - 160) = v17;
  *(_QWORD *)(v18 - 152) = v12;
  *(_QWORD *)(v18 - 144) = v9;
  *(_QWORD *)(v18 - 136) = v14;
  *(_QWORD *)(v18 - 128) = v15;
  *(_QWORD *)(v18 - 120) = v10;
  *(_QWORD *)(v18 - 112) = v13;
  *(_QWORD *)(v18 - 104) = v16;
  *(_QWORD *)(v18 - 448) = v16;
  *(_QWORD *)(v18 - 96) = v11;
  type metadata accessor for FilterDurationSectionView();
}

uint64_t sub_23C0D5BF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t KeyPath;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _BYTE v40[96];

  v9 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v7 - 424) = a1;
  v10 = *(_QWORD *)(v9 + 64);
  v11 = v9;
  MEMORY[0x24BDAC7A8](a1);
  v13 = &v40[-v12];
  *(_QWORD *)(v7 - 416) = &v40[-v12];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11100);
  *(_QWORD *)(v7 - 368) = v14;
  *(_QWORD *)(v7 - 360) = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  *(_QWORD *)(v7 - 384) = &v40[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11190);
  *(_QWORD *)(v7 - 336) = v16;
  *(_QWORD *)(v7 - 344) = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  *(_QWORD *)(v7 - 376) = &v40[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)(v7 - 440) = v11;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v11 + 16))(v13, *(_QWORD *)(v7 - 288), a1);
  v18 = *(_QWORD *)(v7 - 320);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v18 + 16))(*(_QWORD *)(v7 - 304), *(_QWORD *)(v7 - 280), *(_QWORD *)(v7 - 296));
  v19 = (*(unsigned __int8 *)(v11 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v20 = (v10 + *(unsigned __int8 *)(v18 + 80) + v19) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  *(_QWORD *)(v7 - 432) = (v6 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (char *)swift_allocObject();
  v22 = *(_QWORD *)(v7 - 408);
  *((_QWORD *)v21 + 2) = v22;
  *((_QWORD *)v21 + 3) = v2;
  *((_QWORD *)v21 + 4) = *(_QWORD *)(v7 - 312);
  *((_QWORD *)v21 + 5) = v3;
  v23 = v4;
  *((_QWORD *)v21 + 6) = v4;
  *((_QWORD *)v21 + 7) = v1;
  v24 = *(_QWORD *)(v7 - 400);
  *((_QWORD *)v21 + 8) = v24;
  *((_QWORD *)v21 + 9) = v5;
  v25 = *(_QWORD *)(v7 - 392);
  *((_QWORD *)v21 + 10) = v25;
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v7 - 440) + 32))(&v21[v19], *(_QWORD *)(v7 - 416), *(_QWORD *)(v7 - 424));
  v26 = *(_QWORD *)(v7 - 296);
  (*(void (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v7 - 320) + 32))(&v21[v20], *(_QWORD *)(v7 - 304), v26);
  *(_QWORD *)&v21[*(_QWORD *)(v7 - 432)] = *(_QWORD *)(v7 - 352);
  *(_QWORD *)(v7 - 256) = v22;
  *(_QWORD *)(v7 - 248) = v2;
  *(_QWORD *)(v7 - 240) = *(_QWORD *)(v7 - 312);
  *(_QWORD *)(v7 - 232) = v3;
  *(_QWORD *)(v7 - 224) = v23;
  *(_QWORD *)(v7 - 216) = v1;
  v27 = *(_QWORD *)(v7 - 448);
  *(_QWORD *)(v7 - 208) = v24;
  *(_QWORD *)(v7 - 200) = v27;
  v28 = *(_QWORD *)(v7 - 288);
  *(_QWORD *)(v7 - 192) = v25;
  *(_QWORD *)(v7 - 184) = v28;
  v29 = *(_QWORD *)(v7 - 280);
  *(_QWORD *)(v7 - 176) = v29;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B11198);
  sub_23C0D84D8();
  v30 = *(_QWORD *)(v7 - 384);
  sub_23C0E45D0();
  sub_23C06E774(qword_256B11108, &qword_256B11100, MEMORY[0x24BDF43B0]);
  sub_23C06DDD8();
  v31 = *(_QWORD *)(v7 - 376);
  v32 = *(_QWORD *)(v7 - 368);
  sub_23C0E4420();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 360) + 8))(v30, v32);
  LOBYTE(v32) = *(_BYTE *)(v29 + *(int *)(v26 + 68)) == 0;
  KeyPath = swift_getKeyPath();
  v34 = swift_allocObject();
  *(_BYTE *)(v34 + 16) = v32;
  v35 = *(_QWORD *)(v7 - 344);
  v36 = *(_QWORD *)(v7 - 328);
  v37 = *(_QWORD *)(v7 - 336);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v36, v31, v37);
  v38 = (uint64_t *)(v36 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B110F0) + 36));
  *v38 = KeyPath;
  v38[1] = (uint64_t)sub_23C0D8620;
  v38[2] = v34;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v31, v37);
}

void sub_23C0D5FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  v14 = a8;
  v13 = a9;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B111B0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (uint64_t *)((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v11 = sub_23C0E4684();
  v11[1] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B111B8);
  sub_23C0D6110();
}

uint64_t sub_23C0D6080()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;

  sub_23C0E4684();
  sub_23C0E3FD0();
  sub_23C068360(v1, v0, &qword_256B111B0);
  v3 = (_OWORD *)(v0 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B11198) + 36));
  v4 = *(_OWORD *)(v2 - 112);
  *v3 = *(_OWORD *)(v2 - 128);
  v3[1] = v4;
  v3[2] = *(_OWORD *)(v2 - 96);
  return sub_23C06E834(v1, &qword_256B111B0);
}

void sub_23C0D6110()
{
  type metadata accessor for FilterDurationSectionView();
}

void sub_23C0D6188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)(v15 - 344) = a1;
  v16 = *(_QWORD *)(a1 - 8);
  *(_QWORD *)(v15 - 352) = v16;
  *(_QWORD *)(v15 - 368) = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 360) = (char *)&a9 - v17;
  *(_QWORD *)(v15 - 208) = v11;
  *(_QWORD *)(v15 - 200) = v12;
  *(_QWORD *)(v15 - 192) = v14;
  *(_QWORD *)(v15 - 184) = v10;
  *(_QWORD *)(v15 - 176) = v13;
  *(_QWORD *)(v15 - 168) = v9;
  type metadata accessor for Option();
}

void sub_23C0D61E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v16 = MEMORY[0x24BDAC7A8](a1);
  *(_QWORD *)(v15 - 304) = (char *)&a9 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v15 - 376) = v17;
  MEMORY[0x24BDAC7A8](v16);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B111C0);
  v19 = MEMORY[0x24BDAC7A8](v18);
  *(_QWORD *)(v15 - 240) = (char *)&a9 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  *(_QWORD *)(v15 - 224) = (char *)&a9 - v21;
  *(_QWORD *)(v15 - 296) = v13;
  *(_QWORD *)(v15 - 328) = v9;
  *(_QWORD *)(v15 - 280) = v11;
  *(_QWORD *)(v15 - 272) = v12;
  *(_QWORD *)(v15 - 264) = v14;
  *(_QWORD *)(v15 - 320) = v10;
  sub_23C06E628();
}

void sub_23C0D6308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)(v6 - 248) = a1;
  *(_QWORD *)(v6 - 216) = swift_getKeyPath();
  v7 = *(unsigned __int8 *)(v1 + *(int *)(v5 + 68));
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v8(v2, v1, v5);
  if (v7 == 2)
  {
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
  }
  else
  {
    v9 = *(unsigned __int8 *)(v2 + *(int *)(v5 + 68));
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v5);
    if (v9 != 1)
    {
      v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B111C8);
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(*(_QWORD *)(v6 - 224), 1, 1, v42);
      v28 = *(_QWORD *)(v6 - 320);
      v30 = *(_QWORD *)(v6 - 264);
      v21 = *(_QWORD *)(v6 - 256);
      v29 = *(_QWORD *)(v6 - 272);
      v11 = v4;
      v39 = *(_QWORD *)(v6 - 232);
      v41 = *(_QWORD *)(v6 - 280);
      v40 = *(_QWORD *)(v6 - 288);
      v25 = *(_QWORD *)(v6 - 328);
LABEL_6:
      *(_QWORD *)(v6 - 264) = sub_23C0E4150();
      sub_23C0D6D4C(v1, v40, v41, v39, v29, v21, v30, v28, v11, v25, *(_QWORD *)(v6 - 296));
    }
  }
  *(_OWORD *)(v6 - 208) = xmmword_23C0EC940;
  *(_QWORD *)(v6 - 384) = swift_getKeyPath();
  v10 = v5;
  *(_QWORD *)(v6 - 392) = v5;
  v11 = v4;
  v12 = *(_QWORD *)(v6 - 352);
  v13 = *(_QWORD *)(v6 - 360);
  v14 = *(_QWORD *)(v6 - 344);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v12 + 16))(v13, *(_QWORD *)(v6 - 288), v14);
  v8(*(_QWORD *)(v6 - 304), v1, v10);
  v15 = (*(unsigned __int8 *)(v12 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v16 = *(unsigned __int8 *)(v3 + 80);
  v17 = *(_QWORD *)(v6 - 368) + v16 + v15;
  *(_QWORD *)(v6 - 368) = v3;
  v18 = v17 & ~v16;
  v19 = (char *)swift_allocObject();
  v20 = *(_QWORD *)(v6 - 232);
  *((_QWORD *)v19 + 2) = *(_QWORD *)(v6 - 280);
  *((_QWORD *)v19 + 3) = v20;
  v21 = *(_QWORD *)(v6 - 256);
  *((_QWORD *)v19 + 4) = *(_QWORD *)(v6 - 272);
  *((_QWORD *)v19 + 5) = v21;
  v22 = *(_QWORD *)(v6 - 320);
  *((_QWORD *)v19 + 6) = *(_QWORD *)(v6 - 264);
  *((_QWORD *)v19 + 7) = v22;
  v23 = *(_QWORD *)(v6 - 328);
  *((_QWORD *)v19 + 8) = v11;
  *((_QWORD *)v19 + 9) = v23;
  *((_QWORD *)v19 + 10) = *(_QWORD *)(v6 - 296);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 32);
  v25 = v23;
  v24(&v19[v15], v13, v14);
  (*(void (**)(char *, _QWORD, _QWORD))(*(_QWORD *)(v6 - 368) + 32))(&v19[v18], *(_QWORD *)(v6 - 304), *(_QWORD *)(v6 - 392));
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B111D8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B111E0);
  v26 = v1;
  sub_23C0D890C();
  sub_23C0D89BC();
  v27 = *(_QWORD *)(v6 - 224);
  v28 = v22;
  v29 = *(_QWORD *)(v6 - 272);
  v30 = *(_QWORD *)(v6 - 264);
  sub_23C0E463C();
  sub_23C0E42E8();
  sub_23C0E3F7C();
  *(_QWORD *)(v6 - 128) = v31;
  *(_QWORD *)(v6 - 120) = v32;
  *(_QWORD *)(v6 - 112) = v33;
  *(_QWORD *)(v6 - 104) = v34;
  *(_BYTE *)(v6 - 96) = 0;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B111C8);
  sub_23C0E4228();
  v36 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v37 = v27;
  v38 = v35;
  v1 = v26;
  v39 = *(_QWORD *)(v6 - 232);
  v40 = *(_QWORD *)(v6 - 288);
  v41 = *(_QWORD *)(v6 - 280);
  v36(v37, 0, 1, v38);
  goto LABEL_6;
}

uint64_t sub_23C0D666C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 - 208);
  v2 = *(_QWORD *)(v0 - 200);
  v3 = *(_BYTE *)(v0 - 192);
  v4 = *(_QWORD *)(v0 - 184);
  *(_QWORD *)(v0 - 272) = *(_QWORD *)(v0 - 176);
  v5 = *(_QWORD *)(v0 - 168);
  v6 = *(_BYTE *)(v0 - 160);
  *(_QWORD *)(v0 - 232) = *(_QWORD *)(v0 - 152);
  *(_QWORD *)(v0 - 256) = *(_QWORD *)(v0 - 144);
  v7 = *(_QWORD *)(v0 - 240);
  sub_23C068360(*(_QWORD *)(v0 - 224), v7, &qword_256B111C0);
  v8 = *(_QWORD **)(v0 - 312);
  v9 = *(_QWORD *)(v0 - 248);
  *v8 = *(_QWORD *)(v0 - 216);
  v8[1] = v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B111D0);
  sub_23C068360(v7, (uint64_t)v8 + *(int *)(v10 + 48), &qword_256B111C0);
  v11 = (char *)v8 + *(int *)(v10 + 64);
  *(_QWORD *)v11 = *(_QWORD *)(v0 - 264);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  *((_QWORD *)v11 + 3) = v1;
  *((_QWORD *)v11 + 4) = v2;
  v11[40] = v3;
  v12 = *(_QWORD *)(v0 - 272);
  *((_QWORD *)v11 + 6) = v4;
  *((_QWORD *)v11 + 7) = v12;
  *((_QWORD *)v11 + 8) = v5;
  v11[72] = v6;
  v13 = *(_QWORD *)(v0 - 256);
  *((_QWORD *)v11 + 10) = *(_QWORD *)(v0 - 232);
  *((_QWORD *)v11 + 11) = v13;
  swift_retain();
  swift_retain();
  sub_23C06DE1C(v1, v2, v3);
  swift_bridgeObjectRetain();
  sub_23C06DE1C(v12, v5, v6);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23C06E834(*(_QWORD *)(v0 - 224), &qword_256B111C0);
  sub_23C06DBB0(v1, v2, v3);
  swift_bridgeObjectRelease();
  sub_23C06DBB0(v12, v5, v6);
  swift_release();
  swift_bridgeObjectRelease();
  sub_23C06E834(*(_QWORD *)(v0 - 240), &qword_256B111C0);
  swift_release();
  return swift_release();
}

void sub_23C0D680C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a7;
  v22 = a8;
  v20 = a9;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11208);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  *(_QWORD *)v17 = sub_23C0E4150();
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11210);
  sub_23C0D6988(a3, v18, a5, a6, v21, v22, (uint64_t)&v17[*(int *)(v19 + 44)], v20, *((uint64_t *)&v20 + 1), a10, a11);
}

uint64_t sub_23C0D68F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_23C0E46CC();
  v4 = v3;
  v6 = v5;
  sub_23C068360(v2, v1, &qword_256B11208);
  v7 = v1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B111E0) + 36);
  *(double *)v7 = (double)v0 * 22.5 * 0.0174532925;
  *(_QWORD *)(v7 + 8) = v4;
  *(_QWORD *)(v7 + 16) = v6;
  return sub_23C06E834(v2, &qword_256B11208);
}

void sub_23C0D6988(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v26 = a5;
  v27 = a6;
  v20[1] = a4;
  v25 = a3;
  v29 = a2;
  v23 = a1;
  v32 = a7;
  v20[2] = a10;
  v22 = a11;
  v11 = sub_23C0E4630();
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F198);
  MEMORY[0x24BDAC7A8](v21);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11218);
  MEMORY[0x24BDAC7A8](v24);
  v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11220);
  v14 = MEMORY[0x24BDAC7A8](v30);
  v31 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  MEMORY[0x24BDAC7A8](v16);
  v28 = (char *)v20 - v17;
  v18 = *MEMORY[0x24BDEEB68];
  v19 = sub_23C0E4120();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v13, v18, v19);
  sub_23C06E870();
}

void sub_23C0D6B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  sub_23C06E6F4(v4, v2);
  *(_QWORD *)(v2 + *(int *)(*(_QWORD *)(v8 - 296) + 36)) = a1;
  sub_23C06E738(v4);
  sub_23C0E4684();
  sub_23C0E3FD0();
  sub_23C068360(v2, v1, &qword_256B0F198);
  v10 = (_OWORD *)(v1 + *(int *)(*(_QWORD *)(v8 - 272) + 36));
  v11 = *(_OWORD *)(v8 - 136);
  *v10 = *(_OWORD *)(v8 - 152);
  v10[1] = v11;
  v10[2] = *(_OWORD *)(v8 - 120);
  sub_23C06E834(v2, &qword_256B0F198);
  v12 = *(_QWORD *)(v8 - 312);
  *(_QWORD *)(v8 - 200) = v5;
  *(_QWORD *)(v8 - 192) = v12;
  *(_QWORD *)(v8 - 184) = v3;
  *(_QWORD *)(v8 - 176) = v6;
  v13 = *(_QWORD *)(v8 - 304);
  *(_QWORD *)(v8 - 168) = v7;
  *(_QWORD *)(v8 - 160) = v13;
  type metadata accessor for Option();
}

uint64_t sub_23C0D6C60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_BYTE *)(v2 + *(int *)(a1 + 68)) == 2)
    v5 = 1.0;
  else
    v5 = 0.4;
  sub_23C068360(v1, v3, &qword_256B11218);
  *(double *)(v3 + *(int *)(*(_QWORD *)(v4 - 224) + 36)) = v5;
  sub_23C06E834(v1, &qword_256B11218);
  v6 = *(_QWORD *)(v4 - 240);
  sub_23C06E7B4(v3, v6, &qword_256B11220);
  v7 = *(_QWORD *)(v4 - 216);
  sub_23C068360(v6, v7, &qword_256B11220);
  v8 = *(_QWORD *)(v4 - 208);
  sub_23C068360(v7, v8, &qword_256B11220);
  v9 = v8 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256B11228) + 48);
  *(_QWORD *)v9 = 0;
  *(_BYTE *)(v9 + 8) = 1;
  sub_23C06E834(v6, &qword_256B11220);
  return sub_23C06E834(v7, &qword_256B11220);
}

void sub_23C0D6D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_23C0D6E54(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_23C0D6DA4()
{
  sub_23C06E870();
}

__n128 sub_23C0D6E00(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __n128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)v1 = v9;
  *(_QWORD *)(v1 + 8) = v8;
  *(_BYTE *)(v1 + 16) = v7;
  result = v6;
  *(__n128 *)(v1 + 24) = v6;
  *(_QWORD *)(v1 + 40) = v5;
  *(_BYTE *)(v1 + 48) = v4;
  *(_QWORD *)(v1 + 56) = v3;
  *(_QWORD *)(v1 + 64) = a1;
  return result;
}

void sub_23C0D6E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  _DWORD v24[4];
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v34 = a7;
  v35 = a8;
  v31 = a5;
  v29 = a4;
  v37 = a2;
  v30 = a11;
  v28 = a10;
  v26 = a9;
  v36 = sub_23C0E3ED4();
  v32 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  v13 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v13);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0FC48);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a3;
  v33 = a6;
  sub_23C0D3144(a3, a6);
  v41 = v17;
  sub_23C0E4A68();
  sub_23C0E4354();
  v18 = sub_23C0E4348();
  v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v25(v16, 1, 1, v18);
  sub_23C0E4360();
  sub_23C06E834((uint64_t)v16, &qword_256B0FC48);
  v19 = sub_23C0E43B4();
  v38 = v20;
  v39 = v19;
  v22 = v21;
  v40 = v23;
  swift_bridgeObjectRelease();
  swift_release();
  sub_23C0E472C();
  if (qword_256B0EF30 != -1)
    swift_once();
  v24[3] = v22 & 1;
  v41 = v27;
  v42 = v29;
  v43 = v31;
  v44 = v33;
  v45 = v34;
  v46 = v35;
  v47 = v26;
  v48 = v28;
  v49 = v30;
  type metadata accessor for FilterDurationSectionView();
}

void sub_23C0D7298()
{
  unint64_t v0;
  unint64_t v1;

  sub_23C06D600();
  if (v0 <= 0x3F)
  {
    sub_23C0E3ED4();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_23C0D7344(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23C0E3EB0();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = a3[23];
    v12 = a3[24];
    v13 = (uint64_t *)((char *)a1 + v11);
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = (uint64_t *)((char *)a1 + v12);
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = a3[25];
    v20 = (char *)a1 + v19;
    v21 = (char *)a2 + v19;
    v22 = sub_23C0E3ED4();
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    v23(v20, v21, v22);
    v24 = a3[26];
    v25 = a3[27];
    v26 = (uint64_t *)((char *)a1 + v24);
    v27 = (uint64_t *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    *(uint64_t *)((char *)a1 + v25) = *(uint64_t *)((char *)a2 + v25);
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_23C0D74BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = sub_23C0E3EB0();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_release();
  v6 = a1 + *(int *)(a2 + 100);
  v7 = sub_23C0E3ED4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  return swift_bridgeObjectRelease();
}

char *sub_23C0D7578(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[23];
  v10 = a3[24];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  v17 = a3[25];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = sub_23C0E3ED4();
  v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v21(v18, v19, v20);
  v22 = a3[26];
  v23 = a3[27];
  v24 = &a1[v22];
  v25 = &a2[v22];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_23C0D76C4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[23];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[24];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *((_QWORD *)v17 + 1);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = v18;
  swift_retain();
  swift_release();
  v19 = a3[25];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = sub_23C0E3ED4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = a3[26];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = *((_QWORD *)v25 + 1);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = v26;
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[27]] = *(_QWORD *)&a2[a3[27]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_23C0D787C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[24];
  *(_OWORD *)&a1[a3[23]] = *(_OWORD *)&a2[a3[23]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[25];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = sub_23C0E3ED4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[27];
  *(_OWORD *)&a1[a3[26]] = *(_OWORD *)&a2[a3[26]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  return a1;
}

char *sub_23C0D7980(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[23];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)&a1[a3[24]] = *(_OWORD *)&a2[a3[24]];
  swift_release();
  v17 = a3[25];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = sub_23C0E3ED4();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  *(_OWORD *)&a1[a3[26]] = *(_OWORD *)&a2[a3[26]];
  swift_release();
  *(_QWORD *)&a1[a3[27]] = *(_QWORD *)&a2[a3[27]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23C0D7B08()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0D7B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_23C0E3ED4();
    v10 = a1 + *(int *)(a3 + 100);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 96));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_23C0D7BC0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0D7BCC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 96)) = (a2 - 1);
      return result;
    }
    v10 = sub_23C0E3ED4();
    v12 = a1 + *(int *)(a4 + 100);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_23C0D7C74()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0D7CAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeConformance2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  _QWORD v20[2];
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  swift_getTupleTypeMetadata2();
  v0 = sub_23C0E481C();
  v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B110F0);
  v2 = MEMORY[0x242616E9C](MEMORY[0x24BEE12D8], v0);
  v22 = v0;
  v23 = MEMORY[0x24BEE0D00];
  v24 = v1;
  v25 = v2;
  v26 = MEMORY[0x24BEE0D10];
  v3 = sub_23C0E4654();
  v21 = sub_23C0D461C();
  MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v3, &v21);
  v4 = sub_23C0E45F4();
  v5 = MEMORY[0x242616E9C](MEMORY[0x24BDF4498], v4);
  v22 = v4;
  v23 = v5;
  MEMORY[0x242616E48](255, &v22, MEMORY[0x24BDF2D58], 0);
  v22 = v4;
  v23 = v5;
  swift_getOpaqueTypeConformance2();
  v6 = sub_23C0E3FA0();
  v7 = MEMORY[0x242616E9C](MEMORY[0x24BDEB238], v6);
  v22 = v6;
  v23 = v7;
  v8 = MEMORY[0x242616E48](255, &v22, MEMORY[0x24BDF2FE0], 0);
  v22 = v6;
  v23 = v7;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v22 = v8;
  v23 = OpaqueTypeConformance2;
  v10 = MEMORY[0x242616E48](255, &v22, MEMORY[0x24BDF29F8], 0);
  v11 = sub_23C0E42A0();
  v22 = v8;
  v23 = OpaqueTypeConformance2;
  v12 = swift_getOpaqueTypeConformance2();
  v22 = v10;
  v23 = v11;
  v24 = v12;
  v25 = MEMORY[0x24BDF10F0];
  MEMORY[0x242616E48](255, &v22, MEMORY[0x24BDF3000], 0);
  sub_23C0E4024();
  sub_23C0E4024();
  swift_getTupleTypeMetadata2();
  v13 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v13);
  v14 = sub_23C0E4618();
  v15 = sub_23C0E4024();
  sub_23C0E4234();
  v16 = sub_23C0E4024();
  v20[0] = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v14);
  v20[1] = MEMORY[0x24BDEDB80];
  v17 = MEMORY[0x24BDED308];
  v19[0] = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v15, v20);
  v19[1] = sub_23C072354();
  return MEMORY[0x242616E9C](v17, v16, v19);
}

void sub_23C0D7F84()
{
  sub_23C06D9FC((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0D530C);
}

void sub_23C0D7F90()
{
  sub_23C06D9FC((void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0D5618);
}

uint64_t sub_23C0D7FA0()
{
  return 72;
}

__n128 sub_23C0D7FAC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_23C0D7FD0()
{
  type metadata accessor for FilterDurationSectionView();
}

uint64_t sub_23C0D8010(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = (*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v4 = sub_23C0E3EB0();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v1 + v3, 1, v4))
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v1 + v3, v4);
  swift_bridgeObjectRelease();
  swift_release();
  v6 = v1 + v3 + *(int *)(a1 + 100);
  v7 = sub_23C0E3ED4();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23C0D80F8()
{
  type metadata accessor for FilterDurationSectionView();
}

void sub_23C0D8154()
{
  sub_23C0D5AF0();
}

uint64_t sub_23C0D81B0()
{
  swift_release();
  return swift_deallocObject();
}

void sub_23C0D81D4()
{
  type metadata accessor for FilterDurationSectionView();
}

void sub_23C0D8228()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0D8270(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v1 + v3, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1 + v3, v6);
  v8 = (v3 + v4 + v5) & ~v5;
  swift_bridgeObjectRelease();
  swift_release();
  v9 = v1 + v3 + *(int *)(v2 + 100);
  v10 = sub_23C0E3ED4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v1 + v8);
  return swift_deallocObject();
}

void sub_23C0D8380()
{
  type metadata accessor for FilterDurationSectionView();
}

void sub_23C0D83DC()
{
  type metadata accessor for Option();
}

void sub_23C0D8408()
{
  type metadata accessor for FilterDurationSectionView();
}

uint64_t sub_23C0D8460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + *(int *)(a1 + 104) + v4))(v3, v1);
}

void sub_23C0D849C()
{
  uint64_t v0;

  sub_23C0D5FA8(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_OWORD *)(v0 + 64));
}

unint64_t sub_23C0D84D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B111A0;
  if (!qword_256B111A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B11198);
    v2[0] = sub_23C06E774(&qword_256B111A8, &qword_256B111B0, MEMORY[0x24BDF4750]);
    v2[1] = MEMORY[0x24BDEBEE0];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B111A0);
  }
  return result;
}

uint64_t sub_23C0D855C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23C0E40CC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_23C0D8588@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23C0E40CC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_23C0D85B4()
{
  return sub_23C0E40D8();
}

uint64_t sub_23C0D85D8()
{
  return sub_23C0E40D8();
}

_BYTE *sub_23C0D85FC(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_23C0D8610()
{
  return swift_deallocObject();
}

_BYTE *sub_23C0D8620(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_23C0D8638@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_23C0E4084();
  *a1 = result;
  return result;
}

uint64_t sub_23C0D8660()
{
  swift_retain();
  return sub_23C0E4090();
}

void sub_23C0D8688()
{
  type metadata accessor for FilterDurationSectionView();
}

void sub_23C0D86DC()
{
  type metadata accessor for Option();
}

uint64_t sub_23C0D8724(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80);
  v6 = sub_23C0E3EB0();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v1 + v3, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v1 + v3, v6);
  v8 = (v3 + v4 + v5) & ~v5;
  swift_bridgeObjectRelease();
  swift_release();
  v9 = v1 + v3 + *(int *)(v2 + 100);
  v10 = sub_23C0E3ED4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v1 + v8);
  return swift_deallocObject();
}

void sub_23C0D8828()
{
  type metadata accessor for FilterDurationSectionView();
}

void sub_23C0D8884()
{
  type metadata accessor for Option();
}

#error "23C0D88E8: call analysis failed (funcsize=15)"

unint64_t sub_23C0D890C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_256B111E8;
  if (!qword_256B111E8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B111D8);
    v2 = sub_23C0D8978();
    v3[0] = MEMORY[0x24BEE17A8];
    v3[1] = v2;
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE1BD0], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256B111E8);
  }
  return result;
}

unint64_t sub_23C0D8978()
{
  unint64_t result;

  result = qword_256B111F0;
  if (!qword_256B111F0)
  {
    result = MEMORY[0x242616E9C](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, (unint64_t *)&qword_256B111F0);
  }
  return result;
}

unint64_t sub_23C0D89BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_256B111F8;
  if (!qword_256B111F8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B111E0);
    v2[0] = sub_23C06E774(&qword_256B11200, &qword_256B11208, MEMORY[0x24BDF4700]);
    v2[1] = MEMORY[0x24BDED5D8];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDED308], v1, v2);
    atomic_store(result, (unint64_t *)&qword_256B111F8);
  }
  return result;
}

uint64_t static NamedFilterContent<>.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 24);
  v7 = v6(a3, a4);
  v9 = v8;
  if (v7 == v6(a3, a4) && v9 == v10)
    v12 = 0;
  else
    v12 = sub_23C0E4A74();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t dispatch thunk of NamedFilterContent.artworks.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of NamedFilterContent.iconName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of NamedFilterContent.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_23C0D8B0C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = *v2;
  v6 = *((_BYTE *)v2 + 8);
  v7 = v2[2];
  v8 = *((_BYTE *)v2 + 24);
  swift_bridgeObjectRetain();
  v9 = swift_bridgeObjectRetain();
  sub_23C0D9D9C(v9);
  v10 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRelease();
  if (v10)
  {
    if (*(_QWORD *)(a1 + 16) <= *(_QWORD *)(v7 + 16) >> 3)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_23C0D9F90(a1);
      v11 = v7;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = sub_23C0DA148(a1, v7);
    }
    v13 = swift_bridgeObjectRetain();
    result = sub_23C0D8C3C(v13, v11);
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = result;
    *(_BYTE *)(a2 + 24) = v8;
  }
  else
  {
    *(_QWORD *)a2 = v5;
    *(_BYTE *)(a2 + 8) = v6;
    *(_QWORD *)(a2 + 16) = v7;
    *(_BYTE *)(a2 + 24) = v8;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_23C0D8C3C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14[5];
  unsigned __int8 v15;
  uint64_t v16;
  _BYTE v17[48];

  v2 = result;
  v3 = 0;
  v16 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    sub_23C07CAAC(*(_QWORD *)(v2 + 48) + 48 * v10, (uint64_t)v17);
    sub_23C081C58((uint64_t)v17, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682C0);
    sub_23C0D8DD4((uint64_t)v14, (uint64_t)v17);
    result = sub_23C0682A8(v14[0], v14[1], v14[2], v14[3], v14[4], v15);
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v16;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_23C0D8DD4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  char v26;
  _BYTE v27[48];

  sub_23C07CAAC(a2, (uint64_t)v27);
  v5 = *v2;
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  FilterItem.hash(into:)();
  v6 = sub_23C0E4AC8();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v9 = ~v7;
    while (1)
    {
      v10 = *(_QWORD *)(v5 + 48) + 48 * v8;
      v11 = *(_QWORD *)(v10 + 32);
      v12 = *(_BYTE *)(v10 + 40);
      v24[0] = *(_OWORD *)v10;
      v24[1] = *(_OWORD *)(v10 + 16);
      v25 = v11;
      v26 = v12;
      _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v24);
      if ((v13 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    sub_23C081C58(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682A8);
    v16 = *(_QWORD *)(*v2 + 48) + 48 * v8;
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    v21 = *(_QWORD *)(v16 + 32);
    v22 = *(_BYTE *)(v16 + 40);
    *(_QWORD *)a1 = *(_QWORD *)v16;
    *(_QWORD *)(a1 + 8) = v18;
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 24) = v20;
    *(_QWORD *)(a1 + 32) = v21;
    *(_BYTE *)(a1 + 40) = v22;
    sub_23C0682C0(v17, v18, v19, v20, v21, v22);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_23C07CAAC((uint64_t)v27, (uint64_t)v24);
    v23 = *v2;
    *v2 = 0x8000000000000000;
    sub_23C081C58((uint64_t)v24, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682C0);
    sub_23C0D9508((uint64_t)v24, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v23;
    swift_bridgeObjectRelease();
    sub_23C07CAAC((uint64_t)v24, a1);
    return 1;
  }
}

uint64_t sub_23C0D8F9C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  _QWORD *v15;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F568);
  v3 = sub_23C0E48D0();
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_25;
  v4 = 1 << *(_BYTE *)(v2 + 32);
  v15 = (_QWORD *)(v2 + 56);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(v2 + 56);
  v14 = (unint64_t)(v4 + 63) >> 6;
  swift_retain();
  if (v6)
  {
    v7 = __clz(__rbit64(v6));
    goto LABEL_20;
  }
  if (v14 > 1)
  {
    v8 = *(_QWORD *)(v2 + 64);
    v9 = 1;
    if (v8)
      goto LABEL_19;
    v9 = 2;
    if (v14 > 2)
    {
      v8 = *(_QWORD *)(v2 + 72);
      if (v8)
        goto LABEL_19;
      v9 = 3;
      if (v14 > 3)
      {
        v8 = *(_QWORD *)(v2 + 80);
        if (!v8)
        {
          v10 = 4;
          if (v14 > 4)
          {
            v8 = *(_QWORD *)(v2 + 88);
            if (v8)
            {
              v9 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v9 = v10 + 1;
              if (__OFADD__(v10, 1))
              {
                __break(1u);
                JUMPOUT(0x23C0D94C4);
              }
              if (v9 >= v14)
                break;
              v8 = v15[v9];
              ++v10;
              if (v8)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_20:
        v11 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + 48 * v7 + 40);
        sub_23C0E4A98();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  swift_release();
  v1 = v0;
  v12 = 1 << *(_BYTE *)(v2 + 32);
  if (v12 > 63)
    bzero(v15, ((unint64_t)(v12 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v15 = -1 << v12;
  *(_QWORD *)(v2 + 16) = 0;
LABEL_25:
  result = swift_release();
  *v1 = v3;
  return result;
}

uint64_t sub_23C0D9508(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;
  char v26;
  _BYTE v27[48];

  v4 = v3;
  sub_23C07CAAC(a1, (uint64_t)v27);
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 > v8 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    sub_23C0D8F9C();
  }
  else
  {
    if (v9 > v8)
    {
      sub_23C0D9690();
      goto LABEL_12;
    }
    sub_23C0D985C();
  }
  v10 = *v4;
  sub_23C0E4A98();
  FilterItem.hash(into:)();
  v11 = sub_23C0E4AC8();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v13 = ~v12;
    do
    {
      v14 = *(_QWORD *)(v10 + 48) + 48 * a2;
      v15 = *(_QWORD *)(v14 + 32);
      v16 = *(_BYTE *)(v14 + 40);
      v17 = *(_OWORD *)(v14 + 16);
      v24[0] = *(_OWORD *)v14;
      v24[1] = v17;
      v25 = v15;
      v26 = v16;
      _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v24);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v13;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_23C07CAAC(a1, *(_QWORD *)(v19 + 48) + 48 * a2);
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (!v22)
  {
    *(_QWORD *)(v19 + 16) = v23;
    return result;
  }
  __break(1u);
LABEL_15:
  result = sub_23C0E4A80();
  __break(1u);
  return result;
}

void *sub_23C0D9690()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F568);
  v2 = *v0;
  v3 = sub_23C0E48C4();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_28;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_28;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
      {
        v9 = v25 + 2;
        if (v25 + 2 >= v13)
          goto LABEL_28;
        v26 = *(_QWORD *)(v6 + 8 * v9);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 48 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)v17;
    v19 = *(_QWORD *)(v17 + 8);
    v20 = *(_QWORD *)(v17 + 16);
    v21 = *(_QWORD *)(v17 + 24);
    v22 = *(_QWORD *)(v17 + 32);
    v23 = *(_QWORD *)(v4 + 48) + v16;
    v24 = *(_BYTE *)(v17 + 40);
    *(_QWORD *)v23 = *(_QWORD *)v17;
    *(_QWORD *)(v23 + 8) = v19;
    *(_QWORD *)(v23 + 16) = v20;
    *(_QWORD *)(v23 + 24) = v21;
    *(_QWORD *)(v23 + 32) = v22;
    *(_BYTE *)(v23 + 40) = v24;
    result = (void *)sub_23C0682C0(v18, v19, v20, v21, v22, v24);
  }
  v27 = v25 + 3;
  if (v27 >= v13)
    goto LABEL_28;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_23C0D985C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;

  v1 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F568);
  v2 = sub_23C0E48D0();
  if (!*(_QWORD *)(v1 + 16))
  {
    result = swift_release();
    goto LABEL_23;
  }
  v3 = 1 << *(_BYTE *)(v1 + 32);
  if (v3 < 64)
    v4 = ~(-1 << v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(v1 + 56);
  v12 = (unint64_t)(v3 + 63) >> 6;
  swift_retain();
  if (v5)
  {
    v6 = __clz(__rbit64(v5));
    goto LABEL_20;
  }
  if (v12 > 1)
  {
    v7 = *(_QWORD *)(v1 + 64);
    v8 = 1;
    if (v7)
      goto LABEL_19;
    v8 = 2;
    if (v12 > 2)
    {
      v7 = *(_QWORD *)(v1 + 72);
      if (v7)
        goto LABEL_19;
      v8 = 3;
      if (v12 > 3)
      {
        v7 = *(_QWORD *)(v1 + 80);
        if (!v7)
        {
          v9 = 4;
          if (v12 > 4)
          {
            v7 = *(_QWORD *)(v1 + 88);
            if (v7)
            {
              v8 = 4;
              goto LABEL_19;
            }
            while (1)
            {
              v8 = v9 + 1;
              if (__OFADD__(v9, 1))
              {
                __break(1u);
                JUMPOUT(0x23C0D9D58);
              }
              if (v8 >= v12)
                break;
              v7 = *(_QWORD *)(v1 + 56 + 8 * v8);
              ++v9;
              if (v7)
                goto LABEL_19;
            }
          }
          goto LABEL_21;
        }
LABEL_19:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
LABEL_20:
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 48) + 48 * v6 + 40);
        sub_23C0E4A98();
        __asm { BR              X8 }
      }
    }
  }
LABEL_21:
  result = swift_release_n();
LABEL_23:
  *v0 = v2;
  return result;
}

uint64_t sub_23C0D9D9C(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  int64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  _BYTE v22[48];

  v2 = result;
  i = 0;
  v4 = result + 56;
  v5 = -1 << *(_BYTE *)(result + 32);
  if (-v5 < 64)
    v6 = ~(-1 << -(char)v5);
  else
    v6 = -1;
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(63 - v5) >> 6;
  if (v7)
    goto LABEL_7;
LABEL_8:
  v11 = i + 1;
  if (!__OFADD__(i, 1))
  {
    if (v11 < v8)
    {
      v12 = *(_QWORD *)(v4 + 8 * v11);
      v13 = i + 1;
      if (v12)
        goto LABEL_21;
      v13 = i + 2;
      if (i + 2 >= v8)
        return sub_23C08FEBC();
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (v12)
        goto LABEL_21;
      v13 = i + 3;
      if (i + 3 >= v8)
        return sub_23C08FEBC();
      v12 = *(_QWORD *)(v4 + 8 * v13);
      if (v12)
      {
LABEL_21:
        v7 = (v12 - 1) & v12;
        v10 = __clz(__rbit64(v12)) + (v13 << 6);
        for (i = v13; ; v10 = v9 | (i << 6))
        {
          sub_23C07CAAC(*(_QWORD *)(v2 + 48) + 48 * v10, (uint64_t)v22);
          v15 = *v1;
          sub_23C081C58((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682C0);
          if ((sub_23C07A698((uint64_t)v22, v15) & 1) != 0)
          {
            sub_23C0DBA04((uint64_t)v22, (uint64_t)&v16);
            sub_23C0DD88C(v16, v17, v18, v19, v20, v21);
            result = sub_23C081C58((uint64_t)v22, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682A8);
            if (!v7)
              goto LABEL_8;
          }
          else
          {
            sub_23C0D8DD4((uint64_t)&v16, (uint64_t)v22);
            result = sub_23C0682A8(v16, v17, v18, v19, v20, v21);
            if (!v7)
              goto LABEL_8;
          }
LABEL_7:
          v9 = __clz(__rbit64(v7));
          v7 &= v7 - 1;
        }
      }
      v14 = i + 4;
      if (i + 4 < v8)
      {
        v12 = *(_QWORD *)(v4 + 8 * v14);
        if (v12)
        {
          v13 = i + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v13 = v14 + 1;
          if (__OFADD__(v14, 1))
            goto LABEL_27;
          if (v13 >= v8)
            return sub_23C08FEBC();
          v12 = *(_QWORD *)(v4 + 8 * v13);
          ++v14;
          if (v12)
            goto LABEL_21;
        }
      }
    }
    return sub_23C08FEBC();
  }
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23C0D9F90(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14[5];
  unsigned __int8 v15;
  _BYTE v16[48];

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v2 = result;
  v3 = result + 56;
  v4 = 1 << *(_BYTE *)(result + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(result + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        return swift_release();
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          return swift_release();
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            return swift_release();
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    sub_23C07CAAC(*(_QWORD *)(v2 + 48) + 48 * v10, (uint64_t)v16);
    sub_23C081C58((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682C0);
    sub_23C0DBA04((uint64_t)v16, (uint64_t)v14);
    sub_23C0DD88C(v14[0], v14[1], v14[2], v14[3], v14[4], v15);
    result = sub_23C081C58((uint64_t)v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23C0682A8);
  }
  v13 = v11 + 4;
  if (v13 >= v7)
    return swift_release();
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      return swift_release();
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23C0DA148(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v13;
  _QWORD *v14;

  v2 = a2;
  if (*(_QWORD *)(a2 + 16))
  {
    v14 = (_QWORD *)(a1 + 56);
    v3 = -1 << *(_BYTE *)(a1 + 32);
    if (-v3 < 64)
      v4 = ~(-1 << -(char)v3);
    else
      v4 = -1;
    v5 = v4 & *(_QWORD *)(a1 + 56);
    v13 = (unint64_t)(63 - v3) >> 6;
    v6 = swift_bridgeObjectRetain();
    if (v5)
    {
      v7 = __clz(__rbit64(v5));
      goto LABEL_22;
    }
    if (v13 > 1)
    {
      v8 = v14[1];
      v9 = 1;
      if (v8)
        goto LABEL_21;
      v9 = 2;
      if (v13 > 2)
      {
        v8 = v14[2];
        if (v8)
          goto LABEL_21;
        v9 = 3;
        if (v13 > 3)
        {
          v8 = v14[3];
          if (v8)
            goto LABEL_21;
          v9 = 4;
          if (v13 > 4)
          {
            v8 = v14[4];
            if (!v8)
            {
              v10 = 5;
              if (v13 > 5)
              {
                v8 = v14[5];
                if (v8)
                {
                  v9 = 5;
                  goto LABEL_21;
                }
                while (1)
                {
                  v9 = v10 + 1;
                  if (__OFADD__(v10, 1))
                    __break(1u);
                  if (v9 >= v13)
                    break;
                  v8 = v14[v9];
                  ++v10;
                  if (v8)
                    goto LABEL_21;
                }
              }
              goto LABEL_24;
            }
LABEL_21:
            v7 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_22:
            v11 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 48) + 48 * v7 + 40);
            sub_23C0E4A98();
            __asm { BR              X8 }
          }
        }
      }
    }
LABEL_24:
    sub_23C08FEBC();
    return v2;
  }
  swift_release();
  return MEMORY[0x24BEE4B08];
}

uint64_t sub_23C0DBA04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  char v13;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  _OWORD v21[2];
  uint64_t v22;
  char v23;
  _BYTE v24[48];

  sub_23C07CAAC(a1, (uint64_t)v24);
  v4 = *v2;
  sub_23C0E4A98();
  swift_bridgeObjectRetain();
  FilterItem.hash(into:)();
  v5 = sub_23C0E4AC8();
  v6 = -1 << *(_BYTE *)(v4 + 32);
  v7 = v5 & ~v6;
  if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
  {
    v8 = ~v6;
    while (1)
    {
      v9 = *(_QWORD *)(v4 + 48) + 48 * v7;
      v10 = *(_QWORD *)(v9 + 32);
      v11 = *(_BYTE *)(v9 + 40);
      v12 = *(_OWORD *)(v9 + 16);
      v21[0] = *(_OWORD *)v9;
      v21[1] = v12;
      v22 = v10;
      v23 = v11;
      _s16FitnessFiltering10FilterItemO2eeoiySbAC_ACtFZ_0((uint64_t)v21);
      if ((v13 & 1) != 0)
        break;
      v7 = (v7 + 1) & v8;
      if (((*(_QWORD *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v16 = *v2;
    *(_QWORD *)&v21[0] = *v2;
    *v2 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_23C0D9690();
      v16 = *(_QWORD *)&v21[0];
    }
    v17 = *(_QWORD *)(v16 + 48) + 48 * v7;
    v18 = *(_QWORD *)(v17 + 32);
    v19 = *(_BYTE *)(v17 + 40);
    v20 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v17;
    *(_OWORD *)(a2 + 16) = v20;
    *(_QWORD *)(a2 + 32) = v18;
    *(_BYTE *)(a2 + 40) = v19;
    sub_23C0DD444(v7);
    *v2 = *(_QWORD *)&v21[0];
    return swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_BYTE *)(a2 + 40) = -1;
  }
  return result;
}

uint64_t sub_23C0DBB88(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v19;

  v5 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v19 = v5 - 1;
  v7 = a5[3];
  v6 = a5[4];
  if (v6)
  {
    v8 = (v6 - 1) & v6;
    v9 = __clz(__rbit64(v6)) | (v7 << 6);
    goto LABEL_13;
  }
  v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    JUMPOUT(0x23C0DCE8CLL);
  }
  v11 = (unint64_t)(a5[2] + 64) >> 6;
  if (v10 >= v11)
  {
    v10 = a5[3];
  }
  else
  {
    v12 = a5[1];
    v13 = *(_QWORD *)(v12 + 8 * v10);
    if (v13)
    {
LABEL_12:
      v8 = (v13 - 1) & v13;
      v9 = __clz(__rbit64(v13)) + (v10 << 6);
      v7 = v10;
LABEL_13:
      v15 = *(unsigned __int8 *)(*(_QWORD *)(*a5 + 48) + 48 * v9 + 40);
      a5[3] = v7;
      a5[4] = v8;
      sub_23C0E4A98();
      __asm { BR              X8 }
    }
    v14 = v7 + 2;
    if (v7 + 2 < v11)
    {
      v13 = *(_QWORD *)(v12 + 8 * v14);
      if (v13)
      {
LABEL_8:
        v10 = v14;
        goto LABEL_12;
      }
      if (v7 + 3 < v11)
      {
        v13 = *(_QWORD *)(v12 + 8 * (v7 + 3));
        if (v13)
        {
          v10 = v7 + 3;
          goto LABEL_12;
        }
        v14 = v7 + 4;
        if (v7 + 4 >= v11)
        {
          v10 = v7 + 3;
          goto LABEL_23;
        }
        v13 = *(_QWORD *)(v12 + 8 * v14);
        if (v13)
          goto LABEL_8;
        v10 = v7 + 5;
        if (v7 + 5 < v11)
        {
          v13 = *(_QWORD *)(v12 + 8 * v10);
          if (!v13)
          {
            v10 = v11 - 1;
            v16 = v7 + 6;
            do
            {
              if (v11 == v16)
                goto LABEL_23;
              v13 = *(_QWORD *)(v12 + 8 * v16++);
            }
            while (!v13);
            v10 = v16 - 1;
          }
          goto LABEL_12;
        }
      }
      v10 = v14;
    }
  }
LABEL_23:
  a5[3] = v10;
  a5[4] = 0;
  swift_retain();
  return sub_23C0DCF38(a1, a2, v19, a3);
}

uint64_t sub_23C0DCF38(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  if (!a3)
  {
    v7 = MEMORY[0x24BEE4B08];
    goto LABEL_6;
  }
  if (*(_QWORD *)(a4 + 16) != a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F568);
    v7 = sub_23C0E48DC();
    if (a2 < 1)
      v8 = 0;
    else
      v8 = *a1;
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      goto LABEL_24;
    }
    if (a2 > 1)
    {
      v11 = a1[1];
      v12 = 1;
      if (v11)
        goto LABEL_23;
      v12 = 2;
      if (a2 > 2)
      {
        v11 = a1[2];
        if (v11)
          goto LABEL_23;
        v12 = 3;
        if (a2 > 3)
        {
          v11 = a1[3];
          if (!v11)
          {
            v13 = 4;
            if (a2 > 4)
            {
              v11 = a1[4];
              if (v11)
              {
                v12 = 4;
                goto LABEL_23;
              }
              while (1)
              {
                v12 = v13 + 1;
                if (__OFADD__(v13, 1))
                {
                  __break(1u);
                  JUMPOUT(0x23C0DD400);
                }
                if (v12 >= a2)
                  break;
                v11 = a1[v12];
                ++v13;
                if (v11)
                  goto LABEL_23;
              }
            }
            goto LABEL_6;
          }
LABEL_23:
          v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
          v14 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + 48 * v10 + 40);
          sub_23C0E4A98();
          __asm { BR              X8 }
        }
      }
    }
LABEL_6:
    swift_release();
    return v7;
  }
  return v4;
}

unint64_t sub_23C0DD444(unint64_t result)
{
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = (result + 1) & ~(-1 << *(_BYTE *)(*v1 + 32));
  if (((1 << v5) & *(_QWORD *)(v4 + 8 * (v5 >> 6))) != 0)
  {
    swift_retain();
    sub_23C0E48AC();
    if ((*(_QWORD *)(v4 + 8 * (v5 >> 6)) & (1 << v5)) != 0)
    {
      v6 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 48 * v5 + 40);
      sub_23C0E4A98();
      __asm { BR              X8 }
    }
    *(_QWORD *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v7 = *(_QWORD *)(v3 + 16);
  v8 = __OFSUB__(v7, 1);
  v9 = v7 - 1;
  if (v8)
  {
    __break(1u);
    JUMPOUT(0x23C0DD848);
  }
  *(_QWORD *)(v3 + 16) = v9;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

uint64_t sub_23C0DD88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  if (a6 != 0xFF)
    return sub_23C0682A8(a1, a2, a3, a4, a5, a6);
  return a1;
}

BOOL static FilterLayout.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((MEMORY[0x242616098]() & 1) == 0)
    return 0;
  v4 = type metadata accessor for FilterLayout();
  return *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20));
}

uint64_t type metadata accessor for FilterLayout()
{
  uint64_t result;

  result = qword_256B112C8;
  if (!qword_256B112C8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FilterLayout.init(contentMargins:sizeClass:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = sub_23C0E3F4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for FilterLayout();
  *(_BYTE *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t sub_23C0DD984()
{
  _BYTE *v0;

  if (*v0)
    return 0x73616C43657A6973;
  else
    return 0x4D746E65746E6F63;
}

uint64_t sub_23C0DD9D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0DE7E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0DD9F4()
{
  sub_23C0DDBAC();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0DDA1C()
{
  sub_23C0DDBAC();
  return sub_23C0E4AF8();
}

uint64_t FilterLayout.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11230);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0DDBAC();
  sub_23C0E4AE0();
  v10[15] = 0;
  sub_23C0E3F4C();
  sub_23C0683A4(&qword_256B11240, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BA8]);
  sub_23C0E4A44();
  if (!v2)
  {
    v10[14] = *(_BYTE *)(v3 + *(int *)(type metadata accessor for FilterLayout() + 20));
    v10[13] = 1;
    sub_23C0DDBF0();
    sub_23C0E4A44();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23C0DDBAC()
{
  unint64_t result;

  result = qword_256B11238;
  if (!qword_256B11238)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ECD2C, &type metadata for FilterLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11238);
  }
  return result;
}

unint64_t sub_23C0DDBF0()
{
  unint64_t result;

  result = qword_256B11248;
  if (!qword_256B11248)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSizeClass, &type metadata for FilterSizeClass);
    atomic_store(result, (unint64_t *)&qword_256B11248);
  }
  return result;
}

uint64_t FilterLayout.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v20 = a2;
  v24 = sub_23C0E3F4C();
  v21 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v22 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11250);
  v5 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FilterLayout();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0DDBAC();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v18 = a1;
  v19 = v5;
  v11 = (uint64_t)v10;
  v12 = v21;
  v27 = 0;
  sub_23C0683A4(&qword_256B11258, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB8]);
  v14 = v22;
  v13 = v23;
  v15 = v24;
  sub_23C0E49C0();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v14, v15);
  v25 = 1;
  sub_23C0DDEBC();
  sub_23C0E49C0();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v7, v13);
  *(_BYTE *)(v11 + *(int *)(v8 + 20)) = v26;
  sub_23C0DDF00(v11, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return sub_23C0DDF44(v11);
}

unint64_t sub_23C0DDEBC()
{
  unint64_t result;

  result = qword_256B11260;
  if (!qword_256B11260)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSizeClass, &type metadata for FilterSizeClass);
    atomic_store(result, (unint64_t *)&qword_256B11260);
  }
  return result;
}

uint64_t sub_23C0DDF00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilterLayout();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23C0DDF44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FilterLayout();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23C0DDF80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FilterLayout.init(from:)(a1, a2);
}

uint64_t sub_23C0DDF94(_QWORD *a1)
{
  return FilterLayout.encode(to:)(a1);
}

uint64_t FilterLayout.hash(into:)()
{
  sub_23C0E3F4C();
  sub_23C0683A4(&qword_256B101A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB0]);
  sub_23C0E4714();
  type metadata accessor for FilterLayout();
  return sub_23C0E4AA4();
}

uint64_t FilterLayout.hashValue.getter()
{
  sub_23C0E4A98();
  sub_23C0E3F4C();
  sub_23C0683A4(&qword_256B101A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB0]);
  sub_23C0E4714();
  type metadata accessor for FilterLayout();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0DE0A0()
{
  sub_23C0E4A98();
  sub_23C0E3F4C();
  sub_23C0683A4(&qword_256B101A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB0]);
  sub_23C0E4714();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0DE128()
{
  sub_23C0E3F4C();
  sub_23C0683A4(&qword_256B101A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB0]);
  sub_23C0E4714();
  return sub_23C0E4AA4();
}

uint64_t sub_23C0DE198()
{
  sub_23C0E4A98();
  sub_23C0E3F4C();
  sub_23C0683A4(&qword_256B101A8, (uint64_t (*)(uint64_t))MEMORY[0x24BE34B98], MEMORY[0x24BE34BB0]);
  sub_23C0E4714();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0DE21C()
{
  return sub_23C0683A4(&qword_256B11268, (uint64_t (*)(uint64_t))type metadata accessor for FilterLayout, (uint64_t)&protocol conformance descriptor for FilterLayout);
}

BOOL sub_23C0DE248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (MEMORY[0x242616098]() & 1) != 0
      && *(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(a3 + 20));
}

_QWORD *initializeBufferWithCopyOfBuffer for FilterLayout(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23C0E3F4C();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for FilterLayout(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23C0E3F4C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for FilterLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C0E3F4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for FilterLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C0E3F4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for FilterLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C0E3F4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for FilterLayout(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_23C0E3F4C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterLayout()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0DE4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = sub_23C0E3F4C();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 6)
    return v9 - 5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FilterLayout()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0DE554(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_23C0E3F4C();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 5;
  return result;
}

uint64_t sub_23C0DE5CC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23C0E3F4C();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FilterLayout.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C0DE688 + 4 * byte_23C0ECB75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C0DE6BC + 4 * byte_23C0ECB70[v4]))();
}

uint64_t sub_23C0DE6BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0DE6C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0DE6CCLL);
  return result;
}

uint64_t sub_23C0DE6D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0DE6E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C0DE6E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0DE6EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterLayout.CodingKeys()
{
  return &type metadata for FilterLayout.CodingKeys;
}

unint64_t sub_23C0DE70C()
{
  unint64_t result;

  result = qword_256B11300;
  if (!qword_256B11300)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ECD04, &type metadata for FilterLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11300);
  }
  return result;
}

unint64_t sub_23C0DE754()
{
  unint64_t result;

  result = qword_256B11308;
  if (!qword_256B11308)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ECC74, &type metadata for FilterLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11308);
  }
  return result;
}

unint64_t sub_23C0DE79C()
{
  unint64_t result;

  result = qword_256B11310;
  if (!qword_256B11310)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ECC9C, &type metadata for FilterLayout.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11310);
  }
  return result;
}

uint64_t sub_23C0DE7E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4D746E65746E6F63 && a2 == 0xEE00736E69677261;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x73616C43657A6973 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23C0DE900(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    MEMORY[0x24BDAC7A8](a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return sub_23C0E46C0();
  }
  MEMORY[0x24BDAC7A8](a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata();
  MEMORY[0x24BDAC7A8](TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return sub_23C0E46C0();
}

uint64_t sub_23C0DEAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = sub_23C0E4174();
  MEMORY[0x24BDAC7A8](v4);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v7 - v5, a1, a2);
  swift_storeEnumTagMultiPayload();
  return sub_23C0E4180();
}

uint64_t sub_23C0DEB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v5 = sub_23C0E4174();
  MEMORY[0x24BDAC7A8](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v8 - v6, a1, a3);
  swift_storeEnumTagMultiPayload();
  return sub_23C0E4180();
}

uint64_t FilterResultsView.init(store:canvasViewBuilder:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_QWORD *)a5 = sub_23C0C49EC;
  *(_QWORD *)(a5 + 8) = result;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = a3;
  *(_QWORD *)(a5 + 32) = a4;
  return result;
}

uint64_t sub_23C0DECA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C0DECC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_23C0E3ED4();
  MEMORY[0x24BDAC7A8](v2);
  v3 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v3);
  if (*a1 && sub_23C07A784(6u, a1[8]))
  {
    sub_23C0E472C();
    if (qword_256B0EF30 == -1)
      goto LABEL_6;
    goto LABEL_7;
  }
  sub_23C0E472C();
  if (qword_256B0EF30 != -1)
LABEL_7:
    swift_once();
LABEL_6:
  (id)qword_256B21860;
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  return sub_23C0E4798();
}

uint64_t FilterResultsView.body.getter(uint64_t a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B11318);
  v3 = *(_QWORD *)(a1 + 16);
  swift_getTupleTypeMetadata2();
  v4 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v4);
  v5 = sub_23C0E4618();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB0);
  v6 = sub_23C0E418C();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v18 - v8;
  v10 = v1[1];
  v22 = *v1;
  v23 = v10;
  v24 = *((_QWORD *)v1 + 4);
  v11 = v1[1];
  v19 = *v1;
  v20 = v11;
  v21 = *((_QWORD *)v1 + 4);
  sub_23C0DF0F0(a1, (uint64_t)v18 - v8);
  v12 = swift_allocObject();
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v12 + 16) = v3;
  *(_QWORD *)(v12 + 24) = v13;
  v14 = v23;
  *(_OWORD *)(v12 + 32) = v22;
  *(_OWORD *)(v12 + 48) = v14;
  *(_QWORD *)(v12 + 64) = v24;
  sub_23C0C72D0((uint64_t)&v22);
  v15 = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v5);
  v16 = sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
  v18[0] = v15;
  v18[1] = v16;
  MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v6, v18);
  sub_23C0E451C();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_23C0DF0F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[2];
  uint64_t v94;
  __int16 v95;
  _OWORD v96[2];
  uint64_t v97;
  _QWORD v98[9];
  _BYTE v99[280];
  _OWORD v100[2];
  uint64_t v101;

  v92 = a2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B11318);
  v87 = *(_QWORD *)(a1 + 16);
  swift_getTupleTypeMetadata2();
  v88 = sub_23C0E46B4();
  v86 = MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v88);
  v4 = sub_23C0E4618();
  v90 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v91 = (uint64_t)v57 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB0);
  v10 = sub_23C0E418C();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v57 - v12;
  v14 = *(_OWORD *)(v2 + 16);
  v96[0] = *(_OWORD *)v2;
  v96[1] = v14;
  v97 = *(_QWORD *)(v2 + 32);
  v15 = *(_OWORD *)(v2 + 16);
  v100[0] = *(_OWORD *)v2;
  v100[1] = v15;
  v101 = *(_QWORD *)(v2 + 32);
  v89 = a1;
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C07C14C(&v94, v99);
  sub_23C07C14C(v99, v100);
  v16 = sub_23C07C1BC((uint64_t)v100);
  if ((v16 - 2) >= 2)
  {
    v75 = v7;
    v76 = v4;
    v77 = v13;
    v78 = v10;
    v82 = v9;
    v83 = v11;
    if (v16)
    {
      v34 = nullsub_1(v100);
      v35 = *(_QWORD *)v34;
      v72 = *(_QWORD *)(v34 + 8);
      v73 = (_QWORD *)v35;
      v36 = *(_QWORD *)(v34 + 16);
      v70 = *(_QWORD *)(v34 + 32);
      v71 = v36;
      v37 = *(_QWORD *)(v34 + 40);
      v68 = *(_QWORD *)(v34 + 48);
      v69 = v37;
      v38 = *(_QWORD *)(v34 + 56);
      v66 = *(_QWORD *)(v34 + 64);
      v67 = v38;
      v39 = *(_QWORD *)(v34 + 72);
      v64 = *(_QWORD *)(v34 + 80);
      v65 = v39;
      v40 = *(_QWORD *)(v34 + 88);
      v41 = *(_QWORD *)(v34 + 104);
      v61 = *(_QWORD *)(v34 + 96);
      v62 = v40;
      v42 = *(_QWORD *)(v34 + 112);
      v59 = *(_QWORD *)(v34 + 128);
      v60 = v42;
      v43 = *(_QWORD *)(v34 + 144);
      v57[1] = *(_QWORD *)(v34 + 152);
      v58 = v43;
      v44 = *(_QWORD *)(v34 + 168);
      v57[0] = *(_QWORD *)(v34 + 160);
      v45 = *(_QWORD *)(v34 + 176);
      v27 = *(_QWORD *)(v34 + 192);
      v80 = *(_QWORD *)(v34 + 184);
      v81 = v45;
      v29 = *(_QWORD *)(v34 + 200);
      v46 = *(_QWORD *)(v34 + 208);
      v30 = *(_QWORD *)(v34 + 216);
      v84 = *(_QWORD *)(v34 + 224);
      v85 = v46;
      v32 = *(_QWORD *)(v34 + 232);
      v31 = *(_QWORD *)(v34 + 240);
      v79 = *(_QWORD *)(v34 + 248);
      v74 = *(_QWORD *)(v34 + 256);
      LODWORD(v63) = *(unsigned __int8 *)(v34 + 24);
      swift_bridgeObjectRelease();
      v55 = v44;
      sub_23C07C920(v41);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v33 = sub_23C07CA24((uint64_t)v73);
    }
    else
    {
      v17 = (uint64_t *)nullsub_1(v100);
      v18 = *v17;
      v72 = v17[1];
      v73 = (_QWORD *)v18;
      v19 = v17[2];
      v70 = v17[3];
      v71 = v19;
      v20 = v17[4];
      v68 = v17[5];
      v69 = v20;
      v21 = v17[6];
      v22 = v17[8];
      v66 = v17[7];
      v67 = v21;
      v79 = v17[9];
      v23 = v17[10];
      v24 = v17[11];
      v25 = v17[12];
      v60 = v17[13];
      v61 = v25;
      v58 = v17[14];
      v64 = v17[19];
      v65 = v23;
      v62 = v17[21];
      v63 = v24;
      v26 = v17[23];
      v27 = v17[25];
      v80 = v17[24];
      v81 = v26;
      v29 = v17[26];
      v28 = v17[27];
      v30 = v17[28];
      v84 = v17[29];
      v85 = v28;
      v32 = v17[30];
      v31 = v17[31];
      v74 = v17[32];
      v59 = v17[33];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v55 = v22;
      v33 = sub_23C07C920((uint64_t)v73);
    }
    v72 = v29;
    v73 = v57;
    v47 = v81;
    v98[0] = v81;
    v98[1] = v80;
    v98[2] = v27;
    v98[3] = v29;
    v98[4] = v85;
    v98[5] = v30;
    v98[6] = v84;
    v71 = v32;
    v98[7] = v32;
    v98[8] = v31;
    MEMORY[0x24BDAC7A8](v33);
    v48 = *(_QWORD *)(v89 + 24);
    v57[-6] = v87;
    v57[-5] = v48;
    v57[-4] = v96;
    v57[-3] = v98;
    v56 = v79;
    sub_23C0E4150();
    v49 = (uint64_t)v75;
    sub_23C0E460C();
    v55 = v31;
    sub_23C07C9B8(v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v76;
    MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v76);
    v50 = v91;
    sub_23C06E920(v49, v4, v91);
    v51 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v51(v49, v4);
    sub_23C06B980(v50, v4, v49);
    sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
    v13 = v77;
    sub_23C0DEAB4(v49, v4);
    v51(v49, v4);
    v51(v50, v4);
    v11 = v83;
    v10 = v78;
  }
  else
  {
    v94 = sub_23C0E4558();
    v95 = 256;
    MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v4);
    sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
    sub_23C0DEB78((uint64_t)&v94, v4, v9);
    swift_release();
  }
  v52 = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v4);
  v53 = sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
  v93[0] = v52;
  v93[1] = v53;
  MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v10, v93);
  sub_23C06B980((uint64_t)v13, v10, v92);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_23C0DF798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;

  v6 = type metadata accessor for FilterAction();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v9;
  v13 = *(_QWORD *)(a1 + 32);
  type metadata accessor for FilterResultsView(0, a2, a3, v10);
  sub_23C0C48F0();
  swift_storeEnumTagMultiPayload();
  sub_23C0E4708();
  swift_release();
  return sub_23C095BAC((uint64_t)v8);
}

uint64_t sub_23C0DF864()
{
  uint64_t v0;

  return sub_23C0DF798(v0 + 32, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C0DF870()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for FilterResultsView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FilterResultsView);
}

uint64_t sub_23C0DF8B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[2];

  __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B11318);
  swift_getTupleTypeMetadata2();
  v0 = sub_23C0E46B4();
  MEMORY[0x242616E9C](MEMORY[0x24BDF5428], v0);
  v1 = sub_23C0E4618();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B10BB0);
  v2 = sub_23C0E418C();
  v3 = sub_23C0E4024();
  v6[0] = MEMORY[0x242616E9C](MEMORY[0x24BDF4700], v1);
  v6[1] = sub_23C06E774(&qword_256B10BC0, &qword_256B10BB0, MEMORY[0x24BDEB358]);
  v5[0] = MEMORY[0x242616E9C](MEMORY[0x24BDEF3E0], v2, v6);
  v5[1] = MEMORY[0x24BDF0910];
  return MEMORY[0x242616E9C](MEMORY[0x24BDED308], v3, v5);
}

uint64_t sub_23C0DF9D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *, uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char v71;
  __int128 v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  __int128 v101;
  double v102;
  double v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char v115;
  char v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(char *, char *, uint64_t);
  char *v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t);
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t);
  uint64_t v136;
  __int128 *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void (*v144)(char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  __int128 *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD v178[2];
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  _BYTE v182[280];
  _OWORD v183[2];
  uint64_t v184;

  v146 = a4;
  v143 = a2;
  v144 = a3;
  v172 = a7;
  v168 = *(_QWORD *)(a5 - 8);
  v10 = MEMORY[0x24BDAC7A8](a1);
  v170 = (char *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v169 = (char *)&v138 - v12;
  v13 = sub_23C0E4270();
  v160 = *(_QWORD *)(v13 - 8);
  v161 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v158 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23C0E41F8();
  v150 = *(_QWORD *)(v15 - 8);
  v151 = v15;
  MEMORY[0x24BDAC7A8](v15);
  v149 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113A0);
  v148 = *(_QWORD *)(v165 - 8);
  MEMORY[0x24BDAC7A8](v165);
  v147 = (char *)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113A8);
  v154 = *(_QWORD *)(v18 - 8);
  v155 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v153 = (char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113B0);
  v157 = *(_QWORD *)(v159 - 8);
  v20 = MEMORY[0x24BDAC7A8](v159);
  v22 = (char *)&v138 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x24BDAC7A8](v20);
  v152 = (char *)&v138 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v156 = (char *)&v138 - v25;
  v26 = type metadata accessor for FilterLayout();
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v138 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113B8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v138 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113C0);
  MEMORY[0x24BDAC7A8](v140);
  v33 = (char *)&v138 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113C8);
  MEMORY[0x24BDAC7A8](v141);
  v145 = (uint64_t)&v138 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v142 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113D0);
  v35 = MEMORY[0x24BDAC7A8](v142);
  v164 = (uint64_t)&v138 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v35);
  v163 = (uint64_t)&v138 - v37;
  v38 = __swift_instantiateConcreteTypeFromMangledName(qword_256B11318);
  v39 = MEMORY[0x24BDAC7A8](v38);
  v167 = (uint64_t)&v138 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v166 = (uint64_t)&v138 - v41;
  v42 = *(_OWORD *)(a1 + 16);
  v183[0] = *(_OWORD *)a1;
  v183[1] = v42;
  v173 = (__int128 *)a1;
  v174 = a5;
  v184 = *(_QWORD *)(a1 + 32);
  v175 = a6;
  v162 = type metadata accessor for FilterResultsView(0, a5, a6, v43);
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C07C14C(&v179, v182);
  sub_23C07C14C(v182, v183);
  v44 = sub_23C07C1BC((uint64_t)v183);
  v171 = v38;
  if ((v44 - 2) < 2)
    goto LABEL_2;
  if (v44)
  {
    v57 = nullsub_1(v183);
    v53 = *(_QWORD *)v57;
    v58 = *(_QWORD *)(v57 + 8);
    v55 = *(_QWORD *)(v57 + 16);
    v56 = *(unsigned __int8 *)(v57 + 24);
    sub_23C077A18(*(_QWORD *)v57);
    sub_23C0E063C((uint64_t)v182);
    if (!v53)
    {
LABEL_2:
      v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113D8);
      v46 = v166;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v166, 1, 1, v45);
      v49 = (uint64_t)v169;
      v48 = (uint64_t)v170;
      v50 = v167;
      v51 = v168;
      goto LABEL_12;
    }
    v139 = v22;
    v54 = v58 & 1;
  }
  else
  {
    v139 = v22;
    v52 = nullsub_1(v183);
    v53 = *(_QWORD *)(v52 + 152);
    v54 = *(unsigned __int8 *)(v52 + 160);
    v55 = *(_QWORD *)(v52 + 168);
    v56 = *(unsigned __int8 *)(v52 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_23C0E063C((uint64_t)v182);
  }
  *(_QWORD *)v31 = sub_23C0E4114();
  *((_QWORD *)v31 + 1) = 0;
  v31[16] = 1;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113F0);
  v60 = v173;
  sub_23C0E06BC(v173, v143, (uint64_t)v144, v53, v54, v55, v56, v174, (uint64_t)&v31[*(int *)(v59 + 44)], v175);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v61 = sub_23C0E42F4();
  sub_23C0E3F7C();
  v63 = v62;
  v65 = v64;
  v67 = v66;
  v69 = v68;
  sub_23C068360((uint64_t)v31, (uint64_t)v33, &qword_256B113B8);
  v70 = &v33[*(int *)(v140 + 36)];
  *v70 = v61;
  *((_QWORD *)v70 + 1) = v63;
  *((_QWORD *)v70 + 2) = v65;
  *((_QWORD *)v70 + 3) = v67;
  *((_QWORD *)v70 + 4) = v69;
  v70[40] = 0;
  sub_23C06E834((uint64_t)v31, &qword_256B113B8);
  v71 = sub_23C0E430C();
  v72 = v60[1];
  v179 = *v60;
  v180 = v72;
  v181 = *((_QWORD *)v60 + 4);
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E3F34();
  v73 = sub_23C0E3F4C();
  v74 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v73 - 8) + 8);
  v74(v28, v73);
  v144 = v74;
  sub_23C0E3F7C();
  v76 = v75;
  v78 = v77;
  v80 = v79;
  v82 = v81;
  v83 = v145;
  sub_23C068360((uint64_t)v33, v145, &qword_256B113C0);
  v84 = v83 + *(int *)(v141 + 36);
  *(_BYTE *)v84 = v71;
  *(_QWORD *)(v84 + 8) = v76;
  *(_QWORD *)(v84 + 16) = v78;
  *(_QWORD *)(v84 + 24) = v80;
  *(_QWORD *)(v84 + 32) = v82;
  *(_BYTE *)(v84 + 40) = 0;
  sub_23C06E834((uint64_t)v33, &qword_256B113C0);
  v85 = sub_23C0E4324();
  v86 = v60[1];
  v179 = *v60;
  v180 = v86;
  v181 = *((_QWORD *)v60 + 4);
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E3F40();
  v74(v28, v73);
  sub_23C0E3F7C();
  v88 = v87;
  v90 = v89;
  v92 = v91;
  v94 = v93;
  v95 = v164;
  sub_23C068360(v83, v164, &qword_256B113C8);
  v96 = v95 + *(int *)(v142 + 36);
  *(_BYTE *)v96 = v85;
  *(_QWORD *)(v96 + 8) = v88;
  *(_QWORD *)(v96 + 16) = v90;
  *(_QWORD *)(v96 + 24) = v92;
  *(_QWORD *)(v96 + 32) = v94;
  *(_BYTE *)(v96 + 40) = 0;
  sub_23C06E834(v83, &qword_256B113C8);
  sub_23C06E7B4(v95, v163, &qword_256B113D0);
  v97 = sub_23C0E42B8();
  MEMORY[0x24BDAC7A8](v97);
  v98 = v175;
  *(&v138 - 4) = v174;
  *(&v138 - 3) = v98;
  v136 = v146;
  v137 = v60;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B113F8);
  sub_23C06E774(&qword_256B11400, &qword_256B113F8, MEMORY[0x24BDF4498]);
  v99 = v147;
  sub_23C0E3FAC();
  v100 = sub_23C0E42DC();
  v101 = v60[1];
  v179 = *v60;
  v180 = v101;
  v181 = *((_QWORD *)v60 + 4);
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E3F1C();
  v103 = v102;
  v105 = v104;
  v107 = v106;
  v109 = v108;
  v144(v28, v73);
  v110 = v149;
  sub_23C0E41EC();
  v111 = sub_23C06E774(&qword_256B11408, &qword_256B113A0, MEMORY[0x24BDEB238]);
  v112 = v153;
  v113 = v165;
  MEMORY[0x2426165CC](v100, v110, v165, v111, v103, v105, v107, v109);
  (*(void (**)(char *, uint64_t))(v150 + 8))(v110, v151);
  (*(void (**)(char *, uint64_t))(v148 + 8))(v99, v113);
  v114 = v158;
  sub_23C0E4198();
  LOBYTE(v110) = sub_23C0E42D0();
  v115 = sub_23C0E42B8();
  sub_23C0E42C4();
  sub_23C0E42C4();
  if (sub_23C0E42C4() != v110)
    sub_23C0E42C4();
  sub_23C0E42C4();
  v116 = sub_23C0E42C4();
  v49 = (uint64_t)v169;
  v117 = v139;
  if (v116 != v115)
    sub_23C0E42C4();
  *(_QWORD *)&v179 = v165;
  *((_QWORD *)&v179 + 1) = v111;
  swift_getOpaqueTypeConformance2();
  v118 = v152;
  v119 = v155;
  sub_23C0E4474();
  (*(void (**)(char *, uint64_t))(v160 + 8))(v114, v161);
  (*(void (**)(char *, uint64_t))(v154 + 8))(v112, v119);
  v121 = v156;
  v120 = v157;
  v122 = v118;
  v123 = v159;
  (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v156, v122, v159);
  v125 = v163;
  v124 = v164;
  sub_23C068360(v163, v164, &qword_256B113D0);
  v126 = *(void (**)(char *, char *, uint64_t))(v120 + 16);
  v126(v117, v121, v123);
  v127 = v117;
  v50 = v167;
  sub_23C068360(v124, v167, &qword_256B113D0);
  v128 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11410);
  v126((char *)(v50 + *(int *)(v128 + 48)), v127, v123);
  v129 = *(void (**)(char *, uint64_t))(v120 + 8);
  v129(v121, v123);
  sub_23C06E834(v125, &qword_256B113D0);
  v129(v127, v123);
  sub_23C06E834(v124, &qword_256B113D0);
  v130 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B113D8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v50, 0, 1, v130);
  v46 = v166;
  v47 = sub_23C06E7B4(v50, v166, qword_256B11318);
  v48 = (uint64_t)v170;
  v51 = v168;
LABEL_12:
  (*((void (**)(uint64_t))v173 + 3))(v47);
  v132 = v174;
  v131 = v175;
  sub_23C06E920(v48, v174, v49);
  v133 = v49;
  v134 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v134(v48, v132);
  sub_23C068360(v46, v50, qword_256B11318);
  *(_QWORD *)&v179 = v50;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16))(v48, v133, v132);
  *((_QWORD *)&v179 + 1) = v48;
  v178[0] = v171;
  v178[1] = v132;
  v176 = sub_23C0E05C0();
  v177 = v131;
  sub_23C0DE900((uint64_t *)&v179, 2uLL, (uint64_t)v178);
  v134(v133, v132);
  sub_23C06E834(v46, qword_256B11318);
  v134(v48, v132);
  return sub_23C06E834(v50, qword_256B11318);
}

uint64_t sub_23C0E05B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C0DF9D4(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(char *, uint64_t))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_23C0E05C0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B113E0;
  if (!qword_256B113E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_256B11318);
    v2 = sub_23C06E774(&qword_256B113E8, &qword_256B113D8, MEMORY[0x24BDF5428]);
    result = MEMORY[0x242616E9C](MEMORY[0x24BDF5578], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B113E0);
  }
  return result;
}

uint64_t sub_23C0E063C(uint64_t a1)
{
  __int128 v3;
  __int128 v4;

  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  sub_23C07C6D0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264),
    *(_BYTE *)(a1 + 272));
  return a1;
}

uint64_t sub_23C0E06BC@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v47[2];
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[9];
  __int128 v59;
  __int128 v60;
  uint64_t v61;

  v51 = a7;
  v50 = a6;
  v48 = a5;
  v49 = a4;
  v54 = a3;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11430);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v57 = (uint64_t)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)v47 - v17;
  v19 = a1[1];
  v59 = *a1;
  v60 = v19;
  v61 = *((_QWORD *)a1 + 4);
  sub_23C06E7B4(a2, (uint64_t)v58, &qword_256B0F438);
  v52 = a10;
  v53 = a8;
  type metadata accessor for FilterResultsView(0, a8, a10, v20);
  v58[0] = sub_23C0DECC8(v58);
  v58[1] = v21;
  sub_23C06DB6C();
  v22 = sub_23C0E43CC();
  v24 = v23;
  LOBYTE(a2) = v25 & 1;
  sub_23C0E436C();
  sub_23C0E433C();
  swift_release();
  v26 = sub_23C0E43B4();
  v56 = v27;
  v55 = v28;
  v30 = v29;
  swift_release();
  sub_23C06DBB0(v22, v24, a2);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v32 = KeyPath;
  if (*(_QWORD *)(v54 + 16))
  {
    v47[1] = v47;
    v33 = MEMORY[0x24BDAC7A8](KeyPath);
    v34 = v52;
    v47[-8] = v53;
    v47[-7] = v34;
    v35 = v49;
    v47[-6] = a1;
    v47[-5] = v35;
    LOBYTE(v47[-4]) = v36;
    v47[-3] = v50;
    LOBYTE(v47[-2]) = v51;
    v47[-1] = v37;
    MEMORY[0x24BDAC7A8](v33);
    v47[-4] = v38;
    v47[-3] = v39;
    v47[-2] = a1;
    v54 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11438);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B11440);
    sub_23C06E774(&qword_256B11448, &qword_256B11438, MEMORY[0x24BDF41A8]);
    sub_23C06E774(&qword_256B11450, &qword_256B11440, MEMORY[0x24BDF4570]);
    sub_23C0E4384();
    v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11458);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v18, 0, 1, v40);
  }
  else
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11458);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v18, 1, 1, v41);
  }
  v42 = v55 & 1;
  v43 = v57;
  sub_23C068360((uint64_t)v18, v57, &qword_256B11430);
  v44 = v56;
  *(_QWORD *)a9 = v26;
  *(_QWORD *)(a9 + 8) = v44;
  *(_BYTE *)(a9 + 16) = v42;
  *(_QWORD *)(a9 + 24) = v30;
  *(_QWORD *)(a9 + 32) = v32;
  *(_BYTE *)(a9 + 40) = 0;
  *(_QWORD *)(a9 + 48) = 0;
  *(_BYTE *)(a9 + 56) = 1;
  v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11460);
  sub_23C068360(v43, a9 + *(int *)(v45 + 64), &qword_256B11430);
  sub_23C06DE1C(v26, v44, v42);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23C06E834((uint64_t)v18, &qword_256B11430);
  sub_23C06E834(v43, &qword_256B11430);
  sub_23C06DBB0(v26, v44, v42);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23C0E0AB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  void *v19;
  __int128 v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  char v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;

  v47 = a6;
  v46 = a5;
  v45 = a4;
  v50 = a9;
  v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11438);
  MEMORY[0x24BDAC7A8](v49);
  v48 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_23C0E3ED4();
  MEMORY[0x24BDAC7A8](v15);
  v16 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v16);
  sub_23C0E472C();
  if (qword_256B0EF30 != -1)
    swift_once();
  v18 = a3 & 1;
  v19 = (void *)qword_256B21860;
  v20 = *(_OWORD *)(a1 + 16);
  v55 = *(_OWORD *)a1;
  v56 = v20;
  v57 = *(_QWORD *)(a1 + 32);
  type metadata accessor for FilterResultsView(0, a7, a8, v17);
  v21 = v19;
  v43 = a8;
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  v44 = sub_23C0E4798();
  v23 = v22;
  sub_23C0E484C();
  swift_bridgeObjectRetain();
  v24 = a2;
  v25 = v45;
  swift_bridgeObjectRetain();
  v26 = sub_23C0E4840();
  v27 = swift_allocObject();
  v28 = MEMORY[0x24BEE6930];
  *(_QWORD *)(v27 + 16) = v26;
  *(_QWORD *)(v27 + 24) = v28;
  *(_QWORD *)(v27 + 32) = v24;
  *(_BYTE *)(v27 + 40) = v18;
  *(_QWORD *)(v27 + 48) = v25;
  *(_BYTE *)(v27 + 56) = v46;
  sub_23C0C72D0(a1);
  v29 = sub_23C0E4840();
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = v29;
  *(_QWORD *)(v30 + 24) = v28;
  v31 = v43;
  *(_QWORD *)(v30 + 32) = a7;
  *(_QWORD *)(v30 + 40) = v31;
  v32 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v30 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v30 + 64) = v32;
  *(_QWORD *)(v30 + 80) = *(_QWORD *)(a1 + 32);
  v33 = sub_23C0E4624();
  v34 = v55;
  v35 = MEMORY[0x24BDAC7A8](v33);
  *(&v42 - 4) = a7;
  *(&v42 - 3) = v31;
  MEMORY[0x24BDAC7A8](v35);
  v53 = v34;
  v54 = v36;
  v51 = v44;
  v52 = v23;
  sub_23C06DB6C();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_23C0E45B8();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B11468);
  sub_23C06E774(&qword_256B11448, &qword_256B11438, MEMORY[0x24BDF41A8]);
  v37 = sub_23C0E190C();
  v38 = sub_23C0E1950();
  v40 = v37;
  v41 = v38;
  sub_23C0E4600();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_23C0E0EBC(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  __int128 v13;
  uint64_t v14;
  _OWORD v16[2];
  uint64_t v17;

  v10 = type metadata accessor for FilterAction();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *a1;
  v13 = *(_OWORD *)(a4 + 16);
  v16[0] = *(_OWORD *)a4;
  v16[1] = v13;
  v17 = *(_QWORD *)(a4 + 32);
  type metadata accessor for FilterResultsView(0, a5, a6, v14);
  sub_23C0C48F0();
  *v12 = (_BYTE)a1;
  swift_storeEnumTagMultiPayload();
  sub_23C0E4708();
  swift_release();
  return sub_23C095BAC((uint64_t)v12);
}

uint64_t sub_23C0E0F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;

  swift_getKeyPath();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 48) = v8;
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_23C0C72D0(a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B102D0);
  sub_23C06E774(&qword_256B11480, &qword_256B102D0, MEMORY[0x24BEE12D8]);
  sub_23C0E190C();
  return sub_23C0E463C();
}

uint64_t sub_23C0E109C@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v10 = sub_23C0E3ED4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a1) = *a1;
  v14 = *(_OWORD *)(a2 + 16);
  v24[0] = *(_OWORD *)a2;
  v24[1] = v14;
  v25 = *(_QWORD *)(a2 + 32);
  type metadata accessor for FilterResultsView(0, a3, a4, v15);
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0D070C((uint64_t)v13, (char)a1);
  v17 = v16;
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *(_QWORD *)&v24[0] = v17;
  *((_QWORD *)&v24[0] + 1) = v19;
  sub_23C06DB6C();
  result = sub_23C0E43CC();
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v21;
  *(_BYTE *)(a5 + 16) = v22 & 1;
  *(_QWORD *)(a5 + 24) = v23;
  return result;
}

uint64_t sub_23C0E11C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v5 = sub_23C0E3ED4();
  MEMORY[0x24BDAC7A8](v5);
  v6 = sub_23C0E4780();
  MEMORY[0x24BDAC7A8](v6);
  sub_23C0E472C();
  if (qword_256B0EF30 != -1)
    swift_once();
  v8 = (void *)qword_256B21860;
  type metadata accessor for FilterResultsView(0, a2, a3, v7);
  v9 = v8;
  sub_23C0C48F0();
  swift_getKeyPath();
  sub_23C0E46FC();
  swift_release();
  swift_release();
  sub_23C0E4798();
  sub_23C06DB6C();
  return sub_23C0E45B8();
}

uint64_t sub_23C0E1380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = sub_23C0E4114();
  *(_QWORD *)(a5 + 8) = 0;
  *(_BYTE *)(a5 + 16) = 1;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B11418);
  return sub_23C0E1400(a1, a2, a3, a4);
}

uint64_t sub_23C0E13F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23C0E1380(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t sub_23C0E1400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;

  swift_getKeyPath();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a3;
  *(_QWORD *)(v7 + 24) = a4;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v7 + 48) = v8;
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  sub_23C0C72D0(a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256B102B8);
  sub_23C06E774(&qword_256B11420, &qword_256B102B8, MEMORY[0x24BEE12D8]);
  sub_23C090094();
  sub_23C0E15E4();
  return sub_23C0E463C();
}

uint64_t sub_23C0E150C@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[4];

  v10 = a1[1];
  v18[0] = *a1;
  v18[1] = v10;
  v11 = a1[3];
  v18[2] = a1[2];
  v18[3] = v11;
  v12 = v11;
  v13 = swift_allocObject();
  v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v13 + 48) = v14;
  v15 = a1[1];
  *(_OWORD *)(v13 + 72) = *a1;
  *(_OWORD *)(v13 + 88) = v15;
  v16 = a1[3];
  *(_OWORD *)(v13 + 104) = a1[2];
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = a4;
  *(_QWORD *)(v13 + 64) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(v13 + 120) = v16;
  *(_OWORD *)a5 = v12;
  *(_QWORD *)(a5 + 16) = sub_23C0E1760;
  *(_QWORD *)(a5 + 24) = v13;
  swift_bridgeObjectRetain();
  sub_23C0C72D0(a2);
  return sub_23C0E1770((uint64_t)v18);
}

uint64_t sub_23C0E15D8@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C0E150C(a1, v2 + 32, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_23C0E15E4()
{
  unint64_t result;

  result = qword_256B11428;
  if (!qword_256B11428)
  {
    result = MEMORY[0x242616E9C](&unk_23C0EBD4C, &type metadata for SelectedFilterItemButton);
    atomic_store(result, (unint64_t *)&qword_256B11428);
  }
  return result;
}

uint64_t sub_23C0E1628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  _OWORD v14[2];
  uint64_t v15;

  v8 = type metadata accessor for FilterAction();
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v11;
  v15 = *(_QWORD *)(a1 + 32);
  type metadata accessor for FilterResultsView(0, a3, a4, v12);
  sub_23C0C48F0();
  sub_23C07CAAC(a2, (uint64_t)v14);
  sub_23C07CAAC((uint64_t)v14, (uint64_t)v10);
  swift_storeEnumTagMultiPayload();
  sub_23C0E17B0((uint64_t)v14);
  sub_23C0E4708();
  swift_release();
  return sub_23C095BAC((uint64_t)v10);
}

uint64_t sub_23C0E1714()
{
  uint64_t v0;

  sub_23C0C5AC4();
  swift_release();
  sub_23C0682A8(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_BYTE *)(v0 + 112));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_23C0E1760()
{
  uint64_t v0;

  return sub_23C0E1628(v0 + 32, v0 + 72, *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_23C0E1770(uint64_t a1)
{
  sub_23C0682C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_23C0E17B0(uint64_t a1)
{
  sub_23C0682C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  return a1;
}

uint64_t sub_23C0E17E4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23C0E409C();
  *a1 = result;
  return result;
}

uint64_t sub_23C0E180C()
{
  return sub_23C0E40A8();
}

uint64_t sub_23C0E1830@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23C0E0AB8(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_BYTE *)(v1 + 48), *(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23C0E184C()
{
  uint64_t *v0;

  return sub_23C0E11C8(v0[4], v0[2], v0[3]);
}

uint64_t sub_23C0E1858()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_23C0E188C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

uint64_t sub_23C0E1898()
{
  swift_unknownObjectRelease();
  sub_23C0C5AC4();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C0E18D0(_BYTE *a1)
{
  uint64_t *v1;

  return sub_23C0E0EBC(a1, v1[2], v1[3], (uint64_t)(v1 + 6), v1[4], v1[5]);
}

uint64_t sub_23C0E18E0()
{
  uint64_t *v0;

  return sub_23C0E0F90(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_23C0E18EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t sub_23C0E190C()
{
  unint64_t result;

  result = qword_256B11470;
  if (!qword_256B11470)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSortMode, &type metadata for FilterSortMode);
    atomic_store(result, (unint64_t *)&qword_256B11470);
  }
  return result;
}

unint64_t sub_23C0E1950()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_256B11478;
  if (!qword_256B11478)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256B11468);
    v2 = MEMORY[0x24BDF1F80];
    result = MEMORY[0x242616E9C](MEMORY[0x24BDF4A08], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_256B11478);
  }
  return result;
}

uint64_t objectdestroy_2Tm()
{
  sub_23C0C5AC4();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23C0E19E0@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_23C0E109C(a1, v2 + 32, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

BOOL static FilterContentType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23C0E1A04()
{
  _BYTE *v0;

  if (*v0)
    return 0x74756F6B726F77;
  else
    return 7367028;
}

uint64_t sub_23C0E1A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0E251C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0E1A5C()
{
  sub_23C0E1D20();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0E1A84()
{
  sub_23C0E1D20();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0E1AAC()
{
  sub_23C0E1DA8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0E1AD4()
{
  sub_23C0E1DA8();
  return sub_23C0E4AF8();
}

uint64_t sub_23C0E1AFC()
{
  sub_23C0E1D64();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0E1B24()
{
  sub_23C0E1D64();
  return sub_23C0E4AF8();
}

uint64_t FilterContentType.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11488);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11490);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11498);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0E1D20();
  sub_23C0E4AE0();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_23C0E1D64();
    sub_23C0E49E4();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23C0E1DA8();
    sub_23C0E49E4();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

unint64_t sub_23C0E1D20()
{
  unint64_t result;

  result = qword_256B114A0;
  if (!qword_256B114A0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED1FC, &type metadata for FilterContentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B114A0);
  }
  return result;
}

unint64_t sub_23C0E1D64()
{
  unint64_t result;

  result = qword_256B114A8;
  if (!qword_256B114A8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED1AC, &type metadata for FilterContentType.WorkoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B114A8);
  }
  return result;
}

unint64_t sub_23C0E1DA8()
{
  unint64_t result;

  result = qword_256B114B0;
  if (!qword_256B114B0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED15C, &type metadata for FilterContentType.TipCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B114B0);
  }
  return result;
}

uint64_t FilterContentType.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B114B8);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B114C0);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B114C8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0E1D20();
  v11 = v33;
  sub_23C0E4AD4();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_23C0E49CC();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_23C0E4900();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F6E8);
    *v21 = &type metadata for FilterContentType;
    sub_23C0E4960();
    sub_23C0E48F4();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_23C0E1D64();
    sub_23C0E4954();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23C0E1DA8();
    v22 = v6;
    sub_23C0E4954();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_23C0E2144@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FilterContentType.init(from:)(a1, a2);
}

uint64_t sub_23C0E2158(_QWORD *a1)
{
  return FilterContentType.encode(to:)(a1);
}

uint64_t FilterContentType.hash(into:)()
{
  return sub_23C0E4AA4();
}

uint64_t FilterContentType.hashValue.getter()
{
  sub_23C0E4A98();
  sub_23C0E4AA4();
  return sub_23C0E4AC8();
}

unint64_t sub_23C0E21DC()
{
  unint64_t result;

  result = qword_256B114D0;
  if (!qword_256B114D0)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterContentType, &type metadata for FilterContentType);
    atomic_store(result, (unint64_t *)&qword_256B114D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for FilterContentType()
{
  return &type metadata for FilterContentType;
}

uint64_t _s16FitnessFiltering17FilterContentTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23C0E2284 + 4 * byte_23C0ECEE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23C0E22B8 + 4 * byte_23C0ECEE0[v4]))();
}

uint64_t sub_23C0E22B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0E22C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0E22C8);
  return result;
}

uint64_t sub_23C0E22D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0E22DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23C0E22E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0E22E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterContentType.CodingKeys()
{
  return &type metadata for FilterContentType.CodingKeys;
}

ValueMetadata *type metadata accessor for FilterContentType.TipCodingKeys()
{
  return &type metadata for FilterContentType.TipCodingKeys;
}

ValueMetadata *type metadata accessor for FilterContentType.WorkoutCodingKeys()
{
  return &type metadata for FilterContentType.WorkoutCodingKeys;
}

unint64_t sub_23C0E2328()
{
  unint64_t result;

  result = qword_256B114D8;
  if (!qword_256B114D8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED134, &type metadata for FilterContentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B114D8);
  }
  return result;
}

unint64_t sub_23C0E2370()
{
  unint64_t result;

  result = qword_256B114E0;
  if (!qword_256B114E0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED054, &type metadata for FilterContentType.TipCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B114E0);
  }
  return result;
}

unint64_t sub_23C0E23B8()
{
  unint64_t result;

  result = qword_256B114E8;
  if (!qword_256B114E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED07C, &type metadata for FilterContentType.TipCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B114E8);
  }
  return result;
}

unint64_t sub_23C0E2400()
{
  unint64_t result;

  result = qword_256B114F0;
  if (!qword_256B114F0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED004, &type metadata for FilterContentType.WorkoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B114F0);
  }
  return result;
}

unint64_t sub_23C0E2448()
{
  unint64_t result;

  result = qword_256B114F8;
  if (!qword_256B114F8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED02C, &type metadata for FilterContentType.WorkoutCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B114F8);
  }
  return result;
}

unint64_t sub_23C0E2490()
{
  unint64_t result;

  result = qword_256B11500;
  if (!qword_256B11500)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED0A4, &type metadata for FilterContentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11500);
  }
  return result;
}

unint64_t sub_23C0E24D8()
{
  unint64_t result;

  result = qword_256B11508;
  if (!qword_256B11508)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED0CC, &type metadata for FilterContentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11508);
  }
  return result;
}

uint64_t sub_23C0E251C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 7367028 && a2 == 0xE300000000000000;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74756F6B726F77 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t FilterSectionDescriptor.init(identifier:attributedTitle:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  char *v12;

  v7 = *a4;
  v8 = a4[1];
  v9 = *((_BYTE *)a4 + 16);
  *a5 = a1;
  a5[1] = a2;
  v10 = type metadata accessor for FilterSectionDescriptor();
  result = sub_23C06EA8C(a3, (uint64_t)a5 + *(int *)(v10 + 20));
  v12 = (char *)a5 + *(int *)(v10 + 24);
  *(_QWORD *)v12 = v7;
  *((_QWORD *)v12 + 1) = v8;
  v12[16] = v9;
  return result;
}

uint64_t type metadata accessor for FilterSectionDescriptor()
{
  uint64_t result;

  result = qword_256B115A8;
  if (!qword_256B115A8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t FilterSectionDescriptor.filterKind.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FilterSectionDescriptor() + 24) + 16);
}

uint64_t FilterSectionDescriptor.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t FilterSectionDescriptor.attributedTitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for FilterSectionDescriptor() + 20);
  return sub_23C09E86C(v3, a1);
}

uint64_t FilterSectionDescriptor.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = v1 + *(int *)(type metadata accessor for FilterSectionDescriptor() + 24);
  v4 = *(_QWORD *)v3;
  v5 = *(_QWORD *)(v3 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v3;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = *(_BYTE *)(v3 + 16);
  *(_BYTE *)(a1 + 16) = v6;
  return sub_23C08FCE0(v4, v5, v6);
}

uint64_t sub_23C0E2760()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7475626972747461;
  if (*v0 != 1)
    v1 = 0x746E65746E6F63;
  if (*v0)
    return v1;
  else
    return 0x696669746E656469;
}

uint64_t sub_23C0E27CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23C0E3D24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23C0E27F0()
{
  sub_23C0E29E8();
  return sub_23C0E4AEC();
}

uint64_t sub_23C0E2818()
{
  sub_23C0E29E8();
  return sub_23C0E4AF8();
}

uint64_t FilterSectionDescriptor.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 *v10;
  char v11;
  _BYTE v13[16];
  __int128 v14;
  char v15;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11510);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23C0E29E8();
  sub_23C0E4AE0();
  LOBYTE(v14) = 0;
  sub_23C0E4A08();
  if (!v2)
  {
    v9 = type metadata accessor for FilterSectionDescriptor();
    LOBYTE(v14) = 1;
    sub_23C0E3EB0();
    sub_23C0683A4(&qword_256B11520, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5B8]);
    sub_23C0E49FC();
    v10 = (__int128 *)(v3 + *(int *)(v9 + 24));
    v11 = *((_BYTE *)v10 + 16);
    v14 = *v10;
    v15 = v11;
    v13[15] = 2;
    sub_23C0E2A2C();
    sub_23C0E4A44();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_23C0E29E8()
{
  unint64_t result;

  result = qword_256B11518;
  if (!qword_256B11518)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED47C, &type metadata for FilterSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B11518);
  }
  return result;
}

unint64_t sub_23C0E2A2C()
{
  unint64_t result;

  result = qword_256B11528;
  if (!qword_256B11528)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSectionContent, &type metadata for FilterSectionContent);
    atomic_store(result, (unint64_t *)&qword_256B11528);
  }
  return result;
}

uint64_t FilterSectionDescriptor.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  char v25;
  char v26;

  v21 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B11530);
  v7 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FilterSectionDescriptor();
  MEMORY[0x24BDAC7A8](v10);
  v12 = (uint64_t *)((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v23 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v13);
  sub_23C0E29E8();
  sub_23C0E4AD4();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v14 = v7;
  LOBYTE(v24) = 0;
  v15 = v22;
  *v12 = sub_23C0E4984();
  v12[1] = v16;
  sub_23C0E3EB0();
  LOBYTE(v24) = 1;
  sub_23C0683A4(&qword_256B11538, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5D0]);
  sub_23C0E4978();
  sub_23C06EA8C((uint64_t)v6, (uint64_t)v12 + *(int *)(v10 + 20));
  v26 = 2;
  sub_23C0E2D44();
  sub_23C0E49C0();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
  v17 = v25;
  v18 = (char *)v12 + *(int *)(v10 + 24);
  *(_OWORD *)v18 = v24;
  v18[16] = v17;
  sub_23C09E828((uint64_t)v12, v21);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return sub_23C09E8FC((uint64_t)v12);
}

unint64_t sub_23C0E2D44()
{
  unint64_t result;

  result = qword_256B11540;
  if (!qword_256B11540)
  {
    result = MEMORY[0x242616E9C](&protocol conformance descriptor for FilterSectionContent, &type metadata for FilterSectionContent);
    atomic_store(result, (unint64_t *)&qword_256B11540);
  }
  return result;
}

uint64_t sub_23C0E2D88@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return FilterSectionDescriptor.init(from:)(a1, a2);
}

uint64_t sub_23C0E2D9C(_QWORD *a1)
{
  return FilterSectionDescriptor.encode(to:)(a1);
}

void FilterSectionDescriptor.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 *v10;
  char v11;
  __int128 v12;
  char v13;

  v1 = v0;
  v2 = sub_23C0E3EB0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  sub_23C0E47A4();
  swift_bridgeObjectRelease();
  v9 = type metadata accessor for FilterSectionDescriptor();
  sub_23C09E86C(v1 + *(int *)(v9 + 20), (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    sub_23C0E4AB0();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    sub_23C0E4AB0();
    sub_23C0683A4((unint64_t *)&qword_256B0FB48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C0]);
    sub_23C0E4714();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v10 = (__int128 *)(v1 + *(int *)(v9 + 24));
  v11 = *((_BYTE *)v10 + 16);
  v12 = *v10;
  v13 = v11;
  FilterSectionContent.hash(into:)();
}

uint64_t FilterSectionDescriptor.hashValue.getter()
{
  sub_23C0E4A98();
  FilterSectionDescriptor.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0E2F90()
{
  sub_23C0E4A98();
  FilterSectionDescriptor.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t sub_23C0E2FD0()
{
  sub_23C0E4A98();
  FilterSectionDescriptor.hash(into:)();
  return sub_23C0E4AC8();
}

uint64_t _s16FitnessFiltering23FilterSectionDescriptorV2eeoiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(uint64_t, uint64_t, uint64_t);
  _BYTE *v26;
  void (*v27)(_BYTE *, uint64_t);
  uint64_t v28;
  char v29;
  char *v30;
  char v31;
  _BYTE v33[12];
  int v34;
  _BYTE *v35;
  _QWORD *v36;
  __int128 v37;
  char v38;
  __int128 v39;
  char v40;

  v4 = sub_23C0E3EB0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B10A40);
  MEMORY[0x24BDAC7A8](v8);
  v10 = &v33[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = &v33[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = MEMORY[0x24BDAC7A8](v12);
  v17 = &v33[-v16];
  MEMORY[0x24BDAC7A8](v15);
  v19 = &v33[-v18];
  if (*a1 == *a2 && a1[1] == a2[1] || (v20 = sub_23C0E4A74(), v21 = 0, (v20 & 1) != 0))
  {
    v35 = v7;
    v22 = type metadata accessor for FilterSectionDescriptor();
    sub_23C09E86C((uint64_t)a1 + *(int *)(v22 + 20), (uint64_t)v19);
    v23 = *(int *)(v22 + 20);
    v36 = a2;
    sub_23C09E86C((uint64_t)a2 + v23, (uint64_t)v17);
    v24 = (uint64_t)&v10[*(int *)(v8 + 48)];
    sub_23C09E86C((uint64_t)v19, (uint64_t)v10);
    sub_23C09E86C((uint64_t)v17, v24);
    v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v25((uint64_t)v10, 1, v4) == 1)
    {
      sub_23C06E834((uint64_t)v17, &qword_256B0F048);
      sub_23C06E834((uint64_t)v19, &qword_256B0F048);
      if (v25(v24, 1, v4) == 1)
      {
        sub_23C06E834((uint64_t)v10, &qword_256B0F048);
LABEL_11:
        v28 = *(int *)(v22 + 24);
        v29 = *((_BYTE *)a1 + v28 + 16);
        v39 = *(_OWORD *)((char *)a1 + v28);
        v40 = v29;
        v30 = (char *)v36 + v28;
        v31 = v30[16];
        v37 = *(_OWORD *)v30;
        v38 = v31;
        static FilterSectionContent.== infix(_:_:)((uint64_t)&v39);
        return v21 & 1;
      }
    }
    else
    {
      sub_23C09E86C((uint64_t)v10, (uint64_t)v14);
      if (v25(v24, 1, v4) != 1)
      {
        v26 = v35;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v35, v24, v4);
        sub_23C0683A4(&qword_256B10A48, (uint64_t (*)(uint64_t))MEMORY[0x24BDCC5A8], MEMORY[0x24BDCC5C8]);
        v34 = sub_23C0E4720();
        v27 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
        v27(v26, v4);
        sub_23C06E834((uint64_t)v17, &qword_256B0F048);
        sub_23C06E834((uint64_t)v19, &qword_256B0F048);
        v27(v14, v4);
        sub_23C06E834((uint64_t)v10, &qword_256B0F048);
        if ((v34 & 1) != 0)
          goto LABEL_11;
LABEL_12:
        v21 = 0;
        return v21 & 1;
      }
      sub_23C06E834((uint64_t)v17, &qword_256B0F048);
      sub_23C06E834((uint64_t)v19, &qword_256B0F048);
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v14, v4);
    }
    sub_23C06E834((uint64_t)v10, &qword_256B10A40);
    goto LABEL_12;
  }
  return v21 & 1;
}

uint64_t sub_23C0E336C()
{
  return sub_23C0683A4(&qword_256B11548, (uint64_t (*)(uint64_t))type metadata accessor for FilterSectionDescriptor, (uint64_t)&protocol conformance descriptor for FilterSectionDescriptor);
}

uint64_t *initializeBufferWithCopyOfBuffer for FilterSectionDescriptor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23C0E3EB0();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v16 = *(int *)(a3 + 24);
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)v18;
    v20 = *((_QWORD *)v18 + 1);
    v21 = v18[16];
    sub_23C08FCE0(*(_QWORD *)v18, v20, v21);
    *(_QWORD *)v17 = v19;
    *((_QWORD *)v17 + 1) = v20;
    v17[16] = v21;
  }
  return v4;
}

uint64_t destroy for FilterSectionDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23C0E3EB0();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return sub_23C08FD78(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8), *(_BYTE *)(a1 + *(int *)(a2 + 24) + 16));
}

_QWORD *initializeWithCopy for FilterSectionDescriptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23C0E3EB0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = *(_QWORD *)v16;
  v18 = *((_QWORD *)v16 + 1);
  v19 = v16[16];
  sub_23C08FCE0(*(_QWORD *)v16, v18, v19);
  *(_QWORD *)v15 = v17;
  *((_QWORD *)v15 + 1) = v18;
  v15[16] = v19;
  return a1;
}

_QWORD *assignWithCopy for FilterSectionDescriptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23C0E3EB0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v18 = *(_QWORD *)v17;
  v19 = *((_QWORD *)v17 + 1);
  v20 = v17[16];
  sub_23C08FCE0(*(_QWORD *)v17, v19, v20);
  v21 = *(_QWORD *)v16;
  v22 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v18;
  *((_QWORD *)v16 + 1) = v19;
  v23 = v16[16];
  v16[16] = v20;
  sub_23C08FD78(v21, v22, v23);
  return a1;
}

_OWORD *initializeWithTake for FilterSectionDescriptor(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23C0E3EB0();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_OWORD *)v13 = *(_OWORD *)v14;
  v13[16] = v14[16];
  return a1;
}

_QWORD *assignWithTake for FilterSectionDescriptor(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23C0E3EB0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  v16 = *(int *)(a3 + 24);
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = v18[16];
  v20 = *(_QWORD *)v17;
  v21 = *((_QWORD *)v17 + 1);
  *(_OWORD *)v17 = *(_OWORD *)v18;
  v22 = v17[16];
  v17[16] = v19;
  sub_23C08FD78(v20, v21, v22);
  return a1;
}

uint64_t getEnumTagSinglePayload for FilterSectionDescriptor()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0E3A00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for FilterSectionDescriptor()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23C0E3A8C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256B0F048);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_23C0E3B04()
{
  unint64_t v0;

  sub_23C06D600();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t storeEnumTagSinglePayload for FilterSectionDescriptor.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23C0E3BCC + 4 * byte_23C0ED255[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23C0E3C00 + 4 * byte_23C0ED250[v4]))();
}

uint64_t sub_23C0E3C00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0E3C08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23C0E3C10);
  return result;
}

uint64_t sub_23C0E3C1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23C0E3C24);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23C0E3C28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23C0E3C30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FilterSectionDescriptor.CodingKeys()
{
  return &type metadata for FilterSectionDescriptor.CodingKeys;
}

unint64_t sub_23C0E3C50()
{
  unint64_t result;

  result = qword_256B115E8;
  if (!qword_256B115E8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED454, &type metadata for FilterSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B115E8);
  }
  return result;
}

unint64_t sub_23C0E3C98()
{
  unint64_t result;

  result = qword_256B115F0;
  if (!qword_256B115F0)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED3C4, &type metadata for FilterSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B115F0);
  }
  return result;
}

unint64_t sub_23C0E3CE0()
{
  unint64_t result;

  result = qword_256B115F8;
  if (!qword_256B115F8)
  {
    result = MEMORY[0x242616E9C](&unk_23C0ED3EC, &type metadata for FilterSectionDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256B115F8);
  }
  return result;
}

uint64_t sub_23C0E3D24(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7475626972747461 && a2 == 0xEF656C7469546465 || (sub_23C0E4A74() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23C0E4A74();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23C0E3EB0()
{
  return MEMORY[0x24BDCC5A8]();
}

uint64_t sub_23C0E3EBC()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t sub_23C0E3EC8()
{
  return MEMORY[0x24BDCECD8]();
}

uint64_t sub_23C0E3ED4()
{
  return MEMORY[0x24BDCEEA8]();
}

uint64_t sub_23C0E3EE0()
{
  return MEMORY[0x24BDCF648]();
}

uint64_t sub_23C0E3EEC()
{
  return MEMORY[0x24BEBBE90]();
}

uint64_t sub_23C0E3EF8()
{
  return MEMORY[0x24BDCF678]();
}

uint64_t sub_23C0E3F04()
{
  return MEMORY[0x24BE34FA0]();
}

uint64_t sub_23C0E3F10()
{
  return MEMORY[0x24BE35120]();
}

uint64_t sub_23C0E3F1C()
{
  return MEMORY[0x24BE34B58]();
}

uint64_t sub_23C0E3F28()
{
  return MEMORY[0x24BE34B60]();
}

uint64_t sub_23C0E3F34()
{
  return MEMORY[0x24BE34B88]();
}

uint64_t sub_23C0E3F40()
{
  return MEMORY[0x24BE34B90]();
}

uint64_t sub_23C0E3F4C()
{
  return MEMORY[0x24BE34B98]();
}

uint64_t sub_23C0E3F58()
{
  return MEMORY[0x24BEE76F0]();
}

uint64_t sub_23C0E3F64()
{
  return MEMORY[0x24BDEAF98]();
}

uint64_t sub_23C0E3F70()
{
  return MEMORY[0x24BDEAFA8]();
}

uint64_t sub_23C0E3F7C()
{
  return MEMORY[0x24BDEB040]();
}

uint64_t sub_23C0E3F88()
{
  return MEMORY[0x24BDEB150]();
}

uint64_t sub_23C0E3F94()
{
  return MEMORY[0x24BDEB158]();
}

uint64_t sub_23C0E3FA0()
{
  return MEMORY[0x24BDEB210]();
}

uint64_t sub_23C0E3FAC()
{
  return MEMORY[0x24BDEB230]();
}

uint64_t sub_23C0E3FB8()
{
  return MEMORY[0x24BDEB790]();
}

uint64_t sub_23C0E3FC4()
{
  return MEMORY[0x24BDEB828]();
}

uint64_t sub_23C0E3FD0()
{
  return MEMORY[0x24BDEBED0]();
}

uint64_t sub_23C0E3FDC()
{
  return MEMORY[0x24BDEC120]();
}

uint64_t sub_23C0E3FE8()
{
  return MEMORY[0x24BDEC148]();
}

uint64_t sub_23C0E3FF4()
{
  return MEMORY[0x24BDEC6D8]();
}

uint64_t sub_23C0E4000()
{
  return MEMORY[0x24BDEC6E0]();
}

uint64_t sub_23C0E400C()
{
  return MEMORY[0x24BDEC958]();
}

uint64_t sub_23C0E4018()
{
  return MEMORY[0x24BDECF50]();
}

uint64_t sub_23C0E4024()
{
  return MEMORY[0x24BDED2D0]();
}

uint64_t sub_23C0E4030()
{
  return MEMORY[0x24BDED330]();
}

uint64_t sub_23C0E403C()
{
  return MEMORY[0x24BDED338]();
}

uint64_t sub_23C0E4048()
{
  return MEMORY[0x24BDED860]();
}

uint64_t sub_23C0E4054()
{
  return MEMORY[0x24BDED868]();
}

uint64_t sub_23C0E4060()
{
  return MEMORY[0x24BDEDBA8]();
}

uint64_t sub_23C0E406C()
{
  return MEMORY[0x24BDEDE90]();
}

uint64_t sub_23C0E4078()
{
  return MEMORY[0x24BDEDE98]();
}

uint64_t sub_23C0E4084()
{
  return MEMORY[0x24BDEE038]();
}

uint64_t sub_23C0E4090()
{
  return MEMORY[0x24BDEE048]();
}

uint64_t sub_23C0E409C()
{
  return MEMORY[0x24BDEE288]();
}

uint64_t sub_23C0E40A8()
{
  return MEMORY[0x24BDEE290]();
}

uint64_t sub_23C0E40B4()
{
  return MEMORY[0x24BDEE390]();
}

uint64_t sub_23C0E40C0()
{
  return MEMORY[0x24BDEE3A0]();
}

uint64_t sub_23C0E40CC()
{
  return MEMORY[0x24BDEE468]();
}

uint64_t sub_23C0E40D8()
{
  return MEMORY[0x24BDEE478]();
}

uint64_t sub_23C0E40E4()
{
  return MEMORY[0x24BDEE490]();
}

uint64_t sub_23C0E40F0()
{
  return MEMORY[0x24BDEE4A0]();
}

uint64_t sub_23C0E40FC()
{
  return MEMORY[0x24BDEE608]();
}

uint64_t sub_23C0E4108()
{
  return MEMORY[0x24BDEE718]();
}

uint64_t sub_23C0E4114()
{
  return MEMORY[0x24BDEE730]();
}

uint64_t sub_23C0E4120()
{
  return MEMORY[0x24BDEEB88]();
}

uint64_t sub_23C0E412C()
{
  return MEMORY[0x24BDEECF8]();
}

uint64_t sub_23C0E4138()
{
  return MEMORY[0x24BDEED70]();
}

uint64_t sub_23C0E4144()
{
  return MEMORY[0x24BDEED88]();
}

uint64_t sub_23C0E4150()
{
  return MEMORY[0x24BDEEF60]();
}

uint64_t sub_23C0E415C()
{
  return MEMORY[0x24BDEEF78]();
}

uint64_t sub_23C0E4168()
{
  return MEMORY[0x24BDEF168]();
}

uint64_t sub_23C0E4174()
{
  return MEMORY[0x24BDEF380]();
}

uint64_t sub_23C0E4180()
{
  return MEMORY[0x24BDEF3A0]();
}

uint64_t sub_23C0E418C()
{
  return MEMORY[0x24BDEF3B8]();
}

uint64_t sub_23C0E4198()
{
  return MEMORY[0x24BDEF5C8]();
}

uint64_t sub_23C0E41A4()
{
  return MEMORY[0x24BDEF5D8]();
}

uint64_t sub_23C0E41B0()
{
  return MEMORY[0x24BDEF6D8]();
}

uint64_t sub_23C0E41BC()
{
  return MEMORY[0x24BDEF6E0]();
}

uint64_t sub_23C0E41C8()
{
  return MEMORY[0x24BDEF730]();
}

uint64_t sub_23C0E41D4()
{
  return MEMORY[0x24BDEF740]();
}

uint64_t sub_23C0E41E0()
{
  return MEMORY[0x24BDEF998]();
}

uint64_t sub_23C0E41EC()
{
  return MEMORY[0x24BDEFBD0]();
}

uint64_t sub_23C0E41F8()
{
  return MEMORY[0x24BDEFBE8]();
}

uint64_t sub_23C0E4204()
{
  return MEMORY[0x24BDEFCA8]();
}

uint64_t sub_23C0E4210()
{
  return MEMORY[0x24BDEFCB8]();
}

uint64_t sub_23C0E421C()
{
  return MEMORY[0x24BDEFCC8]();
}

uint64_t sub_23C0E4228()
{
  return MEMORY[0x24BDF02E8]();
}

uint64_t sub_23C0E4234()
{
  return MEMORY[0x24BDF02F8]();
}

uint64_t sub_23C0E4240()
{
  return MEMORY[0x24BDF0440]();
}

uint64_t sub_23C0E424C()
{
  return MEMORY[0x24BDF0468]();
}

uint64_t sub_23C0E4258()
{
  return MEMORY[0x24BDF08B0]();
}

uint64_t sub_23C0E4264()
{
  return MEMORY[0x24BDF08B8]();
}

uint64_t sub_23C0E4270()
{
  return MEMORY[0x24BDF08D0]();
}

uint64_t sub_23C0E427C()
{
  return MEMORY[0x24BDF10D8]();
}

uint64_t sub_23C0E4288()
{
  return MEMORY[0x24BDF10E0]();
}

uint64_t sub_23C0E4294()
{
  return MEMORY[0x24BDF10E8]();
}

uint64_t sub_23C0E42A0()
{
  return MEMORY[0x24BDF10F8]();
}

uint64_t sub_23C0E42AC()
{
  return MEMORY[0x24BDF1430]();
}

uint64_t sub_23C0E42B8()
{
  return MEMORY[0x24BDF1450]();
}

uint64_t sub_23C0E42C4()
{
  return MEMORY[0x24BDF1458]();
}

uint64_t sub_23C0E42D0()
{
  return MEMORY[0x24BDF1468]();
}

uint64_t sub_23C0E42DC()
{
  return MEMORY[0x24BDF14A0]();
}

uint64_t sub_23C0E42E8()
{
  return MEMORY[0x24BDF14A8]();
}

uint64_t sub_23C0E42F4()
{
  return MEMORY[0x24BDF14C0]();
}

uint64_t sub_23C0E4300()
{
  return MEMORY[0x24BDF14C8]();
}

uint64_t sub_23C0E430C()
{
  return MEMORY[0x24BDF14E0]();
}

uint64_t sub_23C0E4318()
{
  return MEMORY[0x24BDF14E8]();
}

uint64_t sub_23C0E4324()
{
  return MEMORY[0x24BDF14F8]();
}

uint64_t sub_23C0E4330()
{
  return MEMORY[0x24BDF15F8]();
}

uint64_t sub_23C0E433C()
{
  return MEMORY[0x24BDF1600]();
}

uint64_t sub_23C0E4348()
{
  return MEMORY[0x24BDF1678]();
}

uint64_t sub_23C0E4354()
{
  return MEMORY[0x24BDF16A8]();
}

uint64_t sub_23C0E4360()
{
  return MEMORY[0x24BDF1750]();
}

uint64_t sub_23C0E436C()
{
  return MEMORY[0x24BDF1778]();
}

uint64_t sub_23C0E4378()
{
  return MEMORY[0x24BDF17F8]();
}

uint64_t sub_23C0E4384()
{
  return MEMORY[0x24BDF1A48]();
}

uint64_t sub_23C0E4390()
{
  return MEMORY[0x24BDF1D18]();
}

uint64_t sub_23C0E439C()
{
  return MEMORY[0x24BDF1D68]();
}

uint64_t sub_23C0E43A8()
{
  return MEMORY[0x24BDF1DB8]();
}

uint64_t sub_23C0E43B4()
{
  return MEMORY[0x24BDF1DC8]();
}

uint64_t sub_23C0E43C0()
{
  return MEMORY[0x24BDF1FD8]();
}

uint64_t sub_23C0E43CC()
{
  return MEMORY[0x24BDF1FF0]();
}

uint64_t sub_23C0E43D8()
{
  return MEMORY[0x24BDF1FF8]();
}

uint64_t sub_23C0E43E4()
{
  return MEMORY[0x24BDF2088]();
}

uint64_t sub_23C0E43F0()
{
  return MEMORY[0x24BDF20A0]();
}

uint64_t sub_23C0E43FC()
{
  return MEMORY[0x24BDF2100]();
}

uint64_t sub_23C0E4408()
{
  return MEMORY[0x24BDF2128]();
}

uint64_t sub_23C0E4414()
{
  return MEMORY[0x24BDF22B0]();
}

uint64_t sub_23C0E4420()
{
  return MEMORY[0x24BDF22C8]();
}

uint64_t sub_23C0E442C()
{
  return MEMORY[0x24BDF2428]();
}

uint64_t sub_23C0E4438()
{
  return MEMORY[0x24BDF24A8]();
}

uint64_t sub_23C0E4444()
{
  return MEMORY[0x24BDF2698]();
}

uint64_t sub_23C0E4450()
{
  return MEMORY[0x24BDF26D0]();
}

uint64_t sub_23C0E445C()
{
  return MEMORY[0x24BDF26E0]();
}

uint64_t sub_23C0E4468()
{
  return MEMORY[0x24BDF27E0]();
}

uint64_t sub_23C0E4474()
{
  return MEMORY[0x24BDF29F0]();
}

uint64_t sub_23C0E4480()
{
  return MEMORY[0x24BDF2D50]();
}

uint64_t sub_23C0E448C()
{
  return MEMORY[0x24BDF2FD8]();
}

uint64_t sub_23C0E4498()
{
  return MEMORY[0x24BDF2FF8]();
}

uint64_t sub_23C0E44A4()
{
  return MEMORY[0x24BDF30D8]();
}

uint64_t sub_23C0E44B0()
{
  return MEMORY[0x24BDF30E8]();
}

uint64_t sub_23C0E44BC()
{
  return MEMORY[0x24BDF3390]();
}

uint64_t sub_23C0E44C8()
{
  return MEMORY[0x24BDF3470]();
}

uint64_t sub_23C0E44D4()
{
  return MEMORY[0x24BDF3628]();
}

uint64_t sub_23C0E44E0()
{
  return MEMORY[0x24BDF3630]();
}

uint64_t sub_23C0E44EC()
{
  return MEMORY[0x24BDF37D8]();
}

uint64_t sub_23C0E44F8()
{
  return MEMORY[0x24BDF3840]();
}

uint64_t sub_23C0E4504()
{
  return MEMORY[0x24BDF3890]();
}

uint64_t sub_23C0E4510()
{
  return MEMORY[0x24BDF38C0]();
}

uint64_t sub_23C0E451C()
{
  return MEMORY[0x24BDF38C8]();
}

uint64_t sub_23C0E4528()
{
  return MEMORY[0x24BDF3980]();
}

uint64_t sub_23C0E4534()
{
  return MEMORY[0x24BDF39B0]();
}

uint64_t sub_23C0E4540()
{
  return MEMORY[0x24BDF3BE8]();
}

uint64_t sub_23C0E454C()
{
  return MEMORY[0x24BDF3CF0]();
}

uint64_t sub_23C0E4558()
{
  return MEMORY[0x24BDF3D10]();
}

uint64_t sub_23C0E4564()
{
  return MEMORY[0x24BDF3D30]();
}

uint64_t sub_23C0E4570()
{
  return MEMORY[0x24BDF3EB0]();
}

uint64_t sub_23C0E457C()
{
  return MEMORY[0x24BDF3F80]();
}

uint64_t sub_23C0E4588()
{
  return MEMORY[0x24BDF3FE8]();
}

uint64_t sub_23C0E4594()
{
  return MEMORY[0x24BDF4048]();
}

uint64_t sub_23C0E45A0()
{
  return MEMORY[0x24BDF40C0]();
}

uint64_t sub_23C0E45AC()
{
  return MEMORY[0x24BDF40D8]();
}

uint64_t sub_23C0E45B8()
{
  return MEMORY[0x24BDF4170]();
}

uint64_t sub_23C0E45C4()
{
  return MEMORY[0x24BDF4330]();
}

uint64_t sub_23C0E45D0()
{
  return MEMORY[0x24BDF4340]();
}

uint64_t sub_23C0E45DC()
{
  return MEMORY[0x24BDF4398]();
}

uint64_t sub_23C0E45E8()
{
  return MEMORY[0x24BDF4470]();
}

uint64_t sub_23C0E45F4()
{
  return MEMORY[0x24BDF4480]();
}

uint64_t sub_23C0E4600()
{
  return MEMORY[0x24BDF4518]();
}

uint64_t sub_23C0E460C()
{
  return MEMORY[0x24BDF46D8]();
}

uint64_t sub_23C0E4618()
{
  return MEMORY[0x24BDF46E0]();
}

uint64_t sub_23C0E4624()
{
  return MEMORY[0x24BDF47F8]();
}

uint64_t sub_23C0E4630()
{
  return MEMORY[0x24BDF48E8]();
}

uint64_t sub_23C0E463C()
{
  return MEMORY[0x24BDF49A0]();
}

uint64_t sub_23C0E4648()
{
  return MEMORY[0x24BDF49B8]();
}

uint64_t sub_23C0E4654()
{
  return MEMORY[0x24BDF49C8]();
}

uint64_t sub_23C0E4660()
{
  return MEMORY[0x24BDF4D48]();
}

uint64_t sub_23C0E466C()
{
  return MEMORY[0x24BDF4D58]();
}

uint64_t sub_23C0E4678()
{
  return MEMORY[0x24BDF4D80]();
}

uint64_t sub_23C0E4684()
{
  return MEMORY[0x24BDF4F18]();
}

uint64_t sub_23C0E4690()
{
  return MEMORY[0x24BDF4F20]();
}

uint64_t sub_23C0E469C()
{
  return MEMORY[0x24BDF5180]();
}

uint64_t sub_23C0E46A8()
{
  return MEMORY[0x24BDF5188]();
}

uint64_t sub_23C0E46B4()
{
  return MEMORY[0x24BDF53F0]();
}

uint64_t sub_23C0E46C0()
{
  return MEMORY[0x24BDF5418]();
}

uint64_t sub_23C0E46CC()
{
  return MEMORY[0x24BDF54A0]();
}

uint64_t sub_23C0E46D8()
{
  return MEMORY[0x24BE2B460]();
}

uint64_t sub_23C0E46E4()
{
  return MEMORY[0x24BE2B560]();
}

uint64_t sub_23C0E46F0()
{
  return MEMORY[0x24BE2B588]();
}

uint64_t sub_23C0E46FC()
{
  return MEMORY[0x24BE2B598]();
}

uint64_t sub_23C0E4708()
{
  return MEMORY[0x24BE2B5A8]();
}

uint64_t sub_23C0E4714()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t sub_23C0E4720()
{
  return MEMORY[0x24BEE0980]();
}

uint64_t sub_23C0E472C()
{
  return MEMORY[0x24BDCF8D8]();
}

uint64_t sub_23C0E4738()
{
  return MEMORY[0x24BDCF908]();
}

uint64_t sub_23C0E4744()
{
  return MEMORY[0x24BDCF910]();
}

uint64_t sub_23C0E4750()
{
  return MEMORY[0x24BDCF930]();
}

uint64_t sub_23C0E475C()
{
  return MEMORY[0x24BDCF938]();
}

uint64_t sub_23C0E4768()
{
  return MEMORY[0x24BDCF948]();
}

uint64_t sub_23C0E4774()
{
  return MEMORY[0x24BDCF968]();
}

uint64_t sub_23C0E4780()
{
  return MEMORY[0x24BDCF978]();
}

uint64_t sub_23C0E478C()
{
  return MEMORY[0x24BDCFB20]();
}

uint64_t sub_23C0E4798()
{
  return MEMORY[0x24BE37C28]();
}

uint64_t sub_23C0E47A4()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t sub_23C0E47B0()
{
  return MEMORY[0x24BEE0B70]();
}

uint64_t sub_23C0E47BC()
{
  return MEMORY[0x24BEE0BB0]();
}

uint64_t sub_23C0E47C8()
{
  return MEMORY[0x24BEE0D98]();
}

uint64_t sub_23C0E47D4()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t sub_23C0E47E0()
{
  return MEMORY[0x24BEE0E48]();
}

uint64_t sub_23C0E47EC()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t sub_23C0E47F8()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t sub_23C0E4804()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t sub_23C0E4810()
{
  return MEMORY[0x24BEE11C8]();
}

uint64_t sub_23C0E481C()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t sub_23C0E4828()
{
  return MEMORY[0x24BEE1288]();
}

uint64_t sub_23C0E4834()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t sub_23C0E4840()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t sub_23C0E484C()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t sub_23C0E4858()
{
  return MEMORY[0x24BEE6940]();
}

uint64_t sub_23C0E4864()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t sub_23C0E4870()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t sub_23C0E487C()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t sub_23C0E4888()
{
  return MEMORY[0x24BEE1DB8]();
}

uint64_t sub_23C0E4894()
{
  return MEMORY[0x24BEE1E60]();
}

uint64_t sub_23C0E48A0()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t sub_23C0E48AC()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t sub_23C0E48B8()
{
  return MEMORY[0x24BEE23E8]();
}

uint64_t sub_23C0E48C4()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t sub_23C0E48D0()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t sub_23C0E48DC()
{
  return MEMORY[0x24BEE24D0]();
}

uint64_t sub_23C0E48E8()
{
  return MEMORY[0x24BEE2568]();
}

uint64_t sub_23C0E48F4()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t sub_23C0E4900()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t sub_23C0E490C()
{
  return MEMORY[0x24BEE28C0]();
}

uint64_t sub_23C0E4918()
{
  return MEMORY[0x24BEE2FB0]();
}

uint64_t sub_23C0E4924()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t sub_23C0E4930()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t sub_23C0E493C()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t sub_23C0E4948()
{
  return MEMORY[0x24BEE3290]();
}

uint64_t sub_23C0E4954()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t sub_23C0E4960()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t sub_23C0E496C()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t sub_23C0E4978()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t sub_23C0E4984()
{
  return MEMORY[0x24BEE3350]();
}

uint64_t sub_23C0E4990()
{
  return MEMORY[0x24BEE3358]();
}

uint64_t sub_23C0E499C()
{
  return MEMORY[0x24BEE3360]();
}

uint64_t sub_23C0E49A8()
{
  return MEMORY[0x24BEE3370]();
}

uint64_t sub_23C0E49B4()
{
  return MEMORY[0x24BEE3378]();
}

uint64_t sub_23C0E49C0()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t sub_23C0E49CC()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t sub_23C0E49D8()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t sub_23C0E49E4()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t sub_23C0E49F0()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t sub_23C0E49FC()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t sub_23C0E4A08()
{
  return MEMORY[0x24BEE34A0]();
}

uint64_t sub_23C0E4A14()
{
  return MEMORY[0x24BEE34A8]();
}

uint64_t sub_23C0E4A20()
{
  return MEMORY[0x24BEE34B0]();
}

uint64_t sub_23C0E4A2C()
{
  return MEMORY[0x24BEE34C0]();
}

uint64_t sub_23C0E4A38()
{
  return MEMORY[0x24BEE34C8]();
}

uint64_t sub_23C0E4A44()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t sub_23C0E4A50()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t sub_23C0E4A5C()
{
  return MEMORY[0x24BEE3548]();
}

uint64_t sub_23C0E4A68()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t sub_23C0E4A74()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t sub_23C0E4A80()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t sub_23C0E4A8C()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t sub_23C0E4A98()
{
  return MEMORY[0x24BEE42E0]();
}

uint64_t sub_23C0E4AA4()
{
  return MEMORY[0x24BEE42F8]();
}

uint64_t sub_23C0E4AB0()
{
  return MEMORY[0x24BEE4300]();
}

uint64_t sub_23C0E4ABC()
{
  return MEMORY[0x24BEE4318]();
}

uint64_t sub_23C0E4AC8()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t sub_23C0E4AD4()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t sub_23C0E4AE0()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t sub_23C0E4AEC()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t sub_23C0E4AF8()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t sub_23C0E4B04()
{
  return MEMORY[0x24BEE4A18]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getOpaqueTypeMetadata2()
{
  return MEMORY[0x24BEE4DC8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x24BEE4DE8]();
}

uint64_t swift_getTupleTypeMetadata()
{
  return MEMORY[0x24BEE4DF0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

